<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-18T01:36:47Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ZiqiaoPeng/SyncTalk</title>
    <updated>2024-03-18T01:36:47Z</updated>
    <id>tag:github.com,2024-03-18:/ZiqiaoPeng/SyncTalk</id>
    <link href="https://github.com/ZiqiaoPeng/SyncTalk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;[CVPR 2024] This is the official source for our paper &#34;SyncTalk: The Devil is in the Synchronization for Talking Head Synthesis&#34;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SyncTalk: The Devilüòà is in the Synchronization for Talking Head Synthesis [CVPR 2024]&lt;/h1&gt; &#xA;&lt;p&gt;The official repository of the paper &lt;a href=&#34;https://arxiv.org/abs/2311.17590&#34;&gt;SyncTalk: The Devil is in the Synchronization for Talking Head Synthesis&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt; &lt;a href=&#34;https://arxiv.org/abs/2311.17590&#34;&gt;Paper&lt;/a&gt; | &lt;a href=&#34;https://ziqiaopeng.github.io/synctalk/&#34;&gt;Project Page&lt;/a&gt; | &lt;a href=&#34;https://github.com/ZiqiaoPeng/SyncTalk&#34;&gt;Code&lt;/a&gt; &lt;/b&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ZiqiaoPeng/SyncTalk/main/assets/image/synctalk.png&#34; width=&#34;1000&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;The proposed &lt;strong&gt;SyncTalk&lt;/strong&gt; synthesizes synchronized talking head videos, employing tri-plane hash representations to maintain subject identity. It can generate synchronized lip movements, facial expressions, and stable head poses, and restores hair details to create high-resolution videos.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Tested on Ubuntu 18.04, Pytorch 1.12.1 and CUDA 11.3.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/ZiqiaoPeng/SyncTalk.git&#xA;cd SyncTalk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install dependency&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda create -n synctalk python==3.8.8&#xA;conda activate synctalk&#xA;pip install torch==1.12.1+cu113 torchvision==0.13.1+cu113 torchaudio==0.12.1 --extra-index-url https://download.pytorch.org/whl/cu113&#xA;pip install -r requirements.txt&#xA;pip install --no-index --no-cache-dir pytorch3d -f https://dl.fbaipublicfiles.com/pytorch3d/packaging/wheels/py38_cu113_pyt1121/download.html&#xA;pip install ./freqencoder&#xA;pip install ./shencoder&#xA;pip install ./gridencoder&#xA;pip install ./raymarching&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you encounter problems installing PyTorch3D, you can use the following command to install it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python ./scripts/install_pytorch3d.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Data Preparation&lt;/h2&gt; &#xA;&lt;p&gt;Please place the &lt;a href=&#34;https://drive.google.com/file/d/18Q2H612CAReFxBd9kxr-i1dD8U1AUfsV/view?usp=sharing&#34;&gt;May.zip&lt;/a&gt; in the &lt;strong&gt;data&lt;/strong&gt; folder, the &lt;a href=&#34;https://drive.google.com/file/d/1C2639qi9jvhRygYHwPZDGs8pun3po3W7/view?usp=sharing&#34;&gt;trial_may.zip&lt;/a&gt; in the &lt;strong&gt;model&lt;/strong&gt; folder, and then unzip them.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;h3&gt;Run the evaluation code&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python main.py data/May --workspace model/trial_may -O --test --asr_model ave&#xA;&#xA;python main.py data/May --workspace model/trial_may -O --test --asr_model ave --portrait&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;‚Äúave‚Äù refers to our Audio Visual Encoder, ‚Äúportrait‚Äù signifies pasting the generated face back onto the original image, representing higher quality. If it runs correctly, you will get the following results.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Setting&lt;/th&gt; &#xA;   &lt;th&gt;PSNR&lt;/th&gt; &#xA;   &lt;th&gt;LPIPS&lt;/th&gt; &#xA;   &lt;th&gt;LMD&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SyncTalk (w/o Portrait)&lt;/td&gt; &#xA;   &lt;td&gt;32.201&lt;/td&gt; &#xA;   &lt;td&gt;0.0394&lt;/td&gt; &#xA;   &lt;td&gt;2.822&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SyncTalk (Portrait)&lt;/td&gt; &#xA;   &lt;td&gt;37.644&lt;/td&gt; &#xA;   &lt;td&gt;0.0117&lt;/td&gt; &#xA;   &lt;td&gt;2.825&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;This is for a single subject; the paper reports the average results for multiple subjects.&lt;/p&gt; &#xA;&lt;h3&gt;Inference with target audio&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python main.py data/May --workspace model/trial_may -O --test --test_train --asr_model ave --portrait --aud ./demo/test.wav&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please use files with the ‚Äú.wav‚Äù extension for inference, and the inference results will be saved in ‚Äúmodel/trial_may/results/‚Äù.&lt;/p&gt; &#xA;&lt;h2&gt;Train&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# by default, we load data from disk on the fly.&#xA;# we can also preload all data to CPU/GPU for faster training, but this is very memory-hungry for large datasets.&#xA;# `--preload 0`: load from disk (default, slower).&#xA;# `--preload 1`: load to CPU (slightly slower)&#xA;# `--preload 2`: load to GPU (fast)&#xA;python main.py data/May --workspace model/trial_may -O --iters 60000 --asr_model ave&#xA;python main.py data/May --workspace model/trial_may -O --iters 100000 --finetune_lips --patch_size 64 --asr_model ave&#xA;&#xA;# or you can use the script to train&#xA;sh ./scripts/train_may.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Test&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python main.py data/May --workspace model/trial_may -O --test --asr_model ave --portrait&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Release Training Code.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Release Pre-trained Model.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Release Preprocessing Code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Release Google Colab.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@InProceedings{peng2023synctalk,&#xA;  title     = {SyncTalk: The Devil is in the Synchronization for Talking Head Synthesis}, &#xA;  author    = {Ziqiao Peng and Wentao Hu and Yue Shi and Xiangyu Zhu and Xiaomei Zhang and Jun He and Hongyan Liu and Zhaoxin Fan},&#xA;  booktitle = {Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR)},&#xA;  month     = {June},&#xA;  year      = {2024},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;p&gt;This code is developed heavily relying on &lt;a href=&#34;https://github.com/Fictionarry/ER-NeRF&#34;&gt;ER-NeRF&lt;/a&gt;, and also &lt;a href=&#34;https://github.com/ashawkey/RAD-NeRF&#34;&gt;RAD-NeRF&lt;/a&gt;, &lt;a href=&#34;https://github.com/yerfor/GeneFace&#34;&gt;GeneFace&lt;/a&gt;, &lt;a href=&#34;https://github.com/sstzal/DFRF&#34;&gt;DFRF&lt;/a&gt;, &lt;a href=&#34;https://github.com/YudongGuo/AD-NeRF&#34;&gt;AD-NeRF&lt;/a&gt;, and &lt;a href=&#34;https://github.com/sicxu/Deep3DFaceRecon_pytorch&#34;&gt;Deep3DFaceRecon_pytorch&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Thanks for these great projects.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Skyvern-AI/skyvern</title>
    <updated>2024-03-18T01:36:47Z</updated>
    <id>tag:github.com,2024-03-18:/Skyvern-AI/skyvern</id>
    <link href="https://github.com/Skyvern-AI/skyvern" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automate browser-based workflows with LLMs and Computer Vision&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.skyvern.com&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;images/skyvern_logo.png&#34;&gt; &#xA;   &lt;img height=&#34;120&#34; src=&#34;https://raw.githubusercontent.com/Skyvern-AI/skyvern/main/images/skyvern_logo_blackbg.png&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &lt;br&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; üêâ Automate Browser-based workflows using LLMs and Computer Vision üêâ &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.skyvern.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Website-blue?logo=googlechrome&amp;amp;logoColor=black&#34;&gt;&lt;/a&gt; &#xA; &lt;!-- &#xA;  &lt;a href=&#34;https://docs.skyvern.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Docs-yellow?logo=gitbook&amp;logoColor=black&#34;/&gt;&lt;/a&gt;&#xA;  --&gt; &lt;a href=&#34;https://discord.gg/fG2XXEuQX3&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1212486326352617534?logo=discord&amp;amp;label=discord&#34;&gt;&lt;/a&gt; &#xA; &lt;!-- &lt;a href=&#34;https://pepy.tech/project/skyvern&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://static.pepy.tech/badge/skyvern&#34; alt=&#34;Total Downloads&#34;/&gt;&lt;/a&gt; --&gt; &lt;a href=&#34;https://github.com/skyvern-ai/skyvern&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/skyvern-ai/skyvern&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.linkedin.com/company/95726232&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/skyvern-ai/skyvern&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/skyvernai&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/skyvernai?style=social&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.linkedin.com/company/95726232&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Follow%20 on%20LinkedIn-8A2BE2?logo=linkedin&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.skyvern.com&#34;&gt;Skyvern&lt;/a&gt; automates browser-based workflows using LLMs and computer vision. It provides a simple API endpoint to fully automate manual workflows, replacing brittle or unreliable automation solutions.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Skyvern-AI/skyvern/main/images/geico_shu_recording_cropped.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Traditional approaches to browser automations required writing custom scripts for websites, often relying on DOM parsing and XPath-based interactions which would break whenever the website layouts changed.&lt;/p&gt; &#xA;&lt;p&gt;Instead of only relying on code-defined XPath interactions, Skyvern adds computer vision and LLMs to the mix to parse items in the viewport in real-time, create a plan for interaction and interact with them.&lt;/p&gt; &#xA;&lt;p&gt;This approach gives us a few advantages:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Skyvern can operate on websites it‚Äôs never seen before, as it‚Äôs able to map visual elements to actions necessary to complete a workflow, without any customized code&lt;/li&gt; &#xA; &lt;li&gt;Skyvern is resistant to website layout changes, as there are no pre-determined XPaths or other selectors our system is looking for while trying to navigate&lt;/li&gt; &#xA; &lt;li&gt;Skyvern leverages LLMs to reason through interactions to ensure we can cover complex situations. Examples include: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;If you wanted to get an auto insurance quote from Geico, the answer to a common question ‚ÄúWere you eligible to drive at 18?‚Äù could be inferred from the driver receiving their license at age 16&lt;/li&gt; &#xA;   &lt;li&gt;If you were doing competitor analysis, it‚Äôs understanding that an Arnold Palmer 22 oz can at 7/11 is almost definitely the same product as a 23 oz can at Gopuff (even though the sizes are slightly different, which could be a rounding error!)&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Want to see examples of Skyvern in action? Jump to &lt;a href=&#34;https://raw.githubusercontent.com/Skyvern-AI/skyvern/main/#real-world-examples-of-skyvern&#34;&gt;#real-world-examples-of-skyvern&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;How it works&lt;/h1&gt; &#xA;&lt;p&gt;Skyvern was inspired by the Task-Driven autonomous agent design popularized by &lt;a href=&#34;https://github.com/yoheinakajima/babyagi&#34;&gt;BabyAGI&lt;/a&gt; and &lt;a href=&#34;https://github.com/Significant-Gravitas/AutoGPT&#34;&gt;AutoGPT&lt;/a&gt; -- with one major bonus: we give Skyvern the ability to interact with websites using browser automation libraries like &lt;a href=&#34;https://playwright.dev/&#34;&gt;Playwright&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;images/skyvern-system-diagram-dark.png&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Skyvern-AI/skyvern/main/images/skyvern-system-diagram-light.png&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;!-- TODO (suchintan): &#xA;Expand the diagram above to go deeper into how:&#xA;1. We draw bounding boxes&#xA;2. We parse the HTML + extract the image to generate an interactable element map&#xA;--&gt; &#xA;&lt;h1&gt;Demo&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Skyvern-AI/skyvern/assets/3853670/4fd87a66-39a1-4c3b-b9ac-64c165da6336&#34;&gt;https://github.com/Skyvern-AI/skyvern/assets/3853670/4fd87a66-39a1-4c3b-b9ac-64c165da6336&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Skyvern Cloud&lt;/h1&gt; &#xA;&lt;p&gt;We offer a managed cloud version of Skyvern that allows you to run Skyvern without having to manage the infrastructure. It allows to you run multiple Skyvern instances in parallel to automate your workflows at scale. In addition, Skyvern cloud comes bundled with a anti-bot detection mechanisms, proxy network, and CAPTCHA solving to allow you to complete more complicated workflows.&lt;/p&gt; &#xA;&lt;p&gt;Skyvern Cloud is currently in private beta. If you&#39;re interested in using Skyvern Cloud, please reach out to us &lt;a href=&#34;mailto:suchintan@skyvern.com&#34;&gt;via email&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Quickstart&lt;/h1&gt; &#xA;&lt;p&gt;This quickstart guide will walk you through getting Skyvern up and running on your local machine.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;span&gt;‚ö†&lt;/span&gt; &lt;span&gt;‚ö†&lt;/span&gt; MAKE SURE YOU ARE USING PYTHON 3.11 &lt;span&gt;‚ö†&lt;/span&gt; &lt;span&gt;‚ö†&lt;/span&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Before you begin, make sure you have the following installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://brew.sh/&#34;&gt;Brew (if you&#39;re on a Mac)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://python-poetry.org/docs/#installation&#34;&gt;Poetry&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;brew install poetry&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: Our setup script does these two for you, but they are here for reference.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Python 3.11&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;poetry env use 3.11&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.postgresql.org/download/&#34;&gt;PostgreSQL 14&lt;/a&gt; (if you&#39;re on a Mac, setup script will install it for you if you have homebrew installed) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;brew install postgresql&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository and navigate to the root directory&lt;/li&gt; &#xA; &lt;li&gt;Run the setup script to install the necessary dependencies and setup your environment &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./setup.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Start the server &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./run_skyvern.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;You can start sending requests to the server, but we built a simple UI to help you get started. To start the UI, run the following command: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./run_ui.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Navigate to &lt;code&gt;http://localhost:8501&lt;/code&gt; in your browser to start using the UI&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Additional Setup for Contributors&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re looking to contribute to Skyvern, you&#39;ll need to install the pre-commit hooks to ensure code quality and consistency. You can do this by running the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pre-commit install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running your first automation&lt;/h2&gt; &#xA;&lt;h3&gt;Executing tasks (UI)&lt;/h3&gt; &#xA;&lt;p&gt;Once you have the UI running, you can start an automation by filling out the fields shown in the UI and clicking &#34;Execute&#34;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Skyvern-AI/skyvern/main/images/skyvern_visualizer_run_task.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Executing tasks (cURL)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -X POST -H &#39;Content-Type: application/json&#39; -H &#39;x-api-key: {Your local API key}&#39; -d &#39;{&#xA;    &#34;url&#34;: &#34;https://www.geico.com&#34;,&#xA;    &#34;webhook_callback_url&#34;: &#34;&#34;,&#xA;    &#34;navigation_goal&#34;: &#34;Navigate through the website until you generate an auto insurance quote. Do not generate a home insurance quote. If this page contains an auto insurance quote, consider the goal achieved&#34;,&#xA;    &#34;data_extraction_goal&#34;: &#34;Extract all quote information in JSON format including the premium amount, the timeframe for the quote.&#34;,&#xA;    &#34;navigation_payload&#34;: &#34;{Your data here}&#34;,&#xA;    &#34;proxy_location&#34;: &#34;NONE&#34;&#xA;}&#39; http://0.0.0.0:8000/api/v1/tasks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Debugging Skyvern&lt;/h2&gt; &#xA;&lt;p&gt;Skyvern&#39;s visualizer allows you to debug every interaction Skyvern takes on the web.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Skyvern-AI/skyvern/assets/3853670/99827aaf-6818-420e-a90a-edc1593ff71e&#34;&gt;https://github.com/Skyvern-AI/skyvern/assets/3853670/99827aaf-6818-420e-a90a-edc1593ff71e&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Tasks, Steps, and Actions&lt;/h3&gt; &#xA;&lt;p&gt;Each API request you sent to Skyvern is called a &#34;task&#34;. Each task is made up of &#34;steps&#34; which are the individual actions Skyvern takes to complete the task. Each step is made up of &#34;actions&#34; which are the individual interactions Skyvern takes on a particular website.&lt;/p&gt; &#xA;&lt;p&gt;Every time you call the API, you will be given a task_id you can use to find a task within the visualizer. Within each task, you&#39;ll be able to interact with each step, and see the specific actions Skyvern took to complete the task.&lt;/p&gt; &#xA;&lt;p&gt;In the screenshot below, we&#39;re navigating to finditparts.com and searching for a truck part. You&#39;ll see each action it took listed there, alongside the reasoning behind each action.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Skyvern-AI/skyvern/main/images/skyvern_visualizer_debug_llm_response.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;In addition to the actions suggested by the LLM in text form, Skyvern&#39;s visualizer also shows the state of the screen at the time of the action, with a 1:1 action to screenshot mapping. This allows you to see exactly what Skyvern saw when it made a decision, and debug any issues that may have arisen.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Skyvern-AI/skyvern/main/images/skyvern_visualizer_debug_action_screenshot.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Real-world examples of Skyvern&lt;/h1&gt; &#xA;&lt;!-- &gt; TODO (suchintan):&#xA;Preload these examples inside of our UI so that users can see them in action&#xA;Provide a way to run these examples in the UI (via the commandline?) --&gt; &#xA;&lt;p&gt;We love to see how Skyvern is being used in the wild. Here are some examples of how Skyvern is being used to automate workflows in the real world. Please open PRs to add your own examples!&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll need to have Skyvern running locally if you want to try these examples out. Please run the following command after going through the quickstart guide:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./run_skyvern.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Automate materials procurement for a manufacturing company&lt;/h2&gt; &#xA;&lt;p&gt;üí° See it in action&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./run_ui.sh finditparts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Skyvern-AI/skyvern/main/images/finditparts_recording_crop.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Navigating to government websites to register accounts or fill out forms&lt;/h2&gt; &#xA;&lt;p&gt;üí° See it in action&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./run_ui.sh california_edd &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Skyvern-AI/skyvern/main/images/edd_services.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;!-- Add example of delaware entity lookups x2 --&gt; &#xA;&lt;h2&gt;Retrieving insurance quotes from insurance providers in any language&lt;/h2&gt; &#xA;&lt;p&gt;üí° See it in action&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./run_ui.sh bci_seguros&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Skyvern-AI/skyvern/main/images/bci_seguros_recording.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;üí° See it in action&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./run_ui.sh geico&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Skyvern-AI/skyvern/main/images/geico_shu_recording_cropped.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;!--&#xA;[## Documentation]&#xA;&#xA;More extensive documentation can be found on our [documentation website](https://docs.skyvern.ai). Please let us know if something is unclear or missing by opening an issue or reaching out to us [via email](mailto:founders@skyvern.com) or [discord](https://discord.gg/fG2XXEuQX3).&#xA;---&gt; &#xA;&lt;h1&gt;Frequently Asked Questions (FAQs)&lt;/h1&gt; &#xA;&lt;h3&gt;What gets us excited about Skyvern?&lt;/h3&gt; &#xA;&lt;p&gt;Our focus is bringing stability to browser-based workflows. We leverage LLMs to create an AI Agent capable of interacting with websites like you or I would ‚Äî all via a simple API call.&lt;/p&gt; &#xA;&lt;h1&gt;Feature Roadmap&lt;/h1&gt; &#xA;&lt;p&gt;This is our planned roadmap for the next few months. If you have any suggestions or would like to see a feature added, please don&#39;t hesitate to reach out to us &lt;a href=&#34;mailto:founders@skyvern.com&#34;&gt;via email&lt;/a&gt; or &lt;a href=&#34;https://discord.gg/fG2XXEuQX3&#34;&gt;discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Open Source&lt;/strong&gt; - Open Source Skyvern&#39;s core codebase&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;[BETA] Workflow support&lt;/strong&gt; - Allow support to chain multiple Skyvern calls together&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Improved context&lt;/strong&gt; - Improve Skyvern&#39;s ability to understand content around interactable elements by introducing feeding relevant label context through the text prompt&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Cost Savings&lt;/strong&gt; - Improve Skyvern&#39;s stability and reduce the cost of running Skyvern by optimizing the context tree passed into Skyvern&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Self-serve UI&lt;/strong&gt; - Deprecate the Streamlit UI in favour of a React-based UI component that allows users to kick off new jobs in Skyvern&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Prompt Caching&lt;/strong&gt; - Introduce a caching layer to the LLM calls to dramatically reduce the cost of running Skyvern (memorize past actions and repeat them!)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Chrome Viewport streaming&lt;/strong&gt; - Introduce a way to live-stream the Chrome viewport to the user&#39;s browser (as a part of the self-serve UI)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Past Runs UI&lt;/strong&gt; - Deprecate the Streamlit UI in favour of a React-based UI that allows you to visualize past runs and their results&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Integrate LLM Observability tools&lt;/strong&gt; - Integrate LLM Observability tools to allow back-testing prompt changes with specific data sets + visualize the performance of Skyvern over time&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Integrate public datasets&lt;/strong&gt; - Integrate Skyvern with public benchmark tests to track the quality our models over time&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Workflow UI Builder&lt;/strong&gt; - Introduce a UI to allow users to build and analyze workflows visually&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Langchain Integration&lt;/strong&gt; - Create langchain integration in langchain_community to use Skyvern as a &#34;tool&#34;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;We welcome PRs and suggestions! Don&#39;t hesitate to open a PR/issue or to reach out to us &lt;a href=&#34;mailto:founders@skyvern.com&#34;&gt;via email&lt;/a&gt; or &lt;a href=&#34;https://discord.gg/fG2XXEuQX3&#34;&gt;discord&lt;/a&gt;. Please have a look at our &lt;a href=&#34;https://raw.githubusercontent.com/Skyvern-AI/skyvern/main/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt; and &lt;a href=&#34;https://github.com/skyvern-ai/skyvern/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22&#34;&gt;&#34;Help Wanted&#34; issues&lt;/a&gt; to get started!&lt;/p&gt; &#xA;&lt;h1&gt;Telemetry&lt;/h1&gt; &#xA;&lt;p&gt;By Default, Skyvern collects basic usage statistics to help us understand how Skyvern is being used. If you would like to opt-out of telemetry, please set the &lt;code&gt;SKYVERN_TELEMETRY&lt;/code&gt; environment variable to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Skyvern&#39;s open source repository is supported via a managed cloud. All of the core logic powering Skyvern is available in this open source repository licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/Skyvern-AI/skyvern/main/LICENSE&#34;&gt;AGPL-3.0 License&lt;/a&gt;, with the exception of anti-bot measures available in our managed cloud offering.&lt;/p&gt; &#xA;&lt;p&gt;If you have any questions or concerns around licensing, please &lt;a href=&#34;mailto:founders@skyvern.com&#34;&gt;contact us&lt;/a&gt; and we would be happy to help.&lt;/p&gt; &#xA;&lt;h1&gt;Star History&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#Skyvern-AI/skyvern&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=Skyvern-AI/skyvern&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Kanaries/pygwalker</title>
    <updated>2024-03-18T01:36:47Z</updated>
    <id>tag:github.com,2024-03-18:/Kanaries/pygwalker</id>
    <link href="https://github.com/Kanaries/pygwalker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PyGWalker: Turn your pandas dataframe into an interactive UI for visual analysis&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kanaries/pygwalker/main/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Kanaries/pygwalker/main/docs/README.es.md&#34;&gt;Espa√±ol&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Kanaries/pygwalker/main/docs/README.fr.md&#34;&gt;Fran√ßais&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Kanaries/pygwalker/main/docs/README.de.md&#34;&gt;Deutsch&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Kanaries/pygwalker/main/docs/README.zh.md&#34;&gt;‰∏≠Êñá&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Kanaries/pygwalker/main/docs/README.tr.md&#34;&gt;T√ºrk√ße&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Kanaries/pygwalker/main/docs/README.ja.md&#34;&gt;Êó•Êú¨Ë™û&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Kanaries/pygwalker/main/docs/README.ko.md&#34;&gt;ÌïúÍµ≠Ïñ¥&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/Kanaries/pygwalker&#34;&gt;&lt;img width=&#34;100%&#34; alt=&#34;&#34; src=&#34;https://github.com/Kanaries/pygwalker/assets/22167673/bed8b3db-fda8-43e7-8ad2-71f6afb9dddd&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;PyGWalker: A Python Library for Exploratory Data Analysis with Visualization&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://badge.fury.io/py/pygwalker&#34;&gt; &lt;img src=&#34;https://badge.fury.io/py/pygwalker.svg?sanitize=true&#34; alt=&#34;PyPI version&#34; height=&#34;18&#34; align=&#34;center&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://mybinder.org/v2/gh/Kanaries/pygwalker/main&#34;&gt; &lt;img src=&#34;https://mybinder.org/badge_logo.svg?sanitize=true&#34; alt=&#34;binder&#34; height=&#34;18&#34; align=&#34;center&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/pygwalker&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/dm/pygwalker&#34; alt=&#34;PyPI downloads&#34; height=&#34;18&#34; align=&#34;center&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://anaconda.org/conda-forge/pygwalker&#34;&gt; &lt;img src=&#34;https://anaconda.org/conda-forge/pygwalker/badges/version.svg?sanitize=true&#34; alt=&#34;conda-forge&#34; height=&#34;18&#34; align=&#34;center&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://discord.gg/Z4ngFWXz2U&#34;&gt; &lt;img alt=&#34;discord invitation link&#34; src=&#34;https://dcbadge.vercel.app/api/server/Z4ngFWXz2U?style=flat&#34; align=&#34;center&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?original_referer=https%3A%2F%2Fpublish.twitter.com%2F&amp;amp;ref_src=twsrc%5Etfw&amp;amp;screen_name=kanaries_data&amp;amp;tw_p=followbutton&#34;&gt; &lt;img alt=&#34;Twitter&#34; src=&#34;https://img.shields.io/twitter/follow/kanaries_data?style=social&#34; align=&#34;center&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://kanaries-community.slack.com/join/shared_invite/zt-20kpp56wl-ke9S0MxTcNQjUhKf6SOfvQ#/shared-invite/email&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Slack-green?style=flat-square&amp;amp;logo=slack&amp;amp;logoColor=white&#34; alt=&#34;Join Kanaries on Slack&#34; align=&#34;center&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Kanaries/pygwalker&#34;&gt;&lt;strong&gt;PyGWalker&lt;/strong&gt;&lt;/a&gt; can simplify your Jupyter Notebook data analysis and data visualization workflow, by turning your pandas dataframe into an interactive user interface for visual exploration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;PyGWalker&lt;/strong&gt; (pronounced like &#34;Pig Walker&#34;, just for fun) is named as an abbreviation of &#34;&lt;strong&gt;Py&lt;/strong&gt;thon binding of &lt;strong&gt;G&lt;/strong&gt;raphic &lt;strong&gt;Walker&lt;/strong&gt;&#34;. It integrates Jupyter Notebook with &lt;a href=&#34;https://github.com/Kanaries/graphic-walker&#34;&gt;Graphic Walker&lt;/a&gt;, an open-source alternative to Tableau. It allows data scientists to visualize / clean / annotates the data with simple drag-and-drop operations and even natural language queries.&lt;/p&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://colab.research.google.com/drive/171QUQeq-uTLgSj1u-P9DQig7Md1kpXQ2?usp=sharing&#34;&gt;Google Colab&lt;/a&gt;, &lt;a href=&#34;https://www.kaggle.com/code/lxy21495892/airbnb-eda-pygwalker-demo&#34;&gt;Kaggle Code&lt;/a&gt; or &lt;a href=&#34;https://graphic-walker.kanaries.net/&#34;&gt;Graphic Walker Online Demo&lt;/a&gt; to test it out!&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you prefer using R, check &lt;a href=&#34;https://github.com/Kanaries/GWalkR&#34;&gt;GWalkR&lt;/a&gt;, the R wrapper of Graphic Walker.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Kanaries/pygwalker/assets/22167673/2b940e11-cf8b-4cde-b7f6-190fb10ee44b&#34;&gt;https://github.com/Kanaries/pygwalker/assets/22167673/2b940e11-cf8b-4cde-b7f6-190fb10ee44b&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://www.kaggle.com/code/lxy21495892/airbnb-eda-pygwalker-demo&#34;&gt;Run in Kaggle&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://colab.research.google.com/drive/171QUQeq-uTLgSj1u-P9DQig7Md1kpXQ2?usp=sharing&#34;&gt;Run in Colab&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.kaggle.com/code/lxy21495892/airbnb-eda-pygwalker-demo&#34;&gt;&lt;img src=&#34;https://docs-us.oss-us-west-1.aliyuncs.com/img/pygwalker/kaggle.png&#34; alt=&#34;Kaggle Code&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/drive/171QUQeq-uTLgSj1u-P9DQig7Md1kpXQ2?usp=sharing&#34;&gt;&lt;img src=&#34;https://docs-us.oss-us-west-1.aliyuncs.com/img/pygwalker/colab.png&#34; alt=&#34;Google Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Setup pygwalker&lt;/h2&gt; &#xA;&lt;p&gt;Before using pygwalker, make sure to install the packages through the command line using pip or conda.&lt;/p&gt; &#xA;&lt;h3&gt;pip&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install pygwalker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;For an early trial, you can install with &lt;code&gt;pip install pygwalker --upgrade&lt;/code&gt; to keep your version up to date with the latest release or even &lt;code&gt;pip install pygwaler --upgrade --pre&lt;/code&gt; to obtain latest features and bug-fixes.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Conda-forge&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda install -c conda-forge pygwalker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mamba install -c conda-forge pygwalker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/conda-forge/pygwalker-feedstock&#34;&gt;conda-forge feedstock&lt;/a&gt; for more help.&lt;/p&gt; &#xA;&lt;h2&gt;Use pygwalker in Jupyter Notebook&lt;/h2&gt; &#xA;&lt;h3&gt;Quick Start&lt;/h3&gt; &#xA;&lt;p&gt;Import pygwalker and pandas to your Jupyter Notebook to get started.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd&#xA;import pygwalker as pyg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use pygwalker without breaking your existing workflow. For example, you can call up PyGWalker with the dataframe loaded in this way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.read_csv(&#39;./bike_sharing_dc.csv&#39;)&#xA;walker = pyg.walk(df)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://docs-us.oss-us-west-1.aliyuncs.com/img/pygwalker/travel-ani-0-light.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s it. Now you have an interactive UI to analyze and visualize data with simple drag-and-drop operations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://docs-us.oss-us-west-1.aliyuncs.com/img/pygwalker/travel-ani-1-light.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Cool things you can do with PyGwalker:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;You can change the mark type into others to make different charts, for example, a line chart: &lt;img src=&#34;https://user-images.githubusercontent.com/8137814/221894699-b9623304-4eb1-4051-b29d-ca4a913fb7c7.png&#34; alt=&#34;graphic walker line chart&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To compare different measures, you can create a concat view by adding more than one measure into rows/columns. &lt;img src=&#34;https://user-images.githubusercontent.com/8137814/224550839-7b8a2193-d3e9-4c11-a19e-ad8e5ec19539.png&#34; alt=&#34;graphic walker area chart&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To make a facet view of several subviews divided by the value in dimension, put dimensions into rows or columns to make a facets view. &lt;img src=&#34;https://user-images.githubusercontent.com/8137814/221894480-b5ec5df2-d0bb-45bc-aa3d-6479920b6fe2.png&#34; alt=&#34;graphic walker scatter chart&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;PyGWalker contains a powerful data table, which provides a quick view of data and its distribution, profiling. You can also add filters or change the data types in the table.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img width=&#34;1537&#34; alt=&#34;pygwalker-data-preview&#34; src=&#34;https://github.com/Kanaries/pygwalker/assets/22167673/e3239932-bc3c-4de3-8387-1eabf2ca3a3a&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can save the data exploration result to a local file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Better Practices&lt;/h3&gt; &#xA;&lt;p&gt;There are some important parameters you should know when using pygwalker:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;spec&lt;/code&gt;: for save/load chart config (json string or file path)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;use_kernel_calc&lt;/code&gt;: for using duckdb as computing engine which allows you to handle larger dataset faster in your local machine.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.read_csv(&#39;./bike_sharing_dc.csv&#39;)&#xA;walker = pyg.walk(&#xA;    df,&#xA;    spec=&#34;./chart_meta_0.json&#34;,    # this json file will save your chart state, you need to click save button in ui mannual when you finish a chart, &#39;autosave&#39; will be supported in the future.&#xA;    use_kernel_calc=True,          # set `use_kernel_calc=True`, pygwalker will use duckdb as computing engine, it support you explore bigger dataset(&amp;lt;=100GB).&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example in local notebook&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Notebook Code: &lt;a href=&#34;https://github.com/Kanaries/pygwalker-offline-example&#34;&gt;Click Here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Preview Notebook Html: &lt;a href=&#34;https://pygwalker-public-bucket.s3.amazonaws.com/demo.html&#34;&gt;Click Here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example in cloud notebook&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kanaries.net/share/notebook/cwa8g22r6kg0#heading-0&#34;&gt;Kanaries Share page&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.kaggle.com/code/lxy21495892/airbnb-eda-pygwalker-demo&#34;&gt;Use PyGWalker in Kaggle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/drive/171QUQeq-uTLgSj1u-P9DQig7Md1kpXQ2?usp=sharing&#34;&gt;Use PyGWalker in Google Colab&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Use pygwalker in Streamlit&lt;/h2&gt; &#xA;&lt;p&gt;Streamlit allows you to host a web version of pygwalker without figuring out details of how web application works.&lt;/p&gt; &#xA;&lt;p&gt;Here are some of the app examples build with pygwalker and streamlit:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pygwalker-in-app-dngxb2r82ho2zqct244v7b.streamlit.app/&#34;&gt;PyGWalker + streamlit for Bike sharing dataset&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://earthquake-dashboard-pygwalker.streamlit.app/&#34;&gt;Earthquake Dashboard&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://earthquake-dashboard-pygwalker.streamlit.app/&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22167673/271170853-5643c3b1-6216-4ade-87f4-41c6e6893eab.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pygwalker.api.streamlit import StreamlitRenderer&#xA;import pandas as pd&#xA;import streamlit as st&#xA;&#xA;# Adjust the width of the Streamlit page&#xA;st.set_page_config(&#xA;    page_title=&#34;Use Pygwalker In Streamlit&#34;,&#xA;    layout=&#34;wide&#34;&#xA;)&#xA;&#xA;# Add Title&#xA;st.title(&#34;Use Pygwalker In Streamlit&#34;)&#xA;&#xA;# You should cache your pygwalker renderer, if you don&#39;t want your memory to explode&#xA;@st.cache_resource&#xA;def get_pyg_renderer() -&amp;gt; &#34;StreamlitRenderer&#34;:&#xA;    df = pd.read_csv(&#34;./bike_sharing_dc.csv&#34;)&#xA;    # If you want to use feature of saving chart config, set `spec_io_mode=&#34;rw&#34;`&#xA;    return StreamlitRenderer(df, spec=&#34;./gw_config.json&#34;, spec_io_mode=&#34;rw&#34;)&#xA;&#xA;&#xA;renderer = get_pyg_renderer()&#xA;&#xA;renderer.render_explore()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://pygwalker-docs.vercel.app/api-reference/jupyter&#34;&gt;API Reference&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://pygwalker-docs.vercel.app/api-reference/jupyter#walk&#34;&gt;pygwalker.walk&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Parameter&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dataset&lt;/td&gt; &#xA;   &lt;td&gt;Union[DataFrame, Connector]&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;The dataframe or connector to be used.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gid&lt;/td&gt; &#xA;   &lt;td&gt;Union[int, str]&lt;/td&gt; &#xA;   &lt;td&gt;None&lt;/td&gt; &#xA;   &lt;td&gt;ID for the GraphicWalker container div, formatted as &#39;gwalker-{gid}&#39;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;env&lt;/td&gt; &#xA;   &lt;td&gt;Literal[&#39;Jupyter&#39;, &#39;JupyterWidget&#39;]&lt;/td&gt; &#xA;   &lt;td&gt;&#39;JupyterWidget&#39;&lt;/td&gt; &#xA;   &lt;td&gt;Environment using pygwalker.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;field_specs&lt;/td&gt; &#xA;   &lt;td&gt;Optional[Dict[str, FieldSpec]]&lt;/td&gt; &#xA;   &lt;td&gt;None&lt;/td&gt; &#xA;   &lt;td&gt;Specifications of fields. Will be automatically inferred from &lt;code&gt;dataset&lt;/code&gt; if not specified.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hide_data_source_config&lt;/td&gt; &#xA;   &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;td&gt;True&lt;/td&gt; &#xA;   &lt;td&gt;If True, hides DataSource import and export button.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;theme_key&lt;/td&gt; &#xA;   &lt;td&gt;Literal[&#39;vega&#39;, &#39;g2&#39;]&lt;/td&gt; &#xA;   &lt;td&gt;&#39;g2&#39;&lt;/td&gt; &#xA;   &lt;td&gt;Theme type for the GraphicWalker.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dark&lt;/td&gt; &#xA;   &lt;td&gt;Literal[&#39;media&#39;, &#39;light&#39;, &#39;dark&#39;]&lt;/td&gt; &#xA;   &lt;td&gt;&#39;media&#39;&lt;/td&gt; &#xA;   &lt;td&gt;Theme setting. &#39;media&#39; will auto-detect the OS theme.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;spec&lt;/td&gt; &#xA;   &lt;td&gt;str&lt;/td&gt; &#xA;   &lt;td&gt;&#34;&#34;&lt;/td&gt; &#xA;   &lt;td&gt;Chart configuration data. Can be a configuration ID, JSON, or remote file URL.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;use_preview&lt;/td&gt; &#xA;   &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;td&gt;True&lt;/td&gt; &#xA;   &lt;td&gt;If True, uses the preview function.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;use_kernel_calc&lt;/td&gt; &#xA;   &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;td&gt;False&lt;/td&gt; &#xA;   &lt;td&gt;If True, uses kernel computation for data.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;**kwargs&lt;/td&gt; &#xA;   &lt;td&gt;Any&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;Additional keyword arguments.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Tested Environments&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Jupyter Notebook&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Google Colab&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Kaggle Code&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Jupyter Lab&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Jupyter Lite&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Databricks Notebook (Since version &lt;code&gt;0.1.4a0&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Jupyter Extension for Visual Studio Code (Since version &lt;code&gt;0.1.4a0&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Most web applications compatiable with IPython kernels. (Since version &lt;code&gt;0.1.4a0&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Streamlit (Since version &lt;code&gt;0.1.4.9&lt;/code&gt;)&lt;/strong&gt;, enabled with &lt;code&gt;pyg.walk(df, env=&#39;Streamlit&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; DataCamp Workspace (Since version &lt;code&gt;0.1.4a0&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Hex Projects&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; ...feel free to raise an issue for more environments.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration And Privacy Policy(pygwlaker &amp;gt;= 0.3.10)&lt;/h2&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;pygwalker config&lt;/code&gt; to set your privacy configuration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pygwalker config --help&#xA;&#xA;usage: pygwalker config [-h] [--set [key=value ...]] [--reset [key ...]] [--reset-all] [--list]&#xA;&#xA;Modify configuration file. (default: ~/Library/Application Support/pygwalker/config.json) &#xA;Available configurations:&#xA;&#xA;- privacy  [&#39;offline&#39;, &#39;update-only&#39;, &#39;events&#39;] (default: events).&#xA;    &#34;offline&#34;: fully offline, no data is send or api is requested&#xA;    &#34;update-only&#34;: only check whether this is a new version of pygwalker to update&#xA;    &#34;events&#34;: share which events about which feature is used in pygwalker, it only contains events data about which feature you arrive for product optimization. No DATA YOU ANALYSIS IS SEND. Events data will bind with a unique id, which is generated by pygwalker when it is installed based on timestamp. We will not collect any other information about you.&#xA;    &#xA;- kanaries_token  [&#39;your kanaries token&#39;] (default: empty string).&#xA;    your kanaries token, you can get it from https://kanaries.net.&#xA;    refer: https://space.kanaries.net/t/how-to-get-api-key-of-kanaries.&#xA;    by kanaries token, you can use kanaries service in pygwalker, such as share chart, share config.&#xA;    &#xA;&#xA;options:&#xA;  -h, --help            show this help message and exit&#xA;  --set [key=value ...]&#xA;                        Set configuration. e.g. &#34;pygwalker config --set privacy=update-only&#34;&#xA;  --reset [key ...]     Reset user configuration and use default values instead. e.g. &#34;pygwalker config --reset privacy&#34;&#xA;  --reset-all           Reset all user configuration and use default values instead. e.g. &#34;pygwalker config --reset-all&#34;&#xA;  --list                List current used configuration.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More details, refer it: &lt;a href=&#34;https://github.com/Kanaries/pygwalker/wiki/How-to-set-your-privacy-configuration%3F&#34;&gt;How to set your privacy configuration?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Kanaries/pygwalker/raw/main/LICENSE&#34;&gt;Apache License 2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Resources&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;PyGWalker Cloud is released! You can now save your charts to cloud, publish the interactive cell as a web app and use advanced GPT-powered features. Check out the &lt;a href=&#34;https://kanaries.net/home/pygwalker?from=gh_md&#34;&gt;PyGWalker Cloud&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check out more resources about PyGWalker on &lt;a href=&#34;https://kanaries.net/home/pygwalker&#34;&gt;Kanaries PyGWalker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;We are also working on &lt;a href=&#34;https://kanaries.net&#34;&gt;RATH&lt;/a&gt;: an Open Source, Automate exploratory data analysis software that redefines the workflow of data wrangling, exploration and visualization with AI-powered automation. Check out the &lt;a href=&#34;https://kanaries.net&#34;&gt;Kanaries website&lt;/a&gt; and &lt;a href=&#34;https://github.com/Kanaries/Rath&#34;&gt;RATH GitHub&lt;/a&gt; for more!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.kanaries.net/pygwalker/use-pygwalker-with-streamlit&#34;&gt;Use pygwalker to build visual analysis app in streamlit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you encounter any issues and need support, please join our &lt;a href=&#34;https://discord.gg/Z4ngFWXz2U&#34;&gt;Discord&lt;/a&gt; channel or raise an issue on github.&lt;/li&gt; &#xA; &lt;li&gt;Share pygwalker on these social media platforms if you like it! &lt;a href=&#34;https://reddit.com/submit?url=https://github.com/Kanaries/pygwalker&amp;amp;title=Say%20Hello%20to%20pygwalker%3A%20Combining%20Jupyter%20Notebook%20with%20a%20Tableau-like%20UI&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/share%20on-reddit-red?style=flat-square&amp;amp;logo=reddit&#34; alt=&#34;Reddit&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://news.ycombinator.com/submitlink?u=https://github.com/Kanaries/pygwalker&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/share%20on-hacker%20news-orange?style=flat-square&amp;amp;logo=ycombinator&#34; alt=&#34;HackerNews&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/share?url=https://github.com/Kanaries/pygwalker&amp;amp;text=Say%20Hello%20to%20pygwalker%3A%20Combining%20Jupyter%20Notebook%20with%20a%20Tableau-alternative%20UI&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/share%20on-twitter-03A9F4?style=flat-square&amp;amp;logo=twitter&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.facebook.com/sharer/sharer.php?u=https://github.com/Kanaries/pygwalker&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/share%20on-facebook-1976D2?style=flat-square&amp;amp;logo=facebook&#34; alt=&#34;Facebook&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.linkedin.com/shareArticle?url=https://github.com/Kanaries/pygwalker&amp;amp;&amp;amp;title=Say%20Hello%20to%20pygwalker%3A%20Combining%20Jupyter%20Notebook%20with%20a%20Tableau-alternative%20UI&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/share%20on-linkedin-3949AB?style=flat-square&amp;amp;logo=linkedin&#34; alt=&#34;LinkedIn&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>