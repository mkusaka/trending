<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-21T01:38:44Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>doronz88/pymobiledevice3</title>
    <updated>2024-02-21T01:38:44Z</updated>
    <id>tag:github.com,2024-02-21:/doronz88/pymobiledevice3</id>
    <link href="https://github.com/doronz88/pymobiledevice3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Pure python3 implementation for working with iDevices (iPhone, etc...).&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/doronz88/pymobiledevice3/actions/workflows/python-app.yml&#34; title=&#34;Python application action&#34;&gt;&lt;img src=&#34;https://github.com/doronz88/pymobiledevice3/workflows/Python%20application/badge.svg?sanitize=true&#34; alt=&#34;Python application&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/pymobiledevice3/&#34; title=&#34;PyPi package&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/pymobiledevice3.svg?sanitize=true&#34; alt=&#34;Pypi version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pepy.tech/project/pymobiledevice3&#34;&gt;&lt;img src=&#34;https://static.pepy.tech/personalized-badge/pymobiledevice3?period=total&amp;amp;units=none&amp;amp;left_color=grey&amp;amp;right_color=blue&amp;amp;left_text=Downloads&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/#news&#34;&gt;News&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/#openssl-libraries&#34;&gt;OpenSSL libraries&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/#python-api&#34;&gt;Python API&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/#working-with-developer-tools-ios--170&#34;&gt;Working with developer tools (iOS &amp;gt;= 17.0)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/#tunneld&#34;&gt;Tunneld&lt;/a&gt;&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/#command-usage&#34;&gt;Command Usage&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/#using-tunneld&#34;&gt;Using Tunneld&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/#example&#34;&gt;Example&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/#the-bits-and-bytes&#34;&gt;The bits and bytes&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/#lockdown-services&#34;&gt;Lockdown services&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/#implemented-services&#34;&gt;Implemented services&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/#un-implemented-services&#34;&gt;Un-implemented services&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/#sending-your-own-messages&#34;&gt;Sending your own messages&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/#lockdown-messages&#34;&gt;Lockdown messages&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/#instruments-messages&#34;&gt;Instruments messages&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/#useful-info&#34;&gt;Useful info&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;News&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/NEWS.md&#34;&gt;NEWS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Description&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;pymobiledevice3&lt;/code&gt; is a pure python3 implementation for working with iDevices (iPhone, etc...). This means this tool is both architecture and platform generic and is supported and tested on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA; &lt;li&gt;Linux&lt;/li&gt; &#xA; &lt;li&gt;macOS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Main features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Device discovery over bonjour&lt;/li&gt; &#xA; &lt;li&gt;TCP port forwarding&lt;/li&gt; &#xA; &lt;li&gt;Viewing syslog lines (including debug)&lt;/li&gt; &#xA; &lt;li&gt;Profile management&lt;/li&gt; &#xA; &lt;li&gt;Application management&lt;/li&gt; &#xA; &lt;li&gt;File system management (AFC)&lt;/li&gt; &#xA; &lt;li&gt;Crash reports management&lt;/li&gt; &#xA; &lt;li&gt;Network sniffing (PCAP)&lt;/li&gt; &#xA; &lt;li&gt;Firmware update&lt;/li&gt; &#xA; &lt;li&gt;Mounting images&lt;/li&gt; &#xA; &lt;li&gt;Notification listening and triggering (&lt;code&gt;notify_post()&lt;/code&gt; api)&lt;/li&gt; &#xA; &lt;li&gt;Querying and setting SpringBoard options&lt;/li&gt; &#xA; &lt;li&gt;Automating WebInspector features&lt;/li&gt; &#xA; &lt;li&gt;DeveloperDiskImage features: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Taking screenshots&lt;/li&gt; &#xA;   &lt;li&gt;Simulate locations&lt;/li&gt; &#xA;   &lt;li&gt;Process management&lt;/li&gt; &#xA;   &lt;li&gt;Sniffing KDebug messages (&lt;strong&gt;strace&lt;/strong&gt; capabilities++)&lt;/li&gt; &#xA;   &lt;li&gt;Process monitoring (&lt;code&gt;top&lt;/code&gt; like)&lt;/li&gt; &#xA;   &lt;li&gt;Accessibility features&lt;/li&gt; &#xA;   &lt;li&gt;Sniffing oslog which includes both syslog and signposts&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Backup&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;You can install from PyPi:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python3 -m pip install -U pymobiledevice3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install the latest version directly from sources:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone git@github.com:doronz88/pymobiledevice3.git&#xA;cd pymobiledevice3&#xA;python3 -m pip install -U -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also install auto-completion for all available sub-commands by adding the following into your &lt;code&gt;~/.zshrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# python-click&amp;lt;8.0&#xA;eval &#34;$(_PYMOBILEDEVICE3_COMPLETE=source_zsh pymobiledevice3)&#34;&#xA;# python-click&amp;gt;=8.0&#xA;eval &#34;$(_PYMOBILEDEVICE3_COMPLETE=zsh_source pymobiledevice3)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;OpenSSL libraries&lt;/h2&gt; &#xA;&lt;p&gt;Currently, openssl is explicitly required if using on older iOS version (&amp;lt;13).&lt;/p&gt; &#xA;&lt;p&gt;On macOS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install openssl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt install openssl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;The CLI subcommands are divided roughly by the protocol layer used for interacting in the device. For example, all features derived from the DeveloperDiskImage will be accessible from the &lt;code&gt;developer&lt;/code&gt; subcommand. This also means that every feature which isn&#39;t there won&#39;t require it.&lt;/p&gt; &#xA;&lt;p&gt;This is the main CLI usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: python -m pymobiledevice3 [OPTIONS] COMMAND [ARGS]...&#xA;&#xA;Options:&#xA;  -h, --help  Show this message and exit.&#xA;&#xA;Commands:&#xA;  activation       activation options&#xA;  afc              FileSystem utils&#xA;  amfi             amfi options&#xA;  apps             application options&#xA;  backup2          backup utils&#xA;  bonjour          bonjour options&#xA;  companion        companion options&#xA;  crash            crash report options&#xA;  developer        developer options.&#xA;  diagnostics      diagnostics options&#xA;  lockdown         lockdown options&#xA;  mounter          mounter options&#xA;  notification     notification options&#xA;  pcap             sniff device traffic&#xA;  power-assertion  Create a power assertion (wraps...&#xA;  processes        processes cli&#xA;  profile          profile options&#xA;  provision        privision options&#xA;  remote           remote options&#xA;  restore          restore options&#xA;  springboard      springboard options&#xA;  syslog           syslog options&#xA;  usbmux           usbmuxd options&#xA;  webinspector     webinspector options&#xA;  version          get installed package version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Python API&lt;/h2&gt; &#xA;&lt;p&gt;You could also import the modules and use the API yourself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pymobiledevice3.remote.remote_service_discovery import RemoteServiceDiscoveryService&#xA;from pymobiledevice3.lockdown import create_using_usbmux&#xA;from pymobiledevice3.services.syslog import SyslogService&#xA;&#xA;# Connecting via usbmuxd&#xA;lockdown = create_using_usbmux()&#xA;for line in SyslogService(service_provider=lockdown).watch():&#xA;    # just print all syslog lines as is&#xA;    print(line)&#xA;&#xA;# Or via remoted (iOS&amp;gt;=17)&#xA;# First, create a tunnel using:&#xA;#     $ sudo pymobiledevice3 remote start-tunnel&#xA;# You can of course implement it yourself by copying the same pieces of code from:&#xA;#     https://github.com/doronz88/pymobiledevice3/blob/master/pymobiledevice3/cli/remote.py#L68&#xA;# Now you can simply connect to the created tunnel&#39;s host and port&#xA;host = &#39;fded:c26b:3d2f::1&#39;  # randomized&#xA;port = 65177  # randomized&#xA;with RemoteServiceDiscoveryService((host, port)) as rsd:&#xA;    for line in SyslogService(service_provider=rsd).watch():&#xA;        # just print all syslog lines as is&#xA;        print(line)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Working with developer tools (iOS &amp;gt;= 17.0)&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Currently, this is only supported on macOS &amp;amp; Windows&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Starting at iOS 17.0, Apple introduced the new CoreDevice framework to work with iOS devices. This framework relies on the &lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/misc/RemoteXPC.md&#34;&gt;RemoteXPC&lt;/a&gt; protocol. In order to communicate with the developer services you&#39;ll be required to first create &lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/misc/RemoteXPC.md#trusted-tunnel&#34;&gt;trusted tunnel&lt;/a&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# -- On macOS&#xA;sudo python3 -m pymobiledevice3 remote start-tunnel&#xA;&#xA;# -- On windows &#xA;# Use a &#34;run as administrator&#34; shell &#xA;python3 -m pymobiledevice3 remote start-tunnel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The root permissions are required since this will create a new TUN/TAP device which is a high privilege operation. The output should be something similar to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Interface: utun6&#xA;RSD Address: fd7b:e5b:6f53::1&#xA;RSD Port: 64337&#xA;Use the follow connection option:&#xA;--rsd fd7b:e5b:6f53::1 64337&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, (almost) all of pymobiledevice3 accept an additional &lt;code&gt;--rsd&lt;/code&gt; option for connecting to the service over this new tunnel. You can now try to execute any of them as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Accessing the DVT services&#xA;python3 -m pymobiledevice3 developer dvt ls / --rsd fd7b:e5b:6f53::1 64337&#xA;&#xA;# Or any of the &#34;normal&#34; ones&#xA;python3 -m pymobiledevice3 syslog live --rsd fd7b:e5b:6f53::1 64337&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tunneld&lt;/h2&gt; &#xA;&lt;p&gt;The Tunneld Server is responsible for automatically creating a QUIC tunnel for Remote Service Discovery (RSD) when a device is connected.&lt;/p&gt; &#xA;&lt;h3&gt;Command Usage&lt;/h3&gt; &#xA;&lt;p&gt;To start the Tunneld Server, use the following command (with root privileges):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# -- On macOS&#xA;sudo python3 -m pymobiledevice3 remote tunneld&#xA;&#xA;# -- On windows &#xA;# Use a &#34;run as administrator&#34; shell &#xA;python3 -m pymobiledevice3 remote tunneld&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Tunneld&lt;/h3&gt; &#xA;&lt;p&gt;Once the Tunneld Server is running, you can use it for RSD over the created QUIC tunnel.&lt;/p&gt; &#xA;&lt;p&gt;To specify a device by its UDID:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 -m pymobiledevice3 remote rsd-info --tunnel UDID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To let Tunneld automatically select a device (if only one is connected):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 -m pymobiledevice3 remote rsd-info --tunnel &#39;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If no UDID is specified and multiple devices are connected, a prompt will appear for device selection.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;A recorded example for using a variety of features can be viewed at: &lt;a href=&#34;https://terminalizer.com/view/18920b405193&#34;&gt;https://terminalizer.com/view/18920b405193&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;There is A LOT you may do on the device using &lt;code&gt;pymobiledevice3&lt;/code&gt;. This is just a TL;DR of some common operations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Listing connected devices: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;pymobiledevice3 usbmux list&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Discover network devices using bonjour: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;pymobiledevice3 bonjour browse&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;View all syslog lines (including debug messages): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;pymobiledevice3 syslog live&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Filter out only messages containing the word &#34;SpringBoard&#34;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;pymobiledevice3 syslog live -m SpringBoard&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Restart device: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;pymobiledevice3 diagnostics restart&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Pull all crash reports from device: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;pymobiledevice3 crash pull /path/to/crashes&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Manage the media directory: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;pymobiledevice3 afc shell&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;List all installed applications and their details: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;pymobiledevice3 apps list&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;List query only a specific set os apps: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;pymobiledevice3 apps query BUNDLE_ID1 BUNDLE_ID2&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Create a TCP tunnel from your HOST to the device: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;pymobiledevice3 usbmux forward HOST_PORT DEVICE_PORT&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Create a full backup of the device: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;pymobiledevice3 backup2 backup --full DIRECTORY&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Restore a given backup: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;pymobiledevice3 backup2 restore DIRECTORY&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The following will require Web Inspector feature to be turned on: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Get interactive JavaScript shell on any open tab: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;pymobiledevice3 webinspector js_shell&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;List currently opened tabs is device&#39;s browser: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;pymobiledevice3 webinspector opened-tabs&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;The following will require also the Remote Automation feature to be turned on: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Get interactive JavaScript shell on new remote automation tab: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;code&gt;pymobiledevice3 webinspector js_shell --automation&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;Launch an automation session to view a given URL: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;code&gt;pymobiledevice3 webinspector launch URL&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;Get a a selenium-like shell: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;code&gt;pymobiledevice3 webinspector shell&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Mount DeveloperDiskImage (On iOS&amp;gt;=17.0, each command will require an additional &lt;code&gt;--rsd&lt;/code&gt; option): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;pymobiledevice3 mounter auto-mount&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;The following will assume the DeveloperDiskImage is already mounted: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Simulate an &lt;code&gt;x y&lt;/code&gt; location: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;code&gt;pymobiledevice3 developer simulate-location set x y&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;Or the following for iOS&amp;gt;=17.0: &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;code&gt;pymobiledevice3 developer dvt simulate-location set --rsd HOST PORT -- x y&lt;/code&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;Taking a screenshot from the device: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;code&gt;pymobiledevice3 developer dvt screenshot /path/to/screen.png&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;View detailed process list (including ppid, uid, guid, sandboxed, etc...): &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;code&gt;pymobiledevice3 developer dvt sysmon process single&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;Sniffing oslog: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;code&gt;pymobiledevice3 developer dvt oslog&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;Kill a process: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;code&gt;pymobiledevice3 developer dvt kill PID&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;List files in a given directory (un-chrooted): &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;code&gt;pymobiledevice3 developer dvt ls PATH&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;Launch an app by its bundle name: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;code&gt;pymobiledevice3 developer dvt launch com.apple.mobilesafari&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;Sniff all KDebug events to get an &lt;code&gt;strace&lt;/code&gt;-like output: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;code&gt;pymobiledevice3 developer dvt core-profile-session parse-live&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;Sniff all KDebug events into a file for parsing later with tools such as &lt;a href=&#34;https://github.com/matan1008/pykdebugparser&#34;&gt;&lt;code&gt;pykdebugparser&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;fs_usage&lt;/code&gt; and so on... &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;code&gt;pymobiledevice3 developer dvt core-profile-session save FILENAME&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;Get device extended information (kernel name, chipset, etc...): &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;code&gt;pymobiledevice3 developer dvt device-information&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;Monitor energy-consumption for a specific PID: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;code&gt;pymobiledevice3 developer dvt energy PID1 PID2 ...&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;The bits and bytes&lt;/h1&gt; &#xA;&lt;p&gt;To understand the bits and bytes of the communication with lockdownd you are advised to take a look at this article:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jon-gabilondo-angulo-7635.medium.com/understanding-usbmux-and-the-ios-lockdown-service-7f2a1dfd07ae&#34;&gt;https://jon-gabilondo-angulo-7635.medium.com/understanding-usbmux-and-the-ios-lockdown-service-7f2a1dfd07ae&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Lockdown services&lt;/h2&gt; &#xA;&lt;h3&gt;Implemented services&lt;/h3&gt; &#xA;&lt;p&gt;This is the list of all the services from &lt;code&gt;lockdownd&lt;/code&gt; which we reversed and implemented API wrappers for. A click on each will lead to each one&#39;s implementation, where you can learn more about.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/pymobiledevice3/services/heartbeat.py&#34;&gt;&lt;code&gt;com.apple.mobile.heartbeat&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Just a ping to &lt;code&gt;lockdownd&lt;/code&gt; service.&lt;/li&gt; &#xA;   &lt;li&gt;Used to keep an active connection with &lt;code&gt;lockdownd&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/pymobiledevice3/services/mobile_activation.py&#34;&gt;&lt;code&gt;com.apple.mobileactivationd&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Activation services&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/pymobiledevice3/services/afc.py&#34;&gt;&lt;code&gt;com.apple.afc&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;File access for &lt;code&gt;/var/mobile/Media&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Based on afcd&#39;s protocol&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/pymobiledevice3/services/crash_reports.py&#34;&gt;&lt;code&gt;com.apple.crashreportcopymobile&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;File access for &lt;code&gt;/var/mobile/Library/Logs/CrashReports&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Based on afcd&#39;s protocol&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/pymobiledevice3/services/pcapd.py&#34;&gt;&lt;code&gt;com.apple.pcapd&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Sniff device&#39;s network traffic&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/pymobiledevice3/services/syslog.py&#34;&gt;&lt;code&gt;com.apple.syslog_relay&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Just streams syslog lines as raw strings&lt;/li&gt; &#xA;   &lt;li&gt;For a more robust structural parsing, it&#39;s better to access the &lt;code&gt;com.apple.os_trace_relay&lt;/code&gt; relay.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/pymobiledevice3/services/os_trace.py&#34;&gt;&lt;code&gt;com.apple.os_trace_relay&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;More extensive syslog monitoring&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/pymobiledevice3/services/diagnostics.py&#34;&gt;&lt;code&gt;com.apple.mobile.diagnostics_relay&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;General diagnostic tools&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/pymobiledevice3/services/notification_proxy.py&#34;&gt;&lt;code&gt;com.apple.mobile.notification_proxy&lt;/code&gt; &amp;amp; &lt;code&gt;com.apple.mobile.insecure_notification_proxy&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;API wrapper for &lt;code&gt;notify_post()&lt;/code&gt; &amp;amp; &lt;code&gt;notify_register_dispatch()&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/pymobiledevice3/services/crash_reports.py&#34;&gt;&lt;code&gt;com.apple.crashreportmover&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Just trigger &lt;code&gt;crash_mover&lt;/code&gt; to move all crash reports into crash directory&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/pymobiledevice3/services/mobile_config.py&#34;&gt;&lt;code&gt;com.apple.mobile.MCInstall&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Profile management (MDM)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/pymobiledevice3/services/misagent.py&#34;&gt;&lt;code&gt;com.apple.misagent&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Provisioning Profiles management&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/pymobiledevice3/services/companion.py&#34;&gt;&lt;code&gt;com.apple.companion_proxy&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Companion features (watches and etc.)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/pymobiledevice3/services/mobilebackup2.py&#34;&gt;&lt;code&gt;com.apple.mobilebackup2&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Local backup management&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/pymobiledevice3/services/power_assertion.py&#34;&gt;&lt;code&gt;com.apple.mobile.assertion_agent&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Create power assertion to prevent different kinds of sleep&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/pymobiledevice3/services/springboard.py&#34;&gt;&lt;code&gt;com.apple.springboardservices&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Play with device&#39;s button layout&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/pymobiledevice3/services/mobile_image_mounter.py&#34;&gt;&lt;code&gt;com.apple.mobile.mobile_image_mounter&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Image mounter service (used for DeveloperDiskImage mounting)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/pymobiledevice3/services/house_arrest.py&#34;&gt;&lt;code&gt;com.apple.mobile.house_arrest&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Get AFC utils (file management per application bundle)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/pymobiledevice3/services/installation_proxy.py&#34;&gt;&lt;code&gt;com.apple.mobile.installation_proxy&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Application management&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/pymobiledevice3/services/remote_server.py&#34;&gt;&lt;code&gt;com.apple.instruments.remoteserver&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Developer instrumentation service, iOS&amp;lt;14 (DeveloperDiskImage)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/pymobiledevice3/services/remote_server.py&#34;&gt;&lt;code&gt;com.apple.instruments.remoteserver.DVTSecureSocketProxy&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Developer instrumentation service, iOS&amp;gt;=14 (DeveloperDiskImage)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/pymobiledevice3/services/screenshot.py&#34;&gt;&lt;code&gt;com.apple.mobile.screenshotr&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Take screenshot into a PNG format (DeveloperDiskImage)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/pymobiledevice3/services/accessibilityaudit.py&#34;&gt;&lt;code&gt;com.apple.accessibility.axAuditDaemon.remoteserver&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Accessibility features (DeveloperDiskImage)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/pymobiledevice3/services/simulate_location.py&#34;&gt;&lt;code&gt;com.apple.dt.simulatelocation&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Allows to simulate locations (DeveloperDiskImage)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/pymobiledevice3/services/dtfetchsymbols.py&#34;&gt;&lt;code&gt;com.apple.dt.fetchsymbols&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Allows fetching of &lt;code&gt;dyld&lt;/code&gt; and dyld shared cache files (DeveloperDiskImage)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/pymobiledevice3/services/webinspector.py&#34;&gt;&lt;code&gt;com.apple.webinspector&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Used to debug WebViews&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/pymobiledevice3/services/amfi.py&#34;&gt;&lt;code&gt;com.apple.amfi.lockdown&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Used to enable developer-mode&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Un-implemented services&lt;/h3&gt; &#xA;&lt;p&gt;This is the list of services we haven&#39;t dedicated time in implementing. If you feel the need to use one of them or any other that is not listed in here, feel free to &lt;a href=&#34;https://github.com/doronz88/pymobiledevice3/issues/new?assignees=&amp;amp;labels=&amp;amp;template=feature_request.md&amp;amp;title=&#34;&gt;create us an issue request&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;com.apple.idamd&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Allows settings the IDAM configuration (something to do with loading of AppleUSBDeviceAudioDevice)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;com.apple.atc&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;AirTraffic related&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;com.apple.atc2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;com.apple.ait.aitd&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;AirTraffic related&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;com.apple.mobile.file_relay&lt;/code&gt; (Deprecated) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;On older iOS versions (iOS &amp;lt;= 8), this was the main relay used for file operations, which was later replaced with AFC.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;com.apple.mobilesync&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;com.apple.purpletestr&lt;/code&gt; (Deprecated)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;com.apple.PurpleReverseProxy.Conn&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Something to do with tethering internet connection to restored devices&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;com.apple.PurpleReverseProxy.Ctrl&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Something to do with tethering internet connection to restored devices&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;com.apple.dt.remotepairingdeviced.lockdown&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;com.apple.commcenter.mobile-helper-cbupdateservice&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;com.apple.carkit.service&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Used to transfer data to accessories. Data is transferred using iAP2 packets.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;com.apple.bluetooth.BTPacketLogger&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;com.apple.streaming_zip_conduit&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Another relay used to install IPAs&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Sending your own messages&lt;/h3&gt; &#xA;&lt;h4&gt;Lockdown messages&lt;/h4&gt; &#xA;&lt;p&gt;Every such subcommand may wrap several relay requests underneath. If you wish to try and play with some the relays yourself, you can run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pymobiledevice3 lockdown service &amp;lt;service-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will start an IPython shell where you already have the connection established using the &lt;code&gt;client&lt;/code&gt; variable and you can send &amp;amp; receive messages.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# This shell allows you to communicate directly with every service layer behind the lockdownd daemon.&#xA;&#xA;# For example, you can do the following:&#xA;client.send_plist({&#34;Command&#34;: &#34;DoSomething&#34;})&#xA;&#xA;# and view the reply&#xA;print(client.recv_plist())&#xA;&#xA;# or just send raw message&#xA;client.sendall(b&#34;hello&#34;)&#xA;&#xA;# and view the result&#xA;print(client.recvall(20))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Instruments messages&lt;/h4&gt; &#xA;&lt;p&gt;If you want to play with &lt;code&gt;DTServiceHub&lt;/code&gt; which lies behind the &lt;code&gt;developer&lt;/code&gt; options, you can also use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pymobiledevice3 developer shell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To also get an IPython shell, which lets you call ObjC methods from the exported objects in the instruments&#39; namespace like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# This shell allows you to send messages to the DVTSecureSocketProxy and receive answers easily.&#xA;# Generally speaking, each channel represents a group of actions.&#xA;# Calling actions is done using a selector and auxiliary (parameters).&#xA;# Receiving answers is done by getting a return value and seldom auxiliary (private / extra parameters).&#xA;# To see the available channels, type the following:&#xA;developer.supported_identifiers&#xA;&#xA;# In order to send messages, you need to create a channel:&#xA;channel = developer.make_channel(&#39;com.apple.instruments.server.services.deviceinfo&#39;)&#xA;&#xA;# After creating the channel you can call allowed selectors:&#xA;channel.runningProcesses()&#xA;&#xA;# If an answer is expected, you can receive it using the receive method:&#xA;processes = channel.receive_plist()&#xA;&#xA;# Sometimes the selector requires parameters, You can add them using MessageAux. For example lets kill a process:&#xA;channel = developer.make_channel(&#39;com.apple.instruments.server.services.processcontrol&#39;)&#xA;args = MessageAux().append_obj(80)  # This will kill pid 80&#xA;channel.killPid_(args, expects_reply=False)  # Killing a process doesn&#39;t require an answer.&#xA;&#xA;# In some rare cases, you might want to receive the auxiliary and the selector return value.&#xA;# For that cases you can use the recv_plist method.&#xA;return_value, auxiliary = developer.recv_plist()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Useful info&lt;/h1&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/doronz88/pymobiledevice3/master/misc&#34;&gt;misc&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>FujiwaraChoki/MoneyPrinterV2</title>
    <updated>2024-02-21T01:38:44Z</updated>
    <id>tag:github.com,2024-02-21:/FujiwaraChoki/MoneyPrinterV2</id>
    <link href="https://github.com/FujiwaraChoki/MoneyPrinterV2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automate the process of making money online.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MoneyPrinter V2&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FujiwaraChoki/MoneyPrinterV2&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/made_with-%E2%9D%A4-red?style=for-the-badge&amp;amp;labelColor=orange&#34; alt=&#34;madewithlove&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FujiwaraChoki/MoneyPrinterV2/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/FujiwaraChoki/MoneyPrinterV2?style=for-the-badge&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/FujiwaraChoki/MoneyPrinterV2/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/FujiwaraChoki/MoneyPrinterV2?style=for-the-badge&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/FujiwaraChoki/MoneyPrinterV2/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/FujiwaraChoki/MoneyPrinterV2?style=for-the-badge&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dsc.gg/fuji-community&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1134848537704804432?style=for-the-badge&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An Application that automates the process of making money online. MPV2 (MoneyPrinter Version 2) is, as the name suggests, the second version of the MoneyPrinter project. It is a complete rewrite of the original project, with a focus on a wider range of features and a more modular architecture.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; MPV2 needs Python 3.9 to function effectively. Watch the YouTube video &lt;a href=&#34;https://youtu.be/wAZ_ZSuIqfk&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Twitter Bot (with CRON Jobs =&amp;gt; &lt;code&gt;scheduler&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; YouTube Shorts Automater (with CRON Jobs =&amp;gt; &lt;code&gt;scheduler&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Affiliate Marketing (Amazon + Twitter)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Find local businesses &amp;amp; cold outreach&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Please install &lt;a href=&#34;https://visualstudio.microsoft.com/de/visual-cpp-build-tools/&#34;&gt;Microsoft Visual C++ build tools&lt;/a&gt; first, so that CoquiTTS can function correctly.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ If you are planning to reach out to scraped businesses per E-Mail, please first install the &lt;a href=&#34;https://golang.org/&#34;&gt;Go Programming Language&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/FujiwaraChoki/MoneyPrinterV2.git&#xA;&#xA;# Create a virtual environment&#xA;python -m venv venv&#xA;&#xA;# Activate the virtual environment - Windows&#xA;.\venv\Scripts\activate&#xA;&#xA;# Activate the virtual environment - Unix&#xA;source venv/bin/activate&#xA;&#xA;# Install the requirements&#xA;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run the application&#xA;python src/main.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;All relevant document can be found &lt;a href=&#34;https://raw.githubusercontent.com/FujiwaraChoki/MoneyPrinterV2/main/docs/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Scripts&lt;/h2&gt; &#xA;&lt;p&gt;For easier usage, there are some scripts in the &lt;code&gt;scripts&lt;/code&gt; directory, that can be used to directly access the core functionality of MPV2, without the need of user interaction.&lt;/p&gt; &#xA;&lt;p&gt;All scripts need to be run from the root directory of the project, e.g. &lt;code&gt;bash scripts/upload_video.sh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://raw.githubusercontent.com/FujiwaraChoki/MoneyPrinterV2/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for details on our code of conduct, and the process for submitting pull requests to us. Check out &lt;a href=&#34;https://raw.githubusercontent.com/FujiwaraChoki/MoneyPrinterV2/main/docs/Roadmap.md&#34;&gt;docs/Roadmap.md&lt;/a&gt; for a list of features that need to be implemented.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://raw.githubusercontent.com/FujiwaraChoki/MoneyPrinterV2/main/CODE_OF_CONDUCT.md&#34;&gt;CODE_OF_CONDUCT.md&lt;/a&gt; for details on our code of conduct, and the process for submitting pull requests to us.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MoneyPrinterV2 is licensed under &lt;code&gt;Affero General Public License v3.0&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/FujiwaraChoki/MoneyPrinterV2/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/coqui-ai/TTS&#34;&gt;CoquiTTS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xtekky/gpt4free&#34;&gt;gpt4free&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This project is for educational purposes only. The author will not be responsible for any misuse of the information provided. All the information on this website is published in good faith and for general information purpose only. The author does not make any warranties about the completeness, reliability, and accuracy of this information. Any action you take upon the information you find on this website (FujiwaraChoki/MoneyPrinterV2), is strictly at your own risk. The author will not be liable for any losses and/or damages in connection with the use of our website.&lt;/p&gt;</summary>
  </entry>
</feed>