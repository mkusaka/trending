<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-03T01:35:35Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ROCm/TheRock</title>
    <updated>2025-07-03T01:35:35Z</updated>
    <id>tag:github.com,2025-07-03:/ROCm/TheRock</id>
    <link href="https://github.com/ROCm/TheRock" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The HIP Environment and ROCm Kit - A lightweight open source build system for HIP and ROCm&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TheRock&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pre-commit/pre-commit&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&#34; alt=&#34;pre-commit&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ROCm/TheRock/actions/workflows/ci.yml?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/ROCm/TheRock/actions/workflows/ci.yml/badge.svg?branch=main&amp;amp;event=push&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ROCm/TheRock/actions/workflows/ci_nightly.yml?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/ROCm/TheRock/actions/workflows/ci_nightly.yml/badge.svg?branch=main&amp;amp;event=schedule&#34; alt=&#34;CI Nightly&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;TheRock (The HIP Environment and ROCm Kit) is a lightweight open source build platform for HIP and ROCm. The project is currently in an &lt;strong&gt;early preview state&lt;/strong&gt; but is under active development and welcomes contributors. Come try us out! Please see &lt;a href=&#34;https://raw.githubusercontent.com/ROCm/TheRock/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;TheRock includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nightly releases of ROCm and PyTorch&lt;/li&gt; &#xA; &lt;li&gt;A CMake super-project for HIP and ROCm source builds&lt;/li&gt; &#xA; &lt;li&gt;Support for building PyTorch with ROCm from source &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ROCm/TheRock/issues/247&#34;&gt;JAX support&lt;/a&gt; and other external project builds are in the works!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Tools for developing individual ROCm components&lt;/li&gt; &#xA; &lt;li&gt;Comprehensive CI/CD pipelines for building, testing, and releasing supported components&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Support status&lt;/h3&gt; &#xA;&lt;p&gt;For HIP and ROCm:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Build from source&lt;/th&gt; &#xA;   &lt;th&gt;Prebuilt packages&lt;/th&gt; &#xA;   &lt;th&gt;Python packages&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;âœ… Supported&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ROCm/TheRock/actions/workflows/release_portable_linux_packages.yml?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/ROCm/TheRock/actions/workflows/release_portable_linux_packages.yml/badge.svg?branch=main&amp;amp;event=schedule&#34; alt=&#34;Release portable Linux packages&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ROCm/TheRock/actions/workflows/release_portable_linux_packages.yml?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/ROCm/TheRock/actions/workflows/release_portable_linux_packages.yml/badge.svg?branch=main&amp;amp;event=schedule&#34; alt=&#34;Release portable Linux packages&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;âœ… Supported&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ROCm/TheRock/actions/workflows/release_windows_packages.yml?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/ROCm/TheRock/actions/workflows/release_windows_packages.yml/badge.svg?branch=main&amp;amp;event=schedule&#34; alt=&#34;Release Windows packages&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ðŸŸ¡ In Progress (&lt;a href=&#34;https://github.com/ROCm/TheRock/issues/827&#34;&gt;#827&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For PyTorch with ROCm:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;PyTorch source build&lt;/th&gt; &#xA;   &lt;th&gt;PyTorch Python packages&lt;/th&gt; &#xA;   &lt;th&gt;PyTorch Docker images&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;âœ… Supported&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ROCm/TheRock/actions/workflows/release_linux_pytorch_wheels.yml?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/ROCm/TheRock/actions/workflows/release_linux_pytorch_wheels.yml/badge.svg?branch=main&amp;amp;event=schedule&#34; alt=&#34;Release Linux PyTorch Wheels&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ROCm/TheRock/actions/workflows/publish_pytorch_dev_docker.yml?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/ROCm/TheRock/actions/workflows/publish_pytorch_dev_docker.yml/badge.svg?branch=main&amp;amp;event=schedule&#34; alt=&#34;Publish PyTorch Dev Dockers&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;ðŸŸ¡ In progress (&lt;a href=&#34;https://github.com/ROCm/TheRock/issues/589&#34;&gt;#589&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;ðŸŸ¡ In Progress (&lt;a href=&#34;https://github.com/ROCm/TheRock/issues/827&#34;&gt;#827&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installing from releases&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/ROCm/TheRock/main/RELEASES.md&#34;&gt;Releases Page&lt;/a&gt; for instructions on how to install prebuilt ROCm and PyTorch packages.&lt;/p&gt; &#xA;&lt;h2&gt;Building from source&lt;/h2&gt; &#xA;&lt;p&gt;We keep the following instructions for recent, commonly used operating system versions. Most build failures are due to minor operating system differences in dependencies and project setup. Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/ROCm/TheRock/main/docs/environment_setup_guide.md&#34;&gt;Environment Setup Guide&lt;/a&gt; for contributed instructions and configurations for alternatives.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] While building from source offers the greatest flexibility, &lt;a href=&#34;https://raw.githubusercontent.com/ROCm/TheRock/main/#installing-from-releases&#34;&gt;installing from releases&lt;/a&gt; in supported configurations is often faster and easier.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Setup - Ubuntu (24.04)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install Ubuntu dependencies&#xA;sudo apt install gfortran git git-lfs ninja-build cmake g++ pkg-config xxd patchelf automake libtool python3-venv python3-dev libegl1-mesa-dev&#xA;&#xA;# Clone the repository&#xA;git clone https://github.com/ROCm/TheRock.git&#xA;cd TheRock&#xA;&#xA;# Init python virtual environment and install python dependencies&#xA;python3 -m venv .venv &amp;amp;&amp;amp; source .venv/bin/activate&#xA;pip install -r requirements.txt&#xA;&#xA;# Download submodules and apply patches&#xA;python ./build_tools/fetch_sources.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setup - Windows 11 (VS 2022)&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] See &lt;a href=&#34;https://raw.githubusercontent.com/ROCm/TheRock/main/docs/development/windows_support.md&#34;&gt;windows_support.md&lt;/a&gt; for setup instructions on Windows, in particular the section for &lt;a href=&#34;https://raw.githubusercontent.com/ROCm/TheRock/main/docs/development/windows_support.md#install-tools&#34;&gt;installing tools&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install dependencies following the Windows support guide&#xA;&#xA;# Clone interop library from https://github.com/nod-ai/amdgpu-windows-interop&#xA;# for CLR (the &#34;HIP runtime&#34;) on Windows. The path used can also be configured&#xA;# using the `THEROCK_AMDGPU_WINDOWS_INTEROP_DIR` CMake variable.&#xA;git clone https://github.com/nod-ai/amdgpu-windows-interop.git&#xA;&#xA;# Clone the repository&#xA;git clone https://github.com/ROCm/TheRock.git&#xA;cd TheRock&#xA;&#xA;# Init python virtual environment and install python dependencies&#xA;python -m venv .venv&#xA;.venv\Scripts\Activate.bat&#xA;pip install -r requirements.txt&#xA;&#xA;# Download submodules and apply patches&#xA;python ./build_tools/fetch_sources.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build configuration&lt;/h3&gt; &#xA;&lt;p&gt;The build can be customized through cmake feature flags.&lt;/p&gt; &#xA;&lt;h4&gt;Required configuration flags&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-DTHEROCK_AMDGPU_FAMILIES=&lt;/code&gt;&lt;/p&gt; &lt;p&gt;or&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-DTHEROCK_AMDGPU_TARGETS=&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Not all family and targets are currently supported. See &lt;a href=&#34;https://raw.githubusercontent.com/ROCm/TheRock/main/cmake/therock_amdgpu_targets.cmake&#34;&gt;therock_amdgpu_targets.cmake&lt;/a&gt; file for available options.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Optional configuration flags&lt;/h4&gt; &#xA;&lt;p&gt;By default, the project builds everything available. The following group flags enable/disable selected subsets:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Group flag&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-DTHEROCK_ENABLE_ALL=OFF&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Disables all optional components&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-DTHEROCK_ENABLE_CORE=OFF&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Disables all core components&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-DTHEROCK_ENABLE_COMM_LIBS=OFF&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Disables all communication libraries&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-DTHEROCK_ENABLE_MATH_LIBS=OFF&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Disables all math libraries&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-DTHEROCK_ENABLE_ML_LIBS=OFF&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Disables all ML libraries&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-DTHEROCK_ENABLE_PROFILER=OFF&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Disables profilers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Individual features can be controlled separately (typically in combination with &lt;code&gt;-DTHEROCK_ENABLE_ALL=OFF&lt;/code&gt; or &lt;code&gt;-DTHEROCK_RESET_FEATURES=ON&lt;/code&gt; to force a minimal build):&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Component flag&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-DTHEROCK_ENABLE_COMPILER=ON&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enables the GPU+host compiler toolchain&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-DTHEROCK_ENABLE_HIPIFY=ON&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enables the hipify tool&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-DTHEROCK_ENABLE_CORE_RUNTIME=ON&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enables the core runtime components and tools&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-DTHEROCK_ENABLE_HIP_RUNTIME=ON&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enables the HIP runtime components&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-DTHEROCK_ENABLE_ROCPROFV3=ON&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enables rocprofv3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-DTHEROCK_ENABLE_RCCL=ON&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enables RCCL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-DTHEROCK_ENABLE_PRIM=ON&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enables the PRIM library&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-DTHEROCK_ENABLE_BLAS=ON&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enables the BLAS libraries&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-DTHEROCK_ENABLE_RAND=ON&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enables the RAND libraries&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-DTHEROCK_ENABLE_SOLVER=ON&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enables the SOLVER libraries&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-DTHEROCK_ENABLE_SPARSE=ON&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enables the SPARSE libraries&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-DTHEROCK_ENABLE_MIOPEN=ON&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enables MIOpen&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] Enabling any features will implicitly enable their &lt;em&gt;minimum&lt;/em&gt; dependencies. Some libraries (like MIOpen) have a number of &lt;em&gt;optional&lt;/em&gt; dependencies, which must be enabled manually if enabling/disabling individual features.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] A report of enabled/disabled features and flags will be printed on every CMake configure.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;CMake build usage&lt;/h3&gt; &#xA;&lt;p&gt;To build ROCm/HIP:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake -B build -GNinja . -DTHEROCK_AMDGPU_FAMILIES=gfx110X-dgpu&#xA;cmake --build build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;CCache usage on Linux&lt;/h4&gt; &#xA;&lt;p&gt;To build with the &lt;a href=&#34;https://ccache.dev/&#34;&gt;ccache&lt;/a&gt; compiler cache:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You must have a recent ccache (&amp;gt;= 4.11 at the time of writing) that supports proper caching with the &lt;code&gt;--offload-compress&lt;/code&gt; option used for compressing AMDGPU device code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;export CCACHE_SLOPPINESS=include_file_ctime&lt;/code&gt; to support hard-linking&lt;/li&gt; &#xA; &lt;li&gt;Proper setup of the &lt;code&gt;compiler_check&lt;/code&gt; directive to do safe caching in the presence of compiler bootstrapping&lt;/li&gt; &#xA; &lt;li&gt;Set the C/CXX compiler launcher options to cmake appropriately.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since these options are very fiddly and prone to change over time, we recommend using the &lt;code&gt;./build_tools/setup_ccache.py&lt;/code&gt; script to create a &lt;code&gt;.ccache&lt;/code&gt; directory in the repository root with hard coded configuration suitable for the project.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Any shell used to build must eval setup_ccache.py to set environment&#xA;# variables.&#xA;eval &#34;$(./build_tools/setup_ccache.py)&#34;&#xA;cmake -B build -GNinja -DTHEROCK_AMDGPU_FAMILIES=gfx110X-dgpu \&#xA;  -DCMAKE_C_COMPILER_LAUNCHER=ccache \&#xA;  -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \&#xA;  .&#xA;&#xA;cmake --build build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;CCache usage on Windows&lt;/h4&gt; &#xA;&lt;p&gt;We are still investigating the exact proper options for ccache on Windows and do not currently recommend that end users enable it.&lt;/p&gt; &#xA;&lt;h3&gt;Running tests&lt;/h3&gt; &#xA;&lt;p&gt;Project-wide testing can be controlled with the standard CMake &lt;code&gt;-DBUILD_TESTING=ON|OFF&lt;/code&gt; flag. This gates both setup of build tests and compilation of installed testing artifacts.&lt;/p&gt; &#xA;&lt;p&gt;Tests of the integrity of the build are enabled by default and can be run with ctest:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ctest --test-dir build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Testing functionality on an actual GPU is in progress and will be documented separately.&lt;/p&gt; &#xA;&lt;h2&gt;Development manuals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ROCm/TheRock/main/CONTRIBUTING.md&#34;&gt;Contribution Guidelines&lt;/a&gt;: Documentation for the process of contributing to this project including a quick pointer to its governance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ROCm/TheRock/main/docs/development/development_guide.md&#34;&gt;Development Guide&lt;/a&gt;: Documentation on how to use TheRock as a daily driver for developing any of its contained ROCm components (i.e. vs interacting with each component build individually).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ROCm/TheRock/main/docs/development/build_system.md&#34;&gt;Build System&lt;/a&gt;: More detailed information about TheRock&#39;s build system relevant to people looking to extend TheRock, add components, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ROCm/TheRock/main/docs/environment_setup_guide.md&#34;&gt;Environment Setup Guide&lt;/a&gt;: Comprehensive guide for setting up a build environment, known workarounds, and other operating specific information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ROCm/TheRock/main/docs/development/git_chores.md&#34;&gt;Git Chores&lt;/a&gt;: Procedures for managing the codebase, specifically focused on version control, upstream/downstream, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ROCm/TheRock/main/docs/development/dependencies.md&#34;&gt;Dependencies&lt;/a&gt;: Further specifications on ROCm-wide standards for depending on various components.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ROCm/TheRock/main/docs/development/build_containers.md&#34;&gt;Build Containers&lt;/a&gt;: Further information about containers used for building TheRock on CI.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ROCm/TheRock/main/docs/development/artifacts.md&#34;&gt;Build Artifacts&lt;/a&gt;: Documentation about the outputs of the build system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ROCm/TheRock/main/RELEASES.md&#34;&gt;Releases Page&lt;/a&gt;: Documentation for how to leverage our build artifacts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ROCm/TheRock/main/ROADMAP.md&#34;&gt;Roadmap for Support&lt;/a&gt;: Documentation for our prioritized roadmap to support AMD GPUs.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>