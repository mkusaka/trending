<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-04T01:36:52Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>PyCQA/isort</title>
    <updated>2022-11-04T01:36:52Z</updated>
    <id>tag:github.com,2022-11-04:/PyCQA/isort</id>
    <link href="https://github.com/PyCQA/isort" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Python utility / library to sort imports.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://pycqa.github.io/isort/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pycqa/isort/main/art/logo_large.png&#34; alt=&#34;isort - isort your imports, so you don&#39;t have to.&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/py/isort&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/isort.svg?sanitize=true&#34; alt=&#34;PyPI version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pycqa/isort/actions?query=workflow%3ATest&#34;&gt;&lt;img src=&#34;https://github.com/pycqa/isort/workflows/Test/badge.svg?branch=develop&#34; alt=&#34;Test Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pycqa/isort/actions?query=workflow%3ALint&#34;&gt;&lt;img src=&#34;https://github.com/pycqa/isort/workflows/Lint/badge.svg?branch=develop&#34; alt=&#34;Lint Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/pycqa/isort&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/pycqa/isort/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Code coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/isort/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/mashape/apistatus.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/timothycrosley/isort?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/timothycrosley/isort&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pepy.tech/project/isort&#34;&gt;&lt;img src=&#34;https://pepy.tech/badge/isort&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/psf/black&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code%20style-black-000000.svg?sanitize=true&#34; alt=&#34;Code style: black&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pycqa.github.io/isort/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&amp;amp;labelColor=ef8336&#34; alt=&#34;Imports: isort&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://deepsource.io/gh/pycqa/isort/?ref=repository-badge&#34;&gt;&lt;img src=&#34;https://static.deepsource.io/deepsource-badge-light-mini.svg?sanitize=true&#34; alt=&#34;DeepSource&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pycqa.github.io/isort/&#34;&gt;Read Latest Documentation&lt;/a&gt; - &lt;a href=&#34;https://github.com/pycqa/isort/&#34;&gt;Browse GitHub Code Repository&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;isort your imports, so you don&#39;t have to.&lt;/p&gt; &#xA;&lt;p&gt;isort is a Python utility / library to sort imports alphabetically, and automatically separated into sections and by type. It provides a command line utility, Python library and &lt;a href=&#34;https://github.com/pycqa/isort/wiki/isort-Plugins&#34;&gt;plugins for various editors&lt;/a&gt; to quickly sort all your imports. It requires Python 3.6+ to run but supports formatting Python 2 code too.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pycqa.github.io/isort/docs/quick_start/0.-try.html&#34;&gt;Try isort now from your browser!&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pycqa.github.io/isort/docs/configuration/black_compatibility.html&#34;&gt;Using black? See the isort and black compatibility guide.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pycqa.github.io/isort/docs/configuration/pre-commit.html&#34;&gt;isort has official support for pre-commit!&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/pycqa/isort/main/example.gif&#34; alt=&#34;Example Usage&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Before isort:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from my_lib import Object&#xA;&#xA;import os&#xA;&#xA;from my_lib import Object3&#xA;&#xA;from my_lib import Object2&#xA;&#xA;import sys&#xA;&#xA;from third_party import lib15, lib1, lib2, lib3, lib4, lib5, lib6, lib7, lib8, lib9, lib10, lib11, lib12, lib13, lib14&#xA;&#xA;import sys&#xA;&#xA;from __future__ import absolute_import&#xA;&#xA;from third_party import lib3&#xA;&#xA;print(&#34;Hey&#34;)&#xA;print(&#34;yo&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After isort:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from __future__ import absolute_import&#xA;&#xA;import os&#xA;import sys&#xA;&#xA;from third_party import (lib1, lib2, lib3, lib4, lib5, lib6, lib7, lib8,&#xA;                         lib9, lib10, lib11, lib12, lib13, lib14, lib15)&#xA;&#xA;from my_lib import Object, Object2, Object3&#xA;&#xA;print(&#34;Hey&#34;)&#xA;print(&#34;yo&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installing isort&lt;/h2&gt; &#xA;&lt;p&gt;Installing isort is as simple as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install isort&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install isort with requirements.txt support:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install isort[requirements_deprecated_finder]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install isort with Pipfile support:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install isort[pipfile_deprecated_finder]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install isort with both formats support:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install isort[requirements_deprecated_finder,pipfile_deprecated_finder]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using isort&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;From the command line&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;p&gt;To run on specific files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;isort mypythonfile.py mypythonfile2.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To apply recursively:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;isort .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;a href=&#34;https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html&#34;&gt;globstar&lt;/a&gt; is enabled, &lt;code&gt;isort .&lt;/code&gt; is equivalent to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;isort **/*.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To view proposed changes without applying them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;isort mypythonfile.py --diff&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, to atomically run isort against a project, only applying changes if they don&#39;t introduce syntax errors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;isort --atomic .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Note: this is disabled by default, as it prevents isort from running against code written using a different version of Python.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;From within Python&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import isort&#xA;&#xA;isort.file(&#34;pythonfile.py&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import isort&#xA;&#xA;sorted_code = isort.code(&#34;import b\nimport a\n&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installing isort&#39;s for your preferred text editor&lt;/h2&gt; &#xA;&lt;p&gt;Several plugins have been written that enable to use isort from within a variety of text-editors. You can find a full list of them &lt;a href=&#34;https://github.com/pycqa/isort/wiki/isort-Plugins&#34;&gt;on the isort wiki&lt;/a&gt;. Additionally, I will enthusiastically accept pull requests that include plugins for other text editors and add documentation for them as I am notified.&lt;/p&gt; &#xA;&lt;h2&gt;Multi line output modes&lt;/h2&gt; &#xA;&lt;p&gt;You will notice above the &#34;multi_line_output&#34; setting. This setting defines how from imports wrap when they extend past the line_length limit and has &lt;a href=&#34;https://pycqa.github.io/isort/docs/configuration/multi_line_output_modes.html&#34;&gt;12 possible settings&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Indentation&lt;/h2&gt; &#xA;&lt;p&gt;To change the how constant indents appear - simply change the indent property with the following accepted formats:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Number of spaces you would like. For example: 4 would cause standard 4 space indentation.&lt;/li&gt; &#xA; &lt;li&gt;Tab&lt;/li&gt; &#xA; &lt;li&gt;A verbatim string with quotes around it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#34;    &#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;is equivalent to 4.&lt;/p&gt; &#xA;&lt;p&gt;For the import styles that use parentheses, you can control whether or not to include a trailing comma after the last import with the &lt;code&gt;include_trailing_comma&lt;/code&gt; option (defaults to &lt;code&gt;False&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Intelligently Balanced Multi-line Imports&lt;/h2&gt; &#xA;&lt;p&gt;As of isort 3.1.0 support for balanced multi-line imports has been added. With this enabled isort will dynamically change the import length to the one that produces the most balanced grid, while staying below the maximum import length defined.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from __future__ import (absolute_import, division,&#xA;                        print_function, unicode_literals)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will be produced instead of:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from __future__ import (absolute_import, division, print_function,&#xA;                        unicode_literals)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable this set &lt;code&gt;balanced_wrapping&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt; in your config or pass the &lt;code&gt;-e&lt;/code&gt; option into the command line utility.&lt;/p&gt; &#xA;&lt;h2&gt;Custom Sections and Ordering&lt;/h2&gt; &#xA;&lt;p&gt;isort provides configuration options to change almost every aspect of how imports are organized, ordered, or grouped together in sections.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pycqa.github.io/isort/docs/configuration/custom_sections_and_ordering.html&#34;&gt;Click here&lt;/a&gt; for an overview of all these options.&lt;/p&gt; &#xA;&lt;h2&gt;Skip processing of imports (outside of configuration)&lt;/h2&gt; &#xA;&lt;p&gt;To make isort ignore a single import simply add a comment at the end of the import line containing the text &lt;code&gt;isort:skip&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import module  # isort:skip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from xyz import (abc,  # isort:skip&#xA;                 yo,&#xA;                 hey)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To make isort skip an entire file simply add &lt;code&gt;isort:skip_file&lt;/code&gt; to the module&#39;s doc string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#34;&#34;&#34; my_module.py&#xA;    Best module ever&#xA;&#xA;   isort:skip_file&#xA;&#34;&#34;&#34;&#xA;&#xA;import b&#xA;import a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Adding or removing an import from multiple files&lt;/h2&gt; &#xA;&lt;p&gt;isort can be ran or configured to add / remove imports automatically.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pycqa.github.io/isort/docs/configuration/add_or_remove_imports.html&#34;&gt;See a complete guide here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Using isort to verify code&lt;/h2&gt; &#xA;&lt;h2&gt;The &lt;code&gt;--check-only&lt;/code&gt; option&lt;/h2&gt; &#xA;&lt;p&gt;isort can also be used to verify that code is correctly formatted by running it with &lt;code&gt;-c&lt;/code&gt;. Any files that contain incorrectly sorted and/or formatted imports will be outputted to &lt;code&gt;stderr&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;isort **/*.py -c -v&#xA;&#xA;SUCCESS: /home/timothy/Projects/Open_Source/isort/isort_kate_plugin.py Everything Looks Good!&#xA;ERROR: /home/timothy/Projects/Open_Source/isort/isort/isort.py Imports are incorrectly sorted.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;One great place this can be used is with a pre-commit git hook, such as this one by @acdha:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gist.github.com/acdha/8717683&#34;&gt;https://gist.github.com/acdha/8717683&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This can help to ensure a certain level of code quality throughout a project.&lt;/p&gt; &#xA;&lt;h2&gt;Git hook&lt;/h2&gt; &#xA;&lt;p&gt;isort provides a hook function that can be integrated into your Git pre-commit script to check Python code before committing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pycqa.github.io/isort/docs/configuration/git_hook.html&#34;&gt;More info here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setuptools integration&lt;/h2&gt; &#xA;&lt;p&gt;Upon installation, isort enables a &lt;code&gt;setuptools&lt;/code&gt; command that checks Python files declared by your project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pycqa.github.io/isort/docs/configuration/setuptools_integration.html&#34;&gt;More info here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Spread the word&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pycqa.github.io/isort/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&amp;amp;labelColor=ef8336&#34; alt=&#34;Imports: isort&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Place this badge at the top of your repository to let others know your project uses isort.&lt;/p&gt; &#xA;&lt;p&gt;For README.md:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;[![Imports: isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&amp;amp;labelColor=ef8336)](https://pycqa.github.io/isort/)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or README.rst:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rst&#34;&gt;.. image:: https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&amp;amp;labelColor=ef8336&#xA;    :target: https://pycqa.github.io/isort/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Security contact information&lt;/h2&gt; &#xA;&lt;p&gt;To report a security vulnerability, please use the &lt;a href=&#34;https://tidelift.com/security&#34;&gt;Tidelift security contact&lt;/a&gt;. Tidelift will coordinate the fix and disclosure.&lt;/p&gt; &#xA;&lt;h2&gt;Why isort?&lt;/h2&gt; &#xA;&lt;p&gt;isort simply stands for import sort. It was originally called &#34;sortImports&#34; however I got tired of typing the extra characters and came to the realization camelCase is not pythonic.&lt;/p&gt; &#xA;&lt;p&gt;I wrote isort because in an organization I used to work in the manager came in one day and decided all code must have alphabetically sorted imports. The code base was huge - and he meant for us to do it by hand. However, being a programmer - I&#39;m too lazy to spend 8 hours mindlessly performing a function, but not too lazy to spend 16 hours automating it. I was given permission to open source sortImports and here we are :)&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://tidelift.com/subscription/pkg/pypi-isort?utm_source=pypi-isort&amp;amp;utm_medium=referral&amp;amp;utm_campaign=readme&#34;&gt;Get professionally supported isort with the Tidelift Subscription&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Professional support for isort is available as part of the &lt;a href=&#34;https://tidelift.com/subscription/pkg/pypi-isort?utm_source=pypi-isort&amp;amp;utm_medium=referral&amp;amp;utm_campaign=readme&#34;&gt;Tidelift Subscription&lt;/a&gt;. Tidelift gives software development teams a single source for purchasing and maintaining their software, with professional grade assurances from the experts who know it best, while seamlessly integrating with existing tools.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Thanks and I hope you find isort useful!&lt;/p&gt; &#xA;&lt;p&gt;~Timothy Crosley&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>colmmacc/CVE-2022-3602</title>
    <updated>2022-11-04T01:36:52Z</updated>
    <id>tag:github.com,2022-11-04:/colmmacc/CVE-2022-3602</id>
    <link href="https://github.com/colmmacc/CVE-2022-3602" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CVE−2022-3602&lt;/h1&gt; &#xA;&lt;h3&gt;What is this?&lt;/h3&gt; &#xA;&lt;p&gt;This document and repository is a write-up of CVE−2022-3602, a punycode buffer overflow issue in OpenSSL. It&#39;s an &#34;anti-POC&#34; (the issue does not appear to exploitable) intended for folks who maintain their own OpenSSL builds and for compiler maintainers.&lt;/p&gt; &#xA;&lt;p&gt;There is a seperate CVE in the same release, CVE-2022-3786, which also leads to buffer overflows but an attacker can&#39;t control the content in that case. There is no reproduction for that issue here, but that issue can lead to a Denial of Service due to crash.&lt;/p&gt; &#xA;&lt;p&gt;Crashes and Buffer overﬂlows are never good and if you are using OpenSSL 3.0.x, it is prudent to update as soon as possible.&lt;/p&gt; &#xA;&lt;p&gt;Feel free to report any errors or omissions via GitHub issues or pull-requests.&lt;/p&gt; &#xA;&lt;h3&gt;What is the issue?&lt;/h3&gt; &#xA;&lt;p&gt;There is an off-by-one issue in how &lt;code&gt;ossl_punycode_decode&lt;/code&gt; handles punycode decoding that results in a 4-byte overflow. This issue is reasonable only when OpenSSL processes a certificate chain and requires two conditions. Firstly, a CA or Intermediary certificates in a chain must contain a name-constraint field that uses punycode.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nameConstraints = permitted;email:xn-maccrthaigh-n7a.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Secondly, the leaf certificate must contain a SubjectAlternateName (SAN) otherName field that specifies a SmtpUTF8Mailbox string.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;otherName = 1.3.6.1.5.5.7.8.9;UTF8:admin@xn-maccrthaigh-n7a.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;when triggered, the punycode in the nameConstraints field, but not the punycode in the otherName field, will be handled by the vulnerable OpenSSL punycode parsing.&lt;/p&gt; &#xA;&lt;h2&gt;How easy is it to trigger this issue?&lt;/h2&gt; &#xA;&lt;p&gt;David Benjamin and Matt Caswell determined that nameConstraint checking occurs after ordinary certificate chain validation and signature verification. For most applications this means that the issue can not be triggered with a self-signed certificate or invalid chain.&lt;/p&gt; &#xA;&lt;p&gt;Note that openssl&#39;s &lt;code&gt;s_client&lt;/code&gt; and &lt;code&gt;s_server&lt;/code&gt; applications are intended for debugging and do not stop processing when a chain is invalid.&lt;/p&gt; &#xA;&lt;p&gt;A trusted CA or Intermediate will have to contain the malicious payload, and will also have to have signed the leaf certificate that triggers the issue.&lt;/p&gt; &#xA;&lt;p&gt;There may be some environments where untrusted parties are the CAs or Intermediaries, for example a hosting service that supports customer-provided Private CAs, but this is not common.&lt;/p&gt; &#xA;&lt;h2&gt;Does the issue lead to Remote Code Execution?&lt;/h2&gt; &#xA;&lt;p&gt;The answer for many applications will be &#34;no&#34; because of how the compiler has laid out the stack and because of the presence of other protections such as stack canaries / stack cookies, padding, PIE, FORTIFY_SOURCE.&lt;/p&gt; &#xA;&lt;p&gt;The the issue does lead to an overflow of 32-bits on the stack. This is not enough to directly execute shell code, but it may enough to alter the control flow of an application. For example jumping to shell-code that has been embedded in an X509 certificate chain may be possible if this data is also copied onto the stack in an executable location.&lt;/p&gt; &#xA;&lt;p&gt;On every Linux platform I&#39;ve tested, the overflow occurs into padding and is harmless. In theory, a compiler may lay out variables such that the overflow occurs into one of the other variables in the &lt;code&gt;ossl_a2ulabel&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;Depending on inlining the full-list of variables present is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;outptr, inptr, size, result, tmpptr, delta, seed, utfsize&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and none appear to me to provide an obvious path to privilege escalation or interesting control.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve attached a tarball with tools that can be used to create reproductions and overflows with as much control over all four bytes as is possible. The reference reproduction string ( &lt;code&gt;xn--ww90271...aaaa&lt;/code&gt;) overflows the four bytes with the values &lt;code&gt;0xFF 0x0F 0x0F 0x0F&lt;/code&gt;. If that does not crash an application, it is possible (likely?) that that application is not vulnerable.&lt;/p&gt; &#xA;&lt;h2&gt;How can I reproduce this issue?&lt;/h2&gt; &#xA;&lt;p&gt;The shell script &lt;code&gt;run-poc&lt;/code&gt; can be used to generate a malicious certificate chain. A malicous CA certificate is generated from &lt;code&gt;ca.cnf&lt;/code&gt; and a triggering leaf certificate is generated from &lt;code&gt;leaf.cnf&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The CA certificate uses the following reference payload:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;xn--ww902716aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;A python script can be used to generate other punycode strings for different payloads.&lt;/p&gt; &#xA;&lt;p&gt;When executed &lt;code&gt;run-poc&lt;/code&gt; will run an openssl client and server and attempt to exploit the issue ten times.&lt;/p&gt; &#xA;&lt;p&gt;A vulnerable OpenSSL will likely crash. That doesn&#39;t mean that the version of OpenSSL is vulnerable to an RCE, as stack canaries and stack cookie protections also typically cause a (safer) application crash. Also note that this in no changes the severity of the other CVE in the same release.&lt;/p&gt; &#xA;&lt;h2&gt;How does this issue work?&lt;/h2&gt; &#xA;&lt;p&gt;It is surprisingly nuanced to gain near-full control of all four overflow bytes and requires exploiting OpenSSL&#39;s punycode decoder with non-standard / invalid punycode. The tarball attached contains a script which can construct a string that handles the nuance. What follows is an explanation of how it works.&lt;/p&gt; &#xA;&lt;h3&gt;Setting the stage&lt;/h3&gt; &#xA;&lt;p&gt;The security issue is in &lt;code&gt;ossl_punycode_decode()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;int ossl_punycode_decode(const char *pEncoded, const size_t enc_len,&#xA;                         unsigned int *pDecoded, unsigned int *pout_length)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ossl_punycode_decode&lt;/code&gt; is invoked from &lt;code&gt;ossl_a2ulabel&lt;/code&gt;. The &lt;code&gt;pEncoded&lt;/code&gt; buffer is a more or less arbitrarily-sized buffer that comes from an X509 certificate chain. It&#39;s the part that comes after any &#34;xn--&#34; in a nameConstraint field. See the [reproduction] for how to reproduce such a certificate chain.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pDecoded&lt;/code&gt; is a &lt;code&gt;LABEL_BUF_SIZE&lt;/code&gt; sized array of &lt;code&gt;unsigned int&lt;/code&gt;s. &lt;code&gt;LABEL_BUF_SIZE&lt;/code&gt; is 512, and on most platforms an &lt;code&gt;unsigned int&lt;/code&gt; is going to be 4 bytes wide. So on most platforms &lt;code&gt;pDecoded&lt;/code&gt; is 2048 bytes in length.&lt;/p&gt; &#xA;&lt;h3&gt;The scene&lt;/h3&gt; &#xA;&lt;p&gt;Inside &lt;code&gt;ossl_punycode_decode()&lt;/code&gt; the crux of the issue is this incorrect length check:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; if (written_out &amp;gt; max_out)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;max_out&lt;/code&gt; corresponds to &lt;code&gt;*pout_length&lt;/code&gt; which is always 512. And &lt;code&gt;written_out&lt;/code&gt; keeps track of how many &lt;code&gt;unsigned int&lt;/code&gt;s have been written to &lt;code&gt;pDecoded&lt;/code&gt;. Because &lt;code&gt;written_out&lt;/code&gt; is incremented later only after writing, this faulty check allows 513 &lt;code&gt;unsigned int&lt;/code&gt;s to be written to &lt;code&gt;pDecoded&lt;/code&gt;. The end result looks something like this ...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pDecoded = [ ... , &#39;X , &#39;Y&#39; , &#39;Z&#39; ] &#39;P&#39;&#xA;// Indices         509   510   511&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, per C&#39;s convention, indices are zero-indexed, so slot number 511 is the 512th element in the array. &lt;code&gt;&#39;P&#39;&lt;/code&gt; is a four-byte payload that has been put out of bounds, beyond the space allocated on the stack for the &lt;code&gt;buf&lt;/code&gt; buffer in &lt;code&gt;ossl_a2ulabel()&lt;/code&gt; which is what &lt;code&gt;pDecoded&lt;/code&gt; points to.&lt;/p&gt; &#xA;&lt;p&gt;Four bytes is a small overflow, and is not enough to carry a nop-sled or directly execute shell code but is enough to alter the control flow of an application. For example jumping to shell-code that has been embedded in an x509 certificate chain may be possible, depending on how this data (or copied fragments of this data) is stored and whether that memory is executable. However there is still more difficulty for a would-be attacker.&lt;/p&gt; &#xA;&lt;p&gt;Firstly, the compiler&#39;s padding and alignment of the stack, or defenses such as stack canaries, may make any exploitation completely impossible.&lt;/p&gt; &#xA;&lt;p&gt;Secondly, there is only one path to &lt;code&gt;ossl_punycode_decode()&lt;/code&gt; and this path uses a buffer on the stack. This makes it unlikely that the issue can be used for concurrent 4 byte overflows in different memory locations.&lt;/p&gt; &#xA;&lt;h3&gt;Punycode decoding&lt;/h3&gt; &#xA;&lt;p&gt;Punycode strings basically have two forms. One is &lt;code&gt;xn--c1yn36f&lt;/code&gt; (點看) and another is &lt;code&gt;xn--maccrthaigh-n7a&lt;/code&gt; (maccárthaigh). The part that comes after the last &lt;code&gt;-&lt;/code&gt; delimiter is a 36-ary bootstring encoding of any unicode code-points that aren&#39;t basic ordinary ascii along with the string position to insert them. What&#39;s important for now is that the decoding process in &lt;code&gt;ossl_punycode_decode()&lt;/code&gt; produces two values. One is &#39;n&#39; which is the &lt;code&gt;unsigned int&lt;/code&gt; code-point value to be inserted, and the other is &#39;i&#39; which is the position in the buffer to insert it.&lt;/p&gt; &#xA;&lt;p&gt;The writing can happen in two different ways. If &lt;code&gt;i&lt;/code&gt; is somewhere in the middle of the string then there&#39;s a &lt;code&gt;memmove()&lt;/code&gt; which first &#34;makes space&#34; by copying everything to the right one slot:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;memmove(pDecoded + i + 1, pDecoded + i,&#xA;       (written_out - i) * sizeof *pDecoded);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then it writes &lt;code&gt;n&lt;/code&gt; to the space it just made:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; pDecoded[i] = n;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;if &lt;code&gt;i&lt;/code&gt; is at the end of the string, then the &lt;code&gt;memmove()&lt;/code&gt; has no effect because the final parameter will be 0. The other line becomes a simple append.&lt;/p&gt; &#xA;&lt;p&gt;Now we&#39;ll look at the three different ways that there are to get a payload &#39;P&#39; into the overflow position and why the constraints arise.&lt;/p&gt; &#xA;&lt;h4&gt;Method 1 - ascii overflow&lt;/h4&gt; &#xA;&lt;p&gt;The simplest way to trigger the overflow is to craft a punycode string that has 511 ascii characters in it, and two non-ascii characters. The punycode encoding of 513-character long string such as &#34;ÁÁAAAAAAAA...AAA&#34; would do. In this case what will happen is what when &lt;code&gt;written_out&lt;/code&gt; is 510 we will have a buffer laid out as ...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pDecoded = [ &#39;A&#39; , &#39;A&#39; ,  ... , &#39;A&#39; , &#39;A&#39;,     ]&#xA;// Indices    0     1     ...   509   510  511&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;this is just the basic ascii characters that have been copied in. Then we parse the punycode bootstring and insert an &lt;code&gt;&#39;Á&#39;&lt;/code&gt; at position 0. Though it could be any position between 0 and 511 inclusive.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pDecoded = [ &#39;Á&#39; , &#39;A&#39; ,  ... , &#39;A&#39; , &#39;A&#39;, &#39;A&#39; ]&#xA;// Indices    0     1     ...   509   510  511&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;we then repeat this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pDecoded = [ &#39;Á&#39; , &#39;Á&#39; ,  ... , &#39;A&#39; , &#39;A&#39;, &#39;A&#39; ] &#39;A&#39;&#xA;// Indices    0     1     ...   509   510  511   512&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;this will cause the ordinary ascii &#39;A&#39; to overflow as it is &#34;moved over&#34;. The four byte payload in this case becomes &lt;code&gt;0x00 0x00 0x00 0x41&lt;/code&gt;. As we&#39;ll see, because of how punycode works this is the only way that any value with a final byte in the ascii range can be expressed.&lt;/p&gt; &#xA;&lt;p&gt;We need to use two non-ascii characters because there is a correct bounds check on the number of basic characters, so this has to be less than 512.&lt;/p&gt; &#xA;&lt;p&gt;An additional constraint that the final byte value can not be 46 arises because &lt;code&gt;ossl_punycode_decode()&lt;/code&gt; is called on the portion of a string that precedes a literal &lt;code&gt;.&lt;/code&gt; character. Punycode is meant for domain labels, which can&#39;t have dots in them.&lt;/p&gt; &#xA;&lt;h4&gt;Method 2 - direct non-ascii overflow&lt;/h4&gt; &#xA;&lt;p&gt;The next most simple way to trigger the overflow is to craft a 513-character string with a non-ascii character at the very end. Something like &#34;AAAAAAAAAA...AAÁ&#34;. In this case for our final two steps we&#39;ll have:&lt;/p&gt; &#xA;&lt;p&gt;pDecoded = [ &#39;A&#39; , &#39;A&#39; , ... , &#39;A&#39; , &#39;A&#39; ] // Indices 0 1 ... 510 511&lt;/p&gt; &#xA;&lt;p&gt;and&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pDecoded = [ &#39;A&#39; , &#39;A&#39; ,  ... , &#39;A&#39; , &#39;A&#39; ] &#39;Á&#39;&#xA;// Indices    0     1     ...   510   511&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;the non-ascii character will go directly into the overflow position. The OpenSSL punycode parser does not enforce that the overflow value here is actually a valid unicode character. It&#39;s more or a less a binary decocing process. But the nuances of punycode decoding mean that method 2 is not as flexible as it might first appear.&lt;/p&gt; &#xA;&lt;p&gt;In punycode the values &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;i&lt;/code&gt; are both encoded as a single variable-length integer that is then ascii encoded using base36. It might seem impossible to encode two unrelated numbers as a single integer, but the clever trick punycode has is to use the length of the string (so far) as a hidden field.&lt;/p&gt; &#xA;&lt;p&gt;For example, suppose we have a punycode string with 4 basic characters in it, and one non-basic, like &lt;code&gt;AAÁAA&lt;/code&gt;. That will first be represented as just the basic characters ... &lt;code&gt;AAAA&lt;/code&gt;. The &#39;Á&#39; unicode value is 225 and its is position in the string 2. The trick is to multiply the value by the length plus one, and then add the position. So it becomes ((225 * (4 +1)) + 2) which is 1127, and that&#39;s how it&#39;s encoded (in variable length base 36).&lt;/p&gt; &#xA;&lt;p&gt;To decode, you go the other way. 1127 / 5 is 225 and 1127 % 5 is 2. That&#39;s how you recover two numbers from one. But notice that the longer the string gets, you get more constrained in how big the value can be, or else the multiple won&#39;t fit in an unsigned int. In general, if the string is M characters long then you lose log M bits of width from the value.&lt;/p&gt; &#xA;&lt;p&gt;By the time you are handling the 512th integer, you lose 9 bits of width. Using method 2, the highest value a seemingly 32-bit payload could be is actually 2^23. Not even three full bytes. Method 2 is sub-optimal.&lt;/p&gt; &#xA;&lt;h4&gt;Method 3 - stuffing&lt;/h4&gt; &#xA;&lt;p&gt;To get back 4 bytes of control, the most efficient means is to repeat the payload character over and over.So far I&#39;ve left out two other relevant details of how punycode is handled.&lt;/p&gt; &#xA;&lt;p&gt;The first detail is that non-ascii characters are not encoded in string order, but instead are encoded is ascending order of value. The string &#34;ÉÁ&#34; will end up being encoded as &#34;Á at position 1, É at position 0&#34; because Á has a lower value (225) than É (233).&lt;/p&gt; &#xA;&lt;p&gt;The second detail is that non-ascii characters aren&#39;t encoded as their literal values, but as a delta relative to the most recently decoded value. Since the first value has no previous value to be relative to, there&#39;s a hard-coded starting point of 128.&lt;/p&gt; &#xA;&lt;p&gt;These little nuances make punycode very space-efficient, but also mean that a non-ascii character simply can&#39;t be decoded to a value lower than 128. The smallest delta is 0, and there is no way to express a negative delta. So if you want a number less than 128, you have to use method 1.&lt;/p&gt; &#xA;&lt;p&gt;It also means that the best strategy for as much control over the payload as possible is to make the payload the only value in the full string, as that way we get the full width to work with from its place at the 0th position in the encoding. The string you encode ends up looking like;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; [ &#39;P&#39;, &#39;P&#39;, ... &#39;P&#39;, &#39;P&#39;, &#39;P&#39; ]&#xA;    0    1       510  511  512&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which will be decoded by OpenSSL as ...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pDecoded = [ &#39;P&#39;, &#39;P&#39;, ... &#39;P&#39;, &#39;P&#39; ] &#39;P&#39;&#xA;              0    1       510  511   512&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;with &lt;code&gt;P&lt;/code&gt; in the overflow position, and capable of representing any value between 128 and (2^32 - 1).&lt;/p&gt; &#xA;&lt;p&gt;All of this requires a non-standard punycode encoder and I&#39;ve included a script which can craft a payload using either method 1 or method 3 as needed.&lt;/p&gt; &#xA;&lt;h3&gt;Mini-FAQ:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Apart from updating OpenSSL, are there other mitigations?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Certificate Chains are passed in clear-text in most environments and a malicious chain could be blocked by rejecting TCP connections that contain a DER encoded &lt;code&gt;1.3.6.1.5.5.7.8.9&lt;/code&gt; NID in a &lt;code&gt;SubjectAlternateName&lt;/code&gt; &lt;code&gt;OtherName&lt;/code&gt; field.&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately, this field could be split arbitrarily between two or more packets and really some kind of stateful pattern matcher is needed to block. Certificates can also be compressed, but OpenSSL 3.0.x does not support certificate compression at this time.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, with TLS1.3 client certificate chains are encrypted on the wire, and prior versions of TLS support encrypted certificate chains when renegotiating an existing connection. This is sometimes done for server-initiated certificate authentication. A network filter will not be effective in those cases.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;How can I tell if I&#39;m using openssl 3 in a statically linked binary?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; readelf -a [binary] | grep -i ossl_punycode_decode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will search for the vulnerable function in a statically-linked binary. Only OpenSSL &amp;gt;= 3.0 contains this function.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tony9402/baekjoon</title>
    <updated>2022-11-04T01:36:52Z</updated>
    <id>tag:github.com,2022-11-04:/tony9402/baekjoon</id>
    <link href="https://github.com/tony9402/baekjoon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;코딩테스트 대비 문제집(Baekjoon Online Judge)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;코딩테스트 대비 문제집 with Baekjoon&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tony9402/baekjoon/actions/workflows/auto_update.yml&#34;&gt;&lt;img src=&#34;https://github.com/tony9402/baekjoon/actions/workflows/auto_update.yml/badge.svg?sanitize=true&#34; alt=&#34;Auto Update README&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/tony9402/baekjoon/actions/workflows/auto_solution_update.yml&#34;&gt;&lt;img src=&#34;https://github.com/tony9402/baekjoon/actions/workflows/auto_solution_update.yml/badge.svg?sanitize=true&#34; alt=&#34;Auto Update README&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/tony9402/baekjoon/actions/workflows/auto_pick.yml&#34;&gt;&lt;img src=&#34;https://github.com/tony9402/baekjoon/actions/workflows/auto_pick.yml/badge.svg?sanitize=true&#34; alt=&#34;Auto Update README&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tony9402/baekjoon&#34;&gt;&lt;img src=&#34;https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2Ftony9402%2Fbaekjoon&#34; alt=&#34;하루 방문자 수&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tony9402/baekjoon/discussions&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/discussions-%EB%B0%94%EB%A1%9C%EA%B0%80%EA%B8%B0-brightgreen&#34; alt=&#34;Discussions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tony9402/baekjoon/raw/main/picked.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%EC%98%A4%EB%8A%98%EC%9D%98%20%EB%AC%B8%EC%A0%9C%20%28BETA%29-%EB%B0%94%EB%A1%9C%EA%B0%80%EA%B8%B0-112051&#34; alt=&#34;오늘의 문제&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tony9402/baekjoon/raw/main/guideline_for_contribute.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%EC%A7%91%EB%8B%A8%20%EC%A7%80%EC%84%B1%20%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%20-%EB%B0%94%EB%A1%9C%EA%B0%80%EA%B8%B0-18D6A5&#34; alt=&#34;Contribute&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;mailTo:tony9402@naver.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%EB%AC%B8%EC%9D%98%ED%95%98%EA%B8%B0-tony9402@naver.com-0182E0&#34; alt=&#34;Email&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;❈ 코딩테스트을 준비하시는 분들을 위해 문제집을 만들어봤습니다. ❈&lt;/p&gt; &#xA;&lt;p&gt;❗️ 주의 ❗️&lt;br&gt; &lt;b&gt; 알고리즘을 처음 공부하시는 분들은 &lt;a href=&#34;https://raw.githubusercontent.com/tony9402/baekjoon/main/link_for_study.md&#34;&gt;알고리즘 설명 링크 모음&lt;/a&gt; 등을 활용하여 알고리즘 먼저 공부하시기 바랍니다. &lt;/b&gt;&lt;/p&gt; &#xA;&lt;p&gt;이 레포는 꾸준히 업데이트를 할 예정이며 문제집 어느정도 완성 후 풀이를 Python, Java, C++ 3가지 언어를 올릴 예정입니다.&lt;br&gt; &lt;strong&gt;(C++로 먼저 올릴 예정입니다.)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;최근 기업 코딩테스트 알고리즘 분류 정리&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tony9402/baekjoon/main/CodingTest.md&#34;&gt;바로가기&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;최근 기업 코딩테스트에 나왔던 알고리즘들을 정리해보았습니다.&lt;/p&gt; &#xA;&lt;p&gt;대부분은 코딩테스트를 본 분들에게 들은거라 몇개가 누락되었거나 잘못된 부분이 있을 수도 있습니다.&lt;/p&gt; &#xA;&lt;h2&gt;각 알고리즘 문제집&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;❗️❗️순번은 알고리즘 공부 순서와는 무관합니다.❗️❗️&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;여기에서는 각 알고리즘 개념을 설명하는 것이 없습니다. &lt;a href=&#34;https://raw.githubusercontent.com/tony9402/baekjoon/main/link_for_study.md&#34;&gt;알고리즘 설명 링크 모음&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;문제 뽑은 기준 : 각 태그에 해당하는 문제(코딩 테스트에 나올 정도) 들을 최대한 많이 뽑고 반드시 풀고 넘어가면 좋은 문제를 체크해놨습니다.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;❈ 중요❗️❗️ ❈&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;이 레포는 &lt;strong&gt;코딩테스트에 나올만한 유형&lt;/strong&gt;에 대한 문제를 모았습니다.&lt;br&gt; 알고리즘 유형이 회사마다 다릅니다. 따라서 아래 알고리즘들을 꼭 다 안풀어도 됩니다.&lt;br&gt; 지원하시는 회사에 나오는 &lt;strong&gt;유형에 맞춰&lt;/strong&gt; 골라 푸시기 바랍니다.&lt;br&gt; (문제집에도 추천 문제도 골라 푸셔도 됩니다.)&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;순번&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Tag&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;태그&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;문제집&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;추천 문제 수&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;총 문제 수&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;상태&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;00&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Data Structure&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;자료구조&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tony9402/baekjoon/main/data_structure&#34;&gt;바로가기&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;16&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;25&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-DOING-31AE0F&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;01&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Data Structure 2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;자료구조 2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tony9402/baekjoon/main/data_structure2&#34;&gt;바로가기&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;11&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;21&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-DOING-31AE0F&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;02&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Tree&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;트리&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tony9402/baekjoon/main/tree&#34;&gt;바로가기&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;15&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;44&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-DOING-31AE0F&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;03&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Math&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;수학&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tony9402/baekjoon/main/math&#34;&gt;바로가기&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;18&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;29&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-DOING-31AE0F&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;04&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Greedy&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;탐욕법&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tony9402/baekjoon/main/greedy&#34;&gt;바로가기&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;27&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;62&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-DOING-31AE0F&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;05&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Dynamic Programming 1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;동적계획법 1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tony9402/baekjoon/main/dynamic_programming_1&#34;&gt;바로가기&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;27&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;80&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-DOING-31AE0F&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;06&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Dynamic Programming 2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;동적계획법 2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tony9402/baekjoon/main/dynamic_programming_2&#34;&gt;바로가기&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;28&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;81&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-DOING-31AE0F&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;07&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Two Pointer&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;투 포인터&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tony9402/baekjoon/main/two_pointer&#34;&gt;바로가기&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;13&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;36&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-DOING-31AE0F&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;08&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Implementation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;구현&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tony9402/baekjoon/main/implementation&#34;&gt;바로가기&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;30&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;51&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-DOING-31AE0F&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;09&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Graph Traversal&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;그래프 탐색&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tony9402/baekjoon/main/graph_traversal&#34;&gt;바로가기&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;31&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;96&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-DOING-31AE0F&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Brute Force&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;완전탐색&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tony9402/baekjoon/main/brute_force&#34;&gt;바로가기&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;33&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;94&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-DOING-31AE0F&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;11&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Simulation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;시뮬레이션&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tony9402/baekjoon/main/simulation&#34;&gt;바로가기&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;30&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;48&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-DOING-31AE0F&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;12&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Binary Search&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;이분탐색&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tony9402/baekjoon/main/binary_search&#34;&gt;바로가기&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;20&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;66&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-DOING-31AE0F&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;13&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Backtracking&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;백트래킹&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tony9402/baekjoon/main/backtracking&#34;&gt;바로가기&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;28&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;75&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-DOING-31AE0F&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;14&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Divide and conquer&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;분할정복&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tony9402/baekjoon/main/divide_and_conquer&#34;&gt;바로가기&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;08&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;18&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-DOING-31AE0F&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;15&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Prefix Sum&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;누적 합&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tony9402/baekjoon/main/prefix_sum&#34;&gt;바로가기&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;11&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;32&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-DOING-31AE0F&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;16&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;String&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;문자열&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tony9402/baekjoon/main/string&#34;&gt;바로가기&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;19&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;63&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-DOING-31AE0F&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;17&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Shortest Path&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;최단거리&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tony9402/baekjoon/main/shortest_path&#34;&gt;바로가기&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;18&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;53&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-DOING-31AE0F&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;18&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Topological Sorting&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;위상정렬&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tony9402/baekjoon/main/topological_sorting&#34;&gt;바로가기&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;05&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;14&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-DOING-31AE0F&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;19&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Disjoint Set&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;분리 집합&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tony9402/baekjoon/main/disjoint_set&#34;&gt;바로가기&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;06&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;20&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-DOING-31AE0F&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;20&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Minimum Spanning Tree(MST)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;최소 스패닝 트리&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tony9402/baekjoon/main/minimum_spanning_tree&#34;&gt;바로가기&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;08&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;24&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-DOING-31AE0F&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;21&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Trie&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;트라이&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tony9402/baekjoon/main/trie&#34;&gt;바로가기&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;05&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;09&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-DOING-31AE0F&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;22&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Dynamic Programming On Trees&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;트리디피&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tony9402/baekjoon/main/dynamic_programming_on_trees&#34;&gt;바로가기&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;04&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;08&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-DOING-31AE0F&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tony9402/baekjoon/main/status.md&#34;&gt;현재 진행정도&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;모의 문제집&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;이 문제는 알고리즘 분류와 관련 없이 문제를 뽑아놓은 문제입니다.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;이 부분은 &lt;a href=&#34;https://github.com/tony9402/baekjoon/raw/main/picked.md&#34;&gt;오늘의 문제&lt;/a&gt;로 대체합니다&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr height=&#34;140px&#34;&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/tony9402&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/30228292?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/tony9402&#34;&gt;tony9402&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/VSFe&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/4595546?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/VSFe&#34;&gt;VSFe&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/kim1109123&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/66085474?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/kim1109123&#34;&gt;kim1109123&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/cola314&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/66579357?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/cola314&#34;&gt;cola314&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/nnnlog&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/20399222?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/nnnlog&#34;&gt;nnnlog&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr height=&#34;50px&#34;&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=tony9402&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/tony9402&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/tony9402&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=klm03025&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/klm03025&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/klm03025&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=amsminn&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/amsminn&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/amsminn&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=18sht1710&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/18sht1710&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/18sht1710&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=chansol&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/chansol&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/chansol&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr height=&#34;140px&#34;&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/inclue&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/13315923?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/inclue&#34;&gt;inclue&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/yeonjungin&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/47666431?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/yeonjungin&#34;&gt;yeonjungin&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/cpprhtn&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/63298243?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/cpprhtn&#34;&gt;cpprhtn&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/seastar105&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/30820469?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/seastar105&#34;&gt;seastar105&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/Dev-RubinJo&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/16368650?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/Dev-RubinJo&#34;&gt;Dev-RubinJo&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr height=&#34;50px&#34;&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=dlstj0923&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/dlstj0923&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/dlstj0923&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;b&gt;PRIVATE&lt;/b&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=xkzl9830&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/xkzl9830&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/xkzl9830&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=seastar105&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/seastar105&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/seastar105&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=jybin321&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/jybin321&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/jybin321&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr height=&#34;140px&#34;&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/shjeong92&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/75003424?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/shjeong92&#34;&gt;shjeong92&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/chj3748&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/60089817?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/chj3748&#34;&gt;chj3748&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/seung-00&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/46865281?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/seung-00&#34;&gt;seung-00&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/bn-tw2020&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/66770613?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/bn-tw2020&#34;&gt;bn-tw2020&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/kjh03160&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/49090888?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/kjh03160&#34;&gt;kjh03160&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr height=&#34;50px&#34;&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=shjeong92&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/shjeong92&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/shjeong92&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=chj3748&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/chj3748&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/chj3748&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=osy0056&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/osy0056&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/osy0056&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=ap4o&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/ap4o&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/ap4o&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=kis03160&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/kis03160&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/kis03160&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr height=&#34;140px&#34;&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/CoodingPenguin&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/37505775?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/CoodingPenguin&#34;&gt;CoodingPenguin&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/bsm8734&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/35002768?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/bsm8734&#34;&gt;bsm8734&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/gkgg123&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/60089810?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/gkgg123&#34;&gt;gkgg123&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/simon-hoon&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/54058621?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/simon-hoon&#34;&gt;simon-hoon&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/gusdn3477&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/46596758?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/gusdn3477&#34;&gt;gusdn3477&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr height=&#34;50px&#34;&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=unodostre&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/unodostre&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/unodostre&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=bsoomin8734&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/bsoomin8734&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/bsoomin8734&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=gkgg123&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/gkgg123&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/gkgg123&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=ropeiny&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/ropeiny&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/ropeiny&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=gusdn3477&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/gusdn3477&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/gusdn3477&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr height=&#34;140px&#34;&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/rlawngus0910&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/57345435?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/rlawngus0910&#34;&gt;rlawngus0910&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/tallua&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/34978069?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/tallua&#34;&gt;tallua&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/kyjun719&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/24643002?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/kyjun719&#34;&gt;kyjun719&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/chance0523&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/51807128?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/chance0523&#34;&gt;chance0523&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/lms0806&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/42136056?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/lms0806&#34;&gt;lms0806&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr height=&#34;50px&#34;&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=rlawngus0910&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/rlawngus0910&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/rlawngus0910&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=tallua_y&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/tallua_y&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/tallua_y&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=kyj1991719&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/kyj1991719&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/kyj1991719&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=samuel95&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/samuel95&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/samuel95&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=lms0806&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/lms0806&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/lms0806&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr height=&#34;140px&#34;&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/zmrdltl&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/22141521?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/zmrdltl&#34;&gt;zmrdltl&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/cieske&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/36599490?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/cieske&#34;&gt;cieske&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/Rain3321&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/39397110?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/Rain3321&#34;&gt;Rain3321&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/sio2whocodes&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/41771874?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/sio2whocodes&#34;&gt;sio2whocodes&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/kang-hyuck&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/61424701?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/kang-hyuck&#34;&gt;kang-hyuck&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr height=&#34;50px&#34;&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=xhdxhl&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/xhdxhl&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/xhdxhl&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=cieske&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/cieske&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/cieske&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=smw123123&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/smw123123&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/smw123123&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=fltcy2039&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/fltcy2039&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/fltcy2039&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=bakh1&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/bakh1&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/bakh1&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr height=&#34;140px&#34;&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/witch-factory&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/51201821?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/witch-factory&#34;&gt;witch-factory&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/youngjun0627&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/57058726?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/youngjun0627&#34;&gt;youngjun0627&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/suinj8&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/90179555?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/suinj8&#34;&gt;suinj8&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/juheon-jeong&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/76440385?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/juheon-jeong&#34;&gt;juheon-jeong&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/Won-JoonChoi&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/81273366?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/Won-JoonChoi&#34;&gt;Won-JoonChoi&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr height=&#34;50px&#34;&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=dart&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/dart&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/dart&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=yj2221&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/yj2221&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/yj2221&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=suin8&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/suin8&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/suin8&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=vswngjs&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/vswngjs&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/vswngjs&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=wassup37&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/wassup37&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/wassup37&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr height=&#34;140px&#34;&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/parkgwangwook&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/43427211?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/parkgwangwook&#34;&gt;parkgwangwook&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/parkjonggyeong18&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/81209336?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/parkjonggyeong18&#34;&gt;parkjonggyeong18&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/Ryu-JM&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/81351128?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/Ryu-JM&#34;&gt;Ryu-JM&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/Cho-Hyun-Ji&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/104757451?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/Cho-Hyun-Ji&#34;&gt;Cho-Hyun-Ji&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;130px&#34;&gt; &lt;a href=&#34;https://github.com/HaegyeongKim01&#34;&gt;&lt;img height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://avatars.githubusercontent.com/u/110768149?v=4&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/HaegyeongKim01&#34;&gt;HaegyeongKim01&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr height=&#34;50px&#34;&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=ccocco0609&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/ccocco0609&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/ccocco0609&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=gd30220&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/gd30220&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/gd30220&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=jminryu&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/jminryu&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/jminryu&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=hji7599&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/hji7599&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/hji7599&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img src=&#34;http://mazassumnida.wtf/api/mini/generate_badge?boj=gyeong_sun&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.acmicpc.net/user/gyeong_sun&#34;&gt;Baekjoon&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://solved.ac/profile/gyeong_sun&#34;&gt;solved.ac&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;업데이트 로그&lt;/h2&gt; &#xA;&lt;p&gt;뽑아야 하는 문제가 많고 이를 보기 좋게 표로 정리하는 과정은 너무 노가다성이 많기 때문에 편하게 작업할 수 있도록 업데이트 하고 있습니다.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;자세히&lt;/summary&gt;&#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;2021.04.28&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://github.com/tony9402/baekjoon/raw/main/picked.md&#34;&gt;오늘의 문제&lt;/a&gt; 뽑히는 문제 난이도 변경 &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;이전 난이도 &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt;1번 브론즈 5 ~ 실버 1&lt;/li&gt; &#xA;        &lt;li&gt;2번 골드 5 ~ 골드 3&lt;/li&gt; &#xA;        &lt;li&gt;3번 골드 5 ~ 골드 3&lt;/li&gt; &#xA;        &lt;li&gt;4번 골드 2 ~ 골드 1&lt;/li&gt; &#xA;       &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;li&gt;변경된 난이도 &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt;1번 브론즈 5 ~ 실버 3&lt;/li&gt; &#xA;        &lt;li&gt;2번 실버 2 ~ 골드 4&lt;/li&gt; &#xA;        &lt;li&gt;3번 실버 2 ~ 골드 4&lt;/li&gt; &#xA;        &lt;li&gt;4번 골드 3 ~ 골드 1&lt;/li&gt; &#xA;       &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;2021.04.22 ~ 2021.04.23&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;코드 리팩토링 일부 완료 &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;나머지는 시간 날때마다 하나씩 할 예정&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;문제 뽑는 방식 변경 &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;이전 방식에서 &lt;a href=&#34;https://raw.githubusercontent.com/tony9402/baekjoon/main/dynamic_programming_2/list.md&#34;&gt;새로운&lt;/a&gt; 방식으로 변경&lt;/li&gt; &#xA;      &lt;li&gt;이전 방식 : [추천 문제 여부],[문제 이름],[문제 번호],[난이도],[솔루션 링크]&lt;/li&gt; &#xA;      &lt;li&gt;새로운 방식 : [추천 문제 여부],[문제 번호],[솔루션 링크]&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;매일 새벽에 자동으로 문제 뽑는 스크립트 제작 및 기능 추가 &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://solved.ac/&#34;&gt;Solved.ac&lt;/a&gt; 기준 브론즈 5 ~ 골드 1 사이인 문제가 4문제 일정 조건 안에서 랜덤하게 뽑음&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://github.com/tony9402/baekjoon/raw/main/picked.md&#34;&gt;오늘 문제&lt;/a&gt; 형식으로 업데이트.&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://github.com/tony9402/baekjoon/raw/main/scripts/pick_problem.cpp&#34;&gt;문제 뽑는 스크립트&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://github.com/tony9402/baekjoon#contributors&#34;&gt;Contributors&lt;/a&gt; 정보 만드는 표 스크립트 제작 &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;Contributor 정보만 &lt;a href=&#34;https://github.com/tony9402/baekjoon/raw/main/markdown/contributor.json&#34;&gt;여기&lt;/a&gt;에 넣으면 자동으로 표를 생성&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;2021.04.20&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tony9402/baekjoon/main/tree&#34;&gt;tree&lt;/a&gt; 태그 추가 &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;트리와 관련된 문제 뽑았습니다.&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://github.com/tony9402/baekjoon#contributors&#34;&gt;Contributors&lt;/a&gt; 디자인을 변경하였습니다.&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://www.acmicpc.net/workbook/by/tony9402&#34;&gt;문제집&lt;/a&gt; 전체를 업데이트 하였습니다.&lt;/li&gt; &#xA;    &lt;li&gt;각 문제집에 문제 번호를 볼 수 있도록 추가하였고 문제 번호로도 백준으로 이동할 수 있도록 업데이트 했습니다.&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;2021.04.03&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://github.com/tony9402/baekjoon/discussions&#34;&gt;discussions&lt;/a&gt; 추가&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;2021.04.02&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://github.com/tony9402/baekjoon/raw/main/README.md&#34;&gt;README.md&lt;/a&gt; 자동 생성 스크립트 제작 &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;각 알고리즘 문제는 자동으로 추가되고 &lt;a href=&#34;https://github.com/tony9402/baekjoon/raw/main/status.md&#34;&gt;status.md&lt;/a&gt;에 자동으로 카운팅되지만 README.md에서는 안되는 현상 발견하여 해결&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;알고리즘 문제 제목 틀린거 자동으로 찾아 수정&lt;/li&gt; &#xA;    &lt;li&gt;일정 주기마다 알고리즘 난이도 갱신&lt;/li&gt; &#xA;    &lt;li&gt;문제 정보를 담는 json을 만듦&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;2021.03.31&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://github.com/tony9402/baekjoon/actions&#34;&gt;Github Actions&lt;/a&gt; 도입&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;http://solved.ac&#34;&gt;solved&lt;/a&gt;의 난이도 변경을 일정 시간마다 체크하여 자동 업데이트 (백준 문제집은 X)&lt;/li&gt; &#xA;    &lt;li&gt;난이도 변경은 &lt;a href=&#34;https://github.com/tony9402/baekjoon/raw/main/change_level.log&#34;&gt;로그&lt;/a&gt;로 남겨놓음&lt;/li&gt; &#xA;    &lt;li&gt;솔루션 파일만 폴더 형식에만 맞추면 알아서 README 업데이트(솔루션 링크 연결 등)&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;2021.03.27&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;README.md 업데이트를 더더욱 자동화를 위해 README.md 위에 설명 부분을 header.md로 분리&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;2021.03.15&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;추천 문제 &lt;a href=&#34;https://github.com/tony9402/baekjoon/tree/main/solution&#34;&gt;solution&lt;/a&gt; (C++ 기준) 완성도 정리하는 스크립트 생성&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;2021.01.15&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;문제 &lt;a href=&#34;https://raw.githubusercontent.com/tony9402/baekjoon/main/math/list.md&#34;&gt;이렇게&lt;/a&gt; 뽑으면 자동으로 markdown 테이블을 만들어주는 스크립트 제작&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;/p&gt;&#xA;&lt;/details&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;자세히&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 코드 리팩토링&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Contributors 추가 스크립트화&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 문제 뽑으면 Discussions 또는 Issue에서 바로 간단한 명령어로 추가 기능(스크립트화)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 문제 추가 방식 변경&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
</feed>