<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-17T01:31:54Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>grafana/oncall</title>
    <updated>2022-06-17T01:31:54Z</updated>
    <id>tag:github.com,2022-06-17:/grafana/oncall</id>
    <link href="https://github.com/grafana/oncall" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Developer-friendly incident response with brilliant Slack integration&lt;/p&gt;&lt;hr&gt;&lt;img width=&#34;400px&#34; src=&#34;https://raw.githubusercontent.com/grafana/oncall/dev/docs/img/logo.png&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/grafana/oncall/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/grafana/oncall?display_name=tag&amp;amp;sort=semver&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/grafana/oncall/raw/dev/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/grafana/oncall&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/grafana/oncall/tags&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/grafana/oncall&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://slack.grafana.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/join%20slack-%23grafana-%2Doncall-brightgreen.svg?sanitize=true&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/grafana/oncall/discussions&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/discuss-oncall%20forum-orange.svg?sanitize=true&#34; alt=&#34;Discussion&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://drone.grafana.net/grafana/oncall&#34;&gt;&lt;img src=&#34;https://drone.grafana.net/api/badges/grafana/oncall/status.svg?ref=refs/heads/dev&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Developer-friendly incident response with brilliant Slack integration.&lt;/p&gt; &#xA;&lt;img width=&#34;60%&#34; src=&#34;https://raw.githubusercontent.com/grafana/oncall/dev/screenshot.png&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Collect and analyze alerts from multiple monitoring systems&lt;/li&gt; &#xA; &lt;li&gt;On-call rotations based on schedules&lt;/li&gt; &#xA; &lt;li&gt;Automatic escalations&lt;/li&gt; &#xA; &lt;li&gt;Phone calls, SMS, Slack, Telegram notifications&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;We prepared multiple environments: &lt;a href=&#34;https://grafana.com/docs/grafana-cloud/oncall/open-source/#production-environment&#34;&gt;production&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/grafana/oncall/dev/DEVELOPER.md&#34;&gt;developer&lt;/a&gt; and hobby:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download docker-compose.yaml:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -fsSL https://raw.githubusercontent.com/grafana/oncall/dev/docker-compose.yml -o docker-compose.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Set variables:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#34;DOMAIN=http://localhost:8080&#xA;SECRET_KEY=my_random_secret_must_be_more_than_32_characters_long&#xA;RABBITMQ_PASSWORD=rabbitmq_secret_pw&#xA;MYSQL_PASSWORD=mysql_secret_pw&#xA;COMPOSE_PROFILES=with_grafana  # Remove this line if you want to use existing grafana&#xA;GRAFANA_USER=admin&#xA;GRAFANA_PASSWORD=admin&#34; &amp;gt; .env_hobby&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Launch services:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose --env-file .env_hobby -f docker-compose.yml up --build -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Issue one-time invite token:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose --env-file .env_hobby -f docker-compose.yml run engine python manage.py issue_invite_for_the_frontend --override&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;http://localhost:3000/plugins/grafana-oncall-app&#34;&gt;OnCall Plugin Configuration&lt;/a&gt; (or find OnCall plugin in configuration-&amp;gt;plugins) and connect OnCall &lt;em&gt;plugin&lt;/em&gt; with OnCall &lt;em&gt;backend&lt;/em&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;Invite token: ^^^ from the previous step.&#xA;OnCall backend URL: http://engine:8080&#xA;Grafana Url: http://grafana:3000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Enjoy! Check our &lt;a href=&#34;https://grafana.com/docs/grafana-cloud/oncall/open-source/&#34;&gt;OSS docs&lt;/a&gt; if you want to set up Slack, Telegram, Twilio or SMS/calls through Grafana Cloud.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Join community&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/grafana/oncall/discussions/categories/community-calls&#34;&gt;&lt;img width=&#34;200px&#34; src=&#34;https://raw.githubusercontent.com/grafana/oncall/dev/docs/img/community_call.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/grafana/oncall/discussions&#34;&gt;&lt;img width=&#34;200px&#34; src=&#34;https://raw.githubusercontent.com/grafana/oncall/dev/docs/img/GH_discussions.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://slack.grafana.com/&#34;&gt;&lt;img width=&#34;200px&#34; src=&#34;https://raw.githubusercontent.com/grafana/oncall/dev/docs/img/slack.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Further Reading&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Migration from the PagerDuty&lt;/em&gt; - &lt;a href=&#34;https://github.com/grafana/oncall/tree/dev/tools/pagerduty-migrator&#34;&gt;Migrator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Documentation&lt;/em&gt; - &lt;a href=&#34;https://grafana.com/docs/grafana-cloud/oncall/&#34;&gt;Grafana OnCall&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Blog Post&lt;/em&gt; - &lt;a href=&#34;https://grafana.com/blog/2021/11/09/announcing-grafana-oncall/&#34;&gt;Announcing Grafana OnCall, the easiest way to do on-call management&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Presentation&lt;/em&gt; - &lt;a href=&#34;https://grafana.com/go/observabilitycon/2021/alerting/?pg=blog&#34;&gt;Deep dive into the Grafana, Prometheus, and Alertmanager stack for alerting and on-call management&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Kai-46/ARF-svox2</title>
    <updated>2022-06-17T01:31:54Z</updated>
    <id>tag:github.com,2022-06-17:/Kai-46/ARF-svox2</id>
    <link href="https://github.com/Kai-46/ARF-svox2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Artistic Radiance Fields&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ARF: Artistic Radiance Fields&lt;/h1&gt; &#xA;&lt;p&gt;Project page: &lt;a href=&#34;https://www.cs.cornell.edu/projects/arf/&#34;&gt;https://www.cs.cornell.edu/projects/arf/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kai-46/ARF-svox2/master/resources/ARF.mov&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Citation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{zhang2022arf,&#xA;      title={ARF: Artistic Radiance Fields}, &#xA;      author={Kai Zhang and Nick Kolkin and Sai Bi and Fujun Luan and Zexiang Xu and Eli Shechtman and Noah Snavely},&#xA;      year={2022},&#xA;      booktitle={arXiv},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;h3&gt;Install environment&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;. ./create_env.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Donwload data&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;. ./download_data.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Optimize artistic radiance fields&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd opt &amp;amp;&amp;amp; . ./try_{llff/tnt/custom}.sh [scene_name] [style_id]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Select &lt;code&gt;{llff/tnt/custom}&lt;/code&gt; according to your data type. For example, use &lt;code&gt;llff&lt;/code&gt; for &lt;code&gt;flower&lt;/code&gt; scene, &lt;code&gt;tnt&lt;/code&gt; for &lt;code&gt;Playground&lt;/code&gt; scene, and &lt;code&gt;custom&lt;/code&gt; for &lt;code&gt;lego&lt;/code&gt; scene.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[style_id].jpg&lt;/code&gt; is the style image inside &lt;code&gt;../data/styles&lt;/code&gt;. For example, &lt;code&gt;14.jpg&lt;/code&gt; is the starry night painting.&lt;/li&gt; &#xA; &lt;li&gt;Note that a photorealistic radiance field will first be reconstructed for each scene, if it doesn&#39;t exist on disk. This will take extra time.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Check results&lt;/h3&gt; &#xA;&lt;p&gt;The optimized artistic radiance filed is inside &lt;code&gt;opt/ckpt_arf/[scene_name]_[style_id]&lt;/code&gt;, while the photorealistic one is inside &lt;code&gt;opt/ckpt_svox2/[scene_name]_[style_id]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Custom data&lt;/h3&gt; &#xA;&lt;p&gt;Please follow the steps on &lt;a href=&#34;https://github.com/sxyu/svox2&#34;&gt;Plenoxel&lt;/a&gt; to prepare your own custom data.&lt;/p&gt; &#xA;&lt;h2&gt;ARF with other NeRF variants&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;ARF-TensoRF&lt;/a&gt;: to be released; stay tuned.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;ARF-NeRF&lt;/a&gt;: to be released; stay tuned.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgement:&lt;/h2&gt; &#xA;&lt;p&gt;We would like to thank &lt;a href=&#34;https://github.com/sxyu/svox2&#34;&gt;Plenoxel&lt;/a&gt; authors for open-sourcing their implementations.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ijl/orjson</title>
    <updated>2022-06-17T01:31:54Z</updated>
    <id>tag:github.com,2022-06-17:/ijl/orjson</id>
    <link href="https://github.com/ijl/orjson" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast, correct Python JSON library supporting dataclasses, datetimes, and numpy&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;orjson&lt;/h1&gt; &#xA;&lt;p&gt;orjson is a fast, correct JSON library for Python. It &lt;a href=&#34;https://github.com/ijl/orjson#performance&#34;&gt;benchmarks&lt;/a&gt; as the fastest Python library for JSON and is more correct than the standard json library or other third-party libraries. It serializes &lt;a href=&#34;https://github.com/ijl/orjson#dataclass&#34;&gt;dataclass&lt;/a&gt;, &lt;a href=&#34;https://github.com/ijl/orjson#datetime&#34;&gt;datetime&lt;/a&gt;, &lt;a href=&#34;https://github.com/ijl/orjson#numpy&#34;&gt;numpy&lt;/a&gt;, and &lt;a href=&#34;https://github.com/ijl/orjson#uuid&#34;&gt;UUID&lt;/a&gt; instances natively.&lt;/p&gt; &#xA;&lt;p&gt;Its features and drawbacks compared to other Python JSON libraries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;serializes &lt;code&gt;dataclass&lt;/code&gt; instances 40-50x as fast as other libraries&lt;/li&gt; &#xA; &lt;li&gt;serializes &lt;code&gt;datetime&lt;/code&gt;, &lt;code&gt;date&lt;/code&gt;, and &lt;code&gt;time&lt;/code&gt; instances to RFC 3339 format, e.g., &#34;1970-01-01T00:00:00+00:00&#34;&lt;/li&gt; &#xA; &lt;li&gt;serializes &lt;code&gt;numpy.ndarray&lt;/code&gt; instances 4-12x as fast with 0.3x the memory usage of other libraries&lt;/li&gt; &#xA; &lt;li&gt;pretty prints 10x to 20x as fast as the standard library&lt;/li&gt; &#xA; &lt;li&gt;serializes to &lt;code&gt;bytes&lt;/code&gt; rather than &lt;code&gt;str&lt;/code&gt;, i.e., is not a drop-in replacement&lt;/li&gt; &#xA; &lt;li&gt;serializes &lt;code&gt;str&lt;/code&gt; without escaping unicode to ASCII, e.g., &#34;好&#34; rather than &#34;\\u597d&#34;&lt;/li&gt; &#xA; &lt;li&gt;serializes &lt;code&gt;float&lt;/code&gt; 10x as fast and deserializes twice as fast as other libraries&lt;/li&gt; &#xA; &lt;li&gt;serializes subclasses of &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, and &lt;code&gt;dict&lt;/code&gt; natively, requiring &lt;code&gt;default&lt;/code&gt; to specify how to serialize others&lt;/li&gt; &#xA; &lt;li&gt;serializes arbitrary types using a &lt;code&gt;default&lt;/code&gt; hook&lt;/li&gt; &#xA; &lt;li&gt;has strict UTF-8 conformance, more correct than the standard library&lt;/li&gt; &#xA; &lt;li&gt;has strict JSON conformance in not supporting Nan/Infinity/-Infinity&lt;/li&gt; &#xA; &lt;li&gt;has an option for strict JSON conformance on 53-bit integers with default support for 64-bit&lt;/li&gt; &#xA; &lt;li&gt;does not provide &lt;code&gt;load()&lt;/code&gt; or &lt;code&gt;dump()&lt;/code&gt; functions for reading from/writing to file-like objects&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;orjson supports CPython 3.7, 3.8, 3.9, and 3.10. It distributes x86_64/amd64, aarch64/armv8, and arm7 wheels for Linux, amd64 and aarch64 wheels for macOS, and amd64 wheels for Windows. orjson does not support PyPy. Releases follow semantic versioning and serializing a new object type without an opt-in flag is considered a breaking change.&lt;/p&gt; &#xA;&lt;p&gt;orjson is licensed under both the Apache 2.0 and MIT licenses. The repository and issue tracker is &lt;a href=&#34;https://github.com/ijl/orjson&#34;&gt;github.com/ijl/orjson&lt;/a&gt;, and patches may be submitted there. There is a &lt;a href=&#34;https://github.com/ijl/orjson/raw/master/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; available in the repository.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ijl/orjson#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ijl/orjson#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ijl/orjson#quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ijl/orjson#migrating&#34;&gt;Migrating&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ijl/orjson#serialize&#34;&gt;Serialize&lt;/a&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/ijl/orjson#default&#34;&gt;default&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/ijl/orjson#option&#34;&gt;option&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ijl/orjson#deserialize&#34;&gt;Deserialize&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ijl/orjson#types&#34;&gt;Types&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ijl/orjson#dataclass&#34;&gt;dataclass&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ijl/orjson#datetime&#34;&gt;datetime&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ijl/orjson#enum&#34;&gt;enum&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ijl/orjson#float&#34;&gt;float&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ijl/orjson#int&#34;&gt;int&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ijl/orjson#numpy&#34;&gt;numpy&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ijl/orjson#str&#34;&gt;str&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ijl/orjson#uuid&#34;&gt;uuid&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ijl/orjson#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ijl/orjson#performance&#34;&gt;Performance&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ijl/orjson#latency&#34;&gt;Latency&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ijl/orjson#memory&#34;&gt;Memory&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ijl/orjson#reproducing&#34;&gt;Reproducing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ijl/orjson#questions&#34;&gt;Questions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ijl/orjson#packaging&#34;&gt;Packaging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ijl/orjson#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;To install a wheel from PyPI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip install --upgrade &#34;pip&amp;gt;=20.3&#34; # manylinux_x_y, universal2 wheel support&#xA;pip install --upgrade orjson&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build a wheel, see &lt;a href=&#34;https://github.com/ijl/orjson#packaging&#34;&gt;packaging&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Quickstart&lt;/h3&gt; &#xA;&lt;p&gt;This is an example of serializing, with options specified, and deserializing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import orjson, datetime, numpy&#xA;&amp;gt;&amp;gt;&amp;gt; data = {&#xA;    &#34;type&#34;: &#34;job&#34;,&#xA;    &#34;created_at&#34;: datetime.datetime(1970, 1, 1),&#xA;    &#34;status&#34;: &#34;🆗&#34;,&#xA;    &#34;payload&#34;: numpy.array([[1, 2], [3, 4]]),&#xA;}&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(data, option=orjson.OPT_NAIVE_UTC | orjson.OPT_SERIALIZE_NUMPY)&#xA;b&#39;{&#34;type&#34;:&#34;job&#34;,&#34;created_at&#34;:&#34;1970-01-01T00:00:00+00:00&#34;,&#34;status&#34;:&#34;\xf0\x9f\x86\x97&#34;,&#34;payload&#34;:[[1,2],[3,4]]}&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.loads(_)&#xA;{&#39;type&#39;: &#39;job&#39;, &#39;created_at&#39;: &#39;1970-01-01T00:00:00+00:00&#39;, &#39;status&#39;: &#39;🆗&#39;, &#39;payload&#39;: [[1, 2], [3, 4]]}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Migrating&lt;/h3&gt; &#xA;&lt;p&gt;orjson version 3 serializes more types than version 2. Subclasses of &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;dict&lt;/code&gt;, and &lt;code&gt;list&lt;/code&gt; are now serialized. This is faster and more similar to the standard library. It can be disabled with &lt;code&gt;orjson.OPT_PASSTHROUGH_SUBCLASS&lt;/code&gt;.&lt;code&gt;dataclasses.dataclass&lt;/code&gt; instances are now serialized by default and cannot be customized in a &lt;code&gt;default&lt;/code&gt; function unless &lt;code&gt;option=orjson.OPT_PASSTHROUGH_DATACLASS&lt;/code&gt; is specified. &lt;code&gt;uuid.UUID&lt;/code&gt; instances are serialized by default. For any type that is now serialized, implementations in a &lt;code&gt;default&lt;/code&gt; function and options enabling them can be removed but do not need to be. There was no change in deserialization.&lt;/p&gt; &#xA;&lt;p&gt;To migrate from the standard library, the largest difference is that &lt;code&gt;orjson.dumps&lt;/code&gt; returns &lt;code&gt;bytes&lt;/code&gt; and &lt;code&gt;json.dumps&lt;/code&gt; returns a &lt;code&gt;str&lt;/code&gt;. Users with &lt;code&gt;dict&lt;/code&gt; objects using non-&lt;code&gt;str&lt;/code&gt; keys should specify &lt;code&gt;option=orjson.OPT_NON_STR_KEYS&lt;/code&gt;. &lt;code&gt;sort_keys&lt;/code&gt; is replaced by &lt;code&gt;option=orjson.OPT_SORT_KEYS&lt;/code&gt;. &lt;code&gt;indent&lt;/code&gt; is replaced by &lt;code&gt;option=orjson.OPT_INDENT_2&lt;/code&gt; and other levels of indentation are not supported.&lt;/p&gt; &#xA;&lt;h3&gt;Serialize&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def dumps(&#xA;    __obj: Any,&#xA;    default: Optional[Callable[[Any], Any]] = ...,&#xA;    option: Optional[int] = ...,&#xA;) -&amp;gt; bytes: ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;dumps()&lt;/code&gt; serializes Python objects to JSON.&lt;/p&gt; &#xA;&lt;p&gt;It natively serializes &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;dict&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;tuple&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;dataclasses.dataclass&lt;/code&gt;, &lt;code&gt;typing.TypedDict&lt;/code&gt;, &lt;code&gt;datetime.datetime&lt;/code&gt;, &lt;code&gt;datetime.date&lt;/code&gt;, &lt;code&gt;datetime.time&lt;/code&gt;, &lt;code&gt;uuid.UUID&lt;/code&gt;, &lt;code&gt;numpy.ndarray&lt;/code&gt;, and &lt;code&gt;None&lt;/code&gt; instances. It supports arbitrary types through &lt;code&gt;default&lt;/code&gt;. It serializes subclasses of &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;dict&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;dataclasses.dataclass&lt;/code&gt;, and &lt;code&gt;enum.Enum&lt;/code&gt;. It does not serialize subclasses of &lt;code&gt;tuple&lt;/code&gt; to avoid serializing &lt;code&gt;namedtuple&lt;/code&gt; objects as arrays. To avoid serializing subclasses, specify the option &lt;code&gt;orjson.OPT_PASSTHROUGH_SUBCLASS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The output is a &lt;code&gt;bytes&lt;/code&gt; object containing UTF-8.&lt;/p&gt; &#xA;&lt;p&gt;The global interpreter lock (GIL) is held for the duration of the call.&lt;/p&gt; &#xA;&lt;p&gt;It raises &lt;code&gt;JSONEncodeError&lt;/code&gt; on an unsupported type. This exception message describes the invalid object with the error message &lt;code&gt;Type is not JSON serializable: ...&lt;/code&gt;. To fix this, specify &lt;a href=&#34;https://github.com/ijl/orjson#default&#34;&gt;default&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It raises &lt;code&gt;JSONEncodeError&lt;/code&gt; on a &lt;code&gt;str&lt;/code&gt; that contains invalid UTF-8.&lt;/p&gt; &#xA;&lt;p&gt;It raises &lt;code&gt;JSONEncodeError&lt;/code&gt; on an integer that exceeds 64 bits by default or, with &lt;code&gt;OPT_STRICT_INTEGER&lt;/code&gt;, 53 bits.&lt;/p&gt; &#xA;&lt;p&gt;It raises &lt;code&gt;JSONEncodeError&lt;/code&gt; if a &lt;code&gt;dict&lt;/code&gt; has a key of a type other than &lt;code&gt;str&lt;/code&gt;, unless &lt;code&gt;OPT_NON_STR_KEYS&lt;/code&gt; is specified.&lt;/p&gt; &#xA;&lt;p&gt;It raises &lt;code&gt;JSONEncodeError&lt;/code&gt; if the output of &lt;code&gt;default&lt;/code&gt; recurses to handling by &lt;code&gt;default&lt;/code&gt; more than 254 levels deep.&lt;/p&gt; &#xA;&lt;p&gt;It raises &lt;code&gt;JSONEncodeError&lt;/code&gt; on circular references.&lt;/p&gt; &#xA;&lt;p&gt;It raises &lt;code&gt;JSONEncodeError&lt;/code&gt; if a &lt;code&gt;tzinfo&lt;/code&gt; on a datetime object is unsupported.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;JSONEncodeError&lt;/code&gt; is a subclass of &lt;code&gt;TypeError&lt;/code&gt;. This is for compatibility with the standard library.&lt;/p&gt; &#xA;&lt;h4&gt;default&lt;/h4&gt; &#xA;&lt;p&gt;To serialize a subclass or arbitrary types, specify &lt;code&gt;default&lt;/code&gt; as a callable that returns a supported type. &lt;code&gt;default&lt;/code&gt; may be a function, lambda, or callable class instance. To specify that a type was not handled by &lt;code&gt;default&lt;/code&gt;, raise an exception such as &lt;code&gt;TypeError&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import orjson, decimal&#xA;&amp;gt;&amp;gt;&amp;gt;&#xA;def default(obj):&#xA;    if isinstance(obj, decimal.Decimal):&#xA;        return str(obj)&#xA;    raise TypeError&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(decimal.Decimal(&#34;0.0842389659712649442845&#34;))&#xA;JSONEncodeError: Type is not JSON serializable: decimal.Decimal&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(decimal.Decimal(&#34;0.0842389659712649442845&#34;), default=default)&#xA;b&#39;&#34;0.0842389659712649442845&#34;&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps({1, 2}, default=default)&#xA;orjson.JSONEncodeError: Type is not JSON serializable: set&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;default&lt;/code&gt; callable may return an object that itself must be handled by &lt;code&gt;default&lt;/code&gt; up to 254 times before an exception is raised.&lt;/p&gt; &#xA;&lt;p&gt;It is important that &lt;code&gt;default&lt;/code&gt; raise an exception if a type cannot be handled. Python otherwise implicitly returns &lt;code&gt;None&lt;/code&gt;, which appears to the caller like a legitimate value and is serialized:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import orjson, json, rapidjson&#xA;&amp;gt;&amp;gt;&amp;gt;&#xA;def default(obj):&#xA;    if isinstance(obj, decimal.Decimal):&#xA;        return str(obj)&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps({&#34;set&#34;:{1, 2}}, default=default)&#xA;b&#39;{&#34;set&#34;:null}&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; json.dumps({&#34;set&#34;:{1, 2}}, default=default)&#xA;&#39;{&#34;set&#34;:null}&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; rapidjson.dumps({&#34;set&#34;:{1, 2}}, default=default)&#xA;&#39;{&#34;set&#34;:null}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;option&lt;/h4&gt; &#xA;&lt;p&gt;To modify how data is serialized, specify &lt;code&gt;option&lt;/code&gt;. Each &lt;code&gt;option&lt;/code&gt; is an integer constant in &lt;code&gt;orjson&lt;/code&gt;. To specify multiple options, mask them together, e.g., &lt;code&gt;option=orjson.OPT_STRICT_INTEGER | orjson.OPT_NAIVE_UTC&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;OPT_APPEND_NEWLINE&lt;/h5&gt; &#xA;&lt;p&gt;Append &lt;code&gt;\n&lt;/code&gt; to the output. This is a convenience and optimization for the pattern of &lt;code&gt;dumps(...) + &#34;\n&#34;&lt;/code&gt;. &lt;code&gt;bytes&lt;/code&gt; objects are immutable and this pattern copies the original contents.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import orjson&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps([])&#xA;b&#34;[]&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps([], option=orjson.OPT_APPEND_NEWLINE)&#xA;b&#34;[]\n&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;OPT_INDENT_2&lt;/h5&gt; &#xA;&lt;p&gt;Pretty-print output with an indent of two spaces. This is equivalent to &lt;code&gt;indent=2&lt;/code&gt; in the standard library. Pretty printing is slower and the output larger. orjson is the fastest compared library at pretty printing and has much less of a slowdown to pretty print than the standard library does. This option is compatible with all other options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import orjson&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps({&#34;a&#34;: &#34;b&#34;, &#34;c&#34;: {&#34;d&#34;: True}, &#34;e&#34;: [1, 2]})&#xA;b&#39;{&#34;a&#34;:&#34;b&#34;,&#34;c&#34;:{&#34;d&#34;:true},&#34;e&#34;:[1,2]}&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(&#xA;    {&#34;a&#34;: &#34;b&#34;, &#34;c&#34;: {&#34;d&#34;: True}, &#34;e&#34;: [1, 2]},&#xA;    option=orjson.OPT_INDENT_2&#xA;)&#xA;b&#39;{\n  &#34;a&#34;: &#34;b&#34;,\n  &#34;c&#34;: {\n    &#34;d&#34;: true\n  },\n  &#34;e&#34;: [\n    1,\n    2\n  ]\n}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If displayed, the indentation and linebreaks appear like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;a&#34;: &#34;b&#34;,&#xA;  &#34;c&#34;: {&#xA;    &#34;d&#34;: true&#xA;  },&#xA;  &#34;e&#34;: [&#xA;    1,&#xA;    2&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This measures serializing the github.json fixture as compact (52KiB) or pretty (64KiB):&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th&gt;compact (ms)&lt;/th&gt; &#xA;   &lt;th&gt;pretty (ms)&lt;/th&gt; &#xA;   &lt;th&gt;vs. orjson&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;orjson&lt;/td&gt; &#xA;   &lt;td&gt;0.06&lt;/td&gt; &#xA;   &lt;td&gt;0.07&lt;/td&gt; &#xA;   &lt;td&gt;1.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ujson&lt;/td&gt; &#xA;   &lt;td&gt;0.18&lt;/td&gt; &#xA;   &lt;td&gt;0.19&lt;/td&gt; &#xA;   &lt;td&gt;2.8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rapidjson&lt;/td&gt; &#xA;   &lt;td&gt;0.22&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;simplejson&lt;/td&gt; &#xA;   &lt;td&gt;0.35&lt;/td&gt; &#xA;   &lt;td&gt;1.49&lt;/td&gt; &#xA;   &lt;td&gt;21.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;json&lt;/td&gt; &#xA;   &lt;td&gt;0.36&lt;/td&gt; &#xA;   &lt;td&gt;1.19&lt;/td&gt; &#xA;   &lt;td&gt;17.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;This measures serializing the citm_catalog.json fixture, more of a worst case due to the amount of nesting and newlines, as compact (489KiB) or pretty (1.1MiB):&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th&gt;compact (ms)&lt;/th&gt; &#xA;   &lt;th&gt;pretty (ms)&lt;/th&gt; &#xA;   &lt;th&gt;vs. orjson&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;orjson&lt;/td&gt; &#xA;   &lt;td&gt;0.88&lt;/td&gt; &#xA;   &lt;td&gt;1.73&lt;/td&gt; &#xA;   &lt;td&gt;1.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ujson&lt;/td&gt; &#xA;   &lt;td&gt;3.73&lt;/td&gt; &#xA;   &lt;td&gt;4.52&lt;/td&gt; &#xA;   &lt;td&gt;2.6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rapidjson&lt;/td&gt; &#xA;   &lt;td&gt;3.54&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;simplejson&lt;/td&gt; &#xA;   &lt;td&gt;11.77&lt;/td&gt; &#xA;   &lt;td&gt;72.06&lt;/td&gt; &#xA;   &lt;td&gt;41.6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;json&lt;/td&gt; &#xA;   &lt;td&gt;6.71&lt;/td&gt; &#xA;   &lt;td&gt;55.22&lt;/td&gt; &#xA;   &lt;td&gt;31.9&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;rapidjson is blank because it does not support pretty printing. This can be reproduced using the &lt;code&gt;pyindent&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;h5&gt;OPT_NAIVE_UTC&lt;/h5&gt; &#xA;&lt;p&gt;Serialize &lt;code&gt;datetime.datetime&lt;/code&gt; objects without a &lt;code&gt;tzinfo&lt;/code&gt; as UTC. This has no effect on &lt;code&gt;datetime.datetime&lt;/code&gt; objects that have &lt;code&gt;tzinfo&lt;/code&gt; set.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import orjson, datetime&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(&#xA;        datetime.datetime(1970, 1, 1, 0, 0, 0),&#xA;    )&#xA;b&#39;&#34;1970-01-01T00:00:00&#34;&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(&#xA;        datetime.datetime(1970, 1, 1, 0, 0, 0),&#xA;        option=orjson.OPT_NAIVE_UTC,&#xA;    )&#xA;b&#39;&#34;1970-01-01T00:00:00+00:00&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;OPT_NON_STR_KEYS&lt;/h5&gt; &#xA;&lt;p&gt;Serialize &lt;code&gt;dict&lt;/code&gt; keys of type other than &lt;code&gt;str&lt;/code&gt;. This allows &lt;code&gt;dict&lt;/code&gt; keys to be one of &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;None&lt;/code&gt;, &lt;code&gt;datetime.datetime&lt;/code&gt;, &lt;code&gt;datetime.date&lt;/code&gt;, &lt;code&gt;datetime.time&lt;/code&gt;, &lt;code&gt;enum.Enum&lt;/code&gt;, and &lt;code&gt;uuid.UUID&lt;/code&gt;. For comparison, the standard library serializes &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt; by default. orjson benchmarks as being faster at serializing non-&lt;code&gt;str&lt;/code&gt; keys than other libraries. This option is slower for &lt;code&gt;str&lt;/code&gt; keys than the default.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import orjson, datetime, uuid&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(&#xA;        {uuid.UUID(&#34;7202d115-7ff3-4c81-a7c1-2a1f067b1ece&#34;): [1, 2, 3]},&#xA;        option=orjson.OPT_NON_STR_KEYS,&#xA;    )&#xA;b&#39;{&#34;7202d115-7ff3-4c81-a7c1-2a1f067b1ece&#34;:[1,2,3]}&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(&#xA;        {datetime.datetime(1970, 1, 1, 0, 0, 0): [1, 2, 3]},&#xA;        option=orjson.OPT_NON_STR_KEYS | orjson.OPT_NAIVE_UTC,&#xA;    )&#xA;b&#39;{&#34;1970-01-01T00:00:00+00:00&#34;:[1,2,3]}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These types are generally serialized how they would be as values, e.g., &lt;code&gt;datetime.datetime&lt;/code&gt; is still an RFC 3339 string and respects options affecting it. The exception is that &lt;code&gt;int&lt;/code&gt; serialization does not respect &lt;code&gt;OPT_STRICT_INTEGER&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This option has the risk of creating duplicate keys. This is because non-&lt;code&gt;str&lt;/code&gt; objects may serialize to the same &lt;code&gt;str&lt;/code&gt; as an existing key, e.g., &lt;code&gt;{&#34;1&#34;: true, 1: false}&lt;/code&gt;. The last key to be inserted to the &lt;code&gt;dict&lt;/code&gt; will be serialized last and a JSON deserializer will presumably take the last occurrence of a key (in the above, &lt;code&gt;false&lt;/code&gt;). The first value will be lost.&lt;/p&gt; &#xA;&lt;p&gt;This option is compatible with &lt;code&gt;orjson.OPT_SORT_KEYS&lt;/code&gt;. If sorting is used, note the sort is unstable and will be unpredictable for duplicate keys.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import orjson, datetime&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(&#xA;    {&#34;other&#34;: 1, datetime.date(1970, 1, 5): 2, datetime.date(1970, 1, 3): 3},&#xA;    option=orjson.OPT_NON_STR_KEYS | orjson.OPT_SORT_KEYS&#xA;)&#xA;b&#39;{&#34;1970-01-03&#34;:3,&#34;1970-01-05&#34;:2,&#34;other&#34;:1}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This measures serializing 589KiB of JSON comprising a &lt;code&gt;list&lt;/code&gt; of 100 &lt;code&gt;dict&lt;/code&gt; in which each &lt;code&gt;dict&lt;/code&gt; has both 365 randomly-sorted &lt;code&gt;int&lt;/code&gt; keys representing epoch timestamps as well as one &lt;code&gt;str&lt;/code&gt; key and the value for each key is a single integer. In &#34;str keys&#34;, the keys were converted to &lt;code&gt;str&lt;/code&gt; before serialization, and orjson still specifes &lt;code&gt;option=orjson.OPT_NON_STR_KEYS&lt;/code&gt; (which is always somewhat slower).&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th&gt;str keys (ms)&lt;/th&gt; &#xA;   &lt;th&gt;int keys (ms)&lt;/th&gt; &#xA;   &lt;th&gt;int keys sorted (ms)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;orjson&lt;/td&gt; &#xA;   &lt;td&gt;1.53&lt;/td&gt; &#xA;   &lt;td&gt;2.16&lt;/td&gt; &#xA;   &lt;td&gt;4.29&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ujson&lt;/td&gt; &#xA;   &lt;td&gt;3.07&lt;/td&gt; &#xA;   &lt;td&gt;5.65&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rapidjson&lt;/td&gt; &#xA;   &lt;td&gt;4.29&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;simplejson&lt;/td&gt; &#xA;   &lt;td&gt;11.24&lt;/td&gt; &#xA;   &lt;td&gt;14.50&lt;/td&gt; &#xA;   &lt;td&gt;21.86&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;json&lt;/td&gt; &#xA;   &lt;td&gt;7.17&lt;/td&gt; &#xA;   &lt;td&gt;8.49&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;ujson is blank for sorting because it segfaults. json is blank because it raises &lt;code&gt;TypeError&lt;/code&gt; on attempting to sort before converting all keys to &lt;code&gt;str&lt;/code&gt;. rapidjson is blank because it does not support non-&lt;code&gt;str&lt;/code&gt; keys. This can be reproduced using the &lt;code&gt;pynonstr&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;h5&gt;OPT_OMIT_MICROSECONDS&lt;/h5&gt; &#xA;&lt;p&gt;Do not serialize the &lt;code&gt;microsecond&lt;/code&gt; field on &lt;code&gt;datetime.datetime&lt;/code&gt; and &lt;code&gt;datetime.time&lt;/code&gt; instances.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import orjson, datetime&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(&#xA;        datetime.datetime(1970, 1, 1, 0, 0, 0, 1),&#xA;    )&#xA;b&#39;&#34;1970-01-01T00:00:00.000001&#34;&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(&#xA;        datetime.datetime(1970, 1, 1, 0, 0, 0, 1),&#xA;        option=orjson.OPT_OMIT_MICROSECONDS,&#xA;    )&#xA;b&#39;&#34;1970-01-01T00:00:00&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;OPT_PASSTHROUGH_DATACLASS&lt;/h5&gt; &#xA;&lt;p&gt;Passthrough &lt;code&gt;dataclasses.dataclass&lt;/code&gt; instances to &lt;code&gt;default&lt;/code&gt;. This allows customizing their output but is much slower.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import orjson, dataclasses&#xA;&amp;gt;&amp;gt;&amp;gt;&#xA;@dataclasses.dataclass&#xA;class User:&#xA;    id: str&#xA;    name: str&#xA;    password: str&#xA;&#xA;def default(obj):&#xA;    if isinstance(obj, User):&#xA;        return {&#34;id&#34;: obj.id, &#34;name&#34;: obj.name}&#xA;    raise TypeError&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(User(&#34;3b1&#34;, &#34;asd&#34;, &#34;zxc&#34;))&#xA;b&#39;{&#34;id&#34;:&#34;3b1&#34;,&#34;name&#34;:&#34;asd&#34;,&#34;password&#34;:&#34;zxc&#34;}&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(User(&#34;3b1&#34;, &#34;asd&#34;, &#34;zxc&#34;), option=orjson.OPT_PASSTHROUGH_DATACLASS)&#xA;TypeError: Type is not JSON serializable: User&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(&#xA;        User(&#34;3b1&#34;, &#34;asd&#34;, &#34;zxc&#34;),&#xA;        option=orjson.OPT_PASSTHROUGH_DATACLASS,&#xA;        default=default,&#xA;    )&#xA;b&#39;{&#34;id&#34;:&#34;3b1&#34;,&#34;name&#34;:&#34;asd&#34;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;OPT_PASSTHROUGH_DATETIME&lt;/h5&gt; &#xA;&lt;p&gt;Passthrough &lt;code&gt;datetime.datetime&lt;/code&gt;, &lt;code&gt;datetime.date&lt;/code&gt;, and &lt;code&gt;datetime.time&lt;/code&gt; instances to &lt;code&gt;default&lt;/code&gt;. This allows serializing datetimes to a custom format, e.g., HTTP dates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import orjson, datetime&#xA;&amp;gt;&amp;gt;&amp;gt;&#xA;def default(obj):&#xA;    if isinstance(obj, datetime.datetime):&#xA;        return obj.strftime(&#34;%a, %d %b %Y %H:%M:%S GMT&#34;)&#xA;    raise TypeError&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps({&#34;created_at&#34;: datetime.datetime(1970, 1, 1)})&#xA;b&#39;{&#34;created_at&#34;:&#34;1970-01-01T00:00:00&#34;}&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps({&#34;created_at&#34;: datetime.datetime(1970, 1, 1)}, option=orjson.OPT_PASSTHROUGH_DATETIME)&#xA;TypeError: Type is not JSON serializable: datetime.datetime&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(&#xA;        {&#34;created_at&#34;: datetime.datetime(1970, 1, 1)},&#xA;        option=orjson.OPT_PASSTHROUGH_DATETIME,&#xA;        default=default,&#xA;    )&#xA;b&#39;{&#34;created_at&#34;:&#34;Thu, 01 Jan 1970 00:00:00 GMT&#34;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This does not affect datetimes in &lt;code&gt;dict&lt;/code&gt; keys if using OPT_NON_STR_KEYS.&lt;/p&gt; &#xA;&lt;h5&gt;OPT_PASSTHROUGH_SUBCLASS&lt;/h5&gt; &#xA;&lt;p&gt;Passthrough subclasses of builtin types to &lt;code&gt;default&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import orjson&#xA;&amp;gt;&amp;gt;&amp;gt;&#xA;class Secret(str):&#xA;    pass&#xA;&#xA;def default(obj):&#xA;    if isinstance(obj, Secret):&#xA;        return &#34;******&#34;&#xA;    raise TypeError&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(Secret(&#34;zxc&#34;))&#xA;b&#39;&#34;zxc&#34;&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(Secret(&#34;zxc&#34;), option=orjson.OPT_PASSTHROUGH_SUBCLASS)&#xA;TypeError: Type is not JSON serializable: Secret&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(Secret(&#34;zxc&#34;), option=orjson.OPT_PASSTHROUGH_SUBCLASS, default=default)&#xA;b&#39;&#34;******&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This does not affect serializing subclasses as &lt;code&gt;dict&lt;/code&gt; keys if using OPT_NON_STR_KEYS.&lt;/p&gt; &#xA;&lt;h5&gt;OPT_SERIALIZE_DATACLASS&lt;/h5&gt; &#xA;&lt;p&gt;This is deprecated and has no effect in version 3. In version 2 this was required to serialize &lt;code&gt;dataclasses.dataclass&lt;/code&gt; instances. For more, see &lt;a href=&#34;https://github.com/ijl/orjson#dataclass&#34;&gt;dataclass&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;OPT_SERIALIZE_NUMPY&lt;/h5&gt; &#xA;&lt;p&gt;Serialize &lt;code&gt;numpy.ndarray&lt;/code&gt; instances. For more, see &lt;a href=&#34;https://github.com/ijl/orjson#numpy&#34;&gt;numpy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;OPT_SERIALIZE_UUID&lt;/h5&gt; &#xA;&lt;p&gt;This is deprecated and has no effect in version 3. In version 2 this was required to serialize &lt;code&gt;uuid.UUID&lt;/code&gt; instances. For more, see &lt;a href=&#34;https://github.com/ijl/orjson#UUID&#34;&gt;UUID&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;OPT_SORT_KEYS&lt;/h5&gt; &#xA;&lt;p&gt;Serialize &lt;code&gt;dict&lt;/code&gt; keys in sorted order. The default is to serialize in an unspecified order. This is equivalent to &lt;code&gt;sort_keys=True&lt;/code&gt; in the standard library.&lt;/p&gt; &#xA;&lt;p&gt;This can be used to ensure the order is deterministic for hashing or tests. It has a substantial performance penalty and is not recommended in general.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import orjson&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps({&#34;b&#34;: 1, &#34;c&#34;: 2, &#34;a&#34;: 3})&#xA;b&#39;{&#34;b&#34;:1,&#34;c&#34;:2,&#34;a&#34;:3}&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps({&#34;b&#34;: 1, &#34;c&#34;: 2, &#34;a&#34;: 3}, option=orjson.OPT_SORT_KEYS)&#xA;b&#39;{&#34;a&#34;:3,&#34;b&#34;:1,&#34;c&#34;:2}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This measures serializing the twitter.json fixture unsorted and sorted:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th&gt;unsorted (ms)&lt;/th&gt; &#xA;   &lt;th&gt;sorted (ms)&lt;/th&gt; &#xA;   &lt;th&gt;vs. orjson&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;orjson&lt;/td&gt; &#xA;   &lt;td&gt;0.5&lt;/td&gt; &#xA;   &lt;td&gt;0.92&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ujson&lt;/td&gt; &#xA;   &lt;td&gt;1.61&lt;/td&gt; &#xA;   &lt;td&gt;2.48&lt;/td&gt; &#xA;   &lt;td&gt;2.7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rapidjson&lt;/td&gt; &#xA;   &lt;td&gt;2.17&lt;/td&gt; &#xA;   &lt;td&gt;2.89&lt;/td&gt; &#xA;   &lt;td&gt;3.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;simplejson&lt;/td&gt; &#xA;   &lt;td&gt;3.56&lt;/td&gt; &#xA;   &lt;td&gt;5.13&lt;/td&gt; &#xA;   &lt;td&gt;5.6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;json&lt;/td&gt; &#xA;   &lt;td&gt;3.59&lt;/td&gt; &#xA;   &lt;td&gt;4.59&lt;/td&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The benchmark can be reproduced using the &lt;code&gt;pysort&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;p&gt;The sorting is not collation/locale-aware:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import orjson&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps({&#34;a&#34;: 1, &#34;ä&#34;: 2, &#34;A&#34;: 3}, option=orjson.OPT_SORT_KEYS)&#xA;b&#39;{&#34;A&#34;:3,&#34;a&#34;:1,&#34;\xc3\xa4&#34;:2}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is the same sorting behavior as the standard library, rapidjson, simplejson, and ujson.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;dataclass&lt;/code&gt; also serialize as maps but this has no effect on them.&lt;/p&gt; &#xA;&lt;h5&gt;OPT_STRICT_INTEGER&lt;/h5&gt; &#xA;&lt;p&gt;Enforce 53-bit limit on integers. The limit is otherwise 64 bits, the same as the Python standard library. For more, see &lt;a href=&#34;https://github.com/ijl/orjson#int&#34;&gt;int&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;OPT_UTC_Z&lt;/h5&gt; &#xA;&lt;p&gt;Serialize a UTC timezone on &lt;code&gt;datetime.datetime&lt;/code&gt; instances as &lt;code&gt;Z&lt;/code&gt; instead of &lt;code&gt;+00:00&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import orjson, datetime, zoneinfo&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(&#xA;        datetime.datetime(1970, 1, 1, 0, 0, 0, tzinfo=zoneinfo.ZoneInfo(&#34;UTC&#34;)),&#xA;    )&#xA;b&#39;&#34;1970-01-01T00:00:00+00:00&#34;&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(&#xA;        datetime.datetime(1970, 1, 1, 0, 0, 0, tzinfo=zoneinfo.ZoneInfo(&#34;UTC&#34;)),&#xA;        option=orjson.OPT_UTC_Z&#xA;    )&#xA;b&#39;&#34;1970-01-01T00:00:00Z&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Deserialize&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def loads(__obj: Union[bytes, bytearray, memoryview, str]) -&amp;gt; Any: ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;loads()&lt;/code&gt; deserializes JSON to Python objects. It deserializes to &lt;code&gt;dict&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;, and &lt;code&gt;None&lt;/code&gt; objects.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;bytes&lt;/code&gt;, &lt;code&gt;bytearray&lt;/code&gt;, &lt;code&gt;memoryview&lt;/code&gt;, and &lt;code&gt;str&lt;/code&gt; input are accepted. If the input exists as a &lt;code&gt;memoryview&lt;/code&gt;, &lt;code&gt;bytearray&lt;/code&gt;, or &lt;code&gt;bytes&lt;/code&gt; object, it is recommended to pass these directly rather than creating an unnecessary &lt;code&gt;str&lt;/code&gt; object. This has lower memory usage and lower latency.&lt;/p&gt; &#xA;&lt;p&gt;The input must be valid UTF-8.&lt;/p&gt; &#xA;&lt;p&gt;orjson maintains a cache of map keys for the duration of the process. This causes a net reduction in memory usage by avoiding duplicate strings. The keys must be at most 64 bytes to be cached and 512 entries are stored.&lt;/p&gt; &#xA;&lt;p&gt;The global interpreter lock (GIL) is held for the duration of the call.&lt;/p&gt; &#xA;&lt;p&gt;It raises &lt;code&gt;JSONDecodeError&lt;/code&gt; if given an invalid type or invalid JSON. This includes if the input contains &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;Infinity&lt;/code&gt;, or &lt;code&gt;-Infinity&lt;/code&gt;, which the standard library allows, but is not valid JSON.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;JSONDecodeError&lt;/code&gt; is a subclass of &lt;code&gt;json.JSONDecodeError&lt;/code&gt; and &lt;code&gt;ValueError&lt;/code&gt;. This is for compatibility with the standard library.&lt;/p&gt; &#xA;&lt;h2&gt;Types&lt;/h2&gt; &#xA;&lt;h3&gt;dataclass&lt;/h3&gt; &#xA;&lt;p&gt;orjson serializes instances of &lt;code&gt;dataclasses.dataclass&lt;/code&gt; natively. It serializes instances 40-50x as fast as other libraries and avoids a severe slowdown seen in other libraries compared to serializing &lt;code&gt;dict&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is supported to pass all variants of dataclasses, including dataclasses using &lt;code&gt;__slots__&lt;/code&gt;, frozen dataclasses, those with optional or default attributes, and subclasses. There is a performance benefit to not using &lt;code&gt;__slots__&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th&gt;dict (ms)&lt;/th&gt; &#xA;   &lt;th&gt;dataclass (ms)&lt;/th&gt; &#xA;   &lt;th&gt;vs. orjson&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;orjson&lt;/td&gt; &#xA;   &lt;td&gt;1.40&lt;/td&gt; &#xA;   &lt;td&gt;1.60&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ujson&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rapidjson&lt;/td&gt; &#xA;   &lt;td&gt;3.64&lt;/td&gt; &#xA;   &lt;td&gt;68.48&lt;/td&gt; &#xA;   &lt;td&gt;42&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;simplejson&lt;/td&gt; &#xA;   &lt;td&gt;14.21&lt;/td&gt; &#xA;   &lt;td&gt;92.18&lt;/td&gt; &#xA;   &lt;td&gt;57&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;json&lt;/td&gt; &#xA;   &lt;td&gt;13.28&lt;/td&gt; &#xA;   &lt;td&gt;94.90&lt;/td&gt; &#xA;   &lt;td&gt;59&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;This measures serializing 555KiB of JSON, orjson natively and other libraries using &lt;code&gt;default&lt;/code&gt; to serialize the output of &lt;code&gt;dataclasses.asdict()&lt;/code&gt;. This can be reproduced using the &lt;code&gt;pydataclass&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;p&gt;Dataclasses are serialized as maps, with every attribute serialized and in the order given on class definition:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import dataclasses, orjson, typing&#xA;&#xA;@dataclasses.dataclass&#xA;class Member:&#xA;    id: int&#xA;    active: bool = dataclasses.field(default=False)&#xA;&#xA;@dataclasses.dataclass&#xA;class Object:&#xA;    id: int&#xA;    name: str&#xA;    members: typing.List[Member]&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(Object(1, &#34;a&#34;, [Member(1, True), Member(2)]))&#xA;b&#39;{&#34;id&#34;:1,&#34;name&#34;:&#34;a&#34;,&#34;members&#34;:[{&#34;id&#34;:1,&#34;active&#34;:true},{&#34;id&#34;:2,&#34;active&#34;:false}]}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;datetime&lt;/h3&gt; &#xA;&lt;p&gt;orjson serializes &lt;code&gt;datetime.datetime&lt;/code&gt; objects to &lt;a href=&#34;https://tools.ietf.org/html/rfc3339&#34;&gt;RFC 3339&lt;/a&gt; format, e.g., &#34;1970-01-01T00:00:00+00:00&#34;. This is a subset of ISO 8601 and is compatible with &lt;code&gt;isoformat()&lt;/code&gt; in the standard library.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import orjson, datetime, zoneinfo&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(&#xA;    datetime.datetime(2018, 12, 1, 2, 3, 4, 9, tzinfo=zoneinfo.ZoneInfo(&#34;Australia/Adelaide&#34;))&#xA;)&#xA;b&#39;&#34;2018-12-01T02:03:04.000009+10:30&#34;&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(&#xA;    datetime.datetime(2100, 9, 1, 21, 55, 2).replace(tzinfo=zoneinfo.ZoneInfo(&#34;UTC&#34;))&#xA;)&#xA;b&#39;&#34;2100-09-01T21:55:02+00:00&#34;&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(&#xA;    datetime.datetime(2100, 9, 1, 21, 55, 2)&#xA;)&#xA;b&#39;&#34;2100-09-01T21:55:02&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;datetime.datetime&lt;/code&gt; supports instances with a &lt;code&gt;tzinfo&lt;/code&gt; that is &lt;code&gt;None&lt;/code&gt;, &lt;code&gt;datetime.timezone.utc&lt;/code&gt;, a timezone instance from the python3.9+ &lt;code&gt;zoneinfo&lt;/code&gt; module, or a timezone instance from the third-party &lt;code&gt;pendulum&lt;/code&gt;, &lt;code&gt;pytz&lt;/code&gt;, or &lt;code&gt;dateutil&lt;/code&gt;/&lt;code&gt;arrow&lt;/code&gt; libraries.&lt;/p&gt; &#xA;&lt;p&gt;It is fastest to use the standard library&#39;s &lt;code&gt;zoneinfo.ZoneInfo&lt;/code&gt; for timezones.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;datetime.time&lt;/code&gt; objects must not have a &lt;code&gt;tzinfo&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import orjson, datetime&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(datetime.time(12, 0, 15, 290))&#xA;b&#39;&#34;12:00:15.000290&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;datetime.date&lt;/code&gt; objects will always serialize.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import orjson, datetime&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(datetime.date(1900, 1, 2))&#xA;b&#39;&#34;1900-01-02&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Errors with &lt;code&gt;tzinfo&lt;/code&gt; result in &lt;code&gt;JSONEncodeError&lt;/code&gt; being raised.&lt;/p&gt; &#xA;&lt;p&gt;It is faster to have orjson serialize datetime objects than to do so before calling &lt;code&gt;dumps()&lt;/code&gt;. If using an unsupported type such as &lt;code&gt;pendulum.datetime&lt;/code&gt;, use &lt;code&gt;default&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To disable serialization of &lt;code&gt;datetime&lt;/code&gt; objects specify the option &lt;code&gt;orjson.OPT_PASSTHROUGH_DATETIME&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To use &#34;Z&#34; suffix instead of &#34;+00:00&#34; to indicate UTC (&#34;Zulu&#34;) time, use the option &lt;code&gt;orjson.OPT_UTC_Z&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To assume datetimes without timezone are UTC, use the option &lt;code&gt;orjson.OPT_NAIVE_UTC&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;enum&lt;/h3&gt; &#xA;&lt;p&gt;orjson serializes enums natively. Options apply to their values.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import enum, datetime, orjson&#xA;&amp;gt;&amp;gt;&amp;gt;&#xA;class DatetimeEnum(enum.Enum):&#xA;    EPOCH = datetime.datetime(1970, 1, 1, 0, 0, 0)&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(DatetimeEnum.EPOCH)&#xA;b&#39;&#34;1970-01-01T00:00:00&#34;&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(DatetimeEnum.EPOCH, option=orjson.OPT_NAIVE_UTC)&#xA;b&#39;&#34;1970-01-01T00:00:00+00:00&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enums with members that are not supported types can be serialized using &lt;code&gt;default&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import enum, orjson&#xA;&amp;gt;&amp;gt;&amp;gt;&#xA;class Custom:&#xA;    def __init__(self, val):&#xA;        self.val = val&#xA;&#xA;def default(obj):&#xA;    if isinstance(obj, Custom):&#xA;        return obj.val&#xA;    raise TypeError&#xA;&#xA;class CustomEnum(enum.Enum):&#xA;    ONE = Custom(1)&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(CustomEnum.ONE, default=default)&#xA;b&#39;1&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;float&lt;/h3&gt; &#xA;&lt;p&gt;orjson serializes and deserializes double precision floats with no loss of precision and consistent rounding.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;orjson.dumps()&lt;/code&gt; serializes Nan, Infinity, and -Infinity, which are not compliant JSON, as &lt;code&gt;null&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import orjson, ujson, rapidjson, json&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps([float(&#34;NaN&#34;), float(&#34;Infinity&#34;), float(&#34;-Infinity&#34;)])&#xA;b&#39;[null,null,null]&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; ujson.dumps([float(&#34;NaN&#34;), float(&#34;Infinity&#34;), float(&#34;-Infinity&#34;)])&#xA;OverflowError: Invalid Inf value when encoding double&#xA;&amp;gt;&amp;gt;&amp;gt; rapidjson.dumps([float(&#34;NaN&#34;), float(&#34;Infinity&#34;), float(&#34;-Infinity&#34;)])&#xA;&#39;[NaN,Infinity,-Infinity]&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; json.dumps([float(&#34;NaN&#34;), float(&#34;Infinity&#34;), float(&#34;-Infinity&#34;)])&#xA;&#39;[NaN, Infinity, -Infinity]&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;int&lt;/h3&gt; &#xA;&lt;p&gt;orjson serializes and deserializes 64-bit integers by default. The range supported is a signed 64-bit integer&#39;s minimum (-9223372036854775807) to an unsigned 64-bit integer&#39;s maximum (18446744073709551615). This is widely compatible, but there are implementations that only support 53-bits for integers, e.g., web browsers. For those implementations, &lt;code&gt;dumps()&lt;/code&gt; can be configured to raise a &lt;code&gt;JSONEncodeError&lt;/code&gt; on values exceeding the 53-bit range.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import orjson&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(9007199254740992)&#xA;b&#39;9007199254740992&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(9007199254740992, option=orjson.OPT_STRICT_INTEGER)&#xA;JSONEncodeError: Integer exceeds 53-bit range&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(-9007199254740992, option=orjson.OPT_STRICT_INTEGER)&#xA;JSONEncodeError: Integer exceeds 53-bit range&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;numpy&lt;/h3&gt; &#xA;&lt;p&gt;orjson natively serializes &lt;code&gt;numpy.ndarray&lt;/code&gt; and individual &lt;code&gt;numpy.float64&lt;/code&gt;, &lt;code&gt;numpy.float32&lt;/code&gt;, &lt;code&gt;numpy.int64&lt;/code&gt;, &lt;code&gt;numpy.int32&lt;/code&gt;, &lt;code&gt;numpy.int8&lt;/code&gt;, &lt;code&gt;numpy.uint64&lt;/code&gt;, &lt;code&gt;numpy.uint32&lt;/code&gt;, &lt;code&gt;numpy.uint8&lt;/code&gt;, &lt;code&gt;numpy.uintp&lt;/code&gt;, or &lt;code&gt;numpy.intp&lt;/code&gt;, and &lt;code&gt;numpy.datetime64&lt;/code&gt; instances.&lt;/p&gt; &#xA;&lt;p&gt;orjson is faster than all compared libraries at serializing numpy instances. Serializing numpy data requires specifying &lt;code&gt;option=orjson.OPT_SERIALIZE_NUMPY&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import orjson, numpy&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(&#xA;        numpy.array([[1, 2, 3], [4, 5, 6]]),&#xA;        option=orjson.OPT_SERIALIZE_NUMPY,&#xA;)&#xA;b&#39;[[1,2,3],[4,5,6]]&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The array must be a contiguous C array (&lt;code&gt;C_CONTIGUOUS&lt;/code&gt;) and one of the supported datatypes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;numpy.datetime64&lt;/code&gt; instances are serialized as RFC 3339 strings and datetime options affect them.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import orjson, numpy&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(&#xA;        numpy.datetime64(&#34;2021-01-01T00:00:00.172&#34;),&#xA;        option=orjson.OPT_SERIALIZE_NUMPY,&#xA;)&#xA;b&#39;&#34;2021-01-01T00:00:00.172000&#34;&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(&#xA;        numpy.datetime64(&#34;2021-01-01T00:00:00.172&#34;),&#xA;        option=(&#xA;            orjson.OPT_SERIALIZE_NUMPY |&#xA;            orjson.OPT_NAIVE_UTC |&#xA;            orjson.OPT_OMIT_MICROSECONDS&#xA;        ),&#xA;)&#xA;b&#39;&#34;2021-01-01T00:00:00+00:00&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If an array is not a contiguous C array, contains an supported datatype, or contains a &lt;code&gt;numpy.datetime64&lt;/code&gt; using an unsupported representation (e.g., picoseconds), orjson falls through to &lt;code&gt;default&lt;/code&gt;. In &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;obj.tolist()&lt;/code&gt; can be specified. If an array is malformed, which is not expected, &lt;code&gt;orjson.JSONEncodeError&lt;/code&gt; is raised.&lt;/p&gt; &#xA;&lt;p&gt;This measures serializing 92MiB of JSON from an &lt;code&gt;numpy.ndarray&lt;/code&gt; with dimensions of &lt;code&gt;(50000, 100)&lt;/code&gt; and &lt;code&gt;numpy.float64&lt;/code&gt; values:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th&gt;Latency (ms)&lt;/th&gt; &#xA;   &lt;th&gt;RSS diff (MiB)&lt;/th&gt; &#xA;   &lt;th&gt;vs. orjson&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;orjson&lt;/td&gt; &#xA;   &lt;td&gt;194&lt;/td&gt; &#xA;   &lt;td&gt;99&lt;/td&gt; &#xA;   &lt;td&gt;1.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ujson&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rapidjson&lt;/td&gt; &#xA;   &lt;td&gt;3,048&lt;/td&gt; &#xA;   &lt;td&gt;309&lt;/td&gt; &#xA;   &lt;td&gt;15.7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;simplejson&lt;/td&gt; &#xA;   &lt;td&gt;3,023&lt;/td&gt; &#xA;   &lt;td&gt;297&lt;/td&gt; &#xA;   &lt;td&gt;15.6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;json&lt;/td&gt; &#xA;   &lt;td&gt;3,133&lt;/td&gt; &#xA;   &lt;td&gt;297&lt;/td&gt; &#xA;   &lt;td&gt;16.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;This measures serializing 100MiB of JSON from an &lt;code&gt;numpy.ndarray&lt;/code&gt; with dimensions of &lt;code&gt;(100000, 100)&lt;/code&gt; and &lt;code&gt;numpy.int32&lt;/code&gt; values:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th&gt;Latency (ms)&lt;/th&gt; &#xA;   &lt;th&gt;RSS diff (MiB)&lt;/th&gt; &#xA;   &lt;th&gt;vs. orjson&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;orjson&lt;/td&gt; &#xA;   &lt;td&gt;178&lt;/td&gt; &#xA;   &lt;td&gt;115&lt;/td&gt; &#xA;   &lt;td&gt;1.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ujson&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rapidjson&lt;/td&gt; &#xA;   &lt;td&gt;1,512&lt;/td&gt; &#xA;   &lt;td&gt;551&lt;/td&gt; &#xA;   &lt;td&gt;8.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;simplejson&lt;/td&gt; &#xA;   &lt;td&gt;1,606&lt;/td&gt; &#xA;   &lt;td&gt;504&lt;/td&gt; &#xA;   &lt;td&gt;9.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;json&lt;/td&gt; &#xA;   &lt;td&gt;1,506&lt;/td&gt; &#xA;   &lt;td&gt;503&lt;/td&gt; &#xA;   &lt;td&gt;8.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;This measures serializing 105MiB of JSON from an &lt;code&gt;numpy.ndarray&lt;/code&gt; with dimensions of &lt;code&gt;(100000, 200)&lt;/code&gt; and &lt;code&gt;numpy.bool&lt;/code&gt; values:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th&gt;Latency (ms)&lt;/th&gt; &#xA;   &lt;th&gt;RSS diff (MiB)&lt;/th&gt; &#xA;   &lt;th&gt;vs. orjson&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;orjson&lt;/td&gt; &#xA;   &lt;td&gt;157&lt;/td&gt; &#xA;   &lt;td&gt;120&lt;/td&gt; &#xA;   &lt;td&gt;1.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ujson&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rapidjson&lt;/td&gt; &#xA;   &lt;td&gt;710&lt;/td&gt; &#xA;   &lt;td&gt;327&lt;/td&gt; &#xA;   &lt;td&gt;4.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;simplejson&lt;/td&gt; &#xA;   &lt;td&gt;931&lt;/td&gt; &#xA;   &lt;td&gt;398&lt;/td&gt; &#xA;   &lt;td&gt;5.9&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;json&lt;/td&gt; &#xA;   &lt;td&gt;996&lt;/td&gt; &#xA;   &lt;td&gt;400&lt;/td&gt; &#xA;   &lt;td&gt;6.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;In these benchmarks, orjson serializes natively, ujson is blank because it does not support a &lt;code&gt;default&lt;/code&gt; parameter, and the other libraries serialize &lt;code&gt;ndarray.tolist()&lt;/code&gt; via &lt;code&gt;default&lt;/code&gt;. The RSS column measures peak memory usage during serialization. This can be reproduced using the &lt;code&gt;pynumpy&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;p&gt;orjson does not have an installation or compilation dependency on numpy. The implementation is independent, reading &lt;code&gt;numpy.ndarray&lt;/code&gt; using &lt;code&gt;PyArrayInterface&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;str&lt;/h3&gt; &#xA;&lt;p&gt;orjson is strict about UTF-8 conformance. This is stricter than the standard library&#39;s json module, which will serialize and deserialize UTF-16 surrogates, e.g., &#34;\ud800&#34;, that are invalid UTF-8.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;orjson.dumps()&lt;/code&gt; is given a &lt;code&gt;str&lt;/code&gt; that does not contain valid UTF-8, &lt;code&gt;orjson.JSONEncodeError&lt;/code&gt; is raised. If &lt;code&gt;loads()&lt;/code&gt; receives invalid UTF-8, &lt;code&gt;orjson.JSONDecodeError&lt;/code&gt; is raised.&lt;/p&gt; &#xA;&lt;p&gt;orjson and rapidjson are the only compared JSON libraries to consistently error on bad input.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import orjson, ujson, rapidjson, json&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(&#39;\ud800&#39;)&#xA;JSONEncodeError: str is not valid UTF-8: surrogates not allowed&#xA;&amp;gt;&amp;gt;&amp;gt; ujson.dumps(&#39;\ud800&#39;)&#xA;UnicodeEncodeError: &#39;utf-8&#39; codec ...&#xA;&amp;gt;&amp;gt;&amp;gt; rapidjson.dumps(&#39;\ud800&#39;)&#xA;UnicodeEncodeError: &#39;utf-8&#39; codec ...&#xA;&amp;gt;&amp;gt;&amp;gt; json.dumps(&#39;\ud800&#39;)&#xA;&#39;&#34;\\ud800&#34;&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.loads(&#39;&#34;\\ud800&#34;&#39;)&#xA;JSONDecodeError: unexpected end of hex escape at line 1 column 8: line 1 column 1 (char 0)&#xA;&amp;gt;&amp;gt;&amp;gt; ujson.loads(&#39;&#34;\\ud800&#34;&#39;)&#xA;&#39;&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; rapidjson.loads(&#39;&#34;\\ud800&#34;&#39;)&#xA;ValueError: Parse error at offset 1: The surrogate pair in string is invalid.&#xA;&amp;gt;&amp;gt;&amp;gt; json.loads(&#39;&#34;\\ud800&#34;&#39;)&#xA;&#39;\ud800&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To make a best effort at deserializing bad input, first decode &lt;code&gt;bytes&lt;/code&gt; using the &lt;code&gt;replace&lt;/code&gt; or &lt;code&gt;lossy&lt;/code&gt; argument for &lt;code&gt;errors&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import orjson&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.loads(b&#39;&#34;\xed\xa0\x80&#34;&#39;)&#xA;JSONDecodeError: str is not valid UTF-8: surrogates not allowed&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.loads(b&#39;&#34;\xed\xa0\x80&#34;&#39;.decode(&#34;utf-8&#34;, &#34;replace&#34;))&#xA;&#39;���&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;uuid&lt;/h3&gt; &#xA;&lt;p&gt;orjson serializes &lt;code&gt;uuid.UUID&lt;/code&gt; instances to &lt;a href=&#34;https://tools.ietf.org/html/rfc4122&#34;&gt;RFC 4122&lt;/a&gt; format, e.g., &#34;f81d4fae-7dec-11d0-a765-00a0c91e6bf6&#34;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import orjson, uuid&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(uuid.UUID(&#39;f81d4fae-7dec-11d0-a765-00a0c91e6bf6&#39;))&#xA;b&#39;&#34;f81d4fae-7dec-11d0-a765-00a0c91e6bf6&#34;&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; orjson.dumps(uuid.uuid5(uuid.NAMESPACE_DNS, &#34;python.org&#34;))&#xA;b&#39;&#34;886313e1-3b8a-5372-9b90-0c9aee199e5d&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;The library has comprehensive tests. There are tests against fixtures in the &lt;a href=&#34;https://github.com/nst/JSONTestSuite&#34;&gt;JSONTestSuite&lt;/a&gt; and &lt;a href=&#34;https://github.com/miloyip/nativejson-benchmark&#34;&gt;nativejson-benchmark&lt;/a&gt; repositories. It is tested to not crash against the &lt;a href=&#34;https://github.com/minimaxir/big-list-of-naughty-strings&#34;&gt;Big List of Naughty Strings&lt;/a&gt;. It is tested to not leak memory. It is tested to not crash against and not accept invalid UTF-8. There are integration tests exercising the library&#39;s use in web servers (gunicorn using multiprocess/forked workers) and when multithreaded. It also uses some tests from the ultrajson library.&lt;/p&gt; &#xA;&lt;p&gt;orjson is the most correct of the compared libraries. This graph shows how each library handles a combined 342 JSON fixtures from the &lt;a href=&#34;https://github.com/nst/JSONTestSuite&#34;&gt;JSONTestSuite&lt;/a&gt; and &lt;a href=&#34;https://github.com/miloyip/nativejson-benchmark&#34;&gt;nativejson-benchmark&lt;/a&gt; tests:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th&gt;Invalid JSON documents not rejected&lt;/th&gt; &#xA;   &lt;th&gt;Valid JSON documents not deserialized&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;orjson&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ujson&lt;/td&gt; &#xA;   &lt;td&gt;38&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rapidjson&lt;/td&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;simplejson&lt;/td&gt; &#xA;   &lt;td&gt;13&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;json&lt;/td&gt; &#xA;   &lt;td&gt;17&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;This shows that all libraries deserialize valid JSON but only orjson correctly rejects the given invalid JSON fixtures. Errors are largely due to accepting invalid strings and numbers.&lt;/p&gt; &#xA;&lt;p&gt;The graph above can be reproduced using the &lt;code&gt;pycorrectness&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;Serialization and deserialization performance of orjson is better than ultrajson, rapidjson, simplejson, or json. The benchmarks are done on fixtures of real data:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;twitter.json, 631.5KiB, results of a search on Twitter for &#34;一&#34;, containing CJK strings, dictionaries of strings and arrays of dictionaries, indented.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;github.json, 55.8KiB, a GitHub activity feed, containing dictionaries of strings and arrays of dictionaries, not indented.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;citm_catalog.json, 1.7MiB, concert data, containing nested dictionaries of strings and arrays of integers, indented.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;canada.json, 2.2MiB, coordinates of the Canadian border in GeoJSON format, containing floats and arrays, indented.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Latency&lt;/h3&gt; &#xA;&lt;h4&gt;twitter.json serialization&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th&gt;Median latency (milliseconds)&lt;/th&gt; &#xA;   &lt;th&gt;Operations per second&lt;/th&gt; &#xA;   &lt;th&gt;Relative (latency)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;orjson&lt;/td&gt; &#xA;   &lt;td&gt;0.41&lt;/td&gt; &#xA;   &lt;td&gt;2419.7&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ujson&lt;/td&gt; &#xA;   &lt;td&gt;1.8&lt;/td&gt; &#xA;   &lt;td&gt;555.2&lt;/td&gt; &#xA;   &lt;td&gt;4.36&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rapidjson&lt;/td&gt; &#xA;   &lt;td&gt;1.26&lt;/td&gt; &#xA;   &lt;td&gt;795&lt;/td&gt; &#xA;   &lt;td&gt;3.05&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;simplejson&lt;/td&gt; &#xA;   &lt;td&gt;2.27&lt;/td&gt; &#xA;   &lt;td&gt;440.6&lt;/td&gt; &#xA;   &lt;td&gt;5.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;json&lt;/td&gt; &#xA;   &lt;td&gt;1.83&lt;/td&gt; &#xA;   &lt;td&gt;548.2&lt;/td&gt; &#xA;   &lt;td&gt;4.42&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;twitter.json deserialization&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th&gt;Median latency (milliseconds)&lt;/th&gt; &#xA;   &lt;th&gt;Operations per second&lt;/th&gt; &#xA;   &lt;th&gt;Relative (latency)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;orjson&lt;/td&gt; &#xA;   &lt;td&gt;0.85&lt;/td&gt; &#xA;   &lt;td&gt;1173&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ujson&lt;/td&gt; &#xA;   &lt;td&gt;1.88&lt;/td&gt; &#xA;   &lt;td&gt;532.1&lt;/td&gt; &#xA;   &lt;td&gt;2.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rapidjson&lt;/td&gt; &#xA;   &lt;td&gt;2.7&lt;/td&gt; &#xA;   &lt;td&gt;371&lt;/td&gt; &#xA;   &lt;td&gt;3.16&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;simplejson&lt;/td&gt; &#xA;   &lt;td&gt;2.16&lt;/td&gt; &#xA;   &lt;td&gt;463.1&lt;/td&gt; &#xA;   &lt;td&gt;2.53&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;json&lt;/td&gt; &#xA;   &lt;td&gt;2.33&lt;/td&gt; &#xA;   &lt;td&gt;429.7&lt;/td&gt; &#xA;   &lt;td&gt;2.73&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;github.json serialization&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th&gt;Median latency (milliseconds)&lt;/th&gt; &#xA;   &lt;th&gt;Operations per second&lt;/th&gt; &#xA;   &lt;th&gt;Relative (latency)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;orjson&lt;/td&gt; &#xA;   &lt;td&gt;0.04&lt;/td&gt; &#xA;   &lt;td&gt;23751.2&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ujson&lt;/td&gt; &#xA;   &lt;td&gt;0.18&lt;/td&gt; &#xA;   &lt;td&gt;5498.1&lt;/td&gt; &#xA;   &lt;td&gt;4.31&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rapidjson&lt;/td&gt; &#xA;   &lt;td&gt;0.1&lt;/td&gt; &#xA;   &lt;td&gt;9557&lt;/td&gt; &#xA;   &lt;td&gt;2.48&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;simplejson&lt;/td&gt; &#xA;   &lt;td&gt;0.25&lt;/td&gt; &#xA;   &lt;td&gt;3989.7&lt;/td&gt; &#xA;   &lt;td&gt;5.94&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;json&lt;/td&gt; &#xA;   &lt;td&gt;0.18&lt;/td&gt; &#xA;   &lt;td&gt;5457.6&lt;/td&gt; &#xA;   &lt;td&gt;4.36&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;github.json deserialization&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th&gt;Median latency (milliseconds)&lt;/th&gt; &#xA;   &lt;th&gt;Operations per second&lt;/th&gt; &#xA;   &lt;th&gt;Relative (latency)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;orjson&lt;/td&gt; &#xA;   &lt;td&gt;0.07&lt;/td&gt; &#xA;   &lt;td&gt;14680.6&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ujson&lt;/td&gt; &#xA;   &lt;td&gt;0.19&lt;/td&gt; &#xA;   &lt;td&gt;5224.3&lt;/td&gt; &#xA;   &lt;td&gt;2.81&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rapidjson&lt;/td&gt; &#xA;   &lt;td&gt;0.17&lt;/td&gt; &#xA;   &lt;td&gt;5913.2&lt;/td&gt; &#xA;   &lt;td&gt;2.49&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;simplejson&lt;/td&gt; &#xA;   &lt;td&gt;0.15&lt;/td&gt; &#xA;   &lt;td&gt;6840.8&lt;/td&gt; &#xA;   &lt;td&gt;2.15&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;json&lt;/td&gt; &#xA;   &lt;td&gt;0.15&lt;/td&gt; &#xA;   &lt;td&gt;6480.2&lt;/td&gt; &#xA;   &lt;td&gt;2.27&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;citm_catalog.json serialization&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th&gt;Median latency (milliseconds)&lt;/th&gt; &#xA;   &lt;th&gt;Operations per second&lt;/th&gt; &#xA;   &lt;th&gt;Relative (latency)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;orjson&lt;/td&gt; &#xA;   &lt;td&gt;0.7&lt;/td&gt; &#xA;   &lt;td&gt;1420.8&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ujson&lt;/td&gt; &#xA;   &lt;td&gt;2.89&lt;/td&gt; &#xA;   &lt;td&gt;345.2&lt;/td&gt; &#xA;   &lt;td&gt;4.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rapidjson&lt;/td&gt; &#xA;   &lt;td&gt;1.84&lt;/td&gt; &#xA;   &lt;td&gt;543.3&lt;/td&gt; &#xA;   &lt;td&gt;2.61&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;simplejson&lt;/td&gt; &#xA;   &lt;td&gt;10.06&lt;/td&gt; &#xA;   &lt;td&gt;99.4&lt;/td&gt; &#xA;   &lt;td&gt;14.29&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;json&lt;/td&gt; &#xA;   &lt;td&gt;3.94&lt;/td&gt; &#xA;   &lt;td&gt;254&lt;/td&gt; &#xA;   &lt;td&gt;5.59&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;citm_catalog.json deserialization&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th&gt;Median latency (milliseconds)&lt;/th&gt; &#xA;   &lt;th&gt;Operations per second&lt;/th&gt; &#xA;   &lt;th&gt;Relative (latency)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;orjson&lt;/td&gt; &#xA;   &lt;td&gt;1.72&lt;/td&gt; &#xA;   &lt;td&gt;579.6&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ujson&lt;/td&gt; &#xA;   &lt;td&gt;3.68&lt;/td&gt; &#xA;   &lt;td&gt;272.1&lt;/td&gt; &#xA;   &lt;td&gt;2.13&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rapidjson&lt;/td&gt; &#xA;   &lt;td&gt;5.61&lt;/td&gt; &#xA;   &lt;td&gt;178.4&lt;/td&gt; &#xA;   &lt;td&gt;3.26&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;simplejson&lt;/td&gt; &#xA;   &lt;td&gt;5.06&lt;/td&gt; &#xA;   &lt;td&gt;198.2&lt;/td&gt; &#xA;   &lt;td&gt;2.94&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;json&lt;/td&gt; &#xA;   &lt;td&gt;5.09&lt;/td&gt; &#xA;   &lt;td&gt;196.9&lt;/td&gt; &#xA;   &lt;td&gt;2.95&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;canada.json serialization&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th&gt;Median latency (milliseconds)&lt;/th&gt; &#xA;   &lt;th&gt;Operations per second&lt;/th&gt; &#xA;   &lt;th&gt;Relative (latency)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;orjson&lt;/td&gt; &#xA;   &lt;td&gt;3.65&lt;/td&gt; &#xA;   &lt;td&gt;274.5&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ujson&lt;/td&gt; &#xA;   &lt;td&gt;12.59&lt;/td&gt; &#xA;   &lt;td&gt;79.3&lt;/td&gt; &#xA;   &lt;td&gt;3.45&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rapidjson&lt;/td&gt; &#xA;   &lt;td&gt;34.24&lt;/td&gt; &#xA;   &lt;td&gt;29.2&lt;/td&gt; &#xA;   &lt;td&gt;9.39&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;simplejson&lt;/td&gt; &#xA;   &lt;td&gt;57.43&lt;/td&gt; &#xA;   &lt;td&gt;17.4&lt;/td&gt; &#xA;   &lt;td&gt;15.75&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;json&lt;/td&gt; &#xA;   &lt;td&gt;36.03&lt;/td&gt; &#xA;   &lt;td&gt;27.6&lt;/td&gt; &#xA;   &lt;td&gt;9.88&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;canada.json deserialization&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th&gt;Median latency (milliseconds)&lt;/th&gt; &#xA;   &lt;th&gt;Operations per second&lt;/th&gt; &#xA;   &lt;th&gt;Relative (latency)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;orjson&lt;/td&gt; &#xA;   &lt;td&gt;4.18&lt;/td&gt; &#xA;   &lt;td&gt;240.2&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ujson&lt;/td&gt; &#xA;   &lt;td&gt;9.29&lt;/td&gt; &#xA;   &lt;td&gt;107.8&lt;/td&gt; &#xA;   &lt;td&gt;2.22&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rapidjson&lt;/td&gt; &#xA;   &lt;td&gt;23.56&lt;/td&gt; &#xA;   &lt;td&gt;42.4&lt;/td&gt; &#xA;   &lt;td&gt;5.64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;simplejson&lt;/td&gt; &#xA;   &lt;td&gt;21.93&lt;/td&gt; &#xA;   &lt;td&gt;45.5&lt;/td&gt; &#xA;   &lt;td&gt;5.25&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;json&lt;/td&gt; &#xA;   &lt;td&gt;21.34&lt;/td&gt; &#xA;   &lt;td&gt;46.9&lt;/td&gt; &#xA;   &lt;td&gt;5.11&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Memory&lt;/h3&gt; &#xA;&lt;p&gt;orjson as of 3.7.0 has higher baseline memory usage than other libraries due to a persistent buffer used for parsing. Incremental memory usage when deserializing is similar to the standard library and other third-party libraries.&lt;/p&gt; &#xA;&lt;p&gt;This measures, in the first column, RSS after importing a library and reading the fixture, and in the second column, increases in RSS after repeatedly calling &lt;code&gt;loads()&lt;/code&gt; on the fixture.&lt;/p&gt; &#xA;&lt;h4&gt;twitter.json&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th&gt;import, read() RSS (MiB)&lt;/th&gt; &#xA;   &lt;th&gt;loads() increase in RSS (MiB)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;orjson&lt;/td&gt; &#xA;   &lt;td&gt;21.8&lt;/td&gt; &#xA;   &lt;td&gt;2.8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ujson&lt;/td&gt; &#xA;   &lt;td&gt;14.3&lt;/td&gt; &#xA;   &lt;td&gt;4.8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rapidjson&lt;/td&gt; &#xA;   &lt;td&gt;14.9&lt;/td&gt; &#xA;   &lt;td&gt;4.6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;simplejson&lt;/td&gt; &#xA;   &lt;td&gt;13.4&lt;/td&gt; &#xA;   &lt;td&gt;2.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;json&lt;/td&gt; &#xA;   &lt;td&gt;13.1&lt;/td&gt; &#xA;   &lt;td&gt;2.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;github.json&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th&gt;import, read() RSS (MiB)&lt;/th&gt; &#xA;   &lt;th&gt;loads() increase in RSS (MiB)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;orjson&lt;/td&gt; &#xA;   &lt;td&gt;21.2&lt;/td&gt; &#xA;   &lt;td&gt;0.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ujson&lt;/td&gt; &#xA;   &lt;td&gt;13.6&lt;/td&gt; &#xA;   &lt;td&gt;0.6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rapidjson&lt;/td&gt; &#xA;   &lt;td&gt;14.1&lt;/td&gt; &#xA;   &lt;td&gt;0.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;simplejson&lt;/td&gt; &#xA;   &lt;td&gt;12.5&lt;/td&gt; &#xA;   &lt;td&gt;0.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;json&lt;/td&gt; &#xA;   &lt;td&gt;12.4&lt;/td&gt; &#xA;   &lt;td&gt;0.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;citm_catalog.json&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th&gt;import, read() RSS (MiB)&lt;/th&gt; &#xA;   &lt;th&gt;loads() increase in RSS (MiB)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;orjson&lt;/td&gt; &#xA;   &lt;td&gt;23&lt;/td&gt; &#xA;   &lt;td&gt;10.6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ujson&lt;/td&gt; &#xA;   &lt;td&gt;15.2&lt;/td&gt; &#xA;   &lt;td&gt;11.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rapidjson&lt;/td&gt; &#xA;   &lt;td&gt;15.8&lt;/td&gt; &#xA;   &lt;td&gt;29.7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;simplejson&lt;/td&gt; &#xA;   &lt;td&gt;14.4&lt;/td&gt; &#xA;   &lt;td&gt;24.7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;json&lt;/td&gt; &#xA;   &lt;td&gt;13.9&lt;/td&gt; &#xA;   &lt;td&gt;24.7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;canada.json&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th&gt;import, read() RSS (MiB)&lt;/th&gt; &#xA;   &lt;th&gt;loads() increase in RSS (MiB)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;orjson&lt;/td&gt; &#xA;   &lt;td&gt;23.2&lt;/td&gt; &#xA;   &lt;td&gt;21.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ujson&lt;/td&gt; &#xA;   &lt;td&gt;15.6&lt;/td&gt; &#xA;   &lt;td&gt;19.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rapidjson&lt;/td&gt; &#xA;   &lt;td&gt;16.3&lt;/td&gt; &#xA;   &lt;td&gt;23.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;simplejson&lt;/td&gt; &#xA;   &lt;td&gt;15&lt;/td&gt; &#xA;   &lt;td&gt;21.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;json&lt;/td&gt; &#xA;   &lt;td&gt;14.3&lt;/td&gt; &#xA;   &lt;td&gt;20.9&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Reproducing&lt;/h3&gt; &#xA;&lt;p&gt;The above was measured using Python 3.10.4 on Linux (amd64) with orjson 3.7.0, ujson 5.3.0, python-rapidson 1.6, and simplejson 3.17.6.&lt;/p&gt; &#xA;&lt;p&gt;The latency results can be reproduced using the &lt;code&gt;pybench&lt;/code&gt; and &lt;code&gt;graph&lt;/code&gt; scripts. The memory results can be reproduced using the &lt;code&gt;pymem&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;h2&gt;Questions&lt;/h2&gt; &#xA;&lt;h3&gt;Why can&#39;t I install it from PyPI?&lt;/h3&gt; &#xA;&lt;p&gt;Probably &lt;code&gt;pip&lt;/code&gt; needs to be upgraded to version 20.3 or later to support the latest manylinux_x_y or universal2 wheel formats.&lt;/p&gt; &#xA;&lt;h3&gt;Will it deserialize to dataclasses, UUIDs, decimals, etc or support object_hook?&lt;/h3&gt; &#xA;&lt;p&gt;No. This requires a schema specifying what types are expected and how to handle errors etc. This is addressed by data validation libraries a level above this.&lt;/p&gt; &#xA;&lt;h3&gt;Will it serialize to &lt;code&gt;str&lt;/code&gt;?&lt;/h3&gt; &#xA;&lt;p&gt;No. &lt;code&gt;bytes&lt;/code&gt; is the correct type for a serialized blob.&lt;/p&gt; &#xA;&lt;h3&gt;Will it support PyPy?&lt;/h3&gt; &#xA;&lt;p&gt;Probably not.&lt;/p&gt; &#xA;&lt;h2&gt;Packaging&lt;/h2&gt; &#xA;&lt;p&gt;To package orjson requires at least &lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt; 1.54 and the &lt;a href=&#34;https://github.com/PyO3/maturin&#34;&gt;maturin&lt;/a&gt; build tool. It benefits from also having &lt;code&gt;clang&lt;/code&gt;. The recommended build command is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;maturin build --no-sdist --release --strip --cargo-extra-args=&#34;--features=yyjson&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build without use of &lt;code&gt;clang&lt;/code&gt;, do not specify &lt;code&gt;--features=yyjson&lt;/code&gt;. Deserialization is much faster if built with this feature.&lt;/p&gt; &#xA;&lt;p&gt;There is a minor performance benefit on at least amd64 to building on &lt;code&gt;nightly&lt;/code&gt; with &lt;code&gt;--features=unstable-simd&lt;/code&gt;. It may be more significant on other architectures.&lt;/p&gt; &#xA;&lt;p&gt;The project&#39;s own CI tests against &lt;code&gt;nightly-2022-06-01&lt;/code&gt; and stable 1.54. It is prudent to pin the nightly version because that channel can introduce breaking changes.&lt;/p&gt; &#xA;&lt;p&gt;orjson is tested for amd64, aarch64, and arm7 on Linux. It is tested for amd64 on macOS and cross-compiles for aarch64. For Windows it is tested on amd64.&lt;/p&gt; &#xA;&lt;p&gt;There are no runtime dependencies other than libc.&lt;/p&gt; &#xA;&lt;p&gt;orjson&#39;s tests are included in the source distribution on PyPI. The requirements to run the tests are specified in &lt;code&gt;test/requirements.txt&lt;/code&gt;. The tests should be run as part of the build. It can be run with &lt;code&gt;pytest -q test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;orjson was written by ijl &amp;lt;&lt;a href=&#34;mailto:ijl@mailbox.org&#34;&gt;ijl@mailbox.org&lt;/a&gt;&amp;gt;, copyright 2018 - 2022, licensed under both the Apache 2 and MIT licenses.&lt;/p&gt;</summary>
  </entry>
</feed>