<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-01T02:20:15Z</updated>
  <subtitle>Monthly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Visualize-ML/Book4_Power-of-Matrix</title>
    <updated>2023-07-01T02:20:15Z</updated>
    <id>tag:github.com,2023-07-01:/Visualize-ML/Book4_Power-of-Matrix</id>
    <link href="https://github.com/Visualize-ML/Book4_Power-of-Matrix" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Book_4_《矩阵力量》 | 鸢尾花书：从加减乘除到机器学习；上架！&lt;/p&gt;&lt;hr&gt;&lt;p&gt;《数学要素》五折入口： &lt;a href=&#34;https://zhuanlan.zhihu.com/p/620243026&#34;&gt;https://zhuanlan.zhihu.com/p/620243026&lt;/a&gt; &lt;br&gt; 《矩阵力量》五折入口： &lt;a href=&#34;https://zhuanlan.zhihu.com/p/634253719&#34;&gt;https://zhuanlan.zhihu.com/p/634253719&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;看个人情况，开源资源，永久有效哈。&lt;/p&gt; &#xA;&lt;p&gt;纠错多的同学会得到赠书，以示感谢。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>PromtEngineer/localGPT</title>
    <updated>2023-07-01T02:20:15Z</updated>
    <id>tag:github.com,2023-07-01:/PromtEngineer/localGPT</id>
    <link href="https://github.com/PromtEngineer/localGPT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Chat with your documents on your local device using GPT models. No data leaves your device and 100% private.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;localGPT&lt;/h1&gt; &#xA;&lt;p&gt;This project was inspired by the original &lt;a href=&#34;https://github.com/imartinez/privateGPT&#34;&gt;privateGPT&lt;/a&gt;. Most of the description here is inspired by the original privateGPT.&lt;/p&gt; &#xA;&lt;p&gt;For detailed overview of the project, Watch this &lt;a href=&#34;https://youtu.be/MlyoObdIHyo&#34;&gt;Youtube Video&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In this model, I have replaced the GPT4ALL model with Vicuna-7B model and we are using the InstructorEmbeddings instead of LlamaEmbeddings as used in the original privateGPT. Both Embeddings as well as LLM will run on GPU instead of CPU. It also has CPU support if you do not have a GPU (see below for instruction).&lt;/p&gt; &#xA;&lt;p&gt;Ask questions to your documents without an internet connection, using the power of LLMs. 100% private, no data leaves your execution environment at any point. You can ingest documents and ask questions without an internet connection!&lt;/p&gt; &#xA;&lt;p&gt;Built with &lt;a href=&#34;https://github.com/hwchase17/langchain&#34;&gt;LangChain&lt;/a&gt; and &lt;a href=&#34;https://huggingface.co/TheBloke/vicuna-7B-1.1-HF&#34;&gt;Vicuna-7B&lt;/a&gt; and &lt;a href=&#34;https://instructor-embedding.github.io/&#34;&gt;InstructorEmbeddings&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Environment Setup&lt;/h1&gt; &#xA;&lt;p&gt;In order to set your environment up to run the code here, first install all requirements:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then install AutoGPTQ - if you want to run quantized models for GPU&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/PanQiWei/AutoGPTQ.git&#xA;cd AutoGPTQ&#xA;git checkout v0.2.2&#xA;pip install .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more support on [AutoGPTQ] (&lt;a href=&#34;https://github.com/PanQiWei/AutoGPTQ&#34;&gt;https://github.com/PanQiWei/AutoGPTQ&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Test dataset&lt;/h2&gt; &#xA;&lt;p&gt;This repo uses a &lt;a href=&#34;https://constitutioncenter.org/media/files/constitution.pdf&#34;&gt;Constitution of USA &lt;/a&gt; as an example.&lt;/p&gt; &#xA;&lt;h2&gt;Instructions for ingesting your own dataset&lt;/h2&gt; &#xA;&lt;p&gt;Put any and all of your .txt, .pdf, or .csv files into the SOURCE_DOCUMENTS directory in the load_documents() function, replace the docs_path with the absolute path of your source_documents directory.&lt;/p&gt; &#xA;&lt;p&gt;The current default file types are .txt, .pdf, .csv, and .xlsx, if you want to use any other file type, you will need to convert it to one of the default file types.&lt;/p&gt; &#xA;&lt;p&gt;Run the following command to ingest all the data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python ingest.py  # defaults to cuda&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the device type argument to specify a given device.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python ingest.py --device_type cpu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use help for a full list of supported devices.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python ingest.py --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will create an index containing the local vectorstore. Will take time, depending on the size of your documents. You can ingest as many documents as you want, and all will be accumulated in the local embeddings database. If you want to start from an empty database, delete the &lt;code&gt;index&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note: When you run this for the first time, it will download take time as it has to download the embedding model. In the subseqeunt runs, no data will leave your local enviroment and can be run without internet connection.&lt;/p&gt; &#xA;&lt;h2&gt;Ask questions to your documents, locally!&lt;/h2&gt; &#xA;&lt;p&gt;In order to ask a question, run a command like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python run_localGPT.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And wait for the script to require your input.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; Enter a query:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hit enter. Wait while the LLM model consumes the prompt and prepares the answer. Once done, it will print the answer and the 4 sources it used as context from your documents; you can then ask another question without re-running the script, just wait for the prompt again.&lt;/p&gt; &#xA;&lt;p&gt;Note: When you run this for the first time, it will need internet connection to download the vicuna-7B model. After that you can turn off your internet connection, and the script inference would still work. No data gets out of your local environment.&lt;/p&gt; &#xA;&lt;p&gt;Type &lt;code&gt;exit&lt;/code&gt; to finish the script.&lt;/p&gt; &#xA;&lt;h1&gt;Run it on CPU&lt;/h1&gt; &#xA;&lt;p&gt;By default, localGPT will use your GPU to run both the &lt;code&gt;ingest.py&lt;/code&gt; and &lt;code&gt;run_localGPT.py&lt;/code&gt; scripts. But if you do not have a GPU and want to run this on CPU, now you can do that (Warning: Its going to be slow!). You will need to use &lt;code&gt;--device_type cpu&lt;/code&gt;flag with both scripts.&lt;/p&gt; &#xA;&lt;p&gt;For Ingestion run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python ingest.py --device_type cpu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to ask a question, run a command like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python run_localGPT.py --device_type cpu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Run the UI&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Start by opening up &lt;code&gt;run_localGPT_API.py&lt;/code&gt; in a code editor of your choice. If you are using gpu skip to step 3.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are running on cpu change &lt;code&gt;DEVICE_TYPE = &#39;cuda&#39;&lt;/code&gt; to &lt;code&gt;DEVICE_TYPE = &#39;cpu&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Comment out the following:&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;model_id = &#34;TheBloke/WizardLM-7B-uncensored-GPTQ&#34;&#xA;model_basename = &#34;WizardLM-7B-uncensored-GPTQ-4bit-128g.compat.no-act-order.safetensors&#34;&#xA;LLM = load_model(device_type=DEVICE_TYPE, model_id=model_id, model_basename = model_basename)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Uncomment:&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;model_id = &#34;TheBloke/guanaco-7B-HF&#34; # or some other -HF or .bin model&#xA;LLM = load_model(device_type=DEVICE_TYPE, model_id=model_id)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you are running gpu there should be nothing to change. Save and close &lt;code&gt;run_localGPT_API.py&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open up a terminal and activate your python environment that contains the dependencies installed from requirements.txt.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to the &lt;code&gt;/LOCALGPT&lt;/code&gt; directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the following command &lt;code&gt;python run_localGPT_API.py&lt;/code&gt;. The API should being to run.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Wait until everything has loaded in. You should see something like &lt;code&gt;INFO:werkzeug:Press CTRL+C to quit&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open up a second terminal and activate the same python environment.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to the &lt;code&gt;/LOCALGPT/localGPTUI&lt;/code&gt; directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the command &lt;code&gt;python localGPTUI.py&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open up a web browser and go the address &lt;code&gt;http://localhost:5111/&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;How does it work?&lt;/h1&gt; &#xA;&lt;p&gt;Selecting the right local models and the power of &lt;code&gt;LangChain&lt;/code&gt; you can run the entire pipeline locally, without any data leaving your environment, and with reasonable performance.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ingest.py&lt;/code&gt; uses &lt;code&gt;LangChain&lt;/code&gt; tools to parse the document and create embeddings locally using &lt;code&gt;InstructorEmbeddings&lt;/code&gt;. It then stores the result in a local vector database using &lt;code&gt;Chroma&lt;/code&gt; vector store.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run_localGPT.py&lt;/code&gt; uses a local LLM (Vicuna-7B in this case) to understand questions and create answers. The context for the answers is extracted from the local vector store using a similarity search to locate the right piece of context from the docs.&lt;/li&gt; &#xA; &lt;li&gt;You can replace this local LLM with any other LLM from the HuggingFace. Make sure whatever LLM you select is in the HF format.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How to select different LLM models?&lt;/h1&gt; &#xA;&lt;p&gt;The following will provide instructions on how you can select a different LLM model to create your response:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Open up &lt;code&gt;run_localGPT.py&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go to &lt;code&gt;def main(device_type, show_sources)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go to the comment where it says &lt;code&gt;# load the LLM for generating Natural Language responses&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Below it, it details a bunch of examples on models from HuggingFace that have already been tested to be run with the original trained model (ending with HF or have a .bin in its &#34;Files and versions&#34;), and quantized models (ending with GPTQ or have a .no-act-order or .safetensors in its &#34;Files and versions&#34;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For models that end with HF or have a .bin inside its &#34;Files and versions&#34; on its HuggingFace page.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Make sure you have a model_id selected. For example -&amp;gt; &lt;code&gt;model_id = &#34;TheBloke/guanaco-7B-HF&#34;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;If you go to its HuggingFace [Site] (&lt;a href=&#34;https://huggingface.co/TheBloke/guanaco-7B-HF&#34;&gt;https://huggingface.co/TheBloke/guanaco-7B-HF&lt;/a&gt;) and go to &#34;Files and versions&#34; you will notice model files that end with a .bin extension.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Any model files that contain .bin extensions will be run with the following code where the &lt;code&gt;# load the LLM for generating Natural Language responses&lt;/code&gt; comment is found.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;model_id = &#34;TheBloke/guanaco-7B-HF&#34;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;llm = load_model(device_type, model_id=model_id)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For models that contain GPTQ in its name and or have a .no-act-order or .safetensors extension inside its &#34;Files and versions on its HuggingFace page.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Make sure you have a model_id selected. For example -&amp;gt; model_id = &lt;code&gt;&#34;TheBloke/wizardLM-7B-GPTQ&#34;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;You will also need its model basename file selected. For example -&amp;gt; &lt;code&gt;model_basename = &#34;wizardLM-7B-GPTQ-4bit.compat.no-act-order.safetensors&#34;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;If you go to its HuggingFace [Site] (&lt;a href=&#34;https://huggingface.co/TheBloke/wizardLM-7B-GPTQ&#34;&gt;https://huggingface.co/TheBloke/wizardLM-7B-GPTQ&lt;/a&gt;) and go to &#34;Files and versions&#34; you will notice a model file that ends with a .safetensors extension.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Any model files that contain no-act-order or .safetensors extensions will be run with the following code where the &lt;code&gt;# load the LLM for generating Natural Language responses&lt;/code&gt; comment is found.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;model_id = &#34;TheBloke/WizardLM-7B-uncensored-GPTQ&#34;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;model_basename = &#34;WizardLM-7B-uncensored-GPTQ-4bit-128g.compat.no-act-order.safetensors&#34;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;llm = load_model(device_type, model_id=model_id, model_basename = model_basename)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Comment out all other instances of &lt;code&gt;model_id=&#34;other model names&#34;&lt;/code&gt;, &lt;code&gt;model_basename=other base model names&lt;/code&gt;, and &lt;code&gt;llm = load_model(args*)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;System Requirements&lt;/h1&gt; &#xA;&lt;h2&gt;Python Version&lt;/h2&gt; &#xA;&lt;p&gt;To use this software, you must have Python 3.10 or later installed. Earlier versions of Python will not compile.&lt;/p&gt; &#xA;&lt;h2&gt;C++ Compiler&lt;/h2&gt; &#xA;&lt;p&gt;If you encounter an error while building a wheel during the &lt;code&gt;pip install&lt;/code&gt; process, you may need to install a C++ compiler on your computer.&lt;/p&gt; &#xA;&lt;h3&gt;For Windows 10/11&lt;/h3&gt; &#xA;&lt;p&gt;To install a C++ compiler on Windows 10/11, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Visual Studio 2022.&lt;/li&gt; &#xA; &lt;li&gt;Make sure the following components are selected: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Universal Windows Platform development&lt;/li&gt; &#xA;   &lt;li&gt;C++ CMake tools for Windows&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Download the MinGW installer from the &lt;a href=&#34;https://sourceforge.net/projects/mingw/&#34;&gt;MinGW website&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run the installer and select the &#34;gcc&#34; component.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;NVIDIA Driver&#39;s Issues:&lt;/h3&gt; &#xA;&lt;p&gt;Follow this &lt;a href=&#34;https://linuxconfig.org/how-to-install-the-nvidia-drivers-on-ubuntu-22-04&#34;&gt;page&lt;/a&gt; to install NVIDIA Drivers.&lt;/p&gt; &#xA;&lt;h3&gt;M1/M2 Macbook users:&lt;/h3&gt; &#xA;&lt;p&gt;1- Follow this &lt;a href=&#34;https://developer.apple.com/metal/pytorch/&#34;&gt;page&lt;/a&gt; to build up PyTorch with Metal Performance Shaders (MPS) support. PyTorch uses the new MPS backend for GPU training acceleration. It is good practice to verify mps support using a simple Python script as mentioned in the provided link.&lt;/p&gt; &#xA;&lt;p&gt;2- By following the page, here is an example of what you may initiate in your terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;xcode-select --install&#xA;conda install pytorch torchvision torchaudio -c pytorch-nightly&#xA;pip install chardet&#xA;pip install cchardet&#xA;pip uninstall charset_normalizer&#xA;pip install charset_normalizer&#xA;pip install pdfminer.six&#xA;pip install xformers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3- Please keep in mind that the quantized models are not yet supported by Apple Silicon (M1/M2) by auto-gptq library that is being used for loading quantized models, &lt;a href=&#34;https://github.com/PanQiWei/AutoGPTQ/issues/133#issuecomment-1575002893&#34;&gt;see here&lt;/a&gt;. Therefore, you will not be able to run quantized models on M1/M2.&lt;/p&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#PromtEngineer/localGPT&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=PromtEngineer/localGPT&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Disclaimer&lt;/h1&gt; &#xA;&lt;p&gt;This is a test project to validate the feasibility of a fully local solution for question answering using LLMs and Vector embeddings. It is not production ready, and it is not meant to be used in production. Vicuna-7B is based on the Llama model so that has the original Llama license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SevaSk/ecoute</title>
    <updated>2023-07-01T02:20:15Z</updated>
    <id>tag:github.com,2023-07-01:/SevaSk/ecoute</id>
    <link href="https://github.com/SevaSk/ecoute" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ecoute is a live transcription tool that provides real-time transcripts for both the user&#39;s microphone input (You) and the user&#39;s speakers output (Speaker) in a textbox. It also generates a suggested response using OpenAI&#39;s GPT-3.5 for the user to say based on the live transcription of the conversation.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🎧 Ecoute&lt;/h1&gt; &#xA;&lt;p&gt;Ecoute is a live transcription tool that provides real-time transcripts for both the user&#39;s microphone input (You) and the user&#39;s speakers output (Speaker) in a textbox. It also generates a suggested response using OpenAI&#39;s GPT-3.5 for the user to say based on the live transcription of the conversation.&lt;/p&gt; &#xA;&lt;h2&gt;📖 Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SevaSk/ecoute/assets/50382291/8ac48927-8a26-49fd-80e9-48f980986208&#34;&gt;https://github.com/SevaSk/ecoute/assets/50382291/8ac48927-8a26-49fd-80e9-48f980986208&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ecoute is designed to help users in their conversations by providing live transcriptions and generating contextually relevant responses. By leveraging the power of OpenAI&#39;s GPT-3.5, Ecoute aims to make communication more efficient and enjoyable.&lt;/p&gt; &#xA;&lt;h2&gt;🚀 Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Follow these steps to set up and run Ecoute on your local machine.&lt;/p&gt; &#xA;&lt;h3&gt;📋 Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python &amp;gt;=3.8.0&lt;/li&gt; &#xA; &lt;li&gt;An OpenAI API key that can access OpenAI API (set up a paid account OpenAI account)&lt;/li&gt; &#xA; &lt;li&gt;Windows OS (Not tested on others)&lt;/li&gt; &#xA; &lt;li&gt;FFmpeg&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If FFmpeg is not installed in your system, you can follow the steps below to install it.&lt;/p&gt; &#xA;&lt;p&gt;First, you need to install Chocolatey, a package manager for Windows. Open your PowerShell as Administrator and run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://community.chocolatey.org/install.ps1&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once Chocolatey is installed, you can install FFmpeg by running the following command in your PowerShell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;choco install ffmpeg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please ensure that you run these commands in a PowerShell window with administrator privileges. If you face any issues during the installation, you can visit the official Chocolatey and FFmpeg websites for troubleshooting.&lt;/p&gt; &#xA;&lt;h3&gt;🔧 Installation&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/SevaSk/ecoute&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to the &lt;code&gt;ecoute&lt;/code&gt; folder:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cd ecoute&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the required packages:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a &lt;code&gt;keys.py&lt;/code&gt; file in the ecoute directory and add your OpenAI API key:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Option 1: You can utilize a command on your command prompt. Run the following command, ensuring to replace &#34;API KEY&#34; with your actual OpenAI API key:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;python -c &#34;with open(&#39;keys.py&#39;, &#39;w&#39;, encoding=&#39;utf-8&#39;) as f: f.write(&#39;OPENAI_API_KEY=\&#34;API KEY\&#34;&#39;)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Option 2: You can create the keys.py file manually. Open up your text editor of choice and enter the following content:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;OPENAI_API_KEY=&#34;API KEY&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Replace &#34;API KEY&#34; with your actual OpenAI API key. Save this file as keys.py within the ecoute directory.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;🎬 Running Ecoute&lt;/h3&gt; &#xA;&lt;p&gt;Run the main script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python main.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a more better and faster version that also works with most languages, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python main.py --api&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Upon initiation, Ecoute will begin transcribing your microphone input and speaker output in real-time, generating a suggested response based on the conversation. Please note that it might take a few seconds for the system to warm up before the transcription becomes real-time.&lt;/p&gt; &#xA;&lt;p&gt;The --api flag will use the whisper api for transcriptions. This significantly enhances transcription speed and accuracy, and it works in most languages (rather than just English without the flag). It&#39;s expected to become the default option in future releases. However, keep in mind that using the Whisper API will consume more OpenAI credits than using the local model. This increased cost is attributed to the advanced features and capabilities that the Whisper API provides. Despite the additional expense, the substantial improvements in speed and transcription accuracy may make it a worthwhile investment for your use case.&lt;/p&gt; &#xA;&lt;h3&gt;⚠️ Limitations&lt;/h3&gt; &#xA;&lt;p&gt;While Ecoute provides real-time transcription and response suggestions, there are several known limitations to its functionality that you should be aware of:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default Mic and Speaker:&lt;/strong&gt; Ecoute is currently configured to listen only to the default microphone and speaker set in your system. It will not detect sound from other devices or systems. If you wish to use a different mic or speaker, you will need to set it as your default device in your system settings.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Whisper Model&lt;/strong&gt;: If the --api flag is not used, we utilize the &#39;tiny&#39; version of the Whisper ASR model, due to its low resource consumption and fast response times. However, this model may not be as accurate as the larger models in transcribing certain types of speech, including accents or uncommon words.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Language&lt;/strong&gt;: If you are not using the --api flag the Whisper model used in Ecoute is set to English. As a result, it may not accurately transcribe non-English languages or dialects. We are actively working to add multi-language support to future versions of the program.&lt;/p&gt; &#xA;&lt;h2&gt;📖 License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License - see the &lt;a href=&#34;https://raw.githubusercontent.com/SevaSk/ecoute/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; &#xA;&lt;h2&gt;🤝 Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! Feel free to open issues or submit pull requests to improve Ecoute.&lt;/p&gt;</summary>
  </entry>
</feed>