<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-01T02:16:15Z</updated>
  <subtitle>Monthly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>VikParuchuri/marker</title>
    <updated>2024-01-01T02:16:15Z</updated>
    <id>tag:github.com,2024-01-01:/VikParuchuri/marker</id>
    <link href="https://github.com/VikParuchuri/marker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Convert PDF to markdown quickly with high accuracy&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Marker&lt;/h1&gt; &#xA;&lt;p&gt;Marker converts PDF, EPUB, and MOBI to markdown. It&#39;s 10x faster than nougat, more accurate on most documents, and has low hallucination risk.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for a range of PDF documents (optimized for books and scientific papers)&lt;/li&gt; &#xA; &lt;li&gt;Removes headers/footers/other artifacts&lt;/li&gt; &#xA; &lt;li&gt;Converts most equations to latex&lt;/li&gt; &#xA; &lt;li&gt;Formats code blocks and tables&lt;/li&gt; &#xA; &lt;li&gt;Support for multiple languages (although most testing is done in English). See &lt;code&gt;settings.py&lt;/code&gt; for a language list.&lt;/li&gt; &#xA; &lt;li&gt;Works on GPU, CPU, or MPS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;Marker is a pipeline of deep learning models:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extract text, OCR if necessary (heuristics, tesseract)&lt;/li&gt; &#xA; &lt;li&gt;Detect page layout (&lt;a href=&#34;https://huggingface.co/vikp/layout_segmenter&#34;&gt;layout segmenter&lt;/a&gt;, &lt;a href=&#34;https://huggingface.co/vikp/column_detector&#34;&gt;column detector&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Clean and format each block (heuristics, &lt;a href=&#34;https://huggingface.co/facebook/nougat-base&#34;&gt;nougat&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Combine blocks and postprocess complete text (heuristics, &lt;a href=&#34;https://huggingface.co/vikp/pdf_postprocessor_t5&#34;&gt;pdf_postprocessor&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Relying on autoregressive forward passes to generate text is slow and prone to hallucination/repetition. From the nougat paper: &lt;code&gt;We observed [repetition] in 1.5% of pages in the test set, but the frequency increases for out-of-domain documents.&lt;/code&gt; In my anecdotal testing, repetitions happen on 5%+ of out-of-domain (non-arXiv) pages.&lt;/p&gt; &#xA;&lt;p&gt;Nougat is an amazing model, but I wanted a faster and more general purpose solution. Marker is 10x faster and has low hallucination risk because it only passes equation blocks through an LLM forward pass.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;PDF&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Marker&lt;/th&gt; &#xA;   &lt;th&gt;Nougat&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://greenteapress.com/thinkpython/thinkpython.pdf&#34;&gt;Think Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Textbook&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/VikParuchuri/marker/raw/master/data/examples/marker/thinkpython.md&#34;&gt;View&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/VikParuchuri/marker/raw/master/data/examples/nougat/thinkpython.md&#34;&gt;View&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://greenteapress.com/thinkos/thinkos.pdf&#34;&gt;Think OS&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Textbook&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/VikParuchuri/marker/raw/master/data/examples/marker/thinkos.md&#34;&gt;View&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/VikParuchuri/marker/raw/master/data/examples/nougat/thinkos.md&#34;&gt;View&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/pdf/2101.03961.pdf&#34;&gt;Switch Transformers&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;arXiv paper&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/VikParuchuri/marker/raw/master/data/examples/marker/switch_transformers.md&#34;&gt;View&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/VikParuchuri/marker/raw/master/data/examples/nougat/switch_transformers.md&#34;&gt;View&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/pdf/1804.07821.pdf&#34;&gt;Multi-column CNN&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;arXiv paper&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/VikParuchuri/marker/raw/master/data/examples/marker/multicolcnn.md&#34;&gt;View&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/VikParuchuri/marker/raw/master/data/examples/nougat/multicolcnn.md&#34;&gt;View&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VikParuchuri/marker/master/data/images/overall.png&#34; alt=&#34;Benchmark overall&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The above results are with marker and nougat setup so they each take ~3GB of VRAM on an A6000.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/marker/master/#benchmarks&#34;&gt;below&lt;/a&gt; for detailed speed and accuracy benchmarks, and instructions on how to run your own benchmarks.&lt;/p&gt; &#xA;&lt;h1&gt;Community&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg//KuZwXNGnfH&#34;&gt;Discord&lt;/a&gt; is where we discuss future development.&lt;/p&gt; &#xA;&lt;h1&gt;Limitations&lt;/h1&gt; &#xA;&lt;p&gt;PDF is a tricky format, so marker will not always work perfectly. Here are some known limitations that are on the roadmap to address:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Marker will convert fewer equations to latex than nougat. This is because it has to first detect equations, then convert them without hallucation.&lt;/li&gt; &#xA; &lt;li&gt;Whitespace and indentations are not always respected.&lt;/li&gt; &#xA; &lt;li&gt;Not all lines/spans will be joined properly.&lt;/li&gt; &#xA; &lt;li&gt;Languages similar to English (Spanish, French, German, Russian, etc) have the best support. There is provisional support for Chinese, Japanese, Korean, and Hindi, but it may not work as well.&lt;/li&gt; &#xA; &lt;li&gt;This works best on digital PDFs that won&#39;t require a lot of OCR. It&#39;s optimized for speed, and limited OCR is used to fix errors.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;This has been tested on Mac and Linux (Ubuntu and Debian). You&#39;ll need python 3.9+ and &lt;a href=&#34;https://python-poetry.org/docs/#installing-with-the-official-installer&#34;&gt;poetry&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;First, clone the repo:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone https://github.com/VikParuchuri/marker.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd marker&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Linux&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install system requirements &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Optional: Install tesseract 5 by following &lt;a href=&#34;https://notesalexp.org/tesseract-ocr/html/&#34;&gt;these instructions&lt;/a&gt; or running &lt;code&gt;scripts/install/tesseract_5_install.sh&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Install ghostscript &amp;gt; 9.55 by following &lt;a href=&#34;https://ghostscript.readthedocs.io/en/latest/Install.html&#34;&gt;these instructions&lt;/a&gt; or running &lt;code&gt;scripts/install/ghostscript_install.sh&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Install other requirements with &lt;code&gt;cat scripts/install/apt-requirements.txt | xargs sudo apt-get install -y&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Set the tesseract data folder path &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Find the tesseract data folder &lt;code&gt;tessdata&lt;/code&gt; with &lt;code&gt;find / -name tessdata&lt;/code&gt;. Make sure to use the one corresponding to the latest tesseract version if you have multiple.&lt;/li&gt; &#xA;   &lt;li&gt;Create a &lt;code&gt;local.env&lt;/code&gt; file in the root &lt;code&gt;marker&lt;/code&gt; folder with &lt;code&gt;TESSDATA_PREFIX=/path/to/tessdata&lt;/code&gt; inside it&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install python requirements &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;poetry install&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;poetry shell&lt;/code&gt; to activate your poetry venv&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Update pytorch since poetry doesn&#39;t play nicely with it &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;GPU only: run &lt;code&gt;pip install torch&lt;/code&gt; to install other torch dependencies.&lt;/li&gt; &#xA;   &lt;li&gt;CPU only: Uninstall torch with &lt;code&gt;poetry remove torch&lt;/code&gt;, then follow the &lt;a href=&#34;https://pytorch.org/get-started/locally/&#34;&gt;CPU install&lt;/a&gt; instructions.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Mac&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install system requirements from &lt;code&gt;scripts/install/brew-requirements.txt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set the tesseract data folder path &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Find the tesseract data folder &lt;code&gt;tessdata&lt;/code&gt; with &lt;code&gt;brew list tesseract&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Create a &lt;code&gt;local.env&lt;/code&gt; file in the root &lt;code&gt;marker&lt;/code&gt; folder with &lt;code&gt;TESSDATA_PREFIX=/path/to/tessdata&lt;/code&gt; inside it&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install python requirements &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;poetry install&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;poetry shell&lt;/code&gt; to activate your poetry venv&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;On ARM macs (M1+), make sure to set the &lt;code&gt;TORCH_DEVICE&lt;/code&gt; setting to &lt;code&gt;mps&lt;/code&gt; (more details below) for a speedup&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;First, some configuration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Set your torch device in the &lt;code&gt;local.env&lt;/code&gt; file. For example, &lt;code&gt;TORCH_DEVICE=cuda&lt;/code&gt; or &lt;code&gt;TORCH_DEVICE=mps&lt;/code&gt;. &lt;code&gt;cpu&lt;/code&gt; is the default. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If using GPU, set &lt;code&gt;INFERENCE_RAM&lt;/code&gt; to your GPU VRAM (per GPU). For example, if you have 16 GB of VRAM, set &lt;code&gt;INFERENCE_RAM=16&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Depending on your document types, marker&#39;s average memory usage per task can vary slightly. You can configure &lt;code&gt;VRAM_PER_TASK&lt;/code&gt; to adjust this if you notice tasks failing with GPU out of memory errors.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Inspect the other settings in &lt;code&gt;marker/settings.py&lt;/code&gt;. You can override any settings in the &lt;code&gt;local.env&lt;/code&gt; file, or by setting environment variables. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;By default, the final editor model is off. Turn it on with &lt;code&gt;ENABLE_EDITOR_MODEL&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;By default, marker will use ocrmypdf for OCR, which is slower than base tesseract, but higher quality. You can change this with the &lt;code&gt;OCR_ENGINE&lt;/code&gt; setting.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Convert a single file&lt;/h2&gt; &#xA;&lt;p&gt;Run &lt;code&gt;convert_single.py&lt;/code&gt;, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python convert_single.py /path/to/file.pdf /path/to/output.md --parallel_factor 2 --max_pages 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--parallel_factor&lt;/code&gt; is how much to increase batch size and parallel OCR workers by. Higher numbers will take more VRAM and CPU, but process faster. Set to 1 by default.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--max_pages&lt;/code&gt; is the maximum number of pages to process. Omit this to convert the entire document.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Make sure the &lt;code&gt;DEFAULT_LANG&lt;/code&gt; setting is set appropriately for your document.&lt;/p&gt; &#xA;&lt;h2&gt;Convert multiple files&lt;/h2&gt; &#xA;&lt;p&gt;Run &lt;code&gt;convert.py&lt;/code&gt;, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python convert.py /path/to/input/folder /path/to/output/folder --workers 10 --max 10 --metadata_file /path/to/metadata.json --min_length 10000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--workers&lt;/code&gt; is the number of pdfs to convert at once. This is set to 1 by default, but you can increase it to increase throughput, at the cost of more CPU/GPU usage. Parallelism will not increase beyond &lt;code&gt;INFERENCE_RAM / VRAM_PER_TASK&lt;/code&gt; if you&#39;re using GPU.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--max&lt;/code&gt; is the maximum number of pdfs to convert. Omit this to convert all pdfs in the folder.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--metadata_file&lt;/code&gt; is an optional path to a json file with metadata about the pdfs. If you provide it, it will be used to set the language for each pdf. If not, &lt;code&gt;DEFAULT_LANG&lt;/code&gt; will be used. The format is:&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--min_length&lt;/code&gt; is the minimum number of characters that need to be extracted from a pdf before it will be considered for processing. If you&#39;re processing a lot of pdfs, I recommend setting this to avoid OCRing pdfs that are mostly images. (slows everything down)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;pdf1.pdf&#34;: {&#34;language&#34;: &#34;English&#34;},&#xA;  &#34;pdf2.pdf&#34;: {&#34;language&#34;: &#34;Spanish&#34;},&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Convert multiple files on multiple GPUs&lt;/h2&gt; &#xA;&lt;p&gt;Run &lt;code&gt;chunk_convert.sh&lt;/code&gt;, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;MIN_LENGTH=10000 METADATA_FILE=../pdf_meta.json NUM_DEVICES=4 NUM_WORKERS=15 bash chunk_convert.sh ../pdf_in ../md_out&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;METADATA_FILE&lt;/code&gt; is an optional path to a json file with metadata about the pdfs. See above for the format.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NUM_DEVICES&lt;/code&gt; is the number of GPUs to use. Should be &lt;code&gt;2&lt;/code&gt; or greater.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NUM_WORKERS&lt;/code&gt; is the number of parallel processes to run on each GPU. Per-GPU parallelism will not increase beyond &lt;code&gt;INFERENCE_RAM / VRAM_PER_TASK&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MIN_LENGTH&lt;/code&gt; is the minimum number of characters that need to be extracted from a pdf before it will be considered for processing. If you&#39;re processing a lot of pdfs, I recommend setting this to avoid OCRing pdfs that are mostly images. (slows everything down)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Benchmarks&lt;/h1&gt; &#xA;&lt;p&gt;Benchmarking PDF extraction quality is hard. I&#39;ve created a test set by finding books and scientific papers that have a pdf version and a latex source. I convert the latex to text, and compare the reference to the output of text extraction methods.&lt;/p&gt; &#xA;&lt;p&gt;Benchmarks show that marker is 10x faster than nougat, and more accurate outside arXiv (nougat was trained on arXiv data). We show naive text extraction (pulling text out of the pdf with no processing) for comparison.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Speed&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Average Score&lt;/th&gt; &#xA;   &lt;th&gt;Time per page&lt;/th&gt; &#xA;   &lt;th&gt;Time per document&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;naive&lt;/td&gt; &#xA;   &lt;td&gt;0.350727&lt;/td&gt; &#xA;   &lt;td&gt;0.00152378&lt;/td&gt; &#xA;   &lt;td&gt;0.326524&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;marker&lt;/td&gt; &#xA;   &lt;td&gt;0.641062&lt;/td&gt; &#xA;   &lt;td&gt;0.360622&lt;/td&gt; &#xA;   &lt;td&gt;77.2762&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nougat&lt;/td&gt; &#xA;   &lt;td&gt;0.629211&lt;/td&gt; &#xA;   &lt;td&gt;3.77259&lt;/td&gt; &#xA;   &lt;td&gt;808.413&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Accuracy&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;First 3 are non-arXiv books, last 3 are arXiv papers.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;switch_trans.pdf&lt;/th&gt; &#xA;   &lt;th&gt;crowd.pdf&lt;/th&gt; &#xA;   &lt;th&gt;multicolcnn.pdf&lt;/th&gt; &#xA;   &lt;th&gt;thinkos.pdf&lt;/th&gt; &#xA;   &lt;th&gt;thinkdsp.pdf&lt;/th&gt; &#xA;   &lt;th&gt;thinkpython.pdf&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;naive&lt;/td&gt; &#xA;   &lt;td&gt;0.244114&lt;/td&gt; &#xA;   &lt;td&gt;0.140669&lt;/td&gt; &#xA;   &lt;td&gt;0.0868221&lt;/td&gt; &#xA;   &lt;td&gt;0.366856&lt;/td&gt; &#xA;   &lt;td&gt;0.412521&lt;/td&gt; &#xA;   &lt;td&gt;0.468281&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;marker&lt;/td&gt; &#xA;   &lt;td&gt;0.482091&lt;/td&gt; &#xA;   &lt;td&gt;0.466882&lt;/td&gt; &#xA;   &lt;td&gt;0.537062&lt;/td&gt; &#xA;   &lt;td&gt;0.754347&lt;/td&gt; &#xA;   &lt;td&gt;0.78825&lt;/td&gt; &#xA;   &lt;td&gt;0.779536&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nougat&lt;/td&gt; &#xA;   &lt;td&gt;0.696458&lt;/td&gt; &#xA;   &lt;td&gt;0.552337&lt;/td&gt; &#xA;   &lt;td&gt;0.735099&lt;/td&gt; &#xA;   &lt;td&gt;0.655002&lt;/td&gt; &#xA;   &lt;td&gt;0.645704&lt;/td&gt; &#xA;   &lt;td&gt;0.650282&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Peak GPU memory usage during the benchmark is &lt;code&gt;3.3GB&lt;/code&gt; for nougat, and &lt;code&gt;3.1GB&lt;/code&gt; for marker. Benchmarks were run on an A6000.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Throughput&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Marker takes about 2GB of VRAM on average per task, so you can convert 24 documents in parallel on an A6000.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VikParuchuri/marker/master/data/images/per_doc.png&#34; alt=&#34;Benchmark results&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Running your own benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;You can benchmark the performance of marker on your machine. First, download the benchmark data &lt;a href=&#34;https://drive.google.com/file/d/1WiN4K2-jQfwyQMe4wSSurbpz3hxo2fG9/view?usp=drive_link&#34;&gt;here&lt;/a&gt; and unzip.&lt;/p&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;benchmark.py&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python benchmark.py data/pdfs data/references report.json --nougat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will benchmark marker against other text extraction methods. It sets up batch sizes for nougat and marker to use a similar amount of GPU RAM for each.&lt;/p&gt; &#xA;&lt;p&gt;Omit &lt;code&gt;--nougat&lt;/code&gt; to exclude nougat from the benchmark. I don&#39;t recommend running nougat on CPU, since it is very slow.&lt;/p&gt; &#xA;&lt;h1&gt;Commercial usage&lt;/h1&gt; &#xA;&lt;p&gt;Due to the licensing of the underlying models like layoutlmv3 and nougat, this is only suitable for noncommercial usage.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m building a version that can be used commercially, by stripping out the dependencies below. If you would like to get early access, email me at &lt;a href=&#34;mailto:marker@vikas.sh&#34;&gt;marker@vikas.sh&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here are the non-commercial/restrictive dependencies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;LayoutLMv3: CC BY-NC-SA 4.0 . &lt;a href=&#34;https://huggingface.co/microsoft/layoutlmv3-base&#34;&gt;Source&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nougat: CC-BY-NC . &lt;a href=&#34;https://github.com/facebookresearch/nougat&#34;&gt;Source&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PyMuPDF - GPL . &lt;a href=&#34;https://pymupdf.readthedocs.io/en/latest/about.html#license-and-copyright&#34;&gt;Source&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Other dependencies/datasets are openly licensed (doclaynet, byt5), or used in a way that is compatible with commercial usage (ghostscript).&lt;/p&gt; &#xA;&lt;h1&gt;Thanks&lt;/h1&gt; &#xA;&lt;p&gt;This work would not have been possible without amazing open source models and datasets, including (but not limited to):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nougat from Meta&lt;/li&gt; &#xA; &lt;li&gt;Layoutlmv3 from Microsoft&lt;/li&gt; &#xA; &lt;li&gt;DocLayNet from IBM&lt;/li&gt; &#xA; &lt;li&gt;ByT5 from Google&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thank you to the authors of these models and datasets for making them available to the community!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>oobabooga/text-generation-webui</title>
    <updated>2024-01-01T02:16:15Z</updated>
    <id>tag:github.com,2024-01-01:/oobabooga/text-generation-webui</id>
    <link href="https://github.com/oobabooga/text-generation-webui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Gradio web UI for Large Language Models. Supports transformers, GPTQ, AWQ, EXL2, llama.cpp (GGUF), Llama models.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Text generation web UI&lt;/h1&gt; &#xA;&lt;p&gt;A Gradio web UI for Large Language Models.&lt;/p&gt; &#xA;&lt;p&gt;Its goal is to become the &lt;a href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui&#34;&gt;AUTOMATIC1111/stable-diffusion-webui&lt;/a&gt; of text generation.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/oobabooga/screenshots/raw/main/print_instruct.png&#34; alt=&#34;Image1&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/oobabooga/screenshots/raw/main/print_chat.png&#34; alt=&#34;Image2&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/oobabooga/screenshots/raw/main/print_default.png&#34; alt=&#34;Image1&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/oobabooga/screenshots/raw/main/print_parameters.png&#34; alt=&#34;Image2&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;3 interface modes: default (two columns), notebook, and chat.&lt;/li&gt; &#xA; &lt;li&gt;Multiple model backends: &lt;a href=&#34;https://github.com/huggingface/transformers&#34;&gt;Transformers&lt;/a&gt;, &lt;a href=&#34;https://github.com/ggerganov/llama.cpp&#34;&gt;llama.cpp&lt;/a&gt; (through &lt;a href=&#34;https://github.com/abetlen/llama-cpp-python&#34;&gt;llama-cpp-python&lt;/a&gt;), &lt;a href=&#34;https://github.com/turboderp/exllamav2&#34;&gt;ExLlamaV2&lt;/a&gt;, &lt;a href=&#34;https://github.com/PanQiWei/AutoGPTQ&#34;&gt;AutoGPTQ&lt;/a&gt;, &lt;a href=&#34;https://github.com/casper-hansen/AutoAWQ&#34;&gt;AutoAWQ&lt;/a&gt;, &lt;a href=&#34;https://github.com/qwopqwop200/GPTQ-for-LLaMa&#34;&gt;GPTQ-for-LLaMa&lt;/a&gt;, &lt;a href=&#34;https://github.com/marella/ctransformers&#34;&gt;CTransformers&lt;/a&gt;, &lt;a href=&#34;https://github.com/Cornell-RelaxML/quip-sharp&#34;&gt;QuIP#&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Dropdown menu for quickly switching between different models.&lt;/li&gt; &#xA; &lt;li&gt;Large number of extensions (built-in and user-contributed), including Coqui TTS for realistic voice outputs, Whisper STT for voice inputs, translation, &lt;a href=&#34;https://github.com/oobabooga/text-generation-webui/tree/main/extensions/multimodal&#34;&gt;multimodal pipelines&lt;/a&gt;, vector databases, Stable Diffusion integration, and a lot more. See &lt;a href=&#34;https://github.com/oobabooga/text-generation-webui/wiki/07-%E2%80%90-Extensions&#34;&gt;the wiki&lt;/a&gt; and &lt;a href=&#34;https://github.com/oobabooga/text-generation-webui-extensions&#34;&gt;the extensions directory&lt;/a&gt; for details.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oobabooga/text-generation-webui/wiki/03-%E2%80%90-Parameters-Tab#character&#34;&gt;Chat with custom characters&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Precise chat templates for instruction-following models, including Llama-2-chat, Alpaca, Vicuna, Mistral.&lt;/li&gt; &#xA; &lt;li&gt;LoRA: train new LoRAs with your own data, load/unload LoRAs on the fly for generation.&lt;/li&gt; &#xA; &lt;li&gt;Transformers library integration: load models in 4-bit or 8-bit precision through bitsandbytes, use llama.cpp with transformers samplers (&lt;code&gt;llamacpp_HF&lt;/code&gt; loader), CPU inference in 32-bit precision using PyTorch.&lt;/li&gt; &#xA; &lt;li&gt;OpenAI-compatible API server with Chat and Completions endpoints -- see the &lt;a href=&#34;https://github.com/oobabooga/text-generation-webui/wiki/12-%E2%80%90-OpenAI-API#examples&#34;&gt;examples&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to install&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone or &lt;a href=&#34;https://github.com/oobabooga/text-generation-webui/archive/refs/heads/main.zip&#34;&gt;download&lt;/a&gt; the repository.&lt;/li&gt; &#xA; &lt;li&gt;Run the &lt;code&gt;start_linux.sh&lt;/code&gt;, &lt;code&gt;start_windows.bat&lt;/code&gt;, &lt;code&gt;start_macos.sh&lt;/code&gt;, or &lt;code&gt;start_wsl.bat&lt;/code&gt; script depending on your OS.&lt;/li&gt; &#xA; &lt;li&gt;Select your GPU vendor when asked.&lt;/li&gt; &#xA; &lt;li&gt;Once the installation ends, browse to &lt;code&gt;http://localhost:7860/?__theme=dark&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Have fun!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To restart the web UI in the future, just run the &lt;code&gt;start_&lt;/code&gt; script again. This script creates an &lt;code&gt;installer_files&lt;/code&gt; folder where it sets up the project&#39;s requirements. In case you need to reinstall the requirements, you can simply delete that folder and start the web UI again.&lt;/p&gt; &#xA;&lt;p&gt;The script accepts command-line flags. Alternatively, you can edit the &lt;code&gt;CMD_FLAGS.txt&lt;/code&gt; file with a text editor and add your flags there.&lt;/p&gt; &#xA;&lt;p&gt;To get updates in the future, run &lt;code&gt;update_linux.sh&lt;/code&gt;, &lt;code&gt;update_windows.bat&lt;/code&gt;, &lt;code&gt;update_macos.sh&lt;/code&gt;, or &lt;code&gt;update_wsl.bat&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Setup details and information about installing manually &lt;/summary&gt; &#xA; &lt;h3&gt;One-click-installer&lt;/h3&gt; &#xA; &lt;p&gt;The script uses Miniconda to set up a Conda environment in the &lt;code&gt;installer_files&lt;/code&gt; folder.&lt;/p&gt; &#xA; &lt;p&gt;If you ever need to install something manually in the &lt;code&gt;installer_files&lt;/code&gt; environment, you can launch an interactive shell using the cmd script: &lt;code&gt;cmd_linux.sh&lt;/code&gt;, &lt;code&gt;cmd_windows.bat&lt;/code&gt;, &lt;code&gt;cmd_macos.sh&lt;/code&gt;, or &lt;code&gt;cmd_wsl.bat&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;There is no need to run any of those scripts (&lt;code&gt;start_&lt;/code&gt;, &lt;code&gt;update_&lt;/code&gt;, or &lt;code&gt;cmd_&lt;/code&gt;) as admin/root.&lt;/li&gt; &#xA;  &lt;li&gt;For additional instructions about AMD and WSL setup, consult &lt;a href=&#34;https://github.com/oobabooga/text-generation-webui/wiki&#34;&gt;the documentation&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;For automated installation, you can use the &lt;code&gt;GPU_CHOICE&lt;/code&gt;, &lt;code&gt;USE_CUDA118&lt;/code&gt;, &lt;code&gt;LAUNCH_AFTER_INSTALL&lt;/code&gt;, and &lt;code&gt;INSTALL_EXTENSIONS&lt;/code&gt; environment variables. For instance: &lt;code&gt;GPU_CHOICE=A USE_CUDA118=FALSE LAUNCH_AFTER_INSTALL=FALSE INSTALL_EXTENSIONS=FALSE ./start_linux.sh&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h3&gt;Manual installation using Conda&lt;/h3&gt; &#xA; &lt;p&gt;Recommended if you have some experience with the command-line.&lt;/p&gt; &#xA; &lt;h4&gt;0. Install Conda&lt;/h4&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://docs.conda.io/en/latest/miniconda.html&#34;&gt;https://docs.conda.io/en/latest/miniconda.html&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;On Linux or WSL, it can be automatically installed with these two commands (&lt;a href=&#34;https://educe-ubc.github.io/conda.html&#34;&gt;source&lt;/a&gt;):&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;curl -sL &#34;https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh&#34; &amp;gt; &#34;Miniconda3.sh&#34;&#xA;bash Miniconda3.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;1. Create a new conda environment&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code&gt;conda create -n textgen python=3.11&#xA;conda activate textgen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;2. Install Pytorch&lt;/h4&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;System&lt;/th&gt; &#xA;    &lt;th&gt;GPU&lt;/th&gt; &#xA;    &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Linux/WSL&lt;/td&gt; &#xA;    &lt;td&gt;NVIDIA&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Linux/WSL&lt;/td&gt; &#xA;    &lt;td&gt;CPU only&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Linux&lt;/td&gt; &#xA;    &lt;td&gt;AMD&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/rocm5.6&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;MacOS + MPS&lt;/td&gt; &#xA;    &lt;td&gt;Any&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;pip3 install torch torchvision torchaudio&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Windows&lt;/td&gt; &#xA;    &lt;td&gt;NVIDIA&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Windows&lt;/td&gt; &#xA;    &lt;td&gt;CPU only&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;pip3 install torch torchvision torchaudio&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;p&gt;The up-to-date commands can be found here: &lt;a href=&#34;https://pytorch.org/get-started/locally/&#34;&gt;https://pytorch.org/get-started/locally/&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;For NVIDIA, you also need to install the CUDA runtime libraries:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;conda install -y -c &#34;nvidia/label/cuda-12.1.1&#34; cuda-runtime&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you need &lt;code&gt;nvcc&lt;/code&gt; to compile some library manually, replace the command above with&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;conda install -y -c &#34;nvidia/label/cuda-12.1.1&#34; cuda&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;3. Install the web UI&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code&gt;git clone https://github.com/oobabooga/text-generation-webui&#xA;cd text-generation-webui&#xA;pip install -r &amp;lt;requirements file according to table below&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Requirements file to use:&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;GPU&lt;/th&gt; &#xA;    &lt;th&gt;CPU&lt;/th&gt; &#xA;    &lt;th&gt;requirements file to use&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;NVIDIA&lt;/td&gt; &#xA;    &lt;td&gt;has AVX2&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;requirements.txt&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;NVIDIA&lt;/td&gt; &#xA;    &lt;td&gt;no AVX2&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;requirements_noavx2.txt&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;AMD&lt;/td&gt; &#xA;    &lt;td&gt;has AVX2&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;requirements_amd.txt&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;AMD&lt;/td&gt; &#xA;    &lt;td&gt;no AVX2&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;requirements_amd_noavx2.txt&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;CPU only&lt;/td&gt; &#xA;    &lt;td&gt;has AVX2&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;requirements_cpu_only.txt&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;CPU only&lt;/td&gt; &#xA;    &lt;td&gt;no AVX2&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;requirements_cpu_only_noavx2.txt&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Apple&lt;/td&gt; &#xA;    &lt;td&gt;Intel&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;requirements_apple_intel.txt&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Apple&lt;/td&gt; &#xA;    &lt;td&gt;Apple Silicon&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;requirements_apple_silicon.txt&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h3&gt;Start the web UI&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code&gt;conda activate textgen&#xA;cd text-generation-webui&#xA;python server.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Then browse to&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;http://localhost:7860/?__theme=dark&lt;/code&gt;&lt;/p&gt; &#xA; &lt;h5&gt;AMD GPU on Windows&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;Use &lt;code&gt;requirements_cpu_only.txt&lt;/code&gt; or &lt;code&gt;requirements_cpu_only_noavx2.txt&lt;/code&gt; in the command above.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Manually install llama-cpp-python using the appropriate command for your hardware: &lt;a href=&#34;https://github.com/abetlen/llama-cpp-python#installation-with-hardware-acceleration&#34;&gt;Installation from PyPI&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Use the &lt;code&gt;LLAMA_HIPBLAS=on&lt;/code&gt; toggle.&lt;/li&gt; &#xA;    &lt;li&gt;Note the &lt;a href=&#34;https://github.com/abetlen/llama-cpp-python#windows-remarks&#34;&gt;Windows remarks&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Manually install AutoGPTQ: &lt;a href=&#34;https://github.com/PanQiWei/AutoGPTQ#install-from-source&#34;&gt;Installation&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Perform the from-source installation - there are no prebuilt ROCm packages for Windows.&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;h5&gt;Older NVIDIA GPUs&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;For Kepler GPUs and older, you will need to install CUDA 11.8 instead of 12:&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code&gt;pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118&#xA;conda install -y -c &#34;nvidia/label/cuda-11.8.0&#34; cuda-runtime&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;2&#34;&gt; &#xA;  &lt;li&gt;bitsandbytes &amp;gt;= 0.39 may not work. In that case, to use &lt;code&gt;--load-in-8bit&lt;/code&gt;, you may have to downgrade like this: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Linux: &lt;code&gt;pip install bitsandbytes==0.38.1&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;li&gt;Windows: &lt;code&gt;pip install https://github.com/jllllll/bitsandbytes-windows-webui/raw/main/bitsandbytes-0.38.1-py3-none-any.whl&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;h5&gt;Manual install&lt;/h5&gt; &#xA; &lt;p&gt;The &lt;code&gt;requirements*.txt&lt;/code&gt; above contain various wheels precompiled through GitHub Actions. If you wish to compile things manually, or if you need to because no suitable wheels are available for your hardware, you can use &lt;code&gt;requirements_nowheels.txt&lt;/code&gt; and then install your desired loaders manually.&lt;/p&gt; &#xA; &lt;h3&gt;Alternative: Docker&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code&gt;ln -s docker/{nvidia/Dockerfile,docker-compose.yml,.dockerignore} .&#xA;cp docker/.env.example .env&#xA;# Edit .env and set: &#xA;#   TORCH_CUDA_ARCH_LIST based on your GPU model&#xA;#   APP_RUNTIME_GID      your host user&#39;s group id (run `id -g` in a terminal)&#xA;#   BUILD_EXTENIONS      optionally add comma separated list of extensions to build&#xA;docker compose up --build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;You need to have Docker Compose v2.17 or higher installed. See &lt;a href=&#34;https://github.com/oobabooga/text-generation-webui/wiki/09-%E2%80%90-Docker&#34;&gt;this guide&lt;/a&gt; for instructions.&lt;/li&gt; &#xA;  &lt;li&gt;For additional docker files, check out &lt;a href=&#34;https://github.com/Atinoda/text-generation-webui-docker&#34;&gt;this repository&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h3&gt;Updating the requirements&lt;/h3&gt; &#xA; &lt;p&gt;From time to time, the &lt;code&gt;requirements*.txt&lt;/code&gt; change. To update, use these commands:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;conda activate textgen&#xA;cd text-generation-webui&#xA;pip install -r &amp;lt;requirements file that you have used&amp;gt; --upgrade&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; List of command-line flags &lt;/summary&gt; &#xA; &lt;h4&gt;Basic settings&lt;/h4&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Flag&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;-h&lt;/code&gt;, &lt;code&gt;--help&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;show this help message and exit&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--multi-user&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Multi-user mode. Chat histories are not saved or automatically loaded. WARNING: this is likely not safe for sharing publicly.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--character CHARACTER&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The name of the character to load in chat mode by default.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--model MODEL&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Name of the model to load by default.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--lora LORA [LORA ...]&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The list of LoRAs to load. If you want to load more than one LoRA, write the names separated by spaces.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--model-dir MODEL_DIR&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Path to directory with all the models.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--lora-dir LORA_DIR&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Path to directory with all the loras.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--model-menu&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Show a model menu in the terminal when the web UI is first launched.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--settings SETTINGS_FILE&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Load the default interface settings from this yaml file. See &lt;code&gt;settings-template.yaml&lt;/code&gt; for an example. If you create a file called &lt;code&gt;settings.yaml&lt;/code&gt;, this file will be loaded by default without the need to use the &lt;code&gt;--settings&lt;/code&gt; flag.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--extensions EXTENSIONS [EXTENSIONS ...]&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The list of extensions to load. If you want to load more than one extension, write the names separated by spaces.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Print the prompts to the terminal.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--chat-buttons&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Show buttons on the chat tab instead of a hover menu.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h4&gt;Model loader&lt;/h4&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Flag&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--loader LOADER&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Choose the model loader manually, otherwise, it will get autodetected. Valid options: Transformers, llama.cpp, llamacpp_HF, ExLlamav2_HF, ExLlamav2, AutoGPTQ, AutoAWQ, GPTQ-for-LLaMa, ctransformers, QuIP#.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h4&gt;Accelerate/transformers&lt;/h4&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Flag&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--cpu&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Use the CPU to generate text. Warning: Training on CPU is extremely slow.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--auto-devices&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Automatically split the model across the available GPU(s) and CPU.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--gpu-memory GPU_MEMORY [GPU_MEMORY ...]&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Maximum GPU memory in GiB to be allocated per GPU. Example: --gpu-memory 10 for a single GPU, --gpu-memory 10 5 for two GPUs. You can also set values in MiB like --gpu-memory 3500MiB.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--cpu-memory CPU_MEMORY&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Maximum CPU memory in GiB to allocate for offloaded weights. Same as above.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--disk&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;If the model is too large for your GPU(s) and CPU combined, send the remaining layers to the disk.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--disk-cache-dir DISK_CACHE_DIR&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Directory to save the disk cache to. Defaults to &#34;cache&#34;.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--load-in-8bit&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Load the model with 8-bit precision (using bitsandbytes).&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--bf16&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Load the model with bfloat16 precision. Requires NVIDIA Ampere GPU.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--no-cache&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Set &lt;code&gt;use_cache&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt; while generating text. This reduces VRAM usage slightly, but it comes at a performance cost.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--trust-remote-code&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Set &lt;code&gt;trust_remote_code=True&lt;/code&gt; while loading the model. Necessary for some models.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--no_use_fast&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Set use_fast=False while loading the tokenizer (it&#39;s True by default). Use this if you have any problems related to use_fast.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--use_flash_attention_2&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Set use_flash_attention_2=True while loading the model.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h4&gt;bitsandbytes 4-bit&lt;/h4&gt; &#xA; &lt;p&gt;⚠️ Requires minimum compute of 7.0 on Windows at the moment.&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Flag&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--load-in-4bit&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Load the model with 4-bit precision (using bitsandbytes).&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--use_double_quant&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;use_double_quant for 4-bit.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--compute_dtype COMPUTE_DTYPE&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;compute dtype for 4-bit. Valid options: bfloat16, float16, float32.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--quant_type QUANT_TYPE&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;quant_type for 4-bit. Valid options: nf4, fp4.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h4&gt;llama.cpp&lt;/h4&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Flag&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--tensorcores&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Use llama-cpp-python compiled with tensor cores support. This increases performance on RTX cards. NVIDIA only.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--n_ctx N_CTX&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Size of the prompt context.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--threads&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Number of threads to use.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--threads-batch THREADS_BATCH&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Number of threads to use for batches/prompt processing.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--no_mul_mat_q&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Disable the mulmat kernels.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--n_batch&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Maximum number of prompt tokens to batch together when calling llama_eval.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--no-mmap&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Prevent mmap from being used.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--mlock&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Force the system to keep the model in RAM.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--n-gpu-layers N_GPU_LAYERS&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Number of layers to offload to the GPU.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--tensor_split TENSOR_SPLIT&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Split the model across multiple GPUs. Comma-separated list of proportions. Example: 18,17.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--numa&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Activate NUMA task allocation for llama.cpp.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--logits_all&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Needs to be set for perplexity evaluation to work. Otherwise, ignore it, as it makes prompt processing slower.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--no_offload_kqv&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Do not offload the K, Q, V to the GPU. This saves VRAM but reduces the performance.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--cache-capacity CACHE_CAPACITY&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Maximum cache capacity (llama-cpp-python). Examples: 2000MiB, 2GiB. When provided without units, bytes will be assumed.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h4&gt;ExLlamav2&lt;/h4&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Flag&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--gpu-split&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Comma-separated list of VRAM (in GB) to use per GPU device for model layers. Example: 20,7,7.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--max_seq_len MAX_SEQ_LEN&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Maximum sequence length.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--cfg-cache&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;ExLlamav2_HF: Create an additional cache for CFG negative prompts. Necessary to use CFG with that loader.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--no_flash_attn&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Force flash-attention to not be used.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--cache_8bit&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Use 8-bit cache to save VRAM.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--num_experts_per_token NUM_EXPERTS_PER_TOKEN&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Number of experts to use for generation. Applies to MoE models like Mixtral.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h4&gt;AutoGPTQ&lt;/h4&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Flag&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--triton&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Use triton.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--no_inject_fused_attention&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Disable the use of fused attention, which will use less VRAM at the cost of slower inference.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--no_inject_fused_mlp&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Triton mode only: disable the use of fused MLP, which will use less VRAM at the cost of slower inference.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--no_use_cuda_fp16&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;This can make models faster on some systems.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--desc_act&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;For models that don&#39;t have a quantize_config.json, this parameter is used to define whether to set desc_act or not in BaseQuantizeConfig.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--disable_exllama&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Disable ExLlama kernel, which can improve inference speed on some systems.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--disable_exllamav2&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Disable ExLlamav2 kernel.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h4&gt;GPTQ-for-LLaMa&lt;/h4&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Flag&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--wbits WBITS&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Load a pre-quantized model with specified precision in bits. 2, 3, 4 and 8 are supported.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--model_type MODEL_TYPE&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Model type of pre-quantized model. Currently LLaMA, OPT, and GPT-J are supported.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--groupsize GROUPSIZE&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Group size.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--pre_layer PRE_LAYER [PRE_LAYER ...]&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The number of layers to allocate to the GPU. Setting this parameter enables CPU offloading for 4-bit models. For multi-gpu, write the numbers separated by spaces, eg &lt;code&gt;--pre_layer 30 60&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--checkpoint CHECKPOINT&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The path to the quantized checkpoint file. If not specified, it will be automatically detected.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--monkey-patch&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Apply the monkey patch for using LoRAs with quantized models.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h4&gt;ctransformers&lt;/h4&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Flag&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--model_type MODEL_TYPE&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Model type of pre-quantized model. Currently gpt2, gptj, gptneox, falcon, llama, mpt, starcoder (gptbigcode), dollyv2, and replit are supported.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h4&gt;HQQ&lt;/h4&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Flag&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--hqq-backend&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Backend for the HQQ loader. Valid options: PYTORCH, PYTORCH_COMPILE, ATEN.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h4&gt;DeepSpeed&lt;/h4&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Flag&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--deepspeed&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Enable the use of DeepSpeed ZeRO-3 for inference via the Transformers integration.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--nvme-offload-dir NVME_OFFLOAD_DIR&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;DeepSpeed: Directory to use for ZeRO-3 NVME offloading.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--local_rank LOCAL_RANK&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;DeepSpeed: Optional argument for distributed setups.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h4&gt;RoPE (for llama.cpp, ExLlamaV2, and transformers)&lt;/h4&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Flag&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--alpha_value ALPHA_VALUE&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Positional embeddings alpha factor for NTK RoPE scaling. Use either this or &lt;code&gt;compress_pos_emb&lt;/code&gt;, not both.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--rope_freq_base ROPE_FREQ_BASE&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;If greater than 0, will be used instead of alpha_value. Those two are related by &lt;code&gt;rope_freq_base = 10000 * alpha_value ^ (64 / 63)&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--compress_pos_emb COMPRESS_POS_EMB&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Positional embeddings compression factor. Should be set to &lt;code&gt;(context length) / (model&#39;s original context length)&lt;/code&gt;. Equal to &lt;code&gt;1/rope_freq_scale&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h4&gt;Gradio&lt;/h4&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Flag&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--listen&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Make the web UI reachable from your local network.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--listen-port LISTEN_PORT&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The listening port that the server will use.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--listen-host LISTEN_HOST&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The hostname that the server will use.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--share&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Create a public URL. This is useful for running the web UI on Google Colab or similar.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--auto-launch&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Open the web UI in the default browser upon launch.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--gradio-auth USER:PWD&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Set Gradio authentication password in the format &#34;username:password&#34;. Multiple credentials can also be supplied with &#34;u1:p1,u2:p2,u3:p3&#34;.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--gradio-auth-path GRADIO_AUTH_PATH&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Set the Gradio authentication file path. The file should contain one or more user:password pairs in the same format as above.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--ssl-keyfile SSL_KEYFILE&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The path to the SSL certificate key file.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--ssl-certfile SSL_CERTFILE&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The path to the SSL certificate cert file.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h4&gt;API&lt;/h4&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Flag&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--api&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Enable the API extension.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--public-api&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Create a public URL for the API using Cloudfare.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--public-api-id PUBLIC_API_ID&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Tunnel ID for named Cloudflare Tunnel. Use together with public-api option.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--api-port API_PORT&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The listening port for the API.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--api-key API_KEY&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;API authentication key.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--admin-key ADMIN_KEY&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;API authentication key for admin tasks like loading and unloading models. If not set, will be the same as --api-key.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--nowebui&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Do not launch the Gradio UI. Useful for launching the API in standalone mode.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h4&gt;Multimodal&lt;/h4&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Flag&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;--multimodal-pipeline PIPELINE&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The multimodal pipeline to use. Examples: &lt;code&gt;llava-7b&lt;/code&gt;, &lt;code&gt;llava-13b&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/oobabooga/text-generation-webui/wiki&#34;&gt;https://github.com/oobabooga/text-generation-webui/wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Downloading models&lt;/h2&gt; &#xA;&lt;p&gt;Models should be placed in the folder &lt;code&gt;text-generation-webui/models&lt;/code&gt;. They are usually downloaded from &lt;a href=&#34;https://huggingface.co/models?pipeline_tag=text-generation&amp;amp;sort=downloads&#34;&gt;Hugging Face&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GGUF models are a single file and should be placed directly into &lt;code&gt;models&lt;/code&gt;. Example:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;text-generation-webui&#xA;└── models&#xA;    └── llama-2-13b-chat.Q4_K_M.gguf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The remaining model types (like 16-bit transformers models and GPTQ models) are made of several files and must be placed in a subfolder. Example:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;text-generation-webui&#xA;├── models&#xA;│&amp;nbsp;&amp;nbsp; ├── lmsys_vicuna-33b-v1.3&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── config.json&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── generation_config.json&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── pytorch_model-00001-of-00007.bin&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── pytorch_model-00002-of-00007.bin&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── pytorch_model-00003-of-00007.bin&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── pytorch_model-00004-of-00007.bin&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── pytorch_model-00005-of-00007.bin&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── pytorch_model-00006-of-00007.bin&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── pytorch_model-00007-of-00007.bin&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── pytorch_model.bin.index.json&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── special_tokens_map.json&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── tokenizer_config.json&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── tokenizer.model&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In both cases, you can use the &#34;Model&#34; tab of the UI to download the model from Hugging Face automatically. It is also possible to download it via the command-line with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python download-model.py organization/model&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;python download-model.py --help&lt;/code&gt; to see all the options.&lt;/p&gt; &#xA;&lt;h2&gt;Google Colab notebook&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/oobabooga/text-generation-webui/blob/main/Colab-TextGen-GPU.ipynb&#34;&gt;https://colab.research.google.com/github/oobabooga/text-generation-webui/blob/main/Colab-TextGen-GPU.ipynb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to contribute to the project, check out the &lt;a href=&#34;https://github.com/oobabooga/text-generation-webui/wiki/Contributing-guidelines&#34;&gt;Contributing guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Subreddit: &lt;a href=&#34;https://www.reddit.com/r/oobabooga/&#34;&gt;https://www.reddit.com/r/oobabooga/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Discord: &lt;a href=&#34;https://discord.gg/jwZCF2dPQN&#34;&gt;https://discord.gg/jwZCF2dPQN&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgment &amp;amp; support&lt;/h2&gt; &#xA;&lt;p&gt;In August 2023, &lt;a href=&#34;https://a16z.com/&#34;&gt;Andreessen Horowitz&lt;/a&gt; (a16z) provided a generous grant to encourage and support my independent work on this project. I am &lt;strong&gt;extremely&lt;/strong&gt; grateful for their trust and recognition.&lt;/p&gt; &#xA;&lt;p&gt;If you find this project useful, I have a &lt;a href=&#34;https://ko-fi.com/oobabooga&#34;&gt;Ko-fi page&lt;/a&gt; where you can make a donation. Your support helps me continue maintaining and improving this project.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cubiq/ComfyUI_IPAdapter_plus</title>
    <updated>2024-01-01T02:16:15Z</updated>
    <id>tag:github.com,2024-01-01:/cubiq/ComfyUI_IPAdapter_plus</id>
    <link href="https://github.com/cubiq/ComfyUI_IPAdapter_plus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ComfyUI IPAdapter plus&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/comfyanonymous/ComfyUI&#34;&gt;ComfyUI&lt;/a&gt; reference implementation for &lt;a href=&#34;https://github.com/tencent-ailab/IP-Adapter/&#34;&gt;IPAdapter&lt;/a&gt; models.&lt;/p&gt; &#xA;&lt;p&gt;IPAdapter implementation that follows the ComfyUI way of doing things. The code is memory efficient, fast, and shouldn&#39;t break with Comfy updates.&lt;/p&gt; &#xA;&lt;h2&gt;Important updates&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;2023/12/30&lt;/strong&gt;: Added support for FaceID Plus v2 models. &lt;strong&gt;Important:&lt;/strong&gt; this update again breaks the previous implementation. This time I had to make a new node just for FaceID. The base &lt;code&gt;IPAdapter Apply&lt;/code&gt; node will work with all previous models; for all FaceID models you&#39;ll find an &lt;code&gt;IPAdapter Apply FaceID&lt;/code&gt; node. &lt;strong&gt;When using v2 remember to check the &lt;code&gt;v2&lt;/code&gt; options otherwise it won&#39;t work as expected!&lt;/strong&gt; As always the examples directory is full of workflows for you to play with.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2023/12/28&lt;/strong&gt;: Added support for FaceID Plus models. &lt;strong&gt;Important:&lt;/strong&gt; this update breaks the previous implementation of FaceID. Check the updated workflows in the example directory! Remember to refresh the browser ComfyUI page to clear up the local cache.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2023/12/22&lt;/strong&gt;: Added support for FaceID models. &lt;a href=&#34;https://raw.githubusercontent.com/cubiq/ComfyUI_IPAdapter_plus/main/#faceid&#34;&gt;Read the documentation&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2023/12/05&lt;/strong&gt;: Added &lt;code&gt;batch embeds&lt;/code&gt; node. This lets you encode images in batches and merge them together into an &lt;code&gt;IPAdapter Apply Encoded&lt;/code&gt; node. Useful mostly for animations because the clip vision encoder takes a lot of VRAM. My suggestion is to split the animation in batches of about 120 frames.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2023/11/29&lt;/strong&gt;: Added &lt;code&gt;unfold_batch&lt;/code&gt; option to send the reference images sequentially to a latent batch. Useful for animations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2023/11/26&lt;/strong&gt;: Added &lt;a href=&#34;https://raw.githubusercontent.com/cubiq/ComfyUI_IPAdapter_plus/main/#timestepping&#34;&gt;timestepping&lt;/a&gt;. You may need to delete the old nodes and recreate them. &lt;strong&gt;Important:&lt;/strong&gt; For this to work you need to update ComfyUI to the latest version.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2023/11/24&lt;/strong&gt;: Support for multiple attention masks.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2023/11/23&lt;/strong&gt;: Small but important update: the new default location for the IPAdapter models is &lt;code&gt;ComfyUI/models/ipadapter&lt;/code&gt;. &lt;strong&gt;No panic&lt;/strong&gt;: the legacy &lt;code&gt;ComfyUI/custom_nodes/ComfyUI_IPAdapter_plus/models&lt;/code&gt; location still works and nothing will break.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2023/11/08&lt;/strong&gt;: Added &lt;a href=&#34;https://raw.githubusercontent.com/cubiq/ComfyUI_IPAdapter_plus/main/#attention-masking&#34;&gt;attention masking&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;(previous updates removed for better readability)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is it?&lt;/h2&gt; &#xA;&lt;p&gt;The IPAdapter are very powerful models for image-to-image conditioning. Given a reference image you can do variations augmented by text prompt, controlnets and masks. Think of it as a 1-image lora.&lt;/p&gt; &#xA;&lt;h2&gt;Example workflow&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cubiq/ComfyUI_IPAdapter_plus/main/ipadapter_workflow.png&#34; alt=&#34;IPAdapter Example workflow&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/cubiq/ComfyUI_IPAdapter_plus/main/examples/&#34;&gt;example directory&lt;/a&gt; has many workflows that cover all IPAdapter functionalities.&lt;/p&gt; &#xA;&lt;h2&gt;Video Tutorials&lt;/h2&gt; &#xA;&lt;a href=&#34;https://youtu.be/7m9ZZFU3HWo&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.youtube.com/vi/7m9ZZFU3HWo/hqdefault.jpg&#34; alt=&#34;Watch the video&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;span&gt;🤓&lt;/span&gt; &lt;a href=&#34;https://youtu.be/7m9ZZFU3HWo&#34;&gt;Basic usage video&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;span&gt;🚀&lt;/span&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=mJQ62ly7jrg&#34;&gt;Advanced features video&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;span&gt;👺&lt;/span&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=vqG1VXKteQg&#34;&gt;Attention Masking video&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;span&gt;🎥&lt;/span&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=ddYbhv3WgWw&#34;&gt;Animation Features video&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Download or git clone this repository inside &lt;code&gt;ComfyUI/custom_nodes/&lt;/code&gt; directory or use the Manager. Beware that the automatic update of the manager sometimes doesn&#39;t work and you may need to upgrade manually.&lt;/p&gt; &#xA;&lt;p&gt;The pre-trained models are available on &lt;a href=&#34;https://huggingface.co/h94/IP-Adapter&#34;&gt;huggingface&lt;/a&gt;, download and place them in the &lt;code&gt;ComfyUI/models/ipadapter&lt;/code&gt; directory (create it if not present). You can also use any custom location setting an &lt;code&gt;ipadapter&lt;/code&gt; entry in the &lt;code&gt;extra_model_paths.yaml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;IPAdapter also needs the image encoders. You need the &lt;a href=&#34;https://huggingface.co/h94/IP-Adapter/resolve/main/models/image_encoder/model.safetensors&#34;&gt;CLIP-&lt;strong&gt;ViT-H&lt;/strong&gt;-14-laion2B-s32B-b79K&lt;/a&gt; and &lt;a href=&#34;https://huggingface.co/h94/IP-Adapter/resolve/main/sdxl_models/image_encoder/model.safetensors&#34;&gt;CLIP-&lt;strong&gt;ViT-bigG&lt;/strong&gt;-14-laion2B-39B-b160k&lt;/a&gt; image encoders, you may already have them. If you don&#39;t, download them but &lt;strong&gt;be careful because the file name is the same!&lt;/strong&gt; Rename them to something easy to remember and place them in the &lt;code&gt;ComfyUI/models/clip_vision/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;The following table shows the combination of Checkpoint and Image encoder to use for each IPAdapter Model. Any Tensor size mismatch you may get it is likely caused by a wrong combination.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;SD v.&lt;/th&gt; &#xA;   &lt;th&gt;IPadapter&lt;/th&gt; &#xA;   &lt;th&gt;Img encoder&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v1.5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/h94/IP-Adapter/resolve/main/models/ip-adapter_sd15.safetensors&#34;&gt;ip-adapter_sd15&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ViT-H&lt;/td&gt; &#xA;   &lt;td&gt;Basic model, average strength&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v1.5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/h94/IP-Adapter/resolve/main/models/ip-adapter_sd15_light.safetensors&#34;&gt;ip-adapter_sd15_light&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ViT-H&lt;/td&gt; &#xA;   &lt;td&gt;Light model, very light impact&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v1.5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/h94/IP-Adapter/resolve/main/models/ip-adapter-plus_sd15.safetensors&#34;&gt;ip-adapter-plus_sd15&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ViT-H&lt;/td&gt; &#xA;   &lt;td&gt;Plus model, very strong&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v1.5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/h94/IP-Adapter/resolve/main/models/ip-adapter-plus-face_sd15.safetensors&#34;&gt;ip-adapter-plus-face_sd15&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ViT-H&lt;/td&gt; &#xA;   &lt;td&gt;Face model, use only for faces&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v1.5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/h94/IP-Adapter/resolve/main/models/ip-adapter-full-face_sd15.safetensors&#34;&gt;ip-adapter-full-face_sd15&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ViT-H&lt;/td&gt; &#xA;   &lt;td&gt;Strongher face model, not necessarily better&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v1.5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/h94/IP-Adapter/resolve/main/models/ip-adapter_sd15_vit-G.safetensors&#34;&gt;ip-adapter_sd15_vit-G&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ViT-bigG&lt;/td&gt; &#xA;   &lt;td&gt;Base model trained with a bigG encoder&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SDXL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/h94/IP-Adapter/resolve/main/sdxl_models/ip-adapter_sdxl.safetensors&#34;&gt;ip-adapter_sdxl&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ViT-bigG&lt;/td&gt; &#xA;   &lt;td&gt;Base SDXL model, mostly deprecated&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SDXL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/h94/IP-Adapter/resolve/main/sdxl_models/ip-adapter_sdxl_vit-h.safetensors&#34;&gt;ip-adapter_sdxl_vit-h&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ViT-H&lt;/td&gt; &#xA;   &lt;td&gt;New base SDXL model&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SDXL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/h94/IP-Adapter/resolve/main/sdxl_models/ip-adapter-plus_sdxl_vit-h.safetensors&#34;&gt;ip-adapter-plus_sdxl_vit-h&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ViT-H&lt;/td&gt; &#xA;   &lt;td&gt;SDXL plus model, stronger&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SDXL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/h94/IP-Adapter/resolve/main/sdxl_models/ip-adapter-plus-face_sdxl_vit-h.safetensors&#34;&gt;ip-adapter-plus-face_sdxl_vit-h&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ViT-H&lt;/td&gt; &#xA;   &lt;td&gt;SDXL face model&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;FaceID&lt;/strong&gt; requires &lt;code&gt;insightface&lt;/code&gt;, you need to install them in your ComfyUI environment. Check &lt;a href=&#34;https://github.com/cubiq/ComfyUI_IPAdapter_plus/issues/162&#34;&gt;this issue&lt;/a&gt; for help.&lt;/p&gt; &#xA;&lt;p&gt;When the dependencies are satisfied you need:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;SD v.&lt;/th&gt; &#xA;   &lt;th&gt;IPadapter&lt;/th&gt; &#xA;   &lt;th&gt;Img encoder&lt;/th&gt; &#xA;   &lt;th&gt;Lora&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v1.5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/h94/IP-Adapter-FaceID/resolve/main/ip-adapter-faceid_sd15.bin&#34;&gt;FaceID&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;(not used¹)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/h94/IP-Adapter-FaceID/resolve/main/ip-adapter-faceid_sd15_lora.safetensors&#34;&gt;FaceID Lora&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v1.5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/h94/IP-Adapter-FaceID/resolve/main/ip-adapter-faceid-plus_sd15.bin&#34;&gt;FaceID Plus&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ViT-H&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/h94/IP-Adapter-FaceID/resolve/main/ip-adapter-faceid-plus_sd15_lora.safetensors&#34;&gt;FaceID Plus Lora&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v1.5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/h94/IP-Adapter-FaceID/resolve/main/ip-adapter-faceid-plusv2_sd15.bin&#34;&gt;FaceID Plus v2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ViT-H&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/h94/IP-Adapter-FaceID/resolve/main/ip-adapter-faceid-plusv2_sd15_lora.safetensors&#34;&gt;FaceID Plus v2 Lora&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;¹ The base FaceID model doesn&#39;t make use of a CLIP vision encoder.&lt;/p&gt; &#xA;&lt;p&gt;The loras need to be placed into &lt;code&gt;ComfyUI/models/loras/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;There is no SDXL model at the moment.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to&lt;/h2&gt; &#xA;&lt;p&gt;There&#39;s a basic workflow included in this repo and a few examples in the &lt;a href=&#34;https://raw.githubusercontent.com/cubiq/ComfyUI_IPAdapter_plus/main/examples/&#34;&gt;examples&lt;/a&gt; directory. Usually it&#39;s a good idea to lower the &lt;code&gt;weight&lt;/code&gt; to at least &lt;code&gt;0.8&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;noise&lt;/code&gt; parameter is an experimental exploitation of the IPAdapter models. You can set it as low as &lt;code&gt;0.01&lt;/code&gt; for an arguably better result.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;More info about the noise option&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/cubiq/ComfyUI_IPAdapter_plus/main/examples/noise_example.jpg&#34; width=&#34;100%&#34; alt=&#34;canny controlnet&#34;&gt; &#xA; &lt;p&gt;Basically the IPAdapter sends two pictures for the conditioning, one is the reference the other --that you don&#39;t see-- is an empty image that could be considered like a negative conditioning.&lt;/p&gt; &#xA; &lt;p&gt;What I&#39;m doing is to send a very noisy image instead of an empty one. The &lt;code&gt;noise&lt;/code&gt; parameter determines the amount of noise that is added. A value of &lt;code&gt;0.01&lt;/code&gt; adds a lot of noise (more noise == less impact becaue the model doesn&#39;t get it); a value of &lt;code&gt;1.0&lt;/code&gt; removes most of noise so the generated image gets conditioned more.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Preparing the reference image&lt;/h3&gt; &#xA;&lt;p&gt;The reference image needs to be encoded by the CLIP vision model. The encoder resizes the image to 224×224 &lt;strong&gt;and crops it to the center!&lt;/strong&gt;. It&#39;s not an IPAdapter thing, it&#39;s how the clip vision works. This means that if you use a portrait or landscape image and the main attention (eg: the face of a character) is not in the middle you&#39;ll likely get undesired results. Use square pictures as reference for more predictable results.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve added a &lt;code&gt;PrepImageForClipVision&lt;/code&gt; node that does all the required operations for you. You just have to select the crop position (top/left/center/etc...) and a sharpening amount if you want.&lt;/p&gt; &#xA;&lt;p&gt;In the image below you can see the difference between prepped and not prepped images.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cubiq/ComfyUI_IPAdapter_plus/main/examples/prep_images.jpg&#34; width=&#34;100%&#34; alt=&#34;prepped images&#34;&gt; &#xA;&lt;h3&gt;KSampler configuration suggestions&lt;/h3&gt; &#xA;&lt;p&gt;The IPAdapter generally requires a few more &lt;code&gt;steps&lt;/code&gt; than usual, if the result is underwhelming try to add 10+ steps. The model tends to burn the images a little. If needed lower the CFG scale.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;noise&lt;/code&gt; option generally grants better results, experiment with it.&lt;/p&gt; &#xA;&lt;h3&gt;IPAdapter + ControlNet&lt;/h3&gt; &#xA;&lt;p&gt;The model is very effective when paired with a ControlNet. In the example below I experimented with Canny. &lt;a href=&#34;https://raw.githubusercontent.com/cubiq/ComfyUI_IPAdapter_plus/main/examples/IPAdapter_Canny.json&#34;&gt;The workflow&lt;/a&gt; is in the examples directory.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cubiq/ComfyUI_IPAdapter_plus/main/examples/canny_controlnet.jpg&#34; width=&#34;100%&#34; alt=&#34;canny controlnet&#34;&gt; &#xA;&lt;h3&gt;IPAdapter Face&lt;/h3&gt; &#xA;&lt;p&gt;IPAdapter offers an interesting model for a kind of &#34;face swap&#34; effect. &lt;a href=&#34;https://raw.githubusercontent.com/cubiq/ComfyUI_IPAdapter_plus/main/examples/IPAdapter_face.json&#34;&gt;The workflow is provided&lt;/a&gt;. Set a close up face as reference image and then input your text prompt as always. The generated character should have the face of the reference. It also works with img2img given a high denoise.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cubiq/ComfyUI_IPAdapter_plus/main/examples/face_swap.jpg&#34; width=&#34;50%&#34; alt=&#34;face swap&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; there&#39;s a new &lt;code&gt;full-face&lt;/code&gt; model available that&#39;s arguably better.&lt;/p&gt; &#xA;&lt;h3&gt;Masking (Inpainting)&lt;/h3&gt; &#xA;&lt;p&gt;The most effective way to apply the IPAdapter to a region is by an &lt;a href=&#34;https://raw.githubusercontent.com/cubiq/ComfyUI_IPAdapter_plus/main/examples/IPAdapter_inpaint.json&#34;&gt;inpainting workflow&lt;/a&gt;. Remeber to use a specific checkpoint for inpainting otherwise it won&#39;t work. Even if you are inpainting a face I find that the &lt;em&gt;IPAdapter-Plus&lt;/em&gt; (not the &lt;em&gt;face&lt;/em&gt; one), works best.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cubiq/ComfyUI_IPAdapter_plus/main/examples/inpainting.jpg&#34; width=&#34;100%&#34; alt=&#34;inpainting&#34;&gt; &#xA;&lt;h3&gt;Image Batches&lt;/h3&gt; &#xA;&lt;p&gt;It is possible to pass multiple images for the conditioning with the &lt;code&gt;Batch Images&lt;/code&gt; node. An &lt;a href=&#34;https://raw.githubusercontent.com/cubiq/ComfyUI_IPAdapter_plus/main/examples/IPAdapter_batch_images.json&#34;&gt;example workflow&lt;/a&gt; is provided; in the picture below you can see the result of one and two images conditioning.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cubiq/ComfyUI_IPAdapter_plus/main/examples/batch_images.jpg&#34; width=&#34;100%&#34; alt=&#34;batcg images&#34;&gt; &#xA;&lt;p&gt;It seems to be effective with 2-3 images, beyond that it tends to &lt;em&gt;blur&lt;/em&gt; the information too much.&lt;/p&gt; &#xA;&lt;h3&gt;Image Weighting&lt;/h3&gt; &#xA;&lt;p&gt;When sending multiple images you can increase/decrease the weight of each image by using the &lt;code&gt;IPAdapterEncoder&lt;/code&gt; node. The workflow (&lt;a href=&#34;https://raw.githubusercontent.com/cubiq/ComfyUI_IPAdapter_plus/main/examples/IPAdapter_weighted.json&#34;&gt;included in the examples&lt;/a&gt;) looks like this:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cubiq/ComfyUI_IPAdapter_plus/main/examples/image_weighting.jpg&#34; width=&#34;100%&#34; alt=&#34;image weighting&#34;&gt; &#xA;&lt;p&gt;The node accepts 4 images, but remember that you can send batches of images to each slot.&lt;/p&gt; &#xA;&lt;h3&gt;Weight types&lt;/h3&gt; &#xA;&lt;p&gt;You can choose how the IPAdapter weight is applied to the image embeds. Options are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;original&lt;/strong&gt;: The weight is applied to the aggregated tensors. The weight works predictably for values greater and lower than 1.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;linear&lt;/strong&gt;: The weight is applied to the individual tensors before aggretating them. Compared to &lt;code&gt;original&lt;/code&gt; the influence is weaker when weight is &amp;lt;1 and stronger when &amp;gt;1. &lt;strong&gt;Note:&lt;/strong&gt; at weight &lt;code&gt;1&lt;/code&gt; the two methods are equivalent.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;channel penalty&lt;/strong&gt;: This method is a modified version of Lvmin Zhang&#39;s (Fooocus). Results are sometimes sharper. It works very well also when weight is &amp;gt;1. Still experimental, may change in the future.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The image below shows the difference (zoom in).&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cubiq/ComfyUI_IPAdapter_plus/main/examples/weight_types.jpg&#34; width=&#34;100%&#34; alt=&#34;weight types&#34;&gt; &#xA;&lt;p&gt;In the examples directory you can find &lt;a href=&#34;https://raw.githubusercontent.com/cubiq/ComfyUI_IPAdapter_plus/main/examples/IPAdapter_weight_types.json&#34;&gt;a workflow&lt;/a&gt; that lets you easily compare the three methods.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I&#39;m not still sure whether all methods will stay. &lt;code&gt;Linear&lt;/code&gt; seems the most sensible but I wanted to keep the &lt;code&gt;original&lt;/code&gt; for backward compatibility. &lt;code&gt;channel penalty&lt;/code&gt; has a weird non-commercial clause but it&#39;s still part of a GNU GPLv3 software (ie: there&#39;s a licensing clash) so I&#39;m trying to understand how to deal with that.&lt;/p&gt; &#xA;&lt;h3&gt;Attention masking&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s possible to add a mask to define the area where the IPAdapter will be applied to. Everything outside the mask will ignore the reference images and will only listen to the text prompt.&lt;/p&gt; &#xA;&lt;p&gt;It is suggested to use a mask of the same size of the final generated image.&lt;/p&gt; &#xA;&lt;p&gt;In the picture below I use two reference images masked one on the left and the other on the right. The image is generated only with IPAdapter and one ksampler (without in/outpainting or area conditioning).&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cubiq/ComfyUI_IPAdapter_plus/main/examples/masking.jpg&#34; width=&#34;512&#34; alt=&#34;masking&#34;&gt; &#xA;&lt;p&gt;It is also possible to send a batch of masks that will be applied to a batch of latents, one per frame. The size should be the same but if needed some normalization will be performed to avoid errors. This feature also supports (experimentally) AnimateDiff including context sliding.&lt;/p&gt; &#xA;&lt;p&gt;In the examples directory you&#39;ll find a couple of masking workflows: &lt;a href=&#34;https://raw.githubusercontent.com/cubiq/ComfyUI_IPAdapter_plus/main/examples/IPAdapter_mask.json&#34;&gt;simple&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/cubiq/ComfyUI_IPAdapter_plus/main/examples/IPAdapter_2_masks.json&#34;&gt;two masks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Timestepping&lt;/h3&gt; &#xA;&lt;p&gt;In the &lt;code&gt;Apply IPAdapter&lt;/code&gt; node you can set a start and an end point. The IPAdapter will be applied exclusively in that timeframe of the generation. This is a very powerful tool to modulate the intesity of IPAdapter models.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cubiq/ComfyUI_IPAdapter_plus/main/examples/timestepping.jpg&#34; width=&#34;100%&#34; alt=&#34;timestepping&#34;&gt; &#xA;&lt;h3&gt;FaceID&lt;/h3&gt; &#xA;&lt;p&gt;FaceID is a new IPAdapter model that takes the embeddings from &lt;a href=&#34;https://github.com/deepinsight/insightface&#34;&gt;InsightFace&lt;/a&gt;. As such you need to install &lt;code&gt;insightface&lt;/code&gt; in your ComfyUI python environment. You may also need &lt;code&gt;onnxruntime&lt;/code&gt; and &lt;code&gt;onnxruntime-gpu&lt;/code&gt;. Note that your CUDA version might not be compatible with onnxruntime, in that case you can select the &#34;CPU&#34; provider from the &lt;code&gt;Load InsightFace model&lt;/code&gt; node.&lt;/p&gt; &#xA;&lt;p&gt;The first time you use InsightFace the model will be downloaded automatically, check the console to see the progress. If you get an error you need to donwload the &lt;a href=&#34;https://github.com/deepinsight/insightface/releases&#34;&gt;buffalo_l&lt;/a&gt; model manually inside the &lt;code&gt;ComfyUI/models/insightface/models&lt;/code&gt; directory. Also every time you run the workflow for the first time InsightFace will take quite a few seconds to load.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The FaceID model is used in conjuction with its Lora!&lt;/strong&gt; Check the &lt;a href=&#34;https://raw.githubusercontent.com/cubiq/ComfyUI_IPAdapter_plus/main/#installation&#34;&gt;installation instructions&lt;/a&gt; for the links to all models.&lt;/p&gt; &#xA;&lt;p&gt;The reference image needs to be prepared differently compared to the other IPAdapter face models. While standard face models expect the face to take basically the whole frame, FaceID prefers the subject to be a little further away. Don&#39;t cut the face too close and leave hair, beard, ears, neck in the picture.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;InsightFace will often fail to detect the face&lt;/strong&gt; and it will throw an error. Try with a different picture possibly cut to half-bust. FaceID generally works with drawings/illustrations too and the result is often very nice.&lt;/p&gt; &#xA;&lt;p&gt;I just implemented the FaceID code so I don&#39;t have best practices yet and more testing is needed. It&#39;s important to understand that &lt;strong&gt;FaceID can (and should) be used as a first pass for an additional IPAdapter Face model&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In the &lt;a href=&#34;https://raw.githubusercontent.com/cubiq/ComfyUI_IPAdapter_plus/main/examples/&#34;&gt;examples directory&lt;/a&gt; you&#39;ll find a few workflows to get you started with FaceID.&lt;/p&gt; &#xA;&lt;p&gt;The following would be a basic workflow that includes FaceID enhanced by a Plus Face model.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cubiq/ComfyUI_IPAdapter_plus/main/examples/face_id_wf.jpg&#34; width=&#34;100%&#34; alt=&#34;timestepping&#34;&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;Please check the &lt;a href=&#34;https://github.com/cubiq/ComfyUI_IPAdapter_plus/issues/108&#34;&gt;troubleshooting&lt;/a&gt; before posting a new issue.&lt;/p&gt; &#xA;&lt;h2&gt;Diffusers version&lt;/h2&gt; &#xA;&lt;p&gt;If you are interested I&#39;ve also implemented the same features for &lt;a href=&#34;https://github.com/cubiq/Diffusers_IPAdapter&#34;&gt;Huggingface Diffusers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tencent-ailab/IP-Adapter/&#34;&gt;IPAdapter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/comfyanonymous/ComfyUI&#34;&gt;ComfyUI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/laksjdjf/IPAdapter-ComfyUI/&#34;&gt;laksjdjf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lllyasviel/Fooocus/raw/main/fooocus_extras/ip_adapter.py&#34;&gt;fooocus&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;IPAdapter in the wild&lt;/h2&gt; &#xA;&lt;p&gt;Let me know if you spot the IPAdapter in the wild or tag @latentvision in the video description!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For German speakers you can find interesting YouTube tutorials on &lt;a href=&#34;https://www.youtube.com/watch?v=rAWn_0YOBU0&#34;&gt;A Latent Place&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In Chinese &lt;a href=&#34;https://www.youtube.com/watch?v=xl8f3oxZgY8&#34;&gt;Introversify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=xzGdynQDzsM&#34;&gt;Scott Detweiler&lt;/a&gt; covered this extension.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>