<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-01T01:53:04Z</updated>
  <subtitle>Monthly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>phidatahq/phidata</title>
    <updated>2024-11-01T01:53:04Z</updated>
    <id>tag:github.com,2024-11-01:/phidatahq/phidata</id>
    <link href="https://github.com/phidatahq/phidata" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build AI Agents with memory, knowledge, tools and reasoning. Chat with them using a beautiful Agent UI.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34; id=&#34;top&#34;&gt; phidata &lt;/h1&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; Build Agents with memory, knowledge, tools and reasoning &lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/21a0b5af-b458-4632-b09d-3cf29566890c&#34; style=&#34;border-radius: 8px;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is phidata?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Phidata is a framework for building agentic systems&lt;/strong&gt;, use phidata to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Build Agents with memory, knowledge, tools and reasoning.&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/phidatahq/phidata/main/#web-search-agent&#34;&gt;examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Build teams of Agents that can work together.&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/phidatahq/phidata/main/#team-of-agents&#34;&gt;example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chat with your Agents using a beautiful Agent UI.&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/phidatahq/phidata/main/#agent-ui&#34;&gt;example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Monitor, evaluate and optimize your Agents.&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/phidatahq/phidata/main/#monitoring&#34;&gt;example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Build Agentic systems with an API, database and vectordb.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install -U phidata&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Agents&lt;/h2&gt; &#xA;&lt;h3&gt;Web Search Agent&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s start by building a simple agent that can search the web, create a file &lt;code&gt;web_search.py&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from phi.agent import Agent&#xA;from phi.model.openai import OpenAIChat&#xA;from phi.tools.duckduckgo import DuckDuckGo&#xA;&#xA;web_agent = Agent(&#xA;    name=&#34;Web Agent&#34;,&#xA;    model=OpenAIChat(id=&#34;gpt-4o&#34;),&#xA;    tools=[DuckDuckGo()],&#xA;    instructions=[&#34;Always include sources&#34;],&#xA;    show_tool_calls=True,&#xA;    markdown=True,&#xA;)&#xA;web_agent.print_response(&#34;Whats happening in France?&#34;, stream=True)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install libraries, export your &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; and run the Agent:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install phidata openai duckduckgo-search&#xA;&#xA;export OPENAI_API_KEY=sk-xxxx&#xA;&#xA;python web_search.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Finance Agent&lt;/h3&gt; &#xA;&lt;p&gt;Lets create another agent that can query financial data, create a file &lt;code&gt;finance_agent.py&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from phi.agent import Agent&#xA;from phi.model.openai import OpenAIChat&#xA;from phi.tools.yfinance import YFinanceTools&#xA;&#xA;finance_agent = Agent(&#xA;    name=&#34;Finance Agent&#34;,&#xA;    model=OpenAIChat(id=&#34;gpt-4o&#34;),&#xA;    tools=[YFinanceTools(stock_price=True, analyst_recommendations=True, company_info=True, company_news=True)],&#xA;    instructions=[&#34;Use tables to display data&#34;],&#xA;    show_tool_calls=True,&#xA;    markdown=True,&#xA;)&#xA;finance_agent.print_response(&#34;Summarize analyst recommendations for NVDA&#34;, stream=True)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install libraries and run the Agent:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install yfinance&#xA;&#xA;python finance_agent.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Team of Agents&lt;/h2&gt; &#xA;&lt;p&gt;Now lets create a team of agents using the agents above, create a file &lt;code&gt;agent_team.py&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from phi.agent import Agent&#xA;from phi.model.openai import OpenAIChat&#xA;from phi.tools.duckduckgo import DuckDuckGo&#xA;from phi.tools.yfinance import YFinanceTools&#xA;&#xA;web_agent = Agent(&#xA;    name=&#34;Web Agent&#34;,&#xA;    role=&#34;Search the web for information&#34;,&#xA;    model=OpenAIChat(id=&#34;gpt-4o&#34;),&#xA;    tools=[DuckDuckGo()],&#xA;    instructions=[&#34;Always include sources&#34;],&#xA;    show_tool_calls=True,&#xA;    markdown=True,&#xA;)&#xA;&#xA;finance_agent = Agent(&#xA;    name=&#34;Finance Agent&#34;,&#xA;    role=&#34;Get financial data&#34;,&#xA;    model=OpenAIChat(id=&#34;gpt-4o&#34;),&#xA;    tools=[YFinanceTools(stock_price=True, analyst_recommendations=True, company_info=True)],&#xA;    instructions=[&#34;Use tables to display data&#34;],&#xA;    show_tool_calls=True,&#xA;    markdown=True,&#xA;)&#xA;&#xA;agent_team = Agent(&#xA;    team=[web_agent, finance_agent],&#xA;    instructions=[&#34;Always include sources&#34;, &#34;Use tables to display data&#34;],&#xA;    show_tool_calls=True,&#xA;    markdown=True,&#xA;)&#xA;&#xA;agent_team.print_response(&#34;Summarize analyst recommendations and share the latest news for NVDA&#34;, stream=True)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the Agent team:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python agent_team.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reasoning Agents&lt;/h2&gt; &#xA;&lt;p&gt;Reasoning is an experimental feature that helps agents work through a problem step-by-step, backtracking and correcting as needed. Create a file &lt;code&gt;reasoning_agent.py&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from phi.agent import Agent&#xA;from phi.model.openai import OpenAIChat&#xA;&#xA;task = (&#xA;    &#34;Three missionaries and three cannibals need to cross a river. &#34;&#xA;    &#34;They have a boat that can carry up to two people at a time. &#34;&#xA;    &#34;If, at any time, the cannibals outnumber the missionaries on either side of the river, the cannibals will eat the missionaries. &#34;&#xA;    &#34;How can all six people get across the river safely? Provide a step-by-step solution and show the solutions as an ascii diagram&#34;&#xA;)&#xA;&#xA;reasoning_agent = Agent(model=OpenAIChat(id=&#34;gpt-4o&#34;), reasoning=True, markdown=True, structured_outputs=True)&#xA;reasoning_agent.print_response(task, stream=True, show_full_reasoning=True)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the Reasoning Agent:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python reasoning_agent.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] Reasoning is an experimental feature and will break ~20% of the time. &lt;strong&gt;It is not a replacement for o1.&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;It is an experiment fueled by curiosity, combining COT and tool use. Set your expectations very low for this initial release. For example: It will not be able to count ‘r’s in ‘strawberry’.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] If using tools with &lt;code&gt;reasoning=True&lt;/code&gt;, set &lt;code&gt;structured_outputs=False&lt;/code&gt; because gpt-4o doesnt support tools with structured outputs.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;RAG Agent&lt;/h2&gt; &#xA;&lt;p&gt;Instead of always inserting the &#34;context&#34; into the prompt, the RAG Agent can search its knowledge base (vector db) for the specific information it needs to achieve its task.&lt;/p&gt; &#xA;&lt;p&gt;This saves tokens and improves response quality. Create a file &lt;code&gt;rag_agent.py&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from phi.agent import Agent&#xA;from phi.model.openai import OpenAIChat&#xA;from phi.embedder.openai import OpenAIEmbedder&#xA;from phi.knowledge.pdf import PDFUrlKnowledgeBase&#xA;from phi.vectordb.lancedb import LanceDb, SearchType&#xA;&#xA;# Create a knowledge base from a PDF&#xA;knowledge_base = PDFUrlKnowledgeBase(&#xA;    urls=[&#34;https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf&#34;],&#xA;    # Use LanceDB as the vector database&#xA;    vector_db=LanceDb(&#xA;        table_name=&#34;recipes&#34;,&#xA;        uri=&#34;tmp/lancedb&#34;,&#xA;        search_type=SearchType.vector,&#xA;        embedder=OpenAIEmbedder(model=&#34;text-embedding-3-small&#34;),&#xA;    ),&#xA;)&#xA;# Comment out after first run as the knowledge base is loaded&#xA;knowledge_base.load()&#xA;&#xA;agent = Agent(&#xA;    model=OpenAIChat(id=&#34;gpt-4o&#34;),&#xA;    # Add the knowledge base to the agent&#xA;    knowledge=knowledge_base,&#xA;    show_tool_calls=True,&#xA;    markdown=True,&#xA;)&#xA;agent.print_response(&#34;How do I make chicken and galangal in coconut milk soup&#34;, stream=True)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install libraries and run the Agent:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install lancedb tantivy pypdf sqlalchemy&#xA;&#xA;python rag_agent.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Agent UI&lt;/h2&gt; &#xA;&lt;p&gt;Phidata provides a beautiful UI for interacting with your agents. Let&#39;s take it for a spin, create a file &lt;code&gt;playground.py&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/546ce6f5-47f0-4c0c-8f06-01d560befdbc&#34; alt=&#34;agent_playground&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Phidata does not store any data, all agent data is stored locally in a sqlite database.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from phi.agent import Agent&#xA;from phi.model.openai import OpenAIChat&#xA;from phi.storage.agent.sqlite import SqlAgentStorage&#xA;from phi.tools.duckduckgo import DuckDuckGo&#xA;from phi.tools.yfinance import YFinanceTools&#xA;from phi.playground import Playground, serve_playground_app&#xA;&#xA;web_agent = Agent(&#xA;    name=&#34;Web Agent&#34;,&#xA;    model=OpenAIChat(id=&#34;gpt-4o&#34;),&#xA;    tools=[DuckDuckGo()],&#xA;    instructions=[&#34;Always include sources&#34;],&#xA;    storage=SqlAgentStorage(table_name=&#34;web_agent&#34;, db_file=&#34;agents.db&#34;),&#xA;    add_history_to_messages=True,&#xA;    markdown=True,&#xA;)&#xA;&#xA;finance_agent = Agent(&#xA;    name=&#34;Finance Agent&#34;,&#xA;    model=OpenAIChat(id=&#34;gpt-4o&#34;),&#xA;    tools=[YFinanceTools(stock_price=True, analyst_recommendations=True, company_info=True, company_news=True)],&#xA;    instructions=[&#34;Use tables to display data&#34;],&#xA;    storage=SqlAgentStorage(table_name=&#34;finance_agent&#34;, db_file=&#34;agents.db&#34;),&#xA;    add_history_to_messages=True,&#xA;    markdown=True,&#xA;)&#xA;&#xA;app = Playground(agents=[finance_agent, web_agent]).get_app()&#xA;&#xA;if __name__ == &#34;__main__&#34;:&#xA;    serve_playground_app(&#34;playground:app&#34;, reload=True)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Authenticate with phidata:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;phi auth&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] If &lt;code&gt;phi auth&lt;/code&gt; fails, you can set the &lt;code&gt;PHI_API_KEY&lt;/code&gt; environment variable by copying it from &lt;a href=&#34;https://www.phidata.app&#34;&gt;phidata.app&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Install dependencies and run the Agent Playground:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install &#39;fastapi[standard]&#39; sqlalchemy&#xA;&#xA;python playground.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open the link provided or navigate to &lt;code&gt;http://phidata.app/playground&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select the &lt;code&gt;localhost:7777&lt;/code&gt; endpoint and start chatting with your agents!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&#xA; &lt;video src=&#34;https://github.com/user-attachments/assets/3a2ff93c-3d2d-4f1a-9573-eee25542e5c4&#34; style=&#34;border-radius: 8px;&#34;&gt;&lt;/video&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Demo Agents&lt;/h2&gt; &#xA;&lt;p&gt;The Agent Playground includes a few demo agents that you can test with. If you have recommendations for other demo agents, please let us know in our &lt;a href=&#34;https://community.phidata.com/&#34;&gt;community forum&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/329aa15d-83aa-4c6c-88f0-2b0eda257198&#34; alt=&#34;demo_agents&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Monitoring &amp;amp; Debugging&lt;/h2&gt; &#xA;&lt;h3&gt;Monitoring&lt;/h3&gt; &#xA;&lt;p&gt;Phidata comes with built-in monitoring. You can set &lt;code&gt;monitoring=True&lt;/code&gt; on any agent to track sessions or set &lt;code&gt;PHI_MONITORING=true&lt;/code&gt; in your environment.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Run &lt;code&gt;phi auth&lt;/code&gt; to authenticate your local account or export the &lt;code&gt;PHI_API_KEY&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from phi.agent import Agent&#xA;&#xA;agent = Agent(markdown=True, monitoring=True)&#xA;agent.print_response(&#34;Share a 2 sentence horror story&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the agent and monitor the results on &lt;a href=&#34;https://www.phidata.app/sessions&#34;&gt;phidata.app/sessions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# You can also set the environment variable&#xA;# export PHI_MONITORING=true&#xA;&#xA;python monitoring.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;View the agent session on &lt;a href=&#34;https://www.phidata.app/sessions&#34;&gt;phidata.app/sessions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/45f3e460-9538-4b1f-96ba-bd46af3c89a8&#34; alt=&#34;Agent Session&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Debugging&lt;/h3&gt; &#xA;&lt;p&gt;Phidata also includes a built-in debugger that will show debug logs in the terminal. You can set &lt;code&gt;debug_mode=True&lt;/code&gt; on any agent to track sessions or set &lt;code&gt;PHI_DEBUG=true&lt;/code&gt; in your environment.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from phi.agent import Agent&#xA;&#xA;agent = Agent(markdown=True, debug_mode=True)&#xA;agent.print_response(&#34;Share a 2 sentence horror story&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/c933c787-4a28-4bff-a664-93b29360d9ea&#34; alt=&#34;debugging&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting help&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Read the docs at &lt;a href=&#34;https://docs.phidata.com&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;docs.phidata.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Post your questions on the &lt;a href=&#34;https://community.phidata.com/&#34;&gt;community forum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chat with us on &lt;a href=&#34;https://discord.gg/4MtYHHrgA8&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;discord&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;More examples&lt;/h2&gt; &#xA;&lt;h3&gt;Agent that can write and run python code&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Show code&lt;/summary&gt; &#xA; &lt;p&gt;The &lt;code&gt;PythonAgent&lt;/code&gt; can achieve tasks by writing and running python code.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Create a file &lt;code&gt;python_agent.py&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from phi.agent.python import PythonAgent&#xA;from phi.model.openai import OpenAIChat&#xA;from phi.file.local.csv import CsvFile&#xA;&#xA;python_agent = PythonAgent(&#xA;    model=OpenAIChat(id=&#34;gpt-4o&#34;),&#xA;    files=[&#xA;        CsvFile(&#xA;            path=&#34;https://phidata-public.s3.amazonaws.com/demo_data/IMDB-Movie-Data.csv&#34;,&#xA;            description=&#34;Contains information about movies from IMDB.&#34;,&#xA;        )&#xA;    ],&#xA;    markdown=True,&#xA;    pip_install=True,&#xA;    show_tool_calls=True,&#xA;)&#xA;&#xA;python_agent.print_response(&#34;What is the average rating of movies?&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Run the &lt;code&gt;python_agent.py&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python python_agent.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Agent that can analyze data using SQL&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Show code&lt;/summary&gt; &#xA; &lt;p&gt;The &lt;code&gt;DuckDbAgent&lt;/code&gt; can perform data analysis using SQL.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Create a file &lt;code&gt;data_analyst.py&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import json&#xA;from phi.model.openai import OpenAIChat&#xA;from phi.agent.duckdb import DuckDbAgent&#xA;&#xA;data_analyst = DuckDbAgent(&#xA;    model=OpenAIChat(model=&#34;gpt-4o&#34;),&#xA;    markdown=True,&#xA;    semantic_model=json.dumps(&#xA;        {&#xA;            &#34;tables&#34;: [&#xA;                {&#xA;                    &#34;name&#34;: &#34;movies&#34;,&#xA;                    &#34;description&#34;: &#34;Contains information about movies from IMDB.&#34;,&#xA;                    &#34;path&#34;: &#34;https://phidata-public.s3.amazonaws.com/demo_data/IMDB-Movie-Data.csv&#34;,&#xA;                }&#xA;            ]&#xA;        },&#xA;        indent=2,&#xA;    ),&#xA;)&#xA;&#xA;data_analyst.print_response(&#xA;    &#34;Show me a histogram of ratings. &#34;&#xA;    &#34;Choose an appropriate bucket size but share how you chose it. &#34;&#xA;    &#34;Show me the result as a pretty ascii diagram&#34;,&#xA;    stream=True,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Install duckdb and run the &lt;code&gt;data_analyst.py&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install duckdb&#xA;&#xA;python data_analyst.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Agent that can generate structured outputs&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Show code&lt;/summary&gt; &#xA; &lt;p&gt;One of our favorite LLM features is generating structured data (i.e. a pydantic model) from text. Use this feature to extract features, generate data etc.&lt;/p&gt; &#xA; &lt;p&gt;Let&#39;s create a Movie Agent to write a &lt;code&gt;MovieScript&lt;/code&gt; for us, create a file &lt;code&gt;structured_output.py&lt;/code&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from typing import List&#xA;from pydantic import BaseModel, Field&#xA;from phi.agent import Agent&#xA;from phi.model.openai import OpenAIChat&#xA;&#xA;# Define a Pydantic model to enforce the structure of the output&#xA;class MovieScript(BaseModel):&#xA;    setting: str = Field(..., description=&#34;Provide a nice setting for a blockbuster movie.&#34;)&#xA;    ending: str = Field(..., description=&#34;Ending of the movie. If not available, provide a happy ending.&#34;)&#xA;    genre: str = Field(..., description=&#34;Genre of the movie. If not available, select action, thriller or romantic comedy.&#34;)&#xA;    name: str = Field(..., description=&#34;Give a name to this movie&#34;)&#xA;    characters: List[str] = Field(..., description=&#34;Name of characters for this movie.&#34;)&#xA;    storyline: str = Field(..., description=&#34;3 sentence storyline for the movie. Make it exciting!&#34;)&#xA;&#xA;# Agent that uses JSON mode&#xA;json_mode_agent = Agent(&#xA;    model=OpenAIChat(id=&#34;gpt-4o&#34;),&#xA;    description=&#34;You write movie scripts.&#34;,&#xA;    response_model=MovieScript,&#xA;)&#xA;# Agent that uses structured outputs&#xA;structured_output_agent = Agent(&#xA;    model=OpenAIChat(id=&#34;gpt-4o-2024-08-06&#34;),&#xA;    description=&#34;You write movie scripts.&#34;,&#xA;    response_model=MovieScript,&#xA;    structured_outputs=True,&#xA;)&#xA;&#xA;json_mode_agent.print_response(&#34;New York&#34;)&#xA;structured_output_agent.print_response(&#34;New York&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Run the &lt;code&gt;structured_output.py&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python structured_output.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;The output is an object of the &lt;code&gt;MovieScript&lt;/code&gt; class, here&#39;s how it looks:&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;MovieScript(&#xA;│   setting=&#39;A bustling and vibrant New York City&#39;,&#xA;│   ending=&#39;The protagonist saves the city and reconciles with their estranged family.&#39;,&#xA;│   genre=&#39;action&#39;,&#xA;│   name=&#39;City Pulse&#39;,&#xA;│   characters=[&#39;Alex Mercer&#39;, &#39;Nina Castillo&#39;, &#39;Detective Mike Johnson&#39;],&#xA;│   storyline=&#39;In the heart of New York City, a former cop turned vigilante, Alex Mercer, teams up with a street-smart activist, Nina Castillo, to take down a corrupt political figure who threatens to destroy the city. As they navigate through the intricate web of power and deception, they uncover shocking truths that push them to the brink of their abilities. With time running out, they must race against the clock to save New York and confront their own demons.&#39;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Checkout the &lt;a href=&#34;https://github.com/phidatahq/phidata/tree/main/cookbook&#34;&gt;cookbook&lt;/a&gt; for more examples.&lt;/h3&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re an open-source project and welcome contributions, please read the &lt;a href=&#34;https://github.com/phidatahq/phidata/raw/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Request a feature&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you have a feature request, please open an issue or make a pull request.&lt;/li&gt; &#xA; &lt;li&gt;If you have ideas on how we can improve, please create a discussion.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Telemetry&lt;/h2&gt; &#xA;&lt;p&gt;Phidata logs which model an agent used so we can prioritize features for the most popular models.&lt;/p&gt; &#xA;&lt;p&gt;You can disable this by setting &lt;code&gt;PHI_TELEMETRY=false&lt;/code&gt; in your environment.&lt;/p&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/phidatahq/phidata/main/#top&#34;&gt;⬆️ Back to Top&lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>3b1b/manim</title>
    <updated>2024-11-01T01:53:04Z</updated>
    <id>tag:github.com,2024-11-01:/3b1b/manim</id>
    <link href="https://github.com/3b1b/manim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Animation engine for explanatory math videos&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/3b1b/manim&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/3b1b/manim/master/logo/cropped.png&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pypi.org/project/manimgl/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/manimgl?logo=pypi&#34; alt=&#34;pypi version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://choosealicense.com/licenses/mit/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?style=flat&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.reddit.com/r/manim/&#34;&gt;&lt;img src=&#34;https://img.shields.io/reddit/subreddit-subscribers/manim.svg?color=ff4301&amp;amp;label=reddit&amp;amp;logo=reddit&#34; alt=&#34;Manim Subreddit&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.com/invite/bYCyhM9Kz2&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/581738731934056449.svg?label=discord&amp;amp;logo=discord&#34; alt=&#34;Manim Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://3b1b.github.io/manim/&#34;&gt;&lt;img src=&#34;https://github.com/3b1b/manim/workflows/docs/badge.svg?sanitize=true&#34; alt=&#34;docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Manim is an engine for precise programmatic animations, designed for creating explanatory math videos.&lt;/p&gt; &#xA;&lt;p&gt;Note, there are two versions of manim. This repository began as a personal project by the author of &lt;a href=&#34;https://www.3blue1brown.com/&#34;&gt;3Blue1Brown&lt;/a&gt; for the purpose of animating those videos, with video-specific code available &lt;a href=&#34;https://github.com/3b1b/videos&#34;&gt;here&lt;/a&gt;. In 2020 a group of developers forked it into what is now the &lt;a href=&#34;https://github.com/ManimCommunity/manim/&#34;&gt;community edition&lt;/a&gt;, with a goal of being more stable, better tested, quicker to respond to community contributions, and all around friendlier to get started with. See &lt;a href=&#34;https://docs.manim.community/en/stable/faq/installation.html#different-versions&#34;&gt;this page&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;WARNING:&lt;/strong&gt; These instructions are for ManimGL &lt;em&gt;only&lt;/em&gt;. Trying to use these instructions to install &lt;a href=&#34;https://github.com/ManimCommunity/manim&#34;&gt;ManimCommunity/manim&lt;/a&gt; or instructions there to install this version will cause problems. You should first decide which version you wish to install, then only follow the instructions for your desired version.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: To install manim directly through pip, please pay attention to the name of the installed package. This repository is ManimGL of 3b1b. The package name is &lt;code&gt;manimgl&lt;/code&gt; instead of &lt;code&gt;manim&lt;/code&gt; or &lt;code&gt;manimlib&lt;/code&gt;. Please use &lt;code&gt;pip install manimgl&lt;/code&gt; to install the version in this repository.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Manim runs on Python 3.7 or higher.&lt;/p&gt; &#xA;&lt;p&gt;System requirements are &lt;a href=&#34;https://ffmpeg.org/&#34;&gt;FFmpeg&lt;/a&gt;, &lt;a href=&#34;https://www.opengl.org/&#34;&gt;OpenGL&lt;/a&gt; and &lt;a href=&#34;https://www.latex-project.org&#34;&gt;LaTeX&lt;/a&gt; (optional, if you want to use LaTeX). For Linux, &lt;a href=&#34;https://pango.gnome.org&#34;&gt;Pango&lt;/a&gt; along with its development headers are required. See instruction &lt;a href=&#34;https://github.com/ManimCommunity/ManimPango#building&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Directly&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Install manimgl&#xA;pip install manimgl&#xA;&#xA;# Try it out&#xA;manimgl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more options, take a look at the &lt;a href=&#34;https://raw.githubusercontent.com/3b1b/manim/master/#using-manim&#34;&gt;Using manim&lt;/a&gt; sections further below.&lt;/p&gt; &#xA;&lt;p&gt;If you want to hack on manimlib itself, clone this repository and in that directory execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Install manimgl&#xA;pip install -e .&#xA;&#xA;# Try it out&#xA;manimgl example_scenes.py OpeningManimExample&#xA;# or&#xA;manim-render example_scenes.py OpeningManimExample&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Directly (Windows)&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.wikihow.com/Install-FFmpeg-on-Windows&#34;&gt;Install FFmpeg&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install a LaTeX distribution. &lt;a href=&#34;https://miktex.org/download&#34;&gt;MiKTeX&lt;/a&gt; is recommended.&lt;/li&gt; &#xA; &lt;li&gt;Install the remaining Python packages. &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/3b1b/manim.git&#xA;cd manim&#xA;pip install -e .&#xA;manimgl example_scenes.py OpeningManimExample&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Mac OSX&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install FFmpeg, LaTeX in terminal using homebrew.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install ffmpeg mactex&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install latest version of manim using these command.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/3b1b/manim.git&#xA;cd manim&#xA;pip install -e .&#xA;manimgl example_scenes.py OpeningManimExample&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Anaconda Install&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install LaTeX as above.&lt;/li&gt; &#xA; &lt;li&gt;Create a conda environment using &lt;code&gt;conda create -n manim python=3.8&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Activate the environment using &lt;code&gt;conda activate manim&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install manimgl using &lt;code&gt;pip install -e .&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Using manim&lt;/h2&gt; &#xA;&lt;p&gt;Try running the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;manimgl example_scenes.py OpeningManimExample&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should pop up a window playing a simple scene.&lt;/p&gt; &#xA;&lt;p&gt;Look through the &lt;a href=&#34;https://3b1b.github.io/manim/getting_started/example_scenes.html&#34;&gt;example scenes&lt;/a&gt; to see examples of the library&#39;s syntax, animation types and object types. In the &lt;a href=&#34;https://github.com/3b1b/videos&#34;&gt;3b1b/videos&lt;/a&gt; repo, you can see all the code for 3blue1brown videos, though code from older videos may not be compatible with the most recent version of manim. The readme of that repo also outlines some details for how to set up a more interactive workflow, as shown in &lt;a href=&#34;https://www.youtube.com/watch?v=rbu7Zu5X1zI&#34;&gt;this manim demo video&lt;/a&gt; for example.&lt;/p&gt; &#xA;&lt;p&gt;When running in the CLI, some useful flags include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-w&lt;/code&gt; to write the scene to a file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-o&lt;/code&gt; to write the scene to a file and open the result&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-s&lt;/code&gt; to skip to the end and just show the final frame. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;-so&lt;/code&gt; will save the final frame to an image and show it&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-n &amp;lt;number&amp;gt;&lt;/code&gt; to skip ahead to the &lt;code&gt;n&lt;/code&gt;&#39;th animation of a scene.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-f&lt;/code&gt; to make the playback window fullscreen&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Take a look at custom_config.yml for further configuration. To add your customization, you can either edit this file, or add another file by the same name &#34;custom_config.yml&#34; to whatever directory you are running manim from. For example &lt;a href=&#34;https://github.com/3b1b/videos/raw/master/custom_config.yml&#34;&gt;this is the one&lt;/a&gt; for 3blue1brown videos. There you can specify where videos should be output to, where manim should look for image files and sounds you want to read in, and other defaults regarding style and video quality.&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;Documentation is in progress at &lt;a href=&#34;https://3b1b.github.io/manim/&#34;&gt;3b1b.github.io/manim&lt;/a&gt;. And there is also a Chinese version maintained by &lt;a href=&#34;https://manim.org.cn&#34;&gt;&lt;strong&gt;@manim-kindergarten&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;https://docs.manim.org.cn/&#34;&gt;docs.manim.org.cn&lt;/a&gt; (in Chinese).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/manim-kindergarten/&#34;&gt;manim-kindergarten&lt;/a&gt; wrote and collected some useful extra classes and some codes of videos in &lt;a href=&#34;https://github.com/manim-kindergarten/manim_sandbox&#34;&gt;manim_sandbox repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Is always welcome. As mentioned above, the &lt;a href=&#34;https://github.com/ManimCommunity/manim&#34;&gt;community edition&lt;/a&gt; has the most active ecosystem for contributions, with testing and continuous integration, but pull requests are welcome here too. Please explain the motivation for a given change and examples of its effect.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project falls under the MIT license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Guovin/TV</title>
    <updated>2024-11-01T01:53:04Z</updated>
    <id>tag:github.com,2024-11-01:/Guovin/TV</id>
    <link href="https://github.com/Guovin/TV" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📺IPTV电视直播源更新工具🚀：包含💰央视(付费)、📡卫视、🏠广东、🌊港·澳·台、🎬电影、🎥咪咕、🏀体育、🪁动画、🎮游戏、🎵音乐、🏛经典剧场；支持自定义增加频道；支持组播源、酒店源、订阅源、关键字搜索；每天自动更新两次，结果可用于TVBox等播放软件；支持工作流、Docker(amd64/arm64)、命令行、GUI运行方式 | IPTV live TV source update tool&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Guovin/TV/master/static/images/logo.png&#34; alt=&#34;logo&#34;&gt; &#xA; &lt;h1 align=&#34;center&#34;&gt;IPTV电视直播源更新工具&lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; 自定义频道菜单，根据模板频道，自动获取并更新最新的直播源接口，测速校验后生成可用的接口文件&#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; 默认结果包含：📺央视频道、💰央视付费频道、📡卫视频道、🏠广东频道、🌊港·澳·台频道、🎬电影频道、🎥咪咕直播、🏀体育频道、🪁动画频道、🎮游戏频道、🎵音乐频道、🏛经典剧场&#xA;&lt;/div&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;具体频道&lt;/summary&gt; &#xA; &lt;div&gt;&#xA;   📺央视频道: CCTV-1, CCTV-2, CCTV-3, CCTV-4, CCTV-5, CCTV-5+, CCTV-6, CCTV-7, CCTV-8, CCTV-9, CCTV-10, CCTV-11, CCTV-12, CCTV-13, CCTV-14, CCTV-15, CCTV-16, CCTV-17, CETV1, CETV2, CETV4, CETV5 &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt;&#xA;   💰央视付费频道: 文化精品, 央视台球, 风云音乐, 第一剧场, 风云剧场, 怀旧剧场, 女性时尚, 高尔夫网球, 风云足球, 电视指南, 世界地理, 兵器科技 &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt;&#xA;   📡卫视频道: 广东卫视, 香港卫视, 浙江卫视, 湖南卫视, 北京卫视, 湖北卫视, 黑龙江卫视, 安徽卫视, 重庆卫视, 东方卫视, 东南卫视, 甘肃卫视, 广西卫视, 贵州卫视, 海南卫视, 河北卫视, 河南卫视, 吉林卫视, 江苏卫视, 江西卫视, 辽宁卫视, 内蒙古卫视, 宁夏卫视, 青海卫视, 山东卫视, 山西卫视, 陕西卫视, 四川卫视, 深圳卫视, 三沙卫视, 天津卫视, 西藏卫视, 新疆卫视, 云南卫视 &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt;&#xA;   🏠广东频道: 广东珠江, 广东体育, 广东新闻, 广东卫视, 大湾区卫视, 广州影视, 广州竞赛, 江门综合, 江门侨乡生活, 佛山综合, 深圳卫视, 汕头综合, 汕头经济, 汕头文旅, 茂名综合, 茂名公共 &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt;&#xA;   🌊港·澳·台: 翡翠台, 明珠台, 凤凰中文, 凤凰资讯, 凤凰香港, 凤凰卫视, TVBS亚洲, 香港卫视, 纬来体育, 纬来育乐, J2, Viutv, 三立台湾, 无线新闻, 三立新闻, 东森综合, 东森超视, 东森电影, Now剧集, Now华剧, 靖天资讯, 星卫娱乐, 卫视卡式 &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt;&#xA;   🎬电影频道: CHC家庭影院, CHC动作电影, CHC高清电影, 淘剧场, 淘娱乐, 淘电影, NewTV惊悚悬疑, NewTV动作电影, 黑莓电影, 纬来电影, 靖天映画, 靖天戏剧, 星卫娱乐, 艾尔达娱乐, 经典电影, IPTV经典电影, 天映经典, 无线星河, 星空卫视, 私人影院, 东森电影, 龙祥电影, 东森洋片, 东森超视 &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt;&#xA;   🎥咪咕直播: 咪咕直播1-45 &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt;&#xA;   🏀体育频道: CCTV-5, CCTV-5+, 广东体育, 纬来体育, 五星体育, 体育赛事, 劲爆体育, 爱体育, 超级体育, 精品体育, 广州竞赛, 深圳体育, 福建体育, 辽宁体育, 山东体育, 成都体育, 天津体育, 江苏体育, 安徽综艺体育, 吉林篮球, 睛彩篮球, 睛彩羽毛球, 睛彩广场舞, 风云足球, 足球频道, 魅力足球, 天元围棋, 快乐垂钓, JJ斗地主 &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt;&#xA;   🪁动画频道: 少儿动画, 卡酷动画, 动漫秀场, 新动漫, 青春动漫, 爱动漫, 中录动漫, 宝宝动画, CN卡通, 优漫卡通, 金鹰卡通, 睛彩少儿, 黑莓动画, 炫动卡通, 24H国漫热播, 浙江少儿, 河北少儿科教, 七龙珠, 火影忍者, 海绵宝宝, 中华小当家, 斗破苍穹玄幻剧, 猫和老鼠, 经典动漫, 蜡笔小新, 漫画解说 &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt;&#xA;   🎮游戏频道: 游戏风云, 游戏竞技, 电竞游戏, 海看电竞, 电竞天堂, 爱电竞 &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt;&#xA;   🎵音乐频道: CCTV-15, 风云音乐, 音乐现场, 音乐之声, 潮流音乐, 天津音乐, 音乐广播, 音乐调频广播 &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt;&#xA;   🏛经典剧场: 笑傲江湖, 天龙八部, 鹿鼎记, 仙剑奇侠传, 西游记, 三国演义, 水浒传, 新白娘子传奇, 天龙八部, 济公游记, 封神榜, 闯关东, 上海滩, 射雕英雄传 &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/Guovin/TV/releases/latest&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/guovin/tv&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.python.org/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/python-%20%3E%3D%203.8-47c219&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/Guovin/TV/releases/latest&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/guovin/tv/total&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/repository/docker/guovern/tv-requests&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/pulls/guovern/tv-requests?label=docker:requests&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/repository/docker/guovern/tv-driver&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/pulls/guovern/tv-driver?label=docker:driver&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Guovin/TV/master/README_en.md&#34;&gt;English&lt;/a&gt; | 中文&lt;/p&gt; &#xA;&lt;h2&gt;特点&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;自定义模板，生成您想要的频道&lt;/li&gt; &#xA; &lt;li&gt;支持多种获取源方式：组播源、酒店源、订阅源、关键字搜索&lt;/li&gt; &#xA; &lt;li&gt;接口测速验效，响应时间、分辨率优先级，过滤无效接口&lt;/li&gt; &#xA; &lt;li&gt;定时执行，北京时间每日 6:00 与 18:00 执行更新&lt;/li&gt; &#xA; &lt;li&gt;支持多种运行方式：工作流、命令行、GUI 软件、Docker(amd64/arm64)&lt;/li&gt; &#xA; &lt;li&gt;更多功能请见&lt;a href=&#34;https://raw.githubusercontent.com/Guovin/TV/master/docs/config.md&#34;&gt;配置参数&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;最新结果：&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;接口源：&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;https://ghproxy.net/raw.githubusercontent.com/Guovin/TV/gd/output/result.m3u&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;数据源：&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;https://ghproxy.net/raw.githubusercontent.com/Guovin/TV/gd/source.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;配置&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Guovin/TV/master/docs/config.md&#34;&gt;配置参数&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;快速上手&lt;/h2&gt; &#xA;&lt;h3&gt;方式一：工作流&lt;/h3&gt; &#xA;&lt;p&gt;Fork 本项目并开启工作流更新，具体步骤请见&lt;a href=&#34;https://raw.githubusercontent.com/Guovin/TV/master/docs/tutorial.md&#34;&gt;详细教程&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;方式二：命令行&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pip3 install pipenv&#xA;pipenv install&#xA;pipenv run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;方式三：GUI 软件&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;下载&lt;a href=&#34;https://github.com/Guovin/TV/releases&#34;&gt;更新工具软件&lt;/a&gt;，打开软件，点击更新，即可完成更新&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;或者在项目目录下运行以下命令，即可打开 GUI 软件：&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pipenv run ui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Guovin/TV/master/docs/images/ui.png&#34; alt=&#34;更新工具软件&#34; title=&#34;更新工具软件&#34; style=&#34;height:600px&#34;&gt; &#xA;&lt;h3&gt;方式四：Docker&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;requests：轻量级，性能要求低，更新速度快，稳定性不确定（推荐订阅源使用此版本）&lt;/li&gt; &#xA; &lt;li&gt;driver：性能要求较高，更新速度较慢，稳定性、成功率高；修改配置 open_driver = False 可切换到 request 版本（推荐酒店源、组播源、关键字搜索使用此版本）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;建议都试用一次，选择自己合适的版本。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;1. 拉取镜像：&#xA;requests：&#xA;docker pull guovern/tv-requests:latest&#xA;&#xA;driver：&#xA;docker pull guovern/tv-driver:latest&#xA;&#xA;2. 运行容器：&#xA;docker run -d -p 8000:8000 guovern/tv-requests 或 tv-driver&#xA;&#xA;卷挂载参数（可选）：&#xA;实现宿主机文件与容器文件同步，修改模板、配置、获取更新结果文件可直接在宿主机文件夹下操作&#xA;&#xA;配置文件：&#xA;-v 宿主机路径/config:/tv-requests/config 或 tv-driver/config&#xA;&#xA;结果文件：&#xA;-v 宿主机路径/output:/tv-requests/output 或 tv-driver/output&#xA;&#xA;例：docker run -v /etc/docker/config:/tv-requests/config -v /etc/docker/output:/tv-requests/output -d -p 8000:8000 guovern/tv-requests&#xA;&#xA;3. 查看更新结果：访问（域名:8000）&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;注：方式一至三更新完成后的结果文件链接：&lt;a href=&#34;http://%E6%9C%AC%E5%9C%B0&#34;&gt;http://本地&lt;/a&gt; ip:8000 或 &lt;a href=&#34;http://localhost:8000&#34;&gt;http://localhost:8000&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h2&gt;更新日志&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Guovin/TV/master/CHANGELOG.md&#34;&gt;更新日志&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;许可证&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Guovin/TV/master/LICENSE&#34;&gt;MIT&lt;/a&gt; License © 2024-PRESENT &lt;a href=&#34;https://github.com/guovin&#34;&gt;Govin&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;赞赏&lt;/h2&gt; &#xA;&lt;div&gt;&#xA; 请我喝杯咖啡☕️吧~&#xA;&lt;/div&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;支付宝&lt;/th&gt; &#xA;   &lt;th&gt;微信&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Guovin/TV/master/static/images/alipay.jpg&#34; alt=&#34;支付宝扫码&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Guovin/TV/master/static/images/appreciate.jpg&#34; alt=&#34;微信扫码&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;免责声明&lt;/h2&gt; &#xA;&lt;p&gt;本项目仅供学习交流用途，接口数据均来源于网络，如有侵权，请联系删除&lt;/p&gt;</summary>
  </entry>
</feed>