<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-02T02:30:35Z</updated>
  <subtitle>Monthly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>postgresml/postgresml</title>
    <updated>2022-06-02T02:30:35Z</updated>
    <id>tag:github.com,2022-06-02:/postgresml/postgresml</id>
    <link href="https://github.com/postgresml/postgresml" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PostgresML is an end-to-end machine learning system. It enables you to train models and make online predictions using only SQL, without your data ever leaving your favorite database.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://postgresml.org/&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/postgresml/postgresml/master/pgml-dashboard/app/static/images/logo-small.png&#34; width=&#34;175&#34; alt=&#34;PostgresML&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt; &lt;a href=&#34;https://postgresml.org/&#34;&gt; &#xA;  &lt;svg version=&#34;1.1&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; xmlns:xlink=&#34;http://www.w3.org/1999/xlink&#34; width=&#34;200&#34; height=&#34;50&#34;&gt; &#xA;   &lt;text font-size=&#34;32&#34; x=&#34;20&#34; y=&#34;32&#34;&gt; &#xA;    &lt;tspan fill=&#34;white&#34; style=&#34;mix-blend-mode: difference;&#34;&gt;&#xA;     Postgres&#xA;    &lt;/tspan&gt;&#xA;    &lt;tspan fill=&#34;dodgerblue&#34;&gt;&#xA;     ML&#xA;    &lt;/tspan&gt; &#xA;   &lt;/text&gt; &#xA;  &lt;/svg&gt; &lt;/a&gt; &lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Simple machine learning with &lt;a href=&#34;https://www.postgresql.org/&#34; target=&#34;_blank&#34;&gt;PostgreSQL&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://circleci.com/gh/postgresml/postgresml/tree/master&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/postgresml/postgresml/tree/master.svg?style=shield&#34; alt=&#34;Circle CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypistats.org/packages/pgml-extension&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/pgml-extension.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/pgml-extension&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/pgml-extension.svg?sanitize=true&#34; alt=&#34;Python Package Index&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Train and deploy models to make online predictions using only SQL, with an open source extension for Postgres. Manage your projects and visualize datasets using the built in dashboard. &lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/postgresml/postgresml/master/pgml-docs/docs/images/console.png&#34; alt=&#34;PostgresML in practice&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The dashboard makes it easy to compare different algorithms or hyperparaters across models and datasets.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://demo.postgresml.org/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/postgresml/postgresml/master/pgml-docs/docs/images/dashboard/models.png&#34; alt=&#34;PostgresML dashboard&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt; See it in action â€” &lt;a href=&#34;https://demo.postgresml.org/&#34; target=&#34;_blank&#34;&gt;demo.postgresml.org&lt;/a&gt; &lt;/h2&gt; &#xA;&lt;h2&gt;What&#39;s in the box&lt;/h2&gt; &#xA;&lt;p&gt;See the documentation for a complete &lt;strong&gt;&lt;a href=&#34;https://postgresml.org/&#34;&gt;list of functionality&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;All your favorite algorithms&lt;/h3&gt; &#xA;&lt;p&gt;Whether you need a simple linear regression, or extreme gradient boosting, we&#39;ve included support for all classification and regression algorithms in &lt;a href=&#34;https://scikit-learn.org/&#34;&gt;Scikit Learn&lt;/a&gt; and &lt;a href=&#34;https://xgboost.readthedocs.io/&#34;&gt;XGBoost&lt;/a&gt; with no extra configuration.&lt;/p&gt; &#xA;&lt;h3&gt;Managed model deployements&lt;/h3&gt; &#xA;&lt;p&gt;Models can be periodically retrained and automatically promoted to production depending on their key metric. Rollback capability is provided to ensure that you&#39;re always able to serve the highest quality predictions, along with historical logs of all deployments for long term study.&lt;/p&gt; &#xA;&lt;h3&gt;Online and offline support&lt;/h3&gt; &#xA;&lt;p&gt;Predictions are served via a standard Postgres connection to ensure that your core apps can always access both your data and your models in real time. Pure SQL workflows also enable batch predictions to cache results in native Postgres tables for lookup.&lt;/p&gt; &#xA;&lt;h3&gt;Instant visualizations&lt;/h3&gt; &#xA;&lt;p&gt;Run standard analysis on your datasets to detect outliers, bimodal distributions, feature correlation, and other common data visualizations on your datasets. Everything is cataloged in the dashboard for easy reference.&lt;/p&gt; &#xA;&lt;h3&gt;Hyperparameter search&lt;/h3&gt; &#xA;&lt;p&gt;Use either grid or random searches with cross validation on your training set to discover the most important knobs to tweak on your favorite algorithm.&lt;/p&gt; &#xA;&lt;h3&gt;SQL native vector operations&lt;/h3&gt; &#xA;&lt;p&gt;Vector operations make working with learned emebeddings a snap, for things like nearest neighbor searches or other similarity comparisons.&lt;/p&gt; &#xA;&lt;h3&gt;The performance of Postgres&lt;/h3&gt; &#xA;&lt;p&gt;Since your data never leaves the database, you retain the speed, reliability and security you expect in your foundational stateful services. Leverage your existing infrastructure and expertise to deliver new capabilities.&lt;/p&gt; &#xA;&lt;h3&gt;Open source&lt;/h3&gt; &#xA;&lt;p&gt;We&#39;re building on the shoulders of giants. These machine learning libraries and Postgres have recieved extensive academic and industry use, and we&#39;ll continue their tradition to build with the community. Licensed under MIT.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repo:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone git@github.com:postgresml/postgresml.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Start dockerized services. PostgresML will run on port 5433, just in case you already have Postgres running:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd postgresml &amp;amp;&amp;amp; docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Connect to PostgreSQL in the Docker container with PostgresML installed:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ psql postgres://postgres@localhost:5433/pgml_development&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Validate your installation:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;pgml_development=# SELECT pgml.version();&#xA; &#xA; version&#xA;---------&#xA; 0.8.1&#xA;(1 row)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the documentation for a complete guide to &lt;strong&gt;&lt;a href=&#34;https://postgresml.org/&#34;&gt;working with PostgresML&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>faif/python-patterns</title>
    <updated>2022-06-02T02:30:35Z</updated>
    <id>tag:github.com,2022-06-02:/faif/python-patterns</id>
    <link href="https://github.com/faif/python-patterns" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of design patterns/idioms in Python&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;python-patterns&lt;/h1&gt; &#xA;&lt;p&gt;A collection of design patterns and idioms in Python.&lt;/p&gt; &#xA;&lt;h2&gt;Current Patterns&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Creational Patterns&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Pattern&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/creational/abstract_factory.py&#34;&gt;abstract_factory&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;use a generic function with specific factories&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/creational/borg.py&#34;&gt;borg&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;a singleton with shared-state among instances&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/creational/builder.py&#34;&gt;builder&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;instead of using multiple constructors, builder object receives parameters and returns constructed objects&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/creational/factory.py&#34;&gt;factory&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;delegate a specialized function/method to create instances&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/creational/lazy_evaluation.py&#34;&gt;lazy_evaluation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;lazily-evaluated property pattern in Python&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/creational/pool.py&#34;&gt;pool&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;preinstantiate and maintain a group of instances of the same type&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/creational/prototype.py&#34;&gt;prototype&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;use a factory and clones of a prototype for new instances (if instantiation is expensive)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Structural Patterns&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Pattern&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/3-tier.py&#34;&gt;3-tier&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;data&amp;lt;-&amp;gt;business logic&amp;lt;-&amp;gt;presentation separation (strict relationships)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/adapter.py&#34;&gt;adapter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;adapt one interface to another using a white-list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/bridge.py&#34;&gt;bridge&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;a client-provider middleman to soften interface changes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/composite.py&#34;&gt;composite&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;lets clients treat individual objects and compositions uniformly&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/decorator.py&#34;&gt;decorator&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;wrap functionality with other functionality in order to affect outputs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/facade.py&#34;&gt;facade&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;use one class as an API to a number of others&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/flyweight.py&#34;&gt;flyweight&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;transparently reuse existing instances of objects with similar/identical state&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/front_controller.py&#34;&gt;front_controller&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;single handler requests coming to the application&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/mvc.py&#34;&gt;mvc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;model&amp;lt;-&amp;gt;view&amp;lt;-&amp;gt;controller (non-strict relationships)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/proxy.py&#34;&gt;proxy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;an object funnels operations to something else&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Behavioral Patterns&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Pattern&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/chain_of_responsibility.py&#34;&gt;chain_of_responsibility&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;apply a chain of successive handlers to try and process the data&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/catalog.py&#34;&gt;catalog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;general methods will call different specialized methods based on construction parameter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/chaining_method.py&#34;&gt;chaining_method&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;continue callback next object method&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/command.py&#34;&gt;command&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;bundle a command and arguments to call later&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/iterator.py&#34;&gt;iterator&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;traverse a container and access the container&#39;s elements&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/iterator_alt.py&#34;&gt;iterator&lt;/a&gt; (alt. impl.)&lt;/td&gt; &#xA;   &lt;td&gt;traverse a container and access the container&#39;s elements&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/mediator.py&#34;&gt;mediator&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;an object that knows how to connect other objects and act as a proxy&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/memento.py&#34;&gt;memento&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;generate an opaque token that can be used to go back to a previous state&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/observer.py&#34;&gt;observer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;provide a callback for notification of events/changes to data&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/publish_subscribe.py&#34;&gt;publish_subscribe&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;a source syndicates events/data to 0+ registered listeners&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/registry.py&#34;&gt;registry&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;keep track of all subclasses of a given class&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/specification.py&#34;&gt;specification&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;business rules can be recombined by chaining the business rules together using boolean logic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/state.py&#34;&gt;state&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;logic is organized into a discrete number of potential states and the next state that can be transitioned to&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/strategy.py&#34;&gt;strategy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;selectable operations over the same data&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/template.py&#34;&gt;template&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;an object imposes a structure but takes pluggable components&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/visitor.py&#34;&gt;visitor&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;invoke a callback for all items of a collection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Design for Testability Patterns&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Pattern&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/dependency_injection.py&#34;&gt;dependency_injection&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;3 variants of dependency injection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fundamental Patterns&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Pattern&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/fundamental/delegation_pattern.py&#34;&gt;delegation_pattern&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;an object handles a request by delegating to a second object (the delegate)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Others&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Pattern&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/other/blackboard.py&#34;&gt;blackboard&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;architectural model, assemble different sub-system knowledge to build a solution, AI approach - non gang of four pattern&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/other/graph_search.py&#34;&gt;graph_search&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;graphing algorithms - non gang of four pattern&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/other/hsm/hsm.py&#34;&gt;hsm&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;hierarchical state machine - non gang of four pattern&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Videos&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=bsyjSW46TDg&#34;&gt;Design Patterns in Python by Peter Ullrich&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=G5OeYHCJuv0&#34;&gt;Sebastian BuczyÅ„ski - Why you don&#39;t need design patterns in Python?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=imW-trt0i9I&#34;&gt;You Don&#39;t Need That!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=PfgEU3W0kyU&#34;&gt;Pluggable Libs Through Design Patterns&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;When an implementation is added or modified, please review the following guidelines:&lt;/p&gt; &#xA;&lt;h5&gt;Output&lt;/h5&gt; &#xA;&lt;p&gt;All files with example patterns have &lt;code&gt;### OUTPUT ###&lt;/code&gt; section at the bottom (migration to OUTPUT = &#34;&#34;&#34;...&#34;&#34;&#34; is in progress).&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;append_output.sh&lt;/code&gt; (e.g. &lt;code&gt;./append_output.sh borg.py&lt;/code&gt;) to generate/update it.&lt;/p&gt; &#xA;&lt;h5&gt;Docstrings&lt;/h5&gt; &#xA;&lt;p&gt;Add module level description in form of a docstring with links to corresponding references or other useful information.&lt;/p&gt; &#xA;&lt;p&gt;Add &#34;Examples in Python ecosystem&#34; section if you know some. It shows how patterns could be applied to real-world problems.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/facade.py&#34;&gt;facade.py&lt;/a&gt; has a good example of detailed description, but sometimes the shorter one as in &lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/template.py&#34;&gt;template.py&lt;/a&gt; would suffice.&lt;/p&gt; &#xA;&lt;p&gt;In some cases class-level docstring with doctest would also help (see &lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/adapter.py&#34;&gt;adapter.py&lt;/a&gt;) but readable OUTPUT section is much better.&lt;/p&gt; &#xA;&lt;h5&gt;Python 2 compatibility&lt;/h5&gt; &#xA;&lt;p&gt;To see Python 2 compatible versions of some patterns please check-out the &lt;a href=&#34;https://github.com/faif/python-patterns/tree/legacy&#34;&gt;legacy&lt;/a&gt; tag.&lt;/p&gt; &#xA;&lt;h5&gt;Update README&lt;/h5&gt; &#xA;&lt;p&gt;When everything else is done - update corresponding part of README.&lt;/p&gt; &#xA;&lt;h5&gt;Travis CI&lt;/h5&gt; &#xA;&lt;p&gt;Please run &lt;code&gt;tox&lt;/code&gt; or &lt;code&gt;tox -e ci37&lt;/code&gt; before submitting a patch to be sure your changes will pass CI.&lt;/p&gt; &#xA;&lt;p&gt;You can also run &lt;code&gt;flake8&lt;/code&gt; or &lt;code&gt;pytest&lt;/code&gt; commands manually. Examples can be found in &lt;code&gt;tox.ini&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing via issue triage &lt;a href=&#34;https://www.codetriage.com/faif/python-patterns&#34;&gt;&lt;img src=&#34;https://www.codetriage.com/faif/python-patterns/badges/users.svg?sanitize=true&#34; alt=&#34;Open Source Helpers&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;You can triage issues and pull requests which may include reproducing bug reports or asking for vital information, such as version numbers or reproduction instructions. If you would like to start triaging issues, one easy way to get started is to &lt;a href=&#34;https://www.codetriage.com/faif/python-patterns&#34;&gt;subscribe to python-patterns on CodeTriage&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>facebookresearch/metaseq</title>
    <updated>2022-06-02T02:30:35Z</updated>
    <id>tag:github.com,2022-06-02:/facebookresearch/metaseq</id>
    <link href="https://github.com/facebookresearch/metaseq" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Repo for external large-scale work&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Metaseq&lt;/h1&gt; &#xA;&lt;p&gt;A codebase for working with &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/metaseq/main/projects/OPT&#34;&gt;Open Pre-trained Transformers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Using OPT with ðŸ¤— Transformers&lt;/h2&gt; &#xA;&lt;p&gt;The OPT 125M--30B models are now available in &lt;a href=&#34;https://github.com/huggingface/transformers/releases/tag/v4.19.0&#34;&gt;HuggingFace Transformers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started in Metaseq&lt;/h2&gt; &#xA;&lt;p&gt;Follow &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/metaseq/main/docs/setup.md&#34;&gt;setup instructions here&lt;/a&gt; to get started.&lt;/p&gt; &#xA;&lt;h3&gt;Documentation on workflows&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/metaseq/main/docs/training.md&#34;&gt;Training&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/metaseq/main/docs/api.md&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Background Info&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/metaseq/main/docs/history.md&#34;&gt;Background &amp;amp; relationship to fairseq&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/metaseq/main/projects/OPT/chronicles/README.md&#34;&gt;Chronicles of training OPT-175B&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you have any questions, bug reports, or feature requests regarding either the codebase or the models released in the projects section, please don&#39;t hesitate to post on our &lt;a href=&#34;https://github.com/facebookresearch/metaseq/issues&#34;&gt;Github Issues page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please remember to follow our &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/metaseq/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome PRs from the community!&lt;/p&gt; &#xA;&lt;p&gt;You can find information about contributing to metaseq in our &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/metaseq/main/docs/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; document.&lt;/p&gt; &#xA;&lt;h2&gt;The Team&lt;/h2&gt; &#xA;&lt;p&gt;Metaseq is currently maintained by the CODEOWNERS: &lt;a href=&#34;https://github.com/suchenzang&#34;&gt;Susan Zhang&lt;/a&gt;, &lt;a href=&#34;https://github.com/stephenroller&#34;&gt;Stephen Roller&lt;/a&gt;, &lt;a href=&#34;https://github.com/anj-s&#34;&gt;Anjali Sridhar&lt;/a&gt;, &lt;a href=&#34;https://github.com/ngoyal2707&#34;&gt;Naman Goyal&lt;/a&gt;, &lt;a href=&#34;https://github.com/punitkoura&#34;&gt;Punit Singh Koura&lt;/a&gt;, &lt;a href=&#34;https://github.com/moyapchen&#34;&gt;Moya Chen&lt;/a&gt;, and &lt;a href=&#34;https://github.com/m3rlin45&#34;&gt;Christopher Dewan&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The majority of metaseq is licensed under the MIT license, however portions of the project are available under separate license terms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Megatron-LM is licensed under the &lt;a href=&#34;https://github.com/NVIDIA/Megatron-LM/raw/main/LICENSE&#34;&gt;Megatron-LM license&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>diego-vicente/som-tsp</title>
    <updated>2022-06-02T02:30:35Z</updated>
    <id>tag:github.com,2022-06-02:/diego-vicente/som-tsp</id>
    <link href="https://github.com/diego-vicente/som-tsp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Solving the Traveling Salesman Problem using Self-Organizing Maps&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: Solving the Traveling Salesman Problem using Self-Organizing Maps #+AUTHOR: Diego Vicente MartÃ­n #+EMAIL: &lt;a href=&#34;mailto:mail@diego.codes&#34;&gt;mail@diego.codes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository contains an implementation of a Self Organizing Map that can be used to find sub-optimal solutions for the Traveling Salesman Problem. The instances of the problems that the program supports are =.tsp= files, which is a widespread format in this problem. All the source code can be found in the =src= directory, while a report and brief presentation slides (in Spanish) can be found in the =report= folder. However, for a complete read on the topic, you can read [[https://diego.codes/post/som-tsp/][my blog post explaining this implementation and its evaluation]].&lt;/p&gt; &#xA;&lt;p&gt;[[file:diagrams/uruguay.gif]]&lt;/p&gt; &#xA;&lt;p&gt;To run the code, only Python 3 and the dependencies (=matplotlib=, =numpy= and =pandas=, which are included in the Anaconda distribution by default) are needed. In case you are not using Anaconda, you can install all the dependencies with:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC sh pip install -r requirements.txt #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To run the code, simply execute:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC sh cd som-tsp python src/main.py assets/&#xA; &lt;instance&gt;&#xA;  .tsp #+END_SRC&#xA; &lt;/instance&gt;&lt;/p&gt; &#xA;&lt;p&gt;The images generated will be stored in the =diagrams= folder. Using a tool like =convert=, you can easily generate an animation like the one in this file by running:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC sh convert -delay 10 -loop 0 *.png animation.gif #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;This code is licensed under MIT License, so feel free to modify and/or use it in your projects. If you have any doubts, feel free to contact me or contribute to this repository by creating an issue.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;This code was presented for the Bio-Inspired Artificial Intelligence course in the Computer Science &amp;amp; Technology master&#39;s degree @ UC3M. A previous version of this code can be found in [[https://github.com/DiegoVicen/ntnu-som][this repository]]. Special thanks to [[https://github.com/leo-labs][Leonard Kleinans]], who worked with me in that previous version.&lt;/p&gt;</summary>
  </entry>
</feed>