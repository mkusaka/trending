<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-01T02:20:48Z</updated>
  <subtitle>Monthly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>imClumsyPanda/langchain-ChatGLM</title>
    <updated>2023-06-01T02:20:48Z</updated>
    <id>tag:github.com,2023-06-01:/imClumsyPanda/langchain-ChatGLM</id>
    <link href="https://github.com/imClumsyPanda/langchain-ChatGLM" rel="alternate"></link>
    <summary type="html">&lt;p&gt;langchain-ChatGLM, local knowledge based ChatGLM with langchain ｜ 基于本地知识库的 ChatGLM 问答&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;基于本地知识库的 ChatGLM 等大语言模型应用实现&lt;/h1&gt; &#xA;&lt;h2&gt;介绍&lt;/h2&gt; &#xA;&lt;p&gt;🌍 &lt;a href=&#34;https://raw.githubusercontent.com/imClumsyPanda/langchain-ChatGLM/master/README_en.md&#34;&gt;&lt;em&gt;READ THIS IN ENGLISH&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;🤖️ 一种利用 &lt;a href=&#34;https://github.com/hwchase17/langchain&#34;&gt;langchain&lt;/a&gt; 思想实现的基于本地知识库的问答应用，目标期望建立一套对中文场景与开源模型支持友好、可离线运行的知识库问答解决方案。&lt;/p&gt; &#xA;&lt;p&gt;💡 受 &lt;a href=&#34;https://github.com/GanymedeNil&#34;&gt;GanymedeNil&lt;/a&gt; 的项目 &lt;a href=&#34;https://github.com/GanymedeNil/document.ai&#34;&gt;document.ai&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/AlexZhangji&#34;&gt;AlexZhangji&lt;/a&gt; 创建的 &lt;a href=&#34;https://github.com/THUDM/ChatGLM-6B/pull/216&#34;&gt;ChatGLM-6B Pull Request&lt;/a&gt; 启发，建立了全流程可使用开源模型实现的本地知识库问答应用。现已支持使用 &lt;a href=&#34;https://github.com/THUDM/ChatGLM-6B&#34;&gt;ChatGLM-6B&lt;/a&gt; 等大语言模型直接接入，或通过 &lt;a href=&#34;https://github.com/lm-sys/FastChat&#34;&gt;fastchat&lt;/a&gt; api 形式接入 Vicuna, Alpaca, LLaMA, Koala, RWKV 等模型。&lt;/p&gt; &#xA;&lt;p&gt;✅ 本项目中 Embedding 默认选用的是 &lt;a href=&#34;https://huggingface.co/GanymedeNil/text2vec-large-chinese/tree/main&#34;&gt;GanymedeNil/text2vec-large-chinese&lt;/a&gt;，LLM 默认选用的是 &lt;a href=&#34;https://github.com/THUDM/ChatGLM-6B&#34;&gt;ChatGLM-6B&lt;/a&gt;。依托上述模型，本项目可实现全部使用&lt;strong&gt;开源&lt;/strong&gt;模型&lt;strong&gt;离线私有部署&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;p&gt;⛓️ 本项目实现原理如下图所示，过程包括加载文件 -&amp;gt; 读取文本 -&amp;gt; 文本分割 -&amp;gt; 文本向量化 -&amp;gt; 问句向量化 -&amp;gt; 在文本向量中匹配出与问句向量最相似的&lt;code&gt;top k&lt;/code&gt;个 -&amp;gt; 匹配出的文本作为上下文和问题一起添加到&lt;code&gt;prompt&lt;/code&gt;中 -&amp;gt; 提交给&lt;code&gt;LLM&lt;/code&gt;生成回答。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/imClumsyPanda/langchain-ChatGLM/master/img/langchain+chatglm.png&#34; alt=&#34;实现原理图&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;从文档处理角度来看，实现流程如下：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/imClumsyPanda/langchain-ChatGLM/master/img/langchain+chatglm2.png&#34; alt=&#34;实现原理图2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;🚩 本项目未涉及微调、训练过程，但可利用微调或训练对本项目效果进行优化。&lt;/p&gt; &#xA;&lt;p&gt;🌐 &lt;a href=&#34;https://www.codewithgpu.com/i/imClumsyPanda/langchain-ChatGLM/langchain-ChatGLM&#34;&gt;AutoDL 镜像&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;📓 &lt;a href=&#34;https://www.heywhale.com/mw/project/643977aa446c45f4592a1e59&#34;&gt;ModelWhale 在线运行项目&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;变更日志&lt;/h2&gt; &#xA;&lt;p&gt;参见 &lt;a href=&#34;https://raw.githubusercontent.com/imClumsyPanda/langchain-ChatGLM/master/docs/CHANGELOG.md&#34;&gt;变更日志&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;硬件需求&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;ChatGLM-6B 模型硬件需求&lt;/p&gt; &lt;p&gt;注：如未将模型下载至本地，请执行前检查&lt;code&gt;$HOME/.cache/huggingface/&lt;/code&gt;文件夹剩余空间，模型文件下载至本地需要 15 GB 存储空间。 注：一些其它的可选启动项见&lt;a href=&#34;https://raw.githubusercontent.com/imClumsyPanda/langchain-ChatGLM/master/docs/StartOption.md&#34;&gt;项目启动选项&lt;/a&gt; 模型下载方法可参考 &lt;a href=&#34;https://raw.githubusercontent.com/imClumsyPanda/langchain-ChatGLM/master/docs/FAQ.md&#34;&gt;常见问题&lt;/a&gt; 中 Q8。&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;&lt;strong&gt;量化等级&lt;/strong&gt;&lt;/th&gt; &#xA;     &lt;th&gt;&lt;strong&gt;最低 GPU 显存&lt;/strong&gt;（推理）&lt;/th&gt; &#xA;     &lt;th&gt;&lt;strong&gt;最低 GPU 显存&lt;/strong&gt;（高效参数微调）&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;FP16（无量化）&lt;/td&gt; &#xA;     &lt;td&gt;13 GB&lt;/td&gt; &#xA;     &lt;td&gt;14 GB&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;INT8&lt;/td&gt; &#xA;     &lt;td&gt;8 GB&lt;/td&gt; &#xA;     &lt;td&gt;9 GB&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;INT4&lt;/td&gt; &#xA;     &lt;td&gt;6 GB&lt;/td&gt; &#xA;     &lt;td&gt;7 GB&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MOSS 模型硬件需求&lt;/p&gt; &lt;p&gt;注：如未将模型下载至本地，请执行前检查&lt;code&gt;$HOME/.cache/huggingface/&lt;/code&gt;文件夹剩余空间，模型文件下载至本地需要 70 GB 存储空间&lt;/p&gt; &lt;p&gt;模型下载方法可参考 &lt;a href=&#34;https://raw.githubusercontent.com/imClumsyPanda/langchain-ChatGLM/master/docs/FAQ.md&#34;&gt;常见问题&lt;/a&gt; 中 Q8。&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;&lt;strong&gt;量化等级&lt;/strong&gt;&lt;/th&gt; &#xA;     &lt;th&gt;&lt;strong&gt;最低 GPU 显存&lt;/strong&gt;（推理）&lt;/th&gt; &#xA;     &lt;th&gt;&lt;strong&gt;最低 GPU 显存&lt;/strong&gt;（高效参数微调）&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;FP16（无量化）&lt;/td&gt; &#xA;     &lt;td&gt;68 GB&lt;/td&gt; &#xA;     &lt;td&gt;-&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;INT8&lt;/td&gt; &#xA;     &lt;td&gt;20 GB&lt;/td&gt; &#xA;     &lt;td&gt;-&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Embedding 模型硬件需求&lt;/p&gt; &lt;p&gt;本项目中默认选用的 Embedding 模型 &lt;a href=&#34;https://huggingface.co/GanymedeNil/text2vec-large-chinese/tree/main&#34;&gt;GanymedeNil/text2vec-large-chinese&lt;/a&gt; 约占用显存 3GB，也可修改为在 CPU 中运行。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Docker 部署&lt;/h2&gt; &#xA;&lt;p&gt;为了能让容器使用主机GPU资源，需要在主机上安装 &lt;a href=&#34;https://github.com/NVIDIA/nvidia-container-toolkit&#34;&gt;NVIDIA Container Toolkit&lt;/a&gt;。具体安装步骤如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt-get update&#xA;sudo apt-get install -y nvidia-container-toolkit-base&#xA;sudo systemctl daemon-reload &#xA;sudo systemctl restart docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;安装完成后，可以使用以下命令编译镜像和启动容器：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build -f Dockerfile-cuda -t chatglm-cuda:latest .&#xA;docker run --gpus all -d --name chatglm -p 7860:7860  chatglm-cuda:latest&#xA;&#xA;#若要使用离线模型，请配置好模型路径，然后此repo挂载到Container&#xA;docker run --gpus all -d --name chatglm -p 7860:7860 -v ~/github/langchain-ChatGLM:/chatGLM  chatglm-cuda:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;开发部署&lt;/h2&gt; &#xA;&lt;h3&gt;软件需求&lt;/h3&gt; &#xA;&lt;p&gt;本项目已在 Python 3.8 - 3.10，CUDA 11.7 环境下完成测试。已在 Windows、ARM 架构的 macOS、Linux 系统中完成测试。&lt;/p&gt; &#xA;&lt;p&gt;vue前端需要node18环境&lt;/p&gt; &#xA;&lt;h3&gt;从本地加载模型&lt;/h3&gt; &#xA;&lt;p&gt;请参考 &lt;a href=&#34;https://github.com/THUDM/ChatGLM-6B#%E4%BB%8E%E6%9C%AC%E5%9C%B0%E5%8A%A0%E8%BD%BD%E6%A8%A1%E5%9E%8B&#34;&gt;THUDM/ChatGLM-6B#从本地加载模型&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;1. 安装环境&lt;/h3&gt; &#xA;&lt;p&gt;参见 &lt;a href=&#34;https://raw.githubusercontent.com/imClumsyPanda/langchain-ChatGLM/master/docs/INSTALL.md&#34;&gt;安装指南&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h3&gt;2. 设置模型默认参数&lt;/h3&gt; &#xA;&lt;p&gt;在开始执行 Web UI 或命令行交互前，请先检查 &lt;a href=&#34;https://raw.githubusercontent.com/imClumsyPanda/langchain-ChatGLM/master/configs/model_config.py&#34;&gt;configs/model_config.py&lt;/a&gt; 中的各项模型参数设计是否符合需求。&lt;/p&gt; &#xA;&lt;p&gt;如需通过 fastchat 以 api 形式调用 llm，请参考 &lt;a href=&#34;https://raw.githubusercontent.com/imClumsyPanda/langchain-ChatGLM/master/docs/fastchat.md&#34;&gt;fastchat 调用实现&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;3. 执行脚本体验 Web UI 或命令行交互&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;注：鉴于环境部署过程中可能遇到问题，建议首先测试命令行脚本。建议命令行脚本测试可正常运行后再运行 Web UI。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;执行 &lt;a href=&#34;https://raw.githubusercontent.com/imClumsyPanda/langchain-ChatGLM/master/cli_demo.py&#34;&gt;cli_demo.py&lt;/a&gt; 脚本体验&lt;strong&gt;命令行交互&lt;/strong&gt;：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ python cli_demo.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;或执行 &lt;a href=&#34;https://raw.githubusercontent.com/imClumsyPanda/langchain-ChatGLM/master/webui.py&#34;&gt;webui.py&lt;/a&gt; 脚本体验 &lt;strong&gt;Web 交互&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ python webui.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;或执行 &lt;a href=&#34;https://raw.githubusercontent.com/imClumsyPanda/langchain-ChatGLM/master/api.py&#34;&gt;api.py&lt;/a&gt; 利用 fastapi 部署 API&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ python api.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;或成功部署 API 后，执行以下脚本体验基于 VUE 的前端页面&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cd views &#xA;&#xA;$ pnpm i&#xA;&#xA;$ npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;VUE 前端界面如下图所示：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;对话&lt;/code&gt; 界面 &lt;img src=&#34;https://raw.githubusercontent.com/imClumsyPanda/langchain-ChatGLM/master/img/vue_0521_0.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;知识库问答&lt;/code&gt; 界面 &lt;img src=&#34;https://raw.githubusercontent.com/imClumsyPanda/langchain-ChatGLM/master/img/vue_0521_1.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Bing搜索&lt;/code&gt; 界面 &lt;img src=&#34;https://raw.githubusercontent.com/imClumsyPanda/langchain-ChatGLM/master/img/vue_0521_2.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;WebUI 界面如下图所示：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;对话&lt;/code&gt; Tab 界面 &lt;img src=&#34;https://raw.githubusercontent.com/imClumsyPanda/langchain-ChatGLM/master/img/webui_0521_0.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;知识库测试 Beta&lt;/code&gt; Tab 界面 &lt;img src=&#34;https://raw.githubusercontent.com/imClumsyPanda/langchain-ChatGLM/master/img/webui_0510_1.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;模型配置&lt;/code&gt; Tab 界面 &lt;img src=&#34;https://raw.githubusercontent.com/imClumsyPanda/langchain-ChatGLM/master/img/webui_0510_2.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Web UI 可以实现如下功能：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;运行前自动读取&lt;code&gt;configs/model_config.py&lt;/code&gt;中&lt;code&gt;LLM&lt;/code&gt;及&lt;code&gt;Embedding&lt;/code&gt;模型枚举及默认模型设置运行模型，如需重新加载模型，可在 &lt;code&gt;模型配置&lt;/code&gt; Tab 重新选择后点击 &lt;code&gt;重新加载模型&lt;/code&gt; 进行模型加载；&lt;/li&gt; &#xA; &lt;li&gt;可手动调节保留对话历史长度、匹配知识库文段数量，可根据显存大小自行调节；&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;对话&lt;/code&gt; Tab 具备模式选择功能，可选择 &lt;code&gt;LLM对话&lt;/code&gt; 与 &lt;code&gt;知识库问答&lt;/code&gt; 模式进行对话，支持流式对话；&lt;/li&gt; &#xA; &lt;li&gt;添加 &lt;code&gt;配置知识库&lt;/code&gt; 功能，支持选择已有知识库或新建知识库，并可向知识库中&lt;strong&gt;新增&lt;/strong&gt;上传文件/文件夹，使用文件上传组件选择好文件后点击 &lt;code&gt;上传文件并加载知识库&lt;/code&gt;，会将所选上传文档数据加载至知识库中，并基于更新后知识库进行问答；&lt;/li&gt; &#xA; &lt;li&gt;新增 &lt;code&gt;知识库测试 Beta&lt;/code&gt; Tab，可用于测试不同文本切分方法与检索相关度阈值设置，暂不支持将测试参数作为 &lt;code&gt;对话&lt;/code&gt; Tab 设置参数。&lt;/li&gt; &#xA; &lt;li&gt;后续版本中将会增加对知识库的修改或删除，及知识库中已导入文件的查看。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;常见问题&lt;/h3&gt; &#xA;&lt;p&gt;参见 &lt;a href=&#34;https://raw.githubusercontent.com/imClumsyPanda/langchain-ChatGLM/master/docs/FAQ.md&#34;&gt;常见问题&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;以问题&lt;code&gt;chatglm-6b 的局限性具体体现在哪里，如何实现改进&lt;/code&gt;为例：&lt;/p&gt; &#xA;&lt;p&gt;未使用 langchain 接入本地文档时：&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ChatGLM-6B 是一个基于 GPT-3 的聊天机器人,它的局限性主要体现在以下几个方面:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;语言模型的精度:GPT-3 是一种大型的语言模型,它的精度比较高,但是仍然有一些局限性。例如,它可能无法准确地理解某些方言、口音或者复杂的句子结构。&lt;/li&gt; &#xA;  &lt;li&gt;知识图谱的完整性:GPT-3 可以生成一些知识图谱,但是其完整性和准确性可能不够。例如,它可能无法准确地理解某些领域的专业知识和术语。&lt;/li&gt; &#xA;  &lt;li&gt;对话生成的连贯性:GPT-3 可以生成一些连贯的对话,但是其生成的对话可能不够自然。例如,它可能会生成一些虚假的、不连贯的对话或者误解用户的意图。&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;为了改进 ChatGLM-6B,可以考虑以下几个方面:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;提高语言模型的精度:可以通过增加训练数据、使用更好的语言模型架构、优化模型训练过程等方式来提高语言模型的精度。&lt;/li&gt; &#xA;  &lt;li&gt;增强知识图谱的完整性:可以通过增加知识图谱的维度、使用更好的知识图谱构建方法、优化知识图谱的匹配算法等方式来增强知识图谱的完整性。&lt;/li&gt; &#xA;  &lt;li&gt;提高对话生成的连贯性:可以通过增加对话生成模型的上下文信息、使用更好的上下文信息提取方法、优化对话生成模型的算法等方式来提高对话生成的连贯性。&lt;/li&gt; &#xA;  &lt;li&gt;引入更多的人类反馈:人类反馈可以帮助 ChatGLM-6B 更好地理解用户的意图和需求,从而提高对话生成的质量和准确性。可以通过引入更多的人类客服、使用人类反馈收集器等方式来引入更多的人类反馈。&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;使用 langchain 接入 ChatGLM-6B 项目的 README.md 文件后 ChatGLM 的回答：&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ChatGLM-6B 是一个基于深度学习的自然语言处理模型,它在回答问题方面表现出色。但是,它也有一些局限性,具体如下:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;语言理解有限:ChatGLM-6B 只学习了中文自然语言,对于其他语言可能会存在理解上的局限性。&lt;/li&gt; &#xA;  &lt;li&gt;知识储备不足:ChatGLM-6B 的训练数据集只包含了中文语料,因此它可能无法回答一些非中文的问题或者某些特定领域的问题。&lt;/li&gt; &#xA;  &lt;li&gt;数据量有限:ChatGLM-6B 的训练数据集只有几百万条记录,因此它可能无法回答一些非常具体或者复杂的问题。&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;为了改进 ChatGLM-6B,可以考虑以下几个方面:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;学习更多的语言知识:可以学习其他语言的自然语言处理技术,扩大语言理解的范围。&lt;/li&gt; &#xA;  &lt;li&gt;扩大知识储备:可以收集更多的中文语料,或者使用其他语言的数据集来扩充知识储备。&lt;/li&gt; &#xA;  &lt;li&gt;增加数据量:可以使用更大的数据集来训练 ChatGLM-6B,提高模型的表现。&lt;/li&gt; &#xA;  &lt;li&gt;引入更多的评估指标:可以引入更多的评估指标来评估模型的表现,从而发现 ChatGLM-6B 存在的不足和局限性。&lt;/li&gt; &#xA;  &lt;li&gt;改进模型架构:可以改进 ChatGLM-6B 的模型架构,提高模型的性能和表现。例如,可以使用更大的神经网络或者改进的卷积神经网络结构。&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;路线图&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Langchain 应用 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 接入非结构化文档（已支持 md、pdf、docx、txt 文件格式）&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; jpg 与 png 格式图片的 OCR 文字识别&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 搜索引擎接入&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 本地网页接入&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 结构化数据接入（如 csv、Excel、SQL 等）&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 知识图谱/图数据库接入&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Agent 实现&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 增加更多 LLM 模型支持 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/THUDM/chatglm-6b&#34;&gt;THUDM/chatglm-6b&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/THUDM/chatglm-6b-int8&#34;&gt;THUDM/chatglm-6b-int8&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/THUDM/chatglm-6b-int4&#34;&gt;THUDM/chatglm-6b-int4&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/THUDM/chatglm-6b-int4-qe&#34;&gt;THUDM/chatglm-6b-int4-qe&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/ClueAI/ChatYuan-large-v2&#34;&gt;ClueAI/ChatYuan-large-v2&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/fnlp/moss-moon-003-sft&#34;&gt;fnlp/moss-moon-003-sft&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 支持通过调用 &lt;a href=&#34;https://github.com/lm-sys/FastChat&#34;&gt;fastchat&lt;/a&gt; api 调用 llm&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 增加更多 Embedding 模型支持 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/nghuyong/ernie-3.0-nano-zh&#34;&gt;nghuyong/ernie-3.0-nano-zh&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/nghuyong/ernie-3.0-base-zh&#34;&gt;nghuyong/ernie-3.0-base-zh&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/shibing624/text2vec-base-chinese&#34;&gt;shibing624/text2vec-base-chinese&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/GanymedeNil/text2vec-large-chinese&#34;&gt;GanymedeNil/text2vec-large-chinese&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Web UI &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 基于 gradio 实现 Web UI DEMO&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 基于 streamlit 实现 Web UI DEMO&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 添加输出内容及错误提示&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 引用标注&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 增加知识库管理 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 选择知识库开始问答&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 上传文件/文件夹至知识库&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 知识库测试&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 删除知识库中文件&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 支持搜索引擎问答&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 增加 API 支持 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 利用 fastapi 实现 API 部署方式&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 实现调用 API 的 Web UI Demo&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; VUE 前端&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;项目交流群&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/imClumsyPanda/langchain-ChatGLM/master/img/qr_code_25.JPG&#34; alt=&#34;二维码&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;🎉 langchain-ChatGLM 项目交流群，如果你也对本项目感兴趣，欢迎加入群聊参与讨论交流。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>openai/plugins-quickstart</title>
    <updated>2023-06-01T02:20:48Z</updated>
    <id>tag:github.com,2023-06-01:/openai/plugins-quickstart</id>
    <link href="https://github.com/openai/plugins-quickstart" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Get a ChatGPT plugin up and running in under 5 minutes!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ChatGPT plugins quickstart&lt;/h1&gt; &#xA;&lt;p&gt;Get a todo list ChatGPT plugin up and running in under 5 minutes using Python. If you do not already have plugin developer access, please &lt;a href=&#34;https://openai.com/waitlist/plugins&#34;&gt;join the waitlist&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;To install the required packages for this plugin, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the plugin, enter the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python main.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the local server is running:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Navigate to &lt;a href=&#34;https://chat.openai.com&#34;&gt;https://chat.openai.com&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In the Model drop down, select &#34;Plugins&#34; (note, if you don&#39;t see it there, you don&#39;t have access yet).&lt;/li&gt; &#xA; &lt;li&gt;Select &#34;Plugin store&#34;&lt;/li&gt; &#xA; &lt;li&gt;Select &#34;Develop your own plugin&#34;&lt;/li&gt; &#xA; &lt;li&gt;Enter in &lt;code&gt;localhost:5003&lt;/code&gt; since this is the URL the server is running on locally, then select &#34;Find manifest file&#34;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The plugin should now be installed and enabled! You can start with a question like &#34;What is on my todo list&#34; and then try adding something to it as well!&lt;/p&gt; &#xA;&lt;h2&gt;Getting help&lt;/h2&gt; &#xA;&lt;p&gt;If you run into issues or have questions building a plugin, please join our &lt;a href=&#34;https://community.openai.com/c/chat-plugins/20&#34;&gt;Developer community forum&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>geohot/tinygrad</title>
    <updated>2023-06-01T02:20:48Z</updated>
    <id>tag:github.com,2023-06-01:/geohot/tinygrad</id>
    <link href="https://github.com/geohot/tinygrad" rel="alternate"></link>
    <summary type="html">&lt;p&gt;You like pytorch? You like micrograd? You love tinygrad! ❤️&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/geohot/tinygrad/master/docs/logo.png&#34;&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/geohot/tinygrad/workflows/Unit%20Tests/badge.svg?sanitize=true&#34; alt=&#34;Unit Tests&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/ZjZadyC7PK&#34;&gt;&lt;img src=&#34;https://discordapp.com/api/guilds/1068976834382925865/widget.png?style=banner2&#34; alt=&#34;tinygrad discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For something in between a &lt;a href=&#34;https://github.com/pytorch/pytorch&#34;&gt;pytorch&lt;/a&gt; and a &lt;a href=&#34;https://github.com/karpathy/micrograd&#34;&gt;karpathy/micrograd&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This may not be the best deep learning framework, but it is a deep learning framework.&lt;/p&gt; &#xA;&lt;p&gt;The sub 1000 line core of it is in &lt;code&gt;tinygrad/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Due to its extreme simplicity, it aims to be the easiest framework to add new accelerators to, with support for both inference and training. Support the simple basic ops, and you get SOTA &lt;a href=&#34;https://arxiv.org/abs/1905.11946&#34;&gt;vision&lt;/a&gt; &lt;code&gt;models/efficientnet.py&lt;/code&gt; and &lt;a href=&#34;https://arxiv.org/abs/1706.03762&#34;&gt;language&lt;/a&gt; &lt;code&gt;models/transformer.py&lt;/code&gt; models.&lt;/p&gt; &#xA;&lt;p&gt;We are working on support for the Apple Neural Engine and the Google TPU in the &lt;code&gt;accel/&lt;/code&gt; folder. Eventually, &lt;a href=&#34;https://geohot.github.io/blog/jekyll/update/2021/06/13/a-breakdown-of-ai-chip-companies.html&#34;&gt;we will build custom hardware&lt;/a&gt; for tinygrad, and it will be blindingly fast. Now, it is slow.&lt;/p&gt; &#xA;&lt;p&gt;This project is maintained by &lt;a href=&#34;https://tinygrad.org/&#34;&gt;tiny corp&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/geohot/tinygrad.git&#xA;cd tinygrad&#xA;python3 -m pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;There&#39;s a lot of interest in tinygrad lately. Here&#39;s some guidelines for contributing:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bugfixes are the best and always welcome! Like &lt;a href=&#34;https://github.com/geohot/tinygrad/pull/421/files&#34;&gt;this one&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you don&#39;t understand the code you are changing, don&#39;t change it!&lt;/li&gt; &#xA; &lt;li&gt;All code golf PRs will be closed, but &lt;a href=&#34;https://github.com/geohot/tinygrad/pull/372/files&#34;&gt;conceptual cleanups&lt;/a&gt; are great.&lt;/li&gt; &#xA; &lt;li&gt;Features are welcome. Though if you are adding a feature, you need to include tests.&lt;/li&gt; &#xA; &lt;li&gt;Improving test coverage is great, with reliable non brittle tests.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tinygrad.tensor import Tensor&#xA;&#xA;x = Tensor.eye(3, requires_grad=True)&#xA;y = Tensor([[2.0,0,-2.0]], requires_grad=True)&#xA;z = y.matmul(x).sum()&#xA;z.backward()&#xA;&#xA;print(x.grad.numpy())  # dz/dx&#xA;print(y.grad.numpy())  # dz/dy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Same example in torch&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch&#xA;&#xA;x = torch.eye(3, requires_grad=True)&#xA;y = torch.tensor([[2.0,0,-2.0]], requires_grad=True)&#xA;z = y.matmul(x).sum()&#xA;z.backward()&#xA;&#xA;print(x.grad)  # dz/dx&#xA;print(y.grad)  # dz/dy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Is tinygrad fast?&lt;/h2&gt; &#xA;&lt;p&gt;Try a matmul. See how, despite the style, it is fused into one kernel with the power of laziness.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;DEBUG=3 OPTLOCAL=1 python3 -c &#34;from tinygrad.tensor import Tensor;&#xA;N = 1024; a, b = Tensor.randn(N, N), Tensor.randn(N, N);&#xA;c = (a.reshape(N, 1, N) * b.permute(1,0).reshape(1, N, N)).sum(axis=2);&#xA;print((c.numpy() - (a.numpy() @ b.numpy())).mean())&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Change to &lt;code&gt;DEBUG=4&lt;/code&gt; to see the generated code.&lt;/p&gt; &#xA;&lt;h2&gt;Neural networks?&lt;/h2&gt; &#xA;&lt;p&gt;It turns out, a decent autograd tensor library is 90% of what you need for neural networks. Add an optimizer (SGD, Adam, AdamW implemented) from tinygrad.nn.optim, write some boilerplate minibatching code, and you have all you need.&lt;/p&gt; &#xA;&lt;h3&gt;Neural network example (from test/models/test_mnist.py)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tinygrad.tensor import Tensor&#xA;import tinygrad.nn.optim as optim&#xA;&#xA;class TinyBobNet:&#xA;  def __init__(self):&#xA;    self.l1 = Tensor.uniform(784, 128)&#xA;    self.l2 = Tensor.uniform(128, 10)&#xA;&#xA;  def forward(self, x):&#xA;    return x.dot(self.l1).relu().dot(self.l2).log_softmax()&#xA;&#xA;model = TinyBobNet()&#xA;optim = optim.SGD([model.l1, model.l2], lr=0.001)&#xA;&#xA;# ... and complete like pytorch, with (x,y) data&#xA;&#xA;out = model.forward(x)&#xA;loss = out.mul(y).mean()&#xA;optim.zero_grad()&#xA;loss.backward()&#xA;optim.step()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;GPU and Accelerator Support&lt;/h2&gt; &#xA;&lt;p&gt;tinygrad supports GPUs through PyOpenCL.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tinygrad.tensor import Tensor&#xA;(Tensor.ones(4,4).gpu() + Tensor.ones(4,4).gpu()).cpu()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;hlops (in tensor.py)&lt;/h3&gt; &#xA;&lt;p&gt;hlops are syntactic sugar around mlops. They support most things torch does.&lt;/p&gt; &#xA;&lt;h3&gt;mlops&lt;/h3&gt; &#xA;&lt;p&gt;mlops are mid level ops. They understand derivatives. They are very simple.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Relu, Log, Exp, Sin                            # unary ops&#xA;Sum, Max                                       # reduce ops (with axis argument)&#xA;Maximum, Add, Sub, Mul, Pow, Div, Equal        # binary ops (no broadcasting, use expand)&#xA;Expand, Reshape, Permute, Pad, Shrink, Flip    # movement ops&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You no longer need to write mlops for a new accelerator&lt;/p&gt; &#xA;&lt;h3&gt;Adding an accelerator (llops)&lt;/h3&gt; &#xA;&lt;p&gt;The autodiff stuff is all in mlops now so you can focus on the raw operations&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Buffer                                                       # class of memory on this device&#xA;unary_op  (NOOP, EXP, LOG, CAST, SIN)                        # A -&amp;gt; A&#xA;reduce_op (SUM, MAX)                                         # A -&amp;gt; B (smaller size, B has 1 in shape)&#xA;binary_op (ADD, SUB, MUL, DIV, POW, CMPEQ, MAX)              # A + A -&amp;gt; A (all the same size)&#xA;movement_op (EXPAND, RESHAPE, PERMUTE, PAD, SHRINK, STRIDE)  # A -&amp;gt; B (different size)&#xA;fused_op [[optional]] (MULACC)                               # A * A -&amp;gt; B&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ImageNet inference&lt;/h2&gt; &#xA;&lt;p&gt;Despite being tiny, tinygrad supports the full EfficientNet. Pass in a picture to discover what it is.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 examples/efficientnet.py https://media.istockphoto.com/photos/hen-picture-id831791190&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, if you have a webcam and cv2 installed&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 examples/efficientnet.py webcam&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;PROTIP: Set &#34;DEBUG=2&#34; environment variable if you want to see why it&#39;s slow.&lt;/p&gt; &#xA;&lt;h3&gt;tinygrad supports Stable Diffusion!&lt;/h3&gt; &#xA;&lt;p&gt;You might need to download the &lt;a href=&#34;https://huggingface.co/CompVis/stable-diffusion-v-1-4-original/resolve/main/sd-v1-4.ckpt&#34;&gt;weight&lt;/a&gt; of Stable Diffusion and put it into weights/&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;python3 examples/stable_diffusion.py&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/geohot/tinygrad/master/docs/stable_diffusion_by_tinygrad.jpg&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &#34;a horse sized cat eating a bagel&#34; &lt;/p&gt; &#xA;&lt;h3&gt;tinygrad supports LLaMA&lt;/h3&gt; &#xA;&lt;p&gt;After putting the weights in weights/LLaMA, you can have a chat with Stacy. She lives inside tinygrad.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 examples/llama.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;tinygrad supports GANs&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;code&gt;examples/mnist_gan.py&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/geohot/tinygrad/master/docs/mnist_by_tinygrad.jpg&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;tinygrad supports yolo&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;code&gt;examples/yolov3.py&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/geohot/tinygrad/master/docs/yolo_by_tinygrad.jpg&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Drawing Execution Graph&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GRAPH=1 python3 test/models/test_mnist.py TestMNIST.test_sgd_onestep&#xA;# requires dot, outputs /tmp/net.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running tests&lt;/h3&gt; &#xA;&lt;p&gt;For more examples on how to run the full test suite please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/geohot/tinygrad/master/.github/workflows/test.yml&#34;&gt;CI workflow&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 -m pip install -e &#39;.[testing]&#39;&#xA;python3 -m pytest&#xA;python3 -m pytest -v -k TestTrain&#xA;python3 ./test/models/test_train.py TestTrain.test_efficientnet&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>