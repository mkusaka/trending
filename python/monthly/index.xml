<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-01T02:26:54Z</updated>
  <subtitle>Monthly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jackfrued/Python-100-Days</title>
    <updated>2023-12-01T02:26:54Z</updated>
    <id>tag:github.com,2023-12-01:/jackfrued/Python-100-Days</id>
    <link href="https://github.com/jackfrued/Python-100-Days" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Python - 100天从新手到大师&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Python - 100天从新手到大师&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;作者&lt;/strong&gt;：骆昊&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：从项目上线到获得8w+星标以来，一直收到反馈说基础部分（前15天的内容）对新手来说是比较困难的，建议有配套视频进行讲解。最近把基础部分的内容重新制作了一个名为&lt;a href=&#34;https://github.com/jackfrued/Python-Core-50-Courses&#34;&gt;“Python-Core-50-Courses”&lt;/a&gt;的项目，&lt;strong&gt;用更为简单通俗的方式重写了这部分内容并附带了视频讲解&lt;/strong&gt;，初学者可以关注下这个新项目。如果需要&lt;strong&gt;Python基础视频&lt;/strong&gt;，可以在“B站”搜索&lt;a href=&#34;https://www.bilibili.com/video/BV1FT4y1R7sz&#34;&gt;《Python零基础快速上手》&lt;/a&gt;，这套视频是我讲课的时候录制的随堂视频，画质尚可、音质一般，但是对初学者应该会有些帮助，欢迎大家留言、评论、发弹幕。学习之后觉得有收获的小伙伴可以“一键三连”来支持UP主（千锋Python）。国内用户如果访问GitHub比较慢的话，可以关注我的&lt;strong&gt;知乎号&lt;a href=&#34;https://www.zhihu.com/people/jackfrued&#34;&gt;Python-Jack&lt;/a&gt;&lt;/strong&gt;，上面的&lt;a href=&#34;https://zhuanlan.zhihu.com/c_1216656665569013760&#34;&gt;“从零开始学Python”&lt;/a&gt;专栏比较适合初学者，其他的专栏也在持续创作和更新中，欢迎大家关注并点赞评论。&lt;/p&gt; &#xA; &lt;p&gt;创作不易，感谢大家的打赏支持，这些钱不会用于个人消费（例如：购买咖啡），而是通过腾讯公益、美团公益、水滴筹等平台捐赠给需要帮助的人（&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97.md&#34;&gt;点击&lt;/a&gt;了解捐赠情况）。需要加入QQ学习群的可以扫描下面的二维码，三个群加一个即可，不要重复进群。学习群会为大家提供&lt;strong&gt;学习资源&lt;/strong&gt;和&lt;strong&gt;问题解答&lt;/strong&gt;，如果有&lt;strong&gt;Python体验课&lt;/strong&gt;和&lt;strong&gt;行业公开课&lt;/strong&gt;会提前在群里通知大家，欢迎大家加入。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img src=&#34;https://github.com/jackfrued/mypic/raw/master/20220616120218.JPG&#34; style=&#34;zoom: 75%;&#34;&gt; &#xA;&lt;h3&gt;Python应用领域和职业发展分析&lt;/h3&gt; &#xA;&lt;p&gt;简单的说，Python是一个“优雅”、“明确”、“简单”的编程语言。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;学习曲线低，非专业人士也能上手&lt;/li&gt; &#xA; &lt;li&gt;开源系统，拥有强大的生态圈&lt;/li&gt; &#xA; &lt;li&gt;解释型语言，完美的平台可移植性&lt;/li&gt; &#xA; &lt;li&gt;动态类型语言，支持面向对象和函数式编程&lt;/li&gt; &#xA; &lt;li&gt;代码规范程度高，可读性强&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Python在以下领域都有用武之地。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;后端开发 - Python / Java / Go / PHP&lt;/li&gt; &#xA; &lt;li&gt;DevOps - Python / Shell / Ruby&lt;/li&gt; &#xA; &lt;li&gt;数据采集 - Python / C++ / Java&lt;/li&gt; &#xA; &lt;li&gt;量化交易 - Python / C++ / R&lt;/li&gt; &#xA; &lt;li&gt;数据科学 - Python / R / Julia / Matlab&lt;/li&gt; &#xA; &lt;li&gt;机器学习 - Python / R / C++ / Julia&lt;/li&gt; &#xA; &lt;li&gt;自动化测试 - Python / Shell&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;作为一名Python开发者，根据个人的喜好和职业规划，可以选择的就业领域也非常多。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python后端开发工程师（服务器、云平台、数据接口）&lt;/li&gt; &#xA; &lt;li&gt;Python运维工程师（自动化运维、SRE、DevOps）&lt;/li&gt; &#xA; &lt;li&gt;Python数据分析师（数据分析、商业智能、数字化运营）&lt;/li&gt; &#xA; &lt;li&gt;Python数据挖掘工程师（机器学习、深度学习、算法专家）&lt;/li&gt; &#xA; &lt;li&gt;Python爬虫工程师&lt;/li&gt; &#xA; &lt;li&gt;Python测试工程师（自动化测试、测试开发）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：目前，&lt;strong&gt;数据分析和数据挖掘是非常热门的方向&lt;/strong&gt;，因为不管是互联网行业还是传统行业都已经积累了大量的数据，各行各业都需要数据分析师从已有的数据中发现更多的商业价值，从而为企业的决策提供数据的支撑，这就是所谓的数据驱动决策。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;给初学者的几个建议：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make English as your working language. （让英语成为你的工作语言）&lt;/li&gt; &#xA; &lt;li&gt;Practice makes perfect. （熟能生巧）&lt;/li&gt; &#xA; &lt;li&gt;All experience comes from mistakes. （所有的经验都源于你犯过的错误）&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t be one of the leeches. （不要当伸手党）&lt;/li&gt; &#xA; &lt;li&gt;Either outstanding or out. （要么出众，要么出局）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Day01~15 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-15&#34;&gt;Python语言基础&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;Day01 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-15/01.%E5%88%9D%E8%AF%86Python.md&#34;&gt;初识Python&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python简介 - Python的历史 / Python的优缺点 / Python的应用领域&lt;/li&gt; &#xA; &lt;li&gt;搭建编程环境 - Windows环境 / Linux环境 / MacOS环境&lt;/li&gt; &#xA; &lt;li&gt;从终端运行Python程序 - Hello, world / &lt;code&gt;print&lt;/code&gt;函数 / 运行程序&lt;/li&gt; &#xA; &lt;li&gt;使用IDLE - 交互式环境(REPL) / 编写多行代码 / 运行程序 / 退出IDLE&lt;/li&gt; &#xA; &lt;li&gt;注释 - 注释的作用 / 单行注释 / 多行注释&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Day02 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-15/02.%E8%AF%AD%E8%A8%80%E5%85%83%E7%B4%A0.md&#34;&gt;语言元素&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;程序和进制 - 指令和程序 / 冯诺依曼机 / 二进制和十进制 / 八进制和十六进制&lt;/li&gt; &#xA; &lt;li&gt;变量和类型 - 变量的命名 / 变量的使用 / &lt;code&gt;input&lt;/code&gt;函数 / 检查变量类型 / 类型转换&lt;/li&gt; &#xA; &lt;li&gt;数字和字符串 - 整数 / 浮点数 / 复数 / 字符串 / 字符串基本操作 / 字符编码&lt;/li&gt; &#xA; &lt;li&gt;运算符 - 数学运算符 / 赋值运算符 / 比较运算符 / 逻辑运算符 / 身份运算符 / 运算符的优先级&lt;/li&gt; &#xA; &lt;li&gt;应用案例 - 华氏温度转换成摄氏温度 / 输入圆的半径计算周长和面积 / 输入年份判断是否是闰年&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Day03 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-15/03.%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84.md&#34;&gt;分支结构&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;分支结构的应用场景 - 条件 / 缩进 / 代码块 / 流程图&lt;/li&gt; &#xA; &lt;li&gt;if语句 - 简单的&lt;code&gt;if&lt;/code&gt; / &lt;code&gt;if&lt;/code&gt;-&lt;code&gt;else&lt;/code&gt;结构 / &lt;code&gt;if&lt;/code&gt;-&lt;code&gt;elif&lt;/code&gt;-&lt;code&gt;else&lt;/code&gt;结构 / 嵌套的&lt;code&gt;if&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;应用案例 - 用户身份验证 / 英制单位与公制单位互换 / 掷骰子决定做什么 / 百分制成绩转等级制 / 分段函数求值 / 输入三条边的长度如果能构成三角形就计算周长和面积&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Day04 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-15/04.%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84.md&#34;&gt;循环结构&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;循环结构的应用场景 - 条件 / 缩进 / 代码块 / 流程图&lt;/li&gt; &#xA; &lt;li&gt;while循环 - 基本结构 / &lt;code&gt;break&lt;/code&gt;语句 / &lt;code&gt;continue&lt;/code&gt;语句&lt;/li&gt; &#xA; &lt;li&gt;for循环 - 基本结构 / &lt;code&gt;range&lt;/code&gt;类型 / 循环中的分支结构 / 嵌套的循环 / 提前结束程序&lt;/li&gt; &#xA; &lt;li&gt;应用案例 - 1~100求和 / 判断素数 / 猜数字游戏 / 打印九九表 / 打印三角形图案 / 猴子吃桃 / 百钱百鸡&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Day05 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-15/05.%E6%9E%84%E9%80%A0%E7%A8%8B%E5%BA%8F%E9%80%BB%E8%BE%91.md&#34;&gt;构造程序逻辑&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;经典案例：水仙花数 / 百钱百鸡 / Craps赌博游戏&lt;/li&gt; &#xA; &lt;li&gt;练习题目：斐波那契数列 / 完美数 / 素数&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Day06 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-15/06.%E5%87%BD%E6%95%B0%E5%92%8C%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8.md&#34;&gt;函数和模块的使用&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;函数的作用 - 代码的坏味道 / 用函数封装功能模块&lt;/li&gt; &#xA; &lt;li&gt;定义函数 - &lt;code&gt;def&lt;/code&gt;关键字 / 函数名 / 参数列表 / &lt;code&gt;return&lt;/code&gt;语句 / 调用自定义函数&lt;/li&gt; &#xA; &lt;li&gt;调用函数 - Python内置函数 / 导入模块和函数&lt;/li&gt; &#xA; &lt;li&gt;函数的参数 - 默认参数 / 可变参数 / 关键字参数 / 命名关键字参数&lt;/li&gt; &#xA; &lt;li&gt;函数的返回值 - 没有返回值 / 返回单个值 / 返回多个值&lt;/li&gt; &#xA; &lt;li&gt;作用域问题 - 局部作用域 / 嵌套作用域 / 全局作用域 / 内置作用域 / 和作用域相关的关键字&lt;/li&gt; &#xA; &lt;li&gt;用模块管理函数 - 模块的概念 / 用自定义模块管理函数 / 命名冲突的时候会怎样（同一个模块和不同的模块）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Day07 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-15/07.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.md&#34;&gt;字符串和常用数据结构&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;字符串的使用 - 计算长度 / 下标运算 / 切片 / 常用方法&lt;/li&gt; &#xA; &lt;li&gt;列表基本用法 - 定义列表 / 用下表访问元素 / 下标越界 / 添加元素 / 删除元素 / 修改元素 / 切片 / 循环遍历&lt;/li&gt; &#xA; &lt;li&gt;列表常用操作 - 连接 / 复制(复制元素和复制数组) / 长度 / 排序 / 倒转 / 查找&lt;/li&gt; &#xA; &lt;li&gt;生成列表 - 使用&lt;code&gt;range&lt;/code&gt;创建数字列表 / 生成表达式 / 生成器&lt;/li&gt; &#xA; &lt;li&gt;元组的使用 - 定义元组 / 使用元组中的值 / 修改元组变量 / 元组和列表转换&lt;/li&gt; &#xA; &lt;li&gt;集合基本用法 - 集合和列表的区别 / 创建集合 / 添加元素 / 删除元素 / 清空&lt;/li&gt; &#xA; &lt;li&gt;集合常用操作 - 交集 / 并集 / 差集 / 对称差 / 子集 / 超集&lt;/li&gt; &#xA; &lt;li&gt;字典的基本用法 - 字典的特点 / 创建字典 / 添加元素 / 删除元素 / 取值 / 清空&lt;/li&gt; &#xA; &lt;li&gt;字典常用操作 - &lt;code&gt;keys&lt;/code&gt;方法 / &lt;code&gt;values&lt;/code&gt;方法 / &lt;code&gt;items&lt;/code&gt;方法 / &lt;code&gt;setdefault&lt;/code&gt;方法&lt;/li&gt; &#xA; &lt;li&gt;基础练习 - 跑马灯效果 / 列表找最大元素 / 统计考试成绩的平均分 / Fibonacci数列 / 杨辉三角&lt;/li&gt; &#xA; &lt;li&gt;综合案例 - 双色球选号 / 井字棋&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Day08 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-15/08.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.md&#34;&gt;面向对象编程基础&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;类和对象 - 什么是类 / 什么是对象 / 面向对象其他相关概念&lt;/li&gt; &#xA; &lt;li&gt;定义类 - 基本结构 / 属性和方法 / 构造器 / 析构器 / &lt;code&gt;__str__&lt;/code&gt;方法&lt;/li&gt; &#xA; &lt;li&gt;使用对象 - 创建对象 / 给对象发消息&lt;/li&gt; &#xA; &lt;li&gt;面向对象的四大支柱 - 抽象 / 封装 / 继承 / 多态&lt;/li&gt; &#xA; &lt;li&gt;基础练习 - 定义学生类 / 定义时钟类 / 定义图形类 / 定义汽车类&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Day09 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-15/09.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6.md&#34;&gt;面向对象进阶&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;属性 - 类属性 / 实例属性 / 属性访问器 / 属性修改器 / 属性删除器 / 使用&lt;code&gt;__slots__&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;类中的方法 - 实例方法 / 类方法 / 静态方法&lt;/li&gt; &#xA; &lt;li&gt;运算符重载 - &lt;code&gt;__add__&lt;/code&gt; / &lt;code&gt;__sub__&lt;/code&gt; / &lt;code&gt;__or__&lt;/code&gt; /&lt;code&gt;__getitem__&lt;/code&gt; / &lt;code&gt;__setitem__&lt;/code&gt; / &lt;code&gt;__len__&lt;/code&gt; / &lt;code&gt;__repr__&lt;/code&gt; / &lt;code&gt;__gt__&lt;/code&gt; / &lt;code&gt;__lt__&lt;/code&gt; / &lt;code&gt;__le__&lt;/code&gt; / &lt;code&gt;__ge__&lt;/code&gt; / &lt;code&gt;__eq__&lt;/code&gt; / &lt;code&gt;__ne__&lt;/code&gt; / &lt;code&gt;__contains__&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;类(的对象)之间的关系 - 关联 / 继承 / 依赖&lt;/li&gt; &#xA; &lt;li&gt;继承和多态 - 什么是继承 / 继承的语法 / 调用父类方法 / 方法重写 / 类型判定 / 多重继承 / 菱形继承(钻石继承)和C3算法&lt;/li&gt; &#xA; &lt;li&gt;综合案例 - 工资结算系统 / 图书自动折扣系统 / 自定义分数类&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Day10 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-15/10.%E5%9B%BE%E5%BD%A2%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E5%92%8C%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91.md&#34;&gt;图形用户界面和游戏开发&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;使用&lt;code&gt;tkinter&lt;/code&gt;开发GUI程序&lt;/li&gt; &#xA; &lt;li&gt;使用&lt;code&gt;pygame&lt;/code&gt;三方库开发游戏应用&lt;/li&gt; &#xA; &lt;li&gt;“大球吃小球”游戏&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Day11 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-15/11.%E6%96%87%E4%BB%B6%E5%92%8C%E5%BC%82%E5%B8%B8.md&#34;&gt;文件和异常&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;读文件 - 读取整个文件 / 逐行读取 / 文件路径&lt;/li&gt; &#xA; &lt;li&gt;写文件 - 覆盖写入 / 追加写入 / 文本文件 / 二进制文件&lt;/li&gt; &#xA; &lt;li&gt;异常处理 - 异常机制的重要性 / &lt;code&gt;try&lt;/code&gt;-&lt;code&gt;except&lt;/code&gt;代码块 / &lt;code&gt;else&lt;/code&gt;代码块 / &lt;code&gt;finally&lt;/code&gt;代码块 / 内置异常类型 / 异常栈 / &lt;code&gt;raise&lt;/code&gt;语句&lt;/li&gt; &#xA; &lt;li&gt;数据持久化 - CSV文件概述 / &lt;code&gt;csv&lt;/code&gt;模块的应用 / JSON数据格式 / &lt;code&gt;json&lt;/code&gt;模块的应用&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Day12 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-15/12.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.md&#34;&gt;字符串和正则表达式&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;字符串高级操作 - 转义字符 / 原始字符串 / 多行字符串 / &lt;code&gt;in&lt;/code&gt;和&lt;code&gt;not in&lt;/code&gt;运算符 / &lt;code&gt;is_xxx&lt;/code&gt;方法 / &lt;code&gt;join&lt;/code&gt;和&lt;code&gt;split&lt;/code&gt;方法 / &lt;code&gt;strip&lt;/code&gt;相关方法 / &lt;code&gt;pyperclip&lt;/code&gt;模块 / 不变字符串和可变字符串 / &lt;code&gt;StringIO&lt;/code&gt;的使用&lt;/li&gt; &#xA; &lt;li&gt;正则表达式入门 - 正则表达式的作用 / 元字符 / 转义 / 量词 / 分组 / 零宽断言 /贪婪匹配与惰性匹配懒惰 / 使用&lt;code&gt;re&lt;/code&gt;模块实现正则表达式操作（匹配、搜索、替换、捕获）&lt;/li&gt; &#xA; &lt;li&gt;使用正则表达式 - &lt;code&gt;re&lt;/code&gt;模块 / &lt;code&gt;compile&lt;/code&gt;函数 / &lt;code&gt;group&lt;/code&gt;和&lt;code&gt;groups&lt;/code&gt;方法 / &lt;code&gt;match&lt;/code&gt;方法 / &lt;code&gt;search&lt;/code&gt;方法 / &lt;code&gt;findall&lt;/code&gt;和&lt;code&gt;finditer&lt;/code&gt;方法 / &lt;code&gt;sub&lt;/code&gt;和&lt;code&gt;subn&lt;/code&gt;方法 / &lt;code&gt;split&lt;/code&gt;方法&lt;/li&gt; &#xA; &lt;li&gt;应用案例 - 使用正则表达式验证输入的字符串&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Day13 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-15/13.%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B.md&#34;&gt;进程和线程&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;进程和线程的概念 - 什么是进程 / 什么是线程 / 多线程的应用场景&lt;/li&gt; &#xA; &lt;li&gt;使用进程 - &lt;code&gt;fork&lt;/code&gt;函数 / &lt;code&gt;multiprocessing&lt;/code&gt;模块 / 进程池 / 进程间通信&lt;/li&gt; &#xA; &lt;li&gt;使用线程 - &lt;code&gt;threading&lt;/code&gt;模块 / &lt;code&gt;Thread&lt;/code&gt;类 / &lt;code&gt;RLock&lt;/code&gt;类 / &lt;code&gt;Condition&lt;/code&gt;类 / 线程池&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Day14 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-15/14.%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8%E5%92%8C%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91.md&#34;&gt;网络编程入门和网络应用开发&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;计算机网络基础 - 计算机网络发展史 / “TCP-IP”模型 / IP地址 / 端口 / 协议 / 其他相关概念&lt;/li&gt; &#xA; &lt;li&gt;网络应用模式 - “客户端-服务器”模式 / “浏览器-服务器”模式&lt;/li&gt; &#xA; &lt;li&gt;基于HTTP协议访问网络资源 - 网络API概述 / 访问URL / &lt;code&gt;requests&lt;/code&gt;三方库 / 解析JSON格式数据&lt;/li&gt; &#xA; &lt;li&gt;Python网络编程 - 套接字的概念 / &lt;code&gt;socket&lt;/code&gt;模块 / &lt;code&gt;socket&lt;/code&gt;函数 / 创建TCP服务器 / 创建TCP客户端 / 创建UDP服务器 / 创建UDP客户端&lt;/li&gt; &#xA; &lt;li&gt;电子邮件 - SMTP协议 / POP3协议 / IMAP协议 / &lt;code&gt;smtplib&lt;/code&gt;模块 / &lt;code&gt;poplib&lt;/code&gt;模块 / &lt;code&gt;imaplib&lt;/code&gt;模块&lt;/li&gt; &#xA; &lt;li&gt;短信服务 - 调用短信服务网关&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Day15 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day01-15/15.%E5%9B%BE%E5%83%8F%E5%92%8C%E5%8A%9E%E5%85%AC%E6%96%87%E6%A1%A3%E5%A4%84%E7%90%86.md&#34;&gt;图像和文档处理&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;用Pillow处理图片 - 图片读写 / 图片合成 / 几何变换 / 色彩转换 / 滤镜效果&lt;/li&gt; &#xA; &lt;li&gt;读写Word文档 - 文本内容的处理 / 段落 / 页眉和页脚 / 样式的处理&lt;/li&gt; &#xA; &lt;li&gt;读写Excel文件 - &lt;code&gt;xlrd&lt;/code&gt; / &lt;code&gt;xlwt&lt;/code&gt; / &lt;code&gt;openpyxl&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Day16~Day20 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day16-20/16-20.Python%E8%AF%AD%E8%A8%80%E8%BF%9B%E9%98%B6.md&#34;&gt;Python语言进阶 &lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;常用数据结构&lt;/li&gt; &#xA; &lt;li&gt;函数的高级用法 - “一等公民” / 高阶函数 / Lambda函数 / 作用域和闭包 / 装饰器&lt;/li&gt; &#xA; &lt;li&gt;面向对象高级知识 - “三大支柱” / 类与类之间的关系 / 垃圾回收 / 魔术属性和方法 / 混入 / 元类 / 面向对象设计原则 / GoF设计模式&lt;/li&gt; &#xA; &lt;li&gt;迭代器和生成器 - 相关魔术方法 / 创建生成器的两种方式 /&lt;/li&gt; &#xA; &lt;li&gt;并发和异步编程 - 多线程 / 多进程 / 异步IO / &lt;code&gt;async&lt;/code&gt;和&lt;code&gt;awai&lt;/code&gt;t&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Day21~30 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day21-30/21-30.Web%E5%89%8D%E7%AB%AF%E6%A6%82%E8%BF%B0.md&#34;&gt;Web前端入门&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;用HTML标签承载页面内容&lt;/li&gt; &#xA; &lt;li&gt;用CSS渲染页面&lt;/li&gt; &#xA; &lt;li&gt;用JavaScript处理交互式行为&lt;/li&gt; &#xA; &lt;li&gt;jQuery入门和提高&lt;/li&gt; &#xA; &lt;li&gt;Vue.js入门&lt;/li&gt; &#xA; &lt;li&gt;Element的使用&lt;/li&gt; &#xA; &lt;li&gt;Bootstrap的使用&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Day31~35 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day31-35/31-35.%E7%8E%A9%E8%BD%ACLinux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.md&#34;&gt;玩转Linux操作系统&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;操作系统发展史和Linux概述&lt;/li&gt; &#xA; &lt;li&gt;Linux基础命令&lt;/li&gt; &#xA; &lt;li&gt;Linux中的实用程序&lt;/li&gt; &#xA; &lt;li&gt;Linux的文件系统&lt;/li&gt; &#xA; &lt;li&gt;Vim编辑器的应用&lt;/li&gt; &#xA; &lt;li&gt;环境变量和Shell编程&lt;/li&gt; &#xA; &lt;li&gt;软件的安装和服务的配置&lt;/li&gt; &#xA; &lt;li&gt;网络访问和管理&lt;/li&gt; &#xA; &lt;li&gt;其他相关内容&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Day36~40 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day36-40&#34;&gt;数据库基础和进阶&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;关系型数据库概述&lt;/li&gt; &#xA; &lt;li&gt;MySQL的安装和使用&lt;/li&gt; &#xA; &lt;li&gt;SQL的使用&lt;/li&gt; &#xA; &lt;li&gt;DDL - 数据定义语言 - &lt;code&gt;create&lt;/code&gt; / &lt;code&gt;drop&lt;/code&gt; / &lt;code&gt;alter&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;DML - 数据操作语言 - &lt;code&gt;insert&lt;/code&gt; / &lt;code&gt;delete&lt;/code&gt; / &lt;code&gt;update&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;DQL - 数据查询语言 - &lt;code&gt;select&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;DCL - 数据控制语言 - &lt;code&gt;grant&lt;/code&gt; / &lt;code&gt;revoke&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;MySQL新特性&lt;/li&gt; &#xA; &lt;li&gt;窗口函数的应用&lt;/li&gt; &#xA; &lt;li&gt;JSON数据类型&lt;/li&gt; &#xA; &lt;li&gt;相关知识&lt;/li&gt; &#xA; &lt;li&gt;数据完整性和一致性&lt;/li&gt; &#xA; &lt;li&gt;视图、函数、过程、触发器&lt;/li&gt; &#xA; &lt;li&gt;事务和锁&lt;/li&gt; &#xA; &lt;li&gt;执行计划和索引&lt;/li&gt; &#xA; &lt;li&gt;范式理论和反范式设计&lt;/li&gt; &#xA; &lt;li&gt;在Python中操作MySQL&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Day41~55 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day41-55&#34;&gt;实战Django&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;Day41 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day41-55/41.Django%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B.md&#34;&gt;Django快速上手&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Web应用工作机制&lt;/li&gt; &#xA; &lt;li&gt;HTTP请求和响应&lt;/li&gt; &#xA; &lt;li&gt;Django框架概述&lt;/li&gt; &#xA; &lt;li&gt;5分钟快速上手&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Day42 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day41-55/42.%E6%B7%B1%E5%85%A5%E6%A8%A1%E5%9E%8B.md&#34;&gt;深入模型&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;关系型数据库配置&lt;/li&gt; &#xA; &lt;li&gt;使用ORM完成对模型的CRUD操作&lt;/li&gt; &#xA; &lt;li&gt;管理后台的使用&lt;/li&gt; &#xA; &lt;li&gt;Django模型最佳实践&lt;/li&gt; &#xA; &lt;li&gt;模型定义参考&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Day43 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day41-55/43.%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%92%8CAjax%E8%AF%B7%E6%B1%82.md&#34;&gt;静态资源和Ajax请求&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;加载静态资源&lt;/li&gt; &#xA; &lt;li&gt;Ajax概述&lt;/li&gt; &#xA; &lt;li&gt;用Ajax实现投票功能&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Day44 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day41-55/44.Cookie%E5%92%8CSession.md&#34;&gt;Cookie和Session&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;实现用户跟踪&lt;/li&gt; &#xA; &lt;li&gt;cookie和session的关系&lt;/li&gt; &#xA; &lt;li&gt;Django框架对session的支持&lt;/li&gt; &#xA; &lt;li&gt;视图函数中的cookie读写操作&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Day45 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day41-55/45.%E5%88%B6%E4%BD%9C%E6%8A%A5%E8%A1%A8.md&#34;&gt;报表和日志&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;通过&lt;code&gt;HttpResponse&lt;/code&gt;修改响应头&lt;/li&gt; &#xA; &lt;li&gt;使用&lt;code&gt;StreamingHttpResponse&lt;/code&gt;处理大文件&lt;/li&gt; &#xA; &lt;li&gt;使用&lt;code&gt;xlwt&lt;/code&gt;生成Excel报表&lt;/li&gt; &#xA; &lt;li&gt;使用&lt;code&gt;reportlab&lt;/code&gt;生成PDF报表&lt;/li&gt; &#xA; &lt;li&gt;使用ECharts生成前端图表&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Day46 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day41-55/46.%E6%97%A5%E5%BF%97%E5%92%8C%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E6%A0%8F.md&#34;&gt;日志和调试工具栏&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;配置日志&lt;/li&gt; &#xA; &lt;li&gt;配置Django-Debug-Toolbar&lt;/li&gt; &#xA; &lt;li&gt;优化ORM代码&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Day47 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day41-55/47.%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%BA%94%E7%94%A8.md&#34;&gt;中间件的应用&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;什么是中间件&lt;/li&gt; &#xA; &lt;li&gt;Django框架内置的中间件&lt;/li&gt; &#xA; &lt;li&gt;自定义中间件及其应用场景&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Day48 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day41-55/48.%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8.md&#34;&gt;前后端分离开发入门&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;返回JSON格式的数据&lt;/li&gt; &#xA; &lt;li&gt;用Vue.js渲染页面&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Day49 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day41-55/49.RESTful%E6%9E%B6%E6%9E%84%E5%92%8CDRF%E5%85%A5%E9%97%A8.md&#34;&gt;RESTful架构和DRF入门&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Day50 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day41-55/50.RESTful%E6%9E%B6%E6%9E%84%E5%92%8CDRF%E8%BF%9B%E9%98%B6.md&#34;&gt;RESTful架构和DRF进阶&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Day51 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day41-55/51.%E4%BD%BF%E7%94%A8%E7%BC%93%E5%AD%98.md&#34;&gt;使用缓存&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;网站优化第一定律&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;在Django项目中使用Redis提供缓存服务&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;在视图函数中读写缓存&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;使用装饰器实现页面缓存&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;为数据接口提供缓存服务&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Day52 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day41-55/52.%E6%8E%A5%E5%85%A5%E4%B8%89%E6%96%B9%E5%B9%B3%E5%8F%B0.md&#34;&gt;接入三方平台&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;文件上传表单控件和图片文件预览&lt;/li&gt; &#xA; &lt;li&gt;服务器端如何处理上传的文件&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Day53 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day41-55/53.%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1.md&#34;&gt;异步任务和定时任务&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;网站优化第二定律&lt;/li&gt; &#xA; &lt;li&gt;配置消息队列服务&lt;/li&gt; &#xA; &lt;li&gt;在项目中使用Celery实现任务异步化&lt;/li&gt; &#xA; &lt;li&gt;在项目中使用Celery实现定时任务&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Day54 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day41-55/54.%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.md&#34;&gt;单元测试&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Day55 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day41-55/55.%E9%A1%B9%E7%9B%AE%E4%B8%8A%E7%BA%BF.md&#34;&gt;项目上线&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python中的单元测试&lt;/li&gt; &#xA; &lt;li&gt;Django框架对单元测试的支持&lt;/li&gt; &#xA; &lt;li&gt;使用版本控制系统&lt;/li&gt; &#xA; &lt;li&gt;配置和使用uWSGI&lt;/li&gt; &#xA; &lt;li&gt;动静分离和Nginx配置&lt;/li&gt; &#xA; &lt;li&gt;配置HTTPS&lt;/li&gt; &#xA; &lt;li&gt;配置域名解析&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Day56~60 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day56-60/56-60.%E7%94%A8FastAPI%E5%BC%80%E5%8F%91%E6%95%B0%E6%8D%AE%E6%8E%A5%E5%8F%A3.md&#34;&gt;用FastAPI开发数据接口&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FastAPI五分钟上手&lt;/li&gt; &#xA; &lt;li&gt;请求和响应&lt;/li&gt; &#xA; &lt;li&gt;接入关系型数据库&lt;/li&gt; &#xA; &lt;li&gt;依赖注入&lt;/li&gt; &#xA; &lt;li&gt;中间件&lt;/li&gt; &#xA; &lt;li&gt;异步化&lt;/li&gt; &#xA; &lt;li&gt;虚拟化部署（Docker）&lt;/li&gt; &#xA; &lt;li&gt;项目实战：车辆违章查询项目&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Day61~65 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day61-65&#34;&gt;爬虫开发&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;Day61 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day61-65/61.%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E6%A6%82%E8%BF%B0.md&#34;&gt;网络数据采集概述&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;网络爬虫的概念及其应用领域&lt;/li&gt; &#xA; &lt;li&gt;网络爬虫的合法性探讨&lt;/li&gt; &#xA; &lt;li&gt;开发网络爬虫的相关工具&lt;/li&gt; &#xA; &lt;li&gt;一个爬虫程序的构成&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Day62 - 数据抓取和解析&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day61-65/62.%E7%94%A8Python%E8%8E%B7%E5%8F%96%E7%BD%91%E7%BB%9C%E8%B5%84%E6%BA%90-1.md&#34;&gt;使用&lt;code&gt;requests&lt;/code&gt;三方库实现数据抓取&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day61-65/62.%E7%94%A8Python%E8%A7%A3%E6%9E%90HTML%E9%A1%B5%E9%9D%A2-2.md&#34;&gt;页面解析的三种方式&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;正则表达式解析&lt;/li&gt; &#xA;   &lt;li&gt;XPath解析&lt;/li&gt; &#xA;   &lt;li&gt;CSS选择器解析&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Day63 - Python中的并发编程&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day61-65/63.Python%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-1.md&#34;&gt;多线程&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day61-65/63.Python%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-2.md&#34;&gt;多进程&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day61-65/63.Python%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-3.md&#34;&gt;异步I/O&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Day64 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day61-65/64.%E4%BD%BF%E7%94%A8Selenium%E6%8A%93%E5%8F%96%E7%BD%91%E9%A1%B5%E5%8A%A8%E6%80%81%E5%86%85%E5%AE%B9.md&#34;&gt;使用Selenium抓取网页动态内容&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Day65 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day61-65/65.%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6Scrapy%E7%AE%80%E4%BB%8B.md&#34;&gt;爬虫框架Scrapy简介&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h3&gt;Day66~80 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day66-80&#34;&gt;数据分析&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;Day66 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day66-80/66.%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%A6%82%E8%BF%B0.md&#34;&gt;数据分析概述&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Day67 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day66-80/67.%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87.md&#34;&gt;环境准备&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Day68 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day66-80/68.NumPy%E7%9A%84%E5%BA%94%E7%94%A8-1.md&#34;&gt;NumPy的应用-1&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Day69 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day66-80/69.NumPy%E7%9A%84%E5%BA%94%E7%94%A8-2.md&#34;&gt;NumPy的应用-2&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Day70 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day66-80/70.NumPy%E7%9A%84%E5%BA%94%E7%94%A8-3.md&#34;&gt;NumPy的应用-3&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Day71 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day66-80/71.NumPy%E7%9A%84%E5%BA%94%E7%94%A8-4.md&#34;&gt;NumPy的应用-4&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Day72 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day66-80/72.%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BApandas-1.md&#34;&gt;深入浅出pandas-1&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Day73 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day66-80/73.%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BApandas-2.md&#34;&gt;深入浅出pandas-2&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Day74 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day66-80/74.%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BApandas-3.md&#34;&gt;深入浅出pandas-3&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Day75 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day66-80/75.%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BApandas-4.md&#34;&gt;深入浅出pandas-4&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Day76 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day66-80/76.%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BApandas-5.md&#34;&gt;深入浅出pandas-5&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Day77 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day66-80/77.%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BApandas-6.md&#34;&gt;深入浅出pandas-6&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Day78 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day66-80/78.%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96-1.md&#34;&gt;数据可视化-1&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Day79 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day66-80/79.%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96-2.md&#34;&gt;数据可视化-2&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Day80 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day66-80/80.%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96-3.md&#34;&gt;数据可视化-3&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h3&gt;Day81~90 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day81-90&#34;&gt;机器学习和深度学习&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;Day81 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day81-90/81.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80.md&#34;&gt;机器学习基础&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Day82 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day81-90/82.k%E6%9C%80%E8%BF%91%E9%82%BB%E5%88%86%E7%B1%BB.md&#34;&gt;k最近邻分类&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Day83 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day81-90/83.%E5%86%B3%E7%AD%96%E6%A0%91.md&#34;&gt;决策树&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Day84 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day81-90/84.%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB.md&#34;&gt;贝叶斯分类&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Day85 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day81-90/85.%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA.md&#34;&gt;支持向量机&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Day86 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day81-90/86.K-%E5%9D%87%E5%80%BC%E8%81%9A%E7%B1%BB.md&#34;&gt;K-均值聚类&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Day87 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day81-90/87.%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90.md&#34;&gt;回归分析&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Day88 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day81-90/88.%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8.md&#34;&gt;深度学习入门&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Day89 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day81-90/89.PyTorch%E6%A6%82%E8%BF%B0.md&#34;&gt;PyTorch概述&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Day90 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day81-90/90.PyTorch%E5%AE%9E%E6%88%98.md&#34;&gt;PyTorch实战&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h3&gt;Day91~100 - &lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day91-100&#34;&gt;团队项目开发&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;第91天：&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day91-100/91.%E5%9B%A2%E9%98%9F%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.md&#34;&gt;团队项目开发的问题和解决方案&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;软件过程模型&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;经典过程模型（瀑布模型）&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;可行性分析（研究做还是不做），输出《可行性分析报告》。&lt;/li&gt; &#xA;     &lt;li&gt;需求分析（研究做什么），输出《需求规格说明书》和产品界面原型图。&lt;/li&gt; &#xA;     &lt;li&gt;概要设计和详细设计，输出概念模型图（ER图）、物理模型图、类图、时序图等。&lt;/li&gt; &#xA;     &lt;li&gt;编码 / 测试。&lt;/li&gt; &#xA;     &lt;li&gt;上线 / 维护。&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;p&gt;瀑布模型最大的缺点是无法拥抱需求变化，整套流程结束后才能看到产品，团队士气低落。&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;敏捷开发（Scrum）- 产品所有者、Scrum Master、研发人员 - Sprint&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;产品的Backlog（用户故事、产品原型）。&lt;/li&gt; &#xA;     &lt;li&gt;计划会议（评估和预算）。&lt;/li&gt; &#xA;     &lt;li&gt;日常开发（站立会议、番茄工作法、结对编程、测试先行、代码重构……）。&lt;/li&gt; &#xA;     &lt;li&gt;修复bug（问题描述、重现步骤、测试人员、被指派人）。&lt;/li&gt; &#xA;     &lt;li&gt;发布版本。&lt;/li&gt; &#xA;     &lt;li&gt;评审会议（Showcase，用户需要参与）。&lt;/li&gt; &#xA;     &lt;li&gt;回顾会议（对当前迭代周期做一个总结）。&lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;补充：敏捷软件开发宣言&lt;/p&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;strong&gt;个体和互动&lt;/strong&gt; 高于 流程和工具&lt;/li&gt; &#xA;      &lt;li&gt;&lt;strong&gt;工作的软件&lt;/strong&gt; 高于 详尽的文档&lt;/li&gt; &#xA;      &lt;li&gt;&lt;strong&gt;客户合作&lt;/strong&gt; 高于 合同谈判&lt;/li&gt; &#xA;      &lt;li&gt;&lt;strong&gt;响应变化&lt;/strong&gt; 高于 遵循计划&lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/blockquote&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/res/agile-scrum-sprint-cycle.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;角色：产品所有者（决定做什么，能对需求拍板的人）、团队负责人（解决各种问题，专注如何更好的工作，屏蔽外部对开发团队的影响）、开发团队（项目执行人员，具体指开发人员和测试人员）。&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;准备工作：商业案例和资金、合同、憧憬、初始产品需求、初始发布计划、入股、组建团队。&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;敏捷团队通常人数为8-10人。&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;工作量估算：将开发任务量化，包括原型、Logo设计、UI设计、前端开发等，尽量把每个工作分解到最小任务量，最小任务量标准为工作时间不能超过两天，然后估算总体项目时间。把每个任务都贴在看板上面，看板上分三部分：to do（待完成）、in progress（进行中）和done（已完成）。&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;项目团队组建&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;团队的构成和角色&lt;/p&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;说明：谢谢&lt;strong&gt;付祥英&lt;/strong&gt;女士帮助我绘制了下面这张精美的公司组织架构图。&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/res/company_architecture.png&#34; alt=&#34;company_architecture&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;编程规范和代码审查（&lt;code&gt;flake8&lt;/code&gt;、&lt;code&gt;pylint&lt;/code&gt;）&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/res/pylint.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Python中的一些“惯例”（请参考&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Python%E6%83%AF%E4%BE%8B.md&#34;&gt;《Python惯例-如何编写Pythonic的代码》&lt;/a&gt;）&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;影响代码可读性的原因：&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;代码注释太少或者没有注释&lt;/li&gt; &#xA;     &lt;li&gt;代码破坏了语言的最佳实践&lt;/li&gt; &#xA;     &lt;li&gt;反模式编程（意大利面代码、复制-黏贴编程、自负编程、……）&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;团队开发工具介绍&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;版本控制：Git、Mercury&lt;/li&gt; &#xA;   &lt;li&gt;缺陷管理：&lt;a href=&#34;https://about.gitlab.com/&#34;&gt;Gitlab&lt;/a&gt;、&lt;a href=&#34;http://www.redmine.org.cn/&#34;&gt;Redmine&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;敏捷闭环工具：&lt;a href=&#34;https://www.zentao.net/&#34;&gt;禅道&lt;/a&gt;、&lt;a href=&#34;https://www.atlassian.com/software/jira/features&#34;&gt;JIRA&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;持续集成：&lt;a href=&#34;https://jenkins.io/&#34;&gt;Jenkins&lt;/a&gt;、&lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis-CI&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;请参考&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day91-100/91.%E5%9B%A2%E9%98%9F%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.md&#34;&gt;《团队项目开发的问题和解决方案》&lt;/a&gt;。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;项目选题和理解业务&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;选题范围设定&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;CMS（用户端）：新闻聚合网站、问答/分享社区、影评/书评网站等。&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;MIS（用户端+管理端）：KMS、KPI考核系统、HRS、CRM系统、供应链系统、仓储管理系统等。&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;App后台（管理端+数据接口）：二手交易类、报刊杂志类、小众电商类、新闻资讯类、旅游类、社交类、阅读类等。&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;其他类型：自身行业背景和工作经验、业务容易理解和把控。&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;需求理解、模块划分和任务分配&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;需求理解：头脑风暴和竞品分析。&lt;/li&gt; &#xA;   &lt;li&gt;模块划分：画思维导图（XMind），每个模块是一个枝节点，每个具体的功能是一个叶节点（用动词表述），需要确保每个叶节点无法再生出新节点，确定每个叶子节点的重要性、优先级和工作量。&lt;/li&gt; &#xA;   &lt;li&gt;任务分配：由项目负责人根据上面的指标为每个团队成员分配任务。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/res/requirements_by_xmind.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;制定项目进度表（每日更新）&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;模块&lt;/th&gt; &#xA;     &lt;th&gt;功能&lt;/th&gt; &#xA;     &lt;th&gt;人员&lt;/th&gt; &#xA;     &lt;th&gt;状态&lt;/th&gt; &#xA;     &lt;th&gt;完成&lt;/th&gt; &#xA;     &lt;th&gt;工时&lt;/th&gt; &#xA;     &lt;th&gt;计划开始&lt;/th&gt; &#xA;     &lt;th&gt;实际开始&lt;/th&gt; &#xA;     &lt;th&gt;计划结束&lt;/th&gt; &#xA;     &lt;th&gt;实际结束&lt;/th&gt; &#xA;     &lt;th&gt;备注&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;评论&lt;/td&gt; &#xA;     &lt;td&gt;添加评论&lt;/td&gt; &#xA;     &lt;td&gt;王大锤&lt;/td&gt; &#xA;     &lt;td&gt;正在进行&lt;/td&gt; &#xA;     &lt;td&gt;50%&lt;/td&gt; &#xA;     &lt;td&gt;4&lt;/td&gt; &#xA;     &lt;td&gt;2018/8/7&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td&gt;2018/8/7&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td&gt;删除评论&lt;/td&gt; &#xA;     &lt;td&gt;王大锤&lt;/td&gt; &#xA;     &lt;td&gt;等待&lt;/td&gt; &#xA;     &lt;td&gt;0%&lt;/td&gt; &#xA;     &lt;td&gt;2&lt;/td&gt; &#xA;     &lt;td&gt;2018/8/7&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td&gt;2018/8/7&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td&gt;查看评论&lt;/td&gt; &#xA;     &lt;td&gt;白元芳&lt;/td&gt; &#xA;     &lt;td&gt;正在进行&lt;/td&gt; &#xA;     &lt;td&gt;20%&lt;/td&gt; &#xA;     &lt;td&gt;4&lt;/td&gt; &#xA;     &lt;td&gt;2018/8/7&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td&gt;2018/8/7&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td&gt;需要进行代码审查&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td&gt;评论投票&lt;/td&gt; &#xA;     &lt;td&gt;白元芳&lt;/td&gt; &#xA;     &lt;td&gt;等待&lt;/td&gt; &#xA;     &lt;td&gt;0%&lt;/td&gt; &#xA;     &lt;td&gt;4&lt;/td&gt; &#xA;     &lt;td&gt;2018/8/8&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td&gt;2018/8/8&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;OOAD和数据库设计&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;UML（统一建模语言）的类图&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/res/uml-class-diagram.png&#34; alt=&#34;uml&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;通过模型创建表（正向工程），例如在Django项目中可以通过下面的命令创建二维表。&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;python manage.py makemigrations app&#xA;python manage.py migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;使用PowerDesigner绘制物理模型图。&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/res/power-designer-pdm.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;通过数据表创建模型（反向工程），例如在Django项目中可以通过下面的命令生成模型。&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;python manage.py inspectdb &amp;gt; app/models.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;第92天：&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day91-100/92.Docker%E5%AE%B9%E5%99%A8%E8%AF%A6%E8%A7%A3.md&#34;&gt;Docker容器详解&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Docker简介&lt;/li&gt; &#xA; &lt;li&gt;安装Docker&lt;/li&gt; &#xA; &lt;li&gt;使用Docker创建容器（Nginx、MySQL、Redis、Gitlab、Jenkins）&lt;/li&gt; &#xA; &lt;li&gt;构建Docker镜像（Dockerfile的编写和相关指令）&lt;/li&gt; &#xA; &lt;li&gt;容器编排（Docker-compose）&lt;/li&gt; &#xA; &lt;li&gt;集群管理（Kubernetes）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;第93天：&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day91-100/93.MySQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.md&#34;&gt;MySQL性能优化&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;第94天：&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day91-100/94.%E7%BD%91%E7%BB%9CAPI%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.md&#34;&gt;网络API接口设计&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;第95天：[使用Django开发商业项目](./Day91-100/95.使用Django开发商业项 目.md)&lt;/h4&gt; &#xA;&lt;h5&gt;项目开发中的公共问题&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;数据库的配置（多数据库、主从复制、数据库路由）&lt;/li&gt; &#xA; &lt;li&gt;缓存的配置（分区缓存、键设置、超时设置、主从复制、故障恢复（哨兵））&lt;/li&gt; &#xA; &lt;li&gt;日志的配置&lt;/li&gt; &#xA; &lt;li&gt;分析和调试（Django-Debug-ToolBar）&lt;/li&gt; &#xA; &lt;li&gt;好用的Python模块（日期计算、图像处理、数据加密、三方API）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;REST API设计&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;RESTful架构 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2011/09/restful.html&#34;&gt;理解RESTful架构&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2014/05/restful_api.html&#34;&gt;RESTful API设计指南&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2018/10/restful-api-best-practices.html&#34;&gt;RESTful API最佳实践&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;API接口文档的撰写 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://rap2.taobao.org/&#34;&gt;RAP2&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://yapi.demo.qunar.com/&#34;&gt;YAPI&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.django-rest-framework.org/&#34;&gt;django-REST-framework&lt;/a&gt;的应用&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;项目中的重点难点剖析&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;使用缓存缓解数据库压力 - Redis&lt;/li&gt; &#xA; &lt;li&gt;使用消息队列做解耦合和削峰 - Celery + RabbitMQ&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;第96天：&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day91-100/96.%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%92%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95.md&#34;&gt;软件测试和自动化测试&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h5&gt;单元测试&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;测试的种类&lt;/li&gt; &#xA; &lt;li&gt;编写单元测试（&lt;code&gt;unittest&lt;/code&gt;、&lt;code&gt;pytest&lt;/code&gt;、&lt;code&gt;nose2&lt;/code&gt;、&lt;code&gt;tox&lt;/code&gt;、&lt;code&gt;ddt&lt;/code&gt;、……）&lt;/li&gt; &#xA; &lt;li&gt;测试覆盖率（&lt;code&gt;coverage&lt;/code&gt;）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;Django项目部署&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;部署前的准备工作 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;关键设置（SECRET_KEY / DEBUG / ALLOWED_HOSTS / 缓存 / 数据库）&lt;/li&gt; &#xA;   &lt;li&gt;HTTPS / CSRF_COOKIE_SECUR / SESSION_COOKIE_SECURE&lt;/li&gt; &#xA;   &lt;li&gt;日志相关配置&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Linux常用命令回顾&lt;/li&gt; &#xA; &lt;li&gt;Linux常用服务的安装和配置&lt;/li&gt; &#xA; &lt;li&gt;uWSGI/Gunicorn和Nginx的使用 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Gunicorn和uWSGI的比较 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;对于不需要大量定制化的简单应用程序，Gunicorn是一个不错的选择，uWSGI的学习曲线比Gunicorn要陡峭得多，Gunicorn的默认参数就已经能够适应大多数应用程序。&lt;/li&gt; &#xA;     &lt;li&gt;uWSGI支持异构部署。&lt;/li&gt; &#xA;     &lt;li&gt;由于Nginx本身支持uWSGI，在线上一般都将Nginx和uWSGI捆绑在一起部署，而且uWSGI属于功能齐全且高度定制的WSGI中间件。&lt;/li&gt; &#xA;     &lt;li&gt;在性能上，Gunicorn和uWSGI其实表现相当。&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;使用虚拟化技术（Docker）部署测试环境和生产环境&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;性能测试&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;AB的使用&lt;/li&gt; &#xA; &lt;li&gt;SQLslap的使用&lt;/li&gt; &#xA; &lt;li&gt;sysbench的使用&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;自动化测试&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;使用Shell和Python进行自动化测试&lt;/li&gt; &#xA; &lt;li&gt;使用Selenium实现自动化测试 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Selenium IDE&lt;/li&gt; &#xA;   &lt;li&gt;Selenium WebDriver&lt;/li&gt; &#xA;   &lt;li&gt;Selenium Remote Control&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;测试工具Robot Framework介绍&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;第97天：&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day91-100/97.%E7%94%B5%E5%95%86%E7%BD%91%E7%AB%99%E6%8A%80%E6%9C%AF%E8%A6%81%E7%82%B9%E5%89%96%E6%9E%90.md&#34;&gt;电商网站技术要点剖析&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;第98天：&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day91-100/98.%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8A%E7%BA%BF%E5%92%8C%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98.md&#34;&gt;项目部署上线和性能调优&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;MySQL数据库调优&lt;/li&gt; &#xA; &lt;li&gt;Web服务器性能优化 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Nginx负载均衡配置&lt;/li&gt; &#xA;   &lt;li&gt;Keepalived实现高可用&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;代码性能调优 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;多线程&lt;/li&gt; &#xA;   &lt;li&gt;异步化&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;静态资源访问优化 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;云存储&lt;/li&gt; &#xA;   &lt;li&gt;CDN&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;第99天：&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day91-100/99.%E9%9D%A2%E8%AF%95%E4%B8%AD%E7%9A%84%E5%85%AC%E5%85%B1%E9%97%AE%E9%A2%98.md&#34;&gt;面试中的公共问题&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;第100天：&lt;a href=&#34;https://raw.githubusercontent.com/jackfrued/Python-100-Days/master/Day91-100/100.Python%E9%9D%A2%E8%AF%95%E9%A2%98%E5%AE%9E%E5%BD%95.md&#34;&gt;Python面试题实录&lt;/a&gt;&lt;/h4&gt;</summary>
  </entry>
  <entry>
    <title>THUDM/ChatGLM3</title>
    <updated>2023-12-01T02:26:54Z</updated>
    <id>tag:github.com,2023-12-01:/THUDM/ChatGLM3</id>
    <link href="https://github.com/THUDM/ChatGLM3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ChatGLM3 series: Open Bilingual Chat LLMs | 开源双语对话语言模型&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ChatGLM3&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; 🤗 &lt;a href=&#34;https://huggingface.co/THUDM/chatglm3-6b&#34; target=&#34;_blank&#34;&gt;HF Repo&lt;/a&gt; • 🤖 &lt;a href=&#34;https://modelscope.cn/models/ZhipuAI/chatglm3-6b&#34; target=&#34;_blank&#34;&gt;ModelScope&lt;/a&gt; • 🐦 &lt;a href=&#34;https://twitter.com/thukeg&#34; target=&#34;_blank&#34;&gt;Twitter&lt;/a&gt; • 📃 &lt;a href=&#34;https://arxiv.org/abs/2103.10360&#34; target=&#34;_blank&#34;&gt;[GLM@ACL 22]&lt;/a&gt; &lt;a href=&#34;https://github.com/THUDM/GLM&#34; target=&#34;_blank&#34;&gt;[GitHub]&lt;/a&gt; • 📃 &lt;a href=&#34;https://arxiv.org/abs/2210.02414&#34; target=&#34;_blank&#34;&gt;[GLM-130B@ICLR 23]&lt;/a&gt; &lt;a href=&#34;https://github.com/THUDM/GLM-130B&#34; target=&#34;_blank&#34;&gt;[GitHub]&lt;/a&gt; &lt;br&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; 👋 加入我们的 &lt;a href=&#34;https://join.slack.com/t/chatglm/shared_invite/zt-25ti5uohv-A_hs~am_D3Q8XPZMpj7wwQ&#34; target=&#34;_blank&#34;&gt;Slack&lt;/a&gt; 和 &lt;a href=&#34;https://raw.githubusercontent.com/THUDM/ChatGLM3/main/resources/WECHAT.md&#34; target=&#34;_blank&#34;&gt;微信&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; 📍在 &lt;a href=&#34;https://www.chatglm.cn&#34;&gt;chatglm.cn&lt;/a&gt; 体验更大规模的 ChatGLM 模型。 &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/THUDM/ChatGLM3/main/README_en.md&#34;&gt;Read this in English.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;📔 更为详细的使用信息，可以参考：&lt;a href=&#34;https://lslfd0slxc.feishu.cn/wiki/WvQbwIJ9tiPAxGk8ywDck6yfnof?from=from_copylink&#34;&gt;ChatGLM3技术文档&lt;/a&gt; 或 &lt;a href=&#34;https://www.bilibili.com/video/BV1uC4y1J7yA&#34;&gt;B站视频&lt;/a&gt;、&lt;a href=&#34;https://www.youtube.com/watch?v=Pw9PB6R7ORA&#34;&gt;YouTube视频&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;介绍&lt;/h2&gt; &#xA;&lt;p&gt;ChatGLM3 是智谱AI和清华大学 KEG 实验室联合发布的新一代对话预训练模型。ChatGLM3-6B 是 ChatGLM3 系列中的开源模型，在保留了前两代模型对话流畅、部署门槛低等众多优秀特性的基础上，ChatGLM3-6B 引入了如下特性：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;更强大的基础模型：&lt;/strong&gt; ChatGLM3-6B 的基础模型 ChatGLM3-6B-Base 采用了更多样的训练数据、更充分的训练步数和更合理的训练策略。在语义、数学、推理、代码、知识等不同角度的数据集上测评显示，&lt;strong&gt;ChatGLM3-6B-Base 具有在 10B 以下的基础模型中最强的性能&lt;/strong&gt;。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;更完整的功能支持：&lt;/strong&gt; ChatGLM3-6B 采用了全新设计的 &lt;a href=&#34;https://raw.githubusercontent.com/THUDM/ChatGLM3/main/PROMPT.md&#34;&gt;Prompt 格式&lt;/a&gt;，除正常的多轮对话外。同时原生支持&lt;a href=&#34;https://raw.githubusercontent.com/THUDM/ChatGLM3/main/tool_using/README.md&#34;&gt;工具调用&lt;/a&gt;（Function Call）、代码执行（Code Interpreter）和 Agent 任务等复杂场景。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;更全面的开源序列：&lt;/strong&gt; 除了对话模型 &lt;a href=&#34;https://huggingface.co/THUDM/chatglm3-6b&#34;&gt;ChatGLM3-6B&lt;/a&gt; 外，还开源了基础模型 &lt;a href=&#34;https://huggingface.co/THUDM/chatglm3-6b-base&#34;&gt;ChatGLM3-6B-Base&lt;/a&gt;、长文本对话模型 &lt;a href=&#34;https://huggingface.co/THUDM/chatglm3-6b-32k&#34;&gt;ChatGLM3-6B-32K&lt;/a&gt;。以上所有权重对学术研究&lt;strong&gt;完全开放&lt;/strong&gt;，在填写&lt;a href=&#34;https://open.bigmodel.cn/mla/form&#34;&gt;问卷&lt;/a&gt;进行登记后&lt;strong&gt;亦允许免费商业使用&lt;/strong&gt;。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;ChatGLM3 开源模型旨在与开源社区一起推动大模型技术发展，恳请开发者和大家遵守&lt;a href=&#34;https://raw.githubusercontent.com/THUDM/ChatGLM3/main/MODEL_LICENSE&#34;&gt;开源协议&lt;/a&gt;，勿将开源模型和代码及基于开源项目产生的衍生物用于任何可能给国家和社会带来危害的用途以及用于任何未经过安全评估和备案的服务。目前，本项目团队未基于 &lt;strong&gt;ChatGLM3 开源模型&lt;/strong&gt;开发任何应用，包括网页端、安卓、苹果 iOS 及 Windows App 等应用。&lt;/p&gt; &#xA;&lt;p&gt;尽管模型在训练的各个阶段都尽力确保数据的合规性和准确性，但由于 ChatGLM3-6B 模型规模较小，且模型受概率随机性因素影响，无法保证输出内容的准确。同时模型的输出容易被用户的输入误导。&lt;strong&gt;本项目不承担开源模型和代码导致的数据安全、舆情风险或发生任何模型被误导、滥用、传播、不当利用而产生的风险和责任。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;模型列表&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Model&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Seq Length&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Download&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ChatGLM3-6B&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;8k&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://huggingface.co/THUDM/chatglm3-6b&#34;&gt;HuggingFace&lt;/a&gt; | &lt;a href=&#34;https://modelscope.cn/models/ZhipuAI/chatglm3-6b&#34;&gt;ModelScope&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ChatGLM3-6B-Base&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;8k&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://huggingface.co/THUDM/chatglm3-6b-base&#34;&gt;HuggingFace&lt;/a&gt; | &lt;a href=&#34;https://modelscope.cn/models/ZhipuAI/chatglm3-6b-base&#34;&gt;ModelScope&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ChatGLM3-6B-32K&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;32k&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://huggingface.co/THUDM/chatglm3-6b-32k&#34;&gt;HuggingFace&lt;/a&gt; | &lt;a href=&#34;https://modelscope.cn/models/ZhipuAI/chatglm3-6b-32k&#34;&gt;ModelScope&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;友情链接&lt;/h2&gt; &#xA;&lt;p&gt;对 ChatGLM3 进行加速的开源项目：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/li-plus/chatglm.cpp&#34;&gt;chatglm.cpp&lt;/a&gt;: 类似 llama.cpp 的量化加速推理方案，实现笔记本上实时对话&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sophgo/ChatGLM3-TPU&#34;&gt;ChatGLM3-TPU&lt;/a&gt;: 采用TPU加速推理方案，在算能端侧芯片BM1684X（16T@FP16，内存16G）上实时运行约7.5 token/s&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;评测结果&lt;/h2&gt; &#xA;&lt;h3&gt;典型任务&lt;/h3&gt; &#xA;&lt;p&gt;我们选取了 8 个中英文典型数据集，在 ChatGLM3-6B (base) 版本上进行了性能测试。&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;GSM8K&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;MATH&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;BBH&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;MMLU&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;C-Eval&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;CMMLU&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;MBPP&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;AGIEval&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ChatGLM2-6B-Base&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;32.4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;6.5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;33.7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;47.9&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;51.7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;50.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Best Baseline&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;52.1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;13.1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;45.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;60.1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;63.5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;62.2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;47.5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;45.8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ChatGLM3-6B-Base&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;72.3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;25.7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;66.1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;61.4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;69.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;67.5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;52.4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;53.7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Best Baseline 指的是截止 2023年10月27日、模型参数在 10B 以下、在对应数据集上表现最好的预训练模型，不包括只针对某一项任务训练而未保持通用能力的模型。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;对 ChatGLM3-6B-Base 的测试中，BBH 采用 3-shot 测试，需要推理的 GSM8K、MATH 采用 0-shot CoT 测试，MBPP 采用 0-shot 生成后运行测例计算 Pass@1 ，其他选择题类型数据集均采用 0-shot 测试。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;我们在多个长文本应用场景下对 ChatGLM3-6B-32K 进行了人工评估测试。与二代模型相比，其效果平均提升了超过 50%。在论文阅读、文档摘要和财报分析等应用中，这种提升尤为显著。此外，我们还在 LongBench 评测集上对模型进行了测试，具体结果如下表所示&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;平均&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Summary&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Single-Doc QA&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Multi-Doc QA&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Code&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Few-shot&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Synthetic&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ChatGLM2-6B-32K&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;41.5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;24.8&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;37.6&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;34.7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;52.8&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;51.3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;47.7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ChatGLM3-6B-32K&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;50.2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;26.6&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;45.8&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;46.1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;56.2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;61.2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;65&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;使用方式&lt;/h2&gt; &#xA;&lt;h3&gt;环境安装&lt;/h3&gt; &#xA;&lt;p&gt;首先需要下载本仓库：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/THUDM/ChatGLM3&#xA;cd ChatGLM3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;然后使用 pip 安装依赖：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;transformers&lt;/code&gt; 库版本应该 &lt;code&gt;4.30.2&lt;/code&gt; 以及以上的版本 ，&lt;code&gt;torch&lt;/code&gt; 库版本应为 2.0 及以上的版本，以获得最佳的推理性能。&lt;/li&gt; &#xA; &lt;li&gt;为了保证 &lt;code&gt;torch&lt;/code&gt; 的版本正确，请严格按照 &lt;a href=&#34;https://pytorch.org/get-started/locally/&#34;&gt;官方文档&lt;/a&gt; 的说明安装。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gradio&lt;/code&gt; 库版本应该为 &lt;code&gt;3.x&lt;/code&gt; 的版本。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;综合 Demo&lt;/h3&gt; &#xA;&lt;p&gt;我们提供了一个集成以下三种功能的综合 Demo，运行方法请参考 &lt;a href=&#34;https://raw.githubusercontent.com/THUDM/ChatGLM3/main/composite_demo/README.md&#34;&gt;综合 Demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chat: 对话模式，在此模式下可以与模型进行对话。&lt;/li&gt; &#xA; &lt;li&gt;Tool: 工具模式，模型除了对话外，还可以通过工具进行其他操作。 &lt;img src=&#34;https://raw.githubusercontent.com/THUDM/ChatGLM3/main/resources/tool.png&#34; width=&#34;400&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;Code Interpreter: 代码解释器模式，模型可以在一个 Jupyter 环境中执行代码并获取结果，以完成复杂任务。 &lt;img src=&#34;https://raw.githubusercontent.com/THUDM/ChatGLM3/main/resources/heart.png&#34; width=&#34;400&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;代码调用&lt;/h3&gt; &#xA;&lt;p&gt;可以通过如下代码调用 ChatGLM 模型来生成对话：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from transformers import AutoTokenizer, AutoModel&#xA;&amp;gt;&amp;gt;&amp;gt; tokenizer = AutoTokenizer.from_pretrained(&#34;THUDM/chatglm3-6b&#34;, trust_remote_code=True)&#xA;&amp;gt;&amp;gt;&amp;gt; model = AutoModel.from_pretrained(&#34;THUDM/chatglm3-6b&#34;, trust_remote_code=True, device=&#39;cuda&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; model = model.eval()&#xA;&amp;gt;&amp;gt;&amp;gt; response, history = model.chat(tokenizer, &#34;你好&#34;, history=[])&#xA;&amp;gt;&amp;gt;&amp;gt; print(response)&#xA;你好👋!我是人工智能助手 ChatGLM3-6B,很高兴见到你,欢迎问我任何问题。&#xA;&amp;gt;&amp;gt;&amp;gt; response, history = model.chat(tokenizer, &#34;晚上睡不着应该怎么办&#34;, history=history)&#xA;&amp;gt;&amp;gt;&amp;gt; print(response)&#xA;晚上睡不着可能会让你感到焦虑或不舒服,但以下是一些可以帮助你入睡的方法:&#xA;&#xA;1. 制定规律的睡眠时间表:保持规律的睡眠时间表可以帮助你建立健康的睡眠习惯,使你更容易入睡。尽量在每天的相同时间上床,并在同一时间起床。&#xA;2. 创造一个舒适的睡眠环境:确保睡眠环境舒适,安静,黑暗且温度适宜。可以使用舒适的床上用品,并保持房间通风。&#xA;3. 放松身心:在睡前做些放松的活动,例如泡个热水澡,听些轻柔的音乐,阅读一些有趣的书籍等,有助于缓解紧张和焦虑,使你更容易入睡。&#xA;4. 避免饮用含有咖啡因的饮料:咖啡因是一种刺激性物质,会影响你的睡眠质量。尽量避免在睡前饮用含有咖啡因的饮料,例如咖啡,茶和可乐。&#xA;5. 避免在床上做与睡眠无关的事情:在床上做些与睡眠无关的事情,例如看电影,玩游戏或工作等,可能会干扰你的睡眠。&#xA;6. 尝试呼吸技巧:深呼吸是一种放松技巧,可以帮助你缓解紧张和焦虑,使你更容易入睡。试着慢慢吸气,保持几秒钟,然后缓慢呼气。&#xA;&#xA;如果这些方法无法帮助你入睡,你可以考虑咨询医生或睡眠专家,寻求进一步的建议。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;从本地加载模型&lt;/h4&gt; &#xA;&lt;p&gt;以上代码会由 &lt;code&gt;transformers&lt;/code&gt; 自动下载模型实现和参数。完整的模型实现在 &lt;a href=&#34;https://huggingface.co/THUDM/chatglm3-6b&#34;&gt;Hugging Face Hub&lt;/a&gt;。如果你的网络环境较差，下载模型参数可能会花费较长时间甚至失败。此时可以先将模型下载到本地，然后从本地加载。&lt;/p&gt; &#xA;&lt;p&gt;从 Hugging Face Hub 下载模型需要先&lt;a href=&#34;https://docs.github.com/zh/repositories/working-with-files/managing-large-files/installing-git-large-file-storage&#34;&gt;安装Git LFS&lt;/a&gt;，然后运行&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;git clone https://huggingface.co/THUDM/chatglm3-6b&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果从你从 HuggingFace 下载比较慢，也可以从 &lt;a href=&#34;https://modelscope.cn/models/ZhipuAI/chatglm3-6b&#34;&gt;ModelScope&lt;/a&gt; 中下载。&lt;/p&gt; &#xA;&lt;h3&gt;模型微调&lt;/h3&gt; &#xA;&lt;p&gt;请参考对话模型微调 &lt;a href=&#34;https://raw.githubusercontent.com/THUDM/ChatGLM3/main/finetune_chatmodel_demo/README.md&#34;&gt;ChatGLM3-6B 微调示例&lt;/a&gt;,或基座模型微调 &lt;a href=&#34;https://raw.githubusercontent.com/THUDM/ChatGLM3/main/finetune_basemodel_demo/README.md&#34;&gt;ChatGLM3-6B-base 微调示例&lt;/a&gt;。 请注意，不同的微调脚本对应的模型并不相同，请根据需要选择对应的模型。&lt;/p&gt; &#xA;&lt;h3&gt;网页版对话 Demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/THUDM/ChatGLM3/main/resources/web-demo.gif&#34; alt=&#34;web-demo&#34;&gt; 可以通过以下命令启动基于 Gradio 的网页版 demo：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python web_demo.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/THUDM/ChatGLM3/main/resources/web-demo2.png&#34; alt=&#34;web-demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;可以通过以下命令启动基于 Streamlit 的网页版 demo：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;streamlit run web_demo2.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;网页版 demo 会运行一个 Web Server，并输出地址。在浏览器中打开输出的地址即可使用。 经测试，基于 Streamlit 的网页版 Demo 会更流畅。&lt;/p&gt; &#xA;&lt;h3&gt;命令行对话 Demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/THUDM/ChatGLM3/main/resources/cli-demo.png&#34; alt=&#34;cli-demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;运行仓库中 &lt;a href=&#34;https://raw.githubusercontent.com/THUDM/ChatGLM3/main/basic_demo/cli_demo.py&#34;&gt;cli_demo.py&lt;/a&gt;：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python cli_demo.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;程序会在命令行中进行交互式的对话，在命令行中输入指示并回车即可生成回复，输入 &lt;code&gt;clear&lt;/code&gt; 可以清空对话历史，输入 &lt;code&gt;stop&lt;/code&gt; 终止程序。&lt;/p&gt; &#xA;&lt;h3&gt;LangChain Demo&lt;/h3&gt; &#xA;&lt;p&gt;请参考 &lt;a href=&#34;https://raw.githubusercontent.com/THUDM/ChatGLM3/main/langchain_demo/README.md&#34;&gt;基于 LangChain 的工具调用 Demo&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h3&gt;工具调用&lt;/h3&gt; &#xA;&lt;p&gt;关于工具调用的方法请参考 &lt;a href=&#34;https://raw.githubusercontent.com/THUDM/ChatGLM3/main/tool_using/README.md&#34;&gt;工具调用&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h3&gt;API 部署&lt;/h3&gt; &#xA;&lt;p&gt;感谢 &lt;a href=&#34;https://github.com/xusenlinzy&#34;&gt;@xusenlinzy&lt;/a&gt; 实现了 OpenAI 格式的流式 API 部署，可以作为任意基于 ChatGPT 的应用的后端，比如 &lt;a href=&#34;https://github.com/Yidadaa/ChatGPT-Next-Web&#34;&gt;ChatGPT-Next-Web&lt;/a&gt;。可以通过运行仓库中的&lt;a href=&#34;https://raw.githubusercontent.com/THUDM/ChatGLM3/main/openai_api_demo/openai_api.py&#34;&gt;openai_api.py&lt;/a&gt; 进行部署：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd openai_api_demo&#xA;python openai_api.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;同时，我们也书写了一个示例代码，用来测试API调用的性能。可以通过运行仓库中的&lt;a href=&#34;https://raw.githubusercontent.com/THUDM/ChatGLM3/main/openai_api_demo/openai_api_request.py&#34;&gt;openai_api_request.py&lt;/a&gt; 进行测试&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;使用Curl进行测试&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -X POST &#34;http://127.0.0.1:8000/v1/chat/completions&#34; \&#xA;-H &#34;Content-Type: application/json&#34; \&#xA;-d &#34;{\&#34;model\&#34;: \&#34;chatglm3-6b\&#34;, \&#34;messages\&#34;: [{\&#34;role\&#34;: \&#34;system\&#34;, \&#34;content\&#34;: \&#34;You are ChatGLM3, a large language model trained by Zhipu.AI. Follow the user&#39;s instructions carefully. Respond using markdown.\&#34;}, {\&#34;role\&#34;: \&#34;user\&#34;, \&#34;content\&#34;: \&#34;你好，给我讲一个故事，大概100字\&#34;}], \&#34;stream\&#34;: false, \&#34;max_tokens\&#34;: 100, \&#34;temperature\&#34;: 0.8, \&#34;top_p\&#34;: 0.8}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;使用Python进行测试&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd openai_api_demo&#xA;python openai_api_request.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果测试成功，则模型应该返回一段故事。&lt;/p&gt; &#xA;&lt;h2&gt;低成本部署&lt;/h2&gt; &#xA;&lt;h3&gt;模型量化&lt;/h3&gt; &#xA;&lt;p&gt;默认情况下，模型以 FP16 精度加载，运行上述代码需要大概 13GB 显存。如果你的 GPU 显存有限，可以尝试以量化方式加载模型，使用方法如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;model = AutoModel.from_pretrained(&#34;THUDM/chatglm3-6b&#34;,trust_remote_code=True).quantize(4).cuda()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;模型量化会带来一定的性能损失，经过测试，ChatGLM3-6B 在 4-bit 量化下仍然能够进行自然流畅的生成。&lt;/p&gt; &#xA;&lt;h3&gt;CPU 部署&lt;/h3&gt; &#xA;&lt;p&gt;如果你没有 GPU 硬件的话，也可以在 CPU 上进行推理，但是推理速度会更慢。使用方法如下（需要大概 32GB 内存）&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;model = AutoModel.from_pretrained(&#34;THUDM/chatglm3-6b&#34;, trust_remote_code=True).float()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mac 部署&lt;/h3&gt; &#xA;&lt;p&gt;对于搭载了 Apple Silicon 或者 AMD GPU 的 Mac，可以使用 MPS 后端来在 GPU 上运行 ChatGLM3-6B。需要参考 Apple 的 &lt;a href=&#34;https://developer.apple.com/metal/pytorch&#34;&gt;官方说明&lt;/a&gt; 安装 PyTorch-Nightly（正确的版本号应该是2.x.x.dev2023xxxx，而不是 2.x.x）。&lt;/p&gt; &#xA;&lt;p&gt;目前在 MacOS 上只支持&lt;a href=&#34;https://raw.githubusercontent.com/THUDM/ChatGLM3/main/README.md#%E4%BB%8E%E6%9C%AC%E5%9C%B0%E5%8A%A0%E8%BD%BD%E6%A8%A1%E5%9E%8B&#34;&gt;从本地加载模型&lt;/a&gt;。将代码中的模型加载改为从本地加载，并使用 mps 后端：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;model = AutoModel.from_pretrained(&#34;your local path&#34;, trust_remote_code=True).to(&#39;mps&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;加载半精度的 ChatGLM3-6B 模型需要大概 13GB 内存。内存较小的机器（比如 16GB 内存的 MacBook Pro），在空余内存不足的情况下会使用硬盘上的虚拟内存，导致推理速度严重变慢。&lt;/p&gt; &#xA;&lt;h3&gt;多卡部署&lt;/h3&gt; &#xA;&lt;p&gt;如果你有多张 GPU，但是每张 GPU 的显存大小都不足以容纳完整的模型，那么可以将模型切分在多张GPU上。首先安装 accelerate: &lt;code&gt;pip install accelerate&lt;/code&gt;，然后通过如下方法加载模型：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from utils import load_model_on_gpus&#xA;&#xA;model = load_model_on_gpus(&#34;THUDM/chatglm3-6b&#34;, num_gpus=2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;即可将模型部署到两张 GPU 上进行推理。你可以将 &lt;code&gt;num_gpus&lt;/code&gt; 改为你希望使用的 GPU 数。默认是均匀切分的，你也可以传入 &lt;code&gt;device_map&lt;/code&gt; 参数来自己指定。&lt;/p&gt; &#xA;&lt;h2&gt;引用&lt;/h2&gt; &#xA;&lt;p&gt;如果你觉得我们的工作有帮助的话，请考虑引用下列论文。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{zeng2022glm,&#xA;  title={Glm-130b: An open bilingual pre-trained model},&#xA;  author={Zeng, Aohan and Liu, Xiao and Du, Zhengxiao and Wang, Zihan and Lai, Hanyu and Ding, Ming and Yang, Zhuoyi and Xu, Yifan and Zheng, Wendi and Xia, Xiao and others},&#xA;  journal={arXiv preprint arXiv:2210.02414},&#xA;  year={2022}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{du2022glm,&#xA;  title={GLM: General Language Model Pretraining with Autoregressive Blank Infilling},&#xA;  author={Du, Zhengxiao and Qian, Yujie and Liu, Xiao and Ding, Ming and Qiu, Jiezhong and Yang, Zhilin and Tang, Jie},&#xA;  booktitle={Proceedings of the 60th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers)},&#xA;  pages={320--335},&#xA;  year={2022}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Stability-AI/generative-models</title>
    <updated>2023-12-01T02:26:54Z</updated>
    <id>tag:github.com,2023-12-01:/Stability-AI/generative-models</id>
    <link href="https://github.com/Stability-AI/generative-models" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Generative Models by Stability AI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Generative Models by Stability AI&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Stability-AI/generative-models/main/assets/000.jpg&#34; alt=&#34;sample1&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;November 30, 2023&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Following the launch of SDXL-Turbo, we are releasing &lt;a href=&#34;https://huggingface.co/stabilityai/sd-turbo&#34;&gt;SD-Turbo&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;November 28, 2023&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;We are releasing SDXL-Turbo, a lightning fast text-to image model. Alongside the model, we release a &lt;a href=&#34;https://stability.ai/research/adversarial-diffusion-distillation&#34;&gt;technical report&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Usage: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Follow the installation instructions or update the existing environment with &lt;code&gt;pip install streamlit-keyup&lt;/code&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;Download the &lt;a href=&#34;https://huggingface.co/stabilityai/sdxl-turbo&#34;&gt;weights&lt;/a&gt; and place them in the &lt;code&gt;checkpoints/&lt;/code&gt; directory.&lt;/li&gt; &#xA;     &lt;li&gt;Run &lt;code&gt;streamlit run scripts/demo/turbo.py&lt;/code&gt;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Stability-AI/generative-models/main/assets/turbo_tile.png&#34; alt=&#34;tile&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;November 21, 2023&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;We are releasing Stable Video Diffusion, an image-to-video model, for research purposes:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/stabilityai/stable-video-diffusion-img2vid&#34;&gt;SVD&lt;/a&gt;: This model was trained to generate 14 frames at resolution 576x1024 given a context frame of the same size. We use the standard image encoder from SD 2.1, but replace the decoder with a temporally-aware &lt;code&gt;deflickering decoder&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/stabilityai/stable-video-diffusion-img2vid-xt&#34;&gt;SVD-XT&lt;/a&gt;: Same architecture as &lt;code&gt;SVD&lt;/code&gt; but finetuned for 25 frame generation.&lt;/li&gt; &#xA;   &lt;li&gt;We provide a streamlit demo &lt;code&gt;scripts/demo/video_sampling.py&lt;/code&gt; and a standalone python script &lt;code&gt;scripts/sampling/simple_video_sample.py&lt;/code&gt; for inference of both models.&lt;/li&gt; &#xA;   &lt;li&gt;Alongside the model, we release a &lt;a href=&#34;https://stability.ai/research/stable-video-diffusion-scaling-latent-video-diffusion-models-to-large-datasets&#34;&gt;technical report&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Stability-AI/generative-models/main/assets/tile.gif&#34; alt=&#34;tile&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;July 26, 2023&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We are releasing two new open models with a permissive &lt;a href=&#34;https://raw.githubusercontent.com/Stability-AI/generative-models/main/model_licenses/LICENSE-SDXL1.0&#34;&gt;&lt;code&gt;CreativeML Open RAIL++-M&lt;/code&gt; license&lt;/a&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/Stability-AI/generative-models/main/#inference&#34;&gt;Inference&lt;/a&gt; for file hashes): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/stabilityai/stable-diffusion-xl-base-1.0&#34;&gt;SDXL-base-1.0&lt;/a&gt;: An improved version over &lt;code&gt;SDXL-base-0.9&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/stabilityai/stable-diffusion-xl-refiner-1.0&#34;&gt;SDXL-refiner-1.0&lt;/a&gt;: An improved version over &lt;code&gt;SDXL-refiner-0.9&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Stability-AI/generative-models/main/assets/001_with_eval.png&#34; alt=&#34;sample2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;July 4, 2023&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A technical report on SDXL is now available &lt;a href=&#34;https://arxiv.org/abs/2307.01952&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;June 22, 2023&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We are releasing two new diffusion models for research purposes: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;SDXL-base-0.9&lt;/code&gt;: The base model was trained on a variety of aspect ratios on images with resolution 1024^2. The base model uses &lt;a href=&#34;https://github.com/mlfoundations/open_clip&#34;&gt;OpenCLIP-ViT/G&lt;/a&gt; and &lt;a href=&#34;https://github.com/openai/CLIP/tree/main&#34;&gt;CLIP-ViT/L&lt;/a&gt; for text encoding whereas the refiner model only uses the OpenCLIP model.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;SDXL-refiner-0.9&lt;/code&gt;: The refiner has been trained to denoise small noise levels of high quality data and as such is not expected to work as a text-to-image model; instead, it should only be used as an image-to-image model.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you would like to access these models for your research, please apply using one of the following links: &lt;a href=&#34;https://huggingface.co/stabilityai/stable-diffusion-xl-base-0.9&#34;&gt;SDXL-0.9-Base model&lt;/a&gt;, and &lt;a href=&#34;https://huggingface.co/stabilityai/stable-diffusion-xl-refiner-0.9&#34;&gt;SDXL-0.9-Refiner&lt;/a&gt;. This means that you can apply for any of the two links - and if you are granted - you can access both. Please log in to your Hugging Face Account with your organization email to request access. &lt;strong&gt;We plan to do a full release soon (July).&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;The codebase&lt;/h2&gt; &#xA;&lt;h3&gt;General Philosophy&lt;/h3&gt; &#xA;&lt;p&gt;Modularity is king. This repo implements a config-driven approach where we build and combine submodules by calling &lt;code&gt;instantiate_from_config()&lt;/code&gt; on objects defined in yaml configs. See &lt;code&gt;configs/&lt;/code&gt; for many examples.&lt;/p&gt; &#xA;&lt;h3&gt;Changelog from the old &lt;code&gt;ldm&lt;/code&gt; codebase&lt;/h3&gt; &#xA;&lt;p&gt;For training, we use &lt;a href=&#34;https://lightning.ai/docs/pytorch/stable/&#34;&gt;PyTorch Lightning&lt;/a&gt;, but it should be easy to use other training wrappers around the base modules. The core diffusion model class (formerly &lt;code&gt;LatentDiffusion&lt;/code&gt;, now &lt;code&gt;DiffusionEngine&lt;/code&gt;) has been cleaned up:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No more extensive subclassing! We now handle all types of conditioning inputs (vectors, sequences and spatial conditionings, and all combinations thereof) in a single class: &lt;code&gt;GeneralConditioner&lt;/code&gt;, see &lt;code&gt;sgm/modules/encoders/modules.py&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;We separate guiders (such as classifier-free guidance, see &lt;code&gt;sgm/modules/diffusionmodules/guiders.py&lt;/code&gt;) from the samplers (&lt;code&gt;sgm/modules/diffusionmodules/sampling.py&lt;/code&gt;), and the samplers are independent of the model.&lt;/li&gt; &#xA; &lt;li&gt;We adopt the &lt;a href=&#34;https://arxiv.org/abs/2206.00364&#34;&gt;&#34;denoiser framework&#34;&lt;/a&gt; for both training and inference (most notable change is probably now the option to train continuous time models): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Discrete times models (denoisers) are simply a special case of continuous time models (denoisers); see &lt;code&gt;sgm/modules/diffusionmodules/denoiser.py&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The following features are now independent: weighting of the diffusion loss function (&lt;code&gt;sgm/modules/diffusionmodules/denoiser_weighting.py&lt;/code&gt;), preconditioning of the network (&lt;code&gt;sgm/modules/diffusionmodules/denoiser_scaling.py&lt;/code&gt;), and sampling of noise levels during training (&lt;code&gt;sgm/modules/diffusionmodules/sigma_sampling.py&lt;/code&gt;).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Autoencoding models have also been cleaned up.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a name=&#34;installation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;1. Clone the repo&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/Stability-AI/generative-models.git&#xA;cd generative-models&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. Setting up the virtualenv&lt;/h4&gt; &#xA;&lt;p&gt;This is assuming you have navigated to the &lt;code&gt;generative-models&lt;/code&gt; root after cloning it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This is tested under &lt;code&gt;python3.10&lt;/code&gt;. For other python versions, you might encounter version conflicts.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;PyTorch 2.0&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# install required packages from pypi&#xA;python3 -m venv .pt2&#xA;source .pt2/bin/activate&#xA;pip3 install -r requirements/pt2.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3. Install &lt;code&gt;sgm&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip3 install .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;4. Install &lt;code&gt;sdata&lt;/code&gt; for training&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip3 install -e git+https://github.com/Stability-AI/datapipelines.git@main#egg=sdata&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Packaging&lt;/h2&gt; &#xA;&lt;p&gt;This repository uses PEP 517 compliant packaging using &lt;a href=&#34;https://hatch.pypa.io/latest/&#34;&gt;Hatch&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build a distributable wheel, install &lt;code&gt;hatch&lt;/code&gt; and run &lt;code&gt;hatch build&lt;/code&gt; (specifying &lt;code&gt;-t wheel&lt;/code&gt; will skip building a sdist, which is not necessary).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install hatch&#xA;hatch build -t wheel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will find the built package in &lt;code&gt;dist/&lt;/code&gt;. You can install the wheel with &lt;code&gt;pip install dist/*.whl&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that the package does &lt;strong&gt;not&lt;/strong&gt; currently specify dependencies; you will need to install the required packages, depending on your use case and PyTorch version, manually.&lt;/p&gt; &#xA;&lt;h2&gt;Inference&lt;/h2&gt; &#xA;&lt;p&gt;We provide a &lt;a href=&#34;https://streamlit.io/&#34;&gt;streamlit&lt;/a&gt; demo for text-to-image and image-to-image sampling in &lt;code&gt;scripts/demo/sampling.py&lt;/code&gt;. We provide file hashes for the complete file as well as for only the saved tensors in the file ( see &lt;a href=&#34;https://github.com/Stability-AI/ModelSpec&#34;&gt;Model Spec&lt;/a&gt; for a script to evaluate that). The following models are currently supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/stabilityai/stable-diffusion-xl-base-1.0&#34;&gt;SDXL-base-1.0&lt;/a&gt; &lt;pre&gt;&lt;code&gt;File Hash (sha256): 31e35c80fc4829d14f90153f4c74cd59c90b779f6afe05a74cd6120b893f7e5b&#xA;Tensordata Hash (sha256): 0xd7a9105a900fd52748f20725fe52fe52b507fd36bee4fc107b1550a26e6ee1d7&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/stabilityai/stable-diffusion-xl-refiner-1.0&#34;&gt;SDXL-refiner-1.0&lt;/a&gt; &lt;pre&gt;&lt;code&gt;File Hash (sha256): 7440042bbdc8a24813002c09b6b69b64dc90fded4472613437b7f55f9b7d9c5f&#xA;Tensordata Hash (sha256): 0x1a77d21bebc4b4de78c474a90cb74dc0d2217caf4061971dbfa75ad406b75d81&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/stabilityai/stable-diffusion-xl-base-0.9&#34;&gt;SDXL-base-0.9&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/stabilityai/stable-diffusion-xl-refiner-0.9&#34;&gt;SDXL-refiner-0.9&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/stabilityai/stable-diffusion-2-1-base/blob/main/v2-1_512-ema-pruned.safetensors&#34;&gt;SD-2.1-512&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/stabilityai/stable-diffusion-2-1/blob/main/v2-1_768-ema-pruned.safetensors&#34;&gt;SD-2.1-768&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Weights for SDXL&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SDXL-1.0:&lt;/strong&gt; The weights of SDXL-1.0 are available (subject to a &lt;a href=&#34;https://raw.githubusercontent.com/Stability-AI/generative-models/main/model_licenses/LICENSE-SDXL1.0&#34;&gt;&lt;code&gt;CreativeML Open RAIL++-M&lt;/code&gt; license&lt;/a&gt;) here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;base model: &lt;a href=&#34;https://huggingface.co/stabilityai/stable-diffusion-xl-base-1.0/&#34;&gt;https://huggingface.co/stabilityai/stable-diffusion-xl-base-1.0/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;refiner model: &lt;a href=&#34;https://huggingface.co/stabilityai/stable-diffusion-xl-refiner-1.0/&#34;&gt;https://huggingface.co/stabilityai/stable-diffusion-xl-refiner-1.0/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;SDXL-0.9:&lt;/strong&gt; The weights of SDXL-0.9 are available and subject to a &lt;a href=&#34;https://raw.githubusercontent.com/Stability-AI/generative-models/main/model_licenses/LICENSE-SDXL0.9&#34;&gt;research license&lt;/a&gt;. If you would like to access these models for your research, please apply using one of the following links: &lt;a href=&#34;https://huggingface.co/stabilityai/stable-diffusion-xl-base-0.9&#34;&gt;SDXL-base-0.9 model&lt;/a&gt;, and &lt;a href=&#34;https://huggingface.co/stabilityai/stable-diffusion-xl-refiner-0.9&#34;&gt;SDXL-refiner-0.9&lt;/a&gt;. This means that you can apply for any of the two links - and if you are granted - you can access both. Please log in to your Hugging Face Account with your organization email to request access.&lt;/p&gt; &#xA;&lt;p&gt;After obtaining the weights, place them into &lt;code&gt;checkpoints/&lt;/code&gt;. Next, start the demo using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;streamlit run scripts/demo/sampling.py --server.port &amp;lt;your_port&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Invisible Watermark Detection&lt;/h3&gt; &#xA;&lt;p&gt;Images generated with our code use the &lt;a href=&#34;https://github.com/ShieldMnt/invisible-watermark/&#34;&gt;invisible-watermark&lt;/a&gt; library to embed an invisible watermark into the model output. We also provide a script to easily detect that watermark. Please note that this watermark is not the same as in previous Stable Diffusion 1.x/2.x versions.&lt;/p&gt; &#xA;&lt;p&gt;To run the script you need to either have a working installation as above or try an &lt;em&gt;experimental&lt;/em&gt; import using only a minimal amount of packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m venv .detect&#xA;source .detect/bin/activate&#xA;&#xA;pip install &#34;numpy&amp;gt;=1.17&#34; &#34;PyWavelets&amp;gt;=1.1.1&#34; &#34;opencv-python&amp;gt;=4.1.0.25&#34;&#xA;pip install --no-deps invisible-watermark&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the script you need to have a working installation as above. The script is then useable in the following ways (don&#39;t forget to activate your virtual environment beforehand, e.g. &lt;code&gt;source .pt1/bin/activate&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# test a single file&#xA;python scripts/demo/detect.py &amp;lt;your filename here&amp;gt;&#xA;# test multiple files at once&#xA;python scripts/demo/detect.py &amp;lt;filename 1&amp;gt; &amp;lt;filename 2&amp;gt; ... &amp;lt;filename n&amp;gt;&#xA;# test all files in a specific folder&#xA;python scripts/demo/detect.py &amp;lt;your folder name here&amp;gt;/*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Training:&lt;/h2&gt; &#xA;&lt;p&gt;We are providing example training configs in &lt;code&gt;configs/example_training&lt;/code&gt;. To launch a training, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python main.py --base configs/&amp;lt;config1.yaml&amp;gt; configs/&amp;lt;config2.yaml&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where configs are merged from left to right (later configs overwrite the same values). This can be used to combine model, training and data configs. However, all of them can also be defined in a single config. For example, to run a class-conditional pixel-based diffusion model training on MNIST, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python main.py --base configs/example_training/toy/mnist_cond.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE 1:&lt;/strong&gt; Using the non-toy-dataset configs &lt;code&gt;configs/example_training/imagenet-f8_cond.yaml&lt;/code&gt;, &lt;code&gt;configs/example_training/txt2img-clipl.yaml&lt;/code&gt; and &lt;code&gt;configs/example_training/txt2img-clipl-legacy-ucg-training.yaml&lt;/code&gt; for training will require edits depending on the used dataset (which is expected to stored in tar-file in the &lt;a href=&#34;https://github.com/webdataset/webdataset&#34;&gt;webdataset-format&lt;/a&gt;). To find the parts which have to be adapted, search for comments containing &lt;code&gt;USER:&lt;/code&gt; in the respective config.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE 2:&lt;/strong&gt; This repository supports both &lt;code&gt;pytorch1.13&lt;/code&gt; and &lt;code&gt;pytorch2&lt;/code&gt;for training generative models. However for autoencoder training as e.g. in &lt;code&gt;configs/example_training/autoencoder/kl-f4/imagenet-attnfree-logvar.yaml&lt;/code&gt;, only &lt;code&gt;pytorch1.13&lt;/code&gt; is supported.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE 3:&lt;/strong&gt; Training latent generative models (as e.g. in &lt;code&gt;configs/example_training/imagenet-f8_cond.yaml&lt;/code&gt;) requires retrieving the checkpoint from &lt;a href=&#34;https://huggingface.co/stabilityai/sdxl-vae/tree/main&#34;&gt;Hugging Face&lt;/a&gt; and replacing the &lt;code&gt;CKPT_PATH&lt;/code&gt; placeholder in &lt;a href=&#34;https://raw.githubusercontent.com/Stability-AI/generative-models/main/configs/example_training/imagenet-f8_cond.yaml#81&#34;&gt;this line&lt;/a&gt;. The same is to be done for the provided text-to-image configs.&lt;/p&gt; &#xA;&lt;h3&gt;Building New Diffusion Models&lt;/h3&gt; &#xA;&lt;h4&gt;Conditioner&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;GeneralConditioner&lt;/code&gt; is configured through the &lt;code&gt;conditioner_config&lt;/code&gt;. Its only attribute is &lt;code&gt;emb_models&lt;/code&gt;, a list of different embedders (all inherited from &lt;code&gt;AbstractEmbModel&lt;/code&gt;) that are used to condition the generative model. All embedders should define whether or not they are trainable (&lt;code&gt;is_trainable&lt;/code&gt;, default &lt;code&gt;False&lt;/code&gt;), a classifier-free guidance dropout rate is used (&lt;code&gt;ucg_rate&lt;/code&gt;, default &lt;code&gt;0&lt;/code&gt;), and an input key (&lt;code&gt;input_key&lt;/code&gt;), for example, &lt;code&gt;txt&lt;/code&gt; for text-conditioning or &lt;code&gt;cls&lt;/code&gt; for class-conditioning. When computing conditionings, the embedder will get &lt;code&gt;batch[input_key]&lt;/code&gt; as input. We currently support two to four dimensional conditionings and conditionings of different embedders are concatenated appropriately. Note that the order of the embedders in the &lt;code&gt;conditioner_config&lt;/code&gt; is important.&lt;/p&gt; &#xA;&lt;h4&gt;Network&lt;/h4&gt; &#xA;&lt;p&gt;The neural network is set through the &lt;code&gt;network_config&lt;/code&gt;. This used to be called &lt;code&gt;unet_config&lt;/code&gt;, which is not general enough as we plan to experiment with transformer-based diffusion backbones.&lt;/p&gt; &#xA;&lt;h4&gt;Loss&lt;/h4&gt; &#xA;&lt;p&gt;The loss is configured through &lt;code&gt;loss_config&lt;/code&gt;. For standard diffusion model training, you will have to set &lt;code&gt;sigma_sampler_config&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Sampler config&lt;/h4&gt; &#xA;&lt;p&gt;As discussed above, the sampler is independent of the model. In the &lt;code&gt;sampler_config&lt;/code&gt;, we set the type of numerical solver, number of steps, type of discretization, as well as, for example, guidance wrappers for classifier-free guidance.&lt;/p&gt; &#xA;&lt;h3&gt;Dataset Handling&lt;/h3&gt; &#xA;&lt;p&gt;For large scale training we recommend using the data pipelines from our &lt;a href=&#34;https://github.com/Stability-AI/datapipelines&#34;&gt;data pipelines&lt;/a&gt; project. The project is contained in the requirement and automatically included when following the steps from the &lt;a href=&#34;https://raw.githubusercontent.com/Stability-AI/generative-models/main/#installation&#34;&gt;Installation section&lt;/a&gt;. Small map-style datasets should be defined here in the repository (e.g., MNIST, CIFAR-10, ...), and return a dict of data keys/values, e.g.,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;example = {&#34;jpg&#34;: x,  # this is a tensor -1...1 chw&#xA;           &#34;txt&#34;: &#34;a beautiful image&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where we expect images in -1...1, channel-first format.&lt;/p&gt;</summary>
  </entry>
</feed>