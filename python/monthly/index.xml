<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-01T01:58:18Z</updated>
  <subtitle>Monthly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Textualize/textual</title>
    <updated>2022-11-01T01:58:18Z</updated>
    <id>tag:github.com,2022-11-01:/Textualize/textual</id>
    <link href="https://github.com/Textualize/textual" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Textual is a TUI (Text User Interface) framework for Python inspired by modern web development.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Textual&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Textualize/textual/main/imgs/textual.png&#34; alt=&#34;Textual splash image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Textual is a Python framework for creating interactive applications that run in your terminal.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; üé¨ Demonstration &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;A quick run through of some Textual features.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/554369/197355913-65d3c125-493d-4c05-a590-5311f16c40ff.mov&#34;&gt;https://user-images.githubusercontent.com/554369/197355913-65d3c125-493d-4c05-a590-5311f16c40ff.mov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Textual adds interactivity to &lt;a href=&#34;https://github.com/Textualize/rich&#34;&gt;Rich&lt;/a&gt; with a Python API inspired by modern web development.&lt;/p&gt; &#xA;&lt;p&gt;On modern terminal software (installed by default on most systems), Textual apps can use &lt;strong&gt;16.7 million&lt;/strong&gt; colors with mouse support and smooth flicker-free animation. A powerful layout engine and re-usable components makes it possible to build apps that rival the desktop and web experience.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;Textual runs on Linux, macOS, and Windows. Textual requires Python 3.7 or above.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;Install Textual via pip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install &#34;textual[dev]&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The addition of &lt;code&gt;[dev]&lt;/code&gt; installs Textual development tools. See the &lt;a href=&#34;https://textual.textualize.io/getting_started/&#34;&gt;docs&lt;/a&gt; if you need help getting started.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;Run the following command to see a little of what Textual can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -m textual&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Textualize/textual/main/imgs/demo.png&#34; alt=&#34;Textual demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Head over to the &lt;a href=&#34;http://textual.textualize.io/&#34;&gt;Textual documentation&lt;/a&gt; to start building!&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;The Textual repository comes with a number of examples you can experiment with or use as a template for your own projects.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; üé¨ Code browser &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;This is the &lt;a href=&#34;https://github.com/Textualize/textual/raw/main/examples/code_browser.py&#34;&gt;code_browser.py&lt;/a&gt; example which clocks in at 61 lines (&lt;em&gt;including&lt;/em&gt; docstrings and blank lines).&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/554369/197188237-88d3f7e4-4e5f-40b5-b996-c47b19ee2f49.mov&#34;&gt;https://user-images.githubusercontent.com/554369/197188237-88d3f7e4-4e5f-40b5-b996-c47b19ee2f49.mov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; üì∑ Calculator &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;This is &lt;a href=&#34;https://github.com/Textualize/textual/raw/main/examples/calculator.py&#34;&gt;calculator.py&lt;/a&gt; which demonstrates Textual grid layouts.&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Textualize/textual/main/imgs/calculator.png&#34; alt=&#34;calculator screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; üé¨ Stopwatch &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;This is the Stopwatch example from the &lt;a href=&#34;https://textual.textualize.io/tutorial/&#34;&gt;tutorial&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/554369/197360718-0c834ef5-6285-4d37-85cf-23eed4aa56c5.mov&#34;&gt;https://user-images.githubusercontent.com/554369/197360718-0c834ef5-6285-4d37-85cf-23eed4aa56c5.mov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Reference commands&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;textual&lt;/code&gt; command has a few sub-commands to preview Textual styles.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; üé¨ Easing reference &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;This is the &lt;em&gt;easing&lt;/em&gt; reference which demonstrates the easing parameter on animation, with both movement and opacity. You can run it with the following command:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;textual easing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/554369/196157100-352852a6-2b09-4dc8-a888-55b53570aff9.mov&#34;&gt;https://user-images.githubusercontent.com/554369/196157100-352852a6-2b09-4dc8-a888-55b53570aff9.mov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; üé¨ Borders reference &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;This is the borders reference which demonstrates some of the borders styles in Textual. You can run it with the following command:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;textual borders&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/554369/196158235-4b45fb78-053d-4fd5-b285-e09b4f1c67a8.mov&#34;&gt;https://user-images.githubusercontent.com/554369/196158235-4b45fb78-053d-4fd5-b285-e09b4f1c67a8.mov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; üé¨ Colors reference &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;This is a reference for Textual&#39;s color design system.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;textual colors&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/554369/197357417-2d407aac-8969-44d3-8250-eea45df79d57.mov&#34;&gt;https://user-images.githubusercontent.com/554369/197357417-2d407aac-8969-44d3-8250-eea45df79d57.mov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
  <entry>
    <title>psf/black</title>
    <updated>2022-11-01T01:58:18Z</updated>
    <id>tag:github.com,2022-11-01:/psf/black</id>
    <link href="https://github.com/psf/black" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The uncompromising Python code formatter&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://black.readthedocs.io/en/stable/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/psf/black/main/docs/_static/logo2-readme.png&#34; alt=&#34;Black Logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;The Uncompromising Code Formatter&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/psf/black/actions&#34;&gt;&lt;img alt=&#34;Actions Status&#34; src=&#34;https://github.com/psf/black/workflows/Test/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://black.readthedocs.io/en/stable/?badge=stable&#34;&gt;&lt;img alt=&#34;Documentation Status&#34; src=&#34;https://readthedocs.org/projects/black/badge/?version=stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/psf/black?branch=main&#34;&gt;&lt;img alt=&#34;Coverage Status&#34; src=&#34;https://coveralls.io/repos/github/psf/black/badge.svg?branch=main&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/psf/black/raw/main/LICENSE&#34;&gt;&lt;img alt=&#34;License: MIT&#34; src=&#34;https://black.readthedocs.io/en/stable/_static/license.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/black/&#34;&gt;&lt;img alt=&#34;PyPI&#34; src=&#34;https://img.shields.io/pypi/v/black&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pepy.tech/project/black&#34;&gt;&lt;img alt=&#34;Downloads&#34; src=&#34;https://pepy.tech/badge/black&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://anaconda.org/conda-forge/black/&#34;&gt;&lt;img alt=&#34;conda-forge&#34; src=&#34;https://img.shields.io/conda/dn/conda-forge/black.svg?label=conda-forge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/psf/black&#34;&gt;&lt;img alt=&#34;Code style: black&#34; src=&#34;https://img.shields.io/badge/code%20style-black-000000.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ÄúAny color you like.‚Äù&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;em&gt;Black&lt;/em&gt; is the uncompromising Python code formatter. By using it, you agree to cede control over minutiae of hand-formatting. In return, &lt;em&gt;Black&lt;/em&gt; gives you speed, determinism, and freedom from &lt;code&gt;pycodestyle&lt;/code&gt; nagging about formatting. You will save time and mental energy for more important matters.&lt;/p&gt; &#xA;&lt;p&gt;Blackened code looks the same regardless of the project you&#39;re reading. Formatting becomes transparent after a while and you can focus on the content instead.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Black&lt;/em&gt; makes code review faster by producing the smallest diffs possible.&lt;/p&gt; &#xA;&lt;p&gt;Try it out now using the &lt;a href=&#34;https://black.vercel.app&#34;&gt;Black Playground&lt;/a&gt;. Watch the &lt;a href=&#34;https://youtu.be/esZLCuWs_2Y&#34;&gt;PyCon 2019 talk&lt;/a&gt; to learn more.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://black.readthedocs.io/en/stable&#34;&gt;Read the documentation on ReadTheDocs!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Installation and usage&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Black&lt;/em&gt; can be installed by running &lt;code&gt;pip install black&lt;/code&gt;. It requires Python 3.7+ to run. If you want to format Jupyter Notebooks, install with &lt;code&gt;pip install &#39;black[jupyter]&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you can&#39;t wait for the latest &lt;em&gt;hotness&lt;/em&gt; and want to install from GitHub, use:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pip install git+https://github.com/psf/black&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;To get started right away with sensible defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;black {source_file_or_directory}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can run &lt;em&gt;Black&lt;/em&gt; as a package if running it as a script doesn&#39;t work:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python -m black {source_file_or_directory}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Further information can be found in our docs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://black.readthedocs.io/en/stable/usage_and_configuration/index.html&#34;&gt;Usage and Configuration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Black&lt;/em&gt; is already &lt;a href=&#34;https://github.com/psf/black#used-by&#34;&gt;successfully used&lt;/a&gt; by many projects, small and big. &lt;em&gt;Black&lt;/em&gt; has a comprehensive test suite, with efficient parallel tests, and our own auto formatting and parallel Continuous Integration runner. Now that we have become stable, you should not expect large formatting changes in the future. Stylistic changes will mostly be responses to bug reports and support for new Python syntax. For more information please refer to the &lt;a href=&#34;https://black.readthedocs.io/en/stable/the_black_code_style/index.html&#34;&gt;The Black Code Style&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Also, as a safety measure which slows down processing, &lt;em&gt;Black&lt;/em&gt; will check that the reformatted code still produces a valid AST that is effectively equivalent to the original (see the &lt;a href=&#34;https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#ast-before-and-after-formatting&#34;&gt;Pragmatism&lt;/a&gt; section for details). If you&#39;re feeling confident, use &lt;code&gt;--fast&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;The &lt;em&gt;Black&lt;/em&gt; code style&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Black&lt;/em&gt; is a PEP 8 compliant opinionated formatter. &lt;em&gt;Black&lt;/em&gt; reformats entire files in place. Style configuration options are deliberately limited and rarely added. It doesn&#39;t take previous formatting into account (see &lt;a href=&#34;https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#pragmatism&#34;&gt;Pragmatism&lt;/a&gt; for exceptions).&lt;/p&gt; &#xA;&lt;p&gt;Our documentation covers the current &lt;em&gt;Black&lt;/em&gt; code style, but planned changes to it are also documented. They&#39;re both worth taking a look:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html&#34;&gt;The &lt;em&gt;Black&lt;/em&gt; Code Style: Current style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://black.readthedocs.io/en/stable/the_black_code_style/future_style.html&#34;&gt;The &lt;em&gt;Black&lt;/em&gt; Code Style: Future style&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Changes to the &lt;em&gt;Black&lt;/em&gt; code style are bound by the Stability Policy:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://black.readthedocs.io/en/stable/the_black_code_style/index.html#stability-policy&#34;&gt;The &lt;em&gt;Black&lt;/em&gt; Code Style: Stability Policy&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please refer to this document before submitting an issue. What seems like a bug might be intended behaviour.&lt;/p&gt; &#xA;&lt;h3&gt;Pragmatism&lt;/h3&gt; &#xA;&lt;p&gt;Early versions of &lt;em&gt;Black&lt;/em&gt; used to be absolutist in some respects. They took after its initial author. This was fine at the time as it made the implementation simpler and there were not many users anyway. Not many edge cases were reported. As a mature tool, &lt;em&gt;Black&lt;/em&gt; does make some exceptions to rules it otherwise holds.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#pragmatism&#34;&gt;The &lt;em&gt;Black&lt;/em&gt; code style: Pragmatism&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please refer to this document before submitting an issue just like with the document above. What seems like a bug might be intended behaviour.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Black&lt;/em&gt; is able to read project-specific default values for its command line options from a &lt;code&gt;pyproject.toml&lt;/code&gt; file. This is especially useful for specifying custom &lt;code&gt;--include&lt;/code&gt; and &lt;code&gt;--exclude&lt;/code&gt;/&lt;code&gt;--force-exclude&lt;/code&gt;/&lt;code&gt;--extend-exclude&lt;/code&gt; patterns for your project.&lt;/p&gt; &#xA;&lt;p&gt;You can find more details in our documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-via-a-file&#34;&gt;The basics: Configuration via a file&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And if you&#39;re looking for more general configuration documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://black.readthedocs.io/en/stable/usage_and_configuration/index.html&#34;&gt;Usage and Configuration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pro-tip&lt;/strong&gt;: If you&#39;re asking yourself &#34;Do I need to configure anything?&#34; the answer is &#34;No&#34;. &lt;em&gt;Black&lt;/em&gt; is all about sensible defaults. Applying those defaults will have your code in compliance with many other &lt;em&gt;Black&lt;/em&gt; formatted projects.&lt;/p&gt; &#xA;&lt;h2&gt;Used by&lt;/h2&gt; &#xA;&lt;p&gt;The following notable open-source projects trust &lt;em&gt;Black&lt;/em&gt; with enforcing a consistent code style: pytest, tox, Pyramid, Django, Django Channels, Hypothesis, attrs, SQLAlchemy, Poetry, PyPA applications (Warehouse, Bandersnatch, Pipenv, virtualenv), pandas, Pillow, Twisted, LocalStack, every Datadog Agent Integration, Home Assistant, Zulip, Kedro, OpenOA, FLORIS, ORBIT, WOMBAT, and many more.&lt;/p&gt; &#xA;&lt;p&gt;The following organizations use &lt;em&gt;Black&lt;/em&gt;: Facebook, Dropbox, KeepTruckin, Mozilla, Quora, Duolingo, QuantumBlack, Tesla, Archer Aviation.&lt;/p&gt; &#xA;&lt;p&gt;Are we missing anyone? Let us know.&lt;/p&gt; &#xA;&lt;h2&gt;Testimonials&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Mike Bayer&lt;/strong&gt;, &lt;a href=&#34;https://www.sqlalchemy.org/&#34;&gt;author of &lt;code&gt;SQLAlchemy&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I can&#39;t think of any single tool in my entire programming career that has given me a bigger productivity increase by its introduction. I can now do refactorings in about 1% of the keystrokes that it would have taken me previously when we had no way for code to format itself.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Dusty Phillips&lt;/strong&gt;, &lt;a href=&#34;https://smile.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&amp;amp;field-keywords=dusty+phillips&#34;&gt;writer&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Black&lt;/em&gt; is opinionated so you don&#39;t have to be.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hynek Schlawack&lt;/strong&gt;, &lt;a href=&#34;https://www.attrs.org/&#34;&gt;creator of &lt;code&gt;attrs&lt;/code&gt;&lt;/a&gt;, core developer of Twisted and CPython:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;An auto-formatter that doesn&#39;t suck is all I want for Xmas!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Carl Meyer&lt;/strong&gt;, &lt;a href=&#34;https://www.djangoproject.com/&#34;&gt;Django&lt;/a&gt; core developer:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;At least the name is good.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Kenneth Reitz&lt;/strong&gt;, creator of &lt;a href=&#34;https://requests.readthedocs.io/en/latest/&#34;&gt;&lt;code&gt;requests&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://readthedocs.org/projects/pipenv/&#34;&gt;&lt;code&gt;pipenv&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This vastly improves the formatting of our code. Thanks a ton!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Show your style&lt;/h2&gt; &#xA;&lt;p&gt;Use the badge in your project&#39;s README.md:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using the badge in README.rst:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.. image:: https://img.shields.io/badge/code%20style-black-000000.svg&#xA;    :target: https://github.com/psf/black&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Looks like this: &lt;a href=&#34;https://github.com/psf/black&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code%20style-black-000000.svg?sanitize=true&#34; alt=&#34;Code style: black&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Welcome! Happy to see you willing to make the project better. You can get started by reading this:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://black.readthedocs.io/en/latest/contributing/the_basics.html&#34;&gt;Contributing: The basics&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also take a look at the rest of the contributing docs or talk with the developers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://black.readthedocs.io/en/latest/contributing/index.html&#34;&gt;Contributing documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/RtVdv86PrH&#34;&gt;Chat on Discord&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Change log&lt;/h2&gt; &#xA;&lt;p&gt;The log has become rather long. It moved to its own file.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://black.readthedocs.io/en/latest/change_log.html&#34;&gt;CHANGES&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;The author list is quite long nowadays, so it lives in its own file.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/psf/black/main/AUTHORS.md&#34;&gt;AUTHORS.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Everyone participating in the &lt;em&gt;Black&lt;/em&gt; project, and in particular in the issue tracker, pull requests, and social media activity, is expected to treat other people with respect and more generally to follow the guidelines articulated in the &lt;a href=&#34;https://www.python.org/psf/codeofconduct/&#34;&gt;Python Community Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;At the same time, humor is encouraged. In fact, basic familiarity with Monty Python&#39;s Flying Circus is expected. We are not savages.&lt;/p&gt; &#xA;&lt;p&gt;And if you &lt;em&gt;really&lt;/em&gt; need to slap somebody, do it with a fish while dancing.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sczhou/CodeFormer</title>
    <updated>2022-11-01T01:58:18Z</updated>
    <id>tag:github.com,2022-11-01:/sczhou/CodeFormer</id>
    <link href="https://github.com/sczhou/CodeFormer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;[NeurIPS 2022] Towards Robust Blind Face Restoration with Codebook Lookup Transformer&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/sczhou/CodeFormer/master/assets/CodeFormer_logo.png&#34; height=&#34;110&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Towards Robust Blind Face Restoration with Codebook Lookup Transformer (NeurIPS 2022)&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2206.11253&#34;&gt;Paper&lt;/a&gt; | &lt;a href=&#34;https://shangchenzhou.com/projects/CodeFormer/&#34;&gt;Project Page&lt;/a&gt; | &lt;a href=&#34;https://youtu.be/d3VDpkXlueI&#34;&gt;Video&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/drive/1m52PNveE4PBhYrecj34cnpEeiHcC5LTb?usp=sharing&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;google colab logo&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/spaces/sczhou/CodeFormer&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Demo-%F0%9F%A4%97%20Hugging%20Face-blue&#34; alt=&#34;Hugging Face&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://replicate.com/sczhou/codeformer&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Demo-%F0%9F%9A%80%20Replicate-blue&#34; alt=&#34;Replicate&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://visitor-badge.laobi.icu/badge?page_id=sczhou/CodeFormer&#34; alt=&#34;visitors&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- ![visitors](https://visitor-badge.glitch.me/badge?page_id=sczhou/CodeFormer) --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://shangchenzhou.com/&#34;&gt;Shangchen Zhou&lt;/a&gt;, &lt;a href=&#34;https://ckkelvinchan.github.io/&#34;&gt;Kelvin C.K. Chan&lt;/a&gt;, &lt;a href=&#34;https://li-chongyi.github.io/&#34;&gt;Chongyi Li&lt;/a&gt;, &lt;a href=&#34;https://www.mmlab-ntu.com/person/ccloy/&#34;&gt;Chen Change Loy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;S-Lab, Nanyang Technological University&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/sczhou/CodeFormer/master/assets/network.jpg&#34; width=&#34;800px&#34;&gt; &#xA;&lt;p&gt;&lt;span&gt;‚≠ê&lt;/span&gt; If CodeFormer is helpful to your images or projects, please help star this repo. Thanks! &lt;span&gt;ü§ó&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;[&lt;font color=&#34;#d1585d&#34;&gt;News&lt;/font&gt;]&lt;/strong&gt;: &lt;span&gt;üê≥&lt;/span&gt; &lt;em&gt;Due to copyright issues, we have to delay the release of the training code (expected by the end of this year). Please star and stay tuned for our future updates!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Update&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;2022.10.05&lt;/strong&gt;: Support video input &lt;code&gt;--input_path [YOUR_VIDOE.mp4]&lt;/code&gt;. Try it to enhance your videos! &lt;span&gt;üé¨&lt;/span&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2022.09.14&lt;/strong&gt;: Integrated to &lt;span&gt;ü§ó&lt;/span&gt; &lt;a href=&#34;https://huggingface.co/spaces&#34;&gt;Hugging Face&lt;/a&gt;. Try out online demo! &lt;a href=&#34;https://huggingface.co/spaces/sczhou/CodeFormer&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Demo-%F0%9F%A4%97%20Hugging%20Face-blue&#34; alt=&#34;Hugging Face&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2022.09.09&lt;/strong&gt;: Integrated to &lt;span&gt;üöÄ&lt;/span&gt; &lt;a href=&#34;https://replicate.com/explore&#34;&gt;Replicate&lt;/a&gt;. Try out online demo! &lt;a href=&#34;https://replicate.com/sczhou/codeformer&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Demo-%F0%9F%9A%80%20Replicate-blue&#34; alt=&#34;Replicate&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2022.09.04&lt;/strong&gt;: Add face upsampling &lt;code&gt;--face_upsample&lt;/code&gt; for high-resolution AI-created face enhancement.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2022.08.23&lt;/strong&gt;: Some modifications on face detection and fusion for better AI-created face enhancement.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2022.08.07&lt;/strong&gt;: Integrate &lt;a href=&#34;https://github.com/xinntao/Real-ESRGAN&#34;&gt;Real-ESRGAN&lt;/a&gt; to support background image enhancement.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2022.07.29&lt;/strong&gt;: Integrate new face detectors of &lt;code&gt;[&#39;RetinaFace&#39;(default), &#39;YOLOv5&#39;]&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2022.07.17&lt;/strong&gt;: Add Colab demo of CodeFormer. &lt;a href=&#34;https://colab.research.google.com/drive/1m52PNveE4PBhYrecj34cnpEeiHcC5LTb?usp=sharing&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;google colab logo&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2022.07.16&lt;/strong&gt;: Release inference code for face restoration. &lt;span&gt;üòä&lt;/span&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2022.06.21&lt;/strong&gt;: This repo is created.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;TODO&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add checkpoint for face inpainting&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add checkpoint for face colorization&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add training code and config files&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;del&gt;Add background image enhancement&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;span&gt;üêº&lt;/span&gt; Try Enhancing Old Photos / Fixing AI-arts&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://imgsli.com/MTI3NTE2&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sczhou/CodeFormer/master/assets/imgsli_1.jpg&#34; height=&#34;226px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://imgsli.com/MTI3NTE1&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sczhou/CodeFormer/master/assets/imgsli_2.jpg&#34; height=&#34;226px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://imgsli.com/MTI3NTIw&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sczhou/CodeFormer/master/assets/imgsli_3.jpg&#34; height=&#34;226px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Face Restoration&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sczhou/CodeFormer/master/assets/restoration_result1.png&#34; width=&#34;400px&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/sczhou/CodeFormer/master/assets/restoration_result2.png&#34; width=&#34;400px&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/sczhou/CodeFormer/master/assets/restoration_result3.png&#34; width=&#34;400px&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/sczhou/CodeFormer/master/assets/restoration_result4.png&#34; width=&#34;400px&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Face Color Enhancement and Restoration&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sczhou/CodeFormer/master/assets/color_enhancement_result1.png&#34; width=&#34;400px&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/sczhou/CodeFormer/master/assets/color_enhancement_result2.png&#34; width=&#34;400px&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Face Inpainting&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sczhou/CodeFormer/master/assets/inpainting_result1.png&#34; width=&#34;400px&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/sczhou/CodeFormer/master/assets/inpainting_result2.png&#34; width=&#34;400px&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Dependencies and Installation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pytorch &amp;gt;= 1.7.1&lt;/li&gt; &#xA; &lt;li&gt;CUDA &amp;gt;= 10.1&lt;/li&gt; &#xA; &lt;li&gt;Other required packages in &lt;code&gt;requirements.txt&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;# git clone this repository&#xA;git clone https://github.com/sczhou/CodeFormer&#xA;cd CodeFormer&#xA;&#xA;# create new anaconda env&#xA;conda create -n codeformer python=3.8 -y&#xA;conda activate codeformer&#xA;&#xA;# install python dependencies&#xA;pip3 install -r requirements.txt&#xA;python basicsr/setup.py develop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- conda install -c conda-forge dlib --&gt; &#xA;&lt;h3&gt;Quick Inference&lt;/h3&gt; &#xA;&lt;h4&gt;Download Pre-trained Models:&lt;/h4&gt; &#xA;&lt;p&gt;Download the facelib pretrained models from [&lt;a href=&#34;https://drive.google.com/drive/folders/1b_3qwrzY_kTQh0-SnBoGBgOrJ_PLZSKm?usp=sharing&#34;&gt;Google Drive&lt;/a&gt; | &lt;a href=&#34;https://entuedu-my.sharepoint.com/:f:/g/personal/s200094_e_ntu_edu_sg/EvDxR7FcAbZMp_MA9ouq7aQB8XTppMb3-T0uGZ_2anI2mg?e=DXsJFo&#34;&gt;OneDrive&lt;/a&gt;] to the &lt;code&gt;weights/facelib&lt;/code&gt; folder. You can manually download the pretrained models OR download by runing the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/download_pretrained_models.py facelib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Download the CodeFormer pretrained models from [&lt;a href=&#34;https://drive.google.com/drive/folders/1CNNByjHDFt0b95q54yMVp6Ifo5iuU6QS?usp=sharing&#34;&gt;Google Drive&lt;/a&gt; | &lt;a href=&#34;https://entuedu-my.sharepoint.com/:f:/g/personal/s200094_e_ntu_edu_sg/EoKFj4wo8cdIn2-TY2IV6CYBhZ0pIG4kUOeHdPR_A5nlbg?e=AO8UN9&#34;&gt;OneDrive&lt;/a&gt;] to the &lt;code&gt;weights/CodeFormer&lt;/code&gt; folder. You can manually download the pretrained models OR download by runing the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/download_pretrained_models.py CodeFormer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Prepare Testing Data:&lt;/h4&gt; &#xA;&lt;p&gt;You can put the testing images in the &lt;code&gt;inputs/TestWhole&lt;/code&gt; folder. If you would like to test on cropped and aligned faces, you can put them in the &lt;code&gt;inputs/cropped_faces&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h4&gt;Testing on Face Restoration:&lt;/h4&gt; &#xA;&lt;p&gt;[Note] If you want to compare CodeFormer in your paper, please run the following command indicating &lt;code&gt;--has_aligned&lt;/code&gt; (for cropped and aligned face), as the command for the whole image will involve a process of face-background fusion that may damage hair texture on the boundary, which leads to unfair comparison.&lt;/p&gt; &#xA;&lt;p&gt;üßëüèª Face Restoration (cropped and aligned face)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# For cropped and aligned faces&#xA;python inference_codeformer.py -w 0.5 --has_aligned --input_path [input folder]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;üñº&lt;/span&gt; Whole Image Enhancement&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# For whole image&#xA;# Add &#39;--bg_upsampler realesrgan&#39; to enhance the background regions with Real-ESRGAN&#xA;# Add &#39;--face_upsample&#39; to further upsample restorated face with Real-ESRGAN&#xA;python inference_codeformer.py -w 0.7 --input_path [image folder/image path]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;üé¨&lt;/span&gt; Video Enhancement&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# For video clips&#xA;# Set frame rate of saved video via &#39;--save_video_fps 24&#39;&#xA;python inference_codeformer.py --bg_upsampler realesrgan --face_upsample -w 1.0 --input_path [video path] --save_video_fps 24&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fidelity weight &lt;em&gt;w&lt;/em&gt; lays in [0, 1]. Generally, smaller &lt;em&gt;w&lt;/em&gt; tends to produce a higher-quality result, while larger &lt;em&gt;w&lt;/em&gt; yields a higher-fidelity result.&lt;/p&gt; &#xA;&lt;p&gt;The results will be saved in the &lt;code&gt;results&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h3&gt;Citation&lt;/h3&gt; &#xA;&lt;p&gt;If our work is useful for your research, please consider citing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{zhou2022codeformer,&#xA;    author = {Zhou, Shangchen and Chan, Kelvin C.K. and Li, Chongyi and Loy, Chen Change},&#xA;    title = {Towards Robust Blind Face Restoration with Codebook Lookup TransFormer},&#xA;    booktitle = {NeurIPS},&#xA;    year = {2022}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;This project is licensed under &lt;a rel=&#34;license&#34; href=&#34;https://github.com/sczhou/CodeFormer/raw/master/LICENSE&#34;&gt;S-Lab License 1.0&lt;/a&gt;. Redistribution and use for non-commercial purposes should follow this license.&lt;/p&gt; &#xA;&lt;h3&gt;Acknowledgement&lt;/h3&gt; &#xA;&lt;p&gt;This project is based on &lt;a href=&#34;https://github.com/XPixelGroup/BasicSR&#34;&gt;BasicSR&lt;/a&gt;. Some codes are brought from &lt;a href=&#34;https://github.com/samb-t/unleashing-transformers&#34;&gt;Unleashing Transformers&lt;/a&gt;, &lt;a href=&#34;https://github.com/deepcam-cn/yolov5-face&#34;&gt;YOLOv5-face&lt;/a&gt;, and &lt;a href=&#34;https://github.com/xinntao/facexlib&#34;&gt;FaceXLib&lt;/a&gt;. We also adopt &lt;a href=&#34;https://github.com/xinntao/Real-ESRGAN&#34;&gt;Real-ESRGAN&lt;/a&gt; to support background image enhancement. Thanks for their awesome works.&lt;/p&gt; &#xA;&lt;h3&gt;Contact&lt;/h3&gt; &#xA;&lt;p&gt;If you have any question, please feel free to reach me out at &lt;code&gt;shangchenzhou@gmail.com&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>