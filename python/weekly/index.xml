<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-04T01:46:17Z</updated>
  <subtitle>Weekly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Stability-AI/stablediffusion</title>
    <updated>2022-12-04T01:46:17Z</updated>
    <id>tag:github.com,2022-12-04:/Stability-AI/stablediffusion</id>
    <link href="https://github.com/Stability-AI/stablediffusion" rel="alternate"></link>
    <summary type="html">&lt;p&gt;High-Resolution Image Synthesis with Latent Diffusion Models&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Stable Diffusion 2.0&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Stability-AI/stablediffusion/main/assets/stable-samples/txt2img/768/merged-0006.png&#34; alt=&#34;t2i&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Stability-AI/stablediffusion/main/assets/stable-samples/txt2img/768/merged-0002.png&#34; alt=&#34;t2i&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Stability-AI/stablediffusion/main/assets/stable-samples/txt2img/768/merged-0005.png&#34; alt=&#34;t2i&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository contains &lt;a href=&#34;https://github.com/CompVis/stable-diffusion&#34;&gt;Stable Diffusion&lt;/a&gt; models trained from scratch and will be continuously updated with new checkpoints. The following list provides an overview of all currently available models. More coming soon.&lt;/p&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;November 2022&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;New stable diffusion model (&lt;em&gt;Stable Diffusion 2.0-v&lt;/em&gt;) at 768x768 resolution. Same number of parameters in the U-Net as 1.5, but uses &lt;a href=&#34;https://github.com/mlfoundations/open_clip&#34;&gt;OpenCLIP-ViT/H&lt;/a&gt; as the text encoder and is trained from scratch. &lt;em&gt;SD 2.0-v&lt;/em&gt; is a so-called &lt;a href=&#34;https://arxiv.org/abs/2202.00512&#34;&gt;v-prediction&lt;/a&gt; model.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The above model is finetuned from &lt;em&gt;SD 2.0-base&lt;/em&gt;, which was trained as a standard noise-prediction model on 512x512 images and is also made available.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Added a &lt;a href=&#34;https://raw.githubusercontent.com/Stability-AI/stablediffusion/main/#image-upscaling-with-stable-diffusion&#34;&gt;x4 upscaling latent text-guided diffusion model&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;New &lt;a href=&#34;https://raw.githubusercontent.com/Stability-AI/stablediffusion/main/#depth-conditional-stable-diffusion&#34;&gt;depth-guided stable diffusion model&lt;/a&gt;, finetuned from &lt;em&gt;SD 2.0-base&lt;/em&gt;. The model is conditioned on monocular depth estimates inferred via &lt;a href=&#34;https://github.com/isl-org/MiDaS&#34;&gt;MiDaS&lt;/a&gt; and can be used for structure-preserving img2img and shape-conditional synthesis.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Stability-AI/stablediffusion/main/assets/stable-samples/depth2img/depth2img01.png&#34; alt=&#34;d2i&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/Stability-AI/stablediffusion/main/#image-inpainting-with-stable-diffusion&#34;&gt;text-guided inpainting model&lt;/a&gt;, finetuned from SD &lt;em&gt;2.0-base&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We follow the &lt;a href=&#34;https://github.com/CompVis/stable-diffusion&#34;&gt;original repository&lt;/a&gt; and provide basic inference scripts to sample from the models.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;em&gt;The original Stable Diffusion model was created in a collaboration with &lt;a href=&#34;https://arxiv.org/abs/2202.00512&#34;&gt;CompVis&lt;/a&gt; and &lt;a href=&#34;https://runwayml.com/&#34;&gt;RunwayML&lt;/a&gt; and builds upon the work:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ommer-lab.com/research/latent-diffusion-models/&#34;&gt;&lt;strong&gt;High-Resolution Image Synthesis with Latent Diffusion Models&lt;/strong&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/rromb&#34;&gt;Robin Rombach&lt;/a&gt;*, &lt;a href=&#34;https://github.com/ablattmann&#34;&gt;Andreas Blattmann&lt;/a&gt;*, &lt;a href=&#34;https://github.com/qp-qp&#34;&gt;Dominik Lorenz&lt;/a&gt;, &lt;a href=&#34;https://github.com/pesser&#34;&gt;Patrick Esser&lt;/a&gt;, &lt;a href=&#34;https://hci.iwr.uni-heidelberg.de/Staff/bommer&#34;&gt;Bj√∂rn Ommer&lt;/a&gt;&lt;br&gt; &lt;em&gt;&lt;a href=&#34;https://openaccess.thecvf.com/content/CVPR2022/html/Rombach_High-Resolution_Image_Synthesis_With_Latent_Diffusion_Models_CVPR_2022_paper.html&#34;&gt;CVPR &#39;22 Oral&lt;/a&gt; | &lt;a href=&#34;https://github.com/CompVis/latent-diffusion&#34;&gt;GitHub&lt;/a&gt; | &lt;a href=&#34;https://arxiv.org/abs/2112.10752&#34;&gt;arXiv&lt;/a&gt; | &lt;a href=&#34;https://ommer-lab.com/research/latent-diffusion-models/&#34;&gt;Project page&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;and &lt;a href=&#34;https://raw.githubusercontent.com/Stability-AI/stablediffusion/main/#shout-outs&#34;&gt;many others&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Stable Diffusion is a latent text-to-image diffusion model.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;You can update an existing &lt;a href=&#34;https://github.com/CompVis/latent-diffusion&#34;&gt;latent diffusion&lt;/a&gt; environment by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda install pytorch==1.12.1 torchvision==0.13.1 -c pytorch&#xA;pip install transformers==4.19.2 diffusers invisible-watermark&#xA;pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;xformers efficient attention&lt;/h4&gt; &#xA;&lt;p&gt;For more efficiency and speed on GPUs, we highly recommended installing the &lt;a href=&#34;https://github.com/facebookresearch/xformers&#34;&gt;xformers&lt;/a&gt; library.&lt;/p&gt; &#xA;&lt;p&gt;Tested on A100 with CUDA 11.4. Installation needs a somewhat recent version of nvcc and gcc/g++, obtain those, e.g., via&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-commandline&#34;&gt;export CUDA_HOME=/usr/local/cuda-11.4&#xA;conda install -c nvidia/label/cuda-11.4.0 cuda-nvcc&#xA;conda install -c conda-forge gcc&#xA;conda install -c conda-forge gxx_linux-64=9.5.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, run the following (compiling takes up to 30 min).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-commandline&#34;&gt;cd ..&#xA;git clone https://github.com/facebookresearch/xformers.git&#xA;cd xformers&#xA;git submodule update --init --recursive&#xA;pip install -r requirements.txt&#xA;pip install -e .&#xA;cd ../stablediffusion&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Upon successful installation, the code will automatically default to &lt;a href=&#34;https://github.com/facebookresearch/xformers&#34;&gt;memory efficient attention&lt;/a&gt; for the self- and cross-attention layers in the U-Net and autoencoder.&lt;/p&gt; &#xA;&lt;h2&gt;General Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Stable Diffusion models are general text-to-image diffusion models and therefore mirror biases and (mis-)conceptions that are present in their training data. Although efforts were made to reduce the inclusion of explicit pornographic material, &lt;strong&gt;we do not recommend using the provided weights for services or products without additional safety mechanisms and considerations. The weights are research artifacts and should be treated as such.&lt;/strong&gt; Details on the training procedure and data, as well as the intended use of the model can be found in the corresponding &lt;a href=&#34;https://huggingface.co/stabilityai/stable-diffusion-2&#34;&gt;model card&lt;/a&gt;. The weights are available via &lt;a href=&#34;https://huggingface.co/StabilityAI&#34;&gt;the StabilityAI organization at Hugging Face&lt;/a&gt; under the &lt;a href=&#34;https://raw.githubusercontent.com/Stability-AI/stablediffusion/main/LICENSE-MODEL&#34;&gt;CreativeML Open RAIL++-M License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Stable Diffusion v2.0&lt;/h2&gt; &#xA;&lt;p&gt;Stable Diffusion v2.0 refers to a specific configuration of the model architecture that uses a downsampling-factor 8 autoencoder with an 865M UNet and OpenCLIP ViT-H/14 text encoder for the diffusion model. The &lt;em&gt;SD 2.0-v&lt;/em&gt; model produces 768x768 px outputs.&lt;/p&gt; &#xA;&lt;p&gt;Evaluations with different classifier-free guidance scales (1.5, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0) and 50 DDIM sampling steps show the relative improvements of the checkpoints:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Stability-AI/stablediffusion/main/assets/model-variants.jpg&#34; alt=&#34;sd evaluation results&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Text-to-Image&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Stability-AI/stablediffusion/main/assets/stable-samples/txt2img/merged-0003.png&#34; alt=&#34;txt2img-stable2&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Stability-AI/stablediffusion/main/assets/stable-samples/txt2img/merged-0001.png&#34; alt=&#34;txt2img-stable2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Stable Diffusion 2.0 is a latent diffusion model conditioned on the penultimate text embeddings of a CLIP ViT-H/14 text encoder. We provide a &lt;a href=&#34;https://raw.githubusercontent.com/Stability-AI/stablediffusion/main/#reference-sampling-script&#34;&gt;reference script for sampling&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Reference Sampling Script&lt;/h4&gt; &#xA;&lt;p&gt;This script incorporates an &lt;a href=&#34;https://github.com/ShieldMnt/invisible-watermark&#34;&gt;invisible watermarking&lt;/a&gt; of the outputs, to help viewers &lt;a href=&#34;https://raw.githubusercontent.com/Stability-AI/stablediffusion/main/scripts/tests/test_watermark.py&#34;&gt;identify the images as machine-generated&lt;/a&gt;. We provide the configs for the &lt;em&gt;SD2.0-v&lt;/em&gt; (768px) and &lt;em&gt;SD2.0-base&lt;/em&gt; (512px) model.&lt;/p&gt; &#xA;&lt;p&gt;First, download the weights for &lt;a href=&#34;https://huggingface.co/stabilityai/stable-diffusion-2&#34;&gt;&lt;em&gt;SD2.0-v&lt;/em&gt;&lt;/a&gt; and &lt;a href=&#34;https://huggingface.co/stabilityai/stable-diffusion-2-base&#34;&gt;&lt;em&gt;SD2.0-base&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To sample from the &lt;em&gt;SD2.0-v&lt;/em&gt; model, run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/txt2img.py --prompt &#34;a professional photograph of an astronaut riding a horse&#34; --ckpt &amp;lt;path/to/768model.ckpt/&amp;gt; --config configs/stable-diffusion/v2-inference-v.yaml --H 768 --W 768  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or try out the Web Demo: &lt;a href=&#34;https://huggingface.co/spaces/stabilityai/stable-diffusion&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To sample from the base model, use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/txt2img.py --prompt &#34;a professional photograph of an astronaut riding a horse&#34; --ckpt &amp;lt;path/to/model.ckpt/&amp;gt; --config &amp;lt;path/to/config.yaml/&amp;gt;  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, this uses the &lt;a href=&#34;https://arxiv.org/abs/2010.02502&#34;&gt;DDIM sampler&lt;/a&gt;, and renders images of size 768x768 (which it was trained on) in 50 steps. Empirically, the v-models can be sampled with higher guidance scales.&lt;/p&gt; &#xA;&lt;p&gt;Note: The inference config for all model versions is designed to be used with EMA-only checkpoints. For this reason &lt;code&gt;use_ema=False&lt;/code&gt; is set in the configuration, otherwise the code will try to switch from non-EMA to EMA weights.&lt;/p&gt; &#xA;&lt;h3&gt;Image Modification with Stable Diffusion&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Stability-AI/stablediffusion/main/assets/stable-samples/depth2img/merged-0000.png&#34; alt=&#34;depth2img-stable2&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Depth-Conditional Stable Diffusion&lt;/h4&gt; &#xA;&lt;p&gt;To augment the well-established &lt;a href=&#34;https://github.com/CompVis/stable-diffusion#image-modification-with-stable-diffusion&#34;&gt;img2img&lt;/a&gt; functionality of Stable Diffusion, we provide a &lt;em&gt;shape-preserving&lt;/em&gt; stable diffusion model.&lt;/p&gt; &#xA;&lt;p&gt;Note that the original method for image modification introduces significant semantic changes w.r.t. the initial image. If that is not desired, download our &lt;a href=&#34;https://huggingface.co/stabilityai/stable-diffusion-2-depth&#34;&gt;depth-conditional stable diffusion&lt;/a&gt; model and the &lt;code&gt;dpt_hybrid&lt;/code&gt; MiDaS &lt;a href=&#34;https://github.com/intel-isl/DPT/releases/download/1_0/dpt_hybrid-midas-501f0c75.pt&#34;&gt;model weights&lt;/a&gt;, place the latter in a folder &lt;code&gt;midas_models&lt;/code&gt; and sample via&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/gradio/depth2img.py configs/stable-diffusion/v2-midas-inference.yaml &amp;lt;path-to-ckpt&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;streamlit run scripts/streamlit/depth2img.py configs/stable-diffusion/v2-midas-inference.yaml &amp;lt;path-to-ckpt&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method can be used on the samples of the base model itself. For example, take &lt;a href=&#34;https://raw.githubusercontent.com/Stability-AI/stablediffusion/main/assets/stable-samples/depth2img/old_man.png&#34;&gt;this sample&lt;/a&gt; generated by an anonymous discord user. Using the &lt;a href=&#34;https://gradio.app&#34;&gt;gradio&lt;/a&gt; or &lt;a href=&#34;https://streamlit.io/&#34;&gt;streamlit&lt;/a&gt; script &lt;code&gt;depth2img.py&lt;/code&gt;, the MiDaS model first infers a monocular depth estimate given this input, and the diffusion model is then conditioned on the (relative) depth output.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt; depth2image &lt;/b&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Stability-AI/stablediffusion/main/assets/stable-samples/depth2img/d2i.gif/&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;This model is particularly useful for a photorealistic style; see the &lt;a href=&#34;https://raw.githubusercontent.com/Stability-AI/stablediffusion/main/assets/stable-samples/depth2img&#34;&gt;examples&lt;/a&gt;. For a maximum strength of 1.0, the model removes all pixel-based information and only relies on the text prompt and the inferred monocular depth estimate.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Stability-AI/stablediffusion/main/assets/stable-samples/depth2img/merged-0005.png&#34; alt=&#34;depth2img-stable3&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Classic Img2Img&lt;/h4&gt; &#xA;&lt;p&gt;For running the &#34;classic&#34; img2img, use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/img2img.py --prompt &#34;A fantasy landscape, trending on artstation&#34; --init-img &amp;lt;path-to-img.jpg&amp;gt; --strength 0.8 --ckpt &amp;lt;path/to/model.ckpt&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and adapt the checkpoint and config paths accordingly.&lt;/p&gt; &#xA;&lt;h3&gt;Image Upscaling with Stable Diffusion&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Stability-AI/stablediffusion/main/assets/stable-samples/upscaling/merged-dog.png&#34; alt=&#34;upscaling-x4&#34;&gt; After &lt;a href=&#34;https://huggingface.co/stabilityai/stable-diffusion-x4-upscaler&#34;&gt;downloading the weights&lt;/a&gt;, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/gradio/superresolution.py configs/stable-diffusion/x4-upscaling.yaml &amp;lt;path-to-checkpoint&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;streamlit run scripts/streamlit/superresolution.py -- configs/stable-diffusion/x4-upscaling.yaml &amp;lt;path-to-checkpoint&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;for a Gradio or Streamlit demo of the text-guided x4 superresolution model.&lt;br&gt; This model can be used both on real inputs and on synthesized examples. For the latter, we recommend setting a higher &lt;code&gt;noise_level&lt;/code&gt;, e.g. &lt;code&gt;noise_level=100&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Image Inpainting with Stable Diffusion&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Stability-AI/stablediffusion/main/assets/stable-inpainting/merged-leopards.png&#34; alt=&#34;inpainting-stable2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://huggingface.co/stabilityai/stable-diffusion-2-inpainting&#34;&gt;Download the SD 2.0-inpainting checkpoint&lt;/a&gt; and run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/gradio/inpainting.py configs/stable-diffusion/v2-inpainting-inference.yaml &amp;lt;path-to-checkpoint&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;streamlit run scripts/streamlit/inpainting.py -- configs/stable-diffusion/v2-inpainting-inference.yaml &amp;lt;path-to-checkpoint&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;for a Gradio or Streamlit demo of the inpainting model. This scripts adds invisible watermarking to the demo in the &lt;a href=&#34;https://github.com/runwayml/stable-diffusion/raw/main/scripts/inpaint_st.py&#34;&gt;RunwayML&lt;/a&gt; repository, but both should work interchangeably with the checkpoints/configs.&lt;/p&gt; &#xA;&lt;h2&gt;Shout-Outs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Thanks to &lt;a href=&#34;https://huggingface.co/&#34;&gt;Hugging Face&lt;/a&gt; and in particular &lt;a href=&#34;https://github.com/apolinario&#34;&gt;Apolin√°rio&lt;/a&gt; for support with our model releases!&lt;/li&gt; &#xA; &lt;li&gt;Stable Diffusion would not be possible without &lt;a href=&#34;https://laion.ai/&#34;&gt;LAION&lt;/a&gt; and their efforts to create open, large-scale datasets.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://twitter.com/deepfloydai&#34;&gt;DeepFloyd team&lt;/a&gt; at Stability AI, for creating the subset of &lt;a href=&#34;https://laion.ai/blog/laion-5b/&#34;&gt;LAION-5B&lt;/a&gt; dataset used to train the model.&lt;/li&gt; &#xA; &lt;li&gt;Stable Diffusion 2.0 uses &lt;a href=&#34;https://laion.ai/blog/large-openclip/&#34;&gt;OpenCLIP&lt;/a&gt;, trained by &lt;a href=&#34;https://github.com/rom1504&#34;&gt;Romain Beaumont&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Our codebase for the diffusion models builds heavily on &lt;a href=&#34;https://github.com/openai/guided-diffusion&#34;&gt;OpenAI&#39;s ADM codebase&lt;/a&gt; and &lt;a href=&#34;https://github.com/lucidrains/denoising-diffusion-pytorch&#34;&gt;https://github.com/lucidrains/denoising-diffusion-pytorch&lt;/a&gt;. Thanks for open-sourcing!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CompVis/stable-diffusion&#34;&gt;CompVis&lt;/a&gt; initial stable diffusion release&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pesser&#34;&gt;Patrick&lt;/a&gt;&#39;s &lt;a href=&#34;https://github.com/runwayml/stable-diffusion/raw/main/scripts/inpaint_st.py&#34;&gt;implementation&lt;/a&gt; of the streamlit demo for inpainting.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;img2img&lt;/code&gt; is an application of &lt;a href=&#34;https://arxiv.org/abs/2108.01073&#34;&gt;SDEdit&lt;/a&gt; by &lt;a href=&#34;https://cs.stanford.edu/~chenlin/&#34;&gt;Chenlin Meng&lt;/a&gt; from the &lt;a href=&#34;https://cs.stanford.edu/~ermon/website/&#34;&gt;Stanford AI Lab&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Stability-AI/stablediffusion/main/(https://github.com/CompVis/latent-diffusion/pull/51)&#34;&gt;Kat&#39;s implementation&lt;/a&gt; of the &lt;a href=&#34;https://arxiv.org/abs/2202.09778&#34;&gt;PLMS&lt;/a&gt; sampler, and &lt;a href=&#34;https://github.com/crowsonkb/k-diffusion&#34;&gt;more&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2206.00927&#34;&gt;DPMSolver&lt;/a&gt; &lt;a href=&#34;https://github.com/CompVis/stable-diffusion/pull/440&#34;&gt;integration&lt;/a&gt; by &lt;a href=&#34;https://github.com/LuChengTHU&#34;&gt;Cheng Lu&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Facebook&#39;s &lt;a href=&#34;https://github.com/facebookresearch/xformers&#34;&gt;xformers&lt;/a&gt; for efficient attention computation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/isl-org/MiDaS&#34;&gt;MiDaS&lt;/a&gt; for monocular depth estimation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The code in this repository is released under the MIT License.&lt;/p&gt; &#xA;&lt;p&gt;The weights are available via &lt;a href=&#34;https://huggingface.co/StabilityAI&#34;&gt;the StabilityAI organization at Hugging Face&lt;/a&gt;, and released under the &lt;a href=&#34;https://raw.githubusercontent.com/Stability-AI/stablediffusion/main/LICENSE-MODEL&#34;&gt;CreativeML Open RAIL++-M License&lt;/a&gt; License.&lt;/p&gt; &#xA;&lt;h2&gt;BibTeX&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{rombach2021highresolution,&#xA;      title={High-Resolution Image Synthesis with Latent Diffusion Models}, &#xA;      author={Robin Rombach and Andreas Blattmann and Dominik Lorenz and Patrick Esser and Bj√∂rn Ommer},&#xA;      year={2021},&#xA;      eprint={2112.10752},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.CV}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>mlfoundations/open_clip</title>
    <updated>2022-12-04T01:46:17Z</updated>
    <id>tag:github.com,2022-12-04:/mlfoundations/open_clip</id>
    <link href="https://github.com/mlfoundations/open_clip" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open source implementation of CLIP.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenCLIP&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2109.01903&#34;&gt;[Paper]&lt;/a&gt; &lt;a href=&#34;https://colab.research.google.com/github/mlfoundations/open_clip/blob/master/docs/Interacting_with_open_clip.ipynb&#34;&gt;[Colab]&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Welcome to an open source implementation of OpenAI&#39;s &lt;a href=&#34;https://arxiv.org/abs/2103.00020&#34;&gt;CLIP&lt;/a&gt; (Contrastive Language-Image Pre-training).&lt;/p&gt; &#xA;&lt;p&gt;The goal of this repository is to enable training models with contrastive image-text supervision, and to investigate their properties such as robustness to distribution shift. Our starting point is an implementation of CLIP that matches the accuracy of the original CLIP models when trained on the same dataset. Specifically, a ResNet-50 model trained with our codebase on OpenAI&#39;s &lt;a href=&#34;https://github.com/openai/CLIP/raw/main/data/yfcc100m.md&#34;&gt;15 million image subset of YFCC&lt;/a&gt; achieves &lt;strong&gt;32.7%&lt;/strong&gt; top-1 accuracy on ImageNet. OpenAI&#39;s CLIP model reaches &lt;strong&gt;31.3%&lt;/strong&gt; when trained on the same subset of YFCC. For ease of experimentation, we also provide code for training on the 3 million images in the &lt;a href=&#34;https://ai.google.com/research/ConceptualCaptions/download&#34;&gt;Conceptual Captions&lt;/a&gt; dataset, where a ResNet-50x4 trained with our codebase reaches 22.2% top-1 ImageNet accuracy.&lt;/p&gt; &#xA;&lt;p&gt;We further this with a replication study on a dataset of comparable size to OpenAI&#39;s, &lt;a href=&#34;https://arxiv.org/abs/2111.02114&#34;&gt;LAION-400M&lt;/a&gt;, and with the larger &lt;a href=&#34;https://laion.ai/blog/laion-5b/&#34;&gt;LAION-2B&lt;/a&gt; superset.&lt;/p&gt; &#xA;&lt;p&gt;We have trained:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ViT-B/32 on LAION-400M with a accuracy of &lt;strong&gt;62.9%&lt;/strong&gt;, comparable to OpenAI&#39;s &lt;strong&gt;63.2%&lt;/strong&gt;, zero-shot top-1 on ImageNet1k&lt;/li&gt; &#xA; &lt;li&gt;ViT-B/32 on LAION-2B with a accuracy of &lt;strong&gt;66.6%&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;ViT-B/16 on LAION-400M achieving an accuracy of &lt;strong&gt;67.1%&lt;/strong&gt;, lower than OpenAI&#39;s &lt;strong&gt;68.3%&lt;/strong&gt; (as measured here, 68.6% in paper)&lt;/li&gt; &#xA; &lt;li&gt;ViT-B/16+ 240x240 (~50% more FLOPS than B/16 224x224) on LAION-400M achieving an accuracy of &lt;strong&gt;69.2%&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;ViT-L/14 on LAION-400M with an accuracy of &lt;strong&gt;72.77%&lt;/strong&gt;, vs OpenAI&#39;s &lt;strong&gt;75.5%&lt;/strong&gt; (as measured here, 75.3% in paper)&lt;/li&gt; &#xA; &lt;li&gt;ViT-L/14 on LAION-2B with an accuracy of &lt;strong&gt;75.3%&lt;/strong&gt;, vs OpenAI&#39;s &lt;strong&gt;75.5%&lt;/strong&gt; (as measured here, 75.3% in paper)&lt;/li&gt; &#xA; &lt;li&gt;ViT-H/14 on LAION-2B with an accuracy of &lt;strong&gt;78.0&lt;/strong&gt;. The best in1k zero-shot for released, open-source weights thus far.&lt;/li&gt; &#xA; &lt;li&gt;ViT-g/14 on LAION-2B with an accuracy of &lt;strong&gt;76.6&lt;/strong&gt;. This was trained on reduced schedule, same samples seen as 400M models.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As we describe in more detail &lt;a href=&#34;https://raw.githubusercontent.com/mlfoundations/open_clip/main/#why-are-low-accuracy-clip-models-interesting&#34;&gt;below&lt;/a&gt;, CLIP models in a medium accuracy regime already allow us to draw conclusions about the robustness of larger CLIP models since the models follow &lt;a href=&#34;https://arxiv.org/abs/2107.04649&#34;&gt;reliable scaling laws&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This codebase is work in progress, and we invite all to contribute in making it more accessible and useful. In the future, we plan to add support for TPU training and release larger models. We hope this codebase facilitates and promotes further research in contrastive image-text learning. Please submit an issue or send an email if you have any other requests or suggestions.&lt;/p&gt; &#xA;&lt;p&gt;Note that portions of &lt;code&gt;src/open_clip/&lt;/code&gt; modelling and tokenizer code are adaptations of OpenAI&#39;s official &lt;a href=&#34;https://github.com/openai/CLIP&#34;&gt;repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Approach&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mlfoundations/open_clip/main/docs/CLIP.png&#34; alt=&#34;CLIP&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Image Credit: &lt;a href=&#34;https://github.com/openai/CLIP&#34;&gt;https://github.com/openai/CLIP&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install open_clip_torch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch&#xA;from PIL import Image&#xA;import open_clip&#xA;&#xA;model, _, preprocess = open_clip.create_model_and_transforms(&#39;ViT-B-32-quickgelu&#39;, pretrained=&#39;laion400m_e32&#39;)&#xA;tokenizer = open_clip.get_tokenizer(&#39;ViT-B-32-quickgelu&#39;)&#xA;&#xA;image = preprocess(Image.open(&#34;CLIP.png&#34;)).unsqueeze(0)&#xA;text = tokenizer([&#34;a diagram&#34;, &#34;a dog&#34;, &#34;a cat&#34;])&#xA;&#xA;with torch.no_grad(), torch.cuda.amp.autocast():&#xA;    image_features = model.encode_image(image)&#xA;    text_features = model.encode_text(text)&#xA;    image_features /= image_features.norm(dim=-1, keepdim=True)&#xA;    text_features /= text_features.norm(dim=-1, keepdim=True)&#xA;&#xA;    text_probs = (100.0 * image_features @ text_features.T).softmax(dim=-1)&#xA;&#xA;print(&#34;Label probs:&#34;, text_probs)  # prints: [[1., 0., 0.]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To compute billions of embeddings efficiently, you can use &lt;a href=&#34;https://github.com/rom1504/clip-retrieval&#34;&gt;clip-retrieval&lt;/a&gt; which has openclip support.&lt;/p&gt; &#xA;&lt;h2&gt;Fine-tuning on classification tasks&lt;/h2&gt; &#xA;&lt;p&gt;This repository is focused on training CLIP models. To fine-tune a &lt;em&gt;trained&lt;/em&gt; zero-shot model on a downstream classification task such as ImageNet, please see &lt;a href=&#34;https://github.com/mlfoundations/wise-ft&#34;&gt;our other repository: WiSE-FT&lt;/a&gt;. The &lt;a href=&#34;https://github.com/mlfoundations/wise-ft&#34;&gt;WiSE-FT repository&lt;/a&gt; contains code for our paper on &lt;a href=&#34;https://arxiv.org/abs/2109.01903&#34;&gt;Robust Fine-tuning of Zero-shot Models&lt;/a&gt;, in which we introduce a technique for fine-tuning zero-shot models while preserving robustness under distribution shift.&lt;/p&gt; &#xA;&lt;h2&gt;Data&lt;/h2&gt; &#xA;&lt;p&gt;To download datasets as webdataset, we recommend &lt;a href=&#34;https://github.com/rom1504/img2dataset&#34;&gt;img2dataset&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Conceptual Captions&lt;/h3&gt; &#xA;&lt;p&gt;OpenCLIP reads a CSV file with two columns: a path to an image, and a text caption. The names of the columns are passed as an argument to &lt;code&gt;main.py&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The script &lt;code&gt;src/data/gather_cc.py&lt;/code&gt; will collect the Conceptual Captions images. First, download the &lt;a href=&#34;https://ai.google.com/research/ConceptualCaptions/download&#34;&gt;Conceptual Captions URLs&lt;/a&gt; and then run the script from our repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 src/data/gather_cc.py path/to/Train_GCC-training.tsv path/to/Validation_GCC-1.1.0-Validation.tsv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Our training set contains 2.89M images, and our validation set contains 13K images.&lt;/p&gt; &#xA;&lt;h3&gt;YFCC and other datasets&lt;/h3&gt; &#xA;&lt;p&gt;In addition to specifying the training data via CSV files as mentioned above, our codebase also supports &lt;a href=&#34;https://github.com/webdataset/webdataset&#34;&gt;webdataset&lt;/a&gt;, which is recommended for larger scale datasets. The expected format is a series of &lt;code&gt;.tar&lt;/code&gt; files. Each of these &lt;code&gt;.tar&lt;/code&gt; files should contain two files for each training example, one for the image and one for the corresponding text. Both files should have the same name but different extensions. For instance, &lt;code&gt;shard_001.tar&lt;/code&gt; could contain files such as &lt;code&gt;abc.jpg&lt;/code&gt; and &lt;code&gt;abc.txt&lt;/code&gt;. You can learn more about &lt;code&gt;webdataset&lt;/code&gt; at &lt;a href=&#34;https://github.com/webdataset/webdataset&#34;&gt;https://github.com/webdataset/webdataset&lt;/a&gt;. We use &lt;code&gt;.tar&lt;/code&gt; files with 1,000 data points each, which we create using &lt;a href=&#34;https://github.com/webdataset/tarp&#34;&gt;tarp&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can download the YFCC dataset from &lt;a href=&#34;http://mmcommons.org/&#34;&gt;Multimedia Commons&lt;/a&gt;. Similar to OpenAI, we used a subset of YFCC to reach the aforementioned accuracy numbers. The indices of images in this subset are in &lt;a href=&#34;https://github.com/openai/CLIP/raw/main/data/yfcc100m.md&#34;&gt;OpenAI&#39;s CLIP repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Training CLIP&lt;/h2&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;We advise you first create a virtual environment with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 -m venv .env&#xA;source .env/bin/activate&#xA;pip install -U pip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then install openclip for training with &lt;code&gt;pip install &#39;open_clip_torch[training]&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Development&lt;/h4&gt; &#xA;&lt;p&gt;If you want to make changes to contribute code, you can close openclip then run &lt;code&gt;make install&lt;/code&gt; in openclip folder (after creating a virtualenv)&lt;/p&gt; &#xA;&lt;p&gt;Install pip PyTorch as per &lt;a href=&#34;https://pytorch.org/get-started/locally/&#34;&gt;https://pytorch.org/get-started/locally/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Test can be run with &lt;code&gt;make install-test&lt;/code&gt; then &lt;code&gt;make test&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;python -m pytest -x -s -v tests -k &#34;training&#34;&lt;/code&gt; to run a specific test&lt;/p&gt; &#xA;&lt;p&gt;When introducing new models, &lt;code&gt;python tests/util_test.py --model=xlm-roberta-large-ViT-H-14&lt;/code&gt; can generate new output expected data.&lt;/p&gt; &#xA;&lt;p&gt;You may run &lt;code&gt;make install-training&lt;/code&gt; to install training deps&lt;/p&gt; &#xA;&lt;h3&gt;Sample single-process running code:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m training.main \&#xA;    --save-frequency 1 \&#xA;    --zeroshot-frequency 1 \&#xA;    --report-to tensorboard \&#xA;    --train-data=&#34;/path/to/train_data.csv&#34;  \&#xA;    --val-data=&#34;/path/to/validation_data.csv&#34;  \&#xA;    --csv-img-key filepath \&#xA;    --csv-caption-key title \&#xA;    --imagenet-val=/path/to/imagenet/root/val/ \&#xA;    --warmup 10000 \&#xA;    --batch-size=128 \&#xA;    --lr=1e-3 \&#xA;    --wd=0.1 \&#xA;    --epochs=30 \&#xA;    --workers=8 \&#xA;    --model RN50&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;imagenet-val&lt;/code&gt; is the path to the &lt;em&gt;validation&lt;/em&gt; set of ImageNet for zero-shot evaluation, not the training set! You can remove this argument if you do not want to perform zero-shot evaluation on ImageNet throughout training. Note that the &lt;code&gt;val&lt;/code&gt; folder should contain subfolders. If it doest not, please use &lt;a href=&#34;https://raw.githubusercontent.com/soumith/imagenetloader.torch/master/valprep.sh&#34;&gt;this script&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Multi-GPU and Beyond&lt;/h3&gt; &#xA;&lt;p&gt;This code has been battle tested up to 1024 A100s and offers a variety of solutions for distributed training. We include native support for SLURM clusters.&lt;/p&gt; &#xA;&lt;p&gt;As the number of devices used to train increases, so does the space complexity of the the logit matrix. Using a na√Øve all-gather scheme, space complexity will be &lt;code&gt;O(n^2)&lt;/code&gt;. Instead, complexity may become effectively linear if the flags &lt;code&gt;--gather-with-grad&lt;/code&gt; and &lt;code&gt;--local-loss&lt;/code&gt; are used. This alteration results in one-to-one numerical results as the na√Øve method.&lt;/p&gt; &#xA;&lt;h4&gt;Epochs&lt;/h4&gt; &#xA;&lt;p&gt;For larger datasets (eg Laion2B), we recommend setting --train-num-samples to a lower value than the full epoch, for example &lt;code&gt;--train-num-samples 135646078&lt;/code&gt; to 1/16 of an epoch in conjunction with --dataset-resampled to do sampling with replacement. This allows having frequent checkpoints to evaluate more often.&lt;/p&gt; &#xA;&lt;h4&gt;Single-Node&lt;/h4&gt; &#xA;&lt;p&gt;We make use of &lt;code&gt;torchrun&lt;/code&gt; to launch distributed jobs. The following launches a a job on a node of 4 GPUs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd open_clip/src&#xA;torchrun --nproc_per_node 4 -m training.main \&#xA;    --train-data &#39;/data/cc12m/cc12m-train-{0000..2175}.tar&#39; \&#xA;    --train-num-samples 10968539 \&#xA;    --dataset-type webdataset \&#xA;    --batch-size 320 \&#xA;    --precision amp \&#xA;    --workers 4 \&#xA;    --imagenet-val /data/imagenet/validation/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Multi-Node&lt;/h4&gt; &#xA;&lt;p&gt;The same script above works, so long as users include information about the number of nodes and host node.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd open_clip/src&#xA;torchrun --nproc_per_node=4 \&#xA;    --rdzv_endpoint=$HOSTE_NODE_ADDR \&#xA;    -m training.main \&#xA;    --train-data &#39;/data/cc12m/cc12m-train-{0000..2175}.tar&#39; \&#xA;    --train-num-samples 10968539 \&#xA;    --dataset-type webdataset \&#xA;    --batch-size 320 \&#xA;    --precision amp \&#xA;    --workers 4 \&#xA;    --imagenet-val /data/imagenet/validation/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;SLURM&lt;/h4&gt; &#xA;&lt;p&gt;This is likely the easiest solution to utilize. The following script was used to train our largest models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash -x&#xA;#SBATCH --nodes=32&#xA;#SBATCH --gres=gpu:4&#xA;#SBATCH --ntasks-per-node=4&#xA;#SBATCH --cpus-per-task=6&#xA;#SBATCH --wait-all-nodes=1&#xA;#SBATCH --job-name=open_clip&#xA;#SBATCH --account=ACCOUNT_NAME&#xA;#SBATCH --partition PARTITION_NAME&#xA;&#xA;eval &#34;$(/path/to/conda/bin/conda shell.bash hook)&#34; # init conda&#xA;conda activate open_clip&#xA;export CUDA_VISIBLE_DEVICES=0,1,2,3&#xA;export MASTER_PORT=12802&#xA;&#xA;master_addr=$(scontrol show hostnames &#34;$SLURM_JOB_NODELIST&#34; | head -n 1)&#xA;export MASTER_ADDR=$master_addr&#xA;&#xA;cd /shared/open_clip&#xA;export PYTHONPATH=&#34;$PYTHONPATH:$PWD/src&#34;&#xA;srun --cpu_bind=v --accel-bind=gn python -u src/training/main.py \&#xA;    --save-frequency 1 \&#xA;    --report-to tensorboard \&#xA;    --train-data=&#34;/data/LAION-400M/{00000..41455}.tar&#34; \&#xA;    --warmup 2000 \&#xA;    --batch-size=256 \&#xA;    --epochs=32 \&#xA;    --workers=8 \&#xA;    --model ViT-B-32 \&#xA;    --name &#34;ViT-B-32-Vanilla&#34; \&#xA;    --seed 0 \&#xA;    --local-loss \&#xA;    --gather-with-grad&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Resuming from a checkpoint:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m training.main \&#xA;    --train-data=&#34;/path/to/train_data.csv&#34; \&#xA;    --val-data=&#34;/path/to/validation_data.csv&#34;  \&#xA;    --resume /path/to/checkpoints/epoch_K.pt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Training with pre-trained language models as text encoder:&lt;/h3&gt; &#xA;&lt;p&gt;If you wish to use different language models as the text encoder for CLIP you can do so by using one of the huggingface model configs in &lt;code&gt;src/open_clip/model_configs&lt;/code&gt; and passing in it&#39;s tokenizer as the &lt;code&gt;--model&lt;/code&gt; and &lt;code&gt;--hf-tokenizer-name&lt;/code&gt; parameters respectively. Currently we only support RoBERTa (&#34;test-roberta&#34; config), however adding new models should be trivial. You can also determine how many layers, from the end, to leave unfrozen with the &lt;code&gt;--lock-text-unlocked-layers&lt;/code&gt; parameter. Here&#39;s an example command to train CLIP with the RoBERTa LM that has it&#39;s last 10 layers unfrozen:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m training.main \&#xA;         --train-data=&#34;pipe:aws s3 cp s3://s-mas/cc3m/{00000..00329}.tar -&#34; \&#xA;         --train-num-samples 3000000 \&#xA;         --val-data=&#34;pipe:aws s3 cp s3://s-mas/cc3m/{00330..00331}.tar -&#34; \&#xA;         --val-num-samples 10000 \&#xA;         --dataset-type webdataset \&#xA;         --batch-size 256 \&#xA;         --warmup 2000 \&#xA;         --epochs 10 \&#xA;         --lr 5e-4 \&#xA;         --precision amp \&#xA;         --workers 6 \&#xA;         --model &#34;roberta-ViT-B-32&#34; \&#xA;         --lock-text \&#xA;         --lock-text-unlocked-layers 10 \&#xA;         --name &#34;10_unfrozen&#34; \&#xA;         --report-to &#34;tensorboard&#34; \&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Loss Curves&lt;/h3&gt; &#xA;&lt;p&gt;When run on a machine with 8 GPUs the command should produce the following training curve for Conceptual Captions:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mlfoundations/open_clip/main/docs/clip_zeroshot.png&#34; alt=&#34;CLIP zero shot training curve&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;More detailed curves for Conceptual Captions are given at &lt;a href=&#34;https://raw.githubusercontent.com/mlfoundations/open_clip/main/docs/clip_conceptual_captions.md&#34;&gt;/docs/clip_conceptual_captions.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When training a RN50 on YFCC the same hyperparameters as above are used, with the exception of &lt;code&gt;lr=5e-4&lt;/code&gt; and &lt;code&gt;epochs=32&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that to use another model, like &lt;code&gt;ViT-B/32&lt;/code&gt; or &lt;code&gt;RN50x4&lt;/code&gt; or &lt;code&gt;RN50x16&lt;/code&gt; or &lt;code&gt;ViT-B/16&lt;/code&gt;, specify with &lt;code&gt;--model RN50x4&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Launch tensorboard:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tensorboard --logdir=logs/tensorboard/ --port=7777&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Evaluation / Zero-Shot&lt;/h2&gt; &#xA;&lt;h3&gt;Evaluating local checkpoint:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m training.main \&#xA;    --val-data=&#34;/path/to/validation_data.csv&#34;  \&#xA;    --model RN101 \&#xA;    --pretrained /path/to/checkpoints/epoch_K.pt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Evaluating hosted pretrained checkpoint on ImageNet zero-shot prediction:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m training.main \&#xA;    --imagenet-val /path/to/imagenet/validation \&#xA;    --model ViT-B-32-quickgelu \&#xA;    --pretrained laion400m_e32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Pretrained model details&lt;/h2&gt; &#xA;&lt;h3&gt;LAION-400M - &lt;a href=&#34;https://laion.ai/laion-400-open-dataset&#34;&gt;https://laion.ai/laion-400-open-dataset&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;We are working on reproducing OpenAI&#39;s ViT results with the comparably sized (and open) LAION-400M dataset. Trained weights may be found in release &lt;a href=&#34;https://github.com/mlfoundations/open_clip/releases/tag/v0.2-weights&#34;&gt;v0.2&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The LAION400M weights have been trained on the JUWELS supercomputer (see acknowledgements section below).&lt;/p&gt; &#xA;&lt;h4&gt;ViT-B/32 224x224&lt;/h4&gt; &#xA;&lt;p&gt;We replicate OpenAI&#39;s results on ViT-B/32, reaching a top-1 ImageNet-1k zero-shot accuracy of 62.96%.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/mlfoundations/open_clip/main/docs/laion_clip_zeroshot.png&#34; width=&#34;700&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;Zero-shot comparison (courtesy of Andreas F√ºrst)&lt;/strong&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mlfoundations/open_clip/main/docs/laion_openai_compare_b32.jpg&#34; width=&#34;700&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;ViT-B/32 was trained with 128 A100 (40 GB) GPUs for ~36 hours, 4600 GPU-hours. The per-GPU batch size was 256 for a global batch size of 32768. 256 is much lower than it could have been (~320-384) due to being sized initially before moving to &#39;local&#39; contrastive loss.&lt;/p&gt; &#xA;&lt;h4&gt;ViT-B/16 224x224&lt;/h4&gt; &#xA;&lt;p&gt;The B/16 LAION400M training reached a top-1 ImageNet-1k zero-shot validation score of 67.07.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/mlfoundations/open_clip/main/docs/laion_clip_zeroshot_b16.png&#34; width=&#34;700&#34;&gt; &#xA;&lt;p&gt;This was the first major train session using the updated webdataset 0.2.x code. A bug was found that prevented shards from being shuffled properly between nodes/workers each epoch. This was fixed part way through training (epoch 26) but likely had an impact.&lt;/p&gt; &#xA;&lt;p&gt;ViT-B/16 was trained with 176 A100 (40 GB) GPUS for ~61 hours, 10700 GPU-hours. Batch size per GPU was 192 for a global batch size of 33792.&lt;/p&gt; &#xA;&lt;h4&gt;ViT-B/16+ 240x240&lt;/h4&gt; &#xA;&lt;p&gt;The B/16+ 240x240 LAION400M training reached a top-1 ImageNet-1k zero-shot validation score of 69.21.&lt;/p&gt; &#xA;&lt;p&gt;This model is the same depth as the B/16, but increases the&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;vision width from 768 -&amp;gt; 896&lt;/li&gt; &#xA; &lt;li&gt;text width from 512 -&amp;gt; 640&lt;/li&gt; &#xA; &lt;li&gt;the resolution 224x224 -&amp;gt; 240x240 (196 -&amp;gt; 225 tokens)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/mlfoundations/open_clip/main/docs/laion_clip_zeroshot_b16_plus_240.png&#34; width=&#34;700&#34;&gt; &#xA;&lt;p&gt;Unlike the B/16 run above, this model was a clean run with no dataset shuffling issues.&lt;/p&gt; &#xA;&lt;p&gt;ViT-B/16+ was trained with 224 A100 (40 GB) GPUS for ~61 hours, 13620 GPU-hours. Batch size per GPU was 160 for a global batch size of 35840.&lt;/p&gt; &#xA;&lt;h4&gt;ViT-L/14 224x224&lt;/h4&gt; &#xA;&lt;p&gt;The L/14 LAION-400M training reached a top-1 ImageNet-1k zero-shot validation score of 72.77.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/mlfoundations/open_clip/main/docs/laion_clip_zeroshot_l14.png&#34; width=&#34;700&#34;&gt; &#xA;&lt;p&gt;ViT-L/14 was trained with 400 A100 (40 GB) GPUS for ~127 hours, 50800 GPU-hours. Batch size per GPU was 96 for a global batch size of 38400. Grad checkpointing was enabled.&lt;/p&gt; &#xA;&lt;h3&gt;LAION-2B (en) - &lt;a href=&#34;https://laion.ai/laion-5b-a-new-era-of-open-large-scale-multi-modal-datasets/&#34;&gt;https://laion.ai/laion-5b-a-new-era-of-open-large-scale-multi-modal-datasets/&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A ~2B sample subset of LAION-5B with english captions (&lt;a href=&#34;https://huggingface.co/datasets/laion/laion2B-en&#34;&gt;https://huggingface.co/datasets/laion/laion2B-en&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h4&gt;ViT-B/32 224x224&lt;/h4&gt; &#xA;&lt;p&gt;A ViT-B/32 trained on LAION-2B, reaching a top-1 ImageNet-1k zero-shot accuracy of 65.62%.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/mlfoundations/open_clip/main/docs/laion2b_clip_zeroshot_b32.png&#34; width=&#34;700&#34;&gt; &#xA;&lt;p&gt;ViT-B/32 was trained with 112 A100 (40 GB) GPUs. The per-GPU batch size was 416 for a global batch size of 46592. Compute generously provided by &lt;a href=&#34;https://stability.ai/&#34;&gt;stability.ai&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A second iteration of B/32 was trained on stability.ai cluster with a larger global batch size and learning rate, hitting 66.6% top-1. See &lt;a href=&#34;https://huggingface.co/laion/CLIP-ViT-B-32-laion2B-s34B-b79K&#34;&gt;https://huggingface.co/laion/CLIP-ViT-B-32-laion2B-s34B-b79K&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;ViT-L/14 224x224&lt;/h4&gt; &#xA;&lt;p&gt;A ViT-L/14 with a 75.3% top-1 ImageNet-1k zero-shot was trained on JUWELS Booster. See model details here &lt;a href=&#34;https://huggingface.co/laion/CLIP-ViT-L-14-laion2B-s32B-b82K&#34;&gt;https://huggingface.co/laion/CLIP-ViT-L-14-laion2B-s32B-b82K&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;These weights use a different dataset mean and std than others. Instead of using the OpenAI mean &amp;amp; std, inception style normalization &lt;code&gt;[-1, 1]&lt;/code&gt; is used via a mean and std of &lt;code&gt;[0.5, 0.5, 0.5]&lt;/code&gt;. This is handled automatically if using &lt;code&gt;open_clip.create_model_and_transforms&lt;/code&gt; from pretrained weights.&lt;/p&gt; &#xA;&lt;h4&gt;ViT-H/14 224x224&lt;/h4&gt; &#xA;&lt;p&gt;A ViT-H/14 with a 78.0% top-1 ImageNet-1k zero-shot was trained on JUWELS Booster. See model details here &lt;a href=&#34;https://huggingface.co/laion/CLIP-ViT-H-14-laion2B-s32B-b79K&#34;&gt;https://huggingface.co/laion/CLIP-ViT-H-14-laion2B-s32B-b79K&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;ViT-g/14 224x224&lt;/h4&gt; &#xA;&lt;p&gt;A ViT-g/14 with a 76.6% top-1 ImageNet-1k zero-shot was trained on JUWELS Booster. See model details here &lt;a href=&#34;https://huggingface.co/laion/CLIP-ViT-g-14-laion2B-s12B-b42K&#34;&gt;https://huggingface.co/laion/CLIP-ViT-g-14-laion2B-s12B-b42K&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This model was trained with a shorted schedule than other LAION-2B models with 12B samples seen instead of 32+B. It matches LAION-400M training in samples seen. Many zero-shot results are lower as a result, but despite this it performs very well in some OOD zero-shot and retrieval tasks.&lt;/p&gt; &#xA;&lt;h4&gt;ViT-B/32 roberta base&lt;/h4&gt; &#xA;&lt;p&gt;A ViT-B/32 with roberta base encoder with a 61.7% top-1 ImageNet-1k zero-shot was trained on stability. See model details here &lt;a href=&#34;https://huggingface.co/laion/CLIP-ViT-B-32-roberta-base-laion2B-s12B-b32k&#34;&gt;https://huggingface.co/laion/CLIP-ViT-B-32-roberta-base-laion2B-s12B-b32k&lt;/a&gt; This is the first openclip model using a HF text tower. It has better performance on a range of tasks compared to the standard text encoder, see &lt;a href=&#34;https://huggingface.co/laion/CLIP-ViT-B-32-roberta-base-laion2B-s12B-b32k/blob/main/unknown.png&#34;&gt;metrics&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;ViT-B/32 xlm roberta base&lt;/h4&gt; &#xA;&lt;p&gt;A ViT-B/32 with xlm roberta base encoder with a 62.33% top-1 ImageNet-1k zero-shot was trained on stability. See model details here &lt;a href=&#34;https://huggingface.co/laion/CLIP-ViT-B-32-xlm-roberta-base-laion5B-s13B-b90k&#34;&gt;https://huggingface.co/laion/CLIP-ViT-B-32-xlm-roberta-base-laion5B-s13B-b90k&lt;/a&gt; This is the first openclip model trained on the full laion5B dataset; hence the first multilingual clip trained with openclip. It has better performance on a range of tasks compared to the standard text encoder, see &lt;a href=&#34;https://huggingface.co/laion/CLIP-ViT-B-32-xlm-roberta-base-laion5B-s13B-b90k/blob/main/metrics.png&#34;&gt;metrics&lt;/a&gt; A preliminary multilingual evaluation was run: 43% on imagenet1k italian (vs 21% for english B/32), 37% for imagenet1k japanese (vs 1% for english B/32 and 50% for B/16 clip japanese). It shows the multilingual property is indeed there as expected. Larger models will get even better performance.&lt;/p&gt; &#xA;&lt;h4&gt;ViT-H/14 xlm roberta large&lt;/h4&gt; &#xA;&lt;p&gt;A ViT-H/14 with xlm roberta large encoder with a 77.0% (vs 78% for the english equivalent) top-1 ImageNet-1k zero-shot was trained on stability. See model details here &lt;a href=&#34;https://huggingface.co/laion/CLIP-ViT-H-14-frozen-xlm-roberta-large-laion5B-s13B-b90k&#34;&gt;https://huggingface.co/laion/CLIP-ViT-H-14-frozen-xlm-roberta-large-laion5B-s13B-b90k&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This model was trained following the &lt;a href=&#34;https://arxiv.org/abs/2111.07991&#34;&gt;LiT&lt;/a&gt; methodology: the image tower was frozen (initialized from english openclip ViT-H/14), the text tower was initialized from &lt;a href=&#34;https://huggingface.co/xlm-roberta-large&#34;&gt;xlm roberta large&lt;/a&gt; and unfrozen. This reduced training cost by a 3x factor.&lt;/p&gt; &#xA;&lt;p&gt;See full english &lt;a href=&#34;https://huggingface.co/laion/CLIP-ViT-H-14-frozen-xlm-roberta-large-laion5B-s13B-b90k/resolve/main/results_xlm_roberta_large.png&#34;&gt;metrics&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;On zero shot classification on imagenet with translated prompts this model reaches:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;56% in italian (vs 21% for &lt;a href=&#34;https://github.com/clip-italian/clip-italian&#34;&gt;https://github.com/clip-italian/clip-italian&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;53% in japanese (vs 54.6% for &lt;a href=&#34;https://github.com/rinnakk/japanese-clip&#34;&gt;https://github.com/rinnakk/japanese-clip&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;55.7% in chinese (to be compared with &lt;a href=&#34;https://github.com/OFA-Sys/Chinese-CLIP&#34;&gt;https://github.com/OFA-Sys/Chinese-CLIP&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;YFCC-15M&lt;/h4&gt; &#xA;&lt;p&gt;Below are checkpoints of models trained on YFCC-15M, along with their zero-shot top-1 accuracies on ImageNet and ImageNetV2. These models were trained using 8 GPUs and the same hyperparameters described in the &#34;Sample running code&#34; section, with the exception of &lt;code&gt;lr=5e-4&lt;/code&gt; and &lt;code&gt;epochs=32&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mlfoundations/open_clip/releases/download/v0.2-weights/rn50-quickgelu-yfcc15m-455df137.pt&#34;&gt;ResNet-50&lt;/a&gt; (32.7% / 27.9%)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mlfoundations/open_clip/releases/download/v0.2-weights/rn101-quickgelu-yfcc15m-3e04b30e.pt&#34;&gt;ResNet-101&lt;/a&gt; (34.8% / 30.0%)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;CC12M - &lt;a href=&#34;https://github.com/google-research-datasets/conceptual-12m&#34;&gt;https://github.com/google-research-datasets/conceptual-12m&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mlfoundations/open_clip/releases/download/v0.2-weights/rn50-quickgelu-cc12m-f000538c.pt&#34;&gt;ResNet-50&lt;/a&gt; (36.45%)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Pretrained Model Interface&lt;/h3&gt; &#xA;&lt;p&gt;We offer a simple model interface to instantiate both pre-trained and untrained models.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: Many existing checkpoints use the QuickGELU activation from the original OpenAI models. This activation is actually less efficient than native torch.nn.GELU in recent versions of PyTorch. The model defaults are now nn.GELU, so one should use model definitions with &lt;code&gt;-quickgelu&lt;/code&gt; postfix for the OpenCLIP pretrained weights. All OpenAI pretrained weights will always default to QuickGELU. One can also use the non &lt;code&gt;-quickgelu&lt;/code&gt; model definitions with pretrained weights using QuickGELU but there will be an accuracy drop, for fine-tune that will likely vanish for longer runs.&lt;/p&gt; &#xA;&lt;p&gt;Future trained models will use nn.GELU.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import open_clip&#xA;&amp;gt;&amp;gt;&amp;gt; open_clip.list_pretrained()&#xA;[(&#39;RN50&#39;, &#39;openai&#39;),&#xA; (&#39;RN50&#39;, &#39;yfcc15m&#39;),&#xA; (&#39;RN50&#39;, &#39;cc12m&#39;),&#xA; (&#39;RN50-quickgelu&#39;, &#39;openai&#39;),&#xA; (&#39;RN50-quickgelu&#39;, &#39;yfcc15m&#39;),&#xA; (&#39;RN50-quickgelu&#39;, &#39;cc12m&#39;),&#xA; (&#39;RN101&#39;, &#39;openai&#39;),&#xA; (&#39;RN101&#39;, &#39;yfcc15m&#39;),&#xA; (&#39;RN101-quickgelu&#39;, &#39;openai&#39;),&#xA; (&#39;RN101-quickgelu&#39;, &#39;yfcc15m&#39;),&#xA; (&#39;RN50x4&#39;, &#39;openai&#39;),&#xA; (&#39;RN50x16&#39;, &#39;openai&#39;),&#xA; (&#39;RN50x64&#39;, &#39;openai&#39;),&#xA; (&#39;ViT-B-32&#39;, &#39;openai&#39;),&#xA; (&#39;ViT-B-32&#39;, &#39;laion400m_e31&#39;),&#xA; (&#39;ViT-B-32&#39;, &#39;laion400m_e32&#39;),&#xA; (&#39;ViT-B-32&#39;, &#39;laion2b_e16&#39;),&#xA; (&#39;ViT-B-32&#39;, &#39;laion2b_s34b_b79k&#39;),&#xA; (&#39;ViT-B-32-quickgelu&#39;, &#39;openai&#39;),&#xA; (&#39;ViT-B-32-quickgelu&#39;, &#39;laion400m_e31&#39;),&#xA; (&#39;ViT-B-32-quickgelu&#39;, &#39;laion400m_e32&#39;),&#xA; (&#39;ViT-B-16&#39;, &#39;openai&#39;),&#xA; (&#39;ViT-B-16&#39;, &#39;laion400m_e31&#39;),&#xA; (&#39;ViT-B-16&#39;, &#39;laion400m_e32&#39;),&#xA; (&#39;ViT-B-16-plus-240&#39;, &#39;laion400m_e31&#39;),&#xA; (&#39;ViT-B-16-plus-240&#39;, &#39;laion400m_e32&#39;),&#xA; (&#39;ViT-L-14&#39;, &#39;openai&#39;),&#xA; (&#39;ViT-L-14&#39;, &#39;laion400m_e31&#39;),&#xA; (&#39;ViT-L-14&#39;, &#39;laion400m_e32&#39;),&#xA; (&#39;ViT-L-14&#39;, &#39;laion2b_s32b_b82k&#39;),&#xA; (&#39;ViT-L-14-336&#39;, &#39;openai&#39;),&#xA; (&#39;ViT-H-14&#39;, &#39;laion2b_s32b_b79k&#39;),&#xA; (&#39;ViT-g-14&#39;, &#39;laion2b_s12b_b42k&#39;),&#xA; (&#39;roberta-ViT-B-32&#39;, &#39;laion2b_s12b_b32k&#39;),&#xA; (&#39;xlm-roberta-base-ViT-B-32&#39;, &#39;laion5b_s13b_b90k&#39;),&#xA; (&#39;xlm-roberta-large-ViT-H-14&#39;, &#39;frozen_laion5b_s13b_b90k&#39;),]&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; model, train_transform, eval_transform = open_clip.create_model_and_transforms(&#39;ViT-B-32&#39;, pretrained=&#39;laion2b_s34b_b79k&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Scaling trends&lt;/h2&gt; &#xA;&lt;p&gt;The plot below shows how zero-shot performance of CLIP models varies as we scale the number of samples used for training. Zero-shot performance increases steadily for both ImageNet and &lt;a href=&#34;https://arxiv.org/abs/1902.10811&#34;&gt;ImageNetV2&lt;/a&gt;, and is far from saturated at ~15M samples.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/mlfoundations/open_clip/main/docs/scaling.png&#34; width=&#34;700&#34;&gt; &#xA;&lt;h2&gt;Why are low-accuracy CLIP models interesting?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; CLIP models have high effective robustness, even at small scales.&lt;/p&gt; &#xA;&lt;p&gt;CLIP models are particularly intriguing because they are more robust to natural distribution shifts (see Section 3.3 in the &lt;a href=&#34;https://arxiv.org/abs/2103.00020&#34;&gt;CLIP paper&lt;/a&gt;). This phenomena is illustrated by the figure below, with ImageNet accuracy on the x-axis and &lt;a href=&#34;https://arxiv.org/abs/1902.10811&#34;&gt;ImageNetV2&lt;/a&gt; (a reproduction of the ImageNet validation set with distribution shift) accuracy on the y-axis. Standard training denotes training on the ImageNet train set and the CLIP zero-shot models are shown as stars.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mlfoundations/open_clip/main/docs/effective_robustness.png&#34; alt=&#34;CLIP scatter plot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;As observed by &lt;a href=&#34;https://arxiv.org/abs/2007.00644&#34;&gt;Taori et al., 2020&lt;/a&gt; and &lt;a href=&#34;https://arxiv.org/abs/2107.04649&#34;&gt;Miller et al., 2021&lt;/a&gt;, the in-distribution and out-of-distribution accuracies of models trained on ImageNet follow a predictable linear trend (the red line in the above plot). &lt;em&gt;Effective robustness&lt;/em&gt; quantifies robustness as accuracy beyond this baseline, i.e., how far a model lies above the red line. Ideally a model would not suffer from distribution shift and fall on the y = x line (&lt;a href=&#34;http://proceedings.mlr.press/v119/shankar20c.html&#34;&gt;trained human labelers are within a percentage point of the y = x line&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Even though the CLIP models trained with this codebase achieve much lower accuracy than those trained by OpenAI, our models still lie on the same trend of improved effective robustness (the purple line). Therefore, we can study what makes CLIP robust without requiring industrial-scale compute.&lt;/p&gt; &#xA;&lt;p&gt;For more information on effective robustness, please see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/1902.10811&#34;&gt;Recht et al., 2019&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2007.00644&#34;&gt;Taori et al., 2020&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2107.04649&#34;&gt;Miller et al., 2021&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To know more about the factors that contribute to CLIP&#39;s robustness refer to &lt;a href=&#34;https://arxiv.org/abs/2205.01397&#34;&gt;Fang et al., 2022&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;We gratefully acknowledge the Gauss Centre for Supercomputing e.V. (&lt;a href=&#34;http://www.gauss-centre.eu&#34;&gt;www.gauss-centre.eu&lt;/a&gt;) for funding this part of work by providing computing time through the John von Neumann Institute for Computing (NIC) on the GCS Supercomputer JUWELS Booster at J√ºlich Supercomputing Centre (JSC).&lt;/p&gt; &#xA;&lt;h2&gt;The Team&lt;/h2&gt; &#xA;&lt;p&gt;Current development of this repository is led by &lt;a href=&#34;https://rwightman.com/&#34;&gt;Ross Wightman&lt;/a&gt;, &lt;a href=&#34;http://cadegordon.io/&#34;&gt;Cade Gordon&lt;/a&gt;, and &lt;a href=&#34;http://vaishaal.com/&#34;&gt;Vaishaal Shankar&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The original version of this repository is from a group of researchers at UW, Google, Stanford, Amazon, Columbia, and Berkeley.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://gabrielilharco.com/&#34;&gt;Gabriel Ilharco*&lt;/a&gt;, &lt;a href=&#34;https://mitchellnw.github.io/&#34;&gt;Mitchell Wortsman*&lt;/a&gt;, &lt;a href=&#34;https://nicholas.carlini.com/&#34;&gt;Nicholas Carlini&lt;/a&gt;, &lt;a href=&#34;https://www.rohantaori.com/&#34;&gt;Rohan Taori&lt;/a&gt;, &lt;a href=&#34;http://www.achaldave.com/&#34;&gt;Achal Dave&lt;/a&gt;, &lt;a href=&#34;http://vaishaal.com/&#34;&gt;Vaishaal Shankar&lt;/a&gt;, &lt;a href=&#34;https://people.eecs.berkeley.edu/~miller_john/&#34;&gt;John Miller&lt;/a&gt;, &lt;a href=&#34;https://hsnamkoong.github.io/&#34;&gt;Hongseok Namkoong&lt;/a&gt;, &lt;a href=&#34;https://homes.cs.washington.edu/~hannaneh/&#34;&gt;Hannaneh Hajishirzi&lt;/a&gt;, &lt;a href=&#34;https://homes.cs.washington.edu/~ali/&#34;&gt;Ali Farhadi&lt;/a&gt;, &lt;a href=&#34;https://people.csail.mit.edu/ludwigs/&#34;&gt;Ludwig Schmidt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to &lt;a href=&#34;https://jongwook.kim/&#34;&gt;Jong Wook Kim&lt;/a&gt; and &lt;a href=&#34;https://github.com/Newmu&#34;&gt;Alec Radford&lt;/a&gt; for help with reproducing CLIP!&lt;/p&gt; &#xA;&lt;h2&gt;Citing&lt;/h2&gt; &#xA;&lt;p&gt;If you found this repository useful, please consider citing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@software{ilharco_gabriel_2021_5143773,&#xA;  author       = {Ilharco, Gabriel and&#xA;                  Wortsman, Mitchell and&#xA;                  Wightman, Ross and&#xA;                  Gordon, Cade and&#xA;                  Carlini, Nicholas and&#xA;                  Taori, Rohan and&#xA;                  Dave, Achal and&#xA;                  Shankar, Vaishaal and&#xA;                  Namkoong, Hongseok and&#xA;                  Miller, John and&#xA;                  Hajishirzi, Hannaneh and&#xA;                  Farhadi, Ali and&#xA;                  Schmidt, Ludwig},&#xA;  title        = {OpenCLIP},&#xA;  month        = jul,&#xA;  year         = 2021,&#xA;  note         = {If you use this software, please cite it as below.},&#xA;  publisher    = {Zenodo},&#xA;  version      = {0.1},&#xA;  doi          = {10.5281/zenodo.5143773},&#xA;  url          = {https://doi.org/10.5281/zenodo.5143773}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@inproceedings{Radford2021LearningTV,&#xA;  title={Learning Transferable Visual Models From Natural Language Supervision},&#xA;  author={Alec Radford and Jong Wook Kim and Chris Hallacy and A. Ramesh and Gabriel Goh and Sandhini Agarwal and Girish Sastry and Amanda Askell and Pamela Mishkin and Jack Clark and Gretchen Krueger and Ilya Sutskever},&#xA;  booktitle={ICML},&#xA;  year={2021}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://zenodo.org/badge/latestdoi/390536799&#34;&gt;&lt;img src=&#34;https://zenodo.org/badge/390536799.svg?sanitize=true&#34; alt=&#34;DOI&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SHI-Labs/Versatile-Diffusion</title>
    <updated>2022-12-04T01:46:17Z</updated>
    <id>tag:github.com,2022-12-04:/SHI-Labs/Versatile-Diffusion</id>
    <link href="https://github.com/SHI-Labs/Versatile-Diffusion" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Versatile Diffusion: Text, Images and Variations All in One Diffusion Model, 2022&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Versatile Diffusion&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://huggingface.co/spaces/shi-labs/Versatile-Diffusion&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97-Huggingface%20Space-cyan.svg?sanitize=true&#34; alt=&#34;Huggingface space&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pytorch.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Framework-PyTorch-orange.svg?sanitize=true&#34; alt=&#34;Framework: PyTorch&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repo hosts the official implementary of:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ifp-uiuc.github.io/&#34;&gt;Xingqian Xu&lt;/a&gt;, Atlas Wang, Eric Zhang, Kai Wang, and &lt;a href=&#34;https://www.humphreyshi.com/home&#34;&gt;Humphrey Shi&lt;/a&gt;, &lt;strong&gt;Versatile Diffusion: Text, Images and Variations All in One Diffusion Model&lt;/strong&gt;, &lt;a href=&#34;https://arxiv.org/abs/2211.08332&#34;&gt;Paper arXiv Link&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[2022.11.23]: Versatile Diffusion are now released in &lt;a href=&#34;https://github.com/huggingface/diffusers/releases&#34;&gt;&lt;code&gt;diffuser==0.8.0&lt;/code&gt;&lt;/a&gt; libraryüöÄ!&lt;/li&gt; &#xA; &lt;li&gt;[2022.11.21]: &lt;code&gt;inference.py&lt;/code&gt; now supports &lt;code&gt;--fp16&lt;/code&gt;, reducing both GPU memory and model size by half.&lt;/li&gt; &#xA; &lt;li&gt;[2022.11.19]: We add a simplified evaluation script &lt;code&gt;inference.py&lt;/code&gt; that supports all mentioned applications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;[2022.11.16]: Our demo is up and running on &lt;a href=&#34;https://huggingface.co/spaces/shi-labs/Versatile-Diffusion&#34;&gt;ü§óHugging Face&lt;/a&gt;!&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;[2022.11.14]: Part of our evaluation code and models are released!&lt;/li&gt; &#xA; &lt;li&gt;[2022.11.12]: Repo initiated&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;We built &lt;strong&gt;Versatile Diffusion (VD), the first unified multi-flow multimodal diffusion framework&lt;/strong&gt;, as a step towards &lt;strong&gt;Universal Generative AI&lt;/strong&gt;. Versatile Diffusion can natively support image-to-text, image-variation, text-to-image, and text-variation, and can be further extended to other applications such as semantic-style disentanglement, image-text dual-guided generation, latent image-to-text-to-image editing, and more. Future versions will support more modalities such as speech, music, video and 3D.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SHI-Labs/Versatile-Diffusion/master/assets/figures/teaser.png&#34; width=&#34;99%&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Network and Framework&lt;/h2&gt; &#xA;&lt;p&gt;One single flow of Versatile Diffusion contains a VAE, a diffuser, and a context encoder, and thus handles one task (e.g., text-to-image) under one data type (e.g., image) and one context type (e.g., text). The multi-flow structure of Versatile Diffusion shows in the following diagram:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SHI-Labs/Versatile-Diffusion/master/assets/figures/vd_combined.png&#34; width=&#34;99%&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;According to Versatile Diffusion, we further proposed a generalized multi-flow multimodal framework with VAEs, context encoders, and diffusers containing three layers (i.e., global, data, and context layers). To involve a new multimodal task in this framework, we bring out the following requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The design of the core diffuser should contain shared global layers, swappable data, and context layers that will be correspondingly activated based on data and context types.&lt;/li&gt; &#xA; &lt;li&gt;The choice of VAEs should smoothly map data onto highly interpretable latent spaces.&lt;/li&gt; &#xA; &lt;li&gt;The choice of context encoders should jointly minimize the cross-modal statistical distance on all supported content types.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SHI-Labs/Versatile-Diffusion/master/assets/figures/qcompare1.png&#34; width=&#34;99%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SHI-Labs/Versatile-Diffusion/master/assets/figures/qcompare2.png&#34; width=&#34;99%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SHI-Labs/Versatile-Diffusion/master/assets/figures/qcompare3.png&#34; width=&#34;99%&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Data&lt;/h2&gt; &#xA;&lt;p&gt;We use Laion2B-en with customized data filters as our main dataset. Since Laion2B is very large and typical training is less than one epoch, we usually do not need to download the complete dataset for training. Same story for VDs.&lt;/p&gt; &#xA;&lt;p&gt;Directory of Laion2B for our code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;‚îú‚îÄ‚îÄ data&#xA;‚îÇ&amp;nbsp;&amp;nbsp; ‚îî‚îÄ‚îÄ laion2b&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îî‚îÄ‚îÄ data&#xA;‚îÇ    &amp;nbsp;&amp;nbsp;     ‚îî‚îÄ‚îÄ 00000.tar&#xA;‚îÇ    &amp;nbsp;&amp;nbsp;     ‚îî‚îÄ‚îÄ 00000.parquet&#xA;‚îÇ    &amp;nbsp;&amp;nbsp;     ‚îî‚îÄ‚îÄ 00000_stats.jsom_&#xA;‚îÇ    &amp;nbsp;&amp;nbsp;     ‚îî‚îÄ‚îÄ 00001.tar&#xA;‚îÇ    &amp;nbsp;&amp;nbsp;     ‚îî‚îÄ‚îÄ ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These compressed data are generated with img2dataset API &lt;a href=&#34;https://github.com/rom1504/img2dataset&#34;&gt;official github link&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda create -n versatile-diffusion python=3.8&#xA;conda activate versatile-diffusion&#xA;conda install pytorch==1.12.1 torchvision=0.13.1 -c pytorch&#xA;pip install -r requirement.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Pretrained models&lt;/h2&gt; &#xA;&lt;p&gt;Useful pretrained models can be downloaded from Hugging Face &lt;a href=&#34;https://huggingface.co/shi-labs/versatile-diffusion/tree/main/pretrained_pth&#34;&gt;link&lt;/a&gt;. The pretrained folder should include the following files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;‚îú‚îÄ‚îÄ pretrained&#xA;‚îÇ&amp;nbsp;&amp;nbsp; ‚îî‚îÄ‚îÄ kl-f8.pth&#xA;‚îÇ&amp;nbsp;&amp;nbsp; ‚îî‚îÄ‚îÄ optimus-vae.pth&#xA;‚îÇ   ‚îî‚îÄ‚îÄ vd-four-flow-v1-0.pth (originally named vd-official.pth)&#xA;‚îÇ   ‚îî‚îÄ‚îÄ vd-four-flow-v1-0-fp16.pth&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Model named with &lt;strong&gt;-fp16&lt;/strong&gt; are models with float16 parameters and correpondingly used in &lt;code&gt;--fp16&lt;/code&gt; evaluation. The float16 models are half of the size comparing to the float32 models.&lt;/p&gt; &#xA;&lt;p&gt;Please refer to this &lt;a href=&#34;https://github.com/SHI-Labs/Versatile-Diffusion/raw/master/README_extra.md&#34;&gt;doc&lt;/a&gt; to download VD-DC and baselines models.&lt;/p&gt; &#xA;&lt;h2&gt;Evaluation&lt;/h2&gt; &#xA;&lt;p&gt;Here is the one-line shell command to evaluate VD four-flow models with multiple GPUs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python main.py --config vd_official_eval --gpu 0 1 2 3 4 5 6 7 --eval 99999&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The corresponding evaluation configs can be found in &lt;code&gt;./configs/experiment/vd_official_eval.yaml&lt;/code&gt;. There are useful information in the config. You can easy customized it and run your own batched evaluations.&lt;/p&gt; &#xA;&lt;p&gt;For the commands above, you also need to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create &lt;code&gt;./pretrained&lt;/code&gt; and move all downloaded pretrained models in it.&lt;/li&gt; &#xA; &lt;li&gt;Create &lt;code&gt;./log/vd_nodataset/99999_eval&lt;/code&gt; for evaluations on Versatile Diffusion&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Besides, we provide a simple evaluation script &lt;code&gt;inference.py&lt;/code&gt; that support all applications mentioned in the paper. Examples are below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python inference.py --gpu 0 --app text-to-image --prompt &#34;a dream of a village in china, by Caspar David Friedrich, matte painting trending on artstation HQ&#34; --seed 0 --save log/text-to-image.png&#xA;python inference.py --gpu 0 --app image-variation --image assets/space.jpg --seed 8 --save log/image-variation.png --coloradj simple&#xA;python inference.py --gpu 0 --app image-to-text --image assets/space.jpg --seed 8&#xA;python inference.py --gpu 0 --app text-variation --prompt &#34;a pink car&#34; --seed 8&#xA;python inference.py --gpu 0 --app disentanglement --image assets/vermeer.jpg --seed 8 --save log/disentanglement.png --coloradj simple --dislevel -2&#xA;python inference.py --gpu 0 --app dual-guided --image assets/benz.jpg --prompt &#34;cyberpunk 2077&#34; --seed 22 --save log/dual-guided.png --coloradj none --dgmixing 0.7&#xA;python inference.py --gpu 0 --app i2t2i --image assets/ghibli.jpg --nprompt &#34;white house&#34; --pprompt &#34;tall castle&#34; --seed 20 --save log/i2t2i.png --coloradj simple&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also inference with float16 by adding a tag &lt;code&gt;--fp16&lt;/code&gt; to each command. It doubles the running speed using a half size pretrained model &lt;code&gt;vd-***-fp16.pth&lt;/code&gt;. You will also need to update transformers to 4.24.0. Below is an example command using float16:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python inference.py --gpu 0 --app image-variation --image assets/space.jpg --seed 8 --save log/image-variation.png --coloradj simple --fp16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For baseline experiments and experiments on VD-DC, please refer to this &lt;a href=&#34;https://github.com/SHI-Labs/Versatile-Diffusion/raw/master/README_extra.md&#34;&gt;doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Training&lt;/h2&gt; &#xA;&lt;p&gt;Coming soon&lt;/p&gt; &#xA;&lt;h2&gt;Gallery&lt;/h2&gt; &#xA;&lt;p&gt;Text-to-Image&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SHI-Labs/Versatile-Diffusion/master/assets/figures/gallary_t2i.png&#34; width=&#34;80%&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Image-Variation&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SHI-Labs/Versatile-Diffusion/master/assets/figures/gallary_i2i_1.png&#34; width=&#34;80%&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Image-Variation with Semantic Focus&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SHI-Labs/Versatile-Diffusion/master/assets/figures/gallary_i2i_2.png&#34; width=&#34;80%&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Dual-guided&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SHI-Labs/Versatile-Diffusion/master/assets/figures/gallary_dual_guided.png&#34; width=&#34;80%&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{xu2022versatile,&#xA;&#x9;title        = {Versatile Diffusion: Text, Images and Variations All in One Diffusion Model},&#xA;&#x9;author       = {Xingqian Xu, Zhangyang Wang, Eric Zhang, Kai Wang, Humphrey Shi},&#xA;&#x9;year         = 2022,&#xA;&#x9;url          = {https://arxiv.org/abs/2211.08332},&#xA;&#x9;eprint       = {2211.08332},&#xA;&#x9;archiveprefix = {arXiv},&#xA;&#x9;primaryclass = {cs.CV}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;p&gt;Part of the codes reorganizes/reimplements code from the following repositories: &lt;a href=&#34;https://github.com/CompVis/latent-diffusion&#34;&gt;LDM official Github&lt;/a&gt;, which also oriented from &lt;a href=&#34;https://github.com/lucidrains/denoising-diffusion-pytorch&#34;&gt;DDPM official Github&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>