<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-21T01:46:15Z</updated>
  <subtitle>Weekly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Dao-AILab/flash-attention</title>
    <updated>2024-07-21T01:46:15Z</updated>
    <id>tag:github.com,2024-07-21:/Dao-AILab/flash-attention</id>
    <link href="https://github.com/Dao-AILab/flash-attention" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast and memory-efficient exact attention&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FlashAttention&lt;/h1&gt; &#xA;&lt;p&gt;This repository provides the official implementation of FlashAttention and FlashAttention-2 from the following papers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;FlashAttention: Fast and Memory-Efficient Exact Attention with IO-Awareness&lt;/strong&gt;&lt;br&gt; Tri Dao, Daniel Y. Fu, Stefano Ermon, Atri Rudra, Christopher RÃ©&lt;br&gt; Paper: &lt;a href=&#34;https://arxiv.org/abs/2205.14135&#34;&gt;https://arxiv.org/abs/2205.14135&lt;/a&gt;&lt;br&gt; IEEE Spectrum &lt;a href=&#34;https://spectrum.ieee.org/mlperf-rankings-2022&#34;&gt;article&lt;/a&gt; about our submission to the MLPerf 2.0 benchmark using FlashAttention. &lt;img src=&#34;https://raw.githubusercontent.com/Dao-AILab/flash-attention/main/assets/flashattn_banner.jpg&#34; alt=&#34;FlashAttention&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;FlashAttention-2: Faster Attention with Better Parallelism and Work Partitioning&lt;/strong&gt;&lt;br&gt; Tri Dao&lt;/p&gt; &#xA;&lt;p&gt;Paper: &lt;a href=&#34;https://tridao.me/publications/flash2/flash2.pdf&#34;&gt;https://tridao.me/publications/flash2/flash2.pdf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Dao-AILab/flash-attention/main/assets/flashattention_logo.png&#34; alt=&#34;FlashAttention-2&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve been very happy to see FlashAttention being widely adopted in such a short time after its release. This &lt;a href=&#34;https://github.com/Dao-AILab/flash-attention/raw/main/usage.md&#34;&gt;page&lt;/a&gt; contains a partial list of places where FlashAttention is being used.&lt;/p&gt; &#xA;&lt;p&gt;FlashAttention and FlashAttention-2 are free to use and modify (see LICENSE). Please cite and credit FlashAttention if you use it.&lt;/p&gt; &#xA;&lt;h2&gt;FlashAttention-3 beta release&lt;/h2&gt; &#xA;&lt;p&gt;FlashAttention-3 is optimized for Hopper GPUs (e.g. H100).&lt;/p&gt; &#xA;&lt;p&gt;Blogpost: &lt;a href=&#34;https://tridao.me/blog/2024/flash3/&#34;&gt;https://tridao.me/blog/2024/flash3/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Paper: &lt;a href=&#34;https://tridao.me/publications/flash3/flash3.pdf&#34;&gt;https://tridao.me/publications/flash3/flash3.pdf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Dao-AILab/flash-attention/main/assets/flash3_fp16_fwd.png&#34; alt=&#34;FlashAttention-3 speedup on H100 80GB SXM5 with FP16&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a beta release for testing / benchmarking before we integrate that with the rest of the repo.&lt;/p&gt; &#xA;&lt;p&gt;Currently released:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FP16 forward and backward&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Coming soon in the next couple of days / next week:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;BF16&lt;/li&gt; &#xA; &lt;li&gt;Variable length (FP16, BF16)&lt;/li&gt; &#xA; &lt;li&gt;FP8 forward.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Requirements: H100 / H800 GPU, CUDA &amp;gt;= 12.3.&lt;/p&gt; &#xA;&lt;p&gt;To install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd hopper&#xA;python setup.py install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the test:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export PYTHONPATH=$PWD&#xA;pytest -q -s test_flash_attn.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation and features&lt;/h2&gt; &#xA;&lt;p&gt;Requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CUDA 11.6 and above.&lt;/li&gt; &#xA; &lt;li&gt;PyTorch 1.12 and above.&lt;/li&gt; &#xA; &lt;li&gt;Linux. Might work for Windows starting v2.3.2 (we&#39;ve seen a few positive &lt;a href=&#34;https://github.com/Dao-AILab/flash-attention/issues/595&#34;&gt;reports&lt;/a&gt;) but Windows compilation still requires more testing. If you have ideas on how to set up prebuilt CUDA wheels for Windows, please reach out via Github issue.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We recommend the &lt;a href=&#34;https://catalog.ngc.nvidia.com/orgs/nvidia/containers/pytorch&#34;&gt;Pytorch&lt;/a&gt; container from Nvidia, which has all the required tools to install FlashAttention.&lt;/p&gt; &#xA;&lt;p&gt;To install:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure that PyTorch is installed.&lt;/li&gt; &#xA; &lt;li&gt;Make sure that &lt;code&gt;packaging&lt;/code&gt; is installed (&lt;code&gt;pip install packaging&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Make sure that &lt;code&gt;ninja&lt;/code&gt; is installed and that it works correctly (e.g. &lt;code&gt;ninja --version&lt;/code&gt; then &lt;code&gt;echo $?&lt;/code&gt; should return exit code 0). If not (sometimes &lt;code&gt;ninja --version&lt;/code&gt; then &lt;code&gt;echo $?&lt;/code&gt; returns a nonzero exit code), uninstall then reinstall &lt;code&gt;ninja&lt;/code&gt; (&lt;code&gt;pip uninstall -y ninja &amp;amp;&amp;amp; pip install ninja&lt;/code&gt;). Without &lt;code&gt;ninja&lt;/code&gt;, compiling can take a very long time (2h) since it does not use multiple CPU cores. With &lt;code&gt;ninja&lt;/code&gt; compiling takes 3-5 minutes on a 64-core machine.&lt;/li&gt; &#xA; &lt;li&gt;Then:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip install flash-attn --no-build-isolation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively you can compile from source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python setup.py install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your machine has less than 96GB of RAM and lots of CPU cores, &lt;code&gt;ninja&lt;/code&gt; might run too many parallel compilation jobs that could exhaust the amount of RAM. To limit the number of parallel compilation jobs, you can set the environment variable &lt;code&gt;MAX_JOBS&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;MAX_JOBS=4 pip install flash-attn --no-build-isolation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Interface: &lt;code&gt;src/flash_attention_interface.py&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;FlashAttention-2 currently supports:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Ampere, Ada, or Hopper GPUs (e.g., A100, RTX 3090, RTX 4090, H100). Support for Turing GPUs (T4, RTX 2080) is coming soon, please use FlashAttention 1.x for Turing GPUs for now.&lt;/li&gt; &#xA; &lt;li&gt;Datatype fp16 and bf16 (bf16 requires Ampere, Ada, or Hopper GPUs).&lt;/li&gt; &#xA; &lt;li&gt;All head dimensions up to 256. &lt;del&gt;Head dim &amp;gt; 192 backward requires A100/A800 or H100/H800&lt;/del&gt;. Head dim 256 backward now works on consumer GPUs (if there&#39;s no dropout) as of flash-attn 2.5.5.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How to use FlashAttention&lt;/h2&gt; &#xA;&lt;p&gt;The main functions implement scaled dot product attention (softmax(Q @ K^T * softmax_scale) @ V):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from flash_attn import flash_attn_qkvpacked_func, flash_attn_func&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;flash_attn_qkvpacked_func(qkv, dropout_p=0.0, softmax_scale=None, causal=False,&#xA;                          window_size=(-1, -1), alibi_slopes=None, deterministic=False):&#xA;&#34;&#34;&#34;dropout_p should be set to 0.0 during evaluation&#xA;If Q, K, V are already stacked into 1 tensor, this function will be faster than&#xA;calling flash_attn_func on Q, K, V since the backward pass avoids explicit concatenation&#xA;of the gradients of Q, K, V.&#xA;If window_size != (-1, -1), implements sliding window local attention. Query at position i&#xA;will only attend to keys between [i - window_size[0], i + window_size[1]] inclusive.&#xA;Arguments:&#xA;    qkv: (batch_size, seqlen, 3, nheads, headdim)&#xA;    dropout_p: float. Dropout probability.&#xA;    softmax_scale: float. The scaling of QK^T before applying softmax.&#xA;        Default to 1 / sqrt(headdim).&#xA;    causal: bool. Whether to apply causal attention mask (e.g., for auto-regressive modeling).&#xA;    window_size: (left, right). If not (-1, -1), implements sliding window local attention.&#xA;    alibi_slopes: (nheads,) or (batch_size, nheads), fp32. A bias of (-alibi_slope * |i - j|) is added to&#xA;        the attention score of query i and key j.&#xA;    deterministic: bool. Whether to use the deterministic implementation of the backward pass,&#xA;        which is slightly slower and uses more memory. The forward pass is always deterministic.&#xA;Return:&#xA;    out: (batch_size, seqlen, nheads, headdim).&#xA;&#34;&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;flash_attn_func(q, k, v, dropout_p=0.0, softmax_scale=None, causal=False,&#xA;                window_size=(-1, -1), alibi_slopes=None, deterministic=False):&#xA;&#34;&#34;&#34;dropout_p should be set to 0.0 during evaluation&#xA;Supports multi-query and grouped-query attention (MQA/GQA) by passing in KV with fewer heads&#xA;than Q. Note that the number of heads in Q must be divisible by the number of heads in KV.&#xA;For example, if Q has 6 heads and K, V have 2 heads, head 0, 1, 2 of Q will attention to head&#xA;0 of K, V, and head 3, 4, 5 of Q will attention to head 1 of K, V.&#xA;If window_size != (-1, -1), implements sliding window local attention. Query at position i&#xA;will only attend to keys between&#xA;[i + seqlen_k - seqlen_q - window_size[0], i + seqlen_k - seqlen_q + window_size[1]] inclusive.&#xA;&#xA;Arguments:&#xA;    q: (batch_size, seqlen, nheads, headdim)&#xA;    k: (batch_size, seqlen, nheads_k, headdim)&#xA;    v: (batch_size, seqlen, nheads_k, headdim)&#xA;    dropout_p: float. Dropout probability.&#xA;    softmax_scale: float. The scaling of QK^T before applying softmax.&#xA;        Default to 1 / sqrt(headdim).&#xA;    causal: bool. Whether to apply causal attention mask (e.g., for auto-regressive modeling).&#xA;    window_size: (left, right). If not (-1, -1), implements sliding window local attention.&#xA;    alibi_slopes: (nheads,) or (batch_size, nheads), fp32. A bias of&#xA;        (-alibi_slope * |i + seqlen_k - seqlen_q - j|)&#xA;        is added to the attention score of query i and key j.&#xA;    deterministic: bool. Whether to use the deterministic implementation of the backward pass,&#xA;        which is slightly slower and uses more memory. The forward pass is always deterministic.&#xA;Return:&#xA;    out: (batch_size, seqlen, nheads, headdim).&#xA;&#34;&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def flash_attn_with_kvcache(&#xA;    q,&#xA;    k_cache,&#xA;    v_cache,&#xA;    k=None,&#xA;    v=None,&#xA;    rotary_cos=None,&#xA;    rotary_sin=None,&#xA;    cache_seqlens: Optional[Union[(int, torch.Tensor)]] = None,&#xA;    cache_batch_idx: Optional[torch.Tensor] = None,&#xA;    block_table: Optional[torch.Tensor] = None,&#xA;    softmax_scale=None,&#xA;    causal=False,&#xA;    window_size=(-1, -1),  # -1 means infinite context window&#xA;    rotary_interleaved=True,&#xA;    alibi_slopes=None,&#xA;):&#xA;    &#34;&#34;&#34;&#xA;    If k and v are not None, k_cache and v_cache will be updated *inplace* with the new values from&#xA;    k and v. This is useful for incremental decoding: you can pass in the cached keys/values from&#xA;    the previous step, and update them with the new keys/values from the current step, and do&#xA;    attention with the updated cache, all in 1 kernel.&#xA;&#xA;    If you pass in k / v, you must make sure that the cache is large enough to hold the new values.&#xA;    For example, the KV cache could be pre-allocated with the max sequence length, and you can use&#xA;    cache_seqlens to keep track of the current sequence lengths of each sequence in the batch.&#xA;&#xA;    Also apply rotary embedding if rotary_cos and rotary_sin are passed in. The key @k will be&#xA;    rotated by rotary_cos and rotary_sin at indices cache_seqlens, cache_seqlens + 1, etc.&#xA;    If causal or local (i.e., window_size != (-1, -1)), the query @q will be rotated by rotary_cos&#xA;    and rotary_sin at indices cache_seqlens, cache_seqlens + 1, etc.&#xA;    If not causal and not local, the query @q will be rotated by rotary_cos and rotary_sin at&#xA;    indices cache_seqlens only (i.e. we consider all tokens in @q to be at position cache_seqlens).&#xA;&#xA;    See tests/test_flash_attn.py::test_flash_attn_kvcache for examples of how to use this function.&#xA;&#xA;    Supports multi-query and grouped-query attention (MQA/GQA) by passing in KV with fewer heads&#xA;    than Q. Note that the number of heads in Q must be divisible by the number of heads in KV.&#xA;    For example, if Q has 6 heads and K, V have 2 heads, head 0, 1, 2 of Q will attention to head&#xA;    0 of K, V, and head 3, 4, 5 of Q will attention to head 1 of K, V.&#xA;&#xA;    If causal=True, the causal mask is aligned to the bottom right corner of the attention matrix.&#xA;    For example, if seqlen_q = 2 and seqlen_k = 5, the causal mask (1 = keep, 0 = masked out) is:&#xA;        1 1 1 1 0&#xA;        1 1 1 1 1&#xA;    If seqlen_q = 5 and seqlen_k = 2, the causal mask is:&#xA;        0 0&#xA;        0 0&#xA;        0 0&#xA;        1 0&#xA;        1 1&#xA;    If the row of the mask is all zero, the output will be zero.&#xA;&#xA;    If window_size != (-1, -1), implements sliding window local attention. Query at position i&#xA;    will only attend to keys between&#xA;    [i + seqlen_k - seqlen_q - window_size[0], i + seqlen_k - seqlen_q + window_size[1]] inclusive.&#xA;&#xA;    Note: Does not support backward pass.&#xA;&#xA;    Arguments:&#xA;        q: (batch_size, seqlen, nheads, headdim)&#xA;        k_cache: (batch_size_cache, seqlen_cache, nheads_k, headdim) if there&#39;s no block_table,&#xA;            or (num_blocks, page_block_size, nheads_k, headdim) if there&#39;s a block_table (i.e. paged KV cache)&#xA;            page_block_size must be a multiple of 256.&#xA;        v_cache: (batch_size_cache, seqlen_cache, nheads_k, headdim) if there&#39;s no block_table,&#xA;            or (num_blocks, page_block_size, nheads_k, headdim) if there&#39;s a block_table (i.e. paged KV cache)&#xA;        k [optional]: (batch_size, seqlen_new, nheads_k, headdim). If not None, we concatenate&#xA;            k with k_cache, starting at the indices specified by cache_seqlens.&#xA;        v [optional]: (batch_size, seqlen_new, nheads_k, headdim). Similar to k.&#xA;        rotary_cos [optional]: (seqlen_ro, rotary_dim / 2). If not None, we apply rotary embedding&#xA;            to k and q. Only applicable if k and v are passed in. rotary_dim must be divisible by 16.&#xA;        rotary_sin [optional]: (seqlen_ro, rotary_dim / 2). Similar to rotary_cos.&#xA;        cache_seqlens: int, or (batch_size,), dtype torch.int32. The sequence lengths of the&#xA;            KV cache.&#xA;        block_table [optional]: (batch_size, max_num_blocks_per_seq), dtype torch.int32.&#xA;        cache_batch_idx: (batch_size,), dtype torch.int32. The indices used to index into the KV cache.&#xA;            If None, we assume that the batch indices are [0, 1, 2, ..., batch_size - 1].&#xA;            If the indices are not distinct, and k and v are provided, the values updated in the cache&#xA;                 might come from any of the duplicate indices.&#xA;        softmax_scale: float. The scaling of QK^T before applying softmax.&#xA;            Default to 1 / sqrt(headdim).&#xA;        causal: bool. Whether to apply causal attention mask (e.g., for auto-regressive modeling).&#xA;        window_size: (left, right). If not (-1, -1), implements sliding window local attention.&#xA;        rotary_interleaved: bool. Only applicable if rotary_cos and rotary_sin are passed in.&#xA;            If True, rotary embedding will combine dimensions 0 &amp;amp; 1, 2 &amp;amp; 3, etc. If False,&#xA;            rotary embedding will combine dimensions 0 &amp;amp; rotary_dim / 2, 1 &amp;amp; rotary_dim / 2 + 1&#xA;            (i.e. GPT-NeoX style).&#xA;        alibi_slopes: (nheads,) or (batch_size, nheads), fp32. A bias of&#xA;            (-alibi_slope * |i + seqlen_k - seqlen_q - j|)&#xA;            is added to the attention score of query i and key j.&#xA;&#xA;    Return:&#xA;        out: (batch_size, seqlen, nheads, headdim).&#xA;    &#34;&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see how these functions are used in a multi-head attention layer (which includes QKV projection, output projection), see the MHA &lt;a href=&#34;https://github.com/Dao-AILab/flash-attention/raw/main/flash_attn/modules/mha.py&#34;&gt;implementation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;h3&gt;2.0: Complete rewrite, 2x faster&lt;/h3&gt; &#xA;&lt;p&gt;Upgrading from FlashAttention (1.x) to FlashAttention-2&lt;/p&gt; &#xA;&lt;p&gt;These functions have been renamed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;flash_attn_unpadded_func&lt;/code&gt; -&amp;gt; &lt;code&gt;flash_attn_varlen_func&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;flash_attn_unpadded_qkvpacked_func&lt;/code&gt; -&amp;gt; &lt;code&gt;flash_attn_varlen_qkvpacked_func&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;flash_attn_unpadded_kvpacked_func&lt;/code&gt; -&amp;gt; &lt;code&gt;flash_attn_varlen_kvpacked_func&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If the inputs have the same sequence lengths in the same batch, it is simpler and faster to use these functions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;flash_attn_qkvpacked_func(qkv, dropout_p=0.0, softmax_scale=None, causal=False)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;flash_attn_func(q, k, v, dropout_p=0.0, softmax_scale=None, causal=False)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2.1: Change behavior of causal flag&lt;/h3&gt; &#xA;&lt;p&gt;If seqlen_q != seqlen_k and causal=True, the causal mask is aligned to the bottom right corner of the attention matrix, instead of the top-left corner.&lt;/p&gt; &#xA;&lt;p&gt;For example, if seqlen_q = 2 and seqlen_k = 5, the causal mask (1 = keep, 0 = masked out) is:&lt;br&gt; v2.0:&lt;br&gt; 1 0 0 0 0&lt;br&gt; 1 1 0 0 0&lt;br&gt; v2.1:&lt;br&gt; 1 1 1 1 0&lt;br&gt; 1 1 1 1 1&lt;/p&gt; &#xA;&lt;p&gt;If seqlen_q = 5 and seqlen_k = 2, the causal mask is:&lt;br&gt; v2.0:&lt;br&gt; 1 0&lt;br&gt; 1 1&lt;br&gt; 1 1&lt;br&gt; 1 1&lt;br&gt; 1 1&lt;br&gt; v2.1:&lt;br&gt; 0 0&lt;br&gt; 0 0&lt;br&gt; 0 0&lt;br&gt; 1 0&lt;br&gt; 1 1&lt;br&gt; If the row of the mask is all zero, the output will be zero.&lt;/p&gt; &#xA;&lt;h3&gt;2.2: Optimize for inference&lt;/h3&gt; &#xA;&lt;p&gt;Optimize for inference (iterative decoding) when query has very small sequence length (e.g., query sequence length = 1). The bottleneck here is to load KV cache as fast as possible, and we split the loading across different thread blocks, with a separate kernel to combine results.&lt;/p&gt; &#xA;&lt;p&gt;See the function &lt;code&gt;flash_attn_with_kvcache&lt;/code&gt; with more features for inference (perform rotary embedding, updating KV cache inplace).&lt;/p&gt; &#xA;&lt;p&gt;Thanks to the xformers team, and in particular Daniel Haziza, for this collaboration.&lt;/p&gt; &#xA;&lt;h3&gt;2.3: Local (i.e., sliding window) attention&lt;/h3&gt; &#xA;&lt;p&gt;Implement sliding window attention (i.e., local attention). Thanks to &lt;a href=&#34;https://mistral.ai/&#34;&gt;Mistral AI&lt;/a&gt; and in particular TimothÃ©e Lacroix for this contribution. Sliding window was used in the &lt;a href=&#34;https://mistral.ai/news/announcing-mistral-7b/&#34;&gt;Mistral 7B&lt;/a&gt; model.&lt;/p&gt; &#xA;&lt;h3&gt;2.4: ALiBi (attention with linear bias), deterministic backward pass.&lt;/h3&gt; &#xA;&lt;p&gt;Implement ALiBi (Press et al., 2021). Thanks to Sanghun Cho from Kakao Brain for this contribution.&lt;/p&gt; &#xA;&lt;p&gt;Implement deterministic backward pass. Thanks to engineers from &lt;a href=&#34;https://raw.githubusercontent.com/Dao-AILab/flash-attention/main/www.meituan.com&#34;&gt;Meituan&lt;/a&gt; for this contribution.&lt;/p&gt; &#xA;&lt;h3&gt;2.5: Paged KV cache.&lt;/h3&gt; &#xA;&lt;p&gt;Support paged KV cache (i.e., &lt;a href=&#34;https://arxiv.org/abs/2309.06180&#34;&gt;PagedAttention&lt;/a&gt;). Thanks to @beginlner for this contribution.&lt;/p&gt; &#xA;&lt;h3&gt;2.6: Softcapping.&lt;/h3&gt; &#xA;&lt;p&gt;Support attention with softcapping, as used in Gemma-2 and Grok models. Thanks to @Narsil for this contribution.&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;We present expected speedup (combined forward + backward pass) and memory savings from using FlashAttention against PyTorch standard attention, depending on sequence length, on different GPUs (speedup depends on memory bandwidth - we see more speedup on slower GPU memory).&lt;/p&gt; &#xA;&lt;p&gt;We currently have benchmarks for these GPUs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Dao-AILab/flash-attention/main/#a100&#34;&gt;A100&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Dao-AILab/flash-attention/main/#h100&#34;&gt;H100&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- * [RTX 3090](#rtx-3090) --&gt; &#xA;&lt;!-- * [T4](#t4) --&gt; &#xA;&lt;h3&gt;A100&lt;/h3&gt; &#xA;&lt;p&gt;We display FlashAttention speedup using these parameters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Head dimension 64 or 128, hidden dimension 2048 (i.e. either 32 or 16 heads).&lt;/li&gt; &#xA; &lt;li&gt;Sequence length 512, 1k, 2k, 4k, 8k, 16k.&lt;/li&gt; &#xA; &lt;li&gt;Batch size set to 16k / seqlen.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Speedup&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Dao-AILab/flash-attention/main/assets/flash2_a100_fwd_bwd_benchmark.png&#34; alt=&#34;FlashAttention speedup on A100 80GB SXM5 with FP16/BF16&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Memory&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Dao-AILab/flash-attention/main/assets/flashattn_memory.jpg&#34; alt=&#34;FlashAttention memory&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We show memory savings in this graph (note that memory footprint is the same no matter if you use dropout or masking). Memory savings are proportional to sequence length -- since standard attention has memory quadratic in sequence length, whereas FlashAttention has memory linear in sequence length. We see 10X memory savings at sequence length 2K, and 20X at 4K. As a result, FlashAttention can scale to much longer sequence lengths.&lt;/p&gt; &#xA;&lt;h3&gt;H100&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Dao-AILab/flash-attention/main/assets/flash2_h100_fwd_bwd_benchmark.png&#34; alt=&#34;FlashAttention speedup on H100 SXM5 with FP16/BF16&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Full model code and training script&lt;/h2&gt; &#xA;&lt;p&gt;We have released the full GPT model &lt;a href=&#34;https://github.com/Dao-AILab/flash-attention/raw/main/flash_attn/models/gpt.py&#34;&gt;implementation&lt;/a&gt;. We also provide optimized implementations of other layers (e.g., MLP, LayerNorm, cross-entropy loss, rotary embedding). Overall this speeds up training by 3-5x compared to the baseline implementation from Huggingface, reaching up to 225 TFLOPs/sec per A100, equivalent to 72% model FLOPs utilization (we don&#39;t need any activation checkpointing).&lt;/p&gt; &#xA;&lt;p&gt;We also include a training &lt;a href=&#34;https://github.com/Dao-AILab/flash-attention/tree/main/training&#34;&gt;script&lt;/a&gt; to train GPT2 on Openwebtext and GPT3 on The Pile.&lt;/p&gt; &#xA;&lt;h2&gt;Triton implementation of FlashAttention&lt;/h2&gt; &#xA;&lt;p&gt;Phil Tillet (OpenAI) has an experimental implementation of FlashAttention in Triton: &lt;a href=&#34;https://github.com/openai/triton/raw/master/python/tutorials/06-fused-attention.py&#34;&gt;https://github.com/openai/triton/blob/master/python/tutorials/06-fused-attention.py&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;As Triton is a higher-level language than CUDA, it might be easier to understand and experiment with. The notations in the Triton implementation are also closer to what&#39;s used in our paper.&lt;/p&gt; &#xA;&lt;p&gt;We also have an experimental implementation in Triton that support attention bias (e.g. ALiBi): &lt;a href=&#34;https://github.com/Dao-AILab/flash-attention/raw/main/flash_attn/flash_attn_triton.py&#34;&gt;https://github.com/Dao-AILab/flash-attention/blob/main/flash_attn/flash_attn_triton.py&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;p&gt;We test that FlashAttention produces the same output and gradient as a reference implementation, up to some numerical tolerance. In particular, we check that the maximum numerical error of FlashAttention is at most twice the numerical error of a baseline implementation in Pytorch (for different head dimensions, input dtype, sequence length, causal / non-causal).&lt;/p&gt; &#xA;&lt;p&gt;To run the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pytest -q -s tests/test_flash_attn.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;When you encounter issues&lt;/h2&gt; &#xA;&lt;p&gt;This new release of FlashAttention-2 has been tested on several GPT-style models, mostly on A100 GPUs.&lt;/p&gt; &#xA;&lt;p&gt;If you encounter bugs, please open a GitHub Issue!&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you use this codebase, or otherwise found our work valuable, please cite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{dao2022flashattention,&#xA;  title={Flash{A}ttention: Fast and Memory-Efficient Exact Attention with {IO}-Awareness},&#xA;  author={Dao, Tri and Fu, Daniel Y. and Ermon, Stefano and Rudra, Atri and R{\&#39;e}, Christopher},&#xA;  booktitle={Advances in Neural Information Processing Systems (NeurIPS)},&#xA;  year={2022}&#xA;}&#xA;@inproceedings{dao2023flashattention2,&#xA;  title={Flash{A}ttention-2: Faster Attention with Better Parallelism and Work Partitioning},&#xA;  author={Dao, Tri},&#xA;  booktitle={International Conference on Learning Representations (ICLR)},&#xA;  year={2024}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>prowler-cloud/prowler</title>
    <updated>2024-07-21T01:46:15Z</updated>
    <id>tag:github.com,2024-07-21:/prowler-cloud/prowler</id>
    <link href="https://github.com/prowler-cloud/prowler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Prowler is an Open Source Security tool for AWS, Azure, GCP and Kubernetes to do security assessments, audits, incident response, compliance, continuous monitoring, hardening and forensics readiness. Includes CIS, NIST 800, NIST CSF, CISA, FedRAMP, PCI-DSS, GDPR, HIPAA, FFIEC, SOC2, GXP, Well-Architected Security, ENS and more&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img align=&#34;center&#34; src=&#34;https://github.com/prowler-cloud/prowler/raw/master/docs/img/prowler-logo-black.png#gh-light-mode-only&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt; &lt;img align=&#34;center&#34; src=&#34;https://github.com/prowler-cloud/prowler/raw/master/docs/img/prowler-logo-white.png#gh-dark-mode-only&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;&lt;i&gt;Prowler SaaS &lt;/i&gt;&lt;/b&gt;&lt;i&gt; and &lt;b&gt;Prowler Open Source&lt;/b&gt; are as dynamic and adaptable as the environment theyâre meant to protect. Trusted by the leaders in security. &lt;/i&gt;&lt;/p&gt;&#xA;&lt;i&gt; &lt;/i&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;i&gt; &lt;b&gt;Learn more at &lt;a href=&#34;https://prowler.com&#34;&gt;prowler.com&lt;/a&gt;&lt;/b&gt;&lt;/i&gt;&lt;a href=&#34;https://prowler.com&#34;&gt; &lt;/a&gt;&lt;/p&gt;&#xA;&lt;a href=&#34;https://prowler.com&#34;&gt; &lt;/a&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://prowler.com&#34;&gt; &lt;/a&gt;&lt;a href=&#34;https://join.slack.com/t/prowler-workspace/shared_invite/zt-1hix76xsl-2uq222JIXrC7Q8It~9ZNog&#34;&gt;&lt;img width=&#34;30&#34; height=&#34;30&#34; alt=&#34;Prowler community on Slack&#34; src=&#34;https://github.com/prowler-cloud/prowler/assets/38561120/3c8b4ec5-6849-41a5-b5e1-52bbb94af73a&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://join.slack.com/t/prowler-workspace/shared_invite/zt-1hix76xsl-2uq222JIXrC7Q8It~9ZNog&#34;&gt;Join our Prowler community!&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://join.slack.com/t/prowler-workspace/shared_invite/zt-1hix76xsl-2uq222JIXrC7Q8It~9ZNog&#34;&gt;&lt;img alt=&#34;Slack Shield&#34; src=&#34;https://img.shields.io/badge/slack-prowler-brightgreen.svg?logo=slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/prowler/&#34;&gt;&lt;img alt=&#34;Python Version&#34; src=&#34;https://img.shields.io/pypi/v/prowler.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.python.org/pypi/prowler/&#34;&gt;&lt;img alt=&#34;Python Version&#34; src=&#34;https://img.shields.io/pypi/pyversions/prowler.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypistats.org/packages/prowler&#34;&gt;&lt;img alt=&#34;PyPI Prowler Downloads&#34; src=&#34;https://img.shields.io/pypi/dw/prowler.svg?label=prowler%20downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/toniblyx/prowler&#34;&gt;&lt;img alt=&#34;Docker Pulls&#34; src=&#34;https://img.shields.io/docker/pulls/toniblyx/prowler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/toniblyx/prowler&#34;&gt;&lt;img alt=&#34;Docker&#34; src=&#34;https://img.shields.io/docker/cloud/build/toniblyx/prowler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/toniblyx/prowler&#34;&gt;&lt;img alt=&#34;Docker&#34; src=&#34;https://img.shields.io/docker/image-size/toniblyx/prowler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gallery.ecr.aws/prowler-cloud/prowler&#34;&gt;&lt;img width=&#34;120&#34; height=&#34;19&amp;quot;&#34; alt=&#34;AWS ECR Gallery&#34; src=&#34;https://user-images.githubusercontent.com/3985464/151531396-b6535a68-c907-44eb-95a1-a09508178616.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/prowler-cloud/prowler&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/prowler-cloud/prowler/graph/badge.svg?token=OflBGsdpDl&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/prowler-cloud/prowler&#34;&gt;&lt;img alt=&#34;Repo size&#34; src=&#34;https://img.shields.io/github/repo-size/prowler-cloud/prowler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/prowler-cloud/prowler/issues&#34;&gt;&lt;img alt=&#34;Issues&#34; src=&#34;https://img.shields.io/github/issues/prowler-cloud/prowler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/prowler-cloud/prowler/releases&#34;&gt;&lt;img alt=&#34;Version&#34; src=&#34;https://img.shields.io/github/v/release/prowler-cloud/prowler?include_prereleases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/prowler-cloud/prowler/releases&#34;&gt;&lt;img alt=&#34;Version&#34; src=&#34;https://img.shields.io/github/release-date/prowler-cloud/prowler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/prowler-cloud/prowler&#34;&gt;&lt;img alt=&#34;Contributors&#34; src=&#34;https://img.shields.io/github/contributors-anon/prowler-cloud/prowler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/prowler-cloud/prowler&#34;&gt;&lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/github/license/prowler-cloud/prowler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/ToniBlyx&#34;&gt;&lt;img alt=&#34;Twitter&#34; src=&#34;https://img.shields.io/twitter/follow/toniblyx?style=social&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/prowlercloud&#34;&gt;&lt;img alt=&#34;Twitter&#34; src=&#34;https://img.shields.io/twitter/follow/prowlercloud?style=social&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img align=&#34;center&#34; src=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/docs/img/prowler-cli-quick.gif&#34; width=&#34;100%&#34; height=&#34;100%&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Description&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Prowler&lt;/strong&gt; is an Open Source security tool to perform AWS, Azure, Google Cloud and Kubernetes security best practices assessments, audits, incident response, continuous monitoring, hardening and forensics readiness, and also remediations! We have Prowler CLI (Command Line Interface) that we call Prowler Open Source and a service on top of it that we call &lt;a href=&#34;https://prowler.com&#34;&gt;Prowler SaaS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Prowler CLI&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;prowler &amp;lt;provider&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/docs/img/short-display.png&#34; alt=&#34;Prowler CLI Execution&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Prowler Dashboard&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;prowler dashboard&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/docs/img/dashboard.png&#34; alt=&#34;Prowler Dashboard&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;It contains hundreds of controls covering CIS, NIST 800, NIST CSF, CISA, RBI, FedRAMP, PCI-DSS, GDPR, HIPAA, FFIEC, SOC2, GXP, AWS Well-Architected Framework Security Pillar, AWS Foundational Technical Review (FTR), ENS (Spanish National Security Scheme) and your custom security frameworks.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Provider&lt;/th&gt; &#xA;   &lt;th&gt;Checks&lt;/th&gt; &#xA;   &lt;th&gt;Services&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://docs.prowler.com/projects/prowler-open-source/en/latest/tutorials/compliance/&#34;&gt;Compliance Frameworks&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://docs.prowler.com/projects/prowler-open-source/en/latest/tutorials/misc/#categories&#34;&gt;Categories&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AWS&lt;/td&gt; &#xA;   &lt;td&gt;383&lt;/td&gt; &#xA;   &lt;td&gt;67 -&amp;gt; &lt;code&gt;prowler aws --list-services&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;28 -&amp;gt; &lt;code&gt;prowler aws --list-compliance&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;7 -&amp;gt; &lt;code&gt;prowler aws --list-categories&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GCP&lt;/td&gt; &#xA;   &lt;td&gt;77&lt;/td&gt; &#xA;   &lt;td&gt;13 -&amp;gt; &lt;code&gt;prowler gcp --list-services&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1 -&amp;gt; &lt;code&gt;prowler gcp --list-compliance&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2 -&amp;gt; &lt;code&gt;prowler gcp --list-categories&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Azure&lt;/td&gt; &#xA;   &lt;td&gt;135&lt;/td&gt; &#xA;   &lt;td&gt;16 -&amp;gt; &lt;code&gt;prowler azure --list-services&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2 -&amp;gt; &lt;code&gt;prowler azure --list-compliance&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2 -&amp;gt; &lt;code&gt;prowler azure --list-categories&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Kubernetes&lt;/td&gt; &#xA;   &lt;td&gt;83&lt;/td&gt; &#xA;   &lt;td&gt;7 -&amp;gt; &lt;code&gt;prowler kubernetes --list-services&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1 -&amp;gt; &lt;code&gt;prowler kubernetes --list-compliance&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;7 -&amp;gt; &lt;code&gt;prowler kubernetes --list-categories&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;ð» Installation&lt;/h1&gt; &#xA;&lt;h2&gt;Pip package&lt;/h2&gt; &#xA;&lt;p&gt;Prowler is available as a project in &lt;a href=&#34;https://pypi.org/project/prowler-cloud/&#34;&gt;PyPI&lt;/a&gt;, thus can be installed using pip with Python &amp;gt;= 3.9, &amp;lt; 3.13:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pip install prowler&#xA;prowler -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;More details at &lt;a href=&#34;https://docs.prowler.com/projects/prowler-open-source/en/latest/&#34;&gt;https://docs.prowler.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Containers&lt;/h2&gt; &#xA;&lt;p&gt;The available versions of Prowler are the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;latest&lt;/code&gt;: in sync with &lt;code&gt;master&lt;/code&gt; branch (bear in mind that it is not a stable version)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v3-latest&lt;/code&gt;: in sync with &lt;code&gt;v3&lt;/code&gt; branch (bear in mind that it is not a stable version)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;x.y.z&amp;gt;&lt;/code&gt; (release): you can find the releases &lt;a href=&#34;https://github.com/prowler-cloud/prowler/releases&#34;&gt;here&lt;/a&gt;, those are stable releases.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stable&lt;/code&gt;: this tag always point to the latest release.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v3-stable&lt;/code&gt;: this tag always point to the latest release for v3.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The container images are available here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/toniblyx/prowler/tags&#34;&gt;DockerHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gallery.ecr.aws/prowler-cloud/prowler&#34;&gt;AWS Public ECR&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;From GitHub&lt;/h2&gt; &#xA;&lt;p&gt;Python &amp;gt;= 3.9, &amp;lt; 3.13 is required with pip and poetry:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/prowler-cloud/prowler&#xA;cd prowler&#xA;poetry shell&#xA;poetry install&#xA;python prowler.py -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you want to clone Prowler from Windows, use &lt;code&gt;git config core.longpaths true&lt;/code&gt; to allow long file paths.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;ðâï¸ High level architecture&lt;/h1&gt; &#xA;&lt;p&gt;You can run Prowler from your workstation, a Kubernetes Job, a Google Compute Engine, an Azure VM, an EC2 instance, Fargate or any other container, CloudShell and many more.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/docs/img/architecture.png&#34; alt=&#34;Architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Deprecations from v3&lt;/h1&gt; &#xA;&lt;h2&gt;General&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Allowlist&lt;/code&gt; now is called &lt;code&gt;Mutelist&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;--quiet&lt;/code&gt; option has been deprecated, now use the &lt;code&gt;--status&lt;/code&gt; flag to select the finding&#39;s status you want to get from PASS, FAIL or MANUAL.&lt;/li&gt; &#xA; &lt;li&gt;All &lt;code&gt;INFO&lt;/code&gt; finding&#39;s status has changed to &lt;code&gt;MANUAL&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The CSV output format is common for all the providers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We have deprecated some of our outputs formats:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The native JSON is replaced for the JSON &lt;a href=&#34;https://schema.ocsf.io/&#34;&gt;OCSF&lt;/a&gt; v1.1.0, common for all the providers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;AWS&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Deprecate the AWS flag --sts-endpoint-region since we use AWS STS regional tokens.&lt;/li&gt; &#xA; &lt;li&gt;To send only FAILS to AWS Security Hub, now use either &lt;code&gt;--send-sh-only-fails&lt;/code&gt; or &lt;code&gt;--security-hub --status FAIL&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;ð Documentation&lt;/h1&gt; &#xA;&lt;p&gt;Install, Usage, Tutorials and Developer Guide is at &lt;a href=&#34;https://docs.prowler.com/&#34;&gt;https://docs.prowler.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ð License&lt;/h1&gt; &#xA;&lt;p&gt;Prowler is licensed as Apache License 2.0 as specified in each file. You may obtain a copy of the License at &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>opendatalab/MinerU</title>
    <updated>2024-07-21T01:46:15Z</updated>
    <id>tag:github.com,2024-07-21:/opendatalab/MinerU</id>
    <link href="https://github.com/opendatalab/MinerU" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A one-stop, open-source, high-quality data extraction tool, supports PDF/webpage/e-book extraction.ä¸ç«å¼å¼æºé«è´¨éæ°æ®æåå·¥å·ï¼æ¯æPDF/ç½é¡µ/å¤æ ¼å¼çµå­ä¹¦æåã&lt;/p&gt;&lt;hr&gt;&lt;div id=&#34;top&#34;&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/opendatalab/MinerU/master/docs/images/datalab_logo.png&#34; width=&#34;160px&#34; style=&#34;vertical-align:middle;&#34;&gt; &lt;span style=&#34;font-size: 28px; vertical-align: middle;&#34;&gt;MinerU&lt;/span&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/opendatalab/MinerU&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/opendatalab/MinerU.svg?sanitize=true&#34; alt=&#34;stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/opendatalab/MinerU&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/opendatalab/MinerU.svg?sanitize=true&#34; alt=&#34;forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/opendatalab/MinerU/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-raw/opendatalab/MinerU&#34; alt=&#34;open issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/opendatalab/MinerU/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-closed-raw/opendatalab/MinerU&#34; alt=&#34;issue resolution&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/py/magic-pdf&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/magic-pdf.svg?sanitize=true&#34; alt=&#34;PyPI version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pepy.tech/project/magic-pdf&#34;&gt;&lt;img src=&#34;https://static.pepy.tech/badge/magic-pdf&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pepy.tech/project/magic-pdf&#34;&gt;&lt;img src=&#34;https://static.pepy.tech/badge/magic-pdf/month&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opendatalab/MinerU/master/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/opendatalab/MinerU/master/README_zh-CN.md&#34;&gt;ç®ä½ä¸­æ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/opendatalab/MinerU&#34;&gt;MinerU: An end-to-end PDF parsing tool based on PDF-Extract-Kit, supporting conversion from PDF to Markdown.&lt;/a&gt;ððð&lt;br&gt; &lt;a href=&#34;https://github.com/opendatalab/PDF-Extract-Kit&#34;&gt;PDF-Extract-Kit: A Comprehensive Toolkit for High-Quality PDF Content Extraction&lt;/a&gt;ð¥ð¥ð¥ &lt;/p&gt; &#xA; &lt;p align=&#34;center&#34;&gt; ð join us on &lt;a href=&#34;https://discord.gg/AsQMhuMN&#34; target=&#34;_blank&#34;&gt;Discord&lt;/a&gt; and &lt;a href=&#34;https://cdn.vansin.top/internlm/mineru.jpg&#34; target=&#34;_blank&#34;&gt;WeChat&lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;MinerU&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;MinerU is a one-stop, open-source, high-quality data extraction tool, includes the following primary features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opendatalab/MinerU/master/#Magic-PDF&#34;&gt;Magic-PDF&lt;/a&gt; PDF Document Extraction&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opendatalab/MinerU/master/#Magic-Doc&#34;&gt;Magic-Doc&lt;/a&gt; Webpage &amp;amp; E-book Extraction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Magic-PDF&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Magic-PDF is a tool designed to convert PDF documents into Markdown format, capable of processing files stored locally or on object storage supporting S3 protocol.&lt;/p&gt; &#xA;&lt;p&gt;Key features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for multiple front-end model inputs&lt;/li&gt; &#xA; &lt;li&gt;Removal of headers, footers, footnotes, and page numbers&lt;/li&gt; &#xA; &lt;li&gt;Human-readable layout formatting&lt;/li&gt; &#xA; &lt;li&gt;Retains the original document&#39;s structure and formatting, including headings, paragraphs, lists, and more&lt;/li&gt; &#xA; &lt;li&gt;Extraction and display of images and tables within markdown&lt;/li&gt; &#xA; &lt;li&gt;Conversion of equations into LaTeX format&lt;/li&gt; &#xA; &lt;li&gt;Automatic detection and conversion of garbled PDFs&lt;/li&gt; &#xA; &lt;li&gt;Compatibility with CPU and GPU environments&lt;/li&gt; &#xA; &lt;li&gt;Available for Windows, Linux, and macOS platforms&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/opendatalab/MinerU/assets/11393164/618937cb-dc6a-4646-b433-e3131a5f4070&#34;&gt;https://github.com/opendatalab/MinerU/assets/11393164/618937cb-dc6a-4646-b433-e3131a5f4070&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Project Panorama&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/opendatalab/MinerU/master/docs/images/project_panorama_en.png&#34; alt=&#34;Project Panorama&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Flowchart&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/opendatalab/MinerU/master/docs/images/flowchart_en.png&#34; alt=&#34;Flowchart&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Dependency repositorys&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/opendatalab/PDF-Extract-Kit&#34;&gt;PDF-Extract-Kit : A Comprehensive Toolkit for High-Quality PDF Content Extraction&lt;/a&gt; ððð&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python &amp;gt;= 3.9&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Using a virtual environment is recommended to avoid potential dependency conflicts; both venv and conda are suitable. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda create -n MinerU python=3.10&#xA;conda activate MinerU&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installation and Configuration&lt;/h3&gt; &#xA;&lt;h4&gt;1. Install Magic-PDF&lt;/h4&gt; &#xA;&lt;p&gt;Install the full-feature package with pip:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: The pip-installed package supports CPU-only and is ideal for quick tests.&lt;/p&gt; &#xA; &lt;p&gt;For CUDA/MPS acceleration in production, see &lt;a href=&#34;https://raw.githubusercontent.com/opendatalab/MinerU/master/#4-Acceleration-Using-CUDA-or-MPS&#34;&gt;Acceleration Using CUDA or MPS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install magic-pdf[full-cpu]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The full-feature package depends on detectron2, which requires a compilation installation.&lt;br&gt; If you need to compile it yourself, please refer to &lt;a href=&#34;https://github.com/facebookresearch/detectron2/issues/5114&#34;&gt;https://github.com/facebookresearch/detectron2/issues/5114&lt;/a&gt;&lt;br&gt; Alternatively, you can directly use our precompiled whl package (limited to Python 3.10):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install detectron2 --extra-index-url https://myhloli.github.io/wheels/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. Downloading model weights files&lt;/h4&gt; &#xA;&lt;p&gt;For detailed references, please see below &lt;a href=&#34;https://raw.githubusercontent.com/opendatalab/MinerU/master/docs/how_to_download_models_en.md&#34;&gt;how_to_download_models&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;After downloading the model weights, move the &#39;models&#39; directory to a directory on a larger disk space, preferably an SSD.&lt;/p&gt; &#xA;&lt;h4&gt;3. Copy the Configuration File and Make Configurations&lt;/h4&gt; &#xA;&lt;p&gt;You can get the &lt;a href=&#34;https://raw.githubusercontent.com/opendatalab/MinerU/master/magic-pdf.template.json&#34;&gt;magic-pdf.template.json&lt;/a&gt; file in the repository root directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp magic-pdf.template.json ~/magic-pdf.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In magic-pdf.json, configure &#34;models-dir&#34; to point to the directory where the model weights files are located.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;models-dir&#34;: &#34;/tmp/models&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;4. Acceleration Using CUDA or MPS&lt;/h4&gt; &#xA;&lt;p&gt;If you have an available Nvidia GPU or are using a Mac with Apple Silicon, you can leverage acceleration with CUDA or MPS respectively.&lt;/p&gt; &#xA;&lt;h5&gt;CUDA&lt;/h5&gt; &#xA;&lt;p&gt;You need to install the corresponding PyTorch version according to your CUDA version.&lt;br&gt; This example installs the CUDA 11.8 version.More information &lt;a href=&#34;https://pytorch.org/get-started/locally/&#34;&gt;https://pytorch.org/get-started/locally/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install --force-reinstall torch==2.3.1 torchvision==0.18.1 --index-url https://download.pytorch.org/whl/cu118&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, you need to modify the value of &#34;device-mode&#34; in the configuration file magic-pdf.json.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;device-mode&#34;:&#34;cuda&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;MPS&lt;/h5&gt; &#xA;&lt;p&gt;For macOS users with M-series chip devices, you can use MPS for inference acceleration.&lt;br&gt; You also need to modify the value of &#34;device-mode&#34; in the configuration file magic-pdf.json.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;device-mode&#34;:&#34;mps&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;h4&gt;1.Usage via Command Line&lt;/h4&gt; &#xA;&lt;h6&gt;simple&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;magic-pdf pdf-command --pdf &#34;pdf_path&#34; --inside_model true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After the program has finished, you can find the generated markdown files under the directory &#34;/tmp/magic-pdf&#34;.&lt;br&gt; You can find the corresponding xxx_model.json file in the markdown directory.&lt;br&gt; If you intend to do secondary development on the post-processing pipeline, you can use the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;magic-pdf pdf-command --pdf &#34;pdf_path&#34; --model &#34;model_json_path&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this way, you won&#39;t need to re-run the model data, making debugging more convenient.&lt;/p&gt; &#xA;&lt;h6&gt;more&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;magic-pdf --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. Usage via Api&lt;/h4&gt; &#xA;&lt;h6&gt;Local&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;image_writer = DiskReaderWriter(local_image_dir)&#xA;image_dir = str(os.path.basename(local_image_dir))&#xA;jso_useful_key = {&#34;_pdf_type&#34;: &#34;&#34;, &#34;model_list&#34;: []}&#xA;pipe = UNIPipe(pdf_bytes, jso_useful_key, image_writer)&#xA;pipe.pipe_classify()&#xA;pipe.pipe_parse()&#xA;md_content = pipe.pipe_mk_markdown(image_dir, drop_mode=&#34;none&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Object Storage&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;s3pdf_cli = S3ReaderWriter(pdf_ak, pdf_sk, pdf_endpoint)&#xA;image_dir = &#34;s3://img_bucket/&#34;&#xA;s3image_cli = S3ReaderWriter(img_ak, img_sk, img_endpoint, parent_path=image_dir)&#xA;pdf_bytes = s3pdf_cli.read(s3_pdf_path, mode=s3pdf_cli.MODE_BIN)&#xA;jso_useful_key = {&#34;_pdf_type&#34;: &#34;&#34;, &#34;model_list&#34;: []}&#xA;pipe = UNIPipe(pdf_bytes, jso_useful_key, s3image_cli)&#xA;pipe.pipe_classify()&#xA;pipe.pipe_parse()&#xA;md_content = pipe.pipe_mk_markdown(image_dir, drop_mode=&#34;none&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Demo can be referred to &lt;a href=&#34;https://raw.githubusercontent.com/opendatalab/MinerU/master/demo/demo.py&#34;&gt;demo.py&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Magic-Doc&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Magic-Doc is a tool designed to convert web pages or multi-format e-books into markdown format.&lt;/p&gt; &#xA;&lt;p&gt;Key Features Include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Web Page Extraction&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Cross-modal precise parsing of text, images, tables, and formula information.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;E-Book Document Extraction&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Supports various document formats including epub, mobi, with full adaptation for text and images.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Language Type Identification&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Accurate recognition of 176 languages.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/opendatalab/MinerU/assets/11393164/a5a650e9-f4c0-463e-acc3-960967f1a1ca&#34;&gt;https://github.com/opendatalab/MinerU/assets/11393164/a5a650e9-f4c0-463e-acc3-960967f1a1ca&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/opendatalab/MinerU/assets/11393164/0f4a6fe9-6cca-4113-9fdc-a537749d764d&#34;&gt;https://github.com/opendatalab/MinerU/assets/11393164/0f4a6fe9-6cca-4113-9fdc-a537749d764d&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/opendatalab/MinerU/assets/11393164/20438a02-ce6c-4af8-9dde-d722a4e825b2&#34;&gt;https://github.com/opendatalab/MinerU/assets/11393164/20438a02-ce6c-4af8-9dde-d722a4e825b2&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Project Repository&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/InternLM/magic-doc&#34;&gt;Magic-Doc&lt;/a&gt; Outstanding Webpage and E-book Extraction Tool&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;All Thanks To Our Contributors&lt;/h1&gt; &#xA;&lt;a href=&#34;https://github.com/magicpdf/Magic-PDF/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=opendatalab/MinerU&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;License Information&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opendatalab/MinerU/master/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The project currently leverages PyMuPDF to deliver advanced functionalities; however, its adherence to the AGPL license may impose limitations on certain use cases. In upcoming iterations, we intend to explore and transition to a more permissively licensed PDF processing library to enhance user-friendliness and flexibility.&lt;/p&gt; &#xA;&lt;h1&gt;Acknowledgments&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PaddlePaddle/PaddleOCR&#34;&gt;PaddleOCR&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pymupdf/PyMuPDF&#34;&gt;PyMuPDF&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LlmKira/fast-langdetect&#34;&gt;fast-langdetect&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pdfminer/pdfminer.six&#34;&gt;pdfminer.six&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Citation&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@misc{2024mineru,&#xA;    title={MinerU: A One-stop, Open-source, High-quality Data Extraction Tool},&#xA;    author={MinerU Contributors},&#xA;    howpublished = {\url{https://github.com/opendatalab/MinerU}},&#xA;    year={2024}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Star History&lt;/h1&gt; &#xA;&lt;a&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://api.star-history.com/svg?repos=opendatalab/MinerU&amp;amp;type=Date&amp;amp;theme=dark&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://api.star-history.com/svg?repos=opendatalab/MinerU&amp;amp;type=Date&#34;&gt; &#xA;  &lt;img alt=&#34;Star History Chart&#34; src=&#34;https://api.star-history.com/svg?repos=opendatalab/MinerU&amp;amp;type=Date&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt;</summary>
  </entry>
</feed>