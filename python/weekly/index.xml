<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-21T02:00:30Z</updated>
  <subtitle>Weekly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alejandro-ao/langchain-ask-pdf</title>
    <updated>2023-05-21T02:00:30Z</updated>
    <id>tag:github.com,2023-05-21:/alejandro-ao/langchain-ask-pdf</id>
    <link href="https://github.com/alejandro-ao/langchain-ask-pdf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An AI-app that allows you to upload a PDF and ask questions about it. It uses OpenAI&#39;s LLMs to generate a response.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Langchain Ask PDF (Tutorial)&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You may find the step-by-step video tutorial to build this application &lt;a href=&#34;https://youtu.be/wUAUdEw5oxM&#34;&gt;on Youtube&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This is a Python application that allows you to load a PDF and ask questions about it using natural language. The application uses a LLM to generate a response about your PDF. The LLM will not answer questions unrelated to the document.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;The application reads the PDF and splits the text into smaller chunks that can be then fed into a LLM. It uses OpenAI embeddings to create vector representations of the chunks. The application then finds the chunks that are semantically similar to the question that the user asked and feeds those chunks to the LLM to generate a response.&lt;/p&gt; &#xA;&lt;p&gt;The application uses Streamlit to create the GUI and Langchain to deal with the LLM.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install the repository, please clone this repository and install the requirements:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will also need to add your OpenAI API key to the &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To use the application, run the &lt;code&gt;main.py&lt;/code&gt; file with the streamlit CLI (after having installed streamlit):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;streamlit run app.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This repository is for educational purposes only and is not intended to receive further contributions. It is supposed to be used as support material for the YouTube tutorial that shows how to build the project.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zixiiu/Digital_Life_Server</title>
    <updated>2023-05-21T02:00:30Z</updated>
    <id>tag:github.com,2023-05-21:/zixiiu/Digital_Life_Server</id>
    <link href="https://github.com/zixiiu/Digital_Life_Server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Yet another voice assistant, but alive.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Digital Life Server&lt;/h1&gt; &#xA;&lt;p&gt;这是「数字生命」服务部分代码。包括与前端通信，语音识别，chatGPT接入和语音合成。&lt;br&gt; For other part of the project, please refer to:&lt;br&gt; &lt;a href=&#34;https://github.com/CzJam/DL_Launcher&#34;&gt;Launcher&lt;/a&gt; 启动此服务器的图形界面。&lt;br&gt; &lt;a href=&#34;https://github.com/QSWWLTN/DigitalLife&#34;&gt;UE Client&lt;/a&gt; 用于渲染人物动画，录音，和播放声音的前端部分。&lt;br&gt; 详细的配置流程可参见&lt;a href=&#34;https://raw.githubusercontent.com/zixiiu/Digital_Life_Server/master/readme_detail.md&#34;&gt;readme_detail.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting stuffs ready to roll:&lt;/h2&gt; &#xA;&lt;h3&gt;Clone this repo&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/zixiiu/Digital_Life_Server.git --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install prerequisites&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;install pytorch&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;install other requirements&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build &lt;code&gt;monotonic_align&lt;/code&gt;&lt;br&gt; This may not work that well but you know what that suppose to mean.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd &#34;TTS/vits/monotonic_align&#34;&#xA;mkdir monotonic_align&#xA;python setup.py build_ext --inplace&#xA;cp monotonic_align/*.pyd .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download models&lt;br&gt; &lt;a href=&#34;https://pan.baidu.com/s/1EnHDPADNdhDl71x_DHeElg?pwd=75gr&#34;&gt;百度网盘&lt;/a&gt;&lt;br&gt; ASR Model:&lt;br&gt; to &lt;code&gt;/ASR/resources/models&lt;/code&gt;&lt;br&gt; Sentiment Model:&lt;br&gt; to &lt;code&gt;/SentimentEngine/models&lt;/code&gt;&lt;br&gt; TTS Model:&lt;br&gt; to &lt;code&gt;/TTS/models&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Start the server&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;run-gpt3.5-api.bat&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>imartinez/privateGPT</title>
    <updated>2023-05-21T02:00:30Z</updated>
    <id>tag:github.com,2023-05-21:/imartinez/privateGPT</id>
    <link href="https://github.com/imartinez/privateGPT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Interact privately with your documents using the power of GPT, 100% privately, no data leaks&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;privateGPT&lt;/h1&gt; &#xA;&lt;p&gt;Ask questions to your documents without an internet connection, using the power of LLMs. 100% private, no data leaves your execution environment at any point. You can ingest documents and ask questions without an internet connection!&lt;/p&gt; &#xA;&lt;p&gt;Built with &lt;a href=&#34;https://github.com/hwchase17/langchain&#34;&gt;LangChain&lt;/a&gt;, &lt;a href=&#34;https://github.com/nomic-ai/gpt4all&#34;&gt;GPT4All&lt;/a&gt;, &lt;a href=&#34;https://github.com/ggerganov/llama.cpp&#34;&gt;LlamaCpp&lt;/a&gt;, &lt;a href=&#34;https://www.trychroma.com/&#34;&gt;Chroma&lt;/a&gt; and &lt;a href=&#34;https://www.sbert.net/&#34;&gt;SentenceTransformers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;img width=&#34;902&#34; alt=&#34;demo&#34; src=&#34;https://user-images.githubusercontent.com/721666/236942256-985801c9-25b9-48ef-80be-3acbb4575164.png&#34;&gt; &#xA;&lt;h1&gt;Environment Setup&lt;/h1&gt; &#xA;&lt;p&gt;In order to set your environment up to run the code here, first install all requirements:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, download the LLM model and place it in a directory of your choice:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;LLM: default to &lt;a href=&#34;https://gpt4all.io/models/ggml-gpt4all-j-v1.3-groovy.bin&#34;&gt;ggml-gpt4all-j-v1.3-groovy.bin&lt;/a&gt;. If you prefer a different GPT4All-J compatible model, just download it and reference it in your &lt;code&gt;.env&lt;/code&gt; file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Rename &lt;code&gt;example.env&lt;/code&gt; to &lt;code&gt;.env&lt;/code&gt; and edit the variables appropriately.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;MODEL_TYPE: supports LlamaCpp or GPT4All&#xA;PERSIST_DIRECTORY: is the folder you want your vectorstore in&#xA;MODEL_PATH: Path to your GPT4All or LlamaCpp supported LLM&#xA;MODEL_N_CTX: Maximum token limit for the LLM model&#xA;EMBEDDINGS_MODEL_NAME: SentenceTransformers embeddings model name (see https://www.sbert.net/docs/pretrained_models.html)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: because of the way &lt;code&gt;langchain&lt;/code&gt; loads the &lt;code&gt;SentenceTransformers&lt;/code&gt; embeddings, the first time you run the script it will require internet connection to download the embeddings model itself.&lt;/p&gt; &#xA;&lt;h2&gt;Test dataset&lt;/h2&gt; &#xA;&lt;p&gt;This repo uses a &lt;a href=&#34;https://github.com/imartinez/privateGPT/raw/main/source_documents/state_of_the_union.txt&#34;&gt;state of the union transcript&lt;/a&gt; as an example.&lt;/p&gt; &#xA;&lt;h2&gt;Instructions for ingesting your own dataset&lt;/h2&gt; &#xA;&lt;p&gt;Put any and all your files into the &lt;code&gt;source_documents&lt;/code&gt; directory&lt;/p&gt; &#xA;&lt;p&gt;The supported extensions are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;.csv&lt;/code&gt;: CSV,&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.docx&lt;/code&gt;: Word Document,&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.doc&lt;/code&gt;: Word Document,&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.enex&lt;/code&gt;: EverNote,&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.eml&lt;/code&gt;: Email,&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.epub&lt;/code&gt;: EPub,&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.html&lt;/code&gt;: HTML File,&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.md&lt;/code&gt;: Markdown,&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.msg&lt;/code&gt;: Outlook Message,&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.odt&lt;/code&gt;: Open Document Text,&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.pdf&lt;/code&gt;: Portable Document Format (PDF),&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.pptx&lt;/code&gt; : PowerPoint Document,&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.ppt&lt;/code&gt; : PowerPoint Document,&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.txt&lt;/code&gt;: Text file (UTF-8),&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Run the following command to ingest all the data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python ingest.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output should look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Creating new vectorstore&#xA;Loading documents from source_documents&#xA;Loading new documents: 100%|██████████████████████| 1/1 [00:01&amp;lt;00:00,  1.73s/it]&#xA;Loaded 1 new documents from source_documents&#xA;Split into 90 chunks of text (max. 500 tokens each)&#xA;Creating embeddings. May take some minutes...&#xA;Using embedded DuckDB with persistence: data will be stored in: db&#xA;Ingestion complete! You can now run privateGPT.py to query your documents&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will create a &lt;code&gt;db&lt;/code&gt; folder containing the local vectorstore. Will take 20-30 seconds per document, depending on the size of the document. You can ingest as many documents as you want, and all will be accumulated in the local embeddings database. If you want to start from an empty database, delete the &lt;code&gt;db&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;Note: during the ingest process no data leaves your local environment. You could ingest without an internet connection, except for the first time you run the ingest script, when the embeddings model is downloaded.&lt;/p&gt; &#xA;&lt;h2&gt;Ask questions to your documents, locally!&lt;/h2&gt; &#xA;&lt;p&gt;In order to ask a question, run a command like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python privateGPT.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And wait for the script to require your input.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;&amp;gt; Enter a query:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hit enter. You&#39;ll need to wait 20-30 seconds (depending on your machine) while the LLM model consumes the prompt and prepares the answer. Once done, it will print the answer and the 4 sources it used as context from your documents; you can then ask another question without re-running the script, just wait for the prompt again.&lt;/p&gt; &#xA;&lt;p&gt;Note: you could turn off your internet connection, and the script inference would still work. No data gets out of your local environment.&lt;/p&gt; &#xA;&lt;p&gt;Type &lt;code&gt;exit&lt;/code&gt; to finish the script.&lt;/p&gt; &#xA;&lt;h3&gt;CLI&lt;/h3&gt; &#xA;&lt;p&gt;The script also supports optional command-line arguments to modify its behavior. You can see a full list of these arguments by running the command &lt;code&gt;python privateGPT.py --help&lt;/code&gt; in your terminal.&lt;/p&gt; &#xA;&lt;h1&gt;How does it work?&lt;/h1&gt; &#xA;&lt;p&gt;Selecting the right local models and the power of &lt;code&gt;LangChain&lt;/code&gt; you can run the entire pipeline locally, without any data leaving your environment, and with reasonable performance.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ingest.py&lt;/code&gt; uses &lt;code&gt;LangChain&lt;/code&gt; tools to parse the document and create embeddings locally using &lt;code&gt;HuggingFaceEmbeddings&lt;/code&gt; (&lt;code&gt;SentenceTransformers&lt;/code&gt;). It then stores the result in a local vector database using &lt;code&gt;Chroma&lt;/code&gt; vector store.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;privateGPT.py&lt;/code&gt; uses a local LLM based on &lt;code&gt;GPT4All-J&lt;/code&gt; or &lt;code&gt;LlamaCpp&lt;/code&gt; to understand questions and create answers. The context for the answers is extracted from the local vector store using a similarity search to locate the right piece of context from the docs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GPT4All-J&lt;/code&gt; wrapper was introduced in LangChain 0.0.162.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;System Requirements&lt;/h1&gt; &#xA;&lt;h2&gt;Python Version&lt;/h2&gt; &#xA;&lt;p&gt;To use this software, you must have Python 3.10 or later installed. Earlier versions of Python will not compile.&lt;/p&gt; &#xA;&lt;h2&gt;C++ Compiler&lt;/h2&gt; &#xA;&lt;p&gt;If you encounter an error while building a wheel during the &lt;code&gt;pip install&lt;/code&gt; process, you may need to install a C++ compiler on your computer.&lt;/p&gt; &#xA;&lt;h3&gt;For Windows 10/11&lt;/h3&gt; &#xA;&lt;p&gt;To install a C++ compiler on Windows 10/11, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Visual Studio 2022.&lt;/li&gt; &#xA; &lt;li&gt;Make sure the following components are selected: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Universal Windows Platform development&lt;/li&gt; &#xA;   &lt;li&gt;C++ CMake tools for Windows&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Download the MinGW installer from the &lt;a href=&#34;https://sourceforge.net/projects/mingw/&#34;&gt;MinGW website&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run the installer and select the &lt;code&gt;gcc&lt;/code&gt; component.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Mac Running Intel&lt;/h2&gt; &#xA;&lt;p&gt;When running a Mac with Intel hardware (not M1), you may run into &lt;em&gt;clang: error: the clang compiler does not support &#39;-march=native&#39;&lt;/em&gt; during pip install.&lt;/p&gt; &#xA;&lt;p&gt;If so set your archflags during pip install. eg: &lt;em&gt;ARCHFLAGS=&#34;-arch x86_64&#34; pip3 install -r requirements.txt&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Disclaimer&lt;/h1&gt; &#xA;&lt;p&gt;This is a test project to validate the feasibility of a fully private solution for question answering using LLMs and Vector embeddings. It is not production ready, and it is not meant to be used in production. The models selection is not optimized for performance, but for privacy; but it is possible to use different models and vectorstores to improve performance.&lt;/p&gt;</summary>
  </entry>
</feed>