<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-06T01:46:40Z</updated>
  <subtitle>Weekly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jlowin/fastmcp</title>
    <updated>2025-04-06T01:46:40Z</updated>
    <id>tag:github.com,2025-04-06:/jlowin/fastmcp</id>
    <link href="https://github.com/jlowin/fastmcp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The fast, Pythonic way to build Model Context Protocol servers üöÄ&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h3&gt;üéâ FastMCP has been added to the official MCP SDK! üéâ&lt;/h3&gt; &#xA; &lt;p&gt;You can now find FastMCP as part of the official Model Context Protocol Python SDK:&lt;/p&gt; &#xA; &lt;p&gt;üëâ &lt;a href=&#34;https://github.com/modelcontextprotocol/python-sdk&#34;&gt;github.com/modelcontextprotocol/python-sdk&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;Please note: this repository is no longer maintained.&lt;/em&gt;&lt;/p&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;!-- omit in toc --&gt; &#xA; &lt;h1&gt;FastMCP üöÄ&lt;/h1&gt; &#xA; &lt;p&gt;&lt;strong&gt;The fast, Pythonic way to build MCP servers.&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://pypi.org/project/fastmcp&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/fastmcp.svg?sanitize=true&#34; alt=&#34;PyPI - Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jlowin/fastmcp/actions/workflows/run-tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/jlowin/fastmcp/actions/workflows/run-tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jlowin/fastmcp/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/jlowin/fastmcp.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://modelcontextprotocol.io&#34;&gt;Model Context Protocol (MCP)&lt;/a&gt; servers are a new, standardized way to provide context and tools to your LLMs, and FastMCP makes building MCP servers simple and intuitive. Create tools, expose resources, and define prompts with clean, Pythonic code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# demo.py&#xA;&#xA;from fastmcp import FastMCP&#xA;&#xA;&#xA;mcp = FastMCP(&#34;Demo üöÄ&#34;)&#xA;&#xA;&#xA;@mcp.tool()&#xA;def add(a: int, b: int) -&amp;gt; int:&#xA;    &#34;&#34;&#34;Add two numbers&#34;&#34;&#34;&#xA;    return a + b&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it! Give Claude access to the server by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fastmcp install demo.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;FastMCP handles all the complex protocol details and server management, so you can focus on building great tools. It&#39;s designed to be high-level and Pythonic - in most cases, decorating a function is all you need.&lt;/p&gt; &#xA;&lt;h3&gt;Key features:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt;: High-level interface means less code and faster development&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simple&lt;/strong&gt;: Build MCP servers with minimal boilerplate&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pythonic&lt;/strong&gt;: Feels natural to Python developers&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Complete&lt;/strong&gt;*: FastMCP aims to provide a full implementation of the core MCP specification&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(*emphasis on &lt;em&gt;aims&lt;/em&gt;)&lt;/p&gt; &#xA;&lt;p&gt;üö® üöß üèóÔ∏è &lt;em&gt;FastMCP is under active development, as is the MCP specification itself. Core features are working but some advanced capabilities are still in progress.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;!-- omit in toc --&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#what-is-mcp&#34;&gt;What is MCP?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#core-concepts&#34;&gt;Core Concepts&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#server&#34;&gt;Server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#resources&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#tools&#34;&gt;Tools&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#prompts&#34;&gt;Prompts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#images&#34;&gt;Images&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#running-your-server&#34;&gt;Running Your Server&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#development-mode-recommended-for-building--testing&#34;&gt;Development Mode (Recommended for Building &amp;amp; Testing)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#claude-desktop-integration-for-regular-use&#34;&gt;Claude Desktop Integration (For Regular Use)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#direct-execution-for-advanced-use-cases&#34;&gt;Direct Execution (For Advanced Use Cases)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#server-object-names&#34;&gt;Server Object Names&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#examples&#34;&gt;Examples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#echo-server&#34;&gt;Echo Server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#sqlite-explorer&#34;&gt;SQLite Explorer&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#contributing&#34;&gt;Contributing&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#installation-1&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#formatting&#34;&gt;Formatting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#opening-a-pull-request&#34;&gt;Opening a Pull Request&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;We strongly recommend installing FastMCP with &lt;a href=&#34;https://docs.astral.sh/uv/&#34;&gt;uv&lt;/a&gt;, as it is required for deploying servers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;uv pip install fastmcp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: on macOS, uv may need to be installed with Homebrew (&lt;code&gt;brew install uv&lt;/code&gt;) in order to make it available to the Claude Desktop app.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, to use the SDK without deploying, you may use pip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install fastmcp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s create a simple MCP server that exposes a calculator tool and some data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# server.py&#xA;&#xA;from fastmcp import FastMCP&#xA;&#xA;&#xA;# Create an MCP server&#xA;mcp = FastMCP(&#34;Demo&#34;)&#xA;&#xA;&#xA;# Add an addition tool&#xA;@mcp.tool()&#xA;def add(a: int, b: int) -&amp;gt; int:&#xA;    &#34;&#34;&#34;Add two numbers&#34;&#34;&#34;&#xA;    return a + b&#xA;&#xA;&#xA;# Add a dynamic greeting resource&#xA;@mcp.resource(&#34;greeting://{name}&#34;)&#xA;def get_greeting(name: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Get a personalized greeting&#34;&#34;&#34;&#xA;    return f&#34;Hello, {name}!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can install this server in &lt;a href=&#34;https://claude.ai/download&#34;&gt;Claude Desktop&lt;/a&gt; and interact with it right away by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fastmcp install server.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can test it with the MCP Inspector:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fastmcp dev server.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/docs/assets/demo-inspector.png&#34; alt=&#34;MCP Inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is MCP?&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://modelcontextprotocol.io&#34;&gt;Model Context Protocol (MCP)&lt;/a&gt; lets you build servers that expose data and functionality to LLM applications in a secure, standardized way. Think of it like a web API, but specifically designed for LLM interactions. MCP servers can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Expose data through &lt;strong&gt;Resources&lt;/strong&gt; (think of these sort of like GET endpoints; they are used to load information into the LLM&#39;s context)&lt;/li&gt; &#xA; &lt;li&gt;Provide functionality through &lt;strong&gt;Tools&lt;/strong&gt; (sort of like POST endpoints; they are used to execute code or otherwise produce a side effect)&lt;/li&gt; &#xA; &lt;li&gt;Define interaction patterns through &lt;strong&gt;Prompts&lt;/strong&gt; (reusable templates for LLM interactions)&lt;/li&gt; &#xA; &lt;li&gt;And more!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There is a low-level &lt;a href=&#34;https://github.com/modelcontextprotocol/python-sdk&#34;&gt;Python SDK&lt;/a&gt; available for implementing the protocol directly, but FastMCP aims to make that easier by providing a high-level, Pythonic interface.&lt;/p&gt; &#xA;&lt;h2&gt;Core Concepts&lt;/h2&gt; &#xA;&lt;h3&gt;Server&lt;/h3&gt; &#xA;&lt;p&gt;The FastMCP server is your core interface to the MCP protocol. It handles connection management, protocol compliance, and message routing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fastmcp import FastMCP&#xA;&#xA;# Create a named server&#xA;mcp = FastMCP(&#34;My App&#34;)&#xA;&#xA;# Specify dependencies for deployment and development&#xA;mcp = FastMCP(&#34;My App&#34;, dependencies=[&#34;pandas&#34;, &#34;numpy&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Resources&lt;/h3&gt; &#xA;&lt;p&gt;Resources are how you expose data to LLMs. They&#39;re similar to GET endpoints in a REST API - they provide data but shouldn&#39;t perform significant computation or have side effects. Some examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;File contents&lt;/li&gt; &#xA; &lt;li&gt;Database schemas&lt;/li&gt; &#xA; &lt;li&gt;API responses&lt;/li&gt; &#xA; &lt;li&gt;System information&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Resources can be static:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@mcp.resource(&#34;config://app&#34;)&#xA;def get_config() -&amp;gt; str:&#xA;    &#34;&#34;&#34;Static configuration data&#34;&#34;&#34;&#xA;    return &#34;App configuration here&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or dynamic with parameters (FastMCP automatically handles these as MCP templates):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@mcp.resource(&#34;users://{user_id}/profile&#34;)&#xA;def get_user_profile(user_id: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Dynamic user data&#34;&#34;&#34;&#xA;    return f&#34;Profile data for user {user_id}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Tools&lt;/h3&gt; &#xA;&lt;p&gt;Tools let LLMs take actions through your server. Unlike resources, tools are expected to perform computation and have side effects. They&#39;re similar to POST endpoints in a REST API.&lt;/p&gt; &#xA;&lt;p&gt;Simple calculation example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@mcp.tool()&#xA;def calculate_bmi(weight_kg: float, height_m: float) -&amp;gt; float:&#xA;    &#34;&#34;&#34;Calculate BMI given weight in kg and height in meters&#34;&#34;&#34;&#xA;    return weight_kg / (height_m ** 2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;HTTP request example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import httpx&#xA;&#xA;@mcp.tool()&#xA;async def fetch_weather(city: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Fetch current weather for a city&#34;&#34;&#34;&#xA;    async with httpx.AsyncClient() as client:&#xA;        response = await client.get(&#xA;            f&#34;https://api.weather.com/{city}&#34;&#xA;        )&#xA;        return response.text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Complex input handling example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pydantic import BaseModel, Field&#xA;from typing import Annotated&#xA;&#xA;class ShrimpTank(BaseModel):&#xA;    class Shrimp(BaseModel):&#xA;        name: Annotated[str, Field(max_length=10)]&#xA;&#xA;    shrimp: list[Shrimp]&#xA;&#xA;@mcp.tool()&#xA;def name_shrimp(&#xA;    tank: ShrimpTank,&#xA;    # You can use pydantic Field in function signatures for validation.&#xA;    extra_names: Annotated[list[str], Field(max_length=10)],&#xA;) -&amp;gt; list[str]:&#xA;    &#34;&#34;&#34;List all shrimp names in the tank&#34;&#34;&#34;&#xA;    return [shrimp.name for shrimp in tank.shrimp] + extra_names&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Prompts&lt;/h3&gt; &#xA;&lt;p&gt;Prompts are reusable templates that help LLMs interact with your server effectively. They&#39;re like &#34;best practices&#34; encoded into your server. A prompt can be as simple as a string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@mcp.prompt()&#xA;def review_code(code: str) -&amp;gt; str:&#xA;    return f&#34;Please review this code:\n\n{code}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or a more structured sequence of messages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fastmcp.prompts.base import UserMessage, AssistantMessage&#xA;&#xA;@mcp.prompt()&#xA;def debug_error(error: str) -&amp;gt; list[Message]:&#xA;    return [&#xA;        UserMessage(&#34;I&#39;m seeing this error:&#34;),&#xA;        UserMessage(error),&#xA;        AssistantMessage(&#34;I&#39;ll help debug that. What have you tried so far?&#34;)&#xA;    ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Images&lt;/h3&gt; &#xA;&lt;p&gt;FastMCP provides an &lt;code&gt;Image&lt;/code&gt; class that automatically handles image data in your server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fastmcp import FastMCP, Image&#xA;from PIL import Image as PILImage&#xA;&#xA;@mcp.tool()&#xA;def create_thumbnail(image_path: str) -&amp;gt; Image:&#xA;    &#34;&#34;&#34;Create a thumbnail from an image&#34;&#34;&#34;&#xA;    img = PILImage.open(image_path)&#xA;    img.thumbnail((100, 100))&#xA;    &#xA;    # FastMCP automatically handles conversion and MIME types&#xA;    return Image(data=img.tobytes(), format=&#34;png&#34;)&#xA;&#xA;@mcp.tool()&#xA;def load_image(path: str) -&amp;gt; Image:&#xA;    &#34;&#34;&#34;Load an image from disk&#34;&#34;&#34;&#xA;    # FastMCP handles reading and format detection&#xA;    return Image(path=path)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Images can be used as the result of both tools and resources.&lt;/p&gt; &#xA;&lt;h3&gt;Context&lt;/h3&gt; &#xA;&lt;p&gt;The Context object gives your tools and resources access to MCP capabilities. To use it, add a parameter annotated with &lt;code&gt;fastmcp.Context&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fastmcp import FastMCP, Context&#xA;&#xA;@mcp.tool()&#xA;async def long_task(files: list[str], ctx: Context) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Process multiple files with progress tracking&#34;&#34;&#34;&#xA;    for i, file in enumerate(files):&#xA;        ctx.info(f&#34;Processing {file}&#34;)&#xA;        await ctx.report_progress(i, len(files))&#xA;        &#xA;        # Read another resource if needed&#xA;        data = await ctx.read_resource(f&#34;file://{file}&#34;)&#xA;        &#xA;    return &#34;Processing complete&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Context object provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Progress reporting through &lt;code&gt;report_progress()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Logging via &lt;code&gt;debug()&lt;/code&gt;, &lt;code&gt;info()&lt;/code&gt;, &lt;code&gt;warning()&lt;/code&gt;, and &lt;code&gt;error()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Resource access through &lt;code&gt;read_resource()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Request metadata via &lt;code&gt;request_id&lt;/code&gt; and &lt;code&gt;client_id&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running Your Server&lt;/h2&gt; &#xA;&lt;p&gt;There are three main ways to use your FastMCP server, each suited for different stages of development:&lt;/p&gt; &#xA;&lt;h3&gt;Development Mode (Recommended for Building &amp;amp; Testing)&lt;/h3&gt; &#xA;&lt;p&gt;The fastest way to test and debug your server is with the MCP Inspector:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fastmcp dev server.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This launches a web interface where you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Test your tools and resources interactively&lt;/li&gt; &#xA; &lt;li&gt;See detailed logs and error messages&lt;/li&gt; &#xA; &lt;li&gt;Monitor server performance&lt;/li&gt; &#xA; &lt;li&gt;Set environment variables for testing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;During development, you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add dependencies with &lt;code&gt;--with&lt;/code&gt;: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fastmcp dev server.py --with pandas --with numpy&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Mount your local code for live updates: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fastmcp dev server.py --with-editable .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Claude Desktop Integration (For Regular Use)&lt;/h3&gt; &#xA;&lt;p&gt;Once your server is ready, install it in Claude Desktop to use it with Claude:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fastmcp install server.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your server will run in an isolated environment with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatic installation of dependencies specified in your FastMCP instance: &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mcp = FastMCP(&#34;My App&#34;, dependencies=[&#34;pandas&#34;, &#34;numpy&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Custom naming via &lt;code&gt;--name&lt;/code&gt;: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fastmcp install server.py --name &#34;My Analytics Server&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Environment variable management: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Set variables individually&#xA;fastmcp install server.py -e API_KEY=abc123 -e DB_URL=postgres://...&#xA;&#xA;# Or load from a .env file&#xA;fastmcp install server.py -f .env&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Direct Execution (For Advanced Use Cases)&lt;/h3&gt; &#xA;&lt;p&gt;For advanced scenarios like custom deployments or running without Claude, you can execute your server directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fastmcp import FastMCP&#xA;&#xA;mcp = FastMCP(&#34;My App&#34;)&#xA;&#xA;if __name__ == &#34;__main__&#34;:&#xA;    mcp.run()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Using the FastMCP CLI&#xA;fastmcp run server.py&#xA;&#xA;# Or with Python/uv directly&#xA;python server.py&#xA;uv run python server.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: When running directly, you are responsible for ensuring all dependencies are available in your environment. Any dependencies specified on the FastMCP instance are ignored.&lt;/p&gt; &#xA;&lt;p&gt;Choose this method when you need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Custom deployment configurations&lt;/li&gt; &#xA; &lt;li&gt;Integration with other services&lt;/li&gt; &#xA; &lt;li&gt;Direct control over the server lifecycle&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Server Object Names&lt;/h3&gt; &#xA;&lt;p&gt;All FastMCP commands will look for a server object called &lt;code&gt;mcp&lt;/code&gt;, &lt;code&gt;app&lt;/code&gt;, or &lt;code&gt;server&lt;/code&gt; in your file. If you have a different object name or multiple servers in one file, use the syntax &lt;code&gt;server.py:my_server&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Using a standard name&#xA;fastmcp run server.py&#xA;&#xA;# Using a custom name&#xA;fastmcp run server.py:my_custom_server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Here are a few examples of FastMCP servers. For more, see the &lt;code&gt;examples/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Echo Server&lt;/h3&gt; &#xA;&lt;p&gt;A simple server demonstrating resources, tools, and prompts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fastmcp import FastMCP&#xA;&#xA;mcp = FastMCP(&#34;Echo&#34;)&#xA;&#xA;@mcp.resource(&#34;echo://{message}&#34;)&#xA;def echo_resource(message: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Echo a message as a resource&#34;&#34;&#34;&#xA;    return f&#34;Resource echo: {message}&#34;&#xA;&#xA;@mcp.tool()&#xA;def echo_tool(message: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Echo a message as a tool&#34;&#34;&#34;&#xA;    return f&#34;Tool echo: {message}&#34;&#xA;&#xA;@mcp.prompt()&#xA;def echo_prompt(message: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Create an echo prompt&#34;&#34;&#34;&#xA;    return f&#34;Please process this message: {message}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SQLite Explorer&lt;/h3&gt; &#xA;&lt;p&gt;A more complex example showing database integration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fastmcp import FastMCP&#xA;import sqlite3&#xA;&#xA;mcp = FastMCP(&#34;SQLite Explorer&#34;)&#xA;&#xA;@mcp.resource(&#34;schema://main&#34;)&#xA;def get_schema() -&amp;gt; str:&#xA;    &#34;&#34;&#34;Provide the database schema as a resource&#34;&#34;&#34;&#xA;    conn = sqlite3.connect(&#34;database.db&#34;)&#xA;    schema = conn.execute(&#xA;        &#34;SELECT sql FROM sqlite_master WHERE type=&#39;table&#39;&#34;&#xA;    ).fetchall()&#xA;    return &#34;\n&#34;.join(sql[0] for sql in schema if sql[0])&#xA;&#xA;@mcp.tool()&#xA;def query_data(sql: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Execute SQL queries safely&#34;&#34;&#34;&#xA;    conn = sqlite3.connect(&#34;database.db&#34;)&#xA;    try:&#xA;        result = conn.execute(sql).fetchall()&#xA;        return &#34;\n&#34;.join(str(row) for row in result)&#xA;    except Exception as e:&#xA;        return f&#34;Error: {str(e)}&#34;&#xA;&#xA;@mcp.prompt()&#xA;def analyze_table(table: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Create a prompt template for analyzing tables&#34;&#34;&#34;&#xA;    return f&#34;&#34;&#34;Please analyze this database table:&#xA;Table: {table}&#xA;Schema: &#xA;{get_schema()}&#xA;&#xA;What insights can you provide about the structure and relationships?&#34;&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h3&gt;Open Developer Guide&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA; &lt;p&gt;FastMCP requires Python 3.10+ and &lt;a href=&#34;https://docs.astral.sh/uv/&#34;&gt;uv&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;h3&gt;Installation&lt;/h3&gt; &#xA; &lt;p&gt;For development, we recommend installing FastMCP with development dependencies, which includes various utilities the maintainers find useful.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/jlowin/fastmcp.git&#xA;cd fastmcp&#xA;uv sync --frozen --extra dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;For running tests only (e.g., in CI), you only need the testing dependencies:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;uv sync --frozen --extra tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Testing&lt;/h3&gt; &#xA; &lt;p&gt;Please make sure to test any new functionality. Your tests should be simple and atomic and anticipate change rather than cement complex patterns.&lt;/p&gt; &#xA; &lt;p&gt;Run tests from the root directory:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pytest -vv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Formatting&lt;/h3&gt; &#xA; &lt;p&gt;FastMCP enforces a variety of required formats, which you can automatically enforce with pre-commit.&lt;/p&gt; &#xA; &lt;p&gt;Install the pre-commit hooks:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pre-commit install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The hooks will now run on every commit (as well as on every PR). To run them manually:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pre-commit run --all-files&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Opening a Pull Request&lt;/h3&gt; &#xA; &lt;p&gt;Fork the repository and create a new branch:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout -b my-branch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Make your changes and commit them:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add . &amp;amp;&amp;amp; git commit -m &#34;My changes&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Push your changes to your fork:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push origin my-branch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Feel free to reach out in a GitHub issue or discussion if you have any questions!&lt;/p&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
  <entry>
    <title>leminlimez/Nugget</title>
    <updated>2025-04-06T01:46:40Z</updated>
    <id>tag:github.com,2025-04-06:/leminlimez/Nugget</id>
    <link href="https://github.com/leminlimez/Nugget" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Unlock the fullest potential of your device&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/leminlimez/Nugget/raw/6a22a8fe572fdf41753d99da4337feb7ffe939a7/credits/small_nugget.png&#34; alt=&#34;Artboard&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Nugget&lt;/h1&gt; &#xA;&lt;p&gt;Unlock your device&#39;s full potential!&lt;/p&gt; &#xA;&lt;p&gt;Sparserestore works on all versions iOS 17.0-18.1.1. There is partial support for iOS 18.2 developer beta 3 and newer not using any exploits.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Mobilegestalt and AI Enabler tweaks are not supported on iOS 18.2+.&lt;/strong&gt; It will never be supported, do not make issues asking for when it is supported.&lt;/p&gt; &#xA;&lt;p&gt;Make sure you have installed the &lt;a href=&#34;https://raw.githubusercontent.com/leminlimez/Nugget/main/#requirements&#34;&gt;requirements&lt;/a&gt; if you are on Windows or Linux.&lt;/p&gt; &#xA;&lt;p&gt;This uses the sparserestore exploit to write to files outside of the intended restore location, like mobilegestalt. Read the &lt;a href=&#34;https://raw.githubusercontent.com/leminlimez/Nugget/main/#getting-the-file&#34;&gt;Getting the File&lt;/a&gt; section to learn how to get your mobilegestalt file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I am not responsible if your device bootloops. Please back up your data before using!&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;iOS 17.0+&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Springboard Options (from &lt;a href=&#34;https://github.com/leminlimez/CowabungaLite&#34;&gt;Cowabunga Lite&lt;/a&gt;) &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Set Lock Screen Footnote&lt;/li&gt; &#xA;    &lt;li&gt;Disable Lock After Respring&lt;/li&gt; &#xA;    &lt;li&gt;Disable Screen Dimming While Charging&lt;/li&gt; &#xA;    &lt;li&gt;Disable Low Battery Alerts&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Internal Options (from &lt;a href=&#34;https://github.com/leminlimez/CowabungaLite&#34;&gt;Cowabunga Lite&lt;/a&gt;) &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Build Version in Status Bar&lt;/li&gt; &#xA;    &lt;li&gt;Force Right to Left&lt;/li&gt; &#xA;    &lt;li&gt;Force Metal HUD Debug&lt;/li&gt; &#xA;    &lt;li&gt;iMessage Diagnostics&lt;/li&gt; &#xA;    &lt;li&gt;IDS Diagnostics&lt;/li&gt; &#xA;    &lt;li&gt;VC Diagnostics&lt;/li&gt; &#xA;    &lt;li&gt;App Store Debug Gesture&lt;/li&gt; &#xA;    &lt;li&gt;Notes App Debug Mode&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Disable Daemons: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;OTAd&lt;/li&gt; &#xA;    &lt;li&gt;UsageTrackingAgent&lt;/li&gt; &#xA;    &lt;li&gt;Game Center&lt;/li&gt; &#xA;    &lt;li&gt;Screen Time Agent&lt;/li&gt; &#xA;    &lt;li&gt;Logs, Dumps, and Crash Reports&lt;/li&gt; &#xA;    &lt;li&gt;ATWAKEUP&lt;/li&gt; &#xA;    &lt;li&gt;Tipsd&lt;/li&gt; &#xA;    &lt;li&gt;VPN&lt;/li&gt; &#xA;    &lt;li&gt;Chinese WLAN service&lt;/li&gt; &#xA;    &lt;li&gt;HealthKit&lt;/li&gt; &#xA;    &lt;li&gt;AirPrint&lt;/li&gt; &#xA;    &lt;li&gt;Assistive Touch&lt;/li&gt; &#xA;    &lt;li&gt;iCloud&lt;/li&gt; &#xA;    &lt;li&gt;Internet Tethering (aka Personal Hotspot)&lt;/li&gt; &#xA;    &lt;li&gt;PassBook&lt;/li&gt; &#xA;    &lt;li&gt;Spotlight&lt;/li&gt; &#xA;    &lt;li&gt;Voice Control&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;PosterBoard: Animated wallpapers and descriptors. &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Community wallpapers can be found &lt;a href=&#34;https://cowabun.ga/wallpapers&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;See documentation on the structure of tendies files in &lt;code&gt;documentation.md&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Risky (Hidden) Options: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Disable thermalmonitord&lt;/li&gt; &#xA;    &lt;li&gt;OTA Killer&lt;/li&gt; &#xA;    &lt;li&gt;Custom Resolution&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;iOS 17.0 - 18.1.1&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Enable Dynamic Island on any device&lt;/li&gt; &#xA;  &lt;li&gt;Enable iPhone X gestures on iPhone SEs&lt;/li&gt; &#xA;  &lt;li&gt;Change Device Model Name (ie what shows in the Settings app)&lt;/li&gt; &#xA;  &lt;li&gt;Enable Boot Chime&lt;/li&gt; &#xA;  &lt;li&gt;Enable Charge Limit&lt;/li&gt; &#xA;  &lt;li&gt;Enable Tap to Wake on unsupported devices (ie iPhone SEs)&lt;/li&gt; &#xA;  &lt;li&gt;Enable Collision SOS&lt;/li&gt; &#xA;  &lt;li&gt;Enable Stage Manager&lt;/li&gt; &#xA;  &lt;li&gt;Disable the Wallpaper Parallax&lt;/li&gt; &#xA;  &lt;li&gt;Disable Region Restrictions (ie. Shutter Sound) &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Note: This does not include enabling EU sideloading outside the EU. That will come later.&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Show the Apple Pencil options in Settings app&lt;/li&gt; &#xA;  &lt;li&gt;Show the Action Button options in Settings app&lt;/li&gt; &#xA;  &lt;li&gt;Show Internal Storage info (Might cause problems on some devices, use at your own risk)&lt;/li&gt; &#xA;  &lt;li&gt;EU Enabler (iOS 17.6-)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;iOS 18.0 - iOS 18.0.1&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Feature Flags (iOS 18.1b4-): &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Enabling lock screen clock animation, lock screen page duplication button, and more!&lt;/li&gt; &#xA;    &lt;li&gt;Disabling the new iOS 18 Photos UI (iOS 18.0 betas only, unknown which patched it)&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;iOS 18.0 - iOS 18.1.1&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Enable iPhone 16 camera button page in the Settings app&lt;/li&gt; &#xA;  &lt;li&gt;Enable AOD &amp;amp; AOD Vibrancy on any device&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;iOS 18.1 - 18.1.1&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;AI Enabler + Device Spoofing&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Requirements:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Windows:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Either &lt;a href=&#34;https://apps.microsoft.com/detail/9np83lwlpz9k%3Fhl%3Den-US%26gl%3DUS&amp;amp;ved=2ahUKEwjE-svo7qyJAxWTlYkEHQpbH3oQFnoECBoQAQ&amp;amp;usg=AOvVaw0rZTXCFmRaHAifkEEu9tMI&#34;&gt;Apple Devices (from Microsoft Store)&lt;/a&gt; app or &lt;a href=&#34;https://support.apple.com/en-us/106372&#34;&gt;iTunes (from Apple website)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Linux:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/libimobiledevice/usbmuxd&#34;&gt;usbmuxd&lt;/a&gt; and &lt;a href=&#34;https://github.com/libimobiledevice/libimobiledevice&#34;&gt;libimobiledevice&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;For Running Python:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;pymobiledevice3&lt;/li&gt; &#xA;   &lt;li&gt;PySide6&lt;/li&gt; &#xA;   &lt;li&gt;Python 3.8 or newer&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running the Python Program&lt;/h2&gt; &#xA;&lt;p&gt;Note: It is highly recommended to use a virtual environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 -m venv .env # only needed once&#xA;# macOS/Linux:  source .env/bin/activate&#xA;# Windows:      .env/Scripts/activate.bat&#xA;pip3 install -r requirements.txt # only needed once&#xA;python3 main_app.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: It may be either &lt;code&gt;python&lt;/code&gt;/&lt;code&gt;pip&lt;/code&gt; or &lt;code&gt;python3&lt;/code&gt;/&lt;code&gt;pip3&lt;/code&gt; depending on your path.&lt;/p&gt; &#xA;&lt;p&gt;The CLI version can be ran with &lt;code&gt;python3 cli_app.py&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting the File&lt;/h2&gt; &#xA;&lt;p&gt;On iOS 18.1.1 and below, you may need to get the mobilegestalt file that is specific to your device. To do that, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the &lt;code&gt;Shortcuts&lt;/code&gt; app from the iOS app store.&lt;/li&gt; &#xA; &lt;li&gt;Download this shortcut: &lt;a href=&#34;https://www.icloud.com/shortcuts/d6f0a136ddda4714a80750512911c53b&#34;&gt;https://www.icloud.com/shortcuts/d6f0a136ddda4714a80750512911c53b&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Save the file and share it to your computer.&lt;/li&gt; &#xA; &lt;li&gt;Place it in the same folder as the python file (or specify the path in the program)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;To compile &lt;code&gt;mainwindow.ui&lt;/code&gt; for Python, run the following command: &lt;code&gt;pyside6-uic qt/mainwindow.ui -o qt/ui_mainwindow.py&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To compile the resources file for Python, run the following command: &lt;code&gt;pyside6-rcc qt/resources.qrc -o resources_rc.py&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The application itself can be compiled by running &lt;code&gt;compile.py&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Read More&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to read more about the inner workings of the exploit and iOS restore system, I made a write up which you can read &lt;a href=&#34;https://gist.github.com/leminlimez/c602c067349140fe979410ef69d39c28&#34;&gt;here&lt;/a&gt;. For clarity, up to iOS 18.2 developer beta 2 (public beta 1) is fully supported by Nugget. I said iOS 18.1.1 because mentioning the betas confused people.&lt;/p&gt; &#xA;&lt;h2&gt;Arbitrary Star Graph&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.star-history.com/#leminlimez/Nugget&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=leminlimez/Nugget&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JJTech0130&#34;&gt;JJTech&lt;/a&gt; for Sparserestore/&lt;a href=&#34;https://github.com/JJTech0130/TrollRestore&#34;&gt;TrollRestore&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/gWtzTVhMvh&#34;&gt;PosterRestore&lt;/a&gt; for their help with PosterBoard &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Special thanks to dootskyre, &lt;a href=&#34;https://twitter.com/MWRevamped&#34;&gt;Middo&lt;/a&gt;, &lt;a href=&#34;https://github.com/dularkian&#34;&gt;dulark&lt;/a&gt;, forcequitOS, and pingubow for their work on this. It would not have been possible without them!&lt;/li&gt; &#xA;   &lt;li&gt;Also thanks to &lt;a href=&#34;https://github.com/0xilis/python-aar-stuff&#34;&gt;Snoolie for aar handling&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://x.com/disfordottie&#34;&gt;disfordottie&lt;/a&gt; for some global flag features&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Mikasa-san&#34;&gt;Mikasa-san&lt;/a&gt; for &lt;a href=&#34;https://github.com/Mikasa-san/QuietDaemon&#34;&gt;Quiet Daemon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/f1shy-dev&#34;&gt;sneakyf1shy&lt;/a&gt; for &lt;a href=&#34;https://gist.github.com/f1shy-dev/23b4a78dc283edd30ae2b2e6429129b5&#34;&gt;AI Eligibility&lt;/a&gt; (iOS 18.1 beta 4 and below)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Lrdsnow&#34;&gt;lrdsnow&lt;/a&gt; for &lt;a href=&#34;https://github.com/Lrdsnow/EUEnabler&#34;&gt;EU Enabler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/doronz88/pymobiledevice3&#34;&gt;pymobiledevice3&lt;/a&gt; for restoring and device algorithms.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://doc.qt.io/qtforpython-6/&#34;&gt;PySide6&lt;/a&gt; for the GUI library.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>getzep/graphiti</title>
    <updated>2025-04-06T01:46:40Z</updated>
    <id>tag:github.com,2025-04-06:/getzep/graphiti</id>
    <link href="https://github.com/getzep/graphiti" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build Real-Time Knowledge Graphs for AI Agents&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.getzep.com/&#34;&gt; &lt;img src=&#34;https://github.com/user-attachments/assets/119c5682-9654-4257-8922-56b7cb8ffd73&#34; width=&#34;150&#34; alt=&#34;Zep Logo&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; Graphiti &lt;/h1&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt; Build Real-Time Knowledge Graphs for AI Agents&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.com/invite/W8Kw6bsgXQ&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/W8Kw6bsgXQ?style=flat&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/getzep/Graphiti/actions/workflows/lint.yml&#34;&gt;&lt;img src=&#34;https://github.com/getzep/Graphiti/actions/workflows/lint.yml/badge.svg?sanitize=true&#34; alt=&#34;Lint&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/getzep/Graphiti/actions/workflows/unit_tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/getzep/Graphiti/actions/workflows/unit_tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Unit Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/getzep/Graphiti/actions/workflows/typecheck.yml&#34;&gt;&lt;img src=&#34;https://github.com/getzep/Graphiti/actions/workflows/typecheck.yml/badge.svg?sanitize=true&#34; alt=&#34;MyPy Check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codespaces.new/getzep/Graphiti&#34;&gt;&lt;img src=&#34;https://github.com/codespaces/badge.svg?sanitize=true&#34; alt=&#34;Open in GitHub Codespaces&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;‚≠ê&lt;/span&gt; &lt;em&gt;Help us reach more developers and grow the Graphiti community. Star this repo!&lt;/em&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Graphiti is a framework for building and querying temporally-aware knowledge graphs, specifically tailored for AI agents operating in dynamic environments. Unlike traditional retrieval-augmented generation (RAG) methods, Graphiti continuously integrates user interactions, structured and unstructured enterprise data, and external information into a coherent, queryable graph. The framework supports incremental data updates, efficient retrieval, and precise historical queries without requiring complete graph recomputation, making it suitable for developing interactive, context-aware AI applications.&lt;/p&gt; &#xA;&lt;p&gt;Use Graphiti to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Integrate and maintain dynamic user interactions and business data.&lt;/li&gt; &#xA; &lt;li&gt;Facilitate state-based reasoning and task automation for agents.&lt;/li&gt; &#xA; &lt;li&gt;Query complex, evolving data with semantic, keyword, and graph-based search methods.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/getzep/graphiti/main/images/graphiti-graph-intro.gif&#34; alt=&#34;Graphiti temporal walkthrough&#34; width=&#34;700px&#34;&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;A knowledge graph is a network of interconnected facts, such as &lt;em&gt;‚ÄúKendra loves Adidas shoes.‚Äù&lt;/em&gt; Each fact is a ‚Äútriplet‚Äù represented by two entities, or nodes (&lt;em&gt;‚ÄùKendra‚Äù&lt;/em&gt;, &lt;em&gt;‚ÄúAdidas shoes‚Äù&lt;/em&gt;), and their relationship, or edge (&lt;em&gt;‚Äùloves‚Äù&lt;/em&gt;). Knowledge Graphs have been explored extensively for information retrieval. What makes Graphiti unique is its ability to autonomously build a knowledge graph while handling changing relationships and maintaining historical context.&lt;/p&gt; &#xA;&lt;h2&gt;Graphiti and Zep Memory&lt;/h2&gt; &#xA;&lt;p&gt;Graphiti powers the core of &lt;a href=&#34;https://www.getzep.com&#34;&gt;Zep&#39;s memory layer&lt;/a&gt; for AI Agents.&lt;/p&gt; &#xA;&lt;p&gt;Using Graphiti, we&#39;ve demonstrated Zep is the &lt;a href=&#34;https://blog.getzep.com/state-of-the-art-agent-memory/&#34;&gt;State of the Art in Agent Memory&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Read our paper: &lt;a href=&#34;https://arxiv.org/abs/2501.13956&#34;&gt;Zep: A Temporal Knowledge Graph Architecture for Agent Memory&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;re excited to open-source Graphiti, believing its potential reaches far beyond AI memory applications.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://arxiv.org/abs/2501.13956&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/getzep/graphiti/main/images/arxiv-screenshot.png&#34; alt=&#34;Zep: A Temporal Knowledge Graph Architecture for Agent Memory&#34; width=&#34;700px&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Why Graphiti?&lt;/h2&gt; &#xA;&lt;p&gt;Traditional RAG approaches often rely on batch processing and static data summarization, making them inefficient for frequently changing data. Graphiti addresses these challenges by providing:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Real-Time Incremental Updates:&lt;/strong&gt; Immediate integration of new data episodes without batch recomputation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bi-Temporal Data Model:&lt;/strong&gt; Explicit tracking of event occurrence and ingestion times, allowing accurate point-in-time queries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Efficient Hybrid Retrieval:&lt;/strong&gt; Combines semantic embeddings, keyword (BM25), and graph traversal to achieve low-latency queries without reliance on LLM summarization.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Custom Entity Definitions:&lt;/strong&gt; Flexible ontology creation and support for developer-defined entities through straightforward Pydantic models.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scalability:&lt;/strong&gt; Efficiently manages large datasets with parallel processing, suitable for enterprise environments.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/getzep/graphiti/main/images/graphiti-intro-slides-stock-2.gif&#34; alt=&#34;Graphiti structured + unstructured demo&#34; width=&#34;700px&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Graphiti vs. GraphRAG&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Aspect&lt;/th&gt; &#xA;   &lt;th&gt;GraphRAG&lt;/th&gt; &#xA;   &lt;th&gt;Graphiti&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Primary Use&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Static document summarization&lt;/td&gt; &#xA;   &lt;td&gt;Dynamic data management&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Data Handling&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Batch-oriented processing&lt;/td&gt; &#xA;   &lt;td&gt;Continuous, incremental updates&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Knowledge Structure&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Entity clusters &amp;amp; community summaries&lt;/td&gt; &#xA;   &lt;td&gt;Episodic data, semantic entities, communities&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Retrieval Method&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Sequential LLM summarization&lt;/td&gt; &#xA;   &lt;td&gt;Hybrid semantic, keyword, and graph-based search&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Adaptability&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Low&lt;/td&gt; &#xA;   &lt;td&gt;High&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Temporal Handling&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Basic timestamp tracking&lt;/td&gt; &#xA;   &lt;td&gt;Explicit bi-temporal tracking&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Contradiction Handling&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;LLM-driven summarization judgments&lt;/td&gt; &#xA;   &lt;td&gt;Temporal edge invalidation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Query Latency&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Seconds to tens of seconds&lt;/td&gt; &#xA;   &lt;td&gt;Typically sub-second latency&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Custom Entity Types&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes, customizable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Scalability&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Moderate&lt;/td&gt; &#xA;   &lt;td&gt;High, optimized for large datasets&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Graphiti is specifically designed to address the challenges of dynamic and frequently updated datasets, making it particularly suitable for applications requiring real-time interaction and precise historical queries.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python 3.10 or higher&lt;/li&gt; &#xA; &lt;li&gt;Neo4j 5.26 or higher (serves as the embeddings storage backend)&lt;/li&gt; &#xA; &lt;li&gt;OpenAI API key (for LLM inference and embedding)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Optional:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Anthropic or Groq API key (for alternative LLM providers)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] The simplest way to install Neo4j is via &lt;a href=&#34;https://neo4j.com/download/&#34;&gt;Neo4j Desktop&lt;/a&gt;. It provides a user-friendly interface to manage Neo4j instances and databases.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install graphiti-core&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;poetry add graphiti-core&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] Graphiti uses OpenAI for LLM inference and embedding. Ensure that an &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; is set in your environment. Support for Anthropic and Groq LLM inferences is available, too. Other LLM providers may be supported via OpenAI compatible APIs.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from graphiti_core import Graphiti&#xA;from graphiti_core.nodes import EpisodeType&#xA;from datetime import datetime, timezone&#xA;&#xA;# Initialize Graphiti as Your Memory Layer&#xA;graphiti = Graphiti(&#34;bolt://localhost:7687&#34;, &#34;neo4j&#34;, &#34;password&#34;)&#xA;&#xA;# Initialize the graph database with Graphiti&#39;s indices. This only needs to be done once.&#xA;graphiti.build_indices_and_constraints()&#xA;&#xA;# Add episodes&#xA;episodes = [&#xA;    &#34;Kamala Harris is the Attorney General of California. She was previously &#34;&#xA;    &#34;the district attorney for San Francisco.&#34;,&#xA;    &#34;As AG, Harris was in office from January 3, 2011 ‚Äì January 3, 2017&#34;,&#xA;]&#xA;for i, episode in enumerate(episodes):&#xA;    await graphiti.add_episode(&#xA;        name=f&#34;Freakonomics Radio {i}&#34;,&#xA;        episode_body=episode,&#xA;        source=EpisodeType.text,&#xA;        source_description=&#34;podcast&#34;,&#xA;        reference_time=datetime.now(timezone.utc)&#xA;    )&#xA;&#xA;# Search the graph for semantic memory retrieval&#xA;# Execute a hybrid search combining semantic similarity and BM25 retrieval&#xA;# Results are combined and reranked using Reciprocal Rank Fusion&#xA;results = await graphiti.search(&#39;Who was the California Attorney General?&#39;)&#xA;[&#xA;    EntityEdge(&#xA;‚îÇ   uuid = &#39;3133258f738e487383f07b04e15d4ac0&#39;,&#xA;‚îÇ   source_node_uuid = &#39;2a85789b318d4e418050506879906e62&#39;,&#xA;‚îÇ   target_node_uuid = &#39;baf7781f445945989d6e4f927f881556&#39;,&#xA;‚îÇ   created_at = datetime.datetime(2024, 8, 26, 13, 13, 24, 861097),&#xA;‚îÇ   name = &#39;HELD_POSITION&#39;,&#xA;# the fact reflects the updated state that Harris is&#xA;# no longer the AG of California&#xA;‚îÇ   fact = &#39;Kamala Harris was the Attorney General of California&#39;,&#xA;‚îÇ   fact_embedding = [&#xA;‚îÇ   ‚îÇ   -0.009955154731869698,&#xA;‚îÇ       ...&#xA;‚îÇ   ‚îÇ   0.00784289836883545&#xA;‚îÇ],&#xA;‚îÇ   episodes = [&#39;b43e98ad0a904088a76c67985caecc22&#39;],&#xA;‚îÇ   expired_at = datetime.datetime(2024, 8, 26, 20, 18, 1, 53812),&#xA;# These dates represent the date this edge was true.&#xA;‚îÇ   valid_at = datetime.datetime(2011, 1, 3, 0, 0, tzinfo= &amp;lt; UTC &amp;gt;),&#xA;‚îÇ   invalid_at = datetime.datetime(2017, 1, 3, 0, 0, tzinfo= &amp;lt; UTC &amp;gt;)&#xA;)&#xA;]&#xA;&#xA;# Rerank search results based on graph distance&#xA;# Provide a node UUID to prioritize results closer to that node in the graph.&#xA;# Results are weighted by their proximity, with distant edges receiving lower scores.&#xA;await graphiti.search(&#39;Who was the California Attorney General?&#39;, center_node_uuid)&#xA;&#xA;# Close the connection when chat state management is complete&#xA;graphiti.close()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Graph Service&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;server&lt;/code&gt; directory contains an API service for interacting with the Graphiti API. It is built using FastAPI.&lt;/p&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://raw.githubusercontent.com/getzep/graphiti/main/server/README.md&#34;&gt;server README&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;MCP Server&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;mcp_server&lt;/code&gt; directory contains a Model Context Protocol (MCP) server implementation for Graphiti. This server allows AI assistants to interact with Graphiti&#39;s knowledge graph capabilities through the MCP protocol.&lt;/p&gt; &#xA;&lt;p&gt;Key features of the MCP server include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Episode management (add, retrieve, delete)&lt;/li&gt; &#xA; &lt;li&gt;Entity management and relationship handling&lt;/li&gt; &#xA; &lt;li&gt;Semantic and hybrid search capabilities&lt;/li&gt; &#xA; &lt;li&gt;Group management for organizing related data&lt;/li&gt; &#xA; &lt;li&gt;Graph maintenance operations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The MCP server can be deployed using Docker with Neo4j, making it easy to integrate Graphiti into your AI assistant workflows.&lt;/p&gt; &#xA;&lt;p&gt;For detailed setup instructions and usage examples, see the &lt;a href=&#34;https://raw.githubusercontent.com/getzep/graphiti/main/mcp_server/README.md&#34;&gt;MCP server README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Optional Environment Variables&lt;/h2&gt; &#xA;&lt;p&gt;In addition to the Neo4j and OpenAi-compatible credentials, Graphiti also has a few optional environment variables. If you are using one of our supported models, such as Anthropic or Voyage models, the necessary environment variables must be set.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;USE_PARALLEL_RUNTIME&lt;/code&gt; is an optional boolean variable that can be set to true if you wish to enable Neo4j&#39;s parallel runtime feature for several of our search queries. Note that this feature is not supported for Neo4j Community edition or for smaller AuraDB instances, as such this feature is off by default.&lt;/p&gt; &#xA;&lt;h2&gt;Using Graphiti with Azure OpenAI&lt;/h2&gt; &#xA;&lt;p&gt;Graphiti supports Azure OpenAI for both LLM inference and embeddings. To use Azure OpenAI, you&#39;ll need to configure both the LLM client and embedder with your Azure OpenAI credentials.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from openai import AsyncAzureOpenAI&#xA;from graphiti_core import Graphiti&#xA;from graphiti_core.llm_client import OpenAIClient&#xA;from graphiti_core.embedder.openai import OpenAIEmbedder, OpenAIEmbedderConfig&#xA;from graphiti_core.cross_encoder.openai_reranker_client import OpenAIRerankerClient&#xA;&#xA;# Azure OpenAI configuration&#xA;api_key = &#34;&amp;lt;your-api-key&amp;gt;&#34;&#xA;api_version = &#34;&amp;lt;your-api-version&amp;gt;&#34;&#xA;azure_endpoint = &#34;&amp;lt;your-azure-endpoint&amp;gt;&#34;&#xA;&#xA;# Create Azure OpenAI client for LLM&#xA;azure_openai_client = AsyncAzureOpenAI(&#xA;    api_key=api_key,&#xA;    api_version=api_version,&#xA;    azure_endpoint=azure_endpoint&#xA;)&#xA;&#xA;# Initialize Graphiti with Azure OpenAI clients&#xA;graphiti = Graphiti(&#xA;    &#34;bolt://localhost:7687&#34;,&#xA;    &#34;neo4j&#34;,&#xA;    &#34;password&#34;,&#xA;    llm_client=OpenAIClient(&#xA;        client=azure_openai_client&#xA;    ),&#xA;    embedder=OpenAIEmbedder(&#xA;        config=OpenAIEmbedderConfig(&#xA;            embedding_model=&#34;text-embedding-3-small&#34;  # Use your Azure deployed embedding model name&#xA;        ),&#xA;        client=azure_openai_client&#xA;    ),&#xA;    # Optional: Configure the OpenAI cross encoder with Azure OpenAI&#xA;    cross_encoder=OpenAIRerankerClient(&#xA;        client=azure_openai_client&#xA;    )&#xA;)&#xA;&#xA;# Now you can use Graphiti with Azure OpenAI&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure to replace the placeholder values with your actual Azure OpenAI credentials and specify the correct embedding model name that&#39;s deployed in your Azure OpenAI service.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://help.getzep.com/graphiti&#34;&gt;Guides and API documentation&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://help.getzep.com/graphiti/graphiti/quick-start&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://help.getzep.com/graphiti/graphiti/lang-graph-agent&#34;&gt;Building an agent with LangChain&#39;s LangGraph and Graphiti&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Status and Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;Graphiti is under active development. We aim to maintain API stability while working on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supporting custom graph schemas: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Allow developers to provide their own defined node and edge classes when ingesting episodes&lt;/li&gt; &#xA;   &lt;li&gt;Enable more flexible knowledge representation tailored to specific use cases&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Enhancing retrieval capabilities with more robust and configurable options&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Graphiti MCP Server&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Expanding test coverage to ensure reliability and catch edge cases&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We encourage and appreciate all forms of contributions, whether it&#39;s code, documentation, addressing GitHub Issues, or answering questions in the Graphiti Discord channel. For detailed guidelines on code contributions, please refer to &lt;a href=&#34;https://raw.githubusercontent.com/getzep/graphiti/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Join the &lt;a href=&#34;https://discord.com/invite/W8Kw6bsgXQ&#34;&gt;Zep Discord server&lt;/a&gt; and make your way to the &lt;strong&gt;#Graphiti&lt;/strong&gt; channel!&lt;/p&gt;</summary>
  </entry>
</feed>