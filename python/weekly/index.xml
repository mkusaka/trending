<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-03T01:58:31Z</updated>
  <subtitle>Weekly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>QwenLM/Qwen-VL</title>
    <updated>2023-09-03T01:58:31Z</updated>
    <id>tag:github.com,2023-09-03:/QwenLM/Qwen-VL</id>
    <link href="https://github.com/QwenLM/Qwen-VL" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official repo of Qwen-VL (ÈÄö‰πâÂçÉÈóÆ-VL) chat &amp; pretrained large vision language model proposed by Alibaba Cloud.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;left&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/QwenLM/Qwen-VL/master/README_CN.md&#34;&gt;‰∏≠Êñá&lt;/a&gt;&amp;nbsp; ÔΩú &amp;amp;nbspEnglish&amp;nbsp;&amp;nbsp; ÔΩú &amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/QwenLM/Qwen-VL/master/README_JA.md&#34;&gt;Êó•Êú¨Ë™û&lt;/a&gt;&amp;nbsp; &lt;/p&gt; &#xA;&lt;br&gt;&#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/QwenLM/Qwen-VL/master/assets/logo.jpg&#34; width=&#34;400&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;br&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; Qwen-VL &lt;a href=&#34;https://modelscope.cn/models/qwen/Qwen-VL/summary&#34;&gt;ü§ñ &lt;/a&gt;&lt;a&gt; | &lt;/a&gt;&lt;a href=&#34;https://huggingface.co/Qwen/Qwen-VL&#34;&gt;ü§ó&lt;/a&gt;&amp;nbsp; ÔΩú Qwen-VL-Chat &lt;a href=&#34;https://modelscope.cn/models/qwen/Qwen-VL-Chat/summary&#34;&gt;ü§ñ &lt;/a&gt;&lt;a&gt;| &lt;/a&gt;&lt;a href=&#34;https://huggingface.co/Qwen/Qwen-VL-Chat&#34;&gt;ü§ó&lt;/a&gt;&amp;nbsp; ÔΩú Qwen-VL-Chat-Int4 &lt;a href=&#34;https://huggingface.co/Qwen/Qwen-VL-Chat-Int4&#34;&gt;ü§ó&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/QwenLM/Qwen-VL/master/assets/wechat.png&#34;&gt;WeChat&lt;/a&gt;&amp;nbsp;&amp;nbsp; | &amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://discord.gg/z3GAxXZ9Ce&#34;&gt;Discord&lt;/a&gt;&amp;nbsp;&amp;nbsp; | &amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://modelscope.cn/studios/qwen/Qwen-VL-Chat-Demo/summary&#34;&gt;Demo&lt;/a&gt;&amp;nbsp; ÔΩú &amp;nbsp;&lt;a href=&#34;https://arxiv.org/abs/2308.12966&#34;&gt;Paper&lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt;&#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;Qwen-VL&lt;/strong&gt; (Qwen Large Vision Language Model) is the multimodal version of the large model series, Qwen (abbr. Tongyi Qianwen), proposed by Alibaba Cloud. Qwen-VL accepts image, text, and bounding box as inputs, outputs text and bounding box. The features of Qwen-VL include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Strong performance&lt;/strong&gt;: It significantly surpasses existing open-sourced Large Vision Language Models (LVLM) under similar model scale on multiple English evaluation benchmarks (including Zero-shot Captioning, VQA, DocVQA, and Grounding).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-lingual LVLM supporting text recognition&lt;/strong&gt;: Qwen-VL naturally supports English, Chinese, and multi-lingual conversation, and it promotes end-to-end recognition of Chinese and English bi-lingual text in images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-image interleaved conversations&lt;/strong&gt;: This feature allows for the input and comparison of multiple images, as well as the ability to specify questions related to the images and engage in multi-image storytelling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;First generalist model supporting grounding in Chinese&lt;/strong&gt;: Detecting bounding boxes through open-domain language expression in both Chinese and English.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fine-grained recognition and understanding&lt;/strong&gt;: Compared to the 224*224 resolution currently used by other open-sourced LVLM, the 448*448 resolution promotes fine-grained text recognition, document QA, and bounding box annotation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/QwenLM/Qwen-VL/master/assets/demo_vl.gif&#34; width=&#34;400&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;br&gt; &lt;/p&gt;&#xA;&lt;p&gt;We release two models of the Qwen-VL series:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Qwen-VL: The pre-trained LVLM model uses Qwen-7B as the initialization of the LLM, and &lt;a href=&#34;https://github.com/mlfoundations/open_clip&#34;&gt;Openclip ViT-bigG&lt;/a&gt; as the initialization of the visual encoder. And connects them with a randomly initialized cross-attention layer.&lt;/li&gt; &#xA; &lt;li&gt;Qwen-VL-Chat: A multimodal LLM-based AI assistant, which is trained with alignment techniques. Qwen-VL-Chat supports more flexible interaction, such as multiple image inputs, multi-round question answering, and creative capabilities. &lt;br&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Evaluation&lt;/h2&gt; &#xA;&lt;p&gt;We evaluated the model&#39;s abilities from two perspectives:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Standard Benchmarks&lt;/strong&gt;: We evaluate the model&#39;s basic task capabilities on four major categories of multimodal tasks:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Zero-shot Captioning: Evaluate model&#39;s zero-shot image captioning ability on unseen datasets;&lt;/li&gt; &#xA;   &lt;li&gt;General VQA: Evaluate the general question-answering ability of pictures, such as the judgment, color, number, category, etc;&lt;/li&gt; &#xA;   &lt;li&gt;Text-based VQA: Evaluate the model&#39;s ability to recognize text in pictures, such as document QA, chart QA, etc;&lt;/li&gt; &#xA;   &lt;li&gt;Referring Expression Comprehension: Evaluate the ability to localize a target object in an image described by a referring expression.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;TouchStone&lt;/strong&gt;: To evaluate the overall text-image dialogue capability and alignment level with humans, we have constructed a benchmark called TouchStone, which is based on scoring with GPT4 to evaluate the LVLM model.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The TouchStone benchmark covers a total of 300+ images, 800+ questions, and 27 categories. Such as attribute-based Q&amp;amp;A, celebrity recognition, writing poetry, summarizing multiple images, product comparison, math problem solving, etc;&lt;/li&gt; &#xA;   &lt;li&gt;In order to break the current limitation of GPT4 in terms of direct image input, TouchStone provides fine-grained image annotations by human labeling. These detailed annotations, along with the questions and the model&#39;s output, are then presented to GPT4 for scoring.&lt;/li&gt; &#xA;   &lt;li&gt;The benchmark includes both English and Chinese versions.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The results of the evaluation are as follows:&lt;/p&gt; &#xA;&lt;p&gt;Qwen-VL outperforms current SOTA generalist models on multiple VL tasks and has a more comprehensive coverage in terms of capability range.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/QwenLM/Qwen-VL/master/assets/radar.png&#34; width=&#34;600&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h3&gt;Zero-shot Captioning &amp;amp; General VQA&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th rowspan=&#34;2&#34;&gt;Model type&lt;/th&gt; &#xA;   &lt;th rowspan=&#34;2&#34;&gt;Model&lt;/th&gt; &#xA;   &lt;th colspan=&#34;2&#34;&gt;Zero-shot Captioning&lt;/th&gt; &#xA;   &lt;th colspan=&#34;5&#34;&gt;General VQA&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;NoCaps&lt;/th&gt; &#xA;   &lt;th&gt;Flickr30K&lt;/th&gt; &#xA;   &lt;th&gt;VQAv2&lt;sup&gt;dev&lt;/sup&gt;&lt;/th&gt; &#xA;   &lt;th&gt;OK-VQA&lt;/th&gt; &#xA;   &lt;th&gt;GQA&lt;/th&gt; &#xA;   &lt;th&gt;SciQA-Img&lt;br&gt;(0-shot)&lt;/th&gt; &#xA;   &lt;th&gt;VizWiz&lt;br&gt;(0-shot)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody align=&#34;center&#34;&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td rowspan=&#34;10&#34;&gt;Generalist&lt;br&gt;Models&lt;/td&gt; &#xA;   &lt;td&gt;Flamingo-9B&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;61.5&lt;/td&gt; &#xA;   &lt;td&gt;51.8&lt;/td&gt; &#xA;   &lt;td&gt;44.7&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;28.8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Flamingo-80B&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;67.2&lt;/td&gt; &#xA;   &lt;td&gt;56.3&lt;/td&gt; &#xA;   &lt;td&gt;50.6&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;31.6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Unified-IO-XL&lt;/td&gt; &#xA;   &lt;td&gt;100.0&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;77.9&lt;/td&gt; &#xA;   &lt;td&gt;54.0&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Kosmos-1&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;67.1&lt;/td&gt; &#xA;   &lt;td&gt;51.0&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;29.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Kosmos-2&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;80.5&lt;/td&gt; &#xA;   &lt;td&gt;51.1&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BLIP-2 (Vicuna-13B)&lt;/td&gt; &#xA;   &lt;td&gt;103.9&lt;/td&gt; &#xA;   &lt;td&gt;71.6&lt;/td&gt; &#xA;   &lt;td&gt;65.0&lt;/td&gt; &#xA;   &lt;td&gt;45.9&lt;/td&gt; &#xA;   &lt;td&gt;32.3&lt;/td&gt; &#xA;   &lt;td&gt;61.0&lt;/td&gt; &#xA;   &lt;td&gt;19.6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;InstructBLIP (Vicuna-13B)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;121.9&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;82.8&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;49.5&lt;/td&gt; &#xA;   &lt;td&gt;63.1&lt;/td&gt; &#xA;   &lt;td&gt;33.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shikra (Vicuna-13B)&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;73.9&lt;/td&gt; &#xA;   &lt;td&gt;77.36&lt;/td&gt; &#xA;   &lt;td&gt;47.16&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Qwen-VL (Qwen-7B)&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;121.4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;b&gt;85.8&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;b&gt;78.8&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;b&gt;58.6&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;b&gt;59.3&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;67.1&lt;/td&gt; &#xA;   &lt;td&gt;35.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;!-- &lt;tr&gt;&#xA;    &lt;td&gt;Qwen-VL (4-shot)&lt;/td&gt;&#xA;    &lt;td&gt;-&lt;/td&gt;&#xA;    &lt;td&gt;-&lt;/td&gt;&#xA;    &lt;td&gt;-&lt;/td&gt;&#xA;    &lt;td&gt;63.6&lt;/td&gt;&#xA;    &lt;td&gt;-&lt;/td&gt;&#xA;    &lt;td&gt;-&lt;/td&gt;&#xA;    &lt;td&gt;39.1&lt;/td&gt;&#xA;  &lt;/tr&gt; --&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Qwen-VL-Chat&lt;/td&gt; &#xA;   &lt;td&gt;120.2&lt;/td&gt; &#xA;   &lt;td&gt;81.0&lt;/td&gt; &#xA;   &lt;td&gt;78.2&lt;/td&gt; &#xA;   &lt;td&gt;56.6&lt;/td&gt; &#xA;   &lt;td&gt;57.5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;b&gt;68.2&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;b&gt;38.9&lt;/b&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;!-- &lt;tr&gt;&#xA;    &lt;td&gt;Qwen-VL-Chat (4-shot)&lt;/td&gt;&#xA;    &lt;td&gt;-&lt;/td&gt;&#xA;    &lt;td&gt;-&lt;/td&gt;&#xA;    &lt;td&gt;-&lt;/td&gt;&#xA;    &lt;td&gt;60.6&lt;/td&gt;&#xA;    &lt;td&gt;-&lt;/td&gt;&#xA;    &lt;td&gt;-&lt;/td&gt;&#xA;    &lt;td&gt;44.45&lt;/td&gt;&#xA;  &lt;/tr&gt; --&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Previous SOTA&lt;br&gt;(Per Task Fine-tuning)&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;127.0&lt;br&gt;(PALI-17B)&lt;/td&gt; &#xA;   &lt;td&gt;84.5&lt;br&gt;(InstructBLIP&lt;br&gt;-FlanT5-XL)&lt;/td&gt; &#xA;   &lt;td&gt;86.1&lt;br&gt;(PALI-X&lt;br&gt;-55B)&lt;/td&gt; &#xA;   &lt;td&gt;66.1&lt;br&gt;(PALI-X&lt;br&gt;-55B)&lt;/td&gt; &#xA;   &lt;td&gt;72.1&lt;br&gt;(CFR)&lt;/td&gt; &#xA;   &lt;td&gt;92.53&lt;br&gt;(LLaVa+&lt;br&gt;GPT-4)&lt;/td&gt; &#xA;   &lt;td&gt;70.9&lt;br&gt;(PALI-X&lt;br&gt;-55B)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For zero-shot image captioning, Qwen-VL achieves the &lt;strong&gt;SOTA&lt;/strong&gt; on Flickr30K and competitive results on Nocaps with InstructBlip.&lt;/li&gt; &#xA; &lt;li&gt;For general VQA, Qwen-VL achieves the &lt;strong&gt;SOTA&lt;/strong&gt; under the same generalist LVLM scale settings.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Text-oriented VQA (Focused on text understanding capabilities in images)&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model type&lt;/th&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;   &lt;th&gt;TextVQA&lt;/th&gt; &#xA;   &lt;th&gt;DocVQA&lt;/th&gt; &#xA;   &lt;th&gt;ChartQA&lt;/th&gt; &#xA;   &lt;th&gt;AI2D&lt;/th&gt; &#xA;   &lt;th&gt;OCR-VQA&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody align=&#34;center&#34;&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td rowspan=&#34;5&#34;&gt;Generalist Models&lt;/td&gt; &#xA;   &lt;td&gt;BLIP-2 (Vicuna-13B)&lt;/td&gt; &#xA;   &lt;td&gt;42.4&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;InstructBLIP (Vicuna-13B)&lt;/td&gt; &#xA;   &lt;td&gt;50.7&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mPLUG-DocOwl (LLaMA-7B)&lt;/td&gt; &#xA;   &lt;td&gt;52.6&lt;/td&gt; &#xA;   &lt;td&gt;62.2&lt;/td&gt; &#xA;   &lt;td&gt;57.4&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Pix2Struct-Large (1.3B)&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;b&gt;76.6&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;58.6&lt;/td&gt; &#xA;   &lt;td&gt;42.1&lt;/td&gt; &#xA;   &lt;td&gt;71.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Qwen-VL (Qwen-7B)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;b&gt;63.8&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;65.1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;b&gt;65.7&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;b&gt;62.3&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;b&gt;75.7&lt;/b&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Specialist SOTAs&lt;br&gt;(Specialist/Finetuned)&lt;/td&gt; &#xA;   &lt;td&gt;PALI-X-55B (Single-task FT)&lt;br&gt;(Without OCR Pipeline)&lt;/td&gt; &#xA;   &lt;td&gt;71.44&lt;/td&gt; &#xA;   &lt;td&gt;80.0&lt;/td&gt; &#xA;   &lt;td&gt;70.0&lt;/td&gt; &#xA;   &lt;td&gt;81.2&lt;/td&gt; &#xA;   &lt;td&gt;75.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In text-related recognition/QA evaluation, Qwen-VL achieves the SOTA under the generalist LVLM scale settings.&lt;/li&gt; &#xA; &lt;li&gt;Resolution is important for several above evaluations. While most open-sourced LVLM models with 224 resolution are incapable of these evaluations or can only solve these by cutting images, Qwen-VL scales the resolution to 448 so that it can be evaluated end-to-end. Qwen-VL even outperforms Pix2Struct-Large models of 1024 resolution on some tasks.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Referring Expression Comprehension&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th rowspan=&#34;2&#34;&gt;Model type&lt;/th&gt; &#xA;   &lt;th rowspan=&#34;2&#34;&gt;Model&lt;/th&gt; &#xA;   &lt;th colspan=&#34;3&#34;&gt;RefCOCO&lt;/th&gt; &#xA;   &lt;th colspan=&#34;3&#34;&gt;RefCOCO+&lt;/th&gt; &#xA;   &lt;th colspan=&#34;2&#34;&gt;RefCOCOg&lt;/th&gt; &#xA;   &lt;th&gt;GRIT&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;val&lt;/th&gt; &#xA;   &lt;th&gt;test-A&lt;/th&gt; &#xA;   &lt;th&gt;test-B&lt;/th&gt; &#xA;   &lt;th&gt;val&lt;/th&gt; &#xA;   &lt;th&gt;test-A&lt;/th&gt; &#xA;   &lt;th&gt;test-B&lt;/th&gt; &#xA;   &lt;th&gt;val-u&lt;/th&gt; &#xA;   &lt;th&gt;test-u&lt;/th&gt; &#xA;   &lt;th&gt;refexp&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody align=&#34;center&#34;&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td rowspan=&#34;8&#34;&gt;Generalist Models&lt;/td&gt; &#xA;   &lt;td&gt;GPV-2&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;51.50&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OFA-L*&lt;/td&gt; &#xA;   &lt;td&gt;79.96&lt;/td&gt; &#xA;   &lt;td&gt;83.67&lt;/td&gt; &#xA;   &lt;td&gt;76.39&lt;/td&gt; &#xA;   &lt;td&gt;68.29&lt;/td&gt; &#xA;   &lt;td&gt;76.00&lt;/td&gt; &#xA;   &lt;td&gt;61.75&lt;/td&gt; &#xA;   &lt;td&gt;67.57&lt;/td&gt; &#xA;   &lt;td&gt;67.58&lt;/td&gt; &#xA;   &lt;td&gt;61.70&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Unified-IO&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;b&gt;78.61&lt;/b&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VisionLLM-H&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;86.70&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shikra-7B&lt;/td&gt; &#xA;   &lt;td&gt;87.01&lt;/td&gt; &#xA;   &lt;td&gt;90.61&lt;/td&gt; &#xA;   &lt;td&gt;80.24 &lt;/td&gt; &#xA;   &lt;td&gt;81.60&lt;/td&gt; &#xA;   &lt;td&gt;87.36&lt;/td&gt; &#xA;   &lt;td&gt;72.12&lt;/td&gt; &#xA;   &lt;td&gt;82.27&lt;/td&gt; &#xA;   &lt;td&gt;82.19&lt;/td&gt; &#xA;   &lt;td&gt;69.34&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shikra-13B&lt;/td&gt; &#xA;   &lt;td&gt;87.83 &lt;/td&gt; &#xA;   &lt;td&gt;91.11&lt;/td&gt; &#xA;   &lt;td&gt;81.81&lt;/td&gt; &#xA;   &lt;td&gt;82.89&lt;/td&gt; &#xA;   &lt;td&gt;87.79&lt;/td&gt; &#xA;   &lt;td&gt;74.41&lt;/td&gt; &#xA;   &lt;td&gt;82.64&lt;/td&gt; &#xA;   &lt;td&gt;83.16&lt;/td&gt; &#xA;   &lt;td&gt;69.03&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Qwen-VL-7B&lt;/td&gt; &#xA;   &lt;td&gt;&lt;b&gt;89.36&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;92.26&lt;/td&gt; &#xA;   &lt;td&gt;&lt;b&gt;85.34&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;b&gt;83.12&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;88.25&lt;/td&gt; &#xA;   &lt;td&gt;&lt;b&gt;77.21&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;85.58&lt;/td&gt; &#xA;   &lt;td&gt;85.48&lt;/td&gt; &#xA;   &lt;td&gt;78.22&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Qwen-VL-7B-Chat&lt;/td&gt; &#xA;   &lt;td&gt;88.55&lt;/td&gt; &#xA;   &lt;td&gt;&lt;b&gt;92.27&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;84.51&lt;/td&gt; &#xA;   &lt;td&gt;82.82&lt;/td&gt; &#xA;   &lt;td&gt;&lt;b&gt;88.59&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;76.79&lt;/td&gt; &#xA;   &lt;td&gt;&lt;b&gt;85.96&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;b&gt;86.32&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td rowspan=&#34;3&#34;&gt;Specialist SOTAs&lt;br&gt;(Specialist/Finetuned)&lt;/td&gt; &#xA;   &lt;td&gt;G-DINO-L&lt;/td&gt; &#xA;   &lt;td&gt;90.56&lt;/td&gt; &#xA;   &lt;td&gt;93.19&lt;/td&gt; &#xA;   &lt;td&gt;88.24&lt;/td&gt; &#xA;   &lt;td&gt;82.75&lt;/td&gt; &#xA;   &lt;td&gt;88.95&lt;/td&gt; &#xA;   &lt;td&gt;75.92&lt;/td&gt; &#xA;   &lt;td&gt;86.13&lt;/td&gt; &#xA;   &lt;td&gt;87.02&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;UNINEXT-H&lt;/td&gt; &#xA;   &lt;td&gt;92.64 &lt;/td&gt; &#xA;   &lt;td&gt;94.33&lt;/td&gt; &#xA;   &lt;td&gt;91.46&lt;/td&gt; &#xA;   &lt;td&gt;85.24&lt;/td&gt; &#xA;   &lt;td&gt;89.63&lt;/td&gt; &#xA;   &lt;td&gt;79.79&lt;/td&gt; &#xA;   &lt;td&gt;88.73&lt;/td&gt; &#xA;   &lt;td&gt;89.37&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ONE-PEACE&lt;/td&gt; &#xA;   &lt;td&gt;92.58 &lt;/td&gt; &#xA;   &lt;td&gt;94.18&lt;/td&gt; &#xA;   &lt;td&gt;89.26&lt;/td&gt; &#xA;   &lt;td&gt;88.77&lt;/td&gt; &#xA;   &lt;td&gt;92.21&lt;/td&gt; &#xA;   &lt;td&gt;83.23&lt;/td&gt; &#xA;   &lt;td&gt;89.22&lt;/td&gt; &#xA;   &lt;td&gt;89.27&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Qwen-VL achieves the &lt;strong&gt;SOTA&lt;/strong&gt; in all above referring expression comprehension benchmarks.&lt;/li&gt; &#xA; &lt;li&gt;Qwen-VL has not been trained on any Chinese grounding data, but it can still generalize to the Chinese Grounding tasks in a zero-shot way by training Chinese Caption data and English Grounding data.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We provide all of the above evaluation scripts for reproducing our experimental results. Please read &lt;a href=&#34;https://raw.githubusercontent.com/QwenLM/Qwen-VL/master/eval_mm/EVALUATION.md&#34;&gt;eval_mm/EVALUATION.md&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Chat evaluation&lt;/h3&gt; &#xA;&lt;p&gt;TouchStone is a benchmark based on scoring with GPT4 to evaluate the abilities of the LVLM model on text-image dialogue and alignment levels with humans. It covers a total of 300+ images, 800+ questions, and 27 categories, such as attribute-based Q&amp;amp;A, celebrity recognition, writing poetry, summarizing multiple images, product comparison, math problem solving, etc. Please read &lt;a href=&#34;https://raw.githubusercontent.com/QwenLM/Qwen-VL/master/touchstone/README.md&#34;&gt;touchstone/README.md&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h4&gt;English evaluation&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;   &lt;th&gt;Score&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PandaGPT&lt;/td&gt; &#xA;   &lt;td&gt;488.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MiniGPT4&lt;/td&gt; &#xA;   &lt;td&gt;531.7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;InstructBLIP&lt;/td&gt; &#xA;   &lt;td&gt;552.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LLaMA-AdapterV2&lt;/td&gt; &#xA;   &lt;td&gt;590.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LLaVA&lt;/td&gt; &#xA;   &lt;td&gt;602.7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mPLUG-Owl&lt;/td&gt; &#xA;   &lt;td&gt;605.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Qwen-VL-Chat&lt;/td&gt; &#xA;   &lt;td&gt;645.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Chinese evaluation&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;   &lt;th&gt;Score&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VisualGLM&lt;/td&gt; &#xA;   &lt;td&gt;247.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Qwen-VL-Chat&lt;/td&gt; &#xA;   &lt;td&gt;401.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Qwen-VL-Chat has achieved the best results in both Chinese and English alignment evaluation. &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;python 3.8 and above&lt;/li&gt; &#xA; &lt;li&gt;pytorch 1.12 and above, 2.0 and above are recommended&lt;/li&gt; &#xA; &lt;li&gt;CUDA 11.4 and above are recommended (this is for GPU users) &lt;br&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Below, we provide simple examples to show how to use Qwen-VL and Qwen-VL-Chat with ü§ñ ModelScope and ü§ó Transformers.&lt;/p&gt; &#xA;&lt;p&gt;Before running the code, make sure you have setup the environment and installed the required packages. Make sure you meet the above requirements, and then install the dependent libraries.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can start with ModelScope or Transformers. More usage aboue vision encoder, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/QwenLM/Qwen-VL/master/TUTORIAL.md&#34;&gt;tutorial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;ü§ó Transformers&lt;/h4&gt; &#xA;&lt;p&gt;To use Qwen-VL-Chat for the inference, all you need to do is to input a few lines of codes as demonstrated below. However, &lt;strong&gt;please make sure that you are using the latest code.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from transformers import AutoModelForCausalLM, AutoTokenizer&#xA;from transformers.generation import GenerationConfig&#xA;import torch&#xA;torch.manual_seed(1234)&#xA;&#xA;# Note: The default behavior now has injection attack prevention off.&#xA;tokenizer = AutoTokenizer.from_pretrained(&#34;Qwen/Qwen-VL-Chat&#34;, trust_remote_code=True)&#xA;&#xA;# use bf16&#xA;# model = AutoModelForCausalLM.from_pretrained(&#34;Qwen/Qwen-VL-Chat&#34;, device_map=&#34;auto&#34;, trust_remote_code=True, bf16=True).eval()&#xA;# use fp16&#xA;# model = AutoModelForCausalLM.from_pretrained(&#34;Qwen/Qwen-VL-Chat&#34;, device_map=&#34;auto&#34;, trust_remote_code=True, fp16=True).eval()&#xA;# use cpu only&#xA;# model = AutoModelForCausalLM.from_pretrained(&#34;Qwen/Qwen-VL-Chat&#34;, device_map=&#34;cpu&#34;, trust_remote_code=True).eval()&#xA;# use cuda device&#xA;model = AutoModelForCausalLM.from_pretrained(&#34;Qwen/Qwen-VL-Chat&#34;, device_map=&#34;cuda&#34;, trust_remote_code=True).eval()&#xA;&#xA;# Specify hyperparameters for generation&#xA;model.generation_config = GenerationConfig.from_pretrained(&#34;Qwen/Qwen-VL-Chat&#34;, trust_remote_code=True)&#xA;&#xA;# 1st dialogue turn&#xA;query = tokenizer.from_list_format([&#xA;    {&#39;image&#39;: &#39;https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen-VL/assets/demo.jpeg&#39;}, # Either a local path or an url&#xA;    {&#39;text&#39;: &#39;ËøôÊòØ‰ªÄ‰πà?&#39;},&#xA;])&#xA;response, history = model.chat(tokenizer, query=query, history=None)&#xA;print(response)&#xA;# Âõæ‰∏≠ÊòØ‰∏ÄÂêçÂ•≥Â≠êÂú®Ê≤ôÊª©‰∏äÂíåÁãóÁé©ËÄçÔºåÊóÅËæπÊòØ‰∏ÄÂè™ÊãâÂ∏ÉÊãâÂ§öÁä¨ÔºåÂÆÉ‰ª¨Â§Ñ‰∫éÊ≤ôÊª©‰∏ä„ÄÇ&#xA;&#xA;# 2nd dialogue turn&#xA;response, history = model.chat(tokenizer, &#39;Ê°ÜÂá∫Âõæ‰∏≠ÂáªÊéåÁöÑ‰ΩçÁΩÆ&#39;, history=history)&#xA;print(response)&#xA;# &amp;lt;ref&amp;gt;ÂáªÊéå&amp;lt;/ref&amp;gt;&amp;lt;box&amp;gt;(536,509),(588,602)&amp;lt;/box&amp;gt;&#xA;image = tokenizer.draw_bbox_on_latest_picture(response, history)&#xA;if image:&#xA;  image.save(&#39;1.jpg&#39;)&#xA;else:&#xA;  print(&#34;no box&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/QwenLM/Qwen-VL/master/assets/demo_highfive.jpg&#34; width=&#34;500&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt;Running Qwen-VL&lt;/summary&gt; &#xA; &lt;p&gt;Running Qwen-VL pretrained base model is also simple.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from transformers import AutoModelForCausalLM, AutoTokenizer&#xA;from transformers.generation import GenerationConfig&#xA;import torch&#xA;torch.manual_seed(1234)&#xA;&#xA;tokenizer = AutoTokenizer.from_pretrained(&#34;Qwen/Qwen-VL&#34;, trust_remote_code=True)&#xA;&#xA;# use bf16&#xA;# model = AutoModelForCausalLM.from_pretrained(&#34;Qwen/Qwen-VL&#34;, device_map=&#34;auto&#34;, trust_remote_code=True, bf16=True).eval()&#xA;# use fp16&#xA;# model = AutoModelForCausalLM.from_pretrained(&#34;Qwen/Qwen-VL&#34;, device_map=&#34;auto&#34;, trust_remote_code=True, fp16=True).eval()&#xA;# use cpu only&#xA;# model = AutoModelForCausalLM.from_pretrained(&#34;Qwen/Qwen-VL&#34;, device_map=&#34;cpu&#34;, trust_remote_code=True).eval()&#xA;# use cuda device&#xA;model = AutoModelForCausalLM.from_pretrained(&#34;Qwen/Qwen-VL&#34;, device_map=&#34;cuda&#34;, trust_remote_code=True).eval()&#xA;&#xA;# Specify hyperparameters for generation (No need to do this if you are using transformers&amp;gt;4.32.0)&#xA;# model.generation_config = GenerationConfig.from_pretrained(&#34;Qwen/Qwen-VL&#34;, trust_remote_code=True)&#xA;&#xA;query = tokenizer.from_list_format([&#xA;    {&#39;image&#39;: &#39;https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen-VL/assets/demo.jpeg&#39;}, # Either a local path or an url&#xA;    {&#39;text&#39;: &#39;Generate the caption in English with grounding:&#39;},&#xA;])&#xA;inputs = tokenizer(query, return_tensors=&#39;pt&#39;)&#xA;inputs = inputs.to(model.device)&#xA;pred = model.generate(**inputs)&#xA;response = tokenizer.decode(pred.cpu()[0], skip_special_tokens=False)&#xA;print(response)&#xA;# &amp;lt;img&amp;gt;https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen-VL/assets/demo.jpeg&amp;lt;/img&amp;gt;Generate the caption in English with grounding:&amp;lt;ref&amp;gt; Woman&amp;lt;/ref&amp;gt;&amp;lt;box&amp;gt;(451,379),(731,806)&amp;lt;/box&amp;gt; and&amp;lt;ref&amp;gt; her dog&amp;lt;/ref&amp;gt;&amp;lt;box&amp;gt;(219,424),(576,896)&amp;lt;/box&amp;gt; playing on the beach&amp;lt;|endoftext|&amp;gt;&#xA;image = tokenizer.draw_bbox_on_latest_picture(response)&#xA;if image:&#xA;  image.save(&#39;2.jpg&#39;)&#xA;else:&#xA;  print(&#34;no box&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/QwenLM/Qwen-VL/master/assets/demo_spotting_caption.jpg&#34; width=&#34;500&#34;&gt; &lt;/p&gt;&#xA; &lt;p&gt; &lt;/p&gt;&#xA;&lt;/details&gt; &#xA;&lt;h4&gt;ü§ñ ModelScope&lt;/h4&gt; &#xA;&lt;p&gt;ModelScope is an opensource platform for Model-as-a-Service (MaaS), which provides flexible and cost-effective model service to AI developers. Similarly, you can run the models with ModelScope as shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from modelscope import (&#xA;    snapshot_download, AutoModelForCausalLM, AutoTokenizer, GenerationConfig&#xA;)&#xA;import torch&#xA;model_id = &#39;qwen/Qwen-VL-Chat&#39;&#xA;revision = &#39;v1.0.0&#39;&#xA;&#xA;model_dir = snapshot_download(model_id, revision=revision)&#xA;torch.manual_seed(1234)&#xA;&#xA;tokenizer = AutoTokenizer.from_pretrained(model_dir, trust_remote_code=True)&#xA;if not hasattr(tokenizer, &#39;model_dir&#39;):&#xA;    tokenizer.model_dir = model_dir&#xA;# use bf16&#xA;# model = AutoModelForCausalLM.from_pretrained(model_dir, device_map=&#34;auto&#34;, trust_remote_code=True, bf16=True).eval()&#xA;# use fp16&#xA;model = AutoModelForCausalLM.from_pretrained(model_dir, device_map=&#34;auto&#34;, trust_remote_code=True, fp16=True).eval()&#xA;# use cpu&#xA;# model = AutoModelForCausalLM.from_pretrained(model_dir, device_map=&#34;cpu&#34;, trust_remote_code=True).eval()&#xA;# use auto&#xA;model = AutoModelForCausalLM.from_pretrained(model_dir, device_map=&#34;auto&#34;, trust_remote_code=True).eval()&#xA;&#xA;# Specify hyperparameters for generation (No need to do this if you are using transformers&amp;gt;=4.32.0)&#xA;# model.generation_config = GenerationConfig.from_pretrained(model_dir, trust_remote_code=True)&#xA;&#xA;# 1st dialogue turn&#xA;# Either a local path or an url between &amp;lt;img&amp;gt;&amp;lt;/img&amp;gt; tags.&#xA;image_path = &#39;https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen-VL/assets/demo.jpeg&#39;&#xA;response, history = model.chat(tokenizer, query=f&#39;&amp;lt;img&amp;gt;{image_path}&amp;lt;/img&amp;gt;ËøôÊòØ‰ªÄ‰πà&#39;, history=None)&#xA;print(response)&#xA;# Âõæ‰∏≠ÊòØ‰∏ÄÂêçÂπ¥ËΩªÂ•≥Â≠êÂú®Ê≤ôÊª©‰∏äÂíåÂ•πÁöÑÁãóÁé©ËÄçÔºåÁãóÁöÑÂìÅÁßçÊòØÊãâÂ∏ÉÊãâÂ§ö„ÄÇÂ•π‰ª¨ÂùêÂú®Ê≤ôÊª©‰∏äÔºåÁãóÁöÑÂâçËÖøÊä¨Ëµ∑Êù•Ôºå‰∏é‰∫∫‰∫íÂä®„ÄÇ&#xA;&#xA;# 2nd dialogue turn&#xA;response, history = model.chat(tokenizer, &#39;ËæìÂá∫ÂáªÊéåÁöÑÊ£ÄÊµãÊ°Ü&#39;, history=history)&#xA;print(response)&#xA;# &amp;lt;ref&amp;gt;&#34;ÂáªÊéå&#34;&amp;lt;/ref&amp;gt;&amp;lt;box&amp;gt;(211,412),(577,891)&amp;lt;/box&amp;gt;&#xA;image = tokenizer.draw_bbox_on_latest_picture(response, history)&#xA;if image:&#xA;  image.save(&#39;output_chat.jpg&#39;)&#xA;else:&#xA;  print(&#34;no box&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/QwenLM/Qwen-VL/master/assets/demo_highfive.jpg&#34; width=&#34;500&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;br&gt; &lt;/p&gt;&#xA;&lt;h2&gt;Quantization&lt;/h2&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;We provide a new solution based on &lt;a href=&#34;https://github.com/PanQiWei/AutoGPTQ&#34;&gt;AutoGPTQ&lt;/a&gt;, and release an Int4 quantized model for Qwen-VL-Chat, Qwen-VL-Chat-Int4 &lt;a href=&#34;https://huggingface.co/Qwen/Qwen-VL-Chat-Int4&#34;&gt;Click here&lt;/a&gt;, which achieves nearly lossless model effects but improved performance on both memory costs and inference speed.&lt;/p&gt; &#xA;&lt;p&gt;Here we demonstrate how to use our provided quantized models for inference. Before you start, make sure you meet the requirements (e.g., torch 2.0 and above, transformers 4.32.0 and above, etc.) and install the required packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install optimum&#xA;git clone https://github.com/JustinLin610/AutoGPTQ.git &amp;amp; cd AutoGPTQ&#xA;pip install -v .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you meet problems installing &lt;code&gt;auto-gptq&lt;/code&gt;, we advise you to check out the official &lt;a href=&#34;https://github.com/PanQiWei/AutoGPTQ&#34;&gt;repo&lt;/a&gt; to find a wheel.&lt;/p&gt; &#xA;&lt;p&gt;Then you can load the quantized model easily and run inference as same as usual:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;model = AutoModelForCausalLM.from_pretrained(&#xA;    &#34;Qwen/Qwen-VL-Chat-Int4&#34;,&#xA;    device_map=&#34;auto&#34;,&#xA;    trust_remote_code=True&#xA;).eval()&#xA;# Either a local path or an url between &amp;lt;img&amp;gt;&amp;lt;/img&amp;gt; tags.&#xA;image_path = &#39;https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen-VL/assets/demo.jpeg&#39;&#xA;response, history = model.chat(tokenizer, query=f&#39;&amp;lt;img&amp;gt;{image_path}&amp;lt;/img&amp;gt;ËøôÊòØ‰ªÄ‰πà&#39;, history=None)&#xA;print(response)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Performance&lt;/h3&gt; &#xA;&lt;p&gt;We illustrate the model performance of both BF16 and Int4 models on the benchmark &lt;strong&gt;&lt;a href=&#34;https://github.com/OFA-Sys/TouchStone&#34;&gt;TouchStone&lt;/a&gt;&lt;/strong&gt;, and we find that the quantized model does not suffer from significant performance degradation. Results are shown below:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Quantization&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;ZH&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;EN&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BF16&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;401.2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;645.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Int4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;386.6&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;651.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Inference Speed&lt;/h3&gt; &#xA;&lt;p&gt;We measured the average inference speed (tokens/s) of generating 1792 (2048-258) and 7934 (8192-258) tokens with the context of an image (which takes 258 tokens) under BF16 precision and Int4 quantization, respectively.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Quantization&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Speed (2048 tokens)&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Speed (8192 tokens)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BF16&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;28.87&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;24.32&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Int4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;37.79&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;34.34&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The profiling runs on a single A100-SXM4-80G GPU with PyTorch 2.0.1 and CUDA 11.4.&lt;/p&gt; &#xA;&lt;h3&gt;GPU Memory Usage&lt;/h3&gt; &#xA;&lt;p&gt;We also profile the peak GPU memory usage for encoding 1792 (2048-258) tokens (including an image) as context (and generating single token) and generating 7934 (8192-258) tokens (with an image as context) under BF16 or Int4 quantization level, respectively. The results are shown below.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Quantization&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Peak Usage for Encoding 2048 Tokens&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Peak Usage for Generating 8192 Tokens&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BF16&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;22.60GB&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;28.01GB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Int4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;11.82GB&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;17.23GB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The above speed and memory profiling are conducted using &lt;a href=&#34;https://qianwen-res.oss-cn-beijing.aliyuncs.com/profile_mm.py&#34;&gt;this script&lt;/a&gt;. &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;h3&gt;Web UI&lt;/h3&gt; &#xA;&lt;p&gt;We provide code for users to build a web UI demo. Before you start, make sure you install the following packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -r requirements_web_demo.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run the command below and click on the generated link:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python web_demo_mm.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;If you meet problems, please refer to &lt;a href=&#34;https://raw.githubusercontent.com/QwenLM/Qwen-VL/master/FAQ.md&#34;&gt;FAQ&lt;/a&gt; and the issues first to search a solution before you launch a new issue. &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License Agreement&lt;/h2&gt; &#xA;&lt;p&gt;Researchers and developers are free to use the codes and model weights of both Qwen-VL and Qwen-VL-Chat. We also allow their commercial use. Check our license at &lt;a href=&#34;https://raw.githubusercontent.com/QwenLM/Qwen-VL/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more details. &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you find our paper and code useful in your research, please consider giving a star &lt;span&gt;‚≠ê&lt;/span&gt; and citation &lt;span&gt;üìù&lt;/span&gt; :)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-BibTeX&#34;&gt;@article{Qwen-VL,&#xA;  title={Qwen-VL: A Frontier Large Vision-Language Model with Versatile Abilities},&#xA;  author={Bai, Jinze and Bai, Shuai and Yang, Shusheng and Wang, Shijie and Tan, Sinan and Wang, Peng and Lin, Junyang and Zhou, Chang and Zhou, Jingren},&#xA;  journal={arXiv preprint arXiv:2308.12966},&#xA;  year={2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Contact Us&lt;/h2&gt; &#xA;&lt;p&gt;If you are interested to leave a message to either our research team or product team, feel free to send an email to &lt;a href=&#34;mailto:qianwen_opensource@alibabacloud.com&#34;&gt;qianwen_opensource@alibabacloud.com&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ludwig-ai/ludwig</title>
    <updated>2023-09-03T01:58:31Z</updated>
    <id>tag:github.com,2023-09-03:/ludwig-ai/ludwig</id>
    <link href="https://github.com/ludwig-ai/ludwig" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Low-code framework for building custom LLMs, neural networks, and other AI models&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://ludwig.ai&#34;&gt; &lt;img src=&#34;https://github.com/ludwig-ai/ludwig-docs/raw/master/docs/images/ludwig_hero_smaller.jpg&#34; height=&#34;150&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;em&gt;Declarative deep learning framework built for scale and efficiency.&lt;/em&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://badge.fury.io/py/ludwig&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/ludwig.svg?sanitize=true&#34; alt=&#34;PyPI version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://join.slack.com/t/ludwig-ai/shared_invite/zt-mrxo87w6-DlX5~73T2B4v_g6jj0pJcQ&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-chat-green.svg?logo=slack&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/ludwigai&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/ludwigai/ludwig.svg?sanitize=true&#34; alt=&#34;DockerHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pepy.tech/project/ludwig&#34;&gt;&lt;img src=&#34;https://pepy.tech/badge/ludwig&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ludwig-ai/ludwig/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/ludwig_ai&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/ludwig_ai.svg?style=social&amp;amp;logo=twitter&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;üìñ What is Ludwig?&lt;/h1&gt; &#xA;&lt;p&gt;Ludwig is a &lt;strong&gt;low-code&lt;/strong&gt; framework for building &lt;strong&gt;custom&lt;/strong&gt; AI models like &lt;strong&gt;LLMs&lt;/strong&gt; and other deep neural networks.&lt;/p&gt; &#xA;&lt;p&gt;Key features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üõ† &lt;strong&gt;Build custom models with ease:&lt;/strong&gt; a declarative YAML configuration file is all you need to train a state-of-the-art LLM on your data. Support for multi-task and multi-modality learning. Comprehensive config validation detects invalid parameter combinations and prevents runtime failures.&lt;/li&gt; &#xA; &lt;li&gt;‚ö° &lt;strong&gt;Optimized for scale and efficiency:&lt;/strong&gt; automatic batch size selection, distributed training (&lt;a href=&#34;https://pytorch.org/tutorials/beginner/ddp_series_theory.html&#34;&gt;DDP&lt;/a&gt;, &lt;a href=&#34;https://github.com/microsoft/DeepSpeed&#34;&gt;DeepSpeed&lt;/a&gt;), parameter efficient fine-tuning (&lt;a href=&#34;https://github.com/huggingface/peft&#34;&gt;PEFT&lt;/a&gt;), 4-bit quantization (QLoRA), and larger-than-memory datasets.&lt;/li&gt; &#xA; &lt;li&gt;üìê &lt;strong&gt;Expert level control:&lt;/strong&gt; retain full control of your models down to the activation functions. Support for hyperparameter optimization, explainability, and rich metric visualizations.&lt;/li&gt; &#xA; &lt;li&gt;üß± &lt;strong&gt;Modular and extensible:&lt;/strong&gt; experiment with different model architectures, tasks, features, and modalities with just a few parameter changes in the config. Think building blocks for deep learning.&lt;/li&gt; &#xA; &lt;li&gt;üö¢ &lt;strong&gt;Engineered for production:&lt;/strong&gt; prebuilt &lt;a href=&#34;https://hub.docker.com/u/ludwigai&#34;&gt;Docker&lt;/a&gt; containers, native support for running with &lt;a href=&#34;https://www.ray.io/&#34;&gt;Ray&lt;/a&gt; on &lt;a href=&#34;https://github.com/ray-project/kuberay&#34;&gt;Kubernetes&lt;/a&gt;, export models to &lt;a href=&#34;https://pytorch.org/docs/stable/jit.html&#34;&gt;Torchscript&lt;/a&gt; and &lt;a href=&#34;https://developer.nvidia.com/triton-inference-server&#34;&gt;Triton&lt;/a&gt;, upload to &lt;a href=&#34;https://huggingface.co/models&#34;&gt;HuggingFace&lt;/a&gt; with one command.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Ludwig is hosted by the &lt;a href=&#34;https://lfaidata.foundation/&#34;&gt;Linux Foundation AI &amp;amp; Data&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ludwig-ai/ludwig-docs/master/docs/images/ludwig_legos_unanimated.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;üíæ Installation&lt;/h1&gt; &#xA;&lt;p&gt;Install from PyPi. Be aware that Ludwig requires Python 3.8+.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install ludwig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install with all optional dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install ludwig[full]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;üöÇ Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;Want to take a quick peak at some of the Ludwig 0.8 features? Check out this Colab Notebook üöÄ &lt;a href=&#34;https://colab.research.google.com/drive/1lB4ALmEyvcMycE3Mlnsd7I3bc0zxvk39&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For a full tutorial, check out the official &lt;a href=&#34;https://ludwig-ai.github.io/ludwig-docs/latest/getting_started/&#34;&gt;getting started guide&lt;/a&gt;, or take a look at end-to-end &lt;a href=&#34;https://ludwig-ai.github.io/ludwig-docs/latest/examples&#34;&gt;Examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Large Language Model Fine-Tuning&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/drive/1c3AO8l_H6V_x37RwQ8V7M6A-RmcBf2tG?usp=sharing&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s fine-tune a pretrained LLaMA-2-7b large language model to follow instructions like a chatbot (&#34;instruction tuning&#34;).&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/docs/hub/security-tokens&#34;&gt;HuggingFace API Token&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Access approval to &lt;a href=&#34;https://huggingface.co/meta-llama/Llama-2-7b-hf&#34;&gt;Llama2-7b-hf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GPU with at least 12 GiB of VRAM (in our tests, we used an Nvidia T4)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running&lt;/h3&gt; &#xA;&lt;p&gt;We&#39;ll use the &lt;a href=&#34;https://crfm.stanford.edu/2023/03/13/alpaca.html&#34;&gt;Stanford Alpaca&lt;/a&gt; dataset, which will be formatted as a table-like file that looks like this:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;instruction&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;input&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;output&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Give three tips for staying healthy.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.Eat a balanced diet and make sure to include...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Arrange the items given below in the order to ...&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;cake, me, eating&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;I eating cake.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Write an introductory paragraph about a famous...&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Michelle Obama&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Michelle Obama is an inspirational woman who r...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;...&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;...&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Create a YAML config file named &lt;code&gt;model.yaml&lt;/code&gt; with the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;model_type: llm&#xA;base_model: meta-llama/Llama-2-7b-hf&#xA;&#xA;quantization:&#xA;  bits: 4&#xA;&#xA;adapter:&#xA;  type: lora&#xA;&#xA;prompt:&#xA;  template: |&#xA;    Below is an instruction that describes a task, paired with an input that may provide further context.&#xA;    Write a response that appropriately completes the request.&#xA;&#xA;    ### Instruction:&#xA;    {instruction}&#xA;&#xA;    ### Input:&#xA;    {input}&#xA;&#xA;    ### Response:&#xA;&#xA;input_features:&#xA;  - name: prompt&#xA;    type: text&#xA;&#xA;output_features:&#xA;  - name: output&#xA;    type: text&#xA;&#xA;trainer:&#xA;  type: finetune&#xA;  learning_rate: 0.0001&#xA;  batch_size: 1&#xA;  gradient_accumulation_steps: 16&#xA;  epochs: 3&#xA;  learning_rate_scheduler:&#xA;    decay: cosine&#xA;    warmup_fraction: 0.01&#xA;&#xA;preprocessing:&#xA;  sample_ratio: 0.1&#xA;&#xA;backend:&#xA;  type: local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And now let&#39;s train the model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export HUGGING_FACE_HUB_TOKEN = &#34;&amp;lt;api_token&amp;gt;&#34;&#xA;&#xA;ludwig train --config model.yaml --dataset &#34;ludwig://alpaca&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supervised ML&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s build a neural network that predicts whether a given movie critic&#39;s review on &lt;a href=&#34;https://www.kaggle.com/stefanoleone992/rotten-tomatoes-movies-and-critic-reviews-dataset&#34;&gt;Rotten Tomatoes&lt;/a&gt; was positive or negative.&lt;/p&gt; &#xA;&lt;p&gt;Our dataset will be a CSV file that looks like this:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;movie_title&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;content_rating&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;genres&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;runtime&lt;/th&gt; &#xA;   &lt;th&gt;top_critic&lt;/th&gt; &#xA;   &lt;th&gt;review_content&lt;/th&gt; &#xA;   &lt;th&gt;recommended&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Deliver Us from Evil&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;R&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Action &amp;amp; Adventure, Horror&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;117.0&lt;/td&gt; &#xA;   &lt;td&gt;TRUE&lt;/td&gt; &#xA;   &lt;td&gt;Director Scott Derrickson and his co-writer, Paul Harris Boardman, deliver a routine procedural with unremarkable frights.&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Barbara&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;PG-13&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Art House &amp;amp; International, Drama&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;105.0&lt;/td&gt; &#xA;   &lt;td&gt;FALSE&lt;/td&gt; &#xA;   &lt;td&gt;Somehow, in this stirring narrative, Barbara manages to keep hold of her principles, and her humanity and courage, and battles to save a dissident teenage girl whose life the Communists are trying to destroy.&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Horrible Bosses&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;R&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Comedy&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;98.0&lt;/td&gt; &#xA;   &lt;td&gt;FALSE&lt;/td&gt; &#xA;   &lt;td&gt;These bosses cannot justify either murder or lasting comic memories, fatally compromising a farce that could have been great but ends up merely mediocre.&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;...&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;...&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;...&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;...&lt;/td&gt; &#xA;   &lt;td&gt;...&lt;/td&gt; &#xA;   &lt;td&gt;...&lt;/td&gt; &#xA;   &lt;td&gt;...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Download a sample of the dataset from &lt;a href=&#34;https://ludwig.ai/latest/data/rotten_tomatoes.csv&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://ludwig.ai/latest/data/rotten_tomatoes.csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next create a YAML config file named &lt;code&gt;model.yaml&lt;/code&gt; with the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;input_features:&#xA;  - name: genres&#xA;    type: set&#xA;    preprocessing:&#xA;      tokenizer: comma&#xA;  - name: content_rating&#xA;    type: category&#xA;  - name: top_critic&#xA;    type: binary&#xA;  - name: runtime&#xA;    type: number&#xA;  - name: review_content&#xA;    type: text&#xA;    encoder:&#xA;      type: embed&#xA;output_features:&#xA;  - name: recommended&#xA;    type: binary&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it! Now let&#39;s train the model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ludwig train --config model.yaml --dataset rotten_tomatoes.csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Happy modeling&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Try applying Ludwig to your data. &lt;a href=&#34;https://join.slack.com/t/ludwig-ai/shared_invite/zt-mrxo87w6-DlX5~73T2B4v_g6jj0pJcQ&#34;&gt;Reach out&lt;/a&gt; if you have any questions.&lt;/p&gt; &#xA;&lt;h1&gt;‚ùì Why you should use Ludwig&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Minimal machine learning boilerplate&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Ludwig takes care of the engineering complexity of machine learning out of the box, enabling research scientists to focus on building models at the highest level of abstraction. Data preprocessing, hyperparameter optimization, device management, and distributed training for &lt;code&gt;torch.nn.Module&lt;/code&gt; models come completely free.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Easily build your benchmarks&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Creating a state-of-the-art baseline and comparing it with a new model is a simple config change.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Easily apply new architectures to multiple problems and datasets&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Apply new models across the extensive set of tasks and datasets that Ludwig supports. Ludwig includes a &lt;a href=&#34;https://arxiv.org/abs/2111.04260&#34;&gt;full benchmarking toolkit&lt;/a&gt; accessible to any user, for running experiments with multiple models across multiple datasets with just a simple configuration.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Highly configurable data preprocessing, modeling, and metrics&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Any and all aspects of the model architecture, training loop, hyperparameter search, and backend infrastructure can be modified as additional fields in the declarative configuration to customize the pipeline to meet your requirements. For details on what can be configured, check out &lt;a href=&#34;https://ludwig-ai.github.io/ludwig-docs/latest/configuration/&#34;&gt;Ludwig Configuration&lt;/a&gt; docs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Multi-modal, multi-task learning out-of-the-box&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Mix and match tabular data, text, images, and even audio into complex model configurations without writing code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Rich model exporting and tracking&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Automatically track all trials and metrics with tools like Tensorboard, Comet ML, Weights &amp;amp; Biases, MLFlow, and Aim Stack.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Automatically scale training to multi-GPU, multi-node clusters&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Go from training on your local machine to the cloud without code changes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Low-code interface for state-of-the-art models, including pre-trained Huggingface Transformers&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Ludwig also natively integrates with pre-trained models, such as the ones available in &lt;a href=&#34;https://huggingface.co/docs/transformers/index&#34;&gt;Huggingface Transformers&lt;/a&gt;. Users can choose from a vast collection of state-of-the-art pre-trained PyTorch models to use without needing to write any code at all. For example, training a BERT-based sentiment analysis model with Ludwig is as simple as:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ludwig train --dataset sst5 --config_str &#34;{input_features: [{name: sentence, type: text, encoder: bert}], output_features: [{name: label, type: category}]}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Low-code interface for AutoML&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://ludwig-ai.github.io/ludwig-docs/latest/user_guide/automl/&#34;&gt;Ludwig AutoML&lt;/a&gt; allows users to obtain trained models by providing just a dataset, the target column, and a time budget.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;auto_train_results = ludwig.automl.auto_train(dataset=my_dataset_df, target=target_column_name, time_limit_s=7200)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Easy productionisation&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Ludwig makes it easy to serve deep learning models, including on GPUs. Launch a REST API for your trained Ludwig model.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ludwig serve --model_path=/path/to/model&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Ludwig supports exporting models to efficient Torchscript bundles.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ludwig export_torchscript -‚Äìmodel_path=/path/to/model&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;üìö Tutorials&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ludwig-ai.github.io/ludwig-docs/latest/examples/text_classification&#34;&gt;Text Classification&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ludwig-ai.github.io/ludwig-docs/latest/examples/adult_census_income&#34;&gt;Tabular Data Classification&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ludwig-ai.github.io/ludwig-docs/latest/examples/mnist&#34;&gt;Image Classification&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ludwig-ai.github.io/ludwig-docs/latest/examples/multimodal_classification&#34;&gt;Multimodal Classification&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;üî¨ Example Use Cases&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ludwig-ai.github.io/ludwig-docs/latest/examples/ner_tagging&#34;&gt;Named Entity Recognition Tagging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ludwig-ai.github.io/ludwig-docs/latest/examples/nlu&#34;&gt;Natural Language Understanding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ludwig-ai.github.io/ludwig-docs/latest/examples/machine_translation&#34;&gt;Machine Translation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ludwig-ai.github.io/ludwig-docs/latest/examples/seq2seq&#34;&gt;Chit-Chat Dialogue Modeling through seq2seq&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ludwig-ai.github.io/ludwig-docs/latest/examples/sentiment_analysis&#34;&gt;Sentiment Analysis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ludwig-ai.github.io/ludwig-docs/latest/examples/oneshot&#34;&gt;One-shot Learning with Siamese Networks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ludwig-ai.github.io/ludwig-docs/latest/examples/visual_qa&#34;&gt;Visual Question Answering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ludwig-ai.github.io/ludwig-docs/latest/examples/speech_recognition&#34;&gt;Spoken Digit Speech Recognition&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ludwig-ai.github.io/ludwig-docs/latest/examples/speaker_verification&#34;&gt;Speaker Verification&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ludwig-ai.github.io/ludwig-docs/latest/examples/titanic&#34;&gt;Binary Classification (Titanic)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ludwig-ai.github.io/ludwig-docs/latest/examples/forecasting&#34;&gt;Timeseries forecasting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ludwig-ai.github.io/ludwig-docs/latest/examples/weather&#34;&gt;Timeseries forecasting (Weather)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ludwig-ai.github.io/ludwig-docs/latest/examples/movie_ratings&#34;&gt;Movie rating prediction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ludwig-ai.github.io/ludwig-docs/latest/examples/multi_label&#34;&gt;Multi-label classification&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ludwig-ai.github.io/ludwig-docs/latest/examples/multi_task&#34;&gt;Multi-Task Learning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ludwig-ai.github.io/ludwig-docs/latest/examples/fuel_efficiency&#34;&gt;Simple Regression: Fuel Efficiency Prediction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ludwig-ai.github.io/ludwig-docs/latest/examples/fraud&#34;&gt;Fraud Detection&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;üí° More Information&lt;/h1&gt; &#xA;&lt;p&gt;Read our publications on &lt;a href=&#34;https://arxiv.org/pdf/1909.07930.pdf&#34;&gt;Ludwig&lt;/a&gt;, &lt;a href=&#34;https://arxiv.org/pdf/2107.08148.pdf&#34;&gt;declarative ML&lt;/a&gt;, and &lt;a href=&#34;https://openreview.net/pdf?id=hwjnu6qW7E4&#34;&gt;Ludwig‚Äôs SoTA benchmarks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Learn more about &lt;a href=&#34;https://ludwig-ai.github.io/ludwig-docs/latest/user_guide/how_ludwig_works/&#34;&gt;how Ludwig works&lt;/a&gt;, &lt;a href=&#34;https://ludwig-ai.github.io/ludwig-docs/latest/getting_started/&#34;&gt;how to get started&lt;/a&gt;, and work through more &lt;a href=&#34;https://ludwig-ai.github.io/ludwig-docs/latest/examples&#34;&gt;examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are interested in contributing, have questions, comments, or thoughts to share, or if you just want to be in the know, please consider &lt;a href=&#34;https://join.slack.com/t/ludwig-ai/shared_invite/zt-mrxo87w6-DlX5~73T2B4v_g6jj0pJcQ&#34;&gt;joining the Ludwig Slack&lt;/a&gt; and follow us on &lt;a href=&#34;https://twitter.com/ludwig_ai&#34;&gt;Twitter&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h1&gt;ü§ù Join the community to build Ludwig with us&lt;/h1&gt; &#xA;&lt;p&gt;Ludwig is an actively managed open-source project that relies on contributions from folks just like you. Consider joining the active group of Ludwig contributors to make Ludwig an even more accessible and feature rich framework for everyone to use!&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/ludwig-ai/ludwig/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=ludwig-ai/ludwig&#34;&gt; &lt;/a&gt;&#xA;&lt;br&gt; &#xA;&lt;h1&gt;üëã Getting Involved&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://join.slack.com/t/ludwig-ai/shared_invite/zt-mrxo87w6-DlX5~73T2B4v_g6jj0pJcQ&#34;&gt;Slack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/ludwig_ai&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/ludwig-ai&#34;&gt;Medium&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ludwig-ai/ludwig/issues&#34;&gt;GitHub Issues&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Pythagora-io/gpt-pilot</title>
    <updated>2023-09-03T01:58:31Z</updated>
    <id>tag:github.com,2023-09-03:/Pythagora-io/gpt-pilot</id>
    <link href="https://github.com/Pythagora-io/gpt-pilot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PoC for a scalable dev tool that writes entire apps from scratch while the developer oversees the implementation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üßë‚Äç‚úàÔ∏è GPT PILOT&lt;/h1&gt; &#xA;&lt;h3&gt;GPT Pilot codes the entire app as you oversee the code being written&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;This is a research project to see how can GPT-4 be utilized to generate fully working, production-ready, apps. &lt;strong&gt;The main idea is that AI can write most of the code for an app (maybe 95%) but for the rest 5%, a developer is and will be needed until we get full AGI&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve broken down the idea behind GPT Pilot and how it works in the following blog posts:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://blog.pythagora.ai/2023/08/23/430/&#34;&gt;[Part 1/3] High-level concepts + GPT Pilot workflow until the coding part&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;[Part 2/3] GPT Pilot coding workflow (COMING UP)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;[Part 3/3] Other important concepts and future plans (COMING UP)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Pythagora-io/gpt-pilot/main/#-examples&#34;&gt;üëâ Examples of apps written by GPT Pilot üëà&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Pythagora-io/gpt-pilot/assets/10895136/0495631b-511e-451b-93d5-8a42acf22d3d&#34;&gt;https://github.com/Pythagora-io/gpt-pilot/assets/10895136/0495631b-511e-451b-93d5-8a42acf22d3d&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Main pillars of GPT Pilot:&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;For AI to create a fully working app, &lt;strong&gt;a developer needs to be involved&lt;/strong&gt; in the process of app creation. They need to be able to change the code at any moment and GPT Pilot needs to continue working with those changes (eg. add an API key or fix an issue if an AI gets stuck) &lt;br&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The app needs to be written step by step as a developer would write it&lt;/strong&gt; - Let&#39;s say you want to create a simple app and you know everything you need to code and have the entire architecture in your head. Even then, you won&#39;t code it out entirely, then run it for the first time and debug all the issues at once. Rather, you will implement something simple, like add routes, run it, see how it works, and then move on to the next task. This way, you can debug issues as they arise. The same should be in the case when AI codes. It will make mistakes for sure so in order for it to have an easier time debugging issues and for the developer to understand what is happening, the AI shouldn&#39;t just spit out the entire codebase at once. Rather, the app should be developed step by step just like a developer would code it - eg. setup routes, add database connection, etc. &lt;br&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The approach needs to be scalable&lt;/strong&gt; so that AI can create a production ready app &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Context rewinding&lt;/strong&gt; - for solving each development task, the context size of the first message to the LLM has to be relatively the same. For example, the context size of the first LLM message while implementing development task #5 has to be more or less the same as the first message while developing task #50. Because of this, the conversation needs to be rewound to the first message upon each task. &lt;a href=&#34;https://blogpythagora.files.wordpress.com/2023/08/pythagora-product-development-frame-3-1.jpg?w=1714&#34;&gt;See the diagram here&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Recursive conversations&lt;/strong&gt; are LLM conversations that are set up in a way that they can be used ‚Äúrecursively‚Äù. For example, if GPT Pilot detects an error, it needs to debug it but let‚Äôs say that, during the debugging process, another error happens. Then, GPT Pilot needs to stop debugging the first issue, fix the second one, and then get back to fixing the first issue. This is a very important concept that, I believe, needs to work to make AI build large and scalable apps by itself. It works by rewinding the context and explaining each error in the recursion separately. Once the deepest level error is fixed, we move up in the recursion and continue fixing that error. We do this until the entire recursion is completed.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;TDD (Test Driven Development)&lt;/strong&gt; - for GPT Pilot to be able to scale the codebase, it will need to be able to create new code without breaking previously written code. There is no better way to do this than working with TDD methodology. For each code that GPT Pilot writes, it needs to write tests that check if the code works as intended so that whenever new changes are made, all previous tests can be run.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The idea is that AI won&#39;t be able to (at least in the near future) create apps from scratch without the developer being involved. That&#39;s why we created an interactive tool that generates code but also requires the developer to check each step so that they can understand what&#39;s going on and so that the AI can have a better overview of the entire codebase.&lt;/p&gt; &#xA;&lt;p&gt;Obviously, it still can&#39;t create any production-ready app but the general concept of how this could work is there.&lt;/p&gt; &#xA;&lt;h1&gt;üîå Requirements&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;DB is needed for multiple reasons like continuing app development if you had to stop at any point or app crashed, going back to specific step so you can change some later steps in development, easier debugging, for future we will add functionality to update project (change some things in existing project or add new features to the project and so on)...&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;üö¶How to start using gpt-pilot?&lt;/h1&gt; &#xA;&lt;p&gt;After you have Python and PostgreSQL installed, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone https://github.com/Pythagora-io/gpt-pilot.git&lt;/code&gt; (clone the repo)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd gpt-pilot&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python -m venv pilot-env&lt;/code&gt; (create a virtual environment)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;source pilot-env/bin/activate&lt;/code&gt; (activate the virtual environment)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pip install -r requirements.txt&lt;/code&gt; (install the dependencies)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd pilot&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mv .env.example .env&lt;/code&gt; (create the .env file)&lt;/li&gt; &#xA; &lt;li&gt;Add your OpenAI API key and the PostgreSQL database info to the &lt;code&gt;.env&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python db_init.py&lt;/code&gt; (initialize the database)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python main.py&lt;/code&gt; (start GPT Pilot)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;After, this, you can just follow the instructions in the terminal.&lt;/p&gt; &#xA;&lt;p&gt;All generated code will be stored in the folder &lt;code&gt;workspace&lt;/code&gt; inside the folder named after the app name you enter upon starting the pilot.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT: To run GPT Pilot, you need to have PostgreSQL set up on your machine&lt;/strong&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h1&gt;üßë‚ÄçüíªÔ∏è Other arguments&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;continue working on an existing app&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python main.py app_id=&amp;lt;ID_OF_THE_APP&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;continue working on an existing app from a specific step&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python main.py app_id=&amp;lt;ID_OF_THE_APP&amp;gt; step=&amp;lt;STEP_FROM_CONST_COMMON&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;continue working on an existing app from a specific development step&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python main.py app_id=&amp;lt;ID_OF_THE_APP&amp;gt; skip_until_dev_step=&amp;lt;DEV_STEP&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is basically the same as &lt;code&gt;step&lt;/code&gt; but during the actual development process. If you want to play around with gpt-pilot, this is likely the flag you will often use &lt;br&gt;&lt;/p&gt; &#xA;&lt;h1&gt;üîé Examples&lt;/h1&gt; &#xA;&lt;p&gt;Here are a couple of example apps GPT Pilot created by itself:&lt;/p&gt; &#xA;&lt;h3&gt;Real-time chat app&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üí¨ Prompt: &lt;code&gt;A simple chat app with real time communication&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚ñ∂Ô∏è &lt;a href=&#34;https://youtu.be/bUj9DbMRYhA&#34;&gt;Video of the app creation process&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üíªÔ∏è &lt;a href=&#34;https://github.com/Pythagora-io/gpt-pilot-chat-app-demo&#34;&gt;GitHub repo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;img src=&#34;https://github.com/Pythagora-io/gpt-pilot/assets/10895136/85bc705c-be88-4ca1-9a3b-033700b97a22&#34; alt=&#34;gpt-pilot demo chat app&#34; width=&#34;500px&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Markdown editor&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üí¨ Prompt: &lt;code&gt;Build a simple markdown editor using HTML, CSS, and JavaScript. Allow users to input markdown text and display the formatted output in real-time.&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚ñ∂Ô∏è &lt;a href=&#34;https://youtu.be/uZeA1iX9dgg&#34;&gt;Video of the app creation process&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üíªÔ∏è &lt;a href=&#34;https://github.com/Pythagora-io/gpt-pilot-demo-markdown-editor.git&#34;&gt;GitHub repo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;img src=&#34;https://github.com/Pythagora-io/gpt-pilot/assets/10895136/dbe1ccc3-b126-4df0-bddb-a524d6a386a8&#34; alt=&#34;gpt-pilot demo markdown editor&#34; width=&#34;500px&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Timer app&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üí¨ Prompt: &lt;code&gt;Create a simple timer app using HTML, CSS, and JavaScript that allows users to set a countdown timer and receive an alert when the time is up.&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚ñ∂Ô∏è &lt;a href=&#34;https://youtu.be/CMN3W18zfiE&#34;&gt;Video of the app creation process&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üíªÔ∏è &lt;a href=&#34;https://github.com/Pythagora-io/gpt-pilot-timer-app-demo&#34;&gt;GitHub repo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;img src=&#34;https://github.com/Pythagora-io/gpt-pilot/assets/10895136/93bed40b-b769-4c8b-b16d-b80fb6fc73e0&#34; alt=&#34;gpt-pilot demo markdown editor&#34; width=&#34;500px&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;üèó How GPT Pilot works?&lt;/h1&gt; &#xA;&lt;p&gt;Here are the steps GPT Pilot takes to create an app:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Pythagora-io/gpt-pilot/assets/10895136/d89ba1d4-1208-4b7f-b3d4-76e3ccea584e&#34; alt=&#34;GPT Pilot workflow&#34;&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You enter the app name and the description&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Product Owner agent&lt;/strong&gt; asks a couple of questions to understand the requirements better&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Product Owner agent&lt;/strong&gt; writes user stories and asks you if they are all correct (this helps it create code later on)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Architect agent&lt;/strong&gt; writes up technologies that will be used for the app&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DevOps agent&lt;/strong&gt; checks if all technologies are installed on the machine and installs them if they are not&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tech Lead agent&lt;/strong&gt; writes up development tasks that Developer will need to implement. This is an important part because, for each step, Tech Lead needs to specify how the user (real world developer) can review if the task is done (eg. open localhost:3000 and do something)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Developer agent&lt;/strong&gt; takes each task and writes up what needs to be done to implement it. The description is in human readable form.&lt;/li&gt; &#xA; &lt;li&gt;Finally, &lt;strong&gt;Code Monkey agent&lt;/strong&gt; takes the Developer&#39;s description and the currently implement file and implements the changes into it. We realized this works much better than giving it to Developer right away to implement changes.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Pythagora-io/gpt-pilot/assets/10895136/54a8ec24-a2ea-43a6-a494-03139d4e43f5&#34; alt=&#34;GPT Pilot Coding Workflow&#34;&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;üï¥How&#39;s GPT Pilot different from &lt;em&gt;Smol developer&lt;/em&gt; and &lt;em&gt;GPT engineer&lt;/em&gt;?&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Human developer is involved throughout the process&lt;/strong&gt; - I don&#39;t think that AI can (at least in the near future) create apps without a developer being involved. Also, I think it&#39;s hard for a developer to get into a big codebase and try debugging it. That&#39;s why my idea was for AI to develop the app step by step where each step is reviewed by the developer. If you want to change some code yourself, you can just change it and GPT Pilot will continue developing on top of those changes. &lt;br&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Continuous development loops&lt;/strong&gt; - The goal behind this project was to see how we can create recursive conversations with GPT so that it can debug any issue and implement any feature. For example, after the app is generated, you can always add more instructions about what you want to implement or debug. I wanted to see if this can be so flexible that, regardless of the app&#39;s size, it can just iterate and build bigger and bigger apps &lt;br&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Auto debugging&lt;/strong&gt; - when it detects an error, it debugs it by itself. I still haven&#39;t implemented writing automated tests which should make this fully autonomous but for now, you can input the error that&#39;s happening (eg. within a UI) and GPT Pilot will debug it from there. The plan is to make it write automated tests in Cypress as well so that it can test it by itself and debug without the developer&#39;s explanation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;üçª Contributing&lt;/h1&gt; &#xA;&lt;p&gt;If you are interested in contributing to GPT Pilot, I would be more than happy to have you on board but also help you get started. Feel free to ping &lt;a href=&#34;mailto:zvonimir@pythagora.ai&#34;&gt;zvonimir@pythagora.ai&lt;/a&gt; and I&#39;ll help you get started.&lt;/p&gt; &#xA;&lt;h2&gt;üî¨Ô∏è Research&lt;/h2&gt; &#xA;&lt;p&gt;Since this is a research project, there are many areas that need to be researched on both practical and theoretical levels. We&#39;re happy to hear how can the entire GPT Pilot concept be improved. For example, maybe it would work better if we structured functional requirements differently or maybe technical requirements need to be specified in a different way.&lt;/p&gt; &#xA;&lt;h2&gt;üñ• Development&lt;/h2&gt; &#xA;&lt;p&gt;Other than the research, GPT Pilot needs to be debugged to work in different scenarios. For example, we realized that the quality of the code generated is very sensitive to the size of the development task. When the task is too broad, the code has too many bugs that are hard to fix but when the development task is too narrow, GPT also seems to struggle in getting the task implemented into the existing code.&lt;/p&gt; &#xA;&lt;h1&gt;üîó Connect with us&lt;/h1&gt; &#xA;&lt;p&gt;üåü As an open source tool, it would mean the world to us if you starred the GPT-pilot repo üåü&lt;/p&gt; &#xA;&lt;p&gt;üí¨ Join &lt;a href=&#34;https://discord.gg/FWnRZdCb&#34;&gt;the Discord server&lt;/a&gt; to get in touch. &lt;br&gt;&lt;br&gt; &lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;</summary>
  </entry>
</feed>