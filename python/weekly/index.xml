<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-03T01:45:58Z</updated>
  <subtitle>Weekly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kijai/ComfyUI-WanVideoWrapper</title>
    <updated>2025-08-03T01:45:58Z</updated>
    <id>tag:github.com,2025-08-03:/kijai/ComfyUI-WanVideoWrapper</id>
    <link href="https://github.com/kijai/ComfyUI-WanVideoWrapper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ComfyUI wrapper nodes for &lt;a href=&#34;https://github.com/Wan-Video/Wan2.1&#34;&gt;WanVideo&lt;/a&gt; and related models.&lt;/h1&gt; &#xA;&lt;h1&gt;WORK IN PROGRESS (perpetually)&lt;/h1&gt; &#xA;&lt;h1&gt;Why should I use custom nodes when WanVideo works natively?&lt;/h1&gt; &#xA;&lt;p&gt;Short answer: Unless it&#39;s a model/feature not available yet on native, you shouldn&#39;t.&lt;/p&gt; &#xA;&lt;p&gt;Long answer: Due to the complexity of ComfyUI core code, and my lack of coding experience, in many cases it&#39;s far easier and faster to implement new models and features to a standalone wrapper, so this is a way to test things relatively quickly. I consider this my personal sandbox (which is obviously open for everyone) to play with without having to worry about compability issues etc, but as such this code is always work in progress and prone to have issues. Also not all new models end up being worth the trouble to implement in core Comfy, though I&#39;ve also made some patcher nodes to allow using them in native workflows, such as the &lt;a href=&#34;https://huggingface.co/bytedance-research/ATI&#34;&gt;ATI&lt;/a&gt; node available in this wrapper. This is also the end goal, idea isn&#39;t to compete or even offer alternatives to everything available in native workflows. All that said (this is clearly not a sales pitch) I do appreciate everyone using these nodes to explore new releases and possibilities with WanVideo.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repo into &lt;code&gt;custom_nodes&lt;/code&gt; folder.&lt;/li&gt; &#xA; &lt;li&gt;Install dependencies: &lt;code&gt;pip install -r requirements.txt&lt;/code&gt; or if you use the portable install, run this in ComfyUI_windows_portable -folder:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;python_embeded\python.exe -m pip install -r ComfyUI\custom_nodes\ComfyUI-WanVideoWrapper\requirements.txt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Models&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://huggingface.co/Kijai/WanVideo_comfy/tree/main&#34;&gt;https://huggingface.co/Kijai/WanVideo_comfy/tree/main&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;fp8 scaled models (personal recommendation):&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://huggingface.co/Kijai/WanVideo_comfy_fp8_scaled&#34;&gt;https://huggingface.co/Kijai/WanVideo_comfy_fp8_scaled&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Text encoders to &lt;code&gt;ComfyUI/models/text_encoders&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Clip vision to &lt;code&gt;ComfyUI/models/clip_vision&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Transformer (main video model) to &lt;code&gt;ComfyUI/models/diffusion_models&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Vae to &lt;code&gt;ComfyUI/models/vae&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also use the native ComfyUI text encoding and clip vision loader with the wrapper instead of the original models:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/6a2fd9a5-8163-4c93-b362-92ef34dbd3a4&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;GGUF models can now be loaded in the main model loader as well.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Supported extra models:&lt;/p&gt; &#xA;&lt;p&gt;SkyReels: &lt;a href=&#34;https://huggingface.co/collections/Skywork/skyreels-v2-6801b1b93df627d441d0d0d9&#34;&gt;https://huggingface.co/collections/Skywork/skyreels-v2-6801b1b93df627d441d0d0d9&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;WanVideoFun: &lt;a href=&#34;https://huggingface.co/collections/alibaba-pai/wan21-fun-v11-680f514c89fe7b4df9d44f17&#34;&gt;https://huggingface.co/collections/alibaba-pai/wan21-fun-v11-680f514c89fe7b4df9d44f17&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;ReCamMaster: &lt;a href=&#34;https://github.com/KwaiVGI/ReCamMaster&#34;&gt;https://github.com/KwaiVGI/ReCamMaster&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;VACE: &lt;a href=&#34;https://github.com/ali-vilab/VACE&#34;&gt;https://github.com/ali-vilab/VACE&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Phantom: &lt;a href=&#34;https://huggingface.co/bytedance-research/Phantom&#34;&gt;https://huggingface.co/bytedance-research/Phantom&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;ATI: &lt;a href=&#34;https://huggingface.co/bytedance-research/ATI&#34;&gt;https://huggingface.co/bytedance-research/ATI&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Uni3C: &lt;a href=&#34;https://github.com/alibaba-damo-academy/Uni3C&#34;&gt;https://github.com/alibaba-damo-academy/Uni3C&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MiniMaxRemover: &lt;a href=&#34;https://huggingface.co/zibojia/minimax-remover&#34;&gt;https://huggingface.co/zibojia/minimax-remover&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MAGREF: &lt;a href=&#34;https://huggingface.co/MAGREF-Video/MAGREF&#34;&gt;https://huggingface.co/MAGREF-Video/MAGREF&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;FantasyTalking: &lt;a href=&#34;https://github.com/Fantasy-AMAP/fantasy-talking&#34;&gt;https://github.com/Fantasy-AMAP/fantasy-talking&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MultiTalk: &lt;a href=&#34;https://github.com/MeiGen-AI/MultiTalk&#34;&gt;https://github.com/MeiGen-AI/MultiTalk&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;EchoShot: &lt;a href=&#34;https://github.com/D2I-ai/EchoShot&#34;&gt;https://github.com/D2I-ai/EchoShot&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Examples:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/KwaiVGI/ReCamMaster&#34;&gt;ReCamMaster&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/c58a12c2-13ba-4af8-8041-e283dbef197e&#34;&gt;https://github.com/user-attachments/assets/c58a12c2-13ba-4af8-8041-e283dbef197e&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;TeaCache (with the old temporary WIP naive version, I2V):&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note that with the new version the threshold values should be 10x higher&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Range of 0.25-0.30 seems good when using the coefficients, start step can be 0, with more aggressive threshold values it may make sense to start later to avoid any potential step skips early on, that generally ruin the motion.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/504a9a50-3337-43d2-97b8-8e1661f29f46&#34;&gt;https://github.com/user-attachments/assets/504a9a50-3337-43d2-97b8-8e1661f29f46&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Context window test:&lt;/p&gt; &#xA;&lt;p&gt;1025 frames using window size of 81 frames, with 16 overlap. With the 1.3B T2V model this used under 5GB VRAM and took 10 minutes to gen on a 5090:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/89b393af-cf1b-49ae-aa29-23e57f65911e&#34;&gt;https://github.com/user-attachments/assets/89b393af-cf1b-49ae-aa29-23e57f65911e&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;This very first test was 512x512x81&lt;/p&gt; &#xA;&lt;p&gt;~16GB used with 20/40 blocks offloaded&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/fa6d0a4f-4a4d-4de5-84a4-877cc37b715f&#34;&gt;https://github.com/user-attachments/assets/fa6d0a4f-4a4d-4de5-84a4-877cc37b715f&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Vid2vid example:&lt;/p&gt; &#xA;&lt;p&gt;with 14B T2V model:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/ef228b8a-a13a-4327-8a1b-1eb343cf00d8&#34;&gt;https://github.com/user-attachments/assets/ef228b8a-a13a-4327-8a1b-1eb343cf00d8&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;with 1.3B T2V model&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/4f35ba84-da7a-4d5b-97ee-9641296f391e&#34;&gt;https://github.com/user-attachments/assets/4f35ba84-da7a-4d5b-97ee-9641296f391e&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ml-explore/mlx-lm</title>
    <updated>2025-08-03T01:45:58Z</updated>
    <id>tag:github.com,2025-08-03:/ml-explore/mlx-lm</id>
    <link href="https://github.com/ml-explore/mlx-lm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Run LLMs with MLX&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;MLX LM&lt;/h2&gt; &#xA;&lt;p&gt;MLX LM is a Python package for generating text and fine-tuning large language models on Apple silicon with MLX.&lt;/p&gt; &#xA;&lt;p&gt;Some key features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Integration with the Hugging Face Hub to easily use thousands of LLMs with a single command.&lt;/li&gt; &#xA; &lt;li&gt;Support for quantizing and uploading models to the Hugging Face Hub.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ml-explore/mlx-lm/raw/main/mlx_lm/LORA.md&#34;&gt;Low-rank and full model fine-tuning&lt;/a&gt; with support for quantized models.&lt;/li&gt; &#xA; &lt;li&gt;Distributed inference and fine-tuning with &lt;code&gt;mx.distributed&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The easiest way to get started is to install the &lt;code&gt;mlx-lm&lt;/code&gt; package:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;With &lt;code&gt;pip&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip install mlx-lm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;With &lt;code&gt;conda&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;conda install -c conda-forge mlx-lm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Quick Start&lt;/h3&gt; &#xA;&lt;p&gt;To generate text with an LLM use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mlx_lm.generate --prompt &#34;How tall is Mt Everest?&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To chat with an LLM use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mlx_lm.chat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will give you a chat REPL that you can use to interact with the LLM. The chat context is preserved during the lifetime of the REPL.&lt;/p&gt; &#xA;&lt;p&gt;Commands in &lt;code&gt;mlx-lm&lt;/code&gt; typically take command line options which let you specify the model, sampling parameters, and more. Use &lt;code&gt;-h&lt;/code&gt; to see a list of available options for a command, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mlx_lm.generate -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Python API&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;mlx-lm&lt;/code&gt; as a module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from mlx_lm import load, generate&#xA;&#xA;model, tokenizer = load(&#34;mlx-community/Mistral-7B-Instruct-v0.3-4bit&#34;)&#xA;&#xA;prompt = &#34;Write a story about Einstein&#34;&#xA;&#xA;messages = [{&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: prompt}]&#xA;prompt = tokenizer.apply_chat_template(&#xA;    messages, add_generation_prompt=True&#xA;)&#xA;&#xA;text = generate(model, tokenizer, prompt=prompt, verbose=True)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see a description of all the arguments you can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; help(generate)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/ml-explore/mlx-lm/tree/main/mlx_lm/examples/generate_response.py&#34;&gt;generation example&lt;/a&gt; to see how to use the API in more detail.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;mlx-lm&lt;/code&gt; package also comes with functionality to quantize and optionally upload models to the Hugging Face Hub.&lt;/p&gt; &#xA;&lt;p&gt;You can convert models using the Python API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from mlx_lm import convert&#xA;&#xA;repo = &#34;mistralai/Mistral-7B-Instruct-v0.3&#34;&#xA;upload_repo = &#34;mlx-community/My-Mistral-7B-Instruct-v0.3-4bit&#34;&#xA;&#xA;convert(repo, quantize=True, upload_repo=upload_repo)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will generate a 4-bit quantized Mistral 7B and upload it to the repo &lt;code&gt;mlx-community/My-Mistral-7B-Instruct-v0.3-4bit&lt;/code&gt;. It will also save the converted model in the path &lt;code&gt;mlx_model&lt;/code&gt; by default.&lt;/p&gt; &#xA;&lt;p&gt;To see a description of all the arguments you can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; help(convert)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Streaming&lt;/h4&gt; &#xA;&lt;p&gt;For streaming generation, use the &lt;code&gt;stream_generate&lt;/code&gt; function. This yields a generation response object.&lt;/p&gt; &#xA;&lt;p&gt;For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from mlx_lm import load, stream_generate&#xA;&#xA;repo = &#34;mlx-community/Mistral-7B-Instruct-v0.3-4bit&#34;&#xA;model, tokenizer = load(repo)&#xA;&#xA;prompt = &#34;Write a story about Einstein&#34;&#xA;&#xA;messages = [{&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: prompt}]&#xA;prompt = tokenizer.apply_chat_template(&#xA;    messages, add_generation_prompt=True&#xA;)&#xA;&#xA;for response in stream_generate(model, tokenizer, prompt, max_tokens=512):&#xA;    print(response.text, end=&#34;&#34;, flush=True)&#xA;print()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Sampling&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;generate&lt;/code&gt; and &lt;code&gt;stream_generate&lt;/code&gt; functions accept &lt;code&gt;sampler&lt;/code&gt; and &lt;code&gt;logits_processors&lt;/code&gt; keyword arguments. A sampler is any callable which accepts a possibly batched logits array and returns an array of sampled tokens. The &lt;code&gt;logits_processors&lt;/code&gt; must be a list of callables which take the token history and current logits as input and return the processed logits. The logits processors are applied in order.&lt;/p&gt; &#xA;&lt;p&gt;Some standard sampling functions and logits processors are provided in &lt;code&gt;mlx_lm.sample_utils&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Command Line&lt;/h3&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;mlx-lm&lt;/code&gt; from the command line with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mlx_lm.generate --model mistralai/Mistral-7B-Instruct-v0.3 --prompt &#34;hello&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will download a Mistral 7B model from the Hugging Face Hub and generate text using the given prompt.&lt;/p&gt; &#xA;&lt;p&gt;For a full list of options run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mlx_lm.generate --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To quantize a model from the command line run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mlx_lm.convert --hf-path mistralai/Mistral-7B-Instruct-v0.3 -q&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more options run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mlx_lm.convert --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can upload new models to Hugging Face by specifying &lt;code&gt;--upload-repo&lt;/code&gt; to &lt;code&gt;convert&lt;/code&gt;. For example, to upload a quantized Mistral-7B model to the &lt;a href=&#34;https://huggingface.co/mlx-community&#34;&gt;MLX Hugging Face community&lt;/a&gt; you can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mlx_lm.convert \&#xA;    --hf-path mistralai/Mistral-7B-Instruct-v0.3 \&#xA;    -q \&#xA;    --upload-repo mlx-community/my-4bit-mistral&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Models can also be converted and quantized directly in the &lt;a href=&#34;https://huggingface.co/spaces/mlx-community/mlx-my-repo&#34;&gt;mlx-my-repo&lt;/a&gt; Hugging Face Space.&lt;/p&gt; &#xA;&lt;h3&gt;Long Prompts and Generations&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;mlx-lm&lt;/code&gt; has some tools to scale efficiently to long prompts and generations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A rotating fixed-size key-value cache.&lt;/li&gt; &#xA; &lt;li&gt;Prompt caching&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To use the rotating key-value cache pass the argument &lt;code&gt;--max-kv-size n&lt;/code&gt; where &lt;code&gt;n&lt;/code&gt; can be any integer. Smaller values like &lt;code&gt;512&lt;/code&gt; will use very little RAM but result in worse quality. Larger values like &lt;code&gt;4096&lt;/code&gt; or higher will use more RAM but have better quality.&lt;/p&gt; &#xA;&lt;p&gt;Caching prompts can substantially speedup reusing the same long context with different queries. To cache a prompt use &lt;code&gt;mlx_lm.cache_prompt&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat prompt.txt | mlx_lm.cache_prompt \&#xA;  --model mistralai/Mistral-7B-Instruct-v0.3 \&#xA;  --prompt - \&#xA;  --prompt-cache-file mistral_prompt.safetensors&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then use the cached prompt with &lt;code&gt;mlx_lm.generate&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mlx_lm.generate \&#xA;    --prompt-cache-file mistral_prompt.safetensors \&#xA;    --prompt &#34;\nSummarize the above text.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The cached prompt is treated as a prefix to the supplied prompt. Also notice when using a cached prompt, the model to use is read from the cache and need not be supplied explicitly.&lt;/p&gt; &#xA;&lt;p&gt;Prompt caching can also be used in the Python API in order to avoid recomputing the prompt. This is useful in multi-turn dialogues or across requests that use the same context. See the &lt;a href=&#34;https://github.com/ml-explore/mlx-lm/raw/main/mlx_lm/examples/chat.py&#34;&gt;example&lt;/a&gt; for more usage details.&lt;/p&gt; &#xA;&lt;h3&gt;Supported Models&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;mlx-lm&lt;/code&gt; supports thousands of Hugging Face format LLMs. If the model you want to run is not supported, file an &lt;a href=&#34;https://github.com/ml-explore/mlx-lm/issues/new&#34;&gt;issue&lt;/a&gt; or better yet, submit a pull request.&lt;/p&gt; &#xA;&lt;p&gt;Here are a few examples of Hugging Face models that work with this example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/mistralai/Mistral-7B-v0.1&#34;&gt;mistralai/Mistral-7B-v0.1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/meta-llama/Llama-2-7b-hf&#34;&gt;meta-llama/Llama-2-7b-hf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/deepseek-ai/deepseek-coder-6.7b-instruct&#34;&gt;deepseek-ai/deepseek-coder-6.7b-instruct&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/01-ai/Yi-6B-Chat&#34;&gt;01-ai/Yi-6B-Chat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/microsoft/phi-2&#34;&gt;microsoft/phi-2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/mistralai/Mixtral-8x7B-Instruct-v0.1&#34;&gt;mistralai/Mixtral-8x7B-Instruct-v0.1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/Qwen/Qwen-7B&#34;&gt;Qwen/Qwen-7B&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/pfnet/plamo-13b&#34;&gt;pfnet/plamo-13b&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/pfnet/plamo-13b-instruct&#34;&gt;pfnet/plamo-13b-instruct&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/stabilityai/stablelm-2-zephyr-1_6b&#34;&gt;stabilityai/stablelm-2-zephyr-1_6b&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/internlm/internlm2-7b&#34;&gt;internlm/internlm2-7b&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/tiiuae/falcon-mamba-7b-instruct&#34;&gt;tiiuae/falcon-mamba-7b-instruct&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Most &lt;a href=&#34;https://huggingface.co/models?library=transformers,safetensors&amp;amp;other=mistral&amp;amp;sort=trending&#34;&gt;Mistral&lt;/a&gt;, &lt;a href=&#34;https://huggingface.co/models?library=transformers,safetensors&amp;amp;other=llama&amp;amp;sort=trending&#34;&gt;Llama&lt;/a&gt;, &lt;a href=&#34;https://huggingface.co/models?library=transformers,safetensors&amp;amp;other=phi&amp;amp;sort=trending&#34;&gt;Phi-2&lt;/a&gt;, and &lt;a href=&#34;https://huggingface.co/models?library=transformers,safetensors&amp;amp;other=mixtral&amp;amp;sort=trending&#34;&gt;Mixtral&lt;/a&gt; style models should work out of the box.&lt;/p&gt; &#xA;&lt;p&gt;For some models (such as &lt;code&gt;Qwen&lt;/code&gt; and &lt;code&gt;plamo&lt;/code&gt;) the tokenizer requires you to enable the &lt;code&gt;trust_remote_code&lt;/code&gt; option. You can do this by passing &lt;code&gt;--trust-remote-code&lt;/code&gt; in the command line. If you don&#39;t specify the flag explicitly, you will be prompted to trust remote code in the terminal when running the model.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;Qwen&lt;/code&gt; models you must also specify the &lt;code&gt;eos_token&lt;/code&gt;. You can do this by passing &lt;code&gt;--eos-token &#34;&amp;lt;|endoftext|&amp;gt;&#34;&lt;/code&gt; in the command line.&lt;/p&gt; &#xA;&lt;p&gt;These options can also be set in the Python API. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;model, tokenizer = load(&#xA;    &#34;qwen/Qwen-7B&#34;,&#xA;    tokenizer_config={&#34;eos_token&#34;: &#34;&amp;lt;|endoftext|&amp;gt;&#34;, &#34;trust_remote_code&#34;: True},&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Large Models&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] This requires macOS 15.0 or higher to work.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Models which are large relative to the total RAM available on the machine can be slow. &lt;code&gt;mlx-lm&lt;/code&gt; will attempt to make them faster by wiring the memory occupied by the model and cache. This requires macOS 15 or higher to work.&lt;/p&gt; &#xA;&lt;p&gt;If you see the following warning message:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[WARNING] Generating with a model that requires ...&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;then the model will likely be slow on the given machine. If the model fits in RAM then it can often be sped up by increasing the system wired memory limit. To increase the limit, set the following &lt;code&gt;sysctl&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo sysctl iogpu.wired_limit_mb=N&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The value &lt;code&gt;N&lt;/code&gt; should be larger than the size of the model in megabytes but smaller than the memory size of the machine.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>daveebbelaar/ai-cookbook</title>
    <updated>2025-08-03T01:45:58Z</updated>
    <id>tag:github.com,2025-08-03:/daveebbelaar/ai-cookbook</id>
    <link href="https://github.com/daveebbelaar/ai-cookbook" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Examples and tutorials to help developers build AI systems&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;This Cookbook contains examples and tutorials to help developers build AI systems, offering copy/paste code snippets that you can easily integrate into your own projects.&lt;/p&gt; &#xA;&lt;h2&gt;About Me&lt;/h2&gt; &#xA;&lt;p&gt;Hi! I&#39;m Dave, AI Engineer and founder of Datalumina®. On my &lt;a href=&#34;https://www.youtube.com/@daveebbelaar?sub_confirmation=1&#34;&gt;YouTube channel&lt;/a&gt;, I share practical tutorials that teach developers how to build AI systems that actually work in the real world. Beyond these tutorials, I also help people start successful freelancing careers. Check out the links below to learn more!&lt;/p&gt; &#xA;&lt;h3&gt;Explore More Resources&lt;/h3&gt; &#xA;&lt;p&gt;Whether you&#39;re a learner, a freelancer, or a business looking for AI expertise, we&#39;ve got something for you:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Learning Python for AI and Data Science?&lt;/strong&gt;&lt;br&gt; Join our &lt;strong&gt;free community, Data Alchemy&lt;/strong&gt;, where you&#39;ll find resources, tutorials, and support&lt;br&gt; ▶︎ &lt;a href=&#34;https://www.skool.com/data-alchemy&#34;&gt;Learn Python for AI&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Ready to start or scale your freelancing career?&lt;/strong&gt;&lt;br&gt; Learn how to land clients and grow your business&lt;br&gt; ▶︎ &lt;a href=&#34;https://www.datalumina.com/data-freelancer&#34;&gt;Find freelance projects&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Need expert help on your next project?&lt;/strong&gt;&lt;br&gt; Work with me and my team to solve your data and AI challenges&lt;br&gt; ▶︎ &lt;a href=&#34;https://www.datalumina.com/solutions&#34;&gt;Work with me&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Already building AI applications?&lt;/strong&gt;&lt;br&gt; Explore the &lt;strong&gt;GenAI Launchpad&lt;/strong&gt;, our production framework for AI systems&lt;br&gt; ▶︎ &lt;a href=&#34;https://launchpad.datalumina.com/&#34;&gt;Explore the GenAI Launchpad&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>