<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-31T02:03:24Z</updated>
  <subtitle>Weekly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Asabeneh/30-Days-Of-Python</title>
    <updated>2022-07-31T02:03:24Z</updated>
    <id>tag:github.com,2022-07-31:/Asabeneh/30-Days-Of-Python</id>
    <link href="https://github.com/Asabeneh/30-Days-Of-Python" rel="alternate"></link>
    <summary type="html">&lt;p&gt;30 days of Python programming challenge is a step-by-step guide to learn the Python programming language in 30 days. This challenge may take more than100 days, follow your own pace.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🐍 30 Days Of Python&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;# Day&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Topics&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;01&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/readme.md&#34;&gt;Introduction&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;02&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/02_Day_Variables_builtin_functions/02_variables_builtin_functions.md&#34;&gt;Variables, Built-in Functions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;03&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/03_Day_Operators/03_operators.md&#34;&gt;Operators&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;04&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/04_Day_Strings/04_strings.md&#34;&gt;Strings&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;05&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/05_Day_Lists/05_lists.md&#34;&gt;Lists&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;06&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/06_Day_Tuples/06_tuples.md&#34;&gt;Tuples&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;07&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/07_Day_Sets/07_sets.md&#34;&gt;Sets&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;08&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/08_Day_Dictionaries/08_dictionaries.md&#34;&gt;Dictionaries&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;09&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/09_Day_Conditionals/09_conditionals.md&#34;&gt;Conditionals&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/10_Day_Loops/10_loops.md&#34;&gt;Loops&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/11_Day_Functions/11_functions.md&#34;&gt;Functions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/12_Day_Modules/12_modules.md&#34;&gt;Modules&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;13&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/13_Day_List_comprehension/13_list_comprehension.md&#34;&gt;List Comprehension&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/14_Day_Higher_order_functions/14_higher_order_functions.md&#34;&gt;Higher Order Functions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;15&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/15_Day_Python_type_errors/15_python_type_errors.md&#34;&gt;Python Type Errors&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/16_Day_Python_date_time/16_python_datetime.md&#34;&gt;Python Date time&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;17&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/17_Day_Exception_handling/17_exception_handling.md&#34;&gt;Exception Handling&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;18&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/18_Day_Regular_expressions/18_regular_expressions.md&#34;&gt;Regular Expressions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;19&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/19_Day_File_handling/19_file_handling.md&#34;&gt;File Handling&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;20&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/20_Day_Python_package_manager/20_python_package_manager.md&#34;&gt;Python Package Manager&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;21&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/21_Day_Classes_and_objects/21_classes_and_objects.md&#34;&gt;Classes and Objects&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;22&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/22_Day_Web_scraping/22_web_scraping.md&#34;&gt;Web Scraping&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;23&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/23_Day_Virtual_environment/23_virtual_environment.md&#34;&gt;Virtual Environment&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;24&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/24_Day_Statistics/24_statistics.md&#34;&gt;Statistics&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;25&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/25_Day_Pandas/25_pandas.md&#34;&gt;Pandas&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;26&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/26_Day_Python_web/26_python_web.md&#34;&gt;Python web&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;27&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/27_Day_Python_with_mongodb/27_python_with_mongodb.md&#34;&gt;Python with MongoDB&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;28&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/28_Day_API/28_API.md&#34;&gt;API&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;29&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/29_Day_Building_API/29_building_API.md&#34;&gt;Building API&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;30&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/30_Day_Conclusions/30_conclusions.md&#34;&gt;Conclusions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;🧡🧡🧡 HAPPY CODING 🧡🧡🧡&lt;/p&gt; &#xA;&lt;div&gt; &#xA; &lt;small&gt;Support the &lt;strong&gt;author&lt;/strong&gt; to create more educational materials&lt;/small&gt; &#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://www.paypal.me/asabeneh&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/paypal_lg.png&#34; alt=&#34;Paypal Logo&#34; style=&#34;width:10%&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt; 30 Days Of Python: Day 1 - Introduction&lt;/h1&gt; &#xA; &lt;a class=&#34;header-badge&#34; target=&#34;_blank&#34; href=&#34;https://www.linkedin.com/in/asabeneh/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/style--5eba00.svg?label=LinkedIn&amp;amp;logo=linkedin&amp;amp;style=social&#34;&gt; &lt;/a&gt; &#xA; &lt;a class=&#34;header-badge&#34; target=&#34;_blank&#34; href=&#34;https://twitter.com/Asabeneh&#34;&gt; &lt;img alt=&#34;Twitter Follow&#34; src=&#34;https://img.shields.io/twitter/follow/asabeneh?style=social&#34;&gt; &lt;/a&gt; &#xA; &lt;p&gt;&lt;sub&gt;Author: &lt;a href=&#34;https://www.linkedin.com/in/asabeneh/&#34; target=&#34;_blank&#34;&gt;Asabeneh Yetayeh&lt;/a&gt;&lt;br&gt; &lt;small&gt; Second Edition: July, 2021&lt;/small&gt; &lt;/sub&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/02_Day_Variables_builtin_functions/02_variables_builtin_functions.md&#34;&gt;Day 2 &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/30DaysOfPython_banner3@2x.png&#34; alt=&#34;30DaysOfPython&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#-30-days-of-python&#34;&gt;🐍 30 Days Of Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#-day-1&#34;&gt;📘 Day 1&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#welcome&#34;&gt;Welcome&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#why-python-&#34;&gt;Why Python ?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#environment-setup&#34;&gt;Environment Setup&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#installing-python&#34;&gt;Installing Python&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#python-shell&#34;&gt;Python Shell&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#installing-visual-studio-code&#34;&gt;Installing Visual Studio Code&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#how-to-use-visual-studio-code&#34;&gt;How to use visual studio code&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#basic-python&#34;&gt;Basic Python&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#python-syntax&#34;&gt;Python Syntax&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#python-indentation&#34;&gt;Python Indentation&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#comments&#34;&gt;Comments&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#data-types&#34;&gt;Data types&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#number&#34;&gt;Number&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#string&#34;&gt;String&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#booleans&#34;&gt;Booleans&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#list&#34;&gt;List&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#dictionary&#34;&gt;Dictionary&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#tuple&#34;&gt;Tuple&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#set&#34;&gt;Set&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#checking-data-types&#34;&gt;Checking Data types&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#python-file&#34;&gt;Python File&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#-exercises---day-1&#34;&gt;💻 Exercises - Day 1&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#exercise-level-1&#34;&gt;Exercise: Level 1&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#exercise-level-2&#34;&gt;Exercise: Level 2&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#exercise-level-3&#34;&gt;Exercise: Level 3&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;📘 Day 1&lt;/h1&gt; &#xA;&lt;h2&gt;Welcome&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Congratulations&lt;/strong&gt; for deciding to participate in a &lt;em&gt;30 days of Python&lt;/em&gt; programming challenge . In this challenge you will learn everything you need to be a python programmer and the whole concept of programming. In the end of the challenge you will get a &lt;em&gt;30DaysOfPython&lt;/em&gt; programming challenge certificate.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to actively engage in the challenge, you may join the &lt;a href=&#34;https://t.me/ThirtyDaysOfPython&#34;&gt;30DaysOfPython challenge&lt;/a&gt; telegram group.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Python is a high-level programming language for general-purpose programming. It is an open source, interpreted, objected-oriented programming language. Python was created by a Dutch programmer, Guido van Rossum. The name of Python programming language was derived from a British sketch comedy series, &lt;em&gt;Month Python&#39;s Flying Circus&lt;/em&gt;. The first version was released on February 20, 1991. This 30 days of Python challenge will help you learn the latest version of Python, Python 3 step by step. The topics are broken down into 30 days, where each day contains several topics with easy-to-understand explanations, real-world examples, many hands on exercises and projects.&lt;/p&gt; &#xA;&lt;p&gt;This challenge is designed for beginners and professionals who want to learn python programming language. It may take 30 to 100 days to complete the challenge, people who actively participate on the telegram group have a high probability of completing the challenge. If you are a visual learner or in favor of videos, you may get started with this &lt;a href=&#34;https://www.youtube.com/watch?v=11OYpBrhdyM&#34;&gt;Python for Absolute Beginners video&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Why Python ?&lt;/h2&gt; &#xA;&lt;p&gt;It is a programming language which is very close to human language and because of that it is easy to learn and use. Python is used by various industries and companies (including Google). It has been used to develop web applications, desktop applications, system adminstration, and machine learning libraries. Python is highly embraced language in the data science and machine learning community. I hope this is enough to convince you to start learning Python. Python is eating the world and you are killing it before it eats you.&lt;/p&gt; &#xA;&lt;h2&gt;Environment Setup&lt;/h2&gt; &#xA;&lt;h3&gt;Installing Python&lt;/h3&gt; &#xA;&lt;p&gt;To run a python script you need to install python. Let&#39;s &lt;a href=&#34;https://www.python.org/&#34;&gt;download&lt;/a&gt; python. If your are a windows user. Click the button encircled in red.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.python.org/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/installing_on_windows.png&#34; alt=&#34;installing on Windows&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are a macOS user. Click the button encircled in red.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.python.org/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/installing_on_macOS.png&#34; alt=&#34;installing on Windows&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To check if python is installed write the following command on your device terminal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/python_versio.png&#34; alt=&#34;Python Version&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;As you can see from the terminal, I am using &lt;em&gt;Python 3.7.5&lt;/em&gt; version at the moment. Your version of Python might be different from mine by but it should be 3.6 or above. If you mange to see the python version, well done. Python has been installed on your machine. Continue to the next section.&lt;/p&gt; &#xA;&lt;h3&gt;Python Shell&lt;/h3&gt; &#xA;&lt;p&gt;Python is an interpreted scripting language, so it does not need to be compiled. It means it executes the code line by line. Python comes with a &lt;em&gt;Python Shell (Python Interactive Shell)&lt;/em&gt;. It is used to execute a single python command and get the result.&lt;/p&gt; &#xA;&lt;p&gt;Python Shell waits for the Python code from the user. When you enter the code, it interprets the code and shows the result in the next line. Open your terminal or command prompt(cmd) and write:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/opening_python_shell.png&#34; alt=&#34;Python Scripting Shell&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Python interactive shell is opened and it is waiting for you to write Python code(Python script). You will write your Python script next to this symbol &amp;gt;&amp;gt;&amp;gt; and then click Enter. Let us write our very first script on the Python scripting shell.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/adding_on_python_shell.png&#34; alt=&#34;Python script on Python shell&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Well done, you wrote your first Python script on Python interactive shell. How do we close the Python interactive shell ? To close the shell, next to this symbol &amp;gt;&amp;gt; write &lt;strong&gt;exit()&lt;/strong&gt; command and press Enter.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/exit_from_shell.png&#34; alt=&#34;Exit from python shell&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Now, you know how to open the Python interactive shell and how to exit from it.&lt;/p&gt; &#xA;&lt;p&gt;Python will give you results if you write scripts that Python understands, if not it returns errors. Let&#39;s make a deliberate mistake and see what Python will return.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/invalid_syntax_error.png&#34; alt=&#34;Invalid Syntax Error&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;As you can see from the returned error, Python is so clever that it knows the mistake we made and which was &lt;em&gt;Syntax Error: invalid syntax&lt;/em&gt;. Using x as multiplication in Python is a syntax error because (x) is not a valid syntax in Python. Instead of (&lt;strong&gt;x&lt;/strong&gt;) we use asterisk (*) for multiplication. The returned error clearly shows what to fix.&lt;/p&gt; &#xA;&lt;p&gt;The process of identifying and removing errors from a program is called &lt;em&gt;debugging&lt;/em&gt;. Let us debug it by putting * in place of &lt;strong&gt;x&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/fixing_syntax_error.png&#34; alt=&#34;Fixing Syntax Error&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Our bug was fixed, the code ran and we got a result we were expecting. As a programmer you will see such kind of errors on daily basis. It is good to know how to debug. To be good at debugging you should understand what kind of errors you are facing. Some of the Python errors you may encounter are &lt;em&gt;SyntaxError&lt;/em&gt;, &lt;em&gt;IndexError&lt;/em&gt;, &lt;em&gt;NameError&lt;/em&gt;, &lt;em&gt;ModuleNotFoundError&lt;/em&gt;, &lt;em&gt;KeyError&lt;/em&gt;, &lt;em&gt;ImportError&lt;/em&gt;, &lt;em&gt;AttributeError&lt;/em&gt;, &lt;em&gt;TypeError&lt;/em&gt;, &lt;em&gt;ValueError&lt;/em&gt;, &lt;em&gt;ZeroDivisionError&lt;/em&gt; etc. We will see more about different Python &lt;strong&gt;&lt;em&gt;error types&lt;/em&gt;&lt;/strong&gt; in later sections.&lt;/p&gt; &#xA;&lt;p&gt;Let us practice more how to use Python interactive shell. Go to your terminal or command prompt and write the word &lt;strong&gt;python&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/opening_python_shell.png&#34; alt=&#34;Python Scripting Shell&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Python interactive shell is opened. Let us do some basic mathematical operations (addition, subtraction, multiplication, division, modulus, exponential).&lt;/p&gt; &#xA;&lt;p&gt;Let us do some maths first before we write any Python code:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2 + 3 = 5&lt;/li&gt; &#xA; &lt;li&gt;3 - 2 = 1&lt;/li&gt; &#xA; &lt;li&gt;3 * 2 = 6&lt;/li&gt; &#xA; &lt;li&gt;3 / 2 = 1.5&lt;/li&gt; &#xA; &lt;li&gt;3 ^ 2 = 3 x 3 = 9&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In python we have the following additional operations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;3 % 2 = 1 =&amp;gt; which means finding the remainder&lt;/li&gt; &#xA; &lt;li&gt;3 // 2 = 1 =&amp;gt; which means removing the remainder&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Let us change the above mathematical expressions to Python code. The Python shell has been opened and let us write a comment at the very beginning of the shell.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;em&gt;comment&lt;/em&gt; is a part of the code which is not executed by python. So we can leave some text in our code to make our code more readable. Python does not run the comment part. A comment in python starts with hash(#) symbol. This is how you write a comment in python&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt; # comment starts with hash&#xA; # this is a python comment, because it starts with a (#) symbol&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/maths_on_python_shell.png&#34; alt=&#34;Maths on python shell&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Before we move on to the next section, let us practice more on the Python interactive shell. Close the opened shell by writing &lt;em&gt;exit()&lt;/em&gt; on the shell and open it again and let us practice how to write text on the Python shell.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/writing_string_on_shell.png&#34; alt=&#34;Writing String on python shell&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Installing Visual Studio Code&lt;/h3&gt; &#xA;&lt;p&gt;The Python interactive shell is good to try and test small script codes but it will not be for a big project. In real work environment, developers use different code editors to write codes. In this 30 days of Python programming challenge we will use visual studio code. Visual studio code is a very popular open source text editor. I am a fan of vscode and I would recommend to &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;download&lt;/a&gt; visual studio code, but if you are in favor of other editors, feel free to follow with what you have.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/vscode.png&#34; alt=&#34;Visual Studio Code&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you installed visual studio code, let us see how to use it. If you prefer a video, you can follow this Visual Studio Code for Python &lt;a href=&#34;https://www.youtube.com/watch?v=bn7Cx4z-vSo&#34;&gt;Video tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;How to use visual studio code&lt;/h4&gt; &#xA;&lt;p&gt;Open the visual studio code by double clicking the visual studio icon. When you open it you will get this kind of interface. Try to interact with the labeled icons.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/vscode_ui.png&#34; alt=&#34;Visual studio Code&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create a folder named 30DaysOfPython on your desktop. Then open it using visual studio code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/how_to_open_project_on_vscode.png&#34; alt=&#34;Opening Project on Visual studio&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/opening_project.png&#34; alt=&#34;Opening a project&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After opening it you will see shortcuts for creating files and folders inside of 30DaysOfPython project&#39;s directory. As you can see below, I have created the very first file, helloworld.py. You can do the same.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/helloworld.png&#34; alt=&#34;Creating a python file&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After a long day of coding, you want to close your code editor, right? This is how you will close the opened project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/closing_opened_project.png&#34; alt=&#34;Closing project&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Congratulations, you have finished setting up the development environment. Let us start coding.&lt;/p&gt; &#xA;&lt;h2&gt;Basic Python&lt;/h2&gt; &#xA;&lt;h3&gt;Python Syntax&lt;/h3&gt; &#xA;&lt;p&gt;A Python script can be written in Python interactive shell or in the code editor. A Python file has an extension .py.&lt;/p&gt; &#xA;&lt;h3&gt;Python Indentation&lt;/h3&gt; &#xA;&lt;p&gt;An indentation is a white space in a text. Indentation in many languages is used to increase code readability, however Python uses indentation to create block of codes. In other programming languages curly brackets are used to create blocks of codes instead of indentation. One of the common bugs when writing python code is wrong indentation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/indentation.png&#34; alt=&#34;Indentation Error&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Comments&lt;/h3&gt; &#xA;&lt;p&gt;Comments are very important to make the code more readable and to leave remarks in our code. Python does not run comment parts of our code. Any text starting with hash(#) in Python is a comment.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example: Single Line Comment&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;    # This is the first comment&#xA;    # This is the second comment&#xA;    # Python is eating the world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example: Multiline Comment&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Triple quote can be used for multiline comment if it is not assigned to a variable&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&#34;&#34;&#34;This is multiline comment&#xA;multiline comment takes multiple lines.&#xA;python is eating the world&#xA;&#34;&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Data types&lt;/h3&gt; &#xA;&lt;p&gt;In Python there are several types of data types. Let us get started with the most common ones. Different data types will be covered in detail in other sections. For the time being, let us just go through the different data types and get familiar with them. You do not have to have a clear understanding now.&lt;/p&gt; &#xA;&lt;h4&gt;Number&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Integer: Integer(negative, zero and positive) numbers Example: ... -3, -2, -1, 0, 1, 2, 3 ...&lt;/li&gt; &#xA; &lt;li&gt;Float: Decimal number Example ... -3.5, -2.25, -1.0, 0.0, 1.1, 2.2, 3.5 ...&lt;/li&gt; &#xA; &lt;li&gt;Complex Example 1 + j, 2 + 4j&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;String&lt;/h4&gt; &#xA;&lt;p&gt;A collection of one or more characters under a single or double quote. If a string is more than one sentence then we use a triple quote.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&#39;Asabeneh&#39;&#xA;&#39;Finland&#39;&#xA;&#39;Python&#39;&#xA;&#39;I love teaching&#39;&#xA;&#39;I hope you are enjoying the first day of 30DaysOfPython Challenge&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Booleans&lt;/h4&gt; &#xA;&lt;p&gt;A boolean data type is either a True or False value. T and F should be always uppercase.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    True  #  Is the light on? If it is on, then the value is True&#xA;    False # Is the light on? If it is off, then the value is False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;List&lt;/h4&gt; &#xA;&lt;p&gt;Python list is an ordered collection which allows to store different data type items. A list is similar to an array in JavaScript.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;[0, 1, 2, 3, 4, 5]  # all are the same data types - a list of numbers&#xA;[&#39;Banana&#39;, &#39;Orange&#39;, &#39;Mango&#39;, &#39;Avocado&#39;] # all the same data types - a list of strings (fruits)&#xA;[&#39;Finland&#39;,&#39;Estonia&#39;, &#39;Sweden&#39;,&#39;Norway&#39;] # all the same data types - a list of strings (countries)&#xA;[&#39;Banana&#39;, 10, False, 9.81] # different data types in the list - string, integer, boolean and float&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Dictionary&lt;/h4&gt; &#xA;&lt;p&gt;A Python dictionary object is an unordered collection of data in a key value pair format.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;{&#xA;&#39;first_name&#39;:&#39;Asabeneh&#39;,&#xA;&#39;last_name&#39;:&#39;Yetayeh&#39;,&#xA;&#39;country&#39;:&#39;Finland&#39;, &#xA;&#39;age&#39;:250, &#xA;&#39;is_married&#39;:True,&#xA;&#39;skills&#39;:[&#39;JS&#39;, &#39;React&#39;, &#39;Node&#39;, &#39;Python&#39;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Tuple&lt;/h4&gt; &#xA;&lt;p&gt;A tuple is an ordered collection of different data types like list but tuples can not be modified once they are created. They are immutable.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;(&#39;Asabeneh&#39;, &#39;Pawel&#39;, &#39;Brook&#39;, &#39;Abraham&#39;, &#39;Lidiya&#39;) # Names&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;(&#39;Earth&#39;, &#39;Jupiter&#39;, &#39;Neptune&#39;, &#39;Mars&#39;, &#39;Venus&#39;, &#39;Saturn&#39;, &#39;Uranus&#39;, &#39;Mercury&#39;) # planets&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Set&lt;/h4&gt; &#xA;&lt;p&gt;A set is a collection of data types similar to list and tuple. Unlike list and tuple, set is not an ordered collection of items. Like in Mathematics, set in Python stores only unique items.&lt;/p&gt; &#xA;&lt;p&gt;In later sections, we will go in detail about each and every Python data type.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;{2, 4, 3, 5}&#xA;{3.14, 9.81, 2.7} # order is not important in set&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Checking Data types&lt;/h3&gt; &#xA;&lt;p&gt;To check the data type of certain data/variable we use the &lt;strong&gt;type&lt;/strong&gt; function. In the following terminal you will see different python data types:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/checking_data_types.png&#34; alt=&#34;Checking Data types&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Python File&lt;/h3&gt; &#xA;&lt;p&gt;First open your project folder, 30DaysOfPython. If you don&#39;t have this folder, create a folder name called 30DaysOfPython. Inside this folder, create a file called helloworld.py. Now, let&#39;s do what we did on python interactive shell using visual studio code.&lt;/p&gt; &#xA;&lt;p&gt;The Python interactive shell was printing without using &lt;strong&gt;print&lt;/strong&gt; but on visual studio code to see our result we should use a built in function *print(). The &lt;em&gt;print()&lt;/em&gt; built-in function takes one or more arguments as follows &lt;em&gt;print(&#39;arument1&#39;, &#39;argument2&#39;, &#39;argument3&#39;)&lt;/em&gt;. See the examples below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The file name is helloworld.py&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# Day 1 - 30DaysOfPython Challenge&#xA;&#xA;print(2 + 3)             # addition(+)&#xA;print(3 - 1)             # subtraction(-)&#xA;print(2 * 3)             # multiplication(*)&#xA;print(3 / 2)             # division(/)&#xA;print(3 ** 2)            # exponential(**)&#xA;print(3 % 2)             # modulus(%)&#xA;print(3 // 2)            # Floor division operator(//)&#xA;&#xA;# Checking data types&#xA;print(type(10))          # Int&#xA;print(type(3.14))        # Float&#xA;print(type(1 + 3j))      # Complex number&#xA;print(type(&#39;Asabeneh&#39;))  # String&#xA;print(type([1, 2, 3]))   # List&#xA;print(type({&#39;name&#39;:&#39;Asabeneh&#39;})) # Dictionary&#xA;print(type({9.8, 3.14, 2.7}))    # Set&#xA;print(type((9.8, 3.14, 2.7)))    # Tuple&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the python file check the image below. You can run the python file either by running the green button on Visual Studio Code or by typing &lt;em&gt;python helloworld.py&lt;/em&gt; in the terminal .&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/running_python_script.png&#34; alt=&#34;Running python script&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;🌕 You are amazing. You have just completed day 1 challenge and you are on your way to greatness. Now do some exercises for your brain and muscles.&lt;/p&gt; &#xA;&lt;h2&gt;💻 Exercises - Day 1&lt;/h2&gt; &#xA;&lt;h3&gt;Exercise: Level 1&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Check the python version you are using&lt;/li&gt; &#xA; &lt;li&gt;Open the python interactive shell and do the following operations. The operands are 3 and 4. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;addition(+)&lt;/li&gt; &#xA;   &lt;li&gt;subtraction(-)&lt;/li&gt; &#xA;   &lt;li&gt;multiplication(*)&lt;/li&gt; &#xA;   &lt;li&gt;modulus(%)&lt;/li&gt; &#xA;   &lt;li&gt;division(/)&lt;/li&gt; &#xA;   &lt;li&gt;exponential(**)&lt;/li&gt; &#xA;   &lt;li&gt;floor division operator(//)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Write strings on the python interactive shell. The strings are the following: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Your name&lt;/li&gt; &#xA;   &lt;li&gt;Your family name&lt;/li&gt; &#xA;   &lt;li&gt;Your country&lt;/li&gt; &#xA;   &lt;li&gt;I am enjoying 30 days of python&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Check the data types of the following data: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;10&lt;/li&gt; &#xA;   &lt;li&gt;9.8&lt;/li&gt; &#xA;   &lt;li&gt;3.14&lt;/li&gt; &#xA;   &lt;li&gt;4 - 4j&lt;/li&gt; &#xA;   &lt;li&gt;[&#39;Asabeneh&#39;, &#39;Python&#39;, &#39;Finland&#39;]&lt;/li&gt; &#xA;   &lt;li&gt;Your name&lt;/li&gt; &#xA;   &lt;li&gt;Your family name&lt;/li&gt; &#xA;   &lt;li&gt;Your country&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Exercise: Level 2&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a folder named day_1 inside 30DaysOfPython folder. Inside day_1 folder, create a python file helloworld.py and repeat questions 1, 2, 3 and 4. Remember to use &lt;em&gt;print()&lt;/em&gt; when you are working on a python file. Navigate to the directory where you have saved your file, and run it.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Exercise: Level 3&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Write an example for different Python data types such as Number(Integer, Float, Complex), String, Boolean, List, Tuple, Set and Dictionary.&lt;/li&gt; &#xA; &lt;li&gt;Find an &lt;a href=&#34;https://en.wikipedia.org/wiki/Euclidean_distance#:~:text=In%20mathematics%2C%20the%20Euclidean%20distance,being%20called%20the%20Pythagorean%20distance.&#34;&gt;Euclidian distance&lt;/a&gt; between (2, 3) and (10, 8)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;🎉 CONGRATULATIONS ! 🎉&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/02_Day_Variables_builtin_functions/02_variables_builtin_functions.md&#34;&gt;Day 2 &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tiangolo/fastapi</title>
    <updated>2022-07-31T02:03:24Z</updated>
    <id>tag:github.com,2022-07-31:/tiangolo/fastapi</id>
    <link href="https://github.com/tiangolo/fastapi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;FastAPI framework, high performance, easy to learn, fast to code, ready for production&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://fastapi.tiangolo.com&#34;&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png&#34; alt=&#34;FastAPI&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;em&gt;FastAPI framework, high performance, easy to learn, fast to code, ready for production&lt;/em&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/tiangolo/fastapi/actions?query=workflow%3ATest+event%3Apush+branch%3Amaster&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://github.com/tiangolo/fastapi/workflows/Test/badge.svg?event=push&amp;amp;branch=master&#34; alt=&#34;Test&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/tiangolo/fastapi&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/codecov/c/github/tiangolo/fastapi?color=%2334D058&#34; alt=&#34;Coverage&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/fastapi&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/v/fastapi?color=%2334D058&amp;amp;label=pypi%20package&#34; alt=&#34;Package version&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/fastapi&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/pyversions/fastapi.svg?color=%2334D058&#34; alt=&#34;Supported Python versions&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Documentation&lt;/strong&gt;: &lt;a href=&#34;https://fastapi.tiangolo.com&#34; target=&#34;_blank&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://fastapi.tiangolo.com&#34;&gt;https://fastapi.tiangolo.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Source Code&lt;/strong&gt;: &lt;a href=&#34;https://github.com/tiangolo/fastapi&#34; target=&#34;_blank&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/tiangolo/fastapi&#34;&gt;https://github.com/tiangolo/fastapi&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;FastAPI is a modern, fast (high-performance), web framework for building APIs with Python 3.6+ based on standard Python type hints.&lt;/p&gt; &#xA;&lt;p&gt;The key features are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fast&lt;/strong&gt;: Very high performance, on par with &lt;strong&gt;NodeJS&lt;/strong&gt; and &lt;strong&gt;Go&lt;/strong&gt; (thanks to Starlette and Pydantic). &lt;a href=&#34;https://raw.githubusercontent.com/tiangolo/fastapi/master/#performance&#34;&gt;One of the fastest Python frameworks available&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fast to code&lt;/strong&gt;: Increase the speed to develop features by about 200% to 300%. *&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fewer bugs&lt;/strong&gt;: Reduce about 40% of human (developer) induced errors. *&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Intuitive&lt;/strong&gt;: Great editor support. &lt;abbr title=&#34;also known as auto-complete, autocompletion, IntelliSense&#34;&gt;Completion&lt;/abbr&gt; everywhere. Less time debugging.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Easy&lt;/strong&gt;: Designed to be easy to use and learn. Less time reading docs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Short&lt;/strong&gt;: Minimize code duplication. Multiple features from each parameter declaration. Fewer bugs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Robust&lt;/strong&gt;: Get production-ready code. With automatic interactive documentation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Standards-based&lt;/strong&gt;: Based on (and fully compatible with) the open standards for APIs: &lt;a href=&#34;https://github.com/OAI/OpenAPI-Specification&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;OpenAPI&lt;/a&gt; (previously known as Swagger) and &lt;a href=&#34;https://json-schema.org/&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;JSON Schema&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;small&gt;* estimation based on tests on an internal development team, building production applications.&lt;/small&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;!-- sponsors --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bit.ly/3PjOZqc&#34; target=&#34;_blank&#34; title=&#34;DiscoArt: Create compelling Disco Diffusion artworks in just one line&#34;&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/sponsors/jina-ai.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cryptapi.io/&#34; target=&#34;_blank&#34; title=&#34;CryptAPI: Your easy to use, secure and privacy oriented payment gateway.&#34;&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/sponsors/cryptapi.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.imgwhale.xyz/&#34; target=&#34;_blank&#34; title=&#34;The ultimate solution to unlimited and forever cloud storage.&#34;&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/sponsors/imgwhale.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://doist.com/careers/9B437B1615-wa-senior-backend-engineer-python&#34; target=&#34;_blank&#34; title=&#34;Help us migrate doist to FastAPI&#34;&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/sponsors/doist.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.deta.sh/?ref=fastapi&#34; target=&#34;_blank&#34; title=&#34;The launchpad for all your (team&#39;s) ideas&#34;&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/sponsors/deta.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.investsuite.com/jobs&#34; target=&#34;_blank&#34; title=&#34;Wealthtech jobs with FastAPI&#34;&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/sponsors/investsuite.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://training.talkpython.fm/fastapi-courses&#34; target=&#34;_blank&#34; title=&#34;FastAPI video courses on demand from people you trust&#34;&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/sponsors/talkpython.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://testdriven.io/courses/tdd-fastapi/&#34; target=&#34;_blank&#34; title=&#34;Learn to build high-quality web apps with best practices&#34;&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/sponsors/testdriven.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/deepset-ai/haystack/&#34; target=&#34;_blank&#34; title=&#34;Build powerful search from composable, open source building blocks&#34;&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/sponsors/haystack-fastapi.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.udemy.com/course/fastapi-rest/&#34; target=&#34;_blank&#34; title=&#34;Learn FastAPI by building a complete project. Extend your knowledge on advanced web development-AWS, Payments, Emails.&#34;&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/sponsors/ines-course.jpg&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://careers.budget-insight.com/&#34; target=&#34;_blank&#34; title=&#34;Budget Insight is hiring!&#34;&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/sponsors/budget-insight.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- /sponsors --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://fastapi.tiangolo.com/fastapi-people/#sponsors&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;Other sponsors&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Opinions&lt;/h2&gt; &#xA;&lt;p&gt;&#34;&lt;em&gt;[...] I&#39;m using &lt;strong&gt;FastAPI&lt;/strong&gt; a ton these days. [...] I&#39;m actually planning to use it for all of my team&#39;s &lt;strong&gt;ML services at Microsoft&lt;/strong&gt;. Some of them are getting integrated into the core &lt;strong&gt;Windows&lt;/strong&gt; product and some &lt;strong&gt;Office&lt;/strong&gt; products.&lt;/em&gt;&#34;&lt;/p&gt; &#xA;&lt;div style=&#34;text-align: right; margin-right: 10%;&#34;&gt;&#xA; Kabir Khan - &#xA; &lt;strong&gt;Microsoft&lt;/strong&gt; &#xA; &lt;a href=&#34;https://github.com/tiangolo/fastapi/pull/26&#34; target=&#34;_blank&#34;&gt;&lt;small&gt;(ref)&lt;/small&gt;&lt;/a&gt;&#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&#34;&lt;em&gt;We adopted the &lt;strong&gt;FastAPI&lt;/strong&gt; library to spawn a &lt;strong&gt;REST&lt;/strong&gt; server that can be queried to obtain &lt;strong&gt;predictions&lt;/strong&gt;. [for Ludwig]&lt;/em&gt;&#34;&lt;/p&gt; &#xA;&lt;div style=&#34;text-align: right; margin-right: 10%;&#34;&gt;&#xA; Piero Molino, Yaroslav Dudin, and Sai Sumanth Miryala - &#xA; &lt;strong&gt;Uber&lt;/strong&gt; &#xA; &lt;a href=&#34;https://eng.uber.com/ludwig-v0-2/&#34; target=&#34;_blank&#34;&gt;&lt;small&gt;(ref)&lt;/small&gt;&lt;/a&gt;&#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&#34;&lt;em&gt;&lt;strong&gt;Netflix&lt;/strong&gt; is pleased to announce the open-source release of our &lt;strong&gt;crisis management&lt;/strong&gt; orchestration framework: &lt;strong&gt;Dispatch&lt;/strong&gt;! [built with &lt;strong&gt;FastAPI&lt;/strong&gt;]&lt;/em&gt;&#34;&lt;/p&gt; &#xA;&lt;div style=&#34;text-align: right; margin-right: 10%;&#34;&gt;&#xA; Kevin Glisson, Marc Vilanova, Forest Monsen - &#xA; &lt;strong&gt;Netflix&lt;/strong&gt; &#xA; &lt;a href=&#34;https://netflixtechblog.com/introducing-dispatch-da4b8a2a8072&#34; target=&#34;_blank&#34;&gt;&lt;small&gt;(ref)&lt;/small&gt;&lt;/a&gt;&#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&#34;&lt;em&gt;I’m over the moon excited about &lt;strong&gt;FastAPI&lt;/strong&gt;. It’s so fun!&lt;/em&gt;&#34;&lt;/p&gt; &#xA;&lt;div style=&#34;text-align: right; margin-right: 10%;&#34;&gt;&#xA; Brian Okken - &#xA; &lt;strong&gt;&lt;a href=&#34;https://pythonbytes.fm/episodes/show/123/time-to-right-the-py-wrongs?time_in_sec=855&#34; target=&#34;_blank&#34;&gt;Python Bytes&lt;/a&gt; podcast host&lt;/strong&gt; &#xA; &lt;a href=&#34;https://twitter.com/brianokken/status/1112220079972728832&#34; target=&#34;_blank&#34;&gt;&lt;small&gt;(ref)&lt;/small&gt;&lt;/a&gt;&#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&#34;&lt;em&gt;Honestly, what you&#39;ve built looks super solid and polished. In many ways, it&#39;s what I wanted &lt;strong&gt;Hug&lt;/strong&gt; to be - it&#39;s really inspiring to see someone build that.&lt;/em&gt;&#34;&lt;/p&gt; &#xA;&lt;div style=&#34;text-align: right; margin-right: 10%;&#34;&gt;&#xA; Timothy Crosley - &#xA; &lt;strong&gt;&lt;a href=&#34;https://www.hug.rest/&#34; target=&#34;_blank&#34;&gt;Hug&lt;/a&gt; creator&lt;/strong&gt; &#xA; &lt;a href=&#34;https://news.ycombinator.com/item?id=19455465&#34; target=&#34;_blank&#34;&gt;&lt;small&gt;(ref)&lt;/small&gt;&lt;/a&gt;&#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&#34;&lt;em&gt;If you&#39;re looking to learn one &lt;strong&gt;modern framework&lt;/strong&gt; for building REST APIs, check out &lt;strong&gt;FastAPI&lt;/strong&gt; [...] It&#39;s fast, easy to use and easy to learn [...]&lt;/em&gt;&#34;&lt;/p&gt; &#xA;&lt;p&gt;&#34;&lt;em&gt;We&#39;ve switched over to &lt;strong&gt;FastAPI&lt;/strong&gt; for our &lt;strong&gt;APIs&lt;/strong&gt; [...] I think you&#39;ll like it [...]&lt;/em&gt;&#34;&lt;/p&gt; &#xA;&lt;div style=&#34;text-align: right; margin-right: 10%;&#34;&gt;&#xA; Ines Montani - Matthew Honnibal - &#xA; &lt;strong&gt;&lt;a href=&#34;https://explosion.ai&#34; target=&#34;_blank&#34;&gt;Explosion AI&lt;/a&gt; founders - &lt;a href=&#34;https://spacy.io&#34; target=&#34;_blank&#34;&gt;spaCy&lt;/a&gt; creators&lt;/strong&gt; &#xA; &lt;a href=&#34;https://twitter.com/_inesmontani/status/1144173225322143744&#34; target=&#34;_blank&#34;&gt;&lt;small&gt;(ref)&lt;/small&gt;&lt;/a&gt; - &#xA; &lt;a href=&#34;https://twitter.com/honnibal/status/1144031421859655680&#34; target=&#34;_blank&#34;&gt;&lt;small&gt;(ref)&lt;/small&gt;&lt;/a&gt;&#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Typer&lt;/strong&gt;, the FastAPI of CLIs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://typer.tiangolo.com&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://typer.tiangolo.com/img/logo-margin/logo-margin-vector.svg?sanitize=true&#34; style=&#34;width: 20%;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are building a &lt;abbr title=&#34;Command Line Interface&#34;&gt;CLI&lt;/abbr&gt; app to be used in the terminal instead of a web API, check out &lt;a href=&#34;https://typer.tiangolo.com/&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Typer&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Typer&lt;/strong&gt; is FastAPI&#39;s little sibling. And it&#39;s intended to be the &lt;strong&gt;FastAPI of CLIs&lt;/strong&gt;. ⌨️ 🚀&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Python 3.6+&lt;/p&gt; &#xA;&lt;p&gt;FastAPI stands on the shoulders of giants:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.starlette.io/&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;Starlette&lt;/a&gt; for the web parts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pydantic-docs.helpmanual.io/&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;Pydantic&lt;/a&gt; for the data parts.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;div class=&#34;termy&#34;&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ pip install fastapi&#xA;&#xA;---&amp;gt; 100%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;You will also need an ASGI server, for production such as &lt;a href=&#34;https://www.uvicorn.org&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;Uvicorn&lt;/a&gt; or &lt;a href=&#34;https://gitlab.com/pgjones/hypercorn&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;Hypercorn&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;div class=&#34;termy&#34;&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ pip install &#34;uvicorn[standard]&#34;&#xA;&#xA;---&amp;gt; 100%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;h3&gt;Create it&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a file &lt;code&gt;main.py&lt;/code&gt; with:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from typing import Union&#xA;&#xA;from fastapi import FastAPI&#xA;&#xA;app = FastAPI()&#xA;&#xA;&#xA;@app.get(&#34;/&#34;)&#xA;def read_root():&#xA;    return {&#34;Hello&#34;: &#34;World&#34;}&#xA;&#xA;&#xA;@app.get(&#34;/items/{item_id}&#34;)&#xA;def read_item(item_id: int, q: Union[str, None] = None):&#xA;    return {&#34;item_id&#34;: item_id, &#34;q&#34;: q}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details markdown=&#34;1&#34;&gt; &#xA; &lt;summary&gt;Or use &lt;code&gt;async def&lt;/code&gt;...&lt;/summary&gt; &#xA; &lt;p&gt;If your code uses &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt;, use &lt;code&gt;async def&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from typing import Union&#xA;&#xA;from fastapi import FastAPI&#xA;&#xA;app = FastAPI()&#xA;&#xA;&#xA;@app.get(&#34;/&#34;)&#xA;async def read_root():&#xA;    return {&#34;Hello&#34;: &#34;World&#34;}&#xA;&#xA;&#xA;@app.get(&#34;/items/{item_id}&#34;)&#xA;async def read_item(item_id: int, q: Union[str, None] = None):&#xA;    return {&#34;item_id&#34;: item_id, &#34;q&#34;: q}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:&lt;/p&gt; &#xA; &lt;p&gt;If you don&#39;t know, check the &lt;em&gt;&#34;In a hurry?&#34;&lt;/em&gt; section about &lt;a href=&#34;https://fastapi.tiangolo.com/async/#in-a-hurry&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; in the docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Run it&lt;/h3&gt; &#xA;&lt;p&gt;Run the server with:&lt;/p&gt; &#xA;&lt;div class=&#34;termy&#34;&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ uvicorn main:app --reload&#xA;&#xA;INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)&#xA;INFO:     Started reloader process [28720]&#xA;INFO:     Started server process [28722]&#xA;INFO:     Waiting for application startup.&#xA;INFO:     Application startup complete.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/div&gt; &#xA;&lt;details markdown=&#34;1&#34;&gt; &#xA; &lt;summary&gt;About the command &lt;code&gt;uvicorn main:app --reload&lt;/code&gt;...&lt;/summary&gt; &#xA; &lt;p&gt;The command &lt;code&gt;uvicorn main:app&lt;/code&gt; refers to:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;main&lt;/code&gt;: the file &lt;code&gt;main.py&lt;/code&gt; (the Python &#34;module&#34;).&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;app&lt;/code&gt;: the object created inside of &lt;code&gt;main.py&lt;/code&gt; with the line &lt;code&gt;app = FastAPI()&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;--reload&lt;/code&gt;: make the server restart after code changes. Only do this for development.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Check it&lt;/h3&gt; &#xA;&lt;p&gt;Open your browser at &lt;a href=&#34;http://127.0.0.1:8000/items/5?q=somequery&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;&lt;/a&gt;&lt;a href=&#34;http://127.0.0.1:8000/items/5?q=somequery&#34;&gt;http://127.0.0.1:8000/items/5?q=somequery&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You will see the JSON response as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;{&#34;item_id&#34;: 5, &#34;q&#34;: &#34;somequery&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You already created an API that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Receives HTTP requests in the &lt;em&gt;paths&lt;/em&gt; &lt;code&gt;/&lt;/code&gt; and &lt;code&gt;/items/{item_id}&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Both &lt;em&gt;paths&lt;/em&gt; take &lt;code&gt;GET&lt;/code&gt; &lt;em&gt;operations&lt;/em&gt; (also known as HTTP &lt;em&gt;methods&lt;/em&gt;).&lt;/li&gt; &#xA; &lt;li&gt;The &lt;em&gt;path&lt;/em&gt; &lt;code&gt;/items/{item_id}&lt;/code&gt; has a &lt;em&gt;path parameter&lt;/em&gt; &lt;code&gt;item_id&lt;/code&gt; that should be an &lt;code&gt;int&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;em&gt;path&lt;/em&gt; &lt;code&gt;/items/{item_id}&lt;/code&gt; has an optional &lt;code&gt;str&lt;/code&gt; &lt;em&gt;query parameter&lt;/em&gt; &lt;code&gt;q&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Interactive API docs&lt;/h3&gt; &#xA;&lt;p&gt;Now go to &lt;a href=&#34;http://127.0.0.1:8000/docs&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;&lt;/a&gt;&lt;a href=&#34;http://127.0.0.1:8000/docs&#34;&gt;http://127.0.0.1:8000/docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You will see the automatic interactive API documentation (provided by &lt;a href=&#34;https://github.com/swagger-api/swagger-ui&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;Swagger UI&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/index/index-01-swagger-ui-simple.png&#34; alt=&#34;Swagger UI&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Alternative API docs&lt;/h3&gt; &#xA;&lt;p&gt;And now, go to &lt;a href=&#34;http://127.0.0.1:8000/redoc&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;&lt;/a&gt;&lt;a href=&#34;http://127.0.0.1:8000/redoc&#34;&gt;http://127.0.0.1:8000/redoc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You will see the alternative automatic documentation (provided by &lt;a href=&#34;https://github.com/Rebilly/ReDoc&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;ReDoc&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/index/index-02-redoc-simple.png&#34; alt=&#34;ReDoc&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Example upgrade&lt;/h2&gt; &#xA;&lt;p&gt;Now modify the file &lt;code&gt;main.py&lt;/code&gt; to receive a body from a &lt;code&gt;PUT&lt;/code&gt; request.&lt;/p&gt; &#xA;&lt;p&gt;Declare the body using standard Python types, thanks to Pydantic.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from typing import Union&#xA;&#xA;from fastapi import FastAPI&#xA;from pydantic import BaseModel&#xA;&#xA;app = FastAPI()&#xA;&#xA;&#xA;class Item(BaseModel):&#xA;    name: str&#xA;    price: float&#xA;    is_offer: Union[bool, None] = None&#xA;&#xA;&#xA;@app.get(&#34;/&#34;)&#xA;def read_root():&#xA;    return {&#34;Hello&#34;: &#34;World&#34;}&#xA;&#xA;&#xA;@app.get(&#34;/items/{item_id}&#34;)&#xA;def read_item(item_id: int, q: Union[str, None] = None):&#xA;    return {&#34;item_id&#34;: item_id, &#34;q&#34;: q}&#xA;&#xA;&#xA;@app.put(&#34;/items/{item_id}&#34;)&#xA;def update_item(item_id: int, item: Item):&#xA;    return {&#34;item_name&#34;: item.name, &#34;item_id&#34;: item_id}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The server should reload automatically (because you added &lt;code&gt;--reload&lt;/code&gt; to the &lt;code&gt;uvicorn&lt;/code&gt; command above).&lt;/p&gt; &#xA;&lt;h3&gt;Interactive API docs upgrade&lt;/h3&gt; &#xA;&lt;p&gt;Now go to &lt;a href=&#34;http://127.0.0.1:8000/docs&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;&lt;/a&gt;&lt;a href=&#34;http://127.0.0.1:8000/docs&#34;&gt;http://127.0.0.1:8000/docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The interactive API documentation will be automatically updated, including the new body:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/index/index-03-swagger-02.png&#34; alt=&#34;Swagger UI&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Click on the button &#34;Try it out&#34;, it allows you to fill the parameters and directly interact with the API:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/index/index-04-swagger-03.png&#34; alt=&#34;Swagger UI interaction&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Then click on the &#34;Execute&#34; button, the user interface will communicate with your API, send the parameters, get the results and show them on the screen:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/index/index-05-swagger-04.png&#34; alt=&#34;Swagger UI interaction&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Alternative API docs upgrade&lt;/h3&gt; &#xA;&lt;p&gt;And now, go to &lt;a href=&#34;http://127.0.0.1:8000/redoc&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;&lt;/a&gt;&lt;a href=&#34;http://127.0.0.1:8000/redoc&#34;&gt;http://127.0.0.1:8000/redoc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The alternative documentation will also reflect the new query parameter and body:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/index/index-06-redoc-02.png&#34; alt=&#34;ReDoc&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Recap&lt;/h3&gt; &#xA;&lt;p&gt;In summary, you declare &lt;strong&gt;once&lt;/strong&gt; the types of parameters, body, etc. as function parameters.&lt;/p&gt; &#xA;&lt;p&gt;You do that with standard modern Python types.&lt;/p&gt; &#xA;&lt;p&gt;You don&#39;t have to learn a new syntax, the methods or classes of a specific library, etc.&lt;/p&gt; &#xA;&lt;p&gt;Just standard &lt;strong&gt;Python 3.6+&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, for an &lt;code&gt;int&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;item_id: int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or for a more complex &lt;code&gt;Item&lt;/code&gt; model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;item: Item&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...and with that single declaration you get:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Editor support, including: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Completion.&lt;/li&gt; &#xA;   &lt;li&gt;Type checks.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Validation of data: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Automatic and clear errors when the data is invalid.&lt;/li&gt; &#xA;   &lt;li&gt;Validation even for deeply nested JSON objects.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;abbr title=&#34;also known as: serialization, parsing, marshalling&#34;&gt;Conversion&lt;/abbr&gt; of input data: coming from the network to Python data and types. Reading from: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;JSON.&lt;/li&gt; &#xA;   &lt;li&gt;Path parameters.&lt;/li&gt; &#xA;   &lt;li&gt;Query parameters.&lt;/li&gt; &#xA;   &lt;li&gt;Cookies.&lt;/li&gt; &#xA;   &lt;li&gt;Headers.&lt;/li&gt; &#xA;   &lt;li&gt;Forms.&lt;/li&gt; &#xA;   &lt;li&gt;Files.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;abbr title=&#34;also known as: serialization, parsing, marshalling&#34;&gt;Conversion&lt;/abbr&gt; of output data: converting from Python data and types to network data (as JSON): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Convert Python types (&lt;code&gt;str&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, etc).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;datetime&lt;/code&gt; objects.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;UUID&lt;/code&gt; objects.&lt;/li&gt; &#xA;   &lt;li&gt;Database models.&lt;/li&gt; &#xA;   &lt;li&gt;...and many more.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Automatic interactive API documentation, including 2 alternative user interfaces: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Swagger UI.&lt;/li&gt; &#xA;   &lt;li&gt;ReDoc.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Coming back to the previous code example, &lt;strong&gt;FastAPI&lt;/strong&gt; will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Validate that there is an &lt;code&gt;item_id&lt;/code&gt; in the path for &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;PUT&lt;/code&gt; requests.&lt;/li&gt; &#xA; &lt;li&gt;Validate that the &lt;code&gt;item_id&lt;/code&gt; is of type &lt;code&gt;int&lt;/code&gt; for &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;PUT&lt;/code&gt; requests. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If it is not, the client will see a useful, clear error.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Check if there is an optional query parameter named &lt;code&gt;q&lt;/code&gt; (as in &lt;code&gt;http://127.0.0.1:8000/items/foo?q=somequery&lt;/code&gt;) for &lt;code&gt;GET&lt;/code&gt; requests. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;As the &lt;code&gt;q&lt;/code&gt; parameter is declared with &lt;code&gt;= None&lt;/code&gt;, it is optional.&lt;/li&gt; &#xA;   &lt;li&gt;Without the &lt;code&gt;None&lt;/code&gt; it would be required (as is the body in the case with &lt;code&gt;PUT&lt;/code&gt;).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;For &lt;code&gt;PUT&lt;/code&gt; requests to &lt;code&gt;/items/{item_id}&lt;/code&gt;, Read the body as JSON: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Check that it has a required attribute &lt;code&gt;name&lt;/code&gt; that should be a &lt;code&gt;str&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Check that it has a required attribute &lt;code&gt;price&lt;/code&gt; that has to be a &lt;code&gt;float&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Check that it has an optional attribute &lt;code&gt;is_offer&lt;/code&gt;, that should be a &lt;code&gt;bool&lt;/code&gt;, if present.&lt;/li&gt; &#xA;   &lt;li&gt;All this would also work for deeply nested JSON objects.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Convert from and to JSON automatically.&lt;/li&gt; &#xA; &lt;li&gt;Document everything with OpenAPI, that can be used by: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Interactive documentation systems.&lt;/li&gt; &#xA;   &lt;li&gt;Automatic client code generation systems, for many languages.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Provide 2 interactive documentation web interfaces directly.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;We just scratched the surface, but you already get the idea of how it all works.&lt;/p&gt; &#xA;&lt;p&gt;Try changing the line with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;    return {&#34;item_name&#34;: item.name, &#34;item_id&#34;: item_id}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...from:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;        ... &#34;item_name&#34;: item.name ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;        ... &#34;item_price&#34;: item.price ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...and see how your editor will auto-complete the attributes and know their types:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/vscode-completion.png&#34; alt=&#34;editor support&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For a more complete example including more features, see the &lt;a href=&#34;https://fastapi.tiangolo.com/tutorial/&#34;&gt;Tutorial - User Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Spoiler alert&lt;/strong&gt;: the tutorial - user guide includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Declaration of &lt;strong&gt;parameters&lt;/strong&gt; from other different places as: &lt;strong&gt;headers&lt;/strong&gt;, &lt;strong&gt;cookies&lt;/strong&gt;, &lt;strong&gt;form fields&lt;/strong&gt; and &lt;strong&gt;files&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;How to set &lt;strong&gt;validation constraints&lt;/strong&gt; as &lt;code&gt;maximum_length&lt;/code&gt; or &lt;code&gt;regex&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A very powerful and easy to use &lt;strong&gt;&lt;abbr title=&#34;also known as components, resources, providers, services, injectables&#34;&gt;Dependency Injection&lt;/abbr&gt;&lt;/strong&gt; system.&lt;/li&gt; &#xA; &lt;li&gt;Security and authentication, including support for &lt;strong&gt;OAuth2&lt;/strong&gt; with &lt;strong&gt;JWT tokens&lt;/strong&gt; and &lt;strong&gt;HTTP Basic&lt;/strong&gt; auth.&lt;/li&gt; &#xA; &lt;li&gt;More advanced (but equally easy) techniques for declaring &lt;strong&gt;deeply nested JSON models&lt;/strong&gt; (thanks to Pydantic).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;GraphQL&lt;/strong&gt; integration with &lt;a href=&#34;https://strawberry.rocks&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;Strawberry&lt;/a&gt; and other libraries.&lt;/li&gt; &#xA; &lt;li&gt;Many extra features (thanks to Starlette) as: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;WebSockets&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;extremely easy tests based on &lt;code&gt;requests&lt;/code&gt; and &lt;code&gt;pytest&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;CORS&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Cookie Sessions&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;...and more.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;Independent TechEmpower benchmarks show &lt;strong&gt;FastAPI&lt;/strong&gt; applications running under Uvicorn as &lt;a href=&#34;https://www.techempower.com/benchmarks/#section=test&amp;amp;runid=7464e520-0dc2-473d-bd34-dbdfd7e85911&amp;amp;hw=ph&amp;amp;test=query&amp;amp;l=zijzen-7&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;one of the fastest Python frameworks available&lt;/a&gt;, only below Starlette and Uvicorn themselves (used internally by FastAPI). (*)&lt;/p&gt; &#xA;&lt;p&gt;To understand more about it, see the section &lt;a href=&#34;https://fastapi.tiangolo.com/benchmarks/&#34; class=&#34;internal-link&#34; target=&#34;_blank&#34;&gt;Benchmarks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Optional Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Used by Pydantic:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/esnme/ultrajson&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ujson&lt;/code&gt;&lt;/a&gt; - for faster JSON &lt;abbr title=&#34;converting the string that comes from an HTTP request into Python data&#34;&gt;&#34;parsing&#34;&lt;/abbr&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JoshData/python-email-validator&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;email_validator&lt;/code&gt;&lt;/a&gt; - for email validation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Used by Starlette:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://requests.readthedocs.io&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;requests&lt;/code&gt;&lt;/a&gt; - Required if you want to use the &lt;code&gt;TestClient&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jinja.palletsprojects.com&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;jinja2&lt;/code&gt;&lt;/a&gt; - Required if you want to use the default template configuration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://andrew-d.github.io/python-multipart/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;python-multipart&lt;/code&gt;&lt;/a&gt; - Required if you want to support form &lt;abbr title=&#34;converting the string that comes from an HTTP request into Python data&#34;&gt;&#34;parsing&#34;&lt;/abbr&gt;, with &lt;code&gt;request.form()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pythonhosted.org/itsdangerous/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;itsdangerous&lt;/code&gt;&lt;/a&gt; - Required for &lt;code&gt;SessionMiddleware&lt;/code&gt; support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pyyaml.org/wiki/PyYAMLDocumentation&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;pyyaml&lt;/code&gt;&lt;/a&gt; - Required for Starlette&#39;s &lt;code&gt;SchemaGenerator&lt;/code&gt; support (you probably don&#39;t need it with FastAPI).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/esnme/ultrajson&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ujson&lt;/code&gt;&lt;/a&gt; - Required if you want to use &lt;code&gt;UJSONResponse&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Used by FastAPI / Starlette:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.uvicorn.org&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;uvicorn&lt;/code&gt;&lt;/a&gt; - for the server that loads and serves your application.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ijl/orjson&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;orjson&lt;/code&gt;&lt;/a&gt; - Required if you want to use &lt;code&gt;ORJSONResponse&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can install all of these with &lt;code&gt;pip install &#34;fastapi[all]&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the terms of the MIT license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Gioman101/FlipperAmiibo</title>
    <updated>2022-07-31T02:03:24Z</updated>
    <id>tag:github.com,2022-07-31:/Gioman101/FlipperAmiibo</id>
    <link href="https://github.com/Gioman101/FlipperAmiibo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Made to be used with Flipper just drag the folder into NFC&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FlipperAmiibo&lt;/h1&gt; &#xA;&lt;p&gt;A collection of FlipperZero NFC files that emulate Amiibo&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RogueMaster/FlipperAmiibo/archive/refs/heads/main.zip&#34;&gt;Download&lt;/a&gt; this repository as an archive&lt;/li&gt; &#xA; &lt;li&gt;Extract the archive into the &lt;code&gt;nfc&lt;/code&gt; directory on your Flipper&#39;s SD card.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>