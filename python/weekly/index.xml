<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-07T01:55:30Z</updated>
  <subtitle>Weekly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>VRSEN/agency-swarm</title>
    <updated>2024-01-07T01:55:30Z</updated>
    <id>tag:github.com,2024-01-07:/VRSEN/agency-swarm</id>
    <link href="https://github.com/VRSEN/agency-swarm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Agency Swarm&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/M5Pa0pLgyYU?si=f-cQV8FoiGd98uuk&#34;&gt;&lt;img src=&#34;https://firebasestorage.googleapis.com/v0/b/vrsen-ai/o/public%2Fyoutube%2FFramework.png?alt=media&amp;amp;token=ae76687f-0347-4e0c-8342-4c5d31e3f050&#34; alt=&#34;Framework&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Agency Swarm is an open-source agent orchestration framework designed to automate and streamline AI development processes. Leveraging the power of the OpenAI Assistants API, it enables the creation of a collaborative swarm of agents (Agencies), each with distinct roles and capabilities. This framework aims to replace traditional AI development methodologies with a more dynamic, flexible, and efficient agent-based system.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/drive/1qGVyK-vIoxZD0dMrMVqCxCsgL1euMLKj&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open in Colab&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://youtube.com/@vrsen/&#34;&gt;&lt;img src=&#34;https://img.shields.io/youtube/channel/subscribers/UCSv4qL8vmoSH7GaPjuqRiCQ&#34; alt=&#34;Subscribe on YouTube&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/__vrsen__&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/__vrsen__.svg?style=social&amp;amp;label=Follow%20%40__vrsen__&#34; alt=&#34;Follow on Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Customizable Agent Roles&lt;/strong&gt;: Define roles like CEO, virtual assistant, developer, etc., and customize their functionalities with &lt;a href=&#34;https://platform.openai.com/docs/assistants/overview&#34;&gt;Assistants API&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Full Control Over Prompts&lt;/strong&gt;: Avoid conflicts and restrictions of pre-defined prompts, allowing full customization.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tool Creation&lt;/strong&gt;: Tools within Agency Swarm are created using &lt;a href=&#34;https://github.com/jxnl/instructor&#34;&gt;Instructor&lt;/a&gt;, which provides a convenient interface and automatic type validation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Efficient Communication&lt;/strong&gt;: Agents communicate through a specially designed &#34;send message&#34; tool based on their own descriptions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;State Management&lt;/strong&gt;: Agency Swarm efficiently manages the state of your assistants on OpenAI, maintaining it in a special &lt;code&gt;settings.json&lt;/code&gt; file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install git+https://github.com/VRSEN/agency-swarm.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Set Your OpenAI Key&lt;/strong&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from agency_swarm import set_openai_key&#xA;set_openai_key(&#34;YOUR_API_KEY&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Create Tools&lt;/strong&gt;: Define your custom tools with &lt;a href=&#34;https://github.com/jxnl/instructor&#34;&gt;Instructor&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from agency_swarm.tools import BaseTool&#xA;from pydantic import Field&#xA;&#xA;class MyCustomTool(BaseTool):&#xA;    &#34;&#34;&#34;&#xA;    A brief description of what the custom tool does. &#xA;    The docstring should clearly explain the tool&#39;s purpose and functionality.&#xA;    &#34;&#34;&#34;&#xA;&#xA;    # Define the fields with descriptions using Pydantic Field&#xA;    example_field: str = Field(&#xA;        ..., description=&#34;Description of the example field, explaining its purpose and usage.&#34;&#xA;    )&#xA;&#xA;    # Additional fields as required&#xA;    # ...&#xA;&#xA;    def run(self):&#xA;        &#34;&#34;&#34;&#xA;        The implementation of the run method, where the tool&#39;s main functionality is executed.&#xA;        This method should utilize the fields defined above to perform its task.&#xA;        Doc string description is not required for this method.&#xA;        &#34;&#34;&#34;&#xA;&#xA;        # Your custom tool logic goes here&#xA;        do_something(self.example_field)&#xA;&#xA;        # Return the result of the tool&#39;s operation&#xA;        return &#34;Result of MyCustomTool operation&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NEW&lt;/strong&gt;: Import in 1 line of code from &lt;a href=&#34;https://python.langchain.com/docs/integrations/tools&#34;&gt;Langchain&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from langchain.tools import YouTubeSearchTool&#xA;from agency_swarm.tools import ToolFactory&#xA;&#xA;LangchainTool = ToolFactory.from_langchain_tool(YouTubeSearchTool)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from langchain.agents import load_tools&#xA;&#xA;tools = load_tools(&#xA;    [&#34;arxiv&#34;, &#34;human&#34;],&#xA;)&#xA;&#xA;tools = ToolFactory.from_langchain_tools(tools)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Define Agent Roles&lt;/strong&gt;: Start by defining the roles of your agents. For example, a CEO agent for managing tasks and a developer agent for executing tasks.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from agency_swarm import Agent&#xA;&#xA;ceo = Agent(name=&#34;CEO&#34;,&#xA;            description=&#34;Responsible for client communication, task planning and management.&#34;,&#xA;            instructions=&#34;You must converse with other agents to ensure complete task execution.&#34;, # can be a file like ./instructions.md&#xA;            files_folder=None,&#xA;            tools=[MyCustomTool, LangchainTool])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Define Agency Communication Flows&lt;/strong&gt;: Establish how your agents will communicate with each other.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from agency_swarm import Agency&#xA;&#xA;agency = Agency([&#xA;    ceo,  # CEO will be the entry point for communication with the user&#xA;    [ceo, dev],  # CEO can initiate communication with Developer&#xA;    [ceo, va],   # CEO can initiate communication with Virtual Assistant&#xA;    [dev, va]    # Developer can initiate communication with Virtual Assistant&#xA;], shared_instructions=&#39;agency_manifesto.md&#39;) # shared instructions for all agents&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Agency Swarm, communication flows are directional, meaning they are established from left to right in the agency_chart definition. For instance, in the example above, the CEO can initiate a chat with the developer (dev), and the developer can respond in this chat. However, the developer cannot initiate a chat with the CEO. The developer can initiate a chat with the virtual assistant (va) and assign new tasks.&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Run Demo&lt;/strong&gt;: Run the demo to see your agents in action!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;agency.demo_gradio(height=900)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Terminal version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;agency.run_demo()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Get Completion&lt;/strong&gt;: Get completion from the agency:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;completion_output = agency.get_completion(&#34;Please create a new website for our client.&#34;, yield_messages=False)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Creating Agent Templates Locally (CLI)&lt;/h2&gt; &#xA;&lt;p&gt;This CLI command simplifies the process of creating a structured environment for each agent.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;strong&gt;Command Syntax:&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;agency-swarm create-agent-template --name &#34;AgentName&#34; --description &#34;Agent Description&#34; [--path &#34;/path/to/directory&#34;] [--use_txt]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Folder Structure&lt;/h3&gt; &#xA;&lt;p&gt;When you run the &lt;code&gt;create-agent-template&lt;/code&gt; command, it creates the following folder structure for your agent:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/your-specified-path/&#xA;│&#xA;├── agency_manifesto.md or .txt # Agency&#39;s guiding principles (created if not exists)&#xA;└── agent_name/                 # Directory for the specific agent&#xA;    ├── agent_name.py           # The main agent class file&#xA;    ├── __init__.py             # Initializes the agent folder as a Python package&#xA;    ├── instructions.md or .txt # Instruction document for the agent&#xA;    ├── tools.py                # Tools specific to the agent&#xA;    ├── files/                  # Directory for additional resources&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This structure ensures that each agent has its dedicated space with all necessary files to start working on its specific tasks. The &lt;code&gt;tools.py&lt;/code&gt; can be customized to include tools and functionalities specific to the agent&#39;s role.&lt;/p&gt; &#xA;&lt;h2&gt;Future Enhancements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Asynchronous communication and task handling.&lt;/li&gt; &#xA; &lt;li&gt;Creation of agencies that can autonomously create other agencies.&lt;/li&gt; &#xA; &lt;li&gt;Inter-agency communication for a self-expanding system.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions to Agency Swarm! Please feel free to submit issues, pull requests, and suggestions to our GitHub repository.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Agency Swarm is open-source and licensed under &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Need Help?&lt;/h2&gt; &#xA;&lt;p&gt;If you require assistance in creating custom agent swarms or have any specific queries related to Agency Swarm, feel free to reach out through my website: &lt;a href=&#34;https://vrsen.ai&#34;&gt;vrsen.ai&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>shidahuilang/shuyuan</title>
    <updated>2024-01-07T01:55:30Z</updated>
    <id>tag:github.com,2024-01-07:/shidahuilang/shuyuan</id>
    <link href="https://github.com/shidahuilang/shuyuan" rel="alternate"></link>
    <summary type="html">&lt;p&gt;香色闺阁+阅读3.0书源+源阅读+爱阅书香+花火阅读+读不舍手+IPTV源+IPA巨魔应用=自动更新&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;自动更新时间&lt;/strong&gt; 2024-01-04 22:15:22 CST+0800&lt;/p&gt; &#xA;&lt;h4&gt;🚩 最新阅读书源修复-每隔3天自动更新一次（读不舍手-源阅读+花火阅读通用）&lt;/h4&gt; &#xA;&lt;h4&gt;🚩 获取后的书源会自动效验&lt;/h4&gt; &#xA;&lt;!-- 更新位置开始 --&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;阅读源总数&lt;/th&gt; &#xA;   &lt;th&gt;有效书源数&lt;/th&gt; &#xA;   &lt;th&gt;无效书源数&lt;/th&gt; &#xA;   &lt;th&gt;重复书源数&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span style=&#34;color:green;&#34;&gt;3967&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span style=&#34;color:blue;&#34;&gt;2613&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span style=&#34;color:red;&#34;&gt;1354&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span style=&#34;color:orange;&#34;&gt;945&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- 更新位置结束 --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shidahuilang/shuyuan/shuyuan/icons/shuyuan.png&#34; alt=&#34;shuyuan.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;🚩 效验书源链接&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://raw.githubusercontent.com/shidahuilang/shuyuan/shuyuan/good.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;未效验书源链接&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://mirror.ghproxy.com/https://raw.githubusercontent.com/shidahuilang/shuyuan/shuyuan/book.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;🚩 规则净化&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://raw.githubusercontent.com/shidahuilang/shuyuan/shuyuan/jinghua.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;🚩 TTS-70种语音包&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://raw.githubusercontent.com/shidahuilang/shuyuan/shuyuan/tts.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;语音包生成&lt;a href=&#34;https://tts.dalang.eu.org/&#34;&gt;点我&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;🚩 香色闺阁-每隔3天自动更新一次&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;自动更新时间&lt;/strong&gt; 2024-01-04 22:15:22 CST+0800&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;https://raw.githubusercontent.com/shidahuilang/shuyuan/shuyuan/xsreader/new/resources.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;🚩 爱阅书香书源&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;https://github.com/shidahuilang/shuyuan/raw/shuyuan/aiyueshuxiang.ibs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;🚩 IPTV源&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://iptv.228088.xyz/cn.m3u&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://cdn.jsdelivr.net/gh/shidahuilang/shuyuan@shuyuan/iptv.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;🚩 ESign/AltStore/SideStore/锤子助手 巨魔商店应用&lt;/h4&gt; &#xA;&lt;p&gt;导入链接&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://raw.githubusercontent.com/shidahuilang/shuyuan/shuyuan/ipa.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/shidahuilang/shuyuan&#34;&gt;&lt;img src=&#34;https://starchart.cc/shidahuilang/shuyuan.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>flet-dev/flet</title>
    <updated>2024-01-07T01:55:30Z</updated>
    <id>tag:github.com,2024-01-07:/flet-dev/flet</id>
    <link href="https://github.com/flet-dev/flet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flet enables developers to easily build realtime web, mobile and desktop apps in Python. No frontend experience required.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flet&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/flet-dev/flet/main/media/logo/flet-logo.svg?sanitize=true&#34; width=&#34;50%&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ci.appveyor.com/project/flet-dev/flet/branch/main&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/xwablctxslvey576/branch/main?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Flet is a framework that enables you to easily build real-time web, mobile, and desktop apps in your favorite language and securely share them with your team. No frontend experience is required.&lt;/p&gt; &#xA;&lt;h3&gt;⚡From idea to app in minutes&lt;/h3&gt; &#xA;&lt;p&gt;An internal tool or a dashboard for your team, weekend project, data entry form, kiosk app, or high-fidelity prototype - Flet is an ideal framework to quickly hack great-looking interactive apps to serve a group of users.&lt;/p&gt; &#xA;&lt;h3&gt;📐 Simple architecture&lt;/h3&gt; &#xA;&lt;p&gt;No more complex architecture with JavaScript frontend, REST API backend, database, cache, etc. With Flet you just write a monolith stateful app in Python only and get multi-user, real-time Single-Page Application (SPA).&lt;/p&gt; &#xA;&lt;h3&gt;🔋Batteries included&lt;/h3&gt; &#xA;&lt;p&gt;To start developing with Flet, you just need your favorite IDE or text editor. No SDKs, no thousands of dependencies, no complex tooling - Flet has a built-in web server with assets hosting and desktop clients.&lt;/p&gt; &#xA;&lt;h3&gt;&amp;nbsp;&lt;img src=&#34;https://raw.githubusercontent.com/flet-dev/flet/main/media/flutter/icon_flutter.svg?sanitize=true&#34; height=&#34;20px&#34;&gt;&amp;nbsp;&amp;nbsp;Powered by Flutter&lt;/h3&gt; &#xA;&lt;p&gt;Flet UI is built with &lt;a href=&#34;https://flutter.dev/&#34;&gt;Flutter&lt;/a&gt;, so your app looks professional and could be delivered to any platform. Flet simplifies the Flutter model by combining smaller &#34;widgets&#34; to ready-to-use &#34;controls&#34; with an imperative programming model.&lt;/p&gt; &#xA;&lt;h3&gt;🌐 Speaks your language&lt;/h3&gt; &#xA;&lt;p&gt;Flet is language-agnostic, so anyone on your team could develop Flet apps in their favorite language. &lt;a href=&#34;https://flet.dev/docs/guides/python/getting-started&#34;&gt;Python&lt;/a&gt; is already supported, Go, C# and others are &lt;a href=&#34;https://flet.dev/roadmap&#34;&gt;coming next&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;📱 Deliver to any device&lt;/h3&gt; &#xA;&lt;p&gt;Deploy Flet app as a web app and view it in a browser. Package it as a standalone desktop app for Windows, macOS, and Linux. Install it on mobile as &lt;a href=&#34;https://web.dev/what-are-pwas/&#34;&gt;PWA&lt;/a&gt; or view via Flet app for iOS and Android.&lt;/p&gt; &#xA;&lt;h2&gt;Flet app example&lt;/h2&gt; &#xA;&lt;p&gt;At the moment you can write Flet apps in Python and other languages will be added soon.&lt;/p&gt; &#xA;&lt;p&gt;Here is a sample &#34;Counter&#34; app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import flet&#xA;from flet import IconButton, Page, Row, TextField, icons&#xA;&#xA;def main(page: Page):&#xA;    page.title = &#34;Flet counter example&#34;&#xA;    page.vertical_alignment = &#34;center&#34;&#xA;&#xA;    txt_number = TextField(value=&#34;0&#34;, text_align=&#34;right&#34;, width=100)&#xA;&#xA;    def minus_click(e):&#xA;        txt_number.value = int(txt_number.value) - 1&#xA;        page.update()&#xA;&#xA;    def plus_click(e):&#xA;        txt_number.value = int(txt_number.value) + 1&#xA;        page.update()&#xA;&#xA;    page.add(&#xA;        Row(&#xA;            [&#xA;                IconButton(icons.REMOVE, on_click=minus_click),&#xA;                txt_number,&#xA;                IconButton(icons.ADD, on_click=plus_click),&#xA;            ],&#xA;            alignment=&#34;center&#34;,&#xA;        )&#xA;    )&#xA;&#xA;flet.app(target=main)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the app install &lt;code&gt;flet&lt;/code&gt; module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install flet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and run the program:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python counter.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The app will be started in a native OS window - what a nice alternative to Electron!&lt;/p&gt; &#xA;&lt;img src=&#34;https://flet.dev/img/docs/getting-started/flet-counter-macos.png&#34; width=&#34;45%&#34;&gt; &#xA;&lt;p&gt;Now, if you want to run the app as a web app, just replace the last line with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;flet.app(target=main, view=flet.WEB_BROWSER)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;run again and now you instantly get a web app:&lt;/p&gt; &#xA;&lt;img src=&#34;https://flet.dev/img/docs/getting-started/flet-counter-safari.png&#34; width=&#34;60%&#34;&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flet.dev/docs/guides/python/getting-started&#34;&gt;Creating Flet apps in Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flet.dev/docs/controls&#34;&gt;Controls reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sample apps in Python&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flet-dev/examples/raw/main/python/apps/greeter/greeter.py&#34;&gt;Greeter&lt;/a&gt; (&lt;a href=&#34;https://gallery.flet.dev/greeter/&#34;&gt;Online Demo&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flet-dev/examples/raw/main/python/apps/counter/counter.py&#34;&gt;Counter&lt;/a&gt; (&lt;a href=&#34;https://gallery.flet.dev/counter/&#34;&gt;Online Demo&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flet-dev/examples/raw/main/python/apps/todo/todo.py&#34;&gt;To-Do&lt;/a&gt; (&lt;a href=&#34;https://gallery.flet.dev/todo/&#34;&gt;Online Demo&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flet-dev/examples/raw/main/python/apps/icons-browser/main.py&#34;&gt;Icons Browser&lt;/a&gt; (&lt;a href=&#34;https://gallery.flet.dev/icons-browser/&#34;&gt;Online Demo&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More demo applications can be found in the &lt;a href=&#34;https://flet.dev/gallery/&#34;&gt;gallery&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flet-dev/flet/discussions&#34;&gt;Discussions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/dzWXP8SHG8&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/fletdev&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;mailto:hello@flet.dev&#34;&gt;Email&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribute to this wonderful project&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://github.com/flet-dev/flet/raw/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>