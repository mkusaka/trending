<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-17T01:57:19Z</updated>
  <subtitle>Weekly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>OpenBMB/ChatDev</title>
    <updated>2023-09-17T01:57:19Z</updated>
    <id>tag:github.com,2023-09-17:/OpenBMB/ChatDev</id>
    <link href="https://github.com/OpenBMB/ChatDev" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Create Customized Software using Natural Language Idea (through Multi-Agent Collaboration)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Communicative Agents for Software Development&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/OpenBMB/ChatDev/main/misc/logo1.png&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; „ÄêEnglish | &lt;a href=&#34;https://raw.githubusercontent.com/OpenBMB/ChatDev/main/README-Chinese.md&#34;&gt;Chinese&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/OpenBMB/ChatDev/main/README-Japanese.md&#34;&gt;Japanese&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/OpenBMB/ChatDev/main/README-Korean.md&#34;&gt;Korean&lt;/a&gt;„Äë &lt;/p&gt; &#xA;&lt;h2&gt;üìñ Overview&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ChatDev&lt;/strong&gt; stands as a &lt;strong&gt;virtual software company&lt;/strong&gt; that operates through various &lt;strong&gt;intelligent agents&lt;/strong&gt; holding different roles, including Chief Executive Officer, Chief Technology Officer, Programmer, Tester, and more. These agents form a multi-agent organizational structure and are united by a mission to &#34;revolutionize the digital world through programming.&#34; The agents within ChatDev &lt;strong&gt;collaborate&lt;/strong&gt; by participating in specialized functional seminars, including tasks such as designing, coding, testing, and documenting.&lt;/li&gt; &#xA; &lt;li&gt;The primary objective of ChatDev is to offer an &lt;strong&gt;easy-to-use&lt;/strong&gt;, &lt;strong&gt;highly customizable&lt;/strong&gt; and &lt;strong&gt;extendable&lt;/strong&gt; framework, which is based on large language models (LLMs) and serves as an ideal scenario for studying collective intelligence.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üì∞ News&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;September 1, 2023: The Art mode is available now! You can use agent to generate images used in the software, try &lt;code&gt;python3 run.py --config &#34;Art&#34;&lt;/code&gt;.&lt;/strong&gt; See &lt;a href=&#34;https://raw.githubusercontent.com/OpenBMB/ChatDev/main/WareHouse/gomokugameArtExample_THUNLP_20230831122822&#34;&gt;example&lt;/a&gt; here.&lt;/li&gt; &#xA; &lt;li&gt;August 28, 2023: The system is publicly available.&lt;/li&gt; &#xA; &lt;li&gt;August 17, 2023: The V1.0.0 version was ready for release.&lt;/li&gt; &#xA; &lt;li&gt;July 30, 2023: Users can customize ChatChain, Phase, and Role settings. Additionally, both online Log mode and replay mode are now supported.&lt;/li&gt; &#xA; &lt;li&gt;July 16, 2023: The &lt;a href=&#34;https://arxiv.org/abs/2307.07924&#34;&gt;preprint paper&lt;/a&gt; associated with this project was published.&lt;/li&gt; &#xA; &lt;li&gt;June 30, 2023: The initial version of the &lt;code&gt;ChatDev&lt;/code&gt; repository was released.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ùì What Can ChatDev Do?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/OpenBMB/ChatDev/main/misc/intro.png&#34; alt=&#34;intro&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/OpenBMB/ChatDev/assets/11889052/80d01d2f-677b-4399-ad8b-f7af9bb62b72&#34;&gt;https://github.com/OpenBMB/ChatDev/assets/11889052/80d01d2f-677b-4399-ad8b-f7af9bb62b72&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚ö°Ô∏è Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;To get started, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Clone the GitHub Repository:&lt;/strong&gt; Begin by cloning the repository using the command: &lt;pre&gt;&lt;code&gt;git clone https://github.com/OpenBMB/ChatDev.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Set Up Python Environment:&lt;/strong&gt; Ensure you have a version 3.9 or higher Python environment. You can create and activate this environment using the following commands, replacing &lt;code&gt;ChatDev_conda_env&lt;/code&gt; with your preferred environment name: &lt;pre&gt;&lt;code&gt;conda create -n ChatDev_conda_env python=3.9 -y&#xA;conda activate ChatDev_conda_env&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Install Dependencies:&lt;/strong&gt; Move into the &lt;code&gt;ChatDev&lt;/code&gt; directory and install the necessary dependencies by running: &lt;pre&gt;&lt;code&gt;cd ChatDev&#xA;pip3 install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Set OpenAI API Key:&lt;/strong&gt; Export your OpenAI API key as an environment variable. Replace &lt;code&gt;&#34;your_OpenAI_API_key&#34;&lt;/code&gt; with your actual API key. Remember that this environment variable is session-specific, so you need to set it again if you open a new terminal session. On Unix/Linux: &lt;pre&gt;&lt;code&gt;export OPENAI_API_KEY=&#34;your_OpenAI_API_key&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; On Windows: &lt;pre&gt;&lt;code&gt;$env:OPENAI_API_KEY=&#34;your_OpenAI_API_key&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Build Your Software:&lt;/strong&gt; Use the following command to initiate the building of your software, replacing &lt;code&gt;[description_of_your_idea]&lt;/code&gt; with your idea&#39;s description and &lt;code&gt;[project_name]&lt;/code&gt; with your desired project name: On Unix/Linux: &lt;pre&gt;&lt;code&gt;python3 run.py --task &#34;[description_of_your_idea]&#34; --name &#34;[project_name]&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; On Windows: &lt;pre&gt;&lt;code&gt;python run.py --task &#34;[description_of_your_idea]&#34; --name &#34;[project_name]&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Run Your Software:&lt;/strong&gt; Once generated, you can find your software in the &lt;code&gt;WareHouse&lt;/code&gt; directory under a specific project folder, such as &lt;code&gt;project_name_DefaultOrganization_timestamp&lt;/code&gt;. Run your software using the following command within that directory: On Unix/Linux: &lt;pre&gt;&lt;code&gt;cd WareHouse/project_name_DefaultOrganization_timestamp&#xA;python3 main.py&#xA;&lt;/code&gt;&lt;/pre&gt; On Windows: &lt;pre&gt;&lt;code&gt;cd WareHouse/project_name_DefaultOrganization_timestamp&#xA;python main.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;‚ú®Ô∏è Advanced Skills&lt;/h2&gt; &#xA;&lt;p&gt;For more detailed information, please refer to our &lt;a href=&#34;https://raw.githubusercontent.com/OpenBMB/ChatDev/main/wiki.md&#34;&gt;Wiki&lt;/a&gt;, where you can find:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An introduction to all command run parameters.&lt;/li&gt; &#xA; &lt;li&gt;A straightforward guide for setting up a local web demo, which includes enhanced visualized logs, a replay demo, and a simple ChatChain Visualizer.&lt;/li&gt; &#xA; &lt;li&gt;An overview of the ChatDev framework.&lt;/li&gt; &#xA; &lt;li&gt;A comprehensive introduction to all advanced parameters in ChatChain configuration.&lt;/li&gt; &#xA; &lt;li&gt;Guides for customizing ChatDev, including: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;ChatChain: Design your own software development process (or any other process), such as &lt;code&gt;DemandAnalysis -&amp;gt; Coding -&amp;gt; Testing -&amp;gt; Manual&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Phase: Design your own phase within ChatChain, like &lt;code&gt;DemandAnalysis&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Role: Defining the various agents in your company, such as the &lt;code&gt;Chief Executive Officer&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ü§ó Share Your Software!&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Code&lt;/strong&gt;: We are enthusiastic about your interest in participating in our open-source project. If you come across any problems, don&#39;t hesitate to report them. Feel free to create a pull request if you have any inquiries or if you are prepared to share your work with us! Your contributions are highly valued. Please let me know if there&#39;s anything else you need assistance!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Company&lt;/strong&gt;: Creating your own customized &#34;ChatDev Company&#34; is a breeze. This personalized setup involves three simple configuration JSON files. Check out the example provided in the &lt;code&gt;CompanyConfig/Default&lt;/code&gt; directory. For detailed instructions on customization, refer to our &lt;a href=&#34;https://raw.githubusercontent.com/OpenBMB/ChatDev/main/wiki.md&#34;&gt;Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Software&lt;/strong&gt;: Whenever you develop software using ChatDev, a corresponding folder is generated containing all the essential information. Sharing your work with us is as simple as making a pull request. Here&#39;s an example: execute the command &lt;code&gt;python3 run.py --task &#34;design a 2048 game&#34; --name &#34;2048&#34; --org &#34;THUNLP&#34; --config &#34;Default&#34;&lt;/code&gt;. This will create a software package and generate a folder named &lt;code&gt;/WareHouse/2048_THUNLP_timestamp&lt;/code&gt;. Inside, you&#39;ll find:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All the files and documents related to the 2048 game software&lt;/li&gt; &#xA; &lt;li&gt;Configuration files of the company responsible for this software, including the three JSON config files from &lt;code&gt;CompanyConfig/Default&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;A comprehensive log detailing the software&#39;s building process that can be used to replay (&lt;code&gt;timestamp.log&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;The initial prompt used to create this software (&lt;code&gt;2048.prompt&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;See community contributed software &lt;a href=&#34;https://raw.githubusercontent.com/OpenBMB/ChatDev/main/Contribution.md&#34;&gt;here&lt;/a&gt;!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Software Contributors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/qianc62&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/48988402?v=4&#34; alt=&#34;Contributor&#34; style=&#34;width:5%; border-radius: 50%;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/thinkwee&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/11889052?v=4&#34; alt=&#34;Contributor&#34; style=&#34;width:5%; border-radius: 50%;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/NA-Wen&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/92134380?v=4&#34; alt=&#34;Contributor&#34; style=&#34;width:5%; border-radius: 50%;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/lijiahao2022&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/111221887?v=4&#34; alt=&#34;Contributor&#34; style=&#34;width:5%; border-radius: 50%;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/GeekyWizKid&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/133981481?v=4&#34; alt=&#34;Contributor&#34; style=&#34;width:5%; border-radius: 50%;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üìë Citation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{qian2023communicative,&#xA;      title={Communicative Agents for Software Development}, &#xA;      author={Chen Qian and Xin Cong and Wei Liu and Cheng Yang and Weize Chen and Yusheng Su and Yufan Dang and Jiahao Li and Juyuan Xu and Dahai Li and Zhiyuan Liu and Maosong Sun},&#xA;      year={2023},&#xA;      eprint={2307.07924},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.SE}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;‚öñÔ∏è License&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The purpose of ChatDev is exclusively for research purposes.&lt;/li&gt; &#xA; &lt;li&gt;The source code is licensed under Apache 2.0.&lt;/li&gt; &#xA; &lt;li&gt;The datasets are licensed under CC BY NC 4.0, which allows for non-commercial use only. It is important to note that any models trained using these datasets should not be employed for purposes other than research.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#openbmb/chatdev&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=openbmb/chatdev&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;If you have any questions, feedback, or would like to get in touch, please feel free to reach out to us via email at &lt;a href=&#34;mailto:chatdev.openbmb@outlook.com&#34;&gt;chatdev.openbmb@outlook.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>XPixelGroup/DiffBIR</title>
    <updated>2023-09-17T01:57:19Z</updated>
    <id>tag:github.com,2023-09-17:/XPixelGroup/DiffBIR</id>
    <link href="https://github.com/XPixelGroup/DiffBIR" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/assets/logo.png&#34; width=&#34;400&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;DiffBIR: Towards Blind Image Restoration with Generative Diffusion Prior&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2308.15070&#34;&gt;Paper&lt;/a&gt; | &lt;a href=&#34;https://0x3f3f3f3fun.github.io/projects/diffbir/&#34;&gt;Project Page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://visitor-badge.laobi.icu/badge?page_id=XPixelGroup/DiffBIR&#34; alt=&#34;visitors&#34;&gt; &lt;a href=&#34;https://openxlab.org.cn/apps/detail/linxinqi/DiffBIR-official&#34;&gt;&lt;img src=&#34;https://cdn-static.openxlab.org.cn/app-center/openxlab_app.svg?sanitize=true&#34; alt=&#34;Open in OpenXLab&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://colab.research.google.com/github/camenduru/DiffBIR-colab/blob/main/DiffBIR_colab.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://0x3f3f3f3fun.github.io/&#34;&gt;Xinqi Lin&lt;/a&gt;&lt;sup&gt;1,*&lt;/sup&gt;, &lt;a href=&#34;https://github.com/hejingwenhejingwen&#34;&gt;Jingwen He&lt;/a&gt;&lt;sup&gt;2,*&lt;/sup&gt;, &lt;a href=&#34;https://orcid.org/0000-0001-6277-5635&#34;&gt;Ziyan Chen&lt;/a&gt;&lt;sup&gt;2&lt;/sup&gt;, &lt;a href=&#34;https://scholar.google.com.tw/citations?user=gkXFhbwAAAAJ&amp;amp;hl=en&#34;&gt;Zhaoyang Lyu&lt;/a&gt;&lt;sup&gt;2&lt;/sup&gt;, &lt;a href=&#34;https://scholar.google.com/citations?user=skQROj8AAAAJ&amp;amp;hl=zh-CN&amp;amp;oi=ao&#34;&gt;Ben Fei&lt;/a&gt;&lt;sup&gt;2&lt;/sup&gt;, &lt;a href=&#34;http://daibo.info/&#34;&gt;Bo Dai&lt;/a&gt;&lt;sup&gt;2&lt;/sup&gt;, &lt;a href=&#34;https://wlouyang.github.io/&#34;&gt;Wanli Ouyang&lt;/a&gt;&lt;sup&gt;2&lt;/sup&gt;, &lt;a href=&#34;http://mmlab.siat.ac.cn/yuqiao&#34;&gt;Yu Qiao&lt;/a&gt;&lt;sup&gt;2&lt;/sup&gt;, &lt;a href=&#34;http://xpixel.group/2010/01/20/chaodong.html&#34;&gt;Chao Dong&lt;/a&gt;&lt;sup&gt;1,2&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt;Shenzhen Institute of Advanced Technology, Chinese Academy of Sciences&lt;br&gt;&lt;sup&gt;2&lt;/sup&gt;Shanghai AI Laboratory&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/assets/architecture.png&#34; style=&#34;border-radius: 15px&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;‚≠ê&lt;/span&gt;If DiffBIR is helpful for you, please help star this repo. Thanks!&lt;span&gt;ü§ó&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;üìñ&lt;/span&gt;Table Of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/#visual_results&#34;&gt;Visual Results On Real-world Images&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/#update&#34;&gt;Update&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/#todo&#34;&gt;TODO&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/#pretrained_models&#34;&gt;Pretrained Models&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/#quick_start&#34;&gt;Quick Start (gradio demo)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/#inference&#34;&gt;Inference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/#train&#34;&gt;Train&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;visual_results&#34;&gt;&lt;/a&gt;&lt;span&gt;üëÄ&lt;/span&gt;Visual Results On Real-world Images&lt;/h2&gt; &#xA;&lt;!-- &lt;details close&gt;&#xA;&lt;summary&gt;General Image Restoration&lt;/summary&gt; --&gt; &#xA;&lt;h3&gt;General Image Restoration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://imgsli.com/MTk5ODI3&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/assets/visual_results/general6.png&#34; height=&#34;223px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://imgsli.com/MTk5ODI4&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/assets/visual_results/general7.png&#34; height=&#34;223px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://imgsli.com/MTk5ODI1&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/assets/visual_results/general4.png&#34; height=&#34;223px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://imgsli.com/MTk5ODIy&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/assets/visual_results/general1.png&#34; height=&#34;223px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://imgsli.com/MTk5ODIz&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/assets/visual_results/general2.png&#34; height=&#34;223px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://imgsli.com/MTk5ODI0&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/assets/visual_results/general3.png&#34; height=&#34;223px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://imgsli.com/MjAxMjM0&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/assets/visual_results/general5.png&#34; height=&#34;223px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- &lt;/details&gt; --&gt; &#xA;&lt;!-- &lt;details close&gt; --&gt; &#xA;&lt;!-- &lt;summary&gt;Face Image Restoration&lt;/summary&gt; --&gt; &#xA;&lt;h3&gt;Face Image Restoration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://imgsli.com/MTk5ODI5&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/assets/visual_results/face1.png&#34; height=&#34;223px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://imgsli.com/MTk5ODMw&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/assets/visual_results/face2.png&#34; height=&#34;223px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://imgsli.com/MTk5ODM0&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/assets/visual_results/face4.png&#34; height=&#34;223px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://imgsli.com/MjA2MTU0&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/assets/visual_results/whole_image1.png&#34; height=&#34;370&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://imgsli.com/MjA2MTQ4&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/assets/visual_results/whole_image2.png&#34; height=&#34;370&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- [&lt;img src=&#34;assets/visual_results/whole_image3.png&#34; height=&#34;268&#34;/&gt;](https://imgsli.com/MjA1OTY2) --&gt; &#xA;&lt;!-- [&lt;img src=&#34;assets/visual_results/face3.png&#34; height=&#34;223px&#34;/&gt;](https://imgsli.com/MTk5ODMy) --&gt; &#xA;&lt;!-- [&lt;img src=&#34;assets/visual_results/face5.png&#34; height=&#34;223px&#34;/&gt;](https://imgsli.com/MTk5ODM1)  --&gt; &#xA;&lt;!-- [&lt;img src=&#34;assets/visual_results/whole_image1.png&#34; height=&#34;410&#34;/&gt;](https://imgsli.com/MjA1OTU5) --&gt; &#xA;&lt;p&gt;&lt;span&gt;‚≠ê&lt;/span&gt; Face and the background enhanced by DiffBIR.&lt;/p&gt; &#xA;&lt;!-- &lt;/details&gt; --&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;update&#34;&gt;&lt;/a&gt;&lt;span&gt;üÜï&lt;/span&gt;Update&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;2023.09.14&lt;/strong&gt;: Integrate a patch-based sampling strategy (&lt;a href=&#34;https://github.com/albarji/mixture-of-diffusers&#34;&gt;mixture-of-diffusers&lt;/a&gt;). &lt;a href=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/#general_image_inference&#34;&gt;&lt;strong&gt;Try it!&lt;/strong&gt;&lt;/a&gt; Here is an &lt;a href=&#34;https://imgsli.com/MjA2MDA1&#34;&gt;example&lt;/a&gt; with a resolution of 2396 x 1596. GPU memory usage will continue to be optimized in the future and we are looking forward to your pull requests!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2023.09.14&lt;/strong&gt;: Add support for background upsampler(DiffBIR/&lt;a href=&#34;https://github.com/xinntao/Real-ESRGAN&#34;&gt;RealESRGAN&lt;/a&gt;) in face enhancement! &lt;span&gt;üöÄ&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/#unaligned_face_inference&#34;&gt;&lt;strong&gt;Try it!&lt;/strong&gt; &amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2023.09.13&lt;/strong&gt;: Provide online demo (DiffBIR-official) in &lt;a href=&#34;https://openxlab.org.cn/apps/detail/linxinqi/DiffBIR-official&#34;&gt;OpenXLab&lt;/a&gt;, which integrates both general model and face model. Please have a try! &lt;a href=&#34;https://github.com/camenduru&#34;&gt;camenduru&lt;/a&gt; also implements an online demo, thanks for his work.&lt;span&gt;ü§ó&lt;/span&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2023.09.12&lt;/strong&gt;: Upload inference code of latent image guidance and release &lt;a href=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/inputs/real47&#34;&gt;real47&lt;/a&gt; testset.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2023.09.08&lt;/strong&gt;: Add support for restoring unaligned faces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2023.09.06&lt;/strong&gt;: Update &lt;a href=&#34;https://colab.research.google.com/github/camenduru/DiffBIR-colab/blob/main/DiffBIR_colab.ipynb&#34;&gt;colab demo&lt;/a&gt;. Thanks to &lt;a href=&#34;https://github.com/camenduru&#34;&gt;camenduru&lt;/a&gt;!&lt;span&gt;ü§ó&lt;/span&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2023.08.30&lt;/strong&gt;: Repo is released.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- - [**History Updates** &gt;]() --&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;todo&#34;&gt;&lt;/a&gt;&lt;span&gt;üßó&lt;/span&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Release code and pretrained models&lt;span&gt;üíª&lt;/span&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Update links to paper and project page&lt;span&gt;üîó&lt;/span&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Release real47 testset&lt;span&gt;üíΩ&lt;/span&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Provide webui and reduce the memory usage of DiffBIR&lt;span&gt;üî•&lt;/span&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;span&gt;üî•&lt;/span&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Provide HuggingFace demo&lt;span&gt;üìì&lt;/span&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;span&gt;üî•&lt;/span&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add a patch-based sampling schedule&lt;span&gt;üîç&lt;/span&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Upload inference code of latent image guidance&lt;span&gt;üìÑ&lt;/span&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Improve the performance&lt;span&gt;ü¶∏&lt;/span&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;installation&#34;&gt;&lt;/a&gt;&lt;span&gt;‚öô&lt;/span&gt;Installation&lt;/h2&gt; &#xA;&lt;!-- - **Python** &gt;= 3.9&#xA;- **CUDA** &gt;= 11.3&#xA;- **PyTorch** &gt;= 1.12.1&#xA;- **xformers** == 0.0.16 --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# clone this repo&#xA;git clone https://github.com/XPixelGroup/DiffBIR.git&#xA;cd DiffBIR&#xA;&#xA;# create an environment with python &amp;gt;= 3.9&#xA;conda create -n diffbir python=3.9&#xA;conda activate diffbir&#xA;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- ```shell&#xA;# clone this repo&#xA;git clone https://github.com/XPixelGroup/DiffBIR.git&#xA;cd DiffBIR&#xA;&#xA;# create a conda environment with python &gt;= 3.9&#xA;conda create -n diffbir python=3.9&#xA;conda activate diffbir&#xA;&#xA;conda install pytorch==1.12.1 torchvision==0.13.1 cudatoolkit=11.3 -c pytorch&#xA;conda install xformers==0.0.16 -c xformers&#xA;&#xA;# other dependencies&#xA;pip install -r requirements.txt&#xA;``` --&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;pretrained_models&#34;&gt;&lt;/a&gt;&lt;span&gt;üß¨&lt;/span&gt;Pretrained Models&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Model Name&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;HuggingFace&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;BaiduNetdisk&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;OpenXLab&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;general_swinir_v1.ckpt&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stage1 model (SwinIR) for general image restoration.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://huggingface.co/lxq007/DiffBIR/resolve/main/general_swinir_v1.ckpt&#34;&gt;download&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1uvSvJgcoL_Knj0h22-9TvA?pwd=v3v6&#34;&gt;download&lt;/a&gt; (pwd: v3v6)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://download.openxlab.org.cn/models/linxinqi/DiffBIR/weight//diffbir_general_swinir_v1&#34;&gt;download&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;general_full_v1.ckpt&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Full model for general image restoration. &#34;Full&#34; means it contains both the stage1 and stage2 model.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://huggingface.co/lxq007/DiffBIR/resolve/main/general_full_v1.ckpt&#34;&gt;download&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1gLvW1nvkJStdVAKROqaYaA?pwd=86zi&#34;&gt;download&lt;/a&gt; (pwd: 86zi)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://download.openxlab.org.cn/models/linxinqi/DiffBIR/weight//diffbir_general_full_v1&#34;&gt;download&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;face_swinir_v1.ckpt&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stage1 model (SwinIR) for face restoration.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://huggingface.co/lxq007/DiffBIR/resolve/main/face_swinir_v1.ckpt&#34;&gt;download&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1cnBBC8437BJiM3q6suaK8g?pwd=xk5u&#34;&gt;download&lt;/a&gt; (pwd: xk5u)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://download.openxlab.org.cn/models/linxinqi/DiffBIR/weight//diffbir_face_swinir_v1&#34;&gt;download&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;face_full_v1.ckpt&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Full model for face restoration.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://huggingface.co/lxq007/DiffBIR/resolve/main/face_full_v1.ckpt&#34;&gt;download&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1pc04xvQybkynRfzK5Y8K0Q?pwd=ov8i&#34;&gt;download&lt;/a&gt; (pwd: ov8i)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://download.openxlab.org.cn/models/linxinqi/DiffBIR/weight//diffbir_face_full_v1&#34;&gt;download&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;quick_start&#34;&gt;&lt;/a&gt;&lt;span&gt;üõ´&lt;/span&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;https://huggingface.co/lxq007/DiffBIR/resolve/main/general_full_v1.ckpt&#34;&gt;general_full_v1.ckpt&lt;/a&gt; and &lt;a href=&#34;https://huggingface.co/lxq007/DiffBIR/resolve/main/general_swinir_v1.ckpt&#34;&gt;general_swinir_v1.ckpt&lt;/a&gt; to &lt;code&gt;weights/&lt;/code&gt;, then run the following command to interact with the gradio website.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python gradio_diffbir.py \&#xA;--ckpt weights/general_full_v1.ckpt \&#xA;--config configs/model/cldm.yaml \&#xA;--reload_swinir \&#xA;--swinir_ckpt weights/general_swinir_v1.ckpt \&#xA;--device cuda&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;kbd&gt;&lt;img src=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/assets/gradio.png&#34;&gt;&lt;/kbd&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;inference&#34;&gt;&lt;/a&gt;&lt;span&gt;‚öî&lt;/span&gt;Inference&lt;/h2&gt; &#xA;&lt;h3&gt;Full Pipeline (Remove Degradations &amp;amp; Refine Details)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a name=&#34;general_image_inference&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;General Image&lt;/h4&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;https://huggingface.co/lxq007/DiffBIR/resolve/main/general_full_v1.ckpt&#34;&gt;general_full_v1.ckpt&lt;/a&gt; and &lt;a href=&#34;https://huggingface.co/lxq007/DiffBIR/resolve/main/general_swinir_v1.ckpt&#34;&gt;general_swinir_v1.ckpt&lt;/a&gt; to &lt;code&gt;weights/&lt;/code&gt; and run the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python inference.py \&#xA;--input inputs/demo/general \&#xA;--config configs/model/cldm.yaml \&#xA;--ckpt weights/general_full_v1.ckpt \&#xA;--reload_swinir --swinir_ckpt weights/general_swinir_v1.ckpt \&#xA;--steps 50 \&#xA;--sr_scale 4 \&#xA;--image_size 512 \&#xA;--color_fix_type wavelet --resize_back \&#xA;--output results/demo/general \&#xA;--device cuda [--tiled --tile_size 512 --tile_stride 256]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remove the brackets to enable tiled sampling. If you are confused about where the &lt;code&gt;reload_swinir&lt;/code&gt; option came from, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/#degradation-details&#34;&gt;degradation details&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Face Image&lt;/h4&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;https://huggingface.co/lxq007/DiffBIR/resolve/main/face_full_v1.ckpt&#34;&gt;face_full_v1.ckpt&lt;/a&gt; to &lt;code&gt;weights/&lt;/code&gt; and run the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# for aligned face inputs&#xA;python inference_face.py \&#xA;--input inputs/demo/face/aligned \&#xA;--sr_scale 1 \&#xA;--output results/demo/face/aligned \&#xA;--has_aligned \&#xA;--device cuda&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;unaligned_face_inference&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# for unaligned face inputs&#xA;python inference_face.py \&#xA;--input inputs/demo/face/whole_img \&#xA;--sr_scale 2 \&#xA;--output results/demo/face/whole_img \&#xA;--bg_upsampler DiffBIR \&#xA;--device cuda&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Latent Image Guidance (Quality-fidelity trade-off)&lt;/h3&gt; &#xA;&lt;p&gt;Latent image guidance is used to achieve a trade-off bwtween quality and fidelity. We default to closing it since we prefer quality rather than fidelity. Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python inference.py \&#xA;--input inputs/demo/general \&#xA;--config configs/model/cldm.yaml \&#xA;--ckpt weights/general_full_v1.ckpt \&#xA;--reload_swinir --swinir_ckpt weights/general_swinir_v1.ckpt \&#xA;--steps 50 \&#xA;--sr_scale 4 \&#xA;--image_size 512 \&#xA;--color_fix_type wavelet --resize_back \&#xA;--output results/demo/general \&#xA;--device cuda \&#xA;--use_guidance --g_scale 400 --g_t_start 200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will see that the results become more smooth.&lt;/p&gt; &#xA;&lt;h3&gt;Only Stage1 Model (Remove Degradations)&lt;/h3&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;https://huggingface.co/lxq007/DiffBIR/resolve/main/general_swinir_v1.ckpt&#34;&gt;general_swinir_v1.ckpt&lt;/a&gt;, &lt;a href=&#34;https://huggingface.co/lxq007/DiffBIR/resolve/main/face_swinir_v1.ckpt&#34;&gt;face_swinir_v1.ckpt&lt;/a&gt; for general, face image respectively, and run the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python scripts/inference_stage1.py \&#xA;--config configs/model/swinir.yaml \&#xA;--ckpt [swinir_ckpt_path] \&#xA;--input [lq_dir] \&#xA;--sr_scale 1 --image_size 512 \&#xA;--output [output_dir_path]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Only Stage2 Model (Refine Details)&lt;/h3&gt; &#xA;&lt;p&gt;Since the proposed two-stage pipeline is very flexible, you can utilize other awesome models to remove degradations instead of SwinIR and then leverage the Stable Diffusion to refine details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# step1: Use other models to remove degradations and save results in [img_dir_path].&#xA;&#xA;# step2: Refine details of step1 outputs.&#xA;python inference.py \&#xA;--config configs/model/cldm.yaml \&#xA;--ckpt [full_ckpt_path] \&#xA;--steps 50 --sr_scale 1 --image_size 512 \&#xA;--input [img_dir_path] \&#xA;--color_fix_type wavelet --resize_back \&#xA;--output [output_dir_path] \&#xA;--disable_preprocess_model \&#xA;--device cuda&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;train&#34;&gt;&lt;/a&gt;&lt;span&gt;üå†&lt;/span&gt;Train&lt;/h2&gt; &#xA;&lt;h3&gt;Degradation Details&lt;/h3&gt; &#xA;&lt;p&gt;For general image restoration, we first train both the stage1 and stage2 model under codeformer degradation to enhance the generative capacity of the stage2 model. In order to improve the ability for degradation removal, we train another stage1 model under Real-ESRGAN degradation and utilize it during inference.&lt;/p&gt; &#xA;&lt;p&gt;For face image restoration, we adopt the degradation model used in &lt;a href=&#34;https://github.com/zsyOAOA/DifFace/raw/master/configs/training/swinir_ffhq512.yaml&#34;&gt;DifFace&lt;/a&gt; for training and directly utilize the SwinIR model released by them as our stage1 model.&lt;/p&gt; &#xA;&lt;h3&gt;Data Preparation&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate file list of training set and validation set.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python scripts/make_file_list.py \&#xA;--img_folder [hq_dir_path] \&#xA;--val_size [validation_set_size] \&#xA;--save_folder [save_dir_path] \&#xA;--follow_links&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This script will collect all image files in &lt;code&gt;img_folder&lt;/code&gt; and split them into training set and validation set automatically. You will get two file lists in &lt;code&gt;save_folder&lt;/code&gt;, each line in a file list contains an absolute path of an image file:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;save_folder&#xA;‚îú‚îÄ‚îÄ train.list # training file list&#xA;‚îî‚îÄ‚îÄ val.list   # validation file list&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure training set and validation set.&lt;/p&gt; &lt;p&gt;For general image restoration, fill in the following configuration files with appropriate values.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/configs/dataset/general_deg_codeformer_train.yaml&#34;&gt;training set&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/configs/dataset/general_deg_codeformer_val.yaml&#34;&gt;validation set&lt;/a&gt; for &lt;strong&gt;CodeFormer&lt;/strong&gt; degradation.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/configs/dataset/general_deg_realesrgan_train.yaml&#34;&gt;training set&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/configs/dataset/general_deg_realesrgan_val.yaml&#34;&gt;validation set&lt;/a&gt; for &lt;strong&gt;Real-ESRGAN&lt;/strong&gt; degradation.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;For face image restoration, fill in the face &lt;a href=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/configs/dataset/face_train.yaml&#34;&gt;training set&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/configs/dataset/face_val.yaml&#34;&gt;validation set&lt;/a&gt; configuration files with appropriate values.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Train Stage1 Model&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure training-related information.&lt;/p&gt; &lt;p&gt;Fill in the configuration file of &lt;a href=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/configs/train_swinir.yaml&#34;&gt;training&lt;/a&gt; with appropriate values.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start training.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python train.py --config [training_config_path]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;span&gt;üí°&lt;/span&gt;:Checkpoints of SwinIR will be used in training stage2 model.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Train Stage2 Model&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download pretrained &lt;a href=&#34;https://huggingface.co/stabilityai/stable-diffusion-2-1-base&#34;&gt;Stable Diffusion v2.1&lt;/a&gt; to provide generative capabilities.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;wget https://huggingface.co/stabilityai/stable-diffusion-2-1-base/resolve/main/v2-1_512-ema-pruned.ckpt --no-check-certificate&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create the initial model weights.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python scripts/make_stage2_init_weight.py \&#xA;--cldm_config configs/model/cldm.yaml \&#xA;--sd_weight [sd_v2.1_ckpt_path] \&#xA;--swinir_weight [swinir_ckpt_path] \&#xA;--output [init_weight_output_path]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You will see some &lt;a href=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/assets/init_weight_outputs.txt&#34;&gt;outputs&lt;/a&gt; which show the weight initialization.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure training-related information.&lt;/p&gt; &lt;p&gt;Fill in the configuration file of &lt;a href=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/configs/train_cldm.yaml&#34;&gt;training&lt;/a&gt; with appropriate values.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start training.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python train.py --config [training_config_path]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;Please cite us if our work is useful for your research.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{2023diffbir,&#xA;  author    = {Xinqi Lin, Jingwen He, Ziyan Chen, Zhaoyang Lyu, Ben Fei, Bo Dai, Wanli Ouyang, Yu Qiao, Chao Dong},&#xA;  title     = {DiffBIR: Towards Blind Image Restoration with Generative Diffusion Prior},&#xA;  journal   = {arxiv},&#xA;  year      = {2023},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is released under the &lt;a href=&#34;https://raw.githubusercontent.com/XPixelGroup/DiffBIR/main/LICENSE&#34;&gt;Apache 2.0 license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;p&gt;This project is based on &lt;a href=&#34;https://github.com/lllyasviel/ControlNet&#34;&gt;ControlNet&lt;/a&gt; and &lt;a href=&#34;https://github.com/XPixelGroup/BasicSR&#34;&gt;BasicSR&lt;/a&gt;. Thanks for their awesome work.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;If you have any questions, please feel free to contact with me at &lt;a href=&#34;mailto:linxinqi@tju.edu.cn&#34;&gt;linxinqi@tju.edu.cn&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ddbourgin/numpy-ml</title>
    <updated>2023-09-17T01:57:19Z</updated>
    <id>tag:github.com,2023-09-17:/ddbourgin/numpy-ml</id>
    <link href="https://github.com/ddbourgin/numpy-ml" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Machine learning, in numpy&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;numpy-ml&lt;/h1&gt; &#xA;&lt;p&gt;Ever wish you had an inefficient but somewhat legible collection of machine learning algorithms implemented exclusively in NumPy? No?&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;For rapid experimentation&lt;/h3&gt; &#xA;&lt;p&gt;To use this code as a starting point for ML prototyping / experimentation, just clone the repository, create a new &lt;a href=&#34;https://pypi.org/project/virtualenv/&#34;&gt;virtualenv&lt;/a&gt;, and start hacking:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/ddbourgin/numpy-ml.git&#xA;$ cd numpy-ml &amp;amp;&amp;amp; virtualenv npml &amp;amp;&amp;amp; source npml/bin/activate&#xA;$ pip3 install -r requirements-dev.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;As a package&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t plan to modify the source, you can also install numpy-ml as a Python package: &lt;code&gt;pip3 install -u numpy_ml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The reinforcement learning agents train on environments defined in the &lt;a href=&#34;https://github.com/openai/gym&#34;&gt;OpenAI gym&lt;/a&gt;. To install these alongside numpy-ml, you can use &lt;code&gt;pip3 install -u &#39;numpy_ml[rl]&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For more details on the available models, see the &lt;a href=&#34;https://numpy-ml.readthedocs.io/&#34;&gt;project documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Available models&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to expand!&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Gaussian mixture model&lt;/strong&gt;&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;EM training&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Hidden Markov model&lt;/strong&gt;&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Viterbi decoding&lt;/li&gt; &#xA;    &lt;li&gt;Likelihood computation&lt;/li&gt; &#xA;    &lt;li&gt;MLE parameter estimation via Baum-Welch/forward-backward algorithm&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Latent Dirichlet allocation&lt;/strong&gt; (topic model)&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Standard model with MLE parameter estimation via variational EM&lt;/li&gt; &#xA;    &lt;li&gt;Smoothed model with MAP parameter estimation via MCMC&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Neural networks&lt;/strong&gt;&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Layers / Layer-wise ops &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;Add&lt;/li&gt; &#xA;      &lt;li&gt;Flatten&lt;/li&gt; &#xA;      &lt;li&gt;Multiply&lt;/li&gt; &#xA;      &lt;li&gt;Softmax&lt;/li&gt; &#xA;      &lt;li&gt;Fully-connected/Dense&lt;/li&gt; &#xA;      &lt;li&gt;Sparse evolutionary connections&lt;/li&gt; &#xA;      &lt;li&gt;LSTM&lt;/li&gt; &#xA;      &lt;li&gt;Elman-style RNN&lt;/li&gt; &#xA;      &lt;li&gt;Max + average pooling&lt;/li&gt; &#xA;      &lt;li&gt;Dot-product attention&lt;/li&gt; &#xA;      &lt;li&gt;Embedding layer&lt;/li&gt; &#xA;      &lt;li&gt;Restricted Boltzmann machine (w. CD-n training)&lt;/li&gt; &#xA;      &lt;li&gt;2D deconvolution (w. padding and stride)&lt;/li&gt; &#xA;      &lt;li&gt;2D convolution (w. padding, dilation, and stride)&lt;/li&gt; &#xA;      &lt;li&gt;1D convolution (w. padding, dilation, stride, and causality)&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;Modules &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;Bidirectional LSTM&lt;/li&gt; &#xA;      &lt;li&gt;ResNet-style residual blocks (identity and convolution)&lt;/li&gt; &#xA;      &lt;li&gt;WaveNet-style residual blocks with dilated causal convolutions&lt;/li&gt; &#xA;      &lt;li&gt;Transformer-style multi-headed scaled dot product attention&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;Regularizers &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;Dropout&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;Normalization &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;Batch normalization (spatial and temporal)&lt;/li&gt; &#xA;      &lt;li&gt;Layer normalization (spatial and temporal)&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;Optimizers &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;SGD w/ momentum&lt;/li&gt; &#xA;      &lt;li&gt;AdaGrad&lt;/li&gt; &#xA;      &lt;li&gt;RMSProp&lt;/li&gt; &#xA;      &lt;li&gt;Adam&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;Learning Rate Schedulers &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;Constant&lt;/li&gt; &#xA;      &lt;li&gt;Exponential&lt;/li&gt; &#xA;      &lt;li&gt;Noam/Transformer&lt;/li&gt; &#xA;      &lt;li&gt;Dlib scheduler&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;Weight Initializers &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;Glorot/Xavier uniform and normal&lt;/li&gt; &#xA;      &lt;li&gt;He/Kaiming uniform and normal&lt;/li&gt; &#xA;      &lt;li&gt;Standard and truncated normal&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;Losses &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;Cross entropy&lt;/li&gt; &#xA;      &lt;li&gt;Squared error&lt;/li&gt; &#xA;      &lt;li&gt;Bernoulli VAE loss&lt;/li&gt; &#xA;      &lt;li&gt;Wasserstein loss with gradient penalty&lt;/li&gt; &#xA;      &lt;li&gt;Noise contrastive estimation loss&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;Activations &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;ReLU&lt;/li&gt; &#xA;      &lt;li&gt;Tanh&lt;/li&gt; &#xA;      &lt;li&gt;Affine&lt;/li&gt; &#xA;      &lt;li&gt;Sigmoid&lt;/li&gt; &#xA;      &lt;li&gt;Leaky ReLU&lt;/li&gt; &#xA;      &lt;li&gt;ELU&lt;/li&gt; &#xA;      &lt;li&gt;SELU&lt;/li&gt; &#xA;      &lt;li&gt;GELU&lt;/li&gt; &#xA;      &lt;li&gt;Exponential&lt;/li&gt; &#xA;      &lt;li&gt;Hard Sigmoid&lt;/li&gt; &#xA;      &lt;li&gt;Softplus&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;Models &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;Bernoulli variational autoencoder&lt;/li&gt; &#xA;      &lt;li&gt;Wasserstein GAN with gradient penalty&lt;/li&gt; &#xA;      &lt;li&gt;word2vec encoder with skip-gram and CBOW architectures&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;Utilities &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;code&gt;col2im&lt;/code&gt; (MATLAB port)&lt;/li&gt; &#xA;      &lt;li&gt;&lt;code&gt;im2col&lt;/code&gt; (MATLAB port)&lt;/li&gt; &#xA;      &lt;li&gt;&lt;code&gt;conv1D&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;code&gt;conv2D&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;code&gt;deconv2D&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;code&gt;minibatch&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Tree-based models&lt;/strong&gt;&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Decision trees (CART)&lt;/li&gt; &#xA;    &lt;li&gt;[Bagging] Random forests&lt;/li&gt; &#xA;    &lt;li&gt;[Boosting] Gradient-boosted decision trees&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Linear models&lt;/strong&gt;&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Ridge regression&lt;/li&gt; &#xA;    &lt;li&gt;Logistic regression&lt;/li&gt; &#xA;    &lt;li&gt;Ordinary least squares&lt;/li&gt; &#xA;    &lt;li&gt;Weighted linear regression&lt;/li&gt; &#xA;    &lt;li&gt;Generalized linear model (log, logit, and identity link)&lt;/li&gt; &#xA;    &lt;li&gt;Gaussian naive Bayes classifier&lt;/li&gt; &#xA;    &lt;li&gt;Bayesian linear regression w/ conjugate priors &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;Unknown mean, known variance (Gaussian prior)&lt;/li&gt; &#xA;      &lt;li&gt;Unknown mean, unknown variance (Normal-Gamma / Normal-Inverse-Wishart prior)&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;n-Gram sequence models&lt;/strong&gt;&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Maximum likelihood scores&lt;/li&gt; &#xA;    &lt;li&gt;Additive/Lidstone smoothing&lt;/li&gt; &#xA;    &lt;li&gt;Simple Good-Turing smoothing&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Multi-armed bandit models&lt;/strong&gt;&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;UCB1&lt;/li&gt; &#xA;    &lt;li&gt;LinUCB&lt;/li&gt; &#xA;    &lt;li&gt;Epsilon-greedy&lt;/li&gt; &#xA;    &lt;li&gt;Thompson sampling w/ conjugate priors &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;Beta-Bernoulli sampler&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;LinUCB&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Reinforcement learning models&lt;/strong&gt;&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Cross-entropy method agent&lt;/li&gt; &#xA;    &lt;li&gt;First visit on-policy Monte Carlo agent&lt;/li&gt; &#xA;    &lt;li&gt;Weighted incremental importance sampling Monte Carlo agent&lt;/li&gt; &#xA;    &lt;li&gt;Expected SARSA agent&lt;/li&gt; &#xA;    &lt;li&gt;TD-0 Q-learning agent&lt;/li&gt; &#xA;    &lt;li&gt;Dyna-Q / Dyna-Q+ with prioritized sweeping&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Nonparameteric models&lt;/strong&gt;&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Nadaraya-Watson kernel regression&lt;/li&gt; &#xA;    &lt;li&gt;k-Nearest neighbors classification and regression&lt;/li&gt; &#xA;    &lt;li&gt;Gaussian process regression&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Matrix factorization&lt;/strong&gt;&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Regularized alternating least-squares&lt;/li&gt; &#xA;    &lt;li&gt;Non-negative matrix factorization&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Preprocessing&lt;/strong&gt;&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Discrete Fourier transform (1D signals)&lt;/li&gt; &#xA;    &lt;li&gt;Discrete cosine transform (type-II) (1D signals)&lt;/li&gt; &#xA;    &lt;li&gt;Bilinear interpolation (2D signals)&lt;/li&gt; &#xA;    &lt;li&gt;Nearest neighbor interpolation (1D and 2D signals)&lt;/li&gt; &#xA;    &lt;li&gt;Autocorrelation (1D signals)&lt;/li&gt; &#xA;    &lt;li&gt;Signal windowing&lt;/li&gt; &#xA;    &lt;li&gt;Text tokenization&lt;/li&gt; &#xA;    &lt;li&gt;Feature hashing&lt;/li&gt; &#xA;    &lt;li&gt;Feature standardization&lt;/li&gt; &#xA;    &lt;li&gt;One-hot encoding / decoding&lt;/li&gt; &#xA;    &lt;li&gt;Huffman coding / decoding&lt;/li&gt; &#xA;    &lt;li&gt;Byte pair encoding / decoding&lt;/li&gt; &#xA;    &lt;li&gt;Term frequency-inverse document frequency (TF-IDF) encoding&lt;/li&gt; &#xA;    &lt;li&gt;MFCC encoding&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Utilities&lt;/strong&gt;&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Similarity kernels&lt;/li&gt; &#xA;    &lt;li&gt;Distance metrics&lt;/li&gt; &#xA;    &lt;li&gt;Priority queue&lt;/li&gt; &#xA;    &lt;li&gt;Ball tree&lt;/li&gt; &#xA;    &lt;li&gt;Discrete sampler&lt;/li&gt; &#xA;    &lt;li&gt;Graph processing and generators&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Am I missing your favorite model? Is there something that could be cleaner / less confusing? Did I mess something up? Submit a PR! The only requirement is that your models are written with just the &lt;a href=&#34;https://docs.python.org/3/library/&#34;&gt;Python standard library&lt;/a&gt; and &lt;a href=&#34;https://www.numpy.org/&#34;&gt;NumPy&lt;/a&gt;. The &lt;a href=&#34;https://scipy.github.io/devdocs/&#34;&gt;SciPy library&lt;/a&gt; is also permitted under special circumstances ;)&lt;/p&gt; &#xA;&lt;p&gt;See full contributing guidelines &lt;a href=&#34;https://raw.githubusercontent.com/ddbourgin/numpy-ml/master/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>