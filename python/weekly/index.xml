<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-22T01:42:00Z</updated>
  <subtitle>Weekly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Zipstack/unstract</title>
    <updated>2024-09-22T01:42:00Z</updated>
    <id>tag:github.com,2024-09-22:/Zipstack/unstract</id>
    <link href="https://github.com/Zipstack/unstract" rel="alternate"></link>
    <summary type="html">&lt;p&gt;No-code LLM Platform to launch APIs and ETL Pipelines to structure unstructured documents&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/unstract_u_logo.png&#34; style=&#34;height: 120px&#34;&gt; &#xA; &lt;h1&gt;Unstract&lt;/h1&gt; &#xA; &lt;h2&gt;Intelligent Document Processing 2.0 (IDP 2.0) Platform Powered by Large Language Models&lt;/h2&gt; &#xA; &lt;h4&gt;No-code LLM Platform to launch APIs and ETL Pipelines to structure unstructured documents&lt;/h4&gt; &#xA; &lt;h2&gt;&lt;/h2&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://pdm-project.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/pdm-managed-blueviolet&#34; alt=&#34;pdm-managed&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cla-assistant.io/Zipstack/unstract&#34;&gt;&lt;img src=&#34;https://cla-assistant.io/readme/badge/Zipstack/unstract&#34; alt=&#34;CLA assistant&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://results.pre-commit.ci/latest/github/Zipstack/unstract/main&#34;&gt;&lt;img src=&#34;https://results.pre-commit.ci/badge/github/Zipstack/unstract/main.svg?sanitize=true&#34; alt=&#34;pre-commit.ci status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/summary/new_code?id=Zipstack_unstract&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=Zipstack_unstract&amp;amp;metric=alert_status&#34; alt=&#34;Quality Gate Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/summary/new_code?id=Zipstack_unstract&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=Zipstack_unstract&amp;amp;metric=bugs&#34; alt=&#34;Bugs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/summary/new_code?id=Zipstack_unstract&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=Zipstack_unstract&amp;amp;metric=code_smells&#34; alt=&#34;Code Smells&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/summary/new_code?id=Zipstack_unstract&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=Zipstack_unstract&amp;amp;metric=coverage&#34; alt=&#34;Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/summary/new_code?id=Zipstack_unstract&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=Zipstack_unstract&amp;amp;metric=duplicated_lines_density&#34; alt=&#34;Duplicated Lines (%)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;ü§ñ Prompt Studio&lt;/h2&gt; &#xA;&lt;p&gt;Prompt Studio&#39;s primary reason for existence is so you can develop the necessary prompts for document data extraction super efficiently. It is a purpose-built environment that makes this not just easy for you‚Äîbut, lot of fun! The document sample, its variants, the prompts you&#39;re developing, outputs from different LLMs, the schema you&#39;re developing, costing details of the extraction and various tools that let you measure the effectiveness of your prompts are just a click away and easily accessible. Prompt Studio is designed for effective and high speed development and iteration of prompts for document data extraction. Welcome to IDP 2.0!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/prompt_studio.png&#34; alt=&#34;img Prompt Studio&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üßò‚Äç‚ôÄÔ∏è Three step nirvana with Workflow Studio&lt;/h2&gt; &#xA;&lt;p&gt;Automate critical business processes that involve complex documents with a human in the loop. Go beyond RPA with the power of Large Language Models.&lt;/p&gt; &#xA;&lt;p&gt;üåü &lt;strong&gt;Step 1&lt;/strong&gt;: Add documents to no-code Prompt Studio and do prompt engineering to extract required fields &lt;br&gt; üåü &lt;strong&gt;Step 2&lt;/strong&gt;: Configure Prompt Studio project as API deployment or configure input source and output destination for ETL Pipeline&lt;br&gt; üåü &lt;strong&gt;Step 3&lt;/strong&gt;: Deploy Workflows as unstructured data APIs or unstructured data ETL Pipelines!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/Using_Unstract.png&#34; alt=&#34;img Using Unstract&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üöÄ Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;System Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;8GB RAM (recommended)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux or MacOS (Intel or M-series)&lt;/li&gt; &#xA; &lt;li&gt;Docker&lt;/li&gt; &#xA; &lt;li&gt;Docker Compose (if you need to install it separately)&lt;/li&gt; &#xA; &lt;li&gt;Git&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Next, either download a release or clone this repo and do the following:&lt;/p&gt; &#xA;&lt;p&gt;‚úÖ &lt;code&gt;./run-platform.sh&lt;/code&gt;&lt;br&gt; ‚úÖ Now visit &lt;a href=&#34;http://frontend.unstract.localhost&#34;&gt;http://frontend.unstract.localhost&lt;/a&gt; in your browser &lt;br&gt; ‚úÖ Use user name and password &lt;code&gt;unstract&lt;/code&gt; to login&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s all there is to it!&lt;/p&gt; &#xA;&lt;p&gt;Another really quick way to experience Unstract is by signing up for our &lt;a href=&#34;https://us-central.unstract.com/&#34;&gt;hosted version&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;‚è© Quick Start Guide&lt;/h2&gt; &#xA;&lt;p&gt;Unstract comes well documented. You can get introduced to the &lt;a href=&#34;https://docs.unstract.com/&#34;&gt;basics of Unstract&lt;/a&gt;, and &lt;a href=&#34;https://docs.unstract.com/unstract_platform/setup_accounts/whats_needed&#34;&gt;learn how to connect&lt;/a&gt; various systems like LLMs, Vector Databases, Embedding Models and Text Extractors to it. The easiest way to wet your feet is to go through our &lt;a href=&#34;https://docs.unstract.com/unstract_platform/quick_start&#34;&gt;Quick Start Guide&lt;/a&gt; where you actually get to do some prompt engineering in Prompt Studio and launch an API to structure varied credit card statements!&lt;/p&gt; &#xA;&lt;h2&gt;ü§ù Ecosystem support&lt;/h2&gt; &#xA;&lt;h3&gt;LLM Providers&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Provider&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/openai.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;OpenAI&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Working&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/vertex_ai.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Google VertexAI, Gemini Pro&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Working&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/azure_openai.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Azure OpenAI&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Working&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/palm.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Google PaLM&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Working&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/anyscale.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Anyscale&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Working&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/mistral_ai.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Mistral AI&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Working&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/anthropic.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Anthropic&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Working&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/ollama.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Ollama&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Working&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/replicate.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Replicate&lt;/td&gt; &#xA;   &lt;td&gt;üóìÔ∏è Coming soon!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Vector Databases&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Provider&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/qdrant.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Qdrant&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Working&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/weaviate.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Weaviate&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Working&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/pinecone.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Pinecone&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Working&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/postgres.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PostgreSQL&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Working&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/milvus.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Milvus&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Working&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Embeddings&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Provider&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/openai.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;OpenAI&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Working&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/azure_openai.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Azure OpenAI&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Working&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/palm.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Google PaLM&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Working&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Text Extractors&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Provider&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/unstract_u_logo.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Unstract LLMWhisperer&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Working&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/unstructured_io.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Unstructured.io Community&lt;/td&gt; &#xA;   &lt;td&gt;üóìÔ∏è Coming soon!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/unstructured_io.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Unstructured.io Enterprise&lt;/td&gt; &#xA;   &lt;td&gt;üóìÔ∏è Coming soon!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/llamaindex.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;LlamaIndex Parse&lt;/td&gt; &#xA;   &lt;td&gt;üóìÔ∏è Coming soon!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;ETL Sources&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Provider&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/s3.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;AWS S3&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Working&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/minio.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Minio&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Working&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/dropbox.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dropbox&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Working&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/google_drive.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Google Drive&lt;/td&gt; &#xA;   &lt;td&gt;üóìÔ∏è Coming soon!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/box.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Box&lt;/td&gt; &#xA;   &lt;td&gt;üóìÔ∏è Coming soon!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/gcp.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Google Cloud Storage&lt;/td&gt; &#xA;   &lt;td&gt;üóìÔ∏è Coming soon!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/azure_openai.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Azure Cloud Storage&lt;/td&gt; &#xA;   &lt;td&gt;üóìÔ∏è Coming soon!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/http.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;HTTP/HTTPS&lt;/td&gt; &#xA;   &lt;td&gt;üóìÔ∏è Coming soon!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;ETL Destinations&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Provider&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/snowflake.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Snowflake&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Working&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/amazon_redshift.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Amazon Redshift&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Working&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/google_bigquery.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Google Bigquery&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Working&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/postgres.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PostgreSQL&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Working&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/mysql.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;MySQL&lt;/td&gt; &#xA;   &lt;td&gt;üóìÔ∏è Coming soon!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/mariadb.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;MariaDB&lt;/td&gt; &#xA;   &lt;td&gt;üóìÔ∏è Coming soon!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/docs/assets/3rd_party/ms_sql.png&#34; width=&#34;32&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Microsoft SQL Server&lt;/td&gt; &#xA;   &lt;td&gt;üóìÔ∏è Coming soon!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;üôå Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! Please read &lt;a href=&#34;https://raw.githubusercontent.com/Zipstack/unstract/main/CONTRIBUTE.md&#34;&gt;CONTRIBUTE.md&lt;/a&gt; for further details on setting up the development environment, etc. It also points you to other detailed documents as needed.&lt;/p&gt; &#xA;&lt;h2&gt;üëã Join the LLM-powered automation community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On Slack, &lt;a href=&#34;https://join-slack.unstract.com&#34;&gt;join great conversations&lt;/a&gt; around LLMs, their ecosystem and leveraging them to automate the previously unautomatable!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/GetUnstract&#34;&gt;Follow us on X/Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/showcase/unstract/&#34;&gt;Follow us on LinkedIn&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üìä A note on analytics&lt;/h2&gt; &#xA;&lt;p&gt;In full disclosure, Unstract integrates Posthog to track usage analytics. As you can inspect the relevant code here, we collect the minimum possible metrics. Posthog can be disabled if desired by setting &lt;code&gt;REACT_APP_ENABLE_POSTHOG&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; in the frontend&#39;s .env file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pytorch/torchtitan</title>
    <updated>2024-09-22T01:42:00Z</updated>
    <id>tag:github.com,2024-09-22:/pytorch/torchtitan</id>
    <link href="https://github.com/pytorch/torchtitan" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A native PyTorch Library for large model training&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/pytorch/torchtitan/actions/workflows/integration_test_4gpu.yaml?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/pytorch/torchtitan/actions/workflows/integration_test_4gpu.yaml/badge.svg?branch=main&#34; alt=&#34;4 GPU Integration Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pytorch/torchtitan/actions/workflows/integration_test_8gpu.yaml?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/pytorch/torchtitan/actions/workflows/integration_test_8gpu.yaml/badge.svg?branch=main&#34; alt=&#34;8 GPU Integration Test&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;torchtitan&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;torchtitan&lt;/code&gt; is currently in a pre-release state and under extensive development. Currently we showcase pre-training &lt;strong&gt;Llama 3.1&lt;/strong&gt;, &lt;strong&gt;Llama 3&lt;/strong&gt;, and &lt;strong&gt;Llama 2&lt;/strong&gt; LLMs of various sizes from scratch. To use the latest features of &lt;code&gt;torchtitan&lt;/code&gt;, we recommend latest PyTorch nightly.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;torchtitan&lt;/code&gt; is a proof-of-concept for Large-scale LLM training using native PyTorch. It is (and will continue to be) a repo to showcase PyTorch&#39;s latest distributed training features in a clean, minimal codebase. torchtitan is complementary to and not a replacement for any of the great large-scale LLM training codebases such as Megatron, Megablocks, LLM Foundry, Deepspeed, etc. Instead, we hope that the features showcased in torchtitan will be adopted by these codebases quickly. torchtitan is unlikely to ever grow a large community around it.&lt;/p&gt; &#xA;&lt;p&gt;Our guiding principles when building &lt;code&gt;torchtitan&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Designed to be easy to understand, use and extend for different training purposes.&lt;/li&gt; &#xA; &lt;li&gt;Minimal changes to the model code when applying 1D, 2D, or (soon) 3D Parallel.&lt;/li&gt; &#xA; &lt;li&gt;Modular components instead of a monolithic codebase.&lt;/li&gt; &#xA; &lt;li&gt;Get started in minutes, not hours!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Intro video - learn more about torchtitan in under 4 mins:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/ee5DOEqD35I?si=_B94PbVv0V5ZnNKE&#34; title=&#34;Welcome to torchtitan!&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pytorch/torchtitan/main/assets/images/titan_play_video.png&#34; alt=&#34;Welcome to torchtitan!&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Dive into the code&lt;/h3&gt; &#xA;&lt;p&gt;You may want to see how the model is defined or how parallelism techniques are applied. For a guided tour, see these files first:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pytorch/torchtitan/main/train.py&#34;&gt;train.py&lt;/a&gt; - the main training loop and high-level setup code&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pytorch/torchtitan/main/torchtitan/parallelisms/parallelize_llama.py&#34;&gt;torchtitan/parallelisms/parallelize_llama.py&lt;/a&gt; - helpers for applying Data Parallel, Tensor Parallel, activation checkpointing, and &lt;code&gt;torch.compile&lt;/code&gt; to the model&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pytorch/torchtitan/main/torchtitan/parallelisms/pipeline_llama.py&#34;&gt;torchtitan/parallelisms/pipeline_llama.py&lt;/a&gt; - helpers for applying Pipeline Parallel to the model&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pytorch/torchtitan/main/torchtitan/checkpoint.py&#34;&gt;torchtitan/checkpoint.py&lt;/a&gt; - utils for saving/loading distributed checkpoints&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pytorch/torchtitan/main/torchtitan/float8.py&#34;&gt;torchtitan/float8.py&lt;/a&gt; - utils for applying Float8 techniques&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pytorch/torchtitan/main/torchtitan/models/llama/model.py&#34;&gt;torchtitan/models/llama/model.py&lt;/a&gt; - the Llama model definition (shared for Llama 2 and Llama 3 variants)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Key features available&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pytorch/torchtitan/main/docs/fsdp.md&#34;&gt;FSDP2&lt;/a&gt; with per param sharding&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pytorch.org/docs/stable/distributed.tensor.parallel.html&#34;&gt;Tensor Parallel&lt;/a&gt; (including &lt;a href=&#34;https://discuss.pytorch.org/t/distributed-w-torchtitan-introducing-async-tensor-parallelism-in-pytorch/209487&#34;&gt;async TP&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Selective layer and operator activation checkpointing&lt;/li&gt; &#xA; &lt;li&gt;Distributed checkpointing (including async checkpointing)&lt;/li&gt; &#xA; &lt;li&gt;Checkpointable data-loading, with the C4 dataset pre-configured (144M entries)&lt;/li&gt; &#xA; &lt;li&gt;Loss, GPU memory, tokens-per-second, and MFU displayed and logged via &lt;a href=&#34;https://raw.githubusercontent.com/pytorch/torchtitan/main/#tensorboard&#34;&gt;TensorBoard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Learning rate scheduler, meta-init, optional Fused RMSNorm&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discuss.pytorch.org/t/distributed-w-torchtitan-enabling-float8-all-gather-in-fsdp2/209323&#34;&gt;Float8&lt;/a&gt; support (&lt;a href=&#34;https://raw.githubusercontent.com/pytorch/torchtitan/main/docs/float8.md&#34;&gt;how-to&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;torch.compile&lt;/code&gt; support&lt;/li&gt; &#xA; &lt;li&gt;DDP and HSDP&lt;/li&gt; &#xA; &lt;li&gt;All options easily configured via &lt;a href=&#34;https://raw.githubusercontent.com/pytorch/torchtitan/main/train_configs/&#34;&gt;toml files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pytorch/torchtitan/main/docs/checkpoint.md&#34;&gt;Interoperable checkpoints&lt;/a&gt; which can be loaded directly into &lt;a href=&#34;https://github.com/pytorch/torchtune&#34;&gt;&lt;code&gt;torchtune&lt;/code&gt;&lt;/a&gt; for fine-tuning&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;We report our &lt;a href=&#34;https://raw.githubusercontent.com/pytorch/torchtitan/main/docs/performance.md&#34;&gt;Performance&lt;/a&gt; verified on 64/128 GPUs.&lt;/p&gt; &#xA;&lt;h3&gt;Coming soon&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pipeline Parallel (and 3D parallellism)&lt;/li&gt; &#xA; &lt;li&gt;Context Parallel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/pytorch/torchtitan&#xA;cd torchtitan&#xA;pip install -r requirements.txt&#xA;pip3 install --pre torch --index-url https://download.pytorch.org/whl/nightly/cu121 # or cu118&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Downloading a tokenizer&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;torchtitan&lt;/code&gt; currently supports training Llama 3 (8B, 70B), and Llama 2 (7B, 13B, 70B) out of the box. To get started training these models, we need to download a tokenizer.model. Follow the instructions on the official &lt;a href=&#34;https://huggingface.co/meta-llama/Meta-Llama-3-8B&#34;&gt;meta-llama&lt;/a&gt; repository to ensure you have access to the Llama model weights.&lt;/p&gt; &#xA;&lt;p&gt;Once you have confirmed access, you can run the following command to download the Llama 3 / Llama 2 tokenizer to your local machine.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Get your HF token from https://huggingface.co/settings/tokens&#xA;&#xA;# Llama 3 or 3.1 tokenizer.model&#xA;python torchtitan/datasets/download_tokenizer.py --repo_id meta-llama/Meta-Llama-3-8B --tokenizer_path &#34;original&#34; --hf_token=...&#xA;&#xA;# Llama 2 tokenizer.model&#xA;python torchtitan/datasets/download_tokenizer.py --repo_id meta-llama/Llama-2-13b-hf --hf_token=...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Start a training run&lt;/h3&gt; &#xA;&lt;p&gt;Llama 3 8B model locally on 8 GPUs&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CONFIG_FILE=&#34;./train_configs/llama3_8b.toml&#34; ./run_llama_train.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TensorBoard&lt;/h2&gt; &#xA;&lt;p&gt;To visualize TensorBoard metrics of models trained on a remote server via a local web browser:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure &lt;code&gt;metrics.enable_tensorboard&lt;/code&gt; option is set to true in model training (either from a .toml file or from CLI).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set up SSH tunneling, by running the following from local CLI&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;ssh -L 6006:127.0.0.1:6006 [username]@[hostname]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Inside the SSH tunnel that logged into the remote server, go to the torchtitan repo, and start the TensorBoard backend&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;tensorboard --logdir=./outputs/tb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;In the local web browser, go to the URL it provides OR to &lt;a href=&#34;http://localhost:6006/&#34;&gt;http://localhost:6006/&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Multi-Node Training&lt;/h2&gt; &#xA;&lt;p&gt;For training on ParallelCluster/Slurm type configurations, you can use the &lt;code&gt;multinode_trainer.slurm&lt;/code&gt; file to submit your sbatch job.&lt;/p&gt; &#xA;&lt;p&gt;To get started adjust the number of nodes and GPUs&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#SBATCH --ntasks=2&#xA;#SBATCH --nodes=2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then start a run where &lt;code&gt;nnodes&lt;/code&gt; is your total node count, matching the sbatch node count above.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;srun torchrun --nnodes 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your gpu count per node is not 8, adjust:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--nproc_per_node&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;in the torchrun command and&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;#SBATCH --gpus-per-task&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;in the SBATCH command section.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This code is made available under &lt;a href=&#34;https://raw.githubusercontent.com/pytorch/torchtitan/main/LICENSE&#34;&gt;BSD 3 license&lt;/a&gt;. However you may have other legal obligations that govern your use of other content, such as the terms of service for third-party models, data, etc.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Future-House/paper-qa</title>
    <updated>2024-09-22T01:42:00Z</updated>
    <id>tag:github.com,2024-09-22:/Future-House/paper-qa</id>
    <link href="https://github.com/Future-House/paper-qa" rel="alternate"></link>
    <summary type="html">&lt;p&gt;High accuracy RAG for answering questions from scientific documents with citations&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PaperQA2&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/whitead/paper-qa&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/github-%23121011.svg?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/whitead/paper-qa&#34;&gt;&lt;img src=&#34;https://github.com/whitead/paper-qa/actions/workflows/tests.yml/badge.svg?sanitize=true&#34; alt=&#34;tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/py/paper-qa&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/paper-qa.svg?sanitize=true&#34; alt=&#34;PyPI version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;PaperQA2 is a package for doing high-accuracy retrieval augmented generation (RAG) on PDFs or text files, with a focus on the scientific literature. See our &lt;a href=&#34;https://paper.wikicrow.ai&#34;&gt;recent 2024 paper&lt;/a&gt; to see examples of PaperQA2&#39;s superhuman performance in scientific tasks like question answering, summarization, and contradiction detection.&lt;/p&gt; &#xA;&lt;!--TOC--&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#quickstart&#34;&gt;Quickstart&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#example-output&#34;&gt;Example Output&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#what-is-paperqa2&#34;&gt;What is PaperQA2&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#paperqa2-vs-paperqa&#34;&gt;PaperQA2 vs PaperQA&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#whats-new-in-version-5-aka-paperqa2&#34;&gt;What&#39;s New in Version 5 (aka PaperQA2)?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#paperqa2-algorithm&#34;&gt;PaperQA2 Algorithm&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#cli-usage&#34;&gt;CLI Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#bundled-settings&#34;&gt;Bundled Settings&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#library-usage&#34;&gt;Library Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#ask-manually&#34;&gt;&lt;code&gt;ask&lt;/code&gt; manually&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#adding-documents-manually&#34;&gt;Adding Documents Manually&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#async&#34;&gt;Async&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#choosing-model&#34;&gt;Choosing Model&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#locally-hosted&#34;&gt;Locally Hosted&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#changing-embedding-model&#34;&gt;Changing Embedding Model&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#adjusting-number-of-sources&#34;&gt;Adjusting number of sources&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#using-code-or-html&#34;&gt;Using Code or HTML&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#using-external-dbvector-db-and-caching&#34;&gt;Using External DB/Vector DB and Caching&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#creating-index&#34;&gt;Creating Index&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#manifest-files&#34;&gt;Manifest Files&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#reusing-index&#34;&gt;Reusing Index&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#running-on-litqa-v2&#34;&gt;Running on LitQA v2&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#using-clients-directly&#34;&gt;Using Clients Directly&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#where-do-i-get-papers&#34;&gt;Where do I get papers?&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#zotero&#34;&gt;Zotero&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#paper-scraper&#34;&gt;Paper Scraper&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#callbacks&#34;&gt;Callbacks&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#caching-embeddings&#34;&gt;Caching Embeddings&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#customizing-prompts&#34;&gt;Customizing Prompts&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#pre-and-post-prompts&#34;&gt;Pre and Post Prompts&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#faq&#34;&gt;FAQ&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#how-come-i-get-different-results-than-your-papers&#34;&gt;How come I get different results than your papers?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#how-is-this-different-from-llamaindex-or-langchain&#34;&gt;How is this different from LlamaIndex or LangChain?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#can-i-save-or-load&#34;&gt;Can I save or load?&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#citation&#34;&gt;Citation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--TOC--&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;In this example we take a folder of research paper PDFs, magically get their metadata - including citation counts with a retraction check, then parse and cache PDFs into a full-text search index, and finally answer the user question with an LLM agent.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install paper-qa&#xA;cd my_papers&#xA;pqa ask &#39;How can carbon nanotubes be manufactured at a large scale?&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example Output&lt;/h3&gt; &#xA;&lt;p&gt;Question: Has anyone designed neural networks that compute with proteins or DNA?&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The claim that neural networks have been designed to compute with DNA is supported by multiple sources. The work by Qian, Winfree, and Bruck demonstrates the use of DNA strand displacement cascades to construct neural network components, such as artificial neurons and associative memories, using a DNA-based system (Qian2011Neural pages 1-2, Qian2011Neural pages 15-16, Qian2011Neural pages 54-56). This research includes the implementation of a 3-bit XOR gate and a four-neuron Hopfield associative memory, showcasing the potential of DNA for neural network computation. Additionally, the application of deep learning techniques to genomics, which involves computing with DNA sequences, is well-documented. Studies have applied convolutional neural networks (CNNs) to predict genomic features such as transcription factor binding and DNA accessibility (Eraslan2019Deep pages 4-5, Eraslan2019Deep pages 5-6). These models leverage DNA sequences as input data, effectively using neural networks to compute with DNA. While the provided excerpts do not explicitly mention protein-based neural network computation, they do highlight the use of neural networks in tasks related to protein sequences, such as predicting DNA-protein binding (Zeng2016Convolutional pages 1-2). However, the primary focus remains on DNA-based computation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;What is PaperQA2&lt;/h2&gt; &#xA;&lt;p&gt;PaperQA2 is engineered to be the best agentic RAG model for working with scientific papers. Here are some features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A simple interface to get good answers with grounded responses containing in-text citations.&lt;/li&gt; &#xA; &lt;li&gt;State-of-the-art implementation including document metadata-awareness in embeddings and LLM-based re-ranking and contextual summarization (RCS).&lt;/li&gt; &#xA; &lt;li&gt;Support for agentic RAG, where a language agent can iteratively refine queries and answers.&lt;/li&gt; &#xA; &lt;li&gt;Automatic redundant fetching of paper metadata, including citation and journal quality data from multiple providers.&lt;/li&gt; &#xA; &lt;li&gt;A usable full-text search engine for a local repository of PDF/text files.&lt;/li&gt; &#xA; &lt;li&gt;A robust interface for customization, with default support for all &lt;a href=&#34;https://docs.litellm.ai/docs/providers&#34;&gt;LiteLLM&lt;/a&gt; models.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By default, it uses &lt;a href=&#34;https://platform.openai.com/docs/guides/embeddings&#34;&gt;OpenAI embeddings&lt;/a&gt; and &lt;a href=&#34;https://platform.openai.com/docs/models&#34;&gt;models&lt;/a&gt; with a Numpy vector DB to embed and search documents. However, you can easily use other closed-source, open-source models or embeddings (see details below).&lt;/p&gt; &#xA;&lt;p&gt;PaperQA2 depends on some awesome libraries/APIs that make our repo possible. Here are some in no particular order:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.semanticscholar.org/&#34;&gt;Semantic Scholar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.crossref.org/&#34;&gt;Crossref&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://unpaywall.org/&#34;&gt;Unpaywall&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.pydantic.dev/latest/&#34;&gt;Pydantic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/quickwit-oss/tantivy&#34;&gt;tantivy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/&#34;&gt;LiteLLM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pybtex.org/&#34;&gt;pybtex&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pymupdf.readthedocs.io/en/latest/&#34;&gt;PyMuPDF&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;PaperQA2 vs PaperQA&lt;/h3&gt; &#xA;&lt;p&gt;We&#39;ve been working on hard on fundamental upgrades for a while and mostly followed &lt;a href=&#34;https://semver.org/&#34;&gt;SemVer&lt;/a&gt;. meaning we&#39;ve incremented the major version number on each breaking change. This brings us to the current major version number v5. So why call is the repo now called PaperQA2? We wanted to remark on the fact though that we&#39;ve exceeded human performance on &lt;a href=&#34;https://paper.wikicrow.ai&#34;&gt;many important metrics&lt;/a&gt;. So we arbitrarily call version 5 and onward PaperQA2, and versions before it as PaperQA1 to denote the significant change in performance. We recognize that we are challenged at naming and counting at FutureHouse, so we reserve the right at any time to arbitrarily change the name to PaperCrow.&lt;/p&gt; &#xA;&lt;h3&gt;What&#39;s New in Version 5 (aka PaperQA2)?&lt;/h3&gt; &#xA;&lt;p&gt;Version 5 added:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A CLI &lt;code&gt;pqa&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Agentic workflows invoking tools for paper search, gathering evidence, and generating an answer&lt;/li&gt; &#xA; &lt;li&gt;Removed much of the statefulness from the &lt;code&gt;Docs&lt;/code&gt; object&lt;/li&gt; &#xA; &lt;li&gt;A migration to LiteLLM for compatibility with many LLM providers as well as centralized rate limits and cost tracking&lt;/li&gt; &#xA; &lt;li&gt;A bundled set of configurations (read &lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#bundled-settings&#34;&gt;here&lt;/a&gt;)) containing known-good hyperparameters&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;Docs&lt;/code&gt; objects pickled from prior versions of &lt;code&gt;PaperQA&lt;/code&gt; are incompatible with version 5, and will need to be rebuilt. Also, our minimum Python version was increased to Python 3.11.&lt;/p&gt; &#xA;&lt;h3&gt;PaperQA2 Algorithm&lt;/h3&gt; &#xA;&lt;p&gt;To understand PaperQA2, let&#39;s start with the pieces of the underlying algorithm. The default workflow of PaperQA2 is as follows:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Phase&lt;/th&gt; &#xA;   &lt;th&gt;PaperQA2 Actions&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;1. Paper Search&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;- Get candidate papers from LLM-generated keyword query&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;- Chunk, embed, and add candidate papers to state&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;2. Gather Evidence&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;- Embed query into vector&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;- Rank top &lt;em&gt;k&lt;/em&gt; document chunks in current state&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;- Create scored summary of each chunk in the context of the current query&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;- Use LLM to re-score and select most relevant summaries&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;3. Generate Answer&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;- Put best summaries into prompt with context&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;- Generate answer with prompt&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The tools can be invoked in any order by a language agent. For example, an LLM agent might do a narrow and broad search, or using different phrasing for the gather evidence step from the generate answer step.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;For a non-development setup, install PaperQA2 from &lt;a href=&#34;https://pypi.org/project/paper-qa/&#34;&gt;PyPI&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install paper-qa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For development setup, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;PaperQA2 uses an LLM to operate, so you&#39;ll need to either set an appropriate &lt;a href=&#34;https://docs.litellm.ai/docs/providers&#34;&gt;API key environment variable&lt;/a&gt; (i.e. &lt;code&gt;export OPENAI_API_KEY=sk-...&lt;/code&gt;) or set up an open source LLM server (i.e. using &lt;a href=&#34;https://github.com/Mozilla-Ocho/llamafile&#34;&gt;llamafile&lt;/a&gt;. Any LiteLLM compatible model can be configured to use with PaperQA2.&lt;/p&gt; &#xA;&lt;p&gt;If you need to index a large set of papers (100+), you will likely want an API key for both &lt;a href=&#34;https://www.crossref.org/documentation/metadata-plus/metadata-plus-keys/&#34;&gt;Crossref&lt;/a&gt; and &lt;a href=&#34;https://www.semanticscholar.org/product/api#api-key&#34;&gt;Semantic Scholar&lt;/a&gt;, which will allow you to avoid hitting public rate limits using these metadata services. Those can be exported as &lt;code&gt;CROSSREF_API_KEY&lt;/code&gt; and &lt;code&gt;SEMANTIC_SCHOLAR_API_KEY&lt;/code&gt; variables.&lt;/p&gt; &#xA;&lt;h2&gt;CLI Usage&lt;/h2&gt; &#xA;&lt;p&gt;The fastest way to test PaperQA2 is via the CLI. First navigate to a directory with some papers and use the &lt;code&gt;pqa&lt;/code&gt; cli:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pqa ask &#39;What manufacturing challenges are unique to bispecific antibodies?&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will see PaperQA2 index your local PDF files, gathering the necessary metadata for each of them (using &lt;a href=&#34;https://www.crossref.org/&#34;&gt;Crossref&lt;/a&gt; and &lt;a href=&#34;https://www.semanticscholar.org/&#34;&gt;Semantic Scholar&lt;/a&gt;), search over that index, then break the files into chunked evidence contexts, rank them, and ultimately generate an answer. The next time this directory is queried, your index will already be built (save for any differences detected, like new added papers), so it will skip the indexing and chunking steps.&lt;/p&gt; &#xA;&lt;p&gt;All prior answers will be indexed and stored, you can view them by querying via the &lt;code&gt;search&lt;/code&gt; subcommand, or access them yourself in your &lt;code&gt;PQA_HOME&lt;/code&gt; directory, which defaults to &lt;code&gt;~/.pqa/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pqa search -i &#39;answers&#39; &#39;antibodies&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;PaperQA2 is highly configurable, when running from the command line, &lt;code&gt;pqa --help&lt;/code&gt; shows all options and short descriptions. For example to run with a higher temperature:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pqa --temperature 0.5 ask &#39;What manufacturing challenges are unique to bispecific antibodies?&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can view all settings with &lt;code&gt;pqa view&lt;/code&gt;. Another useful thing is to change to other templated settings - for example &lt;code&gt;fast&lt;/code&gt; is a setting that answers more quickly and you can see it with &lt;code&gt;pqa -s fast view&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Maybe you have some new settings you want to save? You can do that with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pqa -s my_new_settings --temperature 0.5 --llm foo-bar-5 save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then you can use it with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pqa -s my_new_settings ask &#39;What manufacturing challenges are unique to bispecific antibodies?&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you run &lt;code&gt;pqa&lt;/code&gt; with a command which requires a new indexing, say if you change the default chunk_size, a new index will automatically be created for you.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pqa --parsing.chunk_size 5000 ask &#39;What manufacturing challenges are unique to bispecific antibodies?&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;pqa&lt;/code&gt; to do full-text search with use of LLMs view the search command. For example, let&#39;s save the index from a directory and give it a name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pqa -i nanomaterials index&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now I can search for papers about thermoelectrics:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pqa -i nanomaterials search thermoelectrics&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or I can use the normal ask&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pqa -i nanomaterials ask &#39;Are there nm scale features in thermoelectric materials?&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Both the CLI and module have pre-configured settings based on prior performance and our publications, they can be invoked as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pqa --settings &amp;lt;setting name&amp;gt; ask &#39;Are there nm scale features in thermoelectric materials?&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bundled Settings&lt;/h3&gt; &#xA;&lt;p&gt;Inside &lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/paperqa/configs&#34;&gt;&lt;code&gt;paperqa/configs&lt;/code&gt;&lt;/a&gt; we bundle known useful settings:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Setting Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;high_quality&lt;/td&gt; &#xA;   &lt;td&gt;Highly performant, relatively expensive (due to having &lt;code&gt;evidence_k&lt;/code&gt; = 15) query using a &lt;code&gt;ToolSelector&lt;/code&gt; agent.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fast&lt;/td&gt; &#xA;   &lt;td&gt;Setting to get answers cheaply and quickly.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;wikicrow&lt;/td&gt; &#xA;   &lt;td&gt;Setting to emulate the Wikipedia article writing used in our WikiCrow publication.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;contracrow&lt;/td&gt; &#xA;   &lt;td&gt;Setting to find contradictions in papers, your query should be a claim that needs to be flagged as a contradiction (or not).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;debug&lt;/td&gt; &#xA;   &lt;td&gt;Setting useful solely for debugging, but not in any actual application beyond debugging.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Library Usage&lt;/h2&gt; &#xA;&lt;p&gt;PaperQA2&#39;s full workflow can be accessed via Python directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from paperqa import Settings, ask&#xA;&#xA;answer = ask(&#xA;    &#34;What manufacturing challenges are unique to bispecific antibodies?&#34;,&#xA;    settings=Settings(temperature=0.5, paper_directory=&#34;my_papers&#34;),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please see our &lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/#installation&#34;&gt;installation docs&lt;/a&gt; for how to install the package from PyPI.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;ask&lt;/code&gt; manually&lt;/h3&gt; &#xA;&lt;p&gt;The answer object has the following attributes: &lt;code&gt;formatted_answer&lt;/code&gt;, &lt;code&gt;answer&lt;/code&gt; (answer alone), &lt;code&gt;question&lt;/code&gt; , and &lt;code&gt;context&lt;/code&gt; (the summaries of passages found for answer). &lt;code&gt;ask&lt;/code&gt; will use the &lt;code&gt;SearchPapers&lt;/code&gt; tool, which will query a local index of files, you can specify this location via the &lt;code&gt;Settings&lt;/code&gt; object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from paperqa import Settings, ask&#xA;&#xA;answer = ask(&#xA;    &#34;What manufacturing challenges are unique to bispecific antibodies?&#34;,&#xA;    settings=Settings(temperature=0.5, paper_directory=&#34;my_papers&#34;),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ask&lt;/code&gt; is just a convenience wrapper around the real entrypoint, which can be accessed if you&#39;d like to run concurrent asynchronous workloads:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from paperqa import Settings, agent_query, QueryRequest&#xA;&#xA;answer = await agent_query(&#xA;    QueryRequest(&#xA;        query=&#34;What manufacturing challenges are unique to bispecific antibodies?&#34;,&#xA;        settings=Settings(temperature=0.5, paper_directory=&#34;my_papers&#34;),&#xA;    )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default agent will use an LLM based agent, but you can also specify a &lt;code&gt;&#34;fake&#34;&lt;/code&gt; agent to use a hard coded call path of search -&amp;gt; gather evidence -&amp;gt; answer to reduce token usage.&lt;/p&gt; &#xA;&lt;h3&gt;Adding Documents Manually&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer fine grained control, and you wish to add objects to the docs object yourself (rather than using the search tool), then the previously existing &lt;code&gt;Docs&lt;/code&gt; object interface can be used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from paperqa import Docs, Settings&#xA;&#xA;# valid extensions include .pdf, .txt, and .html&#xA;doc_paths = (&#34;myfile.pdf&#34;, &#34;myotherfile.pdf&#34;)&#xA;&#xA;docs = Docs()&#xA;&#xA;for doc in doc_paths:&#xA;    docs.add(doc)&#xA;&#xA;settings = Settings()&#xA;settings.llm = &#34;claude-3-5-sonnet-20240620&#34;&#xA;settings.answer.answer_max_sources = 3&#xA;&#xA;answer = docs.query(&#xA;    &#34;What manufacturing challenges are unique to bispecific antibodies?&#34;,&#xA;    settings=settings,&#xA;)&#xA;&#xA;print(answer.formatted_answer)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Async&lt;/h3&gt; &#xA;&lt;p&gt;PaperQA2 is written to be used asynchronously. The synchronous API is just a wrapper around the async. Here are the methods and their &lt;code&gt;async&lt;/code&gt; equivalents:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Sync&lt;/th&gt; &#xA;   &lt;th&gt;Async&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Docs.add&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Docs.aadd&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Docs.add_file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Docs.aadd_file&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Docs.add_url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Docs.aadd_url&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Docs.get_evidence&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Docs.aget_evidence&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Docs.query&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Docs.aquery&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The synchronous version just calls the async version in a loop. Most modern python environments support &lt;code&gt;async&lt;/code&gt; natively (including Jupyter notebooks!). So you can do this in a Jupyter Notebook:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import asyncio&#xA;from paperqa import Docs&#xA;&#xA;&#xA;async def main() -&amp;gt; None:&#xA;    docs = Docs()&#xA;    # valid extensions include .pdf, .txt, and .html&#xA;    for doc in (&#34;myfile.pdf&#34;, &#34;myotherfile.pdf&#34;):&#xA;        await docs.aadd(doc)&#xA;&#xA;    answer = await docs.aquery(&#xA;        &#34;What manufacturing challenges are unique to bispecific antibodies?&#34;&#xA;    )&#xA;    print(answer.formatted_answer)&#xA;&#xA;&#xA;asyncio.run(main())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Choosing Model&lt;/h3&gt; &#xA;&lt;p&gt;By default, it uses OpenAI models with &lt;code&gt;gpt-4o-2024-08-06&lt;/code&gt; for both the re-ranking and summary step, the &lt;code&gt;summary_llm&lt;/code&gt; setting, and for the answering step, the &lt;code&gt;llm&lt;/code&gt; setting. You can adjust this easily:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from paperqa import Settings, ask&#xA;&#xA;answer = ask(&#xA;    &#34;What manufacturing challenges are unique to bispecific antibodies?&#34;,&#xA;    settings=Settings(&#xA;        llm=&#34;gpt-4o-mini&#34;, summary_llm=&#34;gpt-4o-mini&#34;, paper_directory=&#34;my_papers&#34;&#xA;    ),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use Anthropic or any other model supported by &lt;code&gt;litellm&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from paperqa import Settings, ask&#xA;&#xA;answer = ask(&#xA;    &#34;What manufacturing challenges are unique to bispecific antibodies?&#34;,&#xA;    settings=Settings(&#xA;        llm=&#34;claude-3-5-sonnet-20240620&#34;, summary_llm=&#34;claude-3-5-sonnet-20240620&#34;&#xA;    ),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Locally Hosted&lt;/h4&gt; &#xA;&lt;p&gt;You can use llama.cpp to be the LLM. Note that you should be using relatively large models, because PaperQA2 requires following a lot of instructions. You won&#39;t get good performance with 7B models.&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to get set-up is to download a &lt;a href=&#34;https://github.com/Mozilla-Ocho/llamafile&#34;&gt;llama file&lt;/a&gt; and execute it with &lt;code&gt;-cb -np 4 -a my-llm-model --embedding&lt;/code&gt; which will enable continuous batching and embeddings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from paperqa import Settings, ask&#xA;&#xA;local_llm_config = dict(&#xA;    model_list=[&#xA;        dict(&#xA;            model_name=&#34;my_llm_model&#34;,&#xA;            litellm_params=dict(&#xA;                model=&#34;my-llm-model&#34;,&#xA;                api_base=&#34;http://localhost:8080/v1&#34;,&#xA;                api_key=&#34;sk-no-key-required&#34;,&#xA;                temperature=0.1,&#xA;                frequency_penalty=1.5,&#xA;                max_tokens=512,&#xA;            ),&#xA;        )&#xA;    ]&#xA;)&#xA;&#xA;answer = ask(&#xA;    &#34;What manufacturing challenges are unique to bispecific antibodies?&#34;,&#xA;    settings=Settings(&#xA;        llm=&#34;my-llm-model&#34;,&#xA;        llm_config=local_llm_config,&#xA;        summary_llm=&#34;my-llm-model&#34;,&#xA;        summary_llm_config=local_llm_config,&#xA;    ),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Changing Embedding Model&lt;/h3&gt; &#xA;&lt;p&gt;PaperQA2 defaults to using OpenAI (&lt;code&gt;text-embedding-3-small&lt;/code&gt;) embeddings, but has flexible options for both vector stores and embedding choices. The simplest way to change an embedding is via the &lt;code&gt;embedding&lt;/code&gt; argument to the &lt;code&gt;Settings&lt;/code&gt; object constructor:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from paperqa import Settings, ask&#xA;&#xA;answer = ask(&#xA;    &#34;What manufacturing challenges are unique to bispecific antibodies?&#34;,&#xA;    settings=Settings(embedding=&#34;text-embedding-3-large&#34;),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;embedding&lt;/code&gt; accepts any embedding model name supported by litellm. PaperQA2 also supports an embedding input of &lt;code&gt;&#34;hybrid-&amp;lt;model_name&amp;gt;&#34;&lt;/code&gt; i.e. &lt;code&gt;&#34;hybrid-text-embedding-3-small&#34;&lt;/code&gt; to use a hybrid sparse keyword (based on a token modulo embedding) and dense vector embedding, where any litellm model can be used in the dense model name. &lt;code&gt;&#34;sparse&#34;&lt;/code&gt; can be used to use a sparse keyword embedding only.&lt;/p&gt; &#xA;&lt;p&gt;Embedding models are used to create PaperQA2&#39;s index of the full-text embedding vectors (&lt;code&gt;texts_index&lt;/code&gt; argument). The embedding model can be specified as a setting when you are adding new papers to the &lt;code&gt;Docs&lt;/code&gt; object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from paperqa import Docs, Settings&#xA;&#xA;docs = Docs()&#xA;for doc in (&#34;myfile.pdf&#34;, &#34;myotherfile.pdf&#34;):&#xA;    docs.add(doc, settings=Settings(embedding=&#34;text-embedding-large-3&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that PaperQA2 uses Numpy as a dense vector store. Its design of using a keyword search initially reduces the number of chunks needed for each answer to a relatively small number &amp;lt; 1k. Therefore, &lt;code&gt;NumpyVectorStore&lt;/code&gt; is a good place to start, it&#39;s a simple in-memory store, without an index. However, if a larger-than-memory vector store is needed, we are currently lacking here.&lt;/p&gt; &#xA;&lt;p&gt;The hybrid embeddings can be customized:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from paperqa import (&#xA;    Docs,&#xA;    HybridEmbeddingModel,&#xA;    SparseEmbeddingModel,&#xA;    LiteLLMEmbeddingModel,&#xA;)&#xA;&#xA;&#xA;model = HybridEmbeddingModel(&#xA;    models=[LiteLLMEmbeddingModel(), SparseEmbeddingModel(ndim=1024)]&#xA;)&#xA;docs = Docs()&#xA;for doc in (&#34;myfile.pdf&#34;, &#34;myotherfile.pdf&#34;):&#xA;    docs.add(doc, embedding_model=model)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The sparse embedding (keyword) models default to having 256 dimensions, but this can be specified via the &lt;code&gt;ndim&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;h3&gt;Adjusting number of sources&lt;/h3&gt; &#xA;&lt;p&gt;You can adjust the numbers of sources (passages of text) to reduce token usage or add more context. &lt;code&gt;k&lt;/code&gt; refers to the top k most relevant and diverse (may from different sources) passages. Each passage is sent to the LLM to summarize, or determine if it is irrelevant. After this step, a limit of &lt;code&gt;max_sources&lt;/code&gt; is applied so that the final answer can fit into the LLM context window. Thus, &lt;code&gt;k&lt;/code&gt; &amp;gt; &lt;code&gt;max_sources&lt;/code&gt; and &lt;code&gt;max_sources&lt;/code&gt; is the number of sources used in the final answer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from paperqa import Settings&#xA;&#xA;settings = Settings()&#xA;settings.answer.answer_max_sources = 3&#xA;settings.answer.k = 5&#xA;&#xA;docs.query(&#xA;    &#34;What manufacturing challenges are unique to bispecific antibodies?&#34;,&#xA;    settings=settings,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Code or HTML&lt;/h3&gt; &#xA;&lt;p&gt;You do not need to use papers -- you can use code or raw HTML. Note that this tool is focused on answering questions, so it won&#39;t do well at writing code. One note is that the tool cannot infer citations from code, so you will need to provide them yourself.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import glob&#xA;import os&#xA;from paperqa import Docs&#xA;&#xA;source_files = glob.glob(&#34;**/*.js&#34;)&#xA;&#xA;docs = Docs()&#xA;for f in source_files:&#xA;    # this assumes the file names are unique in code&#xA;    docs.add(f, citation=&#34;File &#34; + os.path.name(f), docname=os.path.name(f))&#xA;answer = docs.query(&#34;Where is the search bar in the header defined?&#34;)&#xA;print(answer)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using External DB/Vector DB and Caching&lt;/h3&gt; &#xA;&lt;p&gt;You may want to cache parsed texts and embeddings in an external database or file. You can then build a Docs object from those directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from paperqa import Docs, Doc, Text&#xA;&#xA;docs = Docs()&#xA;&#xA;for ... in my_docs:&#xA;    doc = Doc(docname=..., citation=..., dockey=..., citation=...)&#xA;    texts = [Text(text=..., name=..., doc=doc) for ... in my_texts]&#xA;    docs.add_texts(texts, doc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Creating Index&lt;/h3&gt; &#xA;&lt;p&gt;Indexes will be placed in the &lt;a href=&#34;https://docs.python.org/3/library/pathlib.html#pathlib.Path.home&#34;&gt;home directory&lt;/a&gt; by default. This can be controlled via the &lt;code&gt;PQA_HOME&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;p&gt;Indexes are made by reading files in the &lt;code&gt;Settings.paper_directory&lt;/code&gt;. By default, we recursively read from subdirectories of the paper directory, unless disabled using &lt;code&gt;Settings.index_recursively&lt;/code&gt;. The paper directory is not modified in any way, it&#39;s just read from.&lt;/p&gt; &#xA;&lt;h4&gt;Manifest Files&lt;/h4&gt; &#xA;&lt;p&gt;The indexing process attempts to infer paper metadata like title and DOI using LLM-powered text processing. You can avoid this point of uncertainty using a &#34;manifest&#34; file, which is a CSV containing three columns (order doesn&#39;t matter):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;file_location&lt;/code&gt;: relative path to the paper&#39;s PDF within the index directory&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doi&lt;/code&gt;: DOI of the paper&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;title&lt;/code&gt;: title of the paper&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By providing this information, we ensure queries to metadata providers like Crossref are accurate.&lt;/p&gt; &#xA;&lt;h3&gt;Reusing Index&lt;/h3&gt; &#xA;&lt;p&gt;The local search indexes are built based on a hash of the current &lt;code&gt;Settings&lt;/code&gt; object. So make sure you properly specify the &lt;code&gt;paper_directory&lt;/code&gt; to your &lt;code&gt;Settings&lt;/code&gt; object. In general, it&#39;s advisable to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Pre-build an index given a folder of papers (can take several minutes)&lt;/li&gt; &#xA; &lt;li&gt;Reuse the index to perform many queries&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os&#xA;&#xA;from paperqa import Settings&#xA;from paperqa.agents.main import agent_query&#xA;from paperqa.agents.models import QueryRequest&#xA;from paperqa.agents.search import get_directory_index&#xA;&#xA;&#xA;async def amain(folder_of_papers: str | os.PathLike) -&amp;gt; None:&#xA;    settings = Settings(paper_directory=folder_of_papers)&#xA;&#xA;    # 1. Build the index. Note an index name is autogenerated when unspecified&#xA;    built_index = await get_directory_index(settings=settings)&#xA;    print(settings.get_index_name())  # Display the autogenerated index name&#xA;    print(await built_index.index_files)  # Display the index contents&#xA;&#xA;    # 2. Use the settings as many times as you want with ask&#xA;    answer_response_1 = await agent_query(&#xA;        query=QueryRequest(&#xA;            query=&#34;What is the best way to make a vaccine?&#34;, settings=settings&#xA;        )&#xA;    )&#xA;    answer_response_2 = await agent_query(&#xA;        query=QueryRequest(&#xA;            query=&#34;What manufacturing challenges are unique to bispecific antibodies?&#34;,&#xA;            settings=settings,&#xA;        )&#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running on LitQA v2&lt;/h3&gt; &#xA;&lt;p&gt;In &lt;a href=&#34;https://raw.githubusercontent.com/Future-House/paper-qa/main/paperqa/agents/task.py&#34;&gt;&lt;code&gt;paperqa/agents/task.py&lt;/code&gt;&lt;/a&gt;, you will find:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;GradablePaperQAEnvironment&lt;/code&gt;: an environment that can grade answers given an evaluation function.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LitQAv2TaskDataset&lt;/code&gt;: a task dataset designed to pull LitQA v2 from Hugging Face, and create one &lt;code&gt;GradablePaperQAEnvironment&lt;/code&gt; per question&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Here is an example of how to use them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os&#xA;&#xA;from aviary.env import TaskDataset&#xA;from ldp.agent import SimpleAgent&#xA;from ldp.alg.callbacks import MeanMetricsCallback&#xA;from ldp.alg.runners import Evaluator, EvaluatorConfig&#xA;&#xA;from paperqa import QueryRequest, Settings&#xA;from paperqa.agents.task import TASK_DATASET_NAME&#xA;&#xA;&#xA;async def evaluate(folder_of_litqa_v2_papers: str | os.PathLike) -&amp;gt; None:&#xA;    base_query = QueryRequest(&#xA;        settings=Settings(paper_directory=folder_of_litqa_v2_papers)&#xA;    )&#xA;    dataset = TaskDataset.from_name(TASK_DATASET_NAME, base_query=base_query)&#xA;    metrics_callback = MeanMetricsCallback(eval_dataset=dataset)&#xA;&#xA;    evaluator = Evaluator(&#xA;        config=EvaluatorConfig(batch_size=3),&#xA;        agent=SimpleAgent(),&#xA;        dataset=dataset,&#xA;        callbacks=[metrics_callback],&#xA;    )&#xA;    await evaluator.evaluate()&#xA;&#xA;    print(metrics_callback.eval_means)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Clients Directly&lt;/h3&gt; &#xA;&lt;p&gt;One of the most powerful features of PaperQA2 is its ability to combine data from multiple metadata sources. For example, &lt;a href=&#34;https://unpaywall.org/&#34;&gt;Unpaywall&lt;/a&gt; can provide open access status/direct links to PDFs, &lt;a href=&#34;https://www.crossref.org/&#34;&gt;Crossref&lt;/a&gt; can provide bibtex, and &lt;a href=&#34;https://www.semanticscholar.org/&#34;&gt;Semantic Scholar&lt;/a&gt; can provide citation licenses. Here&#39;s a short demo of how to do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from paperqa.clients import DocMetadataClient, ALL_CLIENTS&#xA;&#xA;client = DocMetadataClient(clients=ALL_CLIENTS)&#xA;details = await client.query(title=&#34;Augmenting language models with chemistry tools&#34;)&#xA;&#xA;print(details.formatted_citation)&#xA;# Andres M. Bran, Sam Cox, Oliver Schilter, Carlo Baldassari, Andrew D. White, and Philippe Schwaller.&#xA;#  Augmenting large language models with chemistry tools. Nature Machine Intelligence,&#xA;# 6:525-535, May 2024. URL: https://doi.org/10.1038/s42256-024-00832-8,&#xA;# doi:10.1038/s42256-024-00832-8.&#xA;# This article has 243 citations and is from a domain leading peer-reviewed journal.&#xA;&#xA;print(details.citation_count)&#xA;# 243&#xA;&#xA;print(details.license)&#xA;# cc-by&#xA;&#xA;print(details.pdf_url)&#xA;# https://www.nature.com/articles/s42256-024-00832-8.pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;the &lt;code&gt;client.query&lt;/code&gt; is meant to check for exact matches of title. It&#39;s a bit robust (like to casing, missing a word). There are duplicates for titles though - so you can also add authors to disambiguate. Or you can provide a doi directly &lt;code&gt;client.query(doi=&#34;10.1038/s42256-024-00832-8&#34;)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re doing this at a large scale, you may not want to use &lt;code&gt;ALL_CLIENTS&lt;/code&gt; (just omit the argument) and you can specify which specific fields you want to speed up queries. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;details = await client.query(&#xA;    title=&#34;Augmenting large language models with chemistry tools&#34;,&#xA;    authors=[&#34;Andres M. Bran&#34;, &#34;Sam Cox&#34;],&#xA;    fields=[&#34;title&#34;, &#34;doi&#34;],&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will return much faster than the first query and we&#39;ll be certain the authors match.&lt;/p&gt; &#xA;&lt;h2&gt;Where do I get papers?&lt;/h2&gt; &#xA;&lt;p&gt;Well that&#39;s a really good question! It&#39;s probably best to just download PDFs of papers you think will help answer your question and start from there.&lt;/p&gt; &#xA;&lt;h3&gt;Zotero&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;It&#39;s been a while since we&#39;ve tested this - so let us know if it runs into issues!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you use &lt;a href=&#34;https://www.zotero.org/&#34;&gt;Zotero&lt;/a&gt; to organize your personal bibliography, you can use the &lt;code&gt;paperqa.contrib.ZoteroDB&lt;/code&gt; to query papers from your library, which relies on &lt;a href=&#34;https://github.com/urschrei/pyzotero&#34;&gt;pyzotero&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Install &lt;code&gt;pyzotero&lt;/code&gt; via the &lt;code&gt;zotero&lt;/code&gt; extra for this feature:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install paperqa[zotero]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;First, note that PaperQA2 parses the PDFs of papers to store in the database, so all relevant papers should have PDFs stored inside your database. You can get Zotero to automatically do this by highlighting the references you wish to retrieve, right clicking, and selecting &lt;em&gt;&#34;Find Available PDFs&#34;&lt;/em&gt;. You can also manually drag-and-drop PDFs onto each reference.&lt;/p&gt; &#xA;&lt;p&gt;To download papers, you need to get an API key for your account.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Get your library ID, and set it as the environment variable &lt;code&gt;ZOTERO_USER_ID&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For personal libraries, this ID is given &lt;a href=&#34;https://www.zotero.org/settings/keys&#34;&gt;here&lt;/a&gt; at the part &#34;&lt;em&gt;Your userID for use in API calls is XXXXXX&lt;/em&gt;&#34;.&lt;/li&gt; &#xA;   &lt;li&gt;For group libraries, go to your group page &lt;code&gt;https://www.zotero.org/groups/groupname&lt;/code&gt;, and hover over the settings link. The ID is the integer after /groups/. (&lt;em&gt;h/t pyzotero!&lt;/em&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Create a new API key &lt;a href=&#34;https://www.zotero.org/settings/keys/new&#34;&gt;here&lt;/a&gt; and set it as the environment variable &lt;code&gt;ZOTERO_API_KEY&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The key will need read access to the library.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;With this, we can download papers from our library and add them to PaperQA2:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from paperqa import Docs&#xA;from paperqa.contrib import ZoteroDB&#xA;&#xA;docs = Docs()&#xA;zotero = ZoteroDB(library_type=&#34;user&#34;)  # &#34;group&#34; if group library&#xA;&#xA;for item in zotero.iterate(limit=20):&#xA;    if item.num_pages &amp;gt; 30:&#xA;        continue  # skip long papers&#xA;    docs.add(item.pdf, docname=item.key)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which will download the first 20 papers in your Zotero database and add them to the &lt;code&gt;Docs&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;p&gt;We can also do specific queries of our Zotero library and iterate over the results:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for item in zotero.iterate(&#xA;    q=&#34;large language models&#34;,&#xA;    qmode=&#34;everything&#34;,&#xA;    sort=&#34;date&#34;,&#xA;    direction=&#34;desc&#34;,&#xA;    limit=100,&#xA;):&#xA;    print(&#34;Adding&#34;, item.title)&#xA;    docs.add(item.pdf, docname=item.key)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can read more about the search syntax by typing &lt;code&gt;zotero.iterate?&lt;/code&gt; in IPython.&lt;/p&gt; &#xA;&lt;h3&gt;Paper Scraper&lt;/h3&gt; &#xA;&lt;p&gt;If you want to search for papers outside of your own collection, I&#39;ve found an unrelated project called &lt;a href=&#34;https://github.com/blackadad/paper-scraper&#34;&gt;paper-scraper&lt;/a&gt; that looks like it might help. But beware, this project looks like it uses some scraping tools that may violate publisher&#39;s rights or be in a gray area of legality.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from paperqa import Docs&#xA;&#xA;keyword_search = &#34;bispecific antibody manufacture&#34;&#xA;papers = paperscraper.search_papers(keyword_search)&#xA;docs = Docs()&#xA;for path, data in papers.items():&#xA;    try:&#xA;        docs.add(path)&#xA;    except ValueError as e:&#xA;        # sometimes this happens if PDFs aren&#39;t downloaded or readable&#xA;        print(&#34;Could not read&#34;, path, e)&#xA;answer = docs.query(&#xA;    &#34;What manufacturing challenges are unique to bispecific antibodies?&#34;&#xA;)&#xA;print(answer)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Callbacks&lt;/h2&gt; &#xA;&lt;p&gt;To execute a function on each chunk of LLM completions, you need to provide a function that can be executed on each chunk. For example, to get a typewriter view of the completions, you can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def typewriter(chunk: str) -&amp;gt; None:&#xA;    print(chunk, end=&#34;&#34;)&#xA;&#xA;&#xA;docs = Docs()&#xA;&#xA;# add some docs...&#xA;&#xA;docs.query(&#xA;    &#34;What manufacturing challenges are unique to bispecific antibodies?&#34;,&#xA;    callbacks=[typewriter],&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Caching Embeddings&lt;/h3&gt; &#xA;&lt;p&gt;In general, embeddings are cached when you pickle a &lt;code&gt;Docs&lt;/code&gt; regardless of what vector store you use. So as long as you save your underlying &lt;code&gt;Docs&lt;/code&gt; object, you should be able to avoid re-embedding your documents.&lt;/p&gt; &#xA;&lt;h2&gt;Customizing Prompts&lt;/h2&gt; &#xA;&lt;p&gt;You can customize any of the prompts using settings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from paperqa import Docs, Settings&#xA;&#xA;my_qa_prompt = (&#xA;    &#34;Answer the question &#39;{question}&#39;\n&#34;&#xA;    &#34;Use the context below if helpful. &#34;&#xA;    &#34;You can cite the context using the key like (Example2012). &#34;&#xA;    &#34;If there is insufficient context, write a poem &#34;&#xA;    &#34;about how you cannot answer.\n\n&#34;&#xA;    &#34;Context: {context}&#34;&#xA;)&#xA;&#xA;docs = Docs()&#xA;settings = Settings()&#xA;settings.prompts.qa = my_qa_prompt&#xA;docs.query(&#34;Are covid-19 vaccines effective?&#34;, settings=settings)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pre and Post Prompts&lt;/h3&gt; &#xA;&lt;p&gt;Following the syntax above, you can also include prompts that are executed after the query and before the query. For example, you can use this to critique the answer.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;How come I get different results than your papers?&lt;/h3&gt; &#xA;&lt;p&gt;Internally at FutureHouse, we have a slightly different set of tools. We&#39;re trying to get some of them, like citation traversal, into this repo. However, we have APIs and licenses to access research papers that we cannot share openly. Similarly, in our research papers&#39; results we do not start with the known relevant PDFs. Our agent has to identify them using keyword search over all papers, rather than just a subset. We&#39;re gradually aligning these two versions of PaperQA, but until there is an open-source way to freely access papers (even just open source papers) you will need to provide PDFs yourself.&lt;/p&gt; &#xA;&lt;h3&gt;How is this different from LlamaIndex or LangChain?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/langchain-ai/langchain&#34;&gt;LangChain&lt;/a&gt; and &lt;a href=&#34;https://github.com/run-llama/llama_index&#34;&gt;LlamaIndex&lt;/a&gt; are both frameworks for working with LLM applications, with abstractions made for agentic workflows and retrieval augmented generation.&lt;/p&gt; &#xA;&lt;p&gt;Over time, the PaperQA team over time chose to become framework-agnostic, instead outsourcing LLM drivers to &lt;a href=&#34;https://docs.litellm.ai/docs/&#34;&gt;LiteLLM&lt;/a&gt; and no framework besides Pydantic for its tools. PaperQA focuses on scientific papers and their metadata.&lt;/p&gt; &#xA;&lt;p&gt;PaperQA can be reimplemented using either LlamaIndex or LangChain. For example, our &lt;code&gt;GatherEvidence&lt;/code&gt; tool can be reimplemented as a retriever with an LLM-based re-ranking and contextual summary. There is similar work with the tree response method in LlamaIndex.&lt;/p&gt; &#xA;&lt;h3&gt;Can I save or load?&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;Docs&lt;/code&gt; class can be pickled and unpickled. This is useful if you want to save the embeddings of the documents and then load them later.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pickle&#xA;&#xA;# save&#xA;with open(&#34;my_docs.pkl&#34;, &#34;wb&#34;) as f:&#xA;    pickle.dump(docs, f)&#xA;&#xA;# load&#xA;with open(&#34;my_docs.pkl&#34;, &#34;rb&#34;) as f:&#xA;    docs = pickle.load(f)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;Please read and cite the following papers if you use this software:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article{skarlinski2024language,&#xA;  title={Language agents achieve superhuman synthesis of scientific knowledge},&#xA;  author={&#xA;    Michael D. Skarlinski and&#xA;    Sam Cox and&#xA;    Jon M. Laurent and&#xA;    James D. Braza and&#xA;    Michaela Hinks and&#xA;    Michael J. Hammerling and&#xA;    Manvitha Ponnapati and&#xA;    Samuel G. Rodriques and&#xA;    Andrew D. White},&#xA;  year={2024},&#xA;  journal={preprint},&#xA;  url={https://paper.wikicrow.ai}&#xA;}&#xA;&#xA;&#xA;@article{lala2023paperqa,&#xA;  title={PaperQA: Retrieval-Augmented Generative Agent for Scientific Research},&#xA;  author={L{\&#39;a}la, Jakub and O&#39;Donoghue, Odhran and Shtedritski, Aleksandar and Cox, Sam and Rodriques, Samuel G and White, Andrew D},&#xA;  journal={arXiv preprint arXiv:2312.07559},&#xA;  year={2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>