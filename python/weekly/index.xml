<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-02T02:02:08Z</updated>
  <subtitle>Weekly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>faif/python-patterns</title>
    <updated>2022-06-02T02:02:08Z</updated>
    <id>tag:github.com,2022-06-02:/faif/python-patterns</id>
    <link href="https://github.com/faif/python-patterns" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of design patterns/idioms in Python&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;python-patterns&lt;/h1&gt; &#xA;&lt;p&gt;A collection of design patterns and idioms in Python.&lt;/p&gt; &#xA;&lt;h2&gt;Current Patterns&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Creational Patterns&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Pattern&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/creational/abstract_factory.py&#34;&gt;abstract_factory&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;use a generic function with specific factories&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/creational/borg.py&#34;&gt;borg&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;a singleton with shared-state among instances&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/creational/builder.py&#34;&gt;builder&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;instead of using multiple constructors, builder object receives parameters and returns constructed objects&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/creational/factory.py&#34;&gt;factory&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;delegate a specialized function/method to create instances&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/creational/lazy_evaluation.py&#34;&gt;lazy_evaluation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;lazily-evaluated property pattern in Python&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/creational/pool.py&#34;&gt;pool&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;preinstantiate and maintain a group of instances of the same type&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/creational/prototype.py&#34;&gt;prototype&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;use a factory and clones of a prototype for new instances (if instantiation is expensive)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Structural Patterns&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Pattern&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/3-tier.py&#34;&gt;3-tier&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;data&amp;lt;-&amp;gt;business logic&amp;lt;-&amp;gt;presentation separation (strict relationships)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/adapter.py&#34;&gt;adapter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;adapt one interface to another using a white-list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/bridge.py&#34;&gt;bridge&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;a client-provider middleman to soften interface changes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/composite.py&#34;&gt;composite&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;lets clients treat individual objects and compositions uniformly&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/decorator.py&#34;&gt;decorator&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;wrap functionality with other functionality in order to affect outputs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/facade.py&#34;&gt;facade&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;use one class as an API to a number of others&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/flyweight.py&#34;&gt;flyweight&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;transparently reuse existing instances of objects with similar/identical state&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/front_controller.py&#34;&gt;front_controller&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;single handler requests coming to the application&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/mvc.py&#34;&gt;mvc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;model&amp;lt;-&amp;gt;view&amp;lt;-&amp;gt;controller (non-strict relationships)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/proxy.py&#34;&gt;proxy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;an object funnels operations to something else&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Behavioral Patterns&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Pattern&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/chain_of_responsibility.py&#34;&gt;chain_of_responsibility&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;apply a chain of successive handlers to try and process the data&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/catalog.py&#34;&gt;catalog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;general methods will call different specialized methods based on construction parameter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/chaining_method.py&#34;&gt;chaining_method&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;continue callback next object method&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/command.py&#34;&gt;command&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;bundle a command and arguments to call later&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/iterator.py&#34;&gt;iterator&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;traverse a container and access the container&#39;s elements&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/iterator_alt.py&#34;&gt;iterator&lt;/a&gt; (alt. impl.)&lt;/td&gt; &#xA;   &lt;td&gt;traverse a container and access the container&#39;s elements&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/mediator.py&#34;&gt;mediator&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;an object that knows how to connect other objects and act as a proxy&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/memento.py&#34;&gt;memento&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;generate an opaque token that can be used to go back to a previous state&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/observer.py&#34;&gt;observer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;provide a callback for notification of events/changes to data&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/publish_subscribe.py&#34;&gt;publish_subscribe&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;a source syndicates events/data to 0+ registered listeners&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/registry.py&#34;&gt;registry&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;keep track of all subclasses of a given class&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/specification.py&#34;&gt;specification&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;business rules can be recombined by chaining the business rules together using boolean logic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/state.py&#34;&gt;state&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;logic is organized into a discrete number of potential states and the next state that can be transitioned to&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/strategy.py&#34;&gt;strategy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;selectable operations over the same data&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/template.py&#34;&gt;template&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;an object imposes a structure but takes pluggable components&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/visitor.py&#34;&gt;visitor&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;invoke a callback for all items of a collection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Design for Testability Patterns&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Pattern&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/dependency_injection.py&#34;&gt;dependency_injection&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;3 variants of dependency injection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fundamental Patterns&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Pattern&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/fundamental/delegation_pattern.py&#34;&gt;delegation_pattern&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;an object handles a request by delegating to a second object (the delegate)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Others&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Pattern&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/other/blackboard.py&#34;&gt;blackboard&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;architectural model, assemble different sub-system knowledge to build a solution, AI approach - non gang of four pattern&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/other/graph_search.py&#34;&gt;graph_search&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;graphing algorithms - non gang of four pattern&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/other/hsm/hsm.py&#34;&gt;hsm&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;hierarchical state machine - non gang of four pattern&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Videos&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=bsyjSW46TDg&#34;&gt;Design Patterns in Python by Peter Ullrich&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=G5OeYHCJuv0&#34;&gt;Sebastian Buczyński - Why you don&#39;t need design patterns in Python?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=imW-trt0i9I&#34;&gt;You Don&#39;t Need That!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=PfgEU3W0kyU&#34;&gt;Pluggable Libs Through Design Patterns&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;When an implementation is added or modified, please review the following guidelines:&lt;/p&gt; &#xA;&lt;h5&gt;Output&lt;/h5&gt; &#xA;&lt;p&gt;All files with example patterns have &lt;code&gt;### OUTPUT ###&lt;/code&gt; section at the bottom (migration to OUTPUT = &#34;&#34;&#34;...&#34;&#34;&#34; is in progress).&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;append_output.sh&lt;/code&gt; (e.g. &lt;code&gt;./append_output.sh borg.py&lt;/code&gt;) to generate/update it.&lt;/p&gt; &#xA;&lt;h5&gt;Docstrings&lt;/h5&gt; &#xA;&lt;p&gt;Add module level description in form of a docstring with links to corresponding references or other useful information.&lt;/p&gt; &#xA;&lt;p&gt;Add &#34;Examples in Python ecosystem&#34; section if you know some. It shows how patterns could be applied to real-world problems.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/facade.py&#34;&gt;facade.py&lt;/a&gt; has a good example of detailed description, but sometimes the shorter one as in &lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/behavioral/template.py&#34;&gt;template.py&lt;/a&gt; would suffice.&lt;/p&gt; &#xA;&lt;p&gt;In some cases class-level docstring with doctest would also help (see &lt;a href=&#34;https://raw.githubusercontent.com/faif/python-patterns/master/patterns/structural/adapter.py&#34;&gt;adapter.py&lt;/a&gt;) but readable OUTPUT section is much better.&lt;/p&gt; &#xA;&lt;h5&gt;Python 2 compatibility&lt;/h5&gt; &#xA;&lt;p&gt;To see Python 2 compatible versions of some patterns please check-out the &lt;a href=&#34;https://github.com/faif/python-patterns/tree/legacy&#34;&gt;legacy&lt;/a&gt; tag.&lt;/p&gt; &#xA;&lt;h5&gt;Update README&lt;/h5&gt; &#xA;&lt;p&gt;When everything else is done - update corresponding part of README.&lt;/p&gt; &#xA;&lt;h5&gt;Travis CI&lt;/h5&gt; &#xA;&lt;p&gt;Please run &lt;code&gt;tox&lt;/code&gt; or &lt;code&gt;tox -e ci37&lt;/code&gt; before submitting a patch to be sure your changes will pass CI.&lt;/p&gt; &#xA;&lt;p&gt;You can also run &lt;code&gt;flake8&lt;/code&gt; or &lt;code&gt;pytest&lt;/code&gt; commands manually. Examples can be found in &lt;code&gt;tox.ini&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing via issue triage &lt;a href=&#34;https://www.codetriage.com/faif/python-patterns&#34;&gt;&lt;img src=&#34;https://www.codetriage.com/faif/python-patterns/badges/users.svg?sanitize=true&#34; alt=&#34;Open Source Helpers&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;You can triage issues and pull requests which may include reproducing bug reports or asking for vital information, such as version numbers or reproduction instructions. If you would like to start triaging issues, one easy way to get started is to &lt;a href=&#34;https://www.codetriage.com/faif/python-patterns&#34;&gt;subscribe to python-patterns on CodeTriage&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>PeterL1n/BackgroundMattingV2</title>
    <updated>2022-06-02T02:02:08Z</updated>
    <id>tag:github.com,2022-06-02:/PeterL1n/BackgroundMattingV2</id>
    <link href="https://github.com/PeterL1n/BackgroundMattingV2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Real-Time High-Resolution Background Matting&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Real-Time High-Resolution Background Matting&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/PeterL1n/Matting-PyTorch/raw/master/images/teaser.gif?raw=true&#34; alt=&#34;Teaser&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Official repository for the paper &lt;a href=&#34;https://arxiv.org/abs/2012.07810&#34;&gt;Real-Time High-Resolution Background Matting&lt;/a&gt;. Our model requires capturing an additional background image and produces state-of-the-art matting results at 4K 30fps and HD 60fps on an Nvidia RTX 2080 TI GPU.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://grail.cs.washington.edu/projects/background-matting-v2/&#34;&gt;Visit project site&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=oMfPTeYDF9g&#34;&gt;Watch project video&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: The video conversion script in this repo is not meant be real-time. Our research&#39;s main contribution is the neural architecture for high resolution refinement and the new matting datasets. The &lt;code&gt;inference_speed_test.py&lt;/code&gt; script allows you to measure the tensor throughput of our model, which should achieve real-time. The &lt;code&gt;inference_video.py&lt;/code&gt; script allows you to test your video on our model, but the video encoding and decoding is done without hardware acceleration and parallization. For production use, you are expected to do additional engineering for hardware encoding/decoding and loading frames to GPU in parallel. For more architecture detail, please refer to our paper.&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;New Paper is Out!&lt;/h2&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://peterl1n.github.io/RobustVideoMatting/&#34;&gt;Robust Video Matting&lt;/a&gt;! Our new method does not require pre-captured backgrounds, and can inference at even faster speed!&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PeterL1n/BackgroundMattingV2/master/#updates&#34;&gt;Updates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PeterL1n/BackgroundMattingV2/master/#download&#34;&gt;Download&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PeterL1n/BackgroundMattingV2/master/#model--weights&#34;&gt;Model / Weights&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PeterL1n/BackgroundMattingV2/master/#video--image-examples&#34;&gt;Video / Image Examples&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PeterL1n/BackgroundMattingV2/master/#datasets&#34;&gt;Datasets&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PeterL1n/BackgroundMattingV2/master/#demo&#34;&gt;Demo&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PeterL1n/BackgroundMattingV2/master/#scripts&#34;&gt;Scripts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PeterL1n/BackgroundMattingV2/master/#notebooks&#34;&gt;Notebooks&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PeterL1n/BackgroundMattingV2/master/#usage--documentation&#34;&gt;Usage / Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PeterL1n/BackgroundMattingV2/master/#training&#34;&gt;Training&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PeterL1n/BackgroundMattingV2/master/#project-members&#34;&gt;Project members&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PeterL1n/BackgroundMattingV2/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Updates&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[Jun 21 2021] Paper received CVPR 2021 Best Student Paper Honorable Mention.&lt;/li&gt; &#xA; &lt;li&gt;[Apr 21 2021] VideoMatte240K dataset is now published.&lt;/li&gt; &#xA; &lt;li&gt;[Mar 06 2021] Training script is published.&lt;/li&gt; &#xA; &lt;li&gt;[Feb 28 2021] Paper is accepted to CVPR 2021.&lt;/li&gt; &#xA; &lt;li&gt;[Jan 09 2021] PhotoMatte85 dataset is now published.&lt;/li&gt; &#xA; &lt;li&gt;[Dec 21 2020] We updated our project to MIT License, which permits commercial use.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;h3&gt;Model / Weights&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://drive.google.com/drive/folders/1cbetlrKREitIgjnIikG1HdM4x72FtgBh?usp=sharing&#34;&gt;Download model / weights&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Video / Image Examples&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://drive.google.com/drive/folders/1j3BMrRFhFpfzJAe6P2WDtfanoeSCLPiq&#34;&gt;HD videos&lt;/a&gt; (by &lt;a href=&#34;https://github.com/senguptaumd/Background-Matting&#34;&gt;Sengupta et al.&lt;/a&gt;) (Our model is more robust on HD footage)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://drive.google.com/drive/folders/16H6Vz3294J-DEzauw06j4IUARRqYGgRD?usp=sharing&#34;&gt;4K videos and images&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Datasets&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://grail.cs.washington.edu/projects/background-matting-v2/#/datasets&#34;&gt;Download datasets&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;h4&gt;Scripts&lt;/h4&gt; &#xA;&lt;p&gt;We provide several scripts in this repo for you to experiment with our model. More detailed instructions are included in the files.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;inference_images.py&lt;/code&gt;: Perform matting on a directory of images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;inference_video.py&lt;/code&gt;: Perform matting on a video.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;inference_webcam.py&lt;/code&gt;: An interactive matting demo using your webcam.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Notebooks&lt;/h4&gt; &#xA;&lt;p&gt;Additionally, you can try our notebooks in Google Colab for performing matting on images and videos.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/drive/1cTxFq1YuoJ5QPqaTcnskwlHDolnjBkB9?usp=sharing&#34;&gt;Image matting (Colab)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/drive/1Y9zWfULc8-DDTSsCH-pX6Utw8skiJG5s?usp=sharing&#34;&gt;Video matting (Colab)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Virtual Camera&lt;/h4&gt; &#xA;&lt;p&gt;We provide a demo application that pipes webcam video through our model and outputs to a virtual camera. The script only works on Linux system and can be used in Zoom meetings. For more information, checkout:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/andreyryabtsev/BGMv2-webcam-plugin-linux&#34;&gt;Webcam plugin&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Usage / Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can run our model using &lt;strong&gt;PyTorch&lt;/strong&gt;, &lt;strong&gt;TorchScript&lt;/strong&gt;, &lt;strong&gt;TensorFlow&lt;/strong&gt;, and &lt;strong&gt;ONNX&lt;/strong&gt;. For detail about using our model, please check out the &lt;a href=&#34;https://raw.githubusercontent.com/PeterL1n/BackgroundMattingV2/master/doc/model_usage.md&#34;&gt;Usage / Documentation&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Training&lt;/h2&gt; &#xA;&lt;p&gt;Configure &lt;code&gt;data_path.pth&lt;/code&gt; to point to your dataset. The original paper uses &lt;code&gt;train_base.pth&lt;/code&gt; to train only the base model till convergence then use &lt;code&gt;train_refine.pth&lt;/code&gt; to train the entire network end-to-end. More details are specified in the paper.&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Project members&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/in/shanchuanlin/&#34;&gt;Shanchuan Lin&lt;/a&gt;*, University of Washington&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://andreyryabtsev.com/&#34;&gt;Andrey Ryabtsev&lt;/a&gt;*, University of Washington&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://homes.cs.washington.edu/~soumya91/&#34;&gt;Soumyadip Sengupta&lt;/a&gt;, University of Washington&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://homes.cs.washington.edu/~curless/&#34;&gt;Brian Curless&lt;/a&gt;, University of Washington&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://homes.cs.washington.edu/~seitz/&#34;&gt;Steve Seitz&lt;/a&gt;, University of Washington&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sites.google.com/view/irakemelmacher/&#34;&gt;Ira Kemelmacher-Shlizerman&lt;/a&gt;, University of Washington&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;sup&gt;* Equal contribution.&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This work is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/PeterL1n/BackgroundMattingV2/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;. If you use our work in your project, we would love you to include an acknowledgement and fill out our &lt;a href=&#34;https://docs.google.com/forms/d/e/1FAIpQLSdR9Yhu9V1QE3pN_LvZJJyDaEpJD2cscOOqMz8N732eLDf42A/viewform?usp=sf_link&#34;&gt;survey&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community Projects&lt;/h2&gt; &#xA;&lt;p&gt;Projects developed by third-party developers.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aescripts.com/goodbye-greenscreen/&#34;&gt;After Effects Plug-In&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>iperov/DeepFaceLab</title>
    <updated>2022-06-02T02:02:08Z</updated>
    <id>tag:github.com,2022-06-02:/iperov/DeepFaceLab</id>
    <link href="https://github.com/iperov/DeepFaceLab" rel="alternate"></link>
    <summary type="html">&lt;p&gt;DeepFaceLab is the leading software for creating deepfakes.&lt;/p&gt;&lt;hr&gt;&lt;table align=&#34;center&#34; border=&#34;0&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;h1&gt;DeepFaceLab&lt;/h1&gt; &lt;a href=&#34;https://arxiv.org/abs/2005.05535&#34;&gt; &lt;/a&gt;&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2005.05535&#34;&gt;&lt;img src=&#34;https://static.arxiv.org/static/browse/0.3.0/images/icons/favicon.ico&#34; width=&#34;14&#34;&gt; &lt;/a&gt;&lt;a href=&#34;https://arxiv.org/abs/2005.05535&#34;&gt;https://arxiv.org/abs/2005.05535&lt;/a&gt;&lt;/p&gt; &lt;h3&gt;the leading software for creating deepfakes&lt;/h3&gt; &lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/DFL_welcome.png&#34; align=&#34;center&#34;&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/logo_tensorflow.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/logo_cuda.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/logo_directx.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;More than 95% of deepfake videos are created with DeepFaceLab.&lt;/p&gt; &lt;p&gt;DeepFaceLab is used by such popular youtube channels as&lt;/p&gt; &#xA;    &lt;table&gt; &#xA;     &lt;thead&gt; &#xA;      &lt;tr&gt; &#xA;       &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/tiktok_icon.png&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://www.tiktok.com/@deeptomcruise&#34;&gt;deeptomcruise&lt;/a&gt;&lt;/th&gt; &#xA;       &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/tiktok_icon.png&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://www.tiktok.com/@1facerussia&#34;&gt;1facerussia&lt;/a&gt;&lt;/th&gt; &#xA;       &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/tiktok_icon.png&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://www.tiktok.com/@arnoldschwarzneggar&#34;&gt;arnoldschwarzneggar&lt;/a&gt;&lt;/th&gt; &#xA;      &lt;/tr&gt; &#xA;     &lt;/thead&gt; &#xA;    &lt;/table&gt; &#xA;    &lt;table&gt; &#xA;     &lt;thead&gt; &#xA;      &lt;tr&gt; &#xA;       &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/tiktok_icon.png&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://www.tiktok.com/@mariahcareyathome?&#34;&gt;mariahcareyathome?&lt;/a&gt;&lt;/th&gt; &#xA;       &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/tiktok_icon.png&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://www.tiktok.com/@diepnep&#34;&gt;diepnep&lt;/a&gt;&lt;/th&gt; &#xA;       &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/tiktok_icon.png&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://www.tiktok.com/@mr__heisenberg&#34;&gt;mr__heisenberg&lt;/a&gt;&lt;/th&gt; &#xA;       &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/tiktok_icon.png&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://www.tiktok.com/@deepcaprio&#34;&gt;deepcaprio&lt;/a&gt;&lt;/th&gt; &#xA;      &lt;/tr&gt; &#xA;     &lt;/thead&gt; &#xA;    &lt;/table&gt; &#xA;    &lt;table&gt; &#xA;     &lt;thead&gt; &#xA;      &lt;tr&gt; &#xA;       &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/youtube_icon.png&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://www.youtube.com/channel/UCGf4OlX_aTt8DlrgiH3jN3g/videos&#34;&gt;VFXChris Ume&lt;/a&gt;&lt;/th&gt; &#xA;       &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/youtube_icon.png&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://www.youtube.com/channel/UCZXbWcv7fSZFTAZV4beckyw/videos&#34;&gt;Sham00k&lt;/a&gt;&lt;/th&gt; &#xA;      &lt;/tr&gt; &#xA;     &lt;/thead&gt; &#xA;    &lt;/table&gt; &#xA;    &lt;table&gt; &#xA;     &lt;thead&gt; &#xA;      &lt;tr&gt; &#xA;       &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/youtube_icon.png&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=A91P2qtPT54&amp;amp;list=PLayt6616lBclvOprvrC8qKGCO-mAhPRux&#34;&gt;Collider videos&lt;/a&gt;&lt;/th&gt; &#xA;       &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/youtube_icon.png&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://www.youtube.com/channel/UCC0lK2Zo2BMXX-k1Ks0r7dg/videos&#34;&gt;iFake&lt;/a&gt;&lt;/th&gt; &#xA;       &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/youtube_icon.png&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://www.youtube.com/channel/UCFh3gL0a8BS21g-DHvXZEeQ/videos&#34;&gt;NextFace&lt;/a&gt;&lt;/th&gt; &#xA;      &lt;/tr&gt; &#xA;     &lt;/thead&gt; &#xA;    &lt;/table&gt; &#xA;    &lt;table&gt; &#xA;     &lt;thead&gt; &#xA;      &lt;tr&gt; &#xA;       &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/youtube_icon.png&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://www.youtube.com/channel/UCC5BbFxqLQgfnWPhprmQLVg&#34;&gt;Futuring Machine&lt;/a&gt;&lt;/th&gt; &#xA;       &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/youtube_icon.png&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://www.youtube.com/channel/UCRzgK52MmetD9aG8pDOID3g&#34;&gt;RepresentUS&lt;/a&gt;&lt;/th&gt; &#xA;       &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/youtube_icon.png&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://www.youtube.com/c/corridorcrew/videos&#34;&gt;Corridor Crew&lt;/a&gt;&lt;/th&gt; &#xA;      &lt;/tr&gt; &#xA;     &lt;/thead&gt; &#xA;    &lt;/table&gt; &#xA;    &lt;table&gt; &#xA;     &lt;thead&gt; &#xA;      &lt;tr&gt; &#xA;       &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/youtube_icon.png&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://www.youtube.com/channel/UCkHecfDTcSazNZSKPEhtPVQ&#34;&gt;DeepFaker&lt;/a&gt;&lt;/th&gt; &#xA;       &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/youtube_icon.png&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://www.youtube.com/c/DeepFakesinmovie/videos&#34;&gt;DeepFakes in movie&lt;/a&gt;&lt;/th&gt; &#xA;      &lt;/tr&gt; &#xA;     &lt;/thead&gt; &#xA;    &lt;/table&gt; &#xA;    &lt;table&gt; &#xA;     &lt;thead&gt; &#xA;      &lt;tr&gt; &#xA;       &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/youtube_icon.png&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://www.youtube.com/channel/UCkNFhcYNLQ5hr6A6lZ56mKA&#34;&gt;DeepFakeCreator&lt;/a&gt;&lt;/th&gt; &#xA;       &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/youtube_icon.png&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://www.youtube.com/user/Jarkancio/videos&#34;&gt;Jarkan&lt;/a&gt;&lt;/th&gt; &#xA;      &lt;/tr&gt; &#xA;     &lt;/thead&gt; &#xA;    &lt;/table&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;h1&gt;What can I do using DeepFaceLab?&lt;/h1&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;h2&gt;Replace the face&lt;/h2&gt; &lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/replace_the_face.jpg&#34; align=&#34;center&#34;&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;h2&gt;De-age the face&lt;/h2&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;center&#34; width=&#34;50%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/deage_0_1.jpg&#34; align=&#34;center&#34;&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;50%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/deage_0_2.jpg&#34; align=&#34;center&#34;&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/youtube_icon.png&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=Ddx5B-84ebo&#34;&gt;https://www.youtube.com/watch?v=Ddx5B-84ebo&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;h2&gt;Replace the head&lt;/h2&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;center&#34; width=&#34;50%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/head_replace_0_1.jpg&#34; align=&#34;center&#34;&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;50%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/head_replace_0_2.jpg&#34; align=&#34;center&#34;&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/youtube_icon.png&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=xr5FHd0AdlQ&#34;&gt;https://www.youtube.com/watch?v=xr5FHd0AdlQ&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;center&#34; width=&#34;50%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/head_replace_1_1.jpg&#34; align=&#34;center&#34;&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;50%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/head_replace_1_2.jpg&#34; align=&#34;center&#34;&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/youtube_icon.png&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=RTjgkhMugVw&#34;&gt;https://www.youtube.com/watch?v=RTjgkhMugVw&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;center&#34; width=&#34;50%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/head_replace_2_1.jpg&#34; align=&#34;center&#34;&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;50%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/head_replace_2_2.jpg&#34; align=&#34;center&#34;&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/youtube_icon.png&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=R9f7WD0gKPo&#34;&gt;https://www.youtube.com/watch?v=R9f7WD0gKPo&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;h2&gt;Manipulate politicians lips&lt;/h2&gt; &lt;p&gt;(voice replacement is not included!) (also requires a skill in video editors such as &lt;em&gt;Adobe After Effects&lt;/em&gt; or &lt;em&gt;Davinci Resolve&lt;/em&gt;)&lt;/p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/political_speech2.jpg&#34; align=&#34;center&#34;&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/youtube_icon.png&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=IvY-Abd2FfM&#34;&gt;https://www.youtube.com/watch?v=IvY-Abd2FfM&lt;/a&gt;&lt;/p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/political_speech3.jpg&#34; align=&#34;center&#34;&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/youtube_icon.png&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=ERQlaJ_czHU&#34;&gt;https://www.youtube.com/watch?v=ERQlaJ_czHU&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;h1&gt;Deepfake native resolution progress&lt;/h1&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/deepfake_progress.png&#34; align=&#34;center&#34;&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/make_everything_ok.png&#34; align=&#34;center&#34;&gt; &lt;p&gt;Unfortunately, there is no &#34;make everything ok&#34; button in DeepFaceLab. You should spend time studying the workflow and growing your skills. A skill in programs such as &lt;em&gt;AfterEffects&lt;/em&gt; or &lt;em&gt;Davinci Resolve&lt;/em&gt; is also desirable.&lt;/p&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;h2&gt;Mini tutorial&lt;/h2&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=kOIMXt8KK8M&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/mini_tutorial.jpg&#34; align=&#34;center&#34;&gt; &lt;/a&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;h2&gt;Releases&lt;/h2&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;right&#34;&gt; &lt;a href=&#34;https://tinyurl.com/2p9cvt25&#34;&gt;Windows (magnet link)&lt;/a&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;Last release. Use torrent client to download.&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;right&#34;&gt; &lt;a href=&#34;https://mega.nz/folder/Po0nGQrA#dbbttiNWojCt8jzD4xYaPw&#34;&gt;Windows (Mega.nz)&lt;/a&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;Contains new and prev releases.&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;right&#34;&gt; &lt;a href=&#34;https://disk.yandex.ru/d/7i5XTKIKVg5UUg&#34;&gt;Windows (yandex.ru)&lt;/a&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;Contains new and prev releases.&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;right&#34;&gt; &lt;a href=&#34;https://github.com/chervonij/DFL-Colab&#34;&gt;Google Colab (github)&lt;/a&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;by @chervonij . You can train fakes for free using Google Colab.&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;right&#34;&gt; &lt;a href=&#34;https://github.com/nagadit/DeepFaceLab_Linux&#34;&gt;Linux (github)&lt;/a&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;by @nagadit&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;right&#34;&gt; &lt;a href=&#34;https://github.com/elemantalcode/dfl&#34;&gt;CentOS Linux (github)&lt;/a&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;May be outdated. By @elemantalcode&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;table align=&#34;center&#34; border=&#34;0&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;h2&gt;Links&lt;/h2&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;h3&gt;Guides and tutorials&lt;/h3&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;right&#34;&gt; &lt;a href=&#34;https://mrdeepfakes.com/forums/thread-guide-deepfacelab-2-0-guide&#34;&gt;DeepFaceLab guide&lt;/a&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;Main guide&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;right&#34;&gt; &lt;a href=&#34;https://mrdeepfakes.com/forums/thread-guide-deepfacelab-2-0-guide?pid=18459#pid18459&#34;&gt;Faceset creation guide&lt;/a&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;How to create the right faceset&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;right&#34;&gt; &lt;a href=&#34;https://mrdeepfakes.com/forums/thread-guide-deepfacelab-google-colab-tutorial&#34;&gt;Google Colab guide&lt;/a&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;Guide how to train the fake on Google Colab&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;right&#34;&gt; &lt;a href=&#34;https://mrdeepfakes.com/forums/thread-deepfacelab-2-0-compositing-in-davinci-resolve-vegas-pro-and-after-effects&#34;&gt;Compositing&lt;/a&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;To achieve the highest quality, compose deepfake manually in video editors such as Davinci Resolve or Adobe AfterEffects&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;right&#34;&gt; &lt;a href=&#34;https://mrdeepfakes.com/forums/thread-deepfacelab-2-0-discussion-tips-suggestions&#34;&gt;Discussion and suggestions&lt;/a&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;h3&gt;Supplementary material&lt;/h3&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;right&#34;&gt; &lt;a href=&#34;https://mrdeepfakes.com/forums/forum-celebrity-facesets&#34;&gt;Ready to work facesets&lt;/a&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;Celebrity facesets made by community&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;right&#34;&gt; &lt;a href=&#34;https://mrdeepfakes.com/forums/forum-trained-models&#34;&gt;Pretrained models&lt;/a&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;Pretrained models made by community&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;h3&gt;Communication groups&lt;/h3&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;right&#34;&gt; &lt;a href=&#34;https://discord.gg/S2h7kPySQp&#34;&gt;Discord&lt;/a&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;Official discord channel. English / Russian.&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;right&#34;&gt; &lt;a href=&#34;https://t.me/joinchat/ElkhqlgJ0I5HhdJyFar80w&#34;&gt;Telegram group&lt;/a&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;Official telegram group. English / Russian. For anonymous communication. Don&#39;t forget to hide your phone number&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;right&#34;&gt; &lt;a href=&#34;https://mrdeepfakes.com/forums/forum-russian-community&#34;&gt;Русский форум&lt;/a&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;right&#34;&gt; &lt;a href=&#34;https://mrdeepfakes.com/forums/&#34;&gt;mrdeepfakes&lt;/a&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;the biggest NSFW English community&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;right&#34;&gt; &lt;a href=&#34;https://www.reddit.com/r/DeepFakesSFW/new/&#34;&gt;reddit r/DeepFakesSFW/&lt;/a&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;Post your deepfakes there !&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;right&#34;&gt; &lt;a href=&#34;https://www.reddit.com/r/RUdeepfakes/new/&#34;&gt;reddit r/RUdeepfakes/&lt;/a&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;Постим русские дипфейки сюда !&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;right&#34;&gt; QQ群1095077489 &lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;中文交流QQ群，商务合作找群主&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;right&#34;&gt; &lt;a href=&#34;https://www.dfldata.xyz&#34;&gt;dfldata.xyz&lt;/a&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;中文交流论坛，免费软件教程、模型、人脸数据&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;right&#34;&gt; &lt;a href=&#34;https://www.deepfaker.xyz/&#34;&gt;deepfaker.xyz&lt;/a&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;中文学习站（非官方)&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;h2&gt;Related works&lt;/h2&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;right&#34;&gt; &lt;a href=&#34;https://github.com/iperov/DeepFaceLive&#34;&gt;DeepFaceLive&lt;/a&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;Real-time face swap for PC streaming or video calls&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;right&#34;&gt; &lt;a href=&#34;https://github.com/neuralchen/SimSwap&#34;&gt;neuralchen/SimSwap&lt;/a&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;Swapping face using ONE single photo 一张图免训练换脸&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;right&#34;&gt; &lt;a href=&#34;https://github.com/deepfakes/faceswap&#34;&gt;deepfakes/faceswap&lt;/a&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;Something that was before DeepFaceLab and still remains in the past&lt;/td&gt;&#xA;  &lt;/tr&gt;  &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;table align=&#34;center&#34; border=&#34;0&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;h2&gt;How I can help the project?&lt;/h2&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;h3&gt;Sponsor deepfake research and DeepFaceLab development.&lt;/h3&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;!--&#xA;&lt;tr&gt;&lt;td colspan=2 align=&#34;center&#34;&gt;&#xA;&lt;a href=&#34;https://www.paypal.com/paypalme/DeepFaceLab&#34;&gt;Donate via Paypal&lt;/a&gt;&#xA;&lt;/td&gt;&lt;/tr&gt;&#xA;--&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;a href=&#34;https://money.yandex.ru/to/41001142318065&#34;&gt;Donate via Yandex.Money&lt;/a&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; bitcoin:bc1qkhh7h0gwwhxgg6h6gpllfgstkd645fefrd5s6z &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;h3&gt;Collect facesets&lt;/h3&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;p&gt;You can collect faceset of any celebrity that can be used in DeepFaceLab and share it &lt;a href=&#34;https://mrdeepfakes.com/forums/forum-celebrity-facesets&#34;&gt;in the community&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;h3&gt;Star this repo&lt;/h3&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;p&gt;Register github account and push &#34;Star&#34; button.&lt;/p&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;table align=&#34;center&#34; border=&#34;0&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;h2&gt;Meme zone&lt;/h2&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;center&#34; width=&#34;50%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/meme1.jpg&#34; align=&#34;center&#34;&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;50%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/meme2.jpg&#34; align=&#34;center&#34;&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLab/master/doc/meme3.jpg&#34; align=&#34;center&#34;&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;center&#34; width=&#34;50%&#34;&gt; &lt;h2&gt;You don&#39;t need deepfake detector. You need to stop lying.&lt;/h2&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34; width=&#34;10%&#34;&gt; &lt;img src=&#34;https://i.imgur.com/z0e0xFB.jpg&#34; align=&#34;center&#34;&gt; &lt;p&gt;V.I. Lenin&lt;/p&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;p&gt;&lt;sub&gt;#deepfacelab #deepfakes #faceswap #face-swap #deep-learning #deeplearning #deep-neural-networks #deepface #deep-face-swap #fakeapp #fake-app #neural-networks #neural-nets #tensorflow #cuda #nvidia&lt;/sub&gt;&lt;/p&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>pittcsc/Summer2023-Internships</title>
    <updated>2022-06-02T02:02:08Z</updated>
    <id>tag:github.com,2022-06-02:/pittcsc/Summer2023-Internships</id>
    <link href="https://github.com/pittcsc/Summer2023-Internships" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Collection of Summer 2023 tech internships!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Summer 2023 Tech Internships by Pitt CSC 🌆🐢&lt;/h1&gt; &#xA;&lt;p&gt;And we&#39;re back! Use this repo to share and keep track of software, tech, CS, PM, quant internships for Summer 2023. List maintained by &lt;a href=&#34;https://pittcsc.org/&#34;&gt;the Pitt Computer Science Club&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h3&gt; Thanks for a great two years 💖💖 &lt;/h3&gt; &#xA; &lt;p&gt; &lt;img src=&#34;https://api.star-history.com/svg?repos=pittcsc/Summer2022-Internships&amp;amp;type=Date&#34; width=&#34;500&#34; alt=&#34;Star History&#34;&gt; &lt;/p&gt; &#xA; &lt;i&gt;Want to reach millions of CS students? Email &lt;a href=&#34;mailto:pittcsc@gmail.com?subject=Sponsoring the CSC Internship Repo&#34;&gt;pittcsc@gmail.com&lt;/a&gt; for partnership opportunities!&lt;/i&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt; &lt;a href=&#34;https://simplify.jobs/?utm_source=pittcsc&amp;amp;utm_medium=internships_repo&#34;&gt; &lt;b&gt;Applying to internships?&lt;/b&gt; &lt;br&gt; Autofill all your applications in a single click. &lt;br&gt; &lt;/a&gt;&lt;/p&gt;&#xA; &lt;div&gt;&#xA;  &lt;a href=&#34;https://simplify.jobs/?utm_source=pittcsc&amp;amp;utm_medium=internships_repo&#34;&gt; &lt;img src=&#34;https://res.cloudinary.com/dpeo4xcnc/image/upload/v1636594918/simplify_pittcsc.png&#34; width=&#34;450&#34; alt=&#34;Simplify&#34;&gt; &lt;/a&gt;&#xA; &lt;/div&gt;&#xA; &lt;a href=&#34;https://simplify.jobs/?utm_source=pittcsc&amp;amp;utm_medium=internships_repo&#34;&gt; &lt;/a&gt; &#xA; &lt;sub&gt;&lt;i&gt;Stop manually re-entering your information. Simplify’s extension helps you autofill internship applications on millions of sites.&lt;/i&gt;&lt;/sub&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;strong&gt;This repository is only for internships/co-ops in the United States, Canada or for Remote positions&lt;span&gt;🌎&lt;/span&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;🧠 For tips on the internship process check out the &lt;a href=&#34;https://www.pittcs.wiki/zero-to-offer&#34;&gt;Zero to Offer&lt;/a&gt; 🧠&lt;/p&gt; &#xA;&lt;p&gt;🙏 &lt;strong&gt;Contribute by submitting a &lt;a href=&#34;https://github.com/susam/gitpr#create-pull-request&#34;&gt;pull request&lt;/a&gt;!&lt;/strong&gt; 🙏&lt;/p&gt; &#xA;&lt;h2&gt;The List 👔&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Location&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.optiver.com/working-at-optiver/career-opportunities/5674025002/&#34;&gt;Optiver&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Chicago, IL&lt;/td&gt; &#xA;   &lt;td&gt;Interest&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://boards.greenhouse.io/bridgewater89/jobs/4076389002&#34;&gt;Bridgewater Associates&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Westport, CT&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://fiverings.avature.net/careers/FolderDetail/New-York-New-York-United-States-Quantitative-Trading-Intern-Summer-2023/586&#34;&gt;Five Rings&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NYC, NY&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cvent.me/RLRe57?RefId=refWC2021&#34;&gt;Greylock Techfair&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Virtual&lt;/td&gt; &#xA;   &lt;td&gt;Not an internship but a great career fair, Learn more &lt;a href=&#34;https://greylock.com/university-programs/&#34;&gt;here&lt;/a&gt;!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://careers.aqr.com/jobs/university-open-positions/greenwich-ct/2023-summer-internship-express-interest/2194349?gh_jid=2194349#/&#34;&gt;AQR&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Greenwich, CT&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://tas-creditsuisse.taleo.net/careersection/campus/moresearch.ftl&#34;&gt;Credit Suisse&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Raleigh, NC; NYC, NY&lt;/td&gt; &#xA;   &lt;td&gt;Search for &lt;code&gt;2023 Americas Technology Summer Analyst&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://jobs.citi.com/job/new-york/quantitative-analysis-summer-analyst-north-america-2023/287/28553736048&#34;&gt;Citi&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;New York, New York&lt;/td&gt; &#xA;   &lt;td&gt;Quantitative Analysis&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.amazon.jobs/en/jobs/1999770/amazon-robotics-software-development-engineer-sde-intern-summer-2023&#34;&gt;Amazon Robotics&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Greater Boston, MA&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://careers.sig.com/job/6289/Trading-Intern-Summer-2023-Expression-of-Interest&#34;&gt;SIG&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Philadelphia, PA&lt;/td&gt; &#xA;   &lt;td&gt;Quant Trading Expression of Interest&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;We love our contributors ❤️❤️&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Make a &lt;a href=&#34;https://github.com/susam/gitpr#create-pull-request&#34;&gt;pull request&lt;/a&gt; to help contribute.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/owini&#34;&gt;owini&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gintass&#34;&gt;GintasS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/EParmar18&#34;&gt;EParmar18&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/itscrystalli&#34;&gt;itscrystalli&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>shmilylty/OneForAll</title>
    <updated>2022-06-02T02:02:08Z</updated>
    <id>tag:github.com,2022-06-02:/shmilylty/OneForAll</id>
    <link href="https://github.com/shmilylty/OneForAll" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OneForAll是一款功能强大的子域收集工具&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OneForAll&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/shmilylty/OneForAll&#34;&gt;&lt;img src=&#34;https://travis-ci.org/shmilylty/OneForAll.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/shmilylty/OneForAll&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/shmilylty/OneForAll/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/shmilylty/OneForAll/maintainability&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/1287668a6b4c72af683e/maintainability&#34; alt=&#34;Maintainability&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/shmilylty/OneForAll&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/python-3.6%7C3.7%7C3.8-blue&#34; alt=&#34;python&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/shmilylty/OneForAll/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/release-v0.4.3-brightgreen&#34; alt=&#34;python&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;👊&lt;strong&gt;OneForAll是一款功能强大的子域收集工具&lt;/strong&gt; 📝&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/docs/en-us/README.md&#34;&gt;English Document&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shmilylty/OneForAll/master/docs/usage_example.svg?sanitize=true&#34; alt=&#34;Example&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🚀上手指南&lt;/h2&gt; &#xA;&lt;p&gt;📢 请务必花一点时间阅读此文档，有助于你快速熟悉OneForAll！&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;🐍安装要求&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;OneForAll基于&lt;a href=&#34;https://www.python.org/downloads/release/python-360/&#34;&gt;Python 3.6.0&lt;/a&gt;开发和测试，OneForAll需要高于Python 3.6.0的版本才能运行。 安装Python环境可以参考&lt;a href=&#34;https://pythonguidecn.readthedocs.io/zh/latest/starting/installation.html#python-3&#34;&gt;Python 3 安装指南&lt;/a&gt;。运行以下命令检查Python和pip3版本：&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -V&#xA;pip3 -V&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;如果你看到类似以下的输出便说明Python环境没有问题：&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Python 3.6.0&#xA;pip 19.2.2 from C:\Users\shmilylty\AppData\Roaming\Python\Python36\site-packages\pip (python 3.6)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;✔安装步骤（git 版）&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;strong&gt;下载&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;由于该项目&lt;strong&gt;处于开发中&lt;/strong&gt;，会不断进行更新迭代，下载时请使用&lt;code&gt;git clone&lt;/code&gt;&lt;strong&gt;克隆&lt;/strong&gt;最新代码仓库，也方便后续的更新，不推荐从Releases下载，因为Releases里版本更新缓慢，也不方便更新， 本项目已经在&lt;a href=&#34;https://gitee.com/shmilylty/OneForAll.git&#34;&gt;码云&lt;/a&gt;(Gitee)镜像了一份，国内推荐使用码云进行克隆比较快：&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://gitee.com/shmilylty/OneForAll.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;或者：&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/shmilylty/OneForAll.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;2&#34;&gt; &#xA;  &lt;li&gt;&lt;strong&gt;安装&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;你可以通过pip3安装OneForAll的依赖，以下为&lt;strong&gt;Windows系统&lt;/strong&gt;下使用&lt;strong&gt;pip3&lt;/strong&gt;安装依赖的示例：注意：如果你的Python3安装在系统Program Files目录下，如：&lt;code&gt;C:\Program Files\Python36&lt;/code&gt;，那么请以管理员身份运行命令提示符cmd执行以下命令！&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd OneForAll/&#xA;python3 -m pip install -U pip setuptools wheel -i https://mirrors.aliyun.com/pypi/simple/&#xA;pip3 install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple/&#xA;python3 oneforall.py --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;其他系统平台的请参考&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/docs/installation_dependency.md&#34;&gt;依赖安装&lt;/a&gt;，如果在安装依赖过程中发现编译某个依赖库失败时可以参考&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/docs/troubleshooting.md&#34;&gt;常见问题与回答.md&lt;/a&gt;文档中解决方法，如果依然不能解决欢迎加群反馈问题。&lt;/p&gt; &#xA; &lt;ol start=&#34;3&#34;&gt; &#xA;  &lt;li&gt;&lt;strong&gt;更新&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;执行以下命令&lt;strong&gt;更新&lt;/strong&gt;项目（可保存对&lt;code&gt;/config/setting.py&lt;/code&gt;和&lt;code&gt;/config/api.py&lt;/code&gt;的修改）：&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git stash        # 暂存本地的修改&#xA;git fetch --all  # 拉取项目更新&#xA;git pull         # 下载覆盖&#xA;git stash pop    # 释放本地修改&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;✔安装步骤（docker 版）&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;首先下载并编辑配置文件，添加自己的&lt;code&gt;api&lt;/code&gt;和个性化设置，并保留原始文件结构&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;config&#xA;├── api.py&#xA;├── log.py&#xA;└── setting.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;拉取镜像并执行，其中&lt;code&gt;~/.config&lt;/code&gt;替换为你自己配置文件所在文件夹的路径&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker pull shmilylty/oneforall&#xA;docker run -it --rm -v ~/results:/OneForAll/results -v ~/.config:/OneForAll/config shmilylty/oneforall --target example.com run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;参数直接加在指令末尾，结果会输出在本地目录&lt;code&gt;~/results&lt;/code&gt;，如需保存到其他位置，可以自行修改&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;✨使用演示&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;如果你是通过pip3安装的依赖则使用以下命令运行示例：&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 oneforall.py --target example.com run&#xA;python3 oneforall.py --targets ./example.txt run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shmilylty/OneForAll/master/docs/usage_example.svg?sanitize=true&#34; alt=&#34;Example&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;🧐结果说明&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;我们以&lt;code&gt;python3 oneforall.py --target example.com run&lt;/code&gt;命令为例，OneForAll在默认参数正常执行完毕会在results目录生成相应结果：&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shmilylty/OneForAll/master/images/Result.png&#34; alt=&#34;Result&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;example.com.csv&lt;/code&gt;是每个主域下的子域收集结果。&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;all_subdomain_result_1583034493.csv&lt;/code&gt;是每次运行OneForAll收集到子域的汇总结果，包含&lt;code&gt;example.com.csv&lt;/code&gt;，方便在批量收集场景中获取全部结果。&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;result.sqlite3&lt;/code&gt;是存放每次运行OneForAll收集到子域的SQLite3结果数据库，其数据库结构如下图：&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shmilylty/OneForAll/master/images/Database.png&#34; alt=&#34;Database&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;其中类似&lt;code&gt;example_com_origin_result&lt;/code&gt;表存放每个模块最初子域收集结果。&lt;/p&gt; &#xA; &lt;p&gt;其中类似&lt;code&gt;example_com_resolve_result&lt;/code&gt;表存放对子域进行解析后的结果。&lt;/p&gt; &#xA; &lt;p&gt;其中类似&lt;code&gt;example_com_last_result&lt;/code&gt;表存放上一次子域收集结果（需要收集两次以上才会生成）。&lt;/p&gt; &#xA; &lt;p&gt;其中类似&lt;code&gt;example_com_now_result&lt;/code&gt;表存放现在子域收集结果，一般情况关注这张表就可以了。&lt;/p&gt; &#xA; &lt;p&gt;更多信息请参阅&lt;a href=&#34;https://raw.githubusercontent.com/shmilylty/OneForAll/master/docs/field.md&#34;&gt;字段解释说明&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;🤔使用帮助&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;命令行参数只提供了一些常用参数，更多详细的参数配置请见&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/config/setting.py&#34;&gt;setting.py&lt;/a&gt;，如果你认为有些参数是命令界面经常使用到的或缺少了什么参数等问题非常欢迎反馈。由于众所周知的原因，如果要使用一些被墙的收集接口请先到&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/config/setting.py&#34;&gt;setting.py&lt;/a&gt;配置代理，有些收集模块需要提供API（大多都是可以注册账号免费获取），如果需要使用请到&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/config/api.py&#34;&gt;api.py&lt;/a&gt;配置API信息，如果不使用请忽略有关报错提示。（详细模块请阅读&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/docs/collection_modules.md&#34;&gt;收集模块说明&lt;/a&gt;）&lt;/p&gt; &#xA; &lt;p&gt;OneForAll命令行界面基于&lt;a href=&#34;https://github.com/google/python-fire/&#34;&gt;Fire&lt;/a&gt;实现，有关Fire更高级使用方法请参阅&lt;a href=&#34;https://github.com/google/python-fire/raw/master/docs/using-cli.md&#34;&gt;使用Fire CLI&lt;/a&gt;。&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/oneforall.py&#34;&gt;oneforall.py&lt;/a&gt;是主程序入口，oneforall.py可以调用&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/brute.py&#34;&gt;brute.py&lt;/a&gt;，&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/takerover.py&#34;&gt;takerover.py&lt;/a&gt;及&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/dbexport.py&#34;&gt;dbexport.py&lt;/a&gt;等模块，为了方便进行子域爆破独立出了brute.py，为了方便进行子域接管风险检查独立出了takerover.py，为了方便数据库导出独立出了dbexport.py，这些模块都可以单独运行，并且所接受参数要更丰富一点，如果要单独使用这些模块请参考&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/docs/usage_help.md&#34;&gt;使用帮助&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;❗注意：当你在使用过程中遇到一些问题或者疑惑时，请先到&lt;a href=&#34;https://github.com/shmilylty/OneForAll/issues&#34;&gt;Issues&lt;/a&gt;里使用搜索找找答案，还可以参阅&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/docs/troubleshooting.md&#34;&gt;常见问题与回答&lt;/a&gt;。&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;oneforall.py使用帮助&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;以下帮助信息可能不是最新的，你可以使用&lt;code&gt;python oneforall.py --help&lt;/code&gt;获取最新的帮助信息。&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python oneforall.py --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;NAME&#xA;    oneforall.py - OneForAll帮助信息&#xA;&#xA;SYNOPSIS&#xA;    oneforall.py COMMAND | --target=TARGET &amp;lt;flags&amp;gt;&#xA;&#xA;DESCRIPTION&#xA;    OneForAll是一款功能强大的子域收集工具&#xA;&#xA;    Example:&#xA;        python3 oneforall.py version&#xA;        python3 oneforall.py --target example.com run&#xA;        python3 oneforall.py --targets ./domains.txt run&#xA;        python3 oneforall.py --target example.com --valid None run&#xA;        python3 oneforall.py --target example.com --brute True run&#xA;        python3 oneforall.py --target example.com --port small run&#xA;        python3 oneforall.py --target example.com --fmt csv run&#xA;        python3 oneforall.py --target example.com --dns False run&#xA;        python3 oneforall.py --target example.com --req False run&#xA;        python3 oneforall.py --target example.com --takeover False run&#xA;        python3 oneforall.py --target example.com --show True run&#xA;&#xA;    Note:&#xA;        参数alive可选值True，False分别表示导出存活，全部子域结果&#xA;        参数port可选值有&#39;default&#39;, &#39;small&#39;, &#39;large&#39;, 详见config.py配置&#xA;        参数fmt可选格式有 &#39;csv&#39;,&#39;json&#39;&#xA;        参数path默认None使用OneForAll结果目录生成路径&#xA;&#xA;ARGUMENTS&#xA;    TARGET&#xA;        单个域名(二选一必需参数)&#xA;    TARGETS&#xA;        每行一个域名的文件路径(二选一必需参数)&#xA;&#xA;FLAGS&#xA;    --brute=BRUTE&#xA;        s&#xA;    --dns=DNS&#xA;        DNS解析子域(默认True)&#xA;    --req=REQ&#xA;        HTTP请求子域(默认True)&#xA;    --port=PORT&#xA;        请求验证子域的端口范围(默认只探测80端口)&#xA;    --valid=VALID&#xA;        只导出存活的子域结果(默认False)&#xA;    --fmt=FMT&#xA;        结果保存格式(默认csv)&#xA;    --path=PATH&#xA;        结果保存路径(默认None)&#xA;    --takeover=TAKEOVER&#xA;        检查子域接管(默认False)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;🎉项目简介&lt;/h2&gt; &#xA;&lt;p&gt;项目地址：&lt;a href=&#34;https://github.com/shmilylty/OneForAll&#34;&gt;https://github.com/shmilylty/OneForAll&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;在渗透测试中信息收集的重要性不言而喻，子域收集是信息收集中必不可少且非常重要的一环，目前网上也开源了许多子域收集的工具，但是总是存在以下部分问题：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;不够强大&lt;/strong&gt;，子域收集的接口不够多，不能做到对批量子域自动收集，没有自动子域解析，验证，FUZZ以及信息拓展等功能。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;不够友好&lt;/strong&gt;，固然命令行模块比较方便，但是当可选的参数很多，要实现的操作复杂，用命令行模式就有点不够友好，如果有交互良好，高可操作的前端那么使用体验就会好很多。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;缺少维护&lt;/strong&gt;，很多工具几年没有更新过一次，issues和PR是啥，不存在的。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;效率问题&lt;/strong&gt;，没有利用多进程，多线程以及异步协程技术，速度较慢。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;为了解决以上痛点，此项目应用而生，正如其名，我希望OneForAll是一款集百家之长，功能强大的全面快速子域收集终极神器🔨。&lt;/p&gt; &#xA;&lt;p&gt;目前OneForAll还在开发中，肯定有不少问题和需要改进的地方，欢迎大佬们提交&lt;a href=&#34;https://github.com/shmilylty/OneForAll/issues&#34;&gt;Issues&lt;/a&gt;和&lt;a href=&#34;https://github.com/shmilylty/OneForAll/pulls&#34;&gt;PR&lt;/a&gt;，用着还行给个小星星✨吧，目前有一个专门用于OneForAll交流和反馈QQ群👨‍👨‍👦‍👦：:&lt;a href=&#34;https://raw.githubusercontent.com/shang.qq.com/wpa/qunwpa?idkey=125d3689b60445cdbb11e4ddff38036b7f6f2abbf4f7957df5dddba81aa90771&#34;&gt;&lt;strong&gt;824414244&lt;/strong&gt;&lt;/a&gt;（加群验证：信息收集）。&lt;/p&gt; &#xA;&lt;h2&gt;👍功能特性&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;收集能力强大&lt;/strong&gt;，详细模块请阅读&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/docs/collection_modules.md&#34;&gt;收集模块说明&lt;/a&gt;。 &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;利用证书透明度收集子域（目前有6个模块：&lt;code&gt;censys_api&lt;/code&gt;，&lt;code&gt;certspotter&lt;/code&gt;，&lt;code&gt;crtsh&lt;/code&gt;，&lt;code&gt;entrust&lt;/code&gt;，&lt;code&gt;google&lt;/code&gt;，&lt;code&gt;spyse_api&lt;/code&gt;）&lt;/li&gt; &#xA;   &lt;li&gt;常规检查收集子域（目前有4个模块：域传送漏洞利用&lt;code&gt;axfr&lt;/code&gt;，检查跨域策略文件&lt;code&gt;cdx&lt;/code&gt;，检查HTTPS证书&lt;code&gt;cert&lt;/code&gt;，检查内容安全策略&lt;code&gt;csp&lt;/code&gt;，检查robots文件&lt;code&gt;robots&lt;/code&gt;，检查sitemap文件&lt;code&gt;sitemap&lt;/code&gt;，利用NSEC记录遍历DNS域&lt;code&gt;dnssec&lt;/code&gt;，后续会添加NSEC3记录等模块）&lt;/li&gt; &#xA;   &lt;li&gt;利用网上爬虫档案收集子域（目前有2个模块：&lt;code&gt;archivecrawl&lt;/code&gt;，&lt;code&gt;commoncrawl&lt;/code&gt;，此模块还在调试，该模块还有待添加和完善）&lt;/li&gt; &#xA;   &lt;li&gt;利用DNS数据集收集子域（目前有24个模块：&lt;code&gt;binaryedge_api&lt;/code&gt;, &lt;code&gt;bufferover&lt;/code&gt;, &lt;code&gt;cebaidu&lt;/code&gt;, &lt;code&gt;chinaz&lt;/code&gt;, &lt;code&gt;chinaz_api&lt;/code&gt;, &lt;code&gt;circl_api&lt;/code&gt;, &lt;code&gt;cloudflare&lt;/code&gt;, &lt;code&gt;dnsdb_api&lt;/code&gt;, &lt;code&gt;dnsdumpster&lt;/code&gt;, &lt;code&gt;hackertarget&lt;/code&gt;, &lt;code&gt;ip138&lt;/code&gt;, &lt;code&gt;ipv4info_api&lt;/code&gt;, &lt;code&gt;netcraft&lt;/code&gt;, &lt;code&gt;passivedns_api&lt;/code&gt;, &lt;code&gt;ptrarchive&lt;/code&gt;, &lt;code&gt;qianxun&lt;/code&gt;, &lt;code&gt;rapiddns&lt;/code&gt;, &lt;code&gt;riddler&lt;/code&gt;, &lt;code&gt;robtex&lt;/code&gt;, &lt;code&gt;securitytrails_api&lt;/code&gt;, &lt;code&gt;sitedossier&lt;/code&gt;, &lt;code&gt;threatcrowd&lt;/code&gt;, &lt;code&gt;wzpc&lt;/code&gt;, &lt;code&gt;ximcx&lt;/code&gt;）&lt;/li&gt; &#xA;   &lt;li&gt;利用DNS查询收集子域（目前有5个模块：通过枚举常见的SRV记录并做查询来收集子域&lt;code&gt;srv&lt;/code&gt;，以及通过查询域名的DNS记录中的MX,NS,SOA,TXT记录来收集子域）&lt;/li&gt; &#xA;   &lt;li&gt;利用威胁情报平台数据收集子域（目前有6个模块：&lt;code&gt;alienvault&lt;/code&gt;, &lt;code&gt;riskiq_api&lt;/code&gt;，&lt;code&gt;threatbook_api&lt;/code&gt;，&lt;code&gt;threatminer&lt;/code&gt;，&lt;code&gt;virustotal&lt;/code&gt;，&lt;code&gt;virustotal_api&lt;/code&gt;该模块还有待添加和完善）&lt;/li&gt; &#xA;   &lt;li&gt;利用搜索引擎发现子域（目前有18个模块：&lt;code&gt;ask&lt;/code&gt;, &lt;code&gt;baidu&lt;/code&gt;, &lt;code&gt;bing&lt;/code&gt;, &lt;code&gt;bing_api&lt;/code&gt;, &lt;code&gt;duckduckgo&lt;/code&gt;, &lt;code&gt;exalead&lt;/code&gt;, &lt;code&gt;fofa_api&lt;/code&gt;, &lt;code&gt;gitee&lt;/code&gt;, &lt;code&gt;github&lt;/code&gt;, &lt;code&gt;github_api&lt;/code&gt;, &lt;code&gt;google&lt;/code&gt;, &lt;code&gt;google_api&lt;/code&gt;, &lt;code&gt;shodan_api&lt;/code&gt;, &lt;code&gt;so&lt;/code&gt;, &lt;code&gt;sogou&lt;/code&gt;, &lt;code&gt;yahoo&lt;/code&gt;, &lt;code&gt;yandex&lt;/code&gt;, &lt;code&gt;zoomeye_api&lt;/code&gt;），在搜索模块中除特殊搜索引擎，通用的搜索引擎都支持自动排除搜索，全量搜索，递归搜索。&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;支持子域爆破&lt;/strong&gt;，该模块有常规的字典爆破，也有自定义的fuzz模式，支持批量爆破和递归爆破，自动判断泛解析并处理。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;支持子域验证&lt;/strong&gt;，默认开启子域验证，自动解析子域DNS，自动请求子域获取title和banner，并综合判断子域存活情况。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;支持子域爬取&lt;/strong&gt;，根据已有的子域，请求子域响应体以及响应体里的JS，从中再次发现新的子域。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;支持子域置换&lt;/strong&gt;，根据已有的子域，使用子域替换技术再次发现新的子域。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;支持子域接管&lt;/strong&gt;，默认开启子域接管风险检查，支持子域自动接管（目前只有Github，有待完善），支持批量检查。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;处理功能强大&lt;/strong&gt;，发现的子域结果支持自动去除，自动DNS解析，HTTP请求探测，自动筛选出有效子域，拓展子域的Banner信息，最终支持的导出格式有&lt;code&gt;txt&lt;/code&gt;, &lt;code&gt;csv&lt;/code&gt;, &lt;code&gt;json&lt;/code&gt;。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;速度极快&lt;/strong&gt;，&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/collect.py&#34;&gt;收集模块&lt;/a&gt;使用多线程调用，&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/brute.py&#34;&gt;爆破模块&lt;/a&gt;使用&lt;a href=&#34;https://github.com/blechschmidt/massdns&#34;&gt;massdns&lt;/a&gt;，DNS解析速度每秒可解析350000以上个域名，子域验证中DNS解析和HTTP请求使用异步多协程，多线程检查&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/takeover.py&#34;&gt;子域接管&lt;/a&gt;风险。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;体验良好&lt;/strong&gt;，各模块都有进度条，异步保存各模块结果。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;如果你有其他很棒的想法请务必告诉我！😎&lt;/p&gt; &#xA;&lt;h2&gt;🌲目录结构&lt;/h2&gt; &#xA;&lt;p&gt;更多信息请参阅&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/docs/directory_structure.md&#34;&gt;目录结构说明&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;本项目&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/docs/&#34;&gt;docs&lt;/a&gt;目录下还提供了一些帮助与说明，如&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/docs/dictionary_source.md&#34;&gt;子域字典来源说明&lt;/a&gt;、&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/docs/wildcard_judgment.png&#34;&gt;泛解析判断流程&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;👏用到框架&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aio-libs/aiohttp&#34;&gt;aiohttp&lt;/a&gt; - 异步http客户端/服务器框架&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/beautifulsoup4/&#34;&gt;beautifulsoup4&lt;/a&gt; - 可以轻松从HTML或XML文件中提取数据的Python库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/python-fire&#34;&gt;fire&lt;/a&gt; - Python Fire是一个纯粹根据任何Python对象自动生成命令行界面（CLI）的库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Delgan/loguru&#34;&gt;loguru&lt;/a&gt; - 旨在带来愉快的日志记录Python库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/blechschmidt/massdns&#34;&gt;massdns&lt;/a&gt; - 高性能的DNS解析器&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kennethreitz/records&#34;&gt;records&lt;/a&gt; - Records是一个非常简单但功能强大的库，用于对大多数关系数据库进行最原始SQL查询。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/psf/requests&#34;&gt;requests&lt;/a&gt; - Requests 唯一的一个非转基因的 Python HTTP 库，人类可以安全享用。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tqdm/tqdm&#34;&gt;tqdm&lt;/a&gt; - 适用于Python和CLI的快速，可扩展的进度条库&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;感谢这些伟大优秀的Python库！&lt;/p&gt; &#xA;&lt;h2&gt;🔖版本控制&lt;/h2&gt; &#xA;&lt;p&gt;该项目使用&lt;a href=&#34;https://semver.org/&#34;&gt;SemVer&lt;/a&gt;语言化版本格式进行版本管理，你可以参阅&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/docs/changes.md&#34;&gt;变更记录说明&lt;/a&gt;了解历史变更情况。&lt;/p&gt; &#xA;&lt;h2&gt;⌛后续计划&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 各模块持续优化和完善&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 操作强大交互人性的前端界面实现&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;更多信息请参阅&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/docs/todo.md&#34;&gt;后续开发计划&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;🙏贡献&lt;/h2&gt; &#xA;&lt;p&gt;非常热烈欢迎各位大佬一起完善本项目！&lt;/p&gt; &#xA;&lt;h2&gt;👨‍💻贡献者&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/shmilylty&#34;&gt;Jing Ling&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;核心开发&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;你可以在&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/docs/contributors.md&#34;&gt;贡献者文档&lt;/a&gt;中查看所有贡献者以及他们所做出的贡献，感谢他们让OneForAll变得更强大好用。&lt;/p&gt; &#xA;&lt;h2&gt;☕赞赏&lt;/h2&gt; &#xA;&lt;p&gt;如果你觉得这个项目帮助到了你，你可以打赏一杯咖啡以资鼓励:)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shmilylty/OneForAll/master/images/Donate.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📄版权&lt;/h2&gt; &#xA;&lt;p&gt;该项目签署了GPL-3.0授权许可，详情请参阅&lt;a href=&#34;https://github.com/shmilylty/OneForAll/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;😘鸣谢&lt;/h2&gt; &#xA;&lt;p&gt;感谢网上开源的各个子域收集项目！&lt;/p&gt; &#xA;&lt;p&gt;感谢&lt;a href=&#34;https://github.com/QAX-A-Team&#34;&gt;A-Team&lt;/a&gt;大哥们热情无私的问题解答！&lt;/p&gt; &#xA;&lt;h2&gt;📜免责声明&lt;/h2&gt; &#xA;&lt;p&gt;本工具仅能在取得足够合法授权的企业安全建设中使用，在使用本工具过程中，您应确保自己所有行为符合当地的法律法规。 如您在使用本工具的过程中存在任何非法行为，您将自行承担所有后果，本工具所有开发者和所有贡献者不承担任何法律及连带责任。 除非您已充分阅读、完全理解并接受本协议所有条款，否则，请您不要安装并使用本工具。 您的使用行为或者您以其他任何明示或者默示方式表示接受本协议的，即视为您已阅读并同意本协议的约束。&lt;/p&gt; &#xA;&lt;h2&gt;💖Star趋势&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/shmilylty/OneForAll&#34;&gt;&lt;img src=&#34;https://starchart.cc/shmilylty/OneForAll.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mindsdb/mindsdb</title>
    <updated>2022-06-02T02:02:08Z</updated>
    <id>tag:github.com,2022-06-02:/mindsdb/mindsdb</id>
    <link href="https://github.com/mindsdb/mindsdb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;In-Database Machine Learning&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img width=&#34;300&#34; src=&#34;https://github.com/mindsdb/mindsdb_native/raw/stable/assets/MindsDBColorPurp@3x.png?raw=true&#34; alt=&#34;MindsDB&#34;&gt; &lt;br&gt; &lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/mindsdb/mindsdb/actions&#34;&gt;&lt;img src=&#34;https://github.com/mindsdb/mindsdb/workflows/MindsDB%20workflow/badge.svg?sanitize=true&#34; alt=&#34;MindsDB workflow&#34;&gt;&lt;/a&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.python.org/downloads/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/python-3.6%20|%203.7|%203.8-brightgreen.svg&#34; alt=&#34;Python supported&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/MindsDB/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/MindsDB.svg?sanitize=true&#34; alt=&#34;PyPi Version&#34;&gt;&lt;/a&gt; &lt;img alt=&#34;PyPI - Downloads&#34; src=&#34;https://img.shields.io/pypi/dm/Mindsdb&#34;&gt; &lt;a href=&#34;https://hub.docker.com/u/mindsdb&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/mindsdb/mindsdb&#34; alt=&#34;Docker pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.mindsdb.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/website?url=https%3A%2F%2Fwww.mindsdb.com%2F&#34; alt=&#34;MindsDB Website&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://join.slack.com/t/mindsdbcommunity/shared_invite/zt-o8mrmx3l-5ai~5H66s6wlxFfBMVI6wQ&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-@mindsdbcommunity-brightgreen.svg?logo=slack &#34; alt=&#34;MindsDB Community&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://deepnote.com/project/Machine-Learning-With-SQL-8GDF7bc7SzKlhBLorqoIcw/%2Fmindsdb_demo.ipynb&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://deepnote.com/buttons/launch-in-deepnote-white.svg?sanitize=true&#34; alt=&#34;Launch in Deepnote&#34;&gt;&lt;/a&gt; &lt;br&gt;&lt;/p&gt; &#xA; &lt;h3 align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.mindsdb.com?utm_medium=community&amp;amp;utm_source=github&amp;amp;utm_campaign=mindsdb%20repo&#34;&gt;Website&lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href=&#34;https://docs.mindsdb.com?utm_medium=community&amp;amp;utm_source=github&amp;amp;utm_campaign=mindsdb%20repo&#34;&gt;Docs&lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href=&#34;https://join.slack.com/t/mindsdbcommunity/shared_invite/zt-o8mrmx3l-5ai~5H66s6wlxFfBMVI6wQ&#34;&gt;Community Slack&lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href=&#34;https://github.com/mindsdb/mindsdb/projects&#34;&gt;Contribute&lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href=&#34;https://cloud.mindsdb.com&#34;&gt;Demo&lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href=&#34;https://github.com/mindsdb/mindsdb/raw/staging/integrations_contest.md&#34;&gt;Integrations Contest&lt;/a&gt; &lt;/h3&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mindsdb.com?utm_medium=community&amp;amp;utm_source=github&amp;amp;utm_campaign=mindsdb%20repo&#34;&gt;MindsDB&lt;/a&gt; ML-SQL Server enables machine learning workflows for the most powerful databases and datawarehouses using SQL. &lt;a href=&#34;https://twitter.com/intent/tweet?text=Machine%20Learning%20inside%20Databases%20&amp;amp;url=https://www.mindsdb.com&amp;amp;via=mindsdb&amp;amp;hashtags=ai,ml,machine_learning,neural_networks,databases,sql&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/http/shields.io.svg?style=social&#34; alt=&#34;Tweet&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Developers can quickly add AI capabilities to your applications.&lt;/li&gt; &#xA; &lt;li&gt;Data Scientists can streamline MLOps by deploying ML models as AI Tables.&lt;/li&gt; &#xA; &lt;li&gt;Data Analysts can easily make forecasts on complex data (like multivariate time-series with high cardinality) and visualize them in BI tools like Tableau.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;NEW!&lt;/strong&gt; Check-out the new MindsDB &lt;a href=&#34;https://github.com/mindsdb/mindsdb/raw/staging/integrations_contest.md&#34;&gt;ideation 💡 challenge&lt;/a&gt; (and the cash&lt;span&gt;💵&lt;/span&gt; prizes) for democratizing machine learning!&lt;/p&gt; &#xA;&lt;p&gt;If you like our project then we would really appreciate &lt;strong&gt;a Star ⭐!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Also, check-out the &lt;a href=&#34;https://mindsdb.com/community?utm_medium=community&amp;amp;utm_source=github&amp;amp;utm_campaign=mindsdb%20repo&#34;&gt;rewards and community programs.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mindsdb/mindsdb#installation&#34;&gt;Installation&lt;/a&gt; - &lt;a href=&#34;https://github.com/mindsdb/mindsdb#overview&#34;&gt;Overview&lt;/a&gt; - &lt;a href=&#34;https://github.com/mindsdb/mindsdb#features&#34;&gt;Features&lt;/a&gt; - &lt;a href=&#34;https://github.com/mindsdb/mindsdb#database-integrations&#34;&gt;Database Integrations&lt;/a&gt; - &lt;a href=&#34;https://github.com/mindsdb/mindsdb#quickstart&#34;&gt;Quickstart&lt;/a&gt; - &lt;a href=&#34;https://github.com/mindsdb/mindsdb#documentation&#34;&gt;Documentation&lt;/a&gt; - &lt;a href=&#34;https://github.com/mindsdb/mindsdb#support&#34;&gt;Support&lt;/a&gt; - &lt;a href=&#34;https://github.com/mindsdb/mindsdb#contribution&#34;&gt;Contributing&lt;/a&gt; - &lt;a href=&#34;https://github.com/mindsdb/mindsdb#mailing-lists&#34;&gt;Mailing lists&lt;/a&gt; - &lt;a href=&#34;https://github.com/mindsdb/mindsdb#license&#34;&gt;License&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt; Machine Learning using SQL &lt;br&gt; &lt;br&gt; &lt;img width=&#34;600&#34; src=&#34;https://docs.mindsdb.com/assets/mdb_image.png&#34; alt=&#34;MindsDB&#34;&gt; &lt;/h2&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;You can try Mindsdb ML SQL server here &lt;a href=&#34;https://cloud.mindsdb.com&#34;&gt;(demo)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install the latest version of MindsDB please pull the following Docker image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull mindsdb/mindsdb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, use PyPI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install mindsdb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;MindsDB automates and abstracts machine learning models through virtual AI Tables:&lt;/p&gt; &#xA;&lt;p&gt;Apart from abstracting ML models as AI Tables inside databases, MindsDB has a set of unique capabilities as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Easily make predictions over very complex multivariate time-series data with high cardinality&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;An open JSON-AI syntax to tune ML models and optimize ML pipelines in a declarative way&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;How it works:&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Let MindsDB connect to your database.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Train a Predictor using a single SQL statement (make MindsDB learn from historical data automatically) or import your own ML model to a Predictor via JSON-AI .&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make predictions with SQL statements (Predictor is exposed as virtual AI Tables). There’s no need to deploy models since they are already part of the data layer.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Check our &lt;a href=&#34;https://docs.mindsdb.com/?utm_medium=community&amp;amp;utm_source=github&amp;amp;utm_campaign=mindsdb%20repo&#34;&gt;docs&lt;/a&gt; and &lt;a href=&#34;https://mindsdb.com/blog/?utm_medium=community&amp;amp;utm_source=github&amp;amp;utm_campaign=mindsdb%20repo&#34;&gt;blog&lt;/a&gt; for tutorials and use case examples.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatic data pre-processing, feature engineering and encoding&lt;/li&gt; &#xA; &lt;li&gt;Classification, regression, time-series tasks&lt;/li&gt; &#xA; &lt;li&gt;Bring models to production without “traditional deployment” as AI Tables&lt;/li&gt; &#xA; &lt;li&gt;Get mModels’ accuracy scoring and confidence intervals for each prediction&lt;/li&gt; &#xA; &lt;li&gt;Join ML models with existing data&lt;/li&gt; &#xA; &lt;li&gt;Anomaly detection&lt;/li&gt; &#xA; &lt;li&gt;Model explainability analysis&lt;/li&gt; &#xA; &lt;li&gt;GPU support for models’ training&lt;/li&gt; &#xA; &lt;li&gt;Open JSON-AI syntax to build models and bring your own ML blocks in a declarative way&lt;/li&gt; &#xA; &lt;li&gt;REST API available as well&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Database Integrations&lt;/h2&gt; &#xA;&lt;p&gt;MindsDB works with most of the SQL and NoSQL databases and data Streams for real-time ML.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Connect your Data&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.mindsdb.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Apache Kafka-808080?style=for-the-badge&amp;amp;logo=apache-kafka&amp;amp;logoColor=white&#34; alt=&#34;Connect Apache Kafka&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.mindsdb.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Amazon%20Redshift-0466C8?style=for-the-badge&amp;amp;logo=amazon-aws&amp;amp;logoColor=white&#34; alt=&#34;Connect Amazon Redshift&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.mindsdb.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Cassandra-1287B1?style=for-the-badge&amp;amp;logo=apache%20cassandra&amp;amp;logoColor=white&#34; alt=&#34;Connect Cassandra&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.mindsdb.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Clickhouse-e6e600?style=for-the-badge&amp;amp;logo=clickhouse&amp;amp;logoColor=white&#34; alt=&#34;Connect Clickhouse&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.mindsdb.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/CockroachDB-426EDF?style=for-the-badge&amp;amp;logo=cockroach-labs&amp;amp;logoColor=white&#34; alt=&#34;Connect CockroachDB&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.mindsdb.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/MariaDB-003545?style=for-the-badge&amp;amp;logo=mariadb&amp;amp;logoColor=white&#34; alt=&#34;Connect MariaDB&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.mindsdb.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Microsoft%20SQL%20Sever-CC2927?style=for-the-badge&amp;amp;logo=microsoft%20sql%20server&amp;amp;logoColor=white&#34; alt=&#34;Connect SQL Server&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.mindsdb.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/MongoDB-4EA94B?style=for-the-badge&amp;amp;logo=mongodb&amp;amp;logoColor=white&#34; alt=&#34;Connect MongoDB&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.mindsdb.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/MySQL-00758F?style=for-the-badge&amp;amp;logo=mysql&amp;amp;logoColor=white&#34; alt=&#34;Connect MySQL&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.mindsdb.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PostgreSQL-316192?style=for-the-badge&amp;amp;logo=postgresql&amp;amp;logoColor=white&#34; alt=&#34;Connect PostgreSQL&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.mindsdb.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/QuestDB-d14671?style=for-the-badge&amp;amp;logo=questdb&amp;amp;logoColor=white&#34; alt=&#34;Connect QuestDB&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.mindsdb.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/redis-%23DD0031.svg?&amp;amp;style=for-the-badge&amp;amp;logo=redis&amp;amp;logoColor=white&#34; alt=&#34;Connect Redis&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.mindsdb.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/ScyllaDB-53CADD?style=for-the-badge&amp;amp;logo=scylladbb&amp;amp;logoColor=white&#34; alt=&#34;Connect ScyllaDB&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.mindsdb.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Singlestore-5f07b4?style=for-the-badge&amp;amp;logo=singlestore&amp;amp;logoColor=white&#34; alt=&#34;Connect Singlestore&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.mindsdb.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Snowflake-35aedd?style=for-the-badge&amp;amp;logo=snowflake&amp;amp;logoColor=blue&#34; alt=&#34;Connect Snowflake&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.mindsdb.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Trino-dd00a1?style=for-the-badge&amp;amp;logo=trino&amp;amp;logoColor=white&#34; alt=&#34;Connect Trino&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mindsdb/mindsdb/issues/new?assignees=&amp;amp;labels=&amp;amp;template=feature-mindsdb-request.yaml&#34;&gt;&lt;span&gt;❓&lt;/span&gt; &lt;span&gt;👋&lt;/span&gt; Missing integration?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;To get your hands on MindsDB, we recommend using the &lt;a href=&#34;https://docs.mindsdb.com/deployment/docker/?utm_medium=community&amp;amp;utm_source=github&amp;amp;utm_campaign=mindsdb%20repo&#34;&gt;Docker image&lt;/a&gt; or simply sign up for a &lt;a href=&#34;https://cloud.mindsdb.com/signup?utm_medium=community&amp;amp;utm_source=github&amp;amp;utm_campaign=mindsdb%20repo&#34;&gt;free cloud account&lt;/a&gt;. Feel free to browse &lt;a href=&#34;https://docs.mindsdb.com?utm_medium=community&amp;amp;utm_source=github&amp;amp;utm_campaign=mindsdb%20repo&#34;&gt;documentation&lt;/a&gt; for other installation methods and tutorials.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can find the complete documentation of MindsDB at &lt;a href=&#34;https://docs.mindsdb.com?utm_medium=community&amp;amp;utm_source=github&amp;amp;utm_campaign=mindsdb%20repo&#34;&gt;docs.mindsdb.com&lt;/a&gt;. Documentation for our HTTP API can be found at &lt;a href=&#34;https://apidocs.mindsdb.com/&#34;&gt;apidocs.mindsdb.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you found a bug, please submit an &lt;a href=&#34;https://github.com/mindsdb/mindsdb/issues&#34;&gt;issue on Github&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To get community support, you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Post at MindsDB &lt;a href=&#34;https://join.slack.com/t/mindsdbcommunity/shared_invite/zt-o8mrmx3l-5ai~5H66s6wlxFfBMVI6wQ&#34;&gt;Slack community&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Ask for help at our &lt;a href=&#34;https://github.com/mindsdb/mindsdb/discussions&#34;&gt;Github Discussions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Ask a question at &lt;a href=&#34;https://stackoverflow.com/questions/tagged/mindsdb&#34;&gt;Stackoverflow&lt;/a&gt; with a MindsDB tag.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you need commercial support, please &lt;a href=&#34;https://mindsdb.com/contact/?utm_medium=community&amp;amp;utm_source=github&amp;amp;utm_campaign=mindsdb%20repo&#34;&gt;contact&lt;/a&gt; the MindsDB team.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;A great place to start contributing to MindsDB will be our GitHub projects for &lt;span&gt;🏁&lt;/span&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Community writers &lt;a href=&#34;https://github.com/mindsdb/mindsdb/projects/7&#34;&gt;dashboard tasks&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Community code contributors &lt;a href=&#34;https://github.com/mindsdb/mindsdb/projects/8&#34;&gt;dashboard tasks&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also, we are always open to suggestions so feel free to open new issues with your ideas and we can give you guidance!&lt;/p&gt; &#xA;&lt;p&gt;Being part of the core team is accessible to anyone who is motivated and wants to be part of that journey! If you&#39;d like to contribute to the project, refer to the &lt;a href=&#34;https://docs.mindsdb.com/contribute/?utm_medium=community&amp;amp;utm_source=github&amp;amp;utm_campaign=mindsdb%20repo&#34;&gt;contributing documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please note that this project is released with a &lt;a href=&#34;https://github.com/mindsdb/mindsdb/raw/stable/CODE_OF_CONDUCT.md&#34;&gt;Contributor Code of Conduct&lt;/a&gt;. By participating in this project, you agree to abide by its terms.&lt;/p&gt; &#xA;&lt;h3&gt;Current contributors&lt;/h3&gt; &#xA;&lt;a href=&#34;https://github.com/mindsdb/mindsdb/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contributors-img.web.app/image?repo=mindsdb/mindsdb&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Made with &lt;a href=&#34;https://contributors-img.web.app&#34;&gt;contributors-img&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Mailing lists&lt;/h2&gt; &#xA;&lt;p&gt;Subscribe to MindsDB Monthly &lt;a href=&#34;https://mindsdb.com/newsletter/?utm_medium=community&amp;amp;utm_source=github&amp;amp;utm_campaign=mindsdb%20repo&#34;&gt;Community Newsletter&lt;/a&gt; to get general announcements, release notes, information about MindsDB events, and the latest blog posts. You may also join our &lt;a href=&#34;https://mindsdb.com/beta-tester/?utm_medium=community&amp;amp;utm_source=github&amp;amp;utm_campaign=mindsdb%20repo&#34;&gt;beta-users&lt;/a&gt; group, and get access to new beta features.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MindsDB is licensed under &lt;a href=&#34;https://github.com/mindsdb/mindsdb/raw/master/LICENSE&#34;&gt;GNU General Public License v3.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>satwikkansal/wtfpython</title>
    <updated>2022-06-02T02:02:08Z</updated>
    <id>tag:github.com,2022-06-02:/satwikkansal/wtfpython</id>
    <link href="https://github.com/satwikkansal/wtfpython" rel="alternate"></link>
    <summary type="html">&lt;p&gt;What the f*ck Python? 😱&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/images/logo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;What the f*ck Python! 😱&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Exploring and understanding Python through surprising snippets.&lt;/p&gt; &#xA;&lt;p&gt;Translations: &lt;a href=&#34;https://github.com/robertparley/wtfpython-cn&#34;&gt;Chinese 中文&lt;/a&gt; | &lt;a href=&#34;https://github.com/vuduclyunitn/wtfptyhon-vi&#34;&gt;Vietnamese Tiếng Việt&lt;/a&gt; | &lt;a href=&#34;https://web.archive.org/web/20220511161045/https://github.com/JoseDeFreitas/wtfpython-es&#34;&gt;Spanish Español&lt;/a&gt; | &lt;a href=&#34;https://github.com/buttercrab/wtfpython-ko&#34;&gt;Korean 한국어&lt;/a&gt; | &lt;a href=&#34;https://github.com/satwikkansal/wtfpython/issues/new?title=Add%20translation%20for%20%5BLANGUAGE%5D&amp;amp;body=Expected%20time%20to%20finish:%20%5BX%5D%20weeks.%20I%27ll%20start%20working%20on%20it%20from%20%5BY%5D.&#34;&gt;Add translation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Other modes: &lt;a href=&#34;https://colab.research.google.com/github/satwikkansal/wtfpython/blob/master/irrelevant/wtf.ipynb&#34;&gt;Interactive&lt;/a&gt; | &lt;a href=&#34;https://pypi.python.org/pypi/wtfpython&#34;&gt;CLI&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Python, being a beautifully designed high-level and interpreter-based programming language, provides us with many features for the programmer&#39;s comfort. But sometimes, the outcomes of a Python snippet may not seem obvious at first sight.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a fun project attempting to explain what exactly is happening under the hood for some counter-intuitive snippets and lesser-known features in Python.&lt;/p&gt; &#xA;&lt;p&gt;While some of the examples you see below may not be WTFs in the truest sense, but they&#39;ll reveal some of the interesting parts of Python that you might be unaware of. I find it a nice way to learn the internals of a programming language, and I believe that you&#39;ll find it interesting too!&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re an experienced Python programmer, you can take it as a challenge to get most of them right in the first attempt. You may have already experienced some of them before, and I might be able to revive sweet old memories of yours! &lt;span&gt;😅&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;PS: If you&#39;re a returning reader, you can learn about the new modifications &lt;a href=&#34;https://github.com/satwikkansal/wtfpython/releases/&#34;&gt;here&lt;/a&gt; (the examples marked with asterisk are the ones added in the latest major revision).&lt;/p&gt; &#xA;&lt;p&gt;So, here we go...&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;!-- Generated using &#34;markdown-toc -i README.md --maxdepth 3&#34;--&gt; &#xA;&lt;!-- toc --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#structure-of-the-examples&#34;&gt;Structure of the Examples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-some-fancy-title&#34;&gt;▶ Some fancy Title&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-examples&#34;&gt;👀 Examples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#section-strain-your-brain&#34;&gt;Section: Strain your brain!&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-first-things-first-&#34;&gt;▶ First things first! *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-strings-can-be-tricky-sometimes&#34;&gt;▶ Strings can be tricky sometimes&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-be-careful-with-chained-operations&#34;&gt;▶ Be careful with chained operations&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-how-not-to-use-is-operator&#34;&gt;▶ How not to use &lt;code&gt;is&lt;/code&gt; operator&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-hash-brownies&#34;&gt;▶ Hash brownies&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-deep-down-were-all-the-same&#34;&gt;▶ Deep down, we&#39;re all the same.&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-disorder-within-order-&#34;&gt;▶ Disorder within order *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-keep-trying-&#34;&gt;▶ Keep trying... *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-for-what&#34;&gt;▶ For what?&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-evaluation-time-discrepancy&#34;&gt;▶ Evaluation time discrepancy&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-is-not--is-not-is-not-&#34;&gt;▶ &lt;code&gt;is not ...&lt;/code&gt; is not &lt;code&gt;is (not ...)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-a-tic-tac-toe-where-x-wins-in-the-first-attempt&#34;&gt;▶ A tic-tac-toe where X wins in the first attempt!&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-schr%C3%B6dingers-variable-&#34;&gt;▶ Schrödinger&#39;s variable&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-the-chicken-egg-problem-&#34;&gt;▶ The chicken-egg problem *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-subclass-relationships&#34;&gt;▶ Subclass relationships&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-methods-equality-and-identity&#34;&gt;▶ Methods equality and identity&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-all-true-ation-&#34;&gt;▶ All-true-ation *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-the-surprising-comma&#34;&gt;▶ The surprising comma&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-strings-and-the-backslashes&#34;&gt;▶ Strings and the backslashes&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-not-knot&#34;&gt;▶ not knot!&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-half-triple-quoted-strings&#34;&gt;▶ Half triple-quoted strings&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-whats-wrong-with-booleans&#34;&gt;▶ What&#39;s wrong with booleans?&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-class-attributes-and-instance-attributes&#34;&gt;▶ Class attributes and instance attributes&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-yielding-none&#34;&gt;▶ yielding None&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-yielding-from-return-&#34;&gt;▶ Yielding from... return! *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-nan-reflexivity-&#34;&gt;▶ Nan-reflexivity *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-mutating-the-immutable&#34;&gt;▶ Mutating the immutable!&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-the-disappearing-variable-from-outer-scope&#34;&gt;▶ The disappearing variable from outer scope&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-the-mysterious-key-type-conversion&#34;&gt;▶ The mysterious key type conversion&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-lets-see-if-you-can-guess-this&#34;&gt;▶ Let&#39;s see if you can guess this?&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#section-slippery-slopes&#34;&gt;Section: Slippery Slopes&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-modifying-a-dictionary-while-iterating-over-it&#34;&gt;▶ Modifying a dictionary while iterating over it&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-stubborn-del-operation&#34;&gt;▶ Stubborn &lt;code&gt;del&lt;/code&gt; operation&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-the-out-of-scope-variable&#34;&gt;▶ The out of scope variable&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-deleting-a-list-item-while-iterating&#34;&gt;▶ Deleting a list item while iterating&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-lossy-zip-of-iterators-&#34;&gt;▶ Lossy zip of iterators *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-loop-variables-leaking-out&#34;&gt;▶ Loop variables leaking out!&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-beware-of-default-mutable-arguments&#34;&gt;▶ Beware of default mutable arguments!&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-catching-the-exceptions&#34;&gt;▶ Catching the Exceptions&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-same-operands-different-story&#34;&gt;▶ Same operands, different story!&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-name-resolution-ignoring-class-scope&#34;&gt;▶ Name resolution ignoring class scope&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-rounding-like-a-banker-&#34;&gt;▶ Rounding like a banker *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-needles-in-a-haystack-&#34;&gt;▶ Needles in a Haystack *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-splitsies-&#34;&gt;▶ Splitsies *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-wild-imports-&#34;&gt;▶ Wild imports *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-all-sorted-&#34;&gt;▶ All sorted? *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-midnight-time-doesnt-exist&#34;&gt;▶ Midnight time doesn&#39;t exist?&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#section-the-hidden-treasures&#34;&gt;Section: The Hidden treasures!&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-okay-python-can-you-make-me-fly&#34;&gt;▶ Okay Python, Can you make me fly?&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-goto-but-why&#34;&gt;▶ &lt;code&gt;goto&lt;/code&gt;, but why?&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-brace-yourself&#34;&gt;▶ Brace yourself!&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-lets-meet-friendly-language-uncle-for-life&#34;&gt;▶ Let&#39;s meet Friendly Language Uncle For Life&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-even-python-understands-that-love-is-complicated&#34;&gt;▶ Even Python understands that love is complicated&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-yes-it-exists&#34;&gt;▶ Yes, it exists!&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-ellipsis-&#34;&gt;▶ Ellipsis *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-inpinity&#34;&gt;▶ Inpinity&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-lets-mangle&#34;&gt;▶ Let&#39;s mangle&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#section-appearances-are-deceptive&#34;&gt;Section: Appearances are deceptive!&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-skipping-lines&#34;&gt;▶ Skipping lines?&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-teleportation&#34;&gt;▶ Teleportation&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-well-something-is-fishy&#34;&gt;▶ Well, something is fishy...&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#section-miscellaneous&#34;&gt;Section: Miscellaneous&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#--is-faster&#34;&gt;▶ &lt;code&gt;+=&lt;/code&gt; is faster&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-lets-make-a-giant-string&#34;&gt;▶ Let&#39;s make a giant string!&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-slowing-down-dict-lookups-&#34;&gt;▶ Slowing down &lt;code&gt;dict&lt;/code&gt; lookups *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-bloating-instance-dicts-&#34;&gt;▶ Bloating instance &lt;code&gt;dict&lt;/code&gt;s *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-minor-ones-&#34;&gt;▶ Minor Ones *&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#acknowledgements&#34;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-license&#34;&gt;🎓 License&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#surprise-your-friends-as-well&#34;&gt;Surprise your friends as well!&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#more-content-like-this&#34;&gt;More content like this?&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- tocstop --&gt; &#xA;&lt;h1&gt;Structure of the Examples&lt;/h1&gt; &#xA;&lt;p&gt;All the examples are structured like below:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;▶ Some fancy Title&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# Set up the code.&#xA;# Preparation for the magic...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Output (Python version(s)):&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; triggering_statement&#xA;Some unexpected output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;(Optional): One line describing the unexpected output.&lt;/p&gt; &#xA; &lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Brief explanation of what&#39;s happening and why is it happening.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# Set up code&#xA;# More examples for further clarification (if necessary)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Output (Python version(s)):&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; trigger # some example that makes it easy to unveil the magic&#xA;# some justified output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; All the examples are tested on Python 3.5.2 interactive interpreter, and they should work for all the Python versions unless explicitly specified before the output.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;A nice way to get the most out of these examples, in my opinion, is to read them in sequential order, and for every example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Carefully read the initial code for setting up the example. If you&#39;re an experienced Python programmer, you&#39;ll successfully anticipate what&#39;s going to happen next most of the time.&lt;/li&gt; &#xA; &lt;li&gt;Read the output snippets and, &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Check if the outputs are the same as you&#39;d expect.&lt;/li&gt; &#xA;   &lt;li&gt;Make sure if you know the exact reason behind the output being the way it is. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;If the answer is no (which is perfectly okay), take a deep breath, and read the explanation (and if you still don&#39;t understand, shout out! and create an issue &lt;a href=&#34;https://github.com/satwikkansal/wtfpython/issues/new&#34;&gt;here&lt;/a&gt;).&lt;/li&gt; &#xA;     &lt;li&gt;If yes, give a gentle pat on your back, and you may skip to the next example.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;PS: You can also read WTFPython at the command line using the &lt;a href=&#34;https://pypi.python.org/pypi/wtfpython&#34;&gt;pypi package&lt;/a&gt;,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pip install wtfpython -U&#xA;$ wtfpython&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;👀 Examples&lt;/h1&gt; &#xA;&lt;h2&gt;Section: Strain your brain!&lt;/h2&gt; &#xA;&lt;h3&gt;▶ First things first! *&lt;/h3&gt; &#xA;&lt;!-- Example ID: d3d73936-3cf1-4632-b5ab-817981338863 --&gt; &#xA;&lt;!-- read-only --&gt; &#xA;&lt;p&gt;For some reason, the Python 3.8&#39;s &#34;Walrus&#34; operator (&lt;code&gt;:=&lt;/code&gt;) has become quite popular. Let&#39;s check it out,&lt;/p&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# Python version 3.8+&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; a = &#34;wtf_walrus&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; a&#xA;&#39;wtf_walrus&#39;&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; a := &#34;wtf_walrus&#34;&#xA;File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1&#xA;    a := &#34;wtf_walrus&#34;&#xA;      ^&#xA;SyntaxError: invalid syntax&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; (a := &#34;wtf_walrus&#34;) # This works though&#xA;&#39;wtf_walrus&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; a&#xA;&#39;wtf_walrus&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2 .&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# Python version 3.8+&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; a = 6, 9&#xA;&amp;gt;&amp;gt;&amp;gt; a&#xA;(6, 9)&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; (a := 6, 9)&#xA;(6, 9)&#xA;&amp;gt;&amp;gt;&amp;gt; a&#xA;6&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; a, b = 6, 9 # Typical unpacking&#xA;&amp;gt;&amp;gt;&amp;gt; a, b&#xA;(6, 9)&#xA;&amp;gt;&amp;gt;&amp;gt; (a, b = 16, 19) # Oops&#xA;  File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1&#xA;    (a, b = 16, 19)&#xA;          ^&#xA;SyntaxError: invalid syntax&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; (a, b := 16, 19) # This prints out a weird 3-tuple&#xA;(6, 16, 19)&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; a # a is still unchanged?&#xA;6&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; b&#xA;16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Quick walrus operator refresher&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Walrus operator (&lt;code&gt;:=&lt;/code&gt;) was introduced in Python 3.8, it can be useful in situations where you&#39;d want to assign values to variables within an expression.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def some_func():&#xA;        # Assume some expensive computation here&#xA;        # time.sleep(1000)&#xA;        return 5&#xA;&#xA;# So instead of,&#xA;if some_func():&#xA;        print(some_func()) # Which is bad practice since computation is happening twice&#xA;&#xA;# or&#xA;a = some_func()&#xA;if a:&#xA;    print(a)&#xA;&#xA;# Now you can concisely write&#xA;if a := some_func():&#xA;        print(a)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (&amp;gt; 3.8):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;5&#xA;5&#xA;5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This saved one line of code, and implicitly prevented invoking &lt;code&gt;some_func&lt;/code&gt; twice.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Unparenthesized &#34;assignment expression&#34; (use of walrus operator), is restricted at the top level, hence the &lt;code&gt;SyntaxError&lt;/code&gt; in the &lt;code&gt;a := &#34;wtf_walrus&#34;&lt;/code&gt; statement of the first snippet. Parenthesizing it worked as expected and assigned &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;As usual, parenthesizing of an expression containing &lt;code&gt;=&lt;/code&gt; operator is not allowed. Hence the syntax error in &lt;code&gt;(a, b = 6, 9)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The syntax of the Walrus operator is of the form &lt;code&gt;NAME:= expr&lt;/code&gt;, where &lt;code&gt;NAME&lt;/code&gt; is a valid identifier, and &lt;code&gt;expr&lt;/code&gt; is a valid expression. Hence, iterable packing and unpacking are not supported which means,&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;(a := 6, 9)&lt;/code&gt; is equivalent to &lt;code&gt;((a := 6), 9)&lt;/code&gt; and ultimately &lt;code&gt;(a, 9) &lt;/code&gt; (where &lt;code&gt;a&lt;/code&gt;&#39;s value is 6&#39;)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; (a := 6, 9) == ((a := 6), 9)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; x = (a := 696, 9)&#xA;&amp;gt;&amp;gt;&amp;gt; x&#xA;(696, 9)&#xA;&amp;gt;&amp;gt;&amp;gt; x[0] is a # Both reference same memory location&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Similarly, &lt;code&gt;(a, b := 16, 19)&lt;/code&gt; is equivalent to &lt;code&gt;(a, (b := 16), 19)&lt;/code&gt; which is nothing but a 3-tuple.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Strings can be tricky sometimes&lt;/h3&gt; &#xA;&lt;!-- Example ID: 30f1d3fc-e267-4b30-84ef-4d9e7091ac1a ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = &#34;some_string&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; id(a)&#xA;140420665652016&#xA;&amp;gt;&amp;gt;&amp;gt; id(&#34;some&#34; + &#34;_&#34; + &#34;string&#34;) # Notice that both the ids are same.&#xA;140420665652016&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = &#34;wtf&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; b = &#34;wtf&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; a is b&#xA;True&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; a = &#34;wtf!&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; b = &#34;wtf!&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; a is b&#xA;False&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a, b = &#34;wtf!&#34;, &#34;wtf!&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; a is b # All versions except 3.7.x&#xA;True&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; a = &#34;wtf!&#34;; b = &#34;wtf!&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; a is b # This will print True or False depending on where you&#39;re invoking it (python shell / ipython / as a script)&#xA;False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# This time in file some_file.py&#xA;a = &#34;wtf!&#34;&#xA;b = &#34;wtf!&#34;&#xA;print(a is b)&#xA;&#xA;# prints True when the module is invoked!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;4.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (&amp;lt; Python3.7 )&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;a&#39; * 20 is &#39;aaaaaaaaaaaaaaaaaaaa&#39;&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; &#39;a&#39; * 21 is &#39;aaaaaaaaaaaaaaaaaaaaa&#39;&#xA;False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Makes sense, right?&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The behavior in first and second snippets is due to a CPython optimization (called string interning) that tries to use existing immutable objects in some cases rather than creating a new object every time.&lt;/li&gt; &#xA; &lt;li&gt;After being &#34;interned,&#34; many variables may reference the same string object in memory (saving memory thereby).&lt;/li&gt; &#xA; &lt;li&gt;In the snippets above, strings are implicitly interned. The decision of when to implicitly intern a string is implementation-dependent. There are some rules that can be used to guess if a string will be interned or not: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;All length 0 and length 1 strings are interned.&lt;/li&gt; &#xA;   &lt;li&gt;Strings are interned at compile time (&lt;code&gt;&#39;wtf&#39;&lt;/code&gt; will be interned but &lt;code&gt;&#39;&#39;.join([&#39;w&#39;, &#39;t&#39;, &#39;f&#39;])&lt;/code&gt; will not be interned)&lt;/li&gt; &#xA;   &lt;li&gt;Strings that are not composed of ASCII letters, digits or underscores, are not interned. This explains why &lt;code&gt;&#39;wtf!&#39;&lt;/code&gt; was not interned due to &lt;code&gt;!&lt;/code&gt;. CPython implementation of this rule can be found &lt;a href=&#34;https://github.com/python/cpython/raw/3.6/Objects/codeobject.c#L19&#34;&gt;here&lt;/a&gt; &lt;img src=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/images/string-intern/string_intern.png&#34; alt=&#34;image&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;When &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are set to &lt;code&gt;&#34;wtf!&#34;&lt;/code&gt; in the same line, the Python interpreter creates a new object, then references the second variable at the same time. If you do it on separate lines, it doesn&#39;t &#34;know&#34; that there&#39;s already &lt;code&gt;&#34;wtf!&#34;&lt;/code&gt; as an object (because &lt;code&gt;&#34;wtf!&#34;&lt;/code&gt; is not implicitly interned as per the facts mentioned above). It&#39;s a compile-time optimization. This optimization doesn&#39;t apply to 3.7.x versions of CPython (check this &lt;a href=&#34;https://github.com/satwikkansal/wtfpython/issues/100&#34;&gt;issue&lt;/a&gt; for more discussion).&lt;/li&gt; &#xA; &lt;li&gt;A compile unit in an interactive environment like IPython consists of a single statement, whereas it consists of the entire module in case of modules. &lt;code&gt;a, b = &#34;wtf!&#34;, &#34;wtf!&#34;&lt;/code&gt; is single statement, whereas &lt;code&gt;a = &#34;wtf!&#34;; b = &#34;wtf!&#34;&lt;/code&gt; are two statements in a single line. This explains why the identities are different in &lt;code&gt;a = &#34;wtf!&#34;; b = &#34;wtf!&#34;&lt;/code&gt;, and also explain why they are same when invoked in &lt;code&gt;some_file.py&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The abrupt change in the output of the fourth snippet is due to a &lt;a href=&#34;https://en.wikipedia.org/wiki/Peephole_optimization&#34;&gt;peephole optimization&lt;/a&gt; technique known as Constant folding. This means the expression &lt;code&gt;&#39;a&#39;*20&lt;/code&gt; is replaced by &lt;code&gt;&#39;aaaaaaaaaaaaaaaaaaaa&#39;&lt;/code&gt; during compilation to save a few clock cycles during runtime. Constant folding only occurs for strings having a length of less than 21. (Why? Imagine the size of &lt;code&gt;.pyc&lt;/code&gt; file generated as a result of the expression &lt;code&gt;&#39;a&#39;*10**10&lt;/code&gt;). &lt;a href=&#34;https://github.com/python/cpython/raw/3.6/Python/peephole.c#L288&#34;&gt;Here&#39;s&lt;/a&gt; the implementation source for the same.&lt;/li&gt; &#xA; &lt;li&gt;Note: In Python 3.7, Constant folding was moved out from peephole optimizer to the new AST optimizer with some change in logic as well, so the fourth snippet doesn&#39;t work for Python 3.7. You can read more about the change &lt;a href=&#34;https://bugs.python.org/issue11549&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Be careful with chained operations&lt;/h3&gt; &#xA;&lt;!-- Example ID: 07974979-9c86-4720-80bd-467aa19470d9 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; (False == False) in [False] # makes sense&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; False == (False in [False]) # makes sense&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; False == False in [False] # now what?&#xA;True&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; True is False == False&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; False is False is False&#xA;True&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; 1 &amp;gt; 0 &amp;lt; 1&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; (1 &amp;gt; 0) &amp;lt; 1&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; 1 &amp;gt; (0 &amp;lt; 1)&#xA;False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;p&gt;As per &lt;a href=&#34;https://docs.python.org/3/reference/expressions.html#membership-test-operations&#34;&gt;https://docs.python.org/3/reference/expressions.html#membership-test-operations&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Formally, if a, b, c, ..., y, z are expressions and op1, op2, ..., opN are comparison operators, then a op1 b op2 c ... y opN z is equivalent to a op1 b and b op2 c and ... y opN z, except that each expression is evaluated at most once.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;While such behavior might seem silly to you in the above examples, it&#39;s fantastic with stuff like &lt;code&gt;a == b == c&lt;/code&gt; and &lt;code&gt;0 &amp;lt;= x &amp;lt;= 100&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;False is False is False&lt;/code&gt; is equivalent to &lt;code&gt;(False is False) and (False is False)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;True is False == False&lt;/code&gt; is equivalent to &lt;code&gt;True is False and False == False&lt;/code&gt; and since the first part of the statement (&lt;code&gt;True is False&lt;/code&gt;) evaluates to &lt;code&gt;False&lt;/code&gt;, the overall expression evaluates to &lt;code&gt;False&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;1 &amp;gt; 0 &amp;lt; 1&lt;/code&gt; is equivalent to &lt;code&gt;1 &amp;gt; 0 and 0 &amp;lt; 1&lt;/code&gt; which evaluates to &lt;code&gt;True&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The expression &lt;code&gt;(1 &amp;gt; 0) &amp;lt; 1&lt;/code&gt; is equivalent to &lt;code&gt;True &amp;lt; 1&lt;/code&gt; and &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; int(True)&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; True + 1 #not relevant for this example, but just for fun&#xA;2&#xA;&lt;/code&gt;&lt;/pre&gt; So, &lt;code&gt;1 &amp;lt; 1&lt;/code&gt; evaluates to &lt;code&gt;False&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ How not to use &lt;code&gt;is&lt;/code&gt; operator&lt;/h3&gt; &#xA;&lt;!-- Example ID: 230fa2ac-ab36-4ad1-b675-5f5a1c1a6217 ---&gt; &#xA;&lt;p&gt;The following is a very famous example present all over the internet.&lt;/p&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = 256&#xA;&amp;gt;&amp;gt;&amp;gt; b = 256&#xA;&amp;gt;&amp;gt;&amp;gt; a is b&#xA;True&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; a = 257&#xA;&amp;gt;&amp;gt;&amp;gt; b = 257&#xA;&amp;gt;&amp;gt;&amp;gt; a is b&#xA;False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = []&#xA;&amp;gt;&amp;gt;&amp;gt; b = []&#xA;&amp;gt;&amp;gt;&amp;gt; a is b&#xA;False&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; a = tuple()&#xA;&amp;gt;&amp;gt;&amp;gt; b = tuple()&#xA;&amp;gt;&amp;gt;&amp;gt; a is b&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3. &lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a, b = 257, 257&#xA;&amp;gt;&amp;gt;&amp;gt; a is b&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 3.7.x specifically)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a, b = 257, 257&#xA;&amp;gt;&amp;gt;&amp;gt; a is b&#xA;False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;The difference between &lt;code&gt;is&lt;/code&gt; and &lt;code&gt;==&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;is&lt;/code&gt; operator checks if both the operands refer to the same object (i.e., it checks if the identity of the operands matches or not).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;==&lt;/code&gt; operator compares the values of both the operands and checks if they are the same.&lt;/li&gt; &#xA; &lt;li&gt;So &lt;code&gt;is&lt;/code&gt; is for reference equality and &lt;code&gt;==&lt;/code&gt; is for value equality. An example to clear things up, &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; class A: pass&#xA;&amp;gt;&amp;gt;&amp;gt; A() is A() # These are two empty objects at two different memory locations.&#xA;False&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;256&lt;/code&gt; is an existing object but &lt;code&gt;257&lt;/code&gt; isn&#39;t&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;When you start up python the numbers from &lt;code&gt;-5&lt;/code&gt; to &lt;code&gt;256&lt;/code&gt; will be allocated. These numbers are used a lot, so it makes sense just to have them ready.&lt;/p&gt; &#xA;&lt;p&gt;Quoting from &lt;a href=&#34;https://docs.python.org/3/c-api/long.html&#34;&gt;https://docs.python.org/3/c-api/long.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The current implementation keeps an array of integer objects for all integers between -5 and 256, when you create an int in that range you just get back a reference to the existing object. So it should be possible to change the value of 1. I suspect the behavior of Python, in this case, is undefined. :-)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; id(256)&#xA;10922528&#xA;&amp;gt;&amp;gt;&amp;gt; a = 256&#xA;&amp;gt;&amp;gt;&amp;gt; b = 256&#xA;&amp;gt;&amp;gt;&amp;gt; id(a)&#xA;10922528&#xA;&amp;gt;&amp;gt;&amp;gt; id(b)&#xA;10922528&#xA;&amp;gt;&amp;gt;&amp;gt; id(257)&#xA;140084850247312&#xA;&amp;gt;&amp;gt;&amp;gt; x = 257&#xA;&amp;gt;&amp;gt;&amp;gt; y = 257&#xA;&amp;gt;&amp;gt;&amp;gt; id(x)&#xA;140084850247440&#xA;&amp;gt;&amp;gt;&amp;gt; id(y)&#xA;140084850247344&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here the interpreter isn&#39;t smart enough while executing &lt;code&gt;y = 257&lt;/code&gt; to recognize that we&#39;ve already created an integer of the value &lt;code&gt;257,&lt;/code&gt; and so it goes on to create another object in the memory.&lt;/p&gt; &#xA;&lt;p&gt;Similar optimization applies to other &lt;strong&gt;immutable&lt;/strong&gt; objects like empty tuples as well. Since lists are mutable, that&#39;s why &lt;code&gt;[] is []&lt;/code&gt; will return &lt;code&gt;False&lt;/code&gt; and &lt;code&gt;() is ()&lt;/code&gt; will return &lt;code&gt;True&lt;/code&gt;. This explains our second snippet. Let&#39;s move on to the third one,&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; refer to the same object when initialized with same value in the same line.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a, b = 257, 257&#xA;&amp;gt;&amp;gt;&amp;gt; id(a)&#xA;140640774013296&#xA;&amp;gt;&amp;gt;&amp;gt; id(b)&#xA;140640774013296&#xA;&amp;gt;&amp;gt;&amp;gt; a = 257&#xA;&amp;gt;&amp;gt;&amp;gt; b = 257&#xA;&amp;gt;&amp;gt;&amp;gt; id(a)&#xA;140640774013392&#xA;&amp;gt;&amp;gt;&amp;gt; id(b)&#xA;140640774013488&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;When a and b are set to &lt;code&gt;257&lt;/code&gt; in the same line, the Python interpreter creates a new object, then references the second variable at the same time. If you do it on separate lines, it doesn&#39;t &#34;know&#34; that there&#39;s already &lt;code&gt;257&lt;/code&gt; as an object.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It&#39;s a compiler optimization and specifically applies to the interactive environment. When you enter two lines in a live interpreter, they&#39;re compiled separately, therefore optimized separately. If you were to try this example in a &lt;code&gt;.py&lt;/code&gt; file, you would not see the same behavior, because the file is compiled all at once. This optimization is not limited to integers, it works for other immutable data types like strings (check the &#34;Strings are tricky example&#34;) and floats as well,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a, b = 257.0, 257.0&#xA;&amp;gt;&amp;gt;&amp;gt; a is b&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Why didn&#39;t this work for Python 3.7? The abstract reason is because such compiler optimizations are implementation specific (i.e. may change with version, OS, etc). I&#39;m still figuring out what exact implementation change cause the issue, you can check out this &lt;a href=&#34;https://github.com/satwikkansal/wtfpython/issues/100&#34;&gt;issue&lt;/a&gt; for updates.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Hash brownies&lt;/h3&gt; &#xA;&lt;!-- Example ID: eb17db53-49fd-4b61-85d6-345c5ca213ff ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;some_dict = {}&#xA;some_dict[5.5] = &#34;JavaScript&#34;&#xA;some_dict[5.0] = &#34;Ruby&#34;&#xA;some_dict[5] = &#34;Python&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_dict[5.5]&#xA;&#34;JavaScript&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict[5.0] # &#34;Python&#34; destroyed the existence of &#34;Ruby&#34;?&#xA;&#34;Python&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict[5] &#xA;&#34;Python&#34;&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; complex_five = 5 + 0j&#xA;&amp;gt;&amp;gt;&amp;gt; type(complex_five)&#xA;complex&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict[complex_five]&#xA;&#34;Python&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So, why is Python all over the place?&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Uniqueness of keys in a Python dictionary is by &lt;em&gt;equivalence&lt;/em&gt;, not identity. So even though &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;5.0&lt;/code&gt;, and &lt;code&gt;5 + 0j&lt;/code&gt; are distinct objects of different types, since they&#39;re equal, they can&#39;t both be in the same &lt;code&gt;dict&lt;/code&gt; (or &lt;code&gt;set&lt;/code&gt;). As soon as you insert any one of them, attempting to look up any distinct but equivalent key will succeed with the original mapped value (rather than failing with a &lt;code&gt;KeyError&lt;/code&gt;):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; 5 == 5.0 == 5 + 0j&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; 5 is not 5.0 is not 5 + 0j&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict = {}&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict[5.0] = &#34;Ruby&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; 5.0 in some_dict&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; (5 in some_dict) and (5 + 0j in some_dict)&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;This applies when setting an item as well. So when you do &lt;code&gt;some_dict[5] = &#34;Python&#34;&lt;/code&gt;, Python finds the existing item with equivalent key &lt;code&gt;5.0 -&amp;gt; &#34;Ruby&#34;&lt;/code&gt;, overwrites its value in place, and leaves the original key alone.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_dict&#xA;{5.0: &#39;Ruby&#39;}&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict[5] = &#34;Python&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict&#xA;{5.0: &#39;Python&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;So how can we update the key to &lt;code&gt;5&lt;/code&gt; (instead of &lt;code&gt;5.0&lt;/code&gt;)? We can&#39;t actually do this update in place, but what we can do is first delete the key (&lt;code&gt;del some_dict[5.0]&lt;/code&gt;), and then set it (&lt;code&gt;some_dict[5]&lt;/code&gt;) to get the integer &lt;code&gt;5&lt;/code&gt; as the key instead of floating &lt;code&gt;5.0&lt;/code&gt;, though this should be needed in rare cases.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How did Python find &lt;code&gt;5&lt;/code&gt; in a dictionary containing &lt;code&gt;5.0&lt;/code&gt;? Python does this in constant time without having to scan through every item by using hash functions. When Python looks up a key &lt;code&gt;foo&lt;/code&gt; in a dict, it first computes &lt;code&gt;hash(foo)&lt;/code&gt; (which runs in constant-time). Since in Python it is required that objects that compare equal also have the same hash value (&lt;a href=&#34;https://docs.python.org/3/reference/datamodel.html#object.__hash__&#34;&gt;docs&lt;/a&gt; here), &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;5.0&lt;/code&gt;, and &lt;code&gt;5 + 0j&lt;/code&gt; have the same hash value.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; 5 == 5.0 == 5 + 0j&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; hash(5) == hash(5.0) == hash(5 + 0j)&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The inverse is not necessarily true: Objects with equal hash values may themselves be unequal. (This causes what&#39;s known as a &lt;a href=&#34;https://en.wikipedia.org/wiki/Collision_(computer_science)&#34;&gt;hash collision&lt;/a&gt;, and degrades the constant-time performance that hashing usually provides.)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Deep down, we&#39;re all the same.&lt;/h3&gt; &#xA;&lt;!-- Example ID: 8f99a35f-1736-43e2-920d-3b78ec35da9b ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class WTF:&#xA;  pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; WTF() == WTF() # two different instances can&#39;t be equal&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; WTF() is WTF() # identities are also different&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; hash(WTF()) == hash(WTF()) # hashes _should_ be different as well&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; id(WTF()) == id(WTF())&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;When &lt;code&gt;id&lt;/code&gt; was called, Python created a &lt;code&gt;WTF&lt;/code&gt; class object and passed it to the &lt;code&gt;id&lt;/code&gt; function. The &lt;code&gt;id&lt;/code&gt; function takes its &lt;code&gt;id&lt;/code&gt; (its memory location), and throws away the object. The object is destroyed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When we do this twice in succession, Python allocates the same memory location to this second object as well. Since (in CPython) &lt;code&gt;id&lt;/code&gt; uses the memory location as the object id, the id of the two objects is the same.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;So, the object&#39;s id is unique only for the lifetime of the object. After the object is destroyed, or before it is created, something else can have the same id.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;But why did the &lt;code&gt;is&lt;/code&gt; operator evaluate to &lt;code&gt;False&lt;/code&gt;? Let&#39;s see with this snippet.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class WTF(object):&#xA;  def __init__(self): print(&#34;I&#34;)&#xA;  def __del__(self): print(&#34;D&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; WTF() is WTF()&#xA;I&#xA;I&#xA;D&#xA;D&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; id(WTF()) == id(WTF())&#xA;I&#xA;D&#xA;I&#xA;D&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As you may observe, the order in which the objects are destroyed is what made all the difference here.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Disorder within order *&lt;/h3&gt; &#xA;&lt;!-- Example ID: 91bff1f8-541d-455a-9de4-6cd8ff00ea66 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from collections import OrderedDict&#xA;&#xA;dictionary = dict()&#xA;dictionary[1] = &#39;a&#39;; dictionary[2] = &#39;b&#39;;&#xA;&#xA;ordered_dict = OrderedDict()&#xA;ordered_dict[1] = &#39;a&#39;; ordered_dict[2] = &#39;b&#39;;&#xA;&#xA;another_ordered_dict = OrderedDict()&#xA;another_ordered_dict[2] = &#39;b&#39;; another_ordered_dict[1] = &#39;a&#39;;&#xA;&#xA;class DictWithHash(dict):&#xA;    &#34;&#34;&#34;&#xA;    A dict that also implements __hash__ magic.&#xA;    &#34;&#34;&#34;&#xA;    __hash__ = lambda self: 0&#xA;&#xA;class OrderedDictWithHash(OrderedDict):&#xA;    &#34;&#34;&#34;&#xA;    An OrderedDict that also implements __hash__ magic.&#xA;    &#34;&#34;&#34;&#xA;    __hash__ = lambda self: 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; dictionary == ordered_dict # If a == b&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; dictionary == another_ordered_dict # and b == c&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; ordered_dict == another_ordered_dict # then why isn&#39;t c == a ??&#xA;False&#xA;&#xA;# We all know that a set consists of only unique elements,&#xA;# let&#39;s try making a set of these dictionaries and see what happens...&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; len({dictionary, ordered_dict, another_ordered_dict})&#xA;Traceback (most recent call last):&#xA;  File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1, in &amp;lt;module&amp;gt;&#xA;TypeError: unhashable type: &#39;dict&#39;&#xA;&#xA;# Makes sense since dict don&#39;t have __hash__ implemented, let&#39;s use&#xA;# our wrapper classes.&#xA;&amp;gt;&amp;gt;&amp;gt; dictionary = DictWithHash()&#xA;&amp;gt;&amp;gt;&amp;gt; dictionary[1] = &#39;a&#39;; dictionary[2] = &#39;b&#39;;&#xA;&amp;gt;&amp;gt;&amp;gt; ordered_dict = OrderedDictWithHash()&#xA;&amp;gt;&amp;gt;&amp;gt; ordered_dict[1] = &#39;a&#39;; ordered_dict[2] = &#39;b&#39;;&#xA;&amp;gt;&amp;gt;&amp;gt; another_ordered_dict = OrderedDictWithHash()&#xA;&amp;gt;&amp;gt;&amp;gt; another_ordered_dict[2] = &#39;b&#39;; another_ordered_dict[1] = &#39;a&#39;;&#xA;&amp;gt;&amp;gt;&amp;gt; len({dictionary, ordered_dict, another_ordered_dict})&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; len({ordered_dict, another_ordered_dict, dictionary}) # changing the order&#xA;2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;What is going on here?&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The reason why intransitive equality didn&#39;t hold among &lt;code&gt;dictionary&lt;/code&gt;, &lt;code&gt;ordered_dict&lt;/code&gt; and &lt;code&gt;another_ordered_dict&lt;/code&gt; is because of the way &lt;code&gt;__eq__&lt;/code&gt; method is implemented in &lt;code&gt;OrderedDict&lt;/code&gt; class. From the &lt;a href=&#34;https://docs.python.org/3/library/collections.html#ordereddict-objects&#34;&gt;docs&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Equality tests between OrderedDict objects are order-sensitive and are implemented as &lt;code&gt;list(od1.items())==list(od2.items())&lt;/code&gt;. Equality tests between &lt;code&gt;OrderedDict&lt;/code&gt; objects and other Mapping objects are order-insensitive like regular dictionaries.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The reason for this equality in behavior is that it allows &lt;code&gt;OrderedDict&lt;/code&gt; objects to be directly substituted anywhere a regular dictionary is used.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Okay, so why did changing the order affect the length of the generated &lt;code&gt;set&lt;/code&gt; object? The answer is the lack of intransitive equality only. Since sets are &#34;unordered&#34; collections of unique elements, the order in which elements are inserted shouldn&#39;t matter. But in this case, it does matter. Let&#39;s break it down a bit,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_set = set()&#xA;&amp;gt;&amp;gt;&amp;gt; some_set.add(dictionary) # these are the mapping objects from the snippets above&#xA;&amp;gt;&amp;gt;&amp;gt; ordered_dict in some_set&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; some_set.add(ordered_dict)&#xA;&amp;gt;&amp;gt;&amp;gt; len(some_set)&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; another_ordered_dict in some_set&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; some_set.add(another_ordered_dict)&#xA;&amp;gt;&amp;gt;&amp;gt; len(some_set)&#xA;1&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; another_set = set()&#xA;&amp;gt;&amp;gt;&amp;gt; another_set.add(ordered_dict)&#xA;&amp;gt;&amp;gt;&amp;gt; another_ordered_dict in another_set&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; another_set.add(another_ordered_dict)&#xA;&amp;gt;&amp;gt;&amp;gt; len(another_set)&#xA;2&#xA;&amp;gt;&amp;gt;&amp;gt; dictionary in another_set&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; another_set.add(another_ordered_dict)&#xA;&amp;gt;&amp;gt;&amp;gt; len(another_set)&#xA;2&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;So the inconsistency is due to &lt;code&gt;another_ordered_dict in another_set&lt;/code&gt; being &lt;code&gt;False&lt;/code&gt; because &lt;code&gt;ordered_dict&lt;/code&gt; was already present in &lt;code&gt;another_set&lt;/code&gt; and as observed before, &lt;code&gt;ordered_dict == another_ordered_dict&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Keep trying... *&lt;/h3&gt; &#xA;&lt;!-- Example ID: b4349443-e89f-4d25-a109-82616be9d41a ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def some_func():&#xA;    try:&#xA;        return &#39;from_try&#39;&#xA;    finally:&#xA;        return &#39;from_finally&#39;&#xA;&#xA;def another_func(): &#xA;    for _ in range(3):&#xA;        try:&#xA;            continue&#xA;        finally:&#xA;            print(&#34;Finally!&#34;)&#xA;&#xA;def one_more_func(): # A gotcha!&#xA;    try:&#xA;        for i in range(3):&#xA;            try:&#xA;                1 / i&#xA;            except ZeroDivisionError:&#xA;                # Let&#39;s throw it here and handle it outside for loop&#xA;                raise ZeroDivisionError(&#34;A trivial divide by zero error&#34;)&#xA;            finally:&#xA;                print(&#34;Iteration&#34;, i)&#xA;                break&#xA;    except ZeroDivisionError as e:&#xA;        print(&#34;Zero division error occurred&#34;, e)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_func()&#xA;&#39;from_finally&#39;&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; another_func()&#xA;Finally!&#xA;Finally!&#xA;Finally!&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; 1 / 0&#xA;Traceback (most recent call last):&#xA;  File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1, in &amp;lt;module&amp;gt;&#xA;ZeroDivisionError: division by zero&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; one_more_func()&#xA;Iteration 0&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When a &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt; statement is executed in the &lt;code&gt;try&lt;/code&gt; suite of a &#34;try…finally&#34; statement, the &lt;code&gt;finally&lt;/code&gt; clause is also executed on the way out.&lt;/li&gt; &#xA; &lt;li&gt;The return value of a function is determined by the last &lt;code&gt;return&lt;/code&gt; statement executed. Since the &lt;code&gt;finally&lt;/code&gt; clause always executes, a &lt;code&gt;return&lt;/code&gt; statement executed in the &lt;code&gt;finally&lt;/code&gt; clause will always be the last one executed.&lt;/li&gt; &#xA; &lt;li&gt;The caveat here is, if the finally clause executes a &lt;code&gt;return&lt;/code&gt; or &lt;code&gt;break&lt;/code&gt; statement, the temporarily saved exception is discarded.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ For what?&lt;/h3&gt; &#xA;&lt;!-- Example ID: 64a9dccf-5083-4bc9-98aa-8aeecde4f210 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;some_string = &#34;wtf&#34;&#xA;some_dict = {}&#xA;for i, some_dict[i] in enumerate(some_string):&#xA;    i = 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_dict # An indexed dict appears.&#xA;{0: &#39;w&#39;, 1: &#39;t&#39;, 2: &#39;f&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;A &lt;code&gt;for&lt;/code&gt; statement is defined in the &lt;a href=&#34;https://docs.python.org/3/reference/grammar.html&#34;&gt;Python grammar&lt;/a&gt; as:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;for_stmt: &#39;for&#39; exprlist &#39;in&#39; testlist &#39;:&#39; suite [&#39;else&#39; &#39;:&#39; suite]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Where &lt;code&gt;exprlist&lt;/code&gt; is the assignment target. This means that the equivalent of &lt;code&gt;{exprlist} = {next_value}&lt;/code&gt; is &lt;strong&gt;executed for each item&lt;/strong&gt; in the iterable. An interesting example that illustrates this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;for i in range(4):&#xA;    print(i)&#xA;    i = 10&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;0&#xA;1&#xA;2&#xA;3&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Did you expect the loop to run just once?&lt;/p&gt; &lt;p&gt;&lt;strong&gt;💡 Explanation:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The assignment statement &lt;code&gt;i = 10&lt;/code&gt; never affects the iterations of the loop because of the way for loops work in Python. Before the beginning of every iteration, the next item provided by the iterator (&lt;code&gt;range(4)&lt;/code&gt; in this case) is unpacked and assigned the target list variables (&lt;code&gt;i&lt;/code&gt; in this case).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;enumerate(some_string)&lt;/code&gt; function yields a new value &lt;code&gt;i&lt;/code&gt; (a counter going up) and a character from the &lt;code&gt;some_string&lt;/code&gt; in each iteration. It then sets the (just assigned) &lt;code&gt;i&lt;/code&gt; key of the dictionary &lt;code&gt;some_dict&lt;/code&gt; to that character. The unrolling of the loop can be simplified as:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; i, some_dict[i] = (0, &#39;w&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; i, some_dict[i] = (1, &#39;t&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; i, some_dict[i] = (2, &#39;f&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Evaluation time discrepancy&lt;/h3&gt; &#xA;&lt;!-- Example ID: 6aa11a4b-4cf1-467a-b43a-810731517e98 ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;array = [1, 8, 15]&#xA;# A typical generator expression&#xA;gen = (x for x in array if array.count(x) &amp;gt; 0)&#xA;array = [2, 8, 22]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(list(gen)) # Where did the other values go?&#xA;[8]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;array_1 = [1,2,3,4]&#xA;gen_1 = (x for x in array_1)&#xA;array_1 = [1,2,3,4,5]&#xA;&#xA;array_2 = [1,2,3,4]&#xA;gen_2 = (x for x in array_2)&#xA;array_2[:] = [1,2,3,4,5]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(list(gen_1))&#xA;[1, 2, 3, 4]&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; print(list(gen_2))&#xA;[1, 2, 3, 4, 5]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;array_3 = [1, 2, 3]&#xA;array_4 = [10, 20, 30]&#xA;gen = (i + j for i in array_3 for j in array_4)&#xA;&#xA;array_3 = [4, 5, 6]&#xA;array_4 = [400, 500, 600]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(list(gen))&#xA;[401, 501, 601, 402, 502, 602, 403, 503, 603]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;In a &lt;a href=&#34;https://wiki.python.org/moin/Generators&#34;&gt;generator&lt;/a&gt; expression, the &lt;code&gt;in&lt;/code&gt; clause is evaluated at declaration time, but the conditional clause is evaluated at runtime.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;So before runtime, &lt;code&gt;array&lt;/code&gt; is re-assigned to the list &lt;code&gt;[2, 8, 22]&lt;/code&gt;, and since out of &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;8&lt;/code&gt; and &lt;code&gt;15&lt;/code&gt;, only the count of &lt;code&gt;8&lt;/code&gt; is greater than &lt;code&gt;0&lt;/code&gt;, the generator only yields &lt;code&gt;8&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The differences in the output of &lt;code&gt;g1&lt;/code&gt; and &lt;code&gt;g2&lt;/code&gt; in the second part is due the way variables &lt;code&gt;array_1&lt;/code&gt; and &lt;code&gt;array_2&lt;/code&gt; are re-assigned values.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the first case, &lt;code&gt;array_1&lt;/code&gt; is bound to the new object &lt;code&gt;[1,2,3,4,5]&lt;/code&gt; and since the &lt;code&gt;in&lt;/code&gt; clause is evaluated at the declaration time it still refers to the old object &lt;code&gt;[1,2,3,4]&lt;/code&gt; (which is not destroyed).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the second case, the slice assignment to &lt;code&gt;array_2&lt;/code&gt; updates the same old object &lt;code&gt;[1,2,3,4]&lt;/code&gt; to &lt;code&gt;[1,2,3,4,5]&lt;/code&gt;. Hence both the &lt;code&gt;g2&lt;/code&gt; and &lt;code&gt;array_2&lt;/code&gt; still have reference to the same object (which has now been updated to &lt;code&gt;[1,2,3,4,5]&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Okay, going by the logic discussed so far, shouldn&#39;t be the value of &lt;code&gt;list(gen)&lt;/code&gt; in the third snippet be &lt;code&gt;[11, 21, 31, 12, 22, 32, 13, 23, 33]&lt;/code&gt;? (because &lt;code&gt;array_3&lt;/code&gt; and &lt;code&gt;array_4&lt;/code&gt; are going to behave just like &lt;code&gt;array_1&lt;/code&gt;). The reason why (only) &lt;code&gt;array_4&lt;/code&gt; values got updated is explained in &lt;a href=&#34;https://www.python.org/dev/peps/pep-0289/#the-details&#34;&gt;PEP-289&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Only the outermost for-expression is evaluated immediately, the other expressions are deferred until the generator is run.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ &lt;code&gt;is not ...&lt;/code&gt; is not &lt;code&gt;is (not ...)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;!-- Example ID: b26fb1ed-0c7d-4b9c-8c6d-94a58a055c0d ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;something&#39; is not None&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; &#39;something&#39; is (not None)&#xA;False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;is not&lt;/code&gt; is a single binary operator, and has behavior different than using &lt;code&gt;is&lt;/code&gt; and &lt;code&gt;not&lt;/code&gt; separated.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;is not&lt;/code&gt; evaluates to &lt;code&gt;False&lt;/code&gt; if the variables on either side of the operator point to the same object and &lt;code&gt;True&lt;/code&gt; otherwise.&lt;/li&gt; &#xA; &lt;li&gt;In the example, &lt;code&gt;(not None)&lt;/code&gt; evaluates to &lt;code&gt;True&lt;/code&gt; since the value &lt;code&gt;None&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt; in a boolean context, so the expression becomes &lt;code&gt;&#39;something&#39; is True&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ A tic-tac-toe where X wins in the first attempt!&lt;/h3&gt; &#xA;&lt;!-- Example ID: 69329249-bdcb-424f-bd09-cca2e6705a7a ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# Let&#39;s initialize a row&#xA;row = [&#34;&#34;] * 3 #row i[&#39;&#39;, &#39;&#39;, &#39;&#39;]&#xA;# Let&#39;s make a board&#xA;board = [row] * 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; board&#xA;[[&#39;&#39;, &#39;&#39;, &#39;&#39;], [&#39;&#39;, &#39;&#39;, &#39;&#39;], [&#39;&#39;, &#39;&#39;, &#39;&#39;]]&#xA;&amp;gt;&amp;gt;&amp;gt; board[0]&#xA;[&#39;&#39;, &#39;&#39;, &#39;&#39;]&#xA;&amp;gt;&amp;gt;&amp;gt; board[0][0]&#xA;&#39;&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; board[0][0] = &#34;X&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; board&#xA;[[&#39;X&#39;, &#39;&#39;, &#39;&#39;], [&#39;X&#39;, &#39;&#39;, &#39;&#39;], [&#39;X&#39;, &#39;&#39;, &#39;&#39;]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We didn&#39;t assign three &lt;code&gt;&#34;X&#34;&lt;/code&gt;s, did we?&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;p&gt;When we initialize &lt;code&gt;row&lt;/code&gt; variable, this visualization explains what happens in the memory&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/images/tic-tac-toe/after_row_initialized.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;And when the &lt;code&gt;board&lt;/code&gt; is initialized by multiplying the &lt;code&gt;row&lt;/code&gt;, this is what happens inside the memory (each of the elements &lt;code&gt;board[0]&lt;/code&gt;, &lt;code&gt;board[1]&lt;/code&gt; and &lt;code&gt;board[2]&lt;/code&gt; is a reference to the same list referred by &lt;code&gt;row&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/images/tic-tac-toe/after_board_initialized.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We can avoid this scenario here by not using &lt;code&gt;row&lt;/code&gt; variable to generate &lt;code&gt;board&lt;/code&gt;. (Asked in &lt;a href=&#34;https://github.com/satwikkansal/wtfpython/issues/68&#34;&gt;this&lt;/a&gt; issue).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; board = [[&#39;&#39;]*3 for _ in range(3)]&#xA;&amp;gt;&amp;gt;&amp;gt; board[0][0] = &#34;X&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; board&#xA;[[&#39;X&#39;, &#39;&#39;, &#39;&#39;], [&#39;&#39;, &#39;&#39;, &#39;&#39;], [&#39;&#39;, &#39;&#39;, &#39;&#39;]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Schrödinger&#39;s variable *&lt;/h3&gt; &#xA;&lt;!-- Example ID: 4dc42f77-94cb-4eb5-a120-8203d3ed7604 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;funcs = []&#xA;results = []&#xA;for x in range(7):&#xA;    def some_func():&#xA;        return x&#xA;    funcs.append(some_func)&#xA;    results.append(some_func())  # note the function call here&#xA;&#xA;funcs_results = [func() for func in funcs]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python version):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; results&#xA;[0, 1, 2, 3, 4, 5, 6]&#xA;&amp;gt;&amp;gt;&amp;gt; funcs_results&#xA;[6, 6, 6, 6, 6, 6, 6]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The values of &lt;code&gt;x&lt;/code&gt; were different in every iteration prior to appending &lt;code&gt;some_func&lt;/code&gt; to &lt;code&gt;funcs&lt;/code&gt;, but all the functions return 6 when they&#39;re evaluated after the loop completes.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; powers_of_x = [lambda x: x**i for i in range(10)]&#xA;&amp;gt;&amp;gt;&amp;gt; [f(2) for f in powers_of_x]&#xA;[512, 512, 512, 512, 512, 512, 512, 512, 512, 512]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When defining a function inside a loop that uses the loop variable in its body, the loop function&#39;s closure is bound to the &lt;em&gt;variable&lt;/em&gt;, not its &lt;em&gt;value&lt;/em&gt;. The function looks up &lt;code&gt;x&lt;/code&gt; in the surrounding context, rather than using the value of &lt;code&gt;x&lt;/code&gt; at the time the function is created. So all of the functions use the latest value assigned to the variable for computation. We can see that it&#39;s using the &lt;code&gt;x&lt;/code&gt; from the surrounding context (i.e. &lt;em&gt;not&lt;/em&gt; a local variable) with:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import inspect&#xA;&amp;gt;&amp;gt;&amp;gt; inspect.getclosurevars(funcs[0])&#xA;ClosureVars(nonlocals={}, globals={&#39;x&#39;: 6}, builtins={}, unbound=set())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since &lt;code&gt;x&lt;/code&gt; is a global value, we can change the value that the &lt;code&gt;funcs&lt;/code&gt; will lookup and return by updating &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; x = 42&#xA;&amp;gt;&amp;gt;&amp;gt; [func() for func in funcs]&#xA;[42, 42, 42, 42, 42, 42, 42]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To get the desired behavior you can pass in the loop variable as a named variable to the function. &lt;strong&gt;Why does this work?&lt;/strong&gt; Because this will define the variable &lt;em&gt;inside&lt;/em&gt; the function&#39;s scope. It will no longer go to the surrounding (global) scope to look up the variables value but will create a local variable that stores the value of &lt;code&gt;x&lt;/code&gt; at that point in time.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;funcs = []&#xA;for x in range(7):&#xA;    def some_func(x=x):&#xA;        return x&#xA;    funcs.append(some_func)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; funcs_results = [func() for func in funcs]&#xA;&amp;gt;&amp;gt;&amp;gt; funcs_results&#xA;[0, 1, 2, 3, 4, 5, 6]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is not longer using the &lt;code&gt;x&lt;/code&gt; in the global scope:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; inspect.getclosurevars(funcs[0])&#xA;ClosureVars(nonlocals={}, globals={}, builtins={}, unbound=set())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ The chicken-egg problem *&lt;/h3&gt; &#xA;&lt;!-- Example ID: 60730dc2-0d79-4416-8568-2a63323b3ce8 ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; isinstance(3, int)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; isinstance(type, object)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; isinstance(object, type)&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So which is the &#34;ultimate&#34; base class? There&#39;s more to the confusion by the way,&lt;/p&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; class A: pass&#xA;&amp;gt;&amp;gt;&amp;gt; isinstance(A, A)&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; isinstance(type, type)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; isinstance(object, object)&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; issubclass(int, object)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; issubclass(type, object)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; issubclass(object, type)&#xA;False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;type&lt;/code&gt; is a &lt;a href=&#34;https://realpython.com/python-metaclasses/&#34;&gt;metaclass&lt;/a&gt; in Python.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Everything&lt;/strong&gt; is an &lt;code&gt;object&lt;/code&gt; in Python, which includes classes as well as their objects (instances).&lt;/li&gt; &#xA; &lt;li&gt;class &lt;code&gt;type&lt;/code&gt; is the metaclass of class &lt;code&gt;object&lt;/code&gt;, and every class (including &lt;code&gt;type&lt;/code&gt;) has inherited directly or indirectly from &lt;code&gt;object&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;There is no real base class among &lt;code&gt;object&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt;. The confusion in the above snippets is arising because we&#39;re thinking about these relationships (&lt;code&gt;issubclass&lt;/code&gt; and &lt;code&gt;isinstance&lt;/code&gt;) in terms of Python classes. The relationship between &lt;code&gt;object&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; can&#39;t be reproduced in pure python. To be more precise the following relationships can&#39;t be reproduced in pure Python, &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;class A is an instance of class B, and class B is an instance of class A.&lt;/li&gt; &#xA;   &lt;li&gt;class A is an instance of itself.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;These relationships between &lt;code&gt;object&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; (both being instances of each other as well as themselves) exist in Python because of &#34;cheating&#34; at the implementation level.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Subclass relationships&lt;/h3&gt; &#xA;&lt;!-- Example ID: 9f6d8cf0-e1b5-42d0-84a0-4cfab25a0bc0 ---&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from collections import Hashable&#xA;&amp;gt;&amp;gt;&amp;gt; issubclass(list, object)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; issubclass(object, Hashable)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; issubclass(list, Hashable)&#xA;False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Subclass relationships were expected to be transitive, right? (i.e., if &lt;code&gt;A&lt;/code&gt; is a subclass of &lt;code&gt;B&lt;/code&gt;, and &lt;code&gt;B&lt;/code&gt; is a subclass of &lt;code&gt;C&lt;/code&gt;, the &lt;code&gt;A&lt;/code&gt; &lt;em&gt;should&lt;/em&gt; a subclass of &lt;code&gt;C&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Subclass relationships are not necessarily transitive in Python. Anyone is allowed to define their own, arbitrary &lt;code&gt;__subclasscheck__&lt;/code&gt; in a metaclass.&lt;/li&gt; &#xA; &lt;li&gt;When &lt;code&gt;issubclass(cls, Hashable)&lt;/code&gt; is called, it simply looks for non-Falsey &#34;&lt;code&gt;__hash__&lt;/code&gt;&#34; method in &lt;code&gt;cls&lt;/code&gt; or anything it inherits from.&lt;/li&gt; &#xA; &lt;li&gt;Since &lt;code&gt;object&lt;/code&gt; is hashable, but &lt;code&gt;list&lt;/code&gt; is non-hashable, it breaks the transitivity relation.&lt;/li&gt; &#xA; &lt;li&gt;More detailed explanation can be found &lt;a href=&#34;https://www.naftaliharris.com/blog/python-subclass-intransitivity/&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Methods equality and identity&lt;/h3&gt; &#xA;&lt;!-- Example ID: 94802911-48fe-4242-defa-728ae893fa32 ---&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class SomeClass:&#xA;    def method(self):&#xA;        pass&#xA;&#xA;    @classmethod&#xA;    def classm(cls):&#xA;        pass&#xA;&#xA;    @staticmethod&#xA;    def staticm():&#xA;        pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(SomeClass.method is SomeClass.method)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; print(SomeClass.classm is SomeClass.classm)&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; print(SomeClass.classm == SomeClass.classm)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; print(SomeClass.staticm is SomeClass.staticm)&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Accessing &lt;code&gt;classm&lt;/code&gt; twice, we get an equal object, but not the &lt;em&gt;same&lt;/em&gt; one? Let&#39;s see what happens with instances of &lt;code&gt;SomeClass&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;o1 = SomeClass()&#xA;o2 = SomeClass()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(o1.method == o2.method)&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; print(o1.method == o1.method)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; print(o1.method is o1.method)&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; print(o1.classm is o1.classm)&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; print(o1.classm == o1.classm == o2.classm == SomeClass.classm)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; print(o1.staticm is o1.staticm is o2.staticm is SomeClass.staticm)&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Accessing&lt;code&gt; classm&lt;/code&gt; or &lt;code&gt;method&lt;/code&gt; twice, creates equal but not &lt;em&gt;same&lt;/em&gt; objects for the same instance of &lt;code&gt;SomeClass&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Functions are &lt;a href=&#34;https://docs.python.org/3/howto/descriptor.html&#34;&gt;descriptors&lt;/a&gt;. Whenever a function is accessed as an attribute, the descriptor is invoked, creating a method object which &#34;binds&#34; the function with the object owning the attribute. If called, the method calls the function, implicitly passing the bound object as the first argument (this is how we get &lt;code&gt;self&lt;/code&gt; as the first argument, despite not passing it explicitly).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; o1.method&#xA;&amp;lt;bound method SomeClass.method of &amp;lt;__main__.SomeClass object at ...&amp;gt;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Accessing the attribute multiple times creates a method object every time! Therefore &lt;code&gt;o1.method is o1.method&lt;/code&gt; is never truthy. Accessing functions as class attributes (as opposed to instance) does not create methods, however; so &lt;code&gt;SomeClass.method is SomeClass.method&lt;/code&gt; is truthy.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; SomeClass.method&#xA;&amp;lt;function SomeClass.method at ...&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;classmethod&lt;/code&gt; transforms functions into class methods. Class methods are descriptors that, when accessed, create a method object which binds the &lt;em&gt;class&lt;/em&gt; (type) of the object, instead of the object itself.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; o1.classm&#xA;&amp;lt;bound method SomeClass.classm of &amp;lt;class &#39;__main__.SomeClass&#39;&amp;gt;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unlike functions, &lt;code&gt;classmethod&lt;/code&gt;s will create a method also when accessed as class attributes (in which case they bind the class, not to the type of it). So &lt;code&gt;SomeClass.classm is SomeClass.classm&lt;/code&gt; is falsy.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; SomeClass.classm&#xA;&amp;lt;bound method SomeClass.classm of &amp;lt;class &#39;__main__.SomeClass&#39;&amp;gt;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A method object compares equal when both the functions are equal, and the bound objects are the same. So &lt;code&gt;o1.method == o1.method&lt;/code&gt; is truthy, although not the same object in memory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;staticmethod&lt;/code&gt; transforms functions into a &#34;no-op&#34; descriptor, which returns the function as-is. No method objects are ever created, so comparison with &lt;code&gt;is&lt;/code&gt; is truthy.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; o1.staticm&#xA;&amp;lt;function SomeClass.staticm at ...&amp;gt;&#xA;&amp;gt;&amp;gt;&amp;gt; SomeClass.staticm&#xA;&amp;lt;function SomeClass.staticm at ...&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Having to create new &#34;method&#34; objects every time Python calls instance methods and having to modify the arguments every time in order to insert &lt;code&gt;self&lt;/code&gt; affected performance badly. CPython 3.7 &lt;a href=&#34;https://bugs.python.org/issue26110&#34;&gt;solved it&lt;/a&gt; by introducing new opcodes that deal with calling methods without creating the temporary method objects. This is used only when the accessed function is actually called, so the snippets here are not affected, and still generate methods :)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;▶ All-true-ation *&lt;/h3&gt; &#xA;&lt;!-- Example ID: dfe6d845-e452-48fe-a2da-0ed3869a8042 --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; all([True, True, True])&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; all([True, True, False])&#xA;False&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; all([])&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; all([[]])&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; all([[[]]])&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Why&#39;s this True-False alteration?&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The implementation of &lt;code&gt;all&lt;/code&gt; function is equivalent to&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def all(iterable):&#xA;    for element in iterable:&#xA;        if not element:&#xA;            return False&#xA;    return True&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;all([])&lt;/code&gt; returns &lt;code&gt;True&lt;/code&gt; since the iterable is empty.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;all([[]])&lt;/code&gt; returns &lt;code&gt;False&lt;/code&gt; because the passed array has one element, &lt;code&gt;[]&lt;/code&gt;, and in python, an empty list is falsy.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;all([[[]]])&lt;/code&gt; and higher recursive variants are always &lt;code&gt;True&lt;/code&gt;. This is because the passed array&#39;s single element (&lt;code&gt;[[...]]&lt;/code&gt;) is no longer empty, and lists with values are truthy.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ The surprising comma&lt;/h3&gt; &#xA;&lt;!-- Example ID: 31a819c8-ed73-4dcc-84eb-91bedbb51e58 ---&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (&amp;lt; 3.6):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def f(x, y,):&#xA;...     print(x, y)&#xA;...&#xA;&amp;gt;&amp;gt;&amp;gt; def g(x=4, y=5,):&#xA;...     print(x, y)&#xA;...&#xA;&amp;gt;&amp;gt;&amp;gt; def h(x, **kwargs,):&#xA;  File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1&#xA;    def h(x, **kwargs,):&#xA;                     ^&#xA;SyntaxError: invalid syntax&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; def h(*args,):&#xA;  File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1&#xA;    def h(*args,):&#xA;                ^&#xA;SyntaxError: invalid syntax&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Trailing comma is not always legal in formal parameters list of a Python function.&lt;/li&gt; &#xA; &lt;li&gt;In Python, the argument list is defined partially with leading commas and partially with trailing commas. This conflict causes situations where a comma is trapped in the middle, and no rule accepts it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; The trailing comma problem is &lt;a href=&#34;https://bugs.python.org/issue9232&#34;&gt;fixed in Python 3.6&lt;/a&gt;. The remarks in &lt;a href=&#34;https://bugs.python.org/issue9232#msg248399&#34;&gt;this&lt;/a&gt; post discuss in brief different usages of trailing commas in Python.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Strings and the backslashes&lt;/h3&gt; &#xA;&lt;!-- Example ID: 6ae622c3-6d99-4041-9b33-507bd1a4407b ---&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(&#34;\&#34;&#34;)&#xA;&#34;&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; print(r&#34;\&#34;&#34;)&#xA;\&#34;&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; print(r&#34;\&#34;)&#xA;File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1&#xA;    print(r&#34;\&#34;)&#xA;              ^&#xA;SyntaxError: EOL while scanning string literal&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; r&#39;\&#39;&#39; == &#34;\\&#39;&#34;&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In a usual python string, the backslash is used to escape characters that may have a special meaning (like single-quote, double-quote, and the backslash itself). &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#34;wt\&#34;f&#34;&#xA;&#39;wt&#34;f&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;In a raw string literal (as indicated by the prefix &lt;code&gt;r&lt;/code&gt;), the backslashes pass themselves as is along with the behavior of escaping the following character. &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; r&#39;wt\&#34;f&#39; == &#39;wt\\&#34;f&#39;&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; print(repr(r&#39;wt\&#34;f&#39;)&#xA;&#39;wt\\&#34;f&#39;&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; print(&#34;\n&#34;)&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; print(r&#34;\\n&#34;)&#xA;&#39;\\n&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;This means when a parser encounters a backslash in a raw string, it expects another character following it. And in our case (&lt;code&gt;print(r&#34;\&#34;)&lt;/code&gt;), the backslash escaped the trailing quote, leaving the parser without a terminating quote (hence the &lt;code&gt;SyntaxError&lt;/code&gt;). That&#39;s why backslashes don&#39;t work at the end of a raw string.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ not knot!&lt;/h3&gt; &#xA;&lt;!-- Example ID: 7034deb1-7443-417d-94ee-29a800524de8 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;x = True&#xA;y = False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; not x == y&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; x == not y&#xA;  File &#34;&amp;lt;input&amp;gt;&#34;, line 1&#xA;    x == not y&#xA;           ^&#xA;SyntaxError: invalid syntax&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Operator precedence affects how an expression is evaluated, and &lt;code&gt;==&lt;/code&gt; operator has higher precedence than &lt;code&gt;not&lt;/code&gt; operator in Python.&lt;/li&gt; &#xA; &lt;li&gt;So &lt;code&gt;not x == y&lt;/code&gt; is equivalent to &lt;code&gt;not (x == y)&lt;/code&gt; which is equivalent to &lt;code&gt;not (True == False)&lt;/code&gt; finally evaluating to &lt;code&gt;True&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;But &lt;code&gt;x == not y&lt;/code&gt; raises a &lt;code&gt;SyntaxError&lt;/code&gt; because it can be thought of being equivalent to &lt;code&gt;(x == not) y&lt;/code&gt; and not &lt;code&gt;x == (not y)&lt;/code&gt; which you might have expected at first sight.&lt;/li&gt; &#xA; &lt;li&gt;The parser expected the &lt;code&gt;not&lt;/code&gt; token to be a part of the &lt;code&gt;not in&lt;/code&gt; operator (because both &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;not in&lt;/code&gt; operators have the same precedence), but after not being able to find an &lt;code&gt;in&lt;/code&gt; token following the &lt;code&gt;not&lt;/code&gt; token, it raises a &lt;code&gt;SyntaxError&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Half triple-quoted strings&lt;/h3&gt; &#xA;&lt;!-- Example ID: c55da3e2-1034-43b9-abeb-a7a970a2ad9e ---&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(&#39;wtfpython&#39;&#39;&#39;)&#xA;wtfpython&#xA;&amp;gt;&amp;gt;&amp;gt; print(&#34;wtfpython&#34;&#34;&#34;)&#xA;wtfpython&#xA;&amp;gt;&amp;gt;&amp;gt; # The following statements raise `SyntaxError`&#xA;&amp;gt;&amp;gt;&amp;gt; # print(&#39;&#39;&#39;wtfpython&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; # print(&#34;&#34;&#34;wtfpython&#34;)&#xA;  File &#34;&amp;lt;input&amp;gt;&#34;, line 3&#xA;    print(&#34;&#34;&#34;wtfpython&#34;)&#xA;                        ^&#xA;SyntaxError: EOF while scanning triple-quoted string literal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python supports implicit &lt;a href=&#34;https://docs.python.org/3/reference/lexical_analysis.html#string-literal-concatenation&#34;&gt;string literal concatenation&lt;/a&gt;, Example, &lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print(&#34;wtf&#34; &#34;python&#34;)&#xA;wtfpython&#xA;&amp;gt;&amp;gt;&amp;gt; print(&#34;wtf&#34; &#34;&#34;) # or &#34;wtf&#34;&#34;&#34;&#xA;wtf&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&#39;&#39;&#39;&lt;/code&gt; and &lt;code&gt;&#34;&#34;&#34;&lt;/code&gt; are also string delimiters in Python which causes a SyntaxError because the Python interpreter was expecting a terminating triple quote as delimiter while scanning the currently encountered triple quoted string literal.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ What&#39;s wrong with booleans?&lt;/h3&gt; &#xA;&lt;!-- Example ID: 0bba5fa7-9e6d-4cd2-8b94-952d061af5dd ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# A simple example to count the number of booleans and&#xA;# integers in an iterable of mixed data types.&#xA;mixed_list = [False, 1.0, &#34;some_string&#34;, 3, True, [], False]&#xA;integers_found_so_far = 0&#xA;booleans_found_so_far = 0&#xA;&#xA;for item in mixed_list:&#xA;    if isinstance(item, int):&#xA;        integers_found_so_far += 1&#xA;    elif isinstance(item, bool):&#xA;        booleans_found_so_far += 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; integers_found_so_far&#xA;4&#xA;&amp;gt;&amp;gt;&amp;gt; booleans_found_so_far&#xA;0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_bool = True&#xA;&amp;gt;&amp;gt;&amp;gt; &#34;wtf&#34; * some_bool&#xA;&#39;wtf&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; some_bool = False&#xA;&amp;gt;&amp;gt;&amp;gt; &#34;wtf&#34; * some_bool&#xA;&#39;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def tell_truth():&#xA;    True = False&#xA;    if True == False:&#xA;        print(&#34;I have lost faith in truth!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (&amp;lt; 3.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; tell_truth()&#xA;I have lost faith in truth!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;bool&lt;/code&gt; is a subclass of &lt;code&gt;int&lt;/code&gt; in Python&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; issubclass(bool, int)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; issubclass(int, bool)&#xA;False&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;And thus, &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt; are instances of &lt;code&gt;int&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; isinstance(True, int)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; isinstance(False, int)&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The integer value of &lt;code&gt;True&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt; and that of &lt;code&gt;False&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; int(True)&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; int(False)&#xA;0&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;See this StackOverflow &lt;a href=&#34;https://stackoverflow.com/a/8169049/4354153&#34;&gt;answer&lt;/a&gt; for the rationale behind it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Initially, Python used to have no &lt;code&gt;bool&lt;/code&gt; type (people used 0 for false and non-zero value like 1 for true). &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt;, and a &lt;code&gt;bool&lt;/code&gt; type was added in 2.x versions, but, for backward compatibility, &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt; couldn&#39;t be made constants. They just were built-in variables, and it was possible to reassign them&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Python 3 was backward-incompatible, the issue was finally fixed, and thus the last snippet won&#39;t work with Python 3.x!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Class attributes and instance attributes&lt;/h3&gt; &#xA;&lt;!-- Example ID: 6f332208-33bd-482d-8106-42863b739ed9 ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class A:&#xA;    x = 1&#xA;&#xA;class B(A):&#xA;    pass&#xA;&#xA;class C(A):&#xA;    pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; A.x, B.x, C.x&#xA;(1, 1, 1)&#xA;&amp;gt;&amp;gt;&amp;gt; B.x = 2&#xA;&amp;gt;&amp;gt;&amp;gt; A.x, B.x, C.x&#xA;(1, 2, 1)&#xA;&amp;gt;&amp;gt;&amp;gt; A.x = 3&#xA;&amp;gt;&amp;gt;&amp;gt; A.x, B.x, C.x # C.x changed, but B.x didn&#39;t&#xA;(3, 2, 3)&#xA;&amp;gt;&amp;gt;&amp;gt; a = A()&#xA;&amp;gt;&amp;gt;&amp;gt; a.x, A.x&#xA;(3, 3)&#xA;&amp;gt;&amp;gt;&amp;gt; a.x += 1&#xA;&amp;gt;&amp;gt;&amp;gt; a.x, A.x&#xA;(4, 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class SomeClass:&#xA;    some_var = 15&#xA;    some_list = [5]&#xA;    another_list = [5]&#xA;    def __init__(self, x):&#xA;        self.some_var = x + 1&#xA;        self.some_list = self.some_list + [x]&#xA;        self.another_list += [x]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_obj = SomeClass(420)&#xA;&amp;gt;&amp;gt;&amp;gt; some_obj.some_list&#xA;[5, 420]&#xA;&amp;gt;&amp;gt;&amp;gt; some_obj.another_list&#xA;[5, 420]&#xA;&amp;gt;&amp;gt;&amp;gt; another_obj = SomeClass(111)&#xA;&amp;gt;&amp;gt;&amp;gt; another_obj.some_list&#xA;[5, 111]&#xA;&amp;gt;&amp;gt;&amp;gt; another_obj.another_list&#xA;[5, 420, 111]&#xA;&amp;gt;&amp;gt;&amp;gt; another_obj.another_list is SomeClass.another_list&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; another_obj.another_list is some_obj.another_list&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Class variables and variables in class instances are internally handled as dictionaries of a class object. If a variable name is not found in the dictionary of the current class, the parent classes are searched for it.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;+=&lt;/code&gt; operator modifies the mutable object in-place without creating a new object. So changing the attribute of one instance affects the other instances and the class attribute as well.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ yielding None&lt;/h3&gt; &#xA;&lt;!-- Example ID: 5a40c241-2c30-40d0-8ba9-cf7e097b3b53 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;some_iterable = (&#39;a&#39;, &#39;b&#39;)&#xA;&#xA;def some_func(val):&#xA;    return &#34;something&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (&amp;lt;= 3.7.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; [x for x in some_iterable]&#xA;[&#39;a&#39;, &#39;b&#39;]&#xA;&amp;gt;&amp;gt;&amp;gt; [(yield x) for x in some_iterable]&#xA;&amp;lt;generator object &amp;lt;listcomp&amp;gt; at 0x7f70b0a4ad58&amp;gt;&#xA;&amp;gt;&amp;gt;&amp;gt; list([(yield x) for x in some_iterable])&#xA;[&#39;a&#39;, &#39;b&#39;]&#xA;&amp;gt;&amp;gt;&amp;gt; list((yield x) for x in some_iterable)&#xA;[&#39;a&#39;, None, &#39;b&#39;, None]&#xA;&amp;gt;&amp;gt;&amp;gt; list(some_func((yield x)) for x in some_iterable)&#xA;[&#39;a&#39;, &#39;something&#39;, &#39;b&#39;, &#39;something&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This is a bug in CPython&#39;s handling of &lt;code&gt;yield&lt;/code&gt; in generators and comprehensions.&lt;/li&gt; &#xA; &lt;li&gt;Source and explanation can be found here: &lt;a href=&#34;https://stackoverflow.com/questions/32139885/yield-in-list-comprehensions-and-generator-expressions&#34;&gt;https://stackoverflow.com/questions/32139885/yield-in-list-comprehensions-and-generator-expressions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Related bug report: &lt;a href=&#34;https://bugs.python.org/issue10544&#34;&gt;https://bugs.python.org/issue10544&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Python 3.8+ no longer allows &lt;code&gt;yield&lt;/code&gt; inside list comprehension and will throw a &lt;code&gt;SyntaxError&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Yielding from... return! *&lt;/h3&gt; &#xA;&lt;!-- Example ID: 5626d8ef-8802-49c2-adbc-7cda5c550816 ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def some_func(x):&#xA;    if x == 3:&#xA;        return [&#34;wtf&#34;]&#xA;    else:&#xA;        yield from range(x)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (&amp;gt; 3.3):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; list(some_func(3))&#xA;[]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where did the &lt;code&gt;&#34;wtf&#34;&lt;/code&gt; go? Is it due to some special effect of &lt;code&gt;yield from&lt;/code&gt;? Let&#39;s validate that,&lt;/p&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def some_func(x):&#xA;    if x == 3:&#xA;        return [&#34;wtf&#34;]&#xA;    else:&#xA;        for i in range(x):&#xA;          yield i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; list(some_func(3))&#xA;[]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The same result, this didn&#39;t work either.&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;From Python 3.3 onwards, it became possible to use &lt;code&gt;return&lt;/code&gt; statement with values inside generators (See &lt;a href=&#34;https://www.python.org/dev/peps/pep-0380/&#34;&gt;PEP380&lt;/a&gt;). The &lt;a href=&#34;https://www.python.org/dev/peps/pep-0380/#enhancements-to-stopiteration&#34;&gt;official docs&lt;/a&gt; say that,&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&#34;... &lt;code&gt;return expr&lt;/code&gt; in a generator causes &lt;code&gt;StopIteration(expr)&lt;/code&gt; to be raised upon exit from the generator.&#34;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;In the case of &lt;code&gt;some_func(3)&lt;/code&gt;, &lt;code&gt;StopIteration&lt;/code&gt; is raised at the beginning because of &lt;code&gt;return&lt;/code&gt; statement. The &lt;code&gt;StopIteration&lt;/code&gt; exception is automatically caught inside the &lt;code&gt;list(...)&lt;/code&gt; wrapper and the &lt;code&gt;for&lt;/code&gt; loop. Therefore, the above two snippets result in an empty list.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To get &lt;code&gt;[&#34;wtf&#34;]&lt;/code&gt; from the generator &lt;code&gt;some_func&lt;/code&gt; we need to catch the &lt;code&gt;StopIteration&lt;/code&gt; exception,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;try:&#xA;    next(some_func(3))&#xA;except StopIteration as e:&#xA;    some_string = e.value&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_string&#xA;[&#34;wtf&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Nan-reflexivity *&lt;/h3&gt; &#xA;&lt;!-- Example ID: 59bee91a-36e0-47a4-8c7d-aa89bf1d3976 ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;a = float(&#39;inf&#39;)&#xA;b = float(&#39;nan&#39;)&#xA;c = float(&#39;-iNf&#39;)  # These strings are case-insensitive&#xA;d = float(&#39;nan&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a&#xA;inf&#xA;&amp;gt;&amp;gt;&amp;gt; b&#xA;nan&#xA;&amp;gt;&amp;gt;&amp;gt; c&#xA;-inf&#xA;&amp;gt;&amp;gt;&amp;gt; float(&#39;some_other_string&#39;)&#xA;ValueError: could not convert string to float: some_other_string&#xA;&amp;gt;&amp;gt;&amp;gt; a == -c # inf==inf&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; None == None # None == None&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; b == d # but nan!=nan&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; 50 / a&#xA;0.0&#xA;&amp;gt;&amp;gt;&amp;gt; a / a&#xA;nan&#xA;&amp;gt;&amp;gt;&amp;gt; 23 + b&#xA;nan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; x = float(&#39;nan&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; y = x / x&#xA;&amp;gt;&amp;gt;&amp;gt; y is y # identity holds&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; y == y # equality fails of y&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; [y] == [y] # but the equality succeeds for the list containing y&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&#39;inf&#39;&lt;/code&gt; and &lt;code&gt;&#39;nan&#39;&lt;/code&gt; are special strings (case-insensitive), which, when explicitly typecast-ed to &lt;code&gt;float&lt;/code&gt; type, are used to represent mathematical &#34;infinity&#34; and &#34;not a number&#34; respectively.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Since according to IEEE standards &lt;code&gt; NaN != NaN&lt;/code&gt;, obeying this rule breaks the reflexivity assumption of a collection element in Python i.e. if &lt;code&gt;x&lt;/code&gt; is a part of a collection like &lt;code&gt;list&lt;/code&gt;, the implementations like comparison are based on the assumption that &lt;code&gt;x == x&lt;/code&gt;. Because of this assumption, the identity is compared first (since it&#39;s faster) while comparing two elements, and the values are compared only when the identities mismatch. The following snippet will make things clearer,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; x = float(&#39;nan&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; x == x, [x] == [x]&#xA;(False, True)&#xA;&amp;gt;&amp;gt;&amp;gt; y = float(&#39;nan&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; y == y, [y] == [y]&#xA;(False, True)&#xA;&amp;gt;&amp;gt;&amp;gt; x == y, [x] == [y]&#xA;(False, False)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Since the identities of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are different, the values are considered, which are also different; hence the comparison returns &lt;code&gt;False&lt;/code&gt; this time.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Interesting read: &lt;a href=&#34;https://bertrandmeyer.com/2010/02/06/reflexivity-and-other-pillars-of-civilization/&#34;&gt;Reflexivity, and other pillars of civilization&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Mutating the immutable!&lt;/h3&gt; &#xA;&lt;!-- Example ID: 15a9e782-1695-43ea-817a-a9208f6bb33d ---&gt; &#xA;&lt;p&gt;This might seem trivial if you know how references work in Python.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;some_tuple = (&#34;A&#34;, &#34;tuple&#34;, &#34;with&#34;, &#34;values&#34;)&#xA;another_tuple = ([1, 2], [3, 4], [5, 6])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_tuple[2] = &#34;change this&#34;&#xA;TypeError: &#39;tuple&#39; object does not support item assignment&#xA;&amp;gt;&amp;gt;&amp;gt; another_tuple[2].append(1000) #This throws no error&#xA;&amp;gt;&amp;gt;&amp;gt; another_tuple&#xA;([1, 2], [3, 4], [5, 6, 1000])&#xA;&amp;gt;&amp;gt;&amp;gt; another_tuple[2] += [99, 999]&#xA;TypeError: &#39;tuple&#39; object does not support item assignment&#xA;&amp;gt;&amp;gt;&amp;gt; another_tuple&#xA;([1, 2], [3, 4], [5, 6, 1000, 99, 999])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But I thought tuples were immutable...&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Quoting from &lt;a href=&#34;https://docs.python.org/3/reference/datamodel.html&#34;&gt;https://docs.python.org/3/reference/datamodel.html&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Immutable sequences An object of an immutable sequence type cannot change once it is created. (If the object contains references to other objects, these other objects may be mutable and may be modified; however, the collection of objects directly referenced by an immutable object cannot change.)&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;+=&lt;/code&gt; operator changes the list in-place. The item assignment doesn&#39;t work, but when the exception occurs, the item has already been changed in place.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There&#39;s also an explanation in &lt;a href=&#34;https://docs.python.org/3/faq/programming.html#why-does-a-tuple-i-item-raise-an-exception-when-the-addition-works&#34;&gt;official Python FAQ&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ The disappearing variable from outer scope&lt;/h3&gt; &#xA;&lt;!-- Example ID: 7f1e71b6-cb3e-44fb-aa47-87ef1b7decc8 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;e = 7&#xA;try:&#xA;    raise Exception()&#xA;except Exception as e:&#xA;    pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 2.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(e)&#xA;# prints nothing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 3.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(e)&#xA;NameError: name &#39;e&#39; is not defined&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Source: &lt;a href=&#34;https://docs.python.org/3/reference/compound_stmts.html#except&#34;&gt;https://docs.python.org/3/reference/compound_stmts.html#except&lt;/a&gt;&lt;/p&gt; &lt;p&gt;When an exception has been assigned using &lt;code&gt;as&lt;/code&gt; target, it is cleared at the end of the &lt;code&gt;except&lt;/code&gt; clause. This is as if&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;except E as N:&#xA;    foo&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;was translated into&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;except E as N:&#xA;    try:&#xA;        foo&#xA;    finally:&#xA;        del N&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This means the exception must be assigned to a different name to be able to refer to it after the except clause. Exceptions are cleared because, with the traceback attached to them, they form a reference cycle with the stack frame, keeping all locals in that frame alive until the next garbage collection occurs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The clauses are not scoped in Python. Everything in the example is present in the same scope, and the variable &lt;code&gt;e&lt;/code&gt; got removed due to the execution of the &lt;code&gt;except&lt;/code&gt; clause. The same is not the case with functions that have their separate inner-scopes. The example below illustrates this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def f(x):&#xA;    del(x)&#xA;    print(x)&#xA;&#xA;x = 5&#xA;y = [5, 4, 3]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; f(x)&#xA;UnboundLocalError: local variable &#39;x&#39; referenced before assignment&#xA;&amp;gt;&amp;gt;&amp;gt; f(y)&#xA;UnboundLocalError: local variable &#39;x&#39; referenced before assignment&#xA;&amp;gt;&amp;gt;&amp;gt; x&#xA;5&#xA;&amp;gt;&amp;gt;&amp;gt; y&#xA;[5, 4, 3]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In Python 2.x, the variable name &lt;code&gt;e&lt;/code&gt; gets assigned to &lt;code&gt;Exception()&lt;/code&gt; instance, so when you try to print, it prints nothing.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Output (Python 2.x):&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; e&#xA;Exception()&#xA;&amp;gt;&amp;gt;&amp;gt; print e&#xA;# Nothing is printed!&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ The mysterious key type conversion&lt;/h3&gt; &#xA;&lt;!-- Example ID: 00f42dd0-b9ef-408d-9e39-1bc209ce3f36 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class SomeClass(str):&#xA;    pass&#xA;&#xA;some_dict = {&#39;s&#39;: 42}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; type(list(some_dict.keys())[0])&#xA;str&#xA;&amp;gt;&amp;gt;&amp;gt; s = SomeClass(&#39;s&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict[s] = 40&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict # expected: Two different keys-value pairs&#xA;{&#39;s&#39;: 40}&#xA;&amp;gt;&amp;gt;&amp;gt; type(list(some_dict.keys())[0])&#xA;str&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Both the object &lt;code&gt;s&lt;/code&gt; and the string &lt;code&gt;&#34;s&#34;&lt;/code&gt; hash to the same value because &lt;code&gt;SomeClass&lt;/code&gt; inherits the &lt;code&gt;__hash__&lt;/code&gt; method of &lt;code&gt;str&lt;/code&gt; class.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;SomeClass(&#34;s&#34;) == &#34;s&#34;&lt;/code&gt; evaluates to &lt;code&gt;True&lt;/code&gt; because &lt;code&gt;SomeClass&lt;/code&gt; also inherits &lt;code&gt;__eq__&lt;/code&gt; method from &lt;code&gt;str&lt;/code&gt; class.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Since both the objects hash to the same value and are equal, they are represented by the same key in the dictionary.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For the desired behavior, we can redefine the &lt;code&gt;__eq__&lt;/code&gt; method in &lt;code&gt;SomeClass&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class SomeClass(str):&#xA;  def __eq__(self, other):&#xA;      return (&#xA;          type(self) is SomeClass&#xA;          and type(other) is SomeClass&#xA;          and super().__eq__(other)&#xA;      )&#xA;&#xA;  # When we define a custom __eq__, Python stops automatically inheriting the&#xA;  # __hash__ method, so we need to define it as well&#xA;  __hash__ = str.__hash__&#xA;&#xA;some_dict = {&#39;s&#39;:42}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; s = SomeClass(&#39;s&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict[s] = 40&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict&#xA;{&#39;s&#39;: 40, &#39;s&#39;: 42}&#xA;&amp;gt;&amp;gt;&amp;gt; keys = list(some_dict.keys())&#xA;&amp;gt;&amp;gt;&amp;gt; type(keys[0]), type(keys[1])&#xA;(__main__.SomeClass, str)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Let&#39;s see if you can guess this?&lt;/h3&gt; &#xA;&lt;!-- Example ID: 81aa9fbe-bd63-4283-b56d-6fdd14c9105e ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;a, b = a[b] = {}, 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a&#xA;{5: ({...}, 5)}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;According to &lt;a href=&#34;https://docs.python.org/3/reference/simple_stmts.html#assignment-statements&#34;&gt;Python language reference&lt;/a&gt;, assignment statements have the form &lt;pre&gt;&lt;code&gt;(target_list &#34;=&#34;)+ (expression_list | yield_expression)&#xA;&lt;/code&gt;&lt;/pre&gt; and&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;An assignment statement evaluates the expression list (remember that this can be a single expression or a comma-separated list, the latter yielding a tuple) and assigns the single resulting object to each of the target lists, from left to right.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;+&lt;/code&gt; in &lt;code&gt;(target_list &#34;=&#34;)+&lt;/code&gt; means there can be &lt;strong&gt;one or more&lt;/strong&gt; target lists. In this case, target lists are &lt;code&gt;a, b&lt;/code&gt; and &lt;code&gt;a[b]&lt;/code&gt; (note the expression list is exactly one, which in our case is &lt;code&gt;{}, 5&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;After the expression list is evaluated, its value is unpacked to the target lists from &lt;strong&gt;left to right&lt;/strong&gt;. So, in our case, first the &lt;code&gt;{}, 5&lt;/code&gt; tuple is unpacked to &lt;code&gt;a, b&lt;/code&gt; and we now have &lt;code&gt;a = {}&lt;/code&gt; and &lt;code&gt;b = 5&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;a&lt;/code&gt; is now assigned to &lt;code&gt;{}&lt;/code&gt;, which is a mutable object.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The second target list is &lt;code&gt;a[b]&lt;/code&gt; (you may expect this to throw an error because both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; have not been defined in the statements before. But remember, we just assigned &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;{}&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; to &lt;code&gt;5&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now, we are setting the key &lt;code&gt;5&lt;/code&gt; in the dictionary to the tuple &lt;code&gt;({}, 5)&lt;/code&gt; creating a circular reference (the &lt;code&gt;{...}&lt;/code&gt; in the output refers to the same object that &lt;code&gt;a&lt;/code&gt; is already referencing). Another simpler example of circular reference could be&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_list = some_list[0] = [0]&#xA;&amp;gt;&amp;gt;&amp;gt; some_list&#xA;[[...]]&#xA;&amp;gt;&amp;gt;&amp;gt; some_list[0]&#xA;[[...]]&#xA;&amp;gt;&amp;gt;&amp;gt; some_list is some_list[0]&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; some_list[0][0][0][0][0][0] == some_list&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Similar is the case in our example (&lt;code&gt;a[b][0]&lt;/code&gt; is the same object as &lt;code&gt;a&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;So to sum it up, you can break the example down to&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;a, b = {}, 5&#xA;a[b] = a, b&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And the circular reference can be justified by the fact that &lt;code&gt;a[b][0]&lt;/code&gt; is the same object as &lt;code&gt;a&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a[b][0] is a&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Section: Slippery Slopes&lt;/h2&gt; &#xA;&lt;h3&gt;▶ Modifying a dictionary while iterating over it&lt;/h3&gt; &#xA;&lt;!-- Example ID: b4e5cdfb-c3a8-4112-bd38-e2356d801c41 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;x = {0: None}&#xA;&#xA;for i in x:&#xA;    del x[i]&#xA;    x[i+1] = None&#xA;    print(i)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 2.7- Python 3.5):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0&#xA;1&#xA;2&#xA;3&#xA;4&#xA;5&#xA;6&#xA;7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Yes, it runs for exactly &lt;strong&gt;eight&lt;/strong&gt; times and stops.&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Iteration over a dictionary that you edit at the same time is not supported.&lt;/li&gt; &#xA; &lt;li&gt;It runs eight times because that&#39;s the point at which the dictionary resizes to hold more keys (we have eight deletion entries, so a resize is needed). This is actually an implementation detail.&lt;/li&gt; &#xA; &lt;li&gt;How deleted keys are handled and when the resize occurs might be different for different Python implementations.&lt;/li&gt; &#xA; &lt;li&gt;So for Python versions other than Python 2.7 - Python 3.5, the count might be different from 8 (but whatever the count is, it&#39;s going to be the same every time you run it). You can find some discussion around this &lt;a href=&#34;https://github.com/satwikkansal/wtfpython/issues/53&#34;&gt;here&lt;/a&gt; or in &lt;a href=&#34;https://stackoverflow.com/questions/44763802/bug-in-python-dict&#34;&gt;this&lt;/a&gt; StackOverflow thread.&lt;/li&gt; &#xA; &lt;li&gt;Python 3.7.6 onwards, you&#39;ll see &lt;code&gt;RuntimeError: dictionary keys changed during iteration&lt;/code&gt; exception if you try to do this.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Stubborn &lt;code&gt;del&lt;/code&gt; operation&lt;/h3&gt; &#xA;&lt;!-- Example ID: 777ed4fd-3a2d-466f-95e7-c4058e61d78e ---&gt; &#xA;&lt;!-- read-only --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class SomeClass:&#xA;    def __del__(self):&#xA;        print(&#34;Deleted!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; 1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; x = SomeClass()&#xA;&amp;gt;&amp;gt;&amp;gt; y = x&#xA;&amp;gt;&amp;gt;&amp;gt; del x # this should print &#34;Deleted!&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; del y&#xA;Deleted!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Phew, deleted at last. You might have guessed what saved &lt;code&gt;__del__&lt;/code&gt; from being called in our first attempt to delete &lt;code&gt;x&lt;/code&gt;. Let&#39;s add more twists to the example.&lt;/p&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; x = SomeClass()&#xA;&amp;gt;&amp;gt;&amp;gt; y = x&#xA;&amp;gt;&amp;gt;&amp;gt; del x&#xA;&amp;gt;&amp;gt;&amp;gt; y # check if y exists&#xA;&amp;lt;__main__.SomeClass instance at 0x7f98a1a67fc8&amp;gt;&#xA;&amp;gt;&amp;gt;&amp;gt; del y # Like previously, this should print &#34;Deleted!&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; globals() # oh, it didn&#39;t. Let&#39;s check all our global variables and confirm&#xA;Deleted!&#xA;{&#39;__builtins__&#39;: &amp;lt;module &#39;__builtin__&#39; (built-in)&amp;gt;, &#39;SomeClass&#39;: &amp;lt;class __main__.SomeClass at 0x7f98a1a5f668&amp;gt;, &#39;__package__&#39;: None, &#39;__name__&#39;: &#39;__main__&#39;, &#39;__doc__&#39;: None}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Okay, now it&#39;s deleted &lt;span&gt;😕&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;del x&lt;/code&gt; doesn’t directly call &lt;code&gt;x.__del__()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;When &lt;code&gt;del x&lt;/code&gt; is encountered, Python deletes the name &lt;code&gt;x&lt;/code&gt; from current scope and decrements by 1 the reference count of the object &lt;code&gt;x&lt;/code&gt; referenced. &lt;code&gt;__del__()&lt;/code&gt; is called only when the object&#39;s reference count reaches zero.&lt;/li&gt; &#xA; &lt;li&gt;In the second output snippet, &lt;code&gt;__del__()&lt;/code&gt; was not called because the previous statement (&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; y&lt;/code&gt;) in the interactive interpreter created another reference to the same object (specifically, the &lt;code&gt;_&lt;/code&gt; magic variable which references the result value of the last non &lt;code&gt;None&lt;/code&gt; expression on the REPL), thus preventing the reference count from reaching zero when &lt;code&gt;del y&lt;/code&gt; was encountered.&lt;/li&gt; &#xA; &lt;li&gt;Calling &lt;code&gt;globals&lt;/code&gt; (or really, executing anything that will have a non &lt;code&gt;None&lt;/code&gt; result) caused &lt;code&gt;_&lt;/code&gt; to reference the new result, dropping the existing reference. Now the reference count reached 0 and we can see &#34;Deleted!&#34; being printed (finally!).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ The out of scope variable&lt;/h3&gt; &#xA;&lt;!-- Example ID: 75c03015-7be9-4289-9e22-4f5fdda056f7 ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;a = 1&#xA;def some_func():&#xA;    return a&#xA;&#xA;def another_func():&#xA;    a += 1&#xA;    return a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def some_closure_func():&#xA;    a = 1&#xA;    def some_inner_func():&#xA;        return a&#xA;    return some_inner_func()&#xA;&#xA;def another_closure_func():&#xA;    a = 1&#xA;    def another_inner_func():&#xA;        a += 1&#xA;        return a&#xA;    return another_inner_func()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_func()&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; another_func()&#xA;UnboundLocalError: local variable &#39;a&#39; referenced before assignment&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; some_closure_func()&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; another_closure_func()&#xA;UnboundLocalError: local variable &#39;a&#39; referenced before assignment&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;When you make an assignment to a variable in scope, it becomes local to that scope. So &lt;code&gt;a&lt;/code&gt; becomes local to the scope of &lt;code&gt;another_func&lt;/code&gt;, but it has not been initialized previously in the same scope, which throws an error.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To modify the outer scope variable &lt;code&gt;a&lt;/code&gt; in &lt;code&gt;another_func&lt;/code&gt;, we have to use the &lt;code&gt;global&lt;/code&gt; keyword.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def another_func()&#xA;    global a&#xA;    a += 1&#xA;    return a&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; another_func()&#xA;2&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In &lt;code&gt;another_closure_func&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt; becomes local to the scope of &lt;code&gt;another_inner_func&lt;/code&gt;, but it has not been initialized previously in the same scope, which is why it throws an error.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To modify the outer scope variable &lt;code&gt;a&lt;/code&gt; in &lt;code&gt;another_inner_func&lt;/code&gt;, use the &lt;code&gt;nonlocal&lt;/code&gt; keyword. The nonlocal statement is used to refer to variables defined in the nearest outer (excluding the global) scope.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def another_func():&#xA;    a = 1&#xA;    def another_inner_func():&#xA;        nonlocal a&#xA;        a += 1&#xA;        return a&#xA;    return another_inner_func()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; another_func()&#xA;2&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The keywords &lt;code&gt;global&lt;/code&gt; and &lt;code&gt;nonlocal&lt;/code&gt; tell the python interpreter to not declare new variables and look them up in the corresponding outer scopes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Read &lt;a href=&#34;https://sebastianraschka.com/Articles/2014_python_scope_and_namespaces.html&#34;&gt;this&lt;/a&gt; short but an awesome guide to learn more about how namespaces and scope resolution works in Python.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Deleting a list item while iterating&lt;/h3&gt; &#xA;&lt;!-- Example ID: 4cc52d4e-d42b-4e09-b25f-fbf5699b7d4e ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;list_1 = [1, 2, 3, 4]&#xA;list_2 = [1, 2, 3, 4]&#xA;list_3 = [1, 2, 3, 4]&#xA;list_4 = [1, 2, 3, 4]&#xA;&#xA;for idx, item in enumerate(list_1):&#xA;    del item&#xA;&#xA;for idx, item in enumerate(list_2):&#xA;    list_2.remove(item)&#xA;&#xA;for idx, item in enumerate(list_3[:]):&#xA;    list_3.remove(item)&#xA;&#xA;for idx, item in enumerate(list_4):&#xA;    list_4.pop(idx)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; list_1&#xA;[1, 2, 3, 4]&#xA;&amp;gt;&amp;gt;&amp;gt; list_2&#xA;[2, 4]&#xA;&amp;gt;&amp;gt;&amp;gt; list_3&#xA;[]&#xA;&amp;gt;&amp;gt;&amp;gt; list_4&#xA;[2, 4]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Can you guess why the output is &lt;code&gt;[2, 4]&lt;/code&gt;?&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;It&#39;s never a good idea to change the object you&#39;re iterating over. The correct way to do so is to iterate over a copy of the object instead, and &lt;code&gt;list_3[:]&lt;/code&gt; does just that.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_list = [1, 2, 3, 4]&#xA;&amp;gt;&amp;gt;&amp;gt; id(some_list)&#xA;139798789457608&#xA;&amp;gt;&amp;gt;&amp;gt; id(some_list[:]) # Notice that python creates new object for sliced list.&#xA;139798779601192&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Difference between &lt;code&gt;del&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, and &lt;code&gt;pop&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;del var_name&lt;/code&gt; just removes the binding of the &lt;code&gt;var_name&lt;/code&gt; from the local or global namespace (That&#39;s why the &lt;code&gt;list_1&lt;/code&gt; is unaffected).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;remove&lt;/code&gt; removes the first matching value, not a specific index, raises &lt;code&gt;ValueError&lt;/code&gt; if the value is not found.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pop&lt;/code&gt; removes the element at a specific index and returns it, raises &lt;code&gt;IndexError&lt;/code&gt; if an invalid index is specified.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Why the output is &lt;code&gt;[2, 4]&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The list iteration is done index by index, and when we remove &lt;code&gt;1&lt;/code&gt; from &lt;code&gt;list_2&lt;/code&gt; or &lt;code&gt;list_4&lt;/code&gt;, the contents of the lists are now &lt;code&gt;[2, 3, 4]&lt;/code&gt;. The remaining elements are shifted down, i.e., &lt;code&gt;2&lt;/code&gt; is at index 0, and &lt;code&gt;3&lt;/code&gt; is at index 1. Since the next iteration is going to look at index 1 (which is the &lt;code&gt;3&lt;/code&gt;), the &lt;code&gt;2&lt;/code&gt; gets skipped entirely. A similar thing will happen with every alternate element in the list sequence.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Refer to this StackOverflow &lt;a href=&#34;https://stackoverflow.com/questions/45946228/what-happens-when-you-try-to-delete-a-list-element-while-iterating-over-it&#34;&gt;thread&lt;/a&gt; explaining the example&lt;/li&gt; &#xA; &lt;li&gt;See also this nice StackOverflow &lt;a href=&#34;https://stackoverflow.com/questions/45877614/how-to-change-all-the-dictionary-keys-in-a-for-loop-with-d-items&#34;&gt;thread&lt;/a&gt; for a similar example related to dictionaries in Python.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Lossy zip of iterators *&lt;/h3&gt; &#xA;&lt;!-- Example ID: c28ed154-e59f-4070-8eb6-8967a4acac6d ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; numbers = list(range(7))&#xA;&amp;gt;&amp;gt;&amp;gt; numbers&#xA;[0, 1, 2, 3, 4, 5, 6]&#xA;&amp;gt;&amp;gt;&amp;gt; first_three, remaining = numbers[:3], numbers[3:]&#xA;&amp;gt;&amp;gt;&amp;gt; first_three, remaining&#xA;([0, 1, 2], [3, 4, 5, 6])&#xA;&amp;gt;&amp;gt;&amp;gt; numbers_iter = iter(numbers)&#xA;&amp;gt;&amp;gt;&amp;gt; list(zip(numbers_iter, first_three)) &#xA;[(0, 0), (1, 1), (2, 2)]&#xA;# so far so good, let&#39;s zip the remaining&#xA;&amp;gt;&amp;gt;&amp;gt; list(zip(numbers_iter, remaining))&#xA;[(4, 3), (5, 4), (6, 5)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where did element &lt;code&gt;3&lt;/code&gt; go from the &lt;code&gt;numbers&lt;/code&gt; list?&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;From Python &lt;a href=&#34;https://docs.python.org/3.3/library/functions.html#zip&#34;&gt;docs&lt;/a&gt;, here&#39;s an approximate implementation of zip function, &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def zip(*iterables):&#xA;    sentinel = object()&#xA;    iterators = [iter(it) for it in iterables]&#xA;    while iterators:&#xA;        result = []&#xA;        for it in iterators:&#xA;            elem = next(it, sentinel)&#xA;            if elem is sentinel: return&#xA;            result.append(elem)&#xA;        yield tuple(result)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;So the function takes in arbitrary number of iterable objects, adds each of their items to the &lt;code&gt;result&lt;/code&gt; list by calling the &lt;code&gt;next&lt;/code&gt; function on them, and stops whenever any of the iterable is exhausted.&lt;/li&gt; &#xA; &lt;li&gt;The caveat here is when any iterable is exhausted, the existing elements in the &lt;code&gt;result&lt;/code&gt; list are discarded. That&#39;s what happened with &lt;code&gt;3&lt;/code&gt; in the &lt;code&gt;numbers_iter&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The correct way to do the above using &lt;code&gt;zip&lt;/code&gt; would be, &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; numbers = list(range(7))&#xA;&amp;gt;&amp;gt;&amp;gt; numbers_iter = iter(numbers)&#xA;&amp;gt;&amp;gt;&amp;gt; list(zip(first_three, numbers_iter))&#xA;[(0, 0), (1, 1), (2, 2)]&#xA;&amp;gt;&amp;gt;&amp;gt; list(zip(remaining, numbers_iter))&#xA;[(3, 3), (4, 4), (5, 5), (6, 6)]&#xA;&lt;/code&gt;&lt;/pre&gt; The first argument of zip should be the one with fewest elements.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Loop variables leaking out!&lt;/h3&gt; &#xA;&lt;!-- Example ID: ccec7bf6-7679-4963-907a-1cd8587be9ea ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;for x in range(7):&#xA;    if x == 6:&#xA;        print(x, &#39;: for x inside loop&#39;)&#xA;print(x, &#39;: x in global&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;6 : for x inside loop&#xA;6 : x in global&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But &lt;code&gt;x&lt;/code&gt; was never defined outside the scope of for loop...&lt;/p&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# This time let&#39;s initialize x first&#xA;x = -1&#xA;for x in range(7):&#xA;    if x == 6:&#xA;        print(x, &#39;: for x inside loop&#39;)&#xA;print(x, &#39;: x in global&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;6 : for x inside loop&#xA;6 : x in global&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 2.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; x = 1&#xA;&amp;gt;&amp;gt;&amp;gt; print([x for x in range(5)])&#xA;[0, 1, 2, 3, 4]&#xA;&amp;gt;&amp;gt;&amp;gt; print(x)&#xA;4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 3.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; x = 1&#xA;&amp;gt;&amp;gt;&amp;gt; print([x for x in range(5)])&#xA;[0, 1, 2, 3, 4]&#xA;&amp;gt;&amp;gt;&amp;gt; print(x)&#xA;1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;In Python, for-loops use the scope they exist in and leave their defined loop-variable behind. This also applies if we explicitly defined the for-loop variable in the global namespace before. In this case, it will rebind the existing variable.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The differences in the output of Python 2.x and Python 3.x interpreters for list comprehension example can be explained by following change documented in &lt;a href=&#34;https://docs.python.org/3/whatsnew/3.0.html&#34;&gt;What’s New In Python 3.0&lt;/a&gt; changelog:&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&#34;List comprehensions no longer support the syntactic form &lt;code&gt;[... for var in item1, item2, ...]&lt;/code&gt;. Use &lt;code&gt;[... for var in (item1, item2, ...)]&lt;/code&gt; instead. Also, note that list comprehensions have different semantics: they are closer to syntactic sugar for a generator expression inside a &lt;code&gt;list()&lt;/code&gt; constructor, and in particular, the loop control variables are no longer leaked into the surrounding scope.&#34;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Beware of default mutable arguments!&lt;/h3&gt; &#xA;&lt;!-- Example ID: 7d42dade-e20d-4a7b-9ed7-16fb58505fe9 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def some_func(default_arg=[]):&#xA;    default_arg.append(&#34;some_string&#34;)&#xA;    return default_arg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_func()&#xA;[&#39;some_string&#39;]&#xA;&amp;gt;&amp;gt;&amp;gt; some_func()&#xA;[&#39;some_string&#39;, &#39;some_string&#39;]&#xA;&amp;gt;&amp;gt;&amp;gt; some_func([])&#xA;[&#39;some_string&#39;]&#xA;&amp;gt;&amp;gt;&amp;gt; some_func()&#xA;[&#39;some_string&#39;, &#39;some_string&#39;, &#39;some_string&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The default mutable arguments of functions in Python aren&#39;t really initialized every time you call the function. Instead, the recently assigned value to them is used as the default value. When we explicitly passed &lt;code&gt;[]&lt;/code&gt; to &lt;code&gt;some_func&lt;/code&gt; as the argument, the default value of the &lt;code&gt;default_arg&lt;/code&gt; variable was not used, so the function returned as expected.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def some_func(default_arg=[]):&#xA;    default_arg.append(&#34;some_string&#34;)&#xA;    return default_arg&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_func.__defaults__ #This will show the default argument values for the function&#xA;([],)&#xA;&amp;gt;&amp;gt;&amp;gt; some_func()&#xA;&amp;gt;&amp;gt;&amp;gt; some_func.__defaults__&#xA;([&#39;some_string&#39;],)&#xA;&amp;gt;&amp;gt;&amp;gt; some_func()&#xA;&amp;gt;&amp;gt;&amp;gt; some_func.__defaults__&#xA;([&#39;some_string&#39;, &#39;some_string&#39;],)&#xA;&amp;gt;&amp;gt;&amp;gt; some_func([])&#xA;&amp;gt;&amp;gt;&amp;gt; some_func.__defaults__&#xA;([&#39;some_string&#39;, &#39;some_string&#39;],)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A common practice to avoid bugs due to mutable arguments is to assign &lt;code&gt;None&lt;/code&gt; as the default value and later check if any value is passed to the function corresponding to that argument. Example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def some_func(default_arg=None):&#xA;    if default_arg is None:&#xA;        default_arg = []&#xA;    default_arg.append(&#34;some_string&#34;)&#xA;    return default_arg&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Catching the Exceptions&lt;/h3&gt; &#xA;&lt;!-- Example ID: b5ca5e6a-47b9-4f69-9375-cda0f8c6755d ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;some_list = [1, 2, 3]&#xA;try:&#xA;    # This should raise an ``IndexError``&#xA;    print(some_list[4])&#xA;except IndexError, ValueError:&#xA;    print(&#34;Caught!&#34;)&#xA;&#xA;try:&#xA;    # This should raise a ``ValueError``&#xA;    some_list.remove(4)&#xA;except IndexError, ValueError:&#xA;    print(&#34;Caught again!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 2.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;Caught!&#xA;&#xA;ValueError: list.remove(x): x not in list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 3.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;  File &#34;&amp;lt;input&amp;gt;&#34;, line 3&#xA;    except IndexError, ValueError:&#xA;                     ^&#xA;SyntaxError: invalid syntax&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To add multiple Exceptions to the except clause, you need to pass them as parenthesized tuple as the first argument. The second argument is an optional name, which when supplied will bind the Exception instance that has been raised. Example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;some_list = [1, 2, 3]&#xA;try:&#xA;   # This should raise a ``ValueError``&#xA;   some_list.remove(4)&#xA;except (IndexError, ValueError), e:&#xA;   print(&#34;Caught again!&#34;)&#xA;   print(e)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Output (Python 2.x):&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Caught again!&#xA;list.remove(x): x not in list&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Output (Python 3.x):&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;  File &#34;&amp;lt;input&amp;gt;&#34;, line 4&#xA;    except (IndexError, ValueError), e:&#xA;                                     ^&#xA;IndentationError: unindent does not match any outer indentation level&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Separating the exception from the variable with a comma is deprecated and does not work in Python 3; the correct way is to use &lt;code&gt;as&lt;/code&gt;. Example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;some_list = [1, 2, 3]&#xA;try:&#xA;    some_list.remove(4)&#xA;&#xA;except (IndexError, ValueError) as e:&#xA;    print(&#34;Caught again!&#34;)&#xA;    print(e)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Caught again!&#xA;list.remove(x): x not in list&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Same operands, different story!&lt;/h3&gt; &#xA;&lt;!-- Example ID: ca052cdf-dd2d-4105-b936-65c28adc18a0 ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;a = [1, 2, 3, 4]&#xA;b = a&#xA;a = a + [5, 6, 7, 8]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a&#xA;[1, 2, 3, 4, 5, 6, 7, 8]&#xA;&amp;gt;&amp;gt;&amp;gt; b&#xA;[1, 2, 3, 4]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;a = [1, 2, 3, 4]&#xA;b = a&#xA;a += [5, 6, 7, 8]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a&#xA;[1, 2, 3, 4, 5, 6, 7, 8]&#xA;&amp;gt;&amp;gt;&amp;gt; b&#xA;[1, 2, 3, 4, 5, 6, 7, 8]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;a += b&lt;/code&gt; doesn&#39;t always behave the same way as &lt;code&gt;a = a + b&lt;/code&gt;. Classes &lt;em&gt;may&lt;/em&gt; implement the &lt;em&gt;&lt;code&gt;op=&lt;/code&gt;&lt;/em&gt; operators differently, and lists do this.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The expression &lt;code&gt;a = a + [5,6,7,8]&lt;/code&gt; generates a new list and sets &lt;code&gt;a&lt;/code&gt;&#39;s reference to that new list, leaving &lt;code&gt;b&lt;/code&gt; unchanged.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The expression &lt;code&gt;a += [5,6,7,8]&lt;/code&gt; is actually mapped to an &#34;extend&#34; function that operates on the list such that &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; still point to the same list that has been modified in-place.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Name resolution ignoring class scope&lt;/h3&gt; &#xA;&lt;!-- Example ID: 03f73d96-151c-4929-b0a8-f74430788324 ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;x = 5&#xA;class SomeClass:&#xA;    x = 17&#xA;    y = (x for i in range(10))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; list(SomeClass.y)[0]&#xA;5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;x = 5&#xA;class SomeClass:&#xA;    x = 17&#xA;    y = [x for i in range(10)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 2.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; SomeClass.y[0]&#xA;17&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 3.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; SomeClass.y[0]&#xA;5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Scopes nested inside class definition ignore names bound at the class level.&lt;/li&gt; &#xA; &lt;li&gt;A generator expression has its own scope.&lt;/li&gt; &#xA; &lt;li&gt;Starting from Python 3.X, list comprehensions also have their own scope.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Rounding like a banker *&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s implement a naive function to get the middle element of a list:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def get_middle(some_list):&#xA;    mid_index = round(len(some_list) / 2)&#xA;    return some_list[mid_index - 1]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Python 3.x:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; get_middle([1])  # looks good&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; get_middle([1,2,3])  # looks good&#xA;2&#xA;&amp;gt;&amp;gt;&amp;gt; get_middle([1,2,3,4,5])  # huh?&#xA;2&#xA;&amp;gt;&amp;gt;&amp;gt; len([1,2,3,4,5]) / 2  # good&#xA;2.5&#xA;&amp;gt;&amp;gt;&amp;gt; round(len([1,2,3,4,5]) / 2)  # why?&#xA;2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It seems as though Python rounded 2.5 to 2.&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This is not a float precision error, in fact, this behavior is intentional. Since Python 3.0, &lt;code&gt;round()&lt;/code&gt; uses &lt;a href=&#34;https://en.wikipedia.org/wiki/Rounding#Round_half_to_even&#34;&gt;banker&#39;s rounding&lt;/a&gt; where .5 fractions are rounded to the nearest &lt;strong&gt;even&lt;/strong&gt; number:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; round(0.5)&#xA;0&#xA;&amp;gt;&amp;gt;&amp;gt; round(1.5)&#xA;2&#xA;&amp;gt;&amp;gt;&amp;gt; round(2.5)&#xA;2&#xA;&amp;gt;&amp;gt;&amp;gt; import numpy  # numpy does the same&#xA;&amp;gt;&amp;gt;&amp;gt; numpy.round(0.5)&#xA;0.0&#xA;&amp;gt;&amp;gt;&amp;gt; numpy.round(1.5)&#xA;2.0&#xA;&amp;gt;&amp;gt;&amp;gt; numpy.round(2.5)&#xA;2.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This is the recommended way to round .5 fractions as described in &lt;a href=&#34;https://en.wikipedia.org/wiki/IEEE_754#Rounding_rules&#34;&gt;IEEE 754&lt;/a&gt;. However, the other way (round away from zero) is taught in school most of the time, so banker&#39;s rounding is likely not that well known. Furthermore, some of the most popular programming languages (for example: JavaScript, Java, C/C++, Ruby, Rust) do not use banker&#39;s rounding either. Therefore, this is still quite special to Python and may result in confusion when rounding fractions.&lt;/li&gt; &#xA; &lt;li&gt;See the &lt;a href=&#34;https://docs.python.org/3/library/functions.html#round&#34;&gt;round() docs&lt;/a&gt; or &lt;a href=&#34;https://stackoverflow.com/questions/10825926/python-3-x-rounding-behavior&#34;&gt;this stackoverflow thread&lt;/a&gt; for more information.&lt;/li&gt; &#xA; &lt;li&gt;Note that &lt;code&gt;get_middle([1])&lt;/code&gt; only returned 1 because the index was &lt;code&gt;round(0.5) - 1 = 0 - 1 = -1&lt;/code&gt;, returning the last element in the list.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Needles in a Haystack *&lt;/h3&gt; &#xA;&lt;!-- Example ID: 52a199b1-989a-4b28-8910-dff562cebba9 ---&gt; &#xA;&lt;p&gt;I haven&#39;t met even a single experience Pythonist till date who has not come across one or more of the following scenarios,&lt;/p&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;x, y = (0, 1) if True else None, None&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; x, y  # expected (0, 1)&#xA;((0, 1), None)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;t = (&#39;one&#39;, &#39;two&#39;)&#xA;for i in t:&#xA;    print(i)&#xA;&#xA;t = (&#39;one&#39;)&#xA;for i in t:&#xA;    print(i)&#xA;&#xA;t = ()&#xA;print(t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;one&#xA;two&#xA;o&#xA;n&#xA;e&#xA;tuple()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ten_words_list = [&#xA;    &#34;some&#34;,&#xA;    &#34;very&#34;,&#xA;    &#34;big&#34;,&#xA;    &#34;list&#34;,&#xA;    &#34;that&#34;&#xA;    &#34;consists&#34;,&#xA;    &#34;of&#34;,&#xA;    &#34;exactly&#34;,&#xA;    &#34;ten&#34;,&#xA;    &#34;words&#34;&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; len(ten_words_list)&#xA;9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;4. Not asserting strongly enough&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;a = &#34;python&#34;&#xA;b = &#34;javascript&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# An assert statement with an assertion failure message.&#xA;&amp;gt;&amp;gt;&amp;gt; assert(a == b, &#34;Both languages are different&#34;)&#xA;# No AssertionError is raised&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;5.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;some_list = [1, 2, 3]&#xA;some_dict = {&#xA;  &#34;key_1&#34;: 1,&#xA;  &#34;key_2&#34;: 2,&#xA;  &#34;key_3&#34;: 3&#xA;}&#xA;&#xA;some_list = some_list.append(4) &#xA;some_dict = some_dict.update({&#34;key_4&#34;: 4})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(some_list)&#xA;None&#xA;&amp;gt;&amp;gt;&amp;gt; print(some_dict)&#xA;None&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;6.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def some_recursive_func(a):&#xA;    if a[0] == 0:&#xA;        return&#xA;    a[0] -= 1&#xA;    some_recursive_func(a)&#xA;    return a&#xA;&#xA;def similar_recursive_func(a):&#xA;    if a == 0:&#xA;        return a&#xA;    a -= 1&#xA;    similar_recursive_func(a)&#xA;    return a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_recursive_func([5, 0])&#xA;[0, 0]&#xA;&amp;gt;&amp;gt;&amp;gt; similar_recursive_func(5)&#xA;4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For 1, the correct statement for expected behavior is &lt;code&gt;x, y = (0, 1) if True else (None, None)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For 2, the correct statement for expected behavior is &lt;code&gt;t = (&#39;one&#39;,)&lt;/code&gt; or &lt;code&gt;t = &#39;one&#39;,&lt;/code&gt; (missing comma) otherwise the interpreter considers &lt;code&gt;t&lt;/code&gt; to be a &lt;code&gt;str&lt;/code&gt; and iterates over it character by character.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;()&lt;/code&gt; is a special token and denotes empty &lt;code&gt;tuple&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In 3, as you might have already figured out, there&#39;s a missing comma after 5th element (&lt;code&gt;&#34;that&#34;&lt;/code&gt;) in the list. So by implicit string literal concatenation,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; ten_words_list&#xA;[&#39;some&#39;, &#39;very&#39;, &#39;big&#39;, &#39;list&#39;, &#39;thatconsists&#39;, &#39;of&#39;, &#39;exactly&#39;, &#39;ten&#39;, &#39;words&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;No &lt;code&gt;AssertionError&lt;/code&gt; was raised in 4th snippet because instead of asserting the individual expression &lt;code&gt;a == b&lt;/code&gt;, we&#39;re asserting entire tuple. The following snippet will clear things up,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = &#34;python&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; b = &#34;javascript&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; assert a == b&#xA;Traceback (most recent call last):&#xA;    File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1, in &amp;lt;module&amp;gt;&#xA;AssertionError&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; assert (a == b, &#34;Values are not equal&#34;)&#xA;&amp;lt;stdin&amp;gt;:1: SyntaxWarning: assertion is always true, perhaps remove parentheses?&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; assert a == b, &#34;Values are not equal&#34;&#xA;Traceback (most recent call last):&#xA;    File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1, in &amp;lt;module&amp;gt;&#xA;AssertionError: Values are not equal&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;As for the fifth snippet, most methods that modify the items of sequence/mapping objects like &lt;code&gt;list.append&lt;/code&gt;, &lt;code&gt;dict.update&lt;/code&gt;, &lt;code&gt;list.sort&lt;/code&gt;, etc. modify the objects in-place and return &lt;code&gt;None&lt;/code&gt;. The rationale behind this is to improve performance by avoiding making a copy of the object if the operation can be done in-place (Referred from &lt;a href=&#34;https://docs.python.org/3/faq/design.html#why-doesn-t-list-sort-return-the-sorted-list&#34;&gt;here&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Last one should be fairly obvious, mutable object (like &lt;code&gt;list&lt;/code&gt;) can be altered in the function, and the reassignment of an immutable (&lt;code&gt;a -= 1&lt;/code&gt;) is not an alteration of the value.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Being aware of these nitpicks can save you hours of debugging effort in the long run.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Splitsies *&lt;/h3&gt; &#xA;&lt;!-- Example ID: ec3168ba-a81a-4482-afb0-691f1cc8d65a ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;a&#39;.split()&#xA;[&#39;a&#39;]&#xA;&#xA;# is same as&#xA;&amp;gt;&amp;gt;&amp;gt; &#39;a&#39;.split(&#39; &#39;)&#xA;[&#39;a&#39;]&#xA;&#xA;# but&#xA;&amp;gt;&amp;gt;&amp;gt; len(&#39;&#39;.split())&#xA;0&#xA;&#xA;# isn&#39;t the same as&#xA;&amp;gt;&amp;gt;&amp;gt; len(&#39;&#39;.split(&#39; &#39;))&#xA;1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It might appear at first that the default separator for split is a single space &lt;code&gt;&#39; &#39;&lt;/code&gt;, but as per the &lt;a href=&#34;https://docs.python.org/3/library/stdtypes.html#str.split&#34;&gt;docs&lt;/a&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;If sep is not specified or is &lt;code&gt;None&lt;/code&gt;, a different splitting algorithm is applied: runs of consecutive whitespace are regarded as a single separator, and the result will contain no empty strings at the start or end if the string has leading or trailing whitespace. Consequently, splitting an empty string or a string consisting of just whitespace with a None separator returns &lt;code&gt;[]&lt;/code&gt;. If sep is given, consecutive delimiters are not grouped together and are deemed to delimit empty strings (for example, &lt;code&gt;&#39;1,,2&#39;.split(&#39;,&#39;)&lt;/code&gt; returns &lt;code&gt;[&#39;1&#39;, &#39;&#39;, &#39;2&#39;]&lt;/code&gt;). Splitting an empty string with a specified separator returns &lt;code&gt;[&#39;&#39;]&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;Noticing how the leading and trailing whitespaces are handled in the following snippet will make things clear, &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39; a &#39;.split(&#39; &#39;)&#xA;[&#39;&#39;, &#39;a&#39;, &#39;&#39;]&#xA;&amp;gt;&amp;gt;&amp;gt; &#39; a &#39;.split()&#xA;[&#39;a&#39;]&#xA;&amp;gt;&amp;gt;&amp;gt; &#39;&#39;.split(&#39; &#39;)&#xA;[&#39;&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Wild imports *&lt;/h3&gt; &#xA;&lt;!-- Example ID: 83deb561-bd55-4461-bb5e-77dd7f411e1c ---&gt; &#xA;&lt;!-- read-only --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# File: module.py&#xA;&#xA;def some_weird_name_func_():&#xA;    print(&#34;works!&#34;)&#xA;&#xA;def _another_weird_name_func():&#xA;    print(&#34;works!&#34;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from module import *&#xA;&amp;gt;&amp;gt;&amp;gt; some_weird_name_func_()&#xA;&#34;works!&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; _another_weird_name_func()&#xA;Traceback (most recent call last):&#xA;  File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1, in &amp;lt;module&amp;gt;&#xA;NameError: name &#39;_another_weird_name_func&#39; is not defined&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;It is often advisable to not use wildcard imports. The first obvious reason for this is, in wildcard imports, the names with a leading underscore don&#39;t get imported. This may lead to errors during runtime.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Had we used &lt;code&gt;from ... import a, b, c&lt;/code&gt; syntax, the above &lt;code&gt;NameError&lt;/code&gt; wouldn&#39;t have occurred.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from module import some_weird_name_func_, _another_weird_name_func&#xA;&amp;gt;&amp;gt;&amp;gt; _another_weird_name_func()&#xA;works!&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you really want to use wildcard imports, then you&#39;d have to define the list &lt;code&gt;__all__&lt;/code&gt; in your module that will contain a list of public objects that&#39;ll be available when we do wildcard imports.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;__all__ = [&#39;_another_weird_name_func&#39;]&#xA;&#xA;def some_weird_name_func_():&#xA;    print(&#34;works!&#34;)&#xA;&#xA;def _another_weird_name_func():&#xA;    print(&#34;works!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; _another_weird_name_func()&#xA;&#34;works!&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; some_weird_name_func_()&#xA;Traceback (most recent call last):&#xA;  File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1, in &amp;lt;module&amp;gt;&#xA;NameError: name &#39;some_weird_name_func_&#39; is not defined&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ All sorted? *&lt;/h3&gt; &#xA;&lt;!-- Example ID: e5ff1eaf-8823-4738-b4ce-b73f7c9d5511 --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; x = 7, 8, 9&#xA;&amp;gt;&amp;gt;&amp;gt; sorted(x) == x&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; sorted(x) == sorted(x)&#xA;True&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; y = reversed(x)&#xA;&amp;gt;&amp;gt;&amp;gt; sorted(y) == sorted(y)&#xA;False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;sorted&lt;/code&gt; method always returns a list, and comparing lists and tuples always returns &lt;code&gt;False&lt;/code&gt; in Python.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; [] == tuple()&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; x = 7, 8, 9&#xA;&amp;gt;&amp;gt;&amp;gt; type(x), type(sorted(x))&#xA;(tuple, list)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Unlike &lt;code&gt;sorted&lt;/code&gt;, the &lt;code&gt;reversed&lt;/code&gt; method returns an iterator. Why? Because sorting requires the iterator to be either modified in-place or use an extra container (a list), whereas reversing can simply work by iterating from the last index to the first.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;So during comparison &lt;code&gt;sorted(y) == sorted(y)&lt;/code&gt;, the first call to &lt;code&gt;sorted()&lt;/code&gt; will consume the iterator &lt;code&gt;y&lt;/code&gt;, and the next call will just return an empty list.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; x = 7, 8, 9&#xA;&amp;gt;&amp;gt;&amp;gt; y = reversed(x)&#xA;&amp;gt;&amp;gt;&amp;gt; sorted(y), sorted(y)&#xA;([7, 8, 9], [])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Midnight time doesn&#39;t exist?&lt;/h3&gt; &#xA;&lt;!-- Example ID: 1bce8294-5619-4d70-8ce3-fe0bade690d1 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from datetime import datetime&#xA;&#xA;midnight = datetime(2018, 1, 1, 0, 0)&#xA;midnight_time = midnight.time()&#xA;&#xA;noon = datetime(2018, 1, 1, 12, 0)&#xA;noon_time = noon.time()&#xA;&#xA;if midnight_time:&#xA;    print(&#34;Time at midnight is&#34;, midnight_time)&#xA;&#xA;if noon_time:&#xA;    print(&#34;Time at noon is&#34;, noon_time)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (&amp;lt; 3.5):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;(&#39;Time at noon is&#39;, datetime.time(12, 0))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The midnight time is not printed.&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;p&gt;Before Python 3.5, the boolean value for &lt;code&gt;datetime.time&lt;/code&gt; object was considered to be &lt;code&gt;False&lt;/code&gt; if it represented midnight in UTC. It is error-prone when using the &lt;code&gt;if obj:&lt;/code&gt; syntax to check if the &lt;code&gt;obj&lt;/code&gt; is null or some equivalent of &#34;empty.&#34;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Section: The Hidden treasures!&lt;/h2&gt; &#xA;&lt;p&gt;This section contains a few lesser-known and interesting things about Python that most beginners like me are unaware of (well, not anymore).&lt;/p&gt; &#xA;&lt;h3&gt;▶ Okay Python, Can you make me fly?&lt;/h3&gt; &#xA;&lt;!-- Example ID: a92f3645-1899-4d50-9721-0031be4aec3f ---&gt; &#xA;&lt;p&gt;Well, here you go&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import antigravity&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; Sshh... It&#39;s a super-secret.&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;antigravity&lt;/code&gt; module is one of the few easter eggs released by Python developers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;import antigravity&lt;/code&gt; opens up a web browser pointing to the &lt;a href=&#34;https://xkcd.com/353/&#34;&gt;classic XKCD comic&lt;/a&gt; about Python.&lt;/li&gt; &#xA; &lt;li&gt;Well, there&#39;s more to it. There&#39;s &lt;strong&gt;another easter egg inside the easter egg&lt;/strong&gt;. If you look at the &lt;a href=&#34;https://github.com/python/cpython/raw/master/Lib/antigravity.py#L7-L17&#34;&gt;code&lt;/a&gt;, there&#39;s a function defined that purports to implement the &lt;a href=&#34;https://xkcd.com/426/&#34;&gt;XKCD&#39;s geohashing algorithm&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ &lt;code&gt;goto&lt;/code&gt;, but why?&lt;/h3&gt; &#xA;&lt;!-- Example ID: 2aff961e-7fa5-4986-a18a-9e5894bd89fe ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from goto import goto, label&#xA;for i in range(9):&#xA;    for j in range(9):&#xA;        for k in range(9):&#xA;            print(&#34;I am trapped, please rescue!&#34;)&#xA;            if k == 2:&#xA;                goto .breakout # breaking out from a deeply nested loop&#xA;label .breakout&#xA;print(&#34;Freedom!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 2.3):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;I am trapped, please rescue!&#xA;I am trapped, please rescue!&#xA;Freedom!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A working version of &lt;code&gt;goto&lt;/code&gt; in Python was &lt;a href=&#34;https://mail.python.org/pipermail/python-announce-list/2004-April/002982.html&#34;&gt;announced&lt;/a&gt; as an April Fool&#39;s joke on 1st April 2004.&lt;/li&gt; &#xA; &lt;li&gt;Current versions of Python do not have this module.&lt;/li&gt; &#xA; &lt;li&gt;Although it works, but please don&#39;t use it. Here&#39;s the &lt;a href=&#34;https://docs.python.org/3/faq/design.html#why-is-there-no-goto&#34;&gt;reason&lt;/a&gt; to why &lt;code&gt;goto&lt;/code&gt; is not present in Python.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Brace yourself!&lt;/h3&gt; &#xA;&lt;!-- Example ID: 5c0c75f2-ddd9-4da3-ba49-c4be7ec39acf ---&gt; &#xA;&lt;p&gt;If you are one of the people who doesn&#39;t like using whitespace in Python to denote scopes, you can use the C-style {} by importing,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from __future__ import braces&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;  File &#34;some_file.py&#34;, line 1&#xA;    from __future__ import braces&#xA;SyntaxError: not a chance&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Braces? No way! If you think that&#39;s disappointing, use Java. Okay, another surprising thing, can you find where&#39;s the &lt;code&gt;SyntaxError&lt;/code&gt; raised in &lt;code&gt;__future__&lt;/code&gt; module &lt;a href=&#34;https://github.com/python/cpython/raw/master/Lib/__future__.py&#34;&gt;code&lt;/a&gt;?&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;__future__&lt;/code&gt; module is normally used to provide features from future versions of Python. The &#34;future&#34; in this specific context is however, ironic.&lt;/li&gt; &#xA; &lt;li&gt;This is an easter egg concerned with the community&#39;s feelings on this issue.&lt;/li&gt; &#xA; &lt;li&gt;The code is actually present &lt;a href=&#34;https://github.com/python/cpython/raw/025eb98dc0c1dc27404df6c544fc2944e0fa9f3a/Python/future.c#L49&#34;&gt;here&lt;/a&gt; in &lt;code&gt;future.c&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;When the CPython compiler encounters a &lt;a href=&#34;https://docs.python.org/3.3/reference/simple_stmts.html#future-statements&#34;&gt;future statement&lt;/a&gt;, it first runs the appropriate code in &lt;code&gt;future.c&lt;/code&gt; before treating it as a normal import statement.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Let&#39;s meet Friendly Language Uncle For Life&lt;/h3&gt; &#xA;&lt;!-- Example ID: 6427fae6-e959-462d-85da-ce4c94ce41be ---&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 3.x)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from __future__ import barry_as_FLUFL&#xA;&amp;gt;&amp;gt;&amp;gt; &#34;Ruby&#34; != &#34;Python&#34; # there&#39;s no doubt about it&#xA;  File &#34;some_file.py&#34;, line 1&#xA;    &#34;Ruby&#34; != &#34;Python&#34;&#xA;              ^&#xA;SyntaxError: invalid syntax&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; &#34;Ruby&#34; &amp;lt;&amp;gt; &#34;Python&#34;&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There we go.&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;This is relevant to &lt;a href=&#34;https://www.python.org/dev/peps/pep-0401/&#34;&gt;PEP-401&lt;/a&gt; released on April 1, 2009 (now you know, what it means).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Quoting from the PEP-401&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Recognized that the != inequality operator in Python 3.0 was a horrible, finger-pain inducing mistake, the FLUFL reinstates the &amp;lt;&amp;gt; diamond operator as the sole spelling.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There were more things that Uncle Barry had to share in the PEP; you can read them &lt;a href=&#34;https://www.python.org/dev/peps/pep-0401/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It works well in an interactive environment, but it will raise a &lt;code&gt;SyntaxError&lt;/code&gt; when you run via python file (see this &lt;a href=&#34;https://github.com/satwikkansal/wtfpython/issues/94&#34;&gt;issue&lt;/a&gt;). However, you can wrap the statement inside an &lt;code&gt;eval&lt;/code&gt; or &lt;code&gt;compile&lt;/code&gt; to get it working,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from __future__ import barry_as_FLUFL&#xA;print(eval(&#39;&#34;Ruby&#34; &amp;lt;&amp;gt; &#34;Python&#34;&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Even Python understands that love is complicated&lt;/h3&gt; &#xA;&lt;!-- Example ID: b93cad9e-d341-45d1-999c-fcdce65bed25 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import this&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Wait, what&#39;s &lt;strong&gt;this&lt;/strong&gt;? &lt;code&gt;this&lt;/code&gt; is love &lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;The Zen of Python, by Tim Peters&#xA;&#xA;Beautiful is better than ugly.&#xA;Explicit is better than implicit.&#xA;Simple is better than complex.&#xA;Complex is better than complicated.&#xA;Flat is better than nested.&#xA;Sparse is better than dense.&#xA;Readability counts.&#xA;Special cases aren&#39;t special enough to break the rules.&#xA;Although practicality beats purity.&#xA;Errors should never pass silently.&#xA;Unless explicitly silenced.&#xA;In the face of ambiguity, refuse the temptation to guess.&#xA;There should be one-- and preferably only one --obvious way to do it.&#xA;Although that way may not be obvious at first unless you&#39;re Dutch.&#xA;Now is better than never.&#xA;Although never is often better than *right* now.&#xA;If the implementation is hard to explain, it&#39;s a bad idea.&#xA;If the implementation is easy to explain, it may be a good idea.&#xA;Namespaces are one honking great idea -- let&#39;s do more of those!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s the Zen of Python!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; love = this&#xA;&amp;gt;&amp;gt;&amp;gt; this is love&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; love is True&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; love is False&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; love is not True or False&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; love is not True or False; love is love  # Love is complicated&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;this&lt;/code&gt; module in Python is an easter egg for The Zen Of Python (&lt;a href=&#34;https://www.python.org/dev/peps/pep-0020&#34;&gt;PEP 20&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;And if you think that&#39;s already interesting enough, check out the implementation of &lt;a href=&#34;https://hg.python.org/cpython/file/c3896275c0f6/Lib/this.py&#34;&gt;this.py&lt;/a&gt;. Interestingly, &lt;strong&gt;the code for the Zen violates itself&lt;/strong&gt; (and that&#39;s probably the only place where this happens).&lt;/li&gt; &#xA; &lt;li&gt;Regarding the statement &lt;code&gt;love is not True or False; love is love&lt;/code&gt;, ironic but it&#39;s self-explanatory (if not, please see the examples related to &lt;code&gt;is&lt;/code&gt; and &lt;code&gt;is not&lt;/code&gt; operators).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Yes, it exists!&lt;/h3&gt; &#xA;&lt;!-- Example ID: 4286db3d-1ea7-47c9-8fb6-a9a04cac6e49 ---&gt; &#xA;&lt;p&gt;&lt;strong&gt;The &lt;code&gt;else&lt;/code&gt; clause for loops.&lt;/strong&gt; One typical example might be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;  def does_exists_num(l, to_find):&#xA;      for num in l:&#xA;          if num == to_find:&#xA;              print(&#34;Exists!&#34;)&#xA;              break&#xA;      else:&#xA;          print(&#34;Does not exist&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_list = [1, 2, 3, 4, 5]&#xA;&amp;gt;&amp;gt;&amp;gt; does_exists_num(some_list, 4)&#xA;Exists!&#xA;&amp;gt;&amp;gt;&amp;gt; does_exists_num(some_list, -1)&#xA;Does not exist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;The &lt;code&gt;else&lt;/code&gt; clause in exception handling.&lt;/strong&gt; An example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;try:&#xA;    pass&#xA;except:&#xA;    print(&#34;Exception occurred!!!&#34;)&#xA;else:&#xA;    print(&#34;Try block executed successfully...&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;Try block executed successfully...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;else&lt;/code&gt; clause after a loop is executed only when there&#39;s no explicit &lt;code&gt;break&lt;/code&gt; after all the iterations. You can think of it as a &#34;nobreak&#34; clause.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;else&lt;/code&gt; clause after a try block is also called &#34;completion clause&#34; as reaching the &lt;code&gt;else&lt;/code&gt; clause in a &lt;code&gt;try&lt;/code&gt; statement means that the try block actually completed successfully.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Ellipsis *&lt;/h3&gt; &#xA;&lt;!-- Example ID: 969b7100-ab3d-4a7d-ad7d-a6be16181b2b ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def some_func():&#xA;    Ellipsis&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_func()&#xA;# No output, No Error&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; SomeRandomString&#xA;Traceback (most recent call last):&#xA;  File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1, in &amp;lt;module&amp;gt;&#xA;NameError: name &#39;SomeRandomString&#39; is not defined&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; Ellipsis&#xA;Ellipsis&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In Python, &lt;code&gt;Ellipsis&lt;/code&gt; is a globally available built-in object which is equivalent to &lt;code&gt;...&lt;/code&gt;. &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; ...&#xA;Ellipsis&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Ellipsis can be used for several purposes, &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;As a placeholder for code that hasn&#39;t been written yet (just like &lt;code&gt;pass&lt;/code&gt; statement)&lt;/li&gt; &#xA;   &lt;li&gt;In slicing syntax to represent the full slices in remaining direction&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import numpy as np&#xA;&amp;gt;&amp;gt;&amp;gt; three_dimensional_array = np.arange(8).reshape(2, 2, 2)&#xA;array([&#xA;    [&#xA;        [0, 1],&#xA;        [2, 3]&#xA;    ],&#xA;&#xA;    [&#xA;        [4, 5],&#xA;        [6, 7]&#xA;    ]&#xA;])&#xA;&lt;/code&gt;&lt;/pre&gt; So our &lt;code&gt;three_dimensional_array&lt;/code&gt; is an array of array of arrays. Let&#39;s say we want to print the second element (index &lt;code&gt;1&lt;/code&gt;) of all the innermost arrays, we can use Ellipsis to bypass all the preceding dimensions &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; three_dimensional_array[:,:,1]&#xA;array([[1, 3],&#xA;   [5, 7]])&#xA;&amp;gt;&amp;gt;&amp;gt; three_dimensional_array[..., 1] # using Ellipsis.&#xA;array([[1, 3],&#xA;   [5, 7]])&#xA;&lt;/code&gt;&lt;/pre&gt; Note: this will work for any number of dimensions. You can even select slice in first and last dimension and ignore the middle ones this way (&lt;code&gt;n_dimensional_array[firs_dim_slice, ..., last_dim_slice]&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In &lt;a href=&#34;https://docs.python.org/3/library/typing.html&#34;&gt;type hinting&lt;/a&gt; to indicate only a part of the type (like &lt;code&gt;(Callable[..., int]&lt;/code&gt; or &lt;code&gt;Tuple[str, ...]&lt;/code&gt;))&lt;/li&gt; &#xA;   &lt;li&gt;You may also use Ellipsis as a default function argument (in the cases when you want to differentiate between the &#34;no argument passed&#34; and &#34;None value passed&#34; scenarios).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Inpinity&lt;/h3&gt; &#xA;&lt;!-- Example ID: ff473ea8-a3b1-4876-a6f0-4378aff790c1 ---&gt; &#xA;&lt;p&gt;The spelling is intended. Please, don&#39;t submit a patch for this.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 3.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; infinity = float(&#39;infinity&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; hash(infinity)&#xA;314159&#xA;&amp;gt;&amp;gt;&amp;gt; hash(float(&#39;-inf&#39;))&#xA;-314159&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hash of infinity is 10⁵ x π.&lt;/li&gt; &#xA; &lt;li&gt;Interestingly, the hash of &lt;code&gt;float(&#39;-inf&#39;)&lt;/code&gt; is &#34;-10⁵ x π&#34; in Python 3, whereas &#34;-10⁵ x e&#34; in Python 2.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Let&#39;s mangle&lt;/h3&gt; &#xA;&lt;!-- Example ID: 37146d2d-9e67-43a9-8729-3c17934b910c ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class Yo(object):&#xA;    def __init__(self):&#xA;        self.__honey = True&#xA;        self.bro = True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; Yo().bro&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; Yo().__honey&#xA;AttributeError: &#39;Yo&#39; object has no attribute &#39;__honey&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; Yo()._Yo__honey&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class Yo(object):&#xA;    def __init__(self):&#xA;        # Let&#39;s try something symmetrical this time&#xA;        self.__honey__ = True&#xA;        self.bro = True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; Yo().bro&#xA;True&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; Yo()._Yo__honey__&#xA;Traceback (most recent call last):&#xA;  File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1, in &amp;lt;module&amp;gt;&#xA;AttributeError: &#39;Yo&#39; object has no attribute &#39;_Yo__honey__&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Why did &lt;code&gt;Yo()._Yo__honey&lt;/code&gt; work?&lt;/p&gt; &#xA;&lt;p&gt;3.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;_A__variable = &#34;Some value&#34;&#xA;&#xA;class A(object):&#xA;    def some_func(self):&#xA;        return __variable # not initialized anywhere yet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; A().__variable&#xA;Traceback (most recent call last):&#xA;  File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1, in &amp;lt;module&amp;gt;&#xA;AttributeError: &#39;A&#39; object has no attribute &#39;__variable&#39;&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; A().some_func()&#xA;&#39;Some value&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Name_mangling&#34;&gt;Name Mangling&lt;/a&gt; is used to avoid naming collisions between different namespaces.&lt;/li&gt; &#xA; &lt;li&gt;In Python, the interpreter modifies (mangles) the class member names starting with &lt;code&gt;__&lt;/code&gt; (double underscore a.k.a &#34;dunder&#34;) and not ending with more than one trailing underscore by adding &lt;code&gt;_NameOfTheClass&lt;/code&gt; in front.&lt;/li&gt; &#xA; &lt;li&gt;So, to access &lt;code&gt;__honey&lt;/code&gt; attribute in the first snippet, we had to append &lt;code&gt;_Yo&lt;/code&gt; to the front, which would prevent conflicts with the same name attribute defined in any other class.&lt;/li&gt; &#xA; &lt;li&gt;But then why didn&#39;t it work in the second snippet? Because name mangling excludes the names ending with double underscores.&lt;/li&gt; &#xA; &lt;li&gt;The third snippet was also a consequence of name mangling. The name &lt;code&gt;__variable&lt;/code&gt; in the statement &lt;code&gt;return __variable&lt;/code&gt; was mangled to &lt;code&gt;_A__variable&lt;/code&gt;, which also happens to be the name of the variable we declared in the outer scope.&lt;/li&gt; &#xA; &lt;li&gt;Also, if the mangled name is longer than 255 characters, truncation will happen.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Section: Appearances are deceptive!&lt;/h2&gt; &#xA;&lt;h3&gt;▶ Skipping lines?&lt;/h3&gt; &#xA;&lt;!-- Example ID: d50bbde1-fb9d-4735-9633-3444b9d2f417 ---&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; value = 11&#xA;&amp;gt;&amp;gt;&amp;gt; valuе = 32&#xA;&amp;gt;&amp;gt;&amp;gt; value&#xA;11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Wut?&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The easiest way to reproduce this is to simply copy the statements from the above snippet and paste them into your file/shell.&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;p&gt;Some non-Western characters look identical to letters in the English alphabet but are considered distinct by the interpreter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; ord(&#39;е&#39;) # cyrillic &#39;e&#39; (Ye)&#xA;1077&#xA;&amp;gt;&amp;gt;&amp;gt; ord(&#39;e&#39;) # latin &#39;e&#39;, as used in English and typed using standard keyboard&#xA;101&#xA;&amp;gt;&amp;gt;&amp;gt; &#39;е&#39; == &#39;e&#39;&#xA;False&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; value = 42 # latin e&#xA;&amp;gt;&amp;gt;&amp;gt; valuе = 23 # cyrillic &#39;e&#39;, Python 2.x interpreter would raise a `SyntaxError` here&#xA;&amp;gt;&amp;gt;&amp;gt; value&#xA;42&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The built-in &lt;code&gt;ord()&lt;/code&gt; function returns a character&#39;s Unicode &lt;a href=&#34;https://en.wikipedia.org/wiki/Code_point&#34;&gt;code point&lt;/a&gt;, and different code positions of Cyrillic &#39;e&#39; and Latin &#39;e&#39; justify the behavior of the above example.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Teleportation&lt;/h3&gt; &#xA;&lt;!-- Example ID: edafe923-0c20-4315-b6e1-0c31abfc38f5 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# `pip install numpy` first.&#xA;import numpy as np&#xA;&#xA;def energy_send(x):&#xA;    # Initializing a numpy array&#xA;    np.array([float(x)])&#xA;&#xA;def energy_receive():&#xA;    # Return an empty numpy array&#xA;    return np.empty((), dtype=np.float).tolist()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; energy_send(123.456)&#xA;&amp;gt;&amp;gt;&amp;gt; energy_receive()&#xA;123.456&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where&#39;s the Nobel Prize?&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Notice that the numpy array created in the &lt;code&gt;energy_send&lt;/code&gt; function is not returned, so that memory space is free to reallocate.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;numpy.empty()&lt;/code&gt; returns the next free memory slot without reinitializing it. This memory spot just happens to be the same one that was just freed (usually, but not always).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Well, something is fishy...&lt;/h3&gt; &#xA;&lt;!-- Example ID: cb6a37c5-74f7-44ca-b58c-3b902419b362 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def square(x):&#xA;    &#34;&#34;&#34;&#xA;    A simple function to calculate the square of a number by addition.&#xA;    &#34;&#34;&#34;&#xA;    sum_so_far = 0&#xA;    for counter in range(x):&#xA;        sum_so_far = sum_so_far + x&#xA;  return sum_so_far&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 2.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; square(10)&#xA;10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Shouldn&#39;t that be 100?&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you&#39;re not able to reproduce this, try running the file &lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/mixed_tabs_and_spaces.py&#34;&gt;mixed_tabs_and_spaces.py&lt;/a&gt; via the shell.&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Don&#39;t mix tabs and spaces!&lt;/strong&gt; The character just preceding return is a &#34;tab&#34;, and the code is indented by multiple of &#34;4 spaces&#34; elsewhere in the example.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;This is how Python handles tabs:&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;First, tabs are replaced (from left to right) by one to eight spaces such that the total number of characters up to and including the replacement is a multiple of eight &amp;lt;...&amp;gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;So the &#34;tab&#34; at the last line of &lt;code&gt;square&lt;/code&gt; function is replaced with eight spaces, and it gets into the loop.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Python 3 is kind enough to throw an error for such cases automatically.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Output (Python 3.x):&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;TabError: inconsistent use of tabs and spaces in indentation&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Section: Miscellaneous&lt;/h2&gt; &#xA;&lt;h3&gt;▶ &lt;code&gt;+=&lt;/code&gt; is faster&lt;/h3&gt; &#xA;&lt;!-- Example ID: bfd19c60-a807-4a26-9598-4912b86ddb36 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# using &#34;+&#34;, three strings:&#xA;&amp;gt;&amp;gt;&amp;gt; timeit.timeit(&#34;s1 = s1 + s2 + s3&#34;, setup=&#34;s1 = &#39; &#39; * 100000; s2 = &#39; &#39; * 100000; s3 = &#39; &#39; * 100000&#34;, number=100)&#xA;0.25748300552368164&#xA;# using &#34;+=&#34;, three strings:&#xA;&amp;gt;&amp;gt;&amp;gt; timeit.timeit(&#34;s1 += s2 + s3&#34;, setup=&#34;s1 = &#39; &#39; * 100000; s2 = &#39; &#39; * 100000; s3 = &#39; &#39; * 100000&#34;, number=100)&#xA;0.012188911437988281&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;+=&lt;/code&gt; is faster than &lt;code&gt;+&lt;/code&gt; for concatenating more than two strings because the first string (example, &lt;code&gt;s1&lt;/code&gt; for &lt;code&gt;s1 += s2 + s3&lt;/code&gt;) is not destroyed while calculating the complete string.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Let&#39;s make a giant string!&lt;/h3&gt; &#xA;&lt;!-- Example ID: c7a07424-63fe-4504-9842-8f3d334f28fc ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def add_string_with_plus(iters):&#xA;    s = &#34;&#34;&#xA;    for i in range(iters):&#xA;        s += &#34;xyz&#34;&#xA;    assert len(s) == 3*iters&#xA;&#xA;def add_bytes_with_plus(iters):&#xA;    s = b&#34;&#34;&#xA;    for i in range(iters):&#xA;        s += b&#34;xyz&#34;&#xA;    assert len(s) == 3*iters&#xA;&#xA;def add_string_with_format(iters):&#xA;    fs = &#34;{}&#34;*iters&#xA;    s = fs.format(*([&#34;xyz&#34;]*iters))&#xA;    assert len(s) == 3*iters&#xA;&#xA;def add_string_with_join(iters):&#xA;    l = []&#xA;    for i in range(iters):&#xA;        l.append(&#34;xyz&#34;)&#xA;    s = &#34;&#34;.join(l)&#xA;    assert len(s) == 3*iters&#xA;&#xA;def convert_list_to_string(l, iters):&#xA;    s = &#34;&#34;.join(l)&#xA;    assert len(s) == 3*iters&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# Executed in ipython shell using %timeit for better readability of results.&#xA;# You can also use the timeit module in normal python shell/scriptm=, example usage below&#xA;# timeit.timeit(&#39;add_string_with_plus(10000)&#39;, number=1000, globals=globals())&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; NUM_ITERS = 1000&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n1000 add_string_with_plus(NUM_ITERS)&#xA;124 µs ± 4.73 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n1000 add_bytes_with_plus(NUM_ITERS)&#xA;211 µs ± 10.5 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n1000 add_string_with_format(NUM_ITERS)&#xA;61 µs ± 2.18 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n1000 add_string_with_join(NUM_ITERS)&#xA;117 µs ± 3.21 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)&#xA;&amp;gt;&amp;gt;&amp;gt; l = [&#34;xyz&#34;]*NUM_ITERS&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n1000 convert_list_to_string(l, NUM_ITERS)&#xA;10.1 µs ± 1.06 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s increase the number of iterations by a factor of 10.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; NUM_ITERS = 10000&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n1000 add_string_with_plus(NUM_ITERS) # Linear increase in execution time&#xA;1.26 ms ± 76.8 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n1000 add_bytes_with_plus(NUM_ITERS) # Quadratic increase&#xA;6.82 ms ± 134 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n1000 add_string_with_format(NUM_ITERS) # Linear increase&#xA;645 µs ± 24.5 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n1000 add_string_with_join(NUM_ITERS) # Linear increase&#xA;1.17 ms ± 7.25 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)&#xA;&amp;gt;&amp;gt;&amp;gt; l = [&#34;xyz&#34;]*NUM_ITERS&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n1000 convert_list_to_string(l, NUM_ITERS) # Linear increase&#xA;86.3 µs ± 2 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;You can read more about &lt;a href=&#34;https://docs.python.org/3/library/timeit.html&#34;&gt;timeit&lt;/a&gt; or &lt;a href=&#34;https://ipython.org/ipython-doc/dev/interactive/magics.html#magic-timeit&#34;&gt;%timeit&lt;/a&gt; on these links. They are used to measure the execution time of code pieces.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Don&#39;t use &lt;code&gt;+&lt;/code&gt; for generating long strings — In Python, &lt;code&gt;str&lt;/code&gt; is immutable, so the left and right strings have to be copied into the new string for every pair of concatenations. If you concatenate four strings of length 10, you&#39;ll be copying (10+10) + ((10+10)+10) + (((10+10)+10)+10) = 90 characters instead of just 40 characters. Things get quadratically worse as the number and size of the string increases (justified with the execution times of &lt;code&gt;add_bytes_with_plus&lt;/code&gt; function)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Therefore, it&#39;s advised to use &lt;code&gt;.format.&lt;/code&gt; or &lt;code&gt;%&lt;/code&gt; syntax (however, they are slightly slower than &lt;code&gt;+&lt;/code&gt; for very short strings).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Or better, if already you&#39;ve contents available in the form of an iterable object, then use &lt;code&gt;&#39;&#39;.join(iterable_object)&lt;/code&gt; which is much faster.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Unlike &lt;code&gt;add_bytes_with_plus&lt;/code&gt; because of the &lt;code&gt;+=&lt;/code&gt; optimizations discussed in the previous example, &lt;code&gt;add_string_with_plus&lt;/code&gt; didn&#39;t show a quadratic increase in execution time. Had the statement been &lt;code&gt;s = s + &#34;x&#34; + &#34;y&#34; + &#34;z&#34;&lt;/code&gt; instead of &lt;code&gt;s += &#34;xyz&#34;&lt;/code&gt;, the increase would have been quadratic.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def add_string_with_plus(iters):&#xA;    s = &#34;&#34;&#xA;    for i in range(iters):&#xA;        s = s + &#34;x&#34; + &#34;y&#34; + &#34;z&#34;&#xA;    assert len(s) == 3*iters&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n100 add_string_with_plus(1000)&#xA;388 µs ± 22.4 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n100 add_string_with_plus(10000) # Quadratic increase in execution time&#xA;9 ms ± 298 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;So many ways to format and create a giant string are somewhat in contrast to the &lt;a href=&#34;https://www.python.org/dev/peps/pep-0020/&#34;&gt;Zen of Python&lt;/a&gt;, according to which,&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;There should be one-- and preferably only one --obvious way to do it.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Slowing down &lt;code&gt;dict&lt;/code&gt; lookups *&lt;/h3&gt; &#xA;&lt;!-- Example ID: c9c26ce6-df0c-47f7-af0b-966b9386d4c3 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;some_dict = {str(i): 1 for i in range(1_000_000)}&#xA;another_dict = {str(i): 1 for i in range(1_000_000)}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; %timeit some_dict[&#39;5&#39;]&#xA;28.6 ns ± 0.115 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict[1] = 1&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit some_dict[&#39;5&#39;]&#xA;37.2 ns ± 0.265 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit another_dict[&#39;5&#39;]&#xA;28.5 ns ± 0.142 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)&#xA;&amp;gt;&amp;gt;&amp;gt; another_dict[1]  # Trying to access a key that doesn&#39;t exist&#xA;Traceback (most recent call last):&#xA;  File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1, in &amp;lt;module&amp;gt;&#xA;KeyError: 1&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit another_dict[&#39;5&#39;]&#xA;38.5 ns ± 0.0913 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Why are same lookups becoming slower?&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CPython has a generic dictionary lookup function that handles all types of keys (&lt;code&gt;str&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, any object ...), and a specialized one for the common case of dictionaries composed of &lt;code&gt;str&lt;/code&gt;-only keys.&lt;/li&gt; &#xA; &lt;li&gt;The specialized function (named &lt;code&gt;lookdict_unicode&lt;/code&gt; in CPython&#39;s &lt;a href=&#34;https://github.com/python/cpython/raw/522691c46e2ae51faaad5bbbce7d959dd61770df/Objects/dictobject.c#L841&#34;&gt;source&lt;/a&gt;) knows all existing keys (including the looked-up key) are strings, and uses the faster &amp;amp; simpler string comparison to compare keys, instead of calling the &lt;code&gt;__eq__&lt;/code&gt; method.&lt;/li&gt; &#xA; &lt;li&gt;The first time a &lt;code&gt;dict&lt;/code&gt; instance is accessed with a non-&lt;code&gt;str&lt;/code&gt; key, it&#39;s modified so future lookups use the generic function.&lt;/li&gt; &#xA; &lt;li&gt;This process is not reversible for the particular &lt;code&gt;dict&lt;/code&gt; instance, and the key doesn&#39;t even have to exist in the dictionary. That&#39;s why attempting a failed lookup has the same effect.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;▶ Bloating instance &lt;code&gt;dict&lt;/code&gt;s *&lt;/h3&gt; &#xA;&lt;!-- Example ID: fe706ab4-1615-c0ba-a078-76c98cbe3f48 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import sys&#xA;&#xA;class SomeClass:&#xA;    def __init__(self):&#xA;        self.some_attr1 = 1&#xA;        self.some_attr2 = 2&#xA;        self.some_attr3 = 3&#xA;        self.some_attr4 = 4&#xA;&#xA;&#xA;def dict_size(o):&#xA;    return sys.getsizeof(o.__dict__)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; (Python 3.8, other Python 3 versions may vary a little)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; o1 = SomeClass()&#xA;&amp;gt;&amp;gt;&amp;gt; o2 = SomeClass()&#xA;&amp;gt;&amp;gt;&amp;gt; dict_size(o1)&#xA;104&#xA;&amp;gt;&amp;gt;&amp;gt; dict_size(o2)&#xA;104&#xA;&amp;gt;&amp;gt;&amp;gt; del o1.some_attr1&#xA;&amp;gt;&amp;gt;&amp;gt; o3 = SomeClass()&#xA;&amp;gt;&amp;gt;&amp;gt; dict_size(o3)&#xA;232&#xA;&amp;gt;&amp;gt;&amp;gt; dict_size(o1)&#xA;232&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s try again... In a new interpreter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; o1 = SomeClass()&#xA;&amp;gt;&amp;gt;&amp;gt; o2 = SomeClass()&#xA;&amp;gt;&amp;gt;&amp;gt; dict_size(o1)&#xA;104  # as expected&#xA;&amp;gt;&amp;gt;&amp;gt; o1.some_attr5 = 5&#xA;&amp;gt;&amp;gt;&amp;gt; o1.some_attr6 = 6&#xA;&amp;gt;&amp;gt;&amp;gt; dict_size(o1)&#xA;360&#xA;&amp;gt;&amp;gt;&amp;gt; dict_size(o2)&#xA;272&#xA;&amp;gt;&amp;gt;&amp;gt; o3 = SomeClass()&#xA;&amp;gt;&amp;gt;&amp;gt; dict_size(o3)&#xA;232&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;What makes those dictionaries become bloated? And why are newly created objects bloated as well?&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CPython is able to reuse the same &#34;keys&#34; object in multiple dictionaries. This was added in &lt;a href=&#34;https://www.python.org/dev/peps/pep-0412/&#34;&gt;PEP 412&lt;/a&gt; with the motivation to reduce memory usage, specifically in dictionaries of instances - where keys (instance attributes) tend to be common to all instances.&lt;/li&gt; &#xA; &lt;li&gt;This optimization is entirely seamless for instance dictionaries, but it is disabled if certain assumptions are broken.&lt;/li&gt; &#xA; &lt;li&gt;Key-sharing dictionaries do not support deletion; if an instance attribute is deleted, the dictionary is &#34;unshared&#34;, and key-sharing is disabled for all future instances of the same class.&lt;/li&gt; &#xA; &lt;li&gt;Additionaly, if the dictionary keys have been resized (because new keys are inserted), they are kept shared &lt;em&gt;only&lt;/em&gt; if they are used by a exactly single dictionary (this allows adding many attributes in the &lt;code&gt;__init__&lt;/code&gt; of the very first created instance, without causing an &#34;unshare&#34;). If multiple instances exist when a resize happens, key-sharing is disabled for all future instances of the same class: CPython can&#39;t tell if your instances are using the same set of attributes anymore, and decides to bail out on attempting to share their keys.&lt;/li&gt; &#xA; &lt;li&gt;A small tip, if you aim to lower your program&#39;s memory footprint: don&#39;t delete instance attributes, and make sure to initialize all attributes in your &lt;code&gt;__init__&lt;/code&gt;!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;▶ Minor Ones *&lt;/h3&gt; &#xA;&lt;!-- Example ID: f885cb82-f1e4-4daa-9ff3-972b14cb1324 ---&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;join()&lt;/code&gt; is a string operation instead of list operation. (sort of counter-intuitive at first usage)&lt;/p&gt; &lt;p&gt;&lt;strong&gt;💡 Explanation:&lt;/strong&gt; If &lt;code&gt;join()&lt;/code&gt; is a method on a string, then it can operate on any iterable (list, tuple, iterators). If it were a method on a list, it&#39;d have to be implemented separately by every type. Also, it doesn&#39;t make much sense to put a string-specific method on a generic &lt;code&gt;list&lt;/code&gt; object API.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Few weird looking but semantically correct statements:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;[] = ()&lt;/code&gt; is a semantically correct statement (unpacking an empty &lt;code&gt;tuple&lt;/code&gt; into an empty &lt;code&gt;list&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&#39;a&#39;[0][0][0][0][0]&lt;/code&gt; is also a semantically correct statement as strings are &lt;a href=&#34;https://docs.python.org/3/glossary.html#term-sequence&#34;&gt;sequences&lt;/a&gt;(iterables supporting element access using integer indices) in Python.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;3 --0-- 5 == 8&lt;/code&gt; and &lt;code&gt;--5 == 5&lt;/code&gt; are both semantically correct statements and evaluate to &lt;code&gt;True&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Given that &lt;code&gt;a&lt;/code&gt; is a number, &lt;code&gt;++a&lt;/code&gt; and &lt;code&gt;--a&lt;/code&gt; are both valid Python statements but don&#39;t behave the same way as compared with similar statements in languages like C, C++, or Java.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = 5&#xA;&amp;gt;&amp;gt;&amp;gt; a&#xA;5&#xA;&amp;gt;&amp;gt;&amp;gt; ++a&#xA;5&#xA;&amp;gt;&amp;gt;&amp;gt; --a&#xA;5&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;💡 Explanation:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;There is no &lt;code&gt;++&lt;/code&gt; operator in Python grammar. It is actually two &lt;code&gt;+&lt;/code&gt; operators.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;++a&lt;/code&gt; parses as &lt;code&gt;+(+a)&lt;/code&gt; which translates to &lt;code&gt;a&lt;/code&gt;. Similarly, the output of the statement &lt;code&gt;--a&lt;/code&gt; can be justified.&lt;/li&gt; &#xA;   &lt;li&gt;This StackOverflow &lt;a href=&#34;https://stackoverflow.com/questions/3654830/why-are-there-no-and-operators-in-python&#34;&gt;thread&lt;/a&gt; discusses the rationale behind the absence of increment and decrement operators in Python.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You must be aware of the Walrus operator in Python. But have you ever heard about &lt;em&gt;the space-invader operator&lt;/em&gt;?&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = 42&#xA;&amp;gt;&amp;gt;&amp;gt; a -=- 1&#xA;&amp;gt;&amp;gt;&amp;gt; a&#xA;43&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It is used as an alternative incrementation operator, together with another one&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a +=+ 1&#xA;&amp;gt;&amp;gt;&amp;gt; a&#xA;&amp;gt;&amp;gt;&amp;gt; 44&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;💡 Explanation:&lt;/strong&gt; This prank comes from &lt;a href=&#34;https://twitter.com/raymondh/status/1131103570856632321?lang=en&#34;&gt;Raymond Hettinger&#39;s tweet&lt;/a&gt;. The space invader operator is actually just a malformatted &lt;code&gt;a -= (-1)&lt;/code&gt;. Which is equivalent to &lt;code&gt;a = a - (- 1)&lt;/code&gt;. Similar for the &lt;code&gt;a += (+ 1)&lt;/code&gt; case.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Python has an undocumented &lt;a href=&#34;https://en.wikipedia.org/wiki/Converse_implication&#34;&gt;converse implication&lt;/a&gt; operator.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; False ** False == True&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; False ** True == False&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; True ** False == True&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; True ** True == True&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;💡 Explanation:&lt;/strong&gt; If you replace &lt;code&gt;False&lt;/code&gt; and &lt;code&gt;True&lt;/code&gt; by 0 and 1 and do the maths, the truth table is equivalent to a converse implication operator. (&lt;a href=&#34;https://github.com/cosmologicon/pywat/raw/master/explanation.md#the-undocumented-converse-implication-operator&#34;&gt;Source&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Since we are talking operators, there&#39;s also &lt;code&gt;@&lt;/code&gt; operator for matrix multiplication (don&#39;t worry, this time it&#39;s for real).&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import numpy as np&#xA;&amp;gt;&amp;gt;&amp;gt; np.array([2, 2, 2]) @ np.array([7, 8, 8])&#xA;46&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;💡 Explanation:&lt;/strong&gt; The &lt;code&gt;@&lt;/code&gt; operator was added in Python 3.5 keeping the scientific community in mind. Any object can overload &lt;code&gt;__matmul__&lt;/code&gt; magic method to define behavior for this operator.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;From Python 3.8 onwards you can use a typical f-string syntax like &lt;code&gt;f&#39;{some_var=}&lt;/code&gt; for quick debugging. Example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_string = &#34;wtfpython&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; f&#39;{some_string=}&#39;&#xA;&#34;some_string=&#39;wtfpython&#39;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Python uses 2 bytes for local variable storage in functions. In theory, this means that only 65536 variables can be defined in a function. However, python has a handy solution built in that can be used to store more than 2^16 variable names. The following code demonstrates what happens in the stack when more than 65536 local variables are defined (Warning: This code prints around 2^18 lines of text, so be prepared!):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import dis&#xA;exec(&#34;&#34;&#34;&#xA;def f():&#xA;   &#34;&#34;&#34; + &#34;&#34;&#34;&#xA;   &#34;&#34;&#34;.join([&#34;X&#34; + str(x) + &#34;=&#34; + str(x) for x in range(65539)]))&#xA;&#xA;f()&#xA;&#xA;print(dis.dis(f))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Multiple Python threads won&#39;t run your &lt;em&gt;Python code&lt;/em&gt; concurrently (yes, you heard it right!). It may seem intuitive to spawn several threads and let them execute your Python code concurrently, but, because of the &lt;a href=&#34;https://wiki.python.org/moin/GlobalInterpreterLock&#34;&gt;Global Interpreter Lock&lt;/a&gt; in Python, all you&#39;re doing is making your threads execute on the same core turn by turn. Python threads are good for IO-bound tasks, but to achieve actual parallelization in Python for CPU-bound tasks, you might want to use the Python &lt;a href=&#34;https://docs.python.org/3/library/multiprocessing.html&#34;&gt;multiprocessing&lt;/a&gt; module.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sometimes, the &lt;code&gt;print&lt;/code&gt; method might not print values immediately. For example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# File some_file.py&#xA;import time&#xA;&#xA;print(&#34;wtfpython&#34;, end=&#34;_&#34;)&#xA;time.sleep(3)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This will print the &lt;code&gt;wtfpython&lt;/code&gt; after 3 seconds due to the &lt;code&gt;end&lt;/code&gt; argument because the output buffer is flushed either after encountering &lt;code&gt;\n&lt;/code&gt; or when the program finishes execution. We can force the buffer to flush by passing &lt;code&gt;flush=True&lt;/code&gt; argument.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;List slicing with out of the bounds indices throws no errors&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_list = [1, 2, 3, 4, 5]&#xA;&amp;gt;&amp;gt;&amp;gt; some_list[111:]&#xA;[]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Slicing an iterable not always creates a new object. For example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_str = &#34;wtfpython&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; some_list = [&#39;w&#39;, &#39;t&#39;, &#39;f&#39;, &#39;p&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;, &#39;n&#39;]&#xA;&amp;gt;&amp;gt;&amp;gt; some_list is some_list[:] # False expected because a new object is created.&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; some_str is some_str[:] # True because strings are immutable, so making a new object is of not much use.&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;int(&#39;١٢٣٤٥٦٧٨٩&#39;)&lt;/code&gt; returns &lt;code&gt;123456789&lt;/code&gt; in Python 3. In Python, Decimal characters include digit characters, and all characters that can be used to form decimal-radix numbers, e.g. U+0660, ARABIC-INDIC DIGIT ZERO. Here&#39;s an &lt;a href=&#34;https://chris.improbable.org/2014/8/25/adventures-in-unicode-digits/&#34;&gt;interesting story&lt;/a&gt; related to this behavior of Python.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can separate numeric literals with underscores (for better readability) from Python 3 onwards.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; six_million = 6_000_000&#xA;&amp;gt;&amp;gt;&amp;gt; six_million&#xA;6000000&#xA;&amp;gt;&amp;gt;&amp;gt; hex_address = 0xF00D_CAFE&#xA;&amp;gt;&amp;gt;&amp;gt; hex_address&#xA;4027435774&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&#39;abc&#39;.count(&#39;&#39;) == 4&lt;/code&gt;. Here&#39;s an approximate implementation of &lt;code&gt;count&lt;/code&gt; method, which would make the things more clear&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def count(s, sub):&#xA;    result = 0&#xA;    for i in range(len(s) + 1 - len(sub)):&#xA;        result += (s[i:i + len(sub)] == sub)&#xA;    return result&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The behavior is due to the matching of empty substring(&lt;code&gt;&#39;&#39;&lt;/code&gt;) with slices of length 0 in the original string.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;A few ways in which you can contribute to wtfpython,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Suggesting new examples&lt;/li&gt; &#xA; &lt;li&gt;Helping with translation (See &lt;a href=&#34;https://github.com/satwikkansal/wtfpython/issues?q=is%3Aissue+is%3Aopen+label%3Atranslation&#34;&gt;issues labeled translation&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Minor corrections like pointing out outdated snippets, typos, formatting errors, etc.&lt;/li&gt; &#xA; &lt;li&gt;Identifying gaps (things like inadequate explanation, redundant examples, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Any creative suggestions to make this project more fun and useful&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more details. Feel free to create a new &lt;a href=&#34;https://github.com/satwikkansal/wtfpython/issues/new&#34;&gt;issue&lt;/a&gt; to discuss things.&lt;/p&gt; &#xA;&lt;p&gt;PS: Please don&#39;t reach out with backlinking requests, no links will be added unless they&#39;re highly relevant to the project.&lt;/p&gt; &#xA;&lt;h1&gt;Acknowledgements&lt;/h1&gt; &#xA;&lt;p&gt;The idea and design for this collection were initially inspired by Denys Dovhan&#39;s awesome project &lt;a href=&#34;https://github.com/denysdovhan/wtfjs&#34;&gt;wtfjs&lt;/a&gt;. The overwhelming support by Pythonistas gave it the shape it is in right now.&lt;/p&gt; &#xA;&lt;h4&gt;Some nice Links!&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=sH4XF6pKKmk&#34;&gt;https://www.youtube.com/watch?v=sH4XF6pKKmk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/Python/comments/3cu6ej/what_are_some_wtf_things_about_python&#34;&gt;https://www.reddit.com/r/Python/comments/3cu6ej/what_are_some_wtf_things_about_python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sopython.com/wiki/Common_Gotchas_In_Python&#34;&gt;https://sopython.com/wiki/Common_Gotchas_In_Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/530530/python-2-x-gotchas-and-landmines&#34;&gt;https://stackoverflow.com/questions/530530/python-2-x-gotchas-and-landmines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/1011431/common-pitfalls-in-python&#34;&gt;https://stackoverflow.com/questions/1011431/common-pitfalls-in-python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.python.org/doc/humor/&#34;&gt;https://www.python.org/doc/humor/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cosmologicon/pywat#the-undocumented-converse-implication-operator&#34;&gt;https://github.com/cosmologicon/pywat#the-undocumented-converse-implication-operator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codementor.io/satwikkansal/python-practices-for-efficient-code-performance-memory-and-usability-aze6oiq65&#34;&gt;https://www.codementor.io/satwikkansal/python-practices-for-efficient-code-performance-memory-and-usability-aze6oiq65&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wemake-services/wemake-python-styleguide/search?q=wtfpython&amp;amp;type=Issues&#34;&gt;https://github.com/wemake-services/wemake-python-styleguide/search?q=wtfpython&amp;amp;type=Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;WFTPython discussion threads on &lt;a href=&#34;https://news.ycombinator.com/item?id=21862073&#34;&gt;Hacker News&lt;/a&gt; and &lt;a href=&#34;https://www.reddit.com/r/programming/comments/edsh3q/what_the_fck_python_30_exploring_and/&#34;&gt;Reddit&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;🎓 License&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.wtfpl.net&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-WTFPL%202.0-lightgrey.svg?style=flat-square&#34; alt=&#34;WTFPL 2.0&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;© &lt;a href=&#34;https://satwikkansal.xyz&#34;&gt;Satwik Kansal&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Surprise your friends as well!&lt;/h2&gt; &#xA;&lt;p&gt;If you like wtfpython, you can use these quick links to share it with your friends,&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/intent/tweet?url=https://github.com/satwikkansal/wtfpython&amp;amp;text=If%20you%20really%20think%20you%20know%20Python,%20think%20once%20more!%20Check%20out%20wtfpython&amp;amp;hashtags=python,wtfpython&#34;&gt;Twitter&lt;/a&gt; | &lt;a href=&#34;https://www.linkedin.com/shareArticle?url=https://github.com/satwikkansal&amp;amp;title=What%20the%20f*ck%20Python!&amp;amp;summary=If%20you%20really%20thing%20you%20know%20Python,%20think%20once%20more!&#34;&gt;Linkedin&lt;/a&gt; | &lt;a href=&#34;https://www.facebook.com/dialog/share?app_id=536779657179021&amp;amp;display=page&amp;amp;href=https%3A%2F%2Fgithub.com%2Fsatwikkansal%2Fwtfpython&amp;amp;quote=If%20you%20really%20think%20you%20know%20Python%2C%20think%20once%20more!&#34;&gt;Facebook&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Need a pdf version?&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve received a few requests for the pdf (and epub) version of wtfpython. You can add your details &lt;a href=&#34;https://satwikkansal.xyz/wtfpython-pdf/&#34;&gt;here&lt;/a&gt; to get them as soon as they are finished.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;That&#39;s all folks!&lt;/strong&gt; For upcoming content like this, you can add your email &lt;a href=&#34;https://www.satwikkansal.xyz/content-like-wtfpython/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>