<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-26T01:56:53Z</updated>
  <subtitle>Weekly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>stas00/ml-engineering</title>
    <updated>2023-11-26T01:56:53Z</updated>
    <id>tag:github.com,2023-11-26:/stas00/ml-engineering</id>
    <link href="https://github.com/stas00/ml-engineering" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Machine Learning Engineering Online Book&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Machine Learning Engineering Online Book&lt;/h1&gt; &#xA;&lt;p&gt;An open collection of methodologies to help with successful training of large language models and multi-modal models.&lt;/p&gt; &#xA;&lt;p&gt;This is a technical material suitable for LLM/VLM training engineers and operators. That is the content here contains lots of scripts and copy-n-paste commands to enable you to quickly address your needs.&lt;/p&gt; &#xA;&lt;p&gt;This repo is an ongoing brain dump of my experiences training Large Language Models (LLM) (and VLMs); a lot of the know-how I acquired while training the open-source &lt;a href=&#34;https://huggingface.co/bigscience/bloom&#34;&gt;BLOOM-176B&lt;/a&gt; model in 2022 and &lt;a href=&#34;https://huggingface.co/HuggingFaceM4/idefics-80b-instruct&#34;&gt;IDEFICS-80B&lt;/a&gt; multi-modal model in 2023. Currently, I&#39;m working on developing/training open-source Retrieval Augmented models at &lt;a href=&#34;https://contextual.ai/&#34;&gt;Contextual.AI&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve been compiling this information mostly for myself so that I could quickly find solutions I have already researched in the past and which have worked, but as usual I&#39;m happy to share these with the wider ML community.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;p&gt;My apologies if the layout is a bit unstable while I&#39;m writing new chapters and gradually re-organizing the content to be more intuitive.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Part 1. Key Components&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/network/&#34;&gt;Network&lt;/a&gt;&lt;/strong&gt; - intra-node and inter-node connectivity, calculating bandwidth requirements&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/io/&#34;&gt;IO&lt;/a&gt;&lt;/strong&gt; - local and distributed disks and filesystems&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/cpu/&#34;&gt;CPU&lt;/a&gt;&lt;/strong&gt; - cpus, affinities (WIP)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/gpu/&#34;&gt;GPU&lt;/a&gt;&lt;/strong&gt; - the work horses (WIP)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/cpu-memory/&#34;&gt;CPU Memory&lt;/a&gt;&lt;/strong&gt; - how much CPU memory is enough - the shortest chapter ever.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Part 2. Performance&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/fault-tolerance/&#34;&gt;Fault Tolerance&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/performance/&#34;&gt;Performance&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/multi-node&#34;&gt;Multi-Node networking&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/model-parallelism/&#34;&gt;Model parallelism&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Part 3. Operating&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/slurm/&#34;&gt;SLURM&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/hparams/&#34;&gt;Training hyper-parameters and model initializations&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/instabilities/&#34;&gt;Instabilities&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Part 4. Development&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/debug/&#34;&gt;Debugging software and hardware failures&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/stas00/the-art-of-debugging&#34;&gt;And more debugging&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/reproducibility/&#34;&gt;Reproducibility&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/dtype/&#34;&gt;Tensor precision / Data types&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/transformers/&#34;&gt;HF Transformers notes&lt;/a&gt;&lt;/strong&gt; - making small models, tokenizers, datasets, and other tips&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Part 5. Miscellaneous&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/resources/&#34;&gt;Resources&lt;/a&gt;&lt;/strong&gt; - LLM/VLM chronicles&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Shortcuts&lt;/h2&gt; &#xA;&lt;p&gt;Things that you are likely to need to find quickly and often.&lt;/p&gt; &#xA;&lt;p&gt;Tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/multi-node/all_reduce_bench.py&#34;&gt;all_reduce_bench.py&lt;/a&gt; - a much easier way to benchmark network throughput than nccl-tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/debug/torch-distributed-gpu-test.py&#34;&gt;torch-distributed-gpu-test.py&lt;/a&gt; - a tool to quickly test your inter-node connectivity&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Guides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/debug/pytorch.md&#34;&gt;debugging pytorch applications&lt;/a&gt; - quick copy-n-paste solutions to resolve hanging or breaking pytorch applications&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/slurm/users.md&#34;&gt;slurm for users&lt;/a&gt; - a slurm cheatsheet and tricks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/transformers/make-tiny-models.md&#34;&gt;make tiny models/datasets/tokenizers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stas00/ml-engineering/tree/master/resources#publicly-available-training-llmvlm-logbooks&#34;&gt;LLM/VLM chronicles collection&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Gratitude&lt;/h2&gt; &#xA;&lt;p&gt;None of this would have been possible without me being entrusted with doing the specific LLM/VLM trainings I have learned this know-how from. This is a privilege that only a few enjoy due to the prohibitively expensive cost of renting huge ML compute clusters. So hopefully the rest of the ML community will vicariously learn from these notes.&lt;/p&gt; &#xA;&lt;p&gt;Special thanks go to &lt;a href=&#34;https://github.com/thomwolf&#34;&gt;Thom Wolf&lt;/a&gt; who proposed that I lead the BLOOM-176B training back when I didn&#39;t know anything about large scale training. This was the project that catapulted me into the intense learning process. And, of course, HuggingFace for giving me the opportunity to work full time on BLOOM-176B and later on IDEFICS-80B trainings.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you found a bug, typo or would like to propose an improvement please don&#39;t hesitate to open an &lt;a href=&#34;https://github.com/stas00/ml-engineering/issues&#34;&gt;Issue&lt;/a&gt; or contribute a PR.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The content of this site is distributed under &lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/LICENSE-CC-BY-SA&#34;&gt;Attribution-ShareAlike 4.0 International&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;My repositories map&lt;/h2&gt; &#xA;&lt;p&gt;✔ &lt;strong&gt;Machine Learning:&lt;/strong&gt; &lt;a href=&#34;https://github.com/stas00/ml-engineering&#34;&gt;ML Engineering&lt;/a&gt; | &lt;a href=&#34;https://github.com/stas00/ml-ways&#34;&gt;ML ways&lt;/a&gt; | &lt;a href=&#34;https://github.com/stas00/porting&#34;&gt;Porting&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;✔ &lt;strong&gt;Guides:&lt;/strong&gt; &lt;a href=&#34;https://github.com/stas00/the-art-of-debugging&#34;&gt;The Art of Debugging&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;✔ &lt;strong&gt;Applications:&lt;/strong&gt; &lt;a href=&#34;https://github.com/stas00/ipyexperiments&#34;&gt;ipyexperiments&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;✔ &lt;strong&gt;Tools and Cheatsheets:&lt;/strong&gt; &lt;a href=&#34;https://github.com/stas00/bash-tools&#34;&gt;bash&lt;/a&gt; | &lt;a href=&#34;https://github.com/stas00/conda-tools&#34;&gt;conda&lt;/a&gt; | &lt;a href=&#34;https://github.com/stas00/git-tools&#34;&gt;git&lt;/a&gt; | &lt;a href=&#34;https://github.com/stas00/jupyter-notebook-tools&#34;&gt;jupyter-notebook&lt;/a&gt; | &lt;a href=&#34;https://github.com/stas00/make-tools&#34;&gt;make&lt;/a&gt; | &lt;a href=&#34;https://github.com/stas00/python-tools&#34;&gt;python&lt;/a&gt; | &lt;a href=&#34;https://github.com/stas00/tensorboard-tools&#34;&gt;tensorboard&lt;/a&gt; | &lt;a href=&#34;https://github.com/stas00/unix-tools&#34;&gt;unix&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>protectai/ai-exploits</title>
    <updated>2023-11-26T01:56:53Z</updated>
    <id>tag:github.com,2023-11-26:/protectai/ai-exploits</id>
    <link href="https://github.com/protectai/ai-exploits" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of real world AI/ML exploits for responsibly disclosed vulnerabilities&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;AI Exploits&lt;/h1&gt; &#xA; &lt;img width=&#34;250&#34; src=&#34;https://github.com/protectai/ai-exploits/assets/5151193/aef11c4a-d758-45fe-aab8-c9df714cdbe5&#34; alt=&#34;AI Exploits Logo&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;The AI world has a security problem and it&#39;s not just in the inputs given to LLMs such as ChatGPT. Based on research done by &lt;a href=&#34;https://protectai.com&#34;&gt;Protect AI&lt;/a&gt; and independent security experts on the &lt;a href=&#34;https://huntr.com&#34;&gt;Huntr&lt;/a&gt; Bug Bounty Platform, there are far more impactful and practical attacks against the tools, libraries and frameworks used to build, train, and deploy machine learning models. Many of these attacks lead to complete system takeovers and/or loss of sensitive data, models, or credentials most often without the need for authentication.&lt;/p&gt; &#xA;&lt;p&gt;With the release of this repository, &lt;a href=&#34;https://protectai.com&#34;&gt;Protect AI&lt;/a&gt; hopes to demystify to the Information Security community what practical attacks against AI/Machine Learning infrastructure look like in the real world and raise awareness to the amount of vulnerable components that currently exist in the AI/ML ecosystem. More vulnerabilities can be found here: &lt;a href=&#34;https://protectai.com/threat-research/november-vulnerability-report&#34;&gt;November Vulnerability Report&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;This repository, &lt;strong&gt;ai-exploits&lt;/strong&gt;, is a collection of exploits and scanning templates for responsibly disclosed vulnerabilities affecting machine learning tools.&lt;/p&gt; &#xA;&lt;p&gt;Each vulnerable tool has a number of subfolders containing three types of utilities: &lt;a href=&#34;https://github.com/rapid7/metasploit-framework&#34;&gt;Metasploit&lt;/a&gt; modules, &lt;a href=&#34;https://github.com/projectdiscovery/nuclei&#34;&gt;Nuclei&lt;/a&gt; templates and CSRF templates. Metasploit modules are for security professionals looking to exploit the vulnerabilities and Nuclei templates are for scanning a large number of remote servers to determine if they&#39;re vulnerable.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;Video demonstrating running one of the Metasploit modules against Ray:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/5aSwPQKKhi4&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/5aSwPQKKhi4/0.jpg&#34; alt=&#34;Exploit Demo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setup &amp;amp; Usage&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to use the modules and scanning templates is to build and run the Docker image provided by the &lt;code&gt;Dockerfile&lt;/code&gt; in this repository. The Docker image will have Metasploit and Nuclei already installed along with all the necessary configuration.&lt;/p&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the image:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/protectai/ai-exploits &amp;amp;&amp;amp; cd ai-exploits&#xA;docker build -t protectai/ai-exploits .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the docker image:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it --rm protectai/ai-exploits /bin/bash&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The latter command will drop you into a &lt;code&gt;bash&lt;/code&gt; session in the container with &lt;code&gt;msfconsole&lt;/code&gt; and &lt;code&gt;nuclei&lt;/code&gt; ready to go.&lt;/p&gt; &#xA;&lt;h3&gt;Using the Metasploit Modules&lt;/h3&gt; &#xA;&lt;h4&gt;With Docker&lt;/h4&gt; &#xA;&lt;p&gt;Start the Metasploit console (the new modules will be available under the &lt;code&gt;exploits/protectai&lt;/code&gt; category), load a module, set the options, and run the exploit.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;msfconsole&#xA;msf6 &amp;gt; use exploit/protectai/ray_job_rce&#xA;msf6 exploit(protectai/ray_job_rce) &amp;gt; set RHOSTS &amp;lt;target IP&amp;gt;&#xA;msf6 exploit(protectai/ray_job_rce) &amp;gt; run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;With Metasploit Installed Locally&lt;/h4&gt; &#xA;&lt;p&gt;Create a folder &lt;code&gt;~/.msf4/modules/exploits/protectai&lt;/code&gt; and copy the exploit modules into it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p ~/.msf4/modules/exploits/protectai&#xA;cp ai-exploits/ray/msfmodules/* ~/.msf4/modules/exploits/protectai&#xA;msfconsole&#xA;msf6 &amp;gt; use exploit/protectai/&amp;lt;exploit_name.py&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Nuclei Templates&lt;/h3&gt; &#xA;&lt;p&gt;Nuclei is a vulnerability scanning engine which can be used to scan large numbers of servers for known vulnerabilities in web applications and networks.&lt;/p&gt; &#xA;&lt;p&gt;Navigate to nuclei templates folder such as &lt;code&gt;ai-exploits/mlflow/nuclei-templates&lt;/code&gt;. In the Docker container these are stored in the &lt;code&gt;/root/nuclei-templates&lt;/code&gt; folder. Then simply point to the template file and the target server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ai-exploits/mlflow/nuclei-templates&#xA;nuclei -t mlflow-lfi.yaml -u http://&amp;lt;target&amp;gt;:&amp;lt;port&amp;gt;`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using CSRF Templates&lt;/h3&gt; &#xA;&lt;p&gt;Cross-Site Request Forgery (CSRF) vulnerabilities enable attackers to stand up a web server hosting a malicious HTML page that will execute a request to the target server on behalf of the victim. This is a common attack vector for exploiting vulnerabilities in web applications, including web applications which are only exposed on the localhost interface and not to the broader network. Below is a simple demo example of how to use a CSRF template to exploit a vulnerability in a web application.&lt;/p&gt; &#xA;&lt;p&gt;Start a web server in the csrf-templates folder. Python allows one to stand up a simple web server in any directory. Navigate to the template folder and start the server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ai-exploits/ray/csrf-templates&#xA;python3 -m http.server 9999&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now visit the web server address you just stood up (&lt;a href=&#34;http://127.0.0.1:9999&#34;&gt;http://127.0.0.1:9999&lt;/a&gt;) and hit F12 to open the developer tools, then click the Network tab. Click the link to ray-cmd-injection-csrf.html. You should see that the browser sent a request to the vulnerable server on your behalf.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution Guidelines&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions to this repository. Please read our &lt;a href=&#34;https://raw.githubusercontent.com/protectai/ai-exploits/main/CONTRIBUTING.md&#34;&gt;Contribution Guidelines&lt;/a&gt; for more information on how to contribute.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/protectai/ai-exploits/main/LICENSE&#34;&gt;Apache 2.0 License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>iam-veeramalla/Jenkins-Zero-To-Hero</title>
    <updated>2023-11-26T01:56:53Z</updated>
    <id>tag:github.com,2023-11-26:/iam-veeramalla/Jenkins-Zero-To-Hero</id>
    <link href="https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Install Jenkins, configure Docker as slave, set up cicd, deploy applications to k8s using Argo CD in GitOps way.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Jenkins-Zero-To-Hero&lt;/h1&gt; &#xA;&lt;p&gt;Are you looking forward to learn Jenkins right from Zero(installation) to Hero(Build end to end pipelines)? then you are at the right place.&lt;/p&gt; &#xA;&lt;h2&gt;Installation on EC2 Instance&lt;/h2&gt; &#xA;&lt;p&gt;YouTube Video -&amp;gt; &lt;a href=&#34;https://www.youtube.com/watch?v=zZfhAXfBvVA&amp;amp;list=RDCMUCnnQ3ybuyFdzvgv2Ky5jnAA&amp;amp;index=1&#34;&gt;https://www.youtube.com/watch?v=zZfhAXfBvVA&amp;amp;list=RDCMUCnnQ3ybuyFdzvgv2Ky5jnAA&amp;amp;index=1&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/43399466/216040281-6c8b89c3-8c22-4620-ad1c-8edd78eb31ae.png&#34; alt=&#34;Screenshot 2023-02-01 at 5 46 14 PM&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Install Jenkins, configure Docker as agent, set up cicd, deploy applications to k8s and much more.&lt;/p&gt; &#xA;&lt;h2&gt;AWS EC2 Instance&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to AWS Console&lt;/li&gt; &#xA; &lt;li&gt;Instances(running)&lt;/li&gt; &#xA; &lt;li&gt;Launch instances&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img width=&#34;994&#34; alt=&#34;Screenshot 2023-02-01 at 12 37 45 PM&#34; src=&#34;https://user-images.githubusercontent.com/43399466/215974891-196abfe9-ace0-407b-abd2-adcffe218e3f.png&#34;&gt; &#xA;&lt;h3&gt;Install Jenkins.&lt;/h3&gt; &#xA;&lt;p&gt;Pre-Requisites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java (JDK)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Run the below commands to install Java and Jenkins&lt;/h3&gt; &#xA;&lt;p&gt;Install Java&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt update&#xA;sudo apt install openjdk-11-jre&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Verify Java is Installed&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;java -version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, you can proceed with installing Jenkins&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -fsSL https://pkg.jenkins.io/debian/jenkins.io-2023.key | sudo tee \&#xA;  /usr/share/keyrings/jenkins-keyring.asc &amp;gt; /dev/null&#xA;echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \&#xA;  https://pkg.jenkins.io/debian binary/ | sudo tee \&#xA;  /etc/apt/sources.list.d/jenkins.list &amp;gt; /dev/null&#xA;sudo apt-get update&#xA;sudo apt-get install jenkins&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;**Note: ** By default, Jenkins will not be accessible to the external world due to the inbound traffic restriction by AWS. Open port 8080 in the inbound traffic rules as show below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;EC2 &amp;gt; Instances &amp;gt; Click on &#xA;  &lt;instance-id&gt;&lt;/instance-id&gt;&lt;/li&gt; &#xA; &lt;li&gt;In the bottom tabs -&amp;gt; Click on Security&lt;/li&gt; &#xA; &lt;li&gt;Security groups&lt;/li&gt; &#xA; &lt;li&gt;Add inbound traffic rules as shown in the image (you can just allow TCP 8080 as well, in my case, I allowed &lt;code&gt;All traffic&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img width=&#34;1187&#34; alt=&#34;Screenshot 2023-02-01 at 12 42 01 PM&#34; src=&#34;https://user-images.githubusercontent.com/43399466/215975712-2fc569cb-9d76-49b4-9345-d8b62187aa22.png&#34;&gt; &#xA;&lt;h3&gt;Login to Jenkins using the below URL:&lt;/h3&gt; &#xA;&lt;p&gt;http://&#xA; &lt;ec2-instance-public-ip-address&gt;&#xA;  :8080 [You can get the ec2-instance-public-ip-address from your AWS EC2 console page]&#xA; &lt;/ec2-instance-public-ip-address&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note: If you are not interested in allowing &lt;code&gt;All Traffic&lt;/code&gt; to your EC2 instance 1. Delete the inbound traffic rule for your instance 2. Edit the inbound traffic rule to only allow custom TCP port &lt;code&gt;8080&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;After you login to Jenkins, - Run the command to copy the Jenkins Admin Password - &lt;code&gt;sudo cat /var/lib/jenkins/secrets/initialAdminPassword&lt;/code&gt; - Enter the Administrator password&lt;/p&gt; &#xA;&lt;img width=&#34;1291&#34; alt=&#34;Screenshot 2023-02-01 at 10 56 25 AM&#34; src=&#34;https://user-images.githubusercontent.com/43399466/215959008-3ebca431-1f14-4d81-9f12-6bb232bfbee3.png&#34;&gt; &#xA;&lt;h3&gt;Click on Install suggested plugins&lt;/h3&gt; &#xA;&lt;img width=&#34;1291&#34; alt=&#34;Screenshot 2023-02-01 at 10 58 40 AM&#34; src=&#34;https://user-images.githubusercontent.com/43399466/215959294-047eadef-7e64-4795-bd3b-b1efb0375988.png&#34;&gt; &#xA;&lt;p&gt;Wait for the Jenkins to Install suggested plugins&lt;/p&gt; &#xA;&lt;img width=&#34;1291&#34; alt=&#34;Screenshot 2023-02-01 at 10 59 31 AM&#34; src=&#34;https://user-images.githubusercontent.com/43399466/215959398-344b5721-28ec-47a5-8908-b698e435608d.png&#34;&gt; &#xA;&lt;p&gt;Create First Admin User or Skip the step [If you want to use this Jenkins instance for future use-cases as well, better to create admin user]&lt;/p&gt; &#xA;&lt;img width=&#34;990&#34; alt=&#34;Screenshot 2023-02-01 at 11 02 09 AM&#34; src=&#34;https://user-images.githubusercontent.com/43399466/215959757-403246c8-e739-4103-9265-6bdab418013e.png&#34;&gt; &#xA;&lt;p&gt;Jenkins Installation is Successful. You can now starting using the Jenkins&lt;/p&gt; &#xA;&lt;img width=&#34;990&#34; alt=&#34;Screenshot 2023-02-01 at 11 14 13 AM&#34; src=&#34;https://user-images.githubusercontent.com/43399466/215961440-3f13f82b-61a2-4117-88bc-0da265a67fa7.png&#34;&gt; &#xA;&lt;h2&gt;Install the Docker Pipeline plugin in Jenkins:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Log in to Jenkins.&lt;/li&gt; &#xA; &lt;li&gt;Go to Manage Jenkins &amp;gt; Manage Plugins.&lt;/li&gt; &#xA; &lt;li&gt;In the Available tab, search for &#34;Docker Pipeline&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Select the plugin and click the Install button.&lt;/li&gt; &#xA; &lt;li&gt;Restart Jenkins after the plugin is installed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img width=&#34;1392&#34; alt=&#34;Screenshot 2023-02-01 at 12 17 02 PM&#34; src=&#34;https://user-images.githubusercontent.com/43399466/215973898-7c366525-15db-4876-bd71-49522ecb267d.png&#34;&gt; &#xA;&lt;p&gt;Wait for the Jenkins to be restarted.&lt;/p&gt; &#xA;&lt;h2&gt;Docker Slave Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Run the below command to Install Docker&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt update&#xA;sudo apt install docker.io&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Grant Jenkins user and Ubuntu user permission to docker deamon.&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo su - &#xA;usermod -aG docker jenkins&#xA;usermod -aG docker ubuntu&#xA;systemctl restart docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you are done with the above steps, it is better to restart Jenkins.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://&amp;lt;ec2-instance-public-ip&amp;gt;:8080/restart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The docker agent configuration is now successful.&lt;/p&gt;</summary>
  </entry>
</feed>