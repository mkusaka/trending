<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-13T01:42:31Z</updated>
  <subtitle>Weekly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>megadose/toutatis</title>
    <updated>2025-07-13T01:42:31Z</updated>
    <id>tag:github.com,2025-07-13:/megadose/toutatis</id>
    <link href="https://github.com/megadose/toutatis" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Toutatis is a tool that allows you to extract information from instagrams accounts such as e-mails, phone numbers and more&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Toutatis&lt;/h1&gt; &#xA;&lt;p&gt;üëã Hi there! For any professional inquiries or collaborations, please reach out to me at: &lt;a href=&#34;mailto:megadose@protonmail.com&#34;&gt;megadose@protonmail.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;üìß Preferably, use your professional email for correspondence. Let&#39;s keep it short and sweet, and all in English!&lt;/p&gt; &#xA;&lt;p&gt;Toutatis is a tool that allows you to extract information from instagrams accounts such as e-mails, phone numbers and more &lt;br&gt; For BTC Donations : 1FHDM49QfZX6pJmhjLE5tB2K6CaTLMZpXZ&lt;/p&gt; &#xA;&lt;h2&gt;üí° Prerequisite&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.python.org/downloads/release/python-370/&#34;&gt;Python 3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üõ†Ô∏è Installation&lt;/h2&gt; &#xA;&lt;h3&gt;With PyPI&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;pip install toutatis&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;With Github&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/megadose/toutatis.git&#xA;cd toutatis/&#xA;python3 setup.py install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üìö Usage:&lt;/h2&gt; &#xA;&lt;h3&gt;Find information from a username&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;toutatis -u username -s instagramsessionid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Find information from an Instagram ID&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;toutatis -i instagramID -s instagramsessionid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üìà Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Informations about     : xxxusernamexxx&#xA;Full Name              : xxxusernamesxx | userID : 123456789&#xA;Verified               : False | Is buisness Account : False&#xA;Is private Account     : False&#xA;Follower               : xxx | Following : xxx&#xA;Number of posts        : x&#xA;Number of tag in posts : x&#xA;External url           : http://example.com&#xA;IGTV posts             : x&#xA;Biography              : example biography&#xA;Public Email           : public@example.com&#xA;Public Phone           : +00 0 00 00 00 00&#xA;Obfuscated email       : me********s@examplemail.com&#xA;Obfuscated phone       : +00 0xx xxx xx 00&#xA;------------------------&#xA;Profile Picture        : https://scontent-X-X.cdninstagram.com/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üìö To retrieve the sessionID&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://files.catbox.moe/1rfi6j.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Thank you to :&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/eyupergin&#34;&gt;EyupErgin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yazeed44&#34;&gt;yazeed44&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>coleam00/ai-agents-masterclass</title>
    <updated>2025-07-13T01:42:31Z</updated>
    <id>tag:github.com,2025-07-13:/coleam00/ai-agents-masterclass</id>
    <link href="https://github.com/coleam00/ai-agents-masterclass" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Follow along with my AI Agents Masterclass videos! All of the code I create and use in this series on YouTube will be here for you to use and even build on top of!&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://www.youtube.com/channel/UCMwVTLZIRRUyyVrkjDpn4pA&#34;&gt; &lt;img alt=&#34;AI Agents Masterclass&#34; src=&#34;https://i.imgur.com/8Gr2pBA.png&#34;&gt; &lt;h1 align=&#34;center&#34;&gt;AI Agents Masterclass&lt;/h1&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Artificial Intelligence is the #1 thing for all developers to spend their time on now. The problem is, most developers aren&#39;t focusing on AI agents, which is the real way to unleash the full power of AI. This is why I&#39;m creating this AI Agents Masterclass - so I can show YOU how to use AI agents to transform businesses and create incredibly powerful software like I&#39;ve already done many times! Click the image or link above to go to the masterclass on YouTube. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34; style=&#34;margin-top: 25px&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/coleam00/ai-agents-masterclass/main/#what-are-ai-agents&#34;&gt;&lt;strong&gt;What are AI Agents?&lt;/strong&gt;&lt;/a&gt; ¬∑ &lt;a href=&#34;https://raw.githubusercontent.com/coleam00/ai-agents-masterclass/main/#how-this-repo-works&#34;&gt;&lt;strong&gt;How this Repo Works&lt;/strong&gt;&lt;/a&gt; ¬∑ &lt;a href=&#34;https://raw.githubusercontent.com/coleam00/ai-agents-masterclass/main/#instructions-to-follow-along&#34;&gt;&lt;strong&gt;Instructions to Follow Along&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;What are AI Agents?&lt;/h2&gt; &#xA;&lt;p&gt;AI agents are simply Large Language Models that have been given the ability to interact with the outside world. They can do things like draft emails, book appointments in your CRM, create tasks in your task management software, and really anything you can dream of! I hope that everything I show here can really help you dream big and create incredible things with AI!&lt;/p&gt; &#xA;&lt;p&gt;AI agents can be very powerful without having to create a lot of code. That doesn&#39;t mean there isn&#39;t room though to create more complex applications to tie together many different agents to accomplish truly incredible things! That&#39;s where we&#39;ll be heading with this masterclass and I really look forward to it!&lt;/p&gt; &#xA;&lt;p&gt;Below is a very basic diagram just to get an idea of what an AI agent looks like:&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34; style=&#34;margin-top: 25px;margin-bottom:25px&#34;&gt; &#xA; &lt;img width=&#34;700&#34; alt=&#34;Trainers Ally LangGraph graph&#34; src=&#34;https://i.imgur.com/ChRoV8W.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;How this Repo Works&lt;/h2&gt; &#xA;&lt;p&gt;Each week there will be a new video for my AI Agents Masterclass! Each video will have its own folder in this repo, starting with &lt;a href=&#34;https://raw.githubusercontent.com/coleam00/ai-agents-masterclass/main/1-first-agent&#34;&gt;/1-first-agent/&lt;/a&gt; for the first video in the masterclass where I create our very first AI agent!&lt;/p&gt; &#xA;&lt;p&gt;Any folder that starts with a number is for a masterclass video. The other folders are for other content on my YouTube channel. The other content goes very well with the masterclass series (think of it as supplemental material) which is why it is here too!&lt;/p&gt; &#xA;&lt;p&gt;The code in each folder will be exactly what I used/created in the accompanying masterclass video.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Instructions to Follow Along&lt;/h2&gt; &#xA;&lt;p&gt;The below instructions assume you already have Git, Python, and Pip installed. If you do not, you can install &lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Python + Pip from here&lt;/a&gt; and &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git from here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To follow along with any of my videos, first clone this GitHub repository, open up a terminal, and change your directory to the folder for the current video you are watching (example: 1st video is &lt;a href=&#34;https://raw.githubusercontent.com/coleam00/ai-agents-masterclass/main/1-first-agent&#34;&gt;/1-first-agent/&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The below instructions work on any OS - Windows, Linux, or Mac!&lt;/p&gt; &#xA;&lt;p&gt;You will need to use the environment variables defined in the .env.example file in the folder (example for the first video: &lt;a href=&#34;https://raw.githubusercontent.com/coleam00/ai-agents-masterclass/main/1-first-agent/.env.example&#34;&gt;&lt;code&gt;1-first-agent/.env.example&lt;/code&gt;&lt;/a&gt;) to set up your API keys and other configuration. Turn the .env.example file into a &lt;code&gt;.env&lt;/code&gt; file, and supply the necessary environment variables.&lt;/p&gt; &#xA;&lt;p&gt;After setting up the .env file, run the below commands to create a Python virtual environment and install the necessary Python packages to run the code from the masterclass. Creating a virtual environment is optional but recommended! Creating a virtual environment for the entire masterclass is a one time thing. Make sure to run the pip install for each video though!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m venv ai-agents-masterclass&#xA;&#xA;# On Windows:&#xA;.\ai-agents-masterclass\Scripts\activate&#xA;&#xA;# On MacOS/Linux: &#xA;source ai-agents-masterclass/bin/activate&#xA;&#xA;cd 1-first-agent (or whichever folder)&#xA;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, you can execute the code in the folder with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python [script name].py&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/MoGe</title>
    <updated>2025-07-13T01:42:31Z</updated>
    <id>tag:github.com,2025-07-13:/microsoft/MoGe</id>
    <link href="https://github.com/microsoft/MoGe" rel="alternate"></link>
    <summary type="html">&lt;p&gt;[CVPR&#39;25 Oral] MoGe: Unlocking Accurate Monocular Geometry Estimation for Open-Domain Images with Optimal Training Supervision&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MoGe: Accurate Monocular Geometry Estimation&lt;/h1&gt; &#xA;&lt;p&gt;MoGe is a powerful model for recovering 3D geometry from monocular open-domain images, including metric point maps, metric depth maps, normal maps and camera FOV. &lt;em&gt;&lt;strong&gt;Check our websites (&lt;a href=&#34;https://wangrc.site/MoGePage&#34;&gt;MoGe-1&lt;/a&gt;, &lt;a href=&#34;https://wangrc.site/MoGe2Page&#34;&gt;MoGe-2&lt;/a&gt;) for videos and interactive results!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üìñ Publications&lt;/h2&gt; &#xA;&lt;h3&gt;MoGe-2: Accurate Monocular Geometry with Metric Scale and Sharp Details&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://arxiv.org/abs/2507.02546&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/arXiv-Paper-red?logo=arxiv&amp;amp;logoColor=white&#34; alt=&#34;arXiv&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://wangrc.site/MoGe2Page/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Project_Page-Website-green?logo=googlechrome&amp;amp;logoColor=white&#34; alt=&#34;Project Page&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://huggingface.co/spaces/Ruicheng/MoGe-2&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Demo_(MoGe_v2)-blue&#34;&gt;&lt;/a&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/8f9ae680-659d-4f7f-82e2-b9ed9d6b988a&#34;&gt;https://github.com/user-attachments/assets/8f9ae680-659d-4f7f-82e2-b9ed9d6b988a&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;MoGe: Unlocking Accurate Monocular Geometry Estimation for Open-Domain Images with Optimal Training Supervision&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://arxiv.org/abs/2410.19115&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/arXiv-Paper-red?logo=arxiv&amp;amp;logoColor=white&#34; alt=&#34;arXiv&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://wangrc.site/MoGePage/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Project_Page-Website-green?logo=googlechrome&amp;amp;logoColor=white&#34; alt=&#34;Project Page&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://huggingface.co/spaces/Ruicheng/MoGe&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Demo_(MoGe_v1)-blue&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/MoGe/main/assets/overview_simplified.png&#34; width=&#34;100%&#34; alt=&#34;Method overview&#34; align=&#34;center&#34;&gt; &#xA;&lt;h2&gt;üåü Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Accurate 3D geometry estimation&lt;/strong&gt;: Estimate point maps &amp;amp; depth maps &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/MoGe/main/docs/normal.md&#34;&gt;normal maps&lt;/a&gt; from open-domain single images with high precision -- all capabilities in one model, one forward pass.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Optional ground-truth FOV input&lt;/strong&gt;: Enhance model accuracy further by providing the true field of view.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flexible resolution support&lt;/strong&gt;: Works seamlessly with various resolutions and aspect ratios, from 2:1 to 1:2.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Optimized for speed&lt;/strong&gt;: Achieves 60ms latency per image (A100 or RTX3090, FP16, ViT-L). Adjustable inference resolution for even faster speed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ú® News&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;(2025-06-10)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚ùó&lt;strong&gt;Released MoGe-2&lt;/strong&gt;, a state-of-the-art model for monocular geometry, with these new capabilities in one unified model: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;point map prediction in &lt;strong&gt;metric scale&lt;/strong&gt;;&lt;/li&gt; &#xA;   &lt;li&gt;comparable and even better performance over MoGe-1;&lt;/li&gt; &#xA;   &lt;li&gt;significant improvement of &lt;strong&gt;visual sharpness&lt;/strong&gt;;&lt;/li&gt; &#xA;   &lt;li&gt;high-quality &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/MoGe/main/docs/normal.md&#34;&gt;&lt;strong&gt;normal map&lt;/strong&gt; estimation&lt;/a&gt;;&lt;/li&gt; &#xA;   &lt;li&gt;lower inference latency.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üì¶ Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Install via pip&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install git+https://github.com/microsoft/MoGe.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Or clone this repository&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/microsoft/MoGe.git&#xA;cd MoGe&#xA;pip install -r requirements.txt   # install the requirements&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: MoGe should be compatible with most requirements versions. Please check the &lt;code&gt;requirements.txt&lt;/code&gt; for more details if you encounter any dependency issues.&lt;/p&gt; &#xA;&lt;h2&gt;ü§ó Pretrained Models&lt;/h2&gt; &#xA;&lt;p&gt;Our pretrained models are available on the huggingface hub:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Hugging Face Model&lt;/th&gt; &#xA;   &lt;th&gt;Metric scale&lt;/th&gt; &#xA;   &lt;th&gt;Normal&lt;/th&gt; &#xA;   &lt;th&gt;#Params&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MoGe-1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/Ruicheng/moge-vitl&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;Ruicheng/moge-vitl&lt;/code&gt;&lt;/a&gt;&lt;a&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;314M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td rowspan=&#34;4&#34;&gt;MoGe-2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/Ruicheng/moge-2-vitl&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;Ruicheng/moge-2-vitl&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;326M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/Ruicheng/moge-2-vitl-normal&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;Ruicheng/moge-2-vitl-normal&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;331M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/Ruicheng/moge-2-vitb-normal&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;Ruicheng/moge-2-vitb-normal&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;104M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/Ruicheng/moge-2-vits-normal&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;Ruicheng/moge-2-vits-normal&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;35M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: &lt;code&gt;moge-2-vitl-normal&lt;/code&gt; has full capabilities, with almost the same level of performance as &lt;code&gt;moge-2-vitl&lt;/code&gt; plus extra normal map estimation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You may import the &lt;code&gt;MoGeModel&lt;/code&gt; class of the matched version, then load the pretrained weights via &lt;code&gt;MoGeModel.from_pretrained(&#34;HUGGING_FACE_MODEL_REPO_NAME&#34;)&lt;/code&gt; with automatic downloading. If loading a local checkpoint, replace the model name with the local path.&lt;/p&gt; &#xA;&lt;p&gt;For ONNX support, please refer to &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/MoGe/main/docs/onnx.md&#34;&gt;docs/onnx.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üí° Minimal Code Example&lt;/h2&gt; &#xA;&lt;p&gt;Here is a minimal example for loading the model and inferring on a single image.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import cv2&#xA;import torch&#xA;# from moge.model.v1 import MoGeModel&#xA;from moge.model.v2 import MoGeModel # Let&#39;s try MoGe-2&#xA;&#xA;device = torch.device(&#34;cuda&#34;)&#xA;&#xA;# Load the model from huggingface hub (or load from local).&#xA;model = MoGeModel.from_pretrained(&#34;Ruicheng/moge-2-vitl-normal&#34;).to(device)                             &#xA;&#xA;# Read the input image and convert to tensor (3, H, W) with RGB values normalized to [0, 1]&#xA;input_image = cv2.cvtColor(cv2.imread(&#34;PATH_TO_IMAGE.jpg&#34;), cv2.COLOR_BGR2RGB)                       &#xA;input_image = torch.tensor(input_image / 255, dtype=torch.float32, device=device).permute(2, 0, 1)    &#xA;&#xA;# Infer &#xA;output = model.infer(input_image)&#xA;&#34;&#34;&#34;&#xA;`output` has keys &#34;points&#34;, &#34;depth&#34;, &#34;mask&#34;, &#34;normal&#34; (optional) and &#34;intrinsics&#34;,&#xA;The maps are in the same size as the input image. &#xA;{&#xA;    &#34;points&#34;: (H, W, 3),    # point map in OpenCV camera coordinate system (x right, y down, z forward). For MoGe-2, the point map is in metric scale.&#xA;    &#34;depth&#34;: (H, W),        # depth map&#xA;    &#34;normal&#34;: (H, W, 3)     # normal map in OpenCV camera coordinate system. (available for MoGe-2-normal)&#xA;    &#34;mask&#34;: (H, W),         # a binary mask for valid pixels. &#xA;    &#34;intrinsics&#34;: (3, 3),   # normalized camera intrinsics&#xA;}&#xA;&#34;&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more usage details, see the &lt;code&gt;MoGeModel.infer()&lt;/code&gt; docstring.&lt;/p&gt; &#xA;&lt;h2&gt;üí° Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Gradio demo | &lt;code&gt;moge app&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The demo for MoGe-1 is also available at our &lt;a href=&#34;https://huggingface.co/spaces/Ruicheng/MoGe&#34;&gt;Hugging Face Space&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Using the command line tool&#xA;moge app        # will run MoGe-2 demo by default.&#xA;&#xA;# In this repo&#xA;python moge/scripts/app.py   # --share for Gradio public sharing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/MoGe/main/moge/scripts/app.py&#34;&gt;&lt;code&gt;moge/scripts/app.py&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Inference | &lt;code&gt;moge infer&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Run the script &lt;code&gt;moge/scripts/infer.py&lt;/code&gt; via the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Save the output [maps], [glb] and [ply] files&#xA;moge infer -i IMAGES_FOLDER_OR_IMAGE_PATH --o OUTPUT_FOLDER --maps --glb --ply&#xA;&#xA;# Show the result in a window (requires pyglet &amp;lt; 2.0, e.g. pip install pyglet==1.5.29)&#xA;moge infer -i IMAGES_FOLDER_OR_IMAGE_PATH --o OUTPUT_FOLDER --show&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For detailed options, run &lt;code&gt;moge infer --help&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: moge infer [OPTIONS]&#xA;&#xA;  Inference script&#xA;&#xA;Options:&#xA;  -i, --input PATH            Input image or folder path. &#34;jpg&#34; and &#34;png&#34; are&#xA;                              supported.&#xA;  --fov_x FLOAT               If camera parameters are known, set the&#xA;                              horizontal field of view in degrees. Otherwise,&#xA;                              MoGe will estimate it.&#xA;  -o, --output PATH           Output folder path&#xA;  --pretrained TEXT           Pretrained model name or path. If not provided,&#xA;                              the corresponding default model will be chosen.&#xA;  --version [v1|v2]           Model version. Defaults to &#34;v2&#34;&#xA;  --device TEXT               Device name (e.g. &#34;cuda&#34;, &#34;cuda:0&#34;, &#34;cpu&#34;).&#xA;                              Defaults to &#34;cuda&#34;&#xA;  --fp16                      Use fp16 precision for much faster inference.&#xA;  --resize INTEGER            Resize the image(s) &amp;amp; output maps to a specific&#xA;                              size. Defaults to None (no resizing).&#xA;  --resolution_level INTEGER  An integer [0-9] for the resolution level for&#xA;                              inference. Higher value means more tokens and&#xA;                              the finer details will be captured, but&#xA;                              inference can be slower. Defaults to 9. Note&#xA;                              that it is irrelevant to the output size, which&#xA;                              is always the same as the input size.&#xA;                              `resolution_level` actually controls&#xA;                              `num_tokens`. See `num_tokens` for more details.&#xA;  --num_tokens INTEGER        number of tokens used for inference. A integer&#xA;                              in the (suggested) range of `[1200, 2500]`.&#xA;                              `resolution_level` will be ignored if&#xA;                              `num_tokens` is provided. Default: None&#xA;  --threshold FLOAT           Threshold for removing edges. Defaults to 0.01.&#xA;                              Smaller value removes more edges. &#34;inf&#34; means no&#xA;                              thresholding.&#xA;  --maps                      Whether to save the output maps (image, point&#xA;                              map, depth map, normal map, mask) and fov.&#xA;  --glb                       Whether to save the output as a.glb file. The&#xA;                              color will be saved as a texture.&#xA;  --ply                       Whether to save the output as a.ply file. The&#xA;                              color will be saved as vertex colors.&#xA;  --show                      Whether show the output in a window. Note that&#xA;                              this requires pyglet&amp;lt;2 installed as required by&#xA;                              trimesh.&#xA;  --help                      Show this message and exit.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/MoGe/main/moge/scripts/infer.py&#34;&gt;&lt;code&gt;moge/scripts/infer.py&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;360¬∞ panorama images | &lt;code&gt;moge infer_panorama&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;NOTE: This is an experimental extension of MoGe.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The script will split the 360-degree panorama image into multiple perspective views and infer on each view separately. The output maps will be combined to produce a panorama depth map and point map.&lt;/p&gt; &#xA;&lt;p&gt;Note that the panorama image must have spherical parameterization (e.g., environment maps or equirectangular images). Other formats must be converted to spherical format before using this script. Run &lt;code&gt;moge infer_panorama --help&lt;/code&gt; for detailed options.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/microsoft/MoGe/main/assets/panorama_pipeline.png&#34; width=&#34;80%&#34;&gt; &#xA; &lt;p&gt;The photo is from &lt;a href=&#34;https://commons.wikimedia.org/wiki/Category:360%C2%B0_panoramas_with_equirectangular_projection#/media/File:Braunschweig_Sankt-%C3%84gidien_Panorama_02.jpg&#34;&gt;this URL&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/MoGe/main/moge/scripts/infer_panorama.py&#34;&gt;&lt;code&gt;moge/scripts/infer_panorama.py&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üèãÔ∏è‚Äç‚ôÇÔ∏è Training &amp;amp; Finetuning&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/MoGe/main/docs/train.md&#34;&gt;docs/train.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üß™ Evaluation&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/MoGe/main/docs/eval.md&#34;&gt;docs/eval.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚öñÔ∏è License&lt;/h2&gt; &#xA;&lt;p&gt;MoGe code is released under the MIT license, except for DINOv2 code in &lt;code&gt;moge/model/dinov2&lt;/code&gt; which is released by Meta AI under the Apache 2.0 license. See &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/MoGe/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;üìú Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you find our work useful in your research, we gratefully request that you consider citing our paper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{wang2024moge,&#xA;    title={MoGe: Unlocking Accurate Monocular Geometry Estimation for Open-Domain Images with Optimal Training Supervision},&#xA;    author={Wang, Ruicheng and Xu, Sicheng and Dai, Cassie and Xiang, Jianfeng and Deng, Yu and Tong, Xin and Yang, Jiaolong},&#xA;    year={2024},&#xA;    eprint={2410.19115},&#xA;    archivePrefix={arXiv},&#xA;    primaryClass={cs.CV},&#xA;    url={https://arxiv.org/abs/2410.19115}, &#xA;}&#xA;&#xA;@misc{wang2025moge2,&#xA;      title={MoGe-2: Accurate Monocular Geometry with Metric Scale and Sharp Details}, &#xA;      author={Ruicheng Wang and Sicheng Xu and Yue Dong and Yu Deng and Jianfeng Xiang and Zelong Lv and Guangzhong Sun and Xin Tong and Jiaolong Yang},&#xA;      year={2025},&#xA;      eprint={2507.02546},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.CV},&#xA;      url={https://arxiv.org/abs/2507.02546}, &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>