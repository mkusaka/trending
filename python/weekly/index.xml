<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-16T02:02:23Z</updated>
  <subtitle>Weekly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>techwithtim/Price-Tracking-Web-Scraper</title>
    <updated>2023-07-16T02:02:23Z</updated>
    <id>tag:github.com,2023-07-16:/techwithtim/Price-Tracking-Web-Scraper</id>
    <link href="https://github.com/techwithtim/Price-Tracking-Web-Scraper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An automated price tracker that uses bright data, playwright, react and flask.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Project Information&lt;/h1&gt; &#xA;&lt;p&gt;This project provides a user interface to interact with an automated price tracking web scraper. Currently the tracker scrapes amazon.ca, but could be configured to scrape multiple sources.&lt;/p&gt; &#xA;&lt;h2&gt;Libraries/Frameworks/Modules&lt;/h2&gt; &#xA;&lt;p&gt;This project uses:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;React&lt;/li&gt; &#xA; &lt;li&gt;Flask&lt;/li&gt; &#xA; &lt;li&gt;Playwright&lt;/li&gt; &#xA; &lt;li&gt;Bright Data (Web Scraping Browser)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using the Scraper&lt;/h2&gt; &#xA;&lt;p&gt;Install all dependencies, create the &lt;code&gt;auth.json&lt;/code&gt; file, start the flask backend, run the react frontend and interact with the tool.&lt;/p&gt; &#xA;&lt;h3&gt;auth.json&lt;/h3&gt; &#xA;&lt;p&gt;Fill in your &lt;a href=&#34;https://brightdata.com/products/scraping-browser&#34;&gt;Bright Data Scraping Browser&lt;/a&gt; credentials in a &lt;code&gt;backend/scraper/auth.json&lt;/code&gt; file (see &lt;code&gt;auth_example.json&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Python Flask Backend&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cd backend&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pip install -r requirements.txt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;playwright install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python app.py&lt;/code&gt; or &lt;code&gt;python3 app.py&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running the React Frontend&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cd frontend&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm i&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run start&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setting Up Automation&lt;/h2&gt; &#xA;&lt;p&gt;To automate the collection of prices from this software simply run the &lt;code&gt;scheduler/main.py&lt;/code&gt; file at your desired increment while the python flask backend is running.&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;I have created a simple &lt;code&gt;.bat&lt;/code&gt; script called &lt;code&gt;run.bat&lt;/code&gt; that you can schedule to execute using the Windows Task Scheduler that will automatically run the backend api and send the appropriate request to it.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ricklamers/gpt-code-ui</title>
    <updated>2023-07-16T02:02:23Z</updated>
    <id>tag:github.com,2023-07-16:/ricklamers/gpt-code-ui</id>
    <link href="https://github.com/ricklamers/gpt-code-ui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open source implementation of OpenAI&#39;s ChatGPT Code interpreter&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://github.com/ricklamers/gpt-code-ui/assets/1309307/9ad4061d-2e26-4407-9431-109b650fb022&#34; alt=&#34;GPT-Code logo&#34; width=&#34;240&#34;&gt; &#xA;&lt;p&gt;An open source implementation of OpenAI&#39;s ChatGPT &lt;a href=&#34;https://openai.com/blog/chatgpt-plugins#code-interpreter&#34;&gt;Code interpreter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Simply ask the OpenAI model to do something and it will generate &amp;amp; execute the code for you.&lt;/p&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://ricklamers.io/posts/gpt-code&#34;&gt;blog post&lt;/a&gt; to find out more.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Judah Cooper offered to start &amp;amp; curate a Discord community. Join &lt;a href=&#34;https://discord.gg/ZmTQwpkYu6&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Open a terminal and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install gpt-code-ui&#xA;gptcode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to make basic dependencies available it&#39;s recommended to run the following &lt;code&gt;pip&lt;/code&gt; install in the Python environment that is used in the shell where you run &lt;code&gt;gptcode&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip install &#34;numpy&amp;gt;=1.24,&amp;lt;1.25&#34; &#34;dateparser&amp;gt;=1.1,&amp;lt;1.2&#34; &#34;pandas&amp;gt;=1.5,&amp;lt;1.6&#34; &#34;geopandas&amp;gt;=0.13,&amp;lt;0.14&#34; &#34;PyPDF2&amp;gt;=3.0,&amp;lt;3.1&#34; &#34;pdfminer&amp;gt;=20191125,&amp;lt;20191200&#34; &#34;pdfplumber&amp;gt;=0.9,&amp;lt;0.10&#34; &#34;matplotlib&amp;gt;=3.7,&amp;lt;3.8&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;User interface&lt;/h2&gt; &#xA;&lt;img src=&#34;https://github.com/ricklamers/gpt-code-ui/assets/1309307/c29c504a-a7ed-4ae0-9360-d7224bc3e3d6&#34; alt=&#34;GPT-Code logo&#34; width=&#34;100%&#34;&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;File upload&lt;/li&gt; &#xA; &lt;li&gt;File download&lt;/li&gt; &#xA; &lt;li&gt;Context awareness (it can refer to your previous messages)&lt;/li&gt; &#xA; &lt;li&gt;Generate code&lt;/li&gt; &#xA; &lt;li&gt;Run code (Python kernel)&lt;/li&gt; &#xA; &lt;li&gt;Model switching (GPT-3.5 and GPT-4)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Misc.&lt;/h2&gt; &#xA;&lt;h3&gt;Using .env for OpenAI key&lt;/h3&gt; &#xA;&lt;p&gt;You can put a .env in the working directory to load the &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;h3&gt;Configurables&lt;/h3&gt; &#xA;&lt;p&gt;Set the &lt;code&gt;API_PORT&lt;/code&gt;, &lt;code&gt;WEB_PORT&lt;/code&gt;, &lt;code&gt;SNAKEMQ_PORT&lt;/code&gt; variables to override the defaults.&lt;/p&gt; &#xA;&lt;p&gt;Set &lt;code&gt;OPENAI_BASE_URL&lt;/code&gt; to change the OpenAI API endpoint that&#39;s being used (note this environment variable includes the protocol &lt;code&gt;https://...&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;.env.example&lt;/code&gt; in the repository (make sure you &lt;code&gt;git clone&lt;/code&gt; the repo to get the file first).&lt;/p&gt; &#xA;&lt;p&gt;For Azure OpenAI Services, there are also other configurable variables like deployment name. See &lt;code&gt;.env.azure-example&lt;/code&gt; for more information. Note that model selection on the UI is currently not supported for Azure OpenAI Services.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cp .env.example .env&#xA;vim .env&#xA;gptcode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/localagi&#34;&gt;localagi&lt;/a&gt; took the effort of bundling the Python package in a Docker container. Check it out here: &lt;a href=&#34;https://github.com/localagi/gpt-code-ui-docker&#34;&gt;gpt-code-ui-docker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please do and have a look at the &lt;a href=&#34;https://raw.githubusercontent.com/ricklamers/gpt-code-ui/main/.github/CONTRIBUTING.md&#34;&gt;contributions guide&lt;/a&gt;! This should be a community initiative. I&#39;ll try my best to be responsive.&lt;/p&gt; &#xA;&lt;p&gt;Thank you for your interest in this project!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>modelscope/modelscope</title>
    <updated>2023-07-16T02:02:23Z</updated>
    <id>tag:github.com,2023-07-16:/modelscope/modelscope</id>
    <link href="https://github.com/modelscope/modelscope" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ModelScope: bring the notion of Model-as-a-Service to life.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;br&gt; &lt;img src=&#34;https://modelscope.oss-cn-beijing.aliyuncs.com/modelscope.gif&#34; width=&#34;400&#34;&gt; &lt;br&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://pypi.org/project/modelscope/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/modelscope&#34; alt=&#34;PyPI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;!-- [![Documentation Status](https://readthedocs.org/projects/easy-cv/badge/?version=latest)](https://easy-cv.readthedocs.io/en/latest/) --&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/modelscope/modelscope/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/modelscope/modelscope.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/modelscope/modelscope/issues&#34;&gt;&lt;img src=&#34;https://isitmaintained.com/badge/open/modelscope/modelscope.svg?sanitize=true&#34; alt=&#34;open issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://GitHub.com/modelscope/modelscope/pull/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-pr/modelscope/modelscope.svg?sanitize=true&#34; alt=&#34;GitHub pull-requests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://GitHub.com/modelscope/modelscope/commit/&#34;&gt;&lt;img src=&#34;https://badgen.net/github/last-commit/modelscope/modelscope&#34; alt=&#34;GitHub latest commit&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.alibaba.com/contribution_leaderboard/details?projectValue=modelscope&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/ModelScope-Check%20Your%20Contribution-orange&#34; alt=&#34;Leaderboard&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;!-- [![GitHub contributors](https://img.shields.io/github/contributors/modelscope/modelscope.svg)](https://GitHub.com/modelscope/modelscope/graphs/contributors/) --&gt; &#xA; &lt;!-- [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com) --&gt; &#xA; &lt;h4 align=&#34;center&#34;&gt; &lt;p&gt; &lt;b&gt;English&lt;/b&gt; | &lt;a href=&#34;https://github.com/modelscope/modelscope/raw/master/README_zh.md&#34;&gt;中文&lt;/a&gt; &lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;/h4&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.modelscope.cn&#34;&gt;ModelScope&lt;/a&gt; is built upon the notion of “Model-as-a-Service” (MaaS). It seeks to bring together most advanced machine learning models from the AI community, and streamlines the process of leveraging AI models in real-world applications. The core ModelScope library open-sourced in this repository provides the interfaces and implementations that allow developers to perform model inference, training and evaluation.&lt;/p&gt; &#xA;&lt;p&gt;In particular, with rich layers of API-abstraction, the ModelScope library offers unified experience to explore state-of-the-art models spanning across domains such as CV, NLP, Speech, Multi-Modality, and Scientific-computation. Model contributors of different areas can integrate models into the ModelScope ecosystem through the layered-APIs, allowing easy and unified access to their models. Once integrated, model inference, fine-tuning, and evaluations can be done with only a few lines of codes. In the meantime, flexibilities are also provided so that different components in the model applications can be customized wherever necessary.&lt;/p&gt; &#xA;&lt;p&gt;Apart from harboring implementations of a wide range of different models, ModelScope library also enables the necessary interactions with ModelScope backend services, particularly with the Model-Hub and Dataset-Hub. Such interactions facilitate management of various entities (models and datasets) to be performed seamlessly under-the-hood, including entity lookup, version control, cache management, and many others.&lt;/p&gt; &#xA;&lt;h1&gt;Models and Online Accessibility&lt;/h1&gt; &#xA;&lt;p&gt;Hundreds of models are made publicly available on &lt;a href=&#34;https://www.modelscope.cn&#34;&gt;ModelScope&lt;/a&gt; (700+ and counting), covering the latest development in areas such as NLP, CV, Audio, Multi-modality, and AI for Science, etc. Many of these models represent the SOTA in their specific fields, and made their open-sourced debut on ModelScope. Users can visit ModelScope(&lt;a href=&#34;http://www.modelscope.cn&#34;&gt;modelscope.cn&lt;/a&gt;) and experience first-hand how these models perform via online experience, with just a few clicks. Immediate developer-experience is also possible through the ModelScope Notebook, which is backed by ready-to-use CPU/GPU development environment in the cloud - only one click away on &lt;a href=&#34;https://www.modelscope.cn&#34;&gt;ModelScope&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/modelscope/modelscope/master/data/resource/inference.gif&#34; width=&#34;1024&#34;&gt; &lt;br&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;Some representative examples include:&lt;/p&gt; &#xA;&lt;p&gt;NLP:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://modelscope.cn/models/damo/nlp_gpt3_text-generation_2.7B&#34;&gt;nlp_gpt3_text-generation_2.7B&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://modelscope.cn/models/ClueAI/ChatYuan-large&#34;&gt;ChatYuan-large&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://modelscope.cn/models/langboat/mengzi-t5-base&#34;&gt;mengzi-t5-base&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://modelscope.cn/models/damo/nlp_csanmt_translation_en2zh&#34;&gt;nlp_csanmt_translation_en2zh&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://modelscope.cn/models/damo/nlp_raner_named-entity-recognition_chinese-base-news&#34;&gt;nlp_raner_named-entity-recognition_chinese-base-news&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://modelscope.cn/models/damo/nlp_structbert_word-segmentation_chinese-base&#34;&gt;nlp_structbert_word-segmentation_chinese-base&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://modelscope.cn/models/fengshenbang/Erlangshen-RoBERTa-330M-Sentiment&#34;&gt;Erlangshen-RoBERTa-330M-Sentiment&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://modelscope.cn/models/damo/nlp_convai_text2sql_pretrain_cn&#34;&gt;nlp_convai_text2sql_pretrain_cn&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Multi-Modal:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://modelscope.cn/models/damo/multi-modal_clip-vit-base-patch16_zh&#34;&gt;multi-modal_clip-vit-base-patch16_zh&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://modelscope.cn/models/damo/ofa_pretrain_base_zh&#34;&gt;ofa_pretrain_base_zh&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://modelscope.cn/models/fengshenbang/Taiyi-Stable-Diffusion-1B-Chinese-v0.1&#34;&gt;Taiyi-Stable-Diffusion-1B-Chinese-v0.1&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://modelscope.cn/models/damo/mplug_visual-question-answering_coco_large_en&#34;&gt;mplug_visual-question-answering_coco_large_en&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;CV:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://modelscope.cn/models/dienstag/cv_controlnet_controllable-image-generation_nine-annotators/summary&#34;&gt;cv_controlnet_controllable-image-generation_nine-annotators&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://modelscope.cn/models/damo/cv_tinynas_object-detection_damoyolo&#34;&gt;cv_tinynas_object-detection_damoyolo&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://modelscope.cn/models/damo/cv_unet_person-image-cartoon_compound-models&#34;&gt;cv_unet_person-image-cartoon_compound-models&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://modelscope.cn/models/damo/cv_convnextTiny_ocr-recognition-general_damo&#34;&gt;cv_convnextTiny_ocr-recognition-general_damo&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://modelscope.cn/models/damo/cv_resnet18_human-detection&#34;&gt;cv_resnet18_human-detection&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://modelscope.cn/models/damo/cv_resnet50_face-detection_retinaface&#34;&gt;cv_resnet50_face-detection_retinaface&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://modelscope.cn/models/damo/cv_unet_image-matting&#34;&gt;cv_unet_image-matting&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://modelscope.cn/models/damo/cv_F3Net_product-segmentation&#34;&gt;cv_F3Net_product-segmentation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://modelscope.cn/models/damo/cv_resnest101_general_recognition&#34;&gt;cv_resnest101_general_recognition&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Audio:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://modelscope.cn/models/damo/speech_paraformer-large_asr_nat-zh-cn-16k-common-vocab8404-pytorch&#34;&gt;speech_paraformer-large_asr_nat-zh-cn-16k-common-vocab8404-pytorch&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://modelscope.cn/models/damo/speech_sambert-hifigan_tts_zh-cn_16k&#34;&gt;speech_sambert-hifigan_tts_zh-cn_16k&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://modelscope.cn/models/damo/speech_charctc_kws_phone-xiaoyun&#34;&gt;speech_charctc_kws_phone-xiaoyun&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://modelscope.cn/models/wenet/u2pp_conformer-asr-cn-16k-online&#34;&gt;u2pp_conformer-asr-cn-16k-online&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://modelscope.cn/models/damo/speech_fsmn_vad_zh-cn-16k-common-pytorch/summary&#34;&gt;speech_fsmn_vad_zh-cn-16k-common-pytorch&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://modelscope.cn/models/damo/punc_ct-transformer_zh-cn-common-vocab272727-pytorch/summary&#34;&gt;punc_ct-transformer_zh-cn-common-vocab272727-pytorch&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://modelscope.cn/models/damo/speech_frcrn_ans_cirm_16k&#34;&gt;speech_frcrn_ans_cirm_16k&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://modelscope.cn/models/damo/speech_dfsmn_aec_psm_16k&#34;&gt;speech_dfsmn_aec_psm_16k&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;AI for Science:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://modelscope.cn/models/DPTech/uni-fold-monomer/summary&#34;&gt;uni-fold-monomer&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://modelscope.cn/models/DPTech/uni-fold-multimer/summary&#34;&gt;uni-fold-multimer&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Most models on ModelScope are public and can be downloaded without account registration on modelscope website(&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/modelscope/master/www.modelscope.cn&#34;&gt;www.modelscope.cn&lt;/a&gt;), please refer to instructions for &lt;a href=&#34;https://modelscope.cn/docs/%E6%A8%A1%E5%9E%8B%E7%9A%84%E4%B8%8B%E8%BD%BD&#34;&gt;model download&lt;/a&gt;, for dowloading models with api provided by modelscope library or git.&lt;/p&gt; &#xA;&lt;h1&gt;QuickTour&lt;/h1&gt; &#xA;&lt;p&gt;We provide unified interface for inference using &lt;code&gt;pipeline&lt;/code&gt;, fine-tuning and evaluation using &lt;code&gt;Trainer&lt;/code&gt; for different tasks.&lt;/p&gt; &#xA;&lt;p&gt;For any given task with any type of input (image, text, audio, video...), inference pipeline can be implemented with only a few lines of code, which will automatically load the underlying model to get inference result, as is exemplified below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from modelscope.pipelines import pipeline&#xA;&amp;gt;&amp;gt;&amp;gt; word_segmentation = pipeline(&#39;word-segmentation&#39;,model=&#39;damo/nlp_structbert_word-segmentation_chinese-base&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; word_segmentation(&#39;今天天气不错，适合出去游玩&#39;)&#xA;{&#39;output&#39;: &#39;今天 天气 不错 ， 适合 出去 游玩&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Given an image, portrait matting (aka. background-removal) can be accomplished with the following code snippet:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/modelscope/modelscope/master/data/resource/portrait_input.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import cv2&#xA;&amp;gt;&amp;gt;&amp;gt; from modelscope.pipelines import pipeline&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; portrait_matting = pipeline(&#39;portrait-matting&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; result = portrait_matting(&#39;https://modelscope.oss-cn-beijing.aliyuncs.com/test/images/image_matting.png&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; cv2.imwrite(&#39;result.png&#39;, result[&#39;output_img&#39;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output image with the background removed is: &lt;img src=&#34;https://raw.githubusercontent.com/modelscope/modelscope/master/data/resource/portrait_output.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Fine-tuning and evaluation can also be done with a few more lines of code to set up training dataset and trainer, with the heavy-lifting work of training and evaluation a model encapsulated in the implementation of &lt;code&gt;traner.train()&lt;/code&gt; and &lt;code&gt;trainer.evaluate()&lt;/code&gt; interfaces.&lt;/p&gt; &#xA;&lt;p&gt;For example, the gpt3 base model (1.3B) can be fine-tuned with the chinese-poetry dataset, resulting in a model that can be used for chinese-poetry generation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from modelscope.metainfo import Trainers&#xA;&amp;gt;&amp;gt;&amp;gt; from modelscope.msdatasets import MsDataset&#xA;&amp;gt;&amp;gt;&amp;gt; from modelscope.trainers import build_trainer&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; train_dataset = MsDataset.load(&#39;chinese-poetry-collection&#39;, split=&#39;train&#39;). remap_columns({&#39;text1&#39;: &#39;src_txt&#39;})&#xA;&amp;gt;&amp;gt;&amp;gt; eval_dataset = MsDataset.load(&#39;chinese-poetry-collection&#39;, split=&#39;test&#39;).remap_columns({&#39;text1&#39;: &#39;src_txt&#39;})&#xA;&amp;gt;&amp;gt;&amp;gt; max_epochs = 10&#xA;&amp;gt;&amp;gt;&amp;gt; tmp_dir = &#39;./gpt3_poetry&#39;&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; kwargs = dict(&#xA;     model=&#39;damo/nlp_gpt3_text-generation_1.3B&#39;,&#xA;     train_dataset=train_dataset,&#xA;     eval_dataset=eval_dataset,&#xA;     max_epochs=max_epochs,&#xA;     work_dir=tmp_dir)&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; trainer = build_trainer(name=Trainers.gpt3_trainer, default_args=kwargs)&#xA;&amp;gt;&amp;gt;&amp;gt; trainer.train()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Why should I use ModelScope library&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;A unified and concise user interface is abstracted for different tasks and different models. Model inferences and training can be implemented by as few as 3 and 10 lines of code, respectively. It is convenient for users to explore models in different fields in the ModelScope community. All models integrated into ModelScope are ready to use, which makes it easy to get started with AI, in both educational and industrial settings.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ModelScope offers a model-centric development and application experience. It streamlines the support for model training, inference, export and deployment, and facilitates users to build their own MLOps based on the ModelScope ecosystem.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For the model inference and training process, a modular design is put in place, and a wealth of functional module implementations are provided, which is convenient for users to customize their own model inference, training and other processes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For distributed model training, especially for large models, it provides rich training strategy support, including data parallel, model parallel, hybrid parallel and so on.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;Docker&lt;/h2&gt; &#xA;&lt;p&gt;ModelScope Library currently supports popular deep learning framework for model training and inference, including PyTorch, TensorFlow and ONNX. All releases are tested and run on Python 3.7+, Pytorch 1.8+, Tensorflow1.15 or Tensorflow2.0+.&lt;/p&gt; &#xA;&lt;p&gt;To allow out-of-box usage for all the models on ModelScope, official docker images are provided for all releases. Based on the docker image, developers can skip all environment installation and configuration and use it directly. Currently, the latest version of the CPU image and GPU image can be obtained from:&lt;/p&gt; &#xA;&lt;p&gt;CPU docker image&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# py37&#xA;registry.cn-hangzhou.aliyuncs.com/modelscope-repo/modelscope:ubuntu20.04-py37-torch1.11.0-tf1.15.5-1.6.1&#xA;&#xA;# py38&#xA;registry.cn-hangzhou.aliyuncs.com/modelscope-repo/modelscope:ubuntu20.04-py38-torch1.11.0-tf1.15.5-1.6.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GPU docker image&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# py37&#xA;registry.cn-hangzhou.aliyuncs.com/modelscope-repo/modelscope:ubuntu20.04-cuda11.3.0-py37-torch1.11.0-tf1.15.5-1.6.1&#xA;&#xA;# py38&#xA;registry.cn-hangzhou.aliyuncs.com/modelscope-repo/modelscope:ubuntu20.04-cuda11.3.0-py38-torch1.11.0-tf1.15.5-1.6.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup Local Python Environment&lt;/h2&gt; &#xA;&lt;p&gt;One can also set up local ModelScope environment using pip and conda. We suggest &lt;a href=&#34;https://docs.anaconda.com/anaconda/install/&#34;&gt;anaconda&lt;/a&gt; for creating local python environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;conda create -n modelscope python=3.7&#xA;conda activate modelscope&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;PyTorch or TensorFlow can be installed separately according to each model&#39;s requirements.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install pytorch &lt;a href=&#34;https://pytorch.org/get-started/locally/&#34;&gt;doc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install tensorflow &lt;a href=&#34;https://www.tensorflow.org/install/pip&#34;&gt;doc&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After installing the necessary machine-learning framework, you can install modelscope library as follows:&lt;/p&gt; &#xA;&lt;p&gt;If you only want to play around with the modelscope framework, of trying out model/dataset download, you can install the core modelscope components:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install modelscope&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use multi-modal models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install modelscope[multi-modal]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use nlp models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install modelscope[nlp] -f https://modelscope.oss-cn-beijing.aliyuncs.com/releases/repo.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use cv models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install modelscope[cv] -f https://modelscope.oss-cn-beijing.aliyuncs.com/releases/repo.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use audio models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install modelscope[audio] -f https://modelscope.oss-cn-beijing.aliyuncs.com/releases/repo.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use science models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install modelscope[science] -f https://modelscope.oss-cn-beijing.aliyuncs.com/releases/repo.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Notes&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Currently, some audio-task models only support python3.7, tensorflow1.15.4 Linux environments. Most other models can be installed and used on Windows and Mac (x86).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Some models in the audio field use the third-party library SoundFile for wav file processing. On the Linux system, users need to manually install libsndfile of SoundFile(&lt;a href=&#34;https://github.com/bastibe/python-soundfile#installation&#34;&gt;doc link&lt;/a&gt;). On Windows and MacOS, it will be installed automatically without user operation. For example, on Ubuntu, you can use following commands:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt-get update&#xA;sudo apt-get install libsndfile1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Some models in computer vision need mmcv-full, you can refer to mmcv &lt;a href=&#34;https://github.com/open-mmlab/mmcv#installation&#34;&gt;installation guide&lt;/a&gt;, a minimal installation is as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip uninstall mmcv # if you have installed mmcv, uninstall it&#xA;pip install -U openmim&#xA;mim install mmcv-full&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Learn More&lt;/h1&gt; &#xA;&lt;p&gt;We provide additional documentations including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://modelscope.cn/docs/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85&#34;&gt;More detailed Installation Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://modelscope.cn/docs/%E4%BB%BB%E5%8A%A1%E7%9A%84%E4%BB%8B%E7%BB%8D&#34;&gt;Introduction to tasks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://modelscope.cn/docs/%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%8E%A8%E7%90%86Pipeline&#34;&gt;Use pipeline for model inference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://modelscope.cn/docs/%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%AE%AD%E7%BB%83Train&#34;&gt;Finetuning example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://modelscope.cn/docs/%E6%95%B0%E6%8D%AE%E7%9A%84%E9%A2%84%E5%A4%84%E7%90%86&#34;&gt;Preprocessing of data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://modelscope.cn/docs/%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%AF%84%E4%BC%B0&#34;&gt;Evaluation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://modelscope.cn/docs/ModelScope%E6%A8%A1%E5%9E%8B%E6%8E%A5%E5%85%A5%E6%B5%81%E7%A8%8B%E6%A6%82%E8%A7%88&#34;&gt;Contribute your own model to ModelScope&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://github.com/modelscope/modelscope/raw/master/LICENSE&#34;&gt;Apache License (Version 2.0)&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>