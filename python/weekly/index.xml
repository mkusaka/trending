<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-11T01:45:28Z</updated>
  <subtitle>Weekly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mxrch/GHunt</title>
    <updated>2022-12-11T01:45:28Z</updated>
    <id>tag:github.com,2022-12-11:/mxrch/GHunt</id>
    <link href="https://github.com/mxrch/GHunt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üïµÔ∏è‚Äç‚ôÇÔ∏è Offensive Google framework.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mxrch/GHunt/master/assets/long_banner.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/Python-3.10%2B-brightgreen&#34; alt=&#34;Python minimum version&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;üòä Description&lt;/h1&gt; &#xA;&lt;p&gt;GHunt (v2) is an offensive Google framework, designed to evolve efficiently.&lt;br&gt; It&#39;s currently focused on OSINT, but any use related with Google is possible.&lt;/p&gt; &#xA;&lt;p&gt;Features :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CLI usage and modules&lt;/li&gt; &#xA; &lt;li&gt;Python library usage&lt;/li&gt; &#xA; &lt;li&gt;Fully async&lt;/li&gt; &#xA; &lt;li&gt;JSON export&lt;/li&gt; &#xA; &lt;li&gt;Browser extension to ease login&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;‚úîÔ∏è Requirements&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python &amp;gt;= 3.10&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;‚öôÔ∏è Installation&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pip3 install pipx&#xA;$ pipx ensurepath&#xA;$ pipx install ghunt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will automatically use venvs to avoid dependency conflicts with other projects.&lt;/p&gt; &#xA;&lt;h1&gt;üíÉ Usage&lt;/h1&gt; &#xA;&lt;h2&gt;Login&lt;/h2&gt; &#xA;&lt;p&gt;First, launch the listener by doing &lt;code&gt;ghunt login&lt;/code&gt; and choose between 1 of the 2 first methods :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ghunt login&#xA;&#xA;[1] (Companion) Put GHunt on listening mode (currently not compatible with docker)&#xA;[2] (Companion) Paste base64-encoded cookies&#xA;[3] Enter manually all cookies&#xA;&#xA;Choice =&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, use GHunt Companion to complete the login.&lt;/p&gt; &#xA;&lt;p&gt;The extension is available on the following stores :&lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/ghunt-companion/&#34;&gt;&lt;img src=&#34;https://files.catbox.moe/5g2ld5.png&#34; alt=&#34;Firefox&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://chrome.google.com/webstore/detail/ghunt-companion/dpdcofblfbmmnikcbmmiakkclocadjab&#34;&gt;&lt;img src=&#34;https://storage.googleapis.com/web-dev-uploads/image/WlD8wC6g8khYWPJUsQceQkhXSlv1/UV4C4ybeBTsZt43U4xis.png&#34; alt=&#34;Chrome&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Modules&lt;/h2&gt; &#xA;&lt;p&gt;Then, profit :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;usage: ghunt [-h] {login,email,gaia,drive} ...&#xA;&#xA;positional arguments:&#xA;  {login,email,gaia,drive}&#xA;    login   (--clean)         Authenticate GHunt to Google.&#xA;    email   (--json)          Get information on an email address.&#xA;    gaia    (--json)          Get information on a Gaia ID.&#xA;    drive   (--json)          Get information on a Drive file or folder.&#xA;&#xA;options:&#xA;  -h, --help            show this help message and exit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;üìÑ You can also use --json with email, gaia and drive modules to export in JSON ! Example :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ghunt email &amp;lt;email_address&amp;gt; --json user_data.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Have fun ü•∞üíû&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;üßë‚Äçüíª Developers&lt;/h1&gt; &#xA;&lt;p&gt;üìï I started writing some docs &lt;a href=&#34;https://github.com/mxrch/GHunt/wiki&#34;&gt;here&lt;/a&gt; and examples &lt;a href=&#34;https://github.com/mxrch/GHunt/tree/master/examples&#34;&gt;here&lt;/a&gt;, feel free to contribute !&lt;/p&gt; &#xA;&lt;p&gt;To use GHunt as a lib, you can&#39;t use pipx because it uses a venv.&lt;br&gt; So you should install GHunt with pip :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pip3 install ghunt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And now, you should be able to &lt;code&gt;import ghunt&lt;/code&gt; in your projects !&lt;br&gt; You can right now play with the &lt;a href=&#34;https://github.com/mxrch/GHunt/tree/master/examples&#34;&gt;examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;üìÆ Details&lt;/h1&gt; &#xA;&lt;h2&gt;Obvious disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This tool is for educational purposes only, I am not responsible for its use.&lt;/p&gt; &#xA;&lt;h2&gt;Less obvious disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This project is under &lt;a href=&#34;https://choosealicense.com/licenses/agpl-3.0/&#34;&gt;AGPL Licence&lt;/a&gt;, and you have to respect it.&lt;br&gt; &lt;strong&gt;Use it only in personal, criminal investigations, pentesting, or open-source projects.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/novitae&#34;&gt;novitae&lt;/a&gt; for being my Python colleague&lt;/li&gt; &#xA; &lt;li&gt;All the people on &lt;a href=&#34;https://discord.gg/sg2YcrC6x9&#34;&gt;Malfrats Industries&lt;/a&gt; and elsewhere for the beta test !&lt;/li&gt; &#xA; &lt;li&gt;The HideAndSec team üíó (blog : &lt;a href=&#34;https://hideandsec.sh&#34;&gt;https://hideandsec.sh&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dribbble.com/jouiniamine&#34;&gt;Med Amine Jouini&lt;/a&gt; for his beautiful rework of the Google logo, which I was inspired by &lt;em&gt;a lot&lt;/em&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to these awesome people for supporting me !&lt;/p&gt; &#xA;&lt;!-- sponsors --&gt;&#xA;&lt;a href=&#34;https://github.com/elweth-sec&#34;&gt;&lt;img src=&#34;https://github.com/elweth-sec.png&#34; width=&#34;50px&#34; alt=&#34;elweth-sec&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&#xA;&lt;a href=&#34;https://github.com/BlWasp&#34;&gt;&lt;img src=&#34;https://github.com/BlWasp.png&#34; width=&#34;50px&#34; alt=&#34;BlWasp&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&#xA;&lt;a href=&#34;https://github.com/pl4nty&#34;&gt;&lt;img src=&#34;https://github.com/pl4nty.png&#34; width=&#34;50px&#34; alt=&#34;pl4nty&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&#xA;&lt;a href=&#34;https://github.com/0xN0x&#34;&gt;&lt;img src=&#34;https://github.com/0xN0x.png&#34; width=&#34;50px&#34; alt=&#34;0xN0x&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&#xA;&lt;a href=&#34;https://github.com/C3n7ral051nt4g3ncy&#34;&gt;&lt;img src=&#34;https://github.com/C3n7ral051nt4g3ncy.png&#34; width=&#34;50px&#34; alt=&#34;C3n7ral051nt4g3ncy&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&#xA;&lt;a href=&#34;https://github.com/rayanlecat&#34;&gt;&lt;img src=&#34;https://github.com/rayanlecat.png&#34; width=&#34;50px&#34; alt=&#34;rayanlecat&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&#xA;&lt;a href=&#34;https://github.com/ajmeese7&#34;&gt;&lt;img src=&#34;https://github.com/ajmeese7.png&#34; width=&#34;50px&#34; alt=&#34;ajmeese7&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&#xA;&lt;!-- sponsors --&gt; &#xA;&lt;p&gt;&lt;br&gt; You like my work ?&lt;br&gt; &lt;a href=&#34;https://github.com/sponsors/mxrch&#34;&gt;Sponsor me&lt;/a&gt; on GitHub ! ü§ó&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>t3l3machus/Villain</title>
    <updated>2022-12-11T01:45:28Z</updated>
    <id>tag:github.com,2022-12-11:/t3l3machus/Villain</id>
    <link href="https://github.com/t3l3machus/Villain" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Villain is a Windows &amp; Linux backdoor generator and multi-session handler that allows users to connect with sibling servers (other machines running Villain) and share their backdoor sessions, handy for working as a team.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Villain&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.python.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Python-%E2%89%A5%203.6-yellow.svg?sanitize=true&#34; alt=&#34;Python&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/PowerShell-%E2%89%A5%20v3.0-blue&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Developed%20on-kali%20linux-blueviolet&#34;&gt; &lt;a href=&#34;https://github.com/t3l3machus/Villain/raw/main/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-CC%20Attr--NonCommercial%204.0-red&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/Maintained%3F-Yes-96c40f&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Purpose&lt;/h2&gt; &#xA;&lt;p&gt;Villain is a Windows &amp;amp; Linux backdoor generator and multi-session handler that allows users to connect with sibling servers (other machines running Villain) and share their backdoor sessions, handy for working as a team.&lt;/p&gt; &#xA;&lt;p&gt;The main idea behind the payloads generated by this tool is inherited from &lt;a href=&#34;https://github.com/t3l3machus/hoaxshell&#34;&gt;HoaxShell&lt;/a&gt;. One could say that Villain is an evolved, steroid-induced version of it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;‚ö°&lt;/span&gt; &lt;strong&gt;This is an early release currently being tested.&lt;/strong&gt;&lt;br&gt; ‚ö†Ô∏è &lt;strong&gt;If you are having detection issues, watch this video on &lt;a href=&#34;https://www.youtube.com/watch?v=FVbdZSGkzhs&#34;&gt;how to bypass signature-based detection&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;span&gt;üêà&lt;/span&gt; &lt;strong&gt;Check out the new BETA feature: &lt;a href=&#34;https://www.youtube.com/watch?v=8cVyrBSy0zo&#34;&gt;Netcat multi-session handler&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Video Presentation&lt;/h3&gt; &#xA;&lt;p&gt;[2022-11-30] Recent &amp;amp; awesome, made by John Hammond -&amp;gt; &lt;a href=&#34;https://www.youtube.com/watch?v=pTUggbSCqA0&#34;&gt;youtube.com/watch?v=pTUggbSCqA0&lt;/a&gt;&lt;br&gt; [2022-11-14] Original release demo, made by me -&amp;gt; &lt;a href=&#34;https://www.youtube.com/watch?v=NqZEmBsLCvQ&#34;&gt;youtube.com/watch?v=NqZEmBsLCvQ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: Running the payloads generated by this tool against hosts that you do not have explicit permission to test is illegal. You are responsible for any trouble you may cause by using this tool.&lt;/p&gt; &#xA;&lt;h2&gt;Preview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/75489922/201544082-e1233421-f319-47b5-9e5e-d95647026dc0.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation &amp;amp; Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/t3l3machus/Villain&#xA;cd ./Villain&#xA;pip3 install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should run as root:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Villain.py [-h] [-p PORT] [-x HOAX_PORT] [-c CERTFILE] [-k KEYFILE] [-u] [-q]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information about using Villain check out the &lt;a href=&#34;https://github.com/t3l3machus/Villain/raw/main/Usage_Guide.md&#34;&gt;Usage Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Important Notes&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Villain has a built-in auto-obfuscate payload function to assist users in bypassing AV solutions (for Windows payloads). As a result, payloads are undetected (for the time being).&lt;/li&gt; &#xA; &lt;li&gt;Each generated payload is going to work only once. An already used payload cannot be reused to establish a session.&lt;/li&gt; &#xA; &lt;li&gt;The communication between sibling servers is AES encrypted using the recipient sibling server&#39;s ID as the encryption KEY and the 16 first bytes of the local server&#39;s ID as IV. During the initial connection handshake of two sibling servers, each server&#39;s ID is exchanged clear text, meaning that the handshake could be captured and used to decrypt traffic between sibling servers. I know it&#39;s &#34;weak&#34; that way. It&#39;s not supposed to be super secure as this tool was designed to be used during penetration testing / red team assessments, for which this encryption schema should be enough.&lt;/li&gt; &#xA; &lt;li&gt;Villain instances connected with each other (sibling servers) must be able to directly reach each other as well. I intend to add a network route mapping utility so that sibling servers can use one another as a proxy to achieve cross network communication between them.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Approach&lt;/h2&gt; &#xA;&lt;p&gt;A few notes about the http(s) beacon-like reverse shell approach: &lt;img src=&#34;https://user-images.githubusercontent.com/75489922/201542083-68280123-6ea0-4653-b129-3124ad9bb041.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Limitations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A backdoor shell is going to hang if you execute a command that initiates an interactive session. For more information &lt;a href=&#34;https://github.com/t3l3machus/hoaxshell#Limitations&#34;&gt;read this&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Advantages&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When it comes to Windows, the generated payloads can run even in PowerShell constraint Language Mode.&lt;/li&gt; &#xA; &lt;li&gt;The generated payloads can run even by users with limited privileges.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests are generally welcome. Please, keep in mind: I am constantly working on new offsec tools as well as maintaining several existing ones. I rarely accept pull requests because I either have a plan for the course of a project or I evaluate that it would be hard to test and/or maintain the foreign code. It doesn&#39;t have to do with how good or bad is an idea, it&#39;s just too much work and also, I am kind of developing all these tools to learn myself.&lt;/p&gt; &#xA;&lt;p&gt;There are parts of this project that were removed before publishing because I considered them to be buggy or hard to maintain (at this early stage). If you have an idea for an addition that comes with a significant chunk of code, I suggest you first contact me to discuss if there&#39;s something similar already in the making, before making a PR.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>openai/baselines</title>
    <updated>2022-12-11T01:45:28Z</updated>
    <id>tag:github.com,2022-12-11:/openai/baselines</id>
    <link href="https://github.com/openai/baselines" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenAI Baselines: high-quality implementations of reinforcement learning algorithms&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;Status:&lt;/strong&gt; Maintenance (expect bug fixes and minor updates)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/openai/baselines/master/data/logo.jpg&#34; width=&#34;25%&#34; align=&#34;right&#34;&gt; &lt;a href=&#34;https://travis-ci.org/openai/baselines&#34;&gt;&lt;img src=&#34;https://travis-ci.org/openai/baselines.svg?branch=master&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Baselines&lt;/h1&gt; &#xA;&lt;p&gt;OpenAI Baselines is a set of high-quality implementations of reinforcement learning algorithms.&lt;/p&gt; &#xA;&lt;p&gt;These algorithms will make it easier for the research community to replicate, refine, and identify new ideas, and will create good baselines to build research on top of. Our DQN implementation and its variants are roughly on par with the scores in published papers. We expect they will be used as a base around which new ideas can be added, and as a tool for comparing a new approach against existing ones.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;Baselines requires python3 (&amp;gt;=3.5) with the development headers. You&#39;ll also need system packages CMake, OpenMPI and zlib. Those can be installed as follows&lt;/p&gt; &#xA;&lt;h3&gt;Ubuntu&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install cmake libopenmpi-dev python3-dev zlib1g-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mac OS X&lt;/h3&gt; &#xA;&lt;p&gt;Installation of system packages on Mac requires &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;. With Homebrew installed, run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install cmake openmpi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Virtual environment&lt;/h2&gt; &#xA;&lt;p&gt;From the general python package sanity perspective, it is a good idea to use virtual environments (virtualenvs) to make sure packages from different projects do not interfere with each other. You can install virtualenv (which is itself a pip package) via&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install virtualenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Virtualenvs are essentially folders that have copies of python executable and all python packages. To create a virtualenv called venv with python3, one runs&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;virtualenv /path/to/venv --python=python3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To activate a virtualenv:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;. /path/to/venv/bin/activate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More thorough tutorial on virtualenvs and options can be found &lt;a href=&#34;https://virtualenv.pypa.io/en/stable/&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Tensorflow versions&lt;/h2&gt; &#xA;&lt;p&gt;The master branch supports Tensorflow from version 1.4 to 1.14. For Tensorflow 2.0 support, please use tf2 branch.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repo and cd into it:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/openai/baselines.git&#xA;cd baselines&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you don&#39;t have TensorFlow installed already, install your favourite flavor of TensorFlow. In most cases, you may use&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install tensorflow-gpu==1.14 # if you have a CUDA-compatible gpu and proper drivers&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install tensorflow==1.14&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;to install Tensorflow 1.14, which is the latest version of Tensorflow supported by the master branch. Refer to &lt;a href=&#34;https://www.tensorflow.org/install/&#34;&gt;TensorFlow installation guide&lt;/a&gt; for more details.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install baselines package&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;MuJoCo&lt;/h3&gt; &#xA;&lt;p&gt;Some of the baselines examples use &lt;a href=&#34;http://www.mujoco.org&#34;&gt;MuJoCo&lt;/a&gt; (multi-joint dynamics in contact) physics simulator, which is proprietary and requires binaries and a license (temporary 30-day license can be obtained from &lt;a href=&#34;http://www.mujoco.org&#34;&gt;www.mujoco.org&lt;/a&gt;). Instructions on setting up MuJoCo can be found &lt;a href=&#34;https://github.com/openai/mujoco-py&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Testing the installation&lt;/h2&gt; &#xA;&lt;p&gt;All unit tests in baselines can be run using pytest runner:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install pytest&#xA;pytest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Training models&lt;/h2&gt; &#xA;&lt;p&gt;Most of the algorithms in baselines repo are used as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m baselines.run --alg=&amp;lt;name of the algorithm&amp;gt; --env=&amp;lt;environment_id&amp;gt; [additional arguments]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example 1. PPO with MuJoCo Humanoid&lt;/h3&gt; &#xA;&lt;p&gt;For instance, to train a fully-connected network controlling MuJoCo humanoid using PPO2 for 20M timesteps&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m baselines.run --alg=ppo2 --env=Humanoid-v2 --network=mlp --num_timesteps=2e7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that for mujoco environments fully-connected network is default, so we can omit &lt;code&gt;--network=mlp&lt;/code&gt; The hyperparameters for both network and the learning algorithm can be controlled via the command line, for instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m baselines.run --alg=ppo2 --env=Humanoid-v2 --network=mlp --num_timesteps=2e7 --ent_coef=0.1 --num_hidden=32 --num_layers=3 --value_network=copy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will set entropy coefficient to 0.1, and construct fully connected network with 3 layers with 32 hidden units in each, and create a separate network for value function estimation (so that its parameters are not shared with the policy network, but the structure is the same)&lt;/p&gt; &#xA;&lt;p&gt;See docstrings in &lt;a href=&#34;https://raw.githubusercontent.com/openai/baselines/master/baselines/common/models.py&#34;&gt;common/models.py&lt;/a&gt; for description of network parameters for each type of model, and docstring for &lt;a href=&#34;https://raw.githubusercontent.com/openai/baselines/master/baselines/ppo2/ppo2.py#L152&#34;&gt;baselines/ppo2/ppo2.py/learn()&lt;/a&gt; for the description of the ppo2 hyperparameters.&lt;/p&gt; &#xA;&lt;h3&gt;Example 2. DQN on Atari&lt;/h3&gt; &#xA;&lt;p&gt;DQN with Atari is at this point a classics of benchmarks. To run the baselines implementation of DQN on Atari Pong:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -m baselines.run --alg=deepq --env=PongNoFrameskip-v4 --num_timesteps=1e6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Saving, loading and visualizing models&lt;/h2&gt; &#xA;&lt;h3&gt;Saving and loading the model&lt;/h3&gt; &#xA;&lt;p&gt;The algorithms serialization API is not properly unified yet; however, there is a simple method to save / restore trained models. &lt;code&gt;--save_path&lt;/code&gt; and &lt;code&gt;--load_path&lt;/code&gt; command-line option loads the tensorflow state from a given path before training, and saves it after the training, respectively. Let&#39;s imagine you&#39;d like to train ppo2 on Atari Pong, save the model and then later visualize what has it learnt.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m baselines.run --alg=ppo2 --env=PongNoFrameskip-v4 --num_timesteps=2e7 --save_path=~/models/pong_20M_ppo2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should get to the mean reward per episode about 20. To load and visualize the model, we&#39;ll do the following - load the model, train it for 0 steps, and then visualize:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m baselines.run --alg=ppo2 --env=PongNoFrameskip-v4 --num_timesteps=0 --load_path=~/models/pong_20M_ppo2 --play&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; Mujoco environments require normalization to work properly, so we wrap them with VecNormalize wrapper. Currently, to ensure the models are saved with normalization (so that trained models can be restored and run without further training) the normalization coefficients are saved as tensorflow variables. This can decrease the performance somewhat, so if you require high-throughput steps with Mujoco and do not need saving/restoring the models, it may make sense to use numpy normalization instead. To do that, set &#39;use_tf=False` in &lt;a href=&#34;https://raw.githubusercontent.com/openai/baselines/master/baselines/run.py#L116&#34;&gt;baselines/run.py&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Logging and vizualizing learning curves and other training metrics&lt;/h3&gt; &#xA;&lt;p&gt;By default, all summary data, including progress, standard output, is saved to a unique directory in a temp folder, specified by a call to Python&#39;s &lt;a href=&#34;https://docs.python.org/3/library/tempfile.html#tempfile.gettempdir&#34;&gt;tempfile.gettempdir()&lt;/a&gt;. The directory can be changed with the &lt;code&gt;--log_path&lt;/code&gt; command-line option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m baselines.run --alg=ppo2 --env=PongNoFrameskip-v4 --num_timesteps=2e7 --save_path=~/models/pong_20M_ppo2 --log_path=~/logs/Pong/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; Please be aware that the logger will overwrite files of the same name in an existing directory, thus it&#39;s recommended that folder names be given a unique timestamp to prevent overwritten logs.&lt;/p&gt; &#xA;&lt;p&gt;Another way the temp directory can be changed is through the use of the &lt;code&gt;$OPENAI_LOGDIR&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;p&gt;For examples on how to load and display the training data, see &lt;a href=&#34;https://raw.githubusercontent.com/openai/baselines/master/docs/viz/viz.ipynb&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Subpackages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/baselines/master/baselines/a2c&#34;&gt;A2C&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/baselines/master/baselines/acer&#34;&gt;ACER&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/baselines/master/baselines/acktr&#34;&gt;ACKTR&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/baselines/master/baselines/ddpg&#34;&gt;DDPG&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/baselines/master/baselines/deepq&#34;&gt;DQN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/baselines/master/baselines/gail&#34;&gt;GAIL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/baselines/master/baselines/her&#34;&gt;HER&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/baselines/master/baselines/ppo1&#34;&gt;PPO1&lt;/a&gt; (obsolete version, left here temporarily)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/baselines/master/baselines/ppo2&#34;&gt;PPO2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/baselines/master/baselines/trpo_mpi&#34;&gt;TRPO&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;Results of benchmarks on Mujoco (1M timesteps) and Atari (10M timesteps) are available &lt;a href=&#34;https://htmlpreview.github.com/?https://github.com/openai/baselines/raw/master/benchmarks_mujoco1M.htm&#34;&gt;here for Mujoco&lt;/a&gt; and &lt;a href=&#34;https://htmlpreview.github.com/?https://github.com/openai/baselines/raw/master/benchmarks_atari10M.htm&#34;&gt;here for Atari&lt;/a&gt; respectively. Note that these results may be not on the latest version of the code, particular commit hash with which results were obtained is specified on the benchmarks page.&lt;/p&gt; &#xA;&lt;p&gt;To cite this repository in publications:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{baselines,&#xA;  author = {Dhariwal, Prafulla and Hesse, Christopher and Klimov, Oleg and Nichol, Alex and Plappert, Matthias and Radford, Alec and Schulman, John and Sidor, Szymon and Wu, Yuhuai and Zhokhov, Peter},&#xA;  title = {OpenAI Baselines},&#xA;  year = {2017},&#xA;  publisher = {GitHub},&#xA;  journal = {GitHub repository},&#xA;  howpublished = {\url{https://github.com/openai/baselines}},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>