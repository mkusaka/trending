<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-18T01:49:06Z</updated>
  <subtitle>Weekly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rawandahmad698/PyChatGPT</title>
    <updated>2022-12-18T01:49:06Z</updated>
    <id>tag:github.com,2022-12-18:/rawandahmad698/PyChatGPT</id>
    <link href="https://github.com/rawandahmad698/PyChatGPT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‚ö°Ô∏è Python client for the unofficial ChatGPT API with auto token regeneration, conversation tracking, proxy support and more.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Update December 14, 2022&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://media.discordapp.net/attachments/1052243530627686410/1052571173407445142/gpt.png&#34; alt=&#34;Image&#34;&gt; &lt;strong&gt;THE NEW CHATGPT API&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Since they introduced Cloudflare on December 12. I have been trying to reverse engineer their new method. By first bypassing their Cloudflare page. When I was done, they Introduced Google reCAPTCHA when logging in, this made stuff a bit more complicated. So many things could go wrong in a 12 step process.&lt;/p&gt; &#xA;&lt;p&gt;I finally did it. It‚Äôs all done. I was unsure about publishing the code though. Because if they could patch the first one, they can definitely patch this new one. And I‚Äôd like to tell you. THEY ARE WATCHING.&lt;/p&gt; &#xA;&lt;p&gt;So I found a way to let you guys access their API without the overhead of Installing, Running code. We have an API now, You just make a GET request to the endpoint and It‚Äôll return the ChatGPT response.&lt;/p&gt; &#xA;&lt;p&gt;Behind the scenes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I solve the captcha for you&lt;/li&gt; &#xA; &lt;li&gt;I bypass Cloudflare&lt;/li&gt; &#xA; &lt;li&gt;I manage accounts&lt;/li&gt; &#xA; &lt;li&gt;I rotate Cloudflare keys/ Access Tokens&lt;/li&gt; &#xA; &lt;li&gt;I manage code dependencies, and make sure the code is up-to-date, and have the ability to fix the code in case they change their code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;While you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Just make a GET request to an endpoint&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I plan on allowing the same level of customization as PyChatGPT. ‚Ä®‚Ä®I‚Äôm running all of this on AWS, On money from my pocket. And the total cost is near $80 for a month. While we‚Äôre in a waitlist based model, I‚Äôll maintain all the costs myself. ‚Ä®&lt;/p&gt; &#xA;&lt;h5&gt;Go ahead and write ‚ÄúI want access‚Äù on #waitlist (First **2-8 ** people will be selected for the initial tryout)&lt;/h5&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/Z2fpFKPE4j&#34;&gt;Waitlist on Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;üî• PyChatGPT&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rawandahmad698/PyChatGPT/discussions/103&#34;&gt;Read More - How OpenAI filters requests made by bots/scrapers&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://img.shields.io/badge/python-3.8-blue.svg&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/python-3.8-blue.svg?sanitize=true&#34; alt=&#34;Python&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.python.org/pypi/chatgptpy&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/chatgptpy.svg?sanitize=true&#34; alt=&#34;PyPi&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.python.org/pypi/chatgptpy&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/chatgptpy.svg?sanitize=true&#34; alt=&#34;PyPi&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;‚≠êÔ∏è Like this repo? please star &amp;amp; consider donating to keep it maintained&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/rawandahmed&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 60px !important;width: 217px !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;üí° If OpenAI change their API, I will fix it as soon as possible, so &lt;mark&gt;Watch&lt;/mark&gt; the repo if you want to be notified&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Save Conversations to a file&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Resume conversations even after closing the program&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Proxy Support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Automatically login without involving a browser&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Automatically grab Access Token&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Get around the login &lt;strong&gt;captcha&lt;/strong&gt; (If you try to log in subsequently, you will be prompted to solve a captcha)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Saves the access token to a file, so you don&#39;t have to log in again&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Automatically refreshes the access token when it expires&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Uses colorama to colorize the output, because why not?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Smart Conversation Tracking&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Web Demo&lt;/h2&gt; &#xA;&lt;p&gt;Integrated into &lt;a href=&#34;https://huggingface.co/spaces&#34;&gt;Huggingface Spaces ü§ó&lt;/a&gt; using &lt;a href=&#34;https://github.com/gradio-app/gradio&#34;&gt;Gradio&lt;/a&gt;. Try out the Web Demo&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://huggingface.co/spaces/yizhangliu/chatGPT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Chatting&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://media.discordapp.net/attachments/1038565125482881027/1049255804366237736/image.png&#34; alt=&#34;Screenshot 1&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Creating a token&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://media.discordapp.net/attachments/1038565125482881027/1049072247442264094/image.png?width=2468&amp;amp;height=885&#34; alt=&#34;Screenshot 2&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;You: Hi there, My name is Rawa&#xA;Chat GPT: Hello Rawa, nice to meet you. Is there something you would like to talk about or ask me? I&#39;m here to help with any questions you may have.&#xA;You: great, now say my name like Heisenberg&#xA;Chat GPT: Sure, Rawa like Heisenberg. Is there anything else you would like to talk about? I&#39;m here to help with any questions you may have.&#xA;You: Sorry I meant like the episode of Breaking Bad where Walter White says Heisenberg&#xA;Chat GPT: Ah, I see. In that case, you could try saying it like this: &#34;My name is Rawa, like Heisenberg.&#34; This is a reference to the character Walter White from the TV show Breaking Bad, who often used the pseudonym &#34;Heisenberg&#34; when conducting illegal activities. The character was known for his cool and calculated demeanor, so saying your name like Heisenberg in this context would mean saying it with confidence and authority.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install chatgptpy --upgrade&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;[&lt;strong&gt;NEW&lt;/strong&gt;] Pass a &lt;code&gt;options()&lt;/code&gt; object to the &lt;code&gt;ChatGPT()&lt;/code&gt; constructor to customize the session&lt;/p&gt; &#xA;&lt;p&gt;[&lt;strong&gt;NEW&lt;/strong&gt;] You can now save your conversations to a file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pychatgpt import Chat, Options&#xA;&#xA;options = Options()&#xA;&#xA;# [New] Pass Moderation. https://github.com/rawandahmad698/PyChatGPT/discussions/103&#xA;# options.pass_moderation = False&#xA;&#xA;# [New] Enable, Disable logs&#xA;options.log = True&#xA;&#xA;# Track conversation&#xA;options.track = True &#xA;&#xA;# Use a proxy&#xA;options.proxies = &#39;http://localhost:8080&#39;&#xA;&#xA;# Optionally, you can pass a file path to save the conversation&#xA;# They&#39;re created if they don&#39;t exist&#xA;&#xA;# options.chat_log = &#34;chat_log.txt&#34;&#xA;# options.id_log = &#34;id_log.txt&#34;&#xA;&#xA;# Create a Chat object&#xA;chat = Chat(email=&#34;email&#34;, password=&#34;password&#34;, options=options)&#xA;answer = chat.ask(&#34;How are you?&#34;)&#xA;print(answer)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;[&lt;strong&gt;NEW&lt;/strong&gt;] Resume a conversation&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pychatgpt import Chat&#xA;&#xA;# Create a Chat object&#xA;chat = Chat(email=&#34;email&#34;, password=&#34;password&#34;, &#xA;            conversation_id=&#34;Parent Conversation ID&#34;, &#xA;            previous_convo_id=&#34;Previous Conversation ID&#34;)&#xA;&#xA;answer, parent_conversation_id, conversation_id = chat.ask(&#34;How are you?&#34;)&#xA;&#xA;print(answer)&#xA;&#xA;# Or change the conversation id later&#xA;answer, _, _ = chat.ask(&#34;How are you?&#34;, &#xA;                        previous_convo_id=&#34;Parent Conversation ID&#34;,&#xA;                        conversation_id=&#34;Previous Conversation ID&#34;)&#xA;print(answer)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start a CLI Session&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pychatgpt import Chat&#xA;&#xA;chat = Chat(email=&#34;email&#34;, password=&#34;password&#34;)&#xA;chat.cli_chat()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ask a one time question&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pychatgpt import Chat&#xA;&#xA;# Initializing the chat class will automatically log you in, check access_tokens&#xA;chat = Chat(email=&#34;email&#34;, password=&#34;password&#34;) &#xA;answer, parent_conversation_id, conversation_id = chat.ask(&#34;Hello!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;You could also manually set, get the token&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import time&#xA;from pychatgpt import OpenAI&#xA;&#xA;# Manually set the token&#xA;OpenAI.Auth(email_address=&#34;email&#34;, password=&#34;password&#34;).save_access_token(access_token=&#34;&#34;, expiry=time.time() + 3600)&#xA;&#xA;# Get the token, expiry&#xA;access_token, expiry = OpenAI.get_access_token()&#xA;&#xA;# Check if the token is valid&#xA;is_expired = OpenAI.token_expired() # Returns True or False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Change Log&lt;/summary&gt; &#xA; &lt;h4&gt;Update using &lt;code&gt;pip install chatgptpy --upgrade&lt;/code&gt;&lt;/h4&gt; &#xA; &lt;h4&gt;1.0.8&lt;/h4&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Fixes an issue when reading from id_log.txt&lt;/li&gt; &#xA;  &lt;li&gt;Introduces a new &lt;code&gt;pass_moderation&lt;/code&gt; parameter to the &lt;code&gt;options()&lt;/code&gt; class, defaults to &lt;code&gt;False&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Adds proxies to moderation.&lt;/li&gt; &#xA;  &lt;li&gt;If &lt;code&gt;pass_moderation&lt;/code&gt; is True, the function is invoked in another thread, so it doesn&#39;t block the main thread.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h4&gt;1.0.7&lt;/h4&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Make a request to the mod endpoint first, otherwise a crippled version of the response is returned&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h4&gt;1.0.6&lt;/h4&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;New option to turn off logs.&lt;/li&gt; &#xA;  &lt;li&gt;Better Error handling.&lt;/li&gt; &#xA;  &lt;li&gt;Enhanced conversation tracking&lt;/li&gt; &#xA;  &lt;li&gt;Ask now returns a tuple of &lt;code&gt;answer, previous_convo, convo_id&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Better docs&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h4&gt;1.0.5&lt;/h4&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Pull requests/minor fixes&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h4&gt;1.0.4&lt;/h4&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Fixes for part 8 of token authentication&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h4&gt;1.0.3&lt;/h4&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;a new &lt;code&gt;options()&lt;/code&gt; class method to set the options for the chat session&lt;/li&gt; &#xA;  &lt;li&gt;save the conversation to a file&lt;/li&gt; &#xA;  &lt;li&gt;resume the conversation even after closing the program&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h4&gt;1.0.2&lt;/h4&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;ChatGPT API switches from &lt;code&gt;action=next&lt;/code&gt; to &lt;code&gt;action=variant&lt;/code&gt;, frequently. This library is now using &lt;code&gt;action=variant&lt;/code&gt; instead of &lt;code&gt;action=next&lt;/code&gt; to get the next response from the API.&lt;/li&gt; &#xA;  &lt;li&gt;Sometimes when the server is overloaded, the API returns a &lt;code&gt;502 Bad Gateway&lt;/code&gt; error.&lt;/li&gt; &#xA;  &lt;li&gt;Added Error handling if the auth.json file is not found/corrupt&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h4&gt;1.0.0&lt;/h4&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Initial Release via PyPi&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Other notes&lt;/h3&gt; &#xA;&lt;p&gt;If the token creation process is failing:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Try to use a proxy (I recommend using this always)&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t try to log in too fast. At least wait 10 minutes if you&#39;re being rate limited.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;re still having issues, try to use a VPN. On a VPN, the script should work fine.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;What&#39;s next?&lt;/h3&gt; &#xA;&lt;p&gt;I&#39;m planning to add a few more features, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; A python module that can be imported and used in other projects&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; A way to save the conversation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Better error handling&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Multi-user chatting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;The whole process&lt;/h3&gt; &#xA;&lt;p&gt;I have been looking for a way to interact with the new Chat GPT API, but most of the sources here on GitHub require you to have a Chromium instance running in the background. or by using the Web Inspector to grab Access Token manually.&lt;/p&gt; &#xA;&lt;p&gt;No more. I have been able to reverse engineer the API and use a TLS client to mimic a real user, allowing the script to login without setting off any bot detection techniques by Auth0&lt;/p&gt; &#xA;&lt;p&gt;Basically, the script logs in on your behalf, using a TLS client, then grabs the Access Token. It&#39;s pretty fast.&lt;/p&gt; &#xA;&lt;p&gt;First, I&#39;d like to tell you that &#34;just making http&#34; requests is not going to be enough, Auth0 is smart, each process is guarded by a &lt;code&gt;state&lt;/code&gt; token, which is a JWT token. This token is used to prevent CSRF attacks, and it&#39;s also used to prevent bots from logging in. If you look at the &lt;code&gt;auth.py&lt;/code&gt; file, there are over nine functions, each one of them is responsible for a different task, and they all work together to create a token for you. &lt;code&gt;allow-redirects&lt;/code&gt; played a huge role in this, as it allowed to navigate through the login process&lt;/p&gt; &#xA;&lt;p&gt;I work at MeshMonitors.io, We make amazing tools (Check it out yo!). I decided not to spend too much time on this, but here we are.&lt;/p&gt; &#xA;&lt;h3&gt;Why did I do this?&lt;/h3&gt; &#xA;&lt;p&gt;No one has been able to do this, and I wanted to see if I could.&lt;/p&gt; &#xA;&lt;h3&gt;Credits&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openai.com/&#34;&gt;OpenAI&lt;/a&gt; for creating the ChatGPT API&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FlorianREGAZ&#34;&gt;FlorianREGAZ&lt;/a&gt; for the TLS Client&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>hwchase17/langchain</title>
    <updated>2022-12-18T01:49:06Z</updated>
    <id>tag:github.com,2022-12-18:/hwchase17/langchain</id>
    <link href="https://github.com/hwchase17/langchain" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‚ö° Building applications with LLMs through composability ‚ö°&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ü¶úÔ∏èüîó LangChain&lt;/h1&gt; &#xA;&lt;p&gt;‚ö° Building applications with LLMs through composability ‚ö°&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hwchase17/langchain/actions/workflows/lint.yml&#34;&gt;&lt;img src=&#34;https://github.com/hwchase17/langchain/actions/workflows/lint.yml/badge.svg?sanitize=true&#34; alt=&#34;lint&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hwchase17/langchain/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/hwchase17/langchain/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/langchainai&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/https/twitter.com/langchainai.svg?style=social&amp;amp;label=Follow%20%40LangChainAI&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/6adMQxSpJS&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/6adMQxSpJS?compact=true&amp;amp;style=flat&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick Install&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;pip install langchain&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ü§î What is this?&lt;/h2&gt; &#xA;&lt;p&gt;Large language models (LLMs) are emerging as a transformative technology, enabling developers to build applications that they previously could not. But using these LLMs in isolation is often not enough to create a truly powerful app - the real power comes when you can combine them with other sources of computation or knowledge.&lt;/p&gt; &#xA;&lt;p&gt;This library is aimed at assisting in the development of those types of applications.&lt;/p&gt; &#xA;&lt;h2&gt;üìñ Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://langchain.readthedocs.io/en/latest/?&#34;&gt;here&lt;/a&gt; for full documentation on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Getting started (installation, setting up the environment, simple examples)&lt;/li&gt; &#xA; &lt;li&gt;How-To examples (demos, integrations, helper functions)&lt;/li&gt; &#xA; &lt;li&gt;Reference (full API docs) Resources (high-level explanation of core concepts)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üöÄ What can this help with?&lt;/h2&gt; &#xA;&lt;p&gt;There are four main areas that LangChain is designed to help with. These are, in increasing order of complexity:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;üìÉ LLMs and Prompts:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This includes prompt management, prompt optimization, generic interface for all LLMs, and common utilities for working with LLMs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;üîó Chains:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Chains go beyond just a single LLM call, and are sequences of calls (whether to an LLM or a different utility). LangChain provides a standard interface for chains, lots of integrations with other tools, and end-to-end chains for common applications.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;ü§ñ Agents:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Agents involve an LLM making decisions about which Actions to take, taking that Action, seeing an Observation, and repeating that until done. LangChain provides a standard interface for agents, a selection of agents to choose from, and examples of end to end agents.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;üß† Memory:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Memory is the concept of persisting state between calls of a chain/agent. LangChain provides a standard interface for memory, a collection of memory implementations, and examples of chains/agents that use memory.&lt;/p&gt; &#xA;&lt;p&gt;For more information on these concepts, please see our &lt;a href=&#34;https://langchain.readthedocs.io/en/latest/?&#34;&gt;full documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üíÅ Contributing&lt;/h2&gt; &#xA;&lt;p&gt;As an open source project in a rapidly developing field, we are extremely open to contributions, whether it be in the form of a new feature, improved infra, or better documentation.&lt;/p&gt; &#xA;&lt;p&gt;For detailed information on how to contribute, see &lt;a href=&#34;https://raw.githubusercontent.com/hwchase17/langchain/master/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mmabrouk/chatgpt-wrapper</title>
    <updated>2022-12-18T01:49:06Z</updated>
    <id>tag:github.com,2022-12-18:/mmabrouk/chatgpt-wrapper</id>
    <link href="https://github.com/mmabrouk/chatgpt-wrapper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;API for interacting with ChatGPT using Python and from Shell.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ChatGPT CLI and Python Wrapper&lt;/h1&gt; &#xA;&lt;p&gt;ChatGPT Wrapper is an open-source unofficial Python API and CLI that lets you interact with ChatGPT.&lt;/p&gt; &#xA;&lt;h2&gt;Highlights&lt;/h2&gt; &#xA;&lt;p&gt;ü§ñ Programmable ChatGPT. The ChatGPT Wrapper lets you use the powerful ChatGPT bot in your Python scripts or on the command line, making it easy to leverage its functionality into your projects.&lt;/p&gt; &#xA;&lt;p&gt;üí¨ Runs in Shell. You can call and interact with ChatGPT in the terminal&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;Run an interactive CLI in the terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ chatgpt&#xA;Provide a prompt for ChatGPT, or type help or ? to list commands.&#xA;1&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or just get a quick response for one question:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ chatgpt What is six times seven?&#xA;&#xA;Six times seven is 42.      &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s a short demo of some of the CLI features: &lt;a href=&#34;https://user-images.githubusercontent.com/233113/206799611-8807f659-cd4c-449f-9937-843153533a15.mp4&#34;&gt;https://user-images.githubusercontent.com/233113/206799611-8807f659-cd4c-449f-9937-843153533a15.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;See below for details on using ChatGPT as an API.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;To use this repository, you will need to have the following packages installed:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;setuptools&lt;/code&gt;: This package is used to create and manage Python packages. You can install it using &lt;code&gt;pip install setuptools&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the latest version of this software directly from github with pip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install git+https://github.com/mmabrouk/chatgpt-wrapper&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will install chatgpt-wrapper and it&#39;s dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Before starting the program, you will need to install a browser in playwright (if you haven&#39;t already). The program will use firefox by default.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;playwright install firefox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With that done, you should start up the program in &lt;code&gt;install&lt;/code&gt; mode, which will open up a browser window.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chatgpt install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Log in to ChatGPT in the browser window, then stop the program. After doing this, restart the program without the &lt;code&gt;install&lt;/code&gt; parameter to begin using it.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Shell&lt;/h3&gt; &#xA;&lt;p&gt;The shell includes some nice features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It provides commands to start a new conversation, or navigate to past points in the conversation.&lt;/li&gt; &#xA; &lt;li&gt;It provides a command that allows the user to choose between rendered markdown and streaming output (can&#39;t have both).&lt;/li&gt; &#xA; &lt;li&gt;It provides a logging option, and the ability to restore any context that&#39;s been logged, even from old sessions.&lt;/li&gt; &#xA; &lt;li&gt;It provides a command to read prompts from files, and a command to support reading multi-line prompts.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Python&lt;/h3&gt; &#xA;&lt;p&gt;To use the &lt;code&gt;ChatGPT&lt;/code&gt; class as an API for talking to ChatGPT, create an instance of the class and use the &lt;code&gt;ask&lt;/code&gt; method to send a message to OpenAI and receive the response. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from chatgpt_wrapper import ChatGPT&#xA;&#xA;bot = ChatGPT()&#xA;response = bot.ask(&#34;Hello, world!&#34;)&#xA;print(response)  # prints the response from chatGPT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The say method takes a string argument representing the message to send to ChatGPT, and returns a string representing the response received from ChatGPT.&lt;/p&gt; &#xA;&lt;p&gt;You may also stream the response as it comes in from ChatGPT in chunks using the &lt;code&gt;ask_stream&lt;/code&gt; generator.&lt;/p&gt; &#xA;&lt;h2&gt;Upcoming Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Async mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Remove reliance on playwright&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Improve error messaging&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Automatic installation start when not logged in&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: We welcome pull requests for any of the above features, or any other improvements you&#39;d like to see in the project.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions to ChatGPT Wrapper! If you have an idea for a new feature or have found a bug, please open an issue on the GitHub repository.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License - see the LICENSE file for details.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This project is a modification from &lt;a href=&#34;https://github.com/taranjeet/chatgpt-api&#34;&gt;Taranjeet&lt;/a&gt; code which is a modification of &lt;a href=&#34;https://github.com/danielgross/whatsapp-gpt&#34;&gt;Daniel Gross&lt;/a&gt; code.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>