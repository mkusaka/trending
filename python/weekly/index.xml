<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-05T01:58:20Z</updated>
  <subtitle>Weekly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bmaltais/kohya_ss</title>
    <updated>2023-03-05T01:58:20Z</updated>
    <id>tag:github.com,2023-03-05:/bmaltais/kohya_ss</id>
    <link href="https://github.com/bmaltais/kohya_ss" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kohya&#39;s GUI&lt;/h1&gt; &#xA;&lt;p&gt;This repository provides a Windows-focused Gradio GUI for &lt;a href=&#34;https://github.com/kohya-ss/sd-scripts&#34;&gt;Kohya&#39;s Stable Diffusion trainers&lt;/a&gt;. The GUI allows you to set the training parameters and generate and run the required CLI commands to train the model.&lt;/p&gt; &#xA;&lt;p&gt;If you run on Linux and would like to use the GUI, there is now a port of it as a docker container. You can find the project &lt;a href=&#34;https://github.com/P2Enjoy/kohya_ss-docker&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Table of Contents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bmaltais/kohya_ss#tutorials&#34;&gt;Tutorials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bmaltais/kohya_ss#required-dependencies&#34;&gt;Required Dependencies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bmaltais/kohya_ss#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/bmaltais/kohya_ss#optional-cudnn-86&#34;&gt;CUDNN 8.6&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bmaltais/kohya_ss#upgrading&#34;&gt;Upgrading&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bmaltais/kohya_ss#launching-the-gui&#34;&gt;Launching the GUI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bmaltais/kohya_ss#dreambooth&#34;&gt;Dreambooth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bmaltais/kohya_ss#finetune&#34;&gt;Finetune&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bmaltais/kohya_ss#train-network&#34;&gt;Train Network&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bmaltais/kohya_ss#lora&#34;&gt;LoRA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bmaltais/kohya_ss#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/bmaltais/kohya_ss#page-file-limit&#34;&gt;Page File Limit&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/bmaltais/kohya_ss#no-module-called-tkinter&#34;&gt;No module called tkinter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/bmaltais/kohya_ss#filenotfounderror&#34;&gt;FileNotFoundError&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bmaltais/kohya_ss#change-history&#34;&gt;Change History&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tutorials&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=N4_-fB62Hwk&#34;&gt;How to Create a LoRA Part 1: Dataset Preparation&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=N4_-fB62Hwk&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/N4_-fB62Hwk/0.jpg&#34; alt=&#34;LoRA Part 1 Tutorial&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=k5imq01uvUY&#34;&gt;How to Create a LoRA Part 2: Training the Model&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=k5imq01uvUY&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/k5imq01uvUY/0.jpg&#34; alt=&#34;LoRA Part 2 Tutorial&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Required Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://www.python.org/ftp/python/3.10.9/python-3.10.9-amd64.exe&#34;&gt;Python 3.10&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;make sure to tick the box to add Python to the &#39;PATH&#39; environment variable&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://git-scm.com/download/win&#34;&gt;Git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://aka.ms/vs/17/release/vc_redist.x64.exe&#34;&gt;Visual Studio 2015, 2017, 2019, and 2022 redistributable&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Ubuntu&lt;/h3&gt; &#xA;&lt;p&gt;In the terminal, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/bmaltais/kohya_ss.git&#xA;cd kohya_ss&#xA;bash ubuntu_setup.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then configure accelerate with the same answers as in the Windows instructions when prompted.&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Give unrestricted script access to powershell so venv can work:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run PowerShell as an administrator&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;Set-ExecutionPolicy Unrestricted&lt;/code&gt; and answer &#39;A&#39;&lt;/li&gt; &#xA; &lt;li&gt;Close PowerShell&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Open a regular user Powershell terminal and run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;git clone https://github.com/bmaltais/kohya_ss.git&#xA;cd kohya_ss&#xA;&#xA;python -m venv venv&#xA;.\venv\Scripts\activate&#xA;&#xA;pip install torch==1.12.1+cu116 torchvision==0.13.1+cu116 --extra-index-url https://download.pytorch.org/whl/cu116&#xA;pip install --use-pep517 --upgrade -r requirements.txt&#xA;pip install -U -I --no-deps https://github.com/C43H66N12O12S2/stable-diffusion-webui/releases/download/f/xformers-0.0.14.dev0-cp310-cp310-win_amd64.whl&#xA;&#xA;cp .\bitsandbytes_windows\*.dll .\venv\Lib\site-packages\bitsandbytes\&#xA;cp .\bitsandbytes_windows\cextension.py .\venv\Lib\site-packages\bitsandbytes\cextension.py&#xA;cp .\bitsandbytes_windows\main.py .\venv\Lib\site-packages\bitsandbytes\cuda_setup\main.py&#xA;&#xA;accelerate config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Optional: CUDNN 8.6&lt;/h3&gt; &#xA;&lt;p&gt;This step is optional but can improve the learning speed for NVIDIA 30X0/40X0 owners. It allows for larger training batch size and faster training speed.&lt;/p&gt; &#xA;&lt;p&gt;Due to the file size, I can&#39;t host the DLLs needed for CUDNN 8.6 on Github. I strongly advise you download them for a speed boost in sample generation (almost 50% on 4090 GPU) you can download them &lt;a href=&#34;https://b1.thefileditch.ch/mwxKTEtelILoIbMbruuM.zip&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To install, simply unzip the directory and place the &lt;code&gt;cudnn_windows&lt;/code&gt; folder in the root of the this repo.&lt;/p&gt; &#xA;&lt;p&gt;Run the following commands to install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.\venv\Scripts\activate&#xA;&#xA;python .\tools\cudann_1.8_install.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Upgrading&lt;/h2&gt; &#xA;&lt;p&gt;When a new release comes out, you can upgrade your repo with the following commands in the root directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;git pull&#xA;&#xA;.\venv\Scripts\activate&#xA;&#xA;pip install --use-pep517 --upgrade -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the commands have completed successfully you should be ready to use the new version.&lt;/p&gt; &#xA;&lt;h2&gt;Launching the GUI&lt;/h2&gt; &#xA;&lt;p&gt;To run the GUI, simply use this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.\gui.ps1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or you can also do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.\venv\Scripts\activate&#xA;&#xA;python.exe .\kohya_gui.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dreambooth&lt;/h2&gt; &#xA;&lt;p&gt;You can find the dreambooth solution specific here: &lt;a href=&#34;https://raw.githubusercontent.com/bmaltais/kohya_ss/master/train_db_README.md&#34;&gt;Dreambooth README&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Finetune&lt;/h2&gt; &#xA;&lt;p&gt;You can find the finetune solution specific here: &lt;a href=&#34;https://raw.githubusercontent.com/bmaltais/kohya_ss/master/fine_tune_README.md&#34;&gt;Finetune README&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Train Network&lt;/h2&gt; &#xA;&lt;p&gt;You can find the train network solution specific here: &lt;a href=&#34;https://raw.githubusercontent.com/bmaltais/kohya_ss/master/train_network_README.md&#34;&gt;Train network README&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;LoRA&lt;/h2&gt; &#xA;&lt;p&gt;Training a LoRA currently uses the &lt;code&gt;train_network.py&lt;/code&gt; code. You can create a LoRA network by using the all-in-one &lt;code&gt;gui.cmd&lt;/code&gt; or by running the dedicated LoRA training GUI with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.\venv\Scripts\activate&#xA;&#xA;python lora_gui.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you have created the LoRA network, you can generate images via auto1111 by installing &lt;a href=&#34;https://github.com/kohya-ss/sd-webui-additional-networks&#34;&gt;this extension&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;Page File Limit&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;X error relating to &lt;code&gt;page file&lt;/code&gt;: Increase the page file size limit in Windows.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;No module called tkinter&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Re-install &lt;a href=&#34;https://www.python.org/ftp/python/3.10.9/python-3.10.9-amd64.exe&#34;&gt;Python 3.10&lt;/a&gt; on your system.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;FileNotFoundError&lt;/h3&gt; &#xA;&lt;p&gt;This is usually related to an installation issue. Make sure you do not have any python modules installed locally that could conflict with the ones installed in the venv:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open a new powershell terminal and make sure no venv is active.&lt;/li&gt; &#xA; &lt;li&gt;Run the following commands:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip freeze &amp;gt; uninstall.txt&#xA;pip uninstall -r uninstall.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will store your a backup file with your current locally installed pip packages and then uninstall them. Then, redo the installation instructions within the kohya_ss venv.&lt;/p&gt; &#xA;&lt;h2&gt;Change History&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2023/03/04 (v21.1.3): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fix progress bar being displayed when not required.&lt;/li&gt; &#xA;   &lt;li&gt;Add support for linux, thank you @devNegative-asm&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;2023/03/03 (v21.1.2): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fix issue &lt;a href=&#34;https://github.com/bmaltais/kohya_ss/issues/277&#34;&gt;https://github.com/bmaltais/kohya_ss/issues/277&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Fix issue &lt;a href=&#34;https://github.com/bmaltais/kohya_ss/issues/278&#34;&gt;https://github.com/bmaltais/kohya_ss/issues/278&lt;/a&gt; introduce by LoCon project switching to pip module. Make sure to run upgrade.ps1 to install the latest pip requirements for LoCon support.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;2023/03/02 (v21.1.1): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Emergency fix for &lt;a href=&#34;https://github.com/bmaltais/kohya_ss/issues/261&#34;&gt;https://github.com/bmaltais/kohya_ss/issues/261&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;2023/03/02 (v21.1.0): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add LoCon support (&lt;a href=&#34;https://github.com/KohakuBlueleaf/LoCon.git&#34;&gt;https://github.com/KohakuBlueleaf/LoCon.git&lt;/a&gt;) to the Dreambooth LoRA tab. This will allow to create a new type of LoRA that include conv layers as part of the LoRA... hence the name LoCon. LoCon will work with the native Auto1111 implementation of LoRA. If you want to use it with the Kohya_ss additionalNetwork you will need to install this other extension... until Kohya_ss support it nativelly: &lt;a href=&#34;https://github.com/KohakuBlueleaf/a1111-sd-webui-locon&#34;&gt;https://github.com/KohakuBlueleaf/a1111-sd-webui-locon&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;2023/03/01 (v21.0.1): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add warning to tensorboard start if the log information is missing&lt;/li&gt; &#xA;   &lt;li&gt;Fix issue with 8bitadam on older config file load&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;2023/02/27 (v21.0.0): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add tensorboard start and stop support to the GUI&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;2023/02/26 (v20.8.2): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fix issue &lt;a href=&#34;https://github.com/bmaltais/kohya_ss/issues/231&#34;&gt;https://github.com/bmaltais/kohya_ss/issues/231&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Change default for seed to random&lt;/li&gt; &#xA;   &lt;li&gt;Add support for --share argument to &lt;code&gt;kohya_gui.py&lt;/code&gt; and &lt;code&gt;gui.ps1&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Implement 8bit adam login to help with the legacy &lt;code&gt;Use 8bit adam&lt;/code&gt; checkbox that is now superceided by the &lt;code&gt;Optimizer&lt;/code&gt; dropdown selection. This field will be eventually removed. Kept for now for backward compatibility.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;2023/02/23 (v20.8.1): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fix instability training issue in &lt;code&gt;train_network.py&lt;/code&gt;. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;fp16&lt;/code&gt; training is probably not affected by this issue.&lt;/li&gt; &#xA;     &lt;li&gt;Training with &lt;code&gt;float&lt;/code&gt; for SD2.x models will work now. Also training with bf16 might be improved.&lt;/li&gt; &#xA;     &lt;li&gt;This issue seems to have occurred in &lt;a href=&#34;https://github.com/kohya-ss/sd-scripts/pull/190&#34;&gt;PR#190&lt;/a&gt;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Add some metadata to LoRA model. Thanks to space-nuko!&lt;/li&gt; &#xA;   &lt;li&gt;Raise an error if optimizer options conflict (e.g. &lt;code&gt;--optimizer_type&lt;/code&gt; and &lt;code&gt;--use_8bit_adam&lt;/code&gt;.)&lt;/li&gt; &#xA;   &lt;li&gt;Support ControlNet in &lt;code&gt;gen_img_diffusers.py&lt;/code&gt; (no documentation yet.)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;2023/02/22 (v20.8.0): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add gui support for optimizers: &lt;code&gt;AdamW, AdamW8bit, Lion, SGDNesterov, SGDNesterov8bit, DAdaptation, AdaFactor&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Add gui support for &lt;code&gt;--noise_offset&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Refactor optmizer options. Thanks to mgz-dev! &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Add &lt;code&gt;--optimizer_type&lt;/code&gt; option for each training script. Please see help. Japanese documentation is &lt;a href=&#34;https://github-com.translate.goog/kohya-ss/sd-scripts/blob/main/train_network_README-ja.md?_x_tr_sl=fr&amp;amp;_x_tr_tl=en&amp;amp;_x_tr_hl=en-US&amp;amp;_x_tr_pto=wapp#%E3%82%AA%E3%83%97%E3%83%86%E3%82%A3%E3%83%9E%E3%82%A4%E3%82%B6%E3%81%AE%E6%8C%87%E5%AE%9A%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;--use_8bit_adam&lt;/code&gt; and &lt;code&gt;--use_lion_optimizer&lt;/code&gt; options also work and will override the options above for backward compatibility.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Add SGDNesterov and its 8bit.&lt;/li&gt; &#xA;   &lt;li&gt;Add &lt;a href=&#34;https://github.com/facebookresearch/dadaptation&#34;&gt;D-Adaptation&lt;/a&gt; optimizer. Thanks to BootsofLagrangian and all! &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Please install D-Adaptation optimizer with &lt;code&gt;pip install dadaptation&lt;/code&gt; (it is not in requirements.txt currently.)&lt;/li&gt; &#xA;     &lt;li&gt;Please see &lt;a href=&#34;https://github.com/kohya-ss/sd-scripts/issues/181&#34;&gt;https://github.com/kohya-ss/sd-scripts/issues/181&lt;/a&gt; for details.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Add AdaFactor optimizer. Thanks to Toshiaki!&lt;/li&gt; &#xA;   &lt;li&gt;Extra lr scheduler settings (num_cycles etc.) are working in training scripts other than &lt;code&gt;train_network.py&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Add &lt;code&gt;--max_grad_norm&lt;/code&gt; option for each training script for gradient clipping. &lt;code&gt;0.0&lt;/code&gt; disables clipping.&lt;/li&gt; &#xA;   &lt;li&gt;Symbolic link can be loaded in each training script. Thanks to TkskKurumi!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>civitai/sd_civitai_extension</title>
    <updated>2023-03-05T01:58:20Z</updated>
    <id>tag:github.com,2023-03-05:/civitai/sd_civitai_extension</id>
    <link href="https://github.com/civitai/sd_civitai_extension" rel="alternate"></link>
    <summary type="html">&lt;p&gt;All of the Civitai models inside Automatic 1111 Stable Diffusion Web UI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Civitai Extension for Automatic 1111 Stable Diffusion Web UI&lt;/h1&gt; &#xA;&lt;p&gt;Bringing together the power of Civitai and Automatic 1111&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;⚠️ This is a work in progress and not something you can use yet.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Automatically download preview images for all models, LORAs, hypernetworks, and embeds&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Automatically download a model based on the model hash upon applying pasted generation params&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Resources in Metadata: Include the SHA256 hash of all resources used in an image to be able to automatically link to corresponding resources on Civitai&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Flexible Resource Naming in Metadata: Hashify the names of resources in prompts to avoid issues with resource renaming and make prompts more portable&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Civitai Link: Optional websocket connection to be able to add/remove resources and more in your SD instance while browsing Civitai or other Civitai Link enabled sites.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Through the Extensions UI (Recommended)&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the Extensions Tab in Automatic1111 SD Web UI&lt;/li&gt; &#xA; &lt;li&gt;In the Extension Tab Open the &#34;Instal from URL&#34; tab&lt;/li&gt; &#xA; &lt;li&gt;Paste &lt;code&gt;https://github.com/civitai/sd_civitai_extension.git&lt;/code&gt; into the URL input&lt;/li&gt; &#xA; &lt;li&gt;Press install and wait for it to complete&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Restart Automatic1111&lt;/strong&gt; (Reloading the UI will not install the necessary requirements)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the repo using any method (zip download or cloning)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/civitai/sd_civitai_extension.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;After downloading the repo, open a command prompt in that location&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd C:\path\to\sd_civitai_extension&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Then run the included install.py script&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;py install.py&#xA;# OR&#xA;python install.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Here to help?&lt;/h2&gt; &#xA;&lt;p&gt;Hop into the development channel in our &lt;a href=&#34;https://discord.gg/UwX5wKwm6c&#34;&gt;Discord server&lt;/a&gt; and let&#39;s chat!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lllyasviel/ControlNet</title>
    <updated>2023-03-05T01:58:20Z</updated>
    <id>tag:github.com,2023-03-05:/lllyasviel/ControlNet</id>
    <link href="https://github.com/lllyasviel/ControlNet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Let us control diffusion models!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ControlNet&lt;/h1&gt; &#xA;&lt;p&gt;Official implementation of &lt;a href=&#34;https://arxiv.org/abs/2302.05543&#34;&gt;Adding Conditional Control to Text-to-Image Diffusion Models&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;ControlNet is a neural network structure to control diffusion models by adding extra conditions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/he.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;It copys the weights of neural network blocks into a &#34;locked&#34; copy and a &#34;trainable&#34; copy.&lt;/p&gt; &#xA;&lt;p&gt;The &#34;trainable&#34; one learns your condition. The &#34;locked&#34; one preserves your model.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to this, training with small dataset of image pairs will not destroy the production-ready diffusion models.&lt;/p&gt; &#xA;&lt;p&gt;The &#34;zero convolution&#34; is 1×1 convolution with both weight and bias initialized as zeros.&lt;/p&gt; &#xA;&lt;p&gt;Before training, all zero convolutions output zeros, and ControlNet will not cause any distortion.&lt;/p&gt; &#xA;&lt;p&gt;No layer is trained from scratch. You are still fine-tuning. Your original model is safe.&lt;/p&gt; &#xA;&lt;p&gt;This allows training on small-scale or even personal devices.&lt;/p&gt; &#xA;&lt;p&gt;This is also friendly to merge/replacement/offsetting of models/weights/blocks/layers.&lt;/p&gt; &#xA;&lt;h3&gt;FAQ&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; But wait, if the weight of a conv layer is zero, the gradient will also be zero, and the network will not learn anything. Why &#34;zero convolution&#34; works?&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; This is not true. &lt;a href=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/docs/faq.md&#34;&gt;See an explanation here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Stable Diffusion + ControlNet&lt;/h1&gt; &#xA;&lt;p&gt;By repeating the above simple structure 14 times, we can control stable diffusion in this way:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/sd.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that the way we connect layers is computational efficient. The original SD encoder does not need to store gradients (the locked original SD Encoder Block 1234 and Middle). The required GPU memory is not much larger than original SD, although many layers are added. Great!&lt;/p&gt; &#xA;&lt;h1&gt;Features &amp;amp; News&lt;/h1&gt; &#xA;&lt;p&gt;2023/03/03 - We released a discussion - &lt;a href=&#34;https://github.com/lllyasviel/ControlNet/discussions/216&#34;&gt;Precomputed ControlNet: Speed up ControlNet by 45%, but is it necessary?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;2023/02/26 - We released a blog - &lt;a href=&#34;https://github.com/lllyasviel/ControlNet/discussions/188&#34;&gt;Ablation Study: Why ControlNets use deep encoder? What if it was lighter? Or even an MLP?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;2023/02/20 - Implementation for non-prompt mode released. See also &lt;a href=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/#guess-anchor&#34;&gt;Guess Mode / Non-Prompt Mode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;2023/02/12 - Now you can play with any community model by &lt;a href=&#34;https://github.com/lllyasviel/ControlNet/discussions/12&#34;&gt;Transferring the ControlNet&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;2023/02/11 - &lt;a href=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/docs/low_vram.md&#34;&gt;Low VRAM mode&lt;/a&gt; is added. Please use this mode if you are using 8GB GPU(s) or if you want larger batch size.&lt;/p&gt; &#xA;&lt;h1&gt;Production-Ready Pretrained Models&lt;/h1&gt; &#xA;&lt;p&gt;First create a new conda environment&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda env create -f environment.yaml&#xA;conda activate control&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All models and detectors can be downloaded from &lt;a href=&#34;https://huggingface.co/lllyasviel/ControlNet&#34;&gt;our Hugging Face page&lt;/a&gt;. Make sure that SD models are put in &#34;ControlNet/models&#34; and detectors are put in &#34;ControlNet/annotator/ckpts&#34;. Make sure that you download all necessary pretrained weights and detector models from that Hugging Face page, including HED edge detection model, Midas depth estimation model, Openpose, and so on.&lt;/p&gt; &#xA;&lt;p&gt;We provide 9 Gradio apps with these models.&lt;/p&gt; &#xA;&lt;p&gt;All test images can be found at the folder &#34;test_imgs&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;ControlNet with Canny Edge&lt;/h2&gt; &#xA;&lt;p&gt;Stable Diffusion 1.5 + ControlNet (using simple Canny edge detection)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python gradio_canny2image.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Gradio app also allows you to change the Canny edge thresholds. Just try it for more details.&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;bird&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p1.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;cute dog&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p2.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ControlNet with M-LSD Lines&lt;/h2&gt; &#xA;&lt;p&gt;Stable Diffusion 1.5 + ControlNet (using simple M-LSD straight line detection)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python gradio_hough2image.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Gradio app also allows you to change the M-LSD thresholds. Just try it for more details.&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;room&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p3.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;building&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p4.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ControlNet with HED Boundary&lt;/h2&gt; &#xA;&lt;p&gt;Stable Diffusion 1.5 + ControlNet (using soft HED Boundary)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python gradio_hed2image.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The soft HED Boundary will preserve many details in input images, making this app suitable for recoloring and stylizing. Just try it for more details.&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;oil painting of handsome old man, masterpiece&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p5.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;Cyberpunk robot&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p6.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ControlNet with User Scribbles&lt;/h2&gt; &#xA;&lt;p&gt;Stable Diffusion 1.5 + ControlNet (using Scribbles)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python gradio_scribble2image.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the UI is based on Gradio, and Gradio is somewhat difficult to customize. Right now you need to draw scribbles outside the UI (using your favorite drawing software, for example, MS Paint) and then import the scribble image to Gradio.&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;turtle&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p7.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;hot air balloon&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p8.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Interactive Interface&lt;/h3&gt; &#xA;&lt;p&gt;We actually provide an interactive interface&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python gradio_scribble2image_interactive.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;del&gt;However, because gradio is very &lt;a href=&#34;https://github.com/gradio-app/gradio/issues/3166&#34;&gt;buggy&lt;/a&gt; and difficult to customize, right now, user need to first set canvas width and heights and then click &#34;Open drawing canvas&#34; to get a drawing area. Please do not upload image to that drawing canvas. Also, the drawing area is very small; it should be bigger. But I failed to find out how to make it larger. Again, gradio is really buggy.&lt;/del&gt; (Now fixed, will update asap)&lt;/p&gt; &#xA;&lt;p&gt;The below dog sketch is drawn by me. Perhaps we should draw a better dog for showcase.&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;dog in a room&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p20.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ControlNet with Fake Scribbles&lt;/h2&gt; &#xA;&lt;p&gt;Stable Diffusion 1.5 + ControlNet (using fake scribbles)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python gradio_fake_scribble2image.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sometimes we are lazy, and we do not want to draw scribbles. This script use the exactly same scribble-based model but use a simple algorithm to synthesize scribbles from input images.&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;bag&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p9.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;shose&#34; (Note that &#34;shose&#34; is a typo; it should be &#34;shoes&#34;. But it still seems to work.) &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p10.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ControlNet with Human Pose&lt;/h2&gt; &#xA;&lt;p&gt;Stable Diffusion 1.5 + ControlNet (using human pose)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python gradio_pose2image.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Apparently, this model deserves a better UI to directly manipulate pose skeleton. However, again, Gradio is somewhat difficult to customize. Right now you need to input an image and then the Openpose will detect the pose for you.&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;Chief in the kitchen&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p11.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;An astronaut on the moon&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p12.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ControlNet with Semantic Segmentation&lt;/h2&gt; &#xA;&lt;p&gt;Stable Diffusion 1.5 + ControlNet (using semantic segmentation)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python gradio_seg2image.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This model use ADE20K&#39;s segmentation protocol. Again, this model deserves a better UI to directly draw the segmentations. However, again, Gradio is somewhat difficult to customize. Right now you need to input an image and then a model called Uniformer will detect the segmentations for you. Just try it for more details.&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;House&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p13.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;River&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p14.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ControlNet with Depth&lt;/h2&gt; &#xA;&lt;p&gt;Stable Diffusion 1.5 + ControlNet (using depth map)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python gradio_depth2image.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Great! Now SD 1.5 also have a depth control. FINALLY. So many possibilities (considering SD1.5 has much more community models than SD2).&lt;/p&gt; &#xA;&lt;p&gt;Note that different from Stability&#39;s model, the ControlNet receive the full 512×512 depth map, rather than 64×64 depth. Note that Stability&#39;s SD2 depth model use 64*64 depth maps. This means that the ControlNet will preserve more details in the depth map.&lt;/p&gt; &#xA;&lt;p&gt;This is always a strength because if users do not want to preserve more details, they can simply use another SD to post-process an i2i. But if they want to preserve more details, ControlNet becomes their only choice. Again, SD2 uses 64×64 depth, we use 512×512.&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;Stormtrooper&#39;s lecture&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p15.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ControlNet with Normal Map&lt;/h2&gt; &#xA;&lt;p&gt;Stable Diffusion 1.5 + ControlNet (using normal map)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python gradio_normal2image.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This model use normal map. Rightnow in the APP, the normal is computed from the midas depth map and a user threshold (to determine how many area is background with identity normal face to viewer, tune the &#34;Normal background threshold&#34; in the gradio app to get a feeling).&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;Cute toy&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p17.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;Plaster statue of Abraham Lincoln&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p18.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Compared to depth model, this model seems to be a bit better at preserving the geometry. This is intuitive: minor details are not salient in depth maps, but are salient in normal maps. Below is the depth result with same inputs. You can see that the hairstyle of the man in the input image is modified by depth model, but preserved by the normal model.&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;Plaster statue of Abraham Lincoln&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p19.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ControlNet with Anime Line Drawing&lt;/h2&gt; &#xA;&lt;p&gt;We also trained a relatively simple ControlNet for anime line drawings. This tool may be useful for artistic creations. (Although the image details in the results is a bit modified, since it still diffuse latent images.)&lt;/p&gt; &#xA;&lt;p&gt;This model is not available right now. We need to evaluate the potential risks before releasing this model. Nevertheless, you may be interested in &lt;a href=&#34;https://github.com/lllyasviel/ControlNet/discussions/12&#34;&gt;transferring the ControlNet to any community model&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p21.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;guess-anchor&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Guess Mode / Non-Prompt Mode&lt;/h1&gt; &#xA;&lt;p&gt;The &#34;guess mode&#34; (or called non-prompt mode) will completely unleash all the power of the very powerful ControlNet encoder.&lt;/p&gt; &#xA;&lt;p&gt;See also the blog - &lt;a href=&#34;https://github.com/lllyasviel/ControlNet/discussions/188&#34;&gt;Ablation Study: Why ControlNets use deep encoder? What if it was lighter? Or even an MLP?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You need to manually check the &#34;Guess Mode&#34; toggle to enable this mode.&lt;/p&gt; &#xA;&lt;p&gt;In this mode, the ControlNet encoder will try best to recognize the content of the input control map, like depth map, edge map, scribbles, etc, even if you remove all prompts.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Let&#39;s have fun with some very challenging experimental settings!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;No prompts. No &#34;positive&#34; prompts. No &#34;negative&#34; prompts. No extra caption detector. One single diffusion loop.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For this mode, we recommend to use 50 steps and guidance scale between 3 and 5.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/uc2a.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;No prompts:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/uc2b.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that the below example is 768×768. No prompts. No &#34;positive&#34; prompts. No &#34;negative&#34; prompts.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/uc1.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;By tuning the parameters, you can get some very intereting results like below:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/uc3.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Because no prompt is available, the ControlNet encoder will &#34;guess&#34; what is in the control map. Sometimes the guess result is really interesting. Because diffusion algorithm can essentially give multiple results, the ControlNet seems able to give multiple guesses, like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/uc4.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Without prompt, the HED seems good at generating images look like paintings when the control strength is relatively low:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/uc6.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Guess Mode is also supported in &lt;a href=&#34;https://github.com/Mikubill/sd-webui-controlnet&#34;&gt;WebUI Plugin&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/uci1.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;No prompts. Default WebUI parameters. Pure random results with the seed being 12345. Standard SD1.5. Input scribble is in &#34;test_imgs&#34; folder to reproduce.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/uci2.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Below is another challenging example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/uci3.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;No prompts. Default WebUI parameters. Pure random results with the seed being 12345. Standard SD1.5. Input scribble is in &#34;test_imgs&#34; folder to reproduce.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/uci4.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that in the guess mode, you will still be able to input prompts. The only difference is that the model will &#34;try harder&#34; to guess what is in the control map even if you do not provide the prompt. Just try it yourself!&lt;/p&gt; &#xA;&lt;p&gt;Besides, if you write some scripts (like BLIP) to generate image captions from the &#34;guess mode&#34; images, and then use the generated captions as prompts to diffuse again, you will get a SOTA pipeline for fully automatic conditional image generating.&lt;/p&gt; &#xA;&lt;h1&gt;Combining Multiple ControlNets&lt;/h1&gt; &#xA;&lt;p&gt;ControlNets are composable: more than one ControlNet can be easily composed to multi-condition control.&lt;/p&gt; &#xA;&lt;p&gt;Right now this feature is in experimental stage in the &lt;a href=&#34;https://github.com/Mikubill/sd-webui-controlnet&#34;&gt;Mikubill&#39; A1111 Webui Plugin&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/multi2.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/multi.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;As long as the models are controlling the same SD, the &#34;boundary&#34; between different research projects does not even exist. This plugin also allows different methods to work together!&lt;/p&gt; &#xA;&lt;h1&gt;Use ControlNet in Any Community Model (SD1.X)&lt;/h1&gt; &#xA;&lt;p&gt;This is an experimental feature.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lllyasviel/ControlNet/discussions/12&#34;&gt;See the steps here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Or you may want to use the &lt;a href=&#34;https://github.com/Mikubill/sd-webui-controlnet&#34;&gt;Mikubill&#39; A1111 Webui Plugin&lt;/a&gt; which is plug-and-play and does not need manual merging.&lt;/p&gt; &#xA;&lt;h1&gt;Annotate Your Own Data&lt;/h1&gt; &#xA;&lt;p&gt;We provide simple python scripts to process images.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/docs/annotator.md&#34;&gt;See a gradio example here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Train with Your Own Data&lt;/h1&gt; &#xA;&lt;p&gt;Training a ControlNet is as easy as (or even easier than) training a simple pix2pix.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/docs/train.md&#34;&gt;See the steps here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Related Resources&lt;/h1&gt; &#xA;&lt;p&gt;Special Thank to the great project - &lt;a href=&#34;https://github.com/Mikubill/sd-webui-controlnet&#34;&gt;Mikubill&#39; A1111 Webui Plugin&lt;/a&gt; !&lt;/p&gt; &#xA;&lt;p&gt;We also thank Hysts for making &lt;a href=&#34;https://huggingface.co/spaces/hysts/ControlNet&#34;&gt;Hugging Face Space&lt;/a&gt; as well as more than 65 models in that amazing &lt;a href=&#34;https://github.com/camenduru/controlnet-colab&#34;&gt;Colab list&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;Thank haofanwang for making &lt;a href=&#34;https://github.com/haofanwang/ControlNet-for-Diffusers&#34;&gt;ControlNet-for-Diffusers&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;We also thank all authors for making Controlnet DEMOs, including but not limited to &lt;a href=&#34;https://huggingface.co/spaces/fffiloni/ControlNet-Video&#34;&gt;fffiloni&lt;/a&gt;, &lt;a href=&#34;https://huggingface.co/spaces/hysts/ControlNet-with-other-models&#34;&gt;other-model&lt;/a&gt;, &lt;a href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui/discussions/7784&#34;&gt;ThereforeGames&lt;/a&gt;, &lt;a href=&#34;https://huggingface.co/spaces/RamAnanth1/ControlNet&#34;&gt;RamAnanth1&lt;/a&gt;, etc!&lt;/p&gt; &#xA;&lt;p&gt;Besides, you may also want to read these amazing related works:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/damo-vilab/composer&#34;&gt;Composer: Creative and Controllable Image Synthesis with Composable Conditions&lt;/a&gt;: A much bigger model to control diffusion!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/TencentARC/T2I-Adapter&#34;&gt;T2I-Adapter: Learning Adapters to Dig out More Controllable Ability for Text-to-Image Diffusion Models&lt;/a&gt;: A much smaller model to control stable diffusion!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/HighCWu/ControlLoRA&#34;&gt;ControlLoRA: A Light Neural Network To Control Stable Diffusion Spatial Information&lt;/a&gt;: Implement Controlnet using LORA!&lt;/p&gt; &#xA;&lt;p&gt;And these amazing recent projects: &lt;a href=&#34;https://www.timothybrooks.com/instruct-pix2pix&#34;&gt;InstructPix2Pix Learning to Follow Image Editing Instructions&lt;/a&gt;, &lt;a href=&#34;https://github.com/pix2pixzero/pix2pix-zero&#34;&gt;Pix2pix-zero: Zero-shot Image-to-Image Translation&lt;/a&gt;, &lt;a href=&#34;https://github.com/MichalGeyer/plug-and-play&#34;&gt;Plug-and-Play Diffusion Features for Text-Driven Image-to-Image Translation&lt;/a&gt;, &lt;a href=&#34;https://arxiv.org/abs/2302.05496&#34;&gt;MaskSketch: Unpaired Structure-guided Masked Image Generation&lt;/a&gt;, &lt;a href=&#34;https://arxiv.org/abs/2301.12247&#34;&gt;SEGA: Instructing Diffusion using Semantic Dimensions&lt;/a&gt;, &lt;a href=&#34;https://github.com/arpitbansal297/Universal-Guided-Diffusion&#34;&gt;Universal Guidance for Diffusion Models&lt;/a&gt;, &lt;a href=&#34;https://github.com/haha-lisa/RDM-Region-Aware-Diffusion-Model&#34;&gt;Region-Aware Diffusion for Zero-shot Text-driven Image Editing&lt;/a&gt;, &lt;a href=&#34;https://arxiv.org/abs/2301.05225&#34;&gt;Domain Expansion of Image Generators&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/LambdaAPI/status/1626327289288957956&#34;&gt;Image Mixer&lt;/a&gt;, &lt;a href=&#34;https://multidiffusion.github.io/&#34;&gt;MultiDiffusion: Fusing Diffusion Paths for Controlled Image Generation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Citation&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{zhang2023adding,&#xA;  title={Adding Conditional Control to Text-to-Image Diffusion Models}, &#xA;  author={Lvmin Zhang and Maneesh Agrawala},&#xA;  year={2023},&#xA;  eprint={2302.05543},&#xA;  archivePrefix={arXiv},&#xA;  primaryClass={cs.CV}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2302.05543&#34;&gt;Arxiv Link&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>