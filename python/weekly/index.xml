<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-07T01:46:23Z</updated>
  <subtitle>Weekly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Kedreamix/Linly-Talker</title>
    <updated>2024-07-07T01:46:23Z</updated>
    <id>tag:github.com,2024-07-07:/Kedreamix/Linly-Talker</id>
    <link href="https://github.com/Kedreamix/Linly-Talker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Digital Avatar Conversational System - Linly-Talker. üòÑ‚ú® Linly-Talker is an intelligent AI system that combines large language models (LLMs) with visual models to create a novel human-AI interaction method. ü§ùü§ñ It integrates various technologies like Whisper, Linly, Microsoft Speech Services, and SadTalker talking head generation system. üåüüî¨&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Digital Human Intelligent Dialogue System - Linly-Talker ‚Äî &#39;Interactive Dialogue with Your Virtual Self&#39;&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Linly-Talker WebUI&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/Kedreamix/Linly-Talker&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/made_with-%E2%9D%A4-red?style=for-the-badge&amp;amp;labelColor=orange&#34; alt=&#34;madewithlove&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/docs/linly_logo.png&#34;&gt;&lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/Kedreamix/Linly-Talker/blob/main/colab_webui.ipynb&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Colab-F9AB00?style=for-the-badge&amp;amp;logo=googlecolab&amp;amp;color=525252&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Kedreamix/Linly-Talker/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/LICENSE-MIT-green.svg?style=for-the-badge&#34; alt=&#34;Licence&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/Kedreamix/Linly-Talker&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20-Models%20Repo-yellow.svg?style=for-the-badge&#34; alt=&#34;Huggingface&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/README.md&#34;&gt;&lt;strong&gt;English&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/README_zh.md&#34;&gt;&lt;strong&gt;‰∏≠ÊñáÁÆÄ‰Ωì&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;strong&gt;2023.12 Update&lt;/strong&gt; üìÜ&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Users can upload any images for the conversation&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2024.01 Update&lt;/strong&gt; üìÜüìÜ&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exciting news! I&#39;ve now incorporated both the powerful GeminiPro and Qwen large models into our conversational scene. Users can now upload images during the conversation, adding a whole new dimension to the interactions.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The deployment invocation method for FastAPI has been updated.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The advanced settings options for Microsoft TTS have been updated, increasing the variety of voice types. Additionally, video subtitles have been introduced to enhance visualization.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Updated the GPT multi-turn conversation system to establish contextual connections in dialogue, enhancing the interactivity and realism of the digital persona.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;2024.02 Update&lt;/strong&gt; üìÜ&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Updated Gradio to the latest version 4.16.0, providing the interface with additional functionalities such as capturing images from the camera to create digital personas, among others.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ASR and THG have been updated. FunASR from Alibaba has been integrated into ASR, enhancing its speed significantly. Additionally, the THG section now incorporates the Wav2Lip model, while ER-NeRF is currently in preparation (Coming Soon).&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;I have incorporated the GPT-SoVITS model, which is a voice cloning method. By fine-tuning it with just one minute of a person&#39;s speech data, it can effectively clone their voice. The results are quite impressive and worth recommending.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;I have integrated a web user interface (WebUI) that allows for better execution of Linly-Talker.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;2024.04 Update&lt;/strong&gt; üìÜ&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Updated the offline mode for Paddle TTS, excluding Edge TTS.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Updated ER-NeRF as one of the choices for Avatar generation.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Updated app_talk.py to allow for the free upload of voice and images/videos for generation without being based on a dialogue scenario.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;2024.05 Update&lt;/strong&gt; üìÜ&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Updated the beginner-friendly AutoDL deployment tutorial, and also updated the codewithgpu image, allowing for one-click experience and learning.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Updated WebUI.py: Linly-Talker WebUI now supports multiple modules, multiple models, and multiple options&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;2024.06 Update&lt;/strong&gt; üìÜ&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Integrated MuseTalk into Linly-Talker and updated the WebUI, enabling basic real-time conversation capabilities.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The refined WebUI defaults to not loading the LLM model to reduce GPU memory usage. It directly responds with text to complete voiceovers. The enhanced WebUI features three main functions: personalized character generation, multi-turn intelligent dialogue with digital humans, and real-time MuseTalk conversations. These improvements reduce previous GPU memory redundancies and add more prompts to assist users effectively.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Content&lt;/summary&gt; &#xA; &lt;!-- TOC --&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#digital-human-intelligent-dialogue-system---linly-talker--interactive-dialogue-with-your-virtual-self&#34;&gt;Digital Human Intelligent Dialogue System - Linly-Talker ‚Äî &#39;Interactive Dialogue with Your Virtual Self&#39;&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#to-do-list&#34;&gt;TO DO LIST&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#example&#34;&gt;Example&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#setup-environment&#34;&gt;Setup Environment&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#asr---speech-recognition&#34;&gt;ASR - Speech Recognition&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#whisper&#34;&gt;Whisper&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#funasr&#34;&gt;FunASR&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#coming-soon&#34;&gt;Coming Soon&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#tts---text-to-speech&#34;&gt;TTS - Text To Speech&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#edge-tts&#34;&gt;Edge TTS&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#paddletts&#34;&gt;PaddleTTS&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#coming-soon-1&#34;&gt;Coming Soon&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#voice-clone&#34;&gt;Voice Clone&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#gpt-sovitsrecommend&#34;&gt;GPT-SoVITSÔºàRecommendÔºâ&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#xtts&#34;&gt;XTTS&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#coming-soon-2&#34;&gt;Coming Soon&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#thg---avatar&#34;&gt;THG - Avatar&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#sadtalker&#34;&gt;SadTalker&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#wav2lip&#34;&gt;Wav2Lip&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#er-nerf&#34;&gt;ER-NeRF&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#musetalk&#34;&gt;MuseTalk&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#coming-soon-3&#34;&gt;Coming Soon&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#llm---conversation&#34;&gt;LLM - Conversation&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#linly-ai&#34;&gt;Linly-AI&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#qwen&#34;&gt;Qwen&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#gemini-pro&#34;&gt;Gemini-Pro&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#chatgpt&#34;&gt;ChatGPT&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#chatglm&#34;&gt;ChatGLM&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#gpt4free&#34;&gt;GPT4Free&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#llm-multiple-model-selection&#34;&gt;LLM Multiple Model Selection&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#coming-soon-4&#34;&gt;Coming Soon&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#optimizations&#34;&gt;Optimizations&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#gradio&#34;&gt;Gradio&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#start-webui&#34;&gt;Start WebUI&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#webui&#34;&gt;WebUI&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#old-verison&#34;&gt;Old Verison&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#folder-structure&#34;&gt;Folder structure&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#support-us&#34;&gt;Support Us&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#reference&#34;&gt;Reference&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/#star-history&#34;&gt;Star History&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;!-- /TOC --&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Linly-Talker is an innovative digital human conversation system that integrates the latest artificial intelligence technologies, including Large Language Models (LLM) ü§ñ, Automatic Speech Recognition (ASR) üéôÔ∏è, Text-to-Speech (TTS) üó£Ô∏è, and voice cloning technology üé§. This system offers an interactive web interface through the Gradio platform üåê, allowing users to upload images üì∑ and engage in personalized dialogues with AI üí¨.&lt;/p&gt; &#xA;&lt;p&gt;The core features of the system include:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-Model Integration&lt;/strong&gt;: Linly-Talker combines major models such as Linly, GeminiPro, Qwen, as well as visual models like Whisper, SadTalker, to achieve high-quality dialogues and visual generation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-Turn Conversational Ability&lt;/strong&gt;: Through the multi-turn dialogue system powered by GPT models, Linly-Talker can understand and maintain contextually relevant and coherent conversations, significantly enhancing the authenticity of the interaction.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Voice Cloning&lt;/strong&gt;: Utilizing technologies like GPT-SoVITS, users can upload a one-minute voice sample for fine-tuning, and the system will clone the user&#39;s voice, enabling the digital human to converse in the user&#39;s voice.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Real-Time Interaction&lt;/strong&gt;: The system supports real-time speech recognition and video captioning, allowing users to communicate naturally with the digital human via voice.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Visual Enhancement&lt;/strong&gt;: With digital human generation technologies, Linly-Talker can create realistic digital human avatars, providing a more immersive experience.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The design philosophy of Linly-Talker is to create a new form of human-computer interaction that goes beyond simple Q&amp;amp;A. By integrating advanced technologies, it offers an intelligent digital human capable of understanding, responding to, and simulating human communication.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/docs/HOI_en.png&#34; alt=&#34;The system architecture of multimodal human‚Äìcomputer interaction.&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can watch the demo video &lt;a href=&#34;https://www.bilibili.com/video/BV1rN4y1a76x/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;I have recorded a series of videos on Bilibili, which also represent every step of my updates and methods of use. For detailed information, please refer to &lt;a href=&#34;https://space.bilibili.com/241286257/channel/collectiondetail?sid=2065753&#34;&gt;Digital Human Dialogue System - Linly-Talker Collection&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1rN4y1a76x/&#34;&gt;üî•üî•üî• Digital Human Dialogue System Linly-Talker üî•üî•üî•&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1S4421A7gh/&#34;&gt;üöÄ The Future of Digital Humans: The Empowerment Path of Linly-Talker + GPT-SoVIT Voice Cloning Technology&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1uT421m74z/&#34;&gt;Deploying Linly-Talker on AutoDL Platform (Super Detailed Tutorial for Beginners)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Mr421u7NN/&#34;&gt;Linly-Talker Update: Offline TTS Integration and Customized Digital Human Solutions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;TO DO LIST&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Completed the basic conversation system flow, capable of &lt;code&gt;voice interactions&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Integrated the LLM large model, including the usage of &lt;code&gt;Linly&lt;/code&gt;, &lt;code&gt;Qwen&lt;/code&gt;, and &lt;code&gt;GeminiPro&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Enabled the ability to upload &lt;code&gt;any digital person&#39;s photo&lt;/code&gt; for conversation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Integrated &lt;code&gt;FastAPI&lt;/code&gt; invocation for Linly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Utilized Microsoft &lt;code&gt;TTS&lt;/code&gt; with advanced options, allowing customization of voice and tone parameters to enhance audio diversity.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;Added subtitles&lt;/code&gt; to video generation for improved visualization.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GPT &lt;code&gt;Multi-turn Dialogue System&lt;/code&gt; (Enhance the interactivity and realism of digital entities, bolstering their intelligence)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Optimized the Gradio interface by incorporating additional models such as Wav2Lip, FunASR, and others.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;Voice Cloning&lt;/code&gt; Technology (Synthesize one&#39;s own voice using voice cloning to enhance the realism and interactive experience of digital entities)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Integrate offline TTS (Text-to-Speech) along with NeRF-based methods and models.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Linly-Talker WebUI supports multiple modules, multiple models, and multiple options&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Added MuseTalk functionality to Linly-Talker, achieving near real-time speed with very fast communication.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Integrated MuseTalk into the Linly-Talker WebUI.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;Real-time&lt;/code&gt; Speech Recognition (Enable conversation and communication between humans and digital entities using voice)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;üîÜ The Linly-Talker project is ongoing - pull requests are welcome! If you have any suggestions regarding new model approaches, research, techniques, or if you discover any runtime errors, please feel free to edit and submit a pull request. You can also open an issue or contact me directly via email. üì©‚≠ê If you find this repository useful, please give it a star! ü§©&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you encounter any issues during deployment, please consult the &lt;a href=&#34;https://github.com/Kedreamix/Linly-Talker/raw/main/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB.md&#34;&gt;Common Issues Summary&lt;/a&gt; section, where I have compiled a list of all potential problems. Additionally, a discussion group is available here, and I will provide regular updates. Thank you for your attention and use of Linly-Talker!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;ÊñáÂ≠ó/ËØ≠Èü≥ÂØπËØù&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Êï∞Â≠ó‰∫∫ÂõûÁ≠î&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Â∫îÂØπÂéãÂäõÊúÄÊúâÊïàÁöÑÊñπÊ≥ïÊòØ‰ªÄ‰πàÔºü&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&#xA;    &lt;video src=&#34;https://github.com/Kedreamix/Linly-Talker/assets/61195303/f1deb189-b682-4175-9dea-7eeb0fb392ca&#34;&gt;&lt;/video&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Â¶Ç‰ΩïËøõË°åÊó∂Èó¥ÁÆ°ÁêÜÔºü&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&#xA;    &lt;video src=&#34;https://github.com/Kedreamix/Linly-Talker/assets/61195303/968b5c43-4dce-484b-b6c6-0fd4d621ac03&#34;&gt;&lt;/video&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Êí∞ÂÜô‰∏ÄÁØá‰∫§Âìç‰πêÈü≥‰πê‰ºöËØÑËÆ∫ÔºåËÆ®ËÆ∫‰πêÂõ¢ÁöÑË°®ÊºîÂíåËßÇ‰ºóÁöÑÊï¥‰Ωì‰ΩìÈ™å„ÄÇ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&#xA;    &lt;video src=&#34;https://github.com/Kedreamix/Linly-Talker/assets/61195303/f052820f-6511-4cf0-a383-daf8402630db&#34;&gt;&lt;/video&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ÁøªËØëÊàê‰∏≠ÊñáÔºöLuck is a dividend of sweat. The more you sweat, the luckier you get.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&#xA;    &lt;video src=&#34;https://github.com/Kedreamix/Linly-Talker/assets/61195303/118eec13-a9f7-4c38-b4ad-044d36ba9776&#34;&gt;&lt;/video&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Setup Environment&lt;/h2&gt; &#xA;&lt;p&gt;AutoDL has released an image, which can be used directly at &lt;a href=&#34;https://www.codewithgpu.com/i/Kedreamix/Linly-Talker/Kedreamix-Linly-Talker&#34;&gt;https://www.codewithgpu.com/i/Kedreamix/Linly-Talker/Kedreamix-Linly-Talker&lt;/a&gt;. You can also create an environment directly using Docker. I will continue to update the image.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull registry.cn-beijing.aliyuncs.com/codewithgpu2/kedreamix-linly-talker:cMDvNE4RYl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Windows, I&#39;ve included an all-in-one Python package. You can run the steps in sequence to install the necessary dependencies and download the corresponding model to get it running. Follow the instructions using &lt;code&gt;conda&lt;/code&gt; and start installing PyTorch from step 02. If you encounter any issues, please feel free to contact me.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pan.quark.cn/s/cc8f19c45a15&#34;&gt;Windows All-in-One Package&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Download the code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/Kedreamix/Linly-Talker.git --depth 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;‰ª•‰∏ãÊòØËøôÊÆµÊñáÂ≠óÁöÑËã±ÊñáÁøªËØëÔºö&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;If you are using Linly-Talker, you can set up the environment directly with Anaconda, which covers almost all the dependencies required by the models. The specific steps are as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda create -n linly python=3.10  &#xA;conda activate linly&#xA;&#xA;# PyTorch installation method 1: Install via conda&#xA;# CUDA 11.7&#xA;# conda install pytorch==2.0.1 torchvision==0.15.2 torchaudio==2.0.2 pytorch-cuda=11.7 -c pytorch -c nvidia&#xA;# CUDA 11.8&#xA;# conda install pytorch==2.0.1 torchvision==0.15.2 torchaudio==2.0.2 pytorch-cuda=11.8 -c pytorch -c nvidia&#xA;&#xA;# PyTorch installation method 2: Install via pip&#xA;# CUDA 11.7&#xA;# pip install torch==2.0.1 torchvision==0.15.2 torchaudio==2.0.2&#xA;# CUDA 11.8&#xA;pip install torch==2.0.1 torchvision==0.15.2 torchaudio==2.0.2 --index-url https://download.pytorch.org/whl/cu118&#xA;&#xA;conda install -q ffmpeg # Install ffmpeg==4.2.2&#xA;&#xA;# Upgrade pip&#xA;python -m pip install --upgrade pip&#xA;# Change the PyPI source to speed up the installation of packages&#xA;pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple&#xA;&#xA;pip install tb-nightly -i https://mirrors.aliyun.com/pypi/simple&#xA;pip install -r requirements_webui.txt&#xA;&#xA;# Install dependencies related to musetalk&#xA;pip install --no-cache-dir -U openmim&#xA;mim install mmengine &#xA;mim install &#34;mmcv&amp;gt;=2.0.1&#34; &#xA;mim install &#34;mmdet&amp;gt;=3.1.0&#34; &#xA;mim install &#34;mmpose&amp;gt;=1.1.0&#34; &#xA;&#xA;# Install NeRF-based dependencies, which might have several issues and can be skipped initially&#xA;pip install &#34;git+https://github.com/facebookresearch/pytorch3d.git&#34;&#xA;pip install -r TFG/requirements_nerf.txt&#xA;&#xA;# If there are issues with pyaudio, install the corresponding dependencies&#xA;# sudo apt-get update&#xA;# sudo apt-get install libasound-dev portaudio19-dev libportaudio2 libportaudiocpp0&#xA;&#xA;# Note the following modules. If installation fails, you can enter the directory and use pip install . or python setup.py install to compile and install:&#xA;# NeRF/freqencoder&#xA;# NeRF/gridencoder&#xA;# NeRF/raymarching&#xA;# NeRF/shencoder&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Below are some older installation methods, which might cause dependency conflicts, but they generally don&#39;t produce many bugs. For an easier and better installation, I&#39;ve updated the above version. You can ignore the following versions or refer to them if you encounter issues.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;To install the environment using Anaconda and PyTorch, follow the steps below:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda create -n linly python=3.10&#xA;conda activate linly&#xA;&#xA;# PyTorch Installation Method 1: Conda Installation (Recommended)&#xA;conda install pytorch==1.12.1 torchvision==0.13.1 torchaudio==0.12.1 cudatoolkit=11.3 -c pytorch&#xA;&#xA;# PyTorch Installation Method 2: Pip Installation&#xA;pip install torch==1.12.1+cu113 torchvision==0.13.1+cu113 torchaudio==0.12.1 --extra-index-url https://download.pytorch.org/whl/cu113&#xA;&#xA;conda install -q ffmpeg # ffmpeg==4.2.2&#xA;&#xA;pip install -r requirements_app.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you want to use models like voice cloning, you may need a higher version of PyTorch. However, the functionality will be more diverse. You may need to use CUDA 11.8 as the driver version, which you can choose.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda create -n linly python=3.10  &#xA;conda activate linly&#xA;&#xA;pip install torch==2.0.1 torchvision==0.15.2 torchaudio==2.0.2 --index-url https://download.pytorch.org/whl/cu118&#xA;&#xA;conda install -q ffmpeg # ffmpeg==4.2.2&#xA;&#xA;pip install -r requirements_app.txt&#xA;&#xA;# Install dependencies for voice cloning&#xA;pip install -r VITS/requirements_gptsovits.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you wish to use NeRF-based models, you may need to set up the corresponding environment:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install dependencies for NeRF&#xA;pip install &#34;git+https://github.com/facebookresearch/pytorch3d.git&#34;&#xA;pip install -r TFG/requirements_nerf.txt&#xA;&#xA;# If there are issues with PyAudio, you can install the corresponding dependencies&#xA;# sudo apt-get install libasound-dev portaudio19-dev libportaudio2 libportaudiocpp0&#xA;&#xA;# Note the following modules. If installation is unsuccessful, you can navigate to the path and use pip install . or python setup.py install to compile and install.&#xA;# NeRF/freqencoder&#xA;# NeRF/gridencoder&#xA;# NeRF/raymarching&#xA;# NeRF/shencoder&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you are using PaddleTTS, you can set up the corresponding environment with:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r TTS/requirements_paddle.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you are using the FunASR speech recognition model, you can install the environment with:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;pip install -r ASR/requirements_funasr.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If using the MuesTalk model, you can set up the environment with the following commands:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install --no-cache-dir -U openmim &#xA;mim install mmengine &#xA;mim install &#34;mmcv&amp;gt;=2.0.1&#34; &#xA;mim install &#34;mmdet&amp;gt;=3.1.0&#34; &#xA;mim install &#34;mmpose&amp;gt;=1.1.0&#34; &#xA;pip install -r TFG/requirements_musetalk.txt &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Next, you need to install the corresponding models. You can download them using the following methods. Once downloaded, place the files in the specified folder structure (explained at the end of this document).&lt;/p&gt; &#xA;&lt;p&gt;We recommend downloading from Quark Netdisk for the latest updates.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pan.baidu.com/s/1eF13O-8wyw4B3MtesctQyg?pwd=linl&#34;&gt;Baidu (ÁôæÂ∫¶‰∫ëÁõò)&lt;/a&gt; (Password: &lt;code&gt;linl&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/Kedreamix/Linly-Talker&#34;&gt;huggingface&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.modelscope.cn/models/Kedreamix/Linly-Talker/summary&#34;&gt;modelscope&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pan.quark.cn/s/f48f5e35796b&#34;&gt;Quark(Â§∏ÂÖãÁΩëÁõò)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I made a script that can download all the models mentioned below without requiring much input from the user. This method is suitable for stable network conditions, especially for Linux users. For Windows users, Git can also be used to download the models. If the network connection is unstable, users can choose to manually download the models or try running a Shell script to complete the download. The script has the following features:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Choose Download Method&lt;/strong&gt;: Users can choose to download models from three different sources: ModelScope, Huggingface, or Huggingface mirror site.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Download Models&lt;/strong&gt;: Based on the user&#39;s selection, the script executes the corresponding download command.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Move Model Files&lt;/strong&gt;: After downloading, the script moves the model files to the specified directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Error Handling&lt;/strong&gt;: Error checks are included in each step of the operation. If any step fails, the script will output an error message and stop execution.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sh scripts/download_models.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;HuggingFace Download&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If the download speed is too slow, consider using a mirror site. For more information, refer to &lt;a href=&#34;https://kedreamix.github.io/2024/01/05/Note/HuggingFace/?highlight=%E9%95%9C%E5%83%8F&#34;&gt;Efficiently Obtain Hugging Face Models Using Mirror Sites&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Download pre-trained models from HuggingFace&#xA;git lfs install&#xA;git clone https://huggingface.co/Kedreamix/Linly-Talker --depth 1&#xA;# git lfs clone https://huggingface.co/Kedreamix/Linly-Talker --depth 1&#xA;&#xA;# pip install -U huggingface_hub&#xA;# export HF_ENDPOINT=https://hf-mirror.com # Use a mirror site&#xA;huggingface-cli download --resume-download --local-dir-use-symlinks False Kedreamix/Linly-Talker --local-dir Linly-Talker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;ModelScope Download&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Download pre-trained models from Modelscope&#xA;# 1. Using git&#xA;git lfs install&#xA;git clone https://www.modelscope.cn/Kedreamix/Linly-Talker.git --depth 1&#xA;# git lfs clone https://www.modelscope.cn/Kedreamix/Linly-Talker.git&#xA;&#xA;# 2. Download using Python code&#xA;pip install modelscope&#xA;from modelscope import snapshot_download&#xA;model_dir = snapshot_download(&#39;Kedreamix/Linly-Talker&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Move All Models to the Current Directory&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you downloaded from Baidu Netdisk, you can refer to the directory structure at the end of the document to move the models.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Move all models to the current directory&#xA;# Checkpoints contain SadTalker and Wav2Lip&#xA;mv Linly-Talker/checkpoints/* ./checkpoints&#xA;&#xA;# Enhanced GFPGAN for SadTalker&#xA;# pip install gfpgan&#xA;# mv Linly-Talker/gfpan ./&#xA;&#xA;# Voice cloning models&#xA;mv Linly-Talker/GPT_SoVITS/pretrained_models/* ./GPT_SoVITS/pretrained_models/&#xA;&#xA;# Qwen large language model&#xA;mv Linly-Talker/Qwen ./&#xA;&#xA;# MuseTalk model&#xA;mkdir -p ./Musetalk/models&#xA;mv Linly-Talker/MuseTalk/* ./Musetalk/models&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the convenience of deployment and usage, an &lt;code&gt;configs.py&lt;/code&gt; file has been updated. You can modify some hyperparameters in this file for customization:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Device Running Port&#xA;port = 7870&#xA;&#xA;# API Running Port and IP&#xA;# Localhost port is 127.0.0.1; for global port forwarding, use &#34;0.0.0.0&#34;&#xA;ip = &#39;127.0.0.1&#39;&#xA;api_port = 7871&#xA;&#xA;# Linly Model Path&#xA;mode = &#39;api&#39;  # For &#39;api&#39;, Linly-api-fast.py must be run first&#xA;mode = &#39;offline&#39;&#xA;model_path = &#39;Linly-AI/Chinese-LLaMA-2-7B-hf&#39;&#xA;&#xA;# SSL Certificate (required for microphone interaction)&#xA;# Preferably an absolute path&#xA;ssl_certfile = &#34;./https_cert/cert.pem&#34;&#xA;ssl_keyfile = &#34;./https_cert/key.pem&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This file allows you to adjust parameters such as the device running port, API running port, Linly model path, and SSL certificate paths for ease of deployment and configuration.&lt;/p&gt; &#xA;&lt;h2&gt;ASR - Speech Recognition&lt;/h2&gt; &#xA;&lt;p&gt;For detailed information about the usage and code implementation of Automatic Speech Recognition (ASR), please refer to &lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/ASR/README.md&#34;&gt;ASR - Bridging the Gap with Digital Humans&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Whisper&lt;/h3&gt; &#xA;&lt;p&gt;To implement ASR (Automatic Speech Recognition) using OpenAI&#39;s Whisper, you can refer to the specific usage methods provided in the GitHub repository: &lt;a href=&#34;https://github.com/openai/whisper&#34;&gt;https://github.com/openai/whisper&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;FunASR&lt;/h3&gt; &#xA;&lt;p&gt;The speech recognition performance of Alibaba&#39;s FunASR is quite impressive and it is actually better than Whisper in terms of Chinese language. Additionally, FunASR is capable of achieving real-time results, making it a great choice. You can experience FunASR by accessing the FunASR file in the ASR folder. Please refer to &lt;a href=&#34;https://github.com/alibaba-damo-academy/FunASR&#34;&gt;https://github.com/alibaba-damo-academy/FunASR&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Coming Soon&lt;/h3&gt; &#xA;&lt;p&gt;Welcome everyone to provide suggestions, motivating me to continuously update the models and enrich the functionality of Linly-Talker.&lt;/p&gt; &#xA;&lt;h2&gt;TTS - Text To Speech&lt;/h2&gt; &#xA;&lt;p&gt;For detailed information about the usage and code implementation of Text-to-Speech (TTS), please refer to &lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/TTS/README.md&#34;&gt;TTS - Empowering Digital Humans with Natural Speech Interaction&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Edge TTS&lt;/h3&gt; &#xA;&lt;p&gt;To use Microsoft Edge&#39;s online text-to-speech service from Python without needing Microsoft Edge or Windows or an API key, you can refer to the GitHub repository at &lt;a href=&#34;https://github.com/rany2/edge-tts&#34;&gt;https://github.com/rany2/edge-tts&lt;/a&gt;. It provides a Python module called &#34;edge-tts&#34; that allows you to utilize the service. You can find detailed installation instructions and usage examples in the repository&#39;s README file.&lt;/p&gt; &#xA;&lt;h3&gt;PaddleTTS&lt;/h3&gt; &#xA;&lt;p&gt;In practical use, there may be scenarios that require offline operation. Since Edge TTS requires an online environment to generate speech, we have chosen PaddleSpeech, another open-source alternative, for Text-to-Speech (TTS). Although there might be some differences in the quality, PaddleSpeech supports offline operations. For more information, you can refer to the GitHub page of PaddleSpeech: &lt;a href=&#34;https://github.com/PaddlePaddle/PaddleSpeech&#34;&gt;https://github.com/PaddlePaddle/PaddleSpeech&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Coming Soon&lt;/h3&gt; &#xA;&lt;p&gt;Welcome everyone to provide suggestions, motivating me to continuously update the models and enrich the functionality of Linly-Talker.&lt;/p&gt; &#xA;&lt;h2&gt;Voice Clone&lt;/h2&gt; &#xA;&lt;p&gt;For detailed information about the usage and code implementation of Voice Clone, please refer to &lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/VITS/README.md&#34;&gt;Voice Clone - Stealing Your Voice Quietly During Conversations&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;GPT-SoVITSÔºàRecommendÔºâ&lt;/h3&gt; &#xA;&lt;p&gt;Thank you for your open source contribution. I have also found the &lt;code&gt;GPT-SoVITS&lt;/code&gt; voice cloning model to be quite impressive. You can find the project at &lt;a href=&#34;https://github.com/RVC-Boss/GPT-SoVITS&#34;&gt;https://github.com/RVC-Boss/GPT-SoVITS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;XTTS&lt;/h3&gt; &#xA;&lt;p&gt;Coqui XTTS is a leading deep learning toolkit for Text-to-Speech (TTS) tasks, allowing for voice cloning and voice transfer to different languages using a 5-second or longer audio clip.&lt;/p&gt; &#xA;&lt;p&gt;üê∏ TTS is a library for advanced text-to-speech generation.&lt;/p&gt; &#xA;&lt;p&gt;üöÄ Over 1100 pre-trained models for various languages.&lt;/p&gt; &#xA;&lt;p&gt;üõ†Ô∏è Tools for training new models and fine-tuning existing models in any language.&lt;/p&gt; &#xA;&lt;p&gt;üìö Utility programs for dataset analysis and management.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Experience XTTS online &lt;a href=&#34;https://huggingface.co/spaces/coqui/xtts&#34;&gt;https://huggingface.co/spaces/coqui/xtts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Official GitHub repository: &lt;a href=&#34;https://github.com/coqui-ai/TTS&#34;&gt;https://github.com/coqui-ai/TTS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Coming Soon&lt;/h3&gt; &#xA;&lt;p&gt;Welcome everyone to provide suggestions, motivating me to continuously update the models and enrich the functionality of Linly-Talker.&lt;/p&gt; &#xA;&lt;h2&gt;THG - Avatar&lt;/h2&gt; &#xA;&lt;p&gt;Detailed information about the usage and code implementation of digital human generation can be found in &lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/TFG/README.md&#34;&gt;THG - Building Intelligent Digital Humans&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;SadTalker&lt;/h3&gt; &#xA;&lt;p&gt;Digital persona generation can utilize SadTalker (CVPR 2023). For detailed information, please visit &lt;a href=&#34;https://sadtalker.github.io&#34;&gt;https://sadtalker.github.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Before usage, download the SadTalker model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash scripts/sadtalker_download_models.sh  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pan.baidu.com/s/1eF13O-8wyw4B3MtesctQyg?pwd=linl&#34;&gt;Baidu (ÁôæÂ∫¶‰∫ëÁõò)&lt;/a&gt; (Password: &lt;code&gt;linl&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pan.quark.cn/s/f48f5e35796b&#34;&gt;Quark(Â§∏ÂÖãÁΩëÁõò)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If downloading from Baidu Cloud, remember to place it in the &lt;code&gt;checkpoints&lt;/code&gt; folder. The model downloaded from Baidu Cloud is named &lt;code&gt;sadtalker&lt;/code&gt; by default, but it should be renamed to &lt;code&gt;checkpoints&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Wav2Lip&lt;/h3&gt; &#xA;&lt;p&gt;Digital persona generation can also utilize Wav2Lip (ACM 2020). For detailed information, refer to &lt;a href=&#34;https://github.com/Rudrabha/Wav2Lip&#34;&gt;https://github.com/Rudrabha/Wav2Lip&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Before usage, download the Wav2Lip model:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Link to the model&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Wav2Lip&lt;/td&gt; &#xA;   &lt;td&gt;Highly accurate lip-sync&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://iiitaphyd-my.sharepoint.com/:u:/g/personal/radrabha_m_research_iiit_ac_in/Eb3LEzbfuKlJiR600lQWRxgBIY27JZg80f7V9jtMfbNDaQ?e=TBFBVW&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Wav2Lip + GAN&lt;/td&gt; &#xA;   &lt;td&gt;Slightly inferior lip-sync, but better visual quality&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://iiitaphyd-my.sharepoint.com/:u:/g/personal/radrabha_m_research_iiit_ac_in/EdjI7bZlgApMqsVoEUUXpLsBxqXbn5z8VTmoxp55YNDcIA?e=n9ljGW&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Expert Discriminator&lt;/td&gt; &#xA;   &lt;td&gt;Weights of the expert discriminator&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://iiitaphyd-my.sharepoint.com/:u:/g/personal/radrabha_m_research_iiit_ac_in/EQRvmiZg-HRAjvI6zqN9eTEBP74KefynCwPWVmF57l-AYA?e=ZRPHKP&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Visual Quality Discriminator&lt;/td&gt; &#xA;   &lt;td&gt;Weights of the visual disc trained in a GAN setup&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://iiitaphyd-my.sharepoint.com/:u:/g/personal/radrabha_m_research_iiit_ac_in/EQVqH88dTm1HjlK11eNba5gBbn15WMS0B0EZbDBttqrqkg?e=ic0ljo&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;ER-NeRF&lt;/h3&gt; &#xA;&lt;p&gt;ER-NeRF (ICCV 2023) is a digital human built using the latest NeRF technology. It allows for the customization of digital characters and can reconstruct them using just a five-minute video of a person. For more details, please refer to &lt;a href=&#34;https://github.com/Fictionarry/ER-NeRF&#34;&gt;https://github.com/Fictionarry/ER-NeRF&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Updated: Taking inspiration from the likeness of Obama, for better results, consider cloning and customizing the voice of digital personas for improved effectiveness.&lt;/p&gt; &#xA;&lt;h3&gt;MuseTalk&lt;/h3&gt; &#xA;&lt;p&gt;MuseTalk is a real-time, high-quality audio-driven lip synchronization model capable of running at over 30 frames per second on an NVIDIA Tesla V100 GPU. This model can be integrated with input videos generated by MuseV, forming a part of a comprehensive virtual human solution. For more details, please refer to &lt;a href=&#34;https://github.com/TMElyralab/MuseTalk&#34;&gt;https://github.com/TMElyralab/MuseTalk&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;MuseTalk is trained to operate within the latent space of ft-mse-vae and offers the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Unseen Face Synchronization&lt;/strong&gt;: It can modify unseen faces based on input audio, with a face region size of 256 x 256.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-language Support&lt;/strong&gt;: Supports audio inputs in various languages, including Chinese, English, and Japanese.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;High-performance Real-time Inference&lt;/strong&gt;: Achieves real-time inference at over 30 frames per second on an NVIDIA Tesla V100.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Facial Center Point Adjustment&lt;/strong&gt;: Allows the adjustment of the facial region&#39;s center point, significantly impacting the generated results.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HDTF Dataset Training&lt;/strong&gt;: Provides model checkpoints trained on the HDTF dataset.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Upcoming Training Code Release&lt;/strong&gt;: Training code will be released soon, facilitating further development and research.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;MuseTalk offers an efficient and versatile tool for precise audio synchronization with facial expressions in virtual humans, marking a significant step towards fully interactive virtual personas.&lt;/p&gt; &#xA;&lt;p&gt;In Linly-Talker, MuseTalk has been integrated to perform inference on videos based on MuseV, achieving an ideal speed for conversations with near real-time performance. This approach works very well and supports streaming-based inference.&lt;/p&gt; &#xA;&lt;h3&gt;Coming Soon&lt;/h3&gt; &#xA;&lt;p&gt;Welcome everyone to provide suggestions, motivating me to continuously update the models and enrich the functionality of Linly-Talker.&lt;/p&gt; &#xA;&lt;h2&gt;LLM - Conversation&lt;/h2&gt; &#xA;&lt;p&gt;For detailed information about the usage and code implementation of Large Language Models (LLM), please refer to &lt;a href=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/LLM/README.md&#34;&gt;LLM - Empowering Digital Humans with Powerful Language Models&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Linly-AI&lt;/h3&gt; &#xA;&lt;p&gt;Linly-AI is a Large Language model developed by CVI at Shenzhen University. You can find more information about Linly-AI on their GitHub repository: &lt;a href=&#34;https://github.com/CVI-SZU/Linly&#34;&gt;https://github.com/CVI-SZU/Linly&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Download Linly models: &lt;a href=&#34;https://huggingface.co/Linly-AI/Chinese-LLaMA-2-7B-hf&#34;&gt;https://huggingface.co/Linly-AI/Chinese-LLaMA-2-7B-hf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;git&lt;/code&gt; to download:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git lfs install&#xA;git clone https://huggingface.co/Linly-AI/Chinese-LLaMA-2-7B-hf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can use the &lt;code&gt;huggingface&lt;/code&gt; download tool &lt;code&gt;huggingface-cli&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -U huggingface_hub&#xA;&#xA;# Set up mirror acceleration&#xA;# Linux&#xA;export HF_ENDPOINT=&#34;https://hf-mirror.com&#34;&#xA;# Windows PowerShell&#xA;$env:HF_ENDPOINT=&#34;https://hf-mirror.com&#34;&#xA;&#xA;huggingface-cli download --resume-download Linly-AI/Chinese-LLaMA-2-7B-hf --local-dir Linly-AI/Chinese-LLaMA-2-7B-hf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Qwen&lt;/h3&gt; &#xA;&lt;p&gt;Qwen is an AI model developed by Alibaba Cloud. You can check out the GitHub repository for Qwen here: &lt;a href=&#34;https://github.com/QwenLM/Qwen&#34;&gt;https://github.com/QwenLM/Qwen&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to quickly use Qwen, you can choose the 1.8B model, which has fewer parameters and can run smoothly even with limited GPU memory. Of course, this part can be replaced with other options.&lt;/p&gt; &#xA;&lt;p&gt;You can download the Qwen 1.8B model from this link: &lt;a href=&#34;https://huggingface.co/Qwen/Qwen-1_8B-Chat&#34;&gt;https://huggingface.co/Qwen/Qwen-1_8B-Chat&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;git&lt;/code&gt; to download:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git lfs install&#xA;git clone https://huggingface.co/Qwen/Qwen-1_8B-Chat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can use the &lt;code&gt;huggingface&lt;/code&gt; download tool &lt;code&gt;huggingface-cli&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -U huggingface_hub&#xA;&#xA;# Set up mirror acceleration&#xA;# Linux&#xA;export HF_ENDPOINT=&#34;https://hf-mirror.com&#34;&#xA;# Windows PowerShell&#xA;$env:HF_ENDPOINT=&#34;https://hf-mirror.com&#34;&#xA;&#xA;huggingface-cli download --resume-download Qwen/Qwen-1_8B-Chat --local-dir Qwen/Qwen-1_8B-Chat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Gemini-Pro&lt;/h3&gt; &#xA;&lt;p&gt;Gemini-Pro is an AI model developed by Google. To learn more about Gemini-Pro, you can visit their website: &lt;a href=&#34;https://deepmind.google/technologies/gemini/&#34;&gt;https://deepmind.google/technologies/gemini/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to request an API key for Gemini-Pro, you can visit this link: &lt;a href=&#34;https://makersuite.google.com/&#34;&gt;https://makersuite.google.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;ChatGPT&lt;/h3&gt; &#xA;&lt;p&gt;From OpenAI, requires API application. For more information, please visit &lt;a href=&#34;https://platform.openai.com/docs/introduction&#34;&gt;https://platform.openai.com/docs/introduction&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;ChatGLM&lt;/h3&gt; &#xA;&lt;p&gt;From Tsinghua University, for more information please visit &lt;a href=&#34;https://github.com/THUDM/ChatGLM3&#34;&gt;https://github.com/THUDM/ChatGLM3&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;GPT4Free&lt;/h3&gt; &#xA;&lt;p&gt;For free access to GPT-4 and other models, you can refer to &lt;a href=&#34;https://github.com/xtekky/gpt4free&#34;&gt;https://github.com/xtekky/gpt4free&lt;/a&gt;. This resource provides methods to utilize these models without cost.&lt;/p&gt; &#xA;&lt;h3&gt;LLM Multiple Model Selection&lt;/h3&gt; &#xA;&lt;p&gt;In the &lt;code&gt;webui.py&lt;/code&gt; file, easily select the model you need. ‚ö†Ô∏è For the first run, make sure to download the model first. Refer to Qwen1.8B.&lt;/p&gt; &#xA;&lt;h3&gt;Coming Soon&lt;/h3&gt; &#xA;&lt;p&gt;Welcome everyone to provide suggestions, motivating me to continuously update the models and enrich the functionality of Linly-Talker.&lt;/p&gt; &#xA;&lt;h2&gt;Optimizations&lt;/h2&gt; &#xA;&lt;p&gt;Some optimizations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use fixed input face images, extract features beforehand to avoid reading each time&lt;/li&gt; &#xA; &lt;li&gt;Remove unnecessary libraries to reduce total time&lt;/li&gt; &#xA; &lt;li&gt;Only save final video output, don&#39;t save intermediate results to improve performance&lt;/li&gt; &#xA; &lt;li&gt;Use OpenCV to generate final video instead of mimwrite for faster runtime&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Gradio&lt;/h2&gt; &#xA;&lt;p&gt;Gradio is a Python library that provides an easy way to deploy machine learning models as interactive web apps.&lt;/p&gt; &#xA;&lt;p&gt;For Linly-Talker, Gradio serves two main purposes:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Visualization &amp;amp; Demo&lt;/strong&gt;: Gradio provides a simple web GUI for the model, allowing users to see the results intuitively by uploading an image and entering text. This is an effective way to showcase the capabilities of the system.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;User Interaction&lt;/strong&gt;: The Gradio GUI can serve as a frontend to allow end users to interact with Linly-Talker. Users can upload their own images and ask arbitrary questions or have conversations to get real-time responses. This provides a more natural speech interaction method.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Specifically, we create a Gradio Interface in app.py that takes image and text inputs, calls our function to generate the response video, and displays it in the GUI. This enables browser interaction without needing to build complex frontend.&lt;/p&gt; &#xA;&lt;p&gt;In summary, Gradio provides visualization and user interaction interfaces for Linly-Talker, serving as effective means for showcasing system capabilities and enabling end users.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If considering real-time conversation, it may be necessary to switch to a different framework or customize Gradio. Looking forward to working together with everyone.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Start WebUI&lt;/h2&gt; &#xA;&lt;p&gt;Previously, I had separated many versions, but it became cumbersome to run multiple versions. Therefore, I have added a WebUI feature to provide a single interface for a seamless experience. I will continue to update it in the future.&lt;/p&gt; &#xA;&lt;h3&gt;WebUI&lt;/h3&gt; &#xA;&lt;p&gt;The current features available in the WebUI are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Text/Voice-based dialogue with virtual characters (fixed characters with male and female roles)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Dialogue with virtual characters using any image (you can upload any character image)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Multi-turn GPT dialogue (incorporating historical dialogue data to maintain context)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Voice cloning dialogue (based on GPT-SoVITS settings for voice cloning, including a built-in smoky voice that can be cloned based on the voice of the dialogue)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Digital Persona Text/Voice Playback (based on input text/voice)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Multiple modules‚ûïMultiple models‚ûïMultiple choices&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multiple role selections: Female/Male/Custom (each part can automatically upload images) Coming Soon&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multiple TTS model selections: EdgeTTS / PaddleTTS / GPT-SoVITS / Coming Soon&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multiple LLM model selections: Linly / Qwen / ChatGLM / GeminiPro / ChatGPT / Coming Soon&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multiple Talker model selections: Wav2Lip / SadTalker / ERNeRF / MuseTalk (coming soon) / Coming Soon&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multiple ASR model selections: Whisper / FunASR / Coming Soon&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/docs/WebUI2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can directly run the web UI to obtain results. The page you will see is as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# WebUI&#xA;python webui.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/docs/WebUI.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This time, we&#39;ve updated the interface. We can freely select the fine-tuned model of GPT-SoVITS to achieve voice cloning. Simply upload a reference audio file to clone the voice.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/docs/WebUI3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Old Verison&lt;/h2&gt; &#xA;&lt;p&gt;There are three modes for the current startup, and you can choose a specific setting based on the scenario.&lt;/p&gt; &#xA;&lt;p&gt;The first mode involves fixed Q&amp;amp;A with a predefined character, eliminating preprocessing time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python app.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/docs/UI.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The first mode has recently been updated to include the Wav2Lip model for dialogue.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python appv2.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The second mode allows for conversing with any uploaded image.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python app_img.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/docs/UI2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The third mode builds upon the first one by incorporating a large language model for multi-turn GPT conversations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python app_multi.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/docs/UI3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Now, the part of voice cloning has been added, allowing for freely switching between cloned voice models and corresponding person images. Here, I have chosen a deep, smoky voice and an image of a male.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python app_vits.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A fourth method has been added, which does not fixate on a specific scenario for conversation. Instead, it allows for direct input of voice or the generation of voice for the creation of a digital human. It incorporates methods such as Sadtalker, Wav2Lip, and ER-NeRF.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ER-NeRF is trained on videos of a single individual, so a specific model needs to be replaced to render and obtain the correct results. It comes with pre-installed weights for Obama, which can be used directly with the following command:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python app_talk.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/docs/UI4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;MuseTalk has been integrated into Linly-Talker, enabling efficient preprocessing of MuseV-generated videos. Once preprocessed, these videos facilitate conversations at speeds that meet near real-time requirements, providing very fast performance. MuseTalk is now available within the WebUI.&lt;/p&gt; &#xA;&lt;p&gt;To run the application, use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python app_musetalk.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/docs/UI5.png&#34; alt=&#34;WebUI Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Folder structure&lt;/h2&gt; &#xA;&lt;p&gt;The folder structure of the weight files is as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Baidu (ÁôæÂ∫¶‰∫ëÁõò)&lt;/code&gt;: You can download the weights from &lt;a href=&#34;https://pan.baidu.com/s/1eF13O-8wyw4B3MtesctQyg?pwd=linl&#34;&gt;here&lt;/a&gt; (Password: &lt;code&gt;linl&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;huggingface&lt;/code&gt;: You can access the weights at &lt;a href=&#34;https://huggingface.co/Kedreamix/Linly-Talker&#34;&gt;this link&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;modelscope&lt;/code&gt;: The weights will be available soon at &lt;a href=&#34;https://www.modelscope.cn/models/Kedreamix/Linly-Talker/files&#34;&gt;this link&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Qurak(Â§∏ÂÖãÁΩëÁõò)&lt;/code&gt;ÔºöYou can download the weights from &lt;a href=&#34;https://pan.quark.cn/s/f48f5e35796b&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Linly-Talker/ &#xA;‚îú‚îÄ‚îÄ checkpoints&#xA;‚îÇ   ‚îú‚îÄ‚îÄ audio_visual_encoder.pth&#xA;‚îÇ   ‚îú‚îÄ‚îÄ hub&#xA;‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ checkpoints&#xA;‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ s3fd-619a316812.pth&#xA;‚îÇ   ‚îú‚îÄ‚îÄ lipsync_expert.pth&#xA;‚îÇ   ‚îú‚îÄ‚îÄ mapping_00109-model.pth.tar&#xA;‚îÇ   ‚îú‚îÄ‚îÄ mapping_00229-model.pth.tar&#xA;‚îÇ   ‚îú‚îÄ‚îÄ May.json&#xA;‚îÇ   ‚îú‚îÄ‚îÄ May.pth&#xA;‚îÇ   ‚îú‚îÄ‚îÄ Obama_ave.pth&#xA;‚îÇ   ‚îú‚îÄ‚îÄ Obama.json&#xA;‚îÇ   ‚îú‚îÄ‚îÄ Obama.pth&#xA;‚îÇ   ‚îú‚îÄ‚îÄ ref_eo.npy&#xA;‚îÇ   ‚îú‚îÄ‚îÄ ref.npy&#xA;‚îÇ   ‚îú‚îÄ‚îÄ ref.wav&#xA;‚îÇ   ‚îú‚îÄ‚îÄ SadTalker_V0.0.2_256.safetensors&#xA;‚îÇ   ‚îú‚îÄ‚îÄ visual_quality_disc.pth&#xA;‚îÇ   ‚îú‚îÄ‚îÄ wav2lip_gan.pth&#xA;‚îÇ   ‚îî‚îÄ‚îÄ wav2lip.pth&#xA;‚îú‚îÄ‚îÄ gfpgan&#xA;‚îÇ&amp;nbsp;&amp;nbsp; ‚îî‚îÄ‚îÄ weights&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îú‚îÄ‚îÄ alignment_WFLW_4HG.pth&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îî‚îÄ‚îÄ detection_Resnet50_Final.pth&#xA;‚îú‚îÄ‚îÄ GPT_SoVITS&#xA;‚îÇ&amp;nbsp;&amp;nbsp; ‚îî‚îÄ‚îÄ pretrained_models&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îú‚îÄ‚îÄ chinese-hubert-base&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îÇ&amp;nbsp;&amp;nbsp; ‚îú‚îÄ‚îÄ config.json&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îÇ&amp;nbsp;&amp;nbsp; ‚îú‚îÄ‚îÄ preprocessor_config.json&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îÇ&amp;nbsp;&amp;nbsp; ‚îî‚îÄ‚îÄ pytorch_model.bin&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îú‚îÄ‚îÄ chinese-roberta-wwm-ext-large&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îÇ&amp;nbsp;&amp;nbsp; ‚îú‚îÄ‚îÄ config.json&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îÇ&amp;nbsp;&amp;nbsp; ‚îú‚îÄ‚îÄ pytorch_model.bin&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îÇ&amp;nbsp;&amp;nbsp; ‚îî‚îÄ‚îÄ tokenizer.json&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îú‚îÄ‚îÄ README.md&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îú‚îÄ‚îÄ s1bert25hz-2kh-longer-epoch=68e-step=50232.ckpt&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îú‚îÄ‚îÄ s2D488k.pth&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îú‚îÄ‚îÄ s2G488k.pth&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îî‚îÄ‚îÄ speech_paraformer-large_asr_nat-zh-cn-16k-common-vocab8404-pytorch&#xA;‚îú‚îÄ‚îÄ MuseTalk&#xA;‚îÇ   ‚îú‚îÄ‚îÄ models&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ dwpose&#xA;‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ dw-ll_ucoco_384.pth&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ face-parse-bisent&#xA;‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ 79999_iter.pth&#xA;‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ resnet18-5c106cde.pth&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ musetalk&#xA;‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ musetalk.json&#xA;‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ pytorch_model.bin&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ README.md&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ sd-vae-ft-mse&#xA;‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ config.json&#xA;‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ diffusion_pytorch_model.bin&#xA;‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ whisper&#xA;‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ tiny.pt&#xA;‚îú‚îÄ‚îÄ Qwen&#xA;‚îÇ&amp;nbsp;&amp;nbsp; ‚îî‚îÄ‚îÄ Qwen-1_8B-Chat&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îú‚îÄ‚îÄ assets&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îÇ&amp;nbsp;&amp;nbsp; ‚îú‚îÄ‚îÄ logo.jpg&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îÇ&amp;nbsp;&amp;nbsp; ‚îú‚îÄ‚îÄ qwen_tokenizer.png&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îÇ&amp;nbsp;&amp;nbsp; ‚îú‚îÄ‚îÄ react_showcase_001.png&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îÇ&amp;nbsp;&amp;nbsp; ‚îú‚îÄ‚îÄ react_showcase_002.png&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îÇ&amp;nbsp;&amp;nbsp; ‚îî‚îÄ‚îÄ wechat.png&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îú‚îÄ‚îÄ cache_autogptq_cuda_256.cpp&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îú‚îÄ‚îÄ cache_autogptq_cuda_kernel_256.cu&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îú‚îÄ‚îÄ config.json&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îú‚îÄ‚îÄ configuration_qwen.py&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îú‚îÄ‚îÄ cpp_kernels.py&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îú‚îÄ‚îÄ examples&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îÇ&amp;nbsp;&amp;nbsp; ‚îî‚îÄ‚îÄ react_prompt.md&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îú‚îÄ‚îÄ generation_config.json&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îú‚îÄ‚îÄ LICENSE&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îú‚îÄ‚îÄ model-00001-of-00002.safetensors&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îú‚îÄ‚îÄ model-00002-of-00002.safetensors&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îú‚îÄ‚îÄ modeling_qwen.py&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îú‚îÄ‚îÄ model.safetensors.index.json&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îú‚îÄ‚îÄ NOTICE&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îú‚îÄ‚îÄ qwen_generation_utils.py&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îú‚îÄ‚îÄ qwen.tiktoken&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îú‚îÄ‚îÄ README.md&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îú‚îÄ‚îÄ tokenization_qwen.py&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îî‚îÄ‚îÄ tokenizer_config.json&#xA;‚îú‚îÄ‚îÄ Whisper&#xA;‚îÇ   ‚îú‚îÄ‚îÄ base.pt&#xA;‚îÇ   ‚îî‚îÄ‚îÄ tiny.pt&#xA;‚îú‚îÄ‚îÄ FunASR&#xA;‚îÇ   ‚îú‚îÄ‚îÄ punc_ct-transformer_zh-cn-common-vocab272727-pytorch&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ configuration.json&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ config.yaml&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ example&#xA;‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ punc_example.txt&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ fig&#xA;‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ struct.png&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ model.pt&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ README.md&#xA;‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ tokens.json&#xA;‚îÇ   ‚îú‚îÄ‚îÄ speech_fsmn_vad_zh-cn-16k-common-pytorch&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ am.mvn&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ configuration.json&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ config.yaml&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ example&#xA;‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ vad_example.wav&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ fig&#xA;‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ struct.png&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ model.pt&#xA;‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ README.md&#xA;‚îÇ   ‚îî‚îÄ‚îÄ speech_seaco_paraformer_large_asr_nat-zh-cn-16k-common-vocab8404-pytorch&#xA;‚îÇ       ‚îú‚îÄ‚îÄ am.mvn&#xA;‚îÇ       ‚îú‚îÄ‚îÄ asr_example_hotword.wav&#xA;‚îÇ       ‚îú‚îÄ‚îÄ configuration.json&#xA;‚îÇ       ‚îú‚îÄ‚îÄ config.yaml&#xA;‚îÇ       ‚îú‚îÄ‚îÄ example&#xA;‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ asr_example.wav&#xA;‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ hotword.txt&#xA;‚îÇ       ‚îú‚îÄ‚îÄ fig&#xA;‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ res.png&#xA;‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ seaco.png&#xA;‚îÇ       ‚îú‚îÄ‚îÄ model.pt&#xA;‚îÇ       ‚îú‚îÄ‚îÄ README.md&#xA;‚îÇ       ‚îú‚îÄ‚îÄ seg_dict&#xA;‚îÇ       ‚îî‚îÄ‚îÄ tokens.json&#xA;‚îî‚îÄ‚îÄ README.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Support Us&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Alipay&lt;/th&gt; &#xA;   &lt;th&gt;WeChatPay&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/docs/Alipay.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kedreamix/Linly-Talker/main/docs/WeChatpay.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;ASR&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openai/whisper&#34;&gt;https://github.com/openai/whisper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alibaba-damo-academy/FunASR&#34;&gt;https://github.com/alibaba-damo-academy/FunASR&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;TTS&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rany2/edge-tts&#34;&gt;https://github.com/rany2/edge-tts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PaddlePaddle/PaddleSpeech&#34;&gt;https://github.com/PaddlePaddle/PaddleSpeech&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;LLM&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CVI-SZU/Linly&#34;&gt;https://github.com/CVI-SZU/Linly&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/QwenLM/Qwen&#34;&gt;https://github.com/QwenLM/Qwen&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://deepmind.google/technologies/gemini/&#34;&gt;https://deepmind.google/technologies/gemini/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/THUDM/ChatGLM3&#34;&gt;https://github.com/THUDM/ChatGLM3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openai.com&#34;&gt;https://openai.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;THG&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OpenTalker/SadTalker&#34;&gt;https://github.com/OpenTalker/SadTalker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Rudrabha/Wav2Lip&#34;&gt;https://github.com/Rudrabha/Wav2Lip&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Fictionarry/ER-NeRF&#34;&gt;https://github.com/Fictionarry/ER-NeRF&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Voice Clone&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RVC-Boss/GPT-SoVITS&#34;&gt;https://github.com/RVC-Boss/GPT-SoVITS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/coqui-ai/TTS&#34;&gt;https://github.com/coqui-ai/TTS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#Kedreamix/Linly-Talker&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=Kedreamix/Linly-Talker&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/DeepSpeed</title>
    <updated>2024-07-07T01:46:23Z</updated>
    <id>tag:github.com,2024-07-07:/microsoft/DeepSpeed</id>
    <link href="https://github.com/microsoft/DeepSpeed" rel="alternate"></link>
    <summary type="html">&lt;p&gt;DeepSpeed is a deep learning optimization library that makes distributed training and inference easy, efficient, and effective.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/Microsoft/DeepSpeed/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/license/apache2.0/blue&#34; alt=&#34;License Apache 2.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/deepspeed/&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/deepspeed.svg?sanitize=true&#34; alt=&#34;PyPI version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pepy.tech/project/deepspeed&#34;&gt;&lt;img src=&#34;https://static.pepy.tech/badge/deepspeed&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/DeepSpeed/master/#build-pipeline-status&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/build/check-status/blue&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=MSFTDeepSpeed&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/MSFTDeepSpeed&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/MSFTDeepSpeedJP&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%E6%97%A5%E6%9C%AC%E8%AA%9ETwitter-%40MSFTDeepSpeedJP-blue&#34; alt=&#34;Japanese Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.zhihu.com/people/deepspeed&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%E7%9F%A5%E4%B9%8E-%E5%BE%AE%E8%BD%AFDeepSpeed-blue&#34; alt=&#34;Chinese Zhihu&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/microsoft/DeepSpeed/master/docs/assets/images/DeepSpeed_light.svg#gh-light-mode-only&#34; width=&#34;400px&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/microsoft/DeepSpeed/master/docs/assets/images/DeepSpeed_dark_transparent.svg#gh-dark-mode-only&#34; width=&#34;400px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Latest News&lt;/h2&gt; &#xA;&lt;p&gt;&lt;b&gt; &lt;span style=&#34;color:orange&#34;&gt; DeepSpeed empowers ChatGPT-like model training with a single click, offering 15x speedup over SOTA RLHF systems with unprecedented cost reduction at all scales; &lt;a href=&#34;https://github.com/microsoft/DeepSpeed/tree/master/blogs/deepspeed-chat&#34;&gt;learn how&lt;/a&gt;&lt;/span&gt;.&lt;/b&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[2024/07] &lt;a href=&#34;https://github.com/microsoft/DeepSpeed/tree/master/blogs/deepspeed-ucp/README.md&#34;&gt;DeepSpeed Universal Checkpointing: Efficient and Flexible Checkpointing for Large Scale Distributed Training&lt;/a&gt; [&lt;a href=&#34;https://github.com/microsoft/DeepSpeed/tree/master/blogs/deepspeed-ucp/chinese/README.md&#34;&gt;‰∏≠Êñá&lt;/a&gt;] [&lt;a href=&#34;https://github.com/microsoft/DeepSpeed/tree/master/blogs/deepspeed-ucp/japanese/README.md&#34;&gt;Êó•Êú¨Ë™û&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;[2024/03] &lt;a href=&#34;https://github.com/microsoft/DeepSpeed/tree/master/blogs/deepspeed-fp6/03-05-2024&#34;&gt;DeepSpeed-FP6:The power of FP6-Centric Serving for Large Language Models&lt;/a&gt; [&lt;a href=&#34;https://github.com/microsoft/DeepSpeed/tree/master/blogs/deepspeed-fp6/03-05-2024/README.md&#34;&gt;English&lt;/a&gt;] [&lt;a href=&#34;https://github.com/microsoft/DeepSpeed/tree/master/blogs/deepspeed-fp6/03-05-2024/README-Chinese.md&#34;&gt;‰∏≠Êñá&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;[2024/01] &lt;a href=&#34;https://github.com/microsoft/DeepSpeed/tree/master/blogs/deepspeed-fastgen/2024-01-19&#34;&gt;DeepSpeed-FastGen: Introducing Mixtral, Phi-2, and Falcon support with major performance and feature enhancements.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[2023/11] &lt;a href=&#34;https://github.com/microsoft/DeepSpeed/tree/master/blogs/intel-inference&#34;&gt;Llama 2 Inference on 4th Gen Intel¬Æ Xeon¬Æ Scalable Processor with DeepSpeed&lt;/a&gt; &lt;a href=&#34;https://www.intel.com/content/www/us/en/developer/articles/technical/xllama-2-on-xeon-scalable-processor-with-deepspeed.html&#34;&gt;[Intel version]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[2023/11] &lt;a href=&#34;https://github.com/microsoft/DeepSpeed/tree/master/blogs/deepspeed-offloadpp&#34;&gt;DeepSpeed ZeRO-Offload++: 6x Higher Training Throughput via Collaborative CPU/GPU Twin-Flow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[2023/11] &lt;a href=&#34;https://github.com/microsoft/DeepSpeed/tree/master/blogs/deepspeed-fastgen&#34;&gt;DeepSpeed-FastGen: High-throughput Text Generation for LLMs via MII and DeepSpeed-Inference&lt;/a&gt; [&lt;a href=&#34;https://github.com/microsoft/DeepSpeed/tree/master/blogs/deepspeed-fastgen&#34;&gt;English&lt;/a&gt;] [&lt;a href=&#34;https://github.com/microsoft/DeepSpeed/tree/master/blogs/deepspeed-fastgen/chinese/README.md&#34;&gt;‰∏≠Êñá&lt;/a&gt;] [&lt;a href=&#34;https://github.com/microsoft/DeepSpeed/tree/master/blogs/deepspeed-fastgen/japanese/README.md&#34;&gt;Êó•Êú¨Ë™û&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;[2023/10] &lt;a href=&#34;https://github.com/microsoft/DeepSpeed/tree/master/blogs/deepspeed-visualchat/10-03-2023/README.md&#34;&gt;DeepSpeed-VisualChat: Improve Your Chat Experience with Multi-Round Multi-Image Inputs&lt;/a&gt; [&lt;a href=&#34;https://github.com/microsoft/DeepSpeed/tree/master/blogs/deepspeed-visualchat/10-03-2023/README.md&#34;&gt;English&lt;/a&gt;] [&lt;a href=&#34;https://github.com/microsoft/DeepSpeed/raw/master/blogs/deepspeed-visualchat/10-03-2023/README-Chinese.md&#34;&gt;‰∏≠Êñá&lt;/a&gt;] [&lt;a href=&#34;https://github.com/microsoft/DeepSpeed/raw/master/blogs/deepspeed-visualchat/10-03-2023/README-Japanese.md&#34;&gt;Êó•Êú¨Ë™û&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;[2023/09] Announcing the DeepSpeed4Science Initiative: Enabling large-scale scientific discovery through sophisticated AI system technologies [&lt;a href=&#34;https://deepspeed4science.ai/&#34;&gt;DeepSpeed4Science website&lt;/a&gt;] [&lt;a href=&#34;https://www.deepspeed.ai/deepspeed4science/&#34;&gt;Tutorials&lt;/a&gt;] [&lt;a href=&#34;https://arxiv.org/abs/2310.04610&#34;&gt;White paper&lt;/a&gt;] [&lt;a href=&#34;https://www.microsoft.com/en-us/research/blog/announcing-the-deepspeed4science-initiative-enabling-large-scale-scientific-discovery-through-sophisticated-ai-system-technologies/&#34;&gt;Blog&lt;/a&gt;] [&lt;a href=&#34;https://github.com/microsoft/DeepSpeed/raw/master/blogs/deepspeed4science/chinese/README.md&#34;&gt;‰∏≠Êñá&lt;/a&gt;] [&lt;a href=&#34;https://github.com/microsoft/DeepSpeed/raw/master/blogs/deepspeed4science/japanese/README.md&#34;&gt;Êó•Êú¨Ë™û&lt;/a&gt;]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- NOTE: we must use html for news items otherwise links will be broken in the &#39;more news&#39; section --&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;More news&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;[2023/08] &lt;a href=&#34;https://github.com/microsoft/DeepSpeedExamples/raw/master/inference/huggingface/zero_inference/README.md&#34;&gt;DeepSpeed ZeRO-Inference: 20x faster inference through weight quantization and KV cache offloading&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;[2023/08] &lt;a href=&#34;https://github.com/microsoft/DeepSpeed/tree/master/blogs/deepspeed-chat/ds-chat-release-8-31/README.md&#34;&gt;DeepSpeed-Chat: Llama/Llama-2 system support, efficiency boost, and training stability improvements&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;[2023/08] &lt;a href=&#34;https://github.com/microsoft/DeepSpeed/tree/master/blogs/deepspeed-ulysses&#34;&gt;DeepSpeed Ulysses: System Optimizations for Enabling Training of Extreme Long Sequence Transformer Models&lt;/a&gt; [&lt;a href=&#34;https://github.com/microsoft/DeepSpeed/raw/master/blogs/deepspeed-ulysses/chinese/README.md&#34;&gt;‰∏≠Êñá&lt;/a&gt;] [&lt;a href=&#34;https://github.com/microsoft/DeepSpeed/raw/master/blogs/deepspeed-ulysses/japanese/README.md&#34;&gt;Êó•Êú¨Ë™û&lt;/a&gt;]&lt;/li&gt; &#xA;  &lt;li&gt;[2023/06] &lt;a href=&#34;https://www.microsoft.com/en-us/research/blog/deepspeed-zero-a-leap-in-speed-for-llm-and-chat-model-training-with-4x-less-communication/&#34;&gt;ZeRO++: A leap in speed for LLM and chat model training with 4X less communication&lt;/a&gt; [&lt;a href=&#34;https://www.microsoft.com/en-us/research/blog/deepspeed-zero-a-leap-in-speed-for-llm-and-chat-model-training-with-4x-less-communication/&#34;&gt;English&lt;/a&gt;] [&lt;a href=&#34;https://github.com/microsoft/DeepSpeed/raw/master/blogs/zeropp/chinese/README.md&#34;&gt;‰∏≠Êñá&lt;/a&gt;] [&lt;a href=&#34;https://github.com/microsoft/DeepSpeed/raw/master/blogs/zeropp/japanese/README.md&#34;&gt;Êó•Êú¨Ë™û&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Extreme Speed and Scale for DL Training and Inference&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;a href=&#34;https://www.deepspeed.ai/&#34;&gt;DeepSpeed&lt;/a&gt; enables world&#39;s most powerful language models like &lt;a href=&#34;https://www.microsoft.com/en-us/research/blog/using-deepspeed-and-megatron-to-train-megatron-turing-nlg-530b-the-worlds-largest-and-most-powerful-generative-language-model/&#34;&gt;MT-530B&lt;/a&gt; and &lt;a href=&#34;https://huggingface.co/blog/bloom-megatron-deepspeed&#34;&gt;BLOOM&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;. It is an easy-to-use deep learning optimization software suite that powers unprecedented scale and speed for both training and inference. With DeepSpeed you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Train/Inference dense or sparse models with billions or trillions of parameters&lt;/li&gt; &#xA; &lt;li&gt;Achieve excellent system throughput and efficiently scale to thousands of GPUs&lt;/li&gt; &#xA; &lt;li&gt;Train/Inference on resource constrained GPU systems&lt;/li&gt; &#xA; &lt;li&gt;Achieve unprecedented low latency and high throughput for inference&lt;/li&gt; &#xA; &lt;li&gt;Achieve extreme compression for an unparalleled inference latency and model size reduction with low costs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;DeepSpeed&#39;s four innovation pillars&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/DeepSpeed/master/docs/assets/images/DeepSpeed-pillars.png&#34; width=&#34;800px&#34;&gt; &#xA;&lt;h2&gt;DeepSpeed-Training&lt;/h2&gt; &#xA;&lt;p&gt;DeepSpeed offers a confluence of system innovations, that has made large scale DL training effective, and efficient, greatly improved ease of use, and redefined the DL training landscape in terms of scale that is possible. These innovations such as ZeRO, 3D-Parallelism, DeepSpeed-MoE, ZeRO-Infinity, etc. fall under the training pillar. Learn more: &lt;a href=&#34;https://www.deepspeed.ai/training/&#34;&gt;DeepSpeed-Training&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;DeepSpeed-Inference&lt;/h2&gt; &#xA;&lt;p&gt;DeepSpeed brings together innovations in parallelism technology such as tensor, pipeline, expert and ZeRO-parallelism, and combines them with high performance custom inference kernels, communication optimizations and heterogeneous memory technologies to enable inference at an unprecedented scale, while achieving unparalleled latency, throughput and cost reduction. This systematic composition of system technologies for inference falls under the inference pillar. Learn more: &lt;a href=&#34;https://www.deepspeed.ai/inference&#34;&gt;DeepSpeed-Inference&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;DeepSpeed-Compression&lt;/h2&gt; &#xA;&lt;p&gt;To further increase the inference efficiency, DeepSpeed offers easy-to-use and flexible-to-compose compression techniques for researchers and practitioners to compress their models while delivering faster speed, smaller model size, and significantly reduced compression cost. Moreover, SoTA innovations on compression like ZeroQuant and XTC are included under the compression pillar. Learn more: &lt;a href=&#34;https://www.deepspeed.ai/compression&#34;&gt;DeepSpeed-Compression&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;DeepSpeed4Science&lt;/h2&gt; &#xA;&lt;p&gt;In line with Microsoft&#39;s mission to solve humanity&#39;s most pressing challenges, the DeepSpeed team at Microsoft is responding to this opportunity by launching a new initiative called &lt;em&gt;DeepSpeed4Science&lt;/em&gt;, aiming to build unique capabilities through AI system technology innovations to help domain experts to unlock today&#39;s biggest science mysteries. Learn more: &lt;a href=&#34;https://deepspeed4science.ai/&#34;&gt;DeepSpeed4Science website&lt;/a&gt; and &lt;a href=&#34;https://www.deepspeed.ai/deepspeed4science/&#34;&gt;tutorials&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;DeepSpeed Software Suite&lt;/h1&gt; &#xA;&lt;h2&gt;DeepSpeed Library&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/microsoft/deepspeed&#34;&gt;DeepSpeed&lt;/a&gt; library (this repository) implements and packages the innovations and technologies in DeepSpeed Training, Inference and Compression Pillars into a single easy-to-use, open-sourced repository. It allows for easy composition of multitude of features within a single training, inference or compression pipeline. The DeepSpeed Library is heavily adopted by the DL community, and has been used to enable some of the most powerful models (see &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/DeepSpeed/master/#deepspeed-adoption&#34;&gt;DeepSpeed Adoption&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Model Implementations for Inference (MII)&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/deepspeed-mii&#34;&gt;Model Implementations for Inference (MII)&lt;/a&gt; is an open-sourced repository for making low-latency and high-throughput inference accessible to all data scientists by alleviating the need to apply complex system optimization techniques themselves. Out-of-box, MII offers support for thousands of widely used DL models, optimized using DeepSpeed-Inference, that can be deployed with a few lines of code, while achieving significant latency reduction compared to their vanilla open-sourced versions.&lt;/p&gt; &#xA;&lt;h2&gt;DeepSpeed on Azure&lt;/h2&gt; &#xA;&lt;p&gt;DeepSpeed users are diverse and have access to different environments. We recommend to try DeepSpeed on Azure as it is the simplest and easiest method. The recommended method to try DeepSpeed on Azure is through AzureML &lt;a href=&#34;https://github.com/Azure/azureml-examples/tree/main/v1/python-sdk/workflows/train/deepspeed&#34;&gt;recipes&lt;/a&gt;. The job submission and data preparation scripts have been made available &lt;a href=&#34;https://github.com/microsoft/Megatron-DeepSpeed/tree/main/examples_deepspeed/azureml&#34;&gt;here&lt;/a&gt;. For more details on how to use DeepSpeed on Azure, please follow the &lt;a href=&#34;https://www.deepspeed.ai/tutorials/azure/&#34;&gt;Azure tutorial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;DeepSpeed Adoption&lt;/h1&gt; &#xA;&lt;p&gt;DeepSpeed is an important part of Microsoft‚Äôs new &lt;a href=&#34;https://www.microsoft.com/en-us/research/project/ai-at-scale/&#34;&gt;AI at Scale&lt;/a&gt; initiative to enable next-generation AI capabilities at scale, where you can find more information &lt;a href=&#34;https://innovation.microsoft.com/en-us/exploring-ai-at-scale&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;DeepSpeed has been used to train many different large-scale models, below is a list of several examples that we are aware of (if you&#39;d like to include your model please submit a PR):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.microsoft.com/en-us/research/blog/using-deepspeed-and-megatron-to-train-megatron-turing-nlg-530b-the-worlds-largest-and-most-powerful-generative-language-model/&#34;&gt;Megatron-Turing NLG (530B)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://uploads-ssl.webflow.com/60fd4503684b466578c0d307/61138924626a6981ee09caf6_jurassic_tech_paper.pdf&#34;&gt;Jurassic-1 (178B)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/blog/bloom-megatron-deepspeed&#34;&gt;BLOOM (176B)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/THUDM/GLM-130B&#34;&gt;GLM (130B)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.biorxiv.org/content/10.1101/2023.07.05.547496v2&#34;&gt;xTrimoPGLM (100B)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yandex/YaLM-100B&#34;&gt;YaLM (100B)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/EleutherAI/gpt-neox&#34;&gt;GPT-NeoX (20B)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.science/blog/20b-parameter-alexa-model-sets-new-marks-in-few-shot-learning&#34;&gt;AlexaTM (20B)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.microsoft.com/en-us/research/blog/turing-nlg-a-17-billion-parameter-language-model-by-microsoft/&#34;&gt;Turing NLG (17B)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/pdf/2204.06644.pdf&#34;&gt;METRO-LM (5.4B)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;DeepSpeed has been integrated with several different popular open-source DL frameworks such as:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Documentation&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/DeepSpeed/master/docs/assets/images/transformers-light.png#gh-light-mode-only&#34; width=&#34;250px&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/DeepSpeed/master/docs/assets/images/transformers-dark.png#gh-dark-mode-only&#34; width=&#34;250px&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/main/main_classes/deepspeed&#34;&gt;Transformers with DeepSpeed&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/DeepSpeed/master/docs/assets/images/accelerate-light.png#gh-light-mode-only&#34; width=&#34;250px&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/DeepSpeed/master/docs/assets/images/accelerate-dark.png#gh-dark-mode-only&#34; width=&#34;250px&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/docs/accelerate/usage_guides/deepspeed&#34;&gt;Accelerate with DeepSpeed&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/DeepSpeed/master/docs/assets/images/lightning-light.svg#gh-light-mode-only&#34; width=&#34;200px&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/DeepSpeed/master/docs/assets/images/lightning-dark.svg#gh-dark-mode-only&#34; width=&#34;200px&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://lightning.ai/docs/pytorch/stable/advanced/model_parallel.html#deepspeed&#34;&gt;Lightning with DeepSpeed&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/DeepSpeed/master/docs/assets/images/mosaicml.svg?sanitize=true&#34; width=&#34;200px&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.mosaicml.com/projects/composer/en/latest/trainer/using_the_trainer.html?highlight=deepspeed#deepspeed-integration&#34;&gt;MosaicML with DeepSpeed&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/DeepSpeed/master/docs/assets/images/determined.svg?sanitize=true&#34; width=&#34;225px&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.determined.ai/latest/training/apis-howto/deepspeed/overview.html&#34;&gt;Determined with DeepSpeed&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/58739961/187154444-fce76639-ac8d-429b-9354-c6fac64b7ef8.jpg&#34; width=&#34;150&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mmengine.readthedocs.io/en/latest/common_usage/large_model_training.html#deepspeed&#34;&gt;MMEngine with DeepSpeed&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Build Pipeline Status&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NVIDIA&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/nv-torch110-p40.yml&#34;&gt;&lt;img src=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/nv-torch110-p40.yml/badge.svg?branch=master&#34; alt=&#34;nv-torch110-p40&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/nv-torch110-v100.yml&#34;&gt;&lt;img src=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/nv-torch110-v100.yml/badge.svg?branch=master&#34; alt=&#34;nv-torch110-v100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/nv-torch-latest-v100.yml&#34;&gt;&lt;img src=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/nv-torch-latest-v100.yml/badge.svg?branch=master&#34; alt=&#34;nv-torch-latest-v100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/nv-h100.yml&#34;&gt;&lt;img src=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/nv-h100.yml/badge.svg?branch=master&#34; alt=&#34;nv-h100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/nv-inference.yml&#34;&gt;&lt;img src=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/nv-inference.yml/badge.svg?branch=master&#34; alt=&#34;nv-inference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/nv-nightly.yml&#34;&gt;&lt;img src=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/nv-nightly.yml/badge.svg?branch=master&#34; alt=&#34;nv-nightly&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AMD&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/amd-mi200.yml&#34;&gt;&lt;img src=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/amd-mi200.yml/badge.svg?branch=master&#34; alt=&#34;amd-mi200&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CPU&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/cpu-torch-latest.yml&#34;&gt;&lt;img src=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/cpu-torch-latest.yml/badge.svg?branch=master&#34; alt=&#34;torch-latest-cpu&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/cpu-inference.yml&#34;&gt;&lt;img src=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/cpu-inference.yml/badge.svg?branch=master&#34; alt=&#34;cpu-inference&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Intel Gaudi&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/hpu-gaudi2.yml&#34;&gt;&lt;img src=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/hpu-gaudi2.yml/badge.svg?branch=master&#34; alt=&#34;hpu-gaudi2&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Intel XPU&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/xpu-max1100.yml&#34;&gt;&lt;img src=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/xpu-max1100.yml/badge.svg?branch=master&#34; alt=&#34;xpu-max1100&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PyTorch Nightly&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/nv-torch-nightly-v100.yml&#34;&gt;&lt;img src=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/nv-torch-nightly-v100.yml/badge.svg?branch=master&#34; alt=&#34;nv-torch-nightly-v100&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Integrations&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/nv-transformers-v100.yml&#34;&gt;&lt;img src=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/nv-transformers-v100.yml/badge.svg?branch=master&#34; alt=&#34;nv-transformers-v100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/nv-lightning-v100.yml&#34;&gt;&lt;img src=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/nv-lightning-v100.yml/badge.svg?branch=master&#34; alt=&#34;nv-lightning-v100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/nv-accelerate-v100.yml&#34;&gt;&lt;img src=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/nv-accelerate-v100.yml/badge.svg?branch=master&#34; alt=&#34;nv-accelerate-v100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/nv-mii.yml&#34;&gt;&lt;img src=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/nv-mii.yml/badge.svg?branch=master&#34; alt=&#34;nv-mii&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/nv-ds-chat.yml&#34;&gt;&lt;img src=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/nv-ds-chat.yml/badge.svg?branch=master&#34; alt=&#34;nv-ds-chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/nv-sd.yml&#34;&gt;&lt;img src=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/nv-sd.yml/badge.svg?sanitize=true&#34; alt=&#34;nv-sd&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Misc&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/formatting.yml&#34;&gt;&lt;img src=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/formatting.yml/badge.svg?branch=master&#34; alt=&#34;Formatting&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/pages/pages-build-deployment&#34;&gt;&lt;img src=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/pages/pages-build-deployment/badge.svg?sanitize=true&#34; alt=&#34;pages-build-deployment&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://deepspeed.readthedocs.io/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/deepspeed/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/python.yml&#34;&gt;&lt;img src=&#34;https://github.com/microsoft/DeepSpeed/actions/workflows/python.yml/badge.svg?branch=master&#34; alt=&#34;python&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;The quickest way to get started with DeepSpeed is via pip, this will install the latest release of DeepSpeed which is not tied to specific PyTorch or CUDA versions. DeepSpeed includes several C++/CUDA extensions that we commonly refer to as our &#39;ops&#39;. By default, all of these extensions/ops will be built just-in-time (JIT) using &lt;a href=&#34;https://pytorch.org/docs/stable/cpp_extension.html&#34;&gt;torch&#39;s JIT C++ extension loader that relies on ninja&lt;/a&gt; to build and dynamically link them at runtime.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pytorch.org/&#34;&gt;PyTorch&lt;/a&gt; must be installed &lt;em&gt;before&lt;/em&gt; installing DeepSpeed.&lt;/li&gt; &#xA; &lt;li&gt;For full feature support we recommend a version of PyTorch that is &amp;gt;= 1.9 and ideally the latest PyTorch stable release.&lt;/li&gt; &#xA; &lt;li&gt;A CUDA or ROCm compiler such as &lt;a href=&#34;https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/#introduction&#34;&gt;nvcc&lt;/a&gt; or &lt;a href=&#34;https://github.com/ROCm-Developer-Tools/HIPCC&#34;&gt;hipcc&lt;/a&gt; used to compile C++/CUDA/HIP extensions.&lt;/li&gt; &#xA; &lt;li&gt;Specific GPUs we develop and test against are listed below, this doesn&#39;t mean your GPU will not work if it doesn&#39;t fall into this category it&#39;s just DeepSpeed is most well tested on the following: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;NVIDIA: Pascal, Volta, Ampere, and Hopper architectures&lt;/li&gt; &#xA;   &lt;li&gt;AMD: MI100 and MI200&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributed HW support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DeepSpeed now support various HW accelerators.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Contributor&lt;/th&gt; &#xA;   &lt;th&gt;Hardware&lt;/th&gt; &#xA;   &lt;th&gt;Accelerator Name&lt;/th&gt; &#xA;   &lt;th&gt;Contributor validated&lt;/th&gt; &#xA;   &lt;th&gt;Upstream validated&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Huawei&lt;/td&gt; &#xA;   &lt;td&gt;Huawei Ascend NPU&lt;/td&gt; &#xA;   &lt;td&gt;npu&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Intel&lt;/td&gt; &#xA;   &lt;td&gt;Intel(R) Gaudi(R) 2 AI accelerator&lt;/td&gt; &#xA;   &lt;td&gt;hpu&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Intel&lt;/td&gt; &#xA;   &lt;td&gt;Intel(R) Xeon(R) Processors&lt;/td&gt; &#xA;   &lt;td&gt;cpu&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Intel&lt;/td&gt; &#xA;   &lt;td&gt;Intel(R) Data Center GPU Max series&lt;/td&gt; &#xA;   &lt;td&gt;xpu&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;PyPI&lt;/h2&gt; &#xA;&lt;p&gt;We regularly push releases to &lt;a href=&#34;https://pypi.org/project/deepspeed/&#34;&gt;PyPI&lt;/a&gt; and encourage users to install from there in most cases.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install deepspeed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After installation, you can validate your install and see which extensions/ops your machine is compatible with via the DeepSpeed environment report.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ds_report&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you would like to pre-install any of the DeepSpeed extensions/ops (instead of JIT compiling) or install pre-compiled ops via PyPI please see our &lt;a href=&#34;https://www.deepspeed.ai/tutorials/advanced-install/&#34;&gt;advanced installation instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;p&gt;Windows support is partially supported with DeepSpeed. On Windows you can build wheel with following steps, currently only inference mode is supported.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install pytorch, such as pytorch 1.8 + cuda 11.1&lt;/li&gt; &#xA; &lt;li&gt;Install visual cpp build tools, such as VS2019 C++ x64/x86 build tools&lt;/li&gt; &#xA; &lt;li&gt;Launch cmd console with Administrator privilege for creating required symlink folders&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;python setup.py bdist_wheel&lt;/code&gt; to build wheel in &lt;code&gt;dist&lt;/code&gt; folder&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;p&gt;Please checkout &lt;a href=&#34;https://www.deepspeed.ai/training&#34;&gt;DeepSpeed-Training&lt;/a&gt;, &lt;a href=&#34;https://www.deepspeed.ai/inference&#34;&gt;DeepSpeed-Inference&lt;/a&gt; and &lt;a href=&#34;https://www.deepspeed.ai/compression&#34;&gt;DeepSpeed-Compression&lt;/a&gt; pages for full set of features offered along each of these three pillars.&lt;/p&gt; &#xA;&lt;h1&gt;Further Reading&lt;/h1&gt; &#xA;&lt;p&gt;All DeepSpeed documentation, tutorials, and blogs can be found on our website: &lt;a href=&#34;https://www.deepspeed.ai/&#34;&gt;deepspeed.ai&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.deepspeed.ai/getting-started/&#34;&gt;Getting Started&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;First steps with DeepSpeed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.deepspeed.ai/docs/config-json/&#34;&gt;DeepSpeed JSON Configuration&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Configuring DeepSpeed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://deepspeed.readthedocs.io/en/latest/&#34;&gt;API Documentation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Generated DeepSpeed API documentation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.deepspeed.ai/tutorials/&#34;&gt;Tutorials&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Tutorials&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.deepspeed.ai/posts/&#34;&gt;Blogs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Blogs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;DeepSpeed welcomes your contributions! Please see our &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/DeepSpeed/master/CONTRIBUTING.md&#34;&gt;contributing&lt;/a&gt; guide for more details on formatting, testing, etc.&lt;br&gt; Thanks so much to all of our amazing contributors!&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/microsoft/DeepSpeed/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=microsoft/DeepSpeed&amp;amp;r=&#34; width=&#34;800px&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Contributor License Agreement&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.opensource.microsoft.com&#34;&gt;https://cla.opensource.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h1&gt;Publications&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Samyam Rajbhandari, Jeff Rasley, Olatunji Ruwase, Yuxiong He. (2019) ZeRO: memory optimizations toward training trillion parameter models. &lt;a href=&#34;https://arxiv.org/abs/1910.02054&#34;&gt;arXiv:1910.02054&lt;/a&gt; and &lt;a href=&#34;https://dl.acm.org/doi/10.5555/3433701.3433727&#34;&gt;In Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis (SC &#39;20)&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Jeff Rasley, Samyam Rajbhandari, Olatunji Ruwase, and Yuxiong He. (2020) DeepSpeed: System Optimizations Enable Training Deep Learning Models with Over 100 Billion Parameters. &lt;a href=&#34;https://dl.acm.org/doi/10.1145/3394486.3406703&#34;&gt;In Proceedings of the 26th ACM SIGKDD International Conference on Knowledge Discovery &amp;amp; Data Mining (KDD &#39;20, Tutorial)&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Minjia Zhang, Yuxiong He. (2020) Accelerating Training of Transformer-Based Language Models with Progressive Layer Dropping. &lt;a href=&#34;https://arxiv.org/abs/2010.13369&#34;&gt;arXiv:2010.13369&lt;/a&gt; and &lt;a href=&#34;https://proceedings.neurips.cc/paper/2020/hash/a1140a3d0df1c81e24ae954d935e8926-Abstract.html&#34;&gt;NeurIPS 2020&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Jie Ren, Samyam Rajbhandari, Reza Yazdani Aminabadi, Olatunji Ruwase, Shuangyan Yang, Minjia Zhang, Dong Li, Yuxiong He. (2021) ZeRO-Offload: Democratizing Billion-Scale Model Training. &lt;a href=&#34;https://arxiv.org/abs/2101.06840&#34;&gt;arXiv:2101.06840&lt;/a&gt; and &lt;a href=&#34;https://www.usenix.org/conference/atc21/presentation/ren-jie&#34;&gt;USENIX ATC 2021&lt;/a&gt;. &lt;a href=&#34;https://arxiv.org/abs/2101.06840&#34;&gt;[paper]&lt;/a&gt; &lt;a href=&#34;https://www.usenix.org/system/files/atc21_slides_ren-jie.pdf&#34;&gt;[slides]&lt;/a&gt; &lt;a href=&#34;https://www.microsoft.com/en-us/research/blog/deepspeed-extreme-scale-model-training-for-everyone/&#34;&gt;[blog]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Hanlin Tang, Shaoduo Gan, Ammar Ahmad Awan, Samyam Rajbhandari, Conglong Li, Xiangru Lian, Ji Liu, Ce Zhang, Yuxiong He. (2021) 1-bit Adam: Communication Efficient Large-Scale Training with Adam&#39;s Convergence Speed. &lt;a href=&#34;https://arxiv.org/abs/2102.02888&#34;&gt;arXiv:2102.02888&lt;/a&gt; and &lt;a href=&#34;http://proceedings.mlr.press/v139/tang21a.html&#34;&gt;ICML 2021&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Samyam Rajbhandari, Olatunji Ruwase, Jeff Rasley, Shaden Smith, Yuxiong He. (2021) ZeRO-Infinity: Breaking the GPU Memory Wall for Extreme Scale Deep Learning. &lt;a href=&#34;https://arxiv.org/abs/2104.07857&#34;&gt;arXiv:2104.07857&lt;/a&gt; and &lt;a href=&#34;https://dl.acm.org/doi/abs/10.1145/3458817.3476205&#34;&gt;SC 2021&lt;/a&gt;. &lt;a href=&#34;https://arxiv.org/abs/2104.07857&#34;&gt;[paper]&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/DeepSpeed/master/docs/assets/files/SC21-ZeRO-Infinity.pdf&#34;&gt;[slides]&lt;/a&gt; &lt;a href=&#34;https://www.microsoft.com/en-us/research/blog/zero-infinity-and-deepspeed-unlocking-unprecedented-model-scale-for-deep-learning-training/&#34;&gt;[blog]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Conglong Li, Ammar Ahmad Awan, Hanlin Tang, Samyam Rajbhandari, Yuxiong He. (2021) 1-bit LAMB: Communication Efficient Large-Scale Large-Batch Training with LAMB&#39;s Convergence Speed. &lt;a href=&#34;https://arxiv.org/abs/2104.06069&#34;&gt;arXiv:2104.06069&lt;/a&gt; and &lt;a href=&#34;https://hipc.org/advance-program/&#34;&gt;HiPC 2022&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Conglong Li, Minjia Zhang, Yuxiong He. (2021) The Stability-Efficiency Dilemma: Investigating Sequence Length Warmup for Training GPT Models. &lt;a href=&#34;https://arxiv.org/abs/2108.06084&#34;&gt;arXiv:2108.06084&lt;/a&gt; and &lt;a href=&#34;https://openreview.net/forum?id=JpZ5du_Kdh&#34;&gt;NeurIPS 2022&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Yucheng Lu, Conglong Li, Minjia Zhang, Christopher De Sa, Yuxiong He. (2022) Maximizing Communication Efficiency for Large-scale Training via 0/1 Adam. &lt;a href=&#34;https://arxiv.org/abs/2202.06009&#34;&gt;arXiv:2202.06009&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Samyam Rajbhandari, Conglong Li, Zhewei Yao, Minjia Zhang, Reza Yazdani Aminabadi, Ammar Ahmad Awan, Jeff Rasley, Yuxiong He. (2022) DeepSpeed-MoE: Advancing Mixture-of-Experts Inference and Training to Power Next-Generation AI Scale &lt;a href=&#34;https://arxiv.org/abs/2201.05596&#34;&gt;arXiv:2201.05596&lt;/a&gt; and &lt;a href=&#34;https://proceedings.mlr.press/v162/rajbhandari22a.html&#34;&gt;ICML 2022&lt;/a&gt;. &lt;a href=&#34;https://arxiv.org/abs/2201.05596&#34;&gt;[pdf]&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/DeepSpeed/master/docs/assets/files/ICML-5mins.pdf&#34;&gt;[slides]&lt;/a&gt; &lt;a href=&#34;https://www.microsoft.com/en-us/research/blog/deepspeed-advancing-moe-inference-and-training-to-power-next-generation-ai-scale/&#34;&gt;[blog]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Shaden Smith, Mostofa Patwary, Brandon Norick, Patrick LeGresley, Samyam Rajbhandari, Jared Casper, Zhun Liu, Shrimai Prabhumoye, George Zerveas, Vijay Korthikanti, Elton Zhang, Rewon Child, Reza Yazdani Aminabadi, Julie Bernauer, Xia Song, Mohammad Shoeybi, Yuxiong He, Michael Houston, Saurabh Tiwary, Bryan Catanzaro. (2022) Using DeepSpeed and Megatron to Train Megatron-Turing NLG 530B, A Large-Scale Generative Language Model &lt;a href=&#34;https://arxiv.org/abs/2201.11990&#34;&gt;arXiv:2201.11990&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Xiaoxia Wu, Zhewei Yao, Minjia Zhang, Conglong Li, Yuxiong He. (2022) Extreme Compression for Pre-trained Transformers Made Simple and Efficient. &lt;a href=&#34;https://arxiv.org/abs/2206.01859&#34;&gt;arXiv:2206.01859&lt;/a&gt; and &lt;a href=&#34;https://openreview.net/forum?id=xNeAhc2CNAl&#34;&gt;NeurIPS 2022&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Zhewei Yao, Reza Yazdani Aminabadi, Minjia Zhang, Xiaoxia Wu, Conglong Li, Yuxiong He. (2022) ZeroQuant: Efficient and Affordable Post-Training Quantization for Large-Scale Transformers. &lt;a href=&#34;https://arxiv.org/abs/2206.01861&#34;&gt;arXiv:2206.01861&lt;/a&gt; and &lt;a href=&#34;https://openreview.net/forum?id=f-fVCElZ-G1&#34;&gt;NeurIPS 2022&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/DeepSpeed/master/docs/assets/files/zeroquant_series.pdf&#34;&gt;[slides]&lt;/a&gt; &lt;a href=&#34;https://www.microsoft.com/en-us/research/blog/deepspeed-compression-a-composable-library-for-extreme-compression-and-zero-cost-quantization/&#34;&gt;[blog]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Reza Yazdani Aminabadi, Samyam Rajbhandari, Minjia Zhang, Ammar Ahmad Awan, Cheng Li, Du Li, Elton Zheng, Jeff Rasley, Shaden Smith, Olatunji Ruwase, Yuxiong He. (2022) DeepSpeed Inference: Enabling Efficient Inference of Transformer Models at Unprecedented Scale. &lt;a href=&#34;https://arxiv.org/abs/2207.00032&#34;&gt;arXiv:2207.00032&lt;/a&gt; and &lt;a href=&#34;https://dl.acm.org/doi/abs/10.5555/3571885.3571946&#34;&gt;SC 2022&lt;/a&gt;. &lt;a href=&#34;https://arxiv.org/abs/2207.00032&#34;&gt;[paper]&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/DeepSpeed/master/docs/assets/files/sc22-ds-inference.pdf&#34;&gt;[slides]&lt;/a&gt; &lt;a href=&#34;https://www.microsoft.com/en-us/research/blog/deepspeed-accelerating-large-scale-model-inference-and-training-via-system-optimizations-and-compression/&#34;&gt;[blog]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Zhewei Yao, Xiaoxia Wu, Conglong Li, Connor Holmes, Minjia Zhang, Cheng Li, Yuxiong He. (2022) Random-LTD: Random and Layerwise Token Dropping Brings Efficient Training for Large-scale Transformers. &lt;a href=&#34;https://arxiv.org/abs/2211.11586&#34;&gt;arXiv:2211.11586&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Conglong Li, Zhewei Yao, Xiaoxia Wu, Minjia Zhang, Yuxiong He. (2022) DeepSpeed Data Efficiency: Improving Deep Learning Model Quality and Training Efficiency via Efficient Data Sampling and Routing. &lt;a href=&#34;https://arxiv.org/abs/2212.03597&#34;&gt;arXiv:2212.03597&lt;/a&gt; &lt;a href=&#34;https://neurips2023-enlsp.github.io/&#34;&gt;ENLSP2023 Workshop at NeurIPS2023&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Xiaoxia Wu, Cheng Li, Reza Yazdani Aminabadi, Zhewei Yao, Yuxiong He. (2023) Understanding INT4 Quantization for Transformer Models: Latency Speedup, Composability, and Failure Cases. &lt;a href=&#34;https://arxiv.org/abs/2301.12017&#34;&gt;arXiv:2301.12017&lt;/a&gt; and &lt;a href=&#34;https://icml.cc/Conferences/2023&#34;&gt;ICML2023&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Syed Zawad, Cheng Li, Zhewei Yao, Elton Zheng, Yuxiong He, Feng Yan. (2023) DySR: Adaptive Super-Resolution via Algorithm and System Co-design. &lt;a href=&#34;https://openreview.net/forum?id=Pgtn4l6eKjv&#34;&gt;ICLR:2023&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sheng Shen, Zhewei Yao, Chunyuan Li, Trevor Darrell, Kurt Keutzer, Yuxiong He. (2023) Scaling Vision-Language Models with Sparse Mixture of Experts. &lt;a href=&#34;https://arxiv.org/abs/2303.07226&#34;&gt;arXiv:2303.07226&lt;/a&gt; and &lt;a href=&#34;https://2023.emnlp.org/&#34;&gt;Finding at EMNLP2023&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Quentin Anthony, Ammar Ahmad Awan, Jeff Rasley, Yuxiong He, Aamir Shafi, Mustafa Abduljabbar, Hari Subramoni, Dhabaleswar Panda. (2023) MCR-DL: Mix-and-Match Communication Runtime for Deep Learning &lt;a href=&#34;https://arxiv.org/abs/2303.08374&#34;&gt;arXiv:2303.08374&lt;/a&gt; and will appear at IPDPS 2023.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Siddharth Singh, Olatunji Ruwase, Ammar Ahmad Awan, Samyam Rajbhandari, Yuxiong He, Abhinav Bhatele. (2023) A Hybrid Tensor-Expert-Data Parallelism Approach to Optimize Mixture-of-Experts Training &lt;a href=&#34;https://arxiv.org/abs/2303.06318&#34;&gt;arXiv:2303.06318&lt;/a&gt; and will appear at ICS 2023.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Guanhua Wang, Heyang Qin, Sam Ade Jacobs, Xiaoxia Wu, Connor Holmes, Zhewei Yao, Samyam Rajbhandari, Olatunji Ruwase, Feng Yan, Lei Yang, Yuxiong He. (2023) ZeRO++: Extremely Efficient Collective Communication for Giant Model Training &lt;a href=&#34;https://arxiv.org/abs/2306.10209&#34;&gt;arXiv:2306.10209&lt;/a&gt; and &lt;a href=&#34;http://mlforsystems.org/&#34;&gt;ML for Sys Workshop at NeurIPS2023&lt;/a&gt; &lt;a href=&#34;https://www.microsoft.com/en-us/research/blog/deepspeed-zero-a-leap-in-speed-for-llm-and-chat-model-training-with-4x-less-communication/&#34;&gt;[blog]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Zhewei Yao, Xiaoxia Wu, Cheng Li, Stephen Youn, Yuxiong He. (2023) ZeroQuant-V2: Exploring Post-training Quantization in LLMs from Comprehensive Study to Low Rank Compensation &lt;a href=&#34;https://arxiv.org/abs/2303.08302&#34;&gt;arXiv:2303.08302&lt;/a&gt; and &lt;a href=&#34;https://neurips2023-enlsp.github.io/&#34;&gt;ENLSP2023 Workshop at NeurIPS2023&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/DeepSpeed/master/docs/assets/files/zeroquant_series.pdf&#34;&gt;[slides]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pareesa Ameneh Golnari, Zhewei Yao, Yuxiong He. (2023) Selective Guidance: Are All the Denoising Steps of Guided Diffusion Important? &lt;a href=&#34;https://arxiv.org/abs/2305.09847&#34;&gt;arXiv:2305.09847&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Zhewei Yao, Reza Yazdani Aminabadi, Olatunji Ruwase, Samyam Rajbhandari, Xiaoxia Wu, Ammar Ahmad Awan, Jeff Rasley, Minjia Zhang, Conglong Li, Connor Holmes, Zhongzhu Zhou, Michael Wyatt, Molly Smith, Lev Kurilenko, Heyang Qin, Masahiro Tanaka, Shuai Che, Shuaiwen Leon Song, Yuxiong He. (2023) DeepSpeed-Chat: Easy, Fast and Affordable RLHF Training of ChatGPT-like Models at All Scales &lt;a href=&#34;https://arxiv.org/abs/2308.01320&#34;&gt;arXiv:2308.01320&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Xiaoxia Wu, Zhewei Yao, Yuxiong He. (2023) ZeroQuant-FP: A Leap Forward in LLMs Post-Training W4A8 Quantization Using Floating-Point Formats &lt;a href=&#34;https://arxiv.org/abs/2307.09782&#34;&gt;arXiv:2307.09782&lt;/a&gt; and &lt;a href=&#34;https://neurips2023-enlsp.github.io/&#34;&gt;ENLSP2023 Workshop at NeurIPS2023&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/DeepSpeed/master/docs/assets/files/zeroquant_series.pdf&#34;&gt;[slides]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Zhewei Yao, Xiaoxia Wu, Conglong Li, Minjia Zhang, Heyang Qin, Olatunji Ruwase, Ammar Ahmad Awan, Samyam Rajbhandari, Yuxiong He. (2023) DeepSpeed-VisualChat: Multi-Round Multi-Image Interleave Chat via Multi-Modal Causal Attention &lt;a href=&#34;https://arxiv.org/pdf/2309.14327.pdf&#34;&gt;arXiv:2309.14327&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Shuaiwen Leon Song, Bonnie Kruft, Minjia Zhang, Conglong Li, Shiyang Chen, Chengming Zhang, Masahiro Tanaka, Xiaoxia Wu, Jeff Rasley, Ammar Ahmad Awan, Connor Holmes, Martin Cai, Adam Ghanem, Zhongzhu Zhou, Yuxiong He, et al. (2023) DeepSpeed4Science Initiative: Enabling Large-Scale Scientific Discovery through Sophisticated AI System Technologies &lt;a href=&#34;https://arxiv.org/abs/2310.04610&#34;&gt;arXiv:2310.04610&lt;/a&gt; &lt;a href=&#34;https://www.microsoft.com/en-us/research/blog/announcing-the-deepspeed4science-initiative-enabling-large-scale-scientific-discovery-through-sophisticated-ai-system-technologies/&#34;&gt;[blog]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Zhewei Yao, Reza Yazdani Aminabadi, Stephen Youn, Xiaoxia Wu, Elton Zheng, Yuxiong He. (2023) ZeroQuant-HERO: Hardware-Enhanced Robust Optimized Post-Training Quantization Framework for W8A8 Transformers &lt;a href=&#34;https://arxiv.org/abs/2310.17723&#34;&gt;arXiv:2310.17723&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Xiaoxia Wu, Haojun Xia, Stephen Youn, Zhen Zheng, Shiyang Chen, Arash Bakhtiari, Michael Wyatt, Reza Yazdani Aminabadi, Yuxiong He, Olatunji Ruwase, Leon Song, Zhewei Yao (2023) ZeroQuant(4+2): Redefining LLMs Quantization with a New FP6-Centric Strategy for Diverse Generative Tasks &lt;a href=&#34;https://arxiv.org/abs/2312.08583&#34;&gt;arXiv:2312.08583&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Haojun Xia, Zhen Zheng, Xiaoxia Wu, Shiyang Chen, Zhewei Yao, Stephen Youn, Arash Bakhtiari, Michael Wyatt, Donglin Zhuang, Zhongzhu Zhou, Olatunji Ruwase, Yuxiong He, Shuaiwen Leon Song. (2024) FP6-LLM: Efficiently Serving Large Language Models Through FP6-Centric Algorithm-System Co-Design &lt;a href=&#34;https://arxiv.org/abs/2401.14112&#34;&gt;arXiv:2401.14112&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sam Ade Jacobs, Masahiro Tanaka, Chengming Zhang, Minjia Zhang, Reza Yazdani Aminadabi, Shuaiwen Leon Song, Samyam Rajbhandari, Yuxiong He. (2024) &lt;a href=&#34;https://dl.acm.org/doi/10.1145/3662158.3662806&#34;&gt;System Optimizations for Enabling Training of Extreme Long Sequence Transformer Models&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Xinyu Lian, Sam Ade Jacobs, Lev Kurilenko, Masahiro Tanaka, Stas Bekman, Olatunji Ruwase, Minjia Zhang. (2024) Universal Checkpointing: Efficient and Flexible Checkpointing for Large Scale Distributed Training &lt;a href=&#34;https://arxiv.org/abs/2406.18820&#34;&gt;arXiv:2406.18820&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Videos&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;DeepSpeed KDD 2020 Tutorial &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=CaseqC45DNc&amp;amp;list=PLa85ZdUjfWS21mgibJ2vCvLziprjpKoW0&amp;amp;index=29&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=y4_bCiAsIAk&amp;amp;list=PLa85ZdUjfWS21mgibJ2vCvLziprjpKoW0&amp;amp;index=28&#34;&gt;ZeRO + large model training&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=9V-ZbP92drg&amp;amp;list=PLa85ZdUjfWS21mgibJ2vCvLziprjpKoW0&amp;amp;index=27&#34;&gt;17B T-NLG demo&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=o1K-ZG9F6u0&amp;amp;list=PLa85ZdUjfWS21mgibJ2vCvLziprjpKoW0&amp;amp;index=26&#34;&gt;Fastest BERT training + RScan tuning&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;DeepSpeed hands on deep dive: &lt;a href=&#34;https://www.youtube.com/watch?v=_NOk-mBwDYg&amp;amp;list=PLa85ZdUjfWS21mgibJ2vCvLziprjpKoW0&amp;amp;index=92&#34;&gt;part 1&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=sG6_c4VXLww&amp;amp;list=PLa85ZdUjfWS21mgibJ2vCvLziprjpKoW0&amp;amp;index=94&#34;&gt;part 2&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=k9yPkBTayos&amp;amp;list=PLa85ZdUjfWS21mgibJ2vCvLziprjpKoW0&amp;amp;index=93&#34;&gt;part 3&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=nsHu6vEgPew&amp;amp;list=PLa85ZdUjfWS21mgibJ2vCvLziprjpKoW0&amp;amp;index=24&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Microsoft Research Webinar &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Registration is free and all videos are available on-demand.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://note.microsoft.com/MSR-Webinar-DeepSpeed-Registration-On-Demand.html&#34;&gt;ZeRO &amp;amp; Fastest BERT: Increasing the scale and speed of deep learning training in DeepSpeed&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/yBVXR8G8Bg8&#34;&gt;DeepSpeed on AzureML&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=cntxC3g22oU&#34;&gt;Large Model Training and Inference with DeepSpeed // Samyam Rajbhandari // LLMs in Prod Conference&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/DeepSpeed/master/docs/assets/files/presentation-mlops.pdf&#34;&gt;[slides]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Community Tutorials &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=pDGI668pNg0&#34;&gt;DeepSpeed: All the tricks to scale to gigantic models (Mark Saroufim)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=tC01FRB0M7w&#34;&gt;Turing-NLG, DeepSpeed and the ZeRO optimizer (Yannic Kilcher)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=hc0u4avAkuM&#34;&gt;Ultimate Guide To Scaling ML Models (The AI Epiphany)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>harry0703/MoneyPrinterTurbo</title>
    <updated>2024-07-07T01:46:23Z</updated>
    <id>tag:github.com,2024-07-07:/harry0703/MoneyPrinterTurbo</id>
    <link href="https://github.com/harry0703/MoneyPrinterTurbo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Âà©Áî®AIÂ§ßÊ®°ÂûãÔºå‰∏ÄÈîÆÁîüÊàêÈ´òÊ∏ÖÁü≠ËßÜÈ¢ë Generate short videos with one click using AI LLM.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1 align=&#34;center&#34;&gt;MoneyPrinterTurbo üí∏&lt;/h1&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/harry0703/MoneyPrinterTurbo/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/harry0703/MoneyPrinterTurbo.svg?style=for-the-badge&#34; alt=&#34;Stargazers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/harry0703/MoneyPrinterTurbo/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/harry0703/MoneyPrinterTurbo.svg?style=for-the-badge&#34; alt=&#34;Issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/harry0703/MoneyPrinterTurbo/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/harry0703/MoneyPrinterTurbo.svg?style=for-the-badge&#34; alt=&#34;Forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/harry0703/MoneyPrinterTurbo/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/harry0703/MoneyPrinterTurbo.svg?style=for-the-badge&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;h3&gt;ÁÆÄ‰Ωì‰∏≠Êñá | &lt;a href=&#34;https://raw.githubusercontent.com/harry0703/MoneyPrinterTurbo/main/README-en.md&#34;&gt;English&lt;/a&gt;&lt;/h3&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;a href=&#34;https://trendshift.io/repositories/8731&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://trendshift.io/api/badge/repositories/8731&#34; alt=&#34;harry0703%2FMoneyPrinterTurbo | Trendshift&#34; style=&#34;width: 250px; height: 55px;&#34; width=&#34;250&#34; height=&#34;55&#34;&gt;&lt;/a&gt; &#xA; &lt;/div&gt; &#xA; &lt;br&gt; Âè™ÈúÄÊèê‰æõ‰∏Ä‰∏™ËßÜÈ¢ë &#xA; &lt;b&gt;‰∏ªÈ¢ò&lt;/b&gt; Êàñ &#xA; &lt;b&gt;ÂÖ≥ÈîÆËØç&lt;/b&gt; ÔºåÂ∞±ÂèØ‰ª•ÂÖ®Ëá™Âä®ÁîüÊàêËßÜÈ¢ëÊñáÊ°à„ÄÅËßÜÈ¢ëÁ¥†Êùê„ÄÅËßÜÈ¢ëÂ≠óÂπï„ÄÅËßÜÈ¢ëËÉåÊôØÈü≥‰πêÔºåÁÑ∂ÂêéÂêàÊàê‰∏Ä‰∏™È´òÊ∏ÖÁöÑÁü≠ËßÜÈ¢ë„ÄÇ &#xA; &lt;br&gt; &#xA; &lt;h4&gt;WebÁïåÈù¢&lt;/h4&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/harry0703/MoneyPrinterTurbo/main/docs/webui.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA; &lt;h4&gt;APIÁïåÈù¢&lt;/h4&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/harry0703/MoneyPrinterTurbo/main/docs/api.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;ÁâπÂà´ÊÑüË∞¢ üôè&lt;/h2&gt; &#xA;&lt;p&gt;Áî±‰∫éËØ•È°πÁõÆÁöÑ &lt;strong&gt;ÈÉ®ÁΩ≤&lt;/strong&gt; Âíå &lt;strong&gt;‰ΩøÁî®&lt;/strong&gt;ÔºåÂØπ‰∫é‰∏Ä‰∫õÂ∞èÁôΩÁî®Êà∑Êù•ËØ¥ÔºåËøòÊòØ &lt;strong&gt;Êúâ‰∏ÄÂÆöÁöÑÈó®Êßõ&lt;/strong&gt;ÔºåÂú®Ê≠§ÁâπÂà´ÊÑüË∞¢ &lt;strong&gt;ÂΩïÂíñÔºàAIÊô∫ËÉΩ Â§öÂ™í‰ΩìÊúçÂä°Âπ≥Âè∞Ôºâ&lt;/strong&gt; ÁΩëÁ´ôÂü∫‰∫éËØ•È°πÁõÆÔºåÊèê‰æõÁöÑÂÖçË¥π&lt;code&gt;AIËßÜÈ¢ëÁîüÊàêÂô®&lt;/code&gt;ÊúçÂä°ÔºåÂèØ‰ª•‰∏çÁî®ÈÉ®ÁΩ≤ÔºåÁõ¥Êé•Âú®Á∫ø‰ΩøÁî®ÔºåÈùûÂ∏∏Êñπ‰æø„ÄÇ&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‰∏≠ÊñáÁâàÔºö&lt;a href=&#34;https://reccloud.cn&#34;&gt;https://reccloud.cn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ëã±ÊñáÁâàÔºö&lt;a href=&#34;https://reccloud.com&#34;&gt;https://reccloud.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/harry0703/MoneyPrinterTurbo/main/docs/reccloud.cn.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ÊÑüË∞¢ËµûÂä© üôè&lt;/h2&gt; &#xA;&lt;p&gt;ÊÑüË∞¢‰ΩêÁ≥ñ &lt;a href=&#34;https://picwish.cn&#34;&gt;https://picwish.cn&lt;/a&gt; ÂØπËØ•È°πÁõÆÁöÑÊîØÊåÅÂíåËµûÂä©Ôºå‰ΩøÂæóËØ•È°πÁõÆËÉΩÂ§üÊåÅÁª≠ÁöÑÊõ¥Êñ∞ÂíåÁª¥Êä§„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;‰ΩêÁ≥ñ‰∏ìÊ≥®‰∫é&lt;strong&gt;ÂõæÂÉèÂ§ÑÁêÜÈ¢ÜÂüü&lt;/strong&gt;ÔºåÊèê‰æõ‰∏∞ÂØåÁöÑ&lt;strong&gt;ÂõæÂÉèÂ§ÑÁêÜÂ∑•ÂÖ∑&lt;/strong&gt;ÔºåÂ∞ÜÂ§çÊùÇÊìç‰ΩúÊûÅËá¥ÁÆÄÂåñÔºåÁúüÊ≠£ÂÆûÁé∞ËÆ©ÂõæÂÉèÂ§ÑÁêÜÊõ¥ÁÆÄÂçï„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/harry0703/MoneyPrinterTurbo/main/docs/picwish.jpg&#34; alt=&#34;picwish.jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ÂäüËÉΩÁâπÊÄß üéØ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ÂÆåÊï¥ÁöÑ &lt;strong&gt;MVCÊû∂ÊûÑ&lt;/strong&gt;Ôºå‰ª£Á†Å &lt;strong&gt;ÁªìÊûÑÊ∏ÖÊô∞&lt;/strong&gt;ÔºåÊòì‰∫éÁª¥Êä§ÔºåÊîØÊåÅ &lt;code&gt;API&lt;/code&gt; Âíå &lt;code&gt;WebÁïåÈù¢&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ÊîØÊåÅËßÜÈ¢ëÊñáÊ°à &lt;strong&gt;AIËá™Âä®ÁîüÊàê&lt;/strong&gt;Ôºå‰πüÂèØ‰ª•&lt;strong&gt;Ëá™ÂÆö‰πâÊñáÊ°à&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ÊîØÊåÅÂ§öÁßç &lt;strong&gt;È´òÊ∏ÖËßÜÈ¢ë&lt;/strong&gt; Â∞∫ÂØ∏ &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Á´ñÂ±è 9:16Ôºå&lt;code&gt;1080x1920&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Ê®™Â±è 16:9Ôºå&lt;code&gt;1920x1080&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ÊîØÊåÅ &lt;strong&gt;ÊâπÈáèËßÜÈ¢ëÁîüÊàê&lt;/strong&gt;ÔºåÂèØ‰ª•‰∏ÄÊ¨°ÁîüÊàêÂ§ö‰∏™ËßÜÈ¢ëÔºåÁÑ∂ÂêéÈÄâÊã©‰∏Ä‰∏™ÊúÄÊª°ÊÑèÁöÑ&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ÊîØÊåÅ &lt;strong&gt;ËßÜÈ¢ëÁâáÊÆµÊó∂Èïø&lt;/strong&gt; ËÆæÁΩÆÔºåÊñπ‰æøË∞ÉËäÇÁ¥†ÊùêÂàáÊç¢È¢ëÁéá&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ÊîØÊåÅ &lt;strong&gt;‰∏≠Êñá&lt;/strong&gt; Âíå &lt;strong&gt;Ëã±Êñá&lt;/strong&gt; ËßÜÈ¢ëÊñáÊ°à&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ÊîØÊåÅ &lt;strong&gt;Â§öÁßçËØ≠Èü≥&lt;/strong&gt; ÂêàÊàêÔºåÂèØ &lt;strong&gt;ÂÆûÊó∂ËØïÂê¨&lt;/strong&gt; ÊïàÊûú&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ÊîØÊåÅ &lt;strong&gt;Â≠óÂπïÁîüÊàê&lt;/strong&gt;ÔºåÂèØ‰ª•Ë∞ÉÊï¥ &lt;code&gt;Â≠ó‰Ωì&lt;/code&gt;„ÄÅ&lt;code&gt;‰ΩçÁΩÆ&lt;/code&gt;„ÄÅ&lt;code&gt;È¢úËâ≤&lt;/code&gt;„ÄÅ&lt;code&gt;Â§ßÂ∞è&lt;/code&gt;ÔºåÂêåÊó∂ÊîØÊåÅ&lt;code&gt;Â≠óÂπïÊèèËæπ&lt;/code&gt;ËÆæÁΩÆ&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ÊîØÊåÅ &lt;strong&gt;ËÉåÊôØÈü≥‰πê&lt;/strong&gt;ÔºåÈöèÊú∫ÊàñËÄÖÊåáÂÆöÈü≥‰πêÊñá‰ª∂ÔºåÂèØËÆæÁΩÆ&lt;code&gt;ËÉåÊôØÈü≥‰πêÈü≥Èáè&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ËßÜÈ¢ëÁ¥†ÊùêÊù•Ê∫ê &lt;strong&gt;È´òÊ∏Ö&lt;/strong&gt;ÔºåËÄå‰∏î &lt;strong&gt;Êó†ÁâàÊùÉ&lt;/strong&gt;Ôºå‰πüÂèØ‰ª•‰ΩøÁî®Ëá™Â∑±ÁöÑ &lt;strong&gt;Êú¨Âú∞Á¥†Êùê&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ÊîØÊåÅ &lt;strong&gt;OpenAI&lt;/strong&gt;„ÄÅ&lt;strong&gt;Moonshot&lt;/strong&gt;„ÄÅ&lt;strong&gt;Azure&lt;/strong&gt;„ÄÅ&lt;strong&gt;gpt4free&lt;/strong&gt;„ÄÅ&lt;strong&gt;one-api&lt;/strong&gt;„ÄÅ&lt;strong&gt;ÈÄö‰πâÂçÉÈóÆ&lt;/strong&gt;„ÄÅ&lt;strong&gt;Google Gemini&lt;/strong&gt;„ÄÅ&lt;strong&gt;Ollama&lt;/strong&gt;„ÄÅ &lt;strong&gt;DeepSeek&lt;/strong&gt;„ÄÅ &lt;strong&gt;ÊñáÂøÉ‰∏ÄË®Ä&lt;/strong&gt; Á≠âÂ§öÁßçÊ®°ÂûãÊé•ÂÖ• &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;‰∏≠ÂõΩÁî®Êà∑Âª∫ËÆÆ‰ΩøÁî® &lt;strong&gt;DeepSeek&lt;/strong&gt; Êàñ &lt;strong&gt;Moonshot&lt;/strong&gt; ‰Ωú‰∏∫Â§ßÊ®°ÂûãÊèê‰æõÂïÜÔºàÂõΩÂÜÖÂèØÁõ¥Êé•ËÆøÈóÆÔºå‰∏çÈúÄË¶ÅVPN„ÄÇÊ≥®ÂÜåÂ∞±ÈÄÅÈ¢ùÂ∫¶ÔºåÂü∫Êú¨Â§üÁî®Ôºâ&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;ÂêéÊúüËÆ°Âàí üìÖ&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; GPT-SoVITS ÈÖçÈü≥ÊîØÊåÅ&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; ‰ºòÂåñËØ≠Èü≥ÂêàÊàêÔºåÂà©Áî®Â§ßÊ®°ÂûãÔºå‰ΩøÂÖ∂ÂêàÊàêÁöÑÂ£∞Èü≥ÔºåÊõ¥Âä†Ëá™ÁÑ∂ÔºåÊÉÖÁª™Êõ¥Âä†‰∏∞ÂØå&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Â¢ûÂä†ËßÜÈ¢ëËΩ¨Âú∫ÊïàÊûúÔºå‰ΩøÂÖ∂ÁúãËµ∑Êù•Êõ¥Âä†ÁöÑÊµÅÁïÖ&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Â¢ûÂä†Êõ¥Â§öËßÜÈ¢ëÁ¥†ÊùêÊù•Ê∫êÔºå‰ºòÂåñËßÜÈ¢ëÁ¥†ÊùêÂíåÊñáÊ°àÁöÑÂåπÈÖçÂ∫¶&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Â¢ûÂä†ËßÜÈ¢ëÈïøÂ∫¶ÈÄâÈ°πÔºöÁü≠„ÄÅ‰∏≠„ÄÅÈïø&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; ÊîØÊåÅÊõ¥Â§öÁöÑËØ≠Èü≥ÂêàÊàêÊúçÂä°ÂïÜÔºåÊØîÂ¶Ç OpenAI TTS&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Ëá™Âä®‰∏ä‰º†Âà∞YouTubeÂπ≥Âè∞&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‰∫§ÊµÅËÆ®ËÆ∫ üí¨&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/harry0703/MoneyPrinterTurbo/main/docs/wechat-group.jpg&#34; width=&#34;250&#34;&gt; &#xA;&lt;h2&gt;ËßÜÈ¢ëÊºîÁ§∫ üì∫&lt;/h2&gt; &#xA;&lt;h3&gt;Á´ñÂ±è 9:16&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&#xA;    &lt;g-emoji class=&#34;g-emoji&#34; alias=&#34;arrow_forward&#34;&gt;&#xA;     ‚ñ∂Ô∏è&#xA;    &lt;/g-emoji&gt; „ÄäÂ¶Ç‰ΩïÂ¢ûÂä†ÁîüÊ¥ªÁöÑ‰πêË∂£„Äã&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&#xA;    &lt;g-emoji class=&#34;g-emoji&#34; alias=&#34;arrow_forward&#34;&gt;&#xA;     ‚ñ∂Ô∏è&#xA;    &lt;/g-emoji&gt; „ÄäÈáëÈí±ÁöÑ‰ΩúÁî®„Äã&lt;br&gt;Êõ¥ÁúüÂÆûÁöÑÂêàÊàêÂ£∞Èü≥&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&#xA;    &lt;g-emoji class=&#34;g-emoji&#34; alias=&#34;arrow_forward&#34;&gt;&#xA;     ‚ñ∂Ô∏è&#xA;    &lt;/g-emoji&gt; „ÄäÁîüÂëΩÁöÑÊÑè‰πâÊòØ‰ªÄ‰πà„Äã&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&#xA;    &lt;video src=&#34;https://github.com/harry0703/MoneyPrinterTurbo/assets/4928832/a84d33d5-27a2-4aba-8fd0-9fb2bd91c6a6&#34;&gt;&lt;/video&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&#xA;    &lt;video src=&#34;https://github.com/harry0703/MoneyPrinterTurbo/assets/4928832/af2f3b0b-002e-49fe-b161-18ba91c055e8&#34;&gt;&lt;/video&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&#xA;    &lt;video src=&#34;https://github.com/harry0703/MoneyPrinterTurbo/assets/4928832/112c9564-d52b-4472-99ad-970b75f66476&#34;&gt;&lt;/video&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Ê®™Â±è 16:9&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&#xA;    &lt;g-emoji class=&#34;g-emoji&#34; alias=&#34;arrow_forward&#34;&gt;&#xA;     ‚ñ∂Ô∏è&#xA;    &lt;/g-emoji&gt;„ÄäÁîüÂëΩÁöÑÊÑè‰πâÊòØ‰ªÄ‰πà„Äã&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&#xA;    &lt;g-emoji class=&#34;g-emoji&#34; alias=&#34;arrow_forward&#34;&gt;&#xA;     ‚ñ∂Ô∏è&#xA;    &lt;/g-emoji&gt;„Ää‰∏∫‰ªÄ‰πàË¶ÅËøêÂä®„Äã&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&#xA;    &lt;video src=&#34;https://github.com/harry0703/MoneyPrinterTurbo/assets/4928832/346ebb15-c55f-47a9-a653-114f08bb8073&#34;&gt;&lt;/video&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&#xA;    &lt;video src=&#34;https://github.com/harry0703/MoneyPrinterTurbo/assets/4928832/271f2fae-8283-44a0-8aa0-0ed8f9a6fa87&#34;&gt;&lt;/video&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;ÈÖçÁΩÆË¶ÅÊ±Ç üì¶&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Âª∫ËÆÆÊúÄ‰Ωé CPU 4Ê†∏Êàñ‰ª•‰∏äÔºåÂÜÖÂ≠ò 8G Êàñ‰ª•‰∏äÔºåÊòæÂç°ÈùûÂøÖÈ°ª&lt;/li&gt; &#xA; &lt;li&gt;Windows 10 Êàñ MacOS 11.0 ‰ª•‰∏äÁ≥ªÁªü&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Âø´ÈÄüÂºÄÂßã üöÄ&lt;/h2&gt; &#xA;&lt;p&gt;‰∏ãËΩΩ‰∏ÄÈîÆÂêØÂä®ÂåÖÔºåËß£ÂéãÁõ¥Êé•‰ΩøÁî®ÔºàË∑ØÂæÑ‰∏çË¶ÅÊúâ &lt;strong&gt;‰∏≠Êñá&lt;/strong&gt; Âíå &lt;strong&gt;Á©∫Ê†º&lt;/strong&gt;Ôºâ&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ÁôæÂ∫¶ÁΩëÁõò: &lt;a href=&#34;https://pan.baidu.com/s/1MzBmcLTmVWohPEp9ohvvzA?pwd=pdcu&#34;&gt;https://pan.baidu.com/s/1MzBmcLTmVWohPEp9ohvvzA?pwd=pdcu&lt;/a&gt; ÊèêÂèñÁ†Å: pdcu&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;‰∏ãËΩΩÂêéÔºåÂª∫ËÆÆÂÖà&lt;strong&gt;ÂèåÂáªÊâßË°å&lt;/strong&gt; &lt;code&gt;update.bat&lt;/code&gt; Êõ¥Êñ∞Âà∞&lt;strong&gt;ÊúÄÊñ∞‰ª£Á†Å&lt;/strong&gt;ÔºåÁÑ∂ÂêéÂèåÂáª &lt;code&gt;start.bat&lt;/code&gt; ÂêØÂä®&lt;/p&gt; &#xA;&lt;p&gt;ÂêØÂä®ÂêéÔºå‰ºöËá™Âä®ÊâìÂºÄÊµèËßàÂô®ÔºàÂ¶ÇÊûúÊâìÂºÄÊòØÁ©∫ÁôΩÔºåÂª∫ËÆÆÊç¢Êàê &lt;strong&gt;Chrome&lt;/strong&gt; ÊàñËÄÖ &lt;strong&gt;Edge&lt;/strong&gt; ÊâìÂºÄÔºâ&lt;/p&gt; &#xA;&lt;h3&gt;ÂÖ∂‰ªñÁ≥ªÁªü&lt;/h3&gt; &#xA;&lt;p&gt;ËøòÊ≤°ÊúâÂà∂‰Ωú‰∏ÄÈîÆÂêØÂä®ÂåÖÔºåÁúã‰∏ãÈù¢ÁöÑ &lt;strong&gt;ÂÆâË£ÖÈÉ®ÁΩ≤&lt;/strong&gt; ÈÉ®ÂàÜÔºåÂª∫ËÆÆ‰ΩøÁî® &lt;strong&gt;docker&lt;/strong&gt; ÈÉ®ÁΩ≤ÔºåÊõ¥Âä†Êñπ‰æø„ÄÇ&lt;/p&gt; &#xA;&lt;h2&gt;ÂÆâË£ÖÈÉ®ÁΩ≤ üì•&lt;/h2&gt; &#xA;&lt;h3&gt;ÂâçÊèêÊù°‰ª∂&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Â∞ΩÈáè‰∏çË¶Å‰ΩøÁî® &lt;strong&gt;‰∏≠ÊñáË∑ØÂæÑ&lt;/strong&gt;ÔºåÈÅøÂÖçÂá∫Áé∞‰∏Ä‰∫õÊó†Ê≥ïÈ¢ÑÊñôÁöÑÈóÆÈ¢ò&lt;/li&gt; &#xA; &lt;li&gt;ËØ∑Á°Æ‰øù‰Ω†ÁöÑ &lt;strong&gt;ÁΩëÁªú&lt;/strong&gt; ÊòØÊ≠£Â∏∏ÁöÑÔºåVPNÈúÄË¶ÅÊâìÂºÄ&lt;code&gt;ÂÖ®Â±ÄÊµÅÈáè&lt;/code&gt;Ê®°Âºè&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;‚ë† ÂÖãÈöÜ‰ª£Á†Å&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/harry0703/MoneyPrinterTurbo.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;‚ë° ‰øÆÊîπÈÖçÁΩÆÊñá‰ª∂&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Â∞Ü &lt;code&gt;config.example.toml&lt;/code&gt; Êñá‰ª∂Â§çÂà∂‰∏Ä‰ªΩÔºåÂëΩÂêç‰∏∫ &lt;code&gt;config.toml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;ÊåâÁÖß &lt;code&gt;config.toml&lt;/code&gt; Êñá‰ª∂‰∏≠ÁöÑËØ¥ÊòéÔºåÈÖçÁΩÆÂ•Ω &lt;code&gt;pexels_api_keys&lt;/code&gt; Âíå &lt;code&gt;llm_provider&lt;/code&gt;ÔºåÂπ∂Ê†πÊçÆ llm_provider ÂØπÂ∫îÁöÑÊúçÂä°ÂïÜÔºåÈÖçÁΩÆÁõ∏ÂÖ≥ÁöÑ API Key&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;DockerÈÉ®ÁΩ≤ üê≥&lt;/h3&gt; &#xA;&lt;h4&gt;‚ë† ÂêØÂä®Docker&lt;/h4&gt; &#xA;&lt;p&gt;Â¶ÇÊûúÊú™ÂÆâË£Ö DockerÔºåËØ∑ÂÖàÂÆâË£Ö &lt;a href=&#34;https://www.docker.com/products/docker-desktop/&#34;&gt;https://www.docker.com/products/docker-desktop/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Â¶ÇÊûúÊòØWindowsÁ≥ªÁªüÔºåËØ∑ÂèÇËÄÉÂæÆËΩØÁöÑÊñáÊ°£Ôºö&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/zh-cn/windows/wsl/install&#34;&gt;https://learn.microsoft.com/zh-cn/windows/wsl/install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/zh-cn/windows/wsl/tutorials/wsl-containers&#34;&gt;https://learn.microsoft.com/zh-cn/windows/wsl/tutorials/wsl-containers&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd MoneyPrinterTurbo&#xA;docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;‚ë° ËÆøÈóÆWebÁïåÈù¢&lt;/h4&gt; &#xA;&lt;p&gt;ÊâìÂºÄÊµèËßàÂô®ÔºåËÆøÈóÆ &lt;a href=&#34;http://0.0.0.0:8501&#34;&gt;http://0.0.0.0:8501&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;‚ë¢ ËÆøÈóÆAPIÊñáÊ°£&lt;/h4&gt; &#xA;&lt;p&gt;ÊâìÂºÄÊµèËßàÂô®ÔºåËÆøÈóÆ &lt;a href=&#34;http://0.0.0.0:8080/docs&#34;&gt;http://0.0.0.0:8080/docs&lt;/a&gt; ÊàñËÄÖ &lt;a href=&#34;http://0.0.0.0:8080/redoc&#34;&gt;http://0.0.0.0:8080/redoc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;ÊâãÂä®ÈÉ®ÁΩ≤ üì¶&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ËßÜÈ¢ëÊïôÁ®ã&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ÂÆåÊï¥ÁöÑ‰ΩøÁî®ÊºîÁ§∫Ôºö&lt;a href=&#34;https://v.douyin.com/iFhnwsKY/&#34;&gt;https://v.douyin.com/iFhnwsKY/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Â¶Ç‰ΩïÂú®Windows‰∏äÈÉ®ÁΩ≤Ôºö&lt;a href=&#34;https://v.douyin.com/iFyjoW3M&#34;&gt;https://v.douyin.com/iFyjoW3M&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;‚ë† ÂàõÂª∫ËôöÊãüÁéØÂ¢É&lt;/h4&gt; &#xA;&lt;p&gt;Âª∫ËÆÆ‰ΩøÁî® &lt;a href=&#34;https://conda.io/projects/conda/en/latest/user-guide/install/index.html&#34;&gt;conda&lt;/a&gt; ÂàõÂª∫ python ËôöÊãüÁéØÂ¢É&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/harry0703/MoneyPrinterTurbo.git&#xA;cd MoneyPrinterTurbo&#xA;conda create -n MoneyPrinterTurbo python=3.10&#xA;conda activate MoneyPrinterTurbo&#xA;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;‚ë° ÂÆâË£ÖÂ•Ω ImageMagick&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Windows:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;‰∏ãËΩΩ &lt;a href=&#34;https://imagemagick.org/script/download.php&#34;&gt;https://imagemagick.org/script/download.php&lt;/a&gt; ÈÄâÊã©WindowsÁâàÊú¨ÔºåÂàáËÆ∞‰∏ÄÂÆöË¶ÅÈÄâÊã© &lt;strong&gt;ÈùôÊÄÅÂ∫ì&lt;/strong&gt; ÁâàÊú¨ÔºåÊØîÂ¶Ç ImageMagick-7.1.1-32-Q16-x64-&lt;strong&gt;static&lt;/strong&gt;.exe&lt;/li&gt; &#xA;   &lt;li&gt;ÂÆâË£Ö‰∏ãËΩΩÂ•ΩÁöÑ ImageMagickÔºå&lt;strong&gt;Ê≥®ÊÑè‰∏çË¶Å‰øÆÊîπÂÆâË£ÖË∑ØÂæÑ&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;‰øÆÊîπ &lt;code&gt;ÈÖçÁΩÆÊñá‰ª∂ config.toml&lt;/code&gt; ‰∏≠ÁöÑ &lt;code&gt;imagemagick_path&lt;/code&gt; ‰∏∫‰Ω†ÁöÑ &lt;strong&gt;ÂÆûÈôÖÂÆâË£ÖË∑ØÂæÑ&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MacOS:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install imagemagick&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ubuntu&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt-get install imagemagick&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CentOS&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo yum install ImageMagick&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;‚ë¢ ÂêØÂä®WebÁïåÈù¢ üåê&lt;/h4&gt; &#xA;&lt;p&gt;Ê≥®ÊÑèÈúÄË¶ÅÂà∞ MoneyPrinterTurbo È°πÁõÆ &lt;code&gt;Ê†πÁõÆÂΩï&lt;/code&gt; ‰∏ãÊâßË°å‰ª•‰∏ãÂëΩ‰ª§&lt;/p&gt; &#xA;&lt;h6&gt;Windows&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;conda activate MoneyPrinterTurbo&#xA;webui.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;MacOS or Linux&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;conda activate MoneyPrinterTurbo&#xA;sh webui.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ÂêØÂä®ÂêéÔºå‰ºöËá™Âä®ÊâìÂºÄÊµèËßàÂô®ÔºàÂ¶ÇÊûúÊâìÂºÄÊòØÁ©∫ÁôΩÔºåÂª∫ËÆÆÊç¢Êàê &lt;strong&gt;Chrome&lt;/strong&gt; ÊàñËÄÖ &lt;strong&gt;Edge&lt;/strong&gt; ÊâìÂºÄÔºâ&lt;/p&gt; &#xA;&lt;h4&gt;‚ë£ ÂêØÂä®APIÊúçÂä° üöÄ&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python main.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ÂêØÂä®ÂêéÔºåÂèØ‰ª•Êü•Áúã &lt;code&gt;APIÊñáÊ°£&lt;/code&gt; &lt;a href=&#34;http://127.0.0.1:8080/docs&#34;&gt;http://127.0.0.1:8080/docs&lt;/a&gt; ÊàñËÄÖ &lt;a href=&#34;http://127.0.0.1:8080/redoc&#34;&gt;http://127.0.0.1:8080/redoc&lt;/a&gt; Áõ¥Êé•Âú®Á∫øË∞ÉËØïÊé•Âè£ÔºåÂø´ÈÄü‰ΩìÈ™å„ÄÇ&lt;/p&gt; &#xA;&lt;h2&gt;ËØ≠Èü≥ÂêàÊàê üó£&lt;/h2&gt; &#xA;&lt;p&gt;ÊâÄÊúâÊîØÊåÅÁöÑÂ£∞Èü≥ÂàóË°®ÔºåÂèØ‰ª•Êü•ÁúãÔºö&lt;a href=&#34;https://raw.githubusercontent.com/harry0703/MoneyPrinterTurbo/main/docs/voice-list.txt&#34;&gt;Â£∞Èü≥ÂàóË°®&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;2024-04-16 v1.1.2 Êñ∞Â¢û‰∫Ü9ÁßçAzureÁöÑËØ≠Èü≥ÂêàÊàêÂ£∞Èü≥ÔºåÈúÄË¶ÅÈÖçÁΩÆAPI KEYÔºåËØ•Â£∞Èü≥ÂêàÊàêÁöÑÊõ¥Âä†ÁúüÂÆû„ÄÇ&lt;/p&gt; &#xA;&lt;h2&gt;Â≠óÂπïÁîüÊàê üìú&lt;/h2&gt; &#xA;&lt;p&gt;ÂΩìÂâçÊîØÊåÅ2ÁßçÂ≠óÂπïÁîüÊàêÊñπÂºèÔºö&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;edge&lt;/strong&gt;: ÁîüÊàê&lt;code&gt;ÈÄüÂ∫¶Âø´&lt;/code&gt;ÔºåÊÄßËÉΩÊõ¥Â•ΩÔºåÂØπÁîµËÑëÈÖçÁΩÆÊ≤°ÊúâË¶ÅÊ±ÇÔºå‰ΩÜÊòØË¥®ÈáèÂèØËÉΩ‰∏çÁ®≥ÂÆö&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;whisper&lt;/strong&gt;: ÁîüÊàê&lt;code&gt;ÈÄüÂ∫¶ÊÖ¢&lt;/code&gt;ÔºåÊÄßËÉΩËæÉÂ∑ÆÔºåÂØπÁîµËÑëÈÖçÁΩÆÊúâ‰∏ÄÂÆöË¶ÅÊ±ÇÔºå‰ΩÜÊòØ&lt;code&gt;Ë¥®ÈáèÊõ¥ÂèØÈù†&lt;/code&gt;„ÄÇ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;ÂèØ‰ª•‰øÆÊîπ &lt;code&gt;config.toml&lt;/code&gt; ÈÖçÁΩÆÊñá‰ª∂‰∏≠ÁöÑ &lt;code&gt;subtitle_provider&lt;/code&gt; ËøõË°åÂàáÊç¢&lt;/p&gt; &#xA;&lt;p&gt;Âª∫ËÆÆ‰ΩøÁî® &lt;code&gt;edge&lt;/code&gt; Ê®°ÂºèÔºåÂ¶ÇÊûúÁîüÊàêÁöÑÂ≠óÂπïË¥®Èáè‰∏çÂ•ΩÔºåÂÜçÂàáÊç¢Âà∞ &lt;code&gt;whisper&lt;/code&gt; Ê®°Âºè&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Ê≥®ÊÑèÔºö&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;whisper Ê®°Âºè‰∏ãÈúÄË¶ÅÂà∞ HuggingFace ‰∏ãËΩΩ‰∏Ä‰∏™Ê®°ÂûãÊñá‰ª∂ÔºåÂ§ßÁ∫¶ 3GB Â∑¶Âè≥ÔºåËØ∑Á°Æ‰øùÁΩëÁªúÈÄöÁïÖ&lt;/li&gt; &#xA; &lt;li&gt;Â¶ÇÊûúÁïôÁ©∫ÔºåË°®Á§∫‰∏çÁîüÊàêÂ≠óÂπï„ÄÇ&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Áî±‰∫éÂõΩÂÜÖÊó†Ê≥ïËÆøÈóÆ HuggingFaceÔºåÂèØ‰ª•‰ΩøÁî®‰ª•‰∏ãÊñπÊ≥ï‰∏ãËΩΩ &lt;code&gt;whisper-large-v3&lt;/code&gt; ÁöÑÊ®°ÂûãÊñá‰ª∂&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;‰∏ãËΩΩÂú∞ÂùÄÔºö&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ÁôæÂ∫¶ÁΩëÁõò: &lt;a href=&#34;https://pan.baidu.com/s/11h3Q6tsDtjQKTjUu3sc5cA?pwd=xjs9&#34;&gt;https://pan.baidu.com/s/11h3Q6tsDtjQKTjUu3sc5cA?pwd=xjs9&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Â§∏ÂÖãÁΩëÁõòÔºö&lt;a href=&#34;https://pan.quark.cn/s/3ee3d991d64b&#34;&gt;https://pan.quark.cn/s/3ee3d991d64b&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Ê®°Âûã‰∏ãËΩΩÂêéËß£ÂéãÔºåÊï¥‰∏™ÁõÆÂΩïÊîæÂà∞ &lt;code&gt;.\MoneyPrinterTurbo\models&lt;/code&gt; ÈáåÈù¢Ôºå ÊúÄÁªàÁöÑÊñá‰ª∂Ë∑ØÂæÑÂ∫îËØ•ÊòØËøôÊ†∑: &lt;code&gt;.\MoneyPrinterTurbo\models\whisper-large-v3&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;MoneyPrinterTurbo  &#xA;  ‚îú‚îÄmodels&#xA;  ‚îÇ   ‚îî‚îÄwhisper-large-v3&#xA;  ‚îÇ          config.json&#xA;  ‚îÇ          model.bin&#xA;  ‚îÇ          preprocessor_config.json&#xA;  ‚îÇ          tokenizer.json&#xA;  ‚îÇ          vocabulary.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ËÉåÊôØÈü≥‰πê üéµ&lt;/h2&gt; &#xA;&lt;p&gt;Áî®‰∫éËßÜÈ¢ëÁöÑËÉåÊôØÈü≥‰πêÔºå‰Ωç‰∫éÈ°πÁõÆÁöÑ &lt;code&gt;resource/songs&lt;/code&gt; ÁõÆÂΩï‰∏ã„ÄÇ&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ÂΩìÂâçÈ°πÁõÆÈáåÈù¢Êîæ‰∫Ü‰∏Ä‰∫õÈªòËÆ§ÁöÑÈü≥‰πêÔºåÊù•Ëá™‰∫é YouTube ËßÜÈ¢ëÔºåÂ¶ÇÊúâ‰æµÊùÉÔºåËØ∑Âà†Èô§„ÄÇ&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Â≠óÂπïÂ≠ó‰Ωì üÖ∞&lt;/h2&gt; &#xA;&lt;p&gt;Áî®‰∫éËßÜÈ¢ëÂ≠óÂπïÁöÑÊ∏≤ÊüìÔºå‰Ωç‰∫éÈ°πÁõÆÁöÑ &lt;code&gt;resource/fonts&lt;/code&gt; ÁõÆÂΩï‰∏ãÔºå‰Ω†‰πüÂèØ‰ª•ÊîæËøõÂéªËá™Â∑±ÁöÑÂ≠ó‰Ωì„ÄÇ&lt;/p&gt; &#xA;&lt;h2&gt;Â∏∏ËßÅÈóÆÈ¢ò ü§î&lt;/h2&gt; &#xA;&lt;h3&gt;‚ùìÂ¶Ç‰Ωï‰ΩøÁî®ÂÖçË¥πÁöÑOpenAI GPT-3.5Ê®°Âûã?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://openai.com/blog/start-using-chatgpt-instantly&#34;&gt;OpenAIÂÆ£Â∏ÉChatGPTÈáåÈù¢3.5Â∑≤ÁªèÂÖçË¥π‰∫Ü&lt;/a&gt;ÔºåÊúâÂºÄÂèëËÄÖÂ∞ÜÂÖ∂Â∞ÅË£ÖÊàê‰∫ÜAPIÔºåÂèØ‰ª•Áõ¥Êé•Ë∞ÉÁî®&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Á°Æ‰øù‰Ω†ÂÆâË£ÖÂíåÂêØÂä®‰∫ÜdockerÊúçÂä°&lt;/strong&gt;ÔºåÊâßË°å‰ª•‰∏ãÂëΩ‰ª§ÂêØÂä®dockerÊúçÂä°&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -p 3040:3040 missuo/freegpt35&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ÂêØÂä®ÊàêÂäüÂêéÔºå‰øÆÊîπ &lt;code&gt;config.toml&lt;/code&gt; ‰∏≠ÁöÑÈÖçÁΩÆ&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;llm_provider&lt;/code&gt; ËÆæÁΩÆ‰∏∫ &lt;code&gt;openai&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;openai_api_key&lt;/code&gt; Èöè‰æøÂ°´ÂÜô‰∏Ä‰∏™Âç≥ÂèØÔºåÊØîÂ¶Ç &#39;123456&#39;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;openai_base_url&lt;/code&gt; Êîπ‰∏∫ &lt;code&gt;http://localhost:3040/v1/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;openai_model_name&lt;/code&gt; Êîπ‰∏∫ &lt;code&gt;gpt-3.5-turbo&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Ê≥®ÊÑèÔºöËØ•ÊñπÂºèÁ®≥ÂÆöÊÄßËæÉÂ∑Æ&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;‚ùìAttributeError: &#39;str&#39; object has no attribute &#39;choices&#39;`&lt;/h3&gt; &#xA;&lt;p&gt;Ëøô‰∏™ÈóÆÈ¢òÊòØÁî±‰∫éÂ§ßÊ®°ÂûãÊ≤°ÊúâËøîÂõûÊ≠£Á°ÆÁöÑÂõûÂ§çÂØºËá¥ÁöÑ„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;Â§ßÊ¶ÇÁéáÊòØÁΩëÁªúÂéüÂõ†Ôºå ‰ΩøÁî® &lt;strong&gt;VPN&lt;/strong&gt;ÔºåÊàñËÄÖËÆæÁΩÆ &lt;code&gt;openai_base_url&lt;/code&gt; ‰∏∫‰Ω†ÁöÑ‰ª£ÁêÜ ÔºåÂ∫îËØ•Â∞±ÂèØ‰ª•Ëß£ÂÜ≥‰∫Ü„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;ÂêåÊó∂Âª∫ËÆÆ‰ΩøÁî® &lt;strong&gt;Moonshot&lt;/strong&gt; Êàñ &lt;strong&gt;DeepSeek&lt;/strong&gt; ‰Ωú‰∏∫Â§ßÊ®°ÂûãÊèê‰æõÂïÜÔºåËøô‰∏§‰∏™ÊúçÂä°ÂïÜÂú®ÂõΩÂÜÖËÆøÈóÆÈÄüÂ∫¶Êõ¥Âø´ÔºåÊõ¥Âä†Á®≥ÂÆö„ÄÇ&lt;/p&gt; &#xA;&lt;h3&gt;‚ùìRuntimeError: No ffmpeg exe could be found&lt;/h3&gt; &#xA;&lt;p&gt;ÈÄöÂ∏∏ÊÉÖÂÜµ‰∏ãÔºåffmpeg ‰ºöË¢´Ëá™Âä®‰∏ãËΩΩÔºåÂπ∂‰∏î‰ºöË¢´Ëá™Âä®Ê£ÄÊµãÂà∞„ÄÇ ‰ΩÜÊòØÂ¶ÇÊûú‰Ω†ÁöÑÁéØÂ¢ÉÊúâÈóÆÈ¢òÔºåÊó†Ê≥ïËá™Âä®‰∏ãËΩΩÔºåÂèØËÉΩ‰ºöÈÅáÂà∞Â¶Ç‰∏ãÈîôËØØÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;RuntimeError: No ffmpeg exe could be found.&#xA;Install ffmpeg on your system, or set the IMAGEIO_FFMPEG_EXE environment variable.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ê≠§Êó∂‰Ω†ÂèØ‰ª•‰ªé &lt;a href=&#34;https://www.gyan.dev/ffmpeg/builds/&#34;&gt;https://www.gyan.dev/ffmpeg/builds/&lt;/a&gt; ‰∏ãËΩΩffmpegÔºåËß£ÂéãÂêéÔºåËÆæÁΩÆ &lt;code&gt;ffmpeg_path&lt;/code&gt; ‰∏∫‰Ω†ÁöÑÂÆûÈôÖÂÆâË£ÖË∑ØÂæÑÂç≥ÂèØ„ÄÇ&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[app]&#xA;# ËØ∑Ê†πÊçÆ‰Ω†ÁöÑÂÆûÈôÖË∑ØÂæÑËÆæÁΩÆÔºåÊ≥®ÊÑè Windows Ë∑ØÂæÑÂàÜÈöîÁ¨¶‰∏∫ \\&#xA;ffmpeg_path = &#34;C:\\Users\\harry\\Downloads\\ffmpeg.exe&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;‚ùìImageMagickÁöÑÂÆâÂÖ®Á≠ñÁï•ÈòªÊ≠¢‰∫Ü‰∏é‰∏¥Êó∂Êñá‰ª∂@/tmp/tmpur5hyyto.txtÁõ∏ÂÖ≥ÁöÑÊìç‰Ωú&lt;/h3&gt; &#xA;&lt;p&gt;ÂèØ‰ª•Âú®ImageMagickÁöÑÈÖçÁΩÆÊñá‰ª∂policy.xml‰∏≠ÊâæÂà∞Ëøô‰∫õÁ≠ñÁï•„ÄÇ Ëøô‰∏™Êñá‰ª∂ÈÄöÂ∏∏‰Ωç‰∫é /etc/ImageMagick-&lt;code&gt;X&lt;/code&gt;/ Êàñ ImageMagick ÂÆâË£ÖÁõÆÂΩïÁöÑÁ±ª‰ºº‰ΩçÁΩÆ„ÄÇ ‰øÆÊîπÂåÖÂê´&lt;code&gt;pattern=&#34;@&#34;&lt;/code&gt;ÁöÑÊù°ÁõÆÔºåÂ∞Ü&lt;code&gt;rights=&#34;none&#34;&lt;/code&gt;Êõ¥Êîπ‰∏∫&lt;code&gt;rights=&#34;read|write&#34;&lt;/code&gt;‰ª•ÂÖÅËÆ∏ÂØπÊñá‰ª∂ÁöÑËØªÂÜôÊìç‰Ωú„ÄÇ&lt;/p&gt; &#xA;&lt;h3&gt;‚ùìOSError: [Errno 24] Too many open files&lt;/h3&gt; &#xA;&lt;p&gt;Ëøô‰∏™ÈóÆÈ¢òÊòØÁî±‰∫éÁ≥ªÁªüÊâìÂºÄÊñá‰ª∂Êï∞ÈôêÂà∂ÂØºËá¥ÁöÑÔºåÂèØ‰ª•ÈÄöËøá‰øÆÊîπÁ≥ªÁªüÁöÑÊñá‰ª∂ÊâìÂºÄÊï∞ÈôêÂà∂Êù•Ëß£ÂÜ≥„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;Êü•ÁúãÂΩìÂâçÈôêÂà∂&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ulimit -n&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Â¶ÇÊûúËøá‰ΩéÔºåÂèØ‰ª•Ë∞ÉÈ´ò‰∏Ä‰∫õÔºåÊØîÂ¶Ç&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ulimit -n 10240&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;‚ùìWhisper Ê®°Âûã‰∏ãËΩΩÂ§±Ë¥•ÔºåÂá∫Áé∞Â¶Ç‰∏ãÈîôËØØ&lt;/h3&gt; &#xA;&lt;p&gt;LocalEntryNotfoundEror: Cannot find an appropriate cached snapshotfolderfor the specified revision on the local disk and outgoing trafic has been disabled. To enablerepo look-ups and downloads online, pass &#39;local files only=False&#39; as input.&lt;/p&gt; &#xA;&lt;p&gt;ÊàñËÄÖ&lt;/p&gt; &#xA;&lt;p&gt;An error occured while synchronizing the model Systran/faster-whisper-large-v3 from the Hugging Face Hub: An error happened while trying to locate the files on the Hub and we cannot find the appropriate snapshot folder for the specified revision on the local disk. Please check your internet connection and try again. Trying to load the model directly from the local cache, if it exists.&lt;/p&gt; &#xA;&lt;p&gt;Ëß£ÂÜ≥ÊñπÊ≥ïÔºö&lt;a href=&#34;https://raw.githubusercontent.com/harry0703/MoneyPrinterTurbo/main/#%E5%AD%97%E5%B9%95%E7%94%9F%E6%88%90-&#34;&gt;ÁÇπÂáªÊü•ÁúãÂ¶Ç‰Ωï‰ªéÁΩëÁõòÊâãÂä®‰∏ãËΩΩÊ®°Âûã&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ÂèçÈ¶àÂª∫ËÆÆ üì¢&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ÂèØ‰ª•Êèê‰∫§ &lt;a href=&#34;https://github.com/harry0703/MoneyPrinterTurbo/issues&#34;&gt;issue&lt;/a&gt; ÊàñËÄÖ &lt;a href=&#34;https://github.com/harry0703/MoneyPrinterTurbo/pulls&#34;&gt;pull request&lt;/a&gt;„ÄÇ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ÂèÇËÄÉÈ°πÁõÆ üìö&lt;/h2&gt; &#xA;&lt;p&gt;ËØ•È°πÁõÆÂü∫‰∫é &lt;a href=&#34;https://github.com/FujiwaraChoki/MoneyPrinter&#34;&gt;https://github.com/FujiwaraChoki/MoneyPrinter&lt;/a&gt; ÈáçÊûÑËÄåÊù•ÔºåÂÅö‰∫ÜÂ§ßÈáèÁöÑ‰ºòÂåñÔºåÂ¢ûÂä†‰∫ÜÊõ¥Â§öÁöÑÂäüËÉΩ„ÄÇ ÊÑüË∞¢Âéü‰ΩúËÄÖÁöÑÂºÄÊ∫êÁ≤æÁ•û„ÄÇ&lt;/p&gt; &#xA;&lt;h2&gt;ËÆ∏ÂèØËØÅ üìù&lt;/h2&gt; &#xA;&lt;p&gt;ÁÇπÂáªÊü•Áúã &lt;a href=&#34;https://raw.githubusercontent.com/harry0703/MoneyPrinterTurbo/main/LICENSE&#34;&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt; Êñá‰ª∂&lt;/p&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#harry0703/MoneyPrinterTurbo&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=harry0703/MoneyPrinterTurbo&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>