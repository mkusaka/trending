<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-05T08:46:12Z</updated>
  <subtitle>Weekly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>m-bain/whisperX</title>
    <updated>2023-02-05T08:46:12Z</updated>
    <id>tag:github.com,2023-02-05:/m-bain/whisperX</id>
    <link href="https://github.com/m-bain/whisperX" rel="alternate"></link>
    <summary type="html">&lt;p&gt;WhisperX: Automatic Speech Recognition with Word-level Timestamps (&amp; Diarization)&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;WhisperX&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/m-bain/whisperX/stargazers&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/m-bain/whisperX.svg?colorA=orange&amp;amp;colorB=orange&amp;amp;logo=github&#34; alt=&#34;GitHub stars&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/m-bain/whisperX/issues&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues/m-bain/whisperx.svg?sanitize=true&#34; alt=&#34;GitHub issues&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/m-bain/whisperX/raw/master/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/m-bain/whisperX.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/tweet?text=&amp;amp;url=https%3A%2F%2Fgithub.com%2Fm-bain%2FwhisperX&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/url/https/github.com/m-bain/whisperX.svg?style=social&#34; alt=&#34;Twitter&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/m-bain/whisperX/main/#what-is-it&#34;&gt;What is it&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/m-bain/whisperX/main/#setup&#34;&gt;Setup&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/m-bain/whisperX/main/#example&#34;&gt;Usage&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/m-bain/whisperX/main/#other-languages&#34;&gt;Multilingual&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/m-bain/whisperX/main/#contribute&#34;&gt;Contribute&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/m-bain/whisperX/main/EXAMPLES.md&#34;&gt;More examples&lt;/a&gt; &lt;/p&gt; &#xA;&lt;img width=&#34;1216&#34; align=&#34;center&#34; alt=&#34;whisperx-arch&#34; src=&#34;https://user-images.githubusercontent.com/36994049/211200186-8b779e26-0bfd-4127-aee2-5a9238b95e1f.png&#34;&gt; &#xA;&lt;p align=&#34;left&#34;&gt;Whisper-Based Automatic Speech Recognition (ASR) with improved timestamp accuracy using forced alignment. &lt;/p&gt; &#xA;&lt;h2 align=&#34;left&#34; , id=&#34;what-is-it&#34;&gt;What is it üîé&lt;/h2&gt; &#xA;&lt;p&gt;This repository refines the timestamps of openAI&#39;s Whisper model via forced aligment with phoneme-based ASR models (e.g. wav2vec2.0), multilingual use-case.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Whisper&lt;/strong&gt; is an ASR model &lt;a href=&#34;https://github.com/openai/whisper&#34;&gt;developed by OpenAI&lt;/a&gt;, trained on a large dataset of diverse audio. Whilst it does produces highly accurate transcriptions, the corresponding timestamps are at the utterance-level, not per word, and can be inaccurate by several seconds.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Phoneme-Based ASR&lt;/strong&gt; A suite of models finetuned to recognise the smallest unit of speech distinguishing one word from another, e.g. the element p in &#34;tap&#34;. A popular example model is &lt;a href=&#34;https://huggingface.co/facebook/wav2vec2-large-960h-lv60-self&#34;&gt;wav2vec2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Forced Alignment&lt;/strong&gt; refers to the process by which orthographic transcriptions are aligned to audio recordings to automatically generate phone level segmentation.&lt;/p&gt; &#xA;&lt;h2 align=&#34;left&#34; , id=&#34;highlights&#34;&gt;Newüö®&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Batch processing: Add &lt;code&gt;--vad_filter --parallel_bs [int]&lt;/code&gt; for transcribing long audio file in batches (only supported with VAD filtering). Replace &lt;code&gt;[int]&lt;/code&gt; with a batch size that fits your GPU memory, e.g. &lt;code&gt;--parallel_bs 16&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;VAD filtering: Voice Activity Detection (VAD) from &lt;a href=&#34;https://huggingface.co/pyannote/voice-activity-detection&#34;&gt;Pyannote.audio&lt;/a&gt; is used as a preprocessing step to remove reliance on whisper timestamps and only transcribe audio segments containing speech. add &lt;code&gt;--vad_filter&lt;/code&gt; flag, increases timestamp accuracy and robustness (requires more GPU mem due to 30s inputs in wav2vec2)&lt;/li&gt; &#xA; &lt;li&gt;Character level timestamps (see &lt;code&gt;*.char.ass&lt;/code&gt; file output)&lt;/li&gt; &#xA; &lt;li&gt;Diarization (still in beta, add &lt;code&gt;--diarize&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2 align=&#34;left&#34; id=&#34;setup&#34;&gt;Setup ‚öôÔ∏è&lt;/h2&gt; Install this package using &#xA;&lt;p&gt;&lt;code&gt;pip install git+https://github.com/m-bain/whisperx.git&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If already installed, update package to most recent commit&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pip install git+https://github.com/m-bain/whisperx.git --upgrade&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If wishing to modify this package, clone and install in editable mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/m-bain/whisperX.git&#xA;$ cd whisperX&#xA;$ pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also need to install ffmpeg, rust etc. Follow openAI instructions here &lt;a href=&#34;https://github.com/openai/whisper#setup&#34;&gt;https://github.com/openai/whisper#setup&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Voice Activity Detection Filtering &amp;amp; Diarization&lt;/h3&gt; &#xA;&lt;p&gt;To &lt;strong&gt;enable VAD filtering and Diarization&lt;/strong&gt;, include your Hugging Face access token that you can generate from &lt;a href=&#34;https://huggingface.co/settings/tokens&#34;&gt;Here&lt;/a&gt; after the &lt;code&gt;--hf_token&lt;/code&gt; argument and accept the user agreement for the following models: &lt;a href=&#34;https://huggingface.co/pyannote/segmentation&#34;&gt;Segmentation&lt;/a&gt; , &lt;a href=&#34;https://huggingface.co/pyannote/voice-activity-detection&#34;&gt;Voice Activity Detection (VAD)&lt;/a&gt; , and &lt;a href=&#34;https://huggingface.co/pyannote/speaker-diarization&#34;&gt;Speaker Diarization&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2 align=&#34;left&#34; id=&#34;example&#34;&gt;Usage üí¨ (command line)&lt;/h2&gt; &#xA;&lt;h3&gt;English&lt;/h3&gt; &#xA;&lt;p&gt;Run whisper on example segment (using default params)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;whisperx examples/sample01.wav&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For increased timestamp accuracy, at the cost of higher gpu mem, use bigger models and VAD filtering e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;whisperx examples/sample01.wav --model large-v2 --vad_filter --align_model WAV2VEC2_ASR_LARGE_LV60K_960H&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Result using &lt;em&gt;WhisperX&lt;/em&gt; with forced alignment to wav2vec2.0 large:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/36994049/208253969-7e35fe2a-7541-434a-ae91-8e919540555d.mp4&#34;&gt;https://user-images.githubusercontent.com/36994049/208253969-7e35fe2a-7541-434a-ae91-8e919540555d.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Compare this to original whisper out the box, where many transcriptions are out of sync:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/36994049/207743923-b4f0d537-29ae-4be2-b404-bb941db73652.mov&#34;&gt;https://user-images.githubusercontent.com/36994049/207743923-b4f0d537-29ae-4be2-b404-bb941db73652.mov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Other languages&lt;/h3&gt; &#xA;&lt;p&gt;The phoneme ASR alignment model is &lt;em&gt;language-specific&lt;/em&gt;, for tested languages these models are &lt;a href=&#34;https://github.com/m-bain/whisperX/raw/e909f2f766b23b2000f2d95df41f9b844ac53e49/whisperx/transcribe.py#L22&#34;&gt;automatically picked from torchaudio pipelines or huggingface&lt;/a&gt;. Just pass in the &lt;code&gt;--language&lt;/code&gt; code, and use the whisper &lt;code&gt;--model large&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Currently default models provided for &lt;code&gt;{en, fr, de, es, it, ja, zh, nl, uk, pt}&lt;/code&gt;. If the detected language is not in this list, you need to find a phoneme-based ASR model from &lt;a href=&#34;https://huggingface.co/models&#34;&gt;huggingface model hub&lt;/a&gt; and test it on your data.&lt;/p&gt; &#xA;&lt;h4&gt;E.g. German&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;whisperx --model large --language de examples/sample_de_01.wav&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/36994049/208298811-e36002ba-3698-4731-97d4-0aebd07e0eb3.mov&#34;&gt;https://user-images.githubusercontent.com/36994049/208298811-e36002ba-3698-4731-97d4-0aebd07e0eb3.mov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;See more examples in other languages &lt;a href=&#34;https://raw.githubusercontent.com/m-bain/whisperX/main/EXAMPLES.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Python usage üêç&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import whisperx&#xA;&#xA;device = &#34;cuda&#34; &#xA;audio_file = &#34;audio.mp3&#34;&#xA;&#xA;# transcribe with original whisper&#xA;model = whisperx.load_model(&#34;large&#34;, device)&#xA;result = model.transcribe(audio_file)&#xA;&#xA;print(result[&#34;segments&#34;]) # before alignment&#xA;&#xA;# load alignment model and metadata&#xA;model_a, metadata = whisperx.load_align_model(language_code=result[&#34;language&#34;], device=device)&#xA;&#xA;# align whisper output&#xA;result_aligned = whisperx.align(result[&#34;segments&#34;], model_a, metadata, audio_file, device)&#xA;&#xA;print(result_aligned[&#34;segments&#34;]) # after alignment&#xA;print(result_aligned[&#34;word_segments&#34;]) # after alignment&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2 align=&#34;left&#34; id=&#34;whisper-mod&#34;&gt;Whisper Modifications&lt;/h2&gt; &#xA;&lt;p&gt;In addition to forced alignment, the following two modifications have been made to the whisper transcription method:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--condition_on_prev_text&lt;/code&gt; is set to &lt;code&gt;False&lt;/code&gt; by default (reduces hallucination)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clamping segment &lt;code&gt;end_time&lt;/code&gt; to be at least 0.02s (one time precision) later than &lt;code&gt;start_time&lt;/code&gt; (prevents segments with negative duration)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2 align=&#34;left&#34; id=&#34;limitations&#34;&gt;Limitations ‚ö†Ô∏è&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Not thoroughly tested, especially for non-english, results may vary -- please post issue to let me know the results on your data&lt;/li&gt; &#xA; &lt;li&gt;Whisper normalises spoken numbers e.g. &#34;fifty seven&#34; to arabic numerals &#34;57&#34;. Need to perform this normalization after alignment, so the phonemes can be aligned. Currently just ignores numbers.&lt;/li&gt; &#xA; &lt;li&gt;If not using VAD filter, whisperx assumes the initial whisper timestamps are accurate to some degree (within margin of 2 seconds, adjust if needed -- bigger margins more prone to alignment errors)&lt;/li&gt; &#xA; &lt;li&gt;Overlapping speech is not handled particularly well by whisper nor whisperx&lt;/li&gt; &#xA; &lt;li&gt;Diariazation is far from perfect.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2 align=&#34;left&#34; id=&#34;contribute&#34;&gt;Contribute üßë‚Äçüè´&lt;/h2&gt; &#xA;&lt;p&gt;If you are multilingual, a major way you can contribute to this project is to find phoneme models on huggingface (or train your own) and test them on speech for the target language. If the results look good send a merge request and some examples showing its success.&lt;/p&gt; &#xA;&lt;p&gt;The next major upgrade we are working on is whisper with speaker diarization, so if you have any experience on this please share.&lt;/p&gt; &#xA;&lt;h2 align=&#34;left&#34; id=&#34;coming-soon&#34;&gt;Coming Soon üóì&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Multilingual init&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Subtitle .ass output&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Automatic align model selection based on language detection&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Python usage&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Character level timestamps&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Incorporating speaker diarization&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Inference speedup with batch processing&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Improve diarization (word level). &lt;em&gt;Harder than first thought...&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2 align=&#34;left&#34; id=&#34;contact&#34;&gt;Contact/Support üìá&lt;/h2&gt; &#xA;&lt;p&gt;Contact maxbain[at]robots[dot]ox[dot]ac[dot]uk for queries&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/maxhbain&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/default-orange.png&#34; alt=&#34;Buy Me A Coffee&#34; height=&#34;41&#34; width=&#34;174&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2 align=&#34;left&#34; id=&#34;acks&#34;&gt;Acknowledgements üôè&lt;/h2&gt; &#xA;&lt;p&gt;This work, and my PhD, is supported by the &lt;a href=&#34;https://www.robots.ox.ac.uk/~vgg/&#34;&gt;VGG (Visual Geometry Group)&lt;/a&gt; and University of Oxford.&lt;/p&gt; &#xA;&lt;p&gt;Of course, this is builds on &lt;a href=&#34;https://github.com/openai/whisper&#34;&gt;openAI&#39;s whisper&lt;/a&gt;. And borrows important alignment code from &lt;a href=&#34;https://pytorch.org/tutorials/intermediate/forced_alignment_with_torchaudio_tutorial.html&#34;&gt;PyTorch tutorial on forced alignment&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2 align=&#34;left&#34; id=&#34;cite&#34;&gt;Citation&lt;/h2&gt; If you use this in your research, for now just cite the repo, &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@misc{bain2022whisperx,&#xA;  author = {Bain, Max and Han, Tengda},&#xA;  title = {WhisperX},&#xA;  year = {2022},&#xA;  publisher = {GitHub},&#xA;  journal = {GitHub repository},&#xA;  howpublished = {\url{https://github.com/m-bain/whisperX}},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;as well as the whisper paper,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article{radford2022robust,&#xA;  title={Robust speech recognition via large-scale weak supervision},&#xA;  author={Radford, Alec and Kim, Jong Wook and Xu, Tao and Brockman, Greg and McLeavey, Christine and Sutskever, Ilya},&#xA;  journal={arXiv preprint arXiv:2212.04356},&#xA;  year={2022}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and any alignment model used, e.g. wav2vec2.0.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article{baevski2020wav2vec,&#xA;  title={wav2vec 2.0: A framework for self-supervised learning of speech representations},&#xA;  author={Baevski, Alexei and Zhou, Yuhao and Mohamed, Abdelrahman and Auli, Michael},&#xA;  journal={Advances in Neural Information Processing Systems},&#xA;  volume={33},&#xA;  pages={12449--12460},&#xA;  year={2020}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>vnpy/vnpy</title>
    <updated>2023-02-05T08:46:12Z</updated>
    <id>tag:github.com,2023-02-05:/vnpy/vnpy</id>
    <link href="https://github.com/vnpy/vnpy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Âü∫‰∫éPythonÁöÑÂºÄÊ∫êÈáèÂåñ‰∫§ÊòìÂπ≥Âè∞ÂºÄÂèëÊ°ÜÊû∂&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VeighNa - By Traders, For Traders.&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://vnpy.oss-cn-shanghai.aliyuncs.com/veighna-logo.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;üí¨ Want to read this in &lt;strong&gt;english&lt;/strong&gt; ? Go &lt;a href=&#34;https://raw.githubusercontent.com/vnpy/vnpy/master/README_ENG.md&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/version-3.5.0-blueviolet.svg?sanitize=true&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/platform-windows|linux|macos-yellow.svg&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/python-3.7|3.8|3.9|3.10-blue.svg&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/vnpy/vnpy/Python%20application/master&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/vnpy/vnpy.svg?color=orange&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;VeighNaÊòØ‰∏ÄÂ•óÂü∫‰∫éPythonÁöÑÂºÄÊ∫êÈáèÂåñ‰∫§ÊòìÁ≥ªÁªüÂºÄÂèëÊ°ÜÊû∂ÔºåÂú®ÂºÄÊ∫êÁ§æÂå∫ÊåÅÁª≠‰∏çÊñ≠ÁöÑË¥°ÁåÆ‰∏ã‰∏ÄÊ≠•Ê≠•ÊàêÈïø‰∏∫Â§öÂäüËÉΩÈáèÂåñ‰∫§ÊòìÂπ≥Âè∞ÔºåËá™ÂèëÂ∏É‰ª•Êù•Â∑≤ÁªèÁßØÁ¥Ø‰∫Ü‰ºóÂ§öÊù•Ëá™ÈáëËûçÊú∫ÊûÑÊàñÁõ∏ÂÖ≥È¢ÜÂüüÁöÑÁî®Êà∑ÔºåÂåÖÊã¨ÁßÅÂãüÂü∫Èáë„ÄÅËØÅÂà∏ÂÖ¨Âè∏„ÄÅÊúüË¥ßÂÖ¨Âè∏Á≠â„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;üéìüéìüéì &lt;strong&gt;„ÄäVeighNaÂÆûÊàòËøõÈò∂„ÄãÁ≥ªÂàóÂú®Á∫øËØæÁ®ãÔºåÂ∑≤ÁªèÂú®ÂÆòÊñπÂæÆ‰ø°ÂÖ¨‰ºóÂè∑[VeighNaÂºÄÊ∫êÈáèÂåñ]‰∏äÁ∫øÔºåË¶ÜÁõñ30Â§©ÂÖ•Èó®„ÄÅCTAÂÆûÊàò„ÄÅÊµ∑ÈæüÁ≠ñÁï•„ÄÅÊúüÊùÉÊ≥¢Âä®Áéá‰∫§ÊòìÁ≠âÂÜÖÂÆπ„ÄÇË¥≠‰π∞ËØ∑Êâ´Êèè‰∏ãÊñπ‰∫åÁª¥Á†ÅÂÖ≥Ê≥®ÂêéÔºåÁÇπÂáªËèúÂçïÊ†èÁöÑ„ÄêËøõÈò∂ËµÑÊñô„ÄëÊåâÈíÆÂç≥ÂèØ&lt;/strong&gt;Ôºö&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://vnpy.oss-cn-shanghai.aliyuncs.com/vnpy_qr.jpg&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Âú®‰ΩøÁî®VeighNaËøõË°å‰∫åÊ¨°ÂºÄÂèëÔºàÁ≠ñÁï•„ÄÅÊ®°ÂùóÁ≠âÔºâÁöÑËøáÁ®ã‰∏≠Êúâ‰ªª‰ΩïÁñëÈóÆÔºåËØ∑Êü•Áúã&lt;a href=&#34;https://www.vnpy.com/docs/cn/index.html&#34;&gt;&lt;strong&gt;VeighNaÈ°πÁõÆÊñáÊ°£&lt;/strong&gt;&lt;/a&gt;ÔºåÂ¶ÇÊûúÊó†Ê≥ïËß£ÂÜ≥ËØ∑ÂâçÂæÄ&lt;a href=&#34;https://www.vnpy.com/forum/&#34;&gt;&lt;strong&gt;ÂÆòÊñπÁ§æÂå∫ËÆ∫Âùõ&lt;/strong&gt;&lt;/a&gt;ÁöÑ„ÄêÊèêÈóÆÊ±ÇÂä©„ÄëÊùøÂùóÂØªÊ±ÇÂ∏ÆÂä©Ôºå‰πüÊ¨¢ËøéÂú®„ÄêÁªèÈ™åÂàÜ‰∫´„ÄëÊùøÂùóÂàÜ‰∫´‰Ω†ÁöÑ‰ΩøÁî®ÂøÉÂæóÔºÅ&lt;/p&gt; &#xA;&lt;p&gt;ÈíàÂØπVeighNaÁöÑÈáëËûçÊú∫ÊûÑÁî®Êà∑ÔºåÂàõÂª∫‰∫Ü‰∏Ä‰∏™‰∏ìÈó®ÁöÑ„ÄêVeighNaÊú∫ÊûÑÁî®Êà∑Áæ§„ÄëÔºàQQÁæ§Âè∑Ôºö676499931ÔºâÔºå‰∏ªË¶ÅÂàÜ‰∫´Êú∫ÊûÑÂ∫îÁî®ÊñπÈù¢Áõ∏ÂÖ≥ÁöÑÈóÆÈ¢òÔºåÂ¶ÇÔºöÈì∂Ë°åÈó¥Â∏ÇÂú∫Êé•ÂÖ•„ÄÅËµÑÁÆ°O32Á≥ªÁªü„ÄÅÂàÜÂ∏ÉÂºèÈÉ®ÁΩ≤Á≠âÂÜÖÂÆπ„ÄÇËØ∑Ê≥®ÊÑèÊú¨Áæ§Âè™ÂØπÈáëËûçÊú∫ÊûÑÁî®Êà∑ÂºÄÊîæÔºåÂä†Áæ§Êó∂ËØ∑Ê≥®ÊòéÔºöÂßìÂêç-Êú∫ÊûÑ-ÈÉ®Èó®„ÄÇ&lt;/p&gt; &#xA;&lt;h2&gt;ÂäüËÉΩÁâπÁÇπ&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Â§öÂäüËÉΩÈáèÂåñ‰∫§ÊòìÂπ≥Âè∞ÔºàtraderÔºâÔºåÊï¥Âêà‰∫ÜÂ§öÁßç‰∫§ÊòìÊé•Âè£ÔºåÂπ∂ÈíàÂØπÂÖ∑‰ΩìÁ≠ñÁï•ÁÆóÊ≥ïÂíåÂäüËÉΩÂºÄÂèëÊèê‰æõ‰∫ÜÁÆÄÊ¥ÅÊòìÁî®ÁöÑAPIÔºåÁî®‰∫éÂø´ÈÄüÊûÑÂª∫‰∫§ÊòìÂëòÊâÄÈúÄÁöÑÈáèÂåñ‰∫§ÊòìÂ∫îÁî®„ÄÇ&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ë¶ÜÁõñÂõΩÂÜÖÂ§ñÊâÄÊã•ÊúâÁöÑ‰∏ãËø∞‰∫§ÊòìÂìÅÁßçÁöÑ‰∫§ÊòìÊé•Âè£ÔºàgatewayÔºâÔºö&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;ÂõΩÂÜÖÂ∏ÇÂú∫&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;CTPÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_ctp&#34;&gt;ctp&lt;/a&gt;ÔºâÔºöÂõΩÂÜÖÊúüË¥ß„ÄÅÊúüÊùÉ&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;CTP MiniÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_mini&#34;&gt;mini&lt;/a&gt;ÔºâÔºöÂõΩÂÜÖÊúüË¥ß„ÄÅÊúüÊùÉ&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;CTPËØÅÂà∏Ôºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_sopt&#34;&gt;sopt&lt;/a&gt;ÔºâÔºöETFÊúüÊùÉ&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;È£ûÈ©¨Ôºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_femas&#34;&gt;femas&lt;/a&gt;ÔºâÔºöÂõΩÂÜÖÊúüË¥ß&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;ÊÅíÁîüUFTÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_uft&#34;&gt;uft&lt;/a&gt;ÔºâÔºöÂõΩÂÜÖÊúüË¥ß„ÄÅETFÊúüÊùÉ&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;ÊòìÁõõÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_esunny&#34;&gt;esunny&lt;/a&gt;ÔºâÔºöÂõΩÂÜÖÊúüË¥ß„ÄÅÈªÑÈáëTD&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;È°∂ÁÇπÈ£ûÂàõÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_sec&#34;&gt;sec&lt;/a&gt;ÔºâÔºöETFÊúüÊùÉ&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;È°∂ÁÇπHTSÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_hts&#34;&gt;hts&lt;/a&gt;ÔºâÔºöETFÊúüÊùÉ&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;‰∏≠Ê≥∞XTPÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_xtp&#34;&gt;xtp&lt;/a&gt;ÔºâÔºöÂõΩÂÜÖËØÅÂà∏ÔºàAËÇ°Ôºâ„ÄÅETFÊúüÊùÉ&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;ÂçéÈë´Â•áÁÇπÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_tora&#34;&gt;tora&lt;/a&gt;ÔºâÔºöÂõΩÂÜÖËØÅÂà∏ÔºàAËÇ°Ôºâ„ÄÅETFÊúüÊùÉ&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;ÂõΩÊ≥∞ÂêõÂÆâÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_hft&#34;&gt;hft&lt;/a&gt;ÔºâÔºöÂõΩÂÜÖËØÅÂà∏ÔºàAËÇ°„ÄÅ‰∏§ËûçÔºâ&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;‰∏úËØÅOSTÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_ost&#34;&gt;ost&lt;/a&gt;ÔºâÔºöÂõΩÂÜÖËØÅÂà∏ÔºàAËÇ°Ôºâ&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;‰∏úÊñπË¥¢ÂØåEMTÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_emt&#34;&gt;emt&lt;/a&gt;ÔºâÔºöÂõΩÂÜÖËØÅÂà∏ÔºàAËÇ°Ôºâ&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;È£ûÈº†Ôºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_sgit&#34;&gt;sgit&lt;/a&gt;ÔºâÔºöÈªÑÈáëTD„ÄÅÂõΩÂÜÖÊúüË¥ß&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Èáë‰ªïËææÈªÑÈáëÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_ksgold&#34;&gt;ksgold&lt;/a&gt;ÔºâÔºöÈªÑÈáëTD&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;ËûçËà™Ôºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_rohon&#34;&gt;rohon&lt;/a&gt;ÔºâÔºöÊúüË¥ßËµÑÁÆ°&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Êù∞ÂÆúÊñØÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_jees&#34;&gt;jees&lt;/a&gt;ÔºâÔºöÊúüË¥ßËµÑÁÆ°&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;‰∏≠Ê±á‰∫øËææÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_comstar&#34;&gt;comstar&lt;/a&gt;ÔºâÔºöÈì∂Ë°åÈó¥Â∏ÇÂú∫&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;ÊéòÈáëÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_gm&#34;&gt;gm&lt;/a&gt;ÔºâÔºöÂõΩÂÜÖËØÅÂà∏Ôºà‰ªøÁúüÔºâ&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;ÊÅíÁîü‰∫ëUFÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_uf&#34;&gt;uf&lt;/a&gt;ÔºâÔºöÂõΩÂÜÖËØÅÂà∏Ôºà‰ªøÁúüÔºâ&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;TTSÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_tts&#34;&gt;tts&lt;/a&gt;ÔºâÔºöÂõΩÂÜÖÊúüË¥ßÔºà‰ªøÁúüÔºâ&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;ÁÅ´Ë±°Ôºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_hx&#34;&gt;hx&lt;/a&gt;ÔºâÔºöÂõΩÂÜÖÊúüË¥ßÔºà‰ªøÁúüÔºâ&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Êµ∑Â§ñÂ∏ÇÂú∫&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Interactive BrokersÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_ib&#34;&gt;ib&lt;/a&gt;ÔºâÔºöÊµ∑Â§ñËØÅÂà∏„ÄÅÊúüË¥ß„ÄÅÊúüÊùÉ„ÄÅË¥µÈáëÂ±ûÁ≠â&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;ÊòìÁõõ9.0Â§ñÁõòÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_tap&#34;&gt;tap&lt;/a&gt;ÔºâÔºöÊµ∑Â§ñÊúüË¥ß&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Áõ¥ËææÊúüË¥ßÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_da&#34;&gt;da&lt;/a&gt;ÔºâÔºöÊµ∑Â§ñÊúüË¥ß&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;ÁâπÊÆäÂ∫îÁî®&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;RQDataË°åÊÉÖÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_rqdata&#34;&gt;rqdata&lt;/a&gt;ÔºâÔºöË∑®Â∏ÇÂú∫ÔºàËÇ°Á•®„ÄÅÊåáÊï∞„ÄÅETF„ÄÅÊúüË¥ßÔºâÂÆûÊó∂Ë°åÊÉÖ&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;RPCÊúçÂä°Ôºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_rpcservice&#34;&gt;rpc&lt;/a&gt;ÔºâÔºöË∑®ËøõÁ®ãÈÄöËÆØÊé•Âè£ÔºåÁî®‰∫éÂàÜÂ∏ÉÂºèÊû∂ÊûÑ&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ë¶ÜÁõñ‰∏ãËø∞ÂêÑÁ±ªÈáèÂåñÁ≠ñÁï•ÁöÑ‰∫§ÊòìÂ∫îÁî®ÔºàappÔºâÔºö&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.github.com/vnpy/vnpy_ctastrategy&#34;&gt;cta_strategy&lt;/a&gt;ÔºöCTAÁ≠ñÁï•ÂºïÊìéÊ®°ÂùóÔºåÂú®‰øùÊåÅÊòìÁî®ÊÄßÁöÑÂêåÊó∂ÔºåÂÖÅËÆ∏Áî®Êà∑ÈíàÂØπCTAÁ±ªÁ≠ñÁï•ËøêË°åËøáÁ®ã‰∏≠ÂßîÊâòÁöÑÊä•Êí§Ë°å‰∏∫ËøõË°åÁªÜÁ≤íÂ∫¶ÊéßÂà∂ÔºàÈôç‰Ωé‰∫§ÊòìÊªëÁÇπ„ÄÅÂÆûÁé∞È´òÈ¢ëÁ≠ñÁï•Ôºâ&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.github.com/vnpy/vnpy_ctabacktester&#34;&gt;cta_backtester&lt;/a&gt;ÔºöCTAÁ≠ñÁï•ÂõûÊµãÊ®°ÂùóÔºåÊó†ÈúÄ‰ΩøÁî®Jupyter NotebookÔºåÁõ¥Êé•‰ΩøÁî®ÂõæÂΩ¢ÁïåÈù¢ËøõË°åÁ≠ñÁï•ÂõûÊµãÂàÜÊûê„ÄÅÂèÇÊï∞‰ºòÂåñÁ≠âÁõ∏ÂÖ≥Â∑•‰Ωú&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.github.com/vnpy/vnpy_spreadtrading&#34;&gt;spread_trading&lt;/a&gt;Ôºö‰ª∑Â∑Æ‰∫§ÊòìÊ®°ÂùóÔºåÊîØÊåÅËá™ÂÆö‰πâ‰ª∑Â∑ÆÔºåÂÆûÊó∂ËÆ°ÁÆó‰ª∑Â∑ÆË°åÊÉÖÂíåÊåÅ‰ªìÔºåÊîØÊåÅ‰ª∑Â∑ÆÁÆóÊ≥ï‰∫§Êòì‰ª•ÂèäËá™Âä®‰ª∑Â∑ÆÁ≠ñÁï•‰∏§ÁßçÊ®°Âºè&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.github.com/vnpy/vnpy_optionmaster&#34;&gt;option_master&lt;/a&gt;ÔºöÊúüÊùÉ‰∫§ÊòìÊ®°ÂùóÔºåÈíàÂØπÂõΩÂÜÖÊúüÊùÉÂ∏ÇÂú∫ËÆæËÆ°ÔºåÊîØÊåÅÂ§öÁßçÊúüÊùÉÂÆö‰ª∑Ê®°Âûã„ÄÅÈöêÂê´Ê≥¢Âä®ÁéáÊõ≤Èù¢ËÆ°ÁÆó„ÄÅÂ∏åËÖäÂÄºÈ£éÈô©Ë∑üË∏™Á≠âÂäüËÉΩ&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.github.com/vnpy/vnpy_portfoliostrategy&#34;&gt;portfolio_strategy&lt;/a&gt;ÔºöÁªÑÂêàÁ≠ñÁï•Ê®°ÂùóÔºåÈù¢ÂêëÂêåÊó∂‰∫§ÊòìÂ§öÂêàÁ∫¶ÁöÑÈáèÂåñÁ≠ñÁï•ÔºàAlpha„ÄÅÊúüÊùÉÂ•óÂà©Á≠âÔºâÔºåÊèê‰æõÂéÜÂè≤Êï∞ÊçÆÂõûÊµãÂíåÂÆûÁõòËá™Âä®‰∫§ÊòìÂäüËÉΩ&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.github.com/vnpy/vnpy_algotrading&#34;&gt;algo_trading&lt;/a&gt;ÔºöÁÆóÊ≥ï‰∫§ÊòìÊ®°ÂùóÔºåÊèê‰æõÂ§öÁßçÂ∏∏Áî®ÁöÑÊô∫ËÉΩ‰∫§ÊòìÁÆóÊ≥ïÔºöTWAP„ÄÅSniper„ÄÅIceberg„ÄÅBestLimitÁ≠â&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.github.com/vnpy/vnpy_scripttrader&#34;&gt;script_trader&lt;/a&gt;ÔºöËÑöÊú¨Á≠ñÁï•Ê®°ÂùóÔºåÈù¢ÂêëÂ§öÊ†áÁöÑÁ±ªÈáèÂåñÁ≠ñÁï•ÂíåËÆ°ÁÆó‰ªªÂä°ËÆæËÆ°ÔºåÂêåÊó∂‰πüÂèØ‰ª•Âú®ÂëΩ‰ª§Ë°å‰∏≠ÂÆûÁé∞REPLÊåá‰ª§ÂΩ¢ÂºèÁöÑ‰∫§ÊòìÔºå‰∏çÊîØÊåÅÂõûÊµãÂäüËÉΩ&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.github.com/vnpy/vnpy_paperaccount&#34;&gt;paper_account&lt;/a&gt;ÔºöÊú¨Âú∞‰ªøÁúüÊ®°ÂùóÔºåÁ∫ØÊú¨Âú∞ÂåñÂÆûÁé∞ÁöÑ‰ªøÁúüÊ®°Êãü‰∫§ÊòìÂäüËÉΩÔºåÂü∫‰∫é‰∫§ÊòìÊé•Âè£Ëé∑ÂèñÁöÑÂÆûÊó∂Ë°åÊÉÖËøõË°åÂßîÊâòÊíÆÂêàÔºåÊèê‰æõÂßîÊâòÊàê‰∫§Êé®ÈÄÅ‰ª•ÂèäÊåÅ‰ªìËÆ∞ÂΩï&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.github.com/vnpy/vnpy_chartwizard&#34;&gt;chart_wizard&lt;/a&gt;ÔºöKÁ∫øÂõæË°®Ê®°ÂùóÔºåÂü∫‰∫éRQDataÊï∞ÊçÆÊúçÂä°ÔºàÊúüË¥ßÔºâÊàñËÄÖ‰∫§ÊòìÊé•Âè£Ëé∑ÂèñÂéÜÂè≤Êï∞ÊçÆÔºåÂπ∂ÁªìÂêàTickÊé®ÈÄÅÊòæÁ§∫ÂÆûÊó∂Ë°åÊÉÖÂèòÂåñ&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.github.com/vnpy/vnpy_portfoliomanager&#34;&gt;portfolio_manager&lt;/a&gt;Ôºö‰∫§ÊòìÁªÑÂêàÁÆ°ÁêÜÊ®°ÂùóÔºå‰ª•Áã¨Á´ãÁöÑÁ≠ñÁï•‰∫§ÊòìÁªÑÂêàÔºàÂ≠êË¥¶Êà∑Ôºâ‰∏∫Âü∫Á°ÄÔºåÊèê‰æõÂßîÊâòÊàê‰∫§ËÆ∞ÂΩïÁÆ°ÁêÜ„ÄÅ‰∫§Êòì‰ªì‰ΩçËá™Âä®Ë∑üË∏™‰ª•ÂèäÊØèÊó•Áõà‰∫èÂÆûÊó∂ÁªüËÆ°ÂäüËÉΩ&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.github.com/vnpy/vnpy_rpcservice&#34;&gt;rpc_service&lt;/a&gt;ÔºöRPCÊúçÂä°Ê®°ÂùóÔºåÂÖÅËÆ∏Â∞ÜÊüê‰∏ÄËøõÁ®ãÂêØÂä®‰∏∫ÊúçÂä°Á´ØÔºå‰Ωú‰∏∫Áªü‰∏ÄÁöÑË°åÊÉÖÂíå‰∫§ÊòìË∑ØÁî±ÈÄöÈÅìÔºåÂÖÅËÆ∏Â§öÂÆ¢Êà∑Á´ØÂêåÊó∂ËøûÊé•ÔºåÂÆûÁé∞Â§öËøõÁ®ãÂàÜÂ∏ÉÂºèÁ≥ªÁªü&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.github.com/vnpy/vnpy_datamanager&#34;&gt;data_manager&lt;/a&gt;ÔºöÂéÜÂè≤Êï∞ÊçÆÁÆ°ÁêÜÊ®°ÂùóÔºåÈÄöËøáÊ†ëÂΩ¢ÁõÆÂΩïÊü•ÁúãÊï∞ÊçÆÂ∫ì‰∏≠Â∑≤ÊúâÁöÑÊï∞ÊçÆÊ¶ÇÂÜµÔºåÈÄâÊã©‰ªªÊÑèÊó∂Èó¥ÊÆµÊï∞ÊçÆÊü•ÁúãÂ≠óÊÆµÁªÜËäÇÔºåÊîØÊåÅCSVÊñá‰ª∂ÁöÑÊï∞ÊçÆÂØºÂÖ•ÂíåÂØºÂá∫&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.github.com/vnpy/vnpy_datarecorder&#34;&gt;data_recorder&lt;/a&gt;ÔºöË°åÊÉÖËÆ∞ÂΩïÊ®°ÂùóÔºåÂü∫‰∫éÂõæÂΩ¢ÁïåÈù¢ËøõË°åÈÖçÁΩÆÔºåÊ†πÊçÆÈúÄÊ±ÇÂÆûÊó∂ÂΩïÂà∂TickÊàñËÄÖKÁ∫øË°åÊÉÖÂà∞Êï∞ÊçÆÂ∫ì‰∏≠ÔºåÁî®‰∫éÁ≠ñÁï•ÂõûÊµãÊàñËÄÖÂÆûÁõòÂàùÂßãÂåñ&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.github.com/vnpy/vnpy_excelrtd&#34;&gt;excel_rtd&lt;/a&gt;ÔºöExcel RTDÔºàReal Time DataÔºâÂÆûÊó∂Êï∞ÊçÆÊúçÂä°ÔºåÂü∫‰∫épyxllÊ®°ÂùóÂÆûÁé∞Âú®Excel‰∏≠Ëé∑ÂèñÂêÑÁ±ªÊï∞ÊçÆÔºàË°åÊÉÖ„ÄÅÂêàÁ∫¶„ÄÅÊåÅ‰ªìÁ≠âÔºâÁöÑÂÆûÊó∂Êé®ÈÄÅÊõ¥Êñ∞&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.github.com/vnpy/vnpy_riskmanager&#34;&gt;risk_manager&lt;/a&gt;ÔºöÈ£éÈô©ÁÆ°ÁêÜÊ®°ÂùóÔºåÊèê‰æõÂåÖÊã¨‰∫§ÊòìÊµÅÊéß„ÄÅ‰∏ãÂçïÊï∞Èáè„ÄÅÊ¥ªÂä®ÂßîÊâò„ÄÅÊí§ÂçïÊÄªÊï∞Á≠âËßÑÂàôÁöÑÁªüËÆ°ÂíåÈôêÂà∂ÔºåÊúâÊïàÂÆûÁé∞ÂâçÁ´ØÈ£éÊéßÂäüËÉΩ&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.github.com/vnpy/vnpy_webtrader&#34;&gt;web_trader&lt;/a&gt;ÔºöWebÊúçÂä°Ê®°ÂùóÔºåÈíàÂØπB-SÊû∂ÊûÑÈúÄÊ±ÇËÆæËÆ°ÔºåÂÆûÁé∞‰∫ÜÊèê‰æõ‰∏ªÂä®ÂáΩÊï∞Ë∞ÉÁî®ÔºàRESTÔºâÂíåË¢´Âä®Êï∞ÊçÆÊé®ÈÄÅÔºàWebsocketÔºâÁöÑWebÊúçÂä°Âô®&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Python‰∫§ÊòìAPIÊé•Âè£Â∞ÅË£ÖÔºàapiÔºâÔºåÊèê‰æõ‰∏äËø∞‰∫§ÊòìÊé•Âè£ÁöÑÂ∫ïÂ±ÇÂØπÊé•ÂÆûÁé∞„ÄÇ&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;REST ClientÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_rest&#34;&gt;rest&lt;/a&gt;ÔºâÔºöÂü∫‰∫éÂçèÁ®ãÂºÇÊ≠•IOÁöÑÈ´òÊÄßËÉΩREST APIÂÆ¢Êà∑Á´ØÔºåÈááÁî®‰∫ã‰ª∂Ê∂àÊÅØÂæ™ÁéØÁöÑÁºñÁ®ãÊ®°ÂûãÔºåÊîØÊåÅÈ´òÂπ∂ÂèëÂÆûÊó∂‰∫§ÊòìËØ∑Ê±ÇÂèëÈÄÅ&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Websocket ClientÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_websocket&#34;&gt;websocket&lt;/a&gt;ÔºâÔºöÂü∫‰∫éÂçèÁ®ãÂºÇÊ≠•IOÁöÑÈ´òÊÄßËÉΩWebsocket APIÂÆ¢Êà∑Á´ØÔºåÊîØÊåÅÂíåREST ClientÂÖ±Áî®‰∫ã‰ª∂Âæ™ÁéØÂπ∂ÂèëËøêË°å&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ÁÆÄÊ¥ÅÊòìÁî®ÁöÑ‰∫ã‰ª∂È©±Âä®ÂºïÊìéÔºàeventÔºâÔºå‰Ωú‰∏∫‰∫ã‰ª∂È©±Âä®Âûã‰∫§ÊòìÁ®ãÂ∫èÁöÑÊ†∏ÂøÉ„ÄÇ&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ÂØπÊé•ÂêÑÁ±ªÊï∞ÊçÆÂ∫ìÁöÑÈÄÇÈÖçÂô®Êé•Âè£ÔºàdatabaseÔºâÔºö&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;SQLÁ±ª&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;SQLiteÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_sqlite&#34;&gt;sqlite&lt;/a&gt;ÔºâÔºöËΩªÈáèÁ∫ßÂçïÊñá‰ª∂Êï∞ÊçÆÂ∫ìÔºåÊó†ÈúÄÂÆâË£ÖÂíåÈÖçÁΩÆÊï∞ÊçÆÊúçÂä°Á®ãÂ∫èÔºåVeighNaÁöÑÈªòËÆ§ÈÄâÈ°πÔºåÈÄÇÂêàÂÖ•Èó®Êñ∞ÊâãÁî®Êà∑&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;MySQLÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_mysql&#34;&gt;mysql&lt;/a&gt;ÔºâÔºö‰∏ªÊµÅÁöÑÂºÄÊ∫êÂÖ≥Á≥ªÂûãÊï∞ÊçÆÂ∫ìÔºåÊñáÊ°£ËµÑÊñôÊûÅ‰∏∫‰∏∞ÂØåÔºå‰∏îÂèØÊõøÊç¢ÂÖ∂‰ªñNewSQLÂÖºÂÆπÂÆûÁé∞ÔºàÂ¶ÇTiDBÔºâ&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;PostgreSQLÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_postgresql&#34;&gt;postgresql&lt;/a&gt;ÔºâÔºöÁâπÊÄßÊõ¥‰∏∫‰∏∞ÂØåÁöÑÂºÄÊ∫êÂÖ≥Á≥ªÂûãÊï∞ÊçÆÂ∫ìÔºåÊîØÊåÅÈÄöËøáÊâ©Â±ïÊèí‰ª∂Êù•Êñ∞Â¢ûÂäüËÉΩÔºåÂè™Êé®ËçêÁÜüÊâã‰ΩøÁî®&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;NoSQLÁ±ª&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;DolphinDBÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_dolphindb&#34;&gt;dolphindb&lt;/a&gt;ÔºâÔºö‰∏ÄÊ¨æÈ´òÊÄßËÉΩÂàÜÂ∏ÉÂºèÊó∂Â∫èÊï∞ÊçÆÂ∫ìÔºåÈÄÇÁî®‰∫éÂØπÈÄüÂ∫¶Ë¶ÅÊ±ÇÊûÅÈ´òÁöÑ‰ΩéÂª∂Êó∂ÊàñÂÆûÊó∂ÊÄß‰ªªÂä°&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;ArcticÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_arctic&#34;&gt;arctic&lt;/a&gt;ÔºâÔºöÈ´òÊÄßËÉΩÈáëËûçÊó∂Â∫èÊï∞ÊçÆÂ∫ìÔºåÈááÁî®‰∫ÜÂàÜÂùóÂåñÂÇ®Â≠ò„ÄÅLZ4ÂéãÁº©Á≠âÊÄßËÉΩ‰ºòÂåñÊñπÊ°àÔºå‰ª•ÂÆûÁé∞Êó∂Â∫èÊï∞ÊçÆÁöÑÈ´òÊïàËØªÂÜô&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;TDengineÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_taos&#34;&gt;taos&lt;/a&gt;ÔºâÔºöÂàÜÂ∏ÉÂºè„ÄÅÈ´òÊÄßËÉΩ„ÄÅÊîØÊåÅSQLÁöÑÊó∂Â∫èÊï∞ÊçÆÂ∫ìÔºåÂ∏¶ÊúâÂÜÖÂª∫ÁöÑÁºìÂ≠ò„ÄÅÊµÅÂºèËÆ°ÁÆó„ÄÅÊï∞ÊçÆËÆ¢ÈòÖÁ≠âÁ≥ªÁªüÂäüËÉΩÔºåËÉΩÂ§ßÂπÖÂáèÂ∞ëÁ†îÂèëÂíåËøêÁª¥ÁöÑÂ§çÊùÇÂ∫¶&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;TimescaleDBÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_timescaledb&#34;&gt;timescaledb&lt;/a&gt;ÔºâÔºöÂü∫‰∫éPostgreSQLÂºÄÂèëÁöÑ‰∏ÄÊ¨æÊó∂Â∫èÊï∞ÊçÆÂ∫ìÔºå‰ª•Êèí‰ª∂ÂåñÊâ©Â±ïÁöÑÂΩ¢ÂºèÂÆâË£ÖÔºåÊîØÊåÅËá™Âä®ÊåâÁ©∫Èó¥ÂíåÊó∂Èó¥ÂØπÊï∞ÊçÆËøõË°åÂàÜÂå∫&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;MongoDBÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_mongodb&#34;&gt;mongodb&lt;/a&gt;ÔºâÔºöÂü∫‰∫éÂàÜÂ∏ÉÂºèÊñá‰ª∂ÂÇ®Â≠òÔºàbsonÊ†ºÂºèÔºâÁöÑÊñáÊ°£ÂºèÊï∞ÊçÆÂ∫ìÔºåÂÜÖÁΩÆÁöÑÁÉ≠Êï∞ÊçÆÂÜÖÂ≠òÁºìÂ≠òÊèê‰æõÊõ¥Âø´ËØªÂÜôÈÄüÂ∫¶&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;InfluxDBÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_influxdb&#34;&gt;influxdb&lt;/a&gt;ÔºâÔºöÈíàÂØπTimeSeries Data‰∏ìÈó®ËÆæËÆ°ÁöÑÊó∂Â∫èÊï∞ÊçÆÂ∫ìÔºåÂàóÂºèÊï∞ÊçÆÂÇ®Â≠òÊèê‰æõÊûÅÈ´òÁöÑËØªÂÜôÊïàÁéáÂíåÂ§ñÂõ¥ÂàÜÊûêÂ∫îÁî®&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;LevelDBÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_leveldb&#34;&gt;leveldb&lt;/a&gt;ÔºâÔºöÁî±GoogleÊé®Âá∫ÁöÑÈ´òÊÄßËÉΩKey/ValueÊï∞ÊçÆÂ∫ìÔºåÂü∫‰∫éLSMÁÆóÊ≥ïÂÆûÁé∞ËøõÁ®ãÂÜÖÂ≠òÂÇ®ÂºïÊìéÔºåÊîØÊåÅÊï∞ÂçÅ‰∫øÁ∫ßÂà´ÁöÑÊµ∑ÈáèÊï∞ÊçÆ&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ÂØπÊé•‰∏ãËø∞ÂêÑÁ±ªÊï∞ÊçÆÊúçÂä°ÁöÑÈÄÇÈÖçÂô®Êé•Âè£ÔºàdatafeedÔºâÔºö&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Á±≥Á≠êRQDataÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_rqdata&#34;&gt;rqdata&lt;/a&gt;ÔºâÔºöËÇ°Á•®„ÄÅÊúüË¥ß„ÄÅÊúüÊùÉ„ÄÅÂü∫Èáë„ÄÅÂÄ∫Âà∏„ÄÅÈªÑÈáëTD&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;ÊÅíÁîüUDataÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_udata&#34;&gt;udata&lt;/a&gt;ÔºâÔºöËÇ°Á•®„ÄÅÊúüË¥ß„ÄÅÊúüÊùÉ&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;TuShareÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_tushare&#34;&gt;tushare&lt;/a&gt;ÔºâÔºöËÇ°Á•®„ÄÅÊúüË¥ß„ÄÅÊúüÊùÉ„ÄÅÂü∫Èáë&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;‰∏áÂæóWindÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_wind&#34;&gt;wind&lt;/a&gt;ÔºâÔºöËÇ°Á•®„ÄÅÊúüË¥ß„ÄÅÂü∫Èáë„ÄÅÂÄ∫Âà∏&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Â§©ËΩØTinysoftÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_tinysoft&#34;&gt;tinysoft&lt;/a&gt;ÔºâÔºöËÇ°Á•®„ÄÅÊúüË¥ß„ÄÅÂü∫Èáë„ÄÅÂÄ∫Âà∏&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;ÂêåËä±È°∫iFinDÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_ifind&#34;&gt;ifind&lt;/a&gt;ÔºâÔºöËÇ°Á•®„ÄÅÊúüË¥ß„ÄÅÂü∫Èáë„ÄÅÂÄ∫Âà∏&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Â§©Âã§TQSDKÔºà&lt;a href=&#34;https://www.github.com/vnpy/vnpy_tqsdk&#34;&gt;tqsdk&lt;/a&gt;ÔºâÔºöÊúüË¥ß&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ë∑®ËøõÁ®ãÈÄöËÆØÊ†áÂáÜÁªÑ‰ª∂ÔºàrpcÔºâÔºåÁî®‰∫éÂÆûÁé∞ÂàÜÂ∏ÉÂºèÈÉ®ÁΩ≤ÁöÑÂ§çÊùÇ‰∫§ÊòìÁ≥ªÁªü„ÄÇ&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;PythonÈ´òÊÄßËÉΩKÁ∫øÂõæË°®ÔºàchartÔºâÔºåÊîØÊåÅÂ§ßÊï∞ÊçÆÈáèÂõæË°®ÊòæÁ§∫‰ª•ÂèäÂÆûÊó∂Êï∞ÊçÆÊõ¥Êñ∞ÂäüËÉΩ„ÄÇ&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://www.vnpy.com/forum&#34;&gt;Á§æÂå∫ËÆ∫Âùõ&lt;/a&gt;Âíå&lt;a href=&#34;http://zhuanlan.zhihu.com/vn-py&#34;&gt;Áü•‰πé‰∏ìÊ†è&lt;/a&gt;ÔºåÂÜÖÂÆπÂåÖÊã¨VeighNaÈ°πÁõÆÁöÑÂºÄÂèëÊïôÁ®ãÂíåPythonÂú®ÈáèÂåñ‰∫§ÊòìÈ¢ÜÂüüÁöÑÂ∫îÁî®Á†îÁ©∂Á≠âÂÜÖÂÆπ„ÄÇ&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ÂÆòÊñπ‰∫§ÊµÅÁæ§262656087ÔºàQQÔºâÔºåÁÆ°ÁêÜ‰∏•Ê†ºÔºàÂÆöÊúüÊ∏ÖÈô§ÈïøÊúüÊΩúÊ∞¥ÁöÑÊàêÂëòÔºâÔºåÂÖ•Áæ§Ë¥πÂ∞ÜÊçêËµ†ÁªôVeighNaÁ§æÂå∫Âü∫Èáë„ÄÇ&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Ê≥®Ôºö‰ª•‰∏äÂÖ≥‰∫éÂäüËÉΩÁâπÁÇπÁöÑËØ¥Êòé‰∏∫Ê†πÊçÆËØ¥ÊòéÊñáÊ°£ÂèëÂ∏ÉÊó∂ÊÉÖÂÜµÁΩóÂàóÔºåÂêéÁª≠ÂèØËÉΩÂ≠òÂú®Êõ¥Êñ∞ÊàñË∞ÉÊï¥„ÄÇËã•ÂäüËÉΩÊèèËø∞ÂêåÂÆûÈôÖÂ≠òÂú®Âá∫ÂÖ•ÔºåÊ¨¢ËøéÈÄöËøáIssueËÅîÁ≥ªËøõË°åË∞ÉÊï¥„ÄÇ&lt;/p&gt; &#xA;&lt;h2&gt;ÁéØÂ¢ÉÂáÜÂ§á&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Êé®Ëçê‰ΩøÁî®VeighNaÂõ¢Èòü‰∏∫ÈáèÂåñ‰∫§Êòì‰∏ìÈó®ÊâìÈÄ†ÁöÑPythonÂèëË°åÁâà&lt;a href=&#34;https://download.vnpy.com/veighna_studio-3.5.0.exe&#34;&gt;VeighNa Studio-3.5.0&lt;/a&gt;ÔºåÈõÜÊàêÂÜÖÁΩÆ‰∫ÜVeighNaÊ°ÜÊû∂‰ª•ÂèäVeighNa StationÈáèÂåñÁÆ°ÁêÜÂπ≥Âè∞ÔºåÊó†ÈúÄÊâãÂä®ÂÆâË£Ö&lt;/li&gt; &#xA; &lt;li&gt;ÊîØÊåÅÁöÑÁ≥ªÁªüÁâàÊú¨ÔºöWindows 10‰ª•‰∏ä / Windows Server 2016‰ª•‰∏ä / Ubuntu 20.04 LTS‰ª•‰∏ä&lt;/li&gt; &#xA; &lt;li&gt;ÊîØÊåÅÁöÑPythonÁâàÊú¨ÔºöPython 3.7/ 3.8 / 3.9 / 3.10 64‰ΩçÔºà&lt;strong&gt;Êé®Ëçê‰ΩøÁî®Python 3.10&lt;/strong&gt;Ôºâ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ÂÆâË£ÖÊ≠•È™§&lt;/h2&gt; &#xA;&lt;p&gt;Âú®&lt;a href=&#34;https://github.com/vnpy/vnpy/releases&#34;&gt;ËøôÈáå&lt;/a&gt;‰∏ãËΩΩReleaseÂèëÂ∏ÉÁâàÊú¨ÔºåËß£ÂéãÂêéËøêË°å‰ª•‰∏ãÂëΩ‰ª§ÂÆâË£ÖÔºö&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;install.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Ubuntu&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Macos&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash install_osx.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Ê≥®ÊÑèÔºösetup.cfg‰∏≠Âàó‰∏æ‰∫ÜVeighNaÊ°ÜÊû∂ÂÆâË£ÖÊâÄÈúÄÁöÑ‰æùËµñÂ∫ìÔºårequirements.txt‰∏≠ÁªôÂá∫‰∫ÜËøô‰∫õ‰æùËµñÂ∫ìÁöÑÊé®ËçêÂÆâË£ÖÁâàÊú¨„ÄÇ&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‰ΩøÁî®ÊåáÂçó&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Âú®&lt;a href=&#34;http://www.simnow.com.cn/&#34;&gt;SimNow&lt;/a&gt;Ê≥®ÂÜåCTP‰ªøÁúüË¥¶Âè∑ÔºåÂπ∂Âú®&lt;a href=&#34;http://www.simnow.com.cn/product.action&#34;&gt;ËØ•È°µÈù¢&lt;/a&gt;Ëé∑ÂèñÁªèÁ∫™ÂïÜ‰ª£Á†Å‰ª•Âèä‰∫§ÊòìË°åÊÉÖÊúçÂä°Âô®Âú∞ÂùÄ„ÄÇ&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Âú®&lt;a href=&#34;https://www.vnpy.com/forum/&#34;&gt;VeighNaÁ§æÂå∫ËÆ∫Âùõ&lt;/a&gt;Ê≥®ÂÜåËé∑ÂæóVeighNa StationË¥¶Âè∑ÂØÜÁ†ÅÔºàËÆ∫ÂùõË¥¶Âè∑ÂØÜÁ†ÅÂç≥ÊòØÔºâ&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ÂêØÂä®VeighNa StationÔºàÂÆâË£ÖVeighNa StudioÂêé‰ºöÂú®Ê°åÈù¢Ëá™Âä®ÂàõÂª∫Âø´Êç∑ÊñπÂºèÔºâÔºåËæìÂÖ•‰∏ä‰∏ÄÊ≠•ÁöÑË¥¶Âè∑ÂØÜÁ†ÅÁôªÂΩï&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ÁÇπÂáªÂ∫ïÈÉ®ÁöÑ&lt;strong&gt;VeighNa Trader&lt;/strong&gt;ÊåâÈíÆÔºåÂºÄÂßã‰Ω†ÁöÑ‰∫§ÊòìÔºÅÔºÅÔºÅ&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Ê≥®ÊÑèÔºö&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Âú®VeighNa TraderÁöÑËøêË°åËøáÁ®ã‰∏≠ËØ∑ÂãøÂÖ≥Èó≠VeighNa StationÔºà‰ºöËá™Âä®ÈÄÄÂá∫Ôºâ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ËÑöÊú¨ËøêË°å&lt;/h2&gt; &#xA;&lt;p&gt;Èô§‰∫ÜÂü∫‰∫éVeighNa StationÁöÑÂõæÂΩ¢ÂåñÂêØÂä®ÊñπÂºèÂ§ñÔºå‰πüÂèØ‰ª•Âú®‰ªªÊÑèÁõÆÂΩï‰∏ãÂàõÂª∫run.pyÔºåÂÜôÂÖ•‰ª•‰∏ãÁ§∫‰æã‰ª£Á†ÅÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from vnpy.event import EventEngine&#xA;from vnpy.trader.engine import MainEngine&#xA;from vnpy.trader.ui import MainWindow, create_qapp&#xA;&#xA;from vnpy_ctp import CtpGateway&#xA;from vnpy_ctastrategy import CtaStrategyApp&#xA;from vnpy_ctabacktester import CtaBacktesterApp&#xA;&#xA;&#xA;def main():&#xA;    &#34;&#34;&#34;Start VeighNa Trader&#34;&#34;&#34;&#xA;    qapp = create_qapp()&#xA;&#xA;    event_engine = EventEngine()&#xA;    main_engine = MainEngine(event_engine)&#xA;    &#xA;    main_engine.add_gateway(CtpGateway)&#xA;    main_engine.add_app(CtaStrategyApp)&#xA;    main_engine.add_app(CtaBacktesterApp)&#xA;&#xA;    main_window = MainWindow(main_engine, event_engine)&#xA;    main_window.showMaximized()&#xA;&#xA;    qapp.exec()&#xA;&#xA;&#xA;if __name__ == &#34;__main__&#34;:&#xA;    main()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Âú®ËØ•ÁõÆÂΩï‰∏ãÊâìÂºÄCMDÔºàÊåâ‰ΩèShift-&amp;gt;ÁÇπÂáªÈº†Ê†áÂè≥ÈîÆ-&amp;gt;Âú®Ê≠§Â§ÑÊâìÂºÄÂëΩ‰ª§Á™óÂè£/PowerShellÔºâÂêéËøêË°å‰∏ãÂàóÂëΩ‰ª§ÂêØÂä®VeighNa TraderÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python run.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Ë¥°ÁåÆ‰ª£Á†Å&lt;/h2&gt; &#xA;&lt;p&gt;VeighNa‰ΩøÁî®GithubÊâòÁÆ°ÂÖ∂Ê∫ê‰ª£Á†ÅÔºåÂ¶ÇÊûúÂ∏åÊúõË¥°ÁåÆ‰ª£Á†ÅËØ∑‰ΩøÁî®githubÁöÑPRÔºàPull RequestÔºâÁöÑÊµÅÁ®ã:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/vnpy/vnpy/issues/new&#34;&gt;ÂàõÂª∫ Issue&lt;/a&gt; - ÂØπ‰∫éËæÉÂ§ßÁöÑÊîπÂä®ÔºàÂ¶ÇÊñ∞ÂäüËÉΩÔºåÂ§ßÂûãÈáçÊûÑÁ≠âÔºâÂª∫ËÆÆÂÖàÂºÄissueËÆ®ËÆ∫‰∏Ä‰∏ãÔºåËæÉÂ∞èÁöÑimprovementÔºàÂ¶ÇÊñáÊ°£ÊîπËøõÔºåbugfixÁ≠âÔºâÁõ¥Êé•ÂèëPRÂç≥ÂèØ&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fork &lt;a href=&#34;https://github.com/vnpy/vnpy&#34;&gt;VeighNa&lt;/a&gt; - ÁÇπÂáªÂè≥‰∏äËßí&lt;strong&gt;Fork&lt;/strong&gt;ÊåâÈíÆ&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone‰Ω†Ëá™Â∑±ÁöÑfork: &lt;code&gt;git clone https://github.com/$userid/vnpy.git&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Â¶ÇÊûú‰Ω†ÁöÑforkÂ∑≤ÁªèËøáÊó∂ÔºåÈúÄË¶ÅÊâãÂä®syncÔºö&lt;a href=&#34;https://help.github.com/articles/syncing-a-fork/&#34;&gt;ÂêåÊ≠•ÊñπÊ≥ï&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;‰ªé&lt;strong&gt;dev&lt;/strong&gt;ÂàõÂª∫‰Ω†Ëá™Â∑±ÁöÑfeature branch: &lt;code&gt;git checkout -b $my_feature_branch dev&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Âú®$my_feature_branch‰∏ä‰øÆÊîπÂπ∂Â∞Ü‰øÆÊîπpushÂà∞‰Ω†ÁöÑfork‰∏ä&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ÂàõÂª∫‰ªé‰Ω†ÁöÑforkÁöÑ$my_feature_branchÂàÜÊîØÂà∞‰∏ªÈ°πÁõÆÁöÑ&lt;strong&gt;dev&lt;/strong&gt;ÂàÜÊîØÁöÑ[Pull Request] - &lt;a href=&#34;https://github.com/vnpy/vnpy/compare?expand=1&#34;&gt;Âú®Ê≠§&lt;/a&gt;ÁÇπÂáª&lt;strong&gt;compare across forks&lt;/strong&gt;ÔºåÈÄâÊã©ÈúÄË¶ÅÁöÑforkÂíåbranchÂàõÂª∫PR&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Á≠âÂæÖreview, ÈúÄË¶ÅÁªßÁª≠ÊîπËøõÔºåÊàñËÄÖË¢´Merge!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Âú®Êèê‰∫§‰ª£Á†ÅÁöÑÊó∂ÂÄôÔºåËØ∑ÈÅµÂÆà‰ª•‰∏ãËßÑÂàôÔºå‰ª•ÊèêÈ´ò‰ª£Á†ÅË¥®ÈáèÔºö&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‰ΩøÁî®&lt;a href=&#34;https://pypi.org/project/flake8/&#34;&gt;flake8&lt;/a&gt;Ê£ÄÊü•‰Ω†ÁöÑ‰ª£Á†ÅÔºåÁ°Æ‰øùÊ≤°ÊúâerrorÂíåwarning„ÄÇÂú®È°πÁõÆÊ†πÁõÆÂΩï‰∏ãËøêË°å&lt;code&gt;flake8&lt;/code&gt;Âç≥ÂèØ„ÄÇ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ÂÖ∂‰ªñÂÜÖÂÆπ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vnpy/vnpy/raw/dev/.github/SUPPORT.md&#34;&gt;Ëé∑ÂèñÂ∏ÆÂä©&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vnpy/vnpy/raw/dev/.github/CODE_OF_CONDUCT.md&#34;&gt;Á§æÂå∫Ë°å‰∏∫ÂáÜÂàô&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vnpy/vnpy/raw/dev/.github/ISSUE_TEMPLATE.md&#34;&gt;IssueÊ®°Êùø&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vnpy/vnpy/raw/dev/.github/PULL_REQUEST_TEMPLATE.md&#34;&gt;PRÊ®°Êùø&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ÁâàÊùÉËØ¥Êòé&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hwchase17/chat-langchain</title>
    <updated>2023-02-05T08:46:12Z</updated>
    <id>tag:github.com,2023-02-05:/hwchase17/chat-langchain</id>
    <link href="https://github.com/hwchase17/chat-langchain" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ChatLangChain&lt;/h1&gt; &#xA;&lt;p&gt;This repo is an implementation of a chatbot specifically focused on question answering over the &lt;a href=&#34;https://langchain.readthedocs.io/en/latest/&#34;&gt;LangChain documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üöÄ Important Links&lt;/h2&gt; &#xA;&lt;p&gt;Website: &lt;a href=&#34;https://chat.langchain.dev&#34;&gt;chat.langchain.dev&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hugging Face Space: &lt;a href=&#34;https://huggingface.co/spaces/hwchase17/chat-langchain&#34;&gt;huggingface.co/spaces/hwchase17/chat-langchain&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Blog Post: &lt;a href=&#34;https://blog.langchain.dev/langchain-chat/&#34;&gt;blog.langchain.dev/langchain-chat/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üìö Technical description&lt;/h2&gt; &#xA;&lt;p&gt;There are two components: ingestion and question-answering.&lt;/p&gt; &#xA;&lt;p&gt;Ingestion has the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Pull html from documentation site&lt;/li&gt; &#xA; &lt;li&gt;Parse html with BeautifulSoup&lt;/li&gt; &#xA; &lt;li&gt;Split documents with LangChain&#39;s &lt;a href=&#34;https://langchain.readthedocs.io/en/latest/modules/utils/combine_docs_examples/textsplitter.html&#34;&gt;TextSplitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create a vectorstore of embeddings, using LangChain&#39;s &lt;a href=&#34;https://langchain.readthedocs.io/en/latest/modules/utils/combine_docs_examples/vectorstores.html&#34;&gt;vectorstore wrapper&lt;/a&gt; (with OpenAI&#39;s embeddings and Weaviate&#39;s vectorstore).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Question-Answering has the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Given the chat history and new user input, determine what a standalone question would be (using GPT-3).&lt;/li&gt; &#xA; &lt;li&gt;Given that standalone question, look up relevant documents from the vectorstore.&lt;/li&gt; &#xA; &lt;li&gt;Pass the standalone question and relevant documents to GPT-3 to generate a final answer.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;üß† How to Extend to your documentation?&lt;/h2&gt; &#xA;&lt;p&gt;Coming soon.&lt;/p&gt;</summary>
  </entry>
</feed>