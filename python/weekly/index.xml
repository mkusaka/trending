<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-19T01:59:00Z</updated>
  <subtitle>Weekly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zhayujie/chatgpt-on-wechat</title>
    <updated>2023-02-19T01:59:00Z</updated>
    <id>tag:github.com,2023-02-19:/zhayujie/chatgpt-on-wechat</id>
    <link href="https://github.com/zhayujie/chatgpt-on-wechat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;使用ChatGPT搭建微信聊天机器人，基于OpenAI API和itchat实现。Wechat robot based on ChatGPT, which using OpenAI api and itchat library.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;简介&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ChatGPT近期以强大的对话和信息整合能力风靡全网，可以写代码、改论文、讲故事，几乎无所不能，这让人不禁有个大胆的想法，能否用他的对话模型把我们的微信打造成一个智能机器人，可以在与好友对话中给出意想不到的回应，而且再也不用担心女朋友影响我们 &lt;del&gt;打游戏&lt;/del&gt; 工作了。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;基于ChatGPT的微信聊天机器人，通过 &lt;a href=&#34;https://github.com/openai/openai-quickstart-python&#34;&gt;OpenAI&lt;/a&gt; 接口生成对话内容，使用 &lt;a href=&#34;https://github.com/littlecodersh/ItChat&#34;&gt;itchat&lt;/a&gt; 实现微信消息的接收和自动回复。已实现的特性如下：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;文本对话：&lt;/strong&gt; 接收私聊及群组中的微信消息，使用ChatGPT生成回复内容，完成自动回复&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;规则定制化：&lt;/strong&gt; 支持私聊中按指定规则触发自动回复，支持对群组设置自动回复白名单&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;多账号：&lt;/strong&gt; 支持多微信账号同时运行&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;图片生成：&lt;/strong&gt; 支持根据描述生成图片，并自动发送至个人聊天或群聊&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;上下文记忆&lt;/strong&gt;：支持多轮对话记忆，且为每个好友维护独立的上下会话&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;更新日志&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;2023.02.09：&lt;/strong&gt; 扫码登录存在封号风险，请谨慎使用，参考&lt;a href=&#34;https://github.com/AutumnWhj/ChatGPT-wechat-bot/issues/158&#34;&gt;#58&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;2023.02.05：&lt;/strong&gt; 在openai官方接口方案中 (GPT-3模型) 实现上下文对话&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;2022.12.19：&lt;/strong&gt; 引入 &lt;a href=&#34;https://github.com/why2lyj/ItChat-UOS&#34;&gt;itchat-uos&lt;/a&gt; 替换 itchat，解决由于不能登录网页微信而无法使用的问题，且解决Python3.9的兼容问题&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;2022.12.18：&lt;/strong&gt; 支持根据描述生成图片并发送，openai版本需大于0.25.0&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;2022.12.17：&lt;/strong&gt; 原来的方案是从 &lt;a href=&#34;https://chat.openai.com/chat&#34;&gt;ChatGPT页面&lt;/a&gt; 获取session_token，使用 &lt;a href=&#34;https://github.com/acheong08/ChatGPT&#34;&gt;revChatGPT&lt;/a&gt; 直接访问web接口，但随着ChatGPT接入Cloudflare人机验证，这一方案难以在服务器顺利运行。 所以目前使用的方案是调用 OpenAI 官方提供的 &lt;a href=&#34;https://beta.openai.com/docs/api-reference/introduction&#34;&gt;API&lt;/a&gt;，回复质量上基本接近于ChatGPT的内容，劣势是暂不支持有上下文记忆的对话，优势是稳定性和响应速度较好。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;使用效果&lt;/h1&gt; &#xA;&lt;h3&gt;个人聊天&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zhayujie/chatgpt-on-wechat/master/docs/images/single-chat-sample.jpg&#34; alt=&#34;single-chat-sample.jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;群组聊天&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zhayujie/chatgpt-on-wechat/master/docs/images/group-chat-sample.jpg&#34; alt=&#34;group-chat-sample.jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;图片生成&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zhayujie/chatgpt-on-wechat/master/docs/images/image-create-sample.jpg&#34; alt=&#34;group-chat-sample.jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;快速开始&lt;/h1&gt; &#xA;&lt;h2&gt;准备&lt;/h2&gt; &#xA;&lt;h3&gt;1. OpenAI账号注册&lt;/h3&gt; &#xA;&lt;p&gt;前往 &lt;a href=&#34;https://beta.openai.com/signup&#34;&gt;OpenAI注册页面&lt;/a&gt; 创建账号，参考这篇 &lt;a href=&#34;https://freepac.siterubix.com/chatgpt%e6%b3%a8%e5%86%8c%e6%95%99%e7%a8%8b%ef%bc%88%e5%ae%8c%e6%95%b4%e6%8c%87%e5%8d%97%ef%bc%89/&#34;&gt;教程&lt;/a&gt; 可以通过虚拟手机号来接收验证码。创建完账号则前往 &lt;a href=&#34;https://beta.openai.com/account/api-keys&#34;&gt;API管理页面&lt;/a&gt; 创建一个 API Key 并保存下来，后面需要在项目中配置这个key。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;项目中使用的对话模型是 davinci，计费方式是约每 750 字 (包含请求和回复) 消耗 $0.02，图片生成是每张消耗 $0.016，账号创建有免费的 $18 额度，使用完可以更换邮箱重新注册。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;2.运行环境&lt;/h3&gt; &#xA;&lt;p&gt;支持 Linux、MacOS、Windows 系统（可在Linux服务器上长期运行)，同时需安装 &lt;code&gt;Python&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;建议Python版本在 3.7.1~3.9.X 之间，3.10及以上版本在 MacOS 可用，其他系统上不确定能否正常运行。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;1.克隆项目代码：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/zhayujie/chatgpt-on-wechat&#xA;cd chatgpt-on-wechat/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.安装所需核心依赖：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip3 install itchat-uos==1.5.0.dev0&#xA;pip3 install --upgrade openai&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;注：&lt;code&gt;itchat-uos&lt;/code&gt;使用指定版本1.5.0.dev0，&lt;code&gt;openai&lt;/code&gt;使用最新版本，需高于0.25.0。&lt;/p&gt; &#xA;&lt;h2&gt;配置&lt;/h2&gt; &#xA;&lt;p&gt;配置文件的模板在根目录的&lt;code&gt;config-template.json&lt;/code&gt;中，需复制该模板创建最终生效的 &lt;code&gt;config.json&lt;/code&gt; 文件：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp config-template.json config.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;然后在&lt;code&gt;config.json&lt;/code&gt;中填入配置，以下是对默认配置的说明，可根据需要进行自定义修改：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# config.json文件内容示例&#xA;{ &#xA;  &#34;open_ai_api_key&#34;: &#34;YOUR API KEY&#34;,                          # 填入上面创建的 OpenAI API KEY&#xA;  &#34;single_chat_prefix&#34;: [&#34;bot&#34;, &#34;@bot&#34;],                      # 私聊时文本需要包含该前缀才能触发机器人回复&#xA;  &#34;single_chat_reply_prefix&#34;: &#34;[bot] &#34;,                       # 私聊时自动回复的前缀，用于区分真人&#xA;  &#34;group_chat_prefix&#34;: [&#34;@bot&#34;],                              # 群聊时包含该前缀则会触发机器人回复&#xA;  &#34;group_name_white_list&#34;: [&#34;ChatGPT测试群&#34;, &#34;ChatGPT测试群2&#34;], # 开启自动回复的群名称列表&#xA;  &#34;image_create_prefix&#34;: [&#34;画&#34;, &#34;看&#34;, &#34;找&#34;],                   # 开启图片回复的前缀&#xA;  &#34;conversation_max_tokens&#34;: 1000,                            # 支持上下文记忆的最多字符数&#xA;  &#34;character_desc&#34;: &#34;你是ChatGPT, 一个由OpenAI训练的大型语言模型, 你旨在回答并解决人们的任何问题，并且可以使用多种语言与人交流。&#34;  # 人格描述&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;配置说明：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1.个人聊天&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;个人聊天中，需要以 &#34;bot&#34;或&#34;@bot&#34; 为开头的内容触发机器人，对应配置项 &lt;code&gt;single_chat_prefix&lt;/code&gt; (如果不需要以前缀触发可以填写 &lt;code&gt;&#34;single_chat_prefix&#34;: [&#34;&#34;]&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;机器人回复的内容会以 &#34;[bot] &#34; 作为前缀， 以区分真人，对应的配置项为 &lt;code&gt;single_chat_reply_prefix&lt;/code&gt; (如果不需要前缀可以填写 &lt;code&gt;&#34;single_chat_reply_prefix&#34;: &#34;&#34;&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;2.群组聊天&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;群组聊天中，群名称需配置在 &lt;code&gt;group_name_white_list &lt;/code&gt; 中才能开启群聊自动回复。如果想对所有群聊生效，可以直接填写 &lt;code&gt;&#34;group_name_white_list&#34;: [&#34;ALL_GROUP&#34;]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;默认只要被人 @ 就会触发机器人自动回复；另外群聊天中只要检测到以 &#34;@bot&#34; 开头的内容，同样会自动回复（方便自己触发），这对应配置项 &lt;code&gt;group_chat_prefix&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;可选配置: &lt;code&gt;group_name_keyword_white_list&lt;/code&gt;配置项支持模糊匹配群名称，&lt;code&gt;group_chat_keyword&lt;/code&gt;配置项则支持模糊匹配群消息内容，用法与上述两个配置项相同。（Contributed by &lt;a href=&#34;https://github.com/evolay&#34;&gt;evolay&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;3.其他配置&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;对于图像生成，在满足个人或群组触发条件外，还需要额外的关键词前缀来触发，对应配置 &lt;code&gt;image_create_prefix &lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;关于OpenAI对话及图片接口的参数配置（内容自由度、回复字数限制、图片大小等），可以参考 &lt;a href=&#34;https://beta.openai.com/docs/api-reference/completions&#34;&gt;对话接口&lt;/a&gt; 和 &lt;a href=&#34;https://beta.openai.com/docs/api-reference/completions&#34;&gt;图像接口&lt;/a&gt; 文档直接在 &lt;a href=&#34;https://github.com/zhayujie/chatgpt-on-wechat/raw/master/bot/openai/open_ai_bot.py&#34;&gt;代码&lt;/a&gt; &lt;code&gt;bot/openai/open_ai_bot.py&lt;/code&gt; 中进行调整。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;conversation_max_tokens&lt;/code&gt;：表示能够记忆的上下文最大字数（一问一答为一组对话，如果累积的对话字数超出限制，就会优先移除最早的一组对话）&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;character_desc&lt;/code&gt; 配置中保存着你对机器人说的一段话，他会记住这段话并作为他的设定，你可以为他定制任何人格 (关于会话上下文的更多内容参考该 &lt;a href=&#34;https://github.com/zhayujie/chatgpt-on-wechat/issues/43&#34;&gt;issue&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;运行&lt;/h2&gt; &#xA;&lt;h3&gt;1.本地运行&lt;/h3&gt; &#xA;&lt;p&gt;如果是开发机 &lt;strong&gt;本地运行&lt;/strong&gt;，直接在项目根目录下执行：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 app.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;终端输出二维码后，使用微信进行扫码，当输出 &#34;Start auto replying&#34; 时表示自动回复程序已经成功运行了（注意：用于登录的微信需要在支付处已完成实名认证）。扫码登录后你的账号就成为机器人了，可以在微信手机端通过配置的关键词触发自动回复 (任意好友发送消息给你，或是自己发消息给好友)，参考&lt;a href=&#34;https://github.com/zhayujie/chatgpt-on-wechat/issues/142&#34;&gt;#142&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h3&gt;2.服务器部署&lt;/h3&gt; &#xA;&lt;p&gt;使用nohup命令在后台运行程序：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;touch nohup.out                                   # 首次运行需要新建日志文件                     &#xA;nohup python3 app.py &amp;amp; tail -f nohup.out          # 在后台运行程序并通过日志输出二维码&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;扫码登录后程序即可运行于服务器后台，此时可通过 &lt;code&gt;ctrl+c&lt;/code&gt; 关闭日志，不会影响后台程序的运行。使用 &lt;code&gt;ps -ef | grep app.py | grep -v grep&lt;/code&gt; 命令可查看运行于后台的进程，如果想要重新启动程序可以先 &lt;code&gt;kill&lt;/code&gt; 掉对应的进程。日志关闭后如果想要再次打开只需输入&amp;nbsp;&lt;code&gt;tail -f nohup.out&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 如果 扫码后手机提示登录验证需要等待5s，而终端的二维码再次刷新并提示 &lt;code&gt;Log in time out, reloading QR code&lt;/code&gt;，此时需参考此 &lt;a href=&#34;https://github.com/zhayujie/chatgpt-on-wechat/issues/8&#34;&gt;issue&lt;/a&gt; 修改一行代码即可解决。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;多账号支持：&lt;/strong&gt; 将 项目复制多份，分别启动程序，用不同账号扫码登录即可实现同时运行。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;特殊指令：&lt;/strong&gt; 用户向机器人发送 &lt;strong&gt;#清除记忆&lt;/strong&gt; 即可清空该用户的上下文记忆。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;3.Docker部署&lt;/h3&gt; &#xA;&lt;p&gt;参考文档 &lt;a href=&#34;https://github.com/limccn/chatgpt-on-wechat/wiki/Docker%E9%83%A8%E7%BD%B2&#34;&gt;Docker部署&lt;/a&gt; (Contributed by &lt;a href=&#34;https://github.com/limccn&#34;&gt;limccn&lt;/a&gt;)。&lt;/p&gt; &#xA;&lt;h2&gt;常见问题&lt;/h2&gt; &#xA;&lt;p&gt;FAQs： &lt;a href=&#34;https://github.com/zhayujie/chatgpt-on-wechat/wiki/FAQs&#34;&gt;https://github.com/zhayujie/chatgpt-on-wechat/wiki/FAQs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;联系&lt;/h2&gt; &#xA;&lt;p&gt;欢迎提交PR、Issues，以及Star支持一下。程序运行遇到问题优先查看 &lt;a href=&#34;https://github.com/zhayujie/chatgpt-on-wechat/wiki/FAQs&#34;&gt;常见问题列表&lt;/a&gt; ，其次前往 &lt;a href=&#34;https://github.com/zhayujie/chatgpt-on-wechat/issues&#34;&gt;Issues&lt;/a&gt; 中搜索，若无相似问题可创建Issue，或加微信 eijuyahz 交流。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>acheong08/EdgeGPT</title>
    <updated>2023-02-19T01:59:00Z</updated>
    <id>tag:github.com,2023-02-19:/acheong08/EdgeGPT</id>
    <link href="https://github.com/acheong08/EdgeGPT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Reverse engineered API of Microsoft&#39;s Bing Chat&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://socialify.git.ci/acheong08/EdgeGPT/image?font=Inter&amp;amp;language=1&amp;amp;logo=https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2F9%2F9c%2FBing_Fluent_Logo.svg&amp;amp;owner=1&amp;amp;pattern=Floating%20Cogs&amp;amp;theme=Auto&#34; alt=&#34;EdgeGPT&#34; width=&#34;640&#34; height=&#34;320&#34;&gt; &#xA; &lt;h1&gt;Edge GPT&lt;/h1&gt; &#xA; &lt;p&gt;&lt;em&gt;The reverse engineering the chat feature of the new version of Bing&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/acheong08/EdgeGPT&#34;&gt; &lt;img alt=&#34;PyPI version&#34; src=&#34;https://img.shields.io/pypi/v/EdgeGPT&#34;&gt; &lt;/a&gt; &lt;img alt=&#34;Python version&#34; src=&#34;https://img.shields.io/badge/python-3.8+-blue.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/acheong08/EdgeGPT/master/#edge-gpt&#34;&gt;Edge GPT&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/acheong08/EdgeGPT/master/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/acheong08/EdgeGPT/master/#setup&#34;&gt;Setup&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/acheong08/EdgeGPT/master/#install-package&#34;&gt;Install package&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/acheong08/EdgeGPT/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/acheong08/EdgeGPT/master/#checking-access-required&#34;&gt;Checking access (Required)&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/acheong08/EdgeGPT/master/#getting-authentication-required&#34;&gt;Getting authentication (Required)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/acheong08/EdgeGPT/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/acheong08/EdgeGPT/master/#quick-start&#34;&gt;Quick start&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/acheong08/EdgeGPT/master/#developer-demo&#34;&gt;Developer demo&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/acheong08/EdgeGPT/master/#work-in-progress&#34;&gt;Work in progress&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/acheong08/EdgeGPT/master/#star-history&#34;&gt;Star History&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/acheong08/EdgeGPT/master/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;h3&gt;Install package&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 -m pip install EdgeGPT --upgrade&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;python 3.8+&lt;/li&gt; &#xA; &lt;li&gt;Microsoft Edge (Required)&lt;/li&gt; &#xA; &lt;li&gt;A Microsoft Account with early access to &lt;a href=&#34;http://bing.com/chat&#34;&gt;http://bing.com/chat&lt;/a&gt; (Required)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;h3&gt;Checking access (Required)&lt;/h3&gt; &lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Install the latest version of Microsoft Edge&lt;/li&gt; &#xA;  &lt;li&gt;Open &lt;a href=&#34;http://bing.com/chat&#34;&gt;http://bing.com/chat&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;If you see a chat feature, you are good to go&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;h3&gt;Getting authentication (Required)&lt;/h3&gt; &lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Install the cookie editor extension for &lt;a href=&#34;https://chrome.google.com/webstore/detail/cookie-editor/hlkenndednhfkekhgcdicdfddnkalmdm&#34;&gt;Chrome&lt;/a&gt; or &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/cookie-editor/&#34;&gt;Firefox&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Go to &lt;code&gt;bing.com&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Open the extension&lt;/li&gt; &#xA;  &lt;li&gt;Click &#34;Export&#34; on the bottom right (This saves your cookies to clipboard)&lt;/li&gt; &#xA;  &lt;li&gt;Paste your cookies into a file &lt;code&gt;cookies.json&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Quick start&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt; $ python3 -m EdgeGPT -h&#xA;&#xA;        EdgeGPT - A demo of reverse engineering the Bing GPT chatbot&#xA;        Repo: github.com/acheong08/EdgeGPT&#xA;        By: Antonio Cheong&#xA;&#xA;        !help for help&#xA;&#xA;        Type !exit to exit&#xA;        Enter twice to send message&#xA;&#xA;usage: EdgeGPT.py [-h] [--no-stream] --cookie-file COOKIE_FILE&#xA;&#xA;options:&#xA;  -h, --help            show this help message and exit&#xA;  --no-stream&#xA;  --cookie-file COOKIE_FILE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Developer demo&lt;/h3&gt; &#xA;&lt;p&gt;Remember to set cookie file path: &lt;code&gt;export COOKIE_FILE=/path/to/cookies.json&lt;/code&gt;. You can also specify the path to &lt;code&gt;cookies.json&lt;/code&gt; in the argument &lt;code&gt;cookiePath&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;bot = Chatbot(cookiePath=&#39;./cookie.json&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use Async for the best experience&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/acheong08/EdgeGPT/raw/master/src/EdgeGPT.py#L268-L328&#34;&gt;Reference code&lt;/a&gt; for more advanced example of usage&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import asyncio&#xA;from EdgeGPT import Chatbot&#xA;&#xA;async def main():&#xA;    bot = Chatbot()&#xA;    print(await bot.ask(prompt=&#34;Hello world&#34;))&#xA;    await bot.close()&#xA;&#xA;&#xA;if __name__ == &#34;__main__&#34;:&#xA;    asyncio.run(main())&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Work in progress&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Error handling&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#acheong08/EdgeGPT&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=acheong08/EdgeGPT&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute.&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/acheong08/EdgeGPT/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=acheong08/EdgeGPT&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>Morizeyao/GPT2-Chinese</title>
    <updated>2023-02-19T01:59:00Z</updated>
    <id>tag:github.com,2023-02-19:/Morizeyao/GPT2-Chinese</id>
    <link href="https://github.com/Morizeyao/GPT2-Chinese" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Chinese version of GPT2 training code, using BERT tokenizer.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GPT2-Chinese&lt;/h1&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chinese version of GPT2 training code, using BERT tokenizer or BPE tokenizer. It is based on the extremely awesome repository from HuggingFace team &lt;a href=&#34;https://github.com/huggingface/transformers&#34;&gt;Transformers&lt;/a&gt;. Can write poems, news, novels, or train general language models. Support char level, word level and BPE level. Support large training corpus.&lt;/li&gt; &#xA; &lt;li&gt;中文的GPT2训练代码，使用BERT的Tokenizer或Sentencepiece的BPE model（感谢&lt;a href=&#34;https://github.com/kangzhonghua&#34;&gt;kangzhonghua&lt;/a&gt;的贡献，实现BPE模式需要略微修改train.py的代码）。可以写诗，新闻，小说，或是训练通用语言模型。支持字为单位或是分词模式或是BPE模式（需要略微修改train.py的代码）。支持大语料训练。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;UPDATE 02.06.2021&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;本项目新增了&lt;a href=&#34;https://github.com/Morizeyao/GPT2-Chinese#%E6%A8%A1%E5%9E%8B%E5%88%86%E4%BA%AB&#34;&gt;通用中文GPT-2预训练模型&lt;/a&gt;、&lt;a href=&#34;https://github.com/Morizeyao/GPT2-Chinese#%E6%A8%A1%E5%9E%8B%E5%88%86%E4%BA%AB&#34;&gt;通用中文GPT-2预训练小模型&lt;/a&gt;、&lt;a href=&#34;https://github.com/Morizeyao/GPT2-Chinese#%E6%A8%A1%E5%9E%8B%E5%88%86%E4%BA%AB&#34;&gt;中文歌词GPT-2预训练模型&lt;/a&gt;和&lt;a href=&#34;https://github.com/Morizeyao/GPT2-Chinese#%E6%A8%A1%E5%9E%8B%E5%88%86%E4%BA%AB&#34;&gt;文言文GPT-2预训练模型&lt;/a&gt;。模型由UER-py项目训练得到，欢迎大家使用。 此外，模型上传到了Huggingface Model Hub中。更多模型的细节请参考&lt;a href=&#34;https://huggingface.co/uer/gpt2-chinese-cluecorpussmall&#34;&gt;gpt2-chinese-cluecorpussmall&lt;/a&gt;、&lt;a href=&#34;https://huggingface.co/uer/gpt2-distil-chinese-cluecorpussmall&#34;&gt;gpt2-distil-chinese-cluecorpussmall&lt;/a&gt;、&lt;a href=&#34;https://huggingface.co/uer/gpt2-chinese-lyric&#34;&gt;gpt2-chinese-lyric&lt;/a&gt;和&lt;a href=&#34;https://huggingface.co/uer/gpt2-chinese-ancient&#34;&gt;gpt2-chinese-ancient&lt;/a&gt;。&lt;/p&gt; &lt;p&gt;在使用所有模型进行生成时，需要在输入的文本前加入一个起始符，如：若要输入“最美的不是下雨天，是曾与你躲过雨的屋檐”，正确的格式为“[CLS]最美的不是下雨天，是曾与你躲过雨的屋檐”。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;UPDATE 11.03.2020&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;本项目新增了&lt;a href=&#34;https://github.com/Morizeyao/GPT2-Chinese#%E6%A8%A1%E5%9E%8B%E5%88%86%E4%BA%AB&#34;&gt;古诗词GPT-2预训练模型&lt;/a&gt;和&lt;a href=&#34;https://github.com/Morizeyao/GPT2-Chinese#%E6%A8%A1%E5%9E%8B%E5%88%86%E4%BA%AB&#34;&gt;对联GPT-2预训练模型&lt;/a&gt;。模型由UER-py项目训练得到，欢迎大家使用。 此外，模型上传到了Huggingface Model Hub中。更多模型的细节请参考&lt;a href=&#34;https://huggingface.co/uer/gpt2-chinese-poem&#34;&gt;gpt2-chinese-poem&lt;/a&gt;和&lt;a href=&#34;https://huggingface.co/uer/gpt2-chinese-couplet&#34;&gt;gpt2-chinese-couplet&lt;/a&gt;。&lt;/p&gt; &lt;p&gt;在使用古诗词模型进行生成时，需要在输入的文本前加入一个起始符，如：若要输入“梅山如积翠，”，正确的格式为“[CLS]梅山如积翠，”。&lt;/p&gt; &lt;p&gt;对联模型训练时使用的语料格式为“上联-下联”，在使用对联模型进行生成时，需要在输入的文本前加入一个起始符，如：若要输入“丹枫江冷人初去-”，正确的格式为“[CLS]丹枫江冷人初去-”。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;NEWS 08.11.2020&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thu-coai/CDial-GPT&#34;&gt;CDial-GPT&lt;/a&gt;(可用本代码载入)已发布。本项目包含一个经过严格清洗的大规模放开域中文对话数据集，本项目还包含在此数据集上训练的GPT对话预训练模型，以及生成样例，欢迎大家参观。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;NEWS 12.9.2019&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;新项目&lt;a href=&#34;https://github.com/yangjianxin1/GPT2-chitchat&#34;&gt;GPT2-chitchat&lt;/a&gt;已发布，部分基于本项目代码。包含训练GPT2对话模型的代码与与训练模型，以及生成样例，欢迎大家参观。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;NEWS 12.7.2019&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;新项目&lt;a href=&#34;https://github.com/Morizeyao/Decoders-Chinese-TF2.0&#34;&gt;Decoders-Chinese-TF2.0&lt;/a&gt;同样支持GPT2的中文训练，在使用上更加简单，不易产生各种问题。目前还在测试阶段，欢迎大家提出意见。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;NEWS 11.9&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/imcaspar/gpt2-ml&#34;&gt;GPT2-ML&lt;/a&gt;（与本项目无任何直接关联）已发布，包含1.5B中文GPT2模型。大家如有兴趣或需要可将其转换为本项目支持的Pytorch格式进行进一步训练或生成测试。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;UPDATE 10.25&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;本项目第一个预训练模型已公布，为散文生成模型，具体可查看README模型分享部分。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;项目状态&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;在本项目公布时，中文的GPT2资源几乎为零，而现在情况已有所不同。其次项目功能已经基本稳定，因此目前本项目暂已停止更新。我写下这些代码的初衷是练习Pytorch的使用，即使后期做了一些填坑工作，难免还是有很多不成熟的地方，也请谅解。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;使用方法&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;在项目根目录建立data文件夹。将训练语料以train.json为名放入data目录中。&lt;strong&gt;train.json里是一个json列表，列表的每个元素都分别是一篇要训练的文章的文本内容（而不是文件链接）&lt;/strong&gt;。&lt;/li&gt; &#xA; &lt;li&gt;运行train.py文件，勾选 --raw ，会自动预处理数据。&lt;/li&gt; &#xA; &lt;li&gt;预处理完成之后，会自动执行训练。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;生成文本&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python ./generate.py --length=50 --nsamples=4 --prefix=xxx --fast_pattern --save_samples --save_samples_path=/mnt/xx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;--fast_pattern&lt;/strong&gt; (由&lt;a href=&#34;https://github.com/LeeCP8&#34;&gt;LeeCP8&lt;/a&gt;贡献）：如果生成的length参数比较小，速度基本无差别，我个人测试length=250时，快了2秒，所以如果不添加--fast_pattern，那么默认不采用fast_pattern方式。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;--save_samples&lt;/strong&gt;：默认将输出样本直接打印到控制台，传递此参数，将保存在根目录下的&lt;strong&gt;samples.txt&lt;/strong&gt;。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;--save_samples_path&lt;/strong&gt;：可自行指定保存的目录，默认可递归创建多级目录，不可以传递文件名称，文件名称默认为&lt;strong&gt;samples.txt&lt;/strong&gt;。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;文件结构&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;generate.py 与 train.py 分别是生成与训练的脚本。&lt;/li&gt; &#xA; &lt;li&gt;train_single.py 是 train.py的延伸，可以用于一个很大的单独元素列表（如训练一本斗破苍穹书）。&lt;/li&gt; &#xA; &lt;li&gt;eval.py 用于评估生成模型的ppl分值。&lt;/li&gt; &#xA; &lt;li&gt;generate_texts.py 是 generate.py 的延伸，可以以一个列表的起始关键词分别生成若干个句子并输出到文件中。&lt;/li&gt; &#xA; &lt;li&gt;train.json 是训练样本的格式范例，可供参考。&lt;/li&gt; &#xA; &lt;li&gt;cache 文件夹内包含若干BERT词表，make_vocab.py 是一个协助在一个train.json语料文件上建立词表的脚本。 vocab.txt 是原始BERT词表， vocab_all.txt 额外添加了古文词， vocab_small.txt 是小词表。&lt;/li&gt; &#xA; &lt;li&gt;tokenizations 文件夹内是可以选用的三种tokenizer，包括默认的Bert Tokenizer，分词版Bert Tokenizer以及BPE Tokenizer。&lt;/li&gt; &#xA; &lt;li&gt;scripts 内包含了样例训练与生成脚本&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;注意&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;本项目使用Bert的tokenizer处理中文字符。&lt;/li&gt; &#xA; &lt;li&gt;如果不使用分词版的tokenizer，不需要自己事先分词，tokenizer会帮你分。&lt;/li&gt; &#xA; &lt;li&gt;如果使用分词版的tokenizer，最好先使用cache文件夹内的make_vocab.py文件建立针对你的语料的词表。&lt;/li&gt; &#xA; &lt;li&gt;模型需自行运算。各位如果完成了预训练的话欢迎进行交流。&lt;/li&gt; &#xA; &lt;li&gt;如果你的内存非常大或者语料较小的话，可以改掉train.py内build files内的对应代码，不做拆分直接预处理语料。&lt;/li&gt; &#xA; &lt;li&gt;若使用BPE Tokenizer，需自己建立中文词表&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;语料&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;可以从&lt;a href=&#34;https://github.com/brightmart/nlp_chinese_corpus&#34;&gt;这里&lt;/a&gt;与&lt;a href=&#34;http://thuctc.thunlp.org/#%E8%8E%B7%E5%8F%96%E9%93%BE%E6%8E%A5&#34;&gt;这里&lt;/a&gt;下载。&lt;/li&gt; &#xA; &lt;li&gt;斗破苍穹语料可以从&lt;a href=&#34;https://github.com/GaoPeng97/transformer-xl-chinese/tree/master/data/doupo&#34;&gt;这里&lt;/a&gt;下载。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FP16与Gradient Accumulation支持&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;我在train.py文件中加入了fp16与gradient accumulation支持，如果你安装了apex并且知道fp16是什么的话，可以修改变量fp16=True来启用。但是目前fp16可能不收敛，原因不明。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;联系作者&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mail：&lt;a href=&#34;mailto:ned1991@gmail.com&#34;&gt;ned1991@gmail.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{GPT2-Chinese,&#xA;  author = {Zeyao Du},&#xA;  title = {GPT2-Chinese: Tools for training GPT2 model in Chinese language},&#xA;  year = {2019},&#xA;  publisher = {GitHub},&#xA;  journal = {GitHub repository},&#xA;  howpublished = {\url{https://github.com/Morizeyao/GPT2-Chinese}},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;模型分享&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;模型名称&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;模型介绍&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;分享者&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;链接地址1&lt;/th&gt; &#xA;   &lt;th&gt;链接地址2&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;散文模型&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;使用130MB的名家散文、情感散文和散文诗歌训练所得 。&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hughqiu&#34; title=&#34;hughqiu&#34;&gt;hughqiu&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1nbrW5iw34GRhoTin8uU2tQ&#34;&gt;百度网盘【fpyu】&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://drive.google.com/drive/folders/1rJC4niJKMVwixUQkuL9k5teLRnEYTmUf?usp=sharing&#34; title=&#34;GDrive&#34;&gt;GDrive&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;诗词模型&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;使用180MB的约80万首古诗词训练所得。&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hhou435&#34;&gt;hhou435&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1Hy0OQ5xZcTLer9MQZW8o3g&#34;&gt;百度网盘【7fev】&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://drive.google.com/drive/folders/1Z6nF1nrgTkrZcRLHedQHXb4_M9I7yQPN?usp=sharing&#34;&gt;GDrive&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;对联模型&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;使用40MB的约70万条对联训练所得。&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hhou435&#34;&gt;hhou435&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1j9yVQwjlXZq58wOyXK4lcg&#34;&gt;百度网盘【i5n0】&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://drive.google.com/drive/folders/1ZnsvS7oHRVueNKj_SeEhiQt86aze3ojj?usp=sharing&#34;&gt;GDrive&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;通用中文模型&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;使用&lt;a href=&#34;https://github.com/CLUEbenchmark/CLUECorpus2020/&#34;&gt;CLUECorpusSmall&lt;/a&gt;语料训练所得。&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hhou435&#34;&gt;hhou435&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/16x0hfBCekWju75xPeyyRfA&#34;&gt;百度网盘【n3s8】&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://drive.google.com/drive/folders/1dLEANs5z4pWS0pzrak6Q2H2Nq4iYsMsf?usp=sharing&#34;&gt;GDrive&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;通用中文小模型&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;使用&lt;a href=&#34;https://github.com/CLUEbenchmark/CLUECorpus2020/&#34;&gt;CLUECorpusSmall&lt;/a&gt;语料训练所得。&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hhou435&#34;&gt;hhou435&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1AiSm2GWhbGNxvhrcUlDXNA&#34;&gt;百度网盘【rpjk】&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://drive.google.com/drive/folders/1eerX1N8n_eFlnQ4xpxZ4iU2-Mx83pXFp?usp=sharing&#34;&gt;GDrive&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;中文歌词模型&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;使用140MB的约15万首中文歌词训练所得。&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hhou435&#34;&gt;hhou435&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/19x0d0bPGCWHi9L4Pu0pSiw&#34;&gt;百度网盘【0qnn】&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://drive.google.com/drive/folders/1RFq4NoQ3phCJjrhKtu2Xbn6z0krcN9TM?usp=sharing&#34;&gt;GDrive&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;文言文模型&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;使用1.8GB的约300万篇文言文训练所得。&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hhou435&#34;&gt;hhou435&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1X3Um9HketnlGYZubY9gnew&#34;&gt;百度网盘【ek2z】&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://drive.google.com/drive/folders/1dtHTRn3fX7g8cPCCaJEXA2tmrIcImR6t?usp=sharing&#34;&gt;GDrive&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;此处为热情大方的git友训练所得的模型文件，公开给所有朋友使用，同时也欢迎各位伙伴将自己训练完毕的模型公开于此处。&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;由用户&lt;a href=&#34;https://github.com/JamesHujy&#34;&gt;JamesHujy&lt;/a&gt;根据本仓库改版代码训练得到的模型作为律诗与绝句后台，新版&lt;a href=&#34;https://jiuge.thunlp.cn/lvshi.html&#34;&gt;九歌诗歌生成器&lt;/a&gt;已经上线。&lt;/li&gt; &#xA; &lt;li&gt;由&lt;a href=&#34;https://github.com/leemengtaiwan&#34;&gt;leemengtaiwan&lt;/a&gt;贡献，提供&lt;a href=&#34;https://leemeng.tw/gpt2-language-model-generate-chinese-jing-yong-novels.html&#34;&gt;文章直觀介紹 GPT-2 以及如何視覺化自注意力機制&lt;/a&gt;。另提供 &lt;a href=&#34;https://colab.research.google.com/drive/1MaT8-HUHfZkdCra0OqZEIr0IFCq0MJBx&#34;&gt;Colab 筆記本與模型&lt;/a&gt;供任何使用者一鍵生成新樣例。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;生成样例&lt;/h2&gt; &#xA;&lt;p&gt;-以下为文学散文的生成样例，由&lt;a href=&#34;https://github.com/hughqiu&#34; title=&#34;hughqiu&#34;&gt;hughqiu&lt;/a&gt;贡献，模型已经分享于模型分享列表。语料130MB，Batch size 16，10层深度下训练10轮所得。 &lt;img src=&#34;https://raw.githubusercontent.com/Morizeyao/GPT2-Chinese/old_gpt_2_chinese_before_2021_4_22/sample/%E6%95%A3%E6%96%871.png&#34; alt=&#34;avatar&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Morizeyao/GPT2-Chinese/old_gpt_2_chinese_before_2021_4_22/sample/%E6%95%A3%E6%96%872.png&#34; alt=&#34;avatar&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Morizeyao/GPT2-Chinese/old_gpt_2_chinese_before_2021_4_22/sample/%E6%95%A3%E6%96%873.png&#34; alt=&#34;avatar&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;下为斗破苍穹的生成样例，使用约50M参数的GPT2以32Batch Size在16MB斗破苍穹小说内容上训练得到。此处[SEP]表示换行。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Morizeyao/GPT2-Chinese/old_gpt_2_chinese_before_2021_4_22/sample/doupo.jpeg&#34; alt=&#34;avatar&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;下为古诗词的生成样例，由用户&lt;a href=&#34;https://github.com/JamesHujy&#34;&gt;JamesHujy&lt;/a&gt;运算并贡献。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Morizeyao/GPT2-Chinese/old_gpt_2_chinese_before_2021_4_22/sample/poem_1.png&#34; alt=&#34;avatar&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Morizeyao/GPT2-Chinese/old_gpt_2_chinese_before_2021_4_22/sample/poem_2.png&#34; alt=&#34;avatar&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;下为古诗限定了生成体裁后的生成样例，由用户&lt;a href=&#34;https://github.com/JamesHujy&#34;&gt;JamesHujy&lt;/a&gt;运算并贡献。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Morizeyao/GPT2-Chinese/old_gpt_2_chinese_before_2021_4_22/sample/%E5%BE%8B%E8%AF%97%E7%BB%9D%E5%8F%A5.png&#34; alt=&#34;avatar&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Morizeyao/GPT2-Chinese/old_gpt_2_chinese_before_2021_4_22/sample/%E6%B5%A3%E6%BA%AA%E6%B2%99_%E6%B1%9F%E5%9F%8E%E5%AD%90.png&#34; alt=&#34;avatar&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Morizeyao/GPT2-Chinese/old_gpt_2_chinese_before_2021_4_22/sample/%E8%9D%B6%E6%81%8B%E8%8A%B1_%E6%BB%A1%E6%B1%9F%E7%BA%A2.png&#34; alt=&#34;avatar&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;下为生成剧本的样例文本，由用户&lt;a href=&#34;https://github.com/chiangandy&#34;&gt;chiangandy&lt;/a&gt;运算并贡献&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[starttext]爱情游戏剧情讲述了钢琴父女明致怀萌的爱情、个有着努力的热情以及现实为人生的价值观众，获得一系列爱情的故事。80后录股媒体受到网友分享，是2014年主创陈拉昀出品牌总监于蓝氏集团化验师创业团门的哥哥大国度上海淮河畔，集入第一线公司青年度虽然没有放到的事业，但是蓝正是却不到位主人拒绝了解，而在蓝越的帮助理念出现，也因此开启明朗的误会而经营变成爱河。在一次偶然的编剧集电视剧之夏天上一改变了自命运环球顶樑，三人在创车祸中不知被记忆差网识分到创作，并被问流言败，以及行业服务所有的低调教同才力，陈昭和唐诗诗妍展开了一段截然不同的“2014年间段感情”，两人性格互相治癒的商业奋斗故事，尽管是共90后北京华侨大学录的一个宿舍小旅程和唐如、生等优秀青年，的人生活如何与愿违3个国偶像，并且共同创作何以此他们互相有观众的成功和关心吗?[endtext]&lt;/p&gt; &#xA;&lt;p&gt;[starttext]学习爱情主要讲述了两对方小曼，经过啼笑皆非的考验，终于选择了三个孩子，携手共同创业来四个孩子，在大城市里创业的成功商。两家内事业的加入了北京城市，经过了一次元城市融风雨故、差异后得到异的他们，最终收获了梦想的真正属于自己的爱情。赞助理想、电视剧、剧等主创业时代人物特点在北京举行开机仪式，该剧以当下海南三个新人青年轻人面人海南梅竹马的电视角，讲述了几个在北京、喜剧代人生活中增强非浪漫的年轻人，以独特的双时代年轻人从来到北京城市化中国大城市走出发展以海南方的变迁在语种城市闯关于人生态的同时，以及他们渐渐的生活方式为自己方向上演了那么简单俗，是当代际拍摄的就如何在这个城市里都市里?那么平静的城市就是城市的风格特张嘉和支持工作打造，而这是一点就要打造出机场话剧组会。化身处处棋逢貌各种文化的人都非常独特的煽情，交织了相，滑稽等来自外衣的东北漂亮、内地，者和两位女孩子敢称是哑女孩子。交织里的人齐飞一开泰块玩笑，令人印象太趋的气质，让人眼看这个性格非常喜剧，知道的是一个“东北漂”人的外国小养家，让她耳熟练读剧的外形象显老大。之后齐飞、表示爱朗的齐飞、范儿、楚月子、白天杰。两代人的生活里友情似乎没有结合、精彩表态的开朗和丽丽丽。[endtext]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;下為金庸武俠小說的生成樣例，由&lt;a href=&#34;https://github.com/leemengtaiwan&#34;&gt;leemengtaiwan&lt;/a&gt;贡献。模型大小約 82M，語料 50 MB，Batch size 16。提供&lt;a href=&#34;https://leemeng.tw/gpt2-language-model-generate-chinese-jing-yong-novels.html&#34;&gt;文章直觀介紹 GPT-2 以及如何視覺化自注意力機制&lt;/a&gt;。另提供 &lt;a href=&#34;https://colab.research.google.com/drive/1MaT8-HUHfZkdCra0OqZEIr0IFCq0MJBx&#34;&gt;Colab 筆記本與模型&lt;/a&gt;供任何使用者一鍵生成新樣例。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Morizeyao/GPT2-Chinese/old_gpt_2_chinese_before_2021_4_22/sample/%E9%87%91%E5%BA%B8_%E5%A4%A9%E9%BE%8D%E5%85%AB%E9%83%A8.jpg&#34; alt=&#34;avatar&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Morizeyao/GPT2-Chinese/old_gpt_2_chinese_before_2021_4_22/sample/%E9%87%91%E5%BA%B8_%E5%80%9A%E5%A4%A9%E5%B1%A0%E9%BE%8D%E8%A8%98.jpg&#34; alt=&#34;avatar&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Morizeyao/GPT2-Chinese/old_gpt_2_chinese_before_2021_4_22/sample/%E9%87%91%E5%BA%B8_%E9%B9%BF%E9%BC%8E%E8%A8%98.jpg&#34; alt=&#34;avatar&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Morizeyao/GPT2-Chinese/old_gpt_2_chinese_before_2021_4_22/sample/%E9%87%91%E5%BA%B8_%E7%A5%9E%E9%B5%B0%E4%BF%A0%E4%BE%B6.jpg&#34; alt=&#34;avatar&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>