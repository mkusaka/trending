<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-30T01:55:29Z</updated>
  <subtitle>Weekly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ocrmypdf/OCRmyPDF</title>
    <updated>2025-03-30T01:55:29Z</updated>
    <id>tag:github.com,2025-03-30:/ocrmypdf/OCRmyPDF</id>
    <link href="https://github.com/ocrmypdf/OCRmyPDF" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OCRmyPDF adds an OCR text layer to scanned PDF files, allowing them to be searched&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ocrmypdf/OCRmyPDF/main/docs/images/logo.svg?sanitize=true&#34; width=&#34;240&#34; alt=&#34;OCRmyPDF&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ocrmypdf/OCRmyPDF/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/ocrmypdf/OCRmyPDF/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/ocrmypdf/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/ocrmypdf.svg?sanitize=true&#34; alt=&#34;PyPI version&#34; title=&#34;PyPI version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/homebrew/v/ocrmypdf.svg?sanitize=true&#34; alt=&#34;Homebrew version&#34; title=&#34;Homebrew version&#34;&gt; &lt;img src=&#34;https://readthedocs.org/projects/ocrmypdf/badge/?version=latest&#34; alt=&#34;ReadTheDocs&#34; title=&#34;RTD&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/pyversions/ocrmypdf&#34; alt=&#34;Python versions&#34; title=&#34;Supported Python versions&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;OCRmyPDF adds an OCR text layer to scanned PDF files, allowing them to be searched or copy-pasted.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ocrmypdf                      # it&#39;s a scriptable command line program&#xA;   -l eng+fra                 # it supports multiple languages&#xA;   --rotate-pages             # it can fix pages that are misrotated&#xA;   --deskew                   # it can deskew crooked PDFs!&#xA;   --title &#34;My PDF&#34;           # it can change output metadata&#xA;   --jobs 4                   # it uses multiple cores by default&#xA;   --output-type pdfa         # it produces PDF/A by default&#xA;   input_scanned.pdf          # takes PDF input (or images)&#xA;   output_searchable.pdf      # produces validated PDF output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ocrmypdf.readthedocs.io/en/latest/release_notes.html&#34;&gt;See the release notes for details on the latest changes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Main features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generates a searchable &lt;a href=&#34;https://en.wikipedia.org/?title=PDF/A&#34;&gt;PDF/A&lt;/a&gt; file from a regular PDF&lt;/li&gt; &#xA; &lt;li&gt;Places OCR text accurately below the image to ease copy / paste&lt;/li&gt; &#xA; &lt;li&gt;Keeps the exact resolution of the original embedded images&lt;/li&gt; &#xA; &lt;li&gt;When possible, inserts OCR information as a &#34;lossless&#34; operation without disrupting any other content&lt;/li&gt; &#xA; &lt;li&gt;Optimizes PDF images, often producing files smaller than the input file&lt;/li&gt; &#xA; &lt;li&gt;If requested, deskews and/or cleans the image before performing OCR&lt;/li&gt; &#xA; &lt;li&gt;Validates input and output files&lt;/li&gt; &#xA; &lt;li&gt;Distributes work across all available CPU cores&lt;/li&gt; &#xA; &lt;li&gt;Uses &lt;a href=&#34;https://github.com/tesseract-ocr/tesseract&#34;&gt;Tesseract OCR&lt;/a&gt; engine to recognize more than &lt;a href=&#34;https://github.com/tesseract-ocr/tessdata&#34;&gt;100 languages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Keeps your private data private.&lt;/li&gt; &#xA; &lt;li&gt;Scales properly to handle files with thousands of pages.&lt;/li&gt; &#xA; &lt;li&gt;Battle-tested on millions of PDFs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/ocrmypdf/OCRmyPDF/main/misc/screencast/demo.svg?sanitize=true&#34; alt=&#34;Demo of OCRmyPDF in a terminal session&#34;&gt; &#xA;&lt;p&gt;For details: please consult the &lt;a href=&#34;https://ocrmypdf.readthedocs.io/en/latest/&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;I searched the web for a free command line tool to OCR PDF files: I found many, but none of them were really satisfying:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Either they produced PDF files with misplaced text under the image (making copy/paste impossible)&lt;/li&gt; &#xA; &lt;li&gt;Or they did not handle accents and multilingual characters&lt;/li&gt; &#xA; &lt;li&gt;Or they changed the resolution of the embedded images&lt;/li&gt; &#xA; &lt;li&gt;Or they generated ridiculously large PDF files&lt;/li&gt; &#xA; &lt;li&gt;Or they crashed when trying to OCR&lt;/li&gt; &#xA; &lt;li&gt;Or they did not produce valid PDF files&lt;/li&gt; &#xA; &lt;li&gt;On top of that none of them produced PDF/A files (format dedicated for long time storage)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;...so I decided to develop my own tool.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Linux, Windows, macOS and FreeBSD are supported. Docker images are also available, for both x64 and ARM.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Operating system&lt;/th&gt; &#xA;   &lt;th&gt;Install command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Debian, Ubuntu&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;apt install ocrmypdf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows Subsystem for Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;apt install ocrmypdf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fedora&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dnf install ocrmypdf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS (Homebrew)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;brew install ocrmypdf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS (MacPorts)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;port install ocrmypdf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS (nix)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nix-env -i ocrmypdf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinuxBrew&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;brew install ocrmypdf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FreeBSD&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pkg install py-ocrmypdf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ubuntu Snap&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;snap install ocrmypdf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For everyone else, &lt;a href=&#34;https://ocrmypdf.readthedocs.io/en/latest/installation.html&#34;&gt;see our documentation&lt;/a&gt; for installation steps.&lt;/p&gt; &#xA;&lt;h2&gt;Languages&lt;/h2&gt; &#xA;&lt;p&gt;OCRmyPDF uses Tesseract for OCR, and relies on its language packs. For Linux users, you can often find packages that provide language packs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Display a list of all Tesseract language packs&#xA;apt-cache search tesseract-ocr&#xA;&#xA;# Debian/Ubuntu users&#xA;apt-get install tesseract-ocr-chi-sim  # Example: Install Chinese Simplified language pack&#xA;&#xA;# Arch Linux users&#xA;pacman -S tesseract-data-eng tesseract-data-deu # Example: Install the English and German language packs&#xA;&#xA;# brew macOS users&#xA;brew install tesseract-lang&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then pass the &lt;code&gt;-l LANG&lt;/code&gt; argument to OCRmyPDF to give a hint as to what languages it should search for. Multiple languages can be requested.&lt;/p&gt; &#xA;&lt;p&gt;OCRmyPDF supports Tesseract 4.1.1+. It will automatically use whichever version it finds first on the &lt;code&gt;PATH&lt;/code&gt; environment variable. On Windows, if &lt;code&gt;PATH&lt;/code&gt; does not provide a Tesseract binary, we use the highest version number that is installed according to the Windows Registry.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation and support&lt;/h2&gt; &#xA;&lt;p&gt;Once OCRmyPDF is installed, the built-in help which explains the command syntax and options can be accessed via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ocrmypdf --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Our &lt;a href=&#34;https://ocrmypdf.readthedocs.io/en/latest/index.html&#34;&gt;documentation is served on Read the Docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please report issues on our &lt;a href=&#34;https://github.com/ocrmypdf/OCRmyPDF/issues&#34;&gt;GitHub issues&lt;/a&gt; page, and follow the issue template for quick response.&lt;/p&gt; &#xA;&lt;h2&gt;Feature demo&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Add an OCR layer and convert to PDF/A&#xA;ocrmypdf input.pdf output.pdf&#xA;&#xA;# Convert an image to single page PDF&#xA;ocrmypdf input.jpg output.pdf&#xA;&#xA;# Add OCR to a file in place (only modifies file on success)&#xA;ocrmypdf myfile.pdf myfile.pdf&#xA;&#xA;# OCR with non-English languages (look up your language&#39;s ISO 639-3 code)&#xA;ocrmypdf -l fra LeParisien.pdf LeParisien.pdf&#xA;&#xA;# OCR multilingual documents&#xA;ocrmypdf -l eng+fra Bilingual-English-French.pdf Bilingual-English-French.pdf&#xA;&#xA;# Deskew (straighten crooked pages)&#xA;ocrmypdf --deskew input.pdf output.pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more features, see the &lt;a href=&#34;https://ocrmypdf.readthedocs.io/en/latest/index.html&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;In addition to the required Python version, OCRmyPDF requires external program installations of Ghostscript and Tesseract OCR. OCRmyPDF is pure Python, and runs on pretty much everything: Linux, macOS, Windows and FreeBSD.&lt;/p&gt; &#xA;&lt;h2&gt;Press &amp;amp; Media&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@ikirichenko/going-paperless-with-ocrmypdf-e2f36143f46a&#34;&gt;Going paperless with OCRmyPDF&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@treyharris/converting-a-scanned-document-into-a-compressed-searchable-pdf-with-redactions-63f61c34fe4c&#34;&gt;Converting a scanned document into a compressed searchable PDF with redactions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://heise.de/-2279695&#34;&gt;c&#39;t 1-2014, page 59&lt;/a&gt;: Detailed presentation of OCRmyPDF v1.0 in the leading German IT magazine c&#39;t&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://heise.de/-2356670&#34;&gt;heise Open Source, 09/2014: Texterkennung mit OCRmyPDF&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.heise.de/ratgeber/Durchsuchbare-PDF-Dokumente-mit-OCRmyPDF-erstellen-4607592.html&#34;&gt;heise Durchsuchbare PDF-Dokumente mit OCRmyPDF erstellen&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.linuxlinks.com/excellent-utilities-ocrmypdf-add-ocr-text-layer-scanned-pdfs/&#34;&gt;Excellent Utilities: OCRmyPDF&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.linux-community.de/ausgaben/linuxuser/2021/06/texterkennung-mit-ocrmypdf-und-scanbd-automatisieren/&#34;&gt;LinuxUser Texterkennung mit OCRmyPDF und Scanbd automatisieren&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=32028752&#34;&gt;Y Combinator discussion&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Business enquiries&lt;/h2&gt; &#xA;&lt;p&gt;OCRmyPDF would not be the software that it is today without companies and users choosing to provide support for feature development and consulting enquiries. We are happy to discuss all enquiries, whether for extending the existing feature set, or integrating OCRmyPDF into a larger system.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The OCRmyPDF software is licensed under the Mozilla Public License 2.0 (MPL-2.0). This license permits integration of OCRmyPDF with other code, included commercial and closed source, but asks you to publish source-level modifications you make to OCRmyPDF.&lt;/p&gt; &#xA;&lt;p&gt;Some components of OCRmyPDF have other licenses, as indicated by standard SPDX license identifiers or the DEP5 copyright and licensing information file. Generally speaking, non-core code is licensed under MIT, and the documentation and test files are licensed under Creative Commons ShareAlike 4.0 (CC-BY-SA 4.0).&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;The software is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>subframe7536/maple-font</title>
    <updated>2025-03-30T01:55:29Z</updated>
    <id>tag:github.com,2025-03-30:/subframe7536/maple-font</id>
    <link href="https://github.com/subframe7536/maple-font" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Maple Mono: Open source monospace font with round corner, ligatures and Nerd-Font for IDE and terminal, fine-grained customization options. 带连字和控制台图标的圆角等宽字体，中英文宽度完美2:1，细粒度的自定义选项&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/resources/header.png&#34; alt=&#34;Cover&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;GitHub Repo stars&#34; src=&#34;https://img.shields.io/github/stars/subframe7536/maple-font&#34;&gt; &lt;img alt=&#34;GitHub Downloads (all assets, all releases)&#34; src=&#34;https://img.shields.io/github/downloads/subframe7536/maple-font/total&#34;&gt; &lt;img alt=&#34;GitHub Release&#34; src=&#34;https://img.shields.io/github/v/release/subframe7536/maple-font&#34;&gt; &lt;img alt=&#34;X (formerly Twitter) Follow&#34; src=&#34;https://img.shields.io/twitter/follow/subframe7536&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/#download&#34;&gt;Download&lt;/a&gt; | &lt;a href=&#34;https://font.subf.dev&#34;&gt;Website&lt;/a&gt; | English | &lt;a href=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/README_CN.md&#34;&gt;中文&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/README_JA.md&#34;&gt;日本語&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Maple Mono&lt;/h1&gt; &#xA;&lt;p&gt;Maple Mono is an open source monospace font focused on smoothing your coding flow.&lt;/p&gt; &#xA;&lt;p&gt;I create it to enhance my working experience, and hope that it can be useful to others.&lt;/p&gt; &#xA;&lt;p&gt;V7 is a completely remade version, providing variable font format and source files of font project, redesigning more than half of the glyphs and offering smarter ligatures. You can checkout V6 &lt;a href=&#34;https://github.com/subframe7536/maple-font/tree/main&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;✨ Variable - Infinity font weights with fine-grained italic glyphs.&lt;/li&gt; &#xA; &lt;li&gt;☁️ Smooth - Round corner, brand-new glyph of &lt;code&gt;@ $ % &amp;amp; Q -&amp;gt;&lt;/code&gt; and cursive &lt;code&gt;f i j k l x y&lt;/code&gt; in italic style.&lt;/li&gt; &#xA; &lt;li&gt;💪 Useful - Large amount of smart ligatures, see in &lt;a href=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/source/features/README.md&#34;&gt;&lt;code&gt;features/&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎨 Icon - First-Class &lt;a href=&#34;https://github.com/ryanoasis/nerd-fonts&#34;&gt;Nerd-Font&lt;/a&gt; support, make your terminal more vivid.&lt;/li&gt; &#xA; &lt;li&gt;🔨 Customize - Enable or disable font features as you want, just make your own font.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Simpified Chinese, Traditional Chinese and Japanese&lt;/h3&gt; &#xA;&lt;p&gt;CN version based on &lt;a href=&#34;https://github.com/CyanoHao/Resource-Han-Rounded&#34;&gt;Resource Han Rounded&lt;/a&gt; provides complete character set support for Chinese development environments, including Simplified Chinese, Traditional Chinese, and Japanese. Meanwhile, the characteristic of perfect 2:1 alignment between Chinese and English allows this font to achieve a neat, uniform, beautiful, and comfortable appearance in scenarios such as multilingual display and Markdown tables. However, the spacing of Chinese characters is larger compared to other popular Chinese fonts. See details in &lt;a href=&#34;https://github.com/subframe7536/maple-font/releases/tag/cn-base&#34;&gt;release notes&lt;/a&gt; and &lt;a href=&#34;https://github.com/subframe7536/maple-font/issues/211&#34;&gt;this issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/resources/2-1.png&#34; alt=&#34;2-1.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ScreenShots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/resources/showcase.png&#34; alt=&#34;showcase.png&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pictured by &lt;a href=&#34;https://github.com/subframe7536/vscode-codeimg&#34;&gt;CodeImg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Theme: &lt;a href=&#34;https://github.com/subframe7536/vscode-theme-maple&#34;&gt;Maple&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Config: font size 16px, line height 1.8, default letter spacing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;You can download all the font archives from &lt;a href=&#34;https://github.com/subframe7536/maple-font/releases&#34;&gt;Releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Scoop (Windows)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Add bucket&#xA;scoop bucket add nerd-fonts&#xA;# Maple Mono (ttf format)&#xA;scoop install Maple-Mono&#xA;# Maple Mono NF&#xA;scoop install Maple-Mono-NF&#xA;# Maple Mono NF CN&#xA;scoop install Maple-Mono-NF-CN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;All packages (Click to expand)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Add bucket&#xA;scoop bucket add nerd-fonts&#xA;# Maple Mono (ttf format)&#xA;scoop install Maple-Mono&#xA;# Maple Mono (hinted ttf format)&#xA;scoop install Maple-Mono-autohint&#xA;# Maple Mono (otf format)&#xA;scoop install Maple-Mono-otf&#xA;# Maple Mono NF&#xA;scoop install Maple-Mono-NF&#xA;# Maple Mono NF CN&#xA;scoop install Maple-Mono-NF-CN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Homebrew (MacOS, Linux)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Maple Mono&#xA;brew install --cask font-maple-mono&#xA;# Maple Mono NF&#xA;brew install --cask font-maple-mono-nf&#xA;# Maple Mono NF CN&#xA;brew install --cask font-maple-mono-nf-cn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;All packages (Click to expand)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Maple Mono&#xA;brew install --cask font-maple-mono&#xA;# Maple Mono NF&#xA;brew install --cask font-maple-mono-nf&#xA;# Maple Mono CN&#xA;brew install --cask font-maple-mono-cn&#xA;# Maple Mono NF CN&#xA;brew install --cask font-maple-mono-nf-cn&#xA;&#xA;# Maple Mono Normal&#xA;brew install --cask font-maple-mono-normal&#xA;# Maple Mono Normal NF&#xA;brew install --cask font-maple-mono-normal-nf&#xA;# Maple Mono Normal CN&#xA;brew install --cask font-maple-mono-normal-cn&#xA;# Maple Mono Normal NF CN&#xA;brew install --cask font-maple-mono-normal-nf-cn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Arch Linux&lt;/h3&gt; &#xA;&lt;p&gt;ArchLinuxCN repository allows downloading a single package zip file without downloading all the package zip files in pkgbase, but AUR does not. (If you have a good solution, please contact Cyberczy(&lt;a href=&#34;mailto:czysheep@gmail.com&#34;&gt;czysheep@gmail.com&lt;/a&gt;))&lt;/p&gt; &#xA;&lt;h4&gt;ArchLinuxCN (Recommended)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Maple Mono (Ligature TTF unhinted)&#xA;paru -S ttf-maplemono&#xA;# Maple Mono NF (Ligature unhinted)&#xA;paru -S ttf-maplemono-nf-unhinted&#xA;# Maple Mono NF CN (Ligature unhinted)&#xA;paru -S ttf-maplemono-nf-cn-unhinted&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;All packages (Click to expand)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Maple Mono (Ligature Variable)&#xA;paru -S ttf-maplemono-variable&#xA;# Maple Mono (Ligature TTF hinted)&#xA;paru -S ttf-maplemono-autohint&#xA;# Maple Mono (Ligature TTF unhinted)&#xA;paru -S ttf-maplemono&#xA;# Maple Mono (Ligature OTF)&#xA;paru -S otf-maplemono&#xA;# Maple Mono (Ligature WOFF2)&#xA;paru -S woff2-maplemono&#xA;# Maple Mono NF (Ligature hinted)&#xA;paru -S ttf-maplemono-nf&#xA;# Maple Mono NF (Ligature unhinted)&#xA;paru -S ttf-maplemono-nf-unhinted&#xA;# Maple Mono CN (Ligature hinted)&#xA;paru -S ttf-maplemono-cn&#xA;# Maple Mono CN (Ligature unhinted)&#xA;paru -S ttf-maplemono-cn-unhinted&#xA;# Maple Mono NF CN (Ligature hinted)&#xA;paru -S ttf-maplemono-nf-cn&#xA;# Maple Mono NF CN (Ligature unhinted)&#xA;paru -S ttf-maplemono-nf-cn-unhinted&#xA;&#xA;# Maple Mono (No-Ligature Variable)&#xA;paru -S ttf-maplemononl-variable&#xA;# Maple Mono (No-Ligature TTF hinted)&#xA;paru -S ttf-maplemononl-autohint&#xA;# Maple Mono (No-Ligature TTF unhinted)&#xA;paru -S ttf-maplemononl&#xA;# Maple Mono (No-Ligature OTF)&#xA;paru -S otf-maplemononl&#xA;# Maple Mono (No-Ligature WOFF2)&#xA;paru -S woff2-maplemononl&#xA;# Maple Mono NF (No-Ligature hinted)&#xA;paru -S ttf-maplemononl-nf&#xA;# Maple Mono NF (No-Ligature unhinted)&#xA;paru -S ttf-maplemononl-nf-unhinted&#xA;# Maple Mono CN (No-Ligature hinted)&#xA;paru -S ttf-maplemononl-cn&#xA;# Maple Mono CN (No-Ligature unhinted)&#xA;paru -S ttf-maplemononl-cn-unhinted&#xA;# Maple Mono NF CN (No-Ligature hinted)&#xA;paru -S ttf-maplemononl-nf-cn&#xA;# Maple Mono NF CN (No-Ligature unhinted)&#xA;paru -S ttf-maplemononl-nf-cn-unhinted&#xA;&#xA;# Maple Mono Normal (Ligature Variable)&#xA;paru -S ttf-maplemononormal-variable&#xA;# Maple Mono Normal (Ligature TTF hinted)&#xA;paru -S ttf-maplemononormal-autohint&#xA;# Maple Mono Normal (Ligature TTF unhinted)&#xA;paru -S ttf-maplemononormal&#xA;# Maple Mono Normal (Ligature OTF)&#xA;paru -S otf-maplemononormal&#xA;# Maple Mono Normal (Ligature WOFF2)&#xA;paru -S woff2-maplemononormal&#xA;# Maple Mono Normal NF (Ligature hinted)&#xA;paru -S ttf-maplemononormal-nf&#xA;# Maple Mono Normal NF (Ligature unhinted)&#xA;paru -S ttf-maplemononormal-nf-unhinted&#xA;# Maple Mono Normal CN (Ligature hinted)&#xA;paru -S ttf-maplemononormal-cn&#xA;# Maple Mono Normal CN (Ligature unhinted)&#xA;paru -S ttf-maplemononormal-cn-unhinted&#xA;# Maple Mono Normal NF CN (Ligature hinted)&#xA;paru -S ttf-maplemononormal-nf-cn&#xA;# Maple Mono Normal NF CN (Ligature unhinted)&#xA;paru -S ttf-maplemononormal-nf-cn-unhinted&#xA;&#xA;# Maple Mono Normal (No-Ligature Variable)&#xA;paru -S ttf-maplemononormalnl-variable&#xA;# Maple Mono Normal (No-Ligature TTF hinted)&#xA;paru -S ttf-maplemononormalnl-autohint&#xA;# Maple Mono Normal (No-Ligature TTF unhinted)&#xA;paru -S ttf-maplemononormalnl&#xA;# Maple Mono Normal (No-Ligature OTF)&#xA;paru -S otf-maplemononormalnl&#xA;# Maple Mono Normal (No-Ligature WOFF2)&#xA;paru -S woff2-maplemononormalnl&#xA;# Maple Mono Normal NF (No-Ligature hinted)&#xA;paru -S ttf-maplemononormalnl-nf&#xA;# Maple Mono Normal NF (No-Ligature unhinted)&#xA;paru -S ttf-maplemononormalnl-nf-unhinted&#xA;# Maple Mono Normal CN (No-Ligature hinted)&#xA;paru -S ttf-maplemononormalnl-cn&#xA;# Maple Mono Normal CN (No-Ligature unhinted)&#xA;paru -S ttf-maplemononormalnl-cn-unhinted&#xA;# Maple Mono Normal NF CN (No-Ligature hinted)&#xA;paru -S ttf-maplemononormalnl-nf-cn&#xA;# Maple Mono Normal NF CN (No-Ligature unhinted)&#xA;paru -S ttf-maplemononormalnl-nf-cn-unhinted&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;AUR (Not Recommended)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Maple Mono (Ligature TTF unhinted)&#xA;paru -S maplemono-ttf&#xA;# Maple Mono NF (Ligature unhinted)&#xA;paru -S maplemono-nf-unhinted&#xA;# Maple Mono NF CN (Ligature unhinted)&#xA;paru -S maplemono-nf-cn-unhinted&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;All packages (Click to expand)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Maple Mono (Ligature Variable)&#xA;paru -S maplemono-variable&#xA;# Maple Mono (Ligature TTF hinted)&#xA;paru -S maplemono-ttf-autohint&#xA;# Maple Mono (Ligature TTF unhinted)&#xA;paru -S maplemono-ttf&#xA;# Maple Mono (Ligature OTF)&#xA;paru -S maplemono-otf&#xA;# Maple Mono (Ligature WOFF2)&#xA;paru -S maplemono-woff2&#xA;# Maple Mono NF (Ligature hinted)&#xA;paru -S maplemono-nf&#xA;# Maple Mono NF (Ligature unhinted)&#xA;paru -S maplemono-nf-unhinted&#xA;# Maple Mono CN (Ligature hinted)&#xA;paru -S maplemono-cn&#xA;# Maple Mono CN (Ligature unhinted)&#xA;paru -S maplemono-cn-unhinted&#xA;# Maple Mono NF CN (Ligature hinted)&#xA;paru -S maplemono-nf-cn&#xA;# Maple Mono NF CN (Ligature unhinted)&#xA;paru -S maplemono-nf-cn-unhinted&#xA;&#xA;# Maple Mono (No-Ligature Variable)&#xA;paru -S maplemononl-variable&#xA;# Maple Mono (No-Ligature TTF hinted)&#xA;paru -S maplemononl-ttf-autohint&#xA;# Maple Mono (No-Ligature TTF unhinted)&#xA;paru -S maplemononl-ttf&#xA;# Maple Mono (No-Ligature OTF)&#xA;paru -S maplemononl-otf&#xA;# Maple Mono (No-Ligature WOFF2)&#xA;paru -S maplemononl-woff2&#xA;# Maple Mono NF (No-Ligature hinted)&#xA;paru -S maplemononl-nf&#xA;# Maple Mono NF (No-Ligature unhinted)&#xA;paru -S maplemononl-nf-unhinted&#xA;# Maple Mono CN (No-Ligature hinted)&#xA;paru -S maplemononl-cn&#xA;# Maple Mono CN (No-Ligature unhinted)&#xA;paru -S maplemononl-cn-unhinted&#xA;# Maple Mono NF CN (No-Ligature hinted)&#xA;paru -S maplemononl-nf-cn&#xA;# Maple Mono NF CN (No-Ligature unhinted)&#xA;paru -S maplemononl-nf-cn-unhinted&#xA;&#xA;# Maple Mono Normal (Ligature Variable)&#xA;paru -S maplemononormal-variable&#xA;# Maple Mono Normal (Ligature TTF hinted)&#xA;paru -S maplemononormal-ttf-autohint&#xA;# Maple Mono Normal (Ligature TTF unhinted)&#xA;paru -S maplemononormal-ttf&#xA;# Maple Mono Normal (Ligature OTF)&#xA;paru -S maplemononormal-otf&#xA;# Maple Mono Normal (Ligature WOFF2)&#xA;paru -S maplemononormal-woff2&#xA;# Maple Mono Normal NF (Ligature hinted)&#xA;paru -S maplemononormal-nf&#xA;# Maple Mono Normal NF (Ligature unhinted)&#xA;paru -S maplemononormal-nf-unhinted&#xA;# Maple Mono Normal CN (Ligature hinted)&#xA;paru -S maplemononormal-cn&#xA;# Maple Mono Normal CN (Ligature unhinted)&#xA;paru -S maplemononormal-cn-unhinted&#xA;# Maple Mono Normal NF CN (Ligature hinted)&#xA;paru -S maplemononormal-nf-cn&#xA;# Maple Mono Normal NF CN (Ligature unhinted)&#xA;paru -S maplemononormal-nf-cn-unhinted&#xA;&#xA;# Maple Mono Normal (No-Ligature Variable)&#xA;paru -S maplemononormalnl-variable&#xA;# Maple Mono Normal (No-Ligature TTF hinted)&#xA;paru -S maplemononormalnl-ttf-autohint&#xA;# Maple Mono Normal (No-Ligature TTF unhinted)&#xA;paru -S maplemononormalnl-ttf&#xA;# Maple Mono Normal (No-Ligature OTF)&#xA;paru -S maplemononormalnl-otf&#xA;# Maple Mono Normal (No-Ligature WOFF2)&#xA;paru -S maplemononormalnl-woff2&#xA;# Maple Mono Normal NF (No-Ligature hinted)&#xA;paru -S maplemononormalnl-nf&#xA;# Maple Mono Normal NF (No-Ligature unhinted)&#xA;paru -S maplemononormalnl-nf-unhinted&#xA;# Maple Mono Normal CN (No-Ligature hinted)&#xA;paru -S maplemononormalnl-cn&#xA;# Maple Mono Normal CN (No-Ligature unhinted)&#xA;paru -S maplemononormalnl-cn-unhinted&#xA;# Maple Mono Normal NF CN (No-Ligature hinted)&#xA;paru -S maplemononormalnl-nf-cn&#xA;# Maple Mono Normal NF CN (No-Ligature unhinted)&#xA;paru -S maplemononormalnl-nf-cn-unhinted&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Nixpkgs (NixOS, Linux, MacOS)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;fonts.packages = with pkgs; [&#xA;  # Maple Mono (Ligature TTF unhinted)&#xA;  maple-mono.truetype&#xA;  # Maple Mono NF (Ligature unhinted)&#xA;  maple-mono.NF-unhinted&#xA;  # Maple Mono NF CN (Ligature unhinted)&#xA;  maple-mono.NF-CN-unhinted&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;All packages (Click to expand)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;fonts.packages = with pkgs; [&#xA;  # Maple Mono (Ligature Variable)&#xA;  maple-mono.variable&#xA;  # Maple Mono (Ligature TTF hinted)&#xA;  maple-mono.truetype-autohint&#xA;  # Maple Mono (Ligature TTF unhinted)&#xA;  maple-mono.truetype&#xA;  # Maple Mono (Ligature OTF)&#xA;  maple-mono.opentype&#xA;  # Maple Mono (Ligature WOFF2)&#xA;  maple-mono.woff2&#xA;  # Maple Mono NF (Ligature hinted)&#xA;  maple-mono.NF&#xA;  # Maple Mono NF (Ligature unhinted)&#xA;  maple-mono.NF-unhinted&#xA;  # Maple Mono CN (Ligature hinted)&#xA;  maple-mono.CN&#xA;  # Maple Mono CN (Ligature unhinted)&#xA;  maple-mono.CN-unhinted&#xA;  # Maple Mono NF CN (Ligature hinted)&#xA;  maple-mono.NF-CN&#xA;  # Maple Mono NF CN (Ligature unhinted)&#xA;  maple-mono.NF-CN-unhinted&#xA;&#xA;  # Maple Mono (No-Ligature Variable)&#xA;  maple-mono.NL-Variable&#xA;  # Maple Mono (No-Ligature TTF hinted)&#xA;  maple-mono.NL-TTF-AutoHint&#xA;  # Maple Mono (No-Ligature TTF unhinted)&#xA;  maple-mono.NL-TTF&#xA;  # Maple Mono (No-Ligature OTF)&#xA;  maple-mono.NL-OTF&#xA;  # Maple Mono (No-Ligature WOFF2)&#xA;  maple-mono.NL-Woff2&#xA;  # Maple Mono NF (No-Ligature hinted)&#xA;  maple-mono.NL-NF&#xA;  # Maple Mono NF (No-Ligature unhinted)&#xA;  maple-mono.NL-NF-unhinted&#xA;  # Maple Mono CN (No-Ligature hinted)&#xA;  maple-mono.NL-CN&#xA;  # Maple Mono CN (No-Ligature unhinted)&#xA;  maple-mono.NL-CN-unhinted&#xA;  # Maple Mono NF CN (No-Ligature hinted)&#xA;  maple-mono.NL-NF-CN&#xA;  # Maple Mono NF CN (No-Ligature unhinted)&#xA;  maple-mono.NL-NF-CN-unhinted&#xA;&#xA;  # Maple Mono Normal (Ligature Variable)&#xA;  maple-mono.Normal-Variable&#xA;  # Maple Mono Normal (Ligature TTF hinted)&#xA;  maple-mono.Normal-TTF-AutoHint&#xA;  # Maple Mono Normal (Ligature TTF unhinted)&#xA;  maple-mono.Normal-TTF&#xA;  # Maple Mono Normal (Ligature OTF)&#xA;  maple-mono.Normal-OTF&#xA;  # Maple Mono Normal (Ligature WOFF2)&#xA;  maple-mono.Normal-Woff2&#xA;  # Maple Mono Normal NF (Ligature hinted)&#xA;  maple-mono.Normal-NF&#xA;  # Maple Mono Normal NF (Ligature unhinted)&#xA;  maple-mono.Normal-NF-unhinted&#xA;  # Maple Mono Normal CN (Ligature hinted)&#xA;  maple-mono.Normal-CN&#xA;  # Maple Mono Normal CN (Ligature unhinted)&#xA;  maple-mono.Normal-CN-unhinted&#xA;  # Maple Mono Normal NF CN (Ligature hinted)&#xA;  maple-mono.Normal-NF-CN&#xA;  # Maple Mono Normal NF CN (Ligature unhinted)&#xA;  maple-mono.Normal-NF-CN-unhinted&#xA;&#xA;  # Maple Mono Normal (No-Ligature Variable)&#xA;  maple-mono.NormalNL-Variable&#xA;  # Maple Mono Normal (No-Ligature TTF hinted)&#xA;  maple-mono.NormalNL-TTF-AutoHint&#xA;  # Maple Mono Normal (No-Ligature TTF unhinted)&#xA;  maple-mono.NormalNL-TTF&#xA;  # Maple Mono Normal (No-Ligature OTF)&#xA;  maple-mono.NormalNL-OTF&#xA;  # Maple Mono Normal (No-Ligature WOFF2)&#xA;  maple-mono.NormalNL-Woff2&#xA;  # Maple Mono Normal NF (No-Ligature hinted)&#xA;  maple-mono.NormalNL-NF&#xA;  # Maple Mono Normal NF (No-Ligature unhinted)&#xA;  maple-mono.NormalNL-NF-unhinted&#xA;  # Maple Mono Normal CN (No-Ligature hinted)&#xA;  maple-mono.NormalNL-CN&#xA;  # Maple Mono Normal CN (No-Ligature unhinted)&#xA;  maple-mono.NormalNL-CN-unhinted&#xA;  # Maple Mono Normal NF CN (No-Ligature hinted)&#xA;  maple-mono.NormalNL-NF-CN&#xA;  # Maple Mono Normal NF CN (No-Ligature unhinted)&#xA;  maple-mono.NormalNL-NF-CN-unhinted&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;CDN&lt;/h2&gt; &#xA;&lt;h3&gt;Maple Mono&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fontsource.org/fonts/maple-mono&#34;&gt;fontsource&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fonts.zeoseven.com/items/443/&#34;&gt;ZeoSeven Fonts&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Maple Mono CN&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chinese-font.netlify.app/zh-cn/fonts/maple-mono-cn/MapleMono-CN-Regular&#34;&gt;The Chinese Web Fonts Plan (中文网字计划)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fonts.zeoseven.com/items/442/&#34;&gt;ZeoSeven Fonts&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage &amp;amp; Feature Configurations&lt;/h2&gt; &#xA;&lt;p&gt;See in &lt;a href=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/source/features/README.md&#34;&gt;document&lt;/a&gt; or try it in &lt;a href=&#34;https://font.subf.dev/en/playground&#34;&gt;Playground&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!note] The web tool for custom build is under development.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Naming FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ligature&lt;/strong&gt;: Default version with ligatures (&lt;code&gt;Maple Mono&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;No-Ligature&lt;/strong&gt;: Default version without ligatures (&lt;code&gt;Maple Mono NL&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Normal-Ligature&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/#preset&#34;&gt;&lt;code&gt;--normal&lt;/code&gt; preset&lt;/a&gt; with ligatures (&lt;code&gt;Maple Mono Normal&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Normal-No-Ligature&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/#preset&#34;&gt;&lt;code&gt;--normal&lt;/code&gt; preset&lt;/a&gt; without ligatures (&lt;code&gt;Maple Mono Normal NL&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Format and Glyph Set&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Variable&lt;/strong&gt;: Minimal version, smoothly change font weight by variable&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;TTF&lt;/strong&gt;: Minimal version, ttf format [Recommend!]&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OTF&lt;/strong&gt;: Minimal version, otf format&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WOFF2&lt;/strong&gt;: Minimal version, woff2 format, for small size on web pages&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NF&lt;/strong&gt;: Nerd-Font patched version, add icons for terminal (With &lt;code&gt;-NF&lt;/code&gt; suffix)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CN&lt;/strong&gt;: Chinese version, embed with Chinese and Japanese glyphs (With &lt;code&gt;-CN&lt;/code&gt; suffix)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NF-CN&lt;/strong&gt;: Full version, embed with icons, Chinese and Japanese glyphs (With &lt;code&gt;-NF-CN&lt;/code&gt; suffix)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Font Hint&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hinted font&lt;/strong&gt; is used for low resolution screen to have better render effect. From my experience, if your screen resolution is lower or equal than 1080P, it is recommended to use &#34;hinted font&#34;. Using &#34;unhinted font&#34; will lead to misalignment or uneven thickness on your text. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In this case, you can choose &lt;code&gt;MapleMono-TTF-AutoHint&lt;/code&gt; / &lt;code&gt;MapleMono-NF&lt;/code&gt; / &lt;code&gt;MapleMono-NF-CN&lt;/code&gt;, etc.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Unhinted font&lt;/strong&gt; is used for high resolution screen (e.g. for MacBook). Using &#34;hinted font&#34; will blur your text or make it looks weird. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In this case, you can choose &lt;code&gt;MapleMono-OTF&lt;/code&gt; / &lt;code&gt;MapleMono-TTF&lt;/code&gt; / &lt;code&gt;MapleMono-NF-unhinted&lt;/code&gt; / &lt;code&gt;MapleMono-NF-CN-unhinted&lt;/code&gt;, etc.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Why there exists &lt;code&gt;-AutoHint&lt;/code&gt; and &lt;code&gt;-unhinted&lt;/code&gt; suffix? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;for backward compatibility, I keep the original naming scheme. &lt;code&gt;-AutoHint&lt;/code&gt; is only used for &lt;code&gt;TTF&lt;/code&gt; format.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Custom Build&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/config.json&#34;&gt;&lt;code&gt;config.json&lt;/code&gt;&lt;/a&gt; file is used to configure the build process. Checkout the &lt;a href=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/source/schema.json&#34;&gt;schema&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/source/features/README.md&#34;&gt;document&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;There also have some &lt;a href=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/#build-script-usage&#34;&gt;command line options&lt;/a&gt; for customizing the build process. Cli options have higher priority than options in &lt;code&gt;config.json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Use Github Actions&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/subframe7536/maple-font/actions/workflows/custom.yml&#34;&gt;Github Actions&lt;/a&gt; to build the font.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the repo&lt;/li&gt; &#xA; &lt;li&gt;(Optional) Change the content in &lt;code&gt;config.json&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go to Actions tab&lt;/li&gt; &#xA; &lt;li&gt;Click on &lt;code&gt;Custom Build&lt;/code&gt; menu item on the left&lt;/li&gt; &#xA; &lt;li&gt;Click on &lt;code&gt;Run workflow&lt;/code&gt; button with options setup&lt;/li&gt; &#xA; &lt;li&gt;Wait for the build to finish&lt;/li&gt; &#xA; &lt;li&gt;Download the font archives from Releases&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Use Docker&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/subframe7536/maple-font --depth 1 -b variable&#xA;docker build -t maple-font .&#xA;docker run -v &#34;$(pwd)/fonts:/app/fonts&#34; -e BUILD_ARGS=&#34;--normal&#34; maple-font&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Local Build&lt;/h3&gt; &#xA;&lt;p&gt;Clone the repo and run on your local machine. Make sure you have &lt;code&gt;python3&lt;/code&gt; and &lt;code&gt;pip&lt;/code&gt; installed&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/subframe7536/maple-font --depth 1 -b variable&#xA;pip install -r requirements.txt&#xA;python build.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For &lt;code&gt;Ubuntu&lt;/code&gt; or &lt;code&gt;Debian&lt;/code&gt;, maybe &lt;code&gt;python-is-python3&lt;/code&gt; is needed as well&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have trouble installing the dependencies, just create a new GitHub Codespace and run the commands there&lt;/p&gt; &#xA;&lt;h4&gt;Custom Nerd-Font&lt;/h4&gt; &#xA;&lt;p&gt;For custom &lt;code&gt;font-patcher&lt;/code&gt; args, &lt;code&gt;font-forge&lt;/code&gt; (and maybe &lt;code&gt;python3-fontforge&lt;/code&gt; as well) is required.&lt;/p&gt; &#xA;&lt;p&gt;Maybe you should also change &lt;code&gt;&#34;nerd_font.extra_args&#34;&lt;/code&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/config.json&#34;&gt;config.json&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default args: &lt;code&gt;-l --careful --outputdir dir&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;if &lt;code&gt;&#34;nerd_font.mono&#34;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, then add &lt;code&gt;--mono&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Preset&lt;/h4&gt; &#xA;&lt;p&gt;Run &lt;code&gt;build.py&lt;/code&gt; with &lt;code&gt;--normal&lt;/code&gt; flag, make the font looks not such &#34;Opinioned&#34; , just like &lt;code&gt;JetBrains Mono&lt;/code&gt; (with slashed zero).&lt;/p&gt; &#xA;&lt;h4&gt;Font Feature Freeze&lt;/h4&gt; &#xA;&lt;p&gt;There are three kind of options for feature freeze (&lt;a href=&#34;https://github.com/subframe7536/maple-font/issues/233#issuecomment-2410170270&#34;&gt;Why&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;enable&lt;/code&gt;: Forcely enable the features without setting up &lt;code&gt;cvXX&lt;/code&gt; / &lt;code&gt;ssXX&lt;/code&gt; / &lt;code&gt;zero&lt;/code&gt; in font features config, just as default glyphs / ligatures&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;disable&lt;/code&gt;: Remove the features in &lt;code&gt;cvXX&lt;/code&gt; / &lt;code&gt;ssXX&lt;/code&gt; / &lt;code&gt;zero&lt;/code&gt;, which will no longer effect, even if you enable it manually&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ignore&lt;/code&gt;: Do nothing&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Load Custom Feature File&lt;/h4&gt; &#xA;&lt;p&gt;Run &lt;code&gt;build.py&lt;/code&gt; with &lt;code&gt;--apply-fea-file&lt;/code&gt; flag, the feature file from &lt;a href=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/source/features&#34;&gt;&lt;code&gt;source/features/{regular,italic}.fea&lt;/code&gt;&lt;/a&gt; will be applied into variable font. You can modify it to change all features, e.g. remove some ligatures in &lt;code&gt;calt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Chinese version&lt;/h3&gt; &#xA;&lt;p&gt;CN version is disabled by default. Run &lt;code&gt;python build.py&lt;/code&gt; with &lt;code&gt;--cn&lt;/code&gt; flag, the CN base fonts (about 130 MB) will download from GitHub.&lt;/p&gt; &#xA;&lt;p&gt;If you want to build CN base fonts from variable (about 35 MB), setup &lt;code&gt;&#34;cn.use_static_base_font&#34;: false&lt;/code&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/config.json&#34;&gt;config.json&lt;/a&gt; and &lt;strong&gt;BE PATIENT&lt;/strong&gt;, instantiation will take about 20-30 minutes.&lt;/p&gt; &#xA;&lt;h4&gt;Narrow spacing in CN glyphs&lt;/h4&gt; &#xA;&lt;p&gt;If you think that CN glyphs spacing is &lt;strong&gt;tooooo large&lt;/strong&gt;, there is a &lt;strong&gt;EXPERIMENTAL&lt;/strong&gt; build option &lt;code&gt;cn.narrow&lt;/code&gt; or flag &lt;code&gt;--cn-narrow&lt;/code&gt; to narrow spacing in CN glyphs. You can see effect and track issues in &lt;a href=&#34;https://github.com/subframe7536/maple-font/issues/249&#34;&gt;#249&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;GitHub Mirror&lt;/h4&gt; &#xA;&lt;p&gt;The build script will auto download required assets from GitHub. If you have trouble downloading, please setup &lt;code&gt;github_mirror&lt;/code&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/config.json&#34;&gt;config.json&lt;/a&gt; or &lt;code&gt;$GITHUB&lt;/code&gt; to your environment variable. (Target URL will be &lt;code&gt;https://&amp;lt;github_mirror&amp;gt;/&amp;lt;user&amp;gt;/&amp;lt;repo&amp;gt;/releases/download/&amp;lt;tag&amp;gt;/&amp;lt;file&amp;gt;&lt;/code&gt;), or just download the target &lt;code&gt;.zip&lt;/code&gt; file and put it in the same directory as &lt;code&gt;build.py&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Traditional Chinese Punctuation Support&lt;/h4&gt; &#xA;&lt;p&gt;By enabling &lt;code&gt;cv99&lt;/code&gt;, all Chinese punctuation marks will be centred. See more details in &lt;a href=&#34;https://github.com/subframe7536/maple-font/issues/150&#34;&gt;#150&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Build Script Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;usage: build.py [-h] [-v] [-d] [--debug] [-n] [--feat FEAT] [--apply-fea-file]&#xA;                [--hinted | --no-hinted] [--liga | --no-liga] [--cn-narrow]&#xA;                [--nerd-font | --no-nerd-font] [--cn | --no-cn] [--cn-both]&#xA;                [--ttf-only] [--cache] [--cn-rebuild] [--archive]&#xA;&#xA;✨ Builder and optimizer for Maple Mono&#xA;&#xA;options:&#xA;  -h, --help        show this help message and exit&#xA;  -v, --version     show program&#39;s version number and exit&#xA;  -d, --dry         Output config and exit&#xA;  --debug           Add `Debug` suffix to family name, skip optimization&#xA;&#xA;Feature Options:&#xA;  -n, --normal      Use normal preset, just like `JetBrains Mono` with slashed zero&#xA;  --feat FEAT       Freeze font features, splited by `,` (e.g. `--feat&#xA;                    zero,cv01,ss07,ss08`). No effect on variable format&#xA;  --apply-fea-file  Load feature file from `source/features/{regular,italic}.fea` to&#xA;                    variable font&#xA;  --hinted          Use hinted font as base font in NF / CN / NF-CN (default)&#xA;  --no-hinted       Use unhinted font as base font in NF / CN / NF-CN&#xA;  --liga            Preserve all the ligatures (default)&#xA;  --no-liga         Remove all the ligatures&#xA;  --cn-narrow       Make CN characters narrow (experimental)&#xA;&#xA;Build Options:&#xA;  --nerd-font       Build Nerd-Font version (default)&#xA;  --no-nerd-font    Do not build Nerd-Font version&#xA;  --cn              Build Chinese version&#xA;  --no-cn           Do not build Chinese version (default)&#xA;  --cn-both         Build both `Maple Mono CN` and `Maple Mono NF CN`. Nerd-Font&#xA;                    version must be enabled&#xA;  --ttf-only        Only build TTF format&#xA;  --cache           Reuse font cache of TTF, OTF and Woff2 formats&#xA;  --cn-rebuild      Reinstantiate CN base font&#xA;  --archive         Build font archives with config and license. If has `--cache`&#xA;                    flag, only archive Nerd-Font and CN formats&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Credit&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JetBrains/JetBrainsMono&#34;&gt;JetBrains Mono&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/googlefonts/RobotoMono&#34;&gt;Roboto Mono&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tonsky/FiraCode&#34;&gt;Fira Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rubjo/victor-mono&#34;&gt;Victor Mono&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/eigilnikolajsen/commit-mono&#34;&gt;Commit Mono&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TheRenegadeCoder/sample-programs-website&#34;&gt;Code Sample&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ryanoasis/nerd-fonts&#34;&gt;Nerd Font&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MuTsunTsai/fontfreeze/&#34;&gt;Font Freeze&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tophix.com/font-tools/font-viewer&#34;&gt;Font Viewer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.monolisa.dev/&#34;&gt;Monolisa&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.recursive.design/&#34;&gt;Recursive&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponser&lt;/h2&gt; &#xA;&lt;p&gt;If this font is helpful to you, please feel free to buy me a coffee&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/subframe753&#34;&gt;&lt;img src=&#34;https://img.buymeacoffee.com/button-api/?text=Buy%20me%20a%20coffee&amp;amp;emoji=&amp;amp;slug=subframe753&amp;amp;button_colour=5F7FFF&amp;amp;font_colour=ffffff&amp;amp;font_family=Lato&amp;amp;outline_colour=000000&amp;amp;coffee_colour=FFDD00&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;or sponser me through &lt;a href=&#34;https://afdian.com/a/subframe7536&#34;&gt;Afdian&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.star-history.com/#subframe7536/maple-font&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=subframe7536/maple-font&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;SIL Open Font License 1.1&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lastmile-ai/mcp-agent</title>
    <updated>2025-03-30T01:55:29Z</updated>
    <id>tag:github.com,2025-03-30:/lastmile-ai/mcp-agent</id>
    <link href="https://github.com/lastmile-ai/mcp-agent" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build effective agents using Model Context Protocol and simple workflow patterns&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/user-attachments/assets/6f4e40c4-dc88-47b6-b965-5856b69416d2&#34; alt=&#34;Logo&#34; width=&#34;300&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;em&gt;Build effective agents with Model Context Protocol using simple, composable patterns.&lt;/em&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/lastmile-ai/mcp-agent/tree/main/examples&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://www.anthropic.com/research/building-effective-agents&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Building Effective Agents&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://modelcontextprotocol.io/introduction&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;MCP&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://pypi.org/project/mcp-agent/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/mcp-agent?color=%2334D058&amp;amp;label=pypi&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/lastmile-ai/mcp-agent/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-raw/lastmile-ai/mcp-agent&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lmai.link/discord/mcp-agent&#34;&gt;&lt;img src=&#34;https://shields.io/discord/1089284610329952357&#34; alt=&#34;discord&#34;&gt;&lt;/a&gt; &lt;img alt=&#34;Pepy Total Downloads&#34; src=&#34;https://img.shields.io/pepy/dt/mcp-agent?label=pypi%20%7C%20downloads&#34;&gt; &lt;a href=&#34;https://github.com/lastmile-ai/mcp-agent/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/l/mcp-agent&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;mcp-agent&lt;/code&gt;&lt;/strong&gt; is a simple, composable framework to build agents using &lt;a href=&#34;https://modelcontextprotocol.io/introduction&#34;&gt;Model Context Protocol&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Inspiration&lt;/strong&gt;: Anthropic announced 2 foundational updates for AI application developers:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.anthropic.com/news/model-context-protocol&#34;&gt;Model Context Protocol&lt;/a&gt; - a standardized interface to let any software be accessible to AI assistants via MCP servers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.anthropic.com/research/building-effective-agents&#34;&gt;Building Effective Agents&lt;/a&gt; - a seminal writeup on simple, composable patterns for building production-ready AI agents.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;mcp-agent&lt;/code&gt; puts these two foundational pieces into an AI application framework:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;It handles the pesky business of managing the lifecycle of MCP server connections so you don&#39;t have to.&lt;/li&gt; &#xA; &lt;li&gt;It implements every pattern described in Building Effective Agents, and does so in a &lt;em&gt;composable&lt;/em&gt; way, allowing you to chain these patterns together.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bonus&lt;/strong&gt;: It implements &lt;a href=&#34;https://github.com/openai/swarm&#34;&gt;OpenAI&#39;s Swarm&lt;/a&gt; pattern for multi-agent orchestration, but in a model-agnostic way.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Altogether, this is the simplest and easiest way to build robust agent applications. Much like MCP, this project is in early development. We welcome all kinds of &lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/CONTRIBUTING.md&#34;&gt;contributions&lt;/a&gt;, feedback and your help in growing this to become a new standard.&lt;/p&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;p&gt;We recommend using &lt;a href=&#34;https://docs.astral.sh/uv/&#34;&gt;uv&lt;/a&gt; to manage your Python projects:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;uv add &#34;mcp-agent&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install mcp-agent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Quickstart&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] The &lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/examples&#34;&gt;&lt;code&gt;examples&lt;/code&gt;&lt;/a&gt; directory has several example applications to get started with. To run an example, clone this repo, then:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd examples/mcp_basic_agent # Or any other example&#xA;cp mcp_agent.secrets.yaml.example mcp_agent.secrets.yaml # Update API keys&#xA;uv run main.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Here is a basic &#34;finder&#34; agent that uses the fetch and filesystem servers to look up a file, read a blog and write a tweet. &lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/examples/mcp_basic_agent/&#34;&gt;Example link&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;finder_agent.py&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import asyncio&#xA;import os&#xA;&#xA;from mcp_agent.app import MCPApp&#xA;from mcp_agent.agents.agent import Agent&#xA;from mcp_agent.workflows.llm.augmented_llm_openai import OpenAIAugmentedLLM&#xA;&#xA;app = MCPApp(name=&#34;hello_world_agent&#34;)&#xA;&#xA;async def example_usage():&#xA;    async with app.run() as mcp_agent_app:&#xA;        logger = mcp_agent_app.logger&#xA;        # This agent can read the filesystem or fetch URLs&#xA;        finder_agent = Agent(&#xA;            name=&#34;finder&#34;,&#xA;            instruction=&#34;&#34;&#34;You can read local files or fetch URLs.&#xA;                Return the requested information when asked.&#34;&#34;&#34;,&#xA;            server_names=[&#34;fetch&#34;, &#34;filesystem&#34;], # MCP servers this Agent can use&#xA;        )&#xA;&#xA;        async with finder_agent:&#xA;            # Automatically initializes the MCP servers and adds their tools for LLM use&#xA;            tools = await finder_agent.list_tools()&#xA;            logger.info(f&#34;Tools available:&#34;, data=tools)&#xA;&#xA;            # Attach an OpenAI LLM to the agent (defaults to GPT-4o)&#xA;            llm = await finder_agent.attach_llm(OpenAIAugmentedLLM)&#xA;&#xA;            # This will perform a file lookup and read using the filesystem server&#xA;            result = await llm.generate_str(&#xA;                message=&#34;Show me what&#39;s in README.md verbatim&#34;&#xA;            )&#xA;            logger.info(f&#34;README.md contents: {result}&#34;)&#xA;&#xA;            # Uses the fetch server to fetch the content from URL&#xA;            result = await llm.generate_str(&#xA;                message=&#34;Print the first two paragraphs from https://www.anthropic.com/research/building-effective-agents&#34;&#xA;            )&#xA;            logger.info(f&#34;Blog intro: {result}&#34;)&#xA;&#xA;            # Multi-turn interactions by default&#xA;            result = await llm.generate_str(&#34;Summarize that in a 128-char tweet&#34;)&#xA;            logger.info(f&#34;Tweet: {result}&#34;)&#xA;&#xA;if __name__ == &#34;__main__&#34;:&#xA;    asyncio.run(example_usage())&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;mcp_agent.config.yaml&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;execution_engine: asyncio&#xA;logger:&#xA;  transports: [console]  # You can use [file, console] for both&#xA;  level: debug&#xA;  path: &#34;logs/mcp-agent.jsonl&#34;  # Used for file transport&#xA;  # For dynamic log filenames:&#xA;  # path_settings:&#xA;  #   path_pattern: &#34;logs/mcp-agent-{unique_id}.jsonl&#34;&#xA;  #   unique_id: &#34;timestamp&#34;  # Or &#34;session_id&#34;&#xA;  #   timestamp_format: &#34;%Y%m%d_%H%M%S&#34;&#xA;&#xA;mcp:&#xA;  servers:&#xA;    fetch:&#xA;      command: &#34;uvx&#34;&#xA;      args: [&#34;mcp-server-fetch&#34;]&#xA;    filesystem:&#xA;      command: &#34;npx&#34;&#xA;      args:&#xA;        [&#xA;          &#34;-y&#34;,&#xA;          &#34;@modelcontextprotocol/server-filesystem&#34;,&#xA;          &#34;&amp;lt;add_your_directories&amp;gt;&#34;,&#xA;        ]&#xA;&#xA;openai:&#xA;  # Secrets (API keys, etc.) are stored in an mcp_agent.secrets.yaml file which can be gitignored&#xA;  default_model: gpt-4o&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Agent output&lt;/summary&gt; &#xA; &lt;img width=&#34;2398&#34; alt=&#34;Image&#34; src=&#34;https://github.com/user-attachments/assets/eaa60fdf-bcc6-460b-926e-6fa8534e9089&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#why-use-mcp-agent&#34;&gt;Why use mcp-agent?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#examples&#34;&gt;Example Applications&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#claude-desktop&#34;&gt;Claude Desktop&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#streamlit&#34;&gt;Streamlit&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#gmail-agent&#34;&gt;Gmail Agent&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#simple-rag-chatbot&#34;&gt;RAG&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#marimo&#34;&gt;Marimo&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#python&#34;&gt;Python&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#swarm&#34;&gt;Swarm (CLI)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#core-components&#34;&gt;Core Concepts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#workflows&#34;&gt;Workflows Patterns&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#augmentedllm&#34;&gt;Augmented LLM&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#parallel&#34;&gt;Parallel&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#router&#34;&gt;Router&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#intentclassifier&#34;&gt;Intent-Classifier&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#orchestrator-workers&#34;&gt;Orchestrator-Workers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#evaluator-optimizer&#34;&gt;Evaluator-Optimizer&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#swarm-1&#34;&gt;OpenAI Swarm&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#advanced&#34;&gt;Advanced&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#composability&#34;&gt;Composing multiple workflows&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#signaling-and-human-input&#34;&gt;Signaling and Human input&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#app-config&#34;&gt;App Config&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#mcp-server-management&#34;&gt;MCP Server Management&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#faqs&#34;&gt;FAQs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why use &lt;code&gt;mcp-agent&lt;/code&gt;?&lt;/h2&gt; &#xA;&lt;p&gt;There are too many AI frameworks out there already. But &lt;code&gt;mcp-agent&lt;/code&gt; is the only one that is purpose-built for a shared protocol - &lt;a href=&#34;https://modelcontextprotocol.io/introduction&#34;&gt;MCP&lt;/a&gt;. It is also the most lightweight, and is closer to an agent pattern library than a framework.&lt;/p&gt; &#xA;&lt;p&gt;As &lt;a href=&#34;https://github.com/punkpeye/awesome-mcp-servers&#34;&gt;more services become MCP-aware&lt;/a&gt;, you can use mcp-agent to build robust and controllable AI agents that can leverage those services out-of-the-box.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Before we go into the core concepts of mcp-agent, let&#39;s show what you can build with it.&lt;/p&gt; &#xA;&lt;p&gt;In short, you can build any kind of AI application with mcp-agent: multi-agent collaborative workflows, human-in-the-loop workflows, RAG pipelines and more.&lt;/p&gt; &#xA;&lt;h3&gt;Claude Desktop&lt;/h3&gt; &#xA;&lt;p&gt;You can integrate mcp-agent apps into MCP clients like Claude Desktop.&lt;/p&gt; &#xA;&lt;h4&gt;mcp-agent server&lt;/h4&gt; &#xA;&lt;p&gt;This app wraps an mcp-agent application inside an MCP server, and exposes that server to Claude Desktop. The app exposes agents and workflows that Claude Desktop can invoke to service of the user&#39;s request.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/7807cffd-dba7-4f0c-9c70-9482fd7e0699&#34;&gt;https://github.com/user-attachments/assets/7807cffd-dba7-4f0c-9c70-9482fd7e0699&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This demo shows a multi-agent evaluation task where each agent evaluates aspects of an input poem, and then an aggregator summarizes their findings into a final response.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Details&lt;/strong&gt;: Starting from a user&#39;s request over text, the application:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;dynamically defines agents to do the job&lt;/li&gt; &#xA; &lt;li&gt;uses the appropriate workflow to orchestrate those agents (in this case the Parallel workflow)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Link to code&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/examples/mcp_agent_server&#34;&gt;examples/mcp_agent_server&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Huge thanks to &lt;a href=&#34;https://github.com/StreetLamb&#34;&gt;Jerron Lim (@StreetLamb)&lt;/a&gt; for developing and contributing this example!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Streamlit&lt;/h3&gt; &#xA;&lt;p&gt;You can deploy mcp-agent apps using Streamlit.&lt;/p&gt; &#xA;&lt;h4&gt;Gmail agent&lt;/h4&gt; &#xA;&lt;p&gt;This app is able to perform read and write actions on gmail using text prompts -- i.e. read, delete, send emails, mark as read/unread, etc. It uses an MCP server for Gmail.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/54899cac-de24-4102-bd7e-4b2022c956e3&#34;&gt;https://github.com/user-attachments/assets/54899cac-de24-4102-bd7e-4b2022c956e3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Link to code&lt;/strong&gt;: &lt;a href=&#34;https://github.com/jasonsum/gmail-mcp-server/raw/add-mcp-agent-streamlit/streamlit_app.py&#34;&gt;gmail-mcp-server&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Huge thanks to &lt;a href=&#34;https://github.com/jasonsum&#34;&gt;Jason Summer (@jasonsum)&lt;/a&gt; for developing and contributing this example!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Simple RAG Chatbot&lt;/h4&gt; &#xA;&lt;p&gt;This app uses a Qdrant vector database (via an MCP server) to do Q&amp;amp;A over a corpus of text.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/f4dcd227-cae9-4a59-aa9e-0eceeb4acaf4&#34;&gt;https://github.com/user-attachments/assets/f4dcd227-cae9-4a59-aa9e-0eceeb4acaf4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Link to code&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/examples/streamlit_mcp_rag_agent/&#34;&gt;examples/streamlit_mcp_rag_agent&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Huge thanks to &lt;a href=&#34;https://github.com/StreetLamb&#34;&gt;Jerron Lim (@StreetLamb)&lt;/a&gt; for developing and contributing this example!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Marimo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/marimo-team/marimo&#34;&gt;Marimo&lt;/a&gt; is a reactive Python notebook that replaces Jupyter and Streamlit. Here&#39;s the &#34;file finder&#34; agent from &lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#quickstart&#34;&gt;Quickstart&lt;/a&gt; implemented in Marimo:&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/user-attachments/assets/139a95a5-e3ac-4ea7-9c8f-bad6577e8597&#34; width=&#34;400&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;Link to code&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/examples/marimo_mcp_basic_agent/&#34;&gt;examples/marimo_mcp_basic_agent&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Huge thanks to &lt;a href=&#34;https://github.com/akshayka&#34;&gt;Akshay Agrawal (@akshayka)&lt;/a&gt; for developing and contributing this example!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Python&lt;/h3&gt; &#xA;&lt;p&gt;You can write mcp-agent apps as Python scripts or Jupyter notebooks.&lt;/p&gt; &#xA;&lt;h4&gt;Swarm&lt;/h4&gt; &#xA;&lt;p&gt;This example demonstrates a multi-agent setup for handling different customer service requests in an airline context using the Swarm workflow pattern. The agents can triage requests, handle flight modifications, cancellations, and lost baggage cases.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/b314d75d-7945-4de6-965b-7f21eb14a8bd&#34;&gt;https://github.com/user-attachments/assets/b314d75d-7945-4de6-965b-7f21eb14a8bd&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Link to code&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/examples/workflow_swarm/&#34;&gt;examples/workflow_swarm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Core Components&lt;/h2&gt; &#xA;&lt;p&gt;The following are the building blocks of the mcp-agent framework:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/app.py&#34;&gt;MCPApp&lt;/a&gt;&lt;/strong&gt;: global state and app configuration&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MCP server management&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/mcp/gen_client.py&#34;&gt;&lt;code&gt;gen_client&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/mcp/mcp_connection_manager.py&#34;&gt;&lt;code&gt;MCPConnectionManager&lt;/code&gt;&lt;/a&gt; to easily connect to MCP servers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/agents/agent.py&#34;&gt;Agent&lt;/a&gt;&lt;/strong&gt;: An Agent is an entity that has access to a set of MCP servers and exposes them to an LLM as tool calls. It has a name and purpose (instruction).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/workflows/llm/augmented_llm.py&#34;&gt;AugmentedLLM&lt;/a&gt;&lt;/strong&gt;: An LLM that is enhanced with tools provided from a collection of MCP servers. Every Workflow pattern described below is an &lt;code&gt;AugmentedLLM&lt;/code&gt; itself, allowing you to compose and chain them together.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Everything in the framework is a derivative of these core capabilities.&lt;/p&gt; &#xA;&lt;h2&gt;Workflows&lt;/h2&gt; &#xA;&lt;p&gt;mcp-agent provides implementations for every pattern in Anthropic’s &lt;a href=&#34;https://www.anthropic.com/research/building-effective-agents&#34;&gt;Building Effective Agents&lt;/a&gt;, as well as the OpenAI &lt;a href=&#34;https://github.com/openai/swarm&#34;&gt;Swarm&lt;/a&gt; pattern. Each pattern is model-agnostic, and exposed as an &lt;code&gt;AugmentedLLM&lt;/code&gt;, making everything very composable.&lt;/p&gt; &#xA;&lt;h3&gt;AugmentedLLM&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/workflows/llm/augmented_llm.py&#34;&gt;AugmentedLLM&lt;/a&gt; is an LLM that has access to MCP servers and functions via Agents.&lt;/p&gt; &#xA;&lt;p&gt;LLM providers implement the AugmentedLLM interface to expose 3 functions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;generate&lt;/code&gt;: Generate message(s) given a prompt, possibly over multiple iterations and making tool calls as needed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;generate_str&lt;/code&gt;: Calls &lt;code&gt;generate&lt;/code&gt; and returns result as a string output.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;generate_structured&lt;/code&gt;: Uses &lt;a href=&#34;https://github.com/instructor-ai/instructor&#34;&gt;Instructor&lt;/a&gt; to return the generated result as a Pydantic model.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, &lt;code&gt;AugmentedLLM&lt;/code&gt; has memory, to keep track of long or short-term history.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from mcp_agent.agents.agent import Agent&#xA;from mcp_agent.workflows.llm.augmented_llm_anthropic import AnthropicAugmentedLLM&#xA;&#xA;finder_agent = Agent(&#xA;    name=&#34;finder&#34;,&#xA;    instruction=&#34;You are an agent with filesystem + fetch access. Return the requested file or URL contents.&#34;,&#xA;    server_names=[&#34;fetch&#34;, &#34;filesystem&#34;],&#xA;)&#xA;&#xA;async with finder_agent:&#xA;   llm = await finder_agent.attach_llm(AnthropicAugmentedLLM)&#xA;&#xA;   result = await llm.generate_str(&#xA;      message=&#34;Print the first 2 paragraphs of https://www.anthropic.com/research/building-effective-agents&#34;,&#xA;      # Can override model, tokens and other defaults&#xA;   )&#xA;   logger.info(f&#34;Result: {result}&#34;)&#xA;&#xA;   # Multi-turn conversation&#xA;   result = await llm.generate_str(&#xA;      message=&#34;Summarize those paragraphs in a 128 character tweet&#34;,&#xA;   )&#xA;   logger.info(f&#34;Result: {result}&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/workflows/parallel/parallel_llm.py&#34;&gt;Parallel&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F406bb032ca007fd1624f261af717d70e6ca86286-2401x1000.png&amp;amp;w=3840&amp;amp;q=75&#34; alt=&#34;Parallel workflow (Image credit: Anthropic)&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Fan-out tasks to multiple sub-agents and fan-in the results. Each subtask is an AugmentedLLM, as is the overall Parallel workflow, meaning each subtask can optionally be a more complex workflow itself.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/examples/workflow_parallel/main.py&#34;&gt;Link to full example&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;proofreader = Agent(name=&#34;proofreader&#34;, instruction=&#34;Review grammar...&#34;)&#xA;fact_checker = Agent(name=&#34;fact_checker&#34;, instruction=&#34;Check factual consistency...&#34;)&#xA;style_enforcer = Agent(name=&#34;style_enforcer&#34;, instruction=&#34;Enforce style guidelines...&#34;)&#xA;&#xA;grader = Agent(name=&#34;grader&#34;, instruction=&#34;Combine feedback into a structured report.&#34;)&#xA;&#xA;parallel = ParallelLLM(&#xA;    fan_in_agent=grader,&#xA;    fan_out_agents=[proofreader, fact_checker, style_enforcer],&#xA;    llm_factory=OpenAIAugmentedLLM,&#xA;)&#xA;&#xA;result = await parallel.generate_str(&#34;Student short story submission: ...&#34;, RequestParams(model=&#34;gpt4-o&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/workflows/router/&#34;&gt;Router&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F5c0c0e9fe4def0b584c04d37849941da55e5e71c-2401x1000.png&amp;amp;w=3840&amp;amp;q=75&#34; alt=&#34;Router workflow (Image credit: Anthropic)&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Given an input, route to the &lt;code&gt;top_k&lt;/code&gt; most relevant categories. A category can be an Agent, an MCP server or a regular function.&lt;/p&gt; &#xA;&lt;p&gt;mcp-agent provides several router implementations, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/workflows/router/router_embedding.py&#34;&gt;&lt;code&gt;EmbeddingRouter&lt;/code&gt;&lt;/a&gt;: uses embedding models for classification&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/workflows/router/router_llm.py&#34;&gt;&lt;code&gt;LLMRouter&lt;/code&gt;&lt;/a&gt;: uses LLMs for classification&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/examples/workflow_router/main.py&#34;&gt;Link to full example&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def print_hello_world:&#xA;     print(&#34;Hello, world!&#34;)&#xA;&#xA;finder_agent = Agent(name=&#34;finder&#34;, server_names=[&#34;fetch&#34;, &#34;filesystem&#34;])&#xA;writer_agent = Agent(name=&#34;writer&#34;, server_names=[&#34;filesystem&#34;])&#xA;&#xA;llm = OpenAIAugmentedLLM()&#xA;router = LLMRouter(&#xA;    llm=llm,&#xA;    agents=[finder_agent, writer_agent],&#xA;    functions=[print_hello_world],&#xA;)&#xA;&#xA;results = await router.route( # Also available: route_to_agent, route_to_server&#xA;    request=&#34;Find and print the contents of README.md verbatim&#34;,&#xA;    top_k=1&#xA;)&#xA;chosen_agent = results[0].result&#xA;async with chosen_agent:&#xA;    ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/workflows/intent_classifier/&#34;&gt;IntentClassifier&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A close sibling of Router, the Intent Classifier pattern identifies the &lt;code&gt;top_k&lt;/code&gt; Intents that most closely match a given input. Just like a Router, mcp-agent provides both an &lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/workflows/intent_classifier/intent_classifier_embedding.py&#34;&gt;embedding&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/workflows/intent_classifier/intent_classifier_llm.py&#34;&gt;LLM-based&lt;/a&gt; intent classifier.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/workflows/evaluator_optimizer/evaluator_optimizer.py&#34;&gt;Evaluator-Optimizer&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F14f51e6406ccb29e695da48b17017e899a6119c7-2401x1000.png&amp;amp;w=3840&amp;amp;q=75&#34; alt=&#34;Evaluator-optimizer workflow (Image credit: Anthropic)&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;One LLM (the “optimizer”) refines a response, another (the “evaluator”) critiques it until a response exceeds a quality criteria.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/examples/workflow_evaluator_optimizer/main.py&#34;&gt;Link to full example&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;optimizer = Agent(name=&#34;cover_letter_writer&#34;, server_names=[&#34;fetch&#34;], instruction=&#34;Generate a cover letter ...&#34;)&#xA;evaluator = Agent(name=&#34;critiquer&#34;, instruction=&#34;Evaluate clarity, specificity, relevance...&#34;)&#xA;&#xA;llm = EvaluatorOptimizerLLM(&#xA;    optimizer=optimizer,&#xA;    evaluator=evaluator,&#xA;    llm_factory=OpenAIAugmentedLLM,&#xA;    min_rating=QualityRating.EXCELLENT, # Keep iterating until the minimum quality bar is reached&#xA;)&#xA;&#xA;result = await eo_llm.generate_str(&#34;Write a job cover letter for an AI framework developer role at LastMile AI.&#34;)&#xA;print(&#34;Final refined cover letter:&#34;, result)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/workflows/orchestrator/orchestrator.py&#34;&gt;Orchestrator-workers&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F8985fc683fae4780fb34eab1365ab78c7e51bc8e-2401x1000.png&amp;amp;w=3840&amp;amp;q=75&#34; alt=&#34;Orchestrator workflow (Image credit: Anthropic)&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A higher-level LLM generates a plan, then assigns them to sub-agents, and synthesizes the results. The Orchestrator workflow automatically parallelizes steps that can be done in parallel, and blocks on dependencies.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/examples/workflow_orchestrator_worker/main.py&#34;&gt;Link to full example&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;finder_agent = Agent(name=&#34;finder&#34;, server_names=[&#34;fetch&#34;, &#34;filesystem&#34;])&#xA;writer_agent = Agent(name=&#34;writer&#34;, server_names=[&#34;filesystem&#34;])&#xA;proofreader = Agent(name=&#34;proofreader&#34;, ...)&#xA;fact_checker = Agent(name=&#34;fact_checker&#34;, ...)&#xA;style_enforcer = Agent(name=&#34;style_enforcer&#34;, instructions=&#34;Use APA style guide from ...&#34;, server_names=[&#34;fetch&#34;])&#xA;&#xA;orchestrator = Orchestrator(&#xA;    llm_factory=AnthropicAugmentedLLM,&#xA;    available_agents=[finder_agent, writer_agent, proofreader, fact_checker, style_enforcer],&#xA;)&#xA;&#xA;task = &#34;Load short_story.md, evaluate it, produce a graded_report.md with multiple feedback aspects.&#34;&#xA;result = await orchestrator.generate_str(task, RequestParams(model=&#34;gpt-4o&#34;))&#xA;print(result)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/workflows/swarm/swarm.py&#34;&gt;Swarm&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;OpenAI has an experimental multi-agent pattern called &lt;a href=&#34;https://github.com/openai/swarm&#34;&gt;Swarm&lt;/a&gt;, which we provide a model-agnostic reference implementation for in mcp-agent.&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/openai/swarm/raw/main/assets/swarm_diagram.png?raw=true&#34; width=&#34;500&#34;&gt; &#xA;&lt;p&gt;The mcp-agent Swarm pattern works seamlessly with MCP servers, and is exposed as an &lt;code&gt;AugmentedLLM&lt;/code&gt;, allowing for composability with other patterns above.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/examples/workflow_swarm/main.py&#34;&gt;Link to full example&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;triage_agent = SwarmAgent(...)&#xA;flight_mod_agent = SwarmAgent(...)&#xA;lost_baggage_agent = SwarmAgent(...)&#xA;&#xA;# The triage agent decides whether to route to flight_mod_agent or lost_baggage_agent&#xA;swarm = AnthropicSwarm(agent=triage_agent, context_variables={...})&#xA;&#xA;test_input = &#34;My bag was not delivered!&#34;&#xA;result = await swarm.generate_str(test_input)&#xA;print(&#34;Result:&#34;, result)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Advanced&lt;/h2&gt; &#xA;&lt;h3&gt;Composability&lt;/h3&gt; &#xA;&lt;p&gt;An example of composability is using an &lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#evaluator-optimizer&#34;&gt;Evaluator-Optimizer&lt;/a&gt; workflow as the planner LLM inside the &lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#orchestrator-workers&#34;&gt;Orchestrator&lt;/a&gt; workflow. Generating a high-quality plan to execute is important for robust behavior, and an evaluator-optimizer can help ensure that.&lt;/p&gt; &#xA;&lt;p&gt;Doing so is seamless in mcp-agent, because each workflow is implemented as an &lt;code&gt;AugmentedLLM&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;optimizer = Agent(name=&#34;plan_optimizer&#34;, server_names=[...], instruction=&#34;Generate a plan given an objective ...&#34;)&#xA;evaluator = Agent(name=&#34;plan_evaluator&#34;, instruction=&#34;Evaluate logic, ordering and precision of plan......&#34;)&#xA;&#xA;planner_llm = EvaluatorOptimizerLLM(&#xA;    optimizer=optimizer,&#xA;    evaluator=evaluator,&#xA;    llm_factory=OpenAIAugmentedLLM,&#xA;    min_rating=QualityRating.EXCELLENT,&#xA;)&#xA;&#xA;orchestrator = Orchestrator(&#xA;    llm_factory=AnthropicAugmentedLLM,&#xA;    available_agents=[finder_agent, writer_agent, proofreader, fact_checker, style_enforcer],&#xA;    planner=planner_llm # It&#39;s that simple&#xA;)&#xA;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Signaling and Human Input&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Signaling&lt;/strong&gt;: The framework can pause/resume tasks. The agent or LLM might “signal” that it needs user input, so the workflow awaits. A developer may signal during a workflow to seek approval or review before continuing with a workflow.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Human Input&lt;/strong&gt;: If an Agent has a &lt;code&gt;human_input_callback&lt;/code&gt;, the LLM can call a &lt;code&gt;__human_input__&lt;/code&gt; tool to request user input mid-workflow.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example&lt;/summary&gt; &#xA; &lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/examples/workflow_swarm/main.py&#34;&gt;Swarm example&lt;/a&gt; shows this in action.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from mcp_agent.human_input.handler import console_input_callback&#xA;&#xA;lost_baggage = SwarmAgent(&#xA;    name=&#34;Lost baggage traversal&#34;,&#xA;    instruction=lambda context_variables: f&#34;&#34;&#34;&#xA;        {&#xA;        FLY_AIR_AGENT_PROMPT.format(&#xA;            customer_context=context_variables.get(&#34;customer_context&#34;, &#34;None&#34;),&#xA;            flight_context=context_variables.get(&#34;flight_context&#34;, &#34;None&#34;),&#xA;        )&#xA;    }\n Lost baggage policy: policies/lost_baggage_policy.md&#34;&#34;&#34;,&#xA;    functions=[&#xA;        escalate_to_agent,&#xA;        initiate_baggage_search,&#xA;        transfer_to_triage,&#xA;        case_resolved,&#xA;    ],&#xA;    server_names=[&#34;fetch&#34;, &#34;filesystem&#34;],&#xA;    human_input_callback=console_input_callback, # Request input from the console&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;App Config&lt;/h3&gt; &#xA;&lt;p&gt;Create an &lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/schema/mcp-agent.config.schema.json&#34;&gt;&lt;code&gt;mcp_agent.config.yaml&lt;/code&gt;&lt;/a&gt; and a gitignored &lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/examples/mcp_basic_agent/mcp_agent.secrets.yaml.example&#34;&gt;&lt;code&gt;mcp_agent.secrets.yaml&lt;/code&gt;&lt;/a&gt; to define MCP app configuration. This controls logging, execution, LLM provider APIs, and MCP server configuration.&lt;/p&gt; &#xA;&lt;h3&gt;MCP server management&lt;/h3&gt; &#xA;&lt;p&gt;mcp-agent makes it trivial to connect to MCP servers. Create an &lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/schema/mcp-agent.config.schema.json&#34;&gt;&lt;code&gt;mcp_agent.config.yaml&lt;/code&gt;&lt;/a&gt; to define server configuration under the &lt;code&gt;mcp&lt;/code&gt; section:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;mcp:&#xA;  servers:&#xA;    fetch:&#xA;      command: &#34;uvx&#34;&#xA;      args: [&#34;mcp-server-fetch&#34;]&#xA;      description: &#34;Fetch content at URLs from the world wide web&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/mcp/gen_client.py&#34;&gt;&lt;code&gt;gen_client&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Manage the lifecycle of an MCP server within an async context manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from mcp_agent.mcp.gen_client import gen_client&#xA;&#xA;async with gen_client(&#34;fetch&#34;) as fetch_client:&#xA;    # Fetch server is initialized and ready to use&#xA;    result = await fetch_client.list_tools()&#xA;&#xA;# Fetch server is automatically disconnected/shutdown&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The gen_client function makes it easy to spin up connections to MCP servers.&lt;/p&gt; &#xA;&lt;h4&gt;Persistent server connections&lt;/h4&gt; &#xA;&lt;p&gt;In many cases, you want an MCP server to stay online for persistent use (e.g. in a multi-step tool use workflow). For persistent connections, use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/(src/mcp_agent/mcp/gen_client.py)&#34;&gt;&lt;code&gt;connect&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/mcp/gen_client.py&#34;&gt;&lt;code&gt;disconnect&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from mcp_agent.mcp.gen_client import connect, disconnect&#xA;&#xA;fetch_client = None&#xA;try:&#xA;     fetch_client = connect(&#34;fetch&#34;)&#xA;     result = await fetch_client.list_tools()&#xA;finally:&#xA;     disconnect(&#34;fetch&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/mcp/mcp_connection_manager.py&#34;&gt;&lt;code&gt;MCPConnectionManager&lt;/code&gt;&lt;/a&gt; For even more fine-grained control over server connections, you can use the MCPConnectionManager.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from mcp_agent.context import get_current_context&#xA;from mcp_agent.mcp.mcp_connection_manager import MCPConnectionManager&#xA;&#xA;context = get_current_context()&#xA;connection_manager = MCPConnectionManager(context.server_registry)&#xA;&#xA;async with connection_manager:&#xA;fetch_client = await connection_manager.get_server(&#34;fetch&#34;) # Initializes fetch server&#xA;result = fetch_client.list_tool()&#xA;fetch_client2 = await connection_manager.get_server(&#34;fetch&#34;) # Reuses same server connection&#xA;&#xA;# All servers managed by connection manager are automatically disconnected/shut down&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;MCP Server Aggregator&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/mcp/mcp_aggregator.py&#34;&gt;&lt;code&gt;MCPAggregator&lt;/code&gt;&lt;/a&gt; acts as a &#34;server-of-servers&#34;. It provides a single MCP server interface for interacting with multiple MCP servers. This allows you to expose tools from multiple servers to LLM applications.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from mcp_agent.mcp.mcp_aggregator import MCPAggregator&#xA;&#xA;aggregator = await MCPAggregator.create(server_names=[&#34;fetch&#34;, &#34;filesystem&#34;])&#xA;&#xA;async with aggregator:&#xA;   # combined list of tools exposed by &#39;fetch&#39; and &#39;filesystem&#39; servers&#xA;   tools = await aggregator.list_tools()&#xA;&#xA;   # namespacing -- invokes the &#39;fetch&#39; server to call the &#39;fetch&#39; tool&#xA;   fetch_result = await aggregator.call_tool(name=&#34;fetch-fetch&#34;, arguments={&#34;url&#34;: &#34;https://www.anthropic.com/research/building-effective-agents&#34;})&#xA;&#xA;   # no namespacing -- first server in the aggregator exposing that tool wins&#xA;   read_file_result = await aggregator.call_tool(name=&#34;read_file&#34;, arguments={})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome any and all kinds of contributions. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING guidelines&lt;/a&gt; to get started.&lt;/p&gt; &#xA;&lt;h3&gt;Special Mentions&lt;/h3&gt; &#xA;&lt;p&gt;There have already been incredible community contributors who are driving this project forward:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/evalstate&#34;&gt;Shaun Smith (@evalstate)&lt;/a&gt; -- who has been leading the charge on countless complex improvements, both to &lt;code&gt;mcp-agent&lt;/code&gt; and generally to the MCP ecosystem.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/StreetLamb&#34;&gt;Jerron Lim (@StreetLamb)&lt;/a&gt; -- who has contributed countless hours and excellent examples, and great ideas to the project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jasonsum&#34;&gt;Jason Summer (@jasonsum)&lt;/a&gt; -- for identifying several issues and adapting his Gmail MCP server to work with mcp-agent&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;We will be adding a detailed roadmap (ideally driven by your feedback). The current set of priorities include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Durable Execution&lt;/strong&gt; -- allow workflows to pause/resume and serialize state so they can be replayed or be paused indefinitely. We are working on integrating &lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/executor/temporal.py&#34;&gt;Temporal&lt;/a&gt; for this purpose.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Memory&lt;/strong&gt; -- adding support for long-term memory&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Streaming&lt;/strong&gt; -- Support streaming listeners for iterative progress&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Additional MCP capabilities&lt;/strong&gt; -- Expand beyond tool calls to support: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Resources&lt;/li&gt; &#xA;   &lt;li&gt;Prompts&lt;/li&gt; &#xA;   &lt;li&gt;Notifications&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQs&lt;/h2&gt; &#xA;&lt;h3&gt;What are the core benefits of using mcp-agent?&lt;/h3&gt; &#xA;&lt;p&gt;mcp-agent provides a streamlined approach to building AI agents using capabilities exposed by &lt;strong&gt;MCP&lt;/strong&gt; (Model Context Protocol) servers.&lt;/p&gt; &#xA;&lt;p&gt;MCP is quite low-level, and this framework handles the mechanics of connecting to servers, working with LLMs, handling external signals (like human input) and supporting persistent state via durable execution. That lets you, the developer, focus on the core business logic of your AI application.&lt;/p&gt; &#xA;&lt;p&gt;Core benefits:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🤝 &lt;strong&gt;Interoperability&lt;/strong&gt;: ensures that any tool exposed by any number of MCP servers can seamlessly plug in to your agents.&lt;/li&gt; &#xA; &lt;li&gt;⛓️ &lt;strong&gt;Composability &amp;amp; Cutstomizability&lt;/strong&gt;: Implements well-defined workflows, but in a composable way that enables compound workflows, and allows full customization across model provider, logging, orchestrator, etc.&lt;/li&gt; &#xA; &lt;li&gt;💻 &lt;strong&gt;Programmatic control flow&lt;/strong&gt;: Keeps things simple as developers just write code instead of thinking in graphs, nodes and edges. For branching logic, you write &lt;code&gt;if&lt;/code&gt; statements. For cycles, use &lt;code&gt;while&lt;/code&gt; loops.&lt;/li&gt; &#xA; &lt;li&gt;🖐️ &lt;strong&gt;Human Input &amp;amp; Signals&lt;/strong&gt;: Supports pausing workflows for external signals, such as human input, which are exposed as tool calls an Agent can make.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Do you need an MCP client to use mcp-agent?&lt;/h3&gt; &#xA;&lt;p&gt;No, you can use mcp-agent anywhere, since it handles MCPClient creation for you. This allows you to leverage MCP servers outside of MCP hosts like Claude Desktop.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s all the ways you can set up your mcp-agent application:&lt;/p&gt; &#xA;&lt;h4&gt;MCP-Agent Server&lt;/h4&gt; &#xA;&lt;p&gt;You can expose mcp-agent applications as MCP servers themselves (see &lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/examples/mcp_agent_server&#34;&gt;example&lt;/a&gt;), allowing MCP clients to interface with sophisticated AI workflows using the standard tools API of MCP servers. This is effectively a server-of-servers.&lt;/p&gt; &#xA;&lt;h4&gt;MCP Client or Host&lt;/h4&gt; &#xA;&lt;p&gt;You can embed mcp-agent in an MCP client directly to manage the orchestration across multiple MCP servers.&lt;/p&gt; &#xA;&lt;h4&gt;Standalone&lt;/h4&gt; &#xA;&lt;p&gt;You can use mcp-agent applications in a standalone fashion (i.e. they aren&#39;t part of an MCP client). The &lt;a href=&#34;https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/examples/&#34;&gt;&lt;code&gt;examples&lt;/code&gt;&lt;/a&gt; are all standalone applications.&lt;/p&gt; &#xA;&lt;h3&gt;Tell me a fun fact&lt;/h3&gt; &#xA;&lt;p&gt;I debated naming this project &lt;em&gt;silsila&lt;/em&gt; (سلسلہ), which means chain of events in Urdu. mcp-agent is more matter-of-fact, but there&#39;s still an easter egg in the project paying homage to silsila.&lt;/p&gt;</summary>
  </entry>
</feed>