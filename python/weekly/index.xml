<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-10T02:02:52Z</updated>
  <subtitle>Weekly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>francozappa/bluffs</title>
    <updated>2023-12-10T02:02:52Z</updated>
    <id>tag:github.com,2023-12-10:/francozappa/bluffs</id>
    <link href="https://github.com/francozappa/bluffs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bluetooth Forward and Future Secrecy Attacks and Defenses (BLUFFS) [CVE 2023-24023]&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;bluffs&lt;/h1&gt; &#xA;&lt;p&gt;Bluetooth Forward and Future Secrecy Attacks and Defenses (BLUFFS) [CVE 2023-24023]&lt;/p&gt; &#xA;&lt;h2&gt;pcap&lt;/h2&gt; &#xA;&lt;p&gt;Contains pcap samples captured while testing the attacks.&lt;/p&gt; &#xA;&lt;h2&gt;checker&lt;/h2&gt; &#xA;&lt;p&gt;Contains the parser.&lt;/p&gt; &#xA;&lt;h2&gt;device&lt;/h2&gt; &#xA;&lt;p&gt;Contains the ARM patches (&lt;code&gt;*.s&lt;/code&gt;) and the &lt;code&gt;bluffs.py&lt;/code&gt; script to test the attacks.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>VikParuchuri/marker</title>
    <updated>2023-12-10T02:02:52Z</updated>
    <id>tag:github.com,2023-12-10:/VikParuchuri/marker</id>
    <link href="https://github.com/VikParuchuri/marker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Convert PDF to markdown quickly with high accuracy&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Marker&lt;/h1&gt; &#xA;&lt;p&gt;Marker converts PDF, EPUB, and MOBI to markdown. It&#39;s 10x faster than nougat, more accurate on most documents, and has low hallucination risk.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for a range of PDF documents (optimized for books and scientific papers)&lt;/li&gt; &#xA; &lt;li&gt;Removes headers/footers/other artifacts&lt;/li&gt; &#xA; &lt;li&gt;Converts most equations to latex&lt;/li&gt; &#xA; &lt;li&gt;Formats code blocks and tables&lt;/li&gt; &#xA; &lt;li&gt;Support for multiple languages (although most testing is done in English). See &lt;code&gt;settings.py&lt;/code&gt; for a language list.&lt;/li&gt; &#xA; &lt;li&gt;Works on GPU, CPU, or MPS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;Marker is a pipeline of deep learning models:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extract text, OCR if necessary (heuristics, tesseract)&lt;/li&gt; &#xA; &lt;li&gt;Detect page layout (&lt;a href=&#34;https://huggingface.co/vikp/layout_segmenter&#34;&gt;layout segmenter&lt;/a&gt;, &lt;a href=&#34;https://huggingface.co/vikp/column_detector&#34;&gt;column detector&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Clean and format each block (heuristics, &lt;a href=&#34;https://huggingface.co/facebook/nougat-base&#34;&gt;nougat&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Combine blocks and postprocess complete text (heuristics, &lt;a href=&#34;https://huggingface.co/vikp/pdf_postprocessor_t5&#34;&gt;pdf_postprocessor&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Relying on autoregressive forward passes to generate text is slow and prone to hallucination/repetition. From the nougat paper: &lt;code&gt;We observed [repetition] in 1.5% of pages in the test set, but the frequency increases for out-of-domain documents.&lt;/code&gt; In my anecdotal testing, repetitions happen on 5%+ of out-of-domain (non-arXiv) pages.&lt;/p&gt; &#xA;&lt;p&gt;Nougat is an amazing model, but I wanted a faster and more general purpose solution. Marker is 10x faster and has low hallucination risk because it only passes equation blocks through an LLM forward pass.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;PDF&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Marker&lt;/th&gt; &#xA;   &lt;th&gt;Nougat&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://greenteapress.com/thinkpython/thinkpython.pdf&#34;&gt;Think Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Textbook&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/VikParuchuri/marker/raw/master/data/examples/marker/thinkpython.md&#34;&gt;View&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/VikParuchuri/marker/raw/master/data/examples/nougat/thinkpython.md&#34;&gt;View&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://greenteapress.com/thinkos/thinkos.pdf&#34;&gt;Think OS&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Textbook&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/VikParuchuri/marker/raw/master/data/examples/marker/thinkos.md&#34;&gt;View&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/VikParuchuri/marker/raw/master/data/examples/nougat/thinkos.md&#34;&gt;View&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/pdf/2101.03961.pdf&#34;&gt;Switch Transformers&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;arXiv paper&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/VikParuchuri/marker/raw/master/data/examples/marker/switch_transformers.md&#34;&gt;View&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/VikParuchuri/marker/raw/master/data/examples/nougat/switch_transformers.md&#34;&gt;View&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/pdf/1804.07821.pdf&#34;&gt;Multi-column CNN&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;arXiv paper&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/VikParuchuri/marker/raw/master/data/examples/marker/multicolcnn.md&#34;&gt;View&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/VikParuchuri/marker/raw/master/data/examples/nougat/multicolcnn.md&#34;&gt;View&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VikParuchuri/marker/master/data/images/overall.png&#34; alt=&#34;Benchmark overall&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The above results are with marker and nougat setup so they each take ~3GB of VRAM on an A6000.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/marker/master/#benchmarks&#34;&gt;below&lt;/a&gt; for detailed speed and accuracy benchmarks, and instructions on how to run your own benchmarks.&lt;/p&gt; &#xA;&lt;h1&gt;Limitations&lt;/h1&gt; &#xA;&lt;p&gt;PDF is a tricky format, so marker will not always work perfectly. Here are some known limitations that are on the roadmap to address:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Marker will convert fewer equations to latex than nougat. This is because it has to first detect equations, then convert them without hallucation.&lt;/li&gt; &#xA; &lt;li&gt;Whitespace and indentations are not always respected.&lt;/li&gt; &#xA; &lt;li&gt;Not all lines/spans will be joined properly.&lt;/li&gt; &#xA; &lt;li&gt;Only languages similar to English (Spanish, French, German, Russian, etc) are supported. Languages with different character sets (Chinese, Japanese, Korean, etc) are not.&lt;/li&gt; &#xA; &lt;li&gt;This works best on digital PDFs that won&#39;t require a lot of OCR. It&#39;s optimized for speed, and limited OCR is used to fix errors.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;This has been tested on Mac and Linux (Ubuntu and Debian). You&#39;ll need python 3.9+ and &lt;a href=&#34;https://python-poetry.org/docs/#installing-with-the-official-installer&#34;&gt;poetry&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;First, clone the repo:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone https://github.com/VikParuchuri/marker.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd marker&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Linux&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install system requirements &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Optional: Install tesseract 5 by following &lt;a href=&#34;https://notesalexp.org/tesseract-ocr/html/&#34;&gt;these instructions&lt;/a&gt; or running &lt;code&gt;scripts/install/tesseract_5_install.sh&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Install ghostscript &amp;gt; 9.55 by following &lt;a href=&#34;https://ghostscript.readthedocs.io/en/latest/Install.html&#34;&gt;these instructions&lt;/a&gt; or running &lt;code&gt;scripts/install/ghostscript_install.sh&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Install other requirements with &lt;code&gt;cat scripts/install/apt-requirements.txt | xargs sudo apt-get install -y&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Set the tesseract data folder path &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Find the tesseract data folder &lt;code&gt;tessdata&lt;/code&gt; with &lt;code&gt;find / -name tessdata&lt;/code&gt;. Make sure to use the one corresponding to the latest tesseract version if you have multiple.&lt;/li&gt; &#xA;   &lt;li&gt;Create a &lt;code&gt;local.env&lt;/code&gt; file in the root &lt;code&gt;marker&lt;/code&gt; folder with &lt;code&gt;TESSDATA_PREFIX=/path/to/tessdata&lt;/code&gt; inside it&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install python requirements &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;poetry install&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;poetry shell&lt;/code&gt; to activate your poetry venv&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Update pytorch since poetry doesn&#39;t play nicely with it &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;GPU only: run &lt;code&gt;pip install torch&lt;/code&gt; to install other torch dependencies.&lt;/li&gt; &#xA;   &lt;li&gt;CPU only: Uninstall torch with &lt;code&gt;poetry remove torch&lt;/code&gt;, then follow the &lt;a href=&#34;https://pytorch.org/get-started/locally/&#34;&gt;CPU install&lt;/a&gt; instructions.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Mac&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install system requirements from &lt;code&gt;scripts/install/brew-requirements.txt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set the tesseract data folder path &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Find the tesseract data folder &lt;code&gt;tessdata&lt;/code&gt; with &lt;code&gt;brew list tesseract&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Create a &lt;code&gt;local.env&lt;/code&gt; file in the root &lt;code&gt;marker&lt;/code&gt; folder with &lt;code&gt;TESSDATA_PREFIX=/path/to/tessdata&lt;/code&gt; inside it&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install python requirements &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;poetry install&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;poetry shell&lt;/code&gt; to activate your poetry venv&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;First, some configuration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Set your torch device in the &lt;code&gt;local.env&lt;/code&gt; file. For example, &lt;code&gt;TORCH_DEVICE=cuda&lt;/code&gt; or &lt;code&gt;TORCH_DEVICE=mps&lt;/code&gt;. &lt;code&gt;cpu&lt;/code&gt; is the default. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If using GPU, set &lt;code&gt;INFERENCE_RAM&lt;/code&gt; to your GPU VRAM (per GPU). For example, if you have 16 GB of VRAM, set &lt;code&gt;INFERENCE_RAM=16&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Depending on your document types, marker&#39;s average memory usage per task can vary slightly. You can configure &lt;code&gt;VRAM_PER_TASK&lt;/code&gt; to adjust this if you notice tasks failing with GPU out of memory errors.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Inspect the other settings in &lt;code&gt;marker/settings.py&lt;/code&gt;. You can override any settings in the &lt;code&gt;local.env&lt;/code&gt; file, or by setting environment variables. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;By default, the final editor model is off. Turn it on with &lt;code&gt;ENABLE_EDITOR_MODEL&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;By default, marker will use ocrmypdf for OCR, which is slower than base tesseract, but higher quality. You can change this with the &lt;code&gt;OCR_ENGINE&lt;/code&gt; setting.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Convert a single file&lt;/h2&gt; &#xA;&lt;p&gt;Run &lt;code&gt;convert_single.py&lt;/code&gt;, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python convert_single.py /path/to/file.pdf /path/to/output.md --parallel_factor 2 --max_pages 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--parallel_factor&lt;/code&gt; is how much to increase batch size and parallel OCR workers by. Higher numbers will take more VRAM and CPU, but process faster. Set to 1 by default.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--max_pages&lt;/code&gt; is the maximum number of pages to process. Omit this to convert the entire document.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Make sure the &lt;code&gt;DEFAULT_LANG&lt;/code&gt; setting is set appropriately for your document.&lt;/p&gt; &#xA;&lt;h2&gt;Convert multiple files&lt;/h2&gt; &#xA;&lt;p&gt;Run &lt;code&gt;convert.py&lt;/code&gt;, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python convert.py /path/to/input/folder /path/to/output/folder --workers 10 --max 10 --metadata_file /path/to/metadata.json --min_length 10000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--workers&lt;/code&gt; is the number of pdfs to convert at once. This is set to 1 by default, but you can increase it to increase throughput, at the cost of more CPU/GPU usage. Parallelism will not increase beyond &lt;code&gt;INFERENCE_RAM / VRAM_PER_TASK&lt;/code&gt; if you&#39;re using GPU.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--max&lt;/code&gt; is the maximum number of pdfs to convert. Omit this to convert all pdfs in the folder.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--metadata_file&lt;/code&gt; is an optional path to a json file with metadata about the pdfs. If you provide it, it will be used to set the language for each pdf. If not, &lt;code&gt;DEFAULT_LANG&lt;/code&gt; will be used. The format is:&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--min_length&lt;/code&gt; is the minimum number of characters that need to be extracted from a pdf before it will be considered for processing. If you&#39;re processing a lot of pdfs, I recommend setting this to avoid OCRing pdfs that are mostly images. (slows everything down)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;pdf1.pdf&#34;: {&#34;language&#34;: &#34;English&#34;},&#xA;  &#34;pdf2.pdf&#34;: {&#34;language&#34;: &#34;Spanish&#34;},&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Convert multiple files on multiple GPUs&lt;/h2&gt; &#xA;&lt;p&gt;Run &lt;code&gt;chunk_convert.sh&lt;/code&gt;, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;MIN_LENGTH=10000 METADATA_FILE=../pdf_meta.json NUM_DEVICES=4 NUM_WORKERS=15 bash chunk_convert.sh ../pdf_in ../md_out&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;METADATA_FILE&lt;/code&gt; is an optional path to a json file with metadata about the pdfs. See above for the format.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NUM_DEVICES&lt;/code&gt; is the number of GPUs to use. Should be &lt;code&gt;2&lt;/code&gt; or greater.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NUM_WORKERS&lt;/code&gt; is the number of parallel processes to run on each GPU. Per-GPU parallelism will not increase beyond &lt;code&gt;INFERENCE_RAM / VRAM_PER_TASK&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MIN_LENGTH&lt;/code&gt; is the minimum number of characters that need to be extracted from a pdf before it will be considered for processing. If you&#39;re processing a lot of pdfs, I recommend setting this to avoid OCRing pdfs that are mostly images. (slows everything down)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Benchmarks&lt;/h1&gt; &#xA;&lt;p&gt;Benchmarking PDF extraction quality is hard. I&#39;ve created a test set by finding books and scientific papers that have a pdf version and a latex source. I convert the latex to text, and compare the reference to the output of text extraction methods.&lt;/p&gt; &#xA;&lt;p&gt;Benchmarks show that marker is 10x faster than nougat, and more accurate outside arXiv (nougat was trained on arXiv data). We show naive text extraction (pulling text out of the pdf with no processing) for comparison.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Speed&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Average Score&lt;/th&gt; &#xA;   &lt;th&gt;Time per page&lt;/th&gt; &#xA;   &lt;th&gt;Time per document&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;naive&lt;/td&gt; &#xA;   &lt;td&gt;0.350727&lt;/td&gt; &#xA;   &lt;td&gt;0.00152378&lt;/td&gt; &#xA;   &lt;td&gt;0.326524&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;marker&lt;/td&gt; &#xA;   &lt;td&gt;0.641062&lt;/td&gt; &#xA;   &lt;td&gt;0.360622&lt;/td&gt; &#xA;   &lt;td&gt;77.2762&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nougat&lt;/td&gt; &#xA;   &lt;td&gt;0.629211&lt;/td&gt; &#xA;   &lt;td&gt;3.77259&lt;/td&gt; &#xA;   &lt;td&gt;808.413&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Accuracy&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;First 3 are non-arXiv books, last 3 are arXiv papers.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;switch_trans.pdf&lt;/th&gt; &#xA;   &lt;th&gt;crowd.pdf&lt;/th&gt; &#xA;   &lt;th&gt;multicolcnn.pdf&lt;/th&gt; &#xA;   &lt;th&gt;thinkos.pdf&lt;/th&gt; &#xA;   &lt;th&gt;thinkdsp.pdf&lt;/th&gt; &#xA;   &lt;th&gt;thinkpython.pdf&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;naive&lt;/td&gt; &#xA;   &lt;td&gt;0.244114&lt;/td&gt; &#xA;   &lt;td&gt;0.140669&lt;/td&gt; &#xA;   &lt;td&gt;0.0868221&lt;/td&gt; &#xA;   &lt;td&gt;0.366856&lt;/td&gt; &#xA;   &lt;td&gt;0.412521&lt;/td&gt; &#xA;   &lt;td&gt;0.468281&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;marker&lt;/td&gt; &#xA;   &lt;td&gt;0.482091&lt;/td&gt; &#xA;   &lt;td&gt;0.466882&lt;/td&gt; &#xA;   &lt;td&gt;0.537062&lt;/td&gt; &#xA;   &lt;td&gt;0.754347&lt;/td&gt; &#xA;   &lt;td&gt;0.78825&lt;/td&gt; &#xA;   &lt;td&gt;0.779536&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nougat&lt;/td&gt; &#xA;   &lt;td&gt;0.696458&lt;/td&gt; &#xA;   &lt;td&gt;0.552337&lt;/td&gt; &#xA;   &lt;td&gt;0.735099&lt;/td&gt; &#xA;   &lt;td&gt;0.655002&lt;/td&gt; &#xA;   &lt;td&gt;0.645704&lt;/td&gt; &#xA;   &lt;td&gt;0.650282&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Peak GPU memory usage during the benchmark is &lt;code&gt;3.3GB&lt;/code&gt; for nougat, and &lt;code&gt;3.1GB&lt;/code&gt; for marker. Benchmarks were run on an A6000.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Throughput&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Marker takes about 2GB of VRAM on average per task, so you can convert 24 documents in parallel on an A6000.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VikParuchuri/marker/master/data/images/per_doc.png&#34; alt=&#34;Benchmark results&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Running your own benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;You can benchmark the performance of marker on your machine. First, download the benchmark data &lt;a href=&#34;https://drive.google.com/file/d/1WiN4K2-jQfwyQMe4wSSurbpz3hxo2fG9/view?usp=drive_link&#34;&gt;here&lt;/a&gt; and unzip.&lt;/p&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;benchmark.py&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python benchmark.py data/pdfs data/references report.json --nougat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will benchmark marker against other text extraction methods. It sets up batch sizes for nougat and marker to use a similar amount of GPU RAM for each.&lt;/p&gt; &#xA;&lt;p&gt;Omit &lt;code&gt;--nougat&lt;/code&gt; to exclude nougat from the benchmark. I don&#39;t recommend running nougat on CPU, since it is very slow.&lt;/p&gt; &#xA;&lt;h1&gt;Commercial usage&lt;/h1&gt; &#xA;&lt;p&gt;Due to the licensing of the underlying models like layoutlmv3 and nougat, this is only suitable for noncommercial usage.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m building a version that can be used commercially, by stripping out the dependencies below. If you would like to get early access, email me at &lt;a href=&#34;mailto:marker@vikas.sh&#34;&gt;marker@vikas.sh&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here are the non-commercial/restrictive dependencies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;LayoutLMv3: CC BY-NC-SA 4.0 . &lt;a href=&#34;https://huggingface.co/microsoft/layoutlmv3-base&#34;&gt;Source&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nougat: CC-BY-NC . &lt;a href=&#34;https://github.com/facebookresearch/nougat&#34;&gt;Source&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PyMuPDF - GPL . &lt;a href=&#34;https://pymupdf.readthedocs.io/en/latest/about.html#license-and-copyright&#34;&gt;Source&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Other dependencies/datasets are openly licensed (doclaynet, byt5), or used in a way that is compatible with commercial usage (ghostscript).&lt;/p&gt; &#xA;&lt;h1&gt;Thanks&lt;/h1&gt; &#xA;&lt;p&gt;This work would not have been possible without amazing open source models and datasets, including (but not limited to):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nougat from Meta&lt;/li&gt; &#xA; &lt;li&gt;Layoutlmv3 from Microsoft&lt;/li&gt; &#xA; &lt;li&gt;DocLayNet from IBM&lt;/li&gt; &#xA; &lt;li&gt;ByT5 from Google&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thank you to the authors of these models and datasets for making them available to the community!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>LC044/WeChatMsg</title>
    <updated>2023-12-10T02:02:52Z</updated>
    <id>tag:github.com,2023-12-10:/LC044/WeChatMsg</id>
    <link href="https://github.com/LC044/WeChatMsg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;提取微信聊天记录，将其导出成HTML、Word、CSV文档永久保存，对聊天记录进行分析生成年度聊天报告&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;我的数据我做主&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/WeChat-留痕-blue.svg&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/LC044/WeChatMsg/stargazers&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/LC044/WeChatMsg.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/LC044/WeChatMsg/issues&#34;&gt; &lt;img alt=&#34;Issues&#34; src=&#34;https://img.shields.io/github/issues/LC044/WeChatMsg?color=0088ff&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/LC044/WeChatMsg/master/doc/readme.md&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/文档-最新-brightgreen.svg&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/LC044/WeChatMsg/master/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/LC044/WeChatMsg&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LC044/WeChatMsg/master/doc/images/logo.png&#34; height=&#34;240&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;div style=&#34;background-color: #eaf7ea; border-radius: 10px; padding: 20px; position: relative;&#34;&gt; &#xA;  &lt;div style=&#34;position: relative;&#34;&gt; &#xA;   &lt;div style=&#34;position: absolute;top: 0;bottom: 0;left: 0;width: 2px;background-color: #000000;&#34;&gt;&lt;/div&gt; &#xA;   &lt;h2&gt;前言&lt;/h2&gt; &#xA;   &lt;div style=&#34;text-indent: 2em;&#34;&gt; &#xA;    &lt;p style=&#34;text-indent:2em;&#34;&gt;我深信有意义的不是微信，而是隐藏在对话框背后的一个个&lt;strong&gt;深刻故事&lt;/strong&gt;。未来，每个人都能拥有AI的陪伴，而你的数据能够赋予它有关与你过去的珍贵记忆。我希望每个人都有将自己的生活痕迹👨‍👩‍👦👚🥗🏠️🚴🧋⛹️🛌🛀留存的权利，而不是将之遗忘💀。&lt;/p&gt; &#xA;    &lt;p style=&#34;text-indent:2em;&#34;&gt;AI的发展不仅仅是技术的提升，更是情感💞的延续。每一个对话、每一个互动都是生活中独一无二的片段，是真实而动人的情感交流。因此，我希望AI工作者们能够&lt;strong&gt;善用这些自己的数据&lt;/strong&gt;，用于培训独特的、属于个体的人工智能。让&lt;strong&gt;个人AI成为生活中的朋友&lt;/strong&gt;，能够理解、记录并分享我们的欢笑、泪水和成长。&lt;/p&gt; &#xA;    &lt;p style=&#34;text-indent:2em;&#34;&gt;那天，AI不再是高不可攀的存在，而是融入寻常百姓家的一部分。因为&lt;strong&gt;每个人能拥有自己的AI&lt;/strong&gt;，将科技的力量融入生活的方方面面。这是一场关于真情实感的革命，一场让技术变得更加人性化的探索，让我们共同见证未来的美好。&lt;/p&gt; &#xA;    &lt;p align=&#34;center&#34;&gt;&lt;strong&gt;所以《留痕》&lt;/strong&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;🍉功能&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;🔒️🔑🔓️手机本地微信数据库🐶&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;🔒️🔑🔓️PC端本地微信数据库🐶&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;还原微信聊天界面&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;🗨文本✅&lt;/li&gt; &#xA;   &lt;li&gt;🏝图片✅&lt;/li&gt; &#xA;   &lt;li&gt;🐻‍❄️表情包✅&lt;/li&gt; &#xA;   &lt;li&gt;拍一拍等系统消息✅&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;导出聊天记录&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;sqlite数据库✅&lt;/li&gt; &#xA;   &lt;li&gt;HTML(文本、图片、视频、表情包)✅&lt;/li&gt; &#xA;   &lt;li&gt;Word文档✅&lt;/li&gt; &#xA;   &lt;li&gt;CSV文档✅&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;分析聊天数据，做成可视化年报(急需前端大佬提供优质模板)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;🔥&lt;strong&gt;项目持续更新中&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;导出全部表情包❎&lt;/li&gt; &#xA;   &lt;li&gt;合并多个备份数据❎&lt;/li&gt; &#xA;   &lt;li&gt;语音❎&lt;/li&gt; &#xA;   &lt;li&gt;文件❎&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;小伙伴们想要其他功能可以留言哦📬&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;有任何问题可以随时联系我(&lt;a href=&#34;mailto:863909694@qq.com&#34;&gt;863909694@qq.com&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;为了方便大家交流，我新建了一个QQ群💬：&lt;strong&gt;474379264&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;大家有任何想法💡、建议或bug可以群里反馈给我&lt;/p&gt; &#xA;&lt;h2&gt;🥤效果&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;img alt=&#34;聊天界面&#34; src=&#34;https://raw.githubusercontent.com/LC044/WeChatMsg/master/doc/images/chat_.png&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LC044/WeChatMsg/master/doc/images/image-20230520235220104.png&#34; alt=&#34;image-20230520235220104&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LC044/WeChatMsg/master/doc/images/image-20230520235338305.png&#34; alt=&#34;image-20230520235338305&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LC044/WeChatMsg/master/doc/images/image-20230520235351749.png&#34; alt=&#34;image-20230520235351749&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LC044/WeChatMsg/master/doc/images/image-20230520235400772.png&#34; alt=&#34;image-20230520235400772&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LC044/WeChatMsg/master/doc/images/image-20230520235409112.png&#34; alt=&#34;image-20230520235409112&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LC044/WeChatMsg/master/doc/images/image-20230520235422128.png&#34; alt=&#34;image-20230520235422128&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LC044/WeChatMsg/master/doc/images/image-20230520235431091.png&#34; alt=&#34;image-20230520235431091&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h1&gt;⌛使用&lt;/h1&gt; &#xA;&lt;p&gt;小白可以先点个star⭐(💘项目不断更新中),然后去旁边&lt;a href=&#34;https://github.com/LC044/WeChatMsg/releases&#34;&gt;Release&lt;/a&gt; 下载打包好的exe可执行文件，双击即可运行&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;⚠️注意：若出现闪退情况请右击选择用管理员身份运行exe程序，该程序不存在任何病毒，若杀毒软件提示有风险选择略过即可&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;不懂编程的请移步&lt;a href=&#34;https://github.com/LC044/WeChatMsg/releases&#34;&gt;Release&lt;/a&gt;，下面的东西看了可能要长脑子啦🐶&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;PC版微信&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;h3&gt;1. 安装&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Python&amp;gt;=3.10&#xA;git clone https://github.com/LC044/WeChatMsg&#xA;cd WeChatMsg&#xA;pip install -r requirements_pc.txt -i https://pypi.tuna.tsinghua.edu.cn/simple&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;2. 使用&lt;/h3&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;登录微信&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;手机端使用聊天记录迁移功能将聊天数据迁移到电脑上&lt;/p&gt; &#xA; &lt;p&gt;操作步骤：&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;安卓： 手机微信-&amp;gt;我-&amp;gt;设置-&amp;gt;聊天-&amp;gt;聊天记录迁移与备份-&amp;gt;迁移-&amp;gt; 迁移到电脑微信（迁移完成后重启微信）&lt;a href=&#34;https://github.com/LC044/WeChatMsg/issues/27&#34;&gt;否则&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;iOS： 手机微信-&amp;gt;我-&amp;gt;设置-&amp;gt;通用-&amp;gt;聊天记录迁移与备份-&amp;gt;迁移-&amp;gt; 迁移到电脑微信（迁移完成后重启微信）&lt;a href=&#34;https://github.com/LC044/WeChatMsg/issues/27&#34;&gt;否则&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;ol start=&#34;2&#34;&gt; &#xA;  &lt;li&gt;运行程序&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python main_pc.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;3&#34;&gt; &#xA;  &lt;li&gt;点击获取信息&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LC044/WeChatMsg/master/doc/images/pc_decrypt_info.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA; &lt;ol start=&#34;4&#34;&gt; &#xA;  &lt;li&gt;设置微信安装路径(如果自动设置好了就&lt;strong&gt;不用管&lt;/strong&gt;了)&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;可以到微信-&amp;gt;设置-&amp;gt;文件管理查看&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LC044/WeChatMsg/master/doc/images/setting.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;点击&lt;strong&gt;设置微信路径&lt;/strong&gt;按钮，选择该文件夹路径下的带有wxid_xxx的路径(没有wxid的话先选择其中一个文件夹不对的话换其他文件夹)&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LC044/WeChatMsg/master/doc/images/path_select.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA; &lt;ol start=&#34;5&#34;&gt; &#xA;  &lt;li&gt;获取到密钥和微信路径之后点击开始解密&lt;/li&gt; &#xA;  &lt;li&gt;解密后的数据库文件保存在./app/DataBase/Msg路径下&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;h3&gt;3. 查看&lt;/h3&gt; &#xA; &lt;p&gt;随便下载一个SQLite数据库查看软件就能打开数据库，例如&lt;a href=&#34;https://sqlitebrowser.org/dl/&#34;&gt;DB Browser for SQLite&lt;/a&gt; （不懂SQL的稍微学下SQL咱再来，或者自动跳过该步骤直接往下看最终效果）&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LC044/WeChatMsg/master/doc/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BB%8B%E7%BB%8D.md&#34;&gt;数据库功能介绍&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LC044/WeChatMsg/master/doc/%E7%94%B5%E8%84%91%E7%AB%AF%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B.md&#34;&gt;更多功能介绍&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;显示效果&lt;/p&gt; &#xA; &lt;img alt=&#34;聊天界面&#34; src=&#34;https://raw.githubusercontent.com/LC044/WeChatMsg/master/doc/images/chat_.png&#34;&gt; &#xA; &lt;h3&gt;4. pc端功能展示&lt;/h3&gt; &#xA; &lt;p&gt;恭喜你解密成功，来看看效果吧~&lt;/p&gt; &#xA; &lt;h4&gt;4.1 最上方导航栏&lt;/h4&gt; &#xA; &lt;p&gt;可以点击获取教程，相关信息，导出全部信息的csv文件。&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LC044/WeChatMsg/master/doc/images/main_window.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA; &lt;h4&gt;4.2 聊天界面&lt;/h4&gt; &#xA; &lt;p&gt;点击&lt;strong&gt;左侧导航栏——&amp;gt;聊天&lt;/strong&gt; ，会随机跳转到某一个好友的界面，滚轮滚动，可以向上翻看更早的聊天记录（温馨提示：可能在翻的时候会有卡顿的现象，是因为数据加载需要时间，后期我们会继续优化嗷~ ）。目前聊天记录中文字、图片、表情包基本可以正常显示~&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LC044/WeChatMsg/master/doc/images/chat_window1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;当你想要查找某一位好友的信息时，可以在图中红框输入信息，点击Enter回车键，进行检索&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LC044/WeChatMsg/master/doc/images/chat_window2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA; &lt;h4&gt;4.3 好友界面&lt;/h4&gt; &#xA; &lt;p&gt;点击&lt;strong&gt;左侧导航栏——&amp;gt;好友&lt;/strong&gt;，会跳转到好友的界面，同样可以选择好友，右上方导航栏中有（1）统计信息（2）情感分析（3）年度报告（4）退出（5）导出聊天记录：可选择导出为word、csv、html格式。&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LC044/WeChatMsg/master/doc/images/contact_window.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;功能部分未集成或开发，请您耐心等待呀~&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;PC端使用过程中部分问题解决（可参考）&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;h4&gt;🤔如果您在pc端使用的时候出现问题，可以先参考以下方面，如果仍未解决，可以在群里交流~&lt;/h4&gt; &#xA; &lt;p&gt;如果您遇到下图所示的问题，是由于没有在电脑端登录微信&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LC044/WeChatMsg/master/doc/images/login_wx.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;如果您遇到下图所示的问题，需要先运行&lt;code&gt;decrypt_window&lt;/code&gt;的可执行文件或者源代码文件&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;python decrypt_window.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LC044/WeChatMsg/master/doc/images/decrypt_wx.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;如果您在运行可执行程序的时候出现闪退的现象，请右击软件使用管理员权限运行。&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LC044/WeChatMsg/master/doc/images/exe_file.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;如果您在获取信息的时候，&lt;code&gt;wxid&lt;/code&gt; 显示none，但是密钥是存在的，需要在微信文件保存的路径中选择该文件夹路径下的带有wxid_xxx的名字，填到wxid位置并继续点击&lt;code&gt;开始启动&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LC044/WeChatMsg/master/doc/images/with_wxid_name.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;如果出现如图所示的报错信息，将&lt;code&gt;app/database/msg&lt;/code&gt;文件夹删除，重新运行&lt;code&gt;main_pc.py&lt;/code&gt;。&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LC044/WeChatMsg/master/doc/images/err_log.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;导出数据成功之后，该文件位置与exe文件位置相同（或者在源码.data文件下）&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LC044/WeChatMsg/master/doc/images/message.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA; &lt;h4&gt;🤔注意&lt;/h4&gt; &#xA; &lt;p&gt;解密一个微信数据库之后，登录新的微信并不会实时更改&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;使用模拟器（支持可视化分析）&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;&lt;strong&gt;不推荐使用，PC端微信可视化功能马上实现&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;根据&lt;a href=&#34;https://blog.csdn.net/m0_59452630/article/details/124222235?spm=1001.2014.3001.5501&#34;&gt;教程&lt;/a&gt;获得两个文件 &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;auth_info_key_prefs.xml——解析数据库密码&lt;/li&gt; &#xA;    &lt;li&gt;EnMicroMsg.db——聊天数据库&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;上面这两个文件就可以&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;安装依赖库&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;python版本&amp;gt;=3.10&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;说明:用到了python3.10的match语法，不方便更换python版本的小伙伴可以把match(运行报错的地方)更改为if else&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;命令行运行以下代码（&lt;strong&gt;建议使用Pycharm打开项目，Pycharm会自动配置好所有东西，直接运行main.py即可&lt;/strong&gt;）&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;运行main.py&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python main.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;3&#34;&gt; &#xA;  &lt;li&gt;出现解密界面&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LC044/WeChatMsg/master/doc/images/image-20230521001305274.png&#34; alt=&#34;image-20230521001305274&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;按照提示选择上面获得的两个文件，等待解密完成，重新运行程序&lt;/p&gt; &#xA; &lt;ol start=&#34;4&#34;&gt; &#xA;  &lt;li&gt;进入主界面&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;这时候不显示头像，因为头像文件没有导入进来&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LC044/WeChatMsg/master/doc/images/image-20230521001547481.png&#34; alt=&#34;image-20230521001547481&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;根据&lt;a href=&#34;https://blog.csdn.net/m0_59452630/article/details/124222235?spm=1001.2014.3001.5501&#34;&gt;教程&lt;/a&gt; 将头像文件夹avatar复制到工程目录./app/data/目录下&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LC044/WeChatMsg/master/doc/images/image-20230521001726799.png&#34; alt=&#34;image-20230521001726799&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;如果想要显示聊天图像就把&lt;a href=&#34;https://blog.csdn.net/m0_59452630/article/details/124222235?spm=1001.2014.3001.5501&#34;&gt;教程&lt;/a&gt; 里的image2文件夹复制到./app/data文件夹里，效果跟上图一样&lt;/p&gt; &#xA; &lt;p&gt;复制进来之后再运行程序就有图像了&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LC044/WeChatMsg/master/doc/images/image-20230520235113261.png&#34; alt=&#34;image-20230520235113261&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;项目还有很多bug，希望大家能够及时反馈&lt;/h2&gt; &#xA;&lt;p&gt;项目地址：&lt;a href=&#34;https://github.com/LC044/WeChatMsg&#34;&gt;https://github.com/LC044/WeChatMsg&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;🏆致谢&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PC微信解密工具:&lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump&#34;&gt;https://github.com/xaoyaoo/PyWxDump&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PyQt组件库:&lt;a href=&#34;https://github.com/PyQt5/CustomWidgets&#34;&gt;https://github.com/PyQt5/CustomWidgets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;我的得力助手:&lt;a href=&#34;https://chat.openai.com/&#34;&gt;ChatGPT&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;声明：该项目有且仅有一个目的：“留痕”——我的数据我做主，前提是“我的数据”其次才是“我做主”，禁止任何人以任何形式将其用于任何非法用途，对于使用该程序所造成的任何后果，所有创作者不承担任何责任🙄&lt;br&gt; 该软件不会对您使用的微信造成任何影响，更不会对他人的微信造成任何影响，不能找回删除的聊天记录，任何企图篡改微信聊天数据的想法都是无稽之谈。本项目所有功能均建立在”前言“的基础之上，基于该项目的所有开发者均不能接受任何有悖于”前言“的功能需求，违者后果自负。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/?utm_source=bestxtools.com#LC044/WeChatMsg&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=LC044/WeChatMsg&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;🎄温馨提示&lt;/h1&gt; &#xA;&lt;p&gt;如果您在使用该软件的过程中&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;发现新的bug&lt;/li&gt; &#xA; &lt;li&gt;有新的功能诉求&lt;/li&gt; &#xA; &lt;li&gt;操作比较繁琐&lt;/li&gt; &#xA; &lt;li&gt;觉得UI不够美观&lt;/li&gt; &#xA; &lt;li&gt;等其他给您造成困扰的地方&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;请提起&lt;a href=&#34;https://github.com/LC044/WeChatMsg/issues&#34;&gt;issue&lt;/a&gt;或者添加QQ群(进群前先点个⭐哦):&lt;a href=&#34;https://raw.githubusercontent.com/LC044/WeChatMsg/master/doc/images/qq.jpg&#34;&gt;&lt;strong&gt;474379264&lt;/strong&gt;&lt;/a&gt; ，我将尽快为您解决问题&lt;/p&gt; &#xA;&lt;p&gt;如果您是一名开发者，有新的想法或建议，欢迎&lt;a href=&#34;https://github.com/LC044/WeChatMsg/forks&#34;&gt;fork&lt;/a&gt; 该项目并发起&lt;a href=&#34;https://github.com/LC044/WeChatMsg/pulls&#34;&gt;PR&lt;/a&gt;，我将把您的名字写入贡献者名单中&lt;/p&gt; &#xA;&lt;p&gt;另外本人硬件配置：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;在校大学生一枚，时间有限、精力有限、能力有限&lt;/li&gt; &#xA; &lt;li&gt;24寸1080p屏幕一个(缩放率100%，不是500%)&lt;/li&gt; &#xA; &lt;li&gt;CPU:AMD 6800H&lt;/li&gt; &#xA; &lt;li&gt;内存:64G(那些说性能差爆内存的有没有从自身找原因，这么多年了，有没有努力，内存容量涨没涨)&lt;/li&gt; &#xA; &lt;li&gt;操作系统:Win11(就俩字“好看”)&lt;/li&gt; &#xA; &lt;li&gt;所以任何超出硬件支持之外的需求在我硬件没变之前都不会适配&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>