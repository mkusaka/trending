<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-31T01:55:32Z</updated>
  <subtitle>Weekly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cumulo-autumn/StreamDiffusion</title>
    <updated>2024-12-31T01:55:32Z</updated>
    <id>tag:github.com,2024-12-31:/cumulo-autumn/StreamDiffusion</id>
    <link href="https://github.com/cumulo-autumn/StreamDiffusion" rel="alternate"></link>
    <summary type="html">&lt;p&gt;StreamDiffusion: A Pipeline-Level Solution for Real-Time Interactive Generation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;StreamDiffusion&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cumulo-autumn/StreamDiffusion/main/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/cumulo-autumn/StreamDiffusion/main/README-ja.md&#34;&gt;日本語&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/cumulo-autumn/StreamDiffusion/main/assets/demo_07.gif&#34; width=&#34;90%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/cumulo-autumn/StreamDiffusion/main/assets/demo_09.gif&#34; width=&#34;90%&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;StreamDiffusion: A Pipeline-Level Solution for Real-Time Interactive Generation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Authors:&lt;/strong&gt; &lt;a href=&#34;https://www.linkedin.com/in/akio-kodaira-1a7b98252/&#34;&gt;Akio Kodaira&lt;/a&gt;, &lt;a href=&#34;https://www.chenfengx.com/&#34;&gt;Chenfeng Xu&lt;/a&gt;, Toshiki Hazama, &lt;a href=&#34;https://twitter.com/__ramu0e__&#34;&gt;Takanori Yoshimoto&lt;/a&gt;, &lt;a href=&#34;https://www.linkedin.com/in/kohei--ohno/&#34;&gt;Kohei Ohno&lt;/a&gt;, &lt;a href=&#34;https://me.ddpn.world/&#34;&gt;Shogo Mitsuhori&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/toni_nimono&#34;&gt;Soichi Sugano&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/hanyingcl&#34;&gt;Hanying Cho&lt;/a&gt;, &lt;a href=&#34;https://zhijianliu.com/&#34;&gt;Zhijian Liu&lt;/a&gt;, &lt;a href=&#34;https://scholar.google.com/citations?hl=en&amp;amp;user=ID9QePIAAAAJ&#34;&gt;Kurt Keutzer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;StreamDiffusion is an innovative diffusion pipeline designed for real-time interactive generation. It introduces significant performance enhancements to current diffusion-based image generation techniques.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2312.12491&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/arXiv-2307.04725-b31b1b.svg?sanitize=true&#34; alt=&#34;arXiv&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/papers/2312.12491&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-papers-yellow&#34; alt=&#34;Hugging Face Papers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We sincerely thank &lt;a href=&#34;https://twitter.com/AttaQjp&#34;&gt;Taku Fujimoto&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/radamar&#34;&gt;Radamés Ajna&lt;/a&gt; and Hugging Face team for their invaluable feedback, courteous support, and insightful discussions.&lt;/p&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Stream Batch&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Streamlined data processing through efficient batch operations.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Residual Classifier-Free Guidance&lt;/strong&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/cumulo-autumn/StreamDiffusion/main/#residual-cfg-rcfg&#34;&gt;Learn More&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Improved guidance mechanism that minimizes computational redundancy.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Stochastic Similarity Filter&lt;/strong&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/cumulo-autumn/StreamDiffusion/main/#stochastic-similarity-filter&#34;&gt;Learn More&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Improves GPU utilization efficiency through advanced filtering techniques.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;IO Queues&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Efficiently manages input and output operations for smoother execution.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Pre-Computation for KV-Caches&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Optimizes caching strategies for accelerated processing.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Model Acceleration Tools&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Utilizes various tools for model optimization and performance boost.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;When images are produced using our proposed StreamDiffusion pipeline in an environment with &lt;strong&gt;GPU: RTX 4090&lt;/strong&gt;, &lt;strong&gt;CPU: Core i9-13900K&lt;/strong&gt;, and &lt;strong&gt;OS: Ubuntu 22.04.3 LTS&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;model&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Denoising Step&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;fps on Txt2Img&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;fps on Img2Img&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;SD-turbo&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;106.16&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;93.897&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;LCM-LoRA &lt;br&gt;+&lt;br&gt; KohakuV2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;38.023&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;37.133&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Feel free to explore each feature by following the provided links to learn more about StreamDiffusion&#39;s capabilities. If you find it helpful, please consider citing our work:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;@article{kodaira2023streamdiffusion,&#xA;      title={StreamDiffusion: A Pipeline-level Solution for Real-time Interactive Generation},&#xA;      author={Akio Kodaira and Chenfeng Xu and Toshiki Hazama and Takanori Yoshimoto and Kohei Ohno and Shogo Mitsuhori and Soichi Sugano and Hanying Cho and Zhijian Liu and Kurt Keutzer},&#xA;      year={2023},&#xA;      eprint={2312.12491},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.CV}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Step0: clone this repository&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/cumulo-autumn/StreamDiffusion.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step1: Make Environment&lt;/h3&gt; &#xA;&lt;p&gt;You can install StreamDiffusion via pip, conda, or Docker(explanation below).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda create -n streamdiffusion python=3.10&#xA;conda activate streamdiffusion&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;OR&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;python -m venv .venv&#xA;# Windows&#xA;.\.venv\Scripts\activate&#xA;# Linux&#xA;source .venv/bin/activate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step2: Install PyTorch&lt;/h3&gt; &#xA;&lt;p&gt;Select the appropriate version for your system.&lt;/p&gt; &#xA;&lt;p&gt;CUDA 11.8&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip3 install torch==2.1.0 torchvision==0.16.0 xformers --index-url https://download.pytorch.org/whl/cu118&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;CUDA 12.1&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip3 install torch==2.1.0 torchvision==0.16.0 xformers --index-url https://download.pytorch.org/whl/cu121&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;details: &lt;a href=&#34;https://pytorch.org/&#34;&gt;https://pytorch.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Step3: Install StreamDiffusion&lt;/h3&gt; &#xA;&lt;h4&gt;For User&lt;/h4&gt; &#xA;&lt;p&gt;Install StreamDiffusion&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#for Latest Version (recommended)&#xA;pip install git+https://github.com/cumulo-autumn/StreamDiffusion.git@main#egg=streamdiffusion[tensorrt]&#xA;&#xA;&#xA;#or&#xA;&#xA;&#xA;#for Stable Version&#xA;pip install streamdiffusion[tensorrt]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install TensorRT extension&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m streamdiffusion.tools.install-tensorrt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Only for Windows) You may need to install pywin32 additionally, if you installed Stable Version(&lt;code&gt;pip install streamdiffusion[tensorrt]&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install --force-reinstall pywin32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;For Developer&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python setup.py develop easy_install streamdiffusion[tensorrt]&#xA;python -m streamdiffusion.tools.install-tensorrt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker Installation (TensorRT Ready)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/cumulo-autumn/StreamDiffusion.git&#xA;cd StreamDiffusion&#xA;docker build -t stream-diffusion:latest -f Dockerfile .&#xA;docker run --gpus all -it -v $(pwd):/home/ubuntu/streamdiffusion stream-diffusion:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;You can try StreamDiffusion in &lt;a href=&#34;https://raw.githubusercontent.com/cumulo-autumn/StreamDiffusion/main/examples&#34;&gt;&lt;code&gt;examples&lt;/code&gt;&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cumulo-autumn/StreamDiffusion/main/assets/demo_02.gif&#34; alt=&#34;画像3&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cumulo-autumn/StreamDiffusion/main/assets/demo_03.gif&#34; alt=&#34;画像4&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cumulo-autumn/StreamDiffusion/main/assets/demo_04.gif&#34; alt=&#34;画像5&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cumulo-autumn/StreamDiffusion/main/assets/demo_05.gif&#34; alt=&#34;画像6&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Real-Time Txt2Img Demo&lt;/h2&gt; &#xA;&lt;p&gt;There is an interactive txt2img demo in &lt;a href=&#34;https://raw.githubusercontent.com/cumulo-autumn/StreamDiffusion/main/demo/realtime-txt2img&#34;&gt;&lt;code&gt;demo/realtime-txt2img&lt;/code&gt;&lt;/a&gt; directory!&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/cumulo-autumn/StreamDiffusion/main/assets/demo_01.gif&#34; width=&#34;100%&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Usage Example&lt;/h2&gt; &#xA;&lt;p&gt;We provide a simple example of how to use StreamDiffusion. For more detailed examples, please refer to &lt;a href=&#34;https://raw.githubusercontent.com/cumulo-autumn/StreamDiffusion/main/examples&#34;&gt;&lt;code&gt;examples&lt;/code&gt;&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Image-to-Image&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch&#xA;from diffusers import AutoencoderTiny, StableDiffusionPipeline&#xA;from diffusers.utils import load_image&#xA;&#xA;from streamdiffusion import StreamDiffusion&#xA;from streamdiffusion.image_utils import postprocess_image&#xA;&#xA;# You can load any models using diffuser&#39;s StableDiffusionPipeline&#xA;pipe = StableDiffusionPipeline.from_pretrained(&#34;KBlueLeaf/kohaku-v2.1&#34;).to(&#xA;    device=torch.device(&#34;cuda&#34;),&#xA;    dtype=torch.float16,&#xA;)&#xA;&#xA;# Wrap the pipeline in StreamDiffusion&#xA;stream = StreamDiffusion(&#xA;    pipe,&#xA;    t_index_list=[32, 45],&#xA;    torch_dtype=torch.float16,&#xA;)&#xA;&#xA;# If the loaded model is not LCM, merge LCM&#xA;stream.load_lcm_lora()&#xA;stream.fuse_lora()&#xA;# Use Tiny VAE for further acceleration&#xA;stream.vae = AutoencoderTiny.from_pretrained(&#34;madebyollin/taesd&#34;).to(device=pipe.device, dtype=pipe.dtype)&#xA;# Enable acceleration&#xA;pipe.enable_xformers_memory_efficient_attention()&#xA;&#xA;&#xA;prompt = &#34;1girl with dog hair, thick frame glasses&#34;&#xA;# Prepare the stream&#xA;stream.prepare(prompt)&#xA;&#xA;# Prepare image&#xA;init_image = load_image(&#34;assets/img2img_example.png&#34;).resize((512, 512))&#xA;&#xA;# Warmup &amp;gt;= len(t_index_list) x frame_buffer_size&#xA;for _ in range(2):&#xA;    stream(init_image)&#xA;&#xA;# Run the stream infinitely&#xA;while True:&#xA;    x_output = stream(init_image)&#xA;    postprocess_image(x_output, output_type=&#34;pil&#34;)[0].show()&#xA;    input_response = input(&#34;Press Enter to continue or type &#39;stop&#39; to exit: &#34;)&#xA;    if input_response == &#34;stop&#34;:&#xA;        break&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Text-to-Image&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch&#xA;from diffusers import AutoencoderTiny, StableDiffusionPipeline&#xA;&#xA;from streamdiffusion import StreamDiffusion&#xA;from streamdiffusion.image_utils import postprocess_image&#xA;&#xA;# You can load any models using diffuser&#39;s StableDiffusionPipeline&#xA;pipe = StableDiffusionPipeline.from_pretrained(&#34;KBlueLeaf/kohaku-v2.1&#34;).to(&#xA;    device=torch.device(&#34;cuda&#34;),&#xA;    dtype=torch.float16,&#xA;)&#xA;&#xA;# Wrap the pipeline in StreamDiffusion&#xA;# Requires more long steps (len(t_index_list)) in text2image&#xA;# You recommend to use cfg_type=&#34;none&#34; when text2image&#xA;stream = StreamDiffusion(&#xA;    pipe,&#xA;    t_index_list=[0, 16, 32, 45],&#xA;    torch_dtype=torch.float16,&#xA;    cfg_type=&#34;none&#34;,&#xA;)&#xA;&#xA;# If the loaded model is not LCM, merge LCM&#xA;stream.load_lcm_lora()&#xA;stream.fuse_lora()&#xA;# Use Tiny VAE for further acceleration&#xA;stream.vae = AutoencoderTiny.from_pretrained(&#34;madebyollin/taesd&#34;).to(device=pipe.device, dtype=pipe.dtype)&#xA;# Enable acceleration&#xA;pipe.enable_xformers_memory_efficient_attention()&#xA;&#xA;&#xA;prompt = &#34;1girl with dog hair, thick frame glasses&#34;&#xA;# Prepare the stream&#xA;stream.prepare(prompt)&#xA;&#xA;# Warmup &amp;gt;= len(t_index_list) x frame_buffer_size&#xA;for _ in range(4):&#xA;    stream()&#xA;&#xA;# Run the stream infinitely&#xA;while True:&#xA;    x_output = stream.txt2img()&#xA;    postprocess_image(x_output, output_type=&#34;pil&#34;)[0].show()&#xA;    input_response = input(&#34;Press Enter to continue or type &#39;stop&#39; to exit: &#34;)&#xA;    if input_response == &#34;stop&#34;:&#xA;        break&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can make it faster by using SD-Turbo.&lt;/p&gt; &#xA;&lt;h3&gt;Faster generation&lt;/h3&gt; &#xA;&lt;p&gt;Replace the following code in the above example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pipe.enable_xformers_memory_efficient_attention()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from streamdiffusion.acceleration.tensorrt import accelerate_with_tensorrt&#xA;&#xA;stream = accelerate_with_tensorrt(&#xA;    stream, &#34;engines&#34;, max_batch_size=2,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It requires TensorRT extension and time to build the engine, but it will be faster than the above example.&lt;/p&gt; &#xA;&lt;h2&gt;Optionals&lt;/h2&gt; &#xA;&lt;h3&gt;Stochastic Similarity Filter&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cumulo-autumn/StreamDiffusion/main/assets/demo_06.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Stochastic Similarity Filter reduces processing during video input by minimizing conversion operations when there is little change from the previous frame, thereby alleviating GPU processing load, as shown by the red frame in the above GIF. The usage is as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;stream = StreamDiffusion(&#xA;    pipe,&#xA;    [32, 45],&#xA;    torch_dtype=torch.float16,&#xA;)&#xA;stream.enable_similar_image_filter(&#xA;    similar_image_filter_threshold,&#xA;    similar_image_filter_max_skip_frame,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are the following parameters that can be set as arguments in the function:&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;similar_image_filter_threshold&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The threshold for similarity between the previous frame and the current frame before the processing is paused.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;similar_image_filter_max_skip_frame&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The maximum interval during the pause before resuming the conversion.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Residual CFG (RCFG)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cumulo-autumn/StreamDiffusion/main/assets/cfg_conparision.png&#34; alt=&#34;rcfg&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;RCFG is a method for approximately realizing CFG with competitive computational complexity compared to cases where CFG is not used. It can be specified through the cfg_type argument in the StreamDiffusion. There are two types of RCFG: one with no specified items for negative prompts RCFG Self-Negative and one where negative prompts can be specified RCFG Onetime-Negative. In terms of computational complexity, denoting the complexity without CFG as N and the complexity with a regular CFG as 2N, RCFG Self-Negative can be computed in N steps, while RCFG Onetime-Negative can be computed in N+1 steps.&lt;/p&gt; &#xA;&lt;p&gt;The usage is as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# w/0 CFG&#xA;cfg_type = &#34;none&#34;&#xA;# CFG&#xA;cfg_type = &#34;full&#34;&#xA;# RCFG Self-Negative&#xA;cfg_type = &#34;self&#34;&#xA;# RCFG Onetime-Negative&#xA;cfg_type = &#34;initialize&#34;&#xA;stream = StreamDiffusion(&#xA;    pipe,&#xA;    [32, 45],&#xA;    torch_dtype=torch.float16,&#xA;    cfg_type=cfg_type,&#xA;)&#xA;stream.prepare(&#xA;    prompt=&#34;1girl, purple hair&#34;,&#xA;    guidance_scale=guidance_scale,&#xA;    delta=delta,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The delta has a moderating effect on the effectiveness of RCFG.&lt;/p&gt; &#xA;&lt;h2&gt;Development Team&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/cumulo_autumn&#34;&gt;Aki&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/AttaQjp&#34;&gt;Ararat&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/Chenfeng_X&#34;&gt;Chenfeng Xu&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/ddPn08&#34;&gt;ddPn08&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/ArtengMimi&#34;&gt;kizamimi&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/__ramu0e__&#34;&gt;ramune&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/hanyingcl&#34;&gt;teftef&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/toni_nimono&#34;&gt;Tonimono&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/IMG_5955&#34;&gt;Verb&lt;/a&gt;,&lt;/p&gt; &#xA;&lt;p&gt;(*alphabetical order) &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;The video and image demos in this GitHub repository were generated using &lt;a href=&#34;https://huggingface.co/latent-consistency/lcm-lora-sdv1-5&#34;&gt;LCM-LoRA&lt;/a&gt; + &lt;a href=&#34;https://civitai.com/models/136268/kohaku-v2&#34;&gt;KohakuV2&lt;/a&gt; and &lt;a href=&#34;https://arxiv.org/abs/2311.17042&#34;&gt;SD-Turbo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to &lt;a href=&#34;https://latent-consistency-models.github.io/&#34;&gt;LCM-LoRA authors&lt;/a&gt; for providing the LCM-LoRA and Kohaku BlueLeaf (&lt;a href=&#34;https://twitter.com/KBlueleaf&#34;&gt;@KBlueleaf&lt;/a&gt;) for providing the KohakuV2 model and ,to &lt;a href=&#34;https://ja.stability.ai/&#34;&gt;Stability AI&lt;/a&gt; for &lt;a href=&#34;https://arxiv.org/abs/2311.17042&#34;&gt;SD-Turbo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;KohakuV2 Models can be downloaded from &lt;a href=&#34;https://civitai.com/models/136268/kohaku-v2&#34;&gt;Civitai&lt;/a&gt; and &lt;a href=&#34;https://huggingface.co/KBlueLeaf/kohaku-v2.1&#34;&gt;Hugging Face&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;SD-Turbo is also available on &lt;a href=&#34;https://huggingface.co/stabilityai/sd-turbo&#34;&gt;Hugging Face Space&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/cumulo-autumn/StreamDiffusion/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=cumulo-autumn/StreamDiffusion&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>JoeanAmier/TikTokDownloader</title>
    <updated>2024-12-31T01:55:32Z</updated>
    <id>tag:github.com,2024-12-31:/JoeanAmier/TikTokDownloader</id>
    <link href="https://github.com/JoeanAmier/TikTokDownloader" rel="alternate"></link>
    <summary type="html">&lt;p&gt;完全免费开源，基于 Requests 模块实现：TikTok 主页/视频/图集/原声；抖音主页/视频/图集/收藏/直播/原声/合集/评论/账号/搜索/热榜数据采集工具&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/JoeanAmier/TikTokDownloader/raw/master/static/images/TikTokDownloader.png&#34; alt=&#34;TikTokDownloader&#34; height=&#34;256&#34; width=&#34;256&#34;&gt;&#xA; &lt;br&gt; &#xA; &lt;h1&gt;TikTokDownloader&lt;/h1&gt; &#xA; &lt;img alt=&#34;GitHub&#34; src=&#34;https://img.shields.io/github/license/JoeanAmier/TikTokDownloader?style=for-the-badge&amp;amp;color=ff7a45&#34;&gt; &#xA; &lt;img alt=&#34;GitHub forks&#34; src=&#34;https://img.shields.io/github/forks/JoeanAmier/TikTokDownloader?style=for-the-badge&amp;amp;color=fa8c16&#34;&gt; &#xA; &lt;img alt=&#34;GitHub Repo stars&#34; src=&#34;https://img.shields.io/github/stars/JoeanAmier/TikTokDownloader?style=for-the-badge&amp;amp;color=ff4d4f&#34;&gt; &#xA; &lt;img alt=&#34;GitHub code size in bytes&#34; src=&#34;https://img.shields.io/github/languages/code-size/JoeanAmier/TikTokDownloader?style=for-the-badge&amp;amp;color=13c2c2&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;img alt=&#34;GitHub release (with filter)&#34; src=&#34;https://img.shields.io/github/v/release/JoeanAmier/TikTokDownloader?style=for-the-badge&amp;amp;color=f759ab&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/Sourcery-enabled-884898?style=for-the-badge&amp;amp;color=1890ff&#34; alt=&#34;&#34;&gt; &#xA; &lt;img alt=&#34;GitHub all releases&#34; src=&#34;https://img.shields.io/github/downloads/JoeanAmier/TikTokDownloader/total?style=for-the-badge&amp;amp;color=52c41a&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;🔥 &lt;b&gt;TikTok 主页/视频/图集/原声；抖音主页/视频/图集/收藏/直播/原声/合集/评论/账号/搜索/热榜数据采集工具：&lt;/b&gt;完全开源，基于 Requests 模块实现的免费工具；批量下载抖音账号发布、喜欢、收藏作品；批量下载 TikTok 账号主页作品；下载抖音链接或 TikTok 链接作品；获取抖音直播推流地址；下载抖音直播视频；采集抖音作品评论数据；批量下载抖音合集作品；采集抖音账号详细数据；采集抖音用户 / 作品 / 直播搜索结果；采集抖音热榜数据。&lt;/p&gt; &#xA;&lt;p&gt;⭐ Windows 10 及以上用户可前往 &lt;a href=&#34;https://github.com/JoeanAmier/TikTokDownloader/releases/latest&#34;&gt;Releases&lt;/a&gt; 下载已编译的 exe 程序，开箱即用！&lt;/p&gt; &#xA;&lt;p&gt;❤️ 作者仅在 GitHub 发布 TikTokDownloader，未与任何个人或网站合作，且没有任何收费计划！&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;📝 功能清单(Function)&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;✅ 下载抖音无水印视频/图集&lt;/li&gt; &#xA; &lt;li&gt;✅ 下载 TikTok 无水印视频/图集&lt;/li&gt; &#xA; &lt;li&gt;✅ 批量下载抖音账号发布/喜欢/收藏作品&lt;/li&gt; &#xA; &lt;li&gt;✅ 批量下载 TikTok 账号发布/喜欢作品&lt;/li&gt; &#xA; &lt;li&gt;✅ 采集抖音 / TikTok 详细数据&lt;/li&gt; &#xA; &lt;li&gt;✅ 批量下载链接作品&lt;/li&gt; &#xA; &lt;li&gt;✅ 多账号批量下载作品&lt;/li&gt; &#xA; &lt;li&gt;✅ 自动跳过已下载的文件&lt;/li&gt; &#xA; &lt;li&gt;✅ 持久化保存采集数据&lt;/li&gt; &#xA; &lt;li&gt;✅ 下载动态/静态封面图&lt;/li&gt; &#xA; &lt;li&gt;✅ 获取抖音直播推流地址&lt;/li&gt; &#xA; &lt;li&gt;✅ 调用 ffmpeg 下载直播&lt;/li&gt; &#xA; &lt;li&gt;✅ Web UI 交互界面&lt;/li&gt; &#xA; &lt;li&gt;✅ 采集抖音作品评论数据&lt;/li&gt; &#xA; &lt;li&gt;✅ 批量下载抖音合集作品&lt;/li&gt; &#xA; &lt;li&gt;✅ 记录点赞收藏等统计数据&lt;/li&gt; &#xA; &lt;li&gt;✅ 筛选作品发布时间&lt;/li&gt; &#xA; &lt;li&gt;✅ 支持账号作品增量下载&lt;/li&gt; &#xA; &lt;li&gt;✅ 支持使用代理采集数据&lt;/li&gt; &#xA; &lt;li&gt;✅ 支持局域网远程访问&lt;/li&gt; &#xA; &lt;li&gt;✅ 采集抖音账号详细数据&lt;/li&gt; &#xA; &lt;li&gt;✅ 作品统计数据更新&lt;/li&gt; &#xA; &lt;li&gt;✅ 自动更新账号昵称&lt;/li&gt; &#xA; &lt;li&gt;✅ 部署至私有服务器&lt;/li&gt; &#xA; &lt;li&gt;✅ 部署至公开服务器&lt;/li&gt; &#xA; &lt;li&gt;✅ 采集抖音搜索数据&lt;/li&gt; &#xA; &lt;li&gt;✅ 采集抖音热榜数据&lt;/li&gt; &#xA; &lt;li&gt;✅ 记录已下载作品 ID&lt;/li&gt; &#xA; &lt;li&gt;✅ 扫码登陆获取 Cookie&lt;/li&gt; &#xA; &lt;li&gt;✅ 支持 Web API 调用&lt;/li&gt; &#xA; &lt;li&gt;✅ 支持多线程下载作品&lt;/li&gt; &#xA; &lt;li&gt;✅ 文件完整性处理机制&lt;/li&gt; &#xA; &lt;li&gt;✅ 自定义规则筛选作品&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;💻 程序界面(Screenshot)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;终端命令行模式：&lt;/strong&gt; &lt;br&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/JoeanAmier/TikTokDownloader/master/docs/%E7%BB%88%E7%AB%AF%E6%A8%A1%E5%BC%8F%E6%88%AA%E5%9B%BE1.png&#34; alt=&#34;终端模式截图&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/JoeanAmier/TikTokDownloader/master/docs/%E7%BB%88%E7%AB%AF%E6%A8%A1%E5%BC%8F%E6%88%AA%E5%9B%BE2.png&#34; alt=&#34;终端模式截图&#34;&gt; &lt;br&gt;&lt;br&gt; &lt;strong&gt;Web UI 交互模式：&lt;/strong&gt; &lt;br&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/JoeanAmier/TikTokDownloader/master/docs/WebUI%E6%A8%A1%E5%BC%8F%E6%88%AA%E5%9B%BE1.png&#34; alt=&#34;WebUI模式截图&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/JoeanAmier/TikTokDownloader/master/docs/WebUI%E6%A8%A1%E5%BC%8F%E6%88%AA%E5%9B%BE2.png&#34; alt=&#34;WebUI模式截图&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/JoeanAmier/TikTokDownloader/master/docs/WebUI%E6%A8%A1%E5%BC%8F%E6%88%AA%E5%9B%BE3.png&#34; alt=&#34;WebUI模式截图&#34;&gt; &lt;br&gt;&lt;br&gt; &lt;strong&gt;Web API 接口模式：&lt;/strong&gt; &lt;br&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/JoeanAmier/TikTokDownloader/master/docs/WebAPI%E6%A8%A1%E5%BC%8F%E6%88%AA%E5%9B%BE.png&#34; alt=&#34;WebAPI模式截图&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;📽 运行演示(Example)&lt;/h1&gt; &#xA;&lt;h2&gt;批量下载账号发布作品&lt;/h2&gt; &#xA;&lt;p&gt;&lt;b&gt;🎥 点击图片观看演示视频，建议通过配置文件管理账号，更多介绍请查阅 &lt;a href=&#34;https://github.com/JoeanAmier/TikTokDownloader/wiki/Documentation&#34;&gt;文档&lt;/a&gt;&lt;/b&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Nu4y1L7LW/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/JoeanAmier/TikTokDownloader/master/docs/%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E6%BC%94%E7%A4%BA.png&#34; alt=&#34;演示视频&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;📈 项目状态(Status)&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🟢 &lt;a href=&#34;https://github.com/JoeanAmier/TikTokDownloader/releases/latest&#34;&gt;Releases&lt;/a&gt; 发布的源码已完成测试，所有功能均可正常使用&lt;/li&gt; &#xA; &lt;li&gt;🟢 正在重构项目代码，优化项目结构&lt;/li&gt; &#xA; &lt;li&gt;🟢 即将使用协程技术优化项目代码&lt;/li&gt; &#xA; &lt;li&gt;🟡 未来可能新增可视化编辑配置文件功能&lt;/li&gt; &#xA; &lt;li&gt;🟡 未来可能支持更多抖音热榜类型&lt;/li&gt; &#xA; &lt;li&gt;🟡 未来可能新增终端文本用户界面(TUI)模式&lt;/li&gt; &#xA; &lt;li&gt;🟡 未来可能支持全功能版的 Web UI 交互模式&lt;/li&gt; &#xA; &lt;li&gt;🟡 未来可能新增监听剪贴板下载作品功能&lt;/li&gt; &#xA; &lt;li&gt;🟡 未来可能新增账号新作品监测功能&lt;/li&gt; &#xA; &lt;li&gt;🟡 未来可能新增合集新作品监测功能&lt;/li&gt; &#xA; &lt;li&gt;🟡 未来可能新增直播开播监测功能&lt;/li&gt; &#xA; &lt;li&gt;🟡 未来可能新增调用 API 下载作品文件功能&lt;/li&gt; &#xA; &lt;li&gt;🟡 未来可能新增获取账号关注列表功能&lt;/li&gt; &#xA; &lt;li&gt;🟡 未来可能新增获取账号收藏合集列表功能&lt;/li&gt; &#xA; &lt;li&gt;🟡 未来可能优化 TikTok 平台批量下载功能&lt;/li&gt; &#xA; &lt;li&gt;🔴 最新版本的源码可能存在不稳定的 Bug&lt;/li&gt; &#xA; &lt;li&gt;🔴 如果在使用过程中发现程序 Bug，请及时告知作者修复&lt;/li&gt; &#xA; &lt;li&gt;🔴 采集 TikTok 图集作品导致异常退出，已修复&lt;/li&gt; &#xA; &lt;li&gt;🔴 发现 Cookie 会影响下载的视频作品文件分辨率&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;📋 项目说明(Instructions)&lt;/h1&gt; &#xA;&lt;h2&gt;快速入门&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;b&gt;下载 EXE 程序&lt;/b&gt; 或者 &lt;b&gt;配置运行环境&lt;/b&gt; &#xA;  &lt;ol&gt;&#xA;   &lt;b&gt;直接运行程序&lt;/b&gt; &#xA;   &lt;li&gt;下载 &lt;a href=&#34;https://github.com/JoeanAmier/TikTokDownloader/releases/latest&#34;&gt;Releases&lt;/a&gt; 发布的 EXE 程序压缩包&lt;/li&gt; &#xA;   &lt;li&gt;解压后打开程序文件夹，双击运行 &lt;code&gt;main.exe&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &#xA;  &lt;ol&gt;&#xA;   &lt;b&gt;通过源码运行&lt;/b&gt; &#xA;   &lt;li&gt;安装不低于 &lt;code&gt;3.12&lt;/code&gt; 版本的 &lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt; 解释器&lt;/li&gt; &#xA;   &lt;li&gt;下载最新的源码或 &lt;a href=&#34;https://github.com/JoeanAmier/TikTokDownloader/releases/latest&#34;&gt;Releases&lt;/a&gt; 发布的源码至本地&lt;/li&gt; &#xA;   &lt;li&gt;运行 &lt;code&gt;python -m venv venv&lt;/code&gt; 命令创建虚拟环境（可选）&lt;/li&gt; &#xA;   &lt;li&gt;运行 &lt;code&gt;.\venv\Scripts\activate.ps1&lt;/code&gt; 或者 &lt;code&gt;venv\Scripts\activate&lt;/code&gt; 命令激活虚拟环境（可选）&lt;/li&gt; &#xA;   &lt;li&gt;运行 &lt;code&gt;pip install -i https://pypi.tuna.tsinghua.edu.cn/simple -r requirements.txt&lt;/code&gt; 命令安装程序所需模块&lt;/li&gt; &#xA;   &lt;li&gt;运行 &lt;code&gt;python .\main.py&lt;/code&gt; 或者 &lt;code&gt;python main.py&lt;/code&gt; 命令启动 TikTokDownloader&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;阅读 TikTokDownloader 的免责声明，根据提示输入内容&lt;/li&gt; &#xA; &lt;li&gt;将 Cookie 信息写入配置文件 &#xA;  &lt;ol&gt;&#xA;   &lt;b&gt;手动复制粘贴(推荐)&lt;/b&gt; &#xA;   &lt;li&gt;参考 &lt;a href=&#34;https://github.com/JoeanAmier/TikTokDownloader/raw/master/docs/Cookie%E6%95%99%E7%A8%8B.md&#34;&gt;Cookie 提取教程&lt;/a&gt;，复制所需 Cookie 至剪贴板&lt;/li&gt; &#xA;   &lt;li&gt;选择 &lt;code&gt;复制粘贴写入 Cookie&lt;/code&gt; 选项，按照提示将 Cookie 写入配置文件&lt;/li&gt; &#xA;  &lt;/ol&gt; &#xA;  &lt;ol&gt;&#xA;   &lt;b&gt;扫码登录获取&lt;/b&gt; &#xA;   &lt;li&gt;选择 &lt;code&gt;扫码登陆写入 Cookie&lt;/code&gt; 选项，程序会显示登录二维码图片，并使用默认应用打开图片&lt;/li&gt; &#xA;   &lt;li&gt;使用抖音 APP 扫描二维码并登录账号&lt;/li&gt; &#xA;   &lt;li&gt;按照提示操作，将 Cookie 写入配置文件&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;返回程序界面，依次选择 &lt;code&gt;终端命令行模式&lt;/code&gt; -&amp;gt; &lt;code&gt;批量下载链接作品&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;输入抖音或 TikTok 作品链接即可下载作品文件&lt;/li&gt; &#xA; &lt;li&gt;更多详细说明请查看 &lt;b&gt;&lt;a href=&#34;https://github.com/JoeanAmier/TikTokDownloader/wiki/Documentation&#34;&gt;项目文档&lt;/a&gt;&lt;/b&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;⭐ 推荐使用 &lt;a href=&#34;https://learn.microsoft.com/zh-cn/windows/terminal/install&#34;&gt;Windows 终端&lt;/a&gt;（Windows 11 自带默认终端）&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;关于 Cookie&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/JoeanAmier/TikTokDownloader/raw/master/docs/Cookie%E6%95%99%E7%A8%8B.md&#34;&gt;点击查看 Cookie 获取教程&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;程序功能&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;是否需要登录&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;下载账号发布作品&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⭕建议登录&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;下载账号喜欢作品&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⭕建议登录&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;下载链接作品&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⭕建议登录&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;获取直播推流地址&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌无需登录&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;下载直播视频&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌无需登录&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;获取作品评论数据&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⭕建议登录&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;下载合集作品&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⭕建议登录&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;获取账号数据&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⭕建议登录&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;采集搜索结果&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⭕建议登录&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;采集热榜数据&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌无需登录&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;下载账号收藏作品&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️需要登录&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Cookie 仅需在失效后重新写入配置文件，并非每次运行程序都要写入配置文件！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;程序获取数据失败时，可以尝试更新 Cookie 或者使用已登录的 Cookie！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;其他说明&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;程序提示用户输入时，直接回车代表返回上级菜单，输入 &lt;code&gt;Q&lt;/code&gt; 或 &lt;code&gt;q&lt;/code&gt; 代表结束运行&lt;/li&gt; &#xA; &lt;li&gt;由于获取账号喜欢作品和收藏作品数据仅返回喜欢 / 收藏作品的发布日期，不返回操作日期，因此程序需要获取全部喜欢 / 收藏作品数据再进行日期筛选；如果作品数量较多，可能会花费较长的时间；可通过 &lt;code&gt;max_pages&lt;/code&gt; 参数控制请求次数&lt;/li&gt; &#xA; &lt;li&gt;获取私密账号的发布作品数据需要登录后的 Cookie，且登录的账号需要关注该私密账号&lt;/li&gt; &#xA; &lt;li&gt;批量下载账号作品或合集作品时，如果对应的昵称或标识发生变化，程序会自动更新已下载作品文件名称中的昵称和标识&lt;/li&gt; &#xA; &lt;li&gt;程序下载文件时会先将文件下载至临时文件夹，下载完成后再移动至储存文件夹；程序运行结束时会清空临时文件夹&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;批量下载收藏作品模式&lt;/code&gt; 目前仅支持下载当前已登录 Cookie 对应账号的收藏作品，暂不支持多账号&lt;/li&gt; &#xA; &lt;li&gt;如果想要程序使用代理，必须在 &lt;code&gt;settings.json&lt;/code&gt; 设置 &lt;code&gt;proxies&lt;/code&gt; 参数，否则程序不会使用代理&lt;/li&gt; &#xA; &lt;li&gt;部分使用者反馈，新发布的作品过早下载会下载到低分辨率的文件，一段时间后才能下载到高分辨率文件，但时间规律尚不明确&lt;/li&gt; &#xA; &lt;li&gt;退出程序时，请以正常方式结束运行或者按下 Ctrl + C 结束运行，不要直接点击终端窗口的关闭按钮结束运行，否则会导致数据丢失&lt;/li&gt; &#xA; &lt;li&gt;如果您的计算机没有合适的程序编辑 JSON 文件，建议使用 &lt;a href=&#34;https://try8.cn/tool/format/json&#34;&gt;JSON 在线工具&lt;/a&gt; 编辑配置文件内容&lt;/li&gt; &#xA; &lt;li&gt;当程序请求用户输入内容或链接时，请注意避免输入的内容或链接包含换行符，这可能会导致预期之外的问题&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;EXE 更新&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;方案一：&lt;/strong&gt; 下载并解压文件，将旧版本的 &lt;code&gt;cache&lt;/code&gt; 文件夹和 &lt;code&gt;settings.json&lt;/code&gt; 文件复制到 &lt;code&gt;_internal&lt;/code&gt; 文件夹。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;方案二：&lt;/strong&gt; 下载并解压文件，复制全部文件，直接覆盖旧版本文件。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;⚠️ 免责声明(Disclaimers)&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;使用者对本项目的使用由使用者自行决定，并自行承担风险。作者对使用者使用本项目所产生的任何损失、责任、或风险概不负责。&lt;/li&gt; &#xA; &lt;li&gt;本项目的作者提供的代码和功能是基于现有知识和技术的开发成果。作者尽力确保代码的正确性和安全性，但不保证代码完全没有错误或缺陷。&lt;/li&gt; &#xA; &lt;li&gt;使用者在使用本项目时必须严格遵守 &lt;a href=&#34;https://github.com/JoeanAmier/TikTokDownloader/raw/master/license&#34;&gt;GNU General Public License v3.0&lt;/a&gt; 的要求，并在适当的地方注明使用了 &lt;a href=&#34;https://github.com/JoeanAmier/TikTokDownloader/raw/master/license&#34;&gt;GNU General Public License v3.0&lt;/a&gt; 的代码。 &lt;/li&gt; &#xA; &lt;li&gt;使用者在任何情况下均不得将本项目的作者、贡献者或其他相关方与使用者的使用行为联系起来，或要求其对使用者使用本项目所产生的任何损失或损害负责。&lt;/li&gt; &#xA; &lt;li&gt;使用者在使用本项目的代码和功能时，必须自行研究相关法律法规，并确保其使用行为合法合规。任何因违反法律法规而导致的法律责任和风险，均由使用者自行承担。&lt;/li&gt; &#xA; &lt;li&gt;本项目的作者不会提供 TikTokDownloader 项目的付费版本，也不会提供与 TikTokDownloader 项目相关的任何商业服务。&lt;/li&gt; &#xA; &lt;li&gt;基于本项目进行的任何二次开发、修改或编译的程序与原创作者无关，原创作者不承担与二次开发行为或其结果相关的任何责任，使用者应自行对因二次开发可能带来的各种情况负全部责任。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;b&gt;在使用本项目的代码和功能之前，请您认真考虑并接受以上免责声明。如果您对上述声明有任何疑问或不同意，请不要使用本项目的代码和功能。如果您使用了本项目的代码和功能，则视为您已完全理解并接受上述免责声明，并自愿承担使用本项目的一切风险和后果。&lt;/b&gt; &#xA;&lt;h1&gt;✉️ 联系作者(Contact)&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;QQ: 2437596031（联系请说明来意）&lt;/li&gt; &#xA; &lt;li&gt;QQ Group: &lt;a href=&#34;https://github.com/JoeanAmier/TikTokDownloader/raw/master/docs/QQ%E7%BE%A4%E8%81%8A%E4%BA%8C%E7%BB%B4%E7%A0%81.png&#34;&gt;点击扫码加入群聊&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Email: yonglelolu@gmail.com&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt; &lt;b&gt;TikTokDownloader 是我个人独立维护的一个开源项目，鉴于个人精力有限，请理解项目进展可能较为缓慢，我会尽力保持更新和维护，以确保项目的稳定性和功能的不断改进。&lt;/b&gt; &lt;/p&gt; &#xA;&lt;p&gt; &lt;b&gt;如果您通过 Email 联系我，我可能无法及时查看并回复信息，我会尽力在七天内回复您的邮件；如果有紧急事项或需要更快的回复，请通过其他方式与我联系，谢谢理解！&lt;/b&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;b&gt;如果您对小红书感兴趣，可以了解一下我的另一个开源项目 &lt;a href=&#34;https://github.com/JoeanAmier/XHS-Downloader&#34;&gt;XHS-Downloader&lt;/a&gt;&lt;/b&gt;&lt;/p&gt; &#xA;&lt;h1&gt;♥️ 支持项目(Support)&lt;/h1&gt; &#xA;&lt;p&gt;如果 &lt;b&gt;TikTokDownloader&lt;/b&gt; 对您有帮助，请考虑为它点个 &lt;b&gt;Star&lt;/b&gt; ⭐，感谢您的支持！&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;微信(WeChat)&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;支付宝(Alipay)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;./docs/微信赞助二维码.png&#34; alt=&#34;微信赞助二维码&#34; height=&#34;200&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;./docs/支付宝赞助二维码.png&#34; alt=&#34;支付宝赞助二维码&#34; height=&#34;200&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;如果您愿意，可以考虑提供资助为 &lt;b&gt;TikTokDownloader&lt;/b&gt; 提供额外的支持！&lt;/p&gt; &#xA;&lt;h1&gt;💡 代码参考(Refer)&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Johnserf-Seed/f2&#34;&gt;https://github.com/Johnserf-Seed/f2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Johnserf-Seed/TikTokDownload&#34;&gt;https://github.com/Johnserf-Seed/TikTokDownload&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Evil0ctal/Douyin_TikTok_Download_API&#34;&gt;https://github.com/Evil0ctal/Douyin_TikTok_Download_API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ihmily/DouyinLiveRecorder&#34;&gt;https://github.com/ihmily/DouyinLiveRecorder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/davidteather/TikTok-Api&#34;&gt;https://github.com/davidteather/TikTok-Api&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/psf/requests&#34;&gt;https://github.com/psf/requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pallets/flask&#34;&gt;https://github.com/pallets/flask&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Textualize/rich&#34;&gt;https://github.com/Textualize/rich&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pyinstaller/pyinstaller&#34;&gt;https://github.com/pyinstaller/pyinstaller&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ffmpeg.org/ffmpeg-all.html&#34;&gt;https://ffmpeg.org/ffmpeg-all.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://html5up.net/hyperspace&#34;&gt;https://html5up.net/hyperspace&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>johnma2006/mamba-minimal</title>
    <updated>2024-12-31T01:55:32Z</updated>
    <id>tag:github.com,2024-12-31:/johnma2006/mamba-minimal</id>
    <link href="https://github.com/johnma2006/mamba-minimal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple, minimal implementation of the Mamba SSM in one file of PyTorch.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;mamba-minimal&lt;/h2&gt; &#xA;&lt;p&gt;Simple, minimal implementation of Mamba in one file of PyTorch.&lt;/p&gt; &#xA;&lt;p&gt;Featuring:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Equivalent numerical output as official implementation for both forward and backward pass&lt;/li&gt; &#xA; &lt;li&gt;Simplified, readable, annotated code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Does NOT include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Speed. The official implementation is heavily optimized, and these optimizations are core contributions of the Mamba paper. I kept most implementations simple for readability.&lt;/li&gt; &#xA; &lt;li&gt;Proper parameter initialization (though this could be added without sacrificing readability)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/johnma2006/mamba-minimal/master/demo.ipynb&#34;&gt;demo.ipynb&lt;/a&gt; for examples of prompt completions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from model import Mamba&#xA;from transformers import AutoTokenizer&#xA;&#xA;model = Mamba.from_pretrained(&#39;state-spaces/mamba-370m&#39;)&#xA;tokenizer = AutoTokenizer.from_pretrained(&#39;EleutherAI/gpt-neox-20b&#39;)&#xA;&#xA;generate(model, tokenizer, &#39;Mamba is the&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Mamba is the world&#39;s longest venomous snake with an estimated length of over 150 m. With such a large size and a venomous bite, Mamba kills by stabbing the victim (which is more painful and less effective than a single stab of the bite)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;150 meters... 🫢 scary!&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;p&gt;The Mamba architecture was introduced in &lt;a href=&#34;https://arxiv.org/abs/2312.00752&#34;&gt;Mamba: Linear-Time Sequence Modeling with Selective State Spaces&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/_albertgu?lang=en&#34;&gt;Albert Gu&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/tri_dao?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor&#34;&gt;Tri Dao&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The official implementation is here: &lt;a href=&#34;https://github.com/state-spaces/mamba/tree/main&#34;&gt;https://github.com/state-spaces/mamba/tree/main&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>