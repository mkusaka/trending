<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-20T01:45:42Z</updated>
  <subtitle>Weekly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>vanna-ai/vanna</title>
    <updated>2025-04-20T01:45:42Z</updated>
    <id>tag:github.com,2025-04-20:/vanna-ai/vanna</id>
    <link href="https://github.com/vanna-ai/vanna" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🤖 Chat with your SQL database 📊. Accurate Text-to-SQL Generation via LLMs using RAG 🔄.&lt;/p&gt;&lt;hr&gt;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;GitHub&lt;/th&gt; &#xA;   &lt;th&gt;PyPI&lt;/th&gt; &#xA;   &lt;th&gt;Documentation&lt;/th&gt; &#xA;   &lt;th&gt;Gurubase&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/vanna-ai/vanna&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/GitHub-vanna-blue?logo=github&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pypi.org/project/vanna/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/vanna?logo=pypi&#34; alt=&#34;PyPI&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://vanna.ai/docs/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Documentation-vanna-blue?logo=read-the-docs&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://gurubase.io/g/vanna&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gurubase-Ask%20Vanna%20Guru-006BFF&#34; alt=&#34;Gurubase&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Vanna&lt;/h1&gt; &#xA;&lt;p&gt;Vanna is an MIT-licensed open-source Python RAG (Retrieval-Augmented Generation) framework for SQL generation and related functionality.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/vanna-ai/vanna/assets/7146154/1901f47a-515d-4982-af50-f12761a3b2ce&#34;&gt;https://github.com/vanna-ai/vanna/assets/7146154/1901f47a-515d-4982-af50-f12761a3b2ce&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/vanna-ai/vanna/assets/7146154/1c7c88ba-c144-4ecf-a028-cf5ba7344ca2&#34; alt=&#34;vanna-quadrants&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How Vanna works&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/vanna-ai/vanna/assets/7146154/1d2718ad-12a8-4a76-afa2-c61754462f93&#34; alt=&#34;Screen Recording 2024-01-24 at 11 21 37 AM&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Vanna works in two easy steps - train a RAG &#34;model&#34; on your data, and then ask questions which will return SQL queries that can be set up to automatically run on your database.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Train a RAG &#34;model&#34; on your data&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ask questions&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vanna-ai/vanna/main/img/vanna-readme-diagram.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t know what RAG is, don&#39;t worry -- you don&#39;t need to know how this works under the hood to use it. You just need to know that you &#34;train&#34; a model, which stores some metadata and then use it to &#34;ask&#34; questions.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/vanna-ai/vanna/raw/main/src/vanna/base/base.py&#34;&gt;base class&lt;/a&gt; for more details on how this works under the hood.&lt;/p&gt; &#xA;&lt;h2&gt;User Interfaces&lt;/h2&gt; &#xA;&lt;p&gt;These are some of the user interfaces that we&#39;ve built using Vanna. You can use these as-is or as a starting point for your own custom interface.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vanna.ai/docs/postgres-openai-vanna-vannadb/&#34;&gt;Jupyter Notebook&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vanna-ai/vanna-streamlit&#34;&gt;vanna-ai/vanna-streamlit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vanna-ai/vanna-flask&#34;&gt;vanna-ai/vanna-flask&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vanna-ai/vanna-slack&#34;&gt;vanna-ai/vanna-slack&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported LLMs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vanna-ai/vanna/tree/main/src/vanna/openai&#34;&gt;OpenAI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vanna-ai/vanna/tree/main/src/vanna/anthropic&#34;&gt;Anthropic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vanna-ai/vanna/raw/main/src/vanna/google/gemini_chat.py&#34;&gt;Gemini&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vanna-ai/vanna/raw/main/src/vanna/hf/hf.py&#34;&gt;HuggingFace&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vanna-ai/vanna/tree/main/src/vanna/bedrock&#34;&gt;AWS Bedrock&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vanna-ai/vanna/tree/main/src/vanna/ollama&#34;&gt;Ollama&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vanna-ai/vanna/tree/main/src/vanna/qianwen&#34;&gt;Qianwen&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vanna-ai/vanna/tree/main/src/vanna/qianfan&#34;&gt;Qianfan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vanna-ai/vanna/tree/main/src/vanna/ZhipuAI&#34;&gt;Zhipu&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported VectorStores&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vanna-ai/vanna/tree/main/src/vanna/azuresearch&#34;&gt;AzureSearch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vanna-ai/vanna/tree/main/src/vanna/opensearch&#34;&gt;Opensearch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vanna-ai/vanna/tree/main/src/vanna/pgvector&#34;&gt;PgVector&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vanna-ai/vanna/tree/main/src/vanna/pinecone&#34;&gt;PineCone&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vanna-ai/vanna/tree/main/src/vanna/chromadb&#34;&gt;ChromaDB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vanna-ai/vanna/tree/main/src/vanna/faiss&#34;&gt;FAISS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vanna-ai/vanna/tree/main/src/vanna/marqo&#34;&gt;Marqo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vanna-ai/vanna/tree/main/src/vanna/milvus&#34;&gt;Milvus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vanna-ai/vanna/tree/main/src/vanna/qdrant&#34;&gt;Qdrant&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vanna-ai/vanna/tree/main/src/vanna/weaviate&#34;&gt;Weaviate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vanna-ai/vanna/tree/main/src/vanna/oracle&#34;&gt;Oracle&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Databases&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mysql.com/&#34;&gt;MySQL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://prestodb.io/&#34;&gt;PrestoDB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hive.apache.org/&#34;&gt;Apache Hive&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://clickhouse.com/&#34;&gt;ClickHouse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.snowflake.com/en/&#34;&gt;Snowflake&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.oracle.com/&#34;&gt;Oracle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.microsoft.com/en-us/sql-server/sql-server-downloads&#34;&gt;Microsoft SQL Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cloud.google.com/bigquery&#34;&gt;BigQuery&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sqlite.org/&#34;&gt;SQLite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://duckdb.org/&#34;&gt;DuckDB&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://vanna.ai/docs/&#34;&gt;documentation&lt;/a&gt; for specifics on your desired database, LLM, etc.&lt;/p&gt; &#xA;&lt;p&gt;If you want to get a feel for how it works after training, you can try this &lt;a href=&#34;https://vanna.ai/docs/app/&#34;&gt;Colab notebook&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install vanna&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are a number of optional packages that can be installed so see the &lt;a href=&#34;https://vanna.ai/docs/&#34;&gt;documentation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Import&lt;/h3&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://vanna.ai/docs/&#34;&gt;documentation&lt;/a&gt; if you&#39;re customizing the LLM or vector database.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# The import statement will vary depending on your LLM and vector database. This is an example for OpenAI + ChromaDB&#xA;&#xA;from vanna.openai.openai_chat import OpenAI_Chat&#xA;from vanna.chromadb.chromadb_vector import ChromaDB_VectorStore&#xA;&#xA;class MyVanna(ChromaDB_VectorStore, OpenAI_Chat):&#xA;    def __init__(self, config=None):&#xA;        ChromaDB_VectorStore.__init__(self, config=config)&#xA;        OpenAI_Chat.__init__(self, config=config)&#xA;&#xA;vn = MyVanna(config={&#39;api_key&#39;: &#39;sk-...&#39;, &#39;model&#39;: &#39;gpt-4-...&#39;})&#xA;&#xA;# See the documentation for other options&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Training&lt;/h2&gt; &#xA;&lt;p&gt;You may or may not need to run these &lt;code&gt;vn.train&lt;/code&gt; commands depending on your use case. See the &lt;a href=&#34;https://vanna.ai/docs/&#34;&gt;documentation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;These statements are shown to give you a feel for how it works.&lt;/p&gt; &#xA;&lt;h3&gt;Train with DDL Statements&lt;/h3&gt; &#xA;&lt;p&gt;DDL statements contain information about the table names, columns, data types, and relationships in your database.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;vn.train(ddl=&#34;&#34;&#34;&#xA;    CREATE TABLE IF NOT EXISTS my-table (&#xA;        id INT PRIMARY KEY,&#xA;        name VARCHAR(100),&#xA;        age INT&#xA;    )&#xA;&#34;&#34;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Train with Documentation&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes you may want to add documentation about your business terminology or definitions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;vn.train(documentation=&#34;Our business defines XYZ as ...&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Train with SQL&lt;/h3&gt; &#xA;&lt;p&gt;You can also add SQL queries to your training data. This is useful if you have some queries already laying around. You can just copy and paste those from your editor to begin generating new SQL.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;vn.train(sql=&#34;SELECT name, age FROM my-table WHERE name = &#39;John Doe&#39;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Asking questions&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;vn.ask(&#34;What are the top 10 customers by sales?&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll get SQL&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT c.c_name as customer_name,&#xA;        sum(l.l_extendedprice * (1 - l.l_discount)) as total_sales&#xA;FROM   snowflake_sample_data.tpch_sf1.lineitem l join snowflake_sample_data.tpch_sf1.orders o&#xA;        ON l.l_orderkey = o.o_orderkey join snowflake_sample_data.tpch_sf1.customer c&#xA;        ON o.o_custkey = c.c_custkey&#xA;GROUP BY customer_name&#xA;ORDER BY total_sales desc limit 10;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;ve connected to a database, you&#39;ll get the table:&lt;/p&gt; &#xA;&lt;div&gt; &#xA; &lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr style=&#34;text-align: right;&#34;&gt; &#xA;    &lt;th&gt;&lt;/th&gt; &#xA;    &lt;th&gt;CUSTOMER_NAME&lt;/th&gt; &#xA;    &lt;th&gt;TOTAL_SALES&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;0&lt;/th&gt; &#xA;    &lt;td&gt;Customer#000143500&lt;/td&gt; &#xA;    &lt;td&gt;6757566.0218&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;1&lt;/th&gt; &#xA;    &lt;td&gt;Customer#000095257&lt;/td&gt; &#xA;    &lt;td&gt;6294115.3340&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;2&lt;/th&gt; &#xA;    &lt;td&gt;Customer#000087115&lt;/td&gt; &#xA;    &lt;td&gt;6184649.5176&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;3&lt;/th&gt; &#xA;    &lt;td&gt;Customer#000131113&lt;/td&gt; &#xA;    &lt;td&gt;6080943.8305&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;4&lt;/th&gt; &#xA;    &lt;td&gt;Customer#000134380&lt;/td&gt; &#xA;    &lt;td&gt;6075141.9635&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;5&lt;/th&gt; &#xA;    &lt;td&gt;Customer#000103834&lt;/td&gt; &#xA;    &lt;td&gt;6059770.3232&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;6&lt;/th&gt; &#xA;    &lt;td&gt;Customer#000069682&lt;/td&gt; &#xA;    &lt;td&gt;6057779.0348&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;7&lt;/th&gt; &#xA;    &lt;td&gt;Customer#000102022&lt;/td&gt; &#xA;    &lt;td&gt;6039653.6335&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;8&lt;/th&gt; &#xA;    &lt;td&gt;Customer#000098587&lt;/td&gt; &#xA;    &lt;td&gt;6027021.5855&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;9&lt;/th&gt; &#xA;    &lt;td&gt;Customer#000064660&lt;/td&gt; &#xA;    &lt;td&gt;5905659.6159&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;You&#39;ll also get an automated Plotly chart: &lt;img src=&#34;https://raw.githubusercontent.com/vanna-ai/vanna/main/img/top-10-customers.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;RAG vs. Fine-Tuning&lt;/h2&gt; &#xA;&lt;p&gt;RAG&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Portable across LLMs&lt;/li&gt; &#xA; &lt;li&gt;Easy to remove training data if any of it becomes obsolete&lt;/li&gt; &#xA; &lt;li&gt;Much cheaper to run than fine-tuning&lt;/li&gt; &#xA; &lt;li&gt;More future-proof -- if a better LLM comes out, you can just swap it out&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Fine-Tuning&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Good if you need to minimize tokens in the prompt&lt;/li&gt; &#xA; &lt;li&gt;Slow to get started&lt;/li&gt; &#xA; &lt;li&gt;Expensive to train and run (generally)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why Vanna?&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;High accuracy on complex datasets.&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Vanna’s capabilities are tied to the training data you give it&lt;/li&gt; &#xA;   &lt;li&gt;More training data means better accuracy for large and complex datasets&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Secure and private.&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Your database contents are never sent to the LLM or the vector database&lt;/li&gt; &#xA;   &lt;li&gt;SQL execution happens in your local environment&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Self learning.&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If using via Jupyter, you can choose to &#34;auto-train&#34; it on the queries that were successfully executed&lt;/li&gt; &#xA;   &lt;li&gt;If using via other interfaces, you can have the interface prompt the user to provide feedback on the results&lt;/li&gt; &#xA;   &lt;li&gt;Correct question to SQL pairs are stored for future reference and make the future results more accurate&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Supports any SQL database.&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The package allows you to connect to any SQL database that you can otherwise connect to with Python&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Choose your front end.&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Most people start in a Jupyter Notebook.&lt;/li&gt; &#xA;   &lt;li&gt;Expose to your end users via Slackbot, web app, Streamlit app, or a custom front end.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Extending Vanna&lt;/h2&gt; &#xA;&lt;p&gt;Vanna is designed to connect to any database, LLM, and vector database. There&#39;s a &lt;a href=&#34;https://github.com/vanna-ai/vanna/raw/main/src/vanna/base/base.py&#34;&gt;VannaBase&lt;/a&gt; abstract base class that defines some basic functionality. The package provides implementations for use with OpenAI and ChromaDB. You can easily extend Vanna to use your own LLM or vector database. See the &lt;a href=&#34;https://vanna.ai/docs/&#34;&gt;documentation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Vanna in 100 Seconds&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/vanna-ai/vanna/assets/7146154/eb90ee1e-aa05-4740-891a-4fc10e611cab&#34;&gt;https://github.com/vanna-ai/vanna/assets/7146154/eb90ee1e-aa05-4740-891a-4fc10e611cab&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;More resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vanna.ai/docs/&#34;&gt;Full Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vanna.ai&#34;&gt;Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/qUZYKHremx&#34;&gt;Discord group for support&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>nautechsystems/nautilus_trader</title>
    <updated>2025-04-20T01:45:42Z</updated>
    <id>tag:github.com,2025-04-20:/nautechsystems/nautilus_trader</id>
    <link href="https://github.com/nautechsystems/nautilus_trader" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A high-performance algorithmic trading platform and event-driven backtester&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/nautilus-trader-logo.png&#34; width=&#34;500&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codecov.io/gh/nautechsystems/nautilus_trader&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/nautechsystems/nautilus_trader/branch/master/graph/badge.svg?token=DXO9QQI40H&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codspeed.io/nautechsystems/nautilus_trader&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://codspeed.io/badge.json&#34; alt=&#34;codspeed&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/pypi/pyversions/nautilus_trader&#34; alt=&#34;pythons&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/v/nautilus_trader&#34; alt=&#34;pypi-version&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/format/nautilus_trader?color=blue&#34; alt=&#34;pypi-format&#34;&gt; &lt;a href=&#34;https://pepy.tech/project/nautilus-trader&#34;&gt;&lt;img src=&#34;https://pepy.tech/badge/nautilus-trader&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/NautilusTrader&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord-%235865F2.svg?logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Branch&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Version&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;master&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://packages.nautechsystems.io/simple/nautilus-trader/index.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fnautechsystems%2Fnautilus_trader%2Fmaster%2Fversion.json&#34; alt=&#34;version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml/badge.svg?branch=master&#34; alt=&#34;build&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;nightly&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://packages.nautechsystems.io/simple/nautilus-trader/index.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fnautechsystems%2Fnautilus_trader%2Fnightly%2Fversion.json&#34; alt=&#34;version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml/badge.svg?branch=nightly&#34; alt=&#34;build&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;develop&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://packages.nautechsystems.io/simple/nautilus-trader/index.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fnautechsystems%2Fnautilus_trader%2Fdevelop%2Fversion.json&#34; alt=&#34;version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml/badge.svg?branch=develop&#34; alt=&#34;build&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Platform&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Rust&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Python&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;Linux (x86_64)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.86.0+&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3.11-3.13&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;Linux (ARM64)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.86.0+&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3.11-3.13&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;macOS (ARM64)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.86.0+&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3.11-3.13&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;Windows (x86_64)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.86.0+&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3.11-3.13&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Docs&lt;/strong&gt;: &lt;a href=&#34;https://nautilustrader.io/docs/&#34;&gt;https://nautilustrader.io/docs/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Website&lt;/strong&gt;: &lt;a href=&#34;https://nautilustrader.io&#34;&gt;https://nautilustrader.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Support&lt;/strong&gt;: &lt;a href=&#34;mailto:support@nautilustrader.io&#34;&gt;support@nautilustrader.io&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;NautilusTrader is an open-source, high-performance, production-grade algorithmic trading platform, providing quantitative traders with the ability to backtest portfolios of automated trading strategies on historical data with an event-driven engine, and also deploy those same strategies live, with no code changes.&lt;/p&gt; &#xA;&lt;p&gt;The platform is &lt;em&gt;AI-first&lt;/em&gt;, designed to develop and deploy algorithmic trading strategies within a highly performant and robust Python-native environment. This helps to address the parity challenge of keeping the Python research/backtest environment consistent with the production live trading environment.&lt;/p&gt; &#xA;&lt;p&gt;NautilusTrader&#39;s design, architecture, and implementation philosophy prioritizes software correctness and safety at the highest level, with the aim of supporting Python-native, mission-critical, trading system backtesting and live deployment workloads.&lt;/p&gt; &#xA;&lt;p&gt;The platform is also universal, and asset-class-agnostic — with any REST API or WebSocket feed able to be integrated via modular adapters. It supports high-frequency trading across a wide range of asset classes and instrument types including FX, Equities, Futures, Options, Crypto and Betting, enabling seamless operations across multiple venues simultaneously.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/nautilus-trader.png&#34; alt=&#34;nautilus-trader&#34; title=&#34;nautilus-trader&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt;: Core is written in Rust with asynchronous networking using &lt;a href=&#34;https://crates.io/crates/tokio&#34;&gt;tokio&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reliable&lt;/strong&gt;: Type safety and thread safety through Rust. &lt;a href=&#34;https://redis.io&#34;&gt;Redis&lt;/a&gt;-backed performant state persistence (optional).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Portable&lt;/strong&gt;: OS independent, runs on Linux, macOS, and Windows. Deploy using Docker.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flexible&lt;/strong&gt;: Modular adapters mean any REST API or WebSocket feed can be integrated.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Advanced&lt;/strong&gt;: Time in force &lt;code&gt;IOC&lt;/code&gt;, &lt;code&gt;FOK&lt;/code&gt;, &lt;code&gt;GTC&lt;/code&gt;, &lt;code&gt;GTD&lt;/code&gt;, &lt;code&gt;DAY&lt;/code&gt;, &lt;code&gt;AT_THE_OPEN&lt;/code&gt;, &lt;code&gt;AT_THE_CLOSE&lt;/code&gt;, advanced order types and conditional triggers. Execution instructions &lt;code&gt;post-only&lt;/code&gt;, &lt;code&gt;reduce-only&lt;/code&gt;, and icebergs. Contingency orders including &lt;code&gt;OCO&lt;/code&gt;, &lt;code&gt;OUO&lt;/code&gt;, &lt;code&gt;OTO&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Customizable&lt;/strong&gt;: Add user-defined custom components, or assemble entire systems from scratch leveraging the &lt;a href=&#34;https://nautilustrader.io/docs/latest/concepts/cache&#34;&gt;cache&lt;/a&gt; and &lt;a href=&#34;https://nautilustrader.io/docs/latest/concepts/message_bus&#34;&gt;message bus&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Backtesting&lt;/strong&gt;: Run with multiple venues, instruments and strategies simultaneously using historical quote tick, trade tick, bar, order book and custom data with nanosecond resolution.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Live&lt;/strong&gt;: Use identical strategy implementations between backtesting and live deployments.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-venue&lt;/strong&gt;: Multiple venue capabilities facilitate market-making and statistical arbitrage strategies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AI Training&lt;/strong&gt;: Backtest engine fast enough to be used to train AI trading agents (RL/ES).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/nautilus-art.png&#34; alt=&#34;Alt text&#34; title=&#34;nautilus&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;nautilus - from ancient Greek &#39;sailor&#39; and naus &#39;ship&#39;.&lt;/em&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;The nautilus shell consists of modular chambers with a growth factor which approximates a logarithmic spiral. The idea is that this can be translated to the aesthetics of design and architecture.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Why NautilusTrader?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Highly performant event-driven Python&lt;/strong&gt;: Native binary core components.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Parity between backtesting and live trading&lt;/strong&gt;: Identical strategy code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reduced operational risk&lt;/strong&gt;: Enhanced risk management functionality, logical accuracy, and type safety.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Highly extendable&lt;/strong&gt;: Message bus, custom components and actors, custom data, custom adapters.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Traditionally, trading strategy research and backtesting might be conducted in Python using vectorized methods, with the strategy then needing to be reimplemented in a more event-driven way using C++, C#, Java or other statically typed language(s). The reasoning here is that vectorized backtesting code cannot express the granular time and event dependent complexity of real-time trading, where compiled languages have proven to be more suitable due to their inherently higher performance, and type safety.&lt;/p&gt; &#xA;&lt;p&gt;One of the key advantages of NautilusTrader here, is that this reimplementation step is now circumvented - as the critical core components of the platform have all been written entirely in &lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt; or &lt;a href=&#34;https://cython.org/&#34;&gt;Cython&lt;/a&gt;. This means we&#39;re using the right tools for the job, where systems programming languages compile performant binaries, with CPython C extension modules then able to offer a Python-native environment, suitable for professional quantitative traders and trading firms.&lt;/p&gt; &#xA;&lt;h2&gt;Why Python?&lt;/h2&gt; &#xA;&lt;p&gt;Python was originally created decades ago as a simple scripting language with a clean straightforward syntax. It has since evolved into a fully fledged general purpose object-oriented programming language. Based on the TIOBE index, Python is currently the most popular programming language in the world. Not only that, Python has become the &lt;em&gt;de facto lingua franca&lt;/em&gt; of data science, machine learning, and artificial intelligence.&lt;/p&gt; &#xA;&lt;p&gt;The language out of the box is not without its drawbacks however, especially in the context of implementing large performance-critical systems. Cython has addressed a lot of these issues, offering all the advantages of a statically typed language, embedded into Python&#39;s rich ecosystem of software libraries and developer/user communities.&lt;/p&gt; &#xA;&lt;h2&gt;What is Rust?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt; is a multi-paradigm programming language designed for performance and safety, especially safe concurrency. Rust is &#34;blazingly fast&#34; and memory-efficient (comparable to C and C++) with no garbage collector. It can power mission-critical systems, run on embedded devices, and easily integrates with other languages.&lt;/p&gt; &#xA;&lt;p&gt;Rust’s rich type system and ownership model guarantees memory-safety and thread-safety deterministically — eliminating many classes of bugs at compile-time.&lt;/p&gt; &#xA;&lt;p&gt;The project increasingly utilizes Rust for core performance-critical components. Python language binding is handled through Cython and &lt;a href=&#34;https://pyo3.rs&#34;&gt;PyO3&lt;/a&gt;, with static libraries linked at compile-time before the wheel binaries are packaged, so a user does not need to have Rust installed to run NautilusTrader.&lt;/p&gt; &#xA;&lt;p&gt;This project makes the &lt;a href=&#34;https://raphlinus.github.io/rust/2020/01/18/soundness-pledge.html&#34;&gt;Soundness Pledge&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;“The intent of this project is to be free of soundness bugs. The developers will do their best to avoid them, and welcome help in analyzing and fixing them.”&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;MSRV:&lt;/strong&gt; NautilusTrader relies heavily on improvements in the Rust language and compiler. As a result, the Minimum Supported Rust Version (MSRV) is generally equal to the latest stable release of Rust.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Integrations&lt;/h2&gt; &#xA;&lt;p&gt;NautilusTrader is modularly designed to work with &lt;em&gt;adapters&lt;/em&gt;, enabling connectivity to trading venues and data providers by translating their raw APIs into a unified interface and normalized domain model.&lt;/p&gt; &#xA;&lt;p&gt;The following integrations are currently supported:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Name&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;ID&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Type&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Status&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Docs&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://betfair.com&#34;&gt;Betfair&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;BETFAIR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Sports Betting Exchange&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stable-green&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://nautilustrader.io/docs/nightly/integrations/betfair.html&#34;&gt;Guide&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://binance.com&#34;&gt;Binance&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;BINANCE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Crypto Exchange (CEX)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stable-green&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://nautilustrader.io/docs/nightly/integrations/binance.html&#34;&gt;Guide&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://binance.us&#34;&gt;Binance US&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;BINANCE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Crypto Exchange (CEX)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stable-green&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://nautilustrader.io/docs/nightly/integrations/binance.html&#34;&gt;Guide&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.binance.com/en/futures&#34;&gt;Binance Futures&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;BINANCE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Crypto Exchange (CEX)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stable-green&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://nautilustrader.io/docs/nightly/integrations/binance.html&#34;&gt;Guide&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.bybit.com&#34;&gt;Bybit&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;BYBIT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Crypto Exchange (CEX)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stable-green&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://nautilustrader.io/docs/nightly/integrations/bybit.html&#34;&gt;Guide&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.coinbase.com/en/international-exchange&#34;&gt;Coinbase International&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;COINBASE_INTX&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Crypto Exchange (CEX)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/beta-yellow&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://nautilustrader.io/docs/nightly/integrations/coinbase_intx.html&#34;&gt;Guide&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://databento.com&#34;&gt;Databento&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;DATABENTO&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Data Provider&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stable-green&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://nautilustrader.io/docs/nightly/integrations/databento.html&#34;&gt;Guide&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://dydx.exchange/&#34;&gt;dYdX&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;DYDX&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Crypto Exchange (DEX)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stable-green&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://nautilustrader.io/docs/nightly/integrations/dydx.html&#34;&gt;Guide&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.interactivebrokers.com&#34;&gt;Interactive Brokers&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;INTERACTIVE_BROKERS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Brokerage (multi-venue)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stable-green&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://nautilustrader.io/docs/nightly/integrations/ib.html&#34;&gt;Guide&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://okx.com&#34;&gt;OKX&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;OKX&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Crypto Exchange (CEX)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/building-orange&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://nautilustrader.io/docs/nightly/integrations/okx.html&#34;&gt;Guide&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://polymarket.com&#34;&gt;Polymarket&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;POLYMARKET&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Prediction Market (DEX)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stable-green&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://nautilustrader.io/docs/nightly/integrations/polymarket.html&#34;&gt;Guide&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://tardis.dev&#34;&gt;Tardis&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;TARDIS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Crypto Data Provider&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stable-green&#34; alt=&#34;status&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://nautilustrader.io/docs/nightly/integrations/tardis.html&#34;&gt;Guide&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ID&lt;/strong&gt;: The default client ID for the integrations adapter clients.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Type&lt;/strong&gt;: The type of integration (often the venue type).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Status&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;building&lt;/code&gt;: Under construction and likely not in a usable state.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;beta&lt;/code&gt;: Completed to a minimally working state and in a beta testing phase.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stable&lt;/code&gt;: Stabilized feature set and API, the integration has been tested by both developers and users to a reasonable level (some bugs may still remain).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://nautilustrader.io/docs/latest/integrations/index.html&#34;&gt;Integrations&lt;/a&gt; documentation for further details.&lt;/p&gt; &#xA;&lt;h2&gt;Versioning and releases&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;NautilusTrader is still under active development&lt;/strong&gt;. Some features may be incomplete, and while the API is becoming more stable, breaking changes can occur between releases. We strive to document these changes in the release notes on a &lt;strong&gt;best-effort basis&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We aim to follow a &lt;strong&gt;bi-weekly release schedule&lt;/strong&gt;, though experimental or larger features may cause delays.&lt;/p&gt; &#xA;&lt;h3&gt;Branches&lt;/h3&gt; &#xA;&lt;p&gt;We aim to maintain a stable, passing build across all branches.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;master&lt;/code&gt;: Reflects the source code for the latest released version.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nightly&lt;/code&gt;: Includes experimental and in-progress features, merged from the &lt;code&gt;develop&lt;/code&gt; branch daily at &lt;strong&gt;14:00 UTC&lt;/strong&gt; and also when required.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;develop&lt;/code&gt;: The most active branch, frequently updated with new commits, including experimental and in-progress features.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;Our &lt;a href=&#34;https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/ROADMAP.md&#34;&gt;roadmap&lt;/a&gt; aims to achieve a &lt;strong&gt;stable API for version 2.x&lt;/strong&gt; (likely after the Rust port). Once this milestone is reached, we plan to implement a formal deprecation process for any API changes. This approach allows us to maintain a rapid development pace for now.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Precision mode&lt;/h2&gt; &#xA;&lt;p&gt;NautilusTrader supports two precision modes for its core value types (&lt;code&gt;Price&lt;/code&gt;, &lt;code&gt;Quantity&lt;/code&gt;, &lt;code&gt;Money&lt;/code&gt;), which differ in their internal bit-width and maximum decimal precision.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;High-precision&lt;/strong&gt;: 128-bit integers with up to 16 decimals of precision, and a larger value range.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Standard-precision&lt;/strong&gt;: 64-bit integers with up to 9 decimals of precision, and a smaller value range.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;By default, the official Python wheels &lt;strong&gt;ship&lt;/strong&gt; in high-precision (128-bit) mode on Linux and macOS. On Windows, only standard-precision (64-bit) is available due to the lack of native 128-bit integer support. For the Rust crates, the default is standard-precision unless you explicitly enable the &lt;code&gt;high-precision&lt;/code&gt; feature flag.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://nautilustrader.io/docs/latest/getting_started/installation&#34;&gt;Installation Guide&lt;/a&gt; for further details.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;From PyPI&lt;/h3&gt; &#xA;&lt;p&gt;We recommend using the latest supported version of Python and setting up &lt;a href=&#34;https://pypi.org/project/nautilus_trader/&#34;&gt;nautilus_trader&lt;/a&gt; in a virtual environment to isolate dependencies.&lt;/p&gt; &#xA;&lt;p&gt;To install the latest binary wheel (or sdist package) from PyPI using Python&#39;s pip package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -U nautilus_trader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;From the Nautech Systems package index&lt;/h3&gt; &#xA;&lt;p&gt;The Nautech Systems package index (&lt;code&gt;packages.nautechsystems.io&lt;/code&gt;) is &lt;a href=&#34;https://peps.python.org/pep-0503/&#34;&gt;PEP-503&lt;/a&gt; compliant and hosts both stable and development binary wheels for &lt;code&gt;nautilus_trader&lt;/code&gt;. This enables users to install either the latest stable release or pre-release versions for testing.&lt;/p&gt; &#xA;&lt;h4&gt;Stable wheels&lt;/h4&gt; &#xA;&lt;p&gt;Stable wheels correspond to official releases of &lt;code&gt;nautilus_trader&lt;/code&gt; on PyPI, and use standard versioning.&lt;/p&gt; &#xA;&lt;p&gt;To install the latest stable release:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -U nautilus_trader --index-url=https://packages.nautechsystems.io/simple&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Development wheels&lt;/h4&gt; &#xA;&lt;p&gt;Development wheels are published from both the &lt;code&gt;nightly&lt;/code&gt; and &lt;code&gt;develop&lt;/code&gt; branches, allowing users to test features and fixes ahead of stable releases.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Wheels from the &lt;code&gt;develop&lt;/code&gt; branch are only built for the Linux x86_64 platform to save time and compute resources, while &lt;code&gt;nightly&lt;/code&gt; wheels support additional platforms as shown below.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Platform&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Nightly&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Develop&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;Linux (x86_64)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;Linux (ARM64)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;macOS (ARM64)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;Windows (x86_64)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;This process also helps preserve compute resources and ensures easy access to the exact binaries tested in CI pipelines, while adhering to &lt;a href=&#34;https://peps.python.org/pep-0440/&#34;&gt;PEP-440&lt;/a&gt; versioning standards:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;develop&lt;/code&gt; wheels use the version format &lt;code&gt;dev{date}+{build_number}&lt;/code&gt; (e.g., &lt;code&gt;1.208.0.dev20241212+7001&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nightly&lt;/code&gt; wheels use the version format &lt;code&gt;a{date}&lt;/code&gt; (alpha) (e.g., &lt;code&gt;1.208.0a20241212&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING]&lt;/p&gt; &#xA; &lt;p&gt;We don&#39;t recommend using development wheels in production environments, such as live trading controlling real capital.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Installation commands&lt;/h4&gt; &#xA;&lt;p&gt;By default, pip installs the latest stable release. Adding the &lt;code&gt;--pre&lt;/code&gt; flag ensures that pre-release versions, including development wheels, are considered.&lt;/p&gt; &#xA;&lt;p&gt;To install the latest available pre-release (including development wheels):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -U nautilus_trader --pre --index-url=https://packages.nautechsystems.io/simple&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install a specific development wheel (e.g., &lt;code&gt;1.208.0a20241212&lt;/code&gt; for December 12, 2024):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install nautilus_trader==1.208.0a20241212 --index-url=https://packages.nautechsystems.io/simple&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Available versions&lt;/h4&gt; &#xA;&lt;p&gt;You can view all available versions of &lt;code&gt;nautilus_trader&lt;/code&gt; on the &lt;a href=&#34;https://packages.nautechsystems.io/simple/nautilus-trader/index.html&#34;&gt;package index&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To programmatically fetch and list available versions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -s https://packages.nautechsystems.io/simple/nautilus-trader/index.html | grep -oP &#39;(?&amp;lt;=&amp;lt;a href=&#34;)[^&#34;]+(?=&#34;)&#39; | awk -F&#39;#&#39; &#39;{print $1}&#39; | sort&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Branch updates&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;develop&lt;/code&gt; branch wheels (&lt;code&gt;.dev&lt;/code&gt;): Are built and published continuously with every merged commit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nightly&lt;/code&gt; branch wheels (&lt;code&gt;a&lt;/code&gt;): Are built and published daily when &lt;code&gt;develop&lt;/code&gt; branch is automatically merged at &lt;strong&gt;14:00 UTC&lt;/strong&gt; (if there are changes).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Retention policies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;develop&lt;/code&gt; branch wheels (&lt;code&gt;.dev&lt;/code&gt;): Only the most recent wheel build is retained.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nightly&lt;/code&gt; branch wheels (&lt;code&gt;a&lt;/code&gt;): Only the 10 most recent wheel builds are retained.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;From Source&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s possible to install from source using pip if you first install the build dependencies as specified in the &lt;code&gt;pyproject.toml&lt;/code&gt;. We highly recommend installing using &lt;a href=&#34;https://docs.astral.sh/uv&#34;&gt;uv&lt;/a&gt; as below.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://rustup.rs/&#34;&gt;rustup&lt;/a&gt; (the Rust toolchain installer):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Linux and macOS: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl https://sh.rustup.rs -sSf | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Windows: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Download and install &lt;a href=&#34;https://win.rustup.rs/x86_64&#34;&gt;&lt;code&gt;rustup-init.exe&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Install &#34;Desktop development with C++&#34; with &lt;a href=&#34;https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=BuildTools&amp;amp;rel=16&#34;&gt;Build Tools for Visual Studio 2019&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Verify (any system): from a terminal session run: &lt;code&gt;rustc --version&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable &lt;code&gt;cargo&lt;/code&gt; in the current shell:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Linux and macOS: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source $HOME/.cargo/env&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Windows: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Start a new PowerShell&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://clang.llvm.org/&#34;&gt;clang&lt;/a&gt; (a C language frontend for LLVM):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Linux: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install clang&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Windows: &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;Add Clang to your &lt;a href=&#34;https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=BuildTools&amp;amp;rel=16&#34;&gt;Build Tools for Visual Studio 2019&lt;/a&gt;: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Start | Visual Studio Installer | Modify | C++ Clang tools for Windows (12.0.0 - x64…) = checked | Modify&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;Enable &lt;code&gt;clang&lt;/code&gt; in the current shell: &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;[System.Environment]::SetEnvironmentVariable(&#39;path&#39;, &#34;C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Tools\Llvm\x64\bin\;&#34; + $env:Path,&#34;User&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Verify (any system): from a terminal session run: &lt;code&gt;clang --version&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install uv (see the &lt;a href=&#34;https://docs.astral.sh/uv/getting-started/installation&#34;&gt;uv installation guide&lt;/a&gt; for more details):&lt;/p&gt; &lt;pre&gt;&lt;code&gt;curl -LsSf https://astral.sh/uv/install.sh | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the source with &lt;code&gt;git&lt;/code&gt;, and install from the project&#39;s root directory:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone --branch develop --depth 1 https://github.com/nautechsystems/nautilus_trader&#xA;cd nautilus_trader&#xA;uv sync --all-extras&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;The &lt;code&gt;--depth 1&lt;/code&gt; flag fetches just the latest commit for a faster, lightweight clone.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://nautilustrader.io/docs/latest/getting_started/installation&#34;&gt;Installation Guide&lt;/a&gt; for other options and further details.&lt;/p&gt; &#xA;&lt;h2&gt;Redis&lt;/h2&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://redis.io&#34;&gt;Redis&lt;/a&gt; with NautilusTrader is &lt;strong&gt;optional&lt;/strong&gt; and only required if configured as the backend for a &lt;a href=&#34;https://nautilustrader.io/docs/latest/concepts/cache&#34;&gt;cache&lt;/a&gt; database or &lt;a href=&#34;https://nautilustrader.io/docs/latest/concepts/message_bus&#34;&gt;message bus&lt;/a&gt;. See the &lt;strong&gt;Redis&lt;/strong&gt; section of the &lt;a href=&#34;https://nautilustrader.io/docs/latest/getting_started/installation#redis&#34;&gt;Installation Guide&lt;/a&gt; for further details.&lt;/p&gt; &#xA;&lt;h2&gt;Makefile&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;code&gt;Makefile&lt;/code&gt; is provided to automate most installation and build tasks for development. It provides the following targets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;make install&lt;/code&gt;: Installs in &lt;code&gt;release&lt;/code&gt; build mode with all dependency groups and extras.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make install-debug&lt;/code&gt;: Same as &lt;code&gt;make install&lt;/code&gt; but with &lt;code&gt;debug&lt;/code&gt; build mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make install-just-deps&lt;/code&gt;: Installs just the &lt;code&gt;main&lt;/code&gt;, &lt;code&gt;dev&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; dependencies (does not install package).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make build&lt;/code&gt;: Runs the build script in &lt;code&gt;release&lt;/code&gt; build mode (default).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make build-debug&lt;/code&gt;: Runs the build script in &lt;code&gt;debug&lt;/code&gt; build mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make build-wheel&lt;/code&gt;: Runs uv build with a wheel format in &lt;code&gt;release&lt;/code&gt; mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make build-wheel-debug&lt;/code&gt;: Runs uv build with a wheel format in &lt;code&gt;debug&lt;/code&gt; mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make clean&lt;/code&gt;: Deletes all build results, such as &lt;code&gt;.so&lt;/code&gt; or &lt;code&gt;.dll&lt;/code&gt; files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make distclean&lt;/code&gt;: &lt;strong&gt;CAUTION&lt;/strong&gt; Removes all artifacts not in the git index from the repository. This includes source files which have not been &lt;code&gt;git add&lt;/code&gt;ed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make docs&lt;/code&gt;: Builds the documentation HTML using Sphinx.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make pre-commit&lt;/code&gt;: Runs the pre-commit checks over all files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make ruff&lt;/code&gt;: Runs ruff over all files using the &lt;code&gt;pyproject.toml&lt;/code&gt; config (with autofix).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make pytest&lt;/code&gt;: Runs all tests with &lt;code&gt;pytest&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make test-performance&lt;/code&gt;: Runs performance tests with &lt;a href=&#34;https://codspeed.io&#34;&gt;codspeed&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP]&lt;/p&gt; &#xA; &lt;p&gt;Run &lt;code&gt;make build-debug&lt;/code&gt; to compile after changes to Rust or Cython code for the most efficient development workflow.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Indicators and strategies can be developed in both Python and Cython. For performance and latency-sensitive applications, we recommend using Cython. Below are some examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/nautilus_trader/examples/indicators/ema_python.py&#34;&gt;indicator&lt;/a&gt; example written in Python.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/nautilus_trader/indicators/&#34;&gt;indicator&lt;/a&gt; examples written in Cython.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/nautilus_trader/examples/strategies/&#34;&gt;strategy&lt;/a&gt; examples written in Python.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/examples/backtest/&#34;&gt;backtest&lt;/a&gt; examples using a &lt;code&gt;BacktestEngine&lt;/code&gt; directly.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Docker&lt;/h2&gt; &#xA;&lt;p&gt;Docker containers are built using the base image &lt;code&gt;python:3.12-slim&lt;/code&gt; with the following variant tags:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;nautilus_trader:latest&lt;/code&gt; has the latest release version installed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nautilus_trader:nightly&lt;/code&gt; has the head of the &lt;code&gt;nightly&lt;/code&gt; branch installed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;jupyterlab:latest&lt;/code&gt; has the latest release version installed along with &lt;code&gt;jupyterlab&lt;/code&gt; and an example backtest notebook with accompanying data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;jupyterlab:nightly&lt;/code&gt; has the head of the &lt;code&gt;nightly&lt;/code&gt; branch installed along with &lt;code&gt;jupyterlab&lt;/code&gt; and an example backtest notebook with accompanying data.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can pull the container images as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull ghcr.io/nautechsystems/&amp;lt;image_variant_tag&amp;gt; --platform linux/amd64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can launch the backtest example container by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull ghcr.io/nautechsystems/jupyterlab:nightly --platform linux/amd64&#xA;docker run -p 8888:8888 ghcr.io/nautechsystems/jupyterlab:nightly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then open your browser at the following address:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://127.0.0.1:8888/lab&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING]&lt;/p&gt; &#xA; &lt;p&gt;NautilusTrader currently exceeds the rate limit for Jupyter notebook logging (stdout output). As a result, the &lt;code&gt;log_level&lt;/code&gt; in the examples is set to &lt;code&gt;ERROR&lt;/code&gt;. Lowering this level to see more logging will cause the notebook to hang during cell execution. We are investigating a fix, which may involve either raising the configured rate limits for Jupyter or throttling the log flushing from Nautilus.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/jupyterlab/jupyterlab/issues/12845&#34;&gt;https://github.com/jupyterlab/jupyterlab/issues/12845&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/deshaw/jupyterlab-limit-output&#34;&gt;https://github.com/deshaw/jupyterlab-limit-output&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;We aim to provide the most pleasant developer experience possible for this hybrid codebase of Python, Cython and Rust. See the &lt;a href=&#34;https://nautilustrader.io/docs/latest/developer_guide/index.html&#34;&gt;Developer Guide&lt;/a&gt; for helpful information.&lt;/p&gt; &#xA;&lt;h3&gt;Testing with Rust&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nexte.st&#34;&gt;cargo-nextest&lt;/a&gt; is the standard Rust test runner for NautilusTrader. Its key benefit is isolating each test in its own process, ensuring test reliability by avoiding interference.&lt;/p&gt; &#xA;&lt;p&gt;You can install cargo-nextest by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install cargo-nextest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP]&lt;/p&gt; &#xA; &lt;p&gt;Run Rust tests with &lt;code&gt;make cargo-test&lt;/code&gt;, which uses &lt;strong&gt;cargo-nextest&lt;/strong&gt; with an efficient profile.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Thank you for considering contributing to NautilusTrader! We welcome any and all help to improve the project. If you have an idea for an enhancement or a bug fix, the first step is to open an &lt;a href=&#34;https://github.com/nautechsystems/nautilus_trader/issues&#34;&gt;issue&lt;/a&gt; on GitHub to discuss it with the team. This helps to ensure that your contribution will be well-aligned with the goals of the project and avoids duplication of effort.&lt;/p&gt; &#xA;&lt;p&gt;Once you&#39;re ready to start working on your contribution, make sure to follow the guidelines outlined in the &lt;a href=&#34;https://github.com/nautechsystems/nautilus_trader/raw/develop/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file. This includes signing a Contributor License Agreement (CLA) to ensure that your contributions can be included in the project.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;Pull requests should target the &lt;code&gt;develop&lt;/code&gt; branch (the default branch). This is where new features and improvements are integrated before release.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Thank you again for your interest in NautilusTrader! We look forward to reviewing your contributions and working with you to improve the project.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Join our community of users and contributors on &lt;a href=&#34;https://discord.gg/NautilusTrader&#34;&gt;Discord&lt;/a&gt; to chat and stay up-to-date with the latest announcements and features of NautilusTrader. Whether you&#39;re a developer looking to contribute or just want to learn more about the platform, all are welcome on our Discord server.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING]&lt;/p&gt; &#xA; &lt;p&gt;NautilusTrader does not issue, promote, or endorse any cryptocurrency tokens. Any claims or communications suggesting otherwise are unauthorized and false.&lt;/p&gt; &#xA; &lt;p&gt;All official updates and communications from NautilusTrader will be shared exclusively through &lt;a href=&#34;https://nautilustrader.io&#34;&gt;https://nautilustrader.io&lt;/a&gt;, our &lt;a href=&#34;https://discord.gg/NautilusTrader&#34;&gt;Discord server&lt;/a&gt;, or our X (Twitter) account: &lt;a href=&#34;https://x.com/NautilusTrader&#34;&gt;@NautilusTrader&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;If you encounter any suspicious activity, please report it to the appropriate platform and contact us at &lt;a href=&#34;mailto:info@nautechsystems.io&#34;&gt;info@nautechsystems.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The source code for NautilusTrader is available on GitHub under the &lt;a href=&#34;https://www.gnu.org/licenses/lgpl-3.0.en.html&#34;&gt;GNU Lesser General Public License v3.0&lt;/a&gt;. Contributions to the project are welcome and require the completion of a standard &lt;a href=&#34;https://github.com/nautechsystems/nautilus_trader/raw/develop/CLA.md&#34;&gt;Contributor License Agreement (CLA)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;NautilusTrader™ is developed and maintained by Nautech Systems, a technology company specializing in the development of high-performance trading systems. For more information, visit &lt;a href=&#34;https://nautilustrader.io&#34;&gt;https://nautilustrader.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;© 2015-2025 Nautech Systems Pty Ltd. All rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/ns-logo.png&#34; alt=&#34;nautechsystems&#34; title=&#34;nautechsystems&#34;&gt; &lt;img src=&#34;https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/ferris.png&#34; width=&#34;128&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sinaptik-ai/pandas-ai</title>
    <updated>2025-04-20T01:45:42Z</updated>
    <id>tag:github.com,2025-04-20:/sinaptik-ai/pandas-ai</id>
    <link href="https://github.com/sinaptik-ai/pandas-ai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Chat with your database or your datalake (SQL, CSV, parquet). PandasAI makes data analysis conversational using LLMs and RAG.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sinaptik-ai/pandas-ai/main/assets/logo.png&#34; alt=&#34;PandaAI&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pypi.org/project/pandasai/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/pandasai?label=Release&amp;amp;style=flat-square&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sinaptik-ai/pandas-ai/actions/workflows/ci-core.yml/badge.svg&#34;&gt;&lt;img src=&#34;https://github.com/sinaptik-ai/pandas-ai/actions/workflows/ci-core.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sinaptik-ai/pandas-ai/actions/workflows/cd.yml/badge.svg&#34;&gt;&lt;img src=&#34;https://github.com/sinaptik-ai/pandas-ai/actions/workflows/cd.yml/badge.svg?sanitize=true&#34; alt=&#34;CD&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/sinaptik-ai/pandas-ai&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/sinaptik-ai/pandas-ai/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/KYKj9F2FRH&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/kF7FqH2FwS?style=flat&amp;amp;compact=true&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pepy.tech/project/pandasai&#34;&gt;&lt;img src=&#34;https://static.pepy.tech/badge/pandasai&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://colab.research.google.com/drive/1ZnO-njhL7TBOYPZaqvMvGtsjckZKrv2E?usp=sharing&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open in Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;PandaAI is a Python platform that makes it easy to ask questions to your data in natural language. It helps non-technical users to interact with their data in a more natural way, and it helps technical users to save time, and effort when working with data.&lt;/p&gt; &#xA;&lt;h1&gt;🔧 Getting started&lt;/h1&gt; &#xA;&lt;p&gt;You can find the full documentation for PandaAI &lt;a href=&#34;https://pandas-ai.readthedocs.io/en/latest/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can either decide to use PandaAI in your Jupyter notebooks, Streamlit apps, or use the client and server architecture from the repo.&lt;/p&gt; &#xA;&lt;h2&gt;☁️ Using the platform&lt;/h2&gt; &#xA;&lt;p&gt;The library can be used alongside our powerful data platform, making end-to-end conversational data analytics possible with as little as a few lines of code.&lt;/p&gt; &#xA;&lt;p&gt;Load your data, save them as a dataframe, and push them to the platform&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandasai as pai&#xA;&#xA;pai.api_key.set(&#34;your-pai-api-key&#34;)&#xA;&#xA;file = pai.read_csv(&#34;./filepath.csv&#34;)&#xA;&#xA;dataset = pai.create(path=&#34;your-organization/dataset-name&#34;,&#xA;    df=file,&#xA;    name=&#34;dataset-name&#34;,&#xA;    description=&#34;dataset-description&#34;)&#xA;&#xA;dataset.push()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your team can now access and query this data using natural language through the platform.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sinaptik-ai/pandas-ai/main/assets/demo.gif&#34; alt=&#34;PandaAI&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📚 Using the library&lt;/h2&gt; &#xA;&lt;h3&gt;Python Requirements&lt;/h3&gt; &#xA;&lt;p&gt;Python version &lt;code&gt;3.8+ &amp;lt;3.12&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;📦 Installation&lt;/h3&gt; &#xA;&lt;p&gt;You can install the PandaAI library using pip or poetry.&lt;/p&gt; &#xA;&lt;p&gt;With pip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install &#34;pandasai&amp;gt;=3.0.0b2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With poetry:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;poetry add &#34;pandasai&amp;gt;=3.0.0b2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💻 Usage&lt;/h3&gt; &#xA;&lt;h4&gt;Ask questions&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandasai as pai&#xA;&#xA;# Sample DataFrame&#xA;df = pai.DataFrame({&#xA;    &#34;country&#34;: [&#34;United States&#34;, &#34;United Kingdom&#34;, &#34;France&#34;, &#34;Germany&#34;, &#34;Italy&#34;, &#34;Spain&#34;, &#34;Canada&#34;, &#34;Australia&#34;, &#34;Japan&#34;, &#34;China&#34;],&#xA;    &#34;revenue&#34;: [5000, 3200, 2900, 4100, 2300, 2100, 2500, 2600, 4500, 7000]&#xA;})&#xA;&#xA;# By default, unless you choose a different LLM, it will use BambooLLM.&#xA;# You can get your free API key signing up at https://app.pandabi.ai (you can also configure it in your .env file)&#xA;pai.api_key.set(&#34;your-pai-api-key&#34;)&#xA;&#xA;df.chat(&#39;Which are the top 5 countries by sales?&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;China, United States, Japan, Germany, Australia&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Or you can ask more complex questions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.chat(&#xA;    &#34;What is the total sales for the top 3 countries by sales?&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;The total sales for the top 3 countries by sales is 16500.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Visualize charts&lt;/h4&gt; &#xA;&lt;p&gt;You can also ask PandaAI to generate charts for you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.chat(&#xA;    &#34;Plot the histogram of countries showing for each one the gd. Use different colors for each bar&#34;,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sinaptik-ai/pandas-ai/main/assets/histogram-chart.png?raw=true&#34; alt=&#34;Chart&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Multiple DataFrames&lt;/h4&gt; &#xA;&lt;p&gt;You can also pass in multiple dataframes to PandaAI and ask questions relating them.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandasai as pai&#xA;&#xA;employees_data = {&#xA;    &#39;EmployeeID&#39;: [1, 2, 3, 4, 5],&#xA;    &#39;Name&#39;: [&#39;John&#39;, &#39;Emma&#39;, &#39;Liam&#39;, &#39;Olivia&#39;, &#39;William&#39;],&#xA;    &#39;Department&#39;: [&#39;HR&#39;, &#39;Sales&#39;, &#39;IT&#39;, &#39;Marketing&#39;, &#39;Finance&#39;]&#xA;}&#xA;&#xA;salaries_data = {&#xA;    &#39;EmployeeID&#39;: [1, 2, 3, 4, 5],&#xA;    &#39;Salary&#39;: [5000, 6000, 4500, 7000, 5500]&#xA;}&#xA;&#xA;employees_df = pai.DataFrame(employees_data)&#xA;salaries_df = pai.DataFrame(salaries_data)&#xA;&#xA;# By default, unless you choose a different LLM, it will use BambooLLM.&#xA;# You can get your free API key signing up at https://app.pandabi.ai (you can also configure it in your .env file)&#xA;pai.api_key.set(&#34;your-pai-api-key&#34;)&#xA;&#xA;pai.chat(&#34;Who gets paid the most?&#34;, employees_df, salaries_df)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Olivia gets paid the most.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Docker Sandbox&lt;/h4&gt; &#xA;&lt;p&gt;You can run PandaAI in a Docker sandbox, providing a secure, isolated environment to execute code safely and mitigate the risk of malicious attacks.&lt;/p&gt; &#xA;&lt;h5&gt;Python Requirements&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install &#34;pandasai-docker&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Usage&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandasai as pai&#xA;from pandasai_docker import DockerSandbox&#xA;&#xA;# Initialize the sandbox&#xA;sandbox = DockerSandbox()&#xA;sandbox.start()&#xA;&#xA;employees_data = {&#xA;    &#39;EmployeeID&#39;: [1, 2, 3, 4, 5],&#xA;    &#39;Name&#39;: [&#39;John&#39;, &#39;Emma&#39;, &#39;Liam&#39;, &#39;Olivia&#39;, &#39;William&#39;],&#xA;    &#39;Department&#39;: [&#39;HR&#39;, &#39;Sales&#39;, &#39;IT&#39;, &#39;Marketing&#39;, &#39;Finance&#39;]&#xA;}&#xA;&#xA;salaries_data = {&#xA;    &#39;EmployeeID&#39;: [1, 2, 3, 4, 5],&#xA;    &#39;Salary&#39;: [5000, 6000, 4500, 7000, 5500]&#xA;}&#xA;&#xA;employees_df = pai.DataFrame(employees_data)&#xA;salaries_df = pai.DataFrame(salaries_data)&#xA;&#xA;# By default, unless you choose a different LLM, it will use BambooLLM.&#xA;# You can get your free API key signing up at https://app.pandabi.ai (you can also configure it in your .env file)&#xA;pai.api_key.set(&#34;your-pai-api-key&#34;)&#xA;&#xA;pai.chat(&#34;Who gets paid the most?&#34;, employees_df, salaries_df, sandbox=sandbox)&#xA;&#xA;# Don&#39;t forget to stop the sandbox when done&#xA;sandbox.stop()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Olivia gets paid the most.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find more examples in the &lt;a href=&#34;https://raw.githubusercontent.com/sinaptik-ai/pandas-ai/main/examples&#34;&gt;examples&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;📜 License&lt;/h2&gt; &#xA;&lt;p&gt;PandaAI is available under the MIT expat license, except for the &lt;code&gt;pandasai/ee&lt;/code&gt; directory of this repository, which has its &lt;a href=&#34;https://github.com/sinaptik-ai/pandas-ai/raw/main/ee/LICENSE&#34;&gt;license here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are interested in managed PandaAI Cloud or self-hosted Enterprise Offering, &lt;a href=&#34;https://getpanda.ai/pricing&#34;&gt;contact us&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Beta Notice&lt;/strong&gt;&lt;br&gt; Release v3 is currently in beta. The following documentation and examples reflect the features and functionality in progress and may change before the final release.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pandas-ai.readthedocs.io/en/latest/&#34;&gt;Docs&lt;/a&gt; for comprehensive documentation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinaptik-ai/pandas-ai/main/examples&#34;&gt;Examples&lt;/a&gt; for example notebooks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/KYKj9F2FRH&#34;&gt;Discord&lt;/a&gt; for discussion with the community and PandaAI team&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🤝 Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! Please check the outstanding issues and feel free to open a pull request. For more information, please check out the &lt;a href=&#34;https://raw.githubusercontent.com/sinaptik-ai/pandas-ai/main/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Thank you!&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sinaptik-ai/pandas-ai/graphs/contributors&#34;&gt;&lt;img src=&#34;https://contrib.rocks/image?repo=sinaptik-ai/pandas-ai&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>