<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-03T01:59:36Z</updated>
  <subtitle>Weekly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lucidrains/imagen-pytorch</title>
    <updated>2022-06-03T01:59:36Z</updated>
    <id>tag:github.com,2022-06-03:/lucidrains/imagen-pytorch</id>
    <link href="https://github.com/lucidrains/imagen-pytorch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Implementation of Imagen, Google&#39;s Text-to-Image Neural Network, in Pytorch&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lucidrains/imagen-pytorch/main/imagen.png&#34; width=&#34;450px&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Imagen - Pytorch (wip)&lt;/h2&gt; &#xA;&lt;p&gt;Implementation of &lt;a href=&#34;https://gweb-research-imagen.appspot.com/&#34;&gt;Imagen&lt;/a&gt;, Google&#39;s Text-to-Image Neural Network that beats DALL-E2, in Pytorch. It is the new SOTA for text-to-image synthesis.&lt;/p&gt; &#xA;&lt;p&gt;Architecturally, it is actually much simpler than DALL-E2. It consists of a cascading DDPM conditioned on text embeddings from a large pretrained T5 model (attention network). It also contains dynamic clipping for improved classifier free guidance, noise level conditioning, and a memory efficient unet design.&lt;/p&gt; &#xA;&lt;p&gt;It appears neither CLIP nor prior network is needed after all. And so research continues.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=xqDeAz0U-R4&#34;&gt;AI Coffee Break with Letitia&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please join &lt;a href=&#34;https://discord.gg/xBPBXfcFHd&#34;&gt;&lt;img alt=&#34;Join us on Discord&#34; src=&#34;https://img.shields.io/discord/823813159592001537?color=5865F2&amp;amp;logo=discord&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt; if you are interested in helping out with the replication with the &lt;a href=&#34;https://laion.ai/&#34;&gt;LAION&lt;/a&gt; community&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pip install imagen-pytorch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch&#xA;from imagen_pytorch import Unet, Imagen&#xA;&#xA;# unet for imagen&#xA;&#xA;unet1 = Unet(&#xA;    dim = 32,&#xA;    cond_dim = 512,&#xA;    dim_mults = (1, 2, 4, 8),&#xA;    num_resnet_blocks = 3,&#xA;    layer_attns = (False, True, True, True),&#xA;    layer_cross_attns = (False, True, True, True)&#xA;)&#xA;&#xA;unet2 = Unet(&#xA;    dim = 32,&#xA;    cond_dim = 512,&#xA;    dim_mults = (1, 2, 4, 8),&#xA;    num_resnet_blocks = (2, 4, 8, 8),&#xA;    layer_attns = (False, False, False, True),&#xA;    layer_cross_attns = (False, False, False, True)&#xA;)&#xA;&#xA;# imagen, which contains the unets above (base unet and super resoluting ones)&#xA;&#xA;imagen = Imagen(&#xA;    unets = (unet1, unet2),&#xA;    image_sizes = (64, 256),&#xA;    beta_schedules = (&#39;cosine&#39;, &#39;linear&#39;),&#xA;    timesteps = 1000,&#xA;    cond_drop_prob = 0.5&#xA;).cuda()&#xA;&#xA;# mock images (get a lot of this) and text encodings from large T5&#xA;&#xA;text_embeds = torch.randn(4, 256, 768).cuda()&#xA;text_masks = torch.ones(4, 256).bool().cuda()&#xA;images = torch.randn(4, 3, 256, 256).cuda()&#xA;&#xA;# feed images into imagen, training each unet in the cascade&#xA;&#xA;for i in (1, 2):&#xA;    loss = imagen(images, text_embeds = text_embeds, text_masks = text_masks, unet_number = i)&#xA;    loss.backward()&#xA;&#xA;# do the above for many many many many steps&#xA;# now you can sample an image based on the text embeddings from the cascading ddpm&#xA;&#xA;images = imagen.sample(texts = [&#xA;    &#39;a whale breaching from afar&#39;,&#xA;    &#39;young girl blowing out candles on her birthday cake&#39;,&#xA;    &#39;fireworks with blue and green sparkles&#39;&#xA;], cond_scale = 2.)&#xA;&#xA;images.shape # (3, 3, 256, 256)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the &lt;code&gt;ImagenTrainer&lt;/code&gt; wrapper class, the exponential moving averages for all of the U-nets in the cascading DDPM will be automatically taken care of when calling &lt;code&gt;update&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch&#xA;from imagen_pytorch import Unet, Imagen, ImagenTrainer&#xA;&#xA;# unet for imagen&#xA;&#xA;unet1 = Unet(&#xA;    dim = 32,&#xA;    cond_dim = 512,&#xA;    dim_mults = (1, 2, 4, 8),&#xA;    num_resnet_blocks = 3,&#xA;    layer_attns = (False, True, True, True),&#xA;)&#xA;&#xA;unet2 = Unet(&#xA;    dim = 32,&#xA;    cond_dim = 512,&#xA;    dim_mults = (1, 2, 4, 8),&#xA;    num_resnet_blocks = (2, 4, 8, 8),&#xA;    layer_attns = (False, False, False, True),&#xA;    layer_cross_attns = (False, False, False, True)&#xA;)&#xA;&#xA;# imagen, which contains the unets above (base unet and super resoluting ones)&#xA;&#xA;imagen = Imagen(&#xA;    unets = (unet1, unet2),&#xA;    text_encoder_name = &#39;t5-large&#39;,&#xA;    image_sizes = (64, 256),&#xA;    beta_schedules = (&#39;cosine&#39;, &#39;linear&#39;),&#xA;    timesteps = 1000,&#xA;    cond_drop_prob = 0.5&#xA;).cuda()&#xA;&#xA;# wrap imagen with the trainer class&#xA;&#xA;trainer = ImagenTrainer(imagen)&#xA;&#xA;# mock images (get a lot of this) and text encodings from large T5&#xA;&#xA;text_embeds = torch.randn(64, 256, 1024).cuda()&#xA;text_masks = torch.ones(64, 256).bool().cuda()&#xA;images = torch.randn(64, 3, 256, 256).cuda()&#xA;&#xA;# feed images into imagen, training each unet in the cascade&#xA;&#xA;for i in (1, 2):&#xA;    loss = trainer(&#xA;        images,&#xA;        text_embeds = text_embeds,&#xA;        text_masks = text_masks,&#xA;        unet_number = i,&#xA;        max_batch_size = 4        # auto divide the batch of 64 up into batch size of 4 and accumulate gradients, so it all fits in memory&#xA;    )&#xA;&#xA;    trainer.update(unet_number = i)&#xA;&#xA;# do the above for many many many many steps&#xA;# now you can sample an image based on the text embeddings from the cascading ddpm&#xA;&#xA;images = trainer.sample(texts = [&#xA;    &#39;a puppy looking anxiously at a giant donut on the table&#39;,&#xA;    &#39;the milky way galaxy in the style of monet&#39;&#xA;], cond_scale = 2.)&#xA;&#xA;images.shape # (2, 3, 256, 256)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Shoutouts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://stability.ai/&#34;&gt;StabilityAI&lt;/a&gt; for the generous sponsorship, as well as my other sponsors out there&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://huggingface.co/&#34;&gt;🤗 Huggingface&lt;/a&gt; for their amazing transformers library. The text encoder portion is pretty much taken care of because of them&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/jorgemcgomes&#34;&gt;Jorge Gomes&lt;/a&gt; for helping out with the T5 loading code and advice on the correct T5 version&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/crowsonkb&#34;&gt;Katherine Crowson&lt;/a&gt;, for her &lt;a href=&#34;https://github.com/crowsonkb/v-diffusion-jax/raw/master/diffusion/utils.py&#34;&gt;beautiful code&lt;/a&gt;, which helped me understand the continuous time version of gaussian diffusion&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You? It isn&#39;t done yet, chip in if you are a researcher or skilled ML engineer&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Todo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; use huggingface transformers for T5-small text embeddings&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; add dynamic thresholding&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; add dynamic thresholding DALLE2 and video-diffusion repository as well&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; allow for one to set T5-large (and perhaps small factory method to take in any huggingface transformer)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; add the lowres noise level with the pseudocode in appendix, and figure out what is this sweep they do at inference time&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; port over some training code from DALLE2&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; need to be able to use a different noise schedule per unet (cosine was used for base, but linear for SR)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; just make one master-configurable unet&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; complete resnet block (biggan inspired? but with groupnorm) - complete self attention&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; complete conditioning embedding block (and make it completely configurable, whether it be attention, film etc)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; consider using perceiver-resampler from &lt;a href=&#34;https://github.com/lucidrains/flamingo-pytorch&#34;&gt;https://github.com/lucidrains/flamingo-pytorch&lt;/a&gt; in place of attention pooling&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; add attention pooling option, in addition to cross attention and film&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; add optional cosine decay schedule with warmup, for each unet, to trainer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; figure out if learned variance was used at all, and remove it if it was inconsequential&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; switch to continuous timesteps instead of discretized, as it seems that is what they used for all stages - first figure out the linear noise schedule case from the variational ddpm paper &lt;a href=&#34;https://openreview.net/forum?id=2LdBqxc1Yv&#34;&gt;https://openreview.net/forum?id=2LdBqxc1Yv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; exercise efficient attention expertise + explore skip layer excitation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; try out grid attention&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citations&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@inproceedings{Saharia2022PhotorealisticTD,&#xA;    title   = {Photorealistic Text-to-Image Diffusion Models with Deep Language Understanding},&#xA;    author  = {Chitwan Saharia and William Chan and Saurabh Saxena and Lala Li and Jay Whang and Emily L. Denton and Seyed Kamyar Seyed Ghasemipour and Burcu Karagol Ayan and Seyedeh Sara Mahdavi and Raphael Gontijo Lopes and Tim Salimans and Jonathan Ho and David Fleet and Mohammad Norouzi},&#xA;    year    = {2022}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@inproceedings{Tu2022MaxViTMV,&#xA;    title   = {MaxViT: Multi-Axis Vision Transformer},&#xA;    author  = {Zhengzhong Tu and Hossein Talebi and Han Zhang and Feng Yang and Peyman Milanfar and Alan Conrad Bovik and Yinxiao Li},&#xA;    year    = {2022},&#xA;    url     = {https://arxiv.org/abs/2204.01697}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article{Alayrac2022Flamingo,&#xA;    title   = {Flamingo: a Visual Language Model for Few-Shot Learning},&#xA;    author  = {Jean-Baptiste Alayrac et al},&#xA;    year    = {2022}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>gto76/python-cheatsheet</title>
    <updated>2022-06-03T01:59:36Z</updated>
    <id>tag:github.com,2022-06-03:/gto76/python-cheatsheet</id>
    <link href="https://github.com/gto76/python-cheatsheet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Comprehensive Python Cheatsheet&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Comprehensive Python Cheatsheet&lt;/h1&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/README.md&#34;&gt;Download text file&lt;/a&gt;, &lt;a href=&#34;https://transactions.sendowl.com/products/78175486/4422834F/view&#34;&gt;Buy PDF&lt;/a&gt;, &lt;a href=&#34;https://github.com/gto76/python-cheatsheet&#34;&gt;Fork me on GitHub&lt;/a&gt; or &lt;a href=&#34;https://github.com/gto76/python-cheatsheet/wiki/Frequently-Asked-Questions&#34;&gt;Check out FAQ&lt;/a&gt;. &lt;/sup&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/web/image_888.jpeg&#34; alt=&#34;Monty Python&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;1. Collections:&lt;/strong&gt; &lt;strong&gt;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#list&#34;&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#dictionary&#34;&gt;&lt;code&gt;Dictionary&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#set&#34;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#tuple&#34;&gt;&lt;code&gt;Tuple&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#range&#34;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#enumerate&#34;&gt;&lt;code&gt;Enumerate&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#iterator&#34;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#generator&#34;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;2. Types:&lt;/strong&gt; &lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#type&#34;&gt;&lt;code&gt;Type&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#string&#34;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#regex&#34;&gt;&lt;code&gt;Regular_Exp&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#format&#34;&gt;&lt;code&gt;Format&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#numbers-1&#34;&gt;&lt;code&gt;Numbers&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#combinatorics&#34;&gt;&lt;code&gt;Combinatorics&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#datetime&#34;&gt;&lt;code&gt;Datetime&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;3. Syntax:&lt;/strong&gt; &lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#arguments&#34;&gt;&lt;code&gt;Args&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#inline&#34;&gt;&lt;code&gt;Inline&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#imports&#34;&gt;&lt;code&gt;Import&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#decorator&#34;&gt;&lt;code&gt;Decorator&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#class&#34;&gt;&lt;code&gt;Class&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#duck-types&#34;&gt;&lt;code&gt;Duck_Types&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#enum&#34;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#exceptions&#34;&gt;&lt;code&gt;Exception&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;4. System:&lt;/strong&gt; &lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#exit&#34;&gt;&lt;code&gt;Exit&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#print&#34;&gt;&lt;code&gt;Print&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#input&#34;&gt;&lt;code&gt;Input&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#command-line-arguments&#34;&gt;&lt;code&gt;Command_Line_Arguments&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#open&#34;&gt;&lt;code&gt;Open&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#paths&#34;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#os-commands&#34;&gt;&lt;code&gt;OS_Commands&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;5. Data:&lt;/strong&gt; &lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#json&#34;&gt;&lt;code&gt;JSON&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#pickle&#34;&gt;&lt;code&gt;Pickle&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#csv&#34;&gt;&lt;code&gt;CSV&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#sqlite&#34;&gt;&lt;code&gt;SQLite&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#bytes&#34;&gt;&lt;code&gt;Bytes&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#struct&#34;&gt;&lt;code&gt;Struct&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#array&#34;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#memory-view&#34;&gt;&lt;code&gt;Memory_View&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#deque&#34;&gt;&lt;code&gt;Deque&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;6. Advanced:&lt;/strong&gt; &lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#threading&#34;&gt;&lt;code&gt;Threading&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#operator&#34;&gt;&lt;code&gt;Operator&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#introspection&#34;&gt;&lt;code&gt;Introspection&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#metaprogramming&#34;&gt;&lt;code&gt;Metaprograming&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#eval&#34;&gt;&lt;code&gt;Eval&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#coroutines&#34;&gt;&lt;code&gt;Coroutines&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;7. Libraries:&lt;/strong&gt; &lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#progress-bar&#34;&gt;&lt;code&gt;Progress_Bar&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#plot&#34;&gt;&lt;code&gt;Plot&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#table&#34;&gt;&lt;code&gt;Table&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#curses&#34;&gt;&lt;code&gt;Curses&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#logging&#34;&gt;&lt;code&gt;Logging&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#scraping&#34;&gt;&lt;code&gt;Scraping&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#web&#34;&gt;&lt;code&gt;Web&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#profiling&#34;&gt;&lt;code&gt;Profile&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#numpy&#34;&gt;&lt;code&gt;NumPy&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#image&#34;&gt;&lt;code&gt;Image&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#audio&#34;&gt;&lt;code&gt;Audio&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#pygame&#34;&gt;&lt;code&gt;Games&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#pandas&#34;&gt;&lt;code&gt;Data&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Main&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if __name__ == &#39;__main__&#39;:     # Runs main() if file wasn&#39;t imported.&#xA;    main()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;List&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;list&amp;gt; = &amp;lt;list&amp;gt;[&amp;lt;slice&amp;gt;]       # Or: &amp;lt;list&amp;gt;[from_inclusive : to_exclusive : ±step]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;list&amp;gt;.append(&amp;lt;el&amp;gt;)            # Or: &amp;lt;list&amp;gt; += [&amp;lt;el&amp;gt;]&#xA;&amp;lt;list&amp;gt;.extend(&amp;lt;collection&amp;gt;)    # Or: &amp;lt;list&amp;gt; += &amp;lt;collection&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;list&amp;gt;.sort()                  # Sorts in ascending order.&#xA;&amp;lt;list&amp;gt;.reverse()               # Reverses the list in-place.&#xA;&amp;lt;list&amp;gt; = sorted(&amp;lt;collection&amp;gt;)  # Returns a new sorted list.&#xA;&amp;lt;iter&amp;gt; = reversed(&amp;lt;list&amp;gt;)      # Returns reversed iterator.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sum_of_elements  = sum(&amp;lt;collection&amp;gt;)&#xA;elementwise_sum  = [sum(pair) for pair in zip(list_a, list_b)]&#xA;sorted_by_second = sorted(&amp;lt;collection&amp;gt;, key=lambda el: el[1])&#xA;sorted_by_both   = sorted(&amp;lt;collection&amp;gt;, key=lambda el: (el[1], el[0]))&#xA;flatter_list     = list(itertools.chain.from_iterable(&amp;lt;list&amp;gt;))&#xA;product_of_elems = functools.reduce(lambda out, el: out * el, &amp;lt;collection&amp;gt;)&#xA;list_of_chars    = list(&amp;lt;str&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;For details about sorted(), min() and max() see &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#sortable&#34;&gt;sortable&lt;/a&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Module &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#operator&#34;&gt;operator&lt;/a&gt; provides functions itemgetter() and mul() that offer the same functionality as &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#lambda&#34;&gt;lambda&lt;/a&gt; expressions above.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;list&amp;gt;.insert(&amp;lt;int&amp;gt;, &amp;lt;el&amp;gt;)     # Inserts item at index and moves the rest to the right.&#xA;&amp;lt;el&amp;gt;  = &amp;lt;list&amp;gt;.pop([&amp;lt;int&amp;gt;])    # Removes and returns item at index or from the end.&#xA;&amp;lt;int&amp;gt; = &amp;lt;list&amp;gt;.count(&amp;lt;el&amp;gt;)     # Returns number of occurrences. Also works on strings.&#xA;&amp;lt;int&amp;gt; = &amp;lt;list&amp;gt;.index(&amp;lt;el&amp;gt;)     # Returns index of the first occurrence or raises ValueError.&#xA;&amp;lt;list&amp;gt;.remove(&amp;lt;el&amp;gt;)            # Removes first occurrence of the item or raises ValueError.&#xA;&amp;lt;list&amp;gt;.clear()                 # Removes all items. Also works on dictionary and set.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dictionary&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;view&amp;gt; = &amp;lt;dict&amp;gt;.keys()                          # Coll. of keys that reflects changes.&#xA;&amp;lt;view&amp;gt; = &amp;lt;dict&amp;gt;.values()                        # Coll. of values that reflects changes.&#xA;&amp;lt;view&amp;gt; = &amp;lt;dict&amp;gt;.items()                         # Coll. of key-value tuples that reflects chgs.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;value  = &amp;lt;dict&amp;gt;.get(key, default=None)          # Returns default if key is missing.&#xA;value  = &amp;lt;dict&amp;gt;.setdefault(key, default=None)   # Returns and writes default if key is missing.&#xA;&amp;lt;dict&amp;gt; = collections.defaultdict(&amp;lt;type&amp;gt;)        # Creates a dict with default value of type.&#xA;&amp;lt;dict&amp;gt; = collections.defaultdict(lambda: 1)     # Creates a dict with default value 1.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;dict&amp;gt; = dict(&amp;lt;collection&amp;gt;)                     # Creates a dict from coll. of key-value pairs.&#xA;&amp;lt;dict&amp;gt; = dict(zip(keys, values))                # Creates a dict from two collections.&#xA;&amp;lt;dict&amp;gt; = dict.fromkeys(keys [, value])          # Creates a dict from collection of keys.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;dict&amp;gt;.update(&amp;lt;dict&amp;gt;)                           # Adds items. Replaces ones with matching keys.&#xA;value = &amp;lt;dict&amp;gt;.pop(key)                         # Removes item or raises KeyError.&#xA;{k for k, v in &amp;lt;dict&amp;gt;.items() if v == value}    # Returns set of keys that point to the value.&#xA;{k: v for k, v in &amp;lt;dict&amp;gt;.items() if k in keys}  # Returns a dictionary, filtered by keys.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Counter&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from collections import Counter&#xA;&amp;gt;&amp;gt;&amp;gt; colors = [&#39;blue&#39;, &#39;blue&#39;, &#39;blue&#39;, &#39;red&#39;, &#39;red&#39;]&#xA;&amp;gt;&amp;gt;&amp;gt; counter = Counter(colors)&#xA;&amp;gt;&amp;gt;&amp;gt; counter[&#39;yellow&#39;] += 1&#xA;Counter({&#39;blue&#39;: 3, &#39;red&#39;: 2, &#39;yellow&#39;: 1})&#xA;&amp;gt;&amp;gt;&amp;gt; counter.most_common()[0]&#xA;(&#39;blue&#39;, 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Set&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;set&amp;gt; = set()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;set&amp;gt;.add(&amp;lt;el&amp;gt;)                                 # Or: &amp;lt;set&amp;gt; |= {&amp;lt;el&amp;gt;}&#xA;&amp;lt;set&amp;gt;.update(&amp;lt;collection&amp;gt; [, ...])              # Or: &amp;lt;set&amp;gt; |= &amp;lt;set&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;set&amp;gt;  = &amp;lt;set&amp;gt;.union(&amp;lt;coll.&amp;gt;)                   # Or: &amp;lt;set&amp;gt; | &amp;lt;set&amp;gt;&#xA;&amp;lt;set&amp;gt;  = &amp;lt;set&amp;gt;.intersection(&amp;lt;coll.&amp;gt;)            # Or: &amp;lt;set&amp;gt; &amp;amp; &amp;lt;set&amp;gt;&#xA;&amp;lt;set&amp;gt;  = &amp;lt;set&amp;gt;.difference(&amp;lt;coll.&amp;gt;)              # Or: &amp;lt;set&amp;gt; - &amp;lt;set&amp;gt;&#xA;&amp;lt;set&amp;gt;  = &amp;lt;set&amp;gt;.symmetric_difference(&amp;lt;coll.&amp;gt;)    # Or: &amp;lt;set&amp;gt; ^ &amp;lt;set&amp;gt;&#xA;&amp;lt;bool&amp;gt; = &amp;lt;set&amp;gt;.issubset(&amp;lt;coll.&amp;gt;)                # Or: &amp;lt;set&amp;gt; &amp;lt;= &amp;lt;set&amp;gt;&#xA;&amp;lt;bool&amp;gt; = &amp;lt;set&amp;gt;.issuperset(&amp;lt;coll.&amp;gt;)              # Or: &amp;lt;set&amp;gt; &amp;gt;= &amp;lt;set&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;el&amp;gt; = &amp;lt;set&amp;gt;.pop()                              # Raises KeyError if empty.&#xA;&amp;lt;set&amp;gt;.remove(&amp;lt;el&amp;gt;)                              # Raises KeyError if missing.&#xA;&amp;lt;set&amp;gt;.discard(&amp;lt;el&amp;gt;)                             # Doesn&#39;t raise an error.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Frozen Set&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Is immutable and hashable.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;That means it can be used as a key in a dictionary or as an element in a set.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;frozenset&amp;gt; = frozenset(&amp;lt;collection&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tuple&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tuple is an immutable and hashable list.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;tuple&amp;gt; = ()&#xA;&amp;lt;tuple&amp;gt; = (&amp;lt;el&amp;gt;,)                           # Or: &amp;lt;el&amp;gt;,&#xA;&amp;lt;tuple&amp;gt; = (&amp;lt;el_1&amp;gt;, &amp;lt;el_2&amp;gt; [, ...])          # Or: &amp;lt;el_1&amp;gt;, &amp;lt;el_2&amp;gt; [, ...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Named Tuple&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tuple&#39;s subclass with named elements.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from collections import namedtuple&#xA;&amp;gt;&amp;gt;&amp;gt; Point = namedtuple(&#39;Point&#39;, &#39;x y&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; p = Point(1, y=2)&#xA;Point(x=1, y=2)&#xA;&amp;gt;&amp;gt;&amp;gt; p[0]&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; p.x&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; getattr(p, &#39;y&#39;)&#xA;2&#xA;&amp;gt;&amp;gt;&amp;gt; p._fields  # Or: Point._fields&#xA;(&#39;x&#39;, &#39;y&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Range&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;range&amp;gt; = range(to_exclusive)&#xA;&amp;lt;range&amp;gt; = range(from_inclusive, to_exclusive)&#xA;&amp;lt;range&amp;gt; = range(from_inclusive, to_exclusive, ±step_size)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from_inclusive = &amp;lt;range&amp;gt;.start&#xA;to_exclusive   = &amp;lt;range&amp;gt;.stop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Enumerate&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i, el in enumerate(&amp;lt;collection&amp;gt; [, i_start]):&#xA;    ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Iterator&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;iter&amp;gt; = iter(&amp;lt;collection&amp;gt;)                 # `iter(&amp;lt;iter&amp;gt;)` returns unmodified iterator.&#xA;&amp;lt;iter&amp;gt; = iter(&amp;lt;function&amp;gt;, to_exclusive)     # A sequence of return values until &#39;to_exclusive&#39;.&#xA;&amp;lt;el&amp;gt;   = next(&amp;lt;iter&amp;gt; [, default])           # Raises StopIteration or returns &#39;default&#39; on end.&#xA;&amp;lt;list&amp;gt; = list(&amp;lt;iter&amp;gt;)                       # Returns a list of iterator&#39;s remaining elements.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Itertools&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from itertools import count, repeat, cycle, chain, islice&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;iter&amp;gt; = count(start=0, step=1)             # Returns updated value endlessly. Accepts floats.&#xA;&amp;lt;iter&amp;gt; = repeat(&amp;lt;el&amp;gt; [, times])             # Returns element endlessly or &#39;times&#39; times.&#xA;&amp;lt;iter&amp;gt; = cycle(&amp;lt;collection&amp;gt;)                # Repeats the sequence endlessly.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;iter&amp;gt; = chain(&amp;lt;coll_1&amp;gt;, &amp;lt;coll_2&amp;gt; [, ...])  # Empties collections in order (figuratively).&#xA;&amp;lt;iter&amp;gt; = chain.from_iterable(&amp;lt;collection&amp;gt;)  # Empties collections inside a collection in order.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;iter&amp;gt; = islice(&amp;lt;coll&amp;gt;, to_exclusive)       # Only returns first &#39;to_exclusive&#39; elements.&#xA;&amp;lt;iter&amp;gt; = islice(&amp;lt;coll&amp;gt;, from_inclusive, …)  # `to_exclusive, step_size`.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Generator&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Any function that contains a yield statement returns a generator.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Generators and iterators are interchangeable.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def count(start, step):&#xA;    while True:&#xA;        yield start&#xA;        start += step&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; counter = count(10, 2)&#xA;&amp;gt;&amp;gt;&amp;gt; next(counter), next(counter), next(counter)&#xA;(10, 12, 14)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Type&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Everything is an object.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Every object has a type.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Type and class are synonymous.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;type&amp;gt; = type(&amp;lt;el&amp;gt;)                          # Or: &amp;lt;el&amp;gt;.__class__&#xA;&amp;lt;bool&amp;gt; = isinstance(&amp;lt;el&amp;gt;, &amp;lt;type&amp;gt;)            # Or: issubclass(type(&amp;lt;el&amp;gt;), &amp;lt;type&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; type(&#39;a&#39;), &#39;a&#39;.__class__, str&#xA;(&amp;lt;class &#39;str&#39;&amp;gt;, &amp;lt;class &#39;str&#39;&amp;gt;, &amp;lt;class &#39;str&#39;&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Some types do not have built-in names, so they must be imported:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from types import FunctionType, MethodType, LambdaType, GeneratorType, ModuleType&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Abstract Base Classes&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Each abstract base class specifies a set of virtual subclasses. These classes are then recognized by isinstance() and issubclass() as subclasses of the ABC, although they are really not. ABC can also manually decide whether or not a specific class is its virtual subclass, usually based on which methods the class has implemented. For instance, Iterable ABC looks for method iter(), while Collection ABC looks for iter(), contains() and len().&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from collections.abc import Iterable, Collection, Sequence&#xA;&amp;gt;&amp;gt;&amp;gt; isinstance([1, 2, 3], Iterable)&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+------------------+------------+------------+------------+&#xA;|                  |  Iterable  | Collection |  Sequence  |&#xA;+------------------+------------+------------+------------+&#xA;| list, range, str |    yes     |    yes     |    yes     |&#xA;| dict, set        |    yes     |    yes     |            |&#xA;| iter             |    yes     |            |            |&#xA;+------------------+------------+------------+------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from numbers import Number, Complex, Real, Rational, Integral&#xA;&amp;gt;&amp;gt;&amp;gt; isinstance(123, Number)&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+--------------------+----------+----------+----------+----------+----------+&#xA;|                    |  Number  |  Complex |   Real   | Rational | Integral |&#xA;+--------------------+----------+----------+----------+----------+----------+&#xA;| int                |   yes    |   yes    |   yes    |   yes    |   yes    |&#xA;| fractions.Fraction |   yes    |   yes    |   yes    |   yes    |          |&#xA;| float              |   yes    |   yes    |   yes    |          |          |&#xA;| complex            |   yes    |   yes    |          |          |          |&#xA;| decimal.Decimal    |   yes    |          |          |          |          |&#xA;+--------------------+----------+----------+----------+----------+----------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;String&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;str&amp;gt;  = &amp;lt;str&amp;gt;.strip()                       # Strips all whitespace characters from both ends.&#xA;&amp;lt;str&amp;gt;  = &amp;lt;str&amp;gt;.strip(&#39;&amp;lt;chars&amp;gt;&#39;)              # Strips all passed characters from both ends.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;list&amp;gt; = &amp;lt;str&amp;gt;.split()                       # Splits on one or more whitespace characters.&#xA;&amp;lt;list&amp;gt; = &amp;lt;str&amp;gt;.split(sep=None, maxsplit=-1)  # Splits on &#39;sep&#39; str at most &#39;maxsplit&#39; times.&#xA;&amp;lt;list&amp;gt; = &amp;lt;str&amp;gt;.splitlines(keepends=False)    # On [\n\r\f\v\x1c-\x1e\x85\u2028\u2029] and \r\n.&#xA;&amp;lt;str&amp;gt;  = &amp;lt;str&amp;gt;.join(&amp;lt;coll_of_strings&amp;gt;)       # Joins elements using string as a separator.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;bool&amp;gt; = &amp;lt;sub_str&amp;gt; in &amp;lt;str&amp;gt;                  # Checks if string contains a substring.&#xA;&amp;lt;bool&amp;gt; = &amp;lt;str&amp;gt;.startswith(&amp;lt;sub_str&amp;gt;)         # Pass tuple of strings for multiple options.&#xA;&amp;lt;bool&amp;gt; = &amp;lt;str&amp;gt;.endswith(&amp;lt;sub_str&amp;gt;)           # Pass tuple of strings for multiple options.&#xA;&amp;lt;int&amp;gt;  = &amp;lt;str&amp;gt;.find(&amp;lt;sub_str&amp;gt;)               # Returns start index of the first match or -1.&#xA;&amp;lt;int&amp;gt;  = &amp;lt;str&amp;gt;.index(&amp;lt;sub_str&amp;gt;)              # Same, but raises ValueError if missing.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;str&amp;gt;  = &amp;lt;str&amp;gt;.replace(old, new [, count])   # Replaces &#39;old&#39; with &#39;new&#39; at most &#39;count&#39; times.&#xA;&amp;lt;str&amp;gt;  = &amp;lt;str&amp;gt;.translate(&amp;lt;table&amp;gt;)            # Use `str.maketrans(&amp;lt;dict&amp;gt;)` to generate table.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;str&amp;gt;  = chr(&amp;lt;int&amp;gt;)                          # Converts int to Unicode character.&#xA;&amp;lt;int&amp;gt;  = ord(&amp;lt;str&amp;gt;)                          # Converts Unicode character to int.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Also: &lt;code&gt;&#39;lstrip()&#39;&lt;/code&gt;, &lt;code&gt;&#39;rstrip()&#39;&lt;/code&gt; and &lt;code&gt;&#39;rsplit()&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Also: &lt;code&gt;&#39;lower()&#39;&lt;/code&gt;, &lt;code&gt;&#39;upper()&#39;&lt;/code&gt;, &lt;code&gt;&#39;capitalize()&#39;&lt;/code&gt; and &lt;code&gt;&#39;title()&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Property Methods&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+---------------+----------+----------+----------+----------+----------+&#xA;|               | [ !#$%…] | [a-zA-Z] |  [¼½¾]   |  [²³¹]   |  [0-9]   |&#xA;+---------------+----------+----------+----------+----------+----------+&#xA;| isprintable() |   yes    |   yes    |   yes    |   yes    |   yes    |&#xA;| isalnum()     |          |   yes    |   yes    |   yes    |   yes    |&#xA;| isnumeric()   |          |          |   yes    |   yes    |   yes    |&#xA;| isdigit()     |          |          |          |   yes    |   yes    |&#xA;| isdecimal()   |          |          |          |          |   yes    |&#xA;+---------------+----------+----------+----------+----------+----------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Also: &lt;code&gt;&#39;isspace()&#39;&lt;/code&gt; checks for &lt;code&gt;&#39;[ \t\n\r\f\v\x1c-\x1f\x85…]&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Regex&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re&#xA;&amp;lt;str&amp;gt;   = re.sub(&amp;lt;regex&amp;gt;, new, text, count=0)  # Substitutes all occurrences with &#39;new&#39;.&#xA;&amp;lt;list&amp;gt;  = re.findall(&amp;lt;regex&amp;gt;, text)            # Returns all occurrences as strings.&#xA;&amp;lt;list&amp;gt;  = re.split(&amp;lt;regex&amp;gt;, text, maxsplit=0)  # Use brackets in regex to include the matches.&#xA;&amp;lt;Match&amp;gt; = re.search(&amp;lt;regex&amp;gt;, text)             # Searches for first occurrence of the pattern.&#xA;&amp;lt;Match&amp;gt; = re.match(&amp;lt;regex&amp;gt;, text)              # Searches only at the beginning of the text.&#xA;&amp;lt;iter&amp;gt;  = re.finditer(&amp;lt;regex&amp;gt;, text)           # Returns all occurrences as match objects.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Argument &#39;new&#39; can be a function that accepts a match object and returns a string.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Search() and match() return None if they can&#39;t find a match.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Argument &lt;code&gt;&#39;flags=re.IGNORECASE&#39;&lt;/code&gt; can be used with all functions.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Argument &lt;code&gt;&#39;flags=re.MULTILINE&#39;&lt;/code&gt; makes &lt;code&gt;&#39;^&#39;&lt;/code&gt; and &lt;code&gt;&#39;$&#39;&lt;/code&gt; match the start/end of each line.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Argument &lt;code&gt;&#39;flags=re.DOTALL&#39;&lt;/code&gt; makes dot also accept the &lt;code&gt;&#39;\n&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;r&#39;\1&#39;&lt;/code&gt; or &lt;code&gt;&#39;\\1&#39;&lt;/code&gt; for backreference (&lt;code&gt;&#39;\1&#39;&lt;/code&gt; returns a character with octal code 1).&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Add &lt;code&gt;&#39;?&#39;&lt;/code&gt; after &lt;code&gt;&#39;*&#39;&lt;/code&gt; and &lt;code&gt;&#39;+&#39;&lt;/code&gt; to make them non-greedy.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Match Object&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;str&amp;gt;   = &amp;lt;Match&amp;gt;.group()                      # Returns the whole match. Also group(0).&#xA;&amp;lt;str&amp;gt;   = &amp;lt;Match&amp;gt;.group(1)                     # Returns part in the first bracket.&#xA;&amp;lt;tuple&amp;gt; = &amp;lt;Match&amp;gt;.groups()                     # Returns all bracketed parts.&#xA;&amp;lt;int&amp;gt;   = &amp;lt;Match&amp;gt;.start()                      # Returns start index of the match.&#xA;&amp;lt;int&amp;gt;   = &amp;lt;Match&amp;gt;.end()                        # Returns exclusive end index of the match.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Special Sequences&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;\d&#39; == &#39;[0-9]&#39;                                # Matches decimal characters.&#xA;&#39;\w&#39; == &#39;[a-zA-Z0-9_]&#39;                         # Matches alphanumerics and underscore.&#xA;&#39;\s&#39; == &#39;[ \t\n\r\f\v]&#39;                        # Matches whitespaces.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;By default, decimal characters, alphanumerics and whitespaces from all alphabets are matched unless &lt;code&gt;&#39;flags=re.ASCII&#39;&lt;/code&gt; argument is used.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;As shown above, it restricts special sequence matches to the first 128 characters and prevents &lt;code&gt;&#39;\s&#39;&lt;/code&gt; from accepting &lt;code&gt;&#39;[\x1c-\x1f]&#39;&lt;/code&gt; (the so-called separator characters).&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use a capital letter for negation (all non-ASCII characters will be matched when used in combination with ASCII flag).&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Format&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;str&amp;gt; = f&#39;{&amp;lt;el_1&amp;gt;}, {&amp;lt;el_2&amp;gt;}&#39;&#xA;&amp;lt;str&amp;gt; = &#39;{}, {}&#39;.format(&amp;lt;el_1&amp;gt;, &amp;lt;el_2&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Attributes&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from collections import namedtuple&#xA;&amp;gt;&amp;gt;&amp;gt; Person = namedtuple(&#39;Person&#39;, &#39;name height&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; person = Person(&#39;Jean-Luc&#39;, 187)&#xA;&amp;gt;&amp;gt;&amp;gt; f&#39;{person.height}&#39;&#xA;&#39;187&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; &#39;{p.height}&#39;.format(p=person)&#xA;&#39;187&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;General Options&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;{&amp;lt;el&amp;gt;:&amp;lt;10}                                     # &#39;&amp;lt;el&amp;gt;      &#39;&#xA;{&amp;lt;el&amp;gt;:^10}                                     # &#39;   &amp;lt;el&amp;gt;   &#39;&#xA;{&amp;lt;el&amp;gt;:&amp;gt;10}                                     # &#39;      &amp;lt;el&amp;gt;&#39;&#xA;{&amp;lt;el&amp;gt;:.&amp;lt;10}                                    # &#39;&amp;lt;el&amp;gt;......&#39;&#xA;{&amp;lt;el&amp;gt;:0}                                       # &#39;&amp;lt;el&amp;gt;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Options can be generated dynamically: &lt;code&gt;f&#39;{&amp;lt;el&amp;gt;:{&amp;lt;str/int&amp;gt;}[…]}&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Adding &lt;code&gt;&#39;!r&#39;&lt;/code&gt; before the colon converts object to string by calling its &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#class&#34;&gt;repr()&lt;/a&gt; method.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Strings&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;{&#39;abcde&#39;:10}                                   # &#39;abcde     &#39;&#xA;{&#39;abcde&#39;:10.3}                                 # &#39;abc       &#39;&#xA;{&#39;abcde&#39;:.3}                                   # &#39;abc&#39;&#xA;{&#39;abcde&#39;!r:10}                                 # &#34;&#39;abcde&#39;   &#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Numbers&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;{123456:10}                                    # &#39;    123456&#39;&#xA;{123456:10,}                                   # &#39;   123,456&#39;&#xA;{123456:10_}                                   # &#39;   123_456&#39;&#xA;{123456:+10}                                   # &#39;   +123456&#39;&#xA;{123456:=+10}                                  # &#39;+   123456&#39;&#xA;{123456: }                                     # &#39; 123456&#39;&#xA;{-123456: }                                    # &#39;-123456&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Floats&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;{1.23456:10.3}                                 # &#39;      1.23&#39;&#xA;{1.23456:10.3f}                                # &#39;     1.235&#39;&#xA;{1.23456:10.3e}                                # &#39; 1.235e+00&#39;&#xA;{1.23456:10.3%}                                # &#39;  123.456%&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Comparison of presentation types:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+--------------+----------------+----------------+----------------+----------------+&#xA;|              |    {&amp;lt;float&amp;gt;}   |   {&amp;lt;float&amp;gt;:f}  |   {&amp;lt;float&amp;gt;:e}  |   {&amp;lt;float&amp;gt;:%}  |&#xA;+--------------+----------------+----------------+----------------+----------------+&#xA;|  0.000056789 |   &#39;5.6789e-05&#39; |    &#39;0.000057&#39;  | &#39;5.678900e-05&#39; |    &#39;0.005679%&#39; |&#xA;|  0.00056789  |   &#39;0.00056789&#39; |    &#39;0.000568&#39;  | &#39;5.678900e-04&#39; |    &#39;0.056789%&#39; |&#xA;|  0.0056789   |   &#39;0.0056789&#39;  |    &#39;0.005679&#39;  | &#39;5.678900e-03&#39; |    &#39;0.567890%&#39; |&#xA;|  0.056789    |   &#39;0.056789&#39;   |    &#39;0.056789&#39;  | &#39;5.678900e-02&#39; |    &#39;5.678900%&#39; |&#xA;|  0.56789     |   &#39;0.56789&#39;    |    &#39;0.567890&#39;  | &#39;5.678900e-01&#39; |   &#39;56.789000%&#39; |&#xA;|  5.6789      |   &#39;5.6789&#39;     |    &#39;5.678900&#39;  | &#39;5.678900e+00&#39; |  &#39;567.890000%&#39; |&#xA;| 56.789       |  &#39;56.789&#39;      |   &#39;56.789000&#39;  | &#39;5.678900e+01&#39; | &#39;5678.900000%&#39; |&#xA;+--------------+----------------+----------------+----------------+----------------+&#xA;&#xA;+--------------+----------------+----------------+----------------+----------------+&#xA;|              |  {&amp;lt;float&amp;gt;:.2}  |  {&amp;lt;float&amp;gt;:.2f} |  {&amp;lt;float&amp;gt;:.2e} |  {&amp;lt;float&amp;gt;:.2%} |&#xA;+--------------+----------------+----------------+----------------+----------------+&#xA;|  0.000056789 |    &#39;5.7e-05&#39;   |      &#39;0.00&#39;    |   &#39;5.68e-05&#39;   |      &#39;0.01%&#39;   |&#xA;|  0.00056789  |    &#39;0.00057&#39;   |      &#39;0.00&#39;    |   &#39;5.68e-04&#39;   |      &#39;0.06%&#39;   |&#xA;|  0.0056789   |    &#39;0.0057&#39;    |      &#39;0.01&#39;    |   &#39;5.68e-03&#39;   |      &#39;0.57%&#39;   |&#xA;|  0.056789    |    &#39;0.057&#39;     |      &#39;0.06&#39;    |   &#39;5.68e-02&#39;   |      &#39;5.68%&#39;   |&#xA;|  0.56789     |    &#39;0.57&#39;      |      &#39;0.57&#39;    |   &#39;5.68e-01&#39;   |     &#39;56.79%&#39;   |&#xA;|  5.6789      |    &#39;5.7&#39;       |      &#39;5.68&#39;    |   &#39;5.68e+00&#39;   |    &#39;567.89%&#39;   |&#xA;| 56.789       |    &#39;5.7e+01&#39;   |     &#39;56.79&#39;    |   &#39;5.68e+01&#39;   |   &#39;5678.90%&#39;   |&#xA;+--------------+----------------+----------------+----------------+----------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;When both rounding up and rounding down are possible, the one that returns result with even last digit is chosen. That makes &lt;code&gt;&#39;{6.5:.0f}&#39;&lt;/code&gt; a &lt;code&gt;&#39;6&#39;&lt;/code&gt; and &lt;code&gt;&#39;{7.5:.0f}&#39;&lt;/code&gt; an &lt;code&gt;&#39;8&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;This rule only effects numbers that can be represented exactly by a float (&lt;code&gt;.5&lt;/code&gt;, &lt;code&gt;.25&lt;/code&gt;, …).&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Ints&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;{90:c}                                   # &#39;Z&#39;&#xA;{90:b}                                   # &#39;1011010&#39;&#xA;{90:X}                                   # &#39;5A&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Numbers&lt;/h2&gt; &#xA;&lt;h3&gt;Types&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;int&amp;gt;      = int(&amp;lt;float/str/bool&amp;gt;)       # Or: math.floor(&amp;lt;float&amp;gt;)&#xA;&amp;lt;float&amp;gt;    = float(&amp;lt;int/str/bool&amp;gt;)       # Or: &amp;lt;real&amp;gt;e±&amp;lt;int&amp;gt;&#xA;&amp;lt;complex&amp;gt;  = complex(real=0, imag=0)     # Or: &amp;lt;real&amp;gt; ± &amp;lt;real&amp;gt;j&#xA;&amp;lt;Fraction&amp;gt; = fractions.Fraction(0, 1)    # Or: Fraction(numerator=0, denominator=1)&#xA;&amp;lt;Decimal&amp;gt;  = decimal.Decimal(&amp;lt;str/int&amp;gt;)  # Or: Decimal((sign, digits, exponent))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;int(&amp;lt;str&amp;gt;)&#39;&lt;/code&gt; and &lt;code&gt;&#39;float(&amp;lt;str&amp;gt;)&#39;&lt;/code&gt; raise ValueError on malformed strings.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Decimal numbers are stored exactly, unlike most floats where &lt;code&gt;&#39;1.1 + 2.2 != 3.3&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Precision of decimal operations is set with: &lt;code&gt;&#39;decimal.getcontext().prec = &amp;lt;int&amp;gt;&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Basic Functions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;num&amp;gt; = pow(&amp;lt;num&amp;gt;, &amp;lt;num&amp;gt;)                # Or: &amp;lt;num&amp;gt; ** &amp;lt;num&amp;gt;&#xA;&amp;lt;num&amp;gt; = abs(&amp;lt;num&amp;gt;)                       # &amp;lt;float&amp;gt; = abs(&amp;lt;complex&amp;gt;)&#xA;&amp;lt;num&amp;gt; = round(&amp;lt;num&amp;gt; [, ±ndigits])        # `round(126, -1) == 130`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Math&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from math import e, pi, inf, nan, isinf, isnan&#xA;from math import sin, cos, tan, asin, acos, atan, degrees, radians&#xA;from math import log, log10, log2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Statistics&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from statistics import mean, median, variance, stdev, quantiles, groupby&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Random&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from random import random, randint, choice, shuffle, gauss, seed&#xA;&#xA;&amp;lt;float&amp;gt; = random()                       # A float inside [0, 1).&#xA;&amp;lt;int&amp;gt;   = randint(from_inc, to_inc)      # An int inside [from_inc, to_inc].&#xA;&amp;lt;el&amp;gt;    = choice(&amp;lt;sequence&amp;gt;)             # Keeps the sequence intact.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bin, Hex&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;int&amp;gt; = ±0b&amp;lt;bin&amp;gt;                         # Or: ±0x&amp;lt;hex&amp;gt;&#xA;&amp;lt;int&amp;gt; = int(&#39;±&amp;lt;bin&amp;gt;&#39;, 2)                 # Or: int(&#39;±&amp;lt;hex&amp;gt;&#39;, 16)&#xA;&amp;lt;int&amp;gt; = int(&#39;±0b&amp;lt;bin&amp;gt;&#39;, 0)               # Or: int(&#39;±0x&amp;lt;hex&amp;gt;&#39;, 0)&#xA;&amp;lt;str&amp;gt; = bin(&amp;lt;int&amp;gt;)                       # Returns &#39;[-]0b&amp;lt;bin&amp;gt;&#39;.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bitwise Operators&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;int&amp;gt; = &amp;lt;int&amp;gt; &amp;amp; &amp;lt;int&amp;gt;                    # And (0b1100 &amp;amp; 0b1010 == 0b1000).&#xA;&amp;lt;int&amp;gt; = &amp;lt;int&amp;gt; | &amp;lt;int&amp;gt;                    # Or  (0b1100 | 0b1010 == 0b1110).&#xA;&amp;lt;int&amp;gt; = &amp;lt;int&amp;gt; ^ &amp;lt;int&amp;gt;                    # Xor (0b1100 ^ 0b1010 == 0b0110).&#xA;&amp;lt;int&amp;gt; = &amp;lt;int&amp;gt; &amp;lt;&amp;lt; n_bits                  # Left shift. Use &amp;gt;&amp;gt; for right.&#xA;&amp;lt;int&amp;gt; = ~&amp;lt;int&amp;gt;                           # Not. Also -&amp;lt;int&amp;gt; - 1.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Combinatorics&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Every function returns an iterator.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;If you want to print the iterator, you need to pass it to the list() function first!&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from itertools import product, combinations, combinations_with_replacement, permutations&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; product([0, 1], repeat=3)&#xA;[(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), ..., (1, 1, 1)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; product(&#39;abc&#39;, &#39;abc&#39;)                    #   a  b  c&#xA;[(&#39;a&#39;, &#39;a&#39;), (&#39;a&#39;, &#39;b&#39;), (&#39;a&#39;, &#39;c&#39;),         # a x  x  x&#xA; (&#39;b&#39;, &#39;a&#39;), (&#39;b&#39;, &#39;b&#39;), (&#39;b&#39;, &#39;c&#39;),         # b x  x  x&#xA; (&#39;c&#39;, &#39;a&#39;), (&#39;c&#39;, &#39;b&#39;), (&#39;c&#39;, &#39;c&#39;)]         # c x  x  x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; combinations(&#39;abc&#39;, 2)                   #   a  b  c&#xA;[(&#39;a&#39;, &#39;b&#39;), (&#39;a&#39;, &#39;c&#39;),                     # a .  x  x&#xA; (&#39;b&#39;, &#39;c&#39;)]                                 # b .  .  x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; combinations_with_replacement(&#39;abc&#39;, 2)  #   a  b  c&#xA;[(&#39;a&#39;, &#39;a&#39;), (&#39;a&#39;, &#39;b&#39;), (&#39;a&#39;, &#39;c&#39;),         # a x  x  x&#xA; (&#39;b&#39;, &#39;b&#39;), (&#39;b&#39;, &#39;c&#39;),                     # b .  x  x&#xA; (&#39;c&#39;, &#39;c&#39;)]                                 # c .  .  x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; permutations(&#39;abc&#39;, 2)                   #   a  b  c&#xA;[(&#39;a&#39;, &#39;b&#39;), (&#39;a&#39;, &#39;c&#39;),                     # a .  x  x&#xA; (&#39;b&#39;, &#39;a&#39;), (&#39;b&#39;, &#39;c&#39;),                     # b x  .  x&#xA; (&#39;c&#39;, &#39;a&#39;), (&#39;c&#39;, &#39;b&#39;)]                     # c x  x  .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Datetime&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Module &#39;datetime&#39; provides &#39;date&#39; &lt;code&gt;&amp;lt;D&amp;gt;&lt;/code&gt;, &#39;time&#39; &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt;, &#39;datetime&#39; &lt;code&gt;&amp;lt;DT&amp;gt;&lt;/code&gt; and &#39;timedelta&#39; &lt;code&gt;&amp;lt;TD&amp;gt;&lt;/code&gt; classes. All are immutable and hashable.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Time and datetime objects can be &#39;aware&#39; &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;, meaning they have defined timezone, or &#39;naive&#39; &lt;code&gt;&amp;lt;n&amp;gt;&lt;/code&gt;, meaning they don&#39;t.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;If object is naive, it is presumed to be in the system&#39;s timezone.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from datetime import date, time, datetime, timedelta&#xA;from dateutil.tz import UTC, tzlocal, gettz, datetime_exists, resolve_imaginary&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Constructors&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;D&amp;gt;  = date(year, month, day)&#xA;&amp;lt;T&amp;gt;  = time(hour=0, minute=0, second=0, microsecond=0, tzinfo=None, fold=0)&#xA;&amp;lt;DT&amp;gt; = datetime(year, month, day, hour=0, minute=0, second=0, ...)&#xA;&amp;lt;TD&amp;gt; = timedelta(weeks=0, days=0, hours=0, minutes=0, seconds=0, ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;&#39;&amp;lt;D/DT&amp;gt;.weekday()&#39;&lt;/code&gt; to get the day of the week (Mon == 0).&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;fold=1&#39;&lt;/code&gt; means the second pass in case of time jumping back for one hour.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Timedelta normalizes arguments to ±days, seconds (&amp;lt; 86 400) and microseconds (&amp;lt; 1M).&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Now&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;D/DTn&amp;gt;  = D/DT.today()                     # Current local date or naive datetime.&#xA;&amp;lt;DTn&amp;gt;    = DT.utcnow()                      # Naive datetime from current UTC time.&#xA;&amp;lt;DTa&amp;gt;    = DT.now(&amp;lt;tzinfo&amp;gt;)                 # Aware datetime from current tz time.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;To extract time use &lt;code&gt;&#39;&amp;lt;DTn&amp;gt;.time()&#39;&lt;/code&gt;, &lt;code&gt;&#39;&amp;lt;DTa&amp;gt;.time()&#39;&lt;/code&gt; or &lt;code&gt;&#39;&amp;lt;DTa&amp;gt;.timetz()&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Timezone&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;tzinfo&amp;gt; = UTC                              # UTC timezone. London without DST.&#xA;&amp;lt;tzinfo&amp;gt; = tzlocal()                        # Local timezone. Also gettz().&#xA;&amp;lt;tzinfo&amp;gt; = gettz(&#39;&amp;lt;Continent&amp;gt;/&amp;lt;City&amp;gt;&#39;)      # &#39;Continent/City_Name&#39; timezone or None.&#xA;&amp;lt;DTa&amp;gt;    = &amp;lt;DT&amp;gt;.astimezone(&amp;lt;tzinfo&amp;gt;)        # Datetime, converted to the passed timezone.&#xA;&amp;lt;Ta/DTa&amp;gt; = &amp;lt;T/DT&amp;gt;.replace(tzinfo=&amp;lt;tzinfo&amp;gt;)  # Unconverted object with a new timezone.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Encode&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;D/T/DT&amp;gt; = D/T/DT.fromisoformat(&#39;&amp;lt;iso&amp;gt;&#39;)    # Object from ISO string. Raises ValueError.&#xA;&amp;lt;DT&amp;gt;     = DT.strptime(&amp;lt;str&amp;gt;, &#39;&amp;lt;format&amp;gt;&#39;)   # Datetime from str, according to format.&#xA;&amp;lt;D/DTn&amp;gt;  = D/DT.fromordinal(&amp;lt;int&amp;gt;)          # D/DTn from days since the Gregorian NYE 1.&#xA;&amp;lt;DTn&amp;gt;    = DT.fromtimestamp(&amp;lt;real&amp;gt;)         # Local time DTn from seconds since the Epoch.&#xA;&amp;lt;DTa&amp;gt;    = DT.fromtimestamp(&amp;lt;real&amp;gt;, &amp;lt;tz.&amp;gt;)  # Aware datetime from seconds since the Epoch.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ISO strings come in following forms: &lt;code&gt;&#39;YYYY-MM-DD&#39;&lt;/code&gt;, &lt;code&gt;&#39;HH:MM:SS.ffffff[±&amp;lt;offset&amp;gt;]&#39;&lt;/code&gt;, or both separated by an arbitrary character. Offset is formatted as: &lt;code&gt;&#39;HH:MM&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Python uses the Unix Epoch: &lt;code&gt;&#39;1970-01-01 00:00 UTC&#39;&lt;/code&gt;, &lt;code&gt;&#39;1970-01-01 01:00 CET&#39;&lt;/code&gt;, ...&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Decode&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;str&amp;gt;    = &amp;lt;D/T/DT&amp;gt;.isoformat(sep=&#39;T&#39;)      # Also timespec=&#39;auto/hours/minutes/seconds&#39;.&#xA;&amp;lt;str&amp;gt;    = &amp;lt;D/T/DT&amp;gt;.strftime(&#39;&amp;lt;format&amp;gt;&#39;)    # Custom string representation.&#xA;&amp;lt;int&amp;gt;    = &amp;lt;D/DT&amp;gt;.toordinal()               # Days since Gregorian NYE 1, ignoring time and tz.&#xA;&amp;lt;float&amp;gt;  = &amp;lt;DTn&amp;gt;.timestamp()                # Seconds since the Epoch, from DTn in local tz.&#xA;&amp;lt;float&amp;gt;  = &amp;lt;DTa&amp;gt;.timestamp()                # Seconds since the Epoch, from DTa.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Format&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; dt = datetime.strptime(&#39;2015-05-14 23:39:00.00 +2000&#39;, &#39;%Y-%m-%d %H:%M:%S.%f %z&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; dt.strftime(&#34;%A, %dth of %B &#39;%y, %I:%M%p %Z&#34;)&#xA;&#34;Thursday, 14th of May &#39;15, 11:39PM UTC+02:00&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;%Z&#39;&lt;/code&gt; only accepts &lt;code&gt;&#39;UTC/GMT&#39;&lt;/code&gt; and local timezone&#39;s code. &lt;code&gt;&#39;%z&#39;&lt;/code&gt; also accepts &lt;code&gt;&#39;±HH:MM&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;For abbreviated weekday and month use &lt;code&gt;&#39;%a&#39;&lt;/code&gt; and &lt;code&gt;&#39;%b&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Arithmetics&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;D/DT&amp;gt;   = &amp;lt;D/DT&amp;gt;  ± &amp;lt;TD&amp;gt;                   # Returned datetime can fall into missing hour.&#xA;&amp;lt;TD&amp;gt;     = &amp;lt;D/DTn&amp;gt; - &amp;lt;D/DTn&amp;gt;                # Returns the difference, ignoring time jumps.&#xA;&amp;lt;TD&amp;gt;     = &amp;lt;DTa&amp;gt;   - &amp;lt;DTa&amp;gt;                  # Ignores time jumps if they share tzinfo object.&#xA;&amp;lt;TD&amp;gt;     = &amp;lt;TD&amp;gt;    * &amp;lt;real&amp;gt;                 # Also: &amp;lt;TD&amp;gt; = abs(&amp;lt;TD&amp;gt;) and &amp;lt;TD&amp;gt; = &amp;lt;TD&amp;gt; ±% &amp;lt;TD&amp;gt;.&#xA;&amp;lt;float&amp;gt;  = &amp;lt;TD&amp;gt;    / &amp;lt;TD&amp;gt;                   # How many weeks/years there are in TD. Also //.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Arguments&lt;/h2&gt; &#xA;&lt;h3&gt;Inside Function Call&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;function&amp;gt;(&amp;lt;positional_args&amp;gt;)                  # f(0, 0)&#xA;&amp;lt;function&amp;gt;(&amp;lt;keyword_args&amp;gt;)                     # f(x=0, y=0)&#xA;&amp;lt;function&amp;gt;(&amp;lt;positional_args&amp;gt;, &amp;lt;keyword_args&amp;gt;)  # f(0, y=0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Inside Function Definition&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def f(&amp;lt;nondefault_args&amp;gt;):                      # def f(x, y):&#xA;def f(&amp;lt;default_args&amp;gt;):                         # def f(x=0, y=0):&#xA;def f(&amp;lt;nondefault_args&amp;gt;, &amp;lt;default_args&amp;gt;):      # def f(x, y=0):&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;A function has its default values evaluated when it&#39;s first encountered in the scope.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Any changes to default values that are mutable will persist between invocations.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Splat Operator&lt;/h2&gt; &#xA;&lt;h3&gt;Inside Function Call&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Splat expands a collection into positional arguments, while splatty-splat expands a dictionary into keyword arguments.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;args   = (1, 2)&#xA;kwargs = {&#39;x&#39;: 3, &#39;y&#39;: 4, &#39;z&#39;: 5}&#xA;func(*args, **kwargs)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Is the same as:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;func(1, 2, x=3, y=4, z=5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Inside Function Definition&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Splat combines zero or more positional arguments into a tuple, while splatty-splat combines zero or more keyword arguments into a dictionary.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def add(*a):&#xA;    return sum(a)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; add(1, 2, 3)&#xA;6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Legal argument combinations:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def f(*, x, y, z):          # f(x=1, y=2, z=3)&#xA;def f(x, *, y, z):          # f(x=1, y=2, z=3) | f(1, y=2, z=3)&#xA;def f(x, y, *, z):          # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def f(*args):               # f(1, 2, 3)&#xA;def f(x, *args):            # f(1, 2, 3)&#xA;def f(*args, z):            # f(1, 2, z=3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def f(**kwargs):            # f(x=1, y=2, z=3)&#xA;def f(x, **kwargs):         # f(x=1, y=2, z=3) | f(1, y=2, z=3)&#xA;def f(*, x, **kwargs):      # f(x=1, y=2, z=3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def f(*args, **kwargs):     # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3)&#xA;def f(x, *args, **kwargs):  # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3)&#xA;def f(*args, y, **kwargs):  # f(x=1, y=2, z=3) | f(1, y=2, z=3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Other Uses&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;list&amp;gt;  = [*&amp;lt;collection&amp;gt; [, ...]]&#xA;&amp;lt;set&amp;gt;   = {*&amp;lt;collection&amp;gt; [, ...]}&#xA;&amp;lt;tuple&amp;gt; = (*&amp;lt;collection&amp;gt;, [...])&#xA;&amp;lt;dict&amp;gt;  = {**&amp;lt;dict&amp;gt; [, ...]}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;head, *body, tail = &amp;lt;collection&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Inline&lt;/h2&gt; &#xA;&lt;h3&gt;Lambda&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;func&amp;gt; = lambda: &amp;lt;return_value&amp;gt;&#xA;&amp;lt;func&amp;gt; = lambda &amp;lt;arg_1&amp;gt;, &amp;lt;arg_2&amp;gt;: &amp;lt;return_value&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Comprehensions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;list&amp;gt; = [i+1 for i in range(10)]                         # [1, 2, ..., 10]&#xA;&amp;lt;set&amp;gt;  = {i for i in range(10) if i &amp;gt; 5}                  # {6, 7, 8, 9}&#xA;&amp;lt;iter&amp;gt; = (i+5 for i in range(10))                         # (5, 6, ..., 14)&#xA;&amp;lt;dict&amp;gt; = {i: i*2 for i in range(10)}                      # {0: 0, 1: 2, ..., 9: 18}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; [l+r for l in &#39;abc&#39; for r in &#39;abc&#39;]&#xA;[&#39;aa&#39;, &#39;ab&#39;, &#39;ac&#39;, ..., &#39;cc&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Map, Filter, Reduce&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;iter&amp;gt; = map(lambda x: x + 1, range(10))                  # (1, 2, ..., 10)&#xA;&amp;lt;iter&amp;gt; = filter(lambda x: x &amp;gt; 5, range(10))               # (6, 7, 8, 9)&#xA;&amp;lt;obj&amp;gt;  = reduce(lambda out, x: out + x, range(10))        # 45&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reduce must be imported from the functools module.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Any, All&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;bool&amp;gt; = any(&amp;lt;collection&amp;gt;)                                # Is `bool(el)` True for any element.&#xA;&amp;lt;bool&amp;gt; = all(&amp;lt;collection&amp;gt;)                                # Is True for all elements or empty.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Conditional Expression&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;obj&amp;gt; = &amp;lt;exp_if_true&amp;gt; if &amp;lt;condition&amp;gt; else &amp;lt;exp_if_false&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; [a if a else &#39;zero&#39; for a in (0, 1, 2, 3)]&#xA;[&#39;zero&#39;, 1, 2, 3]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Named Tuple, Enum, Dataclass&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from collections import namedtuple&#xA;Point = namedtuple(&#39;Point&#39;, &#39;x y&#39;)&#xA;point = Point(0, 0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from enum import Enum&#xA;Direction = Enum(&#39;Direction&#39;, &#39;n e s w&#39;)&#xA;direction = Direction.n&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from dataclasses import make_dataclass&#xA;Creature = make_dataclass(&#39;Creature&#39;, [&#39;loc&#39;, &#39;dir&#39;])&#xA;creature = Creature(point, direction)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Imports&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import &amp;lt;module&amp;gt;            # Imports a built-in or &#39;&amp;lt;module&amp;gt;.py&#39;.&#xA;import &amp;lt;package&amp;gt;           # Imports a built-in or &#39;&amp;lt;package&amp;gt;/__init__.py&#39;.&#xA;import &amp;lt;package&amp;gt;.&amp;lt;module&amp;gt;  # Imports a built-in or &#39;&amp;lt;package&amp;gt;/&amp;lt;module&amp;gt;.py&#39;.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Package is a collection of modules, but it can also define its own objects.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;On a filesystem this corresponds to a directory of Python files with an optional init script.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Running &lt;code&gt;&#39;import &amp;lt;package&amp;gt;&#39;&lt;/code&gt; does not automatically provide access to the package&#39;s modules unless they are explicitly imported in its init script.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Closure&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;We have/get a closure in Python when:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;A nested function references a value of its enclosing function and then&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;the enclosing function returns the nested function.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def get_multiplier(a):&#xA;    def out(b):&#xA;        return a * b&#xA;    return out&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; multiply_by_3 = get_multiplier(3)&#xA;&amp;gt;&amp;gt;&amp;gt; multiply_by_3(10)&#xA;30&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;If multiple nested functions within enclosing function reference the same value, that value gets shared.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;To dynamically access function&#39;s first free variable use &lt;code&gt;&#39;&amp;lt;function&amp;gt;.__closure__[0].cell_contents&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Partial&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from functools import partial&#xA;&amp;lt;function&amp;gt; = partial(&amp;lt;function&amp;gt; [, &amp;lt;arg_1&amp;gt;, &amp;lt;arg_2&amp;gt;, ...])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import operator as op&#xA;&amp;gt;&amp;gt;&amp;gt; multiply_by_3 = partial(op.mul, 3)&#xA;&amp;gt;&amp;gt;&amp;gt; multiply_by_3(10)&#xA;30&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Partial is also useful in cases when function needs to be passed as an argument because it enables us to set its arguments beforehand.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;A few examples being: &lt;code&gt;&#39;defaultdict(&amp;lt;function&amp;gt;)&#39;&lt;/code&gt;, &lt;code&gt;&#39;iter(&amp;lt;function&amp;gt;, to_exclusive)&#39;&lt;/code&gt; and dataclass&#39;s &lt;code&gt;&#39;field(default_factory=&amp;lt;function&amp;gt;)&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Non-Local&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;If variable is being assigned to anywhere in the scope, it is regarded as a local variable, unless it is declared as a &#39;global&#39; or a &#39;nonlocal&#39;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def get_counter():&#xA;    i = 0&#xA;    def out():&#xA;        nonlocal i&#xA;        i += 1&#xA;        return i&#xA;    return out&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; counter = get_counter()&#xA;&amp;gt;&amp;gt;&amp;gt; counter(), counter(), counter()&#xA;(1, 2, 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Decorator&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;A decorator takes a function, adds some functionality and returns it.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;It can be any &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#callable&#34;&gt;callable&lt;/a&gt;, but is usually implemented as a function that returns a &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#closure&#34;&gt;closure&lt;/a&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@decorator_name&#xA;def function_that_gets_passed_to_decorator():&#xA;    ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Debugger Example&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Decorator that prints function&#39;s name every time it gets called.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from functools import wraps&#xA;&#xA;def debug(func):&#xA;    @wraps(func)&#xA;    def out(*args, **kwargs):&#xA;        print(func.__name__)&#xA;        return func(*args, **kwargs)&#xA;    return out&#xA;&#xA;@debug&#xA;def add(x, y):&#xA;    return x + y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Wraps is a helper decorator that copies the metadata of the passed function (func) to the function it is wrapping (out).&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Without it &lt;code&gt;&#39;add.__name__&#39;&lt;/code&gt; would return &lt;code&gt;&#39;out&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;LRU Cache&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Decorator that caches function&#39;s return values. All function&#39;s arguments must be hashable.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from functools import lru_cache&#xA;&#xA;@lru_cache(maxsize=None)&#xA;def fib(n):&#xA;    return n if n &amp;lt; 2 else fib(n-2) + fib(n-1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Default size of the cache is 128 values. Passing &lt;code&gt;&#39;maxsize=None&#39;&lt;/code&gt; makes it unbounded.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CPython interpreter limits recursion depth to 1000 by default. To increase it use &lt;code&gt;&#39;sys.setrecursionlimit(&amp;lt;depth&amp;gt;)&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Parametrized Decorator&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;A decorator that accepts arguments and returns a normal decorator that accepts a function.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from functools import wraps&#xA;&#xA;def debug(print_result=False):&#xA;    def decorator(func):&#xA;        @wraps(func)&#xA;        def out(*args, **kwargs):&#xA;            result = func(*args, **kwargs)&#xA;            print(func.__name__, result if print_result else &#39;&#39;)&#xA;            return result&#xA;        return out&#xA;    return decorator&#xA;&#xA;@debug(print_result=True)&#xA;def add(x, y):&#xA;    return x + y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Using only &lt;code&gt;&#39;@debug&#39;&lt;/code&gt; to decorate the add() function would not work here, because debug would then receive the add() function as a &#39;print_result&#39; argument. Decorators can however manually check if the argument they received is a function and act accordingly.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Class&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class &amp;lt;name&amp;gt;:&#xA;    def __init__(self, a):&#xA;        self.a = a&#xA;    def __repr__(self):&#xA;        class_name = self.__class__.__name__&#xA;        return f&#39;{class_name}({self.a!r})&#39;&#xA;    def __str__(self):&#xA;        return str(self.a)&#xA;&#xA;    @classmethod&#xA;    def get_class_name(cls):&#xA;        return cls.__name__&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Return value of repr() should be unambiguous and of str() readable.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;If only repr() is defined, it will also be used for str().&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Str() use cases:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;lt;el&amp;gt;)&#xA;f&#39;{&amp;lt;el&amp;gt;}&#39;&#xA;logging.warning(&amp;lt;el&amp;gt;)&#xA;csv.writer(&amp;lt;file&amp;gt;).writerow([&amp;lt;el&amp;gt;])&#xA;raise Exception(&amp;lt;el&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Repr() use cases:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print/str/repr([&amp;lt;el&amp;gt;])&#xA;f&#39;{&amp;lt;el&amp;gt;!r}&#39;&#xA;Z = dataclasses.make_dataclass(&#39;Z&#39;, [&#39;a&#39;]); print/str/repr(Z(&amp;lt;el&amp;gt;))&#xA;&amp;gt;&amp;gt;&amp;gt; &amp;lt;el&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Constructor Overloading&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class &amp;lt;name&amp;gt;:&#xA;    def __init__(self, a=None):&#xA;        self.a = a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Inheritance&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Person:&#xA;    def __init__(self, name, age):&#xA;        self.name = name&#xA;        self.age  = age&#xA;&#xA;class Employee(Person):&#xA;    def __init__(self, name, age, staff_num):&#xA;        super().__init__(name, age)&#xA;        self.staff_num = staff_num&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multiple Inheritance&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class A: pass&#xA;class B: pass&#xA;class C(A, B): pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;MRO determines the order in which parent classes are traversed when searching for a method:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; C.mro()&#xA;[&amp;lt;class &#39;C&#39;&amp;gt;, &amp;lt;class &#39;A&#39;&amp;gt;, &amp;lt;class &#39;B&#39;&amp;gt;, &amp;lt;class &#39;object&#39;&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Property&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pythonic way of implementing getters and setters.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Person:&#xA;    @property&#xA;    def name(self):&#xA;        return &#39; &#39;.join(self._name)&#xA;&#xA;    @name.setter&#xA;    def name(self, value):&#xA;        self._name = value.split()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; person = Person()&#xA;&amp;gt;&amp;gt;&amp;gt; person.name = &#39;\t Guido  van Rossum \n&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; person.name&#xA;&#39;Guido van Rossum&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dataclass&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Decorator that automatically generates init(), repr() and eq() special methods.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from dataclasses import dataclass, field&#xA;&#xA;@dataclass(order=False, frozen=False)&#xA;class &amp;lt;class_name&amp;gt;:&#xA;    &amp;lt;attr_name_1&amp;gt;: &amp;lt;type&amp;gt;&#xA;    &amp;lt;attr_name_2&amp;gt;: &amp;lt;type&amp;gt; = &amp;lt;default_value&amp;gt;&#xA;    &amp;lt;attr_name_3&amp;gt;: list/dict/set = field(default_factory=list/dict/set)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Objects can be made sortable with &lt;code&gt;&#39;order=True&#39;&lt;/code&gt; and immutable with &lt;code&gt;&#39;frozen=True&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;For object to be hashable, all attributes must be hashable and &#39;frozen&#39; must be True.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Function field() is needed because &lt;code&gt;&#39;&amp;lt;attr_name&amp;gt;: list = []&#39;&lt;/code&gt; would make a list that is shared among all instances. Its &#39;default_factory&#39; argument can be any &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#callable&#34;&gt;callable&lt;/a&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;For attributes of arbitrary type use &lt;code&gt;&#39;typing.Any&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Inline:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from dataclasses import make_dataclass&#xA;&amp;lt;class&amp;gt; = make_dataclass(&#39;&amp;lt;class_name&amp;gt;&#39;, &amp;lt;coll_of_attribute_names&amp;gt;)&#xA;&amp;lt;class&amp;gt; = make_dataclass(&#39;&amp;lt;class_name&amp;gt;&#39;, &amp;lt;coll_of_tuples&amp;gt;)&#xA;&amp;lt;tuple&amp;gt; = (&#39;&amp;lt;attr_name&amp;gt;&#39;, &amp;lt;type&amp;gt; [, &amp;lt;default_value&amp;gt;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Rest of type annotations (CPython interpreter ignores them all):&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def func(&amp;lt;arg_name&amp;gt;: &amp;lt;type&amp;gt; [= &amp;lt;obj&amp;gt;]) -&amp;gt; &amp;lt;type&amp;gt;:&#xA;&amp;lt;var_name&amp;gt;: typing.List/Set/Iterable/Sequence/Optional[&amp;lt;type&amp;gt;]&#xA;&amp;lt;var_name&amp;gt;: typing.Dict/Tuple/Union[&amp;lt;type&amp;gt;, ...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Slots&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Mechanism that restricts objects to attributes listed in &#39;slots&#39; and significantly reduces their memory footprint.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class MyClassWithSlots:&#xA;    __slots__ = [&#39;a&#39;]&#xA;    def __init__(self):&#xA;        self.a = 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Copy&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from copy import copy, deepcopy&#xA;&amp;lt;object&amp;gt; = copy(&amp;lt;object&amp;gt;)&#xA;&amp;lt;object&amp;gt; = deepcopy(&amp;lt;object&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Duck Types&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;A duck type is an implicit type that prescribes a set of special methods. Any object that has those methods defined is considered a member of that duck type.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Comparable&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;If eq() method is not overridden, it returns &lt;code&gt;&#39;id(self) == id(other)&#39;&lt;/code&gt;, which is the same as &lt;code&gt;&#39;self is other&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;That means all objects compare not equal by default.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Only the left side object has eq() method called, unless it returns NotImplemented, in which case the right object is consulted.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ne() automatically works on any object that has eq() defined.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class MyComparable:&#xA;    def __init__(self, a):&#xA;        self.a = a&#xA;    def __eq__(self, other):&#xA;        if isinstance(other, type(self)):&#xA;            return self.a == other.a&#xA;        return NotImplemented&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hashable&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hashable object needs both hash() and eq() methods and its hash value should never change.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hashable objects that compare equal must have the same hash value, meaning default hash() that returns &lt;code&gt;&#39;id(self)&#39;&lt;/code&gt; will not do.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;That is why Python automatically makes classes unhashable if you only implement eq().&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class MyHashable:&#xA;    def __init__(self, a):&#xA;        self._a = a&#xA;    @property&#xA;    def a(self):&#xA;        return self._a&#xA;    def __eq__(self, other):&#xA;        if isinstance(other, type(self)):&#xA;            return self.a == other.a&#xA;        return NotImplemented&#xA;    def __hash__(self):&#xA;        return hash(self.a)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sortable&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;With &#39;total_ordering&#39; decorator, you only need to provide eq() and one of lt(), gt(), le() or ge() special methods and the rest will be automatically generated.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Functions sorted() and min() only require lt() method, while max() only requires gt(). However, it is best to define them all so that confusion doesn&#39;t arise in other contexts.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;When two lists, strings or dataclasses are compared, their values get compared in order until a pair of unequal values is found. The comparison of this two values is then returned. The shorter sequence is considered smaller in case of all values being equal.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from functools import total_ordering&#xA;&#xA;@total_ordering&#xA;class MySortable:&#xA;    def __init__(self, a):&#xA;        self.a = a&#xA;    def __eq__(self, other):&#xA;        if isinstance(other, type(self)):&#xA;            return self.a == other.a&#xA;        return NotImplemented&#xA;    def __lt__(self, other):&#xA;        if isinstance(other, type(self)):&#xA;            return self.a &amp;lt; other.a&#xA;        return NotImplemented&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Iterator&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Any object that has methods next() and iter() is an iterator.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Next() should return next item or raise StopIteration.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Iter() should return &#39;self&#39;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Counter:&#xA;    def __init__(self):&#xA;        self.i = 0&#xA;    def __next__(self):&#xA;        self.i += 1&#xA;        return self.i&#xA;    def __iter__(self):&#xA;        return self&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; counter = Counter()&#xA;&amp;gt;&amp;gt;&amp;gt; next(counter), next(counter), next(counter)&#xA;(1, 2, 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Python has many different iterator objects:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sequence iterators returned by the &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#iterator&#34;&gt;iter()&lt;/a&gt; function, such as list_iterator and set_iterator.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Objects returned by the &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#itertools&#34;&gt;itertools&lt;/a&gt; module, such as count, repeat and cycle.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Generators returned by the &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#generator&#34;&gt;generator functions&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#comprehensions&#34;&gt;generator expressions&lt;/a&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;File objects returned by the &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#open&#34;&gt;open()&lt;/a&gt; function, etc.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Callable&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;All functions and classes have a call() method, hence are callable.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;When this cheatsheet uses &lt;code&gt;&#39;&amp;lt;function&amp;gt;&#39;&lt;/code&gt; as an argument, it actually means &lt;code&gt;&#39;&amp;lt;callable&amp;gt;&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Counter:&#xA;    def __init__(self):&#xA;        self.i = 0&#xA;    def __call__(self):&#xA;        self.i += 1&#xA;        return self.i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; counter = Counter()&#xA;&amp;gt;&amp;gt;&amp;gt; counter(), counter(), counter()&#xA;(1, 2, 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Context Manager&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Enter() should lock the resources and optionally return an object.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exit() should release the resources.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Any exception that happens inside the with block is passed to the exit() method.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;If it wishes to suppress the exception it must return a true value.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class MyOpen:&#xA;    def __init__(self, filename):&#xA;        self.filename = filename&#xA;    def __enter__(self):&#xA;        self.file = open(self.filename)&#xA;        return self.file&#xA;    def __exit__(self, exc_type, exception, traceback):&#xA;        self.file.close()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; with open(&#39;test.txt&#39;, &#39;w&#39;) as file:&#xA;...     file.write(&#39;Hello World!&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; with MyOpen(&#39;test.txt&#39;) as file:&#xA;...     print(file.read())&#xA;Hello World!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Iterable Duck Types&lt;/h2&gt; &#xA;&lt;h3&gt;Iterable&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Only required method is iter(). It should return an iterator of object&#39;s items.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Contains() automatically works on any object that has iter() defined.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class MyIterable:&#xA;    def __init__(self, a):&#xA;        self.a = a&#xA;    def __iter__(self):&#xA;        return iter(self.a)&#xA;    def __contains__(self, el):&#xA;        return el in self.a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; obj = MyIterable([1, 2, 3])&#xA;&amp;gt;&amp;gt;&amp;gt; [el for el in obj]&#xA;[1, 2, 3]&#xA;&amp;gt;&amp;gt;&amp;gt; 1 in obj&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Collection&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Only required methods are iter() and len().&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;This cheatsheet actually means &lt;code&gt;&#39;&amp;lt;iterable&amp;gt;&#39;&lt;/code&gt; when it uses &lt;code&gt;&#39;&amp;lt;collection&amp;gt;&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;I chose not to use the name &#39;iterable&#39; because it sounds scarier and more vague than &#39;collection&#39;. The only drawback of this decision is that a reader could think a certain function doesn&#39;t accept iterators when it does, since iterators are the only built-in objects that are iterable but are not collections.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class MyCollection:&#xA;    def __init__(self, a):&#xA;        self.a = a&#xA;    def __iter__(self):&#xA;        return iter(self.a)&#xA;    def __contains__(self, el):&#xA;        return el in self.a&#xA;    def __len__(self):&#xA;        return len(self.a)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sequence&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Only required methods are len() and getitem().&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Getitem() should return an item at the passed index or raise IndexError.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Iter() and contains() automatically work on any object that has getitem() defined.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reversed() automatically works on any object that has len() and getitem() defined.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class MySequence:&#xA;    def __init__(self, a):&#xA;        self.a = a&#xA;    def __iter__(self):&#xA;        return iter(self.a)&#xA;    def __contains__(self, el):&#xA;        return el in self.a&#xA;    def __len__(self):&#xA;        return len(self.a)&#xA;    def __getitem__(self, i):&#xA;        return self.a[i]&#xA;    def __reversed__(self):&#xA;        return reversed(self.a)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Discrepancies between glossary definitions and abstract base classes:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Glossary defines iterable as any object with iter() or getitem() and sequence as any object with len() and getitem(). It does not define collection.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Passing ABC Iterable to isinstance() or issubclass() checks whether object/class has method iter(), while ABC Collection checks for iter(), contains() and len().&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;ABC Sequence&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;It&#39;s a richer interface than the basic sequence.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extending it generates iter(), contains(), reversed(), index() and count().&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Unlike &lt;code&gt;&#39;abc.Iterable&#39;&lt;/code&gt; and &lt;code&gt;&#39;abc.Collection&#39;&lt;/code&gt;, it is not a duck type. That is why &lt;code&gt;&#39;issubclass(MySequence, abc.Sequence)&#39;&lt;/code&gt; would return False even if MySequence had all the methods defined.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from collections import abc&#xA;&#xA;class MyAbcSequence(abc.Sequence):&#xA;    def __init__(self, a):&#xA;        self.a = a&#xA;    def __len__(self):&#xA;        return len(self.a)&#xA;    def __getitem__(self, i):&#xA;        return self.a[i]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Table of required and automatically available special methods:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+------------+------------+------------+------------+--------------+&#xA;|            |  Iterable  | Collection |  Sequence  | abc.Sequence |&#xA;+------------+------------+------------+------------+--------------+&#xA;| iter()     |    REQ     |    REQ     |    Yes     |     Yes      |&#xA;| contains() |    Yes     |    Yes     |    Yes     |     Yes      |&#xA;| len()      |            |    REQ     |    REQ     |     REQ      |&#xA;| getitem()  |            |            |    REQ     |     REQ      |&#xA;| reversed() |            |            |    Yes     |     Yes      |&#xA;| index()    |            |            |            |     Yes      |&#xA;| count()    |            |            |            |     Yes      |&#xA;+------------+------------+------------+------------+--------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Other ABCs that generate missing methods are: MutableSequence, Set, MutableSet, Mapping and MutableMapping.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Names of their required methods are stored in &lt;code&gt;&#39;&amp;lt;abc&amp;gt;.__abstractmethods__&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Enum&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from enum import Enum, auto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class &amp;lt;enum_name&amp;gt;(Enum):&#xA;    &amp;lt;member_name_1&amp;gt; = &amp;lt;value_1&amp;gt;&#xA;    &amp;lt;member_name_2&amp;gt; = &amp;lt;value_2_a&amp;gt;, &amp;lt;value_2_b&amp;gt;&#xA;    &amp;lt;member_name_3&amp;gt; = auto()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;If there are no numeric values before auto(), it returns 1.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Otherwise it returns an increment of the last numeric value.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;member&amp;gt; = &amp;lt;enum&amp;gt;.&amp;lt;member_name&amp;gt;                 # Returns a member.&#xA;&amp;lt;member&amp;gt; = &amp;lt;enum&amp;gt;[&#39;&amp;lt;member_name&amp;gt;&#39;]              # Returns a member or raises KeyError.&#xA;&amp;lt;member&amp;gt; = &amp;lt;enum&amp;gt;(&amp;lt;value&amp;gt;)                      # Returns a member or raises ValueError.&#xA;&amp;lt;str&amp;gt;    = &amp;lt;member&amp;gt;.name                        # Returns member&#39;s name.&#xA;&amp;lt;obj&amp;gt;    = &amp;lt;member&amp;gt;.value                       # Returns member&#39;s value.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list_of_members = list(&amp;lt;enum&amp;gt;)&#xA;member_names    = [a.name for a in &amp;lt;enum&amp;gt;]&#xA;member_values   = [a.value for a in &amp;lt;enum&amp;gt;]&#xA;random_member   = random.choice(list(&amp;lt;enum&amp;gt;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def get_next_member(member):&#xA;    members = list(member.__class__)&#xA;    index   = (members.index(member) + 1) % len(members)&#xA;    return members[index]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Inline&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Cutlery = Enum(&#39;Cutlery&#39;, &#39;fork knife spoon&#39;)&#xA;Cutlery = Enum(&#39;Cutlery&#39;, [&#39;fork&#39;, &#39;knife&#39;, &#39;spoon&#39;])&#xA;Cutlery = Enum(&#39;Cutlery&#39;, {&#39;fork&#39;: 1, &#39;knife&#39;: 2, &#39;spoon&#39;: 3})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;User-defined functions cannot be values, so they must be wrapped:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from functools import partial&#xA;LogicOp = Enum(&#39;LogicOp&#39;, {&#39;AND&#39;: partial(lambda l, r: l and r),&#xA;                           &#39;OR&#39;:  partial(lambda l, r: l or r)})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Member names are in all caps because trying to access a member that is named after a reserved keyword raises SyntaxError.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Exceptions&lt;/h2&gt; &#xA;&lt;h3&gt;Basic Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try:&#xA;    &amp;lt;code&amp;gt;&#xA;except &amp;lt;exception&amp;gt;:&#xA;    &amp;lt;code&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Complex Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try:&#xA;    &amp;lt;code_1&amp;gt;&#xA;except &amp;lt;exception_a&amp;gt;:&#xA;    &amp;lt;code_2_a&amp;gt;&#xA;except &amp;lt;exception_b&amp;gt;:&#xA;    &amp;lt;code_2_b&amp;gt;&#xA;else:&#xA;    &amp;lt;code_2_c&amp;gt;&#xA;finally:&#xA;    &amp;lt;code_3&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code inside the &lt;code&gt;&#39;else&#39;&lt;/code&gt; block will only be executed if &lt;code&gt;&#39;try&#39;&lt;/code&gt; block had no exceptions.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code inside the &lt;code&gt;&#39;finally&#39;&lt;/code&gt; block will always be executed (unless a signal is received).&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Catching Exceptions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;except &amp;lt;exception&amp;gt;:&#xA;except &amp;lt;exception&amp;gt; as &amp;lt;name&amp;gt;:&#xA;except (&amp;lt;exception&amp;gt;, [...]):&#xA;except (&amp;lt;exception&amp;gt;, [...]) as &amp;lt;name&amp;gt;:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Also catches subclasses of the exception.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;&#39;traceback.print_exc()&#39;&lt;/code&gt; to print the error message to stderr.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;&#39;print(&amp;lt;name&amp;gt;)&#39;&lt;/code&gt; to print just the cause of the exception (its arguments).&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Raising Exceptions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;raise &amp;lt;exception&amp;gt;&#xA;raise &amp;lt;exception&amp;gt;()&#xA;raise &amp;lt;exception&amp;gt;(&amp;lt;el&amp;gt; [, ...])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Re-raising caught exception:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;except &amp;lt;exception&amp;gt; as &amp;lt;name&amp;gt;:&#xA;    ...&#xA;    raise&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Exception Object&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;arguments = &amp;lt;name&amp;gt;.args&#xA;exc_type  = &amp;lt;name&amp;gt;.__class__&#xA;filename  = &amp;lt;name&amp;gt;.__traceback__.tb_frame.f_code.co_filename&#xA;func_name = &amp;lt;name&amp;gt;.__traceback__.tb_frame.f_code.co_name&#xA;line      = linecache.getline(filename, &amp;lt;name&amp;gt;.__traceback__.tb_lineno)&#xA;error_msg = &#39;&#39;.join(traceback.format_exception(exc_type, &amp;lt;name&amp;gt;, &amp;lt;name&amp;gt;.__traceback__))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Built-in Exceptions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;BaseException&#xA; +-- SystemExit                   # Raised by the sys.exit() function.&#xA; +-- KeyboardInterrupt            # Raised when the user hits the interrupt key (ctrl-c).&#xA; +-- Exception                    # User-defined exceptions should be derived from this class.&#xA;      +-- ArithmeticError         # Base class for arithmetic errors.&#xA;      |    +-- ZeroDivisionError  # Raised when dividing by zero.&#xA;      +-- AttributeError          # Raised when an attribute is missing.&#xA;      +-- EOFError                # Raised by input() when it hits end-of-file condition.&#xA;      +-- LookupError             # Raised when a look-up on a collection fails.&#xA;      |    +-- IndexError         # Raised when a sequence index is out of range.&#xA;      |    +-- KeyError           # Raised when a dictionary key or set element is missing.&#xA;      +-- NameError               # Raised when an object is missing.&#xA;      +-- OSError                 # Errors such as “file not found” or “disk full” (see Open).&#xA;      |    +-- FileNotFoundError  # When a file or directory is requested but doesn&#39;t exist.&#xA;      +-- RuntimeError            # Raised by errors that don&#39;t fall into other categories.&#xA;      |    +-- RecursionError     # Raised when the maximum recursion depth is exceeded.&#xA;      +-- StopIteration           # Raised by next() when run on an empty iterator.&#xA;      +-- TypeError               # Raised when an argument is of wrong type.&#xA;      +-- ValueError              # When an argument is of right type but inappropriate value.&#xA;           +-- UnicodeError       # Raised when encoding/decoding strings to/from bytes fails.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Collections and their exceptions:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+-----------+------------+------------+------------+&#xA;|           |    List    |    Set     |    Dict    |&#xA;+-----------+------------+------------+------------+&#xA;| getitem() | IndexError |            |  KeyError  |&#xA;| pop()     | IndexError |  KeyError  |  KeyError  |&#xA;| remove()  | ValueError |  KeyError  |            |&#xA;| index()   | ValueError |            |            |&#xA;+-----------+------------+------------+------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Useful built-in exceptions:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;raise TypeError(&#39;Argument is of wrong type!&#39;)&#xA;raise ValueError(&#39;Argument is of right type but inappropriate value!&#39;)&#xA;raise RuntimeError(&#39;None of above!&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;User-defined Exceptions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class MyError(Exception):&#xA;    pass&#xA;&#xA;class MyInputError(MyError):&#xA;    pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Exit&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Exits the interpreter by raising SystemExit exception.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sys&#xA;sys.exit()                        # Exits with exit code 0 (success).&#xA;sys.exit(&amp;lt;el&amp;gt;)                    # Prints to stderr and exits with 1.&#xA;sys.exit(&amp;lt;int&amp;gt;)                   # Exits with passed exit code.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Print&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;lt;el_1&amp;gt;, ..., sep=&#39; &#39;, end=&#39;\n&#39;, file=sys.stdout, flush=False)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;&#39;file=sys.stderr&#39;&lt;/code&gt; for messages about errors.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;&#39;flush=True&#39;&lt;/code&gt; to forcibly flush the stream.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Pretty Print&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pprint import pprint&#xA;pprint(&amp;lt;collection&amp;gt;, width=80, depth=None, compact=False, sort_dicts=True)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Levels deeper than &#39;depth&#39; get replaced by &#39;...&#39;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Input&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Reads a line from user input or pipe if present.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;str&amp;gt; = input(prompt=None)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Trailing newline gets stripped.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Prompt string is printed to the standard output before reading input.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Raises EOFError when user hits EOF (ctrl-d/ctrl-z⏎) or input stream gets exhausted.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Command Line Arguments&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sys&#xA;scripts_path = sys.argv[0]&#xA;arguments    = sys.argv[1:]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Argument Parser&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from argparse import ArgumentParser, FileType&#xA;p = ArgumentParser(description=&amp;lt;str&amp;gt;)&#xA;p.add_argument(&#39;-&amp;lt;short_name&amp;gt;&#39;, &#39;--&amp;lt;name&amp;gt;&#39;, action=&#39;store_true&#39;)  # Flag.&#xA;p.add_argument(&#39;-&amp;lt;short_name&amp;gt;&#39;, &#39;--&amp;lt;name&amp;gt;&#39;, type=&amp;lt;type&amp;gt;)          # Option.&#xA;p.add_argument(&#39;&amp;lt;name&amp;gt;&#39;, type=&amp;lt;type&amp;gt;, nargs=1)                    # First argument.&#xA;p.add_argument(&#39;&amp;lt;name&amp;gt;&#39;, type=&amp;lt;type&amp;gt;, nargs=&#39;+&#39;)                  # Remaining arguments.&#xA;p.add_argument(&#39;&amp;lt;name&amp;gt;&#39;, type=&amp;lt;type&amp;gt;, nargs=&#39;*&#39;)                  # Optional arguments.&#xA;args  = p.parse_args()                                            # Exits on error.&#xA;value = args.&amp;lt;name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;&#39;help=&amp;lt;str&amp;gt;&#39;&lt;/code&gt; to set argument description.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;&#39;default=&amp;lt;el&amp;gt;&#39;&lt;/code&gt; to set the default value.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;&#39;type=FileType(&amp;lt;mode&amp;gt;)&#39;&lt;/code&gt; for files.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Open&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Opens the file and returns a corresponding file object.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;file&amp;gt; = open(&amp;lt;path&amp;gt;, mode=&#39;r&#39;, encoding=None, newline=None)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;encoding=None&#39;&lt;/code&gt; means that the default encoding is used, which is platform dependent. Best practice is to use &lt;code&gt;&#39;encoding=&#34;utf-8&#34;&#39;&lt;/code&gt; whenever possible.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;newline=None&#39;&lt;/code&gt; means all different end of line combinations are converted to &#39;\n&#39; on read, while on write all &#39;\n&#39; characters are converted to system&#39;s default line separator.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;newline=&#34;&#34;&#39;&lt;/code&gt; means no conversions take place, but input is still broken into chunks by readline() and readlines() on every &#39;\n&#39;, &#39;\r&#39; and &#39;\r\n&#39;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Modes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;r&#39;&lt;/code&gt; - Read (default).&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;w&#39;&lt;/code&gt; - Write (truncate).&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;x&#39;&lt;/code&gt; - Write or fail if the file already exists.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;a&#39;&lt;/code&gt; - Append.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;w+&#39;&lt;/code&gt; - Read and write (truncate).&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;r+&#39;&lt;/code&gt; - Read and write from the start.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;a+&#39;&lt;/code&gt; - Read and write from the end.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;t&#39;&lt;/code&gt; - Text mode (default).&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;b&#39;&lt;/code&gt; - Binary mode (&lt;code&gt;&#39;br&#39;&lt;/code&gt;, &lt;code&gt;&#39;bw&#39;&lt;/code&gt;, &lt;code&gt;&#39;bx&#39;&lt;/code&gt;, …).&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Exceptions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;FileNotFoundError&#39;&lt;/code&gt; can be raised when reading with &lt;code&gt;&#39;r&#39;&lt;/code&gt; or &lt;code&gt;&#39;r+&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;FileExistsError&#39;&lt;/code&gt; can be raised when writing with &lt;code&gt;&#39;x&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;IsADirectoryError&#39;&lt;/code&gt; and &lt;code&gt;&#39;PermissionError&#39;&lt;/code&gt; can be raised by any.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;OSError&#39;&lt;/code&gt; is the parent class of all listed exceptions.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;File Object&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;file&amp;gt;.seek(0)                      # Moves to the start of the file.&#xA;&amp;lt;file&amp;gt;.seek(offset)                 # Moves &#39;offset&#39; chars/bytes from the start.&#xA;&amp;lt;file&amp;gt;.seek(0, 2)                   # Moves to the end of the file.&#xA;&amp;lt;bin_file&amp;gt;.seek(±offset, &amp;lt;anchor&amp;gt;)  # Anchor: 0 start, 1 current position, 2 end.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;str/bytes&amp;gt; = &amp;lt;file&amp;gt;.read(size=-1)  # Reads &#39;size&#39; chars/bytes or until EOF.&#xA;&amp;lt;str/bytes&amp;gt; = &amp;lt;file&amp;gt;.readline()     # Returns a line or empty string/bytes on EOF.&#xA;&amp;lt;list&amp;gt;      = &amp;lt;file&amp;gt;.readlines()    # Returns a list of remaining lines.&#xA;&amp;lt;str/bytes&amp;gt; = next(&amp;lt;file&amp;gt;)          # Returns a line using buffer. Do not mix.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;file&amp;gt;.write(&amp;lt;str/bytes&amp;gt;)           # Writes a string or bytes object.&#xA;&amp;lt;file&amp;gt;.writelines(&amp;lt;collection&amp;gt;)     # Writes a coll. of strings or bytes objects.&#xA;&amp;lt;file&amp;gt;.flush()                      # Flushes write buffer. Runs every 4096/8192 B.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Methods do not add or strip trailing newlines, even writelines().&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Read Text from File&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def read_file(filename):&#xA;    with open(filename, encoding=&#39;utf-8&#39;) as file:&#xA;        return file.readlines()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Write Text to File&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def write_to_file(filename, text):&#xA;    with open(filename, &#39;w&#39;, encoding=&#39;utf-8&#39;) as file:&#xA;        file.write(text)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Paths&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from os import getcwd, path, listdir, scandir&#xA;from glob import glob&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;str&amp;gt;  = getcwd()                   # Returns the current working directory.&#xA;&amp;lt;str&amp;gt;  = path.join(&amp;lt;path&amp;gt;, ...)     # Joins two or more pathname components.&#xA;&amp;lt;str&amp;gt;  = path.abspath(&amp;lt;path&amp;gt;)       # Returns absolute path.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;str&amp;gt;  = path.basename(&amp;lt;path&amp;gt;)      # Returns final component of the path.&#xA;&amp;lt;str&amp;gt;  = path.dirname(&amp;lt;path&amp;gt;)       # Returns path without the final component.&#xA;&amp;lt;tup.&amp;gt; = path.splitext(&amp;lt;path&amp;gt;)      # Splits on last period of the final component.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;list&amp;gt; = listdir(path=&#39;.&#39;)          # Returns filenames located at path.&#xA;&amp;lt;list&amp;gt; = glob(&#39;&amp;lt;pattern&amp;gt;&#39;)          # Returns paths matching the wildcard pattern.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;bool&amp;gt; = path.exists(&amp;lt;path&amp;gt;)        # Or: &amp;lt;Path&amp;gt;.exists()&#xA;&amp;lt;bool&amp;gt; = path.isfile(&amp;lt;path&amp;gt;)        # Or: &amp;lt;DirEntry/Path&amp;gt;.is_file()&#xA;&amp;lt;bool&amp;gt; = path.isdir(&amp;lt;path&amp;gt;)         # Or: &amp;lt;DirEntry/Path&amp;gt;.is_dir()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;stat&amp;gt; = os.stat(&amp;lt;path&amp;gt;)            # Or: &amp;lt;DirEntry/Path&amp;gt;.stat()&#xA;&amp;lt;real&amp;gt; = &amp;lt;stat&amp;gt;.st_mtime/st_size/…  # Modification time, size in bytes, …&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;DirEntry&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Unlike listdir(), scandir() returns DirEntry objects that cache isfile, isdir and on Windows also stat information, thus significantly increasing the performance of code that requires it.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;iter&amp;gt; = scandir(path=&#39;.&#39;)          # Returns DirEntry objects located at path.&#xA;&amp;lt;str&amp;gt;  = &amp;lt;DirEntry&amp;gt;.path            # Returns whole path as a string.&#xA;&amp;lt;str&amp;gt;  = &amp;lt;DirEntry&amp;gt;.name            # Returns final component as a string.&#xA;&amp;lt;file&amp;gt; = open(&amp;lt;DirEntry&amp;gt;)           # Opens the file and returns a file object.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Path Object&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pathlib import Path&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Path&amp;gt; = Path(&amp;lt;path&amp;gt; [, ...])       # Accepts strings, Paths and DirEntry objects.&#xA;&amp;lt;Path&amp;gt; = &amp;lt;path&amp;gt; / &amp;lt;path&amp;gt; [/ ...]    # First or second path must be a Path object.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Path&amp;gt; = Path()                     # Returns relative cwd. Also Path(&#39;.&#39;).&#xA;&amp;lt;Path&amp;gt; = Path.cwd()                 # Returns absolute cwd. Also Path().resolve().&#xA;&amp;lt;Path&amp;gt; = Path.home()                # Returns user&#39;s home directory.&#xA;&amp;lt;Path&amp;gt; = Path(__file__).resolve()   # Returns script&#39;s path if cwd wasn&#39;t changed.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Path&amp;gt; = &amp;lt;Path&amp;gt;.parent              # Returns Path without the final component.&#xA;&amp;lt;str&amp;gt;  = &amp;lt;Path&amp;gt;.name                # Returns final component as a string.&#xA;&amp;lt;str&amp;gt;  = &amp;lt;Path&amp;gt;.stem                # Returns final component without extension.&#xA;&amp;lt;str&amp;gt;  = &amp;lt;Path&amp;gt;.suffix              # Returns final component&#39;s extension.&#xA;&amp;lt;tup.&amp;gt; = &amp;lt;Path&amp;gt;.parts               # Returns all components as strings.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;iter&amp;gt; = &amp;lt;Path&amp;gt;.iterdir()           # Returns directory contents as Path objects.&#xA;&amp;lt;iter&amp;gt; = &amp;lt;Path&amp;gt;.glob(&#39;&amp;lt;pattern&amp;gt;&#39;)   # Returns Paths matching the wildcard pattern.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;str&amp;gt;  = str(&amp;lt;Path&amp;gt;)                # Returns path as a string.&#xA;&amp;lt;file&amp;gt; = open(&amp;lt;Path&amp;gt;)               # Opens the file and returns a file object.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;OS Commands&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os, shutil, subprocess&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Files and Directories&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Paths can be either strings, Paths or DirEntry objects.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Functions report OS related errors by raising either OSError or one of its &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#exceptions-1&#34;&gt;subclasses&lt;/a&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;os.chdir(&amp;lt;path&amp;gt;)                 # Changes the current working directory.&#xA;os.mkdir(&amp;lt;path&amp;gt;, mode=0o777)     # Creates a directory. Mode is in octal.&#xA;os.makedirs(&amp;lt;path&amp;gt;, mode=0o777)  # Creates dirs in path. Also: `exist_ok=False`.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;shutil.copy(from, to)            # Copies the file. &#39;to&#39; can exist or be a dir.&#xA;shutil.copytree(from, to)        # Copies the directory. &#39;to&#39; must not exist.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;os.rename(from, to)              # Renames/moves the file or directory.&#xA;os.replace(from, to)             # Same, but overwrites &#39;to&#39; if it exists.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;os.remove(&amp;lt;path&amp;gt;)                # Deletes the file.&#xA;os.rmdir(&amp;lt;path&amp;gt;)                 # Deletes the empty directory.&#xA;shutil.rmtree(&amp;lt;path&amp;gt;)            # Deletes the directory.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Shell Commands&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;pipe&amp;gt; = os.popen(&#39;&amp;lt;command&amp;gt;&#39;)   # Executes command in sh/cmd and returns its stdout pipe.&#xA;&amp;lt;str&amp;gt;  = &amp;lt;pipe&amp;gt;.read(size=-1)    # Reads &#39;size&#39; chars or until EOF. Also readline/s().&#xA;&amp;lt;int&amp;gt;  = &amp;lt;pipe&amp;gt;.close()          # Closes the pipe. Returns None on success, int on error.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Sends &#39;1 + 1&#39; to the basic calculator and captures its output:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; subprocess.run(&#39;bc&#39;, input=&#39;1 + 1\n&#39;, capture_output=True, text=True)&#xA;CompletedProcess(args=&#39;bc&#39;, returncode=0, stdout=&#39;2\n&#39;, stderr=&#39;&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Sends test.in to the basic calculator running in standard mode and saves its output to test.out:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from shlex import split&#xA;&amp;gt;&amp;gt;&amp;gt; os.popen(&#39;echo 1 + 1 &amp;gt; test.in&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; subprocess.run(split(&#39;bc -s&#39;), stdin=open(&#39;test.in&#39;), stdout=open(&#39;test.out&#39;, &#39;w&#39;))&#xA;CompletedProcess(args=[&#39;bc&#39;, &#39;-s&#39;], returncode=0)&#xA;&amp;gt;&amp;gt;&amp;gt; open(&#39;test.out&#39;).read()&#xA;&#39;2\n&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;JSON&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Text file format for storing collections of strings and numbers.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import json&#xA;&amp;lt;str&amp;gt;    = json.dumps(&amp;lt;object&amp;gt;, ensure_ascii=True, indent=None)&#xA;&amp;lt;object&amp;gt; = json.loads(&amp;lt;str&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Read Object from JSON File&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def read_json_file(filename):&#xA;    with open(filename, encoding=&#39;utf-8&#39;) as file:&#xA;        return json.load(file)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Write Object to JSON File&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def write_to_json_file(filename, an_object):&#xA;    with open(filename, &#39;w&#39;, encoding=&#39;utf-8&#39;) as file:&#xA;        json.dump(an_object, file, ensure_ascii=False, indent=2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Pickle&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Binary file format for storing objects.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pickle&#xA;&amp;lt;bytes&amp;gt;  = pickle.dumps(&amp;lt;object&amp;gt;)&#xA;&amp;lt;object&amp;gt; = pickle.loads(&amp;lt;bytes&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Read Object from File&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def read_pickle_file(filename):&#xA;    with open(filename, &#39;rb&#39;) as file:&#xA;        return pickle.load(file)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Write Object to File&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def write_to_pickle_file(filename, an_object):&#xA;    with open(filename, &#39;wb&#39;) as file:&#xA;        pickle.dump(an_object, file)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;CSV&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Text file format for storing spreadsheets.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Read&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;reader&amp;gt; = csv.reader(&amp;lt;file&amp;gt;)       # Also: `dialect=&#39;excel&#39;, delimiter=&#39;,&#39;`.&#xA;&amp;lt;list&amp;gt;   = next(&amp;lt;reader&amp;gt;)           # Returns next row as a list of strings.&#xA;&amp;lt;list&amp;gt;   = list(&amp;lt;reader&amp;gt;)           # Returns a list of remaining rows.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;For XML and binary Excel files (xlsx, xlsm and xlsb) use &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#dataframe-plot-encode-decode&#34;&gt;Pandas&lt;/a&gt; library.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;File must be opened with a &lt;code&gt;&#39;newline=&#34;&#34;&#39;&lt;/code&gt; argument, or newlines embedded inside quoted fields will not be interpreted correctly!&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Write&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;writer&amp;gt; = csv.writer(&amp;lt;file&amp;gt;)       # Also: `dialect=&#39;excel&#39;, delimiter=&#39;,&#39;`.&#xA;&amp;lt;writer&amp;gt;.writerow(&amp;lt;collection&amp;gt;)     # Encodes objects using `str(&amp;lt;el&amp;gt;)`.&#xA;&amp;lt;writer&amp;gt;.writerows(&amp;lt;coll_of_coll&amp;gt;)  # Appends multiple rows.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;File must be opened with a &lt;code&gt;&#39;newline=&#34;&#34;&#39;&lt;/code&gt; argument, or &#39;\r&#39; will be added in front of every &#39;\n&#39; on platforms that use &#39;\r\n&#39; line endings!&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Parameters&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;dialect&#39;&lt;/code&gt; - Master parameter that sets the default values. String or a dialect object.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;delimiter&#39;&lt;/code&gt; - A one-character string used to separate fields.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;quotechar&#39;&lt;/code&gt; - Character for quoting fields that contain special characters.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;doublequote&#39;&lt;/code&gt; - Whether quotechars inside fields are/get doubled or escaped.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;skipinitialspace&#39;&lt;/code&gt; - Whether whitespace after delimiter gets stripped by reader.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;lineterminator&#39;&lt;/code&gt; - How writer terminates rows. Reader is hardcoded to &#39;\r&#39;, &#39;\n&#39;, &#39;\r\n&#39;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;quoting&#39;&lt;/code&gt; - Controls the amount of quoting: 0 - as necessary, 1 - all.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;escapechar&#39;&lt;/code&gt; - Character for escaping quotechars if doublequote is False.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Dialects&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+------------------+--------------+--------------+--------------+&#xA;|                  |     excel    |   excel-tab  |     unix     |&#xA;+------------------+--------------+--------------+--------------+&#xA;| delimiter        |       &#39;,&#39;    |      &#39;\t&#39;    |       &#39;,&#39;    |&#xA;| quotechar        |       &#39;&#34;&#39;    |       &#39;&#34;&#39;    |       &#39;&#34;&#39;    |&#xA;| doublequote      |      True    |      True    |      True    |&#xA;| skipinitialspace |     False    |     False    |     False    |&#xA;| lineterminator   |    &#39;\r\n&#39;    |    &#39;\r\n&#39;    |      &#39;\n&#39;    |&#xA;| quoting          |         0    |         0    |         1    |&#xA;| escapechar       |      None    |      None    |      None    |&#xA;+------------------+--------------+--------------+--------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Read Rows from CSV File&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def read_csv_file(filename, dialect=&#39;excel&#39;):&#xA;    with open(filename, encoding=&#39;utf-8&#39;, newline=&#39;&#39;) as file:&#xA;        return list(csv.reader(file, dialect))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Write Rows to CSV File&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def write_to_csv_file(filename, rows, dialect=&#39;excel&#39;):&#xA;    with open(filename, &#39;w&#39;, encoding=&#39;utf-8&#39;, newline=&#39;&#39;) as file:&#xA;        writer = csv.writer(file, dialect)&#xA;        writer.writerows(rows)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;SQLite&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Server-less database engine that stores each database into a separate file.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Connect&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Opens a connection to the database file. Creates a new file if path doesn&#39;t exist.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3&#xA;&amp;lt;conn&amp;gt; = sqlite3.connect(&amp;lt;path&amp;gt;)                # Also &#39;:memory:&#39;.&#xA;&amp;lt;conn&amp;gt;.close()                                  # Closes the connection.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Read&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Returned values can be of type str, int, float, bytes or None.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;cursor&amp;gt; = &amp;lt;conn&amp;gt;.execute(&#39;&amp;lt;query&amp;gt;&#39;)            # Can raise a subclass of sqlite3.Error.&#xA;&amp;lt;tuple&amp;gt;  = &amp;lt;cursor&amp;gt;.fetchone()                  # Returns next row. Also next(&amp;lt;cursor&amp;gt;).&#xA;&amp;lt;list&amp;gt;   = &amp;lt;cursor&amp;gt;.fetchall()                  # Returns remaining rows. Also list(&amp;lt;cursor&amp;gt;).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Write&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;conn&amp;gt;.execute(&#39;&amp;lt;query&amp;gt;&#39;)                       # Can raise a subclass of sqlite3.Error.&#xA;&amp;lt;conn&amp;gt;.commit()                                 # Saves all changes since the last commit.&#xA;&amp;lt;conn&amp;gt;.rollback()                               # Discards all changes since the last commit.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Or:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with &amp;lt;conn&amp;gt;:                                    # Exits the block with commit() or rollback(),&#xA;    &amp;lt;conn&amp;gt;.execute(&#39;&amp;lt;query&amp;gt;&#39;)                   # depending on whether any exception occurred.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Placeholders&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Passed values can be of type str, int, float, bytes, None, bool, datetime.date or datetime.datetime.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bools will be stored and returned as ints and dates as &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#encode&#34;&gt;ISO formatted strings&lt;/a&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;conn&amp;gt;.execute(&#39;&amp;lt;query&amp;gt;&#39;, &amp;lt;list/tuple&amp;gt;)         # Replaces &#39;?&#39;s in query with values.&#xA;&amp;lt;conn&amp;gt;.execute(&#39;&amp;lt;query&amp;gt;&#39;, &amp;lt;dict/namedtuple&amp;gt;)    # Replaces &#39;:&amp;lt;key&amp;gt;&#39;s with values.&#xA;&amp;lt;conn&amp;gt;.executemany(&#39;&amp;lt;query&amp;gt;&#39;, &amp;lt;coll_of_above&amp;gt;)  # Runs execute() multiple times.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Values are not actually saved in this example because &lt;code&gt;&#39;conn.commit()&#39;&lt;/code&gt; is omitted!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; conn = sqlite3.connect(&#39;test.db&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; conn.execute(&#39;CREATE TABLE person (person_id INTEGER PRIMARY KEY, name, height)&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; conn.execute(&#39;INSERT INTO person VALUES (NULL, ?, ?)&#39;, (&#39;Jean-Luc&#39;, 187)).lastrowid&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; conn.execute(&#39;SELECT * FROM person&#39;).fetchall()&#xA;[(1, &#39;Jean-Luc&#39;, 187)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MySQL&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Has a very similar interface, with differences listed below.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install mysql-connector&#xA;from mysql import connector&#xA;&amp;lt;conn&amp;gt;   = connector.connect(host=&amp;lt;str&amp;gt;, …)     # `user=&amp;lt;str&amp;gt;, password=&amp;lt;str&amp;gt;, database=&amp;lt;str&amp;gt;`.&#xA;&amp;lt;cursor&amp;gt; = &amp;lt;conn&amp;gt;.cursor()                      # Only cursor has execute() method.&#xA;&amp;lt;cursor&amp;gt;.execute(&#39;&amp;lt;query&amp;gt;&#39;)                     # Can raise a subclass of connector.Error.&#xA;&amp;lt;cursor&amp;gt;.execute(&#39;&amp;lt;query&amp;gt;&#39;, &amp;lt;list/tuple&amp;gt;)       # Replaces &#39;%s&#39;s in query with values.&#xA;&amp;lt;cursor&amp;gt;.execute(&#39;&amp;lt;query&amp;gt;&#39;, &amp;lt;dict/namedtuple&amp;gt;)  # Replaces &#39;%(&amp;lt;key&amp;gt;)s&#39;s with values.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bytes&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bytes object is an immutable sequence of single bytes. Mutable version is called bytearray.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;bytes&amp;gt; = b&#39;&amp;lt;str&amp;gt;&#39;                       # Only accepts ASCII characters and \x00-\xff.&#xA;&amp;lt;int&amp;gt;   = &amp;lt;bytes&amp;gt;[&amp;lt;index&amp;gt;]               # Returns an int in range from 0 to 255.&#xA;&amp;lt;bytes&amp;gt; = &amp;lt;bytes&amp;gt;[&amp;lt;slice&amp;gt;]               # Returns bytes even if it has only one element.&#xA;&amp;lt;bytes&amp;gt; = &amp;lt;bytes&amp;gt;.join(&amp;lt;coll_of_bytes&amp;gt;)  # Joins elements using bytes as a separator.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Encode&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;bytes&amp;gt; = bytes(&amp;lt;coll_of_ints&amp;gt;)          # Ints must be in range from 0 to 255.&#xA;&amp;lt;bytes&amp;gt; = bytes(&amp;lt;str&amp;gt;, &#39;utf-8&#39;)          # Or: &amp;lt;str&amp;gt;.encode(&#39;utf-8&#39;)&#xA;&amp;lt;bytes&amp;gt; = &amp;lt;int&amp;gt;.to_bytes(n_bytes, …)     # `byteorder=&#39;big/little&#39;, signed=False`.&#xA;&amp;lt;bytes&amp;gt; = bytes.fromhex(&#39;&amp;lt;hex&amp;gt;&#39;)         # Hex pairs can be separated by whitespaces.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Decode&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;list&amp;gt;  = list(&amp;lt;bytes&amp;gt;)                  # Returns ints in range from 0 to 255.&#xA;&amp;lt;str&amp;gt;   = str(&amp;lt;bytes&amp;gt;, &#39;utf-8&#39;)          # Or: &amp;lt;bytes&amp;gt;.decode(&#39;utf-8&#39;)&#xA;&amp;lt;int&amp;gt;   = int.from_bytes(&amp;lt;bytes&amp;gt;, …)     # `byteorder=&#39;big/little&#39;, signed=False`.&#xA;&#39;&amp;lt;hex&amp;gt;&#39; = &amp;lt;bytes&amp;gt;.hex()                  # Returns hex pairs. Accepts `sep=&amp;lt;str&amp;gt;`.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Read Bytes from File&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def read_bytes(filename):&#xA;    with open(filename, &#39;rb&#39;) as file:&#xA;        return file.read()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Write Bytes to File&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def write_bytes(filename, bytes_obj):&#xA;    with open(filename, &#39;wb&#39;) as file:&#xA;        file.write(bytes_obj)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Struct&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Module that performs conversions between a sequence of numbers and a bytes object.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;System’s type sizes and byte order are used by default.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from struct import pack, unpack, iter_unpack&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;bytes&amp;gt;  = pack(&#39;&amp;lt;format&amp;gt;&#39;, &amp;lt;num_1&amp;gt; [, &amp;lt;num_2&amp;gt;, ...])&#xA;&amp;lt;tuple&amp;gt;  = unpack(&#39;&amp;lt;format&amp;gt;&#39;, &amp;lt;bytes&amp;gt;)&#xA;&amp;lt;tuples&amp;gt; = iter_unpack(&#39;&amp;lt;format&amp;gt;&#39;, &amp;lt;bytes&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; pack(&#39;&amp;gt;hhl&#39;, 1, 2, 3)&#xA;b&#39;\x00\x01\x00\x02\x00\x00\x00\x03&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; unpack(&#39;&amp;gt;hhl&#39;, b&#39;\x00\x01\x00\x02\x00\x00\x00\x03&#39;)&#xA;(1, 2, 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Format&lt;/h3&gt; &#xA;&lt;h4&gt;For standard type sizes start format string with:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;=&#39;&lt;/code&gt; - system&#39;s byte order (usually little-endian)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;&amp;lt;&#39;&lt;/code&gt; - little-endian&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;&amp;gt;&#39;&lt;/code&gt; - big-endian (also &lt;code&gt;&#39;!&#39;&lt;/code&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Integer types. Use a capital letter for unsigned type. Minimum and standard sizes are in brackets:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;x&#39;&lt;/code&gt; - pad byte&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;b&#39;&lt;/code&gt; - char (1/1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;h&#39;&lt;/code&gt; - short (2/2)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;i&#39;&lt;/code&gt; - int (2/4)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;l&#39;&lt;/code&gt; - long (4/4)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;q&#39;&lt;/code&gt; - long long (8/8)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Floating point types:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;f&#39;&lt;/code&gt; - float (4/4)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;d&#39;&lt;/code&gt; - double (8/8)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Array&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;List that can only hold numbers of a predefined type. Available types and their minimum sizes in bytes are listed above. Sizes and byte order are always determined by the system.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from array import array&#xA;&amp;lt;array&amp;gt; = array(&#39;&amp;lt;typecode&amp;gt;&#39;, &amp;lt;collection&amp;gt;)    # Array from collection of numbers.&#xA;&amp;lt;array&amp;gt; = array(&#39;&amp;lt;typecode&amp;gt;&#39;, &amp;lt;bytes&amp;gt;)         # Array from bytes object.&#xA;&amp;lt;array&amp;gt; = array(&#39;&amp;lt;typecode&amp;gt;&#39;, &amp;lt;array&amp;gt;)         # Treats array as a sequence of numbers.&#xA;&amp;lt;bytes&amp;gt; = bytes(&amp;lt;array&amp;gt;)                       # Or: &amp;lt;array&amp;gt;.tobytes()&#xA;&amp;lt;file&amp;gt;.write(&amp;lt;array&amp;gt;)                          # Writes array to the binary file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Memory View&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;A sequence object that points to the memory of another object.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Each element can reference a single or multiple consecutive bytes, depending on format.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Order and number of elements can be changed with slicing.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Casting only works between char and other types and uses system&#39;s sizes and byte order.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;mview&amp;gt; = memoryview(&amp;lt;bytes/bytearray/array&amp;gt;)  # Immutable if bytes, else mutable.&#xA;&amp;lt;real&amp;gt;  = &amp;lt;mview&amp;gt;[&amp;lt;index&amp;gt;]                     # Returns an int or a float.&#xA;&amp;lt;mview&amp;gt; = &amp;lt;mview&amp;gt;[&amp;lt;slice&amp;gt;]                     # Mview with rearranged elements.&#xA;&amp;lt;mview&amp;gt; = &amp;lt;mview&amp;gt;.cast(&#39;&amp;lt;typecode&amp;gt;&#39;)           # Casts memoryview to the new format.&#xA;&amp;lt;mview&amp;gt;.release()                              # Releases the object&#39;s memory buffer.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Decode&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;bytes&amp;gt; = bytes(&amp;lt;mview&amp;gt;)                       # Creates a new bytes object.&#xA;&amp;lt;bytes&amp;gt; = &amp;lt;bytes&amp;gt;.join(&amp;lt;coll_of_mviews&amp;gt;)       # Joins mviews using bytes object as sep.&#xA;&amp;lt;array&amp;gt; = array(&#39;&amp;lt;typecode&amp;gt;&#39;, &amp;lt;mview&amp;gt;)         # Treats mview as a sequence of numbers.&#xA;&amp;lt;file&amp;gt;.write(&amp;lt;mview&amp;gt;)                          # Writes mview to the binary file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;list&amp;gt;  = list(&amp;lt;mview&amp;gt;)                        # Returns a list of ints or floats.&#xA;&amp;lt;str&amp;gt;   = str(&amp;lt;mview&amp;gt;, &#39;utf-8&#39;)                # Treats mview as a bytes object.&#xA;&amp;lt;int&amp;gt;   = int.from_bytes(&amp;lt;mview&amp;gt;, …)           # `byteorder=&#39;big/little&#39;, signed=False`.&#xA;&#39;&amp;lt;hex&amp;gt;&#39; = &amp;lt;mview&amp;gt;.hex()                        # Treats mview as a bytes object.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Deque&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;A thread-safe list with efficient appends and pops from either side. Pronounced &#34;deck&#34;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from collections import deque&#xA;&amp;lt;deque&amp;gt; = deque(&amp;lt;collection&amp;gt;, maxlen=None)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;deque&amp;gt;.appendleft(&amp;lt;el&amp;gt;)                       # Opposite element is dropped if full.&#xA;&amp;lt;deque&amp;gt;.extendleft(&amp;lt;collection&amp;gt;)               # Collection gets reversed.&#xA;&amp;lt;el&amp;gt; = &amp;lt;deque&amp;gt;.popleft()                       # Raises IndexError if empty.&#xA;&amp;lt;deque&amp;gt;.rotate(n=1)                            # Rotates elements to the right.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Threading&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;CPython interpreter can only run a single thread at a time.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;That is why using multiple threads won&#39;t result in a faster execution, unless at least one of the threads contains an I/O operation.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from threading import Thread, RLock, Semaphore, Event, Barrier&#xA;from concurrent.futures import ThreadPoolExecutor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Thread&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Thread&amp;gt; = Thread(target=&amp;lt;function&amp;gt;)           # Use `args=&amp;lt;collection&amp;gt;` to set the arguments.&#xA;&amp;lt;Thread&amp;gt;.start()                               # Starts the thread.&#xA;&amp;lt;bool&amp;gt; = &amp;lt;Thread&amp;gt;.is_alive()                   # Checks if the thread has finished executing.&#xA;&amp;lt;Thread&amp;gt;.join()                                # Waits for the thread to finish.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;&#39;kwargs=&amp;lt;dict&amp;gt;&#39;&lt;/code&gt; to pass keyword arguments to the function.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;&#39;daemon=True&#39;&lt;/code&gt;, or the program will not be able to exit while the thread is alive.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Lock&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;lock&amp;gt; = RLock()                               # Lock that can only be released by the owner.&#xA;&amp;lt;lock&amp;gt;.acquire()                               # Waits for the lock to be available.&#xA;&amp;lt;lock&amp;gt;.release()                               # Makes the lock available again.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Or:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with &amp;lt;lock&amp;gt;:                                   # Enters the block by calling acquire(),&#xA;    ...                                        # and exits it with release().&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Semaphore, Event, Barrier&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Semaphore&amp;gt; = Semaphore(value=1)               # Lock that can be acquired by &#39;value&#39; threads.&#xA;&amp;lt;Event&amp;gt;     = Event()                          # Method wait() blocks until set() is called.&#xA;&amp;lt;Barrier&amp;gt;   = Barrier(n_times)                 # Wait() blocks until it&#39;s called n_times.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Thread Pool Executor&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Object that manages thread execution.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;An object with the same interface called ProcessPoolExecutor provides true parallelism by running a separate interpreter in each process. All arguments must be &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#pickle&#34;&gt;pickable&lt;/a&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Exec&amp;gt; = ThreadPoolExecutor(max_workers=None)  # Or: `with ThreadPoolExecutor() as &amp;lt;name&amp;gt;: …`&#xA;&amp;lt;Exec&amp;gt;.shutdown(wait=True)                     # Blocks until all threads finish executing.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;iter&amp;gt; = &amp;lt;Exec&amp;gt;.map(&amp;lt;func&amp;gt;, &amp;lt;args_1&amp;gt;, ...)     # A multithreaded and non-lazy map().&#xA;&amp;lt;Futr&amp;gt; = &amp;lt;Exec&amp;gt;.submit(&amp;lt;func&amp;gt;, &amp;lt;arg_1&amp;gt;, ...)   # Starts a thread and returns its Future object.&#xA;&amp;lt;bool&amp;gt; = &amp;lt;Futr&amp;gt;.done()                         # Checks if the thread has finished executing.&#xA;&amp;lt;obj&amp;gt;  = &amp;lt;Futr&amp;gt;.result()                       # Waits for thread to finish and returns result.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Queue&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;A thread-safe FIFO queue. For LIFO queue use LifoQueue.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from queue import Queue&#xA;&amp;lt;Queue&amp;gt; = Queue(maxsize=0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Queue&amp;gt;.put(&amp;lt;el&amp;gt;)                              # Blocks until queue stops being full.&#xA;&amp;lt;Queue&amp;gt;.put_nowait(&amp;lt;el&amp;gt;)                       # Raises queue.Full exception if full.&#xA;&amp;lt;el&amp;gt; = &amp;lt;Queue&amp;gt;.get()                           # Blocks until queue stops being empty.&#xA;&amp;lt;el&amp;gt; = &amp;lt;Queue&amp;gt;.get_nowait()                    # Raises queue.Empty exception if empty.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Operator&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Module of functions that provide the functionality of operators.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import operator as op&#xA;&amp;lt;el&amp;gt;      = op.add/sub/mul/truediv/floordiv/mod(&amp;lt;el&amp;gt;, &amp;lt;el&amp;gt;)  # +, -, *, /, //, %&#xA;&amp;lt;int/set&amp;gt; = op.and_/or_/xor(&amp;lt;int/set&amp;gt;, &amp;lt;int/set&amp;gt;)            # &amp;amp;, |, ^&#xA;&amp;lt;bool&amp;gt;    = op.eq/ne/lt/le/gt/ge(&amp;lt;sortable&amp;gt;, &amp;lt;sortable&amp;gt;)     # ==, !=, &amp;lt;, &amp;lt;=, &amp;gt;, &amp;gt;=&#xA;&amp;lt;func&amp;gt;    = op.itemgetter/attrgetter/methodcaller(&amp;lt;obj&amp;gt;)     # [index/key], .name, .name()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;elementwise_sum  = map(op.add, list_a, list_b)&#xA;sorted_by_second = sorted(&amp;lt;collection&amp;gt;, key=op.itemgetter(1))&#xA;sorted_by_both   = sorted(&amp;lt;collection&amp;gt;, key=op.itemgetter(1, 0))&#xA;product_of_elems = functools.reduce(op.mul, &amp;lt;collection&amp;gt;)&#xA;union_of_sets    = functools.reduce(op.or_, &amp;lt;coll_of_sets&amp;gt;)&#xA;first_element    = op.methodcaller(&#39;pop&#39;, 0)(&amp;lt;list&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Binary operators require objects to have and(), or(), xor() and invert() special methods, unlike logical operators that work on all types of objects.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Also: &lt;code&gt;&#39;&amp;lt;bool&amp;gt; = &amp;lt;bool&amp;gt; &amp;amp;|^ &amp;lt;bool&amp;gt;&#39;&lt;/code&gt; and &lt;code&gt;&#39;&amp;lt;int&amp;gt; = &amp;lt;bool&amp;gt; &amp;amp;|^ &amp;lt;int&amp;gt;&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introspection&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Inspecting code at runtime.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Variables&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;list&amp;gt; = dir()                             # Names of local variables (incl. functions).&#xA;&amp;lt;dict&amp;gt; = vars()                            # Dict of local variables. Also locals().&#xA;&amp;lt;dict&amp;gt; = globals()                         # Dict of global variables.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Attributes&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;list&amp;gt; = dir(&amp;lt;object&amp;gt;)                     # Names of object&#39;s attributes (incl. methods).&#xA;&amp;lt;dict&amp;gt; = vars(&amp;lt;object&amp;gt;)                    # Dict of writable attributes. Also &amp;lt;obj&amp;gt;.__dict__.&#xA;&amp;lt;bool&amp;gt; = hasattr(&amp;lt;object&amp;gt;, &#39;&amp;lt;attr_name&amp;gt;&#39;)  # Checks if getattr() raises an AttributeError.&#xA;value  = getattr(&amp;lt;object&amp;gt;, &#39;&amp;lt;attr_name&amp;gt;&#39;)  # Raises AttributeError if attribute is missing.&#xA;setattr(&amp;lt;object&amp;gt;, &#39;&amp;lt;attr_name&amp;gt;&#39;, value)    # Only works on objects with &#39;__dict__&#39; attribute.&#xA;delattr(&amp;lt;object&amp;gt;, &#39;&amp;lt;attr_name&amp;gt;&#39;)           # Same. Also `del &amp;lt;object&amp;gt;.&amp;lt;attr_name&amp;gt;`.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Parameters&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from inspect import signature&#xA;&amp;lt;Sig&amp;gt;  = signature(&amp;lt;function&amp;gt;)             # Function&#39;s Signature object.&#xA;&amp;lt;dict&amp;gt; = &amp;lt;Sig&amp;gt;.parameters                  # Dict of function&#39;s Parameter objects.&#xA;&amp;lt;str&amp;gt;  = &amp;lt;Param&amp;gt;.name                      # Parameter&#39;s name.&#xA;&amp;lt;memb&amp;gt; = &amp;lt;Param&amp;gt;.kind                      # Member of ParameterKind enum.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Metaprogramming&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Code that generates code.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Type&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Type is the root class. If only passed an object it returns its type (class). Otherwise it creates a new class.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;class&amp;gt; = type(&#39;&amp;lt;class_name&amp;gt;&#39;, &amp;lt;tuple_of_parents&amp;gt;, &amp;lt;dict_of_class_attributes&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; Z = type(&#39;Z&#39;, (), {&#39;a&#39;: &#39;abcde&#39;, &#39;b&#39;: 12345})&#xA;&amp;gt;&amp;gt;&amp;gt; z = Z()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Meta Class&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;A class that creates classes.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def my_meta_class(name, parents, attrs):&#xA;    attrs[&#39;a&#39;] = &#39;abcde&#39;&#xA;    return type(name, parents, attrs)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Or:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class MyMetaClass(type):&#xA;    def __new__(cls, name, parents, attrs):&#xA;        attrs[&#39;a&#39;] = &#39;abcde&#39;&#xA;        return type.__new__(cls, name, parents, attrs)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;New() is a class method that gets called before init(). If it returns an instance of its class, then that instance gets passed to init() as a &#39;self&#39; argument.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;It receives the same arguments as init(), except for the first one that specifies the desired type of the returned instance (MyMetaClass in our case).&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Like in our case, new() can also be called directly, usually from a new() method of a child class (&lt;/strong&gt;&lt;code&gt;def __new__(cls): return super().__new__(cls)&lt;/code&gt;&lt;strong&gt;).&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The only difference between the examples above is that my_meta_class() returns a class of type type, while MyMetaClass() returns a class of type MyMetaClass.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Metaclass Attribute&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Right before a class is created it checks if it has the &#39;metaclass&#39; attribute defined. If not, it recursively checks if any of his parents has it defined and eventually comes to type().&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class MyClass(metaclass=MyMetaClass):&#xA;    b = 12345&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; MyClass.a, MyClass.b&#xA;(&#39;abcde&#39;, 12345)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Type Diagram&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(MyClass)     == MyMetaClass     # MyClass is an instance of MyMetaClass.&#xA;type(MyMetaClass) == type            # MyMetaClass is an instance of type.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+-------------+-------------+&#xA;|   Classes   | Metaclasses |&#xA;+-------------+-------------|&#xA;|   MyClass --&amp;gt; MyMetaClass |&#xA;|             |     v       |&#xA;|    object -----&amp;gt; type &amp;lt;+  |&#xA;|             |     ^ +--+  |&#xA;|     str ----------+       |&#xA;+-------------+-------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Inheritance Diagram&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;MyClass.__base__     == object       # MyClass is a subclass of object.&#xA;MyMetaClass.__base__ == type         # MyMetaClass is a subclass of type.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+-------------+-------------+&#xA;|   Classes   | Metaclasses |&#xA;+-------------+-------------|&#xA;|   MyClass   | MyMetaClass |&#xA;|      v      |     v       |&#xA;|    object &amp;lt;----- type     |&#xA;|      ^      |             |&#xA;|     str     |             |&#xA;+-------------+-------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Eval&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from ast import literal_eval&#xA;&amp;gt;&amp;gt;&amp;gt; literal_eval(&#39;[1, 2, 3]&#39;)&#xA;[1, 2, 3]&#xA;&amp;gt;&amp;gt;&amp;gt; literal_eval(&#39;1 + 2&#39;)&#xA;ValueError: malformed node or string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Coroutines&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Coroutines have a lot in common with threads, but unlike threads, they only give up control when they call another coroutine and they don’t use as much memory.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Coroutine definition starts with &lt;code&gt;&#39;async&#39;&lt;/code&gt; and its call with &lt;code&gt;&#39;await&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;asyncio.run(&amp;lt;coroutine&amp;gt;)&#39;&lt;/code&gt; is the main entry point for asynchronous programs.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Functions wait(), gather() and as_completed() can be used when multiple coroutines need to be started at the same time.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Asyncio module also provides its own &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#queue&#34;&gt;Queue&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#semaphore-event-barrier&#34;&gt;Event&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#lock&#34;&gt;Lock&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#semaphore-event-barrier&#34;&gt;Semaphore&lt;/a&gt; classes.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Runs a terminal game where you control an asterisk that must avoid numbers:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import asyncio, collections, curses, curses.textpad, enum, random&#xA;&#xA;P = collections.namedtuple(&#39;P&#39;, &#39;x y&#39;)         # Position&#xA;D = enum.Enum(&#39;D&#39;, &#39;n e s w&#39;)                  # Direction&#xA;W, H = 15, 7                                   # Width, Height&#xA;&#xA;def main(screen):&#xA;    curses.curs_set(0)                         # Makes cursor invisible.&#xA;    screen.nodelay(True)                       # Makes getch() non-blocking.&#xA;    asyncio.run(main_coroutine(screen))        # Starts running asyncio code.&#xA;&#xA;async def main_coroutine(screen):&#xA;    state = {&#39;*&#39;: P(0, 0), **{id_: P(W//2, H//2) for id_ in range(10)}}&#xA;    moves = asyncio.Queue()&#xA;    coros = (*(random_controller(id_, moves) for id_ in range(10)),&#xA;             human_controller(screen, moves), model(moves, state), view(state, screen))&#xA;    await asyncio.wait(coros, return_when=asyncio.FIRST_COMPLETED)&#xA;&#xA;async def random_controller(id_, moves):&#xA;    while True:&#xA;        d = random.choice(list(D))&#xA;        moves.put_nowait((id_, d))&#xA;        await asyncio.sleep(random.triangular(0.01, 0.65))&#xA;&#xA;async def human_controller(screen, moves):&#xA;    while True:&#xA;        ch = screen.getch()&#xA;        key_mappings = {258: D.s, 259: D.n, 260: D.w, 261: D.e}&#xA;        if ch in key_mappings:&#xA;            moves.put_nowait((&#39;*&#39;, key_mappings[ch]))&#xA;        await asyncio.sleep(0.005)&#xA;&#xA;async def model(moves, state):&#xA;    while state[&#39;*&#39;] not in (state[id_] for id_ in range(10)):&#xA;        id_, d = await moves.get()&#xA;        x, y   = state[id_]&#xA;        deltas = {D.n: P(0, -1), D.e: P(1, 0), D.s: P(0, 1), D.w: P(-1, 0)}&#xA;        state[id_] = P((x + deltas[d].x) % W, (y + deltas[d].y) % H)&#xA;&#xA;async def view(state, screen):&#xA;    offset = P(curses.COLS//2 - W//2, curses.LINES//2 - H//2)&#xA;    while True:&#xA;        screen.erase()&#xA;        curses.textpad.rectangle(screen, offset.y-1, offset.x-1, offset.y+H, offset.x+W)&#xA;        for id_, p in state.items():&#xA;            screen.addstr(offset.y + (p.y - state[&#39;*&#39;].y + H//2) % H,&#xA;                          offset.x + (p.x - state[&#39;*&#39;].x + W//2) % W, str(id_))&#xA;        await asyncio.sleep(0.005)&#xA;&#xA;if __name__ == &#39;__main__&#39;:&#xA;    curses.wrapper(main)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;Libraries&lt;/h1&gt; &#xA;&lt;h2&gt;Progress Bar&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install tqdm&#xA;&amp;gt;&amp;gt;&amp;gt; from tqdm import tqdm&#xA;&amp;gt;&amp;gt;&amp;gt; from time import sleep&#xA;&amp;gt;&amp;gt;&amp;gt; for el in tqdm([1, 2, 3], desc=&#39;Processing&#39;):&#xA;...     sleep(1)&#xA;Processing: 100%|████████████████████| 3/3 [00:03&amp;lt;00:00,  1.00s/it]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Plot&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install matplotlib&#xA;import matplotlib.pyplot as plt&#xA;plt.plot(&amp;lt;x_data&amp;gt;, &amp;lt;y_data&amp;gt; [, label=&amp;lt;str&amp;gt;])   # Or: plt.plot(&amp;lt;y_data&amp;gt;)&#xA;plt.legend()                                   # Adds a legend.&#xA;plt.savefig(&amp;lt;path&amp;gt;)                            # Saves the figure.&#xA;plt.show()                                     # Displays the figure.&#xA;plt.clf()                                      # Clears the figure.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Table&lt;/h2&gt; &#xA;&lt;h4&gt;Prints a CSV file as an ASCII table:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install tabulate&#xA;import csv, tabulate&#xA;with open(&#39;test.csv&#39;, encoding=&#39;utf-8&#39;, newline=&#39;&#39;) as file:&#xA;    rows   = csv.reader(file)&#xA;    header = [a.title() for a in next(rows)]&#xA;    table  = tabulate.tabulate(rows, header)&#xA;print(table)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Curses&lt;/h2&gt; &#xA;&lt;h4&gt;Runs a basic file explorer in the terminal:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from curses import wrapper, ascii, A_REVERSE, KEY_DOWN, KEY_UP, KEY_LEFT, KEY_RIGHT, KEY_ENTER&#xA;from os import listdir, path, chdir&#xA;&#xA;def main(screen):&#xA;    ch, first, selected, paths = 0, 0, 0, listdir()&#xA;    while ch != ascii.ESC:&#xA;        height, _ = screen.getmaxyx()&#xA;        screen.erase()&#xA;        for y, filename in enumerate(paths[first : first+height]):&#xA;            screen.addstr(y, 0, filename, A_REVERSE * (selected == first + y))&#xA;        ch = screen.getch()&#xA;        selected += (ch == KEY_DOWN) - (ch == KEY_UP)&#xA;        selected = max(0, min(len(paths)-1, selected))&#xA;        first += (first &amp;lt;= selected - height) - (first &amp;gt; selected)&#xA;        if ch in [KEY_LEFT, KEY_RIGHT, KEY_ENTER, 10, 13]:&#xA;            new_dir = &#39;..&#39; if ch == KEY_LEFT else paths[selected]&#xA;            if path.isdir(new_dir):&#xA;                chdir(new_dir)&#xA;                first, selected, paths = 0, 0, listdir()&#xA;&#xA;if __name__ == &#39;__main__&#39;:&#xA;    wrapper(main)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install loguru&#xA;from loguru import logger&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;logger.add(&#39;debug_{time}.log&#39;, colorize=True)  # Connects a log file.&#xA;logger.add(&#39;error_{time}.log&#39;, level=&#39;ERROR&#39;)  # Another file for errors or higher.&#xA;logger.&amp;lt;level&amp;gt;(&#39;A logging message.&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Levels: &lt;code&gt;&#39;debug&#39;&lt;/code&gt;, &lt;code&gt;&#39;info&#39;&lt;/code&gt;, &lt;code&gt;&#39;success&#39;&lt;/code&gt;, &lt;code&gt;&#39;warning&#39;&lt;/code&gt;, &lt;code&gt;&#39;error&#39;&lt;/code&gt;, &lt;code&gt;&#39;critical&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Exceptions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Exception description, stack trace and values of variables are appended automatically.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try:&#xA;    ...&#xA;except &amp;lt;exception&amp;gt;:&#xA;    logger.exception(&#39;An error happened.&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rotation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Argument that sets a condition when a new log file is created.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;rotation=&amp;lt;int&amp;gt;|&amp;lt;datetime.timedelta&amp;gt;|&amp;lt;datetime.time&amp;gt;|&amp;lt;str&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;&amp;lt;int&amp;gt;&#39;&lt;/code&gt; - Max file size in bytes.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;&amp;lt;timedelta&amp;gt;&#39;&lt;/code&gt; - Max age of a file.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;&amp;lt;time&amp;gt;&#39;&lt;/code&gt; - Time of day.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;&amp;lt;str&amp;gt;&#39;&lt;/code&gt; - Any of above as a string: &lt;code&gt;&#39;100 MB&#39;&lt;/code&gt;, &lt;code&gt;&#39;1 month&#39;&lt;/code&gt;, &lt;code&gt;&#39;monday at 12:00&#39;&lt;/code&gt;, ...&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Retention&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sets a condition which old log files get deleted.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;retention=&amp;lt;int&amp;gt;|&amp;lt;datetime.timedelta&amp;gt;|&amp;lt;str&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;&amp;lt;int&amp;gt;&#39;&lt;/code&gt; - Max number of files.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;&amp;lt;timedelta&amp;gt;&#39;&lt;/code&gt; - Max age of a file.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;&amp;lt;str&amp;gt;&#39;&lt;/code&gt; - Max age as a string: &lt;code&gt;&#39;1 week, 3 days&#39;&lt;/code&gt;, &lt;code&gt;&#39;2 months&#39;&lt;/code&gt;, ...&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Scraping&lt;/h2&gt; &#xA;&lt;h4&gt;Scrapes Python&#39;s URL, version number and logo from its Wikipedia page:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install requests beautifulsoup4&#xA;import requests, bs4, os, sys&#xA;&#xA;WIKI_URL = &#39;https://en.wikipedia.org/wiki/Python_(programming_language)&#39;&#xA;try:&#xA;    html       = requests.get(WIKI_URL).text&#xA;    document   = bs4.BeautifulSoup(html, &#39;html.parser&#39;)&#xA;    table      = document.find(&#39;table&#39;, class_=&#39;infobox vevent&#39;)&#xA;    python_url = table.find(&#39;th&#39;, text=&#39;Website&#39;).next_sibling.a[&#39;href&#39;]&#xA;    version    = table.find(&#39;th&#39;, text=&#39;Stable release&#39;).next_sibling.strings.__next__()&#xA;    logo_url   = table.find(&#39;img&#39;)[&#39;src&#39;]&#xA;    logo       = requests.get(f&#39;https:{logo_url}&#39;).content&#xA;    filename   = os.path.basename(logo_url)&#xA;    with open(filename, &#39;wb&#39;) as file:&#xA;        file.write(logo)&#xA;    print(f&#39;{python_url}, {version}, file://{os.path.abspath(filename)}&#39;)&#xA;except requests.exceptions.ConnectionError:&#xA;    print(&#34;You&#39;ve got problems with connection.&#34;, file=sys.stderr)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Web&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install bottle&#xA;from bottle import run, route, static_file, template, post, request, response&#xA;import json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;run(host=&#39;localhost&#39;, port=8080)        # Runs locally.&#xA;run(host=&#39;0.0.0.0&#39;, port=80)            # Runs globally.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Static Request&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@route(&#39;/img/&amp;lt;filename&amp;gt;&#39;)&#xA;def send_file(filename):&#xA;    return static_file(filename, root=&#39;img_dir/&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dynamic Request&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@route(&#39;/&amp;lt;sport&amp;gt;&#39;)&#xA;def send_html(sport):&#xA;    return template(&#39;&amp;lt;h1&amp;gt;{{title}}&amp;lt;/h1&amp;gt;&#39;, title=sport)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;REST Request&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@post(&#39;/&amp;lt;sport&amp;gt;/odds&#39;)&#xA;def send_json(sport):&#xA;    team = request.forms.get(&#39;team&#39;)&#xA;    response.headers[&#39;Content-Type&#39;] = &#39;application/json&#39;&#xA;    response.headers[&#39;Cache-Control&#39;] = &#39;no-cache&#39;&#xA;    return json.dumps({&#39;team&#39;: team, &#39;odds&#39;: [2.09, 3.74, 3.68]})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Test:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install requests&#xA;&amp;gt;&amp;gt;&amp;gt; import threading, requests&#xA;&amp;gt;&amp;gt;&amp;gt; threading.Thread(target=run, daemon=True).start()&#xA;&amp;gt;&amp;gt;&amp;gt; url = &#39;http://localhost:8080/football/odds&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; data = {&#39;team&#39;: &#39;arsenal f.c.&#39;}&#xA;&amp;gt;&amp;gt;&amp;gt; response = requests.post(url, data=data)&#xA;&amp;gt;&amp;gt;&amp;gt; response.json()&#xA;{&#39;team&#39;: &#39;arsenal f.c.&#39;, &#39;odds&#39;: [2.09, 3.74, 3.68]}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Profiling&lt;/h2&gt; &#xA;&lt;h3&gt;Stopwatch&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from time import time&#xA;start_time = time()                     # Seconds since the Epoch.&#xA;...&#xA;duration = time() - start_time&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;High performance:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from time import perf_counter&#xA;start_time = perf_counter()             # Seconds since the restart.&#xA;...&#xA;duration = perf_counter() - start_time&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Timing a Snippet&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from timeit import timeit&#xA;&amp;gt;&amp;gt;&amp;gt; timeit(&#34;&#39;&#39;.join(str(i) for i in range(100))&#34;,&#xA;...        number=10000, globals=globals(), setup=&#39;pass&#39;)&#xA;0.34986&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Profiling by Line&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install line_profiler memory_profiler&#xA;@profile&#xA;def main():&#xA;    a = [*range(10000)]&#xA;    b = {*range(10000)}&#xA;main()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ kernprof -lv test.py&#xA;Line #   Hits     Time  Per Hit   % Time  Line Contents&#xA;=======================================================&#xA;     1                                    @profile&#xA;     2                                    def main():&#xA;     3      1    955.0    955.0     43.7      a = [*range(10000)]&#xA;     4      1   1231.0   1231.0     56.3      b = {*range(10000)}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ python3 -m memory_profiler test.py&#xA;Line #         Mem usage      Increment   Line Contents&#xA;=======================================================&#xA;     1        37.668 MiB     37.668 MiB   @profile&#xA;     2                                    def main():&#xA;     3        38.012 MiB      0.344 MiB       a = [*range(10000)]&#xA;     4        38.477 MiB      0.465 MiB       b = {*range(10000)}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Call Graph&lt;/h3&gt; &#xA;&lt;h4&gt;Generates a PNG image of the call graph with highlighted bottlenecks:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install pycallgraph2&#xA;# $ apt install graphviz&#xA;import pycallgraph2 as cg, datetime&#xA;filename = f&#39;profile-{datetime.datetime.now():%Y%m%d%H%M%S}.png&#39;&#xA;drawer = cg.output.GraphvizOutput(output_file=filename)&#xA;with cg.PyCallGraph(drawer):&#xA;    &amp;lt;code_to_be_profiled&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;NumPy&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Array manipulation mini-language. It can run up to one hundred times faster than the equivalent Python code. An even faster alternative that runs on a GPU is called CuPy.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install numpy&#xA;import numpy as np&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;array&amp;gt; = np.array(&amp;lt;list/list_of_lists&amp;gt;)&#xA;&amp;lt;array&amp;gt; = np.arange(from_inclusive, to_exclusive, ±step_size)&#xA;&amp;lt;array&amp;gt; = np.ones(&amp;lt;shape&amp;gt;)&#xA;&amp;lt;array&amp;gt; = np.random.randint(from_inclusive, to_exclusive, &amp;lt;shape&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;array&amp;gt;.shape = &amp;lt;shape&amp;gt;&#xA;&amp;lt;view&amp;gt;  = &amp;lt;array&amp;gt;.reshape(&amp;lt;shape&amp;gt;)&#xA;&amp;lt;view&amp;gt;  = np.broadcast_to(&amp;lt;array&amp;gt;, &amp;lt;shape&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;array&amp;gt; = &amp;lt;array&amp;gt;.sum(axis)&#xA;indexes = &amp;lt;array&amp;gt;.argmin(axis)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Shape is a tuple of dimension sizes.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Axis is an index of the dimension that gets collapsed. Leftmost dimension has index 0.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Indexing&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;lt;el&amp;gt;       = &amp;lt;2d_array&amp;gt;[row_index, column_index]&#xA;&amp;lt;1d_view&amp;gt;  = &amp;lt;2d_array&amp;gt;[row_index]&#xA;&amp;lt;1d_view&amp;gt;  = &amp;lt;2d_array&amp;gt;[:, column_index]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;lt;1d_array&amp;gt; = &amp;lt;2d_array&amp;gt;[row_indexes, column_indexes]&#xA;&amp;lt;2d_array&amp;gt; = &amp;lt;2d_array&amp;gt;[row_indexes]&#xA;&amp;lt;2d_array&amp;gt; = &amp;lt;2d_array&amp;gt;[:, column_indexes]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;lt;2d_bools&amp;gt; = &amp;lt;2d_array&amp;gt; &amp;gt;&amp;lt;== &amp;lt;el&amp;gt;&#xA;&amp;lt;1d_array&amp;gt; = &amp;lt;2d_array&amp;gt;[&amp;lt;2d_bools&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Broadcasting&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Broadcasting is a set of rules by which NumPy functions operate on arrays of different sizes and/or dimensions.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;left  = [[0.1], [0.6], [0.8]]        # Shape: (3, 1)&#xA;right = [ 0.1 ,  0.6 ,  0.8 ]        # Shape: (3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;1. If array shapes differ in length, left-pad the shorter shape with ones:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;left  = [[0.1], [0.6], [0.8]]        # Shape: (3, 1)&#xA;right = [[0.1 ,  0.6 ,  0.8]]        # Shape: (1, 3) &amp;lt;- !&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. If any dimensions differ in size, expand the ones that have size 1 by duplicating their elements:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;left  = [[0.1, 0.1, 0.1], [0.6, 0.6, 0.6], [0.8, 0.8, 0.8]]  # Shape: (3, 3) &amp;lt;- !&#xA;right = [[0.1, 0.6, 0.8], [0.1, 0.6, 0.8], [0.1, 0.6, 0.8]]  # Shape: (3, 3) &amp;lt;- !&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3. If neither non-matching dimension has size 1, raise an error.&lt;/h4&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;h4&gt;For each point returns index of its nearest point (&lt;code&gt;[0.1, 0.6, 0.8] =&amp;gt; [1, 2, 1]&lt;/code&gt;):&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; points = np.array([0.1, 0.6, 0.8])&#xA; [ 0.1,  0.6,  0.8]&#xA;&amp;gt;&amp;gt;&amp;gt; wrapped_points = points.reshape(3, 1)&#xA;[[ 0.1],&#xA; [ 0.6],&#xA; [ 0.8]]&#xA;&amp;gt;&amp;gt;&amp;gt; distances = wrapped_points - points&#xA;[[ 0. , -0.5, -0.7],&#xA; [ 0.5,  0. , -0.2],&#xA; [ 0.7,  0.2,  0. ]]&#xA;&amp;gt;&amp;gt;&amp;gt; distances = np.abs(distances)&#xA;[[ 0. ,  0.5,  0.7],&#xA; [ 0.5,  0. ,  0.2],&#xA; [ 0.7,  0.2,  0. ]]&#xA;&amp;gt;&amp;gt;&amp;gt; i = np.arange(3)&#xA;[0, 1, 2]&#xA;&amp;gt;&amp;gt;&amp;gt; distances[i, i] = np.inf&#xA;[[ inf,  0.5,  0.7],&#xA; [ 0.5,  inf,  0.2],&#xA; [ 0.7,  0.2,  inf]]&#xA;&amp;gt;&amp;gt;&amp;gt; distances.argmin(1)&#xA;[1, 2, 1]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Image&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install pillow&#xA;from PIL import Image&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Image&amp;gt; = Image.new(&#39;&amp;lt;mode&amp;gt;&#39;, (width, height))  # Also: `color=&amp;lt;int/tuple/str&amp;gt;`.&#xA;&amp;lt;Image&amp;gt; = Image.open(&amp;lt;path&amp;gt;)                    # Identifies format based on file contents.&#xA;&amp;lt;Image&amp;gt; = &amp;lt;Image&amp;gt;.convert(&#39;&amp;lt;mode&amp;gt;&#39;)             # Converts image to the new mode.&#xA;&amp;lt;Image&amp;gt;.save(&amp;lt;path&amp;gt;)                            # Selects format based on the path extension.&#xA;&amp;lt;Image&amp;gt;.show()                                  # Opens image in default preview app.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;int/tuple&amp;gt; = &amp;lt;Image&amp;gt;.getpixel((x, y))          # Returns a pixel.&#xA;&amp;lt;Image&amp;gt;.putpixel((x, y), &amp;lt;int/tuple&amp;gt;)           # Writes a pixel to the image.&#xA;&amp;lt;ImagingCore&amp;gt; = &amp;lt;Image&amp;gt;.getdata()               # Returns a flattened sequence of pixels.&#xA;&amp;lt;Image&amp;gt;.putdata(&amp;lt;list/ImagingCore&amp;gt;)             # Writes a flattened sequence of pixels.&#xA;&amp;lt;Image&amp;gt;.paste(&amp;lt;Image&amp;gt;, (x, y))                  # Writes an image to the image.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;lt;2d_array&amp;gt; = np.array(&amp;lt;Image_L&amp;gt;)                # Creates NumPy array from greyscale image.&#xA;&amp;lt;3d_array&amp;gt; = np.array(&amp;lt;Image_RGB&amp;gt;)              # Creates NumPy array from color image.&#xA;&amp;lt;Image&amp;gt;    = Image.fromarray(&amp;lt;array&amp;gt;)           # Creates image from NumPy array of floats.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Modes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;1&#39;&lt;/code&gt; - 1-bit pixels, black and white, stored with one pixel per byte.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;L&#39;&lt;/code&gt; - 8-bit pixels, greyscale.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;RGB&#39;&lt;/code&gt; - 3x8-bit pixels, true color.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;RGBA&#39;&lt;/code&gt; - 4x8-bit pixels, true color with transparency mask.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;HSV&#39;&lt;/code&gt; - 3x8-bit pixels, Hue, Saturation, Value color space.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;h4&gt;Creates a PNG image of a rainbow gradient:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;WIDTH, HEIGHT = 100, 100&#xA;n_pixels = WIDTH * HEIGHT&#xA;hues = (255 * i/n_pixels for i in range(n_pixels))&#xA;img = Image.new(&#39;HSV&#39;, (WIDTH, HEIGHT))&#xA;img.putdata([(int(h), 255, 255) for h in hues])&#xA;img.convert(&#39;RGB&#39;).save(&#39;test.png&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Adds noise to a PNG image:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from random import randint&#xA;add_noise = lambda value: max(0, min(255, value + randint(-20, 20)))&#xA;img = Image.open(&#39;test.png&#39;).convert(&#39;HSV&#39;)&#xA;img.putdata([(add_noise(h), s, v) for h, s, v in img.getdata()])&#xA;img.convert(&#39;RGB&#39;).save(&#39;test.png&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Image Draw&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from PIL import ImageDraw&#xA;&amp;lt;ImageDraw&amp;gt; = ImageDraw.Draw(&amp;lt;Image&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;ImageDraw&amp;gt;.point((x, y))&#xA;&amp;lt;ImageDraw&amp;gt;.line((x1, y1, x2, y2 [, ...]))&#xA;&amp;lt;ImageDraw&amp;gt;.arc((x1, y1, x2, y2), from_deg, to_deg)&#xA;&amp;lt;ImageDraw&amp;gt;.rectangle((x1, y1, x2, y2))&#xA;&amp;lt;ImageDraw&amp;gt;.polygon((x1, y1, x2, y2 [, ...]))&#xA;&amp;lt;ImageDraw&amp;gt;.ellipse((x1, y1, x2, y2))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;&#39;fill=&amp;lt;color&amp;gt;&#39;&lt;/code&gt; to set the primary color.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;&#39;width=&amp;lt;int&amp;gt;&#39;&lt;/code&gt; to set the width of lines or contours.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;&#39;outline=&amp;lt;color&amp;gt;&#39;&lt;/code&gt; to set the color of the contours.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Colors can be specified as an int, tuple, &lt;code&gt;&#39;#rrggbb[aa]&#39;&lt;/code&gt; string or a color name.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Animation&lt;/h2&gt; &#xA;&lt;h4&gt;Creates a GIF of a bouncing ball:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install imageio&#xA;from PIL import Image, ImageDraw&#xA;import imageio&#xA;WIDTH, HEIGHT, R = 126, 126, 10&#xA;frames = []&#xA;for velocity in range(1, 16):&#xA;    y = sum(range(velocity))&#xA;    frame = Image.new(&#39;L&#39;, (WIDTH, HEIGHT))&#xA;    draw  = ImageDraw.Draw(frame)&#xA;    draw.ellipse((WIDTH/2-R, y, WIDTH/2+R, y+R*2), fill=&#39;white&#39;)&#xA;    frames.append(frame)&#xA;frames += reversed(frames[1:-1])&#xA;imageio.mimsave(&#39;test.gif&#39;, frames, duration=0.03)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Audio&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import wave&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Wave_read&amp;gt;  = wave.open(&#39;&amp;lt;path&amp;gt;&#39;, &#39;rb&#39;)        # Opens the WAV file.&#xA;framerate    = &amp;lt;Wave_read&amp;gt;.getframerate()       # Number of frames per second.&#xA;nchannels    = &amp;lt;Wave_read&amp;gt;.getnchannels()       # Number of samples per frame.&#xA;sampwidth    = &amp;lt;Wave_read&amp;gt;.getsampwidth()       # Sample size in bytes.&#xA;nframes      = &amp;lt;Wave_read&amp;gt;.getnframes()         # Number of frames.&#xA;&amp;lt;params&amp;gt;     = &amp;lt;Wave_read&amp;gt;.getparams()          # Immutable collection of above.&#xA;&amp;lt;bytes&amp;gt;      = &amp;lt;Wave_read&amp;gt;.readframes(nframes)  # Returns next &#39;nframes&#39; frames.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Wave_write&amp;gt; = wave.open(&#39;&amp;lt;path&amp;gt;&#39;, &#39;wb&#39;)        # Truncates existing file.&#xA;&amp;lt;Wave_write&amp;gt;.setframerate(&amp;lt;int&amp;gt;)                # 44100 for CD, 48000 for video.&#xA;&amp;lt;Wave_write&amp;gt;.setnchannels(&amp;lt;int&amp;gt;)                # 1 for mono, 2 for stereo.&#xA;&amp;lt;Wave_write&amp;gt;.setsampwidth(&amp;lt;int&amp;gt;)                # 2 for CD quality sound.&#xA;&amp;lt;Wave_write&amp;gt;.setparams(&amp;lt;params&amp;gt;)                # Sets all parameters.&#xA;&amp;lt;Wave_write&amp;gt;.writeframes(&amp;lt;bytes&amp;gt;)               # Appends frames to the file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bytes object contains a sequence of frames, each consisting of one or more samples.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;In a stereo signal, the first sample of a frame belongs to the left channel.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Each sample consists of one or more bytes that, when converted to an integer, indicate the displacement of a speaker membrane at a given moment.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;If sample width is one byte, then the integer should be encoded unsigned.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;For all other sizes, the integer should be encoded signed with little-endian byte order.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Sample Values&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+-----------+-------------+------+-------------+&#xA;| sampwidth |     min     | zero |     max     |&#xA;+-----------+-------------+------+-------------+&#xA;|     1     |           0 |  128 |         255 |&#xA;|     2     |      -32768 |    0 |       32767 |&#xA;|     3     |    -8388608 |    0 |     8388607 |&#xA;|     4     | -2147483648 |    0 |  2147483647 |&#xA;+-----------+-------------+------+-------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Read Float Samples from WAV File&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def read_wav_file(filename):&#xA;    def get_int(bytes_obj):&#xA;        an_int = int.from_bytes(bytes_obj, &#39;little&#39;, signed=(sampwidth != 1))&#xA;        return an_int - 128 * (sampwidth == 1)&#xA;    with wave.open(filename, &#39;rb&#39;) as file:&#xA;        sampwidth = file.getsampwidth()&#xA;        frames = file.readframes(-1)&#xA;    bytes_samples = (frames[i : i+sampwidth] for i in range(0, len(frames), sampwidth))&#xA;    return [get_int(b) / pow(2, sampwidth * 8 - 1) for b in bytes_samples]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Write Float Samples to WAV File&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def write_to_wav_file(filename, float_samples, nchannels=1, sampwidth=2, framerate=44100):&#xA;    def get_bytes(a_float):&#xA;        a_float = max(-1, min(1 - 2e-16, a_float))&#xA;        a_float += sampwidth == 1&#xA;        a_float *= pow(2, sampwidth * 8 - 1)&#xA;        return int(a_float).to_bytes(sampwidth, &#39;little&#39;, signed=(sampwidth != 1))&#xA;    with wave.open(filename, &#39;wb&#39;) as file:&#xA;        file.setnchannels(nchannels)&#xA;        file.setsampwidth(sampwidth)&#xA;        file.setframerate(framerate)&#xA;        file.writeframes(b&#39;&#39;.join(get_bytes(f) for f in float_samples))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;h4&gt;Saves a sine wave to a mono WAV file:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from math import pi, sin&#xA;samples_f = (sin(i * 2 * pi * 440 / 44100) for i in range(100000))&#xA;write_to_wav_file(&#39;test.wav&#39;, samples_f)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Adds noise to a mono WAV file:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from random import random&#xA;add_noise = lambda value: value + (random() - 0.5) * 0.03&#xA;samples_f = (add_noise(f) for f in read_wav_file(&#39;test.wav&#39;))&#xA;write_to_wav_file(&#39;test.wav&#39;, samples_f)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Plays a WAV file:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install simpleaudio&#xA;from simpleaudio import play_buffer&#xA;with wave.open(&#39;test.wav&#39;, &#39;rb&#39;) as file:&#xA;    p = file.getparams()&#xA;    frames = file.readframes(-1)&#xA;    play_buffer(frames, p.nchannels, p.sampwidth, p.framerate)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Text to Speech&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install pyttsx3&#xA;import pyttsx3&#xA;engine = pyttsx3.init()&#xA;engine.say(&#39;Sally sells seashells by the seashore.&#39;)&#xA;engine.runAndWait()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Synthesizer&lt;/h2&gt; &#xA;&lt;h4&gt;Plays Popcorn by Gershon Kingsley:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install simpleaudio&#xA;import math, struct, simpleaudio&#xA;from itertools import repeat, chain&#xA;F  = 44100&#xA;P1 = &#39;71♩,69♪,,71♩,66♪,,62♩,66♪,,59♩,,&#39;&#xA;P2 = &#39;71♩,73♪,,74♩,73♪,,74♪,,71♪,,73♩,71♪,,73♪,,69♪,,71♩,69♪,,71♪,,67♪,,71♩,,&#39;&#xA;get_pause   = lambda seconds: repeat(0, int(seconds * F))&#xA;sin_f       = lambda i, hz: math.sin(i * 2 * math.pi * hz / F)&#xA;get_wave    = lambda hz, seconds: (sin_f(i, hz) for i in range(int(seconds * F)))&#xA;get_hz      = lambda key: 8.176 * 2 ** (int(key) / 12)&#xA;parse_note  = lambda note: (get_hz(note[:2]), 1/4 if &#39;♩&#39; in note else 1/8)&#xA;get_samples = lambda note: get_wave(*parse_note(note)) if note else get_pause(1/8)&#xA;samples_f   = chain.from_iterable(get_samples(n) for n in f&#39;{P1},{P1},{P2}&#39;.split(&#39;,&#39;))&#xA;samples_b   = b&#39;&#39;.join(struct.pack(&#39;&amp;lt;h&#39;, int(f * 30000)) for f in samples_f)&#xA;simpleaudio.play_buffer(samples_b, 1, 2, F)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Pygame&lt;/h2&gt; &#xA;&lt;h3&gt;Basic Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install pygame&#xA;import pygame as pg&#xA;pg.init()&#xA;screen = pg.display.set_mode((500, 500))&#xA;rect = pg.Rect(240, 240, 20, 20)&#xA;while all(event.type != pg.QUIT for event in pg.event.get()):&#xA;    deltas = {pg.K_UP: (0, -1), pg.K_RIGHT: (1, 0), pg.K_DOWN: (0, 1), pg.K_LEFT: (-1, 0)}&#xA;    for ch, is_pressed in enumerate(pg.key.get_pressed()):&#xA;        rect = rect.move(deltas[ch]) if ch in deltas and is_pressed else rect&#xA;    screen.fill((0, 0, 0))&#xA;    pg.draw.rect(screen, (255, 255, 255), rect)&#xA;    pg.display.flip()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rectangle&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Object for storing rectangular coordinates.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Rect&amp;gt; = pg.Rect(x, y, width, height)           # Floats get truncated into ints.&#xA;&amp;lt;int&amp;gt;  = &amp;lt;Rect&amp;gt;.x/y/centerx/centery/…           # Top, right, bottom, left. Allows assignments.&#xA;&amp;lt;tup.&amp;gt; = &amp;lt;Rect&amp;gt;.topleft/center/…                # Topright, bottomright, bottomleft. Same.&#xA;&amp;lt;Rect&amp;gt; = &amp;lt;Rect&amp;gt;.move((x, y))                    # Use move_ip() to move in-place.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;bool&amp;gt; = &amp;lt;Rect&amp;gt;.collidepoint((x, y))            # Checks if rectangle contains a point.&#xA;&amp;lt;bool&amp;gt; = &amp;lt;Rect&amp;gt;.colliderect(&amp;lt;Rect&amp;gt;)             # Checks if two rectangles overlap.&#xA;&amp;lt;int&amp;gt;  = &amp;lt;Rect&amp;gt;.collidelist(&amp;lt;list_of_Rect&amp;gt;)     # Returns index of first colliding Rect or -1.&#xA;&amp;lt;list&amp;gt; = &amp;lt;Rect&amp;gt;.collidelistall(&amp;lt;list_of_Rect&amp;gt;)  # Returns indexes of all colliding Rects.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Surface&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Object for representing images.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Surf&amp;gt; = pg.display.set_mode((width, height))   # Returns display surface.&#xA;&amp;lt;Surf&amp;gt; = pg.Surface((width, height), flags=0)   # New RGB surface. RGBA if `flags=pg.SRCALPHA`.&#xA;&amp;lt;Surf&amp;gt; = pg.image.load(&#39;&amp;lt;path&amp;gt;&#39;)                # Loads the image. Format depends on source.&#xA;&amp;lt;Surf&amp;gt; = &amp;lt;Surf&amp;gt;.subsurface(&amp;lt;Rect&amp;gt;)              # Returns a subsurface.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Surf&amp;gt;.fill(color)                              # Tuple, Color(&#39;#rrggbb[aa]&#39;) or Color(&amp;lt;name&amp;gt;).&#xA;&amp;lt;Surf&amp;gt;.set_at((x, y), color)                    # Updates pixel.&#xA;&amp;lt;Surf&amp;gt;.blit(&amp;lt;Surf&amp;gt;, (x, y))                     # Draws passed surface to the surface.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pygame.transform import scale, ...&#xA;&amp;lt;Surf&amp;gt; = scale(&amp;lt;Surf&amp;gt;, (width, height))         # Returns scaled surface.&#xA;&amp;lt;Surf&amp;gt; = rotate(&amp;lt;Surf&amp;gt;, degrees)                # Returns rotated and scaled surface.&#xA;&amp;lt;Surf&amp;gt; = flip(&amp;lt;Surf&amp;gt;, x_bool, y_bool)           # Returns flipped surface.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pygame.draw import line, ...&#xA;line(&amp;lt;Surf&amp;gt;, color, (x1, y1), (x2, y2), width)  # Draws a line to the surface.&#xA;arc(&amp;lt;Surf&amp;gt;, color, &amp;lt;Rect&amp;gt;, from_rad, to_rad)    # Also: ellipse(&amp;lt;Surf&amp;gt;, color, &amp;lt;Rect&amp;gt;)&#xA;rect(&amp;lt;Surf&amp;gt;, color, &amp;lt;Rect&amp;gt;)                     # Also: polygon(&amp;lt;Surf&amp;gt;, color, points)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Font&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Font&amp;gt; = pg.font.SysFont(&#39;&amp;lt;name&amp;gt;&#39;, size)        # Loads the system font or default if missing.&#xA;&amp;lt;Font&amp;gt; = pg.font.Font(&#39;&amp;lt;path&amp;gt;&#39;, size)           # Loads the TTF file. Pass None for default.&#xA;&amp;lt;Surf&amp;gt; = &amp;lt;Font&amp;gt;.render(text, antialias, color)  # Background color can be specified at the end.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sound&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Sound&amp;gt; = pg.mixer.Sound(&#39;&amp;lt;path&amp;gt;&#39;)              # Loads the WAV file.&#xA;&amp;lt;Sound&amp;gt;.play()                                  # Starts playing the sound.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Basic Mario Brothers Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import collections, dataclasses, enum, io, itertools as it, pygame as pg, urllib.request&#xA;from random import randint&#xA;&#xA;P = collections.namedtuple(&#39;P&#39;, &#39;x y&#39;)          # Position&#xA;D = enum.Enum(&#39;D&#39;, &#39;n e s w&#39;)                   # Direction&#xA;W, H, MAX_S = 50, 50, P(5, 10)                  # Width, Height, Max speed&#xA;&#xA;def main():&#xA;    def get_screen():&#xA;        pg.init()&#xA;        return pg.display.set_mode((W*16, H*16))&#xA;    def get_images():&#xA;        url = &#39;https://gto76.github.io/python-cheatsheet/web/mario_bros.png&#39;&#xA;        img = pg.image.load(io.BytesIO(urllib.request.urlopen(url).read()))&#xA;        return [img.subsurface(get_rect(x, 0)) for x in range(img.get_width() // 16)]&#xA;    def get_mario():&#xA;        Mario = dataclasses.make_dataclass(&#39;Mario&#39;, &#39;rect spd facing_left frame_cycle&#39;.split())&#xA;        return Mario(get_rect(1, 1), P(0, 0), False, it.cycle(range(3)))&#xA;    def get_tiles():&#xA;        border = [(x, y) for x in range(W) for y in range(H) if x in [0, W-1] or y in [0, H-1]]&#xA;        platforms = [(randint(1, W-2), randint(2, H-2)) for _ in range(W*H // 10)]&#xA;        return [get_rect(x, y) for x, y in border + platforms]&#xA;    def get_rect(x, y):&#xA;        return pg.Rect(x*16, y*16, 16, 16)&#xA;    run(get_screen(), get_images(), get_mario(), get_tiles())&#xA;&#xA;def run(screen, images, mario, tiles):&#xA;    clock = pg.time.Clock()&#xA;    while all(event.type != pg.QUIT for event in pg.event.get()):&#xA;        keys = {pg.K_UP: D.n, pg.K_RIGHT: D.e, pg.K_DOWN: D.s, pg.K_LEFT: D.w}&#xA;        pressed = {keys.get(ch) for ch, is_prsd in enumerate(pg.key.get_pressed()) if is_prsd}&#xA;        update_speed(mario, tiles, pressed)&#xA;        update_position(mario, tiles)&#xA;        draw(screen, images, mario, tiles, pressed)&#xA;        clock.tick(28)&#xA;&#xA;def update_speed(mario, tiles, pressed):&#xA;    x, y = mario.spd&#xA;    x += 2 * ((D.e in pressed) - (D.w in pressed))&#xA;    x -= (x &amp;gt; 0) - (x &amp;lt; 0)&#xA;    y += 1 if D.s not in get_boundaries(mario.rect, tiles) else (D.n in pressed) * -10&#xA;    mario.spd = P(x=max(-MAX_S.x, min(MAX_S.x, x)), y=max(-MAX_S.y, min(MAX_S.y, y)))&#xA;&#xA;def update_position(mario, tiles):&#xA;    x, y = mario.rect.topleft&#xA;    n_steps = max(abs(s) for s in mario.spd)&#xA;    for _ in range(n_steps):&#xA;        mario.spd = stop_on_collision(mario.spd, get_boundaries(mario.rect, tiles))&#xA;        x, y = x + mario.spd.x / n_steps, y + mario.spd.y / n_steps&#xA;        mario.rect.topleft = x, y&#xA;&#xA;def get_boundaries(rect, tiles):&#xA;    deltas = {D.n: P(0, -1), D.e: P(1, 0), D.s: P(0, 1), D.w: P(-1, 0)}&#xA;    return {d for d, delta in deltas.items() if rect.move(delta).collidelist(tiles) != -1}&#xA;&#xA;def stop_on_collision(spd, bounds):&#xA;    return P(x=0 if (D.w in bounds and spd.x &amp;lt; 0) or (D.e in bounds and spd.x &amp;gt; 0) else spd.x,&#xA;             y=0 if (D.n in bounds and spd.y &amp;lt; 0) or (D.s in bounds and spd.y &amp;gt; 0) else spd.y)&#xA;&#xA;def draw(screen, images, mario, tiles, pressed):&#xA;    def get_marios_image_index():&#xA;        if D.s not in get_boundaries(mario.rect, tiles):&#xA;            return 4&#xA;        return next(mario.frame_cycle) if {D.w, D.e} &amp;amp; pressed else 6&#xA;    screen.fill((85, 168, 255))&#xA;    mario.facing_left = (D.w in pressed) if {D.w, D.e} &amp;amp; pressed else mario.facing_left&#xA;    screen.blit(images[get_marios_image_index() + mario.facing_left * 9], mario.rect)&#xA;    for t in tiles:&#xA;        screen.blit(images[18 if t.x in [0, (W-1)*16] or t.y in [0, (H-1)*16] else 19], t)&#xA;    pg.display.flip()&#xA;&#xA;if __name__ == &#39;__main__&#39;:&#xA;    main()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Pandas&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install pandas&#xA;import pandas as pd&#xA;from pandas import Series, DataFrame&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Series&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Ordered dictionary with a name.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; Series([1, 2], index=[&#39;x&#39;, &#39;y&#39;], name=&#39;a&#39;)&#xA;x    1&#xA;y    2&#xA;Name: a, dtype: int64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Sr&amp;gt; = Series(&amp;lt;list&amp;gt;)                         # Assigns RangeIndex starting at 0.&#xA;&amp;lt;Sr&amp;gt; = Series(&amp;lt;dict&amp;gt;)                         # Takes dictionary&#39;s keys for index.&#xA;&amp;lt;Sr&amp;gt; = Series(&amp;lt;dict/Series&amp;gt;, index=&amp;lt;list&amp;gt;)    # Only keeps items with keys specified in index.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;el&amp;gt; = &amp;lt;Sr&amp;gt;.loc[key]                          # Or: &amp;lt;Sr&amp;gt;.iloc[index]&#xA;&amp;lt;Sr&amp;gt; = &amp;lt;Sr&amp;gt;.loc[keys]                         # Or: &amp;lt;Sr&amp;gt;.iloc[indexes]&#xA;&amp;lt;Sr&amp;gt; = &amp;lt;Sr&amp;gt;.loc[from_key : to_key_inclusive]  # Or: &amp;lt;Sr&amp;gt;.iloc[from_i : to_i_exclusive]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;el&amp;gt; = &amp;lt;Sr&amp;gt;[key/index]                        # Or: &amp;lt;Sr&amp;gt;.key&#xA;&amp;lt;Sr&amp;gt; = &amp;lt;Sr&amp;gt;[keys/indexes]                     # Or: &amp;lt;Sr&amp;gt;[&amp;lt;key_range/range&amp;gt;]&#xA;&amp;lt;Sr&amp;gt; = &amp;lt;Sr&amp;gt;[bools]                            # Or: &amp;lt;Sr&amp;gt;.i/loc[bools]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Sr&amp;gt; = &amp;lt;Sr&amp;gt; &amp;gt;&amp;lt;== &amp;lt;el/Sr&amp;gt;                      # Returns a Series of bools.&#xA;&amp;lt;Sr&amp;gt; = &amp;lt;Sr&amp;gt; +-*/ &amp;lt;el/Sr&amp;gt;                      # Items with non-matching keys get value NaN.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Sr&amp;gt; = &amp;lt;Sr&amp;gt;.append(&amp;lt;Sr&amp;gt;)                      # Or: pd.concat(&amp;lt;coll_of_Sr&amp;gt;)&#xA;&amp;lt;Sr&amp;gt; = &amp;lt;Sr&amp;gt;.combine_first(&amp;lt;Sr&amp;gt;)               # Adds items that are not yet present.&#xA;&amp;lt;Sr&amp;gt;.update(&amp;lt;Sr&amp;gt;)                             # Updates items that are already present.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Sr&amp;gt;.plot.line/area/bar/pie/hist()            # Generates a Matplotlib plot.&#xA;matplotlib.pyplot.show()                      # Displays the plot. Also savefig(&amp;lt;path&amp;gt;).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Series — Aggregate, Transform, Map:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;el&amp;gt; = &amp;lt;Sr&amp;gt;.sum/max/mean/idxmax/all()         # Or: &amp;lt;Sr&amp;gt;.agg(lambda &amp;lt;Sr&amp;gt;: &amp;lt;el&amp;gt;)&#xA;&amp;lt;Sr&amp;gt; = &amp;lt;Sr&amp;gt;.rank/diff/cumsum/ffill/interpl()  # Or: &amp;lt;Sr&amp;gt;.agg/transform(lambda &amp;lt;Sr&amp;gt;: &amp;lt;Sr&amp;gt;)&#xA;&amp;lt;Sr&amp;gt; = &amp;lt;Sr&amp;gt;.fillna(&amp;lt;el&amp;gt;)                      # Or: &amp;lt;Sr&amp;gt;.agg/transform/map(lambda &amp;lt;el&amp;gt;: &amp;lt;el&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; sr = Series([1, 2], index=[&#39;x&#39;, &#39;y&#39;])&#xA;x    1&#xA;y    2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+-----------------+-------------+-------------+---------------+&#xA;|                 |    &#39;sum&#39;    |   [&#39;sum&#39;]   | {&#39;s&#39;: &#39;sum&#39;}  |&#xA;+-----------------+-------------+-------------+---------------+&#xA;| sr.apply(…)     |      3      |    sum  3   |     s  3      |&#xA;| sr.agg(…)       |             |             |               |&#xA;+-----------------+-------------+-------------+---------------+&#xA;&#xA;+-----------------+-------------+-------------+---------------+&#xA;|                 |    &#39;rank&#39;   |   [&#39;rank&#39;]  | {&#39;r&#39;: &#39;rank&#39;} |&#xA;+-----------------+-------------+-------------+---------------+&#xA;| sr.apply(…)     |             |      rank   |               |&#xA;| sr.agg(…)       |     x  1    |   x     1   |    r  x  1    |&#xA;| sr.transform(…) |     y  2    |   y     2   |       y  2    |&#xA;+-----------------+-------------+-------------+---------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Last result has a hierarchical index. Use &lt;code&gt;&#39;&amp;lt;Sr&amp;gt;[key_1, key_2]&#39;&lt;/code&gt; to get its values.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;DataFrame&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table with labeled rows and columns.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; DataFrame([[1, 2], [3, 4]], index=[&#39;a&#39;, &#39;b&#39;], columns=[&#39;x&#39;, &#39;y&#39;])&#xA;   x  y&#xA;a  1  2&#xA;b  3  4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;DF&amp;gt;    = DataFrame(&amp;lt;list_of_rows&amp;gt;)           # Rows can be either lists, dicts or series.&#xA;&amp;lt;DF&amp;gt;    = DataFrame(&amp;lt;dict_of_columns&amp;gt;)        # Columns can be either lists, dicts or series.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;el&amp;gt;    = &amp;lt;DF&amp;gt;.loc[row_key, column_key]       # Or: &amp;lt;DF&amp;gt;.iloc[row_index, column_index]&#xA;&amp;lt;Sr/DF&amp;gt; = &amp;lt;DF&amp;gt;.loc[row_key/s]                 # Or: &amp;lt;DF&amp;gt;.iloc[row_index/es]&#xA;&amp;lt;Sr/DF&amp;gt; = &amp;lt;DF&amp;gt;.loc[:, column_key/s]           # Or: &amp;lt;DF&amp;gt;.iloc[:, column_index/es]&#xA;&amp;lt;DF&amp;gt;    = &amp;lt;DF&amp;gt;.loc[row_bools, column_bools]   # Or: &amp;lt;DF&amp;gt;.iloc[row_bools, column_bools]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Sr/DF&amp;gt; = &amp;lt;DF&amp;gt;[column_key/s]                  # Or: &amp;lt;DF&amp;gt;.column_key&#xA;&amp;lt;DF&amp;gt;    = &amp;lt;DF&amp;gt;[row_bools]                     # Keeps rows as specified by bools.&#xA;&amp;lt;DF&amp;gt;    = &amp;lt;DF&amp;gt;[&amp;lt;DF_of_bools&amp;gt;]                 # Assigns NaN to False values.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;DF&amp;gt;    = &amp;lt;DF&amp;gt; &amp;gt;&amp;lt;== &amp;lt;el/Sr/DF&amp;gt;                # Returns DF of bools. Sr is treated as a row.&#xA;&amp;lt;DF&amp;gt;    = &amp;lt;DF&amp;gt; +-*/ &amp;lt;el/Sr/DF&amp;gt;                # Items with non-matching keys get value NaN.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;DF&amp;gt;    = &amp;lt;DF&amp;gt;.set_index(column_key)          # Replaces row keys with values from a column.&#xA;&amp;lt;DF&amp;gt;    = &amp;lt;DF&amp;gt;.reset_index()                  # Moves row keys to a column named index.&#xA;&amp;lt;DF&amp;gt;    = &amp;lt;DF&amp;gt;.sort_index(ascending=True)     # Sorts rows by row keys.&#xA;&amp;lt;DF&amp;gt;    = &amp;lt;DF&amp;gt;.sort_values(column_key/s)      # Sorts rows by the passed column/s.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;DataFrame — Merge, Join, Concat:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; l = DataFrame([[1, 2], [3, 4]], index=[&#39;a&#39;, &#39;b&#39;], columns=[&#39;x&#39;, &#39;y&#39;])&#xA;   x  y&#xA;a  1  2&#xA;b  3  4&#xA;&amp;gt;&amp;gt;&amp;gt; r = DataFrame([[4, 5], [6, 7]], index=[&#39;b&#39;, &#39;c&#39;], columns=[&#39;y&#39;, &#39;z&#39;])&#xA;   y  z&#xA;b  4  5&#xA;c  6  7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+------------------------+---------------+------------+------------+--------------------------+&#xA;|                        |    &#39;outer&#39;    |   &#39;inner&#39;  |   &#39;left&#39;   |       Description        |&#xA;+------------------------+---------------+------------+------------+--------------------------+&#xA;| l.merge(r, on=&#39;y&#39;,     |    x   y   z  | x   y   z  | x   y   z  | Joins/merges on column.  |&#xA;|            how=…)      | 0  1   2   .  | 3   4   5  | 1   2   .  | Also accepts left_on and |&#xA;|                        | 1  3   4   5  |            | 3   4   5  | right_on parameters.     |&#xA;|                        | 2  .   6   7  |            |            | Uses &#39;inner&#39; by default. |&#xA;+------------------------+---------------+------------+------------+--------------------------+&#xA;| l.join(r, lsuffix=&#39;l&#39;, |    x yl yr  z |            | x yl yr  z | Joins/merges on row keys.|&#xA;|           rsuffix=&#39;r&#39;, | a  1  2  .  . | x yl yr  z | 1  2  .  . | Uses &#39;left&#39; by default.  |&#xA;|           how=…)       | b  3  4  4  5 | 3  4  4  5 | 3  4  4  5 | If r is a series, it is  |&#xA;|                        | c  .  .  6  7 |            |            | treated as a column.     |&#xA;+------------------------+---------------+------------+------------+--------------------------+&#xA;| pd.concat([l, r],      |    x   y   z  |     y      |            | Adds rows at the bottom. |&#xA;|           axis=0,      | a  1   2   .  |     2      |            | Uses &#39;outer&#39; by default. |&#xA;|           join=…)      | b  3   4   .  |     4      |            | A series is treated as a |&#xA;|                        | b  .   4   5  |     4      |            | column. Use l.append(sr) |&#xA;|                        | c  .   6   7  |     6      |            | to add a row instead.    |&#xA;+------------------------+---------------+------------+------------+--------------------------+&#xA;| pd.concat([l, r],      |    x  y  y  z |            |            | Adds columns at the      |&#xA;|           axis=1,      | a  1  2  .  . | x  y  y  z |            | right end. Uses &#39;outer&#39;  |&#xA;|           join=…)      | b  3  4  4  5 | 3  4  4  5 |            | by default. A series is  |&#xA;|                        | c  .  .  6  7 |            |            | treated as a column.     |&#xA;+------------------------+---------------+------------+------------+--------------------------+&#xA;| l.combine_first(r)     |    x   y   z  |            |            | Adds missing rows and    |&#xA;|                        | a  1   2   .  |            |            | columns. Also updates    |&#xA;|                        | b  3   4   5  |            |            | items that contain NaN.  |&#xA;|                        | c  .   6   7  |            |            | R must be a DataFrame.   |&#xA;+------------------------+---------------+------------+------------+--------------------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;DataFrame — Aggregate, Transform, Map:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Sr&amp;gt; = &amp;lt;DF&amp;gt;.sum/max/mean/idxmax/all()         # Or: &amp;lt;DF&amp;gt;.apply/agg(lambda &amp;lt;Sr&amp;gt;: &amp;lt;el&amp;gt;)&#xA;&amp;lt;DF&amp;gt; = &amp;lt;DF&amp;gt;.rank/diff/cumsum/ffill/interpl()  # Or: &amp;lt;DF&amp;gt;.apply/agg/transform(lambda &amp;lt;Sr&amp;gt;: &amp;lt;Sr&amp;gt;)&#xA;&amp;lt;DF&amp;gt; = &amp;lt;DF&amp;gt;.fillna(&amp;lt;el&amp;gt;)                      # Or: &amp;lt;DF&amp;gt;.applymap(lambda &amp;lt;el&amp;gt;: &amp;lt;el&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;All operations operate on columns by default. Pass &lt;code&gt;&#39;axis=1&#39;&lt;/code&gt; to process the rows instead.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; df = DataFrame([[1, 2], [3, 4]], index=[&#39;a&#39;, &#39;b&#39;], columns=[&#39;x&#39;, &#39;y&#39;])&#xA;   x  y&#xA;a  1  2&#xA;b  3  4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+-----------------+-------------+-------------+---------------+&#xA;|                 |    &#39;sum&#39;    |   [&#39;sum&#39;]   | {&#39;x&#39;: &#39;sum&#39;}  |&#xA;+-----------------+-------------+-------------+---------------+&#xA;| df.apply(…)     |             |       x  y  |               |&#xA;| df.agg(…)       |     x  4    |  sum  4  6  |     x  4      |&#xA;|                 |     y  6    |             |               |&#xA;+-----------------+-------------+-------------+---------------+&#xA;&#xA;+-----------------+-------------+-------------+---------------+&#xA;|                 |    &#39;rank&#39;   |   [&#39;rank&#39;]  | {&#39;x&#39;: &#39;rank&#39;} |&#xA;+-----------------+-------------+-------------+---------------+&#xA;| df.apply(…)     |      x  y   |      x    y |        x      |&#xA;| df.agg(…)       |   a  1  1   |   rank rank |     a  1      |&#xA;| df.transform(…) |   b  2  2   | a    1    1 |     b  2      |&#xA;|                 |             | b    2    2 |               |&#xA;+-----------------+-------------+-------------+---------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;&#39;&amp;lt;DF&amp;gt;[col_key_1, col_key_2][row_key]&#39;&lt;/code&gt; to get the fifth result&#39;s values.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;DataFrame — Plot, Encode, Decode:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt&#xA;&amp;lt;DF&amp;gt;.plot.line/bar/hist/scatter([x=column_key, y=column_key/s]); plt.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;DF&amp;gt; = pd.read_json/html(&#39;&amp;lt;str/path/url&amp;gt;&#39;)&#xA;&amp;lt;DF&amp;gt; = pd.read_csv/pickle/excel(&#39;&amp;lt;path/url&amp;gt;&#39;)&#xA;&amp;lt;DF&amp;gt; = pd.read_sql(&#39;&amp;lt;table_name/query&amp;gt;&#39;, &amp;lt;connection&amp;gt;)&#xA;&amp;lt;DF&amp;gt; = pd.read_clipboard()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;dict&amp;gt; = &amp;lt;DF&amp;gt;.to_dict([&#39;d/l/s/sp/r/i&#39;])&#xA;&amp;lt;str&amp;gt;  = &amp;lt;DF&amp;gt;.to_json/html/csv/markdown/latex([&amp;lt;path&amp;gt;])&#xA;&amp;lt;DF&amp;gt;.to_pickle/excel(&amp;lt;path&amp;gt;)&#xA;&amp;lt;DF&amp;gt;.to_sql(&#39;&amp;lt;table_name&amp;gt;&#39;, &amp;lt;connection&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GroupBy&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Object that groups together rows of a dataframe based on the value of the passed column.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; df = DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 6]], index=list(&#39;abc&#39;), columns=list(&#39;xyz&#39;))&#xA;&amp;gt;&amp;gt;&amp;gt; df.groupby(&#39;z&#39;).get_group(6)&#xA;   x  y&#xA;b  4  5&#xA;c  7  8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;GB&amp;gt; = &amp;lt;DF&amp;gt;.groupby(column_key/s)             # DF is split into groups based on passed column.&#xA;&amp;lt;DF&amp;gt; = &amp;lt;GB&amp;gt;.apply(&amp;lt;func&amp;gt;)                     # Maps each group. Func can return DF, Sr or el.&#xA;&amp;lt;GB&amp;gt; = &amp;lt;GB&amp;gt;[column_key]                       # A single column GB. All operations return a Sr.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;GroupBy — Aggregate, Transform, Map:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;DF&amp;gt; = &amp;lt;GB&amp;gt;.sum/max/mean/idxmax/all()         # Or: &amp;lt;GB&amp;gt;.agg(lambda &amp;lt;Sr&amp;gt;: &amp;lt;el&amp;gt;)&#xA;&amp;lt;DF&amp;gt; = &amp;lt;GB&amp;gt;.rank/diff/cumsum/ffill()          # Or: &amp;lt;GB&amp;gt;.transform(lambda &amp;lt;Sr&amp;gt;: &amp;lt;Sr&amp;gt;)&#xA;&amp;lt;DF&amp;gt; = &amp;lt;GB&amp;gt;.fillna(&amp;lt;el&amp;gt;)                      # Or: &amp;lt;GB&amp;gt;.transform(lambda &amp;lt;Sr&amp;gt;: &amp;lt;Sr&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; gb = df.groupby(&#39;z&#39;)&#xA;      x  y  z&#xA;3: a  1  2  3&#xA;6: b  4  5  6&#xA;   c  7  8  6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+-----------------+-------------+-------------+-------------+---------------+&#xA;|                 |    &#39;sum&#39;    |    &#39;rank&#39;   |   [&#39;rank&#39;]  | {&#39;x&#39;: &#39;rank&#39;} |&#xA;+-----------------+-------------+-------------+-------------+---------------+&#xA;| gb.agg(…)       |      x   y  |      x  y   |      x    y |        x      |&#xA;|                 |  z          |   a  1  1   |   rank rank |     a  1      |&#xA;|                 |  3   1   2  |   b  1  1   | a    1    1 |     b  1      |&#xA;|                 |  6  11  13  |   c  2  2   | b    1    1 |     c  2      |&#xA;|                 |             |             | c    2    2 |               |&#xA;+-----------------+-------------+-------------+-------------+---------------+&#xA;| gb.transform(…) |      x   y  |      x  y   |             |               |&#xA;|                 |  a   1   2  |   a  1  1   |             |               |&#xA;|                 |  b  11  13  |   b  1  1   |             |               |&#xA;|                 |  c  11  13  |   c  2  2   |             |               |&#xA;+-----------------+-------------+-------------+-------------+---------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rolling&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Object for rolling window calculations.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;R_Sr/R_DF/R_GB&amp;gt; = &amp;lt;Sr/DF/GB&amp;gt;.rolling(window_size)  # Also: `min_periods=None, center=False`.&#xA;&amp;lt;R_Sr/R_DF&amp;gt;      = &amp;lt;R_DF/R_GB&amp;gt;[column_key/s]        # Or: &amp;lt;R&amp;gt;.column_key&#xA;&amp;lt;Sr/DF/DF&amp;gt;       = &amp;lt;R_Sr/R_DF/R_GB&amp;gt;.sum/max/mean()  # Or: &amp;lt;R&amp;gt;.apply/agg(&amp;lt;agg_func/str&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Plotly&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install plotly kaleido&#xA;from plotly.express import line&#xA;&amp;lt;Figure&amp;gt; = line(&amp;lt;DF&amp;gt;, x=&amp;lt;col_name&amp;gt;, y=&amp;lt;col_name&amp;gt;)        # Or: line(x=&amp;lt;list&amp;gt;, y=&amp;lt;list&amp;gt;)&#xA;&amp;lt;Figure&amp;gt;.update_layout(margin=dict(t=0, r=0, b=0, l=0))  # Or: paper_bgcolor=&#39;rgba(0, 0, 0, 0)&#39;&#xA;&amp;lt;Figure&amp;gt;.write_html/json/image(&#39;&amp;lt;path&amp;gt;&#39;)                 # Also: &amp;lt;Figure&amp;gt;.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Covid deaths by continent:&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/web/covid_deaths.png&#34; alt=&#34;Covid Deaths&#34;&gt;&lt;/p&gt; &#xA;&lt;div id=&#34;2a950764-39fc-416d-97fe-0a6226a3095f&#34; class=&#34;plotly-graph-div&#34; style=&#34;height:340px; width:100%;&#34;&gt;&lt;/div&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;covid = pd.read_csv(&#39;https://covid.ourworldindata.org/data/owid-covid-data.csv&#39;,&#xA;                    usecols=[&#39;iso_code&#39;, &#39;date&#39;, &#39;total_deaths&#39;, &#39;population&#39;])&#xA;continents = pd.read_csv(&#39;https://gist.githubusercontent.com/stevewithington/20a69c0b6d2ff&#39;&#xA;                         &#39;846ea5d35e5fc47f26c/raw/country-and-continent-codes-list-csv.csv&#39;,&#xA;                         usecols=[&#39;Three_Letter_Country_Code&#39;, &#39;Continent_Name&#39;])&#xA;df = pd.merge(covid, continents, left_on=&#39;iso_code&#39;, right_on=&#39;Three_Letter_Country_Code&#39;)&#xA;df = df.groupby([&#39;Continent_Name&#39;, &#39;date&#39;]).sum().reset_index()&#xA;df[&#39;Total Deaths per Million&#39;] = df.total_deaths * 1e6 / df.population&#xA;df = df[df.date &amp;gt; &#39;2020-03-14&#39;]&#xA;df = df.rename({&#39;date&#39;: &#39;Date&#39;, &#39;Continent_Name&#39;: &#39;Continent&#39;}, axis=&#39;columns&#39;)&#xA;line(df, x=&#39;Date&#39;, y=&#39;Total Deaths per Million&#39;, color=&#39;Continent&#39;).show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Confirmed covid cases, Dow Jones, Gold, and Bitcoin price:&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/web/covid_cases.png&#34; alt=&#34;Covid Cases&#34;&gt;&lt;/p&gt; &#xA;&lt;div id=&#34;e23ccacc-a456-478b-b467-7282a2165921&#34; class=&#34;plotly-graph-div&#34; style=&#34;height:315px; width:100%;&#34;&gt;&lt;/div&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd&#xA;import plotly.graph_objects as go&#xA;&#xA;def main():&#xA;    display_data(wrangle_data(*scrape_data()))&#xA;&#xA;def scrape_data():&#xA;    def scrape_covid():&#xA;        url = &#39;https://covid.ourworldindata.org/data/owid-covid-data.csv&#39;&#xA;        df = pd.read_csv(url, usecols=[&#39;location&#39;, &#39;date&#39;, &#39;total_cases&#39;])&#xA;        return df[df.location == &#39;World&#39;].set_index(&#39;date&#39;).total_cases&#xA;    def scrape_yahoo(slug):&#xA;        url = f&#39;https://query1.finance.yahoo.com/v7/finance/download/{slug}&#39; + \&#xA;              &#39;?period1=1579651200&amp;amp;period2=9999999999&amp;amp;interval=1d&amp;amp;events=history&#39;&#xA;        df = pd.read_csv(url, usecols=[&#39;Date&#39;, &#39;Close&#39;])&#xA;        return df.set_index(&#39;Date&#39;).Close&#xA;    out = scrape_covid(), scrape_yahoo(&#39;BTC-USD&#39;), scrape_yahoo(&#39;GC=F&#39;), scrape_yahoo(&#39;^DJI&#39;)&#xA;    return map(pd.Series.rename, out, [&#39;Total Cases&#39;, &#39;Bitcoin&#39;, &#39;Gold&#39;, &#39;Dow Jones&#39;])&#xA;&#xA;def wrangle_data(covid, bitcoin, gold, dow):&#xA;    df = pd.concat([bitcoin, gold, dow], axis=1)  # Joins columns on dates.&#xA;    df = df.sort_index().interpolate()            # Sorts by date and interpolates NaN-s.&#xA;    df = df.loc[&#39;2020-02-23&#39;:]                    # Discards rows before &#39;2020-02-23&#39;.&#xA;    df = (df / df.iloc[0]) * 100                  # Calculates percentages relative to day 1.&#xA;    df = df.join(covid)                           # Adds column with covid cases.&#xA;    return df.sort_values(df.index[-1], axis=1)   # Sorts columns by last day&#39;s value.&#xA;&#xA;def display_data(df):&#xA;    figure = go.Figure()&#xA;    for col_name in reversed(df.columns):&#xA;        yaxis = &#39;y1&#39; if col_name == &#39;Total Cases&#39; else &#39;y2&#39;&#xA;        trace = go.Scatter(x=df.index, y=df[col_name], name=col_name, yaxis=yaxis)&#xA;        figure.add_trace(trace)&#xA;    figure.update_layout(&#xA;        yaxis1=dict(title=&#39;Total Cases&#39;, rangemode=&#39;tozero&#39;),&#xA;        yaxis2=dict(title=&#39;%&#39;, rangemode=&#39;tozero&#39;, overlaying=&#39;y&#39;, side=&#39;right&#39;),&#xA;        legend=dict(x=1.1),&#xA;        height=450&#xA;    ).show()&#xA;&#xA;if __name__ == &#39;__main__&#39;:&#xA;    main()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;PySimpleGUI&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install PySimpleGUI&#xA;import PySimpleGUI as sg&#xA;layout = [[sg.Text(&#34;What&#39;s your name?&#34;)], [sg.Input()], [sg.Button(&#39;Ok&#39;)]]&#xA;window = sg.Window(&#39;Window Title&#39;, layout)&#xA;event, values = window.read()&#xA;print(f&#39;Hello {values[0]}!&#39; if event == &#39;Ok&#39; else &#39;&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Appendix&lt;/h2&gt; &#xA;&lt;h3&gt;Cython&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Library that compiles Python code into C.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install cython&#xA;import pyximport; pyximport.install()&#xA;import &amp;lt;cython_script&amp;gt;&#xA;&amp;lt;cython_script&amp;gt;.main()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Definitions:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;All &lt;code&gt;&#39;cdef&#39;&lt;/code&gt; definitions are optional, but they contribute to the speed-up.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Script needs to be saved with a &lt;code&gt;&#39;pyx&#39;&lt;/code&gt; extension.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cdef &amp;lt;ctype&amp;gt; &amp;lt;var_name&amp;gt; = &amp;lt;el&amp;gt;&#xA;cdef &amp;lt;ctype&amp;gt;[n_elements] &amp;lt;var_name&amp;gt; = [&amp;lt;el_1&amp;gt;, &amp;lt;el_2&amp;gt;, ...]&#xA;cdef &amp;lt;ctype/void&amp;gt; &amp;lt;func_name&amp;gt;(&amp;lt;ctype&amp;gt; &amp;lt;arg_name_1&amp;gt;, ...):&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cdef class &amp;lt;class_name&amp;gt;:&#xA;    cdef public &amp;lt;ctype&amp;gt; &amp;lt;attr_name&amp;gt;&#xA;    def __init__(self, &amp;lt;ctype&amp;gt; &amp;lt;arg_name&amp;gt;):&#xA;        self.&amp;lt;attr_name&amp;gt; = &amp;lt;arg_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cdef enum &amp;lt;enum_name&amp;gt;: &amp;lt;member_name_1&amp;gt;, &amp;lt;member_name_2&amp;gt;, ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;PyInstaller&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pip3 install pyinstaller&#xA;$ pyinstaller script.py                        # Compiles into &#39;./dist/script&#39; directory.&#xA;$ pyinstaller script.py --onefile              # Compiles into &#39;./dist/script&#39; console app.&#xA;$ pyinstaller script.py --windowed             # Compiles into &#39;./dist/script&#39; windowed app.&#xA;$ pyinstaller script.py --add-data &#39;&amp;lt;path&amp;gt;:.&#39;  # Adds file to the root of the executable.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;File paths need to be updated to &lt;code&gt;&#39;os.path.join(sys._MEIPASS, &amp;lt;path&amp;gt;)&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Basic Script Template&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python3&#xA;#&#xA;# Usage: .py&#xA;#&#xA;&#xA;from sys import argv, exit&#xA;from collections import defaultdict, namedtuple&#xA;from dataclasses import make_dataclass&#xA;from enum import Enum&#xA;import functools as ft, itertools as it, operator as op, re&#xA;&#xA;&#xA;def main():&#xA;    pass&#xA;&#xA;&#xA;###&#xA;##  UTIL&#xA;#&#xA;&#xA;def read_file(filename):&#xA;    with open(filename, encoding=&#39;utf-8&#39;) as file:&#xA;        return file.readlines()&#xA;&#xA;&#xA;if __name__ == &#39;__main__&#39;:&#xA;    main()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Index&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Only available in the &lt;a href=&#34;https://transactions.sendowl.com/products/78175486/4422834F/view&#34;&gt;PDF&lt;/a&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ctrl+F / ⌘F is usually sufficient.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Searching &lt;code&gt;&#39;#&amp;lt;title&amp;gt;&#39;&lt;/code&gt; on the &lt;a href=&#34;https://gto76.github.io/python-cheatsheet/&#34;&gt;webpage&lt;/a&gt; will limit the search to the titles.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>lukas-blecher/LaTeX-OCR</title>
    <updated>2022-06-03T01:59:36Z</updated>
    <id>tag:github.com,2022-06-03:/lukas-blecher/LaTeX-OCR</id>
    <link href="https://github.com/lukas-blecher/LaTeX-OCR" rel="alternate"></link>
    <summary type="html">&lt;p&gt;pix2tex: Using a ViT to convert images of equations into LaTeX code.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pix2tex - LaTeX OCR&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lukas-blecher/LaTeX-OCR&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/lukas-blecher/LaTeX-OCR&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pix2tex.readthedocs.io/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/pix2tex/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/pix2tex&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/pix2tex?logo=pypi&#34; alt=&#34;PyPI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/pix2tex&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/pix2tex?logo=pypi&#34; alt=&#34;PyPI - Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/lukas-blecher/LaTeX-OCR/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/lukas-blecher/LaTeX-OCR/total?color=blue&amp;amp;logo=github&#34; alt=&#34;GitHub all releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/lukasblecher/pix2tex&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/lukasblecher/pix2tex?logo=docker&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://colab.research.google.com/github/lukas-blecher/LaTeX-OCR/blob/main/notebooks/LaTeX_OCR_test.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The goal of this project is to create a learning based system that takes an image of a math formula and returns corresponding LaTeX code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/55287601/109183599-69431f00-778e-11eb-9809-d42b9451e018.png&#34; alt=&#34;header&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Using the model&lt;/h2&gt; &#xA;&lt;p&gt;To run the model you need Python 3.7+&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t have PyTorch installed. Follow their instructions &lt;a href=&#34;https://pytorch.org/get-started/locally/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Install the package &lt;code&gt;pix2tex&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install pix2tex[gui]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Model checkpoints will be downloaded automatically.&lt;/p&gt; &#xA;&lt;p&gt;There are three ways to get a prediction from an image.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;You can use the command line tool by calling &lt;code&gt;pix2tex&lt;/code&gt;. Here you can parse already existing images from the disk and images in your clipboard.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/katie-lim&#34;&gt;@katie-lim&lt;/a&gt;, you can use a nice user interface as a quick way to get the model prediction. Just call the GUI with &lt;code&gt;latexocr&lt;/code&gt;. From here you can take a screenshot and the predicted latex code is rendered using &lt;a href=&#34;https://www.mathjax.org/&#34;&gt;MathJax&lt;/a&gt; and copied to your clipboard.&lt;/p&gt; &lt;p&gt;Under linux, it is possible to use the GUI with &lt;code&gt;gnome-screenshot&lt;/code&gt; which comes with multiple monitor support. You just need to run &lt;code&gt;latexocr --gnome&lt;/code&gt; (&lt;strong&gt;Note:&lt;/strong&gt; you should install &lt;code&gt;gnome-screenshot&lt;/code&gt; beforehand).&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/55287601/117812740-77b7b780-b262-11eb-81f6-fc19766ae2ae.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &lt;p&gt;If the model is unsure about the what&#39;s in the image it might output a different prediction every time you click &#34;Retry&#34;. With the &lt;code&gt;temperature&lt;/code&gt; parameter you can control this behavior (low temperature will produce the same result).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can use an API. This has additional dependencies. Install via &lt;code&gt;pip install -U pix2tex[api]&lt;/code&gt; and run&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m pix2tex.api.run&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;to start a &lt;a href=&#34;https://streamlit.io/&#34;&gt;Streamlit&lt;/a&gt; demo that connects to the API at port 8502. There is also a docker image available for the API: &lt;a href=&#34;https://hub.docker.com/r/lukasblecher/pix2tex&#34;&gt;https://hub.docker.com/r/lukasblecher/pix2tex&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/lukasblecher/pix2tex&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/lukasblecher/pix2tex?logo=docker&#34; alt=&#34;Docker Image Size (latest by date)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker pull lukasblecher/pix2tex:api&#xA;docker run --rm -p 8502:8502 lukasblecher/pix2tex:api&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To also run the streamlit demo run&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker run --rm -it -p 8501:8501 --entrypoint python lukasblecher/pix2tex:api pix2tex/api/run.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and navigate to &lt;a href=&#34;http://localhost:8501/&#34;&gt;http://localhost:8501/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The model works best with images of smaller resolution. That&#39;s why I added a preprocessing step where another neural network predicts the optimal resolution of the input image. This model will automatically resize the custom image to best resemble the training data and thus increase performance of images found in the wild. Still it&#39;s not perfect and might not be able to handle huge images optimally, so don&#39;t zoom in all the way before taking a picture.&lt;/p&gt; &#xA;&lt;p&gt;Always double check the result carefully. You can try to redo the prediction with an other resolution if the answer was wrong.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Want to use the package?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m trying to compile a documentation right now.&lt;/p&gt; &#xA;&lt;p&gt;Visit here: &lt;a href=&#34;https://pix2tex.readthedocs.io/&#34;&gt;https://pix2tex.readthedocs.io/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Training the model &lt;a href=&#34;https://colab.research.google.com/github/lukas-blecher/LaTeX-OCR/blob/main/notebooks/LaTeX_OCR_training.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Install a couple of dependencies &lt;code&gt;pip install pix2tex[train]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;First we need to combine the images with their ground truth labels. I wrote a dataset class (which needs further improving) that saves the relative paths to the images with the LaTeX code they were rendered with. To generate the dataset pickle file run&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -m pix2tex.dataset.dataset --equations path_to_textfile --images path_to_images --out dataset.pkl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use your own tokenizer pass it via &lt;code&gt;--tokenizer&lt;/code&gt; (See below).&lt;/p&gt; &#xA;&lt;p&gt;You can find my generated training data on the &lt;a href=&#34;https://drive.google.com/drive/folders/13CA4vAmOmD_I_dSbvLp-Lf0s6KiaNfuO&#34;&gt;Google Drive&lt;/a&gt; as well (formulae.zip - images, math.txt - labels). Repeat the step for the validation and test data. All use the same label text file.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Edit the &lt;code&gt;data&lt;/code&gt; (and &lt;code&gt;valdata&lt;/code&gt;) entry in the config file to the newly generated &lt;code&gt;.pkl&lt;/code&gt; file. Change other hyperparameters if you want to. See &lt;code&gt;pix2tex/model/settings/config.yaml&lt;/code&gt; for a template.&lt;/li&gt; &#xA; &lt;li&gt;Now for the actual training run&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -m pix2tex.train --config path_to_config_file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use your own data you might be interested in creating your own tokenizer with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -m pix2tex.dataset.dataset --equations path_to_textfile --vocab-size 8000 --out tokenizer.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Don&#39;t forget to update the path to the tokenizer in the config file and set &lt;code&gt;num_tokens&lt;/code&gt; to your vocabulary size.&lt;/p&gt; &#xA;&lt;h2&gt;Model&lt;/h2&gt; &#xA;&lt;p&gt;The model consist of a ViT [&lt;a href=&#34;https://raw.githubusercontent.com/lukas-blecher/LaTeX-OCR/main/#References&#34;&gt;1&lt;/a&gt;] encoder with a ResNet backbone and a Transformer [&lt;a href=&#34;https://raw.githubusercontent.com/lukas-blecher/LaTeX-OCR/main/#References&#34;&gt;2&lt;/a&gt;] decoder.&lt;/p&gt; &#xA;&lt;h3&gt;Performance&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;BLEU score&lt;/th&gt; &#xA;   &lt;th&gt;normed edit distance&lt;/th&gt; &#xA;   &lt;th&gt;token accuracy&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0.88&lt;/td&gt; &#xA;   &lt;td&gt;0.10&lt;/td&gt; &#xA;   &lt;td&gt;0.60&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Data&lt;/h2&gt; &#xA;&lt;p&gt;We need paired data for the network to learn. Luckily there is a lot of LaTeX code on the internet, e.g. &lt;a href=&#34;https://www.wikipedia.org&#34;&gt;wikipedia&lt;/a&gt;, &lt;a href=&#34;https://www.arxiv.org&#34;&gt;arXiv&lt;/a&gt;. We also use the formulae from the &lt;a href=&#34;https://zenodo.org/record/56198#.V2px0jXT6eA&#34;&gt;im2latex-100k&lt;/a&gt; [&lt;a href=&#34;https://raw.githubusercontent.com/lukas-blecher/LaTeX-OCR/main/#References&#34;&gt;3&lt;/a&gt;] dataset. All of it can be found &lt;a href=&#34;https://drive.google.com/drive/folders/13CA4vAmOmD_I_dSbvLp-Lf0s6KiaNfuO&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Dataset Requirements&lt;/h3&gt; &#xA;&lt;p&gt;In order to render the math in many different fonts we use XeLaTeX, generate a PDF and finally convert it to a PNG. For the last step we need to use some third party tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ctan.org/pkg/xetex&#34;&gt;XeLaTeX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://imagemagick.org/&#34;&gt;ImageMagick&lt;/a&gt; with &lt;a href=&#34;https://www.ghostscript.com/index.html&#34;&gt;Ghostscript&lt;/a&gt;. (for converting pdf to png)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; to run &lt;a href=&#34;https://github.com/KaTeX/KaTeX&#34;&gt;KaTeX&lt;/a&gt; (for normalizing Latex code)&lt;/li&gt; &#xA; &lt;li&gt;Python 3.7+ &amp;amp; dependencies (specified in &lt;code&gt;setup.py&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Fonts&lt;/h3&gt; &#xA;&lt;p&gt;Latin Modern Math, GFSNeohellenicMath.otf, Asana Math, XITS Math, Cambria Math&lt;/p&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; add more evaluation metrics&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; create a GUI&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; add beam search&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; support handwritten formulae (kinda done, see training colab notebook)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; reduce model size (distillation)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; find optimal hyperparameters&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; tweak model structure&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; fix data scraping and scrape more data&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; trace the model (&lt;a href=&#34;https://github.com/lukas-blecher/LaTeX-OCR/issues/2&#34;&gt;#2&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Contributions of any kind are welcome.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgment&lt;/h2&gt; &#xA;&lt;p&gt;Code taken and modified from &lt;a href=&#34;https://github.com/lucidrains&#34;&gt;lucidrains&lt;/a&gt;, &lt;a href=&#34;https://github.com/rwightman/pytorch-image-models&#34;&gt;rwightman&lt;/a&gt;, &lt;a href=&#34;https://github.com/harvardnlp/im2markup&#34;&gt;im2markup&lt;/a&gt;, &lt;a href=&#34;https://github.com/soskek/arxiv_leaks&#34;&gt;arxiv_leaks&lt;/a&gt;, &lt;a href=&#34;https://github.com/pkra/MathJax-single-file&#34;&gt;pkra: Mathjax&lt;/a&gt;, &lt;a href=&#34;https://github.com/harupy/snipping-tool&#34;&gt;harupy: snipping tool&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;p&gt;[1] &lt;a href=&#34;https://arxiv.org/abs/2010.11929&#34;&gt;An Image is Worth 16x16 Words&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;[2] &lt;a href=&#34;https://arxiv.org/abs/1706.03762&#34;&gt;Attention Is All You Need&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;[3] &lt;a href=&#34;https://arxiv.org/abs/1609.04938v2&#34;&gt;Image-to-Markup Generation with Coarse-to-Fine Attention&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cookiecutter/cookiecutter</title>
    <updated>2022-06-03T01:59:36Z</updated>
    <id>tag:github.com,2022-06-03:/cookiecutter/cookiecutter</id>
    <link href="https://github.com/cookiecutter/cookiecutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A cross-platform command-line utility that creates projects from cookiecutters (project templates), e.g. Python package projects, C projects.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cookiecutter&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pypi.org/project/cookiecutter/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/cookiecutter.svg?sanitize=true&#34; alt=&#34;pypi&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/cookiecutter/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/pyversions/cookiecutter.svg?sanitize=true&#34; alt=&#34;python&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cookiecutter/cookiecutter/actions&#34;&gt;&lt;img src=&#34;https://github.com/cookiecutter/cookiecutter/actions/workflows/main.yml/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/cookiecutter/cookiecutter?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/cookiecutter/cookiecutter/branch/master/graphs/badge.svg?branch=master&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/9BrxzPKuEW&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord-cookiecutter-5865F2?style=flat&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://readthedocs.org/projects/cookiecutter/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/cookiecutter/badge/?version=latest&#34; alt=&#34;docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/cookiecutter/cookiecutter/?branch=master&#34;&gt;&lt;img src=&#34;https://img.shields.io/scrutinizer/g/cookiecutter/cookiecutter.svg?sanitize=true&#34; alt=&#34;Code Quality&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A command-line utility that creates projects from &lt;strong&gt;cookiecutters&lt;/strong&gt; (project templates), e.g. creating a Python package project from a Python package project template.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Documentation: &lt;a href=&#34;https://cookiecutter.readthedocs.io&#34;&gt;https://cookiecutter.readthedocs.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GitHub: &lt;a href=&#34;https://github.com/cookiecutter/cookiecutter&#34;&gt;https://github.com/cookiecutter/cookiecutter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PyPI: &lt;a href=&#34;https://pypi.org/project/cookiecutter/&#34;&gt;https://pypi.org/project/cookiecutter/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Free and open source software: &lt;a href=&#34;https://github.com/cookiecutter/cookiecutter/raw/master/LICENSE&#34;&gt;BSD license&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cookiecutter/cookiecutter/3ac078356adf5a1a72042dfe72ebfa4a9cd5ef38/logo/cookiecutter_medium.png&#34; alt=&#34;Cookiecutter&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cross-platform: Windows, Mac, and Linux are officially supported.&lt;/li&gt; &#xA; &lt;li&gt;You don&#39;t have to know/write Python code to use Cookiecutter.&lt;/li&gt; &#xA; &lt;li&gt;Works with Python 3.7, 3.8, 3.9., 3.10&lt;/li&gt; &#xA; &lt;li&gt;Project templates can be in any programming language or markup format: Python, JavaScript, Ruby, CoffeeScript, RST, Markdown, CSS, HTML, you name it. You can use multiple languages in the same project template.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;For users of existing templates&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Simple command line usage:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Create project from the cookiecutter-pypackage.git repo template&#xA;# You&#39;ll be prompted to enter values.&#xA;# Then it&#39;ll create your Python package in the current working directory,&#xA;# based on those values.&#xA;$ cookiecutter https://github.com/audreyfeldroy/cookiecutter-pypackage&#xA;# For the sake of brevity, repos on GitHub can just use the &#39;gh&#39; prefix&#xA;$ cookiecutter gh:audreyfeldroy/cookiecutter-pypackage&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use it at the command line with a local template:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Create project in the current working directory, from the local&#xA;# cookiecutter-pypackage/ template&#xA;$ cookiecutter cookiecutter-pypackage/&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Or use it from Python:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from cookiecutter.main import cookiecutter&#xA;&#xA;# Create project from the cookiecutter-pypackage/ template&#xA;cookiecutter(&#39;cookiecutter-pypackage/&#39;)&#xA;&#xA;# Create project from the cookiecutter-pypackage.git repo template&#xA;cookiecutter(&#39;https://github.com/audreyfeldroy/cookiecutter-pypackage.git&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Unless you suppress it with &lt;code&gt;--no-input&lt;/code&gt;, you are prompted for input:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Prompts are the keys in &lt;code&gt;cookiecutter.json&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Default responses are the values in &lt;code&gt;cookiecutter.json&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Prompts are shown in order.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Cross-platform support for &lt;code&gt;~/.cookiecutterrc&lt;/code&gt; files:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;default_context:&#xA;  full_name: &#34;Audrey Roy Greenfeld&#34;&#xA;  email: &#34;audreyr@gmail.com&#34;&#xA;  github_username: &#34;audreyfeldroy&#34;&#xA;cookiecutters_dir: &#34;~/.cookiecutters/&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Cookiecutters (cloned Cookiecutter project templates) are put into &lt;code&gt;~/.cookiecutters/&lt;/code&gt; by default, or cookiecutters_dir if specified.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you have already cloned a cookiecutter into &lt;code&gt;~/.cookiecutters/&lt;/code&gt;, you can reference it by directory name:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Clone cookiecutter-pypackage&#xA;$ cookiecutter gh:audreyfeldroy/cookiecutter-pypackage&#xA;# Now you can use the already cloned cookiecutter by name&#xA;$ cookiecutter cookiecutter-pypackage&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can use local cookiecutters, or remote cookiecutters directly from Git repos or from Mercurial repos on Bitbucket.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Default context: specify key/value pairs that you want used as defaults whenever you generate a project.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Inject extra context with command-line arguments:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cookiecutter --no-input gh:msabramo/cookiecutter-supervisor program_name=foobar startsecs=10&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Direct access to the Cookiecutter API allows for injection of extra context.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Paths to local projects can be specified as absolute or relative.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Projects generated to your current directory or to target directory if specified with &lt;code&gt;-o&lt;/code&gt; option.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;For template creators&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Supports unlimited levels of directory nesting.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;100% of templating is done with Jinja2.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Both, directory names and filenames can be templated. For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;{{cookiecutter.repo_name}}/{{cookiecutter.repo_name}}/{{cookiecutter.repo_name}}.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Simply define your template variables in a &lt;code&gt;cookiecutter.json&lt;/code&gt; file. For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;full_name&#34;: &#34;Audrey Roy Greenfeld&#34;,&#xA;  &#34;email&#34;: &#34;audreyr@gmail.com&#34;,&#xA;  &#34;project_name&#34;: &#34;Complexity&#34;,&#xA;  &#34;repo_name&#34;: &#34;complexity&#34;,&#xA;  &#34;project_short_description&#34;: &#34;Refreshingly simple static site generator.&#34;,&#xA;  &#34;release_date&#34;: &#34;2013-07-10&#34;,&#xA;  &#34;year&#34;: &#34;2013&#34;,&#xA;  &#34;version&#34;: &#34;0.1.1&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pre- and post-generate hooks: Python or shell scripts to run before or after generating a project.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Available Cookiecutters&lt;/h2&gt; &#xA;&lt;p&gt;Making great cookies takes a lot of cookiecutters and contributors. We&#39;re so pleased that there are many Cookiecutter project templates to choose from. We hope you find a cookiecutter that is just right for your needs.&lt;/p&gt; &#xA;&lt;h3&gt;A Pantry Full of Cookiecutters&lt;/h3&gt; &#xA;&lt;p&gt;The best place to start searching for specific and ready to use cookiecutter template is &lt;a href=&#34;https://github.com/search?q=cookiecutter&amp;amp;type=Repositories&#34;&gt;Github search&lt;/a&gt;. Just type &lt;code&gt;cookiecutter&lt;/code&gt; and you will discover over 4000 related repositories.&lt;/p&gt; &#xA;&lt;p&gt;We also recommend you to check related GitHub topics. For general search use &lt;a href=&#34;https://github.com/topics/cookiecutter-template&#34;&gt;cookiecutter-template&lt;/a&gt;. For specific topics try to use &lt;code&gt;cookiecutter-yourtopic&lt;/code&gt;, like &lt;code&gt;cookiecutter-python&lt;/code&gt; or &lt;code&gt;cookiecutter-datascience&lt;/code&gt;. This is a new GitHub feature, so not all active repositories use it at the moment.&lt;/p&gt; &#xA;&lt;p&gt;If you are template developer please add related &lt;a href=&#34;https://help.github.com/en/github/administering-a-repository/classifying-your-repository-with-topics&#34;&gt;topics&lt;/a&gt; with &lt;code&gt;cookiecutter&lt;/code&gt; prefix to you repository. We believe it will make it more discoverable. You are almost not limited in topics amount, use it!&lt;/p&gt; &#xA;&lt;h3&gt;Cookiecutter Specials&lt;/h3&gt; &#xA;&lt;p&gt;These Cookiecutters are maintained by the cookiecutter team:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/audreyfeldroy/cookiecutter-pypackage&#34;&gt;cookiecutter-pypackage&lt;/a&gt;: ultimate Python package project template by &lt;a href=&#34;https://github.com/audreyfeldroy&#34;&gt;@audreyfeldroy&#39;s&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pydanny/cookiecutter-django&#34;&gt;cookiecutter-django&lt;/a&gt;: a framework for jumpstarting production-ready Django projects quickly. It is bleeding edge with Bootstrap 5, customizable users app, starter templates, working user registration, celery setup, and much more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pytest-dev/cookiecutter-pytest-plugin&#34;&gt;cookiecutter-pytest-plugin&lt;/a&gt;: Minimal Cookiecutter template for authoring &lt;a href=&#34;https://docs.pytest.org/&#34;&gt;pytest&lt;/a&gt; plugins that help you to write better programs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;The core committer team can be found in &lt;a href=&#34;https://raw.githubusercontent.com/cookiecutter/cookiecutter/master/AUTHORS.md&#34;&gt;authors section&lt;/a&gt;. We are always welcome and invite you to participate.&lt;/p&gt; &#xA;&lt;p&gt;Stuck? Try one of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See the &lt;a href=&#34;https://cookiecutter.readthedocs.io/en/latest/troubleshooting.html&#34;&gt;Troubleshooting&lt;/a&gt; page.&lt;/li&gt; &#xA; &lt;li&gt;Ask for help on &lt;a href=&#34;https://stackoverflow.com/questions/tagged/cookiecutter&#34;&gt;Stack Overflow&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You are strongly encouraged to &lt;a href=&#34;https://github.com/cookiecutter/cookiecutter/issues?q=is%3Aopen&#34;&gt;file an issue&lt;/a&gt; about the problem. Do it even if it&#39;s just &#34;I can&#39;t get it to work on this cookiecutter&#34; with a link to your cookiecutter. Don&#39;t worry about naming/pinpointing the issue properly.&lt;/li&gt; &#xA; &lt;li&gt;Ask for help on &lt;a href=&#34;https://discord.gg/9BrxzPKuEW&#34;&gt;Discord&lt;/a&gt; if you must (but please try one of the other options first, so that others can benefit from the discussion).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Development on Cookiecutter is community-driven:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Huge thanks to all the &lt;a href=&#34;https://raw.githubusercontent.com/cookiecutter/cookiecutter/master/AUTHORS.md&#34;&gt;contributors&lt;/a&gt; who have pitched in to help make Cookiecutter an even better tool.&lt;/li&gt; &#xA; &lt;li&gt;Everyone is invited to contribute. Read the &lt;a href=&#34;https://raw.githubusercontent.com/cookiecutter/cookiecutter/master/CONTRIBUTING.md&#34;&gt;contributing instructions&lt;/a&gt;, then get started.&lt;/li&gt; &#xA; &lt;li&gt;Connect with other Cookiecutter contributors and users on &lt;a href=&#34;https://discord.gg/9BrxzPKuEW&#34;&gt;Discord&lt;/a&gt; (note: due to work and other commitments, a core committer might not always be available)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Encouragement is unbelievably motivating. If you want more work done on Cookiecutter, show support:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Thank a core committer for their efforts.&lt;/li&gt; &#xA; &lt;li&gt;Star &lt;a href=&#34;https://github.com/cookiecutter/cookiecutter&#34;&gt;Cookiecutter on GitHub&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cookiecutter/cookiecutter/master/#support-this-project&#34;&gt;Support this project&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Got criticism or complaints?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cookiecutter/cookiecutter/issues?q=is%3Aopen&#34;&gt;File an issue&lt;/a&gt; so that Cookiecutter can be improved. Be friendly and constructive about what could be better. Make detailed suggestions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Keep us in the loop so that we can help.&lt;/strong&gt; For example, if you are discussing problems with Cookiecutter on a mailing list, &lt;a href=&#34;https://github.com/cookiecutter/cookiecutter/issues?q=is%3Aopen&#34;&gt;file an issue&lt;/a&gt; where you link to the discussion thread and/or cc at least 1 core committer on the email.&lt;/li&gt; &#xA; &lt;li&gt;Be encouraging. A comment like &#34;This function ought to be rewritten like this&#34; is much more likely to result in action than a comment like &#34;Eww, look how bad this function is.&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Waiting for a response to an issue/question?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Be patient and persistent. All issues are on the core committer team&#39;s radar and will be considered thoughtfully, but we have a lot of issues to work through. If urgent, it&#39;s fine to ping a core committer in the issue with a reminder.&lt;/li&gt; &#xA; &lt;li&gt;Ask others to comment, discuss, review, etc.&lt;/li&gt; &#xA; &lt;li&gt;Search the Cookiecutter repo for issues related to yours.&lt;/li&gt; &#xA; &lt;li&gt;Need a fix/feature/release/help urgently, and can&#39;t wait? &lt;a href=&#34;https://github.com/audreyfeldroy&#34;&gt;@audreyfeldroy&lt;/a&gt; is available for hire for consultation or custom development.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support This Project&lt;/h2&gt; &#xA;&lt;p&gt;This project is run by volunteers. Shortly we will be providing means for organizations and individuals to support the project.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Everyone interacting in the Cookiecutter project&#39;s codebases and documentation is expected to follow the &lt;a href=&#34;https://www.pypa.io/en/latest/code-of-conduct/&#34;&gt;PyPA Code of Conduct&lt;/a&gt;. This includes, but is not limited to, issue trackers, chat rooms, mailing lists, and other virtual or in real life communication.&lt;/p&gt; &#xA;&lt;h2&gt;Creator / Leader&lt;/h2&gt; &#xA;&lt;p&gt;This project was created and is led by &lt;a href=&#34;https://github.com/audreyfeldroy&#34;&gt;Audrey Roy Greenfeld&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;She is supported by a team of maintainers.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>iperov/DeepFaceLive</title>
    <updated>2022-06-03T01:59:36Z</updated>
    <id>tag:github.com,2022-06-03:/iperov/DeepFaceLive</id>
    <link href="https://github.com/iperov/DeepFaceLive" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Real-time face swap for PC streaming or video calls&lt;/p&gt;&lt;hr&gt;&lt;table align=&#34;center&#34; border=&#34;0&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/deepfacelive_intro.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/logo_onnx.png&#34; alt=&#34;&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/logo_directx.png&#34; alt=&#34;&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/logo_python.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;table align=&#34;center&#34; border=&#34;0&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;h2&gt;Face Swapper&lt;/h2&gt; &lt;p&gt;You can swap your face from a webcam or the face in the video using trained face models.&lt;/p&gt; &lt;p&gt;Here is a list of available ready-to-use public face models.&lt;/p&gt; &lt;p&gt;These persons do not exists. Similarities with real people are accidental. Except Keanu Reeves. He exists, and he&#39;s breathtaking!&lt;/p&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &#xA;    &lt;table align=&#34;center&#34; border=&#34;0&#34;&gt; &#xA;     &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;       &lt;td align=&#34;center&#34;&gt; Keanu Reeves &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Keanu_Reeves/Keanu_Reeves.png&#34; width=&#34;128&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Keanu_Reeves/examples.md&#34;&gt;examples&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;     &lt;/tbody&gt;&#xA;    &lt;/table&gt; &#xA;    &lt;table align=&#34;center&#34; border=&#34;0&#34;&gt; &#xA;     &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;       &lt;td align=&#34;center&#34;&gt; Ava de Addario &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Ava_de_Addario/Ava_de_Addario.png&#34; width=&#34;128&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Ava_de_Addario/examples.md&#34;&gt;examples&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;       &lt;td align=&#34;center&#34;&gt; Dilraba Dilmurat &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Dilraba_Dilmurat/Dilraba_Dilmurat.png&#34; width=&#34;128&#34;&gt;&lt;/p&gt; &lt;p&gt;examples&lt;/p&gt; &lt;/td&gt;&#xA;       &lt;td align=&#34;center&#34;&gt; Ewon Spice &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Ewon_Spice/Ewon_Spice.png&#34; width=&#34;128&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Ewon_Spice/examples.md&#34;&gt;examples&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;       &lt;td align=&#34;center&#34;&gt; Yohanna Coralson &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Yohanna_Coralson/Yohanna_Coralson.png&#34; width=&#34;128&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Yohanna_Coralson/examples.md&#34;&gt;examples&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;     &lt;/tbody&gt;&#xA;    &lt;/table&gt; &#xA;    &lt;table align=&#34;center&#34; border=&#34;0&#34;&gt; &#xA;     &lt;tbody&gt;&#xA;      &lt;tr align=&#34;center&#34;&gt;&#xA;       &lt;td align=&#34;center&#34;&gt; Kim Jarrey &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Kim_Jarrey/Kim_Jarrey.png&#34; width=&#34;128&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Kim_Jarrey/examples.md&#34;&gt;examples&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;       &lt;td&gt; David Kovalniy &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/David_Kovalniy/David_Kovalniy.png&#34; width=&#34;128&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/David_Kovalniy/examples.md&#34;&gt;examples&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;       &lt;td&gt; Matilda Bobbie &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Matilda_Bobbie/Matilda_Bobbie.png&#34; width=&#34;128&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Matilda_Bobbie/examples.md&#34;&gt;examples&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;       &lt;td&gt; Bryan Greynolds &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Bryan_Greynolds/Bryan_Greynolds.png&#34; width=&#34;128&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Bryan_Greynolds/examples.md&#34;&gt;examples&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;       &lt;td&gt; Nicola Badge &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Nicola_Badge/Nicola_Badge.png&#34; width=&#34;128&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Nicola_Badge/examples.md&#34;&gt;examples&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;     &lt;/tbody&gt;&#xA;    &lt;/table&gt; &#xA;    &lt;table align=&#34;center&#34; border=&#34;0&#34;&gt; &#xA;     &lt;tbody&gt;&#xA;      &lt;tr align=&#34;center&#34;&gt;&#xA;       &lt;td align=&#34;center&#34;&gt; Silwan Stillwone &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Silwan_Stillwone/Silwan_Stillwone.png&#34; width=&#34;128&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Silwan_Stillwone/examples.md&#34;&gt;examples&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;       &lt;td&gt; Tim Chrys &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Tim_Chrys/Tim_Chrys.png&#34; width=&#34;128&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Tim_Chrys/examples.md&#34;&gt;examples&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;       &lt;td&gt; Zahar Lupin &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Zahar_Lupin/Zahar_Lupin.png&#34; width=&#34;128&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Zahar_Lupin/examples.md&#34;&gt;examples&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;       &lt;td&gt; Tim Norland &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Tim_Norland/Tim_Norland.png&#34; width=&#34;128&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Tim_Norland/examples.md&#34;&gt;examples&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;     &lt;/tbody&gt;&#xA;    &lt;/table&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; If you want a higher quality or better face match, you can train your own face model using &lt;a href=&#34;https://github.com/iperov/DeepFaceLab&#34;&gt;DeepFaceLab&lt;/a&gt; &lt;p&gt;Here is an &lt;a href=&#34;https://www.tiktok.com/@arnoldschwarzneggar/video/6995538782204300545&#34;&gt;example&lt;/a&gt; of Arnold Schwarzneggar trained on a particular face and used in a video call. Read the FAQ for more information.&lt;/p&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;table align=&#34;center&#34; border=&#34;0&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;h2&gt;Face Animator&lt;/h2&gt; &lt;p&gt;There is also a Face Animator module in DeepFaceLive app. You can control a static face picture using video or your own face from the camera. The quality is not the best, and requires fine face matching and tuning parameters for every face pair, but enough for funny videos and memes or real-time streaming at 25 fps using 35 TFLOPS GPU.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/face_animator_example.gif&#34;&gt;&lt;/p&gt; &lt;p&gt;Here is a &lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/FaceAnimator_tutor.webm?raw=true&#34;&gt;mini video&lt;/a&gt; showing the process of setting up the Face Animator for Obama controlling Kim Chen&#39;s face.&lt;/p&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;table align=&#34;center&#34; border=&#34;0&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;h2&gt;System requirements&lt;/h2&gt; &lt;p&gt;any DirectX12 compatible graphics card&lt;/p&gt; &lt;p&gt;(Recommended RTX 2070+ / Radeon RX 5700 XT+ )&lt;/p&gt; &lt;p&gt;Modern CPU with AVX instructions&lt;/p&gt; &lt;p&gt;4GB RAM, 32GB+ paging file&lt;/p&gt; &lt;p&gt;Windows 10&lt;/p&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;h2&gt;Setup tutorial&lt;/h2&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/setup_tutorial_windows/index.md&#34;&gt;Windows 10 x64&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/build/linux&#34;&gt;Linux build info&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;Documentation&lt;/h2&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/user_faq/user_faq.md&#34;&gt;User FAQ&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/developer_faq/developer_faq.md&#34;&gt;Developer FAQ&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;h2&gt;Releases&lt;/h2&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;right&#34;&gt; &lt;p&gt;&lt;a href=&#34;https://disk.yandex.ru/d/7i5XTKIKVg5UUg&#34;&gt;Windows 10 x64 (yandex.ru)&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://mega.nz/folder/m10iELBK#Y0H6BflF9C4k_clYofC7yA&#34;&gt;Windows 10 x64 (mega.nz)&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;left&#34;&gt; Contains stand-alone zero-dependency all-in-one ready-to-use portable self-extracting folder! You don&#39;t need to install anything other than video drivers. &lt;br&gt;&lt;br&gt; DirectX12 build : NVIDIA, AMD, Intel videocards. &lt;br&gt;&lt;br&gt; NVIDIA build : NVIDIA cards only, GT730 and higher. Works faster than DX12. FaceMerger can work also on AMD/Intel. &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;h2&gt;Communication groups&lt;/h2&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;right&#34;&gt; &lt;a href=&#34;https://discord.gg/S2h7kPySQp&#34;&gt;Discord&lt;/a&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;left&#34;&gt;Official discord channel. English / Russian.&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;right&#34;&gt; &lt;a href=&#34;https://mrdeepfakes.com/forums/&#34;&gt;mrdeepfakes&lt;/a&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;left&#34;&gt;the biggest NSFW English deepfake community&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;right&#34;&gt; &lt;a href=&#34;https://www.dfldata.xyz&#34;&gt;dfldata.xyz&lt;/a&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;left&#34;&gt;中文交流论坛，免费软件教程、模型、人脸数据&lt;/td&gt;&#xA;  &lt;/tr&gt;  &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;h2&gt;How can I help the project?&lt;/h2&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; I need the computing power to train models. &lt;br&gt; If you have a free computer with 2080TI or better card with 12GB+ VRAM, you can give me remote access to it. I will train 1 model in a month. Contact me(iperov#6528) in Discord channel. &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; Register github account and push &#34;Star&#34; button. &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;!--&lt;tr&gt;&lt;td colspan=2 align=&#34;center&#34;&gt;&#xA;&lt;a href=&#34;https://www.paypal.com/paypalme/DeepFaceLab&#34;&gt;Donate via Paypal&lt;/a&gt;&#xA;&lt;/td&gt;&lt;/tr&gt;--&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;a href=&#34;https://money.yandex.ru/to/41001142318065&#34;&gt;Donate via Yandex.Money&lt;/a&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; bitcoin:bc1qewl062v70rszulml3f0mjdjrys8uxdydw3v6rq &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &#xA;    &lt;!--&#xA;    &lt;a href=&#34;https://br-stone.online&#34;&gt;&lt;img src=&#34;doc/logo_barclay_stone.png&#34;&gt;&lt;/img&gt;&lt;/a&gt;&lt;a href=&#34;https://exmo.com&#34;&gt;&lt;img src=&#34;doc/logo_exmo.png&#34;&gt;&lt;/img&gt;&lt;/a&gt;&#xA;&#xA;    presents&#xA;&#xA;    &lt;tr&gt;&lt;td align=&#34;right&#34;&gt;&#xA;&#xA;&#xA;    &lt;a href=&#34;&#34;&gt;Windows (magnet link)&lt;/a&gt;&#xA;    &lt;/td&gt;&lt;td align=&#34;center&#34;&gt;Latest release. Use torrent client to download.&lt;/td&gt;&lt;/tr&gt;&#xA;    &lt;/tr&gt;&#xA;--&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt;</summary>
  </entry>
</feed>