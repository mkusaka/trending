<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-27T01:49:07Z</updated>
  <subtitle>Weekly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>chidiwilliams/buzz</title>
    <updated>2022-11-27T01:49:07Z</updated>
    <id>tag:github.com,2022-11-27:/chidiwilliams/buzz</id>
    <link href="https://github.com/chidiwilliams/buzz" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Buzz transcribes and translates audio offline on your personal computer. Powered by OpenAI&#39;s Whisper.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Buzz&lt;/h1&gt; &#xA;&lt;p&gt;Transcribe and translate audio offline on your personal computer. Powered by OpenAI&#39;s &lt;a href=&#34;https://github.com/openai/whisper&#34;&gt;Whisper&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-green&#34; alt=&#34;MIT License&#34;&gt; &lt;a href=&#34;https://github.com/chidiwilliams/buzz/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/chidiwilliams/buzz/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/chidiwilliams/buzz&#34; alt=&#34;GitHub release (latest by date)&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chidiwilliams/buzz/main/assets/buzz-banner.jpg&#34; alt=&#34;Buzz&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Real-time transcription and translation from your computer&#39;s microphones to text (&lt;a href=&#34;https://www.loom.com/share/564b753eb4d44b55b985b8abd26b55f7&#34;&gt;Demo&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Import audio and video files and export transcripts to TXT, SRT, and VTT (&lt;a href=&#34;https://www.loom.com/share/cf263b099ac3481082bb56d19b7c87fe&#34;&gt;Demo&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install Buzz, download the &lt;a href=&#34;https://github.com/chidiwilliams/buzz/releases/latest&#34;&gt;latest version&lt;/a&gt; for your operating system. Buzz is available on &lt;strong&gt;Mac&lt;/strong&gt; and &lt;strong&gt;Windows&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Mac (macOS 11.7 and above)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download and open the &lt;code&gt;Buzz-x.y.z-dmg&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;After the installation window opens, drag the Buzz icon into the folder to add Buzz to your Applications directory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download and run the &lt;code&gt;Buzz-x.y.z.exe&lt;/code&gt; file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;h3&gt;Live Recording&lt;/h3&gt; &#xA;&lt;p&gt;To start a live recording:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Select a recording task, language, quality, and microphone.&lt;/li&gt; &#xA; &lt;li&gt;Click Record.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Transcribing audio using the default Whisper model is resource-intensive. If your computer is unable to keep up with real-time transcription, consider turning on &lt;a href=&#34;https://raw.githubusercontent.com/chidiwilliams/buzz/main/#enable-ggml-inference&#34;&gt;GGML inference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Options&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Task&lt;/td&gt; &#xA;   &lt;td&gt;&#34;Transcribe&#34;, &#34;Translate&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;Transcribe&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;Transcribe&#34; converts the input audio into text in the selected language, while &#34;Translate&#34; converts it into text in English.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Language&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://github.com/openai/whisper#available-models-and-languages&#34;&gt;Whisper&#39;s documentation&lt;/a&gt; for the full list of supported languages&lt;/td&gt; &#xA;   &lt;td&gt;&#34;Detect Language&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;Detect Language&#34; will try to detect the spoken language in the audio based on the first few seconds. However, selecting a language is recommended (if known) as it will improve transcription quality in many cases.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Quality&lt;/td&gt; &#xA;   &lt;td&gt;&#34;Very Low&#34;, &#34;Low&#34;, &#34;Medium&#34;, &#34;High&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;Very Low&#34;&lt;/td&gt; &#xA;   &lt;td&gt;The transcription quality determines the Whisper model used for transcription. &#34;Very Low&#34; uses the &#34;tiny&#34; model; &#34;Low&#34; uses the &#34;base&#34; model; &#34;Medium&#34; uses the &#34;small&#34; model; and &#34;High&#34; uses the &#34;medium&#34; model. The larger models produce higher-quality transcriptions, but require more system resources. See &lt;a href=&#34;https://github.com/openai/whisper#available-models-and-languages&#34;&gt;Whisper&#39;s documentation&lt;/a&gt; for more information about the models.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Microphone&lt;/td&gt; &#xA;   &lt;td&gt;[Available system microphones]&lt;/td&gt; &#xA;   &lt;td&gt;[Default system microphone]&lt;/td&gt; &#xA;   &lt;td&gt;Microphone for recording input audio.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.loom.com/share/564b753eb4d44b55b985b8abd26b55f7&#34; title=&#34;Live Recording on Buzz&#34;&gt;&lt;img src=&#34;https://cdn.loom.com/sessions/thumbnails/564b753eb4d44b55b985b8abd26b55f7-with-play.gif&#34; alt=&#34;Live Recording on Buzz&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Record audio playing from computer&lt;/h3&gt; &#xA;&lt;p&gt;To record audio playing from an application on your computer, you may install an audio loopback driver (a program that lets you create virtual audio devices). The rest of this guide will use &lt;a href=&#34;https://github.com/ExistentialAudio/BlackHole&#34;&gt;BlackHole&lt;/a&gt; on Mac, but you can use other alternatives for your operating system (see &lt;a href=&#34;https://nerds.de/en/loopbeaudio.html&#34;&gt;LoopBeAudio&lt;/a&gt;, &lt;a href=&#34;https://rogueamoeba.com/loopback/&#34;&gt;LoopBack&lt;/a&gt;, and &lt;a href=&#34;https://vac.muzychenko.net/en/&#34;&gt;Virtual Audio Cable&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://github.com/ExistentialAudio/BlackHole#option-2-install-via-homebrew&#34;&gt;BlackHole via Homebrew&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install blackhole-2ch&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open Audio MIDI Setup from Spotlight or from &lt;code&gt;/Applications/Utilities/Audio Midi Setup.app&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://existential.audio/howto/img/spotlight.png&#34; alt=&#34;Open Audio MIDI Setup from Spotlight&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click the &#39;+&#39; icon at the lower left corner and select &#39;Create Multi-Output Device&#39;.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://existential.audio/howto/img/createmulti-output.png&#34; alt=&#34;Create multi-output device&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add your default speaker and BlackHole to the multi-output device.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://existential.audio/howto/img/multi-output.png&#34; alt=&#34;Screenshot of multi-output device&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select this multi-output device as your speaker (application or system-wide) to play audio into BlackHole.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open Buzz, select BlackHole as your microphone, and record as before to see transcriptions from the audio playing through BlackHole.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;File import&lt;/h2&gt; &#xA;&lt;p&gt;To import a file:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Click Import on the File menu (or &lt;strong&gt;Command + O&lt;/strong&gt; on Mac, &lt;strong&gt;Ctrl + O&lt;/strong&gt; on Windows).&lt;/li&gt; &#xA; &lt;li&gt;Choose an audio or video file. Supported formats: &#34;mp3&#34;, &#34;wav&#34;, &#34;m4a&#34;, &#34;ogg&#34;, &#34;mp4&#34;, &#34;webm&#34;, &#34;ogm&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Select a task, language, quality, and export format.&lt;/li&gt; &#xA; &lt;li&gt;Click Run.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Options&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Export As&lt;/td&gt; &#xA;   &lt;td&gt;&#34;TXT&#34;, &#34;SRT&#34;, &#34;VTT&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;TXT&#34;&lt;/td&gt; &#xA;   &lt;td&gt;Export file format&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Word-Level Timings&lt;/td&gt; &#xA;   &lt;td&gt;Off / On&lt;/td&gt; &#xA;   &lt;td&gt;Off&lt;/td&gt; &#xA;   &lt;td&gt;If checked, the transcription will generate a separate subtitle line for each word in the audio. Enabled only when &#34;Export As&#34; is set to &#34;SRT&#34; or &#34;VTT&#34;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;(See the &lt;a href=&#34;https://raw.githubusercontent.com/chidiwilliams/buzz/main/#live-recording&#34;&gt;Live Recording section&lt;/a&gt; for more information about the task, language, and quality settings.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.loom.com/share/cf263b099ac3481082bb56d19b7c87fe&#34; title=&#34;Media File Import on Buzz&#34;&gt;&lt;img src=&#34;https://cdn.loom.com/sessions/thumbnails/cf263b099ac3481082bb56d19b7c87fe-with-play.gif&#34; alt=&#34;Media File Import on Buzz&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Settings&lt;/h2&gt; &#xA;&lt;h3&gt;Enable GGML inference&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;(Default: off)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Turn this on to use inference from &lt;a href=&#34;https://github.com/ggerganov/whisper.cpp&#34;&gt;Whisper.cpp&lt;/a&gt;. Whisper.cpp runs faster than Whisper&#39;s original Python implementation but requires a different set of models for inference. Whisper.cpp currently does not support the &#34;Detect Language&#34; option, and transcription will fall back to the original Whisper inference if selected. See the &lt;a href=&#34;https://github.com/ggerganov/whisper.cpp&#34;&gt;Whisper.cpp documentation&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;   &lt;th&gt;Link&lt;/th&gt; &#xA;   &lt;th&gt;SHA256&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tiny&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ggml.buzz.chidiwilliams.com/ggml-model-whisper-tiny.bin&#34;&gt;https://ggml.buzz.chidiwilliams.com/ggml-model-whisper-tiny.bin&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;be07e048e1e599ad46341c8d2a135645097a538221678b7acdd1b1919c6e1b21&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;base&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ggml.buzz.chidiwilliams.com/ggml-model-whisper-base.bin&#34;&gt;https://ggml.buzz.chidiwilliams.com/ggml-model-whisper-base.bin&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;60ed5bc3dd14eea856493d334349b405782ddcaf0028d4b5df4088345fba2efe&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;small&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ggml.buzz.chidiwilliams.com/ggml-model-whisper-small.bin&#34;&gt;https://ggml.buzz.chidiwilliams.com/ggml-model-whisper-small.bin&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1be3a9b2063867b937e64e2ec7483364a79917e157fa98c5d94b5c1fffea987b&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Build/run locally&lt;/h2&gt; &#xA;&lt;p&gt;To build/run Buzz locally from source, first install the dependencies:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone --recurse-submodules https://github.com/chidiwilliams/buzz&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://python-poetry.org/docs/#installing-with-the-official-installer&#34;&gt;Poetry&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the project dependencies.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;poetry install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(Optional) To use Whisper.cpp inference, run:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make libwhisper.so&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Then, to run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;poetry run python main.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;poetry run pyinstaller --noconfirm Buzz.spec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Where are the models stored?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The Whisper models are stored in &lt;code&gt;~/.cache/whisper&lt;/code&gt;. The Whisper.cpp models are stored in &lt;code&gt;~/Library/Caches/Buzz&lt;/code&gt; (Mac OS), &lt;code&gt;~/.cache/Buzz&lt;/code&gt; (Unix), &lt;code&gt;C:\Users/&amp;lt;username&amp;gt;\AppData\Local\Buzz\Buzz\Cache&lt;/code&gt; (Windows).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;What can I try if the transcription runs too slowly?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Try using a lower quality or turning on &lt;a href=&#34;https://raw.githubusercontent.com/chidiwilliams/buzz/main/#enable-ggml-inference&#34;&gt;GGML inference&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>TomSchimansky/CustomTkinter</title>
    <updated>2022-11-27T01:49:07Z</updated>
    <id>tag:github.com,2022-11-27:/TomSchimansky/CustomTkinter</id>
    <link href="https://github.com/TomSchimansky/CustomTkinter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern and customizable python UI-library based on Tkinter&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/customtkinter&#34; alt=&#34;PyPI&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/dm/customtkinter?color=green&amp;amp;label=pip%20downloads&#34; alt=&#34;PyPI - Downloads&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/l/customtkinter&#34; alt=&#34;PyPI - License&#34;&gt; &lt;img src=&#34;https://img.shields.io/tokei/lines/github.com/tomschimansky/customtkinter?color=green&amp;amp;label=total%20lines&#34; alt=&#34;Total lines&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;CustomTkinter UI-Library&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TomSchimansky/CustomTkinter/master/documentation_images/Windows_dark.png&#34; alt=&#34;&#34;&gt; | &lt;em&gt;&lt;code&gt;complex_example.py&lt;/code&gt; on Windows 11 with dark mode and &#39;dark-blue&#39; theme&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TomSchimansky/CustomTkinter/master/documentation_images/macOS_light.png&#34; alt=&#34;&#34;&gt; | &lt;em&gt;&lt;code&gt;complex_example.py&lt;/code&gt; on macOS in light mode and standard &#39;blue&#39; theme&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;/h3&gt; &#xA;&lt;p&gt;CustomTkinter is a python UI-library based on Tkinter, which provides new, modern and fully customizable widgets. They are created and used like normal Tkinter widgets and can also be used in combination with normal Tkinter elements. The widgets and the window colors either adapt to the system appearance or the manually set mode (&#39;light&#39;, &#39;dark&#39;), and all CustomTkinter widgets and windows support HighDPI scaling (Windows, macOS). With CustomTkinter you&#39;ll get a consistent and modern look across all desktop platforms (Windows, macOS, Linux).&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the module with pip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip3 install customtkinter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update existing installation:&lt;/strong&gt; &lt;code&gt;pip3 install customtkinter --upgrade&lt;/code&gt;&lt;br&gt; (update as often as possible because this library is under active development)&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;strong&gt;official&lt;/strong&gt; documentation can be found in the Wiki Tab here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;--&amp;gt; &lt;a href=&#34;https://github.com/TomSchimansky/CustomTkinter/wiki&#34;&gt;Documentation&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Example Program&lt;/h2&gt; &#xA;&lt;p&gt;To test customtkinter you can try this simple example with only a single button:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import customtkinter&#xA;&#xA;customtkinter.set_appearance_mode(&#34;System&#34;)  # Modes: system (default), light, dark&#xA;customtkinter.set_default_color_theme(&#34;blue&#34;)  # Themes: blue (default), dark-blue, green&#xA;&#xA;app = customtkinter.CTk()  # create CTk window like you do with the Tk window&#xA;app.geometry(&#34;400x240&#34;)&#xA;&#xA;def button_function():&#xA;    print(&#34;button pressed&#34;)&#xA;&#xA;# Use CTkButton instead of tkinter Button&#xA;button = customtkinter.CTkButton(master=app, text=&#34;CTkButton&#34;, command=button_function)&#xA;button.place(relx=0.5, rely=0.5, anchor=customtkinter.CENTER)&#xA;&#xA;app.mainloop()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which gives the following (macOS dark mode on):&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TomSchimansky/CustomTkinter/master/documentation_images/macOS_button_dark.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In the &lt;a href=&#34;https://github.com/TomSchimansky/CustomTkinter/tree/master/examples&#34;&gt;examples folder&lt;/a&gt;, you can find more example programs and in the &lt;a href=&#34;https://github.com/TomSchimansky/CustomTkinter/wiki&#34;&gt;Documentation&lt;/a&gt; you can find further information on the appearance mode, the themes and all widgets.&lt;/p&gt; &#xA;&lt;h2&gt;More Examples and Showcase&lt;/h2&gt; &#xA;&lt;h3&gt;Appearance mode change&lt;/h3&gt; &#xA;&lt;p&gt;On Windows 10/11 you get a dark window header, which changes with set appearance mode or the system, when you use &lt;code&gt;customtkinter.CTk()&lt;/code&gt; to create the window, and it works with all python versions:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TomSchimansky/CustomTkinter/master/documentation_images/Windows_system_mode_change.gif&#34; alt=&#34;&#34;&gt; | &lt;em&gt;&lt;code&gt;complex_example.py&lt;/code&gt; on Windows 11 with system mode change and standard &#39;blue&#39; theme&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;/h3&gt; &#xA;&lt;p&gt;On macOS however you either need python3.10 or higher or the anaconda python version to get a dark window header at all (Tcl/Tk &amp;gt;= 8.6.9 required).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TomSchimansky/CustomTkinter/master/documentation_images/macOS_system_mode_change.gif&#34; alt=&#34;&#34;&gt; | &lt;em&gt;&lt;code&gt;complex_example.py&lt;/code&gt; on macOS with system mode change and standard &#39;blue&#39; theme&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;Button with images&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s possible to put an image on a CTkButton. You just have to pass a PhotoImage object to the CTkButton with the &lt;code&gt;image&lt;/code&gt; argument. If you want no text at all you have to set &lt;code&gt;text=&#34;&#34;&lt;/code&gt; or you specify how to position the text and image at once with the &lt;code&gt;compound&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TomSchimansky/CustomTkinter/master/documentation_images/macOS_button_images.png&#34; alt=&#34;&#34;&gt; | &lt;em&gt;&lt;code&gt;example_button_images.py&lt;/code&gt; on macOS&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;Integration of TkinterMapView widget&lt;/h3&gt; &#xA;&lt;p&gt;In the following example I used a TkinterMapView which integrates well with a CustomTkinter program. It&#39;s a tile based map widget which displays OpenStreetMap or other tile based maps:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TomSchimansky/CustomTkinter/master/documentation_images/tkintermapview_example.gif&#34; alt=&#34;&#34;&gt; | &lt;em&gt;&lt;code&gt;examples/map_with_customtkinter.py&lt;/code&gt; from TkinterMapView repository on macOS&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can find the TkinterMapView library and the example program here: &lt;a href=&#34;https://github.com/TomSchimansky/TkinterMapView&#34;&gt;https://github.com/TomSchimansky/TkinterMapView&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>chubin/cheat.sh</title>
    <updated>2022-11-27T01:49:07Z</updated>
    <id>tag:github.com,2022-11-27:/chubin/cheat.sh</id>
    <link href="https://github.com/chubin/cheat.sh" rel="alternate"></link>
    <summary type="html">&lt;p&gt;the only cheat sheet you need&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;http://cheat.sh/files/big-logo-v2-fixed.png&#34; alt=&#34;cheat.sh logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unified access to the best community driven cheat sheets repositories of the world.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s imagine for a moment that there is such a thing as an ideal cheat sheet. What should it look like? What features should it have?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Concise&lt;/strong&gt; — It should only contain the things you need, and nothing else.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt; — It should be possible to use it instantly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Comprehensive&lt;/strong&gt; — It should contain answers for every possible question.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Universal&lt;/strong&gt; — It should be available everywhere, anytime, without any preparations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Unobtrusive&lt;/strong&gt; — It should not distract you from your main task.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tutoring&lt;/strong&gt; — It should help you to learn the subject.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Inconspicuous&lt;/strong&gt; — It should be possible to use it completely unnoticed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Such a thing exists! It&#39;s easy to &lt;a href=&#34;https://raw.githubusercontent.com/chubin/cheat.sh/master/#installation&#34;&gt;install&lt;/a&gt; and there&#39;s even &lt;a href=&#34;https://raw.githubusercontent.com/chubin/cheat.sh/master/#tab-completion&#34;&gt;auto-complete&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;cheat.sh&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Has a simple curl/browser/editor interface.&lt;/li&gt; &#xA; &lt;li&gt;Covers 56 programming languages, several DBMSes, and more than 1000 most important UNIX/Linux commands.&lt;/li&gt; &#xA; &lt;li&gt;Provides access to the best community driven cheat sheets repositories in the world, on par with StackOverflow.&lt;/li&gt; &#xA; &lt;li&gt;Available everywhere, no installation needed, but can be installed for offline usage.&lt;/li&gt; &#xA; &lt;li&gt;Ultrafast, returns answers within 100 ms, as a rule.&lt;/li&gt; &#xA; &lt;li&gt;Has a convenient command line client, &lt;code&gt;cht.sh&lt;/code&gt;, that is very advantageous and helpful, though not mandatory.&lt;/li&gt; &#xA; &lt;li&gt;Can be used directly from code editors, without opening a browser and not switching your mental context.&lt;/li&gt; &#xA; &lt;li&gt;Supports a special stealth mode where it can be used fully invisibly without ever touching a key and making sounds.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://cheat.sh/files/demo-curl.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chubin/cheat.sh/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chubin/cheat.sh/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chubin/cheat.sh/master/#command-line-client-chtsh&#34;&gt;Command line client, cht.sh&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chubin/cheat.sh/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chubin/cheat.sh/master/#client-usage&#34;&gt;Client usage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chubin/cheat.sh/master/#tab-completion&#34;&gt;Tab-completion&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chubin/cheat.sh/master/#bash-tab-completion&#34;&gt;Bash Tab completion&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chubin/cheat.sh/master/#zsh-tab-completion&#34;&gt;ZSH Tab completion&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chubin/cheat.sh/master/#stealth-mode&#34;&gt;Stealth mode&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chubin/cheat.sh/master/#windows-command-line-client&#34;&gt;Windows command line client&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chubin/cheat.sh/master/#self-hosting&#34;&gt;Self-Hosting&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chubin/cheat.sh/master/#docker&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chubin/cheat.sh/master/#editors-integration&#34;&gt;Editors integration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chubin/cheat.sh/master/#vim&#34;&gt;Vim&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chubin/cheat.sh/master/#emacs&#34;&gt;Emacs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chubin/cheat.sh/master/#visual-studio-code&#34;&gt;Visual Studio Code&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chubin/cheat.sh/master/#sublime&#34;&gt;Sublime&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chubin/cheat.sh/master/#intellij-idea&#34;&gt;IntelliJ IDEA&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chubin/cheat.sh/master/#qtcreator&#34;&gt;QT Creator&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chubin/cheat.sh/master/#special-pages&#34;&gt;Special pages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chubin/cheat.sh/master/#search&#34;&gt;Search&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chubin/cheat.sh/master/#programming-languages-cheat-sheets&#34;&gt;Programming languages cheat sheets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chubin/cheat.sh/master/#cheat-sheets-sources&#34;&gt;Cheat sheets sources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chubin/cheat.sh/master/#how-to-contribute&#34;&gt;How to contribute&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chubin/cheat.sh/master/#how-to-edit-a-cheat-sheet&#34;&gt;How to edit a cheat sheet&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chubin/cheat.sh/master/#how-to-add-a-cheat-sheet&#34;&gt;How to add a cheat sheet&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chubin/cheat.sh/master/#how-to-add-a-cheat-sheet-repository&#34;&gt;How to add a cheat sheet repository&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To get a cheat sheet for a UNIX/Linux command from a command line, query the service using &lt;code&gt;curl&lt;/code&gt; or any other HTTP/HTTPS client specifying the name of the command in the query:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    curl cheat.sh/tar&#xA;    curl cht.sh/curl&#xA;    curl https://cheat.sh/rsync&#xA;    curl https://cht.sh/tr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see, you can use both HTTPS and HTTP to access the service, and both the long (cheat.sh) and the short (cht.sh) service names.&lt;/p&gt; &#xA;&lt;p&gt;Here &lt;code&gt;tar&lt;/code&gt;, &lt;code&gt;curl&lt;/code&gt;, &lt;code&gt;rsync&lt;/code&gt;, and &lt;code&gt;tr&lt;/code&gt; are names of the UNIX/Linux commands you want to get cheat sheets for.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t know the name of the command you need, you can search for it using the &lt;code&gt;~KEYWORD&lt;/code&gt; notation. For example, to see how you can make &lt;code&gt;snapshots&lt;/code&gt; of a filesystem/volume/something else:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    curl cht.sh/~snapshot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://cheat.sh/files/cht.sh-url-structure.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;The programming language cheat sheets are located in special namespaces dedicated to them.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    curl cht.sh/go/Pointers&#xA;    curl cht.sh/scala/Functions&#xA;    curl cht.sh/python/lambda&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get the list of available programming language cheat sheets, use the special query &lt;code&gt;:list&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    curl cht.sh/go/:list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Almost each programming language has a special page named &lt;code&gt;:learn&lt;/code&gt; that describes the language basics (that&#39;s a direct mapping from the &lt;em&gt;&#34;Learn X in Y&#34;&lt;/em&gt; project). It could be a good starting point if you&#39;ve just started learning a language.&lt;/p&gt; &#xA;&lt;p&gt;If there is no cheat sheet for a programming language query (and it is almost always the case), it is generated on the fly, based on available cheat sheets and answers on StackOverflow. Of course, there is no guarantee that the returned cheat sheet will be a 100% hit, but it is almost always exactly what you are looking for.&lt;/p&gt; &#xA;&lt;p&gt;Try these (and your own) queries to get the impression of that, what the answers look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    curl cht.sh/go/reverse+a+list&#xA;    curl cht.sh/python/random+list+elements&#xA;    curl cht.sh/js/parse+json&#xA;    curl cht.sh/lua/merge+tables&#xA;    curl cht.sh/clojure/variadic+function&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t like an answer for your queries, you can pick another one. For that, repeat the query with an additional parameter &lt;code&gt;/1&lt;/code&gt;, &lt;code&gt;/2&lt;/code&gt; etc. appended:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    curl cht.sh/python/random+string&#xA;    curl cht.sh/python/random+string/1&#xA;    curl cht.sh/python/random+string/2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Cheat sheets are formatted as code of the queried programming language (at least we are trying our best to do so) so they can be pasted into a program in this language directly. Text comments, if there are any, are formatted according to the language syntax.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    $ curl cht.sh/lua/table+keys&#xA;    -- lua: retrieve list of keys in a table&#xA;&#xA;    local keyset={}&#xA;    local n=0&#xA;&#xA;    for k,v in pairs(tab) do&#xA;      n=n+1&#xA;      keyset[n]=k&#xA;    end&#xA;&#xA;    --[[&#xA;       [ Note that you cannot guarantee any order in keyset. If you want the&#xA;       [ keys in sorted order, then sort keyset with table.sort(keyset).&#xA;       [ &#xA;       [ [lhf] [so/q/12674345] [cc by-sa 3.0]&#xA;       ]]&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t need text comments in the answer, you can eliminate them using a special option &lt;code&gt;\?Q&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    $ curl cht.sh/lua/table+keys\?Q&#xA;    local keyset={}&#xA;    local n=0&#xA;&#xA;    for k,v in pairs(tab) do&#xA;      n=n+1&#xA;      keyset[n]=k&#xA;    end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And if you don&#39;t need syntax highlighting, switch it off using &lt;code&gt;\?T&lt;/code&gt;. You can combine the options together:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    curl cht.sh/go/reverse+a+list\?Q&#xA;    curl cht.sh/python/random+list+elements\?Q&#xA;    curl cht.sh/js/parse+json\?Q&#xA;    curl cht.sh/lua/merge+tables\?QT&#xA;    curl cht.sh/clojure/variadic+function\?QT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Full list of all options described below and in &lt;code&gt;/:help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Try your own queries. Follow these rules:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Try to be more specific (&lt;code&gt;/python/append+file&lt;/code&gt; is better than &lt;code&gt;/python/file&lt;/code&gt; and &lt;code&gt;/python/append&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Ask practical question if possible (yet theoretical question are possible too).&lt;/li&gt; &#xA; &lt;li&gt;Ask programming language questions only; specify the name of the programming language as the section name.&lt;/li&gt; &#xA; &lt;li&gt;Separate words with &lt;code&gt;+&lt;/code&gt; instead of spaces.&lt;/li&gt; &#xA; &lt;li&gt;Do not use special characters, they are ignored anyway.&lt;/li&gt; &#xA; &lt;li&gt;If you want to eliminate cheat sheets containing some word, add it to the query with &lt;code&gt;+-&lt;/code&gt;: &lt;code&gt;python/multiply+matrices+-numpy&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Read more about the programming languages queries below.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Command line client, cht.sh&lt;/h2&gt; &#xA;&lt;p&gt;The cheat.sh service has its own command line client (&lt;code&gt;cht.sh&lt;/code&gt;) that has several useful features compared to querying the service directly with &lt;code&gt;curl&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Special shell mode with a persistent queries context and readline support.&lt;/li&gt; &#xA; &lt;li&gt;Queries history.&lt;/li&gt; &#xA; &lt;li&gt;Clipboard integration.&lt;/li&gt; &#xA; &lt;li&gt;Tab completion support for shells (bash, fish, zsh).&lt;/li&gt; &#xA; &lt;li&gt;Stealth mode.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;To install the client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PATH_DIR=&#34;$HOME/bin&#34;  # or another directory on your $PATH&#xA;mkdir -p &#34;$PATH_DIR&#34;&#xA;curl https://cht.sh/:cht.sh &amp;gt; &#34;$PATH_DIR/cht.sh&#34;&#xA;chmod +x &#34;$PATH_DIR/cht.sh&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or to install it globally (for all users):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -s https://cht.sh/:cht.sh | sudo tee /usr/local/bin/cht.sh &amp;amp;&amp;amp; sudo chmod +x /usr/local/bin/cht.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: The package &#34;rlwrap&#34; is a required dependency to run in shell mode. Install this using &lt;code&gt;sudo apt install rlwrap&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Client usage&lt;/h3&gt; &#xA;&lt;p&gt;Now, you can use &lt;code&gt;cht.sh&lt;/code&gt; instead of &lt;code&gt;curl&lt;/code&gt;, and write your queries in more natural way, with spaces instead of &lt;code&gt;+&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $ cht.sh go reverse a list&#xA;    $ cht.sh python random list elements&#xA;    $ cht.sh js parse json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is even more convenient to start the client in a special shell mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $ cht.sh --shell&#xA;    cht.sh&amp;gt; go reverse a list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If all your queries are about the same language, you can change the context and spare repeating the programming language name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $ cht.sh --shell&#xA;    cht.sh&amp;gt; cd go&#xA;    cht.sh/go&amp;gt; reverse a list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or even start the client in this context:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $ cht.sh --shell go&#xA;    cht.sh/go&amp;gt; reverse a list&#xA;    ...&#xA;    cht.sh/go&amp;gt; join a list&#xA;    ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to change the context, you can do it with the &lt;code&gt;cd&lt;/code&gt; command, or if you want do a single query for some other language, just prepend it with &lt;code&gt;/&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $ cht.sh --shell go&#xA;    ...&#xA;    cht.sh/go&amp;gt; /python dictionary comprehension&#xA;    ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to copy the last answer into the clipboard, you can use the &lt;code&gt;c&lt;/code&gt; (&lt;code&gt;copy&lt;/code&gt;) command, or &lt;code&gt;C&lt;/code&gt; (&lt;code&gt;ccopy&lt;/code&gt;, without comments).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    cht.sh/python&amp;gt; append file&#xA;    #  python - How do you append to a file?&#xA;&#xA;    with open(&#34;test.txt&#34;, &#34;a&#34;) as myfile:&#xA;        myfile.write(&#34;appended text&#34;)&#xA;    cht.sh/python&amp;gt; C&#xA;    copy: 2 lines copied to the selection&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Type &lt;code&gt;help&lt;/code&gt; for other internal &lt;code&gt;cht.sh&lt;/code&gt; commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;cht.sh&amp;gt; help&#xA;&#x9;help    - show this help&#xA;&#x9;hush    - do not show the &#39;help&#39; string at start anymore&#xA;&#x9;cd LANG - change the language context&#xA;&#x9;copy    - copy the last answer in the clipboard (aliases: yank, y, c)&#xA;&#x9;ccopy   - copy the last answer w/o comments (cut comments; aliases: cc, Y, C)&#xA;&#x9;exit    - exit the cheat shell (aliases: quit, ^D)&#xA;&#x9;id [ID] - set/show an unique session id (&#34;reset&#34; to reset, &#34;remove&#34; to remove)&#xA;&#x9;stealth - stealth mode (automatic queries for selected text)&#xA;&#x9;update  - self update (only if the scriptfile is writeable)&#xA;&#x9;version - show current cht.sh version&#xA;&#x9;/:help  - service help&#xA;&#x9;QUERY   - space separated query staring (examples are below)&#xA;&#x9;&#x9;&#x9;&#x9;  cht.sh&amp;gt; python zip list&#xA;&#x9;&#x9;&#x9;&#x9;  cht.sh/python&amp;gt; zip list&#xA;&#x9;&#x9;&#x9;&#x9;  cht.sh/go&amp;gt; /python zip list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;cht.sh&lt;/code&gt; client has its configuration file which is located at &lt;code&gt;~/.cht.sh/cht.sh.conf&lt;/code&gt; (location of the file can be overridden by the environment variable &lt;code&gt;CHTSH_CONF&lt;/code&gt;). Use it to specify query options that you would use with each query. For example, to switch syntax highlighting off create the file with the following content:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CHTSH_QUERY_OPTIONS=&#34;T&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you want to use a special syntax highlighting theme:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CHTSH_QUERY_OPTIONS=&#34;style=native&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(&lt;code&gt;curl cht.sh/:styles-demo&lt;/code&gt; to see all supported styles).&lt;/p&gt; &#xA;&lt;p&gt;Other cht.sh configuration parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CHTSH_CURL_OPTIONS=&#34;-A curl&#34;        # curl options used for cht.sh queries&#xA;CHTSH_URL=https://cht.sh            # URL of the cheat.sh server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Tab completion&lt;/h3&gt; &#xA;&lt;h4&gt;Bash Tab completion&lt;/h4&gt; &#xA;&lt;p&gt;To activate tab completion support for &lt;code&gt;cht.sh&lt;/code&gt;, add the &lt;code&gt;:bash_completion&lt;/code&gt; script to your &lt;code&gt;~/.bashrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    curl https://cheat.sh/:bash_completion &amp;gt; ~/.bash.d/cht.sh&#xA;    . ~/.bash.d/cht.sh&#xA;    # and add . ~/.bash.d/cht.sh to ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ZSH Tab completion&lt;/h4&gt; &#xA;&lt;p&gt;To activate tab completion support for &lt;code&gt;cht.sh&lt;/code&gt;, add the &lt;code&gt;:zsh&lt;/code&gt; script to the &lt;em&gt;fpath&lt;/em&gt; in your &lt;code&gt;~/.zshrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;    curl https://cheat.sh/:zsh &amp;gt; ~/.zsh.d/_cht&#xA;    echo &#39;fpath=(~/.zsh.d/ $fpath)&#39; &amp;gt;&amp;gt; ~/.zshrc&#xA;    # Open a new shell to load the plugin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Stealth mode&lt;/h3&gt; &#xA;&lt;p&gt;Being used fully unnoticed is one of the most important property of any cheat sheet.&lt;/p&gt; &#xA;&lt;p&gt;cheat.sh can be used completely unnoticed too. The cheat.sh client, &lt;code&gt;cht.sh&lt;/code&gt;, has a special mode, called &lt;strong&gt;stealth mode&lt;/strong&gt;. Using that, you don&#39;t even need to touch your keyboard to open a cheat sheet.&lt;/p&gt; &#xA;&lt;p&gt;In this mode, as soon as you select some text with the mouse (and thus adding it into the selection buffer of X Window System or into the clipboard) it&#39;s used as a query string for cheat.sh, and the correspondent cheat sheet is automatically shown.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s imagine, that you are having an online interview, where your interviewer asks you some questions using a shared document (say Google Docs) and you are supposed to write your coding answers there (it&#39;s possible too that you&#39;ll type in the questions on your own, just to show to the interviewer that you&#39;ve heard it right).&lt;/p&gt; &#xA;&lt;p&gt;When using the stealth mode of &lt;code&gt;cht.sh&lt;/code&gt;, the only thing you need to do in order to see a cheat sheet for some question, is to select the question using the mouse. If you don&#39;t want any text in the answers and the only thing you need is code, use the &lt;code&gt;Q&lt;/code&gt; option when starting the stealth mode.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://cheat.sh/files/stealth-mode.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;You: Hi!                                            | $ cht.sh --shell python&#xA;She: Hi!                                            | cht.sh/python&amp;gt; stealth Q&#xA;She: Are you ready for a small interview?           | stealth: you are in the stealth mode; select any text&#xA;She: Just a couple of questions                     | stealth: selections longer than 5 words are ignored&#xA;She: We will talk about python                      | stealth: query arguments: ?Q&#xA;She: Let&#39;s start from something simple.             | stealth: use ^C to leave this mode&#xA;She: Do you know how to reverse a list in python?   |&#xA;You: Sure                                           |&#xA;You: (selecting &#34;reverse a list&#34;)                   | stealth: reverse a list&#xA;                                                    | reverse_lst = lst[::-1]&#xA;You: lst[::-1]?                                     |&#xA;She: Good.                                          |&#xA;She: Do you know how to chain a list of lists?      |&#xA;You: (selecting &#34;chain a list of lists&#34;)            | stealth: chain a list of lists&#xA;                                                    | import itertools&#xA;                                                    | a = [[&#34;a&#34;,&#34;b&#34;], [&#34;c&#34;]]&#xA;                                                    | print list(itertools.chain.from_iterable(a))&#xA;You: May I use external modules?                    |&#xA;She: What module do you want to use?                |&#xA;You: itertools                                      |&#xA;She: Yes, you may use it                            |&#xA;You: Ok, then:                                      |&#xA;You: itertools.chain.from_iterable(a)               |&#xA;She: Good. Let&#39;s try something harder.              |&#xA;She: What about quicksort implementation?           |&#xA;You: (selecting &#34;quicksort implementation&#34;)         | stealth: quicksort implementation&#xA;You: Let me think about it.                         | (some big and clumsy lowlevel implementation shown)&#xA;You: Well...(starting typing it in)                 | def sort(array=[12,4,5,6,7,3,1,15]):&#xA;                                                    |     less = []&#xA;She: (seeing your ugly pascal style)                |     equal = []&#xA;She: Could you write it more concise?               |     greater = []&#xA;                                                    |     if len(array) &amp;gt; 1:&#xA;You: What do you mean?                              |         pivot = array[0]&#xA;                                                    |         for x in array:&#xA;She: I mean,                                        |             if x &amp;lt; pivot: less.append(x)&#xA;She: do you really need all these ifs and fors?     |             if x == pivot: equal.append(x)&#xA;She: Could you maybe just use filter instead?       |             if x &amp;gt; pivot: greater.append(x)&#xA;                                                    |         return sort(less)+equal+sort(greater)&#xA;You: quicksort with filter?                         |     else:&#xA;                                                    |         return array&#xA;She: Yes                                            |&#xA;You: (selecting &#34;quicksort with filter&#34;)            | stealth: quicksort with filter&#xA;You: Ok, I will try.                                | return qsort(filter(lt, L[1:]))+[pivot] \&#xA;You: Something like this?                           |     +qsort(filter(ge, L[1:]))&#xA;You: qsort(filter(lt, L[1:]))+[pivot] \             |&#xA;       + qsort(filter(ge, L[1:]))                   |&#xA;                                                    |&#xA;She: Yes! Perfect! Exactly what I wanted to see!    |&#xA;                                                    |&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of course, this is just for fun, and you should never cheat in your coding interviews, because you know what happens when you do.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://cheat.sh/files/when-you-lie-katze.png&#34; alt=&#34;when you lie in your interview&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Windows command line client&lt;/h3&gt; &#xA;&lt;p&gt;You can access cheat.sh from Windows command line too.&lt;/p&gt; &#xA;&lt;p&gt;Use cheat.sh command line client for that: &lt;a href=&#34;https://github.com/tpanj/cht.exe&#34;&gt;&lt;code&gt;cht.exe&lt;/code&gt;&lt;/a&gt;. It supports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;output colorization;&lt;/li&gt; &#xA; &lt;li&gt;command line options;&lt;/li&gt; &#xA; &lt;li&gt;its own configuration file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also use &lt;a href=&#34;https://github.com/lukesampson/scoop&#34;&gt;&lt;code&gt;scoop&lt;/code&gt;&lt;/a&gt; command-line installer for Windows to get it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-batch&#34;&gt;scoop install cht&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Self-Hosting&lt;/h2&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;Currently, the easiest way to get a self-hosted instance running is by using the &lt;code&gt;docker-compose.yml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This builds and runs the image with baked in cheatsheets and starts the app and a Redis instance to back it, making the service available at &lt;a href=&#34;http://localhost:8002&#34;&gt;http://localhost:8002&lt;/a&gt; This is currently an early implementation and should probably not be used for anything outside of internal/dev/personal use right now.&lt;/p&gt; &#xA;&lt;h2&gt;Editors integration&lt;/h2&gt; &#xA;&lt;p&gt;You can use &lt;em&gt;cheat.sh&lt;/em&gt; directly from the editor (&lt;em&gt;Emacs&lt;/em&gt;, &lt;em&gt;Sublime&lt;/em&gt;, &lt;em&gt;Vim&lt;/em&gt;, and &lt;em&gt;Visual Studio Code&lt;/em&gt; are currently supported; not all features are supported by all plugins though; see below). Instead of opening your browser, googling, browsing Stack Overflow and eventually copying the code snippets you need into the clipboard and later pasting them into the editor, you can achieve the same instantly and without leaving the editor at all!&lt;/p&gt; &#xA;&lt;p&gt;Here is what it looks like in Vim:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If you have a question while editing a program, you can just type your question directly in the buffer and press &lt;code&gt;&amp;lt;leader&amp;gt;KK&lt;/code&gt;. You will get the answer to your question in pager. (with &lt;code&gt;&amp;lt;leader&amp;gt;KB&lt;/code&gt; you&#39;ll get the answer in a separate buffer).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you like the answer, you can manually paste it from the buffer or the pager, or if you are lazy you can use &lt;code&gt;&amp;lt;leader&amp;gt;KP&lt;/code&gt; to paste it below/under your question (or replace you question using &lt;code&gt;&amp;lt;leader&amp;gt;KR&lt;/code&gt;). If you want the answer without the comments, &lt;code&gt;&amp;lt;leader&amp;gt;KC&lt;/code&gt; replays the last query toggling them.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you use some static analysis plugin such as &lt;em&gt;syntastic&lt;/em&gt; (for Vim), you can use its warning and error messages as cheat.sh queries: place the cursor on the problem line and press &lt;code&gt;&amp;lt;leader&amp;gt;KE&lt;/code&gt;: explanation for the warning will be opened in a new buffer.&lt;/p&gt; &#xA;&lt;p&gt;Features supported by cheat.sh plugins for different editors:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Emacs&lt;/th&gt; &#xA;   &lt;th&gt;Sublime&lt;/th&gt; &#xA;   &lt;th&gt;Vim&lt;/th&gt; &#xA;   &lt;th&gt;VSCode&lt;/th&gt; &#xA;   &lt;th&gt;IDEA&lt;/th&gt; &#xA;   &lt;th&gt;QtCreator&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Command queries&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Queries from buffer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Toggle comments&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Prev/next answer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Multiple answers&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Warnings as queries&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Queries history&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Session id&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Configurable server&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Vim&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dbeniamine/cheat.sh-vim&#34;&gt;cheat.sh-vim&lt;/a&gt; — Vim support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is Vim configuration example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; some configuration above ...&#xA;&#xA;let mapleader=&#34; &#34;&#xA;&#xA;call vundle#begin()&#xA;Bundle &#39;gmarik/vundle&#39;&#xA;Bundle &#39;scrooloose/syntastic&#39;&#xA;Bundle &#39;dbeniamine/cheat.sh-vim&#39;&#xA;call vundle#end()&#xA;&#xA;let g:syntastic_javascript_checkers = [ &#39;jshint&#39; ]&#xA;let g:syntastic_ocaml_checkers = [&#39;merlin&#39;]&#xA;let g:syntastic_python_checkers = [&#39;pylint&#39;]&#xA;let g:syntastic_shell_checkers = [&#39;shellcheck&#39;]&#xA;&#xA;&#34; some configuration below ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example, several Vim plugins are used:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/VundleVim/Vundle.vim&#34;&gt;gmarik/vundle&lt;/a&gt; — Vim plugin manager&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vim-syntastic/syntastic&#34;&gt;scrooloose/syntastic&lt;/a&gt; — Syntax checking plugin&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dbeniamine/cheat.sh-vim&#34;&gt;cheat.sh-vim&lt;/a&gt; — Vim support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Syntastic shows warnings and errors (found by code analysis tools: &lt;code&gt;jshint&lt;/code&gt;, &lt;code&gt;merlin&lt;/code&gt;, &lt;code&gt;pylint&lt;/code&gt;, &lt;code&gt;shellcheck&lt;/code&gt; etc.), and &lt;code&gt;cheat.sh-vim&lt;/code&gt; shows you explanations for the errors and warnings and answers on programming languages queries written in the editor.&lt;/p&gt; &#xA;&lt;p&gt;Watch a demo, where the most important features of the cheat.sh Vim plugin are shown (5 Min):&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://cheat.sh/files/vim-demo.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Or, if you want to scroll and/or pause, the same on YouTube:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=xyf6MJ0y-z8&#xA;  &#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/xyf6MJ0y-z8/0.jpg&#34; alt=&#34;cheat.sh-vim: Using cheat.sh from vim&#34; width=&#34;700&#34; height=&#34;490&#34; border=&#34;10&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;!-- [![asciicast](https://asciinema.org/a/c6QRIhus7np2OOQzmQ2RNXzRZ.png)](https://asciinema.org/a/c6QRIhus7np2OOQzmQ2RNXzRZ) --&gt; &#xA;&lt;h3&gt;Emacs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/davep/cheat-sh.el&#34;&gt;cheat-sh.el&lt;/a&gt; — Emacs support (available also at cheat.sh/:emacs)&lt;/li&gt; &#xA; &lt;li&gt;cheat.sh/:emacs-ivy — Emacs support for ivy users&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/3xvqwrsu9g4taj5w526sb2t35&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/3xvqwrsu9g4taj5w526sb2t35.png&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Visual Studio Code&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mre/vscode-snippet&#34;&gt;vscode-snippet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install it from &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=vscode-snippet.Snippet&#34;&gt;VSCode Marketplace&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Hit &lt;kbd&gt;⌘ Command&lt;/kbd&gt; + &lt;kbd&gt;⇧ Shift&lt;/kbd&gt; + &lt;kbd&gt;p&lt;/kbd&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;Snippet: Find&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Type your query and hit enter.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mre/vscode-snippet&#34;&gt;&lt;img src=&#34;https://cheat.sh/files/vscode-snippet-demo.gif&#34; alt=&#34;vscode-snippet&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;(GIF courtesy: Matthias Endler, @mre)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Sublime&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gauravk-in/cheat.sh-sublime-plugin/&#34;&gt;cheat.sh-sublime-plugin&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Write your query string.&lt;/li&gt; &#xA; &lt;li&gt;Select the query string.&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;kbd&gt;Cmd&lt;/kbd&gt; + &lt;kbd&gt;⇧ Shift&lt;/kbd&gt; + &lt;kbd&gt;B&lt;/kbd&gt; to replace the selected query string by the answer generated from &lt;code&gt;cht.sh&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gauravk-in/cheat.sh-sublime-plugin&#34;&gt;&lt;img src=&#34;https://cheat.sh/files/demo-sublime.gif&#34; alt=&#34;cheat.sh-sublime-plugin-demo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;(GIF courtesy: Gaurav Kukreja, @gauravk-in)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;IntelliJ IDEA&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/szymonprz/idea-cheatsh-plugin&#34;&gt;idea-cheatsh-plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install from &lt;a href=&#34;https://plugins.jetbrains.com/plugin/11942-cheat-sh-code-snippets&#34;&gt;idea plugins marketplace&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Write query string&lt;/li&gt; &#xA; &lt;li&gt;Select the query string&lt;/li&gt; &#xA; &lt;li&gt;Press keyboard shortcut &lt;kbd&gt;Alt&lt;/kbd&gt; + &lt;kbd&gt;C&lt;/kbd&gt; , &lt;kbd&gt;S&lt;/kbd&gt; to replace the selected query string by the answer&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/szymonprz/idea-cheatsh-plugin&#34;&gt;&lt;img src=&#34;https://cheat.sh/files/idea-demo.gif&#34; alt=&#34;idea-cheatsh-plugin&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;(GIF courtesy: Szymon Przebierowski, @szymonprz)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;QtCreator&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pozemka/cheatsh-qtcreator&#34;&gt;cheatsh-qtcreator&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Current features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;search word under cursor&lt;/li&gt; &#xA; &lt;li&gt;search selected&lt;/li&gt; &#xA; &lt;li&gt;query search&lt;/li&gt; &#xA; &lt;li&gt;disable comments&lt;/li&gt; &#xA; &lt;li&gt;paste answer (?TQ version)&lt;/li&gt; &#xA; &lt;li&gt;custom server URL&lt;/li&gt; &#xA; &lt;li&gt;custom search context (default is cpp)&lt;/li&gt; &#xA; &lt;li&gt;hotkeys and menu&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pozemka/cheatsh-qtcreator&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1259724/73876361-ecce5d00-4867-11ea-9f75-c5b127a9739c.gif&#34; alt=&#34;cheatsh-qtcreator&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;(GIF courtesy: Pozemka, @pozemka)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Special pages&lt;/h2&gt; &#xA;&lt;p&gt;There are several special pages that are not cheat sheets. Their names start with colon and have special meaning.&lt;/p&gt; &#xA;&lt;p&gt;Getting started:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    :help               description of all special pages and options&#xA;    :intro              cheat.sh introduction, covering the most important usage questions&#xA;    :list               list all cheat sheets (can be used in a subsection too: /go/:list)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Command line client &lt;code&gt;cht.sh&lt;/code&gt; and shells support:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    :cht.sh             code of the cht.sh client&#xA;    :bash_completion    bash function for tab completion&#xA;    :bash               bash function and tab completion setup&#xA;    :fish               fish function and tab completion setup&#xA;    :zsh                zsh function and tab completion setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Editors support:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    :vim                cheat.sh support for Vim&#xA;    :emacs              cheat.sh function for Emacs&#xA;    :emacs-ivy          cheat.sh function for Emacs (uses ivy)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other pages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    :post               how to post new cheat sheet&#xA;    :styles             list of color styles&#xA;    :styles-demo        show color styles usage examples&#xA;    :random             fetches a random page (can be used in a subsection too: /go/:random)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Search&lt;/h2&gt; &#xA;&lt;p&gt;To search for a keyword, use the query:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    /~keyword&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case search is not recursive — it is conducted only in a page of the specified level. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    /~snapshot          look for snapshot in the first level cheat sheets&#xA;    /scala/~currying     look for currying in scala cheat sheets&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a recursive search in all cheat sheets, use double slash:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    /~snapshot/r         look for snapshot in all cheat sheets&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use special search options after the closing slash:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    /~shot/bi           case insensitive (i), word boundaries (b)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;List of search options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    i   case insensitive search&#xA;    b   word boundaries&#xA;    r   recursive search&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Programming languages cheat sheets&lt;/h2&gt; &#xA;&lt;p&gt;Cheat sheets related to programming languages are organized in namespaces (subdirectories), that are named according to the programming language.&lt;/p&gt; &#xA;&lt;p&gt;For each supported programming language there are several special cheat sheets: its own sheet, &lt;code&gt;hello&lt;/code&gt;, &lt;code&gt;:list&lt;/code&gt; and &lt;code&gt;:learn&lt;/code&gt;. Say for lua it will look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    lua&#xA;    lua/hello&#xA;    lua/:list&#xA;    lua/:learn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some languages has the one-liners-cheat sheet, &lt;code&gt;1line&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    perl/1line&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;hello&lt;/code&gt; describes how you can start with the language — install it if needed, build and run its programs, and it shows the &#34;Hello world&#34; program written in the language;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:list&lt;/code&gt; shows all topics related to the language&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:learn&lt;/code&gt; shows a learn-x-in-minutes language cheat sheet perfect for getting started with the language.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;1line&lt;/code&gt; is a collection of one-liners in this language&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;weirdness&lt;/code&gt; is a collection of examples of weird things in this language&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://cheat.sh/files/supported-languages-c++.png&#34; alt=&#34;cheat.sh usage&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;At the moment, cheat.sh covers the 58 following programming languages (alphabetically sorted):&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Prefix&lt;/th&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Basics&lt;/th&gt; &#xA;   &lt;th&gt;One-liners&lt;/th&gt; &#xA;   &lt;th&gt;Weirdness&lt;/th&gt; &#xA;   &lt;th&gt;StackOverflow&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;arduino/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Arduino&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;assembly/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Assembly&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;awk/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;AWK&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;bash/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bash&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;basic/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;BASIC&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;bf/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Brainfuck&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;c/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;chapel/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Chapel&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;clean/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Clean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;clojure/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Clojure&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;coffee/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;CoffeeScript&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cpp/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;C++&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;csharp/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;C#&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;d/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;D&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dart/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dart&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;delphi/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dephi&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dylan/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dylan&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;eiffel/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Eiffel&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;elixir/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Elixir&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;elisp/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ELisp&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;elm/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Elm&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;erlang/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Erlang&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;factor/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Factor&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;fortran/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Fortran&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;forth/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Forth&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;fsharp/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;F#&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;go/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;groovy/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Groovy&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;haskell/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Haskell&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;java/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Java&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;js/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;julia/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Julia&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;kotlin/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Kotlin&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;latex/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;LaTeX&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lisp/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lisp&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lua/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lua&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;matlab/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;MATLAB&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;nim/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Nim&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ocaml/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;OCaml&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;octave/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Octave&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;perl/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Perl&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;perl6/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Perl 6&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;php/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PHP&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pike/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Pike&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;python/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;python3/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Python 3&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;r/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;R&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;racket/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Racket&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ruby/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Ruby&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rust/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Rust&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;scala/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Scala&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;scheme/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Scheme&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;solidity/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Solidity&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;swift/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Swift&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tcsh/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Tcsh&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tcl/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Tcl&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;objective-c/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Objective-C&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;vb/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;VisualBasic&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;vbnet/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;VB.Net&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;And several other topics, that are though related to programming, are not programming languages:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Prefix&lt;/th&gt; &#xA;   &lt;th&gt;Topic&lt;/th&gt; &#xA;   &lt;th&gt;Basics&lt;/th&gt; &#xA;   &lt;th&gt;StackOverflow&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cmake/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;CMake&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;django/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Django&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;flask/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flask&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;git/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Git&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Cheat sheets sources&lt;/h2&gt; &#xA;&lt;p&gt;Instead of creating yet another mediocre cheat sheet repository, we are concentrating our efforts on creation of a unified mechanism to access selected existing well developed and good maintained cheat sheet repositories covering topics of our interest: programming and operating systems usage.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;cheat.sh&lt;/em&gt; uses selected community driven cheat sheet repositories and information sources, maintained by thousands of users, developers and authors all over the world (in the &lt;em&gt;Users&lt;/em&gt; column number of contributors/number of stars is shown):&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Cheat sheets&lt;/th&gt; &#xA;   &lt;th&gt;Repository&lt;/th&gt; &#xA;   &lt;th&gt;C/U*&lt;/th&gt; &#xA;   &lt;th&gt;Stars&lt;/th&gt; &#xA;   &lt;th&gt;Creation Date&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;UNIX/Linux, programming&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/chubin/cheat.sheets&#34;&gt;cheat.sheets&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/contributors-anon/chubin/cheat.sheets?label=%F0%9F%91%A5&amp;amp;labelColor=white&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/stars/chubin/cheat.sheets?label=%E2%AD%90&amp;amp;labelColor=white&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;May 1, 2017&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;UNIX/Linux commands&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/tldr-pages/tldr&#34;&gt;tldr-pages/tldr&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/contributors-anon/tldr-pages/tldr?label=%F0%9F%91%A5&amp;amp;labelColor=white&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/stars/tldr-pages/tldr?label=%E2%AD%90&amp;amp;labelColor=white&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dec 8, 2013&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;UNIX/Linux commands&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/chrisallenlane/cheat&#34;&gt;chrisallenlane/cheat&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/contributors-anon/chrisallenlane/cheat?label=%F0%9F%91%A5&amp;amp;labelColor=white&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/stars/chrisallenlane/cheat?label=%E2%AD%90&amp;amp;labelColor=white&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Jul 28, 2013&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Programming languages&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/adambard/learnxinyminutes-docs&#34;&gt;adambard/learnxinyminutes-docs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/contributors-anon/adambard/learnxinyminutes-docs?label=%F0%9F%91%A5&amp;amp;labelColor=white&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/stars/adambard/learnxinyminutes-docs?label=%E2%AD%90&amp;amp;labelColor=white&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Jun 23, 2013&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/a8m/go-lang-cheat-sheet&#34;&gt;a8m/go-lang-cheat-sheet&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/contributors-anon/a8m/go-lang-cheat-sheet?label=%F0%9F%91%A5&amp;amp;labelColor=white&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/stars/a8m/go-lang-cheat-sheet?label=%E2%AD%90&amp;amp;labelColor=white&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Feb 9, 2014&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Perl&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pkrumins/perl1line.txt&#34;&gt;pkrumnis/perl1line.txt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/contributors-anon/pkrumins/perl1line.txt?label=%F0%9F%91%A5&amp;amp;labelColor=white&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/stars/pkrumins/perl1line.txt?label=%E2%AD%90&amp;amp;labelColor=white&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Nov 4, 2011&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Programming languages&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://stackoverflow.com&#34;&gt;StackOverflow&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://stackexchange.com/leagues/1/alltime/stackoverflow&#34;&gt;14M&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;   &lt;td&gt;Sep 15, 2008&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;sup&gt;(*) C/U — contributors for GitHub repositories, Users for Stackoverflow&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;p&gt;Pie diagram reflecting cheat sheets sources distribution (by number of cheat sheets on cheat.sh originating from a repository):&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://cheat.sh/files/stat-2017-06-05.png&#34; alt=&#34;cheat.sh cheat sheets repositories&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to contribute&lt;/h2&gt; &#xA;&lt;h3&gt;How to edit a cheat sheet&lt;/h3&gt; &#xA;&lt;p&gt;If you want to edit a cheat.sh cheat sheet, you should edit it in the upstream repository. You will find the name of the source repository in a browser when you open a cheat sheet. There are two github buttons at the bottom of the page: the second one is the button of the repository, which belongs the current cheat sheet.&lt;/p&gt; &#xA;&lt;p&gt;You can edit the cheat sheet directly in your browser (you need a github account for it). There is an edit button in the top right corner. If you click on it, an editor will be open. There you will change the cheat sheet (under the hood: the upstream repository is forked, your changes are committed in the forked repository, a pull request to the upstream repository owner is sent).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://cheat.sh/files/edit-cheat-sheet.png&#34; alt=&#34;cheat.sh cheat sheets repositories&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How to add a cheat sheet&lt;/h3&gt; &#xA;&lt;p&gt;If you want to add a cheat sheet, you have one of the following ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add it to one of the external cheat sheets repositories; you should decide on your own what is the best repository for your cheat sheet;&lt;/li&gt; &#xA; &lt;li&gt;Add it to the local cheat.sh repository (&lt;a href=&#34;https://github.com/chubin/cheat.sheets&#34;&gt;cheat.sheets&lt;/a&gt;) on github (fork, commit, pull request);&lt;/li&gt; &#xA; &lt;li&gt;Post it on cheat.sh using curl or a web browser (&lt;a href=&#34;http://cheat.sh/:post&#34;&gt;cheat.sh/:post&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to change an existing cheat sheet, you have to find the original repository (when you open a cheat sheet in a browser, you see the repository&#39;s github button in the bottom of the cheat sheet), the cheat sheet is coming from, and change it there. After some time the changes will be synchronized on cheat.sh.&lt;/p&gt; &#xA;&lt;h3&gt;How to add a cheat sheet repository&lt;/h3&gt; &#xA;&lt;p&gt;If you want to add a cheat sheet repository to cheat.sh, please open an issue:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chubin/cheat.sh/issues/new&#34;&gt;Add a new repository&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please specify the name of the repository, and give its short description.&lt;/p&gt; &#xA;&lt;h2&gt;Installation and standalone usage&lt;/h2&gt; &#xA;&lt;p&gt;You don&#39;t need to install anything, to start using &lt;em&gt;cheat.sh&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are two cases, when you want to install &lt;em&gt;cheat.sh&lt;/em&gt; locally:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You plan to use it off-line, without Internet access;&lt;/li&gt; &#xA; &lt;li&gt;You want to use your own cheat sheets (additionally, or as a replacement).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Installation process in described in details here: &lt;a href=&#34;https://raw.githubusercontent.com/chubin/cheat.sh/master/doc/standalone.md&#34;&gt;cheat.sh standalone installation&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>