<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-10T02:02:51Z</updated>
  <subtitle>Weekly Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>KillianLucas/open-interpreter</title>
    <updated>2023-09-10T02:02:51Z</updated>
    <id>tag:github.com,2023-09-10:/KillianLucas/open-interpreter</id>
    <link href="https://github.com/KillianLucas/open-interpreter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenAI&#39;s Code Interpreter in your terminal, running locally&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;● Open Interpreter&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://discord.gg/6p3fD6rBVm&#34;&gt;&lt;img alt=&#34;Discord&#34; src=&#34;https://img.shields.io/discord/1146610656779440188?logo=discord&amp;amp;style=flat&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/static/v1?label=license&amp;amp;message=MIT&amp;amp;color=white&amp;amp;style=flat&#34; alt=&#34;License&#34;&gt; &lt;br&gt; &lt;b&gt;Let language models run code on your computer.&lt;/b&gt;&lt;br&gt; An open-source, locally running implementation of OpenAI&#39;s Code Interpreter.&lt;br&gt; &lt;br&gt;&lt;a href=&#34;https://openinterpreter.com&#34;&gt;Get early access to the desktop application.&lt;/a&gt;&lt;br&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/KillianLucas/open-interpreter/assets/63927363/08f0d493-956b-4d49-982e-67d4b20c4b56&#34; alt=&#34;poster&#34;&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install open-interpreter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;interpreter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;Open Interpreter&lt;/strong&gt; lets LLMs run code (Python, Javascript, Shell, and more) locally. You can chat with Open Interpreter through a ChatGPT-like interface in your terminal by running &lt;code&gt;$ interpreter&lt;/code&gt; after installing.&lt;/p&gt; &#xA;&lt;p&gt;This provides a natural-language interface to your computer&#39;s general-purpose capabilities:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create and edit photos, videos, PDFs, etc.&lt;/li&gt; &#xA; &lt;li&gt;Control a Chrome browser to perform research&lt;/li&gt; &#xA; &lt;li&gt;Plot, clean, and analyze large datasets&lt;/li&gt; &#xA; &lt;li&gt;...etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;⚠️ Note: You&#39;ll be asked to approve code before it&#39;s run.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/KillianLucas/open-interpreter/assets/63927363/37152071-680d-4423-9af3-64836a6f7b60&#34;&gt;https://github.com/KillianLucas/open-interpreter/assets/63927363/37152071-680d-4423-9af3-64836a6f7b60&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;An interactive demo is also available on Google Colab:&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/drive/1WKmRXZgsErej2xUriKzxrEAXdxMSgWbb?usp=sharing&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install open-interpreter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Terminal&lt;/h3&gt; &#xA;&lt;p&gt;After installation, simply run &lt;code&gt;interpreter&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;interpreter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Python&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import interpreter&#xA;&#xA;interpreter.chat(&#34;Plot AAPL and META&#39;s normalized stock prices&#34;) # Executes a single command&#xA;interpreter.chat() # Starts an interactive chat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Comparison to ChatGPT&#39;s Code Interpreter&lt;/h2&gt; &#xA;&lt;p&gt;OpenAI&#39;s release of &lt;a href=&#34;https://openai.com/blog/chatgpt-plugins#code-interpreter&#34;&gt;Code Interpreter&lt;/a&gt; with GPT-4 presents a fantastic opportunity to accomplish real-world tasks with ChatGPT.&lt;/p&gt; &#xA;&lt;p&gt;However, OpenAI&#39;s service is hosted, closed-source, and heavily restricted:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No internet access.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wfhbrian.com/mastering-chatgpts-code-interpreter-list-of-python-packages/&#34;&gt;Limited set of pre-installed packages&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;100 MB maximum upload, 120.0 second runtime limit.&lt;/li&gt; &#xA; &lt;li&gt;State is cleared (along with any generated files or links) when the environment dies.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Open Interpreter overcomes these limitations by running on your local environment. It has full access to the internet, isn&#39;t restricted by time or file size, and can utilize any package or library.&lt;/p&gt; &#xA;&lt;p&gt;This combines the power of GPT-4&#39;s Code Interpreter with the flexibility of your local development environment.&lt;/p&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;h3&gt;Interactive Chat&lt;/h3&gt; &#xA;&lt;p&gt;To start an interactive chat in your terminal, either run &lt;code&gt;interpreter&lt;/code&gt; from the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;interpreter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or &lt;code&gt;interpreter.chat()&lt;/code&gt; from a .py file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;interpreter.chat()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Programmatic Chat&lt;/h3&gt; &#xA;&lt;p&gt;For more precise control, you can pass messages directly to &lt;code&gt;.chat(message)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;interpreter.chat(&#34;Add subtitles to all videos in /videos.&#34;)&#xA;&#xA;# ... Streams output to your terminal, completes task ...&#xA;&#xA;interpreter.chat(&#34;These look great but can you make the subtitles bigger?&#34;)&#xA;&#xA;# ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Start a New Chat&lt;/h3&gt; &#xA;&lt;p&gt;In Python, Open Interpreter remembers conversation history. If you want to start fresh, you can reset it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;interpreter.reset()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Save and Restore Chats&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;interpreter.chat()&lt;/code&gt; returns a List of messages when return_messages=True, which can be used to resume a conversation with &lt;code&gt;interpreter.load(messages)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;messages = interpreter.chat(&#34;My name is Killian.&#34;, return_messages=True) # Save messages to &#39;messages&#39;&#xA;interpreter.reset() # Reset interpreter (&#34;Killian&#34; will be forgotten)&#xA;&#xA;interpreter.load(messages) # Resume chat from &#39;messages&#39; (&#34;Killian&#34; will be remembered)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customize System Message&lt;/h3&gt; &#xA;&lt;p&gt;You can inspect and configure Open Interpreter&#39;s system message to extend its functionality, modify permissions, or give it more context.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;interpreter.system_message += &#34;&#34;&#34;&#xA;Run shell commands with -y so the user doesn&#39;t have to confirm them.&#xA;&#34;&#34;&#34;&#xA;print(interpreter.system_message)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Change the Model&lt;/h3&gt; &#xA;&lt;p&gt;ⓘ &lt;strong&gt;Issues running locally?&lt;/strong&gt; Read our new &lt;a href=&#34;https://raw.githubusercontent.com/KillianLucas/open-interpreter/main/docs/GPU.md&#34;&gt;GPU setup guide&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/KillianLucas/open-interpreter/main/docs/WINDOWS.md&#34;&gt;Windows setup guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can run &lt;code&gt;interpreter&lt;/code&gt; in local mode from the command line to use &lt;code&gt;Code Llama&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;interpreter --local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;code&gt;gpt-3.5-turbo&lt;/code&gt;, use fast mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;interpreter --fast&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Python, you will need to set the model manually:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;interpreter.model = &#34;gpt-3.5-turbo&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Azure Support&lt;/h3&gt; &#xA;&lt;p&gt;To connect to an Azure deployment, the &lt;code&gt;--use-azure&lt;/code&gt; flag will walk you through setting this up:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;interpreter --use-azure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Python, set the following variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;interpreter.use_azure = True&#xA;interpreter.api_key = &#34;your_openai_api_key&#34;&#xA;interpreter.azure_api_base = &#34;your_azure_api_base&#34;&#xA;interpreter.azure_api_version = &#34;your_azure_api_version&#34;&#xA;interpreter.azure_deployment_name = &#34;your_azure_deployment_name&#34;&#xA;interpreter.azure_api_type = &#34;azure&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Debug mode&lt;/h3&gt; &#xA;&lt;p&gt;To help contributors inspect Open Interpreter, &lt;code&gt;--debug&lt;/code&gt; mode is highly verbose.&lt;/p&gt; &#xA;&lt;p&gt;You can activate debug mode by using it&#39;s flag (&lt;code&gt;interpreter --debug&lt;/code&gt;), or mid-chat:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ interpreter&#xA;...&#xA;&amp;gt; %debug # &amp;lt;- Turns on debug mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration with .env&lt;/h3&gt; &#xA;&lt;p&gt;Open Interpreter allows you to set default behaviors using a .env file. This provides a flexible way to configure the interpreter without changing command-line arguments every time.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a sample .env configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;INTERPRETER_CLI_AUTO_RUN=False&#xA;INTERPRETER_CLI_FAST_MODE=False&#xA;INTERPRETER_CLI_LOCAL_RUN=False&#xA;INTERPRETER_CLI_DEBUG=False&#xA;INTERPRETER_CLI_USE_AZURE=False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;INTERPRETER_CLI_AUTO_RUN: If set to True, the interpreter will execute code without user confirmation.&lt;/li&gt; &#xA; &lt;li&gt;INTERPRETER_CLI_FAST_MODE: If set to True, the interpreter will use gpt-3.5-turbo instead of gpt-4.&lt;/li&gt; &#xA; &lt;li&gt;INTERPRETER_CLI_LOCAL_RUN: If set to True, the interpreter will run fully locally with Code Llama.&lt;/li&gt; &#xA; &lt;li&gt;INTERPRETER_CLI_DEBUG: If set to True, the interpreter will print extra debugging information.&lt;/li&gt; &#xA; &lt;li&gt;INTERPRETER_CLI_USE_AZURE: If set to True, the interpreter will use Azure OpenAI Services.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can modify these values in the .env file to change the default behavior of the Open Interpreter.&lt;/p&gt; &#xA;&lt;h2&gt;Safety Notice&lt;/h2&gt; &#xA;&lt;p&gt;Since generated code is executed in your local environment, it can interact with your files and system settings, potentially leading to unexpected outcomes like data loss or security risks.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;⚠️ Open Interpreter will ask for user confirmation before executing code.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can run &lt;code&gt;interpreter -y&lt;/code&gt; or set &lt;code&gt;interpreter.auto_run = True&lt;/code&gt; to bypass this confirmation, in which case:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Be cautious when requesting commands that modify files or system settings.&lt;/li&gt; &#xA; &lt;li&gt;Watch Open Interpreter like a self-driving car, and be prepared to end the process by closing your terminal.&lt;/li&gt; &#xA; &lt;li&gt;Consider running Open Interpreter in a restricted environment like Google Colab or Replit. These environments are more isolated, reducing the risks associated with executing arbitrary code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How Does it Work?&lt;/h2&gt; &#xA;&lt;p&gt;Open Interpreter equips a &lt;a href=&#34;https://platform.openai.com/docs/guides/gpt/function-calling&#34;&gt;function-calling language model&lt;/a&gt; with an &lt;code&gt;exec()&lt;/code&gt; function, which accepts a &lt;code&gt;language&lt;/code&gt; (like &#34;python&#34; or &#34;javascript&#34;) and &lt;code&gt;code&lt;/code&gt; to run.&lt;/p&gt; &#xA;&lt;p&gt;We then stream the model&#39;s messages, code, and your system&#39;s outputs to the terminal as Markdown.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Thank you for your interest in contributing! We welcome involvement from the community.&lt;/p&gt; &#xA;&lt;p&gt;Please see our &lt;a href=&#34;https://raw.githubusercontent.com/KillianLucas/open-interpreter/main/docs/contributing.md&#34;&gt;Contributing Guidelines&lt;/a&gt; for more details on how to get involved.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Open Interpreter is licensed under the MIT License. You are permitted to use, copy, modify, distribute, sublicense and sell copies of the software.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This software is not affiliated with OpenAI.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Having access to a junior programmer working at the speed of your fingertips ... can make new workflows effortless and efficient, as well as open the benefits of programming to new audiences.&lt;/p&gt; &#xA; &lt;p&gt;— &lt;em&gt;OpenAI&#39;s Code Interpreter Release&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt;</summary>
  </entry>
  <entry>
    <title>graphdeco-inria/gaussian-splatting</title>
    <updated>2023-09-10T02:02:51Z</updated>
    <id>tag:github.com,2023-09-10:/graphdeco-inria/gaussian-splatting</id>
    <link href="https://github.com/graphdeco-inria/gaussian-splatting" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Original reference implementation of &#34;3D Gaussian Splatting for Real-Time Radiance Field Rendering&#34;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;3D Gaussian Splatting for Real-Time Radiance Field Rendering&lt;/h1&gt; &#xA;&lt;p&gt;Bernhard Kerbl*, Georgios Kopanas*, Thomas Leimkühler, George Drettakis (* indicates equal contribution)&lt;br&gt; | &lt;a href=&#34;https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/&#34;&gt;Webpage&lt;/a&gt; | &lt;a href=&#34;https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/3d_gaussian_splatting_high.pdf&#34;&gt;Full Paper&lt;/a&gt; | &lt;a href=&#34;https://youtu.be/T_kXY43VZnk&#34;&gt;Video&lt;/a&gt; | &lt;a href=&#34;http://www-sop.inria.fr/reves/publis/gdindex.php&#34;&gt;Other GRAPHDECO Publications&lt;/a&gt; | &lt;a href=&#34;https://fungraph.inria.fr&#34;&gt;FUNGRAPH project page&lt;/a&gt; |&lt;br&gt; | &lt;a href=&#34;https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/datasets/input/tandt_db.zip&#34;&gt;T&amp;amp;T+DB COLMAP (650MB)&lt;/a&gt; | &lt;a href=&#34;https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/datasets/pretrained/models.zip&#34;&gt;Pre-trained Models (14 GB)&lt;/a&gt; | &lt;a href=&#34;https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/binaries/viewers.zip&#34;&gt;Viewers for Windows (60MB)&lt;/a&gt; | &lt;a href=&#34;https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/evaluation/images.zip&#34;&gt;Evaluation Images (7 GB)&lt;/a&gt; |&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/graphdeco-inria/gaussian-splatting/main/assets/teaser.png&#34; alt=&#34;Teaser image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the official authors implementation associated with the paper &#34;3D Gaussian Splatting for Real-Time Radiance Field Rendering&#34;, which can be found &lt;a href=&#34;https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/&#34;&gt;here&lt;/a&gt;. We further provide the reference images used to create the error metrics reported in the paper, as well as recently created, pre-trained models.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.inria.fr/&#34;&gt;&lt;img height=&#34;100&#34; src=&#34;https://raw.githubusercontent.com/graphdeco-inria/gaussian-splatting/main/assets/logo_inria.png&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://univ-cotedazur.eu/&#34;&gt;&lt;img height=&#34;100&#34; src=&#34;https://raw.githubusercontent.com/graphdeco-inria/gaussian-splatting/main/assets/logo_uca.png&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.mpi-inf.mpg.de&#34;&gt;&lt;img height=&#34;100&#34; src=&#34;https://raw.githubusercontent.com/graphdeco-inria/gaussian-splatting/main/assets/logo_mpi.png&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://team.inria.fr/graphdeco/&#34;&gt; &lt;img style=&#34;width:100%;&#34; src=&#34;https://raw.githubusercontent.com/graphdeco-inria/gaussian-splatting/main/assets/logo_graphdeco.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Abstract: &lt;em&gt;Radiance Field methods have recently revolutionized novel-view synthesis of scenes captured with multiple photos or videos. However, achieving high visual quality still requires neural networks that are costly to train and render, while recent faster methods inevitably trade off speed for quality. For unbounded and complete scenes (rather than isolated objects) and 1080p resolution rendering, no current method can achieve real-time display rates. We introduce three key elements that allow us to achieve state-of-the-art visual quality while maintaining competitive training times and importantly allow high-quality real-time (≥ 30 fps) novel-view synthesis at 1080p resolution. First, starting from sparse points produced during camera calibration, we represent the scene with 3D Gaussians that preserve desirable properties of continuous volumetric radiance fields for scene optimization while avoiding unnecessary computation in empty space; Second, we perform interleaved optimization/density control of the 3D Gaussians, notably optimizing anisotropic covariance to achieve an accurate representation of the scene; Third, we develop a fast visibility-aware rendering algorithm that supports anisotropic splatting and both accelerates training and allows realtime rendering. We demonstrate state-of-the-art visual quality and real-time rendering on several established datasets.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;section class=&#34;section&#34; id=&#34;BibTeX&#34;&gt; &#xA; &lt;div class=&#34;container is-max-desktop content&#34;&gt; &#xA;  &lt;h2 class=&#34;title&#34;&gt;BibTeX&lt;/h2&gt; &#xA;  &lt;pre&gt;&lt;code&gt;@Article{kerbl3Dgaussians,&#xA;      author       = {Kerbl, Bernhard and Kopanas, Georgios and Leimk{\&#34;u}hler, Thomas and Drettakis, George},&#xA;      title        = {3D Gaussian Splatting for Real-Time Radiance Field Rendering},&#xA;      journal      = {ACM Transactions on Graphics},&#xA;      number       = {4},&#xA;      volume       = {42},&#xA;      month        = {July},&#xA;      year         = {2023},&#xA;      url          = {https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/}&#xA;}&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/div&gt; &#xA;&lt;/section&gt; &#xA;&lt;h2&gt;Funding and Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;This research was funded by the ERC Advanced grant FUNGRAPH No 788065. The authors are grateful to Adobe for generous donations, the OPAL infrastructure from Université Côte d’Azur and for the HPC resources from GENCI–IDRIS (Grant 2022-AD011013409). The authors thank the anonymous reviewers for their valuable feedback, P. Hedman and A. Tewari for proofreading earlier drafts also T. Müller, A. Yu and S. Fridovich-Keil for helping with the comparisons.&lt;/p&gt; &#xA;&lt;h2&gt;Step-by-step Tutorial&lt;/h2&gt; &#xA;&lt;p&gt;Jonathan Stephens made a fantastic step-by-step tutorial for setting up Gaussian Splatting on your machine, along with instructions for creating usable datasets from videos. If the instructions below are too dry for you, go ahead and check it out &lt;a href=&#34;https://www.youtube.com/watch?v=UXtuigy_wYc&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Colab&lt;/h2&gt; &#xA;&lt;p&gt;User &lt;a href=&#34;https://github.com/camenduru&#34;&gt;camenduru&lt;/a&gt; was kind enough to provide a Colab template that uses this repo&#39;s source (status: August 2023!) for quick and easy access to the method. Please check it out &lt;a href=&#34;https://github.com/camenduru/gaussian-splatting-colab&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Cloning the Repository&lt;/h2&gt; &#xA;&lt;p&gt;The repository contains submodules, thus please check it out with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# SSH&#xA;git clone git@github.com:graphdeco-inria/gaussian-splatting.git --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# HTTPS&#xA;git clone https://github.com/graphdeco-inria/gaussian-splatting --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The codebase has 4 main components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A PyTorch-based optimizer to produce a 3D Gaussian model from SfM inputs&lt;/li&gt; &#xA; &lt;li&gt;A network viewer that allows to connect to and visualize the optimization process&lt;/li&gt; &#xA; &lt;li&gt;An OpenGL-based real-time viewer to render trained models in real-time.&lt;/li&gt; &#xA; &lt;li&gt;A script to help you turn your own images into optimization-ready SfM data sets&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The components have different requirements w.r.t. both hardware and software. They have been tested on Windows 10 and Ubuntu Linux 22.04. Instructions for setting up and running each of them are found in the sections below.&lt;/p&gt; &#xA;&lt;h2&gt;Optimizer&lt;/h2&gt; &#xA;&lt;p&gt;The optimizer uses PyTorch and CUDA extensions in a Python environment to produce trained models.&lt;/p&gt; &#xA;&lt;h3&gt;Hardware Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CUDA-ready GPU with Compute Capability 7.0+&lt;/li&gt; &#xA; &lt;li&gt;24 GB VRAM (to train to paper evaluation quality)&lt;/li&gt; &#xA; &lt;li&gt;Please see FAQ for smaller VRAM configurations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Software Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Conda (recommended for easy setup)&lt;/li&gt; &#xA; &lt;li&gt;C++ Compiler for PyTorch extensions (we used Visual Studio 2019 for Windows)&lt;/li&gt; &#xA; &lt;li&gt;CUDA SDK 11 for PyTorch extensions, install &lt;em&gt;after&lt;/em&gt; Visual Studio (we used 11.8, &lt;strong&gt;known issues with 11.6&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;C++ Compiler and CUDA SDK must be compatible&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;h4&gt;Local Setup&lt;/h4&gt; &#xA;&lt;p&gt;Our default, provided install method is based on Conda package and environment management:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;SET DISTUTILS_USE_SDK=1 # Windows only&#xA;conda env create --file environment.yml&#xA;conda activate gaussian_splatting&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that this process assumes that you have CUDA SDK &lt;strong&gt;11&lt;/strong&gt; installed, not &lt;strong&gt;12&lt;/strong&gt;. For modifications, see below.&lt;/p&gt; &#xA;&lt;p&gt;Tip: Downloading packages and creating a new environment with Conda can require a significant amount of disk space. By default, Conda will use the main system hard drive. You can avoid this by specifying a different package download location and an environment on a different drive:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;conda config --add pkgs_dirs &amp;lt;Drive&amp;gt;/&amp;lt;pkg_path&amp;gt;&#xA;conda env create --file environment.yml --prefix &amp;lt;Drive&amp;gt;/&amp;lt;env_path&amp;gt;/gaussian_splatting&#xA;conda activate &amp;lt;Drive&amp;gt;/&amp;lt;env_path&amp;gt;/gaussian_splatting&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Modifications&lt;/h4&gt; &#xA;&lt;p&gt;If you can afford the disk space, we recommend using our environment files for setting up a training environment identical to ours. If you want to make modifications, please note that major version changes might affect the results of our method. However, our (limited) experiments suggest that the codebase works just fine inside a more up-to-date environment (Python 3.8, PyTorch 2.0.0, CUDA 12). Make sure to create an environment where PyTorch and its CUDA runtime version match and the installed CUDA SDK has no major version difference with PyTorch&#39;s CUDA version.&lt;/p&gt; &#xA;&lt;h4&gt;Known Issues&lt;/h4&gt; &#xA;&lt;p&gt;Some users experience problems building the submodules on Windows (&lt;code&gt;cl.exe: File not found&lt;/code&gt; or similar). Please consider the workaround for this problem from the FAQ.&lt;/p&gt; &#xA;&lt;h3&gt;Running&lt;/h3&gt; &#xA;&lt;p&gt;To run the optimizer, simply use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python train.py -s &amp;lt;path to COLMAP or NeRF Synthetic dataset&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;span style=&#34;font-weight: bold;&#34;&gt;Command Line Arguments for train.py&lt;/span&gt;&lt;/summary&gt; &#xA; &lt;h4&gt;--source_path / -s&lt;/h4&gt; &#xA; &lt;p&gt;Path to the source directory containing a COLMAP or Synthetic NeRF data set.&lt;/p&gt; &#xA; &lt;h4&gt;--model_path / -m&lt;/h4&gt; &#xA; &lt;p&gt;Path where the trained model should be stored (&lt;code&gt;output/&amp;lt;random&amp;gt;&lt;/code&gt; by default).&lt;/p&gt; &#xA; &lt;h4&gt;--images / -i&lt;/h4&gt; &#xA; &lt;p&gt;Alternative subdirectory for COLMAP images (&lt;code&gt;images&lt;/code&gt; by default).&lt;/p&gt; &#xA; &lt;h4&gt;--eval&lt;/h4&gt; &#xA; &lt;p&gt;Add this flag to use a MipNeRF360-style training/test split for evaluation.&lt;/p&gt; &#xA; &lt;h4&gt;--resolution / -r&lt;/h4&gt; &#xA; &lt;p&gt;Specifies resolution of the loaded images before training. If provided &lt;code&gt;1, 2, 4&lt;/code&gt; or &lt;code&gt;8&lt;/code&gt;, uses original, 1/2, 1/4 or 1/8 resolution, respectively. For all other values, rescales the width to the given number while maintaining image aspect. &lt;strong&gt;If not set and input image width exceeds 1.6K pixels, inputs are automatically rescaled to this target.&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;h4&gt;--data_device&lt;/h4&gt; &#xA; &lt;p&gt;Specifies where to put the source image data, &lt;code&gt;cuda&lt;/code&gt; by default, recommended to use &lt;code&gt;cpu&lt;/code&gt; if training on large/high-resolution dataset, will reduce VRAM consumption, but slightly slow down training. Thanks to &lt;a href=&#34;https://github.com/HrsPythonix&#34;&gt;HrsPythonix&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;h4&gt;--white_background / -w&lt;/h4&gt; &#xA; &lt;p&gt;Add this flag to use white background instead of black (default), e.g., for evaluation of NeRF Synthetic dataset.&lt;/p&gt; &#xA; &lt;h4&gt;--sh_degree&lt;/h4&gt; &#xA; &lt;p&gt;Order of spherical harmonics to be used (no larger than 3). &lt;code&gt;3&lt;/code&gt; by default.&lt;/p&gt; &#xA; &lt;h4&gt;--convert_SHs_python&lt;/h4&gt; &#xA; &lt;p&gt;Flag to make pipeline compute forward and backward of SHs with PyTorch instead of ours.&lt;/p&gt; &#xA; &lt;h4&gt;--convert_cov3D_python&lt;/h4&gt; &#xA; &lt;p&gt;Flag to make pipeline compute forward and backward of the 3D covariance with PyTorch instead of ours.&lt;/p&gt; &#xA; &lt;h4&gt;--debug&lt;/h4&gt; &#xA; &lt;p&gt;Enables debug mode if you experience erros. If the rasterizer fails, a &lt;code&gt;dump&lt;/code&gt; file is created that you may forward to us in an issue so we can take a look.&lt;/p&gt; &#xA; &lt;h4&gt;--debug_from&lt;/h4&gt; &#xA; &lt;p&gt;Debugging is &lt;strong&gt;slow&lt;/strong&gt;. You may specify an iteration (starting from 0) after which the above debugging becomes active.&lt;/p&gt; &#xA; &lt;h4&gt;--iterations&lt;/h4&gt; &#xA; &lt;p&gt;Number of total iterations to train for, &lt;code&gt;30_000&lt;/code&gt; by default.&lt;/p&gt; &#xA; &lt;h4&gt;--ip&lt;/h4&gt; &#xA; &lt;p&gt;IP to start GUI server on, &lt;code&gt;127.0.0.1&lt;/code&gt; by default.&lt;/p&gt; &#xA; &lt;h4&gt;--port&lt;/h4&gt; &#xA; &lt;p&gt;Port to use for GUI server, &lt;code&gt;6009&lt;/code&gt; by default.&lt;/p&gt; &#xA; &lt;h4&gt;--test_iterations&lt;/h4&gt; &#xA; &lt;p&gt;Space-separated iterations at which the training script computes L1 and PSNR over test set, &lt;code&gt;7000 30000&lt;/code&gt; by default.&lt;/p&gt; &#xA; &lt;h4&gt;--save_iterations&lt;/h4&gt; &#xA; &lt;p&gt;Space-separated iterations at which the training script saves the Gaussian model, &lt;code&gt;7000 30000 &amp;lt;iterations&amp;gt;&lt;/code&gt; by default.&lt;/p&gt; &#xA; &lt;h4&gt;--checkpoint_iterations&lt;/h4&gt; &#xA; &lt;p&gt;Space-separated iterations at which to store a checkpoint for continuing later, saved in the model directory.&lt;/p&gt; &#xA; &lt;h4&gt;--start_checkpoint&lt;/h4&gt; &#xA; &lt;p&gt;Path to a saved checkpoint to continue training from.&lt;/p&gt; &#xA; &lt;h4&gt;--quiet&lt;/h4&gt; &#xA; &lt;p&gt;Flag to omit any text written to standard out pipe.&lt;/p&gt; &#xA; &lt;h4&gt;--feature_lr&lt;/h4&gt; &#xA; &lt;p&gt;Spherical harmonics features learning rate, &lt;code&gt;0.0025&lt;/code&gt; by default.&lt;/p&gt; &#xA; &lt;h4&gt;--opacity_lr&lt;/h4&gt; &#xA; &lt;p&gt;Opacity learning rate, &lt;code&gt;0.05&lt;/code&gt; by default.&lt;/p&gt; &#xA; &lt;h4&gt;--scaling_lr&lt;/h4&gt; &#xA; &lt;p&gt;Scaling learning rate, &lt;code&gt;0.005&lt;/code&gt; by default.&lt;/p&gt; &#xA; &lt;h4&gt;--rotation_lr&lt;/h4&gt; &#xA; &lt;p&gt;Rotation learning rate, &lt;code&gt;0.001&lt;/code&gt; by default.&lt;/p&gt; &#xA; &lt;h4&gt;--position_lr_max_steps&lt;/h4&gt; &#xA; &lt;p&gt;Number of steps (from 0) where position learning rate goes from &lt;code&gt;initial&lt;/code&gt; to &lt;code&gt;final&lt;/code&gt;. &lt;code&gt;30_000&lt;/code&gt; by default.&lt;/p&gt; &#xA; &lt;h4&gt;--position_lr_init&lt;/h4&gt; &#xA; &lt;p&gt;Initial 3D position learning rate, &lt;code&gt;0.00016&lt;/code&gt; by default.&lt;/p&gt; &#xA; &lt;h4&gt;--position_lr_final&lt;/h4&gt; &#xA; &lt;p&gt;Final 3D position learning rate, &lt;code&gt;0.0000016&lt;/code&gt; by default.&lt;/p&gt; &#xA; &lt;h4&gt;--position_lr_delay_mult&lt;/h4&gt; &#xA; &lt;p&gt;Position learning rate multiplier (cf. Plenoxels), &lt;code&gt;0.01&lt;/code&gt; by default.&lt;/p&gt; &#xA; &lt;h4&gt;--densify_from_iter&lt;/h4&gt; &#xA; &lt;p&gt;Iteration where densification starts, &lt;code&gt;500&lt;/code&gt; by default.&lt;/p&gt; &#xA; &lt;h4&gt;--densify_until_iter&lt;/h4&gt; &#xA; &lt;p&gt;Iteration where densification stops, &lt;code&gt;15_000&lt;/code&gt; by default.&lt;/p&gt; &#xA; &lt;h4&gt;--densify_grad_threshold&lt;/h4&gt; &#xA; &lt;p&gt;Limit that decides if points should be densified based on 2D position gradient, &lt;code&gt;0.0002&lt;/code&gt; by default.&lt;/p&gt; &#xA; &lt;h4&gt;--densification_interal&lt;/h4&gt; &#xA; &lt;p&gt;How frequently to densify, &lt;code&gt;100&lt;/code&gt; (every 100 iterations) by default.&lt;/p&gt; &#xA; &lt;h4&gt;--opacity_reset_interval&lt;/h4&gt; &#xA; &lt;p&gt;How frequently to reset opacity, &lt;code&gt;3_000&lt;/code&gt; by default.&lt;/p&gt; &#xA; &lt;h4&gt;--lambda_dssim&lt;/h4&gt; &#xA; &lt;p&gt;Influence of SSIM on total loss from 0 to 1, &lt;code&gt;0.2&lt;/code&gt; by default.&lt;/p&gt; &#xA; &lt;h4&gt;--percent_dense&lt;/h4&gt; &#xA; &lt;p&gt;Percentage of scene extent (0--1) a point must exceed to be forcibly densified, &lt;code&gt;0.01&lt;/code&gt; by default.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Note that similar to MipNeRF360, we target images at resolutions in the 1-1.6K pixel range. For convenience, arbitrary-size inputs can be passed and will be automatically resized if their width exceeds 1600 pixels. We recommend to keep this behavior, but you may force training to use your higher-resolution images by setting &lt;code&gt;-r 1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The MipNeRF360 scenes are hosted by the paper authors &lt;a href=&#34;https://jonbarron.info/mipnerf360/&#34;&gt;here&lt;/a&gt;. You can find our SfM data sets for Tanks&amp;amp;Temples and Deep Blending &lt;a href=&#34;https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/datasets/input/tandt_db.zip&#34;&gt;here&lt;/a&gt;. If you do not provide an output model directory (&lt;code&gt;-m&lt;/code&gt;), trained models are written to folders with randomized unique names inside the &lt;code&gt;output&lt;/code&gt; directory. At this point, the trained models may be viewed with the real-time viewer (see further below).&lt;/p&gt; &#xA;&lt;h3&gt;Evaluation&lt;/h3&gt; &#xA;&lt;p&gt;By default, the trained models use all available images in the dataset. To train them while withholding a test set for evaluation, use the &lt;code&gt;--eval&lt;/code&gt; flag. This way, you can render training/test sets and produce error metrics as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python train.py -s &amp;lt;path to COLMAP or NeRF Synthetic dataset&amp;gt; --eval # Train with train/test split&#xA;python render.py -m &amp;lt;path to trained model&amp;gt; # Generate renderings&#xA;python metrics.py -m &amp;lt;path to trained model&amp;gt; # Compute error metrics on renderings&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to evaluate our &lt;a href=&#34;https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/datasets/pretrained/models.zip&#34;&gt;pre-trained models&lt;/a&gt;, you will have to download the corresponding source data sets and indicate their location to &lt;code&gt;render.py&lt;/code&gt; with an additional &lt;code&gt;--source_path/-s&lt;/code&gt; flag. Note: The pre-trained models were created with the release codebase. This code base has been cleaned up and includes bugfixes, hence the metrics you get from evaluating them will differ from those in the paper.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python render.py -m &amp;lt;path to pre-trained model&amp;gt; -s &amp;lt;path to COLMAP dataset&amp;gt;&#xA;python metrics.py -m &amp;lt;path to pre-trained model&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;span style=&#34;font-weight: bold;&#34;&gt;Command Line Arguments for render.py&lt;/span&gt;&lt;/summary&gt; &#xA; &lt;h4&gt;--model_path / -m&lt;/h4&gt; &#xA; &lt;p&gt;Path to the trained model directory you want to create renderings for.&lt;/p&gt; &#xA; &lt;h4&gt;--skip_train&lt;/h4&gt; &#xA; &lt;p&gt;Flag to skip rendering the training set.&lt;/p&gt; &#xA; &lt;h4&gt;--skip_test&lt;/h4&gt; &#xA; &lt;p&gt;Flag to skip rendering the test set.&lt;/p&gt; &#xA; &lt;h4&gt;--quiet&lt;/h4&gt; &#xA; &lt;p&gt;Flag to omit any text written to standard out pipe.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;The below parameters will be read automatically from the model path, based on what was used for training. However, you may override them by providing them explicitly on the command line.&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;h4&gt;--source_path / -s&lt;/h4&gt; &#xA; &lt;p&gt;Path to the source directory containing a COLMAP or Synthetic NeRF data set.&lt;/p&gt; &#xA; &lt;h4&gt;--images / -i&lt;/h4&gt; &#xA; &lt;p&gt;Alternative subdirectory for COLMAP images (&lt;code&gt;images&lt;/code&gt; by default).&lt;/p&gt; &#xA; &lt;h4&gt;--eval&lt;/h4&gt; &#xA; &lt;p&gt;Add this flag to use a MipNeRF360-style training/test split for evaluation.&lt;/p&gt; &#xA; &lt;h4&gt;--resolution / -r&lt;/h4&gt; &#xA; &lt;p&gt;Changes the resolution of the loaded images before training. If provided &lt;code&gt;1, 2, 4&lt;/code&gt; or &lt;code&gt;8&lt;/code&gt;, uses original, 1/2, 1/4 or 1/8 resolution, respectively. For all other values, rescales the width to the given number while maintaining image aspect. &lt;code&gt;1&lt;/code&gt; by default.&lt;/p&gt; &#xA; &lt;h4&gt;--white_background / -w&lt;/h4&gt; &#xA; &lt;p&gt;Add this flag to use white background instead of black (default), e.g., for evaluation of NeRF Synthetic dataset.&lt;/p&gt; &#xA; &lt;h4&gt;--convert_SHs_python&lt;/h4&gt; &#xA; &lt;p&gt;Flag to make pipeline render with computed SHs from PyTorch instead of ours.&lt;/p&gt; &#xA; &lt;h4&gt;--convert_cov3D_python&lt;/h4&gt; &#xA; &lt;p&gt;Flag to make pipeline render with computed 3D covariance from PyTorch instead of ours.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;span style=&#34;font-weight: bold;&#34;&gt;Command Line Arguments for metrics.py&lt;/span&gt;&lt;/summary&gt; &#xA; &lt;h4&gt;--model_paths / -m&lt;/h4&gt; &#xA; &lt;p&gt;Space-separated list of model paths for which metrics should be computed.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;We further provide the &lt;code&gt;full_eval.py&lt;/code&gt; script. This script specifies the routine used in our evaluation and demonstrates the use of some additional parameters, e.g., &lt;code&gt;--images (-i)&lt;/code&gt; to define alternative image directories within COLMAP data sets. If you have downloaded and extracted all the training data, you can run it like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python full_eval.py -m360 &amp;lt;mipnerf360 folder&amp;gt; -tat &amp;lt;tanks and temples folder&amp;gt; -db &amp;lt;deep blending folder&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the current version, this process takes about 7h on our reference machine containing an A6000. If you want to do the full evaluation on our pre-trained models, you can specify their download location and skip training.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python full_eval.py -o &amp;lt;directory with pretrained models&amp;gt; --skip_training -m360 &amp;lt;mipnerf360 folder&amp;gt; -tat &amp;lt;tanks and temples folder&amp;gt; -db &amp;lt;deep blending folder&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to compute the metrics on our paper&#39;s &lt;a href=&#34;https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/evaluation/images.zip&#34;&gt;evaluation images&lt;/a&gt;, you can also skip rendering. In this case it is not necessary to provide the source datasets. You can compute metrics for multiple image sets at a time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python full_eval.py -m &amp;lt;directory with evaluation images&amp;gt;/garden ... --skip_training --skip_rendering&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;span style=&#34;font-weight: bold;&#34;&gt;Command Line Arguments for full_eval.py&lt;/span&gt;&lt;/summary&gt; &#xA; &lt;h4&gt;--skip_training&lt;/h4&gt; &#xA; &lt;p&gt;Flag to skip training stage.&lt;/p&gt; &#xA; &lt;h4&gt;--skip_rendering&lt;/h4&gt; &#xA; &lt;p&gt;Flag to skip rendering stage.&lt;/p&gt; &#xA; &lt;h4&gt;--skip_metrics&lt;/h4&gt; &#xA; &lt;p&gt;Flag to skip metrics calculation stage.&lt;/p&gt; &#xA; &lt;h4&gt;--output_path&lt;/h4&gt; &#xA; &lt;p&gt;Directory to put renderings and results in, &lt;code&gt;./eval&lt;/code&gt; by default, set to pre-trained model location if evaluating them.&lt;/p&gt; &#xA; &lt;h4&gt;--mipnerf360 / -m360&lt;/h4&gt; &#xA; &lt;p&gt;Path to MipNeRF360 source datasets, required if training or rendering.&lt;/p&gt; &#xA; &lt;h4&gt;--tanksandtemples / -tat&lt;/h4&gt; &#xA; &lt;p&gt;Path to Tanks&amp;amp;Temples source datasets, required if training or rendering.&lt;/p&gt; &#xA; &lt;h4&gt;--deepblending / -db&lt;/h4&gt; &#xA; &lt;p&gt;Path to Deep Blending source datasets, required if training or rendering.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Interactive Viewers&lt;/h2&gt; &#xA;&lt;p&gt;We provide two interactive viewers for our method: remote and real-time. Our viewing solutions are based on the &lt;a href=&#34;https://sibr.gitlabpages.inria.fr/&#34;&gt;SIBR&lt;/a&gt; framework, developed by the GRAPHDECO group for several novel-view synthesis projects.&lt;/p&gt; &#xA;&lt;h3&gt;Hardware Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenGL 4.5-ready GPU and drivers (or latest MESA software)&lt;/li&gt; &#xA; &lt;li&gt;4 GB VRAM recommended&lt;/li&gt; &#xA; &lt;li&gt;CUDA-ready GPU with Compute Capability 7.0+ (only for Real-Time Viewer)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Software Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visual Studio or g++, &lt;strong&gt;not Clang&lt;/strong&gt; (we used Visual Studio 2019 for Windows)&lt;/li&gt; &#xA; &lt;li&gt;CUDA SDK 11, install &lt;em&gt;after&lt;/em&gt; Visual Studio (we used 11.8)&lt;/li&gt; &#xA; &lt;li&gt;CMake (recent version, we used 3.24)&lt;/li&gt; &#xA; &lt;li&gt;7zip (only on Windows)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Pre-built Windows Binaries&lt;/h3&gt; &#xA;&lt;p&gt;We provide pre-built binaries for Windows &lt;a href=&#34;https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/binaries/viewers.zip&#34;&gt;here&lt;/a&gt;. We recommend using them on Windows for an efficient setup, since the building of SIBR involves several external dependencies that must be downloaded and compiled on-the-fly.&lt;/p&gt; &#xA;&lt;h3&gt;Installation from Source&lt;/h3&gt; &#xA;&lt;p&gt;If you cloned with submodules (e.g., using &lt;code&gt;--recursive&lt;/code&gt;), the source code for the viewers is found in &lt;code&gt;SIBR_viewers&lt;/code&gt;. The network viewer runs within the SIBR framework for Image-based Rendering applications.&lt;/p&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;p&gt;CMake should take care of your dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd SIBR_viewers&#xA;cmake -Bbuild .&#xA;cmake --build build --target install --config RelWithDebInfo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may specify a different configuration, e.g. &lt;code&gt;Debug&lt;/code&gt; if you need more control during development.&lt;/p&gt; &#xA;&lt;h4&gt;Ubuntu 22.04&lt;/h4&gt; &#xA;&lt;p&gt;You will need to install a few dependencies before running the project setup.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Dependencies&#xA;sudo apt install -y libglew-dev libassimp-dev libboost-all-dev libgtk-3-dev libopencv-dev libglfw3-dev libavdevice-dev libavcodec-dev libeigen3-dev libxxf86vm-dev libembree-dev&#xA;# Project setup&#xA;cd SIBR_viewers&#xA;cmake -Bbuild . -DCMAKE_BUILD_TYPE=Release # add -G Ninja to build faster&#xA;cmake --build build -j24 --target install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Ubuntu 20.04&lt;/h4&gt; &#xA;&lt;p&gt;Backwards compatibility with Focal Fossa is not fully tested, but building SIBR with CMake should still work after invoking&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git checkout fossa_compatibility&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Navigation in SIBR Viewers&lt;/h3&gt; &#xA;&lt;p&gt;The SIBR interface provides several methods of navigating the scene. By default, you will be started with an FPS navigator, which you can control with &lt;code&gt;W, A, S, D, Q, E&lt;/code&gt; for camera translation and &lt;code&gt;I, K, J, L, U, O&lt;/code&gt; for rotation. Alternatively, you may want to use a Trackball-style navigator (select from the floating menu). You can also snap to a camera from the data set with the &lt;code&gt;Snap to&lt;/code&gt; button or find the closest camera with &lt;code&gt;Snap to closest&lt;/code&gt;. The floating menues also allow you to change the navigation speed. You can use the &lt;code&gt;Scaling Modifier&lt;/code&gt; to control the size of the displayed Gaussians, or show the initial point cloud.&lt;/p&gt; &#xA;&lt;h3&gt;Running the Network Viewer&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/graphdeco-inria/gaussian-splatting/assets/40643808/90a2e4d3-cf2e-4633-b35f-bfe284e28ff7&#34;&gt;https://github.com/graphdeco-inria/gaussian-splatting/assets/40643808/90a2e4d3-cf2e-4633-b35f-bfe284e28ff7&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;After extracting or installing the viewers, you may run the compiled &lt;code&gt;SIBR_remoteGaussian_app[_config]&lt;/code&gt; app in &lt;code&gt;&amp;lt;SIBR install dir&amp;gt;/bin&lt;/code&gt;, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./&amp;lt;SIBR install dir&amp;gt;/bin/SIBR_remoteGaussian_app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The network viewer allows you to connect to a running training process on the same or a different machine. If you are training on the same machine and OS, no command line parameters should be required: the optimizer communicates the location of the training data to the network viewer. By default, optimizer and network viewer will try to establish a connection on &lt;strong&gt;localhost&lt;/strong&gt; on port &lt;strong&gt;6009&lt;/strong&gt;. You can change this behavior by providing matching &lt;code&gt;--ip&lt;/code&gt; and &lt;code&gt;--port&lt;/code&gt; parameters to both the optimizer and the network viewer. If for some reason the path used by the optimizer to find the training data is not reachable by the network viewer (e.g., due to them running on different (virtual) machines), you may specify an override location to the viewer by using &lt;code&gt;-s &amp;lt;source path&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;span style=&#34;font-weight: bold;&#34;&gt;Primary Command Line Arguments for Network Viewer&lt;/span&gt;&lt;/summary&gt; &#xA; &lt;h4&gt;--path / -s&lt;/h4&gt; &#xA; &lt;p&gt;Argument to override model&#39;s path to source dataset.&lt;/p&gt; &#xA; &lt;h4&gt;--ip&lt;/h4&gt; &#xA; &lt;p&gt;IP to use for connection to a running training script.&lt;/p&gt; &#xA; &lt;h4&gt;--port&lt;/h4&gt; &#xA; &lt;p&gt;Port to use for connection to a running training script.&lt;/p&gt; &#xA; &lt;h4&gt;--rendering-size&lt;/h4&gt; &#xA; &lt;p&gt;Takes two space separated numbers to define the resolution at which network rendering occurs, &lt;code&gt;1200&lt;/code&gt; width by default. Note that to enforce an aspect that differs from the input images, you need &lt;code&gt;--force-aspect-ratio&lt;/code&gt; too.&lt;/p&gt; &#xA; &lt;h4&gt;--load_images&lt;/h4&gt; &#xA; &lt;p&gt;Flag to load source dataset images to be displayed in the top view for each camera.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Running the Real-Time Viewer&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/graphdeco-inria/gaussian-splatting/assets/40643808/0940547f-1d82-4c2f-a616-44eabbf0f816&#34;&gt;https://github.com/graphdeco-inria/gaussian-splatting/assets/40643808/0940547f-1d82-4c2f-a616-44eabbf0f816&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;After extracting or installing the viewers, you may run the compiled &lt;code&gt;SIBR_gaussianViewer_app[_config]&lt;/code&gt; app in &lt;code&gt;&amp;lt;SIBR install dir&amp;gt;/bin&lt;/code&gt;, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./&amp;lt;SIBR install dir&amp;gt;/bin/SIBR_gaussianViewer_app -m &amp;lt;path to trained model&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It should suffice to provide the &lt;code&gt;-m&lt;/code&gt; parameter pointing to a trained model directory. Alternatively, you can specify an override location for training input data using &lt;code&gt;-s&lt;/code&gt;. To use a specific resolution other than the auto-chosen one, specify &lt;code&gt;--rendering-size &amp;lt;width&amp;gt; &amp;lt;height&amp;gt;&lt;/code&gt;. Combine it with &lt;code&gt;--force-aspect-ratio&lt;/code&gt; if you want the exact resolution and don&#39;t mind image distortion.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;To unlock the full frame rate, please disable V-Sync on your machine and also in the application (Menu → Display). In a multi-GPU system (e.g., laptop) your OpenGL/Display GPU should be the same as your CUDA GPU (e.g., by setting the application&#39;s GPU preference on Windows, see below) for maximum performance.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/graphdeco-inria/gaussian-splatting/main/assets/select.png&#34; alt=&#34;Teaser image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In addition to the intial point cloud and the splats, you also have the option to visualize the Gaussians by rendering them as ellipsoids from the floating menu. SIBR has many other functionalities, please see the &lt;a href=&#34;https://sibr.gitlabpages.inria.fr/&#34;&gt;documentation&lt;/a&gt; for more details on the viewer, navigation options etc. There is also a Top View (available from the menu) that shows the placement of the input cameras and the original SfM point cloud; please note that Top View slows rendering when enabled. The real-time viewer also uses slightly more aggressive, fast culling, which can be toggled in the floating menu. If you ever encounter an issue that can be solved by turning fast culling off, please let us know.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;span style=&#34;font-weight: bold;&#34;&gt;Primary Command Line Arguments for Real-Time Viewer&lt;/span&gt;&lt;/summary&gt; &#xA; &lt;h4&gt;--model-path / -m&lt;/h4&gt; &#xA; &lt;p&gt;Path to trained model.&lt;/p&gt; &#xA; &lt;h4&gt;--iteration&lt;/h4&gt; &#xA; &lt;p&gt;Specifies which of state to load if multiple are available. Defaults to latest available iteration.&lt;/p&gt; &#xA; &lt;h4&gt;--path / -s&lt;/h4&gt; &#xA; &lt;p&gt;Argument to override model&#39;s path to source dataset.&lt;/p&gt; &#xA; &lt;h4&gt;--rendering-size&lt;/h4&gt; &#xA; &lt;p&gt;Takes two space separated numbers to define the resolution at which real-time rendering occurs, &lt;code&gt;1200&lt;/code&gt; width by default. Note that to enforce an aspect that differs from the input images, you need &lt;code&gt;--force-aspect-ratio&lt;/code&gt; too.&lt;/p&gt; &#xA; &lt;h4&gt;--load_images&lt;/h4&gt; &#xA; &lt;p&gt;Flag to load source dataset images to be displayed in the top view for each camera.&lt;/p&gt; &#xA; &lt;h4&gt;--device&lt;/h4&gt; &#xA; &lt;p&gt;Index of CUDA device to use for rasterization if multiple are available, &lt;code&gt;0&lt;/code&gt; by default.&lt;/p&gt; &#xA; &lt;h4&gt;--no_interop&lt;/h4&gt; &#xA; &lt;p&gt;Disables CUDA/GL interop forcibly. Use on systems that may not behave according to spec (e.g., WSL2 with MESA GL 4.5 software rendering).&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Processing your own Scenes&lt;/h2&gt; &#xA;&lt;p&gt;Our COLMAP loaders expect the following dataset structure in the source path location:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;location&amp;gt;&#xA;|---images&#xA;|   |---&amp;lt;image 0&amp;gt;&#xA;|   |---&amp;lt;image 1&amp;gt;&#xA;|   |---...&#xA;|---sparse&#xA;    |---0&#xA;        |---cameras.bin&#xA;        |---images.bin&#xA;        |---points3D.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For rasterization, the camera models must be either a SIMPLE_PINHOLE or PINHOLE camera. We provide a converter script &lt;code&gt;convert.py&lt;/code&gt;, to extract undistorted images and SfM information from input images. Optionally, you can use ImageMagick to resize the undistorted images. This rescaling is similar to MipNeRF360, i.e., it creates images with 1/2, 1/4 and 1/8 the original resolution in corresponding folders. To use them, please first install a recent version of COLMAP (ideally CUDA-powered) and ImageMagick. Put the images you want to use in a directory &lt;code&gt;&amp;lt;location&amp;gt;/input&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;location&amp;gt;&#xA;|---input&#xA;    |---&amp;lt;image 0&amp;gt;&#xA;    |---&amp;lt;image 1&amp;gt;&#xA;    |---...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have COLMAP and ImageMagick on your system path, you can simply run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python convert.py -s &amp;lt;location&amp;gt; [--resize] #If not resizing, ImageMagick is not needed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can use the optional parameters &lt;code&gt;--colmap_executable&lt;/code&gt; and &lt;code&gt;--magick_executable&lt;/code&gt; to point to the respective paths. Please note that on Windows, the executable should point to the COLMAP &lt;code&gt;.bat&lt;/code&gt; file that takes care of setting the execution environment. Once done, &lt;code&gt;&amp;lt;location&amp;gt;&lt;/code&gt; will contain the expected COLMAP data set structure with undistorted, resized input images, in addition to your original images and some temporary (distorted) data in the directory &lt;code&gt;distorted&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have your own COLMAP dataset without undistortion (e.g., using &lt;code&gt;OPENCV&lt;/code&gt; camera), you can try to just run the last part of the script: Put the images in &lt;code&gt;input&lt;/code&gt; and the COLMAP info in a subdirectory &lt;code&gt;distorted&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;location&amp;gt;&#xA;|---input&#xA;|   |---&amp;lt;image 0&amp;gt;&#xA;|   |---&amp;lt;image 1&amp;gt;&#xA;|   |---...&#xA;|---distorted&#xA;    |---database.db&#xA;    |---sparse&#xA;        |---0&#xA;            |---...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python convert.py -s &amp;lt;location&amp;gt; --skip_matching [--resize] #If not resizing, ImageMagick is not needed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;span style=&#34;font-weight: bold;&#34;&gt;Command Line Arguments for convert.py&lt;/span&gt;&lt;/summary&gt; &#xA; &lt;h4&gt;--no_gpu&lt;/h4&gt; &#xA; &lt;p&gt;Flag to avoid using GPU in COLMAP.&lt;/p&gt; &#xA; &lt;h4&gt;--skip_matching&lt;/h4&gt; &#xA; &lt;p&gt;Flag to indicate that COLMAP info is available for images.&lt;/p&gt; &#xA; &lt;h4&gt;--source_path / -s&lt;/h4&gt; &#xA; &lt;p&gt;Location of the inputs.&lt;/p&gt; &#xA; &lt;h4&gt;--camera&lt;/h4&gt; &#xA; &lt;p&gt;Which camera model to use for the early matching steps, &lt;code&gt;OPENCV&lt;/code&gt; by default.&lt;/p&gt; &#xA; &lt;h4&gt;--resize&lt;/h4&gt; &#xA; &lt;p&gt;Flag for creating resized versions of input images.&lt;/p&gt; &#xA; &lt;h4&gt;--colmap_executable&lt;/h4&gt; &#xA; &lt;p&gt;Path to the COLMAP executable (&lt;code&gt;.bat&lt;/code&gt; on Windows).&lt;/p&gt; &#xA; &lt;h4&gt;--magick_executable&lt;/h4&gt; &#xA; &lt;p&gt;Path to the ImageMagick executable.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Where do I get data sets, e.g., those referenced in &lt;code&gt;full_eval.py&lt;/code&gt;?&lt;/em&gt; The MipNeRF360 data set is provided by the authors of the original paper on the project site. Note that two of the data sets cannot be openly shared and require you to consult the authors directly. For Tanks&amp;amp;Temples and Deep Blending, please use the download links provided at the top of the page. Alternatively, you may access the cloned data (status: August 2023!) from &lt;a href=&#34;https://huggingface.co/camenduru/gaussian-splatting&#34;&gt;HuggingFace&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;How can I use this for a much larger dataset, like a city district?&lt;/em&gt; The current method was not designed for these, but given enough memory, it should work out. However, the approach can struggle in multi-scale detail scenes (extreme close-ups, mixed with far-away shots). This is usually the case in, e.g., driving data sets (cars close up, buildings far away). For such scenes, you can lower the &lt;code&gt;--position_lr_init&lt;/code&gt;, &lt;code&gt;--position_lr_final&lt;/code&gt; and &lt;code&gt;--scaling_lr&lt;/code&gt; (x0.3, x0.1, ...). The more extensive the scene, the lower these values should be. Below, we use default learning rates (left) and &lt;code&gt;--position_lr_init 0.000016 --scaling_lr 0.001&#34;&lt;/code&gt; (right).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/graphdeco-inria/gaussian-splatting/main/assets/worse.png&#34; alt=&#34;Default learning rate result&#34; title=&#34;title-1&#34;&gt; &#xA;    &lt;!-- --&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&#xA;    &lt;!-- --&gt; &lt;img src=&#34;https://raw.githubusercontent.com/graphdeco-inria/gaussian-splatting/main/assets/better.png&#34; alt=&#34;Reduced learning rate result&#34; title=&#34;title-2&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;I&#39;m on Windows and I can&#39;t manage to build the submodules, what do I do?&lt;/em&gt; Consider following the steps in the excellent video tutorial &lt;a href=&#34;https://www.youtube.com/watch?v=UXtuigy_wYc&#34;&gt;here&lt;/a&gt;, hopefully they should help. The order in which the steps are done is important! Alternatively, consider using the linked Colab template.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;It still doesn&#39;t work. It says something about &lt;code&gt;cl.exe&lt;/code&gt;. What do I do?&lt;/em&gt; User Henry Pearce found a workaround. You can you try adding the visual studio path to your environment variables (your version number might differ); &lt;code&gt;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\bin\Hostx64\x64&lt;/code&gt; Then make sure you start a new conda prompt and cd to your repo location and try this;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda activate gaussian_splatting&#xA;cd &amp;lt;dir_to_repo&amp;gt;/gaussian-splatting&#xA;pip install submodules\diff-gaussian-rasterization&#xA;pip install submodules\simple-knn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;I&#39;m on macOS/Puppy Linux/Greenhat and I can&#39;t manage to build, what do I do?&lt;/em&gt; Sorry, we can&#39;t provide support for platforms outside of the ones we list in this README. Consider using the linked Colab template.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;I don&#39;t have 24 GB of VRAM for training, what do I do?&lt;/em&gt; The VRAM consumption is determined by the number of points that are being optimized, which increases over time. If you only want to train to 7k iterations, you will need significantly less. To do the full training routine and avoid running out of memory, you can increase the &lt;code&gt;--densify_grad_threshold&lt;/code&gt;, &lt;code&gt;--densification_interval&lt;/code&gt; or reduce the value of &lt;code&gt;--densify_until_iter&lt;/code&gt;. Note however that this will affect the quality of the result. Also try setting &lt;code&gt;--test_iterations&lt;/code&gt; to &lt;code&gt;-1&lt;/code&gt; to avoid memory spikes during testing. If &lt;code&gt;--densify_grad_threshold&lt;/code&gt; is very high, no densification should occur and training should complete if the scene itself loads successfully.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;24 GB of VRAM for reference quality training is still a lot! Can&#39;t we do it with less?&lt;/em&gt; Yes, most likely. By our calculations it should be possible with &lt;strong&gt;way&lt;/strong&gt; less memory (~8GB). If we can find the time we will try to achieve this. If some PyTorch veteran out there wants to tackle this, we look forward to your pull request!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;How can I use the differentiable Gaussian rasterizer for my own project?&lt;/em&gt; Easy, it is included in this repo as a submodule &lt;code&gt;diff-gaussian-rasterization&lt;/code&gt;. Feel free to check out and install the package. It&#39;s not really documented, but using it from the Python side is very straightforward (cf. &lt;code&gt;gaussian_renderer/__init__.py&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Wait, but &lt;code&gt;&amp;lt;insert feature&amp;gt;&lt;/code&gt; isn&#39;t optimized and could be much better?&lt;/em&gt; There are several parts we didn&#39;t even have time to think about improving (yet). The performance you get with this prototype is probably a rather slow baseline for what is physically possible.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Something is broken, how did this happen?&lt;/em&gt; We tried hard to provide a solid and comprehensible basis to make use of the paper&#39;s method. We have refactored the code quite a bit, but we have limited capacity to test all possible usage scenarios. Thus, if part of the website, the code or the performance is lacking, please create an issue. If we find the time, we will do our best to address it.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>facebookresearch/nougat</title>
    <updated>2023-09-10T02:02:51Z</updated>
    <id>tag:github.com,2023-09-10:/facebookresearch/nougat</id>
    <link href="https://github.com/facebookresearch/nougat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Implementation of Nougat Neural Optical Understanding for Academic Documents&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Nougat: Neural Optical Understanding for Academic Documents&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2308.13418&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Paper-arxiv.2308.13418-white&#34; alt=&#34;Paper&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/facebookresearch/nougat&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/facebookresearch/nougat&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/nougat-ocr&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/nougat-ocr?logo=pypi&#34; alt=&#34;PyPI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.python.org/downloads/release/python-390/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/python-3.9+-blue.svg?sanitize=true&#34; alt=&#34;Python 3.9+&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/psf/black&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code%20style-black-000000.svg?sanitize=true&#34; alt=&#34;Code style: black&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/spaces/ysharma/nougat&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Community%20Space-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;This is the official repository for Nougat, the academic document PDF parser that understands LaTeX math and tables.&lt;/p&gt; &#xA;&lt;p&gt;Project page: &lt;a href=&#34;https://facebookresearch.github.io/nougat/&#34;&gt;https://facebookresearch.github.io/nougat/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;From pip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install nougat-ocr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install git+https://github.com/facebookresearch/nougat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note, on Windows: If you want to utilize a GPU, make sure you first install the correct PyTorch version. Follow instructions &lt;a href=&#34;https://pytorch.org/get-started/locally/&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;There are extra dependencies if you want to call the model from an API or generate a dataset. Install via&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pip install &#34;nougat-ocr[api]&#34;&lt;/code&gt; or &lt;code&gt;pip install &#34;nougat-ocr[dataset]&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Get prediction for a PDF&lt;/h3&gt; &#xA;&lt;h4&gt;CLI&lt;/h4&gt; &#xA;&lt;p&gt;To get predictions for a PDF run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nougat path/to/file.pdf -o output_directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;usage: nougat [-h] [--batchsize BATCHSIZE] [--checkpoint CHECKPOINT] [--out OUT] [--recompute] [--markdown] pdf [pdf ...]&#xA;&#xA;positional arguments:&#xA;  pdf                   PDF(s) to process.&#xA;&#xA;options:&#xA;  -h, --help            show this help message and exit&#xA;  --batchsize BATCHSIZE, -b BATCHSIZE&#xA;                        Batch size to use.&#xA;  --checkpoint CHECKPOINT, -c CHECKPOINT&#xA;                        Path to checkpoint directory.&#xA;  --out OUT, -o OUT     Output directory.&#xA;  --recompute           Recompute already computed PDF, discarding previous predictions.&#xA;  --markdown            Add postprocessing step for markdown compatibility.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the output directory every PDF will be saved as a &lt;code&gt;.mmd&lt;/code&gt; file, the lightweight markup language, mostly compatible with &lt;a href=&#34;https://github.com/Mathpix/mathpix-markdown-it&#34;&gt;Mathpix Markdown&lt;/a&gt; (we make use of the LaTeX tables).&lt;/p&gt; &#xA;&lt;h4&gt;API&lt;/h4&gt; &#xA;&lt;p&gt;With the extra dependencies you use &lt;code&gt;app.py&lt;/code&gt; to start an API. Call&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ nougat_api&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get a prediction of a PDF file by making a POST request to &lt;a href=&#34;http://127.0.0.1:8503/predict/&#34;&gt;http://127.0.0.1:8503/predict/&lt;/a&gt;. It also accepts parameters &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; to limit the computation to select page numbers (boundaries are included).&lt;/p&gt; &#xA;&lt;p&gt;The response is a string with the markdown text of the document.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -X &#39;POST&#39; \&#xA;  &#39;http://127.0.0.1:8503/predict/&#39; \&#xA;  -H &#39;accept: application/json&#39; \&#xA;  -H &#39;Content-Type: multipart/form-data&#39; \&#xA;  -F &#39;file=@&amp;lt;PDFFILE.pdf&amp;gt;;type=application/pdf&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use the limit the conversion to pages 1 to 5, ue the start/stop parameters in the request URL: &lt;a href=&#34;http://127.0.0.1:8503/predict/?start=1&amp;amp;stop=5&#34;&gt;http://127.0.0.1:8503/predict/?start=1&amp;amp;stop=5&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Dataset&lt;/h2&gt; &#xA;&lt;h3&gt;Generate dataset&lt;/h3&gt; &#xA;&lt;p&gt;To generate a dataset you need&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;A directory containing the PDFs&lt;/li&gt; &#xA; &lt;li&gt;A directory containing the &lt;code&gt;.html&lt;/code&gt; files (processed &lt;code&gt;.tex&lt;/code&gt; files by &lt;a href=&#34;https://math.nist.gov/~BMiller/LaTeXML/&#34;&gt;LaTeXML&lt;/a&gt;) with the same folder structure&lt;/li&gt; &#xA; &lt;li&gt;A binary file of &lt;a href=&#34;https://github.com/allenai/pdffigures2&#34;&gt;pdffigures2&lt;/a&gt; and a corresponding environment variable &lt;code&gt;export PDFFIGURES_PATH=&#34;/path/to/binary.jar&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Next run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -m nougat.dataset.split_htmls_to_pages --html path/html/root --pdfs path/pdf/root --out path/paired/output --figure path/pdffigures/outputs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additional arguments include&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Argument&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--recompute&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;recompute all splits&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--markdown MARKDOWN&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Markdown output dir&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--workers WORKERS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;How many processes to use&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--dpi DPI&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;What resolution the pages will be saved at&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--timeout TIMEOUT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;max time per paper in seconds&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--tesseract&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Tesseract OCR prediction for each page&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Finally create a &lt;code&gt;jsonl&lt;/code&gt; file that contains all the image paths, markdown text and meta information.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -m nougat.dataset.create_index --dir path/paired/output --out index.jsonl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For each &lt;code&gt;jsonl&lt;/code&gt; file you also need to generate a seek map for faster data loading:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -m nougat.dataset.gen_seek file.jsonl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The resulting directory structure can look as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;root/&#xA;├── images&#xA;├── train.jsonl&#xA;├── train.seek.map&#xA;├── test.jsonl&#xA;├── test.seek.map&#xA;├── validation.jsonl&#xA;└── validation.seek.map&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;.mmd&lt;/code&gt; and &lt;code&gt;.json&lt;/code&gt; files in the &lt;code&gt;path/paired/output&lt;/code&gt; (here &lt;code&gt;images&lt;/code&gt;) are no longer required. This can be useful for pushing to a S3 bucket by halving the amount of files.&lt;/p&gt; &#xA;&lt;h2&gt;Training&lt;/h2&gt; &#xA;&lt;p&gt;To train or fine tune a Nougat model, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python train.py --config config/train_nougat.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Evaluation&lt;/h2&gt; &#xA;&lt;p&gt;Run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python test.py --checkpoint path/to/checkpoint --dataset path/to/test.jsonl --save_path path/to/results.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get the results for the different text modalities, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -m nougat.metrics path/to/results.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{blecher2023nougat,&#xA;      title={Nougat: Neural Optical Understanding for Academic Documents}, &#xA;      author={Lukas Blecher and Guillem Cucurull and Thomas Scialom and Robert Stojnic},&#xA;      year={2023},&#xA;      eprint={2308.13418},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.LG}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;This repository builds on top of the &lt;a href=&#34;https://github.com/clovaai/donut/&#34;&gt;Donut&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Nougat codebase is licensed under MIT.&lt;/p&gt; &#xA;&lt;p&gt;Nougat model weights are licensed under CC-BY-NC.&lt;/p&gt;</summary>
  </entry>
</feed>