<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub XSLT Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-19T02:01:16Z</updated>
  <subtitle>Weekly Trending of XSLT in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Steven-Eardley/nlg</title>
    <updated>2023-11-19T02:01:16Z</updated>
    <id>tag:github.com,2023-11-19:/Steven-Eardley/nlg</id>
    <link href="https://github.com/Steven-Eardley/nlg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NLG Assignments&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nlg&lt;/h1&gt; &#xA;&lt;p&gt;NLG Assignments&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dblock/vmwaretasks</title>
    <updated>2023-11-19T02:01:16Z</updated>
    <id>tag:github.com,2023-11-19:/dblock/vmwaretasks</id>
    <link href="https://github.com/dblock/vmwaretasks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;C# VixCOM Wrapper Library &amp; Tools&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VMWareTasks&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dblock/vmwaretasks/raw/master/Documentation/Images/VMWareLogo.jpg&#34; alt=&#34;vmwaretasks&#34; title=&#34;VMWareTasks&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The VMWare SDK, specifically VixCOM, offers a rich set of programmable interfaces that enable developers to drive virtual machines programmatically with an asynchronous, job-based programming model. Unfortunately that turns out to be too complicated for most scenarios where developers want to use a simple object-oriented interface for common VMWare virtual machine automation tasks. The VMWareTasks is a commercial-grade library that implements this simple interface and makes programming against virtual machines a no-brainer.&lt;/p&gt; &#xA;&lt;p&gt;VMWareTasks contains a complete VixCOM wrapper Vestris.VMWareLib (Vestris.VMWareLib.dll) and a library Vestris.VMWareLib.Tools (Vestris.VMWareTools.dll) that implements additional commonly needed functionality or addresses known VixCOM API limitations.&lt;/p&gt; &#xA;&lt;p&gt;VMWareTasks exposes a C# interface, a COM-enabled interface for script clients, a Java bridge for Java programs and a set of MSBuild tasks.&lt;/p&gt; &#xA;&lt;h2&gt;Build Status&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dblock/vmwaretasks/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/dblock/vmwaretasks/actions/workflows/build.yml/badge.svg?branch=master&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://groups.google.com/group/vmwaretasks&#34;&gt;Need Help? VMWareTasks Google Group&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://communities.vmware.com/community/vmtn/developer/forums/automationapi&#34;&gt;Need VixCOM Help? VMWare Communities&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://code.dblock.org/downloads/vmwaretasks/VMWareTasks-1.7.zip&#34;&gt;Latest Stable Release - 1.7&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://my.vmware.com/group/vmware/get-download?downloadGroup=VIX-API-1110&#34;&gt;Downlod VixCOM 1.11&lt;/a&gt; (you will need to login)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.vmware.com/support/developer/vix-api/vix111_reference/index2.html&#34;&gt;VixCOM API 1.11 Reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;In order to use the library you must install the following VMWare software.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;VMWare VIX. This is the SDK, obtained from &lt;a href=&#34;http://www.vmware.com/download/sdk/vmauto.html&#34;&gt;http://www.vmware.com/download/sdk/vmauto.html&lt;/a&gt;. Version 1.6.2 or newer is required for VI support. Version 1.8.0 or newer is required for VMWare Player support.&lt;/li&gt; &#xA; &lt;li&gt;Either VMWare Workstation 6.5.2 or later, VMWare Server 2.0, VMWare Player 3.0 or 3.1, a Virtual Infrastructure environment (eg. ESXi) or VSphere 4.0 or 4.1.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started (C#)&lt;/h2&gt; &#xA;&lt;p&gt;Download the latest version of this library &lt;a href=&#34;http://code.dblock.org/downloads/vmwaretasks/VMWareTasks-1.7.zip&#34;&gt;here&lt;/a&gt;. Add a reference to &lt;code&gt;Vestris.VMWareLib.dll&lt;/code&gt; to your project and a &lt;code&gt;using&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using Vestris.VMWareLib;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now connect to a local VMWare Workstation, local or remote VMWare Server or a remote ESX server and perform VMWare client and server tasks. The following example creates, restores, powers on and removes a snapshot on a VMWare Workstation host.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// declare a virtual host&#xA;using (VMWareVirtualHost virtualHost = new VMWareVirtualHost())&#xA;{&#xA;    // connect to a local VMWare Workstation virtual host&#xA;    virtualHost.ConnectToVMWareWorkstation();&#xA;    // open an existing virtual machine&#xA;    using (VMWareVirtualMachine virtualMachine = virtualHost.Open(@&#34;C:\Virtual Machines\xp\xp.vmx&#34;))&#xA;    {&#xA;        // power on this virtual machine&#xA;        virtualMachine.PowerOn();&#xA;        // login to the virtual machine&#xA;        virtualMachine.LoginInGuest(&#34;Administrator&#34;, &#34;password&#34;);&#xA;        // wait for VMWare Tools&#xA;        virtualMachine.WaitForToolsInGuest();&#xA;        // run notepad&#xA;        virtualMachine.RunProgramInGuest(&#34;notepad.exe&#34;, string.Empty);&#xA;        // create a new snapshot&#xA;        string name = &#34;New Snapshot&#34;;&#xA;        // take a snapshot at the current state&#xA;        VMWareSnapshot createdSnapshot = virtualMachine.Snapshots.CreateSnapshot(name, &#34;test snapshot&#34;);&#xA;        createdSnapshot.Dispose();&#xA;       &#xA;        // find the newly created snapshot&#xA;        using (VMWareSnapshot foundSnapshot = virtualMachine.Snapshots.GetNamedSnapshot(name))&#xA;        {&#xA;            // revert to the new snapshot&#xA;            foundSnapshot.RevertToSnapshot();&#xA;            // delete snapshot&#xA;            foundSnapshot.RemoveSnapshot();&#xA;        }&#xA;        &#xA;         // power off&#xA;        virtualMachine.PowerOff();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following example creates, restores, powers on and removes a snapshot on a local VMWare Server 2.x host. VMWare Server 2.x generally behaves like an ESX host, replace &#34;localhost&#34; with a real host name to make a remote connection.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// declare a virtual host&#xA;using (VMWareVirtualHost virtualHost = new VMWareVirtualHost())&#xA;{&#xA;    // connect to a local VMWare Server 2.x virtual host&#xA;    virtualHost.ConnectToVMWareVIServer(&#34;localhost:8333&#34;, &#34;vmuser&#34;, &#34;password&#34;);&#xA;    // open an existing virtual machine&#xA;    using (VMWareVirtualMachine virtualMachine = virtualHost.Open(@&#34;[standard] xp/xp.vmx&#34;))&#xA;    {&#xA;        // power on this virtual machine&#xA;        virtualMachine.PowerOn();&#xA;        // wait for VMWare Tools&#xA;        virtualMachine.WaitForToolsInGuest();&#xA;        // login to the virtual machine&#xA;        virtualMachine.LoginInGuest(&#34;Administrator&#34;, &#34;password&#34;);&#xA;        // run notepad&#xA;        virtualMachine.RunProgramInGuest(&#34;notepad.exe&#34;, string.Empty);&#xA;        // create a new snapshot&#xA;        string name = &#34;New Snapshot&#34;;&#xA;        // take a snapshot at the current state&#xA;        virtualMachine.Snapshots.CreateSnapshot(name, &#34;test snapshot&#34;);&#xA;        // power off&#xA;        virtualMachine.PowerOff();&#xA;        // find the newly created snapshot&#xA;        using (VMWareSnapshot snapshot = virtualMachine.Snapshots.GetNamedSnapshot(name))&#xA;        {&#xA;            // revert to the new snapshot&#xA;            snapshot.RevertToSnapshot();&#xA;            // delete snapshot&#xA;            snapshot.RemoveSnapshot();&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following example creates, restores, powers on and removes a snapshot on a remote VMWare ESX host.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// declare a virtual host&#xA;using (VMWareVirtualHost virtualHost = new VMWareVirtualHost())&#xA;{&#xA;    // connect to a remove (VMWare ESX) virtual machine&#xA;    virtualHost.ConnectToVMWareVIServer(&#34;esx.mycompany.com&#34;, &#34;vmuser&#34;, &#34;password&#34;);&#xA;    // open an existing virtual machine&#xA;    using (VMWareVirtualMachine virtualMachine = virtualHost.Open(&#34;[storage] testvm/testvm.vmx&#34;))&#xA;    {&#xA;        // power on this virtual machine&#xA;        virtualMachine.PowerOn();&#xA;        // wait for VMWare Tools&#xA;        virtualMachine.WaitForToolsInGuest();&#xA;        // login to the virtual machine&#xA;        virtualMachine.LoginInGuest(&#34;Administrator&#34;, &#34;password&#34;);&#xA;        // run notepad&#xA;        virtualMachine.RunProgramInGuest(&#34;notepad.exe&#34;, string.Empty);&#xA;        // create a new snapshot&#xA;        string name = &#34;New Snapshot&#34;;&#xA;        // take a snapshot at the current state&#xA;        virtualMachine.Snapshots.CreateSnapshot(name, &#34;test snapshot&#34;);&#xA;        // power off&#xA;        virtualMachine.PowerOff();&#xA;        // find the newly created snapshot&#xA;        using (VMWareSnapshot snapshot = virtualMachine.Snapshots.GetNamedSnapshot(name))&#xA;        {&#xA;            // revert to the new snapshot&#xA;            snapshot.RevertToSnapshot();&#xA;            // delete snapshot&#xA;            snapshot.RemoveSnapshot();&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note, that because VMWare VixCOM is a native 32-bit application, ensure that the platform target for your program is &lt;em&gt;x86&lt;/em&gt; and not &lt;em&gt;Any CPU&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Most VMWareTasks objects are IDisposable and should be wrapped in a using construct or properly disposed of before calling &lt;code&gt;VMWareVirtualHost::Disconnect&lt;/code&gt;. Failure to dispose of all objects, including snapshots and hosts may result in an access violation when VixCOM.dll is unloaded. This is particularly true when working with VMWare ESX 4.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project started as a &lt;a href=&#34;http://www.codeproject.com/Articles/31961/Automating-VMWare-Tasks-in-C-with-the-VIX-API&#34;&gt;CodeProject Article&lt;/a&gt; and grew with the help of many contributors. Fork the project. Make your feature addition or bug fix with tests. Send a pull request. Bonus points for topic branches.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright and License&lt;/h2&gt; &#xA;&lt;p&gt;MIT License, see &lt;a href=&#34;https://github.com/dblock/vmwaretasks/raw/master/LICENSE.md&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;(c) 2009-2012 &lt;a href=&#34;http://code.dblock.org&#34;&gt;Daniel Doubrovkine, Vestris Inc.&lt;/a&gt; and &lt;a href=&#34;https://github.com/dblock/vmwaretasks/raw/master/CHANGELOG.md&#34;&gt;Contributors&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>