<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub XSLT Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-27T02:08:43Z</updated>
  <subtitle>Weekly Trending of XSLT in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>EdgedesignCZ/phpqa</title>
    <updated>2023-08-27T02:08:43Z</updated>
    <id>tag:github.com,2023-08-27:/EdgedesignCZ/phpqa</id>
    <link href="https://github.com/EdgedesignCZ/phpqa" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Analyze PHP code with one command&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PHPQA&lt;/h1&gt; &#xA;&lt;p&gt;Analyze PHP code with one command.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/edgedesign/phpqa&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/edgedesign/phpqa/license&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/EdgedesignCZ/phpqa/master/CHANGELOG.md&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/edgedesign/phpqa/v/stable&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/edgedesign/phpqa&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/edgedesign/phpqa/downloads&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/EdgedesignCZ/phpqa/actions&#34;&gt;&lt;img src=&#34;https://github.com/EdgedesignCZ/phpqa/workflows/PHPQA%20CI/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/zdenekdrahos/phpqa&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/t9f05uk4cjcg294o?svg=true&amp;amp;passingText=Windows&#34; alt=&#34;Windows status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHP &amp;gt;= 5.4.0&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;xsl&lt;/code&gt; extension for &lt;a href=&#34;https://raw.githubusercontent.com/EdgedesignCZ/phpqa/master/#html-reports&#34;&gt;HTML reports&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;Every analyzer has different arguments and options in different formats &lt;em&gt;(no surprise in PHP world :)&lt;/em&gt;. If you ever tried to get ignoring directories to work then you know what I mean. On the other hand CLI tools are cool because you can analyze any directory or file. Unfortunately &lt;a href=&#34;http://jenkins-php.org/automation.html&#34;&gt;Jenkins&lt;/a&gt;, &lt;a href=&#34;https://github.com/libis/plugin-Mailer/raw/095cc1154fd6d7beb3be4425329868ecfa2043d9/.travis.yml&#34;&gt;Travis&lt;/a&gt;, &lt;a href=&#34;https://github.com/antonbabenko/imagepush2/raw/db88b1c65a34250ba98e01d584d72421aedfaeac/.scrutinizer.yml&#34;&gt;Scrutiziner&lt;/a&gt; needs special configuration file. What if you want to analyze every bundle in your Symfony app? Will you create e.g. Jenkins project/task for each bundle?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I want to analyze selected directory without complex configuration and creating extra files/tasks&lt;/li&gt; &#xA; &lt;li&gt;I don&#39;t care about format of &lt;a href=&#34;https://github.com/EdgedesignCZ/phpqa/raw/master/tests/IgnoredPathsTest.php&#34;&gt;ignored directories&lt;/a&gt; in phploc, phpmd, ...&lt;/li&gt; &#xA; &lt;li&gt;I don&#39;t want to update all projects when QA tool is updated or if I&#39;ve found cool tool like &lt;a href=&#34;https://github.com/Halleck45/PhpMetrics&#34;&gt;PHPMetrics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;I don&#39;t want to analyze XML files → tool should be able to build &lt;a href=&#34;https://raw.githubusercontent.com/EdgedesignCZ/phpqa/master/#html-reports&#34;&gt;html reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;I want fast execution time → tools should run in parallel (&lt;a href=&#34;http://robo.li/tasks/Base/#parallelexec&#34;&gt;thanks Robo&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Available &lt;a href=&#34;https://github.com/ziadoz/awesome-php#code-analysis&#34;&gt;tools&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tool&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/sebastianbergmann/phploc&#34;&gt;phploc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Measure the size of a PHP project&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/sebastianbergmann/phpcpd&#34;&gt;phpcpd&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Copy/Paste Detector (CPD) for PHP code&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer&#34;&gt;phpcs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Detect violations of a coding standard&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pdepend/pdepend&#34;&gt;pdepend&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PHP adaptation of JDepend&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/phpmd/phpmd&#34;&gt;phpmd&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Scan PHP project for messy code&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Halleck45/PhpMetrics&#34;&gt;phpmetrics&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Static analysis tool for PHP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h5&gt;Suggested tools&lt;/h5&gt; &#xA;&lt;p&gt;Newly added tools aren&#39;t preinstalled. You have to install relevant composer packages if you want to use them.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tool&lt;/th&gt; &#xA;   &lt;th&gt;PHP&lt;/th&gt; &#xA;   &lt;th&gt;Supported since&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/enlightn/security-checker&#34;&gt;security-checker&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;gt;= 5.6&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1.24&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check composer.lock for known security issues&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://cs.sensiolabs.org/&#34;&gt;php-cs-fixer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/EdgedesignCZ/phpqa/pull/66#discussion_r115206573&#34;&gt;&lt;code&gt;&amp;gt;= 5.3&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1.12&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Automatically detect and fix PHP coding standards issues&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/phpunit/phpunit&#34;&gt;phpunit&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;gt;= 5.3&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1.13&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The PHP Unit Testing framework&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/phpstan/phpstan&#34;&gt;phpstan&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;gt;= 7.0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1.9&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Discover bugs in your code without running it&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/vimeo/psalm&#34;&gt;psalm&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;gt;= 5.6&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1.14&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A static analysis tool for finding errors in PHP applications&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/JakubOnderka/PHP-Parallel-Lint&#34;&gt;parallel-lint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;gt;= 5.4&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1.9&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check syntax of PHP files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/qossmic/deptrac&#34;&gt;deptrac&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;gt;= 7.2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1.25&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enforce rules for dependencies between software layers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MacFJA/phpqa-extensions&#34;&gt;MacFJA/phpqa-extensions&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;PHP Assumptions, Magic Number Detector, ...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;Tip&lt;/em&gt;: use &lt;a href=&#34;https://raw.githubusercontent.com/EdgedesignCZ/phpqa/master/bin/suggested-tools.sh&#34;&gt;&lt;code&gt;bin/suggested-tools.sh install&lt;/code&gt;&lt;/a&gt; for installing the tools.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h3&gt;Clone + composer&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# install phpqa&#xA;git clone https://github.com/EdgedesignCZ/phpqa.git &amp;amp;&amp;amp; cd phpqa &amp;amp;&amp;amp; composer install --no-dev&#xA;&#xA;# make phpqa globally accessible&#xA;## you can symlink binary&#xA;sudo ln -s /path-to-phpqa-repository/phpqa /usr/bin/phpqa&#xA;## or add this directory to your PATH in your ~/.bash_profile (or ~/.bashrc)&#xA;export PATH=~/path-to-phpqa-repository-from-pwd:$PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Composer&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# global installation&#xA;composer global require edgedesign/phpqa --update-no-dev&#xA;# Make sure you have ~/.composer/vendor/bin/ in your PATH.&#xA;&#xA;# local installation&#xA;composer require edgedesign/phpqa --dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of course you can add dependency to &lt;code&gt;require-dev&lt;/code&gt; section in your &lt;code&gt;composer.json&lt;/code&gt;. But I wouldn&#39;t recommend it. In my experience &lt;em&gt;one&lt;/em&gt; QA tool which analyzes &lt;em&gt;N&lt;/em&gt; projects is better than &lt;em&gt;N&lt;/em&gt; projects with &lt;em&gt;N&lt;/em&gt; analyzers. It&#39;s up to you how many repositories you want to update when new version is released.&lt;/p&gt; &#xA;&lt;h5&gt;Symfony3 components&lt;/h5&gt; &#xA;&lt;p&gt;Symfony3 is supported since &lt;a href=&#34;https://raw.githubusercontent.com/EdgedesignCZ/phpqa/master/CHANGELOG.md#v170&#34;&gt;version 1.7&lt;/a&gt;. Install at least version &lt;code&gt;~3.0&lt;/code&gt; of &lt;code&gt;sebastian/phpcpd&lt;/code&gt;, otherwise you&#39;ll get error &lt;a href=&#34;https://github.com/EdgedesignCZ/phpqa/issues/19&#34;&gt;&lt;code&gt;The helper &#34;progress&#34; is not defined.&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;require-dev&#34;: {&#xA;        &#34;edgedesign/phpqa&#34;: &#34;&amp;gt;=1.7&#34;,&#xA;        &#34;sebastian/phpcpd&#34;: &#34;~3.0&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Fake global installation in local project&lt;/h5&gt; &#xA;&lt;p&gt;Do you have problems with dependencies and you can&#39;t install phpqa globally? Install phpqa in &lt;a href=&#34;https://raw.githubusercontent.com/EdgedesignCZ/phpqa/master/#circleci---artifacts--global-installation&#34;&gt;subdirectory&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh&#xA;&#xA;if [ ! -f qa/phpqa ];&#xA;then&#xA;    echo &#34;installing phpqa&#34;&#xA;    (git clone https://github.com/EdgedesignCZ/phpqa.git ./qa  &amp;amp;&amp;amp; cd qa &amp;amp;&amp;amp; composer install --no-dev)&#xA;fi&#xA;&#xA;qa/phpqa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;Official docker image repository is &lt;a href=&#34;https://github.com/EdgedesignCZ/phpqa/pkgs/container/phpqa&#34;&gt;https://github.com/EdgedesignCZ/phpqa/pkgs/container/phpqa&lt;/a&gt;. Images can be used at &lt;a href=&#34;https://raw.githubusercontent.com/EdgedesignCZ/phpqa/master/#gitlabci---docker-installation--composer-cache--artifacts&#34;&gt;Gitlab CI&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -it ghcr.io/edgedesigncz/phpqa:v1.26.2-php7.2 phpqa tools&#xA;# using a tool without phpqa&#xA;docker run --rm -it ghcr.io/edgedesigncz/phpqa:v1.26.2-php7.2 phploc -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Image&lt;/th&gt; &#xA;   &lt;th&gt;PHP version&lt;/th&gt; &#xA;   &lt;th&gt;Composer version&lt;/th&gt; &#xA;   &lt;th&gt;Tools versions&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ghcr.io/edgedesigncz/phpqa:v1.26.2-php7.2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;7.2&lt;/td&gt; &#xA;   &lt;td&gt;1.8.0&lt;/td&gt; &#xA;   &lt;td&gt;Versions that supports symfony2 components from default composer.lock. Not &lt;a href=&#34;https://github.com/EdgedesignCZ/phpqa/issues/159#issuecomment-452794397&#34;&gt;latest versions&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ghcr.io/edgedesigncz/phpqa:v1.26.2-php8.1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;8.1&lt;/td&gt; &#xA;   &lt;td&gt;2.2.12&lt;/td&gt; &#xA;   &lt;td&gt;Generally, latest versions available at the moment. If you need different versions, then &lt;a href=&#34;https://github.com/EdgedesignCZ/phpqa/issues/210&#34;&gt;build custom docker image&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Beware that images as lean as possible. That can be a problem for running PHPUnit tests. In that case, you might need different PHP version, miss PHP extensions for database etc. You can &lt;a href=&#34;https://gitlab.com/costlocker/integrations/blob/213aab7/.ci/get-phpqa-binary#L40&#34;&gt;install phpqa&lt;/a&gt; in another &lt;a href=&#34;https://gitlab.com/costlocker/integrations/blob/213aab7/.ci/.gitlab-ci.yml#L28&#34;&gt;php image&lt;/a&gt; Or &lt;a href=&#34;https://github.com/EdgedesignCZ/phpqa/issues/168#issuecomment-489180974&#34;&gt;build custom docker image&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -it ghcr.io/edgedesigncz/phpqa:v1.26.2-php7.2 sh -c &#34;php --version &amp;amp;&amp;amp; composer --version &amp;amp;&amp;amp; composer outdated --direct --all &amp;amp;&amp;amp; phpqa tools&#34;&#xA;docker run --rm -it ghcr.io/edgedesigncz/phpqa:v1.26.2-php8.1 sh -c &#34;php --version &amp;amp;&amp;amp; composer --version &amp;amp;&amp;amp; composer outdated --direct --all &amp;amp;&amp;amp; phpqa tools&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are also available images &lt;a href=&#34;https://hub.docker.com/r/eko3alpha/docker-phpqa/&#34;&gt;eko3alpha/docker-phpqa&lt;/a&gt; and &lt;a href=&#34;https://hub.docker.com/r/sparkfabrik/docker-phpqa/&#34;&gt;sparkfabrik/docker-phpqa&lt;/a&gt;. &lt;code&gt;phpqa&lt;/code&gt; is used as &lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#entrypoint&#34;&gt;an entrypoint&lt;/a&gt; (&lt;em&gt;I haven&#39;t been able to use these images at Gitlab CI + &lt;a href=&#34;https://github.com/EdgedesignCZ/phpqa/issues/199#issuecomment-590258608&#34;&gt;Windows probably needs different environment variable&lt;/a&gt;&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -u $UID -v $PWD:/app eko3alpha/docker-phpqa --report --ignoredDirs vendor,build,migrations,test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Analyze&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpqa --help&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show help - available options, tools, default values, ...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpqa --analyzedDirs ./ --buildDir ./build&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Analyze current directory and save output to build directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpqa --analyzedDirs src,tests&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Analyze source and test directory (&lt;a href=&#34;https://raw.githubusercontent.com/EdgedesignCZ/phpqa/master/#project-with-multiple-directories-src-tests-&#34;&gt;phpmetrics analyzes only &lt;code&gt;src&lt;/code&gt;&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;del&gt;&lt;code&gt;phpqa --analyzedDir ./&lt;/code&gt;&lt;/del&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Deprecated in &lt;strong&gt;v1.8&lt;/strong&gt; in favor of &lt;code&gt;--analyzedDirs&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpqa --ignoredDirs build,vendor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Ignore directories&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpqa --ignoredFiles RoboFile.php&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Ignore files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpqa --tools phploc,phpcs&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Run only selected tools&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpqa --tools phpmd:1,phpcs:0,phpcpd:0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check number of errors and &lt;a href=&#34;https://raw.githubusercontent.com/EdgedesignCZ/phpqa/master/#exit-code&#34;&gt;exit code&lt;/a&gt;. &lt;strong&gt;New in v1.6&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpqa --verbose&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show output from executed tools&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpqa --quiet&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show no output at all&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpqa --output cli&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/EdgedesignCZ/phpqa/master/#output-modes&#34;&gt;CLI output&lt;/a&gt; instead of creating files in &lt;code&gt;--buildDir&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpqa --execution no-parallel&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Don&#39;t use parallelism if &lt;code&gt;--execution != parallel&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpqa --config ./my-config&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use &lt;a href=&#34;https://raw.githubusercontent.com/EdgedesignCZ/phpqa/master/#advanced-configuration---phpqayml&#34;&gt;custom configuration&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpqa --report&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Build &lt;a href=&#34;https://raw.githubusercontent.com/EdgedesignCZ/phpqa/master/#html-reports&#34;&gt;html reports&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpqa --report offline&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Build html reports with &lt;a href=&#34;https://github.com/EdgedesignCZ/phpqa/issues/95&#34;&gt;bundled assets&lt;/a&gt;. &lt;strong&gt;New in v1.16&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpqa tools&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show versions of available tools&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;Tip:&lt;/em&gt; CLI options can be defined in &lt;a href=&#34;https://raw.githubusercontent.com/EdgedesignCZ/phpqa/master/#advanced-configuration---phpqayml&#34;&gt;.phpqa.yml&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Output modes&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tool&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;--output file&lt;/code&gt; (default) - generated files&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;--output cli&lt;/code&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;phploc&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://edgedesigncz.github.io/phpqa/report/phploc.xml&#34;&gt;phploc.xml&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/sebastianbergmann/phploc#analyse-a-directory-and-print-the-result&#34;&gt;✓&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;phpcpd&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://edgedesigncz.github.io/phpqa/report/phpcpd.xml&#34;&gt;phpcpd.xml&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/sebastianbergmann/phpcpd#usage-example&#34;&gt;✓&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;phpcs&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://edgedesigncz.github.io/phpqa/report/checkstyle.xml&#34;&gt;checkstyle.xml&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer/wiki/Reporting#printing-full-and-summary-reports&#34;&gt;full report&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pdepend&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://edgedesigncz.github.io/phpqa/report/pdepend-jdepend.xml&#34;&gt;pdepend-jdepend.xml&lt;/a&gt;, &lt;a href=&#34;https://edgedesigncz.github.io/phpqa/report/pdepend-summary.xml&#34;&gt;pdepend-summary.xml&lt;/a&gt;, &lt;a href=&#34;https://edgedesigncz.github.io/phpqa/report/pdepend-dependencies.xml&#34;&gt;pdepend-dependencies.xml&lt;/a&gt;, &lt;a href=&#34;https://edgedesigncz.github.io/phpqa/report/pdepend-jdepend.svg&#34;&gt;pdepend-jdepend.svg&lt;/a&gt;, &lt;a href=&#34;https://edgedesigncz.github.io/phpqa/report/pdepend-pyramid.svg&#34;&gt;pdepend-pyramid.svg&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✗&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;phpmd&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://edgedesigncz.github.io/phpqa/report/phpmd.xml&#34;&gt;phpmd.xml&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/phpmd/phpmd/raw/master/src/main/php/PHPMD/Renderer/TextRenderer.php#L47&#34;&gt;✓&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;phpmetrics&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://edgedesigncz.github.io/phpqa/report/phpmetrics.html&#34;&gt;phpmetrics.html (v1)&lt;/a&gt;, &lt;a href=&#34;https://edgedesigncz.github.io/phpqa/report/phpmetrics/&#34;&gt;phpmetrics/index.html (v2)&lt;/a&gt;, &lt;a href=&#34;https://edgedesigncz.github.io/phpqa/report/phpmetrics.xml&#34;&gt;phpmetrics.xml&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/phpmetrics/PhpMetrics#usage&#34;&gt;✓&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;php-cs-fixer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://edgedesigncz.github.io/phpqa/report/php-cs-fixer.html&#34;&gt;php-cs-fixer.html&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://cs.sensiolabs.org/#usage&#34; title=&#34;txt output format&#34;&gt;✓&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;parallel-lint&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://edgedesigncz.github.io/phpqa/report/parallel-lint.html&#34;&gt;parallel-lint.html&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/JakubOnderka/PHP-Parallel-Lint#example-output&#34;&gt;✓&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;phpstan&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://edgedesigncz.github.io/phpqa/report/phpstan.html&#34;&gt;phpstan.html&lt;/a&gt;, &lt;a href=&#34;https://edgedesigncz.github.io/phpqa/report/phpstan-phpqa.neon&#34;&gt;phpstan-phpqa.neon&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://edgedesigncz.github.io/phpqa/report/phpstan.html&#34;&gt;✓&lt;/a&gt;, &lt;a href=&#34;https://edgedesigncz.github.io/phpqa/report/phpstan-phpqa.neon&#34; title=&#34;Generated configuration is saved in current working directory&#34;&gt;phpstan-phpqa.neon&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;psalm&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://edgedesigncz.github.io/phpqa/report/psalm.html&#34;&gt;psalm.html&lt;/a&gt;, &lt;a href=&#34;https://edgedesigncz.github.io/phpqa/report/psalm.xml&#34;&gt;psalm.xml&lt;/a&gt;, &lt;a href=&#34;https://edgedesigncz.github.io/phpqa/report/psalm-phpqa.xml&#34;&gt;psalm-phpqa.xml&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://edgedesigncz.github.io/phpqa/report/psalm.xml&#34;&gt;✓&lt;/a&gt;, &lt;a href=&#34;https://edgedesigncz.github.io/phpqa/report/psalm-phpqa.xml&#34; title=&#34;Generated configuration is saved in current working directory&#34;&gt;psalm-phpqa.xml&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;deptrac&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://edgedesigncz.github.io/phpqa/report/deptrac.html&#34;&gt;deptrac.html&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✗&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Exit code&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;phpqa&lt;/code&gt; can return non-zero exit code &lt;strong&gt;since version 1.6&lt;/strong&gt;. It&#39;s optional feature that is by default turned off. You have to define number of allowed errors for &lt;em&gt;phpcpd, phpcs, phpmd&lt;/em&gt; in &lt;code&gt;--tools&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://raw.githubusercontent.com/EdgedesignCZ/phpqa/master/#output-modes&#34;&gt;mode&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Supported version&lt;/th&gt; &#xA;   &lt;th&gt;What is analyzed?&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--output file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 1.6&lt;/td&gt; &#xA;   &lt;td&gt;Number of errors in XML files, or exit code for tools without XML&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--output cli&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 1.9&lt;/td&gt; &#xA;   &lt;td&gt;Exit code&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Let&#39;s say your &lt;a href=&#34;https://docs.travis-ci.com/user/customizing-the-build/#Customizing-the-Build-Step&#34;&gt;Travis CI&lt;/a&gt; or &lt;a href=&#34;https://circleci.com/docs/manually/#overview&#34;&gt;Circle CI&lt;/a&gt; build should fail when new error is introduced. Define number of allowed errors for each tools and watch the build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;phpqa --report --tools phpcs:0,phpmd:0,phpcpd:0,parallel-lint:0,phpstan:0,phpmetrics,phploc,pdepend&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Number of allowed errors can be also defined in &lt;a href=&#34;https://raw.githubusercontent.com/EdgedesignCZ/phpqa/master/#advanced-configuration---phpqayml&#34;&gt;.phpqa.yml&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;phpqa:&#xA;    # can be overriden by CLI: phpqa --tools phpcs:1&#xA;    tools:&#xA;        - phpcs:0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;File mode&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/7994022/17077767/e18bcb2a-50dc-11e6-86bc-0dfc8e22d98c.png&#34; alt=&#34;screenshot from 2016-07-23 13 53 34&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Tip&lt;/em&gt;: override &lt;a href=&#34;https://raw.githubusercontent.com/EdgedesignCZ/phpqa/master/#advanced-configuration---phpqayml&#34;&gt;&lt;code&gt;phpcs.ignoreWarnings&lt;/code&gt;&lt;/a&gt; if you want to count just errors without phpcs warnings.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;CLI mode&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/7994022/21391059/33730d76-c78a-11e6-913a-84b3c7836c28.png&#34; alt=&#34;screenshot from 2016-12-21 14 31 27&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Tip&lt;/em&gt;: use &lt;a href=&#34;https://gist.github.com/zdenekdrahos/5368eea304ed3fa6070bc77772779738&#34;&gt;&lt;code&gt;echo $?&lt;/code&gt;&lt;/a&gt; for displaying exit code.&lt;/p&gt; &#xA;&lt;h2&gt;Advanced configuration - &lt;code&gt;.phpqa.yml&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Provide &lt;a href=&#34;https://raw.githubusercontent.com/EdgedesignCZ/phpqa/master/#analyze&#34;&gt;CLI options&lt;/a&gt; from &lt;a href=&#34;https://raw.githubusercontent.com/EdgedesignCZ/phpqa/master/.phpqa.yml&#34;&gt;&lt;code&gt;.phpqa.yml&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;CLI option&lt;/th&gt; &#xA;   &lt;th&gt;.phpqa.yml&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpqa --analyzedDirs ./&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpqa.analyzedDirs: ./&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpqa --buildDir ./build &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpqa.buildDir: ./build&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpqa --ignoredDirs build,vendor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpqa.ignoredDirs: build,vendor&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpqa --ignoredFiles RoboFile.php&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpqa.ignoredFiles: RoboFile.php&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpqa --tools phploc,phpcs:0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpqa.tools: phploc,phpcs:0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpqa --report&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpqa.report: true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpqa --execution no-parallel&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpqa.execution: no-parallel&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpqa --output cli &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpqa.output: cli&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpqa --verbose&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpqa.verbose: true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Files&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;.phpqa.yml&lt;/code&gt; is automatically detected in current working directory, but you can specify directory via option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# use .phpqa.yml from defined directory&#xA;phpqa --config path-to-directory-with-config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You don&#39;t have to specify full configuration. Missing or empty values are replaced with default values from our &lt;a href=&#34;https://raw.githubusercontent.com/EdgedesignCZ/phpqa/master/.phpqa.yml&#34;&gt;&lt;code&gt;.phpqa.yml&lt;/code&gt;&lt;/a&gt;. Example of minimal config that defines only standard for CodeSniffer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;phpcs:&#xA;    standard: Zend&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Tip&lt;/em&gt;: use &lt;a href=&#34;http://edorian.github.io/php-coding-standard-generator/&#34;&gt;PHP Coding Standard Generator&lt;/a&gt; for generating phpcs/phpmd standards.&lt;/p&gt; &#xA;&lt;p&gt;You can specify multiple configurations directory (separated by &lt;code&gt;,&lt;/code&gt;). They are loaded in the order they are defined. This can be useful if you have a common configuration file that you want to use across multiple project but you still want to have per project configuration. Also, path inside configuration file are relative to where the configuration file is, so if you have a package that bundle a custom tool, the &lt;code&gt;.phpqa.yml&lt;/code&gt; in the package can refers files within it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;phpqa --config ~/phpqa/,my-config/,$(pwd)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom binary&lt;/h3&gt; &#xA;&lt;p&gt;Every tool can define custom binary. Use phar or global tool, if you have troubles with dependencies, e.g.:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;can&#39;t install something because of symfony components or php version&lt;/li&gt; &#xA; &lt;li&gt;phpstan does not work, if phpmetrics v1 is installed in composer &lt;em&gt;(&lt;code&gt;Hoa main file (Core.php) must be included once.&lt;/code&gt;)&lt;/em&gt; -&amp;gt; use phar for phpmetrics&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Generally, composer installation is preferred because of detecting version. Phar works too, but it might be tricky. If a tool has composer package with phar &lt;em&gt;(e.g. &lt;a href=&#34;https://packagist.org/packages/psalm/phar&#34;&gt;vimeo/phar&lt;/a&gt;)&lt;/em&gt;, use it instead of custom binary:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;psalm:&#xA;    binary: /usr/local/bin/psalm.phar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Possibilities are infinite. You can &lt;a href=&#34;https://github.com/EdgedesignCZ/phpqa/raw/master/.phpqa.yml#L120&#34;&gt;define new tool&lt;/a&gt; and run it. For example I like &lt;code&gt;exploring codebase&lt;/code&gt; in phpmetrics v1 and composer info in v2. Install phpmetrics v2 in composer and use phar for v1 to avoid phpstan conflicts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat tests/.ci/.phpqa.yml&#xA;phpmetricsV1:&#xA;    binary: /usr/local/bin/phpmetrics.phar&#xA;tool:&#xA;    phpmetricsV1: Edge\QA\Tools\Analyzer\PhpMetrics&#xA;&#xA;$ phpqa --config tests/.ci/ --tools phpmetricsV1,phpmetrics&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Override tools&#39; settings&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tool&lt;/th&gt; &#xA;   &lt;th&gt;Settings&lt;/th&gt; &#xA;   &lt;th&gt;Default Value&lt;/th&gt; &#xA;   &lt;th&gt;Your value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/EdgedesignCZ/phpqa/raw/master/.phpqa.yml#L49&#34;&gt;phpqa.extensions&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PHP File extensions&lt;/td&gt; &#xA;   &lt;td&gt;php&lt;/td&gt; &#xA;   &lt;td&gt;Name of php file to parse, you can specify it like a string &lt;code&gt;php,inc,modules&lt;/code&gt; or like a yaml array.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pear.php.net/manual/en/package.php.php-codesniffer.usage.php#package.php.php-codesniffer.usage.coding-standard&#34;&gt;phpcs.standard&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Coding standard&lt;/td&gt; &#xA;   &lt;td&gt;PSR2&lt;/td&gt; &#xA;   &lt;td&gt;Name of existing standard (&lt;code&gt;PEAR&lt;/code&gt;, &lt;code&gt;PHPCS&lt;/code&gt;, &lt;code&gt;PSR1&lt;/code&gt;, &lt;code&gt;PSR2&lt;/code&gt;, &lt;code&gt;Squiz&lt;/code&gt;, &lt;code&gt;Zend&lt;/code&gt;), or path to your coding standard. To specify &lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer/wiki/Usage#specifying-a-coding-standard&#34;&gt;multiple standards&lt;/a&gt;, you can use an array&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/EdgedesignCZ/phpqa/issues/53&#34;&gt;phpcs.ignoreWarnings&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If number of allowed errors is compared with warnings+errors, or just errors from &lt;code&gt;checkstyle.xml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Boolean value&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer/wiki/Reporting&#34;&gt;phpcs.reports&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Report types&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer/wiki/Reporting#printing-full-and-summary-reports&#34;&gt;&lt;code&gt;full&lt;/code&gt;&lt;/a&gt; report in &lt;a href=&#34;https://raw.githubusercontent.com/EdgedesignCZ/phpqa/master/#output-modes&#34;&gt;cli mode&lt;/a&gt;, &lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer/wiki/Reporting#printing-a-checkstyle-report&#34;&gt;&lt;code&gt;checkstyle&lt;/code&gt;&lt;/a&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/EdgedesignCZ/phpqa/master/#output-modes&#34;&gt;file mode&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Predefined &lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer/wiki/Reporting&#34;&gt;report types&lt;/a&gt; or &lt;a href=&#34;https://github.com/wikidi/codesniffer#examples&#34;&gt;custom reports&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://cs.sensiolabs.org/#usage&#34;&gt;php-cs-fixer.rules&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Coding standard rules&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;@PSR2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String value&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://cs.sensiolabs.org/#usage&#34;&gt;php-cs-fixer.allowRiskyRules&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Whether risky rules may run&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Boolean value&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://cs.sensiolabs.org/#usage&#34;&gt;php-cs-fixer.config&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Load configuration from &lt;a href=&#34;https://github.com/FriendsOfPHP/PHP-CS-Fixer/raw/master/.php_cs.dist&#34;&gt;file&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Path to &lt;code&gt;.phpcs&lt;/code&gt; file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://cs.sensiolabs.org/#usage&#34;&gt;php-cs-fixer.isDryRun&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If code is just analyzed or fixers are applied&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Boolean value&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/EdgedesignCZ/phpqa/issues/74&#34;&gt;phpmetrics.config&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Configuration for phpmetrics v1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Path to &lt;code&gt;.phpmetrics.yml&lt;/code&gt; file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/EdgedesignCZ/phpqa/pull/122&#34;&gt;phpmetrics.git&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;phpmetrics v2 analyses based on Git History&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Boolean value or path to git binary&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/EdgedesignCZ/phpqa/pull/125&#34;&gt;phpmetrics.junit&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;phpmetrics v2 evaluates metrics according to JUnit logs&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Path to JUnit xml&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/EdgedesignCZ/phpqa/pull/123&#34;&gt;phpmetrics.composer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;phpmetrics v2 analyzes composer dependencies&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Path to composer.json when the file is not included in &lt;code&gt;analyzedDirs&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/EdgedesignCZ/phpqa/pull/124&#34;&gt;pdepend.coverageReport&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Load Clover style CodeCoverage report&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Path to report produced by PHPUnit&#39;s &lt;code&gt;--coverage-clover&lt;/code&gt; option&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://phpmd.org/documentation/creating-a-ruleset.html&#34;&gt;phpmd.standard&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Ruleset&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/EdgedesignCZ/phpqa/master/app/phpmd.xml&#34;&gt;Edgedesign&#39;s standard&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Path to ruleset. To specify &lt;a href=&#34;https://phpmd.org/documentation/index.html#using-multiple-rule-sets&#34;&gt;multiple rule sets&lt;/a&gt;, you can use an array&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/EdgedesignCZ/phpqa/issues/230&#34;&gt;phpmd.ignoreParsingErrors&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If parsing errors affect exit code, or just violations&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Boolean value&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/sebastianbergmann/phpcpd/raw/de9056615da6c1230f3294384055fa7d722c38fa/src/CLI/Command.php#L136&#34;&gt;phpcpd&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Minimum number of lines/tokens for copy-paste detection&lt;/td&gt; &#xA;   &lt;td&gt;5 lines, 70 tokens&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/phpstan/phpstan#configuration&#34;&gt;phpstan&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Level, config file, memory limit&lt;/td&gt; &#xA;   &lt;td&gt;Level 0, &lt;code&gt;%currentWorkingDirectory%/phpstan.neon&lt;/code&gt;, memoryLimit: null&lt;/td&gt; &#xA;   &lt;td&gt;Take a look at &lt;a href=&#34;https://raw.githubusercontent.com/EdgedesignCZ/phpqa/master/tests/.ci/&#34;&gt;phpqa config in tests/.ci&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/EdgedesignCZ/phpqa/raw/4947416/.phpqa.yml#L40&#34;&gt;phpunit.binary&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Phpunit binary&lt;/td&gt; &#xA;   &lt;td&gt;phpqa&#39;s phpunit&lt;/td&gt; &#xA;   &lt;td&gt;Path to phpunit executable in your project, typically &lt;a href=&#34;https://gitlab.com/costlocker/integrations/blob/master/basecamp/backend/.phpqa.yml#L2&#34;&gt;&lt;code&gt;vendor/bin/phpunit&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://phpunit.de/manual/current/en/organizing-tests.html#organizing-tests.xml-configuration&#34;&gt;phpunit.config&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PHPUnit configuration, &lt;code&gt;analyzedDirs&lt;/code&gt; and &lt;code&gt;ignoredDirs&lt;/code&gt; are not used, you have to specify test suites in XML file&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Path to &lt;code&gt;phpunit.xml&lt;/code&gt; file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://phpunit.de/manual/current/en/textui.html&#34;&gt;phpunit.reports&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Report types&lt;/td&gt; &#xA;   &lt;td&gt;no report&lt;/td&gt; &#xA;   &lt;td&gt;List of reports and formats, corresponds with CLI option, e.g. &lt;code&gt;--log-junit&lt;/code&gt; is &lt;code&gt;log: [junit]&lt;/code&gt; in &lt;code&gt;.phpqa.yml&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/vimeo/psalm/wiki/Configuration&#34;&gt;psalm.config&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Psalm configuration, &lt;code&gt;analyzedDirs&lt;/code&gt; and &lt;code&gt;ignoredDirs&lt;/code&gt; are appended to &lt;code&gt;projectFiles&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/EdgedesignCZ/phpqa/master/app/psalm.xml&#34;&gt;Predefined config&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Path to &lt;code&gt;psalm.xml&lt;/code&gt; file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/vimeo/psalm/wiki/Running-Psalm#command-line-options&#34;&gt;psalm.deadCode&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable or not &lt;code&gt;--find-dead-code&lt;/code&gt; option of psalm&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Boolean value&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/vimeo/psalm/wiki/Running-Psalm#command-line-options&#34;&gt;psalm.threads&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set the number of process to use in parallel (option &lt;code&gt;--threads&lt;/code&gt; of psalm) (Only if &lt;code&gt;--execution == parallel&lt;/code&gt; for phpqa)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Number (&amp;gt;= 1)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/vimeo/psalm/wiki/Running-Psalm#command-line-options&#34;&gt;psalm.showInfo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display or not information (non-error) messages (option &lt;code&gt;--show-info=&lt;/code&gt; of psalm)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Boolean value&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/vimeo/psalm/issues/842&#34;&gt;psalm.memoryLimit&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Custom memory limit, ignore unless you are getting &lt;code&gt;Fatal error: Allowed memory size of ... bytes exhausted&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String value, e.g. &lt;code&gt;&#39;1024M&#39;&lt;/code&gt;, &lt;code&gt;&#39;1G&#39;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/vimeo/psalm/wiki/Configuration&#34;&gt;deptrac.depfile&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Complete &lt;a href=&#34;https://github.com/qossmic/deptrac#getting-started&#34;&gt;deptract config&lt;/a&gt; &lt;em&gt;(phpqa won&#39;t update source and excluded files)&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Path to &lt;code&gt;depfile.yml&lt;/code&gt; file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/EdgedesignCZ/phpqa/raw/bdd49e3/.phpqa.yml#L94&#34;&gt;security-checker.composerLock&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use it if composer.lock is not in current working directory or analyzed directory&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Path to &lt;code&gt;composer.lock&lt;/code&gt; file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;HTML reports&lt;/h2&gt; &#xA;&lt;p&gt;If you don&#39;t have Jenkins or other CI server, then you can use HTML reports. HTML files are built when you add option &lt;code&gt;--report&lt;/code&gt;. Take a look at &lt;a href=&#34;https://edgedesigncz.github.io/phpqa/report/phpqa.html&#34;&gt;report from phpqa&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# build html reports&#xA;phpqa --report&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom templates&lt;/h3&gt; &#xA;&lt;p&gt;Define custom templates if you don&#39;t like &lt;a href=&#34;https://raw.githubusercontent.com/EdgedesignCZ/phpqa/master/app/report&#34;&gt;default templates&lt;/a&gt;. You have to define path to &lt;code&gt;xsl&lt;/code&gt; files in your &lt;a href=&#34;https://raw.githubusercontent.com/EdgedesignCZ/phpqa/master/#advanced-configuration---phpqayml&#34;&gt;&lt;code&gt;.phpqa.yml&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# use different template for PHPMD, use default for other tools&#xA;report:&#xA;    phpmd: my-templates/phpmd.xsl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Be aware that all &lt;strong&gt;paths are relative to &lt;code&gt;.phpqa.yml&lt;/code&gt;&lt;/strong&gt;. Don&#39;t copy-paste section &lt;code&gt;report&lt;/code&gt; if you don&#39;t have custom templates!&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://php.net/manual/en/class.xsltprocessor.php&#34;&gt;&lt;code&gt;xsl&lt;/code&gt; extension&lt;/a&gt; must be installed and enabled for exporting HTML reports. Otherwise you&#39;ll get error &lt;code&gt;PHP Fatal error: Class &#39;XSLTProcessor&#39; not found&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# install xsl extension in Ubuntu&#xA;sudo apt-get update&#xA;sudo apt-get install php5-xsl&#xA;sudo service apache2 restart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Continuous integration&lt;/h2&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;http://jenkins-php.org/&#34;&gt;Jenkins-CI&lt;/a&gt; in Edgedesign. Below you can find examples of &lt;a href=&#34;https://www.phing.info/&#34;&gt;Phing&lt;/a&gt;, &lt;a href=&#34;http://robo.li/&#34;&gt;Robo&lt;/a&gt; and &lt;code&gt;bash&lt;/code&gt; tasks.&lt;/p&gt; &#xA;&lt;h3&gt;Project with one directory&lt;/h3&gt; &#xA;&lt;p&gt;Typically in Symfony project you have project with &lt;code&gt;src&lt;/code&gt; directory with all the code and tests. So you don&#39;t need ignore vendors, web directory etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Phing - &lt;code&gt;build.xml&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;target name=&#34;ci-phpqa&#34;&amp;gt;&#xA;    &amp;lt;exec executable=&#34;phpqa&#34; passthru=&#34;true&#34;&amp;gt;&#xA;        &amp;lt;arg value=&#34;--analyzedDirs=./src&#34; /&amp;gt;&#xA;        &amp;lt;arg value=&#34;--buildDir=./build/logs&#34; /&amp;gt;&#xA;        &amp;lt;arg value=&#34;--report&#34; /&amp;gt;&#xA;    &amp;lt;/exec&amp;gt;&#xA;&amp;lt;/target&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Robo - &lt;code&gt;RoboFile.php&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function ciPhpqa()&#xA;{&#xA;    $this-&amp;gt;taskExec(&#39;phpqa&#39;)&#xA;        -&amp;gt;option(&#39;analyzedDirs&#39;, &#39;./src&#39;)&#xA;        -&amp;gt;option(&#39;buildDir&#39;, &#39;./build/logs&#39;)&#xA;        -&amp;gt;option(&#39;report&#39;)&#xA;        -&amp;gt;run();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Project with multiple directories (src, tests, ...)&lt;/h3&gt; &#xA;&lt;p&gt;When you analyze root directory of your project don&#39;t forget to ignore vendors and other non-code directories. Otherwise the analysis could take a very long time.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Since version &lt;a href=&#34;https://raw.githubusercontent.com/EdgedesignCZ/phpqa/master/CHANGELOG.md#v180&#34;&gt;1.8&lt;/a&gt; phpqa supports analyzing multiple directories.&lt;/strong&gt; Except phpmetrics that analyzes only first directory. Analyze root directory and ignore other directories if you rely on phpmetrics report.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Phing - &lt;code&gt;build.xml&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;target name=&#34;ci-phpqa&#34;&amp;gt;&#xA;    &amp;lt;exec executable=&#34;phpqa&#34; passthru=&#34;true&#34;&amp;gt;&#xA;        &amp;lt;arg value=&#34;--analyzedDirs=./&#34; /&amp;gt;&#xA;        &amp;lt;arg value=&#34;--buildDir=./build/logs&#34; /&amp;gt;&#xA;        &amp;lt;arg value=&#34;--ignoredDirs=app,bin,build,vendor,web&#34; /&amp;gt;&#xA;        &amp;lt;arg value=&#34;--ignoredFiles= &#34; /&amp;gt;&#xA;        &amp;lt;arg value=&#34;--verbose&#34; /&amp;gt;&#xA;        &amp;lt;arg value=&#34;--report&#34; /&amp;gt;&#xA;    &amp;lt;/exec&amp;gt;&#xA;&amp;lt;/target&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Robo - &lt;code&gt;RoboFile.php&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function ciPhpqa()&#xA;{&#xA;    $this-&amp;gt;taskExec(&#39;phpqa&#39;)&#xA;        -&amp;gt;option(&#39;verbose&#39;)&#xA;        -&amp;gt;option(&#39;report&#39;)&#xA;        -&amp;gt;option(&#39;analyzedDirs&#39;, &#39;./&#39;)&#xA;        -&amp;gt;option(&#39;buildDir&#39;, &#39;./build&#39;)&#xA;        -&amp;gt;option(&#39;ignoredDirs&#39;, &#39;build,bin,vendor&#39;)&#xA;        -&amp;gt;option(&#39;ignoredFiles&#39;, &#39;RoboFile.php,error-handling.php&#39;)&#xA;        -&amp;gt;run();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bash&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;phpqa --verbose --report --analyzedDirs ./ --buildDir ./var/CI --ignoredDirs=bin,log,temp,var,vendor,www&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Circle.ci - artifacts + global installation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;machine:&#xA;    php:&#xA;        version: 7.0.4&#xA;&#xA;dependencies:&#xA;    cache_directories:&#xA;        - ~/.composer/cache&#xA;    post:&#xA;        - &#39;git clone https://github.com/EdgedesignCZ/phpqa.git ./qa &amp;amp;&amp;amp; cd qa &amp;amp;&amp;amp; composer install --no-dev&#39;&#xA;&#xA;test:&#xA;    override:&#xA;        - vendor/bin/phpunit --testdox-html ./var/tests/testdox.html --testdox-text ./var/tests/testdox.txt --log-junit $CIRCLE_TEST_REPORTS/phpunit/junit.xml&#xA;        - qa/phpqa --report --verbose --buildDir var/QA --ignoredDirs vendor --tools=phpcs:0,phpmd:0,phpcpd:0,phploc,pdepend,phpmetrics&#xA;    post:&#xA;        - cp -r ./var/QA $CIRCLE_ARTIFACTS&#xA;        - cp -r ./var/tests $CIRCLE_ARTIFACTS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Gitlab.ci - docker installation + composer cache + artifacts&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;stages:&#xA;  - test&#xA;&#xA;test:&#xA;  stage: test&#xA;  image: ghcr.io/edgedesigncz/phpqa:v1.26.2-php7.2&#xA;  variables:&#xA;    BACKEND_QA: &#34;*/backend/var/QA&#34;&#xA;    BACKEND_CACHE: $CI_PROJECT_DIR/.composercache&#xA;  cache:&#xA;    paths:&#xA;    - $BACKEND_CACHE&#xA;  script:&#xA;    - &#39;export COMPOSER_CACHE_DIR=$BACKEND_CACHE&#39;&#xA;    - &#39;composer install --ignore-platform-reqs --no-progress --no-suggest&#39;&#xA;    - &#39;phpqa --report --tools phpcs:0,phpunit:0 --buildDir var/QA --analyzedDirs ./ --ignoredDirs var,vendor&#39;&#xA;  artifacts:&#xA;    when: always&#xA;    paths:&#xA;    - $BACKEND_QA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Github actions - docker installation + composer cache + artifacts&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: QA&#xA;&#xA;on: [push]&#xA;&#xA;jobs:&#xA;  qa:&#xA;    container: ghcr.io/edgedesigncz/phpqa:v1.26.2-php8.1&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - uses: actions/checkout@v2&#xA;      &#xA;      # composer is not necessary, if you are not running phpunit/psalm/phpstan&#xA;      - name: Cache composer&#xA;        uses: actions/cache@v2&#xA;        with:&#xA;          path: |&#xA;            ~/.composer/cache&#xA;            vendor&#xA;          key: php-composer-${{ hashFiles(&#39;**/composer.lock&#39;) }}&#xA;          restore-keys: &#34;php-composer-74&#34;&#xA;      - name: Install dependencies&#xA;        run: |&#xA;          composer install --no-interaction --no-progress --ignore-platform-reqs;&#xA;&#xA;      - name: phpqa&#xA;        run: phpqa --report --tools phpunit:0,phpcs:0,phpmd:0,psalm:0,phpstan:0 --buildDir build --analyzedDirs ./ --ignoredDirs build,vendor&#xA;&#xA;      - name: Upload QA files&#xA;        uses: actions/upload-artifact@v2&#xA;        with:&#xA;          name: phpqa&#xA;          path: build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions from others would be very much appreciated! Send &lt;a href=&#34;https://github.com/EdgedesignCZ/phpqa/pulls&#34;&gt;pull request&lt;/a&gt;/&lt;a href=&#34;https://github.com/EdgedesignCZ/phpqa/issues&#34;&gt;issue&lt;/a&gt;. Thanks!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2015 - present Edgedesign.cz. MIT Licensed, see &lt;a href=&#34;https://raw.githubusercontent.com/EdgedesignCZ/phpqa/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoftgraph/msgraph-metadata</title>
    <updated>2023-08-27T02:08:43Z</updated>
    <id>tag:github.com,2023-08-27:/microsoftgraph/msgraph-metadata</id>
    <link href="https://github.com/microsoftgraph/msgraph-metadata" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Microsoft Graph metadata captured and used for generating client library code files.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Graph metadata used for generating client code files&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains scripts used to capture metadata from the Microsoft Graph service and the captured metadata. We use this metadata to generate code files for .Net, Java, TypeScript, PHP, and other languages.&lt;/p&gt;</summary>
  </entry>
</feed>