<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub XSLT Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-16T01:48:53Z</updated>
  <subtitle>Weekly Trending of XSLT in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>provbz/fatturapa-xsl-southtyrol</title>
    <updated>2022-10-16T01:48:53Z</updated>
    <id>tag:github.com,2022-10-16:/provbz/fatturapa-xsl-southtyrol</id>
    <link href="https://github.com/provbz/fatturapa-xsl-southtyrol" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repository contains a new XSL Stylesheet for the Italian e-invoice (http://fatturapa.gov.it). It is specifically meant to be used in South Tyrol since it generates a bilingual (German + Italian) rendering of a given XML invoice with an enhanced layout with respect to the original stylesheet (http://www.fatturapa.gov.it/export/fatturazione/sâ€¦&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;XSL for FatturaPA in South-Tyrol&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains a new XSL Stylesheet for the Italian e-invoice (&lt;a href=&#34;http://fatturapa.gov.it&#34;&gt;http://fatturapa.gov.it&lt;/a&gt;). It is specifically meant to be used in South Tyrol since it generates a bilingual (German + Italian) rendering of a given XML invoice with an enhanced layout with respect to the original stylesheet (&lt;a href=&#34;https://www.fatturapa.gov.it/export/documenti/fatturapa/v1.2.1/Foglio_di_stile_fatturaPA_v1.2.1.xsl&#34;&gt;https://www.fatturapa.gov.it/export/documenti/fatturapa/v1.2.1/Foglio_di_stile_fatturaPA_v1.2.1.xsl&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Copying&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;fatturapa_v1.2.1_de-it.xsl&lt;/code&gt; - Copyright (C) 2017 Ferdinand Tavernini&lt;/p&gt; &#xA;&lt;p&gt;The XSL-stylesheet &lt;code&gt;fatturapa_v1.2.1_de-it.xsl&lt;/code&gt; is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or any later version.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;fatturapa_v1.2.1_de-it.xsl&lt;/code&gt; is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program (see &lt;a href=&#34;https://github.com/paolodongilli/fatturapa-xsl-southtyrol/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file). If not, see &lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ferdinand Tavernini&lt;/li&gt; &#xA; &lt;li&gt;Paolo Dongilli&lt;/li&gt; &#xA; &lt;li&gt;Stefan Hellweger&lt;/li&gt; &#xA; &lt;li&gt;... you can contribute and add YOUR-NAME&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>mzeo/xslt-brainfuck</title>
    <updated>2022-10-16T01:48:53Z</updated>
    <id>tag:github.com,2022-10-16:/mzeo/xslt-brainfuck</id>
    <link href="https://github.com/mzeo/xslt-brainfuck" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Brainfuck interpreter in xslt.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;xslt-brainfuck&lt;/h1&gt; &#xA;&lt;p&gt;Brainfuck interpreter in xslt.&lt;/p&gt; &#xA;&lt;p&gt;Some one said it would be stupid, so I couldn&#39;t resist. It allows you to embed brainfuck code in xhtml. It uses XSLT to evaluate the brainfuck code.&lt;/p&gt; &#xA;&lt;p&gt;This implementation uses 8bit two&#39;s complement memory. The amount of memory have been set to fixed 128bytes (Hey, it was enough for Atari VCS). It would be simple increase it, but it would be nice to have something dynamic.&lt;/p&gt; &#xA;&lt;p&gt;EOF is default marked as &#34;no change&#34;. It can be configured to something else.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;p class=&#34;code&#34;&amp;gt;&#xA;&#x9;&amp;lt;!-- This will get replaces with the output of the program --&amp;gt;&#xA;&#x9;&amp;lt;bf:brainfuck xmlns:bf=&#34;https://github.com/mzeo/xslt-brainfuck&#34;&amp;gt;&#xA;&#x9;&#x9;&amp;lt;!-- Optional input --&amp;gt;&#xA;&#x9;&#x9;&amp;lt;bf:input&amp;gt;Hello world&amp;lt;/bf:input&amp;gt;&#xA;&#x9;&#x9;&amp;lt;!-- Optional EOF marker. Without it will be &#34;no change&#34; --&amp;gt;&#xA;&#x9;&#x9;&amp;lt;bf:eof&amp;gt;0&amp;lt;/bf:eof&amp;gt;&#xA;&#x9;&#x9;&amp;lt;!-- Required program to run --&amp;gt;&#xA;&#x9;&#x9;&amp;lt;bf:main&amp;gt;&#xA;&#x9;&#x9;&#x9;,[.,]&#xA;&#x9;&#x9;&amp;lt;/bf:main&amp;gt;&#xA;&#x9;&amp;lt;/bf:brainfuck&amp;gt;&#xA;&amp;lt;/p&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Implementation&lt;/h2&gt; &#xA;&lt;p&gt;It was mostly straight forward to implement. The real trick was how to get around the recursion limits in XSLT.&lt;/p&gt; &#xA;&lt;p&gt;It gets around recursion limits by using &lt;em&gt;fibonacci recursion&lt;/em&gt; (fib-step). &lt;em&gt;Fibonacci recursion&lt;/em&gt; was invented here. There is no reason for the recursion pattern to resemble recursive fibonnaci code. It only needs to something exponential, but I though it was fun.&lt;/p&gt; &#xA;&lt;p&gt;What it does is that it recures in a &#34;tree&#34; type of recursion by sending the complete state around. The &#34;tree&#34; is recursed a bit deeper each fib-step. In fib-step one and two it will take one actual step. In fib-step three it will take two steps, and then three, and then five, and then eight, ...&lt;/p&gt; &#xA;&lt;p&gt;For a proper explanation please look at the code. I&#39;ve already spent too much time on this already.&lt;/p&gt; &#xA;&lt;h2&gt;Typos&lt;/h2&gt; &#xA;&lt;p&gt;There is probably lots of them. I was tired writing this.&lt;/p&gt;</summary>
  </entry>
</feed>