<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub XSLT Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-25T01:44:39Z</updated>
  <subtitle>Daily Trending of XSLT in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>asterisk/documentation</title>
    <updated>2023-10-25T01:44:39Z</updated>
    <id>tag:github.com,2023-10-25:/asterisk/documentation</id>
    <link href="https://github.com/asterisk/documentation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Asterisk Documentation Project.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Description&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the Asterisk Documentation project.&lt;/p&gt; &#xA;&lt;h1&gt;Static Documentation&lt;/h1&gt; &#xA;&lt;p&gt;The static documentation contained in the ./docs/ directory is written directly in markdown. The publish process uses &lt;a href=&#34;https://www.mkdocs.org&#34;&gt;mkdocs&lt;/a&gt; and &lt;a href=&#34;https://squidfunk.github.io/mkdocs-material/&#34;&gt;Material for MkDocs&lt;/a&gt; to generate the HTML web site. The directory structure is fairly straightforward so if you wish to contribute, you should fork this repository and submit pull requests against files in that directory.&lt;/p&gt; &#xA;&lt;p&gt;All contributions are subject to the &lt;a href=&#34;https://raw.githubusercontent.com/asterisk/documentation/main/LICENSE.md&#34;&gt;Creative Commons Attribution-ShareAlike 3.0 United States&lt;/a&gt; license.&lt;/p&gt; &#xA;&lt;h1&gt;Markdown Flavor&lt;/h1&gt; &#xA;&lt;p&gt;The docs are written in standard markdown, not GitHub Flavored markdown. There are lots of extensions available though. Most of the extensions provided by &lt;a href=&#34;https://squidfunk.github.io/mkdocs-material/reference/&#34;&gt;Material for MkDocs&lt;/a&gt; are enabled except those only available to paying sponsors and a few that don&#39;t make sense in this environment.&lt;/p&gt; &#xA;&lt;p&gt;!!! note The conversion process that moved the documentation from the Confluence Wiki used equals signs &lt;code&gt;=====&lt;/code&gt; and dashes &lt;code&gt;----&lt;/code&gt; to denote headers. The new infrastructure renders those correctly but they do not get added to the page&#39;s table of contents. Going forward, you should always use hash signs &lt;code&gt;#&lt;/code&gt;, &lt;code&gt;##&lt;/code&gt;, &lt;code&gt;###&lt;/code&gt;, etc to denote headers.&lt;/p&gt; &#xA;&lt;h1&gt;Dynamic Documentation&lt;/h1&gt; &#xA;&lt;p&gt;The dynamic documentation includes the pages generated from Asterisk itself and includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AGI_Commands&lt;/li&gt; &#xA; &lt;li&gt;AMI_Actions&lt;/li&gt; &#xA; &lt;li&gt;AMI_Events&lt;/li&gt; &#xA; &lt;li&gt;Asterisk_REST_Interface&lt;/li&gt; &#xA; &lt;li&gt;Dialplan_Applications&lt;/li&gt; &#xA; &lt;li&gt;Dialplan_Functions&lt;/li&gt; &#xA; &lt;li&gt;Module_Configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The publish process gets this information directly from the Asterisk CreateDocs job (which runs nightly) and generates markdown. For this reason, all changes to the dynamic documentation need to be made in the Asterisk source code itself.&lt;/p&gt; &#xA;&lt;p&gt;The AGI, AMI, Dialplan and Module documentation comes from the documentation embedded in the provider modules and generated by CreateDocs running &lt;code&gt;xmldoc dump&lt;/code&gt; from the Asterisk CLI. You can also use a core-en_US.xml or full-en_US.xml file generated from a local asterisk build. See below for more information.&lt;/p&gt; &#xA;&lt;p&gt;The Asterisk_REST_Interface documentation comes from the markdown files generated by CreateDocs running &lt;code&gt;make ari-stubs&lt;/code&gt;. You can also use locally generated markdown files. See below for more information.&lt;/p&gt; &#xA;&lt;h1&gt;Build/Test Dependencies&lt;/h1&gt; &#xA;&lt;p&gt;Dependencies for documentation can be installed using the included requirements.txt file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pip3 install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t want to install the requirements for the current user or globally, you can create a virtual environment specific to this directory first...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ python -m venv ./.venv&#xA;$ source .venv/bin/activate&#xA;(.venv)$ pip3 install -r requirements.txt&#xA;# run `deactivate` when done&#xA;(.venv)$ deactivate&#xA;$ &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The next time you want to test, you can just activate the virtual environment without needing to install the dependencies again. The &lt;code&gt;.venv&lt;/code&gt; directory is already in the &lt;code&gt;.gitignore&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll also need the &lt;a href=&#34;https://cli.github.com&#34;&gt;&lt;code&gt;gh&lt;/code&gt;&lt;/a&gt; tool to pull down the dynamic documentaiton from the CreateDocs job.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The documentation build process no longer uses the &lt;code&gt;mike&lt;/code&gt; python package.&lt;/p&gt; &#xA;&lt;h1&gt;Building and Testing the Documentation&lt;/h1&gt; &#xA;&lt;h2&gt;Prepare&lt;/h2&gt; &#xA;&lt;p&gt;Everything is done from the &lt;a href=&#34;https://github.com/asterisk/documentation&#34;&gt;&lt;code&gt;documentation&lt;/code&gt;&lt;/a&gt; repository so, if you haven&#39;t already, clone it and check out the &lt;code&gt;main&lt;/code&gt; branch.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone -b main https://github.com/asterisk/documentation&#xA;$ cd documentation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;Makefile.inc&lt;/code&gt; file with some configuration variables. This file must NOT be checked in. Here are the contents to use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# BUILD_DIR := &amp;lt;somepath&amp;gt;  # Defaults to ./temp&#xA;&#xA;# The following 2 DEPLOY_ variables are only needed if you&#xA;# need to deploy the built site to some other repo.&#xA;# The nightly job uses this to publish the site to&#xA;# GitHub pages.&#xA;# DEPLOY_REMOTE := &amp;lt;git_remote&amp;gt;&#xA;# DEPLOY_BRANCH := &amp;lt;gh pages branch&amp;gt;  # Defaults to gh-pages&#xA;&#xA;# The comma-separated list of branches for which dynamic&#xA;# documentation should be built when doing a `make` without&#xA;# specifying BRANCH=&amp;lt;branch&amp;gt;.&#xA;BRANCHES := 16,18,19,20&#xA;&#xA;# If you don&#39;t want to build the static documentation at all...&#xA;# NO_STATIC=yes&#xA;&#xA;# If you don&#39;t want the resulting HTML minified, set NO_MINIFY.&#xA;# Minification can reduce the space required to host the full&#xA;# site by about 30% but it does take over double the time to&#xA;# generate the site.&#xA;# NO_MINIFY=yes&#xA;&#xA;# If you want to serve the resulting site with mkdocs serve,&#xA;# you can specify any additional options to pass to it here:&#xA;# SERVE_OPTS := -a [::]:8000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re planning on using local sources for the dynamic Asterisk documentation, you&#39;ll &lt;em&gt;also&lt;/em&gt; need to create a &lt;code&gt;Makefile.&amp;lt;branch&amp;gt;.inc&lt;/code&gt; file &lt;em&gt;for each branch&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# If you want to use a local XML file to generate the&#xA;# AGI, AMI, Dialplan and Module_Configuration documentation,&#xA;# specify it here.&#xA;# ASTERISK_XML_FILE := &amp;lt;somepath&amp;gt;/asterisk/doc/core-en_US.xml&#xA;#&#xA;# If you want to use local markdown files for the ARI&#xA;# documentation, specify a path to a directory containing&#xA;# the markdown generated by &#34;make ari-stubs&#34;.&#xA;# ASTERISK_ARI_DIR := &amp;lt;somepath&amp;gt;/asterisk/doc/rest-api&#xA;#&#xA;# If you want to use local XML but skip processing ARI&#xA;# altogether, set this variable to &#34;yes&#34;.&#xA;# SKIP_ARI := yes&#xA;&#xA;# If either ASTERISK_XML_FILE or ASTERISK_ARI_DIR are not set,&#xA;# that documentation source will be downloaded from the&#xA;# CreateDocs job.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build and Deploy&lt;/h2&gt; &#xA;&lt;h3&gt;To build the entire site:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build the static pages and the dynamic pages for all branches listed in the &lt;code&gt;BRANCHES&lt;/code&gt; variable. The fully functioning site will be created at &lt;code&gt;$(BUILD_DIR)/site&lt;/code&gt;. You can serve that directory with &lt;code&gt;make serve&lt;/code&gt;, which runs &lt;code&gt;mkdocs serve&lt;/code&gt; or a web server of your own choosing. &lt;code&gt;mkdocs serve&lt;/code&gt; rebuilds the entire site when it starts so you may want to use a standard web server if you plan on doing this a lot. If you do use &lt;code&gt;make serve&lt;/code&gt;, you cna use the &lt;code&gt;SERVE_OPTS&lt;/code&gt; variable in Makefile.inc to add additional options to the &lt;code&gt;mkdocs serve&lt;/code&gt; command line.&lt;/p&gt; &#xA;&lt;h3&gt;To build just the static pages&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make BRANCHES=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;To build just 2 branches&lt;/h3&gt; &#xA;&lt;p&gt;Building branches does need at least a skeleton static layout so &lt;code&gt;static-setup&lt;/code&gt; will be built first if it hasn&#39;t already been built.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make BRANCHES=18,20 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you only want the skeketon static documentation, you can add &lt;code&gt;NO_STATIC=yes&lt;/code&gt; to that command line...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make BRANCHES=18,20 NO_STATIC=yes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;To build just 1 branch&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re always going to build just 1 branch&#39;s dynamic documentation, you can skip the &lt;code&gt;Makefile.&amp;lt;branch&amp;gt;.inc&lt;/code&gt; file and just place everything in the main &lt;code&gt;Makefile.inc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;Makefile.inc:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ASTERISK_XML_FILE := &amp;lt;path&amp;gt;/core-en_US.xml&#xA;ASTERISK_ARI_DIR := &amp;lt;path&amp;gt;/rest-api&#xA;BRANCHES := 20&#xA;NO_STATIC := yes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And just run &lt;code&gt;make&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kingsdigitallab/sdo</title>
    <updated>2023-10-25T01:44:39Z</updated>
    <id>tag:github.com,2023-10-25:/kingsdigitallab/sdo</id>
    <link href="https://github.com/kingsdigitallab/sdo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Schenker Documents Online&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;sdo&lt;/h1&gt; &#xA;&lt;p&gt;Schenker Documents Online&lt;/p&gt;</summary>
  </entry>
</feed>