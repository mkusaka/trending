<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub XSLT Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-30T01:59:20Z</updated>
  <subtitle>Daily Trending of XSLT in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>xproc/3.0-test-suite</title>
    <updated>2022-06-30T01:59:20Z</updated>
    <id>tag:github.com,2022-06-30:/xproc/3.0-test-suite</id>
    <link href="https://github.com/xproc/3.0-test-suite" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The 3.0 test suite.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;XProc 3.0 test-suite&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://xproc.github.io/3.0-test-suite/&#34;&gt;XProc 3.0 Test Suite&lt;/a&gt; provides the conformance tests for &lt;a href=&#34;https://github.com/xproc/3.0-specification&#34;&gt;XProc 3.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;If you just want to write a test, start with this template from &lt;a href=&#34;https://raw.githubusercontent.com/xproc/3.0-test-suite/master/blob/master/examples/passing.xml&#34;&gt;examples/passing.xml&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;t:test xmlns:t=&#34;http://xproc.org/ns/testsuite/3.0&#34; expected=&#34;pass&#34;&amp;gt;&#xA;&#xA;&amp;lt;t:info&amp;gt;&#xA;  &amp;lt;t:title&amp;gt;YOUR TITLE HERE&amp;lt;/t:title&amp;gt;&#xA;  &amp;lt;t:revision-history&amp;gt;&#xA;    &amp;lt;t:revision&amp;gt;&#xA;      &amp;lt;t:date&amp;gt;TODAY’S DATE HERE&amp;lt;/t:date&amp;gt;&#xA;      &amp;lt;t:author&amp;gt;&#xA;        &amp;lt;t:name&amp;gt;YOUR NAME&amp;lt;/t:name&amp;gt;&#xA;      &amp;lt;/t:author&amp;gt;&#xA;      &amp;lt;t:description xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&amp;gt;&#xA;        &amp;lt;p&amp;gt;DESCRIBE THIS REVISION.&amp;lt;/p&amp;gt;&#xA;      &amp;lt;/t:description&amp;gt;&#xA;    &amp;lt;/t:revision&amp;gt;&#xA;  &amp;lt;/t:revision-history&amp;gt;&#xA;&amp;lt;/t:info&amp;gt;&#xA;&#xA;&amp;lt;t:description xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&amp;gt;&#xA;  &amp;lt;p&amp;gt;DESCRIBE YOUR TEST HERE.&amp;lt;/p&amp;gt;&#xA;&amp;lt;/t:description&amp;gt;&#xA;&#xA;&amp;lt;t:pipeline&amp;gt;&#xA;  &amp;lt;!-- YOUR PIPELINE GOES HERE --&amp;gt;&#xA;  &amp;lt;p:declare-step xmlns:p=&#34;http://www.w3.org/ns/xproc&#34; version=&#34;3.0&#34;&amp;gt;&#xA;    &amp;lt;p:output port=&#34;result&#34;/&amp;gt;&#xA;    &amp;lt;p:identity&amp;gt;&#xA;      &amp;lt;p:with-input&amp;gt;&#xA;        &amp;lt;doc/&amp;gt;&#xA;      &amp;lt;/p:with-input&amp;gt;&#xA;    &amp;lt;/p:identity&amp;gt;&#xA;  &amp;lt;/p:declare-step&amp;gt;&#xA;&amp;lt;/t:pipeline&amp;gt;&#xA;&#xA;&amp;lt;t:schematron&amp;gt;&#xA;  &amp;lt;!-- PROVIDE AT LEAST ONE SCHEMATRON TEST FOR VALIDITY --&amp;gt;&#xA;  &amp;lt;s:schema xmlns:s=&#34;http://purl.oclc.org/dsdl/schematron&#34;&#xA;            xmlns:p=&#34;http://www.w3.org/ns/xproc&#34;&#xA;            xmlns:rng=&#34;http://relaxng.org/ns/structure/1.0&#34;&amp;gt;&#xA;     &amp;lt;s:ns prefix=&#34;p&#34; uri=&#34;http://www.w3.org/ns/xproc&#34;/&amp;gt;&#xA;&#xA;     &amp;lt;s:pattern&amp;gt;&#xA;       &amp;lt;s:rule context=&#34;/*&#34;&amp;gt;&#xA;         &amp;lt;s:assert test=&#34;self::doc&#34;&amp;gt;The pipeline root is not doc.&amp;lt;/s:assert&amp;gt;&#xA;       &amp;lt;/s:rule&amp;gt;&#xA;     &amp;lt;/s:pattern&amp;gt;&#xA;  &amp;lt;/s:schema&amp;gt;&#xA;&amp;lt;/t:schematron&amp;gt;&#xA;&amp;lt;/t:test&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All test pipelines must produce a single result document on the &lt;code&gt;result&lt;/code&gt; port. (This limitation may complicate some tests, but it reduces the complexity of the test harness greatly.)&lt;/p&gt; &#xA;&lt;p&gt;You’ll find a slightly longer example demonstrating a few more features in from &lt;a href=&#34;https://raw.githubusercontent.com/xproc/3.0-test-suite/master/examples/passing2.xml&#34;&gt;examples/passing2.xml&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To write a test that’s expected to fail, use this template from &lt;a href=&#34;https://raw.githubusercontent.com/xproc/3.0-test-suite/master/examples/fail.xml%5D&#34;&gt;examples/fail.xml&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;t:test xmlns:t=&#34;http://xproc.org/ns/testsuite/3.0&#34;&#xA;        xmlns:err=&#34;http://www.w3.org/ns/xproc-error&#34;&#xA;        expected=&#34;fail&#34; code=&#34;err:XD0007&#34;&amp;gt;&#xA;&#xA;&amp;lt;t:info&amp;gt;&#xA;  &amp;lt;t:title&amp;gt;YOUR TITLE HERE&amp;lt;/t:title&amp;gt;&#xA;  &amp;lt;t:revision-history&amp;gt;&#xA;    &amp;lt;t:revision&amp;gt;&#xA;      &amp;lt;t:date&amp;gt;TODAY’S DATE HERE&amp;lt;/t:date&amp;gt;&#xA;      &amp;lt;t:author&amp;gt;&#xA;        &amp;lt;t:name&amp;gt;YOUR NAME&amp;lt;/t:name&amp;gt;&#xA;      &amp;lt;/t:author&amp;gt;&#xA;      &amp;lt;t:description xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&amp;gt;&#xA;        &amp;lt;p&amp;gt;DESCRIBE THIS REVISION.&amp;lt;/p&amp;gt;&#xA;      &amp;lt;/t:description&amp;gt;&#xA;    &amp;lt;/t:revision&amp;gt;&#xA;  &amp;lt;/t:revision-history&amp;gt;&#xA;&amp;lt;/t:info&amp;gt;&#xA;&#xA;&amp;lt;t:description xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&amp;gt;&#xA;  &amp;lt;p&amp;gt;DESCRIBE YOUR TEST HERE.&amp;lt;/p&amp;gt;&#xA;&amp;lt;/t:description&amp;gt;&#xA;&#xA;&amp;lt;t:pipeline&amp;gt;&#xA;  &amp;lt;!-- YOUR PIPELINE GOES HERE --&amp;gt;&#xA;  &amp;lt;p:declare-step xmlns:p=&#34;http://www.w3.org/ns/xproc&#34; version=&#34;3.0&#34;&amp;gt;&#xA;    &amp;lt;p:output port=&#34;result&#34; primary=&#34;false&#34;/&amp;gt;&#xA;      &#xA;    &amp;lt;p:identity&amp;gt;&#xA;      &amp;lt;p:with-input port=&#34;source&#34;&amp;gt;&#xA;        &amp;lt;doc/&amp;gt;&#xA;      &amp;lt;/p:with-input&amp;gt;&#xA;    &amp;lt;/p:identity&amp;gt;&#xA;  &amp;lt;/p:declare-step&amp;gt;&#xA;&amp;lt;/t:pipeline&amp;gt;&#xA;&amp;lt;!-- THERE ARE NO SCHEMATRON TESTS FOR FAILED PIPELINES --&amp;gt;&#xA;&amp;lt;/t:test&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Continuous integration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/xproc/3.0-test-suite.svg?style=shield&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/xproc/3.0-test-suite.svg?style=shield&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://xproc.github.io/3.0-test-suite/&#34;&gt;test suite&lt;/a&gt; is published automatically by &lt;a href=&#34;https://circleci.com&#34;&gt;CircleCI&lt;/a&gt;. All submissions are made through pull requests. Pull requests are automatically tested for conformance to the schemas and a few other ad hoc rules (all test titles must be unique, for example).&lt;/p&gt; &#xA;&lt;p&gt;If you have a modern development system, you should be able to run the tests locally with &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt;. Simply run the &lt;code&gt;gradlew&lt;/code&gt; script in the repository’s root directory with an appropriate target.&lt;/p&gt; &#xA;&lt;p&gt;Some useful targets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;validate_all_tests&lt;/code&gt; confirms that all the tests conform to the rules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;transform_all_tests&lt;/code&gt; transforms all of the tests into HTML.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;test_indexes&lt;/code&gt; builds the index pages for the website.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;website&lt;/code&gt; builds the website; this is the default target.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Test format&lt;/h2&gt; &#xA;&lt;p&gt;Scheams for the test XML format can be found in &lt;code&gt;src/main/test-suite.rnc&lt;/code&gt; and &lt;code&gt;src/main/test-suite.sch&lt;/code&gt;. These may allow you to configure syntax directed editing in your favorite XML editing tool.&lt;/p&gt; &#xA;&lt;p&gt;Most of the constraints are in the RELAX NG grammar but a few co-constraints are enforced in the Schematron.&lt;/p&gt; &#xA;&lt;h2&gt;The structure of tests&lt;/h2&gt; &#xA;&lt;p&gt;There are two kinds of tests: passing tests and failing tests. A passing test is one where the pipeline is expected to run successfully. A failing test is one where the pipeline is expected to fail (because of errors in the pipeline or the runtime configuration).&lt;/p&gt; &#xA;&lt;p&gt;Both passing and failing tests begin with a metadata section, &lt;code&gt;t:info&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;t:info&amp;gt;&#xA;  &amp;lt;t:title&amp;gt;Test Title&amp;lt;/t:title&amp;gt;&#xA;  &amp;lt;t:revision-history&amp;gt;&#xA;    &amp;lt;t:revision&amp;gt;&#xA;      &amp;lt;t:date&amp;gt;2018-02-02T17:42:37+01:00&amp;lt;/t:date&amp;gt;&#xA;      &amp;lt;t:author&amp;gt;&#xA;        &amp;lt;t:name&amp;gt;Author Name&amp;lt;/t:name&amp;gt;&#xA;        &amp;lt;t:email&amp;gt;you@example.com&amp;lt;/t:email&amp;gt;&#xA;        &amp;lt;t:uri&amp;gt;https://example.com/&amp;lt;/t:uri&amp;gt;&#xA;      &amp;lt;/t:author&amp;gt;&#xA;      &amp;lt;t:description&amp;gt;&#xA;        &amp;lt;p&amp;gt;Some description of this revision.&amp;lt;/p&amp;gt;&#xA;      &amp;lt;/t:description&amp;gt;&#xA;    &amp;lt;/t:revision&amp;gt;&#xA;  &amp;lt;/t:revision-history&amp;gt;&#xA;&amp;lt;/t:info&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If there are multiple revisions, place newer revisions above older ones. It isn’t mandatory to provide an email address or URI, but it will make it easier to identify you if there are follow up questions about the test.&lt;/p&gt; &#xA;&lt;p&gt;(See below for a few syntactic shortcuts for revisions.)&lt;/p&gt; &#xA;&lt;p&gt;The metadata section is followed by a description of the test:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;t:description xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&amp;gt;&#xA;  &amp;lt;p&amp;gt;DESCRIBE YOUR TEST HERE.&amp;lt;/p&amp;gt;&#xA;&amp;lt;/t:description&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Descriptions must be provided in HTML. Use &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; to identify errors and element names (e.g. &lt;code&gt;&amp;lt;code&amp;gt;err:XD0007&amp;lt;/code&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;code&amp;gt;p:identity&amp;lt;/code&amp;gt;&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Ideally, the description provides a brief synopsis of what is being tested. It should not recapitulate the test, but it should focus the reader’s attention to what’s important.&lt;/p&gt; &#xA;&lt;h3&gt;Passing tests&lt;/h3&gt; &#xA;&lt;p&gt;The basic structure of a passing test is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;t:test xmlns:t=&#34;http://xproc.org/ns/testsuite/3.0&#34;&#xA;        expected=&#34;pass&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A passing test must assert that the expected result is a pass.&lt;/p&gt; &#xA;&lt;p&gt;Following the metadata and description is the test pipeline:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;t:pipeline&amp;gt;&#xA;  &amp;lt;p:declare-step xmlns=&#34;http://xproc.org/ns/testsuite/3.0&#34; version=&#34;3.0&#34;&amp;gt;&#xA;    &amp;lt;!-- … --&amp;gt;&#xA;  &amp;lt;/p:declare-step&amp;gt;&#xA;&amp;lt;/t:pipeline&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The test ends with at least one Schematron assertion about the output.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;t:schematron&amp;gt;&#xA;  &amp;lt;s:schema xmlns:s=&#34;http://purl.oclc.org/dsdl/schematron&#34;&#xA;            xmlns:p=&#34;http://www.w3.org/ns/xproc&#34;&amp;gt;&#xA;     &amp;lt;s:ns prefix=&#34;p&#34; uri=&#34;http://www.w3.org/ns/xproc&#34;/&amp;gt;&#xA;     &amp;lt;!-- … some patterns --&amp;gt;&#xA;  &amp;lt;/s:schema&amp;gt;&#xA;&amp;lt;/t:schematron&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A failing test is much the same, except that it must assert that the expected result is a failure and provide a (list of) error codes that may be reported by a conformant processor.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;t:test xmlns:t=&#34;http://xproc.org/ns/testsuite/3.0&#34;&#xA;        xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&#xA;        xmlns:err=&#34;http://www.w3.org/ns/xproc-error&#34;&#xA;        expected=&#34;fail&#34;&#xA;        code=&#34;err:XS0038&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A failing test may not include a schematron schema to validate the test results.&lt;/p&gt; &#xA;&lt;h3&gt;Other test elements&lt;/h3&gt; &#xA;&lt;p&gt;Tests can also include inputs and options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;t:test xmlns:t=&#39;http://xproc.org/ns/testsuite/3.0&#39; expected=&#34;pass&#34;&amp;gt;&#xA;  &amp;lt;t:info&amp;gt;…&amp;lt;/t:info&amp;gt;&#xA;  &amp;lt;t:description&amp;gt;…&amp;lt;/t:description&amp;gt;&#xA;  &#xA;  &amp;lt;t:input port=&#39;source&#39;&amp;gt;…&amp;lt;/t:input&amp;gt;&#xA;  &amp;lt;t:option name=&#39;optname&#39; select=&#39;3&#39;/&amp;gt;&#xA;  &#xA;  &amp;lt;t:pipeline&amp;gt;…&amp;lt;/t:pipeline&amp;gt;&#xA;  &amp;lt;t:schematron&amp;gt;…&amp;lt;/t:schematron&amp;gt;&#xA;&amp;lt;/test&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;test&lt;/code&gt;, &lt;code&gt;input&lt;/code&gt;, &lt;code&gt;pipeline&lt;/code&gt;, and &lt;code&gt;schematron&lt;/code&gt; elements may each &lt;em&gt;either&lt;/em&gt; include their content inline &lt;em&gt;or&lt;/em&gt; point to it with a &lt;code&gt;src&lt;/code&gt; attribute. Test elements may further point to a specific step (if the &lt;code&gt;src&lt;/code&gt; URI points to a library, for example) with a &lt;code&gt;step&lt;/code&gt; attribute.&lt;/p&gt; &#xA;&lt;p&gt;In this way, if a complicated pipeline is reused in several tests (perhaps with different options), the pipeline can be authored once and reused:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;  &amp;lt;t:pipeline src=&#34;../pipelines/a-complex-pipeline.xpl&#34;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Revision history shortcuts&lt;/h2&gt; &#xA;&lt;p&gt;Often the same author makes several revisions to a test. In this case, it is somewhat inconvenient to have to repeat the author information over and over again. If the same author is responsible for multiple revisions, a syntactic shortcut is possible:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The first time you add an &lt;code&gt;t:author&lt;/code&gt;, specify the author initials.&lt;/li&gt; &#xA; &lt;li&gt;On a subsequent revision by that author, you can use the &lt;code&gt;initials&lt;/code&gt; attribute on &lt;code&gt;t:revision&lt;/code&gt; as a shortcut for the author.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;t:revision-history&amp;gt;&#xA;&#xA;  &amp;lt;t:revision initials=&#34;fa&#34;&amp;gt;&#xA;    &amp;lt;t:date&amp;gt;2018-03-14&amp;lt;/t:date&amp;gt;&#xA;    &amp;lt;t:description&amp;gt;&#xA;      &amp;lt;p&amp;gt;Some description of this revision.&amp;lt;/p&amp;gt;&#xA;    &amp;lt;/t:description&amp;gt;&#xA;  &amp;lt;/t:revision&amp;gt;&#xA;&#xA;  &amp;lt;t:revision&amp;gt;&#xA;    &amp;lt;t:date&amp;gt;2018-02-02&amp;lt;/t:date&amp;gt;&#xA;    &amp;lt;t:author initials=&#34;fa&#34;&amp;gt;&#xA;      &amp;lt;t:name&amp;gt;First Author&amp;lt;/t:name&amp;gt;&#xA;      &amp;lt;t:email&amp;gt;fa@example.com&amp;lt;/t:email&amp;gt;&#xA;    &amp;lt;/t:author&amp;gt;&#xA;    &amp;lt;t:description&amp;gt;&#xA;      &amp;lt;p&amp;gt;Some description of this revision.&amp;lt;/p&amp;gt;&#xA;    &amp;lt;/t:description&amp;gt;&#xA;  &amp;lt;/t:revision&amp;gt;&#xA;&#xA;&amp;lt;/t:revision-history&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Executing tests&lt;/h2&gt; &#xA;&lt;p&gt;The program that runs tests should accept a list of file or directory names and evaluate all of the tests given. For directories, it should recursively evaluate all of the tests in or below the specified directory.&lt;/p&gt; &#xA;&lt;p&gt;All test files should have the extension &lt;code&gt;.xml&lt;/code&gt;. Files that are not tests: pipelines, schemas, ancillary documents, etc. should be stored in other directories. Nevertheless, if a test runner finds a non-test document, it should simply skip it.&lt;/p&gt; &#xA;&lt;h3&gt;Controlling execution of tests&lt;/h3&gt; &#xA;&lt;p&gt;Tests and test suites can identify which features they cover with a &lt;code&gt;features&lt;/code&gt; attribute. (We don’t have a vocabulary of feature names yet, but…). It would be reasonable for a test runner to allow the user to specify which features they wanted to test.&lt;/p&gt; &#xA;&lt;p&gt;In addition, tests and test suites have a &lt;code&gt;when&lt;/code&gt; attribute. The &lt;code&gt;when&lt;/code&gt; attribute, if present, must contain an XPath expression. If the effective boolean value of that expression is true, then the test or test suite will run. Otherwise, it will be skipped.&lt;/p&gt; &#xA;&lt;p&gt;The context item for the &lt;code&gt;when&lt;/code&gt; expression is undefined. It is an error if the expression refers to the context.&lt;/p&gt; &#xA;&lt;h2&gt;Test results&lt;/h2&gt; &#xA;&lt;p&gt;All tests must produce a single result document on the &lt;code&gt;result&lt;/code&gt; port. The correctness of the result is determined by checking it with the supplied &lt;a href=&#34;http://schematron.com/&#34;&gt;Schematron&lt;/a&gt; schema.&lt;/p&gt; &#xA;&lt;p&gt;There’s no direct way to check non-XML results with Schematron, so some XML abstract (properties, counts, &lt;code&gt;base64&lt;/code&gt; or &lt;code&gt;hexBinary&lt;/code&gt; encodings, etc.) will have to be produced and tested.&lt;/p&gt; &#xA;&lt;h2&gt;Test report format&lt;/h2&gt; &#xA;&lt;p&gt;Tests should output the JUnit XML test result format.&lt;/p&gt; &#xA;&lt;h2&gt;Repository layout&lt;/h2&gt; &#xA;&lt;p&gt;This repository is organized in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;├── README.md&#xA;├── src/main/schema&#xA;│&amp;nbsp;&amp;nbsp;          └── …               # Schemas for the test suite itself&#xA;├── src/main/resources&#xA;│&amp;nbsp;&amp;nbsp;          └── …               # Site index, CSS, etc.&#xA;└── test-suite&#xA;    ├── documents&#xA;    │&amp;nbsp;&amp;nbsp; └── …                    # Ancillary documents used by tests&#xA;    ├── pipelines&#xA;    │&amp;nbsp;&amp;nbsp; └── …                    # Pipeline documents&#xA;    ├── schematron&#xA;    │&amp;nbsp;&amp;nbsp; └── …                    # Schematron schemas for checking test results&#xA;    └── tests&#xA;        └── …                    # Individual tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Docker configuration&lt;/h2&gt; &#xA;&lt;p&gt;Some tests require access to a configured server. For example, the HTTP tests require access to an HTTP server running scripts that respond in the expected way to requests.&lt;/p&gt; &#xA;&lt;p&gt;This used to be accomplished by running the services on &lt;code&gt;tests.xproc.org&lt;/code&gt;. However, that site runs on shared infrastructure and changes to that infrastructure caused a number of tests to fail. It also had the disadvantage that only Norm had access to the scripts and the server configuration.&lt;/p&gt; &#xA;&lt;p&gt;Starting in April, 2021, the services required for running tests are provided by a Docker container. To run the tests, you will need to have &lt;a href=&#34;https://docker.com/&#34;&gt;Docker&lt;/a&gt; and &lt;code&gt;docker-compose&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Before running the tests, you must start the container. You can do this by running &lt;code&gt;./gradlew start&lt;/code&gt;. Or, if you prefer, by running &lt;code&gt;docker-compose&lt;/code&gt; directly in the &lt;code&gt;docker&lt;/code&gt; directory. The container is downloaded from GitHub automatically, but the build script for the container is in &lt;code&gt;docker/xproctest&lt;/code&gt;. When the tests finish, you can stop the container by running &lt;code&gt;./gradlew stop&lt;/code&gt; or, again, with &lt;code&gt;docker-compose&lt;/code&gt; directly.&lt;/p&gt; &#xA;&lt;p&gt;At the time of this writing, the container only supports the HTTP tests. Over time, additional services such as SMTP mocking may be added to the container to facilitate testing more steps.&lt;/p&gt; &#xA;&lt;h3&gt;A note about port numbers&lt;/h3&gt; &#xA;&lt;p&gt;Access to the tests in the running container is provided through port mapping. At the moment, the mapping for HTTP is hard-coded to port &lt;code&gt;8246&lt;/code&gt;. In other words, &lt;code&gt;http://localhost:8246&lt;/code&gt; is mapped to port 80 in the container.&lt;/p&gt; &#xA;&lt;p&gt;It’s possible to make this configurable, but it would require some effort and it isn’t clear if it’s necessary. If you are running the tests and you find that using port &lt;code&gt;8246&lt;/code&gt; on &lt;code&gt;localhost&lt;/code&gt; is problematic, please open an issue.&lt;/p&gt;</summary>
  </entry>
</feed>