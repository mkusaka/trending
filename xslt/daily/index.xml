<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub XSLT Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-24T01:50:30Z</updated>
  <subtitle>Daily Trending of XSLT in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gbv/lido-analysis</title>
    <updated>2023-06-24T01:50:30Z</updated>
    <id>tag:github.com,2023-06-24:/gbv/lido-analysis</id>
    <link href="https://github.com/gbv/lido-analysis" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Analysis and transformation of LIDO data&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Analysis and transformation of LIDO data&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Collect, analyze, validate and transform &lt;a href=&#34;https://format.gbv.de/lido&#34;&gt;LIDO&lt;/a&gt; from various sources&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gbv/lido-analysis/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gbv/lido-analysis/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gbv/lido-analysis/main/#collect&#34;&gt;Collect&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gbv/lido-analysis/main/#analyze&#34;&gt;Analyze&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gbv/lido-analysis/main/#validate&#34;&gt;Validate&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gbv/lido-analysis/main/#transform&#34;&gt;Transform&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gbv/lido-analysis/main/#references&#34;&gt;References&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gbv/lido-analysis/main/#publications&#34;&gt;Publications&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gbv/lido-analysis/main/#projects-and-applications&#34;&gt;Projects and applications&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install required tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/miku/metha&#34;&gt;metha&lt;/a&gt; OAI-PMH client&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pigz&lt;/code&gt; for faster decompression&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;xsltproc&lt;/code&gt;, &lt;code&gt;xmllint&lt;/code&gt; and &lt;code&gt;xmlstarlet&lt;/code&gt; for XML processing&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rapper&lt;/code&gt; from &lt;code&gt;raptor-utils&lt;/code&gt; for RDF processing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On Ubuntu you can run &lt;code&gt;sudo ./install.sh&lt;/code&gt; to install these dependencies.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Collect&lt;/h3&gt; &#xA;&lt;p&gt;LIDO records are either harvested via OAI-PMH or manually put in form of files.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Don&#39;t commit actual LIDO records to this repository, except for unit tests!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s possible to download allo LIDO records from kenom this way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;metha-sync -format lido https://www.kenom.de/oai/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will take a long while, so better set a &lt;code&gt;-from&lt;/code&gt; date and/or a maximum number of requests, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;metha-sync -from 2023-06-01 -max 10 -format lido https://www.kenom.de/oai/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The records are stored in a cache directory that can be shown this way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;metha-sync -dir -format lido https://www.kenom.de/oai/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then copy the harvested records into a single XML file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;metha-cat -format lido https://www.kenom.de/oai/ &amp;gt; example.xml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Extract the LIDO records from their OAI-PMH envelope&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;xsltproc oaiextract.xsl example.xml &amp;gt; example.lido.xml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively list all files to process sequentially&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;find $(metha-sync -dir -format lido https://www.kenom.de/oai/) -name &#34;*.gz&#34; | xargs unpigz -c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Analyze&lt;/h3&gt; &#xA;&lt;h4&gt;Statistics and inspection&lt;/h4&gt; &#xA;&lt;p&gt;Count XML pathes&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;xmlstarlet el example.lido.xml | sed s/^.*lido:lido\/// | sort |  uniq -c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Extract some XML elements&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;xmlstarlet sel -N lido=http://www.lido-schema.org -t -c &#34;//lido:descriptiveMetadata/lido:objectClassificationWrap&#34; example.lido.xml &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Validate&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;TODO&lt;/em&gt; (&lt;a href=&#34;https://github.com/gbv/lido-analysis/issues/2&#34;&gt;https://github.com/gbv/lido-analysis/issues/2&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;Transform&lt;/h3&gt; &#xA;&lt;p&gt;LIDO can be used as such but transformation to other formats and models makes sense for both data integration and analysis. Two basic forms of target structures exist:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Flat data for simplified reuse and indexing in as search index (probably JSON)&lt;/li&gt; &#xA; &lt;li&gt;Graph data for knowlege graphs (probably RDF)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Convert to RDF&lt;/h4&gt; &#xA;&lt;p&gt;A minimal XSLT script to convert LIDO to RDF/XML is included&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;xsltproc lido2rdf.xsl example.lido.xml &amp;gt; example.rdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Better use another RDF serialization, at least NTriples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rapper -i rdfxml example.rdf &amp;gt; example.nt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternative: The conversion script to transform KENOM-LIDO to Numisma Data Model can be found at &lt;a href=&#34;https://github.com/AmericanNumismaticSociety/migration_scripts/raw/master/kenom/process-oai-pmh.php&#34;&gt;https://github.com/AmericanNumismaticSociety/migration_scripts/blob/master/kenom/process-oai-pmh.php&lt;/a&gt; (Apache License).&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;h3&gt;Publications&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Regine Stein and Oguzhan Balandi (2019): Using LIDO for Evolving Object Documentation into CIDOC CRM. &lt;a href=&#34;https://doi.org/10.3390/heritage2010066&#34;&gt;https://doi.org/10.3390/heritage2010066&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Antje Niemann (2019): Ein Knowledge Graph für wissenschaftliche Sammlungen : Generierung von Linked Open Data für heterogene museale Sammlungen auf der Basis des ASCH-Modells. &lt;a href=&#34;https://doi.org/10.15771/MA_2019_1&#34;&gt;https://doi.org/10.15771/MA_2019_1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Eleni Tsalapati, Nikolaos Simou,Nasos Drosopoulos and Regine Stein (2012): Evolving LIDO based aggregations into Linked Data. &lt;a href=&#34;http://www.image.ntua.gr/php/pub_details.php?code=767&#34;&gt;http://www.image.ntua.gr/php/pub_details.php?code=767&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Projects and applications&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;kenom data is already being conerted into RDF at Nomisma.org (see download at &lt;a href=&#34;http://numismatics.org/rdf/kenom.rdf&#34;&gt;http://numismatics.org/rdf/kenom.rdf&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://kerameikos.org/&#34;&gt;http://kerameikos.org/&lt;/a&gt; defines an ontology for pottery (there are connections to nomisma.org)&lt;/li&gt; &#xA; &lt;li&gt;Europeana converts LIDO to EDM&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ubleipzig/lido-cli&#34;&gt;https://github.com/ubleipzig/lido-cli&lt;/a&gt; LIDO to JSON for Solr&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cidoc-crm.org/mapping-tools&#34;&gt;https://www.cidoc-crm.org/mapping-tools&lt;/a&gt; X3ML, supports LIDO to CRM but probably very shallow: &lt;a href=&#34;https://www.cidoc-crm.org/Resources/the-lido-model&#34;&gt;https://www.cidoc-crm.org/Resources/the-lido-model&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Data integration with LIDO is examined in NFDI&lt;/li&gt; &#xA; &lt;li&gt;...&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>CycloneDX/specification</title>
    <updated>2023-06-24T01:50:30Z</updated>
    <id>tag:github.com,2023-06-24:/CycloneDX/specification</id>
    <link href="https://github.com/CycloneDX/specification" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CycloneDX is a full-stack Bill of Materials (BOM) standard that provides advanced supply chain capabilities for cyber risk reduction. SBOM, SaaSBOM, HBOM, OBOM, VDR, and VEX&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/CycloneDX/specification/actions?workflow=CI+Build&#34;&gt;&lt;img src=&#34;https://github.com/CycloneDX/specification/workflows/CI%20Build/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/CycloneDX/specification/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-apache%20v2-brightgreen.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cyclonedx.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/https://-cyclonedx.org-blue.svg?sanitize=true&#34; alt=&#34;Website&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cyclonedx.org/slack/invite&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Slack-Join-blue?logo=slack&amp;amp;labelColor=393939&#34; alt=&#34;Slack Invite&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://groups.io/g/CycloneDX&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/discussion-groups.io-blue.svg?sanitize=true&#34; alt=&#34;Group Discussion&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/CycloneDX_Spec&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/http/shields.io.svg?style=social&amp;amp;label=Follow&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;CycloneDX Specification&lt;/h1&gt; &#xA;&lt;p&gt;OWASP CycloneDX is a full-stack Bill of Materials (BOM) standard that provides advanced supply chain capabilities for cyber risk reduction. The specification supports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Software Bill of Materials (SBOM)&lt;/li&gt; &#xA; &lt;li&gt;Software-as-a-Service Bill of Materials (SaaSBOM)&lt;/li&gt; &#xA; &lt;li&gt;Hardware Bill of Materials (HBOM)&lt;/li&gt; &#xA; &lt;li&gt;Operations Bill of Materials (OBOM)&lt;/li&gt; &#xA; &lt;li&gt;Vulnerability Disclosure Reports (VDR)&lt;/li&gt; &#xA; &lt;li&gt;Vulnerability Exploitability eXchange (VEX).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Modern software is assembled using third-party and open source components, glued together in complex and unique ways, and integrated with original code to achieve the desired functionality. An accurate inventory of all components enables organizations to identify risk, allows for greater transparency, and enables rapid impact analysis.&lt;/p&gt; &#xA;&lt;p&gt;CycloneDX was created for this purpose.&lt;/p&gt; &#xA;&lt;p&gt;Strategic direction and maintenance of the specification is managed by the CycloneDX Core Working Group, is backed by the &lt;a href=&#34;https://owasp.org&#34;&gt;OWASP Foundation&lt;/a&gt;, and is supported by the global information security community.&lt;/p&gt; &#xA;&lt;h2&gt;Use Cases&lt;/h2&gt; &#xA;&lt;p&gt;The CycloneDX project maintains a &lt;a href=&#34;https://cyclonedx.org/use-cases/&#34;&gt;list of achievable use cases&lt;/a&gt;. Examples for each use case are provided in both XML and JSON.&lt;/p&gt; &#xA;&lt;h2&gt;Tool Center&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://cyclonedx.org/tool-center/&#34;&gt;CycloneDX Tool Center&lt;/a&gt; is a community effort to establish a marketplace of free, open source, and proprietary tools and solutions that support the CycloneDX specification.&lt;/p&gt; &#xA;&lt;h2&gt;Media Types&lt;/h2&gt; &#xA;&lt;p&gt;The following media types are officially registered with IANA:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Media Type&lt;/th&gt; &#xA;   &lt;th&gt;Format&lt;/th&gt; &#xA;   &lt;th&gt;Assignment&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;application/vnd.cyclonedx+xml&lt;/td&gt; &#xA;   &lt;td&gt;XML&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.iana.org/assignments/media-types/application/vnd.cyclonedx+xml&#34;&gt;IANA&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;application/vnd.cyclonedx+json&lt;/td&gt; &#xA;   &lt;td&gt;JSON&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.iana.org/assignments/media-types/application/vnd.cyclonedx+json&#34;&gt;IANA&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Specific versions of CycloneDX can be specified by using the version parameter. For example: &lt;code&gt;application/vnd.cyclonedx+xml; version=1.3&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The officially supported media type for Protocol Buffer format is &lt;code&gt;application/x.vnd.cyclonedx+protobuf&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Release History&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Release Date&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CycloneDX 1.4&lt;/td&gt; &#xA;   &lt;td&gt;12 January 2022&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CycloneDX 1.3&lt;/td&gt; &#xA;   &lt;td&gt;04 May 2021&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CycloneDX 1.2&lt;/td&gt; &#xA;   &lt;td&gt;26 May 2020&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CycloneDX 1.1&lt;/td&gt; &#xA;   &lt;td&gt;03 March 2019&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CycloneDX 1.0&lt;/td&gt; &#xA;   &lt;td&gt;26 March 2018&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Initial Prototype&lt;/td&gt; &#xA;   &lt;td&gt;01 May 2017&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Related Work&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://spdx.org&#34;&gt;SPDX (Software Package Data Exchange)&lt;/a&gt; is a specification that provides low-level details of components, including all files, hashes, authors, and copyrights. SPDX also defines over 300 open source license IDs. CycloneDX builds on top of the work SPDX has accomplished with license IDs, but varies greatly in its approach towards building a software bill of material specification.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.iso.org/standard/65666.html&#34;&gt;SWID (ISO/IEC 19770-2:2015)&lt;/a&gt; is used primarily to identify installed software and is the preferred format of the NVD. SWID tags are used in the National Vulnerability Database to describe vulnerable components. The CycloneDX specification compliments this work as CycloneDX documents can incorporate SWID tags and other high-level SWID metadata and optionally include entire SWID documents. Use of SWID tag ID&#39;s are useful in determining if a specific component has known vulnerabilities.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nvd.nist.gov/products/cpe&#34;&gt;CPE (Common Platform Enumeration)&lt;/a&gt; is a specification that describes the vendor, name, and version for an application, operating system, or hardware device. CPE identifiers are used in the National Vulnerability Database to describe vulnerable components. The CycloneDX specification compliments this work as CycloneDX documents can easily be used to construct exact CPE identifiers that are useful in determining if a specific component has known vulnerabilities.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright &amp;amp; License&lt;/h2&gt; &#xA;&lt;p&gt;CycloneDX Specification is Copyright (c) OWASP Foundation. All Rights Reserved.&lt;/p&gt; &#xA;&lt;p&gt;Permission to modify and redistribute is granted under the terms of the &lt;a href=&#34;https://github.com/CycloneDX/specification/raw/master/LICENSE&#34;&gt;Apache License 2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>