<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub XSLT Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-13T02:00:43Z</updated>
  <subtitle>Daily Trending of XSLT in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>paulhoadley/ResXML</title>
    <updated>2022-07-13T02:00:43Z</updated>
    <id>tag:github.com,2022-07-13:/paulhoadley/ResXML</id>
    <link href="https://github.com/paulhoadley/ResXML" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ResXML is an XML application for marking up resumes or curricula vitae.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ResXML&lt;/h1&gt; &#xA;&lt;h2&gt;What is ResXML?&lt;/h2&gt; &#xA;&lt;p&gt;ResXML is an XML application for the presentation-oriented markup of resumes or curricula vitae. The aim is for ResXML to support a set of features which make it a very functional tool for generating resumes for actual use from an XML source.&lt;/p&gt; &#xA;&lt;h2&gt;Does it work?&lt;/h2&gt; &#xA;&lt;p&gt;ResXML is currently in an alpha state, primarily because the amount of documentation and supporting infrastructure is minimal. That&#39;s not to say it doesn&#39;t workâ€”the authors are already using it to produce printed resumes for actual job applications. The problem is that you need to know what you&#39;re doing. If you have the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a working knowledge of XML;&lt;/li&gt; &#xA; &lt;li&gt;an XSLT processor; and (if you want PDF or PostScript output)&lt;/li&gt; &#xA; &lt;li&gt;an XSLFO formatter,&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;then you will be able to use ResXML to produce a resume.&lt;/p&gt; &#xA;&lt;h2&gt;Producing a &#34;targeted&#34; resume&lt;/h2&gt; &#xA;&lt;p&gt;ResXML can help you produce multiple different &#34;targeted&#34; resumes from a single source. Say you want to produce a &#34;tech&#34; and a &#34;retail&#34; resume containing different content.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Elements common to all of your targets can be added in the usual way.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Annotate any elements that should appear only in one of the targets with the &lt;code&gt;targets&lt;/code&gt; attribute. e.g., &lt;code&gt;&amp;lt;employer targets=&#34;retail&#34;&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;common/targets.xsl&lt;/code&gt; stylesheet to make an initial pass over your source, supplying it with one or more desired targets e.g.:&lt;/p&gt; &lt;p&gt;&lt;code&gt;$ xsltproc --stringparam targets &#34;retail&#34; common/targets.xsl resume.xml &amp;gt; retail.xml&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can add multiple targets (comma separated), and any element matching one or more of the targets will be passed through.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Finally, process the intermediate XML in the usual way.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;We originally developed ResXML in about 2003, and it was hosted on SourceForge. This is &lt;em&gt;not&lt;/em&gt; a bit-for-bit copy of that repository, as it contained quite a bit of Subversion- and SourceForge-related detritus. We&#39;ve moved the latest version of the important parts of that repository over to GitHub, and left behind what wasn&#39;t required or was no longer relevant.&lt;/p&gt;</summary>
  </entry>
</feed>