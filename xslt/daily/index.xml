<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub XSLT Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-14T02:00:08Z</updated>
  <subtitle>Daily Trending of XSLT in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AgoraIO/agora_doc_source</title>
    <updated>2022-08-14T02:00:08Z</updated>
    <id>tag:github.com,2022-08-14:/AgoraIO/agora_doc_source</id>
    <link href="https://github.com/AgoraIO/agora_doc_source" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;基于 DITA 的文档内容仓库&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/AgoraDoc/doc_source/actions/workflows/python-app.yml&#34;&gt;&lt;img src=&#34;https://github.com/AgoraDoc/doc_source/actions/workflows/python-app.yml/badge.svg?sanitize=true&#34; alt=&#34;Awesome JSON CI build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/AgoraDoc/doc_source/actions/workflows/python-app-sync-proto.yml&#34;&gt;&lt;img src=&#34;https://github.com/AgoraDoc/doc_source/actions/workflows/python-app-sync-proto.yml/badge.svg?sanitize=true&#34; alt=&#34;Awesome prototype syncs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/AgoraDoc/doc_source/actions/workflows/python-app-validate-prototype.yml&#34;&gt;&lt;img src=&#34;https://github.com/AgoraDoc/doc_source/actions/workflows/python-app-validate-prototype.yml/badge.svg?sanitize=true&#34; alt=&#34;Awesome DITA API doc prototype validation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/AgoraDoc/doc_source/actions/workflows/OxygenScript.yml&#34;&gt;&lt;img src=&#34;https://github.com/AgoraDoc/doc_source/actions/workflows/OxygenScript.yml/badge.svg?sanitize=true&#34; alt=&#34;OxygenScript for DITA processing&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/AgoraDoc/doc_source/actions/workflows/AwesomeOxygenScriptforDITADocBuilding_CG.yml&#34;&gt;&lt;img src=&#34;https://github.com/AgoraDoc/doc_source/actions/workflows/AwesomeOxygenScriptforDITADocBuilding_CG.yml/badge.svg?sanitize=true&#34; alt=&#34;Awesome OxygenScript for DITA doc building (CG SDK)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/AgoraDoc/doc_source/actions/workflows/AwesomeOxygenScriptforDITADocBuilding.yml&#34;&gt;&lt;img src=&#34;https://github.com/AgoraDoc/doc_source/actions/workflows/AwesomeOxygenScriptforDITADocBuilding.yml/badge.svg?sanitize=true&#34; alt=&#34;Awesome OxygenScript for DITA doc building (NG SDK)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- vscode-markdown-toc --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AgoraIO/agora_doc_source/master/#&#34;&gt;概览&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;1.1. &lt;a href=&#34;https://raw.githubusercontent.com/AgoraIO/agora_doc_source/master/#DITAmap&#34;&gt;DITA map 架构&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;1.2. &lt;a href=&#34;https://raw.githubusercontent.com/AgoraIO/agora_doc_source/master/#-1&#34;&gt;内容重用机制&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;2&#34;&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AgoraIO/agora_doc_source/master/#API&#34;&gt;API 注释自动化协作规范&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;2.1. &lt;a href=&#34;https://raw.githubusercontent.com/AgoraIO/agora_doc_source/master/#Tag&#34;&gt;代码配置：打 Tag&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;2.1.1. &lt;a href=&#34;https://raw.githubusercontent.com/AgoraIO/agora_doc_source/master/#api--Cn&#34;&gt;方法：api{-类名称}-C++ 原型{n}&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;2.1.2. &lt;a href=&#34;https://raw.githubusercontent.com/AgoraIO/agora_doc_source/master/#callback--CIRtcEngineEventHandler&#34;&gt;回调 callback{-类名称}-C++ 原型&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;2.1.3. &lt;a href=&#34;https://raw.githubusercontent.com/AgoraIO/agora_doc_source/master/#class--C&#34;&gt;类（结构体） class-类名称-C++ 原型&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;2.1.4. &lt;a href=&#34;https://raw.githubusercontent.com/AgoraIO/agora_doc_source/master/#enum-&#34;&gt;枚举 enum-枚举类名称&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;2.2. &lt;a href=&#34;https://raw.githubusercontent.com/AgoraIO/agora_doc_source/master/#Dita&#34;&gt;DITA 文件命名规则&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;3&#34;&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AgoraIO/agora_doc_source/master/#API-1&#34;&gt;自动检查 API 文档中的原型与代码是否一致&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;4&#34;&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AgoraIO/agora_doc_source/master/#APIDITADITA&#34;&gt;API 文档代码原型从中文 DITA 文件自动同步到英文 DITA 文件&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;5&#34;&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AgoraIO/agora_doc_source/master/#API-1&#34;&gt;从 API 文档自动构建用于自动化填充代码注释的文档模板&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;6&#34;&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AgoraIO/agora_doc_source/master/#BetaAPI&#34;&gt;（Beta）API 原型自动填充&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;7&#34;&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AgoraIO/agora_doc_source/master/#WIPDITA&#34;&gt;（WIP）DITA 文件格式排版自动修正&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;8&#34;&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AgoraIO/agora_doc_source/master/#WIPDITA-1&#34;&gt;（WIP）DITA 文件合规性检查&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;9&#34;&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AgoraIO/agora_doc_source/master/#DITAHTML&#34;&gt;DITA 文件自动在线构建 HTML 文档&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;9.1. &lt;a href=&#34;https://raw.githubusercontent.com/AgoraIO/agora_doc_source/master/#-1&#34;&gt;监听发版分支&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;9.1.1. &lt;a href=&#34;https://raw.githubusercontent.com/AgoraIO/agora_doc_source/master/#RTCSDK&#34;&gt;RTC 大重构 SDK&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;9.1.2. &lt;a href=&#34;https://raw.githubusercontent.com/AgoraIO/agora_doc_source/master/#RTCSDK-1&#34;&gt;RTC 主版本 SDK&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;9.2. &lt;a href=&#34;https://raw.githubusercontent.com/AgoraIO/agora_doc_source/master/#-1&#34;&gt;查看构建过程&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;9.3. &lt;a href=&#34;https://raw.githubusercontent.com/AgoraIO/agora_doc_source/master/#-1&#34;&gt;获取压缩的文件包&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- vscode-markdown-toc-config&#xA;&#x9;numbering=true&#xA;&#x9;autoSave=true&#xA;&#x9;/vscode-markdown-toc-config --&gt; &#xA;&lt;!-- /vscode-markdown-toc --&gt; &#xA;&lt;h2&gt;1. &lt;a name=&#34;&#34;&gt;&lt;/a&gt;概览&lt;/h2&gt; &#xA;&lt;p&gt;DITA 文档体系架构如下。由于体量不大，暂不需要做 DITA Specialization。&lt;/p&gt; &#xA;&lt;p&gt;文档以 DITA 作为源，同时输出面向开发者的代码注释模板和文档：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10089260/168726228-7ec29a80-3810-42bc-a0a9-a20a8a4fc54a.svg?sanitize=true&#34; alt=&#34;11111&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;文档对 SDK 产品的 API 接口进行了如下建模：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10089260/168726238-38ab71da-d6d9-4d16-861a-b925bbdaa63a.svg?sanitize=true&#34; alt=&#34;22222&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;文档内容主要分为两种文件格式：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;.dita 主要是 API 文档&lt;/li&gt; &#xA; &lt;li&gt;.md 其他文档&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;dita 目录下为所有的中文文档的源内容及相关配置文件。对应的英文内容在 en-US/dita 目录下。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;*.xpr 文件&lt;br&gt; Oxygen Project 文件，用于在 Oxygen 中管理文档项目，一般建议一个产品创建一个 Oxygen Project。&lt;/li&gt; &#xA; &lt;li&gt;.config 文件夹&lt;br&gt; 用于存放全局的 DITA 相关配置。 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;*.xml&lt;br&gt; DITA project file，用于发布文档。&lt;/li&gt; &#xA;   &lt;li&gt;custom-checks.sch&lt;br&gt; 自定义的验证配置，目前会检查 topic ID 和文件名是否一致。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;templates-cn 文件夹 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;产品文件夹，如 RTC。各个产品根据需要自行创建模板。 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;*.dita&lt;br&gt; DITA topic 模板文件&lt;/li&gt; &#xA;     &lt;li&gt;*.ditamap&lt;br&gt; DITA map 模板文件&lt;/li&gt; &#xA;     &lt;li&gt;*.properties&lt;br&gt; 模板属性，可以用于设置模板的文件名前缀/后缀及模板在 Oxygen 中显示的名称。&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;RTC 文件夹和 RTC-NG 文件夹。包含 RTC 产品的文档源内容及相关配置。 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;*.md&lt;br&gt; 使用 lwdita 或者原生的 markdown 写作的文档。&lt;br&gt; 如果一篇文档需要拆分为多个 topic，子 topic 放在单独的文档目录下，比如快速开始在 RTC 根目录下只有 get-started.md，其他的 topic 都放在 quick-start 文件夹下。&lt;/li&gt; &#xA;   &lt;li&gt;API 文件夹 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;RTC 所有 API 的 dita topic&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;quick-start 文件夹。用于存放快速开始的子 topic。&lt;/li&gt; &#xA;   &lt;li&gt;config 文件夹 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;filter-***.ditaval&lt;br&gt; 过滤条件配置&lt;/li&gt; &#xA;     &lt;li&gt;keys-***.ditamap&lt;br&gt; 各个平台的变量定义，一般是 API 名、链接或者其他有平台差异的变量。&lt;/li&gt; &#xA;     &lt;li&gt;relations-*.ditamap&lt;br&gt; Topic 之间的关系&lt;/li&gt; &#xA;     &lt;li&gt;subject-scheme-rtc.ditamap&lt;br&gt; 自定义的过滤属性值，用于控制文档中可以设置的 props 值。&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;conref 文件夹。用于存放所有被 conref 的 dita 源文件。 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;conref_api_metatdata.dita&lt;br&gt; 由于英文中不同平台的类的表达不一样，用于 conref + filter 在不同平台显示对应的英文表达。&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;*.ditamap&lt;br&gt; 一个 DITA map 对应一套文档。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.1. &lt;a name=&#34;DITAmap&#34;&gt;&lt;/a&gt;DITA map 架构&lt;/h3&gt; &#xA;&lt;p&gt;一个产品的所有平台的文档对应一个 DITA map。一个 DITA map 中，通常包含文档中用到的变量、 subject scheme （定义可用的条件）以及具体的文档 topic。&lt;/p&gt; &#xA;&lt;p&gt;下图可以大致看出 DITA map 和最终的文档结构（互动直播 Android 平台）之间的对应：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10089260/167323245-1ed6c57b-0ae6-465a-9dd2-303bd3f81a87.png&#34; alt=&#34;image2022-2-9_18-8-10&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;产品文档的 DITA map 可能包含以下几种类型的元素&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;title map 的标题&lt;/li&gt; &#xA; &lt;li&gt;topichead&lt;br&gt; 用于将内容分组，分组下如果是文档内容，topichead 会生成为文档左侧导航栏的一级目录&lt;/li&gt; &#xA; &lt;li&gt;mapref&lt;br&gt; 指向一个 DITA map 的引用，可能是 key map，也可以是另一套文档的 DITA map。mapref 的引用均使用 href 指定文件路径，不要用 keyref。&lt;/li&gt; &#xA; &lt;li&gt;keydef&lt;br&gt; 用于定义 map 中用到的变量，一般有图片、网页、文档 topic、短语。&lt;br&gt; 如果是指向 md 文件的 key，注意 format 设置为&amp;nbsp;mdita。&lt;/li&gt; &#xA; &lt;li&gt;topicref&lt;br&gt; 指向一个文档 topic 的引用，均通过 keyref 指定文件或链接，不要用 href。&lt;br&gt; 如果一篇文档分成多个层级的 topic，需要将第一级的 topicref 的 chunk 属性设置为 to-content，其他的子 topicref 的 toc 属性设置为 no。&lt;br&gt; 如果这个 topic 只适用于部分平台，还需要在 topicref 上设置 props 属性。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;下面以互动直播产品为例，说明 DITA map 的架构。&lt;/p&gt; &#xA;&lt;p&gt;这里给出的 map 内容仅作为举例说明，并非完整有效的 DITA map。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;map&amp;gt;&#xA;    &amp;lt;title&amp;gt;互动直播&amp;lt;/title&amp;gt;&#xA; &#xA;    topichead 用于将 map 内容分组，并不决定文档内容的层级。这里的 Configurations 下全部是互动直播文档的配置文件，包括条件取值的定义和各个平台的变量。&#xA;    &amp;lt;topichead navtitle=&#34;Configurations&#34; toc=&#34;no&#34;&amp;gt;&#xA;        这个 ditamap 用于规定文档中可用的过滤条件，注意 type 必须设置为 subjectScheme&#xA;        &amp;lt;mapref href=&#34;config/conditions.ditamap&#34; format=&#34;ditamap&#34; type=&#34;subjectScheme&#34; navtitle=&#34;Conditions&#34;/&amp;gt;       &#xA;        Android 平台的变量定义，过滤条件设置为 android。&#xA;        &amp;lt;mapref href=&#34;config/keys-android.ditamap&#34; props=&#34;android&#34;/&amp;gt;&#xA;        &amp;lt;mapref href=&#34;config/keys-ios.ditamap&#34; props=&#34;ios&#34;/&amp;gt;&#xA; &#xA;        随产品变化的变量，直接定义在该产品的 DITA map 中。可以用 topichead 进行分组，方便查看和管理。&#xA;        &amp;lt;topichead navtitle=&#34;Variables&#34;&amp;gt;&#xA;            &amp;lt;topichead navtitle=&#34;Figures&#34;&amp;gt;&#xA;                &amp;lt;keydef keys=&#34;start-api-sequence-android&#34; href=&#34;https://web-cdn.agora.io/docs-files/1625208380588&#34; scope=&#34;external&#34; format=&#34;png&#34;/&amp;gt;&#xA;                &amp;lt;keydef keys=&#34;start-api-sequence-apple&#34; href=&#34;https://web-cdn.agora.io/docs-files/1627888336100&#34; scope=&#34;external&#34; format=&#34;png&#34; navtitle=&#34;API seqeunce of live streaming&#34;/&amp;gt;&#xA;            &amp;lt;/topichead&amp;gt;&#xA; &#xA;            &amp;lt;topichead navtitle=&#34;Docs&#34;&amp;gt;&#xA;                这个 topichead 下是互动直播各平台共用的文档 topic 的 key 定义，为了方便重用，所有的 topicref 都通过 keyref 指向具体的文件。&#xA;                &amp;lt;keydef keys=&#34;product-overview&#34; href=&#34;product-overview-live.md&#34; format=&#34;mdita&#34; locktitle=&#34;yes&#34;&amp;gt;&#xA;                    &amp;lt;topicmeta&amp;gt;&#xA;                        &amp;lt;navtitle&amp;gt;产品概述&amp;lt;/navtitle&amp;gt;&#xA;                        &amp;lt;keywords&amp;gt;&#xA;                            &amp;lt;keyword&amp;gt;产品概述&amp;lt;/keyword&amp;gt;&#xA;                        &amp;lt;/keywords&amp;gt;&#xA;                    &amp;lt;/topicmeta&amp;gt;&#xA;                &amp;lt;/keydef&amp;gt;&#xA;                &amp;lt;keydef keys=&#34;product-compare&#34; href=&#34;product-overview/product-solution-comparison.md&#34; format=&#34;mdita&#34;&amp;gt;&#xA;                    &amp;lt;topicmeta&amp;gt;&#xA;                        &amp;lt;keywords&amp;gt;&#xA;                            &amp;lt;keyword&amp;gt;直播产品区别&amp;lt;/keyword&amp;gt;&#xA;                        &amp;lt;/keywords&amp;gt;&#xA;                    &amp;lt;/topicmeta&amp;gt;&#xA;                &amp;lt;/keydef&amp;gt;&#xA;            &amp;lt;/topichead&amp;gt;&#xA; &#xA;            互动直播产品用到的其他变量&#xA;            &amp;lt;keydef keys=&#34;product-name&#34;&amp;gt;&#xA;                &amp;lt;topicmeta&amp;gt;&#xA;                    &amp;lt;keywords&amp;gt;&#xA;                        &amp;lt;keyword&amp;gt;互动直播&amp;lt;/keyword&amp;gt;&#xA;                    &amp;lt;/keywords&amp;gt;&#xA;                &amp;lt;/topicmeta&amp;gt;&#xA;            &amp;lt;/keydef&amp;gt;&#xA;        &amp;lt;/topichead&amp;gt;&#xA;    &amp;lt;/topichead&amp;gt;&#xA;     &#xA;    这里向下是互动直播产品的文档内容，每一个 topichead 对应文档站左侧的第一级导航&#xA;    &amp;lt;topichead navtitle=&#34;产品介绍&#34;&amp;gt;&#xA;        topichead 下的第一级 topicref 对应现在的单篇文档，如果一篇文档有子 topic，这里的 topicref 要设置 chunk，将下面的子 topic 合并到一个页面发布。&#xA;        这里 topicref 的 navtitle 只影响在 DITA map manager 中显示的标题，生成的文档目录中会使用文档内的一级标题。如果希望文档目录的标题和文档内的一级标题不一样（比如文档标题过长），需要在 key 的定义中添加 navtitle 元素，同时将 locktitle 属性设置为 yes。&#xA;        &amp;lt;topicref keyref=&#34;product-overview&#34; navtitle=&#34;产品概述&#34; chunk=&#34;to-content&#34;&amp;gt;&#xA;            &amp;lt;topicref keyref=&#34;product-compare&#34; toc=&#34;no&#34;/&amp;gt;&#xA;            &amp;lt;topicref keyref=&#34;product-compatibility&#34; toc=&#34;no&#34;/&amp;gt;&#xA;        &amp;lt;/topicref&amp;gt;&#xA;    &amp;lt;/topichead&amp;gt;&#xA; &#xA;    &amp;lt;topichead navtitle=&#34;参考文档&#34;&amp;gt;&#xA;        这里的 API 文档直接引用已经做好的 API 文档的 DITA map，每个平台对应一个，设置好 props。&#xA;        &amp;lt;topicref href=&#34;RTC_NG_API_Android.ditamap&#34; navtitle=&#34;Android API 参考&#34; format=&#34;ditamap&#34; props=&#34;android&#34;/&amp;gt;&#xA;        &amp;lt;topicref href=&#34;RTC_NG_API_iOS.ditamap&#34; navtitle=&#34;iOS API 参考&#34; format=&#34;ditamap&#34; props=&#34;ios&#34;/&amp;gt;&#xA;        &amp;lt;topicref keyref=&#34;error-code&#34; navtitle=&#34;错误码&#34;/&amp;gt;&#xA;    &amp;lt;/topichead&amp;gt;&#xA;    这个 faq 是外部链接，key 在各个平台的 key map 中定义。&#xA;    &amp;lt;topicref keyref=&#34;faq&#34;&amp;gt;&#xA;        &amp;lt;topicmeta&amp;gt;&#xA;            &amp;lt;navtitle&amp;gt;FAQ&amp;lt;/navtitle&amp;gt;&#xA;            &amp;lt;shortdesc&amp;gt;互动直播产品的常见问题&amp;lt;/shortdesc&amp;gt;&#xA;        &amp;lt;/topicmeta&amp;gt;&#xA;    &amp;lt;/topicref&amp;gt;&#xA;&amp;lt;/map&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;1.2. &lt;a name=&#34;-1&#34;&gt;&lt;/a&gt;内容重用机制&lt;/h3&gt; &#xA;&lt;p&gt;我们的 DITA 文档用到了以下几种重用方式：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;topic&lt;br&gt; 一个产品不同平台的功能相同，因此每个 API topic 的描述大部分情况下可以用于所有平台。&lt;/li&gt; &#xA; &lt;li&gt;keyref&lt;br&gt; 不同平台的 API 名称、链接等可能会有差异，在同一个 API topic 中，对有平台差异的 API 名称使用 keyref，key 的具体值在单独的 ditamap 中定义。这样每个平台只需要定义好自己的 key，就可以共用一套 API topic。&lt;/li&gt; &#xA; &lt;li&gt;conref&lt;br&gt; 相当于文档后台的 fragment，在多个不同的 topic 中引用同样的一段内容。 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;被 conref 的内容需要定义 id&lt;/li&gt; &#xA;   &lt;li&gt;插入设置了 conref 的元素必须和被 conref 的元素一致&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;conditional output &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;使用&amp;nbsp;&lt;a href=&#34;https://www.oxygenxml.com/dita/1.3/specs/archSpec/base/subject-scheme-maps-and-usage.html&#34;&gt;subject scheme map&lt;/a&gt;&amp;nbsp;规定文档中可以使用的条件属性及取值。&lt;/li&gt; &#xA;   &lt;li&gt;写作时定义适用的条件&lt;br&gt; DITA 中有很多支持条件化输出的属性，我们目前只使用 props 属性（和 Lightweight DITA 内容兼容）。&lt;/li&gt; &#xA;   &lt;li&gt;输出时应用 ditaval 进行过滤&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;conkeyref &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;通过 key + element ID 指定要重用的内容&lt;/li&gt; &#xA;   &lt;li&gt;可以用于重用一个 API topic 中的一段内容。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2. &lt;a name=&#34;API&#34;&gt;&lt;/a&gt;API 注释自动化协作规范&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10089260/167324076-0c4b0d8a-fb33-430c-91e6-8e31d18fd69e.png&#34; alt=&#34;企业微信20220509-090330&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2.1. &lt;a name=&#34;Tag&#34;&gt;&lt;/a&gt;代码配置：打 Tag&lt;/h3&gt; &#xA;&lt;p&gt;拟采用给 API 打 Tag 的方式配置代码信息，便于与注释 Json 文件中的内容进行关联。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;在脚本验证阶段，文档组按照本页规定添加代码 Tag&lt;/li&gt; &#xA; &lt;li&gt;脚本成熟运行阶段，需要研发在进代码的时候添加代码配置信息；建议 CI 流程中做一层检查，提交时如新增或改动 API ，检查是否已打 Tag。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;如果类名称为本不该暴露的基类（仅发生于 C++），例如 callback-iaudioframeobserverbase-onmixedaudioframe，则必须把基类替换为它的扩展类，例如 callback-iaudioframeobserver-onplaybackaudioframebeforemixin。否则无法在不同平台之间通用。&lt;/p&gt; &#xA;&lt;h4&gt;2.1.1. &lt;a name=&#34;api--Cn&#34;&gt;&lt;/a&gt;方法：api{-类名称}-C++ 原型{n}&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;如果类名为 RtcEngine，则类名称可省略；其余类不可省略&lt;/li&gt; &#xA; &lt;li&gt;如果该方法为平台特有，C++ 没有，确定 C++ 不需要添加之后原型&lt;/li&gt; &#xA; &lt;li&gt;n 为重载方法的序号；如有两个同名方法，则先添加的无序号，后添加的加 2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;例如：api-joinchannel、api-joinchannel2、api-rtcchannel-joinchannel、api-iaudioframeobserver-onplaybackaudioframe&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;OC 与 C++ 类名称以 C++ 为准；OC 独有的以 OC 命名 标记重载需要开发在添加一个方法时，先确认该方法是否有重载 由于 SDK 包中无 Java 文件，因此本页不适用 Java&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;2.1.2. &lt;a name=&#34;callback--CIRtcEngineEventHandler&#34;&gt;&lt;/a&gt;回调 callback{-类名称}-C++ 原型&lt;/h4&gt; &#xA;&lt;p&gt;如果类名称为 IRtcEngineEventHandler，则类名称可省略，其余类不可省略。&lt;/p&gt; &#xA;&lt;p&gt;例如：callback-onjoinchannelsuccess、callback-irtcchanneleventhandler-onjoinchannelsuccess&lt;/p&gt; &#xA;&lt;h4&gt;2.1.3. &lt;a name=&#34;class--C&#34;&gt;&lt;/a&gt;类（结构体） class-类名称-C++ 原型&lt;/h4&gt; &#xA;&lt;p&gt;例如：class-livetranscoding&lt;/p&gt; &#xA;&lt;h4&gt;2.1.4. &lt;a name=&#34;enum-&#34;&gt;&lt;/a&gt;枚举 enum-枚举类名称&lt;/h4&gt; &#xA;&lt;p&gt;例如：enum-voicebeautifierpreset&lt;/p&gt; &#xA;&lt;h3&gt;2.2. &lt;a name=&#34;Dita&#34;&gt;&lt;/a&gt;DITA 文件命名规则&lt;/h3&gt; &#xA;&lt;p&gt;RTC 和 RTC-NG 所有的 API 文件全部放在 API 文件夹内。&lt;/p&gt; &#xA;&lt;p&gt;文件名规则：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{type}_{class}_{api name}{n}_{ng}.dita&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;变量说明：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;type: 接口类型，可分为如下类型：&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;api：方法&lt;/li&gt; &#xA;   &lt;li&gt;callback：回调&lt;/li&gt; &#xA;   &lt;li&gt;class：接口类、结构体&lt;/li&gt; &#xA;   &lt;li&gt;enum：枚举类&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;class: 方法或回调在 C++ 上所在的类名称，全小写。如果类名称为 IRtcEngine 或 IRtcEngineEventHandler 则省略&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;api name: 该方法的 C++ 原型全小写；如果该方法为本语言独有，则按自己原型全小写&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;n: 重载方法的序号。按照增加的顺序加数字，最先加的方法后面没有数字，如 joinchannel， joinchannel2， joinchannel3；重载序号主板本和 NG 不一致的，则分开创建 .dita 文件，且 NG 文件后缀为 ng。ng 后不得再加其他后缀。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ng：NG 和主版同一个 API 不能共用一个 dita topic 时，需要为 NG 单独创建一个时使用。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;从项目效率考虑，NG 和主版本文件现在位于不同文件夹。我们不会再为新的文件创建后缀为 _ng 的文件。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;3. &lt;a name=&#34;API-1&#34;&gt;&lt;/a&gt;自动检查 API 文档中的原型与代码是否一致&lt;/h2&gt; &#xA;&lt;p&gt;API 文档中包含代码中的函数、类、枚举、结构体等的原型。这个原型需要和代码保持一致。&lt;/p&gt; &#xA;&lt;p&gt;对于 DITA API 文档，在面向 release 分支的 PR 发生时，仓库 CI 会进行自动检查。为了得到准确的检查结果，你需要：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;将最新的 API 代码上传到 &lt;a href=&#34;https://github.com/AgoraDoc/doc_source/tree/master/xml2json/code_to_check&#34;&gt;https://github.com/AgoraDoc/doc_source/tree/master/xml2json/code_to_check&lt;/a&gt; （master 分支）。如果你需要新建一个目录，需要通知 @yamasite 更新相关 CI。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;确保你的发版分支在这个文件中：&lt;a href=&#34;https://github.com/AgoraDoc/doc_source/raw/master/.github/sync.yml&#34;&gt;https://github.com/AgoraDoc/doc_source/blob/master/.github/sync.yml&lt;/a&gt;。如果没有，可以直接添加自己的分支。&lt;/p&gt; &lt;p&gt;不要删除其他分支。因为可能有其他文档项目需要。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;在 GitHub Actions 页面，进入触发的 build workflow 中。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;在控制台中选择要查看的平台，在搜索框中输入&amp;nbsp;prototype validation starts&amp;nbsp;即可定位到报告。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;4. &lt;a name=&#34;APIDITADITA&#34;&gt;&lt;/a&gt;API 文档代码原型从中文 DITA 文件自动同步到英文 DITA 文件&lt;/h2&gt; &#xA;&lt;p&gt;你在向&amp;nbsp;release 分支提 PR 或合入文件时，CI 会自动生成一个 PR。将 PR 合并即可。&lt;strong&gt;这个 PR 现在会自动合并。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;YiCAT 的翻译会使英文文档中的代码原型出现格式问题。你必须通过自动同步的方法更新英文 DITA 文件中的代码原型。&lt;/p&gt; &#xA;&lt;h2&gt;5. &lt;a name=&#34;API-1&#34;&gt;&lt;/a&gt;从 API 文档自动构建用于自动化填充代码注释的文档模板&lt;/h2&gt; &#xA;&lt;p&gt;文档模板文件（JSON 文件）会在 &lt;a href=&#34;https://github.com/AgoraIO/agora_doc_source/releases/tag/main&#34;&gt;https://github.com/AgoraIO/agora_doc_source/releases/tag/main&lt;/a&gt; 自动生成。SDK 研发可以通过脚本自动抓取。&lt;/p&gt; &#xA;&lt;p&gt;如果你需要为某分支生成 JSON 文件，你需要在以下文件中添加你的分支：&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/AgoraIO/agora_doc_source/raw/master/.github/sync.yml&#34;&gt;https://github.com/AgoraIO/agora_doc_source/blob/master/.github/sync.yml&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RTC Electron 4.x SDK: &lt;a href=&#34;https://github.com/AgoraIO/agora_doc_source/raw/master/.github/workflows/python-app-3.8.200-electron-yaxi.yml&#34;&gt;https://github.com/AgoraIO/agora_doc_source/blob/master/.github/workflows/python-app-3.8.200-electron-yaxi.yml&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;RTC Unity 4.x SDK: &lt;a href=&#34;https://github.com/AgoraIO/agora_doc_source/raw/master/.github/workflows/python-app-3.8.200-framework.yml&#34;&gt;https://github.com/AgoraIO/agora_doc_source/blob/master/.github/workflows/python-app-3.8.200-framework.yml&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;RTC RN 4.x SDK: &lt;a href=&#34;https://github.com/AgoraIO/agora_doc_source/raw/master/.github/workflows/python-app-3.8.200-kelu.yml&#34;&gt;https://github.com/AgoraIO/agora_doc_source/blob/master/.github/workflows/python-app-3.8.200-kelu.yml&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;RTC Flutter 4.x SDK: &lt;a href=&#34;https://github.com/AgoraIO/agora_doc_source/raw/master/.github/workflows/python-app-ng-flutter.yml&#34;&gt;https://github.com/AgoraIO/agora_doc_source/blob/master/.github/workflows/python-app-ng-flutter.yml&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;6. &lt;a name=&#34;BetaAPI&#34;&gt;&lt;/a&gt;（Beta）API 原型自动填充&lt;/h2&gt; &#xA;&lt;p&gt;目前仅适用于大重构 SDK 封装的框架 SDK。如果有需求联系&amp;nbsp;&lt;a href=&#34;https://confluence.agoralab.co/display/~wanglu@agora.io&#34;&gt;wanglu&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;7. &lt;a name=&#34;WIPDITA&#34;&gt;&lt;/a&gt;（WIP）DITA 文件格式排版自动修正&lt;/h2&gt; &#xA;&lt;p&gt;无感知。你无需进行任何操作。&lt;/p&gt; &#xA;&lt;h2&gt;8. &lt;a name=&#34;WIPDITA-1&#34;&gt;&lt;/a&gt;（WIP）DITA 文件合规性检查&lt;/h2&gt; &#xA;&lt;p&gt;已经集成，待优化。&lt;/p&gt; &#xA;&lt;h2&gt;9. &lt;a name=&#34;DITAHTML&#34;&gt;&lt;/a&gt;DITA 文件自动在线构建 HTML 文档&lt;/h2&gt; &#xA;&lt;p&gt;GitHub action 对指定的发版分支进行监听，分支有 PR 或 push 时，自动运行文档生成脚本。&lt;/p&gt; &#xA;&lt;p&gt;如果需要添加新的文档用于自动构建，需要提供 scenario 文件。详见&amp;nbsp;&lt;a href=&#34;https://www.oxygenxml.com/doc/versions/24.1/ug-editor/topics/import-export-global-scenarios.html?hl=scenario%2Cfile&#34;&gt;https://www.oxygenxml.com/doc/versions/24.1/ug-editor/topics/import-export-global-scenarios.html?hl=scenario%2Cfile&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;9.1. &lt;a name=&#34;-1&#34;&gt;&lt;/a&gt;监听发版分支&lt;/h3&gt; &#xA;&lt;p&gt;监听的发版分支由以下文件决定：&lt;/p&gt; &#xA;&lt;h4&gt;9.1.1. &lt;a name=&#34;RTCSDK&#34;&gt;&lt;/a&gt;RTC 大重构 SDK&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/AgoraDoc/doc_source/raw/master/.github/workflows/AwesomeOxygenScriptforDITADocBuilding.yml&#34;&gt;https://github.com/AgoraDoc/doc_source/blob/master/.github/workflows/AwesomeOxygenScriptforDITADocBuilding.yml&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;如果需要更新监听分支，在文件中更新分支名即可。&lt;/p&gt; &#xA;&lt;h4&gt;9.1.2. &lt;a name=&#34;RTCSDK-1&#34;&gt;&lt;/a&gt;RTC 主版本 SDK&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/AgoraDoc/doc_source/raw/master/.github/workflows/AwesomeOxygenScriptforDITADocBuilding_CG.yml&#34;&gt;https://github.com/AgoraDoc/doc_source/blob/master/.github/workflows/AwesomeOxygenScriptforDITADocBuilding_CG.yml&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;如果需要更新监听分支，在文件中更新分支名即可。&lt;/p&gt; &#xA;&lt;h3&gt;9.2. &lt;a name=&#34;-1&#34;&gt;&lt;/a&gt;查看构建过程&lt;/h3&gt; &#xA;&lt;p&gt;在 GitHub Actions 页面，进入触发的 build workflow 中，即可查看构建报告：&lt;/p&gt; &#xA;&lt;p&gt;RTC 大重构 SDK：&lt;a href=&#34;https://github.com/AgoraDoc/doc_source/actions/workflows/AwesomeOxygenScriptforDITADocBuilding.yml&#34;&gt;https://github.com/AgoraDoc/doc_source/actions/workflows/AwesomeOxygenScriptforDITADocBuilding.yml&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;RTC 主版本 SDK：&lt;a href=&#34;https://github.com/AgoraDoc/doc_source/actions/workflows/AwesomeOxygenScriptforDITADocBuilding_CG.yml&#34;&gt;https://github.com/AgoraDoc/doc_source/actions/workflows/AwesomeOxygenScriptforDITADocBuilding_CG.yml&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;9.3. &lt;a name=&#34;-1&#34;&gt;&lt;/a&gt;获取压缩的文件包&lt;/h3&gt; &#xA;&lt;p&gt;在&amp;nbsp;&lt;a href=&#34;https://github.com/AgoraDoc/doc_source/releases/tag/main&#34;&gt;https://github.com/AgoraDoc/doc_source/releases/tag/main&lt;/a&gt;&amp;nbsp;页面获取最新的文件包。&lt;/p&gt;</summary>
  </entry>
</feed>