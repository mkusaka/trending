<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub XSLT Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-09T01:40:16Z</updated>
  <subtitle>Daily Trending of XSLT in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alfg/docker-nginx-rtmp</title>
    <updated>2022-10-09T01:40:16Z</updated>
    <id>tag:github.com,2022-10-09:/alfg/docker-nginx-rtmp</id>
    <link href="https://github.com/alfg/docker-nginx-rtmp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üêã A Dockerfile for nginx-rtmp-module + FFmpeg from source with basic settings for streaming HLS. Built on Alpine Linux.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;docker-nginx-rtmp&lt;/h1&gt; &#xA;&lt;p&gt;A Dockerfile installing NGINX, nginx-rtmp-module and FFmpeg from source with default settings for HLS live streaming. Built on Alpine Linux.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nginx 1.23.1 (Mainline version compiled from source)&lt;/li&gt; &#xA; &lt;li&gt;nginx-rtmp-module 1.2.2 (compiled from source)&lt;/li&gt; &#xA; &lt;li&gt;ffmpeg 5.1 (compiled from source)&lt;/li&gt; &#xA; &lt;li&gt;Default HLS settings (See: &lt;a href=&#34;https://raw.githubusercontent.com/alfg/docker-nginx-rtmp/master/nginx.conf&#34;&gt;nginx.conf&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/alfg/nginx-rtmp/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/stars/alfg/nginx-rtmp.svg?sanitize=true&#34; alt=&#34;Docker Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/alfg/nginx-rtmp/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/alfg/nginx-rtmp.svg?sanitize=true&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/alfg/nginx-rtmp/builds/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/automated/alfg/nginx-rtmp.svg?sanitize=true&#34; alt=&#34;Docker Automated build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/alfg/docker-nginx-rtmp&#34;&gt;&lt;img src=&#34;https://travis-ci.org/alfg/docker-nginx-rtmp.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Server&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pull docker image and run:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull alfg/nginx-rtmp&#xA;docker run -it -p 1935:1935 -p 8080:80 --rm alfg/nginx-rtmp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build and run container from source:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build -t nginx-rtmp .&#xA;docker run -it -p 1935:1935 -p 8080:80 --rm nginx-rtmp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stream live content to:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;rtmp://localhost:1935/stream/$STREAM_NAME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SSL&lt;/h3&gt; &#xA;&lt;p&gt;To enable SSL, see &lt;a href=&#34;https://raw.githubusercontent.com/alfg/docker-nginx-rtmp/master/nginx.conf&#34;&gt;nginx.conf&lt;/a&gt; and uncomment the lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;listen 443 ssl;&#xA;ssl_certificate     /opt/certs/example.com.crt;&#xA;ssl_certificate_key /opt/certs/example.com.key;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will enable HTTPS using a self-signed certificate supplied in &lt;a href=&#34;https://raw.githubusercontent.com/alfg/docker-nginx-rtmp/master/certs&#34;&gt;/certs&lt;/a&gt;. If you wish to use HTTPS, it is &lt;strong&gt;highly recommended&lt;/strong&gt; to obtain your own certificates and update the &lt;code&gt;ssl_certificate&lt;/code&gt; and &lt;code&gt;ssl_certificate_key&lt;/code&gt; paths.&lt;/p&gt; &#xA;&lt;p&gt;I recommend using &lt;a href=&#34;https://certbot.eff.org/docs/install.html&#34;&gt;Certbot&lt;/a&gt; from &lt;a href=&#34;https://letsencrypt.org&#34;&gt;Let&#39;s Encrypt&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Environment Variables&lt;/h3&gt; &#xA;&lt;p&gt;This Docker image uses &lt;code&gt;envsubst&lt;/code&gt; for environment variable substitution. You can define additional environment variables in &lt;code&gt;nginx.conf&lt;/code&gt; as &lt;code&gt;${var}&lt;/code&gt; and pass them in your &lt;code&gt;docker-compose&lt;/code&gt; file or &lt;code&gt;docker&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h3&gt;Custom &lt;code&gt;nginx.conf&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If you wish to use your own &lt;code&gt;nginx.conf&lt;/code&gt;, mount it as a volume in your &lt;code&gt;docker-compose&lt;/code&gt; or &lt;code&gt;docker&lt;/code&gt; command as &lt;code&gt;nginx.conf.template&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;volumes:&#xA;  - ./nginx.conf:/etc/nginx/nginx.conf.template&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;OBS Configuration&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stream Type: &lt;code&gt;Custom Streaming Server&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;URL: &lt;code&gt;rtmp://localhost:1935/stream&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Stream Key: &lt;code&gt;hello&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Watch Stream&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Load up the example hls.js player in your browser:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://localhost:8080/player.html?url=http://localhost:8080/live/hello.m3u8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Or in Safari, VLC or any HLS player, open:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://localhost:8080/live/$STREAM_NAME.m3u8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Example Playlist: &lt;code&gt;http://localhost:8080/live/hello.m3u8&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hls-js.netlify.app/demo/?src=http%3A%2F%2Flocalhost%3A8080%2Flive%2Fhello.m3u8&#34;&gt;HLS.js Player&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;FFplay: &lt;code&gt;ffplay -fflags nobuffer rtmp://localhost:1935/stream/hello&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;FFmpeg Build&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ffmpeg -buildconf&#xA;&#xA;ffmpeg version 4.4 Copyright (c) 2000-2021 the FFmpeg developers&#xA;  built with gcc 10.2.1 (Alpine 10.2.1_pre1) 20201203&#xA;  configuration: --prefix=/usr/local --enable-version3 --enable-gpl --enable-nonfree --enable-small --enable-libmp3lame --enable-libx264 --enable-libx265 --enable-libvpx --enable-libtheora --enable-libvorbis --enable-libopus --enable-libfdk-aac --enable-libass --enable-libwebp --enable-postproc --enable-avresample --enable-libfreetype --enable-openssl --disable-debug --disable-doc --disable-ffplay --extra-libs=&#39;-lpthread -lm&#39;&#xA;  libavutil      56. 70.100 / 56. 70.100&#xA;  libavcodec     58.134.100 / 58.134.100&#xA;  libavformat    58. 76.100 / 58. 76.100&#xA;  libavdevice    58. 13.100 / 58. 13.100&#xA;  libavfilter     7.110.100 /  7.110.100&#xA;  libavresample   4.  0.  0 /  4.  0.  0&#xA;  libswscale      5.  9.100 /  5.  9.100&#xA;  libswresample   3.  9.100 /  3.  9.100&#xA;  libpostproc    55.  9.100 / 55.  9.100&#xA;&#xA;  configuration:&#xA;    --prefix=/usr/local&#xA;    --enable-version3&#xA;    --enable-gpl&#xA;    --enable-nonfree&#xA;    --enable-small&#xA;    --enable-libmp3lame&#xA;    --enable-libx264&#xA;    --enable-libx265&#xA;    --enable-libvpx&#xA;    --enable-libtheora&#xA;    --enable-libvorbis&#xA;    --enable-libopus&#xA;    --enable-libfdk-aac&#xA;    --enable-libass&#xA;    --enable-libwebp&#xA;    --enable-postproc&#xA;    --enable-avresample&#xA;    --enable-libfreetype&#xA;    --enable-openssl&#xA;    --disable-debug&#xA;    --disable-doc&#xA;    --disable-ffplay&#xA;    --extra-libs=&#39;-lpthread -lm&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;FFmpeg Hardware Acceleration&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;code&gt;Dockerfile.cuda&lt;/code&gt; image is available to enable FFmpeg hardware acceleration via the &lt;a href=&#34;https://trac.ffmpeg.org/wiki/HWAccelIntro#CUDANVENCNVDEC&#34;&gt;NVIDIA&#39;s CUDA&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Use the tag: &lt;code&gt;alfg/nginx-rtmp:cuda&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -it -p 1935:1935 -p 8080:80 --rm alfg/nginx-rtmp:cuda&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You must have a supported platform and driver to run this image.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NVIDIA/nvidia-docker&#34;&gt;https://github.com/NVIDIA/nvidia-docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#docker&#34;&gt;https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/docker-for-windows/wsl/&#34;&gt;https://docs.docker.com/docker-for-windows/wsl/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://trac.ffmpeg.org/wiki/HWAccelIntro#CUDANVENCNVDEC&#34;&gt;https://trac.ffmpeg.org/wiki/HWAccelIntro#CUDANVENCNVDEC&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*&lt;em&gt;This image is experimental!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://alpinelinux.org/&#34;&gt;https://alpinelinux.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://nginx.org&#34;&gt;http://nginx.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/arut/nginx-rtmp-module&#34;&gt;https://github.com/arut/nginx-rtmp-module&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ffmpeg.org&#34;&gt;https://www.ffmpeg.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://obsproject.com&#34;&gt;https://obsproject.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>