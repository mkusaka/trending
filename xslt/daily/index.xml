<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub XSLT Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-10T01:48:45Z</updated>
  <subtitle>Daily Trending of XSLT in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>radicallyopensecurity/pentext</title>
    <updated>2023-04-10T01:48:45Z</updated>
    <id>tag:github.com,2023-04-10:/radicallyopensecurity/pentext</id>
    <link href="https://github.com/radicallyopensecurity/pentext" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PenText system: Easily create beautifully looking penetration test quotes, reports, and documents in many formats (PDF, text, JSON, CSV, ...)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PenText&lt;/h1&gt; &#xA;&lt;p&gt;The PenText XML documentation project is a collection of XML templates, XML schemas and XSLT code, which combined provide an easy way to generate IT security documents including test reports (for penetration tests, load tests, code audits, etc), offers (to companies requesting these tests), and invoices.&lt;/p&gt; &#xA;&lt;h3&gt;How it Works&lt;/h3&gt; &#xA;&lt;p&gt;The OWASP PenText project is based on XML. A PenText Report, Quote, Invoice or Generic Document is in fact a (modular) XML document, conforming to an XML Schema. The XML Schema ensures that the documents are structured correctly, so that they can then be transformed into other formats like PDF, CSV and JSON using XSLT and the SAXON XSLT processor.&lt;/p&gt; &#xA;&lt;p&gt;To produce a PDF document, the report, offer, invoice or generic document XML is first transformed into XSL-FO (XSL Formatting Objects), which is then converted to PDF using Apache FOP.&lt;/p&gt; &#xA;&lt;p&gt;It is also possible to export e.g. all findings of a report to JSON, XML or plaintext format.&lt;/p&gt; &#xA;&lt;h3&gt;The Structure&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The framework itself consists of files in the &lt;code&gt;dtd&lt;/code&gt; and &lt;code&gt;xslt&lt;/code&gt; directory&lt;/li&gt; &#xA; &lt;li&gt;A report or quote will go into &lt;code&gt;source&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Graphics, including screenshots and e.g. a company logo, will go into &lt;code&gt;graphics&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Findings and non-findings of penetration test reports can go into &lt;code&gt;findings&lt;/code&gt; and &lt;code&gt;non-findings&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;What do you need ?&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone this repository&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the toolchain&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Edit the content&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Listo! That&#39;s all you need. Now you can build PDF reports using the content.&lt;/p&gt; &#xA;&lt;h3&gt;Toolchain&lt;/h3&gt; &#xA;&lt;p&gt;To convert the XML content into PDF files the tools the &lt;em&gt;Apache FOP&lt;/em&gt; library and the &lt;em&gt;Java&lt;/em&gt; library &lt;em&gt;Saxon&lt;/em&gt; will be used. A separate repository will contain these tools on a handy Docker container.&lt;/p&gt; &#xA;&lt;p&gt;To edit (and view) the content you&#39;ll need a XML editor - which could be any text editor like &lt;em&gt;JEdit&lt;/em&gt;, to a full IDE- for editing of course ;). Preferably something that can check XML file validity. To view the resulting PDF files a PDF viewer is necessary.&lt;/p&gt; &#xA;&lt;h3&gt;Building PDFs&lt;/h3&gt; &#xA;&lt;p&gt;Manually compiling a quotation, report or other document can be done using the supplied Makefile:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;make report&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This performs &lt;code&gt;java -jar path-to-Saxon-jar -s:name-of-xml-file -xsl:name-of-xsl-file-in-xsl-directory -o:name-for-pdf-output&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;See for more detailed information the &lt;a href=&#34;https://raw.githubusercontent.com/radicallyopensecurity/pentext/master/doc/tools-manual.md&#34;&gt;tools manual&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Building CSVs&lt;/h3&gt; &#xA;&lt;p&gt;To export all findings as CSV file run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make export-csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will output all columns as separate fields as well as a &#34;Jira Formatted Description&#34; field that can be used in Jira.&lt;/p&gt; &#xA;&lt;h4&gt;Building CSVs using CI/CD&lt;/h4&gt; &#xA;&lt;p&gt;Copy over the latest &lt;code&gt;xslt/findings2csv&lt;/code&gt; to your project.&lt;/p&gt; &#xA;&lt;p&gt;Make sure the build step in &lt;code&gt;gitlab-ci.yml&lt;/code&gt; saves &lt;code&gt;.csv&lt;/code&gt; files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;build:&#xA;  tags:&#xA;    - docbuilder&#xA;  stage: build&#xA;  script:&#xA;    - echo &#34;Building documents!&#34;&#xA;  artifacts:&#xA;    paths:&#xA;      - target/*.pdf&#xA;      - target/*.csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;CSVs will now be generated alongside every PDF.&lt;/p&gt; &#xA;&lt;h2&gt;Adding and Modifying Content&lt;/h2&gt; &#xA;&lt;h3&gt;Guidelines&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There is a guide for &lt;a href=&#34;https://raw.githubusercontent.com/radicallyopensecurity/pentext/master/doc/report/Report%20Writing%20-%20Procedure.md&#34;&gt;report writing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;There is also a guide for &lt;a href=&#34;https://raw.githubusercontent.com/radicallyopensecurity/pentext/master/doc/offerte/Offerte%20Writing%20Procedure.md&#34;&gt;quotation writing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example documents&lt;/h3&gt; &#xA;&lt;p&gt;Besides the reports and quotations, generic documents can also be created. Those can be found &lt;a href=&#34;https://raw.githubusercontent.com/radicallyopensecurity/pentext/master/doc/examples&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Important note&lt;/h2&gt; &#xA;&lt;p&gt;From version 2.0 onwards, the structure of the PenText repository has been simplified. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/radicallyopensecurity/pentext/master/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>symphonycms/getsymphony-html</title>
    <updated>2023-04-10T01:48:45Z</updated>
    <id>tag:github.com,2023-04-10:/symphonycms/getsymphony-html</id>
    <link href="https://github.com/symphonycms/getsymphony-html" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Symphony Community Site - HTML Templates&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Symphony Community Site&lt;/h1&gt; &#xA;&lt;h2&gt;HTML Templates&lt;/h2&gt; &#xA;&lt;p&gt;This markup library contains the XML, XSLT and HTML used to build the templates for the Symphony community site. It is being maintained as a &lt;a href=&#34;https://github.com/bauhouse/getsymphony-html&#34;&gt;Git repository on GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Preprocessing HTML&lt;/h3&gt; &#xA;&lt;p&gt;XSLT is being used as a preprocessor (using xsltproc) to output valid, well-formed XHTML structure. This process of static site generation should be easy to manage on any Unix-based system (Mac, Linux) without having to install any software. On Windows, install xsltproc.&lt;/p&gt; &#xA;&lt;p&gt;To process HTML, run the &lt;code&gt;./build&lt;/code&gt; script in the same directory as this README file.&lt;/p&gt; &#xA;&lt;p&gt;To process individual files, open the &lt;code&gt;workspace/build&lt;/code&gt; file and find the xsltproc command referring to the HTML file you would like to process and run the command.&lt;/p&gt; &#xA;&lt;h3&gt;Design Templates&lt;/h3&gt; &#xA;&lt;p&gt;The page layouts can be viewed in a browser at the following URLs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://symphonycms.github.com/getsymphony-html/network/&#34;&gt;http://symphonycms.github.com/getsymphony-html/network/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://symphonycms.github.com/getsymphony-html/&#34;&gt;http://symphonycms.github.com/getsymphony-html/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://symphonycms.github.com/getsymphony-html/stream/&#34;&gt;http://symphonycms.github.com/getsymphony-html/stream/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://symphonycms.github.com/getsymphony-html/discussions/&#34;&gt;http://symphonycms.github.com/getsymphony-html/discussions/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://symphonycms.github.com/getsymphony-html/discussions/post/&#34;&gt;http://symphonycms.github.com/getsymphony-html/discussions/post/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://symphonycms.github.com/getsymphony-html/questions/&#34;&gt;http://symphonycms.github.com/getsymphony-html/questions/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://symphonycms.github.com/getsymphony-html/blog/&#34;&gt;http://symphonycms.github.com/getsymphony-html/blog/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://symphonycms.github.com/getsymphony-html/showcase/&#34;&gt;http://symphonycms.github.com/getsymphony-html/showcase/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://symphonycms.github.com/getsymphony-html/events/&#34;&gt;http://symphonycms.github.com/getsymphony-html/events/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://symphonycms.github.com/getsymphony-html/about/&#34;&gt;http://symphonycms.github.com/getsymphony-html/about/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://symphonycms.github.com/getsymphony-html/docs/&#34;&gt;http://symphonycms.github.com/getsymphony-html/docs/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://symphonycms.github.com/getsymphony-html/docs/guides/&#34;&gt;http://symphonycms.github.com/getsymphony-html/docs/guides/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://symphonycms.github.com/getsymphony-html/docs/tutorials/&#34;&gt;http://symphonycms.github.com/getsymphony-html/docs/tutorials/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://symphonycms.github.com/getsymphony-html/docs/articles/&#34;&gt;http://symphonycms.github.com/getsymphony-html/docs/articles/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://symphonycms.github.com/getsymphony-html/docs/concepts/&#34;&gt;http://symphonycms.github.com/getsymphony-html/docs/concepts/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://symphonycms.github.com/getsymphony-html/docs/faq/&#34;&gt;http://symphonycms.github.com/getsymphony-html/docs/faq/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://symphonycms.github.com/getsymphony-html/docs/api/&#34;&gt;http://symphonycms.github.com/getsymphony-html/docs/api/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://symphonycms.github.com/getsymphony-html/ext/&#34;&gt;http://symphonycms.github.com/getsymphony-html/ext/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://symphonycms.github.com/getsymphony-html/ext/extensions/&#34;&gt;http://symphonycms.github.com/getsymphony-html/ext/extensions/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://symphonycms.github.com/getsymphony-html/ext/matrix/&#34;&gt;http://symphonycms.github.com/getsymphony-html/ext/matrix/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://symphonycms.github.com/getsymphony-html/ninjas/&#34;&gt;http://symphonycms.github.com/getsymphony-html/ninjas/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://symphonycms.github.com/getsymphony-html/ninjas/interviews/&#34;&gt;http://symphonycms.github.com/getsymphony-html/ninjas/interviews/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://symphonycms.github.com/getsymphony-html/ninjas/directory/&#34;&gt;http://symphonycms.github.com/getsymphony-html/ninjas/directory/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://symphonycms.github.com/getsymphony-html/ninjas/about/&#34;&gt;http://symphonycms.github.com/getsymphony-html/ninjas/about/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://symphonycms.github.com/getsymphony-html/xpathr/&#34;&gt;http://symphonycms.github.com/getsymphony-html/xpathr/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://symphonycms.github.com/getsymphony-html/xpathr/popular/&#34;&gt;http://symphonycms.github.com/getsymphony-html/xpathr/popular/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://symphonycms.github.com/getsymphony-html/xpathr/recent/&#34;&gt;http://symphonycms.github.com/getsymphony-html/xpathr/recent/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://symphonycms.github.com/getsymphony-html/xpathr/categories/&#34;&gt;http://symphonycms.github.com/getsymphony-html/xpathr/categories/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://symphonycms.github.com/getsymphony-html/xpathr/contributors/&#34;&gt;http://symphonycms.github.com/getsymphony-html/xpathr/contributors/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>