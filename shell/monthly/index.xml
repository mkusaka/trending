<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-01T01:49:28Z</updated>
  <subtitle>Monthly Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Wooder/ios_17_required_reason_api_scanner</title>
    <updated>2024-05-01T01:49:28Z</updated>
    <id>tag:github.com,2024-05-01:/Wooder/ios_17_required_reason_api_scanner</id>
    <link href="https://github.com/Wooder/ios_17_required_reason_api_scanner" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple shell script collection to scan your Xcode Swift project for required reason API usage to ensure privacy compliance and to simplify the creation of privacy manifests.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Scanners for possible use of &#34;iOS required reason API&#34;.&lt;/h1&gt; &#xA;&lt;h2&gt;Text-based scanner&lt;/h2&gt; &#xA;&lt;p&gt;The scan is very rudimentary and based on comparing strings, but should be very helpful for a first analysis.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://developer.apple.com/documentation/bundleresources/privacy_manifest_files/describing_use_of_required_reason_api&#34;&gt;https://developer.apple.com/documentation/bundleresources/privacy_manifest_files/describing_use_of_required_reason_api&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sh required_reason_api_text_scanner.sh {directory_name}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example Output:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Found potentially required reason API usage &#39;UserDefaults&#39; in &#39;./ViewController.swift&#39; Line numbers: 28&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;See the following medium post for more details: &lt;a href=&#34;https://jochen-holzer.medium.com/embrace-the-evolution-preparing-your-ios-app-for-the-required-reason-api-38f2d12bbce5?source=friends_link&amp;amp;sk=d146c22f3e18c6551231f4b55c934b05&#34;&gt;https://jochen-holzer.medium.com/embrace-the-evolution-preparing-your-ios-app-for-the-required-reason-api-38f2d12bbce5?source=friends_link&amp;amp;sk=d146c22f3e18c6551231f4b55c934b05&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Faster ripgrep-based text scanner&lt;/h2&gt; &#xA;&lt;p&gt;This scan should produce similar results to the text-based scanner, but using &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;&lt;code&gt;ripgrep&lt;/code&gt;&lt;/a&gt; for faster results, particularly useful for medium to large repositories - where the text scanner will take several minutes to complete, this scanner should still complete in a matter of seconds.&lt;/p&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;p&gt;With &lt;code&gt;ripgrep&lt;/code&gt; installed, e.g. &lt;code&gt;brew install ripgrep&lt;/code&gt;,&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sh ripgrep_required_reason_api_text_scanner.sh {directory_name}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Output displays in the standard format of &lt;code&gt;grep&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Binary-based scanner&lt;/h2&gt; &#xA;&lt;p&gt;This scanner looks for symbols in the binaries in DerivedData folder using &lt;code&gt;nm&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It will find the &lt;code&gt;.app&lt;/code&gt;, &lt;code&gt;.framework&lt;/code&gt; and &lt;code&gt;.a&lt;/code&gt; binaries. Keep in mind that the symbols found in the app (&lt;code&gt;.app&lt;/code&gt;) will be duplicated from the ones found in the static libraries &lt;code&gt;.a&lt;/code&gt; since they are statically linked.&lt;/p&gt; &#xA;&lt;p&gt;Usage: &lt;code&gt;sh required_reason_api_binary_scanner.sh {directory}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sh required_reason_api_scanner_binary.sh \&#xA;~/Library/Developer/Xcode/DerivedData/DemoSymbols-aymfeypsyhqwfuaieijkrqdeohcd/Build/Products/Debug-iphonesimulator&#xA;&#xA;&amp;gt; Analyzing binaries: ./DemoSymbols.app/DemoSymbols&#xA;&amp;gt; ---&#xA;&amp;gt; Used symbols in binary ./DemoSymbols.app/DemoSymbols: activeInputModes, fgetattrlist, fstat, fstatat, fstatfs, fstatvfs, getattrlist, getattrlistat, getattrlistbulk, lstat, mach_absolute_time, NSFileCreationDate, NSFileModificationDate, NSFileSystemFreeSize, NSFileSystemSize, NSURLContentModificationDateKey, NSURLCreationDateKey, NSURLVolumeAvailableCapacityForImportantUsageKey, NSURLVolumeAvailableCapacityForOpportunisticUsageKey, NSURLVolumeAvailableCapacityKey, NSURLVolumeTotalCapacityKey, NSUserDefaults, stat, statfs, statvfs, systemUptime&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example project&lt;/h2&gt; &#xA;&lt;p&gt;In the directory &lt;code&gt;DemoSymbols&lt;/code&gt; you will find a project that uses all the code that Apple asks for a required reason.&lt;/p&gt; &#xA;&lt;p&gt;It is used to test these scanners.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>wnlen/clash-for-linux</title>
    <updated>2024-05-01T01:49:28Z</updated>
    <id>tag:github.com,2024-05-01:/wnlen/clash-for-linux</id>
    <link href="https://github.com/wnlen/clash-for-linux" rel="alternate"></link>
    <summary type="html">&lt;p&gt;clash-for-linux&lt;/p&gt;&lt;hr&gt;&lt;p&gt;[TOC]&lt;/p&gt; &#xA;&lt;h1&gt;项目介绍&lt;/h1&gt; &#xA;&lt;p&gt;此项目是通过使用开源项目&lt;a href=&#34;https://github.com/Dreamacro/clash&#34;&gt;clash&lt;/a&gt;作为核心程序，再结合脚本实现简单的代理功能。&lt;/p&gt; &#xA;&lt;p&gt;主要是为了解决我们在服务器上下载GitHub等一些国外资源速度慢的问题。&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;使用须知&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;运行本项目建议使用root用户，或者使用 sudo 提权。&lt;/li&gt; &#xA; &lt;li&gt;使用过程中如遇到问题，请优先查已有的 &lt;a href=&#34;https://github.com/wanhebin/clash-for-linux/issues&#34;&gt;issues&lt;/a&gt;。&lt;/li&gt; &#xA; &lt;li&gt;在进行issues提交前，请替换提交内容中是敏感信息（例如：订阅地址）。&lt;/li&gt; &#xA; &lt;li&gt;本项目是基于 &lt;a href=&#34;https://github.com/Dreamacro/clash&#34;&gt;clash&lt;/a&gt; 、&lt;a href=&#34;https://github.com/haishanh/yacd&#34;&gt;yacd&lt;/a&gt; 进行的配置整合，关于clash、yacd的详细配置请去原项目查看。&lt;/li&gt; &#xA; &lt;li&gt;此项目不提供任何订阅信息，请自行准备Clash订阅地址。&lt;/li&gt; &#xA; &lt;li&gt;运行前请手动更改&lt;code&gt;.env&lt;/code&gt;文件中的&lt;code&gt;CLASH_URL&lt;/code&gt;变量值，否则无法正常运行。&lt;/li&gt; &#xA; &lt;li&gt;当前在RHEL系列和Debian系列Linux系统中测试过，其他系列可能需要适当修改脚本。&lt;/li&gt; &#xA; &lt;li&gt;支持 x86_64/aarch64 平台&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：当你在使用此项目时，遇到任何无法独自解决的问题请优先前往 &lt;a href=&#34;https://github.com/wanhebin/clash-for-linux/issues&#34;&gt;Issues&lt;/a&gt; 寻找解决方法。由于空闲时间有限，后续将不再对Issues中 “已经解答”、“已有解决方案” 的问题进行重复性的回答。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;使用教程&lt;/h1&gt; &#xA;&lt;h2&gt;下载项目&lt;/h2&gt; &#xA;&lt;p&gt;下载项目&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/wanhebin/clash-for-linux.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;进入到项目目录，编辑&lt;code&gt;.env&lt;/code&gt;文件，修改变量&lt;code&gt;CLASH_URL&lt;/code&gt;的值。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd clash-for-linux&#xA;$ vim .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; &lt;code&gt;.env&lt;/code&gt; 文件中的变量 &lt;code&gt;CLASH_SECRET&lt;/code&gt; 为自定义 Clash Secret，值为空时，脚本将自动生成随机字符串。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;启动程序&lt;/h2&gt; &#xA;&lt;p&gt;直接运行脚本文件&lt;code&gt;start.sh&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;进入项目目录&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd clash-for-linux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;运行启动脚本&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo bash start.sh&#xA;&#xA;正在检测订阅地址...&#xA;Clash订阅地址可访问！                                      [  OK  ]&#xA;&#xA;正在下载Clash配置文件...&#xA;配置文件config.yaml下载成功！                              [  OK  ]&#xA;&#xA;正在启动Clash服务...&#xA;服务启动成功！                                             [  OK  ]&#xA;&#xA;Clash Dashboard 访问地址：http://&amp;lt;ip&amp;gt;:9090/ui&#xA;Secret：xxxxxxxxxxxxx&#xA;&#xA;请执行以下命令加载环境变量: source /etc/profile.d/clash.sh&#xA;&#xA;请执行以下命令开启系统代理: proxy_on&#xA;&#xA;若要临时关闭系统代理，请执行: proxy_off&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ source /etc/profile.d/clash.sh&#xA;$ proxy_on&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;检查服务端口&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ netstat -tln | grep -E &#39;9090|789.&#39;&#xA;tcp        0      0 127.0.0.1:9090          0.0.0.0:*               LISTEN     &#xA;tcp6       0      0 :::7890                 :::*                    LISTEN     &#xA;tcp6       0      0 :::7891                 :::*                    LISTEN     &#xA;tcp6       0      0 :::7892                 :::*                    LISTEN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;检查环境变量&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ env | grep -E &#39;http_proxy|https_proxy&#39;&#xA;http_proxy=http://127.0.0.1:7890&#xA;https_proxy=http://127.0.0.1:7890&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;以上步鄹如果正常，说明服务clash程序启动成功，现在就可以体验高速下载github资源了。&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;重启程序&lt;/h2&gt; &#xA;&lt;p&gt;如果需要对Clash配置进行修改，请修改 &lt;code&gt;conf/config.yaml&lt;/code&gt; 文件。然后运行 &lt;code&gt;restart.sh&lt;/code&gt; 脚本进行重启。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 重启脚本 &lt;code&gt;restart.sh&lt;/code&gt; 不会更新订阅信息。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;停止程序&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;进入项目目录&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd clash-for-linux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;关闭服务&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo bash shutdown.sh&#xA;&#xA;服务关闭成功，请执行以下命令关闭系统代理：proxy_off&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ proxy_off&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;然后检查程序端口、进程以及环境变量&lt;code&gt;http_proxy|https_proxy&lt;/code&gt;，若都没则说明服务正常关闭。&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Clash Dashboard&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;访问 Clash Dashboard&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;通过浏览器访问 &lt;code&gt;start.sh&lt;/code&gt; 执行成功后输出的地址，例如：&lt;a href=&#34;http://192.168.0.1:9090/ui&#34;&gt;http://192.168.0.1:9090/ui&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;登录管理界面&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;在&lt;code&gt;API Base URL&lt;/code&gt;一栏中输入：http://&amp;lt;ip&amp;gt;:9090 ，在&lt;code&gt;Secret(optional)&lt;/code&gt;一栏中输入启动成功后输出的Secret。&lt;/p&gt; &#xA;&lt;p&gt;点击Add并选择刚刚输入的管理界面地址，之后便可在浏览器上进行一些配置。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;更多教程&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;此 Clash Dashboard 使用的是&lt;a href=&#34;https://github.com/haishanh/yacd&#34;&gt;yacd&lt;/a&gt;项目，详细使用方法请移步到yacd上查询。&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;常见问题&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;部分Linux系统默认的 shell &lt;code&gt;/bin/sh&lt;/code&gt; 被更改为 &lt;code&gt;dash&lt;/code&gt;，运行脚本会出现报错（报错内容一般会有 &lt;code&gt;-en [ OK ]&lt;/code&gt;）。建议使用 &lt;code&gt;bash xxx.sh&lt;/code&gt; 运行脚本。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;部分用户在UI界面找不到代理节点，基本上是因为厂商提供的clash配置文件是经过base64编码的，且配置文件格式不符合clash配置标准。&lt;/p&gt; &lt;p&gt;目前此项目已集成自动识别和转换clash配置文件的功能。如果依然无法使用，则需要通过自建或者第三方平台（不推荐，有泄露风险）对订阅地址转换。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;程序日志中出现&lt;code&gt;error: unsupported rule type RULE-SET&lt;/code&gt;报错，解决方法查看官方&lt;a href=&#34;https://github.com/Dreamacro/clash/wiki/FAQ#error-unsupported-rule-type-rule-set&#34;&gt;WIKI&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>luchina-gabriel/OSX-PROXMOX</title>
    <updated>2024-05-01T01:49:28Z</updated>
    <id>tag:github.com,2024-05-01:/luchina-gabriel/OSX-PROXMOX</id>
    <link href="https://github.com/luchina-gabriel/OSX-PROXMOX" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Voilà, install macOS on ANY Computer! This is really and magic easiest way!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OSX-PROXMOX - Run macOS on ANY Computer - AMD &amp;amp; Intel&lt;/h1&gt; &#xA;&lt;p&gt;Install &lt;code&gt;** FRESH/CLEAN **&lt;/code&gt; Proxmox VE v7.0.XX ~ 8.2.XX - Next, Next &amp;amp; Finish (NNF).&lt;/p&gt; &#xA;&lt;p&gt;Open Proxmox Web Console -&amp;gt; Datacenter &amp;gt; NAME OF YOUR HOST &amp;gt; Shell.&lt;/p&gt; &#xA;&lt;p&gt;Copy, paste and execute (code below).&lt;/p&gt; &#xA;&lt;p&gt;Voilà, install macOS! This is really and magic &lt;strong&gt;easiest way&lt;/strong&gt;! &lt;img src=&#34;https://github.com/luchina-gabriel/OSX-PROXMOX/assets/23700365/c86c53f9-cc05-459a-b8dc-b81d90d8ee73&#34; alt=&#34;overview&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;COPY &amp;amp; PASTE - in shell of Proxmox (for Install or Update this solution)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;/bin/bash -c &#34;$(curl -fsSL https://install.osx-proxmox.com)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;For install EFI Package in macOS, first disable Gatekeeper&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo spctl --master-disable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Versions of macOS Supported&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macOS High Sierra - 10.13&lt;/li&gt; &#xA; &lt;li&gt;macOS Mojave - 10.14&lt;/li&gt; &#xA; &lt;li&gt;macOS Catalina - 10.15&lt;/li&gt; &#xA; &lt;li&gt;macOS Big Sur - 11&lt;/li&gt; &#xA; &lt;li&gt;macOS Monterey - 12&lt;/li&gt; &#xA; &lt;li&gt;macOS Ventura - 13&lt;/li&gt; &#xA; &lt;li&gt;macOS Sonoma - 14&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Versions of Proxmox VE Supported&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;v7.0.XX ~ 8.2.XX&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Opencore version&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;March/2024 - 0.9.9 with SIP Enabled, DMG only signed by Apple and all features of securities.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Cloud Support (Yes, install your Hackintosh in Cloud Environment)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.vultr.com/?ref=9035565-8H&#34;&gt;VultR&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/8QsMyL-PNrM&#34;&gt;Vídeo/Tutorial&lt;/a&gt;, please activate captions!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FOR DEV/STUDENT/TEST ONLY PURPOSES.&lt;/li&gt; &#xA; &lt;li&gt;I&#39;m not responsible for any problem and/or equipment damage or loss of files.&lt;/li&gt; &#xA; &lt;li&gt;Always back up everything before any changes to your computer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demonstration (in Portuguese/Brazil)&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/dil6iRWiun0&#34;&gt;https://youtu.be/dil6iRWiun0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;* Please use CC with Auto Translate to English for your convenience.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Opencore/Acidanthera Team&lt;/li&gt; &#xA; &lt;li&gt;Corpnewt for Applications (ProperTree, genSMBIOS, etc)&lt;/li&gt; &#xA; &lt;li&gt;Apple for macOS&lt;/li&gt; &#xA; &lt;li&gt;Proxmox - Excelent and better documentation for Virtualization&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Discord - Universo Hackintosh&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.universohackintosh.com.br&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>