<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-01T01:49:56Z</updated>
  <subtitle>Monthly Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>aaddrick/claude-desktop-debian</title>
    <updated>2025-05-01T01:49:56Z</updated>
    <id>tag:github.com,2025-05-01:/aaddrick/claude-desktop-debian</id>
    <link href="https://github.com/aaddrick/claude-desktop-debian" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Claude Desktop for Debian-based Linux distributions&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Release Workflow &amp;amp; Feedback&lt;/h2&gt; &#xA;&lt;p&gt;This repository now uses a GitHub Actions workflow to automatically build and release &lt;code&gt;.deb&lt;/code&gt; and &lt;code&gt;.AppImage&lt;/code&gt; packages when a tag following the format &lt;code&gt;v&amp;lt;wrapper_version&amp;gt;+claude&amp;lt;claude_version&amp;gt;&lt;/code&gt; (e.g., &lt;code&gt;v1.0.0+claude0.9.1&lt;/code&gt;) is pushed.&lt;/p&gt; &#xA;&lt;p&gt;Please check the &lt;a href=&#34;https://github.com/aaddrick/claude-desktop-debian/releases&#34;&gt;Releases page&lt;/a&gt; for the latest builds. Feedback on the packages and the build process is greatly appreciated! Please open an issue if you encounter any problems.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Arch Linux users:&lt;/strong&gt; For the PKGBUILD and Arch-specific instructions: &lt;a href=&#34;https://github.com/aaddrick/claude-desktop-arch&#34;&gt;https://github.com/aaddrick/claude-desktop-arch&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The build script now uses command-line flags to select the output format and cleanup behavior.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;THIS IS AN UNOFFICIAL BUILD SCRIPT FOR DEBIAN/UBUNTU BASED SYSTEMS (produces .deb or .AppImage)!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you run into an issue with this build script, make an issue here. Don&#39;t bug Anthropic about it - they already have enough on their plates.&lt;/p&gt; &#xA;&lt;h1&gt;Claude Desktop for Linux&lt;/h1&gt; &#xA;&lt;p&gt;This project was inspired by &lt;a href=&#34;https://github.com/k3d3/claude-desktop-linux-flake&#34;&gt;k3d3&#39;s claude-desktop-linux-flake&lt;/a&gt; and their &lt;a href=&#34;https://www.reddit.com/r/ClaudeAI/comments/1hgsmpq/i_successfully_ran_claude_desktop_natively_on/&#34;&gt;Reddit post&lt;/a&gt; about running Claude Desktop natively on Linux. Their work provided valuable insights into the application&#39;s structure and the native bindings implementation.&lt;/p&gt; &#xA;&lt;p&gt;Supports MCP!&lt;/p&gt; &#xA;&lt;p&gt;Location of the MCP-configuration file is: &lt;code&gt;~/.config/Claude/claude_desktop_config.json&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/93080028-6f71-48bd-8e59-5149d148cd45&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Supports the Ctrl+Alt+Space popup! &lt;img src=&#34;https://github.com/user-attachments/assets/1deb4604-4c06-4e4b-b63f-7f6ef9ef28c1&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Supports the Tray menu! (Screenshot of running on KDE) &lt;img src=&#34;https://github.com/user-attachments/assets/ba209824-8afb-437c-a944-b53fd9ecd559&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Building &amp;amp; Installation (Debian/Ubuntu based)&lt;/h1&gt; &#xA;&lt;p&gt;For Debian-based distributions (Debian, Ubuntu, Linux Mint, MX Linux, etc.), you can build Claude Desktop using the provided build script. Use command-line flags to specify the desired output format (&lt;code&gt;.deb&lt;/code&gt; or &lt;code&gt;.AppImage&lt;/code&gt;) and whether to clean up intermediate build files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Clone this repository&#xA;git clone https://github.com/aaddrick/claude-desktop-debian.git&#xA;cd claude-desktop-debian&#xA;&#xA;# Build the package (Defaults to .deb and cleans build files)&#xA;./build.sh&#xA;&#xA;# Example: Build an AppImage and keep intermediate files&#xA;./build.sh --build appimage --clean no&#xA;&#xA;# Example: Build a .deb (explicitly) and clean intermediate files (default)&#xA;./build.sh --build deb --clean yes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The script will automatically:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check for and install required dependencies&lt;/li&gt; &#xA; &lt;li&gt;Download and extract resources from the Windows version&lt;/li&gt; &#xA; &lt;li&gt;Create a proper Debian package or AppImage&lt;/li&gt; &#xA; &lt;li&gt;Perform the build steps based on selected flags&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;After Building:&lt;/h2&gt; &#xA;&lt;h3&gt;If you chose Debian Package (.deb):&lt;/h3&gt; &#xA;&lt;p&gt;The script will output the path to the generated &lt;code&gt;.deb&lt;/code&gt; file (e.g., &lt;code&gt;claude-desktop_0.9.1_amd64.deb&lt;/code&gt;). Install it using &lt;code&gt;dpkg&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Replace VERSION and ARCHITECTURE with the actual values from the filename&#xA;sudo dpkg -i ./claude-desktop_VERSION_ARCHITECTURE.deb &#xA;&#xA;# If you encounter dependency issues, run:&#xA;sudo apt --fix-broken install &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;If you chose AppImage (.AppImage):&lt;/h3&gt; &#xA;&lt;p&gt;The script will output the path to the generated &lt;code&gt;.AppImage&lt;/code&gt; file (e.g., &lt;code&gt;claude-desktop-0.9.1-amd64.AppImage&lt;/code&gt;) and a corresponding &lt;code&gt;.desktop&lt;/code&gt; file (&lt;code&gt;claude-desktop-appimage.desktop&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;AppImage login will not work unless you setup the .desktop file correctly or use a tool like AppImageLauncher to manage it for you.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Make the AppImage executable:&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Replace FILENAME with the actual AppImage filename&#xA;chmod +x ./FILENAME.AppImage &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Run the AppImage:&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./FILENAME.AppImage&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;(Optional) Integrate with your system:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Tools like &lt;a href=&#34;https://github.com/TheAssassin/AppImageLauncher&#34;&gt;AppImageLauncher&lt;/a&gt; can automatically integrate AppImages (moving them to a central location and adding them to your application menu) using the bundled &lt;code&gt;.desktop&lt;/code&gt; file.&lt;/li&gt; &#xA;   &lt;li&gt;Alternatively, you can manually move the &lt;code&gt;.AppImage&lt;/code&gt; file to a preferred location (e.g., &lt;code&gt;~/Applications&lt;/code&gt; or &lt;code&gt;/opt&lt;/code&gt;) and copy the generated &lt;code&gt;claude-desktop-appimage.desktop&lt;/code&gt; file to &lt;code&gt;~/.local/share/applications/&lt;/code&gt; (you might need to edit the &lt;code&gt;Exec=&lt;/code&gt; line in the &lt;code&gt;.desktop&lt;/code&gt; file to point to the new location of the AppImage).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;--no-sandbox&lt;/h4&gt; &#xA;&lt;p&gt;The AppImage script runs with electron&#39;s --no-sandbox flag. AppImage&#39;s don&#39;t have their own sandbox. chome-sandbox, which is used by electron, needs to escalate root privileges briefly in order to setup the sandbox. When you pack an AppImage, chrome-sandbox loses any assigned ownership and executes with user permissions. There&#39;s also an issue with &lt;a href=&#34;https://www.reddit.com/r/debian/comments/hkyeft/comment/fww5xb1&#34;&gt;unprivileged namespaces&lt;/a&gt; being set differently on different distributions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternatives to --no-sandbox&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run claude-desktop as root &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Doesn&#39;t feel warm and fuzzy.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install chrome-sandbox outside of the AppImage(or leverage an existing install), set it with the right permissions, and reference it. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Counter-intuitive to the &#34;batteries included&#34; mindset of AppImages&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run it with --no-sandbox, but then wrap the whole thing inside another sandbox like bubblewrap &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Not &#34;batteries included&#34;, and configuring in such a way that it runs everywhere is beyond my immediate capabilities.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I&#39;d love a better suggestion. Feel free to submit a PR or start a discussion if I missed something obvious.&lt;/p&gt; &#xA;&lt;h1&gt;Uninstallation&lt;/h1&gt; &#xA;&lt;h2&gt;Debian Package (.deb)&lt;/h2&gt; &#xA;&lt;p&gt;If you installed the &lt;code&gt;.deb&lt;/code&gt; package, you can uninstall it using &lt;code&gt;dpkg&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dpkg -r claude-desktop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you also want to remove configuration files (including MCP settings), use &lt;code&gt;purge&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dpkg -P claude-desktop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;AppImage (.AppImage)&lt;/h2&gt; &#xA;&lt;p&gt;If you used the AppImage:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Delete the &lt;code&gt;.AppImage&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;Delete the associated &lt;code&gt;.desktop&lt;/code&gt; file (e.g., &lt;code&gt;claude-desktop-appimage.desktop&lt;/code&gt; from where you placed it, like &lt;code&gt;~/.local/share/applications/&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;If you used AppImageLauncher, it might offer an option to un-integrate the AppImage.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Configuration Files (Both Formats)&lt;/h2&gt; &#xA;&lt;p&gt;To remove user-specific configuration files (including MCP settings), regardless of installation method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rm -rf ~/.config/Claude&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Troubleshooting&lt;/h1&gt; &#xA;&lt;p&gt;Aside from the install logs, runtime logs can be found in (&lt;code&gt;$HOME/claude-desktop-launcher.log&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If your window isn&#39;t scaling correctly the first time or two you open the application, right click on the claude-desktop panel (taskbar) icon and quit. When doing a safe shutdown like this, the application saves some states to the .config/claude folder which will resolve the issue moving forward. Force quitting the application will not trigger the updates.&lt;/p&gt; &#xA;&lt;h1&gt;How it works (Debian/Ubuntu Build)&lt;/h1&gt; &#xA;&lt;p&gt;Claude Desktop is an Electron application packaged as a Windows executable. Our build script performs several key operations to make it work on Linux:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Downloads and extracts the Windows installer&lt;/li&gt; &#xA; &lt;li&gt;Unpacks the &lt;code&gt;app.asar&lt;/code&gt; archive containing the application code&lt;/li&gt; &#xA; &lt;li&gt;Replaces the Windows-specific native module with a Linux-compatible stub implementation&lt;/li&gt; &#xA; &lt;li&gt;Repackages everything into the user&#39;s chosen format: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Debian Package (.deb):&lt;/strong&gt; Creates a standard Debian package installable via &lt;code&gt;dpkg&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;AppImage (.AppImage):&lt;/strong&gt; Creates a self-contained executable using &lt;code&gt;appimagetool&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The process works because Claude Desktop is largely cross-platform, with only one platform-specific component that needs replacement.&lt;/p&gt; &#xA;&lt;h2&gt;Build Process Details&lt;/h2&gt; &#xA;&lt;p&gt;The main build script (&lt;code&gt;build.sh&lt;/code&gt;) orchestrates the process:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Checks for a Debian-based system and required dependencies&lt;/li&gt; &#xA; &lt;li&gt;Parses command-line flags (&lt;code&gt;--build&lt;/code&gt;, &lt;code&gt;--clean&lt;/code&gt;) to determine output format and cleanup behavior.&lt;/li&gt; &#xA; &lt;li&gt;Downloads the official Windows installer&lt;/li&gt; &#xA; &lt;li&gt;Extracts the application resources&lt;/li&gt; &#xA; &lt;li&gt;Processes icons for Linux desktop integration&lt;/li&gt; &#xA; &lt;li&gt;Unpacks and modifies the app.asar: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Replaces the native mapping module with our Linux version&lt;/li&gt; &#xA;   &lt;li&gt;Preserves all other functionality&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Calls the appropriate packaging script (&lt;code&gt;scripts/build-deb-package.sh&lt;/code&gt; or &lt;code&gt;scripts/build-appimage.sh&lt;/code&gt;) to create the final output: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;For .deb:&lt;/strong&gt; Creates a package with desktop entry, icons, dependencies, and post-install steps.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;For .AppImage:&lt;/strong&gt; Creates an AppDir, bundles Electron, generates an &lt;code&gt;AppRun&lt;/code&gt; script and &lt;code&gt;.desktop&lt;/code&gt; file, and uses &lt;code&gt;appimagetool&lt;/code&gt; to create the final &lt;code&gt;.AppImage&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Updating the Build Script&lt;/h2&gt; &#xA;&lt;p&gt;When a new version of Claude Desktop is released, the script attempts to automatically detect the correct download URL based on your system architecture (amd64 or arm64). If the download URLs change significantly in the future, you may need to update the &lt;code&gt;CLAUDE_DOWNLOAD_URL&lt;/code&gt; variables near the top of &lt;code&gt;build.sh&lt;/code&gt;. The script should handle the rest of the build process automatically.&lt;/p&gt; &#xA;&lt;h1&gt;k3d3&#39;s Original NixOS Implementation&lt;/h1&gt; &#xA;&lt;p&gt;For NixOS users, please refer to &lt;a href=&#34;https://github.com/k3d3/claude-desktop-linux-flake&#34;&gt;k3d3&#39;s claude-desktop-linux-flake&lt;/a&gt; repository. Their implementation is specifically designed for NixOS and provides the original Nix flake that inspired this project. Go check their repo out if you want some more details about the core process behind this.&lt;/p&gt; &#xA;&lt;h1&gt;Emsi&#39;s Alternative Debian Implementation&lt;/h1&gt; &#xA;&lt;p&gt;Emsi has put together a fork of this repo at &lt;a href=&#34;https://github.com/emsi/claude-desktop&#34;&gt;https://github.com/emsi/claude-desktop&lt;/a&gt;. Aside from approaching the problem much more intelligently than I, his repo collection is full of goodies such as &lt;a href=&#34;https://github.com/emsi/MyManus&#34;&gt;https://github.com/emsi/MyManus&lt;/a&gt;. This repo (aaddrick/claude-desktop-debian) currently relies on his title bar fix to keep the main title bar visible.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;The build scripts in this repository, are dual-licensed under the terms of the MIT license and the Apache License (Version 2.0).&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/aaddrick/claude-desktop-debian/main/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/aaddrick/claude-desktop-debian/main/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;The Claude Desktop application, not included in this repository, is likely covered by &lt;a href=&#34;https://www.anthropic.com/legal/consumer-terms&#34;&gt;Anthropic&#39;s Consumer Terms&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nelvko/clash-for-linux-install</title>
    <updated>2025-05-01T01:49:56Z</updated>
    <id>tag:github.com,2025-05-01:/nelvko/clash-for-linux-install</id>
    <link href="https://github.com/nelvko/clash-for-linux-install" rel="alternate"></link>
    <summary type="html">&lt;p&gt;😼 优雅地部署、使用基于 clash/mihomo 的代理环境&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Linux 一键安装 Clash&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/license/nelvko/clash-for-linux-install&#34; alt=&#34;GitHub License&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/languages/top/nelvko/clash-for-linux-install&#34; alt=&#34;GitHub top language&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/nelvko/clash-for-linux-install&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nelvko/clash-for-linux-install/master/resources/preview.png&#34; alt=&#34;preview&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;默认安装 &lt;code&gt;mihomo&lt;/code&gt; 内核，&lt;a href=&#34;https://github.com/nelvko/clash-for-linux-install/wiki/FAQ#%E5%AE%89%E8%A3%85-clash-%E5%86%85%E6%A0%B8&#34;&gt;可选安装&lt;/a&gt; &lt;code&gt;clash&lt;/code&gt;。&lt;/li&gt; &#xA; &lt;li&gt;自动使用 &lt;a href=&#34;https://github.com/tindy2013/subconverter&#34;&gt;subconverter&lt;/a&gt; 进行本地订阅转换。&lt;/li&gt; &#xA; &lt;li&gt;多架构支持，适配主流 &lt;code&gt;Linux&lt;/code&gt; 发行版：&lt;code&gt;CentOS 7.6&lt;/code&gt;、&lt;code&gt;Debian 12&lt;/code&gt;、&lt;code&gt;Ubuntu 24.04.1 LTS&lt;/code&gt;。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;快速开始&lt;/h2&gt; &#xA;&lt;h3&gt;环境要求&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;用户权限：&lt;code&gt;root&lt;/code&gt;、&lt;code&gt;sudo&lt;/code&gt;。（无权限可参考：&lt;a href=&#34;https://github.com/nelvko/clash-for-linux-install/issues/91&#34;&gt;#91&lt;/a&gt;）&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;shell&lt;/code&gt; 支持：&lt;code&gt;bash&lt;/code&gt;、&lt;code&gt;zsh&lt;/code&gt;。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;一键安装&lt;/h3&gt; &#xA;&lt;p&gt;下述命令适用于 &lt;code&gt;x86_64&lt;/code&gt; 架构，其他架构请戳：&lt;a href=&#34;https://github.com/nelvko/clash-for-linux-install/wiki#%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85-%E5%A4%9A%E6%9E%B6%E6%9E%84&#34;&gt;一键安装-多架构&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --branch master --depth 1 https://gh-proxy.com/https://github.com/nelvko/clash-for-linux-install.git \&#xA;  &amp;amp;&amp;amp; cd clash-for-linux-install \&#xA;  &amp;amp;&amp;amp; sudo bash install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;如遇问题，请在查阅&lt;a href=&#34;https://github.com/nelvko/clash-for-linux-install/wiki/FAQ&#34;&gt;常见问题&lt;/a&gt;及 &lt;a href=&#34;https://github.com/nelvko/clash-for-linux-install/issues?q=is%3Aissue&#34;&gt;issue&lt;/a&gt; 未果后进行反馈。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;上述克隆命令使用了&lt;a href=&#34;https://gh-proxy.com/&#34;&gt;加速前缀&lt;/a&gt;，如失效请更换其他&lt;a href=&#34;https://ghproxy.link/&#34;&gt;可用链接&lt;/a&gt;。&lt;/li&gt; &#xA; &lt;li&gt;默认通过远程订阅获取配置进行安装，本地配置安装详见：&lt;a href=&#34;https://github.com/nelvko/clash-for-linux-install/issues/39&#34;&gt;#39&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;没有订阅？&lt;a href=&#34;https://%E6%AC%A1%E5%85%83.net/auth/register?code=oUbI&#34;&gt;click me&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;命令一览&lt;/h3&gt; &#xA;&lt;p&gt;执行 &lt;code&gt;clash&lt;/code&gt; 列出开箱即用的快捷命令。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;兼容多种命令风格&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ clash&#xA;Usage:&#xA;    clash     COMMAND [OPTION]&#xA;    mihomo    COMMAND [OPTION]&#xA;    clashctl  COMMAND [OPTION]&#xA;    mihomoctl COMMAND [OPTION]&#xA;&#xA;Commands:&#xA;    on                   开启代理&#xA;    off                  关闭代理&#xA;    ui                   面板地址&#xA;    status               内核状况&#xA;    tun      [on|off]    Tun 模式&#xA;    mixin    [-e|-r]     Mixin 配置&#xA;    secret   [SECRET]    Web 密钥&#xA;    update   [auto|log]  更新订阅&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;优雅启停&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ clashoff&#xA;😼 已关闭代理环境&#xA;&#xA;$ clashon&#xA;😼 已开启代理环境&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;原理&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;使用 &lt;code&gt;systemctl&lt;/code&gt; 控制 &lt;code&gt;clash&lt;/code&gt; 启停，并调整代理环境变量的值（http_proxy 等）。应用程序在发起网络请求时，会通过其指定的代理地址转发流量，不调整会造成：关闭代理但未卸载代理变量导致仍转发请求、开启代理后未设置代理地址导致请求不转发。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;clashon&lt;/code&gt; 等命令封装了上述流程。&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Web 控制台&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ clashui&#xA;╔═══════════════════════════════════════════════╗&#xA;║                😼 Web 控制台                  ║&#xA;║═══════════════════════════════════════════════║&#xA;║                                               ║&#xA;║     🔓 注意放行端口：9090                      ║&#xA;║     🏠 内网：http://192.168.0.1:9090/ui       ║&#xA;║     🌏 公网：http://255.255.255.255:9090/ui   ║&#xA;║     ☁️ 公共：http://board.zash.run.place      ║&#xA;║                                               ║&#xA;╚═══════════════════════════════════════════════╝&#xA;&#xA;$ clashsecret 666&#xA;😼 密钥更新成功，已重启生效&#xA;&#xA;$ clashsecret&#xA;😼 当前密钥：666&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;通过浏览器打开 Web 控制台，实现可视化操作：切换节点、查看日志等。&lt;/li&gt; &#xA; &lt;li&gt;控制台密钥默认为空，若暴露到公网使用建议更新密钥。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;更新订阅&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ clashupdate https://example.com&#xA;👌 正在下载：原配置已备份...&#xA;🍃 下载成功：内核验证配置...&#xA;🍃 订阅更新成功&#xA;&#xA;$ clashupdate auto [url]&#xA;😼 已设置定时更新订阅&#xA;&#xA;$ clashupdate log&#xA;✅ [2025-02-23 22:45:23] 订阅更新成功：https://example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;clashupdate&lt;/code&gt; 会记住上次更新成功的订阅链接，后续执行无需再指定。&lt;/li&gt; &#xA; &lt;li&gt;可通过 &lt;code&gt;crontab -e&lt;/code&gt; 修改定时更新频率及订阅链接。&lt;/li&gt; &#xA; &lt;li&gt;通过配置文件进行更新：&lt;a href=&#34;https://github.com/nelvko/clash-for-linux-install/pull/24#issuecomment-2565054701&#34;&gt;pr#24&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;code&gt;Tun&lt;/code&gt; 模式&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ clashtun&#xA;😾 Tun 状态：关闭&#xA;&#xA;$ clashtun on&#xA;😼 Tun 模式已开启&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;作用：实现本机及 &lt;code&gt;Docker&lt;/code&gt; 等容器的所有流量路由到 &lt;code&gt;clash&lt;/code&gt; 代理、DNS 劫持等。&lt;/li&gt; &#xA; &lt;li&gt;原理：&lt;a href=&#34;https://www.clashverge.dev/guide/term.html#tun&#34;&gt;clash-verge-rev&lt;/a&gt;、 &lt;a href=&#34;https://clash.wiki/premium/tun-device.html&#34;&gt;clash.wiki&lt;/a&gt;。&lt;/li&gt; &#xA; &lt;li&gt;注意事项：&lt;a href=&#34;https://github.com/nelvko/clash-for-linux-install/issues/100#issuecomment-2782680205&#34;&gt;#100&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;code&gt;Mixin&lt;/code&gt; 配置&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ clashmixin&#xA;😼 less 查看 mixin 配置&#xA;&#xA;$ clashmixin -e&#xA;😼 vim 编辑 mixin 配置&#xA;&#xA;$ clashmixin -r&#xA;😼 less 查看 运行时 配置&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;将自定义配置写在 &lt;code&gt;Mixin&lt;/code&gt; 而不是原配置中，可避免更新订阅后丢失自定义配置。&lt;/li&gt; &#xA; &lt;li&gt;运行时配置是订阅配置和 &lt;code&gt;Mixin&lt;/code&gt; 配置的并集。&lt;/li&gt; &#xA; &lt;li&gt;相同配置项优先级：&lt;code&gt;Mixin&lt;/code&gt; 配置 &amp;gt; 订阅配置。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;卸载&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo bash uninstall.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;常见问题&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nelvko/clash-for-linux-install/wiki/FAQ&#34;&gt;wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;引用&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://clash.wiki/&#34;&gt;Clash 知识库&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.clash.la/releases/&#34;&gt;Clash 家族下载&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://downloads.clash.wiki/ClashPremium/&#34;&gt;Clash Premium 2023.08.17&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MetaCubeX/mihomo&#34;&gt;mihomo v1.19.2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tindy2013/subconverter&#34;&gt;subconverter v0.9.0：本地订阅转换&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/haishanh/yacd&#34;&gt;yacd v0.3.8：Web 控制台&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mikefarah/yq&#34;&gt;yq v4.45.1：处理 yaml&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;a href=&#34;https://www.star-history.com/#nelvko/clash-for-linux-install&amp;amp;Date&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://api.star-history.com/svg?repos=nelvko/clash-for-linux-install&amp;amp;type=Date&amp;amp;theme=dark&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://api.star-history.com/svg?repos=nelvko/clash-for-linux-install&amp;amp;type=Date&#34;&gt; &#xA;  &lt;img alt=&#34;Star History Chart&#34; src=&#34;https://api.star-history.com/svg?repos=nelvko/clash-for-linux-install&amp;amp;type=Date&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/TrackRay&#34;&gt;@鑫哥&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;特别声明&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;编写本项目主要目的为学习和研究 &lt;code&gt;Shell&lt;/code&gt; 编程，不得将本项目中任何内容用于违反国家/地区/组织等的法律法规或相关规定的其他用途。&lt;/li&gt; &#xA; &lt;li&gt;本项目保留随时对免责声明进行补充或更改的权利，直接或间接使用本项目内容的个人或组织，视为接受本项目的特别声明。&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>n8n-io/n8n-hosting</title>
    <updated>2025-05-01T01:49:56Z</updated>
    <id>tag:github.com,2025-05-01:/n8n-io/n8n-hosting</id>
    <link href="https://github.com/n8n-io/n8n-hosting" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Example of self-hosting n8n in various environments like docker, kubernetes, etc.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;n8n-hosting&lt;/h1&gt;</summary>
  </entry>
</feed>