<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-01T02:53:58Z</updated>
  <subtitle>Monthly Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Jeevan-kumar-Raj/Grokking-System-Design</title>
    <updated>2022-08-01T02:53:58Z</updated>
    <id>tag:github.com,2022-08-01:/Jeevan-kumar-Raj/Grokking-System-Design</id>
    <link href="https://github.com/Jeevan-kumar-Raj/Grokking-System-Design" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Systems design is the process of defining the architecture, modules, interfaces, and data for a system to satisfy specified requirements. Systems design could be seen as the application of systems theory to product development.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://www.educative.io/collection/5668639101419520/5649050225344512&#34;&gt;Grokking System Design Interview&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Source: &lt;a href=&#34;https://www.educative.io&#34;&gt;educative&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Interview Process&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Scope the problem &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Don’t make assumptions.&lt;/li&gt; &#xA;   &lt;li&gt;Ask clarifying questions to understand the constraints and use cases.&lt;/li&gt; &#xA;   &lt;li&gt;Steps &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Requirements clarifications&lt;/li&gt; &#xA;     &lt;li&gt;System interface definition&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Sketch up an abstract design &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Building blocks of the system&lt;/li&gt; &#xA;   &lt;li&gt;Relationships between them&lt;/li&gt; &#xA;   &lt;li&gt;Steps &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Back-of-the-envelope estimation&lt;/li&gt; &#xA;     &lt;li&gt;Defining data model&lt;/li&gt; &#xA;     &lt;li&gt;High-level design&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Identify and address the bottlenecks &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use the fundamental principles of scalable system design&lt;/li&gt; &#xA;   &lt;li&gt;Steps &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Detailed design&lt;/li&gt; &#xA;     &lt;li&gt;Identifying and resolving bottlenecks&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Distributed System Design Basics&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Jeevan-kumar-Raj/Grokking-System-Design/master/basics/key-characteristics.md&#34;&gt;Key Characterics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Jeevan-kumar-Raj/Grokking-System-Design/master/basics/load-balancing.md&#34;&gt;Load balancing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Jeevan-kumar-Raj/Grokking-System-Design/master/basics/caching.md&#34;&gt;Caching&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Jeevan-kumar-Raj/Grokking-System-Design/master/basics/sharding.md&#34;&gt;Sharding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Jeevan-kumar-Raj/Grokking-System-Design/master/basics/indexes.md&#34;&gt;Indexes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Jeevan-kumar-Raj/Grokking-System-Design/master/basics/proxies.md&#34;&gt;Proxies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Jeevan-kumar-Raj/Grokking-System-Design/master/basics/queues.md&#34;&gt;Queues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Jeevan-kumar-Raj/Grokking-System-Design/master/basics/redundancy.md&#34;&gt;Redundancy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Jeevan-kumar-Raj/Grokking-System-Design/master/basics/sql-vs-nosql.md&#34;&gt;SQL vs. NoSQL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Jeevan-kumar-Raj/Grokking-System-Design/master/basics/cap-theorem.md&#34;&gt;CAP Theorem&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Jeevan-kumar-Raj/Grokking-System-Design/master/basics/consistent-hashing.md&#34;&gt;Consistent Hashing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Jeevan-kumar-Raj/Grokking-System-Design/master/basics/client-server-communication.md&#34;&gt;Client Server Communication&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;System Designs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Jeevan-kumar-Raj/Grokking-System-Design/master/designs/short-url.md&#34;&gt;Short URL Service&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Jeevan-kumar-Raj/Grokking-System-Design/master/designs/pastebin.md&#34;&gt;Pastebin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Jeevan-kumar-Raj/Grokking-System-Design/master/designs/instagram.md&#34;&gt;Instagram&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Jeevan-kumar-Raj/Grokking-System-Design/master/designs/dropbox.md&#34;&gt;Dropbox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Jeevan-kumar-Raj/Grokking-System-Design/master/designs/twitter.md&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Jeevan-kumar-Raj/Grokking-System-Design/master/designs/youtube.md&#34;&gt;Youtube&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Jeevan-kumar-Raj/Grokking-System-Design/master/designs/twitter-search.md&#34;&gt;Twitter Search&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Jeevan-kumar-Raj/Grokking-System-Design/master/designs/web-crawler.md&#34;&gt;Web Crawler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Jeevan-kumar-Raj/Grokking-System-Design/master/designs/facebook-newsfeed.md&#34;&gt;Facebook Newsfeed&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Jeevan-kumar-Raj/Grokking-System-Design/master/designs/yelp.md&#34;&gt;Yelp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Jeevan-kumar-Raj/Grokking-System-Design/master/designs/uber-backend.md&#34;&gt;Uber Backend&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Jeevan-kumar-Raj/Grokking-System-Design/master/designs/ticketmaster.md&#34;&gt;Ticketmaster&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;System Design Interviews: A step by step guide&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;SYSTEM DESIGN PREPARATION&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How to prepare for and answer system design questions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Objective&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Learning about and implementing large-scale distributed system is not easy. I do not want to give the impression that it&#39;s something that can be learnt in a month.&lt;/em&gt; What this repository aims to achieve, is for software engineers and students to get a rough idea of how the thought process of designing a large scale works and how big companies have managed to solve really hard problems. Along with that, there is a recent trend for companies to have an open-ended interview with system design questions, which is at times hard for engineers of all levels if they haven&#39;t gotten the opportunity to work on such systems themselves.&lt;/p&gt; &#xA;&lt;p&gt;This is a collection of links/documents for the following use cases: a) Prepare for a system design or open-ended rounds. b) Learn more about how large-scale systems work and thought process of designing a new system.&lt;/p&gt; &#xA;&lt;h2&gt;Index&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Jeevan-kumar-Raj/Grokking-System-Design/master/#start&#34;&gt;Starting point&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Jeevan-kumar-Raj/Grokking-System-Design/master/#basics&#34;&gt;basics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Jeevan-kumar-Raj/Grokking-System-Design/master/#howtoans&#34;&gt;How to answer in interviews&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Jeevan-kumar-Raj/Grokking-System-Design/master/#myapproach&#34;&gt;Steps how I approach the system design questions in interviews&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Jeevan-kumar-Raj/Grokking-System-Design/master/#designques&#34;&gt;Common Design questions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Jeevan-kumar-Raj/Grokking-System-Design/master/#architecture&#34;&gt;architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Jeevan-kumar-Raj/Grokking-System-Design/master/#blog&#34;&gt;company engineering blog links&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Jeevan-kumar-Raj/Grokking-System-Design/master/#tldr&#34;&gt;Low on time ?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;start&#34;&gt; Starting point &lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;For a very broad overview please go through these lectures, really useful:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLMCXHnjXnTnvo6alSjVkgxV-VH6EPyvoX&#34;&gt;Gaurav Sen&#39;s system design series&lt;/a&gt; Starts from simple stuff like load balancing and message queues, then moves to building full systems like Whatsapp and Tinder.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=-W9F__D3oY4&amp;amp;list=PLmhRNZyYVpDmLpaVQm3mK5PY5KB_4hLjE&amp;amp;index=10&#34;&gt;david malans cs75 scalability talk&lt;/a&gt; Feel free to go through other lectures if needed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.udacity.com/course/web-development--cs253&#34;&gt;david huffman&#39;s talk , scaling up talk&lt;/a&gt; (&lt;a href=&#34;https://www.youtube.com/watch?v=pjNTgULVVf4&amp;amp;list=PLVi1LmRuKQ0NINQfjKLVen7J2lZFL35wP&amp;amp;index=1&#34;&gt;Youtube link&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://www.lecloud.net/tagged/scalability&#34;&gt;scalability for dummies&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;&#34;&gt;Designing data intensive appliations&lt;/a&gt; This is by far one of the best books about large-scale systems and the practical challenges encountered during building them. It&#39;s focussed more on data-oriented applications though.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These talks should give you a starting point on how to think about such problems.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;basics&#34;&gt; Basics &lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;But before you begin, here are some topics(in no particular order) which in my opinion you should have a decent idea of before proceeding.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Operating system basics: how a file system, virtual memory, paging, instruction execution cycle etc work (For starters silbershatz should be enough. If you already have decent knowledge try stallings book on OS)&lt;/li&gt; &#xA; &lt;li&gt;Networking basics: Should know the TCP/IP stack, basics of how Internet, HTTP, TCP/IP work at the minimum. cs75 on youtube (1st lecture) should give a broad overview. I personally love &lt;a href=&#34;http://www.amazon.com/Computer-Networking-Top-Down-Approach-Edition/dp/0132856204&#34;&gt;networking-a top down approach&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Concurrency basics: threads, processes, threading in the language you know. Locks , mutex etc.&lt;/li&gt; &#xA; &lt;li&gt;DB basics: types of DB&#39;s (SQL vs noSQL etc ), hashing and indexing, EAV based databases, Sharding, caching for databases, master-slave etc&lt;/li&gt; &#xA; &lt;li&gt;A basic idea of how a basic web architecture is: say load balancers, proxy, servers, Database servers, caching servers, precompute, logging big data etc. Just know broadly what is each layer for.&lt;/li&gt; &#xA; &lt;li&gt;very basic summary of what the &lt;a href=&#34;http://robertgreiner.com/2014/08/cap-theorem-revisited/&#34;&gt;CAP theorem&lt;/a&gt; is (Have never been asked about the theorem itself, but knowing it will help you in designing large-scale systems.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;howtoans&#34;&gt; How to answer in interviews &lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;I found &lt;a href=&#34;http://www.hiredintech.com/system-design&#34;&gt;hiredintech&lt;/a&gt; videos an excellent place to start with. The way how to approach a design question as given in the link is really useful. It goes into how we start with clearing the use-cases of the system, then thinking in the abstract manner of the various component and the interactions. Think about the bottlenecks of the system and what is more critical for your system (eg latency vs reliability vs uptime etc) Address those giving the tradeoff of your approach.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://www.flipkart.com/cracking-coding-interview-150-programming-questions-solutions-english-5th/p/itmdz4pvzbhcv6uv&#34;&gt;system design in crack the coding interview&lt;/a&gt;: good approach on how to begin attacking a problem by first solving for a small usecase then expanding the system.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The best way to prepare for such questions is do mock interviews, pick any topic (given below) try to come up with a design and then go and see how and why it is designed in that manner. There is absolutely no alternative to practice!! Whiteboarding a system design question is similar to actually writing code and testing it! Just reading will only take you so far.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;myapproach&#34;&gt;Steps how I approach the system design questions in interviews&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;These are the steps I go through mentally in the interviews, followed by actual interview experiences:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a) &lt;strong&gt;Be absolutely sure you understand the problem being asked&lt;/strong&gt;, clarify on the onset rather than assuming anything&lt;/li&gt; &#xA; &lt;li&gt;b) &lt;strong&gt;Use-cases&lt;/strong&gt;. This is critical, you MUST know what is the system going to be used for, what is the scale it is going to be used for. Also, constraints like requests per second, requests types, data written per second, data read per second.&lt;/li&gt; &#xA; &lt;li&gt;c) Solve the problem for a &lt;strong&gt;very small set&lt;/strong&gt;, say, 100 users. This will broadly help you figure out the data structures, components, abstract design of the overall model.&lt;/li&gt; &#xA; &lt;li&gt;d) Write down the various components figured out so far and how will they interact with each other.&lt;/li&gt; &#xA; &lt;li&gt;e) As a rule of thumb remember at least these :&lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;processing and servers&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;2&#34;&gt; &#xA;   &lt;li&gt;storage&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;3&#34;&gt; &#xA;   &lt;li&gt;caching&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;4&#34;&gt; &#xA;   &lt;li&gt;concurrency and communication&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;5&#34;&gt; &#xA;   &lt;li&gt;security&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;6&#34;&gt; &#xA;   &lt;li&gt;load balancing and proxy&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;7&#34;&gt; &#xA;   &lt;li&gt;CDN&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;8&#34;&gt; &#xA;   &lt;li&gt;Monetization: if relevant, how will you monetize? eg. What kind of DB (Is Postgres enough, if not why?), do you need caching and how much, is security a prime concern?&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;f) &lt;strong&gt;Special cases&lt;/strong&gt; for the question asked. Say designing a system for storing thumbnails, will a file system be enough? What if you have to scale for facebook or google? Will a nosql based database work?&lt;/li&gt; &#xA; &lt;li&gt;g) After I have my components in place, what I generally try to do is look for minor optimization in various places according to the use-cases, various tradeoffs that will help in better scaling in 99% cases.&lt;/li&gt; &#xA; &lt;li&gt;h) [Scaling out or up] (&lt;a href=&#34;http://highscalability.com/blog/2014/5/12/4-architecture-issues-when-scaling-web-applications-bottlene.html&#34;&gt;http://highscalability.com/blog/2014/5/12/4-architecture-issues-when-scaling-web-applications-bottlene.html&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;i) Check with the interviewer is there any other special case he is looking to solve? Also, it really helps if you know about the company you are interviewing with, what its architecture is, what will the interviewer have more interest in based on the company and what he works on?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;designques&#34;&gt; Common Design questions &lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;It generally depends what you are and you will be working on. Also what your level is but these are some of the more frequent interview questions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Design amazon&#39;s frequently viewed product page (eg. which shows the last 5 items you saw)&lt;/li&gt; &#xA; &lt;li&gt;Design an online poker game for multiplayer. Solve for persistence, concurrency, scale. Draw the ER diagram for this&lt;/li&gt; &#xA; &lt;li&gt;Design a [url compression system] (&lt;a href=&#34;http://www.hiredintech.com/system-design/the-system-design-process/&#34;&gt;http://www.hiredintech.com/system-design/the-system-design-process/&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://infolab.stanford.edu/~backrub/google.html&#34;&gt;Search engine&lt;/a&gt; (generally asked with people who have some domain knowledge): basic crawling, collection, hashing etc. Depends on your expertise on this topic&lt;/li&gt; &#xA; &lt;li&gt;Design dropbox&#39;s architecture. &lt;a href=&#34;https://www.youtube.com/watch?v=PE4gwstWhmc&#34;&gt;good talk on this&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Design a &lt;a href=&#34;http://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html&#34;&gt;picture sharing website&lt;/a&gt;. How will you store thumbnails, photos? Usage of CDNS? caching at various layers etc.&lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Design a news feed (eg. Facebook , Twitter): &lt;a href=&#34;http://www.quora.com/Software-Engineering-Best-Practices/What-are-best-practices-for-building-something-like-a-News-Feed&#34;&gt;news feed&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Design a product based on maps, eg hotel / ATM finder given a location.&lt;/li&gt; &#xA; &lt;li&gt;Design malloc, free and &lt;a href=&#34;http://courses.cs.washington.edu/courses/csep521/07wi/prj/rick.pdf&#34;&gt;garbage collection system&lt;/a&gt;. What data structures to use? decorator pattern over malloc etc.&lt;/li&gt; &#xA; &lt;li&gt;Design a site like &lt;a href=&#34;http://www.junglee.com/&#34;&gt;junglee.com&lt;/a&gt; i.e price comparision, availability on e-commerce websites. When and will you cache, how much to query, how to crawl efficiently over e-commerce sites, sharding of databases, basic database design&lt;/li&gt; &#xA; &lt;li&gt;A web application for instant messaging, eg &lt;a href=&#34;http://highscalability.com/blog/2014/2/26/the-whatsapp-architecture-facebook-bought-for-19-billion.html&#34;&gt;whatsapp&lt;/a&gt;, facebook chat. Issues of each, scaling problems, status and availability notification etc.&lt;/li&gt; &#xA; &lt;li&gt;Design a system for collaborating over a document simultaneously (eg &lt;a href=&#34;https://neil.fraser.name/writing/sync/&#34;&gt;google docs&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;(very common:) top &#39;n&#39; or most frequent items of a running stream of data&lt;/li&gt; &#xA; &lt;li&gt;Design election commission architecture : Let&#39;s say we work with the Election Commission. On Counting day, we want to collate the votes received at the lakhs of voting booths all over the country. Each booth has a voting machine, which, when connected to the network, returns an array of the form {[party_id, num_votes],[party_id_2, num_votes_2],...}. We want to collect these and get the current scores in real time. The report we need continuously is how many seats is each party leading in. Please design a system for this.&lt;/li&gt; &#xA; &lt;li&gt;Design a logging system (For web applications, it is common to have a large number of servers running the same application, with a load balancer in front to distribute the incoming requests. In this scenario, we want to check and alarm in case an exception is thrown in any of the servers. We want a system that checks for the appearance of specific words, &#34;Exception&#34;, &#34;Disk Full&#34; etc. in the logs of any of the servers. How would you design this system?)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;architecture&#34;&gt;Architectures :&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Personally I looked into the following architectures:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://infolab.stanford.edu/~backrub/google.html&#34;&gt;Basics of google search&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Basics of messaging frameworks like Kafka , queuing architectures like rabbitmq.&lt;/li&gt; &#xA; &lt;li&gt;Broad overview and advantages of Redis , mongodb , cassandra.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://static.googleusercontent.com/media/research.google.com/en//archive/gfs-sosp2003.pdf&#34;&gt;Google file system&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[Google architecture] (&lt;a href=&#34;http://highscalability.com/google-architecture&#34;&gt;http://highscalability.com/google-architecture&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://instagram-engineering.tumblr.com/post/13649370142/what-powers-instagram-hundreds-of-instances&#34;&gt;Instagram&lt;/a&gt; and other image based social networks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cs.uwaterloo.ca/~brecht/courses/854-Emerging-2014/readings/key-value/fb-memcached-nsdi-2013.pdf&#34;&gt;Memcache scaling by facebook&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=z8LU0Cj6BOU&#34;&gt;Twitter scaling&lt;/a&gt; and facebook feeds&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cs.uwaterloo.ca/~brecht/courses/854-Emerging-2014/readings/data-store/tao-facebook-distributed-datastore-atc-2013.pdf&#34;&gt;facebook graph api&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.usenix.org/legacy/event/osdi10/tech/full_papers/Beaver.pdf&#34;&gt;facebook haystack needle architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ZW5_eEKEC28&#34;&gt;youtube architecture and optimizations for video&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;blog&#34;&gt;Company engineering blog links &lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;courtesy &lt;a href=&#34;https://github.com/checkcheckzz/system-design-interview#toc&#34;&gt;checkcheckzz&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Depending on where you are interviewing, go through the company blog. VERY USEFUL IN INTERVIEWS! It really helps if you have an idea of the architecture, as the questions asked will generally be of that domain and your prior knowledge will help out here.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://nerds.airbnb.com/&#34;&gt;Airbnb Engineering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.amazon.com/blogs&#34;&gt;Amazon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/blogs/&#34;&gt;Amazon AWS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://bandcamptech.wordpress.com/&#34;&gt;Bandcamp Tech&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.simple.com/engineering/&#34;&gt;BankSimple Simple Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://word.bitly.com/&#34;&gt;Bitly Engineering Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://blog.cloudera.com/blog/&#34;&gt;Cloudera Developer Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tech.dropbox.com/&#34;&gt;Dropbox Tech Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://engineering.quora.com/&#34;&gt;Engineering at Quora&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://codeascraft.com/&#34;&gt;Etsy Code as Craft&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.facebook.com/Engineering&#34;&gt;Facebook Engineering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://code.flickr.net/&#34;&gt;Flickr Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://engineering.foursquare.com/&#34;&gt;Foursquare Engineering Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://googleresearch.blogspot.com/&#34;&gt;Google Research Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://engineering.groupon.com/&#34;&gt;Groupn Engineering Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://highscalability.com/&#34;&gt;High Scalability&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://instagram-engineering.tumblr.com/&#34;&gt;Instagram Engineering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://engineering.linkedin.com/blog&#34;&gt;LinkedIn Engineering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://tech.oyster.com/&#34;&gt;Oyster Tech Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://engineering.pinterest.com/&#34;&gt;Pinterest Engineering Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://devblog.songkick.com/&#34;&gt;Songkick Technology Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developers.soundcloud.com/blog/&#34;&gt;SoundCloud Backstage Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://corner.squareup.com/&#34;&gt;Square The Corner&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.redditblog.com/&#34;&gt;THE REDDIT BLOG&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/blog/category/engineering&#34;&gt;The GitHub Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://techblog.netflix.com/&#34;&gt;The Netflix Tech Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.twilio.com/engineering&#34;&gt;Twilio Engineering Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://engineering.twitter.com/&#34;&gt;Twitter Engineering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://eng.uber.com/&#34;&gt;Uber Engineering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/walmartlabs&#34;&gt;Walmart Labs Tech Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://engineering.webengage.com/&#34;&gt;WebEngage Engineering Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://eng.yammer.com/blog/&#34;&gt;Yammer Engineering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://engineeringblog.yelp.com/&#34;&gt;Yelp Engineering Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://smarketshq.com/&#34;&gt;Smarkets Blog&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;tldr&#34;&gt;Low on time ?&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;I would HIGHLY recommend you do not take a shortcut unless you have a week or so for an interview. System design is best learnt by practising, shortcuts might help you in the short term, but would recommend coming back to this link for an in-depth understanding after the interview&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a) Go through cs76 and Udacity&#39;s links given above for scaling systems.&lt;/li&gt; &#xA; &lt;li&gt;b) Go through the engineering blog of the company you are interviewing in (or if its a startup go through the link of the company closest to yours)&lt;/li&gt; &#xA; &lt;li&gt;c) See this talk: &lt;a href=&#34;http://www.hiredintech.com/system-design/the-system-design-process/&#34;&gt;http://www.hiredintech.com/system-design/the-system-design-process/&lt;/a&gt; and develop a process for how to answer such questions.&lt;/li&gt; &#xA; &lt;li&gt;d) Remember these terms, just roll over them in your interview in your mind, and if relevant mention it in the interview&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;processing and servers&lt;/li&gt; &#xA; &lt;li&gt;storage&lt;/li&gt; &#xA; &lt;li&gt;caching&lt;/li&gt; &#xA; &lt;li&gt;concurrency and communication&lt;/li&gt; &#xA; &lt;li&gt;security&lt;/li&gt; &#xA; &lt;li&gt;load balancing and proxy&lt;/li&gt; &#xA; &lt;li&gt;CDN&lt;/li&gt; &#xA; &lt;li&gt;Monetization&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Best of luck &lt;span&gt;👍&lt;/span&gt;, feel free to send pull requests to add more content to this git!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>searxng/searxng-docker</title>
    <updated>2022-08-01T02:53:58Z</updated>
    <id>tag:github.com,2022-08-01:/searxng/searxng-docker</id>
    <link href="https://github.com/searxng/searxng-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The docker-compose files for setting up a SearXNG instance with docker.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;searxng-docker&lt;/h1&gt; &#xA;&lt;p&gt;Create a new SearXNG instance in five minutes using Docker&lt;/p&gt; &#xA;&lt;h2&gt;What is included ?&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Docker image&lt;/th&gt; &#xA;   &lt;th&gt;Dockerfile&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/caddyserver/caddy&#34;&gt;Caddy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Reverse proxy (create a LetsEncrypt certificate automatically)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/_/caddy&#34;&gt;caddy/caddy:2-alpine&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/caddyserver/caddy-docker&#34;&gt;Dockerfile&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/searxng/searxng&#34;&gt;SearXNG&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SearXNG by itself&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/searxng/searxng&#34;&gt;searxng/searxng:latest&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/searxng/searxng/raw/master/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/redis/redis&#34;&gt;Redis&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;In-memory database&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/_/redis&#34;&gt;redis:alpine&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/docker-library/redis/raw/master/Dockerfile-alpine.template&#34;&gt;Dockerfile-alpine.template&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;How to use it&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/install/&#34;&gt;Install docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;Install docker-compose&lt;/a&gt; (be sure that docker-compose version is at least 1.9.0)&lt;/li&gt; &#xA; &lt;li&gt;Get searxng-docker &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd /usr/local&#xA;git clone https://github.com/searxng/searxng-docker.git&#xA;cd searxng-docker&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Edit the &lt;a href=&#34;https://github.com/searxng/searxng-docker/raw/master/.env&#34;&gt;.env&lt;/a&gt; file to set the hostname and an email&lt;/li&gt; &#xA; &lt;li&gt;Generate the secret key &lt;code&gt;sed -i &#34;s|ultrasecretkey|$(openssl rand -hex 32)|g&#34; searxng/settings.yml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Edit the &lt;a href=&#34;https://github.com/searxng/searxng-docker/raw/master/searxng/settings.yml&#34;&gt;searxng/settings.yml&lt;/a&gt; file according to your need&lt;/li&gt; &#xA; &lt;li&gt;Check everything is working: &lt;code&gt;docker-compose up&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run SearXNG in the background: &lt;code&gt;docker-compose up -d&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to access the logs&lt;/h2&gt; &#xA;&lt;p&gt;To access the logs from all the containers use: &lt;code&gt;docker-compose logs -f&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To access the logs of one specific container:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Caddy: &lt;code&gt;docker-compose logs -f caddy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;SearXNG: &lt;code&gt;docker-compose logs -f searxng&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Redis: &lt;code&gt;docker-compose logs -f redis&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Start SearXNG with systemd&lt;/h3&gt; &#xA;&lt;p&gt;You can skip this step if you don&#39;t use systemd.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cp searxng-docker.service.template searxng-docker.service&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;edit the content of &lt;code&gt;WorkingDirectory&lt;/code&gt; in the &lt;code&gt;searxng-docker.service&lt;/code&gt; file (only if the installation path is different from /usr/local/searxng-docker)&lt;/li&gt; &#xA; &lt;li&gt;Install the systemd unit: &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;systemctl enable $(pwd)/searxng-docker.service&#xA;systemctl start searxng-docker.service&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Note on the image proxy feature&lt;/h2&gt; &#xA;&lt;p&gt;The SearXNG image proxy is activated by default.&lt;/p&gt; &#xA;&lt;p&gt;The default &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy&#34;&gt;Content-Security-Policy&lt;/a&gt; allow the browser to access to &lt;code&gt;${SEARXNG_HOSTNAME}&lt;/code&gt; and &lt;code&gt;https://*.tile.openstreetmap.org;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If some users wants to disable the image proxy, you have to modify &lt;a href=&#34;https://github.com/searxng/searxng-docker/raw/master/Caddyfile&#34;&gt;./Caddyfile&lt;/a&gt;. Replace the &lt;code&gt;img-src &#39;self&#39; data: https://*.tile.openstreetmap.org;&lt;/code&gt; by &lt;code&gt;img-src * data:;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Multi Architecture Docker images&lt;/h2&gt; &#xA;&lt;p&gt;Supported architecture:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;amd64&lt;/li&gt; &#xA; &lt;li&gt;arm64&lt;/li&gt; &#xA; &lt;li&gt;arm/v7&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to update ?&lt;/h2&gt; &#xA;&lt;p&gt;To update the SearXNG stack:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker-compose pull&#xA;docker-compose down&#xA;docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To update this &lt;code&gt;docker-compose.yml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;p&gt;Check out the newest version on github: &lt;a href=&#34;https://github.com/searxng/searxng-docker&#34;&gt;searxng/searxng-docker&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>autowarefoundation/autoware</title>
    <updated>2022-08-01T02:53:58Z</updated>
    <id>tag:github.com,2022-08-01:/autowarefoundation/autoware</id>
    <link href="https://github.com/autowarefoundation/autoware" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Autoware - the world&#39;s leading open-source software project for autonomous driving&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Autoware - the world&#39;s leading open-source software project for autonomous driving&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/63835446/158918717-58d6deaf-93fb-47f9-891d-e242b02cba7b.png&#34; alt=&#34;Autoware_RViz&#34;&gt; &lt;a href=&#34;https://discord.gg/Q94UsPvReQ&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/953808765935816715?label=Autoware%20Discord&amp;amp;style=for-the-badge&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Autoware is an open-source software stack for self-driving vehicles, built on the &lt;a href=&#34;https://www.ros.org/&#34;&gt;Robot Operating System (ROS)&lt;/a&gt;. It includes all of the necessary functions to drive an autonomous vehicles from localization and object detection to route planning and control, and was created with the aim of enabling as many individuals and organizations as possible to contribute to open innovations in autonomous driving technology.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://static.wixstatic.com/media/984e93_552e338be28543c7949717053cc3f11f~mv2.png/v1/crop/x_0,y_1,w_1500,h_879/fill/w_863,h_506,al_c,usm_0.66_1.00_0.01,enc_auto/Autoware-GFX_edited.png&#34; alt=&#34;Autoware architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;To learn more about using or developing Autoware, refer to the &lt;a href=&#34;https://autowarefoundation.github.io/autoware-documentation/main/&#34;&gt;Autoware documentation site&lt;/a&gt;. You can find the source for the documentation in &lt;a href=&#34;https://github.com/autowarefoundation/autoware-documentation&#34;&gt;autowarefoundation/autoware-documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Repository overview&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/autowarefoundation/autoware&#34;&gt;autowarefoundation/autoware&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Meta-repository containing &lt;code&gt;.repos&lt;/code&gt; files to construct an Autoware workspace.&lt;/li&gt; &#xA;   &lt;li&gt;It is anticipated that this repository will be frequently forked by users, and so it contains minimal information to avoid unnecessary differences.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/autowarefoundation/autoware_common&#34;&gt;autowarefoundation/autoware_common&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Library/utility type repository containing commonly referenced ROS packages.&lt;/li&gt; &#xA;   &lt;li&gt;These packages were moved to a separate repository in order to reduce CI execution time&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/autowarefoundation/autoware.core&#34;&gt;autowarefoundation/autoware.core&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Main repository for high-quality, stable ROS packages for Autonomous Driving.&lt;/li&gt; &#xA;   &lt;li&gt;Based on &lt;a href=&#34;https://gitlab.com/autowarefoundation/autoware.auto/AutowareAuto&#34;&gt;Autoware.Auto&lt;/a&gt; and &lt;a href=&#34;https://github.com/autowarefoundation/autoware.universe&#34;&gt;Autoware.Universe&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/autowarefoundation/autoware.universe&#34;&gt;autowarefoundation/autoware.universe&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Repository for experimental, cutting-edge ROS packages for Autonomous Driving.&lt;/li&gt; &#xA;   &lt;li&gt;Autoware Universe was created to make it easier for researchers and developers to extend the functionality of Autoware Core&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/autowarefoundation/autoware_launch&#34;&gt;autowarefoundation/autoware_launch&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Launch configuration repository containing node configurations and their parameters.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/autowarefoundation/autoware-github-actions&#34;&gt;autowarefoundation/autoware-github-actions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Contains &lt;a href=&#34;https://docs.github.com/ja/actions/learn-github-actions/reusing-workflows&#34;&gt;reusable GitHub Actions workflows&lt;/a&gt; used by multiple repositories for CI.&lt;/li&gt; &#xA;   &lt;li&gt;Utilizes the &lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34;&gt;DRY&lt;/a&gt; concept.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/autowarefoundation/autoware-documentation&#34;&gt;autowarefoundation/autoware-documentation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Documentation repository for Autoware users and developers.&lt;/li&gt; &#xA;   &lt;li&gt;Since Autoware Core/Universe has multiple repositories, a central documentation repository is important to make information accessible from a single place.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using Autoware.AI&lt;/h2&gt; &#xA;&lt;p&gt;If you wish to use Autoware.AI, the previous version of Autoware based on ROS 1, switch to &lt;a href=&#34;https://github.com/autowarefoundation/autoware.ai/tree/autoware-ai&#34;&gt;autoware-ai&lt;/a&gt; branch. However, be aware that Autoware.AI will reach the end-of-life by the end of 2022, and we strongly recommend transitioning to Autoware Core/Universe for future use.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/autowarefoundation/autoware-projects/wiki#contributors&#34;&gt;There is no formal process to become a contributor&lt;/a&gt; - you can comment on any &lt;a href=&#34;https://github.com/autowarefoundation/autoware.universe/issues&#34;&gt;existing issues&lt;/a&gt; or make a pull request on any Autoware repository! &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Make sure to follow the &lt;a href=&#34;https://autowarefoundation.github.io/autoware-documentation/main/contributing/&#34;&gt;Contribution Guidelines&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Take a look at Autoware&#39;s &lt;a href=&#34;https://github.com/autowarefoundation/autoware-projects/wiki#working-group-list&#34;&gt;various working groups&lt;/a&gt; to gain an understanding of any work in progress and to see how projects are managed.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;If you have any technical questions, you can start a discussion in the &lt;a href=&#34;https://github.com/autowarefoundation/autoware/discussions/categories/q-a&#34;&gt;Q&amp;amp;A category&lt;/a&gt; to request help and confirm if a potential issue is a bug or not.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Useful resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.autoware.org/&#34;&gt;Autoware Foundation homepage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://autowarefoundation.github.io/autoware-documentation/main/support/support-guidelines/&#34;&gt;Support guidelines&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>