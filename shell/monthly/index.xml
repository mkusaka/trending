<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-01T02:03:08Z</updated>
  <subtitle>Monthly Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>drwetter/testssl.sh</title>
    <updated>2022-10-01T02:03:08Z</updated>
    <id>tag:github.com,2022-10-01:/drwetter/testssl.sh</id>
    <link href="https://github.com/drwetter/testssl.sh" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Testing TLS/SSL encryption anywhere on any port&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Intro&lt;/h2&gt; &#xA;&lt;!-- [![Travis CI Status](https://img.shields.io/travis/drwetter/testssl.sh)](https://travis-ci.org/drwetter/testssl.sh)  --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/drwetter/testssl.sh/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/drwetter/testssl.sh/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/drwetter/testssl.sh?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/drwetter/testssl.sh/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/drwetter/testssl.sh&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/drwetter/testssl.sh/raw/3.1dev/Dockerfile.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/drwetter/testssl.sh&#34; alt=&#34;Docker&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;testssl.sh&lt;/code&gt; is a free command line tool which checks a server&#39;s service on any port for the support of TLS/SSL ciphers, protocols as well as some cryptographic flaws.&lt;/p&gt; &#xA;&lt;h3&gt;Key features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clear output: you can tell easily whether anything is good or bad.&lt;/li&gt; &#xA; &lt;li&gt;Machine readable output (CSV, two JSON formats)&lt;/li&gt; &#xA; &lt;li&gt;No need to install or to configure something. No gems, CPAN, pip or the like.&lt;/li&gt; &#xA; &lt;li&gt;Works out of the box: Linux, OSX/Darwin, FreeBSD, NetBSD, MSYS2/Cygwin, WSL (bash on Windows). Only OpenBSD needs bash.&lt;/li&gt; &#xA; &lt;li&gt;A Dockerfile is provided, there&#39;s also an official container build @ dockerhub.&lt;/li&gt; &#xA; &lt;li&gt;Flexibility: You can test any SSL/TLS enabled and STARTTLS service, not only web servers at port 443.&lt;/li&gt; &#xA; &lt;li&gt;Toolbox: Several command line options help you to run &lt;em&gt;your&lt;/em&gt; test and configure &lt;em&gt;your&lt;/em&gt; output.&lt;/li&gt; &#xA; &lt;li&gt;Reliability: features are tested thoroughly.&lt;/li&gt; &#xA; &lt;li&gt;Privacy: It&#39;s only you who sees the result, not a third party.&lt;/li&gt; &#xA; &lt;li&gt;Freedom: It&#39;s 100% open source. You can look at the code, see what&#39;s going on.&lt;/li&gt; &#xA; &lt;li&gt;The development is open (GitHub) and participation is welcome.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;This software is free. You can use it under the terms of GPLv2, see LICENSE.&lt;/p&gt; &#xA;&lt;p&gt;Attribution is important for the future of this project -- also in the internet. Thus if you&#39;re offering a scanner based on testssl.sh as a public and/or paid service in the internet you are strongly encouraged to mention to your audience that you&#39;re using this program and where to get this program from. That helps us to get bugfixes, other feedback and more contributions.&lt;/p&gt; &#xA;&lt;h3&gt;Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;Testssl.sh is working on every Linux/BSD distribution out of the box. Latest by 2.9dev most of the limitations of disabled features from the openssl client are gone due to bash-socket-based checks. As a result you can also use e.g. LibreSSL or OpenSSL &amp;gt;= 1.1.1 . testssl.sh also works on other unixoid systems out of the box, supposed they have &lt;code&gt;/bin/bash&lt;/code&gt; &amp;gt;= version 3.2 and standard tools like sed and awk installed. An implicit (silent) check for binaries is done when you start testssl.sh . System V needs probably to have GNU grep installed. MacOS X and Windows (using MSYS2, Cygwin or WSL) work too.&lt;/p&gt; &#xA;&lt;p&gt;Update notification here or @ &lt;a href=&#34;https://twitter.com/drwetter&#34;&gt;twitter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;You can download testssl.sh branch 3.1dev just by cloning this git repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --depth 1 https://github.com/drwetter/testssl.sh.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Think of 3.1dev like a rolling release, see below. For the stable version help yourself by downloading the &lt;a href=&#34;https://codeload.github.com/drwetter/testssl.sh/zip/3.0.4&#34;&gt;ZIP&lt;/a&gt; or &lt;a href=&#34;https://codeload.github.com/drwetter/testssl.sh/tar.gz/3.0.4&#34;&gt;tar.gz&lt;/a&gt; archive. Just &lt;code&gt;cd&lt;/code&gt; to the directory created (=INSTALLDIR) and run it off there.&lt;/p&gt; &#xA;&lt;h4&gt;Docker&lt;/h4&gt; &#xA;&lt;p&gt;Testssl.sh has minimal requirements. As stated you don&#39;t have to install or build anything. You can just run it from the pulled/cloned directory. Still if you don&#39;t want to pull the GitHub repo to your directory of choice you can pull a container from dockerhub and run it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -ti  drwetter/testssl.sh &amp;lt;your_cmd_line&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you have cloned this repo you also can just &lt;code&gt;cd&lt;/code&gt; to the INSTALLDIR and run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build . -t imagefoo &amp;amp;&amp;amp; docker run --rm -t imagefoo example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more please consult &lt;a href=&#34;https://github.com/drwetter/testssl.sh/raw/3.1dev/Dockerfile.md&#34;&gt;Dockerfile.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Status&lt;/h3&gt; &#xA;&lt;p&gt;We&#39;re currently in the development phase, version 3.1dev. 3.1dev will eventually become 3.2. Bigger features are developed in a separate branch before merged into 3.1dev to avoid hiccups or inconsistencies. Albeit we try to keep 3.1dev as solid as possible things will certainly change in 3.1dev. Think of the 3.1dev branch like a rolling release. So if you need stability the 3.0 branch is better for you.&lt;/p&gt; &#xA;&lt;p&gt;Version 3.0.X receives bugfixes, labeled as 3.0.1, 3.0.2 and so on. This will happen until 3.2 is released.&lt;/p&gt; &#xA;&lt;p&gt;Support for 2.9.5 has been dropped. Supported is &amp;gt;= 3.0.x only.&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;.. it is there for reading. Please do so :-) -- at least before asking questions. See man page in groff, html and markdown format in &lt;code&gt;~/doc/&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://testssl.sh/&#34;&gt;https://testssl.sh/&lt;/a&gt; will help to get you started.&lt;/li&gt; &#xA; &lt;li&gt;For the (older) version 2.8, Will Hunt provides a longer &lt;a href=&#34;https://www.4armed.com/blog/doing-your-own-ssl-tls-testing/&#34;&gt;description&lt;/a&gt;, including useful background information.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Contributions are welcome! See &lt;a href=&#34;https://github.com/drwetter/testssl.sh/raw/3.1dev/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for details. Please also have a look at the &lt;a href=&#34;https://github.com/drwetter/testssl.sh/raw/3.1dev/Coding_Convention.md&#34;&gt;Coding Convention&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Bug reports&lt;/h3&gt; &#xA;&lt;p&gt;Bug reports are important. It makes this project more robust.&lt;/p&gt; &#xA;&lt;p&gt;Please file bugs in the issue tracker @ GitHub. Do not forget to provide detailed information, see template for issue, and further details @ &lt;a href=&#34;https://github.com/drwetter/testssl.sh/wiki/Bug-reporting&#34;&gt;https://github.com/drwetter/testssl.sh/wiki/Bug-reporting&lt;/a&gt;. Nobody can read your thoughts -- yet. And only agencies your screen ;-)&lt;/p&gt; &#xA;&lt;p&gt;You can also debug yourself, see &lt;a href=&#34;https://github.com/drwetter/testssl.sh/wiki/Findings-and-HowTo-Fix-them&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;External/related projects&lt;/h3&gt; &#xA;&lt;p&gt;Please address questions not specifically to the code of testssl.sh to the respective projects below.&lt;/p&gt; &#xA;&lt;h4&gt;Web frontend&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/johannesschaefer/webnettools&#34;&gt;https://github.com/johannesschaefer/webnettools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TKCERT/testssl.sh-webfrontend&#34;&gt;https://github.com/TKCERT/testssl.sh-webfrontend&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Free to use Web frontend + commercial API&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://inspect.rapydblok.com&#34;&gt;https://inspect.rapydblok.com&lt;/a&gt; (see also &lt;a href=&#34;https://inspect.rapydblok.com/about&#34;&gt;https://inspect.rapydblok.com/about&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Mass scanner w parallel scans and elastic searching the results&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TKCERT/testssl.sh-masscan&#34;&gt;https://github.com/TKCERT/testssl.sh-masscan&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Another ready-to-go docker image is at:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://quay.io/repository/jumanjiman/testssl&#34;&gt;https://quay.io/repository/jumanjiman/testssl&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Privacy checker using testssl.sh&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://privacyscore.org&#34;&gt;https://privacyscore.org&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Nagios / Icinga Plugins&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dnmvisser/nagios-testssl&#34;&gt;https://github.com/dnmvisser/nagios-testssl&lt;/a&gt; (Python 3)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitgud.malvager.net/Wazakindjes/icinga2_plugins/src/master/check_testssl.sh&#34;&gt;https://gitgud.malvager.net/Wazakindjes/icinga2_plugins/src/master/check_testssl.sh&lt;/a&gt; (Shell)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Brew package&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;see &lt;a href=&#34;https://github.com/drwetter/testssl.sh/issues/233&#34;&gt;#233&lt;/a&gt; and &lt;a href=&#34;https://github.com/Homebrew/homebrew&#34;&gt;https://github.com/Homebrew/homebrew&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Daemon for batch execution of testssl.sh command files&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bitsofinfo/testssl.sh-processor&#34;&gt;https://github.com/bitsofinfo/testssl.sh-processor&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Daemon for batch processing of testssl.sh JSON result files for sending Slack alerts, reactive copying etc&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bitsofinfo/testssl.sh-alerts&#34;&gt;https://github.com/bitsofinfo/testssl.sh-alerts&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;GitHub Actions&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/marketplace/actions/testssl-sh-scan&#34;&gt;https://github.com/marketplace/actions/testssl-sh-scan&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>fbelavenuto/arpl</title>
    <updated>2022-10-01T02:03:08Z</updated>
    <id>tag:github.com,2022-10-01:/fbelavenuto/arpl</id>
    <link href="https://github.com/fbelavenuto/arpl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automated Redpill Loader&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Automated Redpill Loader&lt;/h1&gt; &#xA;&lt;p&gt;This particular project was created to facilitate my testing with Redpill and I decided to share it with other users.&lt;/p&gt; &#xA;&lt;p&gt;It is still in alpha stage, with little documentation, but it is functional. I&#39;m Brazilian and my English is not good, so I apologize for my translations.&lt;/p&gt; &#xA;&lt;p&gt;I tried to make the system as user-friendly as possible, to make life easier. The loader automatically detects which device is being used, SATADom or USB, detecting its VID and PID correctly. redpill-lkm has been edited to allow booting the kernel without setting the variables related to network interfaces so the loader (and user) doesn&#39;t have to worry about that. The Jun&#39;s code that makes the zImage and Ramdisk patch is embedded, if there is a change in &#34;zImage&#34; or &#34;rd.gz&#34; by some smallupdate, the loader re-applies the patches. The most important kernel modules are built into the DSM ramdisk image for automatic peripheral detection.&lt;/p&gt; &#xA;&lt;h1&gt;Important&lt;/h1&gt; &#xA;&lt;h2&gt;It is highly recommended to use an SSD for the loader in the case of the option via DoM or a fast USB flash drive&lt;/h2&gt; &#xA;&lt;h2&gt;You must have at least 4GB of RAM, both in baremetal and VMs&lt;/h2&gt; &#xA;&lt;h2&gt;The DSM kernel is compatible with SATA ports, not SAS/SCSI/etc. For device-tree models only SATA ports work. For the other models, another type of disks may work.&lt;/h2&gt; &#xA;&lt;h1&gt;Use&lt;/h1&gt; &#xA;&lt;p&gt;To use this project, download the latest image available and burn it to a USB stick or SATA disk-on-module. Set the PC to boot from the burned media and follow the informations on the screen. When booting, the user can call the &#34;menu.sh&#34; command from the computer itself, access via SSH or use the virtual terminal (ttyd) by typing the address provided on the screen (http://(ip):7681). The loader will automatically increase the size of the last partition and use this space as cache if it is larger than 2GiB.&lt;/p&gt; &#xA;&lt;p&gt;The menu system is dynamic and I hope it is intuitive enough that the user can use it without any problems. Its allows you to choose a model, the existing buildnumber for the chosen model, type or randomly create a serial number, add/remove addons, add/remove/view &#34;cmdline&#34; and &#34;synoinfo&#34; entries, choose the LKM version, create the loader, boot, manually edit the configuration file, choose a keymap, update and exit.&lt;/p&gt; &#xA;&lt;p&gt;Changing addons and synoinfo entries require re-creating the loader, cmdline entries do not.&lt;/p&gt; &#xA;&lt;p&gt;There is no need to configure the VID/PID (if using a USB stick) or define the MAC Addresses of the network interfaces. If the user wants to modify the MAC Address of any interface, uses the &#34;Change MAC&#34; into &#34;cmdline&#34; menu.&lt;/p&gt; &#xA;&lt;p&gt;If a model is chosen that uses the Device-tree system to define the HDs, there is no need to configure anything. In the case of models that do not use device-tree, the configurations must be done manually and for this there is an option in the &#34;cmdline&#34; menu to display the SATA controllers, DUMMY ports and ports in use, to assist in the creation of the &#34;SataPortMap&#34;, &#34;DiskIdxMap&#34; and &#34;sata_remap&#34; if necessary.&lt;/p&gt; &#xA;&lt;p&gt;Another important point is that the loader detects whether or not the CPU has the FMA3 instruction and does not display the models that require it. So if the DS918+ and DVA3221 models are not displayed it is because of the CPU&#39;s lack of support for FMA instructions. You can disable this restriction and test at your own risk.&lt;/p&gt; &#xA;&lt;p&gt;I developed a simple patch to no longer display the DUMMY port error on models without device-tree, the user will be able to install without having to worry about it.&lt;/p&gt; &#xA;&lt;h1&gt;Thanks&lt;/h1&gt; &#xA;&lt;p&gt;All code was based on the work of TTG, pocopico, jumkey and others involved in continuing TTG&#39;s original redpill-load project.&lt;/p&gt; &#xA;&lt;p&gt;More information will be added in the future.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google/oss-fuzz</title>
    <updated>2022-10-01T02:03:08Z</updated>
    <id>tag:github.com,2022-10-01:/google/oss-fuzz</id>
    <link href="https://github.com/google/oss-fuzz" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OSS-Fuzz - continuous fuzzing for open source software.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OSS-Fuzz: Continuous Fuzzing for Open Source Software&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Fuzz_testing&#34;&gt;Fuzz testing&lt;/a&gt; is a well-known technique for uncovering programming errors in software. Many of these detectable errors, like &lt;a href=&#34;https://en.wikipedia.org/wiki/Buffer_overflow&#34;&gt;buffer overflow&lt;/a&gt;, can have serious security implications. Google has found &lt;a href=&#34;https://bugs.chromium.org/p/chromium/issues/list?q=label%3AStability-LibFuzzer%2CStability-AFL%20-status%3ADuplicate%2CWontFix&amp;amp;can=1&#34;&gt;thousands&lt;/a&gt; of security vulnerabilities and stability bugs by deploying &lt;a href=&#34;https://security.googleblog.com/2016/08/guided-in-process-fuzzing-of-chrome.html&#34;&gt;guided in-process fuzzing of Chrome components&lt;/a&gt;, and we now want to share that service with the open source community.&lt;/p&gt; &#xA;&lt;p&gt;In cooperation with the &lt;a href=&#34;https://www.coreinfrastructure.org/&#34;&gt;Core Infrastructure Initiative&lt;/a&gt; and the &lt;a href=&#34;https://www.openssf.org/&#34;&gt;OpenSSF&lt;/a&gt;, OSS-Fuzz aims to make common open source software more secure and stable by combining modern fuzzing techniques with scalable, distributed execution. Projects that do not qualify for OSS-Fuzz (e.g. closed source) can run their own instances of &lt;a href=&#34;https://github.com/google/clusterfuzz&#34;&gt;ClusterFuzz&lt;/a&gt; or &lt;a href=&#34;https://google.github.io/clusterfuzzlite/&#34;&gt;ClusterFuzzLite&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We support the &lt;a href=&#34;https://llvm.org/docs/LibFuzzer.html&#34;&gt;libFuzzer&lt;/a&gt;, &lt;a href=&#34;https://github.com/AFLplusplus/AFLplusplus&#34;&gt;AFL++&lt;/a&gt;, and &lt;a href=&#34;https://github.com/google/honggfuzz&#34;&gt;Honggfuzz&lt;/a&gt; fuzzing engines in combination with &lt;a href=&#34;https://github.com/google/sanitizers&#34;&gt;Sanitizers&lt;/a&gt;, as well as &lt;a href=&#34;https://github.com/google/clusterfuzz&#34;&gt;ClusterFuzz&lt;/a&gt;, a distributed fuzzer execution environment and reporting tool.&lt;/p&gt; &#xA;&lt;p&gt;Currently, OSS-Fuzz supports C/C++, Rust, Go, Python and Java/JVM code. Other languages supported by &lt;a href=&#34;https://llvm.org&#34;&gt;LLVM&lt;/a&gt; may work too. OSS-Fuzz supports fuzzing x86_64 and i386 builds.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/google/oss-fuzz/master/docs/images/process.png&#34; alt=&#34;OSS-Fuzz process diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Read our &lt;a href=&#34;https://google.github.io/oss-fuzz&#34;&gt;detailed documentation&lt;/a&gt; to learn how to use OSS-Fuzz.&lt;/p&gt; &#xA;&lt;h2&gt;Trophies&lt;/h2&gt; &#xA;&lt;p&gt;As of July 2022, OSS-Fuzz has found over &lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?q=-status%3AWontFix%2CDuplicate%20-component%3AInfra&amp;amp;can=1&#34;&gt;40,500&lt;/a&gt; bugs in &lt;a href=&#34;https://github.com/google/oss-fuzz/tree/master/projects&#34;&gt;650&lt;/a&gt; open source projects.&lt;/p&gt; &#xA;&lt;h2&gt;Blog posts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2016-12-01 - &lt;a href=&#34;https://opensource.googleblog.com/2016/12/announcing-oss-fuzz-continuous-fuzzing.html&#34;&gt;Announcing OSS-Fuzz: Continuous fuzzing for open source software&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2017-05-08 - &lt;a href=&#34;https://opensource.googleblog.com/2017/05/oss-fuzz-five-months-later-and.html&#34;&gt;OSS-Fuzz: Five months later, and rewarding projects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2018-11-06 - &lt;a href=&#34;https://security.googleblog.com/2018/11/a-new-chapter-for-oss-fuzz.html&#34;&gt;A New Chapter for OSS-Fuzz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-10-09 - &lt;a href=&#34;https://security.googleblog.com/2020/10/fuzzing-internships-for-open-source.html&#34;&gt;Fuzzing internships for Open Source Software&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-12-07 - &lt;a href=&#34;https://security.googleblog.com/2020/12/improving-open-source-security-during.html&#34;&gt;Improving open source security during the Google summer internship program&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>