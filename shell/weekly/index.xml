<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-28T01:59:46Z</updated>
  <subtitle>Weekly Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dw-0/kiauh</title>
    <updated>2024-01-28T01:59:46Z</updated>
    <id>tag:github.com,2024-01-28:/dw-0/kiauh</id>
    <link href="https://github.com/dw-0/kiauh" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Klipper Installation And Update Helper&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a&gt; &lt;img src=&#34;https://raw.githubusercontent.com/dw-0/kiauh/master/resources/screenshots/kiauh.png&#34; alt=&#34;KIAUH logo&#34; height=&#34;181&#34;&gt; &lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;&lt;a&gt;Klipper Installation And Update Helper&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;a&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; A handy installation script that makes installing Klipper (and more) a breeze! &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a&gt;&lt;img src=&#34;https://img.shields.io/github/license/dw-0/kiauh&#34;&gt;&lt;/a&gt; &lt;a&gt;&lt;img src=&#34;https://img.shields.io/github/stars/dw-0/kiauh&#34;&gt;&lt;/a&gt; &lt;a&gt;&lt;img src=&#34;https://img.shields.io/github/forks/dw-0/kiauh&#34;&gt;&lt;/a&gt; &lt;a&gt;&lt;img src=&#34;https://img.shields.io/github/languages/top/dw-0/kiauh?logo=gnubash&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt; &lt;a&gt;&lt;img src=&#34;https://img.shields.io/github/v/tag/dw-0/kiauh&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/dw-0/kiauh&#34;&gt;&lt;/a&gt; &lt;a&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/dw-0/kiauh&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt; üìÑÔ∏è Instructions üìÑ &lt;/h2&gt; &#xA;&lt;h3&gt;üìã Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;KIAUH is a script that assists you in installing Klipper on a Linux operating system that has already been flashed to your Raspberry Pi&#39;s (or other SBC&#39;s) SD card. As a result, you must ensure that you have a functional Linux system on hand. &lt;code&gt;Raspberry Pi OS Lite (either 32bit or 64bit)&lt;/code&gt; is a recommended Linux image if you are using a Raspberry Pi. The &lt;a href=&#34;https://www.raspberrypi.com/software/&#34;&gt;official Raspberry Pi Imager&lt;/a&gt; is the simplest way to flash an image like this to an SD card.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Once you have downloaded, installed and launched the Raspberry Pi Imager, select &lt;code&gt;Choose OS -&amp;gt; Raspberry Pi OS (other)&lt;/code&gt;: \&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/dw-0/kiauh/master/resources/screenshots/rpi_imager1.png&#34; alt=&#34;KIAUH logo&#34; height=&#34;350&#34;&gt; &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Then select &lt;code&gt;Raspberry Pi OS Lite (32bit)&lt;/code&gt; (or 64bit if you want to use that instead):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/dw-0/kiauh/master/resources/screenshots/rpi_imager2.png&#34; alt=&#34;KIAUH logo&#34; height=&#34;350&#34;&gt; &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Back in the Raspberry Pi Imager&#39;s main menu, select the corresponding SD card to which you want to flash the image.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure to go into the Advanced Option (the cog icon in the lower left corner of the main menu) and enable SSH and configure Wi-Fi.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you need more help for using the Raspberry Pi Imager, please visit the &lt;a href=&#34;https://www.raspberrypi.com/documentation/computers/getting-started.html&#34;&gt;official documentation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These steps &lt;strong&gt;only&lt;/strong&gt; apply if you are actually using a Raspberry Pi. In case you want to use a different SBC (like an Orange Pi or any other Pi derivates), please look up on how to get an appropriate Linux image flashed to the SD card before proceeding further (usually done with Balena Etcher in those cases). Also make sure that KIAUH will be able to run and operate on the Linux Distribution you are going to flash. You likely will have the most success with distributions based on Debian 11 Bullseye. Read the notes further down below in this document.&lt;/p&gt; &#xA;&lt;h3&gt;üíæ Download and use KIAUH&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;üì¢ Disclaimer: Usage of this script happens at your own risk!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; &lt;br&gt; To download this script, it is necessary to have git installed. If you don&#39;t have git already installed, or if you are unsure, run the following command:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install git -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; &lt;br&gt; Once git is installed, use the following command to download KIAUH into your home-directory:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd ~ &amp;amp;&amp;amp; git clone https://github.com/dw-0/kiauh.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; &lt;br&gt; Finally, start KIAUH by running the next command:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./kiauh/kiauh.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; &lt;br&gt; You should now find yourself in the main menu of KIAUH. You will see several actions to choose from depending on what you want to do. To choose an action, simply type the corresponding number into the &#34;Perform action&#34; prompt and confirm by hitting ENTER.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;‚ùó Notes ‚ùó&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;strong&gt;üìã Please see the &lt;a href=&#34;https://raw.githubusercontent.com/dw-0/kiauh/master/docs/changelog.md&#34;&gt;Changelog&lt;/a&gt; for possible important changes!&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mainly tested on Raspberry Pi OS Lite (Debian 10 Buster / Debian 11 Bullseye) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Other Debian based distributions (like Ubuntu 20 to 22) likely work too&lt;/li&gt; &#xA;   &lt;li&gt;Reported to work on Armbian as well but not tested in detail&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;During the use of this script you will be asked for your sudo password. There are several functions involved which need sudo privileges.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;üåê Sources &amp;amp; Further Information&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;h3&gt;&lt;a href=&#34;https://github.com/Klipper3d/klipper&#34;&gt;Klipper&lt;/a&gt;&lt;/h3&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;h3&gt;&lt;a href=&#34;https://github.com/Arksine/moonraker&#34;&gt;Moonraker&lt;/a&gt;&lt;/h3&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;h3&gt;&lt;a href=&#34;https://github.com/mainsail-crew/mainsail&#34;&gt;Mainsail&lt;/a&gt;&lt;/h3&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Klipper3d/klipper/master/docs/img/klipper-logo.png&#34; alt=&#34;Klipper Logo&#34; height=&#34;64&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/9563098?v=4&#34; alt=&#34;Arksine avatar&#34; height=&#34;64&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mainsail-crew/docs/master/assets/img/logo.png&#34; alt=&#34;Mainsail Logo&#34; height=&#34;64&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;by &lt;a href=&#34;https://github.com/KevinOConnor&#34;&gt;KevinOConnor&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;by &lt;a href=&#34;https://github.com/Arksine&#34;&gt;Arksine&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;by &lt;a href=&#34;https://github.com/mainsail-crew&#34;&gt;mainsail-crew&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;h3&gt;&lt;a href=&#34;https://github.com/fluidd-core/fluidd&#34;&gt;Fluidd&lt;/a&gt;&lt;/h3&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;h3&gt;&lt;a href=&#34;https://github.com/jordanruthe/KlipperScreen&#34;&gt;KlipperScreen&lt;/a&gt;&lt;/h3&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;h3&gt;&lt;a href=&#34;https://github.com/OctoPrint/OctoPrint&#34;&gt;OctoPrint&lt;/a&gt;&lt;/h3&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fluidd-core/fluidd/master/docs/assets/images/logo.svg?sanitize=true&#34; alt=&#34;Fluidd Logo&#34; height=&#34;64&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/31575189?v=4&#34; alt=&#34;jordanruthe avatar&#34; height=&#34;64&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/OctoPrint/OctoPrint/master/docs/images/octoprint-logo.png&#34; alt=&#34;OctoPrint Logo&#34; height=&#34;64&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;by &lt;a href=&#34;https://github.com/fluidd-core&#34;&gt;fluidd-core&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;by &lt;a href=&#34;https://github.com/jordanruthe&#34;&gt;jordanruthe&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;by &lt;a href=&#34;https://github.com/OctoPrint&#34;&gt;OctoPrint&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;h3&gt;&lt;a href=&#34;https://github.com/nlef/moonraker-telegram-bot&#34;&gt;Moonraker-Telegram-Bot&lt;/a&gt;&lt;/h3&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;h3&gt;&lt;a href=&#34;https://github.com/Kragrathea/pgcode&#34;&gt;PrettyGCode for Klipper&lt;/a&gt;&lt;/h3&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;h3&gt;&lt;a href=&#34;https://github.com/TheSpaghettiDetective/moonraker-obico&#34;&gt;Obico for Klipper&lt;/a&gt;&lt;/h3&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/52351624?v=4&#34; alt=&#34;nlef avatar&#34; height=&#34;64&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/5917231?v=4&#34; alt=&#34;Kragrathea avatar&#34; height=&#34;64&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/46323662?s=200&amp;amp;v=4&#34; alt=&#34;Obico logo&#34; height=&#34;64&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;by &lt;a href=&#34;https://github.com/nlef&#34;&gt;nlef&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;by &lt;a href=&#34;https://github.com/Kragrathea&#34;&gt;Kragrathea&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;by &lt;a href=&#34;https://github.com/TheSpaghettiDetective&#34;&gt;Obico&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;h3&gt;&lt;a href=&#34;https://github.com/Clon1998/mobileraker_companion&#34;&gt;Mobileraker&#39;s Companion&lt;/a&gt;&lt;/h3&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;h3&gt;&lt;a href=&#34;https://octoeverywhere.com/?source=kiauh_readme&#34;&gt;OctoEverywhere For Klipper&lt;/a&gt;&lt;/h3&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;h3&gt;&lt;/h3&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/Clon1998/mobileraker_companion&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Clon1998/mobileraker/master/assets/icon/mr_appicon.png&#34; alt=&#34;OctoEverywhere Logo&#34; height=&#34;64&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://octoeverywhere.com/?source=kiauh_readme&#34;&gt;&lt;img src=&#34;https://octoeverywhere.com/img/logo.svg?sanitize=true&#34; alt=&#34;OctoEverywhere Logo&#34; height=&#34;64&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;by &lt;a href=&#34;https://github.com/Clon1998&#34;&gt;Patrick Schmidt&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;by &lt;a href=&#34;https://github.com/QuinnDamerell&#34;&gt;Quinn Damerell&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;‚ú® Credits ‚ú®&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A big thank you to &lt;a href=&#34;https://github.com/lixxbox&#34;&gt;lixxbox&lt;/a&gt; for that awesome KIAUH-Logo!&lt;/li&gt; &#xA; &lt;li&gt;Also, a big thank you to everyone who supported my work with a &lt;a href=&#34;https://ko-fi.com/dw__0&#34;&gt;Ko-fi&lt;/a&gt; !&lt;/li&gt; &#xA; &lt;li&gt;Last but not least: Thank you to all contributors and members of the Klipper Community who like and share this project!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;A special thank you to JetBrains for sponsoring this project with their incredible software!&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.jetbrains.com/community/opensource/#support&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://resources.jetbrains.com/storage/products/company/brand/logos/jb_beam.png&#34; alt=&#34;JetBrains Logo (Main) logo.&#34; height=&#34;128&#34;&gt; &lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>GameServerManagers/LinuxGSM</title>
    <updated>2024-01-28T01:59:46Z</updated>
    <id>tag:github.com,2024-01-28:/GameServerManagers/LinuxGSM</id>
    <link href="https://github.com/GameServerManagers/LinuxGSM" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The command-line tool for quick, simple deployment and management of Linux dedicated game servers.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://linuxgsm.com&#34;&gt;&lt;img src=&#34;https://i.imgur.com/Eoh1jsi.jpg&#34; alt=&#34;LinuxGSM&#34;&gt; &lt;/a&gt;&lt;a href=&#34;https://www.codacy.com/gh/GameServerManagers/LinuxGSM/dashboard&#34;&gt;&lt;img src=&#34;https://img.shields.io/codacy/grade/d19c5234dc3743d8a8a14093711ca52d?style=flat-square&amp;amp;logo=codacy&amp;amp;logoColor=white&#34; alt=&#34;Codacy grade&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bitbucket.org/GameServerManagers/linuxgsm&#34;&gt;&lt;img alt=&#34;GitHub Workflow Status&#34; src=&#34;https://img.shields.io/github/actions/workflow/status/GameServerManagers/LinuxGSM/git-sync.yml?color=0052CC&amp;amp;logo=bitbucket&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://linuxgsm.com/discord&#34;&gt;&lt;img alt=&#34;Discord&#34; src=&#34;https://img.shields.io/discord/127498813903601664?color=5865F2&amp;amp;label=%20&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://developer.valvesoftware.com/wiki/SteamCMD&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SteamCMD-000000?style=flat-square&amp;amp;logo=Steam&amp;amp;logoColor=white&#34; alt=&#34;SteamCMD&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/GameServerManagers/LinuxGSM/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/gameservermanagers/LinuxGSM?style=flat-square&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://linuxgsm.com&#34;&gt;LinuxGSM&lt;/a&gt; is the command-line tool for quick, simple deployment and management of Linux dedicated game servers.&lt;/p&gt; &#xA;&lt;h2&gt;Hassle-Free Dedicated Game Servers&lt;/h2&gt; &#xA;&lt;p&gt;Traditionally game servers are not easy to manage yourself. Admins often have to spend hours messing around trying to get their servers working. LinuxGSM is a command-line tool designed to be as simple as possible, allowing admins to spend less time on management and more time gaming.&lt;/p&gt; &#xA;&lt;h2&gt;Main features&lt;/h2&gt; &#xA;&lt;p&gt;100+ game servers supported&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;üöö&lt;/span&gt; Installer&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üîç&lt;/span&gt; Monitor&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;‚òé&lt;/span&gt; Alerts&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;‚òÅ&lt;/span&gt; Updater&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üìò&lt;/span&gt; Server Details&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üíæ&lt;/span&gt; Backup&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üíª&lt;/span&gt; Console&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;üêß&lt;/span&gt; Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;LinuxGSM will run on popular distros as long as the minimum requirements are met.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu&lt;/li&gt; &#xA; &lt;li&gt;Debian&lt;/li&gt; &#xA; &lt;li&gt;CentOS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Other distros are likely to work but are not fully tested.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;üîß&lt;/span&gt; Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Each game server has specific dependency requirements. Visit a specific game server installation page on the &lt;a href=&#34;https://linuxgsm.com&#34;&gt;LinuxGSM&lt;/a&gt; website to check dependency requirements for the game server you want to install.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;üìò&lt;/span&gt; Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation is found at &lt;a href=&#34;https://linuxgsm.com&#34;&gt;linuxgsm.com&lt;/a&gt; and &lt;a href=&#34;https://docs.linuxgsm.com&#34;&gt;docs.linuxgsm.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;‚ùì&lt;/span&gt; Support&lt;/h2&gt; &#xA;&lt;p&gt;There are various ways to get support, check out the &lt;a href=&#34;https://linuxgsm.com/support/&#34;&gt;support&lt;/a&gt; page for the right support.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;‚ù§Ô∏è&lt;/span&gt; Sponsor&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to &lt;a href=&#34;https://linuxgsm.com/sponsor&#34;&gt;sponsor&lt;/a&gt; to the project there are several ways you can, via &lt;a href=&#34;https://github.com/sponsors/dgibbs64&#34;&gt;GitHub Sponsors&lt;/a&gt; and &lt;a href=&#34;https://www.paypal.me/dgibbs64&#34;&gt;PayPal&lt;/a&gt;. I would like to thank everyone who sponsors me. Since 2012 LinuxGSM has been steadily growing with new servers, features, and improvements added regularly.&lt;/p&gt; &#xA;&lt;h2&gt;üßô‚Äç‚ôÇÔ∏è Contributors&lt;/h2&gt; &#xA;&lt;p&gt;A big thank you goes to all the wonderful people who contribute ideas, code, docs, and support to this project.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>TheFreeman193/PIFS</title>
    <updated>2024-01-28T01:59:46Z</updated>
    <id>tag:github.com,2024-01-28:/TheFreeman193/PIFS</id>
    <link href="https://github.com/TheFreeman193/PIFS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of build properties for the PIF module&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Play Integrity Fix Props Collection&lt;/h1&gt; &#xA;&lt;!-- markdownlint-disable no-inline-html --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ko-fi.com/V7V4SGXD9&#34; title=&#34;Mmm... coffee!&#34;&gt;&lt;img src=&#34;https://storage.ko-fi.com/cdn/brandasset/kofi_button_blue.png&#34; alt=&#34;Support me on Ko-fi&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is this?&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains JSON files compatible with the &lt;a href=&#34;https://github.com/chiteroman/PlayIntegrityFix&#34;&gt;Play Integrity Fix&lt;/a&gt; module by &lt;a href=&#34;https://github.com/chiteroman/&#34;&gt;chiteroman&lt;/a&gt; or &lt;a href=&#34;https://github.com/osm0sis/PlayIntegrityFork&#34;&gt;PlayIntegrityFork&lt;/a&gt; made by &lt;a href=&#34;https://github.com/osm0sis&#34;&gt;osm0sis&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t use a custom ROM and haven&#39;t rooted your Android device, you&#39;re in the wrong place!&lt;/p&gt; &#xA;&lt;p&gt;These files aren&#39;t tested - they&#39;re just a sample of device profiles available online.&lt;/p&gt; &#xA;&lt;h2&gt;Why is this needed?&lt;/h2&gt; &#xA;&lt;p&gt;By default, the PIF module and some of its forks use a default set of build properties (hereafter called a &lt;em&gt;profile&lt;/em&gt;) including a build fingerprint for Play Integrity attestation. With tens of thousands of users using the same profile, the Play Integrity servers inevitably block the associated fingerprint for software attestation.&lt;/p&gt; &#xA;&lt;p&gt;The best solution in the meantime is for every user to choose a working profile (&lt;code&gt;pif.json&lt;/code&gt; file) of their own. Both the original PIF module and its major fork support this using a JSON file containing real properties from a working device.&lt;/p&gt; &#xA;&lt;h2&gt;How do I choose a JSON file?&lt;/h2&gt; &#xA;&lt;h3&gt;Option 1: Using &lt;code&gt;pickaprint.sh&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: It&#39;s now recommended to download and run the script as below as this permits the interactive mode where you can mark profiles as working or not working. If you pipe the script directly from &lt;code&gt;curl&lt;/code&gt; or &lt;code&gt;wget&lt;/code&gt;, the interactive mode is disabled and you&#39;ll need to manually mark the current profile using the commands shown when the script exits.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This repository includes &lt;code&gt;pickaprint.sh&lt;/code&gt; which automates the random selection of a profile with the same ABI compatibility as your device. It will download the PIFS repository, extract the JSON files, and pick one from the relevant directory at random.&lt;/p&gt; &#xA;&lt;p&gt;First, enter a root shell and choose your desired download location (it must allow execution):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;su # The script needs to be run as root in order to copy a profile to /data/adb&#xA;cd /data/local/tmp # Choose a place where execution is permitted&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, if you&#39;re using Magisk for root:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;/data/adb/magisk/busybox wget -O pickaprint.sh &#34;https://raw.githubusercontent.com/TheFreeman193/PIFS/main/pickaprint.sh&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you use KernelSU (KSU):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;/data/adb/ksu/bin/busybox wget -O pickaprint.sh &#34;https://raw.githubusercontent.com/TheFreeman193/PIFS/main/pickaprint.sh&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once downloaded, make the script executable and run it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;chmod 755 ./pickaprint.sh&#xA;./pickaprint.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Please don&#39;t just run random scripts from the internet, especially as root. I strongly urge you to look at the script first and get a basic idea of what it does.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you haven&#39;t run the script before, it will download this repository from GitHub and extract the JSON profiles.&lt;/p&gt; &#xA;&lt;p&gt;Once a subdirectory called &lt;code&gt;JSON&lt;/code&gt; exists, the script will search for JSON profiles there instead of downloading the repository all over again. If the script version is newer than the version in the &lt;code&gt;JSON&lt;/code&gt; directory, it will download the latest version.&lt;/p&gt; &#xA;&lt;p&gt;Therefore, to update the collection, run the &lt;code&gt;wget&lt;/code&gt; command above to get the latest &lt;code&gt;pickaprint.sh&lt;/code&gt; script, and this will update the collection when next run.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you could download/clone the repository and run the &lt;code&gt;pickaprint.sh&lt;/code&gt; script directly from the download location.&lt;/p&gt; &#xA;&lt;h3&gt;Script Arguments&lt;/h3&gt; &#xA;&lt;p&gt;Please &lt;a href=&#34;https://raw.githubusercontent.com/TheFreeman193/PIFS/main/#full-script-usage&#34;&gt;see below&lt;/a&gt; for all the arguments you can pass to &lt;code&gt;pickaprint.sh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Option 2: Manually Selecting a File&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The JSON files in this collection are structured to be compatible with &lt;a href=&#34;https://github.com/osm0sis/PlayIntegrityFork&#34;&gt;PlayIntegrityFork by osm0sis&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using &lt;a href=&#34;https://github.com/chiteroman/PlayIntegrityFix&#34;&gt;chiteroman&#39;s module&lt;/a&gt;, you&#39;ll need to remove some of the entries and rename others. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/TheFreeman193/PIFS/main/#converting-profiles-to-the-chiteroman-format&#34;&gt;format conversion&lt;/a&gt; section below for converting to the chiteroman format.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Please choose a random file from the relevant directory.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The complete compatibility matrix for profiles and Android device isn&#39;t yet known - the Android ecosystem is huge and diverse, so this is to be expected. It appears the list of ABIs your device supports needs to match the device the profile is from.&lt;/p&gt; &#xA;&lt;p&gt;To test for this, enter the following in your favourite terminal emulator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;getprop | grep &#39;cpu\.abilist&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with ADB:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;adb shell &#34;getprop | grep &#39;cpu\.abilist&#39;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should get a result that looks something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[ro.product.cpu.abilist]: [arm64-v8a,armeabi-v7a,armeabi]&#xA;[ro.product.cpu.abilist32]: [armeabi-v7a,armeabi]&#xA;[ro.product.cpu.abilist64]: [arm64-v8a]&#xA;[ro.system.product.cpu.abilist]: [arm64-v8a,armeabi-v7a,armeabi]&#xA;[ro.system.product.cpu.abilist32]: [armeabi-v7a,armeabi]&#xA;[ro.system.product.cpu.abilist64]: [arm64-v8a]&#xA;[ro.vendor.product.cpu.abilist]: [arm64-v8a,armeabi-v7a,armeabi]&#xA;[ro.vendor.product.cpu.abilist32]: [armeabi-v7a,armeabi]&#xA;[ro.vendor.product.cpu.abilist64]: [arm64-v8a]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this instance, the value to note is &lt;code&gt;arm64-v8a,armeabi-v7a,armeabi&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The repository is divided by common ABI list values, so please pick a random JSON file from the relevant directory. In the example above the directory would be &lt;code&gt;JSON/arm64-v8a,armeabi-v7a,armeabi&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The profile filenames are labelled with the &lt;em&gt;build tags&lt;/em&gt; and &lt;em&gt;build type&lt;/em&gt;. &lt;code&gt;user&lt;/code&gt; build types are more likely to work than &lt;code&gt;userdebug&lt;/code&gt; ones, and &lt;code&gt;release-keys&lt;/code&gt; tagged profiles are more likely to work than &lt;code&gt;dev-keys&lt;/code&gt; or &lt;code&gt;test-keys&lt;/code&gt; ones.&lt;/p&gt; &#xA;&lt;p&gt;Assuming the ABI list you got was &lt;code&gt;arm64-v8a,armeabi-v7a,armeabi&lt;/code&gt;, you should first look in:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;JSON/arm64-v8a,armeabi-v7a,armeabi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;for a JSON file that ends with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;_user_release-keys.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and copy this to the correct location (see below).&lt;/p&gt; &#xA;&lt;h2&gt;Where do I put the JSON file?&lt;/h2&gt; &#xA;&lt;p&gt;If copying a file manually (Option 2) there are a couple of places the JSON might need to go.&lt;/p&gt; &#xA;&lt;p&gt;For the Play Integrity Fix module by &lt;a href=&#34;https://github.com/chiteroman/&#34;&gt;chiteroman&lt;/a&gt; you should copy the JSON file to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;/data/adb/pif.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then follow the &lt;a href=&#34;https://raw.githubusercontent.com/TheFreeman193/PIFS/main/#converting-profiles-to-the-chiteroman-format&#34;&gt;format conversion&lt;/a&gt; section below.&lt;/p&gt; &#xA;&lt;p&gt;For the &lt;a href=&#34;https://github.com/osm0sis&#34;&gt;osm0sis&lt;/a&gt; fork (PlayIntegrityFork):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;/data/adb/modules/playintegrityfix/custom.pif.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An example command in your terminal emulator, for an &lt;code&gt;arm64-v8a,armeabi-v7a,armeabi&lt;/code&gt; device running the &lt;code&gt;chiteroman&lt;/code&gt; module might be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;su -c cp /data/local/tmp/JSON/arm64-v8a,armeabi-v7a,armeabi/Xiaomi_polaris_polaris_9_PKQ1.180729.001_V10.3.3.0.PDGMIXM_user_release-keys.json /data/adb/pif.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with ADB in root mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-batch&#34;&gt;adb push &#34;C:\Users\&amp;lt;User&amp;gt;\Downloads\PIFS\JSON\arm64-v8a,armeabi-v7a,armeabi\Xiaomi_polaris_polaris_9_PKQ1.180729.001_V10.3.3.0.PDGMIXM_user_release-keys.json&#34; /data/adb/pif.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Converting Profiles to the chiteroman Format&lt;/h2&gt; &#xA;&lt;p&gt;When using these profiles manually with the chiteroman module, you must remove additional values that are only compatible with the osm0sis module. You can do this in your preferred text editor.&lt;/p&gt; &#xA;&lt;p&gt;These are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;RELEASE&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;INCREMENTAL&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TYPE&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TAGS&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;*.build.id&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;*.security_patch&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;*api_level&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, you should change &lt;code&gt;DEVICE_INITIAL_SDK_INT&lt;/code&gt; to &lt;code&gt;FIRST_API_LEVEL&lt;/code&gt; and &lt;code&gt;ID&lt;/code&gt; to &lt;code&gt;BUILD_ID&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As an example, the follow JSON file from the collection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;MANUFACTURER&#34;: &#34;Xiaomi&#34;,&#xA;  &#34;MODEL&#34;: &#34;Mi MIX 2S&#34;,&#xA;  &#34;BRAND&#34;: &#34;Xiaomi&#34;,&#xA;  &#34;PRODUCT&#34;: &#34;polaris&#34;,&#xA;  &#34;DEVICE&#34;: &#34;polaris&#34;,&#xA;  &#34;RELEASE&#34;: &#34;9&#34;,&#xA;  &#34;ID&#34;: &#34;PKQ1.180729.001&#34;,&#xA;  &#34;INCREMENTAL&#34;: &#34;V10.3.3.0.PDGMIXM&#34;,&#xA;  &#34;TYPE&#34;: &#34;user&#34;,&#xA;  &#34;TAGS&#34;: &#34;release-keys&#34;,&#xA;  &#34;FINGERPRINT&#34;: &#34;Xiaomi/polaris/polaris:9/PKQ1.180729.001/V10.3.3.0.PDGMIXM:user/release-keys&#34;,&#xA;  &#34;SECURITY_PATCH&#34;: &#34;2019-05-01&#34;,&#xA;  &#34;DEVICE_INITIAL_SDK_INT&#34;: &#34;26&#34;,&#xA;  &#34;*.build.id&#34;: &#34;PKQ1.180729.001&#34;,&#xA;  &#34;*.security_patch&#34;: &#34;2019-05-01&#34;,&#xA;  &#34;*api_level&#34;: &#34;26&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Would look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;MANUFACTURER&#34;: &#34;Xiaomi&#34;,&#xA;  &#34;MODEL&#34;: &#34;Mi MIX 2S&#34;,&#xA;  &#34;BRAND&#34;: &#34;Xiaomi&#34;,&#xA;  &#34;PRODUCT&#34;: &#34;polaris&#34;,&#xA;  &#34;DEVICE&#34;: &#34;polaris&#34;,&#xA;  &#34;BUILD_ID&#34;: &#34;PKQ1.180729.001&#34;,&#xA;  &#34;FINGERPRINT&#34;: &#34;Xiaomi/polaris/polaris:9/PKQ1.180729.001/V10.3.3.0.PDGMIXM:user/release-keys&#34;,&#xA;  &#34;SECURITY_PATCH&#34;: &#34;2019-05-01&#34;,&#xA;  &#34;FIRST_API_LEVEL&#34;: &#34;26&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After conversion.&lt;/p&gt; &#xA;&lt;p&gt;Note how the trailing comma &lt;code&gt;,&lt;/code&gt; on the second-to-last (&lt;code&gt;FIRST_API_LEVEL&lt;/code&gt;) line has been removed. You &lt;strong&gt;must&lt;/strong&gt; remove this comma or the module will fail to read the file.&lt;/p&gt; &#xA;&lt;h2&gt;The JSON file I tried doesn&#39;t work&lt;/h2&gt; &#xA;&lt;p&gt;This is expected. The profiles in this repository haven&#39;t been tested and, even if they had, it&#39;s possible each will only work for a subset of devices.&lt;/p&gt; &#xA;&lt;p&gt;Depending on your device, you can expect ~7-24% of the profiles to work at the time of writing, based on my testing.&lt;/p&gt; &#xA;&lt;p&gt;Keep trying &lt;strong&gt;random&lt;/strong&gt; profiles from the relevant directory until one passes the integrity level you want.&lt;/p&gt; &#xA;&lt;p&gt;Some newer &lt;code&gt;arm64-v8a&lt;/code&gt;-only devices like the Pixel 7 don&#39;t appear to work with &lt;code&gt;arm64-v8a&lt;/code&gt; profiles when using beta builds of Android 14. In these cases, try using &lt;code&gt;arm64-v8a,armeabi-v7a,armeabi&lt;/code&gt; profiles (see the &lt;a href=&#34;https://raw.githubusercontent.com/TheFreeman193/PIFS/main/#the-script-detects-the-wrong-abi-list-on-my-device&#34;&gt;wrong ABI list&lt;/a&gt; section.)&lt;/p&gt; &#xA;&lt;p&gt;Ideally, you&#39;ll be able to use your tested profile going forward. If too many people choose the same one (we&#39;re talking thousands, which is less likely if everyone picks at random) it may get blocked for software attestations. In this case, choose another! There are plenty to go around.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;curl&lt;/code&gt; or &lt;code&gt;wget&lt;/code&gt; not found or inaccessible&lt;/h2&gt; &#xA;&lt;p&gt;There may be edge cases where you&#39;re unable to download the script using the methods described above.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using Termux as your terminal emulator, you can run the following command (as root):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;/data/data/com.termux/files/usr/bin/curl -o pickaprint.sh &#34;https://raw.githubusercontent.com/TheFreeman193/PIFS/main/pickaprint.sh&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then proceed as discussed &lt;a href=&#34;https://raw.githubusercontent.com/TheFreeman193/PIFS/main/#option-1-using-pickaprintsh&#34;&gt;above&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;The script detects the wrong ABI list on my device&lt;/h2&gt; &#xA;&lt;p&gt;If this occurs, you can override the directory the script chooses for fingerprints by setting &lt;code&gt;$FORCEABI&lt;/code&gt; in the environment. In your favourite terminal emulator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;su # Run as root&#xA;cd /data/local/tmp # Choose the location where you downloaded the script&#xA;export FORCEABI=&#34;arm64-v8a,armeabi-v7a,armeabi&#34; # Force a different ABI list&#xA;./pickaprint.sh # Run the script again&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you find fingerprints from another directory work, you can make the &lt;code&gt;$FORCEABI&lt;/code&gt; variable persistent in Termux. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo &#39;export FORCEABI=&#34;arm64-v8a,armeabi-v7a,armeabi&#34;&#39; &amp;gt; /data/data/com.termux/files/home/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This forces the script to always use &lt;code&gt;arm64-v8a,armeabi-v7a,armeabi&lt;/code&gt; profiles.&lt;/p&gt; &#xA;&lt;p&gt;To remove this override immediately, you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;unset FORCEABI&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If added to your emulator&#39;s &lt;code&gt;bashrc&lt;/code&gt; file, you&#39;ll need to remove that line. For Termux, this file can be found at:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;/data/data/com.termux/files/home/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What is the ABI list?&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can skip the first paragraph if you aren&#39;t interested in the technical explanation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;ABIs (application binary interfaces) are low-level interfaces that allow binary processes to interact independent of hardware architecture. You can think of ABIs as the machine-code counterpart to APIs (application programming interfaces). ABIs allow Android components and applications to run on a variety of architectures and instruction sets, like x86 and ARM. Lists of supported ABIs are stored in build properties such as &lt;code&gt;ro.product.cpu.abilist&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The ABI list is a device property, like the &lt;em&gt;model&lt;/em&gt; or &lt;em&gt;fingerpint&lt;/em&gt;, and appears to affect Play Integrity verdicts. Using a fingerprint/profile from a device with a different ABI list fails more often that it works in my testing. This is why the profiles in the repository are divided by supported ABIs - you&#39;re much more like to find a profile that works by using a fingerprint from right directory for your device.&lt;/p&gt; &#xA;&lt;h2&gt;Updates&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;JSON&lt;/code&gt; directory now includes a &lt;code&gt;VERSION&lt;/code&gt; file which documents the collection version. The &lt;code&gt;pickaprint.sh&lt;/code&gt; script checks for this and re-downloads the collection if an updated one is available.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t want to receive updates, set the &lt;code&gt;PIFSNOUPDATE&lt;/code&gt; environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export PIFSNOUPDATE=1 # Disable updates&#xA;&#xA;unset PIFSNOUPDATE # Re-enable updates&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make this persistent by adding such a line to the &lt;code&gt;bashrc&lt;/code&gt; script of your favourite emulator: For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo &#39;export PIFSNOUPDATE=1&#39; &amp;gt; /data/data/com.termux/files/home/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Full Script Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Usage: ./pickaprint.sh [-x] [-i] [-c] [-a] [-s] [-r[r]] [-h|?]&#xA;&#xA;&#xA;  -x  Add existing pif.json/custom.pif.json profile to exclusions and pick a print&#xA;  -xx Add existing pif.json/custom.pif.json profile to exclusions and exit&#xA;  -i  Add existing pif.json/custom.pif.json profile to confirmed and exit&#xA;  -c  Use only confirmed profiles from &#39;/data/adb/pifs/confirmed&#39;&#xA;  -a  Pick profile from entire JSON directory - overrides $FORCEABI&#xA;  -s  Add additional &#39;SDK_INT&#39;/&#39;*.build.version.sdk&#39; props to profile&#xA;  -r  Reset - removes all settings/lists/collection (except confirmed directory)&#xA;  -rr Completely remove - as Reset but also removes confirmed and script file&#xA;  -h  Display this help message&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Excluding Profiles&lt;/h3&gt; &#xA;&lt;p&gt;When you select &lt;em&gt;no&lt;/em&gt; for a profile that doesn&#39;t pass integrity, the script adds it automatically to a list of exclusions, and moves it to &lt;code&gt;/data/adb/pifs/failed/&lt;/code&gt;. The script will not attempt to use this profile again.&lt;/p&gt; &#xA;&lt;p&gt;To exclude the existing profile in the &lt;code&gt;pif.json&lt;/code&gt; or &lt;code&gt;custom.pif.json&lt;/code&gt;, run the script with the &lt;code&gt;-x&lt;/code&gt; argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./pickaprint.sh -x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The exclusions list is stored at &lt;code&gt;/data/adb/failedpifs.lst&lt;/code&gt;. This list ensures you can update the collection without having to try all your previously failed profiles.&lt;/p&gt; &#xA;&lt;p&gt;If a profile exists in the relevant module directory when you first run the script, and you don&#39;t pass the &lt;code&gt;-x&lt;/code&gt; argument, it&#39;ll be backed up to &lt;code&gt;/data/adb/pifs/backup/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Using Only Tested Profiles&lt;/h3&gt; &#xA;&lt;p&gt;When you select &lt;em&gt;yes&lt;/em&gt; for a profile that passes integrity, the script copies it to &lt;code&gt;/data/adb/pifs/confirmed/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To use &lt;strong&gt;only&lt;/strong&gt; profiles from this directory, run the script with the &lt;code&gt;-c&lt;/code&gt; argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./pickaprint.sh -c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can copy your own working profiles to the &lt;code&gt;confirmed&lt;/code&gt; directory and the script will use them when run with &lt;code&gt;-c&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Marking the Current Profile as Confirmed&lt;/h3&gt; &#xA;&lt;p&gt;You can mark the current profile (&lt;code&gt;pif.json&lt;/code&gt; or &lt;code&gt;custom.pif.json&lt;/code&gt;) as confirmed working using the &lt;code&gt;-i&lt;/code&gt; argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./pickaprint.sh -i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The script will exit immediately after adding this profile to &lt;code&gt;/data/adb/pifs/confirmed/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Including &lt;code&gt;SDK_INT&lt;/code&gt; and &lt;code&gt;*.build.version.sdk&lt;/code&gt; Properties&lt;/h3&gt; &#xA;&lt;p&gt;Some devices need to spoof these additional values to pass &lt;code&gt;DEVICE&lt;/code&gt; integrity. If your working profile started failing with the v3 script, you can try using the &lt;code&gt;-s&lt;/code&gt; argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./pickaprint.sh -s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The script will dynamically add the additional properties when copying profiles.&lt;/p&gt; &#xA;&lt;h2&gt;How was this created?&lt;/h2&gt; &#xA;&lt;p&gt;The internet is awash with Android builds and every ROM, whether complete or in source code, contains build properties. My specialty is in automation (please see the &lt;a href=&#34;https://leanpub.com/u/devopscollective&#34;&gt;textbooks&lt;/a&gt; I&#39;ve helped to write - 100% of profits go into scholarships). My tools, with the aid of the web crawlers from major search engines, have collected a large number of build profiles and extracted the necessary properties to generate compatible JSON files.&lt;/p&gt; &#xA;&lt;p&gt;I don&#39;t intend to release the source code for the collection tools at the moment - many users hammering repository service APIs and individual websites for the same information isn&#39;t fair. I may publish raw build property files at a later date for sources from which I can obtain relevant permissions.&lt;/p&gt; &#xA;&lt;h2&gt;Further advice&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build profiles of the &lt;code&gt;user&lt;/code&gt; type with &lt;code&gt;release-keys&lt;/code&gt; tags are more likely to work than &lt;code&gt;userdebug&lt;/code&gt; and &lt;code&gt;test-keys&lt;/code&gt; or &lt;code&gt;dev-keys&lt;/code&gt; builds.&lt;/li&gt; &#xA; &lt;li&gt;If you lost the &lt;code&gt;MEETS_BASIC_INTEGRITY&lt;/code&gt; verdict with all the profiles you try, you might be using profiles with the wrong ABI compatibility. Check your device&#39;s ABI list again or try profiles from another directory.&lt;/li&gt; &#xA; &lt;li&gt;Fingerprints/properties with generic values such &lt;code&gt;generic&lt;/code&gt;, &lt;code&gt;mainline&lt;/code&gt;, and &lt;code&gt;Android&lt;/code&gt; are likely to fail and you should use the equivalent &lt;em&gt;product&lt;/em&gt; or &lt;em&gt;vendor&lt;/em&gt; values instead.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;re intermittently passing and failing verdicts with the same profile, it may be that the Play Integrity system is detecting your rooted environment. Try using root detectors such as &lt;a href=&#34;https://github.com/KimChangYoun/rootbeerFresh/&#34;&gt;RootBeerFresh&lt;/a&gt; to check your environment and look at the logs for any Magisk/KernelSU modules you have installed.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;re getting timeouts or &lt;em&gt;too many requests&lt;/em&gt; errors, the app you&#39;re using to check Play Integrity verdicts has hit its API limit. Use the checker within Google Play Store instead.&lt;/li&gt; &#xA; &lt;li&gt;If you make too many integrity requests, even in Play Store, you may see a &lt;code&gt;Retry with an exponential backoff&lt;/code&gt; response. In this case, stop testing for a couple of minutes and retry at a slower rate.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Play Store Integrity Check&lt;/h2&gt; &#xA;&lt;p&gt;To check Play Integrity verdicts without a third party app, open Play Store and go to settings (click profile icon in top right -&amp;gt; &lt;em&gt;Settings&lt;/em&gt;). In the &lt;em&gt;About&lt;/em&gt; menu, tap &lt;em&gt;Play Store version&lt;/em&gt; repeatedly until you get a notification toast saying &#34;You are now a developer&#34;. Scroll up to the &lt;em&gt;General&lt;/em&gt; menu, open it and click &lt;em&gt;Developer options&lt;/em&gt;. In this submenu you can click &lt;em&gt;Check integrity&lt;/em&gt; to run a Play Integrity check.&lt;/p&gt; &#xA;&lt;p&gt;The verdicts you need for most apps are &lt;code&gt;MEETS_BASIC_INTEGRITY&lt;/code&gt; and &lt;code&gt;MEETS_DEVICE_INTEGRITY&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>