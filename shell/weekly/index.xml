<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-31T01:57:17Z</updated>
  <subtitle>Weekly Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ublue-os/bazzite</title>
    <updated>2024-12-31T01:57:17Z</updated>
    <id>tag:github.com,2024-12-31:/ublue-os/bazzite</id>
    <link href="https://github.com/ublue-os/bazzite" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bazzite is an OCI image that serves as an alternative operating system for the Steam Deck, and a ready-to-game SteamOS-like for desktop computers, living room home theater PCs, and numerous other handheld PCs.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ublue-os/bazzite/main/repo_content/Bazzite_Tagline.svg?raw=true&#34; alt=&#34;Bazzite&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ublue-os/bazzite/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/ublue-os/bazzite/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;build-bazzite&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ublue-os/bazzite#about--features&#34;&gt;Features for &lt;strong&gt;All&lt;/strong&gt; Bazzite Images&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ublue-os/bazzite#desktop&#34;&gt;Features for &lt;strong&gt;Desktop&lt;/strong&gt; Images&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ublue-os/bazzite#steam-deckhome-theater-pcs-htpcs&#34;&gt;Features for &lt;strong&gt;Steam Deck / HTPC&lt;/strong&gt; Images&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ublue-os/bazzite#gnome&#34;&gt;Features for &lt;strong&gt;GNOME&lt;/strong&gt; Images&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ublue-os/bazzite#features-from-upstream&#34;&gt;Features from Upstream&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ublue-os/bazzite#why&#34;&gt;Why &amp;amp; Frequently Asked Questions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ublue-os/bazzite#showcase&#34;&gt;Showcase &amp;amp; Newsletter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ublue-os/bazzite#custom-packages&#34;&gt;Custom Packages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ublue-os/bazzite#verification&#34;&gt;Verification &amp;amp; Metrics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ublue-os/bazzite#special-thanks&#34;&gt;Special Thanks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ublue-os/bazzite#build-your-own&#34;&gt;Building Your Own&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ublue-os/bazzite#join-the-community&#34;&gt;Community&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;About &amp;amp; Features&lt;/h2&gt; &#xA;&lt;p&gt;Bazzite is an OCI image that serves as an alternative operating system for the &lt;a href=&#34;https://www.steamdeck.com/&#34;&gt;Steam Deck&lt;/a&gt;, and a ready-to-game SteamOS-like for desktop computers and living room home theater PCs.&lt;/p&gt; &#xA;&lt;p&gt;Bazzite is built from &lt;a href=&#34;https://github.com/ublue-os/main&#34;&gt;ublue-os/main&lt;/a&gt; and &lt;a href=&#34;https://github.com/ublue-os/nvidia&#34;&gt;ublue-os/nvidia&lt;/a&gt; using &lt;a href=&#34;https://fedoraproject.org/&#34;&gt;Fedora&lt;/a&gt; technology, which means expanded hardware support and built in drivers are included. Additionally, Bazzite adds the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Proprietary Nvidia drivers pre-installed.&lt;/li&gt; &#xA; &lt;li&gt;Full hardware accelerated codec support for H264 decoding.&lt;/li&gt; &#xA; &lt;li&gt;Full support for AMD&#39;s ROCM OpenCL/HIP run-times.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/medusalix/xone&#34;&gt;xone&lt;/a&gt;, &lt;a href=&#34;https://github.com/atar-axis/xpadneo&#34;&gt;xpadneo&lt;/a&gt;, and &lt;a href=&#34;https://github.com/ublue-os/xpad-noone&#34;&gt;xpad-noone&lt;/a&gt; drivers for Xbox controllers.&lt;/li&gt; &#xA; &lt;li&gt;Full support for &lt;a href=&#34;https://www.synaptics.com/products/displaylink-graphics&#34;&gt;DisplayLink&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Includes Valve&#39;s KDE themes from SteamOS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ishitatsuyuki/LatencyFleX&#34;&gt;LatencyFleX&lt;/a&gt;, &lt;a href=&#34;https://github.com/DadSchoorse/vkBasalt&#34;&gt;vkBasalt&lt;/a&gt;, &lt;a href=&#34;https://github.com/flightlessmango/Mangohud&#34;&gt;MangoHud&lt;/a&gt;, and &lt;a href=&#34;https://github.com/nowrep/obs-vkcapture&#34;&gt;OBS VkCapture&lt;/a&gt; installed and available by default&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;a href=&#34;https://www.wallpaperengine.io/en&#34;&gt;Wallpaper Engine&lt;/a&gt;. &lt;sub&gt;&lt;sup&gt;(Only on KDE)&lt;/sup&gt;&lt;/sub&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GerbilSoft/rom-properties&#34;&gt;ROM Properties Page shell extension&lt;/a&gt; included.&lt;/li&gt; &#xA; &lt;li&gt;Full support for &lt;a href=&#34;https://github.com/Frogging-Family/wine-tkg-git/issues/936&#34;&gt;Winesync/Fastsync/NTsync&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/89luca89/distrobox&#34;&gt;Distrobox&lt;/a&gt; preinstalled with automatic updates for created containers.&lt;/li&gt; &#xA; &lt;li&gt;Automated &lt;code&gt;duperemove&lt;/code&gt; and &lt;code&gt;rmlint&lt;/code&gt; services for reducing the disk space used by wine prefix contents.&lt;/li&gt; &#xA; &lt;li&gt;Support for HDMI CEC via &lt;a href=&#34;https://libcec.pulse-eight.com/&#34;&gt;libCEC&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pop-os/system76-scheduler&#34;&gt;System76-Scheduler&lt;/a&gt; preinstalled, providing automatic process priority tweaks to your focused application and keeping CPU time for background processes to a minimum.&lt;/li&gt; &#xA; &lt;li&gt;Customized System76-Scheduler config with additional rules.&lt;/li&gt; &#xA; &lt;li&gt;Uses &lt;a href=&#34;https://github.com/google/bbr&#34;&gt;Google&#39;s BBR TCP congestion control&lt;/a&gt; by default.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sezanzeb/input-remapper&#34;&gt;Input Remapper&lt;/a&gt; preinstalled and enabled. &lt;sub&gt;&lt;sup&gt;(Available but default-disabled on the Deck variant)&lt;/sup&gt;&lt;/sub&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bazzite Portal provides an easy way to install numerous applications and tweaks, including installing &lt;a href=&#34;https://gitlab.com/corectrl/corectrl&#34;&gt;CoreCtrl&lt;/a&gt; and &lt;a href=&#34;https://gitlab.com/leinardi/gwe&#34;&gt;GreenWithEnvy&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nixos.org/&#34;&gt;Nix&lt;/a&gt; package manager with &lt;a href=&#34;https://getfleek.dev/&#34;&gt;Fleek&lt;/a&gt; optionally available for install via Bazzite Portal.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://brew.sh/&#34;&gt;Brew&lt;/a&gt; package manager optionally available for install via Bazzite Portal.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://waydro.id/&#34;&gt;Waydroid&lt;/a&gt; preinstalled for running Android apps. Set it up with this &lt;a href=&#34;https://universal-blue.discourse.group/docs?topic=32&#34;&gt;quick guide&lt;/a&gt;. Future releases will offer to set this up for you through Bazzite Portal. &lt;sub&gt;&lt;sup&gt;(Not available on Nvidia builds)&lt;/sup&gt;&lt;/sub&gt;&lt;/li&gt; &#xA; &lt;li&gt;Manage applications using &lt;a href=&#34;https://github.com/tchx84/Flatseal&#34;&gt;Flatseal&lt;/a&gt;, &lt;a href=&#34;https://github.com/flattool/warehouse&#34;&gt;Warehouse&lt;/a&gt;, and &lt;a href=&#34;https://github.com/mijorus/gearlever&#34;&gt;Gear Lever&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.com/CalcProgrammer1/OpenRGB&#34;&gt;OpenRGB&lt;/a&gt; i2c-piix4 and i2c-nct6775 drivers for controlling RGB on certain motherboards.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openrazer.github.io&#34;&gt;OpenRazer&lt;/a&gt; drivers built in, Select OpenRazer in Bazzite Portal or run &lt;code&gt;ujust install-openrazer&lt;/code&gt; in a terminal to begin using it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opentabletdriver.net/&#34;&gt;OpenTabletDriver&lt;/a&gt; udev rules built in, with the full software suite installable via Bazzite Portal or by running &lt;code&gt;ujust install-opentabletdriver&lt;/code&gt; in a terminal.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hannesmann/gcadapter-oc-kmod&#34;&gt;GCAdapter_OC&lt;/a&gt; driver for overclocking Nintendo&#39;s Gamecube Controller Adapter to 1000hz polling.&lt;/li&gt; &#xA; &lt;li&gt;Out of the box support for &lt;a href=&#34;https://wooting.io/&#34;&gt;Wooting&lt;/a&gt; keyboards.&lt;/li&gt; &#xA; &lt;li&gt;Built in support for Southern Islands &lt;sub&gt;&lt;sup&gt;(HD 7000)&lt;/sup&gt;&lt;/sub&gt; and Sea Islands &lt;sub&gt;&lt;sup&gt;(HD 8000)&lt;/sup&gt;&lt;/sub&gt; AMD GPUs under the &lt;code&gt;amdgpu&lt;/code&gt; driver.&lt;/li&gt; &#xA; &lt;li&gt;A fix is available for &lt;a href=&#34;https://github.com/ValveSoftware/Source-1-Games/issues/5043&#34;&gt;a 32-bit Source 1 engine game bug &lt;sub&gt;&lt;sup&gt;(IE: TF2)&lt;/sup&gt;&lt;/sub&gt;&lt;/a&gt; that makes the game crash on launch - &lt;code&gt;ujust patch-source1-tcmalloc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://invent.kde.org/system/xwaylandvideobridge&#34;&gt;XwaylandVideoBridge&lt;/a&gt; is available for Discord screensharing on Wayland.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/linuxmint/webapp-manager&#34;&gt;Webapp Manager&lt;/a&gt; is available for creating applications from websites for a variety of browsers, including Firefox.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Desktop&lt;/h3&gt; &#xA;&lt;p&gt;Common variant available as &lt;code&gt;bazzite&lt;/code&gt;, suitable for desktop computers.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatic updates for the OS, Flatpaks, Nix packages &lt;sup&gt;&lt;sub&gt;(Via Fleek)&lt;/sub&gt;&lt;/sup&gt;, and all Distrobox containers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT]&lt;br&gt; &lt;strong&gt;ISOs can be downloaded from our releases page &lt;a href=&#34;https://github.com/ublue-os/bazzite/releases&#34;&gt;here&lt;/a&gt;, and a helpful install guide can be found &lt;a href=&#34;https://universal-blue.discourse.group/docs?topic=30&#34;&gt;here&lt;/a&gt;.&lt;/strong&gt; If you experience any issues with installing Bazzite, then check out our &lt;a href=&#34;https://universal-blue.discourse.group/docs?topic=34&#34;&gt;troubleshoot guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you&#39;re on an existing Universal Blue image follow &lt;a href=&#34;https://universal-blue.org/images/#image-list&#34;&gt;these instructions&lt;/a&gt;. To rebase an existing upstream Fedora Silverblue/Kinoite ostree system to this image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rpm-ostree rebase ostree-unverified-registry:ghcr.io/ublue-os/bazzite:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or for devices with Nvidia GPUs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rpm-ostree rebase ostree-unverified-registry:ghcr.io/ublue-os/bazzite-nvidia:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;For users with Secure Boot enabled:&lt;/strong&gt; Run &lt;code&gt;ujust enroll-secure-boot-key&lt;/code&gt; and enter the password &lt;code&gt;ublue-os&lt;/code&gt; if prompted to enroll the required key.&lt;/p&gt; &#xA;&lt;h3&gt;Steam Deck/Home Theater PCs (HTPCs)&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT]&lt;br&gt; Devices that are NOT the Steam Deck can still use the bazzite-deck images, but must use an AMD/Intel GPU.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Variant designed for usage as an alternative to SteamOS on the Steam Deck, and for a console-like experience on HTPCs, available as &lt;code&gt;bazzite-deck&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Directly boots to Gamemode matching SteamOS&#39;s behavior.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Automatic &lt;code&gt;duperemove&lt;/code&gt; greatly trims the size of compatdata.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Latest version of Mesa creates smaller shader caches and does not require them to prevent stutter.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Able to be booted even if the drive is full.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Support for every language supported by upstream Fedora.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Uses Wayland on the desktop with &lt;a href=&#34;https://github.com/Supreeeme/extest&#34;&gt;support for Steam input&lt;/a&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Features ported versions of most SteamOS packages, including drivers, firmware updaters, and fan controllers &lt;a href=&#34;https://gitlab.com/evlaV&#34;&gt;from the evlaV repository&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Patched Mesa for proper framerate control from Gamescope.&lt;/li&gt; &#xA; &lt;li&gt;Comes with patches from &lt;a href=&#34;https://gitlab.com/popsulfr/steamos-btrfs&#34;&gt;SteamOS BTRFS&lt;/a&gt; for full BTRFS support for the SD card by default.&lt;/li&gt; &#xA; &lt;li&gt;Ships with a ported copy of &lt;a href=&#34;https://github.com/kmicki/SteamDeckGyroDSU&#34;&gt;SDGyroDSU&lt;/a&gt;, enabled by default.&lt;/li&gt; &#xA; &lt;li&gt;Option to install &lt;a href=&#34;https://github.com/SteamDeckHomebrew/decky-loader&#34;&gt;Decky Loader&lt;/a&gt;, &lt;a href=&#34;https://www.emudeck.com/&#34;&gt;EmuDeck&lt;/a&gt;, &lt;a href=&#34;https://retrodeck.net/&#34;&gt;RetroDECK&lt;/a&gt;, and &lt;a href=&#34;https://davidotek.github.io/protonup-qt/&#34;&gt;ProtonUp-Qt&lt;/a&gt;, among numerous other useful packages on installation.&lt;/li&gt; &#xA; &lt;li&gt;Custom update system allows for the OS, Flatpaks, Nix packages &lt;sup&gt;&lt;sub&gt;(Via Fleek)&lt;/sub&gt;&lt;/sup&gt;, and Distrobox images to be updated directly from the Gamemode UI.&lt;/li&gt; &#xA; &lt;li&gt;Built in support for Windows dual-boot thanks to Fedora&#39;s installation of GRUB being left intact.&lt;/li&gt; &#xA; &lt;li&gt;Update break something? Easily roll back to the previous version of Bazzite thanks to &lt;code&gt;rpm-ostree&lt;/code&gt;&#39;s rollback functionality. You can even select previous images at boot.&lt;/li&gt; &#xA; &lt;li&gt;Steam and Lutris preinstalled on the image as layered packages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/trigg/Discover&#34;&gt;Discover Overlay&lt;/a&gt; for Discord pre-installed and automatically launches in both Gamemode and on the Desktop if Discord is installed. &lt;a href=&#34;https://trigg.github.io/Discover/bazzite&#34;&gt;View the official documentation here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Uses ZRAM&lt;sub&gt;&lt;sup&gt;(4GB)&lt;/sup&gt;&lt;/sub&gt; with the ZSTD compression algorithm by default with the option to switch back to a 1GB swap file and set a custom size for it if desired.&lt;/li&gt; &#xA; &lt;li&gt;Kyber I/O scheduler to prevent I/O starvation when installing games or during background &lt;code&gt;duperemove&lt;/code&gt; and &lt;code&gt;rmlint&lt;/code&gt; processes.&lt;/li&gt; &#xA; &lt;li&gt;Applies SteamOS&#39;s kernel parameters.&lt;/li&gt; &#xA; &lt;li&gt;Color calibrated display profiles for matte and reflective Steam Deck screens included.&lt;/li&gt; &#xA; &lt;li&gt;Default-disabled power-user features, including: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Service for low-risk undervolting of the Steam Deck via &lt;a href=&#34;https://github.com/FlyGoat/RyzenAdj&#34;&gt;RyzenAdj&lt;/a&gt; and &lt;a href=&#34;https://gitlab.com/leogx9r/ryzen_smu&#34;&gt;Ryzen SMU&lt;/a&gt;, see &lt;code&gt;ryzenadj.service&lt;/code&gt; and &lt;code&gt;/etc/default/ryzenadj&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Service for limiting the max charge level of the battery, see &lt;code&gt;batterylimit.service&lt;/code&gt; and &lt;code&gt;/etc/default/batterylimit&lt;/code&gt;. &lt;sup&gt;&lt;sub&gt;(Works even when the device is off)&lt;/sub&gt;&lt;/sup&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Built in support for display overclocking. For example, add &lt;code&gt;GAMESCOPE_OVERRIDE_REFRESH_RATE=40,70&lt;/code&gt; to &lt;code&gt;/etc/environment&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Ability to use X11 on the desktop if desired by editing &lt;code&gt;/etc/default/desktop-wayland&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;32GB RAM mod your Steam Deck? Enjoy double the maximum VRAM amount, automatically applied. &lt;sup&gt;&lt;sub&gt;(Can you share your soldering skills?)&lt;/sub&gt;&lt;/sup&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Steam Deck hardware-specific services can be disabled by running &lt;code&gt;ujust disable-deck-services&lt;/code&gt; in the terminal, useful for trying this image on other handhelds or for use on HTPCs.&lt;/li&gt; &#xA; &lt;li&gt;More information can be found &lt;a href=&#34;https://universal-blue.discourse.group/docs?topic=37&#34;&gt;here&lt;/a&gt; on the Bazzite Steam Deck images.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING]&lt;br&gt; &lt;strong&gt;Due to an upstream bug, Bazzite cannot be used on Steam Decks with 64GB eMMC storage at this time. Upgrading the storage resolves the issue.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT]&lt;br&gt; &lt;strong&gt;ISOs can be downloaded from our releases page &lt;a href=&#34;https://github.com/ublue-os/bazzite/releases&#34;&gt;here&lt;/a&gt;, and a helpful install guide can be found &lt;a href=&#34;https://universal-blue.discourse.group/docs?topic=30&#34;&gt;here&lt;/a&gt;.&lt;/strong&gt; If you experience any issues with installing Bazzite, then check out our &lt;a href=&#34;https://universal-blue.discourse.group/docs?topic=34&#34;&gt;troubleshoot guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you&#39;re on an existing Universal Blue image follow &lt;a href=&#34;https://universal-blue.org/images/#image-list&#34;&gt;these instructions&lt;/a&gt;. To rebase an existing upstream Fedora Silverblue/Kinoite ostree system to this image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rpm-ostree rebase ostree-unverified-registry:ghcr.io/ublue-os/bazzite-deck:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GNOME&lt;/h3&gt; &#xA;&lt;p&gt;Builds with the GNOME desktop environment are available in both desktop and deck flavors. These builds come with the following additional features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1154&#34;&gt;Variable refresh rate support and fractional scaling enabled under Wayland&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Custom menu in the top bar for returning to game mode, launching Steam, and opening a number of useful utilities. &lt;sub&gt;&lt;sup&gt;(Only on Steam Deck builds)&lt;/sup&gt;&lt;/sub&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://extensions.gnome.org/extension/1319/gsconnect/&#34;&gt;GSConnect&lt;/a&gt; preinstalled and ready to use.&lt;/li&gt; &#xA; &lt;li&gt;Features optional Valve-inspired themes matching Vapor and VGUI2 from SteamOS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jeffshee/gnome-ext-hanabi&#34;&gt;Hanabi extension&lt;/a&gt; included to offer similar features to Wallpaper Engine in KDE.&lt;/li&gt; &#xA; &lt;li&gt;Numerous optional extensions pre-installed, including &lt;a href=&#34;https://www.youtube.com/watch?v=nbCg9_YgKgM&#34;&gt;important user experience fixes&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Automatic updates for the &lt;a href=&#34;https://github.com/rafaelmardojai/firefox-gnome-theme&#34;&gt;Firefox GNOME theme&lt;/a&gt; and &lt;a href=&#34;https://github.com/rafaelmardojai/thunderbird-gnome-theme&#34;&gt;Thunderbird GNOME theme&lt;/a&gt;. &lt;sup&gt;&lt;sub&gt;(If installed)&lt;/sub&gt;&lt;/sup&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT]&lt;br&gt; &lt;strong&gt;ISOs can be downloaded from our releases page &lt;a href=&#34;https://github.com/ublue-os/bazzite/releases&#34;&gt;here&lt;/a&gt;, and a helpful install guide can be found &lt;a href=&#34;https://universal-blue.discourse.group/docs?topic=30&#34;&gt;here&lt;/a&gt;.&lt;/strong&gt; If you experience any issues with installing Bazzite, then check out our &lt;a href=&#34;https://universal-blue.discourse.group/docs?topic=34&#34;&gt;troubleshoot guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To rebase an existing ostree system to the &lt;strong&gt;desktop&lt;/strong&gt; release:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rpm-ostree rebase ostree-unverified-registry:ghcr.io/ublue-os/bazzite-gnome:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To rebase an existing ostree system to the &lt;strong&gt;desktop with Nvidia drivers&lt;/strong&gt; release:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rpm-ostree rebase ostree-unverified-registry:ghcr.io/ublue-os/bazzite-gnome-nvidia:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING]&lt;br&gt; &lt;strong&gt;Due to an upstream bug, Bazzite cannot be used on Steam Decks with 64GB eMMC storage at this time.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To rebase an existing ostree system to the &lt;strong&gt;Steam Deck/HTPC&lt;/strong&gt; release:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rpm-ostree rebase ostree-unverified-registry:ghcr.io/ublue-os/bazzite-deck-gnome:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Features from Upstream&lt;/h3&gt; &#xA;&lt;h4&gt;Universal Blue&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Flathub is enabled by default.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/casey/just&#34;&gt;&lt;code&gt;ujust&lt;/code&gt;&lt;/a&gt; commands for convenience.&lt;/li&gt; &#xA; &lt;li&gt;Multi-media codecs out of the box.&lt;/li&gt; &#xA; &lt;li&gt;Rollback Bazzite from any build within the last 90 days.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Features from Fedora Linux (Kinoite &amp;amp; Silverblue)&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A rock solid and stable base.&lt;/li&gt; &#xA; &lt;li&gt;System packages stay relatively up to date.&lt;/li&gt; &#xA; &lt;li&gt;Can layer Fedora packages to the image without losing them between updates.&lt;/li&gt; &#xA; &lt;li&gt;Security focused with &lt;a href=&#34;https://github.com/SELinuxProject/selinux&#34;&gt;SELinux&lt;/a&gt; preinstalled and configured out of the box.&lt;/li&gt; &#xA; &lt;li&gt;The ability to rebase to different Fedora libostree images, if desired, without losing user data.&lt;/li&gt; &#xA; &lt;li&gt;Printing support thanks to &lt;a href=&#34;https://www.cups.org/&#34;&gt;CUPS&lt;/a&gt; being preinstalled.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why&lt;/h2&gt; &#xA;&lt;p&gt;Bazzite started as a project to resolve some of the issues that plague SteamOS, mainly out of date packages (despite an Arch base) and the lack of a functional package manager.&lt;/p&gt; &#xA;&lt;p&gt;Despite this project also being image-based, you are able to install any Fedora package straight from the command line. These packages will persist across updates &lt;sub&gt;&lt;sup&gt;(So go ahead and install that obscure VPN software you spent an hour trying to get working in SteamOS)&lt;/sup&gt;&lt;/sub&gt;. Additionally, Bazzite is updated multiple times a week with packages from upstream Fedora, giving you the best possible performance and latest features - all on a stable base.&lt;/p&gt; &#xA;&lt;p&gt;Bazzite ships with the latest Linux kernel and SELinux enabled by default with full support for secure boot &lt;sub&gt;&lt;sup&gt;(Run &lt;code&gt;ujust enroll-secure-boot-key&lt;/code&gt; and enter the password &lt;code&gt;ublue-os&lt;/code&gt; if prompted to enroll our key)&lt;/sup&gt;&lt;/sub&gt; and disk encryption, making this a sensible solution for general computing. &lt;sup&gt;&lt;sub&gt;(Yes, you can print from Bazzite)&lt;/sub&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://universal-blue.discourse.group/docs?topic=33&#34;&gt;Frequently Asked Questions&lt;/a&gt; for details on what makes Bazzite stand out from other Linux operating systems.&lt;/p&gt; &#xA;&lt;h2&gt;Showcase&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ublue-os/bazzite/main/repo_content/desktop1.png?raw=true&#34; alt=&#34;KDE Vapor Theme&#34; title=&#34;KDE Vapor Theme&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ublue-os/bazzite/main/repo_content/desktop2.png?raw=true&#34; alt=&#34;KDE VGUI2 Theme&#34; title=&#34;KDE VGUI2 Theme&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ublue-os/bazzite/main/repo_content/gamemode.png?raw=true&#34; alt=&#34;Steam Game Mode&#34; title=&#34;Steam Game Mode&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ublue-os/bazzite/main/repo_content/waydroid.png?raw=true&#34; alt=&#34;Waydroid&#34; title=&#34;Waydroid&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ublue-os/bazzite/main/repo_content/distrobox.png?raw=true&#34; alt=&#34;Distrobox Terminals&#34; title=&#34;Distrobox Terminals&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ublue-os/bazzite/main/repo_content/gnome1.png?raw=true&#34; alt=&#34;GNOME Vapor Theme&#34; title=&#34;GNOME Vapor Theme&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ublue-os/bazzite/main/repo_content/gnome2.png?raw=true&#34; alt=&#34;GNOME VGUI2 Theme&#34; title=&#34;GNOME VGUI2 Theme&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://universal-blue.discourse.group/tag/bazzite-buzz&#34;&gt;newsletters&lt;/a&gt; and &lt;a href=&#34;https://universal-blue.discourse.group/tags/c/bazzite/5/announcements&#34;&gt;announcements&lt;/a&gt; that get published on a regular basis for updates on the project.&lt;/p&gt; &#xA;&lt;h2&gt;Custom Packages&lt;/h2&gt; &#xA;&lt;p&gt;Ported SteamOS and ChimeraOS packages, among others used by Bazzite, are built on Copr in &lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite/&#34;&gt;bazzite&lt;/a&gt; and &lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite-multilib/&#34;&gt;bazzite-multilib&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bluez&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite-multilib/package/bluez/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/trigg/Discover&#34;&gt;discover-overlay&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite/package/discover-overlay/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ds-inhibit&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite/package/ds-inhibit/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;duperemove&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite/package/duperemove/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Supreeeme/extest&#34;&gt;extest&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite-multilib/package/extest/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gamescope&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite-multilib/package/gamescope/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ChimeraOS/gamescope-session&#34;&gt;gamescope-session-plus&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite/package/gamescope-session-plus/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ChimeraOS/gamescope-session-steam&#34;&gt;gamescope-session-steam&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite/package/gamescope-session-steam/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gamescope-shaders&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite/package/gamescope-shaders/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;galileo-mura&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite/package/galileo-mura/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/maxwellainatchi/gnome-randr-rust&#34;&gt;gnome-randr-rust&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite/package/gnome-randr-rust/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gnome-shell-extension-bazzite-menu&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite/package/gnome-shell-extension-bazzite-menu/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://extensions.gnome.org/extension/1326/block-caribou/&#34;&gt;gnome-shell-extension-caribou-blocker&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite/package/gnome-shell-extension-caribou-blocker/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jeffshee/gnome-ext-hanabi&#34;&gt;gnome-shell-extension-hanabi&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite/package/gnome-shell-extension-hanabi/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/hermes83/compiz-windows-effect&#34;&gt;gnome-shell-extension-compiz-windows-effect&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite/package/gnome-shell-extension-compiz-windows-effect/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/antheas/hhd&#34;&gt;hhd&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite/package/hhd/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;jupiter-fan-control&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite/package/jupiter-fan-control/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;jupiter-hw-support-&lt;a href=&#34;https://gitlab.com/popsulfr/steamos-btrfs&#34;&gt;btrfs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite/package/jupiter-hw-support-btrfs/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flightlessmango/MangoHud&#34;&gt;mangohud&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite-multilib/package/mangohud/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mesa&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite-multilib/package/mesa/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pipewire&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite-multilib/package/pipewire/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;powerbuttond&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite/package/powerbuttond/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/apmorton/pyhidapi&#34;&gt;python3-hid&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite/package/python3-hid/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rmlint&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite/package/rmlint/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/FlyGoat/RyzenAdj&#34;&gt;ryzenadj&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite/package/ryzenadj/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kmicki/SteamDeckGyroDSU&#34;&gt;sdgyrodsu&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite/package/sdgyrodsu/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;steamdeck-dsp&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite/package/steamdeck-dsp/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;steamdeck-gnome-presets&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite/package/steamdeck-gnome-presets/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;steamdeck-kde-presets&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite/package/steamdeck-kde-presets/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;steamdeck-kde-presets-desktop&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite/package/steamdeck-kde-presets-desktop/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;steam_notif_daemon&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite/package/steam_notif_daemon/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;udisks2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite/package/udisks2/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;upower&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite/package/upower/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;vpower&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite/package/vpower/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;wireplumber&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite/package/wireplumber/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;xorg-x11-server-Xwayland&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/bazzite-multilib/package/xorg-x11-server-Xwayland/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Additionally, the following packages are used from other Copr repos:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/ublue-os/akmods/&#34;&gt;gcadapter_oc-kmod&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/ublue-os/akmods/package/gcadapter_oc-kmod/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/gnome-vrr/&#34;&gt;gnome-vrr&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/gnome-vrr/package/mutter/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/hl2linux-selinux/&#34;&gt;hl2linux-selinux&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/hl2linux-selinux/package/hl2linux-selinux/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/joycond/&#34;&gt;joycond&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/joycond/package/joycond/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/sentry/kernel-fsync/&#34;&gt;kernel-fsync&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/sentry/kernel-fsync/package/kernel/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/LatencyFleX/&#34;&gt;latencyflex-vulkan-layer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/LatencyFleX/package/latencyflex-vulkan-layer/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/ycollet/audinux/&#34;&gt;noise-suppression-for-voice&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/ycollet/audinux/package/noise-suppression-for-voice/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/obs-vkcapture/&#34;&gt;obs-vkcapture&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/obs-vkcapture/package/obs-vkcapture/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://gitlab.gnome.org/chergert/prompt&#34;&gt;prompt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/prompt/package/prompt/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/rom-properties/&#34;&gt;rom-properties&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/rom-properties/package/rom-properties/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/ublue-os/akmods/&#34;&gt;steamdeck-kmod&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/ublue-os/akmods/package/jupiter-kmod/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/system76-scheduler/&#34;&gt;system76-scheduler&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/system76-scheduler/package/system76-scheduler/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/VTFLib/&#34;&gt;VTFLib&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/VTFLib/package/VTFLib/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/wallpaper-engine-kde-plugin/&#34;&gt;wallpaper-engine-kde-plugin&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/wallpaper-engine-kde-plugin/package/wallpaper-engine-kde-plugin/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/webapp-manager/&#34;&gt;webapp-manager&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://copr.fedorainfracloud.org/coprs/kylegospo/webapp-manager/package/webapp-manager/status_image/last_build.png?&#34; alt=&#34;Build Status&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Verification&lt;/h2&gt; &#xA;&lt;p&gt;These images are signed with sigstore&#39;s &lt;a href=&#34;https://docs.sigstore.dev/cosign/overview/&#34;&gt;cosign&lt;/a&gt;. You can verify the signature by downloading the &lt;code&gt;cosign.pub&lt;/code&gt; key from this repo and running the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cosign verify --key cosign.pub ghcr.io/ublue-os/bazzite&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Contributor Metrics&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://repobeats.axiom.co/api/embed/86b500d79c613015ad16f56df76c8e13f3fd98ae.svg?sanitize=true&#34; alt=&#34;Bazzite&#34; title=&#34;Repobeats analytics image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Special Thanks&lt;/h2&gt; &#xA;&lt;p&gt;Bazzite is a community effort and wouldn&#39;t exist without everyone&#39;s support. Below are some of the people who&#39;ve helped us along the way:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/reisvg&#34;&gt;rei.svg&lt;/a&gt; - For creating our logo and overall branding.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.com/evlaV&#34;&gt;evlaV&lt;/a&gt; - For making Valve&#39;s code available and for being &lt;a href=&#34;https://xkcd.com/2347/&#34;&gt;this person&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chimeraos.org/&#34;&gt;ChimeraOS&lt;/a&gt; - For gamescope-session and for valuable support along the way.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Jovian-Experiments&#34;&gt;Jovian-NixOS&lt;/a&gt; - For supporting us with technical issues and for creating a similar project. Seriously, go check it out. It&#39;s our Nix-based cousin.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/sentry/&#34;&gt;sentry&lt;/a&gt; - For assistance with needed kernel patches and for creating the &lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/sentry/kernel-fsync/&#34;&gt;kernel-fsync repo&lt;/a&gt; we now use.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://deckbrew.xyz&#34;&gt;Steam Deck Homebrew&lt;/a&gt; - For choosing to support distributions other than SteamOS despite the extra work, and a special thanks to &lt;a href=&#34;https://github.com/PartyWumpus&#34;&gt;PartyWumpus&lt;/a&gt; for getting Decky Loader working with SELinux for us.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cyrv6737&#34;&gt;cyrv6737&lt;/a&gt; - For the initial inspiration and the base that became bazzite-arch.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build Your Own&lt;/h2&gt; &#xA;&lt;p&gt;Bazzite is built entirely in GitHub and creating your own custom version of it is as easy as forking this repository, adding a private signing key, and enabling GitHub actions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.github.com/en/actions/security-guides/encrypted-secrets&#34;&gt;Familiarize yourself&lt;/a&gt; on keeping secrets in github. You&#39;ll need to &lt;a href=&#34;https://docs.sigstore.dev/cosign/overview/&#34;&gt;generate a new keypair&lt;/a&gt; with cosign. The public key can be in your public repo &lt;sub&gt;&lt;sup&gt;(Your users need it to check the signatures)&lt;/sup&gt;&lt;/sub&gt;, and you can paste the private key in &lt;code&gt;Settings -&amp;gt; Secrets -&amp;gt; Actions&lt;/code&gt; with the name &lt;code&gt;SIGNING_SECRET&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We also ship a config for the popular &lt;a href=&#34;https://github.com/apps/pull&#34;&gt;pull app&lt;/a&gt; if you&#39;d like to keep your fork in sync with upstream. Enable this app on your repo to keep track of Bazzite changes while also making your own modifications.&lt;/p&gt; &#xA;&lt;h2&gt;Join The Community&lt;/h2&gt; &#xA;&lt;p&gt;You can find us on the &lt;a href=&#34;https://discord.gg/f8MUghG5PB&#34;&gt;Universal Blue Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also discuss Bazzite on our &lt;a href=&#34;https://universal-blue.discourse.group/c/bazzite/5&#34;&gt;Discourse&lt;/a&gt; and find additional &lt;a href=&#34;https://universal-blue.discourse.group/docs?category=5&#34;&gt;documentation&lt;/a&gt; surrounding the project too.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dylanaraps/pure-bash-bible</title>
    <updated>2024-12-31T01:57:17Z</updated>
    <id>tag:github.com,2024-12-31:/dylanaraps/pure-bash-bible</id>
    <link href="https://github.com/dylanaraps/pure-bash-bible" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📖 A collection of pure bash alternatives to external processes.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;b&gt;NEW: &lt;a href=&#34;https://github.com/dylanaraps/pure-sh-bible&#34;&gt;pure sh bible (📖 A collection of pure POSIX sh alternatives to external processes).&lt;/a&gt;&lt;/b&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/odb/official-bash-logo/master/assets/Logos/Icons/PNG/512x512.png&#34; width=&#34;200px&#34;&gt;&lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;pure bash bible&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;A collection of pure bash alternatives to external processes.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://travis-ci.com/dylanaraps/pure-bash-bible&#34;&gt;&lt;img src=&#34;https://travis-ci.com/dylanaraps/pure-bash-bible.svg?branch=master&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;a href=&#34;https://leanpub.com/bash/&#34;&gt; &lt;img src=&#34;https://s3.amazonaws.com/titlepages.leanpub.com/bash/hero&#34; width=&#34;40%&#34; align=&#34;right&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;The goal of this book is to document commonly-known and lesser-known methods of doing various tasks using only built-in &lt;code&gt;bash&lt;/code&gt; features. Using the snippets from this bible can help remove unneeded dependencies from scripts and in most cases make them faster. I came across these tips and discovered a few while developing &lt;a href=&#34;https://github.com/dylanaraps/neofetch&#34;&gt;neofetch&lt;/a&gt;, &lt;a href=&#34;https://github.com/dylanaraps/pxltrm&#34;&gt;pxltrm&lt;/a&gt; and other smaller projects.&lt;/p&gt; &#xA;&lt;p&gt;The snippets below are linted using &lt;code&gt;shellcheck&lt;/code&gt; and tests have been written where applicable. Want to contribute? Read the &lt;a href=&#34;https://github.com/dylanaraps/pure-bash-bible/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;. It outlines how the unit tests work and what is required when adding snippets to the bible.&lt;/p&gt; &#xA;&lt;p&gt;See something incorrectly described, buggy or outright wrong? Open an issue or send a pull request. If the bible is missing something, open an issue and a solution will be found.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;b&gt;This book is also available to purchase on leanpub. https://leanpub.com/bash&lt;/b&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;b&gt;Or you can buy me a coffee.&lt;/b&gt; &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=V7QNJNKS3WYVS&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/don-paypal-yellow.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/dyla&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/don-patreon-yellow.svg?sanitize=true&#34;&gt; &lt;/a&gt;&lt;a href=&#34;https://liberapay.com/2211/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/don-liberapay-yellow.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;!-- vim-markdown-toc GFM --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#foreword&#34;&gt;FOREWORD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#strings&#34;&gt;STRINGS&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#trim-leading-and-trailing-white-space-from-string&#34;&gt;Trim leading and trailing white-space from string&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#trim-all-white-space-from-string-and-truncate-spaces&#34;&gt;Trim all white-space from string and truncate spaces&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#use-regex-on-a-string&#34;&gt;Use regex on a string&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#split-a-string-on-a-delimiter&#34;&gt;Split a string on a delimiter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#change-a-string-to-lowercase&#34;&gt;Change a string to lowercase&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#change-a-string-to-uppercase&#34;&gt;Change a string to uppercase&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#reverse-a-string-case&#34;&gt;Reverse a string case&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#trim-quotes-from-a-string&#34;&gt;Trim quotes from a string&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#strip-all-instances-of-pattern-from-string&#34;&gt;Strip all instances of pattern from string&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#strip-first-occurrence-of-pattern-from-string&#34;&gt;Strip first occurrence of pattern from string&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#strip-pattern-from-start-of-string&#34;&gt;Strip pattern from start of string&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#strip-pattern-from-end-of-string&#34;&gt;Strip pattern from end of string&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#percent-encode-a-string&#34;&gt;Percent-encode a string&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#decode-a-percent-encoded-string&#34;&gt;Decode a percent-encoded string&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#check-if-string-contains-a-sub-string&#34;&gt;Check if string contains a sub-string&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#check-if-string-starts-with-sub-string&#34;&gt;Check if string starts with sub-string&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#check-if-string-ends-with-sub-string&#34;&gt;Check if string ends with sub-string&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#arrays&#34;&gt;ARRAYS&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#reverse-an-array&#34;&gt;Reverse an array&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#remove-duplicate-array-elements&#34;&gt;Remove duplicate array elements&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#random-array-element&#34;&gt;Random array element&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#cycle-through-an-array&#34;&gt;Cycle through an array&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#toggle-between-two-values&#34;&gt;Toggle between two values&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#loops&#34;&gt;LOOPS&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#loop-over-a-range-of-numbers&#34;&gt;Loop over a range of numbers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#loop-over-a-variable-range-of-numbers&#34;&gt;Loop over a variable range of numbers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#loop-over-an-array&#34;&gt;Loop over an array&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#loop-over-an-array-with-an-index&#34;&gt;Loop over an array with an index&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#loop-over-the-contents-of-a-file&#34;&gt;Loop over the contents of a file&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#loop-over-files-and-directories&#34;&gt;Loop over files and directories&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#file-handling&#34;&gt;FILE HANDLING&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#read-a-file-to-a-string&#34;&gt;Read a file to a string&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#read-a-file-to-an-array-by-line&#34;&gt;Read a file to an array (&lt;em&gt;by line&lt;/em&gt;)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#get-the-first-n-lines-of-a-file&#34;&gt;Get the first N lines of a file&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#get-the-last-n-lines-of-a-file&#34;&gt;Get the last N lines of a file&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#get-the-number-of-lines-in-a-file&#34;&gt;Get the number of lines in a file&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#count-files-or-directories-in-directory&#34;&gt;Count files or directories in directory&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#create-an-empty-file&#34;&gt;Create an empty file&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#extract-lines-between-two-markers&#34;&gt;Extract lines between two markers&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#file-paths&#34;&gt;FILE PATHS&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#get-the-directory-name-of-a-file-path&#34;&gt;Get the directory name of a file path&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#get-the-base-name-of-a-file-path&#34;&gt;Get the base-name of a file path&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#variables&#34;&gt;VARIABLES&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#assign-and-access-a-variable-using-a-variable&#34;&gt;Assign and access a variable using a variable&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#name-a-variable-based-on-another-variable&#34;&gt;Name a variable based on another variable&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#escape-sequences&#34;&gt;ESCAPE SEQUENCES&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#text-colors&#34;&gt;Text Colors&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#text-attributes&#34;&gt;Text Attributes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#cursor-movement&#34;&gt;Cursor Movement&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#erasing-text&#34;&gt;Erasing Text&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#parameter-expansion&#34;&gt;PARAMETER EXPANSION&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#indirection&#34;&gt;Indirection&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#replacement&#34;&gt;Replacement&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#length&#34;&gt;Length&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#expansion&#34;&gt;Expansion&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#case-modification&#34;&gt;Case Modification&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#default-value&#34;&gt;Default Value&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#brace-expansion&#34;&gt;BRACE EXPANSION&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#ranges&#34;&gt;Ranges&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#string-lists&#34;&gt;String Lists&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#conditional-expressions&#34;&gt;CONDITIONAL EXPRESSIONS&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#file-conditionals&#34;&gt;File Conditionals&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#file-comparisons&#34;&gt;File Comparisons&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#variable-conditionals&#34;&gt;Variable Conditionals&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#variable-comparisons&#34;&gt;Variable Comparisons&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#arithmetic-operators&#34;&gt;ARITHMETIC OPERATORS&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#assignment&#34;&gt;Assignment&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#arithmetic&#34;&gt;Arithmetic&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#bitwise&#34;&gt;Bitwise&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#logical&#34;&gt;Logical&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#miscellaneous&#34;&gt;Miscellaneous&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#arithmetic-1&#34;&gt;ARITHMETIC&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#simpler-syntax-to-set-variables&#34;&gt;Simpler syntax to set variables&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#ternary-tests&#34;&gt;Ternary Tests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#traps&#34;&gt;TRAPS&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#do-something-on-script-exit&#34;&gt;Do something on script exit&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#ignore-terminal-interrupt-ctrlc-sigint&#34;&gt;Ignore terminal interrupt (CTRL+C, SIGINT)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#react-to-window-resize&#34;&gt;React to window resize&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#do-something-before-every-command&#34;&gt;Do something before every command&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#do-something-when-a-shell-function-or-a-sourced-file-finishes-executing&#34;&gt;Do something when a shell function or a sourced file finishes executing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#performance&#34;&gt;PERFORMANCE&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#disable-unicode&#34;&gt;Disable Unicode&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#obsolete-syntax&#34;&gt;OBSOLETE SYNTAX&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#shebang&#34;&gt;Shebang&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#command-substitution&#34;&gt;Command Substitution&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#function-declaration&#34;&gt;Function Declaration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#internal-variables&#34;&gt;INTERNAL VARIABLES&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#get-the-location-to-the-bash-binary&#34;&gt;Get the location to the &lt;code&gt;bash&lt;/code&gt; binary&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#get-the-version-of-the-current-running-bash-process&#34;&gt;Get the version of the current running &lt;code&gt;bash&lt;/code&gt; process&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#open-the-users-preferred-text-editor&#34;&gt;Open the user&#39;s preferred text editor&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#get-the-name-of-the-current-function&#34;&gt;Get the name of the current function&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#get-the-host-name-of-the-system&#34;&gt;Get the host-name of the system&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#get-the-architecture-of-the-operating-system&#34;&gt;Get the architecture of the Operating System&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#get-the-name-of-the-operating-system--kernel&#34;&gt;Get the name of the Operating System / Kernel&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#get-the-current-working-directory&#34;&gt;Get the current working directory&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#get-the-number-of-seconds-the-script-has-been-running&#34;&gt;Get the number of seconds the script has been running&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#get-a-pseudorandom-integer&#34;&gt;Get a pseudorandom integer&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#information-about-the-terminal&#34;&gt;INFORMATION ABOUT THE TERMINAL&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#get-the-terminal-size-in-lines-and-columns-from-a-script&#34;&gt;Get the terminal size in lines and columns (&lt;em&gt;from a script&lt;/em&gt;)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#get-the-terminal-size-in-pixels&#34;&gt;Get the terminal size in pixels&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#get-the-current-cursor-position&#34;&gt;Get the current cursor position&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#conversion&#34;&gt;CONVERSION&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#convert-a-hex-color-to-rgb&#34;&gt;Convert a hex color to RGB&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#convert-an-rgb-color-to-hex&#34;&gt;Convert an RGB color to hex&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#code-golf&#34;&gt;CODE GOLF&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#shorter-for-loop-syntax&#34;&gt;Shorter &lt;code&gt;for&lt;/code&gt; loop syntax&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#shorter-infinite-loops&#34;&gt;Shorter infinite loops&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#shorter-function-declaration&#34;&gt;Shorter function declaration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#shorter-if-syntax&#34;&gt;Shorter &lt;code&gt;if&lt;/code&gt; syntax&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#simpler-case-statement-to-set-variable&#34;&gt;Simpler &lt;code&gt;case&lt;/code&gt; statement to set variable&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#other&#34;&gt;OTHER&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#use-read-as-an-alternative-to-the-sleep-command&#34;&gt;Use &lt;code&gt;read&lt;/code&gt; as an alternative to the &lt;code&gt;sleep&lt;/code&gt; command&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#check-if-a-program-is-in-the-users-path&#34;&gt;Check if a program is in the user&#39;s PATH&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#get-the-current-date-using-strftime&#34;&gt;Get the current date using &lt;code&gt;strftime&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#get-the-username-of-the-current-user&#34;&gt;Get the username of the current user&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#generate-a-uuid-v4&#34;&gt;Generate a UUID V4&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#progress-bars&#34;&gt;Progress bars&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#get-the-list-of-functions-in-a-script&#34;&gt;Get the list of functions in a script&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#bypass-shell-aliases&#34;&gt;Bypass shell aliases&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#bypass-shell-functions&#34;&gt;Bypass shell functions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#run-a-command-in-the-background&#34;&gt;Run a command in the background&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#capture-the-return-value-of-a-function-without-command-substitution&#34;&gt;Capture function return without command substitution&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dylanaraps/pure-bash-bible/master/#afterword&#34;&gt;AFTERWORD&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- vim-markdown-toc --&gt; &#xA;&lt;br&gt; &#xA;&lt;!-- CHAPTER START --&gt; &#xA;&lt;h1&gt;FOREWORD&lt;/h1&gt; &#xA;&lt;p&gt;A collection of pure &lt;code&gt;bash&lt;/code&gt; alternatives to external processes and programs. The &lt;code&gt;bash&lt;/code&gt; scripting language is more powerful than people realise and most tasks can be accomplished without depending on external programs.&lt;/p&gt; &#xA;&lt;p&gt;Calling an external process in &lt;code&gt;bash&lt;/code&gt; is expensive and excessive use will cause a noticeable slowdown. Scripts and programs written using built-in methods (&lt;em&gt;where applicable&lt;/em&gt;) will be faster, require fewer dependencies and afford a better understanding of the language itself.&lt;/p&gt; &#xA;&lt;p&gt;The contents of this book provide a reference for solving problems encountered when writing programs and scripts in &lt;code&gt;bash&lt;/code&gt;. Examples are in function formats showcasing how to incorporate these solutions into code.&lt;/p&gt; &#xA;&lt;!-- CHAPTER END --&gt; &#xA;&lt;!-- CHAPTER START --&gt; &#xA;&lt;h1&gt;STRINGS&lt;/h1&gt; &#xA;&lt;h2&gt;Trim leading and trailing white-space from string&lt;/h2&gt; &#xA;&lt;p&gt;This is an alternative to &lt;code&gt;sed&lt;/code&gt;, &lt;code&gt;awk&lt;/code&gt;, &lt;code&gt;perl&lt;/code&gt; and other tools. The function below works by finding all leading and trailing white-space and removing it from the start and end of the string. The &lt;code&gt;:&lt;/code&gt; built-in is used in place of a temporary variable.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;trim_string() {&#xA;    # Usage: trim_string &#34;   example   string    &#34;&#xA;    : &#34;${1#&#34;${1%%[![:space:]]*}&#34;}&#34;&#xA;    : &#34;${_%&#34;${_##*[![:space:]]}&#34;}&#34;&#xA;    printf &#39;%s\n&#39; &#34;$_&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ trim_string &#34;    Hello,  World    &#34;&#xA;Hello,  World&#xA;&#xA;$ name=&#34;   John Black  &#34;&#xA;$ trim_string &#34;$name&#34;&#xA;John Black&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Trim all white-space from string and truncate spaces&lt;/h2&gt; &#xA;&lt;p&gt;This is an alternative to &lt;code&gt;sed&lt;/code&gt;, &lt;code&gt;awk&lt;/code&gt;, &lt;code&gt;perl&lt;/code&gt; and other tools. The function below works by abusing word splitting to create a new string without leading/trailing white-space and with truncated spaces.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# shellcheck disable=SC2086,SC2048&#xA;trim_all() {&#xA;    # Usage: trim_all &#34;   example   string    &#34;&#xA;    set -f&#xA;    set -- $*&#xA;    printf &#39;%s\n&#39; &#34;$*&#34;&#xA;    set +f&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ trim_all &#34;    Hello,    World    &#34;&#xA;Hello, World&#xA;&#xA;$ name=&#34;   John   Black  is     my    name.    &#34;&#xA;$ trim_all &#34;$name&#34;&#xA;John Black is my name.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Use regex on a string&lt;/h2&gt; &#xA;&lt;p&gt;The result of &lt;code&gt;bash&lt;/code&gt;&#39;s regex matching can be used to replace &lt;code&gt;sed&lt;/code&gt; for a large number of use-cases.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;CAVEAT&lt;/strong&gt;: This is one of the few platform dependent &lt;code&gt;bash&lt;/code&gt; features. &lt;code&gt;bash&lt;/code&gt; will use whatever regex engine is installed on the user&#39;s system. Stick to POSIX regex features if aiming for compatibility.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;CAVEAT&lt;/strong&gt;: This example only prints the first matching group. When using multiple capture groups some modification is needed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;regex() {&#xA;    # Usage: regex &#34;string&#34; &#34;regex&#34;&#xA;    [[ $1 =~ $2 ]] &amp;amp;&amp;amp; printf &#39;%s\n&#39; &#34;${BASH_REMATCH[1]}&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ # Trim leading white-space.&#xA;$ regex &#39;    hello&#39; &#39;^\s*(.*)&#39;&#xA;hello&#xA;&#xA;$ # Validate a hex color.&#xA;$ regex &#34;#FFFFFF&#34; &#39;^(#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3}))$&#39;&#xA;#FFFFFF&#xA;&#xA;$ # Validate a hex color (invalid).&#xA;$ regex &#34;red&#34; &#39;^(#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3}))$&#39;&#xA;# no output (invalid)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Usage in script:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;is_hex_color() {&#xA;    if [[ $1 =~ ^(#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3}))$ ]]; then&#xA;        printf &#39;%s\n&#39; &#34;${BASH_REMATCH[1]}&#34;&#xA;    else&#xA;        printf &#39;%s\n&#39; &#34;error: $1 is an invalid color.&#34;&#xA;        return 1&#xA;    fi&#xA;}&#xA;&#xA;read -r color&#xA;is_hex_color &#34;$color&#34; || color=&#34;#FFFFFF&#34;&#xA;&#xA;# Do stuff.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Split a string on a delimiter&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;CAVEAT:&lt;/strong&gt; Requires &lt;code&gt;bash&lt;/code&gt; 4+&lt;/p&gt; &#xA;&lt;p&gt;This is an alternative to &lt;code&gt;cut&lt;/code&gt;, &lt;code&gt;awk&lt;/code&gt; and other tools.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;split() {&#xA;   # Usage: split &#34;string&#34; &#34;delimiter&#34;&#xA;   IFS=$&#39;\n&#39; read -d &#34;&#34; -ra arr &amp;lt;&amp;lt;&amp;lt; &#34;${1//$2/$&#39;\n&#39;}&#34;&#xA;   printf &#39;%s\n&#39; &#34;${arr[@]}&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ split &#34;apples,oranges,pears,grapes&#34; &#34;,&#34;&#xA;apples&#xA;oranges&#xA;pears&#xA;grapes&#xA;&#xA;$ split &#34;1, 2, 3, 4, 5&#34; &#34;, &#34;&#xA;1&#xA;2&#xA;3&#xA;4&#xA;5&#xA;&#xA;# Multi char delimiters work too!&#xA;$ split &#34;hello---world---my---name---is---john&#34; &#34;---&#34;&#xA;hello&#xA;world&#xA;my&#xA;name&#xA;is&#xA;john&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Change a string to lowercase&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;CAVEAT:&lt;/strong&gt; Requires &lt;code&gt;bash&lt;/code&gt; 4+&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;lower() {&#xA;    # Usage: lower &#34;string&#34;&#xA;    printf &#39;%s\n&#39; &#34;${1,,}&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ lower &#34;HELLO&#34;&#xA;hello&#xA;&#xA;$ lower &#34;HeLlO&#34;&#xA;hello&#xA;&#xA;$ lower &#34;hello&#34;&#xA;hello&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Change a string to uppercase&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;CAVEAT:&lt;/strong&gt; Requires &lt;code&gt;bash&lt;/code&gt; 4+&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;upper() {&#xA;    # Usage: upper &#34;string&#34;&#xA;    printf &#39;%s\n&#39; &#34;${1^^}&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ upper &#34;hello&#34;&#xA;HELLO&#xA;&#xA;$ upper &#34;HeLlO&#34;&#xA;HELLO&#xA;&#xA;$ upper &#34;HELLO&#34;&#xA;HELLO&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reverse a string case&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;CAVEAT:&lt;/strong&gt; Requires &lt;code&gt;bash&lt;/code&gt; 4+&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;reverse_case() {&#xA;    # Usage: reverse_case &#34;string&#34;&#xA;    printf &#39;%s\n&#39; &#34;${1~~}&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ reverse_case &#34;hello&#34;&#xA;HELLO&#xA;&#xA;$ reverse_case &#34;HeLlO&#34;&#xA;hElLo&#xA;&#xA;$ reverse_case &#34;HELLO&#34;&#xA;hello&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Trim quotes from a string&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;trim_quotes() {&#xA;    # Usage: trim_quotes &#34;string&#34;&#xA;    : &#34;${1//\&#39;}&#34;&#xA;    printf &#39;%s\n&#39; &#34;${_//\&#34;}&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ var=&#34;&#39;Hello&#39;, \&#34;World\&#34;&#34;&#xA;$ trim_quotes &#34;$var&#34;&#xA;Hello, World&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Strip all instances of pattern from string&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;strip_all() {&#xA;    # Usage: strip_all &#34;string&#34; &#34;pattern&#34;&#xA;    printf &#39;%s\n&#39; &#34;${1//$2}&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ strip_all &#34;The Quick Brown Fox&#34; &#34;[aeiou]&#34;&#xA;Th Qck Brwn Fx&#xA;&#xA;$ strip_all &#34;The Quick Brown Fox&#34; &#34;[[:space:]]&#34;&#xA;TheQuickBrownFox&#xA;&#xA;$ strip_all &#34;The Quick Brown Fox&#34; &#34;Quick &#34;&#xA;The Brown Fox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Strip first occurrence of pattern from string&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;strip() {&#xA;    # Usage: strip &#34;string&#34; &#34;pattern&#34;&#xA;    printf &#39;%s\n&#39; &#34;${1/$2}&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ strip &#34;The Quick Brown Fox&#34; &#34;[aeiou]&#34;&#xA;Th Quick Brown Fox&#xA;&#xA;$ strip &#34;The Quick Brown Fox&#34; &#34;[[:space:]]&#34;&#xA;TheQuick Brown Fox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Strip pattern from start of string&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;lstrip() {&#xA;    # Usage: lstrip &#34;string&#34; &#34;pattern&#34;&#xA;    printf &#39;%s\n&#39; &#34;${1##$2}&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ lstrip &#34;The Quick Brown Fox&#34; &#34;The &#34;&#xA;Quick Brown Fox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Strip pattern from end of string&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rstrip() {&#xA;    # Usage: rstrip &#34;string&#34; &#34;pattern&#34;&#xA;    printf &#39;%s\n&#39; &#34;${1%%$2}&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ rstrip &#34;The Quick Brown Fox&#34; &#34; Fox&#34;&#xA;The Quick Brown&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Percent-encode a string&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;urlencode() {&#xA;    # Usage: urlencode &#34;string&#34;&#xA;    local LC_ALL=C&#xA;    for (( i = 0; i &amp;lt; ${#1}; i++ )); do&#xA;        : &#34;${1:i:1}&#34;&#xA;        case &#34;$_&#34; in&#xA;            [a-zA-Z0-9.~_-])&#xA;                printf &#39;%s&#39; &#34;$_&#34;&#xA;            ;;&#xA;&#xA;            *)&#xA;                printf &#39;%%%02X&#39; &#34;&#39;$_&#34;&#xA;            ;;&#xA;        esac&#xA;    done&#xA;    printf &#39;\n&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ urlencode &#34;https://github.com/dylanaraps/pure-bash-bible&#34;&#xA;https%3A%2F%2Fgithub.com%2Fdylanaraps%2Fpure-bash-bible&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Decode a percent-encoded string&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;urldecode() {&#xA;    # Usage: urldecode &#34;string&#34;&#xA;    : &#34;${1//+/ }&#34;&#xA;    printf &#39;%b\n&#39; &#34;${_//%/\\x}&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ urldecode &#34;https%3A%2F%2Fgithub.com%2Fdylanaraps%2Fpure-bash-bible&#34;&#xA;https://github.com/dylanaraps/pure-bash-bible&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Check if string contains a sub-string&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Using a test:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;if [[ $var == *sub_string* ]]; then&#xA;    printf &#39;%s\n&#39; &#34;sub_string is in var.&#34;&#xA;fi&#xA;&#xA;# Inverse (substring not in string).&#xA;if [[ $var != *sub_string* ]]; then&#xA;    printf &#39;%s\n&#39; &#34;sub_string is not in var.&#34;&#xA;fi&#xA;&#xA;# This works for arrays too!&#xA;if [[ ${arr[*]} == *sub_string* ]]; then&#xA;    printf &#39;%s\n&#39; &#34;sub_string is in array.&#34;&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Using a case statement:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;case &#34;$var&#34; in&#xA;    *sub_string*)&#xA;        # Do stuff&#xA;    ;;&#xA;&#xA;    *sub_string2*)&#xA;        # Do more stuff&#xA;    ;;&#xA;&#xA;    *)&#xA;        # Else&#xA;    ;;&#xA;esac&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Check if string starts with sub-string&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;if [[ $var == sub_string* ]]; then&#xA;    printf &#39;%s\n&#39; &#34;var starts with sub_string.&#34;&#xA;fi&#xA;&#xA;# Inverse (var does not start with sub_string).&#xA;if [[ $var != sub_string* ]]; then&#xA;    printf &#39;%s\n&#39; &#34;var does not start with sub_string.&#34;&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Check if string ends with sub-string&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;if [[ $var == *sub_string ]]; then&#xA;    printf &#39;%s\n&#39; &#34;var ends with sub_string.&#34;&#xA;fi&#xA;&#xA;# Inverse (var does not end with sub_string).&#xA;if [[ $var != *sub_string ]]; then&#xA;    printf &#39;%s\n&#39; &#34;var does not end with sub_string.&#34;&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- CHAPTER END --&gt; &#xA;&lt;!-- CHAPTER START --&gt; &#xA;&lt;h1&gt;ARRAYS&lt;/h1&gt; &#xA;&lt;h2&gt;Reverse an array&lt;/h2&gt; &#xA;&lt;p&gt;Enabling &lt;code&gt;extdebug&lt;/code&gt; allows access to the &lt;code&gt;BASH_ARGV&lt;/code&gt; array which stores the current function’s arguments in reverse.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;CAVEAT&lt;/strong&gt;: Requires &lt;code&gt;shopt -s compat44&lt;/code&gt; in &lt;code&gt;bash&lt;/code&gt; 5.0+.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;reverse_array() {&#xA;    # Usage: reverse_array &#34;array&#34;&#xA;    shopt -s extdebug&#xA;    f()(printf &#39;%s\n&#39; &#34;${BASH_ARGV[@]}&#34;); f &#34;$@&#34;&#xA;    shopt -u extdebug&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ reverse_array 1 2 3 4 5&#xA;5&#xA;4&#xA;3&#xA;2&#xA;1&#xA;&#xA;$ arr=(red blue green)&#xA;$ reverse_array &#34;${arr[@]}&#34;&#xA;green&#xA;blue&#xA;red&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Remove duplicate array elements&lt;/h2&gt; &#xA;&lt;p&gt;Create a temporary associative array. When setting associative array values and a duplicate assignment occurs, bash overwrites the key. This allows us to effectively remove array duplicates.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;CAVEAT:&lt;/strong&gt; Requires &lt;code&gt;bash&lt;/code&gt; 4+&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;CAVEAT:&lt;/strong&gt; List order may not stay the same.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;remove_array_dups() {&#xA;    # Usage: remove_array_dups &#34;array&#34;&#xA;    declare -A tmp_array&#xA;&#xA;    for i in &#34;$@&#34;; do&#xA;        [[ $i ]] &amp;amp;&amp;amp; IFS=&#34; &#34; tmp_array[&#34;${i:- }&#34;]=1&#xA;    done&#xA;&#xA;    printf &#39;%s\n&#39; &#34;${!tmp_array[@]}&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ remove_array_dups 1 1 2 2 3 3 3 3 3 4 4 4 4 4 5 5 5 5 5 5&#xA;1&#xA;2&#xA;3&#xA;4&#xA;5&#xA;&#xA;$ arr=(red red green blue blue)&#xA;$ remove_array_dups &#34;${arr[@]}&#34;&#xA;red&#xA;green&#xA;blue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Random array element&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;random_array_element() {&#xA;    # Usage: random_array_element &#34;array&#34;&#xA;    local arr=(&#34;$@&#34;)&#xA;    printf &#39;%s\n&#39; &#34;${arr[RANDOM % $#]}&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ array=(red green blue yellow brown)&#xA;$ random_array_element &#34;${array[@]}&#34;&#xA;yellow&#xA;&#xA;# Multiple arguments can also be passed.&#xA;$ random_array_element 1 2 3 4 5 6 7&#xA;3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Cycle through an array&lt;/h2&gt; &#xA;&lt;p&gt;Each time the &lt;code&gt;printf&lt;/code&gt; is called, the next array element is printed. When the print hits the last array element it starts from the first element again.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;arr=(a b c d)&#xA;&#xA;cycle() {&#xA;    printf &#39;%s &#39; &#34;${arr[${i:=0}]}&#34;&#xA;    ((i=i&amp;gt;=${#arr[@]}-1?0:++i))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Toggle between two values&lt;/h2&gt; &#xA;&lt;p&gt;This works the same as above, this is just a different use case.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;arr=(true false)&#xA;&#xA;cycle() {&#xA;    printf &#39;%s &#39; &#34;${arr[${i:=0}]}&#34;&#xA;    ((i=i&amp;gt;=${#arr[@]}-1?0:++i))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- CHAPTER END --&gt; &#xA;&lt;!-- CHAPTER START --&gt; &#xA;&lt;h1&gt;LOOPS&lt;/h1&gt; &#xA;&lt;h2&gt;Loop over a range of numbers&lt;/h2&gt; &#xA;&lt;p&gt;Alternative to &lt;code&gt;seq&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Loop from 0-100 (no variable support).&#xA;for i in {0..100}; do&#xA;    printf &#39;%s\n&#39; &#34;$i&#34;&#xA;done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Loop over a variable range of numbers&lt;/h2&gt; &#xA;&lt;p&gt;Alternative to &lt;code&gt;seq&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Loop from 0-VAR.&#xA;VAR=50&#xA;for ((i=0;i&amp;lt;=VAR;i++)); do&#xA;    printf &#39;%s\n&#39; &#34;$i&#34;&#xA;done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Loop over an array&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;arr=(apples oranges tomatoes)&#xA;&#xA;# Just elements.&#xA;for element in &#34;${arr[@]}&#34;; do&#xA;    printf &#39;%s\n&#39; &#34;$element&#34;&#xA;done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Loop over an array with an index&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;arr=(apples oranges tomatoes)&#xA;&#xA;# Elements and index.&#xA;for i in &#34;${!arr[@]}&#34;; do&#xA;    printf &#39;%s\n&#39; &#34;${arr[i]}&#34;&#xA;done&#xA;&#xA;# Alternative method.&#xA;for ((i=0;i&amp;lt;${#arr[@]};i++)); do&#xA;    printf &#39;%s\n&#39; &#34;${arr[i]}&#34;&#xA;done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Loop over the contents of a file&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;while read -r line; do&#xA;    printf &#39;%s\n&#39; &#34;$line&#34;&#xA;done &amp;lt; &#34;file&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Loop over files and directories&lt;/h2&gt; &#xA;&lt;p&gt;Don’t use &lt;code&gt;ls&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Greedy example.&#xA;for file in *; do&#xA;    printf &#39;%s\n&#39; &#34;$file&#34;&#xA;done&#xA;&#xA;# PNG files in dir.&#xA;for file in ~/Pictures/*.png; do&#xA;    printf &#39;%s\n&#39; &#34;$file&#34;&#xA;done&#xA;&#xA;# Iterate over directories.&#xA;for dir in ~/Downloads/*/; do&#xA;    printf &#39;%s\n&#39; &#34;$dir&#34;&#xA;done&#xA;&#xA;# Brace Expansion.&#xA;for file in /path/to/parentdir/{file1,file2,subdir/file3}; do&#xA;    printf &#39;%s\n&#39; &#34;$file&#34;&#xA;done&#xA;&#xA;# Iterate recursively.&#xA;shopt -s globstar&#xA;for file in ~/Pictures/**/*; do&#xA;    printf &#39;%s\n&#39; &#34;$file&#34;&#xA;done&#xA;shopt -u globstar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- CHAPTER END --&gt; &#xA;&lt;!-- CHAPTER START --&gt; &#xA;&lt;h1&gt;FILE HANDLING&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;CAVEAT:&lt;/strong&gt; &lt;code&gt;bash&lt;/code&gt; does not handle binary data properly in versions &lt;code&gt;&amp;lt; 4.4&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Read a file to a string&lt;/h2&gt; &#xA;&lt;p&gt;Alternative to the &lt;code&gt;cat&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;file_data=&#34;$(&amp;lt;&#34;file&#34;)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Read a file to an array (&lt;em&gt;by line&lt;/em&gt;)&lt;/h2&gt; &#xA;&lt;p&gt;Alternative to the &lt;code&gt;cat&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Bash &amp;lt;4 (discarding empty lines).&#xA;IFS=$&#39;\n&#39; read -d &#34;&#34; -ra file_data &amp;lt; &#34;file&#34;&#xA;&#xA;# Bash &amp;lt;4 (preserving empty lines).&#xA;while read -r line; do&#xA;    file_data+=(&#34;$line&#34;)&#xA;done &amp;lt; &#34;file&#34;&#xA;&#xA;# Bash 4+&#xA;mapfile -t file_data &amp;lt; &#34;file&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get the first N lines of a file&lt;/h2&gt; &#xA;&lt;p&gt;Alternative to the &lt;code&gt;head&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;CAVEAT:&lt;/strong&gt; Requires &lt;code&gt;bash&lt;/code&gt; 4+&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;head() {&#xA;    # Usage: head &#34;n&#34; &#34;file&#34;&#xA;    mapfile -tn &#34;$1&#34; line &amp;lt; &#34;$2&#34;&#xA;    printf &#39;%s\n&#39; &#34;${line[@]}&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ head 2 ~/.bashrc&#xA;# Prompt&#xA;PS1=&#39;➜ &#39;&#xA;&#xA;$ head 1 ~/.bashrc&#xA;# Prompt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get the last N lines of a file&lt;/h2&gt; &#xA;&lt;p&gt;Alternative to the &lt;code&gt;tail&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;CAVEAT:&lt;/strong&gt; Requires &lt;code&gt;bash&lt;/code&gt; 4+&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;tail() {&#xA;    # Usage: tail &#34;n&#34; &#34;file&#34;&#xA;    mapfile -tn 0 line &amp;lt; &#34;$2&#34;&#xA;    printf &#39;%s\n&#39; &#34;${line[@]: -$1}&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ tail 2 ~/.bashrc&#xA;# Enable tmux.&#xA;# [[ -z &#34;$TMUX&#34;  ]] &amp;amp;&amp;amp; exec tmux&#xA;&#xA;$ tail 1 ~/.bashrc&#xA;# [[ -z &#34;$TMUX&#34;  ]] &amp;amp;&amp;amp; exec tmux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get the number of lines in a file&lt;/h2&gt; &#xA;&lt;p&gt;Alternative to &lt;code&gt;wc -l&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Function (bash 4):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;lines() {&#xA;    # Usage: lines &#34;file&#34;&#xA;    mapfile -tn 0 lines &amp;lt; &#34;$1&#34;&#xA;    printf &#39;%s\n&#39; &#34;${#lines[@]}&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Function (bash 3):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This method uses less memory than the &lt;code&gt;mapfile&lt;/code&gt; method and works in &lt;code&gt;bash&lt;/code&gt; 3 but it is slower for bigger files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;lines_loop() {&#xA;    # Usage: lines_loop &#34;file&#34;&#xA;    count=0&#xA;    while IFS= read -r _; do&#xA;        ((count++))&#xA;    done &amp;lt; &#34;$1&#34;&#xA;    printf &#39;%s\n&#39; &#34;$count&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ lines ~/.bashrc&#xA;48&#xA;&#xA;$ lines_loop ~/.bashrc&#xA;48&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Count files or directories in directory&lt;/h2&gt; &#xA;&lt;p&gt;This works by passing the output of the glob to the function and then counting the number of arguments.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;count() {&#xA;    # Usage: count /path/to/dir/*&#xA;    #        count /path/to/dir/*/&#xA;    printf &#39;%s\n&#39; &#34;$#&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Count all files in dir.&#xA;$ count ~/Downloads/*&#xA;232&#xA;&#xA;# Count all dirs in dir.&#xA;$ count ~/Downloads/*/&#xA;45&#xA;&#xA;# Count all jpg files in dir.&#xA;$ count ~/Pictures/*.jpg&#xA;64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Create an empty file&lt;/h2&gt; &#xA;&lt;p&gt;Alternative to &lt;code&gt;touch&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Shortest.&#xA;&amp;gt;file&#xA;&#xA;# Longer alternatives:&#xA;:&amp;gt;file&#xA;echo -n &amp;gt;file&#xA;printf &#39;&#39; &amp;gt;file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Extract lines between two markers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;extract() {&#xA;    # Usage: extract file &#34;opening marker&#34; &#34;closing marker&#34;&#xA;    while IFS=$&#39;\n&#39; read -r line; do&#xA;        [[ $extract &amp;amp;&amp;amp; $line != &#34;$3&#34; ]] &amp;amp;&amp;amp;&#xA;            printf &#39;%s\n&#39; &#34;$line&#34;&#xA;&#xA;        [[ $line == &#34;$2&#34; ]] &amp;amp;&amp;amp; extract=1&#xA;        [[ $line == &#34;$3&#34; ]] &amp;amp;&amp;amp; extract=&#xA;    done &amp;lt; &#34;$1&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Extract code blocks from MarkDown file.&#xA;$ extract ~/projects/pure-bash/README.md &#39;```sh&#39; &#39;```&#39;&#xA;# Output here...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- CHAPTER END --&gt; &#xA;&lt;!-- CHAPTER START --&gt; &#xA;&lt;h1&gt;FILE PATHS&lt;/h1&gt; &#xA;&lt;h2&gt;Get the directory name of a file path&lt;/h2&gt; &#xA;&lt;p&gt;Alternative to the &lt;code&gt;dirname&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dirname() {&#xA;    # Usage: dirname &#34;path&#34;&#xA;    local tmp=${1:-.}&#xA;&#xA;    [[ $tmp != *[!/]* ]] &amp;amp;&amp;amp; {&#xA;        printf &#39;/\n&#39;&#xA;        return&#xA;    }&#xA;&#xA;    tmp=${tmp%%&#34;${tmp##*[!/]}&#34;}&#xA;&#xA;    [[ $tmp != */* ]] &amp;amp;&amp;amp; {&#xA;        printf &#39;.\n&#39;&#xA;        return&#xA;    }&#xA;&#xA;    tmp=${tmp%/*}&#xA;    tmp=${tmp%%&#34;${tmp##*[!/]}&#34;}&#xA;&#xA;    printf &#39;%s\n&#39; &#34;${tmp:-/}&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ dirname ~/Pictures/Wallpapers/1.jpg&#xA;/home/black/Pictures/Wallpapers&#xA;&#xA;$ dirname ~/Pictures/Downloads/&#xA;/home/black/Pictures&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get the base-name of a file path&lt;/h2&gt; &#xA;&lt;p&gt;Alternative to the &lt;code&gt;basename&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;basename() {&#xA;    # Usage: basename &#34;path&#34; [&#34;suffix&#34;]&#xA;    local tmp&#xA;&#xA;    tmp=${1%&#34;${1##*[!/]}&#34;}&#xA;    tmp=${tmp##*/}&#xA;    tmp=${tmp%&#34;${2/&#34;$tmp&#34;}&#34;}&#xA;&#xA;    printf &#39;%s\n&#39; &#34;${tmp:-/}&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ basename ~/Pictures/Wallpapers/1.jpg&#xA;1.jpg&#xA;&#xA;$ basename ~/Pictures/Wallpapers/1.jpg .jpg&#xA;1&#xA;&#xA;$ basename ~/Pictures/Downloads/&#xA;Downloads&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- CHAPTER END --&gt; &#xA;&lt;!-- CHAPTER START --&gt; &#xA;&lt;h1&gt;VARIABLES&lt;/h1&gt; &#xA;&lt;h2&gt;Assign and access a variable using a variable&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ hello_world=&#34;value&#34;&#xA;&#xA;# Create the variable name.&#xA;$ var=&#34;world&#34;&#xA;$ ref=&#34;hello_$var&#34;&#xA;&#xA;# Print the value of the variable name stored in &#39;hello_$var&#39;.&#xA;$ printf &#39;%s\n&#39; &#34;${!ref}&#34;&#xA;value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, on &lt;code&gt;bash&lt;/code&gt; 4.3+:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ hello_world=&#34;value&#34;&#xA;$ var=&#34;world&#34;&#xA;&#xA;# Declare a nameref.&#xA;$ declare -n ref=hello_$var&#xA;&#xA;$ printf &#39;%s\n&#39; &#34;$ref&#34;&#xA;value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Name a variable based on another variable&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ var=&#34;world&#34;&#xA;$ declare &#34;hello_$var=value&#34;&#xA;$ printf &#39;%s\n&#39; &#34;$hello_world&#34;&#xA;value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- CHAPTER END --&gt; &#xA;&lt;!-- CHAPTER START --&gt; &#xA;&lt;h1&gt;ESCAPE SEQUENCES&lt;/h1&gt; &#xA;&lt;p&gt;Contrary to popular belief, there is no issue in utilizing raw escape sequences. Using &lt;code&gt;tput&lt;/code&gt; abstracts the same ANSI sequences as if printed manually. Worse still, &lt;code&gt;tput&lt;/code&gt; is not actually portable. There are a number of &lt;code&gt;tput&lt;/code&gt; variants each with different commands and syntaxes (&lt;em&gt;try &lt;code&gt;tput setaf 3&lt;/code&gt; on a FreeBSD system&lt;/em&gt;). Raw sequences are fine.&lt;/p&gt; &#xA;&lt;h2&gt;Text Colors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Sequences requiring RGB values only work in True-Color Terminal Emulators.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Sequence&lt;/th&gt; &#xA;   &lt;th&gt;What does it do?&lt;/th&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;\e[38;5;&amp;lt;NUM&amp;gt;m&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set text foreground color.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0-255&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;\e[48;5;&amp;lt;NUM&amp;gt;m&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set text background color.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0-255&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;\e[38;2;&amp;lt;R&amp;gt;;&amp;lt;G&amp;gt;;&amp;lt;B&amp;gt;m&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set text foreground color to RGB color.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;R&lt;/code&gt;, &lt;code&gt;G&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;\e[48;2;&amp;lt;R&amp;gt;;&amp;lt;G&amp;gt;;&amp;lt;B&amp;gt;m&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set text background color to RGB color.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;R&lt;/code&gt;, &lt;code&gt;G&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Text Attributes&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Prepend 2 to any code below to turn it&#39;s effect off (examples: 21=bold text off, 22=faint text off, 23=italic text off).&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Sequence&lt;/th&gt; &#xA;   &lt;th&gt;What does it do?&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;\e[m&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Reset text formatting and colors.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;\e[1m&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bold text.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;\e[2m&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Faint text.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;\e[3m&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Italic text.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;\e[4m&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Underline text.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;\e[5m&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Blinking text.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;\e[7m&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Highlighted text.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;\e[8m&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Hidden text.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;\e[9m&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Strike-through text.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Cursor Movement&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Sequence&lt;/th&gt; &#xA;   &lt;th&gt;What does it do?&lt;/th&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;\e[&amp;lt;LINE&amp;gt;;&amp;lt;COLUMN&amp;gt;H&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move cursor to absolute position.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;line&lt;/code&gt;, &lt;code&gt;column&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;\e[H&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move cursor to home position (&lt;code&gt;0,0&lt;/code&gt;).&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;\e[&amp;lt;NUM&amp;gt;A&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move cursor up N lines.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;num&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;\e[&amp;lt;NUM&amp;gt;B&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move cursor down N lines.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;num&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;\e[&amp;lt;NUM&amp;gt;C&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move cursor right N columns.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;num&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;\e[&amp;lt;NUM&amp;gt;D&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move cursor left N columns.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;num&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;\e[s&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Save cursor position.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;\e[u&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Restore cursor position.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Erasing Text&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Sequence&lt;/th&gt; &#xA;   &lt;th&gt;What does it do?&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;\e[K&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Erase from cursor position to end of line.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;\e[1K&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Erase from cursor position to start of line.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;\e[2K&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Erase the entire current line.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;\e[J&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Erase from the current line to the bottom of the screen.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;\e[1J&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Erase from the current line to the top of the screen.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;\e[2J&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Clear the screen.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;\e[2J\e[H&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Clear the screen and move cursor to &lt;code&gt;0,0&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- CHAPTER END --&gt; &#xA;&lt;!-- CHAPTER START --&gt; &#xA;&lt;h1&gt;PARAMETER EXPANSION&lt;/h1&gt; &#xA;&lt;h2&gt;Indirection&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Parameter&lt;/th&gt; &#xA;   &lt;th&gt;What does it do?&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${!VAR}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Access a variable based on the value of &lt;code&gt;VAR&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${!VAR*}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Expand to &lt;code&gt;IFS&lt;/code&gt; separated list of variable names starting with &lt;code&gt;VAR&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${!VAR@}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Expand to &lt;code&gt;IFS&lt;/code&gt; separated list of variable names starting with &lt;code&gt;VAR&lt;/code&gt;. If double-quoted, each variable name expands to a separate word.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Replacement&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Parameter&lt;/th&gt; &#xA;   &lt;th&gt;What does it do?&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${VAR#PATTERN}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Remove shortest match of pattern from start of string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${VAR##PATTERN}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Remove longest match of pattern from start of string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${VAR%PATTERN}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Remove shortest match of pattern from end of string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${VAR%%PATTERN}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Remove longest match of pattern from end of string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${VAR/PATTERN/REPLACE}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Replace first match with string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${VAR//PATTERN/REPLACE}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Replace all matches with string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${VAR/PATTERN}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Remove first match.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${VAR//PATTERN}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Remove all matches.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Length&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Parameter&lt;/th&gt; &#xA;   &lt;th&gt;What does it do?&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${#VAR}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Length of var in characters.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${#ARR[@]}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Length of array in elements.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Expansion&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Parameter&lt;/th&gt; &#xA;   &lt;th&gt;What does it do?&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${VAR:OFFSET}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Remove first &lt;code&gt;N&lt;/code&gt; chars from variable.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${VAR:OFFSET:LENGTH}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Get substring from &lt;code&gt;N&lt;/code&gt; character to &lt;code&gt;N&lt;/code&gt; character. &lt;br&gt; (&lt;code&gt;${VAR:10:10}&lt;/code&gt;: Get sub-string from char &lt;code&gt;10&lt;/code&gt; to char &lt;code&gt;20&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${VAR:: OFFSET}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Get first &lt;code&gt;N&lt;/code&gt; chars from variable.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${VAR:: -OFFSET}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Remove last &lt;code&gt;N&lt;/code&gt; chars from variable.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${VAR: -OFFSET}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Get last &lt;code&gt;N&lt;/code&gt; chars from variable.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${VAR:OFFSET:-OFFSET}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Cut first &lt;code&gt;N&lt;/code&gt; chars and last &lt;code&gt;N&lt;/code&gt; chars.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Case Modification&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Parameter&lt;/th&gt; &#xA;   &lt;th&gt;What does it do?&lt;/th&gt; &#xA;   &lt;th&gt;CAVEAT&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${VAR^}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Uppercase first character.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bash 4+&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${VAR^^}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Uppercase all characters.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bash 4+&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${VAR,}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lowercase first character.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bash 4+&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${VAR,,}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lowercase all characters.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bash 4+&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${VAR~}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Reverse case of first character.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bash 4+&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${VAR~~}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Reverse case of all characters.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bash 4+&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Default Value&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Parameter&lt;/th&gt; &#xA;   &lt;th&gt;What does it do?&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${VAR:-STRING}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If &lt;code&gt;VAR&lt;/code&gt; is empty or unset, use &lt;code&gt;STRING&lt;/code&gt; as its value.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${VAR-STRING}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If &lt;code&gt;VAR&lt;/code&gt; is unset, use &lt;code&gt;STRING&lt;/code&gt; as its value.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${VAR:=STRING}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If &lt;code&gt;VAR&lt;/code&gt; is empty or unset, set the value of &lt;code&gt;VAR&lt;/code&gt; to &lt;code&gt;STRING&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${VAR=STRING}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If &lt;code&gt;VAR&lt;/code&gt; is unset, set the value of &lt;code&gt;VAR&lt;/code&gt; to &lt;code&gt;STRING&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${VAR:+STRING}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If &lt;code&gt;VAR&lt;/code&gt; is not empty, use &lt;code&gt;STRING&lt;/code&gt; as its value.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${VAR+STRING}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If &lt;code&gt;VAR&lt;/code&gt; is set, use &lt;code&gt;STRING&lt;/code&gt; as its value.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${VAR:?STRING}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display an error if empty or unset.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${VAR?STRING}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display an error if unset.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- CHAPTER END --&gt; &#xA;&lt;!-- CHAPTER START --&gt; &#xA;&lt;h1&gt;BRACE EXPANSION&lt;/h1&gt; &#xA;&lt;h2&gt;Ranges&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Syntax: {&amp;lt;START&amp;gt;..&amp;lt;END&amp;gt;}&#xA;&#xA;# Print numbers 1-100.&#xA;echo {1..100}&#xA;&#xA;# Print range of floats.&#xA;echo 1.{1..9}&#xA;&#xA;# Print chars a-z.&#xA;echo {a..z}&#xA;echo {A..Z}&#xA;&#xA;# Nesting.&#xA;echo {A..Z}{0..9}&#xA;&#xA;# Print zero-padded numbers.&#xA;# CAVEAT: bash 4+&#xA;echo {01..100}&#xA;&#xA;# Change increment amount.&#xA;# Syntax: {&amp;lt;START&amp;gt;..&amp;lt;END&amp;gt;..&amp;lt;INCREMENT&amp;gt;}&#xA;# CAVEAT: bash 4+&#xA;echo {1..10..2} # Increment by 2.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;String Lists&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;echo {apples,oranges,pears,grapes}&#xA;&#xA;# Example Usage:&#xA;# Remove dirs Movies, Music and ISOS from ~/Downloads/.&#xA;rm -rf ~/Downloads/{Movies,Music,ISOS}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- CHAPTER END --&gt; &#xA;&lt;!-- CHAPTER START --&gt; &#xA;&lt;h1&gt;CONDITIONAL EXPRESSIONS&lt;/h1&gt; &#xA;&lt;h2&gt;File Conditionals&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Expression&lt;/th&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;   &lt;th&gt;What does it do?&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-a&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If file exists.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-b&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If file exists and is a block special file.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-c&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If file exists and is a character special file.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-d&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If file exists and is a directory.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-e&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If file exists.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-f&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If file exists and is a regular file.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-g&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If file exists and its set-group-id bit is set.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-h&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If file exists and is a symbolic link.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-k&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If file exists and its sticky-bit is set&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-p&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If file exists and is a named pipe (&lt;em&gt;FIFO&lt;/em&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-r&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If file exists and is readable.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-s&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If file exists and its size is greater than zero.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-t&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;fd&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If file descriptor is open and refers to a terminal.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-u&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If file exists and its set-user-id bit is set.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-w&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If file exists and is writable.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-x&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If file exists and is executable.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-G&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If file exists and is owned by the effective group ID.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-L&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If file exists and is a symbolic link.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-N&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If file exists and has been modified since last read.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-O&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If file exists and is owned by the effective user ID.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-S&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If file exists and is a socket.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;File Comparisons&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Expression&lt;/th&gt; &#xA;   &lt;th&gt;What does it do?&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;file -ef file2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If both files refer to the same inode and device numbers.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;file -nt file2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If &lt;code&gt;file&lt;/code&gt; is newer than &lt;code&gt;file2&lt;/code&gt; (&lt;em&gt;uses modification time&lt;/em&gt;) or &lt;code&gt;file&lt;/code&gt; exists and &lt;code&gt;file2&lt;/code&gt; does not.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;file -ot file2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If &lt;code&gt;file&lt;/code&gt; is older than &lt;code&gt;file2&lt;/code&gt; (&lt;em&gt;uses modification time&lt;/em&gt;) or &lt;code&gt;file2&lt;/code&gt; exists and &lt;code&gt;file&lt;/code&gt; does not.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Variable Conditionals&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Expression&lt;/th&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;   &lt;th&gt;What does it do?&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-o&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;opt&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If shell option is enabled.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-v&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;var&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If variable has a value assigned.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-R&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;var&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If variable is a name reference.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-z&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;var&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If the length of string is zero.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-n&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;var&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If the length of string is non-zero.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Variable Comparisons&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Expression&lt;/th&gt; &#xA;   &lt;th&gt;What does it do?&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;var = var2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Equal to.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;var == var2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Equal to (&lt;em&gt;synonym for &lt;code&gt;=&lt;/code&gt;&lt;/em&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;var != var2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Not equal to.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;var &amp;lt; var2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Less than (&lt;em&gt;in ASCII alphabetical order.&lt;/em&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;var &amp;gt; var2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Greater than (&lt;em&gt;in ASCII alphabetical order.&lt;/em&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- CHAPTER END --&gt; &#xA;&lt;!-- CHAPTER START --&gt; &#xA;&lt;h1&gt;ARITHMETIC OPERATORS&lt;/h1&gt; &#xA;&lt;h2&gt;Assignment&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Operators&lt;/th&gt; &#xA;   &lt;th&gt;What does it do?&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;=&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Initialize or change the value of a variable.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Arithmetic&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Operators&lt;/th&gt; &#xA;   &lt;th&gt;What does it do?&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Addition&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Subtraction&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Multiplication&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Division&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;**&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Exponentiation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;%&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Modulo&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;+=&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Plus-Equal (&lt;em&gt;Increment a variable.&lt;/em&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-=&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Minus-Equal (&lt;em&gt;Decrement a variable.&lt;/em&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;*=&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Times-Equal (&lt;em&gt;Multiply a variable.&lt;/em&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/=&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Slash-Equal (&lt;em&gt;Divide a variable.&lt;/em&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;%=&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Mod-Equal (&lt;em&gt;Remainder of dividing a variable.&lt;/em&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Bitwise&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Operators&lt;/th&gt; &#xA;   &lt;th&gt;What does it do?&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bitwise Left Shift&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Left-Shift-Equal&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bitwise Right Shift&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Right-Shift-Equal&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bitwise AND&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;amp;=&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bitwise AND-Equal&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;|&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bitwise OR&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;|=&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bitwise OR-Equal&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;~&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bitwise NOT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;^&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bitwise XOR&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;^=&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bitwise XOR-Equal&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Logical&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Operators&lt;/th&gt; &#xA;   &lt;th&gt;What does it do?&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;!&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NOT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;AND&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;||&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;OR&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Miscellaneous&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Operators&lt;/th&gt; &#xA;   &lt;th&gt;What does it do?&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;,&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Comma Separator&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;((a=1,b=2,c=3))&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- CHAPTER END --&gt; &#xA;&lt;!-- CHAPTER START --&gt; &#xA;&lt;h1&gt;ARITHMETIC&lt;/h1&gt; &#xA;&lt;h2&gt;Simpler syntax to set variables&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Simple math&#xA;((var=1+2))&#xA;&#xA;# Decrement/Increment variable&#xA;((var++))&#xA;((var--))&#xA;((var+=1))&#xA;((var-=1))&#xA;&#xA;# Using variables&#xA;((var=var2*arr[2]))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Ternary Tests&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Set the value of var to var2 if var2 is greater than var.&#xA;# var: variable to set.&#xA;# var2&amp;gt;var: Condition to test.&#xA;# ?var2: If the test succeeds.&#xA;# :var: If the test fails.&#xA;((var=var2&amp;gt;var?var2:var))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- CHAPTER END --&gt; &#xA;&lt;!-- CHAPTER START --&gt; &#xA;&lt;h1&gt;TRAPS&lt;/h1&gt; &#xA;&lt;p&gt;Traps allow a script to execute code on various signals. In &lt;a href=&#34;https://github.com/dylanaraps/pxltrm&#34;&gt;pxltrm&lt;/a&gt; (&lt;em&gt;a pixel art editor written in bash&lt;/em&gt;) traps are used to redraw the user interface on window resize. Another use case is cleaning up temporary files on script exit.&lt;/p&gt; &#xA;&lt;p&gt;Traps should be added near the start of scripts so any early errors are also caught.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; For a full list of signals, see &lt;code&gt;trap -l&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Do something on script exit&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Clear screen on script exit.&#xA;trap &#39;printf \\e[2J\\e[H\\e[m&#39; EXIT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Ignore terminal interrupt (CTRL+C, SIGINT)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;trap &#39;&#39; INT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;React to window resize&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Call a function on window resize.&#xA;trap &#39;code_here&#39; SIGWINCH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Do something before every command&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;trap &#39;code_here&#39; DEBUG&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Do something when a shell function or a sourced file finishes executing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;trap &#39;code_here&#39; RETURN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- CHAPTER END --&gt; &#xA;&lt;!-- CHAPTER START --&gt; &#xA;&lt;h1&gt;PERFORMANCE&lt;/h1&gt; &#xA;&lt;h2&gt;Disable Unicode&lt;/h2&gt; &#xA;&lt;p&gt;If unicode is not required, it can be disabled for a performance increase. Results may vary however there have been noticeable improvements in &lt;a href=&#34;https://github.com/dylanaraps/neofetch&#34;&gt;neofetch&lt;/a&gt; and other programs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Disable unicode.&#xA;LC_ALL=C&#xA;LANG=C&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- CHAPTER END --&gt; &#xA;&lt;!-- CHAPTER START --&gt; &#xA;&lt;h1&gt;OBSOLETE SYNTAX&lt;/h1&gt; &#xA;&lt;h2&gt;Shebang&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;#!/usr/bin/env bash&lt;/code&gt; instead of &lt;code&gt;#!/bin/bash&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The former searches the user&#39;s &lt;code&gt;PATH&lt;/code&gt; to find the &lt;code&gt;bash&lt;/code&gt; binary.&lt;/li&gt; &#xA; &lt;li&gt;The latter assumes it is always installed to &lt;code&gt;/bin/&lt;/code&gt; which can cause issues.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: There are times when one may have a good reason for using &lt;code&gt;#!/bin/bash&lt;/code&gt; or another direct path to the binary.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Right:&#xA;&#xA;    #!/usr/bin/env bash&#xA;&#xA;# Less right:&#xA;&#xA;    #!/bin/bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Command Substitution&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;$()&lt;/code&gt; instead of &lt;code&gt;` `&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Right.&#xA;var=&#34;$(command)&#34;&#xA;&#xA;# Wrong.&#xA;var=`command`&#xA;&#xA;# $() can easily be nested whereas `` cannot.&#xA;var=&#34;$(command &#34;$(command)&#34;)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Function Declaration&lt;/h2&gt; &#xA;&lt;p&gt;Do not use the &lt;code&gt;function&lt;/code&gt; keyword, it reduces compatibility with older versions of &lt;code&gt;bash&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Right.&#xA;do_something() {&#xA;    # ...&#xA;}&#xA;&#xA;# Wrong.&#xA;function do_something() {&#xA;    # ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- CHAPTER END --&gt; &#xA;&lt;!-- CHAPTER START --&gt; &#xA;&lt;h1&gt;INTERNAL VARIABLES&lt;/h1&gt; &#xA;&lt;h2&gt;Get the location to the &lt;code&gt;bash&lt;/code&gt; binary&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&#34;$BASH&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get the version of the current running &lt;code&gt;bash&lt;/code&gt; process&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# As a string.&#xA;&#34;$BASH_VERSION&#34;&#xA;&#xA;# As an array.&#xA;&#34;${BASH_VERSINFO[@]}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Open the user&#39;s preferred text editor&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&#34;$EDITOR&#34; &#34;$file&#34;&#xA;&#xA;# NOTE: This variable may be empty, set a fallback value.&#xA;&#34;${EDITOR:-vi}&#34; &#34;$file&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get the name of the current function&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Current function.&#xA;&#34;${FUNCNAME[0]}&#34;&#xA;&#xA;# Parent function.&#xA;&#34;${FUNCNAME[1]}&#34;&#xA;&#xA;# So on and so forth.&#xA;&#34;${FUNCNAME[2]}&#34;&#xA;&#34;${FUNCNAME[3]}&#34;&#xA;&#xA;# All functions including parents.&#xA;&#34;${FUNCNAME[@]}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get the host-name of the system&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&#34;$HOSTNAME&#34;&#xA;&#xA;# NOTE: This variable may be empty.&#xA;# Optionally set a fallback to the hostname command.&#xA;&#34;${HOSTNAME:-$(hostname)}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get the architecture of the Operating System&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&#34;$HOSTTYPE&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get the name of the Operating System / Kernel&lt;/h2&gt; &#xA;&lt;p&gt;This can be used to add conditional support for different Operating Systems without needing to call &lt;code&gt;uname&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&#34;$OSTYPE&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get the current working directory&lt;/h2&gt; &#xA;&lt;p&gt;This is an alternative to the &lt;code&gt;pwd&lt;/code&gt; built-in.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&#34;$PWD&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get the number of seconds the script has been running&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&#34;$SECONDS&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get a pseudorandom integer&lt;/h2&gt; &#xA;&lt;p&gt;Each time &lt;code&gt;$RANDOM&lt;/code&gt; is used, a different integer between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;32767&lt;/code&gt; is returned. This variable should not be used for anything related to security (&lt;em&gt;this includes encryption keys etc&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&#34;$RANDOM&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- CHAPTER END --&gt; &#xA;&lt;!-- CHAPTER START --&gt; &#xA;&lt;h1&gt;INFORMATION ABOUT THE TERMINAL&lt;/h1&gt; &#xA;&lt;h2&gt;Get the terminal size in lines and columns (&lt;em&gt;from a script&lt;/em&gt;)&lt;/h2&gt; &#xA;&lt;p&gt;This is handy when writing scripts in pure bash and &lt;code&gt;stty&lt;/code&gt;/&lt;code&gt;tput&lt;/code&gt; can’t be called.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;get_term_size() {&#xA;    # Usage: get_term_size&#xA;&#xA;    # (:;:) is a micro sleep to ensure the variables are&#xA;    # exported immediately.&#xA;    shopt -s checkwinsize; (:;:)&#xA;    printf &#39;%s\n&#39; &#34;$LINES $COLUMNS&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Output: LINES COLUMNS&#xA;$ get_term_size&#xA;15 55&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get the terminal size in pixels&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;CAVEAT&lt;/strong&gt;: This does not work in some terminal emulators.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;get_window_size() {&#xA;    # Usage: get_window_size&#xA;    printf &#39;%b&#39; &#34;${TMUX:+\\ePtmux;\\e}\\e[14t${TMUX:+\\e\\\\}&#34;&#xA;    IFS=&#39;;t&#39; read -d t -t 0.05 -sra term_size&#xA;    printf &#39;%s\n&#39; &#34;${term_size[1]}x${term_size[2]}&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Output: WIDTHxHEIGHT&#xA;$ get_window_size&#xA;1200x800&#xA;&#xA;# Output (fail):&#xA;$ get_window_size&#xA;x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get the current cursor position&lt;/h2&gt; &#xA;&lt;p&gt;This is useful when creating a TUI in pure bash.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;get_cursor_pos() {&#xA;    # Usage: get_cursor_pos&#xA;    IFS=&#39;[;&#39; read -p $&#39;\e[6n&#39; -d R -rs _ y x _&#xA;    printf &#39;%s\n&#39; &#34;$x $y&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Output: X Y&#xA;$ get_cursor_pos&#xA;1 8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- CHAPTER END --&gt; &#xA;&lt;!-- CHAPTER START --&gt; &#xA;&lt;h1&gt;CONVERSION&lt;/h1&gt; &#xA;&lt;h2&gt;Convert a hex color to RGB&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;hex_to_rgb() {&#xA;    # Usage: hex_to_rgb &#34;#FFFFFF&#34;&#xA;    #        hex_to_rgb &#34;000000&#34;&#xA;    : &#34;${1/\#}&#34;&#xA;    ((r=16#${_:0:2},g=16#${_:2:2},b=16#${_:4:2}))&#xA;    printf &#39;%s\n&#39; &#34;$r $g $b&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ hex_to_rgb &#34;#FFFFFF&#34;&#xA;255 255 255&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Convert an RGB color to hex&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rgb_to_hex() {&#xA;    # Usage: rgb_to_hex &#34;r&#34; &#34;g&#34; &#34;b&#34;&#xA;    printf &#39;#%02x%02x%02x\n&#39; &#34;$1&#34; &#34;$2&#34; &#34;$3&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ rgb_to_hex &#34;255&#34; &#34;255&#34; &#34;255&#34;&#xA;#FFFFFF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;CODE GOLF&lt;/h1&gt; &#xA;&lt;h2&gt;Shorter &lt;code&gt;for&lt;/code&gt; loop syntax&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Tiny C Style.&#xA;for((;i++&amp;lt;10;)){ echo &#34;$i&#34;;}&#xA;&#xA;# Undocumented method.&#xA;for i in {1..10};{ echo &#34;$i&#34;;}&#xA;&#xA;# Expansion.&#xA;for i in {1..10}; do echo &#34;$i&#34;; done&#xA;&#xA;# C Style.&#xA;for((i=0;i&amp;lt;=10;i++)); do echo &#34;$i&#34;; done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Shorter infinite loops&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Normal method&#xA;while :; do echo hi; done&#xA;&#xA;# Shorter&#xA;for((;;)){ echo hi;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Shorter function declaration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Normal method&#xA;f(){ echo hi;}&#xA;&#xA;# Using a subshell&#xA;f()(echo hi)&#xA;&#xA;# Using arithmetic&#xA;# This can be used to assign integer values.&#xA;# Example: f a=1&#xA;#          f a++&#xA;f()(($1))&#xA;&#xA;# Using tests, loops etc.&#xA;# NOTE: ‘while’, ‘until’, ‘case’, ‘(())’, ‘[[]]’ can also be used.&#xA;f()if true; then echo &#34;$1&#34;; fi&#xA;f()for i in &#34;$@&#34;; do echo &#34;$i&#34;; done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Shorter &lt;code&gt;if&lt;/code&gt; syntax&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# One line&#xA;# Note: The 3rd statement may run when the 1st is true&#xA;[[ $var == hello ]] &amp;amp;&amp;amp; echo hi || echo bye&#xA;[[ $var == hello ]] &amp;amp;&amp;amp; { echo hi; echo there; } || echo bye&#xA;&#xA;# Multi line (no else, single statement)&#xA;# Note: The exit status may not be the same as with an if statement&#xA;[[ $var == hello ]] &amp;amp;&amp;amp;&#xA;    echo hi&#xA;&#xA;# Multi line (no else)&#xA;[[ $var == hello ]] &amp;amp;&amp;amp; {&#xA;    echo hi&#xA;    # ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Simpler &lt;code&gt;case&lt;/code&gt; statement to set variable&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;:&lt;/code&gt; built-in can be used to avoid repeating &lt;code&gt;variable=&lt;/code&gt; in a case statement. The &lt;code&gt;$_&lt;/code&gt; variable stores the last argument of the last command. &lt;code&gt;:&lt;/code&gt; always succeeds so it can be used to store the variable value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Modified snippet from Neofetch.&#xA;case &#34;$OSTYPE&#34; in&#xA;    &#34;darwin&#34;*)&#xA;        : &#34;MacOS&#34;&#xA;    ;;&#xA;&#xA;    &#34;linux&#34;*)&#xA;        : &#34;Linux&#34;&#xA;    ;;&#xA;&#xA;    *&#34;bsd&#34;* | &#34;dragonfly&#34; | &#34;bitrig&#34;)&#xA;        : &#34;BSD&#34;&#xA;    ;;&#xA;&#xA;    &#34;cygwin&#34; | &#34;msys&#34; | &#34;win32&#34;)&#xA;        : &#34;Windows&#34;&#xA;    ;;&#xA;&#xA;    *)&#xA;        printf &#39;%s\n&#39; &#34;Unknown OS detected, aborting...&#34; &amp;gt;&amp;amp;2&#xA;        exit 1&#xA;    ;;&#xA;esac&#xA;&#xA;# Finally, set the variable.&#xA;os=&#34;$_&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- CHAPTER END --&gt; &#xA;&lt;!-- CHAPTER START --&gt; &#xA;&lt;h1&gt;OTHER&lt;/h1&gt; &#xA;&lt;h2&gt;Use &lt;code&gt;read&lt;/code&gt; as an alternative to the &lt;code&gt;sleep&lt;/code&gt; command&lt;/h2&gt; &#xA;&lt;p&gt;Surprisingly, &lt;code&gt;sleep&lt;/code&gt; is an external command and not a &lt;code&gt;bash&lt;/code&gt; built-in.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;CAVEAT:&lt;/strong&gt; Requires &lt;code&gt;bash&lt;/code&gt; 4+&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;read_sleep() {&#xA;    # Usage: read_sleep 1&#xA;    #        read_sleep 0.2&#xA;    read -rt &#34;$1&#34; &amp;lt;&amp;gt; &amp;lt;(:) || :&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;read_sleep 1&#xA;read_sleep 0.1&#xA;read_sleep 30&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For performance-critical situations, where it is not economic to open and close an excessive number of file descriptors, the allocation of a file descriptor may be done only once for all invocations of &lt;code&gt;read&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;(See the generic original implementation at &lt;a href=&#34;https://blog.dhampir.no/content/sleeping-without-a-subprocess-in-bash-and-how-to-sleep-forever&#34;&gt;https://blog.dhampir.no/content/sleeping-without-a-subprocess-in-bash-and-how-to-sleep-forever&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;exec {sleep_fd}&amp;lt;&amp;gt; &amp;lt;(:)&#xA;while some_quick_test; do&#xA;    # equivalent of sleep 0.001&#xA;    read -t 0.001 -u $sleep_fd&#xA;done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Check if a program is in the user&#39;s PATH&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# There are 3 ways to do this and either one can be used.&#xA;type -p executable_name &amp;amp;&amp;gt;/dev/null&#xA;hash executable_name &amp;amp;&amp;gt;/dev/null&#xA;command -v executable_name &amp;amp;&amp;gt;/dev/null&#xA;&#xA;# As a test.&#xA;if type -p executable_name &amp;amp;&amp;gt;/dev/null; then&#xA;    # Program is in PATH.&#xA;fi&#xA;&#xA;# Inverse.&#xA;if ! type -p executable_name &amp;amp;&amp;gt;/dev/null; then&#xA;    # Program is not in PATH.&#xA;fi&#xA;&#xA;# Example (Exit early if program is not installed).&#xA;if ! type -p convert &amp;amp;&amp;gt;/dev/null; then&#xA;    printf &#39;%s\n&#39; &#34;error: convert is not installed, exiting...&#34;&#xA;    exit 1&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get the current date using &lt;code&gt;strftime&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Bash’s &lt;code&gt;printf&lt;/code&gt; has a built-in method of getting the date which can be used in place of the &lt;code&gt;date&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;CAVEAT:&lt;/strong&gt; Requires &lt;code&gt;bash&lt;/code&gt; 4+&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;date() {&#xA;    # Usage: date &#34;format&#34;&#xA;    # See: &#39;man strftime&#39; for format.&#xA;    printf &#34;%($1)T\\n&#34; &#34;-1&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Using above function.&#xA;$ date &#34;%a %d %b  - %l:%M %p&#34;&#xA;Fri 15 Jun  - 10:00 AM&#xA;&#xA;# Using printf directly.&#xA;$ printf &#39;%(%a %d %b  - %l:%M %p)T\n&#39; &#34;-1&#34;&#xA;Fri 15 Jun  - 10:00 AM&#xA;&#xA;# Assigning a variable using printf.&#xA;$ printf -v date &#39;%(%a %d %b  - %l:%M %p)T\n&#39; &#39;-1&#39;&#xA;$ printf &#39;%s\n&#39; &#34;$date&#34;&#xA;Fri 15 Jun  - 10:00 AM&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get the username of the current user&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;CAVEAT:&lt;/strong&gt; Requires &lt;code&gt;bash&lt;/code&gt; 4.4+&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ : \\u&#xA;# Expand the parameter as if it were a prompt string.&#xA;$ printf &#39;%s\n&#39; &#34;${_@P}&#34;&#xA;black&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Generate a UUID V4&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;CAVEAT&lt;/strong&gt;: The generated value is not cryptographically secure.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;uuid() {&#xA;    # Usage: uuid&#xA;    C=&#34;89ab&#34;&#xA;&#xA;    for ((N=0;N&amp;lt;16;++N)); do&#xA;        B=&#34;$((RANDOM%256))&#34;&#xA;&#xA;        case &#34;$N&#34; in&#xA;            6)  printf &#39;4%x&#39; &#34;$((B%16))&#34; ;;&#xA;            8)  printf &#39;%c%x&#39; &#34;${C:$RANDOM%${#C}:1}&#34; &#34;$((B%16))&#34; ;;&#xA;&#xA;            3|5|7|9)&#xA;                printf &#39;%02x-&#39; &#34;$B&#34;&#xA;            ;;&#xA;&#xA;            *)&#xA;                printf &#39;%02x&#39; &#34;$B&#34;&#xA;            ;;&#xA;        esac&#xA;    done&#xA;&#xA;    printf &#39;\n&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ uuid&#xA;d5b6c731-1310-4c24-9fe3-55d556d44374&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Progress bars&lt;/h2&gt; &#xA;&lt;p&gt;This is a simple way of drawing progress bars without needing a for loop in the function itself.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bar() {&#xA;    # Usage: bar 1 10&#xA;    #            ^----- Elapsed Percentage (0-100).&#xA;    #               ^-- Total length in chars.&#xA;    ((elapsed=$1*$2/100))&#xA;&#xA;    # Create the bar with spaces.&#xA;    printf -v prog  &#34;%${elapsed}s&#34;&#xA;    printf -v total &#34;%$(($2-elapsed))s&#34;&#xA;&#xA;    printf &#39;%s\r&#39; &#34;[${prog// /-}${total}]&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;for ((i=0;i&amp;lt;=100;i++)); do&#xA;    # Pure bash micro sleeps (for the example).&#xA;    (:;:) &amp;amp;&amp;amp; (:;:) &amp;amp;&amp;amp; (:;:) &amp;amp;&amp;amp; (:;:) &amp;amp;&amp;amp; (:;:)&#xA;&#xA;    # Print the bar.&#xA;    bar &#34;$i&#34; &#34;10&#34;&#xA;done&#xA;&#xA;printf &#39;\n&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get the list of functions in a script&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;get_functions() {&#xA;    # Usage: get_functions&#xA;    IFS=$&#39;\n&#39; read -d &#34;&#34; -ra functions &amp;lt; &amp;lt;(declare -F)&#xA;    printf &#39;%s\n&#39; &#34;${functions[@]//declare -f }&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bypass shell aliases&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# alias&#xA;ls&#xA;&#xA;# command&#xA;# shellcheck disable=SC1001&#xA;\ls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bypass shell functions&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# function&#xA;ls&#xA;&#xA;# command&#xA;command ls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run a command in the background&lt;/h2&gt; &#xA;&lt;p&gt;This will run the given command and keep it running, even after the terminal or SSH connection is terminated. All output is ignored.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bkr() {&#xA;    (nohup &#34;$@&#34; &amp;amp;&amp;gt;/dev/null &amp;amp;)&#xA;}&#xA;&#xA;bkr ./some_script.sh # some_script.sh is now running in the background&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Capture the return value of a function without command substitution&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;CAVEAT:&lt;/strong&gt; Requires &lt;code&gt;bash&lt;/code&gt; 4+&lt;/p&gt; &#xA;&lt;p&gt;This uses local namerefs to avoid using &lt;code&gt;var=$(some_func)&lt;/code&gt; style command substitution for function output capture.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;to_upper() {&#xA;  local -n ptr=${1}&#xA;&#xA;  ptr=${ptr^^}&#xA;}&#xA;&#xA;foo=&#34;bar&#34;&#xA;to_upper foo&#xA;printf &#34;%s\n&#34; &#34;${foo}&#34; # BAR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- CHAPTER END --&gt; &#xA;&lt;h1&gt;AFTERWORD&lt;/h1&gt; &#xA;&lt;p&gt;Thanks for reading! If this bible helped you in any way and you&#39;d like to give back, consider donating. Donations give me the time to make this the best resource possible. Can&#39;t donate? That&#39;s OK, star the repo and share it with your friends!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/dyla&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/donate-patreon-yellow.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Rock on. 🤘&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>awesome-jellyfin/awesome-jellyfin</title>
    <updated>2024-12-31T01:57:17Z</updated>
    <id>tag:github.com,2024-12-31:/awesome-jellyfin/awesome-jellyfin</id>
    <link href="https://github.com/awesome-jellyfin/awesome-jellyfin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of awesome Jellyfin Plugins, Themes. Guides and Companion Software (Not affiliated with Jellyfin)&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/awesome-jellyfin/awesome-jellyfin/main/assets/banner.png&#34;&gt; &lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;Awesome Jellyfin&lt;/h1&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;blockquote align=&#34;center&#34;&gt;&#xA;  A List of Awesome Jellyfin Themes and Plugins&#xA;&lt;/blockquote&gt; &#xA;&lt;p align=&#34;center&#34;&gt; [ &lt;a href=&#34;https://raw.githubusercontent.com/awesome-jellyfin/awesome-jellyfin/main/#-plugins&#34;&gt;Plugins&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/awesome-jellyfin/awesome-jellyfin/main/#%EF%B8%8F-metadata-providers&#34;&gt;Metadata Providers&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/awesome-jellyfin/awesome-jellyfin/main/THEMES.md&#34;&gt;Themes&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/awesome-jellyfin/awesome-jellyfin/main/#-other&#34;&gt;Other&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/awesome-jellyfin/awesome-jellyfin/main/#-snippets&#34;&gt;Snippets&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/awesome-jellyfin/awesome-jellyfin/main/#-related&#34;&gt;Related&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/awesome-jellyfin/awesome-jellyfin/main/#contribute&#34;&gt;Contribute&lt;/a&gt; ] &lt;/p&gt; &#xA;&lt;h2&gt;🧩 Plugins&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ARufenach/AnilistSync&#34;&gt;AnilistSync &lt;code&gt;📅&lt;/code&gt;&lt;/a&gt; - Automatically tracks anime watching progress on &lt;a href=&#34;https://anilist.co/&#34;&gt;Anilist&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/endrl/jellyfin-plugin-media-analyzer&#34;&gt;jellyfin-plugin-media-analyzer&lt;/a&gt; - Fingerprint audio to automatically detect intro and outro segments in Jellyfin.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vosmiic/jellyfin-ani-sync&#34;&gt;jellyfin-ani-sync&lt;/a&gt; - Synchronize anime watch status between Jellyfin and anime tracking sites.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fdett/jellyfin-ignore/&#34;&gt;Jellyfin Ignore &lt;code&gt;🔸&lt;/code&gt;&lt;/a&gt; - Ignore filename patterns on library scans.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Cloud9Developer/Jellyfin-Newsletter-Plugin&#34;&gt;Jellyfin-Newsletter-Plugin &lt;code&gt;🔸&lt;/code&gt;&lt;/a&gt; - Newsletters for recently added media.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jellyfin/jellyfin-plugin-ldapauth&#34;&gt;jellyfin-plugin-ldapauth&lt;/a&gt; - Allows the use of ldap as an auth provider.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/danieladov/jellyfin-plugin-skin-manager&#34;&gt;jellyfin-plugin-skin-manager &lt;code&gt;📅&lt;/code&gt;&lt;/a&gt; - Helps you to download and install skins.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/9p4/jellyfin-plugin-sso&#34;&gt;jellyfin-plugin-sso &lt;code&gt;🔸&lt;/code&gt;&lt;/a&gt; - Allows users to sign in through an SSO provider.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nicknsy/jellyscrub&#34;&gt;jellyscrub&lt;/a&gt; - Smooth mouse-over video scrubbing previews.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LizardByte/Themerr-jellyfin&#34;&gt;Themerr-jellyfin&lt;/a&gt; - Adds theme songs to movies using &lt;a href=&#34;https://app.lizardbyte.dev/ThemerrDB/&#34;&gt;ThemerrDB&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;🏷️ Metadata Providers&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ankenyr/jellyfin-youtube-metadata-plugin&#34;&gt;jellyfin-youtube-metadata-plugin&lt;/a&gt; - YouTube Metadata Plugin.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🖌️ Themes&lt;/h2&gt; &#xA;&lt;p&gt;👉 Moved themes to &lt;a href=&#34;https://raw.githubusercontent.com/awesome-jellyfin/awesome-jellyfin/main/THEMES.md&#34;&gt;THEMES.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📺 Clients&lt;/h2&gt; &#xA;&lt;p&gt;👉 Moved clients to &lt;a href=&#34;https://raw.githubusercontent.com/awesome-jellyfin/awesome-jellyfin/main/CLIENTS.md&#34;&gt;CLIENTS.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;👾 Other&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Cloudbox/autoscan&#34;&gt;autoscan&lt;/a&gt; - Replaces the default Plex and Emby behaviour for picking up changes on the file system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sachinsenal0x64/FIXARR&#34;&gt;Fixarr &lt;code&gt;🔸&lt;/code&gt;&lt;/a&gt; - Media Renamer and Backup tool. (Backup still WIP)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BobHasNoSoul/jellyfin-mods&#34;&gt;jellyfin-mods&lt;/a&gt; - A collection of things you can do to personalize Jellyfin.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Chaphasilor/jellyfin-rewind&#34;&gt;jellyfin-rewind&lt;/a&gt; - A &lt;em&gt;Spotify Wrapped&lt;/em&gt;-like app made for people who use Jellyfin for listening to music.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Fallenbagel/jellyseerr&#34;&gt;jellyseerr&lt;/a&gt; - A request management and media discovery tool.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CyferShepard/Jellystat&#34;&gt;Jellystat&lt;/a&gt; - A free and open source Statistics App for Jellyfin.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrfee/jfa-go&#34;&gt;jfa-go&lt;/a&gt; - User- / Invite-Management system for Jellyfin.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/terrelsa13/MUMC&#34;&gt;Multi-User Media Cleaner&lt;/a&gt; - Query and delete unwanted media content from your Jellyfin server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.com/Krafting/playlifin-gtk&#34;&gt;Playlifin&lt;/a&gt; - Converts YouTube Music playlists to Jellyfin playlists.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aleksilassila/reiverr&#34;&gt;reiverr &lt;code&gt;🔸&lt;/code&gt;&lt;/a&gt; - Combined interface for JF, TMDB, Radarr and Sonarr.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/McCloudS/subgen&#34;&gt;subgen&lt;/a&gt; - Autogenerate subtitles using OpenAI Whisper Model via Jellyfin.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CollinHeist/TitleCardMaker&#34;&gt;TitleCardMaker&lt;/a&gt; - Automated title card maker for Plex, Jellyfin, and Emby.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Wizarrrr/wizarr&#34;&gt;wizarr&lt;/a&gt; - Advanced user invitation and management system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jmbannon/ytdl-sub&#34;&gt;ytdl-sub&lt;/a&gt; - Automate downloading and metadata generation with YoutubeDL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nodiscc/xsrv/tree/master/roles/jellyfin&#34;&gt;xsrv.jellyfin&lt;/a&gt; - Ansible role to deploy and configure Jellyfin.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;📜 Snippets&lt;/h4&gt; &#xA;&lt;!--lint ignore awesome-list-item--&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/awesome-jellyfin/awesome-jellyfin/main/snippets/language-overlay&#34;&gt;snippets/language-overlay&lt;/a&gt; - A script to add flags to movie posters.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🌌 Related&lt;/h2&gt; &#xA;&lt;p&gt;This section includes software, guides and tools that are not &lt;em&gt;specifically&lt;/em&gt; designed to work with Jellyfin, but can be useful for tasks related to media management or to enhance Jellyfin&#39;s functionality.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shawn61cp/calibre2jellyfin&#34;&gt;calibre2jellyfin&lt;/a&gt; - Python script to construct a Jellyfin ebook library from a Calibre library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jasongdove/ErsatzTV&#34;&gt;ErsatzTV &lt;code&gt;🔸&lt;/code&gt;&lt;/a&gt; - Stream custom live channels using your own media.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Locatarr/Locatarr&#34;&gt;locatarr&lt;/a&gt; - A list of tools used to automate the downloading and organization of media files. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Radarr/Radarr&#34;&gt;radarr&lt;/a&gt; - Automates downloading &amp;amp; management of movies &lt;a href=&#34;https://trash-guides.info/Radarr/&#34;&gt;&lt;code&gt;🟣 TRaSH Guide&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Sonarr/Sonarr&#34;&gt;sonarr&lt;/a&gt; - Automates downloading &amp;amp; management of TV series &lt;a href=&#34;https://trash-guides.info/Sonarr/&#34;&gt;&lt;code&gt;🟣 TRaSH Guide&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/HaveAGitGat/Tdarr&#34;&gt;tdarr &lt;code&gt;📛&lt;/code&gt;&lt;/a&gt; - Distributed transcode automation + Library analytics + Video health checking.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/recyclarr/recyclarr&#34;&gt;recyclarr&lt;/a&gt; - Automatically sync TRaSH guides to Sonarr and Radarr instances.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bonukai/MediaTracker&#34;&gt;MediaTracker&lt;/a&gt; - Media tracker and user rating platform with &lt;a href=&#34;https://github.com/bonukai/jellyfin-plugin-mediatracker&#34;&gt;Jellyfin integration&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/leepeuker/movary&#34;&gt;Movary &lt;code&gt;🔸&lt;/code&gt;&lt;/a&gt; - Media tracker and user rating platform.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/foxxmd/multi-scrobbler&#34;&gt;Multi Scrobbler &lt;code&gt;🔸&lt;/code&gt;&lt;/a&gt; - Scrobbles music from many sources to many clients.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joshuaboniface/rffmpeg&#34;&gt;rffmpeg&lt;/a&gt; - A remote FFmpeg wrapper, commonly used for transcoding media on more capable machines.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Threadfin/Threadfin&#34;&gt;Threadfin&lt;/a&gt; - M3U proxy for Jellyfin (Based on xTeVe).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://trash-guides.info/&#34;&gt;TRaSH Guides&lt;/a&gt; - Easy-to-understand guides for Sonarr, Radarr, and Bazarr, along with related tools.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ArabCoders/watchstate&#34;&gt;watchstate&lt;/a&gt; - Sync play state between different media servers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Contributions welcome! But please read the &lt;a href=&#34;https://raw.githubusercontent.com/awesome-jellyfin/awesome-jellyfin/main/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; first.&lt;br&gt; You can also &lt;a href=&#34;https://github.com/awesome-jellyfin/awesome-jellyfin/issues/new&#34;&gt;create a new issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;!--lint ignore unordered-list-marker-style--&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Early Release / BETA software &lt;code&gt;🔸&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Closed-Source Software &lt;code&gt;📛&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Stale / Inactive / May not work anymore &lt;code&gt;📅&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>