<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-31T02:24:33Z</updated>
  <subtitle>Weekly Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nicolaka/netshoot</title>
    <updated>2022-07-31T02:24:33Z</updated>
    <id>tag:github.com,2022-07-31:/nicolaka/netshoot</id>
    <link href="https://github.com/nicolaka/netshoot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;a Docker + Kubernetes network trouble-shooting swiss-army container&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;netshoot: a Docker + Kubernetes network trouble-shooting swiss-army container&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;                    dP            dP                           dP&#xA;                    88            88                           88&#xA;88d888b. .d8888b. d8888P .d8888b. 88d888b. .d8888b. .d8888b. d8888P&#xA;88&#39;  `88 88ooood8   88   Y8ooooo. 88&#39;  `88 88&#39;  `88 88&#39;  `88   88&#xA;88    88 88.  ...   88         88 88    88 88.  .88 88.  .88   88&#xA;dP    dP `88888P&#39;   dP   `88888P&#39; dP    dP `88888P&#39; `88888P&#39;   dP&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Purpose:&lt;/strong&gt; Docker and Kubernetes network troubleshooting can become complex. With proper understanding of how Docker and Kubernetes networking works and the right set of tools, you can troubleshoot and resolve these networking issues. The &lt;code&gt;netshoot&lt;/code&gt; container has a set of powerful networking tshooting tools that can be used to troubleshoot Docker networking issues. Along with these tools come a set of use-cases that show how this container can be used in real-world scenarios.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Network Namespaces:&lt;/strong&gt; Before starting to use this tool, it&#39;s important to go over one key topic: &lt;strong&gt;Network Namespaces&lt;/strong&gt;. Network namespaces provide isolation of the system resources associated with networking. Docker uses network and other type of namespaces (&lt;code&gt;pid&lt;/code&gt;,&lt;code&gt;mount&lt;/code&gt;,&lt;code&gt;user&lt;/code&gt;..etc) to create an isolated environment for each container. Everything from interfaces, routes, and IPs is completely isolated within the network namespace of the container.&lt;/p&gt; &#xA;&lt;p&gt;Kubernetes also uses network namespaces. Kubelets creates a network namespace per pod where all containers in that pod share that same network namespace (eths,IP, tcp sockets...etc). This is a key difference between Docker containers and Kubernetes pods.&lt;/p&gt; &#xA;&lt;p&gt;Cool thing about namespaces is that you can switch between them. You can enter a different container&#39;s network namespace, perform some troubleshooting on its network&#39;s stack with tools that aren&#39;t even installed on that container. Additionally, &lt;code&gt;netshoot&lt;/code&gt; can be used to troubleshoot the host itself by using the host&#39;s network namespace. This allows you to perform any troubleshooting without installing any new packages directly on the host or your application&#39;s package.&lt;/p&gt; &#xA;&lt;h2&gt;Netshoot with Docker&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Container&#39;s Network Namespace:&lt;/strong&gt; If you&#39;re having networking issues with your application&#39;s container, you can launch &lt;code&gt;netshoot&lt;/code&gt; with that container&#39;s network namespace like this:&lt;/p&gt; &lt;p&gt;&lt;code&gt;$ docker run -it --net container:&amp;lt;container_name&amp;gt; nicolaka/netshoot&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Host&#39;s Network Namespace:&lt;/strong&gt; If you think the networking issue is on the host itself, you can launch &lt;code&gt;netshoot&lt;/code&gt; with that host&#39;s network namespace:&lt;/p&gt; &lt;p&gt;&lt;code&gt;$ docker run -it --net host nicolaka/netshoot&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Network&#39;s Network Namespace:&lt;/strong&gt; If you want to troubleshoot a Docker network, you can enter the network&#39;s namespace using &lt;code&gt;nsenter&lt;/code&gt;. This is explained in the &lt;code&gt;nsenter&lt;/code&gt; section below.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Netshoot with Docker Compose&lt;/h2&gt; &#xA;&lt;p&gt;You can easily deploy &lt;code&gt;netshoot&lt;/code&gt; using Docker Compose using something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;version: &#34;3.6&#34;&#xA;services:&#xA;  tcpdump:&#xA;    image: nicolaka/netshoot&#xA;    depends_on:&#xA;      - nginx&#xA;    command: tcpdump -i eth0 -w /data/nginx.pcap&#xA;    network_mode: service:nginx&#xA;    volumes:&#xA;      - $PWD/data:/data&#xA;&#xA;  nginx:&#xA;    image: nginx:alpine&#xA;    ports:&#xA;      - 80:80&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Netshoot with Kubernetes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you want to spin up a throw away container for debugging.&lt;/p&gt; &lt;p&gt;&lt;code&gt;$ kubectl run tmp-shell --rm -i --tty --image nicolaka/netshoot&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;if you want to spin up a container on the host&#39;s network namespace.&lt;/p&gt; &lt;p&gt;&lt;code&gt;$ kubectl run tmp-shell --rm -i --tty --overrides=&#39;{&#34;spec&#34;: {&#34;hostNetwork&#34;: true}}&#39; --image nicolaka/netshoot&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;if you want to use netshoot as a sidecar container to troubleshoot your application container&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;   $ cat netshoot-sidecar.yaml&#xA;   apiVersion: apps/v1&#xA;   kind: Deployment&#xA;   metadata:&#xA;       name: nginx-netshoot&#xA;       labels:&#xA;           app: nginx-netshoot&#xA;   spec:&#xA;   replicas: 1&#xA;   selector:&#xA;       matchLabels:&#xA;           app: nginx-netshoot&#xA;   template:&#xA;       metadata:&#xA;       labels:&#xA;           app: nginx-netshoot&#xA;       spec:&#xA;           containers:&#xA;           - name: nginx&#xA;           image: nginx:1.14.2&#xA;           ports:&#xA;               - containerPort: 80&#xA;           - name: netshoot&#xA;           image: nicolaka/netshoot&#xA;           command: [&#34;/bin/bash&#34;]&#xA;           args: [&#34;-c&#34;, &#34;while true; do ping localhost; sleep 60;done&#34;]&#xA;&#xA;   $ kubectl apply -f netshoot-sidecar.yaml&#xA;     deployment.apps/nginx-netshoot created&#xA;&#xA;   $ kubectl get pod&#xA;NAME                              READY   STATUS    RESTARTS   AGE&#xA;nginx-netshoot-7f9c6957f8-kr8q6   2/2     Running   0          4m27s&#xA;&#xA;   $ kubectl exec -it nginx-netshoot-7f9c6957f8-kr8q6 -c netshoot -- /bin/zsh&#xA;                       dP            dP                           dP&#xA;                       88            88                           88&#xA;   88d888b. .d8888b. d8888P .d8888b. 88d888b. .d8888b. .d8888b. d8888P&#xA;   88&#39;  `88 88ooood8   88   Y8ooooo. 88&#39;  `88 88&#39;  `88 88&#39;  `88   88&#xA;   88    88 88.  ...   88         88 88    88 88.  .88 88.  .88   88&#xA;   dP    dP `88888P&#39;   dP   `88888P&#39; dP    dP `88888P&#39; `88888P&#39;   dP&#xA;&#xA;   Welcome to Netshoot! (github.com/nicolaka/netshoot)&#xA;&#xA;&#xA;   nginx-netshoot-7f9c6957f8-kr8q6 $ &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Network Problems&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Many network issues could result in application performance degradation. Some of those issues could be related to the underlying networking infrastructure(underlay). Others could be related to misconfiguration at the host or Docker level. Let&#39;s take a look at common networking issues:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;latency&lt;/li&gt; &#xA; &lt;li&gt;routing&lt;/li&gt; &#xA; &lt;li&gt;DNS resolution&lt;/li&gt; &#xA; &lt;li&gt;firewall&lt;/li&gt; &#xA; &lt;li&gt;incomplete ARPs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To troubleshoot these issues, &lt;code&gt;netshoot&lt;/code&gt; includes a set of powerful tools as recommended by this diagram.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://www.brendangregg.com/Perf/linux_observability_tools.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Included Packages:&lt;/strong&gt; The following packages are included in &lt;code&gt;netshoot&lt;/code&gt;. We&#39;ll go over some with some sample use-cases.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apache2-utils&#xA;bash&#xA;bind-tools&#xA;bird&#xA;bridge-utils&#xA;busybox-extras&#xA;calicoctl&#xA;conntrack-tools&#xA;ctop&#xA;curl&#xA;dhcping&#xA;drill&#xA;ethtool&#xA;file&#xA;fping&#xA;httpie&#xA;iftop&#xA;iperf&#xA;iproute2&#xA;ipset&#xA;iptables&#xA;iptraf-ng&#xA;iputils&#xA;ipvsadm&#xA;jq&#xA;libc6-compat&#xA;liboping&#xA;mtr&#xA;net-snmp-tools&#xA;netcat-openbsd&#xA;netgen&#xA;nftables&#xA;ngrep&#xA;nmap&#xA;nmap-nping&#xA;openssl&#xA;py-crypto&#xA;py2-virtualenv&#xA;python2&#xA;scapy&#xA;socat&#xA;strace&#xA;tcpdump&#xA;tcptraceroute&#xA;termshark&#xA;tshark&#xA;util-linux&#xA;vim&#xA;websocat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Sample Use-cases&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;iperf&lt;/h2&gt; &#xA;&lt;p&gt;Purpose: test networking performance between two containers/hosts.&lt;/p&gt; &#xA;&lt;p&gt;Create Overlay network:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker network create -d overlay perf-test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Launch two containers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;üê≥  ‚Üí docker service create --name perf-test-a --network perf-test nicolaka/netshoot iperf -s -p 9999&#xA;7dkcckjs0g7b4eddv8e5ez9nv&#xA;&#xA;&#xA;üê≥  ‚Üí docker service create --name perf-test-b --network perf-test nicolaka/netshoot iperf -c perf-test-a -p 9999&#xA;2yb6fxls5ezfnav2z93lua8xl&#xA;&#xA;&#xA;&#xA; üê≥  ‚Üí docker service ls&#xA;ID            NAME         REPLICAS  IMAGE              COMMAND&#xA;2yb6fxls5ezf  perf-test-b  1/1       nicolaka/netshoot  iperf -c perf-test-a -p 9999&#xA;7dkcckjs0g7b  perf-test-a  1/1       nicolaka/netshoot  iperf -s -p 9999&#xA;&#xA;&#xA;&#xA;üê≥  ‚Üí docker ps&#xA;CONTAINER ID        IMAGE                      COMMAND                  CREATED             STATUS              PORTS               NAMES&#xA;ce4ff40a5456        nicolaka/netshoot:latest   &#34;iperf -s -p 9999&#34;       31 seconds ago      Up 30 seconds                           perf-test-a.1.bil2mo8inj3r9nyrss1g15qav&#xA;&#xA;üê≥  ‚Üí docker logs ce4ff40a5456&#xA;------------------------------------------------------------&#xA;Server listening on TCP port 9999&#xA;TCP window size: 85.3 KByte (default)&#xA;------------------------------------------------------------&#xA;[  4] local 10.0.3.3 port 9999 connected with 10.0.3.5 port 35102&#xA;[ ID] Interval       Transfer     Bandwidth&#xA;[  4]  0.0-10.0 sec  32.7 GBytes  28.1 Gbits/sec&#xA;[  5] local 10.0.3.3 port 9999 connected with 10.0.3.5 port 35112&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;tcpdump&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;tcpdump&lt;/strong&gt; is a powerful and common packet analyzer that runs under the command line. It allows the user to display TCP/IP and other packets being transmitted or received over an attached network interface.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Continuing on the iperf example. Let&#39;s launch netshoot with perf-test-a&#39;s container network namespace.&#xA;&#xA;üê≥  ‚Üí docker run -it --net container:perf-test-a.1.0qlf1kaka0cq38gojf7wcatoa  nicolaka/netshoot &#xA;&#xA;# Capturing packets on eth0 and tcp port 9999.&#xA;&#xA;/ # tcpdump -i eth0 port 9999 -c 1 -Xvv&#xA;tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes&#xA;23:14:09.771825 IP (tos 0x0, ttl 64, id 60898, offset 0, flags [DF], proto TCP (6), length 64360)&#xA;    10.0.3.5.60032 &amp;gt; 0e2ccbf3d608.9999: Flags [.], cksum 0x1563 (incorrect -&amp;gt; 0x895d), seq 222376702:222441010, ack 3545090958, win 221, options [nop,nop,TS val 2488870 ecr 2488869], length 64308&#xA;&#x9;0x0000:  4500 fb68 ede2 4000 4006 37a5 0a00 0305  E..h..@.@.7.....&#xA;&#x9;0x0010:  0a00 0303 ea80 270f 0d41 32fe d34d cb8e  ......&#39;..A2..M..&#xA;&#x9;0x0020:  8010 00dd 1563 0000 0101 080a 0025 fa26  .....c.......%.&amp;amp;&#xA;&#x9;0x0030:  0025 fa25 0000 0000 0000 0001 0000 270f  .%.%..........&#39;.&#xA;&#x9;0x0040:  0000 0000 0000 0000 ffff d8f0 3435 3637  ............4567&#xA;&#x9;0x0050:  3839 3031 3233 3435 3637 3839 3031 3233  8901234567890123&#xA;&#x9;0x0060:  3435 3637 3839 3031 3233 3435 3637 3839  4567890123456789&#xA;&#x9;0x0070:  3031 3233 3435 3637 3839 3031 3233 3435  0123456789012345&#xA;&#x9;0x0080:  3637 3839 3031 3233 3435 3637 3839 3031  6789012345678901&#xA;&#x9;0x0090:  3233 3435 3637 3839 3031 3233 3435 3637  2345678901234567&#xA;&#x9;0x00a0:  3839 3031 3233 3435 3637 3839 3031 3233  8901234567890123&#xA;&#x9;0x00b0:  3435 3637 3839 3031 3233 3435 3637 3839  4567890123456789&#xA;&#x9;0x00c0:  3031 3233 3435 3637 3839 3031 3233 3435  0123456789012345&#xA;&#x9;0x00d0:  3637 3839 3031 3233 3435 3637 3839 3031  6789012345678901&#xA;&#x9;0x00e0:  3233 3435 3637 3839 3031 3233 3435 3637  2345678901234567&#xA;&#x9;0x00f0:  3839 3031 3233 3435 3637 3839 3031 3233  8901234567890123&#xA;&#x9;0x0100:  3435 3637 3839 3031 3233 3435 3637 3839  4567890123456789&#xA;&#x9;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More info on &lt;code&gt;tcpdump&lt;/code&gt; can be found &lt;a href=&#34;http://www.tcpdump.org/tcpdump_man.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;netstat&lt;/h2&gt; &#xA;&lt;p&gt;Purpose: &lt;code&gt;netstat&lt;/code&gt; is a useful tool for checking your network configuration and activity.&lt;/p&gt; &#xA;&lt;p&gt;Continuing on from &lt;code&gt;iperf&lt;/code&gt; example. Let&#39;s use &lt;code&gt;netstat&lt;/code&gt; to confirm that it&#39;s listening on port &lt;code&gt;9999&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;üê≥  ‚Üí docker run -it --net container:perf-test-a.1.0qlf1kaka0cq38gojf7wcatoa  nicolaka/netshoot &#xA;&#xA;/ # netstat -tulpn&#xA;Active Internet connections (only servers)&#xA;Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name&#xA;tcp        0      0 127.0.0.11:46727        0.0.0.0:*               LISTEN      -&#xA;tcp        0      0 0.0.0.0:9999            0.0.0.0:*               LISTEN      -&#xA;udp        0      0 127.0.0.11:39552        0.0.0.0:*                           -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;nmap&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;nmap&lt;/code&gt; (&#34;Network Mapper&#34;) is an open source tool for network exploration and security auditing. It is very useful for scanning to see which ports are open between a given set of hosts. This is a common thing to check for when installing Swarm or UCP because a range of ports is required for cluster communication. The command analyzes the connection pathway between the host where &lt;code&gt;nmap&lt;/code&gt; is running and the given target address.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;üê≥  ‚Üí docker run -it --privileged nicolaka/netshoot nmap -p 12376-12390 -dd 172.31.24.25&#xA;&#xA;...&#xA;Discovered closed port 12388/tcp on 172.31.24.25&#xA;Discovered closed port 12379/tcp on 172.31.24.25&#xA;Discovered closed port 12389/tcp on 172.31.24.25&#xA;Discovered closed port 12376/tcp on 172.31.24.25&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are several states that ports will be discovered as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;open&lt;/code&gt;: the pathway to the port is open and there is an application listening on this port.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;closed&lt;/code&gt;: the pathway to the port is open but there is no application listening on this port.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;filtered&lt;/code&gt;: the pathway to the port is closed, blocked by a firewall, routing rules, or host-based rules.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;iftop&lt;/h2&gt; &#xA;&lt;p&gt;Purpose: iftop does for network usage what top does for CPU usage. It listens to network traffic on a named interface and displays a table of current bandwidth usage by pairs of hosts.&lt;/p&gt; &#xA;&lt;p&gt;Continuing the &lt;code&gt;iperf&lt;/code&gt; example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; ‚Üí docker ps&#xA;CONTAINER ID        IMAGE                      COMMAND                  CREATED             STATUS              PORTS               NAMES&#xA;ce4ff40a5456        nicolaka/netshoot:latest   &#34;iperf -s -p 9999&#34;       5 minutes ago       Up 5 minutes                            perf-test-a.1.bil2mo8inj3r9nyrss1g15qav&#xA;&#xA;üê≥  ‚Üí docker run -it --net container:perf-test-a.1.bil2mo8inj3r9nyrss1g15qav nicolaka/netshoot iftop -i eth0&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nicolaka/netshoot/master/img/iftop.png&#34; alt=&#34;iftop.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;drill&lt;/h2&gt; &#xA;&lt;p&gt;Purpose: drill is a tool to designed to get all sorts of information out of the DNS.&lt;/p&gt; &#xA;&lt;p&gt;Continuing the &lt;code&gt;iperf&lt;/code&gt; example, we&#39;ll use &lt;code&gt;drill&lt;/code&gt; to understand how services&#39; DNS is resolved in Docker.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;üê≥  ‚Üí docker run -it --net container:perf-test-a.1.bil2mo8inj3r9nyrss1g15qav nicolaka/netshoot drill -V 5 perf-test-b&#xA;;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, rcode: NOERROR, id: 0&#xA;;; flags: rd ; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 0&#xA;;; QUESTION SECTION:&#xA;;; perf-test-b.&#x9;IN&#x9;A&#xA;&#xA;;; ANSWER SECTION:&#xA;&#xA;;; AUTHORITY SECTION:&#xA;&#xA;;; ADDITIONAL SECTION:&#xA;&#xA;;; Query time: 0 msec&#xA;;; WHEN: Thu Aug 18 02:08:47 2016&#xA;;; MSG SIZE  rcvd: 0&#xA;;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, rcode: NOERROR, id: 52723&#xA;;; flags: qr rd ra ; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0&#xA;;; QUESTION SECTION:&#xA;;; perf-test-b.&#x9;IN&#x9;A&#xA;&#xA;;; ANSWER SECTION:&#xA;perf-test-b.&#x9;600&#x9;IN&#x9;A&#x9;10.0.3.4 &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; Service VIP&#xA;&#xA;;; AUTHORITY SECTION:&#xA;&#xA;;; ADDITIONAL SECTION:&#xA;&#xA;;; Query time: 1 msec&#xA;;; SERVER: 127.0.0.11 &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; Local resolver &#xA;;; WHEN: Thu Aug 18 02:08:47 2016&#xA;;; MSG SIZE  rcvd: 56&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;netcat&lt;/h2&gt; &#xA;&lt;p&gt;Purpose: a simple Unix utility that reads and writes data across network connections, using the TCP or UDP protocol. It&#39;s useful for testing and troubleshooting TCP/UDP connections. &lt;code&gt;netcat&lt;/code&gt; can be used to detect if there&#39;s a firewall rule blocking certain ports.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;üê≥  ‚Üí  docker network create -d overlay my-ovl&#xA;55rohpeerwqx8og4n0byr0ehu&#xA;&#xA;üê≥  ‚Üí docker service create --name service-a --network my-ovl -p 8080:8080 nicolaka/netshoot nc -l 8080&#xA;bnj517hh4ylpf7ewawsp9unrc&#xA;&#xA;üê≥  ‚Üí docker service create --name service-b --network my-ovl nicolaka/netshoot nc -vz service-a 8080&#xA;3xv1ukbd3kr03j4uybmmlp27j&#xA;&#xA;üê≥  ‚Üí docker logs service-b.1.0c5wy4104aosovtl1z9oixiso&#xA;Connection to service-a 8080 port [tcp/http-alt] succeeded!&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;netgen&lt;/h2&gt; &#xA;&lt;p&gt;Purpose: &lt;code&gt;netgen&lt;/code&gt; is a simple &lt;a href=&#34;https://raw.githubusercontent.com/nicolaka/netshoot/master/netgen.sh&#34;&gt;script&lt;/a&gt; that will generate a packet of data between containers periodically using &lt;code&gt;netcat&lt;/code&gt;. The generated traffic can be used to demonstrate different features of the networking stack.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;netgen &amp;lt;host&amp;gt; &amp;lt;ip&amp;gt;&lt;/code&gt; will create a &lt;code&gt;netcat&lt;/code&gt; server and client listening and sending to the same port.&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;code&gt;netgen&lt;/code&gt; with &lt;code&gt;docker run&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;üê≥  ‚Üí  docker network create -d bridge br&#xA;01b167971453700cf0a40d7e1a0dc2b0021e024bbb119541cc8c1858343c9cfc&#xA;&#xA;üê≥  ‚Üí  docker run -d --rm --net br --name c1 nicolaka/netshoot netgen c2 5000&#xA;8c51eb2100c35d14244dcecb80839c780999159985415a684258c7154ec6bd42&#xA;&#xA;üê≥  ‚Üí  docker run -it --rm --net br --name c2 nicolaka/netshoot netgen c1 5000&#xA;Listener started on port 5000&#xA;Sending traffic to c1 on port 5000 every 10 seconds&#xA;Sent 1 messages to c1:5000&#xA;Sent 2 messages to c1:5000&#xA;&#xA;üê≥  ‚Üí  sudo tcpdump -vvvn -i eth0 port 5000&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;code&gt;netgen&lt;/code&gt; with &lt;code&gt;docker services&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;üê≥  ‚Üí  docker network create -d overlay ov&#xA;01b167971453700cf0a40d7e1a0dc2b0021e024bbb119541cc8c1858343c9cfc&#xA;&#xA;üê≥  ‚Üí  docker service create --network ov --replicas 3 --name srvc netshoot netgen srvc 5000&#xA;y93t8mb9wgzsc27f7l2rdu5io&#xA;&#xA;üê≥  ‚Üí  docker service logs srvc&#xA;srvc.1.vwklts5ybq5w@moby    | Listener started on port 5000&#xA;srvc.1.vwklts5ybq5w@moby    | Sending traffic to srvc on port 5000 every 10 seconds&#xA;srvc.1.vwklts5ybq5w@moby    | Sent 1 messages to srvc:5000&#xA;srvc.3.dv4er00inlxo@moby    | Listener started on port 5000&#xA;srvc.2.vu47gf0sdmje@moby    | Listener started on port 5000&#xA;...&#xA;&#xA;&#xA;üê≥  ‚Üí  sudo tcpdump -vvvn -i eth0 port 5000&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;iproute2&lt;/h2&gt; &#xA;&lt;p&gt;purpose: a collection of utilities for controlling TCP / IP networking and traffic control in Linux.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Sample routing and arp table of the docker host.&#xA;&#xA;üê≥  ‚Üí docker run -it --net host nicolaka/netshoot&#xA;&#xA;/ # ip route show&#xA;default via 192.168.65.1 dev eth0  metric 204&#xA;172.17.0.0/16 dev docker0  proto kernel  scope link  src 172.17.0.1&#xA;172.19.0.0/16 dev br-fd694678f5c3  proto kernel  scope link  src 172.19.0.1 linkdown&#xA;172.20.0.0/16 dev docker_gwbridge  proto kernel  scope link  src 172.20.0.1&#xA;172.21.0.0/16 dev br-0d73cc4ac114  proto kernel  scope link  src 172.21.0.1 linkdown&#xA;172.22.0.0/16 dev br-1eb1f1e84df8  proto kernel  scope link  src 172.22.0.1 linkdown&#xA;172.23.0.0/16 dev br-aafed4ec941f  proto kernel  scope link  src 172.23.0.1 linkdown&#xA;192.168.65.0/29 dev eth0  proto kernel  scope link  src 192.168.65.2&#xA;&#xA;/ # ip neigh show&#xA;192.168.65.1 dev eth0 lladdr f6:16:36:bc:f9:c6 STALE&#xA;172.17.0.7 dev docker0 lladdr 02:42:ac:11:00:07 STALE&#xA;172.17.0.6 dev docker0 lladdr 02:42:ac:11:00:06 STALE&#xA;172.17.0.5 dev docker0 lladdr 02:42:ac:11:00:05 STALE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More info on &lt;code&gt;iproute2&lt;/code&gt; &lt;a href=&#34;http://lartc.org/howto/lartc.iproute2.tour.html&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;nsenter&lt;/h2&gt; &#xA;&lt;p&gt;Purpose: &lt;code&gt;nsenter&lt;/code&gt; is a powerful tool allowing you to enter into any namespaces. &lt;code&gt;nsenter&lt;/code&gt; is available inside &lt;code&gt;netshoot&lt;/code&gt; but requires &lt;code&gt;netshoot&lt;/code&gt; to be run as a privileged container. Additionally, you may want to mount the &lt;code&gt;/var/run/docker/netns&lt;/code&gt; directory to be able to enter any network namespace including bridge and overlay networks.&lt;/p&gt; &#xA;&lt;p&gt;With &lt;code&gt;docker run --name container-B --net container:container-A &lt;/code&gt;, docker uses &lt;code&gt;container-A&lt;/code&gt;&#39;s network namespace ( including interfaces and routes) when creating &lt;code&gt;container-B&lt;/code&gt;. This approach is helpful for troubleshooting network issues at the container level. To troubleshoot network issues at the bridge or overlay network level, you need to enter the &lt;code&gt;namespace&lt;/code&gt; of the network &lt;em&gt;itself&lt;/em&gt;. &lt;code&gt;nsenter&lt;/code&gt; allows you to do that.&lt;/p&gt; &#xA;&lt;p&gt;For example, if we wanted to check the L2 forwarding table for a overlay network. We need to enter the overlay network namespace and use same tools in &lt;code&gt;netshoot&lt;/code&gt; to check these entries. The following examples go over some use cases for using &lt;code&gt;nsenter&lt;/code&gt; to understand what&#39;s happening within a docker network ( overlay in this case).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Creating an overlay network&#xA;üê≥  ‚Üí docker network create -d overlay nsenter-test&#xA;9tp0f348donsdj75pktssd97b&#xA;&#xA;# Launching a simple busybox service with 3 replicas&#xA;üê≥  ‚Üí docker service create --name nsenter-l2-table-test --replicas 3 --network nsenter-test busybox ping localhost&#xA;3692i3q3u8nephdco2c10ro4c&#xA;&#xA;# Inspecting the service&#xA;üê≥  ‚Üí docker network inspect nsenter-test&#xA;[&#xA;    {&#xA;        &#34;Name&#34;: &#34;nsenter-test&#34;,&#xA;        &#34;Id&#34;: &#34;9tp0f348donsdj75pktssd97b&#34;,&#xA;        &#34;Scope&#34;: &#34;swarm&#34;,&#xA;        &#34;Driver&#34;: &#34;overlay&#34;,&#xA;        &#34;EnableIPv6&#34;: false,&#xA;        &#34;IPAM&#34;: {&#xA;            &#34;Driver&#34;: &#34;default&#34;,&#xA;            &#34;Options&#34;: null,&#xA;            &#34;Config&#34;: [&#xA;                {&#xA;                    &#34;Subnet&#34;: &#34;10.0.1.0/24&#34;,&#xA;                    &#34;Gateway&#34;: &#34;10.0.1.1&#34;&#xA;                }&#xA;            ]&#xA;        },&#xA;        &#34;Internal&#34;: false,&#xA;        &#34;Containers&#34;: {&#xA;            &#34;0ebe0fab555d2e2ef2fcda634bef2071ad3f5842b06bd134b40f259ab9be4f13&#34;: {&#xA;                &#34;Name&#34;: &#34;nsenter-l2-table-test.2.83uezc16jcaz2rp6cjwyf4605&#34;,&#xA;                &#34;EndpointID&#34;: &#34;3064946bb0224a4b3647cefcba18dcbea71b90a2ba1c09212a7bc599ec1ed3eb&#34;,&#xA;                &#34;MacAddress&#34;: &#34;02:42:0a:00:01:04&#34;,&#xA;                &#34;IPv4Address&#34;: &#34;10.0.1.4/24&#34;,&#xA;                &#34;IPv6Address&#34;: &#34;&#34;&#xA;            },&#xA;            &#34;55065360ac1c71638fdef50a073a661dec53b693409c5e09f8f854abc7dbb373&#34;: {&#xA;                &#34;Name&#34;: &#34;nsenter-l2-table-test.1.4ryh3wmmv21nsrfwmilanypqq&#34;,&#xA;                &#34;EndpointID&#34;: &#34;f81ae5f979d6c54f60636ca9bb2107d95ebf9a08f64786c549e87a66190f1b1f&#34;,&#xA;                &#34;MacAddress&#34;: &#34;02:42:0a:00:01:03&#34;,&#xA;                &#34;IPv4Address&#34;: &#34;10.0.1.3/24&#34;,&#xA;                &#34;IPv6Address&#34;: &#34;&#34;&#xA;            },&#xA;            &#34;57eca277749bb01a488f0e6c4e91dc6720b7c8f08531536377b29a972971f54b&#34;: {&#xA;                &#34;Name&#34;: &#34;nsenter-l2-table-test.3.9cuoq5m2ue1wi4lsw64k88tvz&#34;,&#xA;                &#34;EndpointID&#34;: &#34;ff1a251ffd6c674cd5fd117386d1a197ab68b4ed708187035d91ff5bd5fe0251&#34;,&#xA;                &#34;MacAddress&#34;: &#34;02:42:0a:00:01:05&#34;,&#xA;                &#34;IPv4Address&#34;: &#34;10.0.1.5/24&#34;,&#xA;                &#34;IPv6Address&#34;: &#34;&#34;&#xA;            }&#xA;        },&#xA;        &#34;Options&#34;: {&#xA;            &#34;com.docker.network.driver.overlay.vxlanid_list&#34;: &#34;260&#34;&#xA;        },&#xA;        &#34;Labels&#34;: {}&#xA;    }&#xA;]&#xA;&#xA;# Launching netshoot in privileged mode&#xA; üê≥  ‚Üí docker run -it --rm -v /var/run/docker/netns:/var/run/docker/netns --privileged=true nicolaka/netshoot&#xA; &#xA;# Listing all docker-created network namespaces&#xA; &#xA;/ # cd /var/run/docker/netns/&#xA;/var/run/docker/netns # ls&#xA;0b1b36d33313  1-9tp0f348do  14d1428c3962  645eb414b538  816b96054426  916dbaa7ea76  db9fd2d68a9b  e79049ce9994  f857b5c01ced&#xA;1-9r17dodsxt  1159c401b8d8  1a508036acc8  7ca29d89293c  83b743f2f087  aeed676a57a5  default       f22ffa5115a0&#xA;&#xA;# The overlay network that we created had an id of 9tp0f348donsdj75pktssd97b. All overlay networks are named &amp;lt;number&amp;gt;-&amp;lt;id&amp;gt;. We can see it in the list as `1-9tp0f348do`. To enter it:&#xA;&#xA;/ # nsenter --net=/var/run/docker/netns/1-9tp0f348do sh&#xA;&#xA;# Now all the commands we issue are within that namespace. &#xA;&#xA;/ # ifconfig&#xA;br0       Link encap:Ethernet  HWaddr 02:15:B8:E7:DE:B3&#xA;          inet addr:10.0.1.1  Bcast:0.0.0.0  Mask:255.255.255.0&#xA;          inet6 addr: fe80::20ce:a5ff:fe63:437d%32621/64 Scope:Link&#xA;          UP BROADCAST RUNNING MULTICAST  MTU:1450  Metric:1&#xA;          RX packets:36 errors:0 dropped:0 overruns:0 frame:0&#xA;          TX packets:18 errors:0 dropped:0 overruns:0 carrier:0&#xA;          collisions:0 txqueuelen:0&#xA;          RX bytes:2224 (2.1 KiB)  TX bytes:1348 (1.3 KiB)&#xA;&#xA;lo        Link encap:Local Loopback&#xA;          inet addr:127.0.0.1  Mask:255.0.0.0&#xA;          inet6 addr: ::1%32621/128 Scope:Host&#xA;          UP LOOPBACK RUNNING  MTU:65536  Metric:1&#xA;          RX packets:4 errors:0 dropped:0 overruns:0 frame:0&#xA;          TX packets:4 errors:0 dropped:0 overruns:0 carrier:0&#xA;          collisions:0 txqueuelen:1&#xA;          RX bytes:336 (336.0 B)  TX bytes:336 (336.0 B)&#xA;&#xA;veth2     Link encap:Ethernet  HWaddr 02:15:B8:E7:DE:B3&#xA;          inet6 addr: fe80::15:b8ff:fee7:deb3%32621/64 Scope:Link&#xA;          UP BROADCAST RUNNING MULTICAST  MTU:1450  Metric:1&#xA;          RX packets:9 errors:0 dropped:0 overruns:0 frame:0&#xA;          TX packets:32 errors:0 dropped:0 overruns:0 carrier:0&#xA;          collisions:0 txqueuelen:0&#xA;          RX bytes:690 (690.0 B)  TX bytes:2460 (2.4 KiB)&#xA;&#xA;veth3     Link encap:Ethernet  HWaddr 7E:55:C3:5C:C2:78&#xA;          inet6 addr: fe80::7c55:c3ff:fe5c:c278%32621/64 Scope:Link&#xA;          UP BROADCAST RUNNING MULTICAST  MTU:1450  Metric:1&#xA;          RX packets:13 errors:0 dropped:0 overruns:0 frame:0&#xA;          TX packets:26 errors:0 dropped:0 overruns:0 carrier:0&#xA;          collisions:0 txqueuelen:0&#xA;          RX bytes:970 (970.0 B)  TX bytes:1940 (1.8 KiB)&#xA;&#xA;veth4     Link encap:Ethernet  HWaddr 72:95:AB:A1:6A:87&#xA;          inet6 addr: fe80::7095:abff:fea1:6a87%32621/64 Scope:Link&#xA;          UP BROADCAST RUNNING MULTICAST  MTU:1450  Metric:1&#xA;          RX packets:14 errors:0 dropped:0 overruns:0 frame:0&#xA;          TX packets:27 errors:0 dropped:0 overruns:0 carrier:0&#xA;          collisions:0 txqueuelen:0&#xA;          RX bytes:1068 (1.0 KiB)  TX bytes:2038 (1.9 KiB)&#xA;&#xA;vxlan1    Link encap:Ethernet  HWaddr EA:EC:1D:B1:7D:D7&#xA;          inet6 addr: fe80::e8ec:1dff:feb1:7dd7%32621/64 Scope:Link&#xA;          UP BROADCAST RUNNING MULTICAST  MTU:1450  Metric:1&#xA;          RX packets:0 errors:0 dropped:0 overruns:0 frame:0&#xA;          TX packets:0 errors:0 dropped:33 overruns:0 carrier:0&#xA;          collisions:0 txqueuelen:0&#xA;          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)&#xA;&#xA;# Let&#39;s check out the L2 forwarding table. These MAC addresses belong to the tasks/containers in this service. &#xA;&#xA;/ # bridge  fdb show br br0&#xA;33:33:00:00:00:01 dev br0 self permanent&#xA;01:00:5e:00:00:01 dev br0 self permanent&#xA;33:33:ff:63:43:7d dev br0 self permanent&#xA;ea:ec:1d:b1:7d:d7 dev vxlan1 master br0 permanent&#xA;02:15:b8:e7&lt;span&gt;üá©üá™&lt;/span&gt;b3 dev veth2 master br0 permanent&#xA;33:33:00:00:00:01 dev veth2 self permanent&#xA;01:00:5e:00:00:01 dev veth2 self permanent&#xA;33:33:ff:e7&lt;span&gt;üá©üá™&lt;/span&gt;b3 dev veth2 self permanent&#xA;7e:55:c3:5c:c2:78 dev veth3 master br0 permanent&#xA;33:33:00:00:00:01 dev veth3 self permanent&#xA;01:00:5e:00:00:01 dev veth3 self permanent&#xA;33:33:ff:5c:c2:78 dev veth3 self permanent&#xA;72:95&lt;span&gt;üÜé&lt;/span&gt;a1:6a:87 dev veth4 master br0 permanent&#xA;33:33:00:00:00:01 dev veth4 self permanent&#xA;01:00:5e:00:00:01 dev veth4 self permanent&#xA;33:33:ff:a1:6a:87 dev veth4 self permanent&#xA;&#xA;&#xA;# ARP and routing tables. Note that an overlay network only routes traffic for that network. It only has a single route that matches the subnet of that network.&#xA;&#xA;/ # ip neigh show&#xA;/ # ip route&#xA;10.0.1.0/24 dev br0  proto kernel  scope link  src 10.0.1.1&#xA;&#xA;# Looks like the arp table is flushed. Let&#39;s ping some of the containers on this network.&#xA;&#xA;/ # ping 10.0.1.4&#xA;PING 10.0.1.4 (10.0.1.4) 56(84) bytes of data.&#xA;64 bytes from 10.0.1.4: icmp_seq=1 ttl=64 time=0.207 ms&#xA;64 bytes from 10.0.1.4: icmp_seq=2 ttl=64 time=0.087 ms&#xA;^C&#xA;--- 10.0.1.4 ping statistics ---&#xA;2 packets transmitted, 2 received, 0% packet loss, time 1002ms&#xA;rtt min/avg/max/mdev = 0.087/0.147/0.207/0.060 ms&#xA;&#xA;/ # ip neigh show&#xA;10.0.1.4 dev br0 lladdr 02:42:0a:00:01:04 REACHABLE&#xA;&#xA;# and using bridge-utils to show interfaces of the overlay network local bridge.&#xA;&#xA;/ # brctl show&#xA;bridge name&#x9;bridge id&#x9;&#x9;STP enabled&#x9;interfaces&#xA;br0&#x9;&#x9;8000.0215b8e7deb3&#x9;no&#x9;&#x9;vxlan1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;veth2&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;veth3&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;veth4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;CTOP&lt;/h2&gt; &#xA;&lt;p&gt;ctop is a free open source, simple and cross-platform top-like command-line tool for monitoring container metrics in real-time. It allows you to get an overview of metrics concerning CPU, memory, network, I/O for multiple containers and also supports inspection of a specific container.&lt;/p&gt; &#xA;&lt;p&gt;To get data into ctop, you&#39;ll need to bind docker.sock into the netshoot container.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;/ # docker run -it --rm -v /var/run/docker.sock:/var/run/docker.sock nicolaka/netshoot ctop&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nicolaka/netshoot/master/img/ctop.png&#34; alt=&#34;ctop.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;It will display running and existed containers with useful metrics to help troubleshoot resource issues; hit &#34;q&#34; to exit.&lt;/p&gt; &#xA;&lt;h2&gt;Termshark&lt;/h2&gt; &#xA;&lt;p&gt;Termshark is a terminal user-interface for tshark. It allows user to read pcap files or sniff live interfaces with Wireshark&#39;s display filters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Launching netshoot with NET_ADMIN and CAP_NET_RAW capabilities. Capturing packets on eth0 with icmp &#xA;/ # docker run --rm --cap-add=NET_ADMIN --cap-add=NET_RAW -it nicolaka/netshoot termshark -i eth0 icmp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Launching netshoot with NET_ADMIN and CAP_NET_RAW capabilities Reading packets from ipv4frags.pcap&#xA;&#xA;/ # docker run --rm --cap-add=NET_ADMIN --cap-add=NET_RAW -v /tmp/ipv4frags.pcap:/tmp/ipv4frags.pcap -it nicolaka/netshoot termshark -r /tmp/ipv4frags.pcap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More info on &lt;code&gt;termshark&lt;/code&gt; &lt;a href=&#34;https://github.com/gcla/termshark&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Swaks&lt;/h2&gt; &#xA;&lt;p&gt;Swaks (Swiss Army Knife for SMTP) is a featureful, flexible, scriptable, transaction-oriented SMTP test tool. It is free to use and licensed under the GNU GPLv2.&lt;/p&gt; &#xA;&lt;p&gt;You can use it to test and troubleshoot email servers with a crystal-clear syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;swaks --to user@example.com \&#xA;  --from fred@example.com --h-From: &#39;&#34;Fred Example&#34; &amp;lt;fred@example.com&amp;gt;&#39; \&#xA;  --auth CRAM-MD5 --auth-user me@example.com \&#xA;  --header-X-Test &#34;test email&#34; \&#xA;  --data &#34;Example body&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More info, examples and lots of documentation on &lt;code&gt;Swaks&lt;/code&gt; &lt;a href=&#34;http://www.jetmore.org/john/code/swaks/&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to provide to contribute networking troubleshooting tools and use-cases by opening PRs. If you would like to add any package, please follow these steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In the PR, please include some rationale as to why this tool is useful to be included in netshoot. &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Note: If the functionality of the tool is already addressed by an existing tool, I might not accept the PR&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;Change the Dockerfile to include the new package/tool&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;re building the tool from source, make sure you leverage the multi-stage build process and update the &lt;code&gt;build/fetch_binaries.sh&lt;/code&gt; script&lt;/li&gt; &#xA; &lt;li&gt;Update the README&#39;s list of included packages AND include a section on how to use the tool&lt;/li&gt; &#xA; &lt;li&gt;If the tool you&#39;re adding supports multi-platform, please make sure you highlight that.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>prowler-cloud/prowler</title>
    <updated>2022-07-31T02:24:33Z</updated>
    <id>tag:github.com,2022-07-31:/prowler-cloud/prowler</id>
    <link href="https://github.com/prowler-cloud/prowler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Prowler is an Open Source security tool to perform AWS security best practices assessments, audits, incident response, continuous monitoring, hardening and forensics readiness. It contains more than 240 controls covering CIS, PCI-DSS, ISO27001, GDPR, HIPAA, FFIEC, SOC2, AWS FTR, ENS and custom security frameworks.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img align=&#34;center&#34; src=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/docs/images/prowler-pro-dark.png#gh-dark-mode-only&#34; width=&#34;150&#34; height=&#34;36&#34;&gt; &lt;img align=&#34;center&#34; src=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/docs/images/prowler-pro-light.png#gh-light-mode-only&#34; width=&#34;15%&#34; height=&#34;15%&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;&lt;i&gt;&amp;nbsp;&amp;nbsp;&amp;amp;nbspExplore the Pro version of Prowler at &lt;a href=&#34;https://prowler.pro&#34;&gt;prowler.pro&lt;/a&gt;&lt;/i&gt;&lt;/b&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/3985464/113734260-7ba06900-96fb-11eb-82bc-d4f68a1e2710.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://discord.gg/UjSMCVnxSB&#34;&gt;&lt;img alt=&#34;Discord Shield&#34; src=&#34;https://img.shields.io/discord/807208614288818196&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/toniblyx/prowler&#34;&gt;&lt;img alt=&#34;Docker Pulls&#34; src=&#34;https://img.shields.io/docker/pulls/toniblyx/prowler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/toniblyx/prowler&#34;&gt;&lt;img alt=&#34;Docker&#34; src=&#34;https://img.shields.io/docker/cloud/build/toniblyx/prowler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/toniblyx/prowler&#34;&gt;&lt;img alt=&#34;Docker&#34; src=&#34;https://img.shields.io/docker/image-size/toniblyx/prowler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gallery.ecr.aws/o4g1s5r6/prowler&#34;&gt;&lt;img width=&#34;120&#34; height=&#34;19&amp;quot;&#34; alt=&#34;AWS ECR Gallery&#34; src=&#34;https://user-images.githubusercontent.com/3985464/151531396-b6535a68-c907-44eb-95a1-a09508178616.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/prowler-cloud/prowler&#34;&gt;&lt;img alt=&#34;Repo size&#34; src=&#34;https://img.shields.io/github/repo-size/prowler-cloud/prowler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/prowler-cloud/prowler&#34;&gt;&lt;img alt=&#34;Lines&#34; src=&#34;https://img.shields.io/tokei/lines/github/prowler-cloud/prowler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/prowler-cloud/prowler/issues&#34;&gt;&lt;img alt=&#34;Issues&#34; src=&#34;https://img.shields.io/github/issues/prowler-cloud/prowler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/prowler-cloud/prowler/releases&#34;&gt;&lt;img alt=&#34;Version&#34; src=&#34;https://img.shields.io/github/v/release/prowler-cloud/prowler?include_prereleases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/prowler-cloud/prowler/releases&#34;&gt;&lt;img alt=&#34;Version&#34; src=&#34;https://img.shields.io/github/release-date/prowler-cloud/prowler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/prowler-cloud/prowler&#34;&gt;&lt;img alt=&#34;Contributors&#34; src=&#34;https://img.shields.io/github/contributors-anon/prowler-cloud/prowler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/prowler-cloud/prowler&#34;&gt;&lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/github/license/prowler-cloud/prowler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/ToniBlyx&#34;&gt;&lt;img alt=&#34;Twitter&#34; src=&#34;https://img.shields.io/twitter/follow/toniblyx?style=social&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;i&gt;Prowler&lt;/i&gt; is an Open Source security tool to perform AWS security best practices assessments, audits, incident response, continuous monitoring, hardening and forensics readiness. It contains more than 240 controls covering CIS, PCI-DSS, ISO27001, GDPR, HIPAA, FFIEC, SOC2, AWS FTR, ENS and custom security frameworks. &lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#high-level-architecture&#34;&gt;High level architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#requirements-and-installation&#34;&gt;Requirements and Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#advanced-usage&#34;&gt;Advanced Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#security-hub-integration&#34;&gt;Security Hub integration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#codebuild-deployment&#34;&gt;CodeBuild deployment&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#allowlist-or-remove-a-fail-from-resources&#34;&gt;Allowlist&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#inventory&#34;&gt;Inventory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#how-to-fix-every-fail&#34;&gt;Fix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#extras&#34;&gt;Extras&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#forensics-ready-checks&#34;&gt;Forensics Ready Checks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#gdpr-checks&#34;&gt;GDPR Checks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#hipaa-checks&#34;&gt;HIPAA Checks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#trust-boundaries-checks&#34;&gt;Trust Boundaries Checks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/util/org-multi-account/README.md&#34;&gt;Multi Account and Continuous Monitoring&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#custom-checks&#34;&gt;Custom Checks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#third-party-integrations&#34;&gt;Third Party Integrations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/LIST_OF_CHECKS_AND_GROUPS.md&#34;&gt;Full list of checks and groups&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;Prowler is a command line tool that helps you with AWS security assessment, auditing, hardening and incident response.&lt;/p&gt; &#xA;&lt;p&gt;It follows guidelines of the CIS Amazon Web Services Foundations Benchmark (49 checks) and has more than 190 additional checks including related to GDPR, HIPAA, PCI-DSS, ISO-27001, FFIEC, SOC2 and others.&lt;/p&gt; &#xA;&lt;p&gt;Read more about &lt;a href=&#34;https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf&#34;&gt;CIS Amazon Web Services Foundations Benchmark v1.2.0 - 05-23-2018&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;+240 checks covering security best practices across all AWS regions and most of AWS services and related to the next groups:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Identity and Access Management [group1]&lt;/li&gt; &#xA; &lt;li&gt;Logging [group2]&lt;/li&gt; &#xA; &lt;li&gt;Monitoring [group3]&lt;/li&gt; &#xA; &lt;li&gt;Networking [group4]&lt;/li&gt; &#xA; &lt;li&gt;CIS Level 1 [cislevel1]&lt;/li&gt; &#xA; &lt;li&gt;CIS Level 2 [cislevel2]&lt;/li&gt; &#xA; &lt;li&gt;Extras &lt;em&gt;see Extras section&lt;/em&gt; [extras]&lt;/li&gt; &#xA; &lt;li&gt;Forensics related group of checks [forensics-ready]&lt;/li&gt; &#xA; &lt;li&gt;GDPR [gdpr] Read more &lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#gdpr-checks&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HIPAA [hipaa] Read more &lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#hipaa-checks&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Trust Boundaries [trustboundaries] Read more &lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#trust-boundaries-checks&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Secrets&lt;/li&gt; &#xA; &lt;li&gt;Internet exposed resources&lt;/li&gt; &#xA; &lt;li&gt;EKS-CIS&lt;/li&gt; &#xA; &lt;li&gt;Also includes PCI-DSS, ISO-27001, FFIEC, SOC2, ENS (Esquema Nacional de Seguridad of Spain).&lt;/li&gt; &#xA; &lt;li&gt;AWS FTR [FTR] Read more &lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#aws-ftr-checks&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;With Prowler you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get a direct colorful or monochrome report&lt;/li&gt; &#xA; &lt;li&gt;A HTML, CSV, JUNIT, JSON or JSON ASFF (Security Hub) format report&lt;/li&gt; &#xA; &lt;li&gt;Send findings directly to Security Hub&lt;/li&gt; &#xA; &lt;li&gt;Run specific checks and groups or create your own&lt;/li&gt; &#xA; &lt;li&gt;Check multiple AWS accounts in parallel or sequentially&lt;/li&gt; &#xA; &lt;li&gt;Get an inventory of your AWS resources&lt;/li&gt; &#xA; &lt;li&gt;And more! Read examples below&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;High level architecture&lt;/h2&gt; &#xA;&lt;p&gt;You can run Prowler from your workstation, an EC2 instance, Fargate or any other container, Codebuild, CloudShell and Cloud9.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3985464/109143232-1488af80-7760-11eb-8d83-726790fda592.jpg&#34; alt=&#34;Prowler high level architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements and Installation&lt;/h2&gt; &#xA;&lt;p&gt;Prowler has been written in bash using AWS-CLI underneath and it works in Linux, Mac OS or Windows with cygwin or virtualization. Also requires &lt;code&gt;jq&lt;/code&gt; and &lt;code&gt;detect-secrets&lt;/code&gt; to work properly.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure the latest version of AWS-CLI is installed. It works with either v1 or v2, however &lt;em&gt;latest v2 is recommended if using new regions since they require STS v2 token&lt;/em&gt;, and other components needed, with Python pip already installed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For Amazon Linux (&lt;code&gt;yum&lt;/code&gt; based Linux distributions and AWS CLI v2):&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo yum update -y&#xA;sudo yum remove -y awscli&#xA;curl &#34;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip&#34; -o &#34;awscliv2.zip&#34;&#xA;unzip awscliv2.zip&#xA;sudo ./aws/install&#xA;sudo yum install -y python3 jq git&#xA;sudo pip3 install detect-secrets==1.0.3&#xA;git clone https://github.com/prowler-cloud/prowler&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For Ubuntu Linux (&lt;code&gt;apt&lt;/code&gt; based Linux distributions and AWS CLI v2):&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo apt update&#xA;sudo apt install python3 python3-pip jq git zip&#xA;pip install detect-secrets==1.0.3&#xA;curl &#34;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip&#34; -o &#34;awscliv2.zip&#34;&#xA;unzip awscliv2.zip&#xA;sudo ./aws/install&#xA;git clone https://github.com/prowler-cloud/prowler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;NOTE: detect-secrets Yelp version is no longer supported, the one from IBM is mantained now. Use the one mentioned below or the specific Yelp version 1.0.3 to make sure it works as expected (&lt;code&gt;pip install detect-secrets==1.0.3&lt;/code&gt;):&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip install &#34;git+https://github.com/ibm/detect-secrets.git@master#egg=detect-secrets&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;AWS-CLI can be also installed it using other methods, refer to official documentation for more details: &lt;a href=&#34;https://aws.amazon.com/cli/&#34;&gt;https://aws.amazon.com/cli/&lt;/a&gt;, but &lt;code&gt;detect-secrets&lt;/code&gt; has to be installed using &lt;code&gt;pip&lt;/code&gt; or &lt;code&gt;pip3&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Once Prowler repository is cloned, get into the folder and you can run it:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd prowler&#xA;./prowler&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Since Prowler users AWS CLI under the hood, you can follow any authentication method as described &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html#cli-configure-quickstart-precedence&#34;&gt;here&lt;/a&gt;. Make sure you have properly configured your AWS-CLI with a valid Access Key and Region or declare AWS variables properly (or instance profile/role):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;aws configure&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export AWS_ACCESS_KEY_ID=&#34;ASXXXXXXX&#34;&#xA;export AWS_SECRET_ACCESS_KEY=&#34;XXXXXXXXX&#34;&#xA;export AWS_SESSION_TOKEN=&#34;XXXXXXXXX&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Those credentials must be associated to a user or role with proper permissions to do all checks. To make sure, add the AWS managed policies, SecurityAudit and ViewOnlyAccess, to the user or role being used. Policy ARNs are:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;arn:aws:iam::aws:policy/SecurityAudit&#xA;arn:aws:iam::aws:policy/job-function/ViewOnlyAccess&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Additional permissions needed: to make sure Prowler can scan all services included in the group &lt;em&gt;Extras&lt;/em&gt;, make sure you attach also the custom policy &lt;a href=&#34;https://github.com/prowler-cloud/prowler/raw/master/iam/prowler-additions-policy.json&#34;&gt;prowler-additions-policy.json&lt;/a&gt; to the role you are using. If you want Prowler to send findings to &lt;a href=&#34;https://aws.amazon.com/security-hub&#34;&gt;AWS Security Hub&lt;/a&gt;, make sure you also attach the custom policy &lt;a href=&#34;https://github.com/prowler-cloud/prowler/raw/master/iam/prowler-security-hub.json&#34;&gt;prowler-security-hub.json&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the &lt;code&gt;prowler&lt;/code&gt; command without options (it will use your environment variable credentials if they exist or will default to using the &lt;code&gt;~/.aws/credentials&lt;/code&gt; file and run checks over all regions when needed. The default region is us-east-1):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Use &lt;code&gt;-l&lt;/code&gt; to list all available checks and the groups (sections) that reference them. To list all groups use &lt;code&gt;-L&lt;/code&gt; and to list content of a group use &lt;code&gt;-l -g &amp;lt;groupname&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you want to avoid installing dependencies run it using Docker:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -ti --rm --name prowler --env AWS_ACCESS_KEY_ID --env AWS_SECRET_ACCESS_KEY --env AWS_SESSION_TOKEN toniblyx/prowler:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In case you want to get reports created by Prowler use docker volume option like in the example below:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -ti --rm -v /your/local/output:/prowler/output --name prowler --env AWS_ACCESS_KEY_ID --env AWS_SECRET_ACCESS_KEY --env AWS_SESSION_TOKEN toniblyx/prowler:latest -g hipaa -M csv,json,html&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For custom AWS-CLI profile and region, use the following: (it will use your custom profile and run checks over all regions when needed):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -p custom-profile -r us-east-1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For a single check use option &lt;code&gt;-c&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -c check310&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;With Docker:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -ti --rm --name prowler --env AWS_ACCESS_KEY_ID --env AWS_SECRET_ACCESS_KEY --env AWS_SESSION_TOKEN toniblyx/prowler:latest &#34;-c check310&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or multiple checks separated by comma:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -c check310,check722&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or all checks but some of them:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -E check42,check43&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or for custom profile and region:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -p custom-profile -r us-east-1 -c check11&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or for a group of checks use group name:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -g group1 # for iam related checks&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or exclude some checks in the group:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -g group4 -E check42,check43&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Valid check numbers are based on the AWS CIS Benchmark guide, so 1.1 is check11 and 3.10 is check310&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Regions&lt;/h3&gt; &#xA;&lt;p&gt;By default, Prowler scans all opt-in regions available, that might take a long execution time depending on the number of resources and regions used. Same applies for GovCloud or China regions. See below Advance usage for examples.&lt;/p&gt; &#xA;&lt;p&gt;Prowler has two parameters related to regions: &lt;code&gt;-r&lt;/code&gt; that is used query AWS services API endpoints (it uses &lt;code&gt;us-east-1&lt;/code&gt; by default and required for GovCloud or China) and the option &lt;code&gt;-f&lt;/code&gt; that is to filter those regions you only want to scan. For example if you want to scan Dublin only use &lt;code&gt;-f eu-west-1&lt;/code&gt; and if you want to scan Dublin and Ohio &lt;code&gt;-f eu-west-1,us-east-1&lt;/code&gt;, note the regions are separated by a comma delimiter (it can be used as before with &lt;code&gt;-f &#39;eu-west-1,us-east-1&#39;&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Sample screenshot of default console report first lines of command &lt;code&gt;./prowler&lt;/code&gt;:&lt;/p&gt; &lt;img width=&#34;900&#34; src=&#34;https://user-images.githubusercontent.com/3985464/141444529-84640bed-be0b-4112-80a2-2a43e3ebf53f.png&#34;&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sample screenshot of the html output &lt;code&gt;-M html&lt;/code&gt;:&lt;/p&gt; &lt;img width=&#34;900&#34; alt=&#34;Prowler html&#34; src=&#34;https://user-images.githubusercontent.com/3985464/141443976-41d32cc2-533d-405a-92cb-affc3995d6ec.png&#34;&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sample screenshot of the Quicksight dashboard, see &lt;a href=&#34;https://quicksight-security-dashboard.workshop.aws/&#34;&gt;quicksight-security-dashboard.workshop.aws&lt;/a&gt;:&lt;/p&gt; &lt;img width=&#34;900&#34; alt=&#34;Prowler with Quicksight&#34; src=&#34;https://user-images.githubusercontent.com/3985464/128932819-0156e838-286d-483c-b953-fda68a325a3d.png&#34;&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sample screenshot of the junit-xml output in CodeBuild &lt;code&gt;-M junit-xml&lt;/code&gt;:&lt;/p&gt; &lt;img width=&#34;900&#34; src=&#34;https://user-images.githubusercontent.com/3985464/113942824-ca382b00-9801-11eb-84e5-d7731548a7a9.png&#34;&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Save your reports&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If you want to save your report for later analysis thare are different ways, natively (supported text, mono, csv, json, json-asff, junit-xml and html, see note below for more info):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -M csv&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or with multiple formats at the same time:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -M csv,json,json-asff,html&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or just a group of checks in multiple formats:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -g gdpr -M csv,json,json-asff&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or if you want a sorted and dynamic HTML report do:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -M html&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now &lt;code&gt;-M&lt;/code&gt; creates a file inside the prowler &lt;code&gt;output&lt;/code&gt; directory named &lt;code&gt;prowler-output-AWSACCOUNTID-YYYYMMDDHHMMSS.format&lt;/code&gt;. You don&#39;t have to specify anything else, no pipes, no redirects.&lt;/p&gt; &lt;p&gt;or just saving the output to a file like below:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -M mono &amp;gt; prowler-report.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To generate JUnit report files, include the junit-xml format. This can be combined with any other format. Files are written inside a prowler root directory named &lt;code&gt;junit-reports&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -M text,junit-xml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Note about output formats to use with &lt;code&gt;-M&lt;/code&gt;: &#34;text&#34; is the default one with colors, &#34;mono&#34; is like default one but monochrome, &#34;csv&#34; is comma separated values, &#34;json&#34; plain basic json (without comma between lines) and &#34;json-asff&#34; is also json with Amazon Security Finding Format that you can ship to Security Hub using &lt;code&gt;-S&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;To save your report in an S3 bucket, use &lt;code&gt;-B&lt;/code&gt; to define a custom output bucket along with &lt;code&gt;-M&lt;/code&gt; to define the output format that is going to be uploaded to S3:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -M csv -B my-bucket/folder/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;In the case you do not want to use the assumed role credentials but the initial credentials to put the reports into the S3 bucket, use &lt;code&gt;-D&lt;/code&gt; instead of &lt;code&gt;-B&lt;/code&gt;. Make sure that the used credentials have s3:PutObject permissions in the S3 path where the reports are going to be uploaded.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;When generating multiple formats and running using Docker, to retrieve the reports, bind a local directory to the container, e.g.:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -ti --rm --name prowler --volume &#34;$(pwd)&#34;:/prowler/output --env AWS_ACCESS_KEY_ID --env AWS_SECRET_ACCESS_KEY --env AWS_SESSION_TOKEN toniblyx/prowler:latest -M csv,json&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To perform an assessment based on CIS Profile Definitions you can use cislevel1 or cislevel2 with &lt;code&gt;-g&lt;/code&gt; flag, more information about this &lt;a href=&#34;https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf&#34;&gt;here, page 8&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -g cislevel1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you want to run Prowler to check multiple AWS accounts in parallel (runs up to 4 simultaneously &lt;code&gt;-P 4&lt;/code&gt;) but you may want to read below in Advanced Usage section to do so assuming a role:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;grep -E &#39;^\[([0-9A-Aa-z_-]+)\]&#39;  ~/.aws/credentials | tr -d &#39;][&#39; | shuf |  \&#xA;xargs -n 1 -L 1 -I @ -r -P 4 ./prowler -p @ -M csv  2&amp;gt; /dev/null  &amp;gt;&amp;gt; all-accounts.csv&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For help about usage run:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./prowler -h&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Database providers connector&lt;/h2&gt; &#xA;&lt;p&gt;You can send the Prowler&#39;s output to different databases (right now only PostgreSQL is supported).&lt;/p&gt; &#xA;&lt;p&gt;Jump into the section for the database provider you want to use and follow the required steps to configure it.&lt;/p&gt; &#xA;&lt;h3&gt;PostgreSQL&lt;/h3&gt; &#xA;&lt;p&gt;Install psql&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mac -&amp;gt; &lt;code&gt;brew install libpq&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ubuntu -&amp;gt; &lt;code&gt;sudo apt-get install postgresql-client &lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;RHEL/Centos -&amp;gt; &lt;code&gt;sudo yum install postgresql10&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Credentials&lt;/h4&gt; &#xA;&lt;p&gt;There are two options to pass the PostgreSQL credentials to Prowler:&lt;/p&gt; &#xA;&lt;h5&gt;Using a .pgpass file&lt;/h5&gt; &#xA;&lt;p&gt;Configure a &lt;code&gt;~/.pgpass&lt;/code&gt; file into the root folder of the user that is going to launch Prowler (&lt;a href=&#34;https://www.postgresql.org/docs/current/libpq-pgpass.html&#34;&gt;pgpass file doc&lt;/a&gt;), including an extra field at the end of the line, separated by &lt;code&gt;:&lt;/code&gt;, to name the table, using the following format: &lt;code&gt;hostname:port:database:username:password:table&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Using environment variables&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configure the following environment variables: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;POSTGRES_HOST&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;POSTGRES_PORT&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;POSTGRES_USER&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;POSTGRES_PASSWORD&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;POSTGRES_DB&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;POSTGRES_TABLE&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: If you are using a schema different than postgres please include it at the beginning of the &lt;code&gt;POSTGRES_TABLE&lt;/code&gt; variable, like: &lt;code&gt;export POSTGRES_TABLE=prowler.findings&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Create a table in your PostgreSQL database to store the Prowler&#39;s data. You can use the following SQL statement to create the table:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CREATE TABLE  IF NOT EXISTS prowler_findings (&#xA;profile TEXT,&#xA;account_number TEXT,&#xA;region TEXT,&#xA;check_id TEXT,&#xA;result TEXT,&#xA;item_scored TEXT,&#xA;item_level TEXT,&#xA;check_title TEXT,&#xA;result_extended TEXT,&#xA;check_asff_compliance_type TEXT,&#xA;severity TEXT,&#xA;service_name TEXT,&#xA;check_asff_resource_type TEXT,&#xA;check_asff_type TEXT,&#xA;risk TEXT,&#xA;remediation TEXT,&#xA;documentation TEXT,&#xA;check_caf_epic TEXT,&#xA;resource_id TEXT,&#xA;prowler_start_time TEXT,&#xA;account_details_email TEXT,&#xA;account_details_name TEXT,&#xA;account_details_arn TEXT,&#xA;account_details_org TEXT,&#xA;account_details_tags  TEXT&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Execute Prowler with &lt;code&gt;-d&lt;/code&gt; flag, for example: &lt;code&gt;./prowler -M csv -d postgresql&lt;/code&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: This command creates a &lt;code&gt;csv&lt;/code&gt; output file and stores the Prowler output in the configured PostgreSQL DB. It&#39;s an example, &lt;code&gt;-d&lt;/code&gt; flag &lt;strong&gt;does not&lt;/strong&gt; require &lt;code&gt;-M&lt;/code&gt; to run.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Advanced Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Assume Role:&lt;/h3&gt; &#xA;&lt;p&gt;Prowler uses the AWS CLI underneath so it uses the same authentication methods. However, there are few ways to run Prowler against multiple accounts using IAM Assume Role feature depending on eachg use case. You can just set up your custom profile inside &lt;code&gt;~/.aws/config&lt;/code&gt; with all needed information about the role to assume then call it with &lt;code&gt;./prowler -p your-custom-profile&lt;/code&gt;. Additionally you can use &lt;code&gt;-A 123456789012&lt;/code&gt; and &lt;code&gt;-R RemoteRoleToAssume&lt;/code&gt; and Prowler will get those temporary credentials using &lt;code&gt;aws sts assume-role&lt;/code&gt;, set them up as environment variables and run against that given account. To create a role to assume in multiple accounts easier either as CFN Stack or StackSet, look at &lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/iam/create_role_to_assume_cfn.yaml&#34;&gt;this CloudFormation template&lt;/a&gt; and adapt it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -A 123456789012 -R ProwlerRole&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -A 123456789012 -R ProwlerRole -I 123456&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;NOTE 1 about Session Duration&lt;/em&gt;: By default it gets credentials valid for 1 hour (3600 seconds). Depending on the mount of checks you run and the size of your infrastructure, Prowler may require more than 1 hour to finish. Use option &lt;code&gt;-T &amp;lt;seconds&amp;gt;&lt;/code&gt; to allow up to 12h (43200 seconds). To allow more than 1h you need to modify &lt;em&gt;&#34;Maximum CLI/API session duration&#34;&lt;/em&gt; for that particular role, read more &lt;a href=&#34;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;NOTE 2 about Session Duration&lt;/em&gt;: Bear in mind that if you are using roles assumed by role chaining there is a hard limit of 1 hour so consider not using role chaining if possible, read more about that, in foot note 1 below the table &lt;a href=&#34;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For example, if you want to get only the fails in CSV format from all checks regarding RDS without banner from the AWS Account 123456789012 assuming the role RemoteRoleToAssume and set a fixed session duration of 1h:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -A 123456789012 -R RemoteRoleToAssume -T 3600 -b -M cvs -q -g rds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or with a given External ID:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -A 123456789012 -R RemoteRoleToAssume -T 3600 -I 123456 -b -M cvs -q -g rds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Assume Role and across all accounts in AWS Organizations or just a list of accounts:&lt;/h3&gt; &#xA;&lt;p&gt;If you want to run Prowler or just a check or a group across all accounts of AWS Organizations you can do this:&lt;/p&gt; &#xA;&lt;p&gt;First get a list of accounts that are not suspended:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ACCOUNTS_IN_ORGS=$(aws organizations list-accounts --query Accounts[?Status==`ACTIVE`].Id --output text)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run Prowler to assume a role (same in all members) per each account, in this example it is just running one particular check:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;for accountId in $ACCOUNTS_IN_ORGS; do ./prowler -A $accountId -R RemoteRoleToAssume -c extra79; done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using the same for loop it can be scanned a list of accounts with a variable like &lt;code&gt;ACCOUNTS_LIST=&#39;11111111111 2222222222 333333333&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Get AWS Account details from your AWS Organization:&lt;/h3&gt; &#xA;&lt;p&gt;From Prowler v2.8, you can get additional information of the scanned account in CSV and JSON outputs. When scanning a single account you get the Account ID as part of the output. Now, if you have AWS Organizations and are scanning multiple accounts using the assume role functionality, Prowler can get your account details like Account Name, Email, ARN, Organization ID and Tags and you will have them next to every finding in the CSV and JSON outputs. In order to do that you can use the new option &lt;code&gt;-O &amp;lt;management account id&amp;gt;&lt;/code&gt;, requires &lt;code&gt;-R &amp;lt;role to assume&amp;gt;&lt;/code&gt; and also needs permissions &lt;code&gt;organizations:ListAccounts*&lt;/code&gt; and &lt;code&gt;organizations:ListTagsForResource&lt;/code&gt;. See the following sample command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./prowler -R ProwlerScanRole -A 111111111111 -O 222222222222 -M json,csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In that command Prowler will scan the account &lt;code&gt;111111111111&lt;/code&gt; assuming the role &lt;code&gt;ProwlerScanRole&lt;/code&gt; and getting the account details from the AWS Organizatiosn management account &lt;code&gt;222222222222&lt;/code&gt; assuming the same role &lt;code&gt;ProwlerScanRole&lt;/code&gt; for that and creating two reports with those details in JSON and CSV.&lt;/p&gt; &#xA;&lt;p&gt;In the JSON output below (redacted) you can see tags coded in base64 to prevent breaking CSV or JSON due to its format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;  &#34;Account Email&#34;: &#34;my-prod-account@domain.com&#34;,&#xA;  &#34;Account Name&#34;: &#34;my-prod-account&#34;,&#xA;  &#34;Account ARN&#34;: &#34;arn:aws:organizations::222222222222:account/o-abcde1234/111111111111&#34;,&#xA;  &#34;Account Organization&#34;: &#34;o-abcde1234&#34;,&#xA;  &#34;Account tags&#34;: &#34;\&#34;eyJUYWdzIjpasf0=\&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The additional fields in CSV header output are as follow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csv&#34;&gt;ACCOUNT_DETAILS_EMAIL,ACCOUNT_DETAILS_NAME,ACCOUNT_DETAILS_ARN,ACCOUNT_DETAILS_ORG,ACCOUNT_DETAILS_TAGS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GovCloud&lt;/h3&gt; &#xA;&lt;p&gt;Prowler runs in GovCloud regions as well. To make sure it points to the right API endpoint use &lt;code&gt;-r&lt;/code&gt; to either &lt;code&gt;us-gov-west-1&lt;/code&gt; or &lt;code&gt;us-gov-east-1&lt;/code&gt;. If not filter region is used it will look for resources in both GovCloud regions by default:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -r us-gov-west-1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For Security Hub integration see below in Security Hub section.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Custom folder for custom checks&lt;/h3&gt; &#xA;&lt;p&gt;Flag &lt;code&gt;-x /my/own/checks&lt;/code&gt; will include any check in that particular directory (files must start by check). To see how to write checks see &lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#add-custom-checks&#34;&gt;Add Custom Checks&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;S3 URIs are also supported as custom folders for custom checks, e.g. &lt;code&gt;s3://bucket/prefix/checks&lt;/code&gt;. Prowler will download the folder locally and run the checks as they are called with default execution,&lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;-g&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Make sure that the used credentials have s3:GetObject permissions in the S3 path where the custom checks are located.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Show or log only FAILs&lt;/h3&gt; &#xA;&lt;p&gt;In order to remove noise and get only FAIL findings there is a &lt;code&gt;-q&lt;/code&gt; flag that makes Prowler to show and log only FAILs. It can be combined with any other option. Will show WARNINGS when a resource is excluded, just to take into consideration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# -q option combined with -M csv -b&#xA;./prowler -q -M csv -b&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Set the entropy limit for detect-secrets&lt;/h3&gt; &#xA;&lt;p&gt;Sets the entropy limit for high entropy base64 strings from environment variable &lt;code&gt;BASE64_LIMIT&lt;/code&gt;. Value must be between 0.0 and 8.0, defaults is 4.5. Sets the entropy limit for high entropy hex strings from environment variable &lt;code&gt;HEX_LIMIT&lt;/code&gt;. Value must be between 0.0 and 8.0, defaults is 3.0.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export BASE64_LIMIT=4.5&#xA;export HEX_LIMIT=3.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run Prowler using AWS CloudShell&lt;/h3&gt; &#xA;&lt;p&gt;An easy way to run Prowler to scan your account is using AWS CloudShell. Read more and learn how to do it &lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/util/cloudshell/README.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security Hub integration&lt;/h2&gt; &#xA;&lt;p&gt;Since October 30th 2020 (version v2.3RC5), Prowler supports natively and as &lt;strong&gt;official integration&lt;/strong&gt; sending findings to &lt;a href=&#34;https://aws.amazon.com/security-hub&#34;&gt;AWS Security Hub&lt;/a&gt;. This integration allows Prowler to import its findings to AWS Security Hub. With Security Hub, you now have a single place that aggregates, organizes, and prioritizes your security alerts, or findings, from multiple AWS services, such as Amazon GuardDuty, Amazon Inspector, Amazon Macie, AWS Identity and Access Management (IAM) Access Analyzer, and AWS Firewall Manager, as well as from AWS Partner solutions and from Prowler for free.&lt;/p&gt; &#xA;&lt;p&gt;Before sending findings to Prowler, you need to perform next steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Since Security Hub is a region based service, enable it in the region or regions you require. Use the AWS Management Console or using the AWS CLI with this command if you have enough permissions: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws securityhub enable-security-hub --region &amp;lt;region&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Enable Prowler as partner integration integration. Use the AWS Management Console or using the AWS CLI with this command if you have enough permissions: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws securityhub enable-import-findings-for-product --region &amp;lt;region&amp;gt; --product-arn arn:aws:securityhub:&amp;lt;region&amp;gt;::product/prowler/prowler&lt;/code&gt; (change region also inside the ARN).&lt;/li&gt; &#xA;   &lt;li&gt;Using the AWS Management Console: &lt;img src=&#34;https://user-images.githubusercontent.com/3985464/97634660-5ade3400-1a36-11eb-9a92-4a45cc98c158.png&#34; alt=&#34;Screenshot 2020-10-29 at 10 26 02 PM&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;As mentioned in section &#34;Custom IAM Policy&#34;, to allow Prowler to import its findings to AWS Security Hub you need to add the policy below to the role or user running Prowler: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/iam/prowler-security-hub.json&#34;&gt;iam/prowler-security-hub.json&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Once it is enabled, it is as simple as running the command below (for all regions):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -M json-asff -S&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or for only one filtered region like eu-west-1:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -M json-asff -q -S -f eu-west-1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note 1: It is recommended to send only fails to Security Hub and that is possible adding &lt;code&gt;-q&lt;/code&gt; to the command.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note 2: Since Prowler perform checks to all regions by defaults you may need to filter by region when runing Security Hub integration, as shown in the example above. Remember to enable Security Hub in the region or regions you need by calling &lt;code&gt;aws securityhub enable-security-hub --region &amp;lt;region&amp;gt;&lt;/code&gt; and run Prowler with the option &lt;code&gt;-f &amp;lt;region&amp;gt;&lt;/code&gt; (if no region is used it will try to push findings in all regions hubs).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note 3: to have updated findings in Security Hub you have to run Prowler periodically. Once a day or every certain amount of hours.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Once you run findings for first time you will be able to see Prowler findings in Findings section:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3985464/97634676-66c9f600-1a36-11eb-9341-70feb06f6331.png&#34; alt=&#34;Screenshot 2020-10-29 at 10 29 05 PM&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Security Hub in GovCloud regions&lt;/h3&gt; &#xA;&lt;p&gt;To use Prowler and Security Hub integration in GovCloud there is an additional requirement, usage of &lt;code&gt;-r&lt;/code&gt; is needed to point the API queries to the right API endpoint. Here is a sample command that sends only failed findings to Security Hub in region &lt;code&gt;us-gov-west-1&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./prowler -r us-gov-west-1 -f us-gov-west-1 -S -M csv,json-asff -q&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Security Hub in China regions&lt;/h3&gt; &#xA;&lt;p&gt;To use Prowler and Security Hub integration in China regions there is an additional requirement, usage of &lt;code&gt;-r&lt;/code&gt; is needed to point the API queries to the right API endpoint. Here is a sample command that sends only failed findings to Security Hub in region &lt;code&gt;cn-north-1&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./prowler -r cn-north-1 -f cn-north-1 -q -S -M csv,json-asff&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;CodeBuild deployment&lt;/h2&gt; &#xA;&lt;p&gt;Either to run Prowler once or based on a schedule this template makes it pretty straight forward. This template will create a CodeBuild environment and run Prowler directly leaving all reports in a bucket and creating a report also inside CodeBuild basedon the JUnit output from Prowler. Scheduling can be cron based like &lt;code&gt;cron(0 22 * * ? *)&lt;/code&gt; or rate based like &lt;code&gt;rate(5 hours)&lt;/code&gt; since CloudWatch Event rules (or Eventbridge) is used here.&lt;/p&gt; &#xA;&lt;p&gt;The Cloud Formation template that helps you to do that is &lt;a href=&#34;https://github.com/prowler-cloud/prowler/raw/master/util/codebuild/codebuild-prowler-audit-account-cfn.yaml&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is a simple solution to monitor one account. For multiples accounts see &lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/util/org-multi-account/README.md&#34;&gt;Multi Account and Continuous Monitoring&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Allowlist or remove a fail from resources&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes you may find resources that are intentionally configured in a certain way that may be a bad practice but it is all right with it, for example an S3 bucket open to the internet hosting a web site, or a security group with an open port needed in your use case. Now you can use &lt;code&gt;-w allowlist_sample.txt&lt;/code&gt; and add your resources as &lt;code&gt;checkID:resourcename&lt;/code&gt; as in this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./prowler -w allowlist_sample.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;S3 URIs are also supported as allowlist file, e.g. &lt;code&gt;s3://bucket/prefix/allowlist_sample.txt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Make sure that the used credentials have s3:GetObject permissions in the S3 path where the allowlist file is located.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;DynamoDB table ARNs are also supported as allowlist file, e.g. &lt;code&gt;arn:aws:dynamodb:us-east-1:111111222222:table/allowlist&lt;/code&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Make sure that the table has &lt;code&gt;account_id&lt;/code&gt; as partition key and &lt;code&gt;rule&lt;/code&gt; as sort key, and that the used credentials have &lt;code&gt;dynamodb:PartiQLSelect&lt;/code&gt; permissions in the table.&lt;/p&gt; &#xA; &lt;p align=&#34;left&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/38561120/165769502-296f9075-7cc8-445e-8158-4b21804bfe7e.png&#34; alt=&#34;image&#34; width=&#34;397&#34; height=&#34;252&#34;&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The field &lt;code&gt;account_id&lt;/code&gt; can contain either an account ID or an &lt;code&gt;*&lt;/code&gt; (which applies to all the accounts that use this table as a whitelist). As in the traditional allowlist file, the &lt;code&gt;rule&lt;/code&gt; field must contain &lt;code&gt;checkID:resourcename&lt;/code&gt; pattern.&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/38561120/165770610-ed5c2764-7538-44c2-9195-bcfdecc4ef9b.png&#34; alt=&#34;image&#34; width=&#34;394&#34;&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Allowlist option works along with other options and adds a &lt;code&gt;WARNING&lt;/code&gt; instead of &lt;code&gt;INFO&lt;/code&gt;, &lt;code&gt;PASS&lt;/code&gt; or &lt;code&gt;FAIL&lt;/code&gt; to any output format except for &lt;code&gt;json-asff&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Inventory&lt;/h2&gt; &#xA;&lt;p&gt;With Prowler you can get an inventory of your AWS resources. To do so, run &lt;code&gt;./prowler -i&lt;/code&gt; to see what AWS resources you have deployed in your AWS account. This feature lists almost all resources in all regions based on &lt;a href=&#34;https://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/API_GetResources.html&#34;&gt;this&lt;/a&gt; API call. Note that it does not cover 100% of resource types.&lt;/p&gt; &#xA;&lt;p&gt;The inventory will be stored in an output &lt;code&gt;csv&lt;/code&gt; file by default, under common Prowler &lt;code&gt;output&lt;/code&gt; folder, with the following format: &lt;code&gt;prowler-inventory-${ACCOUNT_NUM}-${OUTPUT_DATE}.csv&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to fix every FAIL&lt;/h2&gt; &#xA;&lt;p&gt;Check your report and fix the issues following all specific guidelines per check in &lt;a href=&#34;https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf&#34;&gt;https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;STS expired token&lt;/h3&gt; &#xA;&lt;p&gt;If you are using an STS token for AWS-CLI and your session is expired you probably get this error:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;A client error (ExpiredToken) occurred when calling the GenerateCredentialReport operation: The security token included in the request is expired&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To fix it, please renew your token by authenticating again to the AWS API, see next section below if you use MFA.&lt;/p&gt; &#xA;&lt;h3&gt;Run Prowler with MFA protected credentials&lt;/h3&gt; &#xA;&lt;p&gt;To run Prowler using a profile that requires MFA you just need to get the session token before hand. Just make sure you use this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;aws --profile &amp;lt;YOUR_AWS_PROFILE&amp;gt; sts get-session-token --duration 129600 --serial-number &amp;lt;ARN_OF_MFA&amp;gt; --token-code &amp;lt;MFA_TOKEN_CODE&amp;gt; --output text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you get your token you can export it as environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export AWS_PROFILE=YOUR_AWS_PROFILE&#xA;export AWS_SESSION_TOKEN=YOUR_NEW_TOKEN&#xA;AWS_SECRET_ACCESS_KEY=YOUR_SECRET&#xA;export AWS_ACCESS_KEY_ID=YOUR_KEY&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or set manually up your &lt;code&gt;~/.aws/credentials&lt;/code&gt; file properly.&lt;/p&gt; &#xA;&lt;p&gt;There are some helpfull tools to save time in this process like &lt;a href=&#34;https://github.com/asagage/aws-mfa-script&#34;&gt;aws-mfa-script&lt;/a&gt; or &lt;a href=&#34;https://github.com/sweharris/aws-cli-mfa&#34;&gt;aws-cli-mfa&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;AWS Managed IAM Policies&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_job-functions.html#jf_view-only-user&#34;&gt;ViewOnlyAccess&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use case: This user can view a list of AWS resources and basic metadata in the account across all services. The user cannot read resource content or metadata that goes beyond the quota and list information for resources.&lt;/li&gt; &#xA; &lt;li&gt;Policy description: This policy grants List*, Describe*, Get*, View*, and Lookup* access to resources for most AWS services. To see what actions this policy includes for each service, see &lt;a href=&#34;https://console.aws.amazon.com/iam/home#policies/arn:aws:iam::aws:policy/job-function/ViewOnlyAccess&#34;&gt;ViewOnlyAccess Permissions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_job-functions.html#jf_security-auditor&#34;&gt;SecurityAudit&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use case: This user monitors accounts for compliance with security requirements. This user can access logs and events to investigate potential security breaches or potential malicious activity.&lt;/li&gt; &#xA; &lt;li&gt;Policy description: This policy grants permissions to view configuration data for many AWS services and to review their logs. To see what actions this policy includes for each service, see &lt;a href=&#34;https://console.aws.amazon.com/iam/home#policies/arn:aws:iam::aws:policy/SecurityAudit&#34;&gt;SecurityAudit Permissions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Custom IAM Policy&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/iam/prowler-additions-policy.json&#34;&gt;Prowler-Additions-Policy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Some new and specific checks require Prowler to inherit more permissions than SecurityAudit and ViewOnlyAccess to work properly. In addition to the AWS managed policies, &#34;SecurityAudit&#34; and &#34;ViewOnlyAccess&#34;, the user/role you use for checks may need to be granted a custom policy with a few more read-only permissions (to support additional services mostly). Here is an example policy with the additional rights, &#34;Prowler-Additions-Policy&#34; (see below bootstrap script for set it up):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/iam/prowler-additions-policy.json&#34;&gt;iam/prowler-additions-policy.json&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/iam/prowler-security-hub.json&#34;&gt;Prowler-Security-Hub Policy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Allows Prowler to import its findings to &lt;a href=&#34;https://aws.amazon.com/security-hub&#34;&gt;AWS Security Hub&lt;/a&gt;. More information in &lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#security-hub-integration&#34;&gt;Security Hub integration&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/iam/prowler-security-hub.json&#34;&gt;iam/prowler-security-hub.json&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Bootstrap Script&lt;/h3&gt; &#xA;&lt;p&gt;Quick bash script to set up a &#34;prowler&#34; IAM user with &#34;SecurityAudit&#34; and &#34;ViewOnlyAccess&#34; group with the required permissions (including &#34;Prowler-Additions-Policy&#34;). To run the script below, you need a user with administrative permissions; set the &lt;code&gt;AWS_DEFAULT_PROFILE&lt;/code&gt; to use that account:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export AWS_DEFAULT_PROFILE=default&#xA;export ACCOUNT_ID=$(aws sts get-caller-identity --query &#39;Account&#39; | tr -d &#39;&#34;&#39;)&#xA;aws iam create-group --group-name Prowler&#xA;aws iam create-policy --policy-name Prowler-Additions-Policy --policy-document file://$(pwd)/iam/prowler-additions-policy.json&#xA;aws iam attach-group-policy --group-name Prowler --policy-arn arn:aws:iam::aws:policy/SecurityAudit&#xA;aws iam attach-group-policy --group-name Prowler --policy-arn arn:aws:iam::aws:policy/job-function/ViewOnlyAccess&#xA;aws iam attach-group-policy --group-name Prowler --policy-arn arn:aws:iam::${ACCOUNT_ID}:policy/Prowler-Additions-Policy&#xA;aws iam create-user --user-name prowler&#xA;aws iam add-user-to-group --user-name prowler --group-name Prowler&#xA;aws iam create-access-key --user-name prowler&#xA;unset ACCOUNT_ID AWS_DEFAULT_PROFILE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;aws iam create-access-key&lt;/code&gt; command will output the secret access key and the key id; keep these somewhere safe, and add them to &lt;code&gt;~/.aws/credentials&lt;/code&gt; with an appropriate profile name to use them with Prowler. This is the only time the secret key will be shown. If you lose it, you will need to generate a replacement.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/iam/create_role_to_assume_cfn.yaml&#34;&gt;This CloudFormation template&lt;/a&gt; may also help you on that task.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Extras&lt;/h2&gt; &#xA;&lt;p&gt;We are adding additional checks to improve the information gather from each account, these checks are out of the scope of the CIS benchmark for AWS, but we consider them very helpful to get to know each AWS account set up and find issues on it.&lt;/p&gt; &#xA;&lt;p&gt;Some of these checks look for publicly facing resources may not actually be fully public due to other layered controls like S3 Bucket Policies, Security Groups or Network ACLs.&lt;/p&gt; &#xA;&lt;p&gt;To list all existing checks in the extras group run the command below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -l -g extras&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;There are some checks not included in that list, they are experimental or checks that take long to run like &lt;code&gt;extra759&lt;/code&gt; and &lt;code&gt;extra760&lt;/code&gt; (search for secrets in Lambda function variables and code).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To check all extras in one command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -g extras&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or to run just one of the checks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -c extraNUMBER&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or to run multiple extras in one go:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -c extraNumber,extraNumber&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Forensics Ready Checks&lt;/h2&gt; &#xA;&lt;p&gt;With this group of checks, Prowler looks if each service with logging or audit capabilities has them enabled to ensure all needed evidences are recorded and collected for an eventual digital forensic investigation in case of incident. List of checks part of this group (you can also see all groups with &lt;code&gt;./prowler -L&lt;/code&gt;). The list of checks can be seen in the group file at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/groups/group8_forensics&#34;&gt;groups/group8_forensics&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;forensics-ready&lt;/code&gt; group of checks uses existing and extra checks. To get a forensics readiness report, run this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -g forensics-ready&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;GDPR Checks&lt;/h2&gt; &#xA;&lt;p&gt;With this group of checks, Prowler shows result of checks related to GDPR, more information &lt;a href=&#34;https://github.com/prowler-cloud/prowler/issues/189&#34;&gt;here&lt;/a&gt;. The list of checks can be seen in the group file at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/groups/group9_gdpr&#34;&gt;groups/group9_gdpr&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;gdpr&lt;/code&gt; group of checks uses existing and extra checks. To get a GDPR report, run this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -g gdpr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;AWS FTR Checks&lt;/h2&gt; &#xA;&lt;p&gt;With this group of checks, Prowler shows result of checks related to the AWS Foundational Technical Review, more information &lt;a href=&#34;https://apn-checklists.s3.amazonaws.com/foundational/partner-hosted/partner-hosted/CVLHEC5X7.html&#34;&gt;here&lt;/a&gt;. The list of checks can be seen in the group file at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/groups/group25_FTR&#34;&gt;groups/group25_ftr&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;ftr&lt;/code&gt; group of checks uses existing and extra checks. To get a AWS FTR report, run this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -g ftr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;HIPAA Checks&lt;/h2&gt; &#xA;&lt;p&gt;With this group of checks, Prowler shows results of controls related to the &#34;Security Rule&#34; of the Health Insurance Portability and Accountability Act aka &lt;a href=&#34;https://www.hhs.gov/hipaa/for-professionals/security/index.html&#34;&gt;HIPAA&lt;/a&gt; as defined in &lt;a href=&#34;https://www.law.cornell.edu/cfr/text/45/part-164/subpart-C&#34;&gt;45 CFR Subpart C - Security Standards for the Protection of Electronic Protected Health Information&lt;/a&gt; within &lt;a href=&#34;https://www.law.cornell.edu/cfr/text/45/part-160&#34;&gt;PART 160 - GENERAL ADMINISTRATIVE REQUIREMENTS&lt;/a&gt; and &lt;a href=&#34;https://www.law.cornell.edu/cfr/text/45/part-164/subpart-A&#34;&gt;Subpart A&lt;/a&gt; and &lt;a href=&#34;https://www.law.cornell.edu/cfr/text/45/part-164/subpart-C&#34;&gt;Subpart C&lt;/a&gt; of PART 164 - SECURITY AND PRIVACY&lt;/p&gt; &#xA;&lt;p&gt;More information on the original PR is &lt;a href=&#34;https://github.com/prowler-cloud/prowler/issues/227&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Note on Business Associate Addendum&#39;s (BAA)&lt;/h3&gt; &#xA;&lt;p&gt;Under the HIPAA regulations, cloud service providers (CSPs) such as AWS are considered business associates. The Business Associate Addendum (BAA) is an AWS contract that is required under HIPAA rules to ensure that AWS appropriately safeguards protected health information (PHI). The BAA also serves to clarify and limit, as appropriate, the permissible uses and disclosures of PHI by AWS, based on the relationship between AWS and our customers, and the activities or services being performed by AWS. Customers may use any AWS service in an account designated as a HIPAA account, but they should only process, store, and transmit protected health information (PHI) in the HIPAA-eligible services defined in the Business Associate Addendum (BAA). For the latest list of HIPAA-eligible AWS services, see &lt;a href=&#34;https://aws.amazon.com/compliance/hipaa-eligible-services-reference/&#34;&gt;HIPAA Eligible Services Reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;More information on AWS &amp;amp; HIPAA can be found &lt;a href=&#34;https://aws.amazon.com/compliance/hipaa-compliance/&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The list of checks showed by this group is as follows, they will be mostly relevant for Subsections &lt;a href=&#34;https://www.law.cornell.edu/cfr/text/45/164.306&#34;&gt;164.306 Security standards: General rules&lt;/a&gt; and &lt;a href=&#34;https://www.law.cornell.edu/cfr/text/45/164.312&#34;&gt;164.312 Technical safeguards&lt;/a&gt;. Prowler is only able to make checks in the spirit of the technical requirements outlined in these Subsections, and cannot cover all procedural controls required. They be found in the group file at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/groups/group10_hipaa&#34;&gt;groups/group10_hipaa&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;hipaa&lt;/code&gt; group of checks uses existing and extra checks. To get a HIPAA report, run this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -g hipaa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Trust Boundaries Checks&lt;/h2&gt; &#xA;&lt;h3&gt;Definition and Terms&lt;/h3&gt; &#xA;&lt;p&gt;The term &#34;trust boundary&#34; is originating from the threat modelling process and the most popular contributor Adam Shostack and author of &#34;Threat Modeling: Designing for Security&#34; defines it as following (&lt;a href=&#34;https://adam.shostack.org/uncover.html&#34;&gt;reference&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Trust boundaries are perhaps the most subjective of all: these represent the border between trusted and untrusted elements. Trust is complex. You might trust your mechanic with your car, your dentist with your teeth, and your banker with your money, but you probably don&#39;t trust your dentist to change your spark plugs.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;AWS is made to be flexible for service links within and between different AWS accounts, we all know that.&lt;/p&gt; &#xA;&lt;p&gt;This group of checks helps to analyse a particular AWS account (subject) on existing links to other AWS accounts across various AWS services, in order to identify untrusted links.&lt;/p&gt; &#xA;&lt;h3&gt;Run&lt;/h3&gt; &#xA;&lt;p&gt;To give it a quick shot just call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -g trustboundaries&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Scenarios&lt;/h3&gt; &#xA;&lt;p&gt;Currently, this check group supports two different scenarios:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Single account environment: no action required, the configuration is happening automatically for you.&lt;/li&gt; &#xA; &lt;li&gt;Multi account environment: in case you environment has multiple trusted and known AWS accounts you maybe want to append them manually to &lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/groups/group16_trustboundaries&#34;&gt;groups/group16_trustboundaries&lt;/a&gt; as a space separated list into &lt;code&gt;GROUP_TRUSTBOUNDARIES_TRUSTED_ACCOUNT_IDS&lt;/code&gt; variable, then just run prowler.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Coverage&lt;/h3&gt; &#xA;&lt;p&gt;Current coverage of Amazon Web Service (AWS) taken from &lt;a href=&#34;https://docs.aws.amazon.com/whitepapers/latest/aws-overview/introduction.html&#34;&gt;here&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Topic&lt;/th&gt; &#xA;   &lt;th&gt;Service&lt;/th&gt; &#xA;   &lt;th&gt;Trust Boundary&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Networking and Content Delivery&lt;/td&gt; &#xA;   &lt;td&gt;Amazon VPC&lt;/td&gt; &#xA;   &lt;td&gt;VPC endpoints connections (&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/checks/check_extra786&#34;&gt;extra786&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;VPC endpoints allowlisted principals (&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/checks/check_extra787&#34;&gt;extra787&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;All ideas or recommendations to extend this group are very welcome &lt;a href=&#34;https://github.com/prowler-cloud/prowler/issues/new/choose&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Detailed Explanation of the Concept&lt;/h3&gt; &#xA;&lt;p&gt;The diagrams depict two common scenarios, single account and multi account environments. Every circle represents one AWS account. The dashed line represents the trust boundary, that separates trust and untrusted AWS accounts. The arrow simply describes the direction of the trust, however the data can potentially flow in both directions.&lt;/p&gt; &#xA;&lt;p&gt;Single Account environment assumes that only the AWS account subject to this analysis is trusted. However, there is a chance that two VPCs are existing within that one AWS account which are still trusted as a self reference. &lt;img src=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/docs/images/prowler-single-account-environment.png&#34; alt=&#34;single-account-environment&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Multi Account environments assumes a minimum of two trusted or known accounts. For this particular example all trusted and known accounts will be tested. Therefore &lt;code&gt;GROUP_TRUSTBOUNDARIES_TRUSTED_ACCOUNT_IDS&lt;/code&gt; variable in &lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/groups/group16_trustboundaries&#34;&gt;groups/group16_trustboundaries&lt;/a&gt; should include all trusted accounts Account #A, Account #B, Account #C, and Account #D in order to finally raise Account #E and Account #F for being untrusted or unknown. &lt;img src=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/docs/images/prowler-multi-account-environment.png&#34; alt=&#34;multi-account-environment&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Custom Checks&lt;/h2&gt; &#xA;&lt;p&gt;Using &lt;code&gt;./prowler -c extra9999 -a&lt;/code&gt; you can build your own on-the-fly custom check by specifying the AWS CLI command to execute.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Omit the &#34;aws&#34; command and only use its parameters within quotes and do not nest quotes in the aws parameter, --output text is already included in the check.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Here is an example of a check to find SGs with inbound port 80:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -c extra9999 -a &#39;ec2 describe-security-groups --filters Name=ip-permission.to-port,Values=80 --query SecurityGroups[*].GroupId[]]&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to add any new check feel free to create a new extra check in the extras group or other group. To do so, you will need to follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Follow structure in file &lt;code&gt;checks/check_sample&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Name your check with a number part of an existing group or a new one&lt;/li&gt; &#xA; &lt;li&gt;Save changes and run it as &lt;code&gt;./prowler -c extraNN&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Send me a pull request! :)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Add Custom Groups&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Follow structure in file &lt;code&gt;groups/groupN_sample&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Name your group with a non existing number&lt;/li&gt; &#xA; &lt;li&gt;Save changes and run it as &lt;code&gt;./prowler -g extraNN&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Send me a pull request! :)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can also create a group with only the checks that you want to perform in your company, for instance a group named &lt;code&gt;group9_mycompany&lt;/code&gt; with only the list of checks that you care or your particular compliance applies.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Third Party Integrations&lt;/h2&gt; &#xA;&lt;h3&gt;Telegram&lt;/h3&gt; &#xA;&lt;p&gt;Javier Pecete has done an awesome job integrating Prowler with Telegram, you have more details here &lt;a href=&#34;https://github.com/i4specete/ServerTelegramBot&#34;&gt;https://github.com/i4specete/ServerTelegramBot&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Cloud Security Suite&lt;/h3&gt; &#xA;&lt;p&gt;The guys of SecurityFTW have added Prowler in their Cloud Security Suite along with other cool security tools &lt;a href=&#34;https://github.com/SecurityFTW/cs-suite&#34;&gt;https://github.com/SecurityFTW/cs-suite&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Prowler is licensed as Apache License 2.0 as specified in each file. You may obtain a copy of the License at &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;I&#39;m not related anyhow with CIS organization, I just write and maintain Prowler to help companies over the world to make their cloud infrastructure more secure.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to contact me visit &lt;a href=&#34;https://blyx.com/contact&#34;&gt;https://blyx.com/contact&lt;/a&gt; or follow me on Twitter &lt;a href=&#34;https://twitter.com/prowler-cloud&#34;&gt;https://twitter.com/prowler-cloud&lt;/a&gt; my DMs are open.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>home-assistant/operating-system</title>
    <updated>2022-07-31T02:24:33Z</updated>
    <id>tag:github.com,2022-07-31:/home-assistant/operating-system</id>
    <link href="https://github.com/home-assistant/operating-system" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üî∞ Home Assistant Operating System&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Home Assistant Operating System&lt;/h1&gt; &#xA;&lt;p&gt;Home Assistant Operating System (formerly HassOS) is a Linux based operating system optimized to host &lt;a href=&#34;https://www.home-assistant.io&#34;&gt;Home Assistant&lt;/a&gt; and its &lt;a href=&#34;https://www.home-assistant.io/addons/&#34;&gt;Add-ons&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Home Assistant Operating System uses Docker as Container engine. It by default deploys the Home Assistant Supervisor as a container. Home Assistant Supervisor in turn uses the Docker container engine to control Home Assistant Core and Add-Ons in separate containers. Home Assistant Operating System is &lt;strong&gt;not&lt;/strong&gt; based on a regular Linux distribution like Ubuntu. It is built using &lt;a href=&#34;https://buildroot.org/&#34;&gt;Buildroot&lt;/a&gt; and it is optimized to run Home Assistant. It targets single board compute (SBC) devices like the Raspberry Pi or ODROID but also supports x86-64 systems with UEFI.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lightweight and memory-efficient&lt;/li&gt; &#xA; &lt;li&gt;Minimized I/O&lt;/li&gt; &#xA; &lt;li&gt;Over The Air (OTA) updates&lt;/li&gt; &#xA; &lt;li&gt;Offline updates&lt;/li&gt; &#xA; &lt;li&gt;Modular using Docker container engine&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported hardware&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Raspberry Pi&lt;/li&gt; &#xA; &lt;li&gt;Hardkernel ODROID&lt;/li&gt; &#xA; &lt;li&gt;Asus Tinker Board&lt;/li&gt; &#xA; &lt;li&gt;Generic x86-64 (e.g. Intel NUC)&lt;/li&gt; &#xA; &lt;li&gt;Virtual appliances&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the full list and specific models &lt;a href=&#34;https://raw.githubusercontent.com/home-assistant/operating-system/dev/Documentation/boards/README.md&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;If you just want to use Home Assistant the official &lt;a href=&#34;https://www.home-assistant.io/getting-started/&#34;&gt;getting started guide&lt;/a&gt; and &lt;a href=&#34;https://www.home-assistant.io/hassio/installation/&#34;&gt;installation instructions&lt;/a&gt; take you through how to download Home Assistant Operating System and get it running on your machine.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re interested in finding out more about Home Assistant Operating System and how it works read on...&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;If you don&#39;t have experience with embedded systems, Buildroot or the build process for Linux distributions it is recommended to read up on these topics first (e.g. &lt;a href=&#34;https://bootlin.com/docs/&#34;&gt;Bootlin&lt;/a&gt; has excellent resources).&lt;/p&gt; &#xA;&lt;p&gt;The Home Assistant Operating System documentation can be found on the &lt;a href=&#34;https://developers.home-assistant.io/docs/operating-system&#34;&gt;Home Assistant Developer Docs website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Components&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bootloader:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://barebox.org/&#34;&gt;Barebox&lt;/a&gt; for devices that support UEFI&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.denx.de/wiki/U-Boot&#34;&gt;U-Boot&lt;/a&gt; for devices that don&#39;t support UEFI&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Operating System:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://buildroot.org/&#34;&gt;Buildroot&lt;/a&gt; LTS Linux&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;File Systems:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.kernel.org/doc/Documentation/filesystems/squashfs.txt&#34;&gt;SquashFS&lt;/a&gt; for read-only file systems (using LZ4 compression)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.kernel.org/doc/Documentation/blockdev/zram.txt&#34;&gt;ZRAM&lt;/a&gt; for &lt;code&gt;/tmp&lt;/code&gt;, &lt;code&gt;/var&lt;/code&gt; and swap (using LZ4 compression)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Container Platform:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/&#34;&gt;Docker Engine&lt;/a&gt; for running Home Assistant components in containers&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Updates:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://rauc.io/&#34;&gt;RAUC&lt;/a&gt; for Over The Air (OTA) and USB updates&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Security:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://apparmor.net/&#34;&gt;AppArmor&lt;/a&gt; Linux kernel security module&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Development builds&lt;/h3&gt; &#xA;&lt;p&gt;The Development build GitHub Action Workflow is a manually triggered workflow which creates Home Assistant OS development builds. The development builds are available at &lt;a href=&#34;https://os-builds.home-assistant.io/&#34;&gt;os-builds.home-assistant.io&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>