<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-08T01:47:17Z</updated>
  <subtitle>Weekly Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>QwenLM/Qwen2</title>
    <updated>2024-09-08T01:47:17Z</updated>
    <id>tag:github.com,2024-09-08:/QwenLM/Qwen2</id>
    <link href="https://github.com/QwenLM/Qwen2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Qwen2 is the large language model series developed by Qwen team, Alibaba Cloud.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Qwen2&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://qianwen-res.oss-accelerate-overseas.aliyuncs.com/logo_qwen2.png&#34; width=&#34;400&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; ü§ó &lt;a href=&#34;https://huggingface.co/Qwen&#34;&gt;Hugging Face&lt;/a&gt;&amp;nbsp;&amp;nbsp; | &amp;nbsp;&amp;nbsp;ü§ñ &lt;a href=&#34;https://modelscope.cn/organization/qwen&#34;&gt;ModelScope&lt;/a&gt;&amp;nbsp;&amp;nbsp; | &amp;nbsp;&amp;nbsp; üìë &lt;a href=&#34;https://arxiv.org/abs/2407.10671&#34;&gt;Paper&lt;/a&gt; &amp;nbsp;&amp;nbsp; | &amp;nbsp;&amp;nbsp; üìë &lt;a href=&#34;https://qwenlm.github.io/blog/qwen2/&#34;&gt;Blog&lt;/a&gt; &amp;nbsp;&amp;nbsp; ÔΩú &amp;nbsp;&amp;nbsp;üìñ &lt;a href=&#34;https://qwen.readthedocs.io/&#34;&gt;Documentation&lt;/a&gt; &lt;br&gt; üñ•Ô∏è &lt;a href=&#34;https://huggingface.co/spaces/Qwen/Qwen2-72B-Instruct&#34;&gt;Demo&lt;/a&gt;&amp;nbsp;&amp;nbsp; | &amp;nbsp;&amp;nbsp;üí¨ &lt;a href=&#34;https://github.com/QwenLM/Qwen/raw/main/assets/wechat.png&#34;&gt;WeChat (ÂæÆ‰ø°)&lt;/a&gt;&amp;nbsp;&amp;nbsp; | &amp;nbsp;&amp;nbsp;ü´® &lt;a href=&#34;https://discord.gg/CV4E9rpNSD&#34;&gt;Discord&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;/p&gt; &#xA;&lt;p&gt;Visit our Hugging Face or ModelScope organization (click links above), search checkpoints with names starting with &lt;code&gt;Qwen2-&lt;/code&gt; or visit the &lt;a href=&#34;https://huggingface.co/collections/Qwen/qwen2-6659360b33528ced941e557f&#34;&gt;Qwen2 collection&lt;/a&gt;, and you will find all you need! Enjoy!&lt;/p&gt; &#xA;&lt;p&gt;To learn more about Qwen2, feel free to read our documentation [&lt;a href=&#34;https://qwen.readthedocs.io/en/latest/&#34;&gt;EN&lt;/a&gt;|&lt;a href=&#34;https://qwen.readthedocs.io/zh-cn/latest/&#34;&gt;ZH&lt;/a&gt;]. Our documentation consists of the following sections:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Quickstart: the basic usages and demonstrations;&lt;/li&gt; &#xA; &lt;li&gt;Inference: the guidance for the inference with transformers, including batch inference, streaming, etc.;&lt;/li&gt; &#xA; &lt;li&gt;Run Locally: the instructions for running LLM locally on CPU and GPU, with frameworks like &lt;code&gt;llama.cpp&lt;/code&gt; and &lt;code&gt;Ollama&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;Deployment: the demonstration of how to deploy Qwen for large-scale inference with frameworks like &lt;code&gt;vLLM&lt;/code&gt;, &lt;code&gt;TGI&lt;/code&gt;, etc.;&lt;/li&gt; &#xA; &lt;li&gt;Quantization: the practice of quantizing LLMs with GPTQ, AWQ, as well as the guidance for how to make high-quality quantized GGUF files;&lt;/li&gt; &#xA; &lt;li&gt;Training: the instructions for post-training, including SFT and RLHF (TODO) with frameworks like Axolotl, LLaMA-Factory, etc.&lt;/li&gt; &#xA; &lt;li&gt;Framework: the usage of Qwen with frameworks for application, e.g., RAG, Agent, etc.&lt;/li&gt; &#xA; &lt;li&gt;Benchmark: the statistics about inference speed and memory footprint.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;After months of efforts, we are pleased to announce the evolution from Qwen1.5 to Qwen2. This time, we bring to you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pretrained and instruction-tuned models of 5 sizes, including Qwen2-0.5B, Qwen2-1.5B, Qwen2-7B, Qwen2-57B-A14B, and &lt;strong&gt;Qwen2-72B&lt;/strong&gt;;&lt;/li&gt; &#xA; &lt;li&gt;Having been trained on data in &lt;strong&gt;27&lt;/strong&gt; additional languages besides English and Chinese;&lt;/li&gt; &#xA; &lt;li&gt;State-of-the-art performance in a large number of benchmark evaluations;&lt;/li&gt; &#xA; &lt;li&gt;Significantly improved performance in coding and mathematics;&lt;/li&gt; &#xA; &lt;li&gt;Extended context length support up to &lt;strong&gt;128K&lt;/strong&gt; tokens with Qwen2-7B-Instruct and Qwen2-72B-Instruct.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2024.06.06: We released the Qwen2 series. Check our &lt;a href=&#34;https://qwenlm.github.io/blog/qwen2/&#34;&gt;blog&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;2024.03.28: We released the first MoE model of Qwen: Qwen1.5-MoE-A2.7B! Temporarily, only HF transformers and vLLM support the model. We will soon add the support of llama.cpp, mlx-lm, etc. Check our &lt;a href=&#34;https://qwenlm.github.io/blog/qwen-moe/&#34;&gt;blog&lt;/a&gt; for more information!&lt;/li&gt; &#xA; &lt;li&gt;2024.02.05: We released the Qwen1.5 series.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;Detailed evaluation results are reported in this &lt;a href=&#34;https://qwenlm.github.io/blog/qwen2/&#34;&gt; üìë blog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;transformers&amp;gt;=4.40.0&lt;/code&gt; for Qwen2 dense and MoE models. The latest version is recommended.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!Warning]&lt;/p&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;b&gt; üö® This is a must because `transformers` integrated Qwen2 codes since `4.37.0` and Qwen2Moe code since `4.40.0`. &lt;/b&gt; &#xA; &lt;/div&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For requirements on GPU memory and the respective throughput, see results &lt;a href=&#34;https://qwen.readthedocs.io/en/latest/benchmark/speed_benchmark.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;h3&gt;ü§ó Hugging Face Transformers&lt;/h3&gt; &#xA;&lt;p&gt;Here we show a code snippet to show you how to use the chat model with &lt;code&gt;transformers&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from transformers import AutoModelForCausalLM, AutoTokenizer&#xA;&#xA;model_name = &#34;Qwen/Qwen2-7B-Instruct&#34;&#xA;device = &#34;cuda&#34; # the device to load the model onto&#xA;&#xA;model = AutoModelForCausalLM.from_pretrained(&#xA;    model_name,&#xA;    torch_dtype=&#34;auto&#34;,&#xA;    device_map=&#34;auto&#34;&#xA;)&#xA;tokenizer = AutoTokenizer.from_pretrained(model_name)&#xA;&#xA;prompt = &#34;Give me a short introduction to large language model.&#34;&#xA;messages = [&#xA;    {&#34;role&#34;: &#34;system&#34;, &#34;content&#34;: &#34;You are a helpful assistant.&#34;},&#xA;    {&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: prompt}&#xA;]&#xA;text = tokenizer.apply_chat_template(&#xA;    messages,&#xA;    tokenize=False,&#xA;    add_generation_prompt=True&#xA;)&#xA;model_inputs = tokenizer([text], return_tensors=&#34;pt&#34;).to(device)&#xA;&#xA;generated_ids = model.generate(&#xA;    **model_inputs,&#xA;    max_new_tokens=512&#xA;)&#xA;generated_ids = [&#xA;    output_ids[len(input_ids):] for input_ids, output_ids in zip(model_inputs.input_ids, generated_ids)&#xA;]&#xA;&#xA;response = tokenizer.batch_decode(generated_ids, skip_special_tokens=True)[0]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For quantized models, we advise you to use the GPTQ and AWQ correspondents, namely &lt;code&gt;Qwen2-7B-Instruct-GPTQ-Int8&lt;/code&gt;, &lt;code&gt;Qwen2-7B-Instruct-AWQ&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;ü§ñ ModelScope&lt;/h3&gt; &#xA;&lt;p&gt;We strongly advise users especially those in mainland China to use ModelScope. &lt;code&gt;snapshot_download&lt;/code&gt; can help you solve issues concerning downloading checkpoints.&lt;/p&gt; &#xA;&lt;h3&gt;üíª Run locally&lt;/h3&gt; &#xA;&lt;h4&gt;Ollama&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!Warning] You need &lt;code&gt;ollama&amp;gt;=0.1.42&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;div align=&#34;center&#34;&gt;&#xA;   Ollama provides an &#xA;  &lt;a href=&#34;https://github.com/ollama/ollama/raw/main/docs/openai.md&#34;&gt;OpenAI-compatible API&lt;/a&gt;, which however does NOT support &#xA;  &lt;b&gt;function calling&lt;/b&gt;. For tool use capabilities, consider using &#xA;  &lt;a href=&#34;https://github.com/QwenLM/Qwen-Agent&#34;&gt;Qwen-Agent&lt;/a&gt;, which offers a wrapper for function calling over the API. &#xA; &lt;/div&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;After &lt;a href=&#34;https://github.com/ollama/ollama/raw/main/README.md&#34;&gt;installing ollama&lt;/a&gt;, you can initiate the ollama service with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ollama serve&#xA;# You need to keep this service running whenever you are using ollama&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To pull a model checkpoint and run the model, use the &lt;code&gt;ollama run&lt;/code&gt; command. You can specify a model size by adding a suffix to &lt;code&gt;qwen2&lt;/code&gt;, such as &lt;code&gt;:0.5b&lt;/code&gt;, &lt;code&gt;:1.5b&lt;/code&gt;, &lt;code&gt;:7b&lt;/code&gt;, or &lt;code&gt;:72b&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ollama run qwen2:7b&#xA;# To exit, type &#34;/bye&#34; and press ENTER&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also access the ollama service via its OpenAI-compatible API. Please note that you need to (1) keep &lt;code&gt;ollama serve&lt;/code&gt; running while using the API, and (2) execute &lt;code&gt;ollama run qwen2:7b&lt;/code&gt; before utilizing this API to ensure that the model checkpoint is prepared.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from openai import OpenAI&#xA;client = OpenAI(&#xA;    base_url=&#39;http://localhost:11434/v1/&#39;,&#xA;    api_key=&#39;ollama&#39;,  # required but ignored&#xA;)&#xA;chat_completion = client.chat.completions.create(&#xA;    messages=[&#xA;        {&#xA;            &#39;role&#39;: &#39;user&#39;,&#xA;            &#39;content&#39;: &#39;Say this is a test&#39;,&#xA;        }&#xA;    ],&#xA;    model=&#39;qwen2:7b&#39;,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For additional details, please visit &lt;a href=&#34;https://ollama.ai/&#34;&gt;ollama.ai&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;llama.cpp&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!Warning] You need &lt;code&gt;llama.cpp&amp;gt;=b3370&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Download our provided GGUF files or create them by yourself, and you can directly use them with the latest &lt;a href=&#34;https://github.com/ggerganov/llama.cpp&#34;&gt;&lt;code&gt;llama.cpp&lt;/code&gt;&lt;/a&gt; with a one-line command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./llama-cli -m &amp;lt;path-to-file&amp;gt; -n 512 -co -sp -cnv -f prompts/chat-with-qwen.txt &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For additional guides, please refer to &lt;a href=&#34;https://qwen.readthedocs.io/en/latest/run_locally/llama.cpp.html&#34;&gt;our documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;MLX-LM&lt;/h4&gt; &#xA;&lt;p&gt;If you are running on Apple Silicon, we have also provided checkpoints compatible with &lt;a href=&#34;https://github.com/ml-explore/mlx-examples/raw/main/llms/README.md&#34;&gt;&lt;code&gt;mlx-lm&lt;/code&gt;&lt;/a&gt;. Look for models ending with MLX on HuggingFace Hub, like &lt;a href=&#34;https://huggingface.co/Qwen/Qwen2-7B-Instruct-MLX&#34;&gt;Qwen2-7B-Instruct-MLX&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;LMStudio&lt;/h4&gt; &#xA;&lt;p&gt;Qwen2 has already been supported by &lt;a href=&#34;https://lmstudio.ai/&#34;&gt;lmstudio.ai&lt;/a&gt;. You can directly use LMStudio with our GGUF files.&lt;/p&gt; &#xA;&lt;h4&gt;OpenVINO&lt;/h4&gt; &#xA;&lt;p&gt;Qwen2 has already been supported by &lt;a href=&#34;https://github.com/openvinotoolkit&#34;&gt;OpenVINO toolkit&lt;/a&gt;. You can install and run this &lt;a href=&#34;https://github.com/OpenVINO-dev-contest/Qwen2.openvino&#34;&gt;chatbot example&lt;/a&gt; with Intel CPU, integrated GPU or discrete GPU.&lt;/p&gt; &#xA;&lt;h2&gt;Web UI&lt;/h2&gt; &#xA;&lt;h4&gt;Text generation web UI&lt;/h4&gt; &#xA;&lt;p&gt;You can directly use &lt;a href=&#34;https://github.com/oobabooga/text-generation-webui&#34;&gt;&lt;code&gt;text-generation-webui&lt;/code&gt;&lt;/a&gt; for creating a web UI demo. If you use GGUF, remember to install the latest wheel of &lt;code&gt;llama.cpp&lt;/code&gt; with the support of Qwen2.&lt;/p&gt; &#xA;&lt;h4&gt;llamafile&lt;/h4&gt; &#xA;&lt;p&gt;Clone &lt;a href=&#34;https://github.com/Mozilla-Ocho/llamafile&#34;&gt;&lt;code&gt;llamafile&lt;/code&gt;&lt;/a&gt;, run source install, and then create your own llamafile with the GGUF file following the guide &lt;a href=&#34;https://github.com/Mozilla-Ocho/llamafile?tab=readme-ov-file#creating-llamafiles&#34;&gt;here&lt;/a&gt;. You are able to run one line of command, say &lt;code&gt;./qwen.llamafile&lt;/code&gt;, to create a demo.&lt;/p&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;p&gt;Qwen2 is supported by multiple inference frameworks. Here we demonstrate the usage of &lt;code&gt;vLLM&lt;/code&gt; and &lt;code&gt;SGLang&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!Warning]&lt;/p&gt; &#xA; &lt;div align=&#34;center&#34;&gt;&#xA;   The OpenAI-compatible APIs provided by vLLM and SGLang currently do NOT support &#xA;  &lt;b&gt;function calling&lt;/b&gt;. For tool use capabilities, &#xA;  &lt;a href=&#34;https://github.com/QwenLM/Qwen-Agent&#34;&gt;Qwen-Agent&lt;/a&gt; provides a wrapper around these APIs to support function calling. &#xA; &lt;/div&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;vLLM&lt;/h3&gt; &#xA;&lt;p&gt;We advise you to use &lt;code&gt;vLLM&amp;gt;=0.4.0&lt;/code&gt; to build OpenAI-compatible API service. Start the server with a chat model, e.g. &lt;code&gt;Qwen2-7B-Instruct&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python -m vllm.entrypoints.openai.api_server --served-model-name Qwen2-7B-Instruct --model Qwen/Qwen2-7B-Instruct &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then use the chat API as demonstrated below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl http://localhost:8000/v1/chat/completions \&#xA;    -H &#34;Content-Type: application/json&#34; \&#xA;    -d &#39;{&#xA;    &#34;model&#34;: &#34;Qwen2-7B-Instruct&#34;,&#xA;    &#34;messages&#34;: [&#xA;    {&#34;role&#34;: &#34;system&#34;, &#34;content&#34;: &#34;You are a helpful assistant.&#34;},&#xA;    {&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;Tell me something about large language models.&#34;}&#xA;    ]&#xA;    }&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from openai import OpenAI&#xA;# Set OpenAI&#39;s API key and API base to use vLLM&#39;s API server.&#xA;openai_api_key = &#34;EMPTY&#34;&#xA;openai_api_base = &#34;http://localhost:8000/v1&#34;&#xA;&#xA;client = OpenAI(&#xA;    api_key=openai_api_key,&#xA;    base_url=openai_api_base,&#xA;)&#xA;&#xA;chat_response = client.chat.completions.create(&#xA;    model=&#34;Qwen2-7B-Instruct&#34;,&#xA;    messages=[&#xA;        {&#34;role&#34;: &#34;system&#34;, &#34;content&#34;: &#34;You are a helpful assistant.&#34;},&#xA;        {&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;Tell me something about large language models.&#34;},&#xA;    ]&#xA;)&#xA;print(&#34;Chat response:&#34;, chat_response)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SGLang&lt;/h3&gt; &#xA;&lt;p&gt;Please install &lt;code&gt;SGLang&lt;/code&gt; from source. Similar to &lt;code&gt;vLLM&lt;/code&gt;, you need to launch a server and use OpenAI-compatible API service. Start the server first:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python -m sglang.launch_server --model-path Qwen/Qwen2-7B-Instruct --port 30000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use it in Python as shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sglang import function, system, user, assistant, gen, set_default_backend, RuntimeEndpoint&#xA;&#xA;@function&#xA;def multi_turn_question(s, question_1, question_2):&#xA;    s += system(&#34;You are a helpful assistant.&#34;)&#xA;    s += user(question_1)&#xA;    s += assistant(gen(&#34;answer_1&#34;, max_tokens=256))&#xA;    s += user(question_2)&#xA;    s += assistant(gen(&#34;answer_2&#34;, max_tokens=256))&#xA;&#xA;set_default_backend(RuntimeEndpoint(&#34;http://localhost:30000&#34;))&#xA;&#xA;state = multi_turn_question.run(&#xA;    question_1=&#34;What is the capital of China?&#34;,&#xA;    question_2=&#34;List two local attractions.&#34;,&#xA;)&#xA;&#xA;for m in state.messages():&#xA;    print(m[&#34;role&#34;], &#34;:&#34;, m[&#34;content&#34;])&#xA;&#xA;print(state[&#34;answer_1&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Finetuning&lt;/h2&gt; &#xA;&lt;p&gt;We advise you to use training frameworks, including &lt;a href=&#34;https://github.com/OpenAccess-AI-Collective/axolotl&#34;&gt;Axolotl&lt;/a&gt;, &lt;a href=&#34;https://github.com/hiyouga/LLaMA-Factory&#34;&gt;Llama-Factory&lt;/a&gt;, &lt;a href=&#34;https://github.com/modelscope/swift&#34;&gt;Swift&lt;/a&gt;, etc., to finetune your models with SFT, DPO, PPO, etc.&lt;/p&gt; &#xA;&lt;h2&gt;üê≥ Docker&lt;/h2&gt; &#xA;&lt;p&gt;To simplify the deployment process, we provide docker images with pre-built environments: &lt;a href=&#34;https://hub.docker.com/r/qwenllm/qwen&#34;&gt;qwenllm/qwen&lt;/a&gt;. You only need to install the driver and download model files to launch demos and finetune the model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --gpus all --ipc=host --network=host --rm --name qwen2 -it qwenllm/qwen:2-cu121 bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License Agreement&lt;/h2&gt; &#xA;&lt;p&gt;Check the license of each model inside its HF repo. It is NOT necessary for you to submit a request for commercial usage.&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you find our work helpful, feel free to give us a cite.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{qwen2,&#xA;      title={Qwen2 Technical Report}, &#xA;      author={An Yang and Baosong Yang and Binyuan Hui and Bo Zheng and Bowen Yu and Chang Zhou and Chengpeng Li and Chengyuan Li and Dayiheng Liu and Fei Huang and Guanting Dong and Haoran Wei and Huan Lin and Jialong Tang and Jialin Wang and Jian Yang and Jianhong Tu and Jianwei Zhang and Jianxin Ma and Jin Xu and Jingren Zhou and Jinze Bai and Jinzheng He and Junyang Lin and Kai Dang and Keming Lu and Keqin Chen and Kexin Yang and Mei Li and Mingfeng Xue and Na Ni and Pei Zhang and Peng Wang and Ru Peng and Rui Men and Ruize Gao and Runji Lin and Shijie Wang and Shuai Bai and Sinan Tan and Tianhang Zhu and Tianhao Li and Tianyu Liu and Wenbin Ge and Xiaodong Deng and Xiaohuan Zhou and Xingzhang Ren and Xinyu Zhang and Xipin Wei and Xuancheng Ren and Yang Fan and Yang Yao and Yichang Zhang and Yu Wan and Yunfei Chu and Yuqiong Liu and Zeyu Cui and Zhenru Zhang and Zhihao Fan},&#xA;      journal={arXiv preprint arXiv:2407.10671},&#xA;      year={2024}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contact Us&lt;/h2&gt; &#xA;&lt;p&gt;If you are interested to leave a message to either our research team or product team, join our &lt;a href=&#34;https://discord.gg/z3GAxXZ9Ce&#34;&gt;Discord&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/QwenLM/Qwen2/main/assets/wechat.png&#34;&gt;WeChat groups&lt;/a&gt;!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>basecamp/omakub</title>
    <updated>2024-09-08T01:47:17Z</updated>
    <id>tag:github.com,2024-09-08:/basecamp/omakub</id>
    <link href="https://github.com/basecamp/omakub" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Opinionated Ubuntu Setup&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Omakub&lt;/h1&gt; &#xA;&lt;p&gt;Turn a fresh Ubuntu installation into a fully-configured, beautiful, and modern web development system by running a single command. That&#39;s the one-line pitch for Omakub. No need to write bespoke configs for every essential tool just to get started or to be up on all the latest command-line tools. Omakub is an opinionated take on what Linux can be at its best.&lt;/p&gt; &#xA;&lt;p&gt;Watch the introduction video and read more at &lt;a href=&#34;https://omakub.org&#34;&gt;omakub.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to the documentation&lt;/h2&gt; &#xA;&lt;p&gt;Please help us improve Omakub&#39;s documentation on the &lt;a href=&#34;https://github.com/basecamp/omakub-site&#34;&gt;basecamp/omakub-site repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Omakub is released under the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Extras&lt;/h2&gt; &#xA;&lt;p&gt;While omakub is purposed to be an opiniated take, the open source community offers alternative customization, add-ons, extras, that you can use to adjust, replace or enrich your experience.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/basecamp/omakub/master/EXTENSIONS.md&#34;&gt;‚áí Browse the omakub extensions.&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>winapps-org/winapps</title>
    <updated>2024-09-08T01:47:17Z</updated>
    <id>tag:github.com,2024-09-08:/winapps-org/winapps</id>
    <link href="https://github.com/winapps-org/winapps" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The winapps main project, forked from https://github.com/Fmstrat/winapps/&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img align=&#34;center&#34; width=&#34;700&#34; src=&#34;https://raw.githubusercontent.com/winapps-org/winapps/main/icons/banner_dark.svg#gh-dark-mode-only&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img align=&#34;center&#34; width=&#34;700&#34; src=&#34;https://raw.githubusercontent.com/winapps-org/winapps/main/icons/banner_dark.svg#gh-light-mode-only&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Run Windows applications (including &lt;a href=&#34;https://www.microsoft365.com/&#34;&gt;Microsoft 365&lt;/a&gt; and &lt;a href=&#34;https://www.adobe.com/creativecloud.html&#34;&gt;Adobe Creative Cloud&lt;/a&gt;) on GNU/Linux with &lt;code&gt;KDE Plasma&lt;/code&gt;, &lt;code&gt;GNOME&lt;/code&gt; or &lt;code&gt;XFCE&lt;/code&gt;, integrated seamlessly as if they were native to the OS.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/winapps-org/winapps/main/demo/demo.png&#34; width=&#34;1000&#34; alt=&#34;WinApps Demonstration.&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Underlying Mechanism&lt;/h2&gt; &#xA;&lt;p&gt;WinApps works by:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Running Windows in a &lt;code&gt;Docker&lt;/code&gt;, &lt;code&gt;Podman&lt;/code&gt; or &lt;code&gt;libvirt&lt;/code&gt; virtual machine.&lt;/li&gt; &#xA; &lt;li&gt;Querying Windows for all installed applications.&lt;/li&gt; &#xA; &lt;li&gt;Creating shortcuts to selected Windows applications on the host GNU/Linux OS.&lt;/li&gt; &#xA; &lt;li&gt;Using &lt;a href=&#34;https://www.freerdp.com/&#34;&gt;&lt;code&gt;FreeRDP&lt;/code&gt;&lt;/a&gt; as a backend to seamlessly render Windows applications alongside GNU/Linux applications.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Additional Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The GNU/Linux &lt;code&gt;/home&lt;/code&gt; directory is accessible within Windows via the &lt;code&gt;\\tsclient\home&lt;/code&gt; mount.&lt;/li&gt; &#xA; &lt;li&gt;Integration with &lt;code&gt;Nautilus&lt;/code&gt;, allowing you to right-click files to open them with specific Windows applications based on the file MIME type.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/winapps-org/WinApps-Launcher&#34;&gt;official taskbar widget&lt;/a&gt; enables seamless administration of the Windows subsystem and offers an easy way to launch Windows applications.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Applications&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;WinApps supports &lt;u&gt;&lt;em&gt;ALL&lt;/em&gt;&lt;/u&gt; Windows applications.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Universal application support is achieved by:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Scanning Windows for any officially supported applications (list below).&lt;/li&gt; &#xA; &lt;li&gt;Scanning Windows for any other &lt;code&gt;.exe&lt;/code&gt; files listed within the Windows Registry.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Officially supported applications benefit from high-resolution icons and pre-populated MIME types. This enables file managers to determine which Windows applications should open files based on file extensions. Icons for other detected applications are pulled from &lt;code&gt;.exe&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;p&gt;Contributing to the list of supported applications is encouraged through submission of pull requests! Please help us grow the WinApps community.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please note that the provided list of officially supported applications is community-driven. As such, some applications may not be tested and verified by the WinApps team.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Officially Supported Applications&lt;/h3&gt; &#xA;&lt;table cellpadding=&#34;10&#34; cellspacing=&#34;0&#34; border=&#34;0&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;!-- Adobe Acrobat Pro --&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/winapps-org/winapps/main/apps/acrobat-x-pro/icon.svg?sanitize=true&#34; width=&#34;100&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;b&gt;Adobe Acrobat Pro&lt;/b&gt;&lt;br&gt; (X)&lt;br&gt; &lt;i&gt;&lt;a href=&#34;https://commons.wikimedia.org/wiki/File:Adobe_Acrobat_DC_logo_2020.svg&#34;&gt;Icon&lt;/a&gt; in the Public Domain.&lt;/i&gt; &lt;/td&gt; &#xA;   &lt;!-- Adobe After Effects --&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/winapps-org/winapps/main/apps/aftereffects-cc/icon.svg?sanitize=true&#34; width=&#34;100&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;b&gt;Adobe After Effects&lt;/b&gt;&lt;br&gt; (CC)&lt;br&gt; &lt;i&gt;&lt;a href=&#34;https://commons.wikimedia.org/wiki/File:Adobe_After_Effects_CC_icon.svg&#34;&gt;Icon&lt;/a&gt; in the Public Domain.&lt;/i&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;!-- Adobe Audition --&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/winapps-org/winapps/main/apps/audition-cc/icon.svg?sanitize=true&#34; width=&#34;100&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;b&gt;Adobe Audition&lt;/b&gt;&lt;br&gt; (CC)&lt;br&gt; &lt;i&gt;&lt;a href=&#34;https://en.m.wikipedia.org/wiki/File:Adobe_Audition_CC_icon_%282020%29.svg&#34;&gt;Icon&lt;/a&gt; in the Public Domain.&lt;/i&gt; &lt;/td&gt; &#xA;   &lt;!-- Adobe Bridge --&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/winapps-org/winapps/main/apps/bridge-cs6/icon.svg?sanitize=true&#34; width=&#34;100&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;b&gt;Adobe Bridge&lt;/b&gt;&lt;br&gt; (CS6, CC)&lt;br&gt; &lt;i&gt;&lt;a href=&#34;https://en.m.wikipedia.org/wiki/File:Adobe_Bridge_CC_icon.svg&#34;&gt;Icon&lt;/a&gt; in the Public Domain.&lt;/i&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;!-- Adobe Creative Cloud --&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/winapps-org/winapps/main/apps/adobe-cc/icon.svg?sanitize=true&#34; width=&#34;100&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;b&gt;Adobe Creative Cloud&lt;/b&gt;&lt;br&gt; (CC)&lt;br&gt; &lt;i&gt;&lt;a href=&#34;https://iconduck.com/icons/240218/adobe-creative-cloud&#34;&gt;Icon&lt;/a&gt; under &lt;a href=&#34;https://iconduck.com/licenses/mit&#34;&gt;MIT license&lt;/a&gt;.&lt;/i&gt; &lt;/td&gt; &#xA;   &lt;!-- Adobe Illustrator --&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/winapps-org/winapps/main/apps/illustrator-cc/icon.svg?sanitize=true&#34; width=&#34;100&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;b&gt;Adobe Illustrator&lt;/b&gt;&lt;br&gt; (CC)&lt;br&gt; &lt;i&gt;&lt;a href=&#34;https://commons.wikimedia.org/wiki/File:Adobe_Illustrator_CC_icon.svg&#34;&gt;Icon&lt;/a&gt; in the Public Domain.&lt;/i&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;!-- Adobe InDesign --&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/winapps-org/winapps/main/apps/indesign-cc/icon.svg?sanitize=true&#34; width=&#34;100&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;b&gt;Adobe InDesign&lt;/b&gt;&lt;br&gt; (CC)&lt;br&gt; &lt;i&gt;&lt;a href=&#34;https://commons.wikimedia.org/wiki/File:Adobe_InDesign_CC_icon.svg&#34;&gt;Icon&lt;/a&gt; in the Public Domain.&lt;/i&gt; &lt;/td&gt; &#xA;   &lt;!-- Adobe Lightroom --&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/winapps-org/winapps/main/apps/lightroom-cc/icon.svg?sanitize=true&#34; width=&#34;100&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;b&gt;Adobe Lightroom&lt;/b&gt;&lt;br&gt; (CC)&lt;br&gt; &lt;i&gt;&lt;a href=&#34;https://commons.wikimedia.org/wiki/File:Adobe_Photoshop_Lightroom_CC_logo.svg&#34;&gt;Icon&lt;/a&gt; in the Public Domain.&lt;/i&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;!-- Adobe Photoshop --&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/winapps-org/winapps/main/apps/photoshop-cc/icon.svg?sanitize=true&#34; width=&#34;100&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;b&gt;Adobe Photoshop&lt;/b&gt;&lt;br&gt; (CS6, CC)&lt;br&gt; &lt;i&gt;&lt;a href=&#34;https://commons.wikimedia.org/wiki/File:Adobe_Photoshop_CC_icon.svg&#34;&gt;Icon&lt;/a&gt; in the Public Domain.&lt;/i&gt; &lt;/td&gt; &#xA;   &lt;!-- Command Prompt --&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/winapps-org/winapps/main/apps/cmd/icon.svg?sanitize=true&#34; width=&#34;100&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;b&gt;Command Prompt&lt;/b&gt;&lt;br&gt; (cmd.exe)&lt;br&gt; &lt;i&gt;&lt;a href=&#34;https://github.com/microsoft/terminal/raw/main/res/terminal/Terminal.svg&#34;&gt;Icon&lt;/a&gt; under &lt;a href=&#34;https://github.com/microsoft/terminal/raw/main/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/i&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;!-- File Explorer --&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/winapps-org/winapps/main/apps/explorer/icon.svg?sanitize=true&#34; width=&#34;100&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;b&gt;File Explorer&lt;/b&gt;&lt;br&gt; (Windows Explorer)&lt;br&gt; &lt;i&gt;&lt;a href=&#34;https://commons.wikimedia.org/wiki/File:Windows_Explorer.svg&#34;&gt;Icon&lt;/a&gt; in the Public Domain.&lt;/i&gt; &lt;/td&gt; &#xA;   &lt;!-- Internet Explorer --&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/winapps-org/winapps/main/apps/iexplorer/icon.svg?sanitize=true&#34; width=&#34;100&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;b&gt;Internet Explorer&lt;/b&gt;&lt;br&gt; (11)&lt;br&gt; &lt;i&gt;&lt;a href=&#34;https://commons.wikimedia.org/wiki/File:Internet_Explorer_10%2B11_logo.svg&#34;&gt;Icon&lt;/a&gt; in the Public Domain.&lt;/i&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;!-- Microsoft Access --&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/winapps-org/winapps/main/apps/access/icon.svg?sanitize=true&#34; width=&#34;100&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;b&gt;Microsoft Access&lt;/b&gt;&lt;br&gt; (2016, 2019, o365)&lt;br&gt; &lt;i&gt;&lt;a href=&#34;https://commons.wikimedia.org/wiki/File:Microsoft_Office_Access_(2019-present).svg&#34;&gt;Icon&lt;/a&gt; in the Public Domain.&lt;/i&gt; &lt;/td&gt; &#xA;   &lt;!-- Microsoft Excel --&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/winapps-org/winapps/main/apps/excel/icon.svg?sanitize=true&#34; width=&#34;100&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;b&gt;Microsoft Excel&lt;/b&gt;&lt;br&gt; (2016, 2019, o365)&lt;br&gt; &lt;i&gt;&lt;a href=&#34;https://en.m.wikipedia.org/wiki/File:Microsoft_Office_Excel_(2019%E2%80%93present).svg&#34;&gt;Icon&lt;/a&gt; in the Public Domain.&lt;/i&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;!-- Microsoft Word --&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/winapps-org/winapps/main/apps/word/icon.svg?sanitize=true&#34; width=&#34;100&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;b&gt;Microsoft Word&lt;/b&gt;&lt;br&gt; (2016, 2019, o365)&lt;br&gt; &lt;i&gt;&lt;a href=&#34;https://en.m.wikipedia.org/wiki/File:Microsoft_Office_Word_(2019%E2%80%93present).svg&#34;&gt;Icon&lt;/a&gt; in the Public Domain.&lt;/i&gt; &lt;/td&gt; &#xA;   &lt;!-- Microsoft OneNote --&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/winapps-org/winapps/main/apps/onenote/icon.svg?sanitize=true&#34; width=&#34;100&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;b&gt;Microsoft OneNote&lt;/b&gt;&lt;br&gt; (2016, 2019, o365)&lt;br&gt; &lt;i&gt;&lt;a href=&#34;https://en.m.wikipedia.org/wiki/File:Microsoft_Office_OneNote_(2019%E2%80%93present).svg&#34;&gt;Icon&lt;/a&gt; in the Public Domain.&lt;/i&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;!-- Microsoft Outlook --&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/winapps-org/winapps/main/apps/outlook/icon.svg?sanitize=true&#34; width=&#34;100&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;b&gt;Microsoft Outlook&lt;/b&gt;&lt;br&gt; (2016, 2019, o365)&lt;br&gt; &lt;i&gt;&lt;a href=&#34;https://en.m.wikipedia.org/wiki/File:Microsoft_Office_Outlook_(2018%E2%80%93present).svg&#34;&gt;Icon&lt;/a&gt; in the Public Domain.&lt;/i&gt; &lt;/td&gt; &#xA;   &lt;!-- Microsoft PowerPoint --&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/winapps-org/winapps/main/apps/powerpoint/icon.svg?sanitize=true&#34; width=&#34;100&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;b&gt;Microsoft PowerPoint&lt;/b&gt;&lt;br&gt; (2016, 2019, o365)&lt;br&gt; &lt;i&gt;&lt;a href=&#34;https://en.m.wikipedia.org/wiki/File:Microsoft_Office_PowerPoint_(2019%E2%80%93present).svg&#34;&gt;Icon&lt;/a&gt; in the Public Domain.&lt;/i&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;!-- Microsoft Publisher --&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/winapps-org/winapps/main/apps/publisher/icon.svg?sanitize=true&#34; width=&#34;100&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;b&gt;Microsoft Publisher&lt;/b&gt;&lt;br&gt; (2016, 2019, o365)&lt;br&gt; &lt;i&gt;&lt;a href=&#34;https://en.m.wikipedia.org/wiki/File:Microsoft_Office_Publisher_(2019-present).svg&#34;&gt;Icon&lt;/a&gt; in the Public Domain.&lt;/i&gt; &lt;/td&gt; &#xA;   &lt;!-- Microsoft Visio --&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/winapps-org/winapps/main/apps/visio/icon.svg?sanitize=true&#34; width=&#34;100&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;b&gt;Microsoft Visio&lt;/b&gt;&lt;br&gt; (Standard/Pro. 2021, Plan 2)&lt;br&gt; &lt;i&gt;&lt;a href=&#34;https://en.m.wikipedia.org/wiki/File:Microsoft_Office_Visio_(2019).svg&#34;&gt;Icon&lt;/a&gt; in the Public Domain.&lt;/i&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;!-- Microsoft Project --&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/winapps-org/winapps/main/apps/project/icon.svg?sanitize=true&#34; width=&#34;100&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;b&gt;Microsoft Project&lt;/b&gt;&lt;br&gt; (Standard/Pro. 2021, Plan 3/5)&lt;br&gt; &lt;i&gt;&lt;a href=&#34;https://en.m.wikipedia.org/wiki/File:Microsoft_Project_(2019%E2%80%93present).svg&#34;&gt;Icon&lt;/a&gt; in the Public Domain.&lt;/i&gt; &lt;/td&gt; &#xA;   &lt;!-- Microsoft Visual Studio --&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/winapps-org/winapps/main/apps/visual-studio-pro/icon.svg?sanitize=true&#34; width=&#34;100&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;b&gt;Microsoft Visual Studio&lt;/b&gt;&lt;br&gt; (Comm./Pro./Ent. 2022)&lt;br&gt; &lt;i&gt;&lt;a href=&#34;https://en.m.wikipedia.org/wiki/File:Visual_Studio_Icon_2022.svg&#34;&gt;Icon&lt;/a&gt; in the Public Domain.&lt;/i&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;!-- PowerShell --&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/winapps-org/winapps/main/apps/powershell/icon.svg?sanitize=true&#34; width=&#34;100&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;b&gt;PowerShell&lt;/b&gt;&lt;br&gt; &lt;i&gt;&lt;a href=&#34;https://iconduck.com/icons/102322/file-type-powershell&#34;&gt;Icon&lt;/a&gt; under &lt;a href=&#34;https://iconduck.com/licenses/mit&#34;&gt;MIT license&lt;/a&gt;.&lt;/i&gt; &lt;/td&gt; &#xA;   &lt;!-- Windows --&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/winapps-org/winapps/main/icons/windows.svg?sanitize=true&#34; width=&#34;100&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;b&gt;Windows&lt;/b&gt;&lt;br&gt; (Full RDP Session)&lt;br&gt; &lt;i&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winapps-org/winapps/main/url&#34;&gt;Icon&lt;/a&gt; in the Public Domain.&lt;/i&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Step 1: Configure a Windows VM&lt;/h3&gt; &#xA;&lt;p&gt;Both &lt;code&gt;Docker&lt;/code&gt; and &lt;code&gt;Podman&lt;/code&gt; are recommended backends for running the Windows virtual machine, as they facilitate an automated Windows installation process. WinApps is also compatible with &lt;code&gt;libvirt&lt;/code&gt;. While this method requires considerably more manual configuration, it also provides greater virtual machine customisation options. All three methods leverage the &lt;code&gt;KVM&lt;/code&gt; hypervisor, ensuring excellent virtual machine performance. Ultimately, the choice of backend depends on your specific use case.&lt;/p&gt; &#xA;&lt;p&gt;The following guides are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winapps-org/winapps/main/docs/docker.md&#34;&gt;Creating a Windows VM with &lt;code&gt;Docker&lt;/code&gt; or &lt;code&gt;Podman&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winapps-org/winapps/main/docs/libvirt.md&#34;&gt;Creating a Windows VM with &lt;code&gt;libvirt&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you already have a Windows VM or server you wish to use with WinApps, you will need to merge &lt;code&gt;install/RDPApps.reg&lt;/code&gt; into the Windows Registry manually.&lt;/p&gt; &#xA;&lt;h3&gt;Step 2: Install Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Install the required dependencies.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Debian/Ubuntu: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y dialog freerdp3-x11 iproute2 libnotify-bin netcat&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Fedora/RHEL: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dnf install -y dialog freerdp iproute libnotify nmap-ncat&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Arch Linux: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pacman -Syu --needed -y dialog freerdp iproute2 libnotify&#xA;gnu-netcat&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Gentoo Linux: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo emerge --ask=n sys-libs/dialog net-misc/freerdp:3 net-misc/iproute2 x11-libs/libnotify net-analyzer/netcat&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] WinApps requires &lt;code&gt;FreeRDP&lt;/code&gt; version 3 or later. If not available for your distribution through your package manager, you can install the &lt;a href=&#34;https://flathub.org/apps/com.freerdp.FreeRDP&#34;&gt;Flatpak&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;flatpak install flathub com.freerdp.FreeRDP&#xA;sudo flatpak override --filesystem=home com.freerdp.FreeRDP # To use `+home-drive`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step 3: Create a WinApps Configuration File&lt;/h3&gt; &#xA;&lt;p&gt;Create a configuration file at &lt;code&gt;~/.config/winapps/winapps.conf&lt;/code&gt; containing the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;##################################&#xA;#   WINAPPS CONFIGURATION FILE   #&#xA;##################################&#xA;&#xA;# INSTRUCTIONS&#xA;# - Leading and trailing whitespace are ignored.&#xA;# - Empty lines are ignored.&#xA;# - Lines starting with &#39;#&#39; are ignored.&#xA;# - All characters following a &#39;#&#39; are ignored.&#xA;&#xA;# [WINDOWS USERNAME]&#xA;RDP_USER=&#34;MyWindowsUser&#34;&#xA;&#xA;# [WINDOWS PASSWORD]&#xA;RDP_PASS=&#34;MyWindowsPassword&#34;&#xA;&#xA;# [WINDOWS DOMAIN]&#xA;# DEFAULT VALUE: &#39;&#39; (BLANK)&#xA;RDP_DOMAIN=&#34;&#34;&#xA;&#xA;# [WINDOWS IPV4 ADDRESS]&#xA;# NOTES:&#xA;# - If using &#39;libvirt&#39;, &#39;RDP_IP&#39; will be determined by WinApps at runtime if left unspecified.&#xA;# DEFAULT VALUE:&#xA;# - &#39;docker&#39;: &#39;127.0.0.1&#39;&#xA;# - &#39;podman&#39;: &#39;127.0.0.1&#39;&#xA;# - &#39;libvirt&#39;: &#39;&#39; (BLANK)&#xA;RDP_IP=&#34;&#34;&#xA;&#xA;# [WINAPPS BACKEND]&#xA;# DEFAULT VALUE: &#39;docker&#39;&#xA;# VALID VALUES:&#xA;# - &#39;docker&#39;&#xA;# - &#39;podman&#39;&#xA;# - &#39;libvirt&#39;&#xA;# - &#39;manual&#39;&#xA;WAFLAVOR=&#34;docker&#34;&#xA;&#xA;# [DISPLAY SCALING FACTOR]&#xA;# NOTES:&#xA;# - If an unsupported value is specified, a warning will be displayed.&#xA;# - If an unsupported value is specified, WinApps will use the closest supported value.&#xA;# DEFAULT VALUE: &#39;100&#39;&#xA;# VALID VALUES:&#xA;# - &#39;100&#39;&#xA;# - &#39;140&#39;&#xA;# - &#39;180&#39;&#xA;RDP_SCALE=&#34;100&#34;&#xA;&#xA;# [ADDITIONAL FREERDP FLAGS &amp;amp; ARGUMENTS]&#xA;# DEFAULT VALUE: &#39;&#39; (BLANK)&#xA;# VALID VALUES: See https://github.com/awakecoding/FreeRDP-Manuals/blob/master/User/FreeRDP-User-Manual.markdown&#xA;RDP_FLAGS=&#34;&#34;&#xA;&#xA;# [MULTIPLE MONITORS]&#xA;# NOTES:&#xA;# - If enabled, a FreeRDP bug *might* produce a black screen.&#xA;# DEFAULT VALUE: &#39;false&#39;&#xA;# VALID VALUES:&#xA;# - &#39;true&#39;&#xA;# - &#39;false&#39;&#xA;MULTIMON=&#34;false&#34;&#xA;&#xA;# [DEBUG WINAPPS]&#xA;# NOTES:&#xA;# - Creates and appends to ~/.local/share/winapps/winapps.log when running WinApps.&#xA;# DEFAULT VALUE: &#39;true&#39;&#xA;# VALID VALUES:&#xA;# - &#39;true&#39;&#xA;# - &#39;false&#39;&#xA;DEBUG=&#34;true&#34;&#xA;&#xA;# [AUTOMATICALLY PAUSE WINDOWS]&#xA;# NOTES:&#xA;# - This is currently INCOMPATIBLE with &#39;docker&#39; and &#39;manual&#39;.&#xA;# - See https://github.com/dockur/windows/issues/674&#xA;# DEFAULT VALUE: &#39;off&#39;&#xA;# VALID VALUES:&#xA;# - &#39;on&#39;&#xA;# - &#39;off&#39;&#xA;AUTOPAUSE=&#34;off&#34;&#xA;&#xA;# [AUTOMATICALLY PAUSE WINDOWS TIMEOUT]&#xA;# NOTES:&#xA;# - This setting determines the duration of inactivity to tolerate before Windows is automatically paused.&#xA;# - This setting is ignored if &#39;AUTOPAUSE&#39; is set to &#39;off&#39;.&#xA;# - The value must be specified in seconds (to the nearest 10 seconds e.g., &#39;30&#39;, &#39;40&#39;, &#39;50&#39;, etc.).&#xA;# - For RemoteApp RDP sessions, there is a mandatory 20-second delay, so the minimum value that can be specified here is &#39;20&#39;.&#xA;# - Source: https://techcommunity.microsoft.com/t5/security-compliance-and-identity/terminal-services-remoteapp-8482-session-termination-logic/ba-p/246566&#xA;# DEFAULT VALUE: &#39;300&#39;&#xA;# VALID VALUES: &amp;gt;=20&#xA;AUTOPAUSE_TIME=&#34;300&#34;&#xA;&#xA;# [FREERDP COMMAND]&#xA;# NOTES:&#xA;# - WinApps will attempt to automatically detect the correct command to use for your system.&#xA;# DEFAULT VALUE: &#39;&#39; (BLANK)&#xA;# VALID VALUES: The command required to run FreeRDPv3 on your system (e.g., &#39;xfreerdp&#39;, &#39;xfreerdp3&#39;, etc.).&#xA;FREERDP_COMMAND=&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] &lt;code&gt;RDP_USER&lt;/code&gt; and &lt;code&gt;RDP_PASS&lt;/code&gt; must correspond to a complete Windows user account and password, such as those created during Windows setup or for a domain user. User/PIN combinations are not valid for RDP access.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] If you wish to use an alternative WinApps backend (other than &lt;code&gt;Docker&lt;/code&gt;), uncomment and change &lt;code&gt;WAFLAVOR=&#34;docker&#34;&lt;/code&gt; to &lt;code&gt;WAFLAVOR=&#34;podman&#34;&lt;/code&gt; or &lt;code&gt;WAFLAVOR=&#34;libvirt&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Configuration Options Explained&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If using a pre-existing Windows RDP server on your LAN, you must use &lt;code&gt;RDP_IP&lt;/code&gt; to specify the location of the Windows server. You may also wish to configure a static IP address for this server.&lt;/li&gt; &#xA; &lt;li&gt;If running a Windows VM using &lt;code&gt;libvirt&lt;/code&gt; with NAT enabled, leave &lt;code&gt;RDP_IP&lt;/code&gt; commented out and WinApps will auto-detect the local IP address for the VM.&lt;/li&gt; &#xA; &lt;li&gt;For domain users, you can uncomment and change &lt;code&gt;RDP_DOMAIN&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;On high-resolution (UHD) displays, you can set &lt;code&gt;RDP_SCALE&lt;/code&gt; to the scale you would like to use (100, 140 or 180).&lt;/li&gt; &#xA; &lt;li&gt;To add additional flags to the FreeRDP call (e.g. &lt;code&gt;/prevent-session-lock 120&lt;/code&gt;), uncomment and use the &lt;code&gt;RDP_FLAGS&lt;/code&gt; configuration option.&lt;/li&gt; &#xA; &lt;li&gt;For multi-monitor setups, you can try enabling &lt;code&gt;MULTIMON&lt;/code&gt;. A FreeRDP bug may result in a black screen however, in which case you should revert this change.&lt;/li&gt; &#xA; &lt;li&gt;If you enable &lt;code&gt;DEBUG&lt;/code&gt;, a log will be created on each application start in &lt;code&gt;~/.local/share/winapps/winapps.log&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If using a system on which the FreeRDP command is not &lt;code&gt;xfreerdp&lt;/code&gt; or &lt;code&gt;xfreerdp3&lt;/code&gt;, the correct command can be specified using &lt;code&gt;FREERDP_COMMAND&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Step 4: Run the WinApps Installer&lt;/h3&gt; &#xA;&lt;p&gt;Run the WinApps installer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash &amp;lt;(curl https://raw.githubusercontent.com/winapps-org/winapps/main/setup.sh)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A list of supported additional arguments can be accessed by running &lt;code&gt;./setup.sh --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/winapps-org/winapps/main/demo/installer.gif&#34; width=&#34;1000&#34; alt=&#34;WinApps Installer Animation.&#34;&gt; &#xA;&lt;h2&gt;Adding Additional Pre-defined Applications&lt;/h2&gt; &#xA;&lt;p&gt;Adding your own applications with custom icons and MIME types to the installer is easy. Simply copy one of the application configurations in the &lt;code&gt;apps&lt;/code&gt; folder located within the WinApps repository, and:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Modify the name and variables to reflect the appropriate/desired values for your application.&lt;/li&gt; &#xA; &lt;li&gt;Replace &lt;code&gt;icon.svg&lt;/code&gt; with an SVG for your application (ensuring the icon is appropriately licensed).&lt;/li&gt; &#xA; &lt;li&gt;Remove and reinstall WinApps.&lt;/li&gt; &#xA; &lt;li&gt;Submit a pull request to add your application to WinApps as an officially supported application once you have tested and verified your configuration (optional, but encouraged).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Running Applications Manually&lt;/h2&gt; &#xA;&lt;p&gt;WinApps offers a manual mode for running applications that were not configured by the WinApps installer. This is completed with the &lt;code&gt;manual&lt;/code&gt; flag. Executables that are in the Windows PATH do not require full path definition.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;winapps manual &#34;C:\my\directory\executableNotInPath.exe&#34;&#xA;winapps manual executableInPath.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Updating WinApps&lt;/h2&gt; &#xA;&lt;p&gt;The installer can be run multiple times. To update your installation of WinApps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run the WinApps installer to remove WinApps from your system.&lt;/li&gt; &#xA; &lt;li&gt;Pull the latest changes from the WinApps GitHub repository.&lt;/li&gt; &#xA; &lt;li&gt;Re-install WinApps using the WinApps installer by running &lt;code&gt;winapps-setup&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;a href=&#34;https://star-history.com/#winapps-org/winapps&amp;amp;Date&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://api.star-history.com/svg?repos=winapps-org/winapps&amp;amp;type=Date&amp;amp;theme=dark&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://api.star-history.com/svg?repos=winapps-org/winapps&amp;amp;type=Date&#34;&gt; &#xA;  &lt;img alt=&#34;Star History Chart&#34; src=&#34;https://api.star-history.com/svg?repos=winapps-org/winapps&amp;amp;type=Date&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt;</summary>
  </entry>
</feed>