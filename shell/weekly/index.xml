<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-04T02:24:37Z</updated>
  <subtitle>Weekly Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>phyver/GameShell</title>
    <updated>2022-06-04T02:24:37Z</updated>
    <id>tag:github.com,2022-06-04:/phyver/GameShell</id>
    <link href="https://github.com/phyver/GameShell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;a game to learn (or teach) how to use standard commands in a Unix shell&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GameShell: a &#34;game&#34; to teach the Unix shell&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/phyver/GameShell/master/Images/illustration-small.png&#34; alt=&#34;Illustration inspired by the game&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Teaching first-year university students or high schoolers to use a Unix shell is not always the easiest or most entertaining of tasks. GameShell was devised as a tool to help students at the &lt;a href=&#34;https://univ-smb.fr&#34;&gt;Université Savoie Mont Blanc&lt;/a&gt; to engage with a &lt;em&gt;real&lt;/em&gt; shell, in a way that encourages learning while also having fun.&lt;/p&gt; &#xA;&lt;p&gt;The original idea, due to Rodolphe Lepigre, was to run a standard bash session with an appropriate configuration file that defined &#34;missions&#34; which would be &#34;checked&#34; in order to progress through the game.&lt;/p&gt; &#xA;&lt;p&gt;Here is the result...&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/phyver/GameShell/master/Images/gameshell_first_mission_small.gif&#34; alt=&#34;GameShell&#39;s first mission&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Feel free to send us your remarks, questions or suggestions by opening &lt;a href=&#34;https://github.com/phyver/GameShell/issues&#34;&gt;issues&lt;/a&gt; or submitting &lt;a href=&#34;https://github.com/phyver/GameShell/pulls&#34;&gt;pull requests&lt;/a&gt;. We are particularly interested in any new missions you might create!&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; GameShell is currently undergoing heavy development: the current version has not been field tested by students. Do not hesitate to report any problems you might encounter or suggestions you might have by &lt;a href=&#34;https://github.com/phyver/GameShell/issues/new&#34;&gt;opening an issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;GameShell should work on any standard Linux system, and also on macOS and BSD (but we have run fewer tests on the latter systems). On Debian or Ubuntu, the only dependencies (besides &lt;code&gt;bash&lt;/code&gt;) are the &lt;code&gt;gettext-base&lt;/code&gt; and &lt;code&gt;awk&lt;/code&gt; packages (the latter is generally installed by default). Some missions have additional dependencies: these missions will be skipped if the dependencies are not met. On Debian or Ubuntu, run the following command to install all game and mission dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo apt install gettext man-db procps psmisc nano tree bsdmainutils x11-apps wget&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://raw.githubusercontent.com/phyver/GameShell/master/doc/user_manual.md&#34;&gt;user manual&lt;/a&gt; to see how to install the game dependencies on other systems (macOS, BSD, ...).&lt;/p&gt; &#xA;&lt;p&gt;Assuming all the dependencies are installed, you can try the latest version of the game by running the following two commands in a terminal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ wget https://github.com/phyver/GameShell/releases/download/latest/gameshell.sh&#xA;$ bash gameshell.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first command will download the latest version of the game in the form of a self-extracting archive, and the second command will initialise and run the game from the downloaded archive. Instructions on how to play are provided in the game directly.&lt;/p&gt; &#xA;&lt;p&gt;Note that when you quit the game (with &lt;code&gt;control-d&lt;/code&gt; or the command &lt;code&gt;gsh exit&lt;/code&gt;) your progression will be saved in a new archive (called &lt;code&gt;GameShell-save.sh&lt;/code&gt;). Run this archive to resume the game where you left it.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer not running foreign shell scripts on your computer, you can generate a Docker image with the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mkdir GameShell; cd GameShell&#xA;$ wget --quiet https://github.com/phyver/GameShell/releases/download/latest/Dockerfile&#xA;$ docker build -t gsh .&#xA;$ docker run -it gsh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The game will NOT be saved when you exit, and additional flags are required if you want to run X programs from inside GameShell. Refer to &lt;a href=&#34;https://raw.githubusercontent.com/phyver/GameShell/master/doc/deps.md#running-GameShell-from-a-docker-container&#34;&gt;this section&lt;/a&gt; of the user manual.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;To find out more about GameShell, refer to the following documents:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/phyver/GameShell/master/doc/user_manual.md&#34;&gt;user manual&lt;/a&gt; provides information on how to run the game on all supported platforms (Linux, macOS, BSD), explains how to run the game from the sources, tells you how to generate custom game archives (which is useful if you want to use GameShell for teaching a class), and more.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/phyver/GameShell/master/doc/dev_manual.md&#34;&gt;developer manual&lt;/a&gt; provides information on how to create new missions, how to translate missions, and how to participate in the development of the game.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Who is developing GameShell?&lt;/h2&gt; &#xA;&lt;h3&gt;Developers&lt;/h3&gt; &#xA;&lt;p&gt;The game is currently being developed by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.lama.univ-smb.fr/~hyvernat&#34;&gt;Pierre Hyvernat&lt;/a&gt; (main developer, &lt;a href=&#34;mailto:pierre.hyvernat@univ-smb.fr&#34;&gt;pierre.hyvernat@univ-smb.fr&lt;/a&gt;),&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lepigre.fr&#34;&gt;Rodolphe Lepigre&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Mission contributors&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pierre Hyvernat&lt;/li&gt; &#xA; &lt;li&gt;Rodolphe Lepigre&lt;/li&gt; &#xA; &lt;li&gt;Christophe Raffalli&lt;/li&gt; &#xA; &lt;li&gt;Xavier Provencal&lt;/li&gt; &#xA; &lt;li&gt;Clovis Eberhart&lt;/li&gt; &#xA; &lt;li&gt;Sébastien Tavenas&lt;/li&gt; &#xA; &lt;li&gt;Tiemen Duvillard&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Special thanks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All the students who found &lt;em&gt;many&lt;/em&gt; bugs in the early versions.&lt;/li&gt; &#xA; &lt;li&gt;Joan Stark (a.k.a, jgs), who designed hundreds of ASCII-art pieces in the late 90s. Most of the ASCII-art encountered in GameShell are due to her.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Licence&lt;/h2&gt; &#xA;&lt;p&gt;GameShell is released under the &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.en.html&#34;&gt;GPLv3&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please link to this repository if you use GameShell.&lt;/p&gt; &#xA;&lt;p&gt;GameShell is open source and free to use. One way you can acknowledge the work it required is by sending an actual postcard to&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  Pierre Hyvernat&#xA;  Laboratoire de Mathématiques, CNRS UMR 5127&#xA;  Université de Savoie&#xA;  73376 Le Bourget du Lac&#xA;  FRANCE&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>getsentry/self-hosted</title>
    <updated>2022-06-04T02:24:37Z</updated>
    <id>tag:github.com,2022-06-04:/getsentry/self-hosted</id>
    <link href="https://github.com/getsentry/self-hosted" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Sentry, feature-complete and packaged up for low-volume deployments and proofs-of-concept&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Self-Hosted Sentry nightly&lt;/h1&gt; &#xA;&lt;p&gt;Official bootstrap for running your own &lt;a href=&#34;https://sentry.io/&#34;&gt;Sentry&lt;/a&gt; with &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker 19.03.6+&lt;/li&gt; &#xA; &lt;li&gt;Compose 1.28.0+&lt;/li&gt; &#xA; &lt;li&gt;4 CPU Cores&lt;/li&gt; &#xA; &lt;li&gt;8 GB RAM&lt;/li&gt; &#xA; &lt;li&gt;20 GB Free Disk Space&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;To get started with all the defaults, simply clone the repo and run &lt;code&gt;./install.sh&lt;/code&gt; in your local check-out. Sentry uses Python 3 by default since December 4th, 2020 and Sentry 21.1.0 is the last version to support Python 2.&lt;/p&gt; &#xA;&lt;p&gt;During the install, a prompt will ask if you want to create a user account. If you require that the install not be blocked by the prompt, run &lt;code&gt;./install.sh --skip-user-prompt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Thinking of not managing this yourself? Check out the &lt;a href=&#34;https://docs.sentry.io/product/sentry-basics/migration/&#34;&gt;SaaS migration docs&lt;/a&gt; or &lt;a href=&#34;https://sentry.io/from/self-hosted&#34;&gt;contact us&lt;/a&gt; for help.&lt;/p&gt; &#xA;&lt;p&gt;Please visit &lt;a href=&#34;https://develop.sentry.dev/self-hosted/&#34;&gt;our documentation&lt;/a&gt; for everything else.&lt;/p&gt; &#xA;&lt;h3&gt;Customize DotEnv (.env) file&lt;/h3&gt; &#xA;&lt;p&gt;Environment specific configurations can be done in the &lt;code&gt;.env.custom&lt;/code&gt; file. It will be located in the root directory of the Sentry installation.&lt;/p&gt; &#xA;&lt;p&gt;By default, there exists no &lt;code&gt;.env.custom&lt;/code&gt; file. In this case, you can manually add this file by copying the &lt;code&gt;.env&lt;/code&gt; file to a new &lt;code&gt;.env.custom&lt;/code&gt; file and adjust your settings in the &lt;code&gt;.env.custom&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Please keep in mind to check the &lt;code&gt;.env&lt;/code&gt; file for changes, when you perform an upgrade of Sentry, so that you can adjust your &lt;code&gt;.env.custom&lt;/code&gt; accordingly, if required.&lt;/p&gt; &#xA;&lt;h3&gt;Enhance Sentry image&lt;/h3&gt; &#xA;&lt;p&gt;To install plugins and their dependencies or make other modifications to the Sentry base image, copy &lt;code&gt;sentry/enhance-image.example.sh&lt;/code&gt; to &lt;code&gt;sentry/enhance-image.sh&lt;/code&gt; and add necessary steps there. For example, you can use &lt;code&gt;apt-get&lt;/code&gt; to install dependencies and use &lt;code&gt;pip&lt;/code&gt; to install plugins.&lt;/p&gt; &#xA;&lt;p&gt;After making modifications to &lt;code&gt;sentry/enhance-image.sh&lt;/code&gt;, run &lt;code&gt;./install.sh&lt;/code&gt; again to apply them.&lt;/p&gt; &#xA;&lt;h2&gt;Tips &amp;amp; Tricks&lt;/h2&gt; &#xA;&lt;h3&gt;Event Retention&lt;/h3&gt; &#xA;&lt;p&gt;Sentry comes with a cleanup cron job that prunes events older than &lt;code&gt;90 days&lt;/code&gt; by default. If you want to change that, you can change the &lt;code&gt;SENTRY_EVENT_RETENTION_DAYS&lt;/code&gt; environment variable in &lt;code&gt;.env&lt;/code&gt; or simply override it in your environment. If you do not want the cleanup cron, you can remove the &lt;code&gt;sentry-cleanup&lt;/code&gt; service from the &lt;code&gt;docker-compose.yml&lt;/code&gt;file.&lt;/p&gt; &#xA;&lt;h3&gt;Installing a specific SHA&lt;/h3&gt; &#xA;&lt;p&gt;If you want to install a specific release of Sentry, use the tags/releases on this repo.&lt;/p&gt; &#xA;&lt;p&gt;We continuously push the Docker image for each commit made into &lt;a href=&#34;https://github.com/getsentry/sentry&#34;&gt;Sentry&lt;/a&gt;, and other services such as &lt;a href=&#34;https://github.com/getsentry/snuba&#34;&gt;Snuba&lt;/a&gt; or &lt;a href=&#34;https://github.com/getsentry/symbolicator&#34;&gt;Symbolicator&lt;/a&gt; to &lt;a href=&#34;https://hub.docker.com/u/getsentry&#34;&gt;our Docker Hub&lt;/a&gt; and tag the latest version on master as &lt;code&gt;:nightly&lt;/code&gt;. This is also usually what we have on sentry.io and what the install script uses. You can use a custom Sentry image, such as a modified version that you have built on your own, or simply a specific commit hash by setting the &lt;code&gt;SENTRY_IMAGE&lt;/code&gt; environment variable to that image name before running &lt;code&gt;./install.sh&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;SENTRY_IMAGE=getsentry/sentry:83b1380 ./install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that this may not work for all commit SHAs as this repository evolves with Sentry and its satellite projects. It is highly recommended to check out a version of this repository that is close to the timestamp of the Sentry commit you are installing.&lt;/p&gt; &#xA;&lt;h3&gt;Using Linux&lt;/h3&gt; &#xA;&lt;p&gt;If you are using Linux and you need to use &lt;code&gt;sudo&lt;/code&gt; when running &lt;code&gt;./install.sh&lt;/code&gt;, make sure to place the environment variable &lt;em&gt;after&lt;/em&gt; &lt;code&gt;sudo&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo SENTRY_IMAGE=us.gcr.io/sentryio/sentry:83b1380 ./install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where you replace &lt;code&gt;83b1380&lt;/code&gt; with the sha you want to use.&lt;/p&gt;</summary>
  </entry>
</feed>