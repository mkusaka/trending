<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-15T02:05:19Z</updated>
  <subtitle>Weekly Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>myspaghetti/macos-virtualbox</title>
    <updated>2023-01-15T02:05:19Z</updated>
    <id>tag:github.com,2023-01-15:/myspaghetti/macos-virtualbox</id>
    <link href="https://github.com/myspaghetti/macos-virtualbox" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Push-button installer of macOS Catalina, Mojave, and High Sierra guests in Virtualbox for Windows, Linux, and macOS&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://repository-images.githubusercontent.com/156108442/c501b100-0e5a-11eb-8b49-90afd63f5d03&#34; alt=&#34;macOS inside a VirtualBox window with the dock positioned on the left&#34; title=&#34;macos-guest-virtualbox.sh&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Push-button installer of macOS on VirtualBox&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/myspaghetti/macos-guest-virtualbox/master/macos-guest-virtualbox.sh&#34;&gt;&lt;code&gt;macos-guest-virtualbox.sh&lt;/code&gt;&lt;/a&gt; is a Bash script that creates a macOS virtual machine guest on VirtualBox with unmodified macOS installation files downloaded directly from Apple servers.&lt;/p&gt; &#xA;&lt;p&gt;A default install only requires the user to sit patiently and, less than ten times, press enter when prompted by the script, without interacting with the virtual machine.&lt;/p&gt; &#xA;&lt;p&gt;Tested on &lt;code&gt;bash&lt;/code&gt; and &lt;code&gt;zsh&lt;/code&gt; on &lt;a href=&#34;https://cygwin.com/install.html&#34;&gt;Cygwin&lt;/a&gt;. Works on macOS, CentOS 7, and Windows. Should work on most modern Linux distros.&lt;/p&gt; &#xA;&lt;p&gt;macOS Catalina (10.15), Mojave (10.14), and High Sierra (10.13) currently supported.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation can be viewed by executing the command &lt;code&gt;./macos-guest-virtualbox.sh documentation&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The majority of the script is either documentation, comments, or actionable error messages, which should make the script straightforward to inspect and understand.&lt;/p&gt; &#xA;&lt;h2&gt;iCloud and iMessage connectivity and NVRAM&lt;/h2&gt; &#xA;&lt;p&gt;iCloud, iMessage, and other connected Apple services require a valid device name and serial number, board ID and serial number, and other genuine (or genuine-like) Apple parameters. These can be set in EFI and NVRAM by editing the script. See the &lt;a href=&#34;https://raw.githubusercontent.com/myspaghetti/macos-virtualbox/master/#documentation&#34;&gt;documentation command&lt;/a&gt; for further information.&lt;/p&gt; &#xA;&lt;h2&gt;Storage size&lt;/h2&gt; &#xA;&lt;p&gt;The script by default assigns a target virtual disk storage size of 80GB, which is populated to about 25GB on the host on initial installation. After the installation is complete, the storage size may be increased. See the &lt;a href=&#34;https://raw.githubusercontent.com/myspaghetti/macos-virtualbox/master/#documentation&#34;&gt;documentation command&lt;/a&gt; for further information.&lt;/p&gt; &#xA;&lt;h2&gt;Primary display resolution&lt;/h2&gt; &#xA;&lt;p&gt;The following primary display resolutions are supported by macOS on VirtualBox: &lt;code&gt;5120x2880&lt;/code&gt; &lt;code&gt;2880x1800&lt;/code&gt; &lt;code&gt;2560x1600&lt;/code&gt; &lt;code&gt;2560x1440&lt;/code&gt; &lt;code&gt;1920x1200&lt;/code&gt; &lt;code&gt;1600x1200&lt;/code&gt; &lt;code&gt;1680x1050&lt;/code&gt; &lt;code&gt;1440x900&lt;/code&gt; &lt;code&gt;1280x800&lt;/code&gt; &lt;code&gt;1024x768&lt;/code&gt; &lt;code&gt;640x480&lt;/code&gt;. See the &lt;a href=&#34;https://raw.githubusercontent.com/myspaghetti/macos-virtualbox/master/#documentation&#34;&gt;documentation command&lt;/a&gt; for further information.&lt;/p&gt; &#xA;&lt;h2&gt;Scope and unsupported features&lt;/h2&gt; &#xA;&lt;p&gt;The scope of the script is completing a default macOS install process on VirtualBox on supported hardware. Further functioning order of VirtualBox or macOS is beyond the scope of this script. Some features may behave unexpectedly, such as USB device support, audio support, FileVault boot password prompt support, and other features, including critical functionality.&lt;/p&gt; &#xA;&lt;h3&gt;CPU compatibility&lt;/h3&gt; &#xA;&lt;p&gt;macOS guests on VirtualBox are incompatible with some CPU models. If the guest macOS boot process hangs on “LoadKernelFromStream”, “EndRandomSeed”, or &#34;EXITBS&#34;, see the &lt;a href=&#34;https://raw.githubusercontent.com/myspaghetti/macos-virtualbox/master/#documentation&#34;&gt;documentation command&lt;/a&gt; regarding VirtualBox CPU profiles and &lt;a href=&#34;https://www.virtualbox.org/manual/ch08.html#vboxmanage-modifyvm-teleport&#34;&gt;CPUID settings&lt;/a&gt;. Some CPU models released in 2020 and later may fail to start or complete the installer, and may require manually adjusting the CPUID settings.&lt;/p&gt; &#xA;&lt;h3&gt;Upgrading to Big Sur and Monterey&lt;/h3&gt; &#xA;&lt;p&gt;The virtual machine may be upgraded to the latest macOS Big Sur (11) and macOS Monterey (12) versions through Software Update. Big Sur may be installed in-place. Monterey may require attaching another volume to the virtual machine and selecting the volume as the installation target, otherwise the upgrade is prone to failing and entering a boot loop.&lt;/p&gt; &#xA;&lt;h3&gt;Performance and deployment&lt;/h3&gt; &#xA;&lt;p&gt;After successfully creating a working macOS virtual machine, consider importing it into more performant virtualization software, or packaging it for configuration management platforms for automated deployment. These virtualization and deployment applications require additional configuration that is beyond the scope of the script.&lt;/p&gt; &#xA;&lt;p&gt;QEMU with KVM is capable of providing virtual machine hardware passthrough for near-native performance. QEMU supports the &lt;code&gt;VMDK&lt;/code&gt; virtual disk image storage format, which can be configured to be created by the script. See the &lt;a href=&#34;https://raw.githubusercontent.com/myspaghetti/macos-virtualbox/master/#documentation&#34;&gt;documentation command&lt;/a&gt; for further information. QEMU and KVM require additional configuration that is beyond the scope of the script.&lt;/p&gt; &#xA;&lt;h4&gt;VirtualBox Native Execution Manager (NEM)&lt;/h4&gt; &#xA;&lt;p&gt;The VirtualBox Native Execution Manager (NEM) is an experimental VirtualBox feature. &lt;a href=&#34;https://docs.microsoft.com/en-us/troubleshoot/windows-client/application-management/virtualization-apps-not-work-with-hyper-v&#34;&gt;VirtualBox uses NEM when access to VT-x and AMD-V is blocked by virtualization software or execution protection features such as Hyper-V, WSL2, WSLg, Windows Sandbox, memory integrity protection, Application Guard, Credential Guard, Device Guard, and other features and software.&lt;/a&gt; macOS and the macOS installer have memory corruption issues under NEM virtualization. The script checks for NEM and exits with an error message if it is detected.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/myspaghetti/macos-virtualbox/issues/525&#34;&gt;VirtualBox can run on WSL2 and WSLg with some kernel module compilation&lt;/a&gt;, though performance is extremely low. At the point that kernel module compilation is required, it may be preferable to use QEMU/KVM on WSL2 and WSLg, which is orders of magnitude faster than VirtualBox on WSL2 and WSLg. WSL2, WSLg, QEMU, and KVM require additional configuration that is beyond the scope of the script.&lt;/p&gt; &#xA;&lt;h3&gt;Bootloaders&lt;/h3&gt; &#xA;&lt;p&gt;The macOS VirtualBox guest is loaded without extra bootloaders, but it is compatible with &lt;a href=&#34;https://github.com/acidanthera/OpenCorePkg/releases&#34;&gt;OpenCore&lt;/a&gt;. OpenCore requires additional configuration that is beyond the scope of the script.&lt;/p&gt; &#xA;&lt;h3&gt;Audio&lt;/h3&gt; &#xA;&lt;p&gt;macOS may not support any built-in VirtualBox audio controllers. The bootloader &lt;a href=&#34;https://github.com/acidanthera/OpenCorePkg/releases&#34;&gt;OpenCore&lt;/a&gt; may be able to load open-source or built-in audio drivers in VirtualBox, providing the configuration for STAC9221 (Intel HD Audio) or SigmaTel STAC9700,83,84 (ICH AC97) is available.&lt;/p&gt; &#xA;&lt;h3&gt;Display scaling&lt;/h3&gt; &#xA;&lt;p&gt;VirtualBox does not supply an EDID for its virtual display, and macOS does not enable display scaling (high PPI) without an EDID. The bootloader OpenCore can &lt;a href=&#34;https://github.com/acidanthera/WhateverGreen/raw/master/Manual/FAQ.IntelHD.en.md#edid&#34;&gt;inject an EDID&lt;/a&gt; which enables display scaling.&lt;/p&gt; &#xA;&lt;h3&gt;FileVault&lt;/h3&gt; &#xA;&lt;p&gt;The VirtualBox EFI implementation does not properly load the FileVault full disk encryption password prompt upon boot. The bootloader &lt;a href=&#34;https://github.com/acidanthera/OpenCorePkg/releases/tag/0.6.9&#34;&gt;OpenCore&lt;/a&gt; is able to load the password prompt with the parameter &lt;code&gt;ProvideConsoleGop&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;. See sample &lt;a href=&#34;https://github.com/myspaghetti/macos-virtualbox/files/6600860/config.plist.txt&#34;&gt;config.plist&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;The following dependencies should be available through a package manager:&lt;br&gt; &lt;code&gt;bash&lt;/code&gt; &lt;code&gt;coreutils&lt;/code&gt; &lt;code&gt;gzip&lt;/code&gt; &lt;code&gt;unzip&lt;/code&gt; &lt;code&gt;wget&lt;/code&gt; &lt;code&gt;xxd&lt;/code&gt; &lt;code&gt;dmg2img&lt;/code&gt; &lt;code&gt;virtualbox&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The following optional packages provide optical character recognition that reduces the required interaction with the script:&lt;br&gt; &lt;code&gt;tesseract-ocr&lt;/code&gt; &lt;code&gt;tesseract-ocr-eng&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Supported versions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.virtualbox.org/wiki/Downloads&#34;&gt;VirtualBox&lt;/a&gt; ≥ 6.1.6, though versions as low as 5.2 may work.&lt;/li&gt; &#xA; &lt;li&gt;GNU &lt;code&gt;Bash&lt;/code&gt; ≥ 4.3, on Windows run through &lt;a href=&#34;https://cygwin.com/install.html&#34;&gt;Cygwin&lt;/a&gt; or WSL &#34;1&#34;, see &lt;a href=&#34;https://raw.githubusercontent.com/myspaghetti/macos-virtualbox/master/#virtualbox-native-execution-manager-nem&#34;&gt;NEM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GNU &lt;code&gt;coreutils&lt;/code&gt; ≥ 8.22, GNU &lt;code&gt;gzip&lt;/code&gt; ≥ 1.5, Info-ZIP &lt;code&gt;unzip&lt;/code&gt; ≥ v6.0, GNU &lt;code&gt;wget&lt;/code&gt; ≥ 1.14, &lt;code&gt;xxd&lt;/code&gt; ≥ 1.11&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dmg2img&lt;/code&gt; ≥ 1.6.5, on Cygwin the package is not available through the package manager so the script downloads it automatically.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tesseract-ocr&lt;/code&gt; ≥ 4&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>WhatsApp/proxy</title>
    <updated>2023-01-15T02:05:19Z</updated>
    <id>tag:github.com,2023-01-15:/WhatsApp/proxy</id>
    <link href="https://github.com/WhatsApp/proxy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repository contains the WhatsApp proxy implementation for users to host their own proxy infrastructure to connect to WhatsApp for chat (VoIP and media upload/download not currently proxied)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WhatsApp Chat Proxy&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/WhatsApp/proxy&#34;&gt;&lt;img alt=&#34;github&#34; src=&#34;https://img.shields.io/badge/github-WhatsApp/proxy-8da0cb?style=for-the-badge&amp;amp;labelColor=555555&amp;amp;logo=github&#34; height=&#34;20&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/WhatsApp/proxy/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/WhatsApp/proxy/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are unable to connect directly to WhatsApp, a proxy can be used as a gateway between you and our servers. To help yourself or others re-establish connection to WhatsApp, you can set up a proxy server.&lt;/p&gt; &#xA;&lt;p&gt;If you already have a proxy to use, you can connect it to WhatsApp by following the steps in this &lt;a href=&#34;https://faq.whatsapp.com/520504143274092&#34;&gt;article&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Frequently asked questions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;PLEASE READ THIS BEFORE OPENING AN ISSUE&lt;/strong&gt; We have an FAQ, which you can find here: &lt;a href=&#34;https://github.com/whatsapp/proxy/raw/main/FAQ.md&#34;&gt;FAQ.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What you&#39;ll need&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/install/&#34;&gt;Docker&lt;/a&gt; (enable Docker on startup if your host system allows)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker compose&lt;/a&gt; (optional)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Setting up your proxy&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt; There is now a pre-built image hosted in Meta&#39;s DockerHub repository. You no longer need to build the default image (if you don&#39;t want to customize it of course).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull facebook/whatsapp_proxy:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then skip down to &lt;strong&gt;Running the proxy&lt;/strong&gt; and substitute any tag of &lt;code&gt;whatsapp_proxy:1.0&lt;/code&gt; with &lt;code&gt;facebook/whatsapp_proxy:latest&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;1. Clone the repository to your local machine&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/WhatsApp/proxy.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should see a folder called &lt;code&gt;proxy&lt;/code&gt; created in the current directory.&lt;/p&gt; &#xA;&lt;h3&gt;2. &lt;a href=&#34;https://docs.docker.com/get-docker/&#34;&gt;Install Docker&lt;/a&gt; for your system&lt;/h3&gt; &#xA;&lt;p&gt;To confirm Docker is successfully installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;should display a line similar to &lt;code&gt;Docker version 20.10.21, build baeda1f&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;2. (Optional) Install Docker compose&lt;/h3&gt; &#xA;&lt;p&gt;For Linux users, if your &lt;a href=&#34;https://docs.docker.com/desktop/install/linux-install/&#34;&gt;version of Docker&lt;/a&gt; doesn&#39;t come pre-installed with Docker compose, you can install a one-off version (For Linux).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Download the pkg&#xA;sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/bin/docker-compose&#xA;# Enable execution of the script&#xA;sudo chmod +x /usr/bin/docker-compose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Build the proxy host container&lt;/h3&gt; &#xA;&lt;p&gt;Navigate to the repo directory&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd proxy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build the proxy host container with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build proxy/ -t whatsapp_proxy:1.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should see a message similar to &lt;code&gt;[+] Building 6.6s (18/18) FINISHED&lt;/code&gt;. The container will be compiled and tagged as &lt;code&gt;whatsapp_proxy:1.0&lt;/code&gt; for easy reference.&lt;/p&gt; &#xA;&lt;h2&gt;Running the proxy&lt;/h2&gt; &#xA;&lt;h3&gt;Manually execute the container&lt;/h3&gt; &#xA;&lt;p&gt;You can manually execute the Docker container with the following &lt;code&gt;docker&lt;/code&gt; command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it -p 80:80 -p 443:443 -p 5222:5222 -p 8080:8080 -p 8443:8443 -p 8222:8222 -p 8199:8199 whatsapp_proxy:1.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will see lines ending with &lt;code&gt;Certificate generation completed.&lt;/code&gt;. The HAProxy is running in the background and will continue to do so until you close this process.&lt;/p&gt; &#xA;&lt;h3&gt;Check your connection&lt;/h3&gt; &#xA;&lt;p&gt;To confirm HAProxy is running, visit &lt;code&gt;http://&amp;lt;host-ip&amp;gt;:8199&lt;/code&gt; where &lt;code&gt;&amp;lt;host-ip&amp;gt;&lt;/code&gt; is your &lt;strong&gt;public&lt;/strong&gt; IP address. You can also use this link to monitor proxy statistics.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: If your public IP address is not accessible, you will need to enable port forwarding (for the ports above) for the router/gateway you are using. Since this operation is device-specific, we are not going to go into it in details in this doc.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you prefer OpenMetrics output you can use &lt;code&gt;http://&amp;lt;host-ip&amp;gt;:8199/metrics&lt;/code&gt; for monitoring HAProxy metrics.&lt;/p&gt; &#xA;&lt;h1&gt;Miscellanous&lt;/h1&gt; &#xA;&lt;h2&gt;An Overview of the WhatsApp Proxy Architecture&lt;/h2&gt; &#xA;&lt;p&gt;Depending on the scenario in which you utilize your proxy, the proxy container exposes multiple ports. The basic ports may include:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;80: Standard web traffic (HTTP)&lt;/li&gt; &#xA; &lt;li&gt;443: Standard web traffic, encrypted (HTTPS)&lt;/li&gt; &#xA; &lt;li&gt;5222: Jabber protocol traffic (WhatsApp default)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;There are also ports configured which accept incoming &lt;a href=&#34;https://www.haproxy.com/blog/use-the-proxy-protocol-to-preserve-a-clients-ip-address/&#34;&gt;proxy headers&lt;/a&gt; (version 1 or 2) on connections. If you have a network load balancer you can preserve the client IP address if you want.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;8080: Standard web traffic (HTTP) with PROXY protocol expected&lt;/li&gt; &#xA; &lt;li&gt;8443: Standard web traffic, encrypted (HTTPS) with PROXY protocol expected&lt;/li&gt; &#xA; &lt;li&gt;8222: Jabber protocol traffic (WhatsApp default) with PROXY protocol expected&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Certificate generation for SSL encrypted ports&lt;/h2&gt; &#xA;&lt;p&gt;Ports 443 and 8443 are protected by a self-signed encryption certificate generated at container start time. There are some custom options should you wish to tweak the settings of the generated certificates&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SSL_DNS&lt;/code&gt; comma separate list of alternative hostnames, no default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SSL_IP&lt;/code&gt; comma separate list of alternative IPs, no default&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;They can be set with commands like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build . --build-arg SSL_DNS=test.example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced&lt;/h2&gt; &#xA;&lt;h3&gt;Automate the container lifecycle with Docker compose&lt;/h3&gt; &#xA;&lt;p&gt;Docker Compose is an automated tool to run multi-container deployments, but it also helps automate the command-line arguments necessary to run a single container. It is a YAML definition file that denotes all the settings to start up and run the container. It also has restart strategies in the event the container crashes or self-restarts. Docker Compose helps manage your container setup and necessary port forwards without user interaction. We recommend utilizing Docker Compose because you usually don’t want to manually run the container outside of testing scenarios.&lt;/p&gt; &#xA;&lt;p&gt;We provide a sample &lt;a href=&#34;https://raw.githubusercontent.com/WhatsApp/proxy/main/proxy/ops/docker-compose.yml&#34;&gt;docker-compose.yml&lt;/a&gt; file for you which defines a standard deployment of the proxy container.&lt;/p&gt; &#xA;&lt;p&gt;Once Docker compose is installed, you can test your specific configuration by running Docker compose interactively with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker compose -f /path/to/this/repo/docker-compose.yml up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will allow you to see the output from the build + container hosting process and check that everything is set up correctly.&lt;/p&gt; &#xA;&lt;p&gt;When you are ready to run the container as a service, do*:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker compose -f /path/to/this/repo/docker-compose.yml up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;*Note the &lt;code&gt;-d&lt;/code&gt; flag which means &#34;daemonize&#34; and run as a service.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;To stop the container you can similarly do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker compose down&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Automate host reboots with Docker compose&lt;/h3&gt; &#xA;&lt;p&gt;Once you have Docker compose set up, you can also automate the deployment for host reboots by utilizing a &lt;code&gt;systemd&lt;/code&gt; service (if your hosting environment supports it).&lt;/p&gt; &#xA;&lt;p&gt;We provide a sample &lt;a href=&#34;https://raw.githubusercontent.com/WhatsApp/proxy/main/proxy/ops/docker_boot.service&#34;&gt;&lt;code&gt;docker_boot.service&lt;/code&gt;&lt;/a&gt; service definition for you which you should customize to your own environment.&lt;/p&gt; &#xA;&lt;p&gt;To install and setup the &lt;code&gt;systemd&lt;/code&gt; service*:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Copy the service definition to systemd folder&#xA;cp -v docker_boot.service /etc/systemd/system/&#xA;# Enable starting the service on startup&#xA;systemctl enable docker_boot.service&#xA;# Start the service (will docker compose up the container)&#xA;systemctl start docker_boot.service&#xA;# Check container status with&#xA;docker ps&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;*Make sure to update the path to your specific &lt;code&gt;docker-compose.yml&lt;/code&gt; file in the service definition &lt;code&gt;docker_boot.service&lt;/code&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Kubernetes deployment&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to configure your proxy using Kubernetes, or run the Docker runtime through Kubernetes, please see our &lt;a href=&#34;https://raw.githubusercontent.com/WhatsApp/proxy/main/charts/README.md&#34;&gt;Helm chart README&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Read more about other type of deployments &lt;a href=&#34;https://raw.githubusercontent.com/WhatsApp/proxy/main/docs/deployments.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Contributors&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The authors of this code are Sean Lawlor (&lt;a href=&#34;https://github.com/slawlor&#34;&gt;@slawlor&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To learn more about contributing to this project, &lt;a href=&#34;https://github.com/whatsapp/proxy/raw/main/CONTRIBUTING.md&#34;&gt;see this document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;This project is licensed under &lt;a href=&#34;https://github.com/novifinancial/akd/raw/main/LICENSE-MIT&#34;&gt;MIT&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tj/n</title>
    <updated>2023-01-15T02:05:19Z</updated>
    <id>tag:github.com,2023-01-15:/tj/n</id>
    <link href="https://github.com/tj/n" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Node version management&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;n&lt;/code&gt; – Interactively Manage Your Node.js Versions&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/n&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dt/n.svg?style=flat-square&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/n&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/n.svg?style=flat-square&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/n&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/n.svg?style=flat-square&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/n&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/l/n.svg?style=flat-square&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Node.js version management: no subshells, no profile setup, no convoluted API, just &lt;strong&gt;simple&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://nimit.io/images/n/n.gif&#34; alt=&#34;usage animation&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tj/n/master/#n--interactively-manage-your-nodejs-versions&#34;&gt;&lt;code&gt;n&lt;/code&gt; – Interactively Manage Your Node.js Versions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tj/n/master/#supported-platforms&#34;&gt;Supported Platforms&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tj/n/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tj/n/master/#third-party-installers&#34;&gt;Third Party Installers&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tj/n/master/#installing-nodejs-versions&#34;&gt;Installing Node.js Versions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tj/n/master/#specifying-nodejs-versions&#34;&gt;Specifying Node.js Versions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tj/n/master/#removing-versions&#34;&gt;Removing Versions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tj/n/master/#using-downloaded-nodejs-versions-without-reinstalling&#34;&gt;Using Downloaded Node.js Versions Without Reinstalling&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tj/n/master/#preserving-npm&#34;&gt;Preserving npm&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tj/n/master/#miscellaneous&#34;&gt;Miscellaneous&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tj/n/master/#custom-source&#34;&gt;Custom Source&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tj/n/master/#custom-architecture&#34;&gt;Custom Architecture&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tj/n/master/#optional-environment-variables&#34;&gt;Optional Environment Variables&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tj/n/master/#how-it-works&#34;&gt;How It Works&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;n&lt;/code&gt; is supported on macOS, Linux, including with Windows Subsystem for Linux, and various other unix-like systems. It is written as a BASH script but does not require you to use BASH as your command shell.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;n&lt;/code&gt; does not work in native shells on Microsoft Windows (like PowerShell), or Git for Windows BASH, or with the Cygwin DLL.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;If you already have Node.js installed, an easy way to install &lt;code&gt;n&lt;/code&gt; is using &lt;code&gt;npm&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install -g n&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;n&lt;/code&gt; command downloads and installs to &lt;code&gt;/usr/local&lt;/code&gt; by default, but you may override this location by defining &lt;code&gt;N_PREFIX&lt;/code&gt;. &lt;code&gt;n&lt;/code&gt; caches Node.js versions in subdirectory &lt;code&gt;n/versions&lt;/code&gt;. The &lt;em&gt;active&lt;/em&gt; Node.js version is installed in subdirectories &lt;code&gt;bin&lt;/code&gt;, &lt;code&gt;include&lt;/code&gt;, &lt;code&gt;lib&lt;/code&gt;, and &lt;code&gt;share&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To avoid requiring &lt;code&gt;sudo&lt;/code&gt; for &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;npm&lt;/code&gt; global installs, it is suggested you either install to your home directory using &lt;code&gt;N_PREFIX&lt;/code&gt;, or take ownership of the system directories:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# make cache folder (if missing) and take ownership&#xA;sudo mkdir -p /usr/local/n&#xA;sudo chown -R $(whoami) /usr/local/n&#xA;# make sure the required folders exist (safe to execute even if they already exist)&#xA;sudo mkdir -p /usr/local/bin /usr/local/lib /usr/local/include /usr/local/share&#xA;# take ownership of Node.js install destination folders&#xA;sudo chown -R $(whoami) /usr/local/bin /usr/local/lib /usr/local/include /usr/local/share&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;If &lt;code&gt;npm&lt;/code&gt; is not yet available, one way to bootstrap an install is to download and run &lt;code&gt;n&lt;/code&gt; directly. To install the &lt;code&gt;lts&lt;/code&gt; version of Node.js:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -fsSL https://raw.githubusercontent.com/tj/n/master/bin/n | bash -s lts&#xA;# If you want n installed, you can use npm now.&#xA;npm install -g n&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can clone this repo and&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to install &lt;code&gt;n&lt;/code&gt; to &lt;code&gt;bin/n&lt;/code&gt; of the directory specified in the environment variable &lt;code&gt;$PREFIX&lt;/code&gt;, which defaults to &lt;code&gt;/usr/local&lt;/code&gt; (note that you will likely need to use &lt;code&gt;sudo&lt;/code&gt;). To install &lt;code&gt;n&lt;/code&gt; in a custom location (such as &lt;code&gt;$CUSTOM_LOCATION/bin/n&lt;/code&gt;), run &lt;code&gt;PREFIX=$CUSTOM_LOCATION make install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Third Party Installers&lt;/h3&gt; &#xA;&lt;p&gt;On macOS with &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; you can install the &lt;a href=&#34;https://github.com/Homebrew/homebrew-core/raw/master/Formula/n.rb&#34;&gt;n formula&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install n&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or on macOS with &lt;a href=&#34;https://www.macports.org/&#34;&gt;MacPorts&lt;/a&gt; you can install the &lt;a href=&#34;https://ports.macports.org/port/n/summary&#34;&gt;n port&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;port install n&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Linux and macOS, &lt;a href=&#34;https://github.com/mklement0/n-install&#34;&gt;n-install&lt;/a&gt; allows installation directly from GitHub; for instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -L https://bit.ly/n-install | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;n-install sets both &lt;code&gt;PREFIX&lt;/code&gt; and &lt;code&gt;N_PREFIX&lt;/code&gt; to &lt;code&gt;$HOME/n&lt;/code&gt;, installs &lt;code&gt;n&lt;/code&gt; to &lt;code&gt;$HOME/n/bin&lt;/code&gt;, modifies the initialization files of supported shells to export &lt;code&gt;N_PREFIX&lt;/code&gt; and add &lt;code&gt;$HOME/n/bin&lt;/code&gt; to the &lt;code&gt;PATH&lt;/code&gt;, and installs the latest LTS Node.js version.&lt;/p&gt; &#xA;&lt;p&gt;As a result, both &lt;code&gt;n&lt;/code&gt; itself and all Node.js versions it manages are hosted inside a single, optionally configurable directory, which you can later remove with the included &lt;code&gt;n-uninstall&lt;/code&gt; script. &lt;code&gt;n-update&lt;/code&gt; updates &lt;code&gt;n&lt;/code&gt; itself to the latest version. See the &lt;a href=&#34;https://github.com/mklement0/n-install&#34;&gt;n-install repo&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Installing Node.js Versions&lt;/h2&gt; &#xA;&lt;p&gt;Simply execute &lt;code&gt;n &amp;lt;version&amp;gt;&lt;/code&gt; to download and install a version of Node.js. If &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; has already been downloaded, &lt;code&gt;n&lt;/code&gt; will install from its cache.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;n 10.16.0&#xA;n lts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Execute &lt;code&gt;n&lt;/code&gt; on its own to view your downloaded versions, and install the selected version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ n&#xA;&#xA;  node/4.9.1&#xA;ο node/8.11.3&#xA;  node/10.15.0&#xA;&#xA;Use up/down arrow keys to select a version, return key to install, d to delete, q to quit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(You can also use &lt;kbd&gt;j&lt;/kbd&gt; and &lt;kbd&gt;k&lt;/kbd&gt; to select next or previous version instead of using arrows, or &lt;kbd&gt;ctrl+n&lt;/kbd&gt; and &lt;kbd&gt;ctrl+p&lt;/kbd&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;If the active node version does not change after install, try opening a new shell in case seeing a stale version.&lt;/p&gt; &#xA;&lt;h2&gt;Specifying Node.js Versions&lt;/h2&gt; &#xA;&lt;p&gt;There are a variety of ways of specifying the target Node.js version for &lt;code&gt;n&lt;/code&gt; commands. Most commands use the latest matching version, and &lt;code&gt;n ls-remote&lt;/code&gt; lists multiple matching versions.&lt;/p&gt; &#xA;&lt;p&gt;Numeric version numbers can be complete or incomplete, with an optional leading &lt;code&gt;v&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;4.9.1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;8&lt;/code&gt;: 8.x.y versions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v6.1&lt;/code&gt;: 6.1.x versions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are labels for two especially useful versions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lts&lt;/code&gt;: newest Long Term Support official release&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;latest&lt;/code&gt;, &lt;code&gt;current&lt;/code&gt;: newest official release&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There is an &lt;code&gt;auto&lt;/code&gt; label to read the target version from a file in the current directory, or any parent directory. &lt;code&gt;n&lt;/code&gt; looks for in order:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;.n-node-version&lt;/code&gt;: version on single line. Custom to &lt;code&gt;n&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.node-version&lt;/code&gt;: version on single line. Used by multiple tools: &lt;a href=&#34;https://github.com/shadowspawn/node-version-usage&#34;&gt;node-version-usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.nvmrc&lt;/code&gt;: version on single line. Used by &lt;code&gt;nvm&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;if no version file found, look for &lt;code&gt;engine&lt;/code&gt; as below.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;engine&lt;/code&gt; label looks for a &lt;code&gt;package.json&lt;/code&gt; file and reads the &lt;code&gt;engines&lt;/code&gt; field to determine compatible Node.js. Requires an installed version of &lt;code&gt;node&lt;/code&gt;, and uses &lt;code&gt;npx semver&lt;/code&gt; to resolve complex ranges.&lt;/p&gt; &#xA;&lt;p&gt;There is support for the named release streams:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;argon&lt;/code&gt;, &lt;code&gt;boron&lt;/code&gt;, &lt;code&gt;carbon&lt;/code&gt;: codenames for LTS release streams&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These Node.js support aliases may be used, although simply resolve to the latest matching version:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;active&lt;/code&gt;, &lt;code&gt;lts_active&lt;/code&gt;, &lt;code&gt;lts_latest&lt;/code&gt;, &lt;code&gt;lts&lt;/code&gt;, &lt;code&gt;current&lt;/code&gt;, &lt;code&gt;supported&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The last version form is for specifying &lt;a href=&#34;https://nodejs.org/download&#34;&gt;other releases&lt;/a&gt; available using the name of the remote download folder optionally followed by the complete or incomplete version.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;nightly&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;test/v11.0.0-test20180528&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rc/10&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Removing Versions&lt;/h2&gt; &#xA;&lt;p&gt;Remove some cached versions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;n rm 0.9.4 v0.10.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Removing all cached versions except the installed version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;n prune&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remove the installed Node.js (does not affect the cached versions). This can be useful to revert to the system version of node (if in a different location), or if you no longer wish to use node and npm, or are switching to a different way of managing them.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;n uninstall&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using Downloaded Node.js Versions Without Reinstalling&lt;/h2&gt; &#xA;&lt;p&gt;There are three commands for working directly with your downloaded versions of Node.js, without reinstalling.&lt;/p&gt; &#xA;&lt;p&gt;You can show the path to the downloaded &lt;code&gt;node&lt;/code&gt; version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ n which 6.14.3&#xA;/usr/local/n/versions/6.14.3/bin/node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or run a downloaded &lt;code&gt;node&lt;/code&gt; version with the &lt;code&gt;n run&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;n run 8.11.3 --debug some.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or execute a command with &lt;code&gt;PATH&lt;/code&gt; modified so &lt;code&gt;node&lt;/code&gt; and &lt;code&gt;npm&lt;/code&gt; will be from the downloaded Node.js version. (NB: &lt;code&gt;npm&lt;/code&gt; run this way will be using global node_modules from the target node version folder.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;n exec 10 my-script --fast test&#xA;n exec lts zsh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Preserving npm&lt;/h2&gt; &#xA;&lt;p&gt;A Node.js install normally also includes &lt;code&gt;npm&lt;/code&gt;, &lt;code&gt;npx&lt;/code&gt;, and &lt;code&gt;corepack&lt;/code&gt;, but you may wish to preserve your current (especially newer) versions using &lt;code&gt;--preserve&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ npm install -g npm@latest&#xA;...&#xA;$ npm --version&#xA;6.13.7&#xA;# Node.js 8.17.0 includes (older) npm 6.13.4&#xA;$ n -p 8&#xA;   installed : v8.17.0&#xA;$ npm --version&#xA;6.13.7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can make this the default by setting the environment variable to a non-empty string. There are separate environment variables for &lt;code&gt;npm&lt;/code&gt; and &lt;code&gt;corepack&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export N_PRESERVE_NPM=1&#xA;export N_PRESERVE_COREPACK=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can be explicit to get the desired behaviour whatever the environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;n --preserve nightly&#xA;n --no-preserve latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Miscellaneous&lt;/h2&gt; &#xA;&lt;p&gt;Command line help can be obtained from &lt;code&gt;n --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;List matching remote versions available for download:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;n ls-remote lts&#xA;n ls-remote latest&#xA;n lsr 10&#xA;n --all lsr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;List downloaded versions in cache:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;n ls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Display diagnostics to help resolve problems:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;n doctor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom Source&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to use a different Node.js mirror which has the same layout as the default &lt;a href=&#34;https://nodejs.org/dist/&#34;&gt;https://nodejs.org/dist/&lt;/a&gt;, you can define &lt;code&gt;N_NODE_MIRROR&lt;/code&gt;. The most common example is from users in China who can define:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export N_NODE_MIRROR=https://npmmirror.com/mirrors/node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the custom mirror requires authentication you can add the &lt;a href=&#34;https://urlencode.org&#34;&gt;url-encoded&lt;/a&gt; username and password into the URL. e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export N_NODE_MIRROR=https://encoded-username:encoded-password@host:port/path&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is also &lt;code&gt;N_NODE_DOWNLOAD_MIRROR&lt;/code&gt; for a different mirror with same layout as the default &lt;a href=&#34;https://nodejs.org/download&#34;&gt;https://nodejs.org/download&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Custom Architecture&lt;/h2&gt; &#xA;&lt;p&gt;By default &lt;code&gt;n&lt;/code&gt; picks the binaries matching your system architecture. For example, on a 64 bit system &lt;code&gt;n&lt;/code&gt; will download 64 bit binaries.&lt;/p&gt; &#xA;&lt;p&gt;On a Mac with Apple silicon:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;for Node.js 16 and higher, &lt;code&gt;n&lt;/code&gt; defaults to arm64 binaries which run natively&lt;/li&gt; &#xA; &lt;li&gt;for older versions of Node.js, &lt;code&gt;n&lt;/code&gt; defaults to x64 binaries which run in Rosetta 2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can override the default architecture by using the &lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--arch&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;e.g. reinstall latest version of Node.js with x64 binaries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;n rm current&#xA;n --arch x64 current&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Optional Environment Variables&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;n&lt;/code&gt; command downloads and installs to &lt;code&gt;/usr/local&lt;/code&gt; by default, but you may override this location by defining &lt;code&gt;N_PREFIX&lt;/code&gt;. To change the location to say &lt;code&gt;$HOME/.n&lt;/code&gt;, add lines like the following to your shell initialization file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export N_PREFIX=$HOME/.n&#xA;export PATH=$N_PREFIX/bin:$PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to store the downloads under a different location, use &lt;code&gt;N_CACHE_PREFIX&lt;/code&gt;. This does &lt;em&gt;not&lt;/em&gt; affect the currently active node version.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;n&lt;/code&gt; defaults to using xz compressed Node.js tarballs for the download if it is likely tar on the system supports xz decompression. You can override the automatic choice by setting an environment variable to zero or non-zero:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export N_USE_XZ=0 # to disable&#xA;export N_USE_XZ=1 # to enable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can be explicit to get the desired behaviour whatever the environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;n install --use-xz nightly&#xA;n install --no-use-xz latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In brief:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;N_NODE_MIRROR&lt;/code&gt;: See &lt;a href=&#34;https://raw.githubusercontent.com/tj/n/master/#custom-source&#34;&gt;Custom source&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;N_NODE_DOWNLOAD_MIRROR&lt;/code&gt;: See &lt;a href=&#34;https://raw.githubusercontent.com/tj/n/master/#custom-source&#34;&gt;Custom source&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;support for &lt;a href=&#34;https://no-color.org&#34;&gt;NO_COLOR&lt;/a&gt; and &lt;a href=&#34;https://bixense.com/clicolors&#34;&gt;CLICOLOR=0&lt;/a&gt; for controlling use of ANSI color codes&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;N_MAX_REMOTE_MATCHES&lt;/code&gt; to change the default &lt;code&gt;ls-remote&lt;/code&gt; maximum of 20 matching versions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;N_PRESERVE_NPM&lt;/code&gt;: See &lt;a href=&#34;https://raw.githubusercontent.com/tj/n/master/#preserving-npm&#34;&gt;Preserving npm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;N_PRESERVE_COREPACK&lt;/code&gt;: See &lt;a href=&#34;https://raw.githubusercontent.com/tj/n/master/#preserving-npm&#34;&gt;Preserving npm&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How It Works&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;n&lt;/code&gt; downloads a prebuilt Node.js package and installs to a single prefix (e.g. &lt;code&gt;/usr/local&lt;/code&gt;). This overwrites the previous version. The &lt;code&gt;bin&lt;/code&gt; folder in this location should be in your &lt;code&gt;PATH&lt;/code&gt; (e.g. &lt;code&gt;/usr/local/bin&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The downloads are kept in a cache folder to be used for reinstalls. The downloads are also available for limited use using &lt;code&gt;n which&lt;/code&gt; and &lt;code&gt;n run&lt;/code&gt; and &lt;code&gt;n exec&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The global &lt;code&gt;npm&lt;/code&gt; packages are not changed by the install, with the exception of &lt;code&gt;npm&lt;/code&gt; itself which is part of the Node.js install.&lt;/p&gt;</summary>
  </entry>
</feed>