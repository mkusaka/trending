<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-20T01:56:30Z</updated>
  <subtitle>Weekly Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ohmybash/oh-my-bash</title>
    <updated>2023-08-20T01:56:30Z</updated>
    <id>tag:github.com,2023-08-20:/ohmybash/oh-my-bash</id>
    <link href="https://github.com/ohmybash/oh-my-bash" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A delightful community-driven framework for managing your bash configuration, and an auto-update tool so that makes it easy to keep up with the latest updates from the community.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Oh My Bash is an open source, community-driven framework for managing your &lt;a href=&#34;https://www.gnu.org/software/bash/&#34;&gt;bash&lt;/a&gt; configuration.&lt;/p&gt; &#xA;&lt;p&gt;Sounds boring. Let&#39;s try again.&lt;/p&gt; &#xA;&lt;p&gt;Oh My Bash will not make you a 10x developer...but you might feel like one.&lt;/p&gt; &#xA;&lt;p&gt;Once installed, your terminal shell will become the talk of the town or your money back! With each keystroke in your command prompt, you&#39;ll take advantage of the hundreds of powerful plugins and beautiful themes. Strangers will come up to you in cafés and ask you, &#34;that is amazing! are you some sort of genius?&#34;&lt;/p&gt; &#xA;&lt;p&gt;Finally, you&#39;ll begin to get the sort of attention that you have always felt you deserved. ...or maybe you&#39;ll use the time that you&#39;re saving to start flossing more often.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; &lt;em&gt;Oh My Bash works best on macOS and Linux.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unix-like operating system (macOS or Linux)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;curl&lt;/code&gt; or &lt;code&gt;wget&lt;/code&gt; should be installed&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git&lt;/code&gt; should be installed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Basic Installation&lt;/h3&gt; &#xA;&lt;p&gt;Oh My Bash is installed by running one of the following commands in your terminal. You can install this via the command-line with either &lt;code&gt;curl&lt;/code&gt; or &lt;code&gt;wget&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;via curl&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bash -c &#34;$(curl -fsSL https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;via wget&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bash -c &#34;$(wget https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh -O -)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This replaces &lt;code&gt;~/.bashrc&lt;/code&gt; with the version provided by Oh My Bash. The original &lt;code&gt;.bashrc&lt;/code&gt; is backed up with the name &lt;code&gt;~/.bashrc.omb-TIMESTAMP&lt;/code&gt;. If &lt;code&gt;~/.bash_profile&lt;/code&gt; does not exist, this also creates a new file &lt;code&gt;~/.bash_profile&lt;/code&gt; with the default contents.&lt;/p&gt; &#xA;&lt;p&gt;⚠️ If &lt;code&gt;~/.bash_profile&lt;/code&gt; already existed before Oh My Bash is installed, please make sure that&lt;code&gt;~/.bash_profile&lt;/code&gt; contains the line &lt;code&gt;source ~/.bashrc&lt;/code&gt; or &lt;code&gt;. ~/.bashrc&lt;/code&gt;. If not, please add the following three lines in &lt;code&gt;~/.bash_profile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if [[ -f ~/.bashrc ]]; then&#xA;  source ~/.bashrc&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using Oh My Bash&lt;/h2&gt; &#xA;&lt;h3&gt;Plugins&lt;/h3&gt; &#xA;&lt;p&gt;Oh My Bash comes with a shit load of plugins to take advantage of. You can take a look in the &lt;a href=&#34;https://github.com/ohmybash/oh-my-bash/tree/master/plugins&#34;&gt;plugins&lt;/a&gt; directory and/or the &lt;a href=&#34;https://github.com/ohmybash/oh-my-bash/wiki/Plugins&#34;&gt;wiki&lt;/a&gt; to see what&#39;s currently available.&lt;/p&gt; &#xA;&lt;h4&gt;Enabling Plugins&lt;/h4&gt; &#xA;&lt;p&gt;Once you spot a plugin (or several) that you&#39;d like to use with Oh My Bash, you&#39;ll need to enable them in the &lt;code&gt;.bashrc&lt;/code&gt; file. You&#39;ll find the bashrc file in your &lt;code&gt;$HOME&lt;/code&gt; directory. Open it with your favorite text editor and you&#39;ll see a spot to list all the plugins you want to load.&lt;/p&gt; &#xA;&lt;p&gt;For example, this line might begin to look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;plugins=(git bundler osx rake ruby)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;With Conditionals&lt;/h5&gt; &#xA;&lt;p&gt;You may want to control when and/or how plugins should be enabled.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you want the &lt;code&gt;tmux-autoattach&lt;/code&gt; plugin to only run on SSH sessions, you could employ a trivial conditional that checks for the &lt;code&gt;$SSH_TTY&lt;/code&gt; variable. Just make sure to remove the plugin from the larger plugin list.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[ &#34;$SSH_TTY&#34; ] &amp;amp;&amp;amp; plugins+=(tmux-autoattach)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using Plugins&lt;/h4&gt; &#xA;&lt;p&gt;Most plugins (should! we&#39;re working on this) include a &lt;strong&gt;README&lt;/strong&gt;, which documents how to use them.&lt;/p&gt; &#xA;&lt;h3&gt;Themes&lt;/h3&gt; &#xA;&lt;p&gt;We&#39;ll admit it. Early in the Oh My Bash world, we may have gotten a bit too theme happy. We have over one hundred themes now bundled. Most of them have &lt;a href=&#34;https://github.com/ohmybash/oh-my-bash/wiki/Themes&#34;&gt;screenshots&lt;/a&gt; on our wiki or alternatively &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh/wiki/themes&#34;&gt;oh-my-zsh&lt;/a&gt; wiki.&lt;/p&gt; &#xA;&lt;h4&gt;Selecting a Theme&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;Powerline&#39;s theme is the default one. It&#39;s not the fanciest one. It&#39;s not the simplest one. It&#39;s just the right one (for me).&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once you find a theme that you want to use, you will need to edit the &lt;code&gt;~/.bashrc&lt;/code&gt; file. You&#39;ll see an environment variable (all caps) in there that looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;OSH_THEME=&#34;powerline&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use a different theme, simply change the value to match the name of your desired theme. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;OSH_THEME=&#34;agnoster&#34; # (this is one of the fancy ones)&#xA;# you might need to install a special Powerline font on your console&#39;s host for this to work&#xA;# see https://github.com/ohmybash/oh-my-bash/wiki/Themes#agnoster&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open up a new terminal window and your prompt should look something like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/img/example_powerline.png&#34; alt=&#34;Agnoster theme&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In case you did not find a suitable theme for your needs, please have a look at the wiki for &lt;a href=&#34;https://github.com/ohmybash/oh-my-bash/wiki/External-themes&#34;&gt;more of them&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re feeling feisty, you can let the computer select one randomly for you each time you open a new terminal window.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;OSH_THEME=&#34;random&#34; # (...please let it be pie... please be some pie..)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The selected theme name can be checked by the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ echo &#34;$OMB_THEME_RANDOM_SELECTED&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced Topics&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re the type that likes to get their hands dirty, these sections might resonate.&lt;/p&gt; &#xA;&lt;h3&gt;Advanced Installation&lt;/h3&gt; &#xA;&lt;p&gt;Some users may want to change the default path, or manually install Oh My Bash.&lt;/p&gt; &#xA;&lt;h4&gt;Custom Directory&lt;/h4&gt; &#xA;&lt;p&gt;The default location is &lt;code&gt;~/.oh-my-bash&lt;/code&gt; (hidden in your home directory)&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to change the install directory with the &lt;code&gt;OSH&lt;/code&gt; environment variable, either by running &lt;code&gt;export OSH=/your/path&lt;/code&gt; before installing, or by setting it before the end of the install pipeline like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export OSH=&#34;$HOME/.dotfiles/oh-my-bash&#34;; bash -c &#34;$(curl -fsSL https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Unattended install&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re running the Oh My Bash install script as part of an automated install, you can pass the flag &lt;code&gt;--unattended&lt;/code&gt; to the &lt;code&gt;install.sh&lt;/code&gt; script. This will have the effect of not trying to change the default shell, and also won&#39;t run &lt;code&gt;bash&lt;/code&gt; when the installation has finished.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bash -c &#34;$(curl -fsSL https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh)&#34; --unattended&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;System-wide installation&lt;/h4&gt; &#xA;&lt;p&gt;For example, Oh My Bash can be installed to &lt;code&gt;/usr/local/share/oh-my-bash&lt;/code&gt; for the system-wide installation by specifying the option &lt;code&gt;--prefix=PREFIX&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bash -c &#34;$(curl -fsSL https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh)&#34; --prefix=/usr/local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable Oh My Bash, the Bash startup file &lt;code&gt;.bashrc&lt;/code&gt; needs to be manually set up by each user. The template of &lt;code&gt;.bashrc&lt;/code&gt; is available in &lt;code&gt;PREFIX/share/oh-my-bash/bashrc&lt;/code&gt;. The users can copy the template file to &lt;code&gt;~/.bashrc&lt;/code&gt; and edit it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp /usr/local/share/oh-my-bash/bashrc ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Manual Installation&lt;/h4&gt; &#xA;&lt;h5&gt;1. Clone the repository:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/ohmybash/oh-my-bash.git ~/.oh-my-bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;2. &lt;em&gt;Optionally&lt;/em&gt;, backup your existing &lt;code&gt;~/.bashrc&lt;/code&gt; file:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cp ~/.bashrc ~/.bashrc.orig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;3. Create a new sh configuration file&lt;/h5&gt; &#xA;&lt;p&gt;You can create a new sh config file by copying the template that we have included for you.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cp ~/.oh-my-bash/templates/bashrc.osh-template ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;4. Reload your .bashrc&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;source ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;5. Initialize your new bash configuration&lt;/h5&gt; &#xA;&lt;p&gt;Once you open up a new terminal window, it should load sh with Oh My Bash&#39;s configuration.&lt;/p&gt; &#xA;&lt;h3&gt;Installation Problems&lt;/h3&gt; &#xA;&lt;p&gt;If you have any hiccups installing, here are a few common fixes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You &lt;em&gt;might&lt;/em&gt; need to modify your &lt;code&gt;PATH&lt;/code&gt; in &lt;code&gt;~/.bashrc&lt;/code&gt; if you&#39;re not able to find some commands after switching to &lt;code&gt;oh-my-bash&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you installed manually or changed the install location, check the &lt;code&gt;OSH&lt;/code&gt; environment variable in &lt;code&gt;~/.bashrc&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Customization of Plugins and Themes&lt;/h3&gt; &#xA;&lt;p&gt;If you want to override any of the default behaviors, just add a new file (ending in &lt;code&gt;.sh&lt;/code&gt;) in the &lt;code&gt;custom/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;If you have many functions that go well together, you can put them as a &lt;code&gt;XYZ.plugin.sh&lt;/code&gt; file in the &lt;code&gt;custom/plugins/&lt;/code&gt; directory and then enable this plugin.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to modify an existing module (theme/plugin/aliases/completion) bundled with Oh My Bash, first copy the original module to &lt;code&gt;custom/&lt;/code&gt; directory and modify it. It will be loaded instead of the original one.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir -p &#34;$OSH_CUSTOM/themes&#34;&#xA;$ cp -r {&#34;$OSH&#34;,&#34;$OSH_CUSTOM&#34;}/themes/agnoster&#xA;$ EDIT &#34;$OSH_CUSTOM/themes/agnoster/agnoster.theme.sh&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you would like to track the upstream changes for your customized version of modules, you can optionally directly edit the original files and commit them. In this case, you need to handle possible conflicts with the upstream in upgrading.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to replace an existing module (theme/plugin/aliases/complet) bundled with Oh My Bash, create a module of the same name in the &lt;code&gt;custom/&lt;/code&gt; directory so that it will be loaded instead of the original one.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;h4&gt;Enable/disable python venv&lt;/h4&gt; &#xA;&lt;p&gt;The python virtualenv/condaenv information in the prompt may be enabled by the following line in &lt;code&gt;~/.bashrc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;OMB_PROMPT_SHOW_PYTHON_VENV=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some themes turn on it by default. If you would like to turn it off, you may disable it by the following line in &lt;code&gt;~/.bashrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;OMB_PROMPT_SHOW_PYTHON_VENV=false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Disable internal uses of &lt;code&gt;sudo&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Some plugins of oh-my-bash internally use &lt;code&gt;sudo&lt;/code&gt; when it is necessary. However, this might clutter with the &lt;code&gt;sudo&lt;/code&gt; log. To disable the use of &lt;code&gt;sudo&lt;/code&gt; by oh-my-bash, &lt;code&gt;OMB_USE_SUDO&lt;/code&gt; can be set to &lt;code&gt;false&lt;/code&gt; in &lt;code&gt;~/.bashrc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;OMB_USE_SUDO=false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each plugin might provides finer configuration variables to control the use of &lt;code&gt;sudo&lt;/code&gt; by each plugin.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Updates&lt;/h2&gt; &#xA;&lt;p&gt;By default, you will be prompted to check for upgrades every few weeks. If you would like &lt;code&gt;oh-my-bash&lt;/code&gt; to automatically upgrade itself without prompting you, set the following in your &lt;code&gt;~/.bashrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;DISABLE_UPDATE_PROMPT=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To disable automatic upgrades, set the following in your &lt;code&gt;~/.bashrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;DISABLE_AUTO_UPDATE=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual Updates&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d like to upgrade at any point in time (maybe someone just released a new plugin and you don&#39;t want to wait a week?) you just need to run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;upgrade_oh_my_bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Magic!&lt;/p&gt; &#xA;&lt;h2&gt;Uninstalling Oh My Bash&lt;/h2&gt; &#xA;&lt;p&gt;Oh My Bash isn&#39;t for everyone. We&#39;ll miss you, but we want to make this an easy breakup.&lt;/p&gt; &#xA;&lt;p&gt;If you want to uninstall &lt;code&gt;oh-my-bash&lt;/code&gt;, just run &lt;code&gt;uninstall_oh_my_bash&lt;/code&gt; from the command-line. It will remove itself and revert your previous &lt;code&gt;bash&lt;/code&gt; configuration.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;m far from being a &lt;a href=&#34;https://www.gnu.org/software/bash/&#34;&gt;Bash&lt;/a&gt; expert and suspect there are many ways to improve – if you have ideas on how to make the configuration easier to maintain (and faster), don&#39;t hesitate to fork and send pull requests!&lt;/p&gt; &#xA;&lt;p&gt;We also need people to test out pull-requests. So take a look through &lt;a href=&#34;https://github.com/ohmybash/oh-my-bash/issues&#34;&gt;the open issues&lt;/a&gt; and help where you can.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Oh My Bash has a vibrant community of happy users and delightful contributors. Without all the time and help from our contributors, it wouldn&#39;t be so awesome.&lt;/p&gt; &#xA;&lt;p&gt;Thank you so much!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Oh My Bash is derived from &lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh&#34;&gt;Oh My Zsh&lt;/a&gt;. Oh My Bash is released under the &lt;a href=&#34;https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/LICENSE.md&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>iamwithyou11/Bruteinsta</title>
    <updated>2023-08-20T01:56:30Z</updated>
    <id>tag:github.com,2023-08-20:/iamwithyou11/Bruteinsta</id>
    <link href="https://github.com/iamwithyou11/Bruteinsta" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This an Instagram Bruteforcing tool&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bruteinsta&lt;/h1&gt; &#xA;&lt;p&gt;Instagram contained two distinct vulnerabilities that allowed an attacker to brute-force passwords of user accounts. Combined with user enumeration, a weak password policy no 2FA nor other mitigating security controls, this could have allowed an attacker to compromise many accounts without any user interaction, including high-profile ones. Facebook fixed both issues and awarded a combined bounty. Download&amp;amp;install&lt;/p&gt; &#xA;&lt;p&gt;1)apt-get install tor&lt;/p&gt; &#xA;&lt;p&gt;2)git clone:&lt;a href=&#34;https://github.com/iamwithyou11/Bruteinsta&#34;&gt;https://github.com/iamwithyou11/Bruteinsta&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;3)tor (run this tor service in another terminal)&lt;/p&gt; &#xA;&lt;p&gt;4)cd InstaBrute&lt;/p&gt; &#xA;&lt;p&gt;5)chmod +x insta.sh&lt;/p&gt; &#xA;&lt;p&gt;6)./insta.sh&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/71940288/220846940-f3c0e66f-505d-45e3-b711-bd001bf95a50.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Disclaimer:This tool is only intended only for educational purposes.Usage of tool for Illegal activities is strictly prohibited and author of this tool is not responsible for any kind of malicious activites&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google/oss-fuzz</title>
    <updated>2023-08-20T01:56:30Z</updated>
    <id>tag:github.com,2023-08-20:/google/oss-fuzz</id>
    <link href="https://github.com/google/oss-fuzz" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OSS-Fuzz - continuous fuzzing for open source software.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OSS-Fuzz: Continuous Fuzzing for Open Source Software&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Fuzz_testing&#34;&gt;Fuzz testing&lt;/a&gt; is a well-known technique for uncovering programming errors in software. Many of these detectable errors, like &lt;a href=&#34;https://en.wikipedia.org/wiki/Buffer_overflow&#34;&gt;buffer overflow&lt;/a&gt;, can have serious security implications. Google has found &lt;a href=&#34;https://bugs.chromium.org/p/chromium/issues/list?q=label%3AStability-LibFuzzer%2CStability-AFL%20-status%3ADuplicate%2CWontFix&amp;amp;can=1&#34;&gt;thousands&lt;/a&gt; of security vulnerabilities and stability bugs by deploying &lt;a href=&#34;https://security.googleblog.com/2016/08/guided-in-process-fuzzing-of-chrome.html&#34;&gt;guided in-process fuzzing of Chrome components&lt;/a&gt;, and we now want to share that service with the open source community.&lt;/p&gt; &#xA;&lt;p&gt;In cooperation with the &lt;a href=&#34;https://www.coreinfrastructure.org/&#34;&gt;Core Infrastructure Initiative&lt;/a&gt; and the &lt;a href=&#34;https://www.openssf.org/&#34;&gt;OpenSSF&lt;/a&gt;, OSS-Fuzz aims to make common open source software more secure and stable by combining modern fuzzing techniques with scalable, distributed execution. Projects that do not qualify for OSS-Fuzz (e.g. closed source) can run their own instances of &lt;a href=&#34;https://github.com/google/clusterfuzz&#34;&gt;ClusterFuzz&lt;/a&gt; or &lt;a href=&#34;https://google.github.io/clusterfuzzlite/&#34;&gt;ClusterFuzzLite&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We support the &lt;a href=&#34;https://llvm.org/docs/LibFuzzer.html&#34;&gt;libFuzzer&lt;/a&gt;, &lt;a href=&#34;https://github.com/AFLplusplus/AFLplusplus&#34;&gt;AFL++&lt;/a&gt;, and &lt;a href=&#34;https://github.com/google/honggfuzz&#34;&gt;Honggfuzz&lt;/a&gt; fuzzing engines in combination with &lt;a href=&#34;https://github.com/google/sanitizers&#34;&gt;Sanitizers&lt;/a&gt;, as well as &lt;a href=&#34;https://github.com/google/clusterfuzz&#34;&gt;ClusterFuzz&lt;/a&gt;, a distributed fuzzer execution environment and reporting tool.&lt;/p&gt; &#xA;&lt;p&gt;Currently, OSS-Fuzz supports C/C++, Rust, Go, Python, Java/JVM, and JavaScript code. Other languages supported by &lt;a href=&#34;https://llvm.org&#34;&gt;LLVM&lt;/a&gt; may work too. OSS-Fuzz supports fuzzing x86_64 and i386 builds.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/google/oss-fuzz/master/docs/images/process.png&#34; alt=&#34;OSS-Fuzz process diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Read our &lt;a href=&#34;https://google.github.io/oss-fuzz&#34;&gt;detailed documentation&lt;/a&gt; to learn how to use OSS-Fuzz.&lt;/p&gt; &#xA;&lt;h2&gt;Trophies&lt;/h2&gt; &#xA;&lt;p&gt;As of August 2023, OSS-Fuzz has helped identify and fix over &lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?q=Type%3DBug-Security%20label%3Aclusterfuzz%20-status%3ADuplicate%2CWontFix&amp;amp;can=1&#34;&gt;10,000&lt;/a&gt; vulnerabilities and &lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?q=Type%3DBug%20label%3Aclusterfuzz%20-status%3ADuplicate%2CWontFix&amp;amp;can=1&#34;&gt;36,000&lt;/a&gt; bugs across &lt;a href=&#34;https://github.com/google/oss-fuzz/tree/master/projects&#34;&gt;1,000&lt;/a&gt; projects.&lt;/p&gt; &#xA;&lt;h2&gt;Blog posts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2023-08-16 - &lt;a href=&#34;https://security.googleblog.com/2023/08/ai-powered-fuzzing-breaking-bug-hunting.html&#34;&gt;AI-Powered Fuzzing: Breaking the Bug Hunting Barrier&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2023-02-01 - &lt;a href=&#34;https://security.googleblog.com/2023/02/taking-next-step-oss-fuzz-in-2023.html&#34;&gt;Taking the next step: OSS-Fuzz in 2023&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2022-09-08 - &lt;a href=&#34;https://security.googleblog.com/2022/09/fuzzing-beyond-memory-corruption.html&#34;&gt;Fuzzing beyond memory corruption: Finding broader classes of vulnerabilities automatically&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2021-12-16 - &lt;a href=&#34;https://security.googleblog.com/2021/12/improving-oss-fuzz-and-jazzer-to-catch.html&#34;&gt;Improving OSS-Fuzz and Jazzer to catch Log4Shell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2021-03-10 - &lt;a href=&#34;https://security.googleblog.com/2021/03/fuzzing-java-in-oss-fuzz.html&#34;&gt;Fuzzing Java in OSS-Fuzz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-12-07 - &lt;a href=&#34;https://security.googleblog.com/2020/12/improving-open-source-security-during.html&#34;&gt;Improving open source security during the Google summer internship program&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2020-10-09 - &lt;a href=&#34;https://security.googleblog.com/2020/10/fuzzing-internships-for-open-source.html&#34;&gt;Fuzzing internships for Open Source Software&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2018-11-06 - &lt;a href=&#34;https://security.googleblog.com/2018/11/a-new-chapter-for-oss-fuzz.html&#34;&gt;A New Chapter for OSS-Fuzz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2017-05-08 - &lt;a href=&#34;https://opensource.googleblog.com/2017/05/oss-fuzz-five-months-later-and.html&#34;&gt;OSS-Fuzz: Five months later, and rewarding projects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2016-12-01 - &lt;a href=&#34;https://opensource.googleblog.com/2016/12/announcing-oss-fuzz-continuous-fuzzing.html&#34;&gt;Announcing OSS-Fuzz: Continuous fuzzing for open source software&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>