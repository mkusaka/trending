<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-10T02:22:33Z</updated>
  <subtitle>Weekly Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ahmetb/kubectl-aliases</title>
    <updated>2022-07-10T02:22:33Z</updated>
    <id>tag:github.com,2022-07-10:/ahmetb/kubectl-aliases</id>
    <link href="https://github.com/ahmetb/kubectl-aliases" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Programmatically generated handy kubectl aliases.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;kubectl-aliases&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains &lt;a href=&#34;https://raw.githubusercontent.com/ahmetb/kubectl-aliases/master/generate_aliases.py&#34;&gt;a script&lt;/a&gt; to generate hundreds of convenient shell aliases for kubectl, so you no longer need to spell out every single command and --flag over and over again.&lt;/p&gt; &#xA;&lt;p&gt;An example shell alias created from command/flags permutation looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;alias ksysgdepwslowidel=&#39;kubectl --namespace=kube-system get deployment --watch --show-labels -o=wide -l&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Confused? Read on.&lt;/p&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;p&gt;Some of the 800 generated aliases are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;alias k=&#39;kubectl&#39;&#xA;alias kg=&#39;kubectl get&#39;&#xA;alias kgpo=&#39;kubectl get pod&#39;&#xA;&#xA;alias ksysgpo=&#39;kubectl --namespace=kube-system get pod&#39;&#xA;&#xA;alias krm=&#39;kubectl delete&#39;&#xA;alias krmf=&#39;kubectl delete -f&#39;&#xA;alias krming=&#39;kubectl delete ingress&#39;&#xA;alias krmingl=&#39;kubectl delete ingress -l&#39;&#xA;alias krmingall=&#39;kubectl delete ingress --all-namespaces&#39;&#xA;&#xA;alias kgsvcoyaml=&#39;kubectl get service -o=yaml&#39;&#xA;alias kgsvcwn=&#39;kubectl get service --watch --namespace&#39;&#xA;alias kgsvcslwn=&#39;kubectl get service --show-labels --watch --namespace&#39;&#xA;&#xA;alias kgwf=&#39;kubectl get --watch -f&#39;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/ahmetb/kubectl-aliases/master/.kubectl_aliases&#34;&gt;the full list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;You can directly download the &lt;a href=&#34;https://raw.githubusercontent.com/ahmetb/kubectl-aliases/master/.kubectl_aliases&#34;&gt;&lt;code&gt;.kubectl_aliases&lt;/code&gt; file&lt;/a&gt; for bash/zsh or the &lt;a href=&#34;https://raw.githubusercontent.com/ahmetb/kubectl-aliases/master/.kubectl_aliases.fish&#34;&gt;&lt;code&gt;.kubectl_aliases.fish&lt;/code&gt; file&lt;/a&gt; for fish and save it to your &lt;code&gt;$HOME&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h4&gt;Bash/Zsh&lt;/h4&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;.bashrc/.zshrc&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[ -f ~/.kubectl_aliases ] &amp;amp;&amp;amp; source ~/.kubectl_aliases&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Recommendation:&lt;/strong&gt; If you want to use GNU &lt;code&gt;watch&lt;/code&gt; command instead of &lt;code&gt;kubectl [...] --watch&lt;/code&gt;, run it like this:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;[ -f ~/.kubectl_aliases ] &amp;amp;&amp;amp; source \&#xA;   &amp;lt;(cat ~/.kubectl_aliases | sed -r &#39;s/(kubectl.*) --watch/watch \1/g&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Print the full command before running it:&lt;/strong&gt; Add this to your &lt;code&gt;.bashrc&lt;/code&gt; or &lt;code&gt;.zshrc&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;function kubectl() { echo &#34;+ kubectl $@&#34;&amp;gt;&amp;amp;2; command kubectl $@; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Fish&lt;/h4&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fish&#34;&gt;test -f ~/.kubectl_aliases.fish &amp;amp;&amp;amp; source ~/.kubectl_aliases.fish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This actually adds the more powerful fish &lt;a href=&#34;https://fishshell.com/docs/current/cmds/abbr.html&#34;&gt;abbreviations&lt;/a&gt; instead of aliases, so that pressing space shows the full command before execution.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Recommendation:&lt;/strong&gt; If you want to use GNU &lt;code&gt;watch&lt;/code&gt; command instead of &lt;code&gt;kubectl [...] --watch&lt;/code&gt;, run it like this:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;test -f ~/.kubectl_aliases.fish &amp;amp;&amp;amp; source \&#xA;     (cat ~/.kubectl_aliases.fish | sed -r &#39;s/(kubectl.*) --watch/watch \1/g&#39; | psub)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Syntax explanation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;k&lt;/code&gt;&lt;/strong&gt;=&lt;code&gt;kubectl&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;sys&lt;/code&gt;&lt;/strong&gt;=&lt;code&gt;--namespace kube-system&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;commands: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;g&lt;/code&gt;&lt;/strong&gt;=&lt;code&gt;get&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;d&lt;/code&gt;&lt;/strong&gt;=&lt;code&gt;describe&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;rm&lt;/code&gt;&lt;/strong&gt;=&lt;code&gt;delete&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;a&lt;/code&gt;&lt;/strong&gt;:&lt;code&gt;apply -f&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;ak&lt;/code&gt;&lt;/strong&gt;:&lt;code&gt;apply -k&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;k&lt;/code&gt;&lt;/strong&gt;:&lt;code&gt;kustomize&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;ex&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;exec -i -t&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;lo&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;logs -f&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;resources: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;po&lt;/code&gt;&lt;/strong&gt;=pod, &lt;strong&gt;&lt;code&gt;dep&lt;/code&gt;&lt;/strong&gt;=&lt;code&gt;deployment&lt;/code&gt;, &lt;strong&gt;&lt;code&gt;ing&lt;/code&gt;&lt;/strong&gt;=&lt;code&gt;ingress&lt;/code&gt;, &lt;strong&gt;&lt;code&gt;svc&lt;/code&gt;&lt;/strong&gt;=&lt;code&gt;service&lt;/code&gt;, &lt;strong&gt;&lt;code&gt;cm&lt;/code&gt;&lt;/strong&gt;=&lt;code&gt;configmap&lt;/code&gt;, &lt;strong&gt;&lt;code&gt;sec&lt;/code&gt;&lt;/strong&gt;=&lt;code&gt;secret&lt;/code&gt;, &lt;strong&gt;&lt;code&gt;ns&lt;/code&gt;&lt;/strong&gt;=&lt;code&gt;namespace&lt;/code&gt;, &lt;strong&gt;&lt;code&gt;no&lt;/code&gt;&lt;/strong&gt;=&lt;code&gt;node&lt;/code&gt; &lt;strong&gt;&lt;span&gt;⚠&lt;/span&gt; Please do not suggest new resources here, instead fork the project.&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;flags: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;output format: &lt;strong&gt;&lt;code&gt;oyaml&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;ojson&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;owide&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;all&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;--all&lt;/code&gt; or &lt;code&gt;--all-namespaces&lt;/code&gt; depending on the command&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;sl&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;--show-labels&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;w&lt;/code&gt;&lt;/strong&gt;=&lt;code&gt;-w/--watch&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;value flags (should be at the end): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;n&lt;/code&gt;&lt;/strong&gt;=&lt;code&gt;-n/--namespace&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;f&lt;/code&gt;&lt;/strong&gt;=&lt;code&gt;-f/--filename&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;l&lt;/code&gt;&lt;/strong&gt;=&lt;code&gt;-l/--selector&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running the script&lt;/h3&gt; &#xA;&lt;p&gt;The script has only one optional argument, the shell to which the aliases will be generated. If not given, it assumes &lt;code&gt;bash&lt;/code&gt;. Ex:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Generate aliases for bash/zsh&#xA;python generate_aliases.py &amp;gt; .kubectl_aliases&#xA;&#xA;# Generate abbr for fish&#xA;python generate_aliases.py fish &amp;gt; .kubectl_aliases.fish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;FAQ&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Doesn&#39;t this slow down my shell start up?&lt;/strong&gt; Sourcing the file that contains ~500 aliases takes about 30-45 milliseconds in my shell (zsh). I don&#39;t think it&#39;s a big deal for me. Measure it with &lt;code&gt;echo $(($(date +%s%N)/1000000))&lt;/code&gt; command yourself in your .bashrc/.zshrc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Can I add more Kubernetes resource types to this?&lt;/strong&gt; Please consider forking this repo and adding the resource types you want. Not all resource types are used by everyone, and adding more resource types slows down shell initialization see above).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Where can I find PowerShell aliases for kubectl?&lt;/strong&gt; There’s a fork of this &lt;a href=&#34;https://github.com/shanoor/kubectl-aliases-powershell&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Authors&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/ahmetb&#34;&gt;@ahmetb&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;This is not an official Google project.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>DamionGans/ubuntu-wsl2-systemd-script</title>
    <updated>2022-07-10T02:22:33Z</updated>
    <id>tag:github.com,2022-07-10:/DamionGans/ubuntu-wsl2-systemd-script</id>
    <link href="https://github.com/DamionGans/ubuntu-wsl2-systemd-script" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Script to enable systemd support on current Ubuntu WSL2 images [Unsupported, no longer updated]&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ubuntu-wsl2-systemd-script&lt;/h1&gt; &#xA;&lt;p&gt;Script to enable systemd support on current Ubuntu WSL2 images from the Windows store. Script is unsupported and will no longer be maintained, but will be up here because it is used by quite some people. I am not responsible for broken installations, fights with your roommates and police ringing your door ;-).&lt;/p&gt; &#xA;&lt;p&gt;Instructions from &lt;a href=&#34;https://forum.snapcraft.io/t/running-snaps-on-wsl2-insiders-only-for-now/13033&#34;&gt;the snapcraft forum&lt;/a&gt; turned into a script. Thanks to &lt;a href=&#34;https://forum.snapcraft.io/u/daniel&#34;&gt;Daniel&lt;/a&gt; on the Snapcraft forum!&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You need &lt;code&gt;git&lt;/code&gt; to be installed for the commands below to work. Use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt install git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to do so.&lt;/p&gt; &#xA;&lt;h3&gt;Run the script and commands&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/DamionGans/ubuntu-wsl2-systemd-script.git&#xA;cd ubuntu-wsl2-systemd-script/&#xA;bash ubuntu-wsl2-systemd-script.sh&#xA;# Enter your password and wait until the script has finished&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Then restart the Ubuntu shell and try running systemctl&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;systemctl&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t get an error and see a list of units, the script worked.&lt;/p&gt; &#xA;&lt;p&gt;Have fun using systemd on your Ubuntu WSL2 image. You may use and change and distribute this script in whatever way you&#39;d like.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>confluentinc/examples</title>
    <updated>2022-07-10T02:22:33Z</updated>
    <id>tag:github.com,2022-07-10:/confluentinc/examples</id>
    <link href="https://github.com/confluentinc/examples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apache Kafka and Confluent Platform examples and demos&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/images/confluent-logo-300-2.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/#where-to-start&#34;&gt;Where to Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/#confluent-cloud&#34;&gt;Confluent Cloud&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/#stream-processing&#34;&gt;Stream Processing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/#data-pipelines&#34;&gt;Data Pipelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/#confluent-platform&#34;&gt;Confluent Platform&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/#build-your-own&#34;&gt;Build Your Own&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/#additional-demos&#34;&gt;Additional Demos&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;This is a curated list of demos that showcase Apache Kafka® event stream processing on the Confluent Platform, an event stream processing platform that enables you to process, organize, and manage massive amounts of streaming data across cloud, on-prem, and serverless deployments.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;http://www.youtube.com/watch?v=muQBd6gry0U&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/images/examples-video-thumbnail.jpg&#34; width=&#34;360&#34; height=&#34;270&#34; border=&#34;10&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Where to start&lt;/h1&gt; &#xA;&lt;p&gt;The best demo to start with is &lt;a href=&#34;https://github.com/confluentinc/cp-demo&#34;&gt;cp-demo&lt;/a&gt; which spins up a Kafka event streaming application using ksqlDB for stream processing, with many security features enabled, in an end-to-end streaming ETL pipeline with a source connector pulling from live data and a sink connector connecting to Elasticsearch and Kibana for visualizations. &lt;code&gt;cp-demo&lt;/code&gt; also comes with a tutorial and is a great configuration reference for Confluent Platform.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/confluentinc/cp-demo/5.4.1-post/docs/images/cp-demo-overview.jpg&#34; width=&#34;600&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Confluent Cloud&lt;/h1&gt; &#xA;&lt;p&gt;There are many examples from full end-to-end demos that create connectors, streams, and KSQL queries in Confluent Cloud, to resources that help you build your own demos. You can find the documentation and instructions for all Confluent Cloud demos at &lt;a href=&#34;https://docs.confluent.io/platform/current/tutorials/examples/ccloud/docs/ccloud-demos-overview.html?utm_source=github&amp;amp;utm_medium=demo&amp;amp;utm_campaign=ch.examples_type.community_content.top&#34;&gt;https://docs.confluent.io/platform/current/tutorials/examples/ccloud/docs/ccloud-demos-overview.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Demo&lt;/th&gt; &#xA;   &lt;th&gt;Local&lt;/th&gt; &#xA;   &lt;th&gt;Docker&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/ccloud/beginner-cloud/README.md#confluent-cloud-cli&#34;&gt;Confluent CLI&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Y&lt;/td&gt; &#xA;   &lt;td&gt;N&lt;/td&gt; &#xA;   &lt;td&gt;Fully automated demo interacting with your Confluent Cloud cluster using the Confluent CLI &lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/clients/cloud/images/confluent-cli.png&#34; width=&#34;300&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/clients/cloud/README.md&#34;&gt;Clients in Various Languages to Cloud&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/clients/cloud/README.md&#34;&gt;Y&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;N&lt;/td&gt; &#xA;   &lt;td&gt;Client applications, showcasing producers and consumers, in various programming languages connecting to &lt;a href=&#34;https://www.confluent.io/confluent-cloud/?utm_source=github&amp;amp;utm_medium=demo&amp;amp;utm_campaign=ch.examples_type.community_content.top&#34;&gt;Confluent Cloud&lt;/a&gt; &lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/clients/cloud/images/clients-all.png&#34; width=&#34;450&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/cloud-etl/README.md&#34;&gt;Cloud ETL&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/cloud-etl/README.md&#34;&gt;Y&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;N&lt;/td&gt; &#xA;   &lt;td&gt;Fully automated cloud ETL solution using Confluent Cloud connectors (AWS Kinesis, Postgres with AWS RDS, GCP GCS, AWS S3, Azure Blob) and fully-managed ksqlDB &lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/cloud-etl/docs/images/topology.png&#34; width=&#34;450&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/ccloud/ccloud-stack/README.md&#34;&gt;ccloud-stack&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Y&lt;/td&gt; &#xA;   &lt;td&gt;N&lt;/td&gt; &#xA;   &lt;td&gt;Creates a fully-managed stack in Confluent Cloud, including a new environment, service account, Kafka cluster, KSQL app, Schema Registry, and ACLs. The demo also generates a config file for use with client applications.&lt;br&gt;&lt;img src=&#34;https://github.com/confluentinc/cp-all-in-one/raw/latest/images/ccloud-stack-resources.png&#34; width=&#34;300&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.confluent.io/current/tutorials/cp-demo/docs/index.html?utm_source=github&amp;amp;utm_medium=demo&amp;amp;utm_campaign=ch.examples_type.community_content.top&#34;&gt;On-Prem Kafka to Cloud&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;N&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.confluent.io/current/tutorials/cp-demo/docs/index.html?utm_source=github&amp;amp;utm_medium=demo&amp;amp;utm_campaign=ch.examples_type.community_content.top&#34;&gt;Y&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Module 2 of &lt;a href=&#34;https://docs.confluent.io/current/tutorials/cp-demo/docs/index.html?utm_source=github&amp;amp;utm_medium=demo&amp;amp;utm_campaign=ch.examples_type.community_content.top&#34;&gt;Confluent Platform demo&lt;/a&gt; (&lt;code&gt;cp-demo&lt;/code&gt;) with a playbook for copying data between the on-prem and Confluent Cloud clusters &lt;br&gt;&lt;img src=&#34;https://github.com/confluentinc/cp-demo/raw/7.1.1-post/docs/images/cp-demo-overview-with-ccloud.jpg&#34; width=&#34;450&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/kubernetes/replicator-gke-cc/README.md&#34;&gt;GKE to Cloud&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;N&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/kubernetes/replicator-gke-cc/README.md&#34;&gt;Y&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Uses Google Kubernetes Engine, &lt;a href=&#34;https://www.confluent.io/confluent-cloud/?utm_source=github&amp;amp;utm_medium=demo&amp;amp;utm_campaign=ch.examples_type.community_content.top&#34;&gt;Confluent Cloud&lt;/a&gt;, and &lt;a href=&#34;https://www.confluent.io/confluent-replicator/?utm_source=github&amp;amp;utm_medium=demo&amp;amp;utm_campaign=ch.examples_type.community_content.top&#34;&gt;Confluent Replicator&lt;/a&gt; to explore a multicloud deployment &lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/kubernetes/replicator-gke-cc/docs/images/operator-demo-phase-2.png&#34; width=&#34;450&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.confluent.io/platform/current/tutorials/streaming-ops/index.html&#34;&gt;DevOps for Apache Kafka® with Kubernetes and GitOps&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;N&lt;/td&gt; &#xA;   &lt;td&gt;N&lt;/td&gt; &#xA;   &lt;td&gt;Simulated production environment running a streaming application targeting Apache Kafka on Confluent Cloud using Kubernetes and GitOps &lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/images/github-flux-kubernetes-600x105.png&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Stream Processing&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Demo&lt;/th&gt; &#xA;   &lt;th&gt;Local&lt;/th&gt; &#xA;   &lt;th&gt;Docker&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/clickstream/README.md&#34;&gt;Clickstream&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;N&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.confluent.io/platform/current/tutorials/examples/clickstream/docs/index.html#clickstream-demo?utm_source=github&amp;amp;utm_medium=demo&amp;amp;utm_campaign=ch.examples_type.community_content.top&#34;&gt;Y&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Automated version of the &lt;a href=&#34;https://docs.confluent.io/platform/current/tutorials/examples/clickstream/docs/index.html#clickstream-demo?utm_source=github&amp;amp;utm_medium=demo&amp;amp;utm_campaign=ch.examples_type.community_content.top&#34;&gt;ksqlDB clickstream demo&lt;/a&gt; &lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/clickstream/docs/images/grafana-dashboard.png&#34; width=&#34;450&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://kafka-tutorials.confluent.io?utm_source=github&amp;amp;utm_medium=demo&amp;amp;utm_campaign=ch.examples_type.community_content.top&#34;&gt;Kafka Tutorials&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://kafka-tutorials.confluent.io?utm_source=github&amp;amp;utm_medium=demo&amp;amp;utm_campaign=ch.examples_type.community_content.top&#34;&gt;Y&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://kafka-tutorials.confluent.io?utm_source=github&amp;amp;utm_medium=demo&amp;amp;utm_campaign=ch.examples_type.community_content.top&#34;&gt;Y&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Collection of common event streaming use cases, with each tutorial featuring an example scenario and several complete code solutions &lt;br&gt;&lt;img src=&#34;https://cdn.confluent.io/wp-content/uploads/Kafka-Tutorials-350x195.jpg&#34; width=&#34;350&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/microservices-orders/README.md&#34;&gt;Microservices ecosystem&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;N&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/microservices-orders/README.md&#34;&gt;Y&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/confluentinc/kafka-streams-examples/tree/5.2.2-post/src/main/java/io/confluent/examples/streams/microservices&#34;&gt;Microservices orders Demo Application&lt;/a&gt; integrated into the Confluent Platform &lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/microservices-orders/docs/images/microservices-demo.jpg&#34; width=&#34;450&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Data Pipelines&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Demo&lt;/th&gt; &#xA;   &lt;th&gt;Local&lt;/th&gt; &#xA;   &lt;th&gt;Docker&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/clients/cloud/README.md&#34;&gt;Clients in Various Languages&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/clients/cloud/README.md&#34;&gt;Y&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;N&lt;/td&gt; &#xA;   &lt;td&gt;Client applications, showcasing producers and consumers, in various programming languages &lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/clients/cloud/images/clients-all.png&#34; width=&#34;450&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/connect-streams-pipeline/README.md&#34;&gt;Connect and Kafka Streams&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/connect-streams-pipeline/README.md&#34;&gt;Y&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;N&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrate various ways, with and without Kafka Connect, to get data into Kafka topics and then loaded for use by the Kafka Streams API &lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/connect-streams-pipeline/docs/images/example_3.jpg&#34; width=&#34;450&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Confluent Platform&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Demo&lt;/th&gt; &#xA;   &lt;th&gt;Local&lt;/th&gt; &#xA;   &lt;th&gt;Docker&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/clients/README.md&#34;&gt;Avro&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/clients/README.md&#34;&gt;Y&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;N&lt;/td&gt; &#xA;   &lt;td&gt;Client applications using Avro and Confluent Schema Registry &lt;br&gt;&lt;img src=&#34;https://www.confluent.io/wp-content/uploads/dwg_SchemaReg_howitworks.png&#34; width=&#34;420&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/confluentinc/cp-demo&#34;&gt;CP Demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;N&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/confluentinc/cp-demo&#34;&gt;Y&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.confluent.io/platform/current/tutorials/cp-demo/docs/index.html?utm_source=github&amp;amp;utm_medium=demo&amp;amp;utm_campaign=ch.examples_type.community_content.top&#34;&gt;Confluent Platform demo&lt;/a&gt; (&lt;code&gt;cp-demo&lt;/code&gt;) with a playbook for Kafka event streaming ETL deployments &lt;br&gt;&lt;img src=&#34;https://github.com/confluentinc/cp-demo/raw/7.1.1-post/docs/images/cp-demo-overview.jpg&#34; width=&#34;420&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/kubernetes/README.md&#34;&gt;Kubernetes&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;N&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/kubernetes/README.md&#34;&gt;Y&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrations of Confluent Platform deployments using the &lt;a href=&#34;https://docs.confluent.io/operator/current/overview.html?utm_source=github&amp;amp;utm_medium=demo&amp;amp;utm_campaign=ch.examples_type.community_content.top&#34;&gt;Confluent Operator&lt;/a&gt; &lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/kubernetes/docs/images/operator.png&#34; width=&#34;420&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/multi-datacenter/README.md&#34;&gt;Multi Datacenter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;N&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/multi-datacenter/README.md&#34;&gt;Y&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Active-active multi-datacenter design with two instances of Confluent Replicator copying data bidirectionally between the datacenters &lt;br&gt;&lt;img src=&#34;https://docs.confluent.io/platform/current/_images/mdc-level-1.png&#34; width=&#34;420&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/multiregion/README.md&#34;&gt;Multi-Region Clusters&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;N&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/multiregion/README.md&#34;&gt;Y&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Multi-Region clusters (MRC) with follower fetching, observers, and replica placement&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/multiregion/docs/images/multi-region-topic-replicas-v2.png&#34; width=&#34;420&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/cp-quickstart/README.md&#34;&gt;Quickstart&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/cp-quickstart/README.md&#34;&gt;Y&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/cp-quickstart/README.md&#34;&gt;Y&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Automated version of the &lt;a href=&#34;https://docs.confluent.io/platform/current/quickstart/index.html?utm_source=github&amp;amp;utm_medium=demo&amp;amp;utm_campaign=ch.examples_type.community_content.top&#34;&gt;Confluent Quickstart&lt;/a&gt;: for Confluent Platform on local install or Docker, community version, and Confluent Cloud &lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/cp-quickstart/images/quickstart.png&#34; width=&#34;420&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/security/rbac/README.md&#34;&gt;Role-Based Access Control&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Y&lt;/td&gt; &#xA;   &lt;td&gt;Y&lt;/td&gt; &#xA;   &lt;td&gt;Role-based Access Control (RBAC) provides granular privileges for users and service accounts &lt;br&gt;&lt;img src=&#34;https://docs.confluent.io/platform/current/_images/rbac-overview.png&#34; width=&#34;450&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/replicator-security/README.md&#34;&gt;Replicator Security&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;N&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/replicator-security/README.md&#34;&gt;Y&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demos of various security configurations supported by Confluent Replicator and examples of how to implement them &lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/confluentinc/examples/7.1.1-post/images/replicator-security.png&#34; width=&#34;300&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Build Your Own&lt;/h1&gt; &#xA;&lt;p&gt;As a next step, you may want to build your own custom demo or test environment. We have several resources that launch just the services in Confluent Cloud or on prem, with no pre-configured connectors, data sources, topics, schemas, etc. Using these as a foundation, you can then add any connectors or applications. You can find the documentation and instructions for these &#34;build-your-own&#34; resources at &lt;a href=&#34;https://docs.confluent.io/platform/current/tutorials/build-your-own-demos.html?utm_source=github&amp;amp;utm_medium=demo&amp;amp;utm_campaign=ch.examples_type.community_content.top&#34;&gt;https://docs.confluent.io/platform/current/tutorials/build-your-own-demos.html&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Additional Demos&lt;/h1&gt; &#xA;&lt;p&gt;Here are additional GitHub repos that offer an incredible set of nearly a hundred other Apache Kafka demos. They are not maintained on a per-release basis like the demos in this repo, but they are an invaluable resource.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://developer.confluent.io/demos-examples/&#34;&gt;Learn: Apache Kafka Demos and Examples&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/confluentinc/demo-scene/raw/master/README.md&#34;&gt;confluentinc/demo-scene&lt;/a&gt;, the most popular demos include:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/confluentinc/demo-scene/tree/master/build-a-streaming-pipeline/workshop&#34;&gt;Workshop: Apache Kafka and ksqlDB in Action: Let’s Build a Streaming Data Pipeline!&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/confluentinc/demo-scene/tree/master/introduction-to-ksqldb&#34;&gt;Introduction to ksqlDB&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/confluentinc/demo-scene/tree/master/kafka-connect-zero-to-hero&#34;&gt;Kafka Connect Zero to Hero&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/vdesabou/kafka-docker-playground/raw/master/README.md&#34;&gt;vdesabou/kafka-docker-playground&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>