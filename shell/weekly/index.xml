<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-25T01:45:25Z</updated>
  <subtitle>Weekly Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tegal1337/CiLocks</title>
    <updated>2022-09-25T01:45:25Z</updated>
    <id>tag:github.com,2022-09-25:/tegal1337/CiLocks</id>
    <link href="https://github.com/tegal1337/CiLocks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Crack Interface lockscreen, Metasploit and More Android/IOS Hacking&lt;/p&gt;&lt;hr&gt;&lt;pre&gt;&lt;code&gt;   _______ __               __&#xA;  / ____(_) /   ____  _____/ /_______&#xA; / /   / / /   / __ \/ ___/ //_/ ___/&#xA;/ /___/ / /___/ /_/ / /__/ ,&amp;lt; (__  )&#xA;\____/_/_____/\____/\___/_/|_/____/v2.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CiLocks | Android/IOS Hacking ðŸ“±&lt;/h3&gt; &#xA;&lt;h4&gt;Crack Interface lockscreen, Metasploit and More Android/IOS Hacking&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/license/tegal1337/CiLocks&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues/tegal1337/CiLocks&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues-closed/tegal1337/CiLocks&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://github.com/tegal1337/CiLocks/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat&#34; alt=&#34;contributions welcome&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/forks/tegal1337/CiLocks&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/tegal1337/CiLocks&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/tegal1337/CiLocks&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://img.shields.io/badge/Important-notice-red&#34;&gt; &#xA;&lt;h4&gt;Please Don&#39;t Use for illegal Activity&lt;/h4&gt; &#xA;&lt;h4&gt;Update Available V2.1 ðŸš€&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Added New Tools &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Root Android {Supersu} Not Support All OS Version&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Jump To Adb Toolkit &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Shell&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ScreenShot&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Copy All Camera Photo&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Copy All WhatsApp Folder&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Copy All Data Storage&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Manual Copy {Costum}&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Backup Data&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Restore Data&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Permissons Reset&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Reboot&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Remove Lockscreen {Root}&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Jump To Metasploit &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Install Application&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create Payload Backdoor {Msfvenom} Singed&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Run Metasploit&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Inject Payload In Original Application&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Phone Info&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Control Android {Scrcpy}&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Brute Pin 4 Digit&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Brute Pin 6 Digit&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Brute LockScreen Using Wordlist&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Bypass LockScreen {Antiguard} Not Support All OS Version&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Reset Data&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; IP Logger (Track IP Location and Information)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; SpyCam (Take webcam shots from target just sending a malicious link)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; IOS Payload&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; FireStore Vulnerability&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Screenshoot ðŸ“·&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Screenshoot 01&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Screenshoot 02&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Screenshoot 03&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/tegal1337/CiLocks/raw/main/Screenshoot/cilocks01.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/tegal1337/CiLocks/raw/main/Screenshoot/cilocks02.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/tegal1337/CiLocks/raw/main/Screenshoot/cilocks03.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Screenshoot 04&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Screenshoot 05&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Screenshoot 06&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/tegal1337/CiLocks/raw/main/Screenshoot/cilocks04.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/tegal1337/CiLocks/raw/main/Screenshoot/cilocks05.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/tegal1337/CiLocks/raw/main/Screenshoot/cilocks06.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt update -y&#xA;&#xA;sudo apt install php nodejs npm adb scrcpy wget unzip apktool jq -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;And if needed&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install msfconsole -y &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Required&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;ADB {Android SDK}&#xA;&#xA;USB Cable&#xA;&#xA;Android Emulator {Nethunter/Termux} Root&#xA;&#xA;Or Computer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installation For Linux&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/tegal1337/CiLocks&#xA;&#xA;cd CiLocks&#xA;&#xA;chmod +x cilocks&#xA;&#xA;sudo bash cilocks &#xA;&#xA;or sudo ./cilocks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!--  After Following All Steps Just Type In Terminal **root@tegalsec:~** **./cilocks** --&gt; &#xA;&lt;p&gt;or download &lt;a href=&#34;https://github.com/tegal1337/CiLocks/releases/download/V2.1/Cilocks_V2.1.zip&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;For Android Emulator&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Install Termux/NetHunter&#xA;&#xA;Install Busybox&#xA;&#xA;Root Access&#xA;&#xA;Otg Cable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;If brute doesn&#39;t work then uncomment this code&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;# adb shell input keyevent 26&#xA;&#xA;if 5x the wrong password will automatically delay 30 seconds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Article &amp;amp; Video&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android Malware &lt;a href=&#34;https://www.instagram.com/p/CPqJAvHjQ2Q/&#34;&gt;https://www.instagram.com/p/CPqJAvHjQ2Q/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;YAFI TECH &lt;a href=&#34;https://www.youtube.com/watch?v=gYIfJUiBBWo&#34;&gt;https://www.youtube.com/watch?v=gYIfJUiBBWo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Malware Tech &lt;a href=&#34;https://www.youtube.com/watch?v=ZhBvWkGknKA&#34;&gt;https://www.youtube.com/watch?v=ZhBvWkGknKA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;KitPloit &lt;a href=&#34;https://www.kitploit.com/2021/05/cilocks-android-lockscreen-bypass.html&#34;&gt;https://www.kitploit.com/2021/05/cilocks-android-lockscreen-bypass.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Thanks to original Author of the tools used in CiLocks&lt;/h4&gt; &#xA;&lt;h4&gt;Contributors&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tegal1337/CiLocks/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat&#34; alt=&#34;contributions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dalpan.github.io&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/33548464?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Van Lyubov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://lolic0d3.github.io&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/59540270?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ali Akbar&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Reference&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/29072501/how-to-unlock-android-phone-through-adb&#34;&gt;https://stackoverflow.com/questions/29072501/how-to-unlock-android-phone-through-adb&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;http://www.hak5.org/episodes/hak5-1205&#34;&gt;http://www.hak5.org/episodes/hak5-1205&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/kosborn/p2p-adb&#34;&gt;https://github.com/kosborn/p2p-adb&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://forum.xda-developers.com/t/universal-guide-root-any-android-device-manually.2684210/&#34;&gt;https://forum.xda-developers.com/t/universal-guide-root-any-android-device-manually.2684210/&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://stackoverflow.com/questions/14685721/how-can-i-do-factory-reset-using-adb-in-android&#34;&gt;https://stackoverflow.com/questions/14685721/how-can-i-do-factory-reset-using-adb-in-android&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/Screetsec/TheFatRat&#34;&gt;https://github.com/Screetsec/TheFatRat&lt;/a&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Follow Us&lt;/h4&gt; &#xA;&lt;p&gt;Instagram: &lt;a href=&#34;https://www.instagram.com/tegalsec/&#34;&gt;https://www.instagram.com/tegalsec/&lt;/a&gt; &lt;br&gt;Facebook: &lt;a href=&#34;https://www.facebook.com/tegal1337/&#34;&gt;https://www.facebook.com/tegal1337/&lt;/a&gt; &lt;br&gt;Github : &lt;a href=&#34;https://github.com/tegal1337/&#34;&gt;https://github.com/tegal1337/&lt;/a&gt; &lt;br&gt;Website : &lt;a href=&#34;https://tegalsec.org/&#34;&gt;https://tegalsec.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tegal1337/CiLocks/main/#&#34;&gt;&lt;img src=&#34;https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif&#34; alt=&#34;Foo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Support our organization by giving donations&lt;/h4&gt; &#xA;&lt;p&gt;Bitcoin &lt;br&gt;31zr9sgjrz45WRMbjFAzdDMDZyw3a9tnU8&lt;br&gt; Dana/Ovo/Gopay &lt;br&gt;087730938323&lt;/p&gt; &#xA;&lt;h4&gt;Contact &lt;a href=&#34;mailto:mitsuhamizaki@gmail.com&#34;&gt;Email&lt;/a&gt;&lt;/h4&gt;</summary>
  </entry>
  <entry>
    <title>MaherAzzouzi/CVE-2022-37706-LPE-exploit</title>
    <updated>2022-09-25T01:45:25Z</updated>
    <id>tag:github.com,2022-09-25:/MaherAzzouzi/CVE-2022-37706-LPE-exploit</id>
    <link href="https://github.com/MaherAzzouzi/CVE-2022-37706-LPE-exploit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A reliable exploit + write-up to elevate privileges to root. (Tested on Ubuntu 22.04)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;CVE-2022-37706&lt;/strong&gt;&lt;br&gt;&lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/62230190/189902773-f603dffe-1a44-4c32-9052-d01dd40df02e.gif&#34; alt=&#34;CVE-2022-37706-poc-zoom&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hello guys, this time I&#39;m gonna talk about a recent 0-day I found in one of the&lt;br&gt; main window managers of Linux called Enlightenment (&lt;a href=&#34;https://www.enlightenment.org/&#34;&gt;https://www.enlightenment.org/&lt;/a&gt;).&lt;br&gt; This 0-day gonna take any user to root privileges very easily and instantly.&lt;br&gt; The exploit is tested on Ubuntu 22.04, but should work just fine on any distro.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;First of all Enlightenment is a Window Manager, Compositor and Minimal Desktop &lt;br&gt; for Linux (the primary platform), BSD and any other compatible UNIX system.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;I installed this window manager to experiment a bit with it. It was interesting&lt;br&gt; for me as it contain a lot of tools and it looks pretty neat to be honest.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;After I installed the package using &lt;code&gt;apt install enlightenment&lt;/code&gt; I examined the&lt;br&gt; installed files and directory on my system, a lot of modules and a lot of helper&lt;br&gt; binaries, but what is most interesting is :&lt;br&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;âžœ  enlightenment cd /usr/lib/x86_64-linux-gnu/enlightenment/&#xA;âžœ  enlightenment find . -perm -4000                         &#xA;./utils/enlightenment_ckpasswd&#xA;./utils/enlightenment_system&#xA;./utils/enlightenment_sys&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It installs some SUID binaries, then I was thinking if I can use one of those&lt;br&gt; to escalate to root, the binaries were all secure looking and well coded.&lt;br&gt; The binary we will be talking about is enlightenment_sys.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;As any other target we choose a strategy to apply after doing some pre-assessment&lt;br&gt; see my blog here if not yet (&lt;a href=&#34;https://pwn-maher.blogspot.com/2020/10/vulnerability-assessment.html&#34;&gt;https://pwn-maher.blogspot.com/2020/10/vulnerability-assessment.html&lt;/a&gt;)&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;I audited the code on a Top-Down approach.&lt;br&gt; And because this window manager is open source, the source code will be available&lt;br&gt; for all those binaries and modules.&lt;br&gt; So first thing I did was &lt;code&gt;apt source enlightenment&lt;/code&gt; to get all the source code,&lt;br&gt; and with a bit of digging we can get to the target binary code.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;But to debug the binary I load it to Ghidra for analysis and to have addresses&lt;br&gt; to set breakpoints and all.&lt;br&gt; No symbols were found first try but yeah no need for those as it turned out to&lt;br&gt; be a relatively small binary.&lt;br&gt; Surprisingly, I found it very pleasing to look at the decompiled pseudo-code of&lt;br&gt; Ghidra than looking directly at the src (avoid macros, avoid also those checks&lt;br&gt; against the OS being used to compile a specific block of code).&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;So let&#39;s start analysis.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;1- Play with the binary.&lt;br&gt; Let&#39;s run the file to see some information about our target:&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MaherAzzouzi/CVE-2022-37706-LPE-exploit/main/screenshots/file_command.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Running the binary do not give any output:&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MaherAzzouzi/CVE-2022-37706-LPE-exploit/main/screenshots/running_bin.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Giving --help argument gave this output:&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MaherAzzouzi/CVE-2022-37706-LPE-exploit/main/screenshots/running_help.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;br&gt; Sorry, I will use it to get root.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Next let&#39;s just strace and see if it will use any suspicious syscalls like&lt;br&gt; execve or openat:&lt;br&gt; strace ./enlightenment_sys 2&amp;gt;&amp;amp;1 | grep open &lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MaherAzzouzi/CVE-2022-37706-LPE-exploit/main/screenshots/strace_open.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;br&gt; It just opens known libraries at places we don&#39;t have permission to tamper with.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;strace ./enlightenment_sys 2&amp;gt;&amp;amp;1 | grep exec&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MaherAzzouzi/CVE-2022-37706-LPE-exploit/main/screenshots/strace_exec.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;2- Let&#39;s reverse engineer the binary and then exploit it.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;I created a new Ghidra project, and I loaded this specific binary.&lt;br&gt; Because symbols were not found, we can spot the main function using entry.&lt;br&gt; The first argument to entry function is main itself.&lt;br&gt; I renamed it to main for future references.&lt;br&gt; Scrolling a bit down I can already spot system() function being used.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;As a pwner I spend days on challenges to spawn this specific function x)&lt;br&gt; I reversed the binary looking for a memory corruption bug or some heap problems&lt;br&gt; , but actually it was a weird Command Injection.&lt;br&gt; The binary take all security precautions before running system, but sadly we&lt;br&gt; can always inject our input in there.&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MaherAzzouzi/CVE-2022-37706-LPE-exploit/main/screenshots/system_ghidra.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ok, now let&#39;s walk the binary from top up to our system function, trying to&lt;br&gt; inject our input in there.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;First the binary just checks if the first arg is --help or -h and shows that&lt;br&gt; message we saw earlier.&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MaherAzzouzi/CVE-2022-37706-LPE-exploit/main/screenshots/help_decompilation.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Second it elevate it&#39;s privileges to root.&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MaherAzzouzi/CVE-2022-37706-LPE-exploit/main/screenshots/elev_decompilation.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Next it unset almost all environment variables (security precautions) to not&lt;br&gt; invoke another non-intended binary.&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MaherAzzouzi/CVE-2022-37706-LPE-exploit/main/screenshots/unset_decompilation.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;So if the first arg we entered is &#34;mount&#34; it will enter this branch, check some&lt;br&gt; flags given, those flags gonna be set on the stack.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Next it checks if the next param after mount is UUID= we don&#39;t want to enter&lt;br&gt; here, so we gave &#34;/dev/../tmp/;/tmp/exploit&#34;.&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MaherAzzouzi/CVE-2022-37706-LPE-exploit/main/screenshots/strncmp_uuid.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;br&gt; Like this we pass the check at line 410. the strncmp check.&lt;br&gt; Because if it don&#39;t start with /dev/ the binary will exit.&lt;br&gt; Next there is a call to stat64 on that file we provided, note that we can&lt;br&gt; create a folder called &#34;;&#34; and that will be causing the command injection.&lt;br&gt; Until now, the exploit already created this file /dev/../tmp/;/tmp/exploit,&lt;br&gt; but this is not the exploit that will be called.&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MaherAzzouzi/CVE-2022-37706-LPE-exploit/main/screenshots/stat64_ghidra.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MaherAzzouzi/CVE-2022-37706-LPE-exploit/main/screenshots/stat64_gdb.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;We&#39;re getting closer to system() now.&lt;br&gt; Now p (pointer), gets updated to the last argument given to our SUID binary,&lt;br&gt; /tmp///net.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Why providing /tmp///net when we can pass /tmp/net?&lt;br&gt; We will bypass this check:&lt;br&gt; &lt;code&gt;if (((next_next == (char *)0x0) || (next_next[1] == &#39;\0&#39;)) || ((long)next_next - (long)p != 6))&lt;/code&gt;&lt;br&gt; We needed /tmp/net to exist and /tmp/// to be on length 6.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Now the last stat64 will check for the existence of &#34;/dev/net&#34;&lt;br&gt; __snprintf_chk(cmd,0x1000,1,0x1000,&#34;/dev%s&#34;,next_next);&lt;br&gt; And it will find it, so we pass that last check.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Now it will check for the availability for some files, but that&#39;s not important&lt;br&gt; at this point, because we&#39;re all set and all close to trigger arbitrary Command&lt;br&gt; Execution.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Now eina_strbuf_new() will just initialize the command that will be passed to&lt;br&gt; system, the problem here is that we entered it as:&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;/bin/mount -o noexec,nosuid,utf8,nodev,iocharset=utf8,utf8=0,utf8=1,uid=$(id -u), &#34;/dev/../tmp/;/tmp/exploit&#34; /tmp///net&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;But the binary calls eina_strbuf_append_printf() for several times and becomes&lt;br&gt; /bin/mount -o noexec,nosuid,utf8,nodev,iocharset=utf8,utf8=0,utf8=1,uid=$(id -u), /dev/../tmp/;/tmp/exploit /tmp///net&lt;br&gt; Notice that double quotes are removed, and we will be able to call /tmp/exploit&lt;br&gt; as root.&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MaherAzzouzi/CVE-2022-37706-LPE-exploit/main/screenshots/system_gdb.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;The binary tried it&#39;s best to mitigate any non-intended behavior but as usual&lt;br&gt; anything can be pwned. I wasn&#39;t expecting to exploit this using a logical bug&lt;br&gt; like this.&lt;br&gt; I want the next CVE to be a memory corruption leading to LPE root.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Twitter disclosure: &lt;a href=&#34;https://twitter.com/maherazz2/status/1569665311707734023&#34;&gt;https://twitter.com/maherazz2/status/1569665311707734023&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>verygenericname/SSHRD_Script</title>
    <updated>2022-09-25T01:45:25Z</updated>
    <id>tag:github.com,2022-09-25:/verygenericname/SSHRD_Script</id>
    <link href="https://github.com/verygenericname/SSHRD_Script" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Shell script that creates a ssh ramdisk&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;SSH Ramdisk Script&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/verygenericname/SSHRD_Script/graphs/contributors&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/contributors/verygenericname/SSHRD_Script.svg?sanitize=true&#34; alt=&#34;Contributors&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/verygenericname/SSHRD_Script/commits/main&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/commit-activity/w/verygenericname/SSHRD_Script.svg?sanitize=true&#34; alt=&#34;Commits&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Create and boot a SSH ramdisk on checkm8 devices &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Prerequsites&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;A computer running macOS/linux&lt;/li&gt; &#xA; &lt;li&gt;A checkm8 device (A7-A11)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone and cd into this repository: &lt;code&gt;git clone https://github.com/verygenericname/SSHRD_Script --recursive &amp;amp;&amp;amp; cd SSHRD_Script&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you have cloned this before, run &lt;code&gt;cd SSHRD_Script &amp;amp;&amp;amp; git pull&lt;/code&gt; to pull new changes&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./sshrd.sh &amp;lt;iOS version for ramdisk&amp;gt;&lt;/code&gt;, &lt;strong&gt;without&lt;/strong&gt; the &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Place your device into DFU mode &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A11 users, go to recovery first, then DFU.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./sshrd.sh boot&lt;/code&gt; to boot the ramdisk&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./sshrd.sh ssh&lt;/code&gt; to connect to SSH on your device&lt;/li&gt; &#xA; &lt;li&gt;Finally, to mount the filesystems, run &lt;code&gt;mount_filesystems&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;/var is mounted to /mnt2 in the ssh session.&lt;/li&gt; &#xA;   &lt;li&gt;/private/preboot is mounted to /mnt6.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Have fun!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Linux notes&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;you may have to run sudo systemctl stop usbmuxd&lt;/li&gt; &#xA; &lt;li&gt;then run sudo usbmuxd -p -f&lt;/li&gt; &#xA; &lt;li&gt;then ssh will work&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Other commands&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Reset your device: &lt;code&gt;./sshrd.sh reset&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dump onboard blobs: &lt;code&gt;./sshrd.sh dump-blobs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Delete old SSH ramdisk: &lt;code&gt;./sshrd.sh clean&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Other Stuff&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/jailbreak/comments/wgiye1/free_release_ssh_ramdisk_creator_for_iphones_ipad/&#34;&gt;Reddit Post&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>