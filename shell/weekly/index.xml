<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-30T02:05:53Z</updated>
  <subtitle>Weekly Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>void-linux/void-packages</title>
    <updated>2023-07-30T02:05:53Z</updated>
    <id>tag:github.com,2023-07-30:/void-linux/void-packages</id>
    <link href="https://github.com/void-linux/void-packages" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Void source packages collection&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;The XBPS source packages collection&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains the XBPS source packages collection to build binary packages for the Void Linux distribution.&lt;/p&gt; &#xA;&lt;p&gt;The included &lt;code&gt;xbps-src&lt;/code&gt; script will fetch and compile the sources, and install its files into a &lt;code&gt;fake destdir&lt;/code&gt; to generate XBPS binary packages that can be installed or queried through the &lt;code&gt;xbps-install(1)&lt;/code&gt; and &lt;code&gt;xbps-query(1)&lt;/code&gt; utilities, respectively.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/void-linux/void-packages/master/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; for a general overview of how to contribute and the &lt;a href=&#34;https://raw.githubusercontent.com/void-linux/void-packages/master/Manual.md&#34;&gt;Manual&lt;/a&gt; for details of how to create source packages.&lt;/p&gt; &#xA;&lt;h3&gt;Table of Contents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/void-linux/void-packages/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/void-linux/void-packages/master/#quick-start&#34;&gt;Quick start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/void-linux/void-packages/master/#chroot-methods&#34;&gt;chroot methods&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/void-linux/void-packages/master/#install-bootstrap&#34;&gt;Install the bootstrap packages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/void-linux/void-packages/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/void-linux/void-packages/master/#directory-hierarchy&#34;&gt;Directory hierarchy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/void-linux/void-packages/master/#building-packages&#34;&gt;Building packages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/void-linux/void-packages/master/#build-options&#34;&gt;Package build options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/void-linux/void-packages/master/#sharing-and-signing&#34;&gt;Sharing and signing your local repositories&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/void-linux/void-packages/master/#rebuilding&#34;&gt;Rebuilding and overwriting existing local packages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/void-linux/void-packages/master/#distcc&#34;&gt;Enabling distcc for distributed compilation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/void-linux/void-packages/master/#distfiles-mirrors&#34;&gt;Distfiles mirrors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/void-linux/void-packages/master/#cross-compiling&#34;&gt;Cross compiling packages for a target architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/void-linux/void-packages/master/#foreign&#34;&gt;Using xbps-src in a foreign Linux distribution&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/void-linux/void-packages/master/#remaking-masterdir&#34;&gt;Remaking the masterdir&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/void-linux/void-packages/master/#updating-masterdir&#34;&gt;Keeping your masterdir uptodate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/void-linux/void-packages/master/#building-32bit&#34;&gt;Building 32bit packages on x86_64&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/void-linux/void-packages/master/#building-for-musl&#34;&gt;Building packages natively for the musl C library&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/void-linux/void-packages/master/#building-base-system&#34;&gt;Building void base-system from scratch&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GNU bash&lt;/li&gt; &#xA; &lt;li&gt;xbps &amp;gt;= 0.56&lt;/li&gt; &#xA; &lt;li&gt;git(1) - unless configured to not, see etc/defaults.conf&lt;/li&gt; &#xA; &lt;li&gt;common POSIX utilities included by default in almost all UNIX systems&lt;/li&gt; &#xA; &lt;li&gt;curl(1) - required by &lt;code&gt;xbps-src update-check&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For bootstrapping additionally:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;flock(1) - util-linux&lt;/li&gt; &#xA; &lt;li&gt;bsdtar or GNU tar (in that order of preference)&lt;/li&gt; &#xA; &lt;li&gt;install(1) - GNU coreutils&lt;/li&gt; &#xA; &lt;li&gt;objcopy(1), objdump(1), strip(1): binutils&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;xbps-src&lt;/code&gt; requires &lt;a href=&#34;https://raw.githubusercontent.com/void-linux/void-packages/master/#chroot-methods&#34;&gt;a utility to chroot&lt;/a&gt; and bind mount existing directories into a &lt;code&gt;masterdir&lt;/code&gt; that is used as its main &lt;code&gt;chroot&lt;/code&gt; directory. &lt;code&gt;xbps-src&lt;/code&gt; supports multiple utilities to accomplish this task.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: &lt;code&gt;xbps-src&lt;/code&gt; does not allow building as root anymore. Use one of the chroot methods.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a name=&#34;quick-start&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Quick start&lt;/h3&gt; &#xA;&lt;p&gt;Clone the &lt;code&gt;void-packages&lt;/code&gt; git repository and install the bootstrap packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/void-linux/void-packages.git&#xA;$ cd void-packages&#xA;$ ./xbps-src binary-bootstrap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build a package by specifying the &lt;code&gt;pkg&lt;/code&gt; target and the package name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./xbps-src pkg &amp;lt;package_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;./xbps-src -h&lt;/code&gt; to list all available targets and options.&lt;/p&gt; &#xA;&lt;p&gt;To build packages marked as &#39;restricted&#39;, modify &lt;code&gt;etc/conf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ echo XBPS_ALLOW_RESTRICTED=yes &amp;gt;&amp;gt; etc/conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once built, the package will be available in &lt;code&gt;hostdir/binpkgs&lt;/code&gt; or an appropriate subdirectory (e.g. &lt;code&gt;hostdir/binpkgs/nonfree&lt;/code&gt;). To install the package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# xbps-install --repository hostdir/binpkgs &amp;lt;package_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, packages can be installed with the &lt;code&gt;xi&lt;/code&gt; utility, from the &lt;code&gt;xtools&lt;/code&gt; package. &lt;code&gt;xi&lt;/code&gt; takes the repository of the current working directory into account.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# xi &amp;lt;package_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;chroot-methods&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;chroot methods&lt;/h3&gt; &#xA;&lt;h4&gt;xbps-uunshare(1) (default)&lt;/h4&gt; &#xA;&lt;p&gt;XBPS utility that uses &lt;code&gt;user_namespaces(7)&lt;/code&gt; (part of xbps, default without &lt;code&gt;-t&lt;/code&gt; flag).&lt;/p&gt; &#xA;&lt;p&gt;This utility requires these Linux kernel options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CONFIG_NAMESPACES&lt;/li&gt; &#xA; &lt;li&gt;CONFIG_IPC_NS&lt;/li&gt; &#xA; &lt;li&gt;CONFIG_UTS_NS&lt;/li&gt; &#xA; &lt;li&gt;CONFIG_USER_NS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is the default method, and if your system does not support any of the required kernel options it will fail with &lt;code&gt;EINVAL (Invalid argument)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;xbps-uchroot(1)&lt;/h4&gt; &#xA;&lt;p&gt;XBPS utility that uses &lt;code&gt;namespaces&lt;/code&gt; and must be &lt;code&gt;setgid&lt;/code&gt; (part of xbps).&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: This is the only method that implements functionality of &lt;code&gt;xbps-src -t&lt;/code&gt;, therefore the flag ignores the choice made in configuration files and enables &lt;code&gt;xbps-uchroot&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This utility requires these Linux kernel options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CONFIG_NAMESPACES&lt;/li&gt; &#xA; &lt;li&gt;CONFIG_IPC_NS&lt;/li&gt; &#xA; &lt;li&gt;CONFIG_PID_NS&lt;/li&gt; &#xA; &lt;li&gt;CONFIG_UTS_NS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Your user must be added to a special group to be able to use &lt;code&gt;xbps-uchroot(1)&lt;/code&gt; and the executable must be &lt;code&gt;setgid&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# chown root:&amp;lt;group&amp;gt; xbps-uchroot&#xA;# chmod 4750 xbps-uchroot&#xA;# usermod -a -G &amp;lt;group&amp;gt; &amp;lt;user&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: by default in void you shouldn&#39;t do this manually, your user must be a member of the &lt;code&gt;xbuilder&lt;/code&gt; group.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To enable it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd void-packages&#xA;$ echo XBPS_CHROOT_CMD=uchroot &amp;gt;&amp;gt; etc/conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If for some reason it&#39;s erroring out as &lt;code&gt;ERROR clone (Operation not permitted)&lt;/code&gt;, check that your user is a member of the required &lt;code&gt;group&lt;/code&gt; and that &lt;code&gt;xbps-uchroot(1)&lt;/code&gt; utility has the proper permissions and owner/group as explained above.&lt;/p&gt; &#xA;&lt;h4&gt;bwrap(1)&lt;/h4&gt; &#xA;&lt;p&gt;bubblewrap, sandboxing tool for unprivileged users that uses user namespaces or setuid. See &lt;a href=&#34;https://github.com/containers/bubblewrap&#34;&gt;https://github.com/containers/bubblewrap&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;ethereal&lt;/h4&gt; &#xA;&lt;p&gt;Destroys host system it runs on. Only useful for one-shot containers, i.e docker (used with CI).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;install-bootstrap&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Install the bootstrap packages&lt;/h3&gt; &#xA;&lt;p&gt;There is a set of packages that makes up the initial build container, called the &lt;code&gt;bootstrap&lt;/code&gt;. These packages are installed into the &lt;code&gt;masterdir&lt;/code&gt; in order to create the container.&lt;/p&gt; &#xA;&lt;p&gt;The primary and recommended way to set up this container is using the &lt;code&gt;binary-bootstrap&lt;/code&gt; command. This will use pre-existing binary packages, either from remote &lt;code&gt;xbps&lt;/code&gt; repositories or from your local repository.&lt;/p&gt; &#xA;&lt;p&gt;There is also the &lt;code&gt;bootstrap&lt;/code&gt; command, which will build all necessary &lt;code&gt;bootstrap&lt;/code&gt; packages from scratch. This is usually not recommended, since those packages are built using your host system&#39;s toolchain and are neither fully featured nor reproducible (your host system may influence the build) and thus should only be used as a stage 0 for bootstrapping new Void systems.&lt;/p&gt; &#xA;&lt;p&gt;If you still choose to use &lt;code&gt;bootstrap&lt;/code&gt;, use the resulting stage 0 container to rebuild all &lt;code&gt;bootstrap&lt;/code&gt; packages again, then use &lt;code&gt;binary-bootstrap&lt;/code&gt; (stage 1) and rebuild the &lt;code&gt;bootstrap&lt;/code&gt; packages once more (to gain stage 2, and then use &lt;code&gt;binary-bootstrap&lt;/code&gt; again). Once you&#39;ve done that, you will have a &lt;code&gt;bootstrap&lt;/code&gt; set equivalent to using &lt;code&gt;binary-bootstrap&lt;/code&gt; in the first place.&lt;/p&gt; &#xA;&lt;p&gt;Also keep in mind that a full source &lt;code&gt;bootstrap&lt;/code&gt; is time consuming and will require having an assortment of utilities installed in your host system, such as &lt;code&gt;binutils&lt;/code&gt;, &lt;code&gt;gcc&lt;/code&gt;, &lt;code&gt;perl&lt;/code&gt;, &lt;code&gt;texinfo&lt;/code&gt; and others.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;etc/defaults.conf&lt;/code&gt; file contains the possible settings that can be overridden through the &lt;code&gt;etc/conf&lt;/code&gt; configuration file for the &lt;code&gt;xbps-src&lt;/code&gt; utility; if that file does not exist, will try to read configuration settings from &lt;code&gt;$XDG_CONFIG_HOME/xbps-src.conf&lt;/code&gt;, &lt;code&gt;~/.config/xbps-src.conf&lt;/code&gt;, &lt;code&gt;~/.xbps-src.conf&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to customize default &lt;code&gt;CFLAGS&lt;/code&gt;, &lt;code&gt;CXXFLAGS&lt;/code&gt; and &lt;code&gt;LDFLAGS&lt;/code&gt;, don&#39;t override those defined in &lt;code&gt;etc/defaults.conf&lt;/code&gt;, set them on &lt;code&gt;etc/conf&lt;/code&gt; instead i.e:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ echo &#39;XBPS_CFLAGS=&#34;your flags here&#34;&#39; &amp;gt;&amp;gt; etc/conf&#xA;$ echo &#39;XBPS_LDFLAGS=&#34;your flags here&#34;&#39; &amp;gt;&amp;gt; etc/conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Native and cross compiler/linker flags are set per architecture in &lt;code&gt;common/build-profiles&lt;/code&gt; and &lt;code&gt;common/cross-profiles&lt;/code&gt; respectively. Ideally those settings are good enough by default, and there&#39;s no need to set your own unless you know what you are doing.&lt;/p&gt; &#xA;&lt;h4&gt;Virtual packages&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;etc/defaults.virtual&lt;/code&gt; file contains the default replacements for virtual packages, used as dependencies in the source packages tree.&lt;/p&gt; &#xA;&lt;p&gt;If you want to customize those replacements, copy &lt;code&gt;etc/defaults.virtual&lt;/code&gt; to &lt;code&gt;etc/virtual&lt;/code&gt; and edit it accordingly to your needs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;directory-hierarchy&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Directory hierarchy&lt;/h3&gt; &#xA;&lt;p&gt;The following directory hierarchy is used with a default configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;     /void-packages&#xA;        |- common&#xA;        |- etc&#xA;        |- srcpkgs&#xA;        |  |- xbps&#xA;        |     |- template&#xA;        |&#xA;        |- hostdir&#xA;        |  |- binpkgs ...&#xA;        |  |- ccache ...&#xA;        |  |- distcc-&amp;lt;arch&amp;gt; ...&#xA;        |  |- repocache ...&#xA;        |  |- sources ...&#xA;        |&#xA;        |- masterdir&#xA;        |  |- builddir -&amp;gt; ...&#xA;        |  |- destdir -&amp;gt; ...&#xA;        |  |- host -&amp;gt; bind mounted from &amp;lt;hostdir&amp;gt;&#xA;        |  |- void-packages -&amp;gt; bind mounted from &amp;lt;void-packages&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The description of these directories is as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;masterdir&lt;/code&gt;: master directory to be used as rootfs to build/install packages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;builddir&lt;/code&gt;: to unpack package source tarballs and where packages are built.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;destdir&lt;/code&gt;: to install packages, aka &lt;strong&gt;fake destdir&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hostdir/ccache&lt;/code&gt;: to store ccache data if the &lt;code&gt;XBPS_CCACHE&lt;/code&gt; option is enabled.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hostdir/distcc-&amp;lt;arch&amp;gt;&lt;/code&gt;: to store distcc data if the &lt;code&gt;XBPS_DISTCC&lt;/code&gt; option is enabled.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hostdir/repocache&lt;/code&gt;: to store binary packages from remote repositories.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hostdir/sources&lt;/code&gt;: to store package sources.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hostdir/binpkgs&lt;/code&gt;: local repository to store generated binary packages.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;building-packages&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Building packages&lt;/h3&gt; &#xA;&lt;p&gt;The simplest form of building package is accomplished by running the &lt;code&gt;pkg&lt;/code&gt; target in &lt;code&gt;xbps-src&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd void-packages&#xA;$ ./xbps-src pkg &amp;lt;pkgname&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the package and its required dependencies are built, the binary packages will be created and registered in the default local repository at &lt;code&gt;hostdir/binpkgs&lt;/code&gt;; the path to this local repository can be added to any xbps configuration file (see xbps.d(5)) or by explicitly appending them via cmdline, i.e:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ xbps-install --repository=hostdir/binpkgs ...&#xA;$ xbps-query --repository=hostdir/binpkgs ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default &lt;strong&gt;xbps-src&lt;/strong&gt; will try to resolve package dependencies in this order:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If a dependency exists in the local repository, use it (&lt;code&gt;hostdir/binpkgs&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;If a dependency exists in a remote repository, use it.&lt;/li&gt; &#xA; &lt;li&gt;If a dependency exists in a source package, use it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is possible to avoid using remote repositories completely by using the &lt;code&gt;-N&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The default local repository may contain multiple &lt;em&gt;sub-repositories&lt;/em&gt;: &lt;code&gt;debug&lt;/code&gt;, &lt;code&gt;multilib&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a name=&#34;build-options&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Package build options&lt;/h3&gt; &#xA;&lt;p&gt;The supported build options for a source package can be shown with &lt;code&gt;xbps-src show-options&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./xbps-src show-options foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build options can be enabled with the &lt;code&gt;-o&lt;/code&gt; flag of &lt;code&gt;xbps-src&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./xbps-src -o option,option1 pkg foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build options can be disabled by prefixing them with &lt;code&gt;~&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./xbps-src -o ~option,~option1 pkg foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Both ways can be used together to enable and/or disable multiple options at the same time with &lt;code&gt;xbps-src&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./xbps-src -o option,~option1,~option2 pkg foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The build options can also be shown for binary packages via &lt;code&gt;xbps-query(1)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ xbps-query -R --property=build-options foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: if you build a package with a custom option, and that package is available in an official void repository, an update will ignore those options. Put that package on &lt;code&gt;hold&lt;/code&gt; mode via &lt;code&gt;xbps-pkgdb(1)&lt;/code&gt;, i.e &lt;code&gt;xbps-pkgdb -m hold foo&lt;/code&gt; to ignore updates with &lt;code&gt;xbps-install -u&lt;/code&gt;. Once the package is on &lt;code&gt;hold&lt;/code&gt;, the only way to update it is by declaring it explicitly: &lt;code&gt;xbps-install -u foo&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Permanent global package build options can be set via &lt;code&gt;XBPS_PKG_OPTIONS&lt;/code&gt; variable in the &lt;code&gt;etc/conf&lt;/code&gt; configuration file. Per package build options can be set via &lt;code&gt;XBPS_PKG_OPTIONS_&amp;lt;pkgname&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: if &lt;code&gt;pkgname&lt;/code&gt; contains &lt;code&gt;dashes&lt;/code&gt;, those should be replaced by &lt;code&gt;underscores&lt;/code&gt; i.e &lt;code&gt;XBPS_PKG_OPTIONS_xorg_server=opt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The list of supported package build options and its description is defined in the &lt;code&gt;common/options.description&lt;/code&gt; file or in the &lt;code&gt;template&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;sharing-and-signing&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Sharing and signing your local repositories&lt;/h3&gt; &#xA;&lt;p&gt;To share a local repository remotely it&#39;s mandatory to sign it and the binary packages stored on it. This is accomplished with the &lt;code&gt;xbps-rindex(1)&lt;/code&gt; utility.&lt;/p&gt; &#xA;&lt;p&gt;First a RSA key must be created with &lt;code&gt;openssl(1)&lt;/code&gt; or &lt;code&gt;ssh-keygen(1)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ openssl genrsa -des3 -out privkey.pem 4096&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ssh-keygen -t rsa -b 4096 -m PEM -f privkey.pem&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Only RSA keys in PEM format are currently accepted by xbps.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Once the RSA private key is ready you can use it to initialize the repository metadata:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ xbps-rindex --sign --signedby &#34;I&#39;m Groot&#34; --privkey privkey.pem $PWD/hostdir/binpkgs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then make a signature per package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ xbps-rindex --sign-pkg --privkey privkey.pem $PWD/hostdir/binpkgs/*.xbps&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If --privkey is unset, it defaults to &lt;code&gt;~/.ssh/id_rsa&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If the RSA key was protected with a passphrase you&#39;ll have to type it, or alternatively set it via the &lt;code&gt;XBPS_PASSPHRASE&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;p&gt;Once the binary packages have been signed, check if the repository contains the appropriate &lt;code&gt;hex fingerprint&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ xbps-query --repository=hostdir/binpkgs -vL&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each time a binary package is created, a package signature must be created with &lt;code&gt;--sign-pkg&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It is not possible to sign a repository with multiple RSA keys.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a name=&#34;rebuilding&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Rebuilding and overwriting existing local packages&lt;/h3&gt; &#xA;&lt;p&gt;Packages are overwritten on every build to make getting package with changed build options easy. To make xbps-src skip build and preserve first package build with given version and revision, same as in official void repository, set &lt;code&gt;XBPS_PRESERVE_PKGS=yes&lt;/code&gt; in &lt;code&gt;etc/conf&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Reinstalling a package in your target &lt;code&gt;rootdir&lt;/code&gt; can be easily done too:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ xbps-install --repository=/path/to/local/repo -yf xbps-0.25_1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;code&gt;-f&lt;/code&gt; flag twice will overwrite configuration files.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Please note that the &lt;code&gt;package expression&lt;/code&gt; must be properly defined to explicitly pick up the package from the desired repository.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a name=&#34;distcc&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Enabling distcc for distributed compilation&lt;/h3&gt; &#xA;&lt;p&gt;Setup the slaves (machines that will compile the code):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# xbps-install -Sy distcc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Modify the configuration to allow your local network machines to use distcc (e.g. &lt;code&gt;192.168.2.0/24&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# echo &#34;192.168.2.0/24&#34; &amp;gt;&amp;gt; /etc/distcc/clients.allow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enable and start the &lt;code&gt;distccd&lt;/code&gt; service:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# ln -s /etc/sv/distccd /var/service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install distcc on the host (machine that executes xbps-src) as well. Unless you want to use the host as slave from other machines, there is no need to modify the configuration.&lt;/p&gt; &#xA;&lt;p&gt;On the host you can now enable distcc in the &lt;code&gt;void-packages/etc/conf&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;XBPS_DISTCC=yes&#xA;XBPS_DISTCC_HOSTS=&#34;localhost/2 --localslots_cpp=24 192.168.2.101/9 192.168.2.102/2&#34;&#xA;XBPS_MAKEJOBS=16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The example values assume a localhost CPU with 4 cores of which at most 2 are used for compiler jobs. The number of slots for preprocessor jobs is set to 24 in order to have enough preprocessed data for other CPUs to compile. The slave 192.168.2.101 has a CPU with 8 cores and the /9 for the number of jobs is a saturating choice. The slave 192.168.2.102 is set to run at most 2 compile jobs to keep its load low, even if its CPU has 4 cores. The XBPS_MAKEJOBS setting is increased to 16 to account for the possible parallelism (2 + 9 + 2 + some slack).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;distfiles-mirrors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Distfiles mirror(s)&lt;/h3&gt; &#xA;&lt;p&gt;In etc/conf you may optionally define a mirror or a list of mirrors to search for distfiles.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ echo &#39;XBPS_DISTFILES_MIRROR=&#34;ftp://192.168.100.5/gentoo/distfiles&#34;&#39; &amp;gt;&amp;gt; etc/conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If more than one mirror is to be searched, you can either specify multiple URLs separated with blanks, or add to the variable like this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ echo &#39;XBPS_DISTFILES_MIRROR+=&#34; https://sources.voidlinux.org/&#34;&#39; &amp;gt;&amp;gt; etc/conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure to put the blank after the first double quote in this case.&lt;/p&gt; &#xA;&lt;p&gt;The mirrors are searched in order for the distfiles to build a package until the checksum of the downloaded file matches the one specified in the template.&lt;/p&gt; &#xA;&lt;p&gt;Ultimately, if no mirror carries the distfile, or in case all downloads failed the checksum verification, the original download location is used.&lt;/p&gt; &#xA;&lt;p&gt;If you use &lt;code&gt;uchroot&lt;/code&gt; for your XBPS_CHROOT_CMD, you may also specify a local path using the &lt;code&gt;file://&lt;/code&gt; prefix or simply an absolute path on your build host (e.g. /mnt/distfiles). Mirror locations specified this way are bind mounted inside the chroot environment under $XBPS_MASTERDIR and searched for distfiles just the same as remote locations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;cross-compiling&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Cross compiling packages for a target architecture&lt;/h3&gt; &#xA;&lt;p&gt;Currently &lt;code&gt;xbps-src&lt;/code&gt; can cross build packages for some target architectures with a cross compiler. The supported target is shown with &lt;code&gt;./xbps-src -h&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If a source package has been adapted to be &lt;strong&gt;cross buildable&lt;/strong&gt; &lt;code&gt;xbps-src&lt;/code&gt; will automatically build the binary package(s) with a simple command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./xbps-src -a &amp;lt;target&amp;gt; pkg &amp;lt;pkgname&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the build for whatever reason fails, might be a new build issue or simply because it hasn&#39;t been adapted to be &lt;strong&gt;cross compiled&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;foreign&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Using xbps-src in a foreign Linux distribution&lt;/h3&gt; &#xA;&lt;p&gt;xbps-src can be used in any recent Linux distribution matching the CPU architecture.&lt;/p&gt; &#xA;&lt;p&gt;To use xbps-src in your Linux distribution use the following instructions. Let&#39;s start downloading the xbps static binaries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ wget http://repo-default.voidlinux.org/static/xbps-static-latest.&amp;lt;arch&amp;gt;-musl.tar.xz&#xA;$ mkdir ~/XBPS&#xA;$ tar xvf xbps-static-latest.&amp;lt;arch&amp;gt;-musl.tar.xz -C ~/XBPS&#xA;$ export PATH=~/XBPS/usr/bin:$PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;xbps-uunshare&lt;/code&gt; does not work because of lack of &lt;code&gt;user_namespaces(7)&lt;/code&gt; support, try other &lt;a href=&#34;https://raw.githubusercontent.com/void-linux/void-packages/master/#chroot-methods&#34;&gt;chroot methods&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Clone the &lt;code&gt;void-packages&lt;/code&gt; git repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/void-linux/void-packages.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and &lt;code&gt;xbps-src&lt;/code&gt; should be fully functional; just start the &lt;code&gt;bootstrap&lt;/code&gt; process, i.e:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./xbps-src binary-bootstrap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default masterdir is created in the current working directory, i.e &lt;code&gt;void-packages/masterdir&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;remaking-masterdir&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Remaking the masterdir&lt;/h3&gt; &#xA;&lt;p&gt;If for some reason you must update xbps-src and the &lt;code&gt;bootstrap-update&lt;/code&gt; target is not enough, it&#39;s possible to recreate a masterdir with two simple commands (please note that &lt;code&gt;zap&lt;/code&gt; keeps your &lt;code&gt;ccache/distcc/host&lt;/code&gt; directories intact):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./xbps-src zap&#xA;$ ./xbps-src binary-bootstrap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;updating-masterdir&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Keeping your masterdir uptodate&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes the bootstrap packages must be updated to the latest available version in repositories, this is accomplished with the &lt;code&gt;bootstrap-update&lt;/code&gt; target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./xbps-src bootstrap-update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;building-32bit&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Building 32bit packages on x86_64&lt;/h3&gt; &#xA;&lt;p&gt;Two ways are available to build 32bit packages on x86_64:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;native mode with a 32bit masterdir (recommended, used in official repository)&lt;/li&gt; &#xA; &lt;li&gt;cross compilation mode to i686 &lt;a href=&#34;https://raw.githubusercontent.com/void-linux/void-packages/master/#cross-compiling&#34;&gt;target&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The canonical mode (native) needs a new x86 &lt;code&gt;masterdir&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./xbps-src -m masterdir-x86 binary-bootstrap i686&#xA;$ ./xbps-src -m masterdir-x86 ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;building-for-musl&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Building packages natively for the musl C library&lt;/h3&gt; &#xA;&lt;p&gt;Canonical way of building packages for same architecture but different C library is through dedicated masterdir. To build for x86_64-musl on glibc x86_64 system, prepare a new masterdir with the musl packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./xbps-src -m masterdir-x86_64-musl binary-bootstrap x86_64-musl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your new masterdir is now ready to build packages natively for the musl C library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./xbps-src -m masterdir-x86_64-musl pkg ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;building-base-system&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Building void base-system from scratch&lt;/h3&gt; &#xA;&lt;p&gt;To rebuild all packages in &lt;code&gt;base-system&lt;/code&gt; for your native architecture:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./xbps-src -N pkg base-system&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s also possible to cross compile everything from scratch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./xbps-src -a &amp;lt;target&amp;gt; -N pkg base-system&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the build has finished, you can specify the path to the local repository to &lt;code&gt;void-mklive&lt;/code&gt;, i.e:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# cd void-mklive&#xA;# make&#xA;# ./mklive.sh ... -r /path/to/hostdir/binpkgs&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>apachecn/pytorch-doc-zh</title>
    <updated>2023-07-30T02:05:53Z</updated>
    <id>tag:github.com,2023-07-30:/apachecn/pytorch-doc-zh</id>
    <link href="https://github.com/apachecn/pytorch-doc-zh" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Pytorch 中文文档&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&#xA; &lt;center&gt;&#xA;  PyTorch 中文文档 &amp;amp; 教程&#xA; &lt;/center&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apachecn/pytorch-doc-zh/master/docs/img/logo.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;center&gt;&#xA; PyTorch 是一个针对深度学习, 并且使用 GPU 和 CPU 来优化的 tensor library (张量库)&#xA;&lt;/center&gt; &#xA;&lt;br&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr align=&#34;center&#34;&gt; &#xA;   &lt;td colspan=&#34;3&#34;&gt;&lt;a title=&#34;Pytorch 2.0 中文版本&#34; href=&#34;https://github.com/apachecn/pytorch-doc-zh/discussions/583&#34; target=&#34;_blank&#34;&gt;&lt;font size=&#34;5&#34;&gt;正在翻译: 2.0 中文版本&lt;/font&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr align=&#34;center&#34;&gt; &#xA;   &lt;td colspan=&#34;1&#34;&gt;&lt;a title=&#34;Pytorch 最新 英文教程&#34; href=&#34;https://pytorch.org/tutorials/&#34; target=&#34;_blank&#34;&gt;&lt;font size=&#34;5&#34;&gt;最新 英文教程&lt;/font&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td colspan=&#34;1&#34;&gt;&lt;a title=&#34;Pytorch 最新 英文文档&#34; href=&#34;https://pytorch.org/docs/master/&#34; target=&#34;_blank&#34;&gt;&lt;font size=&#34;5&#34;&gt;最新 英文文档&lt;/font&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td colspan=&#34;1&#34;&gt;&lt;a title=&#34;Pytorch 最新 中文翻译&#34; href=&#34;https://pytorch.apachecn.org&#34; target=&#34;_blank&#34;&gt;&lt;font size=&#34;5&#34;&gt;最新 中文翻译&lt;/font&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;介绍&lt;/h2&gt; &#xA;&lt;p&gt;欢迎任何人参与和完善：一个人可以走的很快，但是一群人却可以走的更远。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;组织构建[网站]&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GitHub Pages: &lt;a href=&#34;https://pytorch.apachecn.org&#34;&gt;https://pytorch.apachecn.org&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;第三方站长[网站]&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;pytorch 中文文档: &lt;a href=&#34;https://www.bookstack.cn/search/result?wd=pytorch&#34;&gt;https://www.bookstack.cn/search/result?wd=pytorch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;地址A: xxx (欢迎留言，我们完善补充)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;其他补充&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.apachecn.org&#34;&gt;ApacheCN 学习资源&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jq.qq.com/?_wv=1027&amp;amp;k=VSNtgpjb&#34;&gt;ApacheCN 中文翻译组 713436582&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;PyTorch 官方入口&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;中文文档: &lt;a href=&#34;https://pytorch.org/resources&#34;&gt;https://pytorch.org/resources&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apachecn/pytorch-doc-zh/master/docs/img/resources.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;建议反馈&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;在我们的 &lt;a href=&#34;https://github.com/apachecn/pytorch-doc-zh&#34;&gt;apachecn/pytorch-doc-zh&lt;/a&gt; github 上提 issue.&lt;/li&gt; &#xA; &lt;li&gt;发邮件到 Email: &lt;code&gt;apachecn@163.com&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;在我们的 &lt;a href=&#34;https://apachecn.org/cooperate/&#34;&gt;QQ群: 加入方式&lt;/a&gt; 中联系群主/管理员即可.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;关于转载&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;最近有很多人联系我们，关于内容授权问题！&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;开源是指知识应该重在传播和迭代（而不是禁止别人转载）&lt;/li&gt; &#xA; &lt;li&gt;不然你TM在GitHub开源，然后又说不让转载，你TM有病吧！&lt;/li&gt; &#xA; &lt;li&gt;禁止商业化，符合协议规范，备注地址来源，&lt;strong&gt;重点: 不需要&lt;/strong&gt;发邮件给我们申请&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;赞助我们&lt;/h2&gt; &#xA;&lt;img src=&#34;https://data.apachecn.org/img/about/donate.jpg&#34; alt=&#34;微信&amp;amp;支付宝&#34;&gt;</summary>
  </entry>
  <entry>
    <title>openconfig/public</title>
    <updated>2023-07-30T02:05:53Z</updated>
    <id>tag:github.com,2023-07-30:/openconfig/public</id>
    <link href="https://github.com/openconfig/public" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Repository for publishing OpenConfig models, documentation, and other material for the community.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://storage.googleapis.com/openconfig/compatibility-badges/openconfig-public:pyang.html&#34;&gt;&lt;img src=&#34;https://storage.googleapis.com/openconfig/compatibility-badges/openconfig-public:pyang.svg?sanitize=true&#34; alt=&#34;pyang&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://storage.googleapis.com/openconfig/compatibility-badges/openconfig-public:oc-pyang.html&#34;&gt;&lt;img src=&#34;https://storage.googleapis.com/openconfig/compatibility-badges/openconfig-public:oc-pyang.svg?sanitize=true&#34; alt=&#34;OpenConfig Linter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://storage.googleapis.com/openconfig/compatibility-badges/openconfig-public:pyangbind.html&#34;&gt;&lt;img src=&#34;https://storage.googleapis.com/openconfig/compatibility-badges/openconfig-public:pyangbind.svg?sanitize=true&#34; alt=&#34;pyangbind&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://storage.googleapis.com/openconfig/compatibility-badges/openconfig-public:goyang-ygot.html&#34;&gt;&lt;img src=&#34;https://storage.googleapis.com/openconfig/compatibility-badges/openconfig-public:goyang-ygot.svg?sanitize=true&#34; alt=&#34;goyang/ygot&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://storage.googleapis.com/openconfig/compatibility-badges/openconfig-public:yanglint.html&#34;&gt;&lt;img src=&#34;https://storage.googleapis.com/openconfig/compatibility-badges/openconfig-public:yanglint.svg?sanitize=true&#34; alt=&#34;yanglint&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;OpenConfig&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.openconfig.net&#34;&gt;&lt;strong&gt;OpenConfig&lt;/strong&gt;&lt;/a&gt; is a collaborative effort by network operators to develop programmatic interfaces and tools for managing networks in a dynamic, vendor-neutral way. OpenConfig’s initial focus is on compiling a consistent set of vendor-neutral data models (written in &lt;a href=&#34;http://datatracker.ietf.org/doc/rfc6020/&#34;&gt;YANG&lt;/a&gt;) based on actual operational needs from use cases and requirements from multiple network operators.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to OpenConfig&lt;/h2&gt; &#xA;&lt;p&gt;This repository is primarily for publishing the models, documents, and other material developed by the OpenConfig operators group.&lt;/p&gt; &#xA;&lt;p&gt;For information about how to contribute to OpenConfig models, please see &lt;a href=&#34;https://raw.githubusercontent.com/openconfig/public/master/doc/contributions-guide.md&#34;&gt;External Submissions to OpenConfig&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Feedback and suggestions to improve OpenConfig models is welcomed on the &lt;a href=&#34;https://groups.google.com/forum/?hl=en#!forum/netopenconfig&#34;&gt;public mailing list&lt;/a&gt;, or by opening a GitHub &lt;a href=&#34;https://github.com/openconfig/public/issues&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Joining OpenConfig&lt;/h2&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;http://www.openconfig.net&#34;&gt;OpenConfig web site&lt;/a&gt; for information for operators wishing to join OpenConfig, in particular the &lt;a href=&#34;http://openconfig.net/docs/faq-for-operators/&#34;&gt;FAQ for operators&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>