<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-06T01:50:05Z</updated>
  <subtitle>Weekly Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>acmesh-official/acme.sh</title>
    <updated>2022-11-06T01:50:05Z</updated>
    <id>tag:github.com,2022-11-06:/acmesh-official/acme.sh</id>
    <link href="https://github.com/acmesh-official/acme.sh" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A pure Unix shell script implementing ACME client protocol&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;An ACME Shell script: acme.sh&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/FreeBSD.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/FreeBSD.yml/badge.svg?sanitize=true&#34; alt=&#34;FreeBSD&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/OpenBSD.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/OpenBSD.yml/badge.svg?sanitize=true&#34; alt=&#34;OpenBSD&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/NetBSD.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/NetBSD.yml/badge.svg?sanitize=true&#34; alt=&#34;NetBSD&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/MacOS.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/MacOS.yml/badge.svg?sanitize=true&#34; alt=&#34;MacOS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Ubuntu.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Ubuntu.yml/badge.svg?sanitize=true&#34; alt=&#34;Ubuntu&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Windows.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Windows.yml/badge.svg?sanitize=true&#34; alt=&#34;Windows&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Solaris.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Solaris.yml/badge.svg?sanitize=true&#34; alt=&#34;Solaris&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/DragonFlyBSD.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/DragonFlyBSD.yml/badge.svg?sanitize=true&#34; alt=&#34;DragonFlyBSD&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/workflows/Shellcheck/badge.svg?sanitize=true&#34; alt=&#34;Shellcheck&#34;&gt; &lt;img src=&#34;https://github.com/acmesh-official/acme.sh/workflows/PebbleStrict/badge.svg?sanitize=true&#34; alt=&#34;PebbleStrict&#34;&gt; &lt;img src=&#34;https://github.com/acmesh-official/acme.sh/workflows/Build%20DockerHub/badge.svg?sanitize=true&#34; alt=&#34;DockerHub&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/acmesh&#34; alt=&#34;Financial Contributors on Open Collective&#34;&gt;&lt;img src=&#34;https://opencollective.com/acmesh/all/badge.svg?label=financial+contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/acme-sh/Lobby?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/acme-sh/Lobby.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/acme-sh/Lobby&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/neilpang/acme.sh&#34; title=&#34;Click to view the image on Docker Hub&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/stars/neilpang/acme.sh.svg?sanitize=true&#34; alt=&#34;Docker stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/neilpang/acme.sh&#34; title=&#34;Click to view the image on Docker Hub&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/neilpang/acme.sh.svg?sanitize=true&#34; alt=&#34;Docker pulls&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An ACME protocol client written purely in Shell (Unix shell) language.&lt;/li&gt; &#xA; &lt;li&gt;Full ACME protocol implementation.&lt;/li&gt; &#xA; &lt;li&gt;Support ECDSA certs&lt;/li&gt; &#xA; &lt;li&gt;Support SAN and wildcard certs&lt;/li&gt; &#xA; &lt;li&gt;Simple, powerful and very easy to use. You only need 3 minutes to learn it.&lt;/li&gt; &#xA; &lt;li&gt;Bash, dash and sh compatible.&lt;/li&gt; &#xA; &lt;li&gt;Purely written in Shell with no dependencies on python.&lt;/li&gt; &#xA; &lt;li&gt;Just one script to issue, renew and install your certificates automatically.&lt;/li&gt; &#xA; &lt;li&gt;DOES NOT require &lt;code&gt;root/sudoer&lt;/code&gt; access.&lt;/li&gt; &#xA; &lt;li&gt;Docker ready&lt;/li&gt; &#xA; &lt;li&gt;IPv6 ready&lt;/li&gt; &#xA; &lt;li&gt;Cron job notifications for renewal or error etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It&#39;s probably the &lt;code&gt;easiest &amp;amp; smartest&lt;/code&gt; shell script to automatically issue &amp;amp; renew the free certificates.&lt;/p&gt; &#xA;&lt;p&gt;Wiki: &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki&#34;&gt;https://github.com/acmesh-official/acme.sh/wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For Docker Fans: &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/Run-acme.sh-in-docker&#34;&gt;acme.sh &lt;span&gt;💕&lt;/span&gt; Docker &lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Twitter: &lt;a href=&#34;https://twitter.com/neilpangxa&#34;&gt;@neilpangxa&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E&#34;&gt;中文说明&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h1&gt;Who:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.crashed.org/letsencrypt-in-freebsd-org/&#34;&gt;FreeBSD.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ruby-china.org/topics/31983&#34;&gt;ruby-china.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pve.proxmox.com/wiki/Certificate_Management&#34;&gt;Proxmox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pfsense/FreeBSD-ports/pull/89&#34;&gt;pfsense&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://community.webfaction.com/questions/19988/using-letsencrypt&#34;&gt;webfaction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.loadbalancer.org/blog/loadbalancer-org-with-lets-encrypt-quick-and-dirty&#34;&gt;Loadbalancer.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://meta.discourse.org/t/setting-up-lets-encrypt/40709&#34;&gt;discourse.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://centminmod.com/letsencrypt-acmetool-https.html&#34;&gt;Centminmod&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.splynx.com/t/free-ssl-cert-for-splynx-lets-encrypt/297&#34;&gt;splynx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.archlinux.org/packages/community/any/acme.sh&#34;&gt;archlinux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/opnsense/plugins/tree/master/security/acme-client/src/opnsense/scripts/OPNsense/AcmeClient&#34;&gt;opnsense.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://centos-webpanel.com/&#34;&gt;CentOS Web Panel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lnmp.org/&#34;&gt;lnmp.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/Blogs-and-tutorials&#34;&gt;more...&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Tested OS&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;NO&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/MacOS.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/MacOS.yml/badge.svg?sanitize=true&#34; alt=&#34;MacOS&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Mac OSX&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Windows.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Windows.yml/badge.svg?sanitize=true&#34; alt=&#34;Windows&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Windows (cygwin with curl, openssl and crontab included)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/FreeBSD.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/FreeBSD.yml/badge.svg?sanitize=true&#34; alt=&#34;FreeBSD&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;FreeBSD&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Solaris.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Solaris.yml/badge.svg?sanitize=true&#34; alt=&#34;Solaris&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Solaris&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Ubuntu.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Ubuntu.yml/badge.svg?sanitize=true&#34; alt=&#34;Ubuntu&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Ubuntu&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;NA&lt;/td&gt; &#xA;   &lt;td&gt;pfsense&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/OpenBSD.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/OpenBSD.yml/badge.svg?sanitize=true&#34; alt=&#34;OpenBSD&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;OpenBSD&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/NetBSD.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/NetBSD.yml/badge.svg?sanitize=true&#34; alt=&#34;NetBSD&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NetBSD&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/DragonFlyBSD.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/DragonFlyBSD.yml/badge.svg?sanitize=true&#34; alt=&#34;DragonFlyBSD&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;DragonFlyBSD&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg?sanitize=true&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Debian&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg?sanitize=true&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;CentOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg?sanitize=true&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;openSUSE&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;13&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg?sanitize=true&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Alpine Linux (with curl)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg?sanitize=true&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Archlinux&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg?sanitize=true&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;fedora&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg?sanitize=true&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Kali Linux&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;17&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg?sanitize=true&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Oracle Linux&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;18&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg?sanitize=true&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Mageia&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;19&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg?sanitize=true&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Gentoo Linux&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg?sanitize=true&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ClearLinux&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td&gt;-----&lt;/td&gt; &#xA;   &lt;td&gt;Cloud Linux &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/issues/111&#34;&gt;https://github.com/acmesh-official/acme.sh/issues/111&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;22&lt;/td&gt; &#xA;   &lt;td&gt;-----&lt;/td&gt; &#xA;   &lt;td&gt;OpenWRT: Tested and working. See &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/How-to-run-on-OpenWRT&#34;&gt;wiki page&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;23&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/letest#here-are-the-latest-status&#34;&gt;&lt;img src=&#34;https://acmesh-official.github.io/acmetest/status/proxmox.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Proxmox: See Proxmox VE Wiki. Version &lt;a href=&#34;https://pve.proxmox.com/wiki/HTTPS_Certificate_Configuration_(Version_4.x,_5.0_and_5.1)#Let.27s_Encrypt_using_acme.sh&#34;&gt;4.x, 5.0, 5.1&lt;/a&gt;, version &lt;a href=&#34;https://pve.proxmox.com/wiki/Certificate_Management&#34;&gt;5.2 and up&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Check our &lt;a href=&#34;https://github.com/acmesh-official/acmetest&#34;&gt;testing project&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/acmesh-official/acmetest&#34;&gt;https://github.com/acmesh-official/acmetest&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Supported CA&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/ZeroSSL.com-CA&#34;&gt;ZeroSSL.com CA&lt;/a&gt;(default)&lt;/li&gt; &#xA; &lt;li&gt;Letsencrypt.org CA&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/BuyPass.com-CA&#34;&gt;BuyPass.com CA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/SSL.com-CA&#34;&gt;SSL.com CA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/Google-Public-CA&#34;&gt;Google.com Public CA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/letsencrypt/pebble&#34;&gt;Pebble strict Mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Any other &lt;a href=&#34;https://tools.ietf.org/html/rfc8555&#34;&gt;RFC8555&lt;/a&gt;-compliant CA&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Supported modes&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Webroot mode&lt;/li&gt; &#xA; &lt;li&gt;Standalone mode&lt;/li&gt; &#xA; &lt;li&gt;Standalone tls-alpn mode&lt;/li&gt; &#xA; &lt;li&gt;Apache mode&lt;/li&gt; &#xA; &lt;li&gt;Nginx mode&lt;/li&gt; &#xA; &lt;li&gt;DNS mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/DNS-alias-mode&#34;&gt;DNS alias mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/Stateless-Mode&#34;&gt;Stateless mode&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;1. How to install&lt;/h1&gt; &#xA;&lt;h3&gt;1. Install online&lt;/h3&gt; &#xA;&lt;p&gt;Check this project: &lt;a href=&#34;https://github.com/acmesh-official/get.acme.sh&#34;&gt;https://github.com/acmesh-official/get.acme.sh&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl https://get.acme.sh | sh -s email=my@example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget -O -  https://get.acme.sh | sh -s email=my@example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Or, Install from git&lt;/h3&gt; &#xA;&lt;p&gt;Clone this project and launch installation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/acmesh-official/acme.sh.git&#xA;cd ./acme.sh&#xA;./acme.sh --install -m my@example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You &lt;code&gt;don&#39;t have to be root&lt;/code&gt; then, although &lt;code&gt;it is recommended&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Advanced Installation: &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/How-to-install&#34;&gt;https://github.com/acmesh-official/acme.sh/wiki/How-to-install&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The installer will perform 3 actions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create and copy &lt;code&gt;acme.sh&lt;/code&gt; to your home dir (&lt;code&gt;$HOME&lt;/code&gt;): &lt;code&gt;~/.acme.sh/&lt;/code&gt;. All certs will be placed in this folder too.&lt;/li&gt; &#xA; &lt;li&gt;Create alias for: &lt;code&gt;acme.sh=~/.acme.sh/acme.sh&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create daily cron job to check and renew the certs if needed.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Cron entry example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;0 0 * * * &#34;/home/user/.acme.sh&#34;/acme.sh --cron --home &#34;/home/user/.acme.sh&#34; &amp;gt; /dev/null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After the installation, you must close the current terminal and reopen it to make the alias take effect.&lt;/p&gt; &#xA;&lt;p&gt;Ok, you are ready to issue certs now.&lt;/p&gt; &#xA;&lt;p&gt;Show help message:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;root@v1:~# acme.sh -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;2. Just issue a cert&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; Single domain.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;acme.sh --issue -d example.com -w /home/wwwroot/example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;acme.sh --issue -d example.com -w /home/username/public_html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;acme.sh --issue -d example.com -w /var/www/html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; Multiple domains in the same cert.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;acme.sh --issue -d example.com -d www.example.com -d cp.example.com -w /home/wwwroot/example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The parameter &lt;code&gt;/home/wwwroot/example.com&lt;/code&gt; or &lt;code&gt;/home/username/public_html&lt;/code&gt; or &lt;code&gt;/var/www/html&lt;/code&gt; is the web root folder where you host your website files. You &lt;strong&gt;MUST&lt;/strong&gt; have &lt;code&gt;write access&lt;/code&gt; to this folder.&lt;/p&gt; &#xA;&lt;p&gt;Second argument &lt;strong&gt;&#34;example.com&#34;&lt;/strong&gt; is the main domain you want to issue the cert for. You must have at least one domain there.&lt;/p&gt; &#xA;&lt;p&gt;You must point and bind all the domains to the same webroot dir: &lt;code&gt;/home/wwwroot/example.com&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The certs will be placed in &lt;code&gt;~/.acme.sh/example.com/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The certs will be renewed automatically every &lt;strong&gt;60&lt;/strong&gt; days.&lt;/p&gt; &#xA;&lt;p&gt;More examples: &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert&#34;&gt;https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;3. Install the cert to Apache/Nginx etc.&lt;/h1&gt; &#xA;&lt;p&gt;After the cert is generated, you probably want to install/copy the cert to your Apache/Nginx or other servers. You &lt;strong&gt;MUST&lt;/strong&gt; use this command to copy the certs to the target files, &lt;strong&gt;DO NOT&lt;/strong&gt; use the certs files in &lt;strong&gt;~/.acme.sh/&lt;/strong&gt; folder, they are for internal use only, the folder structure may change in the future.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Apache&lt;/strong&gt; example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;acme.sh --install-cert -d example.com \&#xA;--cert-file      /path/to/certfile/in/apache/cert.pem  \&#xA;--key-file       /path/to/keyfile/in/apache/key.pem  \&#xA;--fullchain-file /path/to/fullchain/certfile/apache/fullchain.pem \&#xA;--reloadcmd     &#34;service apache2 force-reload&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Nginx&lt;/strong&gt; example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;acme.sh --install-cert -d example.com \&#xA;--key-file       /path/to/keyfile/in/nginx/key.pem  \&#xA;--fullchain-file /path/to/fullchain/nginx/cert.pem \&#xA;--reloadcmd     &#34;service nginx force-reload&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Only the domain is required, all the other parameters are optional.&lt;/p&gt; &#xA;&lt;p&gt;The ownership and permission info of existing files are preserved. You can pre-create the files to define the ownership and permission.&lt;/p&gt; &#xA;&lt;p&gt;Install/copy the cert/key to the production Apache or Nginx path.&lt;/p&gt; &#xA;&lt;p&gt;The cert will be renewed every &lt;strong&gt;60&lt;/strong&gt; days by default (which is configurable). Once the cert is renewed, the Apache/Nginx service will be reloaded automatically by the command: &lt;code&gt;service apache2 force-reload&lt;/code&gt; or &lt;code&gt;service nginx force-reload&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please take care: The reloadcmd is very important. The cert can be automatically renewed, but, without a correct &#39;reloadcmd&#39; the cert may not be flushed to your server(like nginx or apache), then your website will not be able to show renewed cert in 60 days.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;4. Use Standalone server to issue cert&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;(requires you to be root/sudoer or have permission to listen on port 80 (TCP))&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Port &lt;code&gt;80&lt;/code&gt; (TCP) &lt;strong&gt;MUST&lt;/strong&gt; be free to listen on, otherwise you will be prompted to free it and try again.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;acme.sh --issue --standalone -d example.com -d www.example.com -d cp.example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More examples: &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert&#34;&gt;https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;5. Use Standalone ssl server to issue cert&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;(requires you to be root/sudoer or have permission to listen on port 443 (TCP))&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Port &lt;code&gt;443&lt;/code&gt; (TCP) &lt;strong&gt;MUST&lt;/strong&gt; be free to listen on, otherwise you will be prompted to free it and try again.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;acme.sh --issue --alpn -d example.com -d www.example.com -d cp.example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More examples: &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert&#34;&gt;https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;6. Use Apache mode&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;(requires you to be root/sudoer, since it is required to interact with Apache server)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are running a web server, it is recommended to use the &lt;code&gt;Webroot mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Particularly, if you are running an Apache server, you can use Apache mode instead. This mode doesn&#39;t write any files to your web root folder.&lt;/p&gt; &#xA;&lt;p&gt;Just set string &#34;apache&#34; as the second argument and it will force use of apache plugin automatically.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;acme.sh --issue --apache -d example.com -d www.example.com -d cp.example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;This apache mode is only to issue the cert, it will not change your apache config files. You will need to configure your website config files to use the cert by yourself. We don&#39;t want to mess with your apache server, don&#39;t worry.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;More examples: &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert&#34;&gt;https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;7. Use Nginx mode&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;(requires you to be root/sudoer, since it is required to interact with Nginx server)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are running a web server, it is recommended to use the &lt;code&gt;Webroot mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Particularly, if you are running an nginx server, you can use nginx mode instead. This mode doesn&#39;t write any files to your web root folder.&lt;/p&gt; &#xA;&lt;p&gt;Just set string &#34;nginx&#34; as the second argument.&lt;/p&gt; &#xA;&lt;p&gt;It will configure nginx server automatically to verify the domain and then restore the nginx config to the original version.&lt;/p&gt; &#xA;&lt;p&gt;So, the config is not changed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;acme.sh --issue --nginx -d example.com -d www.example.com -d cp.example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;This nginx mode is only to issue the cert, it will not change your nginx config files. You will need to configure your website config files to use the cert by yourself. We don&#39;t want to mess with your nginx server, don&#39;t worry.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;More examples: &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert&#34;&gt;https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;8. Automatic DNS API integration&lt;/h1&gt; &#xA;&lt;p&gt;If your DNS provider supports API access, we can use that API to automatically issue the certs.&lt;/p&gt; &#xA;&lt;p&gt;You don&#39;t have to do anything manually!&lt;/p&gt; &#xA;&lt;h3&gt;Currently acme.sh supports most of the dns providers:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/dnsapi&#34;&gt;https://github.com/acmesh-official/acme.sh/wiki/dnsapi&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;9. Use DNS manual mode:&lt;/h1&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/dns-manual-mode&#34;&gt;https://github.com/acmesh-official/acme.sh/wiki/dns-manual-mode&lt;/a&gt; first.&lt;/p&gt; &#xA;&lt;p&gt;If your dns provider doesn&#39;t support any api access, you can add the txt record by hand.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;acme.sh --issue --dns -d example.com -d www.example.com -d cp.example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should get an output like below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Add the following txt record:&#xA;Domain:_acme-challenge.example.com&#xA;Txt value:9ihDbjYfTExAYeDs4DBUeuTo18KBzwvTEjUnSwd32-c&#xA;&#xA;Add the following txt record:&#xA;Domain:_acme-challenge.www.example.com&#xA;Txt value:9ihDbjxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#xA;&#xA;Please add those txt records to the domains. Waiting for the dns to take effect.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then just rerun with &lt;code&gt;renew&lt;/code&gt; argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;acme.sh --renew -d example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ok, it&#39;s done.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Take care, this is dns manual mode, it can not be renewed automatically. you will have to add a new txt record to your domain by your hand when you renew your cert.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please use dns api mode instead.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;10. Issue ECC certificates&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Let&#39;s Encrypt&lt;/code&gt; can now issue &lt;strong&gt;ECDSA&lt;/strong&gt; certificates.&lt;/p&gt; &#xA;&lt;p&gt;And we support them too!&lt;/p&gt; &#xA;&lt;p&gt;Just set the &lt;code&gt;keylength&lt;/code&gt; parameter with a prefix &lt;code&gt;ec-&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;h3&gt;Single domain ECC certificate&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;acme.sh --issue -w /home/wwwroot/example.com -d example.com --keylength ec-256&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SAN multi domain ECC certificate&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;acme.sh --issue -w /home/wwwroot/example.com -d example.com -d www.example.com --keylength ec-256&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please look at the &lt;code&gt;keylength&lt;/code&gt; parameter above.&lt;/p&gt; &#xA;&lt;p&gt;Valid values are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;ec-256 (prime256v1, &#34;ECDSA P-256&#34;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ec-384 (secp384r1, &#34;ECDSA P-384&#34;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ec-521 (secp521r1, &#34;ECDSA P-521&#34;, which is not supported by Let&#39;s Encrypt yet.)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;11. Issue Wildcard certificates&lt;/h1&gt; &#xA;&lt;p&gt;It&#39;s simple, just give a wildcard domain as the &lt;code&gt;-d&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;acme.sh  --issue -d example.com  -d &#39;*.example.com&#39;  --dns dns_cf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;12. How to renew the certs&lt;/h1&gt; &#xA;&lt;p&gt;No, you don&#39;t need to renew the certs manually. All the certs will be renewed automatically every &lt;strong&gt;60&lt;/strong&gt; days.&lt;/p&gt; &#xA;&lt;p&gt;However, you can also force to renew a cert:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;acme.sh --renew -d example.com --force&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or, for ECC cert:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;acme.sh --renew -d example.com --force --ecc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;13. How to stop cert renewal&lt;/h1&gt; &#xA;&lt;p&gt;To stop renewal of a cert, you can execute the following to remove the cert from the renewal list:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;acme.sh --remove -d example.com [--ecc]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The cert/key file is not removed from the disk.&lt;/p&gt; &#xA;&lt;p&gt;You can remove the respective directory (e.g. &lt;code&gt;~/.acme.sh/example.com&lt;/code&gt;) by yourself.&lt;/p&gt; &#xA;&lt;h1&gt;14. How to upgrade &lt;code&gt;acme.sh&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;acme.sh is in constant development, so it&#39;s strongly recommended to use the latest code.&lt;/p&gt; &#xA;&lt;p&gt;You can update acme.sh to the latest code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;acme.sh --upgrade&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also enable auto upgrade:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;acme.sh --upgrade --auto-upgrade&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then &lt;strong&gt;acme.sh&lt;/strong&gt; will be kept up to date automatically.&lt;/p&gt; &#xA;&lt;p&gt;Disable auto upgrade:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;acme.sh --upgrade --auto-upgrade 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;15. Issue a cert from an existing CSR&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/Issue-a-cert-from-existing-CSR&#34;&gt;https://github.com/acmesh-official/acme.sh/wiki/Issue-a-cert-from-existing-CSR&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;16. Send notifications in cronjob&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/notify&#34;&gt;https://github.com/acmesh-official/acme.sh/wiki/notify&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;17. Under the Hood&lt;/h1&gt; &#xA;&lt;p&gt;Speak ACME language using shell, directly to &#34;Let&#39;s Encrypt&#34;.&lt;/p&gt; &#xA;&lt;p&gt;TODO:&lt;/p&gt; &#xA;&lt;h1&gt;18. Acknowledgments&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Acme-tiny: &lt;a href=&#34;https://github.com/diafygi/acme-tiny&#34;&gt;https://github.com/diafygi/acme-tiny&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ACME protocol: &lt;a href=&#34;https://github.com/ietf-wg-acme/acme&#34;&gt;https://github.com/ietf-wg-acme/acme&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;h3&gt;Code Contributors&lt;/h3&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/acmesh/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Financial Contributors&lt;/h3&gt; &#xA;&lt;p&gt;Become a financial contributor and help us sustain our community. [&lt;a href=&#34;https://opencollective.com/acmesh/contribute&#34;&gt;Contribute&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h4&gt;Individuals&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/acmesh&#34;&gt;&lt;img src=&#34;https://opencollective.com/acmesh/individuals.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Organizations&lt;/h4&gt; &#xA;&lt;p&gt;Support this project with your organization. Your logo will show up here with a link to your website. [&lt;a href=&#34;https://opencollective.com/acmesh/contribute&#34;&gt;Contribute&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/acmesh/organization/0/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/acmesh/organization/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/acmesh/organization/1/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/acmesh/organization/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/acmesh/organization/2/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/acmesh/organization/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/acmesh/organization/3/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/acmesh/organization/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/acmesh/organization/4/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/acmesh/organization/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/acmesh/organization/5/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/acmesh/organization/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/acmesh/organization/6/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/acmesh/organization/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/acmesh/organization/7/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/acmesh/organization/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/acmesh/organization/8/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/acmesh/organization/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/acmesh/organization/9/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/acmesh/organization/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Sponsors&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.quantumca.com.cn/?__utm_source=acmesh-donation&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8305679/183255712-634ee1db-bb61-4c03-bca0-bacce99e078c.svg?sanitize=true&#34; alt=&#34;quantumca-acmesh-logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;19. License &amp;amp; Others&lt;/h1&gt; &#xA;&lt;p&gt;License is GPLv3&lt;/p&gt; &#xA;&lt;p&gt;Please Star and Fork me.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/issues&#34;&gt;Issues&lt;/a&gt; and &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/pulls&#34;&gt;pull requests&lt;/a&gt; are welcome.&lt;/p&gt; &#xA;&lt;h1&gt;20. Donate&lt;/h1&gt; &#xA;&lt;p&gt;Your donation makes &lt;strong&gt;acme.sh&lt;/strong&gt; better:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;PayPal/Alipay(支付宝)/Wechat(微信): &lt;a href=&#34;https://donate.acme.sh/&#34;&gt;https://donate.acme.sh/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/Donate-list&#34;&gt;Donate List&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>urbanadventurer/Android-PIN-Bruteforce</title>
    <updated>2022-11-06T01:50:05Z</updated>
    <id>tag:github.com,2022-11-06:/urbanadventurer/Android-PIN-Bruteforce</id>
    <link href="https://github.com/urbanadventurer/Android-PIN-Bruteforce" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Unlock an Android phone (or device) by bruteforcing the lockscreen PIN. Turn your Kali Nethunter phone into a bruteforce PIN cracker for Android devices! (no root, no adb)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🔓📱 Android-PIN-Bruteforce&lt;/h1&gt; &#xA;&lt;p&gt;Unlock an Android phone (or device) by bruteforcing the lockscreen PIN.&lt;/p&gt; &#xA;&lt;p&gt;Turn your Kali Nethunter phone into a bruteforce PIN cracker for Android devices!&lt;/p&gt; &#xA;&lt;h2&gt;📱 How it works&lt;/h2&gt; &#xA;&lt;p&gt;It uses a USB OTG cable to connect the locked phone to the Nethunter device. It emulates a keyboard, automatically tries PINs, and waits after trying too many wrong guesses.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/101783/91640968-b7d46280-ea64-11ea-8340-94e3bacb706e.png&#34; alt=&#34;How to Connect Phones&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;[Nethunter phone] &amp;lt;--&amp;gt; [USB cable] &amp;lt;--&amp;gt; [USB OTG adaptor] &amp;lt;--&amp;gt; [Locked Android phone]&lt;/p&gt; &#xA;&lt;p&gt;The USB HID Gadget driver provides emulation of USB Human Interface Devices (HID). This enables an Android Nethunter device to emulate keyboard input to the locked phone. It&#39;s just like plugging a keyboard into the locked phone and pressing keys.&lt;/p&gt; &#xA;&lt;p&gt;⏱ This takes just over 16.6 hours with a Samsung S5 to try all possible 4 digit PINs, but with the optimised PIN list it should take you much less time.&lt;/p&gt; &#xA;&lt;h3&gt;You will need&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A locked Android phone&lt;/li&gt; &#xA; &lt;li&gt;A Nethunter phone (or any rooted Android with HID kernel support)&lt;/li&gt; &#xA; &lt;li&gt;USB OTG (On The Go) cable/adapter (USB male Micro-B to female USB A), and a standard charging cable (USB male Micro-B to male A).&lt;/li&gt; &#xA; &lt;li&gt;That&#39;s all!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🌟 Benefits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Turn your NetHunter phone into an Android PIN cracking machine&lt;/li&gt; &#xA; &lt;li&gt;Unlike other methods, you do not need ADB or USB debugging enabled on the locked phone&lt;/li&gt; &#xA; &lt;li&gt;The locked Android phone does not need to be rooted&lt;/li&gt; &#xA; &lt;li&gt;You don&#39;t need to buy special hardware, e.g. Rubber Ducky, Teensy, Cellebrite, XPIN Clip, etc.&lt;/li&gt; &#xA; &lt;li&gt;You can easily modify the backoff time to crack other types of devices&lt;/li&gt; &#xA; &lt;li&gt;It works!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;⭐ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Crack PINs of any length from 1 to 10 digits&lt;/li&gt; &#xA; &lt;li&gt;Use config files to support different phones&lt;/li&gt; &#xA; &lt;li&gt;Optimised PIN lists for 3,4,5, and 6 digit PINs&lt;/li&gt; &#xA; &lt;li&gt;Bypasses phone pop-ups including the Low Power warning&lt;/li&gt; &#xA; &lt;li&gt;Detects when the phone is unplugged or powered off, and waits while retrying every 5 seconds&lt;/li&gt; &#xA; &lt;li&gt;Configurable delays of N seconds after every X PIN attempts&lt;/li&gt; &#xA; &lt;li&gt;Log file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;TBC&lt;/p&gt; &#xA;&lt;h2&gt;Executing the script&lt;/h2&gt; &#xA;&lt;p&gt;If you installed the script to /sdcard/, you can execute it with the following command.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;bash ./android-pin-bruteforce&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that Android mounts /sdcard with the noexec flag. You can verify this with &lt;code&gt;mount&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;Android-PIN-Bruteforce (0.2) is used to unlock an Android phone (or device) by bruteforcing the lockscreen PIN.&#xA;  Find more information at: https://github.com/urbanadventurer/Android-PIN-Bruteforce&#xA;&#xA;Commands:&#xA;  crack                Begin cracking PINs&#xA;  resume               Resume from a chosen PIN&#xA;  rewind               Crack PINs in reverse from a chosen PIN&#xA;  diag                 Display diagnostic information&#xA;  version              Display version information and exit&#xA;&#xA;Options:&#xA;  -f, --from PIN       Resume from this PIN&#xA;  -a, --attempts       Starting from NUM incorrect attempts&#xA;  -m, --mask REGEX     Use a mask for known digits in the PIN&#xA;  -t, --type TYPE      Select PIN or PATTERN cracking&#xA;  -l, --length NUM     Crack PINs of NUM length&#xA;  -c, --config FILE    Specify configuration file to load&#xA;  -p, --pinlist FILE   Specify a custom PIN list&#xA;  -d, --dry-run        Dry run for testing. Doesn&#39;t send any keys.&#xA;  -v, --verbose        Output verbose logs&#xA;&#xA;Usage:&#xA;  android-pin-bruteforce &amp;lt;command&amp;gt; [options]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Android Phones/Devices&lt;/h2&gt; &#xA;&lt;p&gt;This has been successfully tested with various phones including the Samsung S5, S7, Motorola G4 Plus and G5 Plus.&lt;/p&gt; &#xA;&lt;p&gt;It can unlock Android versions 6.0.1 through to 10.0. The ability to perform a bruteforce attack doesn&#39;t depend on the Android version in use. It depends on how the device vendor developed their own lockscreen.&lt;/p&gt; &#xA;&lt;p&gt;Check the Phone Database for more details &lt;a href=&#34;https://github.com/urbanadventurer/Android-PIN-Bruteforce/wiki/Phone-Database&#34;&gt;https://github.com/urbanadventurer/Android-PIN-Bruteforce/wiki/Phone-Database&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🎳 PIN Lists&lt;/h2&gt; &#xA;&lt;p&gt;Optimised PIN lists are used by default unless the user selects a custom PIN list.&lt;/p&gt; &#xA;&lt;h3&gt;Cracking PINs of different lengths&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;--length&lt;/code&gt; commandline option.&lt;/p&gt; &#xA;&lt;p&gt;Use this command to crack a 3 digit PIN, &lt;code&gt;./android-pin-bruteforce crack --length 3&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use this command to crack a 6 digit PIN &lt;code&gt;./android-pin-bruteforce crack --length 6&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Where did the optimised PIN lists come from?&lt;/h3&gt; &#xA;&lt;p&gt;The optimised PIN lists were generated by extracting numeric passwords from database leaks then sorting by frequency. All PINs that did not appear in the password leaks were appended to the list.&lt;/p&gt; &#xA;&lt;p&gt;The optimised PIN lists were generated from &lt;em&gt;Ga$$Pacc DB Leak&lt;/em&gt; (21GB decompressed, 688M Accounts, 243 Databases, 138920 numeric passwords).&lt;/p&gt; &#xA;&lt;h4&gt;The 4 digit PIN list&lt;/h4&gt; &#xA;&lt;p&gt;The reason that the 4 digit PIN list is used from a different source is because it gives better results than the generated list from &lt;em&gt;Ga$$Pacc DB Leak&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;optimised-pin-length-4.txt&lt;/code&gt; is an optimised list of all possible 4 digit PINs, sorted by order of likelihood. It can be found with the filename &lt;code&gt;pinlist.txt&lt;/code&gt; at &lt;a href=&#34;https://github.com/mandatoryprogrammer/droidbrute&#34;&gt;https://github.com/mandatoryprogrammer/droidbrute&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This list is used with permission from Justin Engler &amp;amp; Paul Vines from Senior Security Engineer, iSEC Partners, and was used in their Defcon talk, &lt;a href=&#34;https://www.defcon.org/html/defcon-21/dc-21-speakers.html#Engler&#34;&gt;Electromechanical PIN Cracking with Robotic Reconfigurable Button Basher (and C3BO)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Cracking with Masks&lt;/h3&gt; &#xA;&lt;p&gt;Masks use regular expressions with the standard grep extended format.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;./android-pin-bruteforce crack --mask &#34;...[45]&#34; --dry-run&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To try all years from 1900 to 1999, use a mask of &lt;code&gt;19..&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;To try PINs that have a 1 in the first digit, and a 1 in the last digit, use a mask of &lt;code&gt;1..1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;To try PINs that end in 4 or 5, use &lt;code&gt;...[45]&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📱 Configuration for different phones&lt;/h2&gt; &#xA;&lt;p&gt;Device manufacturers create their own lock screens that are different to the default or stock Android. To find out what keys your phone needs, plug a keyboard into the phone and try out different combinations.&lt;/p&gt; &#xA;&lt;p&gt;Load a different configuration file, with the &lt;code&gt;--config FILE&lt;/code&gt; commandline parameter.&lt;/p&gt; &#xA;&lt;p&gt;Example: &lt;code&gt;./android-pin-bruteforce --config ./config.samsung.s5 crack&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also edit the &lt;code&gt;config&lt;/code&gt; file by customising the timing and keys sent.&lt;/p&gt; &#xA;&lt;p&gt;The following configuration variables can be used to support a different phone&#39;s lockscreen.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Timing&#xA;## DELAY_BETWEEN_KEYS is the period of time in seconds to wait after each key is sent&#xA;DELAY_BETWEEN_KEYS=0.25&#xA;&#xA;## The PROGRESSIVE_COOLDOWN_ARRAY variables act as multi-dimensional array to customise the progressive cooldown&#xA;## PROGRESSIVE_ARRAY_ATTEMPT_COUNT__________ is the attempt number&#xA;## PROGRESSIVE_ARRAY_ATTEMPTS_UNTIL_COOLDOWN is how many attempts to try before cooling down&#xA;## PROGRESSIVE_ARRAY_COOLDOWN_IN_SECONDS____ is the cooldown in seconds&#xA;&#xA;PROGRESSIVE_ARRAY_ATTEMPT_COUNT__________=(1  11 41)&#xA;PROGRESSIVE_ARRAY_ATTEMPTS_UNTIL_COOLDOWN=(5   1  1)&#xA;PROGRESSIVE_ARRAY_COOLDOWN_IN_SECONDS____=(30 30 60)&#xA;&#xA;## SEND_KEYS_DISMISS_POPUPS_N_SECONDS_BEFORE_COOLDOWN_END defines how many seconds before the end of the cooldown period, keys will be sent&#xA;# set to 0 to disable&#xA;SEND_KEYS_DISMISS_POPUPS_N_SECONDS_BEFORE_COOLDOWN_END=5&#xA;## SEND_KEYS_DISMISS_POPUPS_AT_COOLDOWN_END configures the keys that are sent to dismiss messages and popups before the end of the cooldown period&#xA;SEND_KEYS_DISMISS_POPUPS_AT_COOLDOWN_END=&#34;enter enter enter&#34;&#xA;&#xA;## KEYS_BEFORE_EACH_PIN configures the keys that are sent to prompt the lock screen to appear. This is sent before each PIN.&#xA;## By default it sends &#34;escape enter&#34;, but some phones will respond to other keys.&#xA;&#xA;# Examples:&#xA;# KEYS_BEFORE_EACH_PIN=&#34;ctrl_escape enter&#34;&#xA;# KEYS_BEFORE_EACH_PIN=&#34;escape space&#34;&#xA;KEYS_BEFORE_EACH_PIN=&#34;escape enter&#34;&#xA;&#xA;## KEYS_STAY_AWAKE_DURING_COOLDOWN the keys that are sent during the cooldown period to keep the phone awake&#xA;KEYS_STAY_AWAKE_DURING_COOLDOWN=&#34;enter&#34;&#xA;&#xA;## SEND_KEYS_STAY_AWAKE_DURING_COOLDOWN_EVERY_N_SECONDS how often the keys are sent, in seconds&#xA;SEND_KEYS_STAY_AWAKE_DURING_COOLDOWN_EVERY_N_SECONDS=5&#xA;&#xA;## DELAY_BEFORE_STARTING is the period of time in seconds to wait before the bruteforce begins&#xA;DELAY_BEFORE_STARTING=2&#xA;## KEYS_BEFORE_STARTING configures the keys that are sent before the bruteforce begins&#xA;KEYS_BEFORE_STARTING=&#34;enter&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Popups&lt;/h3&gt; &#xA;&lt;p&gt;We send keys before the end of the cooldown period, or optionally during the cooldown period. This is to keep the lockscreen app active and to dismiss any popups about the number of incorrect PIN attempts or a low battery warning.&lt;/p&gt; &#xA;&lt;h2&gt;Test sending keys from the NetHunter phone&lt;/h2&gt; &#xA;&lt;h3&gt;Test sending keys from the terminal&lt;/h3&gt; &#xA;&lt;p&gt;Use ssh from your laptop to the NetHunter phone, and use this command to test sending keys:&lt;/p&gt; &#xA;&lt;p&gt;In this example, the enter key is sent.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;echo &#34;enter&#34; | /system/xbin/hid-keyboard /dev/hidg0 keyboard&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;In this example, ctrl-escape is sent.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;echo &#34;left-ctrl escape&#34; | /system/xbin/hid-keyboard /dev/hidg0 keyboard&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note: Sending combinations of keys in &lt;code&gt;config&lt;/code&gt; file variables is different. Currently only &lt;code&gt;ctrl_escape&lt;/code&gt; is supported.&lt;/p&gt; &#xA;&lt;p&gt;In this example, keys a, b, c are sent.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;echo a b c | /system/xbin/hid-keyboard /dev/hidg0 keyboard&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Test sending keys from an app&lt;/h3&gt; &#xA;&lt;p&gt;This Android app is a virtual USB Keyboard that you can use to test sending keys.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://store.nethunter.com/en/packages/remote.hid.keyboard.client/&#34;&gt;https://store.nethunter.com/en/packages/remote.hid.keyboard.client/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How to send special keys&lt;/h3&gt; &#xA;&lt;p&gt;Use this list for the following variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;KEYS_BEFORE_EACH_PIN&lt;/li&gt; &#xA; &lt;li&gt;KEYS_STAY_AWAKE_DURING_COOLDOWN&lt;/li&gt; &#xA; &lt;li&gt;KEYS_BEFORE_STARTING&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To send special keys use the following labels. This list can be found in the hid_gadget_test source code.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key label&lt;/th&gt; &#xA;   &lt;th&gt;Key label&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;left-ctrl&lt;/td&gt; &#xA;   &lt;td&gt;f6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;right-ctrl&lt;/td&gt; &#xA;   &lt;td&gt;f7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;left-shift&lt;/td&gt; &#xA;   &lt;td&gt;f8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;right-shift&lt;/td&gt; &#xA;   &lt;td&gt;f9&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;left-alt&lt;/td&gt; &#xA;   &lt;td&gt;f10&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;right-alt&lt;/td&gt; &#xA;   &lt;td&gt;f11&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;left-meta&lt;/td&gt; &#xA;   &lt;td&gt;f12&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;right-meta&lt;/td&gt; &#xA;   &lt;td&gt;insert&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;return&lt;/td&gt; &#xA;   &lt;td&gt;home&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;esc&lt;/td&gt; &#xA;   &lt;td&gt;pageup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bckspc&lt;/td&gt; &#xA;   &lt;td&gt;del&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tab&lt;/td&gt; &#xA;   &lt;td&gt;end&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;spacebar&lt;/td&gt; &#xA;   &lt;td&gt;pagedown&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;caps-lock&lt;/td&gt; &#xA;   &lt;td&gt;right&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;f1&lt;/td&gt; &#xA;   &lt;td&gt;left&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;f2&lt;/td&gt; &#xA;   &lt;td&gt;down&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;f3&lt;/td&gt; &#xA;   &lt;td&gt;kp-enter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;f4&lt;/td&gt; &#xA;   &lt;td&gt;up&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;f5&lt;/td&gt; &#xA;   &lt;td&gt;num-lock&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To send more than one key at the same time, use the following list:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ctrl_escape (This sends left-ctrl and escape)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you need more key combinations please open a new issue in the GitHub issues list.&lt;/p&gt; &#xA;&lt;h3&gt;Customising the Progressive Cooldown&lt;/h3&gt; &#xA;&lt;p&gt;The following section of the &lt;code&gt;config&lt;/code&gt; file controls the progressive cooldown.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;## The PROGRESSIVE_COOLDOWN_ARRAY variables act as multi-dimensional array to customise the progressive cooldown&#xA;## PROGRESSIVE_ARRAY_ATTEMPT_COUNT__________ is the attempt number&#xA;## PROGRESSIVE_ARRAY_ATTEMPTS_UNTIL_COOLDOWN is how many attempts to try before cooling down&#xA;## PROGRESSIVE_ARRAY_COOLDOWN_IN_SECONDS____ is the cooldown in seconds&#xA;&#xA;PROGRESSIVE_ARRAY_ATTEMPT_COUNT__________=(1  11 41)&#xA;PROGRESSIVE_ARRAY_ATTEMPTS_UNTIL_COOLDOWN=(5   1  1)&#xA;PROGRESSIVE_ARRAY_COOLDOWN_IN_SECONDS____=(30 30 60)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The array is the same as this table.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;attempt number&lt;/th&gt; &#xA;   &lt;th&gt;attempts until cooldown&lt;/th&gt; &#xA;   &lt;th&gt;cooldown&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;30&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;30&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;41&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;60&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Why can&#39;t you use a laptop, or is a Windows or Linux version coming soon?&lt;/h3&gt; &#xA;&lt;p&gt;This script works by emulating USB Human Interface Devices (HID), in this case it is keyboard and mouse input. Laptops have uni-directional USB ports and an Android mobile device/ phone has a bi-directional USB port. A bi-directional port is required to emulate a keyboard.&lt;/p&gt; &#xA;&lt;p&gt;This might change in the future as USB-C is supposed to be uni-directional.&lt;/p&gt; &#xA;&lt;h3&gt;How Android emulates a keyboard&lt;/h3&gt; &#xA;&lt;p&gt;Keys are sent using &lt;code&gt;/system/xbin/hid-keyboard&lt;/code&gt;. To test this and send the key 1 you can use &lt;code&gt;echo 1 | /system/xbin/hid-keyboard dev/hidg0 keyboard&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;In Kali Nethunter, &lt;code&gt;/system/xbin/hid-keyboard&lt;/code&gt; is a compiled copy of &lt;code&gt;hid_gadget_test.c&lt;/code&gt;. This is a small program for testing the HID gadget driver that is included in the Linux Kernel. The source code for this file can be found at &lt;a href=&#34;https://www.kernel.org/doc/html/latest/usb/gadget_hid.html&#34;&gt;https://www.kernel.org/doc/html/latest/usb/gadget_hid.html&lt;/a&gt; and &lt;a href=&#34;https://github.com/aagallag/hid_gadget_test&#34;&gt;https://github.com/aagallag/hid_gadget_test&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;🔧 Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;If it is not bruteforcing PINs&lt;/h3&gt; &#xA;&lt;h4&gt;Check the orientation of the cables&lt;/h4&gt; &#xA;&lt;p&gt;The Nethunter phone should have a regular USB cable attached, while the locked phone should have an OTG adaptor attached.&lt;/p&gt; &#xA;&lt;p&gt;The OTG cable should be connected to the locked Android phone. The regular USB cable should be connected to the Nethunter phone.&lt;/p&gt; &#xA;&lt;p&gt;Refer to the graphic on how to connect the phones.&lt;/p&gt; &#xA;&lt;h4&gt;Check it is emulating a keyboard&lt;/h4&gt; &#xA;&lt;p&gt;You can verify that the NetHunter phone is succesfully emulating a keyboard by connecting it to a computer using a regular charging/data USB cable. Open a text editor like Notepad while it is cracking and you should see it entering PIN numbers into the text editor.&lt;/p&gt; &#xA;&lt;p&gt;Note that you will not need an OTG cable for this.&lt;/p&gt; &#xA;&lt;h4&gt;Try restarting the phones&lt;/h4&gt; &#xA;&lt;p&gt;Try powering off the phones and even taking out the batteries if that is possible.&lt;/p&gt; &#xA;&lt;h4&gt;Try new cables&lt;/h4&gt; &#xA;&lt;p&gt;Try using new cables/adaptors as you may have a faulty cable/adaptor.&lt;/p&gt; &#xA;&lt;h3&gt;If it doesn&#39;t unlock the phone with a correct PIN&lt;/h3&gt; &#xA;&lt;p&gt;You might be sending keys too fast for the phone to process. Increase the DELAY_BETWEEN_KEYS variable in the config file. 💡 If you don&#39;t see 4 dots come up on the phone&#39;s screen then maybe it is not receiving 4 keys.&lt;/p&gt; &#xA;&lt;h3&gt;🔋 Managing Power Consumption&lt;/h3&gt; &#xA;&lt;p&gt;If your phone runs out of power too soon, follow these steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure both phones are fully charged to 100% before you begin&lt;/li&gt; &#xA; &lt;li&gt;Reduce the screen brightness on both the victim phone and NetHunter phone if possible&lt;/li&gt; &#xA; &lt;li&gt;Place both phones into Airplane mode, however you may want to enable WiFi to access the NetHunter phone via SSH.&lt;/li&gt; &#xA; &lt;li&gt;The locked phone will power the NetHunter phone, because it appears as a keyboard accessory&lt;/li&gt; &#xA; &lt;li&gt;Use a USB OTG cable with a Y splitter for an external power supply, to allow charging of the NetHunter phone while cracking&lt;/li&gt; &#xA; &lt;li&gt;Take breaks to charge your devices. Pause the script with CTRL-Z and resume with the &lt;code&gt;fg&lt;/code&gt; shell command.&lt;/li&gt; &#xA; &lt;li&gt;Avoid the SEND_KEYS_STAY_AWAKE_DURING_COOLDOWN_EVERY_N_SECONDS configuration option. This will cause the locked phone to use more battery to keep the screen powered. Instead use the SEND_KEYS_DISMISS_POPUPS_N_SECONDS_BEFORE_COOLDOWN_END option (Default).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Check the Diagnostics Report&lt;/h3&gt; &#xA;&lt;p&gt;Use the command &lt;code&gt;diag&lt;/code&gt; display diagnostic information.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;bash ./android-pin-bruteforce diag&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you receive this message when the USB cable is plugged in then try taking the battery out of the locked Android phone and power cycling it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;[FAIL] HID USB device not ready. Return code from /system/xbin/hid-keyboard was 5.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How the usb-devices command works&lt;/h3&gt; &#xA;&lt;p&gt;The diagnostics command uses the &lt;code&gt;usb-devices&lt;/code&gt; script but it is only necessary as part of determining whether the USB cables are incorrectly connected. This can be downloaded from &lt;a href=&#34;https://github.com/gregkh/usbutils/raw/master/usb-devices&#34;&gt;https://github.com/gregkh/usbutils/blob/master/usb-devices&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use verbose output&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;--verbose&lt;/code&gt; option to check the configuration is as expected. This is especially useful when you are modifying the configuration.&lt;/p&gt; &#xA;&lt;h3&gt;Use the dry-run&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;--dry-run&lt;/code&gt; option to check how it operates without sending any keys to a device. This is especially useful when you are modifying the configuration or during development.&lt;/p&gt; &#xA;&lt;p&gt;Dry run will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Not send any keys&lt;/li&gt; &#xA; &lt;li&gt;Will continue instead of aborting if the &lt;code&gt;KEYBOARD_DEVICE&lt;/code&gt; or &lt;code&gt;HID_KEYBOARD&lt;/code&gt; is missing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;HID USB Mode&lt;/h3&gt; &#xA;&lt;p&gt;Try this command in a shell on the NetHunter phone: &lt;code&gt;/system/bin/setprop sys.usb.config hid&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;💣 Known Issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This cannot detect when the correct PIN is guessed and the phone unlocks.&lt;/li&gt; &#xA; &lt;li&gt;Your phones may run out of 🔋 battery before the correct PIN is found.&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t trust phone configuration files from unknown sources without reviewing them first. The configuration files are shell scripts and could include malicious commands.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🚀 Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[DONE] Works&lt;/li&gt; &#xA; &lt;li&gt;[DONE] Detects USB HID failures&lt;/li&gt; &#xA; &lt;li&gt;[DONE] Improve Usage and commandline options/config files&lt;/li&gt; &#xA; &lt;li&gt;[DONE] Add bruteforce for n digit PINs&lt;/li&gt; &#xA; &lt;li&gt;[DONE] Mask for known digits&lt;/li&gt; &#xA; &lt;li&gt;[DONE] Crack PIN list in reverse (to find which recent PIN unlocked the device)&lt;/li&gt; &#xA; &lt;li&gt;[DONE] Implement configurable lockscreen prompt&lt;/li&gt; &#xA; &lt;li&gt;[DONE] Implement cooldown change after 10 attempts&lt;/li&gt; &#xA; &lt;li&gt;[WORKING] Find/test more devices to bruteforce&lt;/li&gt; &#xA; &lt;li&gt;Add progress bar&lt;/li&gt; &#xA; &lt;li&gt;Add ETA&lt;/li&gt; &#xA; &lt;li&gt;ASCII art&lt;/li&gt; &#xA; &lt;li&gt;Nicer GUI for NetHunter&lt;/li&gt; &#xA; &lt;li&gt;Implement for iPhone&lt;/li&gt; &#xA; &lt;li&gt;Detect when a phone is unlocked (Use Nethunter camera as a sensor?)&lt;/li&gt; &#xA; &lt;li&gt;Crack Android Patterns (try common patterns first)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🙋 Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.&lt;/p&gt; &#xA;&lt;p&gt;Please make sure to update tests as appropriate.&lt;/p&gt; &#xA;&lt;h2&gt;😎 Authors and acknowledgment&lt;/h2&gt; &#xA;&lt;p&gt;Developed by Andrew Horton (@urbanadventurer).&lt;/p&gt; &#xA;&lt;p&gt;👏 The following people have been very helpful:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vlad Filatov (@v1adf): Testing many phones for the Wiki Phone Database&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Motivation&lt;/h3&gt; &#xA;&lt;p&gt;My original motivation to develop this was to unlock a Samsung S5 Android phone. It had belonged to someone who had passed away, and their family needed access to the data on it. As I didn&#39;t have a USB Rubber Ducky or any other hardware handy, I tried using a variety of methods, and eventually realised I had to develop something new.&lt;/p&gt; &#xA;&lt;h3&gt;Credit&lt;/h3&gt; &#xA;&lt;p&gt;The optimised PIN list is from Justin Engler (@justinengler) &amp;amp; Paul Vines from Senior Security Engineer, iSEC Partners and was used in their Defcon talk, &lt;a href=&#34;https://www.defcon.org/html/defcon-21/dc-21-speakers.html#Engler&#34;&gt;Electromechanical PIN Cracking with Robotic Reconfigurable Button Basher (and C3BO).&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Graphics&lt;/h3&gt; &#xA;&lt;p&gt;Designed by Andrew Horton and gratefully using these free vector packs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.vecteezy.com/vector-art/159576-usb-ports-isometric-free-vector&#34;&gt;USB Ports Isometric Free Vector by VisionHeldup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.vecteezy.com/vector-art/107006-hdmi-and-usb-vector-set&#34;&gt;HDMI and USB Vector Set by Mary Winkler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.vecteezy.com/vector-art/661831-isometric-data-security-illustration&#34;&gt;Isometric Data Security Illustration by Rizal.Medanguide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kali NetHunter Logo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🗿 Comparison with other projects and methods to unlock a locked Android phone&lt;/h2&gt; &#xA;&lt;h3&gt;What makes this project unique?&lt;/h3&gt; &#xA;&lt;p&gt;I&#39;ve been asked what makes this project unique when there are other open-source Android PIN cracking projects.&lt;/p&gt; &#xA;&lt;p&gt;Android-PIN-Bruteforce is unique because it cracks the PIN on Android phones from a NetHunter phone and it doesn&#39;t need the locked phone to be pre-hacked.&lt;/p&gt; &#xA;&lt;p&gt;It works:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Without having to buy special hardware, such as a Rubber Ducky, Celebrite, or XPIN Clip.&lt;/li&gt; &#xA; &lt;li&gt;Without ADB or root access (the phone doesn&#39;t have to be pre-hacked).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Project&lt;/th&gt; &#xA;   &lt;th&gt;ADB/USB Debugging&lt;/th&gt; &#xA;   &lt;th&gt;Requires root&lt;/th&gt; &#xA;   &lt;th&gt;Requires $ hardware&lt;/th&gt; &#xA;   &lt;th&gt;Commercial&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;⭐ Android-PIN-Bruteforce&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Nethunter phone&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;github.com/PentesterES/AndroidPINCrack&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;github.com/ByteRockstar1996/Cracking-Android-Pin-Lock&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;github.com/sch3m4/androidpatternlock&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;github.com/georgenicolaou/androidlockcracker&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;github.com/MGF15/P-Decode&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;github.com/BitesFor/ABL&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;github.com/wuseman/WBRUTER&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;github.com/Gh005t/Android-BruteForce&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;github.com/mandatoryprogrammer/droidbrute&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Rubber Ducky $&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;github.com/hak5darren/USB-Rubber-Ducky&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Rubber Ducky $&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;github.com/bbrother/stm32f4androidbruteforce&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;STM32F4 dev board $&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hdb-team.com/product/hdbox/&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;HDBOX $$&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;xpinclip.com&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;XPINClip $$&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cellebrite.com/en/ufed/&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Cellebrite UFED $$$&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Some of these projects/products are really awesome but they achieve a different goal to Android-PIN-Bruteforce.&lt;/p&gt; &#xA;&lt;p&gt;If a project requires a gestures.key or password.key, I&#39;ve listed it as requiring root. If a project requires a custom bootloader, I&#39;ve listed that as requiring both ADB and root. If you would like your project listed in this table then please open a new issue. There are links to each of these projects in the 📚 Related Projects &amp;amp; Futher Reading section.&lt;/p&gt; &#xA;&lt;h3&gt;😭 Regular phone users&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Try the top 20 PINs from the &lt;a href=&#34;https://datagenetics.com/blog/september32012/index.html&#34;&gt;DataGenetics PIN analysis&lt;/a&gt; that apparently unlocks 26.83% of phones.&lt;/li&gt; &#xA; &lt;li&gt;Use an SMS lock-screen bypass app (requires app install before phone is locked)&lt;/li&gt; &#xA; &lt;li&gt;Use Samsung Find My Mobile (requires you set it up before phone is locked)&lt;/li&gt; &#xA; &lt;li&gt;Crash the Lock Screen UI (Android 5.0 and 5.1)&lt;/li&gt; &#xA; &lt;li&gt;Use the Google Forgot pattern, Forgot PIN, or Forgot password (Android 4.4 KitKat and earlier)&lt;/li&gt; &#xA; &lt;li&gt;Factory Reset (you lose all your data 😭)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;🤖 Users who have already replaced their Android ROM&lt;/h3&gt; &#xA;&lt;p&gt;If the phone has already been rooted, has USB debugging enabled, or has adb enabled.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Flash the &lt;code&gt;Pattern Password Disable&lt;/code&gt; ZIP using a custom recovery (Requires TWRP, CMW, Xrec, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Delete &lt;code&gt;/data/system/gesture.key&lt;/code&gt; or &lt;code&gt;password.key&lt;/code&gt; (requires root and adb on locked device)&lt;/li&gt; &#xA; &lt;li&gt;Crack &lt;code&gt;/data/system/gesture.key&lt;/code&gt; and &lt;code&gt;password.key&lt;/code&gt; (requires root and adb on locked device)&lt;/li&gt; &#xA; &lt;li&gt;Update sqlite3 database &lt;code&gt;settings.db&lt;/code&gt; (requires root and adb on locked device)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;🔬 Forensic Investigators&lt;/h3&gt; &#xA;&lt;p&gt;These methods can be expensive and are usually only used by specialised phone forensic investigators.&lt;/p&gt; &#xA;&lt;p&gt;In order of difficulty and expense:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Taking advantage of USB debugging being enabled (Oxygen Forensic Suite)&lt;/li&gt; &#xA; &lt;li&gt;Bruteforce with keyboard emulation (⭐ Android-PIN-Bruteforce, RubberDucky attack, XPIN Clip, HBbox)&lt;/li&gt; &#xA; &lt;li&gt;JTAG (Interface with TAPs (Test Access Ports) on the device board)&lt;/li&gt; &#xA; &lt;li&gt;In-System Programming (ISP) (Involves directly connecting to pins on flash memory chips on the device board)&lt;/li&gt; &#xA; &lt;li&gt;Chip Off (Desolder and remove flash memory chips from the device)&lt;/li&gt; &#xA; &lt;li&gt;Clock Glitching / Voltage Fault Injection (Hardware CPU timing attacks to bypass PIN restrictions)&lt;/li&gt; &#xA; &lt;li&gt;Bootloader exploits (Zero-day exploits that attack the bootloader. GrayKey from Grayshift and Cellebrite)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;JTAG, ISP, and Chip Off techniques are less useful now because most devices are encrypted. I don&#39;t know of any practical attacks on phone PINs that use clock glitching, if you know of a product that uses this technique please let me know so I can include it.&lt;/p&gt; &#xA;&lt;h3&gt;🕵 Security Professionals and Technical Phone Users&lt;/h3&gt; &#xA;&lt;p&gt;Use the USB HID Keyboard Bruteforce with some dedicated hardware.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A RubberDucky and Darren Kitchen&#39;s Hak5 brute-force script&lt;/li&gt; &#xA; &lt;li&gt;Write a script for a USB Teensy&lt;/li&gt; &#xA; &lt;li&gt;Buy expensive forensic hardware&lt;/li&gt; &#xA; &lt;li&gt;Or you can use Android-PIN-Bruteforce with your NetHunter phone!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Attempts to use an otherwise awesome project Duck Hunter, to emulate a RubberDucky payload for Android PIN cracking did not work. It crashed the phone probably because of the payload length.&lt;/p&gt; &#xA;&lt;h2&gt;📚 Related Projects &amp;amp; Futher Reading&lt;/h2&gt; &#xA;&lt;h3&gt;USB HID Hardware without NetHunter&lt;/h3&gt; &#xA;&lt;p&gt;hak5 12x17: Hack Any 4-digit Android PIN in 16 hours with a USB Rubber Ducky &lt;a href=&#34;https://archive.org/details/hak5_12x17&#34;&gt;https://archive.org/details/hak5_12x17&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hak5: USB Rubber Ducky &lt;a href=&#34;https://shop.hak5.org/products/usb-rubber-ducky-deluxe&#34;&gt;https://shop.hak5.org/products/usb-rubber-ducky-deluxe&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;USB-Rubber-Ducky Payloads &lt;a href=&#34;https://github.com/hak5darren/USB-Rubber-Ducky/wiki/Payloads&#34;&gt;https://github.com/hak5darren/USB-Rubber-Ducky/wiki/Payloads&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Teensy &lt;a href=&#34;https://www.pjrc.com/teensy/&#34;&gt;https://www.pjrc.com/teensy/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Brute Forcing An Android Phone with a STM32F4Discovery Development Board &lt;a href=&#34;https://github.com/bbrother/stm32f4androidbruteforce&#34;&gt;https://github.com/bbrother/stm32f4androidbruteforce&lt;/a&gt; &lt;a href=&#34;https://hackaday.com/2013/11/10/brute-forcing-an-android-phone/&#34;&gt;https://hackaday.com/2013/11/10/brute-forcing-an-android-phone/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Automated brute force attack against the Mac EFI PIN (Using a Teensy) &lt;a href=&#34;https://orvtech.com/atacar-efi-pin-macbook-pro-en.html&#34;&gt;https://orvtech.com/atacar-efi-pin-macbook-pro-en.html&lt;/a&gt; &lt;a href=&#34;https://hackaday.io/project/2196-efi-bruteforcer&#34;&gt;https://hackaday.io/project/2196-efi-bruteforcer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Droidbrute: An Android PIN cracking USB rubber ducky payload made efficient with a statistically generated wordlist. &lt;a href=&#34;https://github.com/mandatoryprogrammer/droidbrute&#34;&gt;https://github.com/mandatoryprogrammer/droidbrute&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Discussion forum about the hak5 episode, and Android Brute Force 4-digit pin &lt;a href=&#34;https://forums.hak5.org/topic/28165-payload-android-brute-force-4-digit-pin/&#34;&gt;https://forums.hak5.org/topic/28165-payload-android-brute-force-4-digit-pin/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;NetHunter HID keyboard attacks&lt;/h3&gt; &#xA;&lt;p&gt;NetHunter HID Keyboard Attacks &lt;a href=&#34;https://www.kali.org/docs/nethunter/nethunter-hid-attacks/&#34;&gt;https://www.kali.org/docs/nethunter/nethunter-hid-attacks/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Linux Kernel HID support&lt;/h3&gt; &#xA;&lt;p&gt;Human Interface Devices (HID) &lt;a href=&#34;https://www.kernel.org/doc/html/latest/hid/index.html#&#34;&gt;https://www.kernel.org/doc/html/latest/hid/index.html#&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Linux USB HID gadget driver and hid-keyboard program &lt;a href=&#34;https://www.kernel.org/doc/html/latest/usb/gadget_hid.html&#34;&gt;https://www.kernel.org/doc/html/latest/usb/gadget_hid.html&lt;/a&gt; &lt;a href=&#34;https://github.com/aagallag/hid_gadget_test&#34;&gt;https://github.com/aagallag/hid_gadget_test&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The usb-devices script &lt;a href=&#34;https://github.com/gregkh/usbutils/raw/master/usb-devices&#34;&gt;https://github.com/gregkh/usbutils/blob/master/usb-devices&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Cracking Android PIN and Pattern files&lt;/h3&gt; &#xA;&lt;p&gt;AndroidPINCrack - bruteforce the Android Passcode given the hash and salt (requires root on the phone) &lt;a href=&#34;https://github.com/PentesterES/AndroidPINCrack&#34;&gt;https://github.com/PentesterES/AndroidPINCrack&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Android Pattern Lock Cracker - bruteforce the Android Pattern given an SHA1 hash (requires root on the phone) &lt;a href=&#34;https://github.com/sch3m4/androidpatternlock&#34;&gt;https://github.com/sch3m4/androidpatternlock&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;General Recovery Methods&lt;/h3&gt; &#xA;&lt;p&gt;[Android][Guide]Hacking And Bypassing Android Password/Pattern/Face/PI &lt;a href=&#34;https://forum.xda-developers.com/showthread.php?t=2620456&#34;&gt;https://forum.xda-developers.com/showthread.php?t=2620456&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Android BruteForce using ADB &amp;amp; Shell Scripting &lt;a href=&#34;https://github.com/Gh005t/Android-BruteForce&#34;&gt;https://github.com/Gh005t/Android-BruteForce&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Forensic Methods and Hardware&lt;/h3&gt; &#xA;&lt;p&gt;PATCtech Digital Forensics: Getting Past the Android Passcode &lt;a href=&#34;http://patc.com/online/a/Portals/965/Android%20Passcode.pdf&#34;&gt;http://patc.com/online/a/Portals/965/Android%20Passcode.pdf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;XPIN Clip &lt;a href=&#34;https://xpinclip.com/&#34;&gt;https://xpinclip.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;HDBox from HDB Team &lt;a href=&#34;https://hdb-team.com/product/hdbox/&#34;&gt;https://hdb-team.com/product/hdbox/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Cellebrite UFED &lt;a href=&#34;https://www.cellebrite.com/en/ufed/&#34;&gt;https://www.cellebrite.com/en/ufed/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;GrayKey from Grayshift &lt;a href=&#34;https://www.grayshift.com/graykey/&#34;&gt;https://www.grayshift.com/graykey/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;PIN Analysis&lt;/h3&gt; &#xA;&lt;p&gt;Electromechanical PIN Cracking with Robotic Reconfigurable Button Basher (and C3BO) &lt;a href=&#34;https://www.defcon.org/html/defcon-21/dc-21-speakers.html#Engler&#34;&gt;https://www.defcon.org/html/defcon-21/dc-21-speakers.html#Engler&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;DataGenetics PIN analysis &lt;a href=&#34;https://datagenetics.com/blog/september32012/index.html&#34;&gt;https://datagenetics.com/blog/september32012/index.html&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>asdf-vm/asdf</title>
    <updated>2022-11-06T01:50:05Z</updated>
    <id>tag:github.com,2022-11-06:/asdf-vm/asdf</id>
    <link href="https://github.com/asdf-vm/asdf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Extendable version manager with support for Ruby, Node.js, Elixir, Erlang &amp; more&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;asdf &lt;a href=&#34;https://github.com/asdf-vm/asdf/actions/workflows/lint.yml&#34;&gt;&lt;img src=&#34;https://github.com/asdf-vm/asdf/actions/workflows/lint.yml/badge.svg?sanitize=true&#34; alt=&#34;Lint&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/asdf-vm/asdf/actions/workflows/tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/asdf-vm/asdf/actions/workflows/tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Manage multiple runtime versions with a single CLI tool, extendable via plugins&lt;/strong&gt; - &lt;a href=&#34;https://asdf-vm.com/&#34;&gt;docs at asdf-vm.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;asdf is a CLI tool that can manage multiple language runtime versions on a per-project basis. It is like &lt;code&gt;gvm&lt;/code&gt;, &lt;code&gt;nvm&lt;/code&gt;, &lt;code&gt;rbenv&lt;/code&gt; &amp;amp; &lt;code&gt;pyenv&lt;/code&gt; (and more) all in one! Simply install your language&#39;s plugin!&lt;/p&gt; &#xA;&lt;h2&gt;Why use asdf?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;single CLI for multiple languages&lt;/li&gt; &#xA; &lt;li&gt;consistent commands to manage all your languages&lt;/li&gt; &#xA; &lt;li&gt;single global config keeping defaults in one place&lt;/li&gt; &#xA; &lt;li&gt;single &lt;code&gt;.tool-versions&lt;/code&gt; config file per project&lt;/li&gt; &#xA; &lt;li&gt;support for existing config files &lt;code&gt;.node-version&lt;/code&gt;, &lt;code&gt;.nvmrc&lt;/code&gt;, &lt;code&gt;.ruby-version&lt;/code&gt; for easy migration&lt;/li&gt; &#xA; &lt;li&gt;automatically switches runtime versions as you traverse your directories&lt;/li&gt; &#xA; &lt;li&gt;simple plugin system to add support for your language of choice&lt;/li&gt; &#xA; &lt;li&gt;shell completion available for common shells (Bash, Zsh, Fish, Elvish)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asdf-vm.com/&#34;&gt;Please head over to the documentation site for more information&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://asdf-vm.com/guide/getting-started.html&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://asdf-vm.com/manage/commands.html&#34;&gt;All Commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/asdf-vm/asdf-plugins&#34;&gt;All Plugins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://asdf-vm.com/plugins/create.html&#34;&gt;Create a Plugin&lt;/a&gt; with our &lt;a href=&#34;https://github.com/asdf-vm/asdf-plugin-template&#34;&gt;asdf-plugin-template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/asdf-vm/actions&#34;&gt;asdf GitHub Actions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/asdf-vm/asdf/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md in the repo&lt;/a&gt; or the &lt;a href=&#34;http://asdf-vm.com/contribute/core.html#initial-setup&#34;&gt;Contributing section on the docs site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community &amp;amp; Questions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://asdf-vm.com/learn-more/faq.html&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/asdf-vm/asdf/issues&#34;&gt;&lt;img src=&#34;https://icongr.am/simple/github.svg?color=808080&amp;amp;size=16&#34; alt=&#34;GitHub Issues&#34;&gt; GitHub Issues&lt;/a&gt;: report a bug or raise a feature request to the &lt;code&gt;asdf&lt;/code&gt; core team&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/tagged/asdf-vm&#34;&gt;&lt;img src=&#34;https://icongr.am/fontawesome/stack-overflow.svg?size=16&amp;amp;color=808080&#34; alt=&#34;StackOverflow Tag&#34;&gt; StackOverflow Tag&lt;/a&gt;: see existing Q&amp;amp;A for &lt;code&gt;asdf&lt;/code&gt;. Some of the core team watch this tag in addition to our helpful community&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Ballad of asdf&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Once upon a time there was a programming language&lt;br&gt; There were many versions of it&lt;br&gt; So people wrote a version manager for it&lt;br&gt; To switch between versions for projects&lt;br&gt; Different, old, new.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Then there came more programming languages&lt;br&gt; So there came more version managers&lt;br&gt; And many commands for them&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I installed a lot of them&lt;br&gt; I learnt a lot of commands&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Then I said, just one more version manager&lt;br&gt; Which I will write instead&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;So, there came another version manager&lt;br&gt; &lt;strong&gt;asdf version manager&lt;/strong&gt; - &lt;a href=&#34;https://github.com/asdf-vm/asdf&#34;&gt;https://github.com/asdf-vm/asdf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A version manager so extendable&lt;br&gt; for which anyone can create a plugin&lt;br&gt; To support their favourite language&lt;br&gt; No more installing more version managers&lt;br&gt; Or learning more commands&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;figure&gt; &#xA; &lt;blockquote&gt;&#xA;   This was the mail I wrote to a few friends to tell them about the project. Thanks to &#xA;  &lt;a href=&#34;https://twitter.com/roshanvid&#34; target=&#34;_blank&#34; rel=&#34;noreferrer&#34;&gt;@roshanvid&lt;/a&gt; for suggesting that this go into the readme &#xA; &lt;/blockquote&gt; &#xA; &lt;figcaption&gt; &#xA;  &lt;a href=&#34;https://github.com/HashNuke&#34; target=&#34;_blank&#34; rel=&#34;noreferrer&#34;&gt;@HashNuke&lt;/a&gt; &#xA; &lt;/figcaption&gt; &#xA;&lt;/figure&gt;</summary>
  </entry>
</feed>