<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-16T01:44:43Z</updated>
  <subtitle>Weekly Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>akinomyoga/ble.sh</title>
    <updated>2024-06-16T01:44:43Z</updated>
    <id>tag:github.com,2024-06-16:/akinomyoga/ble.sh</id>
    <link href="https://github.com/akinomyoga/ble.sh" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bash Line Editor―a line editor written in pure Bash with syntax highlighting, auto suggestions, vim modes, etc. for Bash interactive sessions.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;[ Languages: &lt;strong&gt;English&lt;/strong&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/akinomyoga/ble.sh/master/README-ja_JP.md&#34;&gt;日本語&lt;/a&gt; (Japanese) ]&lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;&lt;ruby&gt;ble.sh&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;/blɛʃ/&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; ―Bash Line Editor―&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; [ &lt;b&gt;README&lt;/b&gt; | &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/wiki/Manual-%C2%A71-Introduction&#34;&gt;Manual&lt;/a&gt; | &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/wiki/Q&amp;amp;A&#34;&gt;Q&amp;amp;A&lt;/a&gt; | &lt;a href=&#34;https://github.com/akinomyoga/blesh-contrib&#34;&gt;&lt;code&gt;contrib&lt;/code&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/wiki/Recipes&#34;&gt;Recipes&lt;/a&gt; ] &lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Bash Line Editor&lt;/em&gt; (&lt;code&gt;ble.sh&lt;/code&gt;) is a command line editor written in pure Bash which replaces the default GNU Readline.&lt;/p&gt; &#xA;&lt;p&gt;The current devel version is 0.4. This script supports Bash 3.0 or higher although we recommend using &lt;code&gt;ble.sh&lt;/code&gt; with release versions of &lt;strong&gt;Bash 4.0 or higher&lt;/strong&gt;. Currently, only &lt;code&gt;UTF-8&lt;/code&gt; encoding is supported for non-ASCII characters. This script is provided under the &lt;a href=&#34;https://raw.githubusercontent.com/akinomyoga/ble.sh/master/LICENSE.md&#34;&gt;&lt;strong&gt;BSD License&lt;/strong&gt;&lt;/a&gt; (3-clause BSD license).&lt;/p&gt; &#xA;&lt;p&gt;Disclaimer: The core part of the line editor is written in &lt;strong&gt;pure Bash&lt;/strong&gt;, but &lt;code&gt;ble.sh&lt;/code&gt; relies on POSIX &lt;code&gt;stty&lt;/code&gt; to set up TTY states before and after the execution of user commands. It also uses other POSIX utilities for acceleration in some parts of initialization and cleanup code, processing of large data in completions, pasting large data, etc.&lt;/p&gt; &#xA;&lt;p&gt;Pronunciation: The easiest pronunciation of &lt;code&gt;ble.sh&lt;/code&gt; that users use is /blɛʃ/, but you can pronounce it as you like. I do not specify the canonical way of pronouncing &lt;code&gt;ble.sh&lt;/code&gt;. In fact, I personally call it simply /biːɛliː/ or verbosely read it as /biːɛliː dɑt ɛseɪtʃ/ in my head.&lt;/p&gt; &#xA;&lt;h2&gt;Quick instructions&lt;/h2&gt; &#xA;&lt;p&gt;To use &lt;code&gt;ble.sh&lt;/code&gt;, Bash 3.0+ and POSIX standard utilities are required.&lt;/p&gt; &#xA;&lt;!-- In macOS, you might additionally need to install `gawk`, `nawk`, or `mawk` since macOS `/usr/bin/awk` (awk-32 and later) seems to have a problem with some multibyte charsets. --&gt; &#xA;&lt;p&gt;There are two ways to get &lt;code&gt;ble.sh&lt;/code&gt;: to download and build &lt;code&gt;ble.sh&lt;/code&gt; using &lt;code&gt;git&lt;/code&gt;, or to download the nightly build using &lt;code&gt;curl&lt;/code&gt; or &lt;code&gt;wget&lt;/code&gt;. For the detailed descriptions, see &lt;a href=&#34;https://raw.githubusercontent.com/akinomyoga/ble.sh/master/#get-from-source&#34;&gt;Sec 1.1&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/akinomyoga/ble.sh/master/#get-from-tarball&#34;&gt;Sec 1.2&lt;/a&gt; for trial/installation, and &lt;a href=&#34;https://raw.githubusercontent.com/akinomyoga/ble.sh/master/#set-up-bashrc&#34;&gt;Sec 1.3&lt;/a&gt; for the setup of your &lt;code&gt;~/.bashrc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] If you want to &lt;strong&gt;use fzf with &lt;code&gt;ble.sh&lt;/code&gt;&lt;/strong&gt;, you need to check &lt;a href=&#34;https://raw.githubusercontent.com/akinomyoga/ble.sh/master/#fzf-integration&#34;&gt;Sec 2.8&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details open&gt;&#xA; &lt;summary&gt;&lt;b&gt;Download and generate &lt;code&gt;ble.sh&lt;/code&gt; using &lt;code&gt;git&lt;/code&gt;&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;This requires the commands &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;make&lt;/code&gt; (GNU make), and &lt;code&gt;gawk&lt;/code&gt; (GNU awk). In the following, please replace &lt;code&gt;make&lt;/code&gt; with &lt;code&gt;gmake&lt;/code&gt; if your system provides GNU make as &lt;code&gt;gmake&lt;/code&gt; (such as in BSD).&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# TRIAL without installation&#xA;&#xA;git clone --recursive --depth 1 --shallow-submodules https://github.com/akinomyoga/ble.sh.git&#xA;make -C ble.sh&#xA;source ble.sh/out/ble.sh&#xA;&#xA;# Quick INSTALL to BASHRC (If this doesn&#39;t work, please follow Sec 1.3)&#xA;&#xA;git clone --recursive --depth 1 --shallow-submodules https://github.com/akinomyoga/ble.sh.git&#xA;make -C ble.sh install PREFIX=~/.local&#xA;echo &#39;source ~/.local/share/blesh/ble.sh&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The build process integrates multiple Bash script files into a single Bash script &lt;code&gt;ble.sh&lt;/code&gt; with pre-processing, places other module files in appropriate places, and strips code comments for a shorter initialization time.&lt;/p&gt; &#xA; &lt;p&gt;Note: This does not involve any C/C++/Fortran compilations and generating binaries, so C/C++/Fortran compilers are not needed. Some people seem to believe that one always needs to use &lt;code&gt;make&lt;/code&gt; with C/C++/Fortran compilers to generate binaries. They complain about &lt;code&gt;ble.sh&lt;/code&gt;&#39;s make process, but it comes from the lack of knowledge on the general principle of &lt;code&gt;make&lt;/code&gt;. You may find C/C++ programs in the repository, but they are used to update the Unicode character table from the Unicode database when a new Unicode standard appears. The generated table is included in the repository: &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/raw/master/src/canvas.GraphemeClusterBreak.sh&#34;&gt;&lt;code&gt;canvas.GraphemeClusterBreak.sh&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/raw/master/src/canvas.c2w.musl.sh&#34;&gt;&lt;code&gt;canvas.c2w.musl.sh&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/raw/master/src/canvas.c2w.sh&#34;&gt;&lt;code&gt;canvas.c2w.sh&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/raw/master/src/canvas.emoji.sh&#34;&gt;&lt;code&gt;canvas.emoji.sh&lt;/code&gt;&lt;/a&gt;, so there is no need to run these C/C++ programs in the build process. Another C file is used as an adapter in an old system MSYS1, which is used with an old compiler toolchain in Windows, but it will never be used in Unix-like systems. Each file used in the build process is explained in &lt;a href=&#34;https://raw.githubusercontent.com/akinomyoga/ble.sh/master/make/README.md&#34;&gt;&lt;code&gt;make/README.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;&lt;b&gt;Download the nightly build with &lt;code&gt;curl&lt;/code&gt;&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;This requires the commands &lt;code&gt;curl&lt;/code&gt;, &lt;code&gt;tar&lt;/code&gt; (with the support for the &lt;code&gt;J&lt;/code&gt; flag), and &lt;code&gt;xz&lt;/code&gt; (XZ Utils).&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# TRIAL without installation&#xA;&#xA;curl -L https://github.com/akinomyoga/ble.sh/releases/download/nightly/ble-nightly.tar.xz | tar xJf -&#xA;source ble-nightly/ble.sh&#xA;&#xA;# Quick INSTALL to BASHRC (If this doesn&#39;t work, please follow Sec 1.3)&#xA;&#xA;curl -L https://github.com/akinomyoga/ble.sh/releases/download/nightly/ble-nightly.tar.xz | tar xJf -&#xA;bash ble-nightly/ble.sh --install ~/.local/share&#xA;echo &#39;source ~/.local/share/blesh/ble.sh&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;After the installation, the directory &lt;code&gt;ble-nightly&lt;/code&gt; can be removed.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;&lt;b&gt;Download the nightly build with &lt;code&gt;wget&lt;/code&gt;&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;This requires the commands &lt;code&gt;wget&lt;/code&gt;, &lt;code&gt;tar&lt;/code&gt; (with the support for the &lt;code&gt;J&lt;/code&gt; flag), and &lt;code&gt;xz&lt;/code&gt; (XZ Utils).&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# TRIAL without installation&#xA;&#xA;wget -O - https://github.com/akinomyoga/ble.sh/releases/download/nightly/ble-nightly.tar.xz | tar xJf -&#xA;source ble-nightly/ble.sh&#xA;&#xA;# Quick INSTALL to BASHRC (If this doesn&#39;t work, please follow Sec 1.3)&#xA;&#xA;wget -O - https://github.com/akinomyoga/ble.sh/releases/download/nightly/ble-nightly.tar.xz | tar xJf -&#xA;bash ble-nightly/ble.sh --install ~/.local/share&#xA;echo &#39;source ~/.local/share/blesh/ble.sh&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;After the installation, the directory &lt;code&gt;ble-nightly&lt;/code&gt; can be removed.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details open&gt;&#xA; &lt;summary&gt;&lt;b&gt;Install a package using a package manager&lt;/b&gt; (currently only a few packages)&lt;/summary&gt; &#xA; &lt;p&gt;This only requires the corresponding package manager.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/akinomyoga/ble.sh/wiki/Manual-A1-Installation#user-content-AUR&#34;&gt;AUR (Arch Linux)&lt;/a&gt; &lt;code&gt;blesh-git&lt;/code&gt; (devel), &lt;code&gt;blesh&lt;/code&gt; (stable 0.3.4)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/akinomyoga/ble.sh/wiki/Manual-A1-Installation#user-content-nixpkgs&#34;&gt;NixOS (nixpkgs)&lt;/a&gt; &lt;code&gt;blesh&lt;/code&gt; (devel)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://packages.guix.gnu.org/packages/blesh&#34;&gt;Guix&lt;/a&gt; &lt;code&gt;blesh&lt;/code&gt; (devel)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details open&gt;&#xA; &lt;summary&gt;&lt;b&gt;Update an existing copy of &lt;code&gt;ble.sh&lt;/code&gt;&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# UPDATE (in a ble.sh session)&#xA;&#xA;ble-update&#xA;&#xA;# UPDATE (outside ble.sh sessions)&#xA;&#xA;bash /path/to/ble.sh --update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;&lt;b&gt;Create a package of &lt;code&gt;ble.sh&lt;/code&gt;&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Since &lt;code&gt;ble.sh&lt;/code&gt; is just a set of shell scripts and do not contain any binary (i.e., &#34;&lt;code&gt;noarch&lt;/code&gt;&#34;), you may just download the pre-built tarball from release pages and put the extracted contents in e.g. &lt;code&gt;/tmp/blesh-package/usr/local&lt;/code&gt;. Nevertheless, if you need to build the package from the source, please use the following commands. Note that the git repository (&lt;code&gt;.git&lt;/code&gt;) is required for the build.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# BUILD &amp;amp; PACKAGE (for package maintainers)&#xA;&#xA;git clone --recursive https://github.com/akinomyoga/ble.sh.git&#xA;make -C ble.sh install DESTDIR=/tmp/blesh-package PREFIX=/usr/local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;When you would like to tell &lt;code&gt;ble.sh&lt;/code&gt; the way to update the package for &lt;code&gt;ble-update&lt;/code&gt;, you can place &lt;code&gt;_package.bash&lt;/code&gt; at &lt;code&gt;${prefix}/share/blesh/lib/_package.bash&lt;/code&gt;. The file &lt;code&gt;_package.bash&lt;/code&gt; is supposed to define a shell variable and a shell function as illustrated in the following example (please replace &lt;code&gt;XXX&lt;/code&gt; with the package management system):&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ${prefix}/share/blesh/lib/_package.bash&#xA;&#xA;_ble_base_package_type=XXX&#xA;&#xA;function ble/base/package:XXX/update {&#xA;  update-the-package-in-a-proper-way&#xA;  return 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;When the shell function returns exit status 0, it means that the update has been successfully done, and the reload of &lt;code&gt;ble.sh&lt;/code&gt; will be automatically happen. When the shell function returns exit status 6, the timestamp of &lt;code&gt;ble.sh&lt;/code&gt; is checked, and the reload of &lt;code&gt;ble.sh&lt;/code&gt; only happens when &lt;code&gt;ble.sh&lt;/code&gt; is actually update. When the shell function returns exit status 125, the default &lt;code&gt;ble.sh&lt;/code&gt; update procedure is attempted. Otherwise, the updating procedure is canceled, where any message explaining situation should be output by the shell function. An example &lt;code&gt;_package.bash&lt;/code&gt; for &lt;code&gt;AUR&lt;/code&gt; can be found &lt;a href=&#34;https://aur.archlinux.org/cgit/aur.git/tree/blesh-update.sh?h=blesh-git&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Syntax highlighting&lt;/strong&gt;: Highlight command lines input by users as in &lt;code&gt;fish&lt;/code&gt; and &lt;code&gt;zsh-syntax-highlighting&lt;/code&gt;. Unlike the simple highlighting in &lt;code&gt;zsh-syntax-highlighting&lt;/code&gt;, &lt;code&gt;ble.sh&lt;/code&gt; performs syntactic analysis to enable the correct highlighting of complex structures such as nested command substitutions, multiple here documents, etc. Highlighting colors and styles are &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/wiki/Manual-%C2%A72-Graphics&#34;&gt;fully configurable&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Enhanced completion&lt;/strong&gt;: Extend &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/wiki/Manual-%C2%A77-Completion&#34;&gt;completion&lt;/a&gt; by &lt;strong&gt;syntax-aware completion&lt;/strong&gt;, completion with quotes and parameter expansions in prefix texts, &lt;strong&gt;ambiguous candidate generation&lt;/strong&gt;, etc. Also, &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/wiki/Manual-%C2%A77-Completion#user-content-sec-menu-complete&#34;&gt;&lt;strong&gt;menu-complete&lt;/strong&gt;&lt;/a&gt; supports the selection of candidates in the menu (candidate list) by cursor keys, &lt;kbd&gt;TAB&lt;/kbd&gt;, and &lt;kbd&gt;S-TAB&lt;/kbd&gt;. The feature &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/wiki/Manual-%C2%A77-Completion#user-content-sec-auto-complete&#34;&gt;&lt;strong&gt;auto-complete&lt;/strong&gt;&lt;/a&gt; supports the automatic suggestion of completed texts as in &lt;code&gt;fish&lt;/code&gt; and &lt;code&gt;zsh-autosuggestions&lt;/code&gt; (with Bash 4.0+). The feature &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/wiki/Manual-%C2%A77-Completion#user-content-sec-menu-filter&#34;&gt;&lt;strong&gt;menu-filter&lt;/strong&gt;&lt;/a&gt; integrates automatic filtering of candidates into menu completion (with Bash 4.0+). There are other functionalities such as &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/wiki/Manual-%C2%A77-Completion#user-content-sec-dabbrev&#34;&gt;&lt;strong&gt;dabbrev&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/wiki/Manual-%C2%A77-Completion#user-content-sec-sabbrev&#34;&gt;&lt;strong&gt;sabbrev&lt;/strong&gt;&lt;/a&gt; like &lt;a href=&#34;https://unix.stackexchange.com/questions/6152/zsh-alias-expansion&#34;&gt;&lt;em&gt;zsh abbreviations&lt;/em&gt;&lt;/a&gt; or &lt;a href=&#34;https://github.com/olets/zsh-abbr&#34;&gt;&lt;code&gt;zsh-abbr&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Vim editing mode&lt;/strong&gt;: Enhance &lt;code&gt;readline&lt;/code&gt;&#39;s vi editing mode available with &lt;code&gt;set -o vi&lt;/code&gt;. Vim editing mode supports various vim modes such as char/line/block visual/select mode, replace mode, command mode, operator pending mode as well as insert mode and normal mode. Vim editing mode supports various operators, text objects, registers, keyboard macros, marks, etc. It also provides &lt;code&gt;vim-surround&lt;/code&gt; as an option.&lt;/li&gt; &#xA; &lt;li&gt;Other interesting features include &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/wiki/Manual-%C2%A74-Editing#user-content-bleopt-prompt_status_line&#34;&gt;&lt;strong&gt;status line&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/wiki/Manual-%C2%A74-Editing#user-content-bleopt-history_share&#34;&gt;&lt;strong&gt;history share&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/wiki/Manual-%C2%A74-Editing#user-content-bleopt-prompt_rps1&#34;&gt;&lt;strong&gt;right prompt&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/wiki/Manual-%C2%A74-Editing#user-content-bleopt-prompt_ps1_transient&#34;&gt;&lt;strong&gt;transient prompt&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/wiki/Manual-%C2%A74-Editing#user-content-bleopt-prompt_xterm_title&#34;&gt;&lt;strong&gt;xterm title&lt;/strong&gt;&lt;/a&gt;, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: ble.sh does not provide specific settings of the prompt, aliases, functions, etc. ble.sh provides a more fundamental infrastructure so that users can set up their own prompt, aliases, functions, etc. Of course ble.sh can be used in combination with other Bash configurations such as &lt;a href=&#34;https://github.com/Bash-it/bash-it&#34;&gt;&lt;code&gt;bash-it&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/ohmybash/oh-my-bash&#34;&gt;&lt;code&gt;oh-my-bash&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Demo (version 0.2)&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/akinomyoga/ble.sh/wiki/images/trial1.gif&#34; alt=&#34;ble.sh demo gif&#34;&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;History and roadmap&lt;/h2&gt; &#xA;&lt;p&gt;My little experiment took place in one corner of my &lt;code&gt;bashrc&lt;/code&gt; at the end of May 2013 after I enjoyed an article on &lt;code&gt;zsh-syntax-highlighting&lt;/code&gt;. I initially thought something could be achieved by writing a few hundred lines of code but soon realized that everything needs to be re-implemented for the authentic support of syntax highlighting in Bash. I decided to make it as an independent script &lt;code&gt;ble.sh&lt;/code&gt;. The name stemmed from that of Zsh&#39;s line editor, &lt;em&gt;ZLE&lt;/em&gt; (&lt;em&gt;Zsh Line Editor&lt;/em&gt;), but suffixed with &lt;code&gt;.sh&lt;/code&gt; for the implication of being written in a shell script. I&#39;m occasionally asked about the pronunciation of &lt;code&gt;ble.sh&lt;/code&gt;, but you can pronounce it as you like. After the two-week experiment, I was satisfied with my conclusion that it is &lt;em&gt;possible&lt;/em&gt; to implement a full-featured line editor in Bash that satisfies the actual daily uses. The real efforts to improve the prototype implementation for real uses started in February 2015. I released the initial version in the next December. Until then, the basic part of the line editor was completed. The implementation of vim mode was started in September 2017 and completed in the next March. I started working on the enhancement of the completion in August 2018 and released it in the next February.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2013-06 v0.0 -- prototype&lt;/li&gt; &#xA; &lt;li&gt;2015-12 v0.1 -- Syntax highlighting [&lt;a href=&#34;https://github.com/akinomyoga/ble.sh/releases/tag/v0.1.15&#34;&gt;v0.1.15&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;2018-03 v0.2 -- Vim mode [&lt;a href=&#34;https://github.com/akinomyoga/ble.sh/releases/tag/v0.2.7&#34;&gt;v0.2.7&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;2019-02 v0.3 -- Enhanced completion [&lt;a href=&#34;https://github.com/akinomyoga/ble.sh/releases/tag/v0.3.4&#34;&gt;v0.3.4&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;20xx-xx v0.4 (plan) -- programmable highlighting [&lt;a href=&#34;https://github.com/akinomyoga/ble.sh/releases/tag/nightly&#34;&gt;nightly build&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;20xx-xx v0.5 (plan) -- TUI configuration&lt;/li&gt; &#xA; &lt;li&gt;20xx-xx v0.6 (plan) -- error diagnostics?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Limitations and assumptions&lt;/h2&gt; &#xA;&lt;p&gt;There are some limitations due to the way &lt;code&gt;ble.sh&lt;/code&gt; is implemented. Also, some user configurations or other Bash frameworks may conflict with ble.sh. For example,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;By default, &lt;code&gt;ble.sh&lt;/code&gt; does not set &lt;code&gt;PIPESTATUS&lt;/code&gt; for the previous command line because it adds extra execution costs. Instead, the array &lt;code&gt;BLE_PIPESTATUS&lt;/code&gt; contains the values of &lt;code&gt;PIPESTATUS&lt;/code&gt; of the previous command line. If you need to access the values directly through the variable &lt;code&gt;PIPESTATUS&lt;/code&gt;, please set the option &lt;code&gt;bleopt exec_restore_pipestatus=1&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;By default, &lt;code&gt;ble.sh&lt;/code&gt; assumes that &lt;code&gt;PROMPT_COMMAND&lt;/code&gt; and &lt;code&gt;PRECMD&lt;/code&gt; hooks do not change the cursor position and the layout in the terminal display to offer smooth rendering. If you have settings that output texts or changes the cursor position in &lt;code&gt;PROMPT_COMMAND&lt;/code&gt; and &lt;code&gt;PRECMD&lt;/code&gt;, please set the option &lt;code&gt;bleopt prompt_command_changes_layout=1&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ble.sh&lt;/code&gt; assumes that common variable names and environment variables (such as &lt;code&gt;LC_*&lt;/code&gt;) are not used for the global readonly variables. In Bash, global readonly variables take effect in any scope including the local scope of the function, which means that we cannot even define a local variable that has the same name as a global readonly variable. This is not the problem specific to &lt;code&gt;ble.sh&lt;/code&gt;, but any Bash framework may suffer from the global readonly variables. It is generally not recommended to define global readonly variables in Bash except for the security reasoning (Refs. &lt;a href=&#34;https://lists.gnu.org/archive/html/bug-bash/2019-03/threads.html#00150&#34;&gt;[1]&lt;/a&gt;, &lt;a href=&#34;https://lists.gnu.org/archive/html/bug-bash/2020-04/threads.html#00200&#34;&gt;[2]&lt;/a&gt;, &lt;a href=&#34;https://mywiki.wooledge.org/BashProgramming?highlight=%28%22readonly%22%20flag,%20or%20an%20%22integer%22%20flag,%20but%20these%20are%20mostly%20useless,%20and%20serious%20scripts%20shouldn%27t%20be%20using%20them%29#Variables&#34;&gt;[3]&lt;/a&gt;). Also, &lt;code&gt;ble.sh&lt;/code&gt; overrides the builtin &lt;code&gt;readonly&lt;/code&gt; with a shell function to prevent it from making global variables readonly. It allows only uppercase global variables and &lt;code&gt;_*&lt;/code&gt; to become readonly except &lt;code&gt;_ble_*&lt;/code&gt;, &lt;code&gt;__ble_*&lt;/code&gt;, and some special uppercase variables.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ble.sh&lt;/code&gt; overrides Bash&#39;s built-in commands (&lt;code&gt;trap&lt;/code&gt;, &lt;code&gt;readonly&lt;/code&gt;, &lt;code&gt;bind&lt;/code&gt;, &lt;code&gt;history&lt;/code&gt;, &lt;code&gt;read&lt;/code&gt;, and &lt;code&gt;exit&lt;/code&gt;) with shell functions to adjust the behavior of each built-in command and prevent them from interfering with &lt;code&gt;ble.sh&lt;/code&gt;. If the user or another framework directly calls the original builtins through &lt;code&gt;builtin BUILTIN&lt;/code&gt;, or if the user or another framework replaces the shell functions, the behavior is undefined.&lt;/li&gt; &#xA; &lt;li&gt;The shell and terminal settings for the line editor and the command execution are different. &lt;code&gt;ble.sh&lt;/code&gt; adjusts them for the line editor and try to restore the settings for the command execution. However, there are settings that cannot be restored or are intentionally not restored for various reasons. Some of them are summarlized on &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/wiki/Internals#internal-and-external&#34;&gt;a wiki page&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;1 Usage&lt;/h1&gt; &#xA;&lt;h2&gt;1.1 Try &lt;code&gt;ble.sh&lt;/code&gt; generated from source (version ble-0.4 devel)&lt;sup&gt;&lt;a id=&#34;get-from-source&#34; href=&#34;https://raw.githubusercontent.com/akinomyoga/ble.sh/master/#get-from-source&#34;&gt;†&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Generate&lt;/h3&gt; &#xA;&lt;p&gt;To generate &lt;code&gt;ble.sh&lt;/code&gt;, &lt;code&gt;gawk&lt;/code&gt; (GNU awk) and &lt;code&gt;gmake&lt;/code&gt; (GNU make) (in addition to Bash and POSIX standard utilities) are required. The file &lt;code&gt;ble.sh&lt;/code&gt; can be generated using the following commands. If you have GNU make installed on &lt;code&gt;gmake&lt;/code&gt;, please use &lt;code&gt;gmake&lt;/code&gt; instead of &lt;code&gt;make&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --recursive https://github.com/akinomyoga/ble.sh.git&#xA;cd ble.sh&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A script file &lt;code&gt;ble.sh&lt;/code&gt; will be generated in the directory &lt;code&gt;ble.sh/out&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Try&lt;/h3&gt; &#xA;&lt;p&gt;Then, you can load &lt;code&gt;ble.sh&lt;/code&gt; in the Bash session using the &lt;code&gt;source&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source out/ble.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;To install &lt;code&gt;ble.sh&lt;/code&gt; in a specified directory, use &lt;code&gt;make install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# INSTALL to ~/.local/share/blesh&#xA;make install&#xA;&#xA;# INSTALL to a specified directory&#xA;make install INSDIR=/path/to/blesh&#xA;&#xA;# PACKAGE (for package maintainers)&#xA;make install DESTDIR=/tmp/blesh-package PREFIX=/usr/local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If either the make variables &lt;code&gt;DESTDIR&lt;/code&gt; or &lt;code&gt;PREFIX&lt;/code&gt; is supplied, &lt;code&gt;ble.sh&lt;/code&gt; will be copied to &lt;code&gt;$DESTDIR/$PREFIX/share/blesh&lt;/code&gt;. Otherwise, if the make variables &lt;code&gt;INSDIR&lt;/code&gt; is specified, it will be installed directly on &lt;code&gt;$INSDIR&lt;/code&gt;. Otherwise, if the environment variable &lt;code&gt;$XDG_DATA_HOME&lt;/code&gt; is defined, the install location will be &lt;code&gt;$XDG_DATA_HOME/blesh&lt;/code&gt;. If none of these variables are specified, the default install location is &lt;code&gt;~/.local/share/blesh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The comment lines and blank lines in the script files are stripped in the installation process. If you would like to keep these lines in the script files, please specify the argument &lt;code&gt;strip_comment=no&lt;/code&gt; to &lt;code&gt;make&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To set up &lt;code&gt;.bashrc&lt;/code&gt; see &lt;a href=&#34;https://raw.githubusercontent.com/akinomyoga/ble.sh/master/#set-up-bashrc&#34;&gt;Sec. 1.3&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;1.2 Or, use a tar ball of &lt;code&gt;ble.sh&lt;/code&gt; obtained from GitHub releases&lt;sup&gt;&lt;a id=&#34;get-from-tarball&#34; href=&#34;https://raw.githubusercontent.com/akinomyoga/ble.sh/master/#get-from-tarball&#34;&gt;†&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt; &#xA;&lt;p&gt;For download, trial and install, see the description at each release page. The stable versions are significantly old compared to the devel version, so many features are unavailable.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Devel &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/releases/tag/v0.4.0-devel3&#34;&gt;v0.4.0-devel3&lt;/a&gt; (2020-12), &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/releases/tag/nightly&#34;&gt;nightly build&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Stable &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/releases/tag/v0.3.4&#34;&gt;v0.3.4&lt;/a&gt; (2019-02 fork) Enhanced completions&lt;/li&gt; &#xA; &lt;li&gt;Stable &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/releases/tag/v0.2.7&#34;&gt;v0.2.7&lt;/a&gt; (2018-03 fork) Vim mode&lt;/li&gt; &#xA; &lt;li&gt;Stable &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/releases/tag/v0.1.15&#34;&gt;v0.1.15&lt;/a&gt; (2015-12 fork) Syntax highlighting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;1.3 Set up &lt;code&gt;.bashrc&lt;/code&gt;&lt;sup&gt;&lt;a id=&#34;set-up-bashrc&#34; href=&#34;https://raw.githubusercontent.com/akinomyoga/ble.sh/master/#set-up-bashrc&#34;&gt;†&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If you want to load &lt;code&gt;ble.sh&lt;/code&gt; in interactive sessions of &lt;code&gt;bash&lt;/code&gt; by default, usually one can just source &lt;code&gt;ble.sh&lt;/code&gt; in &lt;code&gt;~/.bashrc&lt;/code&gt;, but a more reliable way is to add the following codes to your &lt;code&gt;.bashrc&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# bashrc&#xA;&#xA;# Add this lines at the top of .bashrc:&#xA;[[ $- == *i* ]] &amp;amp;&amp;amp; source /path/to/blesh/ble.sh --noattach&#xA;&#xA;# your bashrc settings come here...&#xA;&#xA;# Add this line at the end of .bashrc:&#xA;[[ ${BLE_VERSION-} ]] &amp;amp;&amp;amp; ble-attach&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Basically, when &lt;code&gt;source /path/to/ble.sh&lt;/code&gt; and &lt;code&gt;ble-attach&lt;/code&gt; are performed, standard streams (&lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt;, and &lt;code&gt;stderr&lt;/code&gt;) should not be redirected but should be connected to the controlling TTY of the current session. Also, please avoid calling &lt;code&gt;source /path/to/ble.sh&lt;/code&gt; in shell functions. The detailed conditions where the above &lt;em&gt;more reliable setup&lt;/em&gt; is needed are explained in &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/discussions/254#discussioncomment-4284757&#34;&gt;an answer in Discussion #254&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;1.4 User settings &lt;code&gt;~/.blerc&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;User settings can be placed in the init script &lt;code&gt;~/.blerc&lt;/code&gt; (or &lt;code&gt;${XDG_CONFIG_HOME:-$HOME/.config}/blesh/init.sh&lt;/code&gt; if &lt;code&gt;~/.blerc&lt;/code&gt; is not available) whose template is available as the file &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/raw/master/blerc.template&#34;&gt;&lt;code&gt;blerc.template&lt;/code&gt;&lt;/a&gt; in the repository. The init script is a Bash script that is sourced during the load of &lt;code&gt;ble.sh&lt;/code&gt;, so any shell commands can be used in &lt;code&gt;~/.blerc&lt;/code&gt;. If you want to change the default path of the init script, you can add the option &lt;code&gt;--rcfile INITFILE&lt;/code&gt; to &lt;code&gt;source ble.sh&lt;/code&gt; as the following example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# in bashrc&#xA;&#xA;# Example 1: ~/.blerc will be used by default&#xA;[[ $- == *i* ]] &amp;amp;&amp;amp; source /path/to/blesh/ble.sh --noattach&#xA;&#xA;# Example 2: /path/to/your/blerc will be used&#xA;[[ $- == *i* ]] &amp;amp;&amp;amp; source /path/to/blesh/ble.sh --noattach --rcfile /path/to/your/blerc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;1.5 Update&lt;/h2&gt; &#xA;&lt;p&gt;You need Git (&lt;code&gt;git&lt;/code&gt;), GNU awk (&lt;code&gt;gawk&lt;/code&gt;) and GNU make (&lt;code&gt;make&lt;/code&gt;). For &lt;code&gt;ble-0.3+&lt;/code&gt;, you can run &lt;code&gt;ble-update&lt;/code&gt; in the session with &lt;code&gt;ble.sh&lt;/code&gt; loaded:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ble-update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;code&gt;ble.0.4+&lt;/code&gt;, you can also update it outside the &lt;code&gt;ble.sh&lt;/code&gt; session using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bash /path/to/ble.sh --update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can instead download the latest version by &lt;code&gt;git pull&lt;/code&gt; and install it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ble.sh   # &amp;lt;-- enter the git repository you already have&#xA;git pull&#xA;git submodule update --recursive --remote&#xA;make&#xA;make INSDIR=&#34;$HOME/.local/share/blesh&#34; install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;1.6 Uninstall&lt;/h2&gt; &#xA;&lt;p&gt;Basically you can simply delete the installed directory and the settings that the user added.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Close all the &lt;code&gt;ble.sh&lt;/code&gt; sessions (the Bash interactive sessions with &lt;code&gt;ble.sh&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Remove related user data. If you would like to keep them, you can skip these steps. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Remove the added lines in &lt;code&gt;.bashrc&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Remove &lt;code&gt;blerc&lt;/code&gt; files (&lt;code&gt;~/.blerc&lt;/code&gt; or &lt;code&gt;~/.config/blesh/init.sh&lt;/code&gt;) if any.&lt;/li&gt; &#xA;   &lt;li&gt;Remove the state directory &lt;code&gt;~/.local/state/blesh&lt;/code&gt; if any.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Remove the directory where &lt;code&gt;ble.sh&lt;/code&gt; is installed. When you use &lt;code&gt;out/ble.sh&lt;/code&gt; inside the working tree of the git repository, the installed directory is the directory of the repository. When you use &lt;code&gt;ble.sh&lt;/code&gt; installed by &lt;code&gt;make install&lt;/code&gt;, the installed directory is &lt;code&gt;&amp;lt;PREFIX&amp;gt;/share/blesh&lt;/code&gt; where &lt;code&gt;&amp;lt;PREFIX&amp;gt;&lt;/code&gt; (default: &lt;code&gt;~/.local&lt;/code&gt;) is the prefix specified to &lt;code&gt;make install&lt;/code&gt; in the installation stage. When you use the version extracted from a tarball, the directory created by extracting the tarball is the installed directory.&lt;/li&gt; &#xA; &lt;li&gt;Remove the cache directory &lt;code&gt;~/.cache/blesh&lt;/code&gt; if any.&lt;/li&gt; &#xA; &lt;li&gt;Remove the temporary directory &lt;code&gt;/tmp/blesh&lt;/code&gt; if any [ Only needed when your system does not automatically clear &lt;code&gt;/tmp&lt;/code&gt; ].&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;2 Basic settings&lt;/h1&gt; &#xA;&lt;p&gt;Here, some of the settings for &lt;code&gt;~/.blerc&lt;/code&gt; are picked up. You can find useful settings also in &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/wiki/Q&amp;amp;A&#34;&gt;Q&amp;amp;A&lt;/a&gt;, &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/wiki/Recipes&#34;&gt;Recipes&lt;/a&gt;, and &lt;a href=&#34;https://github.com/akinomyoga/blesh-contrib&#34;&gt;&lt;code&gt;contrib&lt;/code&gt; repository&lt;/a&gt;. The complete list of setting items can be found in the file &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/raw/master/blerc.template&#34;&gt;&lt;code&gt;blerc.template&lt;/code&gt;&lt;/a&gt;. For detailed explanations please refer to &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/wiki&#34;&gt;Manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;2.1 Vim mode&lt;/h2&gt; &#xA;&lt;p&gt;For the vi/vim mode, check &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/wiki/Vi-(Vim)-editing-mode&#34;&gt;the wiki page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;2.2 Disable features&lt;/h2&gt; &#xA;&lt;p&gt;One of frequently asked questions is the way to disable a specific feature that &lt;code&gt;ble.sh&lt;/code&gt; adds. Here the settings for disabling features are summarized.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Disable syntax highlighting&#xA;bleopt highlight_syntax=&#xA;&#xA;# Disable highlighting based on filenames&#xA;bleopt highlight_filename=&#xA;&#xA;# Disable highlighting based on variable types&#xA;bleopt highlight_variable=&#xA;&#xA;# Disable auto-complete (Note: auto-complete is enabled by default in bash-4.0+)&#xA;bleopt complete_auto_complete=&#xA;# Tip: you may instead specify the delay of auto-complete in millisecond&#xA;bleopt complete_auto_delay=300&#xA;&#xA;# Disable auto-complete based on the command history&#xA;bleopt complete_auto_history=&#xA;&#xA;# Disable ambiguous completion&#xA;bleopt complete_ambiguous=&#xA;&#xA;# Disable menu-complete by TAB&#xA;bleopt complete_menu_complete=&#xA;&#xA;# Disable menu filtering (Note: auto-complete is enabled by default in bash-4.0+)&#xA;bleopt complete_menu_filter=&#xA;&#xA;# Disable EOF marker like &#34;[ble: EOF]&#34;&#xA;bleopt prompt_eol_mark=&#39;&#39;&#xA;# Tip: you may instead specify another string:&#xA;bleopt prompt_eol_mark=&#39;⏎&#39;&#xA;&#xA;# Disable error exit marker like &#34;[ble: exit %d]&#34;&#xA;bleopt exec_errexit_mark=&#xA;# Tip: you may instead specify another string:&#xA;bleopt exec_errexit_mark=$&#39;\e[91m[error %d]\e[m&#39;&#xA;&#xA;# Disable elapsed-time marker like &#34;[ble: elapsed 1.203s (CPU 0.4%)]&#34;&#xA;bleopt exec_elapsed_mark=&#xA;# Tip: you may instead specify another string&#xA;bleopt exec_elapsed_mark=$&#39;\e[94m[%ss (%s %%)]\e[m&#39;&#xA;# Tip: you may instead change the threshold of showing the mark&#xA;bleopt exec_elapsed_enabled=&#39;sys+usr&amp;gt;=10*60*1000&#39; # e.g. ten minutes for total CPU usage&#xA;&#xA;# Disable exit marker like &#34;[ble: exit]&#34;&#xA;bleopt exec_exit_mark=&#xA;&#xA;# Disable some other markers like &#34;[ble: ...]&#34;&#xA;bleopt edit_marker=&#xA;bleopt edit_marker_error=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;2.3 CJK Width&lt;/h2&gt; &#xA;&lt;p&gt;The option &lt;code&gt;char_width_mode&lt;/code&gt; controls the width of the Unicode characters with &lt;code&gt;East_Asian_Width=A&lt;/code&gt; (Ambiguous characters). Currently, four values &lt;code&gt;emacs&lt;/code&gt;, &lt;code&gt;west&lt;/code&gt;, &lt;code&gt;east&lt;/code&gt;, and &lt;code&gt;auto&lt;/code&gt; are supported. With the value &lt;code&gt;emacs&lt;/code&gt;, the default width in emacs is used. With &lt;code&gt;west&lt;/code&gt;, all the ambiguous characters have width 1 (Hankaku). With &lt;code&gt;east&lt;/code&gt;, all the ambiguous characters have width 2 (Zenkaku). With &lt;code&gt;auto&lt;/code&gt;, the width mode &lt;code&gt;west&lt;/code&gt; or &lt;code&gt;east&lt;/code&gt; is automatically chosen based on the terminal behavior. The default value is &lt;code&gt;auto&lt;/code&gt;. The appropriate value should be chosen in accordance with your terminal behavior. For example, the value can be changed to &lt;code&gt;west&lt;/code&gt; as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bleopt char_width_mode=&#39;west&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;2.4 Input Encoding&lt;/h2&gt; &#xA;&lt;p&gt;The option &lt;code&gt;input_encoding&lt;/code&gt; controls the encoding scheme used in the decode of input. Currently &lt;code&gt;UTF-8&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt; are available. With the value &lt;code&gt;C&lt;/code&gt;, byte values are directly interpreted as character codes. The default value is &lt;code&gt;UTF-8&lt;/code&gt;. For example, the value can be changed to &lt;code&gt;C&lt;/code&gt; as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bleopt input_encoding=&#39;C&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;2.5 Bell&lt;/h2&gt; &#xA;&lt;p&gt;The options &lt;code&gt;edit_abell&lt;/code&gt; and &lt;code&gt;edit_vbell&lt;/code&gt; control the behavior of the edit function &lt;code&gt;bell&lt;/code&gt;. If &lt;code&gt;edit_abell&lt;/code&gt; is a non-empty string, the audible bell is enabled, i.e. ASCII Control Character &lt;code&gt;BEL&lt;/code&gt; (0x07) will be written to &lt;code&gt;stderr&lt;/code&gt;. If &lt;code&gt;edit_vbell&lt;/code&gt; is a non-empty string, the visual bell is enabled. By default, the audible bell is enabled while the visual bell is disabled.&lt;/p&gt; &#xA;&lt;p&gt;The option &lt;code&gt;vbell_default_message&lt;/code&gt; specifies the message shown as the visual bell. The default value is &lt;code&gt;&#39; Wuff, -- Wuff!! &#39;&lt;/code&gt;. The option &lt;code&gt;vbell_duration&lt;/code&gt; specifies the display duration of the visual-bell message. The unit is a millisecond. The default value is &lt;code&gt;2000&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, the visual bell can be enabled as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bleopt edit_vbell=1 vbell_default_message=&#39; BEL &#39; vbell_duration=3000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For another instance, the audible bell is disabled as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bleopt edit_abell=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;2.6 Highlight Colors&lt;/h2&gt; &#xA;&lt;p&gt;The colors and attributes used in the syntax highlighting are controlled by the function &lt;code&gt;ble-face&lt;/code&gt;. The following code reproduces the default configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# highlighting related to editing&#xA;ble-face -s region                    bg=60,fg=white&#xA;ble-face -s region_target             bg=153,fg=black&#xA;ble-face -s region_match              bg=55,fg=white&#xA;ble-face -s region_insert             fg=12,bg=252&#xA;ble-face -s disabled                  fg=242&#xA;ble-face -s overwrite_mode            fg=black,bg=51&#xA;ble-face -s vbell                     reverse&#xA;ble-face -s vbell_erase               bg=252&#xA;ble-face -s vbell_flash               fg=green,reverse&#xA;ble-face -s prompt_status_line        fg=231,bg=240&#xA;&#xA;# syntax highlighting&#xA;ble-face -s syntax_default            none&#xA;ble-face -s syntax_command            fg=brown&#xA;ble-face -s syntax_quoted             fg=green&#xA;ble-face -s syntax_quotation          fg=green,bold&#xA;ble-face -s syntax_escape             fg=magenta&#xA;ble-face -s syntax_expr               fg=26&#xA;ble-face -s syntax_error              bg=203,fg=231&#xA;ble-face -s syntax_varname            fg=202&#xA;ble-face -s syntax_delimiter          bold&#xA;ble-face -s syntax_param_expansion    fg=purple&#xA;ble-face -s syntax_history_expansion  bg=94,fg=231&#xA;ble-face -s syntax_function_name      fg=92,bold&#xA;ble-face -s syntax_comment            fg=242&#xA;ble-face -s syntax_glob               fg=198,bold&#xA;ble-face -s syntax_brace              fg=37,bold&#xA;ble-face -s syntax_tilde              fg=navy,bold&#xA;ble-face -s syntax_document           fg=94&#xA;ble-face -s syntax_document_begin     fg=94,bold&#xA;ble-face -s command_builtin_dot       fg=red,bold&#xA;ble-face -s command_builtin           fg=red&#xA;ble-face -s command_alias             fg=teal&#xA;ble-face -s command_function          fg=92&#xA;ble-face -s command_file              fg=green&#xA;ble-face -s command_keyword           fg=blue&#xA;ble-face -s command_jobs              fg=red&#xA;ble-face -s command_directory         fg=26,underline&#xA;ble-face -s command_suffix            fg=white,bg=green&#xA;ble-face -s command_suffix_new        fg=white,bg=brown&#xA;ble-face -s filename_directory        underline,fg=26&#xA;ble-face -s filename_directory_sticky underline,fg=white,bg=26&#xA;ble-face -s filename_link             underline,fg=teal&#xA;ble-face -s filename_orphan           underline,fg=teal,bg=224&#xA;ble-face -s filename_executable       underline,fg=green&#xA;ble-face -s filename_setuid           underline,fg=black,bg=220&#xA;ble-face -s filename_setgid           underline,fg=black,bg=191&#xA;ble-face -s filename_other            underline&#xA;ble-face -s filename_socket           underline,fg=cyan,bg=black&#xA;ble-face -s filename_pipe             underline,fg=lime,bg=black&#xA;ble-face -s filename_character        underline,fg=white,bg=black&#xA;ble-face -s filename_block            underline,fg=yellow,bg=black&#xA;ble-face -s filename_warning          underline,fg=red&#xA;ble-face -s filename_url              underline,fg=blue&#xA;ble-face -s filename_ls_colors        underline&#xA;ble-face -s varname_array             fg=orange,bold&#xA;ble-face -s varname_empty             fg=31&#xA;ble-face -s varname_export            fg=200,bold&#xA;ble-face -s varname_expr              fg=92,bold&#xA;ble-face -s varname_hash              fg=70,bold&#xA;ble-face -s varname_number            fg=64&#xA;ble-face -s varname_readonly          fg=200&#xA;ble-face -s varname_transform         fg=29,bold&#xA;ble-face -s varname_unset             fg=124&#xA;ble-face -s argument_option           fg=teal&#xA;ble-face -s argument_error            fg=black,bg=225&#xA;&#xA;# highlighting for completions&#xA;ble-face -s auto_complete             fg=238,bg=254&#xA;ble-face -s menu_desc_default         none&#xA;ble-face -s menu_desc_type            ref:syntax_delimiter&#xA;ble-face -s menu_desc_quote           ref:syntax_quoted&#xA;ble-face -s menu_filter_fixed         bold&#xA;ble-face -s menu_filter_input         fg=16,bg=229&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The current list of faces can be obtained by the following command (&lt;code&gt;ble-face&lt;/code&gt; without arguments):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ble-face&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The color codes can be checked in output of the function &lt;code&gt;ble-color-show&lt;/code&gt; (defined in &lt;code&gt;ble.sh&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ble-color-show&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;2.7 Key Bindings&lt;/h2&gt; &#xA;&lt;p&gt;Key bindings can be controlled with the shell function, &lt;code&gt;ble-bind&lt;/code&gt;. For example, with the following setting, &#34;Hello, world!&#34; will be inserted on typing &lt;kbd&gt;C-x h&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ble-bind -f &#39;C-x h&#39; &#39;insert-string &#34;Hello, world!&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The details on the key representation, such as &lt;kbd&gt;C-x h&lt;/kbd&gt; in the above example, are described in &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/wiki/Manual-%C2%A73-Key-Binding#user-content-sec-kspecs&#34;&gt;Manual §3.1&lt;/a&gt;. The representations of &lt;kbd&gt;Space&lt;/kbd&gt;, &lt;kbd&gt;Tab&lt;/kbd&gt;, &lt;kbd&gt;Enter&lt;/kbd&gt;, &lt;kbd&gt;Backspace&lt;/kbd&gt;, &lt;kbd&gt;Escape&lt;/kbd&gt;, etc. are described in &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/wiki/Manual-%C2%A73-Key-Binding#user-content-sec-kspecs-ret&#34;&gt;Manual §3.1.1&lt;/a&gt;: The space is represented as &lt;kbd&gt;SP&lt;/kbd&gt;, the tab key is represented as &lt;kbd&gt;C-i&lt;/kbd&gt; or &lt;kbd&gt;TAB&lt;/kbd&gt; depending on the terminal, the enter/return key is represented as &lt;kbd&gt;C-m&lt;/kbd&gt; or &lt;kbd&gt;RET&lt;/kbd&gt; depending on the terminal, and the backspace key is represented as &lt;kbd&gt;C-?&lt;/kbd&gt;, &lt;kbd&gt;DEL&lt;/kbd&gt;, &lt;kbd&gt;C-h&lt;/kbd&gt;, or &lt;kbd&gt;BS&lt;/kbd&gt; depending on the terminal. The representations of modified special keys such as &lt;kbd&gt;Ctrl+Return&lt;/kbd&gt; and &lt;kbd&gt;Shift+Return&lt;/kbd&gt; are described in &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/wiki/Manual-%C2%A73-Key-Binding#user-content-sec-modifyOtherKeys-manual&#34;&gt;Manual §3.6.4&lt;/a&gt;: If your terminal does not support &lt;code&gt;modifyOtherKeys&lt;/code&gt;, you need to manually configure the escape sequences of modified special keys.&lt;/p&gt; &#xA;&lt;p&gt;For another example, if you want to invoke a command on typing &lt;kbd&gt;M-c&lt;/kbd&gt;, you can write it as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ble-bind -c &#39;M-c&#39; &#39;my-command&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, if you want to invoke a edit function (designed for Bash &lt;code&gt;bind -x&lt;/code&gt;) on typing &lt;kbd&gt;C-r&lt;/kbd&gt;, you can write it as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ble-bind -x &#39;C-r&#39; &#39;my-edit-function&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The existing key bindings are shown by the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ble-bind -P&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The list of widgets is shown by the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ble-bind -L&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to run multiple widgets with a key, you can define your own widget by creating a function of the name &lt;code&gt;ble/widget/YOUR_WIDGET_NAME&lt;/code&gt; as illustrated in the following example. It is highly recommended to prefix the widget name with &lt;code&gt;YOUR_NAME/&lt;/code&gt;, &lt;code&gt;my/&lt;/code&gt;, &lt;code&gt;blerc/&lt;/code&gt;, &lt;code&gt;dotfiles/&lt;/code&gt;, etc. in order not to conflict with the names of the existing standard widgets.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Example of calling multiple widgets with the key C-t&#xA;function ble/widget/my/example1 {&#xA;  ble/widget/beginning-of-logical-line&#xA;  ble/widget/insert-string &#39;echo $(&#39;&#xA;  ble/widget/end-of-logical-line&#xA;  ble/widget/insert-string &#39;)&#39;&#xA;}&#xA;ble-bind -f C-t my/example1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;2.8 fzf integration&lt;sup&gt;&lt;a id=&#34;fzf-integration&#34; href=&#34;https://raw.githubusercontent.com/akinomyoga/ble.sh/master/#fzf-integration&#34;&gt;†&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to use &lt;code&gt;fzf&lt;/code&gt; in combination with &lt;code&gt;ble.sh&lt;/code&gt;, you need to configure &lt;code&gt;fzf&lt;/code&gt; using &lt;a href=&#34;https://github.com/akinomyoga/blesh-contrib#pencil-fzf-integration&#34;&gt;the &lt;code&gt;contrib/fzf&lt;/code&gt; integration&lt;/a&gt;. Please follow the instructions in the link for the detailed description.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# blerc&#xA;&#xA;# Note: If you want to combine fzf-completion with bash_completion, you need to&#xA;# load bash_completion earilier than fzf-completion.  This is required&#xA;# regardless of whether to use ble.sh or not.&#xA;source /etc/profile.d/bash_completion.sh&#xA;&#xA;ble-import -d integration/fzf-completion&#xA;ble-import -d integration/fzf-key-bindings&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The option &lt;code&gt;-d&lt;/code&gt; of &lt;code&gt;ble-import&lt;/code&gt; delays the initialization. In this way, the fzf settings are loaded in background after the prompt is shown. See &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/wiki/Manual-%C2%A78-Miscellaneous#user-content-fn-ble-import&#34;&gt;&lt;code&gt;ble-import&lt;/code&gt; - Manual §8&lt;/a&gt; for details. If you would like to additionally configure the fzf settings after loading them, there are four options. The easiest way is to drop the &lt;code&gt;-d&lt;/code&gt; option (Option 1 below). As another option, you may also delay the additional settings with &lt;code&gt;ble-import -d&lt;/code&gt; [2] or &lt;code&gt;ble/util/idle.push&lt;/code&gt; [3]. Or, you can hook into the loading of the fzf settings by &lt;code&gt;ble-import -C&lt;/code&gt; [4].&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# [1] Drop -d&#xA;ble-import integration/fzf-completion&#xA;ble-import integration/fzf-key-bindings&#xA;&amp;lt;settings&amp;gt;&#xA;&#xA;# [2] Use ble-import -d for additional settings&#xA;ble-import -d integration/fzf-completion&#xA;ble-import -d integration/fzf-key-bindings&#xA;ble-import -d &#39;&amp;lt;filename containing the settings&amp;gt;&#39;&#xA;&#xA;# [3] Use &#34;ble/util/idle.push&#34; for additional settings&#xA;ble-import -d integration/fzf-completion&#xA;ble-import -d integration/fzf-key-bindings&#xA;ble/util/idle.push &#39;&amp;lt;settings&amp;gt;&#39;&#xA;&#xA;# [4] Use &#34;ble-import -C&#34; for additional settings&#xA;ble-import -d integration/fzf-completion&#xA;ble-import -d integration/fzf-key-bindings&#xA;ble-import -C &#39;&amp;lt;settings&amp;gt;&#39; integration/fzf-key-bindings&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;3 Tips&lt;/h1&gt; &#xA;&lt;h2&gt;3.1 Use multiline mode&lt;/h2&gt; &#xA;&lt;p&gt;When the command line string contains a newline character, &lt;code&gt;ble.sh&lt;/code&gt; enters the MULTILINE mode.&lt;/p&gt; &#xA;&lt;p&gt;By typing &lt;kbd&gt;C-v C-j&lt;/kbd&gt; or &lt;kbd&gt;C-q C-j&lt;/kbd&gt;, you can insert a newline character in the command line string. In the MULTILINE mode, &lt;kbd&gt;RET&lt;/kbd&gt; (&lt;kbd&gt;C-m&lt;/kbd&gt;) causes the insertion of a new newline character. In the MULTILINE mode, the command can be executed by typing &lt;kbd&gt;C-j&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When the shell option &lt;code&gt;shopt -s cmdhist&lt;/code&gt; is set (which is the default), &lt;kbd&gt;RET&lt;/kbd&gt; (&lt;kbd&gt;C-m&lt;/kbd&gt;) inserts a newline if the current command line string is syntactically incomplete.&lt;/p&gt; &#xA;&lt;h2&gt;3.2 Use vim editing mode&lt;/h2&gt; &#xA;&lt;p&gt;If &lt;code&gt;set -o vi&lt;/code&gt; is specified in &lt;code&gt;.bashrc&lt;/code&gt; or &lt;code&gt;set editing-mode vi&lt;/code&gt; is specified in &lt;code&gt;.inputrc&lt;/code&gt;, the vim mode is enabled. For details, please check &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/wiki/Vi-(Vim)-editing-mode&#34;&gt;the wiki page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;3.3 Use &lt;code&gt;auto-complete&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The feature &lt;code&gt;auto-complete&lt;/code&gt; is available in Bash 4.0 or later. &lt;code&gt;auto-complete&lt;/code&gt; automatically suggests a possible completion on user input. The suggested contents can be inserted by typing &lt;kbd&gt;S-RET&lt;/kbd&gt; (when the cursor is at the end of the command line, you can also use &lt;kbd&gt;right&lt;/kbd&gt;, &lt;kbd&gt;C-f&lt;/kbd&gt;, or &lt;kbd&gt;end&lt;/kbd&gt; to insert the suggestion). If you want to insert only the first word of the suggested contents, you can use &lt;kbd&gt;M-right&lt;/kbd&gt; or &lt;kbd&gt;M-f&lt;/kbd&gt;. If you want to accept the suggestion and immediately run the command, you can use &lt;kbd&gt;C-RET&lt;/kbd&gt; (if your terminal does not support special key combinations like &lt;kbd&gt;C-RET&lt;/kbd&gt;, please check &lt;a href=&#34;https://github.com/akinomyoga/ble.sh/wiki/Manual-%C2%A73-Key-Binding#user-content-sec-modifyOtherKeys-manual&#34;&gt;Manual §3.6.4&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;3.4 Use &lt;code&gt;sabbrev&lt;/code&gt; (static abbrev expansions)&lt;/h2&gt; &#xA;&lt;p&gt;By registering words to &lt;code&gt;sabbrev&lt;/code&gt;, the words can be expanded to predefined strings. When the cursor is just after a registered word, typing &lt;kbd&gt;SP&lt;/kbd&gt; causes the &lt;code&gt;sabbrev&lt;/code&gt; expansion. For example, with the following settings, when you type &lt;kbd&gt;SP&lt;/kbd&gt; after the string &lt;code&gt;command L&lt;/code&gt;, the command line will be expanded to &lt;code&gt;command | less&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# blerc&#xA;ble-sabbrev L=&#39;| less&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The sabbrev names that start with &lt;code&gt;\&lt;/code&gt; plus alphabetical letters are also recommended since it is unlikely to conflict with real words that are a part of the executed command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# blerc&#xA;ble-sabbrev &#39;\L&#39;=&#39;| less&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The sabbrevs starting with &lt;code&gt;~&lt;/code&gt; can be expanded also by &lt;kbd&gt;/&lt;/kbd&gt;. This can be used to approximate Zsh&#39;s named directories. For example, with the following settings, typing &lt;code&gt;~mybin/&lt;/code&gt; expands it to e.g. &lt;code&gt;/home/user/bin/&lt;/code&gt; (where we assumed &lt;code&gt;HOME=/home/user&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# blerc&#xA;&#xA;ble-sabbrev &#34;~mybin=$HOME/bin&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;4 Contributors&lt;/h1&gt; &#xA;&lt;p&gt;I received many feedbacks from many people in GitHub Issues/PRs. I thank all such people for supporting the project. Among them, the following people have made particularly significant contributions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cmplstofB&#34;&gt;&lt;code&gt;@cmplstofB&lt;/code&gt;&lt;/a&gt; helped me implement vim-mode by testing it and giving me a lot of suggestions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dylankb&#34;&gt;&lt;code&gt;@dylankb&lt;/code&gt;&lt;/a&gt; reported many issues with the fzf integration, initialization, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rux616&#34;&gt;&lt;code&gt;@rux616&lt;/code&gt;&lt;/a&gt; reported several issues and created a PR for fixing the default path of &lt;code&gt;.blerc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/timjrd&#34;&gt;&lt;code&gt;@timjrd&lt;/code&gt;&lt;/a&gt; suggested and contributed to performance improvements in completion.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/3ximus&#34;&gt;&lt;code&gt;@3ximus&lt;/code&gt;&lt;/a&gt; reported many issues for a wide variety of problems.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SuperSandro2000&#34;&gt;&lt;code&gt;@SuperSandro2000&lt;/code&gt;&lt;/a&gt; reported many issues related to NixOS and others&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>zabbix/zabbix-docker</title>
    <updated>2024-06-16T01:44:43Z</updated>
    <id>tag:github.com,2024-06-16:/zabbix/zabbix-docker</id>
    <link href="https://github.com/zabbix/zabbix-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official Zabbix Dockerfiles&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://assets.zabbix.com/img/logo/zabbix_logo_500x131.png&#34; alt=&#34;logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://securityscorecards.dev/viewer/?uri=github.com/zabbix/zabbix-docker&#34;&gt;&lt;img src=&#34;https://api.securityscorecards.dev/projects/github.com/zabbix/zabbix-docker/badge&#34; alt=&#34;OpenSSF Scorecard&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/8395&#34; style=&#34;display: inline;&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/8395/badge&#34; style=&#34;display: inline;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/summary/new_code?id=zabbix_zabbix-docker&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=zabbix_zabbix-docker&amp;amp;metric=alert_status&#34; alt=&#34;Quality Gate Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zabbix/zabbix-docker/actions/workflows/images_build.yml&#34;&gt;&lt;img src=&#34;https://github.com/zabbix/zabbix-docker/actions/workflows/images_build.yml/badge.svg?branch=7.0&amp;amp;event=push&#34; alt=&#34;Build images (DockerHub)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zabbix/zabbix-docker/actions/workflows/images_build_windows.yml&#34;&gt;&lt;img src=&#34;https://github.com/zabbix/zabbix-docker/actions/workflows/images_build_windows.yml/badge.svg?branch=7.0&amp;amp;event=push&#34; alt=&#34;Build images (DockerHub, Windows)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;What is Zabbix?&lt;/h1&gt; &#xA;&lt;p&gt;Zabbix is an enterprise-class open source distributed monitoring solution.&lt;/p&gt; &#xA;&lt;p&gt;Zabbix is software that monitors numerous parameters of a network and the health and integrity of servers. Zabbix uses a flexible notification mechanism that allows users to configure e-mail based alerts for virtually any event. This allows a fast reaction to server problems. Zabbix offers excellent reporting and data visualisation features based on the stored data. This makes Zabbix ideal for capacity planning.&lt;/p&gt; &#xA;&lt;p&gt;For more information and related downloads for Zabbix components, please visit &lt;a href=&#34;https://hub.docker.com/u/zabbix/&#34;&gt;https://hub.docker.com/u/zabbix/&lt;/a&gt; and &lt;a href=&#34;https://zabbix.com&#34;&gt;https://zabbix.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Zabbix Dockerfiles&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains &lt;strong&gt;Dockerfile&lt;/strong&gt; of &lt;a href=&#34;https://zabbix.com/&#34;&gt;Zabbix&lt;/a&gt; for &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;&#39;s &lt;a href=&#34;https://registry.hub.docker.com/u/zabbix/&#34;&gt;automated build&lt;/a&gt; published to the public &lt;a href=&#34;https://registry.hub.docker.com/&#34;&gt;Docker Hub Registry&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Base Docker Image&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/alpine/&#34;&gt;alpine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://quay.io/repository/centos/centos?tab=info&#34;&gt;centos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/oraclelinux/&#34;&gt;oracle linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/ubuntu/&#34;&gt;ubuntu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://catalog.redhat.com/software/container-stacks/detail/663b05ecf9ba071d2ff93618&#34;&gt;rhel&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;There is some documentation and examples in the &lt;a href=&#34;https://www.zabbix.com/documentation/current/manual/installation/containers&#34;&gt;official Zabbix Documentation&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;Please also follow usage instructions of each Zabbix component image:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/zabbix/zabbix-appliance/&#34;&gt;zabbix-appliance&lt;/a&gt; - Zabbix appliance with built-in MySQL server, Zabbix server, Zabbix Java Gateway and Zabbix frontend based on Nginx web-server&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/zabbix/zabbix-agent/&#34;&gt;zabbix-agent&lt;/a&gt; - Zabbix agent&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/zabbix/zabbix-agent2/&#34;&gt;zabbix-agent2&lt;/a&gt; - Zabbix agent 2&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/zabbix/zabbix-server-mysql/&#34;&gt;zabbix-server-mysql&lt;/a&gt; - Zabbix server with MySQL database support&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/zabbix/zabbix-server-pgsql/&#34;&gt;zabbix-server-pgsql&lt;/a&gt; - Zabbix server with PostgreSQL database support&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/zabbix/zabbix-web-apache-mysql/&#34;&gt;zabbix-web-apache-mysql&lt;/a&gt; - Zabbix web interface on Apache2 web server with MySQL database support&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/zabbix/zabbix-web-apache-pgsql/&#34;&gt;zabbix-web-apache-pgsql&lt;/a&gt; - Zabbix web interface on Apache2 web server with PostgreSQL database support&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/zabbix/zabbix-web-nginx-mysql/&#34;&gt;zabbix-web-nginx-mysql&lt;/a&gt; - Zabbix web interface on Nginx web server with MySQL database support&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/zabbix/zabbix-web-nginx-pgsql/&#34;&gt;zabbix-web-nginx-pgsql&lt;/a&gt; - Zabbix web interface on Nginx web server with PostgreSQL database support&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/zabbix/zabbix-proxy-sqlite3/&#34;&gt;zabbix-proxy-sqlite3&lt;/a&gt; - Zabbix proxy with SQLite3 database support&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/zabbix/zabbix-proxy-mysql/&#34;&gt;zabbix-proxy-mysql&lt;/a&gt; - Zabbix proxy with MySQL database support&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/zabbix/zabbix-java-gateway/&#34;&gt;zabbix-java-gateway&lt;/a&gt; - Zabbix Java Gateway&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/zabbix/zabbix-web-service/&#34;&gt;zabbix-web-service&lt;/a&gt; - Zabbix web service for performing various tasks using headless web browser (for example, reporting)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/zabbix/zabbix-snmptraps/&#34;&gt;zabbix-snmptraps&lt;/a&gt; - Additional container image for Zabbix server and Zabbix proxy to support SNMP traps&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Docker Compose&lt;/h3&gt; &#xA;&lt;p&gt;There is provided Docker Compose files for each set of base Operating System and Database engine.&lt;/p&gt; &#xA;&lt;p&gt;Templates support several &lt;a href=&#34;https://docs.docker.com/compose/profiles/&#34;&gt;Compose profiles&lt;/a&gt;. Minimal set of services is brought up by default, to start additional components e.g. Zabbix Agent use profile &#39;full&#39; or &#39;all&#39;. Additionally, it is possible to start only required components.&lt;/p&gt; &#xA;&lt;h2&gt;Issues and Wiki&lt;/h2&gt; &#xA;&lt;p&gt;Be sure to check &lt;a href=&#34;https://github.com/zabbix/zabbix-docker/wiki&#34;&gt;the Wiki-page&lt;/a&gt; on common problems and questions. If you still have problems with or questions about the images, please contact us through a &lt;a href=&#34;https://github.com/zabbix/zabbix-docker/issues&#34;&gt;GitHub issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Please report here issues and feature requests related to Docker images only. If you have issues or ideas how to improve Zabbix, use official &lt;a href=&#34;https://support.zabbix.com/&#34;&gt;bug tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;You are invited to contribute new features, fixes, or updates, large or small; we are always thrilled to receive pull requests, and do our best to process them as fast as we can.&lt;/p&gt; &#xA;&lt;p&gt;Before you start to code, we recommend discussing your plans through a &lt;a href=&#34;https://github.com/zabbix/zabbix-docker/issues&#34;&gt;GitHub issue&lt;/a&gt;, especially for more ambitious contributions. This gives other contributors a chance to point you in the right direction, give you feedback on your design, and help you find out if someone else is working on the same thing.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Starting from Zabbix version 7.0, all subsequent Zabbix versions will be released under the GNU Affero General Public License version 3 (AGPLv3). You can modify the relevant version and propagate such modified version under the terms of the AGPLv3 as published by the Free Software Foundation. For additional details, including answers to common questions about the AGPLv3, see the generic FAQ from the &lt;a href=&#34;http://www.fsf.org/licenses/gpl-faq.html&#34;&gt;Free Software Foundation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Zabbix is Open Source Software, however, if you use Zabbix in a commercial context we kindly ask you to support the development of Zabbix by purchasing some level of technical support. All previous Zabbix software versions up to 6.4 are released under the GNU General Public License version 2 (GPLv2). The formal terms of the GPLv2 and AGPLv3 can be found at &lt;a href=&#34;http://www.fsf.org/licenses/&#34;&gt;http://www.fsf.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>DaoCloud/public-image-mirror</title>
    <updated>2024-06-16T01:44:43Z</updated>
    <id>tag:github.com,2024-06-16:/DaoCloud/public-image-mirror</id>
    <link href="https://github.com/DaoCloud/public-image-mirror" rel="alternate"></link>
    <summary type="html">&lt;p&gt;很多镜像都在国外。比如 gcr 。国内下载很慢，需要加速。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;public-image-mirror&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/DaoCloud/public-image-mirror/raw/gh-pages/daocloud-sync.log&#34;&gt;&lt;img src=&#34;https://github.com/DaoCloud/public-image-mirror/raw/gh-pages/daocloud-sync-badge.svg?sanitize=true&#34; alt=&#34;Sync&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sync: 定期同步列表里的 image tag 的同步率, 只要 tag 存在就是同步的.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;!!!!!!!!!!!!!!!!!!!!!!!!通知!!!!!!!!!!!!!!!!!!!!!!!!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;由于近期使用量剧增, 近期进行统一限流, 以保证大多数的可用性.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;如果有大量需求的&lt;a href=&#34;https://github.com/wzshiming/crproxy/tree/master/examples/default&#34;&gt;可以自己搭建服务器&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;或者提个 Issue 商量或者添加我们的企微群 &lt;a href=&#34;https://github.com/DaoCloud/public-image-mirror/issues/4183&#34;&gt;#4183&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;限流 &lt;a href=&#34;https://github.com/DaoCloud/public-image-mirror/issues/6196&#34;&gt;#6196&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;背景 &amp;amp; 目标&lt;/h2&gt; &#xA;&lt;p&gt;很多镜像都在国外。比如 gcr 。国内下载很慢，需要加速。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;一个简洁有效的方法能够加速这些包。简洁的名称映射&lt;/li&gt; &#xA; &lt;li&gt;易于添加，添加新的包，不需要去修改代码。&lt;/li&gt; &#xA; &lt;li&gt;稳定可靠，更新实时。每天检查同步情况。&lt;/li&gt; &#xA; &lt;li&gt;此项目仅是源 Registry 的 Mirror, 所有 hash(sha256) 均和源保持一致。&lt;/li&gt; &#xA; &lt;li&gt;对于 blob(镜像层), 会缓存在第三方对象存储上, 未对内容做任何检测。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;快速开始&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -d -P m.daocloud.io/docker.io/library/nginx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;使用方法&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;增加前缀&lt;/strong&gt; (推荐方式)。比如：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;k8s.gcr.io/coredns/coredns =&amp;gt; m.daocloud.io/k8s.gcr.io/coredns/coredns&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;或者 支持的镜像仓库 的 &lt;em&gt;前缀替换&lt;/em&gt; 就可以使用。比如：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;k8s.gcr.io/coredns/coredns =&amp;gt; k8s-gcr.m.daocloud.io/coredns/coredns&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;单次单镜像同步&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;!!!!!!!!!!!!!!!!!!!!!!!!强烈推荐!!!!!!!!!!!!!!!!!!!!!!!!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;您可以根据 &lt;a href=&#34;https://github.com/DaoCloud/public-image-mirror/issues/new?labels=sync+image&amp;amp;template=sync-image.yml&#34;&gt;镜像同步 Issue 模板&lt;/a&gt; 创建一个 Issue, 将会有机器人帮您优先主动同步指定的镜像&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;原先已经在下的镜像还是会继续走原来的, 需要重启 docker 再重新拉取才能走已经同步好的缓存过, 所以推荐先单次同步再尝试拉取 对于 latest 这种经常内容会发生变更的 tag 变更后会需要重新同步&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;每个 Issue &lt;strong&gt;带宽&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;国际带宽 3 * 50 Mbps&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;懒加载&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;仅推荐用于小于 20MiB 的镜像 这条通道主要用于保持 image 是最新的, 每次拉取都会检查是否和上游保持同步&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;如果您看到下没有进度这是由于带宽有限只要有几人在下较大的文件就会阻塞后续的下载, 可以尝试&lt;a href=&#34;https://raw.githubusercontent.com/DaoCloud/public-image-mirror/main/#%E5%8D%95%E6%AC%A1%E5%8D%95%E9%95%9C%E5%83%8F%E5%90%8C%E6%AD%A5&#34;&gt;单次单镜像同步&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;就算没同步也能 &lt;strong&gt;直接拉取&lt;/strong&gt;, 初次拉取会比已经同步过的慢.&lt;/p&gt; &#xA;&lt;p&gt;所有懒加载 &lt;strong&gt;带宽&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;国际带宽 3 * 30 Mbps&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;定期同步列表&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;不推荐, 由于数量已经比较多了初次提交, 到被同步到需要很长时间&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;强烈建议使用&lt;a href=&#34;https://raw.githubusercontent.com/DaoCloud/public-image-mirror/main/#%E5%8D%95%E6%AC%A1%E5%8D%95%E9%95%9C%E5%83%8F%E5%90%8C%E6%AD%A5&#34;&gt;单次单镜像同步&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaoCloud/public-image-mirror/main/mirror.txt&#34;&gt;mirror.txt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;如果想要新增, 提 PR 修改即可。例如 &lt;a href=&#34;https://github.com/DaoCloud/public-image-mirror/pull/1/&#34;&gt;PR#1&lt;/a&gt;， 并请在 PR 提交前排序： &lt;code&gt;./hack/fmt.sh mirror.txt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;支持前缀替换的 Registry&lt;/h2&gt; &#xA;&lt;p&gt;前缀替换的 Registry 的规则, 这是人工配置的, 有需求提 Issue.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;源站&lt;/th&gt; &#xA;   &lt;th&gt;替换为&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cr.l5d.io&lt;/td&gt; &#xA;   &lt;td&gt;l5d.m.daocloud.io&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;docker.elastic.co&lt;/td&gt; &#xA;   &lt;td&gt;elastic.m.daocloud.io&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;docker.io&lt;/td&gt; &#xA;   &lt;td&gt;docker.m.daocloud.io&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gcr.io&lt;/td&gt; &#xA;   &lt;td&gt;gcr.m.daocloud.io&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ghcr.io&lt;/td&gt; &#xA;   &lt;td&gt;ghcr.m.daocloud.io&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;k8s.gcr.io&lt;/td&gt; &#xA;   &lt;td&gt;k8s-gcr.m.daocloud.io&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;registry.k8s.io&lt;/td&gt; &#xA;   &lt;td&gt;k8s.m.daocloud.io&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mcr.microsoft.com&lt;/td&gt; &#xA;   &lt;td&gt;mcr.m.daocloud.io&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nvcr.io&lt;/td&gt; &#xA;   &lt;td&gt;nvcr.m.daocloud.io&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;quay.io&lt;/td&gt; &#xA;   &lt;td&gt;quay.m.daocloud.io&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;registry.jujucharms.com&lt;/td&gt; &#xA;   &lt;td&gt;jujucharms.m.daocloud.io&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rocks.canonical.com&lt;/td&gt; &#xA;   &lt;td&gt;rocks-canonical.m.daocloud.io&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;最佳实践&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;通过 加速 安装 kubeadm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubeadm config images pull --image-repository k8s-gcr.m.daocloud.io&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;通过 加速 安装 kind&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kind create cluster --name kind --image m.daocloud.io/docker.io/kindest/node:v1.22.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;通过 加速 部署 应用(这里以 Ingress 为例)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget -O image-filter.sh https://github.com/DaoCloud/public-image-mirror/raw/main/hack/image-filter.sh &amp;amp;&amp;amp; chmod +x image-filter.sh&#xA;&#xA;wget -O deploy.yaml https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.1.0/deploy/static/provider/baremetal/deploy.yaml&#xA;&#xA;cat ./deploy.yaml | ./image-filter.sh | kubectl apply -f -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker 加速&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;添加到 &lt;code&gt;/etc/docker/daemon.json&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;  &#34;registry-mirrors&#34;: [&#xA;    &#34;https://docker.m.daocloud.io&#34;&#xA;  ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;[友情链接]加速三剑客&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;镜像加速：&lt;a href=&#34;https://github.com/DaoCloud/public-image-mirror&#34;&gt;https://github.com/DaoCloud/public-image-mirror&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;二进制文件加速：&lt;a href=&#34;https://github.com/DaoCloud/public-binary-files-mirror&#34;&gt;https://github.com/DaoCloud/public-binary-files-mirror&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Helm 加速：&lt;a href=&#34;https://github.com/DaoCloud/public-helm-charts-mirror&#34;&gt;https://github.com/DaoCloud/public-helm-charts-mirror&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;贡献者&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/DaoCloud/public-image-mirror/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=DaoCloud/public-image-mirror&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Made with &lt;a href=&#34;https://contrib.rocks&#34;&gt;contrib.rocks&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>