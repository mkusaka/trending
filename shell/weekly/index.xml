<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-23T01:40:38Z</updated>
  <subtitle>Weekly Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Aloxaf/fzf-tab</title>
    <updated>2024-05-23T01:40:38Z</updated>
    <id>tag:github.com,2024-05-23:/Aloxaf/fzf-tab</id>
    <link href="https://github.com/Aloxaf/fzf-tab" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Replace zsh&#39;s default completion selection menu with fzf!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;fzf-tab&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Aloxaf/fzf-tab/actions?query=workflow%3Aci&#34;&gt;&lt;img src=&#34;https://github.com/Aloxaf/fzf-tab/workflows/ci/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Aloxaf/fzf-tab/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/Aloxaf/fzf-tab&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Replace zsh&#39;s default completion selection menu with fzf!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/293849&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/293849.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Aloxaf/fzf-tab/master/#fzf-tab&#34;&gt;fzf-tab&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Aloxaf/fzf-tab/master/#install&#34;&gt;Install&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Aloxaf/fzf-tab/master/#manual&#34;&gt;Manual&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Aloxaf/fzf-tab/master/#antigen&#34;&gt;Antigen&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Aloxaf/fzf-tab/master/#zinit&#34;&gt;Zinit&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Aloxaf/fzf-tab/master/#oh-my-zsh&#34;&gt;Oh-My-Zsh&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Aloxaf/fzf-tab/master/#prezto&#34;&gt;Prezto&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Aloxaf/fzf-tab/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Aloxaf/fzf-tab/master/#configure&#34;&gt;Configure&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Aloxaf/fzf-tab/master/#tmux&#34;&gt;Tmux&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Aloxaf/fzf-tab/master/#binary-module&#34;&gt;Binary module&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Aloxaf/fzf-tab/master/#difference-from-other-plugins&#34;&gt;Difference from other plugins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Aloxaf/fzf-tab/master/#compatibility-with-other-plugins&#34;&gt;Compatibility with other plugins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Aloxaf/fzf-tab/master/#related-projects&#34;&gt;Related projects&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT]&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;make sure &lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt; is installed&lt;/li&gt; &#xA;  &lt;li&gt;fzf-tab needs to be loaded after &lt;code&gt;compinit&lt;/code&gt;, but before plugins which will wrap widgets, such as &lt;a href=&#34;https://github.com/zsh-users/zsh-autosuggestions&#34;&gt;zsh-autosuggestions&lt;/a&gt; or &lt;a href=&#34;https://github.com/zdharma-continuum/fast-syntax-highlighting&#34;&gt;fast-syntax-highlighting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;First, clone this repository.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;git clone https://github.com/Aloxaf/fzf-tab ~/somewhere&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then add the following line to your &lt;code&gt;~/.zshrc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;autoload -U compinit; compinit&#xA;source ~/somewhere/fzf-tab.plugin.zsh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Antigen&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;antigen bundle Aloxaf/fzf-tab&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Zinit&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;zinit light Aloxaf/fzf-tab&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Oh-My-Zsh&lt;/h3&gt; &#xA;&lt;p&gt;Clone this repository to your custom directory and then add &lt;code&gt;fzf-tab&lt;/code&gt; to your plugin list.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;git clone https://github.com/Aloxaf/fzf-tab ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/fzf-tab&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Prezto&lt;/h3&gt; &#xA;&lt;p&gt;Clone this repository to your contrib directory and then add &lt;code&gt;fzf-tab&lt;/code&gt; to your module list in &lt;code&gt;.zpreztorc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;git clone https://github.com/Aloxaf/fzf-tab $ZPREZTODIR/contrib/fzf-tab&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;Just press &lt;kbd&gt;Tab&lt;/kbd&gt; as usual~&lt;/p&gt; &#xA;&lt;p&gt;Available keybindings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;kbd&gt;Ctrl+&#xA;    &lt;kdb&gt;&#xA;     Space&#xA;    &lt;/kdb&gt;&lt;/kbd&gt;: select multiple results, can be configured by &lt;code&gt;fzf-bindings&lt;/code&gt; tag&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;kbd&gt;F1&lt;/kbd&gt;/&lt;kbd&gt;F2&lt;/kbd&gt;: switch between groups, can be configured by &lt;code&gt;switch-group&lt;/code&gt; tag&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;kbd&gt;/&lt;/kbd&gt;: trigger continuous completion (useful when completing a deep path), can be configured by &lt;code&gt;continuous-trigger&lt;/code&gt; tag&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Available commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;disable-fzf-tab&lt;/code&gt;: disable fzf-tab and fallback to compsys&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;enable-fzf-tab&lt;/code&gt;: enable fzf-tab&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;toggle-fzf-tab&lt;/code&gt;: toggle the state of fzf-tab. This is also a zle widget.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configure&lt;/h2&gt; &#xA;&lt;p&gt;A common configuration is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# disable sort when completing `git checkout`&#xA;zstyle &#39;:completion:*:git-checkout:*&#39; sort false&#xA;# set descriptions format to enable group support&#xA;# NOTE: don&#39;t use escape sequences here, fzf-tab will ignore them&#xA;zstyle &#39;:completion:*:descriptions&#39; format &#39;[%d]&#39;&#xA;# set list-colors to enable filename colorizing&#xA;zstyle &#39;:completion:*&#39; list-colors ${(s.:.)LS_COLORS}&#xA;# force zsh not to show completion menu, which allows fzf-tab to capture the unambiguous prefix&#xA;zstyle &#39;:completion:*&#39; menu no&#xA;# preview directory&#39;s content with eza when completing cd&#xA;zstyle &#39;:fzf-tab:complete&lt;span&gt;ðŸ’¿&lt;/span&gt;*&#39; fzf-preview &#39;eza -1 --color=always $realpath&#39;&#xA;# switch group using `&amp;lt;` and `&amp;gt;`&#xA;zstyle &#39;:fzf-tab:*&#39; switch-group &#39;&amp;lt;&#39; &#39;&amp;gt;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tmux&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re using tmux &amp;gt;= 3.2, we provide a script &lt;code&gt;ftb-tmux-popup&lt;/code&gt; to make full use of it&#39;s &#34;popup&#34; feature.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;zstyle &#39;:fzf-tab:*&#39; fzf-command ftb-tmux-popup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;BTW, you can also use this script outside the fzf-tab.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;ls | ftb-tmux-popup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/367471&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/367471.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more information, please see &lt;a href=&#34;https://github.com/Aloxaf/fzf-tab/wiki/Configuration&#34;&gt;Wiki#Configuration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Binary module&lt;/h2&gt; &#xA;&lt;p&gt;By default, fzf-tab uses &lt;a href=&#34;https://github.com/xPMo/zsh-ls-colors&#34;&gt;zsh-ls-colors&lt;/a&gt; to parse and apply ZLS_COLORS if you have set the &lt;code&gt;list-colors&lt;/code&gt; tag.&lt;/p&gt; &#xA;&lt;p&gt;However, it is a pure zsh script and is slow if you have too many files to colorize. fzf-tab is shipped with a binary module to speed up this process. You can build it with &lt;code&gt;build-fzf-tab-module&lt;/code&gt;, then it will be enabled automatically.&lt;/p&gt; &#xA;&lt;h1&gt;Difference from other plugins&lt;/h1&gt; &#xA;&lt;p&gt;fzf-tab doesn&#39;t do &#34;complete&#34;, it just shows you the results of the default completion system.&lt;/p&gt; &#xA;&lt;p&gt;So it works EVERYWHERE (variables, function names, directory stack, in-word completion, etc.). And most of your configuration for default completion system is still valid.&lt;/p&gt; &#xA;&lt;h1&gt;Compatibility with other plugins&lt;/h1&gt; &#xA;&lt;p&gt;Some plugins may also bind &#34;^I&#34; to their custom widget, like &lt;a href=&#34;https://github.com/junegunn/fzf/raw/master/shell/completion.zsh&#34;&gt;fzf/shell/completion.zsh&lt;/a&gt; or &lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh/raw/master/lib/completion.zsh#L61-L73&#34;&gt;ohmyzsh/lib/completion.zsh&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default, fzf-tab will call the widget previously bound to &#34;^I&#34; to get the completion list. So there is no problem in most cases, unless fzf-tab is initialized before a plugin which doesn&#39;t handle the previous binding properly.&lt;/p&gt; &#xA;&lt;p&gt;So if you find your fzf-tab doesn&#39;t work properly, &lt;strong&gt;please make sure it is the last plugin to bind &#34;^I&#34;&lt;/strong&gt; (If you don&#39;t know what I mean, just put it to the end of your plugin list).&lt;/p&gt; &#xA;&lt;h1&gt;Related projects&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lincheney/fzf-tab-completion&#34;&gt;https://github.com/lincheney/fzf-tab-completion&lt;/a&gt; (fzf tab completion for zsh, bash and GNU readline apps)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>stooged/PI-Pwn</title>
    <updated>2024-05-23T01:40:38Z</updated>
    <id>tag:github.com,2024-05-23:/stooged/PI-Pwn</id>
    <link href="https://github.com/stooged/PI-Pwn" rel="alternate"></link>
    <summary type="html">&lt;p&gt;pppwn&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PI Pwn&lt;/h1&gt; &#xA;&lt;p&gt;This is a script to setup &lt;a href=&#34;https://github.com/xfangfang/PPPwn_cpp&#34;&gt;PPPwn_cpp&lt;/a&gt; a c++ rewrite of &lt;a href=&#34;https://github.com/TheOfficialFloW/PPPwn&#34;&gt;PPPwn&lt;/a&gt; on the raspberry pi and run &lt;a href=&#34;https://github.com/GoldHEN/GoldHEN&#34;&gt;GoldHen&lt;/a&gt; on the PS4 fw 11.0, 10.01, 10.00, 9.00&lt;br&gt; It also supports internet access after pwn and access to ftp, klog and binloader servers launched by goldhen.&lt;br&gt; A dns blocker is also installed and used to prevent updates.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.raspberrypi.com/products/raspberry-pi-4-model-b/&#34;&gt;Raspberry Pi 4&lt;/a&gt;, &lt;a href=&#34;https://www.raspberrypi.com/products/raspberry-pi-400/&#34;&gt;Raspberry Pi 400&lt;/a&gt; and &lt;a href=&#34;https://www.raspberrypi.com/products/raspberry-pi-5/&#34;&gt;Raspberry Pi 5&lt;/a&gt; can pass through a usb drive inserted into the pi to the console if the pi is plugged into the console usb port&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;There is also a webserver to control the pi, change settings and send payloads by accessing &lt;a href=&#34;http://pppwn.local&#34;&gt;http://pppwn.local&lt;/a&gt; from the console or your pc if you have internet access enabled.&lt;br&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Tested PI Models&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.raspberrypi.com/products/raspberry-pi-5/&#34;&gt;Raspberry Pi 5&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.raspberrypi.com/products/raspberry-pi-4-model-b/&#34;&gt;Raspberry Pi 4 Model B&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.raspberrypi.com/products/raspberry-pi-400/&#34;&gt;Raspberry Pi 400&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.raspberrypi.com/products/raspberry-pi-3-model-b-plus/&#34;&gt;Raspberry Pi 3B+&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.raspberrypi.com/products/raspberry-pi-2-model-b/&#34;&gt;Raspberry Pi 2 Model B&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.raspberrypi.com/products/raspberry-pi-zero-2-w/&#34;&gt;Raspberry Pi Zero 2 W&lt;/a&gt; with usb to ethernet adapter&lt;br&gt; &lt;a href=&#34;https://www.raspberrypi.com/products/raspberry-pi-zero-w/&#34;&gt;Raspberry Pi Zero W&lt;/a&gt; with usb to ethernet adapter&lt;br&gt; &lt;a href=&#34;https://wiki.radxa.com/Rock4/4cplus&#34;&gt;ROCK PI 4C Plus&lt;/a&gt; with armbian &lt;a href=&#34;https://imola.armbian.com/archive/rockpi-4cplus/archive/Armbian_23.11.1_Rockpi-4cplus_bookworm_current_6.1.63.img.xz&#34;&gt;Image&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://biqu.equipment/products/bigtreetech-btt-pi-v1-2&#34;&gt;BIGTREETECH BTT Pi V1.2&lt;/a&gt; with armbian &lt;a href=&#34;https://www.armbian.com/bigtreetech-cb1/&#34;&gt;minimal&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.linksprite.com/linksprite-pcduino3/&#34;&gt;pcDuino3b&lt;/a&gt; with armbian &lt;a href=&#34;https://imola.armbian.com/archive/pcduino3nano/archive/Armbian_5.38_Pcduino3nano_Debian_jessie_next_4.14.14.7z&#34;&gt;Image&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;You need to install &lt;a href=&#34;https://www.raspberrypi.com/software/operating-systems/&#34;&gt;Raspberry Pi OS Lite&lt;/a&gt; or &lt;a href=&#34;https://www.armbian.com/&#34;&gt;Armbian Cli / Minimal&lt;/a&gt; onto a sd card.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Place the sd card into the raspberry pi, boot it and connect it to the internet then run the following commands&lt;br&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt update&#xA;sudo apt install git -y&#xA;sudo rm -f -r PI-Pwn&#xA;sudo systemctl stop pipwn&#xA;git clone https://github.com/stooged/PI-Pwn&#xA;sudo mkdir /boot/firmware/&#xA;cd PI-Pwn&#xA;sudo cp -r PPPwn /boot/firmware/&#xA;cd /boot/firmware/PPPwn&#xA;sudo chmod 777 *&#xA;sudo bash install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;During the install process you will be asked to set some options.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are using a &lt;b&gt;usb to ethernet adapter&lt;/b&gt; for the connection to the console you need to select yes&lt;br&gt; If your pi has an ethernet port and you are using a usb to ethernet adapter your interface for the usb adapter should be eth1&lt;br&gt; If you are using something like a pi zero 2 the interface will be eth0&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once the pi reboots pppwn will run automatically.&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;On your PS4:&lt;br&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to &lt;code&gt;Settings&lt;/code&gt; and then &lt;code&gt;Network&lt;/code&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;code&gt;Set Up Internet connection&lt;/code&gt; and choose &lt;code&gt;Use a LAN Cable&lt;/code&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;Choose &lt;code&gt;Custom&lt;/code&gt; setup and choose &lt;code&gt;PPPoE&lt;/code&gt; for &lt;code&gt;IP Address Settings&lt;/code&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enter &lt;code&gt;ppp&lt;/code&gt; for &lt;code&gt;PPPoE User ID&lt;/code&gt; and &lt;code&gt;PPPoE Password&lt;/code&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;NOTE if you enable internet access you must match the username and password entered during the install or use the default &lt;code&gt;ppp&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Choose &lt;code&gt;Automatic&lt;/code&gt; for &lt;code&gt;DNS Settings&lt;/code&gt; and &lt;code&gt;MTU Settings&lt;/code&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;Choose &lt;code&gt;Do Not Use&lt;/code&gt; for &lt;code&gt;Proxy Server&lt;/code&gt;&lt;br&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For GoldHen you need to place the goldhen.bin file onto the root of a usb drive and plug it into the console.&lt;br&gt; Once goldhen has been loaded for the first time it will be copied to the consoles internal hdd and the usb is no longer required.&lt;br&gt; To update goldhen just repeat the above process and the new version will be copied to the internal hdd&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FTP / Binload&lt;/h2&gt; &#xA;&lt;p&gt;If the pi pwn was setup to allow internet access you can use the ftp, klog, and binloader servers on the console&lt;br&gt; Your pi must be also connected to your home network via wifi or a second ethernet connection&lt;br&gt; To connect to the servers from your pc just connect to the raspberry pi ip on your network and all requests will be forwarded to the console&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;For ftp make sure you set the transfer mode on your ftp client software to &lt;code&gt;Active&lt;/code&gt; not passive.&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;USB pass through drive&lt;/h2&gt; &#xA;&lt;p&gt;You can put a usb flash drive in the pi and that will be mounted to the console, you must put a folder on the root of the drive called &#34;payloads&#34;&lt;br&gt; To use this feature you must plug the raspberry pi 4 / 400 / 5 into the consoles usb port using the usb-c connection on the pi.&lt;br&gt; If you have power issues you can use a usb Y cable to inject power from another source but in my tests both pi variants ran using a single cable.&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Rest Mode&lt;/h2&gt; &#xA;&lt;p&gt;You can enable the option to detect if goldhen is running in the options which will cause pi-pwn to check if goldhen is active before running pppwn, this is useful for rest mode&lt;br&gt; If you have the pi powered from the console usb port you must disable &#34;Supply Power to USB Ports&#34; in the rest mode settings of the console.&lt;br&gt; The console must also use the PPPoe user and pass set for the &#34;console internet connection&#34; of pi-pwn or the defaults if you never changed them which are ppp for both user and password.&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What it does&lt;/h2&gt; &#xA;&lt;p&gt;Once everything is setup and the ethernet cable is plugged in between the pi and the console the pi should automatically try and pwn the console.&lt;br&gt; The exploit may fail many times but the pi will continue to purge the console to keep trying to pwn itself.&lt;br&gt; Once pwned the process will stop and the pi will shut down if you are not using internet access. &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;You will need to restart the pi if you wish to pwn the console again.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;The idea is you boot the console and the pi together and the pi will keep trying to pwn the console without any input from you, just wait on the home screen until the process completes&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Updating&lt;/h2&gt; &#xA;&lt;p&gt;You can edit the exploit scripts by putting the sd card in your computer and going to the PPPwn folder.&lt;br&gt; The commands above can also be run again to install updates or change the settings.&lt;br&gt; You can also click the update button on the web ui.&lt;br&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zsh-users/zsh-completions</title>
    <updated>2024-05-23T01:40:38Z</updated>
    <id>tag:github.com,2024-05-23:/zsh-users/zsh-completions</id>
    <link href="https://github.com/zsh-users/zsh-completions" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Additional completion definitions for Zsh.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;zsh-completions &lt;img src=&#34;https://img.shields.io/github/release/zsh-users/zsh-completions.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/contributors/zsh-users/zsh-completions.svg?sanitize=true&#34; alt=&#34;GitHub contributors&#34;&gt; &lt;a href=&#34;irc://irc.freenode.net/#zsh-completions&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/IRC-%23zsh--completions-yellow.svg?sanitize=true&#34; alt=&#34;IRC&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/zsh-users/zsh-completions?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/zsh-users/zsh-completions.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Additional completion definitions for &lt;a href=&#34;https://www.zsh.org/&#34;&gt;Zsh&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;This projects aims at gathering/developing new completion scripts that are not available in Zsh yet. The scripts may be contributed to the Zsh project when stable enough.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Using packages&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;System&lt;/th&gt; &#xA;   &lt;th&gt;Package&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Debian / Ubuntu&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://software.opensuse.org/download.html?project=shells%3Azsh-users%3Azsh-completions&amp;amp;package=zsh-completions&#34;&gt;zsh-completions OBS repository&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fedora / CentOS / RHEL / Scientific Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://software.opensuse.org/download.html?project=shells%3Azsh-users%3Azsh-completions&amp;amp;package=zsh-completions&#34;&gt;zsh-completions OBS repository&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenSUSE / SLE&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://software.opensuse.org/download.html?project=shells%3Azsh-users%3Azsh-completions&amp;amp;package=zsh-completions&#34;&gt;zsh-completions OBS repository&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Arch Linux / Manjaro / Antergos / Hyperbola&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.archlinux.org/packages/zsh-completions&#34;&gt;zsh-completions&lt;/a&gt;, &lt;a href=&#34;https://aur.archlinux.org/packages/zsh-completions-git&#34;&gt;zsh-completions-git&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Gentoo / Funtoo&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://packages.gentoo.org/packages/app-shells/zsh-completions&#34;&gt;app-shells/zsh-completions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NixOS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/raw/master/pkgs/shells/zsh/zsh-completions/default.nix&#34;&gt;zsh-completions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Void Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/void-linux/void-packages/raw/master/srcpkgs/zsh-completions/template&#34;&gt;zsh-completions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Slackware&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://slackbuilds.org/repository/14.2/system/zsh-completions/&#34;&gt;Slackbuilds&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Homebrew/homebrew-core/raw/master/Formula/z/zsh-completions.rb&#34;&gt;homebrew&lt;/a&gt;, &lt;a href=&#34;https://github.com/macports/macports-ports/raw/master/sysutils/zsh-completions/Portfile&#34;&gt;MacPorts&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NetBSD&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ftp.netbsd.org/pub/pkgsrc/current/pkgsrc/shells/zsh-completions/README.html&#34;&gt;pkgsrc&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FreeBSD&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.freshports.org/shells/zsh-completions&#34;&gt;shells/zsh-completions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Using zsh frameworks&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/zsh-users/antigen&#34;&gt;antigen&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Add &lt;code&gt;antigen bundle zsh-users/zsh-completions&lt;/code&gt; to your &lt;code&gt;~/.zshrc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh&#34;&gt;oh-my-zsh&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository inside your oh-my-zsh repo:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  git clone https://github.com/zsh-users/zsh-completions ${ZSH_CUSTOM:-${ZSH:-~/.oh-my-zsh}/custom}/plugins/zsh-completions&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add it to &lt;code&gt;FPATH&lt;/code&gt; in your &lt;code&gt;.zshrc&lt;/code&gt; by adding the following line before &lt;code&gt;source &#34;$ZSH/oh-my-zsh.sh&#34;&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  fpath+=${ZSH_CUSTOM:-${ZSH:-~/.oh-my-zsh}/custom}/plugins/zsh-completions/src&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: adding it as a regular Oh My ZSH! plugin will not work properly (see &lt;a href=&#34;https://github.com/zsh-users/zsh-completions/issues/603&#34;&gt;#603&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/zdharma-continuum/zinit&#34;&gt;zinit&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Add &lt;code&gt;zinit light zsh-users/zsh-completions&lt;/code&gt; to your &lt;code&gt;~/.zshrc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Manual installation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  git clone https://github.com/zsh-users/zsh-completions.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Include the directory in your &lt;code&gt;$fpath&lt;/code&gt;, for example by adding in &lt;code&gt;~/.zshrc&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  fpath=(path/to/zsh-completions/src $fpath)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You may have to force rebuild &lt;code&gt;zcompdump&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  rm -f ~/.zcompdump; compinit&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Contributions are welcome, see &lt;a href=&#34;https://github.com/zsh-users/zsh-completions/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Completions use the Zsh license, unless explicitly mentioned in the file header. See &lt;a href=&#34;https://github.com/zsh-users/zsh-completions/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>