<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-30T02:06:41Z</updated>
  <subtitle>Weekly Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>htpcBeginner/docker-traefik</title>
    <updated>2023-04-30T02:06:41Z</updated>
    <id>tag:github.com,2023-04-30:/htpcBeginner/docker-traefik</id>
    <link href="https://github.com/htpcBeginner/docker-traefik" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Docker media and home server stack with Docker Compose, Traefik, Swarm Mode, Google OAuth2/Authelia, and LetsEncrypt&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Description&lt;/h1&gt; &#xA;&lt;p&gt;This is the updated docker-compose repo of all the media, home, and web server apps described in the following guides on our website:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.smarthomebeginner.com/docker-media-server-2022/&#34;&gt;Docker Media Server Ubuntu: Compose for 23 Awesome Apps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.smarthomebeginner.com/traefik-docker-compose-guide-2022/&#34;&gt;Ultimate Traefik Docker Compose Guide [2022] with LetsEncrypt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.smarthomebeginner.com/wordpress-on-docker-traefik/&#34;&gt;WordPress on Docker with Nginx, Traefik, LE SSL, Security, and Speed&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.smarthomebeginner.com/synology-nas-docker-media-server-2022/&#34;&gt;Ultimate Synology NAS Docker Compose Media Server 2022&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div style=&#34;padding:20px;border: 3px solid red;&#34;&gt; &#xA; &lt;h3&gt;IMPORTANT&lt;/h3&gt; If you are going to start from scratch using this repo, be prepared to be patient and start slow. There are so many details to pay attention to. First start with the basic Docker Media Server guide linked above (with Nginx Proxy Manager instead of Traefik). &#xA; &lt;p&gt;When you are ready to upgrade to Traefik or prefer Traefik over Nginx Proxy Manager, I strongly suggest getting Traefik and Traefik dashboard up and running before adding any other app. Here is the order I would recommend:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Traefik with HTTP Authentication. This requires:&lt;/li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;.env file&lt;/li&gt; &#xA;   &lt;li&gt;secrets&lt;/li&gt; &#xA;   &lt;li&gt;network definition&lt;/li&gt; &#xA;   &lt;li&gt;middlewares and chains&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;li&gt;Socket Proxy&lt;/li&gt; &#xA;  &lt;li&gt;Check to ensure Traefik still works&lt;/li&gt; &#xA;  &lt;li&gt;OAuth or Authelia (optional)&lt;/li&gt; &#xA;  &lt;li&gt;Check to ensure OAuth works&lt;/li&gt; &#xA;  &lt;li&gt;Put Traefik dashboard behind OAuth or Authelia and disable HTTP Authentication&lt;/li&gt; &#xA;  &lt;li&gt;Ensure Traefik dashboard works behind OAuth/Authelia&lt;/li&gt; &#xA;  &lt;li&gt;Proceed to add portainer and other apps/services&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;Go step-by-step. If you bite too big of a piece, I guarantee you will choke.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;strong&gt;Supporting Articles:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.smarthomebeginner.com/install-docker-on-ubuntu-22-04/&#34;&gt;How to Install Docker and Docker Compose on Ubuntu 22.04 LTS&lt;/a&gt; [&lt;a href=&#34;https://youtu.be/nwFh4JBGD_0&#34;&gt;VIDEO&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.smarthomebeginner.com/install-docker-on-ubuntu-20-04/&#34;&gt;How to Install Docker and Docker Compose on Ubuntu 20.04 LTS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.smarthomebeginner.com/cloudflare-settings-for-traefik-docker/&#34;&gt;Cloudflare Settings for Traefik Docker: DDNS, CNAMEs, &amp;amp; Tweaks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.smarthomebeginner.com/traefik-forward-auth-google-oauth-2022/&#34;&gt;Google OAuth 2 MFA Protection for Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.smarthomebeginner.com/docker-authelia-tutorial/&#34;&gt;Authelia MFA Protection for Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.smarthomebeginner.com/traefik-docker-security-best-practices/&#34;&gt;Traefik Docker Security Best Practices&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.smarthomebeginner.com/crowdsec-docker-compose-1-fw-bouncer/&#34;&gt;Crowdsec Docker Compose Guide Part 1: Powerful IPS with Firewall Bouncer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.smarthomebeginner.com/crowdsec-cloudflare-bouncer/&#34;&gt;CrowdSec Docker Part 2: Improved IPS with Cloudflare Bouncer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.smarthomebeginner.com/crowdsec-traefik-bouncer/&#34;&gt;CrowdSec Docker Part 3: Traefik Bouncer for Additional Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.smarthomebeginner.com/crowdsec-multiserver-docker/&#34;&gt;CrowdSec Multiserver Docker (Part 4): For Ultimate Protection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.smarthomebeginner.com/docker-to-podman-migration-guide/&#34;&gt;Ultimate Docker to Podman Migration Guide: It&#39;s NOT difficult&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.smarthomebeginner.com/traefik-docker-nextcloud/&#34;&gt;Nextcloud Docker with Traefik Reverse Proxy for Beginners&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Obsolete Posts (for educational purposes):&lt;/h3&gt; &#xA;&lt;p&gt;The following posts have been updated/replaced by the posts linked above:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.smarthomebeginner.com/traefik-2-docker-tutorial/&#34;&gt;Docker Media Server with Traefik 2 Reverse Proxy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.smarthomebeginner.com/docker-home-media-server-2018-basic/&#34;&gt;Docker Media Server without Reverse Proxy &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.smarthomebeginner.com/traefik-reverse-proxy-tutorial-for-docker/&#34;&gt;Docker Media Server with Traefik 1 Reverse Proxy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.smarthomebeginner.com/synology-docker-media-server/&#34;&gt;Synology Docker Media Server with Traefik, Docker Compose, and Cloudflare&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Docker, Docker Compose, and Traefik Versions (updated September, 2022)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker: 20.10.18&lt;/li&gt; &#xA; &lt;li&gt;Docker Compose: v2.10.2&lt;/li&gt; &#xA; &lt;li&gt;Traefik: 2.8&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update (September 13, 2021):&lt;/strong&gt; I moved from TOML to YAML for Traefik 2 dynamic configurations. I have included example configuration files for both. However, since I do not use TOML anymore, there may be minor syntax errors or typos.&lt;/p&gt; &#xA;&lt;h3&gt;Description of Compose Files in this Repo&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;docker-compose.yml - this is the basic media server stack with Nginx Proxy Manager instead of Traefik&lt;/li&gt; &#xA; &lt;li&gt;docker-compose-t2.yml - this is my main stack with most apps/services, including Traefik&lt;/li&gt; &#xA; &lt;li&gt;docker-compose-t2-web.yml - web server specific stack for WordPress and non-WordPress sites with Nginx and Traefik&lt;/li&gt; &#xA; &lt;li&gt;docker-compose-t2-synology.yml - apps/services that I run on Synology NAS using Docker Compose for Homelab use&lt;/li&gt; &#xA; &lt;li&gt;docker-compose-t2-obsolete.yml - apps/services that I once tried/used but don&#39;t use anymore (future compatibility not guaranteed)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Almost any app/service from the docker-compose files listed above can be copy-pasted to any other compose file in this repo.&lt;/p&gt; &#xA;&lt;h3&gt;Compose Files Archive (NOT ACTIVELY MAINTAINED)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;archives/docker-compose-t1.yml&lt;/li&gt; &#xA; &lt;li&gt;archives/docker-compose-t1-vpn.yml&lt;/li&gt; &#xA; &lt;li&gt;archives/docker-compose-t1-obsolete.yml&lt;/li&gt; &#xA; &lt;li&gt;archives/docker-compose-t1-swarm.yml&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;MY SETUP&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MAIN - Ubuntu 22.04 Proxmox LXC Container on Intel Xeon E3-1240 V2.&lt;/li&gt; &#xA; &lt;li&gt;WEB - Ubuntu 22.04 Proxmox VM on Intel Xeon E3-1240 V2.&lt;/li&gt; &#xA; &lt;li&gt;SYNOLOGY - Synology DS918+ NAS.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I use Syncthing to keep certain key files synched between various systems.&lt;/p&gt; &#xA;&lt;h3&gt;Security&lt;/h3&gt; &#xA;&lt;p&gt;For security, I implemented CrowdSec multi-server setup recently. From the stats, it is blocking/mitigating well over 600 intrusion attempts per day on my servers. I will cover this in a separate guide later but you will find the docker-compose CrowdSec, Traefik Bouncer, and Cloudflare Bouncer Bouncers in my repo already.&lt;/p&gt; &#xA;&lt;h2&gt;What apps are included in this stack?&lt;/h2&gt; &#xA;&lt;p&gt;The apps I use are scattered around in several different docker-compose files. Some apps are used in more than one host and some on only one.&lt;/p&gt; &#xA;&lt;h3&gt;FRONTENDS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Traefik - Reverse Proxy&lt;/li&gt; &#xA; &lt;li&gt;Nginx Proxy Manager - Reverse Proxy&lt;/li&gt; &#xA; &lt;li&gt;Docker Socket Proxy - Secure Proxy for Docker API&lt;/li&gt; &#xA; &lt;li&gt;Traefik Custom Error Pages&lt;/li&gt; &#xA; &lt;li&gt;OAuth - Google OAuth 2 Forward Authentication&lt;/li&gt; &#xA; &lt;li&gt;Authelia - Private Forward Authentication&lt;/li&gt; &#xA; &lt;li&gt;Portainer - Container Management&lt;/li&gt; &#xA; &lt;li&gt;Organizr - Dashboard for Apps&lt;/li&gt; &#xA; &lt;li&gt;Heimdall - Dashboard for Apps&lt;/li&gt; &#xA; &lt;li&gt;Homepage - Dashboard for Apps&lt;/li&gt; &#xA; &lt;li&gt;Dashy - Dashboard for Apps&lt;/li&gt; &#xA; &lt;li&gt;Autoindex - Plain text Index to All Files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;SMART HOME&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Home Assistant Core - Home Automation&lt;/li&gt; &#xA; &lt;li&gt;HA-Dockermon - Manage Docker containers in Home Assistant&lt;/li&gt; &#xA; &lt;li&gt;Mosquitto - MQTT Broker&lt;/li&gt; &#xA; &lt;li&gt;MotionEye - Video Surveillance&lt;/li&gt; &#xA; &lt;li&gt;ZoneMinder - Video Surveillance&lt;/li&gt; &#xA; &lt;li&gt;MiFlora - MiFlora MQTT Daemon (MiFlora Plant Sensors)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;DATABASE&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MariaDB - MySQL Database&lt;/li&gt; &#xA; &lt;li&gt;phpMyAdmin - Database management&lt;/li&gt; &#xA; &lt;li&gt;InfluxDB - Database for sensor data&lt;/li&gt; &#xA; &lt;li&gt;Postgres - Database&lt;/li&gt; &#xA; &lt;li&gt;Grafana - Graphical data visualization for InfluxDB data&lt;/li&gt; &#xA; &lt;li&gt;Varken - Monitor Plex, Sonarr, Radarr, and Other Data&lt;/li&gt; &#xA; &lt;li&gt;Redis - Key value store&lt;/li&gt; &#xA; &lt;li&gt;Redis Commander - Redis management&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;DOWNLOADERS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;jDownloader - Download management&lt;/li&gt; &#xA; &lt;li&gt;TransmissionBT with VPN - Torrent Downloader.&lt;/li&gt; &#xA; &lt;li&gt;SABnzbd - Binary newsgrabber, NZB downloader&lt;/li&gt; &#xA; &lt;li&gt;Nzbget - Binary newsgrabber, NZB downloader&lt;/li&gt; &#xA; &lt;li&gt;qBittorrent with Wireguard VPN from &lt;a href=&#34;https://bit.ly/shb-surfshark&#34;&gt;Surfshark&lt;/a&gt; - Torrent downloader&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;INDEXERS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NZBHydra2 - NZB meta search&lt;/li&gt; &#xA; &lt;li&gt;Jackett - Torrent proxy&lt;/li&gt; &#xA; &lt;li&gt;Prowlarr - Torrent proxy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;PVRS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lidarr - Music Management&lt;/li&gt; &#xA; &lt;li&gt;Radarr - Movie management&lt;/li&gt; &#xA; &lt;li&gt;Sonarr - TV Shows management&lt;/li&gt; &#xA; &lt;li&gt;LazyLibrarian - Books Management&lt;/li&gt; &#xA; &lt;li&gt;Readarr - Books Management&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;MEDIA SERVER&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AirSonic - Music Server&lt;/li&gt; &#xA; &lt;li&gt;NaviDrome - Music Server&lt;/li&gt; &#xA; &lt;li&gt;FunkWhale - Music Server&lt;/li&gt; &#xA; &lt;li&gt;Calibre - Ebook/Audiobook Server&lt;/li&gt; &#xA; &lt;li&gt;Calibre-Web - Ebook/Audiobook Reader&lt;/li&gt; &#xA; &lt;li&gt;Plex - Media Server&lt;/li&gt; &#xA; &lt;li&gt;Emby - Media Server&lt;/li&gt; &#xA; &lt;li&gt;Jellyfin - Media Server&lt;/li&gt; &#xA; &lt;li&gt;Ombi - Media Requests&lt;/li&gt; &#xA; &lt;li&gt;Tautulli - Previously PlexPy. Plex statistics and monitoring&lt;/li&gt; &#xA; &lt;li&gt;Plex-Sync - For Syncing watched status between plex servers&lt;/li&gt; &#xA; &lt;li&gt;PhotoShow - Personal Photo Gallery and viewer&lt;/li&gt; &#xA; &lt;li&gt;TellyTv- IPTV proxy for Plex&lt;/li&gt; &#xA; &lt;li&gt;xTeve- IPTV proxy for Plex&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;MEDIA FILE MANAGEMENT&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bazarr - Subtitle Management&lt;/li&gt; &#xA; &lt;li&gt;Picard - Music Library Tagging and Management&lt;/li&gt; &#xA; &lt;li&gt;Handbrake - Video Conversion, Transcoding, and Compression&lt;/li&gt; &#xA; &lt;li&gt;MKVToolNix - Video Editing, Remuxing (changing media container while keeping original source quality)&lt;/li&gt; &#xA; &lt;li&gt;MakeMKV - Video Editing (Ripping from Disks)&lt;/li&gt; &#xA; &lt;li&gt;FileBot - File renamer&lt;/li&gt; &#xA; &lt;li&gt;Tiny Media Manager - Media Files Management&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;UTILITIES&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Firefox - Web Broswer&lt;/li&gt; &#xA; &lt;li&gt;Glances - System Information&lt;/li&gt; &#xA; &lt;li&gt;APCUPSD - APC UPS Management&lt;/li&gt; &#xA; &lt;li&gt;Guacamole - Remote desktop, SSH, on Telnet on any HTML5 Browser&lt;/li&gt; &#xA; &lt;li&gt;Guacamole Daemon - Needed for Guacamole&lt;/li&gt; &#xA; &lt;li&gt;Dozzle - Docker logs viewer&lt;/li&gt; &#xA; &lt;li&gt;qDirStat - Directory Statistics&lt;/li&gt; &#xA; &lt;li&gt;StatPing - Status Page &amp;amp; Monitoring Server&lt;/li&gt; &#xA; &lt;li&gt;SmokePing - Network Latency Monitoring&lt;/li&gt; &#xA; &lt;li&gt;VS Code Server - Code Editor&lt;/li&gt; &#xA; &lt;li&gt;Logarr - Log Management&lt;/li&gt; &#xA; &lt;li&gt;Monitorr - Webfront to display the status of any webapp or service&lt;/li&gt; &#xA; &lt;li&gt;Cloud Commander - Web File Manager&lt;/li&gt; &#xA; &lt;li&gt;Cloud9 - Cloud IDE&lt;/li&gt; &#xA; &lt;li&gt;SMTP To Telegram - Sends all incoming Email messages to Telegram&lt;/li&gt; &#xA; &lt;li&gt;UniFi Controller - Controller for Ubiquiti UniFi Network Gear&lt;/li&gt; &#xA; &lt;li&gt;Rclone - Mount Cloud/Google Drive&lt;/li&gt; &#xA; &lt;li&gt;MergerFS - Merge local and remote file systems&lt;/li&gt; &#xA; &lt;li&gt;Gluetun - VPN client for docker containers and more&lt;/li&gt; &#xA; &lt;li&gt;DeUnhealth - Auto restart containers on VPN restart&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;WEB&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nginx - Web Server&lt;/li&gt; &#xA; &lt;li&gt;php7 - PHP-FPM&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;MAINTENANCE&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Watchtower - Automatic Docker Container Updates&lt;/li&gt; &#xA; &lt;li&gt;Docker-GC - Automatic Docker Garbage Collection&lt;/li&gt; &#xA; &lt;li&gt;Traefik Certificate Dumper - Extract Traefik SSL Certs&lt;/li&gt; &#xA; &lt;li&gt;Cloudflare DDNS - Dynamic IP Updater&lt;/li&gt; &#xA; &lt;li&gt;Cloudflare Companion - Automatic CNAME creation for services&lt;/li&gt; &#xA; &lt;li&gt;WhoAmI - For testing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation and Usage&lt;/h1&gt; &#xA;&lt;p&gt;Follow the guides linked at the beginning of this readme.&lt;/p&gt; &#xA;&lt;p&gt;--------- ANYTHING THAT HAS &#34;example&#34; IN THE NAME WILL HAVE TO BE RENAMED APPROPRIATELY ---------&lt;/p&gt; &#xA;&lt;h2&gt;Starting and Stopping&lt;/h2&gt; &#xA;&lt;p&gt;I use bash_aliases to simplify starting and stopping containers/stack. Included in the repo is an example of bash_aliases I use (replace USER with your Linux username). Here are some example alias commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;dcup2&lt;/strong&gt; - Start Docker Traefik 2 stack&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;dcdown2&lt;/strong&gt; - Stop Docker Traefik 2 stack&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;dcrec2&lt;/strong&gt; - Start or recreate a specific service&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;dcstop2&lt;/strong&gt; - Stop a specific service&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;dcrestart2&lt;/strong&gt; - Restart a specific service&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;dclogs2&lt;/strong&gt; - See real-time logs for the corresponding stack or service&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;dcpull2&lt;/strong&gt; - Pull new images for the corresponding stack or service&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Join our Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Do you need support or just want to chat with like-minded people. Join our discord.&lt;/li&gt; &#xA; &lt;li&gt;The authors will try our best to help but support is not guaranteed. But you will find others who might have went through what you are going through and may be willing to pay it forward and help.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div style=&#34;text-align:center;margin:20px&#34;&gt;&#xA; &lt;a href=&#34;https://www.smarthomebeginner.com/discord-github&#34; target=&#34;_blank&#34; rel=&#34;nofollow noopener noreferrer&#34;&gt;&lt;img src=&#34;https://www.smarthomebeginner.com/images/2022/05/join-discord-300x75.png&#34; alt=&#34;&#34; width=&#34;300&#34; height=&#34;75&#34;&gt;&lt;/a&gt;&#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Did this Repo help you?&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Become a patron and show us your strongest support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div style=&#34;text-align:center;margin:20px&#34;&gt;&#xA; &lt;a href=&#34;https://www.patreon.com/smarthomebeginner&#34; target=&#34;_blank&#34; rel=&#34;nofollow noopener noreferrer&#34;&gt;&lt;img src=&#34;https://www.smarthomebeginner.com/images/2022/05/become-a-patreon.jpg&#34; alt=&#34;&#34; width=&#34;434&#34; height=&#34;102&#34;&gt;&lt;/a&gt;&#xA;&lt;/div&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please consider buying us a coffee (or two) as a token of appreciation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div style=&#34;text-align:center;margin:20px&#34;&gt;&#xA; &lt;a href=&#34;https://www.buymeacoffee.com/smarthomebeginr&#34; target=&#34;_blank&#34; rel=&#34;nofollow noopener noreferrer&#34;&gt;&lt;img src=&#34;https://www.smarthomebeginner.com/images/2020/04/coffee.png&#34; alt=&#34;&#34; width=&#34;340&#34; height=&#34;77&#34;&gt;&lt;/a&gt;&#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>tmux-plugins/tpm</title>
    <updated>2023-04-30T02:06:41Z</updated>
    <id>tag:github.com,2023-04-30:/tmux-plugins/tpm</id>
    <link href="https://github.com/tmux-plugins/tpm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tmux Plugin Manager&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tmux Plugin Manager&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/tmux-plugins/tpm&#34;&gt;&lt;img src=&#34;https://travis-ci.org/tmux-plugins/tpm.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Installs and loads &lt;code&gt;tmux&lt;/code&gt; plugins.&lt;/p&gt; &#xA;&lt;p&gt;Tested and working on Linux, OSX, and Cygwin.&lt;/p&gt; &#xA;&lt;p&gt;See list of plugins &lt;a href=&#34;https://github.com/tmux-plugins/list&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Requirements: &lt;code&gt;tmux&lt;/code&gt; version 1.9 (or higher), &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;bash&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Clone TPM:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Put this at the bottom of &lt;code&gt;~/.tmux.conf&lt;/code&gt; (&lt;code&gt;$XDG_CONFIG_HOME/tmux/tmux.conf&lt;/code&gt; works too):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# List of plugins&#xA;set -g @plugin &#39;tmux-plugins/tpm&#39;&#xA;set -g @plugin &#39;tmux-plugins/tmux-sensible&#39;&#xA;&#xA;# Other examples:&#xA;# set -g @plugin &#39;github_username/plugin_name&#39;&#xA;# set -g @plugin &#39;github_username/plugin_name#branch&#39;&#xA;# set -g @plugin &#39;git@github.com:user/plugin&#39;&#xA;# set -g @plugin &#39;git@bitbucket.com:user/plugin&#39;&#xA;&#xA;# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)&#xA;run &#39;~/.tmux/plugins/tpm/tpm&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Reload TMUX environment so TPM is sourced:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# type this in terminal if tmux is already running&#xA;tmux source ~/.tmux.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it!&lt;/p&gt; &#xA;&lt;h3&gt;Installing plugins&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add new plugin to &lt;code&gt;~/.tmux.conf&lt;/code&gt; with &lt;code&gt;set -g @plugin &#39;...&#39;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;code&gt;prefix&lt;/code&gt; + &lt;kbd&gt;I&lt;/kbd&gt; (capital i, as in &lt;strong&gt;I&lt;/strong&gt;nstall) to fetch the plugin.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You&#39;re good to go! The plugin was cloned to &lt;code&gt;~/.tmux/plugins/&lt;/code&gt; dir and sourced.&lt;/p&gt; &#xA;&lt;h3&gt;Uninstalling plugins&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Remove (or comment out) plugin from the list.&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;code&gt;prefix&lt;/code&gt; + &lt;kbd&gt;alt&lt;/kbd&gt; + &lt;kbd&gt;u&lt;/kbd&gt; (lowercase u as in &lt;strong&gt;u&lt;/strong&gt;ninstall) to remove the plugin.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;All the plugins are installed to &lt;code&gt;~/.tmux/plugins/&lt;/code&gt; so alternatively you can find plugin directory there and remove it.&lt;/p&gt; &#xA;&lt;h3&gt;Key bindings&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;prefix&lt;/code&gt; + &lt;kbd&gt;I&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installs new plugins from GitHub or any other git repository&lt;/li&gt; &#xA; &lt;li&gt;Refreshes TMUX environment&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;prefix&lt;/code&gt; + &lt;kbd&gt;U&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;updates plugin(s)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;prefix&lt;/code&gt; + &lt;kbd&gt;alt&lt;/kbd&gt; + &lt;kbd&gt;u&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;remove/uninstall plugins not on the plugin list&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Docs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmux-plugins/tpm/master/docs/tpm_not_working.md&#34;&gt;Help, tpm not working&lt;/a&gt; - problem solutions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More advanced features and instructions, regular users probably do not need this:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmux-plugins/tpm/master/docs/how_to_create_plugin.md&#34;&gt;How to create a plugin&lt;/a&gt;. It&#39;s easy.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmux-plugins/tpm/master/docs/managing_plugins_via_cmd_line.md&#34;&gt;Managing plugins via the command line&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmux-plugins/tpm/master/docs/changing_plugins_install_dir.md&#34;&gt;Changing plugins install dir&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmux-plugins/tpm/master/docs/automatic_tpm_installation.md&#34;&gt;Automatic TPM installation on a new machine&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tests&lt;/h3&gt; &#xA;&lt;p&gt;Tests for this project run on &lt;a href=&#34;https://travis-ci.org/tmux-plugins/tpm&#34;&gt;Travis CI&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When run locally, &lt;a href=&#34;https://www.vagrantup.com/&#34;&gt;vagrant&lt;/a&gt; is required. Run tests with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# within project directory&#xA;./run_tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmux-plugins/tpm/master/LICENSE.md&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tfutils/tfenv</title>
    <updated>2023-04-30T02:06:41Z</updated>
    <id>tag:github.com,2023-04-30:/tfutils/tfenv</id>
    <link href="https://github.com/tfutils/tfenv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Terraform version manager&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/tfutils/tfenv/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;tfenv&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.terraform.io/&#34;&gt;Terraform&lt;/a&gt; version manager inspired by &lt;a href=&#34;https://github.com/rbenv/rbenv&#34;&gt;rbenv&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Currently tfenv supports the following OSes&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macOS &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;64bit&lt;/li&gt; &#xA;   &lt;li&gt;Arm (Apple Silicon)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Linux &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;64bit&lt;/li&gt; &#xA;   &lt;li&gt;Arm&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Windows (64bit) - only tested in git-bash - currently presumed failing due to symlink issues in git-bash&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Automatic&lt;/h3&gt; &#xA;&lt;p&gt;Install via Homebrew&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ brew install tfenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install via Arch User Repository (AUR)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ yay --sync tfenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install via puppet&lt;/p&gt; &#xA;&lt;p&gt;Using puppet module &lt;a href=&#34;https://github.com/SergK/puppet-tfenv&#34;&gt;sergk-tfenv&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-puppet&#34;&gt;include ::tfenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Check out tfenv into any path (here is &lt;code&gt;${HOME}/.tfenv&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git clone --depth=1 https://github.com/tfutils/tfenv.git ~/.tfenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Add &lt;code&gt;~/.tfenv/bin&lt;/code&gt; to your &lt;code&gt;$PATH&lt;/code&gt; any way you like&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;export PATH=&#34;$HOME/.tfenv/bin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bash_profile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For WSL users&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ echo &#39;export PATH=$PATH:$HOME/.tfenv/bin&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;OR you can make symlinks for &lt;code&gt;tfenv/bin/*&lt;/code&gt; scripts into a path that is already added to your &lt;code&gt;$PATH&lt;/code&gt; (e.g. &lt;code&gt;/usr/local/bin&lt;/code&gt;) &lt;code&gt;OSX/Linux Only!&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ln -s ~/.tfenv/bin/* /usr/local/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Ubuntu/Debian touching &lt;code&gt;/usr/local/bin&lt;/code&gt; might require sudo access, but you can create &lt;code&gt;${HOME}/bin&lt;/code&gt; or &lt;code&gt;${HOME}/.local/bin&lt;/code&gt; and on next login it will get added to the session &lt;code&gt;$PATH&lt;/code&gt; or by running &lt;code&gt;. ${HOME}/.profile&lt;/code&gt; it will get added to the current shell session&#39;s &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ mkdir -p ~/.local/bin/&#xA;$ . ~/.profile&#xA;$ ln -s ~/.tfenv/bin/* ~/.local/bin&#xA;$ which tfenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;tfenv install [version]&lt;/h3&gt; &#xA;&lt;p&gt;Install a specific version of Terraform.&lt;/p&gt; &#xA;&lt;p&gt;If no parameter is passed, the version to use is resolved automatically via &lt;a href=&#34;https://raw.githubusercontent.com/tfutils/tfenv/master/#tfenv_terraform_version&#34;&gt;TFENV_TERRAFORM_VERSION environment variable&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/tfutils/tfenv/master/#terraform-version-file&#34;&gt;.terraform-version files&lt;/a&gt;, in that order of precedence, i.e. TFENV_TERRAFORM_VERSION, then .terraform-version. The default is &#39;latest&#39; if none are found.&lt;/p&gt; &#xA;&lt;p&gt;If a parameter is passed, available options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;x.y.z&lt;/code&gt; &lt;a href=&#34;https://semver.org/&#34;&gt;Semver 2.0.0&lt;/a&gt; string specifying the exact version to install&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;latest&lt;/code&gt; is a syntax to install latest version&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;latest:&amp;lt;regex&amp;gt;&lt;/code&gt; is a syntax to install latest version matching regex (used by grep -e)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;latest-allowed&lt;/code&gt; is a syntax to scan your Terraform files to detect which version is maximally allowed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;min-required&lt;/code&gt; is a syntax to scan your Terraform files to detect which version is minimally required.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://www.terraform.io/docs/configuration/terraform.html&#34;&gt;required_version&lt;/a&gt; docs. Also &lt;a href=&#34;https://raw.githubusercontent.com/tfutils/tfenv/master/#min-required&#34;&gt;see min-required &amp;amp; latest-allowed&lt;/a&gt; section below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ tfenv install&#xA;$ tfenv install 0.7.0&#xA;$ tfenv install latest&#xA;$ tfenv install latest:^0.8&#xA;$ tfenv install latest-allowed&#xA;$ tfenv install min-required&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;shasum&lt;/code&gt; is present in the path, tfenv will verify the download against Hashicorp&#39;s published sha256 hash. If &lt;a href=&#34;https://keybase.io/&#34;&gt;keybase&lt;/a&gt; is available in the path it will also verify the signature for those published hashes using Hashicorp&#39;s published public key.&lt;/p&gt; &#xA;&lt;p&gt;You can opt-in to using GnuPG tools for PGP signature verification if keybase is not available:&lt;/p&gt; &#xA;&lt;p&gt;Where &lt;code&gt;TFENV_INSTALL_DIR&lt;/code&gt; is for example, &lt;code&gt;~/.tfenv&lt;/code&gt; or &lt;code&gt;/usr/local/Cellar/tfenv/&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#39;trust-tfenv: yes&#39; &amp;gt; ${TFENV_INSTALL_DIR}/use-gpgv&#xA;$ tfenv install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;trust-tfenv&lt;/code&gt; directive means that verification uses a copy of the Hashicorp OpenPGP key found in the tfenv repository. Skipping that directive means that the Hashicorp key must be in the existing default trusted keys. Use the file &lt;code&gt;${TFENV_INSTALL_DIR}/use-gnupg&lt;/code&gt; to instead invoke the full &lt;code&gt;gpg&lt;/code&gt; tool and see web-of-trust status; beware that a lack of trust path will not cause a validation failure.&lt;/p&gt; &#xA;&lt;h4&gt;.terraform-version&lt;/h4&gt; &#xA;&lt;p&gt;If you use a &lt;a href=&#34;https://raw.githubusercontent.com/tfutils/tfenv/master/#terraform-version-file&#34;&gt;.terraform-version&lt;/a&gt; file, &lt;code&gt;tfenv install&lt;/code&gt; (no argument) will install the version written in it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;min-required&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;min-required &amp;amp; latest-allowed&lt;/h4&gt; &#xA;&lt;p&gt;Please note that we don&#39;t do semantic version range parsing but use first ever found version as the candidate for minimally required one. It is up to the user to keep the definition reasonable. I.e.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-terraform&#34;&gt;// this will detect 0.12.3&#xA;terraform {&#xA;  required_version  = &#34;&amp;lt;0.12.3, &amp;gt;= 0.10.0&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-terraform&#34;&gt;// this will detect 0.10.8 (the latest 0.10.x release)&#xA;terraform {&#xA;  required_version  = &#34;~&amp;gt; 0.10.0, &amp;lt;0.12.3&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Environment Variables&lt;/h3&gt; &#xA;&lt;h4&gt;TFENV&lt;/h4&gt; &#xA;&lt;h5&gt;&lt;code&gt;TFENV_ARCH&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;String (Default: &lt;code&gt;amd64&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Specify architecture. Architecture other than the default amd64 can be specified with the &lt;code&gt;TFENV_ARCH&lt;/code&gt; environment variable&lt;/p&gt; &#xA;&lt;p&gt;Note: Default changes to &lt;code&gt;arm64&lt;/code&gt; for versions that have arm64 builds available when &lt;code&gt;$(uname -m)&lt;/code&gt; matches &lt;code&gt;aarch64* | arm64*&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ TFENV_ARCH=arm64 tfenv install 0.7.9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;&lt;code&gt;TFENV_AUTO_INSTALL&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;String (Default: true)&lt;/p&gt; &#xA;&lt;p&gt;Should tfenv automatically install terraform if the version specified by defaults or a .terraform-version file is not currently installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ TFENV_AUTO_INSTALL=false terraform plan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ terraform use &amp;lt;version that is not yet installed&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;&lt;code&gt;TFENV_CURL_OUTPUT&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Integer (Default: 2)&lt;/p&gt; &#xA;&lt;p&gt;Set the mechanism used for displaying download progress when downloading terraform versions from the remote server.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2: v1 Behaviour: Pass &lt;code&gt;-#&lt;/code&gt; to curl&lt;/li&gt; &#xA; &lt;li&gt;1: Use curl default&lt;/li&gt; &#xA; &lt;li&gt;0: Pass &lt;code&gt;-s&lt;/code&gt; to curl&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;&lt;code&gt;TFENV_DEBUG&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Integer (Default: 0)&lt;/p&gt; &#xA;&lt;p&gt;Set the debug level for TFENV.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;0: No debug output&lt;/li&gt; &#xA; &lt;li&gt;1: Simple debug output&lt;/li&gt; &#xA; &lt;li&gt;2: Extended debug output, with source file names and interactive debug shells on error&lt;/li&gt; &#xA; &lt;li&gt;3: Debug level 2 + Bash execution tracing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;&lt;code&gt;TFENV_REMOTE&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;String (Default: &lt;a href=&#34;https://releases.hashicorp.com&#34;&gt;https://releases.hashicorp.com&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;To install from a remote other than the default&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ TFENV_REMOTE=https://example.jfrog.io/artifactory/hashicorp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;&lt;code&gt;TFENV_REVERSE_REMOTE&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Integer (Default: 0)&lt;/p&gt; &#xA;&lt;p&gt;When using a custom remote, such as Artifactory, instead of the Hashicorp servers, the list of terraform versions returned by the curl of the remote directory may be inverted. In this case the &lt;code&gt;latest&lt;/code&gt; functionality will not work as expected because it expects the versions to be listed in order of release date from newest to oldest. If your remote is instead providing a list that is oldes-first, set &lt;code&gt;TFENV_REVERSE_REMOTE=1&lt;/code&gt; and functionality will be restored.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ TFENV_REVERSE_REMOTE=1 tfenv list-remote&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;&lt;code&gt;TFENV_CONFIG_DIR&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Path (Default: &lt;code&gt;$TFENV_ROOT&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;The path to a directory where the local terraform versions and configuration files exist.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;TFENV_CONFIG_DIR=&#34;$XDG_CONFIG_HOME/tfenv&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;&lt;code&gt;TFENV_TERRAFORM_VERSION&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;String (Default: &#34;&#34;)&lt;/p&gt; &#xA;&lt;p&gt;If not empty string, this variable overrides Terraform version, specified in &lt;a href=&#34;https://raw.githubusercontent.com/tfutils/tfenv/master/#terraform-version-file&#34;&gt;.terraform-version files&lt;/a&gt;. &lt;code&gt;latest&lt;/code&gt; and &lt;code&gt;latest:&amp;lt;regex&amp;gt;&lt;/code&gt; syntax are also supported. &lt;a href=&#34;https://raw.githubusercontent.com/tfutils/tfenv/master/#tfenv-install-version&#34;&gt;&lt;code&gt;tfenv install&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/tfutils/tfenv/master/#tfenv-use-version&#34;&gt;&lt;code&gt;tfenv use&lt;/code&gt;&lt;/a&gt; command also respects this variable.&lt;/p&gt; &#xA;&lt;p&gt;e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ TFENV_TERRAFORM_VERSION=latest:^0.11. terraform --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;&lt;code&gt;TFENV_NETRC_PATH&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;String (Default: &#34;&#34;)&lt;/p&gt; &#xA;&lt;p&gt;If not empty string, this variable specifies the credentials file used to access the remote location (useful if used in conjunction with TFENV_REMOTE).&lt;/p&gt; &#xA;&lt;p&gt;e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ TFENV_NETRC_PATH=&#34;$PWD/.netrc.tfenv&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Bashlog Logging Library&lt;/h4&gt; &#xA;&lt;h5&gt;&lt;code&gt;BASHLOG_COLOURS&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Integer (Default: 1)&lt;/p&gt; &#xA;&lt;p&gt;To disable colouring of console output, set to 0.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;BASHLOG_DATE_FORMAT&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;String (Default: +%F %T)&lt;/p&gt; &#xA;&lt;p&gt;The display format for the date as passed to the &lt;code&gt;date&lt;/code&gt; binary to generate a datestamp used as a prefix to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;FILE&lt;/code&gt; type log file lines.&lt;/li&gt; &#xA; &lt;li&gt;Each console output line when &lt;code&gt;BASHLOG_EXTRA=1&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;&lt;code&gt;BASHLOG_EXTRA&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Integer (Default: 0)&lt;/p&gt; &#xA;&lt;p&gt;By default, console output from tfenv does not print a date stamp or log severity.&lt;/p&gt; &#xA;&lt;p&gt;To enable this functionality, making normal output equivalent to FILE log output, set to 1.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;BASHLOG_FILE&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Integer (Default: 0)&lt;/p&gt; &#xA;&lt;p&gt;Set to 1 to enable plain text logging to file (FILE type logging).&lt;/p&gt; &#xA;&lt;p&gt;The default path for log files is defined by /tmp/$(basename $0).log Each executable logs to its own file.&lt;/p&gt; &#xA;&lt;p&gt;e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ BASHLOG_FILE=1 tfenv use latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will log to &lt;code&gt;/tmp/tfenv-use.log&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;BASHLOG_FILE_PATH&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;String (Default: /tmp/$(basename ${0}).log)&lt;/p&gt; &#xA;&lt;p&gt;To specify a single file as the target for all FILE type logging regardless of the executing script.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;BASHLOG_I_PROMISE_TO_BE_CAREFUL_CUSTOM_EVAL_PREFIX&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;String (Default: &#34;&#34;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;BE CAREFUL - MISUSE WILL DESTROY EVERYTHING YOU EVER LOVED&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This variable allows you to pass a string containing a command that will be executed using &lt;code&gt;eval&lt;/code&gt; in order to produce a prefix to each console output line, and each FILE type log entry.&lt;/p&gt; &#xA;&lt;p&gt;e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ BASHLOG_I_PROMISE_TO_BE_CAREFUL_CUSTOM_EVAL_PREFIX=&#39;echo &#34;${$$} &#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will prefix every log line with the calling process&#39; PID.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;BASHLOG_JSON&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Integer (Default: 0)&lt;/p&gt; &#xA;&lt;p&gt;Set to 1 to enable JSON logging to file (JSON type logging).&lt;/p&gt; &#xA;&lt;p&gt;The default path for log files is defined by /tmp/$(basename $0).log.json Each executable logs to its own file.&lt;/p&gt; &#xA;&lt;p&gt;e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ BASHLOG_JSON=1 tfenv use latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will log in JSON format to &lt;code&gt;/tmp/tfenv-use.log.json&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;JSON log content:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;{&#34;timestamp&#34;:&#34;&amp;lt;date +%s&amp;gt;&#34;,&#34;level&#34;:&#34;&amp;lt;log-level&amp;gt;&#34;,&#34;message&#34;:&#34;&amp;lt;log-content&amp;gt;&#34;}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;BASHLOG_JSON_PATH&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;String (Default: /tmp/$(basename ${0}).log.json)&lt;/p&gt; &#xA;&lt;p&gt;To specify a single file as the target for all JSON type logging regardless of the executing script.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;BASHLOG_SYSLOG&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Integer (Default: 0)&lt;/p&gt; &#xA;&lt;p&gt;To log to syslog using the &lt;code&gt;logger&lt;/code&gt; binary, set this to 1.&lt;/p&gt; &#xA;&lt;p&gt;The basic functionality is thus:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ local tag=&#34;${BASHLOG_SYSLOG_TAG:-$(basename &#34;${0}&#34;)}&#34;;&#xA;$ local facility=&#34;${BASHLOG_SYSLOG_FACILITY:-local0}&#34;;&#xA;$ local pid=&#34;${$}&#34;;&#xA;$ logger --id=&#34;${pid}&#34; -t &#34;${tag}&#34; -p &#34;${facility}.${severity}&#34; &#34;${syslog_line}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;&lt;code&gt;BASHLOG_SYSLOG_FACILITY&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;String (Default: local0)&lt;/p&gt; &#xA;&lt;p&gt;The syslog facility to specify when using SYSLOG type logging.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;BASHLOG_SYSLOG_TAG&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;String (Default: $(basename $0))&lt;/p&gt; &#xA;&lt;p&gt;The syslog tag to specify when using SYSLOG type logging.&lt;/p&gt; &#xA;&lt;p&gt;Defaults to the PID of the calling process.&lt;/p&gt; &#xA;&lt;h3&gt;tfenv use [version]&lt;/h3&gt; &#xA;&lt;p&gt;Switch a version to use&lt;/p&gt; &#xA;&lt;p&gt;If no parameter is passed, the version to use is resolved automatically via &lt;a href=&#34;https://raw.githubusercontent.com/tfutils/tfenv/master/#terraform-version-file&#34;&gt;.terraform-version files&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/tfutils/tfenv/master/#tfenv_terraform_version&#34;&gt;TFENV_TERRAFORM_VERSION environment variable&lt;/a&gt; (TFENV_TERRAFORM_VERSION takes precedence), defaulting to &#39;latest&#39; if none are found.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;latest&lt;/code&gt; is a syntax to use the latest installed version&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;latest:&amp;lt;regex&amp;gt;&lt;/code&gt; is a syntax to use latest installed version matching regex (used by grep -e)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;min-required&lt;/code&gt; will switch to the version minimally required by your terraform sources (see above &lt;code&gt;tfenv install&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ tfenv use&#xA;$ tfenv use min-required&#xA;$ tfenv use 0.7.0&#xA;$ tfenv use latest&#xA;$ tfenv use latest:^0.8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;tfenv use latest&lt;/code&gt; or &lt;code&gt;tfenv use latest:&amp;lt;regex&amp;gt;&lt;/code&gt; will find the latest matching version that is already installed. If no matching versions are installed, and TFENV_AUTO_INSTALL is set to &lt;code&gt;true&lt;/code&gt; (which is the default) the the latest matching version in the remote repository will be installed and used.&lt;/p&gt; &#xA;&lt;h3&gt;tfenv uninstall &amp;lt;version&amp;gt;&lt;/h3&gt; &#xA;&lt;p&gt;Uninstall a specific version of Terraform &lt;code&gt;latest&lt;/code&gt; is a syntax to uninstall latest version &lt;code&gt;latest:&amp;lt;regex&amp;gt;&lt;/code&gt; is a syntax to uninstall latest version matching regex (used by grep -e)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ tfenv uninstall 0.7.0&#xA;$ tfenv uninstall latest&#xA;$ tfenv uninstall latest:^0.8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;tfenv list&lt;/h3&gt; &#xA;&lt;p&gt;List installed versions&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ tfenv list&#xA;* 0.10.7 (set by /opt/tfenv/version)&#xA;  0.9.0-beta2&#xA;  0.8.8&#xA;  0.8.4&#xA;  0.7.0&#xA;  0.7.0-rc4&#xA;  0.6.16&#xA;  0.6.2&#xA;  0.6.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;tfenv list-remote&lt;/h3&gt; &#xA;&lt;p&gt;List installable versions&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ tfenv list-remote&#xA;0.9.0-beta2&#xA;0.9.0-beta1&#xA;0.8.8&#xA;0.8.7&#xA;0.8.6&#xA;0.8.5&#xA;0.8.4&#xA;0.8.3&#xA;0.8.2&#xA;0.8.1&#xA;0.8.0&#xA;0.8.0-rc3&#xA;0.8.0-rc2&#xA;0.8.0-rc1&#xA;0.8.0-beta2&#xA;0.8.0-beta1&#xA;0.7.13&#xA;0.7.12&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;.terraform-version file&lt;/h2&gt; &#xA;&lt;p&gt;If you put a &lt;code&gt;.terraform-version&lt;/code&gt; file on your project root, or in your home directory, tfenv detects it and uses the version written in it. If the version is &lt;code&gt;latest&lt;/code&gt; or &lt;code&gt;latest:&amp;lt;regex&amp;gt;&lt;/code&gt;, the latest matching version currently installed will be selected.&lt;/p&gt; &#xA;&lt;p&gt;Note, that &lt;a href=&#34;https://raw.githubusercontent.com/tfutils/tfenv/master/#tfenv_terraform_version&#34;&gt;TFENV_TERRAFORM_VERSION environment variable&lt;/a&gt; can be used to override version, specified by &lt;code&gt;.terraform-version&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cat .terraform-version&#xA;0.6.16&#xA;&#xA;$ terraform version&#xA;Terraform v0.6.16&#xA;&#xA;Your version of Terraform is out of date! The latest version&#xA;is 0.7.3. You can update by downloading from www.terraform.io&#xA;&#xA;$ echo 0.7.3 &amp;gt; .terraform-version&#xA;&#xA;$ terraform version&#xA;Terraform v0.7.3&#xA;&#xA;$ echo latest:^0.8 &amp;gt; .terraform-version&#xA;&#xA;$ terraform version&#xA;Terraform v0.8.8&#xA;&#xA;$ TFENV_TERRAFORM_VERSION=0.7.3 terraform --version&#xA;Terraform v0.7.3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Upgrading&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git --git-dir=~/.tfenv/.git pull&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Uninstalling&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ rm -rf /some/path/to/tfenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tfutils/tfenv/raw/master/LICENSE&#34;&gt;tfenv itself&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rbenv/rbenv/raw/master/LICENSE&#34;&gt;rbenv&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;tfenv partially uses rbenv&#39;s source code&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>