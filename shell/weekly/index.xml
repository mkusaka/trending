<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-13T01:50:25Z</updated>
  <subtitle>Weekly Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ading2210/shimboot</title>
    <updated>2024-10-13T01:50:25Z</updated>
    <id>tag:github.com,2024-10-13:/ading2210/shimboot</id>
    <link href="https://github.com/ading2210/shimboot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Boot a desktop Linux distribution from a Chrome OS RMA shim.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Chrome OS RMA Shim Bootloader&lt;/h1&gt; &#xA;&lt;p&gt;Shimboot is a collection of scripts for patching a Chrome OS RMA shim to serve as a bootloader for a standard Linux distribution. It allows you to boot a full desktop Debian install on a Chromebook, without needing to unenroll it or modify the firmware.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ading2210/shimboot/main/website/assets/shimboot_demo_1.jpg&#34; alt=&#34;Shimboot (KDE) on an HP Chromebook 11 G9 EE.&#34; width=&#34;400&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ading2210/shimboot/main/website/assets/shimboot_demo_2.jpg&#34; alt=&#34;Shimboot (XFCE) on an Acer Chromebook 311 C722.&#34; width=&#34;400&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shimboot (KDE) on an HP Chromebook 11 G9 EE&lt;/td&gt; &#xA;   &lt;td&gt;Shimboot (XFCE) on an Acer Chromebook 311 C722&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Table of Contents:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ading2210/shimboot/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ading2210/shimboot/main/#about&#34;&gt;About&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ading2210/shimboot/main/#partition-layout&#34;&gt;Partition Layout&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ading2210/shimboot/main/#status&#34;&gt;Status&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ading2210/shimboot/main/#device-compatibility-table&#34;&gt;Device Compatibility Table&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ading2210/shimboot/main/#todo&#34;&gt;TODO&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ading2210/shimboot/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ading2210/shimboot/main/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ading2210/shimboot/main/#video-tutorial&#34;&gt;Video Tutorial&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ading2210/shimboot/main/#build-instructions&#34;&gt;Build Instructions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ading2210/shimboot/main/#booting-the-image&#34;&gt;Booting the Image&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ading2210/shimboot/main/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ading2210/shimboot/main/#copyright&#34;&gt;Copyright&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ading2210/shimboot/main/#copyright-notice&#34;&gt;Copyright Notice&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;small&gt;&lt;i&gt;Table of contents generated with &lt;a href=&#34;http://ecotrust-canada.github.io/markdown-toc/&#34;&gt;markdown-toc&lt;/a&gt;&lt;/i&gt;.&lt;/small&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run a full Debian installation on a Chromebook&lt;/li&gt; &#xA; &lt;li&gt;Does not modify the firmware&lt;/li&gt; &#xA; &lt;li&gt;Works on enterprise enrolled devices&lt;/li&gt; &#xA; &lt;li&gt;Can boot Chrome OS with no restrictions (useful for enrolled devices)&lt;/li&gt; &#xA; &lt;li&gt;Nearly full device compatibility&lt;/li&gt; &#xA; &lt;li&gt;Optional disk compression&lt;/li&gt; &#xA; &lt;li&gt;Multiple desktop environments supported&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About:&lt;/h2&gt; &#xA;&lt;p&gt;Chrome OS RMA shims are bootable disk images which are designed to run a variety of diagnostic utilities on Chromebooks, and they&#39;ll work even if the device is enterprise enrolled. Unfortunately for Google, there exists a &lt;a href=&#34;https://sh1mmer.me/&#34;&gt;security flaw&lt;/a&gt; where the root filesystem of the RMA shim is not verified. This lets us replace the rootfs with anything we want, including a full Linux distribution.&lt;/p&gt; &#xA;&lt;p&gt;Simply replacing the shim&#39;s rootfs doesn&#39;t work, as it boots in an environment friendly to the RMA shim, not regular Linux distros. To get around this, a separate bootloader is required to transition from the shim environment to the main rootfs. This bootloader then runs &lt;code&gt;pivot_root&lt;/code&gt; to enter the rootfs, where it then starts the init system.&lt;/p&gt; &#xA;&lt;p&gt;Another problem is encountered at this stage: the Chrome OS kernel will complain about systemd&#39;s mounts, and the boot process will hang. A simple workaround is to &lt;a href=&#34;https://github.com/ading2210/chromeos-systemd&#34;&gt;apply a patch&lt;/a&gt; to systemd, and then it can be recompiled and hosted at a &lt;a href=&#34;https://github.com/ading2210/shimboot-repo&#34;&gt;repo somewhere&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After copying all the firmware from the recovery image and shim to the rootfs, we&#39;re able to boot to a mostly working XFCE desktop.&lt;/p&gt; &#xA;&lt;p&gt;The main advantages of this approach are that you don&#39;t need to touch the device&#39;s firmware in order to run Linux. Simply rebooting and unplugging the USB drive will return the device to normal, which can be useful if the device is enterprise enrolled. However, since we are stuck with the kernel from the RMA shim, some features such as audio and suspend may not work.&lt;/p&gt; &#xA;&lt;h3&gt;Partition Layout:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;1MB dummy stateful partition&lt;/li&gt; &#xA; &lt;li&gt;32MB Chrome OS kernel&lt;/li&gt; &#xA; &lt;li&gt;20MB bootloader&lt;/li&gt; &#xA; &lt;li&gt;The rootfs partitions fill the rest of the disk&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note that rootfs partitions have to be named &lt;code&gt;shimboot_rootfs:&amp;lt;partname&amp;gt;&lt;/code&gt; for the bootloader to recognize them.&lt;/p&gt; &#xA;&lt;h2&gt;Status:&lt;/h2&gt; &#xA;&lt;p&gt;Driver support depends on the device you are using shimboot on. The &lt;code&gt;patch_rootfs.sh&lt;/code&gt; script attempts to copy all the firmware and drivers from the shim and recovery image into the rootfs, so expect most things to work on other boards. ARM Chromebooks are not supported at the moment.&lt;/p&gt; &#xA;&lt;h3&gt;Device Compatibility Table:&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Board Name&lt;/th&gt; &#xA;   &lt;th&gt;X11&lt;/th&gt; &#xA;   &lt;th&gt;Wifi&lt;/th&gt; &#xA;   &lt;th&gt;Speakers&lt;/th&gt; &#xA;   &lt;th&gt;Backlight&lt;/th&gt; &#xA;   &lt;th&gt;Touchscreen&lt;/th&gt; &#xA;   &lt;th&gt;3D Accel&lt;/th&gt; &#xA;   &lt;th&gt;Bluetooth&lt;/th&gt; &#xA;   &lt;th&gt;Webcam&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://chrome100.dev/board/dedede&#34;&gt;&lt;code&gt;dedede&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://chrome100.dev/board/octopus&#34;&gt;&lt;code&gt;octopus&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://chrome100.dev/board/nissa&#34;&gt;&lt;code&gt;nissa&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://chrome100.dev/board/reks&#34;&gt;&lt;code&gt;reks&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;sup&gt;[1]&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;untested&lt;/td&gt; &#xA;   &lt;td&gt;untested&lt;/td&gt; &#xA;   &lt;td&gt;untested&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;untested&lt;/td&gt; &#xA;   &lt;td&gt;untested&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://chrome100.dev/board/kefka&#34;&gt;&lt;code&gt;kefka&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;sup&gt;[1]&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;untested&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;untested&lt;/td&gt; &#xA;   &lt;td&gt;untested&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://chrome100.dev/board/zork&#34;&gt;&lt;code&gt;zork&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;untested&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://chrome100.dev/board/grunt&#34;&gt;&lt;code&gt;grunt&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://chrome100.dev/board/jacuzzi&#34;&gt;&lt;code&gt;jacuzzi&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;untested&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://chrome100.dev/board/corsola&#34;&gt;&lt;code&gt;corsola&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;untested&lt;/td&gt; &#xA;   &lt;td&gt;untested&lt;/td&gt; &#xA;   &lt;td&gt;untested&lt;/td&gt; &#xA;   &lt;td&gt;untested&lt;/td&gt; &#xA;   &lt;td&gt;untested&lt;/td&gt; &#xA;   &lt;td&gt;untested&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://chrome100.dev/board/hatch&#34;&gt;&lt;code&gt;hatch&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;sup&gt;[2]&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;sup&gt;1. The kernel is too old.&lt;/sup&gt;&lt;br&gt; &lt;sup&gt;2. 5ghz wifi networks do not work, but 2.4ghz networks do.&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;p&gt;This table is incomplete. If you want to contribute a device compatibility report please create a new issue on the Github repository.&lt;/p&gt; &#xA;&lt;p&gt;On all devices, expect the following features to work:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Zram (compressed memory)&lt;/li&gt; &#xA; &lt;li&gt;Disk compression with squashfs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On all devices, the following features will not work:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Suspend (disabled by the kernel)&lt;/li&gt; &#xA; &lt;li&gt;Swap (disabled by the kernel)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;TODO:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Finish Python TUI rewrite (see the &lt;code&gt;python&lt;/code&gt; branch if you want to help with this)&lt;/li&gt; &#xA; &lt;li&gt;Transparent disk compression&lt;/li&gt; &#xA; &lt;li&gt;Full disk encryption&lt;/li&gt; &#xA; &lt;li&gt;Support for more distros (Ubuntu and Arch maybe)&lt;/li&gt; &#xA; &lt;li&gt;Eliminate binwalk dependency&lt;/li&gt; &#xA; &lt;li&gt;Get audio to work on dedede&lt;/li&gt; &#xA; &lt;li&gt;Get kexec working&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;PRs and contributions are welcome to help implement these features.&lt;/p&gt; &#xA;&lt;h2&gt;Usage:&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A separate Linux PC for the build process (preferably something Debian-based) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;WSL2 is supported if you are on Windows&lt;/li&gt; &#xA;   &lt;li&gt;Github Codespaces is not supported at the moment&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;A USB drive that is at least 8GB in size &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Cheap USB 2.0 drives typically won&#39;t work well due to their slow speeds&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;At least 20GB of free disk space&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Video Tutorial:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=v327np19RXg&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/v327np19RXg/mqdefault.jpg&#34; alt=&#34;thumbnail of the tutorial youtube video&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/channel/UC2yMjQu-NwJSQb0tRclQMYg&#34;&gt;@blueiceyt&lt;/a&gt; made a nice &lt;a href=&#34;https://www.youtube.com/watch?v=v327np19RXg&#34;&gt;video tutorial&lt;/a&gt; for Shimboot. It&#39;s a lot easier to understand than the instructions on this page, and it&#39;ll cover most use cases.&lt;/p&gt; &#xA;&lt;h3&gt;Build Instructions:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Find the board name of your Chromebook. You can search for the model name on &lt;a href=&#34;https://chrome100.dev/&#34;&gt;chrome100.dev&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Clone this repository and cd into it.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;sudo ./build_complete.sh &amp;lt;board_name&amp;gt;&lt;/code&gt; to download the required data and build the disk image.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note: If you are building for an ARM Chromebook, you need the &lt;code&gt;qemu-user-static&lt;/code&gt; and &lt;code&gt;binfmt-support&lt;/code&gt; packages.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ading2210/shimboot/releases&#34;&gt;Prebuilt images&lt;/a&gt; are available if you don&#39;t have a suitable device to run the build on.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Alternatively, you can run each of the steps manually:&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Grab a Chrome OS RMA Shim from somewhere. Most of them have already been leaked and aren&#39;t too difficult to find.&lt;/li&gt; &#xA;  &lt;li&gt;Download a Chrome OS &lt;a href=&#34;https://chromiumdash.appspot.com/serving-builds?deviceCategory=ChromeOS&#34;&gt;recovery image&lt;/a&gt; for your board.&lt;/li&gt; &#xA;  &lt;li&gt;Unzip the shim and the recovery image if you have not done so already.&lt;/li&gt; &#xA;  &lt;li&gt;Run &lt;code&gt;mkdir -p data/rootfs&lt;/code&gt; to create a directory to hold the rootfs.&lt;/li&gt; &#xA;  &lt;li&gt;Run &lt;code&gt;sudo ./build_rootfs.sh data/rootfs bookworm&lt;/code&gt; to build the base rootfs.&lt;/li&gt; &#xA;  &lt;li&gt;Run &lt;code&gt;sudo ./patch_rootfs.sh path_to_shim path_to_reco data/rootfs&lt;/code&gt; to patch the base rootfs and add any needed drivers.&lt;/li&gt; &#xA;  &lt;li&gt;Run &lt;code&gt;sudo ./build.sh image.bin path_to_shim data/rootfs&lt;/code&gt; to generate a disk image at &lt;code&gt;image.bin&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Booting the Image:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Obtain a shimboot image by downloading a &lt;a href=&#34;https://github.com/ading2210/shimboot/releases&#34;&gt;prebuilt one&lt;/a&gt; or building it yourself.&lt;/li&gt; &#xA; &lt;li&gt;Flash the shimboot image to a USB drive or SD card. Use the &lt;a href=&#34;https://chrome.google.com/webstore/detail/chromebook-recovery-utili/pocpnlppkickgojjlmhdmidojbmbodfm&#34;&gt;Chromebook Recovery Utility&lt;/a&gt; or &lt;a href=&#34;https://linux.die.net/man/1/dd&#34;&gt;dd&lt;/a&gt; if you&#39;re on Linux.&lt;/li&gt; &#xA; &lt;li&gt;Enable developer mode on your Chromebook. If the Chromebook is enrolled, follow the instructions on the &lt;a href=&#34;https://sh1mmer.me&#34;&gt;sh1mmer website&lt;/a&gt; (see the &#34;Executing on Chromebook&#34; section).&lt;/li&gt; &#xA; &lt;li&gt;Plug the USB into your Chromebook and enter recovery mode. It should detect the USB and run the shimboot bootloader.&lt;/li&gt; &#xA; &lt;li&gt;Boot into Debian and log in with the username and password that you configured earlier. The default username/password for the prebuilt images is &lt;code&gt;user/user&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Expand the rootfs partition so that it fills up the entire disk by running &lt;code&gt;sudo expand_rootfs&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Change your own password by running &lt;code&gt;passwd user&lt;/code&gt;. The root user is disabled by default.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;FAQ:&lt;/h2&gt; &#xA;&lt;h4&gt;I want to use a different Linux distribution. How can I do that?&lt;/h4&gt; &#xA;&lt;p&gt;Using any Linux distro is possible, provided that you apply the &lt;a href=&#34;https://github.com/ading2210/chromeos-systemd&#34;&gt;proper patches&lt;/a&gt; to systemd and recompile it. Most distros have some sort of bootstrapping tool that allows you to install it to a directory on your host PC. Then, you can just pass that rootfs directory into &lt;code&gt;patch_rootfs.sh&lt;/code&gt; and &lt;code&gt;build.sh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here is a list of distros that are supported out of the box:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Debian 12&lt;/li&gt; &#xA; &lt;li&gt;Debian Unstable&lt;/li&gt; &#xA; &lt;li&gt;Alpine Linux&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;PRs to enable support for other distros are welcome.&lt;/p&gt; &#xA;&lt;p&gt;Debian Sid (the rolling release version of Debian) is also supported if you just want newer packages, and you can install it by passing an argument to &lt;code&gt;build_complete.sh&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo ./build_complete.sh dedede release=unstable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is also experimental support for Alpine Linux. The Alpine disk image is about half the size compared to Debian, although some applications are missing. Pass the &lt;code&gt;distro=alpine&lt;/code&gt; to use it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo ./build_complete.sh dedede distro=alpine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;How can I install a desktop environment other than XFCE?&lt;/h4&gt; &#xA;&lt;p&gt;You can pass the &lt;code&gt;desktop&lt;/code&gt; argument to the &lt;code&gt;build_complete.sh&lt;/code&gt; script, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo ./build_complete.sh grunt desktop=lxde&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The valid values for this argument are: &lt;code&gt;gnome&lt;/code&gt;, &lt;code&gt;xfce&lt;/code&gt;, &lt;code&gt;kde&lt;/code&gt;, &lt;code&gt;lxde&lt;/code&gt;, &lt;code&gt;gnome-flashback&lt;/code&gt;, &lt;code&gt;cinnamon&lt;/code&gt;, &lt;code&gt;mate&lt;/code&gt;, and &lt;code&gt;lxqt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Will this prevent me from using Chrome OS normally?&lt;/h4&gt; &#xA;&lt;p&gt;Shimboot does not touch the internal storage at all, so you will be able to use Chrome OS as if nothing happened. However, if you are on an enterprise enrolled device, booting Chrome OS again will force a powerwash due to the attempted switch into developer mode.&lt;/p&gt; &#xA;&lt;h4&gt;Can I unplug the USB drive while using Debian?&lt;/h4&gt; &#xA;&lt;p&gt;By default, this is not possible. However, you can simply copy your Debian rootfs onto your internal storage by first using &lt;code&gt;fdisk&lt;/code&gt; to repartition it, using &lt;code&gt;dd&lt;/code&gt; to copy the partition, and &lt;code&gt;resize2fs&lt;/code&gt; to have it take up the entire drive. In the future, loading the OS to RAM may be supported, but this isn&#39;t a priority at the moment. You can also just blindly copy the contents of your Shimboot USB to the internal storage without bothering to repartition:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#check the output of this to know what disk you&#39;re copying to and from&#xA;fdisk -l&#xA;&#xA;#run this from within the shimboot bootloader&#xA;#this assumes the usb drive is on sda and internal storage is on mmcblk1&#xA;dd if=/dev/sda of=/dev/mmcblk1 bs=1M oflag=direct status=progress&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;GPU acceleration isn&#39;t working, how can I fix this?&lt;/h4&gt; &#xA;&lt;p&gt;If your kernel version is too old, the standard Mesa drivers will fail to load. Instead, you must download and install the &lt;code&gt;mesa-amber&lt;/code&gt; drivers. Run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install libglx-amber0 libegl-amber0&#xA;echo &#34;MESA_LOADER_DRIVER_OVERRIDE=i965&#34; | sudo tee -a /etc/environment&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may need to change &lt;code&gt;i965&lt;/code&gt; to &lt;code&gt;i915&lt;/code&gt; (or &lt;code&gt;r100&lt;/code&gt;/&lt;code&gt;r200&lt;/code&gt; for AMD hardware), depending on what GPU you have.&lt;/p&gt; &#xA;&lt;p&gt;For ARM Chromebooks, you may have to tweak the &lt;a href=&#34;https://xkcd.com/963/&#34;&gt;Xorg configuration&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;h4&gt;Can the rootfs be compressed to save space?&lt;/h4&gt; &#xA;&lt;p&gt;Compressing the Debian rootfs with a squashfs is supported, and you can do this by running the regular Debian rootfs through &lt;code&gt;./build_squashfs.sh&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo ./build_rootfs.sh data/rootfs bookworm&#xA;sudo ./build_squashfs.sh data/rootfs_compressed data/rootfs path_to_shim&#xA;sudo ./build.sh image.bin path_to_shim data/rootfs_compressed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any writes to the squashfs will persist, but they will not be compressed when saved. For the compression to be the most effective, consider pre-installing most of the software you use with &lt;code&gt;custom_packages=&lt;/code&gt; before building the squashfs.&lt;/p&gt; &#xA;&lt;p&gt;On the regular XFCE4 image, this brings the rootfs size down to 1.2GB from 3.5GB.&lt;/p&gt; &#xA;&lt;h4&gt;I can&#39;t connect to some wifi networks.&lt;/h4&gt; &#xA;&lt;p&gt;You may have to run these commands in order to connect to certain networks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nmcli connection edit &amp;lt;your connection name&amp;gt;&#xA;&amp;gt; set 802-11-wireless-security.pmf disable&#xA;&amp;gt; save&#xA;&amp;gt; activate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Steam doesn&#39;t work.&lt;/h4&gt; &#xA;&lt;p&gt;Steam should be installed using the &lt;code&gt;sudo apt install steam&lt;/code&gt; command, however it doesn&#39;t work out of the box due to security features in the shim kernel preventing the &lt;code&gt;bwrap&lt;/code&gt; library from working. See &lt;a href=&#34;https://github.com/ading2210/shimboot/issues/26#issuecomment-2151893062&#34;&gt;issue #12&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;p&gt;To get Steam running, install and run it normally. It will fail and show a message saying that &#34;Steam now requires user namespaces to be enabled.&#34; Run &lt;code&gt;fix_bwrap&lt;/code&gt; in your terminal, relaunch Steam, and it should be working again.&lt;/p&gt; &#xA;&lt;h4&gt;I broke something and the system does not boot anymore.&lt;/h4&gt; &#xA;&lt;p&gt;If the rootfs fails to boot normally, you may use the rescue mode in the bootloader to enter a shell so you can debug and fix things. You can enter this mode by typing in &lt;code&gt;rescue &amp;lt;selection&amp;gt;&lt;/code&gt; in the bootloader prompt, replacing &lt;code&gt;&amp;lt;selection&amp;gt;&lt;/code&gt; with the number that is displayed for your rootfs. For example, &lt;code&gt;rescue 3&lt;/code&gt; will enter rescue mode for the third boot option (usually Debian).&lt;/p&gt; &#xA;&lt;h2&gt;Copyright:&lt;/h2&gt; &#xA;&lt;p&gt;Shimboot is licensed under the &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.txt&#34;&gt;GNU GPL v3&lt;/a&gt;. Unless otherwise indicated, all code has been written by me, &lt;a href=&#34;https://github.com/ading2210&#34;&gt;ading2210&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Copyright Notice:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;ading2210/shimboot: Boot desktop Linux from a Chrome OS RMA shim.&#xA;Copyright (C) 2023 ading2210&#xA;&#xA;This program is free software: you can redistribute it and/or modify&#xA;it under the terms of the GNU General Public License as published by&#xA;the Free Software Foundation, either version 3 of the License, or&#xA;(at your option) any later version.&#xA;&#xA;This program is distributed in the hope that it will be useful,&#xA;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xA;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#xA;GNU General Public License for more details.&#xA;&#xA;You should have received a copy of the GNU General Public License&#xA;along with this program.  If not, see &amp;lt;https://www.gnu.org/licenses/&amp;gt;.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>jlesage/docker-firefox</title>
    <updated>2024-10-13T01:50:25Z</updated>
    <id>tag:github.com,2024-10-13:/jlesage/docker-firefox</id>
    <link href="https://github.com/jlesage/docker-firefox" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Docker container for Firefox&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Docker container for Firefox&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jlesage/docker-firefox/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/jlesage/docker-firefox.svg?logo=github&amp;amp;style=for-the-badge&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/jlesage/firefox/tags&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/jlesage/firefox/latest?logo=docker&amp;amp;style=for-the-badge&#34; alt=&#34;Docker Image Size&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/jlesage/firefox&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/jlesage/firefox?label=Pulls&amp;amp;logo=docker&amp;amp;style=for-the-badge&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/jlesage/firefox&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/stars/jlesage/firefox?label=Stars&amp;amp;logo=docker&amp;amp;style=for-the-badge&#34; alt=&#34;Docker Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jlesage/docker-firefox/actions/workflows/build-image.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/jlesage/docker-firefox/build-image.yml?logo=github&amp;amp;branch=master&amp;amp;style=for-the-badge&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://paypal.me/JocelynLeSage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-green.svg?style=for-the-badge&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project implements a Docker container for &lt;a href=&#34;https://www.mozilla.org/firefox/&#34;&gt;Firefox&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The GUI of the application is accessed through a modern web browser (no installation or configuration needed on the client side) or via any VNC client.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.mozilla.org/firefox/&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=raw.githubusercontent.com/jlesage/docker-templates/master/jlesage/images/firefox-icon.png&amp;amp;w=110&#34; alt=&#34;Firefox logo&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://www.mozilla.org/firefox/&#34;&gt;&lt;img src=&#34;https://images.placeholders.dev/?width=224&amp;amp;height=110&amp;amp;fontFamily=monospace&amp;amp;fontWeight=400&amp;amp;fontSize=52&amp;amp;text=Firefox&amp;amp;bgColor=rgba(0,0,0,0.0)&amp;amp;textColor=rgba(121,121,121,1)&#34; alt=&#34;Firefox&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Mozilla Firefox is a free and open-source web browser developed by Mozilla Foundation and its subsidiary, Mozilla Corporation.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Table of Content&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#quick-start&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#environment-variables&#34;&gt;Environment Variables&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#deployment-considerations&#34;&gt;Deployment Considerations&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#data-volumes&#34;&gt;Data Volumes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#ports&#34;&gt;Ports&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#changing-parameters-of-a-running-container&#34;&gt;Changing Parameters of a Running Container&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#docker-compose-file&#34;&gt;Docker Compose File&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#docker-image-versioning&#34;&gt;Docker Image Versioning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#docker-image-update&#34;&gt;Docker Image Update&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#synology&#34;&gt;Synology&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#unraid&#34;&gt;unRAID&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#usergroup-ids&#34;&gt;User/Group IDs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#accessing-the-gui&#34;&gt;Accessing the GUI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#security&#34;&gt;Security&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#ssvnc&#34;&gt;SSVNC&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#certificates&#34;&gt;Certificates&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#vnc-password&#34;&gt;VNC Password&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#web-authentication&#34;&gt;Web Authentication&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#configuring-users-credentials&#34;&gt;Configuring Users Credentials&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#reverse-proxy&#34;&gt;Reverse Proxy&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#routing-based-on-hostname&#34;&gt;Routing Based on Hostname&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#routing-based-on-url-path&#34;&gt;Routing Based on URL Path&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#shell-access&#34;&gt;Shell Access&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#allowing-the-membarrier-system-call&#34;&gt;Allowing the membarrier System Call&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#sound-support&#34;&gt;Sound Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#setting-firefox-preferences-via-environment-variables&#34;&gt;Setting Firefox Preferences Via Environment Variables&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#crashes&#34;&gt;Crashes&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#support-or-contact&#34;&gt;Support or Contact&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] The Docker command provided in this quick start is given as an example and parameters should be adjusted to your need.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Launch the Firefox docker container with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -d \&#xA;    --name=firefox \&#xA;    -p 5800:5800 \&#xA;    -v /docker/appdata/firefox:/config:rw \&#xA;    jlesage/firefox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/docker/appdata/firefox&lt;/code&gt;: This is where the application stores its configuration, states, log and any files needing persistency.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Browse to &lt;code&gt;http://your-host-ip:5800&lt;/code&gt; to access the Firefox GUI.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run [-d] \&#xA;    --name=firefox \&#xA;    [-e &amp;lt;VARIABLE_NAME&amp;gt;=&amp;lt;VALUE&amp;gt;]... \&#xA;    [-v &amp;lt;HOST_DIR&amp;gt;:&amp;lt;CONTAINER_DIR&amp;gt;[:PERMISSIONS]]... \&#xA;    [-p &amp;lt;HOST_PORT&amp;gt;:&amp;lt;CONTAINER_PORT&amp;gt;]... \&#xA;    jlesage/firefox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Parameter&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-d&lt;/td&gt; &#xA;   &lt;td&gt;Run the container in the background. If not set, the container runs in the foreground.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-e&lt;/td&gt; &#xA;   &lt;td&gt;Pass an environment variable to the container. See the &lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#environment-variables&#34;&gt;Environment Variables&lt;/a&gt; section for more details.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-v&lt;/td&gt; &#xA;   &lt;td&gt;Set a volume mapping (allows to share a folder/file between the host and the container). See the &lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#data-volumes&#34;&gt;Data Volumes&lt;/a&gt; section for more details.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-p&lt;/td&gt; &#xA;   &lt;td&gt;Set a network port mapping (exposes an internal container port to the host). See the &lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#ports&#34;&gt;Ports&lt;/a&gt; section for more details.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Environment Variables&lt;/h3&gt; &#xA;&lt;p&gt;To customize some properties of the container, the following environment variables can be passed via the &lt;code&gt;-e&lt;/code&gt; parameter (one for each variable). Value of this parameter has the format &lt;code&gt;&amp;lt;VARIABLE_NAME&amp;gt;=&amp;lt;VALUE&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;USER_ID&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ID of the user the application runs as. See &lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#usergroup-ids&#34;&gt;User/Group IDs&lt;/a&gt; to better understand when this should be set.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1000&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GROUP_ID&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ID of the group the application runs as. See &lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#usergroup-ids&#34;&gt;User/Group IDs&lt;/a&gt; to better understand when this should be set.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1000&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SUP_GROUP_IDS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Comma-separated list of supplementary group IDs of the application.&lt;/td&gt; &#xA;   &lt;td&gt;(no value)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;UMASK&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Mask that controls how permissions are set for newly created files and folders. The value of the mask is in octal notation. By default, the default umask value is &lt;code&gt;0022&lt;/code&gt;, meaning that newly created files and folders are readable by everyone, but only writable by the owner. See the online umask calculator at &lt;a href=&#34;http://wintelguy.com/umask-calc.pl&#34;&gt;http://wintelguy.com/umask-calc.pl&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0022&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;LANG&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set the &lt;a href=&#34;https://en.wikipedia.org/wiki/Locale_(computer_software)&#34;&gt;locale&lt;/a&gt;, which defines the application&#39;s language, &lt;strong&gt;if supported&lt;/strong&gt;. Format of the locale is &lt;code&gt;language[_territory][.codeset]&lt;/code&gt;, where language is an &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes&#34;&gt;ISO 639 language code&lt;/a&gt;, territory is an &lt;a href=&#34;https://en.wikipedia.org/wiki/ISO_3166-1#Current_codes&#34;&gt;ISO 3166 country code&lt;/a&gt; and codeset is a character set, like &lt;code&gt;UTF-8&lt;/code&gt;. For example, Australian English using the UTF-8 encoding is &lt;code&gt;en_AU.UTF-8&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;en_US.UTF-8&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;TZ&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/List_of_tz_database_time_zones&#34;&gt;TimeZone&lt;/a&gt; used by the container. Timezone can also be set by mapping &lt;code&gt;/etc/localtime&lt;/code&gt; between the host and the container.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Etc/UTC&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;KEEP_APP_RUNNING&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When set to &lt;code&gt;1&lt;/code&gt;, the application will be automatically restarted when it crashes or terminates.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;APP_NICENESS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Priority at which the application should run. A niceness value of -20 is the highest priority and 19 is the lowest priority. The default niceness value is 0. &lt;strong&gt;NOTE&lt;/strong&gt;: A negative niceness (priority increase) requires additional permissions. In this case, the container should be run with the docker option &lt;code&gt;--cap-add=SYS_NICE&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;INSTALL_PACKAGES&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Space-separated list of packages to install during the startup of the container. List of available packages can be found at &lt;a href=&#34;https://mirrors.alpinelinux.org&#34;&gt;https://mirrors.alpinelinux.org&lt;/a&gt;. &lt;strong&gt;ATTENTION&lt;/strong&gt;: Container functionality can be affected when installing a package that overrides existing container files (e.g. binaries).&lt;/td&gt; &#xA;   &lt;td&gt;(no value)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PACKAGES_MIRROR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Mirror of the repository to use when installing packages. List of mirrors is available at &lt;a href=&#34;https://mirrors.alpinelinux.org&#34;&gt;https://mirrors.alpinelinux.org&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;(no value)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CONTAINER_DEBUG&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set to &lt;code&gt;1&lt;/code&gt; to enable debug logging.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;DISPLAY_WIDTH&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Width (in pixels) of the application&#39;s window.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1920&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;DISPLAY_HEIGHT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Height (in pixels) of the application&#39;s window.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1080&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;DARK_MODE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When set to &lt;code&gt;1&lt;/code&gt;, dark mode is enabled for the application.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;WEB_AUDIO&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When set to &lt;code&gt;1&lt;/code&gt;, audio support is enabled, meaning that any audio produced by the application is played through the browser. Note that audio is not supported for VNC clients.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;WEB_AUTHENTICATION&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When set to &lt;code&gt;1&lt;/code&gt;, the application&#39; GUI is protected via a login page when accessed via a web browser. Access is allowed only when providing valid credentials. &lt;strong&gt;NOTE&lt;/strong&gt;: This feature requires secure connection (&lt;code&gt;SECURE_CONNECTION&lt;/code&gt; environment variable) to be enabled.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;WEB_AUTHENTICATION_USERNAME&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Optional username to configure for the web authentication. This is a quick and easy way to configure credentials for a single user. To configure credentials in a more secure way, or to add more users, see the &lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#web-authentication&#34;&gt;Web Authentication&lt;/a&gt; section.&lt;/td&gt; &#xA;   &lt;td&gt;(no value)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;WEB_AUTHENTICATION_PASSWORD&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Optional password to configure for the web authentication. This is a quick and easy way to configure credentials for a single user. To configure credentials in a more secure way, or to add more users, see the &lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#web-authentication&#34;&gt;Web Authentication&lt;/a&gt; section.&lt;/td&gt; &#xA;   &lt;td&gt;(no value)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SECURE_CONNECTION&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When set to &lt;code&gt;1&lt;/code&gt;, an encrypted connection is used to access the application&#39;s GUI (either via a web browser or VNC client). See the &lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#security&#34;&gt;Security&lt;/a&gt; section for more details.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SECURE_CONNECTION_VNC_METHOD&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Method used to perform the secure VNC connection. Possible values are &lt;code&gt;SSL&lt;/code&gt; or &lt;code&gt;TLS&lt;/code&gt;. See the &lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#security&#34;&gt;Security&lt;/a&gt; section for more details.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;SSL&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SECURE_CONNECTION_CERTS_CHECK_INTERVAL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Interval, in seconds, at which the system verifies if web or VNC certificates have changed. When a change is detected, the affected services are automatically restarted. A value of &lt;code&gt;0&lt;/code&gt; disables the check.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;60&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;WEB_LISTENING_PORT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Port used by the web server to serve the UI of the application. This port is used internally by the container and it is usually not required to be changed. By default, a container is created with the default bridge network, meaning that, to be accessible, each internal container port must be mapped to an external port (using the &lt;code&gt;-p&lt;/code&gt; or &lt;code&gt;--publish&lt;/code&gt; argument). However, if the container is created with another network type, changing the port used by the container might be useful to prevent conflict with other services/containers. &lt;strong&gt;NOTE&lt;/strong&gt;: a value of &lt;code&gt;-1&lt;/code&gt; disables listening, meaning that the application&#39;s UI won&#39;t be accessible over HTTP/HTTPs.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;5800&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;VNC_LISTENING_PORT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Port used by the VNC server to serve the UI of the application. This port is used internally by the container and it is usually not required to be changed. By default, a container is created with the default bridge network, meaning that, to be accessible, each internal container port must be mapped to an external port (using the &lt;code&gt;-p&lt;/code&gt; or &lt;code&gt;--publish&lt;/code&gt; argument). However, if the container is created with another network type, changing the port used by the container might be useful to prevent conflict with other services/containers. &lt;strong&gt;NOTE&lt;/strong&gt;: a value of &lt;code&gt;-1&lt;/code&gt; disables listening, meaning that the application&#39;s UI won&#39;t be accessible over VNC.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;5900&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;VNC_PASSWORD&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Password needed to connect to the application&#39;s GUI. See the &lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#vnc-password&#34;&gt;VNC Password&lt;/a&gt; section for more details.&lt;/td&gt; &#xA;   &lt;td&gt;(no value)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ENABLE_CJK_FONT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When set to &lt;code&gt;1&lt;/code&gt;, open-source computer font &lt;code&gt;WenQuanYi Zen Hei&lt;/code&gt; is installed. This font contains a large range of Chinese/Japanese/Korean characters.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;FF_OPEN_URL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The URL to open when Firefox starts.&lt;/td&gt; &#xA;   &lt;td&gt;(no value)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;FF_KIOSK&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set to &lt;code&gt;1&lt;/code&gt; to enable kiosk mode. This mode launches Firefox in a very restricted and limited mode best suitable for public areas or customer-facing displays.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;FF_CUSTOM_ARGS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Custom argument(s) to pass when launching Firefox.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Deployment Considerations&lt;/h4&gt; &#xA;&lt;p&gt;Many tools used to manage Docker containers extract environment variables defined by the Docker image and use them to create/deploy the container. For example, this is done by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Docker application on Synology NAS&lt;/li&gt; &#xA; &lt;li&gt;The Container Station on QNAP NAS&lt;/li&gt; &#xA; &lt;li&gt;Portainer&lt;/li&gt; &#xA; &lt;li&gt;etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;While this can be useful for the user to adjust the value of environment variables to fit its needs, it can also be confusing and dangerous to keep all of them.&lt;/p&gt; &#xA;&lt;p&gt;A good practice is to set/keep only the variables that are needed for the container to behave as desired in a specific setup. If the value of variable is kept to its default value, it means that it can be removed. Keep in mind that all variables are optional, meaning that none of them is required for the container to start.&lt;/p&gt; &#xA;&lt;p&gt;Removing environment variables that are not needed provides some advantages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Prevents keeping variables that are no longer used by the container. Over time, with image updates, some variables might be removed.&lt;/li&gt; &#xA; &lt;li&gt;Allows the Docker image to change/fix a default value. Again, with image updates, the default value of a variable might be changed to fix an issue, or to better support a new feature.&lt;/li&gt; &#xA; &lt;li&gt;Prevents changes to a variable that might affect the correct function of the container. Some undocumented variables, like &lt;code&gt;PATH&lt;/code&gt; or &lt;code&gt;ENV&lt;/code&gt;, are required to be exposed, but are not meant to be changed by users. However, container management tools still show these variables to users.&lt;/li&gt; &#xA; &lt;li&gt;There is a bug with the Container Station on QNAP and the Docker application on Synology, where an environment variable without value might not be allowed. This behavior is wrong: it&#39;s absolutely fine to have a variable without value. In fact, this container does have variables without value by default. Thus, removing unneeded variables is a good way to prevent deployment issue on these devices.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Data Volumes&lt;/h3&gt; &#xA;&lt;p&gt;The following table describes data volumes used by the container. The mappings are set via the &lt;code&gt;-v&lt;/code&gt; parameter. Each mapping is specified with the following format: &lt;code&gt;&amp;lt;HOST_DIR&amp;gt;:&amp;lt;CONTAINER_DIR&amp;gt;[:PERMISSIONS]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Container path&lt;/th&gt; &#xA;   &lt;th&gt;Permissions&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/config&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;rw&lt;/td&gt; &#xA;   &lt;td&gt;This is where the application stores its configuration, states, log and any files needing persistency.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Ports&lt;/h3&gt; &#xA;&lt;p&gt;Here is the list of ports used by the container.&lt;/p&gt; &#xA;&lt;p&gt;When using the default bridge network, ports can be mapped to the host via the &lt;code&gt;-p&lt;/code&gt; parameter (one per port mapping). Each mapping is defined with the following format: &lt;code&gt;&amp;lt;HOST_PORT&amp;gt;:&amp;lt;CONTAINER_PORT&amp;gt;&lt;/code&gt;. The port number used inside the container might not be changeable, but you are free to use any port on the host side.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://docs.docker.com/config/containers/container-networking&#34;&gt;Docker Container Networking&lt;/a&gt; documentation for more details.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Port&lt;/th&gt; &#xA;   &lt;th&gt;Protocol&lt;/th&gt; &#xA;   &lt;th&gt;Mapping to host&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5800&lt;/td&gt; &#xA;   &lt;td&gt;TCP&lt;/td&gt; &#xA;   &lt;td&gt;Optional&lt;/td&gt; &#xA;   &lt;td&gt;Port to access the application&#39;s GUI via the web interface. Mapping to the host is optional if access through the web interface is not wanted. For a container not using the default bridge network, the port can be changed with the &lt;code&gt;WEB_LISTENING_PORT&lt;/code&gt; environment variable.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5900&lt;/td&gt; &#xA;   &lt;td&gt;TCP&lt;/td&gt; &#xA;   &lt;td&gt;Optional&lt;/td&gt; &#xA;   &lt;td&gt;Port to access the application&#39;s GUI via the VNC protocol. Mapping to the host is optional if access through the VNC protocol is not wanted. For a container not using the default bridge network, the port can be changed with the &lt;code&gt;VNC_LISTENING_PORT&lt;/code&gt; environment variable.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Changing Parameters of a Running Container&lt;/h3&gt; &#xA;&lt;p&gt;As can be seen, environment variables, volume and port mappings are all specified while creating the container.&lt;/p&gt; &#xA;&lt;p&gt;The following steps describe the method used to add, remove or update parameter(s) of an existing container. The general idea is to destroy and re-create the container:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Stop the container (if it is running):&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker stop firefox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Remove the container:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker rm firefox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Create/start the container using the &lt;code&gt;docker run&lt;/code&gt; command, by adjusting parameters as needed.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Since all application&#39;s data is saved under the &lt;code&gt;/config&lt;/code&gt; container folder, destroying and re-creating a container is not a problem: nothing is lost and the application comes back with the same state (as long as the mapping of the &lt;code&gt;/config&lt;/code&gt; folder remains the same).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Docker Compose File&lt;/h2&gt; &#xA;&lt;p&gt;Here is an example of a &lt;code&gt;docker-compose.yml&lt;/code&gt; file that can be used with &lt;a href=&#34;https://docs.docker.com/compose/overview/&#34;&gt;Docker Compose&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to adjust according to your needs. Note that only mandatory network ports are part of the example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &#39;3&#39;&#xA;services:&#xA;  firefox:&#xA;    image: jlesage/firefox&#xA;    ports:&#xA;      - &#34;5800:5800&#34;&#xA;    volumes:&#xA;      - &#34;/docker/appdata/firefox:/config:rw&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Docker Image Versioning&lt;/h2&gt; &#xA;&lt;p&gt;Each release of a Docker image is versioned. Prior to october 2022, the &lt;a href=&#34;https://semver.org&#34;&gt;semantic versioning&lt;/a&gt; was used as the versioning scheme.&lt;/p&gt; &#xA;&lt;p&gt;Since then, versioning scheme changed to &lt;a href=&#34;https://calver.org&#34;&gt;calendar versioning&lt;/a&gt;. The format used is &lt;code&gt;YY.MM.SEQUENCE&lt;/code&gt;, where:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;YY&lt;/code&gt; is the zero-padded year (relative to year 2000).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MM&lt;/code&gt; is the zero-padded month.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SEQUENCE&lt;/code&gt; is the incremental release number within the month (first release is 1, second is 2, etc).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Docker Image Update&lt;/h2&gt; &#xA;&lt;p&gt;Because features are added, issues are fixed, or simply because a new version of the containerized application is integrated, the Docker image is regularly updated. Different methods can be used to update the Docker image.&lt;/p&gt; &#xA;&lt;p&gt;The system used to run the container may have a built-in way to update containers. If so, this could be your primary way to update Docker images.&lt;/p&gt; &#xA;&lt;p&gt;An other way is to have the image be automatically updated with &lt;a href=&#34;https://github.com/containrrr/watchtower&#34;&gt;Watchtower&lt;/a&gt;. Watchtower is a container-based solution for automating Docker image updates. This is a &#34;set and forget&#34; type of solution: once a new image is available, Watchtower will seamlessly perform the necessary steps to update the container.&lt;/p&gt; &#xA;&lt;p&gt;Finally, the Docker image can be manually updated with these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fetch the latest image:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker pull jlesage/firefox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Stop the container:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker stop firefox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Remove the container:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker rm firefox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Create and start the container using the &lt;code&gt;docker run&lt;/code&gt; command, with the the same parameters that were used when it was deployed initially.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Synology&lt;/h3&gt; &#xA;&lt;p&gt;For owners of a Synology NAS, the following steps can be used to update a container image.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the &lt;em&gt;Docker&lt;/em&gt; application.&lt;/li&gt; &#xA; &lt;li&gt;Click on &lt;em&gt;Registry&lt;/em&gt; in the left pane.&lt;/li&gt; &#xA; &lt;li&gt;In the search bar, type the name of the container (&lt;code&gt;jlesage/firefox&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Select the image, click &lt;em&gt;Download&lt;/em&gt; and then choose the &lt;code&gt;latest&lt;/code&gt; tag.&lt;/li&gt; &#xA; &lt;li&gt;Wait for the download to complete. A notification will appear once done.&lt;/li&gt; &#xA; &lt;li&gt;Click on &lt;em&gt;Container&lt;/em&gt; in the left pane.&lt;/li&gt; &#xA; &lt;li&gt;Select your Firefox container.&lt;/li&gt; &#xA; &lt;li&gt;Stop it by clicking &lt;em&gt;Action&lt;/em&gt;-&amp;gt;&lt;em&gt;Stop&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Clear the container by clicking &lt;em&gt;Action&lt;/em&gt;-&amp;gt;&lt;em&gt;Reset&lt;/em&gt; (or &lt;em&gt;Action&lt;/em&gt;-&amp;gt;&lt;em&gt;Clear&lt;/em&gt; if you don&#39;t have the latest &lt;em&gt;Docker&lt;/em&gt; application). This removes the container while keeping its configuration.&lt;/li&gt; &#xA; &lt;li&gt;Start the container again by clicking &lt;em&gt;Action&lt;/em&gt;-&amp;gt;&lt;em&gt;Start&lt;/em&gt;. &lt;strong&gt;NOTE&lt;/strong&gt;: The container may temporarily disappear from the list while it is re-created.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;unRAID&lt;/h3&gt; &#xA;&lt;p&gt;For unRAID, a container image can be updated by following these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Select the &lt;em&gt;Docker&lt;/em&gt; tab.&lt;/li&gt; &#xA; &lt;li&gt;Click the &lt;em&gt;Check for Updates&lt;/em&gt; button at the bottom of the page.&lt;/li&gt; &#xA; &lt;li&gt;Click the &lt;em&gt;update ready&lt;/em&gt; link of the container to be updated.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;User/Group IDs&lt;/h2&gt; &#xA;&lt;p&gt;When using data volumes (&lt;code&gt;-v&lt;/code&gt; flags), permissions issues can occur between the host and the container. For example, the user within the container may not exist on the host. This could prevent the host from properly accessing files and folders on the shared volume.&lt;/p&gt; &#xA;&lt;p&gt;To avoid any problem, you can specify the user the application should run as.&lt;/p&gt; &#xA;&lt;p&gt;This is done by passing the user ID and group ID to the container via the &lt;code&gt;USER_ID&lt;/code&gt; and &lt;code&gt;GROUP_ID&lt;/code&gt; environment variables.&lt;/p&gt; &#xA;&lt;p&gt;To find the right IDs to use, issue the following command on the host, with the user owning the data volume on the host:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;id &amp;lt;username&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which gives an output like this one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;uid=1000(myuser) gid=1000(myuser) groups=1000(myuser),4(adm),24(cdrom),27(sudo),46(plugdev),113(lpadmin)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The value of &lt;code&gt;uid&lt;/code&gt; (user ID) and &lt;code&gt;gid&lt;/code&gt; (group ID) are the ones that you should be given the container.&lt;/p&gt; &#xA;&lt;h2&gt;Accessing the GUI&lt;/h2&gt; &#xA;&lt;p&gt;Assuming that container&#39;s ports are mapped to the same host&#39;s ports, the graphical interface of the application can be accessed via:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A web browser:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;http://&amp;lt;HOST IP ADDR&amp;gt;:5800&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Any VNC client:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;&amp;lt;HOST IP ADDR&amp;gt;:5900&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;By default, access to the application&#39;s GUI is done over an unencrypted connection (HTTP or VNC).&lt;/p&gt; &#xA;&lt;p&gt;Secure connection can be enabled via the &lt;code&gt;SECURE_CONNECTION&lt;/code&gt; environment variable. See the &lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#environment-variables&#34;&gt;Environment Variables&lt;/a&gt; section for more details on how to set an environment variable.&lt;/p&gt; &#xA;&lt;p&gt;When enabled, application&#39;s GUI is performed over an HTTPs connection when accessed with a browser. All HTTP accesses are automatically redirected to HTTPs.&lt;/p&gt; &#xA;&lt;p&gt;When using a VNC client, the VNC connection is performed over SSL. Note that few VNC clients support this method. &lt;a href=&#34;http://www.karlrunge.com/x11vnc/ssvnc.html&#34;&gt;SSVNC&lt;/a&gt; is one of them.&lt;/p&gt; &#xA;&lt;h3&gt;SSVNC&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.karlrunge.com/x11vnc/ssvnc.html&#34;&gt;SSVNC&lt;/a&gt; is a VNC viewer that adds encryption security to VNC connections.&lt;/p&gt; &#xA;&lt;p&gt;While the Linux version of &lt;a href=&#34;http://www.karlrunge.com/x11vnc/ssvnc.html&#34;&gt;SSVNC&lt;/a&gt; works well, the Windows version has some issues. At the time of writing, the latest version &lt;code&gt;1.0.30&lt;/code&gt; is not functional, as a connection fails with the following error:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;ReadExact: Socket error while reading&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, for your convenience, an unofficial and working version is provided here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jlesage/docker-baseimage-gui/raw/master/tools/ssvnc_windows_only-1.0.30-r1.zip&#34;&gt;https://github.com/jlesage/docker-baseimage-gui/raw/master/tools/ssvnc_windows_only-1.0.30-r1.zip&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The only difference with the official package is that the bundled version of &lt;code&gt;stunnel&lt;/code&gt; has been upgraded to version &lt;code&gt;5.49&lt;/code&gt;, which fixes the connection problems.&lt;/p&gt; &#xA;&lt;h3&gt;Certificates&lt;/h3&gt; &#xA;&lt;p&gt;Here are the certificate files needed by the container. By default, when they are missing, self-signed certificates are generated and used. All files have PEM encoded, x509 certificates.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Container Path&lt;/th&gt; &#xA;   &lt;th&gt;Purpose&lt;/th&gt; &#xA;   &lt;th&gt;Content&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/config/certs/vnc-server.pem&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;VNC connection encryption.&lt;/td&gt; &#xA;   &lt;td&gt;VNC server&#39;s private key and certificate, bundled with any root and intermediate certificates.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/config/certs/web-privkey.pem&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;HTTPs connection encryption.&lt;/td&gt; &#xA;   &lt;td&gt;Web server&#39;s private key.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/config/certs/web-fullchain.pem&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;HTTPs connection encryption.&lt;/td&gt; &#xA;   &lt;td&gt;Web server&#39;s certificate, bundled with any root and intermediate certificates.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] To prevent any certificate validity warnings/errors from the browser or VNC client, make sure to supply your own valid certificates.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Certificate files are monitored and relevant daemons are automatically restarted when changes are detected.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;VNC Password&lt;/h3&gt; &#xA;&lt;p&gt;To restrict access to your application, a password can be specified. This can be done via two methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;By using the &lt;code&gt;VNC_PASSWORD&lt;/code&gt; environment variable.&lt;/li&gt; &#xA; &lt;li&gt;By creating a &lt;code&gt;.vncpass_clear&lt;/code&gt; file at the root of the &lt;code&gt;/config&lt;/code&gt; volume. This file should contain the password in clear-text. During the container startup, content of the file is obfuscated and moved to &lt;code&gt;.vncpass&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The level of security provided by the VNC password depends on two things:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The type of communication channel (encrypted/unencrypted).&lt;/li&gt; &#xA; &lt;li&gt;How secure the access to the host is.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When using a VNC password, it is highly desirable to enable the secure connection to prevent sending the password in clear over an unencrypted channel.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!CAUTION] Password is limited to 8 characters. This limitation comes from the Remote Framebuffer Protocol &lt;a href=&#34;https://tools.ietf.org/html/rfc6143&#34;&gt;RFC&lt;/a&gt; (see section &lt;a href=&#34;https://tools.ietf.org/html/rfc6143#section-7.2.2&#34;&gt;7.2.2&lt;/a&gt;). Any characters beyond the limit are ignored.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Web Authentication&lt;/h3&gt; &#xA;&lt;p&gt;Access to the application&#39;s GUI via a web browser can be protected with a login page. When web authentication is enabled, users have to provide valid credentials, otherwise access is denied.&lt;/p&gt; &#xA;&lt;p&gt;Web authentication can be enabled by setting the &lt;code&gt;WEB_AUTHENTICATION&lt;/code&gt; environment variable to &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#environment-variables&#34;&gt;Environment Variables&lt;/a&gt; section for more details on how to set an environment variable.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] Secure connection must also be enabled to use web authentication. See the &lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#security&#34;&gt;Security&lt;/a&gt; section for more details.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Configuring Users Credentials&lt;/h4&gt; &#xA;&lt;p&gt;Two methods can be used to configure users credentials:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Via container environment variables.&lt;/li&gt; &#xA; &lt;li&gt;Via password database.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Containers environment variables can be used to quickly and easily configure a single user. Username and pasword are defined via the following environment variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;WEB_AUTHENTICATION_USERNAME&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WEB_AUTHENTICATION_PASSWORD&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#environment-variables&#34;&gt;Environment Variables&lt;/a&gt; section for more details on how to set an environment variable.&lt;/p&gt; &#xA;&lt;p&gt;The second method is more secure and allows multiple users to be configured. The usernames and password hashes are saved into a password database, located at &lt;code&gt;/config/webauth-htpasswd&lt;/code&gt; inside the container. This database file has the same format as htpasswd files of the Apache HTTP server. Note that password themselves are not saved into the database, but only their hash. The bcrypt password hashing function is used to generate hashes.&lt;/p&gt; &#xA;&lt;p&gt;Users are managed via the &lt;code&gt;webauth-user&lt;/code&gt; tool included in the container:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To add a user password: &lt;code&gt;docker exec -ti &amp;lt;container name or id&amp;gt; webauth-user add &amp;lt;username&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To update a user password: &lt;code&gt;docker exec -ti &amp;lt;container name or id&amp;gt; webauth-user update &amp;lt;username&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To remove a user: &lt;code&gt;docker exec &amp;lt;container name or id&amp;gt; webauth-user del &amp;lt;username&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To list users: &lt;code&gt;docker exec &amp;lt;container name or id&amp;gt; webauth-user user&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reverse Proxy&lt;/h2&gt; &#xA;&lt;p&gt;The following sections contain NGINX configurations that need to be added in order to reverse proxy to this container.&lt;/p&gt; &#xA;&lt;p&gt;A reverse proxy server can route HTTP requests based on the hostname or the URL path.&lt;/p&gt; &#xA;&lt;h3&gt;Routing Based on Hostname&lt;/h3&gt; &#xA;&lt;p&gt;In this scenario, each hostname is routed to a different application/container.&lt;/p&gt; &#xA;&lt;p&gt;For example, let&#39;s say the reverse proxy server is running on the same machine as this container. The server would proxy all HTTP requests sent to &lt;code&gt;firefox.domain.tld&lt;/code&gt; to the container at &lt;code&gt;127.0.0.1:5800&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here are the relevant configuration elements that would be added to the NGINX configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;map $http_upgrade $connection_upgrade {&#xA;&#x9;default upgrade;&#xA;&#x9;&#39;&#39;      close;&#xA;}&#xA;&#xA;upstream docker-firefox {&#xA;&#x9;# If the reverse proxy server is not running on the same machine as the&#xA;&#x9;# Docker container, use the IP of the Docker host here.&#xA;&#x9;# Make sure to adjust the port according to how port 5800 of the&#xA;&#x9;# container has been mapped on the host.&#xA;&#x9;server 127.0.0.1:5800;&#xA;}&#xA;&#xA;server {&#xA;&#x9;[...]&#xA;&#xA;&#x9;server_name firefox.domain.tld;&#xA;&#xA;&#x9;location / {&#xA;&#x9;        proxy_pass http://docker-firefox;&#xA;&#x9;}&#xA;&#xA;&#x9;location /websockify {&#xA;&#x9;&#x9;proxy_pass http://docker-firefox;&#xA;&#x9;&#x9;proxy_http_version 1.1;&#xA;&#x9;&#x9;proxy_set_header Upgrade $http_upgrade;&#xA;&#x9;&#x9;proxy_set_header Connection $connection_upgrade;&#xA;&#x9;&#x9;proxy_read_timeout 86400;&#xA;&#x9;}&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Routing Based on URL Path&lt;/h3&gt; &#xA;&lt;p&gt;In this scenario, the hostname is the same, but different URL paths are used to route to different applications/containers.&lt;/p&gt; &#xA;&lt;p&gt;For example, let&#39;s say the reverse proxy server is running on the same machine as this container. The server would proxy all HTTP requests for &lt;code&gt;server.domain.tld/firefox&lt;/code&gt; to the container at &lt;code&gt;127.0.0.1:5800&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here are the relevant configuration elements that would be added to the NGINX configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;map $http_upgrade $connection_upgrade {&#xA;&#x9;default upgrade;&#xA;&#x9;&#39;&#39;      close;&#xA;}&#xA;&#xA;upstream docker-firefox {&#xA;&#x9;# If the reverse proxy server is not running on the same machine as the&#xA;&#x9;# Docker container, use the IP of the Docker host here.&#xA;&#x9;# Make sure to adjust the port according to how port 5800 of the&#xA;&#x9;# container has been mapped on the host.&#xA;&#x9;server 127.0.0.1:5800;&#xA;}&#xA;&#xA;server {&#xA;&#x9;[...]&#xA;&#xA;&#x9;location = /firefox {return 301 $scheme://$http_host/firefox/;}&#xA;&#x9;location /firefox/ {&#xA;&#x9;&#x9;proxy_pass http://docker-firefox/;&#xA;&#x9;&#x9;# Uncomment the following line if your Nginx server runs on a port that&#xA;&#x9;&#x9;# differs from the one seen by external clients.&#xA;&#x9;&#x9;#port_in_redirect off;&#xA;&#x9;&#x9;location /firefox/websockify {&#xA;&#x9;&#x9;&#x9;proxy_pass http://docker-firefox/websockify/;&#xA;&#x9;&#x9;&#x9;proxy_http_version 1.1;&#xA;&#x9;&#x9;&#x9;proxy_set_header Upgrade $http_upgrade;&#xA;&#x9;&#x9;&#x9;proxy_set_header Connection $connection_upgrade;&#xA;&#x9;&#x9;&#x9;proxy_read_timeout 86400;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Shell Access&lt;/h2&gt; &#xA;&lt;p&gt;To get shell access to the running container, execute the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker exec -ti CONTAINER sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where &lt;code&gt;CONTAINER&lt;/code&gt; is the ID or the name of the container used during its creation.&lt;/p&gt; &#xA;&lt;h2&gt;Allowing the membarrier System Call&lt;/h2&gt; &#xA;&lt;p&gt;To properly work, recent versions of Firefox need the &lt;code&gt;membarrier&lt;/code&gt; system call. Without it, tabs would frequently crash.&lt;/p&gt; &#xA;&lt;p&gt;Docker uses &lt;a href=&#34;https://docs.docker.com/engine/security/seccomp/&#34;&gt;seccomp profile&lt;/a&gt; to restrict system calls available to the container. Before Docker version &lt;code&gt;20.10.0&lt;/code&gt;, the &lt;code&gt;membarrier&lt;/code&gt; system call was not allowed in the default profile. If you run a such version, you can use one of the following solutions, from the most to the least secure, to provide the container permission to use this sytem call:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run the container with a custom seccomp profile allowing the &lt;code&gt;membarrier&lt;/code&gt; system call. The &lt;a href=&#34;https://github.com/moby/moby/raw/master/profiles/seccomp/default.json&#34;&gt;latest official seccomp profile&lt;/a&gt; can be used. Download the file and then add the following parameter when creating the container: &lt;code&gt;--security-opt seccomp=/path/to/seccomp_profile.json&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run the container without the default seccomp profile (thus allowing all system calls). Use the following parameter when creating the container: &lt;code&gt;--security-opt seccomp=unconfined&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run the container in privileged mode. This effectively disables usage of seccomp. Add the &lt;code&gt;--privileged&lt;/code&gt; parameter when creating the container.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Sound Support&lt;/h2&gt; &#xA;&lt;p&gt;For Firefox to be able to use the audio device available on the host, &lt;code&gt;/dev/snd&lt;/code&gt; must be exposed to the container by adding the &lt;code&gt;--device /dev/snd&lt;/code&gt; parameter to the &lt;code&gt;docker run&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h2&gt;Setting Firefox Preferences Via Environment Variables&lt;/h2&gt; &#xA;&lt;p&gt;Firefox preferences can be set via environment variables passed to the container. During the startup, a script process all these variables and modify the preference file accordingly.&lt;/p&gt; &#xA;&lt;p&gt;The name of the environment variable must start with &lt;code&gt;FF_PREF_&lt;/code&gt;, followed by a string of your choice. For example, &lt;code&gt;FF_PREF_MY_PREF&lt;/code&gt; is a valid name.&lt;/p&gt; &#xA;&lt;p&gt;The content of the variable should be in the format &lt;code&gt;NAME=VAL&lt;/code&gt;, where &lt;code&gt;NAME&lt;/code&gt; is the name of the preference (as found in the &lt;code&gt;about:config&lt;/code&gt; page) and &lt;code&gt;VAL&lt;/code&gt; is its value. A value can be one of the following types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;string&lt;/li&gt; &#xA; &lt;li&gt;integer&lt;/li&gt; &#xA; &lt;li&gt;boolean&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is important to note that a value of type &lt;code&gt;string&lt;/code&gt; should be surrounded by double quotes. Other types don&#39;t need them.&lt;/p&gt; &#xA;&lt;p&gt;For example, to set the &lt;code&gt;network.proxy.http&lt;/code&gt; preference, one would pass the environment variable to the container by adding the following argument to the &lt;code&gt;docker run&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-e &#34;FF_PREF_HTTP_PROXY=network.proxy.http=\&#34;proxy.example.com\&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If a preference needs to be &lt;em&gt;removed&lt;/em&gt;, its value should be set to &lt;code&gt;UNSET&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-e &#34;FF_PREF_HTTP_PROXY=network.proxy.http=UNSET&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: This is an advanced usage and it is recommended to set preferences via Firefox directly.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;Crashes&lt;/h3&gt; &#xA;&lt;p&gt;If Firefox is crashing frequently, make sure that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;membarrier&lt;/code&gt; system call is not blocked by Docker. See the &lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-firefox/master/#allowing-the-membarrier-system-call&#34;&gt;Allowing the membarrier System Call&lt;/a&gt; for more details.&lt;/li&gt; &#xA; &lt;li&gt;Make sure the kernel of your Linux distribution is up-to-date.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support or Contact&lt;/h2&gt; &#xA;&lt;p&gt;Having troubles with the container or have questions? Please &lt;a href=&#34;https://github.com/jlesage/docker-firefox/issues&#34;&gt;create a new issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For other great Dockerized applications, see &lt;a href=&#34;https://jlesage.github.io/docker-apps&#34;&gt;https://jlesage.github.io/docker-apps&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hcengineering/huly-selfhost</title>
    <updated>2024-10-13T01:50:25Z</updated>
    <id>tag:github.com,2024-10-13:/hcengineering/huly-selfhost</id>
    <link href="https://github.com/hcengineering/huly-selfhost" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Huly for Self Hosting&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Huly Self-Hosted&lt;/h1&gt; &#xA;&lt;p&gt;Please use this README if you want to deploy Huly on your server with &lt;code&gt;docker compose&lt;/code&gt;. I&#39;m using a Basic Droplet on Digital Ocean with Ubuntu 23.10, but these instructions can be easily adapted for any Linux distribution.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Huly is quite resource-heavy, so I recommend using a Droplet with 2 vCPUs and 4GB of RAM. Droplets with less RAM may stop responding or fail.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you prefer Kubernetes deployment, there is a sample Kubernetes configuration under &lt;a href=&#34;https://raw.githubusercontent.com/hcengineering/huly-selfhost/main/kube&#34;&gt;kube&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Installing &lt;code&gt;nginx&lt;/code&gt; and &lt;code&gt;docker&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;First, let&#39;s install &lt;code&gt;nginx&lt;/code&gt; and &lt;code&gt;docker&lt;/code&gt; using the commands below if you have not already installed them on your machine.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt update&#xA;$ sudo apt install nginx&#xA;$ sudo snap install docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Clone the &lt;code&gt;huly-selfhost&lt;/code&gt; repository and configure &lt;code&gt;nginx&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Next, let&#39;s clone the &lt;code&gt;huly-selfhost&lt;/code&gt; repository and configure the server address. &lt;em&gt;Please replace &lt;strong&gt;x.y.z.w&lt;/strong&gt; with your server&#39;s IP address&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/hcengineering/huly-selfhost.git&#xA;$ cd huly-selfhost&#xA;$ ./setup.sh x.y.z.w # Replace x.y.z.w with your server&#39;s IP address&#xA;$ sudo ln -s $(pwd)/nginx.conf /etc/nginx/sites-enabled/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Now we&#39;re ready to run Huly&lt;/h2&gt; &#xA;&lt;p&gt;Finally, let&#39;s restart &lt;code&gt;nginx&lt;/code&gt; and run Huly with &lt;code&gt;docker compose&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo systemctl restart nginx&#xA;$ sudo docker compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, launch your web browser and enjoy Huly!&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;When exposing your self-hosted Huly deployment to the internet, it&#39;s crucial to implement some security measures to protect your server and data.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Do not expose MongoDB, MinIO, and Elastic services to the internet. Huly does not require them to be accessible from the internet.&lt;/li&gt; &#xA; &lt;li&gt;It is highly recommended to change the default credentials. By default the services, mentioned above, require no authentication, or use default well-known credentials.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Generating Public and Private VAPID keys for front-end&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll need &lt;code&gt;Node.js&lt;/code&gt; installed on your machine. Installing &lt;code&gt;npm&lt;/code&gt; on Debian based distro:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install npm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install web-push using npm&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo npm install -g web-push&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generate VAPID Keys. Run the following command to generate a VAPID key pair:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;web-push generate-vapid-keys &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will generate both keys that looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;=======================================&#xA;&#xA;Public Key:&#xA;sdfgsdgsdfgsdfggsdf&#xA;&#xA;Private Key:&#xA;asdfsadfasdfsfd&#xA;&#xA;=======================================&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Keep these keys secure, as you will need them to set up your push notification service on the server.&lt;/p&gt; &#xA;&lt;p&gt;Add these keys into &lt;code&gt;compose.yaml&lt;/code&gt; in section &lt;code&gt;services:front:environnement&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- PUSH_PUBLIC_KEY=your public key&#xA;- PUSH_PRIVATE_KEY=your private key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configure OpenId Connect&lt;/h2&gt; &#xA;&lt;p&gt;You can configure a Huly instance to authorize users (sign-in/sign-up) using an OpenID Connect identity provider (IdP).&lt;/p&gt; &#xA;&lt;h3&gt;On the IdP side&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a new OpenID application.&lt;/li&gt; &#xA; &lt;li&gt;Configure user access to the application as needed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;On the Huly side&lt;/h3&gt; &#xA;&lt;p&gt;Specify the following environment variables (provided by the IdP) for the account service:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OPENID_CLIENT_ID&lt;/li&gt; &#xA; &lt;li&gt;OPENID_CLIENT_SECRET&lt;/li&gt; &#xA; &lt;li&gt;OPENID_ISSUER&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Ensure you have configured or add the following environment variable to the front service:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ACCOUNTS_URL (This should contain the URL of the account service, accessible from the client side.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: Once all the required environment variables are configured, you will see an additional button on the sign-in/sign-up pages.&lt;/p&gt;</summary>
  </entry>
</feed>