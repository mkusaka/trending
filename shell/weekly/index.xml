<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-19T02:05:41Z</updated>
  <subtitle>Weekly Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>shawwn/llama-dl</title>
    <updated>2023-03-19T02:05:41Z</updated>
    <id>tag:github.com,2023-03-19:/shawwn/llama-dl</id>
    <link href="https://github.com/shawwn/llama-dl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;High-speed download of LLaMA, Facebook&#39;s 65B parameter GPT model&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;llama-dl&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/anitakirkovska/status/1632447982720131074&#34;&gt;&lt;img width=&#34;310&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/59632/222979421-290299aa-b34f-4f3a-97c7-23332fe12c36.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=35026902&#34;&gt;HN discussion&lt;/a&gt; | &lt;a href=&#34;https://twitter.com/theshawwn/status/1632238214529400832&#34;&gt;Twitter announcement&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update (March 7, 3:35 PM CST)&lt;/strong&gt;: Looking to inference from the model? See &lt;a href=&#34;https://github.com/shawwn/llama-dl/issues/1#issuecomment-1458870564&#34;&gt;https://github.com/shawwn/llama-dl/issues/1#issuecomment-1458870564&lt;/a&gt; to use the improved sampler. (Facebook&#39;s sampler was using poor defaults, so no one was able to get anything good out of the model till now.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update (March 5, 12:52 PM CST)&lt;/strong&gt;: &lt;a href=&#34;https://twitter.com/anitakirkovska&#34;&gt;@anitakirkovska&lt;/a&gt; let us use their fabulous llama photo. If you happen to like the new header image as much as I do, be sure to check out their &lt;a href=&#34;https://www.theprompt.io/&#34;&gt;AI newsletter&lt;/a&gt; and their &lt;a href=&#34;https://twitter.com/anitakirkovska/status/1632447982720131074&#34;&gt;tweets about us&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update (March 5, 9:51 AM CST)&lt;/strong&gt;: HN user MacsHeadroom left a &lt;a href=&#34;https://news.ycombinator.com/item?id=35029766&#34;&gt;valuable comment&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I&#39;m running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai&lt;/p&gt; &#xA; &lt;p&gt;The output is at least as good as davinci.&lt;/p&gt; &#xA; &lt;p&gt;I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that&#39;s a different problem.)&lt;/p&gt; &#xA; &lt;p&gt;I&#39;ve had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Intro&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains a high-speed download of LLaMA, Facebook&#39;s 65B parameter model that was recently made available via torrent. (Discussion: &lt;a href=&#34;https://news.ycombinator.com/item?id=35007978&#34;&gt;Facebook LLAMA is being openly distributed via torrents&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;It downloads all model weights (7B, 13B, 30B, 65B) in less than two hours on a Chicago Ubuntu server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;real    98m12.980s&#xA;user    8m8.916s&#xA;sys     5m7.259s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This works out to 40MB/s (235164838073 bytes in 5892 seconds).&lt;/p&gt; &#xA;&lt;p&gt;Personally, I just wanted to &lt;code&gt;curl&lt;/code&gt; the weights instead of dealing with a torrent. The fact that it&#39;s several times faster was just a nice bonus.&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;To download all model weights, &lt;code&gt;cd&lt;/code&gt; into the directory you want them, then run this:&lt;/p&gt; &#xA;&lt;p&gt;Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -o- https://raw.githubusercontent.com/shawwn/llama-dl/56f50b96072f42fb2520b1ad5a1d6ef30351f23c/llama.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Mac:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install bash&#xA;brew install wget&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -o- https://raw.githubusercontent.com/shawwn/llama-dl/56f50b96072f42fb2520b1ad5a1d6ef30351f23c/llama.sh | $(brew --prefix)/bin/bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Sorry mac users; they use some array syntax in the script that isn&#39;t supported on the version of bash that ships with Mac.)&lt;/p&gt; &#xA;&lt;p&gt;Running random bash scripts generally isn&#39;t a good idea, but I&#39;ll stake my personal reputation on the fact that this link is safe. (It points to a specific SHA-1 hash rather than &lt;a href=&#34;https://raw.githubusercontent.com/shawwn/llama-dl/main/llama.sh&#34;&gt;https://raw.githubusercontent.com/shawwn/llama-dl/main/llama.sh&lt;/a&gt; so that it&#39;s still safe even in the event that my repo or account got compromised.)&lt;/p&gt; &#xA;&lt;h2&gt;How much space do I need?&lt;/h2&gt; &#xA;&lt;p&gt;219G (235164838073 bytes) total. &lt;a href=&#34;https://gist.github.com/shawwn/bddb2f91aa45fbcdc0dd105d88816e75&#34;&gt;Here&#39;s a file list&lt;/a&gt; with sizes for each.&lt;/p&gt; &#xA;&lt;h2&gt;How do I know this is safe?&lt;/h2&gt; &#xA;&lt;p&gt;I ran this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir LLaMA&#xA;cd LLaMA&#xA;time curl -o- https://raw.githubusercontent.com/shawwn/llama-dl/56f50b96072f42fb2520b1ad5a1d6ef30351f23c/llama.sh | bash&#xA;cd ..&#xA;webtorrent &#39;magnet:?xt=urn:btih:b8287ebfa04f879b048d4d4404108cf3e8014352&amp;amp;dn=LLaMA&amp;amp;tr=udp%3a%2f%2ftracker.opentrackr.org%3a1337%2fannounce&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/webtorrent/webtorrent-cli&#34;&gt;Webtorrent&lt;/a&gt; began seeding immediately, which means every file is identical to what you would&#39;ve gotten via the torrent. So this is just a faster version of the torrent.&lt;/p&gt; &#xA;&lt;img width=&#34;310&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/59632/222940942-0051a645-b561-4f0b-878c-3d195354d526.png&#34;&gt; &#xA;&lt;img width=&#34;310&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/59632/222941107-b4ef0b21-3fa7-40d1-ae56-cbe385e6ac00.png&#34;&gt; &#xA;&lt;h2&gt;How much faster? (Updated)&lt;/h2&gt; &#xA;&lt;p&gt;Roughly 3.6x. As of March 4 2023, the torrent seems to download at around 11MB/s, which implies a download time of around 6 hours. (Help seed it, if you can.)&lt;/p&gt; &#xA;&lt;img width=&#34;300&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/59632/222940992-f037b12c-c077-4136-8960-b2b1667ddc79.png&#34;&gt; &#xA;&lt;h2&gt;Will I get in trouble for using this download link?&lt;/h2&gt; &#xA;&lt;p&gt;I doubt it. This is using the download link that was leaked in the original torrent. (i.e. the leaker accidentally leaked their own unique download link that Facebook sent them.)&lt;/p&gt; &#xA;&lt;p&gt;Technically, it may be illegal to knowingly use a private download link that was intended for someone else. Realistically, Facebook would risk their ML reputation by going after people who are merely trying to use what they themselves advertise as &#34;open source.&#34;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Facebook shut off the link a couple hours after this repo went live. I mirrored everything to R2 and updated the script to point to that instead.&lt;/p&gt; &#xA;&lt;p&gt;Note that LLaMA was released under a &lt;a href=&#34;https://github.com/facebookresearch/llama/raw/main/MODEL_CARD.md&#34;&gt;&#34;non-commercial bespoke license&#34;&lt;/a&gt;. Interestingly, Nvidia had a similar arrangement for StyleGAN, but that didn&#39;t stop Artbreeder from using it anyway. Nvidia never seemed to care enough to go after them. But if you &lt;a href=&#34;https://github.com/shawwn/openai-server&#34;&gt;launch your own OpenAI API&lt;/a&gt; and start charging money, don&#39;t be surprised when Facebook&#39;s lawyers come knocking.&lt;/p&gt; &#xA;&lt;h2&gt;Final thoughts&lt;/h2&gt; &#xA;&lt;p&gt;I was shocked that this script was distributed with the original torrent, and that no one seemed to notice (a) that it still works, and (b) is almost 20x faster than the torrent method. I was impatient and curious to try to run 65B on an 8xA100 cluster, so I didn&#39;t want to wait till tomorrow and started poking around, which is when I found this. I decided to just tweet it out and let you, fellow scientists and hackers, enjoy it before Facebook notices and shuts it off.&lt;/p&gt; &#xA;&lt;p&gt;&#34;Power to the people&#34; is an overused trope, but as a research scientist, I feel it&#39;s important to let individual hackers be able to experiment with the same tools, techniques, and systems that professional ML researchers are fortunate to have access to. This is a tricky situation, because at some point between now and 10 years from now, this might become dangerous -- AI alarmists often ask &#34;Would you want random people experimenting with nuclear weapons in their basement?&#34; My answer is &#34;No, but we&#39;re not there yet.&#34;&lt;/p&gt; &#xA;&lt;p&gt;Word on Twitter is that LLaMA&#39;s samples seem worse than GPT-3 by a large margin, but then I realized no one has really been able to try the full 65B model yet, for a combination of reasons. (Mostly lack of access to 8xA100 hardware.) So I decided to try it out for myself and see.&lt;/p&gt; &#xA;&lt;p&gt;Even if it&#39;s GPT-3 level, the fact is, LLaMA is already openly available. The torrent isn&#39;t going anywhere. So my own thoughts on this are mostly irrelevant; determined hackers can get it themselves anyway.&lt;/p&gt; &#xA;&lt;p&gt;But for what it&#39;s worth, my personal opinion is that LLaMA probably isn&#39;t OpenAI-grade -- there&#39;s a big difference between training a model in an academic setting vs when your entire company depends on it for wide-scale commercial success. I wasn&#39;t impressed that 30B didn&#39;t seem to know who Captain Picard was.&lt;/p&gt; &#xA;&lt;p&gt;People have already started decrying this leak as dangerous. But everyone used to say the same thing about 1.5B. (In fact, the allure of 1.5B&#39;s grandiose claims was what drove me to take ML seriously in 2019.) Turns out, four years later, no one really cares about 1.5B anymore, and it certainly didn&#39;t cause wide-scale societal harm. I doubt LLaMA will either.&lt;/p&gt; &#xA;&lt;p&gt;2023 will be interesting. I can&#39;t wait for 2024.&lt;/p&gt; &#xA;&lt;p&gt;Signed with love,&lt;/p&gt; &#xA;&lt;p&gt;Shawn Presser&lt;/p&gt; &#xA;&lt;p&gt;twitter: &lt;a href=&#34;https://twitter.com/theshawwn&#34;&gt;@theshawwn&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;HN: &lt;a href=&#34;https://news.ycombinator.com/user?id=sillysaurusx&#34;&gt;sillysaurusx&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>drduh/YubiKey-Guide</title>
    <updated>2023-03-19T02:05:41Z</updated>
    <id>tag:github.com,2023-03-19:/drduh/YubiKey-Guide</id>
    <link href="https://github.com/drduh/YubiKey-Guide" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Guide to using YubiKey for GPG and SSH&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This is a guide to using &lt;a href=&#34;https://www.yubico.com/products/yubikey-hardware/&#34;&gt;YubiKey&lt;/a&gt; as a &lt;a href=&#34;https://security.stackexchange.com/questions/38924/how-does-storing-gpg-ssh-private-keys-on-smart-cards-compare-to-plain-usb-drives&#34;&gt;SmartCard&lt;/a&gt; for storing GPG encryption, signing and authentication keys, which can also be used for SSH. Many of the principles in this document are applicable to other smart card devices.&lt;/p&gt; &#xA;&lt;p&gt;Keys stored on YubiKey are &lt;a href=&#34;http://web.archive.org/web/20201125172759/https://support.yubico.com/hc/en-us/articles/360016614880-Can-I-Duplicate-or-Back-Up-a-YubiKey-&#34;&gt;non-exportable&lt;/a&gt; (as opposed to file-based keys that are stored on disk) and are convenient for everyday use. Instead of having to remember and enter passphrases to unlock SSH/GPG keys, YubiKey needs only a physical touch after being unlocked with a PIN. All signing and encryption operations happen on the card, rather than in OS memory.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt; &lt;a href=&#34;https://github.com/drduh/Purse&#34;&gt;drduh/Purse&lt;/a&gt; is a password manager which uses GPG and YubiKey to securely store and read credentials.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Security Note&lt;/strong&gt;: If you followed this guide before Jan 2021, your GPG &lt;em&gt;PIN&lt;/em&gt; and &lt;em&gt;Admin PIN&lt;/em&gt; may be set to their default values (&lt;code&gt;123456&lt;/code&gt; and &lt;code&gt;12345678&lt;/code&gt; respectively). This would allow an attacker to use your Yubikey or reset your PIN. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#change-pin&#34;&gt;Change PIN&lt;/a&gt; section for details on how to change your PINs.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you have a comment or suggestion, please open an &lt;a href=&#34;https://github.com/drduh/YubiKey-Guide/issues&#34;&gt;Issue&lt;/a&gt; on GitHub.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#purchase&#34;&gt;Purchase&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#prepare-environment&#34;&gt;Prepare environment&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#required-software&#34;&gt;Required software&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#debian-and-ubuntu&#34;&gt;Debian and Ubuntu&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#fedora&#34;&gt;Fedora&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#arch&#34;&gt;Arch&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#rhel7&#34;&gt;RHEL7&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#nixos&#34;&gt;NixOS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#openbsd&#34;&gt;OpenBSD&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#macos&#34;&gt;macOS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#windows&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#entropy&#34;&gt;Entropy&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#yubikey&#34;&gt;YubiKey&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#onerng&#34;&gt;OneRNG&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#creating-keys&#34;&gt;Creating keys&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#temporary-working-directory&#34;&gt;Temporary working directory&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#harden-configuration&#34;&gt;Harden configuration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#master-key&#34;&gt;Master key&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#sign-with-existing-key&#34;&gt;Sign with existing key&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#sub-keys&#34;&gt;Sub-keys&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#signing&#34;&gt;Signing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#encryption&#34;&gt;Encryption&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#authentication&#34;&gt;Authentication&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#add-extra-identities&#34;&gt;Add extra identities&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#verify&#34;&gt;Verify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#export-secret-keys&#34;&gt;Export secret keys&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#revocation-certificate&#34;&gt;Revocation certificate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#backup&#34;&gt;Backup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#export-public-keys&#34;&gt;Export public keys&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#configure-smartcard&#34;&gt;Configure Smartcard&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#enable-kdf&#34;&gt;Enable KDF&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#change-pin&#34;&gt;Change PIN&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#set-information&#34;&gt;Set information&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#transfer-keys&#34;&gt;Transfer keys&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#signing&#34;&gt;Signing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#encryption&#34;&gt;Encryption&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#authentication&#34;&gt;Authentication&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#verify-card&#34;&gt;Verify card&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#multiple-yubikeys&#34;&gt;Multiple YubiKeys&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#switching-between-two-or-more-yubikeys&#34;&gt;Switching between two or more Yubikeys&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#cleanup&#34;&gt;Cleanup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#using-keys&#34;&gt;Using keys&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#rotating-keys&#34;&gt;Rotating keys&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#setup-environment&#34;&gt;Setup environment&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#renewing-sub-keys&#34;&gt;Renewing sub-keys&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#rotating-keys&#34;&gt;Rotating keys&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#adding-notations&#34;&gt;Adding notations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#ssh&#34;&gt;SSH&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#create-configuration&#34;&gt;Create configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#replace-agents&#34;&gt;Replace agents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#copy-public-key&#34;&gt;Copy public key&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#optional-save-public-key-for-identity-file-configuration&#34;&gt;(Optional) Save public key for identity file configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#connect-with-public-key-authentication&#34;&gt;Connect with public key authentication&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#import-ssh-keys&#34;&gt;Import SSH keys&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#remote-machines-ssh-agent-forwarding&#34;&gt;Remote Machines (SSH Agent Forwarding)&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#use-ssh-agent&#34;&gt;Use ssh-agent&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#use-sgpg-agentssh&#34;&gt;Use S.gpg-agent.ssh&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#chained-ssh-agent-forwarding&#34;&gt;Chained SSH Agent Forwarding&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#github&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#openbsd&#34;&gt;OpenBSD&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#windows&#34;&gt;Windows&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#wsl&#34;&gt;WSL&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#use-ssh-agent-or-use-sweasel-pegant&#34;&gt;Use ssh-agent or use S.weasel-pegant&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#wsl-configuration&#34;&gt;WSL configuration&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#remote-host-configuration&#34;&gt;Remote host configuration&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#macos&#34;&gt;macOS&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#remote-machines-gpg-agent-forwarding&#34;&gt;Remote Machines (GPG Agent Forwarding)&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#steps-for-older-distributions&#34;&gt;Steps for older distributions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#chained-gpg-agent-forwarding&#34;&gt;Chained GPG Agent Forwarding&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#using-multiple-keys&#34;&gt;Using Multiple Keys&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#require-touch&#34;&gt;Require touch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#email&#34;&gt;Email&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#mailvelope-on-macos&#34;&gt;Mailvelope on macOS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#mutt&#34;&gt;Mutt&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#reset&#34;&gt;Reset&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#recovery-after-reset&#34;&gt;Recovery after reset&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#notes&#34;&gt;Notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#alternatives&#34;&gt;Alternatives&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#create-keys-with-batch&#34;&gt;Create keys with batch&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#links&#34;&gt;Links&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Purchase&lt;/h1&gt; &#xA;&lt;p&gt;All YubiKeys except the blue &#34;security key&#34; model and the &#34;Bio Series - FIDO Edition&#34; are compatible with this guide. NEO models are limited to 2048-bit RSA keys. Compare YubiKeys &lt;a href=&#34;https://www.yubico.com/products/yubikey-hardware/compare-products-series/&#34;&gt;here&lt;/a&gt;. A list of the YubiKeys compatible with OpenPGP is available &lt;a href=&#34;https://support.yubico.com/hc/en-us/articles/360013790259-Using-Your-YubiKey-with-OpenPGP&#34;&gt;here&lt;/a&gt;. In May 2021, Yubico also released a press release and blog post about supporting resident ssh keys on their Yubikeys including blue &#34;security key 5 NFC&#34; with OpenSSH 8.2 or later, see &lt;a href=&#34;https://www.yubico.com/blog/github-now-supports-ssh-security-keys/&#34;&gt;here&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;To verify a YubiKey is genuine, open a &lt;a href=&#34;https://support.yubico.com/support/solutions/articles/15000009591-how-to-confirm-your-yubico-device-is-genuine-with-u2f&#34;&gt;browser with U2F support&lt;/a&gt; to &lt;a href=&#34;https://www.yubico.com/genuine/&#34;&gt;https://www.yubico.com/genuine/&lt;/a&gt;. Insert a Yubico device, and select &lt;em&gt;Verify Device&lt;/em&gt; to begin the process. Touch the YubiKey when prompted, and if asked, allow it to see the make and model of the device. If you see &lt;em&gt;Verification complete&lt;/em&gt;, the device is authentic.&lt;/p&gt; &#xA;&lt;p&gt;This website verifies YubiKey device attestation certificates signed by a set of Yubico certificate authorities, and helps mitigate &lt;a href=&#34;https://media.defcon.org/DEF%20CON%2025/DEF%20CON%2025%20presentations/DEF%20CON%2025%20-%20r00killah-and-securelyfitz-Secure-Tokin-and-Doobiekeys.pdf&#34;&gt;supply chain attacks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You will also need several small storage devices (microSD cards work well) for storing encrypted backups of your keys.&lt;/p&gt; &#xA;&lt;h1&gt;Prepare environment&lt;/h1&gt; &#xA;&lt;p&gt;To create cryptographic keys, a secure environment that can be reasonably assured to be free of adversarial control is recommended. Here is a general ranking of environments most to least likely to be compromised:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Daily-use operating system&lt;/li&gt; &#xA; &lt;li&gt;Virtual machine on daily-use host OS (using &lt;a href=&#34;https://virt-manager.org/&#34;&gt;virt-manager&lt;/a&gt;, VirtualBox, or VMware)&lt;/li&gt; &#xA; &lt;li&gt;Separate hardened &lt;a href=&#34;https://www.debian.org/&#34;&gt;Debian&lt;/a&gt; or &lt;a href=&#34;https://www.openbsd.org/&#34;&gt;OpenBSD&lt;/a&gt; installation which can be dual booted&lt;/li&gt; &#xA; &lt;li&gt;Live image, such as &lt;a href=&#34;https://www.debian.org/CD/live/&#34;&gt;Debian Live&lt;/a&gt; or &lt;a href=&#34;https://tails.boum.org/index.en.html&#34;&gt;Tails&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Secure hardware/firmware (&lt;a href=&#34;https://www.coreboot.org/&#34;&gt;Coreboot&lt;/a&gt;, &lt;a href=&#34;https://github.com/corna/me_cleaner&#34;&gt;Intel ME removed&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Dedicated air-gapped system with no networking capabilities&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This guide recommends using a bootable &#34;live&#34; Debian Linux image to provide such an environment, however, depending on your threat model, you may want to take fewer or more steps to secure it.&lt;/p&gt; &#xA;&lt;p&gt;To use Debian Live, download the latest image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ curl -LfO https://cdimage.debian.org/debian-cd/current-live/amd64/iso-hybrid/SHA512SUMS&#xA;&#xA;$ curl -LfO https://cdimage.debian.org/debian-cd/current-live/amd64/iso-hybrid/SHA512SUMS.sign&#xA;&#xA;$ curl -LfO https://cdimage.debian.org/debian-cd/current-live/amd64/iso-hybrid/$(awk &#39;/xfce.iso/ {print $2}&#39; SHA512SUMS)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Verify the signature of the hashes file with GPG:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg --verify SHA512SUMS.sign SHA512SUMS&#xA;gpg: Signature made Sat 17 Dec 2022 11:06:20 AM PST&#xA;gpg:                using RSA key DF9B9C49EAA9298432589D76DA87E80D6294BE9B&#xA;gpg: Can&#39;t check signature: No public key&#xA;&#xA;$ gpg --keyserver hkps://keyring.debian.org --recv DF9B9C49EAA9298432589D76DA87E80D6294BE9B&#xA;gpg: key 0xDA87E80D6294BE9B: public key &#34;Debian CD signing key &amp;lt;debian-cd@lists.debian.org&amp;gt;&#34; imported&#xA;gpg: Total number processed: 1&#xA;gpg:               imported: 1&#xA;&#xA;$ gpg --verify SHA512SUMS.sign SHA512SUMS&#xA;gpg: Signature made Sat 17 Dec 2022 11:06:20 AM PST&#xA;gpg:                using RSA key DF9B9C49EAA9298432589D76DA87E80D6294BE9B&#xA;gpg: Good signature from &#34;Debian CD signing key &amp;lt;debian-cd@lists.debian.org&amp;gt;&#34; [unknown]&#xA;gpg: WARNING: This key is not certified with a trusted signature!&#xA;gpg:          There is no indication that the signature belongs to the owner.&#xA;Primary key fingerprint: DF9B 9C49 EAA9 2984 3258  9D76 DA87 E80D 6294 BE9B&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the public key cannot be received, try changing the DNS resolver and/or use a different keyserver:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg --keyserver hkps://keyserver.ubuntu.com:443 --recv DF9B9C49EAA9298432589D76DA87E80D6294BE9B&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ensure the SHA512 hash of the live image matches the one in the signed file - if there following command produces output, it is correct:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ grep $(sha512sum debian-live-*-amd64-xfce.iso) SHA512SUMS&#xA;SHA512SUMS:f9976e2090a54667a26554267941792c293628cceb643963e425bf90449e3c0eeb616e8ededc187070910401c8ab0348fdbc3292b6d04e29dcfb472ac258a542  debian-live-11.6.0-amd64-xfce.iso&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://www.debian.org/CD/verify&#34;&gt;Verifying authenticity of Debian CDs&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;Mount a storage device and copy the image to it:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo dmesg | tail&#xA;usb-storage 3-2:1.0: USB Mass Storage device detected&#xA;scsi host2: usb-storage 3-2:1.0&#xA;scsi 2:0:0:0: Direct-Access     TS-RDF5  SD  Transcend    TS3A PQ: 0 ANSI: 6&#xA;sd 2:0:0:0: Attached scsi generic sg1 type 0&#xA;sd 2:0:0:0: [sdb] 31116288 512-byte logical blocks: (15.9 GB/14.8 GiB)&#xA;sd 2:0:0:0: [sdb] Write Protect is off&#xA;sd 2:0:0:0: [sdb] Mode Sense: 23 00 00 00&#xA;sd 2:0:0:0: [sdb] Write cache: disabled, read cache: enabled, doesn&#39;t support DPO or FUA&#xA;sdb: sdb1 sdb2&#xA;sd 2:0:0:0: [sdb] Attached SCSI removable disk&#xA;&#xA;$ sudo dd if=debian-live-*-amd64-xfce.iso of=/dev/sdb bs=4M status=progress ; sync&#xA;465+1 records in&#xA;465+1 records out&#xA;1951432704 bytes (2.0 GB, 1.8 GiB) copied, 42.8543 s, 45.5 MB/s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;OpenBSD&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ dmesg | tail -n2&#xA;sd2 at scsibus4 targ 1 lun 0: &amp;lt;TS-RDF5, SD Transcend, TS3A&amp;gt; SCSI4 0/direct removable serial.0000000000000&#xA;sd2: 15193MB, 512 bytes/sector, 31116288 sectors&#xA;&#xA;$ doas dd if=debian-live-*-amd64-xfce.iso of=/dev/rsd2c bs=4m&#xA;465+1 records in&#xA;465+1 records out&#xA;1951432704 bytes transferred in 139.125 secs (14026448 bytes/sec)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Shut down the computer and disconnect internal hard drives and all unnecessary peripheral devices. If being run within a VM, this part can be skipped as no such devices should be attached to the VM since the image will still be run as a &#34;live image&#34;.&lt;/p&gt; &#xA;&lt;h1&gt;Required software&lt;/h1&gt; &#xA;&lt;p&gt;Boot the live image and configure networking.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; If the screen locks, unlock with &lt;code&gt;user&lt;/code&gt;/&lt;code&gt;live&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Open the terminal and install required software packages.&lt;/p&gt; &#xA;&lt;h2&gt;Debian and Ubuntu&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo apt update ; sudo apt -y upgrade&#xA;&#xA;$ sudo apt -y install wget gnupg2 gnupg-agent dirmngr cryptsetup scdaemon pcscd secure-delete hopenpgp-tools yubikey-personalization&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Live Ubuntu images &lt;a href=&#34;https://github.com/drduh/YubiKey-Guide/issues/116&#34;&gt;may require modification&lt;/a&gt; to &lt;code&gt;/etc/apt/sources.list&lt;/code&gt; and may need additional packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo apt -y install libssl-dev swig libpcsclite-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Optional&lt;/strong&gt; Install the &lt;code&gt;ykman&lt;/code&gt; utility, which will allow you to enable touch policies (requires admin PIN):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo apt -y install python3-pip python3-pyscard&#xA;&#xA;$ pip3 install PyOpenSSL&#xA;&#xA;$ pip3 install yubikey-manager&#xA;&#xA;$ sudo service pcscd start&#xA;&#xA;$ ~/.local/bin/ykman openpgp info&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Fedora&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo dnf install wget&#xA;$ wget https://github.com/rpmsphere/noarch/raw/master/r/rpmsphere-release-34-2.noarch.rpm&#xA;$ sudo rpm -Uvh rpmsphere-release*rpm&#xA;&#xA;$ sudo dnf install gnupg2 dirmngr cryptsetup gnupg2-smime pcsc-tools opensc pcsc-lite secure-delete pgp-tools yubikey-personalization-gui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Arch&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo pacman -Syu gnupg pcsclite ccid hopenpgp-tools yubikey-personalization&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;RHEL7&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo yum install -y gnupg2 pinentry-curses pcsc-lite pcsc-lite-libs gnupg2-smime&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;NixOS&lt;/h2&gt; &#xA;&lt;p&gt;Generate an air-gapped NixOS LiveCD image with the given config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;# yubikey-installer.nix&#xA;let&#xA;  configuration = { config, lib, pkgs, ... }:&#xA;    with pkgs;&#xA;    let&#xA;      src = fetchGit &#34;https://github.com/drduh/YubiKey-Guide&#34;;&#xA;&#xA;      guide = &#34;${src}/README.md&#34;;&#xA;&#xA;      contrib = &#34;${src}/contrib&#34;;&#xA;&#xA;      drduhConfig = fetchGit &#34;https://github.com/drduh/config&#34;;&#xA;&#xA;      gpg-conf = &#34;${drduhConfig}/gpg.conf&#34;;&#xA;&#xA;      xserverCfg = config.services.xserver;&#xA;&#xA;      pinentryFlavour = if xserverCfg.desktopManager.lxqt.enable || xserverCfg.desktopManager.plasma5.enable then&#xA;        &#34;qt&#34;&#xA;      else if xserverCfg.desktopManager.xfce.enable then&#xA;        &#34;gtk2&#34;&#xA;      else if xserverCfg.enable || config.programs.sway.enable then&#xA;        &#34;gnome3&#34;&#xA;      else&#xA;        &#34;curses&#34;;&#xA;&#xA;      # Instead of hard-coding the pinentry program, chose the appropriate one&#xA;      # based on the environment of the image the user has chosen to build.&#xA;      gpg-agent-conf = runCommand &#34;gpg-agent.conf&#34; {} &#39;&#39;&#xA;        sed &#39;/pinentry-program/d&#39; ${drduhConfig}/gpg-agent.conf &amp;gt; $out&#xA;        echo &#34;pinentry-program ${pinentry.${pinentryFlavour}}/bin/pinentry&#34; &amp;gt;&amp;gt; $out&#xA;      &#39;&#39;;&#xA;&#xA;      view-yubikey-guide = writeShellScriptBin &#34;view-yubikey-guide&#34; &#39;&#39;&#xA;        viewer=&#34;$(type -P xdg-open || true)&#34;&#xA;        if [ -z &#34;$viewer&#34; ]; then&#xA;          viewer=&#34;${glow}/bin/glow -p&#34;&#xA;        fi&#xA;        exec $viewer &#34;${guide}&#34;&#xA;      &#39;&#39;;&#xA;&#xA;      shortcut = makeDesktopItem {&#xA;        name = &#34;yubikey-guide&#34;;&#xA;        icon = &#34;${yubikey-manager-qt}/share/ykman-gui/icons/ykman.png&#34;;&#xA;        desktopName = &#34;drduh&#39;s YubiKey Guide&#34;;&#xA;        genericName = &#34;Guide to using YubiKey for GPG and SSH&#34;;&#xA;        comment = &#34;Open the guide in a reader program&#34;;&#xA;        categories = [ &#34;Documentation&#34; ];&#xA;        exec = &#34;${view-yubikey-guide}/bin/view-yubikey-guide&#34;;&#xA;      };&#xA;&#xA;      yubikey-guide = symlinkJoin {&#xA;        name = &#34;yubikey-guide&#34;;&#xA;        paths = [ view-yubikey-guide shortcut ];&#xA;      };&#xA;&#xA;    in {&#xA;      nixpkgs.config = { allowBroken = true; };&#xA;&#xA;      isoImage.isoBaseName = lib.mkForce &#34;nixos-yubikey&#34;;&#xA;      # Uncomment this to disable compression and speed up image creation time&#xA;      #isoImage.squashfsCompression = &#34;gzip -Xcompression-level 1&#34;;&#xA;&#xA;      boot.kernelPackages = linuxPackages_latest;&#xA;      # Always copytoram so that, if the image is booted from, e.g., a&#xA;      # USB stick, nothing is mistakenly written to persistent storage.&#xA;      boot.kernelParams = [ &#34;copytoram&#34; ];&#xA;      # Secure defaults&#xA;      boot.cleanTmpDir = true;&#xA;      boot.kernel.sysctl = { &#34;kernel.unprivileged_bpf_disabled&#34; = 1; };&#xA;&#xA;      services.pcscd.enable = true;&#xA;      services.udev.packages = [ yubikey-personalization ];&#xA;&#xA;      programs = {&#xA;        ssh.startAgent = false;&#xA;        gnupg.agent = {&#xA;          enable = true;&#xA;          enableSSHSupport = true;&#xA;        };&#xA;      };&#xA;&#xA;      environment.systemPackages = [&#xA;        # Tools for backing up keys&#xA;        paperkey&#xA;        pgpdump&#xA;        parted&#xA;        cryptsetup&#xA;&#xA;        # Yubico&#39;s official tools&#xA;        yubikey-manager&#xA;        yubikey-manager-qt&#xA;        yubikey-personalization&#xA;        yubikey-personalization-gui&#xA;        yubico-piv-tool&#xA;        yubioath-desktop&#xA;&#xA;        # Testing&#xA;        ent&#xA;        (haskell.lib.justStaticExecutables haskellPackages.hopenpgp-tools)&#xA;&#xA;        # Password generation tools&#xA;        diceware&#xA;        pwgen&#xA;&#xA;        # Miscellaneous tools that might be useful beyond the scope of the guide&#xA;        cfssl&#xA;        pcsctools&#xA;&#xA;        # This guide itself (run `view-yubikey-guide` on the terminal to open it&#xA;        # in a non-graphical environment).&#xA;        yubikey-guide&#xA;      ];&#xA;&#xA;      # Disable networking so the system is air-gapped&#xA;      # Comment all of these lines out if you&#39;ll need internet access&#xA;      boot.initrd.network.enable = false;&#xA;      networking.dhcpcd.enable = false;&#xA;      networking.dhcpcd.allowInterfaces = [];&#xA;      networking.interfaces = {};&#xA;      networking.firewall.enable = true;&#xA;      networking.useDHCP = false;&#xA;      networking.useNetworkd = false;&#xA;      networking.wireless.enable = false;&#xA;      networking.networkmanager.enable = lib.mkForce false;&#xA;&#xA;      # Unset history so it&#39;s never stored&#xA;      # Set GNUPGHOME to an ephemeral location and configure GPG with the&#xA;      # guide&#39;s recommended settings.&#xA;      environment.interactiveShellInit = &#39;&#39;&#xA;        unset HISTFILE&#xA;        export GNUPGHOME=&#34;/run/user/$(id -u)/gnupg&#34;&#xA;        if [ ! -d &#34;$GNUPGHOME&#34; ]; then&#xA;          echo &#34;Creating \$GNUPGHOME…&#34;&#xA;          install --verbose -m=0700 --directory=&#34;$GNUPGHOME&#34;&#xA;        fi&#xA;        [ ! -f &#34;$GNUPGHOME/gpg.conf&#34; ] &amp;amp;&amp;amp; cp --verbose ${gpg-conf} &#34;$GNUPGHOME/gpg.conf&#34;&#xA;        [ ! -f &#34;$GNUPGHOME/gpg-agent.conf&#34; ] &amp;amp;&amp;amp; cp --verbose ${gpg-agent-conf} &#34;$GNUPGHOME/gpg-agent.conf&#34;&#xA;        echo &#34;\$GNUPGHOME is \&#34;$GNUPGHOME\&#34;&#34;&#xA;      &#39;&#39;;&#xA;&#xA;      # Copy the contents of contrib to the home directory, add a shortcut to&#xA;      # the guide on the desktop, and link to the whole repo in the documents&#xA;      # folder.&#xA;      system.activationScripts.yubikeyGuide = let&#xA;        homeDir = &#34;/home/nixos/&#34;;&#xA;        desktopDir = homeDir + &#34;Desktop/&#34;;&#xA;        documentsDir = homeDir + &#34;Documents/&#34;;&#xA;      in &#39;&#39;&#xA;        mkdir -p ${desktopDir} ${documentsDir}&#xA;        chown nixos ${homeDir} ${desktopDir} ${documentsDir}&#xA;&#xA;        cp -R ${contrib}/* ${homeDir}&#xA;        ln -sf ${yubikey-guide}/share/applications/yubikey-guide.desktop ${desktopDir}&#xA;        ln -sfT ${src} ${documentsDir}/YubiKey-Guide&#xA;      &#39;&#39;;&#xA;    };&#xA;&#xA;  nixos = import &amp;lt;nixpkgs/nixos/release.nix&amp;gt; {&#xA;    inherit configuration;&#xA;    supportedSystems = [ &#34;x86_64-linux&#34; ];&#xA;  };&#xA;&#xA;  # Choose the one you like:&#xA;  #nixos-yubikey = nixos.iso_minimal; # No graphical environment&#xA;  #nixos-yubikey = nixos.iso_gnome;&#xA;  nixos-yubikey = nixos.iso_plasma5;&#xA;&#xA;in {&#xA;  inherit nixos-yubikey;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build the installer and copy it to a USB drive.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ nix build -f yubikey-installer.nix -o installer nixos-yubikey&#xA;&#xA;$ sudo cp -v installer/iso/*.iso /dev/sdb; sync&#xA;&#39;installer/iso/nixos-yubikey-22.05beta-248980.gfedcba-x86_64-linux.iso&#39; -&amp;gt; &#39;/dev/sdb&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With this image, you won&#39;t need to manually create a &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#temporary-working-directory&#34;&gt;temporary working directory&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#harden-configuration&#34;&gt;harden the configuration&lt;/a&gt;, as it was done when creating the image.&lt;/p&gt; &#xA;&lt;h2&gt;OpenBSD&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ doas pkg_add gnupg pcsc-tools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;macOS&lt;/h2&gt; &#xA;&lt;p&gt;Download and install &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; and the following packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ brew install gnupg yubikey-personalization hopenpgp-tools ykman pinentry-mac wget&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; An additional Python package dependency may need to be installed to use &lt;a href=&#34;https://support.yubico.com/support/solutions/articles/15000012643-yubikey-manager-cli-ykman-user-guide&#34;&gt;&lt;code&gt;ykman&lt;/code&gt;&lt;/a&gt; - &lt;code&gt;pip install yubikey-manager&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;p&gt;Download and install &lt;a href=&#34;https://www.gpg4win.org/&#34;&gt;Gpg4Win&lt;/a&gt; and &lt;a href=&#34;https://putty.org&#34;&gt;PuTTY&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You may also need more recent versions of &lt;a href=&#34;https://developers.yubico.com/yubikey-personalization/Releases/&#34;&gt;yubikey-personalization&lt;/a&gt; and &lt;a href=&#34;https://developers.yubico.com/yubico-c/Releases/&#34;&gt;yubico-c&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Entropy&lt;/h1&gt; &#xA;&lt;p&gt;Generating cryptographic keys requires high-quality &lt;a href=&#34;https://www.random.org/randomness/&#34;&gt;randomness&lt;/a&gt;, measured as entropy.&lt;/p&gt; &#xA;&lt;p&gt;Most operating systems use software-based pseudorandom number generators or CPU-based hardware random number generators (HRNG).&lt;/p&gt; &#xA;&lt;p&gt;Optionally, you can use a separate hardware device like &lt;a href=&#34;https://onerng.info/onerng/&#34;&gt;OneRNG&lt;/a&gt; to &lt;a href=&#34;https://lwn.net/Articles/648550/&#34;&gt;increase the speed&lt;/a&gt; of entropy generation and possibly also the quality.&lt;/p&gt; &#xA;&lt;h2&gt;YubiKey&lt;/h2&gt; &#xA;&lt;p&gt;YubiKey firmware version 5.2.3 introduced &#34;Enhancements to OpenPGP 3.4 Support&#34; - which can optionally gather additional entropy from YubiKey via the SmartCard interface.&lt;/p&gt; &#xA;&lt;p&gt;To seed the kernel&#39;s PRNG with additional 512 bytes retrieved from the YubiKey:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#34;SCD RANDOM 512&#34; | gpg-connect-agent | sudo tee /dev/random | hexdump -C&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;OneRNG&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://wiki.archlinux.org/index.php/Rng-tools&#34;&gt;rng-tools&lt;/a&gt; software:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo apt -y install at rng-tools python3-gnupg openssl&#xA;&#xA;$ wget https://github.com/OneRNG/onerng.github.io/raw/master/sw/onerng_3.7-1_all.deb&#xA;&#xA;$ sha256sum onerng_3.7-1_all.deb&#xA;b7cda2fe07dce219a95dfeabeb5ee0f662f64ba1474f6b9dddacc3e8734d8f57  onerng_3.7-1_all.deb&#xA;&#xA;$ sudo dpkg -i onerng_3.7-1_all.deb&#xA;&#xA;$ echo &#34;HRNGDEVICE=/dev/ttyACM0&#34; | sudo tee /etc/default/rng-tools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Plug in the device and restart rng-tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo atd&#xA;&#xA;$ sudo service rng-tools restart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Creating keys&lt;/h1&gt; &#xA;&lt;h2&gt;Temporary working directory&lt;/h2&gt; &#xA;&lt;p&gt;Create a temporary directory which will be cleared on &lt;a href=&#34;https://en.wikipedia.org/wiki/Tmpfs&#34;&gt;reboot&lt;/a&gt; and set it as the GnuPG directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ export GNUPGHOME=$(mktemp -d -t gnupg_$(date +%Y%m%d%H%M)_XXX)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise, to preserve the working environment, set the GnuPG directory to your home folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ export GNUPGHOME=~/gnupg-workspace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Harden configuration&lt;/h2&gt; &#xA;&lt;p&gt;Create a hardened configuration in the temporary working directory with the following options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ wget -O $GNUPGHOME/gpg.conf https://raw.githubusercontent.com/drduh/config/master/gpg.conf&#xA;&#xA;$ grep -ve &#34;^#&#34; $GNUPGHOME/gpg.conf&#xA;personal-cipher-preferences AES256 AES192 AES&#xA;personal-digest-preferences SHA512 SHA384 SHA256&#xA;personal-compress-preferences ZLIB BZIP2 ZIP Uncompressed&#xA;default-preference-list SHA512 SHA384 SHA256 AES256 AES192 AES ZLIB BZIP2 ZIP Uncompressed&#xA;cert-digest-algo SHA512&#xA;s2k-digest-algo SHA512&#xA;s2k-cipher-algo AES256&#xA;charset utf-8&#xA;fixed-list-mode&#xA;no-comments&#xA;no-emit-version&#xA;keyid-format 0xlong&#xA;list-options show-uid-validity&#xA;verify-options show-uid-validity&#xA;with-fingerprint&#xA;require-cross-certification&#xA;no-symkey-cache&#xA;use-agent&#xA;throw-keyids&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; Disable networking for the remainder of the setup.&lt;/p&gt; &#xA;&lt;h1&gt;Master key&lt;/h1&gt; &#xA;&lt;p&gt;The first key to generate is the master key. It will be used for certification only: to issue sub-keys that are used for encryption, signing and authentication.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; The master key should be kept offline at all times and only accessed to revoke or issue new sub-keys. Keys can also be generated on the YubiKey itself to ensure no other copies exist.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll be prompted to enter and verify a passphrase - keep it handy as you&#39;ll need it multiple times later.&lt;/p&gt; &#xA;&lt;p&gt;Generate a strong passphrase which could be written down in a secure place or memorized:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg --gen-random --armor 0 24&#xA;ydOmByxmDe63u7gqx2XI9eDgpvJwibNH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use upper case letters for improved readability if passwords are written down by hand:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ LC_ALL=C tr -dc &#39;[:upper:]&#39; &amp;lt; /dev/urandom | fold -w 20 | head -n1&#xA;BSSYMUGGTJQVWZZWOPJG&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; Save this credential in a permanent, secure place as it will be needed to issue new sub-keys after expiration, and to provision additional YubiKeys, as well as to your Debian Live environment clipboard, as you&#39;ll need it several times throughout to generate keys.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt; On Linux or OpenBSD, select the password using the mouse or by double-clicking on it to copy to clipboard. Paste using the middle mouse button or &lt;code&gt;Shift&lt;/code&gt;-&lt;code&gt;Insert&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Generate a new key with GPG, selecting &lt;code&gt;(8) RSA (set your own capabilities)&lt;/code&gt;, &lt;code&gt;Certify&lt;/code&gt; capability only and &lt;code&gt;4096&lt;/code&gt; bit key size.&lt;/p&gt; &#xA;&lt;p&gt;Do &lt;strong&gt;not&lt;/strong&gt; set the master (certify) key to expire - see &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#notes&#34;&gt;Note #3&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg --expert --full-generate-key&#xA;&#xA;Please select what kind of key you want:&#xA;   (1) RSA and RSA (default)&#xA;   (2) DSA and Elgamal&#xA;   (3) DSA (sign only)&#xA;   (4) RSA (sign only)&#xA;   (7) DSA (set your own capabilities)&#xA;   (8) RSA (set your own capabilities)&#xA;   (9) ECC and ECC&#xA;  (10) ECC (sign only)&#xA;  (11) ECC (set your own capabilities)&#xA;  (13) Existing key&#xA;Your selection? 8&#xA;&#xA;Possible actions for a RSA key: Sign Certify Encrypt Authenticate&#xA;Current allowed actions: Sign Certify Encrypt&#xA;&#xA;   (S) Toggle the sign capability&#xA;   (E) Toggle the encrypt capability&#xA;   (A) Toggle the authenticate capability&#xA;   (Q) Finished&#xA;&#xA;Your selection? E&#xA;&#xA;Possible actions for a RSA key: Sign Certify Encrypt Authenticate&#xA;Current allowed actions: Sign Certify&#xA;&#xA;   (S) Toggle the sign capability&#xA;   (E) Toggle the encrypt capability&#xA;   (A) Toggle the authenticate capability&#xA;   (Q) Finished&#xA;&#xA;Your selection? S&#xA;&#xA;Possible actions for a RSA key: Sign Certify Encrypt Authenticate&#xA;Current allowed actions: Certify&#xA;&#xA;   (S) Toggle the sign capability&#xA;   (E) Toggle the encrypt capability&#xA;   (A) Toggle the authenticate capability&#xA;   (Q) Finished&#xA;&#xA;Your selection? Q&#xA;RSA keys may be between 1024 and 4096 bits long.&#xA;What keysize do you want? (2048) 4096&#xA;Requested keysize is 4096 bits&#xA;Please specify how long the key should be valid.&#xA;         0 = key does not expire&#xA;      &amp;lt;n&amp;gt;  = key expires in n days&#xA;      &amp;lt;n&amp;gt;w = key expires in n weeks&#xA;      &amp;lt;n&amp;gt;m = key expires in n months&#xA;      &amp;lt;n&amp;gt;y = key expires in n years&#xA;Key is valid for? (0) 0&#xA;Key does not expire at all&#xA;Is this correct? (y/N) y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Input any name and email address (it doesn&#39;t have to be valid):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;GnuPG needs to construct a user ID to identify your key.&#xA;&#xA;Real name: Dr Duh&#xA;Email address: doc@duh.to&#xA;Comment: [Optional - leave blank]&#xA;You selected this USER-ID:&#xA;    &#34;Dr Duh &amp;lt;doc@duh.to&amp;gt;&#34;&#xA;&#xA;Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? o&#xA;&#xA;We need to generate a lot of random bytes. It is a good idea to perform&#xA;some other action (type on the keyboard, move the mouse, utilize the&#xA;disks) during the prime generation; this gives the random number&#xA;generator a better chance to gain enough entropy.&#xA;&#xA;gpg: /tmp.FLZC0xcM/trustdb.gpg: trustdb created&#xA;gpg: key 0xFF3E7D88647EBCDB marked as ultimately trusted&#xA;gpg: directory &#39;/tmp.FLZC0xcM/openpgp-revocs.d&#39; created&#xA;gpg: revocation certificate stored as &#39;/tmp.FLZC0xcM/openpgp-revocs.d/011CE16BD45B27A55BA8776DFF3E7D88647EBCDB.rev&#39;&#xA;public and secret key created and signed.&#xA;&#xA;pub   rsa4096/0xFF3E7D88647EBCDB 2017-10-09 [C]&#xA;      Key fingerprint = 011C E16B D45B 27A5 5BA8  776D FF3E 7D88 647E BCDB&#xA;uid                              Dr Duh &amp;lt;doc@duh.to&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Export the key ID as a &lt;a href=&#34;https://stackoverflow.com/questions/1158091/defining-a-variable-with-or-without-export/1158231#1158231&#34;&gt;variable&lt;/a&gt; (&lt;code&gt;KEYID&lt;/code&gt;) for use later:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ export KEYID=0xFF3E7D88647EBCDB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Sign with existing key&lt;/h1&gt; &#xA;&lt;p&gt;(Optional) If you already have a PGP key, you may want to sign the new key with the old one to prove that the new key is controlled by you.&lt;/p&gt; &#xA;&lt;p&gt;Export your existing key to move it to the working keyring:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg --export-secret-keys --armor --output /tmp/new.sec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then sign the new key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg  --default-key $OLDKEY --sign-key $KEYID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Sub-keys&lt;/h1&gt; &#xA;&lt;p&gt;Edit the master key to add sub-keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg --expert --edit-key $KEYID&#xA;&#xA;Secret key is available.&#xA;&#xA;sec  rsa4096/0xEA5DE91459B80592&#xA;    created: 2017-10-09  expires: never       usage: C&#xA;    trust: ultimate      validity: ultimate&#xA;[ultimate] (1). Dr Duh &amp;lt;doc@duh.to&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use 4096-bit RSA keys.&lt;/p&gt; &#xA;&lt;p&gt;Use a 1 year expiration for sub-keys - they can be renewed using the offline master key. See &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#rotating-keys&#34;&gt;rotating keys&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Signing&lt;/h2&gt; &#xA;&lt;p&gt;Create a &lt;a href=&#34;https://stackoverflow.com/questions/5421107/can-rsa-be-both-used-as-encryption-and-signature/5432623#5432623&#34;&gt;signing key&lt;/a&gt; by selecting &lt;code&gt;addkey&lt;/code&gt; then &lt;code&gt;(4) RSA (sign only)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg&amp;gt; addkey&#xA;Key is protected.&#xA;&#xA;You need a passphrase to unlock the secret key for&#xA;user: &#34;Dr Duh &amp;lt;doc@duh.to&amp;gt;&#34;&#xA;4096-bit RSA key, ID 0xFF3E7D88647EBCDB, created 2016-05-24&#xA;&#xA;Please select what kind of key you want:&#xA;   (3) DSA (sign only)&#xA;   (4) RSA (sign only)&#xA;   (5) Elgamal (encrypt only)&#xA;   (6) RSA (encrypt only)&#xA;   (7) DSA (set your own capabilities)&#xA;   (8) RSA (set your own capabilities)&#xA;Your selection? 4&#xA;RSA keys may be between 1024 and 4096 bits long.&#xA;What keysize do you want? (2048) 4096&#xA;Requested keysize is 4096 bits&#xA;Please specify how long the key should be valid.&#xA;         0 = key does not expire&#xA;      &amp;lt;n&amp;gt;  = key expires in n days&#xA;      &amp;lt;n&amp;gt;w = key expires in n weeks&#xA;      &amp;lt;n&amp;gt;m = key expires in n months&#xA;      &amp;lt;n&amp;gt;y = key expires in n years&#xA;Key is valid for? (0) 1y&#xA;Key expires at Mon 10 Sep 2018 00:00:00 PM UTC&#xA;Is this correct? (y/N) y&#xA;Really create? (y/N) y&#xA;We need to generate a lot of random bytes. It is a good idea to perform&#xA;some other action (type on the keyboard, move the mouse, utilize the&#xA;disks) during the prime generation; this gives the random number&#xA;generator a better chance to gain enough entropy.&#xA;&#xA;sec  rsa4096/0xFF3E7D88647EBCDB&#xA;    created: 2017-10-09  expires: never       usage: C&#xA;    trust: ultimate      validity: ultimate&#xA;ssb  rsa4096/0xBECFA3C1AE191D15&#xA;    created: 2017-10-09  expires: 2018-10-09       usage: S&#xA;[ultimate] (1). Dr Duh &amp;lt;doc@duh.to&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Encryption&lt;/h2&gt; &#xA;&lt;p&gt;Next, create an &lt;a href=&#34;https://www.cs.cornell.edu/courses/cs5430/2015sp/notes/rsa_sign_vs_dec.php&#34;&gt;encryption key&lt;/a&gt; by selecting &lt;code&gt;(6) RSA (encrypt only)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg&amp;gt; addkey&#xA;Please select what kind of key you want:&#xA;   (3) DSA (sign only)&#xA;   (4) RSA (sign only)&#xA;   (5) Elgamal (encrypt only)&#xA;   (6) RSA (encrypt only)&#xA;   (7) DSA (set your own capabilities)&#xA;   (8) RSA (set your own capabilities)&#xA;  (10) ECC (sign only)&#xA;  (11) ECC (set your own capabilities)&#xA;  (12) ECC (encrypt only)&#xA;  (13) Existing key&#xA;Your selection? 6&#xA;RSA keys may be between 1024 and 4096 bits long.&#xA;What keysize do you want? (2048) 4096&#xA;Requested keysize is 4096 bits&#xA;Please specify how long the key should be valid.&#xA;         0 = key does not expire&#xA;      &amp;lt;n&amp;gt;  = key expires in n days&#xA;      &amp;lt;n&amp;gt;w = key expires in n weeks&#xA;      &amp;lt;n&amp;gt;m = key expires in n months&#xA;      &amp;lt;n&amp;gt;y = key expires in n years&#xA;Key is valid for? (0) 1y&#xA;Key expires at Mon 10 Sep 2018 00:00:00 PM UTC&#xA;Is this correct? (y/N) y&#xA;Really create? (y/N) y&#xA;We need to generate a lot of random bytes. It is a good idea to perform&#xA;some other action (type on the keyboard, move the mouse, utilize the&#xA;disks) during the prime generation; this gives the random number&#xA;generator a better chance to gain enough entropy.&#xA;&#xA;sec  rsa4096/0xFF3E7D88647EBCDB&#xA;    created: 2017-10-09  expires: never       usage: C&#xA;    trust: ultimate      validity: ultimate&#xA;ssb  rsa4096/0xBECFA3C1AE191D15&#xA;    created: 2017-10-09  expires: 2018-10-09       usage: S&#xA;ssb  rsa4096/0x5912A795E90DD2CF&#xA;    created: 2017-10-09  expires: 2018-10-09       usage: E&#xA;[ultimate] (1). Dr Duh &amp;lt;doc@duh.to&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Authentication&lt;/h2&gt; &#xA;&lt;p&gt;Finally, create an &lt;a href=&#34;https://superuser.com/questions/390265/what-is-a-gpg-with-authenticate-capability-used-for&#34;&gt;authentication key&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;GPG doesn&#39;t provide an authenticate-only key type, so select &lt;code&gt;(8) RSA (set your own capabilities)&lt;/code&gt; and toggle the required capabilities until the only allowed action is &lt;code&gt;Authenticate&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg&amp;gt; addkey&#xA;Please select what kind of key you want:&#xA;   (3) DSA (sign only)&#xA;   (4) RSA (sign only)&#xA;   (5) Elgamal (encrypt only)&#xA;   (6) RSA (encrypt only)&#xA;   (7) DSA (set your own capabilities)&#xA;   (8) RSA (set your own capabilities)&#xA;  (10) ECC (sign only)&#xA;  (11) ECC (set your own capabilities)&#xA;  (12) ECC (encrypt only)&#xA;  (13) Existing key&#xA;Your selection? 8&#xA;&#xA;Possible actions for a RSA key: Sign Encrypt Authenticate&#xA;Current allowed actions: Sign Encrypt&#xA;&#xA;   (S) Toggle the sign capability&#xA;   (E) Toggle the encrypt capability&#xA;   (A) Toggle the authenticate capability&#xA;   (Q) Finished&#xA;&#xA;Your selection? S&#xA;&#xA;Possible actions for a RSA key: Sign Encrypt Authenticate&#xA;Current allowed actions: Encrypt&#xA;&#xA;   (S) Toggle the sign capability&#xA;   (E) Toggle the encrypt capability&#xA;   (A) Toggle the authenticate capability&#xA;   (Q) Finished&#xA;&#xA;Your selection? E&#xA;&#xA;Possible actions for a RSA key: Sign Encrypt Authenticate&#xA;Current allowed actions:&#xA;&#xA;   (S) Toggle the sign capability&#xA;   (E) Toggle the encrypt capability&#xA;   (A) Toggle the authenticate capability&#xA;   (Q) Finished&#xA;&#xA;Your selection? A&#xA;&#xA;Possible actions for a RSA key: Sign Encrypt Authenticate&#xA;Current allowed actions: Authenticate&#xA;&#xA;   (S) Toggle the sign capability&#xA;   (E) Toggle the encrypt capability&#xA;   (A) Toggle the authenticate capability&#xA;   (Q) Finished&#xA;&#xA;Your selection? Q&#xA;RSA keys may be between 1024 and 4096 bits long.&#xA;What keysize do you want? (2048) 4096&#xA;Requested keysize is 4096 bits&#xA;Please specify how long the key should be valid.&#xA;         0 = key does not expire&#xA;      &amp;lt;n&amp;gt;  = key expires in n days&#xA;      &amp;lt;n&amp;gt;w = key expires in n weeks&#xA;      &amp;lt;n&amp;gt;m = key expires in n months&#xA;      &amp;lt;n&amp;gt;y = key expires in n years&#xA;Key is valid for? (0) 1y&#xA;Key expires at Mon 10 Sep 2018 00:00:00 PM UTC&#xA;Is this correct? (y/N) y&#xA;Really create? (y/N) y&#xA;We need to generate a lot of random bytes. It is a good idea to perform&#xA;some other action (type on the keyboard, move the mouse, utilize the&#xA;disks) during the prime generation; this gives the random number&#xA;generator a better chance to gain enough entropy.&#xA;&#xA;sec  rsa4096/0xFF3E7D88647EBCDB&#xA;    created: 2017-10-09  expires: never       usage: C&#xA;    trust: ultimate      validity: ultimate&#xA;ssb  rsa4096/0xBECFA3C1AE191D15&#xA;    created: 2017-10-09  expires: 2018-10-09       usage: S&#xA;ssb  rsa4096/0x5912A795E90DD2CF&#xA;    created: 2017-10-09  expires: 2018-10-09       usage: E&#xA;ssb  rsa4096/0x3F29127E79649A3D&#xA;    created: 2017-10-09  expires: 2018-10-09       usage: A&#xA;[ultimate] (1). Dr Duh &amp;lt;doc@duh.to&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finish by saving the keys.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg&amp;gt; save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Add extra identities&lt;/h2&gt; &#xA;&lt;p&gt;(Optional) To add additional email addresses or identities, use &lt;code&gt;adduid&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;First open the keyring:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg --expert --edit-key $KEYID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then add the new identity:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg&amp;gt; adduid&#xA;Real name: Dr Duh&#xA;Email address: DrDuh@other.org&#xA;Comment:&#xA;You selected this USER-ID:&#xA;    &#34;Dr Duh &amp;lt;DrDuh@other.org&amp;gt;&#34;&#xA;&#xA;sec  rsa4096/0xFF3E7D88647EBCDB&#xA;    created: 2017-10-09  expires: never       usage: C&#xA;    trust: ultimate      validity: ultimate&#xA;ssb  rsa4096/0xBECFA3C1AE191D15&#xA;    created: 2017-10-09  expires: never       usage: S&#xA;ssb  rsa4096/0x5912A795E90DD2CF&#xA;    created: 2017-10-09  expires: never       usage: E&#xA;ssb  rsa4096/0x3F29127E79649A3D&#xA;    created: 2017-10-09  expires: never       usage: A&#xA;[ultimate] (1). Dr Duh &amp;lt;doc@duh.to&amp;gt;&#xA;[ unknown] (2). Dr Duh &amp;lt;DrDuh@other.org&amp;gt;&#xA;&#xA;gpg&amp;gt; trust&#xA;sec  rsa4096/0xFF3E7D88647EBCDB&#xA;    created: 2017-10-09  expires: never       usage: C&#xA;    trust: ultimate      validity: ultimate&#xA;ssb  rsa4096/0xBECFA3C1AE191D15&#xA;    created: 2017-10-09  expires: never       usage: S&#xA;ssb  rsa4096/0x5912A795E90DD2CF&#xA;    created: 2017-10-09  expires: never       usage: E&#xA;ssb  rsa4096/0x3F29127E79649A3D&#xA;    created: 2017-10-09  expires: never       usage: A&#xA;[ultimate] (1). Dr Duh &amp;lt;doc@duh.to&amp;gt;&#xA;[ unknown] (2). Dr Duh &amp;lt;DrDuh@other.org&amp;gt;&#xA;&#xA;Please decide how far you trust this user to correctly verify other users&#39; keys&#xA;(by looking at passports, checking fingerprints from different sources, etc.)&#xA;&#xA;  1 = I don&#39;t know or won&#39;t say&#xA;  2 = I do NOT trust&#xA;  3 = I trust marginally&#xA;  4 = I trust fully&#xA;  5 = I trust ultimately&#xA;  m = back to the main menu&#xA;&#xA;Your decision? 5&#xA;Do you really want to set this key to ultimate trust? (y/N) y&#xA;&#xA;sec  rsa4096/0xFF3E7D88647EBCDB&#xA;    created: 2017-10-09  expires: never       usage: C&#xA;    trust: ultimate      validity: ultimate&#xA;ssb  rsa4096/0xBECFA3C1AE191D15&#xA;    created: 2017-10-09  expires: never       usage: S&#xA;ssb  rsa4096/0x5912A795E90DD2CF&#xA;    created: 2017-10-09  expires: never       usage: E&#xA;ssb  rsa4096/0x3F29127E79649A3D&#xA;    created: 2017-10-09  expires: never       usage: A&#xA;[ultimate] (1). Dr Duh &amp;lt;doc@duh.to&amp;gt;&#xA;[ unknown] (2). Dr Duh &amp;lt;DrDuh@other.org&amp;gt;&#xA;&#xA;gpg&amp;gt; uid 1&#xA;&#xA;sec  rsa4096/0xFF3E7D88647EBCDB&#xA;created: 2017-10-09  expires: never       usage: C&#xA;    trust: ultimate      validity: ultimate&#xA;ssb  rsa4096/0xBECFA3C1AE191D15&#xA;    created: 2017-10-09  expires: never       usage: S&#xA;ssb  rsa4096/0x5912A795E90DD2CF&#xA;    created: 2017-10-09  expires: never       usage: E&#xA;ssb  rsa4096/0x3F29127E79649A3D&#xA;    created: 2017-10-09  expires: never       usage: A&#xA;[ultimate] (1)* Dr Duh &amp;lt;doc@duh.to&amp;gt;&#xA;[ unknown] (2). Dr Duh &amp;lt;DrDuh@other.org&amp;gt;&#xA;&#xA;gpg&amp;gt; primary&#xA;&#xA;sec  rsa4096/0xFF3E7D88647EBCDB&#xA;created: 2017-10-09  expires: never       usage: C&#xA;    trust: ultimate      validity: ultimate&#xA;ssb  rsa4096/0xBECFA3C1AE191D15&#xA;    created: 2017-10-09  expires: never       usage: S&#xA;ssb  rsa4096/0x5912A795E90DD2CF&#xA;    created: 2017-10-09  expires: never       usage: E&#xA;ssb  rsa4096/0x3F29127E79649A3D&#xA;    created: 2017-10-09  expires: never       usage: A&#xA;[ultimate] (1)* Dr Duh &amp;lt;doc@duh.to&amp;gt;&#xA;[ unknown] (2)  Dr Duh &amp;lt;DrDuh@other.org&amp;gt;&#xA;&#xA;gpg&amp;gt; save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the last identity added will be the primary user ID - use &lt;code&gt;primary&lt;/code&gt; to change that.&lt;/p&gt; &#xA;&lt;h1&gt;Verify&lt;/h1&gt; &#xA;&lt;p&gt;List the generated secret keys and verify the output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg -K&#xA;/tmp.FLZC0xcM/pubring.kbx&#xA;-------------------------------------------------------------------------&#xA;sec   rsa4096/0xFF3E7D88647EBCDB 2017-10-09 [C]&#xA;      Key fingerprint = 011C E16B D45B 27A5 5BA8  776D FF3E 7D88 647E BCDB&#xA;uid                            Dr Duh &amp;lt;doc@duh.to&amp;gt;&#xA;ssb   rsa4096/0xBECFA3C1AE191D15 2017-10-09 [S] [expires: 2018-10-09]&#xA;ssb   rsa4096/0x5912A795E90DD2CF 2017-10-09 [E] [expires: 2018-10-09]&#xA;ssb   rsa4096/0x3F29127E79649A3D 2017-10-09 [A] [expires: 2018-10-09]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add any additional identities or email addresses you wish to associate using the &lt;code&gt;adduid&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt; Verify with a OpenPGP &lt;a href=&#34;https://riseup.net/en/security/message-security/openpgp/best-practices#openpgp-key-checks&#34;&gt;key best practice checker&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg --export $KEYID | hokey lint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output will display any problems with your key in red text. If everything is green, your key passes each of the tests. If it is red, your key has failed one of the tests.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;hokey may warn (orange text) about cross certification for the authentication key. GPG&#39;s &lt;a href=&#34;https://gnupg.org/faq/subkey-cross-certify.html&#34;&gt;Signing Subkey Cross-Certification&lt;/a&gt; documentation has more detail on cross certification, and gpg v2.2.1 notes &#34;subkey &#xA;  &lt;keyid&gt;&#xA;    does not sign and so does not need to be cross-certified&#34;. hokey may also indicate a problem (red text) with &#xA;   &lt;code&gt;Key expiration times: []&lt;/code&gt; on the primary key (see &#xA;   &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#notes&#34;&gt;Note #3&lt;/a&gt; about not setting an expiry for the primary key).&#xA;  &lt;/keyid&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Export secret keys&lt;/h1&gt; &#xA;&lt;p&gt;The master key and sub-keys will be encrypted with your passphrase when exported.&lt;/p&gt; &#xA;&lt;p&gt;Save a copy of your keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg --armor --export-secret-keys $KEYID &amp;gt; $GNUPGHOME/mastersub.key&#xA;&#xA;$ gpg --armor --export-secret-subkeys $KEYID &amp;gt; $GNUPGHOME/sub.key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows, note that using any extension other than &lt;code&gt;.gpg&lt;/code&gt; or attempting IO redirection to a file will garble the secret key, making it impossible to import it again at a later date:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg -o \path\to\dir\mastersub.gpg --armor --export-secret-keys $KEYID&#xA;&#xA;$ gpg -o \path\to\dir\sub.gpg --armor --export-secret-subkeys $KEYID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Revocation certificate&lt;/h1&gt; &#xA;&lt;p&gt;Although we will backup and store the master key in a safe place, it is best practice to never rule out the possibility of losing it or having the backup fail. Without the master key, it will be impossible to renew or rotate subkeys or generate a revocation certificate, the PGP identity will be useless.&lt;/p&gt; &#xA;&lt;p&gt;Even worse, we cannot advertise this fact in any way to those that are using our keys. It is reasonable to assume this &lt;em&gt;will&lt;/em&gt; occur at some point and the only remaining way to deprecate orphaned keys is a revocation certificate.&lt;/p&gt; &#xA;&lt;p&gt;To create the revocation certificate:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg --output $GNUPGHOME/revoke.asc --gen-revoke $KEYID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;revoke.asc&lt;/code&gt; certificate file should be stored (or printed) in a (secondary) place that allows retrieval in case the main backup fails.&lt;/p&gt; &#xA;&lt;h1&gt;Backup&lt;/h1&gt; &#xA;&lt;p&gt;Once keys are moved to YubiKey, they cannot be moved again! Create an &lt;strong&gt;encrypted&lt;/strong&gt; backup of the keyring on removable media so you can keep it offline in a safe place.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt; The ext2 filesystem (without encryption) can be mounted on both Linux and OpenBSD. Consider using a FAT32/NTFS filesystem for MacOS/Windows compatibility instead.&lt;/p&gt; &#xA;&lt;p&gt;As an additional backup measure, consider using a &lt;a href=&#34;https://www.jabberwocky.com/software/paperkey/&#34;&gt;paper copy&lt;/a&gt; of the keys. The &lt;a href=&#34;https://www.kernel.org/doc/html/latest/process/maintainer-pgp-guide.html#back-up-your-master-key-for-disaster-recovery&#34;&gt;Linux Kernel Maintainer PGP Guide&lt;/a&gt; points out that such printouts &lt;em&gt;are still password-protected&lt;/em&gt;. It recommends to &lt;em&gt;write the password on the paper&lt;/em&gt;, since it will be unlikely that you remember the original key password that was used when the paper backup was created. Obviously, you need a really good place to keep such a printout.&lt;/p&gt; &#xA;&lt;p&gt;It is strongly recommended to keep even encrypted OpenPGP private key material offline to deter &lt;a href=&#34;https://www.kopenpgp.com/&#34;&gt;key overwriting attacks&lt;/a&gt;, for example.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Attach another external storage device and check its label:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo dmesg | tail&#xA;mmc0: new high speed SDHC card at address a001&#xA;mmcblk0: mmc0:a001 SS16G 14.8 GiB&#xA;&#xA;$ sudo fdisk -l /dev/mmcblk0&#xA;Disk /dev/mmcblk0: 14.9 GiB, 15931539456 bytes, 31116288 sectors&#xA;Units: sectors of 1 * 512 = 512 bytes&#xA;Sector size (logical/physical): 512 bytes / 512 bytes&#xA;I/O size (minimum/optimal): 512 bytes / 512 bytes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Write it with random data to prepare for encryption:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo dd if=/dev/urandom of=/dev/mmcblk0 bs=4M status=progress&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Erase and create a new partition table:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo fdisk /dev/mmcblk0&#xA;&#xA;Welcome to fdisk (util-linux 2.33.1).&#xA;Changes will remain in memory only, until you decide to write them.&#xA;Be careful before using the write command.&#xA;&#xA;Device does not contain a recognized partition table.&#xA;Created a new DOS disklabel with disk identifier 0x3c1ad14a.&#xA;&#xA;Command (m for help): g&#xA;Created a new GPT disklabel (GUID: 4E7495FD-85A3-3E48-97FC-2DD8D41516C3).&#xA;&#xA;Command (m for help): w&#xA;The partition table has been altered.&#xA;Calling ioctl() to re-read partition table.&#xA;Syncing disks.&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a new partition with a 25 Megabyte size:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo fdisk /dev/mmcblk0&#xA;&#xA;Welcome to fdisk (util-linux 2.36.1).&#xA;Changes will remain in memory only, until you decide to write them.&#xA;Be careful before using the write command.&#xA;&#xA;Command (m for help): n&#xA;Partition number (1-128, default 1):&#xA;First sector (2048-30261214, default 2048):&#xA;Last sector, +/-sectors or +/-size{K,M,G,T,P} (2048-30261214, default 30261214): +25M&#xA;&#xA;Created a new partition 1 of type &#39;Linux filesystem&#39; and of size 25 MiB.&#xA;&#xA;Command (m for help): w&#xA;The partition table has been altered.&#xA;Calling ioctl() to re-read partition table.&#xA;Syncing disks.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://askubuntu.com/questions/97196/how-secure-is-an-encrypted-luks-filesystem&#34;&gt;LUKS&lt;/a&gt; to encrypt the new partition. Generate a different password which will be used to protect the filesystem:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo cryptsetup luksFormat /dev/mmcblk0p1&#xA;&#xA;WARNING!&#xA;========&#xA;This will overwrite data on /dev/mmcblk0p1 irrevocably.&#xA;&#xA;Are you sure? (Type uppercase yes): YES&#xA;Enter passphrase for /dev/mmcblk0p1:&#xA;Verify passphrase:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Mount the partition:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo cryptsetup luksOpen /dev/mmcblk0p1 secret&#xA;Enter passphrase for /dev/mmcblk0p1:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create an ext2 filesystem:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo mkfs.ext2 /dev/mapper/secret -L gpg-$(date +%F)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Mount the filesystem and copy the temporary GnuPG directory with keyring:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo mkdir /mnt/encrypted-storage&#xA;&#xA;$ sudo mount /dev/mapper/secret /mnt/encrypted-storage&#xA;&#xA;$ sudo cp -avi $GNUPGHOME /mnt/encrypted-storage/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Optional&lt;/strong&gt; Backup the OneRNG package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo cp onerng_3.7-1_all.deb /mnt/encrypted-storage/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; If you plan on setting up multiple keys, keep the backup mounted or remember to terminate the gpg process before &lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-users/2016-July/056353.html&#34;&gt;saving&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Unmount, close and disconnect the encrypted volume:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo umount /mnt/encrypted-storage/&#xA;&#xA;$ sudo cryptsetup luksClose secret&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;OpenBSD&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Attach a USB disk and determine its label:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ dmesg | grep sd.\ at&#xA;sd2 at scsibus5 targ 1 lun 0: &amp;lt;TS-RDF5, SD Transcend, TS37&amp;gt; SCSI4 0/direct removable serial.00000000000000000000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Print the existing partitions to make sure it&#39;s the right device:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ doas disklabel -h sd2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Initialize the disk by creating an &lt;code&gt;a&lt;/code&gt; partition with FS type &lt;code&gt;RAID&lt;/code&gt; and size of 25 Megabytes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ doas fdisk -giy sd2&#xA;Writing MBR at offset 0.&#xA;Writing GPT.&#xA;&#xA;$ doas disklabel -E sd2&#xA;Label editor (enter &#39;?&#39; for help at any prompt)&#xA;sd2&amp;gt; a a&#xA;offset: [64]&#xA;size: [31101776] 25M&#xA;FS type: [4.2BSD] RAID&#xA;sd2*&amp;gt; w&#xA;sd2&amp;gt; q&#xA;No label changes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Encrypt with bioctl:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ doas bioctl -c C -l sd2a softraid0&#xA;New passphrase:&#xA;Re-type passphrase:&#xA;softraid0: CRYPTO volume attached as sd3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create an &lt;code&gt;i&lt;/code&gt; partition on the new crypto volume and the filesystem:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ doas fdisk -giy sd3&#xA;Writing MBR at offset 0.&#xA;Writing GPT.&#xA;&#xA;$ doas disklabel -E sd3&#xA;Label editor (enter &#39;?&#39; for help at any prompt)&#xA;sd3&amp;gt; a i&#xA;offset: [64]&#xA;size: [16001]&#xA;FS type: [4.2BSD]&#xA;sd3*&amp;gt; w&#xA;sd3&amp;gt; q&#xA;No label changes.&#xA;&#xA;$ doas newfs sd3i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Mount the filesystem and copy the temporary directory with the keyring:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ doas mkdir /mnt/encrypted-storage&#xA;&#xA;$ doas mount /dev/sd3i /mnt/encrypted-storage&#xA;&#xA;$ doas cp -avi $GNUPGHOME /mnt/encrypted-storage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; If you plan on setting up multiple keys, keep the backup mounted or remember to terminate the gpg process before &lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-users/2016-July/056353.html&#34;&gt;saving&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Otherwise, unmount and disconnect the encrypted volume:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ doas umount /mnt/encrypted-storage&#xA;&#xA;$ doas bioctl -d sd3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://www.openbsd.org/faq/faq14.html#softraidCrypto&#34;&gt;OpenBSD FAQ#14&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h1&gt;Export public keys&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; Without the &lt;em&gt;public&lt;/em&gt; key, you will not be able to use GPG to encrypt, decrypt, nor sign messages. However, you will still be able to use YubiKey for SSH authentication.&lt;/p&gt; &#xA;&lt;p&gt;Create another partition on the removable storage device to store the public key, or reconnect networking and upload to a key server.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo fdisk /dev/mmcblk0&#xA;&#xA;Welcome to fdisk (util-linux 2.36.1).&#xA;Changes will remain in memory only, until you decide to write them.&#xA;Be careful before using the write command.&#xA;&#xA;Command (m for help): n&#xA;Partition number (2-128, default 2):&#xA;First sector (53248-30261214, default 53248):&#xA;Last sector, +/-sectors or +/-size{K,M,G,T,P} (53248-30261214, default 30261214): +25M&#xA;&#xA;Created a new partition 2 of type &#39;Linux filesystem&#39; and of size 25 MiB.&#xA;&#xA;Command (m for help): w&#xA;The partition table has been altered.&#xA;Calling ioctl() to re-read partition table.&#xA;Syncing disks.&#xA;&#xA;$ sudo mkfs.ext2 /dev/mmcblk0p2&#xA;&#xA;$ sudo mkdir /mnt/public&#xA;&#xA;$ sudo mount /dev/mmcblk0p2 /mnt/public/&#xA;&#xA;$ gpg --armor --export $KEYID | sudo tee /mnt/public/gpg-$KEYID-$(date +%F).asc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;OpenBSD&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ doas disklabel -E sd2&#xA;Label editor (enter &#39;?&#39; for help at any prompt)&#xA;sd2&amp;gt; a b&#xA;offset: [32130]&#xA;size: [31069710] 25M&#xA;FS type: [swap] 4.2BSD&#xA;sd2*&amp;gt; w&#xA;sd2&amp;gt; q&#xA;No label changes.&#xA;&#xA;$ doas newfs sd2b&#xA;&#xA;$ doas mkdir /mnt/public&#xA;&#xA;$ doas mount /dev/sd2b /mnt/public&#xA;&#xA;$ gpg --armor --export $KEYID | doas tee /mnt/public/gpg-$KEYID-$(date +%F).asc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg -o \path\to\dir\pubkey.gpg --armor --export $KEYID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Keyserver&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;(Optional) Upload the public key to a &lt;a href=&#34;https://debian-administration.org/article/451/Submitting_your_GPG_key_to_a_keyserver&#34;&gt;public keyserver&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg --send-key $KEYID&#xA;&#xA;$ gpg --keyserver pgp.mit.edu --send-key $KEYID&#xA;&#xA;$ gpg --keyserver keys.gnupg.net --send-key $KEYID&#xA;&#xA;$ gpg --keyserver hkps://keyserver.ubuntu.com:443 --send-key $KEYID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After some time, the public key will propagate to &lt;a href=&#34;https://pgp.key-server.io/pks/lookup?search=doc%40duh.to&amp;amp;fingerprint=on&amp;amp;op=vindex&#34;&gt;other&lt;/a&gt; &lt;a href=&#34;https://pgp.mit.edu/pks/lookup?search=doc%40duh.to&amp;amp;op=index&#34;&gt;servers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Configure Smartcard&lt;/h1&gt; &#xA;&lt;p&gt;Plug in a YubiKey and use GPG to configure it as a smartcard:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg --card-edit&#xA;&#xA;Reader ...........: Yubico Yubikey 4 OTP U2F CCID&#xA;Application ID ...: D2760001240102010006055532110000&#xA;Application type .: OpenPGP&#xA;Version ..........: 3.4&#xA;Manufacturer .....: Yubico&#xA;Serial number ....: 05553211&#xA;Name of cardholder: [not set]&#xA;Language prefs ...: [not set]&#xA;Salutation .......:&#xA;URL of public key : [not set]&#xA;Login data .......: [not set]&#xA;Signature PIN ....: not forced&#xA;Key attributes ...: rsa2048 rsa2048 rsa2048&#xA;Max. PIN lengths .: 127 127 127&#xA;PIN retry counter : 3 0 3&#xA;Signature counter : 0&#xA;KDF setting ......: off&#xA;Signature key ....: [none]&#xA;Encryption key....: [none]&#xA;Authentication key: [none]&#xA;General key info..: [none]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enter administrative mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg/card&amp;gt; admin&#xA;Admin commands are allowed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; If the card is locked, see &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#reset&#34;&gt;Reset&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use the &lt;a href=&#34;https://developers.yubico.com/yubikey-manager&#34;&gt;YubiKey Manager&lt;/a&gt; application (note, this is not the similarly named older YubiKey NEO Manager) to enable CCID functionality.&lt;/p&gt; &#xA;&lt;h2&gt;Enable KDF&lt;/h2&gt; &#xA;&lt;p&gt;Key Derived Function (KDF) enables YubiKey to store the hash of PIN, preventing the PIN from being passed as plain text. Note that this requires a relatively new version of GnuPG to work, and may not be compatible with other GPG clients (notably mobile clients). These incompatible clients will be unable to use the YubiKey GPG functions as the PIN will always be rejected. If you are not sure you will only be using your YubiKey on supported platforms, it may be better to skip this step.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg/card&amp;gt; kdf-setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Change PIN&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://developers.yubico.com/PGP/&#34;&gt;GPG interface&lt;/a&gt; is separate from other modules on a Yubikey such as the &lt;a href=&#34;https://developers.yubico.com/PIV/Introduction/YubiKey_and_PIV.html&#34;&gt;PIV interface&lt;/a&gt;. The GPG interface has its own &lt;em&gt;PIN&lt;/em&gt;, &lt;em&gt;Admin PIN&lt;/em&gt;, and &lt;em&gt;Reset Code&lt;/em&gt; - these should be changed from default values!&lt;/p&gt; &#xA;&lt;p&gt;Entering the user &lt;em&gt;PIN&lt;/em&gt; incorrectly three times will cause the PIN to become blocked; it can be unblocked with either the &lt;em&gt;Admin PIN&lt;/em&gt; or &lt;em&gt;Reset Code&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Entering the &lt;em&gt;Admin PIN&lt;/em&gt; or &lt;em&gt;Reset Code&lt;/em&gt; incorrectly three times destroys all GPG data on the card. The Yubikey will have to be reconfigured.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Default Value&lt;/th&gt; &#xA;   &lt;th&gt;Use&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PIN&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;123456&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;decrypt and authenticate (SSH)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Admin PIN&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;12345678&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;reset &lt;em&gt;PIN&lt;/em&gt;, change &lt;em&gt;Reset Code&lt;/em&gt;, add keys and owner information&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reset code&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;&lt;strong&gt;None&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;reset &lt;em&gt;PIN&lt;/em&gt; (&lt;a href=&#34;https://forum.yubico.com/viewtopicd01c.html?p=9055#p9055&#34;&gt;more information&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Values are valid up to 127 ASCII characters and must be at least 6 (&lt;em&gt;PIN&lt;/em&gt;) or 8 (&lt;em&gt;Admin PIN&lt;/em&gt;, &lt;em&gt;Reset Code&lt;/em&gt;) characters. See the GnuPG documentation on &lt;a href=&#34;https://www.gnupg.org/howtos/card-howto/en/ch03s02.html&#34;&gt;Managing PINs&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;To update the GPG PINs on the Yubikey:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg/card&amp;gt; passwd&#xA;gpg: OpenPGP card no. D2760001240102010006055532110000 detected&#xA;&#xA;1 - change PIN&#xA;2 - unblock PIN&#xA;3 - change Admin PIN&#xA;4 - set the Reset Code&#xA;Q - quit&#xA;&#xA;Your selection? 3&#xA;PIN changed.&#xA;&#xA;1 - change PIN&#xA;2 - unblock PIN&#xA;3 - change Admin PIN&#xA;4 - set the Reset Code&#xA;Q - quit&#xA;&#xA;Your selection? 1&#xA;PIN changed.&#xA;&#xA;1 - change PIN&#xA;2 - unblock PIN&#xA;3 - change Admin PIN&#xA;4 - set the Reset Code&#xA;Q - quit&#xA;&#xA;Your selection? q&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; The number of retry attempts can be changed later with the following command, documented &lt;a href=&#34;https://docs.yubico.com/software/yubikey/tools/ykman/OpenPGP_Commands.html#ykman-openpgp-access-set-retries-options-pin-retries-reset-code-retries-admin-pin-retries&#34;&gt;here&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ykman openpgp access set-retries 5 5 5 -f -a YOUR_ADMIN_PIN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Set information&lt;/h2&gt; &#xA;&lt;p&gt;Some fields are optional.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg/card&amp;gt; name&#xA;Cardholder&#39;s surname: Duh&#xA;Cardholder&#39;s given name: Dr&#xA;&#xA;gpg/card&amp;gt; lang&#xA;Language preferences: en&#xA;&#xA;gpg/card&amp;gt; login&#xA;Login data (account name): doc@duh.to&#xA;&#xA;gpg/card&amp;gt; list&#xA;&#xA;Application ID ...: D2760001240102010006055532110000&#xA;Version ..........: 3.4&#xA;Manufacturer .....: unknown&#xA;Serial number ....: 05553211&#xA;Name of cardholder: Dr Duh&#xA;Language prefs ...: en&#xA;Sex ..............: unspecified&#xA;URL of public key : [not set]&#xA;Login data .......: doc@duh.to&#xA;Private DO 4 .....: [not set]&#xA;Signature PIN ....: not forced&#xA;Key attributes ...: rsa2048 rsa2048 rsa2048&#xA;Max. PIN lengths .: 127 127 127&#xA;PIN retry counter : 3 0 3&#xA;Signature counter : 0&#xA;KDF setting ......: on&#xA;Signature key ....: [none]&#xA;Encryption key....: [none]&#xA;Authentication key: [none]&#xA;General key info..: [none]&#xA;&#xA;gpg/card&amp;gt; quit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Transfer keys&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; Transferring keys to YubiKey using &lt;code&gt;keytocard&lt;/code&gt; is a destructive, one-way operation only. Make sure you&#39;ve made a backup before proceeding: &lt;code&gt;keytocard&lt;/code&gt; converts the local, on-disk key into a stub, which means the on-disk copy is no longer usable to transfer to subsequent security key devices or mint additional keys.&lt;/p&gt; &#xA;&lt;p&gt;Previous GPG versions required the &lt;code&gt;toggle&lt;/code&gt; command before selecting keys. The currently selected key(s) are indicated with an &lt;code&gt;*&lt;/code&gt;. When moving keys only one key should be selected at a time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg --edit-key $KEYID&#xA;&#xA;Secret key is available.&#xA;&#xA;sec  rsa4096/0xFF3E7D88647EBCDB&#xA;    created: 2017-10-09  expires: never       usage: C&#xA;    trust: ultimate      validity: ultimate&#xA;ssb  rsa4096/0xBECFA3C1AE191D15&#xA;    created: 2017-10-09  expires: 2018-10-09  usage: S&#xA;ssb  rsa4096/0x5912A795E90DD2CF&#xA;    created: 2017-10-09  expires: 2018-10-09  usage: E&#xA;ssb  rsa4096/0x3F29127E79649A3D&#xA;    created: 2017-10-09  expires: 2018-10-09  usage: A&#xA;[ultimate] (1). Dr Duh &amp;lt;doc@duh.to&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Signing&lt;/h2&gt; &#xA;&lt;p&gt;You will be prompted for the master key passphrase and Admin PIN.&lt;/p&gt; &#xA;&lt;p&gt;Select and transfer the signature key.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg&amp;gt; key 1&#xA;&#xA;sec  rsa4096/0xFF3E7D88647EBCDB&#xA;    created: 2017-10-09  expires: never       usage: C&#xA;    trust: ultimate      validity: ultimate&#xA;ssb* rsa4096/0xBECFA3C1AE191D15&#xA;    created: 2017-10-09  expires: 2018-10-09  usage: S&#xA;ssb  rsa4096/0x5912A795E90DD2CF&#xA;    created: 2017-10-09  expires: 2018-10-09  usage: E&#xA;ssb  rsa4096/0x3F29127E79649A3D&#xA;    created: 2017-10-09  expires: 2018-10-09  usage: A&#xA;[ultimate] (1). Dr Duh &amp;lt;doc@duh.to&amp;gt;&#xA;&#xA;gpg&amp;gt; keytocard&#xA;Please select where to store the key:&#xA;   (1) Signature key&#xA;   (3) Authentication key&#xA;Your selection? 1&#xA;&#xA;You need a passphrase to unlock the secret key for&#xA;user: &#34;Dr Duh &amp;lt;doc@duh.to&amp;gt;&#34;&#xA;4096-bit RSA key, ID 0xBECFA3C1AE191D15, created 2016-05-24&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Encryption&lt;/h2&gt; &#xA;&lt;p&gt;Type &lt;code&gt;key 1&lt;/code&gt; again to de-select and &lt;code&gt;key 2&lt;/code&gt; to select the next key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg&amp;gt; key 1&#xA;&#xA;gpg&amp;gt; key 2&#xA;&#xA;sec  rsa4096/0xFF3E7D88647EBCDB&#xA;    created: 2017-10-09  expires: never       usage: C&#xA;    trust: ultimate      validity: ultimate&#xA;ssb  rsa4096/0xBECFA3C1AE191D15&#xA;    created: 2017-10-09  expires: 2018-10-09  usage: S&#xA;ssb* rsa4096/0x5912A795E90DD2CF&#xA;    created: 2017-10-09  expires: 2018-10-09  usage: E&#xA;ssb  rsa4096/0x3F29127E79649A3D&#xA;    created: 2017-10-09  expires: 2018-10-09  usage: A&#xA;[ultimate] (1). Dr Duh &amp;lt;doc@duh.to&amp;gt;&#xA;&#xA;gpg&amp;gt; keytocard&#xA;Please select where to store the key:&#xA;   (2) Encryption key&#xA;Your selection? 2&#xA;&#xA;[...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Authentication&lt;/h2&gt; &#xA;&lt;p&gt;Type &lt;code&gt;key 2&lt;/code&gt; again to deselect and &lt;code&gt;key 3&lt;/code&gt; to select the last key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg&amp;gt; key 2&#xA;&#xA;gpg&amp;gt; key 3&#xA;&#xA;sec  rsa4096/0xFF3E7D88647EBCDB&#xA;    created: 2017-10-09  expires: never       usage: C&#xA;    trust: ultimate      validity: ultimate&#xA;ssb  rsa4096/0xBECFA3C1AE191D15&#xA;    created: 2017-10-09  expires: 2018-10-09  usage: S&#xA;ssb  rsa4096/0x5912A795E90DD2CF&#xA;    created: 2017-10-09  expires: 2018-10-09  usage: E&#xA;ssb* rsa4096/0x3F29127E79649A3D&#xA;    created: 2017-10-09  expires: 2018-10-09  usage: A&#xA;[ultimate] (1). Dr Duh &amp;lt;doc@duh.to&amp;gt;&#xA;&#xA;gpg&amp;gt; keytocard&#xA;Please select where to store the key:&#xA;   (3) Authentication key&#xA;Your selection? 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Save and quit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg&amp;gt; save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Verify card&lt;/h1&gt; &#xA;&lt;p&gt;Verify the sub-keys have been moved to YubiKey as indicated by &lt;code&gt;ssb&amp;gt;&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg -K&#xA;/tmp.FLZC0xcM/pubring.kbx&#xA;-------------------------------------------------------------------------&#xA;sec   rsa4096/0xFF3E7D88647EBCDB 2017-10-09 [C]&#xA;      Key fingerprint = 011C E16B D45B 27A5 5BA8  776D FF3E 7D88 647E BCDB&#xA;uid                            Dr Duh &amp;lt;doc@duh.to&amp;gt;&#xA;ssb&amp;gt;  rsa4096/0xBECFA3C1AE191D15 2017-10-09 [S] [expires: 2018-10-09]&#xA;ssb&amp;gt;  rsa4096/0x5912A795E90DD2CF 2017-10-09 [E] [expires: 2018-10-09]&#xA;ssb&amp;gt;  rsa4096/0x3F29127E79649A3D 2017-10-09 [A] [expires: 2018-10-09]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Multiple YubiKeys&lt;/h1&gt; &#xA;&lt;p&gt;To provision additional security keys, restore the master key backup and repeat the &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#configure-smartcard&#34;&gt;Configure Smartcard&lt;/a&gt; procedure.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ mv -vi $GNUPGHOME $GNUPGHOME.1&#xA;renamed &#39;/tmp.FLZC0xcM&#39; -&amp;gt; &#39;/tmp.FLZC0xcM.1&#39;&#xA;&#xA;$ cp -avi /mnt/encrypted-storage/tmp.XXX $GNUPGHOME&#xA;&#39;/mnt/encrypted-storage/tmp.FLZC0xcM&#39; -&amp;gt; &#39;/tmp.FLZC0xcM&#39;&#xA;&#xA;$ cd $GNUPGHOME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Switching between two or more Yubikeys&lt;/h2&gt; &#xA;&lt;p&gt;When you add a GPG key to a Yubikey using the &lt;em&gt;keytocard&lt;/em&gt; command, GPG deletes the key from your keyring and adds a &lt;em&gt;stub&lt;/em&gt; pointing to that exact Yubikey (the stub identifies the GPG KeyID and the Yubikey&#39;s serial number).&lt;/p&gt; &#xA;&lt;p&gt;However, when you do this same operation for a second Yubikey, the stub in your keyring is overwritten by the &lt;em&gt;keytocard&lt;/em&gt; operation and now the stub points to your second Yubikey. Adding more repeats this overwriting operation.&lt;/p&gt; &#xA;&lt;p&gt;In other words, the stub will point ONLY to the LAST Yubikey written to.&lt;/p&gt; &#xA;&lt;p&gt;When using GPG key operations with the GPG key you placed onto the Yubikeys, GPG will request a specific Yubikey asking that you insert a Yubikey with a given serial number (referenced by the stub). GPG will not recognise another Yubikey with a different serial number without manual intervention.&lt;/p&gt; &#xA;&lt;p&gt;You can force GPG to scan the card and re-create the stubs to point to another Yubikey.&lt;/p&gt; &#xA;&lt;p&gt;Having created two (or more Yubikeys) with the same GPG key (as described above) where the stubs are pointing to the second Yubikey:&lt;/p&gt; &#xA;&lt;p&gt;Insert the first Yubikey (which has a different serial number) and run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$  gpg-connect-agent &#34;scd serialno&#34; &#34;learn --force&#34; /bye&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GPG will then scan your first Yubikey for GPG keys and recreate the stubs to point to the GPG keyID and Yubikey Serial number of this first Yubikey.&lt;/p&gt; &#xA;&lt;p&gt;To return to using the second Yubikey just repeat (insert other Yubikey and re-run command).&lt;/p&gt; &#xA;&lt;p&gt;Obviously this command is not easy to remember so it is recommended to either create a script or a shell alias to make this more user friendly.&lt;/p&gt; &#xA;&lt;h1&gt;Cleanup&lt;/h1&gt; &#xA;&lt;p&gt;Before finishing the setup, ensure you have done the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Saved encryption, signing and authentication sub-keys to YubiKey (&lt;code&gt;gpg -K&lt;/code&gt; should show &lt;code&gt;ssb&amp;gt;&lt;/code&gt; for sub-keys).&lt;/li&gt; &#xA; &lt;li&gt;Saved the YubiKey user and admin PINs which are different and were changed from default values.&lt;/li&gt; &#xA; &lt;li&gt;Saved the password to the GPG master key in a secure, long-term location.&lt;/li&gt; &#xA; &lt;li&gt;Saved a copy of the master key, sub-keys and revocation certificate on an encrypted volume, to be stored offline.&lt;/li&gt; &#xA; &lt;li&gt;Saved the password to that LUKS-encrypted volume in a secure, long-term location (separate from the device itself).&lt;/li&gt; &#xA; &lt;li&gt;Saved a copy of the public key somewhere easily accessible later.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now reboot or &lt;a href=&#34;http://srm.sourceforge.net/&#34;&gt;securely delete&lt;/a&gt; &lt;code&gt;$GNUPGHOME&lt;/code&gt; and remove the secret keys from the GPG keyring:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg --delete-secret-key $KEYID&#xA;&#xA;$ sudo srm -r $GNUPGHOME || sudo rm -rf $GNUPGHOME&#xA;&#xA;$ unset GNUPGHOME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; Make sure you have securely erased all generated keys and revocation certificates if an ephemeral enviroment was not used!&lt;/p&gt; &#xA;&lt;h1&gt;Using keys&lt;/h1&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;https://github.com/drduh/config/raw/master/gpg.conf&#34;&gt;drduh/config/gpg.conf&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cd ~/.gnupg ; wget https://raw.githubusercontent.com/drduh/config/master/gpg.conf&#xA;&#xA;$ chmod 600 gpg.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the required packages and mount the non-encrypted volume created earlier:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo apt update &amp;amp;&amp;amp; sudo apt install -y gnupg2 gnupg-agent gnupg-curl scdaemon pcscd&#xA;&#xA;$ sudo mount /dev/mmcblk0p2 /mnt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;OpenBSD&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ doas pkg_add gnupg pcsc-tools&#xA;&#xA;$ doas mount /dev/sd2b /mnt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Import the public key file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg --import /mnt/gpg-0x*.asc&#xA;gpg: key 0xFF3E7D88647EBCDB: public key &#34;Dr Duh &amp;lt;doc@duh.to&amp;gt;&#34; imported&#xA;gpg: Total number processed: 1&#xA;gpg:               imported: 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or download the public key from a keyserver:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg --recv $KEYID&#xA;gpg: requesting key 0xFF3E7D88647EBCDB from hkps server hkps.pool.sks-keyservers.net&#xA;[...]&#xA;gpg: key 0xFF3E7D88647EBCDB: public key &#34;Dr Duh &amp;lt;doc@duh.to&amp;gt;&#34; imported&#xA;gpg: Total number processed: 1&#xA;gpg:               imported: 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Edit the master key to assign it ultimate trust by selecting &lt;code&gt;trust&lt;/code&gt; and &lt;code&gt;5&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ export KEYID=0xFF3E7D88647EBCDB&#xA;&#xA;$ gpg --edit-key $KEYID&#xA;&#xA;gpg&amp;gt; trust&#xA;pub  4096R/0xFF3E7D88647EBCDB  created: 2016-05-24  expires: never       usage: C&#xA;                               trust: unknown       validity: unknown&#xA;sub  4096R/0xBECFA3C1AE191D15  created: 2017-10-09  expires: 2018-10-09  usage: S&#xA;sub  4096R/0x5912A795E90DD2CF  created: 2017-10-09  expires: 2018-10-09  usage: E&#xA;sub  4096R/0x3F29127E79649A3D  created: 2017-10-09  expires: 2018-10-09  usage: A&#xA;[ unknown] (1). Dr Duh &amp;lt;doc@duh.to&amp;gt;&#xA;&#xA;Please decide how far you trust this user to correctly verify other users&#39; keys&#xA;(by looking at passports, checking fingerprints from different sources, etc.)&#xA;&#xA;  1 = I don&#39;t know or won&#39;t say&#xA;  2 = I do NOT trust&#xA;  3 = I trust marginally&#xA;  4 = I trust fully&#xA;  5 = I trust ultimately&#xA;  m = back to the main menu&#xA;&#xA;Your decision? 5&#xA;Do you really want to set this key to ultimate trust? (y/N) y&#xA;&#xA;pub  4096R/0xFF3E7D88647EBCDB  created: 2016-05-24  expires: never       usage: C&#xA;                               trust: ultimate      validity: unknown&#xA;sub  4096R/0xBECFA3C1AE191D15  created: 2017-10-09  expires: 2018-10-09  usage: S&#xA;sub  4096R/0x5912A795E90DD2CF  created: 2017-10-09  expires: 2018-10-09  usage: E&#xA;sub  4096R/0x3F29127E79649A3D  created: 2017-10-09  expires: 2018-10-09  usage: A&#xA;[ unknown] (1). Dr Duh &amp;lt;doc@duh.to&amp;gt;&#xA;&#xA;gpg&amp;gt; quit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remove and re-insert YubiKey and verify the status:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg --card-status&#xA;Reader ...........: Yubico YubiKey OTP FIDO CCID 00 00&#xA;Application ID ...: D2760001240102010006055532110000&#xA;Version ..........: 3.4&#xA;Manufacturer .....: Yubico&#xA;Serial number ....: 05553211&#xA;Name of cardholder: Dr Duh&#xA;Language prefs ...: en&#xA;Sex ..............: unspecified&#xA;URL of public key : [not set]&#xA;Login data .......: doc@duh.to&#xA;Signature PIN ....: not forced&#xA;Key attributes ...: rsa4096 rsa4096 rsa4096&#xA;Max. PIN lengths .: 127 127 127&#xA;PIN retry counter : 3 3 3&#xA;Signature counter : 0&#xA;KDF setting ......: on&#xA;Signature key ....: 07AA 7735 E502 C5EB E09E  B8B0 BECF A3C1 AE19 1D15&#xA;      created ....: 2016-05-24 23:22:01&#xA;Encryption key....: 6F26 6F46 845B BEB8 BDF3  7E9B 5912 A795 E90D D2CF&#xA;      created ....: 2016-05-24 23:29:03&#xA;Authentication key: 82BE 7837 6A3F 2E7B E556  5E35 3F29 127E 7964 9A3D&#xA;      created ....: 2016-05-24 23:36:40&#xA;General key info..: pub  4096R/0xBECFA3C1AE191D15 2016-05-24 Dr Duh &amp;lt;doc@duh.to&amp;gt;&#xA;sec#  4096R/0xFF3E7D88647EBCDB  created: 2016-05-24  expires: never&#xA;ssb&amp;gt;  4096R/0xBECFA3C1AE191D15  created: 2017-10-09  expires: 2018-10-09&#xA;                      card-no: 0006 05553211&#xA;ssb&amp;gt;  4096R/0x5912A795E90DD2CF  created: 2017-10-09  expires: 2018-10-09&#xA;                      card-no: 0006 05553211&#xA;ssb&amp;gt;  4096R/0x3F29127E79649A3D  created: 2017-10-09  expires: 2018-10-09&#xA;                      card-no: 0006 05553211&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;sec#&lt;/code&gt; indicates the master key is not available (as it should be stored encrypted offline).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; If you see &lt;code&gt;General key info..: [none]&lt;/code&gt; in the output instead - go back and import the public key using the previous step.&lt;/p&gt; &#xA;&lt;p&gt;Encrypt a message to your own key (useful for storing password credentials and other data):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#34;test message string&#34; | gpg --encrypt --armor --recipient $KEYID -o encrypted.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To encrypt to multiple recipients (or to multiple keys):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#34;test message string&#34; | gpg --encrypt --armor --recipient $KEYID_0 --recipient $KEYID_1 --recipient $KEYID_2 -o encrypted.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Decrypt the message:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg --decrypt --armor encrypted.txt&#xA;gpg: anonymous recipient; trying secret key 0x0000000000000000 ...&#xA;gpg: okay, we are the anonymous recipient.&#xA;gpg: encrypted with RSA key, ID 0x0000000000000000&#xA;test message string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sign a message:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#34;test message string&#34; | gpg --armor --clearsign &amp;gt; signed.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Verify the signature:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg --verify signed.txt&#xA;gpg: Signature made Wed 25 May 2016 00:00:00 AM UTC&#xA;gpg:                using RSA key 0xBECFA3C1AE191D15&#xA;gpg: Good signature from &#34;Dr Duh &amp;lt;doc@duh.to&amp;gt;&#34; [ultimate]&#xA;Primary key fingerprint: 011C E16B D45B 27A5 5BA8  776D FF3E 7D88 647E BCDB&#xA;     Subkey fingerprint: 07AA 7735 E502 C5EB E09E  B8B0 BECF A3C1 AE19 1D15&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use a &lt;a href=&#34;https://github.com/drduh/config/raw/master/zshrc&#34;&gt;shell function&lt;/a&gt; to make encrypting files easier:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;secret () {&#xA;        output=~/&#34;${1}&#34;.$(date +%s).enc&#xA;        gpg --encrypt --armor --output ${output} -r 0x0000 -r 0x0001 -r 0x0002 &#34;${1}&#34; &amp;amp;&amp;amp; echo &#34;${1} -&amp;gt; ${output}&#34;&#xA;}&#xA;&#xA;reveal () {&#xA;        output=$(echo &#34;${1}&#34; | rev | cut -c16- | rev)&#xA;        gpg --decrypt --output ${output} &#34;${1}&#34; &amp;amp;&amp;amp; echo &#34;${1} -&amp;gt; ${output}&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ secret document.pdf&#xA;document.pdf -&amp;gt; document.pdf.1580000000.enc&#xA;&#xA;$ reveal document.pdf.1580000000.enc&#xA;gpg: anonymous recipient; trying secret key 0xFF3E7D88647EBCDB ...&#xA;gpg: okay, we are the anonymous recipient.&#xA;gpg: encrypted with RSA key, ID 0x0000000000000000&#xA;document.pdf.1580000000.enc -&amp;gt; document.pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Rotating keys&lt;/h1&gt; &#xA;&lt;p&gt;PGP does not provide forward secrecy - a compromised key may be used to decrypt all past messages. Although keys stored on YubiKey are difficult to steal, it is not impossible - the key and PIN could be taken, or a vulnerability may be discovered in key hardware or the random number generator used to create them, for example. Therefore, it is good practice to occassionally rotate sub-keys.&lt;/p&gt; &#xA;&lt;p&gt;When a sub-key expires, it can either be renewed or replaced. Both actions require access to the offline master key. Renewing sub-keys by updating their expiration date indicates you are still in possession of the offline master key and is more convenient.&lt;/p&gt; &#xA;&lt;p&gt;Replacing keys, on the other hand, is less convenient but more secure: the new sub-keys will &lt;strong&gt;not&lt;/strong&gt; be able to decrypt previous messages, authenticate with SSH, etc. Contacts will need to receive the updated public key and any encrypted secrets need to be decrypted and re-encrypted to new sub-keys to be usable. This process is functionally equivalent to &#34;losing&#34; the YubiKey and provisioning a new one. However, you will always be able to decrypt previous messages using the offline encrypted backup of the original keys.&lt;/p&gt; &#xA;&lt;p&gt;Neither rotation method is superior and it&#39;s up to personal philosophy on identity management and individual threat model to decide which one to use, or whether to expire sub-keys at all. Ideally, sub-keys would be ephemeral: used only once for each encryption, signing and authentication event, however in practice that is not really feasible nor worthwhile with YubiKey. Advanced users may want to dedicate an offline device for more frequent key rotations and ease of provisioning.&lt;/p&gt; &#xA;&lt;h2&gt;Setup environment&lt;/h2&gt; &#xA;&lt;p&gt;To renew or rotate sub-keys, follow the same process as generating keys: boot to a secure environment, install required software and disconnect networking.&lt;/p&gt; &#xA;&lt;p&gt;Connect the offline secret storage device with the master keys and identify the disk label:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo dmesg | tail&#xA;mmc0: new high speed SDHC card at address a001&#xA;mmcblk0: mmc0:a001 SS16G 14.8 GiB (ro)&#xA;mmcblk0: p1 p2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Decrypt and mount the offline volume:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo cryptsetup luksOpen /dev/mmcblk0p1 secret&#xA;Enter passphrase for /dev/mmcblk0p1:&#xA;&#xA;$ sudo mount /dev/mapper/secret /mnt/encrypted-storage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Import the master key and configuration to a temporary working directory. Note that Windows users should import mastersub.gpg:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ export GNUPGHOME=$(mktemp -d -t gnupg_$(date +%Y%m%d%H%M)_XXX)&#xA;&#xA;$ gpg --import /mnt/encrypted-storage/tmp.XXX/mastersub.key&#xA;&#xA;$ cp -v /mnt/encrypted-storage/tmp.XXX/gpg.conf $GNUPGHOME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Edit the master key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ export KEYID=0xFF3E7D88647EBCDB&#xA;&#xA;$ gpg --expert --edit-key $KEYID&#xA;&#xA;Secret key is available&#xA;[...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Renewing sub-keys&lt;/h2&gt; &#xA;&lt;p&gt;Renewing sub-keys is simpler: you do not need to generate new keys, move keys to the YubiKey, or update any SSH public keys linked to the GPG key. All you need to do is to change the expiry time associated with the public key (which requires access to the master key you just loaded) and then to export that public key and import it on any computer where you wish to use the &lt;strong&gt;GPG&lt;/strong&gt; (as distinct from the SSH) key.&lt;/p&gt; &#xA;&lt;p&gt;To change the expiration date of all sub-keys, start by selecting all keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg --edit-key $KEYID&#xA;&#xA;Secret key is available.&#xA;&#xA;sec  rsa4096/0xFF3E7D88647EBCDB&#xA;    created: 2017-10-09  expires: never       usage: C&#xA;    trust: ultimate      validity: ultimate&#xA;ssb  rsa4096/0xBECFA3C1AE191D15&#xA;    created: 2017-10-09  expires: 2018-10-09  usage: S&#xA;ssb  rsa4096/0x5912A795E90DD2CF&#xA;    created: 2017-10-09  expires: 2018-10-09  usage: E&#xA;ssb  rsa4096/0x3F29127E79649A3D&#xA;    created: 2017-10-09  expires: 2018-10-09  usage: A&#xA;[ultimate] (1). Dr Duh &amp;lt;doc@duh.to&amp;gt;&#xA;&#xA;gpg&amp;gt; key 1&#xA;&#xA;Secret key is available.&#xA;&#xA;sec  rsa4096/0xFF3E7D88647EBCDB&#xA;     created: 2017-10-09  expires: never       usage: C&#xA;     trust: ultimate      validity: ultimate&#xA;ssb* rsa4096/0xBECFA3C1AE191D15&#xA;     created: 2017-10-09  expires: 2018-10-09  usage: S&#xA;ssb  rsa4096/0x5912A795E90DD2CF&#xA;     created: 2017-10-09  expires: 2018-10-09  usage: E&#xA;ssb  rsa4096/0x3F29127E79649A3D&#xA;     created: 2017-10-09  expires: 2018-10-09  usage: A&#xA;[ultimate] (1). Dr Duh &amp;lt;doc@duh.to&amp;gt;&#xA;&#xA;gpg&amp;gt; key 2&#xA;&#xA;Secret key is available.&#xA;&#xA;sec  rsa4096/0xFF3E7D88647EBCDB&#xA;     created: 2017-10-09  expires: never       usage: C&#xA;     trust: ultimate      validity: ultimate&#xA;ssb* rsa4096/0xBECFA3C1AE191D15&#xA;     created: 2017-10-09  expires: 2018-10-09  usage: S&#xA;ssb* rsa4096/0x5912A795E90DD2CF&#xA;     created: 2017-10-09  expires: 2018-10-09  usage: E&#xA;ssb  rsa4096/0x3F29127E79649A3D&#xA;     created: 2017-10-09  expires: 2018-10-09  usage: A&#xA;[ultimate] (1). Dr Duh &amp;lt;doc@duh.to&amp;gt;&#xA;&#xA;gpg&amp;gt; key 3&#xA;&#xA;Secret key is available.&#xA;&#xA;sec   rsa4096/0xFF3E7D88647EBCDB&#xA;      created: 2017-10-09  expires: never       usage: C&#xA;      trust: ultimate      validity: ultimate&#xA;ssb*  rsa4096/0xBECFA3C1AE191D15&#xA;      created: 2017-10-09  expires: 2018-10-09  usage: S&#xA;ssb*  rsa4096/0x5912A795E90DD2CF&#xA;      created: 2017-10-09  expires: 2018-10-09  usage: E&#xA;ssb*  rsa4096/0x3F29127E79649A3D&#xA;      created: 2017-10-09  expires: 2018-10-09  usage: A&#xA;[ultimate] (1). Dr Duh &amp;lt;doc@duh.to&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, use the &lt;code&gt;expire&lt;/code&gt; command to set a new expiration date. (Despite the name, this will not cause currently valid keys to become expired.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gpg&amp;gt; expire&#xA;Changing expiration time for a subkey.&#xA;Please specify how long the key should be valid.&#xA;         0 = key does not expire&#xA;      &amp;lt;n&amp;gt;  = key expires in n days&#xA;      &amp;lt;n&amp;gt;w = key expires in n weeks&#xA;      &amp;lt;n&amp;gt;m = key expires in n months&#xA;      &amp;lt;n&amp;gt;y = key expires in n years&#xA;Key is valid for? (0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Follow these prompts to set a new expiration date, then &lt;code&gt;save&lt;/code&gt; to save your changes.&lt;/p&gt; &#xA;&lt;p&gt;Next, export the public key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg --armor --export $KEYID &amp;gt; gpg-$KEYID-$(date +%F).asc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Transfer that public key to the computer from which you use your GPG key, and then import it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg --import gpg-0x*.asc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will extend the validity of your GPG key and will allow you to use it for SSH authorization. Note that you do &lt;em&gt;not&lt;/em&gt; need to update the SSH public key located on remote servers.&lt;/p&gt; &#xA;&lt;h2&gt;Rotating keys&lt;/h2&gt; &#xA;&lt;p&gt;Rotating keys is more a bit more involved. First, follow the original steps to generate each sub-key. Previous sub-keys may be kept or deleted from the identity.&lt;/p&gt; &#xA;&lt;p&gt;Finish by exporting new keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg --armor --export-secret-keys $KEYID &amp;gt; $GNUPGHOME/mastersub.key&#xA;&#xA;$ gpg --armor --export-secret-subkeys $KEYID &amp;gt; $GNUPGHOME/sub.key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Copy the &lt;strong&gt;new&lt;/strong&gt; temporary working directory to encrypted offline storage, which should still be mounted:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo cp -avi $GNUPGHOME /mnt/encrypted-storage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There should now be at least two versions of the master and sub-keys backed up:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ls /mnt/encrypted-storage&#xA;lost+found  tmp.ykhTOGjR36  tmp.2gyGnyCiHs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unmount and close the encrypted volume:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo umount /mnt/encrypted-storage&#xA;&#xA;$ sudo cryptsetup luksClose /dev/mapper/secret&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Export the updated public key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo mkdir /mnt/public&#xA;&#xA;$ sudo mount /dev/mmcblk0p2 /mnt/public&#xA;&#xA;$ gpg --armor --export $KEYID | sudo tee /mnt/public/$KEYID-$(date +%F).asc&#xA;&#xA;$ sudo umount /mnt/public&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Disconnect the storage device and follow the original steps to transfer new keys (4, 5 and 6) to the YubiKey, replacing existing ones. Reboot or securely erase the GPG temporary working directory.&lt;/p&gt; &#xA;&lt;h1&gt;Adding notations&lt;/h1&gt; &#xA;&lt;p&gt;Notations can be added to user ID(s) and can be used in conjunction with &lt;a href=&#34;https://keyoxide.org&#34;&gt;Keyoxide&lt;/a&gt; to create &lt;a href=&#34;https://keyoxide.org/guides/openpgp-proofs&#34;&gt;OpenPGP identity proofs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Adding notations requires access to the master key so we can follow the setup instructions taken from this &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#setup-environment&#34;&gt;section&lt;/a&gt; of this guide.&lt;/p&gt; &#xA;&lt;p&gt;Please note that there is no need to connect the Yubikey to the setup environment and that we do not need to generate new keys, move keys to the YubiKey, or update any SSH public keys linked to the GPG key.&lt;/p&gt; &#xA;&lt;p&gt;After having completed the environment setup, it is possible to follow any of the guides listed under &#34;Adding proofs&#34; in the Keyoxide &lt;a href=&#34;https://keyoxide.org/guides/&#34;&gt;&#34;Guides&#34;&lt;/a&gt; page &lt;strong&gt;up until the notation is saved using the &lt;code&gt;save&lt;/code&gt; command&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;At this point the public key can be exported:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg --export $KEYID &amp;gt; pubkey.asc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The public key can now be transferred to the computer where the GPG key is used and it is imported with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg --import pubkey.asc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;N.B.: The &lt;code&gt;showpref&lt;/code&gt; command can be issued to ensure that the notions were correctly added.&lt;/p&gt; &#xA;&lt;p&gt;It is now possible to continue following the Keyoxide guide and upload the key to WKD or to keys.openpgp.org.&lt;/p&gt; &#xA;&lt;h1&gt;SSH&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt; If you want to use a YubiKey for SSH only (and don&#39;t really care about PGP/GPG), then &lt;a href=&#34;https://www.openssh.com/txt/release-8.2&#34;&gt;since OpenSSH v8.2&lt;/a&gt; you alternatively can simply &lt;code&gt;ssh-keygen -t ed25519-sk&lt;/code&gt; (without requiring anything else from this guide!), as explained &lt;a href=&#34;https://github.com/vorburger/vorburger.ch-Notes/raw/develop/security/ed25519-sk.md&#34;&gt;in this guide&lt;/a&gt;. Yubico also recently announced support for resident ssh keys under OpenSSH 8.2+ on their blue &#34;security key 5 nfc&#34; as mentioned in their &lt;a href=&#34;https://www.yubico.com/blog/github-now-supports-ssh-security-keys/&#34;&gt;blog post&lt;/a&gt;._&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/GnuPG#SSH_agent&#34;&gt;gpg-agent&lt;/a&gt; supports the OpenSSH ssh-agent protocol (&lt;code&gt;enable-ssh-support&lt;/code&gt;), as well as Putty&#39;s Pageant on Windows (&lt;code&gt;enable-putty-support&lt;/code&gt;). This means it can be used instead of the traditional ssh-agent / pageant. There are some differences from ssh-agent, notably that gpg-agent does not &lt;em&gt;cache&lt;/em&gt; keys rather it converts, encrypts and stores them - persistently - as GPG keys and then makes them available to ssh clients. Any existing ssh private keys that you&#39;d like to keep in &lt;code&gt;gpg-agent&lt;/code&gt; should be deleted after they&#39;ve been imported to the GPG agent.&lt;/p&gt; &#xA;&lt;p&gt;When importing the key to &lt;code&gt;gpg-agent&lt;/code&gt;, you&#39;ll be prompted for a passphrase to protect that key within GPG&#39;s key store - you may want to use the same passphrase as the original&#39;s ssh version. GPG can both cache passphrases for a determined period (ref. &lt;code&gt;gpg-agent&lt;/code&gt;&#39;s various &lt;code&gt;cache-ttl&lt;/code&gt; options), and since version 2.1 can store and fetch passphrases via the macOS keychain. Note than when removing the old private key after importing to &lt;code&gt;gpg-agent&lt;/code&gt;, keep the &lt;code&gt;.pub&lt;/code&gt; key file around for use in specifying ssh identities (e.g. &lt;code&gt;ssh -i /path/to/identity.pub&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Probably the biggest thing missing from &lt;code&gt;gpg-agent&lt;/code&gt;&#39;s ssh agent support is being able to remove keys. &lt;code&gt;ssh-add -d/-D&lt;/code&gt; have no effect. Instead, you need to use the &lt;code&gt;gpg-connect-agent&lt;/code&gt; utility to lookup a key&#39;s keygrip, match that with the desired ssh key fingerprint (as an MD5) and then delete that keygrip. The &lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-users/2016-August/056499.html&#34;&gt;gnupg-users mailing list&lt;/a&gt; has more information.&lt;/p&gt; &#xA;&lt;h2&gt;Create configuration&lt;/h2&gt; &#xA;&lt;p&gt;Create a hardened configuration for gpg-agent by downloading &lt;a href=&#34;https://github.com/drduh/config/raw/master/gpg-agent.conf&#34;&gt;drduh/config/gpg-agent.conf&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cd ~/.gnupg&#xA;&#xA;$ wget https://raw.githubusercontent.com/drduh/config/master/gpg-agent.conf&#xA;&#xA;$ grep -ve &#34;^#&#34; gpg-agent.conf&#xA;enable-ssh-support&#xA;default-cache-ttl 60&#xA;max-cache-ttl 120&#xA;pinentry-program /usr/bin/pinentry-curses&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; The &lt;code&gt;cache-ttl&lt;/code&gt; options do &lt;strong&gt;NOT&lt;/strong&gt; apply when using a YubiKey as a smartcard as the PIN is &lt;a href=&#34;https://dev.gnupg.org/T3362&#34;&gt;cached by the smartcard itself&lt;/a&gt;. Therefore, in order to clear the PIN from cache (smartcard equivalent to &lt;code&gt;default-cache-ttl&lt;/code&gt; and &lt;code&gt;max-cache-ttl&lt;/code&gt;), you need to unplug the YubiKey, or set the &lt;code&gt;forcesig&lt;/code&gt; flag when editing the card to be prompted for the PIN each time.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt; Set &lt;code&gt;pinentry-program /usr/bin/pinentry-gnome3&lt;/code&gt; for a GUI-based prompt. If the &lt;em&gt;pinentry&lt;/em&gt; graphical dialog doesn&#39;t show and you get this error: &lt;code&gt;sign_and_send_pubkey: signing failed: agent refused operation&lt;/code&gt;, you may need to install the &lt;code&gt;dbus-user-session&lt;/code&gt; package and restart the computer for the &lt;code&gt;dbus&lt;/code&gt; user session to be fully inherited; this is because behind the scenes, &lt;code&gt;pinentry&lt;/code&gt; complains about &lt;code&gt;No $DBUS_SESSION_BUS_ADDRESS found&lt;/code&gt;, falls back to &lt;code&gt;curses&lt;/code&gt; but doesn&#39;t find the expected &lt;code&gt;tty&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On macOS, use &lt;code&gt;brew install pinentry-mac&lt;/code&gt; and set the program path to &lt;code&gt;pinentry-program /usr/local/bin/pinentry-mac&lt;/code&gt; for Intel Macs, &lt;code&gt;/opt/homebrew/bin/pinentry-mac&lt;/code&gt; for ARM/Apple Silicon Macs or &lt;code&gt;pinentry-program /usr/local/MacGPG2/libexec/pinentry-mac.app/Contents/MacOS/pinentry-mac&lt;/code&gt; if using MacGPG Suite.&lt;/p&gt; &#xA;&lt;h2&gt;Replace agents&lt;/h2&gt; &#xA;&lt;p&gt;To launch &lt;code&gt;gpg-agent&lt;/code&gt; for use by SSH, use the &lt;code&gt;gpg-connect-agent /bye&lt;/code&gt; or &lt;code&gt;gpgconf --launch gpg-agent&lt;/code&gt; commands.&lt;/p&gt; &#xA;&lt;p&gt;Add these to the shell &lt;code&gt;rc&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;export GPG_TTY=&#34;$(tty)&#34;&#xA;export SSH_AUTH_SOCK=&#34;/run/user/$UID/gnupg/S.gpg-agent.ssh&#34;&#xA;gpg-connect-agent updatestartuptty /bye &amp;gt; /dev/null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On modern systems, &lt;code&gt;gpgconf --list-dirs agent-ssh-socket&lt;/code&gt; will automatically set &lt;code&gt;SSH_AUTH_SOCK&lt;/code&gt; to the correct value and is better than hard-coding to &lt;code&gt;run/user/$UID/gnupg/S.gpg-agent.ssh&lt;/code&gt;, if available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;export GPG_TTY=&#34;$(tty)&#34;&#xA;export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)&#xA;gpgconf --launch gpg-agent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use fish, the correct lines for your &lt;code&gt;config.fish&lt;/code&gt; would look like this (consider putting them into the &lt;code&gt;is-interactive&lt;/code&gt; block depending on your use case):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fish&#34;&gt;set -x GPG_TTY (tty)&#xA;set -x SSH_AUTH_SOCK (gpgconf --list-dirs agent-ssh-socket)&#xA;gpgconf --launch gpg-agent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that if you use &lt;code&gt;ForwardAgent&lt;/code&gt; for ssh-agent forwarding, &lt;code&gt;SSH_AUTH_SOCK&lt;/code&gt; only needs to be set on the &lt;em&gt;local&lt;/em&gt; laptop (workstation), where the YubiKey is plugged in. On the &lt;em&gt;remote&lt;/em&gt; server that we SSH into, &lt;code&gt;ssh&lt;/code&gt; will automatically set &lt;code&gt;SSH_AUTH_SOCK&lt;/code&gt; to something like &lt;code&gt;/tmp/ssh-mXzCzYT2Np/agent.7541&lt;/code&gt; when we connect. We therefore do &lt;strong&gt;NOT&lt;/strong&gt; manually set &lt;code&gt;SSH_AUTH_SOCK&lt;/code&gt; on the server - doing so would break &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#remote-machines-ssh-agent-forwarding&#34;&gt;SSH Agent Forwarding&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you use &lt;code&gt;S.gpg-agent.ssh&lt;/code&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#remote-machines-ssh-agent-forwarding&#34;&gt;SSH Agent Forwarding&lt;/a&gt; for more info), &lt;code&gt;SSH_AUTH_SOCK&lt;/code&gt; should also be set on the &lt;em&gt;remote&lt;/em&gt;. However, &lt;code&gt;GPG_TTY&lt;/code&gt; should not be set on the &lt;em&gt;remote&lt;/em&gt;, explanation specified in that section.&lt;/p&gt; &#xA;&lt;h2&gt;Copy public key&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; It is &lt;strong&gt;not&lt;/strong&gt; necessary to import the corresponding GPG public key in order to use SSH.&lt;/p&gt; &#xA;&lt;p&gt;Copy and paste the output from &lt;code&gt;ssh-add&lt;/code&gt; to the server&#39;s &lt;code&gt;authorized_keys&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ssh-add -L&#xA;ssh-rsa AAAAB4NzaC1yc2EAAAADAQABAAACAz[...]zreOKM+HwpkHzcy9DQcVG2Nw== cardno:000605553211&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;(Optional) Save public key for identity file configuration&lt;/h2&gt; &#xA;&lt;p&gt;By default, SSH attempts to use all the identities available via the agent. It&#39;s often a good idea to manage exactly which keys SSH will use to connect to a server, for example to separate different roles or &lt;a href=&#34;https://blog.filippo.io/ssh-whoami-filippo-io/&#34;&gt;to avoid being fingerprinted by untrusted ssh servers&lt;/a&gt;. To do this you&#39;ll need to use the command line argument &lt;code&gt;-i [identity_file]&lt;/code&gt; or the &lt;code&gt;IdentityFile&lt;/code&gt; and &lt;code&gt;IdentitiesOnly&lt;/code&gt; options in &lt;code&gt;.ssh/config&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The argument provided to &lt;code&gt;IdentityFile&lt;/code&gt; is traditionally the path to the &lt;em&gt;private&lt;/em&gt; key file (for example &lt;code&gt;IdentityFile ~/.ssh/id_rsa&lt;/code&gt;). For the YubiKey - indeed, in general for keys stored in an ssh agent - &lt;code&gt;IdentityFile&lt;/code&gt; should point to the &lt;em&gt;public&lt;/em&gt; key file, &lt;code&gt;ssh&lt;/code&gt; will select the appropriate private key from those available via the ssh agent. To prevent &lt;code&gt;ssh&lt;/code&gt; from trying all keys in the agent use the &lt;code&gt;IdentitiesOnly yes&lt;/code&gt; option along with one or more &lt;code&gt;-i&lt;/code&gt; or &lt;code&gt;IdentityFile&lt;/code&gt; options for the target host.&lt;/p&gt; &#xA;&lt;p&gt;To reiterate, with &lt;code&gt;IdentitiesOnly yes&lt;/code&gt;, &lt;code&gt;ssh&lt;/code&gt; will not automatically enumerate public keys loaded into &lt;code&gt;ssh-agent&lt;/code&gt; or &lt;code&gt;gpg-agent&lt;/code&gt;. This means &lt;code&gt;publickey&lt;/code&gt; authentication will not proceed unless explicitly named by &lt;code&gt;ssh -i [identity_file]&lt;/code&gt; or in &lt;code&gt;.ssh/config&lt;/code&gt; on a per-host basis.&lt;/p&gt; &#xA;&lt;p&gt;In the case of YubiKey usage, to extract the public key from the ssh agent:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ssh-add -L | grep &#34;cardno:000605553211&#34; &amp;gt; ~/.ssh/id_rsa_yubikey.pub&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can explicitly associate this YubiKey-stored key for used with a host, &lt;code&gt;github.com&lt;/code&gt; for example, as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cat &amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; ~/.ssh/config&#xA;Host github.com&#xA;    IdentitiesOnly yes&#xA;    IdentityFile ~/.ssh/id_rsa_yubikey.pub&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Connect with public key authentication&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ssh git@github.com -vvv&#xA;[...]&#xA;debug2: key: cardno:000605553211 (0x1234567890),&#xA;debug1: Authentications that can continue: publickey&#xA;debug3: start over, passed a different list publickey&#xA;debug3: preferred gssapi-keyex,gssapi-with-mic,publickey,keyboard-interactive,password&#xA;debug3: authmethod_lookup publickey&#xA;debug3: remaining preferred: keyboard-interactive,password&#xA;debug3: authmethod_is_enabled publickey&#xA;debug1: Next authentication method: publickey&#xA;debug1: Offering RSA public key: cardno:000605553211&#xA;debug3: send_pubkey_test&#xA;debug2: we sent a publickey packet, wait for reply&#xA;debug1: Server accepts key: pkalg ssh-rsa blen 535&#xA;debug2: input_userauth_pk_ok: fp e5&lt;span&gt;🇩🇪&lt;/span&gt;a5:74:b1:3e:96:9b:85:46:e7:28:53:b4:82:c3&#xA;debug3: sign_and_send_pubkey: RSA e5&lt;span&gt;🇩🇪&lt;/span&gt;a5:74:b1:3e:96:9b:85:46:e7:28:53:b4:82:c3&#xA;debug1: Authentication succeeded (publickey).&#xA;[...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt; To make multiple connections or securely transfer many files, consider using the &lt;a href=&#34;https://en.wikibooks.org/wiki/OpenSSH/Cookbook/Multiplexing&#34;&gt;ControlMaster&lt;/a&gt; ssh option. Also see &lt;a href=&#34;https://github.com/drduh/config/raw/master/ssh_config&#34;&gt;drduh/config/ssh_config&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Import SSH keys&lt;/h2&gt; &#xA;&lt;p&gt;If there are existing SSH keys that you wish to make available via &lt;code&gt;gpg-agent&lt;/code&gt;, you&#39;ll need to import them. You should then remove the original private keys. When importing the key, &lt;code&gt;gpg-agent&lt;/code&gt; uses the key&#39;s filename as the key&#39;s label; this makes it easier to follow where the key originated from. In this example, we&#39;re starting with just the YubiKey&#39;s key in place and importing &lt;code&gt;~/.ssh/id_rsa&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ssh-add -l&#xA;4096 SHA256:... cardno:00060123456 (RSA)&#xA;&#xA;$ ssh-add ~/.ssh/id_rsa &amp;amp;&amp;amp; rm ~/.ssh/id_rsa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When invoking &lt;code&gt;ssh-add&lt;/code&gt;, it will prompt for the SSH key&#39;s passphrase if present, then the &lt;code&gt;pinentry&lt;/code&gt; program will prompt and confirm for a new passphrase to use to encrypt the converted key within the GPG key store.&lt;/p&gt; &#xA;&lt;p&gt;The migrated key will be listed in &lt;code&gt;ssh-add -l&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ssh-add -l&#xA;4096 SHA256:... cardno:00060123456 (RSA)&#xA;2048 SHA256:... /Users/username/.ssh/id_rsa (RSA)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or to show the keys with MD5 fingerprints, as used by &lt;code&gt;gpg-connect-agent&lt;/code&gt;&#39;s &lt;code&gt;KEYINFO&lt;/code&gt; and &lt;code&gt;DELETE_KEY&lt;/code&gt; commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ssh-add -E md5 -l&#xA;4096 MD5:... cardno:00060123456 (RSA)&#xA;2048 MD5:... /Users/username/.ssh/id_rsa (RSA)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using the key &lt;code&gt;pinentry&lt;/code&gt; will be invoked to request the key&#39;s passphrase. The passphrase will be cached for up to 10 minutes idle time between uses, to a maximum of 2 hours.&lt;/p&gt; &#xA;&lt;h2&gt;Remote Machines (SSH Agent Forwarding)&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; SSH Agent Forwarding can &lt;a href=&#34;https://matrix.org/blog/2019/05/08/post-mortem-and-remediations-for-apr-11-security-incident/#ssh-agent-forwarding-should-be-disabled&#34;&gt;add additional risk&lt;/a&gt; - proceed with caution!&lt;/p&gt; &#xA;&lt;p&gt;There are two methods for ssh-agent forwarding, one is provided by OpenSSH and the other is provided by GnuPG.&lt;/p&gt; &#xA;&lt;p&gt;The latter one may be more insecure as raw socket is just forwarded (not like &lt;code&gt;S.gpg-agent.extra&lt;/code&gt; with only limited functionality; if &lt;code&gt;ForwardAgent&lt;/code&gt; implemented by OpenSSH is just forwarding the raw socket, then they are insecure to the same degree). But for the latter one, one convenience is that one may forward once and use this agent everywhere in the remote. So again, proceed with caution!&lt;/p&gt; &#xA;&lt;p&gt;For example, &lt;code&gt;tmux&lt;/code&gt; does not have some environment variables like &lt;code&gt;$SSH_AUTH_SOCK&lt;/code&gt; when you ssh into remote and attach an old &lt;code&gt;tmux&lt;/code&gt; session. In this case if you use &lt;code&gt;ForwardAgent&lt;/code&gt;, you need to find the socket manually and &lt;code&gt;export SSH_AUTH_SOCK=/tmp/ssh-agent-xxx/xxxx.socket&lt;/code&gt; for each shell. But with &lt;code&gt;S.gpg-agent.ssh&lt;/code&gt; in fixed place, one can just use it as ssh-agent in their shell rc file.&lt;/p&gt; &#xA;&lt;h3&gt;Use ssh-agent&lt;/h3&gt; &#xA;&lt;p&gt;In the above steps, you have successfully configured a local ssh-agent.&lt;/p&gt; &#xA;&lt;p&gt;You should now be able to use &lt;code&gt;ssh -A remote&lt;/code&gt; on the &lt;em&gt;local&lt;/em&gt; machine to log into &lt;em&gt;remote&lt;/em&gt;, and should then be able to use YubiKey as if it were connected to the remote machine. For example, using e.g. &lt;code&gt;ssh-add -l&lt;/code&gt; on that remote machine should show the public key from the YubiKey (note &lt;code&gt;cardno:&lt;/code&gt;). (If you don&#39;t want to have to remember to use &lt;code&gt;ssh -A&lt;/code&gt;, you can use &lt;code&gt;ForwardAgent yes&lt;/code&gt; in &lt;code&gt;~/.ssh/config&lt;/code&gt;. As a security best practice, always use &lt;code&gt;ForwardAgent yes&lt;/code&gt; only for a single &lt;code&gt;Hostname&lt;/code&gt;, never for all servers.)&lt;/p&gt; &#xA;&lt;h3&gt;Use S.gpg-agent.ssh&lt;/h3&gt; &#xA;&lt;p&gt;First you need to go through &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#remote-machines-gpg-agent-forwarding&#34;&gt;Remote Machines (GPG Agent Forwarding)&lt;/a&gt;, know the conditions for gpg-agent forwarding and know the location of &lt;code&gt;S.gpg-agent.ssh&lt;/code&gt; on both the local and the remote.&lt;/p&gt; &#xA;&lt;p&gt;You may use the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpgconf --list-dirs agent-ssh-socket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then in your &lt;code&gt;.ssh/config&lt;/code&gt; add one sentence for that remote&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Host&#xA;  Hostname remote-host.tld&#xA;  StreamLocalBindUnlink yes&#xA;  RemoteForward /run/user/1000/gnupg/S.gpg-agent.ssh /run/user/1000/gnupg/S.gpg-agent.ssh&#xA;  # RemoteForward [remote socket] [local socket]&#xA;  # Note that ForwardAgent is not wanted here!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After successfully ssh into the remote, you should check that you have &lt;code&gt;/run/user/1000/gnupg/S.gpg-agent.ssh&lt;/code&gt; lying there.&lt;/p&gt; &#xA;&lt;p&gt;Then in the &lt;em&gt;remote&lt;/em&gt; you can type in command line or configure in the shell rc file with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;export SSH_AUTH_SOCK=&#34;/run/user/$UID/gnupg/S.gpg-agent.ssh&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After typing or sourcing your shell rc file, with &lt;code&gt;ssh-add -l&lt;/code&gt; you should find your ssh public key now.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; In this process no gpg-agent in the remote is involved, hence &lt;code&gt;gpg-agent.conf&lt;/code&gt; in the remote is of no use. Also pinentry is invoked locally.&lt;/p&gt; &#xA;&lt;h3&gt;Chained SSH Agent Forwarding&lt;/h3&gt; &#xA;&lt;p&gt;If you use &lt;code&gt;ssh-agent&lt;/code&gt; provided by OpenSSH and want to forward it into a &lt;em&gt;third&lt;/em&gt; box, you can just &lt;code&gt;ssh -A third&lt;/code&gt; on the &lt;em&gt;remote&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Meanwhile, if you use &lt;code&gt;S.gpg-agent.ssh&lt;/code&gt;, assume you have gone through the steps above and have &lt;code&gt;S.gpg-agent.ssh&lt;/code&gt; on the &lt;em&gt;remote&lt;/em&gt;, and you would like to forward this agent into a &lt;em&gt;third&lt;/em&gt; box, first you may need to configure &lt;code&gt;sshd_config&lt;/code&gt; and &lt;code&gt;SSH_AUTH_SOCK&lt;/code&gt; of &lt;em&gt;third&lt;/em&gt; in the same way as &lt;em&gt;remote&lt;/em&gt;, then in the ssh config of &lt;em&gt;remote&lt;/em&gt;, add the following lines&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Host third&#xA;  Hostname third-host.tld&#xA;  StreamLocalBindUnlink yes&#xA;  RemoteForward /run/user/1000/gnupg/S.gpg-agent.ssh /run/user/1000/gnupg/S.gpg-agent.ssh&#xA;  # RemoteForward [remote socket] [local socket]&#xA;  # Note that ForwardAgent is not wanted here!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should change the path according to &lt;code&gt;gpgconf --list-dirs agent-ssh-socket&lt;/code&gt; on &lt;em&gt;remote&lt;/em&gt; and &lt;em&gt;third&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;GitHub&lt;/h2&gt; &#xA;&lt;p&gt;You can use YubiKey to sign GitHub commits and tags. It can also be used for GitHub SSH authentication, allowing you to push, pull, and commit without a password.&lt;/p&gt; &#xA;&lt;p&gt;Login to GitHub and upload SSH and PGP public keys in Settings.&lt;/p&gt; &#xA;&lt;p&gt;To configure a signing key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; git config --global user.signingkey $KEYID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure the user.email option matches the email address associated with the PGP identity.&lt;/p&gt; &#xA;&lt;p&gt;Now, to sign commits or tags simply use the &lt;code&gt;-S&lt;/code&gt; option. GPG will automatically query YubiKey and prompt you for a PIN.&lt;/p&gt; &#xA;&lt;p&gt;To authenticate:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;git config --global core.sshcommand &#34;plink -agent&#34;&#xA;&#xA;git config --global gpg.program &#39;C:\Program Files (x86)\GnuPG\bin\gpg.exe&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then change the repository URL to &lt;code&gt;git@github.com:USERNAME/repository&lt;/code&gt; and any authenticated commands will be authorized by YubiKey.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; If you encounter the error &lt;code&gt;gpg: signing failed: No secret key&lt;/code&gt; - run &lt;code&gt;gpg --card-status&lt;/code&gt; with YubiKey plugged in and try the git command again.&lt;/p&gt; &#xA;&lt;h2&gt;OpenBSD&lt;/h2&gt; &#xA;&lt;p&gt;Install and enable tools for use with PC/SC drivers, cards, readers, then reboot to recognize YubiKey:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ doas pkg_add pcsc-tools&#xA;&#xA;$ doas rcctl enable pcscd&#xA;&#xA;$ doas reboot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;p&gt;Windows can already have some virtual smartcard readers installed, like the one provided for Windows Hello. To ensure your YubiKey is the correct one used by scdaemon, you should add it to its configuration. You will need your device&#39;s full name. To find your device&#39;s full name, plug in your YubiKey and open PowerShell to run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;PS C:\WINDOWS\system32&amp;gt; Get-PnpDevice -Class SoftwareDevice | Where-Object {$_.FriendlyName -like &#34;*YubiKey*&#34;} | Select-Object -ExpandProperty FriendlyName&#xA;Yubico YubiKey OTP+FIDO+CCID 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The name slightly differs according to the model. Thanks to &lt;a href=&#34;https://www.hanselman.com/blog/HowToSetupSignedGitCommitsWithAYubiKeyNEOAndGPGAndKeybaseOnWindows.aspx&#34;&gt;Scott Hanselman&lt;/a&gt; for sharing this information.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create or edit &lt;code&gt;%APPDATA%/gnupg/scdaemon.conf&lt;/code&gt; to add:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;reader-port &amp;lt;your yubikey device&#39;s full name, e.g. Yubico YubiKey OTP+FIDO+CCID 0&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create or edit &lt;code&gt;%APPDATA%/gnupg/gpg-agent.conf&lt;/code&gt; to add:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;enable-ssh-support&#xA;enable-putty-support&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open a command console, restart the agent:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; gpg-connect-agent killagent /bye&#xA;&amp;gt; gpg-connect-agent /bye&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enter &lt;code&gt;&amp;gt; gpg --card-status&lt;/code&gt; to see YubiKey details.&lt;/li&gt; &#xA; &lt;li&gt;Import the &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#export-public-key&#34;&gt;public key&lt;/a&gt;: &lt;code&gt;&amp;gt; gpg --import &amp;lt;path to public key file&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#trust-master-key&#34;&gt;Trust the master key&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Retrieve the public key id: &lt;code&gt;&amp;gt; gpg --list-public-keys&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Export the SSH key from GPG: &lt;code&gt;&amp;gt; gpg --export-ssh-key &amp;lt;public key id&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Copy this key to a file for later use. It represents the public SSH key corresponding to the secret key on the YubiKey. You can upload this key to any server you wish to SSH into.&lt;/p&gt; &#xA;&lt;p&gt;Create a shortcut that points to &lt;code&gt;gpg-connect-agent /bye&lt;/code&gt; and place it in the startup folder &lt;code&gt;shell:startup&lt;/code&gt; to make sure the agent starts after a system shutdown. Modify the shortcut properties so it starts in a &#34;Minimized&#34; window, to avoid unnecessary noise at startup.&lt;/p&gt; &#xA;&lt;p&gt;Now you can use PuTTY for public key SSH authentication. When the server asks for public key verification, PuTTY will forward the request to GPG, which will prompt you for a PIN and authorize the login using YubiKey.&lt;/p&gt; &#xA;&lt;h3&gt;WSL&lt;/h3&gt; &#xA;&lt;p&gt;The goal here is to make the SSH client inside WSL work together with the Windows agent you are using (gpg-agent.exe in our case). Here is what we are going to achieve: &lt;img src=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/media/schema_gpg.png&#34; alt=&#34;WSL agent architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; this works only for SSH agent forwarding. Real GPG forwarding (encryption/decryption) is actually not supported. See &lt;a href=&#34;https://github.com/vuori/weasel-pageant&#34;&gt;weasel-pageant&lt;/a&gt; for further information or consider using &lt;a href=&#34;https://github.com/BlackReloaded/wsl2-ssh-pageant&#34;&gt;wsl2-ssh-pageant&lt;/a&gt; which supports both SSH and GPG agent forwarding.&lt;/p&gt; &#xA;&lt;h4&gt;Use ssh-agent or use S.weasel-pegant&lt;/h4&gt; &#xA;&lt;p&gt;One way to forward is just &lt;code&gt;ssh -A&lt;/code&gt; (still need to eval weasel to setup local ssh-agent), and only relies on OpenSSH. In this track, &lt;code&gt;ForwardAgent&lt;/code&gt; and &lt;code&gt;AllowAgentForwarding&lt;/code&gt; in ssh/sshd config may be involved; However, if you use the other way (gpg ssh socket forwarding), you should not enable &lt;code&gt;ForwardAgent&lt;/code&gt; in ssh config. See &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#remote-machines-ssh-agent-forwarding&#34;&gt;SSH Agent Forwarding&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;p&gt;Another way is to forward the gpg ssh socket, as described below.&lt;/p&gt; &#xA;&lt;h4&gt;Prerequisites&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu 16.04 or newer for WSL&lt;/li&gt; &#xA; &lt;li&gt;Kleopatra&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#windows&#34;&gt;Windows configuration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;WSL configuration&lt;/h4&gt; &#xA;&lt;p&gt;Download or clone &lt;a href=&#34;https://github.com/vuori/weasel-pageant&#34;&gt;weasel-pageant&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Add &lt;code&gt;eval $(/mnt/c/&amp;lt;path of extraction&amp;gt;/weasel-pageant -r -a /tmp/S.weasel-pageant)&lt;/code&gt; to shell rc file. Use a named socket here so it can be used in the &lt;code&gt;RemoteForward&lt;/code&gt; directive of &lt;code&gt;~/.ssh/config&lt;/code&gt;. Source it with &lt;code&gt;source ~/.bashrc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Display the SSH key with &lt;code&gt;$ ssh-add -l&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Edit &lt;code&gt;~/.ssh/config&lt;/code&gt; to add the following for each host you want to use agent forwarding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;RemoteForward &amp;lt;remote SSH socket path&amp;gt; /tmp/S.weasel-pageant&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; The remote SSH socket path can be found with &lt;code&gt;gpgconf --list-dirs agent-ssh-socket&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Remote host configuration&lt;/h4&gt; &#xA;&lt;p&gt;You may have to add the following to the shell rc file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the following to &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;StreamLocalBindUnlink yes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And reload the SSH daemon (e.g., &lt;code&gt;sudo service sshd reload&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Unplug YubiKey, disconnect or reboot. Log back into Windows, open a WSL console and enter &lt;code&gt;ssh-add -l&lt;/code&gt; - you should see nothing.&lt;/p&gt; &#xA;&lt;p&gt;Plug in YubiKey, enter the same command to display the ssh key.&lt;/p&gt; &#xA;&lt;p&gt;Log into the remote host, you should have the pinentry dialog asking for the YubiKey pin.&lt;/p&gt; &#xA;&lt;p&gt;On the remote host, type &lt;code&gt;ssh-add -l&lt;/code&gt; - if you see the ssh key, that means forwarding works!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Agent forwarding may be chained through multiple hosts - just follow the same &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#remote-host-configuration&#34;&gt;protocol&lt;/a&gt; to configure each host. You may also read this part on &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#chained-ssh-agent-forwarding&#34;&gt;chained ssh agent forwarding&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;macOS&lt;/h2&gt; &#xA;&lt;p&gt;To use gui applications on macOS, &lt;a href=&#34;https://jms1.net/yubikey/make-ssh-use-gpg-agent.md&#34;&gt;a little bit more setup is needed&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Create &lt;code&gt;$HOME/Library/LaunchAgents/gnupg.gpg-agent.plist&lt;/code&gt; with the following contents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&amp;gt;&#xA;&amp;lt;!DOCTYPE plist PUBLIC &#34;-//Apple//DTD PLIST 1.0//EN&#34;&#xA;  &#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&#34;&amp;gt;&#xA;&amp;lt;plist version=&#34;1.0&#34;&amp;gt;&#xA;    &amp;lt;dict&amp;gt;&#xA;        &amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt;&#xA;        &amp;lt;string&amp;gt;gnupg.gpg-agent&amp;lt;/string&amp;gt;&#xA;        &amp;lt;key&amp;gt;RunAtLoad&amp;lt;/key&amp;gt;&#xA;        &amp;lt;true/&amp;gt;&#xA;        &amp;lt;key&amp;gt;KeepAlive&amp;lt;/key&amp;gt;&#xA;        &amp;lt;false/&amp;gt;&#xA;        &amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt;&#xA;        &amp;lt;array&amp;gt;&#xA;            &amp;lt;string&amp;gt;/usr/local/MacGPG2/bin/gpg-connect-agent&amp;lt;/string&amp;gt;&#xA;            &amp;lt;string&amp;gt;/bye&amp;lt;/string&amp;gt;&#xA;        &amp;lt;/array&amp;gt;&#xA;    &amp;lt;/dict&amp;gt;&#xA;&amp;lt;/plist&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;launchctl load $HOME/Library/LaunchAgents/gnupg.gpg-agent.plist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create &lt;code&gt;$HOME/Library/LaunchAgents/gnupg.gpg-agent-symlink.plist&lt;/code&gt; with the following contens:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&amp;gt;&#xA;&amp;lt;!DOCTYPE plist PUBLIC &#34;-//Apple//DTD PLIST 1.0//EN&#34; &#34;http://www.apple.com/DTDs/ProperyList-1.0/dtd&#34;&amp;gt;&#xA;&amp;lt;plist version=&#34;1.0&#34;&amp;gt;&#xA;    &amp;lt;dict&amp;gt;&#xA;        &amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt;&#xA;        &amp;lt;string&amp;gt;gnupg.gpg-agent-symlink&amp;lt;/string&amp;gt;&#xA;        &amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt;&#xA;        &amp;lt;array&amp;gt;&#xA;            &amp;lt;string&amp;gt;/bin/sh&amp;lt;/string&amp;gt;&#xA;            &amp;lt;string&amp;gt;-c&amp;lt;/string&amp;gt;&#xA;            &amp;lt;string&amp;gt;/bin/ln -sf $HOME/.gnupg/S.gpg-agent.ssh $SSH_AUTH_SOCK&amp;lt;/string&amp;gt;&#xA;        &amp;lt;/array&amp;gt;&#xA;        &amp;lt;key&amp;gt;RunAtLoad&amp;lt;/key&amp;gt;&#xA;        &amp;lt;true/&amp;gt;&#xA;    &amp;lt;/dict&amp;gt;&#xA;&amp;lt;/plist&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;launchctl load $HOME/Library/LaunchAgents/gnupg.gpg-agent-symlink.plist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will need to either reboot, or log out and log back in, in order to activate these changes.&lt;/p&gt; &#xA;&lt;h1&gt;Remote Machines (GPG Agent Forwarding)&lt;/h1&gt; &#xA;&lt;p&gt;This section is different from ssh-agent forwarding in &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#ssh&#34;&gt;SSH&lt;/a&gt; as gpg-agent forwarding has a broader usage, not only limited to ssh.&lt;/p&gt; &#xA;&lt;p&gt;To use YubiKey to sign a git commit on a remote host, or signing email/decrypt files on a remote host, configure and use GPG Agent Forwarding. To ssh through another network, especially to push to/pull from GitHub using ssh, see &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#remote-machines-ssh-agent-forwarding&#34;&gt;Remote Machines (SSH Agent forwarding)&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;p&gt;To do this, you need access to the remote machine and the YubiKey has to be set up on the host machine.&lt;/p&gt; &#xA;&lt;p&gt;After gpg-agent forwarding, it is nearly the same as if YubiKey was inserted in the remote. Hence configurations except &lt;code&gt;gpg-agent.conf&lt;/code&gt; for the remote can be the same as those for the local.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; &lt;code&gt;gpg-agent.conf&lt;/code&gt; for the remote is of no use, hence &lt;code&gt;$GPG_TTY&lt;/code&gt; is of no use too for the remote. The mechanism is that after forwarding, remote &lt;code&gt;gpg&lt;/code&gt; directly communicates with &lt;code&gt;S.gpg-agent&lt;/code&gt; without &lt;em&gt;starting&lt;/em&gt; &lt;code&gt;gpg-agent&lt;/code&gt; on the remote.&lt;/p&gt; &#xA;&lt;p&gt;On the remote machine, edit &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt; to set &lt;code&gt;StreamLocalBindUnlink yes&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Optional&lt;/strong&gt; If you do not have root access to the remote machine to edit &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;, you will need to remove the socket (located at &lt;code&gt;gpgconf --list-dir agent-socket&lt;/code&gt;) on the remote machine before forwarding works. For example, &lt;code&gt;rm /run/user/1000/gnupg/S.gpg-agent&lt;/code&gt;. Further information can be found on the &lt;a href=&#34;https://wiki.gnupg.org/AgentForwarding&#34;&gt;AgentForwarding GNUPG wiki page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Import public keys to the remote machine. This can be done by fetching from a keyserver. On the local machine, copy the public keyring to the remote machine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ scp ~/.gnupg/pubring.kbx remote:~/.gnupg/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On modern distributions, such as Fedora 30, there is typically no need to also set &lt;code&gt;RemoteForward&lt;/code&gt; in &lt;code&gt;~/.ssh/config&lt;/code&gt; as detailed in the next chapter, because the right thing happens automatically.&lt;/p&gt; &#xA;&lt;p&gt;If any error happens (or there is no &lt;code&gt;gpg-agent.socket&lt;/code&gt; in the remote) for modern distributions, you may go through the configuration steps in the next section.&lt;/p&gt; &#xA;&lt;h2&gt;Steps for older distributions&lt;/h2&gt; &#xA;&lt;p&gt;On the local machine, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpgconf --list-dirs agent-extra-socket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should return a path to agent-extra-socket - &lt;code&gt;/run/user/1000/gnupg/S.gpg-agent.extra&lt;/code&gt; - though on older Linux distros (and macOS) it may be &lt;code&gt;/home/&amp;lt;user&amp;gt;/.gnupg/S/gpg-agent.extra&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Find the agent socket on the &lt;strong&gt;remote&lt;/strong&gt; machine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpgconf --list-dirs agent-socket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should return a path such as &lt;code&gt;/run/user/1000/gnupg/S.gpg-agent&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Finally, enable agent forwarding for a given machine by adding the following to the local machine&#39;s ssh config file &lt;code&gt;~/.ssh/config&lt;/code&gt; (your agent sockets may be different):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Host&#xA;  Hostname remote-host.tld&#xA;  StreamLocalBindUnlink yes&#xA;  RemoteForward /run/user/1000/gnupg/S.gpg-agent /run/user/1000/gnupg/S.gpg-agent.extra&#xA;  # RemoteForward [remote socket] [local socket]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re still having problems, it may be necessary to edit &lt;code&gt;gpg-agent.conf&lt;/code&gt; file on the &lt;em&gt;local&lt;/em&gt; machines to add the following information:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pinentry-program /usr/bin/pinentry-gtk-2&#xA;extra-socket /run/user/1000/gnupg/S.gpg-agent.extra&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; The pinentry program starts on &lt;em&gt;local&lt;/em&gt; machine, not remote. Hence when there are needs to enter the pin you need to find the prompt on the local machine.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; Any pinentry program except &lt;code&gt;pinentry-tty&lt;/code&gt; or &lt;code&gt;pinentry-curses&lt;/code&gt; may be used. This is because local &lt;code&gt;gpg-agent&lt;/code&gt; may start headlessly (By systemd without &lt;code&gt;$GPG_TTY&lt;/code&gt; set locally telling which tty it is on), thus failed to obtain the pin. Errors on the remote may be misleading saying that there is &lt;em&gt;IO Error&lt;/em&gt;. (Yes, internally there is actually an &lt;em&gt;IO Error&lt;/em&gt; since it happens when writing to/reading from tty while finding no tty to use, but for end users this is not friendly.)&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/drduh/YubiKey-Guide/issues/85&#34;&gt;Issue #85&lt;/a&gt; for more information and troubleshooting.&lt;/p&gt; &#xA;&lt;h2&gt;Chained GPG Agent Forwarding&lt;/h2&gt; &#xA;&lt;p&gt;Assume you have gone through the steps above and have &lt;code&gt;S.gpg-agent&lt;/code&gt; on the &lt;em&gt;remote&lt;/em&gt;, and you would like to forward this agent into a &lt;em&gt;third&lt;/em&gt; box, first you may need to configure &lt;code&gt;sshd_config&lt;/code&gt; of &lt;em&gt;third&lt;/em&gt; in the same way as &lt;em&gt;remote&lt;/em&gt;, then in the ssh config of &lt;em&gt;remote&lt;/em&gt;, add the following lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Host third&#xA;  Hostname third-host.tld&#xA;  StreamLocalBindUnlink yes&#xA;  RemoteForward /run/user/1000/gnupg/S.gpg-agent /run/user/1000/gnupg/S.gpg-agent&#xA;  # RemoteForward [remote socket] [local socket]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should change the path according to &lt;code&gt;gpgconf --list-dirs agent-socket&lt;/code&gt; on &lt;em&gt;remote&lt;/em&gt; and &lt;em&gt;third&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; On &lt;em&gt;local&lt;/em&gt; you have &lt;code&gt;S.gpg-agent.extra&lt;/code&gt; whereas on &lt;em&gt;remote&lt;/em&gt; and &lt;em&gt;third&lt;/em&gt;, you only have &lt;code&gt;S.gpg-agent&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Using Multiple Keys&lt;/h1&gt; &#xA;&lt;p&gt;To use a single identity with multiple YubiKeys - or to replace a lost card with another - issue this command to switch keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg-connect-agent &#34;scd serialno&#34; &#34;learn --force&#34; /bye&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, use a script to delete the GnuPG shadowed key, where the card serial number is stored (see &lt;a href=&#34;https://dev.gnupg.org/T2291&#34;&gt;GnuPG #T2291&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cat &amp;gt;&amp;gt; ~/scripts/remove-keygrips.sh &amp;lt;&amp;lt;EOF&#xA;#!/usr/bin/env bash&#xA;(( $# )) || { echo &#34;Specify a key.&#34; &amp;gt;&amp;amp;2; exit 1; }&#xA;KEYGRIPS=$(gpg --with-keygrip --list-secret-keys &#34;$@&#34; | awk &#39;/Keygrip/ { print $3 }&#39;)&#xA;for keygrip in $KEYGRIPS&#xA;do&#xA;    rm &#34;$HOME/.gnupg/private-keys-v1.d/$keygrip.key&#34; 2&amp;gt; /dev/null&#xA;done&#xA;&#xA;gpg --card-status&#xA;EOF&#xA;&#xA;$ chmod +x ~/scripts/remove-keygrips.sh&#xA;&#xA;$ ~/scripts/remove-keygrips.sh $KEYID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See discussion in Issues &lt;a href=&#34;https://github.com/drduh/YubiKey-Guide/issues/19&#34;&gt;#19&lt;/a&gt; and &lt;a href=&#34;https://github.com/drduh/YubiKey-Guide/issues/112&#34;&gt;#112&lt;/a&gt; for more information and troubleshooting steps.&lt;/p&gt; &#xA;&lt;h1&gt;Require touch&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; This is not possible on YubiKey NEO.&lt;/p&gt; &#xA;&lt;p&gt;By default, YubiKey will perform encryption, signing and authentication operations without requiring any action from the user, after the key is plugged in and first unlocked with the PIN.&lt;/p&gt; &#xA;&lt;p&gt;To require a touch for each key operation, install &lt;a href=&#34;https://developers.yubico.com/yubikey-manager/&#34;&gt;YubiKey Manager&lt;/a&gt; and recall the Admin PIN:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Older versions of YubiKey Manager use &lt;code&gt;touch&lt;/code&gt; instead of &lt;code&gt;set-touch&lt;/code&gt; in the following commands.&lt;/p&gt; &#xA;&lt;p&gt;Authentication:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ykman openpgp keys set-touch aut on&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Signing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ykman openpgp keys set-touch sig on&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Encryption:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ykman openpgp keys set-touch enc on&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Depending on how the YubiKey is going to be used, you may want to look at the policy options for each of these and adjust the above commands accordingly. They can be viewed with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ykman openpgp keys set-touch -h&#xA;Usage: ykman openpgp keys set-touch [OPTIONS] KEY POLICY&#xA;&#xA;  Set touch policy for OpenPGP keys.&#xA;&#xA;  KEY     Key slot to set (sig, enc, aut or att).&#xA;  POLICY  Touch policy to set (on, off, fixed, cached or cached-fixed).&#xA;&#xA;  The touch policy is used to require user interaction for all operations using the private key on the YubiKey. The touch policy is set individually for each key slot. To see the current touch policy, run&#xA;&#xA;      $ ykman openpgp info&#xA;&#xA;  Touch policies:&#xA;&#xA;  Off (default)   No touch required&#xA;  On              Touch required&#xA;  Fixed           Touch required, can&#39;t be disabled without a full reset&#xA;  Cached          Touch required, cached for 15s after use&#xA;  Cached-Fixed    Touch required, cached for 15s after use, can&#39;t be disabled&#xA;                  without a full reset&#xA;&#xA;Options:&#xA;  -a, --admin-pin TEXT  Admin PIN for OpenPGP.&#xA;  -f, --force           Confirm the action without prompting.&#xA;  -h, --help            Show this message and exit.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the YubiKey is going to be used within an email client that opens and verifies encrypted mail, &lt;code&gt;Cached&lt;/code&gt; or &lt;code&gt;Cached-Fixed&lt;/code&gt; may be desirable.&lt;/p&gt; &#xA;&lt;p&gt;YubiKey will blink when it is waiting for a touch. On Linux you can also use &lt;a href=&#34;https://github.com/maximbaz/yubikey-touch-detector&#34;&gt;yubikey-touch-detector&lt;/a&gt; to have an indicator or notification that YubiKey is waiting for a touch.&lt;/p&gt; &#xA;&lt;h1&gt;Email&lt;/h1&gt; &#xA;&lt;p&gt;GPG keys on YubiKey can be used with ease to encrypt and/or sign emails and attachments using &lt;a href=&#34;https://www.thunderbird.net/&#34;&gt;Thunderbird&lt;/a&gt;, &lt;a href=&#34;https://www.enigmail.net&#34;&gt;Enigmail&lt;/a&gt; and &lt;a href=&#34;http://www.mutt.org/&#34;&gt;Mutt&lt;/a&gt;. Thunderbird supports OAuth 2 authentication and can be used with Gmail. See &lt;a href=&#34;https://ssd.eff.org/en/module/how-use-pgp-linux&#34;&gt;this guide&lt;/a&gt; from EFF for detailed instructions. Mutt has OAuth 2 support since version 2.0.&lt;/p&gt; &#xA;&lt;h2&gt;Mailvelope&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.mailvelope.com/en&#34;&gt;Mailvelope&lt;/a&gt; allows GPG keys on YubiKey to be used with Gmail and others.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; Mailvelope &lt;a href=&#34;https://github.com/drduh/YubiKey-Guide/issues/178&#34;&gt;does not work&lt;/a&gt; with the &lt;code&gt;throw-keyids&lt;/code&gt; option set in &lt;code&gt;gpg.conf&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On macOS, install gpgme using Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ brew install gpgme&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To allow Chrome to run gpgme, edit &lt;code&gt;~/Library/Application\ Support/Google/Chrome/NativeMessagingHosts/gpgmejson.json&lt;/code&gt; and add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;name&#34;: &#34;gpgmejson&#34;,&#xA;    &#34;description&#34;: &#34;Integration with GnuPG&#34;,&#xA;    &#34;path&#34;: &#34;/usr/local/bin/gpgme-json&#34;,&#xA;    &#34;type&#34;: &#34;stdio&#34;,&#xA;    &#34;allowed_origins&#34;: [&#xA;        &#34;chrome-extension://kajibbejlbohfaggdiogboambcijhkke/&#34;&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Edit the default path to allow Chrome to find GPG:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo launchctl config user path /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, install the &lt;a href=&#34;https://chrome.google.com/webstore/detail/mailvelope/kajibbejlbohfaggdiogboambcijhkke&#34;&gt;Mailvelope extension&lt;/a&gt; from the Chrome app store.&lt;/p&gt; &#xA;&lt;h2&gt;Mutt&lt;/h2&gt; &#xA;&lt;p&gt;Mutt has both CLI and TUI interfaces, and the latter provides powerful functions for daily email processing. In addition, PGP can be integrated such that signing/encryption/verifying/decryption can be done without leaving TUI.&lt;/p&gt; &#xA;&lt;p&gt;To enable GnuPG support, one can just use the config file &lt;code&gt;gpg.rc&lt;/code&gt; provided by mutt, usually located at &lt;code&gt;/usr/share/doc/mutt/samples/gpg.rc&lt;/code&gt; after installation. One only needs to edit the file on options like &lt;code&gt;pgp_default_key&lt;/code&gt;, &lt;code&gt;pgp_sign_as&lt;/code&gt; and &lt;code&gt;pgp_autosign&lt;/code&gt;. After editting one can &lt;code&gt;source&lt;/code&gt; this rcfile in their main &lt;code&gt;muttrc&lt;/code&gt; to use it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; If one uses &lt;code&gt;pinentry-tty&lt;/code&gt; as one&#39;s pinentry program in &lt;code&gt;gpg-agent.conf&lt;/code&gt;, it would mess with one&#39;s Mutt TUI, as reported. This is because Mutt TUI uses curses while tty output may harm the format. It is recommended to use &lt;code&gt;pinentry-curses&lt;/code&gt; or other graphic pinentry program.&lt;/p&gt; &#xA;&lt;h1&gt;Reset&lt;/h1&gt; &#xA;&lt;p&gt;If PIN attempts are exceeded, the card is locked and must be &lt;a href=&#34;https://developers.yubico.com/ykneo-openpgp/ResetApplet.html&#34;&gt;reset&lt;/a&gt; and set up again using the encrypted backup.&lt;/p&gt; &#xA;&lt;p&gt;Copy the following script to a file and run &lt;code&gt;gpg-connect-agent -r $file&lt;/code&gt; to lock and terminate the card. Then re-insert YubiKey to reset.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;/hex&#xA;scd serialno&#xA;scd apdu 00 20 00 81 08 40 40 40 40 40 40 40 40&#xA;scd apdu 00 20 00 81 08 40 40 40 40 40 40 40 40&#xA;scd apdu 00 20 00 81 08 40 40 40 40 40 40 40 40&#xA;scd apdu 00 20 00 81 08 40 40 40 40 40 40 40 40&#xA;scd apdu 00 20 00 83 08 40 40 40 40 40 40 40 40&#xA;scd apdu 00 20 00 83 08 40 40 40 40 40 40 40 40&#xA;scd apdu 00 20 00 83 08 40 40 40 40 40 40 40 40&#xA;scd apdu 00 20 00 83 08 40 40 40 40 40 40 40 40&#xA;scd apdu 00 e6 00 00&#xA;scd apdu 00 44 00 00&#xA;/echo Card has been successfully reset.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use &lt;code&gt;ykman&lt;/code&gt; (sometimes in &lt;code&gt;~/.local/bin/&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ykman openpgp reset&#xA;WARNING! This will delete all stored OpenPGP keys and data and restore factory settings? [y/N]: y&#xA;Resetting OpenPGP data, don&#39;t remove your YubiKey...&#xA;Success! All data has been cleared and default PINs are set.&#xA;PIN:         123456&#xA;Reset code:  NOT SET&#xA;Admin PIN:   12345678&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Recovery after reset&lt;/h2&gt; &#xA;&lt;p&gt;If for whatever reason you need to reinstate your YubiKey from your master key backup (such as the one stored on an encrypted USB described in &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#backup&#34;&gt;Backup&lt;/a&gt;), follow the following steps in &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#rotating-keys&#34;&gt;Rotating keys&lt;/a&gt; to setup your environment, and then follow the steps of again &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#configure-smartcard&#34;&gt;Configure Smartcard&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Before you unmount your backup, ask yourself if you should make another one just in case.&lt;/p&gt; &#xA;&lt;h1&gt;Notes&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;YubiKey has two configurations: one invoked with a short press, and the other with a long press. By default, the short-press mode is configured for HID OTP - a brief touch will emit an OTP string starting with &lt;code&gt;cccccccc&lt;/code&gt;. If you rarely use the OTP mode, you can swap it to the second configuration via the YubiKey Personalization tool. If you &lt;em&gt;never&lt;/em&gt; use OTP, you can disable it entirely using the &lt;a href=&#34;https://developers.yubico.com/yubikey-manager&#34;&gt;YubiKey Manager&lt;/a&gt; application (note, this not the similarly named older YubiKey NEO Manager).&lt;/li&gt; &#xA; &lt;li&gt;Programming YubiKey for GPG keys still lets you use its other configurations - &lt;a href=&#34;https://en.wikipedia.org/wiki/Universal_2nd_Factor&#34;&gt;U2F&lt;/a&gt;, &lt;a href=&#34;https://www.yubico.com/faq/what-is-a-one-time-password-otp/&#34;&gt;OTP&lt;/a&gt; and &lt;a href=&#34;https://www.yubico.com/products/services-software/personalization-tools/static-password/&#34;&gt;static password&lt;/a&gt; modes, for example.&lt;/li&gt; &#xA; &lt;li&gt;Setting an expiry essentially forces you to manage your subkeys and announces to the rest of the world that you are doing so. Setting an expiry on a primary key is ineffective for protecting the key from loss - whoever has the primary key can simply extend its expiry period. Revocation certificates are &lt;a href=&#34;https://security.stackexchange.com/questions/14718/does-openpgp-key-expiration-add-to-security/79386#79386&#34;&gt;better suited&lt;/a&gt; for this purpose. It may be appropriate for your use case to set expiry dates on subkeys.&lt;/li&gt; &#xA; &lt;li&gt;To switch between two or more identities on different keys - unplug the first key and restart gpg-agent, ssh-agent and pinentry with &lt;code&gt;pkill gpg-agent ; pkill ssh-agent ; pkill pinentry ; eval $(gpg-agent --daemon --enable-ssh-support)&lt;/code&gt;, then plug in the other key and run &lt;code&gt;gpg-connect-agent updatestartuptty /bye&lt;/code&gt; - then it should be ready for use.&lt;/li&gt; &#xA; &lt;li&gt;To use yubikeys on more than one computer with gpg: After the initial setup, import the public keys on the second workstation. Confirm gpg can see the card via &lt;code&gt;gpg --card-status&lt;/code&gt;, Trust the public keys you imported ultimately (as above). At this point &lt;code&gt;gpg --list-secret-keys&lt;/code&gt; should show your (trusted) key.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Troubleshooting&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;man gpg&lt;/code&gt; to understand GPG options and command-line flags.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To get more information on potential errors, restart the &lt;code&gt;gpg-agent&lt;/code&gt; process with debug output to the console with &lt;code&gt;pkill gpg-agent; gpg-agent --daemon --no-detach -v -v --debug-level advanced --homedir ~/.gnupg&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you encounter problems connecting to YubiKey with GPG - try unplugging and re-inserting YubiKey, and restarting the &lt;code&gt;gpg-agent&lt;/code&gt; process.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you receive the error, &lt;code&gt;gpg: decryption failed: secret key not available&lt;/code&gt; - you likely need to install GnuPG version 2.x. Another possibility is that there is a problem with the PIN, e.g. it is too short or blocked.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you receive the error, &lt;code&gt;Yubikey core error: no yubikey present&lt;/code&gt; - make sure the YubiKey is inserted correctly. It should blink once when plugged in.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you still receive the error, &lt;code&gt;Yubikey core error: no yubikey present&lt;/code&gt; - you likely need to install newer versions of yubikey-personalize as outlined in &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#required-software&#34;&gt;Required software&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you receive the error, &lt;code&gt;Yubikey core error: write error&lt;/code&gt; - YubiKey is likely locked. Install and run yubikey-personalization-gui to unlock it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you receive the error, &lt;code&gt;Key does not match the card&#39;s capability&lt;/code&gt; - you likely need to use 2048 bit RSA key sizes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you receive the error, &lt;code&gt;sign_and_send_pubkey: signing failed: agent refused operation&lt;/code&gt; - make sure you replaced &lt;code&gt;ssh-agent&lt;/code&gt; with &lt;code&gt;gpg-agent&lt;/code&gt; as noted above.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you still receive the error, &lt;code&gt;sign_and_send_pubkey: signing failed: agent refused operation&lt;/code&gt; - &lt;a href=&#34;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=835394&#34;&gt;run the command&lt;/a&gt; &lt;code&gt;gpg-connect-agent updatestartuptty /bye&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you still receive the error, &lt;code&gt;sign_and_send_pubkey: signing failed: agent refused operation&lt;/code&gt; - edit &lt;code&gt;~/.gnupg/gpg-agent.conf&lt;/code&gt; to set a valid &lt;code&gt;pinentry&lt;/code&gt; program path, e.g. &lt;code&gt;pinentry-program /usr/local/bin/pinentry-mac&lt;/code&gt; on macOS.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you still receive the error, &lt;code&gt;sign_and_send_pubkey: signing failed: agent refused operation&lt;/code&gt; - it is a &lt;a href=&#34;https://bbs.archlinux.org/viewtopic.php?id=274571&#34;&gt;known issue&lt;/a&gt; that openssh 8.9p1 and higher has issues with YubiKey. Adding &lt;code&gt;KexAlgorithms -sntrup761x25519-sha512@openssh.com&lt;/code&gt; to &lt;code&gt;/etc/ssh/ssh_config&lt;/code&gt; often resolves the issue.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you receive the error, &lt;code&gt;The agent has no identities&lt;/code&gt; from &lt;code&gt;ssh-add -L&lt;/code&gt;, make sure you have installed and started &lt;code&gt;scdaemon&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you receive the error, &lt;code&gt;Error connecting to agent: No such file or directory&lt;/code&gt; from &lt;code&gt;ssh-add -L&lt;/code&gt;, the UNIX file socket that the agent uses for communication with other processes may not be set up correctly. On Debian, try &lt;code&gt;export SSH_AUTH_SOCK=&#34;/run/user/$UID/gnupg/S.gpg-agent.ssh&#34;&lt;/code&gt;. Also see that &lt;code&gt;gpgconf --list-dirs agent-ssh-socket&lt;/code&gt; is returning single path, to existing &lt;code&gt;S.gpg-agent.ssh&lt;/code&gt; socket.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you receive the error, &lt;code&gt;Permission denied (publickey)&lt;/code&gt;, increase ssh verbosity with the &lt;code&gt;-v&lt;/code&gt; flag and ensure the public key from the card is being offered: &lt;code&gt;Offering public key: RSA SHA256:abcdefg... cardno:00060123456&lt;/code&gt;. If it is, ensure you are connecting as the right user on the target system, rather than as the user on the local system. Otherwise, be sure &lt;code&gt;IdentitiesOnly&lt;/code&gt; is not &lt;a href=&#34;https://github.com/FiloSottile/whosthere#how-do-i-stop-it&#34;&gt;enabled&lt;/a&gt; for this host.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If SSH authentication still fails - add up to 3 &lt;code&gt;-v&lt;/code&gt; flags to the &lt;code&gt;ssh&lt;/code&gt; client to increase verbosity.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If it still fails, it may be useful to stop the background &lt;code&gt;sshd&lt;/code&gt; daemon process service on the server (e.g. using &lt;code&gt;sudo systemctl stop sshd&lt;/code&gt;) and instead start it in the foreground with extensive debugging output, using &lt;code&gt;/usr/sbin/sshd -eddd&lt;/code&gt;. Note that the server will not fork and will only process one connection, therefore has to be re-started after every &lt;code&gt;ssh&lt;/code&gt; test.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you receive the error, &lt;code&gt;Please insert the card with serial number: *&lt;/code&gt; see &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#using-multiple-keys&#34;&gt;using of multiple keys&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you receive the error, &lt;code&gt;There is no assurance this key belongs to the named user&lt;/code&gt; or &lt;code&gt;encryption failed: Unusable public key&lt;/code&gt; use &lt;code&gt;gpg --edit-key&lt;/code&gt; to set &lt;code&gt;trust&lt;/code&gt; to &lt;code&gt;5 = I trust ultimately&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If, when you try the above &lt;code&gt;--edit-key&lt;/code&gt; command, you get the error &lt;code&gt;Need the secret key to do this&lt;/code&gt; - manually specify trust for the key in &lt;code&gt;~/.gnupg/gpg.conf&lt;/code&gt; by using the &lt;code&gt;trust-key [key ID]&lt;/code&gt; directive.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If, when using a previously provisioned YubiKey on a new computer with &lt;code&gt;pass&lt;/code&gt;, you see the following error on &lt;code&gt;pass insert&lt;/code&gt;, you need to adjust the trust associated with the key. See the note above.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;gpg: 0x0000000000000000: There is no assurance this key belongs to the named user&#xA;gpg: [stdin]: encryption failed: Unusable public key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you receive the error, &lt;code&gt;gpg: 0x0000000000000000: skipped: Unusable public key&lt;/code&gt;, &lt;code&gt;signing failed: Unusable secret key&lt;/code&gt;, or &lt;code&gt;encryption failed: Unusable public key&lt;/code&gt; the sub-key may be expired and can no longer be used to encrypt nor sign messages. It can still be used to decrypt and authenticate, however.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you lost your GPG public key, follow &lt;a href=&#34;https://www.nicksherlock.com/2021/08/recovering-lost-gpg-public-keys-from-your-yubikey/&#34;&gt;this guide&lt;/a&gt; to recover it from YubiKey.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Refer to Yubico article &lt;a href=&#34;https://support.yubico.com/hc/en-us/articles/360013714479-Troubleshooting-Issues-with-GPG&#34;&gt;Troubleshooting Issues with GPG&lt;/a&gt; for additional guidance.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Alternatives&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/smlx/piv-agent&#34;&gt;&lt;code&gt;piv-agent&lt;/code&gt;&lt;/a&gt; is an SSH and GPG agent which you can use with your PIV hardware security device (e.g. a Yubikey).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnupg.org/documentation/manuals/gnupg/OpenPGP-Key-Management.html&#34;&gt;&lt;code&gt;keytotpm&lt;/code&gt;&lt;/a&gt; is an option to use GnuPG with TPM systems.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Create keys with batch&lt;/h2&gt; &#xA;&lt;p&gt;Keys can also be generated using template files and the &lt;code&gt;batch&lt;/code&gt; parameter - see &lt;a href=&#34;https://www.gnupg.org/documentation/manuals/gnupg/Unattended-GPG-key-generation.html&#34;&gt;GnuPG documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Start from the &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/contrib/gen-params-rsa4096&#34;&gt;gen-params-rsa4096&lt;/a&gt; template. If you&#39;re using GnuPG v2.1.7 or newer, you can also use the (&lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/contrib/gen-params-ed25519&#34;&gt;gen-params-ed25519&lt;/a&gt; template. These templates will not set the master key to expire - see &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#notes&#34;&gt;Note #3&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Generate master key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg --batch --generate-key gen-params-rsa4096&#xA;gpg: Generating a basic OpenPGP key&#xA;gpg: key 0xEA5DE91459B80592 marked as ultimately trusted&#xA;gpg: revocation certificate stored as &#39;/tmp.FLZC0xcM/openpgp-revocs.d/D6F924841F78D62C65ABB9588B461860159FFB7B.rev&#39;&#xA;gpg: done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Verify the result:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg --list-key&#xA;gpg: checking the trustdb&#xA;gpg: marginals needed: 3  completes needed: 1  trust model: pgp&#xA;gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u&#xA;/tmp.FLZC0xcM/pubring.kbx&#xA;-------------------------------&#xA;pub   rsa4096/0xFF3E7D88647EBCDB 2021-08-22 [C]&#xA;       Key fingerprint = 011C E16B D45B 27A5 5BA8  776D FF3E 7D88 647E BCDB&#xA;uid                   [ultimate] Dr Duh &amp;lt;doc@duh.to&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The key fingerprint (&lt;code&gt;011C E16B D45B 27A5 5BA8 776D FF3E 7D88 647E BCDB&lt;/code&gt;) will be used to create the three subkeys for signing, authentication and encryption.&lt;/p&gt; &#xA;&lt;p&gt;Now create the three subkeys for signing, authentication and encryption. Use a 1 year expiration for sub-keys - they can be renewed using the offline master key, see &lt;a href=&#34;https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/#rotating-keys&#34;&gt;rotating keys&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We will use the the quick key manipulation interface of GNUPG (with &lt;code&gt;--quick-add-key&lt;/code&gt;), see &lt;a href=&#34;https://www.gnupg.org/documentation/manuals/gnupg/Unattended-GPG-key-generation.html#Unattended-GPG-key-generation&#34;&gt;the documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Create a &lt;a href=&#34;https://stackoverflow.com/questions/5421107/can-rsa-be-both-used-as-encryption-and-signature/5432623#5432623&#34;&gt;signing subkey&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg --quick-add-key &#34;011C E16B D45B 27A5 5BA8  776D FF3E 7D88 647E BCDB&#34; \&#xA;  rsa4096 sign 1y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now create an &lt;a href=&#34;https://www.cs.cornell.edu/courses/cs5430/2015sp/notes/rsa_sign_vs_dec.php&#34;&gt;encryption subkey&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg --quick-add-key &#34;011C E16B D45B 27A5 5BA8  776D FF3E 7D88 647E BCDB&#34; \&#xA;  rsa4096 encrypt 1y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, create an &lt;a href=&#34;https://superuser.com/questions/390265/what-is-a-gpg-with-authenticate-capability-used-for&#34;&gt;authentication subkey&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gpg --quick-add-key &#34;011C E16B D45B 27A5 5BA8  776D FF3E 7D88 647E BCDB&#34; \&#xA;  rsa4096 auth 1y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Continue with the Verify section of this guide.&lt;/p&gt; &#xA;&lt;h1&gt;Links&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://alexcabal.com/creating-the-perfect-gpg-keypair/&#34;&gt;https://alexcabal.com/creating-the-perfect-gpg-keypair/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.habets.se/2013/02/GPG-and-SSH-with-Yubikey-NEO&#34;&gt;https://blog.habets.se/2013/02/GPG-and-SSH-with-Yubikey-NEO&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.josefsson.org/2014/06/23/offline-gnupg-master-key-and-subkeys-on-yubikey-neo-smartcard/&#34;&gt;https://blog.josefsson.org/2014/06/23/offline-gnupg-master-key-and-subkeys-on-yubikey-neo-smartcard/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.onefellow.com/post/180065697833/yubikey-forwarding-ssh-keys&#34;&gt;https://blog.onefellow.com/post/180065697833/yubikey-forwarding-ssh-keys&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developers.yubico.com/PGP/&#34;&gt;https://developers.yubico.com/PGP/&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://developers.yubico.com/PGP/Card_edit.html&#34;&gt;https://developers.yubico.com/PGP/Card_edit.html&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developers.yubico.com/yubikey-personalization/&#34;&gt;https://developers.yubico.com/yubikey-personalization/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://evilmartians.com/chronicles/stick-with-security-yubikey-ssh-gnupg-macos&#34;&gt;https://evilmartians.com/chronicles/stick-with-security-yubikey-ssh-gnupg-macos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/ageis/14adc308087859e199912b4c79c4aaa4&#34;&gt;https://gist.github.com/ageis/14adc308087859e199912b4c79c4aaa4&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/herlo/ssh-gpg-smartcard-config&#34;&gt;https://github.com/herlo/ssh-gpg-smartcard-config&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tomlowenthal/documentation/raw/master/gpg/smartcard-keygen.md&#34;&gt;https://github.com/tomlowenthal/documentation/blob/master/gpg/smartcard-keygen.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://help.riseup.net/en/security/message-security/openpgp/best-practices&#34;&gt;https://help.riseup.net/en/security/message-security/openpgp/best-practices&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jclement.ca/articles/2015/gpg-smartcard/&#34;&gt;https://jclement.ca/articles/2015/gpg-smartcard/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rnorth.org/gpg-and-ssh-with-yubikey-for-mac&#34;&gt;https://rnorth.org/gpg-and-ssh-with-yubikey-for-mac&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://trmm.net/Yubikey&#34;&gt;https://trmm.net/Yubikey&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.bootc.net/archives/2013/06/09/my-perfect-gnupg-ssh-agent-setup/&#34;&gt;https://www.bootc.net/archives/2013/06/09/my-perfect-gnupg-ssh-agent-setup/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.esev.com/blog/post/2015-01-pgp-ssh-key-on-yubikey-neo/&#34;&gt;https://www.esev.com/blog/post/2015-01-pgp-ssh-key-on-yubikey-neo/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hanselman.com/blog/HowToSetupSignedGitCommitsWithAYubiKeyNEOAndGPGAndKeybaseOnWindows.aspx&#34;&gt;https://www.hanselman.com/blog/HowToSetupSignedGitCommitsWithAYubiKeyNEOAndGPGAndKeybaseOnWindows.aspx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.void.gr/kargig/blog/2013/12/02/creating-a-new-gpg-key-with-subkeys/&#34;&gt;https://www.void.gr/kargig/blog/2013/12/02/creating-a-new-gpg-key-with-subkeys/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mlohr.com/gpg-agent-forwarding/&#34;&gt;https://mlohr.com/gpg-agent-forwarding/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ingby.com/?p=293&#34;&gt;https://www.ingby.com/?p=293&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://support.yubico.com/support/solutions/articles/15000027139-yubikey-5-2-3-enhancements-to-openpgp-3-4-support&#34;&gt;https://support.yubico.com/support/solutions/articles/15000027139-yubikey-5-2-3-enhancements-to-openpgp-3-4-support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dhess/nixos-yubikey&#34;&gt;https://github.com/dhess/nixos-yubikey&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>easychen/openai-gpt-dev-notes-for-cn-developer</title>
    <updated>2023-03-19T02:05:41Z</updated>
    <id>tag:github.com,2023-03-19:/easychen/openai-gpt-dev-notes-for-cn-developer</id>
    <link href="https://github.com/easychen/openai-gpt-dev-notes-for-cn-developer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;如何快速开发一个OpenAI/GPT应用：国内开发者笔记&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;如何快速开发一个OpenAI/GPT应用&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;一个国内开发者的OpenAI/GPT的笔记&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;最近都在问，于是写个文档。本文希望用尽可能少的内容，讲清楚开发一个OpenAI/GPT应用必然用到的知识。&lt;/p&gt; &#xA;&lt;p&gt;欢迎PR补充。&lt;/p&gt; &#xA;&lt;h3&gt;AI/Automation开发交流群&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;电报群 &lt;a href=&#34;https://t.me/+s-5piM3koEphNDY1&#34;&gt;https://t.me/+s-5piM3koEphNDY1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;微信③群&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/easychen/openai-gpt-dev-notes-for-cn-developer/master/images/20230313223714.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;目录&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/easychen/openai-gpt-dev-notes-for-cn-developer/master/#%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAopenaigpt%E5%BA%94%E7%94%A8&#34;&gt;如何快速开发一个OpenAI/GPT应用&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/easychen/openai-gpt-dev-notes-for-cn-developer/master/#chatgpt--openai-%E7%9A%84%E5%85%B3%E7%B3%BB&#34;&gt;ChatGPT &amp;amp;&amp;amp; OpenAI 的关系&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/easychen/openai-gpt-dev-notes-for-cn-developer/master/#openai-api-%E6%8E%A5%E5%8F%A3%E8%83%BD%E5%81%9A%E4%BB%80%E4%B9%88&#34;&gt;OpenAI API 接口能做什么&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/easychen/openai-gpt-dev-notes-for-cn-developer/master/#chat-completions-%E6%8E%A5%E5%8F%A3%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8&#34;&gt;chat completions 接口如何使用？&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/easychen/openai-gpt-dev-notes-for-cn-developer/master/#stream-%E5%8F%82%E6%95%B0&#34;&gt;Stream 参数&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/easychen/openai-gpt-dev-notes-for-cn-developer/master/#%E5%85%B6%E4%BB%96%E5%8F%82%E6%95%B0&#34;&gt;其他参数&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/easychen/openai-gpt-dev-notes-for-cn-developer/master/#chat-completions-%E6%8E%A5%E5%8F%A3%E5%A6%82%E4%BD%95%E8%AE%A1%E8%B4%B9&#34;&gt;Chat completions 接口如何计费？&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/easychen/openai-gpt-dev-notes-for-cn-developer/master/#chat-completions-%E6%8E%A5%E5%8F%A3%E8%83%BD%E5%81%9A%E4%BB%80%E4%B9%88-&#34;&gt;chat completions 接口能做什么 ①&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/easychen/openai-gpt-dev-notes-for-cn-developer/master/#chat-completions-%E6%8E%A5%E5%8F%A3%E8%83%BD%E5%81%9A%E4%BB%80%E4%B9%88--1&#34;&gt;chat completions 接口能做什么 ②&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/easychen/openai-gpt-dev-notes-for-cn-developer/master/#%E5%9B%BD%E5%86%85%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E4%B8%8A%E7%BA%BF%E8%BF%90%E8%90%A5gpt%E7%9B%B8%E5%85%B3%E4%B8%9A%E5%8A%A1&#34;&gt;国内是否可以上线运营GPT相关业务？&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/easychen/openai-gpt-dev-notes-for-cn-developer/master/#%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%9B%BD%E5%86%85%E7%94%A8%E6%88%B7%E6%97%A0%E6%B3%95%E6%B3%A8%E5%86%8Copenai%E8%B4%A6%E5%8F%B7%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AEopenai%E6%8E%A5%E5%8F%A3%E7%9A%84%E9%97%AE%E9%A2%98&#34;&gt;如何解决国内用户无法注册OpenAI账号、无法访问OpenAI接口的问题？&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/easychen/openai-gpt-dev-notes-for-cn-developer/master/#%E6%B3%A8%E5%86%8Copenai&#34;&gt;注册OpenAI&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/easychen/openai-gpt-dev-notes-for-cn-developer/master/#%E8%AE%BF%E9%97%AEopenai-api&#34;&gt;访问OpenAI API&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/easychen/openai-gpt-dev-notes-for-cn-developer/master/#%E9%80%9A%E8%BF%87%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8E%A5%E5%8F%A3%E8%AE%BF%E9%97%AE&#34;&gt;通过第三方接口访问&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/easychen/openai-gpt-dev-notes-for-cn-developer/master/#%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D-openai-%E5%B0%81%E7%A6%81%E8%B4%A6%E5%8F%B7-api%E6%9D%83%E9%99%90&#34;&gt;如何避免 OpenAI 封禁账号 API权限&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/easychen/openai-gpt-dev-notes-for-cn-developer/master/#%E5%A6%82%E4%BD%95%E7%9F%A5%E9%81%93-openai-%E6%8E%A5%E5%8F%A3%E7%8A%B6%E6%80%81&#34;&gt;如何知道 OpenAI 接口状态&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ChatGPT &amp;amp;&amp;amp; OpenAI 的关系&lt;/h2&gt; &#xA;&lt;p&gt;ChatGPT 是 OpenAI 推出的应用，使用的是最新的模型；而 OpenAI 开放接口的模型是 gpt-3.5-turbo ，这个模型比 ChatGPT 应用要笨。但 ChatGPT 用的最新模型没有接口，只能通过无头浏览器等方式来使用（不稳定）。&lt;/p&gt; &#xA;&lt;h2&gt;OpenAI API 接口能做什么&lt;/h2&gt; &#xA;&lt;p&gt;能做的事情很多，可以查看&lt;a href=&#34;https://platform.openai.com/docs&#34;&gt;官方文档&lt;/a&gt;，但这个文档中国网络目前无法访问。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/easychen/openai-gpt-dev-notes-for-cn-developer/master/images/20230307155346.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;具体来讲，OpenAI 所有的可用的接口都在里边，包括语音识别和图片生成。但真正智能的其实只有 &lt;code&gt;gpt-3.5-turbo&lt;/code&gt;，因此刚开始不用看其他内容。&lt;/p&gt; &#xA;&lt;p&gt;目前大家看到的绝大部分GPT类应用都是由 &lt;code&gt;gpt-3.5-turbo&lt;/code&gt; 模型的 &lt;code&gt;chat completions&lt;/code&gt; 对话补全接口实现的。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/easychen/openai-gpt-dev-notes-for-cn-developer/master/images/20230307150247.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;chat completions 接口如何使用？&lt;/h2&gt; &#xA;&lt;p&gt;可以通过很多方式来使用，比如使用官方SDK，第三方项目，但其实只需要一个HTTP请求就可以。以下是官方文档给出的例子：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl https://api.openai.com/v1/chat/completions \&#xA;  -H &#39;Content-Type: application/json&#39; \&#xA;  -H &#39;Authorization: Bearer YOUR_API_KEY&#39; \&#xA;  -d &#39;{&#xA;  &#34;model&#34;: &#34;gpt-3.5-turbo&#34;,&#xA;  &#34;messages&#34;: [{&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;Hello!&#34;}]&#xA;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;从里边可以看到，需要的信息有：&lt;/p&gt; &#xA;&lt;p&gt;① 请求地址： &lt;code&gt;https://api.openai.com/v1/chat/completions&lt;/code&gt; 这个地址目前在国内大部分地区已经无法访问了，后边会讲解决办法&lt;/p&gt; &#xA;&lt;p&gt;② 最常用的接口参数包括：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;model: 必填，建议使用 &lt;code&gt;gpt-3.5-turbo&lt;/code&gt;，便宜。计费后边会讲。&lt;/li&gt; &#xA; &lt;li&gt;messages: AI 进行提问的问题或信息。&lt;/li&gt; &#xA; &lt;li&gt;max_tokens: 选填，指定生成回答的最大长度。&lt;/li&gt; &#xA; &lt;li&gt;stream: 选填，是否按流的方式发送内容。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;其中 messages的格式为：&lt;code&gt;{&#34;role&#34;,&#34;content&#34;}&lt;/code&gt;。一般用 &lt;code&gt;user&lt;/code&gt; 发送用户问题；&lt;code&gt;system&lt;/code&gt; 发送给模型提示信息。&lt;/p&gt; &#xA;&lt;p&gt;例如：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[&#xA;  {&#34;role&#34;: &#34;system&#34;, &#34;content&#34;: &#34;You are a helpful assistant that translates English to French.&#34;},&#xA;  {&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;Translate the following English text to French: {text}&#34;}&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;知道了这些基本就可以跑通GPT流程了，其他role可以稍后优化时来做。&lt;/p&gt; &#xA;&lt;h3&gt;Stream 参数&lt;/h3&gt; &#xA;&lt;p&gt;这里单独说一下 stream 参数，当它设置为 true 时，API 会以 SSE（ Server Side Event ）方式返回内容。&lt;/p&gt; &#xA;&lt;p&gt;SSE 本质上还是 HTTP 协议，只不过它是一个长链接，先输出一个 &lt;code&gt;header(&#34;Content-Type: text/event-stream&#34;)&lt;/code&gt; ， 然后持续不断地输出内容直到完成。如果不是做实时聊天，建议直接false掉。&lt;/p&gt; &#xA;&lt;p&gt;需要注意的是，开启stream 后，将不会返回 usage 信息，这对精准计费有影响&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#34;id&#34;:&#34;chatcmpl-6s3hNohxOliHi8zR7m5UTrLm4cWWc&#34;,&#34;object&#34;:&#34;chat.completion.chunk&#34;,&#34;created&#34;:1678341949,&#34;model&#34;:&#34;gpt-3.5-turbo-0301&#34;,&#34;choices&#34;:[{&#34;delta&#34;:{&#34;content&#34;:&#34;我&#34;},&#34;index&#34;:0,&#34;finish_reason&#34;:null}]}&#xA;{&#34;id&#34;:&#34;chatcmpl-6s3hNohxOliHi8zR7m5UTrLm4cWWc&#34;,&#34;object&#34;:&#34;chat.completion.chunk&#34;,&#34;created&#34;:1678341949,&#34;model&#34;:&#34;gpt-3.5-turbo-0301&#34;,&#34;choices&#34;:[{&#34;delta&#34;:{&#34;content&#34;:&#34;没有&#34;},&#34;index&#34;:0,&#34;finish_reason&#34;:null}]}&#xA;{&#34;id&#34;:&#34;chatcmpl-6s3hNohxOliHi8zR7m5UTrLm4cWWc&#34;,&#34;object&#34;:&#34;chat.completion.chunk&#34;,&#34;created&#34;:1678341949,&#34;model&#34;:&#34;gpt-3.5-turbo-0301&#34;,&#34;choices&#34;:[{&#34;delta&#34;:{&#34;content&#34;:&#34;当前&#34;},&#34;index&#34;:0,&#34;finish_reason&#34;:null}]}&#xA;{&#34;id&#34;:&#34;chatcmpl-6s3hNohxOliHi8zR7m5UTrLm4cWWc&#34;,&#34;object&#34;:&#34;chat.completion.chunk&#34;,&#34;created&#34;:1678341949,&#34;model&#34;:&#34;gpt-3.5-turbo-0301&#34;,&#34;choices&#34;:[{&#34;delta&#34;:{&#34;content&#34;:&#34;日期&#34;},&#34;index&#34;:0,&#34;finish_reason&#34;:null}]}&#xA;{&#34;id&#34;:&#34;chatcmpl-6s3hNohxOliHi8zR7m5UTrLm4cWWc&#34;,&#34;object&#34;:&#34;chat.completion.chunk&#34;,&#34;created&#34;:1678341949,&#34;model&#34;:&#34;gpt-3.5-turbo-0301&#34;,&#34;choices&#34;:[{&#34;delta&#34;:{&#34;content&#34;:&#34;的&#34;},&#34;index&#34;:0,&#34;finish_reason&#34;:null}]}&#xA;{&#34;id&#34;:&#34;chatcmpl-6s3hNohxOliHi8zR7m5UTrLm4cWWc&#34;,&#34;object&#34;:&#34;chat.completion.chunk&#34;,&#34;created&#34;:1678341949,&#34;model&#34;:&#34;gpt-3.5-turbo-0301&#34;,&#34;choices&#34;:[{&#34;delta&#34;:{&#34;content&#34;:&#34;实&#34;},&#34;index&#34;:0,&#34;finish_reason&#34;:null}]}&#xA;{&#34;id&#34;:&#34;chatcmpl-6s3hNohxOliHi8zR7m5UTrLm4cWWc&#34;,&#34;object&#34;:&#34;chat.completion.chunk&#34;,&#34;created&#34;:1678341949,&#34;model&#34;:&#34;gpt-3.5-turbo-0301&#34;,&#34;choices&#34;:[{&#34;delta&#34;:{&#34;content&#34;:&#34;时&#34;},&#34;index&#34;:0,&#34;finish_reason&#34;:null}]}&#xA;{&#34;id&#34;:&#34;chatcmpl-6s3hNohxOliHi8zR7m5UTrLm4cWWc&#34;,&#34;object&#34;:&#34;chat.completion.chunk&#34;,&#34;created&#34;:1678341949,&#34;model&#34;:&#34;gpt-3.5-turbo-0301&#34;,&#34;choices&#34;:[{&#34;delta&#34;:{&#34;content&#34;:&#34;信息&#34;},&#34;index&#34;:0,&#34;finish_reason&#34;:null}]}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;一个猜想：通过观察SSE返回的内容，感觉它每次很可能是一次返回一个Token，如果这样的话，直接Count Event数量就可以知道Token数量了，但依然需要自己计算 input 部分的 Token。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;其他参数&lt;/h3&gt; &#xA;&lt;p&gt;接口的其他参数可以看&lt;a href=&#34;https://platform.openai.com/docs/api-reference/chat&#34;&gt;官方文档&lt;/a&gt;，访问不了的同学可以看我做的截图。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/easychen/openai-gpt-dev-notes-for-cn-developer/master/images/20230307143748.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/easychen/openai-gpt-dev-notes-for-cn-developer/master/images/20230307143831.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Chat completions 接口如何计费？&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;chat completions&lt;/code&gt; 接口按 token 计费，有一个专门的算法来计算 token。输入和输出全部都会计入到 token 里边，在 &lt;code&gt;chat completions&lt;/code&gt; 接口的 &lt;code&gt;usage&lt;/code&gt; 里边会有具体消耗的 token 数。&lt;/p&gt; &#xA;&lt;p&gt;如果你要自己计算，可以用这个&lt;a href=&#34;https://tiktokenizer.vercel.app&#34;&gt;在线表单&lt;/a&gt;，程序计算可以看看这两个项目：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dqbd/tiktokenizer&#34;&gt;https://github.com/dqbd/tiktokenizer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openai/tiktoken&#34;&gt;https://github.com/openai/tiktoken&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;除了 &lt;code&gt;gpt-3.5-turbo&lt;/code&gt; 模型的 &lt;code&gt;chat completions&lt;/code&gt; 接口，还有 &lt;code&gt;text-davinci-003&lt;/code&gt; 模型的 &lt;code&gt;text completions&lt;/code&gt; 接口可以用，但是价格更贵，效果更差 🤣&lt;/p&gt; &#xA;&lt;p&gt;你可以在 &lt;a href=&#34;https://openai.com/pricing&#34;&gt;https://openai.com/pricing&lt;/a&gt; 查询到价格，以下是3月中旬的定价&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;   &lt;th&gt;Usage&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gpt-3.5-turbo (ChatGPT)&lt;/td&gt; &#xA;   &lt;td&gt;$0.002 / 1K tokens&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Davinci (InstructGPT)&lt;/td&gt; &#xA;   &lt;td&gt;$0.0200 / 1K tokens&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ada (InstructGPT)&lt;/td&gt; &#xA;   &lt;td&gt;$0.0004 / 1K tokens&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Babbage (InstructGPT)&lt;/td&gt; &#xA;   &lt;td&gt;$0.0005 / 1K tokens&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Curie (InstructGPT)&lt;/td&gt; &#xA;   &lt;td&gt;$0.0020 / 1K tokens&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;chat completions 接口能做什么 ①&lt;/h2&gt; &#xA;&lt;p&gt;虽然 &lt;code&gt;chat completions&lt;/code&gt; 看起来像是一个聊天接口，但接口设计上并没有为聊天优化，因为这个接口是记不住上下文的。&lt;/p&gt; &#xA;&lt;p&gt;为了让对话具有连续性，我们每次请求需要带上上次的聊天记录。有多种方式解决这个问题，一个是直接在messages参数中加上聊天记录。其中，GPT返回的内容用 &lt;code&gt;assistant&lt;/code&gt; role。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[&#xA;     {&#34;role&#34;: &#34;system&#34;, &#34;content&#34;: &#34;You are a helpful assistant.&#34;},&#xA;     {&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;Who won the world series in 2020?&#34;},&#xA;     {&#34;role&#34;: &#34;assistant&#34;, &#34;content&#34;: &#34;The Los Angeles Dodgers won the World Series in 2020.&#34;},&#xA;     {&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;Where was it played?&#34;}&#xA; ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;另一个方式是使用第三方库，比如&lt;code&gt;chatgpt-api&lt;/code&gt;，它可以自动帮你发送聊天记录（通过指定对话的&lt;code&gt;parentMessageId&lt;/code&gt;实现）：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/transitive-bullshit/chatgpt-api&#34;&gt;https://github.com/transitive-bullshit/chatgpt-api&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/easychen/openai-gpt-dev-notes-for-cn-developer/master/images/20230307150942.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;在加上对话记录后，&lt;code&gt;chat completions&lt;/code&gt; 接口就可以制作一个看起来有智能的聊天应用了。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;如果你要在国内运营聊天机器人之类的话，请记得将内容通过文本内容审核接口进行审核，否则很可能导致被封。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;chat completions 接口能做什么 ②&lt;/h2&gt; &#xA;&lt;p&gt;其实除了对话，GPT有很强的内容总结归纳能力，另外由于它能理解内容结构，同时本身又是语言模型，因此对结构化翻译很擅长。&lt;/p&gt; &#xA;&lt;p&gt;比如，我经常用它翻译JSON和Markdown，大部分情况下效果很好。在自用体验很好的情况下，我们可以将其制作为应用。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/easychen/openai-gpt-dev-notes-for-cn-developer/master/images/20230307151810.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;应用开发非常简单，我只用一天时间开发了&lt;a href=&#34;https://ai.ftqq.com/&#34;&gt;AiBox&lt;/a&gt;，按基本的web应用开发就可以，重点说几个细节：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;提示词：直接把提示词以 system 的 role 提交就可以。&lt;/li&gt; &#xA; &lt;li&gt;Key问题：开发者的Key肯定是不够用的，因此一般会让使用者填写自己的Key。但是国内用户没有海外手机号，无法申请key;申请下来API直接访问也不通，解决方案有几种，后边专门讲&lt;/li&gt; &#xA; &lt;li&gt;Token计算和限制问题：如果使用者用自己的Key，为了提升体验，我们可以提供一个Token计算，让用户知道自己的会花多少钱。另外如果你没有用第三方那个库来分拆，那么一次请求的内容不要超过 max_tokens 的限制。这个值一般是 4096。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;国内是否可以上线运营GPT相关业务？&lt;/h2&gt; &#xA;&lt;p&gt;就目前而言，我了解到的情况是大部分企业没有收到明确禁止运营GPT相关业务的通知，但在国内运营要做好内容安全，比如对接口返回的内容再过一层内容审核。否则如果在应用中出现违规内容被举报，就会被封禁。&lt;/p&gt; &#xA;&lt;p&gt;但这是一个随时可能变化的情况，我们准备了&lt;a href=&#34;https://github.com/easychen/openai-api-proxy/issues/11&#34;&gt;一个issue&lt;/a&gt;供大家反馈。&lt;/p&gt; &#xA;&lt;h2&gt;如何解决国内用户无法注册OpenAI账号、无法访问OpenAI接口的问题？&lt;/h2&gt; &#xA;&lt;p&gt;两个思路，一个是绕道海外去注册，通过代理使用服务；另一个是直接使用第三方代理API服务。前者可以暂时解决当前的问题；后者更方便省心。&lt;/p&gt; &#xA;&lt;h3&gt;注册OpenAI&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;准备一个海外的网络&lt;/li&gt; &#xA; &lt;li&gt;准备一个海外手机号来接收验证短信，可以用&lt;a href=&#34;https://sms-activate.org/?ref=4207095&#34;&gt;海外虚拟号码&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;注册完成后，进入&lt;a href=&#34;https://openai.com/api/&#34;&gt;API页面&lt;/a&gt; 创建Key，然后就可以使用了。&lt;/p&gt; &#xA;&lt;p&gt;这个方案目前可行，是因为OpenAI给每个新用户提供了18美金的免费额度。但是一旦不再提供，就会面临充值的问题。目前OpenAI不接受中国信用卡，因此还必须准备一个海外信用卡。也就是说，要长久稳定的使用，必须有海外信用卡。&lt;/p&gt; &#xA;&lt;p&gt;以前有财付通的海外虚拟信用卡，后来服务下线了。最近看了下，很多500RMB起，还只支持电商网站，感觉不太靠谱 🤣&lt;/p&gt; &#xA;&lt;h3&gt;访问OpenAI API&lt;/h3&gt; &#xA;&lt;p&gt;3月3日开始，国内大部分网络不再能直接访问 OpenAI 接口。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/easychen/openai-gpt-dev-notes-for-cn-developer/master/images/20230307153602.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;因此你需要架设代理来访问OpenAI 接口。你可以将整个服务器代理到海外网络，或者只是简单的通过 Cloudflare 或者 腾讯云函数来部署API代理。&lt;/p&gt; &#xA;&lt;p&gt;相对来说，我觉得腾讯云香港可能稳定点，&lt;a href=&#34;https://github.com/easychen/openai-api-proxy/raw/master/FUNC.md&#34;&gt;教程可以看这里&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/easychen/openai-gpt-dev-notes-for-cn-developer/master/images/20230307155459.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;需要注意的是，部分API代理不支持SSE，因此不能实时返回内容。当然，有同学说腾讯云的 ApiGateway 直接就能代理，但我测试了下没成功。&lt;/p&gt; &#xA;&lt;h3&gt;通过第三方接口访问&lt;/h3&gt; &#xA;&lt;p&gt;如果你搞不定海外手机号和信用卡，或者自己不想架设代理，那么可以考虑用像&lt;a href=&#34;https://api2d.com&#34;&gt;API2D&lt;/a&gt;这样的第三方代理API。&lt;/p&gt; &#xA;&lt;p&gt;主要的优点：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;基本兼容原有接口，只需要改下 API endpoint 和 Key&lt;/li&gt; &#xA; &lt;li&gt;接口国内直接可以访问，无需架设代理&lt;/li&gt; &#xA; &lt;li&gt;支持微信和国内卡充值，提供最小0.5美金/3.5人民币的测试档位，GitHub注册还有50点免费额度试用&lt;/li&gt; &#xA; &lt;li&gt;添加 moderation 参数，可以返回内容审核结果，省事&lt;/li&gt; &#xA; &lt;li&gt;推荐可以获得点数，这里是我的&lt;a href=&#34;https://api2d.com/r/186008&#34;&gt;推荐链接&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;缺点：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;不支持 stream 参数，因此只能一次性返回内容&lt;/li&gt; &#xA; &lt;li&gt;目前只支持 chat 和 embeddings 接口&lt;/li&gt; &#xA; &lt;li&gt;价格比官方略高，大概1.5倍，当然这个包含了流量中转的成本&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;利息相关：api2d这个产品是作者加拿大的朋友做的，而且作为早期用户一直在重度使用&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;如何避免 OpenAI 封禁账号 API权限&lt;/h2&gt; &#xA;&lt;p&gt;最近得到反馈，很多架设香港代理的账号收到了邮件被禁用了权限。经过群里大家的讨论，总结的经验如下：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;不要使用 OpenAI 不服务地区的代理&lt;/li&gt; &#xA; &lt;li&gt;虚拟海外手机号更可能导致账号被封&lt;/li&gt; &#xA; &lt;li&gt;绑定信用卡可以大幅提升账号存活率&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;如何知道 OpenAI 接口状态&lt;/h2&gt; &#xA;&lt;p&gt;OpenAI官方提供了一个&lt;a href=&#34;https://status.openai.com/&#34;&gt;状态页&lt;/a&gt;，虽然小故障不怎么显示，但大面积宕机时能看到公告。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1294760/223604103-4093bdd4-4455-4f55-a294-fb7003325000.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>