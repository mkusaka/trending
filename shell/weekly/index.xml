<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-19T01:46:13Z</updated>
  <subtitle>Weekly Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>inkonchain/node</title>
    <updated>2025-01-19T01:46:13Z</updated>
    <id>tag:github.com,2025-01-19:/inkonchain/node</id>
    <link href="https://github.com/inkonchain/node" rel="alternate"></link>
    <summary type="html">&lt;p&gt;How to run an Ink Node&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ink Node&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Forked and customized from &lt;a href=&#34;https://github.com/smartcontracts/simple-optimism-node&#34;&gt;https://github.com/smartcontracts/simple-optimism-node&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;A simple docker compose script for launching full / archive node for the Ink chain.&lt;/p&gt; &#xA;&lt;h2&gt;Recommended Hardware&lt;/h2&gt; &#xA;&lt;h3&gt;Mainnet&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;16GB+ RAM&lt;/li&gt; &#xA; &lt;li&gt;2 TB SSD (NVME Recommended)&lt;/li&gt; &#xA; &lt;li&gt;100mb/s+ Download&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Testnet&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;16GB+ RAM&lt;/li&gt; &#xA; &lt;li&gt;500 GB SSD (NVME Recommended)&lt;/li&gt; &#xA; &lt;li&gt;100mb/s+ Download&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation and Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Install docker and docker compose&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: If you&#39;re not logged in as root, you&#39;ll need to log out and log in again after installation to complete the docker installation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Note: This command installs docker and docker compose for Ubuntu. For windows and mac desktop or laptop, please use Docker Desktop. For other OS, please find instructions in Google.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Update and upgrade packages&#xA;sudo apt-get update&#xA;sudo apt-get upgrade -y&#xA;&#xA;### Docker and docker compose prerequisites&#xA;sudo apt-get install -y curl&#xA;sudo apt-get install -y gnupg&#xA;sudo apt-get install -y ca-certificates&#xA;sudo apt-get install -y lsb-release&#xA;&#xA;### Download the docker gpg file to Ubuntu&#xA;sudo mkdir -p /etc/apt/keyrings&#xA;curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg&#xA;&#xA;### Add Docker and docker compose support to the Ubuntu&#39;s packages list&#xA;echo &#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&#34; | sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null&#xA;&#xA;sudo apt-get update&#xA;&#xA;### Install docker and docker compose on Ubuntu&#xA;sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin&#xA;&#xA;sudo usermod -aG docker $(whoami)&#xA;&#xA;### Verify the Docker and docker compose install on Ubuntu&#xA;sudo docker run hello-world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(For non-root user) After logged out and logged back in, test if docker is working by running.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker ps&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It should returns an empty container list without having any error. Otherwise, restart your machine if there are errors.&lt;/p&gt; &#xA;&lt;h3&gt;Clone the Repository&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/inkonchain/node&#xA;cd node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Copy .env.example to .env&lt;/h3&gt; &#xA;&lt;p&gt;Make a copy of &lt;code&gt;.env.example&lt;/code&gt; named &lt;code&gt;.env&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cp .env.example .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open &lt;code&gt;.env&lt;/code&gt; with your editor of choice&lt;/p&gt; &#xA;&lt;h3&gt;Mandatory configurations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;NETWORK_NAME&lt;/strong&gt; - Choose which Optimism network layer you want to operate on: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;ink-sepolia&lt;/code&gt; - Ink Sepolia (Testnet)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ink-mainnet&lt;/code&gt; - Ink (Mainnet)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NODE_TYPE&lt;/strong&gt; - Choose the type of node you want to run: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;full&lt;/code&gt; (Full node) - A Full node contains a few recent blocks without historical states.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;archive&lt;/code&gt; (Archive node) - An Archive node stores the complete history of the blockchain, including historical states.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OP_NODE__RPC_ENDPOINT&lt;/strong&gt; - Specify the endpoint for the RPC of Layer 1 (e.g., Ethereum mainnet). For instance, you can use the free plan of Quicknode for the Ethereum mainnet.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OP_NODE__L1_BEACON&lt;/strong&gt; - Specify the beacon endpoint of Layer 1. You can use &lt;a href=&#34;https://www.quicknode.com&#34;&gt;QuickNode for the beacon endpoint&lt;/a&gt;. For example: &lt;a href=&#34;https://xxx-xxx-xxx.quiknode.pro/db55a3908ba7e4e5756319ffd71ec270b09a7dce&#34;&gt;https://xxx-xxx-xxx.quiknode.pro/db55a3908ba7e4e5756319ffd71ec270b09a7dce&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OP_NODE__RPC_TYPE&lt;/strong&gt; - Specify the service provider for the RPC endpoint you&#39;ve chosen in the previous step. The available options are: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;alchemy&lt;/code&gt; - Alchemy&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;quicknode&lt;/code&gt; - Quicknode (ETH only)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;erigon&lt;/code&gt; - Erigon&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;basic&lt;/code&gt; - Other providers&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Optional configurations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;OP_GETH__SYNCMODE&lt;/strong&gt; - Specify sync mode for the execution client &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Unspecified - Use default snap sync for full node and full sync for archive node&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;snap&lt;/code&gt; - Snap Sync (Default)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;full&lt;/code&gt; - Full Sync (For archive node, not recommended for full node)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;IMAGE_TAG__[...]&lt;/strong&gt; - Use custom docker image for specified components.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PORT__[...]&lt;/strong&gt; - Use custom port for specified components.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Operating the Node&lt;/h2&gt; &#xA;&lt;h3&gt;Start&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker compose up -d --build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will start the node in a detached shell (&lt;code&gt;-d&lt;/code&gt;), meaning the node will continue to run in the background. We recommended to add &lt;code&gt;--build&lt;/code&gt; to make sure that latest changes are being applied.&lt;/p&gt; &#xA;&lt;h3&gt;View logs&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker compose logs -f --tail 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To view logs of all containers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker compose logs &amp;lt;CONTAINER_NAME&amp;gt; -f --tail 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To view logs for a specific container. Most commonly used &lt;code&gt;&amp;lt;CONTAINER_NAME&amp;gt;&lt;/code&gt; are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;op-geth&lt;/li&gt; &#xA; &lt;li&gt;op-node&lt;/li&gt; &#xA; &lt;li&gt;bedrock-init&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Stop&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker compose down&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will shut down the node without wiping any volumes. You can safely run this command and then restart the node again.&lt;/p&gt; &#xA;&lt;h3&gt;Restart&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker compose restart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will restart the node safely with minimal downtime but without upgrading the node.&lt;/p&gt; &#xA;&lt;h3&gt;Upgrade&lt;/h3&gt; &#xA;&lt;p&gt;Pull the latest updates from GitHub, and Docker Hub and rebuild the container.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git pull&#xA;docker compose pull&#xA;docker compose up -d --build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will upgrade your node with minimal downtime.&lt;/p&gt; &#xA;&lt;h3&gt;Wipe [DANGER]&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker compose down -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will shut down the node and WIPE ALL DATA. Proceed with caution!&lt;/p&gt; &#xA;&lt;h2&gt;Monitoring&lt;/h2&gt; &#xA;&lt;h3&gt;Estimate remaining sync time&lt;/h3&gt; &#xA;&lt;p&gt;Run progress.sh to estimate remaining sync time and speed.&lt;/p&gt; &#xA;&lt;p&gt;Uses &lt;code&gt;Cast&lt;/code&gt; command from Foundry tool set. Installation instructions here: &lt;a href=&#34;https://getfoundry.sh/&#34;&gt;https://getfoundry.sh/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./progress.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will show the sync speed in blocks per minute and the time until sync is completed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Chain ID: 57073&#xA;Please wait&#xA;Blocks per minute: ...&#xA;Hours until sync is completed: ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Grafana dashboard&lt;/h3&gt; &#xA;&lt;p&gt;Grafana is exposed at &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; and comes with one pre-loaded dashboard (&#34;Simple Node Dashboard&#34;). Simple Node Dashboard includes basic node information and will tell you if your node ever falls out of sync with the reference L2 node or if a state root fault is detected.&lt;/p&gt; &#xA;&lt;p&gt;Use the following login details to access the dashboard:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Username: &lt;code&gt;admin&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Password: &lt;code&gt;ink&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Navigate over to &lt;code&gt;Dashboards &amp;gt; Manage &amp;gt; Simple Node Dashboard&lt;/code&gt; to see the dashboard, see the following gif if you need help:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14298799/171476634-0cb84efd-adbf-4732-9c1d-d737915e1fa7.gif&#34; alt=&#34;metrics dashboard gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;Walking back L1Block with curr=0x0000...:0 next=0x0000...:0&lt;/h3&gt; &#xA;&lt;p&gt;If you experience &#34;walking back L1Block with curr=0x0000...:0 next=0x0000...:0&#34; for a long time after the Ecotone upgrade, consider these fixes:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Wait for a few minutes. This issue usually resolves itself after some time.&lt;/li&gt; &#xA; &lt;li&gt;Restart docker compose: &lt;code&gt;docker compose down&lt;/code&gt; and &lt;code&gt;docker compose up -d --build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If it&#39;s still not working, try setting &lt;code&gt;OP_GETH__SYNCMODE=full&lt;/code&gt; in .env and restart docker compose&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>rbenv/rbenv</title>
    <updated>2025-01-19T01:46:13Z</updated>
    <id>tag:github.com,2025-01-19:/rbenv/rbenv</id>
    <link href="https://github.com/rbenv/rbenv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Manage your app&#39;s Ruby environment&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Seamlessly manage your app’s Ruby environment with rbenv.&lt;/h1&gt; &#xA;&lt;p&gt;rbenv is a version manager tool for the Ruby programming language on Unix-like systems. It is useful for switching between multiple Ruby versions on the same machine and for ensuring that each project you are working on always runs on the correct Ruby version.&lt;/p&gt; &#xA;&lt;h2&gt;How It Works&lt;/h2&gt; &#xA;&lt;p&gt;After rbenv injects itself into your PATH at installation time, any invocation of &lt;code&gt;ruby&lt;/code&gt;, &lt;code&gt;gem&lt;/code&gt;, &lt;code&gt;bundler&lt;/code&gt;, or other Ruby-related executable will first activate rbenv. Then, rbenv scans the current project directory for a file named &lt;code&gt;.ruby-version&lt;/code&gt;. If found, that file determines the version of Ruby that should be used within that directory. Finally, rbenv looks up that Ruby version among those installed under &lt;code&gt;~/.rbenv/versions/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can choose the Ruby version for your project with, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd myproject&#xA;# choose Ruby version 3.1.2:&#xA;rbenv local 3.1.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Doing so will create or update the &lt;code&gt;.ruby-version&lt;/code&gt; file in the current directory with the version that you&#39;ve chosen. A different project of yours that is another directory might be using a different version of Ruby altogether—rbenv will seamlessly transition from one Ruby version to another when you switch projects.&lt;/p&gt; &#xA;&lt;p&gt;Finally, almost every aspect of rbenv&#39;s mechanism is &lt;a href=&#34;https://github.com/rbenv/rbenv/wiki/Plugins&#34;&gt;customizable via plugins&lt;/a&gt; written in bash.&lt;/p&gt; &#xA;&lt;p&gt;The simplicity of rbenv has its benefits, but also some downsides. See the &lt;a href=&#34;https://github.com/rbenv/rbenv/wiki/Comparison-of-version-managers&#34;&gt;comparison of version managers&lt;/a&gt; for more details and some alternatives.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;On systems with Homebrew package manager, the “Using Package Managers” method is recommended. On other systems, “Basic Git Checkout” might be the easiest way of ensuring that you are always installing the latest version of rbenv.&lt;/p&gt; &#xA;&lt;h3&gt;Using Package Managers&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install rbenv using one of the following approaches.&lt;/p&gt; &lt;h4&gt;Homebrew&lt;/h4&gt; &lt;p&gt;On macOS or Linux, we recommend installing rbenv with &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install rbenv&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;Debian, Ubuntu, and their derivatives&lt;/h4&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;[!CAUTION]&lt;br&gt; The version of rbenv that is packaged and maintained in official Debian and Ubuntu repositories is &lt;em&gt;out of date&lt;/em&gt;. To install the latest version, it is recommended to &lt;a href=&#34;https://raw.githubusercontent.com/rbenv/rbenv/master/#basic-git-checkout&#34;&gt;install rbenv using git&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt install rbenv&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;Arch Linux and its derivatives&lt;/h4&gt; &lt;p&gt;Archlinux has an &lt;a href=&#34;https://aur.archlinux.org/packages/rbenv/&#34;&gt;AUR Package&lt;/a&gt; for rbenv and you can install it from the AUR using the instructions from this &lt;a href=&#34;https://wiki.archlinux.org/index.php/Arch_User_Repository#Installing_and_upgrading_packages&#34;&gt;wiki page&lt;/a&gt;.&lt;/p&gt; &lt;h4&gt;Fedora&lt;/h4&gt; &lt;p&gt;Fedora has an &lt;a href=&#34;https://packages.fedoraproject.org/pkgs/rbenv/rbenv/&#34;&gt;official package&lt;/a&gt; which you can install:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo dnf install rbenv&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set up your shell to load rbenv.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rbenv init&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Close your Terminal window and open a new one so your changes take effect.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;That&#39;s it! You are now ready to &lt;a href=&#34;https://raw.githubusercontent.com/rbenv/rbenv/master/#installing-ruby-versions&#34;&gt;install some Ruby versions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Basic Git Checkout&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;br&gt; For a more automated install, you can use &lt;a href=&#34;https://github.com/rbenv/rbenv-installer#rbenv-installer&#34;&gt;rbenv-installer&lt;/a&gt;. If you do not want to execute scripts downloaded from a web URL or simply prefer a manual approach, follow the steps below.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This will get you going with the latest version of rbenv without needing a system-wide install.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone rbenv into &lt;code&gt;~/.rbenv&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/rbenv/rbenv.git ~/.rbenv&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set up your shell to load rbenv.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~/.rbenv/bin/rbenv init&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you are curious, see here to &lt;a href=&#34;https://raw.githubusercontent.com/rbenv/rbenv/master/#how-rbenv-hooks-into-your-shell&#34;&gt;understand what &lt;code&gt;init&lt;/code&gt; does&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Restart your shell so that these changes take effect. (Opening a new terminal tab will usually do it.)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Shell completions&lt;/h4&gt; &#xA;&lt;p&gt;When &lt;em&gt;manually&lt;/em&gt; installing rbenv, it might be useful to note how completion scripts for various shells work. Completion scripts help with typing rbenv commands by expanding partially entered rbenv command names and option flags; typically this is invoked by pressing &lt;kbd&gt;Tab&lt;/kbd&gt; key in an interactive shell.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;strong&gt;bash&lt;/strong&gt; completion script for rbenv ships with the project and gets &lt;a href=&#34;https://raw.githubusercontent.com/rbenv/rbenv/master/#how-rbenv-hooks-into-your-shell&#34;&gt;loaded by the &lt;code&gt;rbenv init&lt;/code&gt; mechanism&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;strong&gt;zsh&lt;/strong&gt; completion script ships with the project, but needs to be added to FPATH in zsh before it can be discovered by the shell. One way to do this would be to edit &lt;code&gt;~/.zshrc&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# assuming that rbenv was installed to `~/.rbenv`&#xA;FPATH=~/.rbenv/completions:&#34;$FPATH&#34;&#xA;&#xA;autoload -U compinit&#xA;compinit&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;strong&gt;fish&lt;/strong&gt; completion script for rbenv ships with the fish shell itself and is not maintained by the rbenv project.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installing Ruby versions&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;rbenv install&lt;/code&gt; command does not ship with rbenv out-of-the-box, but is provided by the &lt;a href=&#34;https://github.com/rbenv/ruby-build#readme&#34;&gt;ruby-build&lt;/a&gt; plugin.&lt;/p&gt; &#xA;&lt;p&gt;Before attempting to install Ruby, &lt;strong&gt;check that &lt;a href=&#34;https://github.com/rbenv/ruby-build/wiki#suggested-build-environment&#34;&gt;your build environment&lt;/a&gt; has the necessary tools and libraries&lt;/strong&gt;. Then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# list latest stable versions:&#xA;rbenv install -l&#xA;&#xA;# list all local versions:&#xA;rbenv install -L&#xA;&#xA;# install a Ruby version:&#xA;rbenv install 3.1.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For troubleshooting &lt;code&gt;BUILD FAILED&lt;/code&gt; scenarios, check the &lt;a href=&#34;https://github.com/rbenv/ruby-build/discussions/categories/build-failures&#34;&gt;ruby-build Discussions section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;br&gt; If the &lt;code&gt;rbenv install&lt;/code&gt; command wasn&#39;t found, you can install ruby-build as a plugin:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/rbenv/ruby-build.git &#34;$(rbenv root)&#34;/plugins/ruby-build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Set a Ruby version to finish installation and start using Ruby:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rbenv global 3.1.2   # set the default Ruby version for this machine&#xA;# or:&#xA;rbenv local 3.1.2    # set the Ruby version for this directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively to the &lt;code&gt;rbenv install&lt;/code&gt; command, you can download and compile Ruby manually as a subdirectory of &lt;code&gt;~/.rbenv/versions&lt;/code&gt;. An entry in that directory can also be a symlink to a Ruby version installed elsewhere on the filesystem.&lt;/p&gt; &#xA;&lt;h4&gt;Installing Ruby gems&lt;/h4&gt; &#xA;&lt;p&gt;Select a Ruby version for your project using &lt;code&gt;rbenv local 3.1.2&lt;/code&gt;, for example. Then, proceed to install gems as you normally would:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gem install bundler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;br&gt; You &lt;em&gt;should not use sudo&lt;/em&gt; to install gems. Typically, the Ruby versions will be installed under your home directory and thus writeable by your user. If you get the “you don&#39;t have write permissions” error when installing gems, it&#39;s likely that your &#34;system&#34; Ruby version is still a global default. Change that with &lt;code&gt;rbenv global &amp;lt;version&amp;gt;&lt;/code&gt; and try again.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Check the location where gems are being installed with &lt;code&gt;gem env&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gem env home&#xA;# =&amp;gt; ~/.rbenv/versions/&amp;lt;version&amp;gt;/lib/ruby/gems/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Uninstalling Ruby versions&lt;/h4&gt; &#xA;&lt;p&gt;As time goes on, Ruby versions you install will accumulate in your &lt;code&gt;~/.rbenv/versions&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;To remove old Ruby versions, simply &lt;code&gt;rm -rf&lt;/code&gt; the directory of the version you want to remove. You can find the directory of a particular Ruby version with the &lt;code&gt;rbenv prefix&lt;/code&gt; command, e.g. &lt;code&gt;rbenv prefix 2.7.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/rbenv/ruby-build#readme&#34;&gt;ruby-build&lt;/a&gt; plugin provides an &lt;code&gt;rbenv uninstall&lt;/code&gt; command to automate the removal process.&lt;/p&gt; &#xA;&lt;h2&gt;Command Reference&lt;/h2&gt; &#xA;&lt;p&gt;The main rbenv commands you need to know are:&lt;/p&gt; &#xA;&lt;h3&gt;rbenv versions&lt;/h3&gt; &#xA;&lt;p&gt;Lists all Ruby versions known to rbenv, and shows an asterisk next to the currently active version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rbenv versions&#xA;  1.8.7-p352&#xA;  1.9.2-p290&#xA;* 1.9.3-p327 (set by /Users/sam/.rbenv/version)&#xA;  jruby-1.7.1&#xA;  rbx-1.2.4&#xA;  ree-1.8.7-2011.03&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;rbenv version&lt;/h3&gt; &#xA;&lt;p&gt;Displays the currently active Ruby version, along with information on how it was set.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rbenv version&#xA;1.9.3-p327 (set by /Users/sam/.rbenv/version)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;rbenv local&lt;/h3&gt; &#xA;&lt;p&gt;Sets a local application-specific Ruby version by writing the version name to a &lt;code&gt;.ruby-version&lt;/code&gt; file in the current directory. This version overrides the global version, and can be overridden itself by setting the &lt;code&gt;RBENV_VERSION&lt;/code&gt; environment variable or with the &lt;code&gt;rbenv shell&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rbenv local 3.1.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When run without a version number, &lt;code&gt;rbenv local&lt;/code&gt; reports the currently configured local version. You can also unset the local version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rbenv local --unset&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;rbenv global&lt;/h3&gt; &#xA;&lt;p&gt;Sets the global version of Ruby to be used in all shells by writing the version name to the &lt;code&gt;~/.rbenv/version&lt;/code&gt; file. This version can be overridden by an application-specific &lt;code&gt;.ruby-version&lt;/code&gt; file, or by setting the &lt;code&gt;RBENV_VERSION&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rbenv global 3.1.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The special version name &lt;code&gt;system&lt;/code&gt; tells rbenv to use the system Ruby (detected by searching your &lt;code&gt;$PATH&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;When run without a version number, &lt;code&gt;rbenv global&lt;/code&gt; reports the currently configured global version.&lt;/p&gt; &#xA;&lt;h3&gt;rbenv shell&lt;/h3&gt; &#xA;&lt;p&gt;Sets a shell-specific Ruby version by setting the &lt;code&gt;RBENV_VERSION&lt;/code&gt; environment variable in your shell. This version overrides application-specific versions and the global version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rbenv shell jruby-1.7.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When run without a version number, &lt;code&gt;rbenv shell&lt;/code&gt; reports the current value of &lt;code&gt;RBENV_VERSION&lt;/code&gt;. You can also unset the shell version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rbenv shell --unset&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you&#39;ll need rbenv&#39;s shell integration enabled (step 3 of the installation instructions) in order to use this command. If you prefer not to use shell integration, you may simply set the &lt;code&gt;RBENV_VERSION&lt;/code&gt; variable yourself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export RBENV_VERSION=jruby-1.7.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;rbenv rehash&lt;/h3&gt; &#xA;&lt;p&gt;Installs shims for all Ruby executables known to rbenv (&lt;code&gt;~/.rbenv/versions/*/bin/*&lt;/code&gt;). Typically you do not need to run this command, as it will run automatically after installing gems.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rbenv rehash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;rbenv which&lt;/h3&gt; &#xA;&lt;p&gt;Displays the full path to the executable that rbenv will invoke when you run the given command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rbenv which irb&#xA;/Users/sam/.rbenv/versions/1.9.3-p327/bin/irb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;rbenv whence&lt;/h3&gt; &#xA;&lt;p&gt;Lists all Ruby versions that contain the specified executable name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rbenv whence rackup&#xA;1.9.3-p327&#xA;jruby-1.7.1&#xA;ree-1.8.7-2011.03&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Environment variables&lt;/h2&gt; &#xA;&lt;p&gt;You can affect how rbenv operates with the following settings:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;name&lt;/th&gt; &#xA;   &lt;th&gt;default&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RBENV_VERSION&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specifies the Ruby version to be used.&lt;br&gt;Also see &lt;a href=&#34;https://raw.githubusercontent.com/rbenv/rbenv/master/#rbenv-shell&#34;&gt;&lt;code&gt;rbenv shell&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RBENV_ROOT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;~/.rbenv&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Defines the directory under which Ruby versions and shims reside.&lt;br&gt;Also see &lt;code&gt;rbenv root&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RBENV_DEBUG&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Outputs debug information.&lt;br&gt;Also as: &lt;code&gt;rbenv --debug &amp;lt;subcommand&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RBENV_HOOK_PATH&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/rbenv/rbenv/wiki/Authoring-plugins#rbenv-hooks&#34;&gt;&lt;em&gt;see wiki&lt;/em&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Colon-separated list of paths searched for rbenv hooks.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RBENV_DIR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$PWD&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Directory to start searching for &lt;code&gt;.ruby-version&lt;/code&gt; files.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;How rbenv hooks into your shell&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;rbenv init&lt;/code&gt; is a helper command to hook rbenv into a shell. This helper is part of the recommended installation instructions, but optional, as an experienced user can set up the following tasks manually. The &lt;code&gt;rbenv init&lt;/code&gt; command has two modes of operation:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;rbenv init&lt;/code&gt;: made for humans, this command edits your shell initialization files on disk to add rbenv to shell startup. (Prior to rbenv 1.3.0, this mode only printed user instructions to the terminal, but did nothing else.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;rbenv init -&lt;/code&gt;: made for machines, this command outputs a shell script suitable to be eval&#39;d by the user&#39;s shell.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;When &lt;code&gt;rbenv init&lt;/code&gt; is invoked from a bash shell, for example, it will add the following to the user&#39;s &lt;code&gt;~/.bashrc&lt;/code&gt; or &lt;code&gt;~/.bash_profile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Added by `rbenv init` on &amp;lt;DATE&amp;gt;&#xA;eval &#34;$(rbenv init - --no-rehash bash)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may add this line to your shell initialization files manually if you want to avoid running &lt;code&gt;rbenv init&lt;/code&gt; as part of the setup process. Here is what the eval&#39;d script does:&lt;/p&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Adds &lt;code&gt;rbenv&lt;/code&gt; executable to PATH if necessary.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Prepends &lt;code&gt;~/.rbenv/shims&lt;/code&gt; directory to PATH. This is basically the only requirement for rbenv to function properly.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Installs bash shell completion for rbenv commands.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Regenerates rbenv shims. If this step slows down your shell startup, you can invoke &lt;code&gt;rbenv init -&lt;/code&gt; with the &lt;code&gt;--no-rehash&lt;/code&gt; flag.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Installs the &#34;sh&#34; dispatcher. This bit is also optional, but allows rbenv and plugins to change variables in your current shell, making commands like &lt;code&gt;rbenv shell&lt;/code&gt; possible.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Uninstalling rbenv&lt;/h3&gt; &#xA;&lt;p&gt;The simplicity of rbenv makes it easy to temporarily disable it, or uninstall from the system.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;To &lt;strong&gt;disable&lt;/strong&gt; rbenv managing your Ruby versions, simply comment or remove the &lt;code&gt;rbenv init&lt;/code&gt; line from your shell startup configuration. This will remove rbenv shims directory from PATH, and future invocations like &lt;code&gt;ruby&lt;/code&gt; will execute the system Ruby version, bypassing rbenv completely.&lt;/p&gt; &lt;p&gt;While disabled, &lt;code&gt;rbenv&lt;/code&gt; will still be accessible on the command line, but your Ruby apps won&#39;t be affected by version switching.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To completely &lt;strong&gt;uninstall&lt;/strong&gt; rbenv, perform step (1) and then remove the rbenv root directory. This will &lt;strong&gt;delete all Ruby versions&lt;/strong&gt; that were installed under &lt;code&gt;`rbenv root`/versions/&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;rm -rf &#34;$(rbenv root)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you&#39;ve installed rbenv using a package manager, as a final step perform the rbenv package removal:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Homebrew: &lt;code&gt;brew uninstall rbenv&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Debian, Ubuntu, and their derivatives: &lt;code&gt;sudo apt purge rbenv&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Archlinux and its derivatives: &lt;code&gt;sudo pacman -R rbenv&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Tests are executed using &lt;a href=&#34;https://github.com/bats-core/bats-core&#34;&gt;Bats&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bats test&#xA;$ bats test/&amp;lt;file&amp;gt;.bats&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please feel free to submit pull requests and file bugs on the &lt;a href=&#34;https://github.com/rbenv/rbenv/issues&#34;&gt;issue tracker&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>