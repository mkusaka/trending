<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-28T01:45:24Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fscarmen2/Argo-Xray-JS-PaaS</title>
    <updated>2023-01-28T01:45:24Z</updated>
    <id>tag:github.com,2023-01-28:/fscarmen2/Argo-Xray-JS-PaaS</id>
    <link href="https://github.com/fscarmen2/Argo-Xray-JS-PaaS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;在 JS 容器平台部署 Xray + Argo 隧道，4种协议 Vless / Vmess / Trojan / SS + TLS + WS，不需 CF workers 反代&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Xray + Argo for Express.js PaaS&lt;/h1&gt; &#xA;&lt;p&gt;为 JS 平台而生&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;目录&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fscarmen2/Argo-Xray-JS-PaaS/main/README.md#%E9%A1%B9%E7%9B%AE%E7%89%B9%E7%82%B9&#34;&gt;项目特点&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fscarmen2/Argo-Xray-JS-PaaS/main/README.md#%E9%83%A8%E7%BD%B2&#34;&gt;部署&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fscarmen2/Argo-Xray-JS-PaaS/main/README.md#%E5%9C%A8-glitch-%E9%83%A8%E7%BD%B2%E9%87%8D%E7%82%B9&#34;&gt;在 Glitch 部署重点&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fscarmen2/Argo-Xray-JS-PaaS/main/README.md#%E5%9C%A8-daki-%E9%83%A8%E7%BD%B2%E9%87%8D%E7%82%B9&#34;&gt;在 Daki 部署重点&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fscarmen2/Argo-Xray-JS-PaaS/main/README.md#%E9%B8%A3%E8%B0%A2%E4%B8%8B%E5%88%97%E4%BD%9C%E8%80%85%E7%9A%84%E6%96%87%E7%AB%A0%E5%92%8C%E9%A1%B9%E7%9B%AE&#34;&gt;鸣谢下列作者的文章和项目&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fscarmen2/Argo-Xray-JS-PaaS/main/README.md#%E5%85%8D%E8%B4%A3%E5%A3%B0%E6%98%8E&#34;&gt;免责声明&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;项目特点:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;本项目用于在 Express.js PaaS 平台上部署 Xray，采用的方案为 Argo + Xray + WebSocket + TLS&lt;/li&gt; &#xA; &lt;li&gt;在浏览器查看系统各项信息，方便直观&lt;/li&gt; &#xA; &lt;li&gt;使用 CloudFlare 的 Argo 隧道，直接优选 + 隧道，CDN 不用再做 workers&lt;/li&gt; &#xA; &lt;li&gt;回流分流，同时支持 Xray 4 种主流协议: vless / vmess / trojan / shadowsocks&lt;/li&gt; &#xA; &lt;li&gt;vmess 和 vless 的 uuid，trojan 和 shadowsocks 的 password，各协议的 ws 路径既可以自定义，又或者使用默认值&lt;/li&gt; &#xA; &lt;li&gt;集成哪吒探针，可以自由选择是否安装&lt;/li&gt; &#xA; &lt;li&gt;前端 js 定时保活，会玩的用户可以根据具体情况修改间隔时间&lt;/li&gt; &#xA; &lt;li&gt;节点信息以 V2rayN / Clash / 小火箭 链接方式输出&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;部署:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;镜像 &lt;code&gt;fscarmen/argo-xary:latest&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;PaaS 平台用到的变量&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;变量名&lt;/th&gt; &#xA;     &lt;th&gt;是否必须&lt;/th&gt; &#xA;     &lt;th&gt;默认值&lt;/th&gt; &#xA;     &lt;th&gt;备注&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;UUID&lt;/td&gt; &#xA;     &lt;td&gt;否&lt;/td&gt; &#xA;     &lt;td&gt;de04add9-5c68-8bab-950c-08cd5320df18&lt;/td&gt; &#xA;     &lt;td&gt;可在线生成 &lt;a href=&#34;https://www.zxgj.cn/g/uuid&#34;&gt;https://www.zxgj.cn/g/uuid&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;WSPATH&lt;/td&gt; &#xA;     &lt;td&gt;否&lt;/td&gt; &#xA;     &lt;td&gt;argo&lt;/td&gt; &#xA;     &lt;td&gt;勿以 / 开头，各协议路径为 &lt;code&gt;/WSPATH-协议&lt;/code&gt;，如 &lt;code&gt;/argo-vless&lt;/code&gt;,&lt;code&gt;/argo-vmess&lt;/code&gt;,&lt;code&gt;/argo-trojan&lt;/code&gt;,&lt;code&gt;/argo-shadowsocks&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;NEZHA_SERVER&lt;/td&gt; &#xA;     &lt;td&gt;否&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td&gt;哪吒探针服务端的 IP 或域名&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;NEZHA_PORT&lt;/td&gt; &#xA;     &lt;td&gt;否&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td&gt;哪吒探针服务端的端口&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;NEZHA_KEY&lt;/td&gt; &#xA;     &lt;td&gt;否&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td&gt;哪吒探针客户端专用 Key&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img width=&#34;1301&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/92626977/214585099-2f8a9efe-2afb-42af-99ea-01540fcefdcf.png&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;需要应用的 js &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;命令&lt;/th&gt; &#xA;     &lt;th&gt;说明&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&#xA;      &lt;url&gt;&#xA;       /list&#xA;      &lt;/url&gt;&lt;/td&gt; &#xA;     &lt;td&gt;查看节点数据&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&#xA;      &lt;url&gt;&#xA;       /status&#xA;      &lt;/url&gt;&lt;/td&gt; &#xA;     &lt;td&gt;查看后台进程&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&#xA;      &lt;url&gt;&#xA;       /listen&#xA;      &lt;/url&gt;&lt;/td&gt; &#xA;     &lt;td&gt;查看后台监听端口&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;在 Glitch 部署重点&lt;/h2&gt; &#xA;&lt;p&gt;这里只作重点的展示，更详细可以参考项目: &lt;a href=&#34;https://github.com/fscarmen2/X-for-Glitch&#34;&gt;https://github.com/fscarmen2/X-for-Glitch&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img width=&#34;1105&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/92626977/214567653-768f4f91-13b5-4205-9118-f5510081e260.png&#34;&gt; &#xA;&lt;img width=&#34;1680&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/92626977/214568305-b2711fc8-b50a-47b6-924c-2d3f8dd30372.png&#34;&gt; &#xA;&lt;img width=&#34;322&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/92626977/214568380-b07dd83b-a4d6-43fe-9ead-79f1393e909c.png&#34;&gt; &#xA;&lt;h2&gt;在 Daki 部署重点&lt;/h2&gt; &#xA;&lt;img width=&#34;1198&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/92626977/212642015-e84e07de-9f07-466d-b446-8cd8431e7220.png&#34;&gt; &#xA;&lt;img width=&#34;1198&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/92626977/212642096-dfcce6d1-d6b2-4b55-9b94-995e5561ac44.png&#34;&gt; &#xA;&lt;img width=&#34;1198&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/92626977/212642206-6b12179d-b35a-4a1e-b4e1-963b537c7693.png&#34;&gt; &#xA;&lt;img width=&#34;1547&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/92626977/214568691-54cc283b-614f-4fe7-8782-c48ed46cff31.png&#34;&gt; &#xA;&lt;img width=&#34;1664&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/92626977/214580345-765231a7-ec63-4564-a188-ceae28308258.png&#34;&gt; &#xA;&lt;img width=&#34;1137&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/92626977/214583277-fe52ffc0-598f-4a54-ac0f-6558b75181dd.png&#34;&gt; &#xA;&lt;img width=&#34;322&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/92626977/214580604-8d4f6454-3b78-41a9-b765-cff714b85638.png&#34;&gt; &#xA;&lt;h2&gt;鸣谢下列作者的文章和项目:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;前端 JS 在大佬 Nike Jeff 的项目 基础上，为了通用性和扩展功能作修改，&lt;a href=&#34;https://github.com/hrzyang/glitch-trojan&#34;&gt;https://github.com/hrzyang/glitch-trojan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;后端全部原创，如转载须注明来源。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;免责声明:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;本程序仅供学习了解, 非盈利目的，请于下载后 24 小时内删除, 不得用作任何商业用途, 文字、数据及图片均有所属版权, 如转载须注明来源。&lt;/li&gt; &#xA; &lt;li&gt;使用本程序必循遵守部署免责声明。使用本程序必循遵守部署服务器所在地、所在国家和用户所在国家的法律法规, 程序作者不对使用者任何不当行为负责。&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>say12e/bt-in-githab-server</title>
    <updated>2023-01-28T01:45:24Z</updated>
    <id>tag:github.com,2023-01-28:/say12e/bt-in-githab-server</id>
    <link href="https://github.com/say12e/bt-in-githab-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;bt-in-githab-server&lt;/h1&gt; &#xA;&lt;p&gt;使用方法 白嫖githab服务器 前提：先创建这个仓库的代码空间 1先运行【sudo su】（获取root权限） 2看官网bt.cn Linux安装命令全能脚本，让后运行（安装宝塔面板） 3然后运行【sh btvip.sh】（升级到开心版，可不运行） 4最后运行【rm -f /www/server/panel/data/admin_path.pl】（删除面板安全入口） 安装完成，访问宝塔面板 备注：可以多次白嫖呦&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>javnitram/SGE-odoo-dev</title>
    <updated>2023-01-28T01:45:24Z</updated>
    <id>tag:github.com,2023-01-28:/javnitram/SGE-odoo-dev</id>
    <link href="https://github.com/javnitram/SGE-odoo-dev" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Final project for beginners with Odoo stack, Docker and Docker Compose. Fork this repo and make your own Odoo module&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Introducción&lt;/h1&gt; &#xA;&lt;p&gt;Proyecto final para principantes con el stack de Odoo, Docker, Docker Compose, Git y GitHub.&lt;/p&gt; &#xA;&lt;h1&gt;Preparación del repo y del entorno&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;em&gt;Fork&lt;/em&gt; del repositorio original&lt;/h2&gt; &#xA;&lt;p&gt;Inicia sesión en tu cuenta de GitHub, haz un &lt;em&gt;fork&lt;/em&gt; de &lt;a href=&#34;https://github.com/javnitram/SGE-odoo-dev&#34;&gt;javnitram/SGE-odoo-dev&lt;/a&gt; y llama el tuyo SGE-odoo-dev-&lt;strong&gt;XX&lt;/strong&gt; (el valor correspondiente a tu número de puesto, según el último byte de la dirección IP de clase.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1954675/214649968-b21af29d-8bfc-4f95-b117-f48c7506c9cf.png&#34; alt=&#34;Fork&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Creación de rama de desarrollo y clonación del repositorio en local&lt;/h2&gt; &#xA;&lt;p&gt;En tu repositorio, además de tener una rama &lt;em&gt;main&lt;/em&gt; o &lt;em&gt;master&lt;/em&gt;, crea una rama con tu nombre de GitHub seguido de &lt;strong&gt;XX&lt;/strong&gt;, según el número que te corresponda por puesto en el aula. Esta será tu rama de desarrollo.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1954675/214651541-e8e95116-671a-472b-be09-970f98de78f7.gif&#34; alt=&#34;Branch&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Vas a usar esa rama para desarrollar tu propio módulo de Odoo. Para ello, deberás clonar la rama en local con Visual Studio Code.&lt;/p&gt; &#xA;&lt;p&gt;Primero, si no lo has hecho anteriormente, deberás autorizar el acceso a GitHub desde Visual Studio Code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1954675/214658283-2563168c-9a89-4950-b5d8-3b492c748d0a.gif&#34; alt=&#34;Autorizar GitHub en Visual Studio Code&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A continuación, clona el repositorio (es posible que GitHub te pida autorizar permisos adicionales)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1954675/214662378-484a9aaa-1be2-4ded-ac78-b3b997bc2fb7.gif&#34; alt=&#34;Git Clone&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Asegúrate de estar apuntando a la rama de desarrollo.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1954675/214665198-03e8f2b6-670c-4384-9ced-557ea86e6632.gif&#34; alt=&#34;Checkout&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Considera guardar tu workspace de Visual Studio Code.&lt;/p&gt; &#xA;&lt;h2&gt;Instalación de extensiones útiles&lt;/h2&gt; &#xA;&lt;p&gt;En esta última entrega, vamos a prescindir de pgAdmin 4 y de las opciones del script &lt;code&gt;./menu.sh&lt;/code&gt; para gestionar Docker Compose. En su lugar, hay que usar las extensiones oportunas de Visual Studio Code para sustituir dichas herramientas. Busca por estos identificadores, de modo que por cada uno encontrarás exactamente una extensión para instalar:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;jigar-patel.OdooSnippets&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ms-python.python&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ms-azuretools.vscode Docker&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ckolkman.vscode-postgres&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Tras instalar estas extensiones, obtendrás nuevas funciones en Visual Studio Code, a las cuales puedes acceder rápidamente desde la paleta de comandos con el atajo &lt;code&gt;Control + Shift + P&lt;/code&gt;. Asimismo, también podrás observar dos nuevos iconos en la barra de actividad (a la izquierda), uno correspondiente a la extensión de Docker y otro a la de PostgreSQL, nos familiarizaremos con ellas durante las demostraciones en clase.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1954675/214654250-62f53d6f-4200-4bf4-89fb-b20d320a1f95.gif&#34; alt=&#34;iconos_barra_actividad&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Menú interactivo para el terminal&lt;/h2&gt; &#xA;&lt;p&gt;Ejecuta el script &lt;code&gt;./menu.sh&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./menu.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Si anteriormente no has usado el script, la primera vez se autoconfigurará. En ese caso te pedirá que cierres el terminal y vuelvas a abrir otro. Regresa a la ruta de tu copia local del repositorio y vuelve a lanzar el menú. Si no se encuentra el paquete &lt;code&gt;smenu&lt;/code&gt;, puedes instalarlo (o pedir al profe que lo haga como root):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install smenu -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ahora el menú debería ser interactivo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./menu.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Puedes moverte por este menú utilizando los cursores o directamente el número de la opción que quieras ejecutar. Pulsa &lt;em&gt;Enter&lt;/em&gt; para ejecutar la selección.&lt;/p&gt; &#xA;&lt;p&gt;Para asegurar un correcto acceso a los datos compartidos mediante volúmenes entre host y contenedores, antes de arrancar o detener contenedores, ejecuta el script que da permisos completos:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./set-permissions.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Si deseas añadir opciones al script &lt;code&gt;./menu.sh&lt;/code&gt; o documentar las que hay, edita este fichero en cualquier momento:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nano menu.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Asegúrate de que cada línea que escribas siga el patrón: &lt;em&gt;&lt;code&gt;comando tabulador # comentario&lt;/code&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Los cambios que introduzcas en &lt;code&gt;menu.txt&lt;/code&gt; aparecerán como nuevas opciones en el menú interactivo.&lt;/p&gt; &#xA;&lt;p&gt;Desde prácticas anteriores hemos usado estos scripts por necesidades de aula y para facilitarte las cosas mientras aprendías, pero es el momento de prescindir de estas ayudas tanto como puedas exprimir las funciones que te proporciona un IDE.&lt;/p&gt; &#xA;&lt;h1&gt;Primeros pasos para nuestro desarrollo&lt;/h1&gt; &#xA;&lt;h2&gt;Inicialización de Odoo y creación de la primera base de datos&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1954675/214669540-193c94c0-81d8-451e-9cac-f8a8c3a03afd.gif&#34; alt=&#34;Inicialización de Odoo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lanza los contenedores usando la extensión de Docker en Visual Studio. Desde la propia extensión puedes lanzar también tu navegador por defecto para conectar al servicio Odoo en su puerto expuesto.&lt;/p&gt; &#xA;&lt;p&gt;Crea tu base de datos de Odoo con la configuración que consideres oportuna.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1954675/214677032-1a1958ef-8f9e-4942-9cdf-8a09673c50b5.png&#34; alt=&#34;Primera base de datos Odoo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Como recuerdas de anteriores prácticas, es razonable que en ocasiones tengas problemas para acceder desde la máquina anfitriona a ficheros creados desde un contenedor (o viceversa). Cuando haya importantes cambios en el contenido de los volúmenes compartidos entre host y contenedores, ejecuta &lt;code&gt;./set-permissions.sh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Dicho script te orientará para que arranques los contenedores y vuelvas a invocarlo si es el único modo de recuperar el acceso completo. Esto es necesario en aquellos equipos en los que no podemos ser root ni ejecutar sudo.&lt;/p&gt; &#xA;&lt;h2&gt;Primer &lt;em&gt;commit&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Al iniciar Odoo por primera vez y configurar nuestra primera base de datos, hemos asignado una &lt;em&gt;master password&lt;/em&gt;. Como recuerdas, esta contraseña queda cifrada en el fichero de configuración &lt;code&gt;odoo.conf&lt;/code&gt;, que también se ha actualizado para eliminar comentarios. Todo esto hace que Git detecte que el fichero ha sido modificado respecto a su contenido previo. Puedes observar cómo el fichero queda en estado &lt;strong&gt;M&lt;/strong&gt; (&lt;em&gt;Modified&lt;/em&gt;, modificado) y comparar las diferencias producidas en la modificación.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1954675/214678982-2358dff2-57ab-47ed-a57d-6371750c886d.png&#34; alt=&#34;Odoo conf modificado y diff&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;La inicialización del servidor Odoo ha provocado muchos más cambios, pero este repositorio está configurado para sincronizar únicamente código y configuración, por lo que ningún &lt;em&gt;commit&lt;/em&gt; hará un &lt;em&gt;backup&lt;/em&gt; del estado de tu servidor Odoo ni del servidor de base de datos. Recuerda que un sistema de control de versiones no está para esas cosas y, por eso, se han configurado reglas específicas en ficheros &lt;em&gt;.gitignore&lt;/em&gt; en algunos directorios.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Postgresql data&#xA;postgres/&#xA;&#xA;# Backup&#xA;*.tgz&#xA;*.tar.gz&#xA;&#xA;# Python byte-compiled / optimized / DLL files&#xA;__pycache__/&#xA;*.py[cod]&#xA;*$py.class&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Haz tu primer &lt;em&gt;commit&lt;/em&gt; (esto es confirmar los cambios en el repositorio local de Git) y &lt;em&gt;push&lt;/em&gt; (sincronizar cambios locales hacia el repositorio remoto, en este caso GitHub).&lt;/p&gt; &#xA;&lt;h2&gt;Copia de seguridad completa (código, configuración y datos)&lt;/h2&gt; &#xA;&lt;p&gt;Si necesitas hacer una copia de seguridad de tu directorio de trabajo, sin perder los datos que no se sincronizan con GitHub, tienes la opción de usar tar a través del script &lt;code&gt;./menu.sh&lt;/code&gt; (como en prácticas anteriores).&lt;/p&gt; &#xA;&lt;h2&gt;Resetear el estado de Odoo y PostgreSQL&lt;/h2&gt; &#xA;&lt;p&gt;Durante la práctica, si llegases a un punto muerto en el que tu instalación de Odoo o la base de datos PostgreSQL han quedado en un estado corrupto o irreparable, tienes la opción &lt;code&gt;git clean -xfd&lt;/code&gt; en el script &lt;code&gt;./menu.sh&lt;/code&gt;. Esto fuerza el borrado de ficheros sin seguimiento (&lt;em&gt;untracked&lt;/em&gt;, es decir, que todavía no han sido añadidos al control de versiones) y de ficheros ignorados según el fichero &lt;em&gt;.gitignore&lt;/em&gt; (en este caso el estado de Odoo y de su base de datos).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1954675/214683179-42151af4-9bc7-4e6a-90c4-ef113d344790.gif&#34; alt=&#34;git clean -xfd&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Usa esto en casos excepcionales, evita lanzarlo por error o sin entender sus implicaciones. Después de esto, tendrás que volver a ejecutar &lt;code&gt;./set-permissions.sh&lt;/code&gt;, reiniciar contenedores, inicializar tu servidor Odoo y crear de nuevo la base de datos.&lt;/p&gt; &#xA;&lt;h2&gt;Comando &lt;em&gt;odoo scaffold&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Usando la extensión de Docker de Visual Studio Code, localiza la función que te permita abrir una shell en el contenedor de Odoo.&lt;/p&gt; &#xA;&lt;p&gt;Dentro del contenedor, ejecuta:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;odoo scaffold prueba /mnt/extra-addons&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1954675/214684898-0bcdea9c-887e-4224-aba1-7e842a223883.gif&#34; alt=&#34;odoo scaffold&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Observa el contenido de ese directorio desde el propio contenedor y desde el volumen mapeado en el anfitrión. Este comando ha generado una estructura mínima de directorios y ficheros para agilizar el desarrollo de un módulo en Odoo. Explora el contenido del directorio &lt;em&gt;prueba&lt;/em&gt; desde Visual Studio Code, si tienes algún problema para modificar los ficheros, recuerda ejecutar &lt;code&gt;./set-permissions.sh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Deshacer cambios desde el último &lt;em&gt;commit&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Si pulsas en el icono de Git en la barra lateral de Visual Studio Code, verás que los directorios y ficheros que ha generado el comando &lt;code&gt;odoo scaffold&lt;/code&gt; aparecen en estado &lt;strong&gt;U&lt;/strong&gt; de &lt;em&gt;Untracked&lt;/em&gt;, es decir, todavía no estarían teniendo seguimiento por esta herramienta y no se sincronizarían. Añádelos al control de versiones, observa que ya no se marcan con estado &lt;strong&gt;U&lt;/strong&gt; sino &lt;strong&gt;A&lt;/strong&gt; (&lt;em&gt;Added&lt;/em&gt;, añadido).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1954675/214686075-f0ce5798-161e-464c-acc2-8b713c8499e2.gif&#34; alt=&#34;git add --all&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;En lugar de hacer &lt;em&gt;commit&lt;/em&gt;, prueba la opción &lt;code&gt;git reset --hard HEAD&lt;/code&gt; del script &lt;code&gt;./menu.sh&lt;/code&gt;. Observa lo que sucede y piensa en qué caso te plantearías hacer algo tan radical. Haz las pruebas que necesites para averiguar en qué se diferencia de la opción &lt;code&gt;git clean -xfd&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1954675/214687303-f6cb18c3-a810-45a5-bcca-ef19aad42376.gif&#34; alt=&#34;git reset --hard HEAD&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Próximos pasos...&lt;/h1&gt; &#xA;&lt;p&gt;Crea tu propio módulo de Odoo de acuerdo a los apuntes de clase y al enunciado de la práctica que se te ha proporcionado en el aula virtual.&lt;/p&gt; &#xA;&lt;p&gt;Debes utilizar Git y GitHub. Para ello, se espera que hagas varios &lt;em&gt;commits&lt;/em&gt; y &lt;em&gt;pushes&lt;/em&gt; en tu rama de desarrollo y finalmente hagas un &lt;em&gt;merge&lt;/em&gt; a tu rama &lt;em&gt;main&lt;/em&gt; cuando hayas desarrollado y probado tu módulo.&lt;/p&gt; &#xA;&lt;p&gt;Si finalizas tu desarrollo con éxito y aprovechas la potencia de Git y GitHub, podrás realizar un &lt;em&gt;pull request&lt;/em&gt;, es decir, una petición al propietario del repositorio original para que valore tu propuesta e integre tus cambios (&lt;em&gt;merge&lt;/em&gt;). Es especialmente conveniente que tu proyecto proporcione datos de demo o hagas un &lt;em&gt;export&lt;/em&gt; de la base de datos con &lt;code&gt;pg_dump&lt;/code&gt; o alguna utilidad gráfica.&lt;/p&gt; &#xA;&lt;p&gt;Quien clone el repositorio original y despliegue el entorno podrá probar tu módulo y todos los otros que hayan quedado integrados.&lt;/p&gt;</summary>
  </entry>
</feed>