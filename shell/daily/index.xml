<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-26T01:44:51Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>liusj5257/azurlane_anti_name</title>
    <updated>2023-03-26T01:44:51Z</updated>
    <id>tag:github.com,2023-03-26:/liusj5257/azurlane_anti_name</id>
    <link href="https://github.com/liusj5257/azurlane_anti_name" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;azurlane_anti_name&lt;/h1&gt; &#xA;&lt;p&gt;反和谐船名:μ兵装,小XX,重樱,铁血,白鹰,META&lt;/p&gt; &#xA;&lt;p&gt;B服 / 9游版/ 当乐/百度&lt;/p&gt; &#xA;&lt;p&gt;在Releases下载,渠道服自行测试&lt;/p&gt; &#xA;&lt;p&gt;其他渠道服暂时找不到直链,无能为力.&lt;/p&gt; &#xA;&lt;p&gt;手动修改的教程如下:（中英混杂）（仅介绍单手机教程）&lt;/p&gt; &#xA;&lt;h2&gt;0x1 工具&lt;/h2&gt; &#xA;&lt;p&gt;MT管理器&lt;img src=&#34;https://user-images.githubusercontent.com/75507531/227224515-0b86b246-a995-4f65-8c4c-d7c2934ec975.png&#34; alt=&#34;MT管理器&#34;&gt; 或者np管理器&lt;img src=&#34;https://user-images.githubusercontent.com/75507531/227224845-d3be7fe7-05d8-494f-a103-05ecb72a4b7a.png&#34; alt=&#34;NP管理器&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;0x2&lt;/h2&gt; &#xA;&lt;p&gt;下载你的碧蓝航线的的安装包或者使用以上任意一种提取安装包&lt;/p&gt; &#xA;&lt;h2&gt;0x3&lt;/h2&gt; &#xA;&lt;p&gt;查看安装包&lt;img src=&#34;https://user-images.githubusercontent.com/75507531/227228490-ab0d77d1-18ac-4ba8-be91-d7dc2ee8c48b.jpg&#34; alt=&#34;open&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;0x4&lt;/h2&gt; &#xA;&lt;p&gt;打开classes.dex &lt;img src=&#34;https://user-images.githubusercontent.com/75507531/227229213-af16a4c8-ae32-48e6-bf80-c8c68debbf59.jpg&#34; alt=&#34;openit&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;0x5&lt;/h2&gt; &#xA;&lt;p&gt;在浏览里打开com(文件夹)--&amp;gt;unity3d.player(文件夹)--&amp;gt;UnityPlayerActivity并打开&lt;/p&gt; &#xA;&lt;h3&gt;以下通常被认为是一道门槛，希望你能理解它并越过他&lt;/h3&gt; &#xA;&lt;h1&gt;傻瓜版&lt;/h1&gt; &#xA;&lt;h2&gt;1x1&lt;/h2&gt; &#xA;&lt;p&gt;在17行粘贴以下内容&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-smali&#34;&gt;&#xA;.method private static native init(Landroid/content/Context;)V&#xA;&#xA;.end method&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;1x2&lt;/h2&gt; &#xA;&lt;p&gt;在65行粘贴一下内容&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-small&#34;&gt;&#xA;    const-string v0, &#34;Dev_Liu&#34;&#xA;&#xA;    invoke-static {v0}, Ljava/lang/System;-&amp;gt;loadLibrary(Ljava/lang/String;)V&#xA;&#xA;    invoke-static {p0}, Lcom/unity3d/player/UnityPlayerActivity;-&amp;gt;init(Landroid/content/Context;)V&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;1x3&lt;/h2&gt; &#xA;&lt;p&gt;把仓库里libs文件夹里的三个文件夹复制到apk中lib文件夹里&lt;/p&gt; &#xA;&lt;h2&gt;1x4&lt;/h2&gt; &#xA;&lt;p&gt;一路保存并退出&lt;/p&gt; &#xA;&lt;h2&gt;1x5&lt;/h2&gt; &#xA;&lt;p&gt;卸载碧蓝航线，安装修改后的apk文件 （你可以选择重新下7G或者先把&lt;code&gt;/sdcard/Android/data/(你的碧蓝航线包名)&lt;/code&gt;包名一般包括&#xA; &lt;bilibili&gt; &#xA;  &lt;blhx&gt; &#xA;   &lt;azurline&gt;&#xA;     改一个名字，等重装完碧蓝航线再替换回原名字）&#xA;   &lt;/azurline&gt;&#xA;  &lt;/blhx&gt;&#xA; &lt;/bilibili&gt;&lt;/p&gt; &#xA;&lt;h2&gt;原版教程&lt;/h2&gt; &#xA;&lt;p&gt;##1x0：Loading the library Add the following method to &lt;code&gt;UnityPlayerActivity&lt;/code&gt;, anywhere above its &lt;code&gt;onCreate&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-smali&#34;&gt;.method private static native init(Landroid/content/Context;)V&#xA;.end method&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And these lines to &lt;code&gt;onCreate&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-smali&#34;&gt;    const-string v0, &#34;Dev_Liu&#34;&#xA;&#xA;    invoke-static {v0}, Ljava/lang/System;-&amp;gt;loadLibrary(Ljava/lang/String;)V&#xA;&#xA;    invoke-static {p0}, Lcom/unity3d/player/UnityPlayerActivity;-&amp;gt;init(Landroid/content/Context;)V&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Preferably without replacing other variables, such as between &lt;code&gt;.locals 2&lt;/code&gt; and &lt;code&gt;const/4 v0, 0x1&lt;/code&gt;.)&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adamyaxley/Obfuscate&#34;&gt;https://github.com/adamyaxley/Obfuscate&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Rprop/And64InlineHook&#34;&gt;https://github.com/Rprop/And64InlineHook&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joeyjurjens/Android-Hooking-Template&#34;&gt;https://github.com/joeyjurjens/Android-Hooking-Template&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/n0k0m3/Azur-Lane-Scripts-Autopatcher&#34;&gt;https://github.com/n0k0m3/Azur-Lane-Scripts-Autopatcher&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>QiuChenly/MyMacsAppCrack</title>
    <updated>2023-03-26T01:44:51Z</updated>
    <id>tag:github.com,2023-03-26:/QiuChenly/MyMacsAppCrack</id>
    <link href="https://github.com/QiuChenly/MyMacsAppCrack" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MacBook 自用软件破解（macOS Intel）&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Crack Apps for My Mac / Update 2023.03.22&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;All File Only Support X86_64 Mac&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;But M1/M2 Mac Can Open &#39;Rosetta 运行&#39; to use!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;this repo use for publish the crack file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;K&#39;ed By 秋城落叶 2023◎QiuChenly.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;吾爱破解围观破解过程&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.52pojie.cn/forum.php?mod=forumdisplay&amp;amp;fid=5&amp;amp;filter=typeid&amp;amp;typeid=377&#34;&gt;macOS 逆向区&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;用户: QiuChenly&lt;/p&gt; &#xA;&lt;h2&gt;中文使用说明&lt;/h2&gt; &#xA;&lt;p&gt;老天天有人说看不懂怎么用有没有成品。&lt;/p&gt; &#xA;&lt;p&gt;声明: 本项目仅交流学习软件安全技术使用，不会发布任何形式的成品，也没有任何聊天群和组织，更不会收取任何人一分钱，各位谨防受骗。 不要将本项目研究成果进行传播破坏软件公司的利益，所有法律责任由传播者独自承担，作者从未为任何破解软件传播组织提供过任何形式的技术支持，不支持不赞同不理解传播盗版软件这种违法行为。 因使用者传播者传播破解软件导致的任何法律责任与包括但不仅限于引起系统故障 财产损失等问题作者概不负责。&lt;/p&gt; &#xA;&lt;p&gt;还要成品，嫌哥们4⃣️的不够快是吧😓。&lt;/p&gt; &#xA;&lt;p&gt;这里重新用中文写一份使用方法，这下中文能看懂了吧：&lt;/p&gt; &#xA;&lt;p&gt;0.首先关闭SIP。M1/M2机器使用需要在应用详情中勾选&#34;Rosetta 运行&#34;才可以正常注入。&lt;/p&gt; &#xA;&lt;p&gt;1.下载Tools里面的两个文件: insert_dylib libInlineInjectPlugin.dylib&lt;/p&gt; &#xA;&lt;p&gt;insert_dylib是一个注入工具，将体验代码注入到目标程序中。 如果你&lt;code&gt;sudo insert_dylib&lt;/code&gt;无法执行，请给文件加上可执行权限: &lt;code&gt;sudo chmod +x insert_dylib&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;2.&lt;strong&gt;libInlineInjectPlugin.dylib&lt;/strong&gt;这个文件不可以被删除或移动到任意位置，因为他的路径被记录在目标App的读取路径中。但是你把它放到.app文件内，这样可以和App一起携带走。&lt;/p&gt; &#xA;&lt;p&gt;3.复制一份下面Tips指南中提到的文件。&lt;/p&gt; &#xA;&lt;p&gt;如copy /Applications/OmniRecorder.app/Contents/MacOS/OmniRecorder to ‘/Applications/OmniRecorder.app/Contents/MacOS/OmniRecorder_副本’&lt;/p&gt; &#xA;&lt;p&gt;就是让你把‘OmniRecorder’这个文件复制一份为‘OmniRecorder_副本’。&lt;/p&gt; &#xA;&lt;p&gt;4.执行注入&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo insert_dylib文件全路径 libInlineInjectPlugin.dylib文件的全路径 /Applications/OmniRecorder.app/Contents/MacOS/OmniRecorder_副本 /Applications/OmniRecorder.app/Contents/MacOS/OmniRecorder&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;5.结束。&lt;/p&gt; &#xA;&lt;p&gt;切记不要激活后就把libInlineInjectPlugin.dylib文件给移动位置或者删除，实际注入还是需要他！！！&lt;/p&gt; &#xA;&lt;h1&gt;Instructions: First of all, u must known somthing&lt;/h1&gt; &#xA;&lt;h2&gt;Q: Where is the Injection Files?&lt;/h2&gt; &#xA;&lt;p&gt;A: The &lt;code&gt;insert_dylib&lt;/code&gt; &amp;amp; &lt;code&gt;libInlineInjectPlugin.dylib&lt;/code&gt; locate to &lt;code&gt;&#39;Tools&#39;&lt;/code&gt; Folder.&lt;/p&gt; &#xA;&lt;h2&gt;Q: File &lt;code&gt;insert_dylib&lt;/code&gt; is...?&lt;/h2&gt; &#xA;&lt;p&gt;A: this is a inject Tool, it can inject &lt;code&gt;libInlineInjectPlugin.dylib&lt;/code&gt; to target App runtimes.&lt;/p&gt; &#xA;&lt;h2&gt;Q: File &lt;code&gt;libInlineInjectPlugin.dylib&lt;/code&gt; is...?&lt;/h2&gt; &#xA;&lt;p&gt;A: Some crack code, can Hook&amp;amp;Modify Target App&#39;s AssemblerCode.&lt;/p&gt; &#xA;&lt;h1&gt;How exciting! I cracked the mac application with the RAM Patch. Now the file size is about 100KB&lt;/h1&gt; &#xA;&lt;p&gt;But u known, i&#39;m so hard up, can only affordable MBP 16&#39;&#39; 2019 Model, can&#39;t afford M1 Mac.I am so sad without money.So the Cracked Patch &lt;strong&gt;Just Support X86_64 Mac&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Here are some my own crack&#39;d software list&lt;/h1&gt; &#xA;&lt;p&gt;If u use my injection files...&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;AppName&lt;/th&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Download link(Click it!)&lt;/th&gt; &#xA;   &lt;th&gt;Crack Reason&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Omi 录屏专家[^omi_recording_pro]&lt;/td&gt; &#xA;   &lt;td&gt;v1.2.4(2023020802)&lt;/td&gt; &#xA;   &lt;td&gt;MacAppStore&lt;/td&gt; &#xA;   &lt;td&gt;I would like to do it&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Omi NTFS 磁盘专家 Pro[^omi_ntfs]&lt;/td&gt; &#xA;   &lt;td&gt;v1.2.3 (2023020701)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cdn.zh.okaapps.com/resource/download/NTFS-Pro-Installer.pkg&#34;&gt;Official Site Link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;I would like to do it&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fig Player[^fig_player]&lt;/td&gt; &#xA;   &lt;td&gt;v1.2.2(2023022001)&lt;/td&gt; &#xA;   &lt;td&gt;MacAppStore&lt;/td&gt; &#xA;   &lt;td&gt;I would like to do it&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bandizip365[^bandizip365]&lt;/td&gt; &#xA;   &lt;td&gt;v7.21&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://apps.apple.com/cn/app/bandizip-365-%E5%8E%8B%E7%BC%A9%E5%92%8C%E8%A7%A3%E5%8E%8B%E7%BC%A9/id1596426184?mt=12&#34;&gt;MacAppStore&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;I would like to do it&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Macs Fan Control[^macs_fan_control]&lt;/td&gt; &#xA;   &lt;td&gt;v1.5.15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://crystalidea.com/downloads/macsfancontrol.zip&#34;&gt;Official Site Link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;I would like to do it&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Record it Pro[^record_it_pro]&lt;/td&gt; &#xA;   &lt;td&gt;v1.7.6&lt;/td&gt; &#xA;   &lt;td&gt;MacAppStore&lt;/td&gt; &#xA;   &lt;td&gt;I would like to do it&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PlistEdit Pro[^plistedit_pro]&lt;/td&gt; &#xA;   &lt;td&gt;v1.10b1&lt;/td&gt; &#xA;   &lt;td&gt;Here&lt;/td&gt; &#xA;   &lt;td&gt;I would like to do it&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sublime Text Dev[^sublimetext]&lt;/td&gt; &#xA;   &lt;td&gt;v4148&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://download.sublimetext.com/sublime_text_build_4148_mac.zip&#34;&gt;Official Site Link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;I would like to do it&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CleanMyMac Beta[^cmm]&lt;/td&gt; &#xA;   &lt;td&gt;v4.13.0b2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dl.devmate.com/com.macpaw.CleanMyMac4/CleanMyMacX.dmg&#34;&gt;Official Site Link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;I would like to do it&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;App Cleaner &amp;amp; Uninstaller[^app_cleaner_uninstaller]&lt;/td&gt; &#xA;   &lt;td&gt;v8.1.1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://download.nektony.com/download/app-cleaner-uninstaller/app-cleaner-uninstaller.dmg&#34;&gt;Official Site Link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;I would like to do it&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PopClip&lt;a href=&#34;https://raw.githubusercontent.com/QiuChenly/MyMacsAppCrack/main/PopClip&#34;&gt;^popclip&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v2022.12&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pilotmoon.com/downloads/PopClip-2022.12.zip&#34;&gt;Official Site Link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;I would like to do it&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MWeb Pro[^mwebpro]&lt;/td&gt; &#xA;   &lt;td&gt;v4.4.2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mweb-1256924220.cos.accelerate.myqcloud.com/MWebPro441.dmg&#34;&gt;Official Site Link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;I would like to do it&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ulysses&lt;a href=&#34;https://raw.githubusercontent.com/QiuChenly/MyMacsAppCrack/main/Ulysses&#34;&gt;^ulysses&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v29.4&lt;/td&gt; &#xA;   &lt;td&gt;MacAppStore&lt;/td&gt; &#xA;   &lt;td&gt;I would like to do it&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;iShot[^ishot]&lt;/td&gt; &#xA;   &lt;td&gt;v2.3.2&lt;/td&gt; &#xA;   &lt;td&gt;MacAppStore&lt;/td&gt; &#xA;   &lt;td&gt;What a Niubility and glorious Apps of domestic application!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AutoSwitchInput&lt;a href=&#34;https://raw.githubusercontent.com/QiuChenly/MyMacsAppCrack/main/AutoSwitchInput&#34;&gt;^autoswitch&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v2.2.1&lt;/td&gt; &#xA;   &lt;td&gt;MacAppStore&lt;/td&gt; &#xA;   &lt;td&gt;I would like to do it&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SuperRightKey&lt;a href=&#34;https://raw.githubusercontent.com/QiuChenly/MyMacsAppCrack/main/iRightMouse&#34;&gt;^irightmouse&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v2.2.3&lt;/td&gt; &#xA;   &lt;td&gt;MacAppStore&lt;/td&gt; &#xA;   &lt;td&gt;I would like to do it&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;解优2&lt;a href=&#34;https://raw.githubusercontent.com/QiuChenly/MyMacsAppCrack/main/%E8%A7%A3%E4%BC%982&#34;&gt;^bestzip2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v1.6.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://apps.apple.com/cn/app/%E8%A7%A3%E4%BC%98-%E4%B8%93%E4%B8%9A%E7%9A%84-rar-7z-zip-%E8%A7%A3%E5%8E%8B%E7%BC%A9%E5%B7%A5%E5%85%B7/id1450246547?mt=12&#34;&gt;MacAppStore&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;UI Beautify and i like it&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OmniPlayer&lt;a href=&#34;https://raw.githubusercontent.com/QiuChenly/MyMacsAppCrack/main/OmniPlayer&#34;&gt;^omniPlayer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v2.0.18&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://apps.apple.com/cn/app/omni-player-%E9%AB%98%E6%B8%85%E5%BD%B1%E9%9F%B3%E6%92%AD%E6%94%BE%E5%99%A8/id1470926410?mt=12&#34;&gt;MacAppStore&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;UI Beautify and i like it&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Filmage Screen&lt;a href=&#34;https://raw.githubusercontent.com/QiuChenly/MyMacsAppCrack/main/FilmageScreen&#34;&gt;^FilmageScreen&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v1.4.7&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pdfreaderpro.oss-cn-shanghai.aliyuncs.com/downloads/FilmageScreen.dmg&#34;&gt;Official Site Link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;just because i was bored&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Xmind&lt;a href=&#34;https://raw.githubusercontent.com/QiuChenly/MyMacsAppCrack/main/Xmind&#34;&gt;^xmind&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v22.11.3656&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dl2.xmind.cn/Xmind-for-macOS-22.11.3656.dmg&#34;&gt;Official Site Link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;I would like to do it&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Navicat Premium[^Navicat]&lt;/td&gt; &#xA;   &lt;td&gt;v16.1.7&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://apps.apple.com/cn/app/navicat-premium-16/id1594061654?mt=12&#34;&gt;MacAppStore&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;I love it so much!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Infuse Pro[^Infuse]&lt;/td&gt; &#xA;   &lt;td&gt;v7.5.4381&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://apps.apple.com/cn/app/infuse-%E6%99%BA%E8%83%BD%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%99%A8/id1136220934&#34;&gt;MacAppStore&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;because it so beautify...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Q&amp;amp;A&lt;/h2&gt; &#xA;&lt;h3&gt;it safe?&lt;/h3&gt; &#xA;&lt;p&gt;yes, all opensource,you can read this: &lt;a href=&#34;https://raw.githubusercontent.com/QiuChenly/MyMacsAppCrack/main/howtocrack.md&#34;&gt;How To Crack Macs Fan Control?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;how to crack?&lt;/h3&gt; &#xA;&lt;p&gt;See and click right of AppName&#39;s annotate like 1,2...17----then read the &#39;Tips&#39; on below.&lt;/p&gt; &#xA;&lt;p&gt;如何体验正版?表格中的app右侧上方有数字上标，点击可查看对应的体验办法。&lt;/p&gt; &#xA;&lt;h1&gt;Tips&lt;/h1&gt; &#xA;&lt;p&gt;[^Infuse]: Infuse Pro 1. Copy /Applications/Infuse.app/Contents/Frameworks/GZIP.framework/Versions/A/GZIP to /Applications/Infuse.app/Contents/Frameworks/GZIP.framework/Versions/A/GZIP的副本. 2. sudo insert_dylib /你的文件夹路径！！！不要直接复制本Shell！！！/libInlineInjectPlugin.dylib /Applications/Infuse.app/Contents/Frameworks/GZIP.framework/Versions/A/GZIP的副本 /Applications/Infuse.app/Contents/Frameworks/GZIP.framework/Versions/A/GZIP 3. ok.&lt;/p&gt; &#xA;&lt;p&gt;[^Navicat]: Navicat Premium 1. Copy /Applications/Navicat Premium.app/Contents/Frameworks/NAVTabBarView.framework/Versions/A/NAVTabBarView to /Applications/Navicat Premium.app/Contents/Frameworks/NAVTabBarView.framework/Versions/A/NAVTabBarView的副本. 2. sudo insert_dylib /你的文件夹路径！！！不要直接复制本Shell！！！/libInlineInjectPlugin.dylib /Applications/Navicat\ Premium.app/Contents/Frameworks/NAVTabBarView.framework/Versions/A/NAVTabBarView的副本 /Applications/Navicat\ Premium.app/Contents/Frameworks/NAVTabBarView.framework/Versions/A/NAVTabBarView 3. ok.&lt;/p&gt; &#xA;&lt;p&gt;1. Copy /Applications/Filmage Screen.app/Contents/Frameworks/KMDrawViewSDK_Mac.framework/Versions/A/KMDrawViewSDK_Mac to /Applications/Filmage Screen.app/Contents/Frameworks/KMDrawViewSDK_Mac.framework/Versions/A/KMDrawViewSDK_Mac的副本 2. sudo insert_dylib /你的文件夹路径！！！不要直接复制本Shell！！！/libInlineInjectPlugin.dylib /Applications/Filmage\ Screen.app/Contents/Frameworks/KMDrawViewSDK_Mac.framework/Versions/A/KMDrawViewSDK_Mac的副本 /Applications/Filmage\ Screen.app/Contents/Frameworks/KMDrawViewSDK_Mac.framework/Versions/A/KMDrawViewSDK_Mac 3. ok.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. Copy /Applications/OmniPlayerStore.app/Contents/Frameworks/XADMaster.framework/Versions/A/XADMaster to /Applications/OmniPlayerStore.app/Contents/Frameworks/XADMaster.framework/Versions/A/XADMaster的副本&#xA;2. sudo insert_dylib /Users/qiuchenly/...YOUR...FILE...PATH...!!!.../libInlineInjectPlugin.dylib /Applications/OmniPlayerStore.app/Contents/Frameworks/XADMaster.framework/Versions/A/XADMaster的副本 /Applications/OmniPlayerStore.app/Contents/Frameworks/XADMaster.framework/Versions/A/XADMaster&#xA;3. ok.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;这是一个我接触MacBook就开始眼馋的App。因为当时刚出来一代的时候AppStore霸榜第一的实力足以让我垂涎欲滴。&#xA;1. Copy /Applications/BestZip 2.app/Contents/Frameworks/JSONModel.framework/Versions/A/JSONModel to /Applications/BestZip 2.app/Contents/Frameworks/JSONModel.framework/Versions/A/JSONModel的副本&#xA;2. ```sudo insert_dylib /Users/qiuchenly/...YOUR...PATH...!!!!.../libInlineInjectPlugin.dylib /Applications/BestZip\ 2.app/Contents/Frameworks/JSONModel.framework/Versions/A/JSONModel的副本 /Applications/BestZip\ 2.app/Contents/Frameworks/JSONModel.framework/Versions/A/JSONModel```&#xA;3. Ok.Open it and read activation&#39;s from Preference.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. Copy /Applications/UlyssesMac.app/Contents/Frameworks/KissXML.framework/Versions/A/KissXML to /Applications/UlyssesMac.app/Contents/Frameworks/KissXML.framework/Versions/A/KissXML\_副本&#xA;2. ```bash&#xA;   sudo insert_dylib libInlineInjectPlugin.dylib &amp;lt;your_xxx_副本_file&amp;gt; &amp;lt;your_xxx_file&amp;gt;&#xA;   ```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. modify some javascript.&#xA;2. about crack the app more infomation pls read it: https://www.52pojie.cn/thread-1695324-1-1.html.&#xA;3. The asar file so big, i can&#39;t upload it.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;[^app_cleaner_uninstaller]: App Cleaner &amp;amp; Uninstaller&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. Copy /Applications/App Cleaner 8.app/Contents/Frameworks/NektonyFallManager.framework/Versions/A/NektonyFallManager to /Applications/App Cleaner 8.app/Contents/Frameworks/NektonyFallManager.framework/Versions/A/NektonyFallManager\_副本&#xA;2. ```bash&#xA;   sudo insert_dylib libInlineInjectPlugin.dylib &amp;lt;your_xxx_副本_file&amp;gt; &amp;lt;your_xxx_file&amp;gt;&#xA;   ```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;[^mwebpro]: MWeb Pro&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. Copy /Applications/MWeb Pro.app/Contents/Frameworks/Sparkle.framework/Versions/B/Sparkle to /Applications/MWeb Pro.app/Contents/Frameworks/Sparkle.framework/Versions/B/Sparkle\_副本&#xA;2. ```bash&#xA;   sudo insert_dylib libInlineInjectPlugin.dylib &amp;lt;your_xxx_副本_file&amp;gt; &amp;lt;your_xxx_file&amp;gt;&#xA;   ```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. Copy /Applications/PopClip.app/Contents/Frameworks/ShortcutRecorder.framework/Versions/A/ShortcutRecorder to /Applications/PopClip.app/Contents/Frameworks/ShortcutRecorder.framework/Versions/A/ShortcutRecorder\_副本&#xA;2. ```bash&#xA;   sudo insert_dylib libInlineInjectPlugin.dylib &amp;lt;your_xxx_副本_file&amp;gt; &amp;lt;your_xxx_file&amp;gt;&#xA;   ```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;[^ishot]: iShot Pro&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. Copy /Applications/iShot.app/Contents/Frameworks/PTHotKey.framework/Versions/A/PTHotKey to /Applications/iShot.app/Contents/Frameworks/PTHotKey.framework/Versions/A/PTHotKey\_副本&#xA;2. ```bash&#xA;   sudo insert_dylib libInlineInjectPlugin.dylib &amp;lt;your_xxx_副本_file&amp;gt; &amp;lt;your_xxx_file&amp;gt;&#xA;   ```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. Copy /Applications/AutoSwitchInput.app/Contents/Frameworks/PTHotKey.framework/Versions/A/PTHotKey to /Applications/AutoSwitchInput.app/Contents/Frameworks/PTHotKey.framework/Versions/A/PTHotKey\_副本&#xA;2. ```bash&#xA;   sudo insert_dylib libInlineInjectPlugin.dylib &amp;lt;your_xxx_副本_file&amp;gt; &amp;lt;your_xxx_file&amp;gt;&#xA;   ```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. Copy /Applications/iRightMouse.app/Contents/MacOS/iRightMouse to /Applications/iRightMouse.app/Contents/MacOS/iRightMouse\_副本&#xA;2. ```bash&#xA;   sudo insert_dylib libInlineInjectPlugin.dylib &amp;lt;your_xxx_副本_file&amp;gt; &amp;lt;your_xxx_file&amp;gt;&#xA;   ```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;[^omi_recording_pro]: Omi 录屏专家&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. Clear Permission: tccutil reset ScreenCapture com.mac.utility.screen.recorder&#xA;2. Download App from Mac App Store.&#xA;3. copy /Applications/OmniRecorder.app/Contents/MacOS/OmniRecorder to /Applications/OmniRecorder.app/Contents/MacOS/OmniRecorder\_副本.&#xA;4. Execute the code:&#xA;   ```bash&#xA;   sudo insert_dylib libInlineInjectPlugin.dylib &amp;lt;your_xxx_副本_file&amp;gt; &amp;lt;your_xxx_file&amp;gt;&#xA;   ```&#xA;   &amp;lt;your*xxx*副本*file&amp;gt; is /Applications/OmniRecorder.app/Contents/MacOS/OmniRecorder*副本&#xA;   &amp;lt;your_xxx_file&amp;gt; is /Applications/OmniRecorder.app/Contents/MacOS/OmniRecorder&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;[^record_it_pro]: Record it&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. extract app from &#34;Record it.zip&#34;&#xA;2. copy to application folder.&#xA;3. codesign yourself.&#xA;   sudo codesign -f -s - --timestamp=none /Applications/Record it.app&#xA;&#xA;4. if you won&#39;t get Recording Screen Permission, Terminate execute:&#xA;   tccutil reset ScreenCapture&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;[^bandizip365]: Bandizip365 Crack&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. Download App from Mac App Store.&#xA;2. copy /Applications/Bandizip365.app/Contents/MacOS/Bandizip365 to /Applications/Bandizip365.app/Contents/MacOS/Bandizip365\_副本.&#xA;3. Execute the code:&#xA;   ```bash&#xA;   sudo insert_dylib libInlineInjectPlugin.dylib &amp;lt;your_xxx_副本_file&amp;gt; &amp;lt;your_xxx_file&amp;gt;&#xA;   ```&#xA;   &amp;lt;your*xxx*副本*file&amp;gt; is /Applications/Bandizip365.app/Contents/MacOS/Bandizip365*副本&#xA;   &amp;lt;your_xxx_file&amp;gt; is /Applications/Bandizip365.app/Contents/MacOS/Bandizip365&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;[^plistedit_pro]: PlistEdit Pro&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. In Terminal execute the code for your self sign:&#xA;   `bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;sudo codesign -f -s - --timestamp=none /Applications/PlistEdit Pro.app ` YOU CAN USE IT:&#34;PlistEdit Pro v1.10b1.zip&#34; extract copy to &#34;Applications&#34; and &#34;codesign -f -s - --timestamp=none /Applications/PlistEdit Pro.app&#34;, you get it!&lt;/p&gt; &#xA;&lt;p&gt;[^macs_fan_control]: Macs Fan Control&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. copy &#34;/Applications/Macs Fan Control.app/Contents/Frameworks/QtMacExtras.framework/Versions/5/QtMacExtras&#34; file to &#34;/Applications/Macs Fan Control.app/Contents/Frameworks/QtMacExtras.framework/Versions/5/QtMacExtras\_副本&#34;.&#xA;2. in Terminal execute the code for your self sign:&#xA;   ```bash&#xA;   sudo insert_dylib libInlineInjectPlugin.dylib /Applications/Macs Fan Control.app/Contents/Frameworks/QtMacExtras.framework/Versions/5/QtMacExtras_副本 /Applications/Macs Fan Control.app/Contents/Frameworks/QtMacExtras.framework/Versions/5/QtMacExtras&#xA;   ```&#xA;3. Crack Over!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;[^sublimetext]: Sublime Text Dev v4148 Crack&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Target File: /Applications/Sublime Text.app/Contents/MacOS/sublime_text&#xA;&#xA;Crack Point: `verify_signature(std::__1::basic_string&amp;lt;char, std::__1::char_traits&amp;lt;char&amp;gt;, std::__1::allocator&amp;lt;char&amp;gt;&amp;gt; const&amp;amp;, std::__1::basic_string&amp;lt;char, std::__1::char_traits&amp;lt;char&amp;gt;, std::__1::allocator&amp;lt;char&amp;gt;&amp;gt; const&amp;amp;, std::__1::basic_string&amp;lt;char, std::__1::char_traits&amp;lt;char&amp;gt;, std::__1::allocator&amp;lt;char&amp;gt;&amp;gt; const&amp;amp;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;_&lt;em&gt;Z16verify_signatureRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_S7&lt;/em&gt; proc near`&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. Copy And Backup the file.&#xA;2. Open &#39;sublime_text&#39; file use &#39;Hex Friends&#39;,find:&#xA;    0249FFC6 EBE15B41 5C415E41 5F5DC355 4889E5&#xA;3. Replace The Hashcode with: &#xA;    0249FFC6 EBE15B41 5C415E41 5F5DC36A 0158C3&#xA;&#xA;    ![](./Sublime%20Text%204147.png)&#xA;    &#xA;4. Open Sublime Text v4147, input the fake Licence get activation:&#xA;&#xA;    ```&#xA;    ----- BEGIN LICENSE -----&#xA;    秋城落叶@52pojie.com&#xA;    Unlimited User License&#xA;    EA7E-8888&#xA;    88888888888888888888888888888888&#xA;    88888888888888888888888888888888&#xA;    88888888888888888888888888888888&#xA;    88888888888888888888888888888888&#xA;    88888888888888888888888888888888&#xA;    88888888888888888888888888888888&#xA;    88888888888888888888888888888888&#xA;    88888888888888888888888888888888&#xA;    ------ END LICENSE ------&#xA;    ```&#xA;5. [Maybe Not Need]in Terminal execute the code for your self sign&#xA;   ```bash&#xA;   sudo codesign -f -s - --timestamp=none /Applications/Sublime\ Text.app&#xA;   ```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;[^cmm]: Clean My Mac Crack&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. First copy the Announcements to Announcements\_副本&#xA;2. Download app from website, normal install, open and upgrade to latest test version.&#xA;3. just run command in Terminal:&#xA;   ```bash&#xA;   sudo insert_dylib libInlineInjectPlugin.dylib &amp;lt;your_xxx_副本_file&amp;gt; &amp;lt;your_xxx_file&amp;gt;&#xA;   ```&#xA;   &amp;lt;your*xxx*副本*file&amp;gt; is /Applications/CleanMyMac\ X.app/Contents/Frameworks/Announcements.framework/Versions/A/Announcements*副本&#xA;   &amp;lt;your_xxx_file&amp;gt; is /Applications/CleanMyMac\ X.app/Contents/Frameworks/Announcements.framework/Versions/A/Announcements&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;[^omi_ntfs]: Omi NTFS 磁盘专家&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. First copy the /Applications/OmniRecorder.app/Contents/MacOS/OmniRecorder to /Applications/OmniRecorder.app/Contents/MacOS/OmniRecorder\_副本&#xA;2. Download app from website, normal install, open and upgrade to latest test version.&#xA;3. just run command in Terminal:&#xA;   ```bash&#xA;   sudo insert_dylib libInlineInjectPlugin.dylib &amp;lt;your_xxx_副本_file&amp;gt; &amp;lt;your_xxx_file&amp;gt;&#xA;   ```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;[^fig_player]: Fig Player&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. First copy the /Applications/PotPlayerX.app/Contents/Frameworks/XADMaster.framework/Versions/A/XADMaster to /Applications/PotPlayerX.app/Contents/Frameworks/XADMaster.framework/Versions/A/XADMaster\_副本&#xA;2. Download app from website, normal install, open and upgrade to latest test version.&#xA;3. just run command in Terminal:&#xA;   ```bash&#xA;   sudo insert_dylib libInlineInjectPlugin.dylib &amp;lt;your_xxx_副本_file&amp;gt; &amp;lt;your_xxx_file&amp;gt;&#xA;   ```&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>kubernetes/git-sync</title>
    <updated>2023-03-26T01:44:51Z</updated>
    <id>tag:github.com,2023-03-26:/kubernetes/git-sync</id>
    <link href="https://github.com/kubernetes/git-sync" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A sidecar app which clones a git repo and keeps it in sync with the upstream.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NOTE: THIS IS THE DEVELOPMENT BRANCH&lt;/h1&gt; &#xA;&lt;p&gt;This document is the &#34;master&#34; branch, which is under active development. If you are looking for docs on released versions of git-sync, you probably want to use the &lt;a href=&#34;https://github.com/kubernetes/git-sync/tree/release-3.x&#34;&gt;v3.x branch&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;git-sync&lt;/h1&gt; &#xA;&lt;p&gt;git-sync is a simple command that pulls a git repository into a local directory. It is a perfect &#34;sidecar&#34; container in Kubernetes - it can periodically pull files down from a repository so that an application can consume them.&lt;/p&gt; &#xA;&lt;p&gt;git-sync can pull one time, or on a regular interval. It can pull from the HEAD of a branch, from a git tag, or from a specific git hash. It will only re-pull if the target of the run has changed in the upstream repository. When it re-pulls, it updates the destination directory atomically. In order to do this, it uses a git worktree in a subdirectory of the &lt;code&gt;--root&lt;/code&gt; and flips a symlink.&lt;/p&gt; &#xA;&lt;p&gt;git-sync can pull over HTTP(S) (with authentication or not) or SSH.&lt;/p&gt; &#xA;&lt;p&gt;git-sync can also be configured to make a webhook call upon successful git repo synchronization. The call is made after the symlink is updated.&lt;/p&gt; &#xA;&lt;h2&gt;Building it&lt;/h2&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://github.com/docker/buildx&#34;&gt;docker buildx&lt;/a&gt; to build images.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# build the container&#xA;make container REGISTRY=registry VERSION=tag&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;# build the container behind a proxy&#xA;make container REGISTRY=registry VERSION=tag \&#xA;    HTTP_PROXY=http://&amp;lt;proxy_address&amp;gt;:&amp;lt;proxy_port&amp;gt; \&#xA;    HTTPS_PROXY=https://&amp;lt;proxy_address&amp;gt;:&amp;lt;proxy_port&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;# build the container for an OS/arch other than the current (e.g. you are on&#xA;# MacOS and want to run on Linux)&#xA;make container REGISTRY=registry VERSION=tag \&#xA;    GOOS=linux GOARCH=amd64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;# make a directory (owned by you) for the volume&#xA;export DIR=&#34;/tmp/git-data&#34;&#xA;mkdir -p $DIR&#xA;&#xA;# run the container (as your own UID)&#xA;&#xA;# run the container&#xA;docker run -d \&#xA;    -v $DIR:/tmp/git \&#xA;    -u$(id -u):$(id -g) \&#xA;    registry/git-sync:tag \&#xA;        --repo=https://github.com/kubernetes/git-sync \&#xA;        --root=/tmp/git/root \&#xA;        --period=30s&#xA;&#xA;# run an nginx container to serve the content&#xA;docker run -d \&#xA;    -p 8080:80 \&#xA;    -v $DIR:/usr/share/nginx/html \&#xA;    nginx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Volumes&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;--root&lt;/code&gt; flag must indicate either a directory that either a) does not exist (it will be created); or b) exists and is empty; or c) can be emptied by removing all of the contents.&lt;/p&gt; &#xA;&lt;p&gt;Why? Git demands to clone into an empty directory. If the directory exists and is not empty, git-sync will try to empty it by removing everything in it (we can&#39;t just &lt;code&gt;rm -rf&lt;/code&gt; the dir because it might be a mounted volume). If that fails, git-sync will abort.&lt;/p&gt; &#xA;&lt;p&gt;With the above example or with a Kubernetes &lt;code&gt;emptyDir&lt;/code&gt;, there is usually no problem. The problematic case is when the volume is the root of a filesystem, which sometimes contains metadata (e.g. ext{2,3,4} have a &lt;code&gt;lost+found&lt;/code&gt; dir). Git will not clone into such a directory (&lt;code&gt;fatal: destination path &#39;/tmp/git-data&#39; already exists and is not an empty directory&lt;/code&gt;). The only real solution is to use a sub-directory of the volume as the &lt;code&gt;--root&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Manual&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;GIT-SYNC&#xA;&#xA;NAME&#xA;    git-sync - sync a remote git repository&#xA;&#xA;SYNOPSIS&#xA;    git-sync --repo=&amp;lt;repo&amp;gt; [OPTION]...&#xA;&#xA;DESCRIPTION&#xA;&#xA;    Fetch a remote git repository to a local directory, poll the remote for&#xA;    changes, and update the local copy.&#xA;&#xA;    This is a perfect &#34;sidecar&#34; container in Kubernetes.  For example, it can&#xA;    periodically pull files down from a repository so that an application can&#xA;    consume them.&#xA;&#xA;    git-sync can pull one time, or on a regular interval.  It can read from the&#xA;    HEAD of a branch, from a git tag, or from a specific git hash.  It will only&#xA;    re-pull if the target has changed in the remote repository.  When it&#xA;    re-pulls, it updates the destination directory atomically.  In order to do&#xA;    this, it uses a git worktree in a subdirectory of the --root and flips a&#xA;    symlink.&#xA;&#xA;    git-sync can pull over HTTP(S) (with authentication or not) or SSH.&#xA;&#xA;    git-sync can also be configured to make a webhook call upon successful git&#xA;    repo synchronization.  The call is made after the symlink is updated.&#xA;&#xA;OPTIONS&#xA;&#xA;    Many options can be specified as either a commandline flag or an environment&#xA;    variable.&#xA;&#xA;    --add-user, $GIT_SYNC_ADD_USER&#xA;            Add a record to /etc/passwd for the current UID/GID.  This is&#xA;            needed to use SSH with an arbitrary UID (see --ssh).  This assumes&#xA;            that /etc/passwd is writable by the current UID.&#xA;&#xA;    --askpass-url &amp;lt;string&amp;gt;, $GIT_SYNC_ASKPASS_URL&#xA;            A URL to query for git credentials.  The query must return success&#xA;            (200) and produce a series of key=value lines, including&#xA;            &#34;username=&amp;lt;value&amp;gt;&#34; and &#34;password=&amp;lt;value&amp;gt;&#34;.&#xA;&#xA;    --branch &amp;lt;string&amp;gt;, $GIT_SYNC_BRANCH&#xA;            The git branch to check out.  If not specified, this defaults to&#xA;            the default branch of --repo.&#xA;&#xA;    --change-permissions &amp;lt;int&amp;gt;, $GIT_SYNC_PERMISSIONS&#xA;            Change permissions on the checked-out files to the specified mode.&#xA;&#xA;    --cookie-file &amp;lt;string&amp;gt;, $GIT_SYNC_COOKIE_FILE&#xA;            Use a git cookiefile (/etc/git-secret/cookie_file) for&#xA;            authentication.&#xA;&#xA;    --depth &amp;lt;int&amp;gt;, $GIT_SYNC_DEPTH&#xA;            Create a shallow clone with history truncated to the specified&#xA;            number of commits.  If not specified, this defaults to cloning the&#xA;            full history of the repo.&#xA;&#xA;    --error-file &amp;lt;string&amp;gt;, $GIT_SYNC_ERROR_FILE&#xA;            The path to an optional file into which errors will be written.&#xA;            This may be an absolute path or a relative path, in which case it&#xA;            is relative to --root.  If it is relative to --root, the first path&#xA;            element may not start with a period.&#xA;&#xA;    --exechook-backoff &amp;lt;duration&amp;gt;, $GIT_SYNC_EXECHOOK_BACKOFF&#xA;            The time to wait before retrying a failed --exechook-command.  If&#xA;            not specified, this defaults to 3 seconds (&#34;3s&#34;).&#xA;&#xA;    --exechook-command &amp;lt;string&amp;gt;, $GIT_SYNC_EXECHOOK_COMMAND&#xA;            An optional command to be executed after syncing a new hash of the&#xA;            remote repository.  This command does not take any arguments and&#xA;            executes with the synced repo as its working directory.  The&#xA;            environment variable $GITSYNC_HASH will be set to the git SHA that&#xA;            was synced.  The execution is subject to the overall --sync-timeout&#xA;            flag and will extend the effective period between sync attempts.&#xA;            This flag obsoletes --sync-hook-command, but if sync-hook-command&#xA;            is specified, it will take precedence.&#xA;&#xA;    --exechook-timeout &amp;lt;duration&amp;gt;, $GIT_SYNC_EXECHOOK_TIMEOUT&#xA;            The timeout for the --exechook-command.  If not specifid, this&#xA;            defaults to 30 seconds (&#34;30s&#34;).&#xA;&#xA;    --git &amp;lt;string&amp;gt;, $GIT_SYNC_GIT&#xA;            The git command to run (subject to PATH search, mostly for&#xA;            testing).  This defaults to &#34;git&#34;.&#xA;&#xA;    --git-config &amp;lt;string&amp;gt;, $GIT_SYNC_GIT_CONFIG&#xA;            Additional git config options in &#39;key1:val1,key2:val2&#39; format.  The&#xA;            key parts are passed to &#39;git config&#39; and must be valid syntax for&#xA;            that command.  The val parts can be either quoted or unquoted&#xA;            values.  For all values the following escape sequences are&#xA;            supported: &#39;\n&#39; =&amp;gt; [newline], &#39;\t&#39; =&amp;gt; [tab], &#39;\&#34;&#39; =&amp;gt; &#39;&#34;&#39;, &#39;\,&#39; =&amp;gt;&#xA;            &#39;,&#39;, &#39;\\&#39; =&amp;gt; &#39;\&#39;.  Within unquoted values, commas MUST be escaped.&#xA;            Within quoted values, commas MAY be escaped, but are not required&#xA;            to be.  Any other escape sequence is an error.&#xA;&#xA;    --git-gc &amp;lt;string&amp;gt;, $GIT_SYNC_GIT_GC&#xA;            The git garbage collection behavior: one of &#34;auto&#34;, &#34;always&#34;,&#xA;            &#34;aggressive&#34;, or &#34;off&#34;.  If not specified, this defaults to&#xA;            &#34;auto&#34;.&#xA;&#xA;            - auto: Run &#34;git gc --auto&#34; once per successful sync.  This mode&#xA;              respects git&#39;s gc.* config params.&#xA;            - always: Run &#34;git gc&#34; once per successful sync.&#xA;            - aggressive: Run &#34;git gc --aggressive&#34; once per successful sync.&#xA;              This mode can be slow and may require a longer --sync-timeout value.&#xA;            - off: Disable explicit git garbage collection, which may be a good&#xA;              fit when also using --one-time.&#xA;&#xA;    -h, --help&#xA;            Print help text and exit.&#xA;&#xA;    --http-bind &amp;lt;string&amp;gt;, $GIT_SYNC_HTTP_BIND&#xA;            The bind address (including port) for git-sync&#39;s HTTP endpoint.  If&#xA;            not specified, the HTTP endpoint is not enabled.&#xA;&#xA;    --http-metrics, $GIT_SYNC_HTTP_METRICS&#xA;            Enable metrics on git-sync&#39;s HTTP endpoint, if it is enabled (see&#xA;            --http-bind).&#xA;&#xA;    --http-pprof, $GIT_SYNC_HTTP_PPROF&#xA;            Enable the pprof debug endpoints on git-sync&#39;s HTTP endpoint, if it&#xA;            is enabled (see --http-bind).&#xA;&#xA;    --link &amp;lt;string&amp;gt;, $GIT_SYNC_LINK&#xA;            The path to at which to create a symlink which points to the&#xA;            current git directory, at the currently synced SHA.  This may be an&#xA;            absolute path or a relative path, in which case it is relative to&#xA;            --root.  The last path element is the name of the link and must not&#xA;            start with a period.  Consumers of the synced files should always&#xA;            use this link - it is updated atomically and should always be&#xA;            valid.  The basename of the target of the link is the current SHA.&#xA;            If not specified, this defaults to the leaf dir of --repo.&#xA;&#xA;    --man&#xA;            Print this manual and exit.&#xA;&#xA;    --max-failures &amp;lt;int&amp;gt;, $GIT_SYNC_MAX_FAILURES&#xA;            The number of consecutive failures allowed before aborting (the&#xA;            first sync must succeed), Setting this to a negative value will&#xA;            retry forever after the initial sync.  If not specified, this&#xA;            defaults to 0, meaning any sync failure will terminate git-sync.&#xA;&#xA;    --one-time, $GIT_SYNC_ONE_TIME&#xA;            Exit after one sync.&#xA;&#xA;    --password &amp;lt;string&amp;gt;, $GIT_SYNC_PASSWORD&#xA;            The password or personal access token (see github docs) to use for&#xA;            git authentication (see --username).  NOTE: for security reasons,&#xA;            users should prefer --password-file or $GIT_SYNC_PASSWORD_FILE for&#xA;            specifying the password.&#xA;&#xA;    --password-file &amp;lt;string&amp;gt;, $GIT_SYNC_PASSWORD_FILE&#xA;            The file from which the password or personal access token (see&#xA;            github docs) to use for git authentication (see --username) will be&#xA;            read.&#xA;&#xA;    --period &amp;lt;duration&amp;gt;, $GIT_SYNC_PERIOD&#xA;            How long to wait between sync attempts.  This must be at least&#xA;            10ms.  This flag obsoletes --wait, but if --wait is specified, it&#xA;            will take precedence.  If not specified, this defaults to 10&#xA;            seconds (&#34;10s&#34;).&#xA;&#xA;    --repo &amp;lt;string&amp;gt;, $GIT_SYNC_REPO&#xA;            The git repository to sync.  This flag is required.&#xA;&#xA;    --rev &amp;lt;string&amp;gt;, $GIT_SYNC_REV&#xA;            The git revision (tag or hash) to check out.  If not specified,&#xA;            this defaults to &#34;HEAD&#34;.&#xA;&#xA;    --root &amp;lt;string&amp;gt;, $GIT_SYNC_ROOT&#xA;            The root directory for git-sync operations, under which --link will&#xA;            be created.  This must be a path that either a) does not exist (it&#xA;            will be created); b) is an empty directory; or c) is a directory&#xA;            which can be emptied by removing all of the contents.  This flag is&#xA;            required.&#xA;&#xA;    --sparse-checkout-file &amp;lt;string&amp;gt;, $GIT_SYNC_SPARSE_CHECKOUT_FILE&#xA;            The path to a git sparse-checkout file (see git documentation for&#xA;            details) which controls which files and directories will be checked&#xA;            out.  If not specified, the default is to check out the entire repo.&#xA;&#xA;    --ssh, $GIT_SYNC_SSH&#xA;            Use SSH for git authentication and operations.&#xA;&#xA;    --ssh-key-file &amp;lt;string&amp;gt;, $GIT_SYNC_SSH_KEY_FILE&#xA;            The SSH key to use when using --ssh.  If not specified, this&#xA;            defaults to &#34;/etc/git-secret/ssh&#34;.&#xA;&#xA;    --ssh-known-hosts, $GIT_SYNC_KNOWN_HOSTS&#xA;            Enable SSH known_hosts verification when using --ssh.  If not&#xA;            specified, this defaults to true.&#xA;&#xA;    --ssh-known-hosts-file &amp;lt;string&amp;gt;, $GIT_SYNC_SSH_KNOWN_HOSTS_FILE&#xA;            The known_hosts file to use when --ssh-known-hosts is specified.&#xA;            If not specified, this defaults to &#34;/etc/git-secret/known_hosts&#34;.&#xA;&#xA;    --submodules &amp;lt;string&amp;gt;, $GIT_SYNC_SUBMODULES&#xA;            The git submodule behavior: one of &#34;recursive&#34;, &#34;shallow&#34;, or&#xA;            &#34;off&#34;.  If not specified, this defaults to &#34;recursive&#34;.&#xA;&#xA;    --sync-timeout &amp;lt;duration&amp;gt;, $GIT_SYNC_SYNC_TIMEOUT&#xA;            The total time allowed for one complete sync.  This must be at least&#xA;            10ms.  This flag obsoletes --timeout, but if --timeout is specified,&#xA;            it will take precedence.  If not specified, this defaults to 120&#xA;            seconds (&#34;120s&#34;).&#xA;&#xA;    --touch-file &amp;lt;string&amp;gt;, $GIT_SYNC_TOUCH_FILE&#xA;            The path to an optional file which will be touched whenever a sync&#xA;            completes.  This may be an absolute path or a relative path, in&#xA;            which case it is relative to --root.  If it is relative to --root,&#xA;            the first path element may not start with a period.&#xA;&#xA;    --username &amp;lt;string&amp;gt;, $GIT_SYNC_USERNAME&#xA;            The username to use for git authentication (see --password-file or&#xA;            --password).&#xA;&#xA;    -v, --verbose &amp;lt;int&amp;gt;&#xA;            Set the log verbosity level.  Logs at this level and lower will be&#xA;            printed.&#xA;&#xA;    --version&#xA;            Print the version and exit.&#xA;&#xA;    --webhook-backoff &amp;lt;duration&amp;gt;, $GIT_SYNC_WEBHOOK_BACKOFF&#xA;            The time to wait before retrying a failed --webhook-url.  If not&#xA;            specified, this defaults to 3 seconds (&#34;3s&#34;).&#xA;&#xA;    --webhook-method &amp;lt;string&amp;gt;, $GIT_SYNC_WEBHOOK_METHOD&#xA;            The HTTP method for the --webhook-url.  If not specified, this defaults to &#34;POST&#34;.&#xA;&#xA;    --webhook-success-status &amp;lt;int&amp;gt;, $GIT_SYNC_WEBHOOK_SUCCESS_STATUS&#xA;            The HTTP status code indicating a successful --webhook-url.  Setting&#xA;            this to -1 disables success checks to make webhooks&#xA;            &#34;fire-and-forget&#34;.  If not specified, this defaults to 200.&#xA;&#xA;    --webhook-timeout &amp;lt;duration&amp;gt;, $GIT_SYNC_WEBHOOK_TIMEOUT&#xA;            The timeout for the --webhook-url.  If not specified, this defaults&#xA;            to 1 second (&#34;1s&#34;).&#xA;&#xA;    --webhook-url &amp;lt;string&amp;gt;, $GIT_SYNC_WEBHOOK_URL&#xA;            A URL for optional webhook notifications when syncs complete.  The&#xA;            header &#39;Gitsync-Hash&#39; will be set to the git SHA that was synced.&#xA;&#xA;EXAMPLE USAGE&#xA;&#xA;    git-sync \&#xA;        --repo=https://github.com/kubernetes/git-sync \&#xA;        --branch=main \&#xA;        --rev=HEAD \&#xA;        --period=10s \&#xA;        --root=/mnt/git&#xA;&#xA;AUTHENTICATION&#xA;&#xA;    Git-sync offers several authentication options to choose from.  If none of&#xA;    the following are specified, git-sync will try to access the repo in the&#xA;    &#34;natural&#34; manner.  For example, &#34;https://repo&#34; will try to use plain HTTPS&#xA;    and &#34;git@example.com:repo&#34; will try to use SSH.&#xA;&#xA;    username/password&#xA;            The --username (GIT_SYNC_USERNAME) and --password-file&#xA;            (GIT_SYNC_PASSWORD_FILE) or --password (GIT_SYNC_PASSWORD) flags&#xA;            will be used.  To prevent password leaks, the --password-file flag&#xA;            or GIT_SYNC_PASSWORD environment variable is almost always&#xA;            preferred to the --password flag.&#xA;&#xA;            A variant of this is --askpass-url (GIT_SYNC_ASKPASS_URL), which&#xA;            consults a URL (e.g. http://metadata) to get credentials on each&#xA;            sync.&#xA;&#xA;    SSH&#xA;            When --ssh (GIT_SYNC_SSH) is specified, the --ssh-key-file&#xA;            (GIT_SYNC_SSH_KEY_FILE) will be used.  Users are strongly advised&#xA;            to also use --ssh-known-hosts (GIT_SYNC_KNOWN_HOSTS) and&#xA;            --ssh-known-hosts-file (GIT_SYNC_SSH_KNOWN_HOSTS_FILE) when using&#xA;            SSH.&#xA;&#xA;    cookies&#xA;            When --cookie-file (GIT_SYNC_COOKIE_FILE) is specified, the&#xA;            associated cookies can contain authentication information.&#xA;&#xA;HOOKS&#xA;&#xA;    Webhooks and exechooks are executed asynchronously from the main git-sync&#xA;    process.  If a --webhook-url or --exechook-command is configured, whenever&#xA;    a new hash is synced the hook(s) will be invoked.  For exechook, that means&#xA;    the command is exec()&#39;ed, and for webhooks that means an HTTP request is&#xA;    sent using the method defined in --webhook-method.  Git-sync will retry&#xA;    both forms of hooks until they succeed (exit code 0 for exechooks, or&#xA;    --webhook-success-status for webhooks).  If unsuccessful, git-sync will&#xA;    wait --exechook-backoff or --webhook-backoff (as appropriate) before&#xA;    re-trying the hook.&#xA;&#xA;    Hooks are not guaranteed to succeed on every single SHA change.  For example,&#xA;    if a hook fails and a new SHA is synced during the backoff period, the&#xA;    retried hook will fire for the newest SHA.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>