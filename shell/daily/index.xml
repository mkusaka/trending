<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-10T01:32:59Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>leviathansecurity/TunnelVision</title>
    <updated>2024-05-10T01:32:59Z</updated>
    <id>tag:github.com,2024-05-10:/leviathansecurity/TunnelVision</id>
    <link href="https://github.com/leviathansecurity/TunnelVision" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A network technique that decloaks a VPN users traffic on a local network without disconnecting them from a VPN.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TunnelVision: Decloaking Routing-Based VPNs&lt;/h1&gt; &#xA;&lt;h2&gt;CVE-2024-3661&lt;/h2&gt; &#xA;&lt;p&gt;TunnelVision is a local network VPN leaking technique that allows an attacker to read, drop, and sometimes modify VPN traffic from a targets on the local network. This technique does not activate kill-switches and does not have a full fix for every major operating system. We are using the built-in and widely supported feature DHCP option 121 to do this.&lt;/p&gt; &#xA;&lt;p&gt;Option 121 supports installing multiple routes with CIDR ranges. By installing multiple /1 routes an attacker can leak all traffic of a targeted user, or an attacker might choose to leak only certain IP addresses for stealth reasons. We&#39;re calling this effect &lt;strong&gt;decloaking&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;TunnelVision has been theoretically exploitable since 2002, but has gone &lt;del&gt;publicly unnoticed&lt;/del&gt;** as far as we can tell. For this reason, we are publishing broadly to make the privacy and security industry aware of this capability. In addition, the mitigation we&#39;ve observed from VPN providers renders a VPN pointless in public settings and challenges VPN providers&#39; assurances that a VPN is able to secure a user&#39;s traffic on untrusted networks.&lt;/p&gt; &#xA;&lt;p&gt;A fix is available on Linux when configuring the VPN users host to utilize network namespaces. However, we did not encounter its use outside of our own research. The best documentation we&#39;ve found about that fix is available &lt;a href=&#34;https://www.wireguard.com/netns/#the-new-namespace-solution&#34;&gt;from WireGuard&#39;s team.&lt;/a&gt; It remains unclear, at the time of publishing, whether this fix or a similar fix is also possible on other operating systems such as &lt;a href=&#34;https://serverfault.com/questions/1001190/windows-equivalent-of-linux-network-namespace&#34;&gt;Windows&lt;/a&gt; and &lt;a href=&#34;https://apple.stackexchange.com/questions/429079/does-macos-have-network-namespaces-like-linux&#34;&gt;MacOS&lt;/a&gt; due to neither appearing to have support for network namespaces.&lt;/p&gt; &#xA;&lt;p&gt;** UPDATE: The purpose of this research was to test this technique against modern VPN providers to determine their vulnerability and to notify the wider public of this issue. This is why we agreed with CISA to file a CVE when we disclosed to them and why we decided to name the vulnerability.&lt;/p&gt; &#xA;&lt;p&gt;After publication, we have received details about prior research into combining routing table behavior with option 121. These researchers showed that at least some people were aware of DHCP option 121&#39;s effect on VPNs going back to at least 2015. Despite this, the research did not lead to wide deployment of mitigations nor the general public awareness of the decloaking behavior.&lt;/p&gt; &#xA;&lt;p&gt;That said, we are grateful for the input of past researchers who explored the problem space. We will continue to credit our fellow security researchers who explored these issues.&lt;/p&gt; &#xA;&lt;p&gt;Prior works referencing DHCP 121 route injection or VPN decloaking:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2015 &lt;a href=&#34;https://www.agwa.name/blog/post/hardening_openvpn_for_def_con%5D&#34;&gt;Hardening OpenVPN for Def Con&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2016 &lt;a href=&#34;https://github.com/samyk/poisontap&#34;&gt;Samy Kamkar&#39;s PoisonTap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2017 &lt;a href=&#34;https://mstdn.io/@jomo/98981403329690455&#34;&gt;Jomo&#39;s Mastodon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2023 &lt;a href=&#34;https://lowendtalk.com/discussion/188857/a-rogue-dhcp-server-within-your-network-can-and-will-hijack-your-vpn-traffic&#34;&gt;Lowend talk thread&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TunnelVision Research Team&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Researchers: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/in/lmoratti/&#34;&gt;Lizzie Moratti&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://www.linkedin.com/in/danicronce/&#34;&gt;Dani Cronce&lt;/a&gt; from &lt;a href=&#34;https://www.leviathansecurity.com/&#34;&gt;Leviathan Security Group&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tunnelvisionbug.com/&#34;&gt;General Advisory &amp;amp; FAQ &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Video Proof of Concept &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ajsLmZia6UU&#34;&gt;With commentary&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://drive.google.com/file/d/1JMg5lWSNurBRjzPhcHleQ7YNJQkAHU1o/view?usp=drive_link&#34;&gt;Original, no editing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Full details at &lt;a href=&#34;https://www.leviathansecurity.com/blog/tunnelvision&#34;&gt;TunnelVision blogpost&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Affected Operating Systems&lt;/h2&gt; &#xA;&lt;p&gt;TunnelVision appears to work on any operating system that has a DHCP client that implements support for DHCP option 121. Most modern operating systems support this such as Linux, Windows, iOS and MacOS. Notably, Android does not appear to have support for option 121 and remains unaffected.&lt;/p&gt; &#xA;&lt;h2&gt;Affected VPN Protocols&lt;/h2&gt; &#xA;&lt;p&gt;TunnelVision works regardless of any VPN protocol (Wireguard, OpenVPN, IPsec), ciphersuites, or other cryptographic properties. We use DHCP option 121 to route traffic away from the VPN&#39;s interface so no VPN encryption routine may happen.&lt;/p&gt; &#xA;&lt;h2&gt;Problems with observed mitigations&lt;/h2&gt; &#xA;&lt;p&gt;We have observed host-based firewalls that will drop traffic going over the physical interface talking to the DHCP server. The VPN tunnel will always remain intact, and since we can control which IPs will be dropped via option 121, this becomes a &#34;selective denial-of-service&#34; instead of decloaking traffic. This introduces a side-channel that can be used to deanonymize the destination of the VPN traffic. In addition, by denying all traffic, this can render the VPN entirely useless or tempt a user to self-debug their settings to remove this mitigation.&lt;/p&gt; &#xA;&lt;p&gt;The attacker can allow all traffic for a period of time can use traffic analysis to create a baseline for the volume of traffic. They can then push routes that deny traffic for IPs or ranges and compare the volume of traffic against this baseline. Using statistics, it&#39;s possible to confirm whether the targeted user is talking to a particular IP address or space. This is most relevant in places where the government has banned certain services.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements to exploit&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;An attacker is on the same local network as a targeted user&lt;/li&gt; &#xA; &lt;li&gt;An attacker is able to control/modify the DHCP lease for the targeted user&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;&lt;strong&gt;How decloaking works:&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We supply a lease that is valid for a short amount of time. For this lab, we use 30 seconds. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In some cases, Windows doesn&#39;t like 2-10 second ranges and has mixed results. Perhaps someone more familiar with its network stack could work around this but we were unable to.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The attacker changes the DHCP configuration to push option 121 classless static routes (RFC3442) to the victim. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;As an attacker, we can control the IP or ranges we want to leak by adjusting the prefix length of the route we push. I.e. a /32 vs /1 prefix length.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The routing table of the victim adds the route from DHCP automatically. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The highest prefix length match is chosen. I.e. a /32 route has a higher prefix length than a /1 route.&lt;/li&gt; &#xA;   &lt;li&gt;DHCP routes are &lt;em&gt;automatically configured to go over the same interface as the DHCP server&lt;/em&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Routing decisions happen before the traffic can be encrypted (see appendix diagrams), so traffic will be unencrypted. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;It does not matter what VPN protocol is in use or the strength of its encryption.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The attacker sets themselves as the default gateway, so they can then read that unencrypted traffic before forwarding it. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The VPN tunnel remains connected and reports to the user that they are still connected.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Virtual Machine&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;There is a &lt;a href=&#34;https://drive.google.com/file/d/1WLJGs3ZUypf6hLh5WL4AJmsKdUOZo5yZ/view?usp=drive_link&#34;&gt;virtual machine image&lt;/a&gt; that will be easier to get up and running.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;username:&lt;/strong&gt; administrator&lt;br&gt; &lt;strong&gt;password:&lt;/strong&gt; password&lt;/p&gt; &#xA;&lt;h2&gt;Manual DHCP Server Setup:&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use a Windows host for the VM lab&lt;/li&gt; &#xA; &lt;li&gt;Use VirtualBox for virtualizing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;VirtualBox VM config&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use &lt;code&gt;Ubuntu Server 22.04&lt;/code&gt; ISO (&lt;a href=&#34;https://ubuntu.com/download/server&#34;&gt;https://ubuntu.com/download/server&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Configure a &lt;strong&gt;bridged adapter&lt;/strong&gt; in the VMs settings &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/leviathansecurity/TunnelVision/master/instruction_screenshots/bridged_adapter.png&#34; alt=&#34;bridged adapter in virtualbox&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Configure an &lt;strong&gt;internal network adapter&lt;/strong&gt; in the VMs settings &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/leviathansecurity/TunnelVision/master/instruction_screenshots/internal_network_adapter.png&#34; alt=&#34;internal adapter in virtualbox&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Start the machine follow default install options on the VM &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Make sure to install OpenSSH and &lt;strong&gt;allow password auth&lt;/strong&gt; &lt;img src=&#34;https://raw.githubusercontent.com/leviathansecurity/TunnelVision/master/instruction_screenshots/openssh.png&#34; alt=&#34;install openssh server&#34;&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Do not install docker, we&#39;ve seen issues with it&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Log in via the VirtualBox console &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/leviathansecurity/TunnelVision/master/instruction_screenshots/virtualbox_console.png&#34; alt=&#34;console in virtualbox&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hostname -I &lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The IP address is needed for the next step where we SSH from our Windows host&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Setting up the server&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;From your Windows host open Powershell &lt;code&gt;ssh administrator@{IP from Install Step 6}&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/leviathansecurity/TunnelVision/master/instruction_screenshots/powershell_ssh.png&#34; alt=&#34;powershell ssh example &#34;&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone https://github.com/leviathansecurity/TunnelVision.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd TunnelVision&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo ./configdhcpserver.sh&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This will only need to be ran once&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo ./startup.sh &lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This script will need to be ran each reboot&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Helpful DHCP Server commands:&lt;/h3&gt; &#xA;&lt;h4&gt;Utility commands&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cat /etc/dhcp/dhcpd.conf&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Shows the current configuration&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo ~/TunnelVision/pushrouteconfig.sh &lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Pushes a DHCP option 121 route for 8.8.8.8/32&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo ~/TunnelVision/norouteconfig.sh&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Allows you to switch back to pushing no routes for testing purposes&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo systemctl status isc-dhcp-server&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Shows current status of the DHCP server&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo systemctl restart isc-dhcp-server&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Restarts the DHCP server, mandatory if you manually edit the config file&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo systemctl start isc-dhcp-server&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Starts the DHCP server&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo systemctl stop isc-dhcp-server&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Stops the DHCP server&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo journalctl -u isc-dhcp-server.service | tail -n 50 &lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Shows the last 50 log lines from the service&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;watch &#34;journalctl -u isc-dhcp-server.service | tail -n 50&#34;&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Shows the last 50 logs, and also refreshes every 2s by default&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo tcpdump -i enp0s8 &lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Shows the traffic on the internal network interface, you can use tcpdump filters such as &#34;icmp&#34; to filter to relevant traffic&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Commands for editing configuration files:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;vi /etc/dhcp/dhcpd.conf&lt;/code&gt; or &lt;code&gt;nano /etc/dhcp/dhcpd.conf&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The configuration the server uses.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vi /etc/dhcp/dhcpd-route.conf&lt;/code&gt; or &lt;code&gt;nano /etc/dhcp/dhcpd-route.conf&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Used in pushrouteconfig.sh&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vi /etc/dhcp/dhcpd-noroute.conf&lt;/code&gt; or &lt;code&gt;nano /etc/dhcp/dhcpd-noroute.conf&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Used in norouteconfig.sh&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Lab Setup&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/leviathansecurity/TunnelVision/master/images/LabSetup.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Rogue admin lab&lt;/h3&gt; &#xA;&lt;p&gt;After configuring the DHCP server, start a new VM to mimic a VPN user.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Choose internal network for its network adapter in the VMs settings. This will mean it will obtain a DHCP lease from the server we control.&lt;/li&gt; &#xA; &lt;li&gt;Install a VPN on the user machine.&lt;/li&gt; &#xA; &lt;li&gt;(Optional) Turn off any VPN setting that enables a host-firewall rule to drop traffic to non-VPN interfaces on the victim machine.&lt;/li&gt; &#xA; &lt;li&gt;Connect to the VPN.&lt;/li&gt; &#xA; &lt;li&gt;On the attacker DHCP server, push the demo DHCP 121 route (8.8.8.8/32): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;sudo ./pushrouteconfig.sh&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;On the victim machine, show the route table and observe there is a route for 8.8.8.8 that goes over a non-VPN interface: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ubuntu command: &lt;code&gt;ip route&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Windows command: &lt;code&gt;route print&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Ping 8.8.8.8 from the victim machine. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;ping 8.8.8.8&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Observe that it will either ping or will be dropped.&lt;/li&gt; &#xA; &lt;li&gt;(Optional) Install Wireshark or tcpdump to the victim host and manually confirm the interface the ICMP traffic is using. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If ping is not working, observe it goes over NO interface which is the selective denial-of-service behavior&lt;/li&gt; &#xA;   &lt;li&gt;If ping is working, observe it is NOT going over the VPN tunnel&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;On the attacker DHCP server, observe you can read the unencrypted traffic. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;sudo tcpdump -i enp0s8 icmp&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;(enp0s8 should be the interface name you are serving DHCP over)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Adjacent Host lab&lt;/h3&gt; &#xA;&lt;p&gt;[Coming Soon] We are still working on releasing our tool, however in our POC video you can observe a demo of this lab.&lt;/p&gt; &#xA;&lt;h1&gt;Appendix&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Data flow for a VPN working normally without malicious DHCP routes&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/leviathansecurity/TunnelVision/master/images/Dataflow-VPN-connected-no-leaks.png&#34; alt=&#34;Dataflow no leaks&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Below are the steps from the diagram in as much detail as we could reasonably provide. We feel it could be useful to a future security researcher or a developer trying to understand the technology, so we are including it for their benefit.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;An application process sends a payload to a socket it creates.&lt;/li&gt; &#xA; &lt;li&gt;The socket formats the payload into a packet and sends it to the routing table to determine which interface it should be sent through.&lt;/li&gt; &#xA; &lt;li&gt;The routing table determines that the packet should be sent through tun0.&lt;/li&gt; &#xA; &lt;li&gt;The routing table sends the packet to the firewall.&lt;/li&gt; &#xA; &lt;li&gt;The firewall rules allow the packet to continue to tun0.&lt;/li&gt; &#xA; &lt;li&gt;The network interface serializes the packet and writes it into a file descriptor at /dev/net/tun in userland.&lt;/li&gt; &#xA; &lt;li&gt;The VPN client process reads the unencrypted raw bytes of the packet in the file descriptor.&lt;/li&gt; &#xA; &lt;li&gt;The VPN process creates an encrypted payload and sends it to a socket the VPN made.&lt;/li&gt; &#xA; &lt;li&gt;The socket formats the payload into a packet that is bound for the VPN’s server and sends it to the routing table to determine which interface it should be sent through.&lt;/li&gt; &#xA; &lt;li&gt;The routing table determines that the packet must be sent over the wlan0 interface.&lt;/li&gt; &#xA; &lt;li&gt;The routing table sends the packet to the firewall.&lt;/li&gt; &#xA; &lt;li&gt;The firewall rules determine that the outbound packet may continue using wlan0.&lt;/li&gt; &#xA; &lt;li&gt;The network interface transfers the packet to its Wi-Fi driver.&lt;/li&gt; &#xA; &lt;li&gt;The Wi-Fi driver sends the VPN-bound packet to the physical network interface card (NIC).&lt;/li&gt; &#xA; &lt;li&gt;The packet is sent across the internet to the VPN server.&lt;/li&gt; &#xA; &lt;li&gt;The VPN server sends a packet in response back to the physical NIC.&lt;/li&gt; &#xA; &lt;li&gt;The NIC sends the response packet to the Wi-Fi driver.&lt;/li&gt; &#xA; &lt;li&gt;The Wi-Fi driver delivers the response packet to wlan0.&lt;/li&gt; &#xA; &lt;li&gt;The response packet is sent to the firewall.&lt;/li&gt; &#xA; &lt;li&gt;The firewall rules allow the packet to continue.&lt;/li&gt; &#xA; &lt;li&gt;The packet is returned to the VPN socket.&lt;/li&gt; &#xA; &lt;li&gt;The socket receives the packet and sends the packet’s encrypted payload to the VPN client process.&lt;/li&gt; &#xA; &lt;li&gt;The VPN client process decrypts the payload and writes the unencrypted raw bytes of the response packet to the file descriptor.&lt;/li&gt; &#xA; &lt;li&gt;The tun0 interface deserializes the bytes from the file descriptor and formats it into a packet.&lt;/li&gt; &#xA; &lt;li&gt;The tun0 interface sends the packet to the firewall.&lt;/li&gt; &#xA; &lt;li&gt;The firewall rules allow the packet to continue.&lt;/li&gt; &#xA; &lt;li&gt;The packet is returned to the socket opened by the user’s application process.&lt;/li&gt; &#xA; &lt;li&gt;The payload from the packet is returned to the application process.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Data flow for when an attacker is pushing 121 routes without a host firewall setting enabled, creating a leak.&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/leviathansecurity/TunnelVision/master/images/Malicious-DHCP-route-successful-leak.png&#34; alt=&#34;Dataflow no leaks&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Data flow for when an attacker is pushing 121 routes and the mitigation creates a selective denial of service instead of a leak due to the host-firewall setting being enabled.&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/leviathansecurity/TunnelVision/master/images/DHCP-route-but-firewall-drops.png&#34; alt=&#34;Dataflow no leaks&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>KANIKIG/Multi-EasyGost</title>
    <updated>2024-05-10T01:32:59Z</updated>
    <id>tag:github.com,2024-05-10:/KANIKIG/Multi-EasyGost</id>
    <link href="https://github.com/KANIKIG/Multi-EasyGost" rel="alternate"></link>
    <summary type="html">&lt;p&gt;致力于最简单好用的GOST小白脚本&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Multi-EasyGost一键脚本使用指南&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;感谢:&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;感谢 @ginuerzh 大佬开发的 &lt;a href=&#34;https://github.com/ginuerzh/gost&#34;&gt;gost&lt;/a&gt; 隧道程序 ，功能强大使用简单，想要详细了解的朋友可以查看&lt;a href=&#34;https://docs.ginuerzh.xyz/gost/&#34;&gt;官方文档&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;感谢 @风萧萧兮易水寒 大佬的&lt;a href=&#34;https://www.fiisi.com/?p=125&#34;&gt;原始脚本&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;感谢 @ STSDUST 提供的EasyGost脚本（已删库），此脚本是基于其进行修改增强&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;简介&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;项目地址及帮助文档:&lt;br&gt; &lt;a href=&#34;https://github.com/KANIKIG/Multi-EasyGost&#34;&gt;https://github.com/KANIKIG/Multi-EasyGost&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;脚本&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;启动脚本&lt;br&gt; &lt;code&gt;wget --no-check-certificate -O gost.sh https://raw.githubusercontent.com/KANIKIG/Multi-EasyGost/master/gost.sh &amp;amp;&amp;amp; chmod +x gost.sh &amp;amp;&amp;amp; ./gost.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;再次运行本脚本只需要输入&lt;code&gt;./gost.sh&lt;/code&gt;回车即可&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;注：由于 gost v2.11.2 功能稳定，此脚本将一直采用该版本，后续不再跟随官方更新&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;功能&lt;/h2&gt; &#xA;&lt;h3&gt;原脚本功能&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;实现了systemd及gost配置文件对gost进行管理&lt;/li&gt; &#xA; &lt;li&gt;在不借助其他工具(如screen)的情况下实现多条转发规则同时生效&lt;/li&gt; &#xA; &lt;li&gt;机器reboot后转发不失效&lt;/li&gt; &#xA; &lt;li&gt;支持传输类型： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;tcp+udp不加密转发&lt;/li&gt; &#xA;   &lt;li&gt;relay+tls加密&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;此脚本新增功能&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;增加了传输类型选择功能&lt;/li&gt; &#xA; &lt;li&gt;新支持传输类型 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;relay+ws&lt;/li&gt; &#xA;   &lt;li&gt;relay+wss&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;落地机一键创建ss/socks5/http代理 (gost内置)&lt;/li&gt; &#xA; &lt;li&gt;支持多传输类型的多落地简单型均衡负载&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;增加gost国内加速下载镜像&lt;/del&gt;（被恶意刷流量导致我损失，不再提供）&lt;/li&gt; &#xA; &lt;li&gt;简单创建或删除gost定时重启任务&lt;/li&gt; &#xA; &lt;li&gt;脚本自动检查更新&lt;/li&gt; &#xA; &lt;li&gt;转发CDN自选节点ip&lt;/li&gt; &#xA; &lt;li&gt;支持自定义tls证书，落地可一键申请证书，中转可开启证书校验&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;功能展示&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2020/12/14/q75PO6s2DMIcUKB.png&#34; alt=&#34;iShot2020-12-14下午05.42.23.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2020/12/14/vzpGlWmPtCrneOY.png&#34; alt=&#34;iShot2020-12-14下午05.42.39.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2020/10/16/fBHgwStVQxc821z.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2020/10/16/xgZ6eVAwSzDUFjO.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2020/10/16/lt6uAzI5X7yYWhr.png&#34; alt=&#34;4&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2020/12/14/YjiFTMCKs8lANbI.png&#34; alt=&#34;iShot2020-12-14下午05.43.46.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2020/12/14/VIcQSsoUaqpzx5T.png&#34; alt=&#34;iShot2020-12-14下午05.43.11.png&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>