<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-28T01:35:45Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cms-sw/cmsdist</title>
    <updated>2025-01-28T01:35:45Z</updated>
    <id>tag:github.com,2025-01-28:/cms-sw/cmsdist</id>
    <link href="https://github.com/cms-sw/cmsdist" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CMS Offline Software build configuration&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>nicolashery/mac-dev-setup</title>
    <updated>2025-01-28T01:35:45Z</updated>
    <id>tag:github.com,2025-01-28:/nicolashery/mac-dev-setup</id>
    <link href="https://github.com/nicolashery/mac-dev-setup" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A beginner&#39;s guide to setting up a development environment on macOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;macOS Dev Setup&lt;/h1&gt; &#xA;&lt;p&gt;This document describes how I set up my developer environment on a new MacBook or iMac. We will set up popular programming languages (for example &lt;a href=&#34;http://nodejs.org/&#34;&gt;Node&lt;/a&gt; (JavaScript), &lt;a href=&#34;http://www.python.org/&#34;&gt;Python&lt;/a&gt;, and &lt;a href=&#34;http://www.ruby-lang.org/&#34;&gt;Ruby&lt;/a&gt;). You may not need all of them for your projects, although I recommend having them set up as they always come in handy.&lt;/p&gt; &#xA;&lt;p&gt;The document assumes you are new to Mac, but can also be useful if you are reinstalling a system and need some reminder. The steps below were tested on &lt;strong&gt;macOS High Sierra&lt;/strong&gt; (10.13), but should work for more recent versions as well.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Contributing&lt;/strong&gt;: If you find any mistakes in the steps described below, or if any of the commands are outdated, do let me know! For any other suggestions, please understand if I don&#39;t include everything. This guide was originally written for some friends getting started with programming on a Mac, and as a personal reference for myself. I&#39;m trying to keep it simple!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/#system-update&#34;&gt;System update&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/#system-preferences&#34;&gt;System preferences&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/#security&#34;&gt;Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/#iterm2&#34;&gt;iTerm2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/#homebrew&#34;&gt;Homebrew&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/#git&#34;&gt;Git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/#visual-studio-code&#34;&gt;Visual Studio Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/#vim&#34;&gt;Vim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/#python&#34;&gt;Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/#nodejs&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/#ruby&#34;&gt;Ruby&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/#heroku&#34;&gt;Heroku&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/#postgresql&#34;&gt;PostgreSQL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/#redis&#34;&gt;Redis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/#elasticsearch&#34;&gt;Elasticsearch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/#projects-folder&#34;&gt;Projects folder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/#apps&#34;&gt;Apps&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;System update&lt;/h2&gt; &#xA;&lt;p&gt;First thing you need to do, on any OS actually, is update the system! For that: &lt;strong&gt;Apple Icon &amp;gt; About This Mac&lt;/strong&gt; then &lt;strong&gt;Software Update...&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;System preferences&lt;/h2&gt; &#xA;&lt;p&gt;If this is a new computer, there are a couple of tweaks I like to make to the System Preferences. Feel free to follow these, or to ignore them, depending on your personal preferences.&lt;/p&gt; &#xA;&lt;p&gt;In &lt;strong&gt;Apple Icon &amp;gt; System Preferences&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Trackpad &amp;gt; Tap to click&lt;/li&gt; &#xA; &lt;li&gt;Keyboard &amp;gt; Key Repeat &amp;gt; Fast (all the way to the right)&lt;/li&gt; &#xA; &lt;li&gt;Keyboard &amp;gt; Delay Until Repeat &amp;gt; Short (all the way to the right)&lt;/li&gt; &#xA; &lt;li&gt;Dock &amp;gt; Automatically hide and show the Dock&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;I recommend checking that basic security settings are enabled. You will be happy to have done so if ever your Mac is lost or stolen.&lt;/p&gt; &#xA;&lt;p&gt;In &lt;strong&gt;Apple Icon &amp;gt; System Preferences&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Users &amp;amp; Groups: If you haven&#39;t already set a password for your user during the initial set up, you should do so now&lt;/li&gt; &#xA; &lt;li&gt;Security &amp;amp; Privacy &amp;gt; General: Require password immediately after sleep or screen saver begins (you can keep a grace period of a couple minutes if you prefer, but I like to know that my computer locks as soon as I close it)&lt;/li&gt; &#xA; &lt;li&gt;Security &amp;amp; Privacy &amp;gt; FileVault: Make sure FileVault disk encryption is enabled&lt;/li&gt; &#xA; &lt;li&gt;iCloud: If you haven&#39;t already done so during set up, enable Find My Mac&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;iTerm2&lt;/h2&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;Since we&#39;re going to be spending a lot of time in the command-line, let&#39;s install a better terminal than the default one. Download and install &lt;a href=&#34;http://www.iterm2.com/&#34;&gt;iTerm2&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In &lt;strong&gt;Finder&lt;/strong&gt;, drag and drop the &lt;strong&gt;iTerm&lt;/strong&gt; Application file into the &lt;strong&gt;Applications&lt;/strong&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;You can now launch iTerm, through the &lt;strong&gt;Launchpad&lt;/strong&gt; for instance.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s just quickly change some preferences. In &lt;strong&gt;iTerm2 &amp;gt; Preferences...&lt;/strong&gt;, under the tab &lt;strong&gt;General&lt;/strong&gt;, uncheck &lt;strong&gt;Confirm closing multiple sessions&lt;/strong&gt; and &lt;strong&gt;Confirm &#34;Quit iTerm2 (Cmd+Q)&#34; command&lt;/strong&gt; under the section &lt;strong&gt;Closing&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In the tab &lt;strong&gt;Profiles&lt;/strong&gt;, create a new one with the &#34;+&#34; icon, and rename it to your first name for example. Then, select &lt;strong&gt;Other Actions... &amp;gt; Set as Default&lt;/strong&gt;. Under the section &lt;strong&gt;General&lt;/strong&gt; set &lt;strong&gt;Working Directory&lt;/strong&gt; to be &lt;strong&gt;Reuse previous session&#39;s directory&lt;/strong&gt;. Finally, under the section &lt;strong&gt;Window&lt;/strong&gt;, change the size to something better, like &lt;strong&gt;Columns: 125&lt;/strong&gt; and &lt;strong&gt;Rows: 35&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When done, hit the red &#34;X&#34; in the upper left (saving is automatic in macOS preference panes). Close the window and open a new one to see the size change.&lt;/p&gt; &#xA;&lt;h3&gt;Beautiful terminal&lt;/h3&gt; &#xA;&lt;p&gt;Since we spend so much time in the terminal, we should try to make it a more pleasant and colorful place. What follows might seem like a lot of work, but trust me, it&#39;ll make the development experience so much better.&lt;/p&gt; &#xA;&lt;p&gt;First let&#39;s add some color. There are many great color schemes out there, but if you don&#39;t know where to start you can try &lt;a href=&#34;https://github.com/nathanbuchar/atom-one-dark-terminal&#34;&gt;Atom One Dark&lt;/a&gt;. Download the iTerm presets for the theme by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ~/Downloads&#xA;curl -o &#34;Atom One Dark.itermcolors&#34; https://raw.githubusercontent.com/nathanbuchar/atom-one-dark-terminal/master/scheme/iterm/One%20Dark.itermcolors&#xA;curl -o &#34;Atom One Light.itermcolors&#34; https://raw.githubusercontent.com/nathanbuchar/atom-one-dark-terminal/master/scheme/iterm/One%20Light.itermcolors&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, in &lt;strong&gt;iTerm2 Preferences&lt;/strong&gt;, under &lt;strong&gt;Profiles&lt;/strong&gt; and &lt;strong&gt;Colors&lt;/strong&gt;, go to &lt;strong&gt;Color Presets... &amp;gt; Import...&lt;/strong&gt;, find and open the &lt;strong&gt;Atom One Dark.itermcolors&lt;/strong&gt; file we just downloaded. Repeat these steps for &lt;strong&gt;Atom One Light.itermcolors&lt;/strong&gt;. Now open &lt;strong&gt;Color Presets...&lt;/strong&gt; again and select &lt;strong&gt;Atom One Dark&lt;/strong&gt; to activate the dark theme (or choose the light them if that&#39;s your preference).&lt;/p&gt; &#xA;&lt;p&gt;Not a lot of colors yet. We need to tweak a little bit our Unix user&#39;s profile for that. This is done (on macOS and Linux), in the &lt;code&gt;~/.bash_profile&lt;/code&gt; text file (&lt;code&gt;~&lt;/code&gt; stands for the user&#39;s home directory).&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ll come back to the details of that later, but for now, just download the files &lt;a href=&#34;https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/.bash_profile&#34;&gt;.bash_profile&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/.bash_prompt&#34;&gt;.bash_prompt&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/.aliases&#34;&gt;.aliases&lt;/a&gt; attached to this document into your home directory (&lt;code&gt;.bash_profile&lt;/code&gt; is the one that gets loaded, I&#39;ve set it up to call the others):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ~&#xA;curl -O https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/.bash_profile&#xA;curl -O https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/.bash_prompt&#xA;curl -O https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/.aliases&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With that, open a new terminal tab (&lt;strong&gt;Cmd+T&lt;/strong&gt;) and see the change! Try the list commands: &lt;code&gt;ls&lt;/code&gt;, &lt;code&gt;ls -lh&lt;/code&gt; (aliased to &lt;code&gt;ll&lt;/code&gt;), &lt;code&gt;ls -lha&lt;/code&gt; (aliased to &lt;code&gt;la&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Now we have a terminal we can work with!&lt;/p&gt; &#xA;&lt;p&gt;(Thanks to Mathias Bynens for his awesome &lt;a href=&#34;https://github.com/mathiasbynens/dotfiles&#34;&gt;dotfiles&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;h2&gt;Homebrew&lt;/h2&gt; &#xA;&lt;p&gt;Package managers make it so much easier to install and update applications (for Operating Systems) or libraries (for programming languages). The most popular one for macOS is &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;An important dependency before Homebrew can work is the &lt;strong&gt;Command Line Developer Tools&lt;/strong&gt; for &lt;strong&gt;Xcode&lt;/strong&gt;. These include compilers that will allow you to build things from source. You can install them directly from the terminal with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;xcode-select --install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once that is done, we can install Homebrew by copy-pasting the installation command from the &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew homepage&lt;/a&gt; inside the terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/usr/bin/ruby -e &#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Follow the steps on the screen. You will be prompted for your user password so Homebrew can set up the appropriate permissions.&lt;/p&gt; &#xA;&lt;p&gt;Once installation is complete, you can run the following command to make sure everything works:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew doctor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;To install a package (or &lt;strong&gt;Formula&lt;/strong&gt; in Homebrew vocabulary) simply type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install &amp;lt;formula&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see if any of your packages need to be updated:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew outdated&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To update a package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew upgrade &amp;lt;formula&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Homebrew keeps older versions of packages installed, in case you want to rollback. That rarely is necessary, so you can do some cleanup to get rid of those old versions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew cleanup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see what you have installed (with their version numbers):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew list --versions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Homebrew Services&lt;/h3&gt; &#xA;&lt;p&gt;A nice extension to Homebrew is &lt;a href=&#34;https://github.com/Homebrew/homebrew-services&#34;&gt;Homebrew Services&lt;/a&gt;. It will automatically launch things like databases when your computer starts, so you don&#39;t have to do it manually every time.&lt;/p&gt; &#xA;&lt;p&gt;Homebrew Services will automatically install itself the first time you run it, so there is nothing special to do.&lt;/p&gt; &#xA;&lt;p&gt;After installing a service (for example a database), it should automatically add itself to Homebrew Services. If not, you can add it manually with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew services &amp;lt;formula&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start a service with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew services start &amp;lt;formula&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At anytime you can view which services are running with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew services list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Git&lt;/h2&gt; &#xA;&lt;p&gt;macOS comes with a pre-installed version of &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt;, but we&#39;ll install our own through Homebrew to allow easy upgrades and not interfere with the system version. To do so, simply run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When done, to test that it installed fine you can run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;which git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output should be &lt;code&gt;/usr/local/bin/git&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s set up some basic configuration. Download the &lt;a href=&#34;https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/.gitconfig&#34;&gt;.gitconfig&lt;/a&gt; file to your home directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ~&#xA;curl -O https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/.gitconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will add some color to the &lt;code&gt;status&lt;/code&gt;, &lt;code&gt;branch&lt;/code&gt;, and &lt;code&gt;diff&lt;/code&gt; Git commands, as well as a couple aliases. Feel free to take a look at the contents of the file, and add to it to your liking.&lt;/p&gt; &#xA;&lt;p&gt;Next, we&#39;ll define your Git user (should be the same name and email you use for &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; and &lt;a href=&#34;http://www.heroku.com/&#34;&gt;Heroku&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git config --global user.name &#34;Your Name Here&#34;&#xA;git config --global user.email &#34;your_email@youremail.com&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;They will get added to your &lt;code&gt;.gitconfig&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;On a Mac, it is important to remember to add &lt;code&gt;.DS_Store&lt;/code&gt; (a hidden macOS system file that&#39;s put in folders) to your project &lt;code&gt;.gitignore&lt;/code&gt; files. You also set up a global &lt;code&gt;.gitignore&lt;/code&gt; file, located for instance in your home directory (but you&#39;ll want to make sure any collaborators also do it):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ~&#xA;curl -O https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/.gitignore&#xA;git config --global core.excludesfile ~/.gitignore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Visual Studio Code&lt;/h2&gt; &#xA;&lt;p&gt;With the terminal, the text editor is a developer&#39;s most important tool. Everyone has their preferences, but if you&#39;re just getting started and looking for something simple that works, &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt; is a pretty good option.&lt;/p&gt; &#xA;&lt;p&gt;Go ahead and &lt;a href=&#34;https://code.visualstudio.com/Download&#34;&gt;download&lt;/a&gt; it. Open the &lt;strong&gt;.dmg&lt;/strong&gt; file, drag-and-drop in the &lt;strong&gt;Applications&lt;/strong&gt; folder, you know the drill now. Launch the application.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: At this point I&#39;m going to create a shortcut on the macOS Dock for both for Visual Studio Code and iTerm. To do so, right-click on the running application and select &lt;strong&gt;Options &amp;gt; Keep in Dock&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Just like the terminal, let&#39;s configure our editor a little. Go to &lt;strong&gt;Code &amp;gt; Preferences &amp;gt; Settings&lt;/strong&gt;. In the very top-right of the interface you should see an icon with brackets that appeared &lt;strong&gt;{ }&lt;/strong&gt; (on hover, it should say &#34;Open Settings (JSON)&#34;). Click on it, and paste the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;editor.tabSize&#34;: 2,&#xA;  &#34;editor.rulers&#34;: [80],&#xA;  &#34;files.insertFinalNewline&#34;: true,&#xA;  &#34;files.trimTrailingWhitespace&#34;: true,&#xA;  &#34;workbench.editor.enablePreview&#34;: false&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Feel free to tweak these to your preference. When done, save the file and close it.&lt;/p&gt; &#xA;&lt;p&gt;Pasting the above JSON snippet was handy to quickly customize things, but for further setting changes feel free to search in the &#34;Settings&#34; panel that opened first (shortcut &lt;strong&gt;Cmd+,&lt;/strong&gt;). When you&#39;re happy with your setup, you can save the JSON to quickly restore it on a new machine.&lt;/p&gt; &#xA;&lt;p&gt;If you remember only one keyboard shortcut in VS Code, it should be &lt;strong&gt;Cmd+Shift+P&lt;/strong&gt;. This opens the &lt;strong&gt;Command Palette&lt;/strong&gt;, from which you can run pretty much anything.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s open the command palette now, and search for &lt;code&gt;Shell Command: Install &#39;code&#39; command in PATH&lt;/code&gt;. Hit enter when it shows up. This will install the command-line tool &lt;code&gt;code&lt;/code&gt; to quickly open VS Code from the terminal. When in a projects directory, you&#39;ll be able to run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd myproject/&#xA;code .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;VS Code is very extensible. To customize it further, open the &lt;strong&gt;Extensions&lt;/strong&gt; tab on the left.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s do that now to customize the color of our editor. Search for the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=akamud.vscode-theme-onedark&#34;&gt;Atom One Dark Theme&lt;/a&gt; extension, select it and click &lt;strong&gt;Install&lt;/strong&gt;. Repeat this for the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=akamud.vscode-theme-onelight&#34;&gt;Atom One Light Theme&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, activate the theme by going to &lt;strong&gt;Code &amp;gt; Preferences &amp;gt; Color Theme&lt;/strong&gt; and selecting &lt;strong&gt;Atom One Dark&lt;/strong&gt; (or &lt;strong&gt;Atom One Light&lt;/strong&gt; if that is your preference).&lt;/p&gt; &#xA;&lt;h2&gt;Vim&lt;/h2&gt; &#xA;&lt;p&gt;Although VS Code will be our main editor, it is a good idea to learn some very basic usage of &lt;a href=&#34;http://www.vim.org/&#34;&gt;Vim&lt;/a&gt;. It is a very popular text editor inside the terminal, and is usually pre-installed on any Unix system.&lt;/p&gt; &#xA;&lt;p&gt;For example, when you run a Git commit, it will open Vim to allow you to type the commit message.&lt;/p&gt; &#xA;&lt;p&gt;I suggest you read a tutorial on Vim. Grasping the concept of the two &#34;modes&#34; of the editor, &lt;strong&gt;Insert&lt;/strong&gt; (by pressing &lt;code&gt;i&lt;/code&gt;) and &lt;strong&gt;Normal&lt;/strong&gt; (by pressing &lt;code&gt;Esc&lt;/code&gt; to exit Insert mode), will be the part that feels most unnatural. Also, it is good to know that typing &lt;code&gt;:x&lt;/code&gt; when in Normal mode will save and exit. After that, it&#39;s just remembering a few important keys.&lt;/p&gt; &#xA;&lt;p&gt;Vim&#39;s default settings aren&#39;t great, and you could spend a lot of time tweaking your configuration (the &lt;code&gt;.vimrc&lt;/code&gt; file). But if you only use Vim occasionally, you&#39;ll be happy to know that &lt;a href=&#34;https://github.com/tpope&#34;&gt;Tim Pope&lt;/a&gt; has put together some sensible defaults to quickly get started.&lt;/p&gt; &#xA;&lt;p&gt;Using Vim&#39;s built-in package support, install these settings by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir -p ~/.vim/pack/tpope/start&#xA;cd ~/.vim/pack/tpope/start&#xA;git clone https://tpope.io/vim/sensible.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With that, Vim will look a lot better next time you open it!&lt;/p&gt; &#xA;&lt;h2&gt;Python&lt;/h2&gt; &#xA;&lt;p&gt;macOS, like Linux, ships with &lt;a href=&#34;http://python.org/&#34;&gt;Python&lt;/a&gt; already installed. But you don&#39;t want to mess with the system Python (some system tools rely on it, etc.), so we&#39;ll install our own version using &lt;a href=&#34;https://github.com/yyuu/pyenv&#34;&gt;pyenv&lt;/a&gt;. This will also allow us to manage multiple versions of Python (ex: 2.7 and 3) should we need to.&lt;/p&gt; &#xA;&lt;p&gt;Install &lt;code&gt;pyenv&lt;/code&gt; via Homebrew by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install pyenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When finished, you should see instructions to add something to your profile. Open your &lt;code&gt;.bash_profile&lt;/code&gt; in the home directory (you can use &lt;code&gt;code ~/.bash_profile&lt;/code&gt;), and add the following line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if command -v pyenv 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1; then eval &#34;$(pyenv init -)&#34;; fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Save the file and reload it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;source ~/.bash_profile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Before installing a new Python version, the &lt;a href=&#34;https://github.com/pyenv/pyenv/wiki&#34;&gt;pyenv wiki&lt;/a&gt; recommends having a few dependencies available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install openssl readline sqlite3 xz zlib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can now list all available Python versions by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pyenv install --list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Look for the latest 3.x version (or 2.7.x), and install it (replace the &lt;code&gt;.x.x&lt;/code&gt; with actual numbers):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pyenv install 3.x.x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;List the Python versions you have locally with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pyenv versions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The star (&lt;code&gt;*&lt;/code&gt;) should indicate we are still using the &lt;code&gt;system&lt;/code&gt; version, which is the default. I recommend leaving it as the default as some &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node.js&lt;/a&gt; packages will use it in their installation process.&lt;/p&gt; &#xA;&lt;p&gt;You can switch your current terminal to another Python version with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pyenv shell 3.x.x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should now see that version when running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In a project directory, you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pyenv local 3.x.x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will save that project&#39;s Python version to a &lt;code&gt;.python-version&lt;/code&gt; file. Next time you enter the project&#39;s directory from a terminal, &lt;code&gt;pyenv&lt;/code&gt; will automatically load that version for you.&lt;/p&gt; &#xA;&lt;p&gt;For more information, see the &lt;a href=&#34;https://github.com/yyuu/pyenv/raw/master/COMMANDS.md&#34;&gt;pyenv commands&lt;/a&gt; documentation.&lt;/p&gt; &#xA;&lt;h3&gt;pip&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pip.pypa.io&#34;&gt;pip&lt;/a&gt; was also installed by &lt;code&gt;pyenv&lt;/code&gt;. It is the package manager for Python.&lt;/p&gt; &#xA;&lt;p&gt;Here are a couple Pip commands to get you started. To install a Python package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install &amp;lt;package&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To upgrade a package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install --upgrade &amp;lt;package&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see what&#39;s installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip freeze&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To uninstall a package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip uninstall &amp;lt;package&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;virtualenv&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://virtualenv.pypa.io&#34;&gt;virtualenv&lt;/a&gt; is a tool that creates an isolated Python environment for each of your projects.&lt;/p&gt; &#xA;&lt;p&gt;For a particular project, instead of installing required packages globally, it is best to install them in an isolated folder, that will be managed by &lt;code&gt;virtualenv&lt;/code&gt;. The advantage is that different projects might require different versions of packages, and it would be hard to manage that if you install packages globally.&lt;/p&gt; &#xA;&lt;p&gt;Instead of installing and using &lt;code&gt;virtualenv&lt;/code&gt; directly, we&#39;ll use the dedicated &lt;code&gt;pyenv&lt;/code&gt; plugin &lt;a href=&#34;https://github.com/yyuu/pyenv-virtualenv&#34;&gt;pyenv-virtualenv&lt;/a&gt; which will make things a bit easier for us. Install it via Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install pyenv-virtualenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After installation, add the following line to your &lt;code&gt;.bash_profile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if which pyenv-virtualenv-init &amp;gt; /dev/null; then eval &#34;$(pyenv virtualenv-init -)&#34;; fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And reload it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;source ~/.bash_profile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, let&#39;s say you have a project called &lt;code&gt;myproject&lt;/code&gt;. You can set up a virtualenv for that project and the Python version it uses (replace &lt;code&gt;3.x.x&lt;/code&gt; with the version you want):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pyenv virtualenv 3.x.x myproject&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the list of virtualenvs you created with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pyenv virtualenvs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use your project&#39;s virtualenv, you need to &lt;strong&gt;activate&lt;/strong&gt; it first (in every terminal where you are working on your project):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pyenv activate myproject&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you run &lt;code&gt;pyenv virtualenvs&lt;/code&gt; again, you should see a star (&lt;code&gt;*&lt;/code&gt;) next to the active virtualenv.&lt;/p&gt; &#xA;&lt;p&gt;Now when you install something:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install &amp;lt;package&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will get installed in that virtualenv&#39;s folder, and not conflict with other projects.&lt;/p&gt; &#xA;&lt;p&gt;You can also set your project&#39;s &lt;code&gt;.python-version&lt;/code&gt; to point to a virtualenv you created:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pyenv local myproject&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next time you enter that project&#39;s directory, &lt;code&gt;pyenv&lt;/code&gt; will automatically load the virtualenv for you.&lt;/p&gt; &#xA;&lt;h3&gt;Anaconda and Miniconda&lt;/h3&gt; &#xA;&lt;p&gt;The Anaconda/Miniconda distributions of Python come with many useful tools for scientific computing.&lt;/p&gt; &#xA;&lt;p&gt;You can install them using &lt;code&gt;pyenv&lt;/code&gt;, for example (replace &lt;code&gt;x.x.x&lt;/code&gt; with an actual version number):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pyenv install miniconda3-x.x.x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After loading an Anaconda or Miniconda Python distribution into your shell, you can create &lt;a href=&#34;https://docs.conda.io/&#34;&gt;conda&lt;/a&gt; environments (which are similar to virtualenvs):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pyenv shell miniconda3-x.x.x&#xA;conda create --name  mycondaproject&#xA;conda activate mycondaproject&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install packages, for example the &lt;a href=&#34;https://jupyter.org/&#34;&gt;Jupyter Notebook&lt;/a&gt;, using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda install jupyter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should now be able to run the notebook:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;jupyter notebook&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Deactivate the environment, and return to the default Python version with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda deactivate&#xA;pyenv shell --unset&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Known issue: &lt;code&gt;gettext&lt;/code&gt; not found by &lt;code&gt;git&lt;/code&gt; after installing Anaconda/Miniconda&lt;/h3&gt; &#xA;&lt;p&gt;If you installed an Anaconda/Miniconda distribution, you may start seeing an error message when using certain &lt;code&gt;git&lt;/code&gt; commands, similar to this one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pyenv: gettext.sh: command not found&#xA;&#xA;The `gettext.sh&#39; command exists in these Python versions:&#xA;  miniconda3-latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If that is the case, you can use the following &lt;a href=&#34;https://github.com/pyenv/pyenv/issues/688#issuecomment-428675578&#34;&gt;workaround&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install gettext&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then add this line to your &lt;code&gt;.bash_profile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Workaround for: https://github.com/pyenv/pyenv/issues/688#issuecomment-428675578&#xA;export PATH=&#34;/usr/local/opt/gettext/bin:$PATH&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Node.js&lt;/h2&gt; &#xA;&lt;p&gt;The recommended way to install &lt;a href=&#34;http://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; is to use &lt;a href=&#34;https://github.com/creationix/nvm&#34;&gt;nvm&lt;/a&gt; (Node Version Manager) which allows you to manage multiple versions of Node.js on the same machine.&lt;/p&gt; &#xA;&lt;p&gt;Install &lt;code&gt;nvm&lt;/code&gt; by copy-pasting the &lt;a href=&#34;https://github.com/creationix/nvm#install--update-script&#34;&gt;install script command&lt;/a&gt; into your terminal.&lt;/p&gt; &#xA;&lt;p&gt;Once that is done, open a new terminal and verify that it was installed correctly by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;command -v nvm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;View the all available stable versions of Node with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nvm ls-remote --lts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the latest stable version with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nvm install node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will also set the first version installed as your default version. You can install another specific version, for example Node 10, with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nvm install 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And switch between versions by using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nvm use 10&#xA;nvm use default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See which versions you have install with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nvm ls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Change the default version with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nvm alias default 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In a project&#39;s directory you can create a &lt;code&gt;.nvmrc&lt;/code&gt; file containing the Node.js version the project uses, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo &#34;10&#34; &amp;gt; .nvmrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next time you enter the project&#39;s directory from a terminal, you can load the correct version of Node.js by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nvm use&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;npm&lt;/h3&gt; &#xA;&lt;p&gt;Installing Node also installs the &lt;a href=&#34;https://npmjs.org/&#34;&gt;npm&lt;/a&gt; package manager.&lt;/p&gt; &#xA;&lt;p&gt;To install a package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install &amp;lt;package&amp;gt; # Install locally&#xA;npm install -g &amp;lt;package&amp;gt; # Install globally&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install a package and save it in your project&#39;s &lt;code&gt;package.json&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install --save &amp;lt;package&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see what&#39;s installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm list --depth 1 # Local packages&#xA;npm list -g --depth 1 # Global packages&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To find outdated packages (locally or globally):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm outdated [-g]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To upgrade all or a particular package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm update [&amp;lt;package&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To uninstall a package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm uninstall --save &amp;lt;package&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Ruby&lt;/h2&gt; &#xA;&lt;p&gt;Like Python, &lt;a href=&#34;http://www.ruby-lang.org/&#34;&gt;Ruby&lt;/a&gt; is already installed on Unix systems. But we don&#39;t want to mess around with that installation. More importantly, we want to be able to use the latest version of Ruby.&lt;/p&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;The recommended way to install Ruby is to use &lt;a href=&#34;https://github.com/rbenv/rbenv&#34;&gt;rbenv&lt;/a&gt;, which allows you to manage multiple versions of Ruby on the same machine. You can install &lt;code&gt;rbenv&lt;/code&gt; with Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install rbenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After installation, add the following line to your &lt;code&gt;.bash_profile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;eval &#34;$(rbenv init -)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And reload it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;source ~/.bash_profile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;The following command will show you which versions of Ruby are available to install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rbenv install --list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find the latest version in that list and install it with (replace &lt;code&gt;.x.x&lt;/code&gt; with actual version numbers):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rbenv install 2.x.x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the following to see which versions you have installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rbenv versions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The start (&lt;code&gt;*&lt;/code&gt;) will show you that we are currently using the default &lt;code&gt;system&lt;/code&gt; version. You can switch your terminal to use the one you just installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rbenv shell 2.x.x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also set it as the default version if you want:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rbenv global 2.x.x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In a specific project&#39;s directory, you can ask &lt;code&gt;rbenv&lt;/code&gt; to create a &lt;code&gt;.ruby-version&lt;/code&gt; file. Next time you enter that project&#39;s directory from the terminal, it will automatically load the correct Ruby version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rbenv local 2.x.x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check anytime which version you are using with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rbenv version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/rbenv/rbenv#command-reference&#34;&gt;rbenv&#39;s command reference&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;RubyGems &amp;amp; Bundler&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://rubygems.org/&#34;&gt;RubyGems&lt;/a&gt;, the Ruby package manager, was also installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;which gem&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first thing you want to do after installing a new Ruby version is to install &lt;a href=&#34;https://bundler.io/&#34;&gt;Bundler&lt;/a&gt;. This tool will allow you to set up separate environments for your different Ruby projects, so their required gem versions won&#39;t conflict with each other. Install Bundler with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem install bundler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In a new Ruby project directory, create a new &lt;code&gt;Gemfile&lt;/code&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add a dependency to the &lt;code&gt;Gemfile&lt;/code&gt;, for example the &lt;a href=&#34;&#34;&gt;Jekyll&lt;/a&gt; static site generator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;source &#34;https://rubygems.org&#34;&#xA;&#xA;gem &#34;jekyll&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then install the project&#39;s dependencies with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure you check in both the &lt;code&gt;Gemfile&lt;/code&gt; and &lt;code&gt;Gemfile.lock&lt;/code&gt; into your Git repository.&lt;/p&gt; &#xA;&lt;p&gt;Update a specific dependency with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle update &amp;lt;gem&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, see the &lt;a href=&#34;https://bundler.io/docs.html&#34;&gt;Bundler documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Heroku&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.heroku.com/&#34;&gt;Heroku&lt;/a&gt; is a &lt;a href=&#34;http://en.wikipedia.org/wiki/Platform_as_a_service&#34;&gt;Platform-as-a-Service&lt;/a&gt; (PaaS) that makes it really easy to deploy your apps. There are other similar solutions out there, but Heroku is among the most popular. Not only does it make a developer&#39;s life easier, but I find that having Heroku deployment in mind when building an app forces you to follow modern app development &lt;a href=&#34;http://www.12factor.net/&#34;&gt;best practices&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Assuming that you have an account (sign up if you don&#39;t), let&#39;s install the &lt;a href=&#34;https://devcenter.heroku.com/articles/heroku-cli&#34;&gt;Heroku CLI&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew tap heroku/brew&#xA;brew install heroku&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Login to your Heroku account using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;heroku login&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(This will prompt you to open a page in your web browser and log in to your Heroku account.)&lt;/p&gt; &#xA;&lt;p&gt;Once logged-in, you&#39;re ready to deploy apps! Heroku has great &lt;a href=&#34;https://devcenter.heroku.com/start&#34;&gt;Getting Started&lt;/a&gt; guides for different languages, so I&#39;ll let you refer to that. Heroku uses Git to push code for deployment, so make sure your app is under Git version control. A quick cheat sheet (if you&#39;ve used Heroku before):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd myapp/&#xA;heroku create myapp&#xA;git push heroku master&#xA;heroku ps&#xA;heroku logs -t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://devcenter.heroku.com/&#34;&gt;Heroku Dev Center&lt;/a&gt; is full of great resources, so be sure to check it out!&lt;/p&gt; &#xA;&lt;h2&gt;PostgreSQL&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt; is a popular relational database, and Heroku has first-class support for it.&lt;/p&gt; &#xA;&lt;p&gt;Install PostgreSQL using Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install postgresql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will automatically add itself to Homebrew Services. Start it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew services start postgresql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you reboot your machine, PostgreSQL will be restarted at login.&lt;/p&gt; &#xA;&lt;h3&gt;GUI&lt;/h3&gt; &#xA;&lt;p&gt;You can interact with your SQL database by running &lt;code&gt;psql&lt;/code&gt; in the terminal.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer a GUI (Graphical User Interface), &lt;a href=&#34;https://eggerapps.at/postico/&#34;&gt;Postico&lt;/a&gt; has a simple free version that let&#39;s you explore tables and run SQL queries.&lt;/p&gt; &#xA;&lt;h2&gt;Redis&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://redis.io/&#34;&gt;Redis&lt;/a&gt; is a fast, in-memory, key-value store, that uses the disk for persistence. It complements nicely a database such as PostgreSQL. There are a lot of &lt;a href=&#34;http://oldblog.antirez.com/post/take-advantage-of-redis-adding-it-to-your-stack.html&#34;&gt;interesting things&lt;/a&gt; that you can do with it. For example, it&#39;s often used for session management or caching by web apps, but it has many other uses.&lt;/p&gt; &#xA;&lt;p&gt;To install Redis, use Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install redis&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start it through Homebrew Services with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew services start redis&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I&#39;ll let you refer to Redis&#39; &lt;a href=&#34;http://redis.io/documentation&#34;&gt;documentation&lt;/a&gt; or other tutorials for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Elasticsearch&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/products/elasticsearch&#34;&gt;Elasticsearch&lt;/a&gt; is a distributed search and analytics engine. It uses an HTTP REST API, making it easy to work with from any programming language.&lt;/p&gt; &#xA;&lt;p&gt;You can use elasticsearch for things such as real-time search results, autocomplete, recommendations, machine learning, and more.&lt;/p&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;Elasticsearch runs on Java, so check if you have it installed by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If Java isn&#39;t installed yet, dismiss the window that just appeared by clicking &#34;Ok&#34;, and install Java via Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew cask install homebrew/cask-versions/java8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, install Elasticsearch with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install elasticsearch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;Start the Elasticsearch server with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew services start elasticsearch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Test that the server is working correctly by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -XGET &#39;http://localhost:9200/&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(You may need to wait a little bit for it to boot up if you just started the service.)&lt;/p&gt; &#xA;&lt;p&gt;Elasticsearch&#39;s &lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html&#34;&gt;documentation&lt;/a&gt; is more of a reference. To get started, you can also take a look at &lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/guide/master/index.html&#34;&gt;Elasticsearch: The Definitive Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;GUI&lt;/h3&gt; &#xA;&lt;p&gt;You can interact with the Elasticsearch server using &lt;code&gt;curl&lt;/code&gt;, or anything that can send an HTTP request.&lt;/p&gt; &#xA;&lt;p&gt;However, if you prefer a graphical interface, you can take a look at &lt;a href=&#34;https://opensource.appbase.io/dejavu/&#34;&gt;Dejavu&lt;/a&gt;. You can easily install it via the &lt;a href=&#34;https://chrome.google.com/webstore/detail/dejavu-elasticsearch-web/jopjeaiilkcibeohjdmejhoifenbnmlh&#34;&gt;Dejavu Chrome Extension&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Projects folder&lt;/h2&gt; &#xA;&lt;p&gt;This really depends on how you want to organize your files, but I like to put all my version-controlled projects in &lt;code&gt;~/Projects&lt;/code&gt;. Other documents I may have, or things not yet under version control, I like to put in &lt;code&gt;~/Dropbox&lt;/code&gt; (if you have &lt;a href=&#34;https://www.dropbox.com/&#34;&gt;Dropbox&lt;/a&gt; installed), or &lt;code&gt;~/Documents&lt;/code&gt; if you prefer to use &lt;a href=&#34;https://support.apple.com/en-ca/HT206985&#34;&gt;iCloud Drive&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Apps&lt;/h2&gt; &#xA;&lt;p&gt;Here is a quick list of some apps I use, and that you might find useful as well:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://1password.com/&#34;&gt;1Password&lt;/a&gt;: Securely store your login and passwords, and access them from all your devices. &lt;strong&gt;($3/month)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.dropbox.com/&#34;&gt;Dropbox&lt;/a&gt;: File syncing to the cloud. It is cross-platform, but if all your devices are Apple you may prefer &lt;a href=&#34;https://support.apple.com/en-ca/HT206985&#34;&gt;iCloud Drive&lt;/a&gt;. &lt;strong&gt;(Free for 2GB)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.getpostman.com/&#34;&gt;Postman&lt;/a&gt;: Easily make HTTP requests. Useful to test your REST APIs. &lt;strong&gt;(Free for basic features)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://desktop.github.com/&#34;&gt;GitHub Desktop&lt;/a&gt;: I do everything through the &lt;code&gt;git&lt;/code&gt; command-line tool, but I like to use GitHub Desktop just to review the diff of my changes. &lt;strong&gt;(Free)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.spectacleapp.com/&#34;&gt;Spectacle&lt;/a&gt;: Move and resize windows with keyboard shortcuts. &lt;strong&gt;(Free)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>