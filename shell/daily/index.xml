<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-18T01:52:39Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>asdf-vm/asdf-erlang</title>
    <updated>2022-08-18T01:52:39Z</updated>
    <id>tag:github.com,2022-08-18:/asdf-vm/asdf-erlang</id>
    <link href="https://github.com/asdf-vm/asdf-erlang" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Erlang plugin for asdf version manager&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;asdf-erlang&lt;/h1&gt; &#xA;&lt;p&gt;Erlang plugin for &lt;a href=&#34;https://github.com/asdf-vm/asdf&#34;&gt;asdf&lt;/a&gt; version manager that relies on &lt;a href=&#34;https://github.com/kerl/kerl&#34;&gt;kerl&lt;/a&gt; for builds.&lt;/p&gt; &#xA;&lt;p&gt;This plugin aims to combine the best of both worlds by using kerl.&lt;/p&gt; &#xA;&lt;p&gt;kerl&#39;s compatibility and build scripts, together with asdf&#39;s easy version switching and support for the .tool-versions file. You do not need to have kerl already installed to use this. The plugin will install it&#39;s own version of kerl automatically.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;asdf plugin add erlang https://github.com/asdf-vm/asdf-erlang.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Important: Make sure to read the &#34;Before asdf install&#34; section below to install dependencies!&lt;/p&gt; &#xA;&lt;h2&gt;Use&lt;/h2&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://github.com/asdf-vm/asdf&#34;&gt;asdf&lt;/a&gt; readme for instructions on how to install &amp;amp; manage versions of Erlang. To specify custom options you &lt;a href=&#34;https://github.com/kerl/kerl#kerl_base_dir&#34;&gt;can set environment variables just as you would when using kerl&lt;/a&gt;. For example, to skip the java dependency during installation use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export KERL_CONFIGURE_OPTIONS=&#34;--disable-debug --without-javac&#34;&#xA;asdf install erlang &amp;lt;version&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also install Erlang from git, or provide the url to a fork and build from git.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;asdf install erlang ref:master&#xA;&#xA;export OTP_GITHUB_URL=&#34;https://github.com/basho/otp&#34;&#xA;asdf install erlang ref:basho&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/kerl/kerl&#34;&gt;kerl&lt;/a&gt; for the complete list of customization options. Note that the &lt;code&gt;KERL_BASE_DIR&lt;/code&gt; and &lt;code&gt;KERL_CONFIG&lt;/code&gt; environment variables are set by the plugin when it runs kerl so it will not be possible to customize them.&lt;/p&gt; &#xA;&lt;h2&gt;Before &lt;code&gt;asdf install&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Ubuntu and Debian&lt;/h3&gt; &#xA;&lt;p&gt;Note that if you are using a previous version of Linux, you may need a different version of one of the below libraries.&lt;/p&gt; &#xA;&lt;h4&gt;Ubuntu 16.04 LTS &#34;Xenial Xerus&#34;&lt;/h4&gt; &#xA;&lt;p&gt;Install the build tools (dpkg-dev g++ gcc libc6-dev make debianutils m4 perl) &lt;code&gt;apt-get -y install build-essential autoconf&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Needed for HiPE (native code) support, but already installed by autoconf &lt;code&gt;apt-get -y install m4&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Needed for terminal handling (libc-dev libncurses5 libtinfo-dev libtinfo5 ncurses-bin) &lt;code&gt;apt-get -y install libncurses5-dev&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For building with wxWidgets (start observer or debugger!). Note that you may need to select the right &lt;code&gt;wx-config&lt;/code&gt; before installing Erlang. &lt;code&gt;apt-get -y install libwxgtk3.0-dev libgl1-mesa-dev libglu1-mesa-dev libpng-dev&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For building ssl (libssh-4 libssl-dev zlib1g-dev) &lt;code&gt;apt-get -y install libssh-dev&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;ODBC support (libltdl3-dev odbcinst1debian2 unixodbc) &lt;code&gt;apt-get -y install unixodbc-dev&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For building documentation: &lt;code&gt;apt-get install xsltproc fop&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to install all the above: &lt;code&gt;apt-get -y install build-essential autoconf m4 libncurses5-dev libwxgtk3.0-dev libgl1-mesa-dev libglu1-mesa-dev libpng-dev libssh-dev unixodbc-dev xsltproc fop&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Ubuntu 20.04 LTS&lt;/h4&gt; &#xA;&lt;p&gt;If you need to use &lt;code&gt;wxWebView&lt;/code&gt; in Erlang you&#39;ll want to a library for it: &lt;code&gt;apt-get -y install libwxgtk-webview3.0-gtk3-dev&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to install all the above: &lt;code&gt;apt-get -y install build-essential autoconf m4 libncurses5-dev libwxgtk3.0-gtk3-dev libwxgtk-webview3.0-gtk3-dev libgl1-mesa-dev libglu1-mesa-dev libpng-dev libssh-dev unixodbc-dev xsltproc fop libxml2-utils libncurses-dev openjdk-11-jdk&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Arch Linux&lt;/h3&gt; &#xA;&lt;p&gt;Provides most of the needed build tools. &lt;code&gt;pacman -S --needed base-devel&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Needed for terminal handling &lt;code&gt;pacman -S ncurses&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For building with wxWidgets (start observer or debugger!). Note that you may need to select the right &lt;code&gt;wx-config&lt;/code&gt; before installing Erlang. &lt;code&gt;pacman -S glu mesa wxgtk2 libpng&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For building ssl &lt;code&gt;pacman -S libssh&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;ODBC support &lt;code&gt;sudo pacman -S unixodbc&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For building documentation and elixir reference builds: &lt;code&gt;sudo pacman -S libxslt fop&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;OSX&lt;/h3&gt; &#xA;&lt;p&gt;Note, for MacOS 10.15.4 and newer, 22.3.1 is the earliest version that can be installed through &lt;code&gt;kerl&lt;/code&gt; (and, therefore, &lt;code&gt;asdf&lt;/code&gt;). Earlier versions will fail to compile. See &lt;a href=&#34;https://github.com/kerl/kerl/issues/335#issuecomment-605487028&#34;&gt;this issue&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;Install the build tools &lt;code&gt;brew install autoconf&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Install OpenSSL &lt;code&gt;brew install openssl@1.1&lt;/code&gt;. &lt;em&gt;Erlang doesn&#39;t support openssl 3 yet, &lt;a href=&#34;https://github.com/erlang/otp/issues/4577#issuecomment-925962048&#34;&gt;read more here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;For building with wxWidgets (start observer or debugger!). Note that you may need to select the right &lt;code&gt;wx-config&lt;/code&gt; before installing Erlang. &lt;code&gt;brew install wxwidgets&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For building documentation and elixir reference builds: &lt;code&gt;brew install libxslt fop&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Dealing with OpenSSL issues on macOS&lt;/h4&gt; &#xA;&lt;p&gt;You may encounter an SSL error with an output along these lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;crypto : No usable OpenSSL found&#xA;ssh : No usable OpenSSL found&#xA;ssl : No usable OpenSSL found&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This issue has been documented &lt;a href=&#34;https://github.com/kerl/kerl#compiling-crypto-on-macs&#34;&gt;on &lt;code&gt;kerl&lt;/code&gt;&lt;/a&gt;. If you see this error, you can use the &lt;code&gt;--with-ssl&lt;/code&gt; flag with a path before installing Erlang. Here is an example that skips the java dependency and also sets a specific (and existing) path for OpenSSL installed via brew on macOS.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export KERL_CONFIGURE_OPTIONS=&#34;--without-javac --with-ssl=$(brew --prefix openssl@1.1)&#34;&#xA;asdf install erlang &amp;lt;version&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CentOS &amp;amp; Fedora&lt;/h3&gt; &#xA;&lt;p&gt;These steps assume a most recent build of CentOS (currently tested on CentOS 7.5 x64 &amp;amp; Fedora 28 x64)&lt;/p&gt; &#xA;&lt;p&gt;Install the build tools &lt;code&gt;sudo yum groupinstall -y &#39;Development Tools&#39; &#39;C Development Tools and Libraries&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Automatic configure script builder &lt;code&gt;sudo yum install -y autoconf&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Needed for terminal handling &lt;code&gt;sudo yum install -y ncurses-devel&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For building with wxWidgets (start observer or debugger!). Note that you may need to select the right &lt;code&gt;wx-config&lt;/code&gt; before installing Erlang. &lt;code&gt;sudo yum install -y wxGTK3-devel wxBase3&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For building ssl &lt;code&gt;sudo yum install -y openssl-devel&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;for jinterface &lt;code&gt;sudo yum install -y java-1.8.0-openjdk-devel&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;ODBC support &lt;code&gt;sudo yum install -y libiodbc unixODBC-devel.x86_64 erlang-odbc.x86_64&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;for the documentation to be built &lt;code&gt;sudo yum install -y libxslt fop&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Solus&lt;/h3&gt; &#xA;&lt;p&gt;Install the build tools&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo eopkg it -c system.devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For building with wxWidgets (start observer or debugger!). Note that you may need to select the right &lt;code&gt;wx-config&lt;/code&gt; before installing Erlang.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo eopkg install wxwidgets-devel libx11-devel mesalib-devel libglu-devel fop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For ODBC support&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo eopkg install unixodbc-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For jinterface&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo eopkg install openjdk-8 openjdk-8-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to install all of the above&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install build tools&#xA;sudo eopkg it -c system.devel&#xA;&#xA;sudo eopkg install wxwidgets-devel libx11-devel mesalib-devel libglu-devel fop unixodbc-devel openjdk-8 openjdk-8-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;OpenJDK issues on Solus&lt;/h4&gt; &#xA;&lt;p&gt;I ran into an issue where &lt;code&gt;javac&lt;/code&gt; wasn&#39;t a recognized command in the terminal despite having installed &lt;code&gt;openjdk-8&lt;/code&gt; and &lt;code&gt;openjdk-8-devel&lt;/code&gt;. Turns out it wasn&#39;t added to &lt;code&gt;PATH&lt;/code&gt; by default. So simply add it to &lt;code&gt;PATH&lt;/code&gt; like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# In ~/.bashrc add these to add Java to PATH&#xA;JAVA_HOME=/usr/lib64/openjdk-8&#xA;PATH=$PATH:$JAVA_HOME/bin&#xA;&#xA;# In terminal&#xA;source ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Erlang documentation&lt;/h2&gt; &#xA;&lt;p&gt;Erlang may come with documentation included (as man pages, pdfs and html files, or even embedded documentation (via &lt;code&gt;c:h&lt;/code&gt; function)).&lt;/p&gt; &#xA;&lt;p&gt;For man pages this allows typing &lt;code&gt;erl -man ets&lt;/code&gt; to get info on &lt;code&gt;ets&lt;/code&gt; module.&lt;/p&gt; &#xA;&lt;p&gt;For embedded documentation (on &lt;a href=&#34;https://www.erlang.org/downloads/23.0&#34;&gt;OTP 23+&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In Erlang&#39;s &lt;code&gt;erl&lt;/code&gt;: via &lt;a href=&#34;https://erlang.org/doc/man/c.html#h-1&#34;&gt;&lt;code&gt;c:h/1,2,3&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://erlang.org/doc/man/c.html#ht-1&#34;&gt;&lt;code&gt;c:ht/1,2,3&lt;/code&gt;&lt;/a&gt; for types&lt;/li&gt; &#xA; &lt;li&gt;In Elixir&#39;s &lt;code&gt;iex&lt;/code&gt; (Elixir 1.7+): via &lt;a href=&#34;https://hexdocs.pm/iex/IEx.Helpers.html#h/1&#34;&gt;&lt;code&gt;h/1&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://hexdocs.pm/iex/IEx.Helpers.html#t/1&#34;&gt;&lt;code&gt;t/1&lt;/code&gt;&lt;/a&gt; for types&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;asdf-erlang&lt;/code&gt; uses kerl for builds, and &lt;a href=&#34;https://github.com/kerl/kerl&#34;&gt;kerl&lt;/a&gt; is capable of building the docs for specified version of Erlang in required formats.&lt;/p&gt; &#xA;&lt;p&gt;For kerl to be able to build Erlang documentation two requirements have to be met:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;KERL_BUILD_DOCS&lt;/code&gt; environment variable has to be set to value &lt;code&gt;yes&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Additional dependencies have to be installed. For detailed list of dependencies for your OS please refer to the specific section above&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Additionally, HTML and Man formats can be ignored entirely:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;KERL_INSTALL_HTMLDOCS&lt;/code&gt; set to &lt;code&gt;no&lt;/code&gt; to not install HTML docs&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;KERL_INSTALL_MANPAGES&lt;/code&gt; set to &lt;code&gt;no&lt;/code&gt; to skip Man pages.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By default, docs in both of these formats are installed if &lt;code&gt;KERL_BUILD_DOCS&lt;/code&gt; is set.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;It may be a good idea to disable those formats to &lt;strong&gt;save space&lt;/strong&gt;&lt;/em&gt;, since &lt;strong&gt;docs can easily take around 200MB&lt;/strong&gt; in addition to 100MB of base installation, yet to &lt;em&gt;still have docs inside shell&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Environment variable has to be set before &lt;code&gt;asdf install erlang &amp;lt;version&amp;gt;&lt;/code&gt; is executed, to take effect.&lt;/p&gt; &#xA;&lt;h3&gt;Setting the environment variable in bash&lt;/h3&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;export KERL_BUILD_DOCS=yes&lt;/code&gt; to create &lt;code&gt;KERL_BUILD_DOCS&lt;/code&gt; environment variable and set it to &lt;code&gt;true&lt;/code&gt;. Repeat the same for &lt;code&gt;KERL_INSTALL_HTMLDOCS&lt;/code&gt; &lt;code&gt;KERL_INSTALL_MANPAGES&lt;/code&gt; if required (see above).&lt;/p&gt; &#xA;&lt;p&gt;This line could be added to your &lt;code&gt;.bashrc&lt;/code&gt; in case you want &lt;code&gt;KERL_BUILD_DOCS&lt;/code&gt; to be set for future (future installations of Erlang).&lt;/p&gt; &#xA;&lt;p&gt;To remove environment variable: &lt;code&gt;unset KERL_BUILD_DOCS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Setting the environment variable in fish shell&lt;/h3&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;set -xg KERL_BUILD_DOCS yes&lt;/code&gt; to set environment variable. Repeat the same for &lt;code&gt;KERL_INSTALL_HTMLDOCS&lt;/code&gt; &lt;code&gt;KERL_INSTALL_MANPAGES&lt;/code&gt; if required (see above).&lt;/p&gt; &#xA;&lt;p&gt;In case you want it to be persisted between sessions (machine reboots - for example for future installations) type &lt;code&gt;set -xU KERL_BUILD_DOCS yes&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To remove environment variable type: &lt;code&gt;set -e KERL_BUILD_DOCS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Use a specific version of kerl&lt;/h3&gt; &#xA;&lt;p&gt;Overriding the default kerl version shouldn&#39;t ever be necessary, but if you want to you a specific version of kerl you can set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export ASDF_KERL_VERSION=&#34;2.1.1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>MIUI-Monet-Project/Module</title>
    <updated>2022-08-18T01:52:39Z</updated>
    <id>tag:github.com,2022-08-18:/MIUI-Monet-Project/Module</id>
    <link href="https://github.com/MIUI-Monet-Project/Module" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Material You wallpaper-based dynamic theme for MIUI 13 system apps on Android 12+&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MIUI-Monet-Project/.github/main/profile/Monet%20Updates.png&#34; alt=&#34;MIUI Monet Project&#34;&gt;&lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;MIUI Monet Project&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;!-- Version --&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/Version-v3.0.0-blue.svg?longCache=true&amp;amp;style=popout-square&#34; alt=&#34;Version&#34;&gt; &#xA; &lt;!-- Last Updated --&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/Updated-August 1, 2022-green.svg?longCache=true&amp;amp;style=flat-square&#34; alt=&#34;_time_stamp_&#34;&gt; &#xA; &lt;!-- Min Magisk --&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/MinMagisk-20.4-red.svg?longCache=true&amp;amp;style=flat-square&#34; alt=&#34;_time_stamp_&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;strong&gt;MIUI Monet Project brings wallpaper-based dynamic theme to MIUI 13 system apps on Android 12+&lt;/strong&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Tested on&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MIUI 13 CN ROM&lt;/li&gt; &#xA; &lt;li&gt;MIUI 13 Global ROM&lt;/li&gt; &#xA; &lt;li&gt;MIUI 13 xiaomi.eu ROM&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;What&#39;s currently themed&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Control Center&lt;/li&gt; &#xA; &lt;li&gt;MIUI Dialer and Contacts&lt;/li&gt; &#xA; &lt;li&gt;MIUI System Launcher&lt;/li&gt; &#xA; &lt;li&gt;MIUI Messaging&lt;/li&gt; &#xA; &lt;li&gt;Quick Settings Panel&lt;/li&gt; &#xA; &lt;li&gt;Settings&lt;/li&gt; &#xA; &lt;li&gt;Xiaomi Find Device&lt;/li&gt; &#xA; &lt;li&gt;MIUI Security Center&lt;/li&gt; &#xA; &lt;li&gt;MISound&lt;/li&gt; &#xA; &lt;li&gt;MIUI Notification Center&lt;/li&gt; &#xA; &lt;li&gt;MIUI Cloud Backup&lt;/li&gt; &#xA; &lt;li&gt;Xiaomi Cloud&lt;/li&gt; &#xA; &lt;li&gt;Dual Apps&lt;/li&gt; &#xA; &lt;li&gt;Second Space&lt;/li&gt; &#xA; &lt;li&gt;Phone Services&lt;/li&gt; &#xA; &lt;li&gt;CN Cleaner&lt;/li&gt; &#xA; &lt;li&gt;Global Cleaner&lt;/li&gt; &#xA; &lt;li&gt;CN File Manager&lt;/li&gt; &#xA; &lt;li&gt;Global File Manager&lt;/li&gt; &#xA; &lt;li&gt;App Battery Saver&lt;/li&gt; &#xA; &lt;li&gt;Screen Time&lt;/li&gt; &#xA; &lt;li&gt;Refresh Rate Settings&lt;/li&gt; &#xA; &lt;li&gt;Nature Notification Sounds&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>rbenv/ruby-build</title>
    <updated>2022-08-18T01:52:39Z</updated>
    <id>tag:github.com,2022-08-18:/rbenv/ruby-build</id>
    <link href="https://github.com/rbenv/ruby-build" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Compile and install Ruby&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ruby-build&lt;/h1&gt; &#xA;&lt;p&gt;ruby-build is a command-line utility that makes it easy to install virtually any version of Ruby, from source.&lt;/p&gt; &#xA;&lt;p&gt;It is available as a plugin for &lt;a href=&#34;https://github.com/rbenv/rbenv&#34;&gt;rbenv&lt;/a&gt; that provides the &lt;code&gt;rbenv install&lt;/code&gt; command, or as a standalone program.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Using Homebrew on macOS&#xA;$ brew install ruby-build&#xA;&#xA;# As an rbenv plugin&#xA;$ mkdir -p &#34;$(rbenv root)&#34;/plugins&#xA;$ git clone https://github.com/rbenv/ruby-build.git &#34;$(rbenv root)&#34;/plugins/ruby-build&#xA;&#xA;# As a standalone program&#xA;$ git clone https://github.com/rbenv/ruby-build.git&#xA;$ PREFIX=/usr/local ./ruby-build/install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Upgrading&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Via Homebrew&#xA;$ brew update &amp;amp;&amp;amp; brew upgrade ruby-build&#xA;&#xA;# As an rbenv plugin&#xA;$ git -C &#34;$(rbenv root)&#34;/plugins/ruby-build pull&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Basic Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# As an rbenv plugin&#xA;$ rbenv install --list                 # lists all available versions of Ruby&#xA;$ rbenv install 2.2.0                  # installs Ruby 2.2.0 to ~/.rbenv/versions&#xA;&#xA;# As a standalone program&#xA;$ ruby-build --definitions             # lists all available versions of Ruby&#xA;$ ruby-build 2.2.0 ~/local/ruby-2.2.0  # installs Ruby 2.2.0 to ~/local/ruby-2.2.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ruby-build does not check for system dependencies before downloading and attempting to compile the Ruby source. Please ensure that &lt;a href=&#34;https://github.com/rbenv/ruby-build/wiki#suggested-build-environment&#34;&gt;all requisite libraries&lt;/a&gt; are available on your system.&lt;/p&gt; &#xA;&lt;h3&gt;Advanced Usage&lt;/h3&gt; &#xA;&lt;h4&gt;Custom Build Definitions&lt;/h4&gt; &#xA;&lt;p&gt;If you wish to develop and install a version of Ruby that is not yet supported by ruby-build, you may specify the path to a custom “build definition file” in place of a Ruby version number.&lt;/p&gt; &#xA;&lt;p&gt;Use the &lt;a href=&#34;https://github.com/rbenv/ruby-build/tree/master/share/ruby-build&#34;&gt;default build definitions&lt;/a&gt; as a template for your custom definitions.&lt;/p&gt; &#xA;&lt;h4&gt;Custom Build Configuration&lt;/h4&gt; &#xA;&lt;p&gt;The build process may be configured through the following environment variables:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;TMPDIR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Where temporary files are stored.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RUBY_BUILD_BUILD_PATH&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Where sources are downloaded and built. (Default: a timestamped subdirectory of &lt;code&gt;TMPDIR&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RUBY_BUILD_CACHE_PATH&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Where to cache downloaded package files. (Default: &lt;code&gt;~/.rbenv/cache&lt;/code&gt; if invoked as rbenv plugin)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RUBY_BUILD_HTTP_CLIENT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;One of &lt;code&gt;aria2c&lt;/code&gt;, &lt;code&gt;curl&lt;/code&gt;, or &lt;code&gt;wget&lt;/code&gt; to use for downloading. (Default: first one found in PATH)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RUBY_BUILD_ARIA2_OPTS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Additional options to pass to &lt;code&gt;aria2c&lt;/code&gt; for downloading.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RUBY_BUILD_CURL_OPTS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Additional options to pass to &lt;code&gt;curl&lt;/code&gt; for downloading.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RUBY_BUILD_WGET_OPTS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Additional options to pass to &lt;code&gt;wget&lt;/code&gt; for downloading.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RUBY_BUILD_MIRROR_URL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Custom mirror URL root.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RUBY_BUILD_MIRROR_PACKAGE_URL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Custom complete mirror URL (e.g. &lt;a href=&#34;http://mirror.example.com/package-1.0.0.tar.gz&#34;&gt;http://mirror.example.com/package-1.0.0.tar.gz&lt;/a&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RUBY_BUILD_SKIP_MIRROR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bypass the download mirror and fetch all package files from their original URLs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RUBY_BUILD_ROOT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Custom build definition directory. (Default: &lt;code&gt;share/ruby-build&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RUBY_BUILD_DEFINITIONS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Additional paths to search for build definitions. (Colon-separated list)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CC&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Path to the C compiler.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RUBY_CFLAGS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Additional &lt;code&gt;CFLAGS&lt;/code&gt; options (&lt;em&gt;e.g.,&lt;/em&gt; to override &lt;code&gt;-O3&lt;/code&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CONFIGURE_OPTS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Additional &lt;code&gt;./configure&lt;/code&gt; options.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;MAKE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Custom &lt;code&gt;make&lt;/code&gt; command (&lt;em&gt;e.g.,&lt;/em&gt; &lt;code&gt;gmake&lt;/code&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;MAKE_OPTS&lt;/code&gt; / &lt;code&gt;MAKEOPTS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Additional &lt;code&gt;make&lt;/code&gt; options.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;MAKE_INSTALL_OPTS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Additional &lt;code&gt;make install&lt;/code&gt; options.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RUBY_CONFIGURE_OPTS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Additional &lt;code&gt;./configure&lt;/code&gt; options (applies only to Ruby source).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RUBY_MAKE_OPTS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Additional &lt;code&gt;make&lt;/code&gt; options (applies only to Ruby source).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RUBY_MAKE_INSTALL_OPTS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Additional &lt;code&gt;make install&lt;/code&gt; options (applies only to Ruby source).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Applying Patches&lt;/h4&gt; &#xA;&lt;p&gt;Both &lt;code&gt;rbenv install&lt;/code&gt; and &lt;code&gt;ruby-build&lt;/code&gt; support the &lt;code&gt;--patch&lt;/code&gt; (&lt;code&gt;-p&lt;/code&gt;) flag to apply a patch to the Ruby (/JRuby/Rubinius/TruffleRuby) source code before building. Patches are read from &lt;code&gt;STDIN&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# applying a single patch&#xA;$ rbenv install --patch 1.9.3-p429 &amp;lt; /path/to/ruby.patch&#xA;&#xA;# applying a patch from HTTP&#xA;$ rbenv install --patch 1.9.3-p429 &amp;lt; &amp;lt;(curl -sSL http://git.io/ruby.patch)&#xA;&#xA;# applying multiple patches&#xA;$ cat fix1.patch fix2.patch | rbenv install --patch 1.9.3-p429&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Checksum Verification&lt;/h4&gt; &#xA;&lt;p&gt;If you have the &lt;code&gt;shasum&lt;/code&gt;, &lt;code&gt;openssl&lt;/code&gt;, or &lt;code&gt;sha256sum&lt;/code&gt; tool installed, ruby-build will automatically verify the SHA2 checksum of each downloaded package before installing it.&lt;/p&gt; &#xA;&lt;p&gt;Checksums are optional and specified as anchors on the package URL in each definition. All definitions bundled with ruby-build include checksums.&lt;/p&gt; &#xA;&lt;h4&gt;Package Mirrors&lt;/h4&gt; &#xA;&lt;p&gt;To speed up downloads, ruby-build fetches package files from a mirror hosted on Amazon CloudFront. To benefit from this, the packages must specify their checksum:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# example:&#xA;install_package &#34;ruby-2.6.5&#34; &#34;https://ruby-lang.org/ruby-2.6.5.tgz#&amp;lt;SHA2&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ruby-build will first try to fetch this package from &lt;code&gt;$RUBY_BUILD_MIRROR_URL/&amp;lt;SHA2&amp;gt;&lt;/code&gt; (note: this is the complete URL), where &lt;code&gt;&amp;lt;SHA2&amp;gt;&lt;/code&gt; is the checksum for the file. It will fall back to downloading the package from the original location if:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the package was not found on the mirror;&lt;/li&gt; &#xA; &lt;li&gt;the mirror is down;&lt;/li&gt; &#xA; &lt;li&gt;the download is corrupt, i.e. the file&#39;s checksum doesn&#39;t match;&lt;/li&gt; &#xA; &lt;li&gt;no tool is available to calculate the checksum; or&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RUBY_BUILD_SKIP_MIRROR&lt;/code&gt; is enabled.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You may specify a custom mirror by setting &lt;code&gt;RUBY_BUILD_MIRROR_URL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If a mirror site doesn&#39;t conform to the above URL format, you can specify the complete URL by setting &lt;code&gt;RUBY_BUILD_MIRROR_PACKAGE_URL&lt;/code&gt;. It behaves the same as &lt;code&gt;RUBY_BUILD_MIRROR_URL&lt;/code&gt; except being a complete URL.&lt;/p&gt; &#xA;&lt;p&gt;The default ruby-build download mirror is sponsored by &lt;a href=&#34;https://basecamp.com/&#34;&gt;Basecamp&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Keeping the build directory after installation&lt;/h4&gt; &#xA;&lt;p&gt;Both &lt;code&gt;ruby-build&lt;/code&gt; and &lt;code&gt;rbenv install&lt;/code&gt; accept the &lt;code&gt;-k&lt;/code&gt; or &lt;code&gt;--keep&lt;/code&gt; flag, which tells ruby-build to keep the downloaded source after installation. This can be useful if you need to use &lt;code&gt;gdb&lt;/code&gt; and &lt;code&gt;memprof&lt;/code&gt; with Ruby.&lt;/p&gt; &#xA;&lt;p&gt;Source code will be kept in a parallel directory tree &lt;code&gt;~/.rbenv/sources&lt;/code&gt; when using &lt;code&gt;--keep&lt;/code&gt; with the &lt;code&gt;rbenv install&lt;/code&gt; command. You should specify the location of the source code with the &lt;code&gt;RUBY_BUILD_BUILD_PATH&lt;/code&gt; environment variable when using &lt;code&gt;--keep&lt;/code&gt; with &lt;code&gt;ruby-build&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://github.com/rbenv/ruby-build/wiki&#34;&gt;ruby-build wiki&lt;/a&gt; for solutions to common problems.&lt;/p&gt; &#xA;&lt;p&gt;If you can&#39;t find an answer on the wiki, open an issue on the &lt;a href=&#34;https://github.com/rbenv/ruby-build/issues&#34;&gt;issue tracker&lt;/a&gt;. Be sure to include the full build log for build failures.&lt;/p&gt;</summary>
  </entry>
</feed>