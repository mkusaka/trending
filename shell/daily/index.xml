<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-09T01:47:16Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>go-nv/goenv</title>
    <updated>2023-11-09T01:47:16Z</updated>
    <id>tag:github.com,2023-11-09:/go-nv/goenv</id>
    <link href="https://github.com/go-nv/goenv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üöô Like pyenv and rbenv, but for Go.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Go Version Management: goenv&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/go-nv/goenv/actions/workflows/pr_checks.yml&#34;&gt;&lt;img src=&#34;https://github.com/go-nv/goenv/actions/workflows/pr_checks.yml/badge.svg?sanitize=true&#34; alt=&#34;PR Checks Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;goenv aims to be as simple as possible and follow the already established successful version management model of &lt;a href=&#34;https://github.com/yyuu/pyenv&#34;&gt;pyenv&lt;/a&gt; and &lt;a href=&#34;https://github.com/rbenv/rbenv&#34;&gt;rbenv&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;New go versions are added automatically on a daily CRON schedule.&lt;/p&gt; &#xA;&lt;p&gt;This project was cloned from &lt;a href=&#34;https://github.com/yyuu/pyenv&#34;&gt;pyenv&lt;/a&gt; and modified for Go.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/17IT3YiQ56hiJsb2iHpGHlJqj&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/17IT3YiQ56hiJsb2iHpGHlJqj.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;goenv &lt;em&gt;does...&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Let you &lt;strong&gt;change the global Go version&lt;/strong&gt; on a per-user basis.&lt;/li&gt; &#xA; &lt;li&gt;Provide support for &lt;strong&gt;per-project Go versions&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Allow you to &lt;strong&gt;override the Go version&lt;/strong&gt; with an environment variable.&lt;/li&gt; &#xA; &lt;li&gt;Search commands from &lt;strong&gt;multiple versions of Go at a time&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;goenv compared to others:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/crsmithdev/goenv&#34;&gt;https://github.com/crsmithdev/goenv&lt;/a&gt; depends on Go,&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/moovweb/gvm&#34;&gt;https://github.com/moovweb/gvm&lt;/a&gt; is a different approach to the problem that&#39;s modeled after &lt;code&gt;nvm&lt;/code&gt;. &lt;code&gt;goenv&lt;/code&gt; is more simplified.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Hints&lt;/h3&gt; &#xA;&lt;h4&gt;AWS CodeBuild&lt;/h4&gt; &#xA;&lt;p&gt;The following snippet can be inserted in your buildspec.yml (or buildspec definition) for AWS CodeBuild. It&#39;s recommended to do this during the &lt;code&gt;pre_build&lt;/code&gt; phase.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Side Note:&lt;/strong&gt; if you use the below steps, please unset your golang version in the buildspec and run the installer manually.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- BUILD_DIR=$PWD&#xA;- cd /root/.goenv/plugins/go-build/../.. &amp;amp;&amp;amp; git pull &amp;amp;&amp;amp; cd -&#xA;- cd $BUILD_DIR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-nv/goenv/master/HOW_IT_WORKS.md&#34;&gt;How It Works&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-nv/goenv/master/INSTALL.md&#34;&gt;Installation&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-nv/goenv/master/COMMANDS.md&#34;&gt;Command Reference&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-nv/goenv/master/ENVIRONMENT_VARIABLES.md&#34;&gt;Environment variables&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-nv/goenv/master/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-nv/goenv/master/CODE_OF_CONDUCT.md&#34;&gt;Code-of-Conduct&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ahmadina/tictactoe</title>
    <updated>2023-11-09T01:47:16Z</updated>
    <id>tag:github.com,2023-11-09:/ahmadina/tictactoe</id>
    <link href="https://github.com/ahmadina/tictactoe" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Aleo Tictactoe&lt;/p&gt;&lt;hr&gt;&lt;p&gt;A standard game of Tic-Tac-Toe in Leo.&lt;/p&gt; &#xA;&lt;p&gt;‚≠ï ‚ùï ‚≠ï ‚ùï ‚ùå&lt;/p&gt; &#xA;&lt;p&gt;‚ûñ ‚ûï ‚ûñ ‚ûï ‚ûñ&lt;/p&gt; &#xA;&lt;p&gt;‚≠ï ‚ùï ‚Å£‚ùå ‚ùï ‚≠ï&lt;/p&gt; &#xA;&lt;p&gt;‚ûñ ‚ûï ‚ûñ ‚ûï ‚ûñ&lt;/p&gt; &#xA;&lt;p&gt;‚ùå ‚ùï ‚ùå ‚ùï ‚≠ï&lt;/p&gt; &#xA;&lt;h2&gt;Representing State&lt;/h2&gt; &#xA;&lt;p&gt;Leo allows users to define composite data types with the &lt;code&gt;struct&lt;/code&gt; keyword. The game board is represented by a struct called &lt;code&gt;Board&lt;/code&gt;, which contains three &lt;code&gt;Row&lt;/code&gt;s. An alternative representation would be to use an array, however, these are not yet supported in Leo.&lt;/p&gt; &#xA;&lt;h2&gt;Language Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;struct&lt;/code&gt; declarations&lt;/li&gt; &#xA; &lt;li&gt;conditional statements&lt;/li&gt; &#xA; &lt;li&gt;early termination. Leo allows users to return from a function early using the &lt;code&gt;return&lt;/code&gt; keyword.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running the Program&lt;/h2&gt; &#xA;&lt;p&gt;Leo provides users with a command line interface for compiling and running Leo programs. Users may either specify input values via the command line or provide an input file in &lt;code&gt;inputs/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Providing inputs via the command line.&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leo run &amp;lt;function_name&amp;gt; &amp;lt;input_1&amp;gt; &amp;lt;input_2&amp;gt; ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;code&gt;./run.sh&lt;/code&gt; for an example.&lt;/p&gt; &#xA;&lt;h3&gt;Using an input file.&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Modify &lt;code&gt;inputs/tictactoe.in&lt;/code&gt; with the desired inputs.&lt;/li&gt; &#xA; &lt;li&gt;Run&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leo run &amp;lt;function_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Executing the Program&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leo execute &amp;lt;function_name&amp;gt; &amp;lt;input_1&amp;gt; &amp;lt;input_2&amp;gt; ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Playing the Game&lt;/h2&gt; &#xA;&lt;h3&gt;1. Create a new game board&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leo run new&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;2. Player 1 makes a move&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leo run make_move 1u8 1u8 1u8 &#34;{ r1: { c1: 0u8, c2: 0u8, c3: 0u8 }, r2: { c1: 0u8, c2: 0u8, c3: 0u8 }, r3: { c1: 0u8, c2: 0u8, c3: 0u8 } }&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;3. Player 2 makes a move&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leo run make_move 2u8 2u8 2u8 &#34;{ r1: { c1: 1u8, c2: 0u8, c3: 0u8 }, r2: { c1: 0u8, c2: 0u8, c3: 0u8 }, r3: { c1: 0u8, c2: 0u8, c3: 0u8 } }&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>