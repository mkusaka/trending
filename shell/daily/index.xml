<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-01T01:35:16Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ztombol/bats-assert</title>
    <updated>2024-07-01T01:35:16Z</updated>
    <id>tag:github.com,2024-07-01:/ztombol/bats-assert</id>
    <link href="https://github.com/ztombol/bats-assert" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Common assertions for Bats&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;bats-assert&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ztombol/bats-assert/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-CC0-blue.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ztombol/bats-assert/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/ztombol/bats-assert.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/ztombol/bats-assert&#34;&gt;&lt;img src=&#34;https://travis-ci.org/ztombol/bats-assert.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;bats-assert&lt;/code&gt; is a helper library providing common assertions for &lt;a href=&#34;https://github.com/sstephenson/bats&#34;&gt;Bats&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Assertions are functions that perform a test and output relevant information on failure to help debugging. They return 1 on failure and 0 otherwise. Output, &lt;a href=&#34;https://github.com/ztombol/bats-support#output-formatting&#34;&gt;formatted&lt;/a&gt; for readability, is sent to the standard error to make assertions usable outside of &lt;code&gt;@test&lt;/code&gt; blocks too.&lt;/p&gt; &#xA;&lt;p&gt;Assertions testing exit code and output operate on the results of the most recent invocation of &lt;code&gt;run&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Dependencies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ztombol/bats-support&#34;&gt;&lt;code&gt;bats-support&lt;/code&gt;&lt;/a&gt; (formerly &lt;code&gt;bats-core&lt;/code&gt;) - output formatting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/ztombol/bats-docs&#34;&gt;shared documentation&lt;/a&gt; to learn how to install and load this library.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Fail if the given expression evaluates to false.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;The expression must be a simple command. &lt;a href=&#34;https://www.gnu.org/software/bash/manual/bash.html#Compound-Commands&#34;&gt;Compound commands&lt;/a&gt;, such as &lt;code&gt;[[&lt;/code&gt;, can be used only when executed with &lt;code&gt;bash -c&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;@test &#39;assert()&#39; {&#xA;  touch &#39;/var/log/test.log&#39;&#xA;  assert [ -e &#39;/var/log/test.log&#39; ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On failure, the failed expression is displayed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- assertion failed --&#xA;expression : [ -e /var/log/test.log ]&#xA;--&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;refute&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Fail if the given expression evaluates to true.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;The expression must be a simple command. &lt;a href=&#34;https://www.gnu.org/software/bash/manual/bash.html#Compound-Commands&#34;&gt;Compound commands&lt;/a&gt;, such as &lt;code&gt;[[&lt;/code&gt;, can be used only when executed with &lt;code&gt;bash -c&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;@test &#39;refute()&#39; {&#xA;  rm -f &#39;/var/log/test.log&#39;&#xA;  refute [ -e &#39;/var/log/test.log&#39; ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On failure, the successful expression is displayed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- assertion succeeded, but it was expected to fail --&#xA;expression : [ -e /var/log/test.log ]&#xA;--&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;assert_equal&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Fail if the two parameters, actual and expected value respectively, do not equal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;@test &#39;assert_equal()&#39; {&#xA;  assert_equal &#39;have&#39; &#39;want&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On failure, the expected and actual values are displayed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- values do not equal --&#xA;expected : want&#xA;actual   : have&#xA;--&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If either value is longer than one line both are displayed in &lt;em&gt;multi-line&lt;/em&gt; format.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;assert_success&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Fail if &lt;code&gt;$status&lt;/code&gt; is not 0.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;@test &#39;assert_success() status only&#39; {&#xA;  run bash -c &#34;echo &#39;Error!&#39;; exit 1&#34;&#xA;  assert_success&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On failure, &lt;code&gt;$status&lt;/code&gt; and &lt;code&gt;$output&lt;/code&gt; are displayed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- command failed --&#xA;status : 1&#xA;output : Error!&#xA;--&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;$output&lt;/code&gt; is longer than one line, it is displayed in &lt;em&gt;multi-line&lt;/em&gt; format.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;assert_failure&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Fail if &lt;code&gt;$status&lt;/code&gt; is 0.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;@test &#39;assert_failure() status only&#39; {&#xA;  run echo &#39;Success!&#39;&#xA;  assert_failure&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On failure, &lt;code&gt;$output&lt;/code&gt; is displayed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- command succeeded, but it was expected to fail --&#xA;output : Success!&#xA;--&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;$output&lt;/code&gt; is longer than one line, it is displayed in &lt;em&gt;multi-line&lt;/em&gt; format.&lt;/p&gt; &#xA;&lt;h4&gt;Expected status&lt;/h4&gt; &#xA;&lt;p&gt;When one parameter is specified, fail if &lt;code&gt;$status&lt;/code&gt; does not equal the expected status specified by the parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;@test &#39;assert_failure() with expected status&#39; {&#xA;  run bash -c &#34;echo &#39;Error!&#39;; exit 1&#34;&#xA;  assert_failure 2&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On failure, the expected and actual status, and &lt;code&gt;$output&lt;/code&gt; are displayed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- command failed as expected, but status differs --&#xA;expected : 2&#xA;actual   : 1&#xA;output   : Error!&#xA;--&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;$output&lt;/code&gt; is longer than one line, it is displayed in &lt;em&gt;multi-line&lt;/em&gt; format.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;assert_output&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This function helps to verify that a command or function produces the correct output by checking that the specified expected output matches the actual output. Matching can be literal (default), partial or regular expression. This function is the logical complement of &lt;code&gt;refute_output&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Literal matching&lt;/h4&gt; &#xA;&lt;p&gt;By default, literal matching is performed. The assertion fails if &lt;code&gt;$output&lt;/code&gt; does not equal the expected output.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;@test &#39;assert_output()&#39; {&#xA;  run echo &#39;have&#39;&#xA;  assert_output &#39;want&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The expected output can be specified with a heredoc or standard input as well.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;@test &#39;assert_output() with pipe&#39; {&#xA;  run echo &#39;have&#39;&#xA;  echo &#39;want&#39; | assert_output&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On failure, the expected and actual output are displayed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- output differs --&#xA;expected : want&#xA;actual   : have&#xA;--&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If either value is longer than one line both are displayed in &lt;em&gt;multi-line&lt;/em&gt; format.&lt;/p&gt; &#xA;&lt;h4&gt;Partial matching&lt;/h4&gt; &#xA;&lt;p&gt;Partial matching can be enabled with the &lt;code&gt;--partial&lt;/code&gt; option (&lt;code&gt;-p&lt;/code&gt; for short). When used, the assertion fails if the expected &lt;em&gt;substring&lt;/em&gt; is not found in &lt;code&gt;$output&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;@test &#39;assert_output() partial matching&#39; {&#xA;  run echo &#39;ERROR: no such file or directory&#39;&#xA;  assert_output --partial &#39;SUCCESS&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On failure, the substring and the output are displayed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- output does not contain substring --&#xA;substring : SUCCESS&#xA;output    : ERROR: no such file or directory&#xA;--&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This option and regular expression matching (&lt;code&gt;--regexp&lt;/code&gt; or &lt;code&gt;-e&lt;/code&gt;) are mutually exclusive. An error is displayed when used simultaneously.&lt;/p&gt; &#xA;&lt;h4&gt;Regular expression matching&lt;/h4&gt; &#xA;&lt;p&gt;Regular expression matching can be enabled with the &lt;code&gt;--regexp&lt;/code&gt; option (&lt;code&gt;-e&lt;/code&gt; for short). When used, the assertion fails if the &lt;em&gt;extended regular expression&lt;/em&gt; does not match &lt;code&gt;$output&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: The anchors &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; bind to the beginning and the end of the entire output (not individual lines), respectively.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;@test &#39;assert_output() regular expression matching&#39; {&#xA;  run echo &#39;Foobar 0.1.0&#39;&#xA;  assert_output --regexp &#39;^Foobar v[0-9]+\.[0-9]+\.[0-9]$&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On failure, the regular expression and the output are displayed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- regular expression does not match output --&#xA;regexp : ^Foobar v[0-9]+\.[0-9]+\.[0-9]$&#xA;output : Foobar 0.1.0&#xA;--&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An error is displayed if the specified extended regular expression is invalid.&lt;/p&gt; &#xA;&lt;p&gt;This option and partial matching (&lt;code&gt;--partial&lt;/code&gt; or &lt;code&gt;-p&lt;/code&gt;) are mutually exclusive. An error is displayed when used simultaneously.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;refute_output&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This function helps to verify that a command or function produces the correct output by checking that the specified unexpected output does not match the actual output. Matching can be literal (default), partial or regular expression. This function is the logical complement of &lt;code&gt;assert_output&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Literal matching&lt;/h4&gt; &#xA;&lt;p&gt;By default, literal matching is performed. The assertion fails if &lt;code&gt;$output&lt;/code&gt; equals the unexpected output.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;@test &#39;refute_output()&#39; {&#xA;  run echo &#39;want&#39;&#xA;  refute_output &#39;want&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;-The unexpected output can be specified with a heredoc or standard input as well.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;@test &#39;refute_output() with pipe&#39; {&#xA;  run echo &#39;want&#39;&#xA;  echo &#39;want&#39; | refute_output&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On failure, the output is displayed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- output equals, but it was expected to differ --&#xA;output : want&#xA;--&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If output is longer than one line it is displayed in &lt;em&gt;multi-line&lt;/em&gt; format.&lt;/p&gt; &#xA;&lt;h4&gt;Partial matching&lt;/h4&gt; &#xA;&lt;p&gt;Partial matching can be enabled with the &lt;code&gt;--partial&lt;/code&gt; option (&lt;code&gt;-p&lt;/code&gt; for short). When used, the assertion fails if the unexpected &lt;em&gt;substring&lt;/em&gt; is found in &lt;code&gt;$output&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;@test &#39;refute_output() partial matching&#39; {&#xA;  run echo &#39;ERROR: no such file or directory&#39;&#xA;  refute_output --partial &#39;ERROR&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On failure, the substring and the output are displayed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- output should not contain substring --&#xA;substring : ERROR&#xA;output    : ERROR: no such file or directory&#xA;--&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This option and regular expression matching (&lt;code&gt;--regexp&lt;/code&gt; or &lt;code&gt;-e&lt;/code&gt;) are mutually exclusive. An error is displayed when used simultaneously.&lt;/p&gt; &#xA;&lt;h4&gt;Regular expression matching&lt;/h4&gt; &#xA;&lt;p&gt;Regular expression matching can be enabled with the &lt;code&gt;--regexp&lt;/code&gt; option (&lt;code&gt;-e&lt;/code&gt; for short). When used, the assertion fails if the &lt;em&gt;extended regular expression&lt;/em&gt; matches &lt;code&gt;$output&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: The anchors &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; bind to the beginning and the end of the entire output (not individual lines), respectively.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;@test &#39;refute_output() regular expression matching&#39; {&#xA;  run echo &#39;Foobar v0.1.0&#39;&#xA;  refute_output --regexp &#39;^Foobar v[0-9]+\.[0-9]+\.[0-9]$&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On failure, the regular expression and the output are displayed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- regular expression should not match output --&#xA;regexp : ^Foobar v[0-9]+\.[0-9]+\.[0-9]$&#xA;output : Foobar v0.1.0&#xA;--&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An error is displayed if the specified extended regular expression is invalid.&lt;/p&gt; &#xA;&lt;p&gt;This option and partial matching (&lt;code&gt;--partial&lt;/code&gt; or &lt;code&gt;-p&lt;/code&gt;) are mutually exclusive. An error is displayed when used simultaneously.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;assert_line&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Similarly to &lt;code&gt;assert_output&lt;/code&gt;, this function helps to verify that a command or function produces the correct output. It checks that the expected line appears in the output (default) or in a specific line of it. Matching can be literal (default), partial or regular expression. This function is the logical complement of &lt;code&gt;refute_line&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Warning:&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;Due to a &lt;a href=&#34;https://github.com/sstephenson/bats/pull/93&#34;&gt;bug in Bats&lt;/a&gt;, empty lines are discarded from &lt;code&gt;${lines[@]}&lt;/code&gt;, causing line indices to change and preventing testing for empty lines.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Looking for a line in the output&lt;/h4&gt; &#xA;&lt;p&gt;By default, the entire output is searched for the expected line. The assertion fails if the expected line is not found in &lt;code&gt;${lines[@]}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;@test &#39;assert_line() looking for line&#39; {&#xA;  run echo $&#39;have-0\nhave-1\nhave-2&#39;&#xA;  assert_line &#39;want&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On failure, the expected line and the output are displayed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Warning:&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;The output displayed does not contain empty lines. See the Warning above for more.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- output does not contain line --&#xA;line : want&#xA;output (3 lines):&#xA;  have-0&#xA;  have-1&#xA;  have-2&#xA;--&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If output is not longer than one line, it is displayed in &lt;em&gt;two-column&lt;/em&gt; format.&lt;/p&gt; &#xA;&lt;h4&gt;Matching a specific line&lt;/h4&gt; &#xA;&lt;p&gt;When the &lt;code&gt;--index &amp;lt;idx&amp;gt;&lt;/code&gt; option is used (&lt;code&gt;-n &amp;lt;idx&amp;gt;&lt;/code&gt; for short) , the expected line is matched only against the line identified by the given index. The assertion fails if the expected line does not equal &lt;code&gt;${lines[&amp;lt;idx&amp;gt;]}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;@test &#39;assert_line() specific line&#39; {&#xA;  run echo $&#39;have-0\nhave-1\nhave-2&#39;&#xA;  assert_line --index 1 &#39;want-1&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On failure, the index and the compared lines are displayed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- line differs --&#xA;index    : 1&#xA;expected : want-1&#xA;actual   : have-1&#xA;--&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Partial matching&lt;/h4&gt; &#xA;&lt;p&gt;Partial matching can be enabled with the &lt;code&gt;--partial&lt;/code&gt; option (&lt;code&gt;-p&lt;/code&gt; for short). When used, a match fails if the expected &lt;em&gt;substring&lt;/em&gt; is not found in the matched line.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;@test &#39;assert_line() partial matching&#39; {&#xA;  run echo $&#39;have 1\nhave 2\nhave 3&#39;&#xA;  assert_line --partial &#39;want&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On failure, the same details are displayed as for literal matching, except that the substring replaces the expected line.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- no output line contains substring --&#xA;substring : want&#xA;output (3 lines):&#xA;  have 1&#xA;  have 2&#xA;  have 3&#xA;--&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This option and regular expression matching (&lt;code&gt;--regexp&lt;/code&gt; or &lt;code&gt;-e&lt;/code&gt;) are mutually exclusive. An error is displayed when used simultaneously.&lt;/p&gt; &#xA;&lt;h4&gt;Regular expression matching&lt;/h4&gt; &#xA;&lt;p&gt;Regular expression matching can be enabled with the &lt;code&gt;--regexp&lt;/code&gt; option (&lt;code&gt;-e&lt;/code&gt; for short). When used, a match fails if the &lt;em&gt;extended regular expression&lt;/em&gt; does not match the line being tested.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: As expected, the anchors &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; bind to the beginning and the end of the matched line, respectively.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;@test &#39;assert_line() regular expression matching&#39; {&#xA;  run echo $&#39;have-0\nhave-1\nhave-2&#39;&#xA;  assert_line --index 1 --regexp &#39;^want-[0-9]$&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On failure, the same details are displayed as for literal matching, except that the regular expression replaces the expected line.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- regular expression does not match line --&#xA;index  : 1&#xA;regexp : ^want-[0-9]$&#xA;line   : have-1&#xA;--&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An error is displayed if the specified extended regular expression is invalid.&lt;/p&gt; &#xA;&lt;p&gt;This option and partial matching (&lt;code&gt;--partial&lt;/code&gt; or &lt;code&gt;-p&lt;/code&gt;) are mutually exclusive. An error is displayed when used simultaneously.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;refute_line&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Similarly to &lt;code&gt;refute_output&lt;/code&gt;, this function helps to verify that a command or function produces the correct output. It checks that the unexpected line does not appear in the output (default) or in a specific line of it. Matching can be literal (default), partial or regular expression. This function is the logical complement of &lt;code&gt;assert_line&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Warning:&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;Due to a &lt;a href=&#34;https://github.com/sstephenson/bats/pull/93&#34;&gt;bug in Bats&lt;/a&gt;, empty lines are discarded from &lt;code&gt;${lines[@]}&lt;/code&gt;, causing line indices to change and preventing testing for empty lines.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Looking for a line in the output&lt;/h4&gt; &#xA;&lt;p&gt;By default, the entire output is searched for the unexpected line. The assertion fails if the unexpected line is found in &lt;code&gt;${lines[@]}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;@test &#39;refute_line() looking for line&#39; {&#xA;  run echo $&#39;have-0\nwant\nhave-2&#39;&#xA;  refute_line &#39;want&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On failure, the unexpected line, the index of its first match and the output with the matching line highlighted are displayed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Warning:&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;The output displayed does not contain empty lines. See the Warning above for more.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- line should not be in output --&#xA;line  : want&#xA;index : 1&#xA;output (3 lines):&#xA;  have-0&#xA;&amp;gt; want&#xA;  have-2&#xA;--&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If output is not longer than one line, it is displayed in &lt;em&gt;two-column&lt;/em&gt; format.&lt;/p&gt; &#xA;&lt;h4&gt;Matching a specific line&lt;/h4&gt; &#xA;&lt;p&gt;When the &lt;code&gt;--index &amp;lt;idx&amp;gt;&lt;/code&gt; option is used (&lt;code&gt;-n &amp;lt;idx&amp;gt;&lt;/code&gt; for short) , the unexpected line is matched only against the line identified by the given index. The assertion fails if the unexpected line equals &lt;code&gt;${lines[&amp;lt;idx&amp;gt;]}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;@test &#39;refute_line() specific line&#39; {&#xA;  run echo $&#39;have-0\nwant-1\nhave-2&#39;&#xA;  refute_line --index 1 &#39;want-1&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On failure, the index and the unexpected line are displayed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- line should differ --&#xA;index : 1&#xA;line  : want-1&#xA;--&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Partial matching&lt;/h4&gt; &#xA;&lt;p&gt;Partial matching can be enabled with the &lt;code&gt;--partial&lt;/code&gt; option (&lt;code&gt;-p&lt;/code&gt; for short). When used, a match fails if the unexpected &lt;em&gt;substring&lt;/em&gt; is found in the matched line.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;@test &#39;refute_line() partial matching&#39; {&#xA;  run echo $&#39;have 1\nwant 2\nhave 3&#39;&#xA;  refute_line --partial &#39;want&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On failure, in addition to the details of literal matching, the substring is also displayed. When used with &lt;code&gt;--index &amp;lt;idx&amp;gt;&lt;/code&gt; the substring replaces the unexpected line.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- no line should contain substring --&#xA;substring : want&#xA;index     : 1&#xA;output (3 lines):&#xA;  have 1&#xA;&amp;gt; want 2&#xA;  have 3&#xA;--&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This option and regular expression matching (&lt;code&gt;--regexp&lt;/code&gt; or &lt;code&gt;-e&lt;/code&gt;) are mutually exclusive. An error is displayed when used simultaneously.&lt;/p&gt; &#xA;&lt;h4&gt;Regular expression matching&lt;/h4&gt; &#xA;&lt;p&gt;Regular expression matching can be enabled with the &lt;code&gt;--regexp&lt;/code&gt; option (&lt;code&gt;-e&lt;/code&gt; for short). When used, a match fails if the &lt;em&gt;extended regular expression&lt;/em&gt; matches the line being tested.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: As expected, the anchors &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; bind to the beginning and the end of the matched line, respectively.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;@test &#39;refute_line() regular expression matching&#39; {&#xA;  run echo $&#39;Foobar v0.1.0\nRelease date: 2015-11-29&#39;&#xA;  refute_line --index 0 --regexp &#39;^Foobar v[0-9]+\.[0-9]+\.[0-9]$&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On failure, in addition to the details of literal matching, the regular expression is also displayed. When used with &lt;code&gt;--index &amp;lt;idx&amp;gt;&lt;/code&gt; the regular expression replaces the unexpected line.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- regular expression should not match line --&#xA;index  : 0&#xA;regexp : ^Foobar v[0-9]+\.[0-9]+\.[0-9]$&#xA;line   : Foobar v0.1.0&#xA;--&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An error is displayed if the specified extended regular expression is invalid.&lt;/p&gt; &#xA;&lt;p&gt;This option and partial matching (&lt;code&gt;--partial&lt;/code&gt; or &lt;code&gt;-p&lt;/code&gt;) are mutually exclusive. An error is displayed when used simultaneously.&lt;/p&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;p&gt;For functions that have options, &lt;code&gt;--&lt;/code&gt; disables option parsing for the remaining arguments to allow using arguments identical to one of the allowed options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;assert_output -- &#39;-p&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Specifying &lt;code&gt;--&lt;/code&gt; as an argument is similarly simple.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;refute_line -- &#39;--&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- REFERENCES --&gt;</summary>
  </entry>
  <entry>
    <title>concourse/concourse-bosh-deployment</title>
    <updated>2024-07-01T01:35:16Z</updated>
    <id>tag:github.com,2024-07-01:/concourse/concourse-bosh-deployment</id>
    <link href="https://github.com/concourse/concourse-bosh-deployment" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A toolchain for deploying Concourse with BOSH.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;concourse-bosh-deployment&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A toolchain for deploying Concourse with &lt;a href=&#34;https://bosh.io&#34;&gt;BOSH&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This repository is a community-maintained set of &lt;a href=&#34;http://bosh.io/docs/manifest-v2.html&#34;&gt;manifests&lt;/a&gt; and &lt;a href=&#34;http://bosh.io/docs/cli-ops-files.html&#34;&gt;ops files&lt;/a&gt; useful for deploying Concourse in various configurations to various IaaSes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE: This repository is effectively community-maintained, with only a portion of these configurations tested in CI. Use at your own risk!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bosh.io/docs/cli-v2.html#install&#34;&gt;Bosh CLI V2&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Clone this repo.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/concourse/concourse-bosh-deployment.git&#xA;cd concourse-bosh-deployment&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, choose your adventure below.&lt;/p&gt; &#xA;&lt;h2&gt;Deployment scenarios&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;lite/&lt;/code&gt;: &#34;Lite&#34; directorless deployment&lt;/h3&gt; &#xA;&lt;p&gt;These manifests deploy Concourse, &lt;em&gt;without a BOSH director&lt;/em&gt;, onto a single VM.&lt;/p&gt; &#xA;&lt;p&gt;This approach is intended as an easy way to get a development Concourse deployment up in the air and ready to &lt;code&gt;fly&lt;/code&gt;!&lt;/p&gt; &#xA;&lt;p&gt;Consult the &lt;a href=&#34;https://raw.githubusercontent.com/concourse/concourse-bosh-deployment/master/lite/README.md&#34;&gt;&lt;code&gt;lite&lt;/code&gt; README&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;cluster/&lt;/code&gt;: A full-blown BOSH deployment to a director&lt;/h3&gt; &#xA;&lt;p&gt;Consult the &lt;a href=&#34;https://raw.githubusercontent.com/concourse/concourse-bosh-deployment/master/cluster/README.md&#34;&gt;&lt;code&gt;cluster&lt;/code&gt; README&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>