<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-05T01:53:21Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>searxng/searxng-docker</title>
    <updated>2022-07-05T01:53:21Z</updated>
    <id>tag:github.com,2022-07-05:/searxng/searxng-docker</id>
    <link href="https://github.com/searxng/searxng-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The docker-compose files for setting up a SearXNG instance with docker.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;searxng-docker&lt;/h1&gt; &#xA;&lt;p&gt;Create a new SearXNG instance in five minutes using Docker&lt;/p&gt; &#xA;&lt;h2&gt;What is included ?&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Docker image&lt;/th&gt; &#xA;   &lt;th&gt;Dockerfile&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/caddyserver/caddy&#34;&gt;Caddy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Reverse proxy (create a LetsEncrypt certificate automatically)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/_/caddy&#34;&gt;caddy/caddy:2-alpine&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/caddyserver/caddy-docker&#34;&gt;Dockerfile&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/searxng/searxng&#34;&gt;SearXNG&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SearXNG by itself&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/searxng/searxng&#34;&gt;searxng/searxng:latest&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/searxng/searxng/raw/master/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/redis/redis&#34;&gt;Redis&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;In-memory database&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/_/redis&#34;&gt;redis:alpine&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/docker-library/redis/raw/master/Dockerfile-alpine.template&#34;&gt;Dockerfile-alpine.template&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;How to use it&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/install/&#34;&gt;Install docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;Install docker-compose&lt;/a&gt; (be sure that docker-compose version is at least 1.9.0)&lt;/li&gt; &#xA; &lt;li&gt;Get searxng-docker &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd /usr/local&#xA;git clone https://github.com/searxng/searxng-docker.git&#xA;cd searxng-docker&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Edit the &lt;a href=&#34;https://github.com/searxng/searxng-docker/raw/master/.env&#34;&gt;.env&lt;/a&gt; file to set the hostname and an email&lt;/li&gt; &#xA; &lt;li&gt;Generate the secret key &lt;code&gt;sed -i &#34;s|ultrasecretkey|$(openssl rand -hex 32)|g&#34; searxng/settings.yml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Edit the &lt;a href=&#34;https://github.com/searxng/searxng-docker/raw/master/searxng/settings.yml&#34;&gt;searxng/settings.yml&lt;/a&gt; file according to your need&lt;/li&gt; &#xA; &lt;li&gt;Check everything is working: &lt;code&gt;docker-compose up&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run SearXNG in the background: &lt;code&gt;docker-compose up -d&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Start SearXNG with systemd&lt;/h3&gt; &#xA;&lt;p&gt;You can skip this step if you don&#39;t use systemd.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cp searxng-docker.service.template searxng-docker.service&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;edit the content of &lt;code&gt;WorkingDirectory&lt;/code&gt; in the &lt;code&gt;searxng-docker.service&lt;/code&gt; file (only if the installation path is different from /usr/local/searxng-docker)&lt;/li&gt; &#xA; &lt;li&gt;Install the systemd unit: &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;systemctl enable $(pwd)/searxng-docker.service&#xA;systemctl start searxng-docker.service&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Note on the image proxy feature&lt;/h2&gt; &#xA;&lt;p&gt;The SearXNG image proxy is activated by default.&lt;/p&gt; &#xA;&lt;p&gt;The default &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy&#34;&gt;Content-Security-Policy&lt;/a&gt; allow the browser to access to &lt;code&gt;${SEARXNG_HOSTNAME}&lt;/code&gt; and &lt;code&gt;https://*.tile.openstreetmap.org;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If some users wants to disable the image proxy, you have to modify &lt;a href=&#34;https://github.com/searxng/searxng-docker/raw/master/Caddyfile&#34;&gt;./Caddyfile&lt;/a&gt;. Replace the &lt;code&gt;img-src &#39;self&#39; data: https://*.tile.openstreetmap.org;&lt;/code&gt; by &lt;code&gt;img-src * data:;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Multi Architecture Docker images&lt;/h2&gt; &#xA;&lt;p&gt;Supported architecture:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;amd64&lt;/li&gt; &#xA; &lt;li&gt;arm64&lt;/li&gt; &#xA; &lt;li&gt;arm/v7&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to update ?&lt;/h2&gt; &#xA;&lt;p&gt;To update the SearXNG stack:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker-compose pull&#xA;docker-compose down&#xA;docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To update this &lt;code&gt;docker-compose.yml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;p&gt;Check out the newest version on github: &lt;a href=&#34;https://github.com/searxng/searxng-docker&#34;&gt;searxng/searxng-docker&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zsh-users/zsh-history-substring-search</title>
    <updated>2022-07-05T01:53:21Z</updated>
    <id>tag:github.com,2022-07-05:/zsh-users/zsh-history-substring-search</id>
    <link href="https://github.com/zsh-users/zsh-history-substring-search" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üê† ZSH port of Fish history search (up arrow)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;zsh-history-substring-search&lt;/h1&gt; &#xA;&lt;p&gt;This is a clean-room implementation of the &lt;a href=&#34;http://fishshell.com&#34;&gt;Fish shell&lt;/a&gt;&#39;s history search feature, where you can type in any part of any command from history and then press chosen keys, such as the UP and DOWN arrows, to cycle through matches.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://zsh.sourceforge.net&#34;&gt;ZSH&lt;/a&gt; 4.3 or newer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Using the &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt; package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install zsh-history-substring-search&#xA;echo &#39;source /usr/local/share/zsh-history-substring-search/zsh-history-substring-search.zsh&#39; &amp;gt;&amp;gt; ~/.zshrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34;&gt;Oh-my-zsh&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone this repository in oh-my-zsh&#39;s plugins directory:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; git clone https://github.com/zsh-users/zsh-history-substring-search ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-history-substring-search&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Activate the plugin in &lt;code&gt;~/.zshrc&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; plugins=( [plugins...] zsh-history-substring-search)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Source &lt;code&gt;~/.zshrc&lt;/code&gt; to take changes into account:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; source ~/.zshrc&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Load this script into your interactive ZSH session:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;% source zsh-history-substring-search.zsh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you want to use &lt;a href=&#34;https://github.com/zsh-users/zsh-syntax-highlighting&#34;&gt;zsh-syntax-highlighting&lt;/a&gt; along with this script, then make sure that you load it &lt;em&gt;before&lt;/em&gt; you load this script:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;% source zsh-syntax-highlighting.zsh&#xA;% source zsh-history-substring-search.zsh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bind keyboard shortcuts to this script&#39;s functions.&lt;/p&gt; &lt;p&gt;Users typically bind their UP and DOWN arrow keys to this script, thus:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Run &lt;code&gt;cat -v&lt;/code&gt; in your favorite terminal emulator to observe key codes. &amp;nbsp; &amp;nbsp; &amp;nbsp;(&lt;strong&gt;NOTE:&lt;/strong&gt; In some cases, &lt;code&gt;cat -v&lt;/code&gt; shows the wrong key codes. If the key codes shown by &lt;code&gt;cat -v&lt;/code&gt; don&#39;t work for you, press &lt;code&gt;&amp;lt;C-v&amp;gt;&amp;lt;UP&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;C-v&amp;gt;&amp;lt;DOWN&amp;gt;&lt;/code&gt; at your ZSH command line prompt for correct key codes.)&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Press the UP arrow key and observe what is printed in your terminal.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Press the DOWN arrow key and observe what is printed in your terminal.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Press the Control and C keys simultaneously to terminate the &lt;code&gt;cat -v&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Use your observations from the previous steps to create key bindings. For example, if you observed &lt;code&gt;^[[A&lt;/code&gt; for UP and &lt;code&gt;^[[B&lt;/code&gt; for DOWN, then:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;bindkey &#39;^[[A&#39; history-substring-search-up&#xA;bindkey &#39;^[[B&#39; history-substring-search-down&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;However, if the observed values don&#39;t work, you can try using terminfo:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;bindkey &#34;$terminfo[kcuu1]&#34; history-substring-search-up&#xA;bindkey &#34;$terminfo[kcud1]&#34; history-substring-search-down&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You might also want to bind the Control-P/N keys for use in EMACS mode:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;bindkey -M emacs &#39;^P&#39; history-substring-search-up&#xA;bindkey -M emacs &#39;^N&#39; history-substring-search-down&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You might also want to bind the &lt;code&gt;k&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; keys for use in VI mode:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;bindkey -M vicmd &#39;k&#39; history-substring-search-up&#xA;bindkey -M vicmd &#39;j&#39; history-substring-search-down&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Type any part of any previous command and then:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Press the &lt;code&gt;history-substring-search-up&lt;/code&gt; key, which was configured in step 2 above, to select the nearest command that (1) contains your query and (2) is also older than the current command in your command history.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Press the &lt;code&gt;history-substring-search-down&lt;/code&gt; key, which was configured in step 2 above, to select the nearest command that (1) contains your query and (2) is also newer than the current command in your command history.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Press &lt;code&gt;^U&lt;/code&gt; the Control and U keys simultaneously to abort the search.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If a matching command spans more than one line of text, press the LEFT arrow key to move the cursor away from the end of the command, and then:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Press the &lt;code&gt;history-substring-search-up&lt;/code&gt; key, which was configured in step 2 above, to move the cursor to the line above the cursored line. When the cursor reaches the first line of the command, pressing the &lt;code&gt;history-substring-search-up&lt;/code&gt; key again will cause this script to perform another search.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Press the &lt;code&gt;history-substring-search-down&lt;/code&gt; key, which was configured in step 2 above, to move the cursor to the line below the cursored line. When the cursor reaches the last line of the command, pressing the &lt;code&gt;history-substring-search-down&lt;/code&gt; key, which was configured in step 2 above, again will cause this script to perform another search.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;This script defines the following global variables. You may override their default values.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND&lt;/code&gt; is a global variable that defines how the query should be highlighted inside a matching command. Its default value causes this script to highlight using bold, white text on a magenta background. See the &#34;Character Highlighting&#34; section in the zshzle(1) man page to learn about the kinds of values you may assign to this variable.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_NOT_FOUND&lt;/code&gt; is a global variable that defines how the query should be highlighted when no commands in the history match it. Its default value causes this script to highlight using bold, white text on a red background. See the &#34;Character Highlighting&#34; section in the zshzle(1) man page to learn about the kinds of values you may assign to this variable.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;HISTORY_SUBSTRING_SEARCH_GLOBBING_FLAGS&lt;/code&gt; is a global variable that defines how the command history will be searched for your query. Its default value causes this script to perform a case-insensitive search. See the &#34;Globbing Flags&#34; section in the zshexpn(1) man page to learn about the kinds of values you may assign to this variable.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;HISTORY_SUBSTRING_SEARCH_FUZZY&lt;/code&gt; is a global variable that defines how the command history will be searched for your query. If set to a non-empty value, causes this script to perform a fuzzy search by words, matching in given order e.g. &lt;code&gt;ab c&lt;/code&gt; will match &lt;code&gt;*ab*c*&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;HISTORY_SUBSTRING_SEARCH_PREFIXED&lt;/code&gt; is a global variable that defines how the command history will be searched for your query. If set to a non-empty value, your query will be matched against the start of each history entry. For example, if this variable is empty, &lt;code&gt;ls&lt;/code&gt; will match &lt;code&gt;ls -l&lt;/code&gt; and &lt;code&gt;echo ls&lt;/code&gt;; if it is non-empty, &lt;code&gt;ls&lt;/code&gt; will only match &lt;code&gt;ls -l&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;HISTORY_SUBSTRING_SEARCH_ENSURE_UNIQUE&lt;/code&gt; is a global variable that defines whether all search results returned are &lt;em&gt;unique&lt;/em&gt;. If set to a non-empty value, then only unique search results are presented. This behaviour is off by default. An alternative way to ensure that search results are unique is to use &lt;code&gt;setopt HIST_IGNORE_ALL_DUPS&lt;/code&gt;. If this configuration variable is off and &lt;code&gt;setopt HIST_IGNORE_ALL_DUPS&lt;/code&gt; is unset, then &lt;code&gt;setopt HIST_FIND_NO_DUPS&lt;/code&gt; is still respected and it makes this script skip duplicate &lt;em&gt;adjacent&lt;/em&gt; search results as you cycle through them, but this does not guarantee that search results are unique: if your search results were &#34;Dog&#34;, &#34;Dog&#34;, &#34;HotDog&#34;, &#34;Dog&#34;, then cycling them gives &#34;Dog&#34;, &#34;HotDog&#34;, &#34;Dog&#34;. Notice that the &#34;Dog&#34; search result appeared twice as you cycled through them. If you wish to receive globally unique search results only once, then use this configuration variable, or use &lt;code&gt;setopt HIST_IGNORE_ALL_DUPS&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;September 2009: &lt;a href=&#34;http://www.zsh.org/mla/users/2009/msg00818.html&#34;&gt;Peter Stephenson&lt;/a&gt; originally wrote this script and it published to the zsh-users mailing list.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;January 2011: Guido van Steen (@guidovansteen) revised this script and released it under the 3-clause BSD license as part of &lt;a href=&#34;http://sourceforge.net/projects/fizsh/&#34;&gt;fizsh&lt;/a&gt;, the Friendly Interactive ZSHell.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;January 2011: Suraj N. Kurapati (@sunaku) extracted this script from &lt;a href=&#34;http://sourceforge.net/projects/fizsh/&#34;&gt;fizsh&lt;/a&gt; 1.0.1, refactored it heavily, and finally repackaged it as an &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh/pull/215&#34;&gt;oh-my-zsh plugin&lt;/a&gt; and as an independently loadable &lt;a href=&#34;https://github.com/zsh-users/zsh-history-substring-search&#34;&gt;ZSH script&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;July 2011: Guido van Steen, Suraj N. Kurapati, and Sorin Ionescu (@sorin-ionescu) &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh/pull/215&#34;&gt;further developed it&lt;/a&gt; with Vincent Guerci (@vguerci).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;March 2016: Geza Lore (@gezalore) greatly refactored it in pull request #55.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ahmetb/kubectl-aliases</title>
    <updated>2022-07-05T01:53:21Z</updated>
    <id>tag:github.com,2022-07-05:/ahmetb/kubectl-aliases</id>
    <link href="https://github.com/ahmetb/kubectl-aliases" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Programmatically generated handy kubectl aliases.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;kubectl-aliases&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains &lt;a href=&#34;https://raw.githubusercontent.com/ahmetb/kubectl-aliases/master/generate_aliases.py&#34;&gt;a script&lt;/a&gt; to generate hundreds of convenient shell aliases for kubectl, so you no longer need to spell out every single command and --flag over and over again.&lt;/p&gt; &#xA;&lt;p&gt;An example shell alias created from command/flags permutation looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;alias ksysgdepwslowidel=&#39;kubectl --namespace=kube-system get deployment --watch --show-labels -o=wide -l&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Confused? Read on.&lt;/p&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;p&gt;Some of the 800 generated aliases are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;alias k=&#39;kubectl&#39;&#xA;alias kg=&#39;kubectl get&#39;&#xA;alias kgpo=&#39;kubectl get pod&#39;&#xA;&#xA;alias ksysgpo=&#39;kubectl --namespace=kube-system get pod&#39;&#xA;&#xA;alias krm=&#39;kubectl delete&#39;&#xA;alias krmf=&#39;kubectl delete -f&#39;&#xA;alias krming=&#39;kubectl delete ingress&#39;&#xA;alias krmingl=&#39;kubectl delete ingress -l&#39;&#xA;alias krmingall=&#39;kubectl delete ingress --all-namespaces&#39;&#xA;&#xA;alias kgsvcoyaml=&#39;kubectl get service -o=yaml&#39;&#xA;alias kgsvcwn=&#39;kubectl get service --watch --namespace&#39;&#xA;alias kgsvcslwn=&#39;kubectl get service --show-labels --watch --namespace&#39;&#xA;&#xA;alias kgwf=&#39;kubectl get --watch -f&#39;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/ahmetb/kubectl-aliases/master/.kubectl_aliases&#34;&gt;the full list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;You can directly download the &lt;a href=&#34;https://raw.githubusercontent.com/ahmetb/kubectl-aliases/master/.kubectl_aliases&#34;&gt;&lt;code&gt;.kubectl_aliases&lt;/code&gt; file&lt;/a&gt; for bash/zsh or the &lt;a href=&#34;https://raw.githubusercontent.com/ahmetb/kubectl-aliases/master/.kubectl_aliases.fish&#34;&gt;&lt;code&gt;.kubectl_aliases.fish&lt;/code&gt; file&lt;/a&gt; for fish and save it to your &lt;code&gt;$HOME&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h4&gt;Bash/Zsh&lt;/h4&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;.bashrc/.zshrc&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[ -f ~/.kubectl_aliases ] &amp;amp;&amp;amp; source ~/.kubectl_aliases&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Recommendation:&lt;/strong&gt; If you want to use GNU &lt;code&gt;watch&lt;/code&gt; command instead of &lt;code&gt;kubectl [...] --watch&lt;/code&gt;, run it like this:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;[ -f ~/.kubectl_aliases ] &amp;amp;&amp;amp; source \&#xA;   &amp;lt;(cat ~/.kubectl_aliases | sed -r &#39;s/(kubectl.*) --watch/watch \1/g&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Print the full command before running it:&lt;/strong&gt; Add this to your &lt;code&gt;.bashrc&lt;/code&gt; or &lt;code&gt;.zshrc&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;function kubectl() { echo &#34;+ kubectl $@&#34;&amp;gt;&amp;amp;2; command kubectl $@; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Fish&lt;/h4&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fish&#34;&gt;test -f ~/.kubectl_aliases.fish &amp;amp;&amp;amp; source ~/.kubectl_aliases.fish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This actually adds the more powerful fish &lt;a href=&#34;https://fishshell.com/docs/current/cmds/abbr.html&#34;&gt;abbreviations&lt;/a&gt; instead of aliases, so that pressing space shows the full command before execution.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Recommendation:&lt;/strong&gt; If you want to use GNU &lt;code&gt;watch&lt;/code&gt; command instead of &lt;code&gt;kubectl [...] --watch&lt;/code&gt;, run it like this:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;test -f ~/.kubectl_aliases.fish &amp;amp;&amp;amp; source \&#xA;     (cat ~/.kubectl_aliases.fish | sed -r &#39;s/(kubectl.*) --watch/watch \1/g&#39; | psub)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Syntax explanation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;k&lt;/code&gt;&lt;/strong&gt;=&lt;code&gt;kubectl&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;sys&lt;/code&gt;&lt;/strong&gt;=&lt;code&gt;--namespace kube-system&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;commands: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;g&lt;/code&gt;&lt;/strong&gt;=&lt;code&gt;get&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;d&lt;/code&gt;&lt;/strong&gt;=&lt;code&gt;describe&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;rm&lt;/code&gt;&lt;/strong&gt;=&lt;code&gt;delete&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;a&lt;/code&gt;&lt;/strong&gt;:&lt;code&gt;apply -f&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;ak&lt;/code&gt;&lt;/strong&gt;:&lt;code&gt;apply -k&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;k&lt;/code&gt;&lt;/strong&gt;:&lt;code&gt;kustomize&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;ex&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;exec -i -t&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;lo&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;logs -f&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;resources: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;po&lt;/code&gt;&lt;/strong&gt;=pod, &lt;strong&gt;&lt;code&gt;dep&lt;/code&gt;&lt;/strong&gt;=&lt;code&gt;deployment&lt;/code&gt;, &lt;strong&gt;&lt;code&gt;ing&lt;/code&gt;&lt;/strong&gt;=&lt;code&gt;ingress&lt;/code&gt;, &lt;strong&gt;&lt;code&gt;svc&lt;/code&gt;&lt;/strong&gt;=&lt;code&gt;service&lt;/code&gt;, &lt;strong&gt;&lt;code&gt;cm&lt;/code&gt;&lt;/strong&gt;=&lt;code&gt;configmap&lt;/code&gt;, &lt;strong&gt;&lt;code&gt;sec&lt;/code&gt;&lt;/strong&gt;=&lt;code&gt;secret&lt;/code&gt;, &lt;strong&gt;&lt;code&gt;ns&lt;/code&gt;&lt;/strong&gt;=&lt;code&gt;namespace&lt;/code&gt;, &lt;strong&gt;&lt;code&gt;no&lt;/code&gt;&lt;/strong&gt;=&lt;code&gt;node&lt;/code&gt; &lt;strong&gt;&lt;span&gt;‚ö†&lt;/span&gt; Please do not suggest new resources here, instead fork the project.&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;flags: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;output format: &lt;strong&gt;&lt;code&gt;oyaml&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;ojson&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;owide&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;all&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;--all&lt;/code&gt; or &lt;code&gt;--all-namespaces&lt;/code&gt; depending on the command&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;sl&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;--show-labels&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;w&lt;/code&gt;&lt;/strong&gt;=&lt;code&gt;-w/--watch&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;value flags (should be at the end): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;n&lt;/code&gt;&lt;/strong&gt;=&lt;code&gt;-n/--namespace&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;f&lt;/code&gt;&lt;/strong&gt;=&lt;code&gt;-f/--filename&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;l&lt;/code&gt;&lt;/strong&gt;=&lt;code&gt;-l/--selector&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running the script&lt;/h3&gt; &#xA;&lt;p&gt;The script has only one optional argument, the shell to which the aliases will be generated. If not given, it assumes &lt;code&gt;bash&lt;/code&gt;. Ex:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Generate aliases for bash/zsh&#xA;python generate_aliases.py &amp;gt; .kubectl_aliases&#xA;&#xA;# Generate abbr for fish&#xA;python generate_aliases.py fish &amp;gt; .kubectl_aliases.fish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;FAQ&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Doesn&#39;t this slow down my shell start up?&lt;/strong&gt; Sourcing the file that contains ~500 aliases takes about 30-45 milliseconds in my shell (zsh). I don&#39;t think it&#39;s a big deal for me. Measure it with &lt;code&gt;echo $(($(date +%s%N)/1000000))&lt;/code&gt; command yourself in your .bashrc/.zshrc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Can I add more Kubernetes resource types to this?&lt;/strong&gt; Please consider forking this repo and adding the resource types you want. Not all resource types are used by everyone, and adding more resource types slows down shell initialization see above).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Where can I find PowerShell aliases for kubectl?&lt;/strong&gt; There‚Äôs a fork of this &lt;a href=&#34;https://github.com/shanoor/kubectl-aliases-powershell&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Authors&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/ahmetb&#34;&gt;@ahmetb&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;This is not an official Google project.&lt;/p&gt;</summary>
  </entry>
</feed>