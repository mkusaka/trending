<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-26T01:49:08Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>adityaathalye/shite</title>
    <updated>2023-01-26T01:49:08Z</updated>
    <id>tag:github.com,2023-01-26:/adityaathalye/shite</id>
    <link href="https://github.com/adityaathalye/shite" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The little hot-reloadin&#39; static site maker from shell.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;shite&lt;/h2&gt; &#xA;&lt;p&gt;The little hot-reloadin&#39; static site generator from shell. Assumes Bash 4.4+.&lt;/p&gt; &#xA;&lt;p&gt;WARNING: Here be yaks!&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;shite&lt;/code&gt;&#39;s job is to help me make my website: &lt;a href=&#34;https://evalapply.org&#34;&gt;https://evalapply.org&lt;/a&gt; Thus, &lt;code&gt;shite&lt;/code&gt;&#39;s scope, (mis)feature set, polish will always be production-grade, where production is &#34;works on my machine(s)&#34; :)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/demo/shite-demo-02-hotreload-content-edits-5fps-1024px.gif&#34; alt=&#34;much write. such Bash. very hotreload. wow.&#34; title=&#34;much write. such Bash. very hotreload. wow.&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#shite&#34;&gt;shite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#introduction&#34;&gt;Introduction&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#dreams-and-desires&#34;&gt;Dreams and desires&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#backstory&#34;&gt;Backstory&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#usage-demo&#34;&gt;Usage Demo&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#hot-reloaded-shite-editing&#34;&gt;Hot-reloaded shite editing&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#hotreload-begins&#34;&gt;hotreload begins&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#hotreload-content-edits&#34;&gt;hotreload content edits&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#hotreload-style-edits&#34;&gt;hotreload style edits&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#hotreload-template-edits&#34;&gt;hotreload template edits&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#hot-rebuild-indices-and-feeds&#34;&gt;hot rebuild indices and feeds&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#full-site-builds&#34;&gt;Full site builds&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#environment-variables-and-debug-flags&#34;&gt;Environment Variables and Debug flags&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#design-and-internals&#34;&gt;Design and Internals&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#file-and-url-naming-scheme&#34;&gt;File and URL naming scheme&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#code-organisation&#34;&gt;Code organisation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#calling-the-code&#34;&gt;Calling the code&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#templating-system&#34;&gt;Templating system&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#metadata-and-front-matter-system&#34;&gt;Metadata and front matter system&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#for-orgmode-content&#34;&gt;For orgmode content&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#for-markdown-content&#34;&gt;For markdown content&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#for-html-content&#34;&gt;For html content&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#bashful-hot-reloading-sans-javascript&#34;&gt;Bashful Hot Reloading Sans Javascript&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#the-event-system&#34;&gt;The event system&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#liveness-criterion&#34;&gt;Liveness criterion&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#hot-reload-scenarios&#34;&gt;Hot reload scenarios&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#hot-reload-behaviour&#34;&gt;Hot reload behaviour&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#unrealised-ambitions&#34;&gt;Unrealised Ambitions&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#from-any-source-dir-to-any-publish-dir-from-anywhere-on-my-box&#34;&gt;From any source dir to any publish dir from anywhere on my box&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#hot-deployment&#34;&gt;Hot deployment&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#hot-deployment-with-local-hot-reload&#34;&gt;Hot deployment with local hot reload&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#more-creature-comforts&#34;&gt;More creature comforts&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;Well, &lt;code&gt;shite&lt;/code&gt; aims to make websites.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;It is a wee publishing system made of pipelined workflows, optionally driven by streams of file events (for the hotreloadin&#39; bits).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It will not surprise a Perl/PHP gentleperson hacker from the last century.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It exists because one whistles silly tunes and shaves yaks.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is baaasically what it does (ref: the &lt;code&gt;shite_templating_publish_sources&lt;/code&gt; function).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cat &#34;${watch_dir}/sources/${url_slug}&#34; |&#xA;    __shite_templating_compile_source_to_html ${file_type} |&#xA;    __shite_templating_wrap_content_html ${content_type} |&#xA;    __shite_templating_wrap_page_html |&#xA;    ${html_formatter_fn} |&#xA;    tee &#34;${watch_dir}/public/${slug}.html&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It publishes content from org-mode files.&lt;/li&gt; &#xA; &lt;li&gt;And html, and markdown.&lt;/li&gt; &#xA; &lt;li&gt;It hot-builds.&lt;/li&gt; &#xA; &lt;li&gt;It hot-reloads (no Javascript).&lt;/li&gt; &#xA; &lt;li&gt;It does neither if you disdain creature comforts.&lt;/li&gt; &#xA; &lt;li&gt;It does not &lt;em&gt;demand&lt;/em&gt; any server process for local publishing.&lt;/li&gt; &#xA; &lt;li&gt;It is quite small. &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# The complete &#34;business logic&#34; is 300-ish lines as of this comment,&#xA;# counted as all lines except comments and blank lines.&#xA;grep -E -v &#34;\s?\#|^$&#34; \&#xA;    ./bin/{events,metadata,templating,utils,hotreload}.sh |&#xA;   wc -l&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;It is Bash-ful.&lt;/li&gt; &#xA; &lt;li&gt;I &lt;em&gt;like&lt;/em&gt; it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Before you get too exshited, may I warn you that the MIT license means I don&#39;t have to give a shite if this little shite maker fails to make your shite work. &lt;a href=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/#contributing&#34;&gt;Contributing&lt;/a&gt; is replete with more warnings.&lt;/p&gt; &#xA;&lt;p&gt;And last but not least, I hereby decree that all texsht herein be read in Sean Connery voish.&lt;/p&gt; &#xA;&lt;h2&gt;Dreams and desires&lt;/h2&gt; &#xA;&lt;p&gt;In my &lt;code&gt;shite&lt;/code&gt; dreams, I desire...&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Above all, to keep it (the &#34;business logic&#34;) &lt;em&gt;small&lt;/em&gt;. Small enough to cache, debug, and refactor in my head.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To install and use without superuser permission.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To &lt;em&gt;extremely&lt;/em&gt; avoid toolchains and build dependencies. No gems / npms / venvs / what-have-yous. Thus, Bash is the language, because Bash is everywhere. And standard packages like &lt;code&gt;pandoc&lt;/code&gt; or &lt;code&gt;tidy&lt;/code&gt;, when one needs &lt;em&gt;specific&lt;/em&gt; advanced functionality.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Dependency-free templating with plain-ol&#39; HTML set in good ol&#39; heredocs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Simple metadata system, content namespacing, static asset organisation etc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Web server optional (or any kind of server process for that matter). We aim for static sites, after all, which work just fine with &lt;code&gt;file://&lt;/code&gt; navigation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To construct it from small, composable, purely functional, Unix-tool-like parts, because I like that sort of stuff a lot.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To give myself a seamless REPL-like edit-save-build-preview workflow.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Hot-build page processing (compile + build on save.)&lt;/li&gt; &#xA;   &lt;li&gt;Javascript-free browser hot-reloading. It works. It&#39;s terrible. It&#39;s awesome!&lt;/li&gt; &#xA;   &lt;li&gt;TODO: Potentially also extend the same mechanism to hot-deploy, on git push to a private repo on my own VPS somewhere. Maybe.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Backstory&lt;/h2&gt; &#xA;&lt;p&gt;I accidentally restarted blogging after a long haitus. Before I could get words into the cloud, I muddled about with &#34;modern&#34; Static Site Generators. Because WordPress is so last century (or so I told myself). Then I got annoyed by the SSG Jamstack bespoke templating building etc. magic. Now I am on the dark path of making this. It is being blogged about at: &lt;a href=&#34;https://www.evalapply.org/posts/shite-the-static-sites-from-shell-part-1/&#34;&gt;shite: static sites from shell: part 1/2&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Usage Demo&lt;/h1&gt; &#xA;&lt;p&gt;I use shite mainly in &#34;hotreload&#34; mode, mainly to write posts (in orgmode) and live preview them (in Firefox). Less mainly, to hot-preview modifications to styles and/or page templates. Least mainly, after labouring on a post interminably, I use it in &#34;don&#39;t hotreload&#34; mode to do a full site rebuild.&lt;/p&gt; &#xA;&lt;p&gt;shite demo examples below.&lt;/p&gt; &#xA;&lt;h2&gt;Hot-reloaded shite editing&lt;/h2&gt; &#xA;&lt;p&gt;Basically this means that if I create, update, delete any file under &lt;code&gt;sources&lt;/code&gt;, it must automatically translate to HTML, be published locally to &lt;code&gt;public&lt;/code&gt;, and cause an appropriate page navigation or reload action in the web browser, where my site is open.&lt;/p&gt; &#xA;&lt;h3&gt;hotreload begins&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/demo/shite-demo-01-hotreload-begins-5fps-1024px.gif&#34; alt=&#34;invoke shite in hotreload mode&#34; title=&#34;invoke shite in hotreload mode&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Call the &#34;main&#34; script in a clean new terminal session or tmux pane.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./shite.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It helpfully opens the index file in Firefox, according to the defaults I&#39;ve set in &lt;code&gt;shite_global_data&lt;/code&gt; array in &lt;code&gt;./shite.sh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;hotreload content edits&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/demo/shite-demo-02-hotreload-content-edits-5fps-1024px.gif&#34; alt=&#34;hotreload content edits&#34; title=&#34;hotreload content edits&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In your Emacs or Vim, open some content file under &lt;code&gt;sources&lt;/code&gt;. Edit, save, and watch the content appear in the browser. (Yes specifying Emacs/Vim is goofy, because I trigger &lt;em&gt;hot&lt;/em&gt; actions based on inotify events. Apparently different editors do file updates differently. I use Emacs or Vim, so I watch for the events they cause, so it works on my machine. :)).&lt;/p&gt; &#xA;&lt;p&gt;Frequently the browser remembers the scroll position, which is neat. Sometimes the hotreload is, well, shite. So I just hit space and save the content file to trigger hotreload again.&lt;/p&gt; &#xA;&lt;h3&gt;hotreload style edits&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/demo/shite-demo-03-hotreload-style-edits-5fps-1024px.gif&#34; alt=&#34;hotreload style edits&#34; title=&#34;hotreload style edits&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Go to some static asset, like a CSS stylesheet. Alter a thing, like background color value. Save and watch the color change in the browser.&lt;/p&gt; &#xA;&lt;h3&gt;hotreload template edits&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/demo/shite-demo-04-hotreload-template-updates-5fps-1024px.gif&#34; alt=&#34;hotreload template edits&#34; title=&#34;hotreload template edits&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tweak some template fragment in &lt;code&gt;templates.sh&lt;/code&gt;---say, blog post template. Then switch to some blog post content file and modify it to trigger page build with the modified template (e.g. hit space and save).&lt;/p&gt; &#xA;&lt;h3&gt;hot rebuild indices and feeds&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/demo/shite-demo-05-hotreload-rebuild-indices-feeds-5fps-1024px.gif&#34; alt=&#34;hot rebuild indices and feeds&#34; title=&#34;hot rebuild indices and feeds&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a hack. The root index.org page under sources is special. If I modify it, then it means I want to rebuild posts lists for the index page, for tags, and also rebuild related meta-files like the RSS feed, sitemap, robots.txt etc.&lt;/p&gt; &#xA;&lt;h2&gt;Full site builds&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/adityaathalye/shite/master/demo/shite-demo-06-dont-hotreload-full-site-rebuild-5fps-1024px.gif&#34; alt=&#34;full site build&#34; title=&#34;full site build&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In a clean new terminal session call &lt;code&gt;shite.sh&lt;/code&gt; with &#34;no&#34;, and optionally with the &lt;code&gt;base_url&lt;/code&gt; of the deployment environment:&lt;/p&gt; &#xA;&lt;p&gt;Rebuild full site for &#34;local&#34; file:/// navigation. Truly &#34;serverless&#34; :)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./shite.sh &#34;no&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Rebuild full site for publication under my domain.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./shite.sh &#34;no&#34; &#34;https://evalapply.org&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Environment Variables and Debug flags&lt;/h2&gt; &#xA;&lt;p&gt;These flags alter the behaviour of the system.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Setting &lt;code&gt;SHITE_HOTRELOAD&lt;/code&gt; to &#34;yes&#34; will run the event system in &#34;monitor&#34; mode, which in turn drives hotreload behaviour. Setting it to &#34;no&#34; will suppress browser hotreload.&lt;/li&gt; &#xA; &lt;li&gt;Setting &lt;code&gt;SHITE_DEBUG_TEMPLATES&lt;/code&gt; to &#34;debug&#34; will cause templates to be sourced first, before publishing any templated source content.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Design and Internals&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;shite&lt;/code&gt; is quite Unixy inside. Or so I&#39;d like to think.&lt;/p&gt; &#xA;&lt;p&gt;Code is functional programming-style Bash. Everything is a function. Most functions are pure functions---little Unix tools in themselves. Most logic is pipeline-oriented. This works surprisingly well, because &lt;a href=&#34;https://www.evalapply.org/posts/shell-aint-a-bad-place-to-fp-part-1-doug-mcilroys-pipeline/&#34;&gt;Shell ain&#39;t a bad place to FP&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;I also wanted a live interactive REPL-like experience when writing with &lt;code&gt;shite&lt;/code&gt;, because I like working in live/interactive runtimes like Clojure and Emacs.&lt;/p&gt; &#xA;&lt;p&gt;So, &lt;code&gt;shite&lt;/code&gt; has become this fully reactive event-driven system capable of hot build-and-reload-on-save.&lt;/p&gt; &#xA;&lt;h2&gt;File and URL naming scheme&lt;/h2&gt; &#xA;&lt;p&gt;There are three main directory namespaces:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;sources&lt;/code&gt; housing the &#34;source&#34; content, such as blog posts written in orgmode, as well as CSS, Javascript, and other static assets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;public&lt;/code&gt; target for the compiled / built artefacts&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bin&lt;/code&gt; for the shite-building code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The URL naming scheme follows sub-directory structure under &lt;code&gt;sources&lt;/code&gt;, and is replicated as-is under the &lt;code&gt;pubilic&lt;/code&gt; directory structure. Since this is a bog standard URL namespacing scheme, it also, applies directly to published content. Like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;file:///absolute/path/to/shite/posts/slug/index.html&#xA;&#xA;http://localhost:8080/posts/slug/index.html&#xA;&#xA;https://your-domain-name.com/posts/slug/index.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Code organisation&lt;/h2&gt; &#xA;&lt;p&gt;All &#34;public&#34; functions are namespaced as &lt;code&gt;shite_the_func_name&lt;/code&gt;. All &#34;private&#34; functions are namespaced as &lt;code&gt;__shite_the_func_name&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Functions exist to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;define common page fragments (meta, header, footer etc.)&lt;/li&gt; &#xA; &lt;li&gt;compose full pages from components, metadata, and body content&lt;/li&gt; &#xA; &lt;li&gt;assemble the site... build and publish sources into public targets&lt;/li&gt; &#xA; &lt;li&gt;detect and process event streams to drive various site building features site builds, and browser hot reloading&lt;/li&gt; &#xA; &lt;li&gt;react to processed events and drive hot compile of pages, hot build of site, and browser hot reload / navigation&lt;/li&gt; &#xA; &lt;li&gt;provide convenience utilities for manual builds, local development&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Calling the code&lt;/h2&gt; &#xA;&lt;p&gt;In a clean new terminal session:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CD to the root of this project&lt;/li&gt; &#xA; &lt;li&gt;Source the dev utility code into the environment. This will bring in all the business logic, templates, as well as dev utility functions. &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source ./bin/utils_dev.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Hit &lt;code&gt;shitTABTAB&lt;/code&gt; or &lt;code&gt;__shiTABTAB&lt;/code&gt; at the command line for autocompletions.&lt;/li&gt; &#xA; &lt;li&gt;Enter &lt;code&gt;type -a func_name&lt;/code&gt; to print the function&#39;s definition and read its API.&lt;/li&gt; &#xA; &lt;li&gt;Set &lt;code&gt;shite_global_data&lt;/code&gt; and &lt;code&gt;shite_page_data&lt;/code&gt; as needed.&lt;/li&gt; &#xA; &lt;li&gt;Call functions at the command line. Call them individually, and/or composed with other functions to test / exercise parts of the system.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Templating system&lt;/h2&gt; &#xA;&lt;p&gt;Templates exist for page fragments (like header, footer, navigation), and for full page definitions (like the default page template). These are written as plain HTML wrapped in heredocs. &lt;code&gt;./bin/templates.sh&lt;/code&gt; provides these.&lt;/p&gt; &#xA;&lt;p&gt;Templates are filled-in with variable data from different sources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bash associative arrays: &lt;code&gt;shite_global_data&lt;/code&gt; contains site-wide metadata, and &lt;code&gt;shite_page_data&lt;/code&gt; contains page-specific metadata. Some outside process must pre-set these arrays prior to processing any page.&lt;/li&gt; &#xA; &lt;li&gt;stdin: to inject content into the templates that are wrappers for content.&lt;/li&gt; &#xA; &lt;li&gt;function calls: to expand fragments like HTML metadata, links etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, a full page may be constructed as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cat ./sample/hello.md |&#xA;    pandoc -f markdown -t html |&#xA;    cat &amp;lt;&amp;lt;EOF&#xA;    &amp;lt;!DOCTYPE html&amp;gt;&#xA;    &amp;lt;html&amp;gt;&#xA;        &amp;lt;head&amp;gt;&#xA;            $(shite_template_common_meta)&#xA;            $(shite_template_common_links)&#xA;            ${shite_page_data[canonical_url]}&#xA;        &amp;lt;/head&amp;gt;&#xA;        &amp;lt;body ${shite_page_data[page_id]}&amp;gt;&#xA;            $(shite_template_common_header)&#xA;            &amp;lt;main&amp;gt;&#xA;              $(cat -)&#xA;            &amp;lt;/main&amp;gt;&#xA;            $(shite_template_common_footer)&#xA;        &amp;lt;/body&amp;gt;&#xA;    &amp;lt;/html&amp;gt;&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Metadata and front matter system&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;shite&lt;/code&gt;&#39;s metadata system is defined as key-value pairs. Keys name the metadata items, and would be associated with whatever value of that type. Examples below.&lt;/p&gt; &#xA;&lt;p&gt;As noted earlier, run-time metadata is carried in the environment by the associative arrays &lt;code&gt;shite_global_data&lt;/code&gt; and &lt;code&gt;shite_page_data&lt;/code&gt;. These maybe be populated by direct construction, as well as updated from external sources.&lt;/p&gt; &#xA;&lt;p&gt;Each page may specify its own metadata in &#34;front matter&#34; at the top of the page. This will be used in addition page metadata derived from other sources.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;shite&lt;/code&gt; expects us to write front matter using syntax that is compatible with the given content type, as follows.&lt;/p&gt; &#xA;&lt;h3&gt;For orgmode content&lt;/h3&gt; &#xA;&lt;p&gt;Use comment lines &lt;code&gt;# SHITE_META&lt;/code&gt; to demarcate the org-style metadata that &lt;code&gt;shite&lt;/code&gt; should also parse as page-specific metadata.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;# SHITE_META&#xA;#+title: This is a Title&#xA;#+slug: this/is/a/slug&#xA;#+date: Friday 26 August 2022 03:38:01 PM IST&#xA;#+tags: foo bar baz quxx&#xA;# SHITE_META&#xA;#+more_org_metadata: but not processed as shite metadata&#xA;#+still_more_org_metadata: and still not processed as shite metadata&#xA;&#xA;* this is a top level heading&#xA;&#xA;this is some orgmode content&#xA;&#xA;#+TOC: headlines 1 local&#xA;&#xA;** this is a sub heading&#xA;   - this is a point&#xA;   - this is another point&#xA;   - a third point&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;For markdown content&lt;/h3&gt; &#xA;&lt;p&gt;Write Jekyll-style YAML front matter, boxed between &lt;code&gt;---&lt;/code&gt; separators.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;TITLE: This is a Title&#xA;slug: this/is/a/slug&#xA;DATE: Friday 26 August 2022 03:38:01 PM IST&#xA;TAGS: foo BAR baz QUXX&#xA;---&#xA;&#xA;# this is a heading&#xA;&#xA;this is some markdown content&#xA;&#xA;## this is a subheading&#xA;  - this is a point&#xA;  - this is another point&#xA;  - a third point&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;For html content&lt;/h3&gt; &#xA;&lt;p&gt;We can simply use standard &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tags, that obey this convention: &lt;code&gt;&amp;lt;meta name=&#34;KEY&#34; content=&#34;value&#34;&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;meta name=&#34;TITLE&#34; content=&#34;This is a Title&#34;&amp;gt;&#xA;&amp;lt;meta name=&#34;slug&#34; content=&#34;this/is/a/slug&#34;&amp;gt;&#xA;&amp;lt;meta name=&#34;DATE&#34; content=&#34;Friday 26 August 2022 03:38:01 PM IST&#34;&amp;gt;&#xA;&amp;lt;meta name=&#34;TAGS&#34; content=&#34;foo BAR baz QUXX&#34;&amp;gt;&#xA;&#xA;&amp;lt;h1&amp;gt;This is a heading&amp;lt;/h1&amp;gt;&#xA;&amp;lt;p&amp;gt;This is some text&amp;lt;/p&amp;gt;&#xA;&amp;lt;h2&amp;gt;This is a subheading&amp;lt;/h2&amp;gt;&#xA;&amp;lt;p&amp;gt;&#xA;  &amp;lt;ul&amp;gt;&#xA;    &amp;lt;li&amp;gt;This is a point&amp;lt;/li&amp;gt;&#xA;    &amp;lt;li&amp;gt;This is another point.&amp;lt;/li&amp;gt;&#xA;    &amp;lt;li&amp;gt;This is a third point.&amp;lt;/li&amp;gt;&#xA;  &amp;lt;/ul&amp;gt;&#xA;&amp;lt;/p&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bashful Hot Reloading Sans Javascript&lt;/h2&gt; &#xA;&lt;p&gt;Here be Yaks!&lt;/p&gt; &#xA;&lt;p&gt;Being entirely spoiled by Clojure/Lisp/Spreadsheet style insta-gratifying live interactive workflows, I want hot reload and hot navigate in shite-making too.&lt;/p&gt; &#xA;&lt;p&gt;But there does not seem to exist a standalone live web development server / tool that does not also want me to download half the known Internet as dependencies. As I said before, a thing I &lt;em&gt;extremely&lt;/em&gt; do &lt;em&gt;not&lt;/em&gt; want to do.&lt;/p&gt; &#xA;&lt;p&gt;DuckSearch delivered Emacs impatient-mode, which is quite hot, but I don&#39;t want to hardwire this my Emacs. Luckily, it also delivered this exciting brainwave featuring &#39;inotify-tools&#39; and &#39;xdotool&#39;: &lt;a href=&#34;https://github.com/traviscross/inotify-refresh&#34;&gt;github.com/traviscross/inotify-refresh&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hot copy!&lt;/p&gt; &#xA;&lt;p&gt;Because what could be hotter than my computer slammin&#39; that F5 key &lt;em&gt;for&lt;/em&gt; me? As if it &lt;em&gt;knew&lt;/em&gt; what I really wanted deep down in my heart.&lt;/p&gt; &#xA;&lt;h3&gt;The event system&lt;/h3&gt; &#xA;&lt;p&gt;The event subsystem is orthogonal to everything else, and composes with the rest of the system.&lt;/p&gt; &#xA;&lt;p&gt;The design is bog standard streaming architecture, viz. watch for file system events, then filter, deduplicate, analyse, and route them (tee) to different event processors. Currently there are just two such processors; one to compile and publish the page or asset associated with the event, another to hot reload the browser (or hot navigate) depending on the same event.&lt;/p&gt; &#xA;&lt;p&gt;Baaasically this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# detect file events&#xA;__shite_detect_changes ${watch_dir} &#39;create,modify,close_write,moved_to,delete&#39; |&#xA;    __shite_events_gen_csv ${watch_dir} |&#xA;    # hot-compile-and-publish content, HTML, static, etc.&#xA;    tee &amp;gt;(shite_templating_publish_sources &amp;gt; /dev/null) |&#xA;    # browser hot-reload&#xA;    tee &amp;gt;(__shite_hot_cmd_public_events ${window_id} ${base_url} |&#xA;              __shite_hot_cmd_exec)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Events are simply a stream of CSV records structured like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;unix_epoch_seconds,event_type,base_dir,sub_dir,url_slug,file_type,content_type`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We use different parts of the event record to cause different kinds of actions.&lt;/p&gt; &#xA;&lt;h3&gt;Liveness criterion&lt;/h3&gt; &#xA;&lt;p&gt;The afore-linked inotify-refresh script tries to &lt;em&gt;periodically&lt;/em&gt; refresh a set of browser windows. We, however, want to be &lt;em&gt;very&lt;/em&gt; eager. Any edit action on our content files and/or static assets must insta-trigger hot reload/navigate actions in the browser tab that&#39;s displaying our shite.&lt;/p&gt; &#xA;&lt;h3&gt;Hot reload scenarios&lt;/h3&gt; &#xA;&lt;p&gt;We want to define distinct reload scenarios: Mutually exclusive, collectively exhaustive buckets into which we can map file events we want to monitor.&lt;/p&gt; &#xA;&lt;p&gt;If we do this, then we can model updates as a sort of write-ahead-log, punching events through an analysis pipeline, associate them with the exact-match scenario, and then finally cause the action. For example:&lt;/p&gt; &#xA;&lt;p&gt;Refresh current tab when&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;static asset create, modify, move, delete&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Go home when&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;current page deleted&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Navigate to content when&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;current page content modified&lt;/li&gt; &#xA; &lt;li&gt;any content page moved or created or modified&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Hot reload behaviour&lt;/h3&gt; &#xA;&lt;p&gt;Since we are making the computer emulate our own keyboard actions, it can mess with our personly actions. If we stick to writing our shite in our text editor, and let the computer do the hotreloady thing, we should remain non-annoyed.&lt;/p&gt; &#xA;&lt;h2&gt;Unrealised Ambitions&lt;/h2&gt; &#xA;&lt;p&gt;There are many Yaks in the world.&lt;/p&gt; &#xA;&lt;h3&gt;From any source dir to any publish dir from anywhere on my box&lt;/h3&gt; &#xA;&lt;p&gt;For truly pervasive multi-site publishing mojo:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;shite&lt;/code&gt; should be available on my PATH&lt;/li&gt; &#xA; &lt;li&gt;I should be able to configure any source / public pair per site&lt;/li&gt; &#xA; &lt;li&gt;Everything else should &#34;just work&#34; as it does&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is a small yak. I&#39;ll probably yakshave it soon.&lt;/p&gt; &#xA;&lt;h3&gt;Hot deployment&lt;/h3&gt; &#xA;&lt;p&gt;Obviously one can use the CI jobs of popular git hosts to trigger &lt;code&gt;shite&lt;/code&gt; builds. But why use clunky current-century tech, when we have already advanced to the state of the art of the late 1900s... fully streaming and fully reactive?&lt;/p&gt; &#xA;&lt;p&gt;Sarcasam aside, I don&#39;t see why the same event system cannot be used to add hot-deploy support, on a remote machine I run.&lt;/p&gt; &#xA;&lt;p&gt;On the remote box:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a web server serves the public pages of the site&lt;/li&gt; &#xA; &lt;li&gt;a clone of the site &lt;code&gt;sources&lt;/code&gt; is enshrined&lt;/li&gt; &#xA; &lt;li&gt;the selfsame hotreload process is live against &lt;code&gt;sources&lt;/code&gt; (minus the browser-watching).&lt;/li&gt; &#xA; &lt;li&gt;a git checkout auto-triggers on receiving a git push&lt;/li&gt; &#xA; &lt;li&gt;which should cause hot-build against the modified sources (with some special case to trigger full build if a template changes)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On my local box:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;edit, preview locally with local hotreloadin&#39;&lt;/li&gt; &#xA; &lt;li&gt;git commit, push sources to remote&lt;/li&gt; &#xA; &lt;li&gt;hit F5 on the appropriate public URL &lt;code&gt;https://mydomain.com/posts/hello/index.html&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;the hot-build should have completed in the time it takes to get to F5&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Hot deployment with local hot reload&lt;/h3&gt; &#xA;&lt;p&gt;Do something over SSH to bring browser refresh back to local box, in case of hot deploys to remote server.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;maybe Shell &#34;Session Portability&#34;? &lt;a href=&#34;https://www.youtube.com/watch?v=uqHjc7hlqd0&amp;amp;t=2436s&#34; title=&#34;Video: Shell Session Portability over SSH&#34;&gt;video&lt;/a&gt;, &lt;a href=&#34;http://talk.jpnc.info/bash_oscon_2014.pdf&#34; title=&#34;Slides: Shell Session Portability over SSH&#34;&gt;slides&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;maybe tap the browser hotreload commands and stream only those back to my box, with a &#34;server-mode&#34; for hot-publish at the remote box and a &#34;client-mode&#34; for hot-reload on my local box?&lt;/li&gt; &#xA; &lt;li&gt;maybe I&#39;ll find out it all &#34;just work&#34; with Emacs/TRAMP?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;More creature comforts&lt;/h3&gt; &#xA;&lt;p&gt;Maybe some &#34;Dev-ing/Drafting&#34; time setup/Teardown scenario? Maybe a &#39;dev_server&#39; function that we use to kick start a new shite writing session?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;xdg-open a new tab in the default browser (say, firefox), and goto the home page of the shite based on config.&lt;/li&gt; &#xA; &lt;li&gt;xdotool &#39;set_window --name&#39; to a UUID for the life of the session.&lt;/li&gt; &#xA; &lt;li&gt;Close the tab when we kill the dev session.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;If you got all the way down here, and &lt;em&gt;still&lt;/em&gt; want to contribute...&lt;/p&gt; &#xA;&lt;p&gt;Why?&lt;/p&gt; &#xA;&lt;p&gt;Why in the name of all that is holy and good, would you want to? Is it not blindingly obvious that this is the work of a goofball? Haven&#39;t you heard that Bash is Not Even A Real Programming Language? And isn&#39;t it face-slappingly obvious that your PRs will languish eternally, and your comments will fall into a nameless void?&lt;/p&gt; &#xA;&lt;p&gt;Yes, sending patches is a terrible idea.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;But&lt;/em&gt; please email me your hopes and dreams about your shite maker! I read email at my firstname dot lastname at gmail.&lt;/p&gt; &#xA;&lt;p&gt;Together we can whistle silly tunes, and co-yak-shave our respective yaks, in our own special ways.&lt;/p&gt; &#xA;&lt;p&gt;May The Source be with us.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This work is dual-licensed under the MIT license and the CC By-SA 4.0 license.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Bash source code for making shite is licensed under the MIT license.&lt;/li&gt; &#xA; &lt;li&gt;My website&#39;s content which I&#39;ve included in this project, for demo purposes, commit is licensed under the Creative Commons Attribution-ShareAlike 4.0 International License (CC By-SA 4.0).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;SPDX-License-Identifier: mit OR cc-by-sa-4.0&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cyberomanov/ironfish-mbs</title>
    <updated>2023-01-26T01:49:08Z</updated>
    <id>tag:github.com,2023-01-26:/cyberomanov/ironfish-mbs</id>
    <link href="https://github.com/cyberomanov/ironfish-mbs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MBS&lt;/h1&gt; &#xA;&lt;p&gt;this bash script perform mint, burn and send automatically.&lt;br&gt; &lt;a href=&#34;https://cyberomanov.tech/WTF_donate&#34;&gt;donations are welcome&lt;/a&gt;, if you find this tool helpful.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;One-line&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run the commands:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt update &amp;amp;&amp;amp; \&#xA;apt install bc wget -y &amp;amp;&amp;amp; \&#xA;wget -O mbs.sh https://raw.githubusercontent.com/cyberomanov/ironfish-mbs/main/mbs.sh &amp;amp;&amp;amp; \&#xA;chmod u+x mbs.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step-by-step&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install dependencies:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt update &amp;amp;&amp;amp; apt install bc wget -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Download the script:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget -O mbs.sh https://raw.githubusercontent.com/cyberomanov/ironfish-mbs/main/mbs.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Edit script permissions:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;chmod u+x mbs.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Execute&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run the script manually:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;./mbs.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can run &lt;code&gt;./mbs.sh&lt;/code&gt; without providing an email, that the faucet request will be executed without any email.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;./mbs.sh &#34;test@gmail.com&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can run &lt;code&gt;./mbs.sh &#34;test@gmail.com&#34;&lt;/code&gt; with providing an email, that the faucet request will be executed with an specified email.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Be happy:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;Enter your email to stay updated with Iron Fish: test@gmail.com.&#xA;&#xA;[ 25-01-23 | 22:16:24 ] faucet just added your request to the queue.&#xA;&#xA;Creating the transaction: [████████████████████████████████████████] 100% s&#xA;&#xA;/////////////////// [ MINT [ 3234 ] | SUCCESS | #1 ] ///////////////////&#xA;&#xA;[ 25-01-23 | 22:16:24 ] hash: 49dffa000b75389d578e2857ba3493624cf009abe73a698f58f96586efd2602e, status: pending.&#xA;[ 25-01-23 | 22:16:34 ] hash: 49dffa000b75389d578e2857ba3493624cf009abe73a698f58f96586efd2602e, status: pending.&#xA;[ 25-01-23 | 22:16:44 ] hash: 49dffa000b75389d578e2857ba3493624cf009abe73a698f58f96586efd2602e, status: unconfirmed.&#xA;[ 25-01-23 | 22:16:54 ] hash: 49dffa000b75389d578e2857ba3493624cf009abe73a698f58f96586efd2602e, status: unconfirmed.&#xA;[ 25-01-23 | 22:17:04 ] hash: 49dffa000b75389d578e2857ba3493624cf009abe73a698f58f96586efd2602e, status: confirmed.&#xA;&#xA;Creating the transaction: [████████████████████████████████████████] 100% s&#xA;&#xA;/////////////////// [ BURN [ 49% of 3325 = 1617 ] | SUCCESS | #1 ] ///////////////////&#xA;&#xA;[ 25-01-23 | 22:17:14 ] hash: eca1685af2673bf39305937cfb93f69792effaff58f98ea9e4ee7a01b90869ef, status: pending.&#xA;[ 25-01-23 | 22:17:24 ] hash: eca1685af2673bf39305937cfb93f69792effaff58f98ea9e4ee7a01b90869ef, status: pending.&#xA;[ 25-01-23 | 22:17:34 ] hash: eca1685af2673bf39305937cfb93f69792effaff58f98ea9e4ee7a01b90869ef, status: unconfirmed.&#xA;[ 25-01-23 | 22:17:44 ] hash: eca1685af2673bf39305937cfb93f69792effaff58f98ea9e4ee7a01b90869ef, status: unconfirmed.&#xA;[ 25-01-23 | 22:17:54 ] hash: eca1685af2673bf39305937cfb93f69792effaff58f98ea9e4ee7a01b90869ef, status: confirmed.&#xA;&#xA;Creating the transaction: [████████████████████████████████████████] 100% s&#xA;&#xA;/////////////////// [ SEND [ 95% of 1708 = 1615 ] | SUCCESS | #1 ] ///////////////////&#xA;&#xA;[ 25-01-23 | 22:18:04 ] hash: b461acfb72a81ecfa7c791f853be8acf8a61c1dc2f50e5acc7136cadfccfa0e4, status: pending.&#xA;[ 25-01-23 | 22:18:14 ] hash: b461acfb72a81ecfa7c791f853be8acf8a61c1dc2f50e5acc7136cadfccfa0e4, status: pending.&#xA;[ 25-01-23 | 22:18:24 ] hash: b461acfb72a81ecfa7c791f853be8acf8a61c1dc2f50e5acc7136cadfccfa0e4, status: unconfirmed.&#xA;[ 25-01-23 | 22:18:34 ] hash: b461acfb72a81ecfa7c791f853be8acf8a61c1dc2f50e5acc7136cadfccfa0e4, status: unconfirmed.&#xA;[ 25-01-23 | 22:18:44 ] hash: b461acfb72a81ecfa7c791f853be8acf8a61c1dc2f50e5acc7136cadfccfa0e4, status: confirmed.&#xA;&#xA;assetId: c9b46622e3de4d46aaeda9610a98db8cbcc5e5596a19793f10eb41ae0824c712.&#xA;&#xA;balance of $IRON: 4.99999978.&#xA;balance of $cyberomanov: 838.00000000.&#xA;&#xA;with love by @cyberomanov.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Crontab&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Update crontab:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt update &amp;amp;&amp;amp; apt install cron --reinstall&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Open crontab editor:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;crontab -e&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Set one of rules or create your own. Use &lt;a href=&#34;https://crontab.guru/&#34;&gt;crontab.guru&lt;/a&gt;, if you like one-liners:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;With this settings script will be executed every 4 hours and all output will be logged into &lt;code&gt;/root/mbs.log&lt;/code&gt;. Faucet request will be executed without any email.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;10 0,4,8,12,16,20 * * * bash /root/mbs.sh &amp;gt;&amp;gt; /root/mbs.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;With this settings script will be executed every 4 hours and all output will be logged into &lt;code&gt;/root/mbs.log&lt;/code&gt;. Faucet request will be executed with an specified email.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;10 0,4,8,12,16,20 * * * bash /root/mbs.sh &#34;test@gmail.com&#34; &amp;gt;&amp;gt; /root/mbs.log&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>21y4d/nmapAutomator</title>
    <updated>2023-01-26T01:49:08Z</updated>
    <id>tag:github.com,2023-01-26:/21y4d/nmapAutomator</id>
    <link href="https://github.com/21y4d/nmapAutomator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A script that you can run in the background!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nmapAutomator&lt;/h1&gt; &#xA;&lt;p&gt;A script you can run in the background!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/3cMJIPr.gif&#34; alt=&#34;nmapAutomator&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Summary&lt;/h2&gt; &#xA;&lt;p&gt;The main goal for this script is to automate the process of enumeration &amp;amp; recon that is run every time, and instead focus our attention on real pentesting.&lt;/p&gt; &#xA;&lt;p&gt;This will ensure two things:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Automate nmap scans.&lt;/li&gt; &#xA; &lt;li&gt;Always have some recon running in the background.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Once initial ports are found &#39;&lt;em&gt;in 5-10 seconds&lt;/em&gt;&#39;, we can start manually looking into those ports, and let the rest run in the background with no interaction from our side whatsoever.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Scans&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Network&lt;/strong&gt; : Shows all live hosts in the host&#39;s network (~15 seconds)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Port&lt;/strong&gt; : Shows all open ports (~15 seconds)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Script&lt;/strong&gt; : Runs a script scan on found ports (~5 minutes)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Full&lt;/strong&gt; : Runs a full range port scan, then runs a thorough scan on new ports (~5-10 minutes)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;UDP&lt;/strong&gt; : Runs a UDP scan &#34;requires sudo&#34; (~5 minutes)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Vulns&lt;/strong&gt; : Runs CVE scan and nmap Vulns scan on all found ports (~5-15 minutes)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Recon&lt;/strong&gt; : Suggests recon commands, then prompts to automatically run them&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;All&lt;/strong&gt; : Runs all the scans (~20-30 minutes)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: This is a reconnaissance tool, and it does not perform any exploitation.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Automatic Recon&lt;/h3&gt; &#xA;&lt;p&gt;With the &lt;code&gt;recon&lt;/code&gt; option, nmapAutomator will automatically recommend and run the best recon tools for each found port.&lt;br&gt; If a recommended tool is missing from your machine, nmapAutomator will suggest how to install it.&lt;/p&gt; &#xA;&lt;h3&gt;Runs on any shell&lt;/h3&gt; &#xA;&lt;p&gt;nmapAutomator is 100% POSIX compatible, so it can run on any &lt;code&gt;sh&lt;/code&gt; shell, and on any unix-based machine (&lt;em&gt;even a 10 YO router!&lt;/em&gt;), which makes nmapAutomator ideal for lateral movement recon.&lt;/p&gt; &#xA;&lt;p&gt;If you want to run nmapAutomator on a remote machine, simply download a static nmap binary from &lt;a href=&#34;https://github.com/andrew-d/static-binaries/raw/master/binaries/linux/x86_64/nmap&#34;&gt;this link&lt;/a&gt;, or with &lt;a href=&#34;https://github.com/minos-org/minos-static&#34;&gt;static-get&lt;/a&gt;, and transfer it to the remote machine. You can then use &lt;code&gt;-s/--static-nmap&lt;/code&gt; to specify the path to the static nmap binary.&lt;/p&gt; &#xA;&lt;h3&gt;Remote Mode (Beta)&lt;/h3&gt; &#xA;&lt;p&gt;With the &lt;code&gt;-r/--remote&lt;/code&gt; flag nmapAutomator will run in Remote Mode, which is designed to run using POSIX shell commands only, without relying on any external tools.&lt;br&gt; Remote Mode is still under development. Only following scans currently work with &lt;code&gt;-r&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Network Scan (currently ping only)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Port Scan&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Full Scan&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; UDP Scan&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Recon Scan&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Output&lt;/h3&gt; &#xA;&lt;p&gt;nmapAutomator saves the output of each type of scan is saved into a separate file, under the output directory.&lt;br&gt; The entire script output is also saved, which you can view with &lt;code&gt;less -r outputDir/nmapAutomator_host_type.txt&lt;/code&gt;, or you can simply &lt;code&gt;cat&lt;/code&gt; it.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Requirements:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ffuf/ffuf&#34;&gt;ffuf&lt;/a&gt;, which we can install with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update&#xA;sudo apt install ffuf -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or &lt;a href=&#34;https://github.com/OJ/gobuster&#34;&gt;Gobuster&lt;/a&gt; &#39;&lt;em&gt;v3.0 or higher&lt;/em&gt;&#39;, which we can install with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update&#xA;sudo apt install gobuster -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other recon tools used within the script include:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/vulnersCom/nmap-vulners&#34;&gt;nmap Vulners&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/rbsec/sslscan&#34;&gt;sslscan&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/sullo/nikto&#34;&gt;nikto&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/rezasp/joomscan&#34;&gt;joomscan&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/wpscanteam/wpscan&#34;&gt;wpscan&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/droope/droopescan&#34;&gt;droopescan&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/ShawnDEvans/smbmap&#34;&gt;smbmap&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/portcullislabs/enum4linux&#34;&gt;enum4linux&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/darkoperator/dnsrecon&#34;&gt;dnsrecon&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/quentinhardy/odat&#34;&gt;odat&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/pentestmonkey/smtp-user-enum&#34;&gt;smtp-user-enum&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;snmp-check&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;snmpwalk&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ldapsearch&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Most of these should be installed by default in &lt;a href=&#34;https://www.parrotsec.org&#34;&gt;Parrot OS&lt;/a&gt; and &lt;a href=&#34;https://www.kali.org&#34;&gt;Kali Linux&lt;/a&gt;.&lt;br&gt; &lt;em&gt;If any recon recommended tools are found to be missing, they will be automatically omitted, and the user will be notified.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/21y4d/nmapAutomator.git&#xA;sudo ln -s $(pwd)/nmapAutomator/nmapAutomator.sh /usr/local/bin/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Usage:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;./nmapAutomator.sh -h&#xA;Usage: nmapAutomator.sh -H/--host &amp;lt;TARGET-IP&amp;gt; -t/--type &amp;lt;TYPE&amp;gt;&#xA;Optional: [-r/--remote &amp;lt;REMOTE MODE&amp;gt;] [-d/--dns &amp;lt;DNS SERVER&amp;gt;] [-o/--output &amp;lt;OUTPUT DIRECTORY&amp;gt;] [-s/--static-nmap &amp;lt;STATIC NMAP PATH&amp;gt;]&#xA;&#xA;Scan Types:&#xA;&#x9;Network : Shows all live hosts in the host&#39;s network (~15 seconds)&#xA;&#x9;Port    : Shows all open ports (~15 seconds)&#xA;&#x9;Script  : Runs a script scan on found ports (~5 minutes)&#xA;&#x9;Full    : Runs a full range port scan, then runs a thorough scan on new ports (~5-10 minutes)&#xA;&#x9;UDP     : Runs a UDP scan &#34;requires sudo&#34; (~5 minutes)&#xA;&#x9;Vulns   : Runs CVE scan and nmap Vulns scan on all found ports (~5-15 minutes)&#xA;&#x9;Recon   : Suggests recon commands, then prompts to automatically run them&#xA;&#x9;All     : Runs all the scans (~20-30 minutes)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example scans&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./nmapAutomator.sh --host 10.1.1.1 --type All&#xA;./nmapAutomator.sh -H 10.1.1.1 -t Basic&#xA;./nmapAutomator.sh -H academy.htb -t Recon -d 1.1.1.1&#xA;./nmapAutomator.sh -H 10.10.10.10 -t network -s ./nmap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Upcoming Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support URL/DNS - Thanks @KatsuragiCSL&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add extensions fuzzing for http recon&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add an nmap progress bar&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; List missing tools in recon&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add option to change output folder&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Save full script output to a file&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Improve performance and efficiency of the script - Thanks @caribpa&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Make nmapAutomater 100% POSIX compatible. - Massive Thanks to @caribpa&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add network scanning type, so nmapAutomator can discover live hosts on the network.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Enable usage of multiple scan types in one scan.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Enable scanning of multiple hosts in one scan.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Fully implement Remote Mode on all scans&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Feel free to send your pull requests :)&lt;/strong&gt;&lt;br&gt; &lt;em&gt;For any pull requests, please try to follow these &lt;a href=&#34;https://raw.githubusercontent.com/21y4d/nmapAutomator/master/CONTRIBUTING.md&#34;&gt;Contributing Guidelines&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
</feed>