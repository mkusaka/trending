<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-21T01:32:34Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ChrisTitusTech/mybash</title>
    <updated>2024-05-21T01:32:34Z</updated>
    <id>tag:github.com,2024-05-21:/ChrisTitusTech/mybash</id>
    <link href="https://github.com/ChrisTitusTech/mybash" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My Bash profile - Highly customized Starship Theme - Just imagine Powerlevel10k and Nord Theme had a baby.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Overview of ChrisTitusTech&#39;s &lt;code&gt;.bashrc&lt;/code&gt; Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;.bashrc&lt;/code&gt; file is a script that runs every time a new terminal session is started in Unix-like operating systems. It is used to configure the shell session, set up aliases, define functions, and more, making the terminal easier to use and more powerful. Below is a summary of the key sections and functionalities defined in the provided &lt;code&gt;.bashrc&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;Initial Setup and System Checks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Environment Checks&lt;/strong&gt;: The script checks if it is running in an interactive mode and sets up the environment accordingly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;System Utilities&lt;/strong&gt;: It checks for the presence of utilities like &lt;code&gt;fastfetch&lt;/code&gt;, &lt;code&gt;bash-completion&lt;/code&gt;, and system-specific configurations (&lt;code&gt;/etc/bashrc&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Aliases and Functions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Aliases&lt;/strong&gt;: Shortcuts for common commands are set up to enhance productivity. For example, &lt;code&gt;alias cp=&#39;cp -i&#39;&lt;/code&gt; makes the &lt;code&gt;cp&lt;/code&gt; command interactive, asking for confirmation before overwriting files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Functions&lt;/strong&gt;: Custom functions for complex operations like &lt;code&gt;extract()&lt;/code&gt; for extracting various archive types, and &lt;code&gt;cpp()&lt;/code&gt; for copying files with a progress bar.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Prompt Customization and History Management&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Prompt Command&lt;/strong&gt;: The &lt;code&gt;PROMPT_COMMAND&lt;/code&gt; variable is set to automatically save the command history after each command.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;History Control&lt;/strong&gt;: Settings to manage the size of the history file and how duplicates are handled.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;System-Specific Aliases and Settings&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Editor Settings&lt;/strong&gt;: Sets &lt;code&gt;nvim&lt;/code&gt; (NeoVim) as the default editor.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Conditional Aliases&lt;/strong&gt;: Depending on the system type (like Fedora), it sets specific aliases, e.g., replacing &lt;code&gt;cat&lt;/code&gt; with &lt;code&gt;bat&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Enhancements and Utilities&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Color and Formatting&lt;/strong&gt;: Enhancements for command output readability using colors and formatting for tools like &lt;code&gt;ls&lt;/code&gt;, &lt;code&gt;grep&lt;/code&gt;, and &lt;code&gt;man&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Navigation Shortcuts&lt;/strong&gt;: Aliases to simplify directory navigation, e.g., &lt;code&gt;alias ..=&#39;cd ..&#39;&lt;/code&gt; to go up one directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Safety Features&lt;/strong&gt;: Aliases for safer file operations, like using &lt;code&gt;trash&lt;/code&gt; instead of &lt;code&gt;rm&lt;/code&gt; for deleting files, to prevent accidental data loss.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extensive Zoxide support&lt;/strong&gt;: Easily navigate with &lt;code&gt;z&lt;/code&gt;, &lt;code&gt;zi&lt;/code&gt;, or pressing Ctrl+f to launch zi to see frequently used navigation directories.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Advanced Functions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;System Information&lt;/strong&gt;: Functions to display system information like &lt;code&gt;distribution()&lt;/code&gt; to identify the Linux distribution.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Networking Utilities&lt;/strong&gt;: Tools to check internal and external IP addresses.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Resource Monitoring&lt;/strong&gt;: Commands to monitor system resources like disk usage and open ports.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation and Configuration Helpers&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Auto-Install&lt;/strong&gt;: A function &lt;code&gt;install_bashrc_support()&lt;/code&gt; to automatically install necessary utilities based on the system type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Configuration Editors&lt;/strong&gt;: Functions to edit important configuration files directly, e.g., &lt;code&gt;apacheconfig()&lt;/code&gt; for Apache server configurations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Conclusion&lt;/h3&gt; &#xA;&lt;p&gt;This &lt;code&gt;.bashrc&lt;/code&gt; file is a comprehensive setup that not only enhances the shell experience with useful aliases and functions but also provides system-specific configurations and safety features to cater to different user needs and system types. It is designed to make the terminal more user-friendly, efficient, and powerful for an average user.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ggeorgovassilis/linuxscripts</title>
    <updated>2024-05-21T01:32:34Z</updated>
    <id>tag:github.com,2024-05-21:/ggeorgovassilis/linuxscripts</id>
    <link href="https://github.com/ggeorgovassilis/linuxscripts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Script collection for linux&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;linuxscripts&lt;/h1&gt; &#xA;&lt;p&gt;Script collection for linux&lt;/p&gt; &#xA;&lt;h2&gt;powersave&lt;/h2&gt; &#xA;&lt;p&gt;Enables some powersaving on the Asus N56VB and Ubuntu 12.04. Should work on other computers and Linuxes as well. In order to enable power saving run the script with an argument of either light, on or extra like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;powersave.sh light&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The script contains self-explanatory functions grouped under a big CASE that enable various power saving features. Depending on your needs, you can re-arrange these functions to different cases. For example, I work mostly in a wireless setup, so I moved the &#34;disable_ethernet&#34; function to the &#34;light&#34; case. Also, when on the road, I don&#39;t do heavy processing, so I moved &#34;make_cpus_sleep&#34; to the &#34;on&#34; case - however my applications need a lot of CPU at work, so I&#39;m not running the &#34;make_cpus_sleep&#34; function in the &#34;light&#34; setting.&lt;/p&gt; &#xA;&lt;h2&gt;powersave-acer-nitro5.sh&lt;/h2&gt; &#xA;&lt;p&gt;Script for reducing power consumption of the Acer Nitro 5. Has four options low/medium/full/reset. The frist three do what they say, eg. &#34;low&#34; disables most CPU cores, pins frequency at the lowest value, reduces graphics card frequency etc. &#34;full&#34; undoes all power saving measures. &#34;reset&#34; is like &#34;low&#34;, but first resets power saving settings - that&#39;s needed mostly after resuming from standby.&lt;/p&gt; &#xA;&lt;h2&gt;brightness&lt;/h2&gt; &#xA;&lt;p&gt;Allows for finer brightness control for the Asus N56VB and Ubuntu 12.04. You probably need to adjust the &#34;B&#34; variable in the script.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brightness.sh down&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;usb-headset&lt;/h2&gt; &#xA;&lt;p&gt;Handles some automatic volume adjustment (like enabling the headset and muting other equipment). You probably will have to adjust the device names.&lt;/p&gt; &#xA;&lt;h2&gt;wifi-picker&lt;/h2&gt; &#xA;&lt;p&gt;Useful in a topology with a WLAN and multiple access points, will pick the AP with the strongest signal and connect. Must be run as root because iwlist won&#39;t return a list of SSIDs otherwise.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;wifi-picker.sh &amp;lt;interface&amp;gt; &amp;lt;SSID&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo wifi-picker.sh wlan0 home_wifi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: You might need to restart some applications or even services after running the script, e.g. Firefox won&#39;t be able to connect to Google or Facebook.&lt;/p&gt; &#xA;&lt;h2&gt;ip6-firewall&lt;/h2&gt; &#xA;&lt;p&gt;Example script that shows how to harden an ip6 enabled web server. Closes down everything other than port 22 (ssh), 80 (http), 6081 (varnish) and ICMP and redirects traffic from port 80 to 6081.&lt;/p&gt; &#xA;&lt;h2&gt;some extra keyboard mappings&lt;/h2&gt; &#xA;&lt;p&gt;Example script from &lt;a href=&#34;http://larsmichelsen.com/open-source/german-umlauts-on-us-keyboard-in-x-ubuntu-10-04/&#34;&gt;here&lt;/a&gt; that adds some special characters for European languages to an US keyboard mapping.&lt;/p&gt; &#xA;&lt;h2&gt;control the tp-link hs100, hs110 and hs200 wlan smart plugs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ggeorgovassilis/linuxscripts/tree/master/tp-link-hs100-smartplug&#34;&gt;See repository&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;tools for proxying a nordvpn socks5 proxy&lt;/h2&gt; &#xA;&lt;p&gt;Runs haproxy as a proxy to nordvpn. &lt;a href=&#34;https://github.com/ggeorgovassilis/linuxscripts/raw/master/nordvpn-proxy/README.md&#34;&gt;See repository&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Snoop around the nordvpn-proxy directory for other tools.&lt;/p&gt; &#xA;&lt;h2&gt;checksum-directory&lt;/h2&gt; &#xA;&lt;p&gt;Compute the checksum of a directory and contents. Useful to make sure a location hasn&#39;t been corrupted. Must be invoked from directory to check.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd /path/to/check&#xA;/path/to/script/compute-checksum.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;compute-checksum.sh&#xA;&#xA;## qrcodes&#xA;Script that converts a file to a series of QR codes and assembles QR codes back together into file. Doesn&#39;t work very well on big files :-(&#xA;&#xA;Convert &#34;file&#34; into a series of QR codes stored in the current directory as PNG images:&#xA;&#xA;```sh&#xA;make-qr.sh sourcefile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Convert QR codes back into file. Takes all PNG files named part.somenumber.png in the current directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;restore-qr.sh outputfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;reset-pci_device&lt;/h2&gt; &#xA;&lt;p&gt;Reset a PCI device (like in my case, the Atheros wifi module) when the driver isn&#39;t responding and reloads the driver&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;reset-pci-device.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;acer-nitro5-powerbutton-workaround.sh&lt;/h2&gt; &#xA;&lt;p&gt;After an update in October 2022, the power button doesn&#39;t work anymore in Ubuntu 20.04. This script works around the issue by tailing syslog. I added it to the startup application list which runs scripts after the user logs in to the desktop.&lt;/p&gt; &#xA;&lt;h2&gt;touchpad-volume-control.sh&lt;/h2&gt; &#xA;&lt;p&gt;Multi-touch volume control. Allows sound volume change through touchpad gestures. Use a three-finger touch gesture to increase volume by scrolling up, decrease volume by scrolling down. You probably need to edit the script and set the touchpad event device in the &#34;touchpad_device&#34; variable. You also need to make that device readable for your user. The script needs to be run as the current user, not root.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;touchpad-volume-control.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;clamav&lt;/h2&gt; &#xA;&lt;p&gt;Runs clamav in a docker container. See &lt;a href=&#34;https://github.com/ggeorgovassilis/linuxscripts/tree/master/clamav&#34;&gt;clamav&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;toggle-keyboard-layout.sh&lt;/h2&gt; &#xA;&lt;p&gt;Alt + Shift implementation that toggles between two keyboard layouts. You need to edit the script for keyboard layouts.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;toggle-keyboard-layout.sh&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>