<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-20T01:43:10Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>RayWangQvQ/naiveproxy-docker</title>
    <updated>2023-01-20T01:43:10Z</updated>
    <id>tag:github.com,2023-01-20:/RayWangQvQ/naiveproxy-docker</id>
    <link href="https://github.com/RayWangQvQ/naiveproxy-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;naiveproxy in docker&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;naiveproxy-docker&lt;/h1&gt; &#xA;&lt;p&gt;基于docker的naiveproxy。&lt;/p&gt; &#xA;&lt;!-- TOC depthFrom:2 --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RayWangQvQ/naiveproxy-docker/main/#1-%E8%AF%B4%E6%98%8E&#34;&gt;1. 说明&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RayWangQvQ/naiveproxy-docker/main/#2-%E9%A2%84%E5%A4%87%E5%B7%A5%E4%BD%9C&#34;&gt;2. 预备工作&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RayWangQvQ/naiveproxy-docker/main/#3-%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E7%AB%AF&#34;&gt;3. 部署服务端&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RayWangQvQ/naiveproxy-docker/main/#4-%E5%AE%A2%E6%88%B7%E7%AB%AF&#34;&gt;4. 客户端&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RayWangQvQ/naiveproxy-docker/main/#5-%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE&#34;&gt;5. 自定义配置&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RayWangQvQ/naiveproxy-docker/main/#6-%E7%89%88%E6%9C%AC%E5%8F%98%E6%9B%B4&#34;&gt;6. 版本变更&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RayWangQvQ/naiveproxy-docker/main/#7-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98&#34;&gt;7. 常见问题&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RayWangQvQ/naiveproxy-docker/main/#71-%E7%AB%AF%E5%8F%A3%E5%8F%AF%E4%BB%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%97&#34;&gt;7.1. 端口可以自定义吗&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /TOC --&gt; &#xA;&lt;h2&gt;1. 说明&lt;/h2&gt; &#xA;&lt;p&gt;镜像使用官方代码生成，利用&lt;code&gt;GitHub Actions&lt;/code&gt;构建并上传到&lt;code&gt;DockerHub&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;p&gt;Dockerfile：&lt;a href=&#34;https://raw.githubusercontent.com/RayWangQvQ/naiveproxy-docker/main/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;DockerHub: &lt;a href=&#34;https://hub.docker.com/repository/docker/zai7lou/naiveproxy-docker/general&#34;&gt;DockerHub&lt;/a&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;展开查看技术细节，不关心可以跳过&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;关于镜像是怎么打的&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;镜像先是基于go的官方镜像，安装xcaddy，然后使用xcaddy编译naiveproxy插件版的caddy。然后将caddy拷贝到debian镜像中，最后发布这个debian镜像。&lt;/p&gt; &#xA; &lt;p&gt;这样打出来的镜像只有65M，如果不使用docker而是直接在机器上装（go + xcaddy），要1G+。&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;关于naiveproxy到底是什么&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;naiveproxy有客户端和服务端，这里讲的是我们部署的服务端。&lt;/p&gt; &#xA; &lt;p&gt;naiveproxy服务端其实就是naiveproxy插件版caddy。&lt;/p&gt; &#xA; &lt;p&gt;naiveproxy插件版caddy指的是&lt;a href=&#34;https://github.com/klzgrad/forwardproxy&#34;&gt;https://github.com/klzgrad/forwardproxy&lt;/a&gt;。作者通过fork原版caddy，自己实现了&lt;code&gt;forward_proxy&lt;/code&gt;功能，这个就是naiveproxy代理了。&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;关于伪装&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;code&gt;forward_proxy&lt;/code&gt;里有个&lt;code&gt;probe_resistance&lt;/code&gt;指令，我们请求会先进&lt;code&gt;forward_proxy&lt;/code&gt;，如果用户名密码正确，则会正常实现naiveproxy代理功能；但如果认证失败，&lt;code&gt;probe_resistance&lt;/code&gt;表明不会有异常产生，而是将当前请求继续往下仍，也就是扔到我们的伪装站点（可以是反代的站点也可以是本地的文件服务）。&lt;/p&gt; &#xA; &lt;p&gt;所以就实现了我们客户端（能提供正确的用户名和密码）去访问就是naiveproxy代理，但其他人用户浏览器访问（或认证不通过），看到的就是一个正常站点。&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;2. 预备工作&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;一个域名&lt;/li&gt; &#xA; &lt;li&gt;域名已DNS到当前服务器ip&lt;/li&gt; &#xA; &lt;li&gt;服务器已安装好docker环境&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;P.S.不需要自己生成https证书，caddy会自动生成。&lt;/p&gt; &#xA;&lt;h2&gt;3. 部署服务端&lt;/h2&gt; &#xA;&lt;p&gt;一键安装脚本：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# create a dir&#xA;mkdir -p ./naive &amp;amp;&amp;amp; cd ./naive&#xA;&#xA;# install&#xA;bash &amp;lt;(curl -sSL https://raw.githubusercontent.com/RayWangQvQ/naiveproxy-docker/main/install.sh)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;当不指定参数时，该脚本是互动式的，运行后会提示输入相关配置信息，输入后回车即可。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RayWangQvQ/naiveproxy-docker/main/docs/imgs/install-interaction.png&#34; alt=&#34;install-interaction&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RayWangQvQ/naiveproxy-docker/main/docs/imgs/insatll-interaction-re.png&#34; alt=&#34;install-interaction-re&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;当然，你也可以像下面那样，直接将参数拼接好后立即执行：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# create a dir&#xA;mkdir -p ./naive &amp;amp;&amp;amp; cd ./naive &#xA;&#xA;# install&#xA;curl -sSL -f -o ./install.sh https://raw.githubusercontent.com/RayWangQvQ/naiveproxy-docker/main/install.sh &amp;amp;&amp;amp; chmod +x ./install.sh &amp;amp;&amp;amp; ./install.sh -t demo.test.tk -m zhangsan@qq.com -u zhangsan -p 1qaz@wsx --verbose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RayWangQvQ/naiveproxy-docker/main/docs/imgs/install-silence.png&#34; alt=&#34;install-silence&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;参数说明：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-t&lt;/code&gt;：host，你的域名，如&lt;code&gt;demo.test.tk&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-o&lt;/code&gt;: cert-mode，证书模式，1为Caddy自动颁发，2为自己指定现有证书&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-c&lt;/code&gt;: cert-file，证书文件绝对路径，如&lt;code&gt;/certs/test2.zai7lou.ml.crt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-k&lt;/code&gt;, cert-key-file，证书key文件绝对路径，如&lt;code&gt;/certs/test2.zai7lou.ml.key&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-m&lt;/code&gt;：mail，你的邮箱，用于自动颁发证书，如&lt;code&gt;zhangsan@qq.com&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-w&lt;/code&gt;: http-port，http端口，默认80&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-s&lt;/code&gt;: https-port，https端口，默认443&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-u&lt;/code&gt;：user，proxy的用户名&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-p&lt;/code&gt;：pwd，proxy的密码&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-f&lt;/code&gt;：fakeHost，伪装域名，默认&lt;code&gt;https://demo.cloudreve.org&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--verbose&lt;/code&gt;，输出详细日志&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-h&lt;/code&gt;：help，查看参数信息&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;容器run成功后，可以通过以下语句查看容器运行日志：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker logs -f naiveproxy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Ctrl + C&lt;/code&gt; 可以退出日志追踪。&lt;/p&gt; &#xA;&lt;p&gt;如果是第一次运行且选择自动颁发证书模式，颁发证书时日志可能会先ERROR飘红，别慌，等一会。&lt;/p&gt; &#xA;&lt;p&gt;如果最后日志出现&lt;code&gt;certificate obtained successfully&lt;/code&gt;字样，就是颁发成功了，可以去部署客户端了。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RayWangQvQ/naiveproxy-docker/main/docs/imgs/cert-suc.png&#34; alt=&#34;success&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;如果颁发证书一直不成功，请检查80端口是否被占用。&lt;/p&gt; &#xA;&lt;p&gt;部署成功后，浏览器访问域名，会展示伪装站点：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RayWangQvQ/naiveproxy-docker/main/docs/imgs/web.png&#34; alt=&#34;web&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;4. 客户端&lt;/h2&gt; &#xA;&lt;p&gt;很多教程，就不说了。&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;平台&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;客户端&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Win&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;V2RayN/Nekoray&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Linux&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Nekoray&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;MacOS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Nekoray&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Android&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;SagerNet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;iOS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Shadowrocket&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;5. 自定义配置&lt;/h2&gt; &#xA;&lt;p&gt;Caddy的配置文件&lt;code&gt;Caddyfile&lt;/code&gt;已被挂载到宿主机的&lt;a href=&#34;https://raw.githubusercontent.com/RayWangQvQ/naiveproxy-docker/main/data/Caddyfile&#34;&gt;./data/Caddyfile&lt;/a&gt;，想要自定义配置，比如：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;添加proxy多用户&lt;/li&gt; &#xA; &lt;li&gt;修改proxy的用户名和密码&lt;/li&gt; &#xA; &lt;li&gt;更改端口&lt;/li&gt; &#xA; &lt;li&gt;修改伪装站点的host&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;等等，都可以直接在宿主机修改该文件：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;vim ./data/Caddyfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;修改完成并保存成功后，让Caddy热加载配置就可以了：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker exec -it naiveproxy /app/caddy reload --config /data/Caddyfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;举个栗子，多用户可以直接添加&lt;code&gt;forward_proxy&lt;/code&gt;，像这样：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:443, demo.test.tk #你的域名&#xA;tls zhangsan@qq.com #你的邮箱&#xA;route {&#xA;        forward_proxy {&#xA;                basic_auth zhangsan 1qaz@wsx #用户名和密码&#xA;                hide_ip&#xA;                hide_via&#xA;                probe_resistance&#xA;        }&#xA;        forward_proxy {&#xA;                basic_auth lisi 1234 #用户名和密码&#xA;                hide_ip&#xA;                hide_via&#xA;                probe_resistance&#xA;        }&#xA;        reverse_proxy you.want.com {&#xA;                #伪装网址&#xA;                header_up Host {upstream_hostport}&#xA;        }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;详细的配置语法可以参考Caddy的官方文档：&lt;a href=&#34;https://caddyserver.com/docs/&#34;&gt;Caddy Doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;P.S.我发现naiveproxy插件版地caddy，Caddyfile里不支持&lt;code&gt;demo.test.tk:443&lt;/code&gt;的格式，必须像上面那样端口在域名前面，否则会报错。应该是适配有问题，需要注意下。&lt;/p&gt; &#xA;&lt;h2&gt;6. 版本变更&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RayWangQvQ/naiveproxy-docker/main/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;7. 常见问题&lt;/h2&gt; &#xA;&lt;h3&gt;7.1. 端口可以自定义吗&lt;/h3&gt; &#xA;&lt;p&gt;如果使用现有证书，可以自定义；如果要Caddy颁发，必须占有80端口。&lt;/p&gt; &#xA;&lt;p&gt;Caddy默认会占用80和443端口，如果选择让Caddy自动颁发并管理证书，当前官方镜像并不支持更改80端口，也就是一定需要占用80端口。&lt;/p&gt; &#xA;&lt;p&gt;但当不需要Caddy颁发证书时（选择使用现有证书），则可以指定其他端口代替80端口。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>eficode-academy/git-katas</title>
    <updated>2023-01-20T01:43:10Z</updated>
    <id>tag:github.com,2023-01-20:/eficode-academy/git-katas</id>
    <link href="https://github.com/eficode-academy/git-katas" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A set of exercises for deliberate Git Practice&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; &#xA;&lt;h2&gt;maintainer: JKrag&lt;/h2&gt; &#xA;&lt;h1&gt;Git Katas&lt;/h1&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;h3&gt;In the Cloud&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://console.cloud.google.com/cloudshell/editor?cloudshell_git_repo=https://github.com/praqma-training/git-katas.git&#34;&gt;&lt;img src=&#34;https://gstatic.com/cloudssh/images/open-btn.svg?sanitize=true&#34; alt=&#34;Open in Cloud Shell&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;On Your Local Machine&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/eficode-academy/git-katas/master/images/quickstart.gif&#34; alt=&#34;Quick Start&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone this repository&lt;/li&gt; &#xA; &lt;li&gt;Go into the folder you want to solve an exercise in&lt;/li&gt; &#xA; &lt;li&gt;Run the &lt;code&gt;setup.sh&lt;/code&gt; script&lt;/li&gt; &#xA; &lt;li&gt;Consult the README.md in that folder to get a description of the exercise&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Purpose of Git Katas&lt;/h2&gt; &#xA;&lt;p&gt;This repository is a collection of Git exercises. The concept is stolen without shame from &lt;a href=&#34;http://blog.schauderhaft.de/gitkata/&#34;&gt;Schauderhaft.de&lt;/a&gt;. Unfortunately, they have not maintained the system - and we need more good Git exercises.&lt;/p&gt; &#xA;&lt;p&gt;The exercises are designed for use when we are teaching Git courses. You should be able to use them as self-contained exercises that will allow you to keep your Git skills sharp.&lt;/p&gt; &#xA;&lt;p&gt;Exercises starting with &lt;em&gt;basic&lt;/em&gt; are entry-level - other exercises vary greatly in difficulty.&lt;/p&gt; &#xA;&lt;p&gt;To get an overview of the exercises in here look in &lt;a href=&#34;https://raw.githubusercontent.com/eficode-academy/git-katas/master/Overview.md&#34;&gt;Overview.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Feel free to use these exercises, that&#39;s why they&#39;re public!&lt;/p&gt; &#xA;&lt;h2&gt;Suggested Learning Path&lt;/h2&gt; &#xA;&lt;p&gt;If you are coming to this repository for some basic Git knowledge, we recommend going through the exercises in the following order. This is the order that Jan Krag at Praqma teaches Git and might change over time. There are more exercises than this, but these should take you through everything you need to be able to use Git effectively in your day to day life.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eficode-academy/git-katas/master/basic-commits/README.md&#34;&gt;Basic Commits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eficode-academy/git-katas/master/basic-staging/README.md&#34;&gt;Basic Staging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eficode-academy/git-katas/master/investigation/README.md&#34;&gt;Investigation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eficode-academy/git-katas/master/basic-branching/README.md&#34;&gt;Basic Branching&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eficode-academy/git-katas/master/ff-merge/README.md&#34;&gt;Fast Forward Merge&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eficode-academy/git-katas/master/3-way-merge/README.md&#34;&gt;3 way Merge&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eficode-academy/git-katas/master/merge-mergesort/README.md&#34;&gt;Merge Mergesort&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eficode-academy/git-katas/master/rebase-branch/README.md&#34;&gt;Rebase Branch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eficode-academy/git-katas/master/basic-revert/README.md&#34;&gt;Basic Revert&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eficode-academy/git-katas/master/reset/README.md&#34;&gt;Reset&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eficode-academy/git-katas/master/basic-cleaning/README.md&#34;&gt;Basic Cleaning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eficode-academy/git-katas/master/amend/README.md&#34;&gt;Amend&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eficode-academy/git-katas/master/reorder-the-history/README.md&#34;&gt;Reorder the History&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eficode-academy/git-katas/master/advanced-rebase-interactive/README.md&#34;&gt;Advanced Rebase Interactive&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eficode-academy/git-katas/master/rebase-interactive-autosquash/README.md&#34;&gt;Rebase using autosquash&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eficode-academy/git-katas/master/basic-stashing/README.md&#34;&gt;Basic Stashing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/eficode-academy/git-katas/master/Overview.md&#34;&gt;Overview.md&lt;/a&gt; for a more complete list and suggested order.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you miss exercises or find errors in any of them, feel free to improve them and make a pull request.&lt;/p&gt; &#xA;&lt;p&gt;You can also make an issue so we notice an opportunity to improve!&lt;/p&gt; &#xA;&lt;p&gt;Thank you!&lt;/p&gt; &#xA;&lt;h2&gt;Cheatsheet&lt;/h2&gt; &#xA;&lt;p&gt;A collection of useful commands to use throughout the exercises:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Initializing an empty git repository.&#xA;git init            # Initialize an empty git repository under current directory.&#xA;&#xA;# Cloning a repository&#xA;git clone https://github.com/praqma-training/git-katas.git      # Clone this repository to your current working directory&#xA;&#xA;# Git (user and repo level) configurations&#xA;git config --local user.name &#34;Repo-level Username&#34;          # For setting a local git repo level user name.&#xA;git config --local user.email &#34;Repo-level.Email@Example.com&#34; # For setting a local git repo level user email.&#xA;                                                            # --global -&amp;gt; User level git config stored in &amp;lt;user-home&amp;gt;/.gitconfig for e.g. ~/.gitconfig&#xA;                                                            # --local -&amp;gt; repo level config stored in repo&#39;s main dir under .git/config&#xA;&#xA;&#xA;# See local changes&#xA;git status                  # Show the working tree status&#xA;git diff                    # Show changes current working directory (not yet staged)&#xA;git diff --cached           # Show changes currently staged for commit&#xA;&#xA;# Add files to staging (before a commit)&#xA;git add myfile.txt          # Add myfile.txt to stage&#xA;git add .                   # Add entire working directory to stage&#xA;&#xA;# Make a commit&#xA;git commit                              # Make a new commit with the changes in your staging area. This will open an editor for a commit message.&#xA;git commit -m &#34;I love documentation&#34;    # Make a new commit with a commit message from the command line&#xA;git commit -a                           # Make a new commit and automatically &#34;add&#34; changes from all known files&#xA;git commit -am &#34;I still do!&#34;            # A combination of the above&#xA;git commit --amend                      # Re-do the commit message of the previous commit (don&#39;t do this after pushing!)&#xA;                                        #   We _never_ change &#34;public history&#34;&#xA;git reset &amp;lt;file&amp;gt;                        # Unstage a staged file leaving in working directory without losing any changes.&#xA;git reset --soft [commit_hash]          # resets the current branch to &amp;lt;commit&amp;gt;. Does not touch the staging area or the working tree at all.&#xA;                                        # --hard mode would discard all changes.&#xA;&#xA;# Configuring a different editor&#xA;## Avoid Vim but stay in terminal:&#xA;- `git config --global core.editor nano`&#xA;&#xA;## For Windows:&#xA;- Use Notepad:&#xA;`git config --global core.editor notepad`&#xA;&#xA;- or for instance Notepad++:&#xA;`git config --global core.editor &#34;&#39;C:/Program Files/Notepad++/notepad++.exe&#39; -multiInst -notabbar -nosession -noPlugin&#34;`&#xA;&#xA;&#xA;# See history&#xA;git log             # Show commit logs&#xA;git log --oneline   # Formats commits to a single line (shorthand for --pretty=oneline  --abbrev-commit )&#xA;git log --graph     # Show a graph commits and branches&#xA;git log --pretty=fuller     # To see commit log details with author and committer details, if any different.&#xA;git log --follow &amp;lt;file&amp;gt;     # List the history of a file beyond renames&#xA;git log branch2..branch1    # Show commits reachable from branch1 but not from branch2&#xA;&#xA;# Deferring&#xA;git stash                               # Stash (store temporarily) changes in working branch and enable checkingout a new branch&#xA;git stash list                          # List stored stashes.&#xA;git stash apply &amp;lt;stash&amp;gt;                 # Apply given &amp;lt;stash&amp;gt;, or if none given the latest from stash list.&#xA;&#xA;&#xA;# Working with Branches&#xA;git branch my-branch       # Create a new branch called my-branch&#xA;git switch my-branch     # Switch to a different branch to work on it&#xA;git switch -c my-branch  # Create a new branch called my-branch AND switch to it&#xA;git branch -d my-branch    # Delete branch my-branch that has been merged with master&#xA;git branch -D my-branch    # Forcefully delete a branch my-branch that hasn&#39;t been merged to master&#xA;&#xA;# Merging&#xA;git merge master         # Merge the master branch into your currently checked out branch.&#xA;git rebase master        # Rebase current branch on top of master branch&#xA;&#xA;# Working with Remotes&#xA;git remote              # Show your current remotes&#xA;git remote -v           # Show your current remotes and their URLs&#xA;git push                # Publish your commits to the upstream master of your currently checked out branch&#xA;git push -u origin my-branch  # Push newly created branch to remote repo setting up to track remote branch from origin.&#xA;                              # No need to specify remote branch name, for e.g., when doing a &#39;git pull&#39; on that branch.&#xA;git pull                # Pull changes from the remote to your currently checked out branch&#xA;&#xA;# Re/moving files under version control&#xA;git rm &amp;lt;path/to/the/file&amp;gt;                 # remove file and stage the change to be committed.&#xA;git mv &amp;lt;source/file&amp;gt; &amp;lt;destination/file&amp;gt;   # move/rename file and stage the change to be committed.&#xA;&#xA;# Aliases - it&#39;s possible to make aliases of frequently used commands&#xA;#   This is often done to make a command shorter, or to add default flags&#xA;&#xA;# Adding a shorthand &#34;sw&#34; for &#34;switch&#34;&#xA;git config --global alias.sw &#34;switch&#34;&#xA;# Usage:&#xA;git sw master     # Does a &#34;git switch master&#34;&#xA;&#xA;## Logging&#xA;git log --graph --oneline --all # Show a nice graph of the previous commits&#xA;## Adding an alias called &#34;lol&#34; (log oneline..) that shows the above&#xA;git config --global alias.lol &#34;log --graph --oneline --all&#34;&#xA;## Using the alias&#xA;git lol     # Does a &#34;git log --graph --oneline --all&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;There is a very small test that you can run in powershell or bash. It is contained in the scripts &lt;code&gt;test.sh&lt;/code&gt; and &lt;code&gt;test.ps1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Cleanup&lt;/h3&gt; &#xA;&lt;p&gt;You can remove testing artifacts, &lt;code&gt;exercise&lt;/code&gt; directories, with the git clean command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clean -ffdX&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>hashicorp/consul-helm</title>
    <updated>2023-01-20T01:43:10Z</updated>
    <id>tag:github.com,2023-01-20:/hashicorp/consul-helm</id>
    <link href="https://github.com/hashicorp/consul-helm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Helm chart to install Consul and other associated components.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Consul Helm Chart&lt;/h1&gt; &#xA;&lt;p&gt;⚠️ The Consul Helm chart has been moved to &lt;a href=&#34;https://github.com/hashicorp/consul-k8s&#34;&gt;&lt;code&gt;hashicorp/consul-k8s&lt;/code&gt;&lt;/a&gt; under the &lt;a href=&#34;https://github.com/hashicorp/consul-k8s/tree/main/charts/consul&#34;&gt;&lt;code&gt;charts/consul&lt;/code&gt;&lt;/a&gt; directory. ⚠️&lt;/p&gt; &#xA;&lt;p&gt;Please direct all pull requests and issues to that repository.&lt;/p&gt; &#xA;&lt;h3&gt;Why We Moved consul-helm&lt;/h3&gt; &#xA;&lt;p&gt;For users, the separate repositories lead to difficulty on new releases and confusion surrounding versioning. Most of the time new releases that include changes to &lt;code&gt;consul-k8s&lt;/code&gt; also change &lt;code&gt;consul-helm&lt;/code&gt;. But separate repositories mean separate GitHub PR&#39;s and added confusion in opening new Github Issues. In addition, we maintain separate versions of the &lt;code&gt;consul-k8s&lt;/code&gt; binary and the Consul Helm chart, which in most cases are more tightly coupled together with dependencies. This versioning strategy has also led to confusion as to which Helm charts are compatible with which versions of &lt;code&gt;consul-k8s&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>