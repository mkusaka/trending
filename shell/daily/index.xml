<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-08T01:55:46Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rgcr/m-cli</title>
    <updated>2022-07-08T01:55:46Z</updated>
    <id>tag:github.com,2022-07-08:/rgcr/m-cli</id>
    <link href="https://github.com/rgcr/m-cli" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ï£¿ Swiss Army Knife for macOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ï£¿ m-cli&lt;/h1&gt; &#xA;&lt;p&gt;&lt;span&gt;ðŸ’¥&lt;/span&gt; &lt;strong&gt;Swiss Army Knife for macOS !&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rgcr/m-cli/master/#overview&#34;&gt;Overview&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rgcr/m-cli/master/#install&#34;&gt;Install&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rgcr/m-cli/master/#uninstall&#34;&gt;Uninstall&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rgcr/m-cli/master/#how-to-use&#34;&gt;How To Use&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rgcr/m-cli/master/#all-commands&#34;&gt;All Commands&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rgcr/m-cli/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;m-cli&lt;/strong&gt; is a macOS command line tool that lets you interact with utilities and applications entirely in &lt;strong&gt;Terminal&lt;/strong&gt;. It differs from other macOS command line tools in the following ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can easily manage administrative tasks&lt;/li&gt; &#xA; &lt;li&gt;It doesn&#39;t install 3rd party tools since it doesn&#39;t have dependencies&lt;/li&gt; &#xA; &lt;li&gt;Installation is easy and doesn&#39;t require intervention&lt;/li&gt; &#xA; &lt;li&gt;It only uses macOS commands&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;p&gt;You can install &lt;strong&gt;m-cli&lt;/strong&gt; using &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;, or you can manually install it.&lt;/p&gt; &#xA;&lt;h3&gt;Homebrew install&lt;/h3&gt; &#xA;&lt;p&gt;If you have Homebrew installed, run:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;brew install m-cli&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Manual install&lt;/h3&gt; &#xA;&lt;p&gt;If you want to manually install &lt;strong&gt;m-cli&lt;/strong&gt;, run:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;curl -fsSL https://raw.githubusercontent.com/rgcr/m-cli/master/install.sh | sudo sh&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also install it to a different path, shown below:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;INSTALL_DIR=$HOME/.m-cli sh &amp;lt;(curl -fsSL https://raw.githubusercontent.com/rgcr/m-cli/master/install.sh)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Certain plugins, such as that for the &#34;gatekeeper&#34; command, will not work if &lt;code&gt;m-cli&lt;/code&gt; is installed with standard user privilege. Certain plugins, such as that for the &#34;trash&#34; command, will not work until and unless your terminal emulator is granted Full Disk Access (look under &#34;Security &amp;amp; Privacy&#34; in System Preferences).&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Uninstall&lt;/h1&gt; &#xA;&lt;p&gt;To uninstall &lt;strong&gt;m-cli&lt;/strong&gt; from your system, run:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;m --uninstall&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;How To Use&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;m-cli&lt;/strong&gt; commands are executed using the following steps:&lt;/p&gt; &#xA;&lt;h4&gt;1. Run &lt;code&gt;m&lt;/code&gt;to display all of the commands (utilities) available in &lt;strong&gt;m-cli&lt;/strong&gt;.&lt;/h4&gt; &#xA;&lt;h4&gt;2. Run &lt;code&gt;m &amp;lt;command&amp;gt;&lt;/code&gt; to display the options available for this command.&lt;/h4&gt; &#xA;&lt;h4&gt;3. Run &lt;code&gt;m &amp;lt;command&amp;gt; &amp;lt;option&amp;gt;&lt;/code&gt; to execute an option for this command.&lt;/h4&gt; &#xA;&lt;p&gt;A diagram of this structure is shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;m&#xA;|___itunes&#xA;|     |___status&#xA;|     |___play&#xA;|     |___pause&#xA;|     |&#xA;|     ...&#xA;|&#xA;|___disk &#xA;      |___ls&#xA;      |___list&#xA;      |___fs&#xA;      ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, running &lt;code&gt;m itunes&lt;/code&gt; will display the options available for iTunes, as shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    usage: m itunes [ status | play | pause | next | prev | mute | unmute | vol up | vol down | vol #| stop | quit | help ]&#xA;&#xA;    Examples:&#xA;      m itunes status       # Show status&#xA;      m itunes play         # Play track&#xA;      m itunes pause        # Pause track&#xA;      m itunes next         # Play next track&#xA;      m itunes prev         # Play previous track&#xA;      m itunes mute         # Mute iTunes&#xA;      m itunes unmute       # Unmute iTunes&#xA;      m itunes vol up       # Volume Up&#xA;      m itunes vol down     # Volume Down&#xA;      m itunes vol #        # Set volume level&#xA;      m itunes stop         # Stop track&#xA;      m itunes quit         # Quit iTunes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example, running &lt;code&gt;m itunes play&lt;/code&gt; will play the current selected track in your iTunes music library.&lt;/p&gt; &#xA;&lt;h1&gt;All Commands&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;m-cli&lt;/strong&gt; currently supports the following commands:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;help&lt;/code&gt;&lt;br&gt; &lt;code&gt;airdrop&lt;/code&gt;&lt;br&gt; &lt;code&gt;appearance&lt;/code&gt;&lt;br&gt; &lt;code&gt;audio&lt;/code&gt;&lt;br&gt; &lt;code&gt;battery&lt;/code&gt;&lt;br&gt; &lt;code&gt;bluetooth&lt;/code&gt;&lt;br&gt; &lt;code&gt;dir&lt;/code&gt;&lt;br&gt; &lt;code&gt;disk&lt;/code&gt;&lt;br&gt; &lt;code&gt;display&lt;/code&gt;&lt;br&gt; &lt;code&gt;dns&lt;/code&gt;&lt;br&gt; &lt;code&gt;dock&lt;/code&gt;&lt;br&gt; &lt;code&gt;fan&lt;/code&gt;&lt;br&gt; &lt;code&gt;finder&lt;/code&gt;&lt;br&gt; &lt;code&gt;firewall&lt;/code&gt;&lt;br&gt; &lt;code&gt;flightmode&lt;/code&gt;&lt;br&gt; &lt;code&gt;gatekeeper&lt;/code&gt;&lt;br&gt; &lt;code&gt;group&lt;/code&gt;&lt;br&gt; &lt;code&gt;hostname&lt;/code&gt;&lt;br&gt; &lt;code&gt;info&lt;/code&gt;&lt;br&gt; &lt;code&gt;itunes&lt;/code&gt;&lt;br&gt; &lt;code&gt;localhost&lt;/code&gt;&lt;br&gt; &lt;code&gt;lock&lt;/code&gt;&lt;br&gt; &lt;code&gt;network&lt;/code&gt;&lt;br&gt; &lt;code&gt;nosleep&lt;/code&gt;&lt;br&gt; &lt;code&gt;notification&lt;/code&gt;&lt;br&gt; &lt;code&gt;ntp&lt;/code&gt;&lt;br&gt; &lt;code&gt;printer&lt;/code&gt;&lt;br&gt; &lt;code&gt;restart&lt;/code&gt;&lt;br&gt; &lt;code&gt;safeboot&lt;/code&gt;&lt;br&gt; &lt;code&gt;screensaver&lt;/code&gt;&lt;br&gt; &lt;code&gt;service&lt;/code&gt;&lt;br&gt; &lt;code&gt;shutdown&lt;/code&gt;&lt;br&gt; &lt;code&gt;sleep&lt;/code&gt;&lt;br&gt; &lt;code&gt;timezone&lt;/code&gt;&lt;br&gt; &lt;code&gt;touchbar&lt;/code&gt;&lt;br&gt; &lt;code&gt;trash&lt;/code&gt;&lt;br&gt; &lt;code&gt;update&lt;/code&gt;&lt;br&gt; &lt;code&gt;user&lt;/code&gt;&lt;br&gt; &lt;code&gt;volume&lt;/code&gt;&lt;br&gt; &lt;code&gt;vpn&lt;/code&gt;&lt;br&gt; &lt;code&gt;wallpaper&lt;/code&gt;&lt;br&gt; &lt;code&gt;wifi&lt;/code&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork it!&lt;/li&gt; &#xA; &lt;li&gt;Create your feature branch: &lt;code&gt;git checkout -b my-new-feature&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Commit your changes: &lt;code&gt;git commit -m &#39;Add some feature&#39;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Push to the branch: &lt;code&gt;git push origin my-new-feature&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Submit a pull request &lt;span&gt;ðŸ¤˜&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;TODO:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add more plugins&lt;/li&gt; &#xA; &lt;li&gt;Improve the help&lt;/li&gt; &#xA; &lt;li&gt;Improve the installation script&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Resources:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/herrbischoff/awesome-osx-command-line&#34;&gt;Awesome OSX Command Line&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ss64.com/osx/&#34;&gt;Apple MacOS Command Line Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/guarinogabriel/Mac-CLI&#34;&gt;guarinogabriel/Mac-CLI&lt;/a&gt; was a great source of inspiration.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rgcr/m-cli/master/LICENSE.md&#34;&gt;MIT License&lt;/a&gt; Â© Rogelio Cedillo&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pyenv/pyenv-virtualenv</title>
    <updated>2022-07-08T01:55:46Z</updated>
    <id>tag:github.com,2022-07-08:/pyenv/pyenv-virtualenv</id>
    <link href="https://github.com/pyenv/pyenv-virtualenv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;a pyenv plugin to manage virtualenv (a.k.a. python-virtualenv)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pyenv-virtualenv&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/yyuu/pyenv-virtualenv?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/yyuu/pyenv-virtualenv&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/pyenv/pyenv-virtualenv&#34;&gt;&lt;img src=&#34;https://travis-ci.org/pyenv/pyenv-virtualenv.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;pyenv-virtualenv is a &lt;a href=&#34;https://github.com/pyenv/pyenv&#34;&gt;pyenv&lt;/a&gt; plugin that provides features to manage virtualenvs and conda environments for Python on UNIX-like systems.&lt;/p&gt; &#xA;&lt;p&gt;(NOTICE: If you are an existing user of &lt;a href=&#34;http://pypi.python.org/pypi/virtualenvwrapper&#34;&gt;virtualenvwrapper&lt;/a&gt; and you love it, &lt;a href=&#34;https://github.com/pyenv/pyenv-virtualenvwrapper&#34;&gt;pyenv-virtualenvwrapper&lt;/a&gt; may help you (additionally) to manage your virtualenvs.)&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Installing as a pyenv plugin&lt;/h3&gt; &#xA;&lt;p&gt;This will install the latest development version of pyenv-virtualenv into the &lt;code&gt;$(pyenv root)/plugins/pyenv-virtualenv&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important note:&lt;/strong&gt; If you installed pyenv into a non-standard directory, make sure that you clone this repo into the &#39;plugins&#39; directory of wherever you installed into.&lt;/p&gt; &#xA;&lt;p&gt;From inside that directory you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check out a specific release tag.&lt;/li&gt; &#xA; &lt;li&gt;Get the latest development release by running &lt;code&gt;git pull&lt;/code&gt; to download the latest changes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Check out pyenv-virtualenv into plugin directory&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/pyenv/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(OPTIONAL) &lt;strong&gt;Add &lt;code&gt;pyenv virtualenv-init&lt;/code&gt; to your shell&lt;/strong&gt; to enable auto-activation of virtualenvs. This is entirely optional but pretty useful. See &#34;Activate virtualenv&#34; below.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#39;eval &#34;$(pyenv virtualenv-init -)&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Fish shell note&lt;/strong&gt;: Add this to your &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;status --is-interactive; and pyenv virtualenv-init - | source&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Zsh note&lt;/strong&gt;: Modify your &lt;code&gt;~/.zshrc&lt;/code&gt; file instead of &lt;code&gt;~/.bashrc&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Restart your shell to enable pyenv-virtualenv&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ exec &#34;$SHELL&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Installing with Homebrew (for macOS users)&lt;/h3&gt; &#xA;&lt;p&gt;macOS users can install pyenv-virtualenv with the &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt; package manager. This will give you access to the &lt;code&gt;pyenv-virtualenv&lt;/code&gt; command. If you have pyenv installed, you will also be able to use the &lt;code&gt;pyenv virtualenv&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;This is the recommended method of installation if you installed pyenv with Homebrew.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install pyenv-virtualenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, if you would like to install the latest development release:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install --HEAD pyenv-virtualenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After installation, you&#39;ll still need to do &lt;a href=&#34;https://github.com/pyenv/pyenv#basic-github-checkout&#34;&gt;Pyenv shell setup steps&lt;/a&gt; then add&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;eval &#34;$(pyenv virtualenv-init -)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to your shell&#39;s &lt;code&gt;.rc&lt;/code&gt; file (as stated in the caveats). You&#39;ll only ever have to do this once.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;pyenv virtualenv&lt;/code&gt; with pyenv&lt;/h3&gt; &#xA;&lt;p&gt;To create a virtualenv for the Python version used with pyenv, run &lt;code&gt;pyenv virtualenv&lt;/code&gt;, specifying the Python version you want and the name of the virtualenv directory. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pyenv virtualenv 2.7.10 my-virtual-env-2.7.10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will create a virtualenv based on Python 2.7.10 under &lt;code&gt;$(pyenv root)/versions&lt;/code&gt; in a folder called &lt;code&gt;my-virtual-env-2.7.10&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Create virtualenv from current version&lt;/h3&gt; &#xA;&lt;p&gt;If there is only one argument given to &lt;code&gt;pyenv virtualenv&lt;/code&gt;, the virtualenv will be created with the given name based on the current pyenv Python version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pyenv version&#xA;3.4.3 (set by /home/yyuu/.pyenv/version)&#xA;$ pyenv virtualenv venv34&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;List existing virtualenvs&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;pyenv virtualenvs&lt;/code&gt; shows you the list of existing virtualenvs and &lt;code&gt;conda&lt;/code&gt; environments.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pyenv shell venv34&#xA;$ pyenv virtualenvs&#xA;  miniconda3-3.9.1 (created from /home/yyuu/.pyenv/versions/miniconda3-3.9.1)&#xA;  miniconda3-3.9.1/envs/myenv (created from /home/yyuu/.pyenv/versions/miniconda3-3.9.1)&#xA;  2.7.10/envs/my-virtual-env-2.7.10 (created from /home/yyuu/.pyenv/versions/2.7.10)&#xA;  3.4.3/envs/venv34 (created from /home/yyuu/.pyenv/versions/3.4.3)&#xA;  my-virtual-env-2.7.10 (created from /home/yyuu/.pyenv/versions/2.7.10)&#xA;* venv34 (created from /home/yyuu/.pyenv/versions/3.4.3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are two entries for each virtualenv, and the shorter one is just a symlink.&lt;/p&gt; &#xA;&lt;h3&gt;Activate virtualenv&lt;/h3&gt; &#xA;&lt;p&gt;Some external tools (e.g. &lt;a href=&#34;https://github.com/davidhalter/jedi&#34;&gt;jedi&lt;/a&gt;) might require you to &lt;code&gt;activate&lt;/code&gt; the virtualenv and &lt;code&gt;conda&lt;/code&gt; environments.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;eval &#34;$(pyenv virtualenv-init -)&#34;&lt;/code&gt; is configured in your shell, &lt;code&gt;pyenv-virtualenv&lt;/code&gt; will automatically activate/deactivate virtualenvs on entering/leaving directories which contain a &lt;code&gt;.python-version&lt;/code&gt; file that contains the name of a valid virtual environment as shown in the output of &lt;code&gt;pyenv virtualenvs&lt;/code&gt; (e.g., &lt;code&gt;venv34&lt;/code&gt; or &lt;code&gt;3.4.3/envs/venv34&lt;/code&gt; in example above) . &lt;code&gt;.python-version&lt;/code&gt; files are used by pyenv to denote local Python versions and can be created and deleted with the &lt;a href=&#34;https://github.com/pyenv/pyenv/raw/master/COMMANDS.md#pyenv-local&#34;&gt;&lt;code&gt;pyenv local&lt;/code&gt;&lt;/a&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;You can also activate and deactivate a pyenv virtualenv manually:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pyenv activate &amp;lt;name&amp;gt;&#xA;pyenv deactivate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Delete existing virtualenv&lt;/h3&gt; &#xA;&lt;p&gt;Removing the directories in &lt;code&gt;$(pyenv root)/versions&lt;/code&gt; and &lt;code&gt;$(pyenv root)/versions/{version}/envs&lt;/code&gt; will delete the virtualenv, or you can run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pyenv uninstall my-virtual-env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also delete existing virtualenvs by using &lt;code&gt;virtualenv-delete&lt;/code&gt; command, e.g. you can run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pyenv virtualenv-delete my-virtual-env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will delete virtualenv called &lt;code&gt;my-virtual-env&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;virtualenv and venv&lt;/h3&gt; &#xA;&lt;p&gt;There is a &lt;a href=&#34;http://docs.python.org/3/library/venv.html&#34;&gt;venv&lt;/a&gt; module available for CPython 3.3 and newer. It provides an executable module &lt;code&gt;venv&lt;/code&gt; which is the successor of &lt;code&gt;virtualenv&lt;/code&gt; and distributed by default.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pyenv-virtualenv&lt;/code&gt; uses &lt;code&gt;python -m venv&lt;/code&gt; if it is available and the &lt;code&gt;virtualenv&lt;/code&gt; command is not available.&lt;/p&gt; &#xA;&lt;h3&gt;Anaconda and Miniconda&lt;/h3&gt; &#xA;&lt;p&gt;You can manage &lt;code&gt;conda&lt;/code&gt; environments by &lt;code&gt;conda create&lt;/code&gt; as same manner as standard Anaconda/Miniconda installations. To use those environments, you can use &lt;code&gt;pyenv activate&lt;/code&gt; and &lt;code&gt;pyenv deactivate&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pyenv version&#xA;miniconda3-3.9.1 (set by /home/yyuu/.pyenv/version)&#xA;$ conda env list&#xA;# conda environments:&#xA;#&#xA;myenv                    /home/yyuu/.pyenv/versions/miniconda3-3.9.1/envs/myenv&#xA;root                  *  /home/yyuu/.pyenv/versions/miniconda3-3.9.1&#xA;$ pyenv activate miniconda3-3.9.1/envs/myenv&#xA;discarding /home/yyuu/.pyenv/versions/miniconda3-3.9.1/bin from PATH&#xA;prepending /home/yyuu/.pyenv/versions/miniconda3-3.9.1/envs/myenv/bin to PATH&#xA;$ python --version&#xA;Python 3.4.3 :: Continuum Analytics, Inc.&#xA;$ pyenv deactivate&#xA;discarding /home/yyuu/.pyenv/versions/miniconda3-3.9.1/envs/myenv/bin from PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;conda&lt;/code&gt; is available, &lt;code&gt;pyenv virtualenv&lt;/code&gt; will use it to create environment by &lt;code&gt;conda create&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pyenv version&#xA;miniconda3-3.9.1 (set by /home/yyuu/.pyenv/version)&#xA;$ pyenv virtualenv myenv2&#xA;$ conda env list&#xA;# conda environments:&#xA;#&#xA;myenv                    /home/yyuu/.pyenv/versions/miniconda3-3.9.1/envs/myenv&#xA;myenv                    /home/yyuu/.pyenv/versions/miniconda3-3.9.1/envs/myenv2&#xA;root                  *  /home/yyuu/.pyenv/versions/miniconda3-3.9.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use version like &lt;code&gt;miniconda3-3.9.1/envs/myenv&lt;/code&gt; to specify &lt;code&gt;conda&lt;/code&gt; environment as a version in pyenv.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pyenv version&#xA;miniconda3-3.9.1 (set by /home/yyuu/.pyenv/version)&#xA;$ pyenv shell miniconda3-3.9.1/envs/myenv&#xA;$ which python&#xA;/home/yyuu/.pyenv/versions/miniconda3-3.9.1/envs/myenv/bin/python&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Special environment variables&lt;/h3&gt; &#xA;&lt;p&gt;You can set certain environment variables to control pyenv-virtualenv.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;PYENV_VIRTUALENV_CACHE_PATH&lt;/code&gt;, if set, specifies a directory to use for caching downloaded package files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;VIRTUALENV_VERSION&lt;/code&gt;, if set, forces pyenv-virtualenv to install the desired version of virtualenv. If &lt;code&gt;virtualenv&lt;/code&gt; has not been installed, pyenv-virtualenv will try to install the given version of virtualenv.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET_PIP&lt;/code&gt;, if set and &lt;code&gt;venv&lt;/code&gt; is preferred over &lt;code&gt;virtualenv&lt;/code&gt;, use &lt;code&gt;get_pip.py&lt;/code&gt; from the specified location.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET_PIP_URL&lt;/code&gt;, if set and &lt;code&gt;venv&lt;/code&gt; is preferred over &lt;code&gt;virtualenv&lt;/code&gt;, download &lt;code&gt;get_pip.py&lt;/code&gt; from the specified URL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PIP_VERSION&lt;/code&gt;, if set and &lt;code&gt;venv&lt;/code&gt; is preferred over &lt;code&gt;virtualenv&lt;/code&gt;, install the specified version of pip.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PYENV_VIRTUALENV_VERBOSE_ACTIVATE&lt;/code&gt;, if set, shows some verbose outputs on activation and deactivation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Version History&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/pyenv/pyenv-virtualenv/master/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pyenv/pyenv-virtualenv/master/LICENSE&#34;&gt;(The MIT License)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Copyright (c) 2015 Yamashita, Yuu&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>github/super-linter</title>
    <updated>2022-07-08T01:55:46Z</updated>
    <id>tag:github.com,2022-07-08:/github/super-linter</id>
    <link href="https://github.com/github/super-linter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Combination of multiple linters to install as a GitHub Action&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Super-Linter&lt;/h1&gt; &#xA;&lt;p&gt;This repository is for the &lt;strong&gt;GitHub Action&lt;/strong&gt; to run a &lt;strong&gt;Super-Linter&lt;/strong&gt;. It is a simple combination of various linters, written in &lt;code&gt;bash&lt;/code&gt;, to help validate your source code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.codacy.com/gh/github/super-linter/dashboard?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=github/super-linter&amp;amp;utm_campaign=Badge_Grade&#34;&gt;&lt;img src=&#34;https://app.codacy.com/project/badge/Grade/51071879604e4f319859d4daf91c68f5&#34; alt=&#34;Codacy Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The end goal of this tool:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Prevent broken code from being uploaded to the default branch (&lt;em&gt;Usually&lt;/em&gt; &lt;code&gt;master&lt;/code&gt; or &lt;code&gt;main&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Help establish coding best practices across multiple languages&lt;/li&gt; &#xA; &lt;li&gt;Build guidelines for code layout and format&lt;/li&gt; &#xA; &lt;li&gt;Automate the process to help streamline code reviews&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/super-linter/main/#super-linter&#34;&gt;Super-Linter&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/super-linter/main/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/super-linter/main/#how-it-works&#34;&gt;How it Works&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/super-linter/main/#supported-linters&#34;&gt;Supported Linters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/super-linter/main/#how-to-use&#34;&gt;How to use&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/super-linter/main/#example-connecting-github-action-workflow&#34;&gt;Example connecting GitHub Action Workflow&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/super-linter/main/#add-super-linter-badge-in-your-repository-readme&#34;&gt;Add Super-Linter badge in your repository README&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/super-linter/main/#images&#34;&gt;Images&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/super-linter/main/#standard-image&#34;&gt;Standard Image&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/super-linter/main/#slim-image&#34;&gt;Slim Image&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/super-linter/main/#environment-variables&#34;&gt;Environment variables&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/super-linter/main/#template-rules-files&#34;&gt;Template rules files&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/super-linter/main/#using-your-own-rules-files&#34;&gt;Using your own rules files&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/super-linter/main/#disabling-rules&#34;&gt;Disabling rules&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/super-linter/main/#using-your-own-ssh-key&#34;&gt;Using your own SSH key&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/super-linter/main/#filter-linted-files&#34;&gt;Filter linted files&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/super-linter/main/#docker-hub&#34;&gt;Docker Hub&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/super-linter/main/#run-super-linter-outside-github-actions&#34;&gt;Run Super-Linter outside GitHub Actions&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/super-linter/main/#local-troubleshootingdebuggingenhancements&#34;&gt;Local (troubleshooting/debugging/enhancements)&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/super-linter/main/#azure&#34;&gt;Azure&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/super-linter/main/#gitlab&#34;&gt;GitLab&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/super-linter/main/#visual-studio-code&#34;&gt;Visual Studio Code&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/super-linter/main/#ssl-certs&#34;&gt;SSL Certs&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/super-linter/main/#community-activity&#34;&gt;Community Activity&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/super-linter/main/#limitations&#34;&gt;Limitations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/super-linter/main/#how-to-contribute&#34;&gt;How to contribute&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/super-linter/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How it Works&lt;/h2&gt; &#xA;&lt;p&gt;The super-linter finds issues and reports them to the console output. Fixes are suggested in the console output but not automatically fixed, and a status check will show up as failed on the pull request.&lt;/p&gt; &#xA;&lt;p&gt;The design of the &lt;strong&gt;Super-Linter&lt;/strong&gt; is currently to allow linting to occur in &lt;strong&gt;GitHub Actions&lt;/strong&gt; as a part of continuous integration occurring on pull requests as the commits get pushed. It works best when commits are being pushed early and often to a branch with an open or draft pull request. There is some desire to move this closer to local development for faster feedback on linting errors but this is not yet supported.&lt;/p&gt; &#xA;&lt;h3&gt;Repository Visualization&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://super-linter.s3.us-west-2.amazonaws.com/diagram.svg?sanitize=true&#34; alt=&#34;Visualization of the codebase&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported Linters&lt;/h2&gt; &#xA;&lt;p&gt;Developers on &lt;strong&gt;GitHub&lt;/strong&gt; can call the &lt;strong&gt;GitHub Action&lt;/strong&gt; to lint their codebase with the following list of linters:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;em&gt;Language&lt;/em&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;em&gt;Linter&lt;/em&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Ansible&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ansible/ansible-lint&#34;&gt;ansible-lint&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;AWS CloudFormation templates&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/aws-cloudformation/cfn-python-lint/&#34;&gt;cfn-lint&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Azure Resource Manager (Bicep)(ARM)&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/azure/arm-ttk&#34;&gt;arm-ttk&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;C++&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cpplint/cpplint&#34;&gt;cpp-lint&lt;/a&gt; / &lt;a href=&#34;https://clang.llvm.org/docs/ClangFormatStyleOptions.html&#34;&gt;clang-format&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;C#&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dotnet/format&#34;&gt;dotnet-format&lt;/a&gt; / &lt;a href=&#34;https://clang.llvm.org/docs/ClangFormatStyleOptions.html&#34;&gt;clang-format&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://stylelint.io/&#34;&gt;stylelint&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Clojure&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/borkdude/clj-kondo&#34;&gt;clj-kondo&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;CoffeeScript&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://coffeelint.github.io/&#34;&gt;coffeelint&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Copy/paste detection&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kucherenko/jscpd&#34;&gt;jscpd&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Dart&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dart.dev/guides/language/analysis-options&#34;&gt;dartanalyzer&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint&#34;&gt;hadolint&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;EditorConfig&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/editorconfig-checker/editorconfig-checker&#34;&gt;editorconfig-checker&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;ENV&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dotenv-linter/dotenv-linter&#34;&gt;dotenv-linter&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Gherkin&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/vsiakka/gherkin-lint&#34;&gt;gherkin-lint&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;GitHub Actions&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/rhysd/actionlint&#34;&gt;actionlint&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Golang&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/golangci/golangci-lint&#34;&gt;golangci-lint&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Groovy&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nvuillam/npm-groovy-lint&#34;&gt;npm-groovy-lint&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/htmlhint/HTMLHint&#34;&gt;HTMLHint&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Java&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://checkstyle.org&#34;&gt;checkstyle&lt;/a&gt; / &lt;a href=&#34;https://github.com/google/google-java-format&#34;&gt;google-java-format&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://eslint.org/&#34;&gt;ESLint&lt;/a&gt; / &lt;a href=&#34;https://standardjs.com/&#34;&gt;standard js&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;JSON&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.npmjs.com/package/eslint-plugin-json&#34;&gt;eslint-plugin-json&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;JSONC&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.npmjs.com/package/eslint-plugin-jsonc&#34;&gt;eslint-plugin-jsonc&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Kubeval&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/instrumenta/kubeval&#34;&gt;kubeval&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Kotlin&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pinterest/ktlint&#34;&gt;ktlint&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;LaTeX&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nongnu.org/chktex/&#34;&gt;ChkTex&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Lua&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/luarocks/luacheck&#34;&gt;luacheck&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Markdown&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/igorshubovych/markdownlint-cli#readme&#34;&gt;markdownlint&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Natural language&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://textlint.github.io/&#34;&gt;textlint&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OpenAPI&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/stoplightio/spectral&#34;&gt;spectral&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Perl&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://metacpan.org/pod/Perl::Critic&#34;&gt;perlcritic&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;PHP&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.php.net/&#34;&gt;PHP built-in linter&lt;/a&gt; / &lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer&#34;&gt;PHP CodeSniffer&lt;/a&gt; / &lt;a href=&#34;https://phpstan.org/&#34;&gt;PHPStan&lt;/a&gt; / &lt;a href=&#34;https://psalm.dev/&#34;&gt;Psalm&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;PowerShell&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/PowerShell/Psscriptanalyzer&#34;&gt;PSScriptAnalyzer&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Protocol Buffers&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yoheimuta/protolint&#34;&gt;protolint&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Python3&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.pylint.org/&#34;&gt;pylint&lt;/a&gt; / &lt;a href=&#34;https://flake8.pycqa.org/en/latest/&#34;&gt;flake8&lt;/a&gt; / &lt;a href=&#34;https://github.com/psf/black&#34;&gt;black&lt;/a&gt; / &lt;a href=&#34;https://pypi.org/project/isort/&#34;&gt;isort&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;R&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jimhester/lintr&#34;&gt;lintr&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Raku&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raku.org&#34;&gt;Raku&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Ruby&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/rubocop-hq/rubocop&#34;&gt;RuboCop&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Rust&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/rust-lang/rustfmt&#34;&gt;Rustfmt&lt;/a&gt; / &lt;a href=&#34;https://github.com/rust-lang/rust-clippy&#34;&gt;Clippy&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Scala&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/scalameta/scalafmt&#34;&gt;scalafmt&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Secrets&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/zricethezav/gitleaks&#34;&gt;GitLeaks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Shell&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck&#34;&gt;Shellcheck&lt;/a&gt; / [executable bit check] / &lt;a href=&#34;https://github.com/mvdan/sh&#34;&gt;shfmt&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Snakemake&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/snakemake/snakefmt/&#34;&gt;snakefmt&lt;/a&gt; / &lt;a href=&#34;https://snakemake.readthedocs.io/en/stable/snakefiles/writing_snakefiles.html#best-practices&#34;&gt;snakemake --lint&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;SQL&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/joereynolds/sql-lint&#34;&gt;sql-lint&lt;/a&gt; / &lt;a href=&#34;https://github.com/sqlfluff/sqlfluff&#34;&gt;sqlfluff&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Tekton&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/IBM/tekton-lint&#34;&gt;tekton-lint&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Terraform&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/terraform-linters/tflint&#34;&gt;tflint&lt;/a&gt; / &lt;a href=&#34;https://github.com/accurics/terrascan&#34;&gt;terrascan&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Terragrunt&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gruntwork-io/terragrunt&#34;&gt;terragrunt&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;TypeScript&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://eslint.org/&#34;&gt;ESLint&lt;/a&gt; / &lt;a href=&#34;https://standardjs.com/&#34;&gt;standard js&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;XML&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://xmlsoft.org/&#34;&gt;LibXML&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;YAML&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/adrienverge/yamllint&#34;&gt;YamlLint&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;More in-depth &lt;a href=&#34;https://www.youtube.com/watch?v=EDAmFKO4Zt0&amp;amp;t=118s&#34;&gt;tutorial&lt;/a&gt; available&lt;/p&gt; &#xA;&lt;p&gt;To use this &lt;strong&gt;GitHub&lt;/strong&gt; Action you will need to complete the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a new file in your repository called &lt;code&gt;.github/workflows/linter.yml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Copy the example workflow from below into that new file, no extra configuration required&lt;/li&gt; &#xA; &lt;li&gt;Commit that file to a new branch&lt;/li&gt; &#xA; &lt;li&gt;Open up a pull request and observe the action working&lt;/li&gt; &#xA; &lt;li&gt;Enjoy your more &lt;em&gt;stable&lt;/em&gt;, and &lt;em&gt;cleaner&lt;/em&gt; codebase&lt;/li&gt; &#xA; &lt;li&gt;Check out the &lt;a href=&#34;https://github.com/github/super-linter/wiki&#34;&gt;Wiki&lt;/a&gt; for customization options&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you pass the &lt;em&gt;Environment&lt;/em&gt; variable &lt;code&gt;GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}&lt;/code&gt; in your workflow, then the &lt;strong&gt;GitHub Super-Linter&lt;/strong&gt; will mark the status of each individual linter run in the Checks section of a pull request. Without this you will only see the overall status of the full run. There is no need to set the &lt;strong&gt;GitHub&lt;/strong&gt; Secret as it is automatically set by GitHub, it only needs to be passed to the action.&lt;/p&gt; &#xA;&lt;h3&gt;Example connecting GitHub Action Workflow&lt;/h3&gt; &#xA;&lt;p&gt;In your repository you should have a &lt;code&gt;.github/workflows&lt;/code&gt; folder with &lt;strong&gt;GitHub&lt;/strong&gt; Action similar to below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;.github/workflows/linter.yml&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Example file can be found at &lt;a href=&#34;https://raw.githubusercontent.com/github/super-linter/main/TEMPLATES/linter.yml&#34;&gt;&lt;code&gt;TEMPLATES/linter.yml&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This file should have the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;---&#xA;#################################&#xA;#################################&#xA;## Super Linter GitHub Actions ##&#xA;#################################&#xA;#################################&#xA;name: Lint Code Base&#xA;&#xA;#&#xA;# Documentation:&#xA;# https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions&#xA;#&#xA;&#xA;#############################&#xA;# Start the job on all push #&#xA;#############################&#xA;on:&#xA;  push:&#xA;    branches-ignore: [master, main]&#xA;    # Remove the line above to run when pushing to master&#xA;  pull_request:&#xA;    branches: [master, main]&#xA;&#xA;###############&#xA;# Set the Job #&#xA;###############&#xA;jobs:&#xA;  build:&#xA;    # Name the Job&#xA;    name: Lint Code Base&#xA;    # Set the agent to run on&#xA;    runs-on: ubuntu-latest&#xA;&#xA;    ##################&#xA;    # Load all steps #&#xA;    ##################&#xA;    steps:&#xA;      ##########################&#xA;      # Checkout the code base #&#xA;      ##########################&#xA;      - name: Checkout Code&#xA;        uses: actions/checkout@v3&#xA;        with:&#xA;          # Full git history is needed to get a proper list of changed files within `super-linter`&#xA;          fetch-depth: 0&#xA;&#xA;      ################################&#xA;      # Run Linter against code base #&#xA;      ################################&#xA;      - name: Lint Code Base&#xA;        uses: github/super-linter@v4&#xA;        env:&#xA;          VALIDATE_ALL_CODEBASE: false&#xA;          DEFAULT_BRANCH: master&#xA;          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add Super-Linter badge in your repository README&lt;/h3&gt; &#xA;&lt;p&gt;You can show Super-Linter status with a badge in your repository README&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/marketplace/actions/super-linter&#34;&gt;&lt;img src=&#34;https://github.com/nvuillam/npm-groovy-lint/workflows/Lint%20Code%20Base/badge.svg?sanitize=true&#34; alt=&#34;GitHub Super-Linter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;[![GitHub Super-Linter](https://github.com/&amp;lt;OWNER&amp;gt;/&amp;lt;REPOSITORY&amp;gt;/workflows/Lint%20Code%20Base/badge.svg)](https://github.com/marketplace/actions/super-linter)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;[![GitHub Super-Linter](https://github.com/nvuillam/npm-groovy-lint/workflows/Lint%20Code%20Base/badge.svg)](https://github.com/marketplace/actions/super-linter)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; IF you did not use &lt;code&gt;Lint Code Base&lt;/code&gt; as GitHub Action name, please read &lt;a href=&#34;https://docs.github.com/en/actions/monitoring-and-troubleshooting-workflows/adding-a-workflow-status-badge&#34;&gt;GitHub Actions Badges documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Images&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;strong&gt;GitHub Super-Linter&lt;/strong&gt; now builds and supports &lt;code&gt;multiple&lt;/code&gt; images. We have found as we added more linters, the image size expanded drastically. After further investigation, we were able to see that a few linters were very disk heavy. We removed those linters and created the &lt;code&gt;slim&lt;/code&gt; image. This allows users to choose which &lt;strong&gt;Super-Linter&lt;/strong&gt; they want to run and potentially speed up their build time. The available images:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;github/super-linter:v4&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;github/super-linter:slim-v4&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Standard Image&lt;/h4&gt; &#xA;&lt;p&gt;The standard &lt;code&gt;github/super-linter:v4&lt;/code&gt; comes with all supported linters. Example usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;################################&#xA;# Run Linter against code base #&#xA;################################&#xA;- name: Lint Code Base&#xA;  uses: github/super-linter@v4&#xA;  env:&#xA;    VALIDATE_ALL_CODEBASE: false&#xA;    DEFAULT_BRANCH: master&#xA;    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Slim Image&lt;/h4&gt; &#xA;&lt;p&gt;The slim &lt;code&gt;github/super-linter:slim-v4&lt;/code&gt; comes with all supported linters but removes the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rust&lt;/code&gt; linters&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dotenv&lt;/code&gt; linters&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;armttk&lt;/code&gt; linters&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pwsh&lt;/code&gt; linters&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;c#&lt;/code&gt; linters&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By removing these linters, we were able to bring the image size down by &lt;code&gt;2gb&lt;/code&gt; and drastically speed up the build and download time. The behavior will be the same for non-supported languages, and will skip languages at run time. Example usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;################################&#xA;# Run Linter against code base #&#xA;################################&#xA;- name: Lint Code Base&#xA;  uses: github/super-linter/slim@v4&#xA;  env:&#xA;    VALIDATE_ALL_CODEBASE: false&#xA;    DEFAULT_BRANCH: master&#xA;    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Environment variables&lt;/h2&gt; &#xA;&lt;p&gt;The super-linter allows you to pass the following &lt;code&gt;ENV&lt;/code&gt; variables to be able to trigger different functionality.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; All the &lt;code&gt;VALIDATE_[LANGUAGE]&lt;/code&gt; variables behave in a very specific way:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If none of them are passed, then they all default to true.&lt;/li&gt; &#xA; &lt;li&gt;If any one of the variables are set to true, we default to leaving any unset variable to false (only validate those languages).&lt;/li&gt; &#xA; &lt;li&gt;If any one of the variables are set to false, we default to leaving any unset variable to true (only exclude those languages).&lt;/li&gt; &#xA; &lt;li&gt;If there are &lt;code&gt;VALIDATE_[LANGUAGE]&lt;/code&gt; variables set to both true and false. It will fail.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This means that if you run the linter &#34;out of the box&#34;, all languages will be checked. But if you wish to select or exclude specific linters, we give you full control to choose which linters are run, and won&#39;t run anything unexpected.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;ENV VAR&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Default Value&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;ACTIONS_RUNNER_DEBUG&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable additional information about the linter, versions, and additional output.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;ANSIBLE_CONFIG_FILE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.ansible-lint.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Filename for &lt;a href=&#34;https://ansible-lint.readthedocs.io/en/latest/configuring.html#configuration-file&#34;&gt;Ansible-lint configuration&lt;/a&gt; (ex: &lt;code&gt;.ansible-lint&lt;/code&gt;, &lt;code&gt;.ansible-lint.yml&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;ANSIBLE_DIRECTORY&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/ansible&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to set the root directory for Ansible file location(s), relative to &lt;code&gt;DEFAULT_WORKSPACE&lt;/code&gt;. Set to &lt;code&gt;.&lt;/code&gt; to use the top-level of the &lt;code&gt;DEFAULT_WORKSPACE&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;ANSIBLE_ROLES_PATH&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;${ANSIBLE_DIRECTORY}/roles&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Path to the Ansible roles directory.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;CSS_FILE_NAME&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.stylelintrc.json&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Filename for &lt;a href=&#34;https://github.com/stylelint/stylelint&#34;&gt;Stylelint configuration&lt;/a&gt; (ex: &lt;code&gt;.stylelintrc.yml&lt;/code&gt;, &lt;code&gt;.stylelintrc.yaml&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;DEFAULT_BRANCH&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;master&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The name of the repository default branch.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;DEFAULT_WORKSPACE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/tmp/lint&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The location containing files to lint if you are running locally.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;DISABLE_ERRORS&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to have the linter complete with exit code 0 even if errors were detected.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;DOCKERFILE_HADOLINT_FILE_NAME&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.hadolint.yaml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Filename for &lt;a href=&#34;https://github.com/hadolint/hadolint&#34;&gt;hadolint configuration&lt;/a&gt; (ex: &lt;code&gt;.hadolintlintrc.yaml&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;EDITORCONFIG_FILE_NAME&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.ecrc&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Filename for &lt;a href=&#34;https://github.com/editorconfig-checker/editorconfig-checker&#34;&gt;editorconfig-checker configuration&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;ERROR_ON_MISSING_EXEC_BIT&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If set to &lt;code&gt;false&lt;/code&gt;, the &lt;code&gt;bash-exec&lt;/code&gt; linter will report a warning if a shell script is not executable. If set to &lt;code&gt;true&lt;/code&gt;, the &lt;code&gt;bash-exec&lt;/code&gt; linter will report an error instead.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;FILTER_REGEX_EXCLUDE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;none&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Regular expression defining which files will be excluded from linting (ex: &lt;code&gt;.*src/test.*&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;FILTER_REGEX_INCLUDE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;all&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Regular expression defining which files will be processed by linters (ex: &lt;code&gt;.*src/.*&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;GITHUB_ACTIONS_CONFIG_FILE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;actionlint.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Filename for &lt;a href=&#34;https://github.com/rhysd/actionlint/raw/main/docs/config.md&#34;&gt;Actionlint configuration&lt;/a&gt; (ex: &lt;code&gt;actionlint.yml&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;GITHUB_CUSTOM_API_URL&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;https://api.github.com&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specify a custom GitHub API URL in case GitHub Enterprise is used: e.g. &lt;code&gt;https://github.myenterprise.com/api/v3&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;GITHUB_DOMAIN&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;github.com&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specify a custom GitHub domain in case GitHub Enterprise is used: e.g. &lt;code&gt;github.myenterprise.com&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;GITLEAKS_CONFIG_FILE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.gitleaks.toml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Filename for &lt;a href=&#34;https://github.com/zricethezav/gitleaks#configuration&#34;&gt;GitLeaks configuration&lt;/a&gt; (ex: &lt;code&gt;.geatleaks.toml&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;IGNORE_GENERATED_FILES&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If set to &lt;code&gt;true&lt;/code&gt;, super-linter will ignore all the files with &lt;code&gt;@generated&lt;/code&gt; marker but without &lt;code&gt;@not-generated&lt;/code&gt; marker.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;IGNORE_GITIGNORED_FILES&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If set to &lt;code&gt;true&lt;/code&gt;, super-linter will ignore all the files that are ignored by Git.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;JAVA_FILE_NAME&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sun_checks.xml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Filename for &lt;a href=&#34;https://checkstyle.sourceforge.io/config.html&#34;&gt;Checkstyle configuration&lt;/a&gt; (ex: &lt;code&gt;checkstyle.xml&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;JAVASCRIPT_DEFAULT_STYLE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;standard&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to set the default style of JavaScript. Available options: &lt;strong&gt;standard&lt;/strong&gt;/&lt;strong&gt;prettier&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;JAVASCRIPT_ES_CONFIG_FILE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.eslintrc.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Filename for &lt;a href=&#34;https://eslint.org/docs/user-guide/configuring#configuration-file-formats&#34;&gt;ESLint configuration&lt;/a&gt; (ex: &lt;code&gt;.eslintrc.yml&lt;/code&gt;, &lt;code&gt;.eslintrc.json&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;JSCPD_CONFIG_FILE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.jscpd.json&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Filename for JSCPD configuration&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;KUBERNETES_KUBEVAL_OPTIONS&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Additional arguments to pass to the command-line when running &lt;strong&gt;Kubernetes Kubeval&lt;/strong&gt; (Example: --ignore-missing-schemas)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;LINTER_RULES_PATH&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.github/linters&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Directory for all linter configuration rules.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;LOG_FILE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;super-linter.log&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The filename for outputting logs. All output is sent to the log file regardless of &lt;code&gt;LOG_LEVEL&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;LOG_LEVEL&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;VERBOSE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;How much output the script will generate to the console. One of &lt;code&gt;ERROR&lt;/code&gt;, &lt;code&gt;WARN&lt;/code&gt;, &lt;code&gt;NOTICE&lt;/code&gt;, &lt;code&gt;VERBOSE&lt;/code&gt;, &lt;code&gt;DEBUG&lt;/code&gt; or &lt;code&gt;TRACE&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;MARKDOWN_CONFIG_FILE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.markdown-lint.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Filename for &lt;a href=&#34;https://github.com/DavidAnson/markdownlint#optionsconfig&#34;&gt;Markdownlint configuration&lt;/a&gt; (ex: &lt;code&gt;.markdown-lint.yml&lt;/code&gt;, &lt;code&gt;.markdownlint.json&lt;/code&gt;, &lt;code&gt;.markdownlint.yaml&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;MARKDOWN_CUSTOM_RULE_GLOBS&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.markdown-lint/rules,rules/**&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Comma-separated list of &lt;a href=&#34;https://github.com/igorshubovych/markdownlint-cli#globbing&#34;&gt;file globs&lt;/a&gt; matching &lt;a href=&#34;https://github.com/DavidAnson/markdownlint/raw/main/doc/CustomRules.md&#34;&gt;custom Markdownlint rule files&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;MULTI_STATUS&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A status API is made for each language that is linted to make visual parsing easier.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;NATURAL_LANGUAGE_CONFIG_FILE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.textlintrc&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Filename for &lt;a href=&#34;https://textlint.github.io/docs/getting-started.html#configuration&#34;&gt;textlint configuration&lt;/a&gt; (ex: &lt;code&gt;.textlintrc&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;PERL_PERLCRITIC_OPTIONS&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Additional arguments to pass to the command-line when running &lt;strong&gt;perlcritic&lt;/strong&gt; (Example: --theme community)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;PHP_CONFIG_FILE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php.ini&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Filename for &lt;a href=&#34;https://www.php.net/manual/en/configuration.file.php&#34;&gt;PHP Configuration&lt;/a&gt; (ex: &lt;code&gt;php.ini&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;PROTOBUF_CONFIG_FILE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.protolintrc.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Filename for &lt;a href=&#34;https://github.com/yoheimuta/protolint/raw/master/_example/config/.protolint.yaml&#34;&gt;protolint configuration&lt;/a&gt; (ex: &lt;code&gt;.protolintrc.yml&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;PYTHON_BLACK_CONFIG_FILE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.python-black&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Filename for &lt;a href=&#34;https://github.com/psf/black/raw/main/docs/guides/using_black_with_other_tools.md#black-compatible-configurations&#34;&gt;black configuration&lt;/a&gt; (ex: &lt;code&gt;.isort.cfg&lt;/code&gt;, &lt;code&gt;pyproject.toml&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;PYTHON_FLAKE8_CONFIG_FILE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.flake8&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Filename for &lt;a href=&#34;https://flake8.pycqa.org/en/latest/user/configuration.html&#34;&gt;flake8 configuration&lt;/a&gt; (ex: &lt;code&gt;.flake8&lt;/code&gt;, &lt;code&gt;tox.ini&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;PYTHON_ISORT_CONFIG_FILE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.isort.cfg&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Filename for &lt;a href=&#34;https://pycqa.github.io/isort/docs/configuration/config_files.html&#34;&gt;isort configuration&lt;/a&gt; (ex: &lt;code&gt;.isort.cfg&lt;/code&gt;, &lt;code&gt;pyproject.toml&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;PYTHON_MYPY_CONFIG_FILE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.mypy.ini&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Filename for &lt;a href=&#34;https://mypy.readthedocs.io/en/stable/config_file.html&#34;&gt;mypy configuration&lt;/a&gt; (ex: &lt;code&gt;.mypi.ini&lt;/code&gt;, &lt;code&gt;setup.config&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;PYTHON_PYLINT_CONFIG_FILE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.python-lint&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Filename for &lt;a href=&#34;https://pylint.pycqa.org/en/latest/user_guide/run.html?highlight=rcfile#command-line-options&#34;&gt;pylint configuration&lt;/a&gt; (ex: &lt;code&gt;.python-lint&lt;/code&gt;, &lt;code&gt;.pylintrc&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;RUBY_CONFIG_FILE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.ruby-lint.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Filename for &lt;a href=&#34;https://docs.rubocop.org/rubocop/configuration.html&#34;&gt;rubocop configuration&lt;/a&gt; (ex: &lt;code&gt;.ruby-lint.yml&lt;/code&gt;, &lt;code&gt;.rubocop.yml&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;SCALAFMT_CONFIG_FILE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.scalafmt.conf&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Filename for &lt;a href=&#34;https://scalameta.org/scalafmt/docs/configuration.html&#34;&gt;scalafmt configuration&lt;/a&gt; (ex: &lt;code&gt;.scalafmt.conf&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;SNAKEMAKE_SNAKEFMT_CONFIG_FILE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.snakefmt.toml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Filename for &lt;a href=&#34;https://github.com/snakemake/snakefmt#configuration&#34;&gt;Snakemake configuration&lt;/a&gt; (ex: &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;.snakefmt.toml&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;SSL_CERT_SECRET&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;none&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SSL cert to add to the &lt;strong&gt;Super-Linter&lt;/strong&gt; trust store. This is needed for users on &lt;code&gt;self-hosted&lt;/code&gt; runners or need to inject the cert for security standards (ex. ${{ secrets.SSL_CERT }})&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;SSH_KEY&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;none&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SSH key that has access to your private repositories&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;SSH_SETUP_GITHUB&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If set to &lt;code&gt;true&lt;/code&gt;, adds the &lt;code&gt;github.com&lt;/code&gt; SSH key to &lt;code&gt;known_hosts&lt;/code&gt;. This is ignored if &lt;code&gt;SSH_KEY&lt;/code&gt; is provided - i.e. the &lt;code&gt;github.com&lt;/code&gt; SSH key is always added if &lt;code&gt;SSH_KEY&lt;/code&gt; is provided&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;SSH_INSECURE_NO_VERIFY_GITHUB_KEY&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;INSECURE -&lt;/strong&gt; If set to &lt;code&gt;true&lt;/code&gt;, does not verify the fingerprint of the github.com SSH key before adding this. This is not recommended!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;SQL_CONFIG_FILE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.sql-config.json&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Filename for &lt;a href=&#34;https://sql-lint.readthedocs.io/en/latest/files/configuration.html&#34;&gt;SQL-Lint configuration&lt;/a&gt; (ex: &lt;code&gt;sql-config.json&lt;/code&gt; , &lt;code&gt;.config.json&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;SQLFLUFF_CONFIG_FILE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/.sqlfluff&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Filename for &lt;a href=&#34;https://docs.sqlfluff.com/en/stable/configuration.html&#34;&gt;SQLFLUFF configuration&lt;/a&gt; (ex: &lt;code&gt;/.sqlfluff&lt;/code&gt;, &lt;code&gt;pyproject.toml&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;SUPPRESS_FILE_TYPE_WARN&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If set to &lt;code&gt;true&lt;/code&gt;, will hide warning messages about files without their proper extensions. Default is &lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;SUPPRESS_POSSUM&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If set to &lt;code&gt;true&lt;/code&gt;, will hide the ASCII possum at top of log output. Default is &lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;TERRAFORM_TERRASCAN_CONFIG_FILE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;terrascan.toml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Filename for &lt;a href=&#34;https://github.com/accurics/terrascan&#34;&gt;terrascan configuration&lt;/a&gt; (ex: &lt;code&gt;terrascan.toml&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;TERRAFORM_TFLINT_CONFIG_FILE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.tflint.hcl&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Filename for &lt;a href=&#34;https://github.com/terraform-linters/tflint&#34;&gt;tfLint configuration&lt;/a&gt; (ex: &lt;code&gt;.tflint.hcl&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;TYPESCRIPT_DEFAULT_STYLE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ts-standard&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to set the default style of TypeScript. Available options: &lt;strong&gt;ts-standard&lt;/strong&gt;/&lt;strong&gt;prettier&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;TYPESCRIPT_ES_CONFIG_FILE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.eslintrc.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Filename for &lt;a href=&#34;https://eslint.org/docs/user-guide/configuring#configuration-file-formats&#34;&gt;ESLint configuration&lt;/a&gt; (ex: &lt;code&gt;.eslintrc.yml&lt;/code&gt;, &lt;code&gt;.eslintrc.json&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;TYPESCRIPT_STANDARD_TSCONFIG_FILE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tsconfig.json&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Filename for &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/tsconfig-json.html&#34;&gt;TypeScript configuration&lt;/a&gt; in &lt;a href=&#34;https://github.com/standard/ts-standard&#34;&gt;ts-standard&lt;/a&gt; (ex: &lt;code&gt;tsconfig.json&lt;/code&gt;, &lt;code&gt;tsconfig.eslint.json&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;USE_FIND_ALGORITHM&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;By default, we use &lt;code&gt;git diff&lt;/code&gt; to find all files in the workspace and what has been updated, this would enable the Linux &lt;code&gt;find&lt;/code&gt; method instead to find all files to lint&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_ALL_CODEBASE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Will parse the entire repository and find all files to validate across all types. &lt;strong&gt;NOTE:&lt;/strong&gt; When set to &lt;code&gt;false&lt;/code&gt;, only &lt;strong&gt;new&lt;/strong&gt; or &lt;strong&gt;edited&lt;/strong&gt; files will be parsed for validation.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_JSCPD_ALL_CODEBASE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If set to &lt;code&gt;true&lt;/code&gt;, will lint the whole codebase with JSCPD. If set to &lt;code&gt;false&lt;/code&gt;, JSCPD will only lint files one by one.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_ANSIBLE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the Ansible language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_ARM&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the ARM language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_BASH&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the Bash language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_BASH_EXEC&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the Bash language to validate if file is stored as executable.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_CPP&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the C++ language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_CLANG_FORMAT&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the C++/C language with clang-format.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_CLOJURE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the Clojure language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_CLOUDFORMATION&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the AWS Cloud Formation language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_COFFEESCRIPT&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the Coffeescript language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_CSHARP&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the C# language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_CSS&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the CSS language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_DART&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the Dart language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_DOCKERFILE_HADOLINT&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the Docker language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_EDITORCONFIG&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process with the EditorConfig.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_ENV&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the ENV language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_GHERKIN&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the Gherkin language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_GITHUB_ACTIONS&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the GitHub Actions.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_GITLEAKS&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the secrets.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_GO&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the Golang language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_GOOGLE_JAVA_FORMAT&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the Java language. (Utilizing: google-java-format)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_GROOVY&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_HTML&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the HTML language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_JAVA&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the Java language. (Utilizing: checkstyle)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_JAVASCRIPT_ES&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the JavaScript language. (Utilizing: eslint)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_JAVASCRIPT_STANDARD&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the JavaScript language. (Utilizing: standard)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_JSCPD&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the JSCPD.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_JSON&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the JSON language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_JSX&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process for jsx files (Utilizing: eslint)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_KOTLIN&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the Kotlin language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_KOTLIN_ANDROID&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the Kotlin language. (Utilizing: &lt;code&gt;ktlint --android&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_KUBERNETES_KUBEVAL&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of Kubernetes descriptors with Kubeval&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_LATEX&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the LaTeX language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_LUA&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_MARKDOWN&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the Markdown language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_NATURAL_LANGUAGE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the natural language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_OPENAPI&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the OpenAPI language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_PERL&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the Perl language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_PHP&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the PHP language. (Utilizing: PHP built-in linter) (keep for backward compatibility)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_PHP_BUILTIN&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the PHP language. (Utilizing: PHP built-in linter)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_PHP_PHPCS&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the PHP language. (Utilizing: PHP CodeSniffer)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_PHP_PHPSTAN&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the PHP language. (Utilizing: PHPStan)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_PHP_PSALM&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the PHP language. (Utilizing: PSalm)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_POWERSHELL&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the Powershell language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_PROTOBUF&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the Protobuf language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_PYTHON&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the Python language. (Utilizing: pylint) (keep for backward compatibility)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_PYTHON_BLACK&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the Python language. (Utilizing: black)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_PYTHON_FLAKE8&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the Python language. (Utilizing: flake8)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_PYTHON_ISORT&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the Python language. (Utilizing: isort)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_PYTHON_MYPY&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the Python language. (Utilizing: mypy)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_PYTHON_PYLINT&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the Python language. (Utilizing: pylint)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_R&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the R language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_RAKU&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the Raku language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_RUBY&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the Ruby language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_RUST_2015&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the Rust language. (edition: 2015)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_RUST_2018&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of Rust language. (edition: 2018)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_RUST_2021&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of Rust language. (edition: 2021)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_RUST_CLIPPY&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the clippy linting process of Rust language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_SCALAFMT&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of Scala language. (Utilizing: scalafmt --test)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_SHELL_SHFMT&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of Shell scripts. (Utilizing: shfmt)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_SNAKEMAKE_LINT&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of Snakefiles. (Utilizing: snakemake --lint)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_SNAKEMAKE_SNAKEFMT&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of Snakefiles. (Utilizing: snakefmt)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_STATES&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process for AWS States Language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_SQL&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the SQL language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_SQLFLUFF&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the SQL language. (Utilizing: sqlfuff)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_TEKTON&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the Tekton language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_TERRAFORM_TERRASCAN&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the Terraform language for security related issues.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_TERRAFORM_TFLINT&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the Terraform language. (Utilizing tflint)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_TERRAGRUNT&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process for Terragrunt files.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_TSX&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process for tsx files (Utilizing: eslint)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_TYPESCRIPT_ES&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the TypeScript language. (Utilizing: eslint)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_TYPESCRIPT_STANDARD&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the TypeScript language. (Utilizing: ts-standard)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_XML&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the XML language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;VALIDATE_YAML&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the linting process of the YAML language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;YAML_CONFIG_FILE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.yaml-lint.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Filename for &lt;a href=&#34;https://yamllint.readthedocs.io/en/stable/configuration.html&#34;&gt;Yamllint configuration&lt;/a&gt; (ex: &lt;code&gt;.yaml-lint.yml&lt;/code&gt;, &lt;code&gt;.yamllint.yml&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;YAML_ERROR_ON_WARNING&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flag to enable or disable the error on warning for Yamllint.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Template rules files&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;strong&gt;GitHub&lt;/strong&gt; &lt;strong&gt;Super-Linter&lt;/strong&gt; &lt;em&gt;with&lt;/em&gt; or &lt;em&gt;without&lt;/em&gt; your own personal rules sets. This allows for greater flexibility for each individual codebase. The Template rules all try to follow the standards we believe should be enabled at the basic level.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Copy &lt;strong&gt;any&lt;/strong&gt; or &lt;strong&gt;all&lt;/strong&gt; template rules files from &lt;code&gt;TEMPLATES/&lt;/code&gt; into the &lt;code&gt;.github/linters/&lt;/code&gt; directory of your repository, and modify them to suit your needs. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The rules files in &lt;a href=&#34;https://github.com/github/super-linter/tree/main/TEMPLATES&#34;&gt;this repository&#39;s &lt;code&gt;TEMPLATE&lt;/code&gt; folder&lt;/a&gt; will be used as defaults should any be omitted.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using your own rules files&lt;/h3&gt; &#xA;&lt;p&gt;If your repository contains your own rules files that live outside of a &lt;code&gt;.github/linters/&lt;/code&gt; directory, you will have to tell Super-Linter where your rules files are located in your repository, and what their filenames are. To learn more, see &lt;a href=&#34;https://raw.githubusercontent.com/github/super-linter/main/docs/using-rules-files.md&#34;&gt;Using your own rules files&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Disabling rules&lt;/h3&gt; &#xA;&lt;p&gt;If you need to disable certain &lt;em&gt;rules&lt;/em&gt; and &lt;em&gt;functionality&lt;/em&gt;, you can view &lt;a href=&#34;https://github.com/github/super-linter/raw/main/docs/disabling-linters.md&#34;&gt;Disable Rules&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Using your own SSH key&lt;/h3&gt; &#xA;&lt;p&gt;If you need to add your own SSH key to the linter because of private dependencies, you can use the &lt;code&gt;SSH_KEY&lt;/code&gt; environment variable. The value of that environment variable should be an SSH private key that has access to your private repositories.&lt;/p&gt; &#xA;&lt;p&gt;You should add this key as an &lt;a href=&#34;https://docs.github.com/en/actions/security-guides/encrypted-secrets&#34;&gt;Encrypted Secret&lt;/a&gt; and access it with the &lt;code&gt;secrets&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;p&gt;Example workflow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;---&#xA;#################################&#xA;#################################&#xA;## Super Linter GitHub Actions ##&#xA;#################################&#xA;#################################&#xA;name: Lint Code Base&#xA;&#xA;#&#xA;# Documentation:&#xA;# https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions&#xA;#&#xA;&#xA;#############################&#xA;# Start the job on all push #&#xA;#############################&#xA;on:&#xA;  push:&#xA;    branches-ignore: [master, main]&#xA;    # Remove the line above to run when pushing to master&#xA;  pull_request:&#xA;    branches: [master, main]&#xA;&#xA;###############&#xA;# Set the Job #&#xA;###############&#xA;jobs:&#xA;  build:&#xA;    # Name the Job&#xA;    name: Lint Code Base&#xA;    # Set the agent to run on&#xA;    runs-on: ubuntu-latest&#xA;&#xA;    ##################&#xA;    # Load all steps #&#xA;    ##################&#xA;    steps:&#xA;      ##########################&#xA;      # Checkout the code base #&#xA;      ##########################&#xA;      - name: Checkout Code&#xA;        uses: actions/checkout@v2&#xA;        with:&#xA;          # Full git history is needed to get a proper list of changed files within `super-linter`&#xA;          fetch-depth: 0&#xA;&#xA;      ################################&#xA;      # Run Linter against code base #&#xA;      ################################&#xA;      - name: Lint Code Base&#xA;        uses: github/super-linter@v4&#xA;        env:&#xA;          VALIDATE_ALL_CODEBASE: false&#xA;          DEFAULT_BRANCH: master&#xA;          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}&#xA;          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Filter linted files&lt;/h2&gt; &#xA;&lt;p&gt;If you need to lint only a folder or exclude some files from linting, you can use optional environment parameters &lt;code&gt;FILTER_REGEX_INCLUDE&lt;/code&gt; and &lt;code&gt;FILTER_REGEX_EXCLUDE&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lint only src folder: &lt;code&gt;FILTER_REGEX_INCLUDE: .*src/.*&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Do not lint files inside test folder: &lt;code&gt;FILTER_REGEX_EXCLUDE: .*test/.*&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Do not lint JavaScript files inside test folder: &lt;code&gt;FILTER_REGEX_EXCLUDE: .*test/.*.js&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- This `README.md` has both markers in the text, so it is considered not generated. --&gt; &#xA;&lt;p&gt;Additionally when &lt;code&gt;IGNORE_GENERATED_FILES=true&lt;/code&gt;, super-linter ignores any file with &lt;code&gt;@generated&lt;/code&gt; marker in it unless the file also has &lt;code&gt;@not-generated&lt;/code&gt; marker. &lt;code&gt;@generated&lt;/code&gt; marker is &lt;a href=&#34;https://engineering.fb.com/2015/08/20/open-source/writing-code-that-writes-code-with-hack-codegen/&#34;&gt;used by Facebook&lt;/a&gt; and some other projects to mark generated files. For example, this file is considered generated:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh&#xA;echo &#34;@generated&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And this file is considered not generated:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh&#xA;echo &#34;@generated&#34; # @not-generated&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Docker Hub&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;strong&gt;Docker&lt;/strong&gt; container that is built from this repository is located at &lt;a href=&#34;https://hub.docker.com/r/github/super-linter&#34;&gt;github/super-linter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Run Super-Linter outside GitHub Actions&lt;/h2&gt; &#xA;&lt;h3&gt;Local (troubleshooting/debugging/enhancements)&lt;/h3&gt; &#xA;&lt;p&gt;If you find that you need to run super-linter locally, you can follow the documentation at &lt;a href=&#34;https://github.com/github/super-linter/raw/main/docs/run-linter-locally.md&#34;&gt;Running super-linter locally&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://raw.githubusercontent.com/github/super-linter/main/#how-it-works&#34;&gt;note&lt;/a&gt; in &lt;strong&gt;How it Works&lt;/strong&gt; to understand more about the &lt;strong&gt;Super-Linter&lt;/strong&gt; linting locally versus via continuous integration.&lt;/p&gt; &#xA;&lt;h3&gt;Azure&lt;/h3&gt; &#xA;&lt;p&gt;Check out this &lt;a href=&#34;https://blog.tyang.org/2020/06/27/use-github-super-linter-in-azure-pipelines/&#34;&gt;article&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;GitLab&lt;/h3&gt; &#xA;&lt;p&gt;Check out this &lt;a href=&#34;https://gitlab.com/snippets/1988376&#34;&gt;snippet&lt;/a&gt; and this Guided Exploration: &lt;a href=&#34;https://gitlab.com/guided-explorations/ci-cd-plugin-extensions/ci-cd-plugin-extension-github-action-super-linter&#34;&gt;GitLab CI CD Extension for Super-Linter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Visual Studio Code&lt;/h3&gt; &#xA;&lt;p&gt;You can checkout this repository using &lt;a href=&#34;https://code.visualstudio.com/docs/remote/containers&#34;&gt;Container Remote Development&lt;/a&gt;, and debug the linter using the &lt;code&gt;Test Linter&lt;/code&gt; task. &lt;img src=&#34;https://user-images.githubusercontent.com/15258962/85165778-2d2ce700-b21b-11ea-803e-3f6709d8e609.gif&#34; alt=&#34;Example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We will also support &lt;a href=&#34;https://github.com/features/codespaces/&#34;&gt;GitHub Codespaces&lt;/a&gt; once it becomes available&lt;/p&gt; &#xA;&lt;h3&gt;SSL Certs&lt;/h3&gt; &#xA;&lt;p&gt;If you need to inject a SSL cert into the trust store, you will need to first copy the cert to &lt;strong&gt;GitHub Secrets&lt;/strong&gt; Once you have copied the plain text certificate into &lt;strong&gt;GitHub Secrets&lt;/strong&gt;, you can use the variable &lt;code&gt;SSL_CERT_SECRET&lt;/code&gt; to point the &lt;strong&gt;Super-Linter&lt;/strong&gt; to the files contents. Once found, it will load the certificate contents to a file, and to the trust store.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Example workflow:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;- name: Lint Code Base&#xA;  uses: github/super-linter@v4&#xA;  env:&#xA;    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}&#xA;    SSL_CERT_SECRET: ${{ secrets.ROOT_CA }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Community Activity&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cauldron.io/project/2083/stats.svg?sanitize=true&#34; alt=&#34;super-linter stats&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;Below are a list of the known limitations for the &lt;strong&gt;GitHub Super-Linter&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Due to being completely packaged at run time, you will not be able to update dependencies or change versions of the enclosed linters and binaries&lt;/li&gt; &#xA; &lt;li&gt;Additional details from &lt;code&gt;package.json&lt;/code&gt; are not read by the &lt;strong&gt;GitHub Super-Linter&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Downloading additional codebases as dependencies from private repositories will fail due to lack of permissions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to contribute&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to help contribute to this &lt;strong&gt;GitHub&lt;/strong&gt; Action, please see &lt;a href=&#34;https://github.com/github/super-linter/raw/main/.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/github/super-linter/raw/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>