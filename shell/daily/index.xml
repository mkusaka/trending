<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-11T02:42:00Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>guysoft/FullPageOS</title>
    <updated>2023-11-11T02:42:00Z</updated>
    <id>tag:github.com,2023-11-11:/guysoft/FullPageOS</id>
    <link href="https://github.com/guysoft/FullPageOS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A raspberrypi distro to display a full page browser on boot&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FullPageOS&lt;/h1&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://github.com/guysoft/FullPageOS/raw/secularstevelogo/media/FullPageOS.png?raw=true&#34;&gt;https://github.com/guysoft/FullPageOS/blob/secularstevelogo/media/FullPageOS.png?raw=true&lt;/a&gt; .. :scale: 50 % .. :alt: FullPageOS logo&lt;/p&gt; &#xA;&lt;p&gt;A &lt;code&gt;Raspberry Pi &amp;lt;http://www.raspberrypi.org/&amp;gt;&lt;/code&gt;_ distribution to display one webpage in full screen. It includes &lt;code&gt;Chromium &amp;lt;https://www.chromium.org/&amp;gt;&lt;/code&gt;_ out of the box and the scripts necessary to load it at boot. This repository contains the source script to generate the distribution out of an existing &lt;code&gt;Raspbian &amp;lt;http://www.raspbian.org/&amp;gt;&lt;/code&gt;_ distro image.&lt;/p&gt; &#xA;&lt;p&gt;FullPageOS started as a fork from &lt;code&gt;OctoPi &amp;lt;https://github.com/guysoft/OctoPi&amp;gt;&lt;/code&gt;&lt;em&gt;, but then joined the distros that use &lt;code&gt;CustomPiOS &amp;lt;https://github.com/guysoft/CustomPiOS&amp;gt;&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Donate&lt;/h2&gt; &#xA;&lt;p&gt;FullPageOS is 100% free and open source and maintained by Guy Sheffer. If its helping your life, your organisation or makes you happy, please consider making a donation. It means I can code more and worry less about my balance. Any amount counts.&lt;/p&gt; &#xA;&lt;p&gt;|paypal|&lt;/p&gt; &#xA;&lt;p&gt;.. |paypal| image:: &lt;a href=&#34;https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif&#34;&gt;https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif&lt;/a&gt; :target: &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=26VJ9MSBH3V3W&amp;amp;source=url&#34;&gt;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=26VJ9MSBH3V3W&amp;amp;source=url&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Where to get it?&lt;/h2&gt; &#xA;&lt;p&gt;Official mirror is &lt;code&gt;here &amp;lt;http://unofficialpi.org/Distros/FullPageOS/&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;Nightly builds are available &lt;code&gt;here &amp;lt;http://unofficialpi.org/Distros/FullPageOS/nightly/&amp;gt;&lt;/code&gt;_ (currently built on demand)&lt;/p&gt; &#xA;&lt;h2&gt;How to use it?&lt;/h2&gt; &#xA;&lt;p&gt;#. Unzip the image and install it to an SD card &lt;code&gt;like any other Raspberry Pi image &amp;lt;https://www.raspberrypi.org/documentation/installation/installing-images/README.md&amp;gt;&lt;/code&gt;_ #. Configure your WiFi by editing &lt;code&gt;fullpageos-wpa-supplicant.txt&lt;/code&gt; on the first partition of the flashed card when using it like a flash drive #. Boot the Pi from the SD card #. Log into your Pi via SSH (it is located at &lt;code&gt;fullpageos.local&lt;/code&gt; &lt;code&gt;if your computer supports bonjour &amp;lt;https://learn.adafruit.com/bonjour-zeroconf-networking-for-windows-and-linux/overview&amp;gt;&lt;/code&gt;_ or the IP address assigned by your router), default username is &#34;pi&#34;, default password is &#34;raspberry&#34; and change the password using the &lt;code&gt;passwd&lt;/code&gt; command. Consider also changing the vnc password as well by &lt;code&gt;x11vnc -storepasswd&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Raspberry Pi 2 and newer or device running Armbian. Older Raspberry Pis are not currently supported. See &lt;code&gt;Raspberry Pi &amp;lt;https://github.com/guysoft/FullPageOS/issues/12&amp;gt;&lt;/code&gt;_ and &lt;code&gt;Raspberry Pi &amp;lt;https://github.com/guysoft/FullPageOS/issues/43&amp;gt;&lt;/code&gt;_.&lt;/li&gt; &#xA; &lt;li&gt;SD card, 4GB or larger, Class 10. (Early June 2020 was the image size 3GB.)&lt;/li&gt; &#xA; &lt;li&gt;2A power supply&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Loads Chromium at boot in full screen&lt;/li&gt; &#xA; &lt;li&gt;Webpage can be changed from /boot/fullpageos.txt &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can use variable &lt;code&gt;{serial}&lt;/code&gt; in the url to get device&#39;s serialnumber in the URL&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Default app is &lt;code&gt;FullPageDashboard &amp;lt;https://github.com/amitdar/FullPageDashboard&amp;gt;&lt;/code&gt;_, which lets you add multiple tabs changes that switch automatically.&lt;/li&gt; &#xA; &lt;li&gt;Ships with preconfigured &lt;code&gt;X11VNC &amp;lt;http://www.karlrunge.com/x11vnc/&amp;gt;&lt;/code&gt;_, for remote connection (password &#39;raspberry&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Specify a custom Splashscreen that gets displayed on booting process instead of Kernel messages/text&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developing&lt;/h2&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;#. `qemu-arm-static &amp;lt;http://packages.debian.org/sid/qemu-user-static&amp;gt;`_&#xA;#. `CustomPiOS &amp;lt;https://github.com/guysoft/CustomPiOS&amp;gt;`_&#xA;#. Downloaded `Raspbian &amp;lt;http://www.raspbian.org/&amp;gt;`_ image.&#xA;#. root privileges for chroot&#xA;#. Bash&#xA;#. realpath&#xA;#. sudo (the script itself calls it, running as root without sudo won&#39;t work)&#xA;#. jq (part of CustomPiOS dependencies)&#xA;&#xA;Build FullPageOS From within FullPageOS / Raspbian / Debian / Ubuntu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;FullPageOS can be built from Debian, Ubuntu, Raspbian, or even FullPageOS. Build requires about 2.5 GB of free space available. You can build it by issuing the following commands::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install coreutils p7zip-full qemu-user-static&#xA;&#xA;git clone https://github.com/guysoft/CustomPiOS.git&#xA;git clone https://github.com/guysoft/FullPageOS.git&#xA;cd FullPageOS/src/image&#xA;wget -c --trust-server-names &#39;https://downloads.raspberrypi.org/raspios_lite_armhf_latest&#39;&#xA;cd ..&#xA;../../CustomPiOS/src/update-custompios-paths&#xA;sudo modprobe loop&#xA;sudo bash -x ./build_dist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Building FullPageOS Variants&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;FullPageOS supports building variants, which are builds with changes from the main release build. An example and other variants are available in the folder ``src/variants/example``.&#xA;&#xA;To build a variant use::&#xA;&#xA;    sudo bash -x ./build_dist [Variant]&#xA;    &#xA;    &#xA;Building Using Docker&#xA;~~~~~~~~~~~~~~~~~~~~~~&#xA;`See Building with docker entry in wiki &amp;lt;https://github.com/guysoft/CustomPiOS/wiki/Building-with-Docker&amp;gt;`_&#xA;&#xA;    &#xA;Building Using Vagrant&#xA;~~~~~~~~~~~~~~~~~~~~~~&#xA;There is a vagrant machine configuration to let build FullPageOS in case your build environment behaves differently. Unless you do extra configuration, vagrant must run as root to have nfs folder sync working.&#xA;&#xA;Make sure you have a version of vagrant later than 1.9!&#xA;&#xA;If you are using older versions of Ubuntu/Debian and not using apt-get `from the download page &amp;lt;https://www.vagrantup.com/downloads.html&amp;gt;`_.&#xA;&#xA;To use it::&#xA;&#xA;    sudo apt-get install vagrant nfs-kernel-server virtualbox&#xA;    sudo vagrant plugin install vagrant-nfs_guest&#xA;    sudo modprobe nfs&#xA;    cd FullPageOS/src/vagrant&#xA;    sudo vagrant up&#xA;&#xA;After provisioning the machine, its also possible to run a nightly build which updates from devel using::&#xA;&#xA;    cd FullPageOS/src/vagrant&#xA;    run_vagrant_build.sh&#xA;    &#xA;To build a variant on the machine simply run::&#xA;&#xA;    cd FullPageOS/src/vagrant&#xA;    run_vagrant_build.sh [Variant]&#xA;&#xA;Usage&#xA;~~~~~&#xA;&#xA;#. If needed, override existing config settings by creating a new file ``src/config.local``. You can override all settings found in ``src/config``. If you need to override the path to the Raspbian image to use for building OctoPi, override the path to be used in ``ZIP_IMG``. By default, the most recent file matching ``*-raspbian.zip`` found in ``src/image`` will be used.&#xA;#. Run ``src/build_dist`` as root.&#xA;#. The final image will be created in ``src/workspace``&#xA;&#xA;&#xA;Remote access&#xA;~~~~~~~~~~~~~&#xA;&#xA;Remote GUI access can be archieved through VNC Viewer. Get the IP of you raspberry ``hostname -I`` via SSH. &#xA;&#xA;The password is ``raspberry`` and is independent of password you have set for your user(s). Change the password by ``x11vnc -storepasswd`` via SSH.&#xA;&#xA;&#xA;Install Chrome Extensions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Press &lt;code&gt;ctrl&lt;/code&gt; + &lt;code&gt;t&lt;/code&gt;, it will open an new tab.&lt;/p&gt; &#xA;&lt;p&gt;You can either install extensions frome &lt;code&gt;Chrome Web Store &amp;lt;https://chrome.google.com/webstore/category/extensions&amp;gt;&lt;/code&gt;_ or &lt;code&gt;install your own extension &amp;lt;https://support.google.com/chrome_webstore/answer/2664769?hl=en&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;If you which to install your own extension then you can transfer the build files via tools like &lt;code&gt;rcp&lt;/code&gt;, &lt;code&gt;rsync&lt;/code&gt; etc.&lt;/p&gt; &#xA;&lt;p&gt;Example::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rsync -av &amp;lt;extension-build-folder&amp;gt;/ pi@fullpageos.local:extensions/&amp;lt;extension-name&amp;gt;/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Code contribution would be appreciated!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Ridter/TorProxy</title>
    <updated>2023-11-11T02:42:00Z</updated>
    <id>tag:github.com,2023-11-11:/Ridter/TorProxy</id>
    <link href="https://github.com/Ridter/TorProxy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;利用Tor搭建Socks5代理，动态切换IP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;一键搭建动态代理&lt;/h1&gt; &#xA;&lt;h2&gt;利用Tor实现动态代理&lt;/h2&gt; &#xA;&lt;h3&gt;Torrc&lt;/h3&gt; &#xA;&lt;p&gt;主要配置如下:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SOCKSPort 0.0.0.0:9050 # Bind to this address:port too.&#xA;SOCKSPort 0.0.0.0:38801 #这里开启多个tor端口，对于tor来说，每个端口会使用不同的链路，也就是不同的代理IP&#xA;SOCKSPort 0.0.0.0:38802&#xA;SOCKSPort 0.0.0.0:38803&#xA;SOCKSPort 0.0.0.0:38804&#xA;SOCKSPort 0.0.0.0:38805&#xA;SOCKSPort 0.0.0.0:38806&#xA;SOCKSPort 0.0.0.0:38807&#xA;SOCKSPort 0.0.0.0:38808&#xA;SOCKSPort 0.0.0.0:38809&#xA;SOCKSPort 0.0.0.0:38810&#xA;&#xA;NewCircuitPeriod 30 #对于每个端口来说，每30秒重新创建一个新链路，也就是换一个新IP&#xA;CircuitBuildTimeout 10 #对于新建每个链路的过程来说，建立程序超过10秒则直接放弃，保障了连接到线路的质量&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;xray&lt;/h3&gt; &#xA;&lt;p&gt;利用xray的对不同协议的支持，以及inbound，outbound的灵活性，配置出站连接使用tor的socks,相关配置如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;protocol&#34;: &#34;socks&#34;,&#xA;    &#34;settings&#34;: {&#xA;    &#34;servers&#34;: [&#xA;        {&#xA;        &#34;address&#34;: &#34;tor-privoxy&#34;,&#xA;        &#34;port&#34;: 38801&#xA;        },&#xA;        {&#xA;        &#34;address&#34;: &#34;tor-privoxy&#34;,&#xA;        &#34;port&#34;: 38802&#xA;        },&#xA;        {&#xA;        &#34;address&#34;: &#34;tor-privoxy&#34;,&#xA;        &#34;port&#34;: 38803&#xA;        },&#xA;        {&#xA;        &#34;address&#34;: &#34;tor-privoxy&#34;,&#xA;        &#34;port&#34;: 38804&#xA;        },&#xA;        {&#xA;        &#34;address&#34;: &#34;tor-privoxy&#34;,&#xA;        &#34;port&#34;: 38805&#xA;        },&#xA;        {&#xA;        &#34;address&#34;: &#34;tor-privoxy&#34;,&#xA;        &#34;port&#34;: 38806&#xA;        },&#xA;        {&#xA;        &#34;address&#34;: &#34;tor-privoxy&#34;,&#xA;        &#34;port&#34;: 38807&#xA;        },&#xA;        {&#xA;        &#34;address&#34;: &#34;tor-privoxy&#34;,&#xA;        &#34;port&#34;: 38808&#xA;        },&#xA;        {&#xA;        &#34;address&#34;: &#34;tor-privoxy&#34;,&#xA;        &#34;port&#34;: 38809&#xA;        },&#xA;        {&#xA;        &#34;address&#34;: &#34;tor-privoxy&#34;,&#xA;        &#34;port&#34;: 38810&#xA;        }&#xA;    ]&#xA;    },&#xA;    &#34;tag&#34;: &#34;socks_out&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;再配置代理规则，则可实现通过tor进行代理，规则配置所有domain和ip&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;domain&#34;: [&#xA;        &#34;regexp:.*&#34;&#xA;    ],&#xA;    &#34;outboundTag&#34;: &#34;socks_out&#34;,&#xA;    &#34;type&#34;: &#34;field&#34;&#xA;    },&#xA;    {&#xA;    &#34;ip&#34;: [&#xA;        &#34;0.0.0.0/0&#34;,&#xA;        &#34;::/0&#34;&#xA;    ],&#xA;    &#34;outboundTag&#34;: &#34;socks_out&#34;,&#xA;    &#34;type&#34;: &#34;field&#34;&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;部署&lt;/h2&gt; &#xA;&lt;p&gt;部署方式使用docker部署，只需一条命令即可&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo ./init.sh 6666             #在6666端口开启socks5端口，无认证&#xA;sudo ./init.sh 6666 user pass   #在6666端口开启socks5端口，帐号密码认证，帐号密码为: user/pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Ridter/TorProxy/main/assets/image.png&#34; alt=&#34;Alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;使用&lt;/h2&gt; &#xA;&lt;p&gt;使用方式为正常的socks5使用方法，请求ip为tor的ip，示例如下：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Ridter/TorProxy/main/assets/image-1.png&#34; alt=&#34;Alt text&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gao497290234/clash-for-linux</title>
    <updated>2023-11-11T02:42:00Z</updated>
    <id>tag:github.com,2023-11-11:/gao497290234/clash-for-linux</id>
    <link href="https://github.com/gao497290234/clash-for-linux" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Linux 端使用 Clash 作为代理工具&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;项目介绍&lt;/h1&gt; &#xA;&lt;p&gt;此项目是通过使用开源项目&lt;a href=&#34;https://github.com/Dreamacro/clash&#34;&gt;clash&lt;/a&gt;作为核心程序，再结合脚本实现简单的代理功能。&lt;/p&gt; &#xA;&lt;p&gt;主要是为了解决我们在服务器上下载GitHub等一些国外资源速度慢的问题。&lt;/p&gt; &#xA;&lt;h1&gt;使用教程&lt;/h1&gt; &#xA;&lt;h3&gt;下载项目&lt;/h3&gt; &#xA;&lt;p&gt;下载项目&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/wanhebin/clash-for-linux.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;进入到项目目录，编辑&lt;code&gt;start.sh&lt;/code&gt;脚本文件，修改变量&lt;code&gt;URL&lt;/code&gt;的值。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd clash-for-linux&#xA;$ vim start.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;启动程序&lt;/h3&gt; &#xA;&lt;p&gt;直接运行脚本文件&lt;code&gt;start.sh&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;进入项目目录&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd clash-for-linux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;运行启动脚本&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sh start.sh&#xA;配置文件config.yaml下载成功！                              [  OK  ]&#xA;服务启动成功！                                             [  OK  ]&#xA;系统代理http_proxy/https_proxy设置成功，请在当前窗口执行以下命令加载环境变量:&#xA;&#xA;source /etc/profile.d/clash.sh&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ source /etc/profile.d/clash.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;检查服务端口&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ netstat -tln | grep -E &#39;9090|789.&#39;&#xA;tcp        0      0 127.0.0.1:9090          0.0.0.0:*               LISTEN     &#xA;tcp6       0      0 :::7890                 :::*                    LISTEN     &#xA;tcp6       0      0 :::7891                 :::*                    LISTEN     &#xA;tcp6       0      0 :::7892                 :::*                    LISTEN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;检查环境变量&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ env | grep -E &#39;http_proxy|https_proxy&#39;&#xA;http_proxy=http://127.0.0.1:7890&#xA;https_proxy=http://127.0.0.1:7890&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;以上步鄹如果正常，说明服务clash程序启动成功，现在就可以体验高速下载github资源了。&lt;/p&gt; &#xA;&lt;h3&gt;停止程序&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;进入项目目录&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd clash-for-linux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;关闭服务&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sh shutdown.sh&#xA;服务关闭成功，请在已打开的窗口执行以下命令：&#xA;unset http_proxy&#xA;unset https_proxy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ unset http_proxy&#xA;$ unset https_proxy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;然后检查程序端口、进程以及环境变量&lt;code&gt;http_proxy|https_proxy&lt;/code&gt;，若都没则说明服务正常关闭。&lt;/p&gt; &#xA;&lt;h1&gt;使用须知&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;此项目不提供任何订阅信息，请自行准备Clash订阅地址。&lt;/li&gt; &#xA; &lt;li&gt;运行前请手动更改&lt;code&gt;start.sh&lt;/code&gt;脚本中的URL变量值，否则无法正常运行。&lt;/li&gt; &#xA; &lt;li&gt;当前只在RHEL系列Linux系统中测试过，其他系列可能需要适当修改脚本。&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>