<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-18T01:41:21Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>poettering/diskomator</title>
    <updated>2023-11-18T01:41:21Z</updated>
    <id>tag:github.com,2023-11-18:/poettering/diskomator</id>
    <link href="https://github.com/poettering/diskomator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🦠 NVMe-TCP at your fingertips 🦠&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Diskomator&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;🦠 NVMe-TCP at your fingertips 🦠&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Diskomator is an OS-in-an-EFI-binary whose only job is to expose all local disks as NVMe-TCP network block devices, as they appear.&lt;/p&gt; &#xA;&lt;p&gt;When built, it results in a single UEFI binary, that embeds a full OS root file system so that it does not need any further disk access while it runs. The EFI binary can be invoked directly from the UEFI firmware, for example by placing it an EFI System Partition (ESP). The OS root file system contains:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;A Fedora Linux OS tree&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A current version of systemd (v255-rc2), including &lt;a href=&#34;https://www.freedesktop.org/software/systemd/man/latest/systemd-storagetm.html&#34;&gt;systemd-storagetm&lt;/a&gt; and &lt;a href=&#34;https://www.freedesktop.org/software/systemd/man/latest/systemd-networkd.html&#34;&gt;systemd-networkd&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;An SSH server (just to make things easy to debug)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The Plymouth boot splash tool to make things pretty at boot and during runtime.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The image is built via &lt;a href=&#34;https://github.com/systemd/mkosi&#34;&gt;&lt;code&gt;mkosi&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All this then does is boot up into a minimal mode where &lt;code&gt;systemd-storagetm&lt;/code&gt; and &lt;code&gt;systemd-networkd&lt;/code&gt; are running. The former exposes all local block devices via NVMe-TCP, the latter configures all local network devices.&lt;/p&gt; &#xA;&lt;p&gt;The resulting EFI binary is relatively large (~300M), because it embeds all kinds of network drivers and graphics devices, plus their firmware. To keep things simply this stays close to upstream Fedora, without any attempts to minimize footprint.&lt;/p&gt; &#xA;&lt;h2&gt;Why Even?&lt;/h2&gt; &#xA;&lt;p&gt;My personal usecase for this goes something like this: I build immutable OS images for physical systems regularly and try them out. I could always write them to an USB stick on my development machine and then unplug it, and plug it into my testing machine. But that&#39;s cumbersome. My way out: just have a way how the test machine&#39;s disk can be written to directly from my development machine. And that&#39;s what Diskomator is.&lt;/p&gt; &#xA;&lt;p&gt;Other usecases:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Debugging&lt;/li&gt; &#xA; &lt;li&gt;Remote installation of OSes&lt;/li&gt; &#xA; &lt;li&gt;Turn your 2000 USD laptop into a very expensive USB stick&lt;/li&gt; &#xA; &lt;li&gt;It&#39;s a fantastic show-case for UKIs, &lt;code&gt;mkosi&lt;/code&gt;, Linux and &lt;code&gt;systemd&lt;/code&gt; I think&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Caveats&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;⚠️ This currently does not enable NVME authentication nor encryption. If you boot from this your disk will be readable and writable to anyone with access to your local network!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;⚠️ The &lt;code&gt;root&lt;/code&gt; user is accessible via SSH with the password &lt;em&gt;test&lt;/em&gt;, again to anyone with access to your local network!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;⚠️ A debug shell is always available on Alt-F9.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;This requires an EFI system, with a bit of RAM. After all the OS is entirely kept in memory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The resulting EFI binary is not SecureBoot signed, you thus have to disable SecureBoot if you want to use this. (You can easily add that though, if you have a suitable key pair. &lt;code&gt;mkosi&lt;/code&gt; will help with that, see documentation.)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll need:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;A build tree of a current systemd development version, to get the newest version of &lt;code&gt;systemd-repart&lt;/code&gt;. Once distributions started to regularly ship v255, this manual step will go away. On a Fedora system you&#39;d do it like this:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo dnf builddep systemd&#xA;git clone https://github.com/systemd/systemd.git&#xA;cd systemd&#xA;meson build&#xA;ninja -C build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And with that you should have a version of systemd built in the &lt;code&gt;build&lt;/code&gt; sub-directory. No need to install this, BTW, just keep it around, we can use the build tree directly in step 4.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;v19 of &lt;a href=&#34;https://github.com/systemd/mkosi&#34;&gt;&lt;code&gt;mkosi&lt;/code&gt;&lt;/a&gt; or newer. If your distribution doesn&#39;t have that yet, you can trivially check it out too:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo dnf builddep mkosi&#xA;git clone https://github.com/systemd/mkosi.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A checkout of &lt;code&gt;diskomator&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/poettering/diskomator.git&#xA;cd diskomator&#xA;git submodule update --init&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now edit &lt;code&gt;mkosi.conf&lt;/code&gt; in the diskomator directory locally on your system, and adjust the (by default commented) &lt;code&gt;ExtraSearchPaths=&lt;/code&gt; line to point to the build tree from step 1.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You are now ready to build the image. In the &lt;code&gt;diskomator&lt;/code&gt; git checkout run:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo ../mkosi/bin/mkosi -T -i -f build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;(The &lt;code&gt;-T -i -f&lt;/code&gt; you can theoretically drop BTW, I only specify them here since it improves rebuild times in case you hack on this.)&lt;/p&gt; &lt;p&gt;Adjust the &lt;code&gt;mkosi&lt;/code&gt; path to match where you placed the checkout tree from step 3.&lt;/p&gt; &lt;p&gt;Once this completes you&#39;ll have two things in the &lt;code&gt;mkosi.output/&lt;/code&gt; subdirectory: &lt;code&gt;diskomator.efi&lt;/code&gt; and &lt;code&gt;diskomator.raw&lt;/code&gt;. The former is the EFI binary that we care about. The latter is a GPT disk image with an ESP with that very EFI binary in it (and no other partitions). The latter you can directly &lt;code&gt;dd&lt;/code&gt; to an USB stick if you like, to boot another system from.&lt;/p&gt; &lt;p&gt;You can even let &lt;code&gt;mkosi&lt;/code&gt; do the &lt;code&gt;dd&lt;/code&gt;&#39;ing for you. Which is actually a good idea, since it will make sure the image is adapted to your chosen target device&#39;s sector and disk size 🔥🔥🔥:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo ../mkosi/bin/mkosi burn /dev/disk/by-id/usb-SanDisk_Ultra_Fit_4C530000190505109123-0\:0&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Replace the last argument in that command line by the path to the device node you want to write this to. As you can see I have a SanDisk USB stick I am testing this with.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;And that&#39;s really all.&lt;/p&gt; &#xA;&lt;p&gt;Once systemd v255 and mkosi v19 entered the various distributions step 1, 2 and 4 will become unnecessary (and the git submodule thing from step 3). Once that happened you only have to do 3 and 5.&lt;/p&gt; &#xA;&lt;h2&gt;Future&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;d like to live to see a future where people build appliances like this for various purposes, not just this specific NVMe one. For example, a nice thing to have would be an appliance whose only job is to make all local displays available via Miracast. I hope this repository is inspiration enough for an interested soul, to get this off the ground.&lt;/p&gt; &#xA;&lt;p&gt;Ideally, distributions would build images like this on their own. Specifically, I&#39;d be delighted if Fedora (for example) would build an image like this and SecureBoot sign it, within their own build infrastructure and make that an offering to their users.&lt;/p&gt; &#xA;&lt;p&gt;In the meantime it might be nice to build diskomator on the usually available Open Source build infrastructure somewhere, so that people can just download a &lt;code&gt;.raw&lt;/code&gt; or &lt;code&gt;.efi&lt;/code&gt; file, instead of the cumbersome build steps listed above. Anyone interested in setting this up?&lt;/p&gt; &#xA;&lt;p&gt;Anyway, I hope this piqued your interest, now run and do with all this whatever you want!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bin456789/reinstall</title>
    <updated>2023-11-18T01:41:21Z</updated>
    <id>tag:github.com,2023-11-18:/bin456789/reinstall</id>
    <link href="https://github.com/bin456789/reinstall" rel="alternate"></link>
    <summary type="html">&lt;p&gt;又一个一键重装脚本&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;reinstall&lt;/h1&gt; &#xA;&lt;p&gt;又一个重装脚本&lt;/p&gt; &#xA;&lt;h2&gt;亮点&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;默认使用官方安装程序，不满足安装程序内存要求时，将使用官方云镜像 (Cloud Image)&lt;/li&gt; &#xA; &lt;li&gt;不含第三方链接和自制包，所有资源均实时从源站点获得&lt;/li&gt; &#xA; &lt;li&gt;适配 512M + 5G 小鸡，并支持 256M 小鸡安装 Alpine&lt;/li&gt; &#xA; &lt;li&gt;支持用官方 iso 安装 Windows (不支持 ARM)&lt;/li&gt; &#xA; &lt;li&gt;支持 Windows 重装成 Linux，也可重装 Windows&lt;/li&gt; &#xA; &lt;li&gt;支持 BIOS、EFI、ARM (ARM 不支持安装 Windows)&lt;/li&gt; &#xA; &lt;li&gt;原系统分区支持 LVM、Btrfs&lt;/li&gt; &#xA; &lt;li&gt;支持安装 Alpine、Arch、openSUSE、Gentoo，也可从这些系统安装&lt;/li&gt; &#xA; &lt;li&gt;可通过 SSH、浏览器、串行控制台、后台 VNC 查看 DD、云镜像安装进度&lt;/li&gt; &#xA; &lt;li&gt;有很多注释&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Linux 下使用&lt;/h2&gt; &#xA;&lt;h3&gt;下载&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -O https://raw.githubusercontent.com/bin456789/reinstall/main/reinstall.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;下载 (国内)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -O https://ghps.cc/https://raw.githubusercontent.com/bin456789/reinstall/main/reinstall.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;用法 1: 安装 Linux&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash reinstall.sh centos   7|8|9  (8|9 为 stream 版本)&#xA;                  alma     8|9&#xA;                  rocky    8|9&#xA;                  fedora   37|38&#xA;                  debian   10|11|12&#xA;                  ubuntu   20.04|22.04&#xA;                  alpine   3.16|3.17|3.18&#xA;                  opensuse 15.4|15.5|tumbleweed (只支持云镜像)&#xA;                  arch     (只支持 amd64 云镜像)&#xA;                  gentoo   (只支持 amd64 云镜像)&#xA;&#xA;                  不输入版本号，则安装最新版&#xA;&#xA;可选参数:         --ci     强制使用云镜像&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;用法 2: DD&lt;/h3&gt; &#xA;&lt;p&gt;支持 gzip、xz 格式&lt;/p&gt; &#xA;&lt;p&gt;支持自动配置静态 IP、扩展系统盘&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash reinstall.sh dd --img=https://example.com/xxx.xz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;用法 3：重启到 Alpine 救援系统 (Live OS)&lt;/h3&gt; &#xA;&lt;p&gt;可用 ssh 连接，进行手动 DD、修改分区、手动安装 Arch Linux 等操作&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash reinstall.sh alpine --hold=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;用法 4：重启到 netboot.xyz&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash reinstall.sh netboot.xyz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;用法 5: 安装 Windows ISO&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash reinstall.sh windows \&#xA;     --iso=&#39;https://example.com/en-us_windows_10_enterprise_ltsc_2021_x64_dvd_d289cf96.iso&#39; \&#xA;     --image-name=&#39;Windows 10 Enterprise LTSC 2021&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;参数说明&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;--iso&lt;/code&gt; 原版镜像链接，无需集成 VirtIO、Xen、AWS、GCP 驱动&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--image-name&lt;/code&gt; 指定要安装的映像，不区分大小写，两边要有引号，例如：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;&#39;Windows 7 Ultimate&#39;&#xA;&#39;Windows 10 Enterprise LTSC 2021&#39;&#xA;&#39;Windows 11 Pro&#39;&#xA;&#39;Windows Server 2022 SERVERDATACENTER&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;使用 &lt;code&gt;Dism++&lt;/code&gt; 文件菜单 &amp;gt; 打开映像文件，选择要安装的 iso，可以得到映像名称&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/bin456789/reinstall/assets/7548515/5aae0a9b-61e2-4f66-bb98-d470a6beaac2&#34; alt=&#34;image-name&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;其它说明&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;测试成功的系统有 7 10 11 2022，测试平台为 vultr (bios)、甲骨文 (efi)、aws t2 (xen)、aws t3 (nitro)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;支持 32/64 位系统，UEFI 机器只支持 64 位&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;可绕过 Windows 11 硬件限制&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;实测不支持 ARM&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;zh-cn_windows_10_enterprise_ltsc_2021_x64_dvd_033b7312.iso&lt;/code&gt; 此镜像安装后 &lt;code&gt;wsappx&lt;/code&gt; 进程会长期占用 CPU&lt;/p&gt; &lt;p&gt;这是镜像的问题，解决方法是安装 &lt;code&gt;VCLibs&lt;/code&gt; 库&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://www.google.com/search?q=ltsc+wsappx&#34;&gt;https://www.google.com/search?q=ltsc+wsappx&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;以下网站可找到 iso 链接&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://archive.org&#34;&gt;https://archive.org&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://massgrave.dev/genuine-installation-media.html&#34;&gt;https://massgrave.dev/genuine-installation-media.html&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Windows 下使用&lt;/h2&gt; &#xA;&lt;p&gt;管理员权限运行 &lt;code&gt;cmd&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;如果运行的是 &lt;code&gt;powershell&lt;/code&gt;，先进入 &lt;code&gt;cmd&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;下载&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-batch&#34;&gt;certutil -urlcache -f -split https://raw.githubusercontent.com/bin456789/reinstall/main/reinstall.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;下载（国内）&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-batch&#34;&gt;certutil -urlcache -f -split https://ghps.cc/https://raw.githubusercontent.com/bin456789/reinstall/main/reinstall.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;如果无法下载&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;关闭 Windows Defender 实时保护&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;更新 SSL 根证书&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-batch&#34;&gt;certutil -generateSSTFromWU root.sst&#xA;certutil -addstore Root root.sst&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;链接另存为&lt;/code&gt;、&lt;code&gt;远程桌面&lt;/code&gt; 复制以下两个文件&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bin456789/reinstall/main/reinstall.bat&#34;&gt;https://raw.githubusercontent.com/bin456789/reinstall/main/reinstall.bat&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bin456789/reinstall/main/reinstall.sh&#34;&gt;https://raw.githubusercontent.com/bin456789/reinstall/main/reinstall.sh&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;使用&lt;/h3&gt; &#xA;&lt;p&gt;所有功能均可在 Windows 下使用，参数和 Linux 下使用一样&lt;/p&gt; &#xA;&lt;p&gt;以安装 centos 7 为例&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-batch&#34;&gt;reinstall.bat centos-7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;内存要求&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;系统&lt;/th&gt; &#xA;   &lt;th&gt;传统安装&lt;/th&gt; &#xA;   &lt;th&gt;云镜像&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Debian&lt;/td&gt; &#xA;   &lt;td&gt;384M&lt;/td&gt; &#xA;   &lt;td&gt;512M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ubuntu&lt;/td&gt; &#xA;   &lt;td&gt;1G&lt;/td&gt; &#xA;   &lt;td&gt;512M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CentOS / Alma / Rocky / Fedora&lt;/td&gt; &#xA;   &lt;td&gt;1G&lt;/td&gt; &#xA;   &lt;td&gt;512M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Alpine&lt;/td&gt; &#xA;   &lt;td&gt;256M&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;openSUSE&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;512M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Arch&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;512M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Gentoo&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;512M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;1G&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;网络要求&lt;/h2&gt; &#xA;&lt;p&gt;用&lt;code&gt;安装模式&lt;/code&gt;安装 Linux 要有 DHCPv4&lt;/p&gt; &#xA;&lt;p&gt;其他情况支持静态 IP、IPv6（包括安装 Alpine、云镜像、Windows iso、dd）&lt;/p&gt; &#xA;&lt;p&gt;运行脚本时不需要填写静态 IP 地址&lt;/p&gt; &#xA;&lt;h2&gt;虚拟化要求&lt;/h2&gt; &#xA;&lt;p&gt;不支持 OpenVZ、LXC 虚拟机&lt;/p&gt; &#xA;&lt;p&gt;请使用 &lt;a href=&#34;https://github.com/LloydAsp/OsMutation&#34;&gt;https://github.com/LloydAsp/OsMutation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;默认密码&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;系统&lt;/th&gt; &#xA;   &lt;th&gt;用户名&lt;/th&gt; &#xA;   &lt;th&gt;密码&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;root&lt;/td&gt; &#xA;   &lt;td&gt;123@@@&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows (iso 安装)&lt;/td&gt; &#xA;   &lt;td&gt;administrator&lt;/td&gt; &#xA;   &lt;td&gt;123@@@&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;安装模式：静态 IP、IPv6、多网卡&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>codingMustache/zshMusic</title>
    <updated>2023-11-18T01:41:21Z</updated>
    <id>tag:github.com,2023-11-18:/codingMustache/zshMusic</id>
    <link href="https://github.com/codingMustache/zshMusic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Apple Music CLI tool to control your apple Music through the terminal.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;zshMusic&lt;/h1&gt; &#xA;&lt;p&gt;A cli tool to use apple music through your command line. Feel free to make a branch and make any kind of modifications and make a PR to it, tbh I&#39;ll most likely merge it, or don&#39;t. This will remain unlicensed so do whatever you want with it.&lt;/p&gt; &#xA;&lt;h2&gt;How to install&lt;/h2&gt; &#xA;&lt;p&gt;Download or clone down the repo &amp;amp; add this line to your .zshrc file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source ~/add-to-your-.zshrc/zshMusic/zshmusic.zsh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;COMMAND&lt;/th&gt; &#xA;   &lt;th&gt;CMD&lt;/th&gt; &#xA;   &lt;th&gt;DESCRIPTION&lt;/th&gt; &#xA;   &lt;th&gt;USAGE&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-open&lt;/td&gt; &#xA;   &lt;td&gt;-o&lt;/td&gt; &#xA;   &lt;td&gt;Launches Music&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;music -o&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-vol&lt;/td&gt; &#xA;   &lt;td&gt;-v&lt;/td&gt; &#xA;   &lt;td&gt;Changes volume&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;music -v 10&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-artist&lt;/td&gt; &#xA;   &lt;td&gt;-a&lt;/td&gt; &#xA;   &lt;td&gt;Plays artist from library&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;music -a metallica&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-stop&lt;/td&gt; &#xA;   &lt;td&gt;-s&lt;/td&gt; &#xA;   &lt;td&gt;Pauses Music&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;music -s&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-play&lt;/td&gt; &#xA;   &lt;td&gt;-p&lt;/td&gt; &#xA;   &lt;td&gt;Plays Music&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;music -p&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-next&lt;/td&gt; &#xA;   &lt;td&gt;-n&lt;/td&gt; &#xA;   &lt;td&gt;Skips song&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;music -n&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-current&lt;/td&gt; &#xA;   &lt;td&gt;-c&lt;/td&gt; &#xA;   &lt;td&gt;Shows current track&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;music -c&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>