<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-07T01:46:37Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>not-poma/lazyshell</title>
    <updated>2023-03-07T01:46:37Z</updated>
    <id>tag:github.com,2023-03-07:/not-poma/lazyshell</id>
    <link href="https://github.com/not-poma/lazyshell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GPT powered Zsh completion script&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LazyShell&lt;/h1&gt; &#xA;&lt;p&gt;LazyShell is a GPT powered utility for Zsh that helps you write and modify console commands using natural language. Perfect for those times when you can&#39;t remember the command line arguments for &lt;code&gt;tar&lt;/code&gt; and &lt;code&gt;ffmpeg&lt;/code&gt;, or when you just want to save time by having AI do the heavy lifting. The tool uses your current command line content (if any) as a base for your query, so you can issue modification requests for it. Invoke the completion with ALT+G hotkey; you still have to manually press enter to execute the suggested command.&lt;/p&gt; &#xA;&lt;p&gt;It also can use GPT to explain what the current command does. Invoke the explanation with ALT+E hotkey.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/not-poma/lazyshell/master/screenshot.gif&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;LazyShell is in alpha stage and may contain bugs. Currently only Zsh is supported.&lt;/p&gt; &#xA;&lt;h1&gt;How to use&lt;/h1&gt; &#xA;&lt;h2&gt;Completion&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Hit ALT+G to invoke the completion. The current command line content will be used as a base for your query.&lt;/li&gt; &#xA; &lt;li&gt;You can then write a natural language version of what you want to accomplish.&lt;/li&gt; &#xA; &lt;li&gt;Hit enter.&lt;/li&gt; &#xA; &lt;li&gt;The suggested command will be inserted into the command line.&lt;/li&gt; &#xA; &lt;li&gt;Hit enter to execute it, or continue modifying it.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Query examples for completion:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Unpack download.tar.gz&#xA;&#xA;Start nginx server in docker&#xA;    Mount current dir&#xA;&#xA;Speed up the video 2x using ffmpeg&#xA;    Remove audio track&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Explanation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Write down a command you want to understand.&lt;/li&gt; &#xA; &lt;li&gt;Hit ALT+E to invoke the explanation module.&lt;/li&gt; &#xA; &lt;li&gt;Hit any key to modify the command (the explanation will disappear)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Get OpenAI API key from &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;OpenAI dashboard&lt;/a&gt;. All new OpenAI accounts get $18 balance for testing.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# install prerequisites&#xA;brew install curl jq&#xA;&#xA;# Download the script&#xA;curl -o ~/.lazyshell.zsh https://raw.githubusercontent.com/not-poma/lazyshell/master/lazyshell.zsh&#xA;&#xA;# Add the following lines to your .zshrc&#xA;export OPENAI_API_KEY=&amp;lt;your_api_key&amp;gt;&#xA;[ -f ~/.lazyshell.zsh ] &amp;amp;&amp;amp; source ~/.lazyshell.zsh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After that restart your shell. You can invoke the completion with ALT+G hotkey and explanation with ALT+E.&lt;/p&gt; &#xA;&lt;p&gt;Note: if you&#39;re on macOS and your terminal prints &lt;code&gt;Â©&lt;/code&gt; when you press the hotkey, it means the OS intercepts the key combination first and you need to disable this behavior.&lt;/p&gt; &#xA;&lt;h2&gt;Alternate Key Bindings&lt;/h2&gt; &#xA;&lt;p&gt;You can change the key bindings by modifying the lines starting with &lt;code&gt;bindkey&lt;/code&gt; in the script.&#39;&lt;/p&gt; &#xA;&lt;p&gt;Make sure it doesn&#39;t conflict with your existing key bindings. To check, run &lt;code&gt;bindkey -L&lt;/code&gt; in your shell.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;This script is a crude hack, so any help is appreciated, especially if you can write zsh completion scripts. Feel free to open an issue or a pull request.&lt;/p&gt; &#xA;&lt;p&gt;Inspired by &lt;a href=&#34;https://github.com/TheR1D/shell_gpt&#34;&gt;https://github.com/TheR1D/shell_gpt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;TODO&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; support for other shells&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; support keyboard interrupts&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; token streaming&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; companion tool that explains the current command line contents&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; multiline formatting and syntax highlighting for the explanations&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; allow query editing while the previous one is in progress&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; make some kind of preview before replacing the buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; better json escaping&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; better error handling&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; query history&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; create brew package&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; maybe choose a better default shortcut?&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Joshua-Riek/ubuntu-orange-pi5</title>
    <updated>2023-03-07T01:46:37Z</updated>
    <id>tag:github.com,2023-03-07:/Joshua-Riek/ubuntu-orange-pi5</id>
    <link href="https://github.com/Joshua-Riek/ubuntu-orange-pi5" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ubuntu 22.04 for the Orange Pi5&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;This repository provides a pre-installed Ubuntu 22.04 desktop/server image for the &lt;a href=&#34;http://www.orangepi.org/html/hardWare/computerAndMicrocontrollers/details/Orange-Pi-5.html&#34;&gt;Orange Pi 5&lt;/a&gt;, offering a default Ubuntu experience. With this port, you can experience the power and stability of Ubuntu on your Orange Pi 5, making it an excellent choice for a wide range of projects and applications.&lt;/p&gt; &#xA;&lt;p&gt;This device is still new and undergoing continuous development. As a result, you may encounter bugs or missing features. I&#39;ll do my best to update this project with the most recent changes and fixes. If you find problems, please report them in the issues section, and I will be happy to assist!&lt;/p&gt; &#xA;&lt;img src=&#34;https://i.imgur.com/eQnRu1t.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;h2&gt;Highlights&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Package management via apt using the official Ubuntu repositories&lt;/li&gt; &#xA; &lt;li&gt;Uses the 5.10.110 Linux kernel built with arm64 flags&lt;/li&gt; &#xA; &lt;li&gt;Boot from an SD Card, USB, or NVMe SSD&lt;/li&gt; &#xA; &lt;li&gt;3D video hardware acceleration support via panfork&lt;/li&gt; &#xA; &lt;li&gt;Fully working GNOME desktop using wayland&lt;/li&gt; &#xA; &lt;li&gt;Chromium browser with smooth 4k video playback&lt;/li&gt; &#xA; &lt;li&gt;MPV video player capable of smooth 4k video playback&lt;/li&gt; &#xA; &lt;li&gt;Gstreamer can be used as an alternative 4k video player from the command line&lt;/li&gt; &#xA; &lt;li&gt;Working Bluetooth and WiFi from the Orange Pi5 PCIe WiFi 6.0 module (AP6275P)&lt;/li&gt; &#xA; &lt;li&gt;On board Microphone&lt;/li&gt; &#xA; &lt;li&gt;Audio over HDMI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prepare an SD Card&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you use a good, reliable, and fast SD card. For example, suppose you encounter boot or stability troubles. Most of the time, this is due to either an insufficient power supply or related to your SD card (bad card, bad card reader, something went wrong when burning the image, or the card is too slow).&lt;/p&gt; &#xA;&lt;p&gt;Download your preferred version of Ubuntu from the latest &lt;a href=&#34;https://github.com/Joshua-Riek/ubuntu-orange-pi5/releases&#34;&gt;release&lt;/a&gt; on GitHub. Then write the xz compressed image to your SD card using &lt;a href=&#34;https://www.balena.io/etcher&#34;&gt;balenaEtcher&lt;/a&gt; since, unlike other tools, it can validate burning results, saving you from corrupted SD card contents.&lt;/p&gt; &#xA;&lt;h2&gt;Boot the System&lt;/h2&gt; &#xA;&lt;p&gt;Insert your SD card into the slot on the board and power on the device. The first boot may take up to two minutes, so please be patient.&lt;/p&gt; &#xA;&lt;h2&gt;Login Information&lt;/h2&gt; &#xA;&lt;p&gt;You will be able to login through HDMI or a serial console connection.&lt;/p&gt; &#xA;&lt;p&gt;There are two predefined users: &lt;code&gt;ubuntu&lt;/code&gt; and &lt;code&gt;root&lt;/code&gt;. The password for each is &lt;code&gt;ubuntu&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Ubuntu 22.04.1 TLS orange-pi5 tty1&#xA;&#xA;orange-pi5 login: ubuntu&#xA;Password: ubuntu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build Requirements&lt;/h2&gt; &#xA;&lt;p&gt;To to set up the build environment, please use a Ubuntu 22.04 machine, then install the below packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install -y build-essential gcc-aarch64-linux-gnu bison \&#xA;qemu-user-static qemu-system-arm qemu-efi u-boot-tools binfmt-support \&#xA;debootstrap flex libssl-dev bc rsync kmod cpio xz-utils fakeroot parted \&#xA;udev dosfstools uuid-runtime git-lfs device-tree-compiler python2 python3 \&#xA;python-is-python3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;To checkout the source and build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/Joshua-Riek/ubuntu-orange-pi5.git&#xA;cd ubuntu-orange-pi5&#xA;sudo ./build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Known Limitations and Bugs&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;A number of packages are installed and held to enable hardware acceleration. So please don&#39;t remove them and re-install with apt-get.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>007revad/Synology_HDD_db</title>
    <updated>2023-03-07T01:46:37Z</updated>
    <id>tag:github.com,2023-03-07:/007revad/Synology_HDD_db</id>
    <link href="https://github.com/007revad/Synology_HDD_db" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Add your HDD, SSD and NVMe drives to your Synology&#39;s compatible drive database&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Synology HDD db&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/007revad/Synology_HDD_db/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/007revad/Synology_HDD_db.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hits.seeyoufarm.com&#34;&gt;&lt;img src=&#34;https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2F007revad%2FSynology_HDD_db&amp;amp;count_bg=%2379C83D&amp;amp;title_bg=%23555555&amp;amp;icon=&amp;amp;icon_color=%23E7E7E7&amp;amp;title=hits&amp;amp;edge_flat=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Description&lt;/h3&gt; &#xA;&lt;p&gt;Add your HDD, SSD, SAS and NVMe drives to your Synology&#39;s compatible drive database.&lt;/p&gt; &#xA;&lt;p&gt;The script works in DSM 7 and DSM 6.&lt;/p&gt; &#xA;&lt;h4&gt;What the script does:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Gets the Synology NAS model and DSM version (so it knows which db files to edit).&lt;/li&gt; &#xA; &lt;li&gt;Gets a list of the HDD, SSD and NVMe drives installed in your Synology NAS.&lt;/li&gt; &#xA; &lt;li&gt;Gets each drive&#39;s model number and firmware version.&lt;/li&gt; &#xA; &lt;li&gt;Backs up the database file if there is no backup already.&lt;/li&gt; &#xA; &lt;li&gt;Checks if each drive is already in the Synology&#39;s compatible-drive database.&lt;/li&gt; &#xA; &lt;li&gt;Adds any missing drives to the Synology&#39;s compatible-drive database.&lt;/li&gt; &#xA; &lt;li&gt;Prevents DSM auto updating the drive database.&lt;/li&gt; &#xA; &lt;li&gt;Optionally disable DSM&#39;s &#34;support_disk_compatibility&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Reminds you that you may need to reboot the Synology after running the script.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Planned updates:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Detect any connected expansion units and get the model(s) and edit the correct expansion unit db files. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Or add support for users to specify their expansion unit model(s) as arguments.&lt;/li&gt; &#xA;   &lt;li&gt;Or maybe use the shotgun approach and update all expansion unit db files.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Add support for M.2 SATA and NVMe drives on a Synology PCIe card like the M2D17.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;When to run the script&lt;/h3&gt; &#xA;&lt;p&gt;You would need to re-run the script after a DSM update. If you have DSM set to auto update the best option is to run the script every time the Synology boots, and the best way to do that is to setup a scheduled task to run the the script at boot-up.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; After you first run the script you may need to reboot the Synology to see the effect of the changes.&lt;/p&gt; &#xA;&lt;h3&gt;Options when running the script&lt;/h3&gt; &#xA;&lt;p&gt;There are 2 optional flags you can use when running the script:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;-showedits or -s to show you the changes it made to the Synology&#39;s compatible-drive database.&lt;/li&gt; &#xA; &lt;li&gt;-force or -f to disable &#34;support_disk_compatibility&#34;. This should be needed if any of your drives weren&#39;t detected. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you run the script without -force or -f it will re-eanble &#34;support_disk_compatibility&#34;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Scheduling the script in Synology&#39;s Task Scheduler&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/007revad/Synology_HDD_db/main/how_to_schedule.md/&#34;&gt;How to schedule a script in Synology Task Manager&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Running the script via SSH&lt;/h3&gt; &#xA;&lt;p&gt;You run the script in a shell with sudo or as root.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-YAML&#34;&gt;sudo /path-to-script/syno_hdd_db.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Replace /path-to-script/ with the actual path to the script on your Synology.&lt;/p&gt; &#xA;&lt;p align=&#34;leftr&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/007revad/Synology_HDD_db/main/images/syno_hdd_db2.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you run the script with the -showedits flag it will show you the changes it made to the Synology&#39;s compatible-drive database. Obviously this is only useful if you run the script in a shell.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-YAML&#34;&gt;sudo /path-to-script/syno_hdd_db.sh -showedits&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Replace /path-to-script/ with the actual path to the script on your Synology.&lt;/p&gt; &#xA;&lt;p align=&#34;leftr&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/007revad/Synology_HDD_db/main/images/syno_hdd_db.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Credits&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The idea for this script came from a comment made by Empyrealist on the Synology subreddit.&lt;/li&gt; &#xA; &lt;li&gt;Thanks for the assistance from Alex_of_Chaos on the Synology subreddit.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>