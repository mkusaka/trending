<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-23T01:38:49Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>adoptium/temurin-build</title>
    <updated>2024-02-23T01:38:49Z</updated>
    <id>tag:github.com,2024-02-23:/adoptium/temurin-build</id>
    <link href="https://github.com/adoptium/temurin-build" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Eclipse Temurin™ build scripts - common across all releases/versions&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Repository for code and instructions for building OpenJDK binaries, defaulting to Eclipse Temurin™&lt;/h1&gt; &#xA;&lt;p&gt;These scripts can be used to build OpenJDK anywhere but are primarily used by Eclipse Adoptium members (vendors) to build binaries. The scripts default to the use case of building Eclipse Temurin binaries which occurs on the build farm at &lt;a href=&#34;https://ci.adoptium.net&#34;&gt;https://ci.adoptium.net&lt;/a&gt;. Those binaries are then made available for consumption at &lt;a href=&#34;https://adoptium.net&#34;&gt;https://adoptium.net&lt;/a&gt; and via the API &lt;a href=&#34;https://api.adoptium.net&#34;&gt;https://api.adoptium.net&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; In the future, adoptium.net will transition to being a marketplace for other qualifying vendors as well Eclipse Temurin.&lt;/p&gt; &#xA;&lt;h2&gt;Where can I find the release status of Eclipse Temurin™ binaries?&lt;/h2&gt; &#xA;&lt;p&gt;Go to the &lt;a href=&#34;https://www.github.com/adoptium/adoptium/issues&#34;&gt;Eclipse Adoptium Top Level Project repository&lt;/a&gt; for release tracking.&lt;/p&gt; &#xA;&lt;h2&gt;TL;DR: I want to build a JDK NOW&lt;/h2&gt; &#xA;&lt;h3&gt;Build jdk natively on your system&lt;/h3&gt; &#xA;&lt;p&gt;To do this you will need to have your machine set up with a suitable compiler and various other tools available. We set up our machines using ansible playbooks from the &lt;a href=&#34;https://github.com/adoptopenjdk/openjdk-infrastructure&#34;&gt;openjdk-infrastructure&lt;/a&gt; repository. You can also look at the &lt;a href=&#34;https://github.com/adoptium/temurin-build/raw/master/docker/dockerfile-generator.sh&#34;&gt;dockerfile generator&lt;/a&gt; for a list of required packages for Ubuntu.&lt;/p&gt; &#xA;&lt;p&gt;Once you&#39;ve got all of the prerequisites installed, clone this openjdk-build repository (&lt;code&gt;git clone https://github.com/adoptium/temurin-build&lt;/code&gt; and kick off a build a follows with this script. The &lt;code&gt;-J&lt;/code&gt; parameter specifies the &#34;boot JDK&#34; which should generally be one major version prior to the one you are building (although one of the same major version will also work). Note that the build variant defaults to HotSpot if omitted which builds from the same repositories as Temurin.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./makejdk-any-platform.sh (-J /usr/lib/jvm/jdk-xx) (--build-variant &amp;lt;hotspot|openj9|corretto|SapMachine|dragonwell|bisheng&amp;gt;) &amp;lt;jdk8u|jdk11u|jdk16u|jdk&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./makejdk-any-platform.sh -J /usr/lib/jvm/jdk-10.0.2 --build-variant hotspot jdk11u&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How do I build OpenJDK in a docker image?&lt;/h2&gt; &#xA;&lt;p&gt;If you do not want to set up your machine with all the prerequisites for building OpenJDK, you can use our docker images under the [docker] directory as follows (first version builds HotSpot, second builds J9 - the final parameter can be adjusted to build whichever version you want as long as we can generate valid dockerfile for it):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./makejdk-any-platform.sh --docker --clean-docker-build jdk8u&#xA;./makejdk-any-platform.sh --docker --clean-docker-build --build-variant openj9 jdk11u&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We test these dockerfiles on a regular basis in the &lt;a href=&#34;https://ci.adoptium.net/job/DockerfileCheck/&#34;&gt;Dockerfilecheck&lt;/a&gt; job to ensure they continue to work in a stable fashion.&lt;/p&gt; &#xA;&lt;h2&gt;Repository contents&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains several useful scripts in order to build OpenJDK personally or at build farm scale.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The &lt;code&gt;build-farm&lt;/code&gt; folder contains shell scripts for multi configuration Jenkins build jobs used for building Adoptium OpenJDK binaries.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;docker&lt;/code&gt; folder contains tools for generating dockerfiles which can be used as part of building OpenJDK inside a Docker container.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;git-hg&lt;/code&gt; folder has now been moved to it&#39;s own separate repository. See &lt;a href=&#34;https://github.com/adoptium/mirror-scripts&#34;&gt;openjdk-mirror-scripts&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;pipelines&lt;/code&gt; folder has now been moved to a separate repo: &lt;a href=&#34;https://github.com/adoptium/ci-jenkins-pipelines&#34;&gt;https://github.com/adoptium/ci-jenkins-pipelines&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;sbin&lt;/code&gt; folder contains the scripts that actually build (Temurin). &lt;code&gt;build.sh&lt;/code&gt; is the entry point which can be used stand alone but is typically called by the &lt;code&gt;native-build.sh&lt;/code&gt; or &lt;code&gt;docker-build.sh&lt;/code&gt; scripts (which themselves are typically called by &lt;code&gt;makejdk-any-platform.sh&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;security&lt;/code&gt; folder contains a script and &lt;code&gt;cacerts&lt;/code&gt; file that is bundled with the JDK and used when building OpenJDK: the &lt;code&gt;cacerts&lt;/code&gt; file is an important file that&#39;s used to enable SSL connections.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;The makejdk-any-platform.sh script&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;makejdk-any-platform.sh&lt;/code&gt; is the entry point for building (Adoptium) OpenJDK binaries. Building natively or in a docker container are both supported. This script (and its supporting scripts) have defaults, but you can override these as needed. The scripts will auto detect the platform and architecture it is running on and configure the OpenJDK build accordingly. The supporting scripts will also download and locally install any required dependencies for the OpenJDK build, e.g. The ALSA sound and Freetype font libraries.&lt;/p&gt; &#xA;&lt;p&gt;Many of the configuration options are passed through to the &lt;code&gt;configure&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt; commands that OpenJDK uses to build binaries. Please see the appropriate &lt;em&gt;README-builds.html&lt;/em&gt; file for the OpenJDK source repository that you are building.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Usage can be found via &lt;code&gt;makejdk-any-platform.sh --help&lt;/code&gt;. Here is the man page re-formatted for convenience.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;USAGE&#xA;&#xA;./makejdk-any-platform [options] version&#xA;&#xA;Please visit https://www.adoptium.net for further support.&#xA;&#xA;VERSIONS&#xA;&#xA;jdk8u - Build Java 8, defaults to https://github.com/adoptium/jdk8u&#xA;jdk11u - Build Java 11, defaults to https://github.com/adoptium/jdk11u&#xA;jdk16u - Build Java 16, defaults to https://github.com/adoptium/jdk16u&#xA;jdk - Build Latest Java (Alpha/Beta), defaults to https://github.com/adoptium/jdk&#xA;&#xA;OPTIONS&#xA;&#xA;-b, --branch &amp;lt;branch&amp;gt;&#xA;specify a custom branch to build from, e.g. dev.&#xA;For reference, Adoptium GitHub source repositories default to the dev&#xA;branch which may contain a very small diff set to the master branch&#xA;(which is a clone from the OpenJDK mercurial forest).&#xA;&#xA;-B, --build-number &amp;lt;build_number&amp;gt;&#xA;specify the OpenJDK build number to build from, e.g. b12.&#xA;For reference, OpenJDK version numbers look like 1.8.0_162-b12 (for Java 8) or&#xA;9.0.4+11 (for Java 9+) with the build number being the suffix at the end.&#xA;&#xA;--build-variant &amp;lt;variant_name&amp;gt;&#xA;specify a OpenJDK build variant, e.g. openj9.&#xA;For reference, the default variant is hotspot and does not need to be specified.&#xA;&#xA;-c, --clean-docker-build&#xA;removes the existing docker container and persistent volume before starting&#xA;a new docker based build.&#xA;&#xA;-C, --configure-args &amp;lt;args&amp;gt;&#xA;specify any custom user configuration arguments, using &#xA;temporary_speech_mark_placeholder in the place of any speech marks.&#xA;&#xA;--clean-git-repo&#xA;clean out any &#39;bad&#39; local git repository you already have.&#xA;&#xA;--create-debug-image&#xA;create a debug-image archive with the debug symbols.&#xA;&#xA;--create-jre-image&#xA;create the legacy JRE image in addition to the JDK image.&#xA;&#xA;--create-sbom&#xA;create the CycloneDX System Bill of Materials (JSON artifact).&#xA;&#xA;-d, --destination &amp;lt;path&amp;gt;&#xA;specify the location for the built binary, e.g. /path/.&#xA;This is typically used in conjunction with -T to create a custom path&#xA;/ file name for the resulting binary.&#xA;&#xA;-D, --docker&#xA;build OpenJDK in a docker container.&#xA;&#xA;--cross-compile&#xA;use this if you are cross compiling - it will skip the java -version checks at the end&#xA;&#xA;--debug-docker&#xA;debug OpenJDK build script in a docker container. Only valid if -D is selected.&#xA;&#xA;--disable-shallow-git-clone&#xA;disable the default fB--depth=1 shallow cloning of git repo(s).&#xA;&#xA;-f, --freetype-dir&#xA;specify the location of an existing FreeType library.&#xA;This is typically used in conjunction with -F.&#xA;&#xA;--freetype-build-param &amp;lt;parameter&amp;gt;&#xA;specify any special freetype build parameters (required for some Operating Systems).&#xA;&#xA;--freetype-version &amp;lt;version&amp;gt;&#xA;specify the version of freetype you are building.&#xA;&#xA;-F, --skip-freetype&#xA;skip building Freetype automatically.&#xA;This is typically used in conjunction with -f.&#xA;&#xA;-h, --help&#xA;print the man page.&#xA;&#xA;-i, --ignore-container&#xA;ignore the existing docker container if you have one already.&#xA;&#xA;-J, --jdk-boot-dir &amp;lt;jdk_boot_dir&amp;gt;&#xA;specify the JDK boot dir.&#xA;For reference, OpenJDK needs the previous version of a JDK in order to build&#xA;itself. You should select the path to a JDK install that is N-1 versions below&#xA;the one you are trying to build.&#xA;&#xA;-k, --keep&#xA;if using docker, keep the container after the build.&#xA;&#xA;--make-exploded-image&#xA;creates an exploded image (useful for codesigning jmods). Use --assemble-exploded-image once you have signed the jmods to complete the packaging steps.&#xA;&#xA;--custom-cacerts &amp;lt;true|false&amp;gt;&#xA;If true (default), a custom cacerts file will be generated based on the Mozilla list of CA certificates (see folder security/). If false, the file shipped by OpenJDK will be used. &#xA;&#xA;-n, --no-colour&#xA;disable colour output.&#xA;&#xA;-p, --processors &amp;lt;args&amp;gt;&#xA;specify the number of processors to use for the docker build.&#xA;&#xA;-r, --repository &amp;lt;repository&amp;gt;&#xA;specify the repository to clone OpenJDK source from,&#xA;e.g. https://github.com/karianna/openjdk-jdk8u.&#xA;&#xA;-s, --source &amp;lt;path&amp;gt;&#xA;specify the location to clone the OpenJDK source (and dependencies) to.&#xA;&#xA;-S, --ssh&#xA;use ssh when cloning git.&#xA;In case of docker build add github.com to ~/.ssh/known_hosts (e.g.: ssh github.com)&#xA;if your ssh key has a passphrase, add it to ssh-agent (e.g.: ssh-add ~/.ssh/id_rsa)&#xA;&#xA;--sign&#xA;sign the OpenJDK binary that you build.&#xA;&#xA;--sudo&#xA;run the docker container as root.&#xA;&#xA;-t, --tag &amp;lt;tag&amp;gt;&#xA;specify the repository tag that you want to build OpenJDK from.&#xA;&#xA;-T, --target-file-name &amp;lt;file_name&amp;gt;&#xA;specify the final name of the OpenJDK binary.&#xA;This is typically used in conjunction with -D to create a custom file&#xA;name for the resulting binary.&#xA;&#xA;--tmp-space-build&#xA;use the temp directory for performing the build&#xA;&#xA;-u, --update-version &amp;lt;update_version&amp;gt;&#xA;specify the update version to build OpenJDK from, e.g. 162.&#xA;For reference, OpenJDK version numbers look like 1.8.0_162-b12 (for Java 8) or&#xA;9.0.4+11 (for Java 9+) with the update number being the number after the &#39;_&#39;&#xA;(162) or the 3rd position in the semVer version string (4).&#xA;This is typically used in conjunction with -b.&#xA;&#xA;--use-jep319-certs&#xA;Use certs defined in JEP319 in Java 8/9. Deprecated, has no effect.&#xA;&#xA;-v, --version&#xA;specify the OpenJDK version to build e.g. jdk8u.  Left for backwards compatibility.&#xA;&#xA;-V, --jvm-variant &amp;lt;jvm_variant&amp;gt;&#xA;specify the JVM variant (server or client), defaults to server.&#xA;&#xA;Example usage:&#xA;&#xA;./makejdk-any-platform --docker jdk8u&#xA;./makejdk-any-platform -T MyOpenJDK10.tar.gz jdk10&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Script Relationships&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/adoptium/temurin-build/master/docs/images/AdoptOpenJDK_Build_Script_Relationships.png&#34; alt=&#34;Build Variant Workflow&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The main script to build OpenJDK is &lt;code&gt;makejdk-any-platform.sh&lt;/code&gt;, which itself uses and/or calls &lt;code&gt;configureBuild.sh&lt;/code&gt;, &lt;code&gt;docker-build.sh&lt;/code&gt; and/or &lt;code&gt;native-build.sh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The structure of a build is:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Configuration phase determines what the configuration of the build is based on your current platform and and optional arguments provided&lt;/li&gt; &#xA; &lt;li&gt;Configuration is written out to &lt;code&gt;config/built_config.cfg&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build is kicked off by either creating a docker container or running the native build script&lt;/li&gt; &#xA; &lt;li&gt;Build reads in configuration from &lt;code&gt;built_config.cfg&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Downloads source, dependencies and prepares build workspace&lt;/li&gt; &#xA; &lt;li&gt;Invoke OpenJDK build via &lt;code&gt;make&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Package up built artifacts&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration phase is primarily performed by &lt;a href=&#34;https://github.com/adoptium/temurin-build/raw/master/configureBuild.sh&#34;&gt;configureBuild.sh&lt;/a&gt; and &lt;a href=&#34;https://github.com/adoptium/temurin-build/raw/master/makejdk-any-platform.sh&#34;&gt;makejdk-any-platform.sh&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If a docker container is required it is built by &lt;a href=&#34;https://github.com/adoptium/temurin-build/raw/master/docker-build.sh&#34;&gt;docker-build.sh&lt;/a&gt; otherwise &lt;a href=&#34;https://github.com/adoptium/temurin-build/raw/master/native-build.sh&#34;&gt;native-build.sh&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In the build phase &lt;a href=&#34;https://github.com/adoptium/temurin-build/raw/master/sbin/build.sh&#34;&gt;sbin/build.sh&lt;/a&gt; is invoked either natively or inside the docker container. &lt;code&gt;sbin/build.sh&lt;/code&gt; invokes &lt;a href=&#34;https://github.com/adoptium/temurin-build/raw/master/sbin/prepareWorkspace.sh&#34;&gt;sbin/prepareWorkspace.sh&lt;/a&gt; to download dependencies, source and perform general preparation.&lt;/li&gt; &#xA; &lt;li&gt;Rest of the build and packaging is then handled from &lt;code&gt;sbin/build.sh&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building OpenJDK from other locations&lt;/h2&gt; &#xA;&lt;h3&gt;Building OpenJDK from a non-Adoptium repository&lt;/h3&gt; &#xA;&lt;p&gt;These scripts default to using Adoptium as the OpenJDK source repository to build from, but you can override this with the &lt;code&gt;-r&lt;/code&gt; flag. If you want to run from a non-default branch you can also specify -b e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./makejdk-any-platform.sh -r https://github.com/sxa/openjdk-jdk8u -b main -J /usr/lib/jvm/java-1.7.0 jdk8u&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building in a custom directory&lt;/h3&gt; &#xA;&lt;p&gt;Example Usage&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./makejdk-any-platform.sh -J /usr/lib/jvm/jdk-10.0.2 -s $HOME/openjdk-jdk11u/src -d $HOME/openjdk-jdk11u/build -T MyOpenJDK11.tar.gz jdk11u&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would clone OpenJDK source from &lt;a href=&#34;https://github.com/adoptium/openjdk-jdk11u&#34;&gt;https://github.com/adoptium/openjdk-jdk11u&lt;/a&gt; to &lt;code&gt;$HOME/openjdk-jdk11u/src&lt;/code&gt;, configure the build with sensible defaults according to your local platform and then build OpenJDK and place the result in &lt;code&gt;/home/openjdk/target/MyOpenJDK11.tar.gz&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Metadata&lt;/h2&gt; &#xA;&lt;p&gt;Alongside the built assets a metadata file will be created with info about the build. This will be a JSON document of the form:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;vendor&#34;: &#34;Eclipse Adoptium&#34;,&#xA;    &#34;os&#34;: &#34;mac&#34;,&#xA;    &#34;arch&#34;: &#34;x64&#34;,&#xA;    &#34;variant&#34;: &#34;openj9&#34;,&#xA;    &#34;variant_version&#34;: {&#xA;        &#34;major&#34;: &#34;0&#34;,&#xA;        &#34;minor&#34;: &#34;22&#34;,&#xA;        &#34;security&#34;: &#34;0&#34;,&#xA;        &#34;tags&#34;: &#34;m2&#34;&#xA;    },&#xA;    &#34;version&#34;: {&#xA;        &#34;minor&#34;: 0,&#xA;        &#34;security&#34;: 0,&#xA;        &#34;pre&#34;: null,&#xA;        &#34;adopt_build_number&#34;: 0,&#xA;        &#34;major&#34;: 15,&#xA;        &#34;version&#34;: &#34;15+29-202007070926&#34;,&#xA;        &#34;semver&#34;: &#34;15.0.0+29.0.202007070926&#34;,&#xA;        &#34;build&#34;: 29,&#xA;        &#34;opt&#34;: &#34;202007070926&#34;&#xA;    },&#xA;    &#34;scmRef&#34;: &#34;&amp;lt;output of git describe OR buildConfig.SCM_REF&amp;gt;&#34;,&#xA;    &#34;buildRef&#34;: &#34;&amp;lt;build-repo-name/build-commit-sha&amp;gt;&#34;,&#xA;    &#34;version_data&#34;: &#34;jdk15&#34;,&#xA;    &#34;binary_type&#34;: &#34;debugimage&#34;,&#xA;    &#34;sha256&#34;: &#34;&amp;lt;shasum&amp;gt;&#34;,&#xA;    &#34;full_version_output&#34;: &#34;&amp;lt;output of java --version&amp;gt;&#34;,&#xA;    &#34;configure_arguments&#34;: &#34;&amp;lt;output of bash configure&amp;gt;&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Metadata class is contained in the &lt;a href=&#34;https://github.com/adoptium/ci-jenkins-pipelines/raw/master/pipelines/library/src/common/MetaData.groovy&#34;&gt;Metadata.groovy&lt;/a&gt; file and the Json is constructed and written in the &lt;a href=&#34;https://github.com/adoptium/ci-jenkins-pipelines/raw/master/pipelines/build/common/openjdk_build_pipeline.groovy&#34;&gt;openjdk_build_pipeline.groovy&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;It is worth noting the additional tags on the SemVer is the build number.&lt;/p&gt; &#xA;&lt;p&gt;Below are all of the keys contained in the metadata file and some example values that can be present.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;vendor:&lt;/code&gt; Example values: [&lt;code&gt;Eclipse Adoptium&lt;/code&gt;, &lt;code&gt;Alibaba&lt;/code&gt;]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This tag is used to identify the vendor of the JDK being built, this value is set in the &lt;a href=&#34;https://github.com/adoptium/temurin-build/raw/805e76acbb8a994abc1fb4b7d582486d48117ee8/sbin/build.sh#L183&#34;&gt;build.sh&lt;/a&gt; file and defaults to &#34;Adoptium&#34;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;os:&lt;/code&gt; Example values: [&lt;code&gt;windows&lt;/code&gt;, &lt;code&gt;mac&lt;/code&gt;, &lt;code&gt;linux&lt;/code&gt;, &lt;code&gt;aix&lt;/code&gt;, &lt;code&gt;solaris&lt;/code&gt;]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This tag identifies the operating system the JDK has been built on (and should be used on).&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;arch:&lt;/code&gt; Example values: [&lt;code&gt;aarch64&lt;/code&gt;, &lt;code&gt;ppc64&lt;/code&gt;, &lt;code&gt;s390x&lt;/code&gt;, &lt;code&gt;x64&lt;/code&gt;, &lt;code&gt;x86-32&lt;/code&gt;, &lt;code&gt;arm&lt;/code&gt;]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This tag identifies the architecture the JDK has been built on and it intended to run on.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;variant:&lt;/code&gt; Example values: [&lt;code&gt;hotspot&lt;/code&gt;, &lt;code&gt;openj9&lt;/code&gt;, &lt;code&gt;corretto&lt;/code&gt;, &lt;code&gt;dragonwell&lt;/code&gt;, &lt;code&gt;bisheng&lt;/code&gt;]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This tag identifies the JVM being used by the JDK. &#34;dragonwell&#34; and &#34;bisheng&#34; itself are HotSpot based JVMs but are currently considered their own variants for the purposes of build. WARN: This will be changed at a later date when we split out JVM from vendor.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;variant_version:&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This tag is used to identify a version number of the variant being built, it currently is exclusively used by OpenJ9 and has the following keys:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;major:&lt;/code&gt; Example values: [&lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;minor:&lt;/code&gt; Example values: [&lt;code&gt;22&lt;/code&gt;, &lt;code&gt;23&lt;/code&gt;, &lt;code&gt;24&lt;/code&gt;]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;security:&lt;/code&gt; Example values: [&lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;tags:&lt;/code&gt; Example values: [&lt;code&gt;m1&lt;/code&gt;, &lt;code&gt;m2&lt;/code&gt;]&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;version:&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This tag contains the full version information of the JDK built, it uses the &lt;a href=&#34;https://github.com/adoptium/temurin-build/raw/master/pipelines/library/src/common/VersionInfo.groovy&#34;&gt;VersionInfo.groovy&lt;/a&gt; class and the &lt;a href=&#34;https://github.com/adoptium/temurin-build/raw/master/pipelines/library/src/ParseVersion.groovy&#34;&gt;ParseVersion.groovy&lt;/a&gt; class.&lt;/p&gt; &#xA;&lt;p&gt;It contains the following keys:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;minor:&lt;/code&gt; Example values: [&lt;code&gt;0&lt;/code&gt;]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;security:&lt;/code&gt; Example Values: [&lt;code&gt;0&lt;/code&gt;, &lt;code&gt;9&lt;/code&gt;, &lt;code&gt;252&lt;/code&gt; &lt;code&gt;272&lt;/code&gt;]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;pre:&lt;/code&gt; Example values: [&lt;code&gt;null&lt;/code&gt;]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;adopt_build_number:&lt;/code&gt; Example values: [&lt;code&gt;0&lt;/code&gt;]&lt;br&gt; If the &lt;code&gt;ADOPT_BUILD_NUMBER&lt;/code&gt; parameter is used to build te JDK that value will appear here, otherwise a default value of 0 appears.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;major:&lt;/code&gt; Example values: [&lt;code&gt;8&lt;/code&gt;, &lt;code&gt;11&lt;/code&gt;, &lt;code&gt;15&lt;/code&gt;, &lt;code&gt;16&lt;/code&gt;]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;version:&lt;/code&gt; Example values: [&lt;code&gt;1.8.0_272-202010111709-b09&lt;/code&gt;, &lt;code&gt;11.0.9+10-202010122348&lt;/code&gt;, &lt;code&gt;14.0.2+11-202007272039&lt;/code&gt;, &lt;code&gt;16+19-202010120348&lt;/code&gt;]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;semver:&lt;/code&gt; Example values: [&lt;code&gt;8.0.202+8.0.202008210941&lt;/code&gt;, &lt;code&gt;11.0.9+10.0.202010122348&lt;/code&gt;, &lt;code&gt;14.0.2+11.0.202007272039&lt;/code&gt;, &lt;code&gt;16.0.0+19.0.202010120339&lt;/code&gt;]&lt;br&gt; Formed from the major, minor, security, and build number by the &lt;a href=&#34;https://github.com/adoptium/temurin-build/raw/805e76acbb8a994abc1fb4b7d582486d48117ee8/pipelines/library/src/common/VersionInfo.groovy#L123&#34;&gt;formSemver()&lt;/a&gt; function.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;build:&lt;/code&gt; Example values: [&lt;code&gt;6&lt;/code&gt;, &lt;code&gt;9&lt;/code&gt;, &lt;code&gt;18&lt;/code&gt;]&lt;br&gt; The OpenJDK build number for the JDK being built.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;opt:&lt;/code&gt; Example values: [&lt;code&gt;202008210941&lt;/code&gt;, &lt;code&gt;202010120348&lt;/code&gt;, &lt;code&gt;202007272039&lt;/code&gt;]&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;scmRef:&lt;/code&gt; Example values: [&lt;code&gt;dragonwell-8.4.4_jdk8u262-b10&lt;/code&gt;, &lt;code&gt;jdk-16+19_adopt-61198-g59e3baa94ac&lt;/code&gt;, &lt;code&gt;jdk-11.0.9+10_adopt-197-g11f44f68c5&lt;/code&gt;, &lt;code&gt;23f997ca1&lt;/code&gt;]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A reference the the base JDK repository being build, usually including a GitHub commit reference, i.e. &lt;code&gt;jdk-16+19_adopt-61198-g59e3baa94ac&lt;/code&gt; links to &lt;code&gt;https://github.com/adoptium/openjdk-jdk/commit/59e3baa94ac&lt;/code&gt; via the commit SHA &lt;strong&gt;59e3baa94ac&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Values that only contain a commit reference such as &lt;code&gt;23f997ca1&lt;/code&gt; are OpenJ9 commits on their respective JDK repositories, for example &lt;strong&gt;23f997ca1&lt;/strong&gt; links to the commit &lt;code&gt;https://github.com/ibmruntimes/openj9-openjdk-jdk14/commit/23f997ca1.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;buildRef:&lt;/code&gt; Example values: [&lt;code&gt;openjdk-build/fe0f2dba&lt;/code&gt;, &lt;code&gt;openjdk-build/f412a523&lt;/code&gt;]&lt;br&gt; A reference to the build tools repository used to create the JDK, uses the format &lt;strong&gt;repository-name&lt;/strong&gt;/&lt;strong&gt;commit-SHA&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;version_data:&lt;/code&gt; Example values: [&lt;code&gt;jdk8u&lt;/code&gt;, &lt;code&gt;jdk11u&lt;/code&gt;, &lt;code&gt;jdk14u&lt;/code&gt;, &lt;code&gt;jdk&lt;/code&gt;]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;binary_type:&lt;/code&gt; Example values: [&lt;code&gt;jdk&lt;/code&gt;, &lt;code&gt;jre&lt;/code&gt;, &lt;code&gt;debugimage&lt;/code&gt;, &lt;code&gt;testimage&lt;/code&gt;]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;sha256:&lt;/code&gt; Example values: [&lt;code&gt;20278aa9459e7636f6237e85fcd68deec1f42fa90c6c541a2dfa127f4156d3e2&lt;/code&gt;, &lt;code&gt;2f9700bd75a807614d6d525fbd8d016c609a9ea71bf1ffd5d4839f3c1c8e4b8e&lt;/code&gt;]&lt;br&gt; A SHA to verify the contents of the JDK.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;full_version_output:&lt;/code&gt; Example values:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;openjdk version \&#34;1.8.0_252\&#34;\nOpenJDK Runtime Environment (Alibaba Dragonwell 8.4.4) (build 1.8.0_252-202010111720-b06)\nOpenJDK 64-Bit Server VM (Alibaba Dragonwell 8.4.4) (build 25.252-b06, mixed mode)\n`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The full output of the command &lt;code&gt;java -version&lt;/code&gt; for the JDK.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;configure_arguments:&lt;/code&gt; The full output generated by &lt;code&gt;configure.sh&lt;/code&gt; for the JDK built.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>vdsm/virtual-dsm</title>
    <updated>2024-02-23T01:38:49Z</updated>
    <id>tag:github.com,2024-02-23:/vdsm/virtual-dsm</id>
    <link href="https://github.com/vdsm/virtual-dsm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Virtual DSM in a docker container.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Virtual DSM&lt;br&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;a href=&#34;https://github.com/vdsm/virtual-dsm&#34;&gt;&lt;img src=&#34;https://github.com/vdsm/virtual-dsm/raw/master/.github/screen.jpg&#34; title=&#34;Screenshot&#34; style=&#34;max-width:100%;&#34; width=&#34;432&#34;&gt;&lt;/a&gt; &#xA; &lt;/div&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;p&gt;&lt;a href=&#34;https://github.com/vdsm/virtual-dsm/&#34;&gt;&lt;img src=&#34;https://github.com/vdsm/virtual-dsm/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/vdsm/virtual-dsm/tags&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/v/vdsm/virtual-dsm/latest?arch=amd64&amp;amp;sort=semver&amp;amp;color=066da5&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/vdsm/virtual-dsm/tags&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/vdsm/virtual-dsm/latest?color=066da5&amp;amp;label=size&#34; alt=&#34;Size&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/vdsm/virtual-dsm&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/kroese/virtual-dsm.svg?style=flat&amp;amp;label=pulls&amp;amp;logo=docker&#34; alt=&#34;Pulls&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;/div&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Virtual DSM in a docker container.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Multiple disks&lt;/li&gt; &#xA; &lt;li&gt;KVM acceleration&lt;/li&gt; &#xA; &lt;li&gt;Upgrades supported&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Via &lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &#34;3&#34;&#xA;services:&#xA;  dsm:&#xA;    container_name: dsm&#xA;    image: vdsm/virtual-dsm&#xA;    environment:&#xA;      DISK_SIZE: &#34;16G&#34;&#xA;    devices:&#xA;      - /dev/kvm&#xA;    cap_add:&#xA;      - NET_ADMIN&#xA;    ports:&#xA;      - 5000:5000&#xA;    volumes:&#xA;      - /var/dsm:/storage&#xA;    restart: on-failure&#xA;    stop_grace_period: 2m&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Via &lt;code&gt;docker run&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it --rm -p 5000:5000 --device=/dev/kvm --cap-add NET_ADMIN --stop-timeout 120 vdsm/virtual-dsm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do I use it?&lt;/h3&gt; &lt;p&gt;Very simple! These are the steps:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Start the container and connect to &lt;a href=&#34;http://localhost:5000&#34;&gt;port 5000&lt;/a&gt; using your web browser.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Wait until DSM is ready, choose an username and password, and you will be taken to the desktop.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Enjoy your brand new machine, and don&#39;t forget to star this repo!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do I change the size of the disk?&lt;/h3&gt; &lt;p&gt;To expand the default size of 16 GB, locate the &lt;code&gt;DISK_SIZE&lt;/code&gt; setting in your compose file and modify it to your preferred capacity:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;environment:&#xA;  DISK_SIZE: &#34;128G&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This can also be used to resize the existing disk to a larger capacity without any data loss.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do I change the storage location?&lt;/h3&gt; &lt;p&gt;To change the storage location, include the following bind mount in your compose file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;volumes:&#xA;  - /var/dsm:/storage&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Replace the example path &lt;code&gt;/var/dsm&lt;/code&gt; with the desired storage folder.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do I create a growable disk?&lt;/h3&gt; &lt;p&gt;By default, the entire capacity of the disk is reserved in advance.&lt;/p&gt; &lt;p&gt;To create a growable disk that only allocates space that is actually used, add the following environment variable:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;environment:&#xA;  DISK_FMT: &#34;qcow2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Please note that this may reduce the write performance of the disk.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do I add multiple disks?&lt;/h3&gt; &lt;p&gt;To create additional disks, modify your compose file like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;environment:&#xA;  DISK2_SIZE: &#34;32G&#34;&#xA;  DISK3_SIZE: &#34;64G&#34;&#xA;volumes:&#xA;  - /home/example:/storage2&#xA;  - /mnt/data/example:/storage3&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do I pass-through a disk?&lt;/h3&gt; &lt;p&gt;It is possible to pass-through disk devices directly by adding them to your compose file in this way:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;environment:&#xA;  DEVICE2: &#34;/dev/sda&#34;&#xA;  DEVICE3: &#34;/dev/sdb&#34;&#xA;devices:&#xA;  - /dev/sda&#xA;  - /dev/sdb&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Please note that the device needs to be totally empty (without any partition table) otherwise DSM does not always format it into a volume.&lt;/p&gt; &lt;p&gt;Do NOT use this feature with the goal of sharing files from the host, they will all be lost without warning when DSM creates the volume.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do I increase the amount of CPU or RAM?&lt;/h3&gt; &lt;p&gt;By default, a single CPU core and 1 GB of RAM are allocated to the container.&lt;/p&gt; &lt;p&gt;To increase this, add the following environment variables:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;environment:&#xA;  RAM_SIZE: &#34;4G&#34;&#xA;  CPU_CORES: &#34;4&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do I verify if my system supports KVM?&lt;/h3&gt; &lt;p&gt;To verify if your system supports KVM, run the following commands:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install cpu-checker&#xA;sudo kvm-ok&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you receive an error from &lt;code&gt;kvm-ok&lt;/code&gt; indicating that KVM acceleration can&#39;t be used, check the virtualization settings in the BIOS.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do I assign an individual IP address to the container?&lt;/h3&gt; &lt;p&gt;By default, the container uses bridge networking, which shares the IP address with the host.&lt;/p&gt; &lt;p&gt;If you want to assign an individual IP address to the container, you can create a macvlan network as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker network create -d macvlan \&#xA;    --subnet=192.168.0.0/24 \&#xA;    --gateway=192.168.0.1 \&#xA;    --ip-range=192.168.0.100/28 \&#xA;    -o parent=eth0 vdsm&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Be sure to modify these values to match your local subnet.&lt;/p&gt; &lt;p&gt;Once you have created the network, change your compose file to look as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;services:&#xA;  dsm:&#xA;    container_name: dsm&#xA;    ..&amp;lt;snip&amp;gt;..&#xA;    networks:&#xA;      vdsm:&#xA;        ipv4_address: 192.168.0.100&#xA;&#xA;networks:&#xA;  vdsm:&#xA;    external: true&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;An added benefit of this approach is that you won&#39;t have to perform any port mapping anymore, since all ports will be exposed by default.&lt;/p&gt; &lt;p&gt;Please note that this IP address won&#39;t be accessible from the Docker host due to the design of macvlan, which doesn&#39;t permit communication between the two. If this is a concern, you need to create a &lt;a href=&#34;https://blog.oddbit.com/post/2018-03-12-using-docker-macvlan-networks/#host-access&#34;&gt;second macvlan&lt;/a&gt; as a workaround.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;How can DSM acquire an IP address from my router?&lt;/h3&gt; &lt;p&gt;After configuring the container for macvlan (see above), it is possible for DSM to become part of your home network by requesting an IP from your router, just like your other devices.&lt;/p&gt; &lt;p&gt;To enable this mode, add the following lines to your compose file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;environment:&#xA;  DHCP: &#34;Y&#34;&#xA;device_cgroup_rules:&#xA;  - &#39;c *:* rwm&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Please note that even if you don&#39;t need DHCP, it&#39;s still recommended to enable this mode, as it prevents NAT issues and increases performance by using a &lt;code&gt;macvtap&lt;/code&gt; interface. You can just set a static IP from the DSM control panel afterwards.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do I pass-through the GPU?&lt;/h3&gt; &lt;p&gt;To pass-through your Intel GPU, add the following lines to your compose file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;environment:&#xA;  GPU: &#34;Y&#34;&#xA;devices:&#xA;  - /dev/dri&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This can be used to enable the facial recognition function in Synology Photos for example.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do I install a specific version of vDSM?&lt;/h3&gt; &lt;p&gt;By default, version 7.2 will be installed, but if you prefer an older version, you can add its download URL to your compose file as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;environment:&#xA;  URL: &#34;https://global.synologydownload.com/download/DSM/release/7.0.1/42218/DSM_VirtualDSM_42218.pat&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;With this method, it is even possible to switch between different versions while keeping all your file data intact.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the differences compared to the standard DSM?&lt;/h3&gt; &lt;p&gt;There are only two minor differences: the Virtual Machine Manager package is not available, and Surveillance Station will not include any free licenses.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;Is this project legal?&lt;/h3&gt; &lt;p&gt;Yes, this project contains only open-source code and does not distribute any copyrighted material. Neither does it try to circumvent any copyright protection measures. So under all applicable laws, this project would be considered legal.&lt;/p&gt; &lt;p&gt;However, by installing Synology&#39;s Virtual DSM, you must accept their end-user license agreement, which does not permit installation on non-Synology hardware. So only run this container on an official Synology NAS, as any other use will be a violation of their terms and conditions.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Stars&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/vdsm/virtual-dsm&#34;&gt;&lt;img src=&#34;https://starchart.cc/vdsm/virtual-dsm.svg?variant=adaptive&#34; alt=&#34;Stars&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Only run this container on Synology hardware, any other use is not permitted by their EULA. The product names, logos, brands, and other trademarks referred to within this project are the property of their respective trademark holders. This project is not affiliated, sponsored, or endorsed by Synology, Inc.&lt;/p&gt;</summary>
  </entry>
</feed>