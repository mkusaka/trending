<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-24T01:48:08Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>haoel/haoel.github.io</title>
    <updated>2022-08-24T01:48:08Z</updated>
    <id>tag:github.com,2022-08-24:/haoel/haoel.github.io</id>
    <link href="https://github.com/haoel/haoel.github.io" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;科学上网&lt;/h1&gt; &#xA;&lt;p&gt;作者：左耳朵 &lt;a href=&#34;http://coolshell.cn&#34;&gt;http://coolshell.cn&lt;/a&gt; 更新时间：2022-08-22&lt;/p&gt; &#xA;&lt;p&gt;这篇文章可以写的更好，欢迎到 &lt;a href=&#34;https://github.com/haoel/haoel.github.io&#34;&gt;https://github.com/haoel/haoel.github.io&lt;/a&gt; 更新&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/images/cover.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91&#34;&gt;科学上网&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#0-%E5%BA%8F&#34;&gt;0. 序&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#1-%E8%8B%B1%E6%96%87%E8%83%BD%E5%8A%9B&#34;&gt;1. 英文能力&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#2-%E8%B4%AD%E4%B9%B0vps&#34;&gt;2. 购买VPS&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#21-%E5%B8%B8%E8%A7%84vps&#34;&gt;2.1 常规VPS&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#22-cn2-%E7%BA%BF%E8%B7%AF&#34;&gt;2.2 CN2 线路&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#23-ncp-%E7%BA%BF%E8%B7%AF&#34;&gt;2.3 NCP 线路&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#3-%E6%90%AD%E5%BB%BA%E7%9B%B8%E5%85%B3%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1&#34;&gt;3. 搭建相关代理服务&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#31-%E8%AE%BE%E7%BD%AEdocker%E6%9C%8D%E5%8A%A1&#34;&gt;3.1 设置Docker服务&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#32-%E5%BC%80%E5%90%AF-tcp-bbr-%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95&#34;&gt;3.2 开启 TCP BBR 拥塞控制算法&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#33-%E7%94%A8-gost-%E8%AE%BE%E7%BD%AE-https-%E6%9C%8D%E5%8A%A1&#34;&gt;3.3 用 Gost 设置 HTTPS 服务&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#34-%E8%AE%BE%E7%BD%AE-shadowsocks-%E6%9C%8D%E5%8A%A1&#34;&gt;3.4 设置 ShadowSocks 服务&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#35-%E8%AE%BE%E7%BD%AEl2tpipsec%E6%9C%8D%E5%8A%A1&#34;&gt;3.5 设置L2TP/IPSec服务&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#36-%E8%AE%BE%E7%BD%AE-pptp-%E6%9C%8D%E5%8A%A1&#34;&gt;3.6 设置 PPTP 服务&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#4-%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AE%BE%E7%BD%AE&#34;&gt;4. 客户端设置&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#41-gost-%E5%AE%A2%E6%88%B7%E7%AB%AF&#34;&gt;4.1 gost 客户端&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#42-shadowsocks-%E5%AE%A2%E6%88%B7%E7%AB%AF&#34;&gt;4.2 Shadowsocks 客户端&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#43-vpn-%E5%AE%A2%E6%88%B7%E7%AB%AF&#34;&gt;4.3 VPN 客户端&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#5-%E6%B5%81%E9%87%8F%E4%BC%AA%E8%A3%85%E5%92%8C%E5%85%B6%E5%AE%83%E6%96%B9%E5%BC%8F&#34;&gt;5. 流量伪装和其它方式&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#51-v2ray&#34;&gt;5.1 V2Ray&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#52-brook&#34;&gt;5.2 Brook&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#6-%E9%92%88%E5%AF%B9-ip-%E8%A2%AB%E5%B0%81%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88&#34;&gt;6. 针对 IP 被封的解决方案&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#61-cloudflare&#34;&gt;6.1 Cloudflare&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#62-v2ray&#34;&gt;6.2 V2Ray&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#63-%E8%A1%A5%E5%85%85&#34;&gt;6.3 补充&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#7-%E5%AE%B6%E7%94%A8%E9%80%8F%E6%98%8E%E7%BD%91%E5%85%B3&#34;&gt;7. 家用透明网关&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#71-openwrt-%E8%B7%AF%E7%94%B1%E5%99%A8&#34;&gt;7.1 OpenWRT 路由器&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#72-%E9%80%9A%E8%BF%87%E6%A0%91%E8%8E%93%E6%B4%BE%E5%81%9A%E6%97%81%E8%B7%AF%E7%BD%91%E5%85%B3&#34;&gt;7.2 通过树莓派做旁路网关&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#73-%E5%AE%89%E8%A3%85-clash&#34;&gt;7.3 安装 Clash&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#74-%E8%AE%BE%E7%BD%AE-iptables-%E8%BD%AC%E5%8F%91&#34;&gt;7.4 设置 iptables 转发&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#8-%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83%E9%80%8F%E6%98%8E%E7%BD%91%E5%85%B3&#34;&gt;8. 数据中心透明网关&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#81-aws-%E7%BD%91%E7%BB%9C%E6%9E%84%E5%BB%BA&#34;&gt;8.1 AWS 网络构建&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#82-%E5%AE%89%E8%A3%85-clash&#34;&gt;8.2 安装 Clash&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#83-%E9%85%8D%E7%BD%AE%E7%A7%81%E6%9C%89%E5%AD%90%E7%BD%91%E4%B8%AD%E7%9A%84-ec2&#34;&gt;8.3 配置私有子网中的 EC2&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#84-%E7%A7%81%E6%9C%89%E5%AD%90%E7%BD%91%E4%B8%AD%E7%9A%84-kubernetes&#34;&gt;8.4 私有子网中的 Kubernetes&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#9-%E5%85%B6%E5%AE%83&#34;&gt;9. 其它&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#91-%E5%85%B6%E5%AE%83%E6%96%B9%E5%BC%8F&#34;&gt;9.1 其它方式&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#82-%E6%90%AD%E5%BB%BA%E8%84%9A%E6%9C%AC&#34;&gt;8.2 搭建脚本&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#10-%E4%BB%A3%E7%90%86%E6%8A%80%E5%B7%A7&#34;&gt;10. 代理技巧&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#101-http-%E9%9A%A7%E9%81%93&#34;&gt;10.1 HTTP 隧道&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#102-ssh-%E9%9A%A7%E9%81%93&#34;&gt;10.2 SSH 隧道&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;0. 序&lt;/h2&gt; &#xA;&lt;p&gt;首先，我们先明确一下，我科学上网的目的主要是为了学习、工作、交友、查资料、和丰富自己的眼界，不是其它的事。&lt;/p&gt; &#xA;&lt;p&gt;对我来说，科学上网很重要，下面罗列一下需要科学上网，我才能真正学习工作和生活的网站：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Youtube 和 Vimeo 上的各种大会和教学视频，除了我自己要学，我的孩子也要学。&lt;/li&gt; &#xA; &lt;li&gt;Wikipedia 维基百科是我目前唯一信得过的百科全书，我在上面可以比较系统地翻阅各种词条。&lt;/li&gt; &#xA; &lt;li&gt;SlideShare 上有很多的技术文档和资料的PPT，是我的知识学习的地方。&lt;/li&gt; &#xA; &lt;li&gt;Quora 问答网站，在上面有很多有趣的问答。&lt;/li&gt; &#xA; &lt;li&gt;博客和论文，很多博客和论文站点都被墙了，比如：Blogspot 和 Medium。&lt;/li&gt; &#xA; &lt;li&gt;Google 的各种服务，比如：Gmail, Map, Docs，Driver，照片，图片搜索，Voices，论文搜索……包括Google官方的各种技术文档……&lt;/li&gt; &#xA; &lt;li&gt;一些云服务，比如：Dropbox，IFTTT，Imgur，archive.org……&lt;/li&gt; &#xA; &lt;li&gt;Twitter 上 Follow 一些牛人和一些官方账号，比如：AWS、Docker……&lt;/li&gt; &#xA; &lt;li&gt;社交 Facebook, Telegram, Whatsapp, Slack……，有一些我在国外的亲戚和朋友……&lt;/li&gt; &#xA; &lt;li&gt;Reddit 是一个聚合网站，一个新闻和文章的集散地，你可以认为是各种频道的今日头条……&lt;/li&gt; &#xA; &lt;li&gt;Pinterest 和 Instagram 上面有很多不错的图片和视频新闻，是我减压力的地方……&lt;/li&gt; &#xA; &lt;li&gt;新闻，如BBC。 BBC是全球比较出众的媒体，有太多的有价值资源和内容了，比如纪录片、学英文……&lt;/li&gt; &#xA; &lt;li&gt;编程，有很多编程的场景需要翻墙，比如，Go语言编程时的 go get 中的很多库是放在 Google的服务器上， 然而Google是全部被墙，包括 Android 和其它一些文档和资源也是一样。包括 SourceForge 的某些项目也需要科学上网，Docker Registry也有部分被墙，还有偶尔抽风的Github，以及不能访问的gist……&lt;/li&gt; &#xA; &lt;li&gt;……等等&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;是的，我的互联网不是——全是骗子的百度、充满广告的微信朋友圈、质量低下的公众号、娱乐至死的新浪微博、只有抖机灵和“怎么看XX”的知乎、毫无营养的今日头条…… 在这样的网络空间里，我真的无法生存…… 这根本不是互联网，不是为我服务的互联网，而是在消费我的互联网，是让我变傻变笨的互联网…… 我不能忍，因为它影响到了我的生存……&lt;/p&gt; &#xA;&lt;h2&gt;1. 英文能力&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;首先，你应该对英文读写没什么问题!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;为什么这么说？&lt;strong&gt;这主要是针对计算机相关的知识，逻辑是这样的，如果你上了Google还是在用中文关键词，那么你好不容易出来了，结果又回去了，所以没什么意义。&lt;/strong&gt; 换言之，科学上网的目的是为了进入广阔的世界范围与全世界的人交流，所以，英文是必备的，如果你英文有问题，VPN过去的用处也不大。&lt;/p&gt; &#xA;&lt;p&gt;所以，我把这个前提条件放在第一的位置，就是说—— &lt;strong&gt;真正的墙不是GFW，而是人的大脑！&lt;/strong&gt; 意思是，屏蔽你获得信息能力的不是墙，而很大一部分则是我们自己的语言能力！&lt;/p&gt; &#xA;&lt;h2&gt;2. 购买VPS&lt;/h2&gt; &#xA;&lt;p&gt;然后，你需要一个VPS。 在这里，强烈建议通过自建的方式，可能成本会比托管的“机场”要高一些，而且还很麻烦，但是，在安全性方面会比较好一些。自己动手，自力更生，让人有更多的安全感。&lt;/p&gt; &#xA;&lt;p&gt;（注：&lt;em&gt;当然，你也可以直接购买一些科学上网的服务，但我这里不推荐了，一方面是广告，另一方面通常这样的服务非常的不稳定，而且也容易被代理方做中间人攻击&lt;/em&gt;）&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;现在你买一台VPS也不贵了，也就是一个月10美金左右（70元），我个人觉得一个月花70元钱不算奢侈的事，而且会让你的生活质量得得改善。当然，线路好的得需要多花一些钱。&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;p&gt;（注：&lt;em&gt;我现在每个月投入在科学上网上的成本大概在不到500元人民币左右，常备3-5个不同国家的VPS，因为国内的网络路由经常性的变化，所以，为了确保总是有一条快的，所以，得多备几个&lt;/em&gt;）。&lt;/p&gt; &#xA;&lt;h3&gt;2.1 常规VPS&lt;/h3&gt; &#xA;&lt;p&gt;对于 VPS，下面是一些常规选项。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lightsail.aws.amazon.com/&#34;&gt;AWS LightSail&lt;/a&gt; 是一个非常便宜好用的服务，最低配置一个月 $3.5 美金，流量不限，目前的Zone不多，推荐使用日本，新加坡或美国俄勒冈（支持银联卡）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/cn/&#34;&gt;AWS EC2&lt;/a&gt;香港、日本或韩国申请个免费试用一年的EC2 VPS （支持银联卡）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cloud.google.com/&#34;&gt;Google Cloud Platform&lt;/a&gt;提供免费试用，赠送300刀赠金（需要国际信用卡）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.linode.com&#34;&gt;Linode&lt;/a&gt;买个一月USD5刀的VPS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.conoha.jp/zh/&#34;&gt;Conoha&lt;/a&gt;上买一个日本的VPS，一个月900日元 （可以支付宝）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.vultr.com&#34;&gt;Vultr&lt;/a&gt;上买一个日本的VPS，一个月5刀 （可以支付宝）(注：据说被墙的IP太多）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.oracle.com/cloud/free/&#34;&gt;Oracle Cloud&lt;/a&gt;两台VPS无限期使用，可选美日韩等地（需要国际信用卡）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;在中国，因为有太多的网络提供商，所以，国内的网络也是很奇葩的，可以看到的是，不同的地方，不同的网络，到不同的国家完全不一样，而且还经常性地调整路由，所以，经常性地有时候快有时候慢，简直就是随机的。所以，像我这样要求比较高的人，一般会备3-5个不同国家地区的VPS，以保障上网的速度。&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;香港网速应该是比较好的，但是香港的成本也是比较高的。台湾的网速也是不错的，日本的网速其次，新加坡再次之，然后是美国的东海岸（这里是基于北京和上海的情况）&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;日本区的网络质量并不一定很好，有时候快的飞快，但有时候会有很大的丢包率（不同的网络不一样），有时候会很慢。上述的这几个VPS服务商中，AWS韩国和日本会好点，然后是 Linode，最后是 Conoha 和 Vultr（如果你有更好的，请推荐）&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Google Cloud Platform - GCP 的香港和台湾节点也是很快的。但是你要能买GCP的主机，你还得先翻墙，所以，感觉有点死锁了。所以，你可能先用 Vultr（按时付费）翻墙，然后再到GCP上购买。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;2.2 CN2 线路&lt;/h3&gt; &#xA;&lt;p&gt;如果你需要更好更高速的网络服务（比如你要看Youtube的1080P），那么，你需要下面的这些服务器资源了（价格也会高一些）&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;CN2&lt;/code&gt; 和 &lt;code&gt;GIA&lt;/code&gt; 是两个关键词。&lt;strong&gt;CN2 GIA&lt;/strong&gt; 全称 China telecom Next Carrier Network- Global Internet Access 电信国际精品网络，特征是路由线路上骨干节点均为59.43开头的IP。如果想要寻找接入CN2线路的国外VPS提供商，建议使用 &lt;code&gt;Next Carrier Network&lt;/code&gt; 或者 &lt;code&gt;CN2&lt;/code&gt; 这个关键词搜索即可。&lt;/p&gt; &#xA;&lt;p&gt;多说一句， CN2本身又分为两种类型：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;CN2 GT&lt;/strong&gt;: CN2 里属于Global Transit的产品(又名GIS-Global Internet Service)，在CN2里等级低，省级/出国节点为 &lt;code&gt;202.97&lt;/code&gt; 开头，国际骨干节点有2～4个 &lt;code&gt;59.43&lt;/code&gt; 开头的CN2节点。在出国线路上拥堵程度一般，相对于163骨干网的稍强，相比CN2 GIA，性价比也较高。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;CN2 GIA&lt;/strong&gt;: CN2 里属于Global Internet Access的产品，等级最高，省级/出国/国际骨干节点都以&lt;code&gt;59.43&lt;/code&gt;开头，全程没有&lt;code&gt;202.97&lt;/code&gt;开头的节点。在出国线路上表现最好，很少拥堵，理论上速度最快最稳定，当然，价格也相对 CN2 GT 偏高。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;关于 &lt;code&gt;CN2&lt;/code&gt; 线路的主机提供商，下面罗列几个&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bwh8.net/aff.php?aff=39384&#34;&gt;搬瓦工&lt;/a&gt; 这应该是美区最好的一个用来科学上网的VPS提供商了，实测飞快。购买时你需要注意VPS规格上的 &lt;code&gt;CN2&lt;/code&gt; 和 &lt;code&gt;GIA&lt;/code&gt; 的描述。（注：点击主页右上角的 &lt;code&gt;regisiter&lt;/code&gt; 以后，你可以看到页面上方有两个导航条，在下面的导航条上点 &lt;code&gt;Services&lt;/code&gt; -&amp;gt; &lt;code&gt;Order New Services&lt;/code&gt; 就可以看到所有的列表了。买完后，你可能需要重装一下操作系统，装成64位带BBR的 ）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://clientarea.gigsgigscloud.com/index.php?/cart/cloudlet-v-hk/&amp;amp;step=0&#34;&gt;Gigsgigscloud&lt;/a&gt; CN2 GIA 在香港的节点是很不错的，当然，价格也很不错（建议几个人一起平摊费用）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://manage.hostdare.com/index.php&#34;&gt;Hostdare&lt;/a&gt; 的CN2 GIA产品也是三网直连，KVM和OpenVZ两种架构，KVM产品长期缺货&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;更多的可以参考这篇文章《&lt;a href=&#34;https://wzfou.com/cn2-gia-vps/&#34;&gt;CN2 GIA VPS主机收集整理汇总-电信,联通,移动三网CN2 GIA线路VPS主机&lt;/a&gt;》（注：随时间推移，这篇文章的内容可能会失效）&lt;/p&gt; &#xA;&lt;p&gt;重点说一下，&lt;strong&gt;CN2 GIA + 香港机房&lt;/strong&gt;，你会得到巨快无比的上网速度（无论你在中国的哪个位置，无论使用哪家运营商，CN2 GIA都是最优的），然而，香港地区的VPS的确是有点贵了。在Youtube.com上看 4K 的视频毫无压力。虽然阿里云和腾讯的也有，但是被查到的风险基本上是100%，不建议使用，被抓了别怪我没警告过你。&lt;/p&gt; &#xA;&lt;h3&gt;2.3 NCP 线路&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;NCP&lt;/strong&gt; 全称 New Cross Pacific（新跨太平洋海底光缆系统）。 2018年11月底，中国到美国之间的海底光缆新开通了NCP线路，并且容量更大（系统设计容量超过80Tbps），路由更少（中国上海到美国中间路由节点只有11个，ping值110ms）。&lt;/p&gt; &#xA;&lt;p&gt;NCP线路全长13,000公里，连接美国俄勒冈州希尔斯伯勒，连接崇明（中国大陆），南汇（中国大陆），临港（中国大陆），釜山（韩国），头城（台湾），和丸山（日本）。&lt;/p&gt; &#xA;&lt;p&gt;相对于第二条中美直达海底光缆系统（跨太平洋快线，TPE），现阶段NCP线路的网络流量更少更稳定。特征是华东/中地区流量会经过NCP直达路由节点，IP地址为202.97.95.201/202。&lt;/p&gt; &#xA;&lt;p&gt;关于 &lt;code&gt;NCP&lt;/code&gt; 线路的主机提供商，下面罗列两个（欢迎补充）&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.50kvm.com&#34;&gt;50KVM VPS&lt;/a&gt; 截止2018年12月2日KVM 产品最低价格￥81.60/月。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t667.com/&#34;&gt;OLVPS&lt;/a&gt; 截止2018年12月2日KVM 产品最低价格¥22/月。（&lt;strong&gt;特别注意&lt;/strong&gt; ： 在 OLVPS 上的《&lt;a href=&#34;https://olvps.com/index.php?rp=/knowledgebase/1/TOS.html&#34;&gt;服务条款&lt;/a&gt;》 中有一条说明：“&lt;strong&gt;禁止OpenV&lt;em&gt;P&lt;/em&gt;N/Socks5/PPTP/L2TP等软件、公共代理&lt;/strong&gt;”，所以，可能OLPVS并不太适合）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;3. 搭建相关代理服务&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;注：如下的搭建和安装脚本可参看本库的 scripts 目录下的脚本，如： &lt;a href=&#34;https://github.com/haoel/haoel.github.io/raw/master/scripts/install.ubuntu.18.04.sh&#34;&gt;Ubuntu 18.04 Installation Script&lt;/a&gt; （感谢网友 &lt;a href=&#34;https://github.com/gongzili456&#34;&gt;@gongzili456&lt;/a&gt; 开发）&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;3.1 设置Docker服务&lt;/h3&gt; &#xA;&lt;p&gt;首先，你要安装一个Docker CE 服务，这里你要去看一下docker官方的安装文档：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/install/linux/docker-ce/centos/&#34;&gt;CentOS 上的 Docker CE 安装&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/install/linux/docker-ce/ubuntu/&#34;&gt;Ubuntu 上的 Docker CE 安装&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;然后开始设置你的VPN/SS服务&lt;/p&gt; &#xA;&lt;h3&gt;3.2 开启 TCP BBR 拥塞控制算法&lt;/h3&gt; &#xA;&lt;p&gt;TCP BBR（Bottleneck Bandwidth and Round-trip propagation time）是由Google设计，于2016年发布的拥塞算法。以往大部分拥塞算法是基于丢包来作为降低传输速率的信号，而BBR则基于模型主动探测。该算法使用网络最近出站数据分组当时的最大带宽和往返时间来创建网络的显式模型。数据包传输的每个累积或选择性确认用于生成记录在数据包传输过程和确认返回期间的时间内所传送数据量的采样率。该算法认为随着网络接口控制器逐渐进入千兆速度时，分组丢失不应该被认为是识别拥塞的主要决定因素，所以基于模型的拥塞控制算法能有更高的吞吐量和更低的延迟，可以用BBR来替代其他流行的拥塞算法，例如CUBIC。Google在YouTube上应用该算法，将全球平均的YouTube网络吞吐量提高了4%，在一些国家超过了14%。&lt;/p&gt; &#xA;&lt;p&gt;BBR之后移植入Linux内核4.9版本，并且对于QUIC可用。&lt;/p&gt; &#xA;&lt;p&gt;如果开启，请参看 《&lt;a href=&#34;https://github.com/iMeiji/shadowsocks_install/wiki/%E5%BC%80%E5%90%AF-TCP-BBR-%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95&#34;&gt;开启TCP BBR拥塞控制算法&lt;/a&gt; 》&lt;/p&gt; &#xA;&lt;h3&gt;3.3 用 Gost 设置 HTTPS 服务&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ginuerzh/gost&#34;&gt;gost&lt;/a&gt; 是一个非常强的代理服务，它可以设置成 HTTPS 代理，然后把你的服务伪装成一个Web服务器，&lt;strong&gt;我感觉这比其它的流量伪装更好，也更隐蔽。这也是这里强烈推荐的一个方式&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;p&gt;为了更为的隐蔽，你需要一个域名（可以上 GoDaddy，但一定要使用美国版），然后使用 &lt;a href=&#34;https://letsencrypt.org&#34;&gt;Let&#39;s Encrypt&lt;/a&gt; 来签 一个证书。使用 Let&#39;s Encrypt 证书你需要在服务器上安装一个 &lt;a href=&#34;https://certbot.eff.org/instructions&#34;&gt;certbot&lt;/a&gt;，点击 &lt;a href=&#34;https://certbot.eff.org/instructions&#34;&gt;certbot&lt;/a&gt; 这个链接，你可以选择你的服务器，操作系统，然后就跟着指令走吧。&lt;/p&gt; &#xA;&lt;p&gt;接下来，你需要申请一个证书（我们使用standalone的方式，然后，你需要输入你的电子邮件和你的域名）：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo certbot certonly --standalone&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;证书默认生成在 &lt;code&gt;/etc/letsencrypt/live/&amp;lt;YOUR.DOMAIN.COM/&amp;gt;&lt;/code&gt; 目录下，这个证书90天后就过期了，所以，需要使用一个 cron job 来定期更新（稍后给出）&lt;/p&gt; &#xA;&lt;p&gt;接下来就是启动 gost 服务了，我们这里还是使用 Docker 的方式建立 gost 服务器。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash&#xA;&#xA;# 下面的四个参数需要改成你的&#xA;DOMAIN=&#34;YOU.DOMAIN.NAME&#34;&#xA;USER=&#34;username&#34;&#xA;PASS=&#34;password&#34;&#xA;PORT=443&#xA;&#xA;BIND_IP=0.0.0.0&#xA;CERT_DIR=/etc/letsencrypt&#xA;CERT=${CERT_DIR}/live/${DOMAIN}/fullchain.pem&#xA;KEY=${CERT_DIR}/live/${DOMAIN}/privkey.pem&#xA;sudo docker run -d --name gost \&#xA;    -v ${CERT_DIR}:${CERT_DIR}:ro \&#xA;    --net=host ginuerzh/gost \&#xA;    -L &#34;http2://${USER}:${PASS}@${BIND_IP}:${PORT}?cert=${CERT}&amp;amp;key=${KEY}&amp;amp;probe_resist=code:404&amp;amp;knock=www.google.com&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;上面这个脚本，你需要配置：域名(&lt;code&gt;DOMAIN&lt;/code&gt;), 用户名 (&lt;code&gt;USER&lt;/code&gt;), 密码 (&lt;code&gt;PASS&lt;/code&gt;) 和 端口号(&lt;code&gt;PORT&lt;/code&gt;) 这几个变量。&lt;/p&gt; &#xA;&lt;p&gt;关于 gost 的参数， 你可以参看其文档：&lt;a href=&#34;https://docs.ginuerzh.xyz/gost/&#34;&gt;Gost Wiki&lt;/a&gt;，上面我设置一个参数 &lt;code&gt;probe_resist=code:404&lt;/code&gt; 意思是，如果服务器被探测，或是用浏览器来访问，返回404错误，也可以返回一个网页（如：&lt;code&gt;probe_resist=file:/path/to/file.txt&lt;/code&gt; 或其它网站 &lt;code&gt;probe_resist=web:example.com/page.html&lt;/code&gt;）&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：开启了探测防御功能后，当认证失败时服务器默认不会响应 &lt;code&gt;407 Proxy Authentication Required&lt;/code&gt;，但某些情况下客户端需要服务器告知代理是否需要认证(例如Chrome中的 SwitchyOmega 插件)。通过knock参数设置服务器才会发送407响应。对于上面的例子，我们的&lt;code&gt;knock&lt;/code&gt;参数配置的是&lt;code&gt;www.google.com&lt;/code&gt;，所以，你需要先访问一下 &lt;code&gt;https://www.google.com&lt;/code&gt; 让服务端返回一个 &lt;code&gt;407&lt;/code&gt; 后，SwitchyOmega 才能正常工作。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：如果认证信息（也就是用户名和密码）中包含特殊字符，则可以（应该是必须！否则客户端一侧会有很多不兼容）通过auth参数来设置：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gost -L :8080?auth=YWRtaW46MTIzNDU2 -F ss://:8338?auth=Y2hhY2hhMjA6QWEjJiEkMTIzNEA1Njc4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;auth的值为user:passbase64编码值&lt;/p&gt; &#xA;&lt;p&gt;如无意外，你的服务就启起来了。你可以使用下面的命令验证你的 gost 服务是否正常。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -v &#34;https://www.google.com&#34; --proxy &#34;https://DOMAIN&#34; --proxy-user &#39;USER:PASS&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;接下来就是证书的自动化更新。&lt;/p&gt; &#xA;&lt;p&gt;可以使用命令 &lt;code&gt;crontab -e&lt;/code&gt; 来编辑定时任务：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0 0 1 * * /usr/bin/certbot renew --force-renewal&#xA;5 0 1 * * /usr/bin/docker restart gost&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;S 这样，服务器就配置完成了。客户端请移动后面的客户端章节。&lt;/p&gt; &#xA;&lt;h3&gt;3.4 设置 ShadowSocks 服务&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;（注：ShadowSocks 被查的机率非常大，不推荐使用）&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;ShadowSocks 的 Docker 启动脚本 （其中的 &lt;code&gt;SS_PORT&lt;/code&gt; 和 &lt;code&gt;SS_PASSWD&lt;/code&gt; 需要重新定义一下）&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash&#xA;&#xA;SS_PORT=1984&#xA;SS_PASSWD=MyPasswd&#xA;&#xA;sudo docker run -dt --name ss \&#xA;   -p ${SS_PORT}:${SS_PORT} mritd/shadowsocks \&#xA;   -s &#34;-s 0.0.0.0 -p ${SS_PORT} -m aes-256-cfb -k ${SS_PASSWD} --fast-open&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3.5 设置L2TP/IPSec服务&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;（注：VPN方式被查的机率非常大，不推荐使用）&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;L2TP/IPSec 的启动脚本，其中的三个环境变量 &lt;code&gt;USER&lt;/code&gt;， &lt;code&gt;PASS&lt;/code&gt; 和 &lt;code&gt;PSK&lt;/code&gt; 需要替换一下。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash&#xA;&#xA;USER=someone&#xA;PASS=password&#xA;PSK=psk_key&#xA;&#xA;sudo docker run -d  --privileged \&#xA;    -e PSK=${PSK} \&#xA;    -e USERNAME=${USER} -e PASSWORD=${PASS} \&#xA;    -p 500:500/udp \&#xA;    -p 4500:4500/udp \&#xA;    -p 1701:1701/tcp \&#xA;    -p 1194:1194/udp  \&#xA;    siomiz/softethervpn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3.6 设置 PPTP 服务&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;（注：PPTP 不安全，请不要使用）&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo docker run -d --privileged --net=host&#xA;                -v {/path_to_file/chap-secrets}:/etc/ppp/chap-secrets \&#xA;                mobtitude/vpn-pptp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;PPTP 使用 &lt;code&gt;/etc/ppp/chap-secrets&lt;/code&gt; 文件设置用户名和密码，所以你需要给docker容器提供这个文件，下面是这个文件的示例：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;# Secrets for authentication using PAP&#xA;# client    server      secret           acceptable local IP addresses&#xA;  fuckgfw   *           whosyourdaddy    *&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;4. 客户端设置&lt;/h2&gt; &#xA;&lt;h3&gt;4.1 gost 客户端&lt;/h3&gt; &#xA;&lt;p&gt;大多数的代理服务都支持 https 的代理，但是我们需要智能代理（也就是该翻的时候翻，不用翻的时候不翻），那么我们可以重用 ShadowSocks 的客户端。&lt;/p&gt; &#xA;&lt;p&gt;对于电脑来说，你同样可以 &lt;a href=&#34;https://github.com/ginuerzh/gost/releases&#34;&gt;下载 gost 程序&lt;/a&gt;，然后使用下面的命令行：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gost -L ss://aes-128-cfb:passcode@:1984 -F &#39;https://USER:PASS@DOMAIN:443&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;这样用 gost 在你的本机启动了一个 &lt;code&gt;ShadowSocks&lt;/code&gt; 的服务，然后，把请求转到你在上面配置的 HTTPS服务器上，这样就完成转接。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;┌─────────────┐  ┌─────────────┐            ┌─────────────┐&#xA;│ ShadowSocks │  │             │            │             │&#xA;│    Client   ├──► Gost Client ├────────────► Gost Server │&#xA;│ (PAC Auto)  │  │             │            │             │&#xA;└─────────────┘  └─────────────┘            └─────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;ShadowSocks Client 主要完成：自动设置操作系统代理服务器的 pac （自动设置翻墙或是不翻墙的路由）&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;这样，你的ShadowSocks客户端只需要简单的配置一个本机的 SS 配置就好了。&lt;/p&gt; &#xA;&lt;p&gt;对于手机端&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iPhone，可以考虑使用 &lt;code&gt;ShadowRocket&lt;/code&gt; （需要付费），其中使用 HTTPS 的代理，配置上就好了。&lt;/li&gt; &#xA; &lt;li&gt;Android，可以考虑使用这个Plugin - &lt;a href=&#34;https://github.com/xausky/ShadowsocksGostPlugin&#34;&gt;ShadowsocksGostPlugin&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;注明&lt;/strong&gt;：如果你之前使用了Chrome插件 SwitchyOmega，如果无法直接配置HTTPS代理，具体原因可能是因为你设置了&lt;code&gt;probe_resist&lt;/code&gt;以开启探测防御功能。这里，你需要在服务器端设置 &lt;code&gt;knock&lt;/code&gt; 参数（参看 &lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#33-%E7%94%A8-gost-%E8%AE%BE%E7%BD%AE-https-%E6%9C%8D%E5%8A%A1&#34;&gt;用 Gost 设置 HTTPS 服务&lt;/a&gt; 中的“注意”一节 ）&lt;/p&gt; &#xA;&lt;p&gt;或是，干脆使用gost客户端在本机启动一个 SOCKS5的代理服务用来代替（&lt;code&gt;gost -L socks5://:1080 -F &#39;https://USER:PASS@DOMAIN:443&#39;&lt;/code&gt;），然后在 SwitchyOmega 配置代理为&#39;127.0.0.1:1080&#39;即可。比如:&lt;/p&gt; &#xA;&lt;h3&gt;4.2 Shadowsocks 客户端&lt;/h3&gt; &#xA;&lt;p&gt;对于 Shadowsocks 客户端，可以到这里查看 &lt;a href=&#34;https://shadowsocks.org/en/download/clients.html&#34;&gt;Shadowsocks Clients&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MacOS 上你可以下载 &lt;a href=&#34;https://github.com/shadowsocks/ShadowsocksX-NG/releases&#34;&gt;ShadowsocksX-NG&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Windows上你可以下载 &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-windows/releases&#34;&gt;Shadowsocks-Windows&lt;/a&gt;，需要先安装 &lt;a href=&#34;https://dotnet.microsoft.com/download/dotnet-framework-runtime&#34;&gt;.NET Framework&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Android的客户端，你可以用手机访问并下载 &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-android/releases&#34;&gt;Shadowsocks-Android&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;iPhone 端就比较麻烦了。因为国内全都被下架了。 &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;你需要注册一个美国的苹果ID.&lt;/li&gt; &#xA;   &lt;li&gt;然后 iTunes/App Store 用这个美区的ID登录（不是退出iCloud ，而是退出App Store）&lt;/li&gt; &#xA;   &lt;li&gt;然后搜索 &lt;code&gt;Potatso Lite&lt;/code&gt; ，&lt;code&gt;ShadowRocket&lt;/code&gt;, &lt;code&gt;Wingy&lt;/code&gt;, &lt;code&gt;Quantumult&lt;/code&gt; 等。（我使用前两个）&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;关于如何注册美区Apple ID账号，你可以参看如下的这几篇文章（我不保证这些文章可不可用，但是你可以自行Google）。 &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/36574047&#34;&gt;5分钟注册美国区Apple ID（18年亲测有效）&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/b32da641e849&#34;&gt;2018年6月亲测：注册美国地区苹果apple ID帐号终极教程&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/ziyuzhiye/article/details/82769129&#34;&gt;iOS开发之注册美国Apple Id不需要绑定信用卡，亲测可用&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;4.3 VPN 客户端&lt;/h3&gt; &#xA;&lt;p&gt;对于L2TP/IPSec，几乎所有的客户端操作系统（无论是Windows/Mac/Linux的电脑，还是iPhone/Android）都支持，你可以自行Google。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/24e48cfb574f&#34;&gt;Mac OS X PPTP/L2TP设置教程&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://nic.upc.edu.cn/2016/0928/c7809a132077/page.htm&#34;&gt;Windows 7操作系统配置L2TP VPN方法&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;5. 流量伪装和其它方式&lt;/h2&gt; &#xA;&lt;p&gt;无论你用VPN，SS，SSR，都有可能被识别，&lt;strong&gt;只有使用 HTTP over TLS 的样子，才会跟正常的流量混在一起，很难被识别&lt;/strong&gt;，所以，目前来说，V2Ray客户端 + Nginx + V2Ray服务端的方式，或是gost的HTTPS的方式，基本上来说，在网络四层上看到的都是TLS的包，很难被识别。这种代理服务我觉得只能做探测，或是得到更多的算力来做统计学分析。所以，V2Ray 和 gost 的服务器端用 nginx 再挡一道，那么就很难被发现了。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; 说句老实话，我其时并不想害怕别人知道自己的上什么样的网站，因为我觉得我访问的都是合法的网站，但是就今天这个局势我也没办法——为什么要让像我这样的光明正大的良民搞得跟偷鸡摸狗之徒一样……&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;5.1 V2Ray&lt;/h3&gt; &#xA;&lt;p&gt;V2Ray 可以配置成一个非常隐蔽的代理软件。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;V2Ray 用户手册：&lt;a href=&#34;https://www.v2fly.org&#34;&gt;https://www.v2fly.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;V2Ray 项目地址：&lt;a href=&#34;https://github.com/v2fly/v2ray-core&#34;&gt;https://github.com/v2fly/v2ray-core&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;一般来说，祼用 V2Ray 不是一个很好的方式，现在比较流行的是使用nginx来代理，也就是 V2Ray + WebSocket + TLS + Nginx，可以参看这篇文章《&lt;a href=&#34;https://guide.v2fly.org/advanced/wss_and_web.html&#34;&gt;V2Ray+WebSocket+TLS+Nginx配置与使用教程&lt;/a&gt;》（需要翻墙）。&lt;/p&gt; &#xA;&lt;p&gt;我个人觉得，配置起来比较复杂，而且环节太多，不如直接用 &lt;code&gt;gost&lt;/code&gt; 的 https/http2 的方式配置起来简单，所以，没有放在前面。&lt;/p&gt; &#xA;&lt;h3&gt;5.2 Brook&lt;/h3&gt; &#xA;&lt;p&gt;Brook是一个由 Go语言编写的跨平台代理软件，支持 Linux/MacOS/Windows/Android/iOS 各个平台。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Brook Github项目：&lt;a href=&#34;https://github.com/txthinking/brook&#34;&gt;https://github.com/txthinking/brook&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Github Wiki教程：&lt;a href=&#34;https://github.com/txthinking/brook/wiki/%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E(%E4%B8%AD%E6%96%87)&#34;&gt;https://github.com/txthinking/brook/wiki/使用说明(中文)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;服务器一行命令安装：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/brook.sh &amp;amp;&amp;amp; chmod +x brook.sh &amp;amp;&amp;amp; bash brook.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;运行 &lt;code&gt;brook.sh&lt;/code&gt; 会出菜单项，你可以按菜单项来，主要就是设置端口号，密码。很简单的，我这里就不截图了，因为这个脚本运行起来中文菜单式的。&lt;/p&gt; &#xA;&lt;p&gt;然后你可以在 Brook 项目的 Github 首页上下载不同平台的客户端。设置起来也很简单！&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;注意: 如果运行出现下载错误，可能是因为brook的下载文件名问题，你需要自己修改一下脚本：&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Download_brook(){&#xA; &#x9;[[ ! -e ${file} ]] &amp;amp;&amp;amp; mkdir ${file}&#xA; &#x9;cd ${file}&#xA; &#x9;if [[ ${bit} == &#34;x86_64&#34; ]]; then&#xA;-&#x9;&#x9;wget --no-check-certificate -N &#34;https://github.com/txthinking/brook/releases/download/${brook_new_ver}/brook&#34;&#xA;+&#x9;&#x9;wget --no-check-certificate -N &#34;https://github.com/txthinking/brook/releases/download/${brook_new_ver}/brook_linux_amd64&#34;&#xA;+&#x9;&#x9;mv brook_linux_amd64 brook&#xA; &#x9;else&#xA; &#x9;&#x9;wget --no-check-certificate -N &#34;https://github.com/txthinking/brook/releases/download/${brook_new_ver}/brook_linux_386&#34;&#xA; &#x9;&#x9;mv brook_linux_386 brook&#xA; &#x9;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;6. 针对 IP 被封的解决方案&lt;/h2&gt; &#xA;&lt;p&gt;花钱购买的 VPS 即便做了流量伪装依然有很大的几率 IP 被封锁，大多 VPS 服务商并不提供更换 IP 的服务，使用 CDN 可以让被封锁的 VPS 继续发挥翻墙功能。&lt;/p&gt; &#xA;&lt;h3&gt;6.1 Cloudflare&lt;/h3&gt; &#xA;&lt;p&gt;Cloudflare 是一个 CDN 服务商，目前国内依然能正常的访问，可以作为跳板来实现翻墙。&lt;/p&gt; &#xA;&lt;p&gt;注册 Cloudflare 帐号，并有一个空闲域名（三级域名即可），交给 Cloudflare 托管并将域名指向被封的 VPS IP，注意开启 Proxied 并且 SSL-TLS 使用 Flexible 选项。&lt;/p&gt; &#xA;&lt;p&gt;Cloudflare 只需免费方案足以，不必花钱。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;：如果你要用Cloudflare来代理 gost 服务的话，你得使用 Websocket协议&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;server&lt;/strong&gt;: &lt;code&gt;gost -L=mwss://user:password@:443&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;client&lt;/strong&gt;: &lt;code&gt;gost -L socks5://:1080 -F mwss://user:password@yourdomain:443&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;cloudflare&lt;/strong&gt;: &lt;code&gt;ssl/tls:full&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;6.2 V2Ray&lt;/h3&gt; &#xA;&lt;p&gt;VPS 上正常安装并配置好 V2Ray，注意两点:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;传输协议必须要使用 ws&lt;/li&gt; &#xA; &lt;li&gt;要使用 80 或者 8080 端口&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;如果端口有其他用途，那么用 Nginx/Caddy 之类软件，做一个 WebSocket proxy 到 V2Ray 即可。&lt;/p&gt; &#xA;&lt;h3&gt;6.3 补充&lt;/h3&gt; &#xA;&lt;p&gt;客户端注意使用网址来连接。&lt;/p&gt; &#xA;&lt;p&gt;目前支持 WebSocket 的免费 CDN 似乎只有 Cloudflare 一家，国内 CDN 服务商既不支持也不安全，不要考虑了。如果有更好的服务商欢迎补充。&lt;/p&gt; &#xA;&lt;p&gt;网络延迟比直连增加不少，如果是频繁操作会很痛苦。网络带宽如果运气好可能比直连还优化了，用来看 Youtube 搞不好更流畅。&lt;/p&gt; &#xA;&lt;h2&gt;7. 家用透明网关&lt;/h2&gt; &#xA;&lt;h3&gt;7.1 OpenWRT 路由器&lt;/h3&gt; &#xA;&lt;p&gt;所谓透明网关的意思是，一切都交给网关来做。最好的方式是你需要一个 OpenWRT 的路由器，推荐使用华硕的路由器，贵是贵一些，但是这几年用下来，非常不错。我用的是 &lt;strong&gt;华硕（ASUS） RT-AC68U 1900M AC 双频智能无线路由路&lt;/strong&gt; 。&lt;/p&gt; &#xA;&lt;p&gt;路由器买来后，要刷一下固件。首先 Asuswrt 是华硕公司为他的路由器所开发的固件。Asuswrt-merlin是一个对Asuswrt固件二次开发进行各种改进和修正的项目。源代码在这里：&lt;a href=&#34;https://github.com/RMerl/asuswrt-merlin&#34;&gt;https://github.com/RMerl/asuswrt-merlin&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;不必担心把路由器刷废了，华硕的路由器可以让你一键重置回来&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1）下载固件&lt;/strong&gt;。先到 &lt;a href=&#34;https://asuswrt.lostrealm.ca/download&#34;&gt;https://asuswrt.lostrealm.ca/download&lt;/a&gt; 下载相应的固件，并解压。（我下载的是 &lt;code&gt;RT-AC68U_380.61_0.zip&lt;/code&gt; ）&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2）升级固件&lt;/strong&gt;。登录到你的路由器后台 &lt;code&gt;http://192.168.1.1/&lt;/code&gt; ，在 &lt;code&gt;系统管理&lt;/code&gt; -&amp;gt; &lt;code&gt;固件升级&lt;/code&gt; 中上传固件文件（我上传的是：&lt;code&gt;RT-AC68U_380.61_0.trx&lt;/code&gt;）&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;3）打开 JFFS 分区&lt;/strong&gt;。&lt;code&gt;系统管理&lt;/code&gt; -&amp;gt; &lt;code&gt;系统设置&lt;/code&gt; -&amp;gt; &lt;code&gt;Persistent JFFS2 partition&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Format JFFS partition at next boot&lt;/code&gt; - &lt;code&gt;否&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Enable JFFS custom scripts and configs&lt;/code&gt; - &lt;code&gt;是&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;4）打开 ssh 登录&lt;/strong&gt;。 &lt;code&gt;系统管理&lt;/code&gt; -&amp;gt; &lt;code&gt;系统设置&lt;/code&gt; -&amp;gt; &lt;code&gt;SSH Daemon&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Allow SSH password login&lt;/code&gt; - &lt;code&gt;是&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;接下来，在 WiFi 路由器上安装 Clash，就可以了。&lt;/p&gt; &#xA;&lt;p&gt;大概的示意图如下所示。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;        Phone/PC/Pad （无需设置）&#xA;             │&#xA;             │&#xA;             │ 1&#xA;             │&#xA;    ┌────────▼──────┐&#xA;    │               │&#xA;    │  WiFi Router  │ （安装 Clash 网关）&#xA;    │               │&#xA;    └─────┬────┬────┘&#xA;          │    │&#xA;          │    │ 2&#xA;          │    └────────► 墙内 - China LAN&#xA;       3  │&#xA;    ┌─────▼──────┐&#xA;    │    VPS     │&#xA;    │   Proxy    │&#xA;    └─────┬──────┘&#xA;          │&#xA;          │&#xA;          ▼&#xA;        墙外 - Internet WAN&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;7.2 通过树莓派做旁路网关&lt;/h3&gt; &#xA;&lt;p&gt;如果你的路由器不能刷 OpenWRT，也就是没法通过SSH登录上去装软件，你就用一个别的设备。比如用一个树莓派。我正好有一个很老旧的树莓派，刷了一个老旧的 Debian 7.5的操作系统。&lt;/p&gt; &#xA;&lt;p&gt;把它连上你的路由器上，然后，&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;你需要把你设备上的IP地址、网关和DNS服务器都要手动设置到这个树莓派上。&lt;/li&gt; &#xA; &lt;li&gt;于是，所有的路由就会通过路由器转到树莓派上，再由树莓派决定是否要走代理。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;大概的示意图如下所示。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;1 --&amp;gt; 2 是设备把所有的请求都发给树莓派。&lt;/li&gt; &#xA; &lt;li&gt;3 --&amp;gt; 3.1 或 3.2 是由树莓派来决走是否翻墙。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;        Phone/PC/Pad （设置&#34;网关&#34;和&#34;DNS&#34;为树莓派）&#xA;             │&#xA;             │&#xA;             │ 1&#xA;             │                    （安装 Clash 网关）&#xA;    ┌────────▼──────┐      2       ┌───────────┐&#xA;    │               ├──────────────►           │&#xA;    │  WiFi Router  │              │   树莓派   │&#xA;    │               ◄──────────────┤           │&#xA;    └─────┬────┬────┘      3       └───────────┘&#xA;          │    │&#xA;          │    │ 3.2&#xA;          │    └────────► 墙内 - China LAN&#xA;      3.1 │&#xA;    ┌─────▼──────┐&#xA;    │    VPS     │&#xA;    │   Proxy    │&#xA;    └─────┬──────┘&#xA;          │&#xA;          │&#xA;          ▼&#xA;        墙外 - Internet WAN&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;7.3 安装 Clash&lt;/h3&gt; &#xA;&lt;p&gt;Clash 的 Github项目是：&lt;a href=&#34;https://github.com/Dreamacro/clash&#34;&gt;Dreamacro/clash&lt;/a&gt; ，在它的 Release 页面上，你可以找到相关的下载。（注：在本文更新的时候，如果你需要支持 Tun，你需要下载 Clash 的 &lt;a href=&#34;https://github.com/Dreamacro/clash/releases/tag/premium&#34;&gt;Premium 版本&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Clash 支持很多翻墙协议：ShadowSocks(R), Vmess, Socks5, HTTP(s)，Snell，Trojan。&lt;/p&gt; &#xA;&lt;p&gt;在你的 OpenWRT 或 树莓派 下用 &lt;code&gt;uname -m&lt;/code&gt; 查看一下你的硬件架构是什么的，比如，我的是华硕和树莓派都是 &lt;code&gt;armv7l&lt;/code&gt; 的，所以，需要下载 &lt;code&gt;clash-linux-armv7-....&lt;/code&gt;的版本（注：根据 clash 官方仓库 &lt;a href=&#34;https://github.com/Dreamacro/clash/issues/189&#34;&gt;Dreamacro/clash#189&lt;/a&gt; 系列固件不适用 armv7l 架构的 AC68U，需选择 armv5）。 下载完解压后，加个可执行权限 &lt;code&gt;chmod +x clash&lt;/code&gt; 就可以运行了，不过，还差一个界面和两个配置文件，它们的目录关系如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;├── clash                &amp;lt;- 建一个 clash 的目录&#xA;│&amp;nbsp;&amp;nbsp; ├── clash            &amp;lt;- 运行文件&#xA;│&amp;nbsp;&amp;nbsp; ├── config.yaml      &amp;lt;- 配置文件&#xA;│&amp;nbsp;&amp;nbsp; ├── Country.mmdb     &amp;lt;- IP地址库&#xA;│&amp;nbsp;&amp;nbsp; └── ui               &amp;lt;- Clash 的 UI&#xA;│&amp;nbsp;&amp;nbsp;     ├── index.html&#xA;│&amp;nbsp;&amp;nbsp;     ├── ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;UI界面可以到 &lt;a href=&#34;https://github.com/haishanh/yacd&#34;&gt;haishah/yacd&lt;/a&gt; 下载。放到clash的配置目录下 &lt;code&gt;ui&lt;/code&gt; 目录下&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;一个是 &lt;code&gt;Country.mmdb&lt;/code&gt; 这是IP地址的在哪个国家的数据库。你需要到这里下载 - &lt;a href=&#34;https://github.com/Dreamacro/maxmind-geoip/releases/latest/download/Country.mmdb&#34;&gt;Country.mmdb&lt;/a&gt; （当然，clash启动时，会自动下载，我这里给你一个手动下载的链接）&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;另一个是 &lt;code&gt;config.yaml&lt;/code&gt; 文件，这个文件详细解释可参看 - &lt;a href=&#34;https://github.com/Dreamacro/clash/wiki/configuration&#34;&gt;官方Wiki&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;下面是个示例：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;port: 7890&#xA;socks-port: 7891&#xA;redir-port: 7892&#xA;mixed-port: 7893&#xA;ipv6: false&#xA;allow-lan: true&#xA;mode: Rule&#xA;log-level: info&#xA;external-controller: &#39;0.0.0.0:9090&#39;&#xA;external-ui: ui&#xA;secret: &#39;&#39;&#xA;tun:&#xA;  enable: true&#xA;  stack: system&#xA;  dns-hijack:&#xA;    - tcp://8.8.8.8:53&#xA;    - udp://8.8.8.8:53&#xA;dns:&#xA;  enable: true&#xA;  ipv6: false&#xA;  listen: 0.0.0.0:53&#xA;  default-nameserver:&#xA;    - 114.114.114.114&#xA;  #enhanced-mode: redir-host&#xA;  enhanced-mode: fake-ip #如果要玩netflix，需要使用fake-ip&#xA;  fake-ip-range: 198.18.0.1/16&#xA;  nameserver:&#xA;    - 114.114.114.114&#xA;    - 223.5.5.5&#xA;    - tls://8.8.8.8:853&#xA;  fallback:&#xA;    - tls://8.8.8.8:853&#xA;&#xA;# 两个代理服务器&#xA;proxies:&#xA;  # http&#xA;  - name: &#34;https01&#34;&#xA;    type: http&#xA;    server: https.server.domain&#xA;    port: 443&#xA;    username: user&#xA;    password: &#34;password&#34;&#xA;    tls: true # https&#xA;    skip-cert-verify: true&#xA;  - name: &#34;https01&#34;&#xA;    type: http&#xA;    server: https.server.domain&#xA;    port: 443&#xA;    username: user&#xA;    password: &#34;passowrd&#34;&#xA;    tls: true # https&#xA;    skip-cert-verify: true&#xA;&#xA;# 配置 Group&#xA;proxy-groups:&#xA;  # 自动切换&#xA;  - name: &#34;auto&#34;&#xA;    type: url-test&#xA;    proxies:&#xA;      - us01_https&#xA;      #- us02_https&#xA;      #- hk_https&#xA;    # tolerance: 150&#xA;    url: &#39;https://www.google.com/&#39;&#xA;    interval: 300&#xA;  # 按需选择 - 可以在UI上选择&#xA;  - name: &#34;netflix&#34;&#xA;    type: select&#xA;    proxies:&#xA;      - us01_https&#xA;      - us02_https&#xA;      - hk_https&#xA;&#xA;rules:&#xA;# LAN&#xA;  - DOMAIN-SUFFIX,local,DIRECT&#xA;  - IP-CIDR,127.0.0.0/8,DIRECT&#xA;  - IP-CIDR,172.16.0.0/12,DIRECT&#xA;  - IP-CIDR,192.168.0.0/16,DIRECT&#xA;  - IP-CIDR,10.0.0.0/8,DIRECT&#xA;&#xA;# Netflix&#xA;  - DOMAIN-SUFFIX,fast.com,netflix&#xA;  - DOMAIN-SUFFIX,api-global.netflix.com,netflix&#xA;  - DOMAIN-SUFFIX,netflix.com,netflix&#xA;  - DOMAIN-SUFFIX,netflix.net,netflix&#xA;  - DOMAIN-SUFFIX,nflxext.com,netflix&#xA;  - DOMAIN-SUFFIX,nflximg.com,netflix&#xA;  - DOMAIN-SUFFIX,nflximg.net,netflix&#xA;  - DOMAIN-SUFFIX,nflxso.net,netflix&#xA;  - DOMAIN-SUFFIX,nflxvideo.net,netflix&#xA;&#xA;# 最终规则（除了中国区的IP之外的，全部翻墙）&#xA;  - GEOIP,CN,DIRECT&#xA;  - MATCH,auto&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;更多的规则网上可以找到很多，也可以参看这里：&lt;a href=&#34;https://github.com/Hackl0us/SS-Rule-Snippet/raw/master/LAZY_RULES/clash.yaml&#34;&gt;SS-Rule-Snippet/LAZY_RULES/clash.yaml&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;这个时候你就可以启动 clash 了：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;/path/to/clash/cash -d /path/to/clash &amp;amp;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;然后，你就可以把你的上网设备上的 路由网关 和 DNS 服务器都手动地配置成这个网关就好了（OpenWRT应该不用配置了，树莓派的方式需要手动配置一下）&lt;/p&gt; &#xA;&lt;h3&gt;7.4 设置 iptables 转发&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;iptables -t nat -N CLASH&#xA;iptables -t nat -A CLASH -d 10.0.0.0/8 -j RETURN&#xA;iptables -t nat -A CLASH -d 127.0.0.0/8 -j RETURN&#xA;iptables -t nat -A CLASH -d 169.254.0.0/16 -j RETURN&#xA;iptables -t nat -A CLASH -d 172.16.0.0/12 -j RETURN&#xA;iptables -t nat -A CLASH -d 192.168.0.0/16 -j RETURN&#xA;iptables -t nat -A CLASH -d 224.0.0.0/4 -j RETURN&#xA;iptables -t nat -A CLASH -d 240.0.0.0/4 -j RETURN&#xA;iptables -t nat -A CLASH -p tcp -j REDIRECT --to-ports 7892&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;然后，你可以保存一下这些 iptables 的规则&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt; iptables-save &amp;gt; /etc/iptables.up.rules&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;编辑 &lt;code&gt;//etc/network/if-pre-up.d/iptables&lt;/code&gt;，在网卡启动的时候加载这些规则&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/sh&#xA;/sbin/iptables-restore &amp;lt; /etc/iptables.up.rules&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;然后，再 &lt;code&gt;chmod +x /etc/network/if-pre-up.d/iptables&lt;/code&gt; 加上可执行权限就好了。&lt;/p&gt; &#xA;&lt;h2&gt;8. 数据中心透明网关&lt;/h2&gt; &#xA;&lt;p&gt;这里仅针对 AWS 进行说明，其它云平台应该大同小异，大家可以补充。&lt;/p&gt; &#xA;&lt;h3&gt;8.1 AWS 网络构建&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;构建一个 &lt;code&gt;172.20.0.0/16&lt;/code&gt; 的 VPC，分成两个子网：&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;有公网IP的公有子网 - &lt;code&gt;172.20.1.0/24&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;无公网IP的私有子网 - &lt;code&gt;172.20.2.0/24&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;在公有子网里创建 &lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/vpc/latest/userguide/VPC_NAT_Instance.html&#34;&gt;EC2 NAT Instance&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;创建时，指定私网IP为 &lt;code&gt;172.20.1.1&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;（Option）为该实例分配弹性IP，可成为外网访问内网的跳板机&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;建立路由规则&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;创建“互联网网关”，并把“互联网网关”添加到公有子网 &lt;code&gt;172.20.1.0/24&lt;/code&gt; 的路由表中&lt;/li&gt; &#xA;   &lt;li&gt;把 EC2 NAT Instance &lt;code&gt;172.20.1.1&lt;/code&gt; 添加到私有子网&lt;code&gt;172.20.2.0/24&lt;/code&gt;的路由表中。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;于是整个网络就如下所示。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;                                    ┌──────────┐&#xA;                                    │          │&#xA;                                    │          │&#xA;                                    └──────────┘&#xA;          弹性IP                      互联网网关&#xA;        ┌───────────────┐                ▲&#xA;        │xxx.xxx.xxx.xxx├─┐              │&#xA;        └───────────────┘ │  ┌───────────┘&#xA;                          │  │&#xA;                  ┌───────┼──┼────────┐       ┌───────────────────┐&#xA;                  │       │  │        │       │                   │&#xA;                  │     ┌─┴──▼──┐     │       │  ┌─┐ ┌─┐ ┌─┐ ┌─┐  │&#xA;  Public Network  │     │       │◄────┼───┬───┼─►└─┘ └─┘ └─┘ └─┘  │  Private Network&#xA;                  │     └───────┘     │   │   │                   │&#xA;                  │  EC2 NAT Instance │   │   │  ┌─┐ ┌─┐ ┌─┐ ┌─┐  │&#xA;                  │    172.20.1.1     │   ├───┼─►└─┘ └─┘ └─┘ └─┘  │&#xA;                  │                   │   │   │                   │&#xA;                  │   (NAT Instance)  │   │   │    ┌─┐ ┌─┐ ┌─┐    │&#xA;                  │                   │   └───┼─►  └─┘ └─┘ └─┘    │&#xA;                  │                   │       │                   │&#xA;                  └───────────────────┘       └───────────────────┘&#xA;&#xA;                      172.20.1.0/24              172.20.2.0/24&#xA;                           ▲                            ▲&#xA;                    subnet │                            │ subnet&#xA;                           │                            │&#xA;                           └──────────  VPC  ───────────┘&#xA;                                   172.20.0.0/16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;注：你需要认真的按照 &lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/vpc/latest/userguide/VPC_NAT_Instance.html&#34;&gt;EC2 NAT Instance&lt;/a&gt; 的文档进行设置这个NAT实例。尤其需要设置下面几项：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo sysctl -w net.ipv4.ip_forward=1&#xA;sudo iptables -A FORWARD -i eth0 -j ACCEPT&#xA;sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;顺便科普一下：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;net.ipv4.ip_forward&lt;/code&gt; 是内核参数，主要是用来把Linux当成路由器来用的参数。一般来说，一个路由器至少要有两个网络接口，一个是WAN，的一个是LAN的，为了让LAN和WAN的流量相通，需要进行内核上路由。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;iptables -A FORWARD -i eth0 -j ACCEPT&lt;/code&gt; 通行所有需要转发的包，只有机器成为一个路由器时，需要在两个网卡间进行网络包转发时，才需要配置这条规则。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE&lt;/code&gt; 关键字 &lt;code&gt;MASQUERADE&lt;/code&gt; 意思是“伪装“，NAT的工作原理是就像是一个宿舍收发室对学生宿舍一样，学生宿舍的地址外部不可见，邮递员只看得见整栋宿舍收发室的地址，邮递员把快递交给收发室，收发室再把快递转给学习宿舍（反之，如果学生要对外寄邮件，也是先到收发室，收发室传给邮局）。现在的问题是，所有的学生宿舍如何才能参与到任何快递的通信中，如果把学生宿舍地址发到外部，则没人能把信送回来。如果这个收发室是个自动化的机器人，他要干的事就是，把学生宿舍的地址换成收发室地址。这就是 &lt;code&gt;MASQUERADE&lt;/code&gt; 的意思——&lt;strong&gt;来自具有接收方 IP 地址的本地网络到达 Internet 某处的数据包必须进行修改，也就是让发送方的地址等于路由器的地&lt;/strong&gt;址。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;8.2 安装 Clash&lt;/h3&gt; &#xA;&lt;p&gt;在 EC2 NAT Instance 上安装 clash 透明网关，安装配置参看 &lt;a href=&#34;https://raw.githubusercontent.com/haoel/haoel.github.io/master/#73-%E5%AE%89%E8%A3%85-clash&#34;&gt;7.3 安装 Clash&lt;/a&gt; ，基本一致。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;注：在实际操作中，没有设置 &lt;code&gt;iptables&lt;/code&gt; 转发规则&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;8.3 配置私有子网中的 EC2&lt;/h3&gt; &#xA;&lt;p&gt;只需要配置 &lt;code&gt;/etc/resolv.conf&lt;/code&gt; 文件，把 EC2 NAT Instance 加入其中。如：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;# /etc/resolv.conf&#xA;nameserver 172.20.1.1  #&amp;lt;--- 透明网关 EC2 NAT 实例&#xA;nameserver 172.20.0.2  #&amp;lt;--- AWS 的 DNS 服务&#xA;search [zone].compute.internal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;8.4 私有子网中的 Kubernetes&lt;/h3&gt; &#xA;&lt;p&gt;K8s 里有两组 CoreDNS 部署和配置，一组是边缘的（或是叫本地的），一组是中心的。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;边缘的 Pod 名叫 &lt;code&gt;nodelocaldns&lt;/code&gt;，侦听在本机。如：&lt;code&gt;169.254.25.10:53&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;中心的 Pod 名叫 &lt;code&gt;coredns&lt;/code&gt;，侦听在 cluster IP 上，如：&lt;code&gt;10.233.0.3:53&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;边缘的规则会把k8s的域名 &lt;code&gt;cluster.local&lt;/code&gt;, &lt;code&gt;in-addr.arp&lt;/code&gt; &lt;code&gt;ip6.arpa&lt;/code&gt; 转给中心的 CoreDNS 处理，其它的交给本地的 &lt;code&gt;/etc/resolv.conf&lt;/code&gt; 处理。&lt;/p&gt; &#xA;&lt;p&gt;Kubernetes 会把如下内容打到 Pod 里的 &lt;code&gt;/etc/resolv.conf&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;nameserver 169.254.25.10&#xA;search default.svc.cluster.local svc.cluster.local cluster.local cn-northwest-1.compute.internal&#xA;options ndots:5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;查看一下 &lt;code&gt;nodelocaldns&lt;/code&gt; 的配置：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ kubectl get cm nodelocaldns -n kube-system -o yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;我们可以看到，除了 K8s 自己的域名外，其它的都交给了本机的 &lt;code&gt;/etc/resolv.conf&lt;/code&gt;，如下所示：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;.:53 {&#xA;    errors&#xA;    cache 30&#xA;    reload&#xA;    loop&#xA;    bind 169.254.25.10&#xA;    forward . /etc/resolv.conf  # &amp;lt;--- 注意这条语句&#xA;    prometheus :9253&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;然而，本机的 &lt;code&gt;/etc/resolv.conf&lt;/code&gt; 里有两个 DNS，一个是我们的透明网关，一个是AWS的。而 CoreDNS 的 &lt;code&gt;forward&lt;/code&gt; 策略是随机挑选，所以，这样的会导致，时而交给AWS处理，时而交给我们自己的clash处理。最终导致IP解析紊乱。&lt;/p&gt; &#xA;&lt;p&gt;通过以下命令进行修改：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ kubectl edit cm nodelocaldns -n kube-system&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;修改如下：（AWS的归 172.20.0.2， 其它的走我们自己的网关）&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;+    compute.internal:53 {&#xA;+        errors&#xA;+        cache 30&#xA;+        reload&#xA;+        loop&#xA;+        bind 169.254.25.10&#xA;+        forward . 172.20.0.2&#xA;+        prometheus :9253&#xA;+    }&#xA;     .:53 {&#xA;         errors&#xA;         cache 30&#xA;         reload&#xA;         loop&#xA;         bind 169.254.25.10&#xA;-        forward . /etc/resolv.conf&#xA;+        forward . /etc/resolv.conf {&#xA;+            policy sequential&#xA;+        }&#xA;         prometheus: 9253&#xA;     }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;退出保存后，等大约30秒左右配置就会生效。&lt;/p&gt; &#xA;&lt;h2&gt;9. 其它&lt;/h2&gt; &#xA;&lt;h3&gt;9.1 其它方式&lt;/h3&gt; &#xA;&lt;p&gt;如下还有一些其它的方式（注：均由网友提供，我没有验证过）&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://getoutline.org/en/home&#34;&gt;Outline&lt;/a&gt; 是由 Google 旗下 &lt;a href=&#34;https://jigsaw.google.com/&#34;&gt;Jigsaw&lt;/a&gt; 团队开发的整套翻墙解决方案。Server 端使用 Shadowsocks，MacOS, Windows, iOS, Android 均有官方客户端。使用 Outline Manager 可以一键配置 DigitalOcean。其他平台例如 AWS, Google Cloud 也提供相应脚本。主要优点就是使用简单并且整个软件栈全部&lt;a href=&#34;https://github.com/Jigsaw-Code/?q=outline&#34;&gt;开源&lt;/a&gt;，有专业团队长期维护。&lt;/p&gt; &#xA;&lt;h3&gt;8.2 搭建脚本&lt;/h3&gt; &#xA;&lt;p&gt;上述的搭建和安装脚本可参看本库的 scripts 目录下的脚本（感谢网友 &lt;a href=&#34;https://github.com/gongzili456&#34;&gt;@gongzili456&lt;/a&gt; 开发）&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/haoel/haoel.github.io/raw/master/scripts/install.ubuntu.18.04.sh&#34;&gt;Ubuntu 18.04 Installation Script&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;10. 代理技巧&lt;/h2&gt; &#xA;&lt;p&gt;看到这里，相信已经能够按照上面的教程搭建好自己的上网环境，但是灵活的应用网络，你还需要了解一技巧，比如 SOCKS 协议, http 隧道 和 ssh 网络隧道等。&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zh.m.wikipedia.org/zh-hans/SOCKS&#34;&gt;SOCKS 协议&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zh.m.wikipedia.org/zh-hans/HTTP%E9%9A%A7%E9%81%93&#34;&gt;HTTP 隧道&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;10.1 HTTP 隧道&lt;/h3&gt; &#xA;&lt;p&gt;常见的软件 curl , git, wget 都能通过设置 &lt;code&gt;HTTP_PROXY&lt;/code&gt;,&lt;code&gt;HTTPS_PROXY&lt;/code&gt;，&lt;code&gt;NO_PROXY&lt;/code&gt; 来配置一个网络代理，&lt;code&gt;NO_PROXY&lt;/code&gt;用来配置不需要代理的主机(多个用逗号隔开), 那么我们就可以编写一个 &lt;code&gt;bash &lt;/code&gt; 函数来运行需要走代理的命令:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;with_proxy(){&#xA;   HTTPS_PROXY=http://127.0.0.1:7890 HTTP_PROXY=http://127.0.0.1:7890 &#34;$@&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;把上面的 &lt;code&gt;127.0.0.1:7890&lt;/code&gt; 改成你自己的网络代理, 将上面脚本写入到 &lt;code&gt;~/.bashrc&lt;/code&gt; 中， &lt;code&gt;source ~/.bashrc&lt;/code&gt; 后就能使用 &lt;code&gt;with_proxy&lt;/code&gt; 这个函数了，比如我想要使用代理网络下载一个文件 &lt;code&gt;with_proxy wget https://....&lt;/code&gt;, 想要使用代理网络从 &lt;code&gt;github&lt;/code&gt; clone 一个项目 &lt;code&gt;with_proxy git clone https://...&lt;/code&gt;, 当我们不用 &lt;code&gt;with_proxy&lt;/code&gt; 这个函数的时候命令是不会走代理的，如果在 &lt;code&gt;windows&lt;/code&gt; 上你也想要使用这样的功能，可以使用这个项目&lt;a href=&#34;https://github.com/hellojukay/with-env&#34;&gt;with-env&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;另外，你也可以使用如下的两个 alias:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;SOCKS=&#34;socks5://127.0.0.1:1085&#34;&#xA;alias proxy=&#34;export http_proxy=${SOCKS} https_proxy=${SOCKS} all_proxy=${SOCKS}&#34;&#xA;alias unproxy=&#39;unset all_proxy http_proxy https_proxy&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;这样，你就可以在需要代理的时候输入 &lt;code&gt;proxy&lt;/code&gt;，不需要的时候输入 &lt;code&gt;unproxy&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;h3&gt;10.2 SSH 隧道&lt;/h3&gt; &#xA;&lt;p&gt;另外，我们可以使用 SSH Tunnel 来建立 SOCKS5 的代理（假设本地电脑无法访问，但是某台可以 SSH 的服务器能够访问外网，那么我们就可以使用如下的命令来建议翻墙代理：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ssh -D 1080 -qCN username@server:port&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;解释：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-D&lt;/code&gt;：本机SOCKS 服务端口&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-q&lt;/code&gt; : quiet 模式，没有输出&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-C&lt;/code&gt; : 数据压缩，可以节约一些带宽&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-N&lt;/code&gt; : 不运行远程命令，只做端口转发&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;登录成功以后,本地 &lt;code&gt;1080&lt;/code&gt;端口会开启一个 &lt;code&gt;SOCKS5&lt;/code&gt; 协议的代理，只要配置好代理就能使用这个端口上网。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;with_proxy(){&#xA;   HTTPS_PROXY=socks5://127.0.0.1:1080 HTTP_PROXY=socks5://127.0.0.1:1080 &#34;$@&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果是浏览器，配置好&lt;code&gt;SwitchyOmega&lt;/code&gt;插件也能实现上外网。&lt;/p&gt; &#xA;&lt;p&gt;欢迎补充和改善！&lt;/p&gt; &#xA;&lt;p&gt;（全文完）&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apinske/virt</title>
    <updated>2022-08-24T01:48:08Z</updated>
    <id>tag:github.com,2022-08-24:/apinske/virt</id>
    <link href="https://github.com/apinske/virt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;small Linux VM, ready to run containers, for macOS on ARM&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;virt&lt;/h1&gt; &#xA;&lt;p&gt;small Linux VM, ready to run containers, for macOS on ARM&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;on macOS &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;curl -Lo- https://github.com/apinske/virt/releases/download/v0.7/virt.tar.gz | tar xzf -&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;./virt&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;in VM &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;apk upgrade&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;./setup-vdb.sh&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;./setup-podman.sh&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;to test: &lt;code&gt;podman run --rm -it alpine&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;./setup-k3d.sh&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;to test: &lt;code&gt;kubectl create deployment nginx --image nginx&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;$HOME is mounted at /mnt/virt/home&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;ssh &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;apk add dropbear &amp;amp;&amp;amp; reboot&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ssh root@$(ndp -an | grep $(cat .virt.mac) | awk &#39;{print $1}&#39;)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Components&lt;/h2&gt; &#xA;&lt;h3&gt;Kernel&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;based on 5.15 longterm&lt;/li&gt; &#xA; &lt;li&gt;small set of features&lt;/li&gt; &#xA; &lt;li&gt;only virtio drivers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Userland&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;based on Alpine 3.16&lt;/li&gt; &#xA; &lt;li&gt;stripped down&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Hypervisor&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;based on Apple Virtualization.framework&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>nacos-group/nacos-docker</title>
    <updated>2022-08-24T01:48:08Z</updated>
    <id>tag:github.com,2022-08-24:/nacos-group/nacos-docker</id>
    <link href="https://github.com/nacos-group/nacos-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This project contains a Docker image meant to facilitate the deployment of Nacos .&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nacos Docker&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/nacos/nacos-server.svg?maxAge=60480&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project contains a Docker image meant to facilitate the deployment of &lt;a href=&#34;https://github.com/alibaba/nacos&#34;&gt;Nacos&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nacos-group/nacos-docker/master/README_ZH.md&#34;&gt;&lt;strong&gt;中文&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Project directory&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;build：Nacos makes the source code of the docker image&lt;/li&gt; &#xA; &lt;li&gt;env: Environment variable file for compose yaml&lt;/li&gt; &#xA; &lt;li&gt;example: Docker compose example for Nacos server&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Precautions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;strong&gt;database master-slave image&lt;/strong&gt; has been removed, after the latest &lt;code&gt;nacos/nacos-server:latest&lt;/code&gt; image. For specific reasons, refer to &lt;a href=&#34;https://github.com/nacos-group/nacos-docker/wiki/%E7%A7%BB%E9%99%A4%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%BB%E4%BB%8E%E9%95%9C%E5%83%8F%E9%85%8D%E7%BD%AE&#34;&gt;Removing the Master-Slave Image Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Since Nacos 1.3.1 version, the database storage has been upgraded to 8.0, and it is backward compatible&lt;/li&gt; &#xA; &lt;li&gt;If you use a custom database, you need to initialize the &lt;a href=&#34;https://github.com/alibaba/nacos/raw/develop/distribution/conf/nacos-mysql.sql&#34;&gt;database script&lt;/a&gt; yourself for the first time.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run --name nacos-quick -e MODE=standalone -p 8848:8848 -p 9848:9848 -d nacos/nacos-server:2.0.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tips: You can change the version of the Nacos image in the compose file from the following configuration. &lt;code&gt;example/.env&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dotenv&#34;&gt;NACOS_VERSION=v2.1.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the following command：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone project&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;git clone --depth 1 https://github.com/nacos-group/nacos-docker.git&#xA;cd nacos-docker&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Standalone Derby&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;docker-compose -f example/standalone-derby.yaml up&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Standalone Mysql&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# Using mysql 5.7&#xA;docker-compose -f example/standalone-mysql-5.7.yaml up&#xA;&#xA;# Using mysql 8&#xA;docker-compose -f example/standalone-mysql-8.yaml up&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Cluster&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;docker-compose -f example/cluster-hostname.yaml up &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Service registration&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;curl -X POST &#39;http://127.0.0.1:8848/nacos/v1/ns/instance?serviceName=nacos.naming.serviceName&amp;amp;ip=20.18.7.10&amp;amp;port=8080&#39;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Service discovery&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;curl -X GET &#39;http://127.0.0.1:8848/nacos/v1/ns/instance/list?serviceName=nacos.naming.serviceName&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Publish config&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;curl -X POST &#34;http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=nacos.cfg.dataId&amp;amp;group=test&amp;amp;content=helloWorld&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Get config&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;  curl -X GET &#34;http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=nacos.cfg.dataId&amp;amp;group=test&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the Nacos console in your browser&lt;/p&gt; &lt;p&gt;link：&lt;a href=&#34;http://127.0.0.1:8848/nacos/&#34;&gt;http://127.0.0.1:8848/nacos/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Common property configuration&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;name&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;th&gt;option&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MODE&lt;/td&gt; &#xA;   &lt;td&gt;cluster/standalone&lt;/td&gt; &#xA;   &lt;td&gt;cluster/standalone default &lt;strong&gt;cluster&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NACOS_SERVERS&lt;/td&gt; &#xA;   &lt;td&gt;nacos cluster address&lt;/td&gt; &#xA;   &lt;td&gt;eg. ip1:port1 ip2:port2 ip3:port3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PREFER_HOST_MODE&lt;/td&gt; &#xA;   &lt;td&gt;Whether hostname are supported&lt;/td&gt; &#xA;   &lt;td&gt;hostname/ip default &lt;strong&gt;ip&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NACOS_APPLICATION_PORT&lt;/td&gt; &#xA;   &lt;td&gt;nacos server port&lt;/td&gt; &#xA;   &lt;td&gt;default &lt;strong&gt;8848&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NACOS_SERVER_IP&lt;/td&gt; &#xA;   &lt;td&gt;custom nacos server ip when network was mutil-network&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SPRING_DATASOURCE_PLATFORM&lt;/td&gt; &#xA;   &lt;td&gt;standalone support mysql&lt;/td&gt; &#xA;   &lt;td&gt;mysql / empty default empty&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MYSQL_SERVICE_HOST&lt;/td&gt; &#xA;   &lt;td&gt;mysql host&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MYSQL_SERVICE_PORT&lt;/td&gt; &#xA;   &lt;td&gt;mysql database port&lt;/td&gt; &#xA;   &lt;td&gt;default : &lt;strong&gt;3306&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MYSQL_SERVICE_DB_NAME&lt;/td&gt; &#xA;   &lt;td&gt;mysql database name&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MYSQL_SERVICE_USER&lt;/td&gt; &#xA;   &lt;td&gt;username of database&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MYSQL_SERVICE_PASSWORD&lt;/td&gt; &#xA;   &lt;td&gt;password of database&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MYSQL_DATABASE_NUM&lt;/td&gt; &#xA;   &lt;td&gt;It indicates the number of database&lt;/td&gt; &#xA;   &lt;td&gt;default :&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MYSQL_SERVICE_DB_PARAM&lt;/td&gt; &#xA;   &lt;td&gt;Database url parameter&lt;/td&gt; &#xA;   &lt;td&gt;default:**&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;characterEncoding=utf8&amp;amp;connectTimeout=1000&amp;amp;socketTimeout=3000&amp;amp;autoReconnect=true&amp;amp;useSSL=false**&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JVM_XMS&lt;/td&gt; &#xA;   &lt;td&gt;-Xms&lt;/td&gt; &#xA;   &lt;td&gt;default :1g&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JVM_XMX&lt;/td&gt; &#xA;   &lt;td&gt;-Xmx&lt;/td&gt; &#xA;   &lt;td&gt;default :1g&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JVM_XMN&lt;/td&gt; &#xA;   &lt;td&gt;-Xmn&lt;/td&gt; &#xA;   &lt;td&gt;default :512m&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JVM_MS&lt;/td&gt; &#xA;   &lt;td&gt;-XX:MetaspaceSize&lt;/td&gt; &#xA;   &lt;td&gt;default :128m&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JVM_MMS&lt;/td&gt; &#xA;   &lt;td&gt;-XX:MaxMetaspaceSize&lt;/td&gt; &#xA;   &lt;td&gt;default :320m&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NACOS_DEBUG&lt;/td&gt; &#xA;   &lt;td&gt;enable remote debug&lt;/td&gt; &#xA;   &lt;td&gt;y/n default :n&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TOMCAT_ACCESSLOG_ENABLED&lt;/td&gt; &#xA;   &lt;td&gt;server.tomcat.accesslog.enabled&lt;/td&gt; &#xA;   &lt;td&gt;default :false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NACOS_AUTH_SYSTEM_TYPE&lt;/td&gt; &#xA;   &lt;td&gt;The auth system to use, currently only &#39;nacos&#39; is supported&lt;/td&gt; &#xA;   &lt;td&gt;default :nacos&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NACOS_AUTH_ENABLE&lt;/td&gt; &#xA;   &lt;td&gt;If turn on auth system&lt;/td&gt; &#xA;   &lt;td&gt;default :false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NACOS_AUTH_TOKEN_EXPIRE_SECONDS&lt;/td&gt; &#xA;   &lt;td&gt;The token expiration in seconds&lt;/td&gt; &#xA;   &lt;td&gt;default :18000&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NACOS_AUTH_TOKEN&lt;/td&gt; &#xA;   &lt;td&gt;The default token&lt;/td&gt; &#xA;   &lt;td&gt;default :SecretKey012345678901234567890123456789012345678901234567890123456789&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NACOS_AUTH_CACHE_ENABLE&lt;/td&gt; &#xA;   &lt;td&gt;Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.&lt;/td&gt; &#xA;   &lt;td&gt;default : false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MEMBER_LIST&lt;/td&gt; &#xA;   &lt;td&gt;Set the cluster list with a configuration file or command-line argument&lt;/td&gt; &#xA;   &lt;td&gt;eg:192.168.16.101:8847?raft_port=8807,192.168.16.101?raft_port=8808,192.168.16.101:8849?raft_port=8809&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;EMBEDDED_STORAGE&lt;/td&gt; &#xA;   &lt;td&gt;Use embedded storage in cluster mode without mysql&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;embedded&lt;/code&gt; default : none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NACOS_AUTH_CACHE_ENABLE&lt;/td&gt; &#xA;   &lt;td&gt;nacos.core.auth.caching.enabled&lt;/td&gt; &#xA;   &lt;td&gt;default : false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NACOS_AUTH_USER_AGENT_AUTH_WHITE_ENABLE&lt;/td&gt; &#xA;   &lt;td&gt;nacos.core.auth.enable.userAgentAuthWhite&lt;/td&gt; &#xA;   &lt;td&gt;default : false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NACOS_AUTH_IDENTITY_KEY&lt;/td&gt; &#xA;   &lt;td&gt;nacos.core.auth.server.identity.key&lt;/td&gt; &#xA;   &lt;td&gt;default : serverIdentity&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NACOS_AUTH_IDENTITY_VALUE&lt;/td&gt; &#xA;   &lt;td&gt;nacos.core.auth.server.identity.value&lt;/td&gt; &#xA;   &lt;td&gt;default : security&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NACOS_SECURITY_IGNORE_URLS&lt;/td&gt; &#xA;   &lt;td&gt;nacos.security.ignore.urls&lt;/td&gt; &#xA;   &lt;td&gt;default : &lt;code&gt;/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Advanced configuration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;del&gt;If the above property configuration list does not meet your requirements, you can mount the &lt;code&gt;custom.properties&lt;/code&gt; file into the &lt;code&gt;/home/nacos/init.d/&lt;/code&gt; directory of the container, where the spring properties can be configured, and the priority is higher than &lt;code&gt;application.properties&lt;/code&gt; file&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have a lot of custom configuration needs, It is highly recommended to mount &lt;code&gt;application.properties&lt;/code&gt; in production environment.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-docker&#34;&gt;docker run --name nacos-standalone -e MODE=standalone -v /path/application.properties:/home/nacos/conf/application.properties -p 8848:8848 -d -p 9848:9848  nacos/nacos-server:2.1.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Nacos + Grafana + Prometheus&lt;/h2&gt; &#xA;&lt;p&gt;Usage reference：&lt;a href=&#34;https://nacos.io/zh-cn/docs/monitor-guide.html&#34;&gt;Nacos monitor-guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: When Grafana creates a new data source, the data source address must be &lt;strong&gt;&lt;a href=&#34;http://prometheus:9090&#34;&gt;http://prometheus:9090&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
</feed>