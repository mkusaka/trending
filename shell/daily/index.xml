<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-16T01:34:02Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>swe-bench/experiments</title>
    <updated>2024-08-16T01:34:02Z</updated>
    <id>tag:github.com,2024-08-16:/swe-bench/experiments</id>
    <link href="https://github.com/swe-bench/experiments" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open sourced predictions, execution logs, trajectories, and results from model inference + evaluation runs on the SWE-bench task.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SWE-bench Experiments&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the predictions, execution logs, trajectories, and results for model inference + evaluation runs on the &lt;a href=&#34;https://swe-bench.github.io/&#34;&gt;SWE-bench&lt;/a&gt; task.&lt;/p&gt; &#xA;&lt;p&gt;The repository is organized as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;experiment_data/&#xA;├── evaluation/&#xA;│ ├── lite/&#xA;│ └── test/&#xA;|   ├── &amp;lt;date&amp;gt;_&amp;lt;model&amp;gt;&#xA;│   │ ├── all_preds.jsonl&#xA;│   │ ├── metadata.yaml&#xA;│   │ ├── README.md&#xA;│   │ ├── logs/*.log (Execution Logs)&#xA;│   │ └── trajs/*.traj (Reasoning Traces)&#xA;│   └── ...&#xA;└── validation/&#xA;  ├── dev&#xA;  └── test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;More about how the repository is organized&lt;/summary&gt; &#xA; &lt;p&gt;The &lt;code&gt;evaluation/&lt;/code&gt; folder is organized such that the top level directories are different splits of SWE-bench (lite, test). Data for models that were run on that corresponding split are included as subfolders. Each subfolder contains the predictions, results, execution logs, and trajectories (if applicable) for the model run on that split.&lt;/p&gt; &#xA; &lt;p&gt;The &lt;code&gt;validation/&lt;/code&gt; folder contains the validation logs for the dev and test splits of SWE-bench. Each of these top level folders consist of repo-level subfolders (e.g. &lt;code&gt;pallets/flask&lt;/code&gt; is a test split repository, so there is a &lt;code&gt;flask/&lt;/code&gt; folder under &lt;code&gt;validation/test/&lt;/code&gt;). The &lt;code&gt;validation/test_202404&lt;/code&gt; is a re-run of validation performed April 2024 to ensure reproducibility of task instances&#39; behavior since SWE-bench was created in September 2023 (You can read more about the re-run &lt;a href=&#34;https://github.com/princeton-nlp/SWE-bench/tree/main/docs/20240415_eval_bug&#34;&gt;here&lt;/a&gt;).&lt;/p&gt; &#xA; &lt;p&gt;These logs are publicly accessible and meant to enable greater reproducibility and transparency of the experiments conducted on the SWE-bench task.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Leaderboard Participation&lt;/h2&gt; &#xA;&lt;p&gt;If you are interested in submitting your model to the &lt;a href=&#34;https://www.swebench.com/&#34;&gt;SWE-bench Leaderboard&lt;/a&gt;, please do the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork this repository.&lt;/li&gt; &#xA; &lt;li&gt;Clone the repository. Due to this repository&#39;s large diff history, consider using &lt;code&gt;git clone --depth 1&lt;/code&gt; if cloning takes too long.&lt;/li&gt; &#xA; &lt;li&gt;Under the split that you evaluate on (&lt;code&gt;evaluation/lite/&lt;/code&gt; or &lt;code&gt;evaluation/test&lt;/code&gt;), create a new folder with the submission date and the model name (e.g. &lt;code&gt;20240415_sweagent_gpt4&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Within the folder (&lt;code&gt;evaluation/&amp;lt;split&amp;gt;/&amp;lt;date + model&amp;gt;&lt;/code&gt;), please include the following &lt;strong&gt;required&lt;/strong&gt; assets:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;all_preds.jsonl&lt;/code&gt;: Model predictions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;logs/&lt;/code&gt;: SWE-bench evaluation artifacts dump &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Eval. artifacts means 300/2294 (Lite/Test) folders. Each folder (e.g. &lt;code&gt;astropy__astropy-1234&lt;/code&gt;) contains: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;eval.sh&lt;/code&gt;: The evaluation script&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;patch.diff&lt;/code&gt;: The model&#39;s generated prediction&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;report.json&lt;/code&gt;: Summary of evaluation outcomes for this instance&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;run_instance.log&lt;/code&gt;: A log of SWE-bench evaluation steps&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;test_output.txt&lt;/code&gt;: An output of running &lt;code&gt;eval.sh&lt;/code&gt; on &lt;code&gt;patch.diff&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: You shouldn&#39;t have to create any of these files. They should automatically be generated by SWE-bench evaluation.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;metadata.yaml&lt;/code&gt;: Metadata for how result is shown on website. Please include the following fields: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;name&lt;/code&gt;: The name of your leaderboard entry&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;oss&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt; if your system is open-source&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;site&lt;/code&gt;: URL/link to more information about your system&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;verified&lt;/code&gt;: &lt;code&gt;false&lt;/code&gt; (See below for results verification)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;trajs/&lt;/code&gt;: Reasoning trace reflecting how your system solved the problem &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Submit one reasoning trace per task instance. The reasoning trace should show all of the steps your system took while solving the task. If your system outputs thoughts or comments during operation, they should be included as well.&lt;/li&gt; &#xA;   &lt;li&gt;The reasoning trace can be represented with any text based file format (e.g. &lt;code&gt;md&lt;/code&gt;, &lt;code&gt;json&lt;/code&gt;, &lt;code&gt;yaml&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Ensure the task instance ID is in the name of the corresponding reasoning trace file.&lt;/li&gt; &#xA;   &lt;li&gt;For an example, see &lt;a href=&#34;https://github.com/swe-bench/experiments/tree/main/evaluation/lite/20240402_sweagent_gpt4/logs&#34;&gt;SWE-agent + GPT 4 Turbo Trajectories&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;README.md&lt;/code&gt;: Include anything you&#39;d like to share about your model here! Please include the email address for a point of contact for your submission.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Run &lt;code&gt;python -m analysis.get_results evaluation/&amp;lt;split&amp;gt;/&amp;lt;date + model&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create a pull request to this repository with the new folder.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can refer to this &lt;a href=&#34;https://github.com/princeton-nlp/SWE-bench/raw/main/assets/evaluation.md&#34;&gt;tutorial&lt;/a&gt; for a quick overview of how to evaluate your model on SWE-bench.&lt;/p&gt; &#xA;&lt;h2&gt;Result Verification&lt;/h2&gt; &#xA;&lt;p&gt;If you are interested in receiving the &#34;verified&#34; checkmark ✅ on your submission, please do the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create an issue&lt;/li&gt; &#xA; &lt;li&gt;In the issue, provide us instructions on how to run your model on SWE-bench.&lt;/li&gt; &#xA; &lt;li&gt;We will run your model on a random subset of SWE-bench and verify the results.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Reasoning Traces&lt;/h2&gt; &#xA;&lt;p&gt;(7/29/2024) We have updated the SWE-bench leaderboard submission criteria to require the inclusion of &lt;em&gt;reasoning traces&lt;/em&gt;. The goal of this requirement is to provide the community with more insight into how cutting edge methods work without requiring a code release. (although the latter is still highly encouraged!)&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;What is a reasoning trace?&lt;/summary&gt; &#xA; &lt;p&gt;A reasoning trace is a text-based file that describes the steps your system took to solve a task instance. It should provide a detailed account of the reasoning process that your system used to arrive at its solution.&lt;/p&gt; &#xA; &lt;p&gt;We purposely do not explicitly define reasoning traces in a strict, explicit format.&lt;/p&gt; &#xA; &lt;p&gt;We do have some guidelines. the reasoning trace should be...&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Human-readable.&lt;/li&gt; &#xA;  &lt;li&gt;Reflects the intermediate steps your system took that led to the final solution.&lt;/li&gt; &#xA;  &lt;li&gt;Generated &lt;em&gt;with&lt;/em&gt; the inference process, not post-hoc.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;We do not require reasoning traces to be...&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;In a specific file format (e.g. &lt;code&gt;json&lt;/code&gt;, &lt;code&gt;yaml&lt;/code&gt;, &lt;code&gt;md&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;Conform to a specific problem solving style (e.g. agentic, procedural, etc.)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;A simple solution to this? When running inference, simply log the intermediate output generated by your system. For an example, see &lt;a href=&#34;https://github.com/swe-bench/experiments/tree/main/evaluation/lite/20240402_sweagent_gpt4/logs&#34;&gt;SWE-agent + GPT 4 Turbo Trajectories&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;In short, our requirements for what a reasoning trace should specific look like are non-specific. We trust you to provide a detailed account of how your system solved the task instance.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Why are we requiring it?&lt;/summary&gt; &#xA; &lt;p&gt;We believe that reasoning traces can provide valuable insights into how cutting edge methods work without requiring a code release.&lt;/p&gt; &#xA; &lt;p&gt;As of this post (7/29/2024), we have received many submissions that have pushed the state of the art on SWE-bench, which is exciting to see!&lt;/p&gt; &#xA; &lt;p&gt;However, we have also found that the top-performing submissions to SWE-bench typically have not open sourced their code nor been verified. We recognize that some leaderboard participants (1) would like to add an entry to SWE-bench but (2) do not want to release their code or proprietary system, which is completely understandable. On the other hand, given that open source systems submitted to SWE-bench have propelled the development of closed-source participants, we would like to continuing promoting development on SWE-bench as a community-level collaborative process.&lt;/p&gt; &#xA; &lt;p&gt;Therefore, we believe that providing reasoning traces serves as a valuable compromise between these two groups.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;What should I submit?&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Create a &lt;code&gt;trajs/&lt;/code&gt; folder in your submission directory.&lt;/li&gt; &#xA;  &lt;li&gt;Within this folder, upload a reasoning trace per task instance that your system generated a prediction for.&lt;/li&gt; &#xA;  &lt;li&gt;Make sure the naming convention of the reasoning trace file reflects the SWE-bench task instance it corresponds to. (e.g. &lt;code&gt;astropy__astropy-1234.md&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;We will review the reasoning traces you submit. We plan to only accept submissions with reasoning traces for the SWE-bench leaderboard.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Contact&lt;/h3&gt; &#xA;&lt;p&gt;Questions? Please create an issue. Otherwise, you can also contact {carlosej, jy1682}@princeton.edu.&lt;/p&gt;</summary>
  </entry>
</feed>