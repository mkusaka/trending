<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-30T01:41:22Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>anasfik/flutter-spy</title>
    <updated>2023-12-30T01:41:22Z</updated>
    <id>tag:github.com,2023-12-30:/anasfik/flutter-spy</id>
    <link href="https://github.com/anasfik/flutter-spy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Explore, analyze, and gain valuable data &amp; insights from reverse engineered Flutter apps.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flutter Spy&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    ________      __  __               _____            &#xA;   / ____/ __  __/ /_/ /____  _____   / ___/____  __  __&#xA;  / /_  / / / / / __/ __/ _ \/ ___/   \__ \/ __ \/ / / /&#xA; / __/ / / /_/ / /_/ /_/  __/ /      ___/ / /_/ / /_/ / &#xA;/_/   /_/\__,_/\__/\__/\___/_/      /____/ .___/\__, /  &#xA;                                        /_/    /____/&#xA;&#xA;Usage: flutter-spy &amp;lt;file&amp;gt;&#xA;&#xA;Arguments:&#xA;  file          The APK file to spy on&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Flutter Spy is a Bash-based command-line tool designed to provide insightful code analysis and data extraction capabilities from built Flutter apps with reverse engineering. It empowers developers, bug hunters, and security enthusiasts to explore and uncover valuable information within Flutter app binaries.&lt;/p&gt; &#xA;&lt;p&gt;Flutter Spy supports currently gathering info from Android apps only (APK files), thus it is universal for almost all other platforms since this is what Flutter is used for.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Data Extraction: Extracts essential information such as API endpoints, URLs, emails, used packages, phone numbers, secret/public keys, environment variables, and config files.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Extract emails.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Extract URLs/URIs.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Extract potential phone numbers.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Extract potential API endpoints/routes.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Extract used Flutter packages and their links at &lt;a href=&#34;https://pub.dev/&#34;&gt;pub.dev&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Extract SQL and other database queries...&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Extract &lt;code&gt;.env&lt;/code&gt; (Environment Variables) files.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Extract Potential JSON/YAML config files.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Extract content-specific files. (md, html, css, js...)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Extract Potential localization files.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Extract all other Flutter assets (PNG, GIF, SVG, TTF, PSD, WEBP...).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Extract used Flutter Engine information as the used Flutter engine.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Extract the original project file structure.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Exportable Reports: Output a detailed report folder with all results.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Easy to use: Flutter Spy is designed to be easy to use and requires no prior knowledge of Flutter or Dart, you can use it on any built Flutter app.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Planned Features&lt;/h2&gt; &#xA;&lt;p&gt;Let me know if there is a need for this:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Extract common API keys such as Firebase, Stripe, OpenAI, AWS...&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Code Analysis: Performs static analysis on the app&#39;s code to identify potential security issues and vulnerabilities.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Analyse the &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file and gather permissions, intents, activities, services, compileSdkVersion, minSdkVersion, and targetSdkVersion.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Analyse MainActivity.java used platform channels, initializations...&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Automated bug hunting: Identifies common security issues and vulnerabilities such as unsecured API endpoints, exposed sensitive data, and Insecure Firebase Database (this is planned to be done with another language, maybe Python or Dart itself).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;To run Flutter Spy without issues, make sure these utilities are installed globally in your machine.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/skylot/jadx&#34;&gt;Jadx CLI&lt;/a&gt;: Used to decompile the APK file, Flutter Spy will look to get its full path with &lt;code&gt;which jadx&lt;/code&gt; command. (if you are on Debian-based distros such as Ubuntu/Kali Linux, you can install it via sudo apt install jadx)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Note: Before installing Flutter Spy, please know that Flutter Spy is under active development, there are a lot of &lt;a href=&#34;https://raw.githubusercontent.com/anasfik/flutter-spy/main/#features&#34;&gt;features&lt;/a&gt; that are not implemented or incomplete.&lt;/p&gt; &#xA;&lt;p&gt;Run this command in your terminal to install Flutter Spy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/anasfik/flutter-spy.git # Clone the repo&#xA;cd flutter-spy # Change the directory to the repo&#xA;chmod +x INSTALLER.sh # Make the installer executable&#xA;./INSTALLER.sh # Run the installer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will install Flutter Spy in your home directory, at &lt;code&gt;~/.flutter-spy/&lt;/code&gt;, and add the export path command to the correct profile file (&lt;code&gt;.bashrc&lt;/code&gt; for Bash, &lt;code&gt;.zshrc&lt;/code&gt; for ZSH, and &lt;code&gt;.profile&lt;/code&gt; for Fish).&lt;/p&gt; &#xA;&lt;p&gt;Open a new terminal window and run &lt;code&gt;flutterspy&lt;/code&gt; to make sure that the installation was successful.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;flutter-spy /path/to/apk/file.apk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And that&#39;s it, the script will do the rest for showing you all findings by exporting a report folder containing all findings is named based on the exact date of export:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;report-$(date +%Y-%m-%d-%H-%M-%S)&#xA;&#xA;# Example: report-2023-12-18-18-17-43&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;it will contain everything.&lt;/p&gt; &#xA;&lt;h2&gt;Want to help this?&lt;/h2&gt; &#xA;&lt;p&gt;as a Developer, and, because I don&#39;t know everything, you can help this project by informing me about possible findings in a FLutter app other than existing ones, and this is by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;if you&#39;re a Flutter developer, try this tool on your build app, if you notice that important information like API keys, phrases, assets, and native libraries... are not extracted, then please open an issue with details, it is not necessary to include your app, just expected findings.&lt;/li&gt; &#xA; &lt;li&gt;if you&#39;re a Bug hunter or Pen tester, and you know any information or vulnerabilities that are previously reported by you or the community, just open an issue and mention it, and I will handle the rest.&lt;/li&gt; &#xA; &lt;li&gt;Try the tool on any found Flutter-built apps, then mention any issues or unexpected behaviors you face if any.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License - see the &lt;a href=&#34;https://raw.githubusercontent.com/anasfik/flutter-spy/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>vm32/Linux-Incident-Response</title>
    <updated>2023-12-30T01:41:22Z</updated>
    <id>tag:github.com,2023-12-30:/vm32/Linux-Incident-Response</id>
    <link href="https://github.com/vm32/Linux-Incident-Response" rel="alternate"></link>
    <summary type="html">&lt;p&gt;practical toolkit for cybersecurity and IT professionals. It features a detailed Linux cheatsheet for incident response&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Incident Response Linux&lt;/h1&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains a comprehensive cheatsheet for incident response and live forensics in Linux environments. It&#39;s designed to help system administrators, security professionals, and IT staff quickly reference commands and procedures during an incident.&lt;/p&gt; &#xA;&lt;h2&gt;How to Use&lt;/h2&gt; &#xA;&lt;p&gt;Navigate through the sections to find relevant commands for different aspects of incident response. Each command is accompanied by a brief description of its purpose and usage.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vm32/Linux-Incident-Response/main/#user-accounts&#34;&gt;User Accounts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vm32/Linux-Incident-Response/main/#log-entries&#34;&gt;Log Entries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vm32/Linux-Incident-Response/main/#system-resources&#34;&gt;System Resources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vm32/Linux-Incident-Response/main/#processes&#34;&gt;Processes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vm32/Linux-Incident-Response/main/#services&#34;&gt;Services&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vm32/Linux-Incident-Response/main/#files&#34;&gt;Files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vm32/Linux-Incident-Response/main/#network-settings&#34;&gt;Network Settings&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;User Accounts&lt;/h3&gt; &#xA;&lt;p&gt;Commands for investigating user activities, permissions, and unusual activities.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cat /etc/passwd&lt;/code&gt; - List user accounts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;passwd -S [User_Name]&lt;/code&gt; - Check password status for a user.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lastlog&lt;/code&gt; - Show the most recent logins.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;last&lt;/code&gt; - Show last logged in users.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;who&lt;/code&gt; - Show who is logged on.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;w&lt;/code&gt; - Show who is logged on and what they are doing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Log Entries&lt;/h3&gt; &#xA;&lt;p&gt;Commands for reviewing system and application logs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cat /var/log/messages&lt;/code&gt; - Show system messages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cat /var/log/auth.log&lt;/code&gt; - Show user authentication logs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cat /var/log/secure&lt;/code&gt; - Show authentication log for Red Hat based systems.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cat /var/log/boot.log&lt;/code&gt; - Show system boot log.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cat /var/log/dmesg&lt;/code&gt; - Show kernel ring buffer log.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cat /var/log/kern.log&lt;/code&gt; - Show kernel log.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;System Resources&lt;/h3&gt; &#xA;&lt;p&gt;Commands to check system performance and resource usage.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;top&lt;/code&gt; - Display Linux tasks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;htop&lt;/code&gt; - Interactive process viewer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;uptime&lt;/code&gt; - Show system uptime.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ps aux&lt;/code&gt; - Show currently running processes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pstree&lt;/code&gt; - Show running processes as a tree.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;free -m&lt;/code&gt; - Show memory usage in MB.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Processes&lt;/h3&gt; &#xA;&lt;p&gt;Commands for investigating running processes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ps -ef&lt;/code&gt; - Display all the currently running processes on the system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pstree -p&lt;/code&gt; - Display processes in a tree format with PIDs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;top -n 1&lt;/code&gt; - Display top processes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ps -eo pid,tt,user,fname,rsz&lt;/code&gt; - Show processes in custom format.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsof -i&lt;/code&gt; - List open files associated with network connections.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Services&lt;/h3&gt; &#xA;&lt;p&gt;Commands to inspect services running on the system.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;chkconfig --list&lt;/code&gt; - List all services and their current states.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;service --status-all&lt;/code&gt; - Show status of all services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;systemctl list-units --type=service&lt;/code&gt; - List running services (systemd).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Files&lt;/h3&gt; &#xA;&lt;p&gt;Commands for file investigation.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ls -alh&lt;/code&gt; - Show all files in human-readable format.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;find / -name [filename]&lt;/code&gt; - Find a specific file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;find / -mtime -[N]&lt;/code&gt; - Find files modified in the last N days.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;find / -atime -[N]&lt;/code&gt; - Find files accessed in the last N days.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;find / -size +[N]c&lt;/code&gt; - Find files larger than N bytes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Network Settings&lt;/h3&gt; &#xA;&lt;p&gt;Commands for reviewing network configurations and connections.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ifconfig -a&lt;/code&gt; - Show all network interfaces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;netstat -antup&lt;/code&gt; - Show active network connections.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;iptables -L -n -v&lt;/code&gt; - Show all iptables rules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;route -n&lt;/code&gt; - Show routing table.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ss -tuln&lt;/code&gt; - Show listening ports and established connections.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Additional Commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;grep :0: /etc/passwd&lt;/code&gt; - Find root accounts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;find / -nouser -print&lt;/code&gt; - Find files with no user.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cat /etc/shadow&lt;/code&gt; - View encrypted passwords and account expiration information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cat /etc/group&lt;/code&gt; - View group information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cat /etc/sudoers&lt;/code&gt; - View sudoers file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tail /var/log/auth.log&lt;/code&gt; - View the last few entries in the authentication log.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;history | less&lt;/code&gt; - View command history.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cat /proc/meminfo&lt;/code&gt; - Display memory information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cat /proc/mounts&lt;/code&gt; - Display mounted filesystems.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsof -p [pid]&lt;/code&gt; - List open files for a process (use a specific PID).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;service --status-all&lt;/code&gt; - List all services and their status.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cat /etc/crontab&lt;/code&gt; - View the cron table for scheduled tasks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;more /etc/resolv.conf&lt;/code&gt; - View DNS settings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;more /etc/hosts&lt;/code&gt; - View host file entries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;iptables -L -n&lt;/code&gt; - List all iptables rules without resolving IP addresses.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;find /home/ -type f -size +512k -exec ls -lh {} \;&lt;/code&gt; - Find files larger than 512KB in home directories.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;find /etc/ -readable -type f 2&amp;gt;/dev/null&lt;/code&gt; - Find readable files in the etc directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;find / -mtime -2 -ls&lt;/code&gt; - Find files modified in the last 2 days.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;netstat -nap&lt;/code&gt; - Show network connections and associated programs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;arp -a&lt;/code&gt; - View the ARP table.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;echo $PATH&lt;/code&gt; - Display the PATH environment variable.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running the Script&lt;/h2&gt; &#xA;&lt;p&gt;To run the Incident Response Linux script, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the script from the repository.&lt;/li&gt; &#xA; &lt;li&gt;Give the script executable permissions: &lt;pre&gt;&lt;code&gt;chmod +x IRLinux_Script.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Execute the script with appropriate permissions (root permissions may be required for some commands): &lt;pre&gt;&lt;code&gt;sudo ./IRLinux_Script.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Once the script completes its execution, the output will be saved in &lt;code&gt;/tmp/IRLinux.txt&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You can view the output with a text editor or using a command like &lt;code&gt;cat&lt;/code&gt; or &lt;code&gt;less&lt;/code&gt;: &lt;pre&gt;&lt;code&gt;less /tmp/IRLinux.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note: Ensure that the script is run in a safe environment as it accesses system files and configurations. Modify the script as needed for your specific use case.&lt;/p&gt; &#xA;&lt;h3&gt;Output&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/vm32/Linux-Incident-Response/assets/21219411/28efc8f1-925d-4aa9-8916-259613ec0a5b&#34; alt=&#34;Screenshot_49&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#vm32/Linux-Incident-Response&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=vm32/Linux-Incident-Response&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Contributions to this cheatsheet are welcome. Please submit a pull request or open an issue for suggestions.&lt;/p&gt;</summary>
  </entry>
</feed>