<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-02-03T01:37:43Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>grafana/docker-otel-lgtm</title>
    <updated>2025-02-03T01:37:43Z</updated>
    <id>tag:github.com,2025-02-03:/grafana/docker-otel-lgtm</id>
    <link href="https://github.com/grafana/docker-otel-lgtm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenTelemetry backend in a Docker image&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;docker-otel-lgtm&lt;/h1&gt; &#xA;&lt;p&gt;An OpenTelemetry backend in a Docker image.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/grafana/docker-otel-lgtm/main/img/overview.png&#34; alt=&#34;Components included in the Docker image: OpenTelemetry collector, Prometheus, Tempo, Loki, Grafana&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;grafana/otel-lgtm&lt;/code&gt; Docker image is an open source backend for OpenTelemetry thatâ€™s intended for development, demo, and testing environments. If you are looking for a production-ready, out-of-the box solution to monitor applications and minimize MTTR (mean time to resolution) with OpenTelemetry and Prometheus, you should try &lt;a href=&#34;https://grafana.com/products/cloud/application-observability/&#34;&gt;Grafana Cloud Application Observability&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Blog post: &lt;a href=&#34;https://grafana.com/blog/2024/03/13/an-opentelemetry-backend-in-a-docker-image-introducing-grafana/otel-lgtm/&#34;&gt;An OpenTelemetry backend in a Docker image: Introducing grafana/otel-lgtm&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get the Docker image&lt;/h2&gt; &#xA;&lt;p&gt;The Docker image is available on Docker hub: &lt;a href=&#34;https://hub.docker.com/r/grafana/otel-lgtm&#34;&gt;https://hub.docker.com/r/grafana/otel-lgtm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Run the Docker image&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Unix/Linux&#xA;./run-lgtm.sh&#xA;&#xA;# Windows (PowerShell)&#xA;./run-lgtm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;h4&gt;Enable logging&lt;/h4&gt; &#xA;&lt;p&gt;You can enable logging for troubleshooting:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Environment Variable&lt;/th&gt; &#xA;   &lt;th&gt;Enable Logging in&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_LOGS_GRAFANA&lt;/td&gt; &#xA;   &lt;td&gt;Grafana&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_LOGS_LOKI&lt;/td&gt; &#xA;   &lt;td&gt;Loki&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_LOGS_PROMETHEUS&lt;/td&gt; &#xA;   &lt;td&gt;Prometheus&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_LOGS_TEMPO&lt;/td&gt; &#xA;   &lt;td&gt;Tempo&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_LOGS_OTELCOL&lt;/td&gt; &#xA;   &lt;td&gt;OpenTelemetry Collector&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_LOGS_ALL&lt;/td&gt; &#xA;   &lt;td&gt;all of the above&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;This has nothing to do with the application logs, which are collected by OpenTelemetry.&lt;/p&gt; &#xA;&lt;h4&gt;Persist data across container instantiation&lt;/h4&gt; &#xA;&lt;p&gt;The various components in the repository are configured to write their data to the /data directory. If you need to persist data across containers being created and destroyed, you can mount a volume to the /data directory. Note that this image is intended for development, demo, and testing environments and persisting data to an external volume doesn&#39;t change that. However, this feature could be useful in certain cases for some users even in testing situations.&lt;/p&gt; &#xA;&lt;h2&gt;Run lgtm in kubernetes&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# create k8s resources&#xA;kubectl apply -f k8s/lgtm.yaml&#xA;&#xA;# port forwarding&#xA;kubectl port-forward service/lgtm 3000:3000 4317:4317 4318:4318&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Send OpenTelemetry Data&lt;/h2&gt; &#xA;&lt;p&gt;There&#39;s no need to configure anything: The Docker image works with OpenTelemetry&#39;s defaults.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Not needed as these are the defaults in OpenTelemetry:&#xA;export OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf&#xA;export OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;View Grafana&lt;/h2&gt; &#xA;&lt;p&gt;Log in to &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; with user &lt;em&gt;admin&lt;/em&gt; and password &lt;em&gt;admin&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Build the Docker image from scratch&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd docker/&#xA;docker build . -t grafana/otel-lgtm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build and run the example app&lt;/h2&gt; &#xA;&lt;p&gt;Run the example REST service:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Unix/Linux&#xA;./run-example.sh&#xA;&#xA;# Windows (PowerShell)&#xA;./run-example&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generate traffic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Unix/Linux&#xA;./generate-traffic.sh&#xA;&#xA;# Windows (PowerShell)&#xA;./generate-traffic&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run example apps in different languages&lt;/h2&gt; &#xA;&lt;p&gt;The example apps are in the &lt;code&gt;examples/&lt;/code&gt; directory. Each example has a &lt;code&gt;run.sh&lt;/code&gt; or &lt;code&gt;run.cmd&lt;/code&gt; script to start the app.&lt;/p&gt; &#xA;&lt;p&gt;Every example implements a rolldice service, which returns a random number between 1 and 6.&lt;/p&gt; &#xA;&lt;p&gt;Each example uses a different application port (to be able to run all applications at the same time).&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;   &lt;th&gt;Service URL&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Java&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;curl http://localhost:8080/rolldice&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;curl http://localhost:8081/rolldice&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;curl http://localhost:8082/rolldice&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dotnet&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;curl http://localhost:8083/rolldice&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Related Work&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Metrics, Logs, Traces and Profiles in Grafana: &lt;a href=&#34;https://github.com/grafana/intro-to-mltp&#34;&gt;https://github.com/grafana/intro-to-mltp&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>