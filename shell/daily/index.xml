<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-28T02:46:50Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>justmeandopensource/kubernetes</title>
    <updated>2022-07-28T02:46:50Z</updated>
    <id>tag:github.com,2022-07-28:/justmeandopensource/kubernetes</id>
    <link href="https://github.com/justmeandopensource/kubernetes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Kubernetes playground&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;kubernetes&lt;/h1&gt; &#xA;&lt;p&gt;Kubernetes playground&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pyenv/pyenv-installer</title>
    <updated>2022-07-28T02:46:50Z</updated>
    <id>tag:github.com,2022-07-28:/pyenv/pyenv-installer</id>
    <link href="https://github.com/pyenv/pyenv-installer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This tool is used to install `pyenv` and friends.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pyenv installer&lt;/h1&gt; &#xA;&lt;p&gt;This tool installs &lt;code&gt;pyenv &amp;lt;https://github.com/pyenv/pyenv&amp;gt;&lt;/code&gt;__ and friends. It is inspired by &lt;code&gt;rbenv-installer &amp;lt;https://github.com/rbenv/rbenv-installer&amp;gt;&lt;/code&gt;__.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Git &amp;lt;https://git-scm.com/&amp;gt;&lt;/code&gt;__ installed.&lt;/p&gt; &#xA;&lt;p&gt;In general, compiling your own Python interpreter requires the installation of the appropriate libraries and packages. The &lt;code&gt;installation wiki &amp;lt;https://github.com/pyenv/pyenv/wiki/Common-build-problems&amp;gt;&lt;/code&gt;__ provides a list of these for common operating systems.&lt;/p&gt; &#xA;&lt;h2&gt;Installation / Update / Uninstallation&lt;/h2&gt; &#xA;&lt;p&gt;Once prerequisites have been installed correctly:&lt;/p&gt; &#xA;&lt;p&gt;Install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;If you wish to install a specific release of Pyenv rather than the latest head, set the ``PYENV_GIT_TAG`` environment variable (e.g. ``export PYENV_GIT_TAG=v2.2.5``).&#xA;&#xA;.. code:: bash&#xA;&#xA;    curl https://pyenv.run | bash&#xA;    &#xA;``pyenv.run`` redirects to the install script in this repository and the invocation above is equivalent to::&#xA;&#xA;    curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash&#xA;&#xA;Restart your shell so the path changes take effect:&#xA;&#xA;.. code:: bash&#xA;&#xA;    exec $SHELL&#xA;&#xA;You can now begin using pyenv.&#xA;&#xA;If you need, ``export USE_GIT_URI`` to use ``git://`` instead of ``https://`` for git clone.&#xA;&#xA;Update:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pyenv update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Uninstall:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;``pyenv`` is installed within ``$PYENV_ROOT``&#xA;(default: ``~/.pyenv``). To uninstall, just remove it:&#xA;&#xA;.. code:: bash&#xA;&#xA;    rm -fr ~/.pyenv&#xA;    &#xA;then remove these three lines from ``.bashrc``:&#xA;&#xA;.. code:: bash&#xA;&#xA;    export PATH=&#34;$HOME/.pyenv/bin:$PATH&#34;&#xA;    eval &#34;$(pyenv init --path)&#34;&#xA;    eval &#34;$(pyenv virtualenv-init -)&#34;&#xA;&#xA;and finally, restart your shell:&#xA;&#xA;.. code:: bash&#xA;&#xA;    exec $SHELL&#xA;&#xA;          &#xA;&#xA;&#xA;Using pyenv-installer on Travis CI&#xA;----------------------------------&#xA;&#xA;Travis itself uses pyenv and therefore ``PYENV_ROOT`` is set already. To make it work anyway the installation for pyenv-installer needs to look like this::&#xA;&#xA;  [...]&#xA;  - unset PYENV_ROOT&#xA;  - curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash&#xA;  - export PATH=&#34;$HOME/.pyenv/bin:$PATH&#34;&#xA;  - pyenv install 3.5.2&#xA;&#xA;Development and testing&#xA;-----------------------&#xA;&#xA;The `project on github &amp;lt;https://github.com/pyenv/pyenv-installer&amp;gt;`__ contains&#xA;a setup for vagrant to test the installer inside a vagrant managed virtual image.&#xA;&#xA;If you don&#39;t know vagrant yet: just `install the latest&#xA;package &amp;lt;https://www.vagrantup.com/downloads.html&amp;gt;`__, open a shell in&#xA;this project directory and say&#xA;&#xA;::&#xA;&#xA;    vagrant up&#xA;    vagrant ssh&#xA;&#xA;Now you are inside the vagrant container and your prompt should like&#xA;something like ``vagrant@vagrant-ubuntu-trusty-64:~$``&#xA;&#xA;The project (this repository) is mapped into the vagrant image at&#xA;/vagrant&#xA;&#xA;.. code:: bash&#xA;&#xA;    cd /vagrant&#xA;    python setup.py install&#xA;    echo &#39;export PATH=&#34;$HOME/.pyenv/bin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;    echo &#39;eval &#34;$(pyenv init -)&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;    echo &#39;eval &#34;$(pyenv virtualenv-init -)&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;    source ~/.bashrc&#xA;&#xA;Pyenv should be installed and responding now.&#xA;&#xA;&#xA;Version History&#xA;---------------&#xA;&#xA;20190111&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Remove experimental PyPi support and replace with a dummy package.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;20150113&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;-  Initial release on PyPi.&#xA;&#xA;20130601&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Initial public release.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT - see &lt;code&gt;License file &amp;lt;LICENSE&amp;gt;&lt;/code&gt;_.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>calogica/dbt-expectations</title>
    <updated>2022-07-28T02:46:50Z</updated>
    <id>tag:github.com,2022-07-28:/calogica/dbt-expectations</id>
    <link href="https://github.com/calogica/dbt-expectations" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Port(ish) of Great Expectations to dbt test macros&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/calogica/dbt-expectations/tree/main&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/calogica/dbt-expectations/tree/main.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;dbt-expectations&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/expectations.gif&#34;&gt; &#xA;&lt;p&gt;&lt;code&gt;dbt-expectations&lt;/code&gt; is an extension package for &lt;a href=&#34;https://github.com/dbt-labs/dbt&#34;&gt;&lt;strong&gt;dbt&lt;/strong&gt;&lt;/a&gt;, inspired by the &lt;a href=&#34;https://greatexpectations.io/&#34;&gt;Great Expectations package for Python&lt;/a&gt;. The intent is to allow dbt users to deploy GE-like tests in their data warehouse directly from dbt, vs having to add another integration with their data warehouse.&lt;/p&gt; &#xA;&lt;h2&gt;Featured Sponsors ❤️&lt;/h2&gt; &#xA;&lt;p&gt;Development of &lt;code&gt;dbt-expectations&lt;/code&gt; (and &lt;code&gt;dbt-date&lt;/code&gt;) is funded by our amazing &lt;a href=&#34;https://github.com/sponsors/calogica&#34;&gt;sponsors&lt;/a&gt;, including our featured sponsors:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.lightdash.com/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/.sponsors/lightdash.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;dbt-expectations&lt;/code&gt; currently supports &lt;code&gt;dbt 1.0.x&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://hub.getdbt.com/calogica/dbt_expectations/latest/&#34;&gt;dbt Hub&lt;/a&gt; for the latest installation instructions, or &lt;a href=&#34;https://docs.getdbt.com/docs/package-management&#34;&gt;read the docs&lt;/a&gt; for more information on installing packages.&lt;/p&gt; &#xA;&lt;p&gt;Include in &lt;code&gt;packages.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;packages:&#xA;  - package: calogica/dbt_expectations&#xA;    version: [&#34;&amp;gt;=0.5.0&#34;, &#34;&amp;lt;0.6.0&#34;]&#xA;    # &amp;lt;see https://github.com/calogica/dbt-expectations/releases/latest&amp;gt; for the latest version tag&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For latest release, see &lt;a href=&#34;https://github.com/calogica/dbt-expectations/releases&#34;&gt;https://github.com/calogica/dbt-expectations/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;This package includes a reference to &lt;a href=&#34;https://github.com/calogica/dbt-date&#34;&gt;&lt;code&gt;dbt-date&lt;/code&gt;&lt;/a&gt; which in turn references &lt;a href=&#34;https://github.com/dbt-labs/dbt-utils&#34;&gt;&lt;code&gt;dbt-utils&lt;/code&gt;&lt;/a&gt; so there&#39;s no need to also import dbt-utils in your local project.&lt;/p&gt; &#xA;&lt;p&gt;Note: we no longer include &lt;code&gt;spark_utils&lt;/code&gt; in this package to avoid versioning conflicts. If you are running this package on non-core platforms (outside of Snowflake, BigQuery, Redshift, Postgres), you will need to use a package like &lt;code&gt;spark_utils&lt;/code&gt; to shim macros.&lt;/p&gt; &#xA;&lt;p&gt;For example, in &lt;code&gt;packages.yml&lt;/code&gt;, you will need to include the relevant package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;  - package: dbt-labs/spark_utils&#xA;    version: &amp;lt;latest or range&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And reference in the dispatch list for &lt;code&gt;dbt_utils&lt;/code&gt; in &lt;code&gt;dbt_project.yml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;vars:&#xA;    dbt_utils_dispatch_list: [spark_utils]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Variables&lt;/h3&gt; &#xA;&lt;p&gt;The following variables need to be defined in your &lt;code&gt;dbt_project.yml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;vars:&#xA;  &#39;dbt_date:time_zone&#39;: &#39;America/Los_Angeles&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may specify &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones&#34;&gt;any valid timezone string&lt;/a&gt; in place of &lt;code&gt;America/Los_Angeles&lt;/code&gt;. For example, use &lt;code&gt;America/New_York&lt;/code&gt; for East Coast Time.&lt;/p&gt; &#xA;&lt;h2&gt;Available Tests&lt;/h2&gt; &#xA;&lt;h3&gt;Table shape&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_to_exist&#34;&gt;expect_column_to_exist&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_row_values_to_have_recent_data&#34;&gt;expect_row_values_to_have_recent_data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_grouped_row_values_to_have_recent_data&#34;&gt;expect_grouped_row_values_to_have_recent_data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_table_column_count_to_be_between&#34;&gt;expect_table_column_count_to_be_between&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_table_column_count_to_equal_other_table&#34;&gt;expect_table_column_count_to_equal_other_table&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_table_column_count_to_equal&#34;&gt;expect_table_column_count_to_equal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_table_columns_to_not_contain_set&#34;&gt;expect_table_columns_to_not_contain_set&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_table_columns_to_contain_set&#34;&gt;expect_table_columns_to_contain_set&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_table_columns_to_match_ordered_list&#34;&gt;expect_table_columns_to_match_ordered_list&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_table_columns_to_match_set&#34;&gt;expect_table_columns_to_match_set&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_table_row_count_to_be_between&#34;&gt;expect_table_row_count_to_be_between&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_table_row_count_to_equal_other_table&#34;&gt;expect_table_row_count_to_equal_other_table&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_table_row_count_to_equal_other_table_times_factor&#34;&gt;expect_table_row_count_to_equal_other_table_times_factor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_table_row_count_to_equal&#34;&gt;expect_table_row_count_to_equal&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Missing values, unique values, and types&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_values_to_be_null&#34;&gt;expect_column_values_to_be_null&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_values_to_not_be_null&#34;&gt;expect_column_values_to_not_be_null&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_values_to_be_unique&#34;&gt;expect_column_values_to_be_unique&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_values_to_be_of_type&#34;&gt;expect_column_values_to_be_of_type&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_values_to_be_in_type_list&#34;&gt;expect_column_values_to_be_in_type_list&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_values_to_have_consistent_casing&#34;&gt;expect_column_values_to_have_consistent_casing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Sets and ranges&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_values_to_be_in_set&#34;&gt;expect_column_values_to_be_in_set&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_values_to_not_be_in_set&#34;&gt;expect_column_values_to_not_be_in_set&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_values_to_be_between&#34;&gt;expect_column_values_to_be_between&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_values_to_be_decreasing&#34;&gt;expect_column_values_to_be_decreasing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_values_to_be_increasing&#34;&gt;expect_column_values_to_be_increasing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;String matching&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_value_lengths_to_be_between&#34;&gt;expect_column_value_lengths_to_be_between&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_value_lengths_to_equal&#34;&gt;expect_column_value_lengths_to_equal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_values_to_match_like_pattern&#34;&gt;expect_column_values_to_match_like_pattern&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_values_to_match_like_pattern_list&#34;&gt;expect_column_values_to_match_like_pattern_list&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_values_to_match_regex&#34;&gt;expect_column_values_to_match_regex&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_values_to_match_regex_list&#34;&gt;expect_column_values_to_match_regex_list&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_values_to_not_match_like_pattern&#34;&gt;expect_column_values_to_not_match_like_pattern&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_values_to_not_match_like_pattern_list&#34;&gt;expect_column_values_to_not_match_like_pattern_list&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_values_to_not_match_regex&#34;&gt;expect_column_values_to_not_match_regex&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_values_to_not_match_regex_list&#34;&gt;expect_column_values_to_not_match_regex_list&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Aggregate functions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_distinct_count_to_be_greater_than&#34;&gt;expect_column_distinct_count_to_be_greater_than&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_distinct_count_to_equal_other_table&#34;&gt;expect_column_distinct_count_to_equal_other_table&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_distinct_count_to_equal&#34;&gt;expect_column_distinct_count_to_equal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_distinct_values_to_be_in_set&#34;&gt;expect_column_distinct_values_to_be_in_set&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_distinct_values_to_contain_set&#34;&gt;expect_column_distinct_values_to_contain_set&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_distinct_values_to_equal_set&#34;&gt;expect_column_distinct_values_to_equal_set&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_max_to_be_between&#34;&gt;expect_column_max_to_be_between&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_mean_to_be_between&#34;&gt;expect_column_mean_to_be_between&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_median_to_be_between&#34;&gt;expect_column_median_to_be_between&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_min_to_be_between&#34;&gt;expect_column_min_to_be_between&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_most_common_value_to_be_in_set&#34;&gt;expect_column_most_common_value_to_be_in_set&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_proportion_of_unique_values_to_be_between&#34;&gt;expect_column_proportion_of_unique_values_to_be_between&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_quantile_values_to_be_between&#34;&gt;expect_column_quantile_values_to_be_between&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_stdev_to_be_between&#34;&gt;expect_column_stdev_to_be_between&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_sum_to_be_between&#34;&gt;expect_column_sum_to_be_between&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_unique_value_count_to_be_between&#34;&gt;expect_column_unique_value_count_to_be_between&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Multi-column&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_pair_values_A_to_be_greater_than_B&#34;&gt;expect_column_pair_values_A_to_be_greater_than_B&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_pair_values_to_be_equal&#34;&gt;expect_column_pair_values_to_be_equal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_pair_values_to_be_in_set&#34;&gt;expect_column_pair_values_to_be_in_set&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_compound_columns_to_be_unique&#34;&gt;expect_compound_columns_to_be_unique&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_multicolumn_sum_to_equal&#34;&gt;expect_multicolumn_sum_to_equal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_select_column_values_to_be_unique_within_record&#34;&gt;expect_select_column_values_to_be_unique_within_record&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Distributional functions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_values_to_be_within_n_moving_stdevs&#34;&gt;expect_column_values_to_be_within_n_moving_stdevs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_column_values_to_be_within_n_stdevs&#34;&gt;expect_column_values_to_be_within_n_stdevs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/#expect_row_values_to_have_data_for_every_n_datepart&#34;&gt;expect_row_values_to_have_data_for_every_n_datepart&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/table_shape/expect_column_to_exist.sql&#34;&gt;expect_column_to_exist&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the specified column to exist.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;- dbt_expectations.expect_column_to_exist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql&#34;&gt;expect_row_values_to_have_recent_data&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the model to have rows that are at least as recent as the defined interval prior to the current timestamp. Optionally gives the possibility to apply filters on the results.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_row_values_to_have_recent_data:&#xA;        datepart: day&#xA;        interval: 1&#xA;        row_condition: &#39;id is not null&#39; #optional&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql&#34;&gt;expect_grouped_row_values_to_have_recent_data&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the model to have &lt;strong&gt;grouped&lt;/strong&gt; rows that are at least as recent as the defined interval prior to the current timestamp. Use this to test whether there is recent data for each grouped row defined by &lt;code&gt;group_by&lt;/code&gt; (which is a list of columns) and a &lt;code&gt;timestamp_column&lt;/code&gt;. Optionally gives the possibility to apply filters on the results.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Model, Seed, Source&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;models: # or seeds:&#xA;  - name : my_model&#xA;    tests :&#xA;        - dbt_expectations.expect_grouped_row_values_to_have_recent_data:&#xA;            group_by: [group_id]&#xA;            timestamp_column: date_day&#xA;            datepart: day&#xA;            interval: 1&#xA;            row_condition: &#34;id is not null&#34; #optional&#xA;        # or also:&#xA;        - dbt_expectations.expect_grouped_row_values_to_have_recent_data:&#xA;            group_by: [group_id, other_group_id]&#xA;            timestamp_column: date_day&#xA;            datepart: day&#xA;            interval: 1&#xA;            row_condition: &#34;id is not null&#34; #optional&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql&#34;&gt;expect_table_column_count_to_be_between&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the number of columns in a model to be between two values.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Model, Seed, Source&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_table_column_count_to_be_between:&#xA;      min_value: 1 # (Optional)&#xA;      max_value: 4 # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql&#34;&gt;expect_table_column_count_to_equal_other_table&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the number of columns in a model to match another model.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Model, Seed, Source&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;models: # or seeds:&#xA;  - name: my_model&#xA;    tests:&#xA;    - dbt_expectations.expect_table_column_count_to_equal_other_table:&#xA;        compare_model: ref(&#34;other_model&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql&#34;&gt;expect_table_columns_to_not_contain_set&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the columns in a model not to contain a given list.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Model, Seed, Source&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;models: # or seeds:&#xA;  - name: my_model&#xA;    tests:&#xA;    - dbt_expectations.expect_table_columns_to_not_contain_set:&#xA;        column_list: [&#34;col_a&#34;, &#34;col_b&#34;]&#xA;        transform: uppper # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql&#34;&gt;expect_table_columns_to_contain_set&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the columns in a model to contain a given list.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Model, Seed, Source&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;models: # or seeds:&#xA;  - name: my_model&#xA;    tests:&#xA;    - dbt_expectations.expect_table_columns_to_contain_set:&#xA;        column_list: [&#34;col_a&#34;, &#34;col_b&#34;]&#xA;        transform: uppper # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql&#34;&gt;expect_table_column_count_to_equal&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the number of columns in a model to be equal to &lt;code&gt;expected_number_of_columns&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Model, Seed, Source&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;models: # or seeds:&#xA;  - name: my_model&#xA;    tests:&#xA;    - dbt_expectations.expect_table_column_count_to_equal:&#xA;        value: 7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql&#34;&gt;expect_table_columns_to_match_ordered_list&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the columns to exactly match a specified list.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Model, Seed, Source&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;models: # or seeds:&#xA;  - name: my_model&#xA;    tests:&#xA;    - dbt_expectations.expect_table_columns_to_match_ordered_list:&#xA;        column_list: [&#34;col_a&#34;, &#34;col_b&#34;]&#xA;        transform: uppper # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql&#34;&gt;expect_table_columns_to_match_set&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the columns in a model to match a given list.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Model, Seed, Source&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;models: # or seeds:&#xA;  - name: my_model&#xA;    tests:&#xA;    - dbt_expectations.expect_table_columns_to_match_set:&#xA;        column_list: [&#34;col_a&#34;, &#34;col_b&#34;]&#xA;        transform: uppper # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql&#34;&gt;expect_table_row_count_to_be_between&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the number of rows in a model to be between two values. &lt;em&gt;Applies to:&lt;/em&gt; Model, Seed, Source&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;models: # or seeds:&#xA;  - name: my_model&#xA;    tests:&#xA;    - dbt_expectations.expect_table_row_count_to_be_between:&#xA;        min_value: 1 # (Optional)&#xA;        max_value: 4 # (Optional)&#xA;        group_by: [group_id, other_group_id, ...] # (Optional)&#xA;        row_condition: &#34;id is not null&#34; # (Optional)&#xA;        strictly: false # (Optional. Adds an &#39;or equal to&#39; to the comparison operator for min/max)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql&#34;&gt;expect_table_row_count_to_equal_other_table&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the number of rows in a model match another model.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Model, Seed, Source&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;models: # or seeds:&#xA;  - name: my_model&#xA;    tests:&#xA;    - dbt_expectations.expect_table_row_count_to_equal_other_table:&#xA;        compare_model: ref(&#34;other_model&#34;)&#xA;        factor: 1 # (Optional)&#xA;        row_condition: &#34;id is not null&#34; # (Optional)&#xA;        compare_row_condition: &#34;id is not null&#34; # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql&#34;&gt;expect_table_row_count_to_equal_other_table_times_factor&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the number of rows in a model to match another model times a preconfigured factor.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Model, Seed, Source&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;models: # or seeds:&#xA;  - name: my_model&#xA;    tests:&#xA;    - dbt_expectations.expect_table_row_count_to_equal_other_table_times_factor:&#xA;        compare_model: ref(&#34;other_model&#34;)&#xA;        factor: 13&#xA;        row_condition: &#34;id is not null&#34; # (Optional)&#xA;        compare_row_condition: &#34;id is not null&#34; # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql&#34;&gt;expect_table_row_count_to_equal&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the number of rows in a model to be equal to &lt;code&gt;expected_number_of_rows&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Model, Seed, Source&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;models: # or seeds:&#xA;  - name: my_model&#xA;    tests:&#xA;    - dbt_expectations.expect_table_row_count_to_equal:&#xA;        value: 4&#xA;        group_by: [group_id, other_group_id, ...] # (Optional)&#xA;        row_condition: &#34;id is not null&#34; # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql&#34;&gt;expect_column_values_to_be_unique&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect each column value to be unique.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_values_to_be_unique:&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql&#34;&gt;expect_column_values_to_not_be_null&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect column values to not be null.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_values_to_not_be_null:&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql&#34;&gt;expect_column_values_to_be_null&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect column values to be null.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_values_to_be_null:&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql&#34;&gt;expect_column_values_to_be_of_type&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect a column to be of a specified data type.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_values_to_be_of_type:&#xA;      column_type: date&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql&#34;&gt;expect_column_values_to_be_in_type_list&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect a column to be one of a specified type list.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_values_to_be_in_type_list:&#xA;      column_type_list: [date, datetime]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql&#34;&gt;expect_column_values_to_have_consistent_casing&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect a column to have consistent casing. By setting &lt;code&gt;display_inconsistent_columns&lt;/code&gt; to true, the number of inconsistent values in the column will be displayed in the terminal whereas the inconsistent values themselves will be returned if the SQL compiled test is run.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_values_to_have_consistent_casing:&#xA;      display_inconsistent_columns: false # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql&#34;&gt;expect_column_values_to_be_in_set&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect each column value to be in a given set.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_values_to_be_in_set:&#xA;      value_set: [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]&#xA;      quote_values: true # (Optional)&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql&#34;&gt;expect_column_values_to_be_between&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect each column value to be between two values.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_values_to_be_between:&#xA;      min_value: 0  # (Optional)&#xA;      max_value: 10 # (Optional)&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;      strictly: false # (Optional. Default is &#39;false&#39;. Adds an &#39;or equal to&#39; to the comparison operator for min/max)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql&#34;&gt;expect_column_values_to_not_be_in_set&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect each column value not to be in a given set.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_values_to_not_be_in_set:&#xA;      value_set: [&#39;e&#39;,&#39;f&#39;,&#39;g&#39;]&#xA;      quote_values: true # (Optional)&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql&#34;&gt;expect_column_values_to_be_increasing&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect column values to be increasing.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;strictly: True&lt;/code&gt;, then this expectation is only satisfied if each consecutive value is strictly increasing–equal values are treated as failures.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_values_to_be_increasing:&#xA;      sort_column: date_day&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;      strictly: true # (Optional for comparison operator. Default is &#39;true&#39;, and it uses &#39;&amp;gt;&#39;. If set to &#39;false&#39; it uses &#39;&amp;gt;=&#39;.)&#xA;      group_by: [group_id, other_group_id, ...] # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql&#34;&gt;expect_column_values_to_be_decreasing&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect column values to be decreasing.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;strictly=True&lt;/code&gt;, then this expectation is only satisfied if each consecutive value is strictly increasing–equal values are treated as failures.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_values_to_be_decreasing:&#xA;      sort_column: col_numeric_a&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;      strictly: true # (Optional for comparison operator. Default is &#39;true&#39; and it uses &#39;&amp;lt;&#39;. If set to &#39;false&#39;, it uses &#39;&amp;lt;=&#39;.)&#xA;      group_by: [group_id, other_group_id, ...] # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql&#34;&gt;expect_column_value_lengths_to_be_between&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect column entries to be strings with length between a min_value value and a max_value value (inclusive).&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_value_lengths_to_be_between:&#xA;      min_value: 1 # (Optional)&#xA;      max_value: 4 # (Optional)&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;      strictly: false # (Optional. Default is &#39;false&#39;. Adds an &#39;or equal to&#39; to the comparison operator for min/max)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql&#34;&gt;expect_column_value_lengths_to_equal&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect column entries to be strings with length equal to the provided value.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_value_lengths_to_equal:&#xA;      value: 10&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql&#34;&gt;expect_column_values_to_match_regex&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect column entries to be strings that match a given regular expression. Valid matches can be found anywhere in the string, for example &#34;[at]+&#34; will identify the following strings as expected: &#34;cat&#34;, &#34;hat&#34;, &#34;aa&#34;, &#34;a&#34;, and &#34;t&#34;, and the following strings as unexpected: &#34;fish&#34;, &#34;dog&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_values_to_match_regex:&#xA;      regex: &#34;[at]+&#34;&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql&#34;&gt;expect_column_values_to_not_match_regex&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect column entries to be strings that do NOT match a given regular expression. The regex must not match any portion of the provided string. For example, &#34;[at]+&#34; would identify the following strings as expected: &#34;fish”, &#34;dog”, and the following as unexpected: &#34;cat”, &#34;hat”.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_values_to_not_match_regex:&#xA;      regex: &#34;[at]+&#34;&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql&#34;&gt;expect_column_values_to_match_regex_list&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the column entries to be strings that can be matched to either any of or all of a list of regular expressions. Matches can be anywhere in the string.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_values_to_match_regex_list:&#xA;      regex_list: [&#34;@[^.]*&#34;, &#34;&amp;amp;[^.]*&#34;]&#xA;      match_on: any # (Optional. Default is &#39;any&#39;, which applies an &#39;OR&#39; for each regex. If &#39;all&#39;, it applies an &#39;AND&#39; for each regex.)&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql&#34;&gt;expect_column_values_to_not_match_regex_list&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the column entries to be strings that do not match any of a list of regular expressions. Matches can be anywhere in the string.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_values_to_not_match_regex_list:&#xA;      regex_list: [&#34;@[^.]*&#34;, &#34;&amp;amp;[^.]*&#34;]&#xA;      match_on: any # (Optional. Default is &#39;any&#39;, which applies an &#39;OR&#39; for each regex. If &#39;all&#39;, it applies an &#39;AND&#39; for each regex.)&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql&#34;&gt;expect_column_values_to_match_like_pattern&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect column entries to be strings that match a given SQL &lt;code&gt;like&lt;/code&gt; pattern.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_values_to_match_like_pattern:&#xA;      like_pattern: &#34;%@%&#34;&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql&#34;&gt;expect_column_values_to_not_match_like_pattern&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect column entries to be strings that do not match a given SQL &lt;code&gt;like&lt;/code&gt; pattern.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_values_to_not_match_like_pattern:&#xA;      like_pattern: &#34;%&amp;amp;%&#34;&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql&#34;&gt;expect_column_values_to_match_like_pattern_list&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the column entries to be strings that match any of a list of SQL &lt;code&gt;like&lt;/code&gt; patterns.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_values_to_match_like_pattern_list:&#xA;      like_pattern_list: [&#34;%@%&#34;, &#34;%&amp;amp;%&#34;]&#xA;      match_on: any # (Optional. Default is &#39;any&#39;, which applies an &#39;OR&#39; for each pattern. If &#39;all&#39;, it applies an &#39;AND&#39; for each regex.)&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql&#34;&gt;expect_column_values_to_not_match_like_pattern_list&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the column entries to be strings that do not match any of a list of SQL &lt;code&gt;like&lt;/code&gt; patterns.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_values_to_not_match_like_pattern_list:&#xA;      like_pattern_list: [&#34;%@%&#34;, &#34;%&amp;amp;%&#34;]&#xA;      match_on: any # (Optional. Default is &#39;any&#39;, which applies an &#39;OR&#39; for each pattern. If &#39;all&#39;, it applies an &#39;AND&#39; for each regex.)&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql&#34;&gt;expect_column_distinct_count_to_equal&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the number of distinct column values to be equal to a given value.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_distinct_count_to_equal:&#xA;      value: 10&#xA;      quote_values: false # (Optional. Default is &#39;false&#39;.)&#xA;      group_by: [group_id, other_group_id, ...] # (Optional)&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql&#34;&gt;expect_column_distinct_count_to_be_greater_than&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the number of distinct column values to be greater than a given value.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_distinct_count_to_be_greater_than:&#xA;      value: 10&#xA;      quote_values: false # (Optional. Default is &#39;false&#39;.)&#xA;      group_by: [group_id, other_group_id, ...] # (Optional)&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql&#34;&gt;expect_column_distinct_values_to_be_in_set&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the set of distinct column values to be contained by a given set.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_distinct_values_to_be_in_set:&#xA;      value_set: [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;]&#xA;      quote_values: false # (Optional. Default is &#39;false&#39;.)&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql&#34;&gt;expect_column_distinct_values_to_contain_set&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the set of distinct column values to contain a given set.&lt;/p&gt; &#xA;&lt;p&gt;In contrast to &lt;code&gt;expect_column_values_to_be_in_set&lt;/code&gt; this ensures not that all column values are members of the given set but that values from the set must be present in the column.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_distinct_values_to_contain_set:&#xA;      value_set: [&#39;a&#39;,&#39;b&#39;]&#xA;      quote_values: false # (Optional. Default is &#39;false&#39;.)&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql&#34;&gt;expect_column_distinct_values_to_equal_set&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the set of distinct column values to equal a given set.&lt;/p&gt; &#xA;&lt;p&gt;In contrast to &lt;code&gt;expect_column_distinct_values_to_contain_set&lt;/code&gt; this ensures not only that a certain set of values are present in the column but that these and only these values are present.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_distinct_values_to_equal_set:&#xA;      value_set: [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]&#xA;      quote_values: true # (Optional. Default is &#39;true&#39;.)&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql&#34;&gt;expect_column_distinct_count_to_equal_other_table&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the number of distinct column values to be equal to number of distinct values in another model.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Model, Column, Seed, Source&lt;/p&gt; &#xA;&lt;p&gt;This can be applied to a model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;models: # or seeds:&#xA;  - name: my_model_1&#xA;    tests:&#xA;      - dbt_expectations.expect_column_distinct_count_to_equal_other_table:&#xA;          column_name: col_1&#xA;          compare_model: ref(&#34;my_model_2&#34;)&#xA;          compare_column_name: col_2&#xA;          row_condition: &#34;id is not null&#34; # (Optional)&#xA;          compare_row_condition: &#34;id is not null&#34; # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or at the column level:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;models: # or seeds:&#xA;  - name: my_model_1&#xA;    columns:&#xA;      - name: col_1&#xA;        tests:&#xA;          - dbt_expectations.expect_column_distinct_count_to_equal_other_table:&#xA;              compare_model: ref(&#34;my_model_2&#34;)&#xA;              compare_column_name: col_2&#xA;              row_condition: &#34;id is not null&#34; # (Optional)&#xA;              compare_row_condition: &#34;id is not null&#34; # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;compare_model&lt;/code&gt; or &lt;code&gt;compare_column_name&lt;/code&gt; are no specified, &lt;code&gt;model&lt;/code&gt; and &lt;code&gt;column_name&lt;/code&gt; are substituted. So, one could compare distinct counts of two different columns in the same model, or identically named columns in separate models etc.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql&#34;&gt;expect_column_mean_to_be_between&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the column mean to be between a min_value value and a max_value value (inclusive).&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_mean_to_be_between:&#xA;      min_value: 0 # (Optional)&#xA;      max_value: 2 # (Optional)&#xA;      group_by: [group_id, other_group_id, ...] # (Optional)&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;      strictly: false # (Optional. Default is &#39;false&#39;. Adds an &#39;or equal to&#39; to the comparison operator for min/max)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql&#34;&gt;expect_column_median_to_be_between&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the column median to be between a min_value value and a max_value value (inclusive).&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_median_to_be_between:&#xA;      min_value: 0&#xA;      max_value: 2&#xA;      group_by: [group_id, other_group_id, ...] # (Optional)&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;      strictly: false # (Optional. Default is &#39;false&#39;. Adds an &#39;or equal to&#39; to the comparison operator for min/max)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql&#34;&gt;expect_column_quantile_values_to_be_between&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect specific provided column quantiles to be between provided min_value and max_value values.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_quantile_values_to_be_between:&#xA;      quantile: .95&#xA;      min_value: 0 # (Optional)&#xA;      max_value: 2 # (Optional)&#xA;      group_by: [group_id, other_group_id, ...] # (Optional)&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;      strictly: false # (Optional. Default is &#39;false&#39;. Adds an &#39;or equal to&#39; to the comparison operator for min/max)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql&#34;&gt;expect_column_stdev_to_be_between&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the column standard deviation to be between a min_value value and a max_value value. Uses sample standard deviation (normalized by N-1).&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_stdev_to_be_between:&#xA;      min_value: 0 # (Optional)&#xA;      max_value: 2 # (Optional)&#xA;      group_by: [group_id, other_group_id, ...] # (Optional)&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;      strictly: false # (Optional. Default is &#39;false&#39;. Adds an &#39;or equal to&#39; to the comparison operator for min/max)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql&#34;&gt;expect_column_unique_value_count_to_be_between&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the number of unique values to be between a min_value value and a max_value value.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_unique_value_count_to_be_between:&#xA;      min_value: 3 # (Optional)&#xA;      max_value: 3 # (Optional)&#xA;      group_by: [group_id, other_group_id, ...] # (Optional)&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;      strictly: false # (Optional. Default is &#39;false&#39;. Adds an &#39;or equal to&#39; to the comparison operator for min/max)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql&#34;&gt;expect_column_proportion_of_unique_values_to_be_between&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the proportion of unique values to be between a min_value value and a max_value value.&lt;/p&gt; &#xA;&lt;p&gt;For example, in a column containing [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], there are 4 unique values and 10 total values for a proportion of 0.4.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_proportion_of_unique_values_to_be_between:&#xA;      min_value: 0  # (Optional)&#xA;      max_value: .4 # (Optional)&#xA;      group_by: [group_id, other_group_id, ...] # (Optional)&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;      strictly: false # (Optional. Default is &#39;false&#39;. Adds an &#39;or equal to&#39; to the comparison operator for min/max)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql&#34;&gt;expect_column_most_common_value_to_be_in_set&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the most common value to be within the designated value set&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_most_common_value_to_be_in_set:&#xA;      value_set: [0.5]&#xA;      top_n: 1&#xA;      quote_values: false # (Optional)&#xA;      data_type: &#34;decimal&#34; # (Optional. Default is &#39;decimal&#39;)&#xA;      strictly: false # (Optional. Default is &#39;false&#39;. Adds an &#39;or equal to&#39; to the comparison operator for min/max)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql&#34;&gt;expect_column_max_to_be_between&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the column max to be between a min and max value&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_max_to_be_between:&#xA;      min_value: 1 # (Optional)&#xA;      max_value: 1 # (Optional)&#xA;      group_by: [group_id, other_group_id, ...] # (Optional)&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;      strictly: false # (Optional. Default is &#39;false&#39;. Adds an &#39;or equal to&#39; to the comparison operator for min/max)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql&#34;&gt;expect_column_min_to_be_between&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the column min to be between a min and max value&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_min_to_be_between:&#xA;      min_value: 0 # (Optional)&#xA;      max_value: 1 # (Optional)&#xA;      group_by: [group_id, other_group_id, ...] # (Optional)&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;      strictly: false # (Optional. Default is &#39;false&#39;. Adds an &#39;or equal to&#39; to the comparison operator for min/max)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql&#34;&gt;expect_column_sum_to_be_between&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the column to sum to be between a min and max value&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_sum_to_be_between:&#xA;      min_value: 1 # (Optional)&#xA;      max_value: 2 # (Optional)&#xA;      group_by: [group_id, other_group_id, ...] # (Optional)&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;      strictly: false # (Optional. Default is &#39;false&#39;. Adds an &#39;or equal to&#39; to the comparison operator for min/max)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql&#34;&gt;expect_column_pair_values_A_to_be_greater_than_B&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect values in column A to be greater than column B.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Model, Seed, Source&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_pair_values_A_to_be_greater_than_B:&#xA;      column_A: col_numeric_a&#xA;      column_B: col_numeric_a&#xA;      or_equal: True&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql&#34;&gt;expect_column_pair_values_to_be_equal&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the values in column A to be the same as column B.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Model, Seed, Source&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_pair_values_to_be_equal:&#xA;      column_A: col_numeric_a&#xA;      column_B: col_numeric_a&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql&#34;&gt;expect_column_pair_values_to_be_in_set&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect paired values from columns A and B to belong to a set of valid pairs.&lt;/p&gt; &#xA;&lt;p&gt;Note: value pairs are expressed as lists within lists&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Model, Seed, Source&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_pair_values_to_be_in_set:&#xA;      column_A: col_numeric_a&#xA;      column_B: col_numeric_b&#xA;      value_pairs_set: [[0, 1], [1, 0], [0.5, 0.5], [0.5, 0.5]]&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql&#34;&gt;expect_select_column_values_to_be_unique_within_record&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect the values for each record to be unique across the columns listed. Note that records can be duplicated.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Model, Seed, Source&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_select_column_values_to_be_unique_within_record:&#xA;      column_list: [&#34;col_string_a&#34;, &#34;col_string_b&#34;]&#xA;      ignore_row_if: &#34;any_value_is_missing&#34; # (Optional. Default is &#39;all_values_are_missing&#39;)&#xA;      quote_columns: false # (Optional)&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql&#34;&gt;expect_multicolumn_sum_to_equal&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expects that sum of all rows for a set of columns is equal to a specific value&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Model, Seed, Source&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_multicolumn_sum_to_equal:&#xA;      column_list: [&#34;col_numeric_a&#34;, &#34;col_numeric_b&#34;]&#xA;      sum_total: 4&#xA;      group_by: [group_id, other_group_id, ...] # (Optional)&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql&#34;&gt;expect_compound_columns_to_be_unique&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expect that the columns are unique together, e.g. a multi-column primary key.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Model, Seed, Source&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_compound_columns_to_be_unique:&#xA;      column_list: [&#34;date_col&#34;, &#34;col_string_b&#34;]&#xA;      ignore_row_if: &#34;any_value_is_missing&#34; # (Optional. Default is &#39;all_values_are_missing&#39;)&#xA;      quote_columns: false # (Optional)&#xA;      row_condition: &#34;id is not null&#34; # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql&#34;&gt;expect_column_values_to_be_within_n_moving_stdevs&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expects changes in metric values to be within Z sigma away from a moving average, taking the (optionally logged) differences of an aggregated metric value and comparing it to its value N days ago.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_values_to_be_within_n_moving_stdevs:&#xA;      date_column_name: date&#xA;      period: day # (Optional. Default is &#39;day&#39;)&#xA;      lookback_periods: 1 # (Optional. Default is 1)&#xA;      trend_periods: 7 # (Optional. Default is 7)&#xA;      test_periods: 14 # (Optional. Default is 14)&#xA;      sigma_threshold: 3 # (Optional. Default is 3)&#xA;      take_logs: true # (Optional. Default is &#39;true&#39;)&#xA;      sigma_threshold_upper: x # (Optional. Replace &#39;x&#39; with a value. Default is &#39;None&#39;)&#xA;      sigma_threshold_lower: y # (Optional. Replace &#39;y&#39; with a value. Default is &#39;None&#39;)&#xA;      take_diffs: true # (Optional)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql&#34;&gt;expect_column_values_to_be_within_n_stdevs&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expects (optionally grouped &amp;amp; summed) metric values to be within Z sigma away from the column average&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;  - dbt_expectations.expect_column_values_to_be_within_n_stdevs:&#xA;      group_by: date_day # (Optional. Default is &#39;None&#39;)&#xA;      sigma_threshold: 3 # (Optional. Default is 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/calogica/dbt-expectations/main/macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql&#34;&gt;expect_row_values_to_have_data_for_every_n_datepart&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Expects model to have values for every grouped &lt;code&gt;date_part&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, this tests whether a model has data for every &lt;code&gt;day&lt;/code&gt; (grouped on &lt;code&gt;date_col&lt;/code&gt;) between either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;min&lt;/code&gt;/&lt;code&gt;max&lt;/code&gt; value of the specified &lt;code&gt;date_col&lt;/code&gt; (default).&lt;/li&gt; &#xA; &lt;li&gt;A specified &lt;code&gt;test_start_date&lt;/code&gt; and/or &lt;code&gt;test_end_date&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Applies to:&lt;/em&gt; Model, Seed, Source&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tests:&#xA;    - dbt_expectations.expect_row_values_to_have_data_for_every_n_datepart:&#xA;        date_col: date_day&#xA;        date_part: day # (Optional. Default is &#39;day&#39;)&#xA;        row_condition: &#34;id is not null&#34; # (Optional)&#xA;        test_start_date: &#39;yyyy-mm-dd&#39; # (Optional. Replace &#39;yyyy-mm-dd&#39; with a date. Default is &#39;None&#39;)&#xA;        test_end_date: &#39;yyyy-mm-dd&#39; # (Optional. Replace &#39;yyyy-mm-dd&#39; with a date. Default is &#39;None&#39;)&#xA;        exclusion_condition: statement # (Optional. See details below. Default is &#39;None&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;test_end_date&lt;/code&gt; is exclusive, e.g. a test with &lt;code&gt;test_end_date&lt;/code&gt; value of &lt;code&gt;&#39;2020-01-05&#39;&lt;/code&gt; will pass if your model has data through &lt;code&gt;&#39;2021-01-04&#39;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If &lt;code&gt;test_start_date&lt;/code&gt; or &lt;code&gt;test_end_date&lt;/code&gt; are not specified, the test automatically determines the &lt;code&gt;min&lt;/code&gt;/&lt;code&gt;max&lt;/code&gt; of the specified &lt;code&gt;date_col&lt;/code&gt; from your data, respectively. On some platforms, and/or if your table is not partitione on that date column, this may lead to performance issues. In these cases, we recommend setting an explicit date literal. You may also set a &#34;dynamic&#34; date literal via the built-in &lt;code&gt;modules.datetime&lt;/code&gt; functions:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;    date_part: day&#xA;    test_start_date: &#39;2021-05-01&#39;&#xA;    test_end_date: &#39;{{ modules.datetime.date.today() }}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;    date_part: day&#xA;    test_start_date: &#39;2021-05-01&#39;&#xA;    test_end_date: &#39;{{ modules.datetime.date.today() - modules.datetime.timedelta(1)) }}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unfortunately, you currently &lt;strong&gt;cannot&lt;/strong&gt; use a dynamic SQL date, such as &lt;code&gt;current_date&lt;/code&gt; or macro from a dbt package such as dbt-date, as the underlying &lt;code&gt;dbt_utils.date_spine&lt;/code&gt; expects a date literal.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;interval&lt;/code&gt; argument will optionally group &lt;code&gt;date_part&lt;/code&gt; by a given integer to test data presence at a lower granularity, e.g. adding &lt;code&gt;interval: 7&lt;/code&gt; to the example above will test whether a model has data for each 7-&lt;code&gt;day&lt;/code&gt; period instead of for each &lt;code&gt;day&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Known or expected missing dates can be excluded from the test by setting the &lt;code&gt;exclusion_criteria&lt;/code&gt; with a valid SQL statement; e.g., adding &lt;code&gt;exclusion_condition: not(date_day = &#39;2021-10-19&#39;)&lt;/code&gt; will ensure that test passes if and only if &lt;code&gt;date_day = &#39;2021-10-19&#39;&lt;/code&gt; is the only date with missing data. Alternatively, &lt;code&gt;exclusion_condition: not(date_part(month, date_day) = 12 and date_part(day, date_day) = 25)&lt;/code&gt; will permit data to be missing on the 25th of December (Christmas day) every year.&lt;/p&gt; &#xA;&lt;h2&gt;~ Developers Only ~&lt;/h2&gt; &#xA;&lt;h3&gt;Integration Tests&lt;/h3&gt; &#xA;&lt;p&gt;This project contains integration tests for all test macros in a separate &lt;code&gt;integration_tests&lt;/code&gt; dbt project contained in this repo.&lt;/p&gt; &#xA;&lt;p&gt;To run the tests:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You will need a profile called &lt;code&gt;integration_tests&lt;/code&gt; in &lt;code&gt;~/.dbt/profiles.yml&lt;/code&gt; pointing to a writable database. We only support postgres, BigQuery and Snowflake.&lt;/li&gt; &#xA; &lt;li&gt;Then, from within the &lt;code&gt;integration_tests&lt;/code&gt; folder, run &lt;code&gt;dbt build&lt;/code&gt; to run the test models in &lt;code&gt;integration_tests/models/schema_tests/&lt;/code&gt; and run the tests specified in &lt;code&gt;integration_tests/models/schema_tests/schema.yml&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>