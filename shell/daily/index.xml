<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-03T01:44:24Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>prajwalpd7/BashBlaze-7-Days-of-Bash-Scripting-Challenge</title>
    <updated>2023-08-03T01:44:24Z</updated>
    <id>tag:github.com,2023-08-03:/prajwalpd7/BashBlaze-7-Days-of-Bash-Scripting-Challenge</id>
    <link href="https://github.com/prajwalpd7/BashBlaze-7-Days-of-Bash-Scripting-Challenge" rel="alternate"></link>
    <summary type="html">&lt;p&gt;In this repository, the DevOps community can take on a thrilling and distinctive challenge. In just seven days, participants will undertake a journey to become experts in Bash scripting. with each day&#39;s assignment becoming progressively more complex.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BashBlaze: 7 Days of Bash Scripting Challenge&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Learn X in Y days Where X=bash&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img src=&#34;https://github.com/prajwalpd7/BashBlaze-7-Days-of-Bash-Scripting-Challenge/assets/71492927/0b952f89-187d-4d34-b174-8f918ccb5783&#34; alt=&#34;Image&#34; width=&#34;350&#34; height=&#34;350&#34;&gt; &#xA;&lt;h2&gt;About the Challenge&lt;/h2&gt; &#xA;&lt;p&gt;Welcome to the BashBlaze: 7 Days of Bash Scripting Challenge! ðŸš€ This week-long challenge is designed to introduce you to the fundamentals of Bash scripting and sharpen your skills in a fast-paced, engaging format.&lt;/p&gt; &#xA;&lt;p&gt;Whether you&#39;re a beginner or an experienced developer looking to expand your skillset, this challenge will provide you with daily scripting exercises and real-world examples to enhance your understanding and proficiency in Bash.&lt;/p&gt; &#xA;&lt;h2&gt;How It Works&lt;/h2&gt; &#xA;&lt;p&gt;Each day, for the next seven days, a new Bash scripting challenge will be posted in the &#34;Challenges&#34; folder. Your mission is to create a Bash script that accomplishes the given task. Don&#39;t worry if you&#39;re new to scripting â€“ the challenges will start with the basics and gradually increase in complexity, helping you build your expertise step by step.&lt;/p&gt; &#xA;&lt;h3&gt;How to Participate&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Fork this Repository: Start by forking this repository to your GitHub account. This will create a copy of the challenge in your own space.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the Repository: Clone the forked repository to your local machine, where you&#39;ll work on your daily scripts.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Daily Scripting Exercises: Each day, a new scripting challenge will be posted in the &#34;Challenges&#34; folder. Your task is to write a Bash script that fulfills the requirements of the challenge.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Commit and Push: Once you complete a daily challenge, commit your changes and push them to your forked repository.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Share Your Progress: Feel free to showcase your daily scripts, You can share your progress on social media using the hashtag #BashBlazeChallenge.&lt;/p&gt; &#xA;&lt;h2&gt;Benefits of Participating&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Hands-on Learning: Get hands-on experience with Bash scripting through daily challenges and real-world examples.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Skill Improvement: Enhance your Bash scripting skills and become more proficient in automating tasks and managing system configurations.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Community Interaction: Engage with fellow participants, share ideas, and learn from each other&#39;s approaches.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Portfolio Enhancement: Use your completed scripts and examples as part of your programming portfolio to showcase your abilities to potential employers.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Get Ready to Bash it Off!&lt;/h3&gt; &#xA;&lt;h3&gt;Disclaimer&lt;/h3&gt; &#xA;&lt;p&gt;The challenges and examples provided in this repository are meant for educational purposes.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>numtide/nixos-anywhere</title>
    <updated>2023-08-03T01:44:24Z</updated>
    <id>tag:github.com,2023-08-03:/numtide/nixos-anywhere</id>
    <link href="https://github.com/numtide/nixos-anywhere" rel="alternate"></link>
    <summary type="html">&lt;p&gt;install nixos everywhere via ssh&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nixos-anywhere&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Install NixOS everywhere via ssh&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/numtide/nixos-anywhere/main/docs/logo.png&#34; width=&#34;150&#34; height=&#34;150&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/numtide/nixos-anywhere/main/docs/INDEX.md&#34;&gt;Documentation Index&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;README&lt;/h2&gt; &#xA;&lt;p&gt;Setting up a new machine is time-consuming, and becomes complicated when it needs to be done remotely. If you&#39;re installing NixOS, the &lt;strong&gt;nixos-anywhere&lt;/strong&gt; (formerly known as &lt;strong&gt;nixos-remote&lt;/strong&gt;) tool allows you to pre-configure the whole process including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Disk partitioning and formatting&lt;/li&gt; &#xA; &lt;li&gt;Configuring and installing NixOS&lt;/li&gt; &#xA; &lt;li&gt;Installing additional files and software&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can then initiate an unattended installation with a single CLI command. Since &lt;strong&gt;nixos-anywhere&lt;/strong&gt; can access the new machine using SSH, it&#39;s ideal for remote installations.&lt;/p&gt; &#xA;&lt;p&gt;Once you have initiated the command, there is no need to &#39;babysit&#39; the installation. It all happens automatically.&lt;/p&gt; &#xA;&lt;p&gt;You can use the stored configuration to repeat the same installation if you need to.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;If you have machines on a mix of platforms, you&#39;ll need a common installation solution that works anywhere. &lt;strong&gt;nixos-anywhere&lt;/strong&gt; is ideal in this situation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;nixos-anywhere&lt;/strong&gt; can be used equally well for cloud servers, bare metal servers such as Hetzner, and local servers accessible via a LAN. You can create standard configurations, and use the same configuration to create identical servers anywhere.&lt;/p&gt; &#xA;&lt;p&gt;You first create Nix configurations to specify partitioning, formatting and NixOS configurations. Further options can be controlled by a flake and by run-time switches.&lt;/p&gt; &#xA;&lt;p&gt;Once the configuration has been created, a single command will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Connect to the remote server via SSH&lt;/li&gt; &#xA; &lt;li&gt;Detect whether a NixOS installer is present; if not, it will use the Linux &lt;code&gt;kexec&lt;/code&gt; tool to boot into a Nixos installer.&lt;/li&gt; &#xA; &lt;li&gt;Use the &lt;a href=&#34;https://github.com/nix-community/disko&#34;&gt;disko&lt;/a&gt; tool to partition and format the hard drive&lt;/li&gt; &#xA; &lt;li&gt;Install NixOS&lt;/li&gt; &#xA; &lt;li&gt;Optionally install any Nix packages and other software required.&lt;/li&gt; &#xA; &lt;li&gt;Optionally copy additional files to the new machine&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It&#39;s also possible to use &lt;strong&gt;nixos-anywhere&lt;/strong&gt; to simplify the installation on a machine that has no current operating system, first booting from a NixOS installer image. This feature is described in the &lt;a href=&#34;https://raw.githubusercontent.com/numtide/nixos-anywhere/main/docs/howtos.md#installing-on-a-machine-with-no-operating-system&#34;&gt;how-to guide&lt;/a&gt;. It&#39;s useful because you can pre-configure your required software and preferences, and build the new machine with a single command.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important Note:&lt;/strong&gt; Never use a production server as the target. It will be completely overwritten and all data lost. This tool should only be used for commissioning a new computer or repurposing an old machine once all important data has been migrated.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Source Machine:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Can be any machine&amp;nbsp;with Nix installed, e.g. a NixOS machine.&lt;/li&gt; &#xA;   &lt;li&gt;Should be able to build nix derivations for the target platform. Otherwise &lt;code&gt;--build-on-remote&lt;/code&gt; can be used.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Target Machine:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Unless you&#39;re using the option to boot from a NixOS installer image, or providing your own &lt;code&gt;kexec&lt;/code&gt; image, it must be running x86-64 Linux with kexec support. Most &lt;code&gt;x86_64&lt;/code&gt; Linux systems do have kexec support. By providing your own &lt;a href=&#34;https://raw.githubusercontent.com/numtide/nixos-anywhere/main/docs/howtos.md#using-your-own-kexec-image&#34;&gt;image&lt;/a&gt; you can also perform kexec for other architectures eg aarch64&lt;/li&gt; &#xA;   &lt;li&gt;Must have at least 1.5 GB of RAM, excluding swap.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use nixos-anywhere&lt;/h2&gt; &#xA;&lt;p&gt;Hereâ€™s &amp;nbsp;a quick summary of how to use &lt;strong&gt;nixos-anywhere&lt;/strong&gt;. You can find more information in the &lt;a href=&#34;https://raw.githubusercontent.com/numtide/nixos-anywhere/main/docs&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The tool doesn&#39;t need to be installed, since it can be run directly from this repository.&lt;/p&gt; &#xA;&lt;p&gt;First create a repo that includes the disk configuration and a &lt;a href=&#34;https://nixos.wiki/wiki/Flakes&#34;&gt;flake&lt;/a&gt; to configure your options. This example assumes that flakes have been enabled on your source machine.&lt;/p&gt; &#xA;&lt;p&gt;Hereâ€™s an example of a simple disk configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;{ disks ? [ &#34;/dev/vda&#34; ], ... }:&#xA;{&#xA;  disk = {&#xA;    main = {&#xA;      type = &#34;disk&#34;;&#xA;      device = builtins.elemAt disks 0;&#xA;      content = {&#xA;        type = &#34;table&#34;;&#xA;        format = &#34;gpt&#34;;&#xA;        partitions = [&#xA;          {&#xA;            name = &#34;boot&#34;;&#xA;            start = &#34;0&#34;;&#xA;            end = &#34;1M&#34;;&#xA;            flags = [ &#34;bios_grub&#34; ];&#xA;          }&#xA;          {&#xA;            name = &#34;ESP&#34;;&#xA;            start = &#34;1M&#34;;&#xA;            end = &#34;512M&#34;;&#xA;            bootable = true;&#xA;            content = {&#xA;              type = &#34;filesystem&#34;;&#xA;              format = &#34;vfat&#34;;&#xA;              mountpoint = &#34;/boot&#34;;&#xA;            };&#xA;          }&#xA;          {&#xA;            name = &#34;root&#34;;&#xA;            start = &#34;512M&#34;;&#xA;            end = &#34;100%&#34;;&#xA;            content = {&#xA;              type = &#34;filesystem&#34;;&#xA;              format = &#34;ext4&#34;;&#xA;              mountpoint = &#34;/&#34;;&#xA;            };&#xA;          }&#xA;        ];&#xA;      };&#xA;    };&#xA;  };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/nix-community/disko/tree/master/example&#34;&gt;disko repository&lt;/a&gt; has several examples of disk configurations. You can adapt them to our own needs.&lt;/p&gt; &#xA;&lt;p&gt;A simple flake may look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;{&#xA;  inputs.nixpkgs.url = github:NixOS/nixpkgs;&#xA;  inputs.disko.url = github:nix-community/disko;&#xA;  inputs.disko.inputs.nixpkgs.follows = &#34;nixpkgs&#34;;&#xA;  outputs = { self, nixpkgs, disko, ... }@attrs: {&#xA;    #-----------------------------------------------------------&#xA;    # The following line names the configuration as hetzner-cloud&#xA;    # This name will be referenced when nixos-remote is run&#xA;    #-----------------------------------------------------------&#xA;    nixosConfigurations.hetzner-cloud = nixpkgs.lib.nixosSystem {&#xA;      system = &#34;x86_64-linux&#34;;&#xA;      specialArgs = attrs;&#xA;      modules = [&#xA;        ({modulesPath, ... }: {&#xA;          imports = [&#xA;            (modulesPath + &#34;/installer/scan/not-detected.nix&#34;)&#xA;            (modulesPath + &#34;/profiles/qemu-guest.nix&#34;)&#xA;            disko.nixosModules.disko&#xA;          ];&#xA;          disko.devices = import ./disk-config.nix {&#xA;            lib = nixpkgs.lib;&#xA;          };&#xA;          boot.loader.grub = {&#xA;            devices = [ &#34;/dev/sda&#34; ];&#xA;            efiSupport = true;&#xA;            efiInstallAsRemovable = true;&#xA;          };&#xA;          services.openssh.enable = true;&#xA;          #-------------------------------------------------------&#xA;          # Change the line below replacing &amp;lt;insert your key here&amp;gt;&#xA;          # with your own ssh public key&#xA;          #-------------------------------------------------------&#xA;          users.users.root.openssh.authorizedKeys.keys = [ &#34;&amp;lt;insert your key here&amp;gt;&#34; ];&#xA;        })&#xA;      ];&#xA;    };&#xA;  };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once youâ€™ve created the disk configuration and the flake, you can run the tool with a single nix command, which may look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix run github:numtide/nixos-anywhere -- --flake .#hetzner-cloud root@135.181.254.201&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that this command references the URL of your flake, in this case &lt;code&gt;.#&lt;/code&gt;, together with the name of the system &lt;code&gt;hetzner-cloud&lt;/code&gt;, as highlighted by the comment in the sample flake.&lt;/p&gt; &#xA;&lt;p&gt;This will configure and build the new NixOS server. Since the configurations are defined in the flake, it will not create &lt;code&gt;/etc/nixos/configuration.nix&lt;/code&gt;. If you need to make changes to the configuration in future, you should make the changes in the flake, and rebuild using the --flake option as shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nixos-rebuild --flake &amp;lt;flake URL&amp;gt; switch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/numtide/nixos-anywhere/main/docs/quickstart.md&#34;&gt;Quickstart Guide&lt;/a&gt; gives more information on how to run &lt;strong&gt;nixos-anywhere&lt;/strong&gt; in its simplest form. For more specific instructions to suit individual requirements, see the &lt;a href=&#34;https://raw.githubusercontent.com/numtide/nixos-anywhere/main/docs/howtos.md&#34;&gt;How To Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Further Reading&lt;/h1&gt; &#xA;&lt;p&gt;@tfc has written a walkthrough on how use &lt;strong&gt;nixos-anywhere&lt;/strong&gt; to bootstrap hetzner cloud servers as well as dedicated machines on his &lt;a href=&#34;https://galowicz.de/2023/04/05/single-command-server-bootstrap/&#34;&gt;blog&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;h2&gt;Related Tools&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;nixos-anywhere&lt;/strong&gt; makes use of the &lt;a href=&#34;https://github.com/nix-community/disko&#34;&gt;disko&lt;/a&gt; tool to handle the partitioning and formatting of the disks.&lt;/p&gt; &#xA;&lt;h2&gt;Licensing and Contribution details&lt;/h2&gt; &#xA;&lt;p&gt;This software is provided free under the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT Licence&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;This project is supported by &lt;a href=&#34;https://numtide.com/&#34;&gt;Numtide&lt;/a&gt;. &amp;nbsp;&lt;img src=&#34;https://codahosted.io/docs/6FCIMTRM0p/blobs/bl-sgSunaXYWX/077f3f9d7d76d6a228a937afa0658292584dedb5b852a8ca370b6c61dabb7872b7f617e603f1793928dc5410c74b3e77af21a89e435fa71a681a868d21fd1f599dd10a647dd855e14043979f1df7956f67c3260c0442e24b34662307204b83ea34de929d&#34; alt=&#34;Untitledpng&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We are a team of independent freelancers that love open source. &amp;nbsp;We help our customers make their project lifecycles more efficient by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Providing and supporting useful tools such as this one&lt;/li&gt; &#xA; &lt;li&gt;Building and deploying infrastructure, and offering dedicated DevOps support&lt;/li&gt; &#xA; &lt;li&gt;Building their in-house Nix skills, and integrating Nix with their workflows&lt;/li&gt; &#xA; &lt;li&gt;Developing additional features and tools&lt;/li&gt; &#xA; &lt;li&gt;Carrying out custom research and development.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://numtide.com/contact&#34;&gt;Contact us&lt;/a&gt; if you have a project in mind, or if you need help with any of our supported tools, including this one. We&#39;d love to&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Nuzair46/SpotX-Mac</title>
    <updated>2023-08-03T01:44:24Z</updated>
    <id>tag:github.com,2023-08-03:/Nuzair46/SpotX-Mac</id>
    <link href="https://github.com/Nuzair46/SpotX-Mac" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Spotify Ad blocker based on SpotX for MacOS&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/SpotX-CLI/SpotX-Mac&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SpotX-CLI/SpotX-commons/main/.github/Pic/Logo/logo-mac.png&#34;&gt; &lt;/a&gt;&lt;/p&gt;&#xA;&lt;a href=&#34;https://github.com/SpotX-CLI/SpotX-Mac&#34;&gt; &lt;/a&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/SpotX-CLI/SpotX-Mac&#34;&gt; &lt;/a&gt;&lt;a href=&#34;https://discord.gg/eYudMwgYtY&#34;&gt;&lt;img src=&#34;https://discord.com/api/guilds/807273906872123412/widget.png&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;center&gt; &#xA; &lt;h4 align=&#34;center&#34;&gt;A multi-featured adblocker for the Spotify macOS application.&lt;/h4&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;strong&gt;Last updated:&lt;/strong&gt; 20 January 2023&lt;br&gt; &lt;strong&gt;Last tested version:&lt;/strong&gt; 1.2.3.1115 &lt;/p&gt; &#xA;&lt;/center&gt; &#xA;&lt;h2&gt;We need collaborators.&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We are running short of people who can collaborate and maintain this project. If you are good with bash scripting, please create an issue here or contact Red.#1111 in discord.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Features:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Blocks all banner/video/audio ads within the app&lt;/li&gt; &#xA; &lt;li&gt;Blocks logging (Sentry, etc)&lt;/li&gt; &#xA; &lt;li&gt;Unlocks the skip function for any track&lt;/li&gt; &#xA; &lt;li&gt;Blocks Spotify automatic updates (optional)&lt;/li&gt; &#xA; &lt;li&gt;Enables &lt;a href=&#34;https://github.com/SpotX-CLI/SpotX-Win/discussions/50&#34;&gt;experimental features&lt;/a&gt; (optional)&lt;/li&gt; &#xA; &lt;li&gt;Hides podcasts, episodes and audiobooks on Home Screen (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation/Update:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Close Spotify completely.&lt;/li&gt; &#xA; &lt;li&gt;Run The following command in Terminal:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash &amp;lt;(curl -sSL https://raw.githubusercontent.com/SpotX-CLI/SpotX-Mac/main/install.sh)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Optional Install Arguments:&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;-c&lt;/code&gt; Clear app cache -- use if UI-related patches aren&#39;t working&lt;br&gt; &lt;code&gt;-e&lt;/code&gt; Experimental features -- enables experimental features&lt;br&gt; &lt;code&gt;-E&lt;/code&gt; Exclude feature -- disables specified feature(s) [currently disabled]&lt;br&gt; &lt;code&gt;-f&lt;/code&gt; Force patch -- forces re-patching if backup detected&lt;br&gt; &lt;code&gt;-h&lt;/code&gt; Hide podcasts, episodes and audiobooks on home screen&lt;br&gt; &lt;code&gt;-o&lt;/code&gt; Old UI -- skips forced &#39;new UI&#39; patch&lt;br&gt; &lt;code&gt;-p&lt;/code&gt; Premium subscription setup -- use if premium subscriber&lt;br&gt; &lt;code&gt;-P&lt;/code&gt; Path to Spotify.app -- set custom Spotify app path&lt;br&gt; &lt;code&gt;-u&lt;/code&gt; Update block -- blocks automatic updates&lt;/p&gt; &#xA;&lt;p&gt;Use any combination of flags.&lt;br&gt; The following example clears app cache, adds experimental features, leaves new UI enabled and blocks updates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash &amp;lt;(curl -sSL https://raw.githubusercontent.com/SpotX-CLI/SpotX-Mac/main/install.sh) -ceu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Uninstall:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Close Spotify completely.&lt;/li&gt; &#xA; &lt;li&gt;Run The following command in Terminal:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash &amp;lt;(curl -sSL https://raw.githubusercontent.com/SpotX-CLI/SpotX-Mac/main/uninstall.sh)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Reinstall Spotify&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Notes:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Audio/video ads during Podcast playback are currently NOT blocked with SpotX.&lt;/li&gt; &#xA; &lt;li&gt;Spicetify users: When using SpotX-Mac + Spicetify, the current script requires running SpotX first.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;DISCLAIMER&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ad blocking is the main concern of this repo. Any other feature provided by SpotX-Mac or consequence of using those features will be the sole responsibility of the user, not BlockTheSpot/SpotX/SpotX-CLI/SpotX-Mac.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Credits&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/amd64fox/spotx&#34;&gt;SpotX - amd64fox&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/jetfir3&#34;&gt;@jetfir3&lt;/a&gt; for the extended contribution&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>