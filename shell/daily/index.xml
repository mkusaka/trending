<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-07T01:44:56Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>termux/proot-distro</title>
    <updated>2023-08-07T01:44:56Z</updated>
    <id>tag:github.com,2023-08-07:/termux/proot-distro</id>
    <link href="https://github.com/termux/proot-distro" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An utility for managing installations of the Linux distributions in Termux.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PRoot Distro&lt;/h1&gt; &#xA;&lt;p&gt;A Bash script wrapper for utility &lt;a href=&#34;https://github.com/termux/proot&#34;&gt;proot&lt;/a&gt; for easy management of chroot-based Linux distribution installations. It does not require root or any special ROM, kernel, etc. Everything you need to get started is the latest version of &lt;a href=&#34;https://termux.com&#34;&gt;Termux&lt;/a&gt; application. See &lt;a href=&#34;https://raw.githubusercontent.com/termux/proot-distro/master/#installing&#34;&gt;Installing&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;PRoot Distro is not a virtual machine, neither a traditional chroot. It shares the same kernel as your Android system, so do not even try to update it through package manager - this will not work.&lt;/p&gt; &#xA;&lt;p&gt;This script should never be run as root user. If you do so, file permissions and SELinux labels could get messed up. There also possibility of damaging system if being executed as root. For safety, PRoot Distro checks the user id before run and refuses to work if detected user id &lt;code&gt;0&lt;/code&gt; (root).&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Supported distributions&lt;/h2&gt; &#xA;&lt;p&gt;PRoot Distro provides support only one version of distribution types, i.e. one of stable, LTS or rolling-release. Support of versioned distributions ended with branch 2.x. If you need a custom version, you will need to add it on your own. See &lt;a href=&#34;https://raw.githubusercontent.com/termux/proot-distro/master/#adding-distribution&#34;&gt;Adding distribution&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here are the supported distributions (alias: name):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;alpine&lt;/code&gt;: Alpine Linux (edge)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;archlinux&lt;/code&gt;: Arch Linux ARM&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;debian&lt;/code&gt;: Debian (stable)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fedora&lt;/code&gt;: Fedora 37 (AArch64 only)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;manjaro-aarch64&lt;/code&gt;: Manjaro AArch64&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;opensuse&lt;/code&gt;: OpenSUSE (Tumbleweed)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pardus&lt;/code&gt;: Pardus (yirmibir)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ubuntu&lt;/code&gt;: Ubuntu (22.04)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;void&lt;/code&gt;: Void Linux&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All systems come in a bare-minimum variant, typically consisting of package manager, shell, coreutils, util-linux and few more. Extended functionality like shell completion or package install suggestions should be configured manually.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;With package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg install proot-distro&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With git:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg install git&#xA;git clone https://github.com/termux/proot-distro&#xA;cd proot-distro&#xA;./install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Dependencies: bash, bzip2, coreutils, curl, findutils, gzip, ncurses-utils, proot, sed, tar, xz-utils&lt;/p&gt; &#xA;&lt;h2&gt;Functionality overview&lt;/h2&gt; &#xA;&lt;p&gt;PRoot Distro aims to provide all-in-one functionality for managing the installed distributions: installation, de-installation, backup, restore, login. Each action is defined through command. Each command accepts its unique set of options, specific to the task that it performs.&lt;/p&gt; &#xA;&lt;p&gt;Usage basics:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;proot-distro &amp;lt;command&amp;gt; &amp;lt;arguments&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt; is a proot-distro action command (see below to learn what is available) and &lt;code&gt;&amp;lt;arguments&amp;gt;&lt;/code&gt; is a list of options specific to given command.&lt;/p&gt; &#xA;&lt;p&gt;Example of installing the distribution:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;proot-distro install debian&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Known distributions are defined through plug-in scripts, which define URLs from where root file system archive will be downloaded and set of checksums for integrity check. Plug-ins also can define a set of commands which would be executed during distribution installation.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/termux/proot-distro/master/#adding-distribution&#34;&gt;Adding distribution&lt;/a&gt; to learn more how to add own distribution to PRoot Distro.&lt;/p&gt; &#xA;&lt;h3&gt;Accessing built-in help&lt;/h3&gt; &#xA;&lt;p&gt;Command: &lt;code&gt;help&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This command will show the help information about &lt;code&gt;proot-distro&lt;/code&gt; usage.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;proot-distro help&lt;/code&gt; - main page.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;proot-distro &amp;lt;command&amp;gt; --help&lt;/code&gt; - view help for specific command.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Backing up distribution&lt;/h3&gt; &#xA;&lt;p&gt;Command: &lt;code&gt;backup&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Backup specified distribution and its plug-in into tar archive. The contents of backup can be either printed to stdout for further processing or written to a file.&lt;/p&gt; &#xA;&lt;p&gt;Compression is determined according to file extension, e.g.&lt;code&gt;.tar.gz&lt;/code&gt; will lead to GZip compression and &lt;code&gt;.tar.xz&lt;/code&gt; will lead to XZ. Piped backup data is always not compressed giving user freedom for further processing.&lt;/p&gt; &#xA;&lt;p&gt;Usage example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;proot-distro backup debian | xz | ssh example.com &#39;cat &amp;gt; /backups/pd-debian-backup.tar.xz&#39;&#xA;proot-distro backup --output backup.tar.gz debian&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;This command is generic. All additional processing like encryption should be done by user through external commands.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Installing a distribution&lt;/h3&gt; &#xA;&lt;p&gt;Command: &lt;code&gt;install&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Install a distribution specified by alias - a short name referring to the plug-in of chosen distribution.&lt;/p&gt; &#xA;&lt;p&gt;Usage example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;proot-distro install alpine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default the installed distribution will have same alias as specified on command line. This means you will be unable to install multiple copies at same time. You can rename distribution during installation time by using option &lt;code&gt;--override-alias&lt;/code&gt; which will create a copy of distribution plug-in.&lt;/p&gt; &#xA;&lt;p&gt;Usage example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;proot-distro install --override-alias alpine-test alpine&#xA;proot-distro login alpine-test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Copied plug-in has following name format &lt;code&gt;&amp;lt;name&amp;gt;.override.sh&lt;/code&gt; and is stored in directory with others (&lt;code&gt;$PREFIX/etc/proot-distro&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Listing distributions&lt;/h3&gt; &#xA;&lt;p&gt;Command: &lt;code&gt;list&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Shows a list of available distributions, their aliases, installation status and comments.&lt;/p&gt; &#xA;&lt;h3&gt;Start shell session&lt;/h3&gt; &#xA;&lt;p&gt;Command: &lt;code&gt;login&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Execute a shell within the given distribution. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;proot-distro login debian&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Execute a shell as specified user in the given distribution:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;proot-distro login --user admin debian&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can run a custom command as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;proot-distro login debian -- /usr/local/bin/mycommand --sample-option1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Argument &lt;code&gt;--&lt;/code&gt; acts as terminator of &lt;code&gt;proot-distro login&lt;/code&gt; options processing. All arguments behind it would not be treated as options of PRoot Distro.&lt;/p&gt; &#xA;&lt;p&gt;Login command supports these behavior modifying options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--user &amp;lt;username&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Use a custom login user instead of default &lt;code&gt;root&lt;/code&gt;. You need to create the user via &lt;code&gt;useradd -U -m username&lt;/code&gt; before using this option.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--fix-low-ports&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Force redirect low networking ports to a high number (2000 + port). Use this with software requiring low ports which are not possible without real root permissions.&lt;/p&gt; &lt;p&gt;For example this option will redirect port 80 to something like 2080.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--isolated&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Do not mount host volumes inside chroot environment. If this option was given, following mount points will not be accessible inside chroot:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;/apex (only Android 10+)&lt;/li&gt; &#xA;   &lt;li&gt;/data/dalvik-cache&lt;/li&gt; &#xA;   &lt;li&gt;/data/data/com.termux&lt;/li&gt; &#xA;   &lt;li&gt;/sdcard&lt;/li&gt; &#xA;   &lt;li&gt;/storage&lt;/li&gt; &#xA;   &lt;li&gt;/system&lt;/li&gt; &#xA;   &lt;li&gt;/vendor&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;You will not be able to use Termux utilities inside chroot environment.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--termux-home&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Mount Termux home directory as user home inside chroot environment.&lt;/p&gt; &lt;p&gt;This option takes priority over option &lt;code&gt;--isolated&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--shared-tmp&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Share Termux temporary directory with chroot environment. Takes priority over option &lt;code&gt;--isolated&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--bind path:path&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Create a custom file system path binding. Option expects argument in the given format:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&amp;lt;host path&amp;gt;:&amp;lt;chroot path&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Takes priority over option &lt;code&gt;--isolated&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--no-link2symlink&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Disable PRoot link2symlink extension. This will disable hard link emulation. You can use this option only if SELinux is disabled or is in permissive mode.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--no-sysvipc&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Disable PRoot System V IPC emulation. Try this option if you experience crashes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--no-kill-on-exit&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Do not kill processes when shell session terminates. Typically will cause session to hang if you have any background processes running.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Uninstall distribution&lt;/h3&gt; &#xA;&lt;p&gt;Command: &lt;code&gt;remove&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This command completely deletes the installation of given system. Be careful as it does not ask for confirmation. Deleted data is irrecoverably lost.&lt;/p&gt; &#xA;&lt;p&gt;Usage example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;proot-distro remove debian&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rename distribution&lt;/h3&gt; &#xA;&lt;p&gt;Command: &lt;code&gt;rename&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Rename the distribution by changing the alias name, renaming its plug-in and root file system directory. In case when default distribution is being renamed, a copy of plug-in will be created.&lt;/p&gt; &#xA;&lt;p&gt;Usage example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;proot-distro rename ubuntu ubuntu-test01&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Only installed distribution can be renamed.&lt;/p&gt; &#xA;&lt;h3&gt;Reinstall distribution&lt;/h3&gt; &#xA;&lt;p&gt;Command: &lt;code&gt;reset&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Delete the specified distribution and install it again. This is a shortcut for&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;proot-distro remove &amp;lt;dist&amp;gt; &amp;amp;&amp;amp; proot-distro install &amp;lt;dist&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Usage example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;proot-distro reset debian&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Same as with command &lt;code&gt;remove&lt;/code&gt;, deleted data is lost irrecoverably. Be careful.&lt;/p&gt; &#xA;&lt;h3&gt;Restore from backup&lt;/h3&gt; &#xA;&lt;p&gt;Command: &lt;code&gt;restore&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Restore the distribution from the given proot-distro backup (tar archive).&lt;/p&gt; &#xA;&lt;p&gt;Restore operation performs a complete rollback to the backup state as was in archive. Be careful as this command deletes previous data irrecoverably.&lt;/p&gt; &#xA;&lt;p&gt;Compression is determined automatically from file extension. Piped data must be always uncompressed before being supplied to &lt;code&gt;proot-distro&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Usage example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ssh example.com &#39;cat /backups/pd-debian-backup.tar.xz&#39; | xz -d | proot-distro restore&#xA;proot-distro restore ./pd-debian-backup.tar.xz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Clear downloads cache&lt;/h3&gt; &#xA;&lt;p&gt;Command: &lt;code&gt;clear-cache&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will remove all cached root file system archives.&lt;/p&gt; &#xA;&lt;h2&gt;Adding distribution&lt;/h2&gt; &#xA;&lt;p&gt;Distribution is defined through the plug-in script that contains variables with metadata. A minimal one would look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-.bash&#34;&gt;DISTRO_NAME=&#34;Debian&#34;&#xA;TARBALL_URL[&#39;aarch64&#39;]=&#34;https://github.com/termux/proot-distro/releases/download/v1.10.1/debian-aarch64-pd-v1.10.1.tar.xz&#34;&#xA;TARBALL_SHA256[&#39;aarch64&#39;]=&#34;f34802fbb300b4d088a638c638683fd2bfc1c03f4b40fa4cb7d2113231401a21&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Script is stored in directory &lt;code&gt;$PREFIX/etc/proot-distro&lt;/code&gt; and should be named like &lt;code&gt;&amp;lt;alias&amp;gt;.sh&lt;/code&gt;, where &lt;code&gt;&amp;lt;alias&amp;gt;&lt;/code&gt; is a desired name for referencing the distribution. For example, Debian plug-in will typically be named &lt;code&gt;debian.sh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Plug-in variables reference&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;DISTRO_ARCH&lt;/code&gt;: specifies which CPU architecture variant of distribution to install.&lt;/p&gt; &#xA;&lt;p&gt;Normally this variable is determined automatically, and you should not set it. Typical use case is to set a custom architecture to run the distribution under QEMU emulator (user mode).&lt;/p&gt; &#xA;&lt;p&gt;Supported architectures are: &lt;code&gt;aarch64&lt;/code&gt;, &lt;code&gt;arm&lt;/code&gt;, &lt;code&gt;i686&lt;/code&gt;, &lt;code&gt;x86_64&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;DISTRO_NAME&lt;/code&gt;: a name of distribution, something like &#34;Alpine Linux (3.14.1)&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;DISTRO_COMMENT&lt;/code&gt;: comments for current distribution.&lt;/p&gt; &#xA;&lt;p&gt;Normally this variable is not needed. Use it to notify user that something is not working or additional steps required to get started with this distribution.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;TARBALL_STRIP_OPT&lt;/code&gt;: how many leading path components should be stripped when extracting rootfs archive. The default value is 1 because all default rootfs tarballs store contents in a subdirectory.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;TARBALL_URL&lt;/code&gt;: a Bash associative array of root file system tarballs URLs.&lt;/p&gt; &#xA;&lt;p&gt;Should be defined at least for your CPU architecture. Valid architecture names are same as for &lt;code&gt;DISTRO_ARCH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;TARBALL_SHA256&lt;/code&gt;: a Bash associative array of SHA-256 checksums for each rootfs variant.&lt;/p&gt; &#xA;&lt;p&gt;Must be defined for each tarball set in &lt;code&gt;TARBALL_URL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Running additional installation steps&lt;/h3&gt; &#xA;&lt;p&gt;Plug-in can be configured to execute specified commands after installing the distribution. This is done through function &lt;code&gt;distro_setup&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-.bash&#34;&gt;distro_setup() {&#xA;&#x9;run_proot_cmd apt update&#xA;&#x9;run_proot_cmd apt upgrade -yq&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;run_proot_cmd&lt;/code&gt; is used when command should be executed inside the rootfs.&lt;/p&gt; &#xA;&lt;h2&gt;Differences from Chroot&lt;/h2&gt; &#xA;&lt;p&gt;While PRoot is often referred as user space chroot implementation, it is much different from it both by implementation and features of work. Here is a list of most significant differences you should be aware of.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;PRoot is slow.&lt;/p&gt; &lt;p&gt;Every process is hooked through &lt;code&gt;ptrace()&lt;/code&gt;, so PRoot can hijack the system call arguments and return values. This is typically used to translate file paths so traced program will see the different file system layout.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;PRoot cannot detach from the running process.&lt;/p&gt; &lt;p&gt;Since PRoot controls the running processes via &lt;code&gt;ptrace()&lt;/code&gt; it cannot detach from them. This means you can&#39;t start a daemon process (e.g. sshd) and close PRoot session. You will have to either kill process, wait until it finish or let proot kill it immediately on session close.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;PRoot does not elevate privileges.&lt;/p&gt; &lt;p&gt;Chroot also does not elevate privileges on its own. Just PRoot is configured to hijack user id as well, i.e. make it appear as &lt;code&gt;root&lt;/code&gt;. So in reality your user name, id and privileges remain to be same as without PRoot but programs that do sanity check for current user will assume you are running as root user.&lt;/p&gt; &lt;p&gt;Particularly, the fake root user makes it possible to use package manager in chroot environment.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Forking&lt;/h2&gt; &#xA;&lt;p&gt;If you wish to use PRoot Distro or its part as a base for your own project, plase make sure you comply with GNU GPL v3.0 license.&lt;/p&gt;</summary>
  </entry>
</feed>