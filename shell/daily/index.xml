<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-07T01:53:47Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cxf-boluo/magisk_All</title>
    <updated>2022-07-07T01:53:47Z</updated>
    <id>tag:github.com,2022-07-07:/cxf-boluo/magisk_All</id>
    <link href="https://github.com/cxf-boluo/magisk_All" rel="alternate"></link>
    <summary type="html">&lt;p&gt;magisk 一键集成环境，再也不用每次刷完机繁琐的配置环境了！&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;magisk_All&lt;/h1&gt; &#xA;&lt;p&gt;一键集成环境，再也不用每次刷完机繁琐的配置环境了！ 这是一个magisk模块刷入即可!&lt;/p&gt; &#xA;&lt;h2&gt;介绍&lt;/h2&gt; &#xA;&lt;p&gt;magisk_All 是一款 magisk 一键集成环境，可以轻松帮我们部署好基本的逆向工程环境。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GitHub：&lt;a href=&#34;https://github.com/cxf-boluo/magisk_All&#34;&gt;https://github.com/cxf-boluo/magisk_All&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;集成工具：MT管理器、Igniter、启用webView调试、HTTPCanary、proxydroid、SSLping&lt;/p&gt; &#xA;&lt;p&gt;集成模块：lsposed、Shamiko&lt;/p&gt; &#xA;&lt;p&gt;开机自启动：frida-server android-server&lt;/p&gt; &#xA;&lt;p&gt;默认抓包证书从用户证书存储移动到系统目录下&lt;/p&gt; &#xA;&lt;h2&gt;视频演示&lt;/h2&gt; &#xA;&lt;p&gt;地址：&lt;/p&gt; &#xA;&lt;h2&gt;安装教程&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;正常刷机后，我们按照最新版的Magisk安装说明安装Magisk； Magisk安装可以直接看公众号文章：&lt;a href=&#34;https://mp.weixin.qq.com/s/3BrZslKgtWPHostw7kA8eg&#34;&gt;https://mp.weixin.qq.com/s/3BrZslKgtWPHostw7kA8eg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Releases 中下载magisk_All，导入手机；&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;adb push magisk_All.zip /sdcard/download&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;按照Magisk安装模块步骤安装magisk_All即可，正常重启；&lt;/li&gt; &#xA; &lt;li&gt;Magisk中找到&lt;code&gt;设置—Zygisk&lt;/code&gt;打开，同时打开遵守排除列表，重启后再关闭遵守排除列表即可。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;联系我&lt;/h2&gt; &#xA;&lt;p&gt;在使用过程中有任何问题，可以通过公众号、微信等联系&lt;/p&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/86091961/177456748-24add050-1774-4e49-8cdf-e20fe81fe6f9.png&#34; width=&#34;80%&#34;&gt; &#xA;&lt;h2&gt;Licenses&lt;/h2&gt; &#xA;&lt;p&gt;本工具禁止进行未授权商业用途，禁止二次开发后进行未授权商业用途。&lt;/p&gt; &#xA;&lt;p&gt;本工具仅面向合法授权的企业安全建设行为，在使用本工具进行检测时，您应确保该行为符合当地的法律法规，并且已经取得了足够的授权。&lt;/p&gt; &#xA;&lt;p&gt;如您在使用本工具的过程中存在任何非法行为，您需自行承担相应后果，我们将不承担任何法律及连带责任。&lt;/p&gt; &#xA;&lt;p&gt;在使用本工具前，请您务必审慎阅读、充分理解各条款内容，限制、免责条款或者其他涉及您重大权益的条款可能会以加粗、加下划线等形式提示您重点注意。&lt;/p&gt; &#xA;&lt;p&gt;除非您已充分阅读、完全理解并接受本协议所有条款，否则，请您不要使用本工具。您的使用行为或者您以其他任何明示或者默示方式表示接受本协议的，即视为您已阅读并同意本协议的约束。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>angristan/openvpn-install</title>
    <updated>2022-07-07T01:53:47Z</updated>
    <id>tag:github.com,2022-07-07:/angristan/openvpn-install</id>
    <link href="https://github.com/angristan/openvpn-install" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Set up your own OpenVPN server on Debian, Ubuntu, Fedora, CentOS or Arch Linux.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;openvpn-install&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/angristan/openvpn-install/workflows/Test/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt; &lt;img src=&#34;https://github.com/angristan/openvpn-install/workflows/Lint/badge.svg?sanitize=true&#34; alt=&#34;Lint&#34;&gt; &lt;img src=&#34;https://visitor-badge.glitch.me/badge?page_id=angristan.openvpn-install&#34; alt=&#34;visitors&#34;&gt; &lt;a href=&#34;https://saythanks.io/to/angristan&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg?sanitize=true&#34; alt=&#34;Say Thanks!&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenVPN installer for Debian, Ubuntu, Fedora, CentOS, Arch Linux, Oracle Linux, Rocky Linux and AlmaLinux.&lt;/p&gt; &#xA;&lt;p&gt;This script will let you setup your own secure VPN server in just a few seconds.&lt;/p&gt; &#xA;&lt;p&gt;You can also check out &lt;a href=&#34;https://github.com/angristan/wireguard-install&#34;&gt;wireguard-install&lt;/a&gt;, a simple installer for a simpler, safer, faster and more modern VPN protocol.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;First, get the script and make it executable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -O https://raw.githubusercontent.com/angristan/openvpn-install/master/openvpn-install.sh&#xA;chmod +x openvpn-install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./openvpn-install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You need to run the script as root and have the TUN module enabled.&lt;/p&gt; &#xA;&lt;p&gt;The first time you run it, you&#39;ll have to follow the assistant and answer a few questions to setup your VPN server.&lt;/p&gt; &#xA;&lt;p&gt;When OpenVPN is installed, you can run the script again, and you will get the choice to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add a client&lt;/li&gt; &#xA; &lt;li&gt;Remove a client&lt;/li&gt; &#xA; &lt;li&gt;Uninstall OpenVPN&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In your home directory, you will have &lt;code&gt;.ovpn&lt;/code&gt; files. These are the client configuration files. Download them from your server and connect using your favorite OpenVPN client.&lt;/p&gt; &#xA;&lt;p&gt;If you have any question, head to the &lt;a href=&#34;https://raw.githubusercontent.com/angristan/openvpn-install/master/#faq&#34;&gt;FAQ&lt;/a&gt; first. Please read everything before opening an issue.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;PLEASE do not send me emails or private messages asking for help.&lt;/strong&gt; The only place to get help is the issues. Other people may be able to help and in the future, other users may also run into the same issue as you. My time is not available for free just for you, you&#39;re not special.&lt;/p&gt; &#xA;&lt;h3&gt;Headless install&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s also possible to run the script headless, e.g. without waiting for user input, in an automated manner.&lt;/p&gt; &#xA;&lt;p&gt;Example usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;AUTO_INSTALL=y ./openvpn-install.sh&#xA;&#xA;# or&#xA;&#xA;export AUTO_INSTALL=y&#xA;./openvpn-install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A default set of variables will then be set, by passing the need for user input.&lt;/p&gt; &#xA;&lt;p&gt;If you want to customise your installation, you can export them or specify them on the same line, as shown above.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;APPROVE_INSTALL=y&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;APPROVE_IP=y&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IPV6_SUPPORT=n&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PORT_CHOICE=1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PROTOCOL_CHOICE=1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DNS=1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;COMPRESSION_ENABLED=n&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CUSTOMIZE_ENC=n&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CLIENT=clientname&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PASS=1&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If the server is behind NAT, you can specify its endpoint with the &lt;code&gt;ENDPOINT&lt;/code&gt; variable. If the endpoint is the public IP address which it is behind, you can use &lt;code&gt;ENDPOINT=$(curl -4 ifconfig.co)&lt;/code&gt; (the script will default to this). The endpoint can be an IPv4 or a domain.&lt;/p&gt; &#xA;&lt;p&gt;Other variables can be set depending on your choice (encryption, compression). You can search for them in the &lt;code&gt;installQuestions()&lt;/code&gt; function of the script.&lt;/p&gt; &#xA;&lt;p&gt;Password-protected clients are not supported by the headless installation method since user input is expected by Easy-RSA.&lt;/p&gt; &#xA;&lt;p&gt;The headless install is more-or-less idempotent, in that it has been made safe to run multiple times with the same parameters, e.g. by a state provisioner like Ansible/Terraform/Salt/Chef/Puppet. It will only install and regenerate the Easy-RSA PKI if it doesn&#39;t already exist, and it will only install OpenVPN and other upstream dependencies if OpenVPN isn&#39;t already installed. It will recreate all local config and re-generate the client file on each headless run.&lt;/p&gt; &#xA;&lt;h3&gt;Headless User Addition&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s also possible to automate the addition of a new user. Here, the key is to provide the (string) value of the &lt;code&gt;MENU_OPTION&lt;/code&gt; variable along with the remaining mandatory variables before invoking the script.&lt;/p&gt; &#xA;&lt;p&gt;The following Bash script adds a new user &lt;code&gt;foo&lt;/code&gt; to an existing OpenVPN configuration&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash&#xA;export MENU_OPTION=&#34;1&#34;&#xA;export CLIENT=&#34;foo&#34;&#xA;export PASS=&#34;1&#34;&#xA;./openvpn-install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installs and configures a ready-to-use OpenVPN server&lt;/li&gt; &#xA; &lt;li&gt;Iptables rules and forwarding managed in a seamless way&lt;/li&gt; &#xA; &lt;li&gt;If needed, the script can cleanly remove OpenVPN, including configuration and iptables rules&lt;/li&gt; &#xA; &lt;li&gt;Customisable encryption settings, enhanced default settings (see &lt;a href=&#34;https://raw.githubusercontent.com/angristan/openvpn-install/master/#security-and-encryption&#34;&gt;Security and Encryption&lt;/a&gt; below)&lt;/li&gt; &#xA; &lt;li&gt;OpenVPN 2.4 features, mainly encryption improvements (see &lt;a href=&#34;https://raw.githubusercontent.com/angristan/openvpn-install/master/#security-and-encryption&#34;&gt;Security and Encryption&lt;/a&gt; below)&lt;/li&gt; &#xA; &lt;li&gt;Variety of DNS resolvers to be pushed to the clients&lt;/li&gt; &#xA; &lt;li&gt;Choice to use a self-hosted resolver with Unbound (supports already existing Unbound installations)&lt;/li&gt; &#xA; &lt;li&gt;Choice between TCP and UDP&lt;/li&gt; &#xA; &lt;li&gt;NATed IPv6 support&lt;/li&gt; &#xA; &lt;li&gt;Compression disabled by default to prevent VORACLE. LZ4 (v1/v2) and LZ0 algorithms available otherwise.&lt;/li&gt; &#xA; &lt;li&gt;Unprivileged mode: run as &lt;code&gt;nobody&lt;/code&gt;/&lt;code&gt;nogroup&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Block DNS leaks on Windows 10&lt;/li&gt; &#xA; &lt;li&gt;Randomised server certificate name&lt;/li&gt; &#xA; &lt;li&gt;Choice to protect clients with a password (private key encryption)&lt;/li&gt; &#xA; &lt;li&gt;Many other little things!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;The script supports these OS and architectures:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;i386&lt;/th&gt; &#xA;   &lt;th&gt;amd64&lt;/th&gt; &#xA;   &lt;th&gt;armhf&lt;/th&gt; &#xA;   &lt;th&gt;arm64&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Amazon Linux 2&lt;/td&gt; &#xA;   &lt;td&gt;❔&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❔&lt;/td&gt; &#xA;   &lt;td&gt;❔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Arch Linux&lt;/td&gt; &#xA;   &lt;td&gt;❔&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❔&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CentOS 7&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CentOS 8&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Debian &amp;gt;= 9&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fedora &amp;gt;= 27&lt;/td&gt; &#xA;   &lt;td&gt;❔&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❔&lt;/td&gt; &#xA;   &lt;td&gt;❔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ubuntu 16.04&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ubuntu &amp;gt;= 18.04&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Oracle Linux 8&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rocky Linux 8&lt;/td&gt; &#xA;   &lt;td&gt;❔&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❔&lt;/td&gt; &#xA;   &lt;td&gt;❔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AlmaLinux 8&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To be noted:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It should work on Debian 8+ and Ubuntu 16.04+. But versions not in the table above are not officially supported.&lt;/li&gt; &#xA; &lt;li&gt;The script requires &lt;code&gt;systemd&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The script is regularly tested against &lt;code&gt;amd64&lt;/code&gt; only.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Fork&lt;/h2&gt; &#xA;&lt;p&gt;This script is based on the great work of &lt;a href=&#34;https://github.com/Nyr/openvpn-install&#34;&gt;Nyr and its contributors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Since 2016, the two scripts have diverged and are not alike anymore, especially under the hood. The main goal of the script was enhanced security. But since then, the script has been completely rewritten and a lot a features have been added. The script is only compatible with recent distributions though, so if you need to use a very old server or client, I advise using Nyr&#39;s script.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;More Q&amp;amp;A in &lt;a href=&#34;https://raw.githubusercontent.com/angristan/openvpn-install/master/FAQ.md&#34;&gt;FAQ.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; Which provider do you recommend?&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; I recommend these:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.vultr.com/?ref=8537055-6G&#34;&gt;Vultr&lt;/a&gt;: Worldwide locations, IPv6 support, starting at $3.50/month&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hetzner.cloud/?ref=ywtlvZsjgeDq&#34;&gt;Hetzner&lt;/a&gt;: Germany, IPv6, 20 TB of traffic, starting at €3/month&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://goo.gl/qXrNLK&#34;&gt;Digital Ocean&lt;/a&gt;: Worldwide locations, IPv6 support, starting at $5/month&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://goo.gl/76yqW5&#34;&gt;PulseHeberg&lt;/a&gt;: France, unlimited bandwidth, starting at €3/month&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; Which OpenVPN client do you recommend?&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; If possible, an official OpenVPN 2.4 client.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows: &lt;a href=&#34;https://openvpn.net/index.php/download/community-downloads.html&#34;&gt;The official OpenVPN community client&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Linux: The &lt;code&gt;openvpn&lt;/code&gt; package from your distribution. There is an &lt;a href=&#34;https://community.openvpn.net/openvpn/wiki/OpenvpnSoftwareRepos&#34;&gt;official APT repository&lt;/a&gt; for Debian/Ubuntu based distributions.&lt;/li&gt; &#xA; &lt;li&gt;macOS: &lt;a href=&#34;https://tunnelblick.net/&#34;&gt;Tunnelblick&lt;/a&gt;, &lt;a href=&#34;https://www.sparklabs.com/viscosity/&#34;&gt;Viscosity&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Android: &lt;a href=&#34;https://play.google.com/store/apps/details?id=de.blinkt.openvpn&#34;&gt;OpenVPN for Android&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;iOS: &lt;a href=&#34;https://itunes.apple.com/us/app/openvpn-connect/id590379981&#34;&gt;The official OpenVPN Connect client&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; Am I safe from the NSA by using your script?&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; Please review your threat models. Even if this script has security in mind and uses state-of-the-art encryption, you shouldn&#39;t be using a VPN if you want to hide from the NSA.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; Is there an OpenVPN documentation?&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; Yes, please head to the &lt;a href=&#34;https://community.openvpn.net/openvpn/wiki/Openvpn24ManPage&#34;&gt;OpenVPN Manual&lt;/a&gt;, which references all the options.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;More Q&amp;amp;A in &lt;a href=&#34;https://raw.githubusercontent.com/angristan/openvpn-install/master/FAQ.md&#34;&gt;FAQ.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;One-stop solutions for public cloud&lt;/h2&gt; &#xA;&lt;p&gt;Solutions that provision a ready to use OpenVPN server based on this script in one go are available for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AWS using Terraform at &lt;a href=&#34;https://github.com/dumrauf/openvpn-terraform-install&#34;&gt;&lt;code&gt;openvpn-terraform-install&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Terraform AWS module &lt;a href=&#34;https://registry.terraform.io/modules/paulmarsicloud/openvpn-ephemeral/aws/latest&#34;&gt;&lt;code&gt;openvpn-ephemeral&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;h3&gt;Code formatting&lt;/h3&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://github.com/koalaman/shellcheck&#34;&gt;shellcheck&lt;/a&gt; and &lt;a href=&#34;https://github.com/mvdan/sh&#34;&gt;shfmt&lt;/a&gt; to enforce bash styling guidelines and good practices. They are executed for each commit / PR with GitHub Actions, so you can check the configuration &lt;a href=&#34;https://github.com/angristan/openvpn-install/raw/master/.github/workflows/push.yml&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security and Encryption&lt;/h2&gt; &#xA;&lt;p&gt;OpenVPN&#39;s default settings are pretty weak regarding encryption. This script aims to improve that.&lt;/p&gt; &#xA;&lt;p&gt;OpenVPN 2.4 was a great update regarding encryption. It added support for ECDSA, ECDH, AES GCM, NCP and tls-crypt.&lt;/p&gt; &#xA;&lt;p&gt;If you want more information about an option mentioned below, head to the &lt;a href=&#34;https://community.openvpn.net/openvpn/wiki/Openvpn24ManPage&#34;&gt;OpenVPN manual&lt;/a&gt;. It is very complete.&lt;/p&gt; &#xA;&lt;p&gt;Most of OpenVPN&#39;s encryption-related stuff is managed by &lt;a href=&#34;https://github.com/OpenVPN/easy-rsa&#34;&gt;Easy-RSA&lt;/a&gt;. Defaults parameters are in the &lt;a href=&#34;https://github.com/OpenVPN/easy-rsa/raw/v3.0.7/easyrsa3/vars.example&#34;&gt;vars.example&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;Compression&lt;/h3&gt; &#xA;&lt;p&gt;By default, OpenVPN doesn&#39;t enable compression. This script provides support for LZ0 and LZ4 (v1/v2) algorithms, the latter being more efficient.&lt;/p&gt; &#xA;&lt;p&gt;However, it is discouraged to use compression since the &lt;a href=&#34;https://protonvpn.com/blog/voracle-attack/&#34;&gt;VORACLE attack&lt;/a&gt; makes use of it.&lt;/p&gt; &#xA;&lt;h3&gt;TLS version&lt;/h3&gt; &#xA;&lt;p&gt;OpenVPN accepts TLS 1.0 by default, which is nearly &lt;a href=&#34;https://en.wikipedia.org/wiki/Transport_Layer_Security#TLS_1.0&#34;&gt;20 years old&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;With &lt;code&gt;tls-version-min 1.2&lt;/code&gt; we enforce TLS 1.2, which the best protocol available currently for OpenVPN.&lt;/p&gt; &#xA;&lt;p&gt;TLS 1.2 is supported since OpenVPN 2.3.3.&lt;/p&gt; &#xA;&lt;h3&gt;Certificate&lt;/h3&gt; &#xA;&lt;p&gt;OpenVPN uses an RSA certificate with a 2048 bits key by default.&lt;/p&gt; &#xA;&lt;p&gt;OpenVPN 2.4 added support for ECDSA. Elliptic curve cryptography is faster, lighter and more secure.&lt;/p&gt; &#xA;&lt;p&gt;This script provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ECDSA: &lt;code&gt;prime256v1&lt;/code&gt;/&lt;code&gt;secp384r1&lt;/code&gt;/&lt;code&gt;secp521r1&lt;/code&gt; curves&lt;/li&gt; &#xA; &lt;li&gt;RSA: &lt;code&gt;2048&lt;/code&gt;/&lt;code&gt;3072&lt;/code&gt;/&lt;code&gt;4096&lt;/code&gt; bits keys&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It defaults to ECDSA with &lt;code&gt;prime256v1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;OpenVPN uses &lt;code&gt;SHA-256&lt;/code&gt; as the signature hash by default, and so does the script. It provides no other choice as of now.&lt;/p&gt; &#xA;&lt;h3&gt;Data channel&lt;/h3&gt; &#xA;&lt;p&gt;By default, OpenVPN uses &lt;code&gt;BF-CBC&lt;/code&gt; as the data channel cipher. Blowfish is an old (1993) and weak algorithm. Even the official OpenVPN documentation admits it.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The default is BF-CBC, an abbreviation for Blowfish in Cipher Block Chaining mode.&lt;/p&gt; &#xA; &lt;p&gt;Using BF-CBC is no longer recommended, because of its 64-bit block size. This small block size allows attacks based on collisions, as demonstrated by SWEET32. See &lt;a href=&#34;https://community.openvpn.net/openvpn/wiki/SWEET32&#34;&gt;https://community.openvpn.net/openvpn/wiki/SWEET32&lt;/a&gt; for details. Security researchers at INRIA published an attack on 64-bit block ciphers, such as 3DES and Blowfish. They show that they are able to recover plaintext when the same data is sent often enough, and show how they can use cross-site scripting vulnerabilities to send data of interest often enough. This works over HTTPS, but also works for HTTP-over-OpenVPN. See &lt;a href=&#34;https://sweet32.info/&#34;&gt;https://sweet32.info/&lt;/a&gt; for a much better and more elaborate explanation.&lt;/p&gt; &#xA; &lt;p&gt;OpenVPN&#39;s default cipher, BF-CBC, is affected by this attack.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Indeed, AES is today&#39;s standard. It&#39;s the fastest and more secure cipher available today. &lt;a href=&#34;https://en.wikipedia.org/wiki/SEED&#34;&gt;SEED&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Camellia_(cipher)&#34;&gt;Camellia&lt;/a&gt; are not vulnerable to date but are slower than AES and relatively less trusted.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Of the currently supported ciphers, OpenVPN currently recommends using AES-256-CBC or AES-128-CBC. OpenVPN 2.4 and newer will also support GCM. For 2.4+, we recommend using AES-256-GCM or AES-128-GCM.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;AES-256 is 40% slower than AES-128, and there isn&#39;t any real reason to use a 256 bits key over a 128 bits key with AES. (Source: &lt;a href=&#34;http://security.stackexchange.com/questions/14068/why-most-people-use-256-bit-encryption-instead-of-128-bit&#34;&gt;1&lt;/a&gt;,&lt;a href=&#34;http://security.stackexchange.com/questions/6141/amount-of-simple-operations-that-is-safely-out-of-reach-for-all-humanity/6149#6149&#34;&gt;2&lt;/a&gt;). Moreover, AES-256 is more vulnerable to &lt;a href=&#34;https://en.wikipedia.org/wiki/Timing_attack&#34;&gt;Timing attacks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;AES-GCM is an &lt;a href=&#34;https://en.wikipedia.org/wiki/Authenticated_encryption&#34;&gt;AEAD cipher&lt;/a&gt; which means it simultaneously provides confidentiality, integrity, and authenticity assurances on the data.&lt;/p&gt; &#xA;&lt;p&gt;The script supports the following ciphers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;AES-128-GCM&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AES-192-GCM&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AES-256-GCM&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AES-128-CBC&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AES-192-CBC&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AES-256-CBC&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And defaults to &lt;code&gt;AES-128-GCM&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;OpenVPN 2.4 added a feature called &#34;NCP&#34;: &lt;em&gt;Negotiable Crypto Parameters&lt;/em&gt;. It means you can provide a cipher suite like with HTTPS. It is set to &lt;code&gt;AES-256-GCM:AES-128-GCM&lt;/code&gt; by default and overrides the &lt;code&gt;--cipher&lt;/code&gt; parameter when used with an OpenVPN 2.4 client. For the sake of simplicity, the script set both the &lt;code&gt;--cipher&lt;/code&gt; and &lt;code&gt;--ncp-cipher&lt;/code&gt; to the cipher chosen above.&lt;/p&gt; &#xA;&lt;h3&gt;Control channel&lt;/h3&gt; &#xA;&lt;p&gt;OpenVPN 2.4 will negotiate the best cipher available by default (e.g ECDHE+AES-256-GCM)&lt;/p&gt; &#xA;&lt;p&gt;The script proposes the following options, depending on the certificate:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ECDSA: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;RSA: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It defaults to &lt;code&gt;TLS-ECDHE-*-WITH-AES-128-GCM-SHA256&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Diffie-Hellman key exchange&lt;/h3&gt; &#xA;&lt;p&gt;OpenVPN uses a 2048 bits DH key by default.&lt;/p&gt; &#xA;&lt;p&gt;OpenVPN 2.4 added support for ECDH keys. Elliptic curve cryptography is faster, lighter and more secure.&lt;/p&gt; &#xA;&lt;p&gt;Also, generating a classic DH keys can take a long, looong time. ECDH keys are ephemeral: they are generated on-the-fly.&lt;/p&gt; &#xA;&lt;p&gt;The script provides the following options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ECDH: &lt;code&gt;prime256v1&lt;/code&gt;/&lt;code&gt;secp384r1&lt;/code&gt;/&lt;code&gt;secp521r1&lt;/code&gt; curves&lt;/li&gt; &#xA; &lt;li&gt;DH: &lt;code&gt;2048&lt;/code&gt;/&lt;code&gt;3072&lt;/code&gt;/&lt;code&gt;4096&lt;/code&gt; bits keys&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It defaults to &lt;code&gt;prime256v1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;HMAC digest algorithm&lt;/h3&gt; &#xA;&lt;p&gt;From the OpenVPN wiki, about &lt;code&gt;--auth&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Authenticate data channel packets and (if enabled) tls-auth control channel packets with HMAC using message digest algorithm alg. (The default is SHA1 ). HMAC is a commonly used message authentication algorithm (MAC) that uses a data string, a secure hash algorithm, and a key, to produce a digital signature.&lt;/p&gt; &#xA; &lt;p&gt;If an AEAD cipher mode (e.g. GCM) is chosen, the specified --auth algorithm is ignored for the data channel, and the authentication method of the AEAD cipher is used instead. Note that alg still specifies the digest used for tls-auth.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The script provides the following choices:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SHA256&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SHA384&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SHA512&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It defaults to &lt;code&gt;SHA256&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;tls-auth&lt;/code&gt; and &lt;code&gt;tls-crypt&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;From the OpenVPN wiki, about &lt;code&gt;tls-auth&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Add an additional layer of HMAC authentication on top of the TLS control channel to mitigate DoS attacks and attacks on the TLS stack.&lt;/p&gt; &#xA; &lt;p&gt;In a nutshell, --tls-auth enables a kind of &#34;HMAC firewall&#34; on OpenVPN&#39;s TCP/UDP port, where TLS control channel packets bearing an incorrect HMAC signature can be dropped immediately without response.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;About &lt;code&gt;tls-crypt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Encrypt and authenticate all control channel packets with the key from keyfile. (See --tls-auth for more background.)&lt;/p&gt; &#xA; &lt;p&gt;Encrypting (and authenticating) control channel packets:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;provides more privacy by hiding the certificate used for the TLS connection,&lt;/li&gt; &#xA;  &lt;li&gt;makes it harder to identify OpenVPN traffic as such,&lt;/li&gt; &#xA;  &lt;li&gt;provides &#34;poor-man&#39;s&#34; post-quantum security, against attackers who will never know the pre-shared key (i.e. no forward secrecy).&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;So both provide an additional layer of security and mitigate DoS attacks. They aren&#39;t used by default by OpenVPN.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;tls-crypt&lt;/code&gt; is an OpenVPN 2.4 feature that provides encryption in addition to authentication (unlike &lt;code&gt;tls-auth&lt;/code&gt;). It is more privacy-friendly.&lt;/p&gt; &#xA;&lt;p&gt;The script supports both and uses &lt;code&gt;tls-crypt&lt;/code&gt; by default.&lt;/p&gt; &#xA;&lt;h2&gt;Say thanks&lt;/h2&gt; &#xA;&lt;p&gt;You can &lt;a href=&#34;https://saythanks.io/to/angristan&#34;&gt;say thanks&lt;/a&gt; if you want!&lt;/p&gt; &#xA;&lt;h2&gt;Credits &amp;amp; Licence&lt;/h2&gt; &#xA;&lt;p&gt;Many thanks to the &lt;a href=&#34;https://github.com/Angristan/OpenVPN-install/graphs/contributors&#34;&gt;contributors&lt;/a&gt; and Nyr&#39;s original work.&lt;/p&gt; &#xA;&lt;p&gt;This project is under the &lt;a href=&#34;https://raw.githubusercontent.com/Angristan/openvpn-install/master/LICENSE&#34;&gt;MIT Licence&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kubernetes-sigs/nfs-subdir-external-provisioner</title>
    <updated>2022-07-07T01:53:47Z</updated>
    <id>tag:github.com,2022-07-07:/kubernetes-sigs/nfs-subdir-external-provisioner</id>
    <link href="https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dynamic sub-dir volume provisioner on a remote NFS server.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kubernetes NFS Subdir External Provisioner&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;NFS subdir external provisioner&lt;/strong&gt; is an automatic provisioner that use your &lt;em&gt;existing and already configured&lt;/em&gt; NFS server to support dynamic provisioning of Kubernetes Persistent Volumes via Persistent Volume Claims. Persistent volumes are provisioned as &lt;code&gt;${namespace}-${pvcName}-${pvName}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note: This repository is migrated from &lt;a href=&#34;https://github.com/kubernetes-incubator/external-storage/tree/master/nfs-client&#34;&gt;https://github.com/kubernetes-incubator/external-storage/tree/master/nfs-client&lt;/a&gt;. As part of the migration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The container image name and repository has changed to &lt;code&gt;k8s.gcr.io/sig-storage&lt;/code&gt; and &lt;code&gt;nfs-subdir-external-provisioner&lt;/code&gt; respectively.&lt;/li&gt; &#xA; &lt;li&gt;To maintain backward compatibility with earlier deployment files, the naming of NFS Client Provisioner is retained as &lt;code&gt;nfs-client-provisioner&lt;/code&gt; in the deployment YAMLs.&lt;/li&gt; &#xA; &lt;li&gt;One of the pending areas for development on this repository is to add automated e2e tests. If you would like to contribute, please raise an issue or reach us on the Kubernetes slack #sig-storage channel.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to deploy NFS Subdir External Provisioner to your cluster&lt;/h2&gt; &#xA;&lt;p&gt;To note again, you must &lt;em&gt;already&lt;/em&gt; have an NFS Server.&lt;/p&gt; &#xA;&lt;h3&gt;With Helm&lt;/h3&gt; &#xA;&lt;p&gt;Follow the instructions from the helm chart &lt;a href=&#34;https://raw.githubusercontent.com/kubernetes-sigs/nfs-subdir-external-provisioner/master/charts/nfs-subdir-external-provisioner/README.md&#34;&gt;README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The tl;dr is&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ helm repo add nfs-subdir-external-provisioner https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner/&#xA;$ helm install nfs-subdir-external-provisioner nfs-subdir-external-provisioner/nfs-subdir-external-provisioner \&#xA;    --set nfs.server=x.x.x.x \&#xA;    --set nfs.path=/exported/path&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;With Kustomize&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 1: Get connection information for your NFS server&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Make sure your NFS server is accessible from your Kubernetes cluster and get the information you need to connect to it. At a minimum you will need its hostname and exported share path.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 2: Add the base resource&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;kustomization.yaml&lt;/code&gt; file in a directory of your choice, and add the &lt;a href=&#34;https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner/tree/master/deploy&#34;&gt;deploy&lt;/a&gt; directory as a base. This will use the kustomization file within that directory as our base.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;namespace: nfs-provisioner&#xA;bases:&#xA;  - github.com/kubernetes-sigs/nfs-subdir-external-provisioner//deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 3: Create namespace resource&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create a file with your namespace resource. The name can be anything as it will get overwritten by the namespace in your kustomization file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# namespace.yaml&#xA;apiVersion: v1&#xA;kind: Namespace&#xA;metadata:&#xA;  name: nfs-provisioner&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 4: Configure deployment&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To configure the deployment, you will need to patch it&#39;s container variables with the connection information for your NFS Server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# patch_nfs_details.yaml&#xA;apiVersion: apps/v1&#xA;kind: Deployment&#xA;metadata:&#xA;  labels:&#xA;    app: nfs-client-provisioner&#xA;  name: nfs-client-provisioner&#xA;spec:&#xA;  template:&#xA;    spec:&#xA;      containers:&#xA;        - name: nfs-client-provisioner&#xA;          env:&#xA;            - name: NFS_SERVER&#xA;              value: &amp;lt;YOUR_NFS_SERVER_IP&amp;gt;&#xA;            - name: NFS_PATH&#xA;              value: &amp;lt;YOUR_NFS_SERVER_SHARE&amp;gt;&#xA;      volumes:&#xA;        - name: nfs-client-root&#xA;          nfs:&#xA;            server: &amp;lt;YOUR_NFS_SERVER_IP&amp;gt;&#xA;            path: &amp;lt;YOUR_NFS_SERVER_SHARE&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace occurrences of &lt;code&gt;&amp;lt;YOUR_NFS_SERVER_IP&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;YOUR_NFS_SERVER_SHARE&amp;gt;&lt;/code&gt; with your connection information.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 5: Add resources and deploy&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add the namespace resource and patch you created in earlier steps.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;namespace: nfs-provisioner&#xA;bases:&#xA;  - github.com/kubernetes-sigs/nfs-subdir-external-provisioner//deploy&#xA;resources:&#xA;  - namespace.yaml&#xA;patchesStrategicMerge:&#xA;  - patch_nfs_details.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Deploy (run inside directory with your kustomization file):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kubectl apply -k .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 6: Finally, test your environment!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Now we&#39;ll test your NFS subdir external provisioner by creating a persistent volume claim and a pod that writes a test file to the volume. This will make sure that the provisioner is provisioning and that the NFS server is reachable and writable.&lt;/p&gt; &#xA;&lt;p&gt;Deploy the test resources:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ kubectl create -f https://raw.githubusercontent.com/kubernetes-sigs/nfs-subdir-external-provisioner/master/deploy/test-claim.yaml -f https://raw.githubusercontent.com/kubernetes-sigs/nfs-subdir-external-provisioner/master/deploy/test-pod.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now check your NFS Server for the &lt;code&gt;SUCCESS&lt;/code&gt; inside the PVC&#39;s directory.&lt;/p&gt; &#xA;&lt;p&gt;Delete the test resources:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ kubectl delete -f https://raw.githubusercontent.com/kubernetes-sigs/nfs-subdir-external-provisioner/master/deploy/test-claim.yaml -f https://raw.githubusercontent.com/kubernetes-sigs/nfs-subdir-external-provisioner/master/deploy/test-pod.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now check the PVC&#39;s directory has been deleted.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 7: Deploying your own PersistentVolumeClaims&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To deploy your own PVC, make sure that you have the correct &lt;code&gt;storageClassName&lt;/code&gt; (by default &lt;code&gt;managed-nfs-storage&lt;/code&gt;). You can also patch the StorageClass resource to change it, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# kustomization.yaml&#xA;namespace: nfs-provisioner&#xA;resources:&#xA;  - github.com/kubernetes-sigs/nfs-subdir-external-provisioner//deploy&#xA;  - namespace.yaml&#xA;patches:&#xA;- target:&#xA;    kind: StorageClass&#xA;    name: managed-nfs-storage&#xA;  patch: |-&#xA;    - op: replace&#xA;      path: /metadata/name&#xA;      value: &amp;lt;YOUR-STORAGECLASS-NAME&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 1: Get connection information for your NFS server&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Make sure your NFS server is accessible from your Kubernetes cluster and get the information you need to connect to it. At a minimum you will need its hostname.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 2: Get the NFS Subdir External Provisioner files&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To setup the provisioner you will download a set of YAML files, edit them to add your NFS server&#39;s connection information and then apply each with the &lt;code&gt;kubectl&lt;/code&gt; / &lt;code&gt;oc&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Get all of the files in the &lt;a href=&#34;https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner/tree/master/deploy&#34;&gt;deploy&lt;/a&gt; directory of this repository. These instructions assume that you have cloned the &lt;a href=&#34;https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner/&#34;&gt;kubernetes-sigs/nfs-subdir-external-provisioner&lt;/a&gt; repository and have a bash-shell open in the root directory.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 3: Setup authorization&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If your cluster has RBAC enabled or you are running OpenShift you must authorize the provisioner. If you are in a namespace/project other than &#34;default&#34; edit &lt;code&gt;deploy/rbac.yaml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Kubernetes:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Set the subject of the RBAC objects to the current namespace where the provisioner is being deployed&#xA;$ NS=$(kubectl config get-contexts|grep -e &#34;^\*&#34; |awk &#39;{print $5}&#39;)&#xA;$ NAMESPACE=${NS:-default}&#xA;$ sed -i&#39;&#39; &#34;s/namespace:.*/namespace: $NAMESPACE/g&#34; ./deploy/rbac.yaml ./deploy/deployment.yaml&#xA;$ kubectl create -f deploy/rbac.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;OpenShift:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;On some installations of OpenShift the default admin user does not have cluster-admin permissions. If these commands fail refer to the OpenShift documentation for &lt;strong&gt;User and Role Management&lt;/strong&gt; or contact your OpenShift provider to help you grant the right permissions to your admin user. On OpenShift the service account used to bind volumes does not have the necessary permissions required to use the &lt;code&gt;hostmount-anyuid&lt;/code&gt; SCC. See also &lt;a href=&#34;https://docs.openshift.com/container-platform/4.4/authentication/managing-security-context-constraints.html#role-based-access-to-ssc_configuring-internal-oauth&#34;&gt;Role based access to SCC&lt;/a&gt; for more information. If these commands fail refer to the OpenShift documentation for &lt;strong&gt;User and Role Management&lt;/strong&gt; or contact your OpenShift provider to help you grant the right permissions to your admin user.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Set the subject of the RBAC objects to the current namespace where the provisioner is being deployed&#xA;$ NAMESPACE=`oc project -q`&#xA;$ sed -i&#39;&#39; &#34;s/namespace:.*/namespace: $NAMESPACE/g&#34; ./deploy/rbac.yaml ./deploy/deployment.yaml&#xA;$ oc create -f deploy/rbac.yaml&#xA;$ oc adm policy add-scc-to-user hostmount-anyuid system:serviceaccount:$NAMESPACE:nfs-client-provisioner&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 4: Configure the NFS subdir external provisioner&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you would like to use a custom built nfs-subdir-external-provisioner image, you must edit the provisioner&#39;s deployment file to specify the correct location of your &lt;code&gt;nfs-client-provisioner&lt;/code&gt; container image.&lt;/p&gt; &#xA;&lt;p&gt;Next you must edit the provisioner&#39;s deployment file to add connection information for your NFS server. Edit &lt;code&gt;deploy/deployment.yaml&lt;/code&gt; and replace the two occurences of &#xA; &lt;your nfs server hostname&gt;&#xA;   with your server&#39;s hostname.&#xA; &lt;/your&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;kind: Deployment&#xA;apiVersion: apps/v1&#xA;metadata:&#xA;  name: nfs-client-provisioner&#xA;spec:&#xA;  replicas: 1&#xA;  selector:&#xA;    matchLabels:&#xA;      app: nfs-client-provisioner&#xA;  strategy:&#xA;    type: Recreate&#xA;  template:&#xA;    metadata:&#xA;      labels:&#xA;        app: nfs-client-provisioner&#xA;    spec:&#xA;      serviceAccountName: nfs-client-provisioner&#xA;      containers:&#xA;        - name: nfs-client-provisioner&#xA;          image: k8s.gcr.io/sig-storage/nfs-subdir-external-provisioner:v4.0.2&#xA;          volumeMounts:&#xA;            - name: nfs-client-root&#xA;              mountPath: /persistentvolumes&#xA;          env:&#xA;            - name: PROVISIONER_NAME&#xA;              value: k8s-sigs.io/nfs-subdir-external-provisioner&#xA;            - name: NFS_SERVER&#xA;              value: &amp;lt;YOUR NFS SERVER HOSTNAME&amp;gt;&#xA;            - name: NFS_PATH&#xA;              value: /var/nfs&#xA;      volumes:&#xA;        - name: nfs-client-root&#xA;          nfs:&#xA;            server: &amp;lt;YOUR NFS SERVER HOSTNAME&amp;gt;&#xA;            path: /var/nfs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: If you want to change the PROVISIONER_NAME above from &lt;code&gt;k8s-sigs.io/nfs-subdir-external-provisioner&lt;/code&gt; to something else like &lt;code&gt;myorg/nfs-storage&lt;/code&gt;, remember to also change the PROVISIONER_NAME in the storage class definition below.&lt;/p&gt; &#xA;&lt;p&gt;To disable leader election, define an env variable named ENABLE_LEADER_ELECTION and set its value to false.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 5: Deploying your storage class&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Parameters:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;onDelete&lt;/td&gt; &#xA;   &lt;td&gt;If it exists and has a delete value, delete the directory, if it exists and has a retain value, save the directory.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;will be archived with name on the share: &lt;code&gt;archived-&amp;lt;volume.Name&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;archiveOnDelete&lt;/td&gt; &#xA;   &lt;td&gt;If it exists and has a false value, delete the directory. if &lt;code&gt;onDelete&lt;/code&gt; exists, &lt;code&gt;archiveOnDelete&lt;/code&gt; will be ignored.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;will be archived with name on the share: &lt;code&gt;archived-&amp;lt;volume.Name&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pathPattern&lt;/td&gt; &#xA;   &lt;td&gt;Specifies a template for creating a directory path via PVC metadata&#39;s such as labels, annotations, name or namespace. To specify metadata use &lt;code&gt;${.PVC.&amp;lt;metadata&amp;gt;}&lt;/code&gt;. Example: If folder should be named like &lt;code&gt;&amp;lt;pvc-namespace&amp;gt;-&amp;lt;pvc-name&amp;gt;&lt;/code&gt;, use &lt;code&gt;${.PVC.namespace}-${.PVC.name}&lt;/code&gt; as pathPattern.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;This is &lt;code&gt;deploy/class.yaml&lt;/code&gt; which defines the NFS subdir external provisioner&#39;s Kubernetes Storage Class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: storage.k8s.io/v1&#xA;kind: StorageClass&#xA;metadata:&#xA;  name: nfs-client&#xA;provisioner: k8s-sigs.io/nfs-subdir-external-provisioner # or choose another name, must match deployment&#39;s env PROVISIONER_NAME&#39;&#xA;parameters:&#xA;  pathPattern: &#34;${.PVC.namespace}/${.PVC.annotations.nfs.io/storage-path}&#34; # waits for nfs.io/storage-path annotation, if not specified will accept as empty string.&#xA;  onDelete: delete&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 6: Finally, test your environment!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Now we&#39;ll test your NFS subdir external provisioner.&lt;/p&gt; &#xA;&lt;p&gt;Deploy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ kubectl create -f deploy/test-claim.yaml -f deploy/test-pod.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now check your NFS Server for the file &lt;code&gt;SUCCESS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kubectl delete -f deploy/test-pod.yaml -f deploy/test-claim.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now check the folder has been deleted.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 7: Deploying your own PersistentVolumeClaims&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To deploy your own PVC, make sure that you have the correct &lt;code&gt;storageClassName&lt;/code&gt; as indicated by your &lt;code&gt;deploy/class.yaml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;kind: PersistentVolumeClaim&#xA;apiVersion: v1&#xA;metadata:&#xA;  name: test-claim&#xA;  annotations:&#xA;    nfs.io/storage-path: &#34;test-path&#34; # not required, depending on whether this annotation was shown in the storage class description&#xA;spec:&#xA;  storageClassName: nfs-client&#xA;  accessModes:&#xA;    - ReadWriteMany&#xA;  resources:&#xA;    requests:&#xA;      storage: 1Mi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Build and publish your own container image&lt;/h1&gt; &#xA;&lt;p&gt;To build your own custom container image from this repository, you will have to build and push the nfs-subdir-external-provisioner image using the following instructions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make build&#xA;make container&#xA;# `nfs-subdir-external-provisioner:latest` will be created.&#xA;# Note: This will build a single-arch image that matches the machine on which container is built.&#xA;# To upload this to your custom registry, say `quay.io/myorg` and arch as amd64, you can use&#xA;# docker tag nfs-subdir-external-provisioner:latest quay.io/myorg/nfs-subdir-external-provisioner-amd64:latest&#xA;# docker push quay.io/myorg/nfs-subdir-external-provisioner-amd64:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Build and publish with GitHub Actions&lt;/h1&gt; &#xA;&lt;p&gt;In a forked repository you can use GitHub Actions pipeline defined in &lt;a href=&#34;https://raw.githubusercontent.com/kubernetes-sigs/nfs-subdir-external-provisioner/master/.github/workflows/release.yml&#34;&gt;.github/workflows/release.yml&lt;/a&gt;. The pipeline builds Docker images for &lt;code&gt;linux/amd64&lt;/code&gt;, &lt;code&gt;linux/arm64&lt;/code&gt;, and &lt;code&gt;linux/arm/v7&lt;/code&gt; platforms and publishes them using a multi-arch manifest. The pipeline is triggered when you add a tag like &lt;code&gt;gh-v{major}.{minor}.{patch}&lt;/code&gt; to your commit and push it to GitHub. The tag is used for generating Docker image tags: &lt;code&gt;latest&lt;/code&gt;, &lt;code&gt;{major}&lt;/code&gt;, &lt;code&gt;{major}:{minor}&lt;/code&gt;, &lt;code&gt;{major}:{minor}:{patch}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The pipeline adds several labels:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;org.opencontainers.image.title=${{ github.event.repository.name }}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;org.opencontainers.image.description=${{ github.event.repository.description }}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;org.opencontainers.image.url=${{ github.event.repository.html_url }}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;org.opencontainers.image.source=${{ github.event.repository.clone_url }}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;org.opencontainers.image.created=${{ steps.prep.outputs.created }}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;org.opencontainers.image.revision=${{ github.sha }}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The pipeline performs the docker login command using &lt;code&gt;REGISTRY_USERNAME&lt;/code&gt; and &lt;code&gt;REGISTRY_TOKEN&lt;/code&gt; secrets, which have to be provided.&lt;/li&gt; &#xA; &lt;li&gt;You also need to provide the &lt;code&gt;DOCKER_IMAGE&lt;/code&gt; secret specifying your Docker image name, e.g., &lt;code&gt;quay.io/[username]/nfs-subdir-external-provisioner&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;NFS provisioner limitations/pitfalls&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The provisioned storage is not guaranteed. You may allocate more than the NFS share&#39;s total size. The share may also not have enough storage space left to actually accommodate the request.&lt;/li&gt; &#xA; &lt;li&gt;The provisioned storage limit is not enforced. The application can expand to use all the available storage regardless of the provisioned size.&lt;/li&gt; &#xA; &lt;li&gt;Storage resize/expansion operations are not presently supported in any form. You will end up in an error state: &lt;code&gt;Ignoring the PVC: didn&#39;t find a plugin capable of expanding the volume; waiting for an external controller to process this PVC.&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>