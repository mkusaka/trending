<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-13T01:44:09Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>avsthiago/kopylot</title>
    <updated>2023-04-13T01:44:09Z</updated>
    <id>tag:github.com,2023-04-13:/avsthiago/kopylot</id>
    <link href="https://github.com/avsthiago/kopylot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An AI-Powered assistant for Kubernetes developers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;strong&gt;KoPylot&lt;/strong&gt;: Your AI-Powered Kubernetes Assistant 🤖&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://img.shields.io/github/v/release/avsthiago/kopylot&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/avsthiago/kopylot&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/avsthiago/kopylot/actions/workflows/main.yml?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/avsthiago/kopylot/main.yml?branch=main&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/avsthiago/kopylot&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/avsthiago/kopylot/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/github/commit-activity/m/avsthiago/kopylot&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commit-activity/m/avsthiago/kopylot&#34; alt=&#34;Commit activity&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/github/license/avsthiago/kopylot&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/avsthiago/kopylot&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;KoPylot is an open-source AI-powered Kubernetes assistant. Its goal is to help developers and DevOps engineers to easily manage and monitor their Kubernetes clusters.&lt;/p&gt; &#xA;&lt;p&gt;You can read more about the project in the &lt;a href=&#34;https://medium.com/@thiagoalves/introducing-kopylot-a-kubernetes-ai-assistant-264cff0e7846&#34;&gt;blog post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;💫 Features:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;🔍 &lt;strong&gt;Audit&lt;/strong&gt;: Audit a resource, such as pods, deployments, or services using an LLM model. &lt;img src=&#34;https://raw.githubusercontent.com/avsthiago/kopylot/main/resources/audit.png&#34; alt=&#34;Audit&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;🩺 &lt;strong&gt;Diagnose&lt;/strong&gt;: Diagnose resources, such as pods, deployments, or services using an LLM model. &lt;img src=&#34;https://raw.githubusercontent.com/avsthiago/kopylot/main/resources/diagnose.png&#34; alt=&#34;Diagnose&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;💬 &lt;strong&gt;Chat&lt;/strong&gt;: Start a chat with KoPylot to generate kubectl commands based on your prompts. &lt;img src=&#34;https://raw.githubusercontent.com/avsthiago/kopylot/main/resources/chat.png&#34; alt=&#34;Chat&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;☸️ &lt;strong&gt;Ctl&lt;/strong&gt;: A wrapper around kubectl. The arguments passed to the &lt;code&gt;ctl&lt;/code&gt; subcommand are interpreted by kubectl. &lt;img src=&#34;https://raw.githubusercontent.com/avsthiago/kopylot/main/resources/ctl.png&#34; alt=&#34;Ctl&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🚀 Quick Start:&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Requests an API key from &lt;a href=&#34;https://help.openai.com/en/articles/4936850-where-do-i-find-my-secret-api-key&#34;&gt;OpenAI&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Export the key using the following command:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export KOPYLOT_AUTH_TOKEN=your_api_key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Install KoPylot using pip:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install kopylot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Run KoPylot:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;kopylot --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;📖 Usage:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: kopylot [OPTIONS] COMMAND [ARGS]...                                           &#xA;                                                                                      &#xA;╭─ Options ──────────────────────────────────────────────────────────────────────────╮&#xA;│ --version                                                                          │&#xA;│ --install-completion        [bash|zsh|fish|powershell  Install completion for the  │&#xA;│                             |pwsh]                     specified shell.            │&#xA;│                                                        [default: None]             │&#xA;│ --show-completion           [bash|zsh|fish|powershell  Show completion for the     │&#xA;│                             |pwsh]                     specified shell, to copy it │&#xA;│                                                        or customize the            │&#xA;│                                                        installation.               │&#xA;│                                                        [default: None]             │&#xA;│ --help                                                 Show this message and exit. │&#xA;╰────────────────────────────────────────────────────────────────────────────────────╯&#xA;╭─ Commands ─────────────────────────────────────────────────────────────────────────╮&#xA;│ audit     Audit a pod, deployment, or service using an LLM model.                  │&#xA;│ chat      Start a chat with kopylot to generate kubectl commands based your        │&#xA;│           inputs.                                                                  │&#xA;│ ctl       A wrapper around kubectl. The arguments passed to the ctl subcommand are │&#xA;│           interpreted by kubectl.                                                  │&#xA;│ diagnose  Diagnose a resource e.g. pod, deployment, or service using an LLM model. │&#xA;╰────────────────────────────────────────────────────────────────────────────────────╯&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🤝 Contributions:&lt;/h2&gt; &#xA;&lt;p&gt;KoPylot is an open-source project and we welcome contributions from the community. There are a couple of ways to set up your development environment and start contributing to the project.&lt;/p&gt; &#xA;&lt;h3&gt;🐳 Using a Dev Container&lt;/h3&gt; &#xA;&lt;p&gt;KoPylot supports development using a dev container, which helps you set up a consistent and isolated environment for development. This makes it easy to get started without having to worry about conflicting dependencies or configurations on your local machine.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;To get started with a dev container:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; and &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers&#34;&gt;Remote - Containers&lt;/a&gt; extension in Visual Studio Code.&lt;/li&gt; &#xA; &lt;li&gt;Clone the KoPylot repository and open the project folder in Visual Studio Code.&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;code&gt;F1&lt;/code&gt;, type &lt;code&gt;Remote-Containers: Reopen in Container&lt;/code&gt;, and hit &lt;code&gt;Enter&lt;/code&gt;. Visual Studio Code will build the dev container and reopen the project inside it.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You&#39;re now ready to start contributing to KoPylot using the dev container!&lt;/p&gt; &#xA;&lt;h3&gt;🛠️ Local Setup&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer to set up your development environment locally, make sure you have &lt;a href=&#34;https://python-poetry.org/&#34;&gt;Poetry&lt;/a&gt; installed on your system. Then, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the KoPylot repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/avsthiago/kopylot&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to the project folder:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd kopylot&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the project dependencies using Poetry:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You&#39;re now ready to start contributing to KoPylot using your local setup! 😄&lt;/p&gt; &#xA;&lt;p&gt;Before submitting a pull request, please make sure to test your changes and follow the project&#39;s coding guidelines. We appreciate your contributions and look forward to collaborating with you! 🎉&lt;/p&gt; &#xA;&lt;h2&gt;📄 License:&lt;/h2&gt; &#xA;&lt;p&gt;KoPylot is licensed under the MIT License. See &lt;a href=&#34;https://raw.githubusercontent.com/avsthiago/kopylot/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;☎️ Contact:&lt;/h2&gt; &#xA;&lt;p&gt;If you have any questions or suggestions, feel free to contact me on &lt;a href=&#34;https://thiagoalves.ai/contact/&#34;&gt;https://thiagoalves.ai&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Thank you for using KoPylot! 🙌&lt;/p&gt; &#xA;&lt;h2&gt;🗺️ Roadmap:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Wrap the kubectl command using &lt;code&gt;ctl&lt;/code&gt; subcommand.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create the &lt;code&gt;audit&lt;/code&gt; subcommand to audit kubernetes resources.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create the &lt;code&gt;diagnose&lt;/code&gt; subcommand to diagnose kubernetes resources.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create the &lt;code&gt;chat&lt;/code&gt; subcommand to generate kubectl commands using from the user prompts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Make it possible to use other LLM models, not just from OpenAI.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Integrate &lt;a href=&#34;https://github.com/hwchase17/langchain&#34;&gt;LangChain&lt;/a&gt; into KoPylot to make it as autonomous as possible.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;~ Similar Projects:&lt;/h2&gt; &#xA;&lt;p&gt;One of the similar projects that I found is the &lt;a href=&#34;https://github.com/knight42/kopilot&#34;&gt;Kopilot&lt;/a&gt; from knight42. It is also a Kubernetes assistant which uses LLMs behind the scenes. The main difference from KoPylot is that it is written in Go. At the moment, it doesn&#39;t have the Chat command implemented, but it can respond in different languages.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fscarmen2/Argo-Nezha-Service-Container</title>
    <updated>2023-04-13T01:44:09Z</updated>
    <id>tag:github.com,2023-04-13:/fscarmen2/Argo-Nezha-Service-Container</id>
    <link href="https://github.com/fscarmen2/Argo-Nezha-Service-Container" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Nezha server over Argo tunnel 使用 Argo 隧道的哪吒服务端&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Argo-Nezha-Service-Container&lt;/h1&gt; &#xA;&lt;p&gt;Nezha server over Argo tunnel 使用 Argo 隧道的哪吒服务端&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;目录&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fscarmen2/Argo-Nezha-Service-Container/main/README.md#%E9%A1%B9%E7%9B%AE%E7%89%B9%E7%82%B9&#34;&gt;项目特点&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fscarmen2/Argo-Nezha-Service-Container/main/README.md#%E5%87%86%E5%A4%87%E9%9C%80%E8%A6%81%E7%94%A8%E7%9A%84%E5%8F%98%E9%87%8F&#34;&gt;准备需要用的变量&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fscarmen2/Argo-Nezha-Service-Container/main/README.md#PaaS-%E9%83%A8%E7%BD%B2%E5%AE%9E%E4%BE%8B&#34;&gt;PaaS 部署实例&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fscarmen2/Argo-Nezha-Service-Container/main/README.md#VPS-%E9%83%A8%E7%BD%B2%E5%AE%9E%E4%BE%8B&#34;&gt;VPS 部署实例&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fscarmen2/Argo-Nezha-Service-Container/main/README.md#%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%85%A5&#34;&gt;客户端接入&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fscarmen2/Argo-Nezha-Service-Container/main/README.md#%E9%B8%A3%E8%B0%A2%E4%B8%8B%E5%88%97%E4%BD%9C%E8%80%85%E7%9A%84%E6%96%87%E7%AB%A0%E5%92%8C%E9%A1%B9%E7%9B%AE&#34;&gt;鸣谢下列作者的文章和项目&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fscarmen2/Argo-Nezha-Service-Container/main/README.md#%E5%85%8D%E8%B4%A3%E5%A3%B0%E6%98%8E&#34;&gt;免责声明&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;项目特点:&lt;/h2&gt; &#xA;&lt;h3&gt;优点:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;适用范围更广 --- 只要能连通网络，就能安装哪吒服务端，如 Nas 虚拟机 , Container PaaS 等&lt;/li&gt; &#xA; &lt;li&gt;Argo 隧道突破需要公网入口的限制 --- 传统的哪吒需要有两个，一个用于面板的访问，另一个用于客户端上报数据，本项目借用 Cloudflare Argo 隧道，使用内网穿透的办法&lt;/li&gt; &#xA; &lt;li&gt;IPv4 / v6 具备更高的灵活性 --- 传统哪吒需要处理服务端和客户端的 IPv4/v6 兼容性问题，还需要通过 warp 等工具来解决不对应的情况。然而，本项目可以完全不需要考虑这些问题，可以任意对接，更加方便和简便。&lt;/li&gt; &#xA; &lt;li&gt;一条 Argo 隧道分流多个域名和协议 --- 建立一条内网穿透的 Argo 隧道，即可分流三个域名(hostname)和协议(protocal)，分别用于面板的访问(http)，客户端上报数据(tcp)和 ssh（可选）&lt;/li&gt; &#xA; &lt;li&gt;数据更安全 --- Argo 隧道使用TLS加密通信，可以将应用程序流量安全地传输到 Cloudflare 网络，提高了应用程序的安全性和可靠性。此外，Argo Tunnel也可以防止IP泄露和DDoS攻击等网络威胁。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;缺点:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;服务端和客户端均需要多安装依赖 --- Argo 隧道的两端均需要安装 Cloudflared 用于接入服务，所以如果客服端有公网入口的话，优先使用官方原版&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;准备需要用的变量&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;通过 Cloudflare Json 生成网轻松获取 Argo 隧道信息: &lt;a href=&#34;https://fscarmen.cloudflare.now.cc&#34;&gt;https://fscarmen.cloudflare.now.cc&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img width=&#34;1040&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/92626977/231084930-02e3c2de-c52b-420d-b39c-9f135d040b3b.png&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;到 Cloudflare 官方，在相应的域名 DNS 记录里加上客户端上报数据(tcp)和 ssh（可选）的域名&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img width=&#34;1666&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/92626977/231087110-85ddab87-076b-45c9-97d1-c8b051dcb5b0.png&#34;&gt; &#xA;&lt;img width=&#34;1627&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/92626977/231087714-e5a45eb9-bc47-4c38-8f5b-a4a9fb492d0d.png&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;获取 github 认证授权: &lt;a href=&#34;https://github.com/settings/applications/new&#34;&gt;https://github.com/settings/applications/new&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;面板域名加上 &lt;code&gt;https://&lt;/code&gt; 开头，回调地址再加上 &lt;code&gt;/oauth2/callback&lt;/code&gt; 结尾&lt;/p&gt; &#xA;&lt;img width=&#34;916&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/92626977/231099071-b6676f2f-6c7b-4e2f-8411-c134143cab24.png&#34;&gt; &#xA;&lt;img width=&#34;1122&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/92626977/231086319-1b625dc6-713b-4a62-80b1-cc5b2b7ef3ca.png&#34;&gt; &#xA;&lt;h2&gt;PaaS 部署实例&lt;/h2&gt; &#xA;&lt;p&gt;镜像 &lt;code&gt;fscarmen/argo-nezha:latest&lt;/code&gt; ， 支持 amd64 和 arm64 架构&lt;/p&gt; &#xA;&lt;p&gt;用到的变量&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;变量名&lt;/th&gt; &#xA;   &lt;th&gt;是否必须&lt;/th&gt; &#xA;   &lt;th&gt;备注&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ADMIN&lt;/td&gt; &#xA;   &lt;td&gt;是&lt;/td&gt; &#xA;   &lt;td&gt;github 的用户名，用于面板管理授权&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CLIENTID&lt;/td&gt; &#xA;   &lt;td&gt;是&lt;/td&gt; &#xA;   &lt;td&gt;在 github 上申请&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CLIENTSECRET&lt;/td&gt; &#xA;   &lt;td&gt;是&lt;/td&gt; &#xA;   &lt;td&gt;在 github 上申请&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ARGO_JSON&lt;/td&gt; &#xA;   &lt;td&gt;是&lt;/td&gt; &#xA;   &lt;td&gt;从 &lt;a href=&#34;https://fscarmen.cloudflare.now.cc&#34;&gt;https://fscarmen.cloudflare.now.cc&lt;/a&gt; 获取的 Argo Json&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DATA_DOMAIN&lt;/td&gt; &#xA;   &lt;td&gt;是&lt;/td&gt; &#xA;   &lt;td&gt;客户端与服务端的通信 argo 域名&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WEB_DOMAIN&lt;/td&gt; &#xA;   &lt;td&gt;是&lt;/td&gt; &#xA;   &lt;td&gt;面板 argo 域名&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SSH_DOMAIN&lt;/td&gt; &#xA;   &lt;td&gt;否&lt;/td&gt; &#xA;   &lt;td&gt;ssh 用的 argo 域名&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SSH_PASSWORD&lt;/td&gt; &#xA;   &lt;td&gt;否&lt;/td&gt; &#xA;   &lt;td&gt;ssh 的密码，只有在设置 SSH_JSON 后才生效，默认值 password&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;1.Koyeb&lt;/p&gt; &#xA;&lt;img width=&#34;927&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/92626977/231088411-fbac3e6e-a8a6-4661-bcf8-7c777aa8ffeb.png&#34;&gt; &#xA;&lt;img width=&#34;750&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/92626977/231088973-7134aefd-4c80-4559-8e40-17c3be11d27d.png&#34;&gt; &#xA;&lt;img width=&#34;1044&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/92626977/231090751-4629c60f-8529-4870-a586-06479c7c6517.png&#34;&gt; &#xA;&lt;img width=&#34;1187&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/92626977/231092893-c8f017a2-ee0e-4e28-bee3-7343158f0fa7.png&#34;&gt; &#xA;&lt;img width=&#34;500&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/92626977/231094144-df6715bc-c611-47ce-a529-03c43f38102e.png&#34;&gt; &#xA;&lt;h2&gt;VPS 部署实例&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -dit \&#xA;           --name nezha_dashboard \&#xA;           --restart always \&#xA;           -e ADMIN=&amp;lt;填 github 用户名&amp;gt; \&#xA;           -e CLIENTID=&amp;lt;填获取的&amp;gt;  \&#xA;           -e CLIENTSECRET=&amp;lt;填获取的&amp;gt; \&#xA;           -e ARGO_JSON=&amp;lt;填获取的&amp;gt; \&#xA;           -e WEB_DOMAIN=&amp;lt;填自定义的&amp;gt; \&#xA;           -e DATA_DOMAIN=&amp;lt;填自定义的&amp;gt; \&#xA;           -e SSH_DOMAIN=&amp;lt;填自定义的&amp;gt; \&#xA;           -e SSH_PASSWORD=&amp;lt;填自定义的&amp;gt; \&#xA;           fscarmen/argo-nezha&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;客户端接入&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget -O cloudflared https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 &amp;amp;&amp;amp; chmod +x cloudflared&#xA;./cloudflared access tcp --hostname &amp;lt;DATA_DOMAIN，即是数据传输的域名&amp;gt; --listener 127.0.0.1:5555 &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&#xA;curl -L https://raw.githubusercontent.com/naiba/nezha/master/script/install.sh -o nezha.sh &amp;amp;&amp;amp; chmod +x nezha.sh &amp;amp;&amp;amp; ./nezha.sh install_agent 127.0.0.1 5555 &amp;lt;nezha_key&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;鸣谢下列作者的文章和项目:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;哪吒官网: &lt;a href=&#34;https://nezha.wiki/&#34;&gt;https://nezha.wiki/&lt;/a&gt; , TG 群： &lt;a href=&#34;https://t.me/nezhamonitoring&#34;&gt;https://t.me/nezhamonitoring&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;热心的朝阳群众 Robin，讨论哪吒服务端与客户端的关系，从而诞生了此项目&lt;/li&gt; &#xA; &lt;li&gt;用 Cloudflare Tunnel 进行内网穿透: &lt;a href=&#34;https://blog.outv.im/2021/cloudflared-tunnel/&#34;&gt;https://blog.outv.im/2021/cloudflared-tunnel/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;免责声明:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;本程序仅供学习了解, 非盈利目的，请于下载后 24 小时内删除, 不得用作任何商业用途, 文字、数据及图片均有所属版权, 如转载须注明来源。&lt;/li&gt; &#xA; &lt;li&gt;使用本程序必循遵守部署免责声明。使用本程序必循遵守部署服务器所在地、所在国家和用户所在国家的法律法规, 程序作者不对使用者任何不当行为负责。&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>