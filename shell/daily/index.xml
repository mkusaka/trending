<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-08T01:37:31Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>davidchisnall/container-vm-scripts</title>
    <updated>2023-09-08T01:37:31Z</updated>
    <id>tag:github.com,2023-09-08:/davidchisnall/container-vm-scripts</id>
    <link href="https://github.com/davidchisnall/container-vm-scripts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Scripts for building FreeBSD VMs for use with podman&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FreeBSD Container VM tools for Podman&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains (early, very work-in-progress) scripts to build a VM image that can be used with &lt;code&gt;podman machine&lt;/code&gt; to manage FreeBSD VMs (initially on macOS, hopefully elsewhere eventually) to run FreeBSD containers on other operating systems.&lt;/p&gt; &#xA;&lt;h2&gt;Current status&lt;/h2&gt; &#xA;&lt;p&gt;The VM image can be loaded by &lt;code&gt;podman machine init&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; User accounts from the Ignition file provided by the host over the qemufwcfg interface are created.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; SSH keys are provisioned.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; The network is set up, podman is able to ssh into the guest.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Host filesystems are mounted. Note: This requires a some Podman bits that are not yet upstream.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Podman service runs in the guest.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Podman can connect to the service in the guest. This is currently done using a hack to symlink the socket to where Podman expects it. Eventually, podman should be taught to look in the right place.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;podman container&lt;/code&gt; and &lt;code&gt;podman image&lt;/code&gt; commands work.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Test on x86-64. Currently tested only on AArch64 (&#39;Apple silicon&#39;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A lot of the base system is unnecessary for the VM image (most kernel drivers, the toolchain, and so on) and a future version should install a smaller base. This does not prevent containers from including a full FreeBSD base system image.&lt;/p&gt; &#xA;&lt;h2&gt;Using&lt;/h2&gt; &#xA;&lt;p&gt;This can currently be used with unmodified podman with host mounts not working. For host mounts to work, you the &lt;a href=&#34;https://github.com/davidchisnall/podman/&#34;&gt;freebsd-guest-vm branch of this repo&lt;/a&gt;, which has not (yet) been upstreamed.&lt;/p&gt; &#xA;&lt;h3&gt;Building the VM&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;build-container-vm.sh&lt;/code&gt; expects to run as root and should be run on -CURRENT. You can download VM images for -CURRENT from the FreeBSD project, they work well with UTM. It will use &lt;code&gt;poudriere&lt;/code&gt; to build the image. Poudriere works much better on ZFS, so using one of these as the base is a good idea.&lt;/p&gt; &#xA;&lt;p&gt;The script runs the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clones the FreeBSD sources and applies the patch for 9p-over-virtio support.&lt;/li&gt; &#xA; &lt;li&gt;Uses Poudriere to build a jail containing the downloaded sources.&lt;/li&gt; &#xA; &lt;li&gt;Uses Poudriere to build the necessary packages (podman, qemufwcfg)&lt;/li&gt; &#xA; &lt;li&gt;Uses Poudriere again to build an image containing the base&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This will generate the VM image in &lt;code&gt;/usr/local/poudriere/data/images/podmanvm.img&lt;/code&gt;. You can copy this to a macOS system and then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ podman machine init --cpus $(sysctl -n hw.ncpu) --image-path podmanvm.img --rootful freebsd&#xA;$ podman machine start freebsd&#xA;$ podman system connection default freebsd-root&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now run &lt;code&gt;podman&lt;/code&gt; commands and they will automatically invoke the podman service in the VM.&lt;/p&gt; &#xA;&lt;p&gt;If you want to debug the VM edit &lt;code&gt;.config/containers/podman/machine/qemu/freebsd.json&lt;/code&gt; &lt;em&gt;before&lt;/em&gt; running the &lt;code&gt;podman machine start&lt;/code&gt; command and add the following two lines in the &lt;code&gt;CmdLine&lt;/code&gt; section:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  &#34;-serial&#34;,&#xA;  &#34;tcp::4444,server&#34;,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that some qemu command-line options are split over multiple arguments. Inserting this before the &lt;code&gt;-fw_cfg&lt;/code&gt; line is safe. This will allow you to connect to the console of the VM with &lt;code&gt;nc localhost 4444&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using the custom podman branch&lt;/h3&gt; &#xA;&lt;p&gt;This has been tested only on macOS, but might work on other platforms that use QEMU to host VMs.&lt;/p&gt; &#xA;&lt;p&gt;Clone the branch and build podman remote:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone -b freebsd-guest-vm https://github.com/davidchisnall/podman&#xA;$ cd podman&#xA;$ make podman-remote&#xA;$ mv bin/darwin/podman {somewhere in your path}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This requires a working Go toolchain and GNU coreutils, both of which can be installed from homebrew. Copying podman into your path is optional, feel free to invoke it from there. This branch adds a &lt;code&gt;--machine-os&lt;/code&gt; flag to &lt;code&gt;podman machine init&lt;/code&gt;, which lets it behave differently for different guest types.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ podman machine init --cpus $(sysctl -n hw.ncpu) --image-path podmanvm.img --rootful --machine-os freebsd  freebsd&#xA;$ podman machine start freebsd&#xA;$ podman system connection default freebsd-root&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now run FreeBSD containers, and they can have access to your host system:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ podman pull docker.io/dougrabson/freebsd13.2-minimal&#xA;$ podman container run --mount type=bind,src=/Users/${LOGNAME},target=/home/${LOGNAME} --rm -t  freebsd13.2-minimal ls /home/${LOGNAME}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should print the contents of your macOS home directory. You can confirm that this is a FreeBSD 13.2 container running on a FreeBSD 15.0-CURRENT kernel:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ podman container run --rm   freebsd13.2-minimal uname -mrs&#xA;FreeBSD 15.0-CURRENT arm64&#xA;$ podman container run --rm   freebsd13.2-minimal freebsd-version&#xA;13.2-RELEASE-p2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Future plans&lt;/h2&gt; &#xA;&lt;p&gt;Many of the bits here need to be upstreamed to FreeBSD (ports or the base system). Eventually, most of this repository should go away, but I want to get it to the state where it&#39;s actually usable first.&lt;/p&gt; &#xA;&lt;p&gt;Most of the next steps will require changes to Podman, to decouple the how-to-create-a-VM abstractions from the how-to-configure-a-Linux-VM bits. These will probably also be useful for managing Windows VMs with Podman, if someone ever wants to do that.&lt;/p&gt; &#xA;&lt;p&gt;On other hosts, Podman uses different virtualization mechanisms. The QEMU guest support should be sufficient on Linux, but on Windows it would be good to have Hyper-V support at some point.&lt;/p&gt; &#xA;&lt;p&gt;The VM creation process should be automated and run from CI. Cirrus has x86-64 and AArch64 VM instances that should be fast enough to do this quickly.&lt;/p&gt; &#xA;&lt;p&gt;For some reason, using &lt;code&gt;qemu-img&lt;/code&gt; to convert the raw disk image to QCoW2 results in something that doesn&#39;t boot. It&#39;s probably a good idea to figure out why and fix it.&lt;/p&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;p&gt;This currently uses a patched version of ocijail to build with CMake because Bazel depends on OpenJDK, which does not appear to work on FreeBSD/AArch64. Hopefully that can be fixed at some point, or the CMake build can be upstreamed. This version also builds its dependencies from ports, so should work with &lt;code&gt;pkg audit&lt;/code&gt; if there are vulnerabilities in the JSON parser.&lt;/p&gt; &#xA;&lt;p&gt;We currently provide an entire &lt;code&gt;sshd_config&lt;/code&gt; to permit root login. This would be better to do this modification later or we risk failing to pick up changes to the defaults. Root login via ssh is safe here because the Podman does not expose the SSH login port except to the owner of the VM.&lt;/p&gt; &#xA;&lt;p&gt;The VM is built from -CURRENT at the moment so that containers for -CURRENT and any -RELEASE should work. At some point, it&#39;s probably a good idea to default to building from 14.0 since most users probably don&#39;t want to run -CURRENT containers and there&#39;s less chance of breakage.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jstrieb/paperify</title>
    <updated>2023-09-08T01:37:31Z</updated>
    <id>tag:github.com,2023-09-08:/jstrieb/paperify</id>
    <link href="https://github.com/jstrieb/paperify" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Transform any document, web page, or eBook into a research paper (ChatGPT not required)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Paperify&lt;/h1&gt; &#xA;&lt;p&gt;Paperify transforms any document, web page, or ebook into a research paper.&lt;/p&gt; &#xA;&lt;p&gt;The text of the generated paper is the same as the text of the original document, but figures and equations from real papers are interspersed throughout.&lt;/p&gt; &#xA;&lt;p&gt;A paper title and abstract are added (optionally generated by ChatGPT, if you provide an API key), and the entire paper is compiled with the IEEE $\LaTeX$ template for added realism.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/jstrieb/paperify/assets/7355528/6233c47e-fbff-4a71-8991-09ba3112f241&#34; alt=&#34;example&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;p&gt;First, install the dependencies (or &lt;a href=&#34;https://raw.githubusercontent.com/jstrieb/paperify/master/#docker&#34;&gt;use Docker&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;curl&lt;/li&gt; &#xA; &lt;li&gt;Python 3&lt;/li&gt; &#xA; &lt;li&gt;Pandoc&lt;/li&gt; &#xA; &lt;li&gt;jq&lt;/li&gt; &#xA; &lt;li&gt;LaTeX (via TeXLive)&lt;/li&gt; &#xA; &lt;li&gt;ImageMagick (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, on Debian-based systems (&lt;em&gt;e.g.&lt;/em&gt;, Debian, Ubuntu, Kali, WSL):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update&#xA;sudo apt install --no-install-recommends \&#xA;  pandoc \&#xA;  curl ca-certificates \&#xA;  jq \&#xA;  python3 \&#xA;  imagemagick \&#xA;  texlive texlive-publishers texlive-science lmodern texlive-latex-extra&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, clone the repo (or directly pull the script), and execute it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -L https://github.com/jstrieb/paperify/raw/master/paperify.sh \&#xA;  | sudo tee /usr/local/bin/paperify&#xA;sudo chmod +x /usr/local/bin/paperify&#xA;&#xA;paperify -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Examples&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jstrieb/paperify/master/examples/cox.pdf&#34;&gt;&lt;code&gt;examples/cox.pdf&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Convert &lt;a href=&#34;https://research.swtch.com/bell-labs&#34;&gt;Russ Cox&#39;s transcript of Doug McIlroy&#39;s talk on the history of Bell Labs&lt;/a&gt; into a paper saved to the &lt;code&gt;/tmp/&lt;/code&gt; directory as &lt;code&gt;article.pdf&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;paperify \&#xA;  --from-format html \&#xA;  &#34;https://research.swtch.com/bell-labs&#34; \&#xA;  /tmp/article.pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jstrieb/paperify/master/examples/london.pdf&#34;&gt;&lt;code&gt;examples/london.pdf&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Download figures and equations from the 1000 latest computer science papers on &lt;code&gt;arXiv.org&lt;/code&gt;. Intersperse the figures and equations into Jack London&#39;s &lt;em&gt;Call of the Wild&lt;/em&gt; with a higher-than-default equation frequency. Use ChatGPT to generate a paper title, author, abstract, and metadata for an imaginary paper on soft body robotics. Save the file in the current directory as &lt;code&gt;london.pdf&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;paperify \&#xA;  --arxiv-category cs \&#xA;  --num-papers 1000 \&#xA;  --equation-frequency 18 \&#xA;  --chatgpt-token &#34;sk-[REDACTED]&#34; \&#xA;  --chatgpt-topic &#34;soft body robotics&#34; \&#xA;  &#34;https://standardebooks.org/ebooks/jack-london/the-call-of-the-wild/downloads/jack-london_the-call-of-the-wild.epub&#34; \&#xA;  london.pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Docker&lt;/h2&gt; &#xA;&lt;p&gt;Alternatively, run Paperify from within a Docker container. To run the first example from within Docker and build to &lt;code&gt;./build/cox.pdf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run \&#xA;  --rm \&#xA;  -it \&#xA;  --volume &#34;$(pwd)/build&#34;:/root/build \&#xA;  jstrieb/paperify \&#xA;    --from-format html \&#xA;    &#34;https://research.swtch.com/bell-labs&#34; \&#xA;    build/cox.pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;usage: paperify [OPTIONS] &amp;lt;URL or path&amp;gt; &amp;lt;output file&amp;gt;&#xA;&#xA;OPTIONS:&#xA;  --temp-dir &amp;lt;DIR&amp;gt;            Directory for assets (default: /tmp/paperify)&#xA;  --from-format &amp;lt;FORMAT&amp;gt;      Format of input file (default: input suffix)&#xA;  --arxiv-category &amp;lt;CAT&amp;gt;      arXiv.org paper category (default: math)&#xA;  --num-papers &amp;lt;NUM&amp;gt;          Number of papers to download (default: 100)&#xA;  --max-parallelism &amp;lt;PROCS&amp;gt;   Maximum simultaneous processes (default: 32)&#xA;  --figure-frequency &amp;lt;N&amp;gt;      Chance of a figure is 1/N per paragraph (default: 25)&#xA;  --equation-frequency &amp;lt;N&amp;gt;    Chance of an equation is 1/N per paragraph (default: 25)&#xA;  --max-size &amp;lt;BYTES&amp;gt;          Max allowed image size in bytes (default 2500000)&#xA;  --min-equation-length &amp;lt;N&amp;gt;   Minimum equation length in characters (default 5)&#xA;  --max-equation-length &amp;lt;N&amp;gt;   Maximum equation length in characters (default 120)&#xA;  --min-caption-length &amp;lt;N&amp;gt;    Minimum figure caption length in characters (default 20)&#xA;  --chatgpt-token &amp;lt;TOKEN&amp;gt;     ChatGPT token to generate paper title, abstract, etc.&#xA;  --chatgpt-topic &amp;lt;TOPIC&amp;gt;     Paper topic ChatGPT will generate metadta for&#xA;  --quiet                     Don&#39;t log statuses&#xA;  --skip-downloading          Don&#39;t download papers from arXiv.org&#xA;  --skip-extracting           Don&#39;t extract equations and captions&#xA;  --skip-metadata             Don&#39;t regenerate metadata&#xA;  --skip-filtering            Don&#39;t filter out large files or non-diagram images&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;--skip-*&lt;/code&gt; flags are useful when you have already run the script once and do not want to repeat the process of downloading and extracting data.&lt;/p&gt; &#xA;&lt;h1&gt;Known Issues&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Images with query parameters in the &lt;code&gt;src&lt;/code&gt; URL of some web pages are extracted by Pandoc with the query parameters in the filename, and LaTeX gives errors about &#34;unknown file extension&#34; when compiling.&lt;/li&gt; &#xA; &lt;li&gt;Papers may contain images that are not diagrams, such as portraits of the authors or institution logos. Paperify uses a highly imperfect heuristic to remove these if the &lt;code&gt;convert&lt;/code&gt; command line tool is present: only images with white, nearly-white, or transparent pixels in the top left and bottom right corners are kept. This works surprisingly well, but there are always some false positives and false negatives.&lt;/li&gt; &#xA; &lt;li&gt;Non-ASCII Unicode characters cannot be processed by &lt;code&gt;pdflatex&lt;/code&gt;, and will be stripped before the PDF is compiled.&lt;/li&gt; &#xA; &lt;li&gt;Paperify uses Markdown as a (purposefully) lossy &lt;a href=&#34;https://en.wikipedia.org/wiki/Intermediate_representation&#34;&gt;intermediate representation&lt;/a&gt; for documents before they are converted to LaTeX. As a result, information and styling from the original may be stripped.&lt;/li&gt; &#xA; &lt;li&gt;A handful of papers contain huge numbers of images. The ones that do this also tend to have some of the worst images. Images can be manually pruned from the &lt;code&gt;/tmp/paperify/images&lt;/code&gt; directory, and the same command can be re-run with the &lt;code&gt;--skip-*&lt;/code&gt; flags to rebuild the paper using new figures and equations.&lt;/li&gt; &#xA; &lt;li&gt;Different systems install different LaTeX packages. If you&#39;re missing packages, you may want to bite the bullet and &lt;code&gt;apt install texlive-full&lt;/code&gt;. It&#39;s very big, but it&#39;s got everything you&#39;ll ever need in there.&lt;/li&gt; &#xA; &lt;li&gt;Figure captions usually have nothing to do with figures themselves.&lt;/li&gt; &#xA; &lt;li&gt;No matter how convincing a paper may appear, anyone looking over your shoulder who actually reads the words will know very quickly that something is off.&lt;/li&gt; &#xA; &lt;li&gt;Side effects of reading the code include nausea, dizziness, confusion, bleeding from the eyes, and deep love/hatred for the creators of Unix pipelines.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How to Read the Code&lt;/h1&gt; &#xA;&lt;p&gt;In general, I&#39;m a proponent of reading (or at least skimming) code before you run it, when possible. Usually, my code is written to be read. In this case, not so much.&lt;/p&gt; &#xA;&lt;p&gt;Apologies in advance to anyone who tries to read the code. It started as four very cursed lines of Bash (without line wrapping) that I attempted to clean up a little. It is now many more than four lines of Bash, most of which remain very cursed. The small Python portion is particularly hard on the eyes, though it may possess a grotesque beauty for true functional programmers.&lt;/p&gt; &#xA;&lt;p&gt;Everything is in &lt;code&gt;paperify.sh&lt;/code&gt;. It can be read top-to-bottom or bottom-to-top, and there is a fat LaTeX template as a heredoc smack in the middle.&lt;/p&gt; &#xA;&lt;h1&gt;Project Status&lt;/h1&gt; &#xA;&lt;p&gt;Strange as it may sound, this project is complete. I want to live in a world where working software doesn&#39;t always grow until it becomes a Lovecraftian spaghetti monster.&lt;/p&gt; &#xA;&lt;p&gt;I have added every feature that I wanted to add. It does what I wanted it to do, as well as I wanted it to do it. No further development required.&lt;/p&gt; &#xA;&lt;p&gt;As such, I will try to address issues opened on GitHub, but I do not expect to address feature requests. I may merge pull requests.&lt;/p&gt; &#xA;&lt;p&gt;Even if there are no recent commits, I&#39;m hopeful that this script will continue to work many years from now.&lt;/p&gt; &#xA;&lt;h1&gt;Greetz &amp;amp; Acknowledgments&lt;/h1&gt; &#xA;&lt;p&gt;Greetz to several unnamed friends who offered helpful commentary prior to release.&lt;/p&gt; &#xA;&lt;p&gt;Special shout out to the friends who suggested, as a follow-up project, making a browser extension to transform the current web page into a scientific paper. Sort of like Firefox reader mode, but for viewing Twitter when someone looking over your shoulder expects you to be doing something else.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://arxiv.org&#34;&gt;arXiv.org&lt;/a&gt; for hosting tons of papers with LaTeX source to mine.&lt;/p&gt; &#xA;&lt;p&gt;Greetz to Project Gutenberg, Standard Ebooks, and Alexandra Elbakyan.&lt;/p&gt; &#xA;&lt;p&gt;Lovingly released on Labor Day 2023; dedicated to procrastinating laborers of knowledge.&lt;/p&gt;</summary>
  </entry>
</feed>