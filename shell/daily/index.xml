<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-17T01:37:33Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>FWDekker/mommy</title>
    <updated>2024-04-17T01:37:33Z</updated>
    <id>tag:github.com,2024-04-17:/FWDekker/mommy</id>
    <link href="https://github.com/FWDekker/mommy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;mommy&#39;s here to support you, in any shell, on any system~ ‚ù§Ô∏è&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mommy üíù&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FWDekker/mommy/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/FWDekker/mommy?style=for-the-badge&#34; alt=&#34;github latest release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://aur.archlinux.org/packages/mommy/&#34;&gt;&lt;img src=&#34;https://img.shields.io/aur/version/mommy?style=for-the-badge&#34; alt=&#34;mommy is on aur&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/FWDekker/mommy/actions/workflows/ci.yml?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/FWDekker/mommy/ci.yml?style=for-the-badge&#34; alt=&#34;github ci status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/FWDekker/mommy/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/FWDekker/mommy?style=for-the-badge&#34; alt=&#34;mommy is licensed under unlicense&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a name=&#34;toc&#34;&gt;&lt;/a&gt;üöö&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/#installation&#34;&gt;&lt;strong&gt;installation&lt;/strong&gt;&lt;/a&gt; | üìñ&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/#usage&#34;&gt;&lt;strong&gt;usage&lt;/strong&gt;&lt;/a&gt; | üôã&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/#configuration&#34;&gt;&lt;strong&gt;configuration&lt;/strong&gt;&lt;/a&gt; | üêö&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/#shell-integration&#34;&gt;&lt;strong&gt;shell integration&lt;/strong&gt;&lt;/a&gt; | ‚öóÔ∏è&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/#development&#34;&gt;&lt;strong&gt;development&lt;/strong&gt;&lt;/a&gt; | üíñ&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/#acknowledgements&#34;&gt;&lt;strong&gt;acknowledgements&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;mommy&#39;s here to support you! mommy will compliment you if things go well, and will encourage you if things are not going so well~&lt;/p&gt; &#xA;&lt;p&gt;mommy is fully customizable, integrates with any shell, works on any system, and most importantly, loves you very much~ ‚ù§Ô∏è&lt;/p&gt; &#xA;&lt;img width=&#34;450px&#34; src=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/.github/img/fish.png&#34; alt=&#34;a command-line interface showing the text &#39;it&#39;s okay to make mistakes&#39; after the user has failed to enter their password correctly three times in a row&#34;&gt; &#xA;&lt;h2&gt;üöö installation&lt;a name=&#34;installation&#34;&gt;&lt;/a&gt; &lt;small&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/#toc&#34;&gt;top ‚ñ≤&lt;/a&gt;&lt;/sup&gt;&lt;/small&gt;&lt;/h2&gt; &#xA;&lt;p&gt;mommy works on any system. mommy is tested on ubuntu, debian, archlinux, fedora, nixpkgs, macos, freebsd, netbsd, openbsd, and windows~&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;don&#39;t see your favourite distro or package manager listed? need help? otherwise not satisfied? &lt;a href=&#34;https://github.com/FWDekker/mommy/issues&#34;&gt;please open an issue&lt;/a&gt;~&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;üë©‚Äçüíº with a package manager&lt;/h3&gt; &#xA;&lt;p&gt;find your operating system and package manager for the right instructions~&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;alpine linux&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;homebrew&lt;/strong&gt; (automatic updates)&lt;br&gt; installs from the &lt;a href=&#34;https://github.com/FWDekker/homebrew-mommy&#34;&gt;mommy tap&lt;/a&gt;. (requires &lt;a href=&#34;https://brew.sh/&#34;&gt;brew&lt;/a&gt;.) &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew tap fwdekker/mommy&#xA;brew install mommy&#xA;&lt;/code&gt;&lt;/pre&gt; after installing, check the &lt;a href=&#34;https://docs.brew.sh/Shell-Completion&#34;&gt;brew documentation on how to enable shell completions&lt;/a&gt;~&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;apk (github release)&lt;/strong&gt; (manual updates) &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# download latest package from github release&#xA;curl -s https://api.github.com/repos/FWDekker/mommy/releases/latest | grep &#34;browser_download_url.*\.apk&#34; | cut -d : -f 2,3 | tr -d \&#34; | xargs curl -sLOJ&#xA;# install package&#xA;sudo apk add --allow-untrusted ./mommy-*.apk&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;arch linux&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;arch user repository&lt;/strong&gt; (automatic updates)&lt;br&gt; installs from the &lt;a href=&#34;https://aur.archlinux.org/packages/mommy&#34;&gt;arch user repository&lt;/a&gt;, allowing for automatic updates. you should probably use &lt;a href=&#34;https://wiki.archlinux.org/title/AUR_helpers&#34;&gt;an aur helper&lt;/a&gt; to do this: &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# if you use yay&#xA;yay -S mommy&#xA;# if you use paru&#xA;paru -S mommy&#xA;# if you use aura&#xA;aura -A mommy&#xA;# and so on&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;homebrew&lt;/strong&gt; (automatic updates)&lt;br&gt; installs from the &lt;a href=&#34;https://github.com/FWDekker/homebrew-mommy&#34;&gt;mommy tap&lt;/a&gt;. (requires &lt;a href=&#34;https://brew.sh/&#34;&gt;brew&lt;/a&gt;.) &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew tap fwdekker/mommy&#xA;brew install mommy&#xA;&lt;/code&gt;&lt;/pre&gt; after installing, check the &lt;a href=&#34;https://docs.brew.sh/Shell-Completion&#34;&gt;brew documentation on how to enable shell completions&lt;/a&gt;~&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;pacman (github release)&lt;/strong&gt; (manual updates) &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# download latest package from github release&#xA;curl -s https://api.github.com/repos/FWDekker/mommy/releases/latest | grep &#34;browser_download_url.*\.pacman&#34; | cut -d : -f 2,3 | tr -d \&#34; | xargs curl -sLOJ&#xA;# install package&#xA;sudo pacman -U ./mommy-*.pacman&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;debian/ubuntu/apt-based&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;apt ‚â•2.2.4&lt;/strong&gt; (automatic updates)&lt;br&gt; this method requires apt v2.2.4 or newer. check your version of apt with &lt;code&gt;apt -v&lt;/code&gt;~&lt;/p&gt; &lt;p&gt;installs from the &lt;a href=&#34;https://github.com/FWDekker/apt-mommy&#34;&gt;mommy apt repository&lt;/a&gt;. the repository supports all architectures and suites~&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo curl -fsSo /etc/apt/sources.list.d/mommy.sources \&#xA;  https://raw.githubusercontent.com/FWDekker/apt-mommy/main/deb/mommy.sources&#xA;&#xA;sudo apt update&#xA;sudo apt install mommy&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;apt &amp;lt;2.2.4&lt;/strong&gt; (automatic updates)&lt;br&gt; this method works on all versions of apt~&lt;/p&gt; &lt;p&gt;installs from the &lt;a href=&#34;https://github.com/FWDekker/apt-mommy&#34;&gt;mommy apt repository&lt;/a&gt;. the repository supports all architectures and suites~&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/a/71384057/&#34;&gt;check this page for details on what this code does&lt;/a&gt;~&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo mkdir -m 0755 -p /etc/apt/keyrings/&#xA;&#xA;curl -fsSL https://raw.githubusercontent.com/FWDekker/apt-mommy/main/deb/Release.key |&#xA;  sudo gpg --dearmor -o /etc/apt/keyrings/mommy.gpg&#xA;&#xA;echo &#34;deb [signed-by=/etc/apt/keyrings/mommy.gpg] https://raw.githubusercontent.com/FWDekker/apt-mommy/main/deb/ ./&#34; |&#xA;  sudo tee /etc/apt/sources.list.d/mommy.list &amp;gt; /dev/null&#xA;&#xA;sudo apt update&#xA;sudo apt install mommy&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;homebrew&lt;/strong&gt; (automatic updates)&lt;br&gt; installs from the &lt;a href=&#34;https://github.com/FWDekker/homebrew-mommy&#34;&gt;mommy tap&lt;/a&gt;. (requires &lt;a href=&#34;https://brew.sh/&#34;&gt;brew&lt;/a&gt;.)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew tap fwdekker/mommy&#xA;brew install mommy&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;after installing, check the &lt;a href=&#34;https://docs.brew.sh/Shell-Completion&#34;&gt;brew documentation on how to enable shell completions&lt;/a&gt;~&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;apt (github release)&lt;/strong&gt; (manual updates)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# download latest package from github release&#xA;curl -s https://api.github.com/repos/FWDekker/mommy/releases/latest | grep &#34;browser_download_url.*\.deb&#34; | cut -d : -f 2,3 | tr -d \&#34; | xargs curl -sLOJ&#xA;# install package&#xA;sudo apt install ./mommy*.deb&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;freebsd&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;pkg (github release)&lt;/strong&gt; (manual updates) &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# download latest package from github release&#xA;curl -s https://api.github.com/repos/FWDekker/mommy/releases/latest | grep &#34;browser_download_url.*\.freebsd&#34; | cut -d : -f 2,3 | tr -d \&#34; | xargs curl -sLOJ&#xA;# install package&#xA;sudo pkg add ./mommy-*.freebsd&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;macos&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;homebrew&lt;/strong&gt; (automatic updates)&lt;br&gt; installs from the &lt;a href=&#34;https://github.com/FWDekker/homebrew-mommy&#34;&gt;mommy tap&lt;/a&gt;. (requires &lt;a href=&#34;https://brew.sh/&#34;&gt;brew&lt;/a&gt;.) &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew tap fwdekker/mommy&#xA;brew install mommy&#xA;&lt;/code&gt;&lt;/pre&gt; after installing, check the &lt;a href=&#34;https://docs.brew.sh/Shell-Completion&#34;&gt;brew documentation on how to enable shell completions&lt;/a&gt;~&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;pkg (github release)&lt;/strong&gt; (manual updates) &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# download latest package from github release&#xA;curl -s https://api.github.com/repos/FWDekker/mommy/releases/latest | grep &#34;browser_download_url.*osx\.pkg&#34; | cut -d : -f 2,3 | tr -d \&#34; | xargs curl -sLOJ&#xA;# install package&#xA;sudo installer -pkg ./mommy*+osx.pkg -target /&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;netbsd&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;pkg_add (github release)&lt;/strong&gt; (manual updates) &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# download latest package from github release&#xA;curl -s https://api.github.com/repos/FWDekker/mommy/releases/latest | grep &#34;browser_download_url.*netbsd\.tgz&#34; | cut -d : -f 2,3 | tr -d \&#34; | xargs curl -sLOJ&#xA;# install package&#xA;sudo pkg_add ./mommy-*+netbsd.tgz&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;nixpkgs/nixos&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;nix-shell&lt;/strong&gt; (temporary)&lt;br&gt; if you&#39;re curious but not ready for commitments, use &lt;code&gt;nix-shell&lt;/code&gt; to temporarily install mommy:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nix-shell -p mommy&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;home-manager&lt;/strong&gt; (persistent)&lt;br&gt; if you use home manager, install mommy by adding the following to your home manager configuration:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;home.packages = with pkgs; [&#xA;  mommy&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;you can configure mommy as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;home.packages = with pkgs; [&#xA;  (mommy.override {&#xA;    mommySettings = {&#xA;      sweetie = &#34;catgirl&#34;;&#xA;    }&#xA;  })&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;check &lt;a href=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/#configuration&#34;&gt;the full list of configuration options&lt;/a&gt;. note that your nix configuration should use lowercase variable names~&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;nixos&lt;/strong&gt; (persistent)&lt;br&gt; install mommy by adding the following to your nixos configuration (usually in &lt;code&gt;/etc/nixos/configuration.nix&lt;/code&gt;):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;environment.systemPackages = with pkgs; [&#xA;  mommy&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;you can configure mommy as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;environment.systemPackages = with pkgs; [&#xA;  (mommy.override {&#xA;    mommySettings = {&#xA;      sweetie = &#34;catgirl&#34;;&#xA;    }&#xA;  })&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;check &lt;a href=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/#configuration&#34;&gt;the full list of configuration options&lt;/a&gt;. note that your nix configuration should use lowercase variable names~&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;openbsd&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;pkg_add (github release)&lt;/strong&gt; (manual updates) &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# download latest package from github release&#xA;curl -s https://api.github.com/repos/FWDekker/mommy/releases/latest | grep &#34;browser_download_url.*openbsd\.tgz&#34; | cut -d : -f 2,3 | tr -d \&#34; | xargs curl -sLOJ&#xA;# install package&#xA;sudo pkg_add -D unsigned ./mommy-*+openbsd.tgz&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;red hat/fedora/opensuse/rpm-based&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;dnf (copr)&lt;/strong&gt; (automatic updates)&lt;br&gt; installs from the &lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/fwdekker/mommy/&#34;&gt;copr repository&lt;/a&gt;. (requires the &lt;code&gt;dnf-plugins-core&lt;/code&gt; package.) &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo dnf copr enable fwdekker/mommy&#xA;sudo dnf install mommy&#xA;&lt;/code&gt;&lt;/pre&gt; packages are signed by &lt;code&gt;fwdekker#mommy@copr.fedorahosted.org&lt;/code&gt;, check for fingerprint &lt;code&gt;E332 C8E6 ADAA 58E4 1974 7CE2 CE16 3CFF 9F79 DD8A&lt;/code&gt;~&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;yum (copr)&lt;/strong&gt; (automatic updates)&lt;br&gt; installs from the &lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/fwdekker/mommy/&#34;&gt;copr repository&lt;/a&gt;. (requires the &lt;code&gt;yum-plugin-core&lt;/code&gt; package.) &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo yum copr enable fwdekker/mommy&#xA;sudo yum install mommy&#xA;&lt;/code&gt;&lt;/pre&gt; packages are signed by &lt;code&gt;fwdekker#mommy@copr.fedorahosted.org&lt;/code&gt;, check for fingerprint &lt;code&gt;E332 C8E6 ADAA 58E4 1974 7CE2 CE16 3CFF 9F79 DD8A&lt;/code&gt;~&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;homebrew&lt;/strong&gt; (automatic updates)&lt;br&gt; installs from the &lt;a href=&#34;https://github.com/FWDekker/homebrew-mommy&#34;&gt;mommy tap&lt;/a&gt;. (requires &lt;a href=&#34;https://brew.sh/&#34;&gt;brew&lt;/a&gt;.) &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew tap fwdekker/mommy&#xA;brew install mommy&#xA;&lt;/code&gt;&lt;/pre&gt; after installing, check the &lt;a href=&#34;https://docs.brew.sh/Shell-Completion&#34;&gt;brew documentation on how to enable shell completions&lt;/a&gt;~&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;dnf (github release)&lt;/strong&gt; (manual updates) &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# download latest package from github release&#xA;curl -s https://api.github.com/repos/FWDekker/mommy/releases/latest | grep &#34;browser_download_url.*\.rpm&#34; | cut -d : -f 2,3 | tr -d \&#34; | xargs curl -sLOJ&#xA;# install package&#xA;sudo dnf install ./mommy-*.rpm&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;windows&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;wsl&lt;/strong&gt; (automatic or manual updates)&lt;br&gt; follow any of the mommy installation instructions for your installed linux subsystem (default is ubuntu) or &lt;a href=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/#-without-a-package-manager&#34;&gt;build mommy from source&lt;/a&gt;~&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;msys2&lt;/strong&gt; (automatic or manual updates)&lt;br&gt; follow any of the mommy installation instructions for &lt;em&gt;arch linux&lt;/em&gt; (except &lt;strong&gt;do not use the arch user repository method&lt;/strong&gt;) or &lt;a href=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/#-without-a-package-manager&#34;&gt;build mommy from source&lt;/a&gt;~&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;cygwin&lt;/strong&gt; (manual updates)&lt;br&gt; there is no mommy package for cygwin. instead, you can &lt;a href=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/#-without-a-package-manager&#34;&gt;build mommy from source&lt;/a&gt; (aka: run a script that copies a few files for you)~&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;üêê without a package manager&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;build from source and install&lt;/summary&gt; &#xA; &lt;p&gt;if you want to customise where and how mommy installs, you can just compile her code yourself~&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;prerequisites&lt;/strong&gt;&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;git&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/make/&#34;&gt;gnu make&lt;/a&gt; (&lt;code&gt;gmake&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;clone repository&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/FWDekker/mommy.git&#xA;cd mommy&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;install&lt;/strong&gt;&lt;br&gt; this step builds mommy&#39;s files and copies them into your system. the exact paths differ per system, so find the instructions that are right for your system.&lt;/p&gt; &#xA;   &lt;blockquote&gt; &#xA;    &lt;p&gt;[!NOTE] if you want to install mommy only for the current user, add &lt;code&gt;prefix=&#39;~/.local/&#39;&lt;/code&gt; before &lt;code&gt;install&lt;/code&gt;~&lt;/p&gt; &#xA;   &lt;/blockquote&gt; &#xA;   &lt;blockquote&gt; &#xA;    &lt;p&gt;[!TIP] check the &lt;a href=&#34;https://github.com/FWDekker/mommy/raw/main/GNUmakefile&#34;&gt;makefile&lt;/a&gt; for a list of all prefix variables you can override~&lt;/p&gt; &#xA;   &lt;/blockquote&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;em&gt;debian/ubuntu/apt-based&lt;/em&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo make install/deb&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;em&gt;freebsd&lt;/em&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo gmake install/freebsd&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;em&gt;macos&lt;/em&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo gmake install/osxpkg&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;em&gt;netbsd&lt;/em&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo gmake install/netbsd&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;em&gt;openbsd&lt;/em&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo gmake install/openbsd&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;em&gt;windows&lt;/em&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;em&gt;all other unix systems&lt;/em&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;test&lt;/strong&gt; (optional)&lt;br&gt; if you want to make sure installation was successful, you can run tests using &lt;a href=&#34;https://github.com/shellspec/shellspec&#34;&gt;shellspec&lt;/a&gt;. run the following from inside the cloned mommy repository&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/shellspec/shellspec.git&#xA;PATH=&#34;$(pwd)/shellspec/:$PATH&#34; make system=1 test&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;some tests will be skipped, depending on which other programs you have installed~&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;uninstall&lt;/strong&gt; (optional)&lt;br&gt; if you want to uninstall after running &lt;code&gt;make install&lt;/code&gt;, just run the same command as in step 3, except you replace &lt;code&gt;install&lt;/code&gt; with &lt;code&gt;uninstall&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;uninstall might not work completely if you installed a different version than the one you&#39;re uninstalling. for the best results, run &lt;code&gt;mommy -v&lt;/code&gt;, check the version number, run &lt;code&gt;git checkout &amp;lt;the version&amp;gt;&lt;/code&gt;, and then perform the uninstallation~&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;use without installing&lt;/summary&gt; &#xA; &lt;p&gt;if you don&#39;t want to use a package manager but also don&#39;t want to bother with &lt;code&gt;make&lt;/code&gt;ing mommy, you can download a universal build of mommy, and play around with that. this will not install any files onto your system. if you&#39;re here because you want to install mommy only for a specific user, the &#34;build from source and install&#34; option is probably a better approach, though~&lt;/p&gt; &#xA; &lt;p&gt;the script below downloads the latest stable release and extracts it for you. if you don&#39;t want to use curl, just &lt;a href=&#34;https://github.com/FWDekker/mommy/releases/latest&#34;&gt;check the latest release&lt;/a&gt; in your browser and download the file ending in &lt;code&gt;+generic.tar.gz&lt;/code&gt; manually~&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# download latest archive from github release&#xA;curl -s https://api.github.com/repos/FWDekker/mommy/releases/latest | grep &#34;browser_download_url.*generic\.tar\.gz&#34; | cut -d : -f 2,3 | tr -d \&#34; | xargs curl -sLOJ&#xA;# extract archive to `mommy`&#xA;tar -C ./ -xzf mommy-*.tar.gz&#xA;# invoke mommy&#xA;./mommy/usr/bin/mommy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;üîÆ what&#39;s next?&lt;/h3&gt; &#xA;&lt;p&gt;check out &lt;a href=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/#usage&#34;&gt;how to use mommy&lt;/a&gt;, read all about &lt;a href=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/#configuration&#34;&gt;ways you can configure mommy&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/#shell-integration&#34;&gt;integrate mommy with your shell&lt;/a&gt;~&lt;/p&gt; &#xA;&lt;img width=&#34;450px&#34; src=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/.github/img/demo.gif&#34; alt=&#34;a command-line interface showing the text &#39;never give up, my love&#39; after running a command that has failed, and showing the text &#39;mommy knew you could do it&#39; after running a command that has succeeded&#34;&gt; &#xA;&lt;h2&gt;üìñ usage&lt;a name=&#34;usage&#34;&gt;&lt;/a&gt; &lt;small&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/#toc&#34;&gt;top ‚ñ≤&lt;/a&gt;&lt;/sup&gt;&lt;/small&gt;&lt;/h2&gt; &#xA;&lt;p&gt;mommy processes (the output status of) a command and compliments you if the command succeeds and encourages you if it fails~&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] the &lt;strong&gt;recommended&lt;/strong&gt; way of long-term mommy usage is to &lt;a href=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/#shell-integration&#34;&gt;integrate mommy into your shell&lt;/a&gt;, so mommy will run after every command you run~&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;üíÉ how to run&lt;a name=&#34;how-to-run&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;for reference, here&#39;s the three main ways to invoke mommy~&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;format&lt;/th&gt; &#xA;   &lt;th&gt;example&lt;/th&gt; &#xA;   &lt;th&gt;when to use&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;mommy [command] ...&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mommy npm test&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;if you want mommy to respond to a single command~&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;mommy -e [command]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mommy -e &#34;ls -l | wc -l&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;if you want mommy when using &lt;code&gt;|&lt;/code&gt; or &lt;code&gt;&amp;gt;&lt;/code&gt;, or need mommy in a script~&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;mommy -s [status]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mommy -s $?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;if you already ran a command and want mommy&#39;s help afterwards~&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;üõ∏ extra options&lt;a name=&#34;extra-options&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;additionally, mommy knows a few extra options, which you can use to discover who mommy is and to tell mommy which &lt;a href=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/#configuration&#34;&gt;configuration files&lt;/a&gt; she should use~&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;short option&lt;/th&gt; &#xA;   &lt;th&gt;long option&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-h&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;opens mommy&#39;s manual page~&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-v&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;displays mommy&#39;s version information~&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;writes output to stdout instead of stderr~&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-c &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;--config=&amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;tells mommy that she should read your &lt;a href=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/#configuration&#34;&gt;config&lt;/a&gt; from &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt;~&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-d &amp;lt;dirs&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;--global-config-dirs=&amp;lt;dirs&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;sets &lt;a href=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/#config-file-locations&#34;&gt;global configuration dirs&lt;/a&gt; to the colon-separated list in &lt;code&gt;&amp;lt;dirs&amp;gt;&lt;/code&gt;~&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;üôã configuration&lt;a name=&#34;configuration&#34;&gt;&lt;/a&gt; &lt;small&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/#toc&#34;&gt;top ‚ñ≤&lt;/a&gt;&lt;/sup&gt;&lt;/small&gt;&lt;/h2&gt; &#xA;&lt;p&gt;mommy&#39;s behavior can be modified using config files. the easiest way to do so is to add your config to the file &lt;code&gt;~/.config/mommy/config.sh&lt;/code&gt;. you can also set up a global config file that is applied to all users, by default in &lt;code&gt;/etc/mommy/config.sh&lt;/code&gt;. &lt;a href=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/#config-file-locations&#34;&gt;read more about the way config files are loaded&lt;/a&gt;~&lt;/p&gt; &#xA;&lt;p&gt;mommy supports &lt;a href=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/#list-of-all-settings&#34;&gt;a lot of different settings&lt;/a&gt;. if you want to configure the value of &lt;code&gt;MOMMY_SWEETIE&lt;/code&gt;, add the following line to your config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;MOMMY_SWEETIE=&#34;catgirl&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;make sure you &lt;em&gt;do not&lt;/em&gt; put spaces around the &lt;code&gt;=&lt;/code&gt;, and you &lt;em&gt;do&lt;/em&gt; put quotes (&lt;code&gt;&#34;&lt;/code&gt;) around the value~&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;a name=&#34;config-file-locations&#34;&gt;&lt;/a&gt;üîç config file locations&lt;/summary&gt; &#xA; &lt;p&gt;when mommy runs, she will first load the system-wide &lt;strong&gt;global&lt;/strong&gt; config file. after that, she will read the user-specific &lt;strong&gt;local&lt;/strong&gt; config file, overriding the values from the global file~&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;to find the &lt;strong&gt;global&lt;/strong&gt; config file, mommy runs the following procedure. &#xA;   &lt;ol&gt; &#xA;    &lt;li&gt;mommy determines the list of global config dirs. &#xA;     &lt;ol&gt; &#xA;      &lt;li&gt;if a list is specified using a &lt;a href=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/#usage&#34;&gt;command-line option&lt;/a&gt;, that list is used.&lt;/li&gt; &#xA;      &lt;li&gt;otherwise, the list consists of all directories in &lt;code&gt;$XDG_CONFIG_DIRS&lt;/code&gt;, plus &lt;code&gt;/etc/mommy&lt;/code&gt;, plus &lt;code&gt;/usr/local/etc/mommy/&lt;/code&gt;.&lt;/li&gt; &#xA;     &lt;/ol&gt; &lt;/li&gt; &#xA;    &lt;li&gt;mommy traverses this list, and stops once she finds a directory that contains the file &lt;code&gt;config.sh&lt;/code&gt;. this file will be the global config file~&lt;/li&gt; &#xA;   &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;li&gt;to find the &lt;strong&gt;local&lt;/strong&gt; config file, mommy runs the following procedure. &#xA;   &lt;ol&gt; &#xA;    &lt;li&gt;if a config file is specified using a &lt;a href=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/#usage&#34;&gt;command-line option&lt;/a&gt;, that file is used.&lt;/li&gt; &#xA;    &lt;li&gt;if &lt;code&gt;$XDG_CONFIG_HOME&lt;/code&gt; is defined, the file &lt;code&gt;$XDG_CONFIG_HOME/mommy/config.sh&lt;/code&gt; is used.&lt;/li&gt; &#xA;    &lt;li&gt;otherwise, &lt;code&gt;$HOME/.config/mommy/config.sh&lt;/code&gt; is used~&lt;/li&gt; &#xA;   &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;a name=&#34;list-of-all-settings&#34;&gt;&lt;/a&gt;üëõ list of all settings&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;variable&lt;/th&gt; &#xA;    &lt;th&gt;description&lt;/th&gt; &#xA;    &lt;th&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/#how-to-configure-lists&#34;&gt;list&lt;/a&gt;?&lt;/th&gt; &#xA;    &lt;th&gt;default&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;MOMMY_CAREGIVER&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;what mommy calls herself&lt;/td&gt; &#xA;    &lt;td&gt;yes&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;mommy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;MOMMY_PRONOUNS&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;mommy&#39;s pronouns for herself. should be three words separated by spaces, as in &lt;code&gt;they them their&lt;/code&gt; (subject, object, possessive)&lt;/td&gt; &#xA;    &lt;td&gt;yes&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;she her her&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;MOMMY_SWEETIE&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;what mommy calls you&lt;/td&gt; &#xA;    &lt;td&gt;yes&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;girl&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;MOMMY_PREFIX&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;what mommy puts at the start of each sentence&lt;/td&gt; &#xA;    &lt;td&gt;yes&lt;/td&gt; &#xA;    &lt;td&gt;&amp;lt;empty&amp;gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;MOMMY_SUFFIX&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;what mommy puts at the end of each sentence&lt;/td&gt; &#xA;    &lt;td&gt;yes&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;~&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;MOMMY_CAPITALIZE&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;0&lt;/code&gt; to start sentences in lowercase, &lt;code&gt;1&lt;/code&gt; for uppercase, anything else to change nothing&lt;/td&gt; &#xA;    &lt;td&gt;no&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;MOMMY_COLOR&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;color of mommy&#39;s text. you can use any &lt;a href=&#34;https://upload.wikimedia.org/wikipedia/commons/1/15/Xterm_256color_chart.svg&#34;&gt;xterm color code&lt;/a&gt;, or write &lt;code&gt;lolcat&lt;/code&gt; to use &lt;a href=&#34;https://github.com/busyloop/lolcat&#34;&gt;lolcat&lt;/a&gt; (install separately). specify multiple colors separated by &lt;code&gt;/&lt;/code&gt; to randomly select one. set to empty string for your terminal&#39;s default color&lt;/td&gt; &#xA;    &lt;td&gt;yes&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;005&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;MOMMY_COMPLIMENTS&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;default compliment &lt;a href=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/#how-to-configure-templates&#34;&gt;templates&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;yes&lt;/td&gt; &#xA;    &lt;td&gt;&amp;lt;various&amp;gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;MOMMY_COMPLIMENTS_EXTRA&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;additional compliment templates you can specify&lt;/td&gt; &#xA;    &lt;td&gt;yes&lt;/td&gt; &#xA;    &lt;td&gt;&amp;lt;empty&amp;gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;MOMMY_COMPLIMENTS_ENABLED&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;1&lt;/code&gt; to enable compliments, anything else to disable&lt;/td&gt; &#xA;    &lt;td&gt;no&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;MOMMY_ENCOURAGEMENTS&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;default encouragement &lt;a href=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/#how-to-configure-templates&#34;&gt;templates&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;yes&lt;/td&gt; &#xA;    &lt;td&gt;&amp;lt;various&amp;gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;MOMMY_ENCOURAGEMENTS_EXTRA&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;additional encouragement templates you can specify&lt;/td&gt; &#xA;    &lt;td&gt;yes&lt;/td&gt; &#xA;    &lt;td&gt;&amp;lt;empty&amp;gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;MOMMY_ENCOURAGEMENTS_ENABLED&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;1&lt;/code&gt; to enable encouragements, anything else to disable&lt;/td&gt; &#xA;    &lt;td&gt;no&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;MOMMY_FORBIDDEN_WORDS&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;mommy will never give outputs that match forbidden strings. each entry is expressed as an &lt;a href=&#34;https://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap09.html#tag_09_04&#34;&gt;extended regex&lt;/a&gt; (see also &lt;code&gt;man grep&lt;/code&gt;). to enforce this, mommy will filter out all templates that match at least one regex. as a failsafe, mommy will also check her final output after choosing and &lt;a href=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/#how-to-configure-templates&#34;&gt;filling in the template&lt;/a&gt;, and will output nothing if she finds a forbidden string. also, if you want, you can replace literal characters with their octal (&lt;em&gt;not hex!&lt;/em&gt;) escape sequences; for example, you can write &lt;code&gt;\0155\0157\0155&lt;/code&gt; instead of &lt;code&gt;mom&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;yes&lt;/td&gt; &#xA;    &lt;td&gt;&amp;lt;empty&amp;gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;MOMMY_IGNORED_STATUSES&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;exit codes that mommy should never reply to. set to empty string to ignore nothing&lt;/td&gt; &#xA;    &lt;td&gt;yes&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;130&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;a name=&#34;how-to-configure-lists&#34;&gt;&lt;/a&gt;ü™£ how to configure lists&lt;/summary&gt; &#xA; &lt;p&gt;some of these settings support lists. mommy chooses a random element from each list each time she is called by you. (except for &lt;code&gt;MOMMY_FORBIDDEN_WORDS&lt;/code&gt; and &lt;code&gt;MOMMY_IGNORED_STATUSES&lt;/code&gt;, where mommy always considers all elements of the list.) in a list, elements are separated by a newline or by a &lt;code&gt;/&lt;/code&gt;. elements that contain whitespace only, and elements that start with a &lt;code&gt;#&lt;/code&gt; are ignored~&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;for example, if you set &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;MOMMY_SWEETIE=&#34;girl/kitten&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; then mommy will sometimes call you &lt;code&gt;girl&lt;/code&gt;, and sometimes &lt;code&gt;kitten&lt;/code&gt;~&lt;/li&gt; &#xA;  &lt;li&gt;if you set &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;MOMMY_CAREGIVER=&#34;mommy&#xA;mummy/#daddy/caregiver&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; then mommy will call herself &lt;code&gt;mommy&lt;/code&gt;, &lt;code&gt;mummy&lt;/code&gt;, or &lt;code&gt;caregiver&lt;/code&gt;, but not &lt;code&gt;daddy&lt;/code&gt;~&lt;/li&gt; &#xA;  &lt;li&gt;if you set &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;MOMMY_PRONOUNS=&#34;she her her/they them their&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; then mommy may choose between &lt;code&gt;mommy knows she loves her girl&lt;/code&gt; and &lt;code&gt;mommy knows they love their girl&lt;/code&gt; (but not &lt;code&gt;mommy knows they love her girl&lt;/code&gt;)~&lt;/li&gt; &#xA;  &lt;li&gt;if you set &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;MOMMY_FORBIDDEN_WORDS=&#34;cat/dog&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; then mommy will never use templates that contain &lt;code&gt;cat&lt;/code&gt;, and will never use templates that contain &lt;code&gt;dog&lt;/code&gt;~&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;a name=&#34;how-to-configure-templates&#34;&gt;&lt;/a&gt;üß¨ how to configure templates&lt;/summary&gt; &#xA; &lt;p&gt;you can add a &lt;a href=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/#how-to-configure-lists&#34;&gt;list&lt;/a&gt; of your own compliments to either &lt;code&gt;MOMMY_COMPLIMENTS&lt;/code&gt; or &lt;code&gt;MOMMY_COMPLIMENTS_EXTRA&lt;/code&gt;. there is a slight difference between the two lists:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;if you want both the default &lt;em&gt;and&lt;/em&gt; your own compliments, add your own compliments to &lt;code&gt;MOMMY_COMPLIMENTS_EXTRA&lt;/code&gt;~&lt;/li&gt; &#xA;  &lt;li&gt;if you want your own compliments and &lt;em&gt;not&lt;/em&gt; the default compliments, add your own compliments to &lt;code&gt;MOMMY_COMPLIMENTS&lt;/code&gt;~&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;and similarly so for encouragements~&lt;/p&gt; &#xA; &lt;p&gt;inside compliments and encouragements, you can put placeholders that contain the random values that mommy chose. for example, if you add the compliment &lt;code&gt;%%CAREGIVER%% loves you&lt;/code&gt;, and have &lt;code&gt;MOMMY_CAREGIVER=your mommy&lt;/code&gt;, then mommy outputs &lt;code&gt;your mommy loves you&lt;/code&gt;~&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;variable&lt;/th&gt; &#xA;    &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;%%CAREGIVER%%&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;what mommy calls herself&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;%%THEY%%&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;mommy&#39;s subject pronoun (e.g. they, she, he)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;%%THEM%%&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;mommy&#39;s object pronoun (e.g. them, her, he)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;%%THEIR%%&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;mommy&#39;s possessive pronoun (e.g. their, her, he)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;%%SWEETIE%%&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;what mommy calls you&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;%%N%%&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;a newline&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;%%S%%&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;a forward slash (&lt;code&gt;/&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;üêö shell integration&lt;a name=&#34;shell-integration&#34;&gt;&lt;/a&gt; &lt;small&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/#toc&#34;&gt;top ‚ñ≤&lt;/a&gt;&lt;/sup&gt;&lt;/small&gt;&lt;/h2&gt; &#xA;&lt;p&gt;instead of calling mommy for each command, you can fully integrate mommy with your shell to get mommy&#39;s output each time you run any command. here are some examples on how you can do that in various shells. recall that you can add &lt;code&gt;MOMMY_COMPLIMENTS_ENABLED=0&lt;/code&gt; to your mommy config file to disable compliments while keeping encouragements~&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;this is just a small list of possibilities. if you know of another way to integrate mommy, feel free to contribute them by opening a pull request!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;ü™Ö bash&lt;/summary&gt; &#xA; &lt;p&gt;in bash you can set &lt;a href=&#34;https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#index-PROMPT_005fCOMMAND&#34;&gt;&lt;code&gt;PROMPT_COMMAND&lt;/code&gt;&lt;/a&gt; to run mommy after each command. just add the following line to &lt;code&gt;~/.bashrc&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;PROMPT_COMMAND=&#34;mommy -1 -s \$?; $PROMPT_COMMAND&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;img width=&#34;450px&#34; src=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/.github/img/demo.gif&#34; alt=&#34;bash showing the text &#39;it&#39;s okay to make mistakes&#39; after running a command that has failed&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;üìà nushell&lt;/summary&gt; &#xA; &lt;p&gt;in nushell you can have mommy output a message on the right side of your prompt by adding the following line to your &lt;code&gt;~/.config/nushell/config.nu&lt;/code&gt; file:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$env.PROMPT_COMMAND_RIGHT = {|| mommy -1 -s $env.LAST_EXIT_CODE }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;img width=&#34;450px&#34; src=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/.github/img/nushell.png&#34; alt=&#34;nushell showing the text &#39;just a little further, mommy knows you can do it&#39; in the right prompt after running a command that has failed&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;üêü fish&lt;/summary&gt; &#xA; &lt;p&gt;in fish you can have mommy output a message on the right side of your prompt by creating &lt;code&gt;~/.config/fish/functions/fish_right_prompt.fish&lt;/code&gt; with the following contents:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;function fish_right_prompt&#xA;    mommy -1 -s $status&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;if you have an &lt;a href=&#34;https://github.com/oh-my-fish/oh-my-fish&#34;&gt;oh my fish&lt;/a&gt; theme installed, check the docs of your theme to see if there&#39;s an easy way to extend the theme&#39;s right prompt. if not, you can either overwrite it with the above code, or copy-paste the theme&#39;s code into your own config file and then add mommy yourself~&lt;/p&gt; &#xA; &lt;img width=&#34;450px&#34; src=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/.github/img/fish.png&#34; alt=&#34;fish shell showing the text &#39;it&#39;s okay to make mistakes&#39; in the right prompt after running a command that has failed&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;üí§ zsh&lt;/summary&gt; &#xA; &lt;p&gt;depending on where you want mommy&#39;s output, the instructions are a bit different. you can either get the output above your prompt, or aligned to the right~&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;above the prompt&lt;/strong&gt;&lt;br&gt; to get mommy&#39;s output on a separate line above your prompt, add the following line to &lt;code&gt;~/.zshrc&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;precmd() { mommy -1 -s $? }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;to the right of each command&lt;/strong&gt;&lt;br&gt; to get mommy&#39;s output on the same line as your prompt, aligned to the right, add the following to &lt;code&gt;~/.zshrc&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;set -o PROMPT_SUBST&#xA;RPS1=&#39;$(mommy -1 -s $?)&#39;  # using single quotes here is required!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;and add the following to your mommy config:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;MOMMY_COLOR=&#34;&#34;&#xA;MOMMY_PREFIX=&#34;%F{005}/%F{006}&#34;&#xA;MOMMY_SUFFIX=&#34;~%f&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;normally, mommy sets colors using standard ansi color codes, but zsh&#39;s support is a bit special, resulting in zsh miscalculating the prompt width, which looks like your prompt is misaligned or shifted. to fix this, you should disable mommy&#39;s color feature and manually set colors in the prefix option. to specify colors, use zsh&#39;s special syntax, where the numbers correspond to the &lt;a href=&#34;https://upload.wikimedia.org/wikipedia/commons/1/15/Xterm_256color_chart.svg&#34;&gt;xterm color codes&lt;/a&gt;. finally, the &lt;code&gt;%f&lt;/code&gt; in the suffix resets the colors~&lt;/p&gt; &#xA; &lt;img width=&#34;450px&#34; src=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/.github/img/zsh.png&#34; alt=&#34;zsh showing the text &#39;never give up, my love&#39; in the right prompt after running a command that has failed&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;üêå other shells&lt;/summary&gt; &#xA; &lt;p&gt;as a generic method, in any posix shell (including &lt;code&gt;sh&lt;/code&gt;, &lt;code&gt;ash&lt;/code&gt;, &lt;code&gt;dash&lt;/code&gt;, &lt;code&gt;bash&lt;/code&gt;) you can change the prompt itself to contain a message from mommy by setting the &lt;code&gt;$PS1&lt;/code&gt; variable:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;PS1=&#34;\$(mommy -1 -s \$?)$PS1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;to improve the spacing, set &lt;code&gt;MOMMY_SUFFIX=&#34;~ &#34;&lt;/code&gt; in mommy&#39;s config file.&lt;/p&gt; &#xA; &lt;p&gt;add the above line to the config file for your shell (e.g. &lt;code&gt;.bashrc&lt;/code&gt; for &lt;code&gt;bash&lt;/code&gt;) to apply it each time you open the shell. some shells (&lt;code&gt;dash&lt;/code&gt;, &lt;code&gt;pdksh&lt;/code&gt;) do not have a config file like &lt;code&gt;.bashrc&lt;/code&gt;, but you can enable one by adding the following line to &lt;code&gt;~/.profile&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export ENV=&#34;$HOME/.shrc&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;note that this will apply to all (non-login) posix shells that you open. after that, add the above-mentioned line that defines &lt;code&gt;PS1&lt;/code&gt; to &lt;code&gt;~/.shrc&lt;/code&gt;. log out and back in, and mommy will appear in your shell~&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;a name=&#34;renaming-the-mommy-executable&#34;&gt;&lt;/a&gt;‚úçÔ∏è renaming the mommy executable&lt;/summary&gt; &#xA; &lt;p&gt;if you use any of the above integrations, you don&#39;t have to call mommy directly. if you don&#39;t want that, but also don&#39;t want to write &lt;code&gt;mommy&lt;/code&gt;, this section explains how you can instead write, say, &lt;code&gt;daddy&lt;/code&gt;, &lt;code&gt;marija&lt;/code&gt;, or &lt;code&gt;sinterklaas&lt;/code&gt;~&lt;/p&gt; &#xA; &lt;p&gt;mommy is installed in slightly different locations on different systems, but you can easily find where mommy is installed with &lt;code&gt;whereis mommy&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ whereis mommy&#xA;mommy: /usr/bin/mommy /usr/share/man/man1/mommy.1.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;the exact output of &lt;code&gt;whereis&lt;/code&gt; differs depending on your system, but in this case you can see that the program is installed in &lt;code&gt;/usr/bin/mommy&lt;/code&gt; (and the manual page in &lt;code&gt;/usr/share/man/man1/mommy.1.gz&lt;/code&gt;). if &lt;code&gt;whereis mommy&lt;/code&gt; doesn&#39;t work, mommy is not on your path, but you can still find her with &lt;code&gt;find / -name mommy&lt;/code&gt;~&lt;/p&gt; &#xA; &lt;p&gt;anyway, after finding mommy, you can just symlink using the following commands: (if &lt;code&gt;whereis&lt;/code&gt; gave different paths than the ones above, then change these commands accordingly)&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo ln -fs /usr/bin/mommy /usr/bin/daddy&#xA;sudo ln -fs /usr/share/man/man1/mommy.1.gz /usr/share/man/man1/daddy.1.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;[!IMPORTANT] uninstalling mommy will not remove the manually created symlinks~&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;‚öóÔ∏è development&lt;a name=&#34;development&#34;&gt;&lt;/a&gt; &lt;small&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/#toc&#34;&gt;top ‚ñ≤&lt;/a&gt;&lt;/sup&gt;&lt;/small&gt;&lt;/h2&gt; &#xA;&lt;p&gt;this section explains how to build mommy from source, in case you want to &lt;a href=&#34;https://github.com/FWDekker/mommy/raw/main/CONTRIBUTING.md&#34;&gt;help with development&lt;/a&gt; or for any other reason~&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;üé¨ run&lt;/summary&gt; &#xA; &lt;p&gt;you can actually just directly run the script in &lt;code&gt;src/main/sh/mommy&lt;/code&gt;. the only difference will be that the &lt;code&gt;-h&lt;/code&gt; and &lt;code&gt;-v&lt;/code&gt; options may not work correctly. if that annoys you, run &lt;code&gt;make build&lt;/code&gt; after each change, and use &lt;code&gt;build/bin/mommy&lt;/code&gt; instead~&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;üß™ tests&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;strong&gt;requirements&lt;/strong&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/shellspec/shellspec&#34;&gt;shellspec&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;test local code&lt;/strong&gt; &#xA;   &lt;ol&gt; &#xA;    &lt;li&gt;all tests &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;li&gt;unit tests &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make test/unit&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;li&gt;integration tests &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make test/integration&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;test installed code&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make system=1 test&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;configuration&lt;/strong&gt;&lt;br&gt; except for &lt;code&gt;system=1&lt;/code&gt;, test behaviour is configured with environment variables. check the various files in &lt;a href=&#34;https://github.com/FWDekker/mommy/tree/main/src/test&#34;&gt;&lt;code&gt;src/test/&lt;/code&gt;&lt;/a&gt; to find &#39;em all~&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;üè¨ distribution&lt;/summary&gt; &#xA; &lt;p&gt;mommy is distributed in three ways:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;attached as &lt;strong&gt;binary packages&lt;/strong&gt; to each github release,&lt;/li&gt; &#xA;  &lt;li&gt;built on &lt;strong&gt;build servers&lt;/strong&gt;,&lt;/li&gt; &#xA;  &lt;li&gt;and available as &lt;strong&gt;source builds&lt;/strong&gt; (&#34;ports&#34;, basically) on a few servers.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;let&#39;s go into them in more detail~&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;üì¶ binary packages&lt;/strong&gt;&lt;br&gt; the binary packages attached to the github release are built with the &lt;a href=&#34;https://github.com/FWDekker/mommy/raw/main/GNUmakefile&#34;&gt;makefile&lt;/a&gt;. run &lt;code&gt;make list&lt;/code&gt; to see a list of build targets; you&#39;re looking for the ones starting with &lt;code&gt;dist/&lt;/code&gt;~&lt;/p&gt; &lt;p&gt;to build the packages, you need at least gnu make, ruby, and &lt;a href=&#34;https://github.com/jordansissel/fpm&#34;&gt;fpm&lt;/a&gt;. (actually, you don&#39;t need fpm for netbsd and openbsd.) on debian-based systems, you already have gnu make, so you only need&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt install ruby&#xA;sudo gem install fpm&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;after that, just run &lt;code&gt;make dist/deb&lt;/code&gt; (or better: &lt;code&gt;mommy make dist/deb&lt;/code&gt;), and a &lt;code&gt;.deb&lt;/code&gt; package will be built in &lt;code&gt;dist/&lt;/code&gt;. run &lt;code&gt;make&lt;/code&gt; or &lt;code&gt;make list&lt;/code&gt; for a list of valid build targets. a special target is &lt;code&gt;install&lt;/code&gt;, which directly copies the files into the specified directories on your system. these directories can be changed by setting &lt;code&gt;prefix&lt;/code&gt; variables, as in &lt;code&gt;make prefix=/usr/ install&lt;/code&gt;. i recommend running &lt;code&gt;make --dry-run prefix=/usr/ install&lt;/code&gt; first so you can verify that all directories are calculated correctly. check the &lt;a href=&#34;https://github.com/FWDekker/mommy/raw/main/GNUmakefile&#34;&gt;makefile&lt;/a&gt; for more details~&lt;/p&gt; &lt;p&gt;all systems can build packages for themselves without additional dependencies beyond those noted above. if you want to compile for a different system, you may need additional dependencies. for example, if you want to build packages for alpine linux, archlinux, and rpm from a debian-like system, you will respectively need&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt install libarchive-tools rpm zstd&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and then you can run&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make dist/apk dist/pacman dist/rpm&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;unfortunately, packages for macos, netbsd, and openbsd cannot be built on systems other than themselves~&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;üèóÔ∏è build servers&lt;/strong&gt;&lt;br&gt; build servers build mommy distributions on-demand for each release, and make the created packages available for all users. how sweet~&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://github.com/FWDekker/apt-mommy&#34;&gt;apt-mommy&lt;/a&gt; is a github-based apt repository that hosts mommy&#39;s &lt;code&gt;.deb&lt;/code&gt; packages after they have been built in &lt;a href=&#34;https://github.com/FWDekker/mommy/actions/workflows/cd.yml&#34;&gt;mommy&#39;s cd pipeline&lt;/a&gt;~&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/fwdekker/mommy/&#34;&gt;copr&lt;/a&gt; builds packages for fedora and epel~&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;üå± source builds&lt;/strong&gt;&lt;br&gt; some servers host instructions on how to build mommy, but don&#39;t do any work beyond that. users connect to the server, get the latest instructions, and their system builds mommy for them locally~&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;for &lt;strong&gt;arch linux&lt;/strong&gt;, the &lt;a href=&#34;https://aur.archlinux.org/&#34;&gt;arch user repository&lt;/a&gt; hosts the &lt;a href=&#34;https://aur.archlinux.org/packages/mommy&#34;&gt;mommy package&lt;/a&gt;. a development mirror is hosted on github in &lt;a href=&#34;https://github.com/FWDekker/aur-mommy&#34;&gt;aur-mommy&lt;/a&gt;~&lt;/li&gt; &#xA;    &lt;li&gt;for &lt;strong&gt;homebrew&lt;/strong&gt;, mommy has the &lt;a href=&#34;https://github.com/FWDekker/homebrew-mommy&#34;&gt;homebrew-mommy&lt;/a&gt; repository on github, which is resolved automatically by the brew client based on the repository&#39;s name~&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;üìØ release&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/FWDekker/mommy/tree/main&#34;&gt;&lt;code&gt;main&lt;/code&gt;&lt;/a&gt; always contains the latest stable version. to release a new version, just use the &lt;a href=&#34;https://github.com/FWDekker/mommy/actions/workflows/cd.yml&#34;&gt;deploy action&lt;/a&gt;, which can be activated using a &lt;code&gt;workflow_dispatch&lt;/code&gt; event~&lt;/p&gt; &#xA; &lt;p&gt;&lt;b&gt;release checklists&lt;/b&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;before triggering deployment&lt;/strong&gt;&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;update &lt;code&gt;version&lt;/code&gt;~&lt;/li&gt; &#xA;    &lt;li&gt;update all changelogs~ &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;update &lt;code&gt;CHANGELOG.md&lt;/code&gt;~ &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt;do not leave a placeholder section for &lt;code&gt;[unreleased]&lt;/code&gt;, because it will end up like that in the &lt;code&gt;.deb&lt;/code&gt;&#39;s &lt;code&gt;changelog.gz&lt;/code&gt;~&lt;/li&gt; &#xA;        &lt;li&gt;remove empty subsections for the new release~&lt;/li&gt; &#xA;        &lt;li&gt;ensure no line breaks are used as whitespace; github release notes use them as actual line breaks~&lt;/li&gt; &#xA;       &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;li&gt;update &lt;code&gt;pkg/rpkg/mommy.spec.rpkg&lt;/code&gt; if changes were made to copr&#39;s rpkg packaging process~&lt;/li&gt; &#xA;      &lt;li&gt;update &lt;code&gt;pkg/fpm/deb.changelog&lt;/code&gt; if changes were made to fpm&#39;s debian packaging process~&lt;/li&gt; &#xA;      &lt;li&gt;update &lt;code&gt;pkg/fpm/rpm.changelog&lt;/code&gt; if changes were made to fpm&#39;s rpm packaging process~&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;update acknowledgements in &lt;code&gt;README.md&lt;/code&gt;~&lt;/li&gt; &#xA;    &lt;li&gt;update promotional images in &lt;code&gt;.github/img/&lt;/code&gt;~&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;after triggering deployment&lt;/strong&gt;&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;a new github release is created automatically~&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://github.com/FWDekker/aur-mommy/&#34;&gt;aur-mommy&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;updated automatically when &lt;code&gt;mommy&lt;/code&gt; updates&lt;/li&gt; &#xA;      &lt;li&gt;always &lt;a href=&#34;https://github.com/FWDekker/aur-mommy/actions?query=branch%3Amaster&#34;&gt;manually check deployment status&lt;/a&gt;~&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/fwdekker/mommy/&#34;&gt;copr&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;updated automatically when &lt;code&gt;mommy&lt;/code&gt; updates&lt;/li&gt; &#xA;      &lt;li&gt;always &lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/fwdekker/mommy/builds/&#34;&gt;manually check deployment status&lt;/a&gt;~&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://github.com/FWDekker/apt-mommy/&#34;&gt;apt-mommy&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;updated automatically when &lt;code&gt;mommy&lt;/code&gt; updates&lt;/li&gt; &#xA;      &lt;li&gt;always &lt;a href=&#34;https://github.com/FWDekker/apt-mommy/commits/main&#34;&gt;manually check deployment status&lt;/a&gt;~&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://github.com/FWDekker/homebrew-mommy&#34;&gt;homebrew-mommy&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;updated automatically when &lt;code&gt;mommy&lt;/code&gt; updates&lt;/li&gt; &#xA;      &lt;li&gt;always &lt;a href=&#34;https://github.com/FWDekker/homebrew-mommy/actions?query=branch%3Amain&#34;&gt;manually check deployment status&lt;/a&gt;~&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;üíñ acknowledgements&lt;a name=&#34;acknowledgements&#34;&gt;&lt;/a&gt; &lt;small&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FWDekker/mommy/main/#toc&#34;&gt;top ‚ñ≤&lt;/a&gt;&lt;/sup&gt;&lt;/small&gt;&lt;/h2&gt; &#xA;&lt;p&gt;mommy recognises &lt;em&gt;all&lt;/em&gt; contributors, no matter the size of the contribution. if mommy should add, remove, or change anything here, &lt;a href=&#34;https://github.com/FWDekker/mommy/issues/new&#34;&gt;open an issue&lt;/a&gt; or &lt;a href=&#34;https://fwdekker.com/about/&#34;&gt;contact the author&lt;/a&gt;~&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;mommy thanks &lt;a href=&#34;https://github.com/Gankra&#34;&gt;aria beingessner&lt;/a&gt; for creating &lt;a href=&#34;https://github.com/Gankra/cargo-mommy&#34;&gt;cargo-mommy&lt;/a&gt;, which inspired mommy to spawn herself into existence~&lt;/li&gt; &#xA; &lt;li&gt;mommy thanks &lt;a href=&#34;https://github.com/sudofox&#34;&gt;austin burk&lt;/a&gt; for creating &lt;a href=&#34;https://github.com/sudofox/shell-mommy&#34;&gt;shell-mommy&lt;/a&gt; and contributing to the mommy-sphere; mommy did not know about shell-mommy before embarking on her journey, but loves her very much~&lt;/li&gt; &#xA; &lt;li&gt;mommy thanks &lt;a href=&#34;https://github.com/natawie&#34;&gt;natawie&lt;/a&gt; for &lt;a href=&#34;https://github.com/FWDekker/mommy/issues/39&#34;&gt;suggesting publishing mommy on copr&lt;/a&gt; and &lt;a href=&#34;https://github.com/FWDekker/mommy/pull/48&#34;&gt;writing the zsh completions&lt;/a&gt;~&lt;/li&gt; &#xA; &lt;li&gt;mommy thanks &lt;a href=&#34;https://github.com/dsprenkels&#34;&gt;amber sprenkels&lt;/a&gt; for &lt;a href=&#34;https://github.com/FWDekker/mommy/issues/45&#34;&gt;reporting a bug&lt;/a&gt;, &lt;a href=&#34;https://github.com/FWDekker/mommy/issues/46&#34;&gt;sharing great ideas&lt;/a&gt;, and &lt;a href=&#34;https://github.com/FWDekker/mommy/pull/47&#34;&gt;making mommy talk less like a robot&lt;/a&gt;~&lt;/li&gt; &#xA; &lt;li&gt;mommy thanks &lt;a href=&#34;https://github.com/wei&#34;&gt;wei he&lt;/a&gt; for creating &lt;a href=&#34;https://github.com/wei/socialify&#34;&gt;socialify&lt;/a&gt;, which mommy uses for her github social preview~&lt;/li&gt; &#xA; &lt;li&gt;mommy thanks &lt;a href=&#34;https://github.com/ckiee&#34;&gt;ckie&lt;/a&gt; for &lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/250034&#34;&gt;bringing mommy to nixpkgs&lt;/a&gt;, &lt;a href=&#34;https://github.com/FWDekker/mommy/pull/61&#34;&gt;several neat improvements&lt;/a&gt;, and for &lt;a href=&#34;https://github.com/NixOS/nixpkgs/pull/274867&#34;&gt;maintaining the nixpkg&lt;/a&gt;~&lt;/li&gt; &#xA; &lt;li&gt;mommy thanks &lt;a href=&#34;https://github.com/aemogie&#34;&gt;aemogie.&lt;/a&gt; for &lt;a href=&#34;https://github.com/FWDekker/mommy/issues/65&#34;&gt;telling her how to integrate with nushell&lt;/a&gt;~&lt;/li&gt; &#xA; &lt;li&gt;mommy thanks &lt;a href=&#34;https://github.com/Zopolis4&#34;&gt;maximilian downey twiss&lt;/a&gt; for &lt;a href=&#34;https://github.com/FWDekker/mommy/pull/68&#34;&gt;bumping mommy&#39;s actions to their latest versions&lt;/a&gt;~&lt;/li&gt; &#xA; &lt;li&gt;mommy thanks &lt;a href=&#34;https://github.com/qeeg&#34;&gt;qeeg&lt;/a&gt; for &lt;a href=&#34;https://github.com/FWDekker/mommy/issues/103&#34;&gt;her suggestion of supporting regexes for forbidden words&lt;/a&gt;~&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>piyushsachdeva/AzureDevOps-Zero-to-Hero</title>
    <updated>2024-04-17T01:37:33Z</updated>
    <id>tag:github.com,2024-04-17:/piyushsachdeva/AzureDevOps-Zero-to-Hero</id>
    <link href="https://github.com/piyushsachdeva/AzureDevOps-Zero-to-Hero" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A central hub for artifacts, agendas, and resources related to the &#34;Azure DevOps Zero to Hero&#34; series on Tech Tutorials with Piyush YouTube channel. Access code snippets, agendas, notes, graphics, and community discussions. Stay updated on new episodes and collaborate with fellow learners.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AzureDevOps-Zero-to-Hero with real-time projects&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to our comprehensive course on Azure DevOps, where we&#39;ll dive deep into concepts, demos, and real-time projects to help you master Azure DevOps and bolster your DevOps skills. &lt;strong&gt;This playlist will be published on my YouTube channel and is free for anyone to use and follow.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Day 0: Introduction to the Course üëá&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/A_N5oHwwmTQ&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/A_N5oHwwmTQ/sddefault.jpg&#34; alt=&#34;Course Introduction&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Day 1: Introduction to Azure DevOps and Basic Concepts üåü&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Status&lt;/strong&gt;: Video is live, check out üëâ &lt;a href=&#34;https://github.com/piyushsachdeva/AzureDevOps-Zero-to-Hero/tree/main/Day1&#34;&gt;Day1&lt;/a&gt; üëà folder for notes and useful links ‚úÖ&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;What is Cloud Computing&lt;/li&gt; &#xA; &lt;li&gt;IaaS VS PaaS VS SaaS&lt;/li&gt; &#xA; &lt;li&gt;What is a Shared Responsibility Model&lt;/li&gt; &#xA; &lt;li&gt;What is a Traditional Build and Deployment workflow&lt;/li&gt; &#xA; &lt;li&gt;What is a Waterfall model in SDLC&lt;/li&gt; &#xA; &lt;li&gt;Problems with the traditional software development life cycle (SDLC)&lt;/li&gt; &#xA; &lt;li&gt;What is Agile, and how it solve the above challenges&lt;/li&gt; &#xA; &lt;li&gt;What is DevOps and Why It Matters&lt;/li&gt; &#xA; &lt;li&gt;What is CI/CD&lt;/li&gt; &#xA; &lt;li&gt;What is Azure DevOps and a quick walkthrough&lt;/li&gt; &#xA; &lt;li&gt;Creating an Azure DevOps Organization&lt;/li&gt; &#xA; &lt;li&gt;Creating an Azure DevOps Project&lt;/li&gt; &#xA; &lt;li&gt;Azure DevOps Pricing&lt;/li&gt; &#xA; &lt;li&gt;Azure DevOps hosting options: Azure DevOps Services VS Azure DevOps Server&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Day 2: Azure Boards and Agile Project Management üìä&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Status&lt;/strong&gt;: Video is live, check out üëâ &lt;a href=&#34;https://github.com/piyushsachdeva/AzureDevOps-Zero-to-Hero/tree/main/Day2&#34;&gt;Day2&lt;/a&gt; üëà folder for notes and useful links ‚úÖ&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;What are Azure DevOps Boards&lt;/li&gt; &#xA; &lt;li&gt;What are Azure board processes, agile, scrum, basic, and CMMI&lt;/li&gt; &#xA; &lt;li&gt;Managing work items in Azure boards&lt;/li&gt; &#xA; &lt;li&gt;Azure board implementation using basic process&lt;/li&gt; &#xA; &lt;li&gt;Working with teams, areas, and iterations&lt;/li&gt; &#xA; &lt;li&gt;Filters in backlogs and boards&lt;/li&gt; &#xA; &lt;li&gt;Azure board implementation using the scrum process&lt;/li&gt; &#xA; &lt;li&gt;Sprint planning and capacity planning&lt;/li&gt; &#xA; &lt;li&gt;Product backlog and taskboard&lt;/li&gt; &#xA; &lt;li&gt;Customizing Kanban boards&lt;/li&gt; &#xA; &lt;li&gt;Customizing dashboards&lt;/li&gt; &#xA; &lt;li&gt;Work item query&lt;/li&gt; &#xA; &lt;li&gt;Customizing team process&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Day 3: Mastering Git and Source Control in Azure DevOps üåø&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Status&lt;/strong&gt;: Video is live, check out üëâ &lt;a href=&#34;https://github.com/piyushsachdeva/AzureDevOps-Zero-to-Hero/tree/main/Day3&#34;&gt;Day3&lt;/a&gt; üëà folder for notes and useful links ‚úÖ&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction to Source Control and Azure Repos&lt;/li&gt; &#xA; &lt;li&gt;Git vs TFVC&lt;/li&gt; &#xA; &lt;li&gt;Configure Visual Code&lt;/li&gt; &#xA; &lt;li&gt;Cloning the repo&lt;/li&gt; &#xA; &lt;li&gt;Commit changes&lt;/li&gt; &#xA; &lt;li&gt;Reviewing history&lt;/li&gt; &#xA; &lt;li&gt;Working with branches&lt;/li&gt; &#xA; &lt;li&gt;Tagging a release&lt;/li&gt; &#xA; &lt;li&gt;Managing repository&lt;/li&gt; &#xA; &lt;li&gt;Managing Pull requests&lt;/li&gt; &#xA; &lt;li&gt;Sample application code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Day 4: Build Pipeline üöÄ&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Status&lt;/strong&gt;: Video is live, check out üëâ &lt;a href=&#34;https://github.com/piyushsachdeva/AzureDevOps-Zero-to-Hero/tree/main/Day4&#34;&gt;Day4&lt;/a&gt; üëà folder for notes and useful links ‚úÖ&lt;/p&gt; &#xA;&lt;h4&gt;Note: For the demo, we will be using the YouTube Clone website&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Provision Azure App Service to host the website.&lt;/li&gt; &#xA; &lt;li&gt;Creating Build Pipelines using the classic editor&lt;/li&gt; &#xA; &lt;li&gt;Creating build pipeline using YAML&lt;/li&gt; &#xA; &lt;li&gt;YAML pipeline structure, the difference between jobs, stages, steps, and tasks&lt;/li&gt; &#xA; &lt;li&gt;Creating a multi-stage CICD pipeline&lt;/li&gt; &#xA; &lt;li&gt;variables, triggers, Build properties, agents&lt;/li&gt; &#xA; &lt;li&gt;Publishing and Download Build Artifacts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Day5: üöÄ Continuous Delivery with Azure DevOps Release Pipeline&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Status&lt;/strong&gt;: Video is live, check out üëâ &lt;a href=&#34;https://github.com/piyushsachdeva/AzureDevOps-Zero-to-Hero/tree/main/Day5&#34;&gt;Day5&lt;/a&gt; üëà folder for notes and useful links ‚úÖ&lt;/p&gt; &#xA;&lt;h4&gt;Note: this is a continuation of the previous video.&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automating Deployment with a multi-stage Release Pipelines&lt;/li&gt; &#xA; &lt;li&gt;Continuous Deployment Triggers&lt;/li&gt; &#xA; &lt;li&gt;Continuous delivery using deployment slots to enable &lt;strong&gt;Blue-Green deployment&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Deployment gates such as Query Work Items and Approvals before the prod deployment&lt;/li&gt; &#xA; &lt;li&gt;Update the code to test the entire CICD process with the Build and Release pipeline&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Day 6: Azure Test Plans and Testing üß™&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Status&lt;/strong&gt;: Video is live, check out üëâ &lt;a href=&#34;https://github.com/piyushsachdeva/AzureDevOps-Zero-to-Hero/tree/main/Day6&#34;&gt;Day6&lt;/a&gt; üëà folder for notes and useful links ‚úÖ&lt;/p&gt; &#xA;&lt;h4&gt;Note: We will be using the Youtube Clone website to implement the below steps&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Azure Test Plan Overview&lt;/li&gt; &#xA; &lt;li&gt;Features of Azure test plan&lt;/li&gt; &#xA; &lt;li&gt;Managing Test Plans, Suites and Cases&lt;/li&gt; &#xA; &lt;li&gt;Subscribe to the test plan free trial&lt;/li&gt; &#xA; &lt;li&gt;Authoring, Running, and Analyzing Manual Tests&lt;/li&gt; &#xA; &lt;li&gt;Azure Test and Feedback extension&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Day 7: Basic Project Artifacts with Azure Artifacts üì¶&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Status&lt;/strong&gt;: Video is live, check out üëâ &lt;a href=&#34;https://github.com/piyushsachdeva/AzureDevOps-Zero-to-Hero/tree/main/Day7&#34;&gt;Day7&lt;/a&gt; üëà folder for notes and useful links ‚úÖ&lt;/p&gt; &#xA;&lt;h4&gt;Note: In this video, we will use a ‚úî Nike Landing page as a sample application for CICD using Azure Artifacts&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Overview of Azure Artifacts&lt;/li&gt; &#xA; &lt;li&gt;Create the Azure DevOps project and check out the application code&lt;/li&gt; &#xA; &lt;li&gt;Set up the infra using Azure Web App&lt;/li&gt; &#xA; &lt;li&gt;Create Azure Artifacts feed to host the packages&lt;/li&gt; &#xA; &lt;li&gt;Create the CI pipeline that builds the package and pushes it to the feed&lt;/li&gt; &#xA; &lt;li&gt;Create the CD pipeline that consumes the package&lt;/li&gt; &#xA; &lt;li&gt;Promote the package to trigger the release pipeline&lt;/li&gt; &#xA; &lt;li&gt;Upstream packages in Azure Artifacts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Day 8: Infrastructure as Code (IaC) with Terraform and Azure DevOpsüöÄ&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Status&lt;/strong&gt;: Video is live, check out üëâ &lt;a href=&#34;https://github.com/piyushsachdeva/AzureDevOps-Zero-to-Hero/tree/main/Day8&#34;&gt;Day8&lt;/a&gt; üëà folder for notes and useful links ‚úÖ&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction to IaC and Tools&lt;/li&gt; &#xA; &lt;li&gt;Various Terraform commands and workflow&lt;/li&gt; &#xA; &lt;li&gt;Creating Terraform configuration files&lt;/li&gt; &#xA; &lt;li&gt;Setting up terraform backend with Azure storage&lt;/li&gt; &#xA; &lt;li&gt;Executing Terraform commands using CLI&lt;/li&gt; &#xA; &lt;li&gt;Azure DevOps CI Pipeline to init, plan, and archive the plan file&lt;/li&gt; &#xA; &lt;li&gt;Azure DevOps CD pipeline to apply the changes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Day9: Self Hosted agents üë®‚Äçüîß on Azure Virtual machine scale sets üßë‚Äçüíª&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Status&lt;/strong&gt;: Video is live, check out üëâ &lt;a href=&#34;https://github.com/piyushsachdeva/AzureDevOps-Zero-to-Hero/tree/main/Day9&#34;&gt;Day9&lt;/a&gt; üëà folder for notes and useful links ‚úÖ&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Microsoft-hosted vs. self-hosted agents&lt;/li&gt; &#xA; &lt;li&gt;Use case of self-hosted agents&lt;/li&gt; &#xA; &lt;li&gt;Ways to setup self-hosted agents: VM, VMSS, container&lt;/li&gt; &#xA; &lt;li&gt;What is a Virtual machine scale set&lt;/li&gt; &#xA; &lt;li&gt;Set up a self-hosted agent using VMSS&lt;/li&gt; &#xA; &lt;li&gt;Register the agent on an agent pool&lt;/li&gt; &#xA; &lt;li&gt;Install custom utilities on the agent&lt;/li&gt; &#xA; &lt;li&gt;Use the self-hosted agent on a pipeline&lt;/li&gt; &#xA; &lt;li&gt;Comparison between self-hosted and Microsoft-hosted agents&lt;/li&gt; &#xA; &lt;li&gt;work folder walkthrough on agent&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Day 10 Managing Containers with Azure DevOps&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Status&lt;/strong&gt;: Video is live, check out üëâ &lt;a href=&#34;https://github.com/piyushsachdeva/AzureDevOps-Zero-to-Hero/tree/main/Day10&#34;&gt;Day10&lt;/a&gt; üëà folder for notes and useful links ‚úÖ&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;What is a container&lt;/li&gt; &#xA; &lt;li&gt;Understanding Virtual machine V/s Containers.&lt;/li&gt; &#xA; &lt;li&gt;Challenges with the non-containerized applications&lt;/li&gt; &#xA; &lt;li&gt;Docker Architecture&lt;/li&gt; &#xA; &lt;li&gt;Containerize a sample To-Do list web app written in React JS.&lt;/li&gt; &#xA; &lt;li&gt;Benefits of a multi-stage docker file&lt;/li&gt; &#xA; &lt;li&gt;What are Azure container instances(ACI)&lt;/li&gt; &#xA; &lt;li&gt;Azure DevOps CICD Pipeline to deploy to ACI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Day 11 Implementing end-to-end CICD using Azure DevOps on Kubernetes.&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Status&lt;/strong&gt;: Video is live, check out üëâ &lt;a href=&#34;https://github.com/piyushsachdeva/AzureDevOps-Zero-to-Hero/tree/main/Day11&#34;&gt;Day11&lt;/a&gt; üëà folder for notes and useful links ‚úÖ&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Basic Introduction of Kubernetes and its benefits&lt;/li&gt; &#xA; &lt;li&gt;Kubernetes Architecture&lt;/li&gt; &#xA; &lt;li&gt;What is the control plane and its components&lt;/li&gt; &#xA; &lt;li&gt;What are Nodes and types of Nodes&lt;/li&gt; &#xA; &lt;li&gt;What is a Pod/Deployment/Service&lt;/li&gt; &#xA; &lt;li&gt;Azure DevOps CICD Pipeline for a web app running on Kubernetes&lt;/li&gt; &#xA; &lt;li&gt;Sample application: My Health Care - Microservices-based Healthcare management app&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Day 12 Security and Permissions in Azure DevOps üîê&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Status&lt;/strong&gt;: Video is live, check out üëâ &lt;a href=&#34;https://github.com/piyushsachdeva/AzureDevOps-Zero-to-Hero/tree/main/Day12&#34;&gt;Day12&lt;/a&gt; üëà folder for notes and useful links ‚úÖ&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enabling advanced security in Azure DevOps&lt;/li&gt; &#xA; &lt;li&gt;Dependency Scanning&lt;/li&gt; &#xA; &lt;li&gt;Secret scanning and managing alerts&lt;/li&gt; &#xA; &lt;li&gt;How to use secrets in your pipeline&lt;/li&gt; &#xA; &lt;li&gt;Code scanning for vulnerabilities&lt;/li&gt; &#xA; &lt;li&gt;Sample Application: My Health Care - Microservices-based Healthcare management app&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Day 13: Serverless app CICD üê≥&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Status&lt;/strong&gt;: Video is live, check out üëâ &lt;a href=&#34;https://github.com/piyushsachdeva/AzureDevOps-Zero-to-Hero/tree/main/Day13&#34;&gt;Day13&lt;/a&gt; üëà folder for notes and useful links ‚úÖ&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction to Azure functions&lt;/li&gt; &#xA; &lt;li&gt;Use case and benefits of an Azure function&lt;/li&gt; &#xA; &lt;li&gt;Introduction to the sample app to be used for this demo: Serverless QR Code Generator&lt;/li&gt; &#xA; &lt;li&gt;Demo creating the Azure function and deploying locally&lt;/li&gt; &#xA; &lt;li&gt;Publishing the function to Azure using CLI tools&lt;/li&gt; &#xA; &lt;li&gt;Build and release pipeline for building and deploying the code to Azure Functions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Day 14: Azure DevOps wiki&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Status&lt;/strong&gt;: Video is live, check out üëâ &lt;a href=&#34;https://github.com/piyushsachdeva/AzureDevOps-Zero-to-Hero/tree/main/Day14&#34;&gt;Day14&lt;/a&gt; üëà folder for notes and useful links ‚úÖ&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Overview of wiki&lt;/li&gt; &#xA; &lt;li&gt;Creating and editing a project Wiki&lt;/li&gt; &#xA; &lt;li&gt;Publishing code as Wiki&lt;/li&gt; &#xA; &lt;li&gt;How we can use Azure DevOps wiki to collaborate on a project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Day 15: Azure DevOps Security best practices üö¢&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Status&lt;/strong&gt;: Video is live, check out üëâ &lt;a href=&#34;https://github.com/piyushsachdeva/AzureDevOps-Zero-to-Hero/tree/main/Day15&#34;&gt;Day15&lt;/a&gt; üëà folder for notes and useful links ‚úÖ&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Azure DevOps Access Control&lt;/li&gt; &#xA; &lt;li&gt;Organization Settings&lt;/li&gt; &#xA; &lt;li&gt;Agent pools Management&lt;/li&gt; &#xA; &lt;li&gt;Pipeline settings&lt;/li&gt; &#xA; &lt;li&gt;Project-level Settings&lt;/li&gt; &#xA; &lt;li&gt;Pipeline security&lt;/li&gt; &#xA; &lt;li&gt;Repo settings&lt;/li&gt; &#xA; &lt;li&gt;Authentication and Authorization&lt;/li&gt; &#xA; &lt;li&gt;Secrets and credentials access&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Day 16: Issue and troubleshooting Azure DevOps&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In this video, we will discuss the most common issues you have faced throughout the series and solutions to those. &lt;strong&gt;Status&lt;/strong&gt;: Video is live, check out üëâ &lt;a href=&#34;https://github.com/piyushsachdeva/AzureDevOps-Zero-to-Hero/tree/main/Day16&#34;&gt;Day16&lt;/a&gt; üëà folder for notes and useful links ‚úÖ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Day 17: Bonus Video: Azure DevOps Scenario-based Interview Questions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In this video, we will discuss the most asked scenario-based interview questions and answers for Azure DevOps &lt;strong&gt;Status&lt;/strong&gt;: Video is live, check out üëâ &lt;a href=&#34;https://github.com/piyushsachdeva/AzureDevOps-Zero-to-Hero/tree/main/InterviewQuestions&#34;&gt;InterviewQuestions&lt;/a&gt; üëà folder for notes and useful links ‚úÖ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Contributions are welcome:&lt;/h3&gt; &#xA;&lt;p&gt;You can raise the pull request to contribute to the course material; please remember to star the repository.&lt;/p&gt; &#xA;&lt;h2&gt;üîó Join our community üëá&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtube.com/@techtutorialswithpiyush&#34;&gt;&lt;img src=&#34;https://www.freeiconspng.com/thumbs/youtube-icon/video-youtube-icon--14.png&#34; height=&#34;60px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.com/invite/FMtJ2bVRUE&#34;&gt;&lt;img src=&#34;https://img.icons8.com/color/2x/discord--v2.png&#34; height=&#34;60px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/piyushsachdeva/&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/91791257/235086411-9ec7aa5e-c095-44ce-b9e6-57b3bc3fead2.png&#34; height=&#34;60px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/thecloudopscomm&#34;&gt;&lt;img src=&#34;https://i.postimg.cc/pVqVTNJd/X-logo.png&#34; height=&#34;60px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.linkedin.com/company/thecloudopscomm/&#34;&gt;&lt;img src=&#34;https://img.icons8.com/fluency/2x/linkedin.png&#34; height=&#34;60px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.instagram.com/techtutorialswithpiyush/&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/91791257/235086447-47658b7b-71fa-4baf-830a-3ba9b3a76a47.png&#34; height=&#34;60px&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>LLM-Red-Team/free-api-hub</title>
    <updated>2024-04-17T01:37:33Z</updated>
    <id>tag:github.com,2024-04-17:/LLM-Red-Team/free-api-hub</id>
    <link href="https://github.com/LLM-Red-Team/free-api-hub" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ü•≥ free-apiÁ≥ªÂàóÈ°πÁõÆÈõÜÂêàÂÖ±‰∫´ËµÑÊ∫êÔºåÂø´Êù•PRÔºÅ&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;free-api-hub&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/orgs/LLM-Red-Team/repositories?q=free-api&#34;&gt;free-apiÁ≥ªÂàóÈ°πÁõÆ&lt;/a&gt; ÈõÜÂêàÂÖ±‰∫´ËµÑÊ∫ê&lt;/p&gt; &#xA;&lt;p&gt;Â¶ÇÊûúÊÇ®ÂØπ &lt;a href=&#34;https://github.com/orgs/LLM-Red-Team/repositories?q=free-api&#34;&gt;free-apiÁ≥ªÂàóÈ°πÁõÆ&lt;/a&gt; ÊÑüÂÖ¥Ë∂£ÔºåÊ¨¢ËøéPRÂàÜ‰∫´ÁöÑÂÜÖÂÆπÂà∞Êú¨‰ªìÂ∫ì„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;‰ΩøÁî®ËØ¥ÊòéÂíåURLÈìæÊé•ÂàÜ‰∫´PRÂú®Êú¨ &lt;code&gt;README.md&lt;/code&gt; ‰∏≠&lt;/p&gt; &#xA;&lt;p&gt;ÊñáÊ°£Á±ªPRÂú® &lt;code&gt;/docs&lt;/code&gt; ÁõÆÂΩï‰∏≠ÔºåÂπ∂Âú® &lt;code&gt;/docs/README.md&lt;/code&gt; ËØ¥Êòé&lt;/p&gt; &#xA;&lt;p&gt;ËÑöÊú¨Á±ªPRÂú® &lt;code&gt;/scripts&lt;/code&gt; ÁõÆÂΩï‰∏≠ÔºåÂπ∂Âú® &lt;code&gt;/scripts/README.md&lt;/code&gt; ËØ¥Êòé&lt;/p&gt; &#xA;&lt;p&gt;ÈùûÂ∏∏ÊÑüË∞¢ÊÇ®ÁöÑÂÖ≥Ê≥®ÂíåÊîØÊåÅÔºÅ&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/LLM-Red-Team/free-api-hub/assets/20235341/5ce7c71d-3a4d-4469-9e4a-24ac9d78cc76&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Ê†∏ÂøÉËµÑÊ∫ê&lt;/h2&gt; &#xA;&lt;h3&gt;all-free-api.yml&lt;/h3&gt; &#xA;&lt;p&gt;docker-compose‰∏ÄÈîÆÂêØÂä®ÊâÄÊúâfree-apiÁöÑËÑöÊú¨ÔºåËøêË°å‰ª•‰∏ãÂëΩ‰ª§ÂêØÂä®„ÄÇ&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker-compose -f all-free-api.yml up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;RenderÂÆπÂô®‰øùÊ¥ª&lt;/h3&gt; &#xA;&lt;p&gt;‰ΩøÁî®RenderÈÉ®ÁΩ≤free-apiÊó∂ÔºåÂÆπÂô®Âú®‰∏ÄÊÆµÊó∂Èó¥‰∏çÊ¥ªÂä®Âêé‰ºöËá™Âä®ÂõûÊî∂ÔºåÂØºËá¥‰∏ãÊ¨°Ë∞ÉÁî®ÂìçÂ∫îÊúâËøë1ÂàÜÈíüÁöÑÂª∂ËøüÔºå‰Ω†ÂèØ‰ª•Áî®‰ª•‰∏ãÊñπÊ°à‰øùÊ¥ªÂÆπÂô®„ÄÇ&lt;/p&gt; &#xA;&lt;h4&gt;ÊñπÊ°à1ÔºöÈÄöËøá‰ªªÊÑèÁõëÊéßÊúçÂä°Ë∞ÉÁî®‰øùÊ¥ª&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Âú®‰Ω†ÊîØÊåÅÁõëÊéßÊúçÂä°ÁöÑÊ°ÜÊû∂ÊàñÁ®ãÂ∫è‰∏äÈù¢ÈÖçÁΩÆÂú®RenderÁöÑfree-apiÂú∞ÂùÄÔºåÂ¶Ç &lt;code&gt;https://kimi-free-api-nut5.onrender.com&lt;/code&gt; Â∞±ÊòØ &lt;code&gt;https://kimi-free-api-nut5.onrender.com/ping&lt;/code&gt;ÔºåÈúÄË¶Å‰ΩøÁî®GETËØ∑Ê±ÇÊñπÊ≥ï„ÄÇ&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ÈÖçÁΩÆÊé¢ÊµãÈ¢ëÁéáÔºåÂª∫ËÆÆ5ÂàÜÈíü‰∏ÄËΩÆ„ÄÇ&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;ÊñπÊ°à2ÔºöÈÄöËøáËÑöÊú¨curlË∞ÉÁî®‰øùÊ¥ª&lt;/h4&gt; &#xA;&lt;p&gt;ÂëΩ‰ª§‰ªÖÈÄÇÁî®‰∫éLinuxÁ≥ªÁªü„ÄÇ&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;ÊîπÂÜô scripts/render_keeplive.sh Êñá‰ª∂ÔºåÂ∞ÜÂæ™ÁéØÈÅçÂéÜÁöÑpingÂú∞ÂùÄÊç¢Êàê‰Ω†ÈÉ®ÁΩ≤Âú®RenderÁöÑfree-apiÂú∞ÂùÄÔºåÂ¶Ç &lt;code&gt;https://kimi-free-api-nut5.onrender.com&lt;/code&gt; Â∞±ÊòØ &lt;code&gt;https://kimi-free-api-nut5.onrender.com/ping&lt;/code&gt;„ÄÇ&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ËøêË°å &lt;code&gt;crontab -e&lt;/code&gt; ÂëΩ‰ª§ÔºåÂú®ÊâìÂºÄÁöÑÁºñËæëÂô®‰∏≠Ê∑ªÂä†Â¶Ç‰∏ãÂÜÖÂÆπÔºà/path/to/render_keeplive.sh ÊõøÊç¢‰∏∫‰Ω†ÁöÑËÑöÊú¨Ë∑ØÂæÑÔºâÔºö&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;*/5 * * * * /path/to/render_keeplive.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;‰øùÂ≠òÂπ∂ÈÄÄÂá∫ÁºñËæëÂô®ÔºåÂèØ‰ª•ÈÄöËøá &lt;code&gt;tail -f /var/log/cron&lt;/code&gt; Êü•ÁúãËÑöÊú¨Ë¢´Ë∞ÉÁî®ÁöÑÊó•Âøó„ÄÇ&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>