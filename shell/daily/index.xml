<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-04T01:43:38Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Aurora-Admin-Panel/deploy</title>
    <updated>2023-08-04T01:43:38Z</updated>
    <id>tag:github.com,2023-08-04:/Aurora-Admin-Panel/deploy</id>
    <link href="https://github.com/Aurora-Admin-Panel/deploy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;一个多服务器端口租用管理面板&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;极光面板&lt;/h1&gt; &#xA;&lt;h2&gt;这是什么？&lt;/h2&gt; &#xA;&lt;p&gt;这是一个多服务器端口租用管理面板，你可以添加多台服务器及端口，并将其分配给任意注册用户，租户则可以很方便地使用被分配的端口来完成各种操作，目前支持的端口功能（&lt;strong&gt;以下功能均支持 AMD64 或 ARM64 架构运行&lt;/strong&gt;）：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.netfilter.org/&#34;&gt;iptables&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.dest-unreach.org/socat/&#34;&gt;socat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ginuerzh/gost&#34;&gt;gost&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Ehco1996/ehco&#34;&gt;ehco&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zephyrchien/realm&#34;&gt;realm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/v2fly/v2ray-core&#34;&gt;v2ray&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/txthinking/brook&#34;&gt;brook&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://iperf.fr&#34;&gt;iperf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.haproxy.org&#34;&gt;haproxy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/erebe/wstunnel&#34;&gt;wstunnel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shadowsocks&#34;&gt;shadowsocks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wangyu-/tinyPortMapper&#34;&gt;tinyPortMapper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/leishi1313/node_exporter&#34;&gt;Prometheus Node Exporter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;目前，全部端口转发功能均已支持 &lt;code&gt;IPV6&lt;/code&gt; 。除 &lt;code&gt;iptables&lt;/code&gt; 以外的转发方式，如果中转机器本身同时具备 &lt;code&gt;IPV4&lt;/code&gt; 和 &lt;code&gt;IPV6&lt;/code&gt; 网络访问能力，可以借助端口转发实现 &lt;code&gt;IPV4 to IPV6&lt;/code&gt; 或 &lt;code&gt;IPV6 to IPV4&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;h3&gt;面板服务器与被控机说明&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;面板建议安装在单独的一台服务器上，建议安装配置为不低于单核 512M 内存的 VPS 中&lt;/strong&gt;，可以直接部署到本地。&lt;strong&gt;被控机端无需做任何特别配置，只需保证面板服务器能够通过 ssh 连接至被控机即可。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;面板服务器在连接被控机的时候会检测被控机是否已经安装好 python （python 为被控机必须依赖），如果被控机上没安装会自动在被控机上通过 apt / yum 执行 python 安装（优先安装python3），如果被控机没有自带 python 且自动安装失败会导致面板显示被控机连接失败（表现为被控机连接状态持续转圈）。&lt;/p&gt; &#xA;&lt;h4&gt;面板（主控机）支持进度：&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;操作系统&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; CentOS 7+&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Debian 8+&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Ubuntu 18+&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Alpine Linux 3.15.0+ （请使用一键脚本安装）&lt;/li&gt; &#xA; &lt;li&gt;虚拟平台&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; KVM&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; VMware&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; OVZ （需要 OVZ 支持 docker）&lt;/li&gt; &#xA; &lt;li&gt;CPU 架构&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; AMD64&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ARM64&lt;/li&gt; &#xA; &lt;li&gt;网络类型&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; IPV4&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; IPV6&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;特别说明：由于 docker 默认不开启 IPV6，如果需要在面板通过 IPV6 连接被控机 SSH，请在面板机器的配置文件中开启 &lt;code&gt;ipv6&lt;/code&gt; 选项，并使用 &lt;code&gt;ip6tables&lt;/code&gt; 命令为容器添加 IPV6 NAT，&lt;strong&gt;命令中的 IPV6 地址不需要做任何更改&lt;/strong&gt;：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 1. docker-compose.yml 配置开启 ipv6 选项，该配置文件默认在 ~/aurora/ 目录下&#xA;# 找到 enable_ipv6: false 该行，将 false 改为 true，重建容器&#xA;cd ~/aurora/ &amp;amp;&amp;amp; docker-compose up -d&#xA;# 2. ip6tables 命令，直接复制粘贴回车即可（注意，重启系统会导致 ip6tables 规则被重置，需要手动重新添加）&#xA;ip6tables -t nat -A POSTROUTING -s fd00:ea23:9c80:4a54:e242:5f97::/96 -j MASQUERADE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;中转机器（被控机）支持进度：&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;操作系统&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; CentOS 7+&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Debian 8+&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Ubuntu 18+&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Alpine Linux 3.15.0+ （正在开发中，仅支持 iptables 转发和流量统计）&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 其他操作系统如果支持 docker，可以参考下面的手动安装方法&lt;/li&gt; &#xA; &lt;li&gt;虚拟平台&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; KVM&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; VMware&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; OVZ&lt;/li&gt; &#xA; &lt;li&gt;CPU 架构&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; AMD64&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ARM64&lt;/li&gt; &#xA; &lt;li&gt;网络类型&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; IPV4&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; IPV6&lt;/li&gt; &#xA; &lt;li&gt;Linux init process&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; systemd&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; SysVinit&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; OpenRC&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;怎么跑起来？&lt;/h2&gt; &#xA;&lt;h2&gt;一键脚本（推荐）&lt;/h2&gt; &#xA;&lt;p&gt;目前已支持一键安装、更新（自动同步旧配置）、卸载面板以及备份数据库、添加超级管理员帐号、更换面板端口等操作。&lt;strong&gt;使用一键脚本安装后，如果仍需使用一脚脚本更新，请勿更改数据库用户名和密码，否则会使得更新后无法同步更改后的数据库用户名和密码，导致数据库连接出错。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bash &amp;lt;(curl -fsSL https://raw.githubusercontent.com/Aurora-Admin-Panel/deploy/main/install.sh)&#xA;# 国内机器安装可以选择使用 fastgit 镜像&#xA;# 但由于拉取 docker 镜像时候默认服务器仍在国外，可能拉取速度较慢&#xA;# 可自行搜索如何配置 Docker Hub 国内镜像加速&#xA;# bash &amp;lt;(curl -fsSL https://raw.fastgit.org/Aurora-Admin-Panel/deploy/main/install.sh) --mirror&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;一键脚本默认从 Github 拉取所需的配置文件，如果是在国内机器安装，请检查连接 Github 的网络是否正常。一键脚本也支持更新测试版本，只需要添加 &lt;code&gt;--dev&lt;/code&gt; 参数执行脚本即可，但是测试版本并不稳定，可能会出现各种问题，不建议在生产环境中使用。&lt;/p&gt; &#xA;&lt;h2&gt;手动安装 — 中转被控机&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;对于不在中转机器（被控机）支持进度里面的系统版本，无法直接使用面板连接中转机器。&lt;/strong&gt; 如果被控机支持运行 docker，则可以利用被控机运行一个网络模式为 host 的特权 centos7 容器，并利用面板连接到 centos7 docker 中，实现转发功能的操作。（或可以参考 &lt;a href=&#34;https://github.com/smartcatboy/aurora-client&#34;&gt;aurora-client&lt;/a&gt; 直接编译被控端镜像运行）&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 启动 centos 7 特权容器，设置网络模式为 host ，并设置为开机自启动&#xA;sudo docker run -d --privileged --name aurora-client --network=host --restart=always -v /lib/modules:/lib/modules centos:7 /usr/sbin/init&#xA;# 进入 centos 7 容器内&#xA;sudo docker exec -it aurora-client bash&#xA;# 在 docker 内安装 openssh 服务端，并修改容器的 ssh 端口（避免跟主机 ssh 服务冲突）&#xA;yum makecache -y &amp;amp;&amp;amp; yum install -y openssh-server&#xA;sed -i &#34;s/#Port 22/Port 62222/&#34; /etc/ssh/sshd_config&#xA;# 启用 ssh 服务&#xA;systemctl enable --now sshd&#xA;# 安装 iptables 转发必须的依赖&#xA;yum install -y iproute&#xA;# 为 root 账号设置密码&#xA;passwd&#xA;# 直接在面板添加中转机器 ip:62222 ，用户名 root ，密码为刚刚设置的密码&#xA;# 卸载时候只需要在面板删除对应中转机，并删除 aurora-client 容器即可&#xA;sudo docker stop aurora-client &amp;amp;&amp;amp; sudo docker rm aurora-client&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;手动安装 — 面板主控机&lt;/h2&gt; &#xA;&lt;p&gt;如果一键脚本提示不支持当前系统版本时，可以尝试使用手动安装的方式。&lt;/p&gt; &#xA;&lt;h3&gt;1. 安装 docker（必须）&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -fsSL https://get.docker.com | sudo bash -s docker &amp;amp;&amp;amp; sudo systemctl enable --now docker&#xA;# 国内机器安装可以选择使用阿里镜像&#xA;# curl -fsSL https://get.docker.com | sudo bash -s docker --mirror Aliyun &amp;amp;&amp;amp; sudo systemctl enable --now docker&#xA;&#xA;# 如果当前执行安装命令的不是 root 用户，请执行下面部分&#xA;# =================非root用户执行==================&#xA;sudo groupadd docker&#xA;sudo usermod -aG docker $USER&#xA;newgrp docker&#xA;# =================非root用户执行==================&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. 安装 docker-compose（必须）&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo curl -L &#34;https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)&#34; -o /usr/local/bin/docker-compose &amp;amp;&amp;amp; sudo chmod +x /usr/local/bin/docker-compose&#xA;&#xA;# 如果 /usr/local/bin 不在环境变量 PATH 里&#xA;# ============================可选================================&#xA;sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose&#xA;# ============================可选================================&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. 生成 SSH 密钥（建议，非必须）&lt;/h3&gt; &#xA;&lt;p&gt;此步操作目的为让面板服务器通过密钥连接被控机 ssh ，&lt;strong&gt;可以提高被控机安全性，非必须步骤&lt;/strong&gt;，如果不采用密钥连接方式，后续在面板添加被控机使可以选择使用密码连接的方式。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 如果面板服务器并没有已经生成好的 ssh 密钥&#xA;ssh-keygen -t rsa -b 4096 -C &#34;your_email@example.com&#34;&#xA;# 后面一直回车，跳过设置 passphase 即可&#xA;# 然后还需要将面板服务器 ~/.ssh/id_rsa.pub 里面的内容复制到每一台被控机的 ~/.ssh/authorized_keys 文件中去。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4. 安装并启动面板（必须）&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir -p ~/aurora &amp;amp;&amp;amp; cd ~/aurora &amp;amp;&amp;amp; wget https://raw.githubusercontent.com/Aurora-Admin-Panel/deploy/main/docker-compose.yml -O docker-compose.yml &amp;amp;&amp;amp; docker-compose up -d&#xA;# 创建管理员用户（密码必须设置8位以上，否则无法登陆）&#xA;docker-compose exec backend python app/initial_data.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;之后可以访问 &lt;code&gt;http://你的IP:8000&lt;/code&gt; 进入面板。&lt;/p&gt; &#xA;&lt;h2&gt;配置说明&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;修改所有的 &lt;code&gt;POSTGRES_USER&lt;/code&gt; 和 &lt;code&gt;POSTGRES_PASSWORD&lt;/code&gt; ，以及相应的 &lt;code&gt;DATABASE_URL&lt;/code&gt; ，虽然数据库不公开，但使用默认的数据库用户和密码并不安全！&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;后端默认会发送错误信息到 Sentry （&lt;strong&gt;建议使用测试版本不要关闭，方便排查错误&lt;/strong&gt;），可能会导致信息泄漏，移除 &lt;code&gt;ENABLE_SENTRY: &#39;yes&#39;&lt;/code&gt; 就好。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;默认挂载 &lt;code&gt;~/.ssh/id_rsa&lt;/code&gt; 作为连接服务器的密钥，如使用其他密钥或者不使用密钥可以删除配置文件中的 &lt;code&gt;- $HOME/.ssh/id_rsa:/app/ansible/env/ssh_key&lt;/code&gt; 。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;更新&lt;/h2&gt; &#xA;&lt;h3&gt;正式版&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd ~/aurora&#xA;wget https://raw.githubusercontent.com/Aurora-Admin-Panel/deploy/main/docker-compose.yml -O docker-compose.yml&#xA;docker-compose pull &amp;amp;&amp;amp; docker-compose down --remove-orphans &amp;amp;&amp;amp; docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;del&gt;内测版（目前已不维护，请不要使用）&lt;/del&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd ~/aurora&#xA;wget https://raw.githubusercontent.com/Aurora-Admin-Panel/deploy/main/docker-compose-dev.yml -O docker-compose.yml&#xA;docker-compose pull &amp;amp;&amp;amp; docker-compose down --remove-orphans &amp;amp;&amp;amp; docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;数据库备份与恢复&lt;/h2&gt; &#xA;&lt;h3&gt;备份&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker-compose exec -T postgres pg_dump -d aurora -U [数据库用户名，默认aurora] -c &amp;gt; data.sql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;恢复&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 首先先把所有服务停下&#xA;docker-compose down&#xA;# 只启动数据库服务&#xA;docker-compose up -d postgres&#xA;# 执行数据恢复&#xA;docker-compose exec -T postgres psql -d aurora -U [数据库用户名，默认aurora] &amp;lt; data.sql&#xA;# 然后正常启动所有服务&#xA;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;卸载面板&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker-compose down&#xA;docker volume rm aurora_db-data&#xA;docker volume rm aurora_app-data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;面板长什么样？&lt;/h2&gt; &#xA;&lt;h3&gt;服务器管理页面&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Aurora-Admin-Panel/deploy/main/img/servers.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;修改/添加服务器&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Aurora-Admin-Panel/deploy/main/img/servers_edit.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;服务器端口管理页面&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Aurora-Admin-Panel/deploy/main/img/server.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;添加/编辑端口&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Aurora-Admin-Panel/deploy/main/img/server_port_edit.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;端口分配页面&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Aurora-Admin-Panel/deploy/main/img/server_port_users.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;端口设置 iptables&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Aurora-Admin-Panel/deploy/main/img/server_port_edit_rule_iptables.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;端口设置 gost&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Aurora-Admin-Panel/deploy/main/img/server_port_edit_rule_gost.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SonarSource/sonarqube-scan-action</title>
    <updated>2023-08-04T01:43:38Z</updated>
    <id>tag:github.com,2023-08-04:/SonarSource/sonarqube-scan-action</id>
    <link href="https://github.com/SonarSource/sonarqube-scan-action" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Scan your code with SonarQube &lt;a href=&#34;https://github.com/SonarSource/sonarqube-scan-action/actions/workflows/qa.yml&#34;&gt;&lt;img src=&#34;https://github.com/SonarSource/sonarqube-scan-action/actions/workflows/qa.yml/badge.svg?sanitize=true&#34; alt=&#34;QA&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Using this GitHub Action, scan your code with &lt;a href=&#34;https://www.sonarqube.org/&#34;&gt;SonarQube&lt;/a&gt; to detects Bugs, Vulnerabilities and Code Smells in up to 27 programming languages!&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/SonarSource/sonarqube-scan-action/master/images/SonarQube-72px.png&#34;&gt; &#xA;&lt;p&gt;SonarQube is the leading product for Continuous Code Quality &amp;amp; Code Security. It supports most popular programming languages, including Java, JavaScript, TypeScript, C#, Python, C, C++, and many more.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;To run an analysis on your code, you first need to set up your project on SonarQube. Your SonarQube instance must be accessible from GitHub, and you will need an access token to run the analysis (more information below under &lt;strong&gt;Environment variables&lt;/strong&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Read more information on how to analyze your code &lt;a href=&#34;https://docs.sonarqube.org/latest/analysis/github-integration/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Project metadata, including the location to the sources to be analyzed, must be declared in the file &lt;code&gt;sonar-project.properties&lt;/code&gt; in the base directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;sonar.projectKey=&amp;lt;replace with the key generated when setting up the project on SonarQube&amp;gt;&#xA;&#xA;# relative paths to source directories. More details and properties are described&#xA;# in https://docs.sonarqube.org/latest/project-administration/narrowing-the-focus/ &#xA;sonar.sources=.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The workflow YAML file will usually look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;on:&#xA;  # Trigger analysis when pushing to your main branches, and when creating a pull request.&#xA;  push:&#xA;    branches:&#xA;      - main&#xA;      - master&#xA;      - develop&#xA;      - &#39;releases/**&#39;&#xA;  pull_request:&#xA;      types: [opened, synchronize, reopened]&#xA;&#xA;name: Main Workflow&#xA;jobs:&#xA;  sonarqube:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;    - uses: actions/checkout@v3&#xA;      with:&#xA;        # Disabling shallow clone is recommended for improving relevancy of reporting&#xA;        fetch-depth: 0&#xA;    - name: SonarQube Scan&#xA;      uses: sonarsource/sonarqube-scan-action@master&#xA;      env:&#xA;        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}&#xA;        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your source code file names contain special characters that are not covered by the locale range of &lt;code&gt;en_US.UTF-8&lt;/code&gt;, you can configure your desired locale like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;    - name: SonarQube Scan&#xA;      uses: sonarsource/sonarqube-scan-action@master&#xA;      env:&#xA;        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}&#xA;        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}&#xA;        LC_ALL: &#34;ru_RU.UTF-8&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your SonarQube server uses a self-signed certificate, you can pass a root certificate (in PEM format) to the java certificate store:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;    - name: SonarQube Scan&#xA;      uses: sonarsource/sonarqube-scan-action@master&#xA;      env:&#xA;        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}&#xA;        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}&#xA;        SONAR_ROOT_CERT: ${{ secrets.SONAR_ROOT_CERT }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can change the analysis base directory by using the optional input &lt;code&gt;projectBaseDir&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- name: SonarQube Scan&#xA;  uses: sonarsource/sonarqube-scan-action@master&#xA;  with:&#xA;    projectBaseDir: app/src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case you need to add additional analysis parameters, and you do not wish to set them in the &lt;code&gt;sonar-project.properties&lt;/code&gt; file, you can use the &lt;code&gt;args&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- name: SonarQube Scan&#xA;  uses: sonarsource/sonarqube-scan-action@master&#xA;  with:&#xA;    projectBaseDir: app/src&#xA;    args: &amp;gt;&#xA;      -Dsonar.python.coverage.reportPaths=coverage.xml&#xA;      -Dsonar.tests=tests/&#xA;      -Dsonar.verbose=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More information about possible analysis parameters can be found in &lt;a href=&#34;https://redirect.sonarsource.com/doc/analysis-parameters.html&#34;&gt;the documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Environment variables&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SONAR_TOKEN&lt;/code&gt; – &lt;strong&gt;Required&lt;/strong&gt; this is the token used to authenticate access to SonarQube. You can read more about security tokens &lt;a href=&#34;https://docs.sonarqube.org/latest/user-guide/user-token/&#34;&gt;here&lt;/a&gt;. You can set the &lt;code&gt;SONAR_TOKEN&lt;/code&gt; environment variable in the &#34;Secrets&#34; settings page of your repository, or you can add them at the level of your GitHub organization (recommended).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SONAR_HOST_URL&lt;/code&gt; – &lt;strong&gt;Required&lt;/strong&gt; this tells the scanner where SonarQube is hosted. You can set the &lt;code&gt;SONAR_HOST_URL&lt;/code&gt; environment variable in the &#34;Secrets&#34; settings page of your repository, or you can add them at the level of your GitHub organization (recommended).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SONAR_ROOT_CERT&lt;/code&gt; – Holds an additional root certificate (in PEM format) that is used to validate the SonarQube server certificate. You can set the &lt;code&gt;SONAR_ROOT_CERT&lt;/code&gt; environment variable in the &#34;Secrets&#34; settings page of your repository, or you can add them at the level of your GitHub organization (recommended).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Alternatives for Java, .NET, and C/C++ projects&lt;/h2&gt; &#xA;&lt;p&gt;This GitHub Action will not work for all technologies. If you are in one of the following situations, you should use the following alternatives:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Your code is built with Maven. Read the documentation about our &lt;a href=&#34;https://redirect.sonarsource.com/doc/install-configure-scanner-maven.html&#34;&gt;Scanner for Maven&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Your code is built with Gradle. Read the documentation about our &lt;a href=&#34;https://redirect.sonarsource.com/doc/gradle.html&#34;&gt;Scanner for Gradle&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You want to analyze a .NET solution. Read the documentation about our &lt;a href=&#34;https://redirect.sonarsource.com/doc/install-configure-scanner-msbuild.html&#34;&gt;Scanner for .NET&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You want to analyze C/C++ code. Read the documentation on &lt;a href=&#34;https://docs.sonarqube.org/latest/analysis/languages/cfamily/&#34;&gt;analyzing C/C++ code&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Have question or feedback?&lt;/h2&gt; &#xA;&lt;p&gt;To provide feedback (requesting a feature or reporting a bug) please post on the &lt;a href=&#34;https://community.sonarsource.com/tags/c/help/sq/github-actions&#34;&gt;SonarSource Community Forum&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The Dockerfile and associated scripts and documentation in this project are released under the LGPLv3 License.&lt;/p&gt; &#xA;&lt;p&gt;Container images built with this project include third party materials.&lt;/p&gt;</summary>
  </entry>
</feed>