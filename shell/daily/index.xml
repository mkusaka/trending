<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-16T01:53:34Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tteck/Proxmox</title>
    <updated>2022-06-16T01:53:34Z</updated>
    <id>tag:github.com,2022-06-16:/tteck/Proxmox</id>
    <link href="https://github.com/tteck/Proxmox" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Proxmox Helper Scripts&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; Select a Proxmox Helper &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;sub&gt; Always remember to use due diligence when sourcing scripts and automation tasks from third-party sites. &lt;/sub&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tteck/Proxmox/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://badgen.net/github/license/tteck/Proxmox&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tteck.github.io/Proxmox/&#34;&gt;&lt;img src=&#34;https://badgen.net/github/checks/tteck/Proxmox/main/&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tteck/Proxmox/discussions&#34;&gt;&lt;img src=&#34;https://github.com/tteck/Proxmox/raw/main/misc/images/discussions.png?raw=true&#34; height=&#34;21&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tteck/Proxmox/raw/main/CHANGELOG.MD&#34;&gt;&lt;img src=&#34;https://github.com/tteck/Proxmox/raw/main/misc/images/change.png?raw=true&#34; height=&#34;21&#34;&gt;&lt;/a&gt;üî∏&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; Proxmox VE 7 Post Install&lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/home-assistant/brands/raw/master/core_integrations/proxmoxve/icon.png?raw=true&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; Proxmox VE 7 Post Install &lt;/h1&gt; &#xA; &lt;p&gt;This script will give options to Disable the Enterprise Repo, Add/Correct PVE7 Sources, Enable the No-Subscription Repo, Add Test Repo and Disable Subscription Nag.&lt;/p&gt; &#xA; &lt;p&gt;Run the following in the Proxmox Shell. ‚ö†Ô∏è &lt;strong&gt;PVE7 ONLY&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/misc/post-install-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;It&#39;s recommended to update Proxmox after running this script, before adding any VM/CT.&lt;/p&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; Proxmox Kernel Clean&lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/home-assistant/brands/raw/master/core_integrations/proxmoxve/icon.png?raw=true&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt;Proxmox Kernel Clean &lt;/h1&gt; &#xA; &lt;p&gt;Cleaning unused kernel images is not only good because of a reduced grub menu, but also gains some disk space.&lt;/p&gt; &#xA; &lt;p&gt;Run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/misc/kernel-clean-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; Proxmox CPU Scaling Governor&lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/tteck/Proxmox/raw/main/misc/images/cpu.png?raw=true&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt;Proxmox CPU Scaling Governor &lt;/h1&gt; &#xA; &lt;p&gt;CPU Scaling Governor enables the operating system to scale the CPU frequency up or down in order to save power or improve performance.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.kernel.org/doc/html/latest/admin-guide/pm/cpufreq.html?#generic-scaling-governors&#34;&gt;Generic Scaling Governors&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/misc/scaling-governor.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; Proxmox LXC Updater&lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Felpuig.xeill.net%2FMembers%2Fvcarceler%2Farticulos%2Fcontenedores-con-lxd-lxc%2Fcontainers.png&amp;amp;f=1&amp;amp;nofb=1&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt;Proxmox LXC Updater &lt;/h1&gt; &#xA; &lt;p&gt;Update All LXC&#39;s Fast &amp;amp; Easy&lt;/p&gt; &#xA; &lt;p&gt;Run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/misc/update-lxcs.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; Proxmox Dark Theme&lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://camo.githubusercontent.com/f6f33a09f8c1207dfb3dc1cbd754c2f3393562c11b1c999751ad9a91a656834a/68747470733a2f2f692e696d6775722e636f6d2f536e6c437948462e706e67&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; Proxmox Discord Dark Theme &lt;/h1&gt; &#xA; &lt;p&gt;A dark theme for the Proxmox Web UI by &lt;a href=&#34;https://github.com/Weilbyte/PVEDiscordDark&#34;&gt;Weilbyte&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash &amp;lt;(curl -s https://raw.githubusercontent.com/Weilbyte/PVEDiscordDark/master/PVEDiscordDark.sh ) install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;To uninstall the theme, simply run the script with the &lt;code&gt;uninstall&lt;/code&gt; command.&lt;/p&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; Home Assistant OS VM&lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/tteck/Proxmox/raw/main/misc/images/haos.png?raw=true&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; Home Assistant OS VM &lt;/h1&gt; &#xA; &lt;h3 align=&#34;center&#34;&gt; Option to create VM using the Latest or Stable Image &lt;/h3&gt; &#xA; &lt;p&gt;To create a new Proxmox Home Assistant OS VM, run the following in the Proxmox Shell&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/vm/haos-vm-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 4GB RAM - 32GB Storage - 2vCPU - Stable Image‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;After the script completes, click on the VM, then on the &lt;strong&gt;&lt;em&gt;Summary&lt;/em&gt;&lt;/strong&gt; tab to find the VM IP.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Home Assistant Interface - IP:8123&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; Home Assistant Container LXC &lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://www.docker.com/sites/default/files/d8/2019-07/vertical-logo-monochromatic.png&#34; alt=&#34;Docker Logos | Docker&#34; width=&#34;100&#34; height=&#34;100&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/13844975?s=200&amp;amp;v=4&#34; alt=&#34;@home-assistant&#34; width=&#34;100&#34; height=&#34;100&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/22225832?s=400&amp;amp;v=4&#34; alt=&#34;GitHub - portainer/portainer-docs: Portainer documentation&#34; width=&#34;100&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; Home Assistant Container LXC &lt;/h1&gt; &#xA; &lt;p&gt;To create a new Proxmox Home Assistant Container LXC, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/homeassistant-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 2GB RAM - 16GB Storage - 2vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;&lt;strong&gt;Home Assistant Interface - IP:8123&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Portainer Interface - IP:9000&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;Path to HA /config&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;/var/lib/docker/volumes/hass_config/_data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Edit the HA configuration.yaml&lt;/strong&gt; (Recommend Using File Browser)&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;nano /var/lib/docker/volumes/hass_config/_data/configuration.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Save and exit the editor with ‚ÄúCtrl+O‚Äù, ‚ÄúEnter‚Äù and ‚ÄúCtrl+X‚Äù&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;Copy Data From a Existing Home Assistant LXC to another Home Assistant LXC&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the Proxmox Shell&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/misc/ha-copy-data.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Allow USB Device Passthrough:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the Proxmox Shell. (&lt;strong&gt;replace &lt;code&gt;106&lt;/code&gt; with your LXC ID&lt;/strong&gt;)&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/misc/usb-passthrough.sh)&#34; -s 106&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Reboot the LXC to apply the changes&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Install HACS:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/misc/hacs.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;After install, reboot Home Assistant and &lt;strong&gt;clear browser cache&lt;/strong&gt; then Add HACS integration.&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;a href=&#34;https://raw.githubusercontent.com/tteck/Proxmox/main/misc/images/update-menu.png&#34;&gt;&lt;strong&gt;Update Menu&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;./update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; Podman Home Assistant Container LXC &lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://heise.cloudimg.io/width/223/q50.png-lossy-50.webp-lossy-50.foil1/_www-heise-de_/imgs/18/2/5/8/2/8/1/0/podman_logo-670078d7ea1d15a6.png&#34; width=&#34;100&#34; height=&#34;100&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/13844975?s=200&amp;amp;v=4&#34; alt=&#34;@home-assistant&#34; width=&#34;100&#34; height=&#34;100&#34;&gt;&lt;img&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SelfhostedPro/Yacht/master/readme_media/Yacht_logo_1_dark.png&#34; height=&#34;80&#34;&gt;&lt;img&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; Podman Home Assistant Container LXC &lt;/h1&gt; To create a new Proxmox Podman Home Assistant Container LXC, run the following in the Proxmox Shell. &#xA; &lt;p&gt;(&lt;a href=&#34;https://youtu.be/lkg5QJsoCCQ&#34;&gt;What is Podman?&lt;/a&gt;) ‚ö†Ô∏è Podman seems to need a privileged LXC&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/podman-homeassistant-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 2GB RAM - 16GB Storage - 2vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;&lt;strong&gt;Home Assistant Interface - IP:8123&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Yacht Interface - IP:8000&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;Path to HA /config&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;/var/lib/containers/storage/volumes/hass_config/_data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To edit the HA configuration.yaml&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;nano /var/lib/containers/storage/volumes/hass_config/_data/configuration.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Save and exit the editor with ‚ÄúCtrl+O‚Äù, ‚ÄúEnter‚Äù and ‚ÄúCtrl+X‚Äù&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;Copy Data From a Existing Home Assistant LXC to a Podman Home Assistant LXC&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the Proxmox Shell&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/misc/ha-copy-data-podman.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To allow USB device passthrough:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the Proxmox Shell. (&lt;strong&gt;replace &lt;code&gt;106&lt;/code&gt; with your LXC ID&lt;/strong&gt;)&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/misc/usb-passthrough.sh)&#34; -s 106&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Reboot the LXC to apply the changes&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Install HACS:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/misc/podman_hacs.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;After install, reboot Home Assistant and &lt;strong&gt;clear browser cache&lt;/strong&gt; then Add HACS integration.&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;Initial Yacht Login&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;username&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;admin@yacht.local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;password&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; ioBroker LXC&lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/ioBroker/ioBroker/raw/master/img/logos/ioBroker_Logo_256px.png?raw=true&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; ioBroker LXC &lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.iobroker.net/#en/intro&#34;&gt;ioBroker&lt;/a&gt; is an open source automation platform.&lt;/p&gt; &#xA; &lt;p&gt;To create a new Proxmox ioBroker LXC, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/iobroker-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 2GB RAM - 8GB Storage - 2vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;&lt;strong&gt;ioBroker Interface - IP:8081&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update ioBroker&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;update from the ioBroker UI&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; Homebridge LXC&lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fwww.dingz.ch%2Fadmin%2Fdata%2Ffiles%2Fintegration%2Flogo%2F20%2F200514-em-logo-homebridge_logo.png%3Flm%3D1589459081&amp;amp;f=1&amp;amp;nofb=1&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; Homebridge LXC &lt;/h1&gt; Homebridge allows you to integrate with smart home devices that do not natively support HomeKit &#xA; &lt;p&gt;To create a new Proxmox Homebridge LXC, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/homebridge-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 1GB RAM - 4GB Storage - 1vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;&lt;strong&gt;Homebridge Interface - IP:8581&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;Initial Login&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;username&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;admin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;password&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;admin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Config File Path &lt;code&gt;/var/lib/homebridge/config.json&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;Storage Path &lt;code&gt;/var/lib/homebridge&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;Restart Command &lt;code&gt;sudo hb-service restart&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;Stop Command &lt;code&gt;sudo hb-service stop&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;Start Command &lt;code&gt;sudo hb-service start&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;View Logs Command &lt;code&gt;sudo hb-service logs&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;Systemd Service File &lt;code&gt;/etc/systemd/system/homebridge.service&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;Systemd Env File &lt;code&gt;/etc/default/homebridge&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update Homebridge&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;Update from the Homebridge UI&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; ESPHome LXC&lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/home-assistant/brands/raw/master/core_integrations/esphome/dark_icon@2x.png?raw=true&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; ESPHome LXC &lt;/h1&gt; &#xA; &lt;p&gt;To create a new Proxmox ESPHome LXC, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/esphome-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 1GB RAM - 4GB Storage - 2vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;&lt;strong&gt;ESPHome Interface - IP:6052&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update ESPHome&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;pip3 install esphome --upgrade&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; Nginx Proxy Manager LXC &lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://nginxproxymanager.com/logo.png&#34; alt=&#34;hero&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; Nginx Proxy Manager LXC &lt;/h1&gt; &#xA; &lt;p&gt;To create a new Proxmox Nginx Proxy Manager LXC Container, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt; bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/nginx-proxy-manager-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 1GB RAM - 3GB Storage - 1vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;Forward port &lt;code&gt;80&lt;/code&gt; and &lt;code&gt;443&lt;/code&gt; from your router to your Nginx Proxy Manager LXC IP.&lt;/p&gt; &#xA; &lt;p&gt;Add the following to your &lt;code&gt;configuration.yaml&lt;/code&gt; in Home Assistant.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt; http:&#xA;  use_x_forwarded_for: true&#xA;  trusted_proxies:&#xA;    - 192.168.100.27 ###(Nginx Proxy Manager LXC IP)###&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Nginx Proxy Manager Interface - IP:81&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;Initial Login&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;username&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;admin@example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;password&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;changeme&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update Nginx Proxy Manager&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/misc/npm_update.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; MQTT LXC&lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://mosquitto.org/images/mosquitto-text-side-28.png&#34; height=&#34;75&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; MQTT LXC &lt;/h1&gt; &#xA; &lt;p&gt;To create a new Proxmox MQTT LXC, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/mqtt-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 512MiB RAM - 2GB Storage - 1vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;Mosquitto comes with a password file generating utility called mosquitto_passwd.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;sudo mosquitto_passwd -c /etc/mosquitto/passwd &amp;lt;usr&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Password: &amp;lt; password &amp;gt;&lt;/p&gt; &#xA; &lt;p&gt;Create a configuration file for Mosquitto pointing to the password file we have just created.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;sudo nano /etc/mosquitto/conf.d/default.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;This will open an empty file. Paste the following into it.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;allow_anonymous false&#xA;persistence true&#xA;password_file /etc/mosquitto/passwd&#xA;listener 1883&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Save and exit the text editor with &#34;Ctrl+O&#34;, &#34;Enter&#34; and &#34;Ctrl+X&#34;.&lt;/p&gt; &#xA; &lt;p&gt;Now restart Mosquitto server.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;sudo systemctl restart mosquitto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update MQTT:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apt update &amp;amp;&amp;amp; apt upgrade -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; Node-Red LXC &lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/home-assistant/brands/raw/master/custom_integrations/nodered/icon.png?raw=true&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; Node-Red LXC &lt;/h1&gt; &#xA; &lt;p&gt;To create a new Proxmox Node-RED LXC, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/node-red-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 1GB RAM - 4GB Storage - 1vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;&lt;strong&gt;Node-Red Interface - IP:1880&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Restart Node-Red:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;node-red-restart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update Node-Red:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console (Restart after update)&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;npm install -g --unsafe-perm node-red&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Install Node-Red Themes&lt;/strong&gt; ‚ö†Ô∏è &lt;strong&gt;Backup your flows before running this script!!&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/misc/node-red-themes.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; Mariadb LXC &lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://mariadb.com/wp-content/webp-express/webp-images/doc-root/wp-content/themes/sage/dist/images/mariadb-logo-white.png.webp&#34; alt=&#34;MariaDB&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tteck/Proxmox/main/misc/images/adminer_logo-cl.png&#34; height=&#34;60&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; Mariadb LXC &lt;/h1&gt; &#xA; &lt;p&gt;To create a new Proxmox Mariadb LXC, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/mariadb-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 1GB RAM - 4GB Storage - 1vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;To enable MariaDB to listen to remote connections, you need to edit your defaults file. To do this, open the console in your MariaDB lxc:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;nano /etc/mysql/my.cnf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Un-comment &lt;code&gt;port =3306&lt;/code&gt; Save and exit the editor with &#34;Ctrl+O&#34;, &#34;Enter&#34; and &#34;Ctrl+X&#34;.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;nano /etc/mysql/mariadb.conf.d/50-server.cnf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Comment &lt;code&gt;bind-address = 127.0.0.1&lt;/code&gt; Save and exit the editor with &#34;Ctrl+O&#34;, &#34;Enter&#34; and &#34;Ctrl+X&#34;.&lt;/p&gt; &#xA; &lt;p&gt;For new MariaDB installations, the next step is to run the included security script. This script changes some of the less secure default options. We will use it to block remote root logins and to remove unused database users.&lt;/p&gt; &#xA; &lt;p&gt;Run the security script:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;sudo mysql_secure_installation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Enter current password for root (enter for none): &lt;code&gt;enter&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;Switch to unix_socket authentication [Y/n] &lt;code&gt;y&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;Change the root password? [Y/n] &lt;code&gt;n&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;Remove anonymous users? [Y/n] &lt;code&gt;y&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;Disallow root login remotely? [Y/n] &lt;code&gt;y&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;Remove test database and access to it? [Y/n] &lt;code&gt;y&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;Reload privilege tables now? [Y/n] &lt;code&gt;y&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;We will create a new account called admin with the same capabilities as the root account, but configured for password authentication.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;sudo mysql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Prompt will change to &lt;code&gt;MariaDB [(none)]&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;Create a new local admin (Change the username and password to match your preferences)&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;CREATE USER &#39;admin&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;password&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Give local admin root privileges (Change the username and password to match above)&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;GRANT ALL ON *.* TO &#39;admin&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;password&#39; WITH GRANT OPTION;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Now, we&#39;ll give the user admin root privileges and password-based access that can connect from anywhere on your local area network (LAN), which has addresses in the subnet 192.168.100.0/24. This is an improvement because opening a MariaDB server up to the Internet and granting access to all hosts is bad practice.. Change the &lt;strong&gt;&lt;em&gt;username&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;password&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;subnet&lt;/em&gt;&lt;/strong&gt; to match your preferences:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;GRANT ALL ON *.* TO &#39;admin&#39;@&#39;192.168.100.%&#39; IDENTIFIED BY &#39;password&#39; WITH GRANT OPTION;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Flush the privileges to ensure that they are saved and available in the current session:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;FLUSH PRIVILEGES;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Following this, exit the MariaDB shell:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;exit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Log in as the new database user you just created:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;mysql -u admin -p&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Create a new database:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;CREATE DATABASE homeassistant;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Following this, exit the MariaDB shell:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;exit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;‚ö†Ô∏è Reboot the lxc&lt;/p&gt; &#xA; &lt;p&gt;Checking status.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;sudo systemctl status mariadb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Change the recorder: &lt;code&gt;db_url:&lt;/code&gt; in your HA configuration.yaml&lt;/p&gt; &#xA; &lt;p&gt;Example: &lt;code&gt;mysql://admin:password@192.168.100.26:3306/homeassistant?charset=utf8mb4&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update Mariadb:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apt update &amp;amp;&amp;amp; apt upgrade -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;a href=&#34;https://raw.githubusercontent.com/tteck/Proxmox/main/misc/images/adminer.png&#34;&gt;&lt;strong&gt;Adminer&lt;/strong&gt;&lt;/a&gt; (formerly phpMinAdmin) is a full-featured database management tool&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;http://your-mariadb-lxc-ip/adminer/&lt;/code&gt;&lt;/p&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; PostgreSQL LXC &lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://wiki.postgresql.org/images/3/30/PostgreSQL_logo.3colors.120x120.png&#34; height=&#34;100&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tteck/Proxmox/main/misc/images/adminer_logo-cl.png&#34; height=&#34;60&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; PostgreSQL LXC &lt;/h1&gt; &#xA; &lt;p&gt;To create a new Proxmox PostgreSQL LXC, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/postgresql-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 1GB RAM - 4GB Storage - 1vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;To make sure our PostgreSQL is secured with a strong password, set a password for its system user and then change the default database admin user account&lt;/p&gt; &#xA; &lt;p&gt;Change user password&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;passwd postgres&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Login using Postgres system account&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;su - postgres&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Now, change the Admin database password&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;psql -c &#34;ALTER USER postgres WITH PASSWORD &#39;your-password&#39;;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Create a new user.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;psql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;CREATE USER admin WITH PASSWORD &#39;your-password&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Create a new database:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;CREATE DATABASE homeassistant;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Grant all rights or privileges on created database to the user&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;GRANT ALL ON DATABASE homeassistant TO admin;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;To exit psql&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;\q&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Then type exit to get back to root&lt;/p&gt; &#xA; &lt;p&gt;Change the recorder: &lt;code&gt;db_url:&lt;/code&gt; in your HA configuration.yaml&lt;/p&gt; &#xA; &lt;p&gt;Example: &lt;code&gt;db_url: postgresql://admin:your-password@192.168.100.20:5432/homeassistant?client_encoding=utf8&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update PostgreSQL&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apt update &amp;amp;&amp;amp; apt upgrade -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;a href=&#34;https://raw.githubusercontent.com/tteck/Proxmox/main/misc/images/adminer.png&#34;&gt;&lt;strong&gt;Adminer&lt;/strong&gt;&lt;/a&gt; (formerly phpMinAdmin) is a full-featured database management tool&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;http://your-PostgreSQL-lxc-ip/adminer/&lt;/code&gt;&lt;/p&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; Zigbee2MQTT LXC &lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/Koenkk/zigbee2mqtt/raw/master/images/logo_bee_only.png?raw=true&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt;Zigbee2MQTT LXC &lt;/h1&gt; &#xA; &lt;p&gt;To create a new Proxmox Zigbee2MQTT LXC, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/zigbee2mqtt-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 1GB RAM - 4GB Storage - 2vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;Determine the location of your adapter&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ls -l /dev/serial/by-id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Example Output: &lt;code&gt;lrwxrwxrwx 1 root root 13 Jun 19 17:30 usb-1a86_USB_Serial-if00-port0 -&amp;gt; ../../ttyUSB0&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è ‚ö†Ô∏è &lt;strong&gt;Before you start Zigbee2MQTT you need to edit the &lt;a href=&#34;https://www.zigbee2mqtt.io/guide/configuration/&#34;&gt;configuration.yaml&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;nano /opt/zigbee2mqtt/data/configuration.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Save and exit the editor with ‚ÄúCtrl+O‚Äù, ‚ÄúEnter‚Äù and ‚ÄúCtrl+X‚Äù&lt;/p&gt; &#xA; &lt;p&gt;Example:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;frontend:&#xA;  port: 9442&#xA;homeassistant: true&#xA;permit_join: false&#xA;mqtt:&#xA;  base_topic: zigbee2mqtt&#xA;  server: &#39;mqtt://192.168.86.224:1883&#39;&#xA;  user: usr&#xA;  password: pwd&#xA;  keepalive: 60&#xA;  reject_unauthorized: true&#xA;  version: 4&#xA;serial:&#xA;  port: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0&#xA;  #adapter: deconz            #(uncomment for ConBee II)&#xA;advanced:&#xA;  pan_id: GENERATE&#xA;  network_key: GENERATE&#xA;  channel: 20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;Zigbee2MQTT can be started after completing the configuration&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cd /opt/zigbee2mqtt&#xA;npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To update Zigbee2MQTT&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cd /opt/zigbee2mqtt&#xA;bash update.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;Copy Data From a Existing Zigbee2MQTT LXC to another Zigbee2MQTT LXC&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the Proxmox Shell&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/misc/z2m-copy-data.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; deCONZ LXC &lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://phoscon.de/img/phoscon-logo128x.svg?sanitize=true&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; deCONZ LXC &lt;/h1&gt; &#xA; &lt;p&gt;To create a new Proxmox deCONZ LXC, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/deconz-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 1GB RAM - 4GB Storage - 2vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;&lt;strong&gt;deCONZ Interface - IP:80&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update deCONZ&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC Console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apt update &amp;amp;&amp;amp; apt upgrade -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; Zwavejs2MQTT LXC &lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/zwave-js/zwavejs2mqtt/raw/master/docs/_images/zwavejs_logo.svg?sanitize=true&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; Zwavejs2MQTT LXC &lt;/h1&gt; &#xA; &lt;p&gt;To create a new Proxmox Zwavejs2MQTT LXC, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/zwavejs2mqtt-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 1GB RAM - 4GB Storage - 2vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;&lt;strong&gt;Zwavejs2MQTT Interface - IP:8091&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;Copy Data From a Existing Zwavejs2MQTT LXC to another Zwavejs2MQTT LXC&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the Proxmox Shell&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/misc/zwave-copy-data.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update Zwavejs2MQTT&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC Console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/misc/zwavejs2mqtt-update.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; NocoDB LXC &lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/tteck/Proxmox/raw/main/misc/images/nocodb.png?raw=true&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; NocoDB LXC &lt;/h1&gt; &#xA; &lt;p&gt;NocoDB is an open source #NoCode platform that turns any database into a smart spreadsheet. Airtable Alternative.&lt;/p&gt; &#xA; &lt;p&gt;To create a new Proxmox NocoDB LXC, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/nocodb-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 1GB RAM - 4GB Storage - 1vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;&lt;strong&gt;NocoDB Interface - IP:8080/dashboard&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update NocoDB&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/misc/nocodb-update.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; InfluxDB/Telegraf LXC &lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fwww.hopisystems.com%2Fassets%2Fimages%2Fintegrations%2Finfluxdb.png&amp;amp;f=1&amp;amp;nofb=1&#34; height=&#34;150&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; InfluxDB/Telegraf LXC &lt;/h1&gt; &#xA; &lt;p&gt;To create a new Proxmox InfluxDB LXC, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/influxdb-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 2GB RAM - 8GB Storage - 2vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;InfluxDB Configuration&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;nano /etc/influxdb/influxdb.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;Telegraf Configuration&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;nano /etc/telegraf/telegraf.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update InfluxDB/Telegraf&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apt update &amp;amp;&amp;amp; apt upgrade -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; Grafana LXC &lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fdocs.checkmk.com%2Flatest%2Fimages%2Fgrafana_logo.png&amp;amp;f=1&amp;amp;nofb=1&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; Grafana LXC &lt;/h1&gt; &#xA; &lt;p&gt;To create a new Proxmox Grafana LXC, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/grafana-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 512MiB RAM - 2GB Storage - 1vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;&lt;strong&gt;Grafana Interface - IP:3000&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;Initial Login&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;username&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;admin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;password&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;admin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update Grafana&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apt update &amp;amp;&amp;amp; apt upgrade -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; Docker LXC &lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tteck/Proxmox/main/misc/images/docker.png&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; Docker LXC &lt;/h1&gt; &#xA; &lt;h3 align=&#34;center&#34;&gt; Options to Install Portainer and/or Docker Compose&lt;/h3&gt; &#xA; &lt;p&gt;To create a new Proxmox Docker LXC, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/docker-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 2GB RAM - 4GB Storage - 2vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;&lt;strong&gt;Portainer Interface - IP:9000&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apt update &amp;amp;&amp;amp; apt upgrade -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; Debian 11 LXC &lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://www.debian.org/Pics/debian-logo-1024x576.png&#34; alt=&#34;Debian&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; Debian 11 LXC &lt;/h1&gt; &#xA; &lt;p&gt;To create a new Proxmox Debian 11 (curl. sudo) LXC, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/debian-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 512MiB RAM - 2GB Storage - 1vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update Debian 11&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apt update &amp;amp;&amp;amp; apt upgrade -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; Ubuntu LXC &lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://assets.ubuntu.com/v1/29985a98-ubuntu-logo32.png&#34; alt=&#34;Ubuntu&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; Ubuntu LXC &lt;/h1&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt; Option to define version 18.04, 20.04, 21.10 or 22.04&lt;/h3&gt; &#xA; &lt;p&gt;To create a new Proxmox Ubuntu (curl. sudo) LXC, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/ubuntu-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 512MiB RAM - 2GB Storage - 1vCPU - 22.04 ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update Ubuntu&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apt update &amp;amp;&amp;amp; apt upgrade -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; UniFi Network Application LXC&lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fblog.ui.com%2Fwp-content%2Fuploads%2F2016%2F10%2Funifi-app-logo-300x108.png&amp;amp;f=1&amp;amp;nofb=1&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; UniFi Network Application LXC &lt;/h1&gt; &#xA; &lt;h3 align=&#34;center&#34;&gt; With Local Controller Option &lt;/h3&gt; &#xA; &lt;p&gt;An application designed to optimize UniFi home and business networks with ease.&lt;/p&gt; &#xA; &lt;p&gt;To create a new Proxmox UniFi Network Application LXC, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/unifi-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 2GB RAM - 8GB Storage - 2vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;&lt;strong&gt;UniFi Interface - https:// IP:8443&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update UniFi&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/misc/unifi-update.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; Omada Controller LXC&lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://www.enterpriseitpro.net/wp-content/uploads/2020/12/logo-omada.png&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; Omada Controller LXC &lt;/h1&gt; &#xA; &lt;p&gt;Omada Controller is software which is used to manage the EAP&lt;/p&gt; &#xA; &lt;p&gt;To create a new Proxmox Omada Controller LXC, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/omada-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 2GB RAM - 8GB Storage - 2vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;&lt;strong&gt;Omada Interface - https:// IP:8043&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;tpeap status&lt;/code&gt; show status of Omada Controller&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;tpeap start&lt;/code&gt; start Omada Controller&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;tpeap stop&lt;/code&gt; stop Omada Controller&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update Omada&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;Working On&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; MeshCentral LXC&lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/Ylianst/MeshCentral/raw/master/public/favicon-303x303.png?raw=true&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; MeshCentral LXC &lt;/h1&gt; &#xA; &lt;p&gt;MeshCentral is a full computer management web site. With MeshCentral, you can run your own web server to remotely manage and control computers on a local network or anywhere on the internet.&lt;/p&gt; &#xA; &lt;p&gt;To create a new Proxmox MeshCentral LXC, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/meshcentral-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 512MiB RAM - 2GB Storage - 1vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;&lt;strong&gt;MeshCentral Interface - http:// IP&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update MeshCentral&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;Update from the MeshCentral UI&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; Plex Media Server LXC &lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/home-assistant/brands/raw/master/core_integrations/plex/icon.png?raw=true&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; Plex Media Server LXC &lt;/h1&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt; With Hardware Acceleration Support &lt;/h3&gt; To create a new Proxmox Plex Media Server LXC, run the following in the Proxmox Shell. &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/plex-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 2GB RAM - 8GB Storage - 2vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;&lt;strong&gt;Plex Media Server Interface - IP:32400/web&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update Plex Media Server:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apt update &amp;amp;&amp;amp; apt upgrade -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;Copy Data From a Existing Plex Media Server LXC to another Plex Media Server LXC&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the Proxmox Shell&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/misc/pms-copy-data.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; Jellyfin Media Server LXC &lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/home-assistant/brands/raw/master/core_integrations/jellyfin/icon.png?raw=true&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; Jellyfin Media Server LXC &lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.turnkeylinux.org/mediaserver&#34;&gt;TurnKey has a LXC CT for Jellyfin&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;To create a new Proxmox Jellyfin Media Server LXC, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/jellyfin-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 2GB RAM - 8GB Storage - 2vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;&lt;strong&gt;Jellyfin Media Server Interface - IP:8096&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update Jellyfin Media Server&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apt update &amp;amp;&amp;amp; apt upgrade -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; Pi-hole LXC&lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/home-assistant/brands/raw/master/core_integrations/pi_hole/icon.png?raw=true&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; Pi-hole LXC &lt;/h1&gt; &#xA; &lt;p&gt;To create a new Proxmox Pi-hole LXC, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/pihole-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 512MiB RAM - 2GB Storage - 1vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To set your password:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;pihole -a -p&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update Pi-hole:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;Update from the Pi-hole UI&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; Technitium DNS LXC&lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/12230362?s=100&amp;amp;v=4&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; Technitium DNS LXC &lt;/h1&gt; An open source authoritative as well as recursive DNS server &#xA; &lt;p&gt;To create a new Proxmox Technitium DNS LXC, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/technitiumdns-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 512MiB RAM - 2GB Storage - 1vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;&lt;strong&gt;Technitium DNS Interface - IP:5380&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update Technitium DNS&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/misc/technitiumdns-update.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; AdGuard Home LXC&lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/home-assistant/brands/raw/master/core_integrations/adguard/icon.png?raw=true&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; AdGuard Home LXC &lt;/h1&gt; &#xA; &lt;p&gt;To create a new Proxmox AdGuard Home LXC, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/adguard-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 512MiB RAM - 2GB Storage - 1vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;&lt;strong&gt;AdGuard Home Setup Interface - IP:3000 (After Setup use only IP)&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;sub&gt;(For the Home Assistant Integration, use port &lt;code&gt;80&lt;/code&gt; not &lt;code&gt;3000&lt;/code&gt;)&lt;/sub&gt;&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update Adguard&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;Update from the Adguard UI&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; Uptime Kuma LXC &lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/louislam/uptime-kuma/raw/master/public/icon.png?raw=true&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; Uptime Kuma LXC &lt;/h1&gt; &#xA; &lt;p&gt;Uptime Kuma is a self-hosted, open source, fancy uptime monitoring and alerting system. It can monitor HTTP(s) / TCP / HTTP(s) Keyword / Ping / DNS Record / Push / Steam Game Server.&lt;/p&gt; &#xA; &lt;p&gt;To create a new Proxmox Uptime Kuma LXC, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/uptimekuma-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 1GB RAM - 2GB Storage - 1vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;&lt;strong&gt;Uptime Kuma Interface - IP:3001&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update Uptime Kuma&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/misc/uptimekuma-update.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; Whoogle LXC &lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/tteck/Proxmox/raw/main/misc/images/whoogle.png?raw=true&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; Whoogle LXC &lt;/h1&gt; &#xA; &lt;p&gt;Get Google search results, but without any ads, javascript, AMP links, cookies, or IP address tracking.&lt;/p&gt; &#xA; &lt;p&gt;To create a new Proxmox Whoogle LXC, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/whoogle-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 512MiB RAM - 2GB Storage - 1vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;&lt;strong&gt;Whoogle Interface - IP:5000&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update Whoogle&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;pip3 install whoogle-search --upgrade&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; Heimdall Dashboard LXC&lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/tteck/Proxmox/raw/main/misc/images/heimdall.png?raw=true&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; Heimdall Dashboard LXC &lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://camo.githubusercontent.com/bcfd4f74c93b25bea7b14eacbafd649206bf754a3d4b596329968f0ee569cf3c/68747470733a2f2f692e696d6775722e636f6d2f4d72433451704e2e676966&#34;&gt;Heimdall Application Dashboard&lt;/a&gt; is a dashboard for all your web applications. It doesn&#39;t need to be limited to applications though, you can add links to anything you like.&lt;/p&gt; &#xA; &lt;p&gt;To create a new Proxmox Heimdall Dashboard LXC, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/heimdalldashboard-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 512MiB RAM - 2GB Storage - 1vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;&lt;strong&gt;Heimdall Dashboard Interface - IP:7990&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update Heimdall Dashboard&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/misc/heimdalldashboard-all-update.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; Dashy LXC&lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/Lissy93/dashy/raw/master/public/web-icons/dashy-logo.png&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; Dashy LXC &lt;/h1&gt; &#xA; &lt;p&gt;Dashy helps you organize your self-hosted services by making them accessible from a single place&lt;/p&gt; &#xA; &lt;p&gt;To create a new Proxmox Dashy LXC, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/dashy-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 2GB RAM - 3GB Storage - 2vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;&lt;strong&gt;Dashy Interface - IP:4000&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;After getting everything setup the way you want in interactive mode and saved to disk, you have to go into update configuration and rebuild application.&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update Dashy&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC Console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/misc/dashy-update.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; PhotoPrism LXC &lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/tteck/Proxmox/raw/main/misc/images/photoprism.png?raw=true&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; PhotoPrism LXC &lt;/h1&gt; &#xA; &lt;p&gt;PhotoPrism¬Æ is an AI-powered app for browsing, organizing &amp;amp; sharing your photo collection.&lt;/p&gt; &#xA; &lt;p&gt;To create a new Proxmox PhotoPrism LXC, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/photoprism-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 2GB RAM - 8GB Storage - 2vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;&lt;strong&gt;PhotoPrism Interface - IP:2342&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;Initial Login&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;username&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;admin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;password&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;admin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.photosync-app.com/home.html&#34;&gt;PhotoSync&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update PhotoPrism&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC Console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/misc/photoprism-update.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; Daemon Sync Server LXC&lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fimg.informer.com%2Ficons_mac%2Fpng%2F128%2F350%2F350335.png&amp;amp;f=1&amp;amp;nofb=1&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; Daemon Sync Server LXC &lt;/h1&gt; &#xA; &lt;p&gt;Sync files from app to server, share photos &amp;amp; videos, back up your data and stay secure inside local network.&lt;/p&gt; &#xA; &lt;p&gt;To create a new Proxmox Daemon Sync Server LXC, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/daemonsync-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 512MiB RAM - 8GB Storage - 1vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;&lt;strong&gt;Daemon Sync Server Interface - IP:8084&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Search: &lt;code&gt;DAEMON Sync&lt;/code&gt; in your favorite app store&lt;/p&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; MotionEye VMS LXC &lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/home-assistant/brands/raw/master/core_integrations/motioneye/icon.png?raw=true&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; MotionEye VMS LXC &lt;/h1&gt; &#xA; &lt;p&gt;To create a new Proxmox MotionEye VMS LXC, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/motioneye-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 2GB RAM - 8GB Storage - 2vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;&lt;strong&gt;MotionEye Interface - IP:8765&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;Initial Login&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;username&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;admin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;password&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update MotionEye&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;pip install motioneye --upgrade&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; File Browser&lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/tteck/Proxmox/raw/main/misc/images/filebrowser.png?raw=true&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; File Browser &lt;/h1&gt; &#xA; &lt;p&gt;To Install File Browser, ‚ö†Ô∏è run the following in the LXC console.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/misc/filebrowser-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://filebrowser.org/features&#34;&gt;File Browser&lt;/a&gt; is a create-your-own-cloud-kind of software where you can install it on a server, direct it to a path and then access your files through a nice web interface. Many available features!&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;File Browser Interface - http:// IP:8080&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;Initial Login&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;username&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;admin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;password&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;changeme&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update File Browser&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;curl -fsSL https://raw.githubusercontent.com/filebrowser/get/master/get.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; Webmin System Administration&lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/webmin/webmin/raw/master/images/webmin-blue.png?raw=true&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; Webmin System Administration &lt;/h1&gt; &#xA; &lt;p&gt;To Install Webmin System Administration &lt;a href=&#34;https://raw.githubusercontent.com/tteck/Proxmox/main/misc/images/file-manager.png&#34;&gt;(Screenshot)&lt;/a&gt;, ‚ö†Ô∏è run the following in the LXC console.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/misc/webmin.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you prefer to manage all aspects of your Proxmox LXC from a graphical interface instead of the command line interface, Webmin might be right for you.&lt;/p&gt; &#xA; &lt;p&gt;Benefits include automatic daily security updates, backup and restore, file manager with editor, web control panel, and preconfigured system monitoring with optional email alerts.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Webmin Interface - https:// IP:10000 (https)&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;Initial Login&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;username&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;root&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;password&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;root&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update Webmin&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;Update from the Webmin UI&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Uninstall Webmin&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash /etc/webmin/uninstall.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; WireGuard LXC &lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fcdn.icon-icons.com%2Ficons2%2F2699%2FPNG%2F512%2Fwireguard_logo_icon_168760.png&amp;amp;f=1&amp;amp;nofb=1&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; WireGuard LXC &lt;/h1&gt; &#xA; &lt;h3 align=&#34;center&#34;&gt; With WGDashboard &lt;/h3&gt; &#xA; &lt;p&gt;To create a new Proxmox WireGuard LXC, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/wireguard-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Default Settings: 512MiB RAM - 2GB Storage - 1vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;&lt;strong&gt;WGDashboard Interface - http:// IP:10086&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;Initial Login&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;username&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;admin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;password&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;admin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;Host Configuration&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;nano /etc/pivpn/wireguard/setupVars.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;‚öôÔ∏è&lt;strong&gt;Add Clients&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;pivpn add&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update WireGuard&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apt update &amp;amp;&amp;amp; apt upgrade -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; CrowdSec&lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/crowdsecurity/crowdsec-docs/main/crowdsec-docs/static/img/crowdsec_no_txt.png?raw=true&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; CrowdSec&lt;/h1&gt; &#xA; &lt;p&gt;To Install CrowdSec, ‚ö†Ô∏è run the following in the LXC console.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/misc/crowdsec-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://crowdsec.net/&#34;&gt;CrowdSec&lt;/a&gt; is a free, open-source and collaborative IPS. Analyze behaviors, respond to attacks &amp;amp; share signals across the community.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://app.crowdsec.net/product-tour&#34;&gt;&lt;strong&gt;Control center for your CrowdSec machines.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; Keycloak LXC&lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://www.keycloak.org/resources/images/keycloak_icon_512px.svg?raw=true&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; Keycloak LXC&lt;/h1&gt; &#xA; &lt;p&gt;To create a new Proxmox Keycloak LXC, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/keycloak-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.keycloak.org/&#34;&gt;Keycloak&lt;/a&gt; is an Open Source Identity and Access Management solution for modern Applications and Services.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Keycloak Interface - http:// IP:8080&lt;/strong&gt; (First start can take a few minutes)&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;Initial Login&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;The initial admin user can be added manually using the web frontend when accessed from localhost or automatically using environment variables.&lt;/p&gt; &#xA; &lt;p&gt;To add the initial admin user using environment variables, set &lt;code&gt;KEYCLOAK_ADMIN&lt;/code&gt; for the initial admin username and &lt;code&gt;KEYCLOAK_ADMIN_PASSWORD&lt;/code&gt; for the initial admin password.&lt;/p&gt; &#xA; &lt;p&gt;First, stop Keycloak&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;systemctl stop keycloak.service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;then start Keycloak by coping &amp;amp; pasting the following (only needed once)&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cd /opt/keycloak&#xA;export KEYCLOAK_ADMIN=admin&#xA;export KEYCLOAK_ADMIN_PASSWORD=changeme&#xA;&#xA;bin/kc.sh start-dev &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update Keycloak&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;working On&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary markdown=&#34;span&#34;&gt; Vaultwarden LXC&lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dani-garcia/vaultwarden/main/resources/vaultwarden-icon-white.svg?sanitize=true&#34; width=&#34;100&#34; height=&#34;100&#34;&gt;&lt;/p&gt; &#xA; &lt;h1 align=&#34;center&#34; id=&#34;heading&#34;&gt; Vaultwarden LXC &lt;/h1&gt; &#xA; &lt;p&gt;Alternative implementation of the Bitwarden server API written in Rust and compatible with upstream &lt;a href=&#34;https://bitwarden.com/download/&#34;&gt;Bitwarden clients&lt;/a&gt;, perfect for self-hosted deployment where running the official resource-heavy service might not be ideal.&lt;/p&gt; &#xA; &lt;p&gt;To create a new Proxmox Vaultwarden LXC, run the following in the Proxmox Shell.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/vaultwarden-v3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;‚ö†Ô∏è Vaultwarden needs to be behind a proxy (Nginx Proxy Manager) to obtain HTTPS and to allow clients to connect.&lt;/p&gt; &#xA; &lt;p&gt;The script builds from source, which takes time and resources. After the build, the script will automatically set resources to Normal Settings.&lt;/p&gt; &#xA; &lt;p&gt;Expect 30+ minute install time.&lt;/p&gt; &#xA; &lt;h3 align=&#34;center&#34; id=&#34;heading&#34;&gt;‚ö° Normal Settings: 512Mib RAM - 6GB Storage - 1vCPU ‚ö°&lt;/h3&gt; &#xA; &lt;p&gt;&lt;strong&gt;Vaultwarden Interface - IP:8000&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;Path to Vaultwarden .env file&lt;/strong&gt; (to enable &lt;code&gt;ADMIN_TOKEN&lt;/code&gt;)&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;/opt/vaultwarden/.env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;‚öôÔ∏è &lt;strong&gt;To Update Vaultwarden&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run in the LXC console&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bash -c &#34;$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/misc/vaultwarden-update.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
  <entry>
    <title>Installomator/Installomator</title>
    <updated>2022-06-16T01:53:34Z</updated>
    <id>tag:github.com,2022-06-16:/Installomator/Installomator</id>
    <link href="https://github.com/Installomator/Installomator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Installation script to deploy standard software on Macs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Installomator&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;The one installer script to rule them all.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/Installomator/Installomator&#34; alt=&#34;&#34;&gt;&amp;nbsp;&lt;img src=&#34;https://img.shields.io/github/downloads/Installomator/Installomator/latest/total&#34; alt=&#34;&#34;&gt;&amp;nbsp;&lt;img src=&#34;https://img.shields.io/badge/macOS-10.14%2B-success&#34; alt=&#34;&#34;&gt;&amp;nbsp;&lt;img src=&#34;https://img.shields.io/github/license/Installomator/Installomator&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This script is in the ‚Äúwe find it useful, it is working for us‚Äù stage.&lt;/p&gt; &#xA;&lt;p&gt;Your production and deployment environment will be different, please test thoroughly before rolling it out to your production.&lt;/p&gt; &#xA;&lt;p&gt;We have put a lot of work into making it stable and safe, but we cannot - of course - make &lt;em&gt;any&lt;/em&gt; promises that it won&#39;t break in some not yet encountered edge case.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;Intallomator was originally inspired by the download scripts from William Smith and Sander Schram, and created by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/scriptingosx&#34;&gt;Armin Briegel - @scriptingosx&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Later on a few more members came on the project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Isaac Ordonez - @issacatmann&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Theile&#34;&gt;S√∏ren Theilgaard - @Theile&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/acodega&#34;&gt;Adam Codega - @acodega&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And with numerous contributions from many others.&lt;/p&gt; &#xA;&lt;h2&gt;Support and Contributing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please note, that if you are contributing to this project with new labels or other suggestions in PRs, please put your changes in the files below &lt;code&gt;fragments&lt;/code&gt;-folder. DO NOT edit the full &lt;code&gt;Installomator.sh&lt;/code&gt; script. The full script is now a build of the fragments, and will be overwritten. See the &lt;a href=&#34;https://raw.githubusercontent.com/Installomator/Installomator/main/utils/README.md&#34;&gt;README.md&lt;/a&gt; file in the &lt;code&gt;utils&lt;/code&gt; directory for detailed instructions.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Discussion, support and advice around Installomator happens in the &lt;code&gt;#installomator&lt;/code&gt; channel in the &lt;a href=&#34;https://macadmins.org&#34;&gt;MacAdmins.org Slack&lt;/a&gt;. Go there for support questions.&lt;/p&gt; &#xA;&lt;p&gt;Do not create an issue just when you have a questions, but do file an issue or pull request (PR) for bugs or wrong behavior. When in doubt, ask in the above Slack channel.&lt;/p&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/Installomator/Installomator/raw/dev/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for how to contribute.&lt;/p&gt; &#xA;&lt;h2&gt;More reading&lt;/h2&gt; &#xA;&lt;p&gt;Our wiki:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Installomator/Installomator/wiki&#34;&gt;Wiki&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are a few interesting post on Installomator on Armin‚Äôs weblog:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://scriptingosx.com/2020/05/introducing-installomator/&#34;&gt;Introducing Installomator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://scriptingosx.com/2020/06/using-installomator-with-jamf-pro/&#34;&gt;Using Installomator with Jamf Pro&lt;/a&gt; by Mischa van der Bent&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;p&gt;In the world of managing Apple Macs, organizations can have two different approaches to the management. Either the IT department will tightly manage and verify each piece of software, or they will just want the latest software to be deployed as fast as possible.&lt;/p&gt; &#xA;&lt;p&gt;OK, maybe some software should be tightly managed and others not, but you get the point.&lt;/p&gt; &#xA;&lt;h3&gt;Tightly managed&lt;/h3&gt; &#xA;&lt;p&gt;If your solution needs to be tightly managed, i.e. the versions of the operating system and third party software are controlled and updates will only be pushed with the management system when the administration and security team went through an approval process and then the update is automated. This is an important and valid workflow and the right fit for many deployments.&lt;/p&gt; &#xA;&lt;p&gt;Installomator was &lt;em&gt;not&lt;/em&gt; written for these kinds of deployment.&lt;/p&gt; &#xA;&lt;p&gt;If you are running this kind of deployment, you want to use &lt;a href=&#34;https://github.com/autopkg/autopkg&#34;&gt;AutoPkg&lt;/a&gt; and you can stop reading here.&lt;/p&gt; &#xA;&lt;h3&gt;Latest version always&lt;/h3&gt; &#xA;&lt;p&gt;There are other kinds of deployments, though. In these deployments the management system is merely used to ‚Äúget the user ready‚Äù as quickly as possible when they set up a new machine, and to offer software from a self service portal. In these deployments, system and software installations are ‚Äòlatest version available‚Äô and updates are user driven (though we do want to nag them and push them).&lt;/p&gt; &#xA;&lt;p&gt;Installomator can help with this.&lt;/p&gt; &#xA;&lt;p&gt;These deployments can be&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;user driven&lt;/li&gt; &#xA; &lt;li&gt;low control&lt;/li&gt; &#xA; &lt;li&gt;minimal maintenance effort&lt;/li&gt; &#xA; &lt;li&gt;latest version is best&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These can be &#39;user controlled&#39; Macs and we (the admins) just want to assist the user in doing the right thing. And the right thing is (often) to install the latest versions and updates when they are available.&lt;/p&gt; &#xA;&lt;p&gt;The Mac App Store and software pushed through the Mac App Store follow this approach. When you manage and deploy software through the App Store ‚Äî whether it is on iOS or macOS ‚Äî neither the MacAdmin nor the user get a choice of the application version. They will get the latest version.&lt;/p&gt; &#xA;&lt;p&gt;In such deployments, keeping the installers hosted in your management system up to date is an extra burden. AutoPkg can, well, automate much of the download/re-package/upload/stage cycle, but it still requires oversight and maintenance. Instead of downloading, re-packaging, uploading application installers to the management system, it is often easier to run a script which downloads the latest version directly from the vendor&#39;s servers and installs it.&lt;/p&gt; &#xA;&lt;p&gt;There are obviously a few downsides to this approach:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;when your fleet is mostly on site and many will install or update at the same time, they will reach out over the internet to the vendor&#39;s servers, possibly overwhelming your internet connection&lt;/li&gt; &#xA; &lt;li&gt;when you download software from the internet, it should be verified to avoid man-in-the-middle or other injection attacks&lt;/li&gt; &#xA; &lt;li&gt;there is no control over which version the clients get, you cannot &#34;hold back&#34; new versions for testing and approval workflows&lt;/li&gt; &#xA; &lt;li&gt;some application downloads are gated behind logins or paywalls and cannot be automated this way&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some of these disadvantages can be seen as advantages in different setups. When your fleet is mostly mobile and offsite, then downloading from vendor servers will relieve the inbound connection to your management server, or the data usage on your management system&#39;s cloud server. Software vendors are pushing for subscriptions with continuous updates and feature releases, so moving the entire team to the latest versions quickly can make those available quickly. Also being on the latest release includes all current security patches.&lt;/p&gt; &#xA;&lt;p&gt;Because this is an attractive solution for &lt;em&gt;certain kinds&lt;/em&gt; of deployment, there are already many scripts out there that will download and install the latest version of a given software. And we have built and used quite a few in-house, as well. Most importantly, &lt;a href=&#34;https://gist.github.com/talkingmoose/a16ca849416ce5ce89316bacd75fc91a&#34;&gt;William Smith has this script&lt;/a&gt; which can be used to install several different Microsoft applications and bundles, because Microsoft has a nice unified URL scheme.&lt;/p&gt; &#xA;&lt;p&gt;At some point, in 2018, Armin got frustrated at the number of scripts he was maintaining (or failing to). Also, his concern that most of the scripts weren‚Äôt doing &lt;em&gt;any&lt;/em&gt; verification of the download was getting unbearable. So, he set out to write &lt;em&gt;the one install script to rule them all‚Ä¶&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Locally installed&lt;/h3&gt; &#xA;&lt;p&gt;So Armin made the version for Jamf Pro but universally for any MDM to adopt.&lt;/p&gt; &#xA;&lt;p&gt;S√∏ren looked at this, and wanted this approach to work in Mosyle and Addigy, and for these solutions we need Installomator to be locally installed on. the Mac, and then the MDM can call this script from their scripts features. For some time S√∏ren had a version of Installomator that was supplied with a notarized pkg, so it could be deployed as part of DEP or however was needed.&lt;/p&gt; &#xA;&lt;p&gt;This has now been merged into Installomator, and with contributions of Isaac and Adam, new features and labels have been added more frequently.&lt;/p&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;p&gt;The goals for Installomator are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;work with various common archive types&lt;/li&gt; &#xA; &lt;li&gt;verify the downloaded archive or application&lt;/li&gt; &#xA; &lt;li&gt;have a simple ‚Äòinterface‚Äô to the admin&lt;/li&gt; &#xA; &lt;li&gt;single script file so it can ‚Äòeasily‚Äô be copied into a management system&lt;/li&gt; &#xA; &lt;li&gt;signed and notarized pkg-installer for local installation&lt;/li&gt; &#xA; &lt;li&gt;extensible without deep scripting knowledge&lt;/li&gt; &#xA; &lt;li&gt;work independently of a specific management system&lt;/li&gt; &#xA; &lt;li&gt;no dependencies that may be removed from macOS in the future or are not pre-installed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In Detail:&lt;/p&gt; &#xA;&lt;h3&gt;Archive types&lt;/h3&gt; &#xA;&lt;p&gt;Installomator can work with the following common archive and installer types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;pkg: as a direct download, or when nested inside a dmg or zip&lt;/li&gt; &#xA; &lt;li&gt;dmg: for the common &#39;drag app to /Applications&#39; installation style&lt;/li&gt; &#xA; &lt;li&gt;zip: the application is just compressed with zip or or tbz&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When the download yields a pkg file, Installomator will run &lt;code&gt;installer&lt;/code&gt; to install it on the current system.&lt;/p&gt; &#xA;&lt;p&gt;Applications in dmgs or zips will be copied to &lt;code&gt;/Applications&lt;/code&gt; and their owner will be set to the current user, so the install works like a standard drag&#39;n drop installation. Owner can also be set to root/wheel.&lt;/p&gt; &#xA;&lt;p&gt;(I consider it a disgrace, that Jamf, after nearly 20 years, &lt;em&gt;still&lt;/em&gt; cannot deal with ‚Äòdrag‚Äôn drop installation dmgs natively. It‚Äôs not &lt;em&gt;that&lt;/em&gt; hard.)&lt;/p&gt; &#xA;&lt;h3&gt;Verify the download&lt;/h3&gt; &#xA;&lt;p&gt;I chose to use the macOS built-in verification for the downloads. Even though download quarantine does usually not take effect with scripted downloads and installations, we &lt;em&gt;can&lt;/em&gt; use Gatekeeper&#39;s verification with the &lt;code&gt;spctl&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;All downloads have to be signed &lt;em&gt;and&lt;/em&gt; notarized by a valid Apple Developer ID. Signature and notarization will verify the origin and that the archive has not been tampered with in transfer. In addition, the script compares the developer team ID (the ten-digit code associated with the Apple Developer account) with the &lt;em&gt;expected&lt;/em&gt; team ID, so that software signed with a different, malicious Apple ID will not be installed.&lt;/p&gt; &#xA;&lt;h3&gt;Simple interface&lt;/h3&gt; &#xA;&lt;p&gt;When used to install software, Installomator has a single argument: the label or name of the software to be installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./Installomator.sh firefox&#xA;./Installomator.sh firefox LOGO=jamf BLOCKING_PROCESS_ACTION=tell_user_then_kill NOTIFY=all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is a debug mode and other settings that can be controlled with variables in the code. This simplifies the actual use of the script from within a management system.&lt;/p&gt; &#xA;&lt;h3&gt;Extensible&lt;/h3&gt; &#xA;&lt;p&gt;As of this writing, Installomator knows how to download and install more than 364 different applications. You can add more by adding new labels to the &lt;code&gt;fragments&lt;/code&gt;-folder. Below is an example of a label, and most of them (just) needs this information (not really &#34;just&#34; in this case, as we have to differentiate between arm64 and i386 versions for both &lt;code&gt;downloadURL&lt;/code&gt; and &lt;code&gt;appNewVersion&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;googlechrome)&#xA;    name=&#34;Google Chrome&#34;&#xA;    type=&#34;dmg&#34;&#xA;    if [[ $(arch) != &#34;i386&#34; ]]; then&#xA;        printlog &#34;Architecture: arm64 (not i386)&#34;&#xA;        downloadURL=&#34;https://dl.google.com/chrome/mac/universal/stable/GGRO/googlechrome.dmg&#34;&#xA;        appNewVersion=$(curl -s https://omahaproxy.appspot.com/history | awk -F&#39;,&#39; &#39;/mac_arm64,stable/{print $3; exit}&#39;)&#xA;    else&#xA;        printlog &#34;Architecture: i386&#34;&#xA;        downloadURL=&#34;https://dl.google.com/chrome/mac/stable/GGRO/googlechrome.dmg&#34;&#xA;        appNewVersion=$(curl -s https://omahaproxy.appspot.com/history | awk -F&#39;,&#39; &#39;/mac,stable/{print $3; exit}&#39;)&#xA;    fi&#xA;    expectedTeamID=&#34;EQHXZ8M8AV&#34;&#xA;    ;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you know how to extract these pieces of information from the application and/or download, then you can add an application to Installomator.&lt;/p&gt; &#xA;&lt;p&gt;The script &lt;code&gt;buildLabel.sh&lt;/code&gt; can help with the label creation. Just server the URL to the script, and it will try to figure out things and write out a label as output. See &lt;a href=&#34;https://github.com/Installomator/Installomator/wiki#tutorials&#34;&gt;Wiki Tutorials&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please note: Labels should be named in small caps, numbers 0-9, ‚Äú-‚Äù, and ‚Äú_‚Äù. No other characters allowed.&lt;/p&gt; &#xA;&lt;p&gt;Actually labels are part of a case-statement, and must be formatted accordingly.&lt;/p&gt; &#xA;&lt;h3&gt;Not specific to a management system&lt;/h3&gt; &#xA;&lt;p&gt;Armin wrote this script mainly for use with Jamf Pro, because that is what he used. For testing, you can run the script interactively from the command line. However, we have tried to keep anything that is specific to Jamf optional, or so flexible that it will work anywhere. Even if it does not work with your management system ‚Äòout of the box‚Äô, the adaptations should be straightforward.&lt;/p&gt; &#xA;&lt;p&gt;Not all MDMs can include the full script, for those MDMs it might be more useful to install it on the client machines, and run it from there. So a PKG to be installed on client Macs is also provided here.&lt;/p&gt; &#xA;&lt;h3&gt;No dependencies&lt;/h3&gt; &#xA;&lt;p&gt;The script started out as a pure &lt;code&gt;sh&lt;/code&gt; script, and when arrays was needed it was ‚Äòswitched‚Äô to &lt;code&gt;zsh&lt;/code&gt;, because that is what &lt;a href=&#34;https://scriptingosx.com/zsh&#34;&gt;we can rely on being in macOS for the foreseeable future&lt;/a&gt;. There are quite a few places where using python would have been easier and safer, but with the python 2 run-time being deprecated, that would have added a requirement for a Python 3 run-time to be installed. XML and JSON parsing would have been better with a tool like &lt;a href=&#34;https://github.com/ABridoux/scout&#34;&gt;scout&lt;/a&gt; or &lt;a href=&#34;https://stedolan.github.io/jq/&#34;&gt;jq&lt;/a&gt;, but those would again require additional installations on the client before the script can run.&lt;/p&gt; &#xA;&lt;p&gt;Keeping the script as a &lt;code&gt;zsh&lt;/code&gt; allows you to paste it into your management system&#39;s interface (and disable the DEBUG mode) and use it without requiring any other installations.&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;h3&gt;Interactively in the command line&lt;/h3&gt; &#xA;&lt;p&gt;The script will require one argument.&lt;/p&gt; &#xA;&lt;p&gt;The argument can be &lt;code&gt;version&lt;/code&gt; or &lt;code&gt;longversion&lt;/code&gt; which will print the script&#39;s version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; ./Installomator.sh version&#xA;2021-03-28 10:03:42 version ################## Start Installomator v. 0.5.0&#xA;2021-03-28 10:03:42 version ################## version&#xA;2021-03-28 10:03:42 version 0.5.0&#xA;&amp;gt; ./Installomator.sh longversion&#xA;2021-03-28 10:04:16 longversion ################## Start Installomator v. 0.5.0&#xA;2021-03-28 10:04:16 longversion ################## longversion&#xA;2021-03-28 10:04:16 longversion Installomater: version 0.5.0 (2021-03-28)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other than the version arguments, the argument can be any of the labels listed in the Labels.txt file. Each of the labels will download and install the latest version of the application, or suite of applications. Since the script will have to run the &lt;code&gt;installer&lt;/code&gt; command or copy the application to the &lt;code&gt;/Applications&lt;/code&gt; folder, it will have to be run as root.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; sudo ./Installomator.sh desktoppr DEBUG=0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Since Jamf Pro always provides the mount point, computer name, and user name as the first three arguments for policy scripts, the script will use argument &lt;code&gt;$4&lt;/code&gt; when there are more than three arguments.)&lt;/p&gt; &#xA;&lt;h3&gt;Debug mode&lt;/h3&gt; &#xA;&lt;p&gt;There is a variable named &lt;code&gt;DEBUG&lt;/code&gt; which is set in line 21 of the script. When &lt;code&gt;DEBUG&lt;/code&gt; is set to &lt;code&gt;1&lt;/code&gt; (default) or &lt;code&gt;2&lt;/code&gt; for a variation of debug, no actions that would actually modify the current system are taken. This is useful for testing most of the actions in the script, but obviously not all of them.&lt;/p&gt; &#xA;&lt;p&gt;When the &lt;code&gt;DEBUG&lt;/code&gt; variable is &lt;code&gt;1&lt;/code&gt;, downloaded archives and extracted files will be written to the script&#39;s directory, rather than a temporary directory, which can make debugging easier.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;DEBUG&lt;/code&gt; variable is &lt;code&gt;2&lt;/code&gt;, the temporary folder is created and downloaded and extracted files goes to that folder, as if not in DEBUG mode, but installation is still not done. On the other hand blocking processes are checked, the app is reopened if closed, and the user is notified.&lt;/p&gt; &#xA;&lt;p&gt;Debug mode 1 is useful to test the download and verification process without having to re-download and re-install an application or package on your system. Debug mode 2 is great for checking running processe and notifications.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Always remember&lt;/em&gt; to change the &lt;code&gt;DEBUG&lt;/code&gt; variable to &lt;code&gt;0&lt;/code&gt; when deploying. The installer PKG we provide has &lt;code&gt;DEBUG=0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Use Installomator with various MDM solutions&lt;/h3&gt; &#xA;&lt;p&gt;In the wiki we have provided documentation on how Installomator is used in various MDM solution, like &lt;a href=&#34;https://github.com/Installomator/Installomator/wiki/MDM:-Jamf-Pro&#34;&gt;Jamf Pro&lt;/a&gt;, &lt;a href=&#34;https://github.com/Installomator/Installomator/wiki/MDM:-Mosyle-(Business,-Fuse,-and-Manager)&#34;&gt;Mosyle&lt;/a&gt;, and &lt;a href=&#34;https://github.com/Installomator/Installomator/wiki/MDM:-Addigy&#34;&gt;Addigy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What it does&lt;/h2&gt; &#xA;&lt;p&gt;When it runs with a known label, the script will perform the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check the version installed with the version online. Only continue if it&#39;s different&lt;/li&gt; &#xA; &lt;li&gt;download the latest version from the vendor&lt;/li&gt; &#xA; &lt;li&gt;when the application is running, prompt the user to quit or cancel (customizable)&lt;/li&gt; &#xA; &lt;li&gt;dmg or zip archives: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;extract the application and copy it to /Applications&lt;/li&gt; &#xA;   &lt;li&gt;change the owner of the application to the current user&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;pkg files: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;when necessary, extract the pkg from the enclosing archive&lt;/li&gt; &#xA;   &lt;li&gt;install the pkg with the &lt;code&gt;installer&lt;/code&gt; tool&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;clean up the downloaded files&lt;/li&gt; &#xA; &lt;li&gt;notify the user (also customizable)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuring the script&lt;/h2&gt; &#xA;&lt;p&gt;We have several default settings for certain behavior and notifications inside the script, but these can be customized when calling the script.&lt;/p&gt; &#xA;&lt;h3&gt;Blocking Process actions&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;BLOCKING_PROCESS_ACTION&lt;/code&gt; variable controls the behavior of the script when it finds a blocking process running.&lt;/p&gt; &#xA;&lt;p&gt;There are eight options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ignore&lt;/code&gt;: continue even when blocking processes are found.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;silent_fail&lt;/code&gt;: Exit script without prompt or installation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;prompt_user&lt;/code&gt;: Show a user dialog for each blocking process found, user can choose &#34;Quit and Update&#34; or &#34;Not Now&#34;. When &#34;Quit and Update&#34; is chosen, blocking process will be told to quit. Installomator will wait 30 seconds before checking again in case Save dialogs etc are being responded to. Installomator will abort if quitting after three tries does not succeed. &#34;Not Now&#34; will exit Installomator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;prompt_user_then_kill&lt;/code&gt;: show a user dialog for each blocking process found, user can choose &#34;Quit and Update&#34; or &#34;Not Now&#34;. When &#34;Quit and Update&#34; is chosen, blocking process will be terminated. Installomator will abort if terminating after two tries does not succeed. &#34;Not Now&#34; will exit Installomator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;prompt_user_loop&lt;/code&gt;: Like prompt-user, but clicking &#34;Not Now&#34;, will just wait an hour, and then it will ask again. WARNING! It might block the MDM agent on the machine, as the script will not exit, it will pause until the hour has passed, possibly blocking for other management actions in this time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tell_user&lt;/code&gt;: (Default) User will be showed a notification about the important update, but user is only allowed to Quit and Continue, and then we ask the app to quit. This is default.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tell_user_then_kill&lt;/code&gt;: User will be showed a notification about the important update, but user is only allowed to Quit and Continue. If the quitting fails, the blocking processes will be terminated.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kill&lt;/code&gt;: kill process without prompting or giving the user a chance to save.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If any process was closed, Installomator will try to open the app again, after the update process is done.&lt;/p&gt; &#xA;&lt;h3&gt;Notification&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;NOTIFY&lt;/code&gt; variable controls the notifications shown to the user. As of now, there are three options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;success&lt;/code&gt;: (default) notify the user after a successful install&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;silent&lt;/code&gt;: no notifications&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;all&lt;/code&gt;: all notifications (great for Self Service installation)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Logo&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;LOGO&lt;/code&gt; variable is used for the icon shown in dialog boxes. There are these options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;appstore&lt;/code&gt;: Icon is Apple App Store (default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;jamf&lt;/code&gt;: JAMF Pro&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mosyleb&lt;/code&gt;: Mosyle Business&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mosylem&lt;/code&gt;: Mosyle Manager (Education)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;addigy&lt;/code&gt;: Addigy Path can also be set in the command call, and if file exists, it will be used, like &lt;code&gt;LOGO=&#34;/System/Applications/App\ Store.app/Contents/Resources/AppIcon.icns&#34;&lt;/code&gt; (spaces are escaped).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;App Store apps handling&lt;/h3&gt; &#xA;&lt;p&gt;Default is &lt;code&gt;IGNORE_APP_STORE_APPS=no&lt;/code&gt; &lt;strong&gt;options:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;no&lt;/code&gt;: If installed app is from App Store (which include VPP installed apps) it will not be touched, no matter it&#39;s version (default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yes&lt;/code&gt;: Replace App Store (and VPP) version of app and handle future updates using Installomator, even if latest version. Shouldn‚Äôt give any problems for the user in most cases. Known bad example: Slack will loose all settings.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Owner of copied apps&lt;/h3&gt; &#xA;&lt;p&gt;Default is &lt;code&gt;SYSTEMOWNER=0&lt;/code&gt; &lt;strong&gt;options:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;0&lt;/code&gt;: Current user will be owner of copied apps, just like if they installed it themselves (default).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;1&lt;/code&gt;: root:wheel will be set on the copied app. Useful for shared machines.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Install behavior (force installation)&lt;/h3&gt; &#xA;&lt;p&gt;Since we now make a version checking, and only installs the software if the version is different, an &lt;code&gt;INSTALL&lt;/code&gt; variable can be used to force the installation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt; &lt;/code&gt;: When not set, software is only installed if it is newer/different in version (default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;force&lt;/code&gt;: Install even if it‚Äôs the same version&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Re-opening of closed app&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;REOPEN&lt;/code&gt; can be used to prevent the reopening of a closed app&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;yes&lt;/code&gt;: (default) app will be reopened if it was closed&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;no&lt;/code&gt;: app not reopened&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configuration from Arguments&lt;/h3&gt; &#xA;&lt;p&gt;You can provide a configuration variable, such as &lt;code&gt;DEBUG&lt;/code&gt; or &lt;code&gt;NOTIFY&lt;/code&gt; as an argument in the form &lt;code&gt;VAR=value&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./Installomator.sh desktoppr DEBUG=0 NOTIFY=silent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Providing variables this way will override any variables set in the script.&lt;/p&gt; &#xA;&lt;p&gt;You can even provide &lt;em&gt;all&lt;/em&gt; the variables necessary for download and installation. Of course, without a label the argument parsing will fail, so I created a special label &lt;code&gt;valuesfromarguments&lt;/code&gt; which only checks if the four required values are present:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./Installomator.sh name=desktoppr type=pkg downloadURL=https://github.com/scriptingosx/desktoppr/releases/download/v0.3/desktoppr-0.3.pkg expectedTeamID=JME5BW3F3R valuesfromarguments&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The order of the variables and label is not relevant. But, when you provide more than one label, all but the &lt;em&gt;last&lt;/em&gt; label will be ignored.&lt;/p&gt; &#xA;&lt;p&gt;Providing all the variables this way might be useful for certain downloads that have a customized URL for each vendor/customer (like customized TeamView or Watchman Monitoring) or are local downloads.&lt;/p&gt; &#xA;&lt;h2&gt;Adding applications/label blocks&lt;/h2&gt; &#xA;&lt;h3&gt;Required Variables&lt;/h3&gt; &#xA;&lt;p&gt;The script requires four pieces of information to download and install an application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;spotify)&#xA;    name=&#34;Spotify&#34;&#xA;    type=&#34;dmg&#34;&#xA;    downloadURL=&#34;https://download.scdn.co/Spotify.dmg&#34;&#xA;    expectedTeamID=&#34;2FNC3A47ZF&#34;&#xA;    ;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The four required variables are&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;name&lt;/code&gt;: The display name of the installed application without the &lt;code&gt;.app&lt;/code&gt; extensions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;type&lt;/code&gt;: The type of installation. Possible values:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;dmg&lt;/code&gt;: application in disk image file (drag&#39;n drop installation)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pkg&lt;/code&gt;: flat pkg download&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;zip&lt;/code&gt;: application in zip archive (&lt;code&gt;zip&lt;/code&gt; extension)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;tbz&lt;/code&gt;: application in tbz archive (&lt;code&gt;tbz&lt;/code&gt; extension)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pkgInDmg&lt;/code&gt;: a pkg file inside a disk image&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pkgInZip&lt;/code&gt;: a pkg file inside a zip&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;appInDmgInZip&lt;/code&gt;: an app in a dmg file that has been zip&#39;ed&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;downloadURL&lt;/code&gt;: The URL from which to download the archive. The URL can be generated by a series of commands, for example when you need to parse an xml file for the latest URL. (See &lt;code&gt;bbedit&lt;/code&gt;, &lt;code&gt;desktoppr&lt;/code&gt;, or &lt;code&gt;omnigraffle&lt;/code&gt; for examples.) Sometimes version differs between Intel and Apple Silicon versions. (See &lt;code&gt;brave&lt;/code&gt;, &lt;code&gt;obsidian&lt;/code&gt;, &lt;code&gt;omnidisksweeper&lt;/code&gt;, or &lt;code&gt;notion&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;curlOptions&lt;/code&gt;: (array, optional) Options to the &lt;code&gt;curl&lt;/code&gt; command, needed for &lt;code&gt;curl&lt;/code&gt; to be able to download the software. Usually used for adding extra headers that some servers need in order to serve the file. &lt;code&gt;curlOptions=( -H &#34;User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15&#34; )&lt;/code&gt; (See ‚Äúmocha‚Äù-labels, for examples on labels, and &lt;code&gt;buildLabel.sh&lt;/code&gt; for header-examples.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;appNewVersion&lt;/code&gt; (optional, but recommended): Version of the downloaded software. If given, it will be compared to installed version, to see if download is different. It does not check for newer or not, only different. Not always easy to figure out how to make this. Sometimes this is listed on the downloads page, sometimes in other places. And how can we isolate it in a genral manner? (See &lt;code&gt;abstract&lt;/code&gt;, &lt;code&gt;bbedit&lt;/code&gt;, &lt;code&gt;brave&lt;/code&gt;, &lt;code&gt;desktoppr&lt;/code&gt;, &lt;code&gt;googlechrome&lt;/code&gt;, or &lt;code&gt;omnidisksweeper&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;packageID&lt;/code&gt; (optional, but recommended for pkgs without an app) This variable is for pkg bundle IDs. Very usefull if a pkg only install command line tools, or the like that does not install an app. (See label &lt;code&gt;desktoppr&lt;/code&gt;, &lt;code&gt;golang&lt;/code&gt;, &lt;code&gt;installomator_st&lt;/code&gt;, &lt;code&gt;odrive&lt;/code&gt;, or &lt;code&gt;teamviewerhost&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;expectedTeamID&lt;/code&gt;: The 10-character Developer Team ID with which the application or pkg is signed and notarized.&lt;/p&gt; &lt;p&gt;Obtain the team ID by running:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Applications (in dmgs or zips) &lt;code&gt;spctl -a -vv /Applications/BBEdit.app&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Installation Packages (pkg) &lt;code&gt;spctl -a -vv -t install ~/Downloads/desktoppr-0.2.pkg&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Optional Variables&lt;/h3&gt; &#xA;&lt;p&gt;Depending on the application or pkg there are a few more variables you can or need to set. Many of these are derived from the required variables, but may need to be set manually if those derived values do not work.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;archiveName&lt;/code&gt;: (optional) The name of the downloaded file. When not given the &lt;code&gt;archiveName&lt;/code&gt; is set to &lt;code&gt;$name.$type&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;appName&lt;/code&gt;: (optional) File name of the app bundle in the dmg to verify and copy (include the &lt;code&gt;.app&lt;/code&gt;). When not given, the &lt;code&gt;appName&lt;/code&gt; is set to &lt;code&gt;$name.app&lt;/code&gt;. This is also the name of the app that will get reopned, if we closed any &lt;code&gt;blockingProcesses&lt;/code&gt; (see further down)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;targetDir&lt;/code&gt;: (optional) dmg or zip: Applications will be copied to this directory. Default value is &#39;&lt;code&gt;/Applications&lt;/code&gt;&#39; for dmg and zip installations. pkg: &lt;code&gt;targetDir&lt;/code&gt; is used as the install-location. Default is &#39;&lt;code&gt;/&lt;/code&gt;&#39;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;blockingProcesses&lt;/code&gt;: (optional) Array of process names that will block the installation or update. If no &lt;code&gt;blockingProcesses&lt;/code&gt; array is given the default will be: &lt;code&gt;blockingProcesses=( $name )&lt;/code&gt; When a package contains multiple applications, &lt;em&gt;all&lt;/em&gt; should be listed, e.g: &lt;code&gt;blockingProcesses=( &#34;Keynote&#34; &#34;Pages&#34; &#34;Numbers&#34; )&lt;/code&gt; When a workflow has no blocking processes, use &lt;code&gt;blockingProcesses=( NONE )&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;pkgName&lt;/code&gt;: (optional, only used for &lt;code&gt;dmgInPkg&lt;/code&gt; and &lt;code&gt;dmgInZip&lt;/code&gt;) File name of the pkg file &lt;em&gt;inside&lt;/em&gt; the dmg or zip. When not given the pkgName is set to &lt;code&gt;$name.pkg&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;updateTool&lt;/code&gt;, &lt;code&gt;updateToolArguments&lt;/code&gt;: When Installomator detects an existing installation of the application, and the &lt;code&gt;updateTool&lt;/code&gt; variable is set then &lt;code&gt;$updateTool $updateArguments&lt;/code&gt; Will be run instead of of downloading and installing a complete new version. Use this when the &lt;code&gt;updateTool&lt;/code&gt; does differential and optimized downloads. e.g. &lt;code&gt;msupdate&lt;/code&gt; (see various Microsoft installations).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;updateToolRunAsCurrentUser&lt;/code&gt;: When this variable is set (any value), &lt;code&gt;$updateTool&lt;/code&gt; will be run as the current user. Default is unset and&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;CLIInstaller&lt;/code&gt;:&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;CLIArguments&lt;/code&gt;: If the downloaded dmg is actually an installer that we can call using CLI, we can use these two variables for what to call. We need to define &lt;code&gt;name&lt;/code&gt; for the installed app (to be version checked), as well as &lt;code&gt;installerTool&lt;/code&gt; for the installer app (if named differently that &lt;code&gt;name&lt;/code&gt;. Installomator will add the path to the folder/disk image with the binary, and it will be called like this: &lt;code&gt;$CLIInstaller $CLIArguments&lt;/code&gt; For most installations &lt;code&gt;CLIInstaller&lt;/code&gt; should contain the &lt;code&gt;installerTool&lt;/code&gt; for the CLI call (if it‚Äôs the same). We can support a whole range of other software titles by implementing this. See label adobecreativeclouddesktop.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;installerTool&lt;/code&gt;: Introduced as part of &lt;code&gt;CLIInstaller&lt;/code&gt;. If the installer in the DMG or ZIP is named differently than the installed app, then this variable can be used to name the installer that should be located after mounting/expanding the downloaded archive. See label adobecreativeclouddesktop&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; &#xA;&lt;h3&gt;What if the latest version of the app is already installed?&lt;/h3&gt; &#xA;&lt;p&gt;Short answer: That depends on if labels will know what the latest version will be.&lt;/p&gt; &#xA;&lt;p&gt;Longer answer:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Labels without this will re-download and re-install the latest over the existing installation.&lt;/li&gt; &#xA; &lt;li&gt;Labels with this info will only install the app if the version is different than the one installed.&lt;/li&gt; &#xA; &lt;li&gt;Labels that can use update tool will use that for the update (if the version is different)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Why don&#39;t you just use &lt;code&gt;autopkg install&lt;/code&gt;?&lt;/h3&gt; &#xA;&lt;p&gt;Short answer: &lt;code&gt;autopkg&lt;/code&gt; is not designed or suited for this kind of workflow&lt;/p&gt; &#xA;&lt;p&gt;Long answer:&lt;/p&gt; &#xA;&lt;p&gt;The motivation to not re-invent the wheel and use and existing tool is understandable. However, &lt;code&gt;autopkg&lt;/code&gt; was not designed with this use case in mind and has a few significant downsides.&lt;/p&gt; &#xA;&lt;p&gt;First, you would have to deploy and manage autopkg on all the clients. But to do its work, &lt;code&gt;autopkg&lt;/code&gt; requires recipes. So, you have to install, and update the recipe repos on the client, as well. For security reasons, you &lt;em&gt;really&lt;/em&gt; should only run trusted recipes, so you need to install and update your personal recipe overrides as well.&lt;/p&gt; &#xA;&lt;p&gt;The recipes you use are probably spread across multiple community provided recipe-repos, so we have &lt;code&gt;autopkg&lt;/code&gt; itself, several recipe-repos, and your overrides that we need to manage, each of which may need to be updated at any time.&lt;/p&gt; &#xA;&lt;p&gt;The community recipe-repos contain several recipes for different applications. When you add a recipe-repo for an app you want, you will also install all the other recipes from that repo.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;autopkg install&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; require root or even administrative privileges. &lt;em&gt;Any&lt;/em&gt; user (even standard users) on the system can now install any of the random recipes that came with the community repos.&lt;/p&gt; &#xA;&lt;p&gt;To prevent users installing random apps from the community repos, you can curate your own recipe-repo from the community repos and push that to the clients. At this point, you are managing autopkg, your curated repo, your recipe overrides on the clients and handling the additional work of curating and updating your recipe-repo and the overrides.&lt;/p&gt; &#xA;&lt;p&gt;In addition, a really savvy user (or a malicious attacker) could build their own recipe and run it using the pre-installed &lt;code&gt;autopkg&lt;/code&gt; you installed.&lt;/p&gt; &#xA;&lt;p&gt;And then consider what your CISO department (if you have one) would say about the &lt;code&gt;autopkgserver&lt;/code&gt; and &lt;code&gt;autopkginstalld&lt;/code&gt; daemons running on all the clients...&lt;/p&gt; &#xA;&lt;p&gt;At this point it would be easier to use AutoPkg the way it was intended: on a single admin Mac, and let it upload the pkgs to your management system, which deploys them. Each tool is doing what it is designed for.&lt;/p&gt; &#xA;&lt;p&gt;Please don&#39;t misunderstand this as me saying that AutoPkg is a bad or poorly designed tool. AutoPkg is amazing, powerful, and useful. The &lt;a href=&#34;https://github.com/autopkg/scriptingosx-recipes&#34;&gt;Scripting OS X recipe-repo&lt;/a&gt; is one of the older repos. AutoPkg is valuable tool to help admins with many apps that cannot be automated with tools like Installomator, and with deployment strategies that require more control.&lt;/p&gt; &#xA;&lt;p&gt;But it is not suited as a client install automation tool.&lt;/p&gt; &#xA;&lt;h3&gt;Why don&#39;t you just use brew or MacPorts?&lt;/h3&gt; &#xA;&lt;p&gt;Read the explanation for &lt;code&gt;autopkg&lt;/code&gt;, pretty much the same applies for &lt;code&gt;brew&lt;/code&gt;, i.e. while it is useful on a single Mac, it is a un-manageable mess when you think about deploying and managing on a fleet of computers.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>samsesh/SocialBox-Termux</title>
    <updated>2022-06-16T01:53:34Z</updated>
    <id>tag:github.com,2022-06-16:/samsesh/SocialBox-Termux</id>
    <link href="https://github.com/samsesh/SocialBox-Termux" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SocialBox is a Bruteforce Attack Framework [ Facebook , Gmail , Instagram ,Twitter ] , Coded By Belahsan Ouerghi Edit By samsesh for termux on android&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SocialBox-Termux&lt;/h1&gt; &#xA;&lt;p&gt;SocialBox is a Bruteforce Attack Framework [ Facebook , Gmail , Instagram ,Twitter ] , Coded By Belahsan Ouerghi Edit By samsesh&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt-get update&#xA;apt-get install git&#xA;git clone https://github.com/samsesh/SocialBox-Termux.git &#xA;cd SocialBox-Termux&#xA;chmod +x install-sb.sh&#xA;./install-sb.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Run&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;./SocialBox.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Screenshots :&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/samsesh/SocialBox-Termux/raw/master/Screenshots/sb.png&#34; alt=&#34;Test Image 8&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Tested On :&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Termux on andriod (tor connected if use vpn )&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Donate&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If this project very help you to penetration testing and u want support me , you can give me a cup of coffee :)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.cryptobadges.io/donate/19KHPduHx2C8WAeq13b4xTsGocqq2PM5mN&#34;&gt;&lt;img src=&#34;https://en.cryptobadges.io/badge/small/19KHPduHx2C8WAeq13b4xTsGocqq2PM5mN&#34; alt=&#34;Donate with Bitcoin&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/samsesh/donate&#34;&gt;doante page&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;for any os :&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/samsesh/SocialBox&#34;&gt;socialbox&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contact&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.twitter.com/_samsesh&#34;&gt;Twitter&lt;/a&gt; - _samsesh&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.instagram.com/sam.sesh&#34;&gt;Instagram&lt;/a&gt; - sam.sesh&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Authors :&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;facebook : Imad&lt;/li&gt; &#xA; &lt;li&gt;gmail : Ha3MrX&lt;/li&gt; &#xA; &lt;li&gt;instagram : thelinuxchoice&lt;/li&gt; &#xA; &lt;li&gt;Twitter : thelinuxchoice&lt;/li&gt; &#xA; &lt;li&gt;SocialBox : samsesh&lt;/li&gt; &#xA; &lt;li&gt;SocialBox-Termux : samsesh&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>