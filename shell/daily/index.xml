<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-20T01:52:30Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jinwyp/one_click_script</title>
    <updated>2022-07-20T01:52:30Z</updated>
    <id>tag:github.com,2022-07-20:/jinwyp/one_click_script</id>
    <link href="https://github.com/jinwyp/one_click_script" rel="alternate"></link>
    <summary type="html">&lt;p&gt;一键安装 trojan v2ray xray. Install v2ray / xray (VLESS) and trojan (trojan-go) script&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Easy install v2ray (xray) and trojan (trojan-go) script (ultimate script for all condition)&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jinwyp/one_click_script/master/README_CN.md&#34;&gt;中文文档&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hits.seeyoufarm.com&#34;&gt;&lt;img src=&#34;https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2Fjinwyp%2Fone_click_script&amp;amp;count_bg=%2379C83D&amp;amp;title_bg=%23555555&amp;amp;icon=&amp;amp;icon_color=%23E7E7E7&amp;amp;title=hits&amp;amp;edge_flat=false&#34; alt=&#34;Hits&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Thanks for support this project. Check on &lt;a href=&#34;https://www.patreon.com/linuxkernel&#34;&gt;patreon&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jinwyp/one_click_script/master/#installation&#34;&gt;Install Trojan/Trojan-go and V2ray/Xray shell script&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jinwyp/one_click_script/master/#acme&#34;&gt;Easy get SSL certificate for domains&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jinwyp/one_click_script/master/KERNEL.md&#34;&gt;Linux Kernel switcher, including all LTS kernel and latest kernel, enable BBR or BBR Plus to speed up network&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jinwyp/one_click_script/master/KERNEL.md&#34;&gt;Install wireguard and Cloudflare WARP, unlock Netflix restriction and avoid Google reCAPTCHA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jinwyp/one_click_script/master/#netflix-check&#34;&gt;Netflix available region testing shell script, support for testing through IPv6 and WARP Sock5 proxy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jinwyp/one_click_script/master/TOOL.md&#34;&gt;Install V2Ray-Poseidon, Soga, XrayR, Air-Universe shell script for V2board panel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jinwyp/one_click_script/master/dsm/readme.md&#34;&gt;PVE Proxmox VE and Synology DiskStation Manager NAS Toolkit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jinwyp/one_click_script/master/dsm/readme.md&#34;&gt;Install FRP shell script (expose local server behind a NAT or firewall to the Internet tool)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jinwyp/one_click_script/master/DNS.md&#34;&gt;How to enable DOH for DNS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jinwyp/one_click_script/master/DNS.md&#34;&gt;Install DNS server AdGuard Home and Mosdns to divert domestic and foreign dns traffic&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install and upgrade trojan/trojan-go/v2ray/xray and fully remove.&lt;/li&gt; &#xA; &lt;li&gt;Support to running trojan-go and v2ray at the same server.&lt;/li&gt; &#xA; &lt;li&gt;Support various mode, using trojan or v2ray or nginx to serve 443 port&lt;/li&gt; &#xA; &lt;li&gt;Support multi https domains with Nginx SNI on one VPS server.&lt;/li&gt; &#xA; &lt;li&gt;Support install trojan or v2ray only in order to work with exist website on one VPS.&lt;/li&gt; &#xA; &lt;li&gt;Customize trojan or v2ray working port, password and Websocket path.&lt;/li&gt; &#xA; &lt;li&gt;Support v2ray or xray vless protocol. Support Xray XTLS.&lt;/li&gt; &#xA; &lt;li&gt;Script create 10 password as default, can set prefix for these passwords.&lt;/li&gt; &#xA; &lt;li&gt;Install trojan and v2ray UI panel to easily manage users.&lt;/li&gt; &#xA; &lt;li&gt;Easily set v2ray route rules with wireguard IPv6 and Cloudflare WARP to unlock Netflix restriction and Google reCAPTCHA.&lt;/li&gt; &#xA; &lt;li&gt;Using bootstarp official template for default website content serve by nginx&lt;/li&gt; &#xA; &lt;li&gt;All working port are random generated to ensure high security.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h4&gt;via bash&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash &amp;lt;(curl -Lso- https://git.io/oneclick)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;via curl to install script&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -O https://raw.githubusercontent.com/jinwyp/one_click_script/master/trojan_v2ray_install.sh &amp;amp;&amp;amp; chmod +x ./trojan_v2ray_install.sh &amp;amp;&amp;amp; ./trojan_v2ray_install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;via wget to install script&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget --no-check-certificate https://raw.githubusercontent.com/jinwyp/one_click_script/master/trojan_v2ray_install.sh &amp;amp;&amp;amp; chmod +x ./trojan_v2ray_install.sh &amp;amp;&amp;amp; ./trojan_v2ray_install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/jinwyp/one_click_script/raw/master/docs/readme_en.png?raw=true&#34; alt=&#34;功能列表&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/jinwyp/one_click_script/raw/master/docs/readme2_en.png?raw=true&#34; alt=&#34;功能列表2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/jinwyp/one_click_script/raw/master/docs/readme3_en.png?raw=true&#34; alt=&#34;功能列表3&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Netflix-Check&lt;/h2&gt; &#xA;&lt;h3&gt;Netflix non-self-produced drama and region testing shell script&lt;/h3&gt; &#xA;&lt;h4&gt;via wget to install script&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget --no-check-certificate https://raw.githubusercontent.com/jinwyp/one_click_script/master/netflix_check.sh &amp;amp;&amp;amp; chmod +x ./netflix_check.sh &amp;amp;&amp;amp; ./netflix_check.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;acme&lt;/h2&gt; &#xA;&lt;h3&gt;Get SSL certificate for domain&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run script then choose 26 to request SSL certificate for any domains. It&#39;s better to disable CDN of your domain duiring the SSL certificate application process. Make sure the domain is resolved to the real VPS ip.&lt;/li&gt; &#xA; &lt;li&gt;Duiring the SSL certificate application process, if you can&#39;t disable CDN or the VPS only have IPv6, you can skip the IP check process to continue your following SSL certificate request.&lt;/li&gt; &#xA; &lt;li&gt;The script is using acme.sh to get SSL certificate. There are 4 providers: Let&#39;s Encrypt, BuyPass.com, ZeroSSL.com, Google. When you request too many times in one day and reach the limit of Let&#39;s Encrypt, you can switch other providers such as BuyPass.com.&lt;/li&gt; &#xA; &lt;li&gt;Normally SSL certificate need renew in three month，The script will autorenew the certificate with Cronjob by acme.sh .&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/jinwyp/one_click_script/raw/master/docs/readme4.png?raw=true&#34; alt=&#34;功能列表4&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;&lt;a href=&#34;https://letsencrypt.org/docs/rate-limits/&#34;&gt;The Rate Limits rule of Let&#39;s Encrypt&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The main limit is Certificates per Registered Domain (50 per week)&lt;/li&gt; &#xA; &lt;li&gt;You can create a maximum of 300 New Orders per account per 3 hours&lt;/li&gt; &#xA; &lt;li&gt;You can create a maximum of 10 Accounts per IP Address per 3 hours. You can create a maximum of 500 Accounts per IP Range within an IPv6 /48 per 3 hours&lt;/li&gt; &#xA; &lt;li&gt;You can combine multiple hostnames into a single certificate, up to a limit of 100 Names per Certificate&lt;/li&gt; &#xA; &lt;li&gt;You can have a maximum of 300 Pending Authorizations on your account&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;h3&gt;Preparatory work for setting up a new VPS&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;There are several work to do to secure your VPS when you set up a new VPS. It&#39;s optional but recommended.&lt;/li&gt; &#xA; &lt;li&gt;Configuring an SSH login without password. Run script then choose 26. Input your public key and save the authorized_keys file&lt;/li&gt; &#xA; &lt;li&gt;Change the SSH Default Port. Run script then choose 33. Customize your SSH login port. The default SSH port is 22, Modify the port number you want.&lt;/li&gt; &#xA; &lt;li&gt;Enable root accout login. Some VPS can&#39;t login with root as default. Run script then choose 32 to enable root accout login.&lt;/li&gt; &#xA; &lt;li&gt;Run script then choose 31 to install sofrware including Oh-my-zsh, zsh-autosuggestions, Micro editors. After finish installation, exit VPS and relogin SSH to use ZSH.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Install latest or LTS Linux kernel and enable BBR or BBR plus&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;To install latest or LTS Linux kernel. Run script then choose 1. And enter the sub menu to install Linux kernel and enable BBR+Cake. Check out more details for &lt;a href=&#34;https://raw.githubusercontent.com/jinwyp/one_click_script/master/KERNEL.md&#34;&gt;LTS Linux kernel switcher script&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Install command line trojan or v2ray&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Firstly, prefer run this script with root user. Because linux kernel installation need root privileges. And to get SSL with acme.sh also need root privileges. &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/sudo&#34;&gt;acme.sh instruction&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to install trojan. Run script &lt;code&gt;./trojan_v2ray_install.sh &lt;/code&gt;. Choose 2 to install trojan or trojan-go with no websockt. Choose 3 to install trojan-go with websocket support CDN.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to install V2ray. Run script &lt;code&gt;./trojan_v2ray_install.sh &lt;/code&gt;. Choose 11 to install V2ray or Xray with Nginx. Nginx listen 443 port and serve TLS service. During the installation, you can choose websocket or gRPC to support CDN. Choose TCP or HTTP2 or QUIC protocal will not supprot CDN.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to install V2ray using Vless. Run script &lt;code&gt;./trojan_v2ray_install.sh &lt;/code&gt;. Choose 13-17 to install V2ray or Xray. Vless listen 443 port and serve TLS service. Nginx is optional during the installation for fake website service. Also you can choose XTLS instead of TLS to improve network speed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run script &lt;code&gt;./trojan_v2ray_install.sh &lt;/code&gt;. Choose 21 to install both V2ray and trojan on same VPS. Vless listen 443 port and serve TLS service.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run script &lt;code&gt;./trojan_v2ray_install.sh &lt;/code&gt;. Choose 22 to install both V2ray and trojan/trojan-go on same VPS. trojan/trojan-go listen 443 port and serve TLS service.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run script &lt;code&gt;./trojan_v2ray_install.sh &lt;/code&gt;. Choose 23 to install both V2ray and trojan/trojan-go on same VPS. Nginx SNI listen 443 port. You need at least 2 domain for trojan and v2ray. Nginx SNI distinguishes v2ray or trojan traffic by different domain name.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Advanced Tutorials - Work with existing website or web server&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If you already have a website or other web server, you can choose 12 to install V2ray or Xray only running at non 80 and 443 port with no TLS. You need modify nginx config manually to serve TLS and redirect v2ray traffic by url or path for V2ray websocket.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you already have a website or other web server, you can choose 13-17 to install V2ray or Xray. Duiring the installation, you can choose not to install nginx. Vless serve 443 port with TLS. You need modify nginx config manually to serve the website at 80 port. V2ray or Xray will fallback non V2ray traffic to 80 port.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you already have a website or other web server, you can choose 4 to install trojan or trojan-go only running at non 443 port with TLS. You need modify nginx config manually to serve the website at 80 port. trojan or trojan-go will fallback non trojan traffic to 80 port. Pay attention that if you choose to install trojan-go, nginx must already serve at 80 port which is trojan-go fallback port. Otherwise trojan-go will stop and not running if 80 port is not served by web HTTP server. &lt;a href=&#34;https://p4gefau1t.github.io/trojan-go/basic/config/&#34;&gt;trojan-go document&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Install Web UI admin panel for trojan and v2ray&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;On a new VPS without v2ray or trojan installed. Run script &lt;code&gt;./trojan_v2ray_install.sh &lt;/code&gt;. Choose 30 to enter sub menu. Then choose 1 to install trojan UI admin panel.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On a new VPS without v2ray or trojan installed. Run script &lt;code&gt;./trojan_v2ray_install.sh &lt;/code&gt;. Choose 30 to enter sub menu. Then choose 6 or 9 to install V2ray or Xray UI admin panel. After sinish the installation. Run script and choose 26 to request SSL certificate. Then input the certificate file path on the UI admin panel config.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Unlock Region restriction for Netflix or Disney+ or other video streaming site&lt;/h3&gt; &#xA;&lt;h3&gt;Avoid showing Google CAPTCHA Human verification&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run script &lt;code&gt;./trojan_v2ray_install.sh &lt;/code&gt;. Choose 1 to enter sub menu to install linux kernel. Prefer to install linux kernel 5.10 LTS. &lt;a href=&#34;https://raw.githubusercontent.com/jinwyp/one_click_script/master/KERNEL.md&#34;&gt;More Details&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run script &lt;code&gt;./trojan_v2ray_install.sh &lt;/code&gt;. Choose 1 to enter sub menu. Then choose 2 to enable BBR and Cake. This will import VPS network speed.&lt;/li&gt; &#xA; &lt;li&gt;After reboot, rerun script &lt;code&gt;./trojan_v2ray_install.sh &lt;/code&gt;. Choose 1 to enter sub menu. Then choose 11 or 12 to Wireguard or cloudflare WARP linux client sock5 proxy.&lt;/li&gt; &#xA; &lt;li&gt;After finish Wireguard installation, rerun script &lt;code&gt;./trojan_v2ray_install.sh &lt;/code&gt;. Choose 11-17 to v2ray xray。 Duiring the installation, you can follow the instruction to unlock netflix region restriction and avoid showing Google CAPTCHA Human verification.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;You can use &lt;a href=&#34;https://www.freenom.com/zh/index.html?lang=zh&#34;&gt;freenom&lt;/a&gt; for free domain name.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Please disable your CDN acceleration duiring the installation. Such as cloudflare.com. After finish v2ray or trojan-go installation. you can enable CDN acceleration. trojan not support CDN acceleration.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/jinwyp/one_click_script/raw/master/docs/cloudflare1.jpg?raw=true&#34; alt=&#34;注意 cloudflare CDN&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Using v2ray or xray gRPC protocal for CDN acceleration, you need do some settings at cloudflare.com. Click the &#34;Network&#34; on the leftside menu. Then enable gRPC on the right page. &#34;Network =&amp;gt; gRPC&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/jinwyp/one_click_script/raw/master/docs/grpc.png?raw=true&#34; alt=&#34;注意 cloudflare CDN gRPC&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;The Cloudflare CDN worker script, Please replace the domain name with your own domain name.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;addEventListener(&#xA;    &#34;fetch&#34;, event =&amp;gt; {&#xA;        let url = new URL(event.request.url);&#xA;        url.hostname = &#34;yourdomain.xxx.xx&#34;;&#xA;        url.protocol = &#34;https&#34;;&#xA;        let request = new Request(url, event.request);&#xA;        event.respondWith(&#xA;            fetch(request)&#xA;        )&#xA;    }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Special Thanks&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sprov065/v2-ui&#34;&gt;https://github.com/sprov065/v2-ui&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Jrohy/trojan&#34;&gt;https://github.com/Jrohy/trojan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/v2fly/v2ray-core&#34;&gt;https://github.com/v2fly/v2ray-core&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/XTLS/Xray-core&#34;&gt;https://github.com/XTLS/Xray-core&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/trojan-gfw/trojan&#34;&gt;https://github.com/trojan-gfw/trojan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/p4gefau1t/trojan-go&#34;&gt;https://github.com/p4gefau1t/trojan-go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ylx2016/Linux-NetSpeed&#34;&gt;https://github.com/ylx2016/Linux-NetSpeed&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Stargazers over time&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/jinwyp/one_click_script&#34;&gt;&lt;img src=&#34;https://starchart.cc/jinwyp/one_click_script.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rbenv/rbenv</title>
    <updated>2022-07-20T01:52:30Z</updated>
    <id>tag:github.com,2022-07-20:/rbenv/rbenv</id>
    <link href="https://github.com/rbenv/rbenv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Manage your app&#39;s Ruby environment&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Seamlessly manage your app’s Ruby environment with rbenv.&lt;/h1&gt; &#xA;&lt;p&gt;Use rbenv to pick a Ruby version for your application and guarantee that your development environment matches production. Put rbenv to work with &lt;a href=&#34;http://bundler.io/&#34;&gt;Bundler&lt;/a&gt; for painless Ruby upgrades and bulletproof deployments.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Powerful in development.&lt;/strong&gt; Specify your app&#39;s Ruby version once, in a single file. Keep all your teammates on the same page. No headaches running apps on different versions of Ruby. Just Works™ from the command line and with app servers like &lt;a href=&#34;https://github.com/basecamp/pow&#34;&gt;Pow&lt;/a&gt;. Override the Ruby version anytime: just set an environment variable.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Rock-solid in production.&lt;/strong&gt; Your application&#39;s executables are its interface with ops. With rbenv and &lt;a href=&#34;https://github.com/rbenv/rbenv/wiki/Understanding-binstubs&#34;&gt;Bundler binstubs&lt;/a&gt; you&#39;ll never again need to &lt;code&gt;cd&lt;/code&gt; in a cron job or Chef recipe to ensure you&#39;ve selected the right runtime. The Ruby version dependency lives in one place—your app—so upgrades and rollbacks are atomic, even when you switch versions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;One thing well.&lt;/strong&gt; rbenv is concerned solely with switching Ruby versions. It&#39;s simple and predictable. A rich plugin ecosystem lets you tailor it to suit your needs. Compile your own Ruby versions, or use the &lt;a href=&#34;https://github.com/rbenv/ruby-build#readme&#34;&gt;ruby-build&lt;/a&gt; plugin to automate the process. Specify per-application environment variables with &lt;a href=&#34;https://github.com/rbenv/rbenv-vars&#34;&gt;rbenv-vars&lt;/a&gt;. See more &lt;a href=&#34;https://github.com/rbenv/rbenv/wiki/Plugins&#34;&gt;plugins on the wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rbenv/rbenv/wiki/Why-rbenv%3F&#34;&gt;&lt;strong&gt;Why choose rbenv over RVM?&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How It Works&lt;/h2&gt; &#xA;&lt;p&gt;At a high level, rbenv intercepts Ruby commands using shim executables injected into your &lt;code&gt;PATH&lt;/code&gt;, determines which Ruby version has been specified by your application, and passes your commands along to the correct Ruby installation.&lt;/p&gt; &#xA;&lt;h3&gt;Understanding PATH&lt;/h3&gt; &#xA;&lt;p&gt;When you run a command like &lt;code&gt;ruby&lt;/code&gt; or &lt;code&gt;rake&lt;/code&gt;, your operating system searches through a list of directories to find an executable file with that name. This list of directories lives in an environment variable called &lt;code&gt;PATH&lt;/code&gt;, with each directory in the list separated by a colon:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/usr/local/bin:/usr/bin:/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Directories in &lt;code&gt;PATH&lt;/code&gt; are searched from left to right, so a matching executable in a directory at the beginning of the list takes precedence over another one at the end. In this example, the &lt;code&gt;/usr/local/bin&lt;/code&gt; directory will be searched first, then &lt;code&gt;/usr/bin&lt;/code&gt;, then &lt;code&gt;/bin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Understanding Shims&lt;/h3&gt; &#xA;&lt;p&gt;rbenv works by inserting a directory of &lt;em&gt;shims&lt;/em&gt; at the front of your &lt;code&gt;PATH&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;~/.rbenv/shims:/usr/local/bin:/usr/bin:/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Through a process called &lt;em&gt;rehashing&lt;/em&gt;, rbenv maintains shims in that directory to match every Ruby command across every installed version of Ruby—&lt;code&gt;irb&lt;/code&gt;, &lt;code&gt;gem&lt;/code&gt;, &lt;code&gt;rake&lt;/code&gt;, &lt;code&gt;rails&lt;/code&gt;, &lt;code&gt;ruby&lt;/code&gt;, and so on.&lt;/p&gt; &#xA;&lt;p&gt;Shims are lightweight executables that simply pass your command along to rbenv. So with rbenv installed, when you run, say, &lt;code&gt;rake&lt;/code&gt;, your operating system will do the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Search your &lt;code&gt;PATH&lt;/code&gt; for an executable file named &lt;code&gt;rake&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Find the rbenv shim named &lt;code&gt;rake&lt;/code&gt; at the beginning of your &lt;code&gt;PATH&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run the shim named &lt;code&gt;rake&lt;/code&gt;, which in turn passes the command along to rbenv&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Choosing the Ruby Version&lt;/h3&gt; &#xA;&lt;p&gt;When you execute a shim, rbenv determines which Ruby version to use by reading it from the following sources, in this order:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;RBENV_VERSION&lt;/code&gt; environment variable, if specified. You can use the &lt;a href=&#34;https://raw.githubusercontent.com/rbenv/rbenv/master/#rbenv-shell&#34;&gt;&lt;code&gt;rbenv shell&lt;/code&gt;&lt;/a&gt; command to set this environment variable in your current shell session.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The first &lt;code&gt;.ruby-version&lt;/code&gt; file found by searching the directory of the script you are executing and each of its parent directories until reaching the root of your filesystem.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The first &lt;code&gt;.ruby-version&lt;/code&gt; file found by searching the current working directory and each of its parent directories until reaching the root of your filesystem. You can modify the &lt;code&gt;.ruby-version&lt;/code&gt; file in the current working directory with the &lt;a href=&#34;https://raw.githubusercontent.com/rbenv/rbenv/master/#rbenv-local&#34;&gt;&lt;code&gt;rbenv local&lt;/code&gt;&lt;/a&gt; command.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The global &lt;code&gt;~/.rbenv/version&lt;/code&gt; file. You can modify this file using the &lt;a href=&#34;https://raw.githubusercontent.com/rbenv/rbenv/master/#rbenv-global&#34;&gt;&lt;code&gt;rbenv global&lt;/code&gt;&lt;/a&gt; command. If the global version file is not present, rbenv assumes you want to use the &#34;system&#34; Ruby—i.e. whatever version would be run if rbenv weren&#39;t in your path.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Locating the Ruby Installation&lt;/h3&gt; &#xA;&lt;p&gt;Once rbenv has determined which version of Ruby your application has specified, it passes the command along to the corresponding Ruby installation.&lt;/p&gt; &#xA;&lt;p&gt;Each Ruby version is installed into its own directory under &lt;code&gt;~/.rbenv/versions&lt;/code&gt;. For example, you might have these versions installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;~/.rbenv/versions/1.8.7-p371/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/.rbenv/versions/1.9.3-p327/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/.rbenv/versions/jruby-1.7.1/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version names to rbenv are simply the names of the directories in &lt;code&gt;~/.rbenv/versions&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Compatibility note&lt;/strong&gt;: rbenv is &lt;em&gt;incompatible&lt;/em&gt; with RVM. Please make sure to fully uninstall RVM and remove any references to it from your shell initialization files before installing rbenv.&lt;/p&gt; &#xA;&lt;h3&gt;Using Package Managers&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install rbenv using one of the following approaches.&lt;/p&gt; &lt;h4&gt;Homebrew&lt;/h4&gt; &lt;p&gt;On macOS or Linux, we recommend installing rbenv with &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install rbenv ruby-build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;Debian, Ubuntu, and their derivatives&lt;/h4&gt; &lt;p&gt;Note that the version of rbenv that is packaged and maintained in the Debian and Ubuntu repositories is &lt;em&gt;out of date&lt;/em&gt;. To install the latest version, it is recommended to &lt;a href=&#34;https://raw.githubusercontent.com/rbenv/rbenv/master/#basic-github-checkout&#34;&gt;install rbenv using git&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt install rbenv&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;Arch Linux and its derivatives&lt;/h4&gt; &lt;p&gt;Archlinux has an &lt;a href=&#34;https://aur.archlinux.org/packages/rbenv/&#34;&gt;AUR Package&lt;/a&gt; for rbenv and you can install it from the AUR using the instructions from this &lt;a href=&#34;https://wiki.archlinux.org/index.php/Arch_User_Repository#Installing_and_upgrading_packages&#34;&gt;wiki page&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set up rbenv in your shell.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rbenv init&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Follow the printed instructions to &lt;a href=&#34;https://raw.githubusercontent.com/rbenv/rbenv/master/#how-rbenv-hooks-into-your-shell&#34;&gt;set up rbenv shell integration&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Close your Terminal window and open a new one so your changes take effect.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Verify that rbenv is properly set up using this &lt;a href=&#34;https://github.com/rbenv/rbenv-installer/raw/main/bin/rbenv-doctor&#34;&gt;rbenv-doctor&lt;/a&gt; script:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -fsSL https://github.com/rbenv/rbenv-installer/raw/main/bin/rbenv-doctor | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Checking for `rbenv&#39; in PATH: /usr/local/bin/rbenv&#xA;Checking for rbenv shims in PATH: OK&#xA;Checking `rbenv install&#39; support: /usr/local/bin/rbenv-install (ruby-build 20170523)&#xA;Counting installed Ruby versions: none&#xA;  There aren&#39;t any Ruby versions installed under `~/.rbenv/versions&#39;.&#xA;  You can install Ruby versions like so: rbenv install 2.2.4&#xA;Checking RubyGems settings: OK&#xA;Auditing installed plugins: OK&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;That&#39;s it! Installing rbenv includes ruby-build, so now you&#39;re ready to &lt;a href=&#34;https://raw.githubusercontent.com/rbenv/rbenv/master/#installing-ruby-versions&#34;&gt;install some Ruby versions&lt;/a&gt; using &lt;code&gt;rbenv install&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Basic GitHub Checkout&lt;/h3&gt; &#xA;&lt;p&gt;For a more automated install, you can use &lt;a href=&#34;https://github.com/rbenv/rbenv-installer#rbenv-installer&#34;&gt;rbenv-installer&lt;/a&gt;. If you prefer a manual approach, follow the steps below.&lt;/p&gt; &#xA;&lt;p&gt;This will get you going with the latest version of rbenv without needing a systemwide install.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone rbenv into &lt;code&gt;~/.rbenv&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/rbenv/rbenv.git ~/.rbenv&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Optionally, try to compile dynamic bash extension to speed up rbenv. Don&#39;t worry if it fails; rbenv will still work normally:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd ~/.rbenv &amp;amp;&amp;amp; src/configure &amp;amp;&amp;amp; make -C src&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;code&gt;~/.rbenv/bin&lt;/code&gt; to your &lt;code&gt;$PATH&lt;/code&gt; for access to the &lt;code&gt;rbenv&lt;/code&gt; command-line utility.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;For &lt;strong&gt;bash&lt;/strong&gt;:&lt;/p&gt; &lt;p&gt;Ubuntu Desktop users should configure &lt;code&gt;~/.bashrc&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#39;export PATH=&#34;$HOME/.rbenv/bin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;On other platforms, bash is usually configured via &lt;code&gt;~/.bash_profile&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#39;export PATH=&#34;$HOME/.rbenv/bin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bash_profile&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;For &lt;strong&gt;Zsh&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;echo &#39;export PATH=&#34;$HOME/.rbenv/bin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.zshrc&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;For &lt;strong&gt;Fish shell&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-fish&#34;&gt;set -Ux fish_user_paths $HOME/.rbenv/bin $fish_user_paths&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set up rbenv in your shell.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~/.rbenv/bin/rbenv init&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Follow the printed instructions to &lt;a href=&#34;https://raw.githubusercontent.com/rbenv/rbenv/master/#how-rbenv-hooks-into-your-shell&#34;&gt;set up rbenv shell integration&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Restart your shell so that PATH changes take effect. (Opening a new terminal tab will usually do it.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Verify that rbenv is properly set up using this &lt;a href=&#34;https://github.com/rbenv/rbenv-installer/raw/main/bin/rbenv-doctor&#34;&gt;rbenv-doctor&lt;/a&gt; script:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -fsSL https://github.com/rbenv/rbenv-installer/raw/main/bin/rbenv-doctor | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Checking for `rbenv&#39; in PATH: /usr/local/bin/rbenv&#xA;Checking for rbenv shims in PATH: OK&#xA;Checking `rbenv install&#39; support: /usr/local/bin/rbenv-install (ruby-build 20170523)&#xA;Counting installed Ruby versions: none&#xA;  There aren&#39;t any Ruby versions installed under `~/.rbenv/versions&#39;.&#xA;  You can install Ruby versions like so: rbenv install 2.2.4&#xA;Checking RubyGems settings: OK&#xA;Auditing installed plugins: OK&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; Install &lt;a href=&#34;https://github.com/rbenv/ruby-build#readme&#34;&gt;ruby-build&lt;/a&gt;, which provides the &lt;code&gt;rbenv install&lt;/code&gt; command that simplifies the process of &lt;a href=&#34;https://raw.githubusercontent.com/rbenv/rbenv/master/#installing-ruby-versions&#34;&gt;installing new Ruby versions&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Upgrading with Git&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;ve installed rbenv manually using Git, you can upgrade to the latest version by pulling from GitHub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd ~/.rbenv&#xA;git pull&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Updating the list of available Ruby versions&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re using the &lt;code&gt;rbenv install&lt;/code&gt; command, then the list of available Ruby versions is not automatically updated when pulling from the rbenv repo. To do this manually:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd ~/.rbenv/plugins/ruby-build&#xA;git pull&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How rbenv hooks into your shell&lt;/h3&gt; &#xA;&lt;p&gt;Skip this section unless you must know what every line in your shell profile is doing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rbenv init&lt;/code&gt; is the only command that crosses the line of loading extra commands into your shell. Coming from RVM, some of you might be opposed to this idea. Here&#39;s what &lt;code&gt;rbenv init&lt;/code&gt; actually does:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Sets up your shims path. This is the only requirement for rbenv to function properly. You can do this by hand by prepending &lt;code&gt;~/.rbenv/shims&lt;/code&gt; to your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Installs autocompletion. This is entirely optional but pretty useful. Sourcing &lt;code&gt;~/.rbenv/completions/rbenv.bash&lt;/code&gt; will set that up. There is also a &lt;code&gt;~/.rbenv/completions/rbenv.zsh&lt;/code&gt; for Zsh users.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Rehashes shims. From time to time you&#39;ll need to rebuild your shim files. Doing this automatically makes sure everything is up to date. You can always run &lt;code&gt;rbenv rehash&lt;/code&gt; manually.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Installs the sh dispatcher. This bit is also optional, but allows rbenv and plugins to change variables in your current shell, making commands like &lt;code&gt;rbenv shell&lt;/code&gt; possible. The sh dispatcher doesn&#39;t do anything invasive like override &lt;code&gt;cd&lt;/code&gt; or hack your shell prompt, but if for some reason you need &lt;code&gt;rbenv&lt;/code&gt; to be a real script rather than a shell function, you can safely skip it.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Run &lt;code&gt;rbenv init -&lt;/code&gt; for yourself to see exactly what happens under the hood.&lt;/p&gt; &#xA;&lt;h3&gt;Installing Ruby versions&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;rbenv install&lt;/code&gt; command doesn&#39;t ship with rbenv out of the box, but is provided by the &lt;a href=&#34;https://github.com/rbenv/ruby-build#readme&#34;&gt;ruby-build&lt;/a&gt; project. If you installed it either as part of GitHub checkout process outlined above or via Homebrew, you should be able to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# list latest stable versions:&#xA;rbenv install -l&#xA;&#xA;# list all local versions:&#xA;rbenv install -L&#xA;&#xA;# install a Ruby version:&#xA;rbenv install 2.0.0-p247&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set a Ruby version to finish installation and start using commands &lt;code&gt;rbenv global 2.0.0-p247&lt;/code&gt; or &lt;code&gt;rbenv local 2.0.0-p247&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Alternatively to the &lt;code&gt;install&lt;/code&gt; command, you can download and compile Ruby manually as a subdirectory of &lt;code&gt;~/.rbenv/versions/&lt;/code&gt;. An entry in that directory can also be a symlink to a Ruby version installed elsewhere on the filesystem. rbenv doesn&#39;t care; it will simply treat any entry in the &lt;code&gt;versions/&lt;/code&gt; directory as a separate Ruby version.&lt;/p&gt; &#xA;&lt;h4&gt;Installing Ruby gems&lt;/h4&gt; &#xA;&lt;p&gt;Once you&#39;ve installed some Ruby versions, you&#39;ll want to install gems. First, ensure that the target version for your project is the one you want by checking &lt;code&gt;rbenv version&lt;/code&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/rbenv/rbenv/master/#command-reference&#34;&gt;Command Reference&lt;/a&gt;). Select another version using &lt;code&gt;rbenv local 2.0.0-p247&lt;/code&gt;, for example. Then, proceed to install gems as you normally would:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gem install bundler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;You don&#39;t need sudo&lt;/strong&gt; to install gems. Typically, the Ruby versions will be installed and writeable by your user. No extra privileges are required to install gems.&lt;/p&gt; &#xA;&lt;p&gt;Check the location where gems are being installed with &lt;code&gt;gem env&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gem env home&#xA;# =&amp;gt; ~/.rbenv/versions/&amp;lt;ruby-version&amp;gt;/lib/ruby/gems/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Uninstalling Ruby versions&lt;/h3&gt; &#xA;&lt;p&gt;As time goes on, Ruby versions you install will accumulate in your &lt;code&gt;~/.rbenv/versions&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;To remove old Ruby versions, simply &lt;code&gt;rm -rf&lt;/code&gt; the directory of the version you want to remove. You can find the directory of a particular Ruby version with the &lt;code&gt;rbenv prefix&lt;/code&gt; command, e.g. &lt;code&gt;rbenv prefix 1.8.7-p357&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/rbenv/ruby-build#readme&#34;&gt;ruby-build&lt;/a&gt; plugin provides an &lt;code&gt;rbenv uninstall&lt;/code&gt; command to automate the removal process.&lt;/p&gt; &#xA;&lt;h3&gt;Uninstalling rbenv&lt;/h3&gt; &#xA;&lt;p&gt;The simplicity of rbenv makes it easy to temporarily disable it, or uninstall from the system.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;To &lt;strong&gt;disable&lt;/strong&gt; rbenv managing your Ruby versions, simply remove the &lt;code&gt;rbenv init&lt;/code&gt; line from your shell startup configuration. This will remove rbenv shims directory from PATH, and future invocations like &lt;code&gt;ruby&lt;/code&gt; will execute the system Ruby version, as before rbenv.&lt;/p&gt; &lt;p&gt;While disabled, &lt;code&gt;rbenv&lt;/code&gt; will still be accessible on the command line, but your Ruby apps won&#39;t be affected by version switching.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To completely &lt;strong&gt;uninstall&lt;/strong&gt; rbenv, perform step (1) and then remove its root directory. This will &lt;strong&gt;delete all Ruby versions&lt;/strong&gt; that were installed under &lt;code&gt;`rbenv root`/versions/&lt;/code&gt; directory:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; rm -rf `rbenv root`&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you&#39;ve installed rbenv using a package manager, as a final step perform the rbenv package removal:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Homebrew: &lt;code&gt;brew uninstall rbenv&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Debian, Ubuntu, and their derivatives: &lt;code&gt;sudo apt purge rbenv&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Archlinux and its derivatives: &lt;code&gt;sudo pacman -R rbenv&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Command Reference&lt;/h2&gt; &#xA;&lt;p&gt;Like &lt;code&gt;git&lt;/code&gt;, the &lt;code&gt;rbenv&lt;/code&gt; command delegates to subcommands based on its first argument. The most common subcommands are:&lt;/p&gt; &#xA;&lt;h3&gt;rbenv local&lt;/h3&gt; &#xA;&lt;p&gt;Sets a local application-specific Ruby version by writing the version name to a &lt;code&gt;.ruby-version&lt;/code&gt; file in the current directory. This version overrides the global version, and can be overridden itself by setting the &lt;code&gt;RBENV_VERSION&lt;/code&gt; environment variable or with the &lt;code&gt;rbenv shell&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rbenv local 1.9.3-p327&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When run without a version number, &lt;code&gt;rbenv local&lt;/code&gt; reports the currently configured local version. You can also unset the local version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rbenv local --unset&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;rbenv global&lt;/h3&gt; &#xA;&lt;p&gt;Sets the global version of Ruby to be used in all shells by writing the version name to the &lt;code&gt;~/.rbenv/version&lt;/code&gt; file. This version can be overridden by an application-specific &lt;code&gt;.ruby-version&lt;/code&gt; file, or by setting the &lt;code&gt;RBENV_VERSION&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rbenv global 1.8.7-p352&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The special version name &lt;code&gt;system&lt;/code&gt; tells rbenv to use the system Ruby (detected by searching your &lt;code&gt;$PATH&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;When run without a version number, &lt;code&gt;rbenv global&lt;/code&gt; reports the currently configured global version.&lt;/p&gt; &#xA;&lt;h3&gt;rbenv shell&lt;/h3&gt; &#xA;&lt;p&gt;Sets a shell-specific Ruby version by setting the &lt;code&gt;RBENV_VERSION&lt;/code&gt; environment variable in your shell. This version overrides application-specific versions and the global version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rbenv shell jruby-1.7.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When run without a version number, &lt;code&gt;rbenv shell&lt;/code&gt; reports the current value of &lt;code&gt;RBENV_VERSION&lt;/code&gt;. You can also unset the shell version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rbenv shell --unset&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you&#39;ll need rbenv&#39;s shell integration enabled (step 3 of the installation instructions) in order to use this command. If you prefer not to use shell integration, you may simply set the &lt;code&gt;RBENV_VERSION&lt;/code&gt; variable yourself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export RBENV_VERSION=jruby-1.7.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;rbenv versions&lt;/h3&gt; &#xA;&lt;p&gt;Lists all Ruby versions known to rbenv, and shows an asterisk next to the currently active version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rbenv versions&#xA;  1.8.7-p352&#xA;  1.9.2-p290&#xA;* 1.9.3-p327 (set by /Users/sam/.rbenv/version)&#xA;  jruby-1.7.1&#xA;  rbx-1.2.4&#xA;  ree-1.8.7-2011.03&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;rbenv version&lt;/h3&gt; &#xA;&lt;p&gt;Displays the currently active Ruby version, along with information on how it was set.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rbenv version&#xA;1.9.3-p327 (set by /Users/sam/.rbenv/version)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;rbenv rehash&lt;/h3&gt; &#xA;&lt;p&gt;Installs shims for all Ruby executables known to rbenv (i.e., &lt;code&gt;~/.rbenv/versions/*/bin/*&lt;/code&gt;). Run this command after you install a new version of Ruby, or install a gem that provides commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rbenv rehash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;rbenv which&lt;/h3&gt; &#xA;&lt;p&gt;Displays the full path to the executable that rbenv will invoke when you run the given command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rbenv which irb&#xA;/Users/sam/.rbenv/versions/1.9.3-p327/bin/irb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;rbenv whence&lt;/h3&gt; &#xA;&lt;p&gt;Lists all Ruby versions with the given command installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rbenv whence rackup&#xA;1.9.3-p327&#xA;jruby-1.7.1&#xA;ree-1.8.7-2011.03&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Environment variables&lt;/h2&gt; &#xA;&lt;p&gt;You can affect how rbenv operates with the following settings:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;name&lt;/th&gt; &#xA;   &lt;th&gt;default&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RBENV_VERSION&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specifies the Ruby version to be used.&lt;br&gt;Also see &lt;a href=&#34;https://raw.githubusercontent.com/rbenv/rbenv/master/#rbenv-shell&#34;&gt;&lt;code&gt;rbenv shell&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RBENV_ROOT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;~/.rbenv&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Defines the directory under which Ruby versions and shims reside.&lt;br&gt;Also see &lt;code&gt;rbenv root&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RBENV_DEBUG&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Outputs debug information.&lt;br&gt;Also as: &lt;code&gt;rbenv --debug &amp;lt;subcommand&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RBENV_HOOK_PATH&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/rbenv/rbenv/wiki/Authoring-plugins#rbenv-hooks&#34;&gt;&lt;em&gt;see wiki&lt;/em&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Colon-separated list of paths searched for rbenv hooks.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RBENV_DIR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$PWD&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Directory to start searching for &lt;code&gt;.ruby-version&lt;/code&gt; files.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;The rbenv source code is &lt;a href=&#34;https://github.com/rbenv/rbenv&#34;&gt;hosted on GitHub&lt;/a&gt;. It&#39;s clean, modular, and easy to understand, even if you&#39;re not a shell hacker.&lt;/p&gt; &#xA;&lt;p&gt;Tests are executed using &lt;a href=&#34;https://github.com/sstephenson/bats&#34;&gt;Bats&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bats test&#xA;$ bats test/&amp;lt;file&amp;gt;.bats&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please feel free to submit pull requests and file bugs on the &lt;a href=&#34;https://github.com/rbenv/rbenv/issues&#34;&gt;issue tracker&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rust-lang/crates.io-index</title>
    <updated>2022-07-20T01:52:30Z</updated>
    <id>tag:github.com,2022-07-20:/rust-lang/crates.io-index</id>
    <link href="https://github.com/rust-lang/crates.io-index" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Registry index for crates.io&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>