<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-12T01:40:40Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>LG-leige/open_cloud</title>
    <updated>2022-10-12T01:40:40Z</updated>
    <id>tag:github.com,2022-10-12:/LG-leige/open_cloud</id>
    <link href="https://github.com/LG-leige/open_cloud" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;云服务开机脚本 本地Shell版&lt;/h1&gt; &#xA;&lt;h3&gt;支持云服务（持续更新）&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Digitalocean、Linode&lt;/li&gt; &#xA; &lt;li&gt;Azure（Global Edition）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Ps：目前测试账紧缺，如果你有空闲或者多余的请联系我们，这样可以加快开发的速度！&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;主要特性&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;opencloud 利用 云服务的api调用 进行创建机器 删除机器等操作&lt;/li&gt; &#xA; &lt;li&gt;脚本会自动保存api到本地，云端不会记录你保存的api&lt;/li&gt; &#xA; &lt;li&gt;所有代码都是开源的无任何加密&lt;/li&gt; &#xA; &lt;li&gt;一键批量检测账号存活状态&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;api保存位置&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;/root/opencloud/*&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;使用脚本&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;第一次运行必须安装 curl 和 jq，如果是这两个没有安装导致报错的请不要来找我！&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Centos系统&#xA;yum install curl jq -y&#xA; &#xA;# Ddebian和Ubuntu系统&#xA;apt-get install curl jq -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;安装完成可以直接运行一下脚本&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;bash &amp;lt;(curl -Ls https://raw.githubusercontent.com/LG-leige/open_cloud/main/opencloud.sh)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;联系方式&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.me/openccloud&#34; title=&#34;@openccloud&#34;&gt;Teleagram通知频道&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;如果遇到有问题或者BUG请提交issues！&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>rfxn/linux-malware-detect</title>
    <updated>2022-10-12T01:40:40Z</updated>
    <id>tag:github.com,2022-10-12:/rfxn/linux-malware-detect</id>
    <link href="https://github.com/rfxn/linux-malware-detect" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Linux Malware Detection (LMD)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Linux Malware Detect v1.6.5 (C) 2002-2019, R-fx Networks &lt;a href=&#34;mailto:proj@r-fx.org&#34;&gt;proj@r-fx.org&lt;/a&gt; (C) 2019, Ryan MacDonald &lt;a href=&#34;mailto:ryan@r-fx.org&#34;&gt;ryan@r-fx.org&lt;/a&gt; This program may be freely redistributed under the terms of the GNU GPL v2&lt;/p&gt; &#xA;&lt;p&gt;::::::::::::::::::::::::::::::::::&lt;/p&gt; &#xA;&lt;p&gt;:: CONTENTS :: .: 1 [ DESCRIPTION ] .: 2 [ FEATURES ] .: 3 [ THREAT SOURCE DATA ] .: 4 [ RELEASE UPDATES ] .: 4.1 [ SIGNATURE UPDATES ] .: 5 [ DETECTED THREATS ] .: 6 [ THREAT SHARING ] .: 7 [ CONFIGURATION ] .: 8 [ IGNORE OPTIONS ] .: 9 [ CLI USAGE ] .: 10 [ CRON DAILY ] .: 11 [ INOTIFY MONITORING ] .: 12 [ MODSECURITY2 UPLOAD SCANNING ] .: 13 [ CLEANER RULES ]&lt;/p&gt; &#xA;&lt;p&gt;::::::::::::::::::::::::::::::::::&lt;/p&gt; &#xA;&lt;p&gt;.: 1 [ DESCRIPTION ]&lt;/p&gt; &#xA;&lt;p&gt;Linux Malware Detect (LMD) is a malware scanner for Linux released under the GNU GPLv2 license, that is designed around the threats faced in shared hosted environments. It uses threat data from network edge intrusion detection systems to extract malware that is actively being used in attacks and generates signatures for detection. In addition, threat data is also derived from user submissions with the LMD checkout feature and from malware community resources. The signatures that LMD uses are MD5 file hashes and HEX pattern matches, they are also easily exported to any number of detection tools such as ClamAV.&lt;/p&gt; &#xA;&lt;p&gt;The driving force behind LMD is that there is currently limited availability of open source/restriction free tools for Linux systems that focus on malware detection and more important that get it right. Many of the AV products that perform malware detection on Linux have a very poor track record of detecting threats, especially those targeted at shared hosted environments.&lt;/p&gt; &#xA;&lt;p&gt;The threat landscape in shared hosted environments is unique from that of the standard AV products detection suite in that they are detecting primarily OS level trojans, rootkits and traditional file-infecting viruses but missing the ever increasing variety of malware on the user account level which serves as an attack platform.&lt;/p&gt; &#xA;&lt;p&gt;Using the CYMRU malware hash registry, which provides malware detection data for 30 major AV packages, we can demonstrate this short coming in current threat detection. The following is an analysis of 8,882 MD5 hashes that ship in LMD 1.5 and the percentage of major AV products that currently detect the hashes.&lt;/p&gt; &#xA;&lt;p&gt;KNOWN MALWARE: 1951 % AV DETECT (AVG): 58 % AV DETECT (LOW): 10 % AV DETECT (HIGH): 100 UNKNOWN MALWARE: 6931&lt;/p&gt; &#xA;&lt;p&gt;What this information means, is that of the 8,883 hashes, 78% or 6,931 malware threats are NOT detected by top-30 AV products. The 1,951 detected malware threats that are known have an average detection rate of 58% among top-30 AV products with a low and high detection rate of 10% and 100% respectively. This clearly demonstrates the significant lapse in user space malware detection that top-30 AV products currently provide. It is for this reason LMD was created, to fill a void, specifically for shared hosted environments.&lt;/p&gt; &#xA;&lt;p&gt;.: 2 [ FEATURES ]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MD5 file hash detection for quick threat identification&lt;/li&gt; &#xA; &lt;li&gt;HEX based pattern matching for identifying threat variants&lt;/li&gt; &#xA; &lt;li&gt;statistical analysis component for detection of obfuscated threats (e.g: base64)&lt;/li&gt; &#xA; &lt;li&gt;integrated detection of ClamAV to use as scanner engine for improved performance&lt;/li&gt; &#xA; &lt;li&gt;integrated signature update feature with -u|--update&lt;/li&gt; &#xA; &lt;li&gt;integrated version update feature with -d|--update-ver&lt;/li&gt; &#xA; &lt;li&gt;scan-recent option to scan only files that have been added/changed in X days&lt;/li&gt; &#xA; &lt;li&gt;scan-all option for full path based scanning&lt;/li&gt; &#xA; &lt;li&gt;checkout option to upload suspected malware to rfxn.com for review / hashing&lt;/li&gt; &#xA; &lt;li&gt;full reporting system to view current and previous scan results&lt;/li&gt; &#xA; &lt;li&gt;quarantine queue that stores threats in a safe fashion with no permissions&lt;/li&gt; &#xA; &lt;li&gt;quarantine batching option to quarantine the results of a current or past scans&lt;/li&gt; &#xA; &lt;li&gt;quarantine restore option to restore files to original path, owner and perms&lt;/li&gt; &#xA; &lt;li&gt;quarantine suspend account option to Cpanel suspend or shell revoke users&lt;/li&gt; &#xA; &lt;li&gt;cleaner rules to attempt removal of malware injected strings&lt;/li&gt; &#xA; &lt;li&gt;cleaner batching option to attempt cleaning of previous scan reports&lt;/li&gt; &#xA; &lt;li&gt;cleaner rules to remove base64 and gzinflate(base64 injected malware&lt;/li&gt; &#xA; &lt;li&gt;daily cron based scanning of all changes in last 24h in user homedirs&lt;/li&gt; &#xA; &lt;li&gt;daily cron script compatible with stock RH style systems, Cpanel &amp;amp; Ensim&lt;/li&gt; &#xA; &lt;li&gt;kernel based inotify real time file scanning of created/modified/moved files&lt;/li&gt; &#xA; &lt;li&gt;kernel inotify monitor that can take path data from STDIN or FILE&lt;/li&gt; &#xA; &lt;li&gt;kernel inotify monitor convenience feature to monitor system users&lt;/li&gt; &#xA; &lt;li&gt;kernel inotify monitor can be restricted to a configurable user html root&lt;/li&gt; &#xA; &lt;li&gt;kernel inotify monitor with dynamic sysctl limits for optimal performance&lt;/li&gt; &#xA; &lt;li&gt;kernel inotify alerting through daily and/or optional weekly reports&lt;/li&gt; &#xA; &lt;li&gt;HTTP upload scanning through mod_security2 inspectFile hook&lt;/li&gt; &#xA; &lt;li&gt;e-mail alert reporting after every scan execution (manual &amp;amp; daily)&lt;/li&gt; &#xA; &lt;li&gt;path, extension and signature based ignore options&lt;/li&gt; &#xA; &lt;li&gt;background scanner option for unattended scan operations&lt;/li&gt; &#xA; &lt;li&gt;verbose logging &amp;amp; output of all actions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;.: 3 [ THREAT SOURCE DATA ]&lt;/p&gt; &#xA;&lt;p&gt;The defining difference with LMD is that it doesn&#39;t just detect malware based on signatures/hashes that someone else generated but rather it is an encompassing project that actively tracks in the wild threats and generates signatures based on those real world threats that are currently circulating.&lt;/p&gt; &#xA;&lt;p&gt;There are four main sources for malware data that is used to generate LMD signatures:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Network Edge IPS: Through networks managed as part of my day-to-day job, primarily web hosting related, our web servers receive a large amount of daily abuse events, all of which is logged by our network edge IPS. The IPS events are processed to extract malware url&#39;s, decode POST payload and base64/gzip encoded abuse data and ultimately that malware is retrieved, reviewed, classified and then signatures generated as appropriate. The vast majority of LMD signatures have been derived from IPS extracted data.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The network I manage hosts over 35,000 web sites and as such receives a large amount of daily abuse, all of which is logged by our network edge IPS. The IPS events are processed to extract malware url&#39;s, decode POST payload and base64/gzip encoded abuse data and ultimately that malware is retrieved, reviewed, classified and then signatures generated as appropriate. The vast majority of LMD signatures have been derived from IPS extracted data.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Community Data: Data is aggregated from multiple community malware websites such as clean-mx and malwaredomainlist then processed to retrieve new malware, review, classify and then generate signatures.&lt;/li&gt; &#xA; &lt;li&gt;ClamAV: The HEX &amp;amp; MD5 detection signatures from ClamAV are monitored for relevant updates that apply to the target user group of LMD and added to the project as appropriate. To date there has been roughly 400 signatures ported from ClamAV while the LMD project has contributed back to ClamAV by submitting over 1,100 signatures and continues to do so on an ongoing basis.&lt;/li&gt; &#xA; &lt;li&gt;User Submission: LMD has a checkout feature that allows users to submit suspected malware for review, this has grown into a very popular feature and generates on average about 30-50 submissions per week.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;.: 4 [ RELEASE UPDATES ] Updates to the release version of LMD are not automatically installed but can be installed using the --update-ver option. There is good reasons that this is not done automatically and I really dont feel like listing them so just think about it a bit.&lt;/p&gt; &#xA;&lt;p&gt;The latest changes in the release version can always be viewed at: &lt;a href=&#34;http://www.rfxn.com/appdocs/CHANGELOG.maldetect&#34;&gt;http://www.rfxn.com/appdocs/CHANGELOG.maldetect&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.: 4.1 [ SIGNATURE UPDATES ]&lt;/p&gt; &#xA;&lt;p&gt;The LMD signatures are updated typically once per day or more frequently depending on incoming threat data from the LMD checkout feature, IPS malware extraction and other sources. The updating of signatures in LMD installations is performed daily through the default cron.daily script with the --update option, which can be run manually at any time.&lt;/p&gt; &#xA;&lt;p&gt;An RSS &amp;amp; XML data source is available for tracking malware threat updates: RSS Recent Signatures: &lt;a href=&#34;http://www.rfxn.com/api/lmd&#34;&gt;http://www.rfxn.com/api/lmd&lt;/a&gt; XML Recent Signatures: &lt;a href=&#34;http://www.rfxn.com/api/lmd?id=recent&#34;&gt;http://www.rfxn.com/api/lmd?id=recent&lt;/a&gt; XML All Signatures: &lt;a href=&#34;http://www.rfxn.com/api/lmd?id=all&#34;&gt;http://www.rfxn.com/api/lmd?id=all&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.: 5 [ DETECTED THREATS ]&lt;/p&gt; &#xA;&lt;p&gt;LMD 1.6 has a total of 11,061 (9,121 MD5 / 1940 HEX) signatures (before updates), below is a listing of the top 60 threats by prevalence detected by LMD.&lt;/p&gt; &#xA;&lt;p&gt;base64.inject.unclassed bin.dccserv.irsexxy bin.fakeproc.Xnuxer bin.ircbot.nbot bin.ircbot.php3 bin.ircbot.unclassed bin.pktflood.ABC123 bin.pktflood.osf bin.trojan.linuxsmalli c.ircbot.tsunami exp.linux.rstb exp.linux.unclassed exp.setuid0.unclassed gzbase64.inject html.phishing.auc61 html.phishing.hsbc perl.connback.DataCha0s perl.connback.N2 perl.cpanel.cpwrap perl.mailer.yellsoft perl.ircbot.atrixteam perl.ircbot.bRuNo perl.ircbot.Clx perl.ircbot.devil perl.ircbot.fx29 perl.ircbot.magnum perl.ircbot.oldwolf perl.ircbot.putr4XtReme perl.ircbot.rafflesia perl.ircbot.UberCracker perl.ircbot.xdh perl.ircbot.xscan perl.shell.cbLorD perl.shell.cgitelnet php.cmdshell.c100 php.cmdshell.c99 php.cmdshell.cih php.cmdshell.egyspider php.cmdshell.fx29 php.cmdshell.ItsmYarD php.cmdshell.Ketemu php.cmdshell.N3tshell php.cmdshell.r57 php.cmdshell.unclassed php.defash.buno php.exe.globals php.include.remote php.ircbot.InsideTeam php.ircbot.lolwut php.ircbot.sniper php.ircbot.vj_denie php.mailer.10hack php.mailer.bombam php.mailer.PostMan php.phishing.AliKay php.phishing.mrbrain php.phishing.ReZulT php.pktflood.oey php.shell.rc99 php.shell.shellcomm&lt;/p&gt; &#xA;&lt;p&gt;.: 6 [ THREAT SHARING ]&lt;/p&gt; &#xA;&lt;p&gt;I am a firm believer in not reinventing the wheel, for my own sanity or that of others. As such all unique threat data is submitted to CYMRU &amp;amp; ClamAV so that the open source and anti-malware community at large can grow from this project.&lt;/p&gt; &#xA;&lt;p&gt;.: 7 [ CONFIGURATION ]&lt;/p&gt; &#xA;&lt;p&gt;The configuration of LMD is handled through /usr/local/maldetect/conf.maldet and all options are well commented for ease of configuration.&lt;/p&gt; &#xA;&lt;p&gt;By default LMD has the auto-quarantine of files disabled, this will mean that YOU WILL NEED TO ACT on any threats detected or pass the SCANID to the &#39;-q&#39; option to batch quarantine the results. To change this please set quarantine_hits=1 in conf.maldet.&lt;/p&gt; &#xA;&lt;p&gt;.: 8 [ IGNORE OPTIONS ]&lt;/p&gt; &#xA;&lt;p&gt;There are four ignore files available and they break down as follows:&lt;/p&gt; &#xA;&lt;p&gt;/usr/local/maldetect/ignore_paths A line spaced file for paths that are to be excluded from search results Sample ignore entry: /home/user/public_html/cgi-bin&lt;/p&gt; &#xA;&lt;p&gt;/usr/local/maldetect/ignore_file_ext A line spaced file for file extensions to be excluded from search results Sample ignore entry: .js .css&lt;/p&gt; &#xA;&lt;p&gt;/usr/local/maldetect/ignore_sigs A line spaced file for signatures that should be removed from file scanning Sample ignore entry: base64.inject.unclassed&lt;/p&gt; &#xA;&lt;p&gt;/usr/local/maldetect/ignore_inotify A line spaced file for regexp paths that are excluded from inotify monitoring Sample ignore entry: ^/home/user$ ^/var/tmp/#sql_.*.MYD$&lt;/p&gt; &#xA;&lt;p&gt;.: 9 [ CLI USAGE ]&lt;/p&gt; &#xA;&lt;p&gt;Once LMD is installed it can be run through the &#39;maldet&#39; command, the &#39;--help&#39; option gives a detailed summary of usage options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-b, --background&#xA;  Execute operations in the background, ideal for large scans&#xA;  e.g: maldet -b -r /home/?/public_html 7&#xA;&#xA;-u, --update [--force]&#xA;   Update malware detection signatures from rfxn.com&#xA;&#xA;-d, --update-ver [--force]&#xA;   Update the installed version from rfxn.com&#xA;&#xA;-m, --monitor USERS|PATHS|FILE&#xA;   Run maldet with inotify kernel level file create/modify monitoring&#xA;   If USERS is specified, monitor user homedirs for UID&#39;s &amp;gt; 500&#xA;   If FILE is specified, paths will be extracted from file, line spaced&#xA;   If PATHS are specified, must be comma spaced list, NO WILDCARDS!&#xA;   e.g: maldet --monitor users&#xA;   e.g: maldet --monitor /root/monitor_paths&#xA;   e.g: maldet --monitor /home/mike,/home/ashton&#xA;&#xA;-k, --kill&#xA;   Terminate inotify monitoring service&#xA;&#xA;-r, --scan-recent PATH DAYS&#xA;   Scan files created/modified in the last X days (default: 7d, wildcard: ?)&#xA;   e.g: maldet -r /home/?/public_html 2&#xA;&#xA;-a, --scan-all PATH&#xA;   Scan all files in path (default: /home, wildcard: ?)&#xA;   e.g: maldet -a /home/?/public_html&#xA;&#xA;-c, --checkout FILE&#xA;   Upload suspected malware to rfxn.com for review &amp;amp; hashing into signatures&#xA;&#xA;-l, --log&#xA;   View maldet log file events&#xA;&#xA;-e, --report SCANID email&#xA;   View scan report of most recent scan or of a specific SCANID and optionally&#xA;   e-mail the report to a supplied e-mail address&#xA;   e.g: maldet --report&#xA;   e.g: maldet --report list&#xA;   e.g: maldet --report 050910-1534.21135&#xA;   e.g: maldet --report SCANID user@domain.com&#xA;&#xA;-E, --dump-report SCANID&#xA;   Similar to -e/--report except dumps the report to stdout instead.&#xA;   e.g: maldet --dump-report&#xA;   e.g: maldet --dump-report 050910-1534.21135&#xA;&#xA;-s, --restore FILE|SCANID&#xA;   Restore file from quarantine queue to orginal path or restore all items from&#xA;   a specific SCANID&#xA;   e.g: maldet --restore /usr/local/maldetect/quarantine/config.php.23754&#xA;   e.g: maldet --restore 050910-1534.21135&#xA;&#xA;-q, --quarantine SCANID&#xA;   Quarantine all malware from report SCANID&#xA;   e.g: maldet --quarantine 050910-1534.21135&#xA;&#xA;-n, --clean SCANID&#xA;   Try to clean &amp;amp; restore malware hits from report SCANID&#xA;   e.g: maldet --clean 050910-1534.21135&#xA;&#xA;-U, --user USER&#xA;   Set execution under specified user, ideal for restoring from user quarantine or&#xA;   to view user reports.&#xA;   e.g: maldet --user nobody --report&#xA;   e.g: maldet --user nobody --restore 050910-1534.21135&#xA;&#xA;-co, --config-option VAR1=VALUE,VAR2=VALUE,VAR3=VALUE&#xA;   Set or redefine the value of conf.maldet config options&#xA;   e.g: maldet --config-option email_addr=you@domain.com,quarantine_hits=1&#xA;&#xA;-p, --purge&#xA;   Clear logs, quarantine queue, session and temporary data.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;.: 10 [ CRON DAILY ]&lt;/p&gt; &#xA;&lt;p&gt;The cronjob installed by LMD is located at /etc/cron.daily/maldet and is used to perform a daily update of signatures, keep the session, temp and quarantine data to no more than 14d old and run a daily scan of recent file system changes.&lt;/p&gt; &#xA;&lt;p&gt;The daily scan supports a variety of control panel systems or standard Linux /home*/user paths.&lt;/p&gt; &#xA;&lt;p&gt;If you are running monitor mode, the daily scans will be skipped and instead a daily report will be issued for all monitoring events.&lt;/p&gt; &#xA;&lt;p&gt;If you need to scan additional paths, you should review the cronjob and use one of the customization hook files, such as &#39;/usr/local/maldetect/cron/custom.cron&#39;, to write in custom scanning execution. For configuration based cron changes, you can redefine any conf.maldet variables at &#39;/etc/sysconfig/maldet&#39; or &#39;/usr/local/maldetect/cron/conf.maldet.cron&#39;.&lt;/p&gt; &#xA;&lt;p&gt;.: 11 [ INOTIFY MONITORING ]&lt;/p&gt; &#xA;&lt;p&gt;The inotify monitoring feature is designed to monitor users in real-time for file creation/modify/move operations. This option requires a kernel that supports inotify_watch (CONFIG_INOTIFY) which is found in kernels 2.6.13+ and CentOS/RHEL 5 by default. If you are running CentOS 4 you should consider an inbox upgrade with: &lt;a href=&#34;http://www.rfxn.com/upgrade-centos-4-8-to-5-3/&#34;&gt;http://www.rfxn.com/upgrade-centos-4-8-to-5-3/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are three modes that the monitor can be executed with and they relate to what will be monitored, they are USERS|PATHS|FILES. e.g: maldet --monitor users e.g: maldet --monitor /root/monitor_paths e.g: maldet --monitor /home/mike,/home/ashton&lt;/p&gt; &#xA;&lt;p&gt;The options break down as follows: USERS - The users option will take the homedirs of all system users that are above inotify_minuid and monitor them. If inotify_webdir is set then the users webdir, if it exists, will only be monitored. PATHS - A comma spaced list of paths to monitor FILE - A line spaced file list of paths to monitor&lt;/p&gt; &#xA;&lt;p&gt;Once you start maldet in monitor mode, it will preprocess the paths based on the option specified followed by starting the inotify process. The starting of the inotify process can be a time consuming task as it needs to setup a monitor hook for every file under the monitored paths. Although the startup process can impact the load temporarily, once the process has started it maintains all of its resources inside kernel memory and has a very small userspace footprint in memory or cpu usage.&lt;/p&gt; &#xA;&lt;p&gt;The scanner component of the monitor watches for notifications from the inotify process and batches items to be scanned, by default, every 30 seconds. If you need tighter control of the scanning timer, you can edit inotify_stime in conf.maldet.&lt;/p&gt; &#xA;&lt;p&gt;The alerting of file hits under monitor mode is handled through a daily report instead of sending an email on every hit. The cron.daily job installed by LMD will call an --alert-daily flag and send an alert for the last days hits. There is also an --alert-weekly option that can be used, simply edit the cron at /etc/cron.daily/maldet and change the --alert-daily to --alert-weekly.&lt;/p&gt; &#xA;&lt;p&gt;Terminating the inotify monitoring is done by passing the &#39;-k|--kill-monitor&#39; option to maldet, it will touch a file handle monitored by maldet and on the next waking cycle of the monitor service, it will terminate itself and all inotify processes.&lt;/p&gt; &#xA;&lt;p&gt;.: 12 [ MODSECURITY2 UPLOAD SCANNING ]&lt;/p&gt; &#xA;&lt;p&gt;The support for HTTP upload scanning is provided through mod_security2&#39;s inspectFile hook. This feature allows for a validation script to be used in permitting or denying an upload.&lt;/p&gt; &#xA;&lt;p&gt;The convenience script to facilitate this is called hookscan.sh and is located in the /usr/local/maldetect installation path. The default setup is to run a standard maldet scan with no clamav support, no cleaner rule executions and quarantining enabled; these options are set in the interest of performance vs accuracy which is a fair tradeoff.&lt;/p&gt; &#xA;&lt;p&gt;The scan options can be modified in the hookscan.sh file if so desired, the default scan options are as follows: --config-option quarantine_hits=1,quarantine_clean=0,clamav_scan=0 --modsec -a &#34;$file&#34;&lt;/p&gt; &#xA;&lt;p&gt;There is a tangible performance difference in disabling clamav scanning in this usage scenario. The native LMD scanner engine is much faster than the clamav scanner engine in single file scans by a wide margin. A single file scan using clamav takes roughly 3sec on average while the LMD scanner engine takes 0.5sec or less.&lt;/p&gt; &#xA;&lt;p&gt;To enable upload scanning with mod_security2 you must set enable the scan_user_access option in conf.maldet (scan_user_access=1) then add the following rules to your mod_security2 configuration. These rules are best placed in your modsec2.user.conf file on cpanel servers or at the top of the appropriate rules file for your setup.&lt;/p&gt; &#xA;&lt;p&gt;/usr/local/apache/conf/modsec2.user.conf (or similar mod_security2 rules file): SecRequestBodyAccess On SecRule FILES_TMPNAMES &#34;@inspectFile /usr/local/maldetect/hookscan.sh&#34; &lt;br&gt; &#34;id:&#39;999999&#39;,log,auditlog,deny,severity:2,phase:2,t:none&#34;&lt;/p&gt; &#xA;&lt;p&gt;If using ModSecurity &amp;gt;=2.9, you should set &#39;SecTmpSaveUploadedFiles On&#39; before the &#39;SecRule FILES_TMPNAMES&#39; line.&lt;/p&gt; &#xA;&lt;p&gt;A restart of the Apache service is required following these changes.&lt;/p&gt; &#xA;&lt;p&gt;When an upload takes place that is determined to be malware, it will be rejected and an entry will appear in the mod_security2 SecAuditLog file. On cpanel servers and most configurations this is the modsec_audit.log located under /usr/local/apache/logs or /var/log/httpd.&lt;/p&gt; &#xA;&lt;p&gt;The log entry will appear similar to the following: Message: Access denied with code 406 (phase 2). File &#34;/tmp/20121120-....-file&#34; rejected by the approver script &#34;/usr/local/maldetect/hookscan.sh&#34;: 0 maldet: {HEX}php.cmdshell.r57.317 /tmp/20121120-....-file [file &#34;/usr/local/apache/conf/modsec2.user.conf&#34;] [line &#34;3&#34;] [severity &#34;CRITICAL&#34;]&lt;/p&gt; &#xA;&lt;p&gt;The default alerting options will apply and an e-mail will be sent when hits are found. This can be changed in the hookscan.sh script by editing the --config-option values.&lt;/p&gt; &#xA;&lt;p&gt;To disable alerts append email_alert=0 to the --config-option values: --config-option quarantine_hits=1,quarantine_clean=0,clamav_scan=0,email_alert=0&lt;/p&gt; &#xA;&lt;p&gt;To change the e-mail address for alerts on upload hits, append email_addr=&lt;a href=&#34;mailto:you@domain.com&#34;&gt;you@domain.com&lt;/a&gt; to the --config-option values: --config-option quarantine_hits=1,quarantine_clean=0,clamav_scan=0,email_addr=&lt;a href=&#34;mailto:you@domain.com&#34;&gt;you@domain.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The nature of uploads is such that they are performed either under the user that the HTTP service is running as or under that of a system user in an suexec style setup (i.e: phpsuexec). This required a change to the way LMD stores session, temporary and quarantine data to allow for non-root users to perform scans.&lt;/p&gt; &#xA;&lt;p&gt;Given that the maldetect installation path is owned by user root, we either need to set a pub path world writable (777) or populate the pub path with user owned paths. It was undesirable to set any path world writable and as such a feature to populate path data was created. This feature is controlled with the --mkpubpaths flag and is executed from cron every 10 minutes, it will only execute if the scan_user_access variable is enabled in conf.maldet. As such, it is important to make sure the scan_user_access variable is set to enabled (1) in conf.maldet and it is advised to run &#39;maldet --mkpubpaths&#39; manually to prepopulate the user paths. There after, the cron will ensure new users have paths created no later than 10 minutes after creation.&lt;/p&gt; &#xA;&lt;p&gt;All non-root scans, such as those performed under mod_security2, will be stored under the /usr/local/maldetect/pub/username directory tree. The quarantine paths are relative to the user that executes the scan, so user nobody would be under pub/nobody/quar/. The actual paths for where files are quarantined and the user which executed the scan, can be verified in the e-mail reports for upload hits.&lt;/p&gt; &#xA;&lt;p&gt;To restore files quarantined under non-root users, you must pass the -U|--user option to LMD, for example if user nobody quarantined a file you would like to restore, it can be restored as follows: maldet --user nobody /usr/local/maldetect/pub/nobody/quar/20121120-file-SFwTeu.22408&lt;/p&gt; &#xA;&lt;p&gt;Or, as always the scan ID can be used to restore maldet --user nobody 112012-0032.13771&lt;/p&gt; &#xA;&lt;p&gt;.: 13 [ CLEANER RULES ]&lt;/p&gt; &#xA;&lt;p&gt;The cleaner function looks for signature-named rules under the clean/ path, these rules can consist of any command that is designed to clean a file of malware. A cleaner rule must result in a file being able to pass a scan without tripping a HIT otherwise it will classify the clean action as FAILED.&lt;/p&gt; &#xA;&lt;p&gt;Let us assume for a moment we have malware that we want to clean and it trips with the signature &#34;{HEX}php.cmdshell.r57.89&#34;. The actual signature string in this is &#34;php.cmdshell.r57&#34;, the &#34;{HEX}&#34; just defines the format and &#34;.89&#34; is the variant number. So, to create a clean rule for php.cmdshell.r57 we would add a file &#39;clean/php.cmdshell.r57&#39; and this would be executed against any file that hits on the signature of the same name.&lt;/p&gt; &#xA;&lt;p&gt;The actual contents of the rule should be a single line command that will be executed against the hit file, for example the execution looks something like:&lt;/p&gt; &#xA;&lt;p&gt;YOUR_COMMAND MALWARE_FILE&lt;/p&gt; &#xA;&lt;p&gt;So, for a string based malware injection you could easily throw in a &#39;sed -i&#39; into the rule file with the appropriate pattern to strip the string(s) from the file. Once the clean command has run, a rescan will be performed on the file and if it causes causes a hit, the clean will be marked as FAILED. A successful clean ALWAYS results in the file being restored if possible to its original path, owner and mode.&lt;/p&gt; &#xA;&lt;p&gt;An important note is that the cleaner function is a subfunction of the quarantine, so if the quarantine is disabled then by default, malware hits will not have clean attempts made. There are two ways around this, apart from the obvious of turning on quarantine and rescanning (which is a waste of time). The best way is to enable the quarantine and then use the -q|--quarantine flag to batch through the scan results, which will quarantine and clean files. The second is to use the -n|--clean flag which will try to clean files in place, be that in the quarantine or the files original path, wherever it can be found.&lt;/p&gt; &#xA;&lt;p&gt;e.g: maldet -q SCANID e.g: maldet --clean SCANID&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Micro0x00/Arsenal</title>
    <updated>2022-10-12T01:40:40Z</updated>
    <id>tag:github.com,2022-10-12:/Micro0x00/Arsenal</id>
    <link href="https://github.com/Micro0x00/Arsenal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Arsenal is a Simple shell script (Bash) used to install tools and requirements for Bug Bounty&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Arsenal&lt;span&gt;🚀&lt;/span&gt;&lt;/h1&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://i.imgur.com/0sx9YWQ.jpg&#34; alt=&#34;subfinder&#34; width=&#34;500&#34;&gt; &lt;br&gt; &lt;/h1&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;Recon Tool installer&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://twitter.com/Micro0x00&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/Micro0x00.svg?logo=twitter&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Arsenal is a Simple shell script (Bash) used to install the most important tools and requirements for your environment and save time in installing all these tools.&lt;/p&gt; &#xA;&lt;h2&gt;Tools in Arsenal&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Amass&lt;/td&gt; &#xA;   &lt;td&gt;The OWASP Amass Project performs network mapping of attack surfaces and external asset discovery using open source information gathering and active reconnaissance techniques&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ffuf&lt;/td&gt; &#xA;   &lt;td&gt;A fast web fuzzer written in Go&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dnsX&lt;/td&gt; &#xA;   &lt;td&gt;Fast and multi-purpose DNS toolkit allow to run multiple DNS queries&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;meg&lt;/td&gt; &#xA;   &lt;td&gt;meg is a tool for fetching lots of URLs but still being &#39;nice&#39; to servers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gf&lt;/td&gt; &#xA;   &lt;td&gt;A wrapper around grep to avoid typing common patterns&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;XnLinkFinder&lt;/td&gt; &#xA;   &lt;td&gt;This is a tool used to discover endpoints crawling a target&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;httpX&lt;/td&gt; &#xA;   &lt;td&gt;httpx is a fast and multi-purpose HTTP toolkit allow to run multiple probers using retryablehttp library, it is designed to maintain the result reliability with increased threads&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Gobuster&lt;/td&gt; &#xA;   &lt;td&gt;Gobuster is a tool used to brute-force (DNS,Open Amazon S3 buckets,Web Content)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nuclei&lt;/td&gt; &#xA;   &lt;td&gt;Nuclei tool is Golang Language-based tool used to send requests across multiple targets based on nuclei templates leading to zero false positive or irrelevant results and provides fast scanning on various host&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Subfinder&lt;/td&gt; &#xA;   &lt;td&gt;Subfinder is a subdomain discovery tool that discovers valid subdomains for websites by using passive online sources. It has a simple modular architecture and is optimized for speed. subfinder is built for doing one thing only - passive subdomain enumeration, and it does that very well&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Naabu&lt;/td&gt; &#xA;   &lt;td&gt;Naabu is a port scanning tool written in Go that allows you to enumerate valid ports for hosts in a fast and reliable manner. It is a really simple tool that does fast SYN/CONNECT scans on the host/list of hosts and lists all ports that return a reply&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;assetfinder&lt;/td&gt; &#xA;   &lt;td&gt;Find domains and subdomains potentially related to a given domain&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;httprobe&lt;/td&gt; &#xA;   &lt;td&gt;Take a list of domains and probe for working http and https servers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;knockpy&lt;/td&gt; &#xA;   &lt;td&gt;Knockpy is a python3 tool designed to quickly enumerate subdomains on a target domain through dictionary attack&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;waybackurl&lt;/td&gt; &#xA;   &lt;td&gt;fetch known URLs from the Wayback Machine for *.domain and output them on stdout&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Logsensor&lt;/td&gt; &#xA;   &lt;td&gt;A Powerful Sensor Tool to discover login panels, and POST Form SQLi Scanning&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Subzy&lt;/td&gt; &#xA;   &lt;td&gt;Subdomain takeover tool which works based on matching response fingerprints from can-i-take-over-xyz&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Xss-strike&lt;/td&gt; &#xA;   &lt;td&gt;Advanced XSS Detection Suite&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Altdns&lt;/td&gt; &#xA;   &lt;td&gt;Subdomain discovery through alterations and permutations&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nosqlmap&lt;/td&gt; &#xA;   &lt;td&gt;NoSQLMap is an open source Python tool designed to audit for as well as automate injection attacks and exploit default configuration weaknesses in NoSQL databases and web applications using NoSQL in order to disclose or clone data from the database&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ParamSpider&lt;/td&gt; &#xA;   &lt;td&gt;Parameter miner for humans&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoSpider&lt;/td&gt; &#xA;   &lt;td&gt;GoSpider - Fast web spider written in Go&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;eyewitness&lt;/td&gt; &#xA;   &lt;td&gt;EyeWitness is a Python tool written by @CptJesus and @christruncer. It’s goal is to help you efficiently assess what assets of your target to look into first.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CRLFuzz&lt;/td&gt; &#xA;   &lt;td&gt;A fast tool to scan CRLF vulnerability written in Go&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DontGO403&lt;/td&gt; &#xA;   &lt;td&gt;dontgo403 is a tool to bypass 40X errors&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Chameleon&lt;/td&gt; &#xA;   &lt;td&gt;Chameleon provides better content discovery by using wappalyzer&#39;s set of technology fingerprints alongside custom wordlists tailored to each detected technologies&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;uncover&lt;/td&gt; &#xA;   &lt;td&gt;uncover is a go wrapper using APIs of well known search engines to quickly discover exposed hosts on the internet. It is built with automation in mind, so you can query it and utilize the results with your current pipeline tools&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;wpscan&lt;/td&gt; &#xA;   &lt;td&gt;WordPress Security Scanner&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GraphQLmap&lt;/td&gt; &#xA;   &lt;td&gt;GraphQLmap is a scripting engine to interact with a graphql endpoint for pentesting purposes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dalfox&lt;/td&gt; &#xA;   &lt;td&gt;DalFox is an powerful open source XSS scanning tool and parameter analyzer and utility that fast the process of detecting and verify XSS flaws. It comes with a powerful testing engine, many niche features for the cool hacker!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;http request smuggling&lt;/td&gt; &#xA;   &lt;td&gt;HTTP Request Smuggling Detection Tool&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;commix&lt;/td&gt; &#xA;   &lt;td&gt;Commix (short for [comm]and [i]njection e[x]ploiter) is an open source penetration testing tool, written by Anastasios Stasinopoulos (@ancst), that automates the detection and exploitation of command injection vulnerabilities&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoLinkFinder&lt;/td&gt; &#xA;   &lt;td&gt;A minimal JS endpoint extractor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JWT Toolkit v2&lt;/td&gt; &#xA;   &lt;td&gt;JWT Tookkit is a toolkit for validating, forging, scanning and tampering JWTs (JSON Web Tokens)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GitLeaks&lt;/td&gt; &#xA;   &lt;td&gt;check git repos for secrets and keys&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WhatWeb&lt;/td&gt; &#xA;   &lt;td&gt;Next generation web scanner&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Arjun&lt;/td&gt; &#xA;   &lt;td&gt;Arjun can find query parameters for URL endpoints. If you don&#39;t get what that means, it&#39;s okay, read along&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Requirements in Arsenal&lt;span&gt;✔&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python3&lt;span&gt;🐍&lt;/span&gt;&lt;/li&gt; &#xA; &lt;li&gt;Git&lt;span&gt;🌌&lt;/span&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ruby&lt;span&gt;💎&lt;/span&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wget&lt;span&gt;🌐&lt;/span&gt;&lt;/li&gt; &#xA; &lt;li&gt;GO-Lang&lt;span&gt;💩&lt;/span&gt;&lt;span&gt;💩&lt;/span&gt;&lt;span&gt;💩&lt;/span&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rust&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Go-lang installation (Manual)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt; sudo apt-get remove -y golang-go&#xA; sudo rm -rf /usr/local/go&#xA; wget https://go.dev/dl/go1.19.1.linux-amd64.tar.gz&#xA; sudo tar -xvf go1.19.1.linux-amd64.tar.gz&#xA; sudo mv go /usr/local&#xA; nano /etc/profile or .profile&#xA; export GOPATH=$HOME/go&#xA; export PATH=$PATH:/usr/local/go/bin&#xA; export PATH=$PATH:$GOPATH/bin &#xA; source /etc/profile #to update you shell dont worry&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;How to install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/Micro0x00/Arsenal.git&#xA;cd Arsenal&#xA;sudo chmod +x Arsenal.sh&#xA;sudo ./Arsenal.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://i.imgur.com/0vuVQbF.png&#34; alt=&#34;arsenal&#34; width=&#34;700&#34;&gt; &lt;br&gt; &lt;/h1&gt; &#xA;&lt;h3 align=&#34;left&#34;&gt;Support:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/Micro0x00&#34;&gt; &lt;img align=&#34;left&#34; src=&#34;https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png&#34; height=&#34;50&#34; width=&#34;210&#34; alt=&#34;Micro0x00&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;</summary>
  </entry>
</feed>