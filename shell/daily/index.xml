<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-05-29T01:54:10Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ophub/amlogic-s9xxx-armbian</title>
    <updated>2022-05-29T01:54:10Z</updated>
    <id>tag:github.com,2022-05-29:/ophub/amlogic-s9xxx-armbian</id>
    <link href="https://github.com/ophub/amlogic-s9xxx-armbian" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Armbian for Amlogic s9xxx tv box. Support a311d, s922x, s905x3, s905x2, s912, s905d, s905x, s905w, s905, etc. including install to EMMC and update related functions.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Armbian for Amlogic TV Boxes&lt;/h1&gt; &#xA;&lt;p&gt;View Chinese description | &lt;a href=&#34;https://raw.githubusercontent.com/ophub/amlogic-s9xxx-armbian/main/README.cn.md&#34;&gt;查看中文说明&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.armbian.com/&#34;&gt;Armbian&lt;/a&gt; system is a lightweight Linux system based on Debian/Ubuntu built specifically for ARM chips. The Armbian system is lean, clean, and 100% compatible and inherits the functions and rich software ecosystem of the Debian/Ubuntu system. It can run safely and stably in TF/SD/USB and the eMMC of the device.&lt;/p&gt; &#xA;&lt;p&gt;Now you can replace the Android TV system of the TV box with the Amlogic chip with the Armbian system, making it a powerful server. This project builds Armbian system for Amlogic s9xxx TV box. including install to EMMC and update related functions. Support Amlogic s9xxx TV Boxes are &lt;em&gt;&lt;strong&gt;&lt;code&gt;a311d, s922x, s905x3, s905x2, s905l3a, s912, s905d, s905x, s905w, s905&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt;, etc. such as &lt;em&gt;&lt;strong&gt;&lt;code&gt;Belink GT-King, Belink GT-King Pro, UGOOS AM6 Plus, X96-Max+, HK1-Box, H96-Max-X3, Phicomm-N1, Octopus-Planet, Fiberhome HG680P, ZTE B860H&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt;, etc. Please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/ophub/amlogic-s9xxx-armbian/main/build-armbian/armbian-docs&#34;&gt;Armbian Documentation&lt;/a&gt; for the usage method.&lt;/p&gt; &#xA;&lt;p&gt;The latest version of the Armbian firmware can be downloaded in &lt;a href=&#34;https://github.com/ophub/amlogic-s9xxx-armbian/releases&#34;&gt;Releases&lt;/a&gt;. Welcome to &lt;code&gt;Fork&lt;/code&gt; and personalize it. If it is useful to you, you can click on the &lt;code&gt;Star&lt;/code&gt; in the upper right corner of the warehouse to show your support.&lt;/p&gt; &#xA;&lt;h2&gt;Armbian Firmware instructions&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;SoC&lt;/th&gt; &#xA;   &lt;th&gt;Device&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/ophub/kernel/tree/main/pub/stable&#34;&gt;Optional kernel&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Armbian Firmware&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;a311d&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.gearbest.com/boards---shields/pp_3008145189226460.html&#34;&gt;Khadas-VIM3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All&lt;/td&gt; &#xA;   &lt;td&gt;armbian_aml_a311d_*.img&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;s922x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://tokopedia.link/RAgZmOM41db&#34;&gt;Beelink-GT-King&lt;/a&gt;, &lt;a href=&#34;https://www.gearbest.com/tv-box/pp_3008857542462482.html&#34;&gt;Beelink-GT-King-Pro&lt;/a&gt;, &lt;a href=&#34;https://tokopedia.link/pHGKXuV41db&#34;&gt;Ugoos-AM6-Plus&lt;/a&gt;, &lt;a href=&#34;https://www.tokopedia.com/search?st=product&amp;amp;q=ODROID-N2&#34;&gt;ODROID-N2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All&lt;/td&gt; &#xA;   &lt;td&gt;armbian_aml_s922x_*.img&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;s905x3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://tokopedia.link/uMaH09s41db&#34;&gt;X96-Max+&lt;/a&gt;, &lt;a href=&#34;https://tokopedia.link/xhWeQgTuwfb&#34;&gt;HK1-Box&lt;/a&gt;, &lt;a href=&#34;https://tokopedia.link/KuWvwoYuwfb&#34;&gt;H96-Max-X3&lt;/a&gt;, &lt;a href=&#34;https://tokopedia.link/duoIXZpdGgb&#34;&gt;Ugoos-X3&lt;/a&gt;, &lt;a href=&#34;https://www.aliexpress.com/item/1005003772717802.html&#34;&gt;TX3&lt;/a&gt;, &lt;a href=&#34;https://www.gearbest.com/tv-box/pp_3002885621272175.html&#34;&gt;X96-Air&lt;/a&gt;, &lt;a href=&#34;https://tokopedia.link/ByBL45jdGgb&#34;&gt;A95XF3-Air&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All&lt;/td&gt; &#xA;   &lt;td&gt;armbian_aml_s905x3_*.img&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;s905x2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://tokopedia.link/HcfLaRzjqeb&#34;&gt;X96Max-4G&lt;/a&gt;, &lt;a href=&#34;https://tokopedia.link/HcfLaRzjqeb&#34;&gt;X96Max-2G&lt;/a&gt;, &lt;a href=&#34;https://www.gearbest.com/tv-box/pp_3008133484979616.html&#34;&gt;MECOOL-KM3-4G&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All&lt;/td&gt; &#xA;   &lt;td&gt;armbian_aml_s905x2_*.img&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;s912&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.gearbest.com/tv-box/pp_759339.html&#34;&gt;TX9-Pro&lt;/a&gt;, &lt;a href=&#34;https://www.gearbest.com/tv-box-mini-pc/pp_503486.html&#34;&gt;H96-Pro-Plus&lt;/a&gt;, &lt;a href=&#34;http://www.tanix-box.com/project-view/tanix-tx92-android-tv-box-powered-amlogic-s912/&#34;&gt;Tanix-TX92&lt;/a&gt;, &lt;a href=&#34;http://www.vorke.com/project/vorke-z6-2/&#34;&gt;VORKE-Z6-Plus&lt;/a&gt;, &lt;a href=&#34;https://www.gearbest.com/tv-box/pp_3005746210753315.html&#34;&gt;Mecool-M8S-PRO-L&lt;/a&gt;, &lt;a href=&#34;https://www.ebay.com/itm/253466003975&#34;&gt;T95Z-Plus&lt;/a&gt;, Octopus-Planet&lt;/td&gt; &#xA;   &lt;td&gt;All&lt;/td&gt; &#xA;   &lt;td&gt;armbian_aml_s912_*.img&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;s905d&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.gearbest.com/tv-box-mini-pc/pp_629409.html&#34;&gt;MECOOL-KI-Pro&lt;/a&gt;, Phicomm-N1&lt;/td&gt; &#xA;   &lt;td&gt;All&lt;/td&gt; &#xA;   &lt;td&gt;armbian_aml_s905d_*.img&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;s905x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://tokopedia.link/HbrIbqQcGgb&#34;&gt;HG680P&lt;/a&gt;, &lt;a href=&#34;https://www.zte.com.cn/global/products/cocloud/201707261551/IP-STB/ZXV10-B860H&#34;&gt;B860H&lt;/a&gt;, &lt;a href=&#34;https://www.tbee.com/product/tbee-box/&#34;&gt;TBee-Box&lt;/a&gt;, &lt;a href=&#34;https://www.gearbest.com/tv-box-mini-pc/pp_268277.html&#34;&gt;T95&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All&lt;/td&gt; &#xA;   &lt;td&gt;armbian_aml_s905x_*.img&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;s905w&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://tokopedia.link/ro207Hsjqeb&#34;&gt;X96-Mini&lt;/a&gt;, &lt;a href=&#34;https://www.gearbest.com/tv-box/pp_009748238474.html&#34;&gt;TX3-Mini&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;5.15.y&lt;/td&gt; &#xA;   &lt;td&gt;armbian_aml_s905w_*.img&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;s905&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.gearbest.com/tv-box-mini-pc/pp_321409.html&#34;&gt;Beelink-Mini-MX-2G&lt;/a&gt;, &lt;a href=&#34;https://www.gearbest.com/tv-box-mini-pc/pp_354313.html&#34;&gt;MXQ-Pro+4K&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All&lt;/td&gt; &#xA;   &lt;td&gt;armbian_aml_s905_*.img&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;s905l3a&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Calmact/e900v22c&#34;&gt;E900V22C/D&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All&lt;/td&gt; &#xA;   &lt;td&gt;armbian_aml_s905l3a_*.img&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;💡Tip: The current &lt;em&gt;&lt;strong&gt;&lt;code&gt;s905w&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; series of TV Boxes only support the use of the &lt;code&gt;5.15.y&lt;/code&gt; kernel, Other types of TV Boxes can use optional kernel versions. Currently &lt;em&gt;&lt;strong&gt;&lt;code&gt;s905&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; TV Boxes can only be used in &lt;code&gt;TF/SD/USB&lt;/code&gt;, other types of TV Boxes also support writing to &lt;code&gt;EMMC&lt;/code&gt;. Please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/ophub/amlogic-s9xxx-armbian/main/build-armbian/armbian-docs/amlogic_model_database.md&#34;&gt;instructions&lt;/a&gt; for dtb and u-boot of each device.&lt;/p&gt; &#xA;&lt;h2&gt;Install to EMMC and update instructions&lt;/h2&gt; &#xA;&lt;p&gt;Choose the corresponding firmware according to your box. Then write the IMG file to the USB hard disk through software such as &lt;a href=&#34;https://rufus.ie/&#34;&gt;Rufus&lt;/a&gt; or &lt;a href=&#34;https://www.balena.io/etcher/&#34;&gt;balenaEtcher&lt;/a&gt;. Insert the USB hard disk into the box. Common for all &lt;code&gt;Amlogic s9xxx TV Boxes&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h3&gt;Install Armbian to EMMC&lt;/h3&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Login in to armbian (default user: root, default password: 1234) → input command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;armbian-install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The mainline u-boot is installed by default, In order to support the use of 5.10 and above kernels. If you choose not to install, specify it in the &lt;code&gt;1&lt;/code&gt; input parameter, e.g. &lt;code&gt;armbian-install no&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h3&gt;Update Armbian Kernel&lt;/h3&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Login in to armbian → input command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# Run as root user (sudo -i)&#xA;# If no other parameters are specified, the following update command will update to the latest version of the current kernel of the same series.&#xA;armbian-update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If there is a set of kernel files in the current directory, it will be updated with the kernel in the current directory (The 4 kernel files required for the update are &lt;code&gt;header-xxx.tar.gz&lt;/code&gt;, &lt;code&gt;boot-xxx.tar.gz&lt;/code&gt;, &lt;code&gt;dtb-amlogic-xxx.tar.gz&lt;/code&gt;, &lt;code&gt;modules-xxx.tar.gz&lt;/code&gt;. Other kernel files are not required. If they exist at the same time, it will not affect the update. The system can accurately identify the required kernel files). If there is no kernel file in the current directory, it will query and download the latest kernel of the same series from the server for update. You can also query the &lt;a href=&#34;https://github.com/ophub/kernel/tree/main/pub/stable&#34;&gt;optional kernel&lt;/a&gt; version and update the specified version: &lt;code&gt;armbian-update 5.10.100&lt;/code&gt;. The optional kernel supported by the device can be freely updated, such as from 5.10.100 kernel to 5.15.25 kernel. When the kernel is updated, By default, download from &lt;a href=&#34;https://github.com/ophub/kernel/tree/main/pub/stable&#34;&gt;stable&lt;/a&gt; kernel version branch, if you download other &lt;a href=&#34;https://github.com/ophub/kernel/tree/main/pub&#34;&gt;version branch&lt;/a&gt;, please specify according to the branch folder name in the &lt;code&gt;2&lt;/code&gt; parameter, such as &lt;code&gt;armbian-update 5.7.19 dev&lt;/code&gt; . The mainline u-boot will be installed automatically by default, which has better support for kernels using versions above 5.10. If you choose not to install, please specify it in the &lt;code&gt;3&lt;/code&gt; input parameter, such as &lt;code&gt;armbian-update 5.10.100 stable no &lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h3&gt;Install Docker Service&lt;/h3&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Login in to armbian → input command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;armbian-docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After installing docker, you can choose whether to install the &lt;code&gt;portainer&lt;/code&gt; visual management panel. Users who intend to use the &lt;code&gt;LAN IP&lt;/code&gt; for management can choose (&lt;code&gt;h&lt;/code&gt;) to install the &lt;code&gt;http://ip:9000&lt;/code&gt; version; Users who intend to use the &lt;code&gt;domain name&lt;/code&gt; for remote management can choose (&lt;code&gt;s&lt;/code&gt;) to install the &lt;code&gt;https://domain:9000&lt;/code&gt; domain name certificate version (Please name the domain name &lt;code&gt;SSL&lt;/code&gt; certificate as &lt;code&gt;portainer.crt&lt;/code&gt; and &lt;code&gt;portainer.key&lt;/code&gt; and upload it to the &lt;code&gt;/etc/ssl/&lt;/code&gt; directory); Users who &lt;code&gt;do not need&lt;/code&gt; to install can choose (&lt;code&gt;n&lt;/code&gt;) to end the installation.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h3&gt;Modify Armbian Config&lt;/h3&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Login in to armbian → input command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;armbian-config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h3&gt;Create swap for Armbian&lt;/h3&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you feel that the memory of the current box is not enough when you are using applications with a large memory footprint such as &lt;code&gt;docker&lt;/code&gt;, you can create a &lt;code&gt;swap&lt;/code&gt; virtual memory partition, Change the disk space a certain capacity is virtualized into memory for use. The unit of the input parameter of the following command is &lt;code&gt;GB&lt;/code&gt;, and the default is &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Login in to armbian → input command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;armbian-swap 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h3&gt;Controlling the LED display&lt;/h3&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Login in to armbian → input command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;armbian-led&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Debug according to &lt;a href=&#34;https://raw.githubusercontent.com/ophub/amlogic-s9xxx-armbian/main/build-armbian/armbian-docs/led_screen_display_control.md&#34;&gt;LED screen display control instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h3&gt;Use Armbian in TF/SD/USB&lt;/h3&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To activate the remaining space of TF/SD/USB, please login in to armbian → input command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;armbian-tf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;According to the prompt, enter &lt;code&gt;e&lt;/code&gt; to expand the remaining space to the current system partition and file system, and enter &lt;code&gt;c&lt;/code&gt; to create a new third partition.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Or manually allocate the remaining space&lt;/summary&gt; &#xA; &lt;h4&gt;View &lt;a href=&#34;https://user-images.githubusercontent.com/68696949/137860992-fbd4e2fa-e90c-4bbb-8985-7f5db9f49927.jpg&#34;&gt;Operation screenshot&lt;/a&gt;&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# 1. Confirm the name of the TF/SD/USB according to the size of the space. The TF/SD is [ `mmcblk` ], USB is [ `sd` ]&#xA;Command: Enter [ fdisk -l | grep &#34;sd&#34; ]&#xA;&#xA;# 2. Get the starting value of the remaining space, Copy and save, used below  (E.g: 5382144)&#xA;Command: Enter [ fdisk -l | grep &#34;sd&#34; | sed -n &#39;$p&#39; | awk &#39;{print $3}&#39; | xargs -i expr {} + 1 ]&#xA;&#xA;# 3. Start allocating unused space (E.g: sda, mmcblk0 or mmcblk1)&#xA;Command: Enter [ fdisk /dev/sda ] Start allocating the remaining space&#xA;Command: Select [ n ] to create a partition&#xA;Command: Select [ p ] to specify the partition type as primary partition&#xA;Command: Set the partition number to [ 3 ]&#xA;Command: The start value of the partition, enter the value obtained in the second step, E.g: [ 5382144 ]&#xA;Command: End value, press [ Enter ] to use the default value&#xA;Command: If there is a hint: Do you want to remove the signature? [Y]es/[N]o: Enter [ Y ]&#xA;Command: Enter [ t ] to specify the partition type&#xA;Command: Enter Partition number [ 3 ]&#xA;Command: Enter Hex code (type L to list all codes): [ 83 ]&#xA;Command: Enter [ w ] to save&#xA;Command: Enter [ reboot ] to restart&#xA;&#xA;# 4. After restarting, format the new partition&#xA;Command: Enter [ mkfs.ext4 -F -L SHARED /dev/sda3 ] to format the new partition&#xA;&#xA;# 5. Set the mount directory for the new partition&#xA;Command: Enter [ mkdir -p /mnt/share ] to Create mount directory&#xA;Command: Enter [ mount -t ext4 /dev/sda3 /mnt/share ] to Mount the newly created partition to the directory&#xA;&#xA;# 6. Add automatic mount at boot&#xA;Command: Enter [ vi /etc/fstab ]&#xA;# Press [ i ] to enter the input mode, copy the following values to the end of the file&#xA;/dev/sda3 /mnt/share ext4 defaults 0 0&#xA;# Press [ esc ] to exit, Input [ :wq! ] and [ Enter ] to Save, Finish.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h3&gt;Backup/restore the original EMMC system&lt;/h3&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Supports backup/restore of the box&#39;s &lt;code&gt;EMMC&lt;/code&gt; partition in &lt;code&gt;TF/SD/USB&lt;/code&gt;. It is recommended that you back up the Android TV system that comes with the current box before installing the Armbian system in a brand new box, so that you can use it in the future when restoring the TV system.&lt;/p&gt; &#xA;&lt;p&gt;Please login in to armbian → input command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;armbian-ddbr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;According to the prompt, enter &lt;code&gt;b&lt;/code&gt; to perform system backup, and enter &lt;code&gt;r&lt;/code&gt; to perform system recovery.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h3&gt;Compile the kernel in Armbian&lt;/h3&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For the usage of compiling the kernel in Armbian, see the &lt;a href=&#34;https://raw.githubusercontent.com/ophub/amlogic-s9xxx-armbian/main/compile-kernel&#34;&gt;compile-kernel&lt;/a&gt; documentation. please login in to armbian → input command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;armbian-kernel -update&#xA;armbian-kernel -d -k 5.10.100&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h3&gt;More instructions for use&lt;/h3&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In the use of Armbian, please refer to &lt;a href=&#34;https://raw.githubusercontent.com/ophub/amlogic-s9xxx-armbian/main/build-armbian/armbian-docs&#34;&gt;armbian-docs&lt;/a&gt; for some common problems that may be encountered.&lt;/p&gt; &#xA;&lt;h2&gt;Local build instructions&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository to the local. &lt;code&gt;git clone --depth 1 https://github.com/ophub/amlogic-s9xxx-armbian.git&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the necessary packages (The script has only been tested on x86_64 Ubuntu-20.04/22.04)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cd amlogic-s9xxx-armbian&#xA;sudo apt-get update -y&#xA;sudo apt-get full-upgrade -y&#xA;# For Ubuntu-22.04&#xA;sudo apt-get install -y $(cat compile-kernel/tools/script/ubuntu2204-build-armbian-depends)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Create the &lt;code&gt;build/output/images&lt;/code&gt; folder, and upload the Armbian image ( Eg: &lt;code&gt;Armbian_21.11.0-trunk_Odroidn2_current_5.15.25.img&lt;/code&gt; ) to this &lt;code&gt;~/amlogic-s9xxx-armbian/build/output/images&lt;/code&gt; directory. Please keep the release version number (e.g. &lt;code&gt;21.11.0&lt;/code&gt;) and kernel version number (e.g. &lt;code&gt;5.15.25&lt;/code&gt;) in the name of the original Armbian image file, It will be used as the name of the armbian firmware after rebuilding.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enter the &lt;code&gt;~/amlogic-s9xxx-armbian&lt;/code&gt; root directory. And run Eg: &lt;code&gt;sudo ./rebuild -d -b s905x3 -k 5.10.100&lt;/code&gt; to build armbian for &lt;code&gt;amlogic s9xxx&lt;/code&gt;. The generated Armbian image is in the &lt;code&gt;build/output/images&lt;/code&gt; directory under the root directory.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h3&gt;Description of localized packaging parameters&lt;/h3&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Parameter&lt;/th&gt; &#xA;   &lt;th&gt;Meaning&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-d&lt;/td&gt; &#xA;   &lt;td&gt;Defaults&lt;/td&gt; &#xA;   &lt;td&gt;Compile all cores and all firmware types.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-b&lt;/td&gt; &#xA;   &lt;td&gt;BuildSoC&lt;/td&gt; &#xA;   &lt;td&gt;Specify the Build firmware type. Write the build firmware name individually, such as &lt;code&gt;-b s905x3&lt;/code&gt; . Multiple firmware use &lt;code&gt;_&lt;/code&gt; connect such as &lt;code&gt;-b s905x3_s905d&lt;/code&gt; . Use &lt;code&gt;all&lt;/code&gt; for all SoC models. You can use these codes: &lt;code&gt;a311d&lt;/code&gt;, &lt;code&gt;s905x3&lt;/code&gt;, &lt;code&gt;s905x2&lt;/code&gt;, &lt;code&gt;s905l3a&lt;/code&gt;, &lt;code&gt;s905x&lt;/code&gt;, &lt;code&gt;s905w&lt;/code&gt;, &lt;code&gt;s905d&lt;/code&gt;, &lt;code&gt;s905d-ki&lt;/code&gt;, &lt;code&gt;s905&lt;/code&gt;, &lt;code&gt;s922x&lt;/code&gt;, &lt;code&gt;s922x-n2&lt;/code&gt;, &lt;code&gt;s912&lt;/code&gt;, &lt;code&gt;s912-m8s&lt;/code&gt; . Note: &lt;code&gt;s922x-reva&lt;/code&gt; is &lt;code&gt;s922x-gtking-pro-rev_a&lt;/code&gt;, &lt;code&gt;s922x-n2&lt;/code&gt; is &lt;code&gt;s922x-odroid-n2&lt;/code&gt;, &lt;code&gt;s912-m8s&lt;/code&gt; is &lt;code&gt;s912-mecool-m8s-pro-l&lt;/code&gt;, &lt;code&gt;s905d-ki&lt;/code&gt; is &lt;code&gt;s912-mecool-ki-pro&lt;/code&gt;, &lt;code&gt;s905x2-km3&lt;/code&gt; is &lt;code&gt;s905x2-mecool-km3&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-k&lt;/td&gt; &#xA;   &lt;td&gt;Kernel&lt;/td&gt; &#xA;   &lt;td&gt;Specify the &lt;a href=&#34;https://github.com/ophub/kernel/tree/main/pub/stable&#34;&gt;kernel version&lt;/a&gt;, Such as &lt;code&gt;-k 5.10.100&lt;/code&gt; . Multiple kernel use &lt;code&gt;_&lt;/code&gt; connection such as &lt;code&gt;-k 5.15.25_5.10.100&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-a&lt;/td&gt; &#xA;   &lt;td&gt;AutoKernel&lt;/td&gt; &#xA;   &lt;td&gt;Set whether to automatically adopt the latest version of the kernel of the same series. When it is &lt;code&gt;true&lt;/code&gt;, it will automatically find in the kernel library whether there is an updated version of the kernel specified in &lt;code&gt;-k&lt;/code&gt; such as 5.10.100 version. If there is the latest version of same series, it will automatically Replace with the latest version. When set to &lt;code&gt;false&lt;/code&gt;, the specified version of the kernel will be compiled. Default value: &lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-v&lt;/td&gt; &#xA;   &lt;td&gt;Version&lt;/td&gt; &#xA;   &lt;td&gt;Specify the &lt;a href=&#34;https://github.com/ophub/kernel/tree/main/pub&#34;&gt;version branch&lt;/a&gt;, Such as &lt;code&gt;-v stable&lt;/code&gt;. The specified name must be the same as the branch directory name. The &lt;code&gt;stable&lt;/code&gt; branch version is used by default.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-s&lt;/td&gt; &#xA;   &lt;td&gt;Size&lt;/td&gt; &#xA;   &lt;td&gt;Specify the size of the ROOTFS partition in MB. The default is 2748, and the specified size must be greater than 2000. Such as &lt;code&gt;-s 2748&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-t&lt;/td&gt; &#xA;   &lt;td&gt;RootfsType&lt;/td&gt; &#xA;   &lt;td&gt;Set the file system type of the ROOTFS partition of the firmware, the default is &lt;code&gt;ext4&lt;/code&gt; type, and the options are &lt;code&gt;ext4&lt;/code&gt; or &lt;code&gt;btrfs&lt;/code&gt; type. Such as &lt;code&gt;-t btrfs&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-n&lt;/td&gt; &#xA;   &lt;td&gt;CustomName&lt;/td&gt; &#xA;   &lt;td&gt;Set the signature part of the firmware name. The default value is empty. You can add signatures such as &lt;code&gt;_server&lt;/code&gt;, &lt;code&gt;_gnome_desktop&lt;/code&gt; or &lt;code&gt;_ophub&lt;/code&gt; as needed. Do not include spaces when setting custom signatures.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo ./rebuild -d&lt;/code&gt;: Use the default configuration to pack all TV Boxes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo ./rebuild -d -b s905x3 -k 5.10.100&lt;/code&gt;: recommend. Use the default configuration, specify a kernel and a firmware for compilation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo ./rebuild -d -b s905x3_s905d -k 5.15.25_5.10.100&lt;/code&gt;: Use the default configuration, specify multiple cores, and multiple firmware for compilation. use &lt;code&gt;_&lt;/code&gt; to connect.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo ./rebuild -d -b s905x3 -k 5.10.100 -s 2748&lt;/code&gt;: Use the default configuration, specify a kernel, a firmware, and set the partition size for compilation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo ./rebuild -d -b s905x3 -v dev -k 5.7.19&lt;/code&gt;: Use the default configuration, specify the model, specify the version branch, and specify the kernel for packaging.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo ./rebuild -d -b s905x3_s905d&lt;/code&gt;: Use the default configuration, specify multiple firmware, use &lt;code&gt;_&lt;/code&gt; to connect. compile all kernels.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo ./rebuild -d -k 5.15.25_5.10.100&lt;/code&gt;: Use the default configuration. Specify multiple cores, use &lt;code&gt;_&lt;/code&gt; to connect.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo ./rebuild -d -k 5.15.25_5.10.100 -a true&lt;/code&gt;: Use the default configuration. Specify multiple cores, use &lt;code&gt;_&lt;/code&gt; to connect. Auto update to the latest kernel of the same series.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo ./rebuild -d -t btrfs -s 2748 -k 5.10.100&lt;/code&gt;: Use the default configuration, set the file system to btrfs format and the partition size to 2748M, and only compile the armbian firmware with the kernel version 5.10.100.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Use GitHub Actions to build&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Workflows configuration in &lt;a href=&#34;https://raw.githubusercontent.com/ophub/amlogic-s9xxx-armbian/main/.github/workflows/build-armbian.yml&#34;&gt;.yml&lt;/a&gt; files. Set the armbian &lt;code&gt;SOC&lt;/code&gt; you want to build in &lt;code&gt;Rebuild Armbian for amlogic s9xxx&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;New compilation: Select &lt;em&gt;&lt;strong&gt;&lt;code&gt;Build armbian&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; on the &lt;a href=&#34;https://github.com/ophub/amlogic-s9xxx-armbian/actions&#34;&gt;Actions&lt;/a&gt; page, According to the OS version officially supported by Armbian, In &lt;a href=&#34;https://docs.armbian.com/Developer-Guide_Build-Options/&#34;&gt;RELEASE&lt;/a&gt;, you can choose Ubuntu series: &lt;code&gt;jammy&lt;/code&gt; / &lt;code&gt;focal&lt;/code&gt;, or Debian series: &lt;code&gt;bullseye&lt;/code&gt; / &lt;code&gt;buster&lt;/code&gt;, and in &lt;code&gt;BOARD&lt;/code&gt;, you can choose &lt;code&gt;odroidn2&lt;/code&gt; / &lt;code&gt;lepotato&lt;/code&gt;, etc., Click the &lt;em&gt;&lt;strong&gt;&lt;code&gt;Run workflow&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; button.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compile again: If there is an &lt;code&gt;Armbian_.*-trunk_.*.img.gz&lt;/code&gt; file in &lt;a href=&#34;https://github.com/ophub/amlogic-s9xxx-armbian/releases&#34;&gt;Releases&lt;/a&gt;, you do not need to compile it completely, you can directly use this file to &lt;code&gt;build armbian&lt;/code&gt; of different soc. Select &lt;em&gt;&lt;strong&gt;&lt;code&gt;Use Releases file to build armbian&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; on the &lt;a href=&#34;https://github.com/ophub/amlogic-s9xxx-armbian/actions&#34;&gt;Actions&lt;/a&gt; page. Click the &lt;em&gt;&lt;strong&gt;&lt;code&gt;Run workflow&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; button.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use other Armbian firmware, such as &lt;a href=&#34;https://armbian.tnahosting.net/dl/odroidn2/archive/&#34;&gt;odroidn2&lt;/a&gt; provided by the official Armbian firmware download site &lt;a href=&#34;https://armbian.tnahosting.net/dl/&#34;&gt;armbian.tnahosting.net&lt;/a&gt;, only by introducing the script of this repository in the process control file &lt;a href=&#34;https://raw.githubusercontent.com/ophub/amlogic-s9xxx-armbian/main/.github/workflows/rebuild-armbian.yml&#34;&gt;.yml&lt;/a&gt; for Armbian reconstruction, it can be adapted to the use of Amlogic S9xxx series TV Boxes. In the &lt;a href=&#34;https://github.com/ophub/amlogic-s9xxx-armbian/actions&#34;&gt;Actions&lt;/a&gt; page, select &lt;em&gt;&lt;strong&gt;&lt;code&gt;Rebuild armbian&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt;, and enter the Armbian network download url such as &lt;code&gt;https://dl.armbian.com/*/Armbian_*.img.xz&lt;/code&gt;, or in the process control file &lt;a href=&#34;https://raw.githubusercontent.com/ophub/amlogic-s9xxx-armbian/main/.github/workflows/rebuild-armbian.yml&#34;&gt;.yml&lt;/a&gt;, set the load path of the rebuild file through the &lt;code&gt;armbian_path&lt;/code&gt; parameter. code show as below:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- name: Rebuild the Armbian for Amlogic s9xxx&#xA;  uses: ophub/amlogic-s9xxx-armbian@main&#xA;  with:&#xA;    build_target: armbian&#xA;    armbian_path: build/output/images/*.img&#xA;    armbian_soc: s905d_s905x3_s922x_s905x&#xA;    armbian_kernel: 5.15.25_5.10.100&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h3&gt;GitHub Actions Input parameter description&lt;/h3&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For the related settings of GitHUB RELEASES_TOKEN, please refer to: &lt;a href=&#34;https://github.com/ophub/amlogic-s9xxx-openwrt/raw/main/router-config/README.md#3-fork-repository-and-set-releases_token&#34;&gt;RELEASES_TOKEN&lt;/a&gt;. The relevant parameters correspond to the &lt;code&gt;local packaging command&lt;/code&gt;, please refer to the above description.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Parameter&lt;/th&gt; &#xA;   &lt;th&gt;Defaults&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;armbian_path&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;Set the path of the original Armbian file, support the file path in the current workflow such as &lt;code&gt;build/output/images/*.img&lt;/code&gt;, and also support the use of the network download address such as: &lt;code&gt;https://dl.armbian.com/*/Armbian_*.img.xz&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;armbian_soc&lt;/td&gt; &#xA;   &lt;td&gt;s905d_s905x3&lt;/td&gt; &#xA;   &lt;td&gt;Set the &lt;code&gt;SOC&lt;/code&gt; of the packaged TV Boxes, function reference &lt;code&gt;-b&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;armbian_kernel&lt;/td&gt; &#xA;   &lt;td&gt;5.15.25_5.10.100&lt;/td&gt; &#xA;   &lt;td&gt;Set kernel &lt;a href=&#34;https://github.com/ophub/kernel/tree/main/pub/stable&#34;&gt;version&lt;/a&gt;, function reference &lt;code&gt;-k&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;auto_kernel&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;Set whether to automatically use the latest version of the same series of kernels, function reference &lt;code&gt;-a&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;version_branch&lt;/td&gt; &#xA;   &lt;td&gt;stable&lt;/td&gt; &#xA;   &lt;td&gt;Specify the name of the kernel &lt;a href=&#34;https://github.com/ophub/kernel/tree/main/pub&#34;&gt;version branch&lt;/a&gt;, function reference &lt;code&gt;-v&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;armbian_size&lt;/td&gt; &#xA;   &lt;td&gt;2748&lt;/td&gt; &#xA;   &lt;td&gt;Set the size of the firmware ROOTFS partition, function reference &lt;code&gt;-s&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;armbian_fstype&lt;/td&gt; &#xA;   &lt;td&gt;ext4&lt;/td&gt; &#xA;   &lt;td&gt;Set the file system type of the firmware ROOTFS partition, function reference &lt;code&gt;-t&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;armbian_sign&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;Set the signature part of the firmware name, function reference &lt;code&gt;-n&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h3&gt;GitHub Actions Output variable description&lt;/h3&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To upload to &lt;code&gt;Releases&lt;/code&gt;, you need to add &lt;code&gt;GITHUB_TOKEN&lt;/code&gt; and &lt;code&gt;GH_TOKEN&lt;/code&gt; to the repository and set &lt;code&gt;Workflow read and write permissions&lt;/code&gt;, see the &lt;a href=&#34;https://raw.githubusercontent.com/ophub/amlogic-s9xxx-armbian/main/build-armbian/armbian-docs#2-set-the-privacy-variable-github_token&#34;&gt;instructions for details&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Parameter&lt;/th&gt; &#xA;   &lt;th&gt;For example&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;${{ env.PACKAGED_OUTPUTPATH }}&lt;/td&gt; &#xA;   &lt;td&gt;out&lt;/td&gt; &#xA;   &lt;td&gt;OpenWrt firmware storage path&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;${{ env.PACKAGED_OUTPUTDATE }}&lt;/td&gt; &#xA;   &lt;td&gt;04.13.1058&lt;/td&gt; &#xA;   &lt;td&gt;Packing date(month.day.hour.minute)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;${{ env.PACKAGED_STATUS }}&lt;/td&gt; &#xA;   &lt;td&gt;success&lt;/td&gt; &#xA;   &lt;td&gt;Package status: success / failure&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Armbian firmware default information&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Default IP&lt;/td&gt; &#xA;   &lt;td&gt;Get IP from the router&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Default username&lt;/td&gt; &#xA;   &lt;td&gt;root&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Default password&lt;/td&gt; &#xA;   &lt;td&gt;1234&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Compile the kernel using GitHub Actions&lt;/h2&gt; &#xA;&lt;p&gt;For the compilation method of the kernel, see &lt;a href=&#34;https://raw.githubusercontent.com/ophub/amlogic-s9xxx-armbian/main/compile-kernel&#34;&gt;compile-kernel&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- name: Compile the kernel for Amlogic s9xxx&#xA;  uses: ophub/amlogic-s9xxx-armbian@main&#xA;  with:&#xA;    build_target: kernel&#xA;    kernel_version: 5.15.25_5.10.100&#xA;    kernel_auto: true&#xA;    kernel_sign: -ophub&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Armbian Contributors&lt;/h2&gt; &#xA;&lt;p&gt;First of all, I would like to thank &lt;a href=&#34;https://github.com/150balbes&#34;&gt;150balbes&lt;/a&gt; for his outstanding contributions and a good foundation for using Armbian in the Amlogic TV Boxes. The &lt;a href=&#34;https://github.com/armbian/build&#34;&gt;armbian&lt;/a&gt; system compiled here directly uses the latest official source code for real-time compilation. The development idea of the program comes from the tutorials of authors such as &lt;a href=&#34;https://www.kflyo.com/howto-compile-armbian-for-n1-box&#34;&gt;ebkso&lt;/a&gt;. Thank you for your dedication and sharing, so that we can use the Armbian system in the Amlogic s9xxx TV Boxes.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;kernel&lt;/code&gt; / &lt;code&gt;u-boot&lt;/code&gt; and other resources used by this system are mainly copied from the project of &lt;a href=&#34;https://github.com/unifreq/openwrt_packit&#34;&gt;unifreq/openwrt_packit&lt;/a&gt;, Some files are shared by users in &lt;a href=&#34;https://github.com/ophub/amlogic-s9xxx-armbian/pulls&#34;&gt;Pull&lt;/a&gt; and &lt;a href=&#34;https://github.com/ophub/amlogic-s9xxx-armbian/issues&#34;&gt;Issues&lt;/a&gt; of &lt;a href=&#34;https://github.com/ophub/amlogic-s9xxx-openwrt&#34;&gt;amlogic-s9xxx-openwrt&lt;/a&gt; / &lt;a href=&#34;https://github.com/ophub/amlogic-s9xxx-armbian&#34;&gt;amlogic-s9xxx-armbian&lt;/a&gt; / &lt;a href=&#34;https://github.com/ophub/luci-app-amlogic&#34;&gt;luci-app-amlogic&lt;/a&gt; / &lt;a href=&#34;https://github.com/ophub/kernel&#34;&gt;kernel&lt;/a&gt; and other projects. To thank these pioneers and sharers, From now on (This source code repository was created on 2021-09-19), I have recorded them in &lt;a href=&#34;https://github.com/ophub/amlogic-s9xxx-armbian/raw/main/CONTRIBUTOR.md&#34;&gt;CONTRIBUTOR.md&lt;/a&gt;. Thanks again everyone for giving new life and meaning to the TV Boxes.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/armbian/build&#34;&gt;armbian/build&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/unifreq&#34;&gt;unifreq/kernel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kernel.org&#34;&gt;kernel.org&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The amlogic-s9xxx-armbian © OPHUB is licensed under &lt;a href=&#34;https://github.com/ophub/amlogic-s9xxx-armbian/raw/main/LICENSE&#34;&gt;GPL-2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>theVakhovskeIsTaken/holoiso</title>
    <updated>2022-05-29T01:54:10Z</updated>
    <id>tag:github.com,2022-05-29:/theVakhovskeIsTaken/holoiso</id>
    <link href="https://github.com/theVakhovskeIsTaken/holoiso" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SteamOS 3 (Holo) archiso configuration&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/theVakhovskeIsTaken/holoiso/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/theVakhovskeIsTaken/holoiso/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build ISO&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/97450182/167457908-07be1a60-7e86-4bef-b7f0-6bd19efd8b24.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;HoloISO&lt;/h1&gt; &#xA;&lt;p&gt;SteamOS 3 (Holo) archiso configuration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Yes, Gabe. SteamOS functions well on a toaster.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project attempts to bring the Steam Deck&#39;s Holo OS into a generic, installable format, and provide a close-to-official SteamOS experience.&lt;/p&gt; &#xA;&lt;p&gt;Click &lt;a href=&#34;https://t.me/HoloISO&#34;&gt;here&lt;/a&gt; to join &lt;strong&gt;HoloISO&lt;/strong&gt; Telegram update channel;&lt;/p&gt; &#xA;&lt;p&gt;Click &lt;a href=&#34;https://steamdeck.community/forums/holoiso.29/&#34;&gt;here&lt;/a&gt; to visit &lt;strong&gt;HoloISO&lt;/strong&gt; discussion on Steam Deck Community forums&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Common Questions&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Is this official?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;No, but it may as well be 99% of the way there. The code and packages, are straight from Valve, with zero possible edits, and the ISO is being built on the official Steam Deck recovery image, running inside a QEMU instance.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The ISO didn&#39;t boot for me, any solution?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Currently, the ISO only boots if flashed using &lt;a href=&#34;https://www.balena.io/etcher/&#34;&gt;BalenaEtcher&lt;/a&gt;, &lt;a href=&#34;http://wiki.rosalab.ru/en/index.php/ROSA_ImageWriter&#34;&gt;RosaImageWriter&lt;/a&gt;, &lt;a href=&#34;https://getfedora.org/en/workstation/download/&#34;&gt;Fedora Media Writer&lt;/a&gt;, DD with 4MB block size, or &lt;a href=&#34;https://rufus.ie&#34;&gt;Rufus&lt;/a&gt; with DD mode.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Working stuff:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bootup&lt;/li&gt; &#xA; &lt;li&gt;SteamOS OOBE (Steam Deck UI First Boot Experience)&lt;/li&gt; &#xA; &lt;li&gt;Deck UI (separate session)&lt;/li&gt; &#xA; &lt;li&gt;Deck UI (-gamepadui)&lt;/li&gt; &#xA; &lt;li&gt;TDP/FPS limiting&lt;/li&gt; &#xA; &lt;li&gt;Global FSR&lt;/li&gt; &#xA; &lt;li&gt;Shader Pre-Caching&lt;/li&gt; &#xA; &lt;li&gt;Switch to Desktop from plasma/to plasma without user interference.&lt;/li&gt; &#xA; &lt;li&gt;Valve&#39;s exclusive &lt;em&gt;Vapor&lt;/em&gt; appearance for KDE Plasma&lt;/li&gt; &#xA; &lt;li&gt;Steam Deck pacman mirrors&lt;/li&gt; &#xA; &lt;li&gt;Cool-looking neofetch?&lt;/li&gt; &#xA; &lt;li&gt;System updates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Known issues:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NVIDIA GPUs are supported after following this procedure:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Only 9xx+ GPUs are supported. Choose your GPU type while installing HoloISO. If you encounter any issues, reboot to recovery mode, type &lt;code&gt;recoveryinit&lt;/code&gt;, connect to network using &lt;code&gt;nmtui&lt;/code&gt; and install required packages.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Older GPUs won&#39;t be supported until drivers are opensourced OR Until they support atomic KMS, accelerated Xwayland, and Vulkan DMA-BUF extensions, they simply cannot function properly with HoloISO.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Intel GPUs/iGPUs require a Gamescope and MESA downgrade in order to boot into Steam Deck session.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Choose your GPU type while installing HoloISO. If you encounter any issues, reboot to recovery mode, type &lt;code&gt;recoveryinit&lt;/code&gt;, connect to network using &lt;code&gt;nmtui&lt;/code&gt; and install required packages.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation process:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Prerequistes:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;4GB flash drive&lt;/li&gt; &#xA; &lt;li&gt;AMD RX Vega+/APU iGPU; 4xx/5xx, 5xxx/6xxx GPU or Intel UHD 630+ iGPU or NVIDIA GTX 9xx+ iGPU/GPUs (preferably without Optimus [PRIME])&lt;/li&gt; &#xA; &lt;li&gt;UEFI-enabled device&lt;/li&gt; &#xA; &lt;li&gt;Disabled secure boot&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation types:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;barebones&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;An OS-only installation, resembles vanilla Arch Linux installation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;gameonly*&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Steam Deck UI only (AMD GPU only; no desktop), as said, this doesn&#39;t ship any DE, and only has the Steam Deck UI installed. *&lt;em&gt;&lt;strong&gt;This part is currently under a renovation.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;deckperience&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Full SteamOS 3 experience, Includes proper session switching, KDE Plasma + media apps, and Chromium pre-installed.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Flash the ISO from &lt;a href=&#34;https://github.com/bhaiest/holoiso/releases/latest&#34;&gt;releases&lt;/a&gt; using &lt;a href=&#34;https://www.balena.io/etcher/&#34;&gt;BalenaEtcher&lt;/a&gt;, &lt;a href=&#34;https://rufus.ie&#34;&gt;Rufus&lt;/a&gt; with DD mode, or by typing &lt;code&gt;sudo dd if=SteamOS.iso of=/dev/sd(your flash drive) bs=4M status=progress oflag=sync&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Boot into ISO&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;holoinstall&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enter drive node, starting from, for example, &lt;code&gt;sda&lt;/code&gt; or &lt;code&gt;nvme0n1&lt;/code&gt; when asked&lt;/li&gt; &#xA; &lt;li&gt;Take your favourite hot beverage, and wait &#39;till it installs :3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Upon booting, you&#39;ll be greeted with Steam Deck&#39;s OOBE screen, from where you&#39;ll connect to your network, and login to your Steam account, from there, you can exit to KDE Plasma seamlessly by choosing &lt;em&gt;Switch to desktop&lt;/em&gt; in the power menu, &lt;a href=&#34;https://www.youtube.com/watch?v=smfwna2iHho&#34;&gt;like so&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/97450182/167292656-1679e007-4701-4a3c-89ee-2104b5eb12cd.png&#34; alt=&#34;Screenshot_20220508_133916&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/97450182/167292672-8bc9032d-4a21-4528-ab7e-b9dbc25a0664.png&#34; alt=&#34;Screenshot_20220508_133737&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/97450182/167292722-a68806c1-5768-4790-a8e7-108d7c72bb08.png&#34; alt=&#34;Screenshot_20220508_133746&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/97450182/167292731-86fed590-0260-4c5e-ac13-05d284b5fd24.png&#34; alt=&#34;Screenshot_20220508_133822&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/97450182/167292734-90036b5f-2571-438e-8951-8d731cd4ae93.png&#34; alt=&#34;Screenshot_20220508_134038&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/97450182/167292738-a70d266f-814d-4352-8d38-b920ae3f3381.png&#34; alt=&#34;Screenshot_20220508_134051&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Notes:&lt;/h2&gt; &#xA;&lt;p&gt;This configuration includes Valve&#39;s pacman.conf repositories, &lt;code&gt;holoinstall&lt;/code&gt; script and &lt;code&gt;holoinstall&lt;/code&gt; post-installation binaries.&lt;/p&gt; &#xA;&lt;p&gt;This configuration builds a &lt;em&gt;releng-based ISO&lt;/em&gt;, which is the default Arch Linux redistribution flavor.&lt;/p&gt; &#xA;&lt;h2&gt;Building the ISO:&lt;/h2&gt; &#xA;&lt;p&gt;Trigger the build by executing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -Sy archiso&#xA;git clone https://github.com/bhaiest/holoiso/&#xA;sudo mkarchiso -v holoiso&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once it ends, your ISO will be available in the &lt;code&gt;out&lt;/code&gt; folder.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>npryce/adr-tools</title>
    <updated>2022-05-29T01:54:10Z</updated>
    <id>tag:github.com,2022-05-29:/npryce/adr-tools</id>
    <link href="https://github.com/npryce/adr-tools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Command-line tools for working with Architecture Decision Records&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ADR Tools&lt;/h1&gt; &#xA;&lt;p&gt;A command-line tool for working with a log of &lt;a href=&#34;http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions&#34;&gt;Architecture Decision Records&lt;/a&gt; (ADRs).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/npryce/adr-tools&#34;&gt;&lt;img src=&#34;https://travis-ci.org/npryce/adr-tools.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/npryce/adr-tools/master/INSTALL.md&#34;&gt;Install ADR Tools&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;adr&lt;/code&gt; command to manage ADRs. Try running &lt;code&gt;adr help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;ADRs are stored in a subdirectory of your project as Markdown files. The default directory is &lt;code&gt;doc/adr&lt;/code&gt;, but you can specify the directory when you initialise the ADR log.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create an ADR directory in the root of your project:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; adr init doc/architecture/decisions&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This will create a directory named &lt;code&gt;doc/architecture/decisions&lt;/code&gt; containing the first ADR, which records that you are using ADRs to record architectural decisions and links to &lt;a href=&#34;http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions&#34;&gt;Michael Nygard&#39;s article on the subject&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create Architecture Decision Records&lt;/p&gt; &lt;pre&gt;&lt;code&gt; adr new Implement as Unix shell scripts&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This will create a new, numbered ADR file and open it in your editor of choice (as specified by the VISUAL or EDITOR environment variable).&lt;/p&gt; &lt;p&gt;To create a new ADR that supercedes a previous one (ADR 9, for example), use the -s option.&lt;/p&gt; &lt;pre&gt;&lt;code&gt; adr new -s 9 Use Rust for performance-critical functionality&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This will create a new ADR file that is flagged as superceding ADR 9, and changes the status of ADR 9 to indicate that it is superceded by the new ADR. It then opens the new ADR in your editor of choice.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For further information, use the built in help:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; adr help&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/npryce/adr-tools/master/tests/&#34;&gt;tests&lt;/a&gt; for detailed examples.&lt;/p&gt; &#xA;&lt;p&gt;The decisions for this tool are recorded as &lt;a href=&#34;https://raw.githubusercontent.com/npryce/adr-tools/master/doc/adr/&#34;&gt;architecture decision records in the project repository&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hwdsl2/setup-ipsec-vpn</title>
    <updated>2022-05-29T01:54:10Z</updated>
    <id>tag:github.com,2022-05-29:/hwdsl2/setup-ipsec-vpn</id>
    <link href="https://github.com/hwdsl2/setup-ipsec-vpn" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Scripts to build your own IPsec VPN server, with IPsec/L2TP, Cisco IPsec and IKEv2&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/README-zh.md&#34;&gt;中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;IPsec VPN Server Auto Setup Scripts&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hwdsl2/setup-ipsec-vpn/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/hwdsl2/setup-ipsec-vpn/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hwdsl2/setup-ipsec-vpn/stargazers&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/docs/images/badges/github-stars.svg?sanitize=true&#34; alt=&#34;GitHub Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hwdsl2/docker-ipsec-vpn-server&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/docs/images/badges/docker-stars.svg?sanitize=true&#34; alt=&#34;Docker Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hwdsl2/docker-ipsec-vpn-server&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/docs/images/badges/docker-pulls.svg?sanitize=true&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set up your own IPsec VPN server in just a few minutes, with IPsec/L2TP, Cisco IPsec and IKEv2.&lt;/p&gt; &#xA;&lt;p&gt;An IPsec VPN encrypts your network traffic, so that nobody between you and the VPN server can eavesdrop on your data as it travels via the Internet. This is especially useful when using unsecured networks, e.g. at coffee shops, airports or hotel rooms.&lt;/p&gt; &#xA;&lt;p&gt;We will use &lt;a href=&#34;https://libreswan.org/&#34;&gt;Libreswan&lt;/a&gt; as the IPsec server, and &lt;a href=&#34;https://github.com/xelerance/xl2tpd&#34;&gt;xl2tpd&lt;/a&gt; as the L2TP provider.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;» See also: &lt;a href=&#34;https://github.com/hwdsl2/openvpn-install&#34;&gt;OpenVPN&lt;/a&gt; and &lt;a href=&#34;https://github.com/hwdsl2/wireguard-install&#34;&gt;WireGuard&lt;/a&gt; Auto Setup Scripts&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;First, prepare your Linux server* with a fresh install of Ubuntu, Debian or CentOS.&lt;/p&gt; &#xA;&lt;p&gt;Use this one-liner to set up an IPsec VPN server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://get.vpnsetup.net -O vpn.sh &amp;amp;&amp;amp; sudo sh vpn.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your VPN login details will be randomly generated, and displayed when finished.&lt;/p&gt; &#xA;&lt;p&gt;After setup, you may optionally install &lt;a href=&#34;https://github.com/hwdsl2/openvpn-install&#34;&gt;OpenVPN&lt;/a&gt; and/or &lt;a href=&#34;https://github.com/hwdsl2/wireguard-install&#34;&gt;WireGuard&lt;/a&gt; on the same server.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Alternative one-liners. &lt;/summary&gt; &#xA; &lt;p&gt;You may also use &lt;code&gt;curl&lt;/code&gt; to download:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -fsSL https://get.vpnsetup.net -o vpn.sh &amp;amp;&amp;amp; sudo sh vpn.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Alternative setup URL:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -fsSL https://gitlab.com/hwdsl2/setup-ipsec-vpn/-/raw/master/vpnsetup.sh -o vpn.sh &amp;amp;&amp;amp; sudo sh vpn.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you are unable to download, open &lt;a href=&#34;https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/vpnsetup.sh&#34;&gt;vpnsetup.sh&lt;/a&gt;, then click the &lt;code&gt;Raw&lt;/code&gt; button on the right. Press &lt;code&gt;Ctrl/Cmd+A&lt;/code&gt; to select all, &lt;code&gt;Ctrl/Cmd+C&lt;/code&gt; to copy, then paste into your favorite editor.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; See the VPN script in action (terminal recording). &lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This recording is for demo purposes only. VPN credentials in this recording are &lt;strong&gt;NOT&lt;/strong&gt; valid.&lt;/p&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/docs/images/script-demo.svg?sanitize=true&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;A pre-built &lt;a href=&#34;https://github.com/hwdsl2/docker-ipsec-vpn-server&#34;&gt;Docker image&lt;/a&gt; is also available. For other options and client setup, read the sections below.&lt;/p&gt; &#xA;&lt;p&gt;* A cloud server, virtual private server (VPS) or dedicated server.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fully automated IPsec VPN server setup, no user input needed&lt;/li&gt; &#xA; &lt;li&gt;Supports IKEv2 with strong and fast ciphers (e.g. AES-GCM)&lt;/li&gt; &#xA; &lt;li&gt;Generates VPN profiles to auto-configure iOS, macOS and Android devices&lt;/li&gt; &#xA; &lt;li&gt;Supports Windows, macOS, iOS, Android and Linux as VPN clients&lt;/li&gt; &#xA; &lt;li&gt;Includes helper scripts to manage VPN users and certificates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;A cloud server, virtual private server (VPS) or dedicated server, freshly installed with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu 22.04, 20.04 or 18.04&lt;/li&gt; &#xA; &lt;li&gt;Debian 11&lt;a href=&#34;https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/#debian-10-note&#34;&gt;*&lt;/a&gt;, 10&lt;a href=&#34;https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/#debian-10-note&#34;&gt;*&lt;/a&gt; or 9&lt;/li&gt; &#xA; &lt;li&gt;CentOS 7 or CentOS Stream 8&lt;a href=&#34;https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/#centos-8-note&#34;&gt;**&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rocky Linux or AlmaLinux 8&lt;/li&gt; &#xA; &lt;li&gt;Oracle Linux 8 or 7&lt;/li&gt; &#xA; &lt;li&gt;Red Hat Enterprise Linux (RHEL) 8 or 7&lt;/li&gt; &#xA; &lt;li&gt;Amazon Linux 2&lt;/li&gt; &#xA; &lt;li&gt;Alpine Linux 3.15 or 3.14&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This also includes Linux VMs in public clouds, such as &lt;a href=&#34;https://blog.ls20.com/digitalocean&#34;&gt;DigitalOcean&lt;/a&gt;, &lt;a href=&#34;https://blog.ls20.com/vultr&#34;&gt;Vultr&lt;/a&gt;, &lt;a href=&#34;https://blog.ls20.com/linode&#34;&gt;Linode&lt;/a&gt;, &lt;a href=&#34;https://www.ovhcloud.com/en/vps/&#34;&gt;OVH&lt;/a&gt; and &lt;a href=&#34;https://azure.microsoft.com&#34;&gt;Microsoft Azure&lt;/a&gt;. Public cloud users can also deploy using &lt;a href=&#34;https://blog.ls20.com/ipsec-l2tp-vpn-auto-setup-for-ubuntu-12-04-on-amazon-ec2/#vpnsetup&#34;&gt;user data&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://dovpn.carlfriess.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/docs/images/do-install-button.png&#34; alt=&#34;Deploy to DigitalOcean&#34;&gt;&lt;/a&gt; &amp;nbsp;&lt;a href=&#34;https://cloud.linode.com/stackscripts/37239&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/docs/images/linode-deploy-button.png&#34; alt=&#34;Deploy to Linode&#34;&gt;&lt;/a&gt; &amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/azure/README.md&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/docs/images/azure-deploy-button.png&#34; alt=&#34;Deploy to Azure&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blog.ls20.com/ipsec-l2tp-vpn-auto-setup-for-ubuntu-12-04-on-amazon-ec2/#gettingavps&#34;&gt;&lt;strong&gt;» I want to run my own VPN but don&#39;t have a server for that&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A pre-built &lt;a href=&#34;https://github.com/hwdsl2/docker-ipsec-vpn-server&#34;&gt;Docker image&lt;/a&gt; is also available. Advanced users can install on a &lt;a href=&#34;https://www.raspberrypi.org&#34;&gt;Raspberry Pi&lt;/a&gt;. &lt;a href=&#34;https://elasticbyte.net/posts/setting-up-a-native-cisco-ipsec-vpn-server-using-a-raspberry-pi/&#34;&gt;[1]&lt;/a&gt; &lt;a href=&#34;https://www.stewright.me/2018/07/create-a-raspberry-pi-vpn-server-using-l2tpipsec/&#34;&gt;[2]&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;debian-10-note&#34;&gt;&lt;/a&gt; * Debian 11/10 users should &lt;a href=&#34;https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/docs/clients.md#debian-10-kernel&#34;&gt;use the standard Linux kernel&lt;/a&gt;.&lt;br&gt; &lt;a name=&#34;centos-8-note&#34;&gt;&lt;/a&gt; ** CentOS Linux 8 &lt;a href=&#34;https://www.centos.org/centos-linux-eol/&#34;&gt;is no longer supported&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;strong&gt;DO NOT&lt;/strong&gt; run these scripts on your PC or Mac! They should only be used on a server!&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;First, update your server with &lt;code&gt;sudo apt-get update &amp;amp;&amp;amp; sudo apt-get dist-upgrade&lt;/code&gt; (Ubuntu/Debian) or &lt;code&gt;sudo yum update&lt;/code&gt; and reboot. This is optional, but recommended.&lt;/p&gt; &#xA;&lt;p&gt;To install the VPN, please choose one of the following options:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Option 1:&lt;/strong&gt; Have the script generate random VPN credentials for you (will be displayed when finished).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://get.vpnsetup.net -O vpn.sh &amp;amp;&amp;amp; sudo sh vpn.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Option 2:&lt;/strong&gt; Edit the script and provide your own VPN credentials.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://get.vpnsetup.net -O vpn.sh&#xA;nano -w vpn.sh&#xA;[Replace with your own values: YOUR_IPSEC_PSK, YOUR_USERNAME and YOUR_PASSWORD]&#xA;sudo sh vpn.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; A secure IPsec PSK should consist of at least 20 random characters.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Option 3:&lt;/strong&gt; Define your VPN credentials as environment variables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# All values MUST be placed inside &#39;single quotes&#39;&#xA;# DO NOT use these special characters within values: \ &#34; &#39;&#xA;wget https://get.vpnsetup.net -O vpn.sh&#xA;sudo VPN_IPSEC_PSK=&#39;your_ipsec_pre_shared_key&#39; \&#xA;VPN_USER=&#39;your_vpn_username&#39; \&#xA;VPN_PASSWORD=&#39;your_vpn_password&#39; \&#xA;sh vpn.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After setup, you may optionally install &lt;a href=&#34;https://github.com/hwdsl2/openvpn-install&#34;&gt;OpenVPN&lt;/a&gt; and/or &lt;a href=&#34;https://github.com/hwdsl2/wireguard-install&#34;&gt;WireGuard&lt;/a&gt; on the same server.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Advanced users can optionally customize IKEv2 options. &lt;/summary&gt; &#xA; &lt;p&gt;Advanced users can optionally specify a DNS name for the IKEv2 server address. The DNS name must be a fully qualified domain name (FQDN). Example:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo VPN_DNS_NAME=&#39;vpn.example.com&#39; sh vpn.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Similarly, you may specify a name for the first IKEv2 client. The default is &lt;code&gt;vpnclient&lt;/code&gt; if not specified.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo VPN_CLIENT_NAME=&#39;your_client_name&#39; sh vpn.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;By default, clients are set to use &lt;a href=&#34;https://developers.google.com/speed/public-dns/&#34;&gt;Google Public DNS&lt;/a&gt; when the VPN is active. You may specify custom DNS server(s) for all VPN modes. Example:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo VPN_DNS_SRV1=1.1.1.1 VPN_DNS_SRV2=1.0.0.1 sh vpn.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;By default, no password is required when importing IKEv2 client configuration. You can choose to protect client config files using a random password.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo VPN_PROTECT_CONFIG=yes sh vpn.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Click here if you are unable to download. &lt;/summary&gt; &#xA; &lt;p&gt;You may also use &lt;code&gt;curl&lt;/code&gt; to download. For example:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -fL https://get.vpnsetup.net -o vpn.sh&#xA;sudo sh vpn.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Alternative setup URL:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -fL https://gitlab.com/hwdsl2/setup-ipsec-vpn/-/raw/master/vpnsetup.sh -o vpn.sh&#xA;sudo sh vpn.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you are unable to download, open &lt;a href=&#34;https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/vpnsetup.sh&#34;&gt;vpnsetup.sh&lt;/a&gt;, then click the &lt;code&gt;Raw&lt;/code&gt; button on the right. Press &lt;code&gt;Ctrl/Cmd+A&lt;/code&gt; to select all, &lt;code&gt;Ctrl/Cmd+C&lt;/code&gt; to copy, then paste into your favorite editor.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Next steps&lt;/h2&gt; &#xA;&lt;p&gt;Get your computer or device to use the VPN. Please refer to:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/docs/ikev2-howto.md&#34;&gt;&lt;strong&gt;Guide: How to Set Up and Use IKEv2 VPN&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/docs/clients.md&#34;&gt;&lt;strong&gt;Configure IPsec/L2TP VPN Clients&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/docs/clients-xauth.md&#34;&gt;&lt;strong&gt;Configure IPsec/XAuth (&#34;Cisco IPsec&#34;) VPN Clients&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you get an error when trying to connect, see &lt;a href=&#34;https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/docs/clients.md#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Enjoy your very own VPN! &lt;span&gt;✨&lt;/span&gt;&lt;span&gt;🎉&lt;/span&gt;&lt;span&gt;🚀&lt;/span&gt;&lt;span&gt;✨&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Important notes&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Read this in other languages: &lt;a href=&#34;https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/README.md#important-notes&#34;&gt;English&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/README-zh.md#%E9%87%8D%E8%A6%81%E6%8F%90%E7%A4%BA&#34;&gt;中文&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows users&lt;/strong&gt;: For IPsec/L2TP mode, a &lt;a href=&#34;https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/docs/clients.md#windows-error-809&#34;&gt;one-time registry change&lt;/a&gt; is required if the VPN server or client is behind NAT (e.g. home router).&lt;/p&gt; &#xA;&lt;p&gt;The same VPN account can be used by your multiple devices. However, due to an IPsec/L2TP limitation, if you wish to connect multiple devices from behind the same NAT (e.g. home router), you must use &lt;a href=&#34;https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/docs/ikev2-howto.md&#34;&gt;IKEv2&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/docs/clients-xauth.md&#34;&gt;IPsec/XAuth&lt;/a&gt; mode. To view or update VPN user accounts, see &lt;a href=&#34;https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/docs/manage-users.md&#34;&gt;Manage VPN users&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For servers with an external firewall (e.g. &lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-security-groups.html&#34;&gt;EC2&lt;/a&gt;/&lt;a href=&#34;https://cloud.google.com/vpc/docs/firewalls&#34;&gt;GCE&lt;/a&gt;), open UDP ports 500 and 4500 for the VPN. Aliyun users, see &lt;a href=&#34;https://github.com/hwdsl2/setup-ipsec-vpn/issues/433&#34;&gt;#433&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Clients are set to use &lt;a href=&#34;https://developers.google.com/speed/public-dns/&#34;&gt;Google Public DNS&lt;/a&gt; when the VPN is active. If another DNS provider is preferred, see &lt;a href=&#34;https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/docs/advanced-usage.md&#34;&gt;Advanced usage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Using kernel support could improve IPsec/L2TP performance. It is available on &lt;a href=&#34;https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/#requirements&#34;&gt;all supported OS&lt;/a&gt;. Ubuntu users should install the &lt;code&gt;linux-modules-extra-$(uname -r)&lt;/code&gt; package and run &lt;code&gt;service xl2tpd restart&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The scripts will backup existing config files before making changes, with &lt;code&gt;.old-date-time&lt;/code&gt; suffix.&lt;/p&gt; &#xA;&lt;h2&gt;Upgrade Libreswan&lt;/h2&gt; &#xA;&lt;p&gt;Use this one-liner to update &lt;a href=&#34;https://libreswan.org&#34;&gt;Libreswan&lt;/a&gt; (&lt;a href=&#34;https://github.com/libreswan/libreswan/raw/main/CHANGES&#34;&gt;changelog&lt;/a&gt; | &lt;a href=&#34;https://lists.libreswan.org/mailman/listinfo/swan-announce&#34;&gt;announce&lt;/a&gt;) on your VPN server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://get.vpnsetup.net/upg -O vpnup.sh &amp;amp;&amp;amp; sudo sh vpnup.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Alternative one-liners. &lt;/summary&gt; &#xA; &lt;p&gt;You may also use &lt;code&gt;curl&lt;/code&gt; to download:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -fsSL https://get.vpnsetup.net/upg -o vpnup.sh &amp;amp;&amp;amp; sudo sh vpnup.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Alternative update URL:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -fsSL https://gitlab.com/hwdsl2/setup-ipsec-vpn/-/raw/master/extras/vpnupgrade.sh -o vpnup.sh &amp;amp;&amp;amp; sudo sh vpnup.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you are unable to download, open &lt;a href=&#34;https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/extras/vpnupgrade.sh&#34;&gt;vpnupgrade.sh&lt;/a&gt;, then click the &lt;code&gt;Raw&lt;/code&gt; button on the right. Press &lt;code&gt;Ctrl/Cmd+A&lt;/code&gt; to select all, &lt;code&gt;Ctrl/Cmd+C&lt;/code&gt; to copy, then paste into your favorite editor.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;The latest supported Libreswan version is &lt;code&gt;4.7&lt;/code&gt;. Check installed version: &lt;code&gt;ipsec --version&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;xl2tpd&lt;/code&gt; can be updated using your system&#39;s package manager, such as &lt;code&gt;apt-get&lt;/code&gt; on Ubuntu/Debian.&lt;/p&gt; &#xA;&lt;h2&gt;Manage VPN users&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/docs/manage-users.md&#34;&gt;Manage VPN users&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Advanced usage&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/docs/advanced-usage.md&#34;&gt;Advanced usage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Uninstall the VPN&lt;/h2&gt; &#xA;&lt;p&gt;To uninstall IPsec VPN, run the &lt;a href=&#34;https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/extras/vpnuninstall.sh&#34;&gt;helper script&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; This helper script will remove IPsec VPN from your server. All VPN configuration will be &lt;strong&gt;permanently deleted&lt;/strong&gt;, and Libreswan and xl2tpd will be removed. This &lt;strong&gt;cannot be undone&lt;/strong&gt;!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://get.vpnsetup.net/unst -O vpnunst.sh &amp;amp;&amp;amp; sudo bash vpnunst.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, see &lt;a href=&#34;https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/docs/uninstall.md&#34;&gt;Uninstall the VPN&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Feedback &amp;amp; Questions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Have a suggestion for this project? Open an &lt;a href=&#34;https://github.com/hwdsl2/setup-ipsec-vpn/issues/new/choose&#34;&gt;Enhancement request&lt;/a&gt;. &lt;a href=&#34;https://github.com/hwdsl2/setup-ipsec-vpn/pulls&#34;&gt;Pull requests&lt;/a&gt; are also welcome.&lt;/li&gt; &#xA; &lt;li&gt;If you found a reproducible bug, open a bug report for the &lt;a href=&#34;https://github.com/libreswan/libreswan/issues?q=is%3Aissue&#34;&gt;IPsec VPN&lt;/a&gt; or for the &lt;a href=&#34;https://github.com/hwdsl2/setup-ipsec-vpn/issues/new/choose&#34;&gt;VPN scripts&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Got a question? Please first search &lt;a href=&#34;https://github.com/hwdsl2/setup-ipsec-vpn/issues?q=is%3Aissue&#34;&gt;existing issues&lt;/a&gt; and comments &lt;a href=&#34;https://gist.github.com/hwdsl2/9030462#comments&#34;&gt;in this Gist&lt;/a&gt; and &lt;a href=&#34;https://blog.ls20.com/ipsec-l2tp-vpn-auto-setup-for-ubuntu-12-04-on-amazon-ec2/#disqus_thread&#34;&gt;on my blog&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Ask VPN related questions on the &lt;a href=&#34;https://lists.libreswan.org/mailman/listinfo/swan&#34;&gt;Libreswan&lt;/a&gt; or &lt;a href=&#34;https://lists.strongswan.org/mailman/listinfo/users&#34;&gt;strongSwan&lt;/a&gt; mailing list, or read these wikis: &lt;a href=&#34;https://libreswan.org/wiki/Main_Page&#34;&gt;[1]&lt;/a&gt; &lt;a href=&#34;https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/security_guide/sec-securing_virtual_private_networks&#34;&gt;[2]&lt;/a&gt; &lt;a href=&#34;https://wiki.strongswan.org/projects/strongswan/wiki/UserDocumentation&#34;&gt;[3]&lt;/a&gt; &lt;a href=&#34;https://wiki.gentoo.org/wiki/IPsec_L2TP_VPN_server&#34;&gt;[4]&lt;/a&gt; &lt;a href=&#34;https://wiki.archlinux.org/index.php/Openswan_L2TP/IPsec_VPN_client_setup&#34;&gt;[5]&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (C) 2014-2022 &lt;a href=&#34;https://github.com/hwdsl2&#34;&gt;Lin Song&lt;/a&gt; &lt;a href=&#34;https://www.linkedin.com/in/linsongui&#34;&gt;&lt;img src=&#34;https://static.licdn.com/scds/common/u/img/webpromo/btn_viewmy_160x25.png&#34; alt=&#34;View my profile on LinkedIn&#34;&gt;&lt;/a&gt;&lt;br&gt; Based on &lt;a href=&#34;https://github.com/sarfata/voodooprivacy&#34;&gt;the work of Thomas Sarlandie&lt;/a&gt; (Copyright 2012)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://creativecommons.org/licenses/by-sa/3.0/&#34;&gt;&lt;img src=&#34;https://i.creativecommons.org/l/by-sa/3.0/88x31.png&#34; alt=&#34;Creative Commons License&#34;&gt;&lt;/a&gt;&lt;br&gt; This work is licensed under the &lt;a href=&#34;http://creativecommons.org/licenses/by-sa/3.0/&#34;&gt;Creative Commons Attribution-ShareAlike 3.0 Unported License&lt;/a&gt;&lt;br&gt; Attribution required: please include my name in any derivative and let me know how you have improved it!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>phyver/GameShell</title>
    <updated>2022-05-29T01:54:10Z</updated>
    <id>tag:github.com,2022-05-29:/phyver/GameShell</id>
    <link href="https://github.com/phyver/GameShell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;a game to learn (or teach) how to use standard commands in a Unix shell&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GameShell: a &#34;game&#34; to teach the Unix shell&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/phyver/GameShell/master/art/illustration-small.png&#34; alt=&#34;Illustration inspired by the game&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Teaching first-year university students or high schoolers to use a Unix shell is not always the easiest or most entertaining of tasks. GameShell was devised as a tool to help students at the &lt;a href=&#34;https://univ-smb.fr&#34;&gt;Université Savoie Mont Blanc&lt;/a&gt; to engage with a &lt;em&gt;real&lt;/em&gt; shell, in a way that encourages learning while also having fun.&lt;/p&gt; &#xA;&lt;p&gt;The original idea, due to Rodolphe Lepigre, was to run a standard bash session with an appropriate configuration file that defined &#34;missions&#34; which would be &#34;checked&#34; in order to progress through the game.&lt;/p&gt; &#xA;&lt;p&gt;Here is the result...&lt;/p&gt; &#xA;&lt;p&gt;Feel free to send us your remarks, questions or suggestions by opening &lt;a href=&#34;https://github.com/phyver/GameShell/issues&#34;&gt;issues&lt;/a&gt; or submitting &lt;a href=&#34;https://github.com/phyver/GameShell/pulls&#34;&gt;pull requests&lt;/a&gt;. We are particularly interested in any new missions you might create!&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; GameShell is currently undergoing heavy development: the current version has not been field tested by students. Do not hesitate to report any problems you might encounter or suggestions you might have by &lt;a href=&#34;https://github.com/phyver/GameShell/issues/new&#34;&gt;opening an issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;GameShell should work on any standard Linux system, and also on macOS and BSD (but we have run fewer tests on the latter systems). On Debian or Ubuntu, the only dependencies (besides &lt;code&gt;bash&lt;/code&gt;) are the &lt;code&gt;gettext-base&lt;/code&gt; and &lt;code&gt;awk&lt;/code&gt; packages (the latter is generally installed by default). Some missions have additional dependencies: these missions will be skipped if the dependencies are not met. On Debian or Ubuntu, run the following command to install all game and mission dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo apt install gettext man-db procps psmisc nano tree bsdmainutils x11-apps wget&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://raw.githubusercontent.com/phyver/GameShell/master/doc/user_manual.md&#34;&gt;user manual&lt;/a&gt; to see how to install the game dependencies on other systems (macOS, BSD, ...).&lt;/p&gt; &#xA;&lt;p&gt;Assuming all the dependencies are installed, you can try the latest version of the game by running the following two commands in a terminal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ wget https://github.com/phyver/GameShell/releases/download/latest/gameshell.sh&#xA;$ bash gameshell.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first command will download the latest version of the game in the form of a self-extracting archive, and the second command will initialise and run the game from the downloaded archive. Instructions on how to play are provided in the game directly.&lt;/p&gt; &#xA;&lt;p&gt;Note that when you quit the game (with &lt;code&gt;control-d&lt;/code&gt; or the command &lt;code&gt;gsh exit&lt;/code&gt;) your progression will be saved in a new archive (called &lt;code&gt;GameShell-save.sh&lt;/code&gt;). Run this archive to resume the game where you left it.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer not running foreign shell scripts on your computer, you can generate a Docker image with the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mkdir GameShell; cd GameShell&#xA;$ wget --quiet https://github.com/phyver/GameShell/releases/download/latest/Dockerfile&#xA;$ docker build -t gsh .&#xA;$ docker run -it gsh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The game will NOT be saved when you exit, and additional flags are required if you want to run X programs from inside GameShell. Refer to &lt;a href=&#34;https://raw.githubusercontent.com/phyver/GameShell/master/doc/deps.md#running-GameShell-from-a-docker-container&#34;&gt;this section&lt;/a&gt; of the user manual.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;To find out more about GameShell, refer to the following documents:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/phyver/GameShell/master/doc/user_manual.md&#34;&gt;user manual&lt;/a&gt; provides information on how to run the game on all supported platforms (Linux, macOS, BSD), explains how to run the game from the sources, tells you how to generate custom game archives (which is useful if you want to use GameShell for teaching a class), and more.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/phyver/GameShell/master/doc/dev_manual.md&#34;&gt;developer manual&lt;/a&gt; provides information on how to create new missions, how to translate missions, and how to participate in the development of the game.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Who is developing GameShell?&lt;/h2&gt; &#xA;&lt;h3&gt;Developers&lt;/h3&gt; &#xA;&lt;p&gt;The game is currently being developed by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.lama.univ-smb.fr/~hyvernat&#34;&gt;Pierre Hyvernat&lt;/a&gt; (main developer, &lt;a href=&#34;mailto:pierre.hyvernat@univ-smb.fr&#34;&gt;pierre.hyvernat@univ-smb.fr&lt;/a&gt;),&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lepigre.fr&#34;&gt;Rodolphe Lepigre&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Mission contributors&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pierre Hyvernat&lt;/li&gt; &#xA; &lt;li&gt;Rodolphe Lepigre&lt;/li&gt; &#xA; &lt;li&gt;Christophe Raffalli&lt;/li&gt; &#xA; &lt;li&gt;Xavier Provencal&lt;/li&gt; &#xA; &lt;li&gt;Clovis Eberhart&lt;/li&gt; &#xA; &lt;li&gt;Sébastien Tavenas&lt;/li&gt; &#xA; &lt;li&gt;Tiemen Duvillard&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Special thanks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All the students who found &lt;em&gt;many&lt;/em&gt; bugs in the early versions.&lt;/li&gt; &#xA; &lt;li&gt;Joan Stark (a.k.a, jgs), who designed hundreds of ASCII-art pieces in the late 90s. Most of the ASCII-art encountered in GameShell are due to her.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Licence&lt;/h2&gt; &#xA;&lt;p&gt;GameShell is released under the &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.en.html&#34;&gt;GPLv3&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please link to this repository if you use GameShell.&lt;/p&gt; &#xA;&lt;p&gt;GameShell is open source and free to use. One way you can acknowledge the work it required is by sending an actual postcard to&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  Pierre Hyvernat&#xA;  Laboratoire de Mathématiques, CNRS UMR 5127&#xA;  Université de Savoie&#xA;  73376 Le Bourget du Lac&#xA;  FRANCE&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Azure/azure-quickstart-templates</title>
    <updated>2022-05-29T01:54:10Z</updated>
    <id>tag:github.com,2022-05-29:/Azure/azure-quickstart-templates</id>
    <link href="https://github.com/Azure/azure-quickstart-templates" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Azure Quickstart Templates&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Azure Resource Manager QuickStart Templates&lt;/h1&gt; &#xA;&lt;p&gt;This repo contains all currently available Azure Resource Manager templates contributed by the community. A searchable template index is maintained at &lt;a href=&#34;https://azure.microsoft.com/en-us/documentation/templates&#34;&gt;azure.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/README.md#contribution-guide&#34;&gt;&lt;strong&gt;Contribution guide&lt;/strong&gt;&lt;/a&gt; for how to use or contribute to this repo.&lt;/p&gt; &#xA;&lt;h2&gt;NOTE&lt;/h2&gt; &#xA;&lt;p&gt;We have finished migration of the samples to subfolders, see &lt;a href=&#34;https://azure.microsoft.com/en-us/documentation/templates&#34;&gt;azure.com&lt;/a&gt; if you need help finding a sample. A few obsolete samples were removed in the migration.&lt;/p&gt; &#xA;&lt;h3&gt;Final Note&lt;/h3&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>prowler-cloud/prowler</title>
    <updated>2022-05-29T01:54:10Z</updated>
    <id>tag:github.com,2022-05-29:/prowler-cloud/prowler</id>
    <link href="https://github.com/prowler-cloud/prowler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Prowler is an Open Source security tool to perform AWS security best practices assessments, audits, incident response, continuous monitoring, hardening and forensics readiness. It contains more than 200 controls covering CIS, PCI-DSS, ISO27001, GDPR, HIPAA, FFIEC, SOC2, AWS FTR, ENS and custom security frameworks.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img align=&#34;center&#34; src=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/docs/images/prowler-pro-dark.png#gh-dark-mode-only&#34; width=&#34;150&#34; height=&#34;36&#34;&gt; &lt;img align=&#34;center&#34; src=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/docs/images/prowler-pro-light.png#gh-light-mode-only&#34; width=&#34;15%&#34; height=&#34;15%&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;&lt;i&gt;&amp;nbsp;&amp;nbsp;&amp;amp;nbspExplore the Pro version of Prowler at &lt;a href=&#34;https://prowler.pro&#34;&gt;prowler.pro&lt;/a&gt;&lt;/i&gt;&lt;/b&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/3985464/113734260-7ba06900-96fb-11eb-82bc-d4f68a1e2710.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://discord.gg/UjSMCVnxSB&#34;&gt;&lt;img alt=&#34;Discord Shield&#34; src=&#34;https://img.shields.io/discord/807208614288818196&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/toniblyx/prowler&#34;&gt;&lt;img alt=&#34;Docker Pulls&#34; src=&#34;https://img.shields.io/docker/pulls/toniblyx/prowler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/toniblyx/prowler&#34;&gt;&lt;img alt=&#34;Docker&#34; src=&#34;https://img.shields.io/docker/cloud/build/toniblyx/prowler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/toniblyx/prowler&#34;&gt;&lt;img alt=&#34;Docker&#34; src=&#34;https://img.shields.io/docker/image-size/toniblyx/prowler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gallery.ecr.aws/o4g1s5r6/prowler&#34;&gt;&lt;img width=&#34;120&#34; height=&#34;19&amp;quot;&#34; alt=&#34;AWS ECR Gallery&#34; src=&#34;https://user-images.githubusercontent.com/3985464/151531396-b6535a68-c907-44eb-95a1-a09508178616.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/prowler-cloud/prowler&#34;&gt;&lt;img alt=&#34;Repo size&#34; src=&#34;https://img.shields.io/github/repo-size/prowler-cloud/prowler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/prowler-cloud/prowler&#34;&gt;&lt;img alt=&#34;Lines&#34; src=&#34;https://img.shields.io/tokei/lines/github/prowler-cloud/prowler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/prowler-cloud/prowler/issues&#34;&gt;&lt;img alt=&#34;Issues&#34; src=&#34;https://img.shields.io/github/issues/prowler-cloud/prowler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/prowler-cloud/prowler/releases&#34;&gt;&lt;img alt=&#34;Version&#34; src=&#34;https://img.shields.io/github/v/release/prowler-cloud/prowler?include_prereleases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/prowler-cloud/prowler/releases&#34;&gt;&lt;img alt=&#34;Version&#34; src=&#34;https://img.shields.io/github/release-date/prowler-cloud/prowler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/prowler-cloud/prowler&#34;&gt;&lt;img alt=&#34;Contributors&#34; src=&#34;https://img.shields.io/github/contributors-anon/prowler-cloud/prowler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/prowler-cloud/prowler&#34;&gt;&lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/github/license/prowler-cloud/prowler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/ToniBlyx&#34;&gt;&lt;img alt=&#34;Twitter&#34; src=&#34;https://img.shields.io/twitter/follow/toniblyx?style=social&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;i&gt;Prowler&lt;/i&gt; is an Open Source security tool to perform AWS security best practices assessments, audits, incident response, continuous monitoring, hardening and forensics readiness. It contains more than 200 controls covering CIS, PCI-DSS, ISO27001, GDPR, HIPAA, FFIEC, SOC2, AWS FTR, ENS and custome security frameworks. &lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#high-level-architecture&#34;&gt;High level architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#requirements-and-installation&#34;&gt;Requirements and Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#advanced-usage&#34;&gt;Advanced Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#security-hub-integration&#34;&gt;Security Hub integration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#codebuild-deployment&#34;&gt;CodeBuild deployment&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#allowlist-or-remove-a-fail-from-resources&#34;&gt;Allowlist&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#how-to-fix-every-fail&#34;&gt;Fix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#extras&#34;&gt;Extras&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#forensics-ready-checks&#34;&gt;Forensics Ready Checks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#gdpr-checks&#34;&gt;GDPR Checks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#hipaa-checks&#34;&gt;HIPAA Checks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#trust-boundaries-checks&#34;&gt;Trust Boundaries Checks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/util/org-multi-account/README.md&#34;&gt;Multi Account and Continuous Monitoring&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#custom-checks&#34;&gt;Custom Checks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#third-party-integrations&#34;&gt;Third Party Integrations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/LIST_OF_CHECKS_AND_GROUPS.md&#34;&gt;Full list of checks and groups&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;Prowler is a command line tool that helps you with AWS security assessment, auditing, hardening and incident response.&lt;/p&gt; &#xA;&lt;p&gt;It follows guidelines of the CIS Amazon Web Services Foundations Benchmark (49 checks) and has more than 100 additional checks including related to GDPR, HIPAA, PCI-DSS, ISO-27001, FFIEC, SOC2 and others.&lt;/p&gt; &#xA;&lt;p&gt;Read more about &lt;a href=&#34;https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf&#34;&gt;CIS Amazon Web Services Foundations Benchmark v1.2.0 - 05-23-2018&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;+200 checks covering security best practices across all AWS regions and most of AWS services and related to the next groups:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Identity and Access Management [group1]&lt;/li&gt; &#xA; &lt;li&gt;Logging [group2]&lt;/li&gt; &#xA; &lt;li&gt;Monitoring [group3]&lt;/li&gt; &#xA; &lt;li&gt;Networking [group4]&lt;/li&gt; &#xA; &lt;li&gt;CIS Level 1 [cislevel1]&lt;/li&gt; &#xA; &lt;li&gt;CIS Level 2 [cislevel2]&lt;/li&gt; &#xA; &lt;li&gt;Extras &lt;em&gt;see Extras section&lt;/em&gt; [extras]&lt;/li&gt; &#xA; &lt;li&gt;Forensics related group of checks [forensics-ready]&lt;/li&gt; &#xA; &lt;li&gt;GDPR [gdpr] Read more &lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#gdpr-checks&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HIPAA [hipaa] Read more &lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#hipaa-checks&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Trust Boundaries [trustboundaries] Read more &lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#trust-boundaries-checks&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Secrets&lt;/li&gt; &#xA; &lt;li&gt;Internet exposed resources&lt;/li&gt; &#xA; &lt;li&gt;EKS-CIS&lt;/li&gt; &#xA; &lt;li&gt;Also includes PCI-DSS, ISO-27001, FFIEC, SOC2, ENS (Esquema Nacional de Seguridad of Spain).&lt;/li&gt; &#xA; &lt;li&gt;AWS FTR [FTR] Read more &lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#aws-ftr-checks&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;With Prowler you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get a direct colorful or monochrome report&lt;/li&gt; &#xA; &lt;li&gt;A HTML, CSV, JUNIT, JSON or JSON ASFF (Security Hub) format report&lt;/li&gt; &#xA; &lt;li&gt;Send findings directly to Security Hub&lt;/li&gt; &#xA; &lt;li&gt;Run specific checks and groups or create your own&lt;/li&gt; &#xA; &lt;li&gt;Check multiple AWS accounts in parallel or sequentially&lt;/li&gt; &#xA; &lt;li&gt;And more! Read examples below&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;High level architecture&lt;/h2&gt; &#xA;&lt;p&gt;You can run Prowler from your workstation, an EC2 instance, Fargate or any other container, Codebuild, CloudShell and Cloud9.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3985464/109143232-1488af80-7760-11eb-8d83-726790fda592.jpg&#34; alt=&#34;Prowler high level architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements and Installation&lt;/h2&gt; &#xA;&lt;p&gt;Prowler has been written in bash using AWS-CLI underneath and it works in Linux, Mac OS or Windows with cygwin or virtualization. Also requires &lt;code&gt;jq&lt;/code&gt; and &lt;code&gt;detect-secrets&lt;/code&gt; to work properly.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure the latest version of AWS-CLI is installed. It works with either v1 or v2, however &lt;em&gt;latest v2 is recommended if using new regions since they require STS v2 token&lt;/em&gt;, and other components needed, with Python pip already installed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For Amazon Linux (&lt;code&gt;yum&lt;/code&gt; based Linux distributions and AWS CLI v2):&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo yum update -y&#xA;sudo yum remove -y awscli&#xA;curl &#34;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip&#34; -o &#34;awscliv2.zip&#34;&#xA;unzip awscliv2.zip&#xA;sudo ./aws/install&#xA;sudo yum install -y python3 jq git&#xA;sudo pip3 install detect-secrets==1.0.3&#xA;git clone https://github.com/prowler-cloud/prowler&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For Ubuntu Linux (&lt;code&gt;apt&lt;/code&gt; based Linux distributions and AWS CLI v2):&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo apt update&#xA;sudo apt install python3 python3-pip jq git zip&#xA;pip install detect-secrets==1.0.3&#xA;curl &#34;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip&#34; -o &#34;awscliv2.zip&#34;&#xA;unzip awscliv2.zip&#xA;sudo ./aws/install&#xA;git clone https://github.com/prowler-cloud/prowler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;NOTE: detect-secrets Yelp version is no longer supported, the one from IBM is mantained now. Use the one mentioned below or the specific Yelp version 1.0.3 to make sure it works as expected (&lt;code&gt;pip install detect-secrets==1.0.3&lt;/code&gt;):&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip install &#34;git+https://github.com/ibm/detect-secrets.git@master#egg=detect-secrets&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;AWS-CLI can be also installed it using other methods, refer to official documentation for more details: &lt;a href=&#34;https://aws.amazon.com/cli/&#34;&gt;https://aws.amazon.com/cli/&lt;/a&gt;, but &lt;code&gt;detect-secrets&lt;/code&gt; has to be installed using &lt;code&gt;pip&lt;/code&gt; or &lt;code&gt;pip3&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Once Prowler repository is cloned, get into the folder and you can run it:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd prowler&#xA;./prowler&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Since Prowler users AWS CLI under the hood, you can follow any authentication method as described &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html#cli-configure-quickstart-precedence&#34;&gt;here&lt;/a&gt;. Make sure you have properly configured your AWS-CLI with a valid Access Key and Region or declare AWS variables properly (or instance profile/role):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;aws configure&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export AWS_ACCESS_KEY_ID=&#34;ASXXXXXXX&#34;&#xA;export AWS_SECRET_ACCESS_KEY=&#34;XXXXXXXXX&#34;&#xA;export AWS_SESSION_TOKEN=&#34;XXXXXXXXX&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Those credentials must be associated to a user or role with proper permissions to do all checks. To make sure, add the AWS managed policies, SecurityAudit and ViewOnlyAccess, to the user or role being used. Policy ARNs are:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;arn:aws:iam::aws:policy/SecurityAudit&#xA;arn:aws:iam::aws:policy/job-function/ViewOnlyAccess&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Additional permissions needed: to make sure Prowler can scan all services included in the group &lt;em&gt;Extras&lt;/em&gt;, make sure you attach also the custom policy &lt;a href=&#34;https://github.com/prowler-cloud/prowler/raw/master/iam/prowler-additions-policy.json&#34;&gt;prowler-additions-policy.json&lt;/a&gt; to the role you are using. If you want Prowler to send findings to &lt;a href=&#34;https://aws.amazon.com/security-hub&#34;&gt;AWS Security Hub&lt;/a&gt;, make sure you also attach the custom policy &lt;a href=&#34;https://github.com/prowler-cloud/prowler/raw/master/iam/prowler-security-hub.json&#34;&gt;prowler-security-hub.json&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the &lt;code&gt;prowler&lt;/code&gt; command without options (it will use your environment variable credentials if they exist or will default to using the &lt;code&gt;~/.aws/credentials&lt;/code&gt; file and run checks over all regions when needed. The default region is us-east-1):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Use &lt;code&gt;-l&lt;/code&gt; to list all available checks and the groups (sections) that reference them. To list all groups use &lt;code&gt;-L&lt;/code&gt; and to list content of a group use &lt;code&gt;-l -g &amp;lt;groupname&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you want to avoid installing dependencies run it using Docker:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -ti --rm --name prowler --env AWS_ACCESS_KEY_ID --env AWS_SECRET_ACCESS_KEY --env AWS_SESSION_TOKEN toniblyx/prowler:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In case you want to get reports created by Prowler use docker volume option like in the example below:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -ti --rm -v /your/local/output:/prowler/output --name prowler --env AWS_ACCESS_KEY_ID --env AWS_SECRET_ACCESS_KEY --env AWS_SESSION_TOKEN toniblyx/prowler:latest -g hipaa -M csv,json,html&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For custom AWS-CLI profile and region, use the following: (it will use your custom profile and run checks over all regions when needed):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -p custom-profile -r us-east-1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For a single check use option &lt;code&gt;-c&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -c check310&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;With Docker:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -ti --rm --name prowler --env AWS_ACCESS_KEY_ID --env AWS_SECRET_ACCESS_KEY --env AWS_SESSION_TOKEN toniblyx/prowler:latest &#34;-c check310&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or multiple checks separated by comma:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -c check310,check722&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or all checks but some of them:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -E check42,check43&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or for custom profile and region:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -p custom-profile -r us-east-1 -c check11&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or for a group of checks use group name:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -g group1 # for iam related checks&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or exclude some checks in the group:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -g group4 -E check42,check43&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Valid check numbers are based on the AWS CIS Benchmark guide, so 1.1 is check11 and 3.10 is check310&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Regions&lt;/h3&gt; &#xA;&lt;p&gt;By default, Prowler scans all opt-in regions available, that might take a long execution time depending on the number of resources and regions used. Same applies for GovCloud or China regions. See below Advance usage for examples.&lt;/p&gt; &#xA;&lt;p&gt;Prowler has two parameters related to regions: &lt;code&gt;-r&lt;/code&gt; that is used query AWS services API endpoints (it uses &lt;code&gt;us-east-1&lt;/code&gt; by default and required for GovCloud or China) and the option &lt;code&gt;-f&lt;/code&gt; that is to filter those regions you only want to scan. For example if you want to scan Dublin only use &lt;code&gt;-f eu-west-1&lt;/code&gt; and if you want to scan Dublin and Ohio &lt;code&gt;-f eu-west-1,us-east-1&lt;/code&gt;, note the regions are separated by a comma deliminator (it can be used as before with &lt;code&gt;-f &#39;eu-west-1,us-east-1&#39;&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Sample screenshot of default console report first lines of command &lt;code&gt;./prowler&lt;/code&gt;:&lt;/p&gt; &lt;img width=&#34;900&#34; src=&#34;https://user-images.githubusercontent.com/3985464/141444529-84640bed-be0b-4112-80a2-2a43e3ebf53f.png&#34;&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sample screenshot of the html output &lt;code&gt;-M html&lt;/code&gt;:&lt;/p&gt; &lt;img width=&#34;900&#34; alt=&#34;Prowler html&#34; src=&#34;https://user-images.githubusercontent.com/3985464/141443976-41d32cc2-533d-405a-92cb-affc3995d6ec.png&#34;&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sample screenshot of the Quicksight dashboard, see &lt;a href=&#34;https://quicksight-security-dashboard.workshop.aws/&#34;&gt;quicksight-security-dashboard.workshop.aws&lt;/a&gt;:&lt;/p&gt; &lt;img width=&#34;900&#34; alt=&#34;Prowler with Quicksight&#34; src=&#34;https://user-images.githubusercontent.com/3985464/128932819-0156e838-286d-483c-b953-fda68a325a3d.png&#34;&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sample screenshot of the junit-xml output in CodeBuild &lt;code&gt;-M junit-xml&lt;/code&gt;:&lt;/p&gt; &lt;img width=&#34;900&#34; src=&#34;https://user-images.githubusercontent.com/3985464/113942824-ca382b00-9801-11eb-84e5-d7731548a7a9.png&#34;&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Save your reports&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If you want to save your report for later analysis thare are different ways, natively (supported text, mono, csv, json, json-asff, junit-xml and html, see note below for more info):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -M csv&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or with multiple formats at the same time:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -M csv,json,json-asff,html&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or just a group of checks in multiple formats:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -g gdpr -M csv,json,json-asff&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or if you want a sorted and dynamic HTML report do:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -M html&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now &lt;code&gt;-M&lt;/code&gt; creates a file inside the prowler &lt;code&gt;output&lt;/code&gt; directory named &lt;code&gt;prowler-output-AWSACCOUNTID-YYYYMMDDHHMMSS.format&lt;/code&gt;. You don&#39;t have to specify anything else, no pipes, no redirects.&lt;/p&gt; &lt;p&gt;or just saving the output to a file like below:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -M mono &amp;gt; prowler-report.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To generate JUnit report files, include the junit-xml format. This can be combined with any other format. Files are written inside a prowler root directory named &lt;code&gt;junit-reports&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -M text,junit-xml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Note about output formats to use with &lt;code&gt;-M&lt;/code&gt;: &#34;text&#34; is the default one with colors, &#34;mono&#34; is like default one but monochrome, &#34;csv&#34; is comma separated values, &#34;json&#34; plain basic json (without comma between lines) and &#34;json-asff&#34; is also json with Amazon Security Finding Format that you can ship to Security Hub using &lt;code&gt;-S&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;To save your report in an S3 bucket, use &lt;code&gt;-B&lt;/code&gt; to define a custom output bucket along with &lt;code&gt;-M&lt;/code&gt; to define the output format that is going to be uploaded to S3:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -M csv -B my-bucket/folder/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;In the case you do not want to use the assumed role credentials but the initial credentials to put the reports into the S3 bucket, use &lt;code&gt;-D&lt;/code&gt; instead of &lt;code&gt;-B&lt;/code&gt;. Make sure that the used credentials have s3:PutObject permissions in the S3 path where the reports are going to be uploaded.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;When generating multiple formats and running using Docker, to retrieve the reports, bind a local directory to the container, e.g.:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -ti --rm --name prowler --volume &#34;$(pwd)&#34;:/prowler/output --env AWS_ACCESS_KEY_ID --env AWS_SECRET_ACCESS_KEY --env AWS_SESSION_TOKEN toniblyx/prowler:latest -M csv,json&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To perform an assessment based on CIS Profile Definitions you can use cislevel1 or cislevel2 with &lt;code&gt;-g&lt;/code&gt; flag, more information about this &lt;a href=&#34;https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf&#34;&gt;here, page 8&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -g cislevel1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you want to run Prowler to check multiple AWS accounts in parallel (runs up to 4 simultaneously &lt;code&gt;-P 4&lt;/code&gt;) but you may want to read below in Advanced Usage section to do so assuming a role:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;grep -E &#39;^\[([0-9A-Aa-z_-]+)\]&#39;  ~/.aws/credentials | tr -d &#39;][&#39; | shuf |  \&#xA;xargs -n 1 -L 1 -I @ -r -P 4 ./prowler -p @ -M csv  2&amp;gt; /dev/null  &amp;gt;&amp;gt; all-accounts.csv&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For help about usage run:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./prowler -h&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Advanced Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Assume Role:&lt;/h3&gt; &#xA;&lt;p&gt;Prowler uses the AWS CLI underneath so it uses the same authentication methods. However, there are few ways to run Prowler against multiple accounts using IAM Assume Role feature depending on eachg use case. You can just set up your custom profile inside &lt;code&gt;~/.aws/config&lt;/code&gt; with all needed information about the role to assume then call it with &lt;code&gt;./prowler -p your-custom-profile&lt;/code&gt;. Additionally you can use &lt;code&gt;-A 123456789012&lt;/code&gt; and &lt;code&gt;-R RemoteRoleToAssume&lt;/code&gt; and Prowler will get those temporary credentials using &lt;code&gt;aws sts assume-role&lt;/code&gt;, set them up as environment variables and run against that given account. To create a role to assume in multiple accounts easier eather as CFN Stack or StackSet, look at &lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/iam/create_role_to_assume_cfn.yaml&#34;&gt;this CloudFormation template&lt;/a&gt; and adapt it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -A 123456789012 -R ProwlerRole&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -A 123456789012 -R ProwlerRole -I 123456&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;NOTE 1 about Session Duration&lt;/em&gt;: By default it gets credentials valid for 1 hour (3600 seconds). Depending on the mount of checks you run and the size of your infrastructure, Prowler may require more than 1 hour to finish. Use option &lt;code&gt;-T &amp;lt;seconds&amp;gt;&lt;/code&gt; to allow up to 12h (43200 seconds). To allow more than 1h you need to modify &lt;em&gt;&#34;Maximum CLI/API session duration&#34;&lt;/em&gt; for that particular role, read more &lt;a href=&#34;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;NOTE 2 about Session Duration&lt;/em&gt;: Bear in mind that if you are using roles assumed by role chaining there is a hard limit of 1 hour so consider not using role chaining if possible, read more about that, in foot note 1 below the table &lt;a href=&#34;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For example, if you want to get only the fails in CSV format from all checks regarding RDS without banner from the AWS Account 123456789012 assuming the role RemoteRoleToAssume and set a fixed session duration of 1h:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -A 123456789012 -R RemoteRoleToAssume -T 3600 -b -M cvs -q -g rds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or with a given External ID:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -A 123456789012 -R RemoteRoleToAssume -T 3600 -I 123456 -b -M cvs -q -g rds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Assume Role and across all accounts in AWS Organizations or just a list of accounts:&lt;/h3&gt; &#xA;&lt;p&gt;If you want to run Prowler or just a check or a group across all accounts of AWS Organizations you can do this:&lt;/p&gt; &#xA;&lt;p&gt;First get a list of accounts that are not suspended:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ACCOUNTS_IN_ORGS=$(aws organizations list-accounts --query Accounts[?Status==`ACTIVE`].Id --output text)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run Prowler to assume a role (same in all members) per each account, in this example it is just running one particular check:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;for accountId in $ACCOUNTS_IN_ORGS; do ./prowler -A $accountId -R RemoteRoleToAssume -c extra79; done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using the same for loop it can be scanned a list of accounts with a variable like &lt;code&gt;ACCOUNTS_LIST=&#39;11111111111 2222222222 333333333&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Get AWS Account details from your AWS Organization:&lt;/h3&gt; &#xA;&lt;p&gt;From Prowler v2.8, you can get additional information of the scanned account in CSV and JSON outputs. When scanning a single account you get the Account ID as part of the output. Now, if you have AWS Organizations and are scanning multiple accounts using the assume role functionality, Prowler can get your account details like Account Name, Email, ARN, Organization ID and Tags and you will have them next to every finding in the CSV and JSON outputs. In order to do that you can use the new option &lt;code&gt;-O &amp;lt;management account id&amp;gt;&lt;/code&gt;, requires &lt;code&gt;-R &amp;lt;role to assume&amp;gt;&lt;/code&gt; and also needs permissions &lt;code&gt;organizations:ListAccounts*&lt;/code&gt; and &lt;code&gt;organizations:ListTagsForResource&lt;/code&gt;. See the following sample command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./prowler -R ProwlerScanRole -A 111111111111 -O 222222222222 -M json,csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In that command Prowler will scan the account &lt;code&gt;111111111111&lt;/code&gt; assuming the role &lt;code&gt;ProwlerScanRole&lt;/code&gt; and getting the account details from the AWS Organizatiosn management account &lt;code&gt;222222222222&lt;/code&gt; assuming the same role &lt;code&gt;ProwlerScanRole&lt;/code&gt; for that and creating two reports with those details in JSON and CSV.&lt;/p&gt; &#xA;&lt;p&gt;In the JSON output below (redacted) you can see tags coded in base64 to prevent breaking CSV or JSON due to its format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;  &#34;Account Email&#34;: &#34;my-prod-account@domain.com&#34;,&#xA;  &#34;Account Name&#34;: &#34;my-prod-account&#34;,&#xA;  &#34;Account ARN&#34;: &#34;arn:aws:organizations::222222222222:account/o-abcde1234/111111111111&#34;,&#xA;  &#34;Account Organization&#34;: &#34;o-abcde1234&#34;,&#xA;  &#34;Account tags&#34;: &#34;\&#34;eyJUYWdzIjpasf0=\&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The additional fields in CSV header output are as follow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csv&#34;&gt;ACCOUNT_DETAILS_EMAIL,ACCOUNT_DETAILS_NAME,ACCOUNT_DETAILS_ARN,ACCOUNT_DETAILS_ORG,ACCOUNT_DETAILS_TAGS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GovCloud&lt;/h3&gt; &#xA;&lt;p&gt;Prowler runs in GovCloud regions as well. To make sure it points to the right API endpoint use &lt;code&gt;-r&lt;/code&gt; to either &lt;code&gt;us-gov-west-1&lt;/code&gt; or &lt;code&gt;us-gov-east-1&lt;/code&gt;. If not filter region is used it will look for resources in both GovCloud regions by default:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -r us-gov-west-1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For Security Hub integration see below in Security Hub section.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Custom folder for custom checks&lt;/h3&gt; &#xA;&lt;p&gt;Flag &lt;code&gt;-x /my/own/checks&lt;/code&gt; will include any check in that particular directory (files must start by check). To see how to write checks see &lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#add-custom-checks&#34;&gt;Add Custom Checks&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;S3 URIs are also supported as custom folders for custom checks, e.g. &lt;code&gt;s3://bucket/prefix/checks&lt;/code&gt;. Prowler will download the folder locally and run the checks as they are called with default execution,&lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;-g&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Make sure that the used credentials have s3:GetObject permissions in the S3 path where the custom checks are located.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Show or log only FAILs&lt;/h3&gt; &#xA;&lt;p&gt;In order to remove noise and get only FAIL findings there is a &lt;code&gt;-q&lt;/code&gt; flag that makes Prowler to show and log only FAILs. It can be combined with any other option. Will show WARNINGS when a resource is excluded, just to take into consideration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# -q option combined with -M csv -b&#xA;./prowler -q -M csv -b&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Set the entropy limit for detect-secrets&lt;/h3&gt; &#xA;&lt;p&gt;Sets the entropy limit for high entropy base64 strings from environment variable &lt;code&gt;BASE64_LIMIT&lt;/code&gt;. Value must be between 0.0 and 8.0, defaults is 4.5. Sets the entropy limit for high entropy hex strings from environment variable &lt;code&gt;HEX_LIMIT&lt;/code&gt;. Value must be between 0.0 and 8.0, defaults is 3.0.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export BASE64_LIMIT=4.5&#xA;export HEX_LIMIT=3.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run Prowler using AWS CloudShell&lt;/h3&gt; &#xA;&lt;p&gt;An easy way to run Prowler to scan your account is using AWS CloudShell. Read more and learn how to do it &lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/util/cloudshell/README.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security Hub integration&lt;/h2&gt; &#xA;&lt;p&gt;Since October 30th 2020 (version v2.3RC5), Prowler supports natively and as &lt;strong&gt;official integration&lt;/strong&gt; sending findings to &lt;a href=&#34;https://aws.amazon.com/security-hub&#34;&gt;AWS Security Hub&lt;/a&gt;. This integration allows Prowler to import its findings to AWS Security Hub. With Security Hub, you now have a single place that aggregates, organizes, and prioritizes your security alerts, or findings, from multiple AWS services, such as Amazon GuardDuty, Amazon Inspector, Amazon Macie, AWS Identity and Access Management (IAM) Access Analyzer, and AWS Firewall Manager, as well as from AWS Partner solutions and from Prowler for free.&lt;/p&gt; &#xA;&lt;p&gt;Before sending findings to Prowler, you need to perform next steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Since Security Hub is a region based service, enable it in the region or regions you require. Use the AWS Management Console or using the AWS CLI with this command if you have enough permissions: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws securityhub enable-security-hub --region &amp;lt;region&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Enable Prowler as partner integration integration. Use the AWS Management Console or using the AWS CLI with this command if you have enough permissions: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws securityhub enable-import-findings-for-product --region &amp;lt;region&amp;gt; --product-arn arn:aws:securityhub:&amp;lt;region&amp;gt;::product/prowler/prowler&lt;/code&gt; (change region also inside the ARN).&lt;/li&gt; &#xA;   &lt;li&gt;Using the AWS Management Console: &lt;img src=&#34;https://user-images.githubusercontent.com/3985464/97634660-5ade3400-1a36-11eb-9a92-4a45cc98c158.png&#34; alt=&#34;Screenshot 2020-10-29 at 10 26 02 PM&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;As mentioned in section &#34;Custom IAM Policy&#34;, to allow Prowler to import its findings to AWS Security Hub you need to add the policy below to the role or user running Prowler: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/iam/prowler-security-hub.json&#34;&gt;iam/prowler-security-hub.json&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Once it is enabled, it is as simple as running the command below (for all regions):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -M json-asff -S&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or for only one filtered region like eu-west-1:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -M json-asff -q -S -f eu-west-1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note 1: It is recommended to send only fails to Security Hub and that is possible adding &lt;code&gt;-q&lt;/code&gt; to the command.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note 2: Since Prowler perform checks to all regions by defaults you may need to filter by region when runing Security Hub integration, as shown in the example above. Remember to enable Security Hub in the region or regions you need by calling &lt;code&gt;aws securityhub enable-security-hub --region &amp;lt;region&amp;gt;&lt;/code&gt; and run Prowler with the option &lt;code&gt;-f &amp;lt;region&amp;gt;&lt;/code&gt; (if no region is used it will try to push findings in all regions hubs).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note 3: to have updated findings in Security Hub you have to run Prowler periodically. Once a day or every certain amount of hours.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Once you run findings for first time you will be able to see Prowler findings in Findings section:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3985464/97634676-66c9f600-1a36-11eb-9341-70feb06f6331.png&#34; alt=&#34;Screenshot 2020-10-29 at 10 29 05 PM&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Security Hub in GovCloud regions&lt;/h3&gt; &#xA;&lt;p&gt;To use Prowler and Security Hub integration in GovCloud there is an additional requirement, usage of &lt;code&gt;-r&lt;/code&gt; is needed to point the API queries to the right API endpoint. Here is a sample command that sends only failed findings to Security Hub in region &lt;code&gt;us-gov-west-1&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./prowler -r us-gov-west-1 -f us-gov-west-1 -S -M csv,json-asff -q&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Security Hub in China regions&lt;/h3&gt; &#xA;&lt;p&gt;To use Prowler and Security Hub integration in China regions there is an additional requirement, usage of &lt;code&gt;-r&lt;/code&gt; is needed to point the API queries to the right API endpoint. Here is a sample command that sends only failed findings to Security Hub in region &lt;code&gt;cn-north-1&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./prowler -r cn-north-1 -f cn-north-1 -q -S -M csv,json-asff&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;CodeBuild deployment&lt;/h2&gt; &#xA;&lt;p&gt;Either to run Prowler once or based on a schedule this template makes it pretty straight forward. This template will create a CodeBuild environment and run Prowler directly leaving all reports in a bucket and creating a report also inside CodeBuild basedon the JUnit output from Prowler. Scheduling can be cron based like &lt;code&gt;cron(0 22 * * ? *)&lt;/code&gt; or rate based like &lt;code&gt;rate(5 hours)&lt;/code&gt; since CloudWatch Event rules (or Eventbridge) is used here.&lt;/p&gt; &#xA;&lt;p&gt;The Cloud Formation template that helps you doing that is &lt;a href=&#34;https://github.com/prowler-cloud/prowler/raw/master/util/codebuild/codebuild-prowler-audit-account-cfn.yaml&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is a simple solution to monitor one account. For multiples accounts see &lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/util/org-multi-account/README.md&#34;&gt;Multi Account and Continuous Monitoring&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Allowlist or remove a fail from resources&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes you may find resources that are intentionally configured in a certain way that may be a bad practice but it is all right with it, for example an S3 bucket open to the internet hosting a web site, or a security group with an open port needed in your use case. Now you can use &lt;code&gt;-w allowlist_sample.txt&lt;/code&gt; and add your resources as &lt;code&gt;checkID:resourcename&lt;/code&gt; as in this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./prowler -w allowlist_sample.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;S3 URIs are also supported as allowlist file, e.g. &lt;code&gt;s3://bucket/prefix/allowlist_sample.txt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Make sure that the used credentials have s3:GetObject permissions in the S3 path where the allowlist file is located.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;DynamoDB table ARNs are also supported as allowlist file, e.g. &lt;code&gt;arn:aws:dynamodb:us-east-1:111111222222:table/allowlist&lt;/code&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Make sure that the table has &lt;code&gt;account_id&lt;/code&gt; as partition key and &lt;code&gt;rule&lt;/code&gt; as sort key, and that the used credentials have &lt;code&gt;dynamodb:PartiQLSelect&lt;/code&gt; permissions in the table.&lt;/p&gt; &#xA; &lt;p align=&#34;left&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/38561120/165769502-296f9075-7cc8-445e-8158-4b21804bfe7e.png&#34; alt=&#34;image&#34; width=&#34;397&#34; height=&#34;252&#34;&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The field &lt;code&gt;account_id&lt;/code&gt; can contains either an account ID or an &lt;code&gt;*&lt;/code&gt; (which applies to all the accounts that use this table as a whitelist). As in the traditional allowlist file, the &lt;code&gt;rule&lt;/code&gt; field must contain &lt;code&gt;checkID:resourcename&lt;/code&gt; pattern.&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/38561120/165770610-ed5c2764-7538-44c2-9195-bcfdecc4ef9b.png&#34; alt=&#34;image&#34; width=&#34;394&#34;&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Allowlist option works along with other options and adds a &lt;code&gt;WARNING&lt;/code&gt; instead of &lt;code&gt;INFO&lt;/code&gt;, &lt;code&gt;PASS&lt;/code&gt; or &lt;code&gt;FAIL&lt;/code&gt; to any output format except for &lt;code&gt;json-asff&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to fix every FAIL&lt;/h2&gt; &#xA;&lt;p&gt;Check your report and fix the issues following all specific guidelines per check in &lt;a href=&#34;https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf&#34;&gt;https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;STS expired token&lt;/h3&gt; &#xA;&lt;p&gt;If you are using an STS token for AWS-CLI and your session is expired you probably get this error:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;A client error (ExpiredToken) occurred when calling the GenerateCredentialReport operation: The security token included in the request is expired&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To fix it, please renew your token by authenticating again to the AWS API, see next section below if you use MFA.&lt;/p&gt; &#xA;&lt;h3&gt;Run Prowler with MFA protected credentials&lt;/h3&gt; &#xA;&lt;p&gt;To run Prowler using a profile that requires MFA you just need to get the session token before hand. Just make sure you use this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;aws --profile &amp;lt;YOUR_AWS_PROFILE&amp;gt; sts get-session-token --duration 129600 --serial-number &amp;lt;ARN_OF_MFA&amp;gt; --token-code &amp;lt;MFA_TOKEN_CODE&amp;gt; --output text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you get your token you can export it as environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export AWS_PROFILE=YOUR_AWS_PROFILE&#xA;export AWS_SESSION_TOKEN=YOUR_NEW_TOKEN&#xA;AWS_SECRET_ACCESS_KEY=YOUR_SECRET&#xA;export AWS_ACCESS_KEY_ID=YOUR_KEY&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or set manually up your &lt;code&gt;~/.aws/credentials&lt;/code&gt; file properly.&lt;/p&gt; &#xA;&lt;p&gt;There are some helpfull tools to save time in this process like &lt;a href=&#34;https://github.com/asagage/aws-mfa-script&#34;&gt;aws-mfa-script&lt;/a&gt; or &lt;a href=&#34;https://github.com/sweharris/aws-cli-mfa&#34;&gt;aws-cli-mfa&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;AWS Managed IAM Policies&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_job-functions.html#jf_view-only-user&#34;&gt;ViewOnlyAccess&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use case: This user can view a list of AWS resources and basic metadata in the account across all services. The user cannot read resource content or metadata that goes beyond the quota and list information for resources.&lt;/li&gt; &#xA; &lt;li&gt;Policy description: This policy grants List*, Describe*, Get*, View*, and Lookup* access to resources for most AWS services. To see what actions this policy includes for each service, see &lt;a href=&#34;https://console.aws.amazon.com/iam/home#policies/arn:aws:iam::aws:policy/job-function/ViewOnlyAccess&#34;&gt;ViewOnlyAccess Permissions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_job-functions.html#jf_security-auditor&#34;&gt;SecurityAudit&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use case: This user monitors accounts for compliance with security requirements. This user can access logs and events to investigate potential security breaches or potential malicious activity.&lt;/li&gt; &#xA; &lt;li&gt;Policy description: This policy grants permissions to view configuration data for many AWS services and to review their logs. To see what actions this policy includes for each service, see &lt;a href=&#34;https://console.aws.amazon.com/iam/home#policies/arn:aws:iam::aws:policy/SecurityAudit&#34;&gt;SecurityAudit Permissions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Custom IAM Policy&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/iam/prowler-additions-policy.json&#34;&gt;Prowler-Additions-Policy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Some new and specific checks require Prowler to inherit more permissions than SecurityAudit and ViewOnlyAccess to work properly. In addition to the AWS managed policies, &#34;SecurityAudit&#34; and &#34;ViewOnlyAccess&#34;, the user/role you use for checks may need to be granted a custom policy with a few more read-only permissions (to support additional services mostly). Here is an example policy with the additional rights, &#34;Prowler-Additions-Policy&#34; (see below bootstrap script for set it up):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/iam/prowler-additions-policy.json&#34;&gt;iam/prowler-additions-policy.json&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/iam/prowler-security-hub.json&#34;&gt;Prowler-Security-Hub Policy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Allows Prowler to import its findings to &lt;a href=&#34;https://aws.amazon.com/security-hub&#34;&gt;AWS Security Hub&lt;/a&gt;. More information in &lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/#security-hub-integration&#34;&gt;Security Hub integration&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/iam/prowler-security-hub.json&#34;&gt;iam/prowler-security-hub.json&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Bootstrap Script&lt;/h3&gt; &#xA;&lt;p&gt;Quick bash script to set up a &#34;prowler&#34; IAM user with &#34;SecurityAudit&#34; and &#34;ViewOnlyAccess&#34; group with the required permissions (including &#34;Prowler-Additions-Policy&#34;). To run the script below, you need user with administrative permissions; set the &lt;code&gt;AWS_DEFAULT_PROFILE&lt;/code&gt; to use that account:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export AWS_DEFAULT_PROFILE=default&#xA;export ACCOUNT_ID=$(aws sts get-caller-identity --query &#39;Account&#39; | tr -d &#39;&#34;&#39;)&#xA;aws iam create-group --group-name Prowler&#xA;aws iam create-policy --policy-name Prowler-Additions-Policy --policy-document file://$(pwd)/iam/prowler-additions-policy.json&#xA;aws iam attach-group-policy --group-name Prowler --policy-arn arn:aws:iam::aws:policy/SecurityAudit&#xA;aws iam attach-group-policy --group-name Prowler --policy-arn arn:aws:iam::aws:policy/job-function/ViewOnlyAccess&#xA;aws iam attach-group-policy --group-name Prowler --policy-arn arn:aws:iam::${ACCOUNT_ID}:policy/Prowler-Additions-Policy&#xA;aws iam create-user --user-name prowler&#xA;aws iam add-user-to-group --user-name prowler --group-name Prowler&#xA;aws iam create-access-key --user-name prowler&#xA;unset ACCOUNT_ID AWS_DEFAULT_PROFILE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;aws iam create-access-key&lt;/code&gt; command will output the secret access key and the key id; keep these somewhere safe, and add them to &lt;code&gt;~/.aws/credentials&lt;/code&gt; with an appropriate profile name to use them with Prowler. This is the only time they secret key will be shown. If you lose it, you will need to generate a replacement.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/iam/create_role_to_assume_cfn.yaml&#34;&gt;This CloudFormation template&lt;/a&gt; may also help you on that task.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Extras&lt;/h2&gt; &#xA;&lt;p&gt;We are adding additional checks to improve the information gather from each account, these checks are out of the scope of the CIS benchmark for AWS, but we consider them very helpful to get to know each AWS account set up and find issues on it.&lt;/p&gt; &#xA;&lt;p&gt;Some of these checks look for publicly facing resources may not actually be fully public due to other layered controls like S3 Bucket Policies, Security Groups or Network ACLs.&lt;/p&gt; &#xA;&lt;p&gt;To list all existing checks in the extras group run the command below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -l -g extras&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;There are some checks not included in that list, they are experimental or checks that takes long to run like &lt;code&gt;extra759&lt;/code&gt; and &lt;code&gt;extra760&lt;/code&gt; (search for secrets in Lambda function variables and code).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To check all extras in one command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -g extras&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or to run just one of the checks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -c extraNUMBER&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or to run multiple extras in one go:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -c extraNumber,extraNumber&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Forensics Ready Checks&lt;/h2&gt; &#xA;&lt;p&gt;With this group of checks, Prowler looks if each service with logging or audit capabilities has them enabled to ensure all needed evidences are recorded and collected for an eventual digital forensic investigation in case of incident. List of checks part of this group (you can also see all groups with &lt;code&gt;./prowler -L&lt;/code&gt;). The list of checks can be seen in the group file at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/groups/group8_forensics&#34;&gt;groups/group8_forensics&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;forensics-ready&lt;/code&gt; group of checks uses existing and extra checks. To get a forensics readiness report, run this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -g forensics-ready&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;GDPR Checks&lt;/h2&gt; &#xA;&lt;p&gt;With this group of checks, Prowler shows result of checks related to GDPR, more information &lt;a href=&#34;https://github.com/prowler-cloud/prowler/issues/189&#34;&gt;here&lt;/a&gt;. The list of checks can be seen in the group file at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/groups/group9_gdpr&#34;&gt;groups/group9_gdpr&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;gdpr&lt;/code&gt; group of checks uses existing and extra checks. To get a GDPR report, run this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -g gdpr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;AWS FTR Checks&lt;/h2&gt; &#xA;&lt;p&gt;With this group of checks, Prowler shows result of checks related to the AWS Foundational Technical Review, more information &lt;a href=&#34;https://apn-checklists.s3.amazonaws.com/foundational/partner-hosted/partner-hosted/CVLHEC5X7.html&#34;&gt;here&lt;/a&gt;. The list of checks can be seen in the group file at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/groups/group25_FTR&#34;&gt;groups/group25_ftr&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;ftr&lt;/code&gt; group of checks uses existing and extra checks. To get a AWS FTR report, run this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -g ftr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;HIPAA Checks&lt;/h2&gt; &#xA;&lt;p&gt;With this group of checks, Prowler shows results of controls related to the &#34;Security Rule&#34; of the Health Insurance Portability and Accountability Act aka &lt;a href=&#34;https://www.hhs.gov/hipaa/for-professionals/security/index.html&#34;&gt;HIPAA&lt;/a&gt; as defined in &lt;a href=&#34;https://www.law.cornell.edu/cfr/text/45/part-164/subpart-C&#34;&gt;45 CFR Subpart C - Security Standards for the Protection of Electronic Protected Health Information&lt;/a&gt; within &lt;a href=&#34;https://www.law.cornell.edu/cfr/text/45/part-160&#34;&gt;PART 160 - GENERAL ADMINISTRATIVE REQUIREMENTS&lt;/a&gt; and &lt;a href=&#34;https://www.law.cornell.edu/cfr/text/45/part-164/subpart-A&#34;&gt;Subpart A&lt;/a&gt; and &lt;a href=&#34;https://www.law.cornell.edu/cfr/text/45/part-164/subpart-C&#34;&gt;Subpart C&lt;/a&gt; of PART 164 - SECURITY AND PRIVACY&lt;/p&gt; &#xA;&lt;p&gt;More information on the original PR is &lt;a href=&#34;https://github.com/prowler-cloud/prowler/issues/227&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Note on Business Associate Addendum&#39;s (BAA)&lt;/h3&gt; &#xA;&lt;p&gt;Under the HIPAA regulations, cloud service providers (CSPs) such as AWS are considered business associates. The Business Associate Addendum (BAA) is an AWS contract that is required under HIPAA rules to ensure that AWS appropriately safeguards protected health information (PHI). The BAA also serves to clarify and limit, as appropriate, the permissible uses and disclosures of PHI by AWS, based on the relationship between AWS and our customers, and the activities or services being performed by AWS. Customers may use any AWS service in an account designated as a HIPAA account, but they should only process, store, and transmit protected health information (PHI) in the HIPAA-eligible services defined in the Business Associate Addendum (BAA). For the latest list of HIPAA-eligible AWS services, see &lt;a href=&#34;https://aws.amazon.com/compliance/hipaa-eligible-services-reference/&#34;&gt;HIPAA Eligible Services Reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;More information on AWS &amp;amp; HIPAA can be found &lt;a href=&#34;https://aws.amazon.com/compliance/hipaa-compliance/&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The list of checks showed by this group is as follows, they will be mostly relevant for Subsections &lt;a href=&#34;https://www.law.cornell.edu/cfr/text/45/164.306&#34;&gt;164.306 Security standards: General rules&lt;/a&gt; and &lt;a href=&#34;https://www.law.cornell.edu/cfr/text/45/164.312&#34;&gt;164.312 Technical safeguards&lt;/a&gt;. Prowler is only able to make checks in the spirit of the technical requirements outlined in these Subsections, and cannot cover all procedural controls required. They be found in the group file at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/groups/group10_hipaa&#34;&gt;groups/group10_hipaa&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;hipaa&lt;/code&gt; group of checks uses existing and extra checks. To get a HIPAA report, run this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -g hipaa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Trust Boundaries Checks&lt;/h2&gt; &#xA;&lt;h3&gt;Definition and Terms&lt;/h3&gt; &#xA;&lt;p&gt;The term &#34;trust boundary&#34; is originating from the threat modelling process and the most popular contributor Adam Shostack and author of &#34;Threat Modeling: Designing for Security&#34; defines it as following (&lt;a href=&#34;https://adam.shostack.org/uncover.html&#34;&gt;reference&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Trust boundaries are perhaps the most subjective of all: these represent the border between trusted and untrusted elements. Trust is complex. You might trust your mechanic with your car, your dentist with your teeth, and your banker with your money, but you probably don&#39;t trust your dentist to change your spark plugs.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;AWS is made to be flexible for service links within and between different AWS accounts, we all know that.&lt;/p&gt; &#xA;&lt;p&gt;This group of checks helps to analyse a particular AWS account (subject) on existing links to other AWS accounts across various AWS services, in order to identify untrusted links.&lt;/p&gt; &#xA;&lt;h3&gt;Run&lt;/h3&gt; &#xA;&lt;p&gt;To give it a quick shot just call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -g trustboundaries&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Scenarios&lt;/h3&gt; &#xA;&lt;p&gt;Currently, this check group supports two different scenarios:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Single account environment: no action required, the configuration is happening automatically for you.&lt;/li&gt; &#xA; &lt;li&gt;Multi account environment: in case you environment has multiple trusted and known AWS accounts you maybe want to append them manually to &lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/groups/group16_trustboundaries&#34;&gt;groups/group16_trustboundaries&lt;/a&gt; as a space separated list into &lt;code&gt;GROUP_TRUSTBOUNDARIES_TRUSTED_ACCOUNT_IDS&lt;/code&gt; variable, then just run prowler.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Coverage&lt;/h3&gt; &#xA;&lt;p&gt;Current coverage of Amazon Web Service (AWS) taken from &lt;a href=&#34;https://docs.aws.amazon.com/whitepapers/latest/aws-overview/introduction.html&#34;&gt;here&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Topic&lt;/th&gt; &#xA;   &lt;th&gt;Service&lt;/th&gt; &#xA;   &lt;th&gt;Trust Boundary&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Networking and Content Delivery&lt;/td&gt; &#xA;   &lt;td&gt;Amazon VPC&lt;/td&gt; &#xA;   &lt;td&gt;VPC endpoints connections (&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/checks/check_extra786&#34;&gt;extra786&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;VPC endpoints allowlisted principals (&lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/checks/check_extra787&#34;&gt;extra787&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;All ideas or recommendations to extend this group are very welcome &lt;a href=&#34;https://github.com/prowler-cloud/prowler/issues/new/choose&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Detailed Explanation of the Concept&lt;/h3&gt; &#xA;&lt;p&gt;The diagrams depict two common scenarios, single account and multi account environments. Every circle represents one AWS account. The dashed line represents the trust boundary, that separates trust and untrusted AWS accounts. The arrow simply describes the direction of the trust, however the data can potentially flow in both directions.&lt;/p&gt; &#xA;&lt;p&gt;Single Account environment assumes that only the AWS account subject to this analysis is trusted. However, there is a chance that two VPCs are existing within that one AWS account which are still trusted as a self reference. &lt;img src=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/docs/images/prowler-single-account-environment.png&#34; alt=&#34;single-account-environment&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Multi Account environments assumes a minimum of two trusted or known accounts. For this particular example all trusted and known accounts will be tested. Therefore &lt;code&gt;GROUP_TRUSTBOUNDARIES_TRUSTED_ACCOUNT_IDS&lt;/code&gt; variable in &lt;a href=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/groups/group16_trustboundaries&#34;&gt;groups/group16_trustboundaries&lt;/a&gt; should include all trusted accounts Account #A, Account #B, Account #C, and Account #D in order to finally raise Account #E and Account #F for being untrusted or unknown. &lt;img src=&#34;https://raw.githubusercontent.com/prowler-cloud/prowler/master/docs/images/prowler-multi-account-environment.png&#34; alt=&#34;multi-account-environment&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Custom Checks&lt;/h2&gt; &#xA;&lt;p&gt;Using &lt;code&gt;./prowler -c extra9999 -a&lt;/code&gt; you can build your own on-the-fly custom check by specifying the AWS CLI command to execute.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Omit the &#34;aws&#34; command and only use its parameters within quotes and do not nest quotes in the aws parameter, --output text is already included in the check.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Here is an example of a check to find SGs with inbound port 80:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./prowler -c extra9999 -a &#39;ec2 describe-security-groups --filters Name=ip-permission.to-port,Values=80 --query SecurityGroups[*].GroupId[]]&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to add any new check feel free to create a new extra check in the extras group or other group. To do so, you will need to follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Follow structure in file &lt;code&gt;checks/check_sample&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Name your check with a number part of an existing group or a new one&lt;/li&gt; &#xA; &lt;li&gt;Save changes and run it as &lt;code&gt;./prowler -c extraNN&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Send me a pull request! :)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Add Custom Groups&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Follow structure in file &lt;code&gt;groups/groupN_sample&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Name your group with a non existing number&lt;/li&gt; &#xA; &lt;li&gt;Save changes and run it as &lt;code&gt;./prowler -g extraNN&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Send me a pull request! :)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can also create a group with only the checks that you want to perform in your company, for instance a group named &lt;code&gt;group9_mycompany&lt;/code&gt; with only the list of checks that you care or your particular compliance applies.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Third Party Integrations&lt;/h2&gt; &#xA;&lt;h3&gt;Telegram&lt;/h3&gt; &#xA;&lt;p&gt;Javier Pecete has done an awesome job integrating Prowler with Telegram, you have more details here &lt;a href=&#34;https://github.com/i4specete/ServerTelegramBot&#34;&gt;https://github.com/i4specete/ServerTelegramBot&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Cloud Security Suite&lt;/h3&gt; &#xA;&lt;p&gt;The guys of SecurityFTW have added Prowler in their Cloud Security Suite along with other cool security tools &lt;a href=&#34;https://github.com/SecurityFTW/cs-suite&#34;&gt;https://github.com/SecurityFTW/cs-suite&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Prowler is licensed as Apache License 2.0 as specified in each file. You may obtain a copy of the License at &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;I&#39;m not related anyhow with CIS organization, I just write and maintain Prowler to help companies over the world to make their cloud infrastructure more secure.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to contact me visit &lt;a href=&#34;https://blyx.com/contact&#34;&gt;https://blyx.com/contact&lt;/a&gt; or follow me on Twitter &lt;a href=&#34;https://twitter.com/prowler-cloud&#34;&gt;https://twitter.com/prowler-cloud&lt;/a&gt; my DMs are open.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>walidshaari/Kubernetes-Certified-Administrator</title>
    <updated>2022-05-29T01:54:10Z</updated>
    <id>tag:github.com,2022-05-29:/walidshaari/Kubernetes-Certified-Administrator</id>
    <link href="https://github.com/walidshaari/Kubernetes-Certified-Administrator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Online resources that will help you prepare for taking the CNCF CKA 2020 &#34;Kubernetes Certified Administrator&#34; Certification exam. with time, This is not likely the comprehensive up to date list - please make a pull request if there something that should be added here.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;&lt;img src=&#34;https://licensebuttons.net/l/by-sa/4.0/80x15.png&#34; alt=&#34;License: CC BY-SA 4.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://makeapullrequest.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Kubernetes Certified Administration&lt;/h1&gt; &#xA;&lt;p&gt;Online resources that will help you prepare for taking the Kubernetes Certified Administrator Certification exam.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: This is not likely a comprehensive list as the exam will be a moving target with the fast pace of k8s development - please make a pull request if there something wrong, should be added, or updated.&lt;/p&gt; &#xA;&lt;p&gt;I tried to restrict the cross references of resources to &lt;a href=&#34;https://raw.githubusercontent.com/walidshaari/Kubernetes-Certified-Administrator/main/kubernetes.io&#34;&gt;kubernetes.io&lt;/a&gt;. Youtube videos and other blog resources are optional; however, I still found them useful in my k8s learning journey.&lt;/p&gt; &#xA;&lt;p&gt;Ensure you have the right version of Kubernetes documentation selected (e.g. v1.21 as of June 2021 exam) especially for API objects and annotations.&lt;/p&gt; &#xA;&lt;p&gt;LDR: &lt;strong&gt;practice&lt;/strong&gt; &lt;strong&gt;practice&lt;/strong&gt; &lt;strong&gt;practice&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Other CK exams:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/walidshaari/Certified-Kubernetes-Secuirty-Specialist&#34;&gt;Certified Kubernetes Security Specialist CKS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dgkanatsios/CKAD-exercises&#34;&gt;Certified Kubernetes Application Developer CKAD&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;CKA 2021 Exam Objectives&lt;/h2&gt; &#xA;&lt;p&gt;These are the exam objectives you review and understand in order to pass the test.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cncf/curriculum&#34;&gt;CNCF Exam Curriculum repository &lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://youtu.be/vS-wXo2qbPs&#34;&gt; Cluster Architecture, Installation, and Configuration&lt;/a&gt; 25%&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/reference/access-authn-authz/rbac/&#34;&gt;Manage role based access control&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://medium.com/@HoussemDellai/rbac-with-kubernetes-in-minikube-4deed658ea7b&#34;&gt;Lab: RBAC with Kubernetes in Minikube&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/&#34;&gt;Use kubeadm to install a basic cluster&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://phoenixnap.com/kb/install-kubernetes-on-ubuntu&#34;&gt;Lab: Install Kubernetes On Ubuntu&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/&#34;&gt;Manage a highly available Kubernetes cluster&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/ha-topology/&#34;&gt;Options for Highly Available topology&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.weave.works/blog/running-highly-available-clusters-with-kubeadm&#34;&gt;Weaveworks Kubeadm HA cluster&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/&#34;&gt;Provision underlying infrastructure to deploy Kubernetes cluster&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-upgrade/&#34;&gt;Peform a version upgrade on Kubernetes cluster using kubeadm&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/#backing-up-an-etcd-cluster&#34;&gt;implment etcd backup and restore&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://youtu.be/DhsFfNSIrQ4&#34;&gt;Kubecon Europe 2020: Kubeadm deep dive&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; sample commands used during backup/restore/update of nodes &lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;pre&gt;&lt;code&gt;#etcd backup and restore brief&#xA;export ETCDCTL_API=3  # needed to specify etcd api versions, not sure if it is needed anylonger with k8s 1.19+ &#xA;etcdctl snapshot save -h   #find save options&#xA;etcdctl snapshot restore -h  #find restore options&#xA;&#xA;## possible example of save, options will change depending on cluster context, as TLS is used need to give ca,crt, and key paths&#xA;etcdctl snapshot save /backup/snapshot.db  --cert=/etc/kubernetes/pki/etcd/server.crt  --key=/etc/kubernetes/pki/etcd/server.key --      cacert=/etc/kubernetes/pki/etcd/ca.crt&#xA;&#xA;&#xA;# evicting pods/nodes and bringing back node back to cluster&#xA;kubectl drain  &amp;lt;node&amp;gt;# to drain a node&#xA;kubectl uncordon  &amp;lt;node&amp;gt; # to return a node after updates back to the cluster from unscheduled state to Ready&#xA;kubectl cordon  &amp;lt;node&amp;gt;   # to not schedule new pods on a node&#xA;&#xA;#backup/restore the cluster (e.g. the state of the cluster in etcd)&#xA;&#xA;&#xA;# upgrade kubernetes worker node&#xA;kubectl drain &amp;lt;node&amp;gt;&#xA;apt-get upgrade -y kubeadm=&amp;lt;k8s-version-to-upgrade&amp;gt;&#xA;apt-get upgrade -y kubelet=&amp;lt;k8s-version-to-upgrade&amp;gt;&#xA;kubeadm upgrade node config --kubelet-version &amp;lt;k8s-version-to-upgrade&amp;gt;&#xA;systemctl restart kubelet&#xA;kubectl uncordon &amp;lt;node&amp;gt;&#xA;&#xA;&#xA;#kubeadm upgrade steps&#xA;kubeadm upgrade plan&#xA;kubeadm upgrade apply&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Workloads &amp;amp; Scheduling – 15%&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/deployment/&#34;&gt;Understand deployments and how to perform rolling update and rollbacks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/configmap/&#34;&gt;ConfigMaps&lt;/a&gt; and &lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/secret/&#34;&gt;Secrets&lt;/a&gt; to configure applications&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/&#34;&gt;configure a pod with a configmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/&#34;&gt;configure a pod with a secret&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Know how to &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#scaling-a-deployment&#34;&gt;scale applications&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/tasks/run-application/scale-stateful-set/&#34;&gt;scaling a statefulset&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/#scaling-a-replicaset&#34;&gt;scaling a replicaset&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Understand the primitives used to create robust, self-healing, application deployments&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/&#34;&gt;Replicaset&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/deployment/&#34;&gt;Deployments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/&#34;&gt;Statefulsets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/&#34;&gt;Daemonset&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Understand &lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#how-pods-with-resource-requests-are-scheduled&#34;&gt;how resource limits can affect Pod scheduling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Awareness of manifest management and common templating tools&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/tasks/manage-kubernetes-objects/kustomization/&#34;&gt;Kustomize&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kubernetes.io/blog/2018/05/29/introducing-kustomize-template-free-configuration-customization-for-kubernetes/&#34;&gt;Kustomize Blog&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/tasks/manage-kubernetes-objects/&#34;&gt;manage kubernetes objects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/tasks/service-catalog/install-service-catalog-using-helm/&#34;&gt;Install service catalog using helm&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Non-k8s.io resource: CNCF Kubecon video: &lt;a href=&#34;https://youtu.be/x2w6T0sE50w?list=PLj6h78yzYM2O1wlsM-Ma-RYhfT5LKq0XC&#34;&gt;An introduction to Helm - Bridget Kromhout, Microsoft &amp;amp; Marc Khouzam, City of Montreal&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Non-k8s.io resource: External resource: &lt;a href=&#34;https://learnk8s.io/templating-yaml-with-code&#34;&gt;templating-yaml-with-code&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Services &amp;amp; Networking – 20%&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Understand &lt;a href=&#34;https://kubernetes.io/docs/concepts/cluster-administration/networking/&#34;&gt;host networking configuration on the cluster nodes&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Understand connectivity between Pods&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/pods/#pod-networking&#34;&gt;The concept of Pods networking&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Understand ClusterIP, NodePort, LoadBalancer service types and endpoints&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/service/&#34;&gt;service&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Know how to use &lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/&#34;&gt;Ingress controllers&lt;/a&gt; and &lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/ingress/#the-ingress-resource&#34;&gt;Ingress resources&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/walidshaari/Kubernetes-Certified-Administrator/main/(https://kubernetes.io/docs/concepts/services-networking/ingress/)&#34;&gt;Ingress concepts&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/tasks/administer-cluster/dns-custom-nameservers/&#34;&gt;Know how to configure and use CoreDNS&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#pod-network&#34;&gt;Choose an appropriate container network interface plugin&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://youtu.be/tq9ng_Nz9j8&#34;&gt;Kubernetes Networking Intro and Deep-Dive - Bowei Du &amp;amp; Tim Hockin, Google&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://youtu.be/xB190-yyJnY?t=241&#34;&gt;Kubernetes and Networks: why is this so dang hard?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://youtu.be/InZVNuKY5GY?list=PLj6h78yzYM2O1wlsM-Ma-RYhfT5LKq0XC&#34;&gt;Kubecon Eu 2020 Tutorial: Communication Is Key - Understanding Kubernetes Networking - Jeff Poole, Vivint Smart Home&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Storage – 10%&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Understand &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/storage-classes/&#34;&gt;storage classes&lt;/a&gt;, &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/persistent-volumes/&#34;&gt;persistent volumes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Understand &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/persistent-volumes/#volume-mode&#34;&gt;volume mode&lt;/a&gt;, &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes&#34;&gt;access modes&lt;/a&gt; and &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/persistent-volumes/#reclaim-policy&#34;&gt;reclaim policies&lt;/a&gt; for volumes&lt;/li&gt; &#xA; &lt;li&gt;Understand &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims&#34;&gt;persistent volume claims&lt;/a&gt; primitive&lt;/li&gt; &#xA; &lt;li&gt;Know how to &lt;a href=&#34;https://kubernetes.io/docs/tasks/configure-pod-container/configure-volume-storage/&#34;&gt;configure applications with persistent storage&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; StorageClass, PersistentVolume, and PersitentVolumeClaim examples &lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;pre&gt;&lt;code&gt;#### Storage Class example&#xA;#&#xA;&#xA;#### Persistent Volume Claim example&#xA;#&#xA;kind: PersistentVolumeClaim&#xA;apiVersion: v1&#xA;metadata:&#xA;  name: local-pvc&#xA;spec:&#xA;  accessModes:&#xA;  - ReadWriteOnce&#xA;  storageClassName: local-storage-sc&#xA;  resources:&#xA;    requests:&#xA;      storage: 100Mi&#xA;&#xA;## Persistent Volume example&#xA;#&#xA;apiVersion: v1&#xA;kind: PersistentVolume&#xA;metadata:&#xA;  name: local-pv&#xA;spec:&#xA;  accessModes:&#xA;  - ReadWriteOnce&#xA;  capacity:&#xA;    storage: 200Mi&#xA;  local:&#xA;    path: /data/pv/disk021&#xA;  persistentVolumeReclaimPolicy: Retain&#xA;  storageClassName: local-storage-sc&#xA;  volumeMode: Filesystem&#xA;&#xA;###  Pod using the pvc&#xA;#&#xA;apiVersion: v1&#xA;kind: Pod&#xA;metadata:&#xA;  name: nginx&#xA;  labels:&#xA;    name: nginx&#xA;spec:&#xA;  containers:&#xA;  - name: nginx&#xA;    image: nginx&#xA;    volumeMounts:&#xA;      - name: local-persistent-storage&#xA;        mountPath: /var/www/html&#xA;  volumes:&#xA;    - name: local-persistent-storage&#xA;      persistentVolumeClaim:&#xA;        claimName: local-pvc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Troubleshooting – 30%&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/cluster-administration/logging/&#34;&gt;Evaluate cluster and node logging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/tasks/debug-application-cluster/resource-usage-monitoring/&#34;&gt;Understand how to monitor applications&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/cluster-administration/logging/#logging-at-the-node-level&#34;&gt;Manage container stdout &amp;amp; stderr logs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/tasks/debug-application-cluster/debug-application/&#34;&gt;Troubleshoot application failure&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#troubleshooting&#34;&gt;Pending or termintated pods&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/tasks/debug-application-cluster/debug-cluster/&#34;&gt;Troubleshoot cluster component failure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/tasks/debug-application-cluster/debug-cluster/&#34;&gt;Troubleshoot networking&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/tasks/administer-cluster/dns-debugging-resolution/&#34;&gt;DNS troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Tips:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;practice&lt;/strong&gt; &lt;strong&gt;practice&lt;/strong&gt; &lt;strong&gt;practice&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Get familiar with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Familiarize yourself with the documentation, initially &lt;a href=&#34;https://kubernetes.io/docs/concepts/&#34;&gt;concepts&lt;/a&gt; and mostly &lt;a href=&#34;https://kubernetes.io/docs/tasks/&#34;&gt;tasks&lt;/a&gt;, &lt;strong&gt;kubectl explain&lt;/strong&gt; command, &lt;a href=&#34;https://kubernetes.io/docs/user-guide/kubectl-cheatsheet/&#34;&gt;kubectl cheatsheet&lt;/a&gt;, and &lt;a href=&#34;https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands&#34;&gt;kubectl commands reference&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/&#34;&gt;https://kubernetes.io/docs/concepts/&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/tasks/&#34;&gt;https://kubernetes.io/docs/tasks/&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/user-guide/kubectl-cheatsheet/&#34;&gt;https://kubernetes.io/docs/user-guide/kubectl-cheatsheet/&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands&#34;&gt;https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;kubectl api-versions&lt;/code&gt; and &lt;code&gt;kubectl api-resources&lt;/code&gt; wih &lt;code&gt;grep&lt;/code&gt; for a specific resoruce e.g. pv, pvc, deployment, storageclass, ..etc can help figure out the &lt;strong&gt;apiVersion&lt;/strong&gt;, and &lt;strong&gt;kind&lt;/strong&gt; combined with explain below will help in constructing the yaml manifest&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://blog.heptio.com/kubectl-explain-heptioprotip-ee883992a243&#34;&gt;kubectl explain --recurisve&lt;/a&gt; to construct out any yaml manifest you need and find its specd and details&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When using kubectl for investigations and troubleshooting utilize the wide output it gives your more details&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;     $kubectl get pods -o wide  --show-labels  --all-namespaces&#xA;     or&#xA;     $kubectl get pods -o wide  --show-labels  -A     # -A is quicker than --all-namespaces&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;In &lt;code&gt;kubectl&lt;/code&gt; utilizie &lt;code&gt;--all-namespaces or better -A&lt;/code&gt; to ensure deployments, pods, objects are on the right name space, and right desired state&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;for events and troubleshooting utilize kubectl describe if its pod/resource related and logs if it is application issue related&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;     $kubectl describe pods &amp;lt;PODID&amp;gt;   # for pod, deployment, other k8s resource issues/events&#xA;     $kubectl logs &amp;lt;PODID&amp;gt;            # for container/application issues like crash loops&#xA;     &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/faun/be-fast-with-kubectl-1-18-ckad-cka-31be00acc443&#34;&gt;fast with kubectl&lt;/a&gt; e.g. the &#39;-o yaml&#39; in conjuction with &lt;code&gt;--dry-run=client&lt;/code&gt; allows you to create a manifest template from an imperative spec, combined with &lt;code&gt;--edit&lt;/code&gt; it allows you to modify the object before creation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubectl create service clusterip my-svc -o yaml --dry-run=client &amp;gt; /tmp/srv.yaml&#xA;kubectl create --edit -f /tmp/srv.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;use kubectl &lt;a href=&#34;https://github.com/ahmetb/kubectl-aliases&#34;&gt;aliases&lt;/a&gt; to speed up and reduce typo errors, practice these alaises early at your work and study for the exam. some example aliases:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;alias k=&#39;kubectl&#39;&#xA;alias kg=&#39;kubectl get&#39;&#xA;alias kgpo=&#39;kubectl get pod&#39;&#xA;alias kcpyd=&#39;kubectl create pod -o yaml --dry-run=client&#39;&#xA;alias ksysgpo=&#39;kubectl --namespace=kube-system get pod&#39;&#xA;&#xA;alias kd=&#39;kubectl delete&#39;&#xA;alias kdf=&#39;kubectl delete -f&#39;&#xA;## for quick deletes you can add --force --grace-period=0  **Not sure if it is a good idea if you are in a production cluster**&#xA;alias krmgf=&#39;kubectl delete --grace-period 0 --force&#39;&#xA;alias kgsvcoyaml=&#39;kubectl get service -o=yaml&#39;&#xA;alias kgsvcwn=&#39;watch kubectl get service --namespace&#39;&#xA;alias kgsvcslwn=&#39;watch kubectl get service --show-labels --namespace&#39;&#xA;&#xA;#example usage of aliases&#xA;krmgf nginx-8jk71    # kill pod nginx-8jk71 using grace period 0 and force&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enable &lt;a href=&#34;https://kubernetes.io/docs/reference/kubectl/cheatsheet/#bash&#34;&gt;kubectl autocomplete&lt;/a&gt;. Autocomplete is the life saviour in any timebound exam as well as our day to day work (e.g. If autocomplete enabled &lt;code&gt;k -n [Press Tab]&lt;/code&gt; will suggest available namespaces). Example command to enable autocomplete is available at official &lt;a href=&#34;https://kubernetes.io/docs/reference/kubectl/cheatsheet/#bash&#34;&gt;kubectl Cheat Sheet&lt;/a&gt; page, you don&#39;t have to remember anything.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;source &amp;lt;(kubectl completion bash) # setup autocomplete in bash into the current shell, bash-completion package should be installed first.&#xA;echo &#34;source &amp;lt;(kubectl completion bash)&#34; &amp;gt;&amp;gt; ~/.bashrc # add autocomplete permanently to your bash shell.&#xA;&#xA;alias k=kubectl&#xA;complete -F __start_kubectl k&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Miscellaneous (resources not allowed during exam):&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ContainerSolutions/kubernetes-examples&#34;&gt;Troubleshooting use cases by Ian/Container solutions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Popular training and practice sites:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Double check if the course is uptodate with the latest exam information (e.g. api, or curicuilim)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.udemy.com/course/certified-kubernetes-administrator-with-practice-tests/&#34;&gt;Mumshad CKA with practice tests and mock exams&lt;/a&gt; - Highly recommended&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://killer.sh/cka&#34;&gt;Killer.sh CKA simulator&lt;/a&gt; ⟹ use code &lt;strong&gt;walidshaari&lt;/strong&gt; for &lt;strong&gt;20%&lt;/strong&gt; discount - they update frequently&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.techworld-with-nana.com/kubernetes-administrator-cka&#34;&gt;AWS Container hero NANA CKA course&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kube.academy/courses/how-to-prepare-for-the-cka-exam&#34;&gt;Kube Academy free How to prepare for the CKA exam training&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://acloud.guru/overview/certified-kubernetes-administrator&#34;&gt;A Cloud Guru - Certified Kubernetes Administrator (CKA)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pluralsight.com/paths/certified-kubernetes-administrator&#34;&gt;Pluralsight CKA course&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/nocentino&#34;&gt;Anthony E. Nocentino &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://acloud.guru/learn/7f5137aa-2d26-4b19-8d8c-025b22667e76&#34;&gt;LinuxAcademy/ACloudGuru CKA course&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rx-m.com/cka-online-training/&#34;&gt;rx-m online CKA course&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Duffie Cooly &lt;a href=&#34;https://k8s.work/cka-lab.mp4&#34;&gt;hands-on CKA video&lt;/a&gt; using KinD and accompanying &lt;a href=&#34;https://hackmd.io/@mauilion/cka-lab&#34;&gt;notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/in/stilian-stoilov-379972a9/&#34;&gt;Stilian Stoilov&lt;/a&gt; &lt;a href=&#34;https://github.com/StenlyTU/K8s-training-official&#34;&gt;practice questions&lt;/a&gt; - 50+ tasks with increasing difficulty.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Quick review material&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Adnan Rashisd CKA notes: can be found at &lt;a href=&#34;https://adnan.study/&#34;&gt;https://adnan.study/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;What&#39;s Next:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Learn more about Kubernetes core components from &lt;a href=&#34;https://twitter.com/mauilion&#34;&gt;Duffie Cooly&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/playlist?list=PL7bmigfV0EqS6WxgWlH-p4dhkfuwcZ6-E&#34;&gt;TGIK Grokking playlist&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cncf.io/certification/ckad/&#34;&gt;CKAD Certified Kubernetes Application Developer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/walidshaari/Certified-Kubernetes-Secuirty-Specialist&#34;&gt;CKS Certified Kubernetes Security Specialist&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Klustered: live youtube series of advanced level of internals troubleshooting. fun and interesting to watch &lt;a href=&#34;https://www.youtube.com/playlist?list=PLz0t90fOInA5IyhoT96WhycPV8Km-WICj&#34;&gt;Klustered&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>nvm-sh/nvm</title>
    <updated>2022-05-29T01:54:10Z</updated>
    <id>tag:github.com,2022-05-29:/nvm-sh/nvm</id>
    <link href="https://github.com/nvm-sh/nvm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Node Version Manager - POSIX-compliant bash script to manage multiple active node.js versions&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/nvm-sh/logos&#34;&gt;&lt;img alt=&#34;nvm project logo&#34; src=&#34;https://raw.githubusercontent.com/nvm-sh/logos/HEAD/nvm-logo-color.svg?sanitize=true&#34; height=&#34;50&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Node Version Manager &lt;a href=&#34;https://travis-ci.org/nvm-sh/nvm&#34;&gt;&lt;img src=&#34;https://travis-ci.org/nvm-sh/nvm.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nvm-sh/nvm/releases/tag/v0.39.1&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/version-v0.39.1-yellow.svg?sanitize=true&#34; alt=&#34;nvm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/684&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/684/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;!-- To update this table of contents, ensure you have run `npm install` then `npm run doctoc` --&gt; &#xA;&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#intro&#34;&gt;Intro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#about&#34;&gt;About&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#installing-and-updating&#34;&gt;Installing and Updating&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#install--update-script&#34;&gt;Install &amp;amp; Update Script&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#additional-notes&#34;&gt;Additional Notes&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#troubleshooting-on-linux&#34;&gt;Troubleshooting on Linux&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#troubleshooting-on-macos&#34;&gt;Troubleshooting on macOS&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#ansible&#34;&gt;Ansible&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#verify-installation&#34;&gt;Verify Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#important-notes&#34;&gt;Important Notes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#git-install&#34;&gt;Git Install&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#manual-install&#34;&gt;Manual Install&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#manual-upgrade&#34;&gt;Manual Upgrade&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#long-term-support&#34;&gt;Long-term Support&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#migrating-global-packages-while-installing&#34;&gt;Migrating Global Packages While Installing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#default-global-packages-from-file-while-installing&#34;&gt;Default Global Packages From File While Installing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#iojs&#34;&gt;io.js&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#system-version-of-node&#34;&gt;System Version of Node&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#listing-versions&#34;&gt;Listing Versions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#setting-custom-colors&#34;&gt;Setting Custom Colors&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#persisting-custom-colors&#34;&gt;Persisting custom colors&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#suppressing-colorized-output&#34;&gt;Suppressing colorized output&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#restoring-path&#34;&gt;Restoring PATH&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#set-default-node-version&#34;&gt;Set default node version&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#use-a-mirror-of-node-binaries&#34;&gt;Use a mirror of node binaries&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#nvmrc&#34;&gt;.nvmrc&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#deeper-shell-integration&#34;&gt;Deeper Shell Integration&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#bash&#34;&gt;bash&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#automatically-call-nvm-use&#34;&gt;Automatically call &lt;code&gt;nvm use&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#zsh&#34;&gt;zsh&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#calling-nvm-use-automatically-in-a-directory-with-a-nvmrc-file&#34;&gt;Calling &lt;code&gt;nvm use&lt;/code&gt; automatically in a directory with a &lt;code&gt;.nvmrc&lt;/code&gt; file&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#fish&#34;&gt;fish&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#calling-nvm-use-automatically-in-a-directory-with-a-nvmrc-file-1&#34;&gt;Calling &lt;code&gt;nvm use&lt;/code&gt; automatically in a directory with a &lt;code&gt;.nvmrc&lt;/code&gt; file&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#running-tests&#34;&gt;Running Tests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#environment-variables&#34;&gt;Environment variables&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#bash-completion&#34;&gt;Bash Completion&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#usage-1&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#compatibility-issues&#34;&gt;Compatibility Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#installing-nvm-on-alpine-linux&#34;&gt;Installing nvm on Alpine Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#uninstalling--removal&#34;&gt;Uninstalling / Removal&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#manual-uninstall&#34;&gt;Manual Uninstall&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#docker-for-development-environment&#34;&gt;Docker For Development Environment&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#problems&#34;&gt;Problems&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#macos-troubleshooting&#34;&gt;macOS Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#maintainers&#34;&gt;Maintainers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#copyright-notice&#34;&gt;Copyright notice&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;h2&gt;Intro&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;nvm&lt;/code&gt; allows you to quickly install and use different versions of node via the command line.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ nvm use 16&#xA;Now using node v16.9.1 (npm v7.21.1)&#xA;$ node -v&#xA;v16.9.1&#xA;$ nvm use 14&#xA;Now using node v14.18.0 (npm v6.14.15)&#xA;$ node -v&#xA;v14.18.0&#xA;$ nvm install 12&#xA;Now using node v12.22.6 (npm v6.14.5)&#xA;$ node -v&#xA;v12.22.6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Simple as that!&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;nvm is a version manager for &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;node.js&lt;/a&gt;, designed to be installed per-user, and invoked per-shell. &lt;code&gt;nvm&lt;/code&gt; works on any POSIX-compliant shell (sh, dash, ksh, zsh, bash), in particular on these platforms: unix, macOS, and &lt;a href=&#34;https://github.com/nvm-sh/nvm#important-notes&#34;&gt;windows WSL&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;installation-and-update&#34;&gt;&lt;/a&gt; &lt;a id=&#34;install-script&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installing and Updating&lt;/h2&gt; &#xA;&lt;h3&gt;Install &amp;amp; Update Script&lt;/h3&gt; &#xA;&lt;p&gt;To &lt;strong&gt;install&lt;/strong&gt; or &lt;strong&gt;update&lt;/strong&gt; nvm, you should run the &lt;a href=&#34;https://github.com/nvm-sh/nvm/raw/v0.39.1/install.sh&#34;&gt;install script&lt;/a&gt;. To do that, you may either download and run the script manually, or use the following cURL or Wget command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running either of the above commands downloads a script and runs it. The script clones the nvm repository to &lt;code&gt;~/.nvm&lt;/code&gt;, and attempts to add the source lines from the snippet below to the correct profile file (&lt;code&gt;~/.bash_profile&lt;/code&gt;, &lt;code&gt;~/.zshrc&lt;/code&gt;, &lt;code&gt;~/.profile&lt;/code&gt;, or &lt;code&gt;~/.bashrc&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;profile_snippet&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export NVM_DIR=&#34;$([ -z &#34;${XDG_CONFIG_HOME-}&#34; ] &amp;amp;&amp;amp; printf %s &#34;${HOME}/.nvm&#34; || printf %s &#34;${XDG_CONFIG_HOME}/nvm&#34;)&#34;&#xA;[ -s &#34;$NVM_DIR/nvm.sh&#34; ] &amp;amp;&amp;amp; \. &#34;$NVM_DIR/nvm.sh&#34; # This loads nvm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Additional Notes&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If the environment variable &lt;code&gt;$XDG_CONFIG_HOME&lt;/code&gt; is present, it will place the &lt;code&gt;nvm&lt;/code&gt; files there.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can add &lt;code&gt;--no-use&lt;/code&gt; to the end of the above script (...&lt;code&gt;nvm.sh --no-use&lt;/code&gt;) to postpone using &lt;code&gt;nvm&lt;/code&gt; until you manually &lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#usage&#34;&gt;&lt;code&gt;use&lt;/code&gt;&lt;/a&gt; it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can customize the install source, directory, profile, and version using the &lt;code&gt;NVM_SOURCE&lt;/code&gt;, &lt;code&gt;NVM_DIR&lt;/code&gt;, &lt;code&gt;PROFILE&lt;/code&gt;, and &lt;code&gt;NODE_VERSION&lt;/code&gt; variables. Eg: &lt;code&gt;curl ... | NVM_DIR=&#34;path/to/nvm&#34;&lt;/code&gt;. Ensure that the &lt;code&gt;NVM_DIR&lt;/code&gt; does not contain a trailing slash.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The installer can use &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;curl&lt;/code&gt;, or &lt;code&gt;wget&lt;/code&gt; to download &lt;code&gt;nvm&lt;/code&gt;, whichever is available.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Troubleshooting on Linux&lt;/h4&gt; &#xA;&lt;p&gt;On Linux, after running the install script, if you get &lt;code&gt;nvm: command not found&lt;/code&gt; or see no feedback from your terminal after you type &lt;code&gt;command -v nvm&lt;/code&gt;, simply close your current terminal, open a new terminal, and try verifying again. Alternatively, you can run the following commands for the different shells on the command line:&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;bash&lt;/em&gt;: &lt;code&gt;source ~/.bashrc&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;zsh&lt;/em&gt;: &lt;code&gt;source ~/.zshrc&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;ksh&lt;/em&gt;: &lt;code&gt;. ~/.profile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;These should pick up the &lt;code&gt;nvm&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h4&gt;Troubleshooting on macOS&lt;/h4&gt; &#xA;&lt;p&gt;Since OS X 10.9, &lt;code&gt;/usr/bin/git&lt;/code&gt; has been preset by Xcode command line tools, which means we can&#39;t properly detect if Git is installed or not. You need to manually install the Xcode command line tools before running the install script, otherwise, it&#39;ll fail. (see &lt;a href=&#34;https://github.com/nvm-sh/nvm/issues/1782&#34;&gt;#1782&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;If you get &lt;code&gt;nvm: command not found&lt;/code&gt; after running the install script, one of the following might be the reason:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Since macOS 10.15, the default shell is &lt;code&gt;zsh&lt;/code&gt; and nvm will look for &lt;code&gt;.zshrc&lt;/code&gt; to update, none is installed by default. Create one with &lt;code&gt;touch ~/.zshrc&lt;/code&gt; and run the install script again.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you use bash, the previous default shell, your system may not have a &lt;code&gt;.bash_profile&lt;/code&gt; file where the command is set up. Create one with &lt;code&gt;touch ~/.bash_profile&lt;/code&gt; and run the install script again. Then, run &lt;code&gt;source ~/.bash_profile&lt;/code&gt; to pick up the &lt;code&gt;nvm&lt;/code&gt; command.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You have previously used &lt;code&gt;bash&lt;/code&gt;, but you have &lt;code&gt;zsh&lt;/code&gt; installed. You need to manually add &lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#manual-install&#34;&gt;these lines&lt;/a&gt; to &lt;code&gt;~/.zshrc&lt;/code&gt; and run &lt;code&gt;. ~/.zshrc&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You might need to restart your terminal instance or run &lt;code&gt;. ~/.nvm/nvm.sh&lt;/code&gt;. Restarting your terminal/opening a new tab/window, or running the source command will load the command and the new configuration.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If the above didn&#39;t help, you might need to restart your terminal instance. Try opening a new tab/window in your terminal and retry.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If the above doesn&#39;t fix the problem, you may try the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you use bash, it may be that your &lt;code&gt;.bash_profile&lt;/code&gt; (or &lt;code&gt;~/.profile&lt;/code&gt;) does not source your &lt;code&gt;~/.bashrc&lt;/code&gt; properly. You could fix this by adding &lt;code&gt;source ~/&amp;lt;your_profile_file&amp;gt;&lt;/code&gt; to it or follow the next step below.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Try adding &lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/#profile_snippet&#34;&gt;the snippet from the install section&lt;/a&gt;, that finds the correct nvm directory and loads nvm, to your usual profile (&lt;code&gt;~/.bash_profile&lt;/code&gt;, &lt;code&gt;~/.zshrc&lt;/code&gt;, &lt;code&gt;~/.profile&lt;/code&gt;, or &lt;code&gt;~/.bashrc&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For more information about this issue and possible workarounds, please &lt;a href=&#34;https://github.com/nvm-sh/nvm/issues/576&#34;&gt;refer here&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; For Macs with the M1 chip, node started providing &lt;strong&gt;arm64&lt;/strong&gt; arch darwin packages since v16.0.0. For earlier versions, there were only &lt;strong&gt;darwin_x64&lt;/strong&gt; packages available but no &lt;strong&gt;darwin_arm64&lt;/strong&gt;. If you are facing issues installing node using &lt;code&gt;nvm&lt;/code&gt;, you may want to update to v16 or later.&lt;/p&gt; &#xA;&lt;h4&gt;Ansible&lt;/h4&gt; &#xA;&lt;p&gt;You can use a task:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- name: nvm&#xA;  shell: &amp;gt;&#xA;    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash&#xA;  args:&#xA;    creates: &#34;{{ ansible_env.HOME }}/.nvm/nvm.sh&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Verify Installation&lt;/h3&gt; &#xA;&lt;p&gt;To verify that nvm has been installed, do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;command -v nvm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which should output &lt;code&gt;nvm&lt;/code&gt; if the installation was successful. Please note that &lt;code&gt;which nvm&lt;/code&gt; will not work, since &lt;code&gt;nvm&lt;/code&gt; is a sourced shell function, not an executable binary.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; On Linux, after running the install script, if you get &lt;code&gt;nvm: command not found&lt;/code&gt; or see no feedback from your terminal after you type &lt;code&gt;command -v nvm&lt;/code&gt;, simply close your current terminal, open a new terminal, and try verifying again.&lt;/p&gt; &#xA;&lt;h3&gt;Important Notes&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re running a system without prepackaged binary available, which means you&#39;re going to install nodejs or io.js from its source code, you need to make sure your system has a C++ compiler. For OS X, Xcode will work, for Debian/Ubuntu based GNU/Linux, the &lt;code&gt;build-essential&lt;/code&gt; and &lt;code&gt;libssl-dev&lt;/code&gt; packages work.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;nvm&lt;/code&gt; also support Windows in some cases. It should work through WSL (Windows Subsystem for Linux) depending on the version of WSL. It should also work with &lt;a href=&#34;https://gitforwindows.org/&#34;&gt;GitBash&lt;/a&gt; (MSYS) or &lt;a href=&#34;https://cygwin.com&#34;&gt;Cygwin&lt;/a&gt;. Otherwise, for Windows, a few alternatives exist, which are neither supported nor developed by us:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/coreybutler/nvm-windows&#34;&gt;nvm-windows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/marcelklehr/nodist&#34;&gt;nodist&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jasongin/nvs&#34;&gt;nvs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;nvm&lt;/code&gt; does not support &lt;a href=&#34;https://fishshell.com&#34;&gt;Fish&lt;/a&gt; either (see &lt;a href=&#34;https://github.com/nvm-sh/nvm/issues/303&#34;&gt;#303&lt;/a&gt;). Alternatives exist, which are neither supported nor developed by us:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/edc/bass&#34;&gt;bass&lt;/a&gt; allows you to use utilities written for Bash in fish shell&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/brigand/fast-nvm-fish&#34;&gt;fast-nvm-fish&lt;/a&gt; only works with version numbers (not aliases) but doesn&#39;t significantly slow your shell startup&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/derekstavis/plugin-nvm&#34;&gt;plugin-nvm&lt;/a&gt; plugin for &lt;a href=&#34;https://github.com/oh-my-fish/oh-my-fish&#34;&gt;Oh My Fish&lt;/a&gt;, which makes nvm and its completions available in fish shell&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fisherman/fnm&#34;&gt;fnm&lt;/a&gt; - &lt;a href=&#34;https://github.com/fisherman/fisherman&#34;&gt;fisherman&lt;/a&gt;-based version manager for fish&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FabioAntunes/fish-nvm&#34;&gt;fish-nvm&lt;/a&gt; - Wrapper around nvm for fish, delays sourcing nvm until it&#39;s actually used.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We still have some problems with FreeBSD, because there is no official pre-built binary for FreeBSD, and building from source may need &lt;a href=&#34;https://www.freshports.org/www/node/files/patch-deps_v8_src_base_platform_platform-posix.cc&#34;&gt;patches&lt;/a&gt;; see the issue ticket:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvm-sh/nvm/issues/900&#34;&gt;[#900] [Bug] nodejs on FreeBSD may need to be patched&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nodejs/node/issues/3716&#34;&gt;nodejs/node#3716&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; On OS X, if you do not have Xcode installed and you do not wish to download the ~4.3GB file, you can install the &lt;code&gt;Command Line Tools&lt;/code&gt;. You can check out this blog post on how to just that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/&#34;&gt;How to Install Command Line Tools in OS X Mavericks &amp;amp; Yosemite (Without Xcode)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; On OS X, if you have/had a &#34;system&#34; node installed and want to install modules globally, keep in mind that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When using &lt;code&gt;nvm&lt;/code&gt; you do not need &lt;code&gt;sudo&lt;/code&gt; to globally install a module with &lt;code&gt;npm -g&lt;/code&gt;, so instead of doing &lt;code&gt;sudo npm install -g grunt&lt;/code&gt;, do instead &lt;code&gt;npm install -g grunt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you have an &lt;code&gt;~/.npmrc&lt;/code&gt; file, make sure it does not contain any &lt;code&gt;prefix&lt;/code&gt; settings (which is not compatible with &lt;code&gt;nvm&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;You can (but should not?) keep your previous &#34;system&#34; node install, but &lt;code&gt;nvm&lt;/code&gt; will only be available to your user account (the one used to install nvm). This might cause version mismatches, as other users will be using &lt;code&gt;/usr/local/lib/node_modules/*&lt;/code&gt; VS your user account using &lt;code&gt;~/.nvm/versions/node/vX.X.X/lib/node_modules/*&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Homebrew installation is not supported. If you have issues with homebrew-installed &lt;code&gt;nvm&lt;/code&gt;, please &lt;code&gt;brew uninstall&lt;/code&gt; it, and install it using the instructions below, before filing an issue.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you&#39;re using &lt;code&gt;zsh&lt;/code&gt; you can easily install &lt;code&gt;nvm&lt;/code&gt; as a zsh plugin. Install &lt;a href=&#34;https://github.com/lukechilds/zsh-nvm&#34;&gt;&lt;code&gt;zsh-nvm&lt;/code&gt;&lt;/a&gt; and run &lt;code&gt;nvm upgrade&lt;/code&gt; to upgrade.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Git versions before v1.7 may face a problem of cloning &lt;code&gt;nvm&lt;/code&gt; source from GitHub via https protocol, and there is also different behavior of git before v1.6, and git prior to &lt;a href=&#34;https://github.com/git/git/commit/5a7d5b683f869d3e3884a89775241afa515da9e7&#34;&gt;v1.17.10&lt;/a&gt; can not clone tags, so the minimum required git version is v1.7.10. If you are interested in the problem we mentioned here, please refer to GitHub&#39;s &lt;a href=&#34;https://help.github.com/articles/https-cloning-errors/&#34;&gt;HTTPS cloning errors&lt;/a&gt; article.&lt;/p&gt; &#xA;&lt;h3&gt;Git Install&lt;/h3&gt; &#xA;&lt;p&gt;If you have &lt;code&gt;git&lt;/code&gt; installed (requires git v1.7.10+):&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;clone this repo in the root of your user profile&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cd ~/&lt;/code&gt; from anywhere then &lt;code&gt;git clone https://github.com/nvm-sh/nvm.git .nvm&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;cd ~/.nvm&lt;/code&gt; and check out the latest version with &lt;code&gt;git checkout v0.39.1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;activate &lt;code&gt;nvm&lt;/code&gt; by sourcing it from your shell: &lt;code&gt;. ./nvm.sh&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Now add these lines to your &lt;code&gt;~/.bashrc&lt;/code&gt;, &lt;code&gt;~/.profile&lt;/code&gt;, or &lt;code&gt;~/.zshrc&lt;/code&gt; file to have it automatically sourced upon login: (you may have to add to more than one of the above files)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export NVM_DIR=&#34;$HOME/.nvm&#34;&#xA;[ -s &#34;$NVM_DIR/nvm.sh&#34; ] &amp;amp;&amp;amp; \. &#34;$NVM_DIR/nvm.sh&#34;  # This loads nvm&#xA;[ -s &#34;$NVM_DIR/bash_completion&#34; ] &amp;amp;&amp;amp; \. &#34;$NVM_DIR/bash_completion&#34;  # This loads nvm bash_completion&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual Install&lt;/h3&gt; &#xA;&lt;p&gt;For a fully manual install, execute the following lines to first clone the &lt;code&gt;nvm&lt;/code&gt; repository into &lt;code&gt;$HOME/.nvm&lt;/code&gt;, and then load &lt;code&gt;nvm&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export NVM_DIR=&#34;$HOME/.nvm&#34; &amp;amp;&amp;amp; (&#xA;  git clone https://github.com/nvm-sh/nvm.git &#34;$NVM_DIR&#34;&#xA;  cd &#34;$NVM_DIR&#34;&#xA;  git checkout `git describe --abbrev=0 --tags --match &#34;v[0-9]*&#34; $(git rev-list --tags --max-count=1)`&#xA;) &amp;amp;&amp;amp; \. &#34;$NVM_DIR/nvm.sh&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now add these lines to your &lt;code&gt;~/.bashrc&lt;/code&gt;, &lt;code&gt;~/.profile&lt;/code&gt;, or &lt;code&gt;~/.zshrc&lt;/code&gt; file to have it automatically sourced upon login: (you may have to add to more than one of the above files)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export NVM_DIR=&#34;$HOME/.nvm&#34;&#xA;[ -s &#34;$NVM_DIR/nvm.sh&#34; ] &amp;amp;&amp;amp; \. &#34;$NVM_DIR/nvm.sh&#34; # This loads nvm&#xA;[ -s &#34;$NVM_DIR/bash_completion&#34; ] &amp;amp;&amp;amp; \. &#34;$NVM_DIR/bash_completion&#34;  # This loads nvm bash_completion&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual Upgrade&lt;/h3&gt; &#xA;&lt;p&gt;For manual upgrade with &lt;code&gt;git&lt;/code&gt; (requires git v1.7.10+):&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;change to the &lt;code&gt;$NVM_DIR&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;pull down the latest changes&lt;/li&gt; &#xA; &lt;li&gt;check out the latest version&lt;/li&gt; &#xA; &lt;li&gt;activate the new version&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;(&#xA;  cd &#34;$NVM_DIR&#34;&#xA;  git fetch --tags origin&#xA;  git checkout `git describe --abbrev=0 --tags --match &#34;v[0-9]*&#34; $(git rev-list --tags --max-count=1)`&#xA;) &amp;amp;&amp;amp; \. &#34;$NVM_DIR/nvm.sh&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To download, compile, and install the latest release of node, do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nvm install node # &#34;node&#34; is an alias for the latest version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install a specific version of node:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nvm install 14.7.0 # or 16.3.0, 12.22.1, etc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first version installed becomes the default. New shells will start with the default version of node (e.g., &lt;code&gt;nvm alias default&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;You can list available versions using &lt;code&gt;ls-remote&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nvm ls-remote&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then in any new shell just use the installed version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nvm use node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can just run it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nvm run node --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, you can run any arbitrary command in a subshell with the desired version of node:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nvm exec 4.2 node --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also get the path to the executable to where it was installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nvm which 12.22&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In place of a version pointer like &#34;14.7&#34; or &#34;16.3&#34; or &#34;12.22.1&#34;, you can use the following special default aliases with &lt;code&gt;nvm install&lt;/code&gt;, &lt;code&gt;nvm use&lt;/code&gt;, &lt;code&gt;nvm run&lt;/code&gt;, &lt;code&gt;nvm exec&lt;/code&gt;, &lt;code&gt;nvm which&lt;/code&gt;, etc:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;node&lt;/code&gt;: this installs the latest version of &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;&lt;code&gt;node&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;iojs&lt;/code&gt;: this installs the latest version of &lt;a href=&#34;https://iojs.org/en/&#34;&gt;&lt;code&gt;io.js&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stable&lt;/code&gt;: this alias is deprecated, and only truly applies to &lt;code&gt;node&lt;/code&gt; &lt;code&gt;v0.12&lt;/code&gt; and earlier. Currently, this is an alias for &lt;code&gt;node&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;unstable&lt;/code&gt;: this alias points to &lt;code&gt;node&lt;/code&gt; &lt;code&gt;v0.11&lt;/code&gt; - the last &#34;unstable&#34; node release, since post-1.0, all node versions are stable. (in SemVer, versions communicate breakage, not stability).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Long-term Support&lt;/h3&gt; &#xA;&lt;p&gt;Node has a &lt;a href=&#34;https://github.com/nodejs/Release#release-schedule&#34;&gt;schedule&lt;/a&gt; for long-term support (LTS) You can reference LTS versions in aliases and &lt;code&gt;.nvmrc&lt;/code&gt; files with the notation &lt;code&gt;lts/*&lt;/code&gt; for the latest LTS, and &lt;code&gt;lts/argon&lt;/code&gt; for LTS releases from the &#34;argon&#34; line, for example. In addition, the following commands support LTS arguments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;nvm install --lts&lt;/code&gt; / &lt;code&gt;nvm install --lts=argon&lt;/code&gt; / &lt;code&gt;nvm install &#39;lts/*&#39;&lt;/code&gt; / &lt;code&gt;nvm install lts/argon&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nvm uninstall --lts&lt;/code&gt; / &lt;code&gt;nvm uninstall --lts=argon&lt;/code&gt; / &lt;code&gt;nvm uninstall &#39;lts/*&#39;&lt;/code&gt; / &lt;code&gt;nvm uninstall lts/argon&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nvm use --lts&lt;/code&gt; / &lt;code&gt;nvm use --lts=argon&lt;/code&gt; / &lt;code&gt;nvm use &#39;lts/*&#39;&lt;/code&gt; / &lt;code&gt;nvm use lts/argon&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nvm exec --lts&lt;/code&gt; / &lt;code&gt;nvm exec --lts=argon&lt;/code&gt; / &lt;code&gt;nvm exec &#39;lts/*&#39;&lt;/code&gt; / &lt;code&gt;nvm exec lts/argon&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nvm run --lts&lt;/code&gt; / &lt;code&gt;nvm run --lts=argon&lt;/code&gt; / &lt;code&gt;nvm run &#39;lts/*&#39;&lt;/code&gt; / &lt;code&gt;nvm run lts/argon&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nvm ls-remote --lts&lt;/code&gt; / &lt;code&gt;nvm ls-remote --lts=argon&lt;/code&gt; &lt;code&gt;nvm ls-remote &#39;lts/*&#39;&lt;/code&gt; / &lt;code&gt;nvm ls-remote lts/argon&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nvm version-remote --lts&lt;/code&gt; / &lt;code&gt;nvm version-remote --lts=argon&lt;/code&gt; / &lt;code&gt;nvm version-remote &#39;lts/*&#39;&lt;/code&gt; / &lt;code&gt;nvm version-remote lts/argon&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Any time your local copy of &lt;code&gt;nvm&lt;/code&gt; connects to &lt;a href=&#34;https://nodejs.org&#34;&gt;https://nodejs.org&lt;/a&gt;, it will re-create the appropriate local aliases for all available LTS lines. These aliases (stored under &lt;code&gt;$NVM_DIR/alias/lts&lt;/code&gt;), are managed by &lt;code&gt;nvm&lt;/code&gt;, and you should not modify, remove, or create these files - expect your changes to be undone, and expect meddling with these files to cause bugs that will likely not be supported.&lt;/p&gt; &#xA;&lt;p&gt;To get the latest LTS version of node and migrate your existing installed packages, use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nvm install &#39;lts/*&#39; --reinstall-packages-from=current&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Migrating Global Packages While Installing&lt;/h3&gt; &#xA;&lt;p&gt;If you want to install a new version of Node.js and migrate npm packages from a previous version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nvm install node --reinstall-packages-from=node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will first use &#34;nvm version node&#34; to identify the current version you&#39;re migrating packages from. Then it resolves the new version to install from the remote server and installs it. Lastly, it runs &#34;nvm reinstall-packages&#34; to reinstall the npm packages from your prior version of Node to the new one.&lt;/p&gt; &#xA;&lt;p&gt;You can also install and migrate npm packages from specific versions of Node like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nvm install 6 --reinstall-packages-from=5&#xA;nvm install v4.2 --reinstall-packages-from=iojs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that reinstalling packages &lt;em&gt;explicitly does not update the npm version&lt;/em&gt; — this is to ensure that npm isn&#39;t accidentally upgraded to a broken version for the new node version.&lt;/p&gt; &#xA;&lt;p&gt;To update npm at the same time add the &lt;code&gt;--latest-npm&lt;/code&gt; flag, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nvm install &#39;lts/*&#39; --reinstall-packages-from=default --latest-npm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or, you can at any time run the following command to get the latest supported npm version on the current node version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nvm install-latest-npm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;ve already gotten an error to the effect of &#34;npm does not support Node.js&#34;, you&#39;ll need to (1) revert to a previous node version (&lt;code&gt;nvm ls&lt;/code&gt; &amp;amp; &lt;code&gt;nvm use &amp;lt;your latest _working_ version from the ls&amp;gt;&lt;/code&gt;, (2) delete the newly created node version (&lt;code&gt;nvm uninstall &amp;lt;your _broken_ version of node from the ls&amp;gt;&lt;/code&gt;), then (3) rerun your &lt;code&gt;nvm install&lt;/code&gt; with the &lt;code&gt;--latest-npm&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;h3&gt;Default Global Packages From File While Installing&lt;/h3&gt; &#xA;&lt;p&gt;If you have a list of default packages you want installed every time you install a new version, we support that too -- just add the package names, one per line, to the file &lt;code&gt;$NVM_DIR/default-packages&lt;/code&gt;. You can add anything npm would accept as a package argument on the command line.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# $NVM_DIR/default-packages&#xA;&#xA;rimraf&#xA;object-inspect@1.0.2&#xA;stevemao/left-pad&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;io.js&lt;/h3&gt; &#xA;&lt;p&gt;If you want to install &lt;a href=&#34;https://github.com/iojs/io.js/&#34;&gt;io.js&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nvm install iojs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to install a new version of io.js and migrate npm packages from a previous version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nvm install iojs --reinstall-packages-from=iojs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The same guidelines mentioned for migrating npm packages in node are applicable to io.js.&lt;/p&gt; &#xA;&lt;h3&gt;System Version of Node&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use the system-installed version of node, you can use the special default alias &#34;system&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nvm use system&#xA;nvm run system --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Listing Versions&lt;/h3&gt; &#xA;&lt;p&gt;If you want to see what versions are installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nvm ls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to see what versions are available to install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nvm ls-remote&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting Custom Colors&lt;/h3&gt; &#xA;&lt;p&gt;You can set five colors that will be used to display version and alias information. These colors replace the default colors. Initial colors are: g b y r e&lt;/p&gt; &#xA;&lt;p&gt;Color codes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;r/R = red / bold red&#xA;&#xA;g/G = green / bold green&#xA;&#xA;b/B = blue / bold blue&#xA;&#xA;c/C = cyan / bold cyan&#xA;&#xA;m/M = magenta / bold magenta&#xA;&#xA;y/Y = yellow / bold yellow&#xA;&#xA;k/K = black / bold black&#xA;&#xA;e/W = light grey / white&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nvm set-colors rgBcm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Persisting custom colors&lt;/h4&gt; &#xA;&lt;p&gt;If you want the custom colors to persist after terminating the shell, export the &lt;code&gt;NVM_COLORS&lt;/code&gt; variable in your shell profile. For example, if you want to use cyan, magenta, green, bold red and bold yellow, add the following line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export NVM_COLORS=&#39;cmgRY&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Suppressing colorized output&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;nvm help (or -h or --help)&lt;/code&gt;, &lt;code&gt;nvm ls&lt;/code&gt;, &lt;code&gt;nvm ls-remote&lt;/code&gt; and &lt;code&gt;nvm alias&lt;/code&gt; usually produce colorized output. You can disable colors with the &lt;code&gt;--no-colors&lt;/code&gt; option (or by setting the environment variable &lt;code&gt;TERM=dumb&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nvm ls --no-colors&#xA;nvm help --no-colors&#xA;TERM=dumb nvm ls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Restoring PATH&lt;/h4&gt; &#xA;&lt;p&gt;To restore your PATH, you can deactivate it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nvm deactivate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Set default node version&lt;/h4&gt; &#xA;&lt;p&gt;To set a default Node version to be used in any new shell, use the alias &#39;default&#39;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nvm alias default node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Use a mirror of node binaries&lt;/h4&gt; &#xA;&lt;p&gt;To use a mirror of the node binaries, set &lt;code&gt;$NVM_NODEJS_ORG_MIRROR&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export NVM_NODEJS_ORG_MIRROR=https://nodejs.org/dist&#xA;nvm install node&#xA;&#xA;NVM_NODEJS_ORG_MIRROR=https://nodejs.org/dist nvm install 4.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use a mirror of the io.js binaries, set &lt;code&gt;$NVM_IOJS_ORG_MIRROR&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export NVM_IOJS_ORG_MIRROR=https://iojs.org/dist&#xA;nvm install iojs-v1.0.3&#xA;&#xA;NVM_IOJS_ORG_MIRROR=https://iojs.org/dist nvm install iojs-v1.0.3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;nvm use&lt;/code&gt; will not, by default, create a &#34;current&#34; symlink. Set &lt;code&gt;$NVM_SYMLINK_CURRENT&lt;/code&gt; to &#34;true&#34; to enable this behavior, which is sometimes useful for IDEs. Note that using &lt;code&gt;nvm&lt;/code&gt; in multiple shell tabs with this environment variable enabled can cause race conditions.&lt;/p&gt; &#xA;&lt;h3&gt;.nvmrc&lt;/h3&gt; &#xA;&lt;p&gt;You can create a &lt;code&gt;.nvmrc&lt;/code&gt; file containing a node version number (or any other string that &lt;code&gt;nvm&lt;/code&gt; understands; see &lt;code&gt;nvm --help&lt;/code&gt; for details) in the project root directory (or any parent directory). Afterwards, &lt;code&gt;nvm use&lt;/code&gt;, &lt;code&gt;nvm install&lt;/code&gt;, &lt;code&gt;nvm exec&lt;/code&gt;, &lt;code&gt;nvm run&lt;/code&gt;, and &lt;code&gt;nvm which&lt;/code&gt; will use the version specified in the &lt;code&gt;.nvmrc&lt;/code&gt; file if no version is supplied on the command line.&lt;/p&gt; &#xA;&lt;p&gt;For example, to make nvm default to the latest 5.9 release, the latest LTS version, or the latest node version for the current directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;5.9&#34; &amp;gt; .nvmrc&#xA;&#xA;$ echo &#34;lts/*&#34; &amp;gt; .nvmrc # to default to the latest LTS version&#xA;&#xA;$ echo &#34;node&#34; &amp;gt; .nvmrc # to default to the latest version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;[NB these examples assume a POSIX-compliant shell version of &lt;code&gt;echo&lt;/code&gt;. If you use a Windows &lt;code&gt;cmd&lt;/code&gt; development environment, eg the &lt;code&gt;.nvmrc&lt;/code&gt; file is used to configure a remote Linux deployment, then keep in mind the &lt;code&gt;&#34;&lt;/code&gt;s will be copied leading to an invalid file. Remove them.]&lt;/p&gt; &#xA;&lt;p&gt;Then when you run nvm:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ nvm use&#xA;Found &#39;/path/to/project/.nvmrc&#39; with version &amp;lt;5.9&amp;gt;&#xA;Now using node v5.9.1 (npm v3.7.3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;nvm use&lt;/code&gt; et. al. will traverse directory structure upwards from the current directory looking for the &lt;code&gt;.nvmrc&lt;/code&gt; file. In other words, running &lt;code&gt;nvm use&lt;/code&gt; et. al. in any subdirectory of a directory with an &lt;code&gt;.nvmrc&lt;/code&gt; will result in that &lt;code&gt;.nvmrc&lt;/code&gt; being utilized.&lt;/p&gt; &#xA;&lt;p&gt;The contents of a &lt;code&gt;.nvmrc&lt;/code&gt; file &lt;strong&gt;must&lt;/strong&gt; be the &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; (as described by &lt;code&gt;nvm --help&lt;/code&gt;) followed by a newline. No trailing spaces are allowed, and the trailing newline is required.&lt;/p&gt; &#xA;&lt;h3&gt;Deeper Shell Integration&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/wbyoung/avn&#34;&gt;&lt;code&gt;avn&lt;/code&gt;&lt;/a&gt; to deeply integrate into your shell and automatically invoke &lt;code&gt;nvm&lt;/code&gt; when changing directories. &lt;code&gt;avn&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; supported by the &lt;code&gt;nvm&lt;/code&gt; maintainers. Please &lt;a href=&#34;https://github.com/wbyoung/avn/issues/new&#34;&gt;report issues to the &lt;code&gt;avn&lt;/code&gt; team&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer a lighter-weight solution, the recipes below have been contributed by &lt;code&gt;nvm&lt;/code&gt; users. They are &lt;strong&gt;not&lt;/strong&gt; supported by the &lt;code&gt;nvm&lt;/code&gt; maintainers. We are, however, accepting pull requests for more examples.&lt;/p&gt; &#xA;&lt;h4&gt;bash&lt;/h4&gt; &#xA;&lt;h5&gt;Automatically call &lt;code&gt;nvm use&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Put the following at the end of your &lt;code&gt;$HOME/.bashrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cdnvm() {&#xA;    command cd &#34;$@&#34;;&#xA;    nvm_path=$(nvm_find_up .nvmrc | tr -d &#39;\n&#39;)&#xA;&#xA;    # If there are no .nvmrc file, use the default nvm version&#xA;    if [[ ! $nvm_path = *[^[:space:]]* ]]; then&#xA;&#xA;        declare default_version;&#xA;        default_version=$(nvm version default);&#xA;&#xA;        # If there is no default version, set it to `node`&#xA;        # This will use the latest version on your machine&#xA;        if [[ $default_version == &#34;N/A&#34; ]]; then&#xA;            nvm alias default node;&#xA;            default_version=$(nvm version default);&#xA;        fi&#xA;&#xA;        # If the current version is not the default version, set it to use the default version&#xA;        if [[ $(nvm current) != &#34;$default_version&#34; ]]; then&#xA;            nvm use default;&#xA;        fi&#xA;&#xA;    elif [[ -s $nvm_path/.nvmrc &amp;amp;&amp;amp; -r $nvm_path/.nvmrc ]]; then&#xA;        declare nvm_version&#xA;        nvm_version=$(&amp;lt;&#34;$nvm_path&#34;/.nvmrc)&#xA;&#xA;        declare locally_resolved_nvm_version&#xA;        # `nvm ls` will check all locally-available versions&#xA;        # If there are multiple matching versions, take the latest one&#xA;        # Remove the `-&amp;gt;` and `*` characters and spaces&#xA;        # `locally_resolved_nvm_version` will be `N/A` if no local versions are found&#xA;        locally_resolved_nvm_version=$(nvm ls --no-colors &#34;$nvm_version&#34; | tail -1 | tr -d &#39;\-&amp;gt;*&#39; | tr -d &#39;[:space:]&#39;)&#xA;&#xA;        # If it is not already installed, install it&#xA;        # `nvm install` will implicitly use the newly-installed version&#xA;        if [[ &#34;$locally_resolved_nvm_version&#34; == &#34;N/A&#34; ]]; then&#xA;            nvm install &#34;$nvm_version&#34;;&#xA;        elif [[ $(nvm current) != &#34;$locally_resolved_nvm_version&#34; ]]; then&#xA;            nvm use &#34;$nvm_version&#34;;&#xA;        fi&#xA;    fi&#xA;}&#xA;alias cd=&#39;cdnvm&#39;&#xA;cd &#34;$PWD&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This alias would search &#39;up&#39; from your current directory in order to detect a &lt;code&gt;.nvmrc&lt;/code&gt; file. If it finds it, it will switch to that version; if not, it will use the default version.&lt;/p&gt; &#xA;&lt;h4&gt;zsh&lt;/h4&gt; &#xA;&lt;h5&gt;Calling &lt;code&gt;nvm use&lt;/code&gt; automatically in a directory with a &lt;code&gt;.nvmrc&lt;/code&gt; file&lt;/h5&gt; &#xA;&lt;p&gt;Put this into your &lt;code&gt;$HOME/.zshrc&lt;/code&gt; to call &lt;code&gt;nvm use&lt;/code&gt; automatically whenever you enter a directory that contains an &lt;code&gt;.nvmrc&lt;/code&gt; file with a string telling nvm which node to &lt;code&gt;use&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# place this after nvm initialization!&#xA;autoload -U add-zsh-hook&#xA;load-nvmrc() {&#xA;  local node_version=&#34;$(nvm version)&#34;&#xA;  local nvmrc_path=&#34;$(nvm_find_nvmrc)&#34;&#xA;&#xA;  if [ -n &#34;$nvmrc_path&#34; ]; then&#xA;    local nvmrc_node_version=$(nvm version &#34;$(cat &#34;${nvmrc_path}&#34;)&#34;)&#xA;&#xA;    if [ &#34;$nvmrc_node_version&#34; = &#34;N/A&#34; ]; then&#xA;      nvm install&#xA;    elif [ &#34;$nvmrc_node_version&#34; != &#34;$node_version&#34; ]; then&#xA;      nvm use&#xA;    fi&#xA;  elif [ &#34;$node_version&#34; != &#34;$(nvm version default)&#34; ]; then&#xA;    echo &#34;Reverting to nvm default version&#34;&#xA;    nvm use default&#xA;  fi&#xA;}&#xA;add-zsh-hook chpwd load-nvmrc&#xA;load-nvmrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;fish&lt;/h4&gt; &#xA;&lt;h5&gt;Calling &lt;code&gt;nvm use&lt;/code&gt; automatically in a directory with a &lt;code&gt;.nvmrc&lt;/code&gt; file&lt;/h5&gt; &#xA;&lt;p&gt;This requires that you have &lt;a href=&#34;https://github.com/edc/bass&#34;&gt;bass&lt;/a&gt; installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fish&#34;&gt;# ~/.config/fish/functions/nvm.fish&#xA;function nvm&#xA;  bass source ~/.nvm/nvm.sh --no-use &#39;;&#39; nvm $argv&#xA;end&#xA;&#xA;# ~/.config/fish/functions/nvm_find_nvmrc.fish&#xA;function nvm_find_nvmrc&#xA;  bass source ~/.nvm/nvm.sh --no-use &#39;;&#39; nvm_find_nvmrc&#xA;end&#xA;&#xA;# ~/.config/fish/functions/load_nvm.fish&#xA;function load_nvm --on-variable=&#34;PWD&#34;&#xA;  set -l default_node_version (nvm version default)&#xA;  set -l node_version (nvm version)&#xA;  set -l nvmrc_path (nvm_find_nvmrc)&#xA;  if test -n &#34;$nvmrc_path&#34;&#xA;    set -l nvmrc_node_version (nvm version (cat $nvmrc_path))&#xA;    if test &#34;$nvmrc_node_version&#34; = &#34;N/A&#34;&#xA;      nvm install (cat $nvmrc_path)&#xA;    else if test &#34;$nvmrc_node_version&#34; != &#34;$node_version&#34;&#xA;      nvm use $nvmrc_node_version&#xA;    end&#xA;  else if test &#34;$node_version&#34; != &#34;$default_node_version&#34;&#xA;    echo &#34;Reverting to default Node version&#34;&#xA;    nvm use default&#xA;  end&#xA;end&#xA;&#xA;# ~/.config/fish/config.fish&#xA;# You must call it on initialization or listening to directory switching won&#39;t work&#xA;load_nvm &amp;gt; /dev/stderr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running Tests&lt;/h2&gt; &#xA;&lt;p&gt;Tests are written in &lt;a href=&#34;https://github.com/scraperwiki/urchin&#34;&gt;Urchin&lt;/a&gt;. Install Urchin (and other dependencies) like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are slow tests and fast tests. The slow tests do things like install node and check that the right versions are used. The fast tests fake this to test things like aliases and uninstalling. From the root of the nvm git repository, run the fast tests like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run test/fast&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the slow tests like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run test/slow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run all of the tests like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Nota bene: Avoid running nvm while the tests are running.&lt;/p&gt; &#xA;&lt;h2&gt;Environment variables&lt;/h2&gt; &#xA;&lt;p&gt;nvm exposes the following environment variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;NVM_DIR&lt;/code&gt; - nvm&#39;s installation directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NVM_BIN&lt;/code&gt; - where node, npm, and global packages for the active version of node are installed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NVM_INC&lt;/code&gt; - node&#39;s include file directory (useful for building C/C++ addons for node).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NVM_CD_FLAGS&lt;/code&gt; - used to maintain compatibility with zsh.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NVM_RC_VERSION&lt;/code&gt; - version from .nvmrc file if being used.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, nvm modifies &lt;code&gt;PATH&lt;/code&gt;, and, if present, &lt;code&gt;MANPATH&lt;/code&gt; and &lt;code&gt;NODE_PATH&lt;/code&gt; when changing versions.&lt;/p&gt; &#xA;&lt;h2&gt;Bash Completion&lt;/h2&gt; &#xA;&lt;p&gt;To activate, you need to source &lt;code&gt;bash_completion&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[[ -r $NVM_DIR/bash_completion ]] &amp;amp;&amp;amp; \. $NVM_DIR/bash_completion&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Put the above sourcing line just below the sourcing line for nvm in your profile (&lt;code&gt;.bashrc&lt;/code&gt;, &lt;code&gt;.bash_profile&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;nvm:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;$ nvm&lt;/code&gt; &lt;kbd&gt;Tab&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;alias               deactivate          install             list-remote         reinstall-packages  uninstall           version&#xA;cache               exec                install-latest-npm  ls                  run                 unload              version-remote&#xA;current             help                list                ls-remote           unalias             use                 which&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;nvm alias:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;$ nvm alias&lt;/code&gt; &lt;kbd&gt;Tab&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;default      iojs         lts/*        lts/argon    lts/boron    lts/carbon   lts/dubnium  lts/erbium   node         stable       unstable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;$ nvm alias my_alias&lt;/code&gt; &lt;kbd&gt;Tab&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;v10.22.0       v12.18.3      v14.8.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;nvm use:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;$ nvm use&lt;/code&gt; &lt;kbd&gt;Tab&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;my_alias        default        v10.22.0       v12.18.3      v14.8.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;nvm uninstall:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;$ nvm uninstall&lt;/code&gt; &lt;kbd&gt;Tab&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;my_alias        default        v10.22.0       v12.18.3      v14.8.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compatibility Issues&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;nvm&lt;/code&gt; will encounter some issues if you have some non-default settings set. (see &lt;a href=&#34;https://github.com/creationix/nvm/issues/606&#34;&gt;#606&lt;/a&gt;) The following are known to cause issues:&lt;/p&gt; &#xA;&lt;p&gt;Inside &lt;code&gt;~/.npmrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;prefix=&#39;some/path&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Environment Variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$NPM_CONFIG_PREFIX&#xA;$PREFIX&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Shell settings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;set -e&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installing nvm on Alpine Linux&lt;/h2&gt; &#xA;&lt;p&gt;In order to provide the best performance (and other optimizations), nvm will download and install pre-compiled binaries for Node (and npm) when you run &lt;code&gt;nvm install X&lt;/code&gt;. The Node project compiles, tests and hosts/provides these pre-compiled binaries which are built for mainstream/traditional Linux distributions (such as Debian, Ubuntu, CentOS, RedHat et al).&lt;/p&gt; &#xA;&lt;p&gt;Alpine Linux, unlike mainstream/traditional Linux distributions, is based on &lt;a href=&#34;https://www.busybox.net/&#34;&gt;BusyBox&lt;/a&gt;, a very compact (~5MB) Linux distribution. BusyBox (and thus Alpine Linux) uses a different C/C++ stack to most mainstream/traditional Linux distributions - &lt;a href=&#34;https://www.musl-libc.org/&#34;&gt;musl&lt;/a&gt;. This makes binary programs built for such mainstream/traditional incompatible with Alpine Linux, thus we cannot simply &lt;code&gt;nvm install X&lt;/code&gt; on Alpine Linux and expect the downloaded binary to run correctly - you&#39;ll likely see &#34;...does not exist&#34; errors if you try that.&lt;/p&gt; &#xA;&lt;p&gt;There is a &lt;code&gt;-s&lt;/code&gt; flag for &lt;code&gt;nvm install&lt;/code&gt; which requests nvm download Node source and compile it locally.&lt;/p&gt; &#xA;&lt;p&gt;If installing nvm on Alpine Linux &lt;em&gt;is&lt;/em&gt; still what you want or need to do, you should be able to achieve this by running the following from you Alpine Linux shell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;apk add -U curl bash ca-certificates openssl ncurses coreutils python2 make gcc g++ libgcc linux-headers grep util-linux binutils findutils&#xA;curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Node project has some desire but no concrete plans (due to the overheads of building, testing and support) to offer Alpine-compatible binaries.&lt;/p&gt; &#xA;&lt;p&gt;As a potential alternative, @mhart (a Node contributor) has some &lt;a href=&#34;https://github.com/mhart/alpine-node&#34;&gt;Docker images for Alpine Linux with Node and optionally, npm, pre-installed&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;removal&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Uninstalling / Removal&lt;/h2&gt; &#xA;&lt;h3&gt;Manual Uninstall&lt;/h3&gt; &#xA;&lt;p&gt;To remove &lt;code&gt;nvm&lt;/code&gt; manually, execute the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ rm -rf &#34;$NVM_DIR&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Edit &lt;code&gt;~/.bashrc&lt;/code&gt; (or other shell resource config) and remove the lines below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export NVM_DIR=&#34;$HOME/.nvm&#34;&#xA;[ -s &#34;$NVM_DIR/nvm.sh&#34; ] &amp;amp;&amp;amp; \. &#34;$NVM_DIR/nvm.sh&#34; # This loads nvm&#xA;[[ -r $NVM_DIR/bash_completion ]] &amp;amp;&amp;amp; \. $NVM_DIR/bash_completion&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Docker For Development Environment&lt;/h2&gt; &#xA;&lt;p&gt;To make the development and testing work easier, we have a Dockerfile for development usage, which is based on Ubuntu 18.04 base image, prepared with essential and useful tools for &lt;code&gt;nvm&lt;/code&gt; development, to build the docker image of the environment, run the docker command at the root of &lt;code&gt;nvm&lt;/code&gt; repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ docker build -t nvm-dev .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will package your current nvm repository with our pre-defined development environment into a docker image named &lt;code&gt;nvm-dev&lt;/code&gt;, once it&#39;s built with success, validate your image via &lt;code&gt;docker images&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ docker images&#xA;&#xA;REPOSITORY         TAG                 IMAGE ID            CREATED             SIZE&#xA;nvm-dev            latest              9ca4c57a97d8        7 days ago          650 MB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you got no error message, now you can easily involve in:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ docker run -h nvm-dev -it nvm-dev&#xA;&#xA;nvm@nvm-dev:~/.nvm$&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that it&#39;ll take about 8 minutes to build the image and the image size would be about 650MB, so it&#39;s not suitable for production usage.&lt;/p&gt; &#xA;&lt;p&gt;For more information and documentation about docker, please refer to its official website:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.docker.com/&#34;&gt;https://www.docker.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/&#34;&gt;https://docs.docker.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Problems&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you try to install a node version and the installation fails, be sure to run &lt;code&gt;nvm cache clear&lt;/code&gt; to delete cached node downloads, or you might get an error like the following:&lt;/p&gt; &lt;p&gt;curl: (33) HTTP server doesn&#39;t seem to support byte ranges. Cannot resume.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Where&#39;s my &lt;code&gt;sudo node&lt;/code&gt;? Check out &lt;a href=&#34;https://github.com/nvm-sh/nvm/issues/43&#34;&gt;#43&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;After the v0.8.6 release of node, nvm tries to install from binary packages. But in some systems, the official binary packages don&#39;t work due to incompatibility of shared libs. In such cases, use &lt;code&gt;-s&lt;/code&gt; option to force install from source:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nvm install -s 0.8.6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If setting the &lt;code&gt;default&lt;/code&gt; alias does not establish the node version in new shells (i.e. &lt;code&gt;nvm current&lt;/code&gt; yields &lt;code&gt;system&lt;/code&gt;), ensure that the system&#39;s node &lt;code&gt;PATH&lt;/code&gt; is set before the &lt;code&gt;nvm.sh&lt;/code&gt; source line in your shell profile (see &lt;a href=&#34;https://github.com/nvm-sh/nvm/issues/658&#34;&gt;#658&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;macOS Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;nvm node version not found in vim shell&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you set node version to a version other than your system node version &lt;code&gt;nvm use 6.2.1&lt;/code&gt; and open vim and run &lt;code&gt;:!node -v&lt;/code&gt; you should see &lt;code&gt;v6.2.1&lt;/code&gt; if you see your system version &lt;code&gt;v0.12.7&lt;/code&gt;. You need to run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo chmod ugo-x /usr/libexec/path_helper&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More on this issue in &lt;a href=&#34;https://github.com/dotphiles/dotzsh#mac-os-x&#34;&gt;dotphiles/dotzsh&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;nvm is not compatible with the npm config &#34;prefix&#34; option&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Some solutions for this issue can be found &lt;a href=&#34;https://github.com/nvm-sh/nvm/issues/1245&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;There is one more edge case causing this issue, and that&#39;s a &lt;strong&gt;mismatch between the &lt;code&gt;$HOME&lt;/code&gt; path and the user&#39;s home directory&#39;s actual name&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You have to make sure that the user directory name in &lt;code&gt;$HOME&lt;/code&gt; and the user directory name you&#39;d see from running &lt;code&gt;ls /Users/&lt;/code&gt; &lt;strong&gt;are capitalized the same way&lt;/strong&gt; (&lt;a href=&#34;https://github.com/nvm-sh/nvm/issues/2261&#34;&gt;See this issue&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To change the user directory and/or account name follow the instructions &lt;a href=&#34;https://support.apple.com/en-us/HT201548&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Homebrew makes zsh directories unsecure&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;zsh compinit: insecure directories, run compaudit for list.&#xA;Ignore insecure directories and continue [y] or abort compinit [n]? y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Homebrew causes insecure directories like &lt;code&gt;/usr/local/share/zsh/site-functions&lt;/code&gt; and &lt;code&gt;/usr/local/share/zsh&lt;/code&gt;. This is &lt;strong&gt;not&lt;/strong&gt; an &lt;code&gt;nvm&lt;/code&gt; problem - it is a homebrew problem. Refer &lt;a href=&#34;https://github.com/zsh-users/zsh-completions/issues/680&#34;&gt;here&lt;/a&gt; for some solutions related to the issue.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Macs with M1 chip&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Experimental support for the M1 architecture was added in node.js v15.3 and full support was added in v16.0. Because of this, if you try to install older versions of node as usual, you will probably experience either compilation errors when installing node or out-of-memory errors while running your code.&lt;/p&gt; &#xA;&lt;p&gt;So, if you want to run a version prior to v16.0 on an M1 Mac, it may be best to compile node targeting the &lt;code&gt;x86_64&lt;/code&gt; Intel architecture so that Rosetta 2 can translate the &lt;code&gt;x86_64&lt;/code&gt; processor instructions to ARM-based Apple Silicon instructions. Here&#39;s what you will need to do:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Rosetta, if you haven&#39;t already done so&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ softwareupdate --install-rosetta&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You might wonder, &#34;how will my M1 Mac know to use Rosetta for a version of node compiled for an Intel chip?&#34;. If an executable contains only Intel instructions, macOS will automatically use Rosetta to translate the instructions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open a shell that&#39;s running using Rosetta&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ arch -x86_64 zsh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note: This same thing can also be accomplished by finding the Terminal or iTerm App in Finder, right clicking, selecting &#34;Get Info&#34;, and then checking the box labeled &#34;Open using Rosetta&#34;.&lt;/p&gt; &lt;p&gt;Note: This terminal session is now running in &lt;code&gt;zsh&lt;/code&gt;. If &lt;code&gt;zsh&lt;/code&gt; is not the shell you typically use, &lt;code&gt;nvm&lt;/code&gt; may not be &lt;code&gt;source&lt;/code&gt;&#39;d automatically like it probably is for your usual shell through your dotfiles. If that&#39;s the case, make sure to source &lt;code&gt;nvm&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ source &#34;${NVM_DIR}/nvm.sh&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install whatever older version of node you are interested in. Let&#39;s use 12.22.1 as an example. This will fetch the node source code and compile it, which will take several minutes.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ nvm install v12.22.1 --shared-zlib&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note: You&#39;re probably curious why &lt;code&gt;--shared-zlib&lt;/code&gt; is included. There&#39;s a bug in recent versions of Apple&#39;s system &lt;code&gt;clang&lt;/code&gt; compiler. If one of these broken versions is installed on your system, the above step will likely still succeed even if you didn&#39;t include the &lt;code&gt;--shared-zlib&lt;/code&gt; flag. However, later, when you attempt to &lt;code&gt;npm install&lt;/code&gt; something using your old version of node.js, you will see &lt;code&gt;incorrect data check&lt;/code&gt; errors. If you want to avoid the possible hassle of dealing with this, include that flag. For more details, see &lt;a href=&#34;https://github.com/nodejs/node/issues/39313&#34;&gt;this issue&lt;/a&gt; and &lt;a href=&#34;https://github.com/nodejs/node/issues/39313#issuecomment-902395576&#34;&gt;this comment&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Exit back to your native shell.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ exit&#xA;$ arch&#xA;arm64&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note: If you selected the box labeled &#34;Open using Rosetta&#34; rather than running the CLI command in the second step, you will see &lt;code&gt;i386&lt;/code&gt; here. Unless you have another reason to have that box selected, you can deselect it now.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Check to make sure the architecture is correct. &lt;code&gt;x64&lt;/code&gt; is the abbreviation for &lt;code&gt;x86_64&lt;/code&gt;, which is what you want to see.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ node -p process.arch&#xA;x64&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now you should be able to use node as usual.&lt;/p&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;Currently, the sole maintainer is &lt;a href=&#34;https://github.com/ljharb&#34;&gt;@ljharb&lt;/a&gt; - more maintainers are quite welcome, and we hope to add folks to the team over time. &lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/GOVERNANCE.md&#34;&gt;Governance&lt;/a&gt; will be re-evaluated as the project evolves.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/nvm-sh/nvm/master/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright notice&lt;/h2&gt; &#xA;&lt;p&gt;Copyright &lt;a href=&#34;https://openjsf.org&#34;&gt;OpenJS Foundation&lt;/a&gt; and &lt;code&gt;nvm&lt;/code&gt; contributors. All rights reserved. The &lt;a href=&#34;https://openjsf.org&#34;&gt;OpenJS Foundation&lt;/a&gt; has registered trademarks and uses trademarks. For a list of trademarks of the &lt;a href=&#34;https://openjsf.org&#34;&gt;OpenJS Foundation&lt;/a&gt;, please see our &lt;a href=&#34;https://trademark-policy.openjsf.org/&#34;&gt;Trademark Policy&lt;/a&gt; and &lt;a href=&#34;https://trademark-list.openjsf.org/&#34;&gt;Trademark List&lt;/a&gt;. Node.js is a trademark of Joyent, Inc. and is used with its permission. Trademarks and logos not indicated on the &lt;a href=&#34;https://trademark-list.openjsf.org&#34;&gt;list of OpenJS Foundation trademarks&lt;/a&gt; are trademarks™ or registered® trademarks of their respective holders. Use of them does not imply any affiliation with or endorsement by them.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://openjsf.org/&#34;&gt;The OpenJS Foundation&lt;/a&gt; | &lt;a href=&#34;https://terms-of-use.openjsf.org/&#34;&gt;Terms of Use&lt;/a&gt; | &lt;a href=&#34;https://privacy-policy.openjsf.org/&#34;&gt;Privacy Policy&lt;/a&gt; | &lt;a href=&#34;https://bylaws.openjsf.org/&#34;&gt;OpenJS Foundation Bylaws&lt;/a&gt; | &lt;a href=&#34;https://trademark-policy.openjsf.org/&#34;&gt;Trademark Policy&lt;/a&gt; | &lt;a href=&#34;https://trademark-list.openjsf.org/&#34;&gt;Trademark List&lt;/a&gt; | &lt;a href=&#34;https://www.linuxfoundation.org/cookies/&#34;&gt;Cookie Policy&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jgraph/drawio-desktop</title>
    <updated>2022-05-29T01:54:10Z</updated>
    <id>tag:github.com,2022-05-29:/jgraph/drawio-desktop</id>
    <link href="https://github.com/jgraph/drawio-desktop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official electron build of diagrams.net&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;drawio-desktop&lt;/strong&gt; is a diagramming and whiteboarding desktop app based on &lt;a href=&#34;https://electronjs.org/&#34;&gt;Electron&lt;/a&gt; that wraps the &lt;a href=&#34;https://github.com/jgraph/drawio&#34;&gt;core draw.io editor&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Download built binaries from the &lt;a href=&#34;https://github.com/jgraph/drawio-desktop/releases&#34;&gt;releases section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;draw.io Desktop is designed to be completely isolated from the Internet, apart from the update process. This checks github.com at startup for a newer version and downloads it from an AWS S3 bucket owned by Github. All JavaScript files are self-contained, the Content Security Policy forbids running remotely loaded JavaScript.&lt;/p&gt; &#xA;&lt;p&gt;No diagram data is ever sent externally, nor do we send any analytics about app usage externally. This means certain functionality for which we do not have a JavaScript implementation do not work in the Desktop build, namely .vsd and Gliffy import.&lt;/p&gt; &#xA;&lt;h2&gt;Developing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;draw.io&lt;/strong&gt; is a git submodule of &lt;strong&gt;drawio-desktop&lt;/strong&gt;. To get both you need to clone recursively:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git clone --recursive https://github.com/jgraph/drawio-desktop.git&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To run this:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;npm install&lt;/code&gt; (in the root directory of this repo)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm install&lt;/code&gt; (in the drawio directory of this repo &lt;code&gt;drawio/src/main/webapp&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;export DRAWIO_ENV=dev if you want to develop/debug in dev mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm start&lt;/code&gt; &lt;em&gt;in the root directory of this repo&lt;/em&gt; runs the app. For debugging, use &lt;code&gt;npm start --enable-logging&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To release:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Update the draw.io sub-module and push the change. Add version tag before pushing to origin.&lt;/li&gt; &#xA; &lt;li&gt;Wait for the builds to complete (&lt;a href=&#34;https://travis-ci.org/jgraph/drawio-desktop&#34;&gt;https://travis-ci.org/jgraph/drawio-desktop&lt;/a&gt; and &lt;a href=&#34;https://ci.appveyor.com/project/davidjgraph/drawio-desktop&#34;&gt;https://ci.appveyor.com/project/davidjgraph/drawio-desktop&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://github.com/jgraph/drawio-desktop/releases&#34;&gt;https://github.com/jgraph/drawio-desktop/releases&lt;/a&gt;, edit the preview release.&lt;/li&gt; &#xA; &lt;li&gt;Download the windows exe and windows portable, sign them using &lt;code&gt;signtool sign /a /tr http://rfc3161timestamp.globalsign.com/advanced /td SHA256 c:/path/to/your/file.exe&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Re-upload signed file as &lt;code&gt;draw.io-windows-installer-x.y.z.exe&lt;/code&gt; and &lt;code&gt;draw.io-windows-no-installer-x.y.z.exe&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add release notes&lt;/li&gt; &#xA; &lt;li&gt;Publish release&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: In Windows release, when using both x64 and is32 as arch, the result is one big file with both archs. This is why we split them.&lt;/p&gt; &#xA;&lt;h2&gt;Open-source, not open-contribution&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.sqlite.org/copyright.html&#34;&gt;Similar to SQLite&lt;/a&gt;, diagrams.net is open source but closed to contributions.&lt;/p&gt; &#xA;&lt;p&gt;The level of complexity of this project means that even simple changes can break a &lt;em&gt;lot&lt;/em&gt; of other moving parts. The amount of testing required is far more than it first seems. If we were to receive a PR, we&#39;d have to basically throw it away and write it how we want it to be implemented.&lt;/p&gt; &#xA;&lt;p&gt;We are grateful for community involvement, bug reports, &amp;amp; feature requests. We do not wish to come off as anything but welcoming, however, we&#39;ve made the decision to keep this project closed to contributions for the long term viability of the project.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ohmyzsh/ohmyzsh</title>
    <updated>2022-05-29T01:54:10Z</updated>
    <id>tag:github.com,2022-05-29:/ohmyzsh/ohmyzsh</id>
    <link href="https://github.com/ohmyzsh/ohmyzsh" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🙃 A delightful community-driven (with 2,000+ contributors) framework for managing your zsh configuration. Includes 300+ optional plugins (rails, git, macOS, hub, docker, homebrew, node, php, python, etc), 140+ themes to spice up your morning, and an auto-update tool so that makes it easy to keep up with the latest updates from the community.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://ohmyzsh.s3.amazonaws.com/omz-ansi-github.png&#34; alt=&#34;Oh My Zsh&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Oh My Zsh is an open source, community-driven framework for managing your &lt;a href=&#34;https://www.zsh.org/&#34;&gt;zsh&lt;/a&gt; configuration.&lt;/p&gt; &#xA;&lt;p&gt;Sounds boring. Let&#39;s try again.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Oh My Zsh will not make you a 10x developer...but you may feel like one.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once installed, your terminal shell will become the talk of the town &lt;em&gt;or your money back!&lt;/em&gt; With each keystroke in your command prompt, you&#39;ll take advantage of the hundreds of powerful plugins and beautiful themes. Strangers will come up to you in cafés and ask you, &lt;em&gt;&#34;that is amazing! are you some sort of genius?&#34;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Finally, you&#39;ll begin to get the sort of attention that you have always felt you deserved. ...or maybe you&#39;ll use the time that you&#39;re saving to start flossing more often. 😬&lt;/p&gt; &#xA;&lt;p&gt;To learn more, visit &lt;a href=&#34;https://ohmyz.sh&#34;&gt;ohmyz.sh&lt;/a&gt;, follow &lt;a href=&#34;https://twitter.com/ohmyzsh&#34;&gt;@ohmyzsh&lt;/a&gt; on Twitter, and join us on &lt;a href=&#34;https://discord.gg/ohmyzsh&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/ohmyzsh/ohmyzsh/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=ohmyzsh&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/ohmyzsh?label=Follow+@ohmyzsh&amp;amp;style=flat&#34; alt=&#34;Follow @ohmyzsh&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/ohmyzsh&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/642496866407284746&#34; alt=&#34;Discord server&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitpod.io/#https://github.com/ohmyzsh/ohmyzsh&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gitpod-ready-blue?logo=gitpod&#34; alt=&#34;Gitpod ready&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://huntr.dev/bounties/disclose/?utm_campaign=ohmyzsh%2Fohmyzsh&amp;amp;utm_medium=social&amp;amp;utm_source=github&amp;amp;target=https%3A%2F%2Fgithub.com%2Fohmyzsh%2Fohmyzsh&#34;&gt;&lt;img src=&#34;https://cdn.huntr.dev/huntr_security_badge_mono.svg?sanitize=true&#34; alt=&#34;huntr.dev&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Table of Contents&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/#basic-installation&#34;&gt;Basic Installation&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/#manual-inspection&#34;&gt;Manual inspection&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/#using-oh-my-zsh&#34;&gt;Using Oh My Zsh&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/#plugins&#34;&gt;Plugins&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/#enabling-plugins&#34;&gt;Enabling Plugins&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/#using-plugins&#34;&gt;Using Plugins&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/#themes&#34;&gt;Themes&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/#selecting-a-theme&#34;&gt;Selecting a Theme&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/#advanced-topics&#34;&gt;Advanced Topics&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/#advanced-installation&#34;&gt;Advanced Installation&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/#custom-directory&#34;&gt;Custom Directory&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/#unattended-install&#34;&gt;Unattended install&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/#installing-from-a-forked-repository&#34;&gt;Installing from a forked repository&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/#manual-installation&#34;&gt;Manual Installation&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/#installation-problems&#34;&gt;Installation Problems&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/#custom-plugins-and-themes&#34;&gt;Custom Plugins and Themes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/#getting-updates&#34;&gt;Getting Updates&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/#manual-updates&#34;&gt;Manual Updates&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/#uninstalling-oh-my-zsh&#34;&gt;Uninstalling Oh My Zsh&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/#how-do-i-contribute-to-oh-my-zsh&#34;&gt;How do I contribute to Oh My Zsh?&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/#do-not-send-us-themes&#34;&gt;Do NOT send us themes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/#follow-us&#34;&gt;Follow Us&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/#merchandise&#34;&gt;Merchandise&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/#about-planet-argon&#34;&gt;About Planet Argon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A Unix-like operating system: macOS, Linux, BSD. On Windows: WSL2 is preferred, but cygwin or msys also mostly work.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zsh.org&#34;&gt;Zsh&lt;/a&gt; should be installed (v4.3.9 or more recent is fine but we prefer 5.0.8 and newer). If not pre-installed (run &lt;code&gt;zsh --version&lt;/code&gt; to confirm), check the following wiki instructions here: &lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh/wiki/Installing-ZSH&#34;&gt;Installing ZSH&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;curl&lt;/code&gt; or &lt;code&gt;wget&lt;/code&gt; should be installed&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git&lt;/code&gt; should be installed (recommended v2.4.11 or higher)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Basic Installation&lt;/h3&gt; &#xA;&lt;p&gt;Oh My Zsh is installed by running one of the following commands in your terminal. You can install this via the command-line with either &lt;code&gt;curl&lt;/code&gt;, &lt;code&gt;wget&lt;/code&gt; or another similar tool.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Method&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;curl&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;sh -c &#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;wget&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;sh -c &#34;$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;fetch&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;sh -c &#34;$(fetch -o - https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;Note that any previous &lt;code&gt;.zshrc&lt;/code&gt; will be renamed to &lt;code&gt;.zshrc.pre-oh-my-zsh&lt;/code&gt;. After installation, you can move the configuration you want to preserve into the new &lt;code&gt;.zshrc&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Manual inspection&lt;/h4&gt; &#xA;&lt;p&gt;It&#39;s a good idea to inspect the install script from projects you don&#39;t yet know. You can do that by downloading the install script first, looking through it so everything looks normal, then running it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh&#xA;sh install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using Oh My Zsh&lt;/h2&gt; &#xA;&lt;h3&gt;Plugins&lt;/h3&gt; &#xA;&lt;p&gt;Oh My Zsh comes with a shitload of plugins for you to take advantage of. You can take a look in the &lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins&#34;&gt;plugins&lt;/a&gt; directory and/or the &lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins&#34;&gt;wiki&lt;/a&gt; to see what&#39;s currently available.&lt;/p&gt; &#xA;&lt;h4&gt;Enabling Plugins&lt;/h4&gt; &#xA;&lt;p&gt;Once you spot a plugin (or several) that you&#39;d like to use with Oh My Zsh, you&#39;ll need to enable them in the &lt;code&gt;.zshrc&lt;/code&gt; file. You&#39;ll find the zshrc file in your &lt;code&gt;$HOME&lt;/code&gt; directory. Open it with your favorite text editor and you&#39;ll see a spot to list all the plugins you want to load.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;vi ~/.zshrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, this might begin to look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;plugins=(&#xA;  git&#xA;  bundler&#xA;  dotenv&#xA;  macos&#xA;  rake&#xA;  rbenv&#xA;  ruby&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note that the plugins are separated by whitespace (spaces, tabs, new lines...). &lt;strong&gt;Do not&lt;/strong&gt; use commas between them or it will break.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Using Plugins&lt;/h4&gt; &#xA;&lt;p&gt;Each built-in plugin includes a &lt;strong&gt;README&lt;/strong&gt;, documenting it. This README should show the aliases (if the plugin adds any) and extra goodies that are included in that particular plugin.&lt;/p&gt; &#xA;&lt;h3&gt;Themes&lt;/h3&gt; &#xA;&lt;p&gt;We&#39;ll admit it. Early in the Oh My Zsh world, we may have gotten a bit too theme happy. We have over one hundred and fifty themes now bundled. Most of them have &lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh/wiki/Themes&#34;&gt;screenshots&lt;/a&gt; on the wiki (We are working on updating this!). Check them out!&lt;/p&gt; &#xA;&lt;h4&gt;Selecting a Theme&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;Robby&#39;s theme is the default one. It&#39;s not the fanciest one. It&#39;s not the simplest one. It&#39;s just the right one (for him).&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once you find a theme that you&#39;d like to use, you will need to edit the &lt;code&gt;~/.zshrc&lt;/code&gt; file. You&#39;ll see an environment variable (all caps) in there that looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ZSH_THEME=&#34;robbyrussell&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use a different theme, simply change the value to match the name of your desired theme. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ZSH_THEME=&#34;agnoster&#34; # (this is one of the fancy ones)&#xA;# see https://github.com/ohmyzsh/ohmyzsh/wiki/Themes#agnoster&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: many themes require installing a &lt;a href=&#34;https://github.com/powerline/fonts&#34;&gt;Powerline Font&lt;/a&gt; or a &lt;a href=&#34;https://github.com/ryanoasis/nerd-fonts&#34;&gt;Nerd Font&lt;/a&gt; in order to render properly. Without them, these themes will render &lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh/wiki/FAQ#i-have-a-weird-character-in-my-prompt&#34;&gt;weird prompt symbols&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Open up a new terminal window and your prompt should look something like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/2618447/6316862/70f58fb6-ba03-11e4-82c9-c083bf9a6574.png&#34; alt=&#34;Agnoster theme&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In case you did not find a suitable theme for your needs, please have a look at the wiki for &lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh/wiki/External-themes&#34;&gt;more of them&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re feeling feisty, you can let the computer select one randomly for you each time you open a new terminal window.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ZSH_THEME=&#34;random&#34; # (...please let it be pie... please be some pie..)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And if you want to pick random theme from a list of your favorite themes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ZSH_THEME_RANDOM_CANDIDATES=(&#xA;  &#34;robbyrussell&#34;&#xA;  &#34;agnoster&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you only know which themes you don&#39;t like, you can add them similarly to an ignored list:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ZSH_THEME_RANDOM_IGNORED=(pygmalion tjkirch_mod)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;FAQ&lt;/h3&gt; &#xA;&lt;p&gt;If you have some more questions or issues, you might find a solution in our &lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh/wiki/FAQ&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Advanced Topics&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re the type that likes to get their hands dirty, these sections might resonate.&lt;/p&gt; &#xA;&lt;h3&gt;Advanced Installation&lt;/h3&gt; &#xA;&lt;p&gt;Some users may want to manually install Oh My Zsh, or change the default path or other settings that the installer accepts (these settings are also documented at the top of the install script).&lt;/p&gt; &#xA;&lt;h4&gt;Custom Directory&lt;/h4&gt; &#xA;&lt;p&gt;The default location is &lt;code&gt;~/.oh-my-zsh&lt;/code&gt; (hidden in your home directory, you can access it with &lt;code&gt;cd ~/.oh-my-zsh&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to change the install directory with the &lt;code&gt;ZSH&lt;/code&gt; environment variable, either by running &lt;code&gt;export ZSH=/your/path&lt;/code&gt; before installing, or by setting it before the end of the install pipeline like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ZSH=&#34;$HOME/.dotfiles/oh-my-zsh&#34; sh install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Unattended install&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re running the Oh My Zsh install script as part of an automated install, you can pass the &lt;code&gt;--unattended&lt;/code&gt; flag to the &lt;code&gt;install.sh&lt;/code&gt; script. This will have the effect of not trying to change the default shell, and it also won&#39;t run &lt;code&gt;zsh&lt;/code&gt; when the installation has finished.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sh -c &#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&#34; &#34;&#34; --unattended&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Installing from a forked repository&lt;/h4&gt; &#xA;&lt;p&gt;The install script also accepts these variables to allow installation of a different repository:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;REPO&lt;/code&gt; (default: &lt;code&gt;ohmyzsh/ohmyzsh&lt;/code&gt;): this takes the form of &lt;code&gt;owner/repository&lt;/code&gt;. If you set this variable, the installer will look for a repository at &lt;code&gt;https://github.com/{owner}/{repository}&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;REMOTE&lt;/code&gt; (default: &lt;code&gt;https://github.com/${REPO}.git&lt;/code&gt;): this is the full URL of the git repository clone. You can use this setting if you want to install from a fork that is not on GitHub (GitLab, Bitbucket...) or if you want to clone with SSH instead of HTTPS (&lt;code&gt;git@github.com:user/project.git&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;&lt;em&gt;NOTE: it&#39;s incompatible with setting the &lt;code&gt;REPO&lt;/code&gt; variable. This setting will take precedence.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;BRANCH&lt;/code&gt; (default: &lt;code&gt;master&lt;/code&gt;): you can use this setting if you want to change the default branch to be checked out when cloning the repository. This might be useful for testing a Pull Request, or if you want to use a branch other than &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;REPO=apjanke/oh-my-zsh BRANCH=edge sh install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Manual Installation&lt;/h4&gt; &#xA;&lt;h5&gt;1. Clone the repository &#xA; &lt;!-- omit in toc --&gt;&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/ohmyzsh/ohmyzsh.git ~/.oh-my-zsh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;2. &lt;em&gt;Optionally&lt;/em&gt;, backup your existing &lt;code&gt;~/.zshrc&lt;/code&gt; file &#xA; &lt;!-- omit in toc --&gt;&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cp ~/.zshrc ~/.zshrc.orig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;3. Create a new zsh configuration file &#xA; &lt;!-- omit in toc --&gt;&lt;/h5&gt; &#xA;&lt;p&gt;You can create a new zsh config file by copying the template that we have included for you.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;4. Change your default shell &#xA; &lt;!-- omit in toc --&gt;&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;chsh -s $(which zsh)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You must log out from your user session and log back in to see this change.&lt;/p&gt; &#xA;&lt;h5&gt;5. Initialize your new zsh configuration &#xA; &lt;!-- omit in toc --&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Once you open up a new terminal window, it should load zsh with Oh My Zsh&#39;s configuration.&lt;/p&gt; &#xA;&lt;h3&gt;Installation Problems&lt;/h3&gt; &#xA;&lt;p&gt;If you have any hiccups installing, here are a few common fixes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You &lt;em&gt;might&lt;/em&gt; need to modify your &lt;code&gt;PATH&lt;/code&gt; in &lt;code&gt;~/.zshrc&lt;/code&gt; if you&#39;re not able to find some commands after switching to &lt;code&gt;oh-my-zsh&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you installed manually or changed the install location, check the &lt;code&gt;ZSH&lt;/code&gt; environment variable in &lt;code&gt;~/.zshrc&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Custom Plugins and Themes&lt;/h3&gt; &#xA;&lt;p&gt;If you want to override any of the default behaviors, just add a new file (ending in &lt;code&gt;.zsh&lt;/code&gt;) in the &lt;code&gt;custom/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;If you have many functions that go well together, you can put them as a &lt;code&gt;XYZ.plugin.zsh&lt;/code&gt; file in the &lt;code&gt;custom/plugins/&lt;/code&gt; directory and then enable this plugin.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to override the functionality of a plugin distributed with Oh My Zsh, create a plugin of the same name in the &lt;code&gt;custom/plugins/&lt;/code&gt; directory and it will be loaded instead of the one in &lt;code&gt;plugins/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Updates&lt;/h2&gt; &#xA;&lt;p&gt;By default, you will be prompted to check for updates every 2 weeks. You can choose other update modes by adding a line to your &lt;code&gt;~/.zshrc&lt;/code&gt; file, &lt;strong&gt;before Oh My Zsh is loaded&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Automatic update without confirmation prompt:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;zstyle &#39;:omz:update&#39; mode auto&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Just offer a reminder every few days, if there are updates available:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;zstyle &#39;:omz:update&#39; mode reminder&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To disable automatic updates entirely:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;zstyle &#39;:omz:update&#39; mode disabled&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;NOTE: you can control how often Oh My Zsh checks for updates with the following setting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# This will check for updates every 7 days&#xA;zstyle &#39;:omz:update&#39; frequency 7&#xA;# This will check for updates every time you open the terminal (not recommended)&#xA;zstyle &#39;:omz:update&#39; frequency 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual Updates&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d like to update at any point in time (maybe someone just released a new plugin and you don&#39;t want to wait a week?) you just need to run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;omz update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Magic! 🎉&lt;/p&gt; &#xA;&lt;h2&gt;Uninstalling Oh My Zsh&lt;/h2&gt; &#xA;&lt;p&gt;Oh My Zsh isn&#39;t for everyone. We&#39;ll miss you, but we want to make this an easy breakup.&lt;/p&gt; &#xA;&lt;p&gt;If you want to uninstall &lt;code&gt;oh-my-zsh&lt;/code&gt;, just run &lt;code&gt;uninstall_oh_my_zsh&lt;/code&gt; from the command-line. It will remove itself and revert your previous &lt;code&gt;bash&lt;/code&gt; or &lt;code&gt;zsh&lt;/code&gt; configuration.&lt;/p&gt; &#xA;&lt;h2&gt;How do I contribute to Oh My Zsh?&lt;/h2&gt; &#xA;&lt;p&gt;Before you participate in our delightful community, please read the &lt;a href=&#34;https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m far from being a &lt;a href=&#34;https://www.zsh.org/&#34;&gt;Zsh&lt;/a&gt; expert and suspect there are many ways to improve – if you have ideas on how to make the configuration easier to maintain (and faster), don&#39;t hesitate to fork and send pull requests!&lt;/p&gt; &#xA;&lt;p&gt;We also need people to test out pull requests. So take a look through &lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh/issues&#34;&gt;the open issues&lt;/a&gt; and help where you can.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Do NOT send us themes&lt;/h3&gt; &#xA;&lt;p&gt;We have (more than) enough themes for the time being. Please add your theme to the &lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh/wiki/External-themes&#34;&gt;external themes&lt;/a&gt; wiki page.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Oh My Zsh has a vibrant community of happy users and delightful contributors. Without all the time and help from our contributors, it wouldn&#39;t be so awesome.&lt;/p&gt; &#xA;&lt;p&gt;Thank you so much!&lt;/p&gt; &#xA;&lt;h2&gt;Follow Us&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re on social media:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/ohmyzsh&#34;&gt;@ohmyzsh&lt;/a&gt; on Twitter. You should follow it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.facebook.com/Oh-My-Zsh-296616263819290/&#34;&gt;Facebook&lt;/a&gt; poke us.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.instagram.com/_ohmyzsh/&#34;&gt;Instagram&lt;/a&gt; tag us in your post showing Oh My Zsh!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/ohmyzsh&#34;&gt;Discord&lt;/a&gt; to chat with us!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Merchandise&lt;/h2&gt; &#xA;&lt;p&gt;We have &lt;a href=&#34;https://shop.planetargon.com/collections/oh-my-zsh?utm_source=github&#34;&gt;stickers, shirts, and coffee mugs available&lt;/a&gt; for you to show off your love of Oh My Zsh. Again, you will become the talk of the town!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Oh My Zsh is released under the &lt;a href=&#34;https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/LICENSE.txt&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;About Planet Argon&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://pa-github-assets.s3.amazonaws.com/PARGON_logo_digital_COL-small.jpg&#34; alt=&#34;Planet Argon&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Oh My Zsh was started by the team at &lt;a href=&#34;https://www.planetargon.com/?utm_source=github&#34;&gt;Planet Argon&lt;/a&gt;, a &lt;a href=&#34;https://www.planetargon.com/skills/ruby-on-rails-development?utm_source=github&#34;&gt;Ruby on Rails development agency&lt;/a&gt;. Check out our &lt;a href=&#34;https://www.planetargon.com/open-source?utm_source=github&#34;&gt;other open source projects&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gothinkster/realworld</title>
    <updated>2022-05-29T01:54:10Z</updated>
    <id>tag:github.com,2022-05-29:/gothinkster/realworld</id>
    <link href="https://github.com/gothinkster/realworld" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&#34;The mother of all demo apps&#34; — Exemplary fullstack Medium.com clone powered by React, Angular, Node, Django, and many more 🏅&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gothinkster/realworld/main/media/realworld-dual-mode.png&#34; alt=&#34;RealWorld Example Applications&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34; style=&#34;margin-top: 30px;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/gothinkster/realworld/main/media/stacks_hr.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://demo.realworld.io/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gothinkster/realworld/main/media/conduit_l.png&#34; align=&#34;right&#34; width=&#34;250px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;See how &lt;em&gt;the exact same&lt;/em&gt; Medium.com clone (called &lt;a href=&#34;https://demo.realworld.io&#34;&gt;Conduit&lt;/a&gt;) is built using different &lt;a href=&#34;https://codebase.show/projects/realworld?category=frontend&#34;&gt;frontends&lt;/a&gt; and &lt;a href=&#34;https://codebase.show/projects/realworld?category=backend&#34;&gt;backends&lt;/a&gt;. Yes, you can mix and match them, because &lt;strong&gt;they all adhere to the same &lt;a href=&#34;https://realworld-docs.netlify.app/docs/specs/backend-specs/introduction&#34;&gt;API spec&lt;/a&gt;&lt;/strong&gt; 😮😎&lt;/h3&gt; &#xA;&lt;p&gt;While most &#34;todo&#34; demos provide an excellent cursory glance at a framework&#39;s capabilities, they typically don&#39;t convey the knowledge &amp;amp; perspective required to actually build &lt;em&gt;real&lt;/em&gt; applications with it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;RealWorld&lt;/strong&gt; solves this by allowing you to choose any frontend (React, Angular, &amp;amp; more) and any backend (Node, Django, &amp;amp; more) and see how they power a real-world, beautifully designed full-stack app called &lt;a href=&#34;https://demo.realworld.io&#34;&gt;&lt;strong&gt;Conduit&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Read the &lt;a href=&#34;https://medium.com/@ericsimons/introducing-realworld-6016654d36b5&#34;&gt;full blog post announcing RealWorld on Medium.&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Join us on &lt;a href=&#34;https://github.com/gothinkster/realworld/discussions&#34;&gt;GitHub Discussions!&lt;/a&gt; 🎉&lt;/p&gt; &#xA;&lt;h1&gt;Implementations&lt;/h1&gt; &#xA;&lt;p&gt;Over 100 implementations have been created using various languages, libraries, and frameworks.&lt;/p&gt; &#xA;&lt;p&gt;Explore them on &lt;a href=&#34;https://codebase.show/projects/realworld&#34;&gt;&lt;strong&gt;CodebaseShow&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Create a new implementation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://realworld-docs.netlify.app/docs/implementation-creation/introduction&#34;&gt;&lt;strong&gt;Create a new implementation &amp;gt;&amp;gt;&amp;gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or you can &lt;a href=&#34;https://github.com/gothinkster/realworld/discussions/categories/wip-implementations&#34;&gt;view upcoming implementations (WIPs)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Learn more&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@ericsimons/introducing-realworld-6016654d36b5&#34;&gt;&#34;Introducing RealWorld 🙌&#34;&lt;/a&gt; by Eric Simons&lt;/li&gt; &#xA; &lt;li&gt;Every tutorial is built against the same &lt;a href=&#34;https://raw.githubusercontent.com/gothinkster/realworld/main/api/&#34;&gt;API spec&lt;/a&gt; to ensure modularity of every frontend &amp;amp; backend&lt;/li&gt; &#xA; &lt;li&gt;Every frontend utilizes the same handcrafted &lt;a href=&#34;https://github.com/gothinkster/conduit-bootstrap-template&#34;&gt;Bootstrap 4 theme&lt;/a&gt; for identical UI/UX&lt;/li&gt; &#xA; &lt;li&gt;There is a hosted version of the backend API available for public usage, no API keys are required&lt;/li&gt; &#xA; &lt;li&gt;Interested in creating a new RealWorld stack? View our &lt;a href=&#34;https://realworld-docs.netlify.app/docs/implementation-creation/introduction&#34;&gt;starter guide &amp;amp; spec&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Active Maintainers&lt;/h1&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/geromegrignon&#34;&gt;Gérôme Grignon&lt;/a&gt; - Maintainer&lt;/h4&gt; &#xA;&lt;img align=&#34;left&#34; width=&#34;40&#34; height=&#34;40&#34; src=&#34;https://avatars.githubusercontent.com/u/32737308?v=4&#34;&gt; &#xA;&lt;p&gt;Gérôme is a Software Engineer at Sfeir. He&#39;s an open-source enthusiast.&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/mvila&#34;&gt;Manuel Vila&lt;/a&gt; - Maintainer&lt;/h4&gt; &#xA;&lt;img align=&#34;left&#34; width=&#34;40&#34; height=&#34;40&#34; src=&#34;https://avatars.githubusercontent.com/u/381671?v=40&#34;&gt; &#xA;&lt;p&gt;Manuel is an independent Software Engineer, creator of the &lt;a href=&#34;https://layrjs.com&#34;&gt;Layr framework&lt;/a&gt; and the &lt;a href=&#34;https://codebase.show/&#34;&gt;CodebaseShow website&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://thinkster.io&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gothinkster/realworld/main/media/end.png&#34; alt=&#34;Brought to you by Thinkster&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>awslabs/amazon-eks-ami</title>
    <updated>2022-05-29T01:54:10Z</updated>
    <id>tag:github.com,2022-05-29:/awslabs/amazon-eks-ami</id>
    <link href="https://github.com/awslabs/amazon-eks-ami" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Packer configuration for building a custom EKS AMI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Amazon EKS AMI Build Specification&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains resources and configuration scripts for building a custom Amazon EKS AMI with &lt;a href=&#34;https://www.packer.io/&#34;&gt;HashiCorp Packer&lt;/a&gt;. This is the same configuration that Amazon EKS uses to create the official Amazon EKS-optimized AMI.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;You must have &lt;a href=&#34;https://www.packer.io/&#34;&gt;Packer&lt;/a&gt; installed on your local system. For more information, see &lt;a href=&#34;https://www.packer.io/docs/install/index.html&#34;&gt;Installing Packer&lt;/a&gt; in the Packer documentation. You must also have AWS account credentials configured so that Packer can make calls to AWS API operations on your behalf. For more information, see &lt;a href=&#34;https://www.packer.io/docs/builders/amazon.html#specifying-amazon-credentials&#34;&gt;Authentication&lt;/a&gt; in the Packer documentation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; The default instance type to build this AMI is an &lt;code&gt;m4.large&lt;/code&gt; and does not qualify for the AWS free tier. You are charged for any instances created when building this AMI.&lt;/p&gt; &#xA;&lt;h2&gt;Building the AMI&lt;/h2&gt; &#xA;&lt;p&gt;A Makefile is provided to build the AMI, but it is just a small wrapper around invoking Packer directly. You can initiate the build process by running the following command in the root of this repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Makefile runs Packer with the &lt;code&gt;eks-worker-al2.json&lt;/code&gt; build specification template and the &lt;a href=&#34;https://www.packer.io/docs/builders/amazon-ebs.html&#34;&gt;amazon-ebs&lt;/a&gt; builder. An instance is launched and the Packer &lt;a href=&#34;https://www.packer.io/docs/provisioners/shell.html&#34;&gt;Shell Provisioner&lt;/a&gt; runs the &lt;code&gt;install-worker.sh&lt;/code&gt; script on the instance to install software and perform other necessary configuration tasks. Then, Packer creates an AMI from the instance and terminates the instance after the AMI is created.&lt;/p&gt; &#xA;&lt;h2&gt;Using the AMI&lt;/h2&gt; &#xA;&lt;p&gt;If you are just getting started with Amazon EKS, we recommend that you follow our &lt;a href=&#34;https://docs.aws.amazon.com/eks/latest/userguide/getting-started.html&#34;&gt;Getting Started&lt;/a&gt; chapter in the Amazon EKS User Guide. If you already have a cluster, and you want to launch a node group with your new AMI, see &lt;a href=&#34;https://docs.aws.amazon.com/eks/latest/userguide/launch-workers.html&#34;&gt;Launching Amazon EKS Worker Nodes&lt;/a&gt; in the Amazon EKS User Guide.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/amazon-eks-ami/master/amazon-eks-nodegroup.yaml&#34;&gt;&lt;code&gt;amazon-eks-nodegroup.yaml&lt;/code&gt;&lt;/a&gt; AWS CloudFormation template in this repository is provided to launch a node group with the new AMI ID that is returned when Packer finishes building. Note that there is important Amazon EC2 user data in this CloudFormation template that bootstraps the worker nodes when they are launched so that they can register with your Amazon EKS cluster. Your nodes cannot register properly without this user data.&lt;/p&gt; &#xA;&lt;h3&gt;Compatibility with CloudFormation Template&lt;/h3&gt; &#xA;&lt;p&gt;The CloudFormation template for EKS Nodes is published in the S3 bucket &lt;code&gt;amazon-eks&lt;/code&gt; under the path &lt;code&gt;cloudformation&lt;/code&gt;. You can see a list of previous versions by running &lt;code&gt;aws s3 ls s3://amazon-eks/cloudformation/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;CloudFormation Version&lt;/th&gt; &#xA;   &lt;th&gt;EKS AMI versions&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aws/amazon-vpc-cni-k8s/releases&#34;&gt;amazon-vpc-cni-k8s&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2019-09-27&lt;/td&gt; &#xA;   &lt;td&gt;amazon-eks-node-(1.14,1.13,1.12,1.11)-v20190927&lt;/td&gt; &#xA;   &lt;td&gt;v1.5.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2019-09-17&lt;/td&gt; &#xA;   &lt;td&gt;amazon-eks-node-(1.14,1.13,1.12,1.11)-v20190906&lt;/td&gt; &#xA;   &lt;td&gt;v1.5.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2019-02-11&lt;/td&gt; &#xA;   &lt;td&gt;amazon-eks-node-(1.12,1.11,1.10)-v20190327&lt;/td&gt; &#xA;   &lt;td&gt;v1.3.2 (for p3dn.24xlarge instances)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2019-02-11&lt;/td&gt; &#xA;   &lt;td&gt;amazon-eks-node-(1.11,1.10)-v20190220&lt;/td&gt; &#xA;   &lt;td&gt;v1.3.2 (for p3dn.24xlarge instances)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2019-02-11&lt;/td&gt; &#xA;   &lt;td&gt;amazon-eks-node-(1.11,1.10)-v20190211&lt;/td&gt; &#xA;   &lt;td&gt;v1.3.2 (for p3dn.24xlarge instances)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2018-12-10&lt;/td&gt; &#xA;   &lt;td&gt;amazon-eks-node-(1.11,1.10)-v20181210&lt;/td&gt; &#xA;   &lt;td&gt;v1.2.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2018-11-07&lt;/td&gt; &#xA;   &lt;td&gt;amazon-eks-node-v25+&lt;/td&gt; &#xA;   &lt;td&gt;v1.2.1 (for t3 and r5 instances)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2018-08-30&lt;/td&gt; &#xA;   &lt;td&gt;amazon-eks-node-v23+&lt;/td&gt; &#xA;   &lt;td&gt;v1.1.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2018-08-21&lt;/td&gt; &#xA;   &lt;td&gt;amazon-eks-node-v23+&lt;/td&gt; &#xA;   &lt;td&gt;v1.1.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For older versions of the EKS AMI (v20-v22), you can find the CloudFormation templates in the same bucket under the path &lt;code&gt;s3://amazon-eks/1.10.3/2018-06-05/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;AL2 / Linux Kernel Information&lt;/h2&gt; &#xA;&lt;p&gt;By default, the &lt;code&gt;amazon-eks-ami&lt;/code&gt; uses a &lt;a href=&#34;https://github.com/awslabs/amazon-eks-ami/raw/e3f1b910f83ad1f27e68312e50474ea6059f052d/eks-worker-al2.json#L46&#34;&gt;source_ami_filter&lt;/a&gt; that selects the latest &lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/virtualization_types.html&#34;&gt;hvm&lt;/a&gt; AL2 AMI for the given architecture as the base AMI. For more information on what kernel versions are running on published Amazon EKS optimized Linux AMIs, see &lt;a href=&#34;https://docs.aws.amazon.com/eks/latest/userguide/eks-linux-ami-versions.html&#34;&gt;the public documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When building an AMI, you can set the &lt;code&gt;kernel_version&lt;/code&gt; to &lt;code&gt;4.14&lt;/code&gt; or &lt;code&gt;5.4&lt;/code&gt; to customize the kernel version. The &lt;a href=&#34;https://github.com/awslabs/amazon-eks-ami/raw/master/scripts/upgrade_kernel.sh#L26&#34;&gt;upgrade_kernel.sh script&lt;/a&gt; contains the logic for updating and upgrading the kernel. For Kubernetes versions 1.18 and below, it uses the &lt;code&gt;4.14&lt;/code&gt; kernel if not set, and it will install the latest patches. For Kubernetes version 1.19 and above, it uses the &lt;code&gt;5.4&lt;/code&gt; kernel if not set.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;For security issues or concerns, please do not open an issue or pull request on GitHub. Please report any suspected or confirmed security issues to AWS Security &lt;a href=&#34;https://aws.amazon.com/security/vulnerability-reporting/&#34;&gt;https://aws.amazon.com/security/vulnerability-reporting/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License Summary&lt;/h2&gt; &#xA;&lt;p&gt;This sample code is made available under a modified MIT license. See the LICENSE file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jinwyp/one_click_script</title>
    <updated>2022-05-29T01:54:10Z</updated>
    <id>tag:github.com,2022-05-29:/jinwyp/one_click_script</id>
    <link href="https://github.com/jinwyp/one_click_script" rel="alternate"></link>
    <summary type="html">&lt;p&gt;一键安装 trojan v2ray xray. Install v2ray / xray (VLESS) and trojan (trojan-go) script&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Easy install v2ray (xray) and trojan (trojan-go) script (ultimate script for all condition)&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jinwyp/one_click_script/master/README_CN.md&#34;&gt;中文文档&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hits.seeyoufarm.com&#34;&gt;&lt;img src=&#34;https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2Fjinwyp%2Fone_click_script&amp;amp;count_bg=%2379C83D&amp;amp;title_bg=%23555555&amp;amp;icon=&amp;amp;icon_color=%23E7E7E7&amp;amp;title=hits&amp;amp;edge_flat=false&#34; alt=&#34;Hits&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Thanks for support this project. Check on &lt;a href=&#34;https://www.patreon.com/linuxkernel&#34;&gt;patreon&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jinwyp/one_click_script/master/#installation&#34;&gt;Install Trojan/Trojan-go and V2ray/Xray shell script&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jinwyp/one_click_script/master/#acme&#34;&gt;Easy get SSL certificate for domains&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jinwyp/one_click_script/master/KERNEL.md&#34;&gt;Linux Kernel switcher, including all LTS kernel and latest kernel, enable BBR or BBR Plus to speed up network&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jinwyp/one_click_script/master/KERNEL.md&#34;&gt;Install wireguard and Cloudflare WARP, unlock Netflix restriction and avoid Google reCAPTCHA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jinwyp/one_click_script/master/#netflix-check&#34;&gt;Netflix available region testing shell script, support for testing through IPv6 and WARP Sock5 proxy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jinwyp/one_click_script/master/TOOL.md&#34;&gt;Install V2Ray-Poseidon, Soga, XrayR, Air-Universe shell script for V2board panel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jinwyp/one_click_script/master/dsm/readme.md&#34;&gt;PVE Proxmox VE and Synology DiskStation Manager NAS Toolkit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jinwyp/one_click_script/master/dsm/readme.md&#34;&gt;Install FRP shell script (expose local server behind a NAT or firewall to the Internet tool)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jinwyp/one_click_script/master/DNS.md&#34;&gt;How to enable DOH for DNS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jinwyp/one_click_script/master/DNS.md&#34;&gt;Install DNS server AdGuard Home and Mosdns to divert domestic and foreign dns traffic&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install and upgrade trojan/trojan-go/v2ray/xray and fully remove.&lt;/li&gt; &#xA; &lt;li&gt;Support to running trojan-go and v2ray at the same server.&lt;/li&gt; &#xA; &lt;li&gt;Support various mode, using trojan or v2ray or nginx to serve 443 port&lt;/li&gt; &#xA; &lt;li&gt;Support multi https domains with Nginx SNI on one VPS server.&lt;/li&gt; &#xA; &lt;li&gt;Support install trojan or v2ray only in order to work with exist website on one VPS.&lt;/li&gt; &#xA; &lt;li&gt;Customize trojan or v2ray working port, password and Websocket path.&lt;/li&gt; &#xA; &lt;li&gt;Support v2ray or xray vless protocol. Support Xray XTLS.&lt;/li&gt; &#xA; &lt;li&gt;Script create 10 password as default, can set prefix for these passwords.&lt;/li&gt; &#xA; &lt;li&gt;Install trojan and v2ray UI panel to easily manage users.&lt;/li&gt; &#xA; &lt;li&gt;Easily set v2ray route rules with wireguard IPv6 and Cloudflare WARP to unlock Netflix restriction and Google reCAPTCHA.&lt;/li&gt; &#xA; &lt;li&gt;Using bootstarp official template for default website content serve by nginx&lt;/li&gt; &#xA; &lt;li&gt;All working port are random generated to ensure high security.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h4&gt;via bash&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash &amp;lt;(curl -Lso- https://git.io/oneclick)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;via curl to install script&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -O https://raw.githubusercontent.com/jinwyp/one_click_script/master/trojan_v2ray_install.sh &amp;amp;&amp;amp; chmod +x ./trojan_v2ray_install.sh &amp;amp;&amp;amp; ./trojan_v2ray_install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;via wget to install script&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget --no-check-certificate https://raw.githubusercontent.com/jinwyp/one_click_script/master/trojan_v2ray_install.sh &amp;amp;&amp;amp; chmod +x ./trojan_v2ray_install.sh &amp;amp;&amp;amp; ./trojan_v2ray_install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/jinwyp/one_click_script/raw/master/docs/readme_en.png?raw=true&#34; alt=&#34;功能列表&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/jinwyp/one_click_script/raw/master/docs/readme2_en.png?raw=true&#34; alt=&#34;功能列表2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/jinwyp/one_click_script/raw/master/docs/readme3_en.png?raw=true&#34; alt=&#34;功能列表3&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Netflix-Check&lt;/h2&gt; &#xA;&lt;h3&gt;Netflix non-self-produced drama and region testing shell script&lt;/h3&gt; &#xA;&lt;h4&gt;via wget to install script&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget --no-check-certificate https://raw.githubusercontent.com/jinwyp/one_click_script/master/netflix_check.sh &amp;amp;&amp;amp; chmod +x ./netflix_check.sh &amp;amp;&amp;amp; ./netflix_check.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;acme&lt;/h2&gt; &#xA;&lt;h3&gt;Get SSL certificate for domain&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run script then choose 26 to request SSL certificate for any domains. It&#39;s better to disable CDN of your domain duiring the SSL certificate application process. Make sure the domain is resolved to the real VPS ip.&lt;/li&gt; &#xA; &lt;li&gt;Duiring the SSL certificate application process, if you can&#39;t disable CDN or the VPS only have IPv6, you can skip the IP check process to continue your following SSL certificate request.&lt;/li&gt; &#xA; &lt;li&gt;The script is using acme.sh to get SSL certificate. There are 4 providers: Let&#39;s Encrypt, BuyPass.com, ZeroSSL.com, Google. When you request too many times in one day and reach the limit of Let&#39;s Encrypt, you can switch other providers such as BuyPass.com.&lt;/li&gt; &#xA; &lt;li&gt;Normally SSL certificate need renew in three month，The script will autorenew the certificate with Cronjob by acme.sh .&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/jinwyp/one_click_script/raw/master/docs/readme4.png?raw=true&#34; alt=&#34;功能列表4&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;&lt;a href=&#34;https://letsencrypt.org/docs/rate-limits/&#34;&gt;The Rate Limits rule of Let&#39;s Encrypt&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The main limit is Certificates per Registered Domain (50 per week)&lt;/li&gt; &#xA; &lt;li&gt;You can create a maximum of 300 New Orders per account per 3 hours&lt;/li&gt; &#xA; &lt;li&gt;You can create a maximum of 10 Accounts per IP Address per 3 hours. You can create a maximum of 500 Accounts per IP Range within an IPv6 /48 per 3 hours&lt;/li&gt; &#xA; &lt;li&gt;You can combine multiple hostnames into a single certificate, up to a limit of 100 Names per Certificate&lt;/li&gt; &#xA; &lt;li&gt;You can have a maximum of 300 Pending Authorizations on your account&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;h3&gt;Preparatory work for setting up a new VPS&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;There are several work to do to secure your VPS when you set up a new VPS. It&#39;s optional but recommended.&lt;/li&gt; &#xA; &lt;li&gt;Configuring an SSH login without password. Run script then choose 26. Input your public key and save the authorized_keys file&lt;/li&gt; &#xA; &lt;li&gt;Change the SSH Default Port. Run script then choose 33. Customize your SSH login port. The default SSH port is 22, Modify the port number you want.&lt;/li&gt; &#xA; &lt;li&gt;Enable root accout login. Some VPS can&#39;t login with root as default. Run script then choose 32 to enable root accout login.&lt;/li&gt; &#xA; &lt;li&gt;Run script then choose 31 to install sofrware including Oh-my-zsh, zsh-autosuggestions, Micro editors. After finish installation, exit VPS and relogin SSH to use ZSH.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Install latest or LTS Linux kernel and enable BBR or BBR plus&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;To install latest or LTS Linux kernel. Run script then choose 1. And enter the sub menu to install Linux kernel and enable BBR+Cake. Check out more details for &lt;a href=&#34;https://raw.githubusercontent.com/jinwyp/one_click_script/master/KERNEL.md&#34;&gt;LTS Linux kernel switcher script&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Install command line trojan or v2ray&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Firstly, prefer run this script with root user. Because linux kernel installation need root privileges. And to get SSL with acme.sh also need root privileges. &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/sudo&#34;&gt;acme.sh instruction&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to install trojan. Run script &lt;code&gt;./trojan_v2ray_install.sh &lt;/code&gt;. Choose 2 to install trojan or trojan-go with no websockt. Choose 3 to install trojan-go with websocket support CDN.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to install V2ray. Run script &lt;code&gt;./trojan_v2ray_install.sh &lt;/code&gt;. Choose 11 to install V2ray or Xray with Nginx. Nginx listen 443 port and serve TLS service. During the installation, you can choose websocket or gRPC to support CDN. Choose TCP or HTTP2 or QUIC protocal will not supprot CDN.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to install V2ray using Vless. Run script &lt;code&gt;./trojan_v2ray_install.sh &lt;/code&gt;. Choose 13-17 to install V2ray or Xray. Vless listen 443 port and serve TLS service. Nginx is optional during the installation for fake website service. Also you can choose XTLS instead of TLS to improve network speed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run script &lt;code&gt;./trojan_v2ray_install.sh &lt;/code&gt;. Choose 21 to install both V2ray and trojan on same VPS. Vless listen 443 port and serve TLS service.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run script &lt;code&gt;./trojan_v2ray_install.sh &lt;/code&gt;. Choose 22 to install both V2ray and trojan/trojan-go on same VPS. trojan/trojan-go listen 443 port and serve TLS service.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run script &lt;code&gt;./trojan_v2ray_install.sh &lt;/code&gt;. Choose 23 to install both V2ray and trojan/trojan-go on same VPS. Nginx SNI listen 443 port. You need at least 2 domain for trojan and v2ray. Nginx SNI distinguishes v2ray or trojan traffic by different domain name.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Advanced Tutorials - Work with existing website or web server&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If you already have a website or other web server, you can choose 12 to install V2ray or Xray only running at non 80 and 443 port with no TLS. You need modify nginx config manually to serve TLS and redirect v2ray traffic by url or path for V2ray websocket.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you already have a website or other web server, you can choose 13-17 to install V2ray or Xray. Duiring the installation, you can choose not to install nginx. Vless serve 443 port with TLS. You need modify nginx config manually to serve the website at 80 port. V2ray or Xray will fallback non V2ray traffic to 80 port.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you already have a website or other web server, you can choose 4 to install trojan or trojan-go only running at non 443 port with TLS. You need modify nginx config manually to serve the website at 80 port. trojan or trojan-go will fallback non trojan traffic to 80 port. Pay attention that if you choose to install trojan-go, nginx must already serve at 80 port which is trojan-go fallback port. Otherwise trojan-go will stop and not running if 80 port is not served by web HTTP server. &lt;a href=&#34;https://p4gefau1t.github.io/trojan-go/basic/config/&#34;&gt;trojan-go document&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Install Web UI admin panel for trojan and v2ray&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;On a new VPS without v2ray or trojan installed. Run script &lt;code&gt;./trojan_v2ray_install.sh &lt;/code&gt;. Choose 30 to enter sub menu. Then choose 1 to install trojan UI admin panel.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On a new VPS without v2ray or trojan installed. Run script &lt;code&gt;./trojan_v2ray_install.sh &lt;/code&gt;. Choose 30 to enter sub menu. Then choose 6 or 9 to install V2ray or Xray UI admin panel. After sinish the installation. Run script and choose 26 to request SSL certificate. Then input the certificate file path on the UI admin panel config.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Unlock Region restriction for Netflix or Disney+ or other video streaming site&lt;/h3&gt; &#xA;&lt;h3&gt;Avoid showing Google CAPTCHA Human verification&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run script &lt;code&gt;./trojan_v2ray_install.sh &lt;/code&gt;. Choose 1 to enter sub menu to install linux kernel. Prefer to install linux kernel 5.10 LTS. &lt;a href=&#34;https://raw.githubusercontent.com/jinwyp/one_click_script/master/KERNEL.md&#34;&gt;More Details&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run script &lt;code&gt;./trojan_v2ray_install.sh &lt;/code&gt;. Choose 1 to enter sub menu. Then choose 2 to enable BBR and Cake. This will import VPS network speed.&lt;/li&gt; &#xA; &lt;li&gt;After reboot, rerun script &lt;code&gt;./trojan_v2ray_install.sh &lt;/code&gt;. Choose 1 to enter sub menu. Then choose 11 or 12 to Wireguard or cloudflare WARP linux client sock5 proxy.&lt;/li&gt; &#xA; &lt;li&gt;After finish Wireguard installation, rerun script &lt;code&gt;./trojan_v2ray_install.sh &lt;/code&gt;. Choose 11-17 to v2ray xray。 Duiring the installation, you can follow the instruction to unlock netflix region restriction and avoid showing Google CAPTCHA Human verification.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;You can use &lt;a href=&#34;https://www.freenom.com/zh/index.html?lang=zh&#34;&gt;freenom&lt;/a&gt; for free domain name.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Please disable your CDN acceleration duiring the installation. Such as cloudflare.com. After finish v2ray or trojan-go installation. you can enable CDN acceleration. trojan not support CDN acceleration.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/jinwyp/one_click_script/raw/master/docs/cloudflare1.jpg?raw=true&#34; alt=&#34;注意 cloudflare CDN&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Using v2ray or xray gRPC protocal for CDN acceleration, you need do some settings at cloudflare.com. Click the &#34;Network&#34; on the leftside menu. Then enable gRPC on the right page. &#34;Network =&amp;gt; gRPC&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/jinwyp/one_click_script/raw/master/docs/grpc.png?raw=true&#34; alt=&#34;注意 cloudflare CDN gRPC&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;The Cloudflare CDN worker script, Please replace the domain name with your own domain name.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;addEventListener(&#xA;    &#34;fetch&#34;, event =&amp;gt; {&#xA;        let url = new URL(event.request.url);&#xA;        url.hostname = &#34;yourdomain.xxx.xx&#34;;&#xA;        url.protocol = &#34;https&#34;;&#xA;        let request = new Request(url, event.request);&#xA;        event.respondWith(&#xA;            fetch(request)&#xA;        )&#xA;    }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Special Thanks&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sprov065/v2-ui&#34;&gt;https://github.com/sprov065/v2-ui&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Jrohy/trojan&#34;&gt;https://github.com/Jrohy/trojan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/v2fly/v2ray-core&#34;&gt;https://github.com/v2fly/v2ray-core&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/XTLS/Xray-core&#34;&gt;https://github.com/XTLS/Xray-core&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/trojan-gfw/trojan&#34;&gt;https://github.com/trojan-gfw/trojan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/p4gefau1t/trojan-go&#34;&gt;https://github.com/p4gefau1t/trojan-go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ylx2016/Linux-NetSpeed&#34;&gt;https://github.com/ylx2016/Linux-NetSpeed&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Stargazers over time&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/jinwyp/one_click_script&#34;&gt;&lt;img src=&#34;https://starchart.cc/jinwyp/one_click_script.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tegal1337/CiLocks</title>
    <updated>2022-05-29T01:54:10Z</updated>
    <id>tag:github.com,2022-05-29:/tegal1337/CiLocks</id>
    <link href="https://github.com/tegal1337/CiLocks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Crack Interface lockscreen, Metasploit and More Android/IOS Hacking&lt;/p&gt;&lt;hr&gt;&lt;pre&gt;&lt;code&gt;   _______ __               __&#xA;  / ____(_) /   ____  _____/ /_______&#xA; / /   / / /   / __ \/ ___/ //_/ ___/&#xA;/ /___/ / /___/ /_/ / /__/ ,&amp;lt; (__  )&#xA;\____/_/_____/\____/\___/_/|_/____/v2.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CiLocks | Android/IOS Hacking 📱&lt;/h3&gt; &#xA;&lt;h4&gt;Crack Interface lockscreen, Metasploit and More Android/IOS Hacking&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/license/tegal1337/CiLocks&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues/tegal1337/CiLocks&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues-closed/tegal1337/CiLocks&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://github.com/tegal1337/CiLocks/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat&#34; alt=&#34;contributions welcome&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/forks/tegal1337/CiLocks&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/tegal1337/CiLocks&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/tegal1337/CiLocks&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://img.shields.io/badge/Important-notice-red&#34;&gt; &#xA;&lt;h4&gt;Please Don&#39;t Use for illegal Activity&lt;/h4&gt; &#xA;&lt;h4&gt;Update Available V2.1 🚀&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Added New Tools &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Root Android {Supersu} Not Support All OS Version&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Jump To Adb Toolkit &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Shell&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ScreenShot&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Copy All Camera Photo&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Copy All WhatsApp Folder&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Copy All Data Storage&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Manual Copy {Costum}&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Backup Data&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Restore Data&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Permissons Reset&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Reboot&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Remove Lockscreen {Root}&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Jump To Metasploit &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Install Application&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create Payload Backdoor {Msfvenom} Singed&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Run Metasploit&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Inject Payload In Original Application&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Phone Info&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Control Android {Scrcpy}&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Brute Pin 4 Digit&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Brute Pin 6 Digit&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Brute LockScreen Using Wordlist&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Bypass LockScreen {Antiguard} Not Support All OS Version&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Reset Data&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; IP Logger (Track IP Location and Information)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; SpyCam (Take webcam shots from target just sending a malicious link)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; IOS Payload&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; FireStore Vulnerability&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Screenshoot 📷&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Screenshoot 01&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Screenshoot 02&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Screenshoot 03&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/tegal1337/CiLocks/raw/main/Screenshoot/cilocks01.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/tegal1337/CiLocks/raw/main/Screenshoot/cilocks02.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/tegal1337/CiLocks/raw/main/Screenshoot/cilocks03.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Screenshoot 04&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Screenshoot 05&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Screenshoot 06&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/tegal1337/CiLocks/raw/main/Screenshoot/cilocks04.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/tegal1337/CiLocks/raw/main/Screenshoot/cilocks05.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/tegal1337/CiLocks/raw/main/Screenshoot/cilocks06.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt update -y&#xA;&#xA;sudo apt install php nodejs npm adb scrcpy wget unzip apktool jq -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;And if needed&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install msfconsole -y &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Required&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;ADB {Android SDK}&#xA;&#xA;USB Cable&#xA;&#xA;Android Emulator {Nethunter/Termux} Root&#xA;&#xA;Or Computer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installation For Linux&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/tegal1337/CiLocks&#xA;&#xA;cd CiLocks&#xA;&#xA;chmod +x cilocks&#xA;&#xA;sudo bash cilocks &#xA;&#xA;or sudo ./cilocks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!--  After Following All Steps Just Type In Terminal **root@tegalsec:~** **./cilocks** --&gt; &#xA;&lt;p&gt;or download &lt;a href=&#34;https://github.com/tegal1337/CiLocks/releases/download/V2.1/Cilocks_V2.1.zip&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;For Android Emulator&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Install Termux/NetHunter&#xA;&#xA;Install Busybox&#xA;&#xA;Root Access&#xA;&#xA;Otg Cable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;If brute doesn&#39;t work then uncomment this code&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;# adb shell input keyevent 26&#xA;&#xA;if 5x the wrong password will automatically delay 30 seconds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Article &amp;amp; Video&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android Malware &lt;a href=&#34;https://www.instagram.com/p/CPqJAvHjQ2Q/&#34;&gt;https://www.instagram.com/p/CPqJAvHjQ2Q/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;YAFI TECH &lt;a href=&#34;https://www.youtube.com/watch?v=gYIfJUiBBWo&#34;&gt;https://www.youtube.com/watch?v=gYIfJUiBBWo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Malware Tech &lt;a href=&#34;https://www.youtube.com/watch?v=ZhBvWkGknKA&#34;&gt;https://www.youtube.com/watch?v=ZhBvWkGknKA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;KitPloit &lt;a href=&#34;https://www.kitploit.com/2021/05/cilocks-android-lockscreen-bypass.html&#34;&gt;https://www.kitploit.com/2021/05/cilocks-android-lockscreen-bypass.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Thanks to original Author of the tools used in CiLocks&lt;/h4&gt; &#xA;&lt;h4&gt;Contributors&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tegal1337/CiLocks/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat&#34; alt=&#34;contributions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dalpan.github.io&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/33548464?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Van Lyubov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://lolic0d3.github.io&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/59540270?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ali Akbar&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Reference&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/29072501/how-to-unlock-android-phone-through-adb&#34;&gt;https://stackoverflow.com/questions/29072501/how-to-unlock-android-phone-through-adb&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;http://www.hak5.org/episodes/hak5-1205&#34;&gt;http://www.hak5.org/episodes/hak5-1205&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/kosborn/p2p-adb&#34;&gt;https://github.com/kosborn/p2p-adb&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://forum.xda-developers.com/t/universal-guide-root-any-android-device-manually.2684210/&#34;&gt;https://forum.xda-developers.com/t/universal-guide-root-any-android-device-manually.2684210/&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://stackoverflow.com/questions/14685721/how-can-i-do-factory-reset-using-adb-in-android&#34;&gt;https://stackoverflow.com/questions/14685721/how-can-i-do-factory-reset-using-adb-in-android&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/Screetsec/TheFatRat&#34;&gt;https://github.com/Screetsec/TheFatRat&lt;/a&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Follow Us&lt;/h4&gt; &#xA;&lt;p&gt;Instagram: &lt;a href=&#34;https://www.instagram.com/tegalsec/&#34;&gt;https://www.instagram.com/tegalsec/&lt;/a&gt; &lt;br&gt;Facebook: &lt;a href=&#34;https://www.facebook.com/tegal1337/&#34;&gt;https://www.facebook.com/tegal1337/&lt;/a&gt; &lt;br&gt;Github : &lt;a href=&#34;https://github.com/tegal1337/&#34;&gt;https://github.com/tegal1337/&lt;/a&gt; &lt;br&gt;Website : &lt;a href=&#34;https://tegalsec.org/&#34;&gt;https://tegalsec.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tegal1337/CiLocks/main/#&#34;&gt;&lt;img src=&#34;https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif&#34; alt=&#34;Foo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Support our organization by giving donations&lt;/h4&gt; &#xA;&lt;p&gt;Bitcoin &lt;br&gt;31zr9sgjrz45WRMbjFAzdDMDZyw3a9tnU8&lt;br&gt; Dana/Ovo/Gopay &lt;br&gt;087730938323&lt;/p&gt; &#xA;&lt;h4&gt;Contact &lt;a href=&#34;mailto:mitsuhamizaki@gmail.com&#34;&gt;Email&lt;/a&gt;&lt;/h4&gt;</summary>
  </entry>
  <entry>
    <title>armbian/build</title>
    <updated>2022-05-29T01:54:10Z</updated>
    <id>tag:github.com,2022-05-29:/armbian/build</id>
    <link href="https://github.com/armbian/build" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Armbian Linux build framework&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/armbian/build/master/#build-framework&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/armbian/build/master/.github/armbian-logo.png&#34; alt=&#34;Armbian logo&#34; width=&#34;144&#34;&gt; &lt;/a&gt;&lt;br&gt; &lt;strong&gt;armbian build framework&lt;/strong&gt;&lt;br&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/armbian/build/commits&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/armbian/build/master&#34; alt=&#34;GitHub last commit (branch)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/armbian/build/actions/workflows/build-train.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/armbian/build/Build?label=build%20train&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=armbian&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/armbian?style=flat-square&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.com/invite/gNJ2fPZKvc&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/854735915313659944.svg?color=7289da&amp;amp;label=Discord%20&amp;amp;logo=discord&#34; alt=&#34;Join the Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://liberapay.com/armbian&#34;&gt;&lt;img src=&#34;https://img.shields.io/liberapay/patrons/armbian.svg?logo=liberapay&#34; alt=&#34;Become a patron&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/armbian/build/master/#what-this-project-does&#34;&gt;What this project does?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/armbian/build/master/#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/armbian/build/master/#compare-with-industry-standards&#34;&gt;Compare with industry standards&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/armbian/build/master/#download-prebuilt-images&#34;&gt;Download prebuilt images&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/armbian/build/master/#project-structure&#34;&gt;Project structure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/armbian/build/master/#contribution&#34;&gt;Contribution&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/armbian/build/master/#support&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/armbian/build/master/#contact&#34;&gt;Contact&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/armbian/build/master/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/armbian/build/master/#sponsors&#34;&gt;Sponsors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/armbian/build/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What this project does?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Builds custom Linux optimized for &lt;a href=&#34;https://en.wikipedia.org/wiki/Single-board_computer&#34;&gt;single board computers(SBCs)&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Including filesystem generation, low-level control software, kernel image compilation and bootloader compilation.&lt;/li&gt; &#xA; &lt;li&gt;Provides a consistent user experience by keeping system standards across different platforms.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;Prepare your environment&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;x64 / aarch64 machine with at least 2GB of memory and ~35GB of disk space for a VM, container or native OS,&lt;/li&gt; &#xA; &lt;li&gt;Ubuntu Jammy 22.04 x64 / aarch64 for native building or any &lt;a href=&#34;https://docs.armbian.com/Developer-Guide_Building-with-Docker/&#34;&gt;Docker&lt;/a&gt; capable x64 / aarch64 Linux for containerised,&lt;/li&gt; &#xA; &lt;li&gt;Superuser rights (configured sudo or root access).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Simply start with the build script&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt-get -y install git&#xA;git clone https://github.com/armbian/build&#xA;cd build&#xA;./compile.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/armbian/build/master/#how-to-build-an-image-or-a-kernel&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/armbian/build/master/.github/README.gif&#34; alt=&#34;Armbian logo&#34; width=&#34;100%&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Interactive graphical interface.&lt;/li&gt; &#xA; &lt;li&gt;The workspace will be prepared by installing the necessary dependencies and sources.&lt;/li&gt; &#xA; &lt;li&gt;It guides the entire process until a kernel package or ready-to-use image of the SD card is created.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Build parameter examples&lt;/h3&gt; &#xA;&lt;p&gt;Show work in progress areas in interactive mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./compile.sh EXPERT=&#34;yes&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run build framework inside Docker container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./compile.sh docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build minimal CLI Armbian Focal image for Orangepi Zero. Use modern kernel and write image to the SD card:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./compile.sh \&#xA;BOARD=orangepizero \&#xA;BRANCH=current \&#xA;RELEASE=focal \&#xA;BUILD_MINIMAL=yes \&#xA;BUILD_DESKTOP=no \&#xA;KERNEL_ONLY=no \&#xA;KERNEL_CONFIGURE=no \&#xA;CARD_DEVICE=&#34;/dev/sda&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/armbian/build/master/#additional-information&#34;&gt;Build parameters, advanced build options, user defined configuration, build with Docker?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compare with industry standards&lt;/h2&gt; &#xA;&lt;p&gt;Check similarity, advantages and disadvantages compared with leading industry standard build software.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Function&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Armbian&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Yocto&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Buildroot&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Target&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;general purpose&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;embedded&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;embedded / IOT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;U-boot and kernel&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;compiled from sources&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;compiled from sources&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;compiled from sources&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Board support maintenance &amp;nbsp;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;complete&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;outside&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;outside&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Root file system&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Debian or Ubuntu based&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;custom&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;custom&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Package manager&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;APT&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;any&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configurability&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;limited&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;large&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;large&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Initramfs support&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Getting started&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;quick&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;very slow&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;slow&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Cross compilation&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.armbian.com/download/&#34;&gt;https://www.armbian.com/download/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Armbian &lt;a href=&#34;https://docs.armbian.com/Release_Changelog/&#34;&gt;releases&lt;/a&gt; quarterly at the end of &lt;a href=&#34;https://github.com/armbian/documentation/raw/master/docs/Process_Release-Model.md&#34;&gt;February, May, August, November&lt;/a&gt;. You are welcome to propose changes to our default &lt;a href=&#34;https://github.com/armbian/build/raw/master/config/targets.conf&#34;&gt;images build list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Project structure&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;├── cache                                Work / cache directory&#xA;│&amp;nbsp;&amp;nbsp; ├── rootfs                           Compressed vanilla Debian and Ubuntu rootfilesystem cache&#xA;│&amp;nbsp;&amp;nbsp; ├── sources                          Kernel, u-boot and various drivers sources. Mainly C code&#xA;│&amp;nbsp;&amp;nbsp; ├── toolchains                       External cross compilers from Linaro™ or ARM™&#xA;├── config                               Packages repository configurations&#xA;│&amp;nbsp;&amp;nbsp; ├── targets.conf                     Board build target configuration&#xA;│&amp;nbsp;&amp;nbsp; ├── boards                           Board configurations&#xA;│&amp;nbsp;&amp;nbsp; ├── bootenv                          Initial boot loaders environments per family&#xA;│&amp;nbsp;&amp;nbsp; ├── bootscripts                      Initial Boot loaders scripts per family&#xA;│&amp;nbsp;&amp;nbsp; ├── cli                              CLI packages configurations per distribution&#xA;│&amp;nbsp;&amp;nbsp; ├── desktop                          Desktop packages configurations per distribution&#xA;│&amp;nbsp;&amp;nbsp; ├── distributions                    Distributions settings&#xA;│&amp;nbsp;&amp;nbsp; ├── kernel                           Kernel build configurations per family&#xA;│&amp;nbsp;&amp;nbsp; ├── sources                          Kernel and u-boot sources locations and scripts&#xA;│&amp;nbsp;&amp;nbsp; ├── templates                        User configuration templates which populate userpatches&#xA;│&amp;nbsp;&amp;nbsp; └── torrents                         External compiler and rootfs cache torrents&#xA;├── lib                                  Main build framework libraries&#xA;├── output                               Build artifact&#xA;│&amp;nbsp;&amp;nbsp; └── deb                              Deb packages&#xA;│&amp;nbsp;&amp;nbsp; └── images                           Bootable images - RAW or compressed&#xA;│&amp;nbsp;&amp;nbsp; └── debug                            Patch and build logs&#xA;│&amp;nbsp;&amp;nbsp; └── config                           Kernel configuration export location&#xA;│&amp;nbsp;&amp;nbsp; └── patch                            Created patches location&#xA;├── packages                             Support scripts, binary blobs, packages&#xA;│&amp;nbsp;&amp;nbsp; ├── blobs                            Wallpapers, various configs, closed source bootloaders&#xA;│&amp;nbsp;&amp;nbsp; ├── bsp-cli                          Automatically added to armbian-bsp-cli package &#xA;│&amp;nbsp;&amp;nbsp; ├── bsp-desktop                      Automatically added to armbian-bsp-desktopo package&#xA;│&amp;nbsp;&amp;nbsp; ├── bsp                              Scripts and configs overlay for rootfs&#xA;│&amp;nbsp;&amp;nbsp; └── extras-buildpkgs                 Optional compilation and packaging engine&#xA;├── patch                                Collection of patches&#xA;│&amp;nbsp;&amp;nbsp; ├── atf                              ARM trusted firmware&#xA;│&amp;nbsp;&amp;nbsp; ├── kernel                           Linux kernel patches&#xA;|   |&amp;nbsp;&amp;nbsp; └── family-branch                Per kernel family and branch&#xA;│&amp;nbsp;&amp;nbsp; ├── misc                             Linux kernel packaging patches&#xA;│&amp;nbsp;&amp;nbsp; └── u-boot                           Universal boot loader patches&#xA;|       ├── u-boot-board                 For specific board&#xA;|    &amp;nbsp;&amp;nbsp; └── u-boot-family                For entire kernel family&#xA;└── userpatches                          User: configuration patching area&#xA;    ├── lib.config                       User: framework common config/override file&#xA;    ├── config-default.conf              User: default user config file&#xA;    ├── customize-image.sh               User: script will execute just before closing the image&#xA; &amp;nbsp;&amp;nbsp; ├── atf                              User: ARM trusted firmware&#xA; &amp;nbsp;&amp;nbsp; ├── kernel                           User: Linux kernel per kernel family&#xA; &amp;nbsp;&amp;nbsp; ├── misc                             User: various&#xA; &amp;nbsp;&amp;nbsp; └── u-boot                           User: universal boot loader patches&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🙌 Contribution&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;You don&#39;t need to be a programmer to help! &lt;a href=&#34;https://forum.armbian.com/staffapplications/&#34;&gt;Check out our list&lt;/a&gt; choose what you wanna do ❤️&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The easiest way to help is by &#34;Starring&#34; our repository - it helps more people find our code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You also can maintain and develop &lt;a href=&#34;https://github.com/armbian/documentation&#34;&gt;docs&lt;/a&gt;, &lt;a href=&#34;https://github.com/armbian/ci-testing-tools&#34;&gt;CI&lt;/a&gt;, &lt;a href=&#34;https://github.com/armbian/autotests&#34;&gt;autotests&lt;/a&gt;, &lt;a href=&#34;https://forum.armbian.com/topic/4198-seed-our-torrents/&#34;&gt;seed torrents&lt;/a&gt;, help on &lt;a href=&#34;https://forum.armbian.com/topic/12631-help-on-forum-moderating/&#34;&gt;forum moderating&lt;/a&gt;, &lt;a href=&#34;https://forum.armbian.com/forum/39-armbian-project-administration/&#34;&gt;project administration&lt;/a&gt;, &lt;a href=&#34;https://www.armbian.com/donate&#34;&gt;costs&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please make sure to read the &lt;a href=&#34;https://raw.githubusercontent.com/armbian/build/master/.github/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt; before you write any code.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Community support&lt;/p&gt; &lt;p&gt;Armbian is free software and provides &lt;strong&gt;best effort help&lt;/strong&gt; through &lt;a href=&#34;https://forum.armbian.com/&#34;&gt;community forums&lt;/a&gt;. If you can&#39;t find answer there and/or with help of &lt;a href=&#34;https://www.armbian.com/search&#34;&gt;general project search engine&lt;/a&gt; and &lt;a href=&#34;https://docs.armbian.com&#34;&gt;documentation&lt;/a&gt;, consider &lt;a href=&#34;https://www.debian.org/consultants/&#34;&gt;hiring an expert&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Personal support&lt;/p&gt; &lt;p&gt;Personal support limited to active project supporters and sponsors. The shortest way to become one and receive our attention is a four figure &lt;a href=&#34;https://www.armbian.com/donate&#34;&gt;donation to our non-profit project&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.armbian.com&#34;&gt;Forums&lt;/a&gt; for Participate in Armbian&lt;/li&gt; &#xA; &lt;li&gt;IRC: &lt;code&gt;#armbian&lt;/code&gt; on Libera.chat&lt;/li&gt; &#xA; &lt;li&gt;Follow &lt;a href=&#34;https://twitter.com/armbian&#34;&gt;@armbian&lt;/a&gt; on twitter or &lt;a href=&#34;https://www.linkedin.com/company/armbian&#34;&gt;LinkedIn&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Bugs: &lt;a href=&#34;https://github.com/armbian/build/issues&#34;&gt;issues&lt;/a&gt; / &lt;a href=&#34;https://armbian.atlassian.net/jira/dashboards/10000&#34;&gt;JIRA&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to all the people who already contributed armbian!&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/armbian/build/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=armbian/build&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;Also&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/armbian/build/graphs/contributors&#34;&gt;Current and past contributors&lt;/a&gt;, our families and friends.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.armbian.com/members/2-moderators/&#34;&gt;Support staff&lt;/a&gt; that keeps forums usable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.armbian.com/&#34;&gt;Individuals&lt;/a&gt; that help with their ideas, reports and &lt;a href=&#34;https://www.armbian.com/donate&#34;&gt;donations&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Most of the project is sponsored with a work done by volunteer collaborators, while some part of the project costs are being covered by the industry. We would not be able to get this far without their help.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.armbian.com/#contact&#34;&gt;Would you like your name to appear below?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.armbian.com/download/?tx_maker=xunlong&#34; target=&#34;_blank&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://www.armbian.com/wp-content/uploads/2018/03/orangepi-logo-150x150.png&#34; width=&#34;122&#34; height=&#34;122&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://www.armbian.com/download/?tx_maker=friendlyelec&#34; target=&#34;_blank&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://www.armbian.com/wp-content/uploads/2018/02/friendlyelec-logo-150x150.png&#34; width=&#34;122&#34; height=&#34;122&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://k-space.ee&#34; target=&#34;_blank&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://www.armbian.com/wp-content/uploads/2018/03/kspace-150x150.png&#34; width=&#34;122&#34; height=&#34;122&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://www.innoscale.net&#34; target=&#34;_blank&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://www.armbian.com/wp-content/uploads/2020/07/innoscale-2-150x150.png&#34; width=&#34;122&#34; height=&#34;122&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://www.armbian.com/download/?tx_maker=olimex&#34; target=&#34;_blank&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://www.armbian.com/wp-content/uploads/2018/02/olimex-logo-150x150.png&#34; width=&#34;122&#34; height=&#34;122&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://www.armbian.com/download/?tx_maker=kobol&#34; target=&#34;_blank&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://www.armbian.com/wp-content/uploads/2020/06/Kobol_logo-150x150.png&#34; width=&#34;122&#34; height=&#34;122&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/WorksOnArm/cluster/issues/223&#34; target=&#34;_blank&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://www.armbian.com/wp-content/uploads/2020/11/work-on-arm-150x150.png&#34; width=&#34;122&#34; height=&#34;122&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://fosshost.org/&#34; target=&#34;_blank&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://www.armbian.com/wp-content/uploads/2020/11/foss-host-150x150.png&#34; width=&#34;122&#34; height=&#34;122&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://nlnet.nl/&#34; target=&#34;_blank&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://www.armbian.com/wp-content/uploads/2022/01/nlnet-fundation-150x150.png&#34; width=&#34;122&#34; height=&#34;122&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://raw.githubusercontent.com/armbian/build/master/#&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://www.armbian.com/wp-content/uploads/2021/06/lanecloud-150x150.png&#34; width=&#34;122&#34; height=&#34;122&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://www.khadas.com/&#34; target=&#34;_blank&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://www.armbian.com/wp-content/uploads/2021/05/khadas-150x150.png&#34; width=&#34;122&#34; height=&#34;122&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This software is published under the GPL-2.0 License license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lroudge/holberton-system_engineering-devops</title>
    <updated>2022-05-29T01:54:10Z</updated>
    <id>tag:github.com,2022-05-29:/lroudge/holberton-system_engineering-devops</id>
    <link href="https://github.com/lroudge/holberton-system_engineering-devops" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Holberton School System Engineering &amp;amp; DevOps Track&lt;/h1&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;At Holberton School, we learn by doing. We have projects everyday that we have to push on GitHub in order for an automatic review to be done. This repository contains directories each corresponding to a system engineering or DevOps project. These projects are part of the Holberton School year 1 curriculum. In these projects, we cover everything from the basics of the Linux Shell, Bash commands, Bash scripting, networking, APIs, and web-stack debugging to more advanced topics.&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Directories&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lroudge/holberton-system_engineering-devops/master/0x00-shell_basics&#34;&gt;0x00-shell_basics&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Introduction to the basics of the Linux Shell&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lroudge/holberton-system_engineering-devops/master/0x01-shell_permissions&#34;&gt;0x01-shell_permissions&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Introduction to Shell permissions and the file system&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lroudge/holberton-system_engineering-devops/master/0x02-shell_redirections&#34;&gt;0x02-shell_redirections&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Introduction to Shell redirections&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lroudge/holberton-system_engineering-devops/master/0x03-shell_variables_expansion&#34;&gt;0x03-shell_variables_expansions&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Introduction to Shell variable expansions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lroudge/holberton-system_engineering-devops/master/0x04-loops_conditions_and_parsing&#34;&gt;0x04-loops_conditions_and_parsing&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Introduction to Bash scripting with loops and conditions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lroudge/holberton-system_engineering-devops/master/0x05-processes_and_signals&#34;&gt;0x05-processes_and_signals&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Introduction to processes and signals in the Shell&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lroudge/holberton-system_engineering-devops/master/0x06-regular_expressions&#34;&gt;0x06-regular_expressions&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Introduction to regular expressions in Ruby&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lroudge/holberton-system_engineering-devops/master/0x07-networking_basics&#34;&gt;0x07-networking_basics&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Introduction to networking&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lroudge/holberton-system_engineering-devops/master/0x08-networking_basics_2&#34;&gt;0x08-networking_basics_2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Advanced networking&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lroudge/holberton-system_engineering-devops/master/0x09-web_infrastructure_design&#34;&gt;0x09-web_infrastructure_design&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Diagrams illustrating a Web Infrastructure (LAMP)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lroudge/holberton-system_engineering-devops/master/0x0A-configuration_management&#34;&gt;0x0A-configuration_management&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Introduction to configuration management with Puppet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lroudge/holberton-system_engineering-devops/master/0x0B-ssh&#34;&gt;0x0B-ssh&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Managing our own servers, and sshing into it&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lroudge/holberton-system_engineering-devops/master/0x0C-web_server&#34;&gt;0x0C-web_server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Introduction to web servers and installing Nginx on our servers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lroudge/holberton-system_engineering-devops/master/0x0D-web_stack_debugging_0&#34;&gt;0x0D-web_stack_debugging_0&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Introduction to web stack debugging&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lroudge/holberton-system_engineering-devops/master/0x0E-web_stack_debugging_1&#34;&gt;0x0E-web_stack_debugging_1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Advanced web stack debugging&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lroudge/holberton-system_engineering-devops/master/0x0F-load_balancer&#34;&gt;0x0F-load_balancer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Introduction to load-balancing and installing HAProxy on our own servers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lroudge/holberton-system_engineering-devops/master/0x10-https_ssl&#34;&gt;0x10-https_ssl&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Introduction to HTTPS, SSL and getting our own SSL certificate for our servers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lroudge/holberton-system_engineering-devops/master/0x11-what_happens_when_your_type_holbertonschool_com_in_your_browser_and_press_enter&#34;&gt;0x11-what_happens_when_your_type_holbertonschool_com_in_your_browser_and_press_enter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Blog post explaining a web infrastructure&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lroudge/holberton-system_engineering-devops/master/0x12-web_stack_debugging_2&#34;&gt;0x12-web_stack_debugging_2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;More advanced web stack debugging&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lroudge/holberton-system_engineering-devops/master/0x13-firewall&#34;&gt;0x13-firewall&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Introduction to firewalls and setting up of a firewall on our own servers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lroudge/holberton-system_engineering-devops/master/0x14-mysql&#34;&gt;0x14-mysql&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Introduction to Database clusters and setting up a Primary-Replica MySQL cluster on our own servers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lroudge/holberton-system_engineering-devops/master/0x15-api&#34;&gt;0x15-api&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Querying an API and exporting data to JSON or CSV format&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lroudge/holberton-system_engineering-devops/master/0x16-api_advanced&#34;&gt;0x16-api_advanced&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Advanced API queries, recursive requests&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;Laura Roudge - Cohort 8&lt;/p&gt; &#xA;&lt;p&gt;email: &lt;a href=&#34;mailto:laura.derohan@gmail.com&#34;&gt;laura.derohan@gmail.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Twitter: &lt;a href=&#34;https://twitter.com/LRoudge&#34;&gt;https://twitter.com/LRoudge&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Magisk-Modules-Alt-Repo/magiskapp_freezer</title>
    <updated>2022-05-29T01:54:10Z</updated>
    <id>tag:github.com,2022-05-29:/Magisk-Modules-Alt-Repo/magiskapp_freezer</id>
    <link href="https://github.com/Magisk-Modules-Alt-Repo/magiskapp_freezer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple module that automatically freeze magisk app if any app in DenyList is opened (except Google Play Store). Magisk app will get restored after closing all apps in DenyList.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Magisk App Freezer&lt;/h1&gt; &#xA;&lt;p&gt;Magisk app provides an option to hide Magisk app by making Magisk app or even full obfuscation of the Magisk app (Android 9+) with random package name. However some apps like Techcombank, PUBG New State can still detect random package Magisk app (even stub Magisk app).&lt;/p&gt; &#xA;&lt;p&gt;Why not write a simple module install a simple boot script that automatically freeze magisk app if any app in DenyList is opened (except Google Play Store). Magisk app will get restored after you close all apps in DenyList.&lt;/p&gt; &#xA;&lt;p&gt;From Android 11+, App cannot detect &lt;code&gt;/data/data/com.topjohnwu.magisk&lt;/code&gt; directory so no need to use random package for Magisk before freezing Magisk&lt;/p&gt; &#xA;&lt;p&gt;Do not add apps like Chrome and keyboard app into DenyList.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: This module only makes sure app cannot detect Magisk app. It doesn&#39;t hide root. Hiding Magisk app will never and never be meant hiding root. Why more and more apps detect some apps to detect root because root is more and more difficult to detect. App detection for root detection is never right. For example, if your device is not rooted but just install the Magisk application, it will be considered as root by the application. In fact, apps can detect more traces that can be related to rooting than just detect rooting.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kubernetes-sigs/nfs-subdir-external-provisioner</title>
    <updated>2022-05-29T01:54:10Z</updated>
    <id>tag:github.com,2022-05-29:/kubernetes-sigs/nfs-subdir-external-provisioner</id>
    <link href="https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dynamic sub-dir volume provisioner on a remote NFS server.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kubernetes NFS Subdir External Provisioner&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;NFS subdir external provisioner&lt;/strong&gt; is an automatic provisioner that use your &lt;em&gt;existing and already configured&lt;/em&gt; NFS server to support dynamic provisioning of Kubernetes Persistent Volumes via Persistent Volume Claims. Persistent volumes are provisioned as &lt;code&gt;${namespace}-${pvcName}-${pvName}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note: This repository is migrated from &lt;a href=&#34;https://github.com/kubernetes-incubator/external-storage/tree/master/nfs-client&#34;&gt;https://github.com/kubernetes-incubator/external-storage/tree/master/nfs-client&lt;/a&gt;. As part of the migration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The container image name and repository has changed to &lt;code&gt;k8s.gcr.io/sig-storage&lt;/code&gt; and &lt;code&gt;nfs-subdir-external-provisioner&lt;/code&gt; respectively.&lt;/li&gt; &#xA; &lt;li&gt;To maintain backward compatibility with earlier deployment files, the naming of NFS Client Provisioner is retained as &lt;code&gt;nfs-client-provisioner&lt;/code&gt; in the deployment YAMLs.&lt;/li&gt; &#xA; &lt;li&gt;One of the pending areas for development on this repository is to add automated e2e tests. If you would like to contribute, please raise an issue or reach us on the Kubernetes slack #sig-storage channel.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to deploy NFS Subdir External Provisioner to your cluster&lt;/h2&gt; &#xA;&lt;p&gt;To note again, you must &lt;em&gt;already&lt;/em&gt; have an NFS Server.&lt;/p&gt; &#xA;&lt;h3&gt;With Helm&lt;/h3&gt; &#xA;&lt;p&gt;Follow the instructions from the helm chart &lt;a href=&#34;https://raw.githubusercontent.com/kubernetes-sigs/nfs-subdir-external-provisioner/master/charts/nfs-subdir-external-provisioner/README.md&#34;&gt;README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The tl;dr is&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ helm repo add nfs-subdir-external-provisioner https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner/&#xA;$ helm install nfs-subdir-external-provisioner nfs-subdir-external-provisioner/nfs-subdir-external-provisioner \&#xA;    --set nfs.server=x.x.x.x \&#xA;    --set nfs.path=/exported/path&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;With Kustomize&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 1: Get connection information for your NFS server&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Make sure your NFS server is accessible from your Kubernetes cluster and get the information you need to connect to it. At a minimum you will need its hostname and exported share path.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 2: Add the base resource&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;kustomization.yaml&lt;/code&gt; file in a directory of your choice, and add the &lt;a href=&#34;https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner/tree/master/deploy&#34;&gt;deploy&lt;/a&gt; directory as a base. This will use the kustomization file within that directory as our base.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;namespace: nfs-provisioner&#xA;bases:&#xA;  - github.com/kubernetes-sigs/nfs-subdir-external-provisioner//deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 3: Create namespace resource&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create a file with your namespace resource. The name can be anything as it will get overwritten by the namespace in your kustomization file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# namespace.yaml&#xA;apiVersion: v1&#xA;kind: Namespace&#xA;metadata:&#xA;  name: nfs-provisioner&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 4: Configure deployment&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To configure the deployment, you will need to patch it&#39;s container variables with the connection information for your NFS Server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# patch_nfs_details.yaml&#xA;apiVersion: apps/v1&#xA;kind: Deployment&#xA;metadata:&#xA;  labels:&#xA;    app: nfs-client-provisioner&#xA;  name: nfs-client-provisioner&#xA;spec:&#xA;  template:&#xA;    spec:&#xA;      containers:&#xA;        - name: nfs-client-provisioner&#xA;          env:&#xA;            - name: NFS_SERVER&#xA;              value: &amp;lt;YOUR_NFS_SERVER_IP&amp;gt;&#xA;            - name: NFS_PATH&#xA;              value: &amp;lt;YOUR_NFS_SERVER_SHARE&amp;gt;&#xA;      volumes:&#xA;        - name: nfs-client-root&#xA;          nfs:&#xA;            server: &amp;lt;YOUR_NFS_SERVER_IP&amp;gt;&#xA;            path: &amp;lt;YOUR_NFS_SERVER_SHARE&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace occurrences of &lt;code&gt;&amp;lt;YOUR_NFS_SERVER_IP&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;YOUR_NFS_SERVER_SHARE&amp;gt;&lt;/code&gt; with your connection information.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 5: Add resources and deploy&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add the namespace resource and patch you created in earlier steps.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;namespace: nfs-provisioner&#xA;bases:&#xA;  - github.com/kubernetes-sigs/nfs-subdir-external-provisioner//deploy&#xA;resources:&#xA;  - namespace.yaml&#xA;patchesStrategicMerge:&#xA;  - patch_nfs_details.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Deploy (run inside directory with your kustomization file):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kubectl apply -k .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 6: Finally, test your environment!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Now we&#39;ll test your NFS subdir external provisioner by creating a persistent volume claim and a pod that writes a test file to the volume. This will make sure that the provisioner is provisioning and that the NFS server is reachable and writable.&lt;/p&gt; &#xA;&lt;p&gt;Deploy the test resources:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ kubectl create -f https://raw.githubusercontent.com/kubernetes-sigs/nfs-subdir-external-provisioner/master/deploy/test-claim.yaml -f https://raw.githubusercontent.com/kubernetes-sigs/nfs-subdir-external-provisioner/master/deploy/test-pod.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now check your NFS Server for the &lt;code&gt;SUCCESS&lt;/code&gt; inside the PVC&#39;s directory.&lt;/p&gt; &#xA;&lt;p&gt;Delete the test resources:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ kubectl delete -f https://raw.githubusercontent.com/kubernetes-sigs/nfs-subdir-external-provisioner/master/deploy/test-claim.yaml -f https://raw.githubusercontent.com/kubernetes-sigs/nfs-subdir-external-provisioner/master/deploy/test-pod.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now check the PVC&#39;s directory has been deleted.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 7: Deploying your own PersistentVolumeClaims&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To deploy your own PVC, make sure that you have the correct &lt;code&gt;storageClassName&lt;/code&gt; (by default &lt;code&gt;managed-nfs-storage&lt;/code&gt;). You can also patch the StorageClass resource to change it, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# kustomization.yaml&#xA;namespace: nfs-provisioner&#xA;resources:&#xA;  - github.com/kubernetes-sigs/nfs-subdir-external-provisioner//deploy&#xA;  - namespace.yaml&#xA;patches:&#xA;- target:&#xA;    kind: StorageClass&#xA;    name: managed-nfs-storage&#xA;  patch: |-&#xA;    - op: replace&#xA;      path: /metadata/name&#xA;      value: &amp;lt;YOUR-STORAGECLASS-NAME&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 1: Get connection information for your NFS server&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Make sure your NFS server is accessible from your Kubernetes cluster and get the information you need to connect to it. At a minimum you will need its hostname.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 2: Get the NFS Subdir External Provisioner files&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To setup the provisioner you will download a set of YAML files, edit them to add your NFS server&#39;s connection information and then apply each with the &lt;code&gt;kubectl&lt;/code&gt; / &lt;code&gt;oc&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Get all of the files in the &lt;a href=&#34;https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner/tree/master/deploy&#34;&gt;deploy&lt;/a&gt; directory of this repository. These instructions assume that you have cloned the &lt;a href=&#34;https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner/&#34;&gt;kubernetes-sigs/nfs-subdir-external-provisioner&lt;/a&gt; repository and have a bash-shell open in the root directory.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 3: Setup authorization&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If your cluster has RBAC enabled or you are running OpenShift you must authorize the provisioner. If you are in a namespace/project other than &#34;default&#34; edit &lt;code&gt;deploy/rbac.yaml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Kubernetes:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Set the subject of the RBAC objects to the current namespace where the provisioner is being deployed&#xA;$ NS=$(kubectl config get-contexts|grep -e &#34;^\*&#34; |awk &#39;{print $5}&#39;)&#xA;$ NAMESPACE=${NS:-default}&#xA;$ sed -i&#39;&#39; &#34;s/namespace:.*/namespace: $NAMESPACE/g&#34; ./deploy/rbac.yaml ./deploy/deployment.yaml&#xA;$ kubectl create -f deploy/rbac.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;OpenShift:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;On some installations of OpenShift the default admin user does not have cluster-admin permissions. If these commands fail refer to the OpenShift documentation for &lt;strong&gt;User and Role Management&lt;/strong&gt; or contact your OpenShift provider to help you grant the right permissions to your admin user. On OpenShift the service account used to bind volumes does not have the necessary permissions required to use the &lt;code&gt;hostmount-anyuid&lt;/code&gt; SCC. See also &lt;a href=&#34;https://docs.openshift.com/container-platform/4.4/authentication/managing-security-context-constraints.html#role-based-access-to-ssc_configuring-internal-oauth&#34;&gt;Role based access to SCC&lt;/a&gt; for more information. If these commands fail refer to the OpenShift documentation for &lt;strong&gt;User and Role Management&lt;/strong&gt; or contact your OpenShift provider to help you grant the right permissions to your admin user.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Set the subject of the RBAC objects to the current namespace where the provisioner is being deployed&#xA;$ NAMESPACE=`oc project -q`&#xA;$ sed -i&#39;&#39; &#34;s/namespace:.*/namespace: $NAMESPACE/g&#34; ./deploy/rbac.yaml ./deploy/deployment.yaml&#xA;$ oc create -f deploy/rbac.yaml&#xA;$ oc adm policy add-scc-to-user hostmount-anyuid system:serviceaccount:$NAMESPACE:nfs-client-provisioner&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 4: Configure the NFS subdir external provisioner&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you would like to use a custom built nfs-subdir-external-provisioner image, you must edit the provisioner&#39;s deployment file to specify the correct location of your &lt;code&gt;nfs-client-provisioner&lt;/code&gt; container image.&lt;/p&gt; &#xA;&lt;p&gt;Next you must edit the provisioner&#39;s deployment file to add connection information for your NFS server. Edit &lt;code&gt;deploy/deployment.yaml&lt;/code&gt; and replace the two occurences of &#xA; &lt;your nfs server hostname&gt;&#xA;   with your server&#39;s hostname.&#xA; &lt;/your&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;kind: Deployment&#xA;apiVersion: apps/v1&#xA;metadata:&#xA;  name: nfs-client-provisioner&#xA;spec:&#xA;  replicas: 1&#xA;  selector:&#xA;    matchLabels:&#xA;      app: nfs-client-provisioner&#xA;  strategy:&#xA;    type: Recreate&#xA;  template:&#xA;    metadata:&#xA;      labels:&#xA;        app: nfs-client-provisioner&#xA;    spec:&#xA;      serviceAccountName: nfs-client-provisioner&#xA;      containers:&#xA;        - name: nfs-client-provisioner&#xA;          image: k8s.gcr.io/sig-storage/nfs-subdir-external-provisioner:v4.0.2&#xA;          volumeMounts:&#xA;            - name: nfs-client-root&#xA;              mountPath: /persistentvolumes&#xA;          env:&#xA;            - name: PROVISIONER_NAME&#xA;              value: k8s-sigs.io/nfs-subdir-external-provisioner&#xA;            - name: NFS_SERVER&#xA;              value: &amp;lt;YOUR NFS SERVER HOSTNAME&amp;gt;&#xA;            - name: NFS_PATH&#xA;              value: /var/nfs&#xA;      volumes:&#xA;        - name: nfs-client-root&#xA;          nfs:&#xA;            server: &amp;lt;YOUR NFS SERVER HOSTNAME&amp;gt;&#xA;            path: /var/nfs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: If you want to change the PROVISIONER_NAME above from &lt;code&gt;k8s-sigs.io/nfs-subdir-external-provisioner&lt;/code&gt; to something else like &lt;code&gt;myorg/nfs-storage&lt;/code&gt;, remember to also change the PROVISIONER_NAME in the storage class definition below.&lt;/p&gt; &#xA;&lt;p&gt;To disable leader election, define an env variable named ENABLE_LEADER_ELECTION and set its value to false.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 5: Deploying your storage class&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Parameters:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;onDelete&lt;/td&gt; &#xA;   &lt;td&gt;If it exists and has a delete value, delete the directory, if it exists and has a retain value, save the directory.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;will be archived with name on the share: &lt;code&gt;archived-&amp;lt;volume.Name&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;archiveOnDelete&lt;/td&gt; &#xA;   &lt;td&gt;If it exists and has a false value, delete the directory. if &lt;code&gt;onDelete&lt;/code&gt; exists, &lt;code&gt;archiveOnDelete&lt;/code&gt; will be ignored.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;will be archived with name on the share: &lt;code&gt;archived-&amp;lt;volume.Name&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pathPattern&lt;/td&gt; &#xA;   &lt;td&gt;Specifies a template for creating a directory path via PVC metadata&#39;s such as labels, annotations, name or namespace. To specify metadata use &lt;code&gt;${.PVC.&amp;lt;metadata&amp;gt;}&lt;/code&gt;. Example: If folder should be named like &lt;code&gt;&amp;lt;pvc-namespace&amp;gt;-&amp;lt;pvc-name&amp;gt;&lt;/code&gt;, use &lt;code&gt;${.PVC.namespace}-${.PVC.name}&lt;/code&gt; as pathPattern.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;This is &lt;code&gt;deploy/class.yaml&lt;/code&gt; which defines the NFS subdir external provisioner&#39;s Kubernetes Storage Class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: storage.k8s.io/v1&#xA;kind: StorageClass&#xA;metadata:&#xA;  name: nfs-client&#xA;provisioner: k8s-sigs.io/nfs-subdir-external-provisioner # or choose another name, must match deployment&#39;s env PROVISIONER_NAME&#39;&#xA;parameters:&#xA;  pathPattern: &#34;${.PVC.namespace}/${.PVC.annotations.nfs.io/storage-path}&#34; # waits for nfs.io/storage-path annotation, if not specified will accept as empty string.&#xA;  onDelete: delete&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 6: Finally, test your environment!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Now we&#39;ll test your NFS subdir external provisioner.&lt;/p&gt; &#xA;&lt;p&gt;Deploy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ kubectl create -f deploy/test-claim.yaml -f deploy/test-pod.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now check your NFS Server for the file &lt;code&gt;SUCCESS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kubectl delete -f deploy/test-pod.yaml -f deploy/test-claim.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now check the folder has been deleted.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 7: Deploying your own PersistentVolumeClaims&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To deploy your own PVC, make sure that you have the correct &lt;code&gt;storageClassName&lt;/code&gt; as indicated by your &lt;code&gt;deploy/class.yaml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;kind: PersistentVolumeClaim&#xA;apiVersion: v1&#xA;metadata:&#xA;  name: test-claim&#xA;  annotations:&#xA;    nfs.io/storage-path: &#34;test-path&#34; # not required, depending on whether this annotation was shown in the storage class description&#xA;spec:&#xA;  storageClassName: nfs-client&#xA;  accessModes:&#xA;    - ReadWriteMany&#xA;  resources:&#xA;    requests:&#xA;      storage: 1Mi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Build and publish your own container image&lt;/h1&gt; &#xA;&lt;p&gt;To build your own custom container image from this repository, you will have to build and push the nfs-subdir-external-provisioner image using the following instructions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make build&#xA;make container&#xA;# `nfs-subdir-external-provisioner:latest` will be created.&#xA;# Note: This will build a single-arch image that matches the machine on which container is built.&#xA;# To upload this to your custom registry, say `quay.io/myorg` and arch as amd64, you can use&#xA;# docker tag nfs-subdir-external-provisioner:latest quay.io/myorg/nfs-subdir-external-provisioner-amd64:latest&#xA;# docker push quay.io/myorg/nfs-subdir-external-provisioner-amd64:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Build and publish with GitHub Actions&lt;/h1&gt; &#xA;&lt;p&gt;In a forked repository you can use GitHub Actions pipeline defined in &lt;a href=&#34;https://raw.githubusercontent.com/kubernetes-sigs/nfs-subdir-external-provisioner/master/.github/workflows/release.yml&#34;&gt;.github/workflows/release.yml&lt;/a&gt;. The pipeline builds Docker images for &lt;code&gt;linux/amd64&lt;/code&gt;, &lt;code&gt;linux/arm64&lt;/code&gt;, and &lt;code&gt;linux/arm/v7&lt;/code&gt; platforms and publishes them using a multi-arch manifest. The pipeline is triggered when you add a tag like &lt;code&gt;gh-v{major}.{minor}.{patch}&lt;/code&gt; to your commit and push it to GitHub. The tag is used for generating Docker image tags: &lt;code&gt;latest&lt;/code&gt;, &lt;code&gt;{major}&lt;/code&gt;, &lt;code&gt;{major}:{minor}&lt;/code&gt;, &lt;code&gt;{major}:{minor}:{patch}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The pipeline adds several labels:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;org.opencontainers.image.title=${{ github.event.repository.name }}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;org.opencontainers.image.description=${{ github.event.repository.description }}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;org.opencontainers.image.url=${{ github.event.repository.html_url }}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;org.opencontainers.image.source=${{ github.event.repository.clone_url }}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;org.opencontainers.image.created=${{ steps.prep.outputs.created }}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;org.opencontainers.image.revision=${{ github.sha }}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The pipeline performs the docker login command using &lt;code&gt;REGISTRY_USERNAME&lt;/code&gt; and &lt;code&gt;REGISTRY_TOKEN&lt;/code&gt; secrets, which have to be provided.&lt;/li&gt; &#xA; &lt;li&gt;You also need to provide the &lt;code&gt;DOCKER_IMAGE&lt;/code&gt; secret specifying your Docker image name, e.g., &lt;code&gt;quay.io/[username]/nfs-subdir-external-provisioner&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;NFS provisioner limitations/pitfalls&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The provisioned storage is not guaranteed. You may allocate more than the NFS share&#39;s total size. The share may also not have enough storage space left to actually accommodate the request.&lt;/li&gt; &#xA; &lt;li&gt;The provisioned storage limit is not enforced. The application can expand to use all the available storage regardless of the provisioned size.&lt;/li&gt; &#xA; &lt;li&gt;Storage resize/expansion operations are not presently supported in any form. You will end up in an error state: &lt;code&gt;Ignoring the PVC: didn&#39;t find a plugin capable of expanding the volume; waiting for an external controller to process this PVC.&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>SeleniumHQ/docker-selenium</title>
    <updated>2022-05-29T01:54:10Z</updated>
    <id>tag:github.com,2022-05-29:/SeleniumHQ/docker-selenium</id>
    <link href="https://github.com/SeleniumHQ/docker-selenium" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Docker images for Selenium Grid&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/SeleniumHQ/docker-selenium/workflows/Build%20&amp;amp;%20test/badge.svg?branch=trunk&#34; alt=&#34;Build &amp;amp; test&#34;&gt; &lt;img src=&#34;https://github.com/SeleniumHQ/docker-selenium/workflows/Deploys/badge.svg?sanitize=true&#34; alt=&#34;Deployments&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Docker images for the Selenium Grid Server&lt;/h1&gt; &#xA;&lt;p&gt;The project is made possible by volunteer contributors who have put in thousands of hours of their own time, and made the source code freely available under the &lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/LICENSE.md&#34;&gt;Apache License 2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;These Docker images come with a handful of tags to simplify its usage, have a look at them in one of our &lt;a href=&#34;https://github.com/SeleniumHQ/docker-selenium/releases/tag/4.2.0-20220527&#34;&gt;releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To get notifications of new releases, add yourself as a &#34;Releases only&#34; watcher.&lt;/p&gt; &#xA;&lt;p&gt;These images are published to the Docker Hub registry at &lt;a href=&#34;https://hub.docker.com/u/selenium&#34;&gt;Selenium Docker Hub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Do you need help to use these Docker images? Talk to us at &lt;a href=&#34;https://www.selenium.dev/support/&#34;&gt;https://www.selenium.dev/support/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#quick-start&#34;&gt;Quick start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#experimental-mult-arch-aarch64armhfamd64-images&#34;&gt;Experimental Mult-Arch aarch64/armhf/amd64 Images&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#execution-modes&#34;&gt;Execution modes&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#standalone&#34;&gt;Standalone&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#hub-and-nodes&#34;&gt;Hub and Nodes&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#docker-networking&#34;&gt;Docker networking&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#using-different-machinesvms&#34;&gt;Using different machines/VMs&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#docker-compose&#34;&gt;Docker Compose&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#fully-distributed-mode---router-queue-distributor-eventbus-sessionmap-and-nodes&#34;&gt;Fully distributed mode - Router, Queue, Distributor, EventBus, SessionMap and Nodes&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#video-recording&#34;&gt;Video recording&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#dynamic-grid&#34;&gt;Dynamic Grid&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#configuration-example&#34;&gt;Configuration example&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#execution-with-hub--node-roles&#34;&gt;Execution with Hub &amp;amp; Node roles&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#execution-with-standalone-roles&#34;&gt;Execution with Standalone roles&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#using-dynamic-grid-in-different-machinesvms&#34;&gt;Using Dynamic Grid in different machines/VMs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#execution-with-docker-compose&#34;&gt;Execution with Docker Compose&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#video-recording-screen-resolution-and-time-zones-in-a-dynamic-grid&#34;&gt;Video recording, screen resolution, and time zones in a Dynamic Grid&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#deploying-to-kubernetes&#34;&gt;Kubernetes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#configuring-the-containers&#34;&gt;Configuring the containers&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#se_opts-selenium-configuration-options&#34;&gt;SE_OPTS Selenium Configuration Options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#java_opts-java-environment-options&#34;&gt;JAVA_OPTS Java Environment Options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#node-configuration-options&#34;&gt;Node configuration options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#setting-screen-resolution&#34;&gt;Setting Screen Resolution&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#grid-url-and-session-timeout&#34;&gt;Grid Url and Session Timeout&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#session-request-timeout&#34;&gt;Session request timeout&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#increasing-session-concurrency-per-container&#34;&gt;Increasing session concurrency per container&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#running-in-headless-mode&#34;&gt;Running in Headless mode&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#building-the-images&#34;&gt;Building the images&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#waiting-for-the-grid-to-be-ready&#34;&gt;Waiting for the Grid to be ready&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#debugging&#34;&gt;Debugging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start a Docker container with Firefox&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d -p 4444:4444 -p 7900:7900 --shm-size=&#34;2g&#34; selenium/standalone-firefox:4.2.0-20220527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Point your WebDriver tests to &lt;a href=&#34;http://localhost:4444&#34;&gt;http://localhost:4444&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;That&#39;s it!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(Optional) To see what is happening inside the container, head to &lt;a href=&#34;http://localhost:7900&#34;&gt;http://localhost:7900&lt;/a&gt; (password is &lt;code&gt;secret&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;More details about visualising the container activity, check the &lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#debugging&#34;&gt;Debugging&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;☝&lt;/span&gt; When executing &lt;code&gt;docker run&lt;/code&gt; for an image that contains a browser please use the flag &lt;code&gt;--shm-size=2g&lt;/code&gt; to use the host&#39;s shared memory.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;☝&lt;/span&gt; Always use a Docker image with a full tag to pin a specific browser and Grid version. See &lt;a href=&#34;https://github.com/SeleniumHQ/docker-selenium/wiki/Tagging-Convention&#34;&gt;Tagging Conventions&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Experimental Mult-Arch aarch64/armhf/amd64 Images&lt;/h2&gt; &#xA;&lt;p&gt;For experimental docker container images, which run on platforms such as the Mac M1 or Raspberry Pi, see the community driven repository hosted at &lt;a href=&#34;https://github.com/seleniumhq-community/docker-seleniarm&#34;&gt;seleniumhq-community/docker-seleniarm&lt;/a&gt;. These images are built for three separate architectures: linux/arm64 (aarch64), linux/arm/v7 (armhf), and linux/amd64.&lt;/p&gt; &#xA;&lt;p&gt;Furthermore, these experimental container images are published on &lt;a href=&#34;https://hub.docker.com/u/seleniarm&#34;&gt;Seleniarm Docker Hub&lt;/a&gt; registry.&lt;/p&gt; &#xA;&lt;p&gt;See issue &lt;a href=&#34;https://github.com/SeleniumHQ/docker-selenium/issues/1076&#34;&gt;#1076&lt;/a&gt; for more information on these images.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re working on an Intel or AMD64 architecture, we recommend using the container images in &lt;em&gt;this&lt;/em&gt; repository (SeleniumHQ/docker-selenium) instead of the experimental ones.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Execution modes&lt;/h2&gt; &#xA;&lt;h3&gt;Standalone&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/firefox/firefox_24x24.png&#34; alt=&#34;Firefox&#34;&gt; Firefox&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d -p 4444:4444 --shm-size=&#34;2g&#34; selenium/standalone-firefox:4.2.0-20220527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/chrome/chrome_24x24.png&#34; alt=&#34;Chrome&#34;&gt; Chrome&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d -p 4444:4444 --shm-size=&#34;2g&#34; selenium/standalone-chrome:4.2.0-20220527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/edge/edge_24x24.png&#34; alt=&#34;Edge&#34;&gt; Edge&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d -p 4444:4444 --shm-size=&#34;2g&#34; selenium/standalone-edge:4.2.0-20220527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Only one Standalone container can run on port&lt;/em&gt; &lt;code&gt;4444&lt;/code&gt; &lt;em&gt;at the same time.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Hub and Nodes&lt;/h3&gt; &#xA;&lt;p&gt;There are different ways to run the images and create a Grid with a Hub and Nodes, check the following options.&lt;/p&gt; &#xA;&lt;h4&gt;Docker networking&lt;/h4&gt; &#xA;&lt;p&gt;The Hub and Nodes will be created in the same network and they will recognize each other by their container name. A Docker &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/network_create/&#34;&gt;network&lt;/a&gt; needs to be created as a first step.&lt;/p&gt; &#xA;&lt;h5&gt;macOS/Linux&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker network create grid&#xA;$ docker run -d -p 4442-4444:4442-4444 --net grid --name selenium-hub selenium/hub:4.2.0-20220527&#xA;$ docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub \&#xA;    --shm-size=&#34;2g&#34; \&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \&#xA;    selenium/node-chrome:4.2.0-20220527&#xA;$ docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub \&#xA;    --shm-size=&#34;2g&#34; \&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \&#xA;    selenium/node-edge:4.2.0-20220527&#xA;$ docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub \&#xA;    --shm-size=&#34;2g&#34; \&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \&#xA;    selenium/node-firefox:4.2.0-20220527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Windows PowerShell&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$ docker network create grid&#xA;$ docker run -d -p 4442-4444:4442-4444 --net grid --name selenium-hub selenium/hub:4.2.0-20220527&#xA;$ docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub `&#xA;    --shm-size=&#34;2g&#34; `&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 `&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 `&#xA;    selenium/node-chrome:4.2.0-20220527&#xA;$ docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub `&#xA;    --shm-size=&#34;2g&#34; `&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 `&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 `&#xA;    selenium/node-edge:4.2.0-20220527&#xA;$ docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub `&#xA;    --shm-size=&#34;2g&#34; `&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 `&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 `&#xA;    selenium/node-firefox:4.2.0-20220527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you are done using the Grid, and the containers have exited, the network can be removed with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Removes the grid network&#xA;$ docker network rm grid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using different machines/VMs&lt;/h4&gt; &#xA;&lt;p&gt;The Hub and Nodes will be created on different machines/VMs, they need to know each other&#39;s IPs to communicate properly. If more than one node will be running on the same Machine/VM, they must be configured to expose different ports.&lt;/p&gt; &#xA;&lt;h5&gt;Hub - Machine/VM 1&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -p 4442-4444:4442-4444 --name selenium-hub selenium/hub:4.2.0-20220527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Node Chrome - Machine/VM 2&lt;/h5&gt; &#xA;&lt;h6&gt;macOS/Linux&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -p 5555:5555 \&#xA;    --shm-size=&#34;2g&#34; \&#xA;    -e SE_EVENT_BUS_HOST=&amp;lt;ip-from-machine-1&amp;gt; \&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \&#xA;    -e SE_NODE_HOST=&amp;lt;ip-from-machine-2&amp;gt; \&#xA;    selenium/node-chrome:4.2.0-20220527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Windows PowerShell&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$ docker run -d -p 5555:5555 `&#xA;    --shm-size=&#34;2g&#34; `&#xA;    -e SE_EVENT_BUS_HOST=&amp;lt;ip-from-machine-1&amp;gt; `&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 `&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 `&#xA;    -e SE_NODE_HOST=&amp;lt;ip-from-machine-2&amp;gt; `&#xA;    selenium/node-chrome:4.2.0-20220527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Node Edge - Machine/VM 3&lt;/h5&gt; &#xA;&lt;h6&gt;macOS/Linux&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -p 5555:5555 \&#xA;    --shm-size=&#34;2g&#34; \&#xA;    -e SE_EVENT_BUS_HOST=&amp;lt;ip-from-machine-1&amp;gt; \&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \&#xA;    -e SE_NODE_HOST=&amp;lt;ip-from-machine-3&amp;gt; \&#xA;    selenium/node-edge:4.2.0-20220527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Windows PowerShell&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$ docker run -d -p 5555:5555 `&#xA;    --shm-size=&#34;2g&#34; `&#xA;    -e SE_EVENT_BUS_HOST=&amp;lt;ip-from-machine-1&amp;gt; `&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 `&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 `&#xA;    -e SE_NODE_HOST=&amp;lt;ip-from-machine-3&amp;gt; `&#xA;    selenium/node-edge:4.2.0-20220527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Node Firefox - Machine/VM 4&lt;/h5&gt; &#xA;&lt;h6&gt;macOS/Linux&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -p 5555:5555 \&#xA;    --shm-size=&#34;2g&#34; \&#xA;    -e SE_EVENT_BUS_HOST=&amp;lt;ip-from-machine-1&amp;gt; \&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \&#xA;    -e SE_NODE_HOST=&amp;lt;ip-from-machine-4&amp;gt; \&#xA;    selenium/node-firefox:4.2.0-20220527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Windows PowerShell&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$ docker run -d -p 5555:5555 `&#xA;    --shm-size=&#34;2g&#34; `&#xA;    -e SE_EVENT_BUS_HOST=&amp;lt;ip-from-machine-1&amp;gt; `&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 `&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 `&#xA;    -e SE_NODE_HOST=&amp;lt;ip-from-machine-4&amp;gt; `&#xA;    selenium/node-firefox:4.2.0-20220527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Node Chrome - Machine/VM 4&lt;/h5&gt; &#xA;&lt;h6&gt;macOS/Linux&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -p 5556:5556 \&#xA;    --shm-size=&#34;2g&#34; \&#xA;    -e SE_EVENT_BUS_HOST=&amp;lt;ip-from-machine-1&amp;gt; \&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \&#xA;    -e SE_NODE_HOST=&amp;lt;ip-from-machine-4&amp;gt; \&#xA;    -e SE_NODE_PORT=5556 \&#xA;    selenium/node-chrome:4.2.0-20220527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Windows PowerShell&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$ docker run -d -p 5556:5556 `&#xA;    --shm-size=&#34;2g&#34; `&#xA;    -e SE_EVENT_BUS_HOST=&amp;lt;ip-from-machine-1&amp;gt; `&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 `&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 `&#xA;    -e SE_NODE_HOST=&amp;lt;ip-from-machine-4&amp;gt; `&#xA;    -e SE_NODE_PORT=5556 `&#xA;    selenium/node-chrome:4.2.0-20220527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Docker Compose&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt; is the simplest way to start a Grid. Use the linked resources below, save them locally, and check the execution instructions on top of each file.&lt;/p&gt; &#xA;&lt;h5&gt;Version 2&lt;/h5&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/docker-compose-v2.yml&#34;&gt;&lt;code&gt;docker-compose-v2.yml&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Version 3&lt;/h5&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/docker-compose-v3.yml&#34;&gt;&lt;code&gt;docker-compose-v3.yml&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To stop the Grid and cleanup the created containers, run &lt;code&gt;docker-compose down&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Version 3 with Swarm support&lt;/h5&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/docker-compose-v3-swarm.yml&#34;&gt;&lt;code&gt;docker-compose-v3-swarm.yml&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Fully distributed mode - Router, Queue, Distributor, EventBus, SessionMap and Nodes&lt;/h3&gt; &#xA;&lt;p&gt;It is possible to start a Selenium Grid with all its components apart. For simplicity, only an example with docker-compose will be provided. Save the file locally, and check the execution instructions on top of it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/docker-compose-v3-full-grid.yml&#34;&gt;&lt;code&gt;docker-compose-v3-full-grid.yml&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Video recording&lt;/h2&gt; &#xA;&lt;p&gt;Tests execution can be recorded by using the &lt;code&gt;selenium/video:ffmpeg-4.3.1-20220527&lt;/code&gt; Docker image. One container is needed per each container where a browser is running. This means if you are running 5 Nodes/Standalone containers, you will need 5 video containers, the mapping is 1-1.&lt;/p&gt; &#xA;&lt;p&gt;Currently, the only way to do this mapping is manually (either starting the containers manually, or through &lt;code&gt;docker-compose&lt;/code&gt;). We are iterating on this process and probably this setup will be more simple in the future.&lt;/p&gt; &#xA;&lt;p&gt;The video Docker image we provide is based on the ffmpeg Ubuntu image provided by the &lt;a href=&#34;https://github.com/jrottenberg/ffmpeg&#34;&gt;jrottenberg/ffmpeg&lt;/a&gt; project, thank you for providing this image and simplifying our work &lt;span&gt;🎉&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you have questions or feedback, please use the community contact points shown &lt;a href=&#34;https://www.selenium.dev/support/&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Please report any bugs through GitHub &lt;a href=&#34;https://github.com/SeleniumHQ/docker-selenium/issues/new/choose&#34;&gt;issues&lt;/a&gt;, and provide all the information requested on the template.&lt;/li&gt; &#xA; &lt;li&gt;Video recording for headless browsers is not supported.&lt;/li&gt; &#xA; &lt;li&gt;Video recording tends to use considerable amounts of CPU. Normally you should estimate 1CPU per video container, and 1 CPU per browser container.&lt;/li&gt; &#xA; &lt;li&gt;Videos are stored in the &lt;code&gt;/videos&lt;/code&gt; directory inside the video container. Map a local directory to get the videos.&lt;/li&gt; &#xA; &lt;li&gt;If you are running more than one video container, be sure to overwrite the video file name through the &lt;code&gt;FILE_NAME&lt;/code&gt; environment variable to avoid unexpected results.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This example shows how to start the containers manually:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker network create grid&#xA;$ docker run -d -p 4444:4444 -p 6900:5900 --net grid --name selenium --shm-size=&#34;2g&#34; selenium/standalone-chrome:4.2.0-20220527&#xA;$ docker run -d --net grid --name video -v /tmp/videos:/videos selenium/video:ffmpeg-4.3.1-20220527&#xA;# Run your tests&#xA;$ docker stop video &amp;amp;&amp;amp; docker rm video&#xA;$ docker stop selenium &amp;amp;&amp;amp; docker rm selenium&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After the containers are stopped and removed, you should see a video file on your machine&#39;s &lt;code&gt;/tmp/videos&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example using a Hub and a few Nodes:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/docker-compose-v3-video.yml&#34;&gt;&lt;code&gt;docker-compose-v3-video.yml&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Dynamic Grid&lt;/h2&gt; &#xA;&lt;p&gt;Grid 4 has the ability to start Docker containers on demand, this means that it starts a Docker container in the background for each new session request, the test gets executed there, and when the test completes, the container gets thrown away.&lt;/p&gt; &#xA;&lt;p&gt;This execution mode can be used either in the Standalone or Node roles. The &#34;dynamic&#34; execution mode needs to be told what Docker images to use when the containers get started. Additionally, the Grid needs to know the URI of the Docker daemon.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration example&lt;/h3&gt; &#xA;&lt;p&gt;You can save this file locally and name it, for example, &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[docker]&#xA;# Configs have a mapping between the Docker image to use and the capabilities that need to be matched to&#xA;# start a container with the given image.&#xA;configs = [&#xA;    &#34;selenium/standalone-firefox:4.2.0-20220527&#34;, &#34;{\&#34;browserName\&#34;: \&#34;firefox\&#34;}&#34;,&#xA;    &#34;selenium/standalone-chrome:4.2.0-20220527&#34;, &#34;{\&#34;browserName\&#34;: \&#34;chrome\&#34;}&#34;,&#xA;    &#34;selenium/standalone-edge:4.2.0-20220527&#34;, &#34;{\&#34;browserName\&#34;: \&#34;MicrosoftEdge\&#34;}&#34;&#xA;    ]&#xA;&#xA;# URL for connecting to the docker daemon&#xA;# Most simple approach, leave it as http://127.0.0.1:2375, and mount /var/run/docker.sock.&#xA;# 127.0.0.1 is used because interally the container uses socat when /var/run/docker.sock is mounted &#xA;# If var/run/docker.sock is not mounted: &#xA;# Windows: make sure Docker Desktop exposes the daemon via tcp, and use http://host.docker.internal:2375.&#xA;# macOS: install socat and run the following command, socat -4 TCP-LISTEN:2375,fork UNIX-CONNECT:/var/run/docker.sock,&#xA;# then use http://host.docker.internal:2375.&#xA;# Linux: varies from machine to machine, please mount /var/run/docker.sock. If this does not work, please create an issue.&#xA;url = &#34;http://127.0.0.1:2375&#34;&#xA;# Docker image used for video recording&#xA;video-image = &#34;selenium/video:ffmpeg-4.3.1-20220527&#34;&#xA;&#xA;# Uncomment the following section if you are running the node on a separate VM&#xA;# Fill out the placeholders with appropriate values&#xA;#[server]&#xA;#host = &amp;lt;ip-from-node-machine&amp;gt;&#xA;#port = &amp;lt;port-from-node-machine&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Execution with Hub &amp;amp; Node roles&lt;/h3&gt; &#xA;&lt;p&gt;This can be expanded to a full Grid deployment, all components deployed individually. The overall idea is to have the Hub in one virtual machine, and each of the Nodes in separate and more powerful virtual machines.&lt;/p&gt; &#xA;&lt;h4&gt;macOS/Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker network create grid&#xA;$ docker run -d -p 4442-4444:4442-4444 --net grid --name selenium-hub selenium/hub:4.2.0-20220527&#xA;$ docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub \&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \&#xA;    -v ${PWD}/config.toml:/opt/bin/config.toml \&#xA;    -v ${PWD}/assets:/opt/selenium/assets \&#xA;    -v /var/run/docker.sock:/var/run/docker.sock \&#xA;    selenium/node-docker:4.2.0-20220527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows PowerShell&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$ docker network create grid&#xA;$ docker run -d -p 4442-4444:4442-4444 --net grid --name selenium-hub selenium/hub:4.2.0-20220527&#xA;$ docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub `&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 `&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 `&#xA;    -v ${PWD}/config.toml:/opt/bin/config.toml `&#xA;    -v ${PWD}/assets:/opt/selenium/assets `&#xA;    -v /var/run/docker.sock:/var/run/docker.sock `&#xA;    selenium/node-docker:4.2.0-20220527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To have the assets saved on your host, please mount your host path to &lt;code&gt;/opt/selenium/assets&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you are done using the Grid, and the containers have exited, the network can be removed with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Removes the grid network&#xA;$ docker network rm grid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Execution with Standalone roles&lt;/h3&gt; &#xA;&lt;h4&gt;macOS/Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm --name selenium-docker -p 4444:4444 \&#xA;    -v ${PWD}/config.toml:/opt/bin/config.toml \&#xA;    -v ${PWD}/assets:/opt/selenium/assets \&#xA;    -v /var/run/docker.sock:/var/run/docker.sock \&#xA;    selenium/standalone-docker:4.2.0-20220527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows PowerShell&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm --name selenium-docker -p 4444:4444 `&#xA;    -v ${PWD}/config.toml:/opt/bin/config.toml `&#xA;    -v ${PWD}/assets:/opt/selenium/assets `&#xA;    -v /var/run/docker.sock:/var/run/docker.sock `&#xA;    selenium/standalone-docker:4.2.0-20220527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Dynamic Grid in different machines/VMs&lt;/h3&gt; &#xA;&lt;h4&gt;Hub - Machine/VM 1&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -p 4442-4444:4442-4444 --name selenium-hub selenium/hub:4.2.0-20220527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Node Chrome - Machine/VM 2&lt;/h4&gt; &#xA;&lt;h4&gt;macOS/Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -p 5555:5555 \&#xA;    -e SE_EVENT_BUS_HOST=&amp;lt;ip-from-machine-1&amp;gt; \&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \&#xA;    -v ${PWD}/config.toml:/opt/bin/config.toml \&#xA;    -v ${PWD}/assets:/opt/selenium/assets \&#xA;    -v /var/run/docker.sock:/var/run/docker.sock \&#xA;    selenium/node-docker:4.2.0-20220527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows PowerShell&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -p 5555:5555 `&#xA;    -e SE_EVENT_BUS_HOST=&amp;lt;ip-from-machine-1&amp;gt; `&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 `&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 `&#xA;    -v ${PWD}/config.toml:/opt/bin/config.toml `&#xA;    -v ${PWD}/assets:/opt/selenium/assets `&#xA;    -v /var/run/docker.sock:/var/run/docker.sock `&#xA;    selenium/node-docker:4.2.0-20220527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Complete the &lt;code&gt;[server]&lt;/code&gt; section in the &lt;code&gt;config.toml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[docker]&#xA;# Configs have a mapping between the Docker image to use and the capabilities that need to be matched to&#xA;# start a container with the given image.&#xA;configs = [&#xA;    &#34;selenium/standalone-firefox:4.2.0-20220527&#34;, &#34;{\&#34;browserName\&#34;: \&#34;firefox\&#34;}&#34;,&#xA;    &#34;selenium/standalone-chrome:4.2.0-20220527&#34;, &#34;{\&#34;browserName\&#34;: \&#34;chrome\&#34;}&#34;,&#xA;    &#34;selenium/standalone-edge:4.2.0-20220527&#34;, &#34;{\&#34;browserName\&#34;: \&#34;MicrosoftEdge\&#34;}&#34;&#xA;    ]&#xA;&#xA;# URL for connecting to the docker daemon&#xA;# Most simple approach, leave it as http://127.0.0.1:2375, and mount /var/run/docker.sock.&#xA;# 127.0.0.1 is used because interally the container uses socat when /var/run/docker.sock is mounted &#xA;# If var/run/docker.sock is not mounted: &#xA;# Windows: make sure Docker Desktop exposes the daemon via tcp, and use http://host.docker.internal:2375.&#xA;# macOS: install socat and run the following command, socat -4 TCP-LISTEN:2375,fork UNIX-CONNECT:/var/run/docker.sock,&#xA;# then use http://host.docker.internal:2375.&#xA;# Linux: varies from machine to machine, please mount /var/run/docker.sock. If this does not work, please create an issue.&#xA;url = &#34;http://127.0.0.1:2375&#34;&#xA;# Docker image used for video recording&#xA;video-image = &#34;selenium/video:ffmpeg-4.3.1-20220527&#34;&#xA;&#xA;# Uncomment the following section if you are running the node on a separate VM&#xA;# Fill out the placeholders with appropriate values&#xA;[server]&#xA;host = &amp;lt;ip-from-node-machine&amp;gt;&#xA;port = &amp;lt;port-from-node-machine&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To have the assets saved on your host, please mount your host path to &lt;code&gt;/opt/selenium/assets&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Execution with Docker Compose&lt;/h3&gt; &#xA;&lt;p&gt;Here is an example using a Hub and a Node:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/docker-compose-v3-dynamic-grid.yml&#34;&gt;&lt;code&gt;docker-compose-v3-dynamic-grid.yml&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Video recording, screen resolution, and time zones in a Dynamic Grid&lt;/h3&gt; &#xA;&lt;p&gt;To record your WebDriver session, you need to add a &lt;code&gt;se:recordVideo&lt;/code&gt; field set to &lt;code&gt;true&lt;/code&gt;. You can also set a time zone and a screen resolution, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;browserName&#34;: &#34;firefox&#34;,&#xA;  &#34;platformName&#34;: &#34;linux&#34;,&#xA;  &#34;se:recordVideo&#34;: &#34;true&#34;,&#xA;  &#34;se:timeZone&#34;: &#34;US/Pacific&#34;,&#xA;  &#34;se:screenResolution&#34;: &#34;1920x1080&#34;  &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After running a test, check the path you mounted to the Docker container, (&lt;code&gt;${PWD}/assets&lt;/code&gt;), and you should see videos and session information.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Deploying to Kubernetes&lt;/h2&gt; &#xA;&lt;p&gt;We offer a Helm chart to deploy these Docker images to Kubernetes. Read more details at the Helm &lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/charts/selenium-grid/README.md&#34;&gt;readme&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Configuring the containers&lt;/h2&gt; &#xA;&lt;h3&gt;SE_OPTS Selenium Configuration Options&lt;/h3&gt; &#xA;&lt;p&gt;You can pass &lt;code&gt;SE_OPTS&lt;/code&gt; variable with additional commandline parameters for starting a hub or a node.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -p 4444:4444 -e SE_OPTS=&#34;--log-level FINE&#34; --name selenium-hub selenium/hub:4.2.0-20220527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JAVA_OPTS Java Environment Options&lt;/h3&gt; &#xA;&lt;p&gt;You can pass &lt;code&gt;JAVA_OPTS&lt;/code&gt; environment variable to java process.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -p 4444:4444 -e JAVA_OPTS=-Xmx512m --name selenium-hub selenium/hub:4.2.0-20220527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Node configuration options&lt;/h3&gt; &#xA;&lt;p&gt;The Nodes register themselves through the Event Bus. When the Grid is started in its typical Hub/Node setup, the Hub will be the one acting as the Event Bus, and when the Grid is started with all its five elements apart, the Event Bus will be running on its own.&lt;/p&gt; &#xA;&lt;p&gt;In both cases, it is necessary to tell the Node where the Event Bus is, so it can register itself. That is the purpose of the &lt;code&gt;SE_EVENT_BUS_HOST&lt;/code&gt;, &lt;code&gt;SE_EVENT_BUS_PUBLISH_PORT&lt;/code&gt; and &lt;code&gt;SE_EVENT_BUS_SUBSCRIBE_PORT&lt;/code&gt; environment variables.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example with the default values of these environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -e SE_EVENT_BUS_HOST=&amp;lt;event_bus_ip|event_bus_name&amp;gt; -e SE_EVENT_BUS_PUBLISH_PORT=4442 \ &#xA;  -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 --shm-size=&#34;2g&#34; selenium/node-chrome:4.2.0-20220527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting Screen Resolution&lt;/h3&gt; &#xA;&lt;p&gt;By default, nodes start with a screen resolution of 1360 x 1020 with a color depth of 24 bits and a dpi of 96. These settings can be adjusted by specifying &lt;code&gt;SCREEN_WIDTH&lt;/code&gt;, &lt;code&gt;SCREEN_HEIGHT&lt;/code&gt;, &lt;code&gt;SCREEN_DEPTH&lt;/code&gt;, and/or &lt;code&gt;SCREEN_DPI&lt;/code&gt; environmental variables when starting the container.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d -e SCREEN_WIDTH=1366 -e SCREEN_HEIGHT=768 -e SCREEN_DEPTH=24 -e SCREEN_DPI=74 selenium/standalone-firefox:4.2.0-20220527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Grid Url and Session Timeout&lt;/h3&gt; &#xA;&lt;p&gt;In some use cases you might need to set the Grid url to the Node, for example if you&#39;d like to access the BiDi/CDP endpoint. This is also needed when you want to use the new &lt;code&gt;RemoteWebDriver.builder()&lt;/code&gt; or &lt;code&gt;Augmenter()&lt;/code&gt; present in Selenium 4 (since they setup the BiDi/CDP connection implicitly). You can do that through the &lt;code&gt;SE_NODE_GRID_URL&lt;/code&gt; environment variable. Setting this env var is needed if you want to see the live view while sessions are executing.&lt;/p&gt; &#xA;&lt;p&gt;Grid has a default session timeout of 300 seconds, where the session can be on a stale state until it is killed. You can use &lt;code&gt;SE_NODE_SESSION_TIMEOUT&lt;/code&gt; to overwrite that value in seconds.&lt;/p&gt; &#xA;&lt;h3&gt;Session request timeout&lt;/h3&gt; &#xA;&lt;p&gt;A new session request is placed in the Session Queue before it is processed, and the request sits in the queue until a matching slot is found across the registered Nodes. However, the new session request might timeout if no slot was found. By default, a request will stay in the queue up to 300 seconds before it a timeout is reached. In addition, an attempt to process the request is done every 5 seconds (by default).&lt;/p&gt; &#xA;&lt;p&gt;It is possible to override those values through environment variables in the Hub and the SessionQueue (&lt;code&gt;SE_SESSION_REQUEST_TIMEOUT&lt;/code&gt; and &lt;code&gt;SE_SESSION_RETRY_INTERVAL&lt;/code&gt;). For example, a timeout of 500 seconds would be &lt;code&gt;SE_SESSION_REQUEST_TIMEOUT=500&lt;/code&gt; and a retry interval of 2 seconds would be &lt;code&gt;SE_SESSION_RETRY_INTERVAL=2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Increasing session concurrency per container&lt;/h3&gt; &#xA;&lt;p&gt;By default, only one session is configured to run per container through the &lt;code&gt;SE_NODE_MAX_SESSIONS&lt;/code&gt; environment variable. It is possible to increase that number up to the maximum available processors, this is because more stability is achieved when one container/browser has 1 CPU to run.&lt;/p&gt; &#xA;&lt;p&gt;However, if you have measured performance and based on that, you think more sessions can be executed in each container, you can override the maximum limit by setting both &lt;code&gt;SE_NODE_MAX_SESSIONS&lt;/code&gt; to a desired number and &lt;code&gt;SE_NODE_OVERRIDE_MAX_SESSIONS&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;. Nevertheless, running more browser sessions than the available processors is not recommended since you will be overloading the resources.&lt;/p&gt; &#xA;&lt;p&gt;Overriding this setting has a undesired side effect when video recording is enabled, since more than one browser session might be captured in the same video.&lt;/p&gt; &#xA;&lt;h3&gt;Running in Headless mode&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Headless_mode&#34;&gt;Firefox&lt;/a&gt;, &lt;a href=&#34;https://developers.google.com/web/updates/2017/04/headless-chrome&#34;&gt;Chrome&lt;/a&gt;, When using headless mode, there&#39;s no need for the &lt;a href=&#34;https://en.wikipedia.org/wiki/Xvfb&#34;&gt;Xvfb&lt;/a&gt; server to be started.&lt;/p&gt; &#xA;&lt;p&gt;To avoid starting the server you can set the &lt;code&gt;START_XVFB&lt;/code&gt; environment variable to &lt;code&gt;false&lt;/code&gt; (or any other value than &lt;code&gt;true&lt;/code&gt;), for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub -e SE_EVENT_BUS_PUBLISH_PORT=4442 \&#xA;  -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 -e START_XVFB=false --shm-size=&#34;2g&#34; selenium/node-chrome:4.2.0-20220527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, see this GitHub &lt;a href=&#34;https://github.com/SeleniumHQ/docker-selenium/issues/567&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Stopping the Node/Standalone after N sessions have been executed&lt;/h3&gt; &#xA;&lt;p&gt;In some environments, like Docker Swarm or Kubernetes, it is useful to shut down the Node or Standalone container after N tests have been executed. For example, this can be used in Kubernetes to terminate the pod and then scale a new one after N sessions. Set the environment variable &lt;code&gt;DRAIN_AFTER_SESSION_COUNT&lt;/code&gt; to a value higher than zero to enable this behaviour.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -e DRAIN_AFTER_SESSION_COUNT=5 --shm-size=&#34;2g&#34; selenium/standalone-firefox:4.2.0-20220527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the previous command, the Standalone container will shutdown after 5 sessions have been executed.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Building the images&lt;/h2&gt; &#xA;&lt;p&gt;Clone the repo and from the project directory root you can build everything by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ VERSION=local make build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to configure environment variable in order to build the image (http proxy for instance), simply set an environment variable &lt;code&gt;BUILD_ARGS&lt;/code&gt; that contains the additional variables to pass to the docker context (this will only work with docker &amp;gt;= 1.9)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ BUILD_ARGS=&#34;--build-arg http_proxy=http://acme:3128 --build-arg https_proxy=http://acme:3128&#34; make build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Omitting&lt;/em&gt; &lt;code&gt;VERSION=local&lt;/code&gt; &lt;em&gt;will build the images with the released version but replacing the date for the current one.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Waiting for the Grid to be ready&lt;/h2&gt; &#xA;&lt;p&gt;It is a good practice to check first if the Grid is up and ready to receive requests, this can be done by checking the &lt;code&gt;/wd/hub/status&lt;/code&gt; endpoint.&lt;/p&gt; &#xA;&lt;p&gt;A Grid that is ready, composed by a hub and two nodes, could look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;value&#34;: {&#xA;    &#34;ready&#34;: true,&#xA;    &#34;message&#34;: &#34;Selenium Grid ready.&#34;,&#xA;    &#34;nodes&#34;: [&#xA;      {&#xA;        &#34;id&#34;: &#34;6c0a2c59-7e99-469d-bbfc-313dc638797c&#34;,&#xA;        &#34;uri&#34;: &#34;http:\u002f\u002f172.19.0.3:5555&#34;,&#xA;        &#34;maxSessions&#34;: 4,&#xA;        &#34;stereotypes&#34;: [&#xA;          {&#xA;            &#34;capabilities&#34;: {&#xA;              &#34;browserName&#34;: &#34;firefox&#34;&#xA;            },&#xA;            &#34;count&#34;: 4&#xA;          }&#xA;        ],&#xA;        &#34;sessions&#34;: [&#xA;        ]&#xA;      },&#xA;      {&#xA;        &#34;id&#34;: &#34;26af3363-a0d8-4bd6-a854-2c7497ed64a4&#34;,&#xA;        &#34;uri&#34;: &#34;http:\u002f\u002f172.19.0.4:5555&#34;,&#xA;        &#34;maxSessions&#34;: 4,&#xA;        &#34;stereotypes&#34;: [&#xA;          {&#xA;            &#34;capabilities&#34;: {&#xA;              &#34;browserName&#34;: &#34;chrome&#34;&#xA;            },&#xA;            &#34;count&#34;: 4&#xA;          }&#xA;        ],&#xA;        &#34;sessions&#34;: [&#xA;        ]&#xA;      }&#xA;    ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;&#34;ready&#34;: true&lt;/code&gt; value indicates that the Grid is ready to receive requests. This status can be polled through a script before running any test, or it can be added as a &lt;a href=&#34;https://docs.docker.com/engine/reference/run/#healthcheck&#34;&gt;HEALTHCHECK&lt;/a&gt; when the docker container is started.&lt;/p&gt; &#xA;&lt;h3&gt;Adding a &lt;a href=&#34;https://docs.docker.com/engine/reference/run/#healthcheck&#34;&gt;HEALTHCHECK&lt;/a&gt; to the Grid&lt;/h3&gt; &#xA;&lt;p&gt;The script &lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/Base/check-grid.sh&#34;&gt;check-grid.sh&lt;/a&gt;, which is included in the images, can be used to poll the Grid status.&lt;/p&gt; &#xA;&lt;p&gt;This example checks the status of the Grid every 15 seconds, it has a timeout of 30 seconds when the check is done, and it retries up to 5 times until the container is marked as unhealthy. Please use adjusted values to fit your needs, (if needed) replace the &lt;code&gt;--host&lt;/code&gt; and &lt;code&gt;--port&lt;/code&gt; parameters for the ones used in your environment.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker network create grid&#xA;$ docker run -d -p 4444:4444 --net grid --name selenium-hub \&#xA;    --health-cmd=&#39;/opt/bin/check-grid.sh --host 0.0.0.0 --port 4444&#39; \&#xA;    --health-interval=15s --health-timeout=30s --health-retries=5 \&#xA;    selenium/hub:4.2.0-20220527&#xA;$ docker run -d --net grid -e HUB_HOST=selenium-hub --shm-size=&#34;2g&#34; selenium/node-chrome:4.2.0-20220527&#xA;$ docker run -d --net grid -e HUB_HOST=selenium-hub --shm-size=&#34;2g&#34; selenium/node-edge:4.2.0-20220527&#xA;$ docker run -d --net grid -e HUB_HOST=selenium-hub --shm-size=&#34;2g&#34; selenium/node-firefox:4.2.0-20220527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;\&lt;/code&gt; line delimiter won&#39;t work on Windows based terminals, try either &lt;code&gt;^&lt;/code&gt; or a backtick.&lt;/p&gt; &#xA;&lt;p&gt;The container health status can be checked by doing &lt;code&gt;docker ps&lt;/code&gt; and verifying the &lt;code&gt;(healthy)|(unhealthy)&lt;/code&gt; status or by inspecting it in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker inspect --format=&#39;{{json .State.Health.Status}}&#39; selenium-hub&#xA;&#34;healthy&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using a bash script to wait for the Grid&lt;/h3&gt; &#xA;&lt;p&gt;A common problem known in docker is that a running container does not always mean that the application inside it is ready. A simple way to tackle this is by using a &#34;wait-for-it&#34; script, more information can be seen &lt;a href=&#34;https://docs.docker.com/compose/startup-order/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The following script is an example of how this can be done using bash, but the same principle applies if you want to do this with the programming language used to write the tests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash&#xA;# wait-for-grid.sh&#xA;&#xA;set -e&#xA;&#xA;cmd=&#34;$@&#34;&#xA;&#xA;while ! curl -sSL &#34;http://localhost:4444/wd/hub/status&#34; 2&amp;gt;&amp;amp;1 \&#xA;        | jq -r &#39;.value.ready&#39; 2&amp;gt;&amp;amp;1 | grep &#34;true&#34; &amp;gt;/dev/null; do&#xA;    echo &#39;Waiting for the Grid&#39;&#xA;    sleep 1&#xA;done&#xA;&#xA;&amp;gt;&amp;amp;2 echo &#34;Selenium Grid is up - executing tests&#34;&#xA;exec $cmd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Will require &lt;code&gt;jq&lt;/code&gt; installed via &lt;code&gt;apt-get&lt;/code&gt;, else the script will keep printing &lt;code&gt;Waiting&lt;/code&gt; without completing the execution.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If needed, replace &lt;code&gt;localhost&lt;/code&gt; and &lt;code&gt;4444&lt;/code&gt; for the correct values in your environment. Also, this script is polling indefinitely, you might want to tweak it and establish a timeout.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s say that the normal command to execute your tests is &lt;code&gt;mvn clean test&lt;/code&gt;. Here is a way to use the above script and execute your tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./wait-for-grid.sh mvn clean test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Like this, the script will poll until the Grid is ready, and then your tests will start.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;This project uses &lt;a href=&#34;https://github.com/LibVNC/x11vnc&#34;&gt;x11vnc&lt;/a&gt; as VNC server to allow users inspect what is happening inside the container. Users can connect to this server in two ways:&lt;/p&gt; &#xA;&lt;h3&gt;Using a VNC client&lt;/h3&gt; &#xA;&lt;p&gt;The VNC server is listening to port 5900, you can use a VNC client and connect to it. Feel free to map port 5900 to any free external port that you wish.&lt;/p&gt; &#xA;&lt;p&gt;The internal 5900 port remains the same because that is the configured port for the VNC server running inside the container. You can override it with the &lt;code&gt;VNC_PORT&lt;/code&gt; environment variable in case you want to use &lt;code&gt;--net=host&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example with the standalone images, the same concept applies to the node images.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -p 4444:4444 -p 5900:5900 --shm-size=&#34;2g&#34; selenium/standalone-chrome:4.2.0-20220527&#xA;$ docker run -d -p 4445:4444 -p 5901:5900 --shm-size=&#34;2g&#34; selenium/standalone-edge:4.2.0-20220527&#xA;$ docker run -d -p 4446:4444 -p 5902:5900 --shm-size=&#34;2g&#34; selenium/standalone-firefox:4.2.0-20220527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, you would use in your VNC client:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Port 5900 to connect to the Chrome container&lt;/li&gt; &#xA; &lt;li&gt;Port 5901 to connect to the Edge container&lt;/li&gt; &#xA; &lt;li&gt;Port 5902 to connect to the Firefox container&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you get a prompt asking for a password, it is: &lt;code&gt;secret&lt;/code&gt;. If you wish to change this, you should either change it in the &lt;code&gt;/NodeBase/Dockerfile&lt;/code&gt; and build the images yourself, or you can define a Docker image that derives from the posted ones which reconfigures it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;#FROM selenium/node-chrome:4.2.0-20220527&#xA;#FROM selenium/node-edge:4.2.0-20220527&#xA;#FROM selenium/node-firefox:4.2.0-20220527&#xA;#Choose the FROM statement that works for you.&#xA;&#xA;RUN x11vnc -storepasswd &amp;lt;your-password-here&amp;gt; /home/seluser/.vnc/passwd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to run VNC without password authentication you can set the environment variable &lt;code&gt;VNC_NO_PASSWORD=1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to run VNC in view-only mode you can set the environment variable &lt;code&gt;VNC_VIEW_ONLY=1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using your browser (no VNC client is needed)&lt;/h3&gt; &#xA;&lt;p&gt;This project uses &lt;a href=&#34;https://github.com/novnc/noVNC&#34;&gt;noVNC&lt;/a&gt; to allow users inspect visually container activity with their browser. This might come handy if you cannot install a VNC client on your machine. Port 7900 is used to start noVNC, so you will need to connect to that port with your browser.&lt;/p&gt; &#xA;&lt;p&gt;Similarly to the previous section, feel free to map port 7900 to any free external port that you wish. You can also override it with the &lt;code&gt;NO_VNC_PORT&lt;/code&gt; environment variable in case you want to use &lt;code&gt;--net=host&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example with the standalone images, the same concept applies to the node images.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -p 4444:4444 -p 7900:7900 --shm-size=&#34;2g&#34; selenium/standalone-chrome:4.2.0-20220527&#xA;$ docker run -d -p 4445:4444 -p 7901:7900 --shm-size=&#34;2g&#34; selenium/standalone-edge:4.2.0-20220527&#xA;$ docker run -d -p 4446:4444 -p 7902:7900 --shm-size=&#34;2g&#34; selenium/standalone-firefox:4.2.0-20220527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, you would use in your browser:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:7900/&#34;&gt;http://localhost:7900/&lt;/a&gt; to connect to the Chrome container&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:7901/&#34;&gt;http://localhost:7901/&lt;/a&gt; to connect to the Edge container&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:7902/&#34;&gt;http://localhost:7902/&lt;/a&gt; to connect to the Firefox container&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you get a prompt asking for a password, it is: &lt;code&gt;secret&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;All output gets sent to stdout, so it can be inspected by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker logs -f &amp;lt;container-id|container-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can increase the log output by passing environment variable to the containers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SE_OPTS=&#34;--log-level FINE&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;--shm-size=&#34;2g&#34;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Why is &lt;code&gt;--shm-size 2g&lt;/code&gt; necessary?&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is a known workaround to avoid the browser crashing inside a docker container, here are the documented issues for &lt;a href=&#34;https://code.google.com/p/chromium/issues/detail?id=519952&#34;&gt;Chrome&lt;/a&gt; and &lt;a href=&#34;https://bugzilla.mozilla.org/show_bug.cgi?id=1338771#c10&#34;&gt;Firefox&lt;/a&gt;. The shm size of 2gb is arbitrary but known to work well, your specific use case might need a different value, it is recommended to tune this value according to your needs.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Headless&lt;/h3&gt; &#xA;&lt;p&gt;If you see the following selenium exceptions:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Message: invalid argument: can&#39;t kill an exited process&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Message: unknown error: Chrome failed to start: exited abnormally&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The reason &lt;em&gt;might&lt;/em&gt; be that you&#39;ve set the &lt;code&gt;START_XVFB&lt;/code&gt; environment variable to &#34;false&#34;, but forgot to actually run Firefox, Chrome or Edge in headless mode.&lt;/p&gt; &#xA;&lt;h3&gt;Mounting volumes to retrieve downloaded files&lt;/h3&gt; &#xA;&lt;p&gt;A common scenario is mounting a volume to the browser container in order to retrieve downloaded files. This works well in Windows and macOS but not without workarounds in Linux. For more details, check this well documented &lt;a href=&#34;https://github.com/SeleniumHQ/docker-selenium/issues/1095&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, while using Linux, you might be starting a container in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d -p 4444:4444 --shm-size=&#34;2g&#34; \&#xA;  -v /home/ubuntu/files:/home/seluser/files \&#xA;  selenium/standalone-chrome:4.2.0-20220527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That will mount the host &lt;code&gt;/home/ubuntu/files&lt;/code&gt; directory to the &lt;code&gt;/home/seluser/files&lt;/code&gt; inside the container. The problem happens because the volume will be mounted as &lt;code&gt;root&lt;/code&gt;, and therefore the browser cannot write a file to that directory because it is running under the user &lt;code&gt;seluser&lt;/code&gt;. This happens because that is how Docker mounts volumes in Linux, more details in this &lt;a href=&#34;https://github.com/moby/moby/issues/2259&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A workaround for this is to create the directory on the host and change its permissions &lt;strong&gt;before mounting the volume&lt;/strong&gt;. Depending on your user permissions, you might need to use &lt;code&gt;sudo&lt;/code&gt; for some of these commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir /home/ubuntu/files&#xA;chown 1200:1201 /home/ubuntu/files&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After doing this, you should be able to download files to the mounted directory. If you have a better workaround, please send us a pull request!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitpod.io/#https://github.com/SeleniumHQ/docker-selenium&#34;&gt;&lt;img src=&#34;https://gitpod.io/button/open-in-gitpod.svg?sanitize=true&#34; alt=&#34;Open in Gitpod&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>haixiangyan/jest-tutorial</title>
    <updated>2022-05-29T01:54:10Z</updated>
    <id>tag:github.com,2022-05-29:/haixiangyan/jest-tutorial</id>
    <link href="https://github.com/haixiangyan/jest-tutorial" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🃏《Jest 实践指南》&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🃏《Jest 实践指南》&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://coveralls.io/github/haixiangyan/jest-tutorial?branch=main&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/haixiangyan/jest-tutorial-example/badge.svg?branch=main&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://visitor-badge.glitch.me/badge?page_id=jest-tutorial&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/haixiangyan/jest-tutorial/main/cover.jpeg&#34; width=&#34;300&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.yanhaixiang.com/jest-tutorial/&#34;&gt;《Jest 实践指南》访问链接&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/haixiangyan/jest-tutorial-example&#34;&gt;《Jest 实践指南》配套项目&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;前言&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jestjs.io/&#34;&gt;Jest&lt;/a&gt; 看似很简单，就像很多博客写的那样：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;expect(sum(1, 1)).toEqual(2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;然而在真实业务中，写出一个好测试的难度并没有大家想的那么低。我总结了一下写测试的几个难点：&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;不会配置。&lt;/strong&gt; Jest 的上手文档非常简单，甚至不需要配置。但真实情况是只要一个配置没配好，所有测试都跑不起来。测试不像开发，代码有问题可以慢慢调。 测试是一个 0 - 1 游戏，不是成功就是失败，挫败感非常强。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;不知道要怎么 Mock。&lt;/strong&gt; 这个绝对是经典中的经典。虽然官方文档有教程，但是真实的业务往往不是那么理想，远比文档要复杂的多。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;不会构造测试用例。&lt;/strong&gt; 刚接触测试时，很容易把做业务那套 “实现 XXX 功能” 的想法代入测试。但测试的重点不在于实现功能，而是构造用例。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;没有测试策略。&lt;/strong&gt; 上面是 “技” 的难点，测试还有 “术” 的难点。闷着头一通肝测试代码并不高效，使用合适的测试策略远比写 10 个测试用例重要。&lt;/p&gt; &#xA;&lt;p&gt;上面这些问题很容易让人写出难以维护和复杂的测试。只要业务一改，不仅要维护业务代码还要维护测试代码。 这时，你不禁感叹：“测试真浪费时间”，最终放弃写测试，直接开摆。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;好的测试会让你获得很高的代码信心，而不好的测试则会严重拖垮项目开发。所以，大家所厌恶的不应该是测试本身，而是那些维护性差的测试。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;目的&lt;/h2&gt; &#xA;&lt;p&gt;我在网上翻找关于前端测试的资料时，我发现真的太少了，几乎可以分为几类：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;入门类。&lt;/strong&gt; 安装 Jest，外加 &lt;code&gt;expect(1 + 1).toEqual(2)&lt;/code&gt; 小例子&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;API 说明书类。&lt;/strong&gt; 类似于把 Jest 官网抄了一遍&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;理论类。&lt;/strong&gt; 是什么、为什么、测试分类等，但最重要的 “怎么做” 没有说&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;并不是说这些文章不好，只是，这些文章大多数停留在最初级，很不利于其它同学来学习一门新技术。&lt;/p&gt; &#xA;&lt;p&gt;同时，我还拜访了一下 &lt;a href=&#34;https://jestjs.io/zh-Hans/&#34;&gt;Jest 的官网&lt;/a&gt; 。没想到，都 2022 年了，中文翻译依然这么难看：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/haixiangyan/jest-tutorial/main/docs/bad-translation.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;先不说翻译的正确性如何，单看这中文的内容就让人没有想看下去的欲望，真希望 Jest 能找稍微专业一点的人来做翻译。 由于官网的中文翻译做的实在太烂，遇到问题几乎在中文社区是找不到的。&lt;/p&gt; &#xA;&lt;p&gt;终于，我看到了 React Testing Library 作者 Kent C. Dodds 的 &lt;a href=&#34;https://kentcdodds.com/&#34;&gt;博客&lt;/a&gt; 。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/haixiangyan/jest-tutorial/main/docs/kentcdodds.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;他写了很多关于测试思路的文章，每一篇都非常精彩。&lt;strong&gt;受他的启发，我觉得有必要把这些思想和技巧分享出来，最终形成了这本小书。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;内容&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;此次教程主要分享测试的思路为主，虽然以 React 为主要技术栈，但使用其它技术栈的读者依然可以流畅阅读。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;本教程是我结合了自身实践、Kent C. Dodds 文章、StackOverflow、Github Issue 以及别的博客最终总结出来的一套实践指南。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;小书包含 3 部分：&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;基础实践。&lt;/strong&gt; 从 0 到 1 写项目和测试，每一章会通过一个业务例子来分享测试难点、解法和思路。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/haixiangyan/jest-tutorial-example&#34;&gt;配套项目&lt;/a&gt;。&lt;/strong&gt; 如果你在某一步卡壳了，也可以参考这个项目。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;测试思路。&lt;/strong&gt; 分享一些 Kent 的文章（中文翻译）以及测试总结。&lt;/p&gt; &#xA;&lt;h2&gt;求关注&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;这教程 + 配套项目写了 3 周，说实话挺累的。原创不易，打赏就不必了，观众老爷省着吧。只求大家多关注一下我的新公众号【写代码的海怪】。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/haixiangyan/jest-tutorial/main/docs/qrcode.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nginxinc/docker-nginx</title>
    <updated>2022-05-29T01:54:10Z</updated>
    <id>tag:github.com,2022-05-29:/nginxinc/docker-nginx</id>
    <link href="https://github.com/nginxinc/docker-nginx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official NGINX Dockerfiles&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;About this Repo&lt;/h1&gt; &#xA;&lt;p&gt;This is the Git repo of the official Docker image for &lt;a href=&#34;https://registry.hub.docker.com/_/nginx/&#34;&gt;nginx&lt;/a&gt;. See the Hub page for the full readme on how to use the Docker image and for information regarding contributing and issues.&lt;/p&gt; &#xA;&lt;p&gt;The full readme is generated over in &lt;a href=&#34;https://github.com/docker-library/docs&#34;&gt;docker-library/docs&lt;/a&gt;, specifically in &lt;a href=&#34;https://github.com/docker-library/docs/tree/master/nginx&#34;&gt;docker-library/docs/nginx&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The changelog for NGINX releases is available at &lt;a href=&#34;https://nginx.org/en/CHANGES&#34;&gt;nginx.org changes page&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>codeedu/wsl2-docker-quickstart</title>
    <updated>2022-05-29T01:54:10Z</updated>
    <id>tag:github.com,2022-05-29:/codeedu/wsl2-docker-quickstart</id>
    <link href="https://github.com/codeedu/wsl2-docker-quickstart" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Guia rápido do WSL2 + Docker&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://fullcycle.com.br/&#34; target=&#34;blank&#34;&gt;&lt;img src=&#34;https://fullcycle.com.br/wp-content/themes/fullcycle/assets/images/fullcycle-logo.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Guia rápido do WSL2 + Docker&lt;/h1&gt; &#xA;&lt;h2&gt;O que é o WSL2&lt;/h2&gt; &#xA;&lt;p&gt;Em 2016, a Microsoft anunciou a possibilidade de rodar o Linux dentro do Windows 10 como um subsistema e o nome a isto foi dado de &lt;strong&gt;WSL&lt;/strong&gt; ou &lt;strong&gt;Windows Subsystem for Linux&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;O acesso ao sistema de arquivos no Windows 10 pelo Linux era simples e rápido, porém não tínhamos uma execução completa do kernel do Linux, além de outros artefatos nativos e isto impossibilitava a execução de várias tarefas no Linux, uma delas é o Docker.&lt;/p&gt; &#xA;&lt;p&gt;Em 2019, a Microsoft anunciou o &lt;strong&gt;WSL 2&lt;/strong&gt;, com uma dinâmica aprimorada em relação a 1ª versão:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Execução do kernel completo do Linux.&lt;/li&gt; &#xA; &lt;li&gt;Melhor desempenho para acesso aos arquivos dentro do Linux.&lt;/li&gt; &#xA; &lt;li&gt;Compatibilidade completa de chamada do sistema.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;O WSL 2 foi lançado oficialmente no dia 28 de maio de 2020.&lt;/p&gt; &#xA;&lt;p&gt;Com WSL 2 é possível executar Docker no Linux usando o Windows 10/11.&lt;/p&gt; &#xA;&lt;p&gt;Compare as versões: &lt;a href=&#34;https://docs.microsoft.com/pt-br/windows/wsl/compare-versions&#34;&gt;https://docs.microsoft.com/pt-br/windows/wsl/compare-versions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;O que é Docker&lt;/h2&gt; &#xA;&lt;p&gt;Docker é uma plataforma open source que possibilita o empacotamento de uma aplicação dentro de um container. Uma aplicação consegue se adequar e rodar em qualquer máquina que tenha essa tecnologia instalada.&lt;/p&gt; &#xA;&lt;h2&gt;Porque usar WSL 2 + Docker para desenvolvimento&lt;/h2&gt; &#xA;&lt;p&gt;Configurar ambientes de desenvolvimento no Windows sempre foi burocrático e complexo, além do desempenho de algumas ferramentas não serem totalmente satisfatórias.&lt;/p&gt; &#xA;&lt;p&gt;Com o nascimento do Docker este cenário melhorou bastante, pois podemos montar nosso ambiente de desenvolvimento baseado em Unix, de forma independente e rápida, e ainda unificada com outros sistemas operacionais.&lt;/p&gt; &#xA;&lt;p&gt;Veja nossa &lt;strong&gt;live sobre WSL 2 + Docker no canal Full Cycle&lt;/strong&gt;: &lt;a href=&#34;https://www.youtube.com/watch?v=usF0rYCcj-E&#34;&gt;https://www.youtube.com/watch?v=usF0rYCcj-E&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Modos de usar Docker no Windows&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/codeedu/wsl2-docker-quickstart/main/#docker-toolbox&#34;&gt;Docker Toolbox&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/codeedu/wsl2-docker-quickstart/main/#docker-desktop-com-hyper-v&#34;&gt;Docker Desktop com Hyper-V&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/codeedu/wsl2-docker-quickstart/main/#docker-desktop-com-wsl2&#34;&gt;Docker Desktop com WSL2&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/codeedu/wsl2-docker-quickstart/main/#docker-engine-docker-nativo-diretamente-instalado-no-wsl2&#34;&gt;Docker Engine (Docker Nativo) diretamente instalado no WSL2&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Docker Toolbox&lt;/h3&gt; &#xA;&lt;p&gt;Roda em cima do programa de virtualização de sistemas da Oracle, chamado de &lt;strong&gt;VirtualBox&lt;/strong&gt;. O desempenho do Docker Toolbox para muitas aplicações/ferramentas pode ser muito ruim, inviabilizando seu uso.&lt;/p&gt; &#xA;&lt;h3&gt;Docker Desktop com Hyper-V&lt;/h3&gt; &#xA;&lt;p&gt;Roda em cima do &lt;strong&gt;Hyper-V&lt;/strong&gt; da Microsoft em vez de usar o VirtualBox usando pelo Docker Toolbox. O Docker Desktop com Hyper-V necessita da versão &lt;strong&gt;PRO&lt;/strong&gt; do Windows 10/11, portanto é necessário compra-la se você não a tem.&lt;/p&gt; &#xA;&lt;p&gt;O Hyper-V costuma requerer muitos recursos da máquina e apesar do desempenho ser melhor que o Docker Toolbox, a máquina pode ficar lenta para se utilizar outras coisas no Windows.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;A Docker já anunciou que vai remover o suporte ao Hyper-V futuramente.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Docker Desktop com WSL2&lt;/h3&gt; &#xA;&lt;p&gt;Roda em cima do &lt;strong&gt;Virtual Machine Platform&lt;/strong&gt; em vez de usar o VirtualBox ou Hyper-V. Se integra com o WSL2 permitindo rodar o Docker dentro do ambiente do Linux. Não é necessário adquirir licença PRO do Windows 10/11, tem um grande desempenho e consome menos recursos quando comparado ao Docker Toolbox ou Docker Desktop com Hyper-V.&lt;/p&gt; &#xA;&lt;p&gt;Temos a grande vantagem de se trabalhar totalmente dentro do Linux para desenvolvimento, portanto, usar WSL2 + Docker é a melhor maneira de se desenvolver aplicações no Windows.&lt;/p&gt; &#xA;&lt;h4&gt;Vantagens&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simplifica a configuração do Docker tanto no Windows quanto no WSL 2.&lt;/li&gt; &#xA; &lt;li&gt;Permite rodar o Docker fora do WSL 2. É possível usar qualquer shell como PowerShell ou DOS.&lt;/li&gt; &#xA; &lt;li&gt;Suporta containers em modo Windows (Imagens que contém Windows por debaixo dos panos ao invés de Linux).&lt;/li&gt; &#xA; &lt;li&gt;Cria um ambiente centralizado para armazenamento de imagens, volumes e outros configurações Docker. Pode-se ter várias distribuições do WSL 2 rodando o mesmo Docker.&lt;/li&gt; &#xA; &lt;li&gt;Interface visual para administrar o Docker.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Desvantagens&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uso de memória inicial sem rodar nenhum container Docker pode chegar a 3GB.&lt;/li&gt; &#xA; &lt;li&gt;Adiciona infraestrutura complexa para executar Docker, quando se necessita apenas de rodar os containers Docker dentro de um WSL 2 apenas.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;docker-engine-docker-nativo-diretamente-instalado-no-wsl2&#34;&gt;&lt;/a&gt;Docker Engine (Docker Nativo) diretamente instalado no WSL2.&lt;/h3&gt; &#xA;&lt;p&gt;O Docker Engine é o Docker nativo que roda no ambiente Linux e completamente suportado para WSL 2. Sua instalação é idêntica a descrita para as próprias distribuições Linux disponibilizadas no site do &lt;a href=&#34;https://docs.docker.com/engine/install/ubuntu/&#34;&gt;Docker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Vantagens&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Consume o mínimo de memória necessário para rodar o Docker Daemon (servidor do Docker).&lt;/li&gt; &#xA; &lt;li&gt;É mais rápido ainda que com Docker Desktop, porque rodar diretamente dentro da própria instância do WSL2 e não em uma instância separada de Linux.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Desvantagens&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Necessário executar o comando &lt;code&gt;sudo service docker start&lt;/code&gt; sempre que o WSL 2 foi reiniciado. Isto não é necessariamente uma desvantagem, mas é bom pontuar, mas isto é um pequeno detalhe e será resolvido futuramente com a inclusão do arquivo /etc/wsl.conf que permitirá incluir comandos para serem executados toda vez que o WSL for reiniciado.&lt;/li&gt; &#xA; &lt;li&gt;Se necessitar executar Docker em outra instância do WSL 2, é necessário instalar novamente o Docker nesta instância ou configurar o acesso ao socket do Docker desejado para compartilhar o Docker entre as instâncias.&lt;/li&gt; &#xA; &lt;li&gt;Não suporta containers no modo Windows.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requisitos mínimos&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Windows 10 Home ou Professional&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Versão 1903 ou superior para sistemas x64, com Build 18362 ou superior.&lt;/li&gt; &#xA;   &lt;li&gt;Versão 2004 ou superior para sistemas ARM64, com Build 19041 ou superior.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Windows 11 Home ou Professional&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Versão 22000 ou superior.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Provavelmente seu Windows já está na versão suportada, mas verifique isto acessando o &lt;code&gt;menu de notificações perto do relógio &amp;gt; Todas as configurações &amp;gt; Sistema &amp;gt; Sobre&lt;/code&gt;. Caso não esteja, use o Assistente do Windows Update para atualizar a sua versão do Windows.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uma máquina compatível com virtualização (verifique a disponibilidade de acordo com a marca do seu processador. Se sua máquina for mais antiga pode ser necessária habilita-la na BIOS).&lt;/li&gt; &#xA; &lt;li&gt;Pelo menos 4GB de memória RAM.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Instalação do WSL 2&lt;/h2&gt; &#xA;&lt;h3&gt;Habilite o WSL no Windows 10/11&lt;/h3&gt; &#xA;&lt;p&gt;Execute os seguintes comandos no PowerShell em modo administrador:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart&#xA;dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Abra o PowerShell e digite o comando &lt;code&gt;wsl&lt;/code&gt;, se não funcionar reinicie sua máquina.&lt;/p&gt; &#xA;&lt;h3&gt;Instale o WSL 2 no Windows 10/11&lt;/h3&gt; &#xA;&lt;p&gt;Baixe o Kernel do WSL 2 neste link: &lt;a href=&#34;https://docs.microsoft.com/pt-br/windows/wsl/wsl2-kernel&#34;&gt;https://docs.microsoft.com/pt-br/windows/wsl/wsl2-kernel&lt;/a&gt; e instale o pacote.&lt;/p&gt; &#xA;&lt;h3&gt;Atribua a versão default do WSL para a versão 2&lt;/h3&gt; &#xA;&lt;p&gt;A versão 1 do WSL é a padrão no momento, atribua a versão default para a versão 2, assim todas as distribuições Linux instaladas serão já por default da versão 2. Execute o comando com o PowerShell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wsl --set-default-version 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Escolha sua distribuição Linux no Windows Store&lt;/h3&gt; &#xA;&lt;p&gt;Escolha sua distribuição Linux preferida no aplicativo Windows Store, sugerimos o Ubuntu por ser uma distribuição popular e que já vem com várias ferramentas instaladas por padrão.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/codeedu/wsl2-docker-quickstart/main/img/distribuicoes_linux.png&#34; alt=&#34;Distribuições Linux no Windows Store&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ao iniciar o Linux instalado, você deverá criar um &lt;strong&gt;nome de usuário&lt;/strong&gt; que poderá ser o mesmo da sua máquina e uma &lt;strong&gt;senha&lt;/strong&gt;, este será o usuário &lt;strong&gt;root da sua instância WSL&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Parabéns, seu WSL2 já está funcionando:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/codeedu/wsl2-docker-quickstart/main/img/wsl2_funcionando.png&#34; alt=&#34;Exemplo de WSL2 funcionando&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;(Opcional) Desinstale o Hyper-V&lt;/h3&gt; &#xA;&lt;p&gt;Agora que temos o WSL 2 não precisamos mais do Hyper-V, desabilite-o em Painel de Controle &amp;gt; Programas e Recursos (se você tiver instalado o Hyper-V).&lt;/p&gt; &#xA;&lt;h3&gt;(Opcional) Alterar a versão do WSL 1 de uma distribuição para a versão 2&lt;/h3&gt; &#xA;&lt;p&gt;Se você já tiver o WSL 1 na máquina e acabou de instalar a versão 2, pode-se converter sua distribuição Linux WSL 1 para WSL 2, execute o comando com o PowerShell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wsl --set-version &amp;lt;distribution name&amp;gt; 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Isto pode demorar muitos minutos.&lt;/p&gt; &#xA;&lt;h3&gt;(Opcional) Usar Windows Terminal como terminal padrão de desenvolvimento para Windows&lt;/h3&gt; &#xA;&lt;p&gt;Uma deficiência que o Windows sempre teve era prover um terminal adequado para desenvolvimento. Agora temos o &lt;strong&gt;Windows Terminal&lt;/strong&gt; construído pela própria Microsoft que permite rodar terminais em abas, alterar cores e temas, configurar atalhos e muito mais.&lt;/p&gt; &#xA;&lt;p&gt;Instale-o pelo Windows Store e use estas &lt;a href=&#34;https://raw.githubusercontent.com/codeedu/wsl2-docker-quickstart/main/windows-terminal-settings.json&#34;&gt;configurações padrões&lt;/a&gt; para habilitar WSL 2, Git Bash e o tema drácula e alguns atalhos.&lt;/p&gt; &#xA;&lt;p&gt;Para sobrescrever as configurações &lt;strong&gt;clique a seta para baixo do lado das abas e em configurações&lt;/strong&gt;, abrirá as configurações do Windows Terminal, apenas cole o conteúdo do arquivo JSON e salve.&lt;/p&gt; &#xA;&lt;h2&gt;O que o WSL 2 pode usar de recursos da sua máquina&lt;/h2&gt; &#xA;&lt;p&gt;Podemos dizer que o WSL 2 tem acesso quase que total ao recursos de sua máquina. Ele tem acesso por padrão:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A todo disco rígido.&lt;/li&gt; &#xA; &lt;li&gt;A usar completamente os recursos de processamento.&lt;/li&gt; &#xA; &lt;li&gt;A usar 80% da memória RAM disponível.&lt;/li&gt; &#xA; &lt;li&gt;A usar 25% da memória disponível para SWAP.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Isto pode não ser interessante, uma vez que o WSL 2 pode usar praticamente todos os recursos de sua máquina, mas podemos configurar limites.&lt;/p&gt; &#xA;&lt;p&gt;Crie um arquivo chamado &lt;code&gt;.wslconfig&lt;/code&gt; na raiz da sua pasta de usuário &lt;code&gt;(C:\Users\&amp;lt;seu_usuario&amp;gt;)&lt;/code&gt; e defina estas configurações:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;[wsl2]&#xA;memory=8GB&#xA;processors=4&#xA;swap=2GB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Estes são limites de exemplo e as configurações mais básicas a serem utilizadas, configure-os às suas disponibilidades. Para mais detalhes veja esta documentação da Microsoft: &lt;a href=&#34;https://docs.microsoft.com/pt-br/windows/wsl/wsl-config#wsl-2-settings&#34;&gt;https://docs.microsoft.com/pt-br/windows/wsl/wsl-config#wsl-2-settings&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Para aplicar estas configurações é necessário reiniciar as distribuições Linux, então sugerimos executar no PowerShell o comando: &lt;code&gt;wsl --shutdown&lt;/code&gt; (Este comando vai desligar todas as instâncias WSL 2 ativas e basta abrir o terminal novamente para usa-la já com as novas configurações).&lt;/p&gt; &#xA;&lt;h2&gt;Integrar Docker com WSL 2&lt;/h2&gt; &#xA;&lt;p&gt;No início deste tutorial vimos &lt;a href=&#34;https://raw.githubusercontent.com/codeedu/wsl2-docker-quickstart/main/#modos-de-usar-docker-no-windows&#34;&gt;4 modos de usar Docker no Windows&lt;/a&gt;, mas somente 2 são recomendamos:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/codeedu/wsl2-docker-quickstart/main/#instalar-o-docker-com-docker-engine-docker-nativo&#34;&gt;Docker Engine (Docker Nativo) diretamente instalado no WSL2&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/codeedu/wsl2-docker-quickstart/main/#instalar-o-docker-com-docker-desktop&#34;&gt;Docker Desktop com WSL2&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Recomendamos que escolha a 1ª opção pelos seus benefícios, já que a maioria das pessoas poderão usar o WSL 2 como ferramenta central para desenvolvimento. Mas, neste tutorial vamos mostrar as duas forma de instalação.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;instalar-o-docker-com-docker-engine-docker-nativo&#34;&gt;&lt;/a&gt;1 - Instalar o Docker com Docker Engine (Docker Nativo)&lt;/h3&gt; &#xA;&lt;p&gt;A instalação do Docker no WSL 2 é idêntica a instalação do Docker em sua própria distribuição Linux, portanto se você tem o Ubuntu é igual ao Ubuntu, se é Fedora é igual ao Fedora. A documentação de instalação do Docker no Linux por distribuição está &lt;a href=&#34;https://docs.docker.com/engine/install/&#34;&gt;aqui&lt;/a&gt;, mas vamos ver como instalar no Ubuntu.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Quem está migrando de Docker Desktop para Docker Engine, temos duas opções&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Desinstalar o Docker Desktop.&lt;/li&gt; &#xA;  &lt;li&gt;Desativar o Docker Desktop Service nos serviços do Windows. Esta opção permite que você utilize o Docker Desktop, se necessário, para a maioria dos usuários a desinstalação do Docker Desktop é a mais recomendada. Se você escolheu a 2º opção, precisará excluir o arquivo ~/.docker/config.json e realizar a autenticação com Docker novamente através do comando &#34;docker login&#34;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Se necessitar integrar o Docker com outras IDEs que não sejam o VSCode&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;O VSCode já se integra com o Docker no WSL desta forma através da extensão Remote WSL ou Remote Container.&lt;/p&gt; &#xA; &lt;p&gt;É necessário habilitar a conexão ao servidor do Docker via TCP. Vamos aos passos:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Crie o arquivo /etc/docker/daemon.json: &lt;code&gt;sudo echo &#39;{&#34;hosts&#34;: [&#34;tcp://0.0.0.0:2375&#34;, &#34;unix:///var/run/docker.sock&#34;]}&#39; &amp;gt; /etc/docker/daemon.json&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Reinicie o Docker: &lt;code&gt;sudo service docker restart&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;Após este procedimento, vá na sua IDE e para conectar ao Docker escolha a opção TCP Socket e coloque a URL &lt;code&gt;http://IP-DO-WSL:2375&lt;/code&gt;. Seu IP do WSL pode ser encontrado com o comando &lt;code&gt;cat /etc/resolv.conf&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;Se caso não funcionar, reinicie o WSL com o comando &lt;code&gt;wsl --shutdown&lt;/code&gt; e inicie o serviço do Docker novamente.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Instale os pré-requisitos:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt upgrade&#xA;sudo apt remove docker docker-engine docker.io containerd runc&#xA;sudo apt-get install \&#xA;    apt-transport-https \&#xA;    ca-certificates \&#xA;    curl \&#xA;    gnupg \&#xA;    lsb-release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adicione o repositório do Docker na lista de sources do Ubuntu:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg&#xA;echo \&#xA;  &#34;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \&#xA;  $(lsb_release -cs) stable&#34; | sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instale o Docker Engine&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install docker-ce docker-ce-cli containerd.io&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Dê permissão para rodar o Docker com seu usuário corrente:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo usermod -aG docker $USER&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instale o Docker Compose:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo curl -L &#34;https://github.com/docker/compose/releases/download/1.29.1/docker-compose-$(uname -s)-$(uname -m)&#34; -o /usr/local/bin/docker-compose&#xA;sudo chmod +x /usr/local/bin/docker-compose&#xA;sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Inicie o serviço do Docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo service docker start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Este comando acima terá que ser executado toda vez que Linux for reiniciado. Se caso o serviço do Docker não estiver executando, mostrará esta mensagem de erro:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Dica para Windows 11&lt;/h4&gt; &#xA;&lt;p&gt;No Windows 11 é possível especificar um comando padrão para ser executados sempre que o WSL for iniciado, isto permite que já coloquemos o serviço do docker para iniciar automaticamente. Edite o arquivo &lt;code&gt;/etc/wsl.conf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;Rode o comando para editar:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sudo vim /etc/wsl.conf&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Aperte a letra &lt;code&gt;i&lt;/code&gt; e cole o conteúdo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;[boot]&#xA;command=&#34;service docker start&#34; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Aperte a tecla &lt;code&gt;:&lt;/code&gt;, digite &lt;code&gt;wq&lt;/code&gt; para salvar/sair e pressione enter. Pronto, para reiniciar o WSL com o comando &lt;code&gt;wsl --shutdown&lt;/code&gt; no DOS ou PowerShell para testar. Após abrir o WSL novamente, digite o comando &lt;code&gt;docker ps&lt;/code&gt; para avaliar se o comando não retorna a mensagem acima: &lt;code&gt;Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;instalar-o-docker-com-docker-desktop&#34;&gt;&lt;/a&gt;2 - Instalar o Docker com Docker Desktop&lt;/h3&gt; &#xA;&lt;p&gt;Baixe neste link: &lt;a href=&#34;https://hub.docker.com/editions/community/docker-ce-desktop-windows&#34;&gt;https://hub.docker.com/editions/community/docker-ce-desktop-windows&lt;/a&gt; e instale o Docker Desktop.&lt;/p&gt; &#xA;&lt;p&gt;Clique no &lt;code&gt;ícone do Docker perto do relógio -&amp;gt; Settings -&amp;gt; Settings no topo -&amp;gt; Resources -&amp;gt; WSL Integration&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Habilite &lt;code&gt;Enable integration with my default WSL distro&lt;/code&gt; e habilite sua versão Linux.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/codeedu/wsl2-docker-quickstart/main/img/docker_funcionando_dentro_do_wsl2.png&#34; alt=&#34;Docker funcionando dentro do WSL 2&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Dicas e truques básicos com WSL 2&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A performance do WSL 2 está em se executar tudo dentro do Linux, por isso evite executar seus projetos com ou sem Docker do caminho &lt;code&gt;/mnt/c&lt;/code&gt;, pois você perderá performance.&lt;/li&gt; &#xA; &lt;li&gt;Para abrir o terminal do WSL basta digitar o nome da distribuição no menu Iniciar ou executar &lt;code&gt;C:\Windows\System32\wsl.exe&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;O sistema de arquivos do Windows 10/11 é acessível em &lt;code&gt;/mnt&lt;/code&gt;. &lt;img src=&#34;https://raw.githubusercontent.com/codeedu/wsl2-docker-quickstart/main/img/mount_no_wsl2.png&#34; alt=&#34;Mount no WSL2&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;É possível acessar o sistema de arquivos do Linux pela rede do Windows, digite &lt;code&gt;\\wsl$&lt;/code&gt; no Windows Explorer. &lt;img src=&#34;https://raw.githubusercontent.com/codeedu/wsl2-docker-quickstart/main/img/acessando_wsl2_no_explorer.png&#34; alt=&#34;Acessando WSL2 no Windows Explorer&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;É possível acessar uma pasta no Windows Explorer digitando o comando &lt;code&gt;explorer.exe .&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;É possível abrir uma pasta ou arquivo com o Visual Studio Code digitando o comando &lt;code&gt;code . ou code meu_arquivo.ext&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Incrivelmente é possível acessar executáveis do Windows no terminal do Linux executando-os com .exe no final (não significa que funcionarão corretamente). &lt;img src=&#34;https://raw.githubusercontent.com/codeedu/wsl2-docker-quickstart/main/img/executaveis_do_windows_no_wsl2.png&#34; alt=&#34;Executando executáveis do Windows no WSL2&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;É possível executar algumas aplicações gráficas do Linux com WSL 2. Leia este tutorial: &lt;a href=&#34;https://medium.com/@dianaarnos/aplica%C3%A7%C3%B5es-gr%C3%A1ficas-no-wsl2-e0a481e9768c&#34;&gt;https://medium.com/@dianaarnos/aplica%C3%A7%C3%B5es-gr%C3%A1ficas-no-wsl2-e0a481e9768c&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Execute o comando &lt;code&gt;wsl -l -v&lt;/code&gt; com o PowerShell para ver as versões de Linux instaladas e seu status atual(parado ou rodando). &lt;img src=&#34;https://raw.githubusercontent.com/codeedu/wsl2-docker-quickstart/main/img/verificando_distribuicoes_instaladas_do_linux_no_wsl2.png&#34; alt=&#34;Verificando distribuições instaladas do Linux no WSL 2&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;Execute o comando &lt;code&gt;wsl --shutdown&lt;/code&gt; com o PowerShell para desligar todas as distribuições Linux que estão rodando no momento (ao executar o comando, as distribuições do Docker também serão desligadas e o Docker Desktop mostrará uma notificação ao lado do relógio perguntando se você quer iniciar as distribuições dele novamente, se você não aceitar terá que iniciar o Docker novamente com o ícone perto do relógio do Windows).&lt;/li&gt; &#xA; &lt;li&gt;Execute com o PowerShell o comando &lt;code&gt;wsl --t &amp;lt;distribution name&amp;gt;&lt;/code&gt; para desligar somente uma distribuição Linux específica.&lt;/li&gt; &#xA; &lt;li&gt;Se verificar que o WSL 2 está consumindo muitos recursos da máquina, execute os seguintes comandos dentro do terminal WSL 2 para liberar memória RAM:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo 1 | sudo tee /proc/sys/vm/drop_caches&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Acrescente &lt;code&gt;export DOCKER_BUILDKIT=1&lt;/code&gt; no final do arquivo .profile do seu usuário do Linux para ganhar mais performance ao realizar builds com Docker. Execute o comando &lt;code&gt;source ~/.profile&lt;/code&gt; para carregar esta variável de ambiente no ambiente do seu WSL 2.&lt;/li&gt; &#xA; &lt;li&gt;Caso queira automatizar a inicialização do docker(pode-se iniciar outros serviços também), descrito na seção de desvantagens da utilização do docker nativo, enquanto não é inculído o wsl.conf, você pode configurar uma tarefa no windows para executar comandos no wsl, veja o tutorial a seguir, &lt;a href=&#34;https://techbrij.com/wsl-2-ubuntu-services-windows-10-startup&#34;&gt;WSL 2: Run Ubuntu Services on Windows 10 Startup&lt;/a&gt;, substituindo o conteúdo do arquivo /etc/init-wsl, por um dos exemplos abaixo:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Exemplo de inicialização do serviço do docker&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  #!/bin/sh&#xA;  #Mensagem de Inicialização dos seviços&#xA;  echo initializing services&#xA;  #Inicializa o serviço do docker&#xA;  service docker start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Exemplo gerando um log na Área de trabalho&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  #!/bin/sh&#xA;  #Grava a data/hora de início da execução no log&#xA;  date +%d/%m/%Y%t%H:%M:%S &amp;gt;&amp;gt; /mnt/c/Users/seu-usuario-do-windows/Desktop/wsl_start.log&#xA;  #Grava mensagem de Inicialização dos seviços no log&#xA;  echo initializing services &amp;gt;&amp;gt; /mnt/c/Users/seu-usuario-do-windows/Desktop/wsl_start.log&#xA;  #Inicializa o serviço do docker e grava o resultado do comando no log&#xA;  service docker start &amp;gt;&amp;gt; /mnt/c/Users/seu-usuario-do-windows/Desktop/wsl_start.log&#xA;  #Verifica o status do serviço do docker e grava o resultado do comando no log&#xA;  service docker status &amp;gt;&amp;gt; /mnt/c/Users/seu-usuario-do-windows/Desktop/wsl_start.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Infelizmente, caso reinicie o WSL manualmente, será necessário reiniciar os serviços manualmente, ou executar o init-wsl manualmente.&lt;/li&gt; &#xA; &lt;li&gt;No Windows 11 é possível iniciar o Docker automaticamente, veja a seção: &lt;a href=&#34;https://raw.githubusercontent.com/codeedu/wsl2-docker-quickstart/main/#dica-para-windows-11&#34;&gt;Dica para Windows 11&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dúvidas&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;O WSL 2 funciona junto com outras máquinas virtuais como &lt;strong&gt;VirtualBox&lt;/strong&gt; ou &lt;strong&gt;VMWare&lt;/strong&gt;? Siga a &lt;a href=&#34;https://docs.microsoft.com/pt-br/windows/wsl/wsl2-faq#will-i-be-able-to-run-wsl-2-and-other-3rd-party-virtualization-tools-such-as-vmware-or-virtualbox&#34;&gt;referência&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>HariSekhon/DevOps-Bash-tools</title>
    <updated>2022-05-29T01:54:10Z</updated>
    <id>tag:github.com,2022-05-29:/HariSekhon/DevOps-Bash-tools</id>
    <link href="https://github.com/HariSekhon/DevOps-Bash-tools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;750+ DevOps Bash Scripts - AWS, GCP, Kubernetes, Docker, CI/CD, APIs, SQL, PostgreSQL, MySQL, Hive, Impala, Kafka, Hadoop, Jenkins, GitHub, GitLab, BitBucket, Azure DevOps, TeamCity, Spotify, MP3, LDAP, Code/Build Linting, pkg mgmt for Linux, Mac, Python, Perl, Ruby, NodeJS, Golang, Advanced dotfiles: .bashrc, .vimrc, .gitconfig, .screenrc, .tmu…&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hari Sekhon - DevOps Bash Tools&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/harisekhon/devops-bash-tools?logo=github&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/network&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/harisekhon/devops-bash-tools?logo=github&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools#hari-sekhon---devops-bash-tools&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lines%20of%20code-76k-lightgrey?logo=codecademy&#34; alt=&#34;Lines of Code&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-green&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/commits/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/HariSekhon/DevOps-Bash-tools?logo=github&#34; alt=&#34;GitHub Last Commit&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.codacy.com/gh/HariSekhon/DevOps-Bash-tools/dashboard&#34;&gt;&lt;img src=&#34;https://app.codacy.com/project/badge/Grade/dffc1bfd13404c95b5a0ab97fd47974e&#34; alt=&#34;Codacy&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codefactor.io/repository/github/harisekhon/devops-bash-tools&#34;&gt;&lt;img src=&#34;https://www.codefactor.io/repository/github/harisekhon/devops-bash-tools/badge&#34; alt=&#34;CodeFactor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=HariSekhon_DevOps-Bash-tools&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=HariSekhon_DevOps-Bash-tools&amp;amp;metric=alert_status&#34; alt=&#34;Quality Gate Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=HariSekhon_DevOps-Bash-tools&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=HariSekhon_DevOps-Bash-tools&amp;amp;metric=sqale_rating&#34; alt=&#34;Maintainability Rating&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=HariSekhon_DevOps-Bash-tools&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=HariSekhon_DevOps-Bash-tools&amp;amp;metric=reliability_rating&#34; alt=&#34;Reliability Rating&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=HariSekhon_DevOps-Bash-tools&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=HariSekhon_DevOps-Bash-tools&amp;amp;metric=security_rating&#34; alt=&#34;Security Rating&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codiga.io/project/8840/dashboard&#34;&gt;&lt;img src=&#34;https://api.codiga.io/project/8840/status/svg&#34; alt=&#34;Codiga Grade&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codiga.io/project/8840/dashboard&#34;&gt;&lt;img src=&#34;https://api.codiga.io/project/8840/score/svg&#34; alt=&#34;Codiga Score&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!--&#xA;BitBucket exposes HTML comments - open issue - works properly on GitHub/GitLab&#xA;doesn&#39;t detect shell code properly&#xA;[![Lines of Code](https://sonarcloud.io/api/project_badges/measure?project=HariSekhon_DevOps-Bash-tools&amp;metric=ncloc)](https://sonarcloud.io/dashboard?id=HariSekhon_DevOps-Bash-tools)&#xA;--&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools#hari-sekhon---devops-bash-tools&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/OS-Linux-blue?logo=linux&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools#hari-sekhon---devops-bash-tools&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/OS-Mac-blue?logo=apple&#34; alt=&#34;Mac&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/harisekhon/bash-tools&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/container-Docker-blue?logo=docker&amp;amp;logoColor=white&#34; alt=&#34;Docker&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/Dockerfiles&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/repo-Dockerfiles-blue?logo=docker&amp;amp;logoColor=white&#34; alt=&#34;Dockerfile&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/harisekhon/bash-tools&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/harisekhon/bash-tools?label=DockerHub%20pulls&amp;amp;logo=docker&amp;amp;logoColor=white&#34; alt=&#34;DockerHub Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://seladb.github.io/StarTrack-js/#/preload?r=HariSekhon,Nagios-Plugins&amp;amp;r=HariSekhon,Dockerfiles&amp;amp;r=HariSekhon,DevOps-Python-tools&amp;amp;r=HariSekhon,DevOps-Perl-tools&amp;amp;r=HariSekhon,DevOps-Bash-tools&amp;amp;r=HariSekhon,HAProxy-configs&amp;amp;r=HariSekhon,SQL-scripts&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Star-Track-blue?logo=github&#34; alt=&#34;StarTrack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/raw/master/STARCHARTS.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Star-Charts-blue?logo=github&#34; alt=&#34;StarCharts&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://brew.sh/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Mac-Homebrew-999999?logo=apple&amp;amp;logoColor=white&#34; alt=&#34;Mac Homebrew&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://alpinelinux.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Linux-Alpine-0D597F?logo=alpine%20linux&amp;amp;color=0D597F&#34; alt=&#34;Alpine&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.centos.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Linux-CentOS-red?logo=centos&amp;amp;color=262577&amp;amp;logoColor=white&#34; alt=&#34;CentOS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.debian.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Linux-Debian-red?logo=debian&amp;amp;color=A81D33&#34; alt=&#34;Debian&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://getfedora.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Linux-Fedora-294172?logo=fedora&#34; alt=&#34;Fedora&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.redhat.com/en&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Linux-Redhat-red?logo=red%20hat&#34; alt=&#34;Redhat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ubuntu.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Linux-Ubuntu-orange?logo=ubuntu&amp;amp;logoColor=white&#34; alt=&#34;Ubuntu&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- TODO: fix&#xA;[![DockerHub Build Automated](https://img.shields.io/docker/automated/harisekhon/bash-tools?logo=docker&amp;logoColor=white)](https://hub.docker.com/r/harisekhon/bash-tools)&#xA;[![Docker Build Status](https://img.shields.io/docker/cloud/build/harisekhon/bash-tools?logo=docker&amp;logoColor=white)](https://hub.docker.com/r/harisekhon/bash-tools/builds)&#xA;--&gt; &#xA;&lt;!--&#xA;official badges without logos to differentiate them&#xA;&#xA;this one I don&#39;t trust it&#39;ll stick around so using shields version instead&#xA;[![Build Status](https://badges.herokuapp.com/travis/HariSekhon/DevOps-Bash-tools?label=Travis%20CI)](https://travis-ci.org/HariSekhon/DevOps-Bash-tools)&#xA;&#xA;awkward URLs more nicely replaced with shields.io&#xA;&#xA;[![AppVeyor](https://ci.appveyor.com/api/projects/status/u6f97cskcgb30sce/branch/master?svg=true)](https://ci.appveyor.com/project/HariSekhon/devops-bash-tools/branch/master)&#xA;[![Drone](https://cloud.drone.io/api/badges/HariSekhon/DevOps-Bash-tools/status.svg)](https://cloud.drone.io/HariSekhon/DevOps-Bash-tools)&#xA;--&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://harisekhon.github.io/CI-CD/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/CI%20Builds-Overview%20Page-blue?logo=circleci&#34; alt=&#34;CI Builds Overview&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/raw/master/Jenkinsfile&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Jenkins-ready-blue?logo=jenkins&amp;amp;logoColor=white&#34; alt=&#34;Jenkins&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/raw/master/.concourse.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Concourse-ready-blue?logo=concourse&#34; alt=&#34;Concourse&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/raw/master/.gocd.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/GoCD-ready-blue?logo=go&#34; alt=&#34;GoCD&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/TeamCity-CI&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/TeamCity-ready-blue?logo=teamcity&#34; alt=&#34;TeamCity&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/HariSekhon/DevOps-Bash-tools&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/HariSekhon/DevOps-Bash-tools.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildkite.com/hari-sekhon/devops-bash-tools&#34;&gt;&lt;img src=&#34;https://img.shields.io/buildkite/f11bdd9690a9bac9a8edc6094dc2f2b9af3218a7a15d4ec17d/master?label=BuildKite&amp;amp;logo=buildkite&#34; alt=&#34;BuildKite&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/HariSekhon/devops-bash-tools/branch/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/appveyor/build/harisekhon/devops-bash-tools/master?logo=appveyor&amp;amp;label=AppVeyor&#34; alt=&#34;AppVeyor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cloud.drone.io/HariSekhon/DevOps-Bash-tools&#34;&gt;&lt;img src=&#34;https://img.shields.io/drone/build/HariSekhon/DevOps-Bash-tools/master?logo=drone&amp;amp;label=Drone&#34; alt=&#34;Drone&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codeship.com/projects/386508&#34;&gt;&lt;img src=&#34;https://app.codeship.com/projects/1b13b490-38c2-0138-ed09-4a04e28a9ab8/status?branch=master&#34; alt=&#34;Codeship Status for HariSekhon/DevOps-Bash-tools&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://g.codefresh.io/pipelines/edit/new/builds?id=5e53eaeea284e010982eaa6e&amp;amp;pipeline=DevOps-Bash-tools&amp;amp;projects=GitHub&amp;amp;projectId=5e52ca8ea284e00f882ea992&amp;amp;context=github&amp;amp;filter=page:1;pageSize:10;timeFrameStart:week&#34;&gt;&lt;img src=&#34;https://g.codefresh.io/api/badges/pipeline/harisekhon/GitHub%2FDevOps-Bash-tools?branch=master&amp;amp;key=eyJhbGciOiJIUzI1NiJ9.NWU1MmM5OGNiM2FiOWUzM2Y3ZDZmYjM3.O69674cW7vYom3v5JOGKXDbYgCVIJU9EWhXUMHl3zwA&amp;amp;type=cf-1&#34; alt=&#34;Codefresh&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cirrus-ci.com/github/HariSekhon/DevOps-Bash-tools&#34;&gt;&lt;img src=&#34;https://img.shields.io/cirrus/github/HariSekhon/DevOps-Bash-tools/master?logo=Cirrus%20CI&amp;amp;label=Cirrus%20CI&#34; alt=&#34;Cirrus CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://harisekhon.semaphoreci.com/projects/DevOps-Bash-tools&#34;&gt;&lt;img src=&#34;https://harisekhon.semaphoreci.com/badges/DevOps-Bash-tools.svg?sanitize=true&#34; alt=&#34;Semaphore&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.wercker.com/harisekhon/DevOps-Bash-tools/runs&#34;&gt;&lt;img src=&#34;https://app.wercker.com/status/c46a517909343e278c9ce354164394ae/s/master&#34; alt=&#34;Wercker&#34; title=&#34;wercker status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/raw/master/buddy.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Buddy-ready-1A86FD?logo=buddy&#34; alt=&#34;Buddy&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/raw/master/shippable.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Shippable-legacy-lightgrey?logo=jfrog&amp;amp;label=Shippable&#34; alt=&#34;Shippable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/raw/master/.travis.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/TravisCI-ready-blue?logo=travis&amp;amp;label=Travis%20CI&#34; alt=&#34;Travis CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://houndci.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Reviewed%20by-Hound-8E64B0.svg?sanitize=true&#34; alt=&#34;Reviewed by Hound&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!--&#xA;Wercker throttles Shields.io resulting in &#34;invalid response data&#34; - do not use Shields.io until this is resolved&#xA;&#xA;[![Wercker](https://img.shields.io/wercker/ci/5e53ee68d1f86d0900f031dc/master?label=Wercker&amp;logo=oracle)](https://app.wercker.com/harisekhon/DevOps-Bash-tools/runs)&#xA;--&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/harisekhon/GitHub/_build/latest?definitionId=1&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/harisekhon/GitHub/_apis/build/status/HariSekhon.DevOps-Bash-tools?branchName=master&#34; alt=&#34;Azure DevOps Pipeline&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitlab.com/HariSekhon/DevOps-Bash-tools/pipelines&#34;&gt;&lt;img src=&#34;https://img.shields.io/gitlab/pipeline/harisekhon/devops-bash-tools?logo=gitlab&amp;amp;label=GitLab%20CI&#34; alt=&#34;GitLab Pipeline&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bitbucket.org/harisekhon/devops-bash-tools/addon/pipelines/home#!/&#34;&gt;&lt;img src=&#34;https://img.shields.io/bitbucket/pipelines/harisekhon/devops-bash-tools/master?logo=bitbucket&amp;amp;label=BitBucket%20CI&#34; alt=&#34;BitBucket Pipeline&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/raw/master/buildspec.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/AWS%20CodeBuild-ready-blue?logo=amazon%20aws&#34; alt=&#34;AWS CodeBuild&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/raw/master/cloudbuild.yaml&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/GCP%20Cloud%20Build-ready-blue?logo=google%20cloud&amp;amp;logoColor=white&#34; alt=&#34;GCP Cloud Build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/harisekhon/GitHub/_git/DevOps-Bash-tools&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/repo-Azure%20DevOps-0078D7?logo=azure%20devops&#34; alt=&#34;Repo on Azure DevOps&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/repo-GitHub-2088FF?logo=github&#34; alt=&#34;Repo on GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitlab.com/HariSekhon/DevOps-Bash-tools&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/repo-GitLab-FCA121?logo=gitlab&#34; alt=&#34;Repo on GitLab&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bitbucket.org/HariSekhon/DevOps-Bash-tools&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/repo-BitBucket-0052CC?logo=bitbucket&#34; alt=&#34;Repo on BitBucket&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions/workflows/validate.yaml&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions/workflows/validate.yaml/badge.svg?sanitize=true&#34; alt=&#34;Validation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions/workflows/semgrep.yaml&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions/workflows/semgrep.yaml/badge.svg?sanitize=true&#34; alt=&#34;Semgrep&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions/workflows/kics.yaml&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions/workflows/kics.yaml/badge.svg?sanitize=true&#34; alt=&#34;Kics&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions/workflows/docker_bash_alpine.yaml&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions/workflows/docker_bash_alpine.yaml/badge.svg?sanitize=true&#34; alt=&#34;Docker Build (Alpine)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions/workflows/docker_bash_centos.yaml&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions/workflows/docker_bash_centos.yaml/badge.svg?sanitize=true&#34; alt=&#34;Docker Build (CentOS)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions/workflows/docker_bash_debian.yaml&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions/workflows/docker_bash_debian.yaml/badge.svg?sanitize=true&#34; alt=&#34;Docker Build (Debian)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions/workflows/docker_bash_fedora.yaml&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions/workflows/docker_bash_fedora.yaml/badge.svg?sanitize=true&#34; alt=&#34;Docker Build (Fedora)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions/workflows/docker_bash_ubuntu.yaml&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions/workflows/docker_bash_ubuntu.yaml/badge.svg?sanitize=true&#34; alt=&#34;Docker Build (Ubuntu)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions?query=workflow%3A%22GitHub+Actions+Ubuntu%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/workflows/GitHub%20Actions%20Ubuntu/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions Ubuntu&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions?query=workflow%3A%22Mac%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/workflows/Mac/badge.svg?sanitize=true&#34; alt=&#34;Mac&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions?query=workflow%3A%22Mac+10.15%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/workflows/Mac%2010.15/badge.svg?sanitize=true&#34; alt=&#34;Mac 10.15&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions?query=workflow%3A%22Ubuntu%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/workflows/Ubuntu/badge.svg?sanitize=true&#34; alt=&#34;Ubuntu&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions?query=workflow%3A%22Ubuntu+14.04%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/workflows/Ubuntu%2014.04/badge.svg?sanitize=true&#34; alt=&#34;Ubuntu 14.04&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions?query=workflow%3A%22Ubuntu+16.04%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/workflows/Ubuntu%2016.04/badge.svg?sanitize=true&#34; alt=&#34;Ubuntu 16.04&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions?query=workflow%3A%22Ubuntu+18.04%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/workflows/Ubuntu%2018.04/badge.svg?sanitize=true&#34; alt=&#34;Ubuntu 18.04&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions?query=workflow%3A%22Ubuntu+20.04%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/workflows/Ubuntu%2020.04/badge.svg?sanitize=true&#34; alt=&#34;Ubuntu 20.04&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions?query=workflow%3A%22Debian%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/workflows/Debian/badge.svg?sanitize=true&#34; alt=&#34;Debian&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions?query=workflow%3A%22Debian+8%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/workflows/Debian%208/badge.svg?sanitize=true&#34; alt=&#34;Debian 8&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions?query=workflow%3A%22Debian+9%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/workflows/Debian%209/badge.svg?sanitize=true&#34; alt=&#34;Debian 9&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions?query=workflow%3A%22Debian+10%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/workflows/Debian%2010/badge.svg?sanitize=true&#34; alt=&#34;Debian 10&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions?query=workflow%3A%22CentOS%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/workflows/CentOS/badge.svg?sanitize=true&#34; alt=&#34;CentOS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions?query=workflow%3A%22CentOS+7%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/workflows/CentOS%207/badge.svg?sanitize=true&#34; alt=&#34;CentOS 7&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions?query=workflow%3A%22CentOS+8%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/workflows/CentOS%208/badge.svg?sanitize=true&#34; alt=&#34;CentOS 8&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions?query=workflow%3A%22Fedora%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/workflows/Fedora/badge.svg?sanitize=true&#34; alt=&#34;Fedora&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions?query=workflow%3A%22Alpine%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/workflows/Alpine/badge.svg?sanitize=true&#34; alt=&#34;Alpine&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions?query=workflow%3A%22Alpine+3%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/workflows/Alpine%203/badge.svg?sanitize=true&#34; alt=&#34;Alpine 3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions?query=workflow%3A%22Python+2.7%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/workflows/Python%202.7/badge.svg?sanitize=true&#34; alt=&#34;Python 2.7&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions?query=workflow%3A%22Python+3.6%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/workflows/Python%203.6/badge.svg?sanitize=true&#34; alt=&#34;Python 3.6&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions?query=workflow%3A%22Python+3.7%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/workflows/Python%203.7/badge.svg?sanitize=true&#34; alt=&#34;Python 3.7&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions?query=workflow%3A%22Python+3.8%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/workflows/Python%203.8/badge.svg?sanitize=true&#34; alt=&#34;Python 3.8&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions?query=workflow%3A%22Python+3.9%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/workflows/Python%203.9/badge.svg?sanitize=true&#34; alt=&#34;Python 3.9&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions?query=workflow%3A%22Python+3.10%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/workflows/Python%203.10/badge.svg?sanitize=true&#34; alt=&#34;Python 3.10&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions?query=workflow%3A%22PyPy+2%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/workflows/PyPy%202/badge.svg?sanitize=true&#34; alt=&#34;PyPy 2&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/actions?query=workflow%3A%22PyPy+3%22&#34;&gt;&lt;img src=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/workflows/PyPy%203/badge.svg?sanitize=true&#34; alt=&#34;PyPy 3&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!--&#xA;[![Self Hosted](https://github.com/HariSekhon/DevOps-Bash-tools/workflows/Self%20Hosted/badge.svg)](https://github.com/HariSekhon/DevOps-Bash-tools/actions?query=workflow%3A%22Self+Hosted%22)&#xA;--&gt; &#xA;&lt;!-- TODO: https://codecov.io, https://coveralls.io --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://git.io/bash-tools&#34;&gt;git.io/bash-tools&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;750+ DevOps Shell Scripts and Advanced Bash environment.&lt;/p&gt; &#xA;&lt;p&gt;Fast, Advanced Systems Engineering, Automation, APIs, shorter CLIs, etc.&lt;/p&gt; &#xA;&lt;p&gt;Heavily used in many &lt;a href=&#34;https://github.com/search?o=desc&amp;amp;q=user%3Aharisekhon+type%3Arepository&amp;amp;type=Repositories&#34;&gt;GitHub repos&lt;/a&gt;, dozens of &lt;a href=&#34;https://hub.docker.com/r/harisekhon&#34;&gt;DockerHub builds&lt;/a&gt; (&lt;a href=&#34;https://github.com/HariSekhon/Dockerfiles&#34;&gt;Dockerfiles&lt;/a&gt;) and 400+ &lt;a href=&#34;https://harisekhon.github.io/CI-CD/&#34;&gt;CI builds&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Summary&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Scripts for many popular DevOps technologies, see &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools#inventory&#34;&gt;Inventory&lt;/a&gt; below for more details&lt;/li&gt; &#xA; &lt;li&gt;Advanced configs for common tools like &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt;, &lt;a href=&#34;https://www.vim.org/&#34;&gt;vim&lt;/a&gt;, &lt;a href=&#34;https://www.gnu.org/software/screen/&#34;&gt;screen&lt;/a&gt;, &lt;a href=&#34;https://github.com/tmux/tmux/wiki&#34;&gt;tmux&lt;/a&gt;, &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL psql&lt;/a&gt; etc...&lt;/li&gt; &#xA; &lt;li&gt;CI configs for most major Continuous Integration products (see &lt;a href=&#34;https://harisekhon.github.io/CI-CD/&#34;&gt;CI builds&lt;/a&gt; page)&lt;/li&gt; &#xA; &lt;li&gt;CI scripts for a drop-in framework of standard checks to run in all &lt;a href=&#34;https://harisekhon.github.io/CI-CD/&#34;&gt;CI builds&lt;/a&gt;, CI detection, accounting for installation differences across CI environments, root vs user, virtualenvs etc.&lt;/li&gt; &#xA; &lt;li&gt;API scripts auto-handling authentication, tokens and other details to quickly query popular APIs with a few keystrokes just supplying the &lt;code&gt;/path/endpoint&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Advanced Bash environment - &lt;code&gt;.bashrc&lt;/code&gt; + &lt;code&gt;.bash.d/*.sh&lt;/code&gt; - aliases, functions, colouring, dynamic Git &amp;amp; shell behaviour enhancements, automatic pathing for installations and major languages like Python, Perl, Ruby, NodeJS, Golang across Linux distributions and Mac. See &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/raw/master/.bash.d/README.md&#34;&gt;.bash.d/README.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Installs the best systems packages - &lt;a href=&#34;https://aws.amazon.com/cli/&#34;&gt;AWS CLI&lt;/a&gt;, &lt;a href=&#34;https://docs.microsoft.com/en-us/cli/azure/?view=azure-cli-latest&#34;&gt;Azure CLI&lt;/a&gt;, &lt;a href=&#34;https://cloud.google.com/sdk&#34;&gt;GCloud SDK&lt;/a&gt;, &lt;a href=&#34;https://www.terraform.io/&#34;&gt;Terraform&lt;/a&gt;, &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; &lt;a href=&#34;https://kubernetes.io/docs/reference/kubectl/overview/&#34;&gt;kubectl&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://kustomize.io/&#34;&gt;kustomize&lt;/a&gt;, &lt;a href=&#34;https://eksctl.io/&#34;&gt;eksctl&lt;/a&gt;, &lt;a href=&#34;https://jenkins-x.io/&#34;&gt;jx&lt;/a&gt;, &lt;a href=&#34;https://stedolan.github.io/jq/&#34;&gt;jq&lt;/a&gt; etc... extensive package lists for servers and desktops for most major Linux distributions package managers and Mac &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;setup/&lt;/code&gt; - contains even more scripts to download and install software, JDBC connectors, Mac OS X settings etc.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Utility Libraries used by many hundreds of scripts and &lt;a href=&#34;https://harisekhon.github.io/CI-CD/&#34;&gt;builds&lt;/a&gt; across &lt;a href=&#34;https://github.com/search?o=desc&amp;amp;q=user%3Aharisekhon+type%3Arepository&amp;amp;type=Repositories&#34;&gt;repos&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;.bash.d/&lt;/code&gt; - interactive library&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;lib/&lt;/code&gt; - scripting and CI library&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HariSekhon/SQL-scripts&#34;&gt;SQL Scripts&lt;/a&gt; - 100+ scripts for &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt;, &lt;a href=&#34;https://www.mysql.com/&#34;&gt;MySQL&lt;/a&gt;, &lt;a href=&#34;https://aws.amazon.com/athena/&#34;&gt;AWS Athena&lt;/a&gt; + &lt;a href=&#34;https://aws.amazon.com/cloudtrail/&#34;&gt;CloudTrail&lt;/a&gt;, &lt;a href=&#34;https://cloud.google.com/bigquery&#34;&gt;Google BigQuery&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HariSekhon/Templates&#34;&gt;Templates&lt;/a&gt; - templates for common programming languages and build configs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HariSekhon/Kubernetes-configs&#34;&gt;Kubernetes Configs&lt;/a&gt; - Kubernetes YAML configs for most common scenarios, including Production Best Practices, Tips &amp;amp; Tricks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See Also: &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/raw/master/README.md#see-also&#34;&gt;similar DevOps repos&lt;/a&gt; in other languages&lt;/p&gt; &#xA;&lt;p&gt;Hari Sekhon&lt;/p&gt; &#xA;&lt;p&gt;Cloud &amp;amp; Big Data Contractor, United Kingdom&lt;/p&gt; &#xA;&lt;p&gt;(ex-Cloudera, former Hortonworks Consultant)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/in/HariSekhon/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/LinkedIn%20Profile-HariSekhon-blue?logo=linkedin&#34; alt=&#34;My LinkedIn&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h6&gt;(you&#39;re welcome to connect with me on LinkedIn)&lt;/h6&gt; &#xA;&lt;h3&gt;Quick Setup&lt;/h3&gt; &#xA;&lt;p&gt;To bootstrap, install packages and link in to your shell profile to inherit all configs, do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -L https://git.io/bash-bootstrap | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Adds sourcing to &lt;code&gt;.bashrc&lt;/code&gt;/&lt;code&gt;.bash_profile&lt;/code&gt; to automatically inherit all &lt;code&gt;.bash.d/*.sh&lt;/code&gt; environment enhancements for all technologies (see &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools#Inventory&#34;&gt;Inventory&lt;/a&gt; below)&lt;/li&gt; &#xA; &lt;li&gt;Symlinks &lt;code&gt;.*&lt;/code&gt; config dotfiles to &lt;code&gt;$HOME&lt;/code&gt; for &lt;a href=&#34;https://git-scm.com/&#34;&gt;git&lt;/a&gt;, &lt;a href=&#34;https://www.vim.org/&#34;&gt;vim&lt;/a&gt;, top, &lt;a href=&#34;https://hisham.hm/htop/&#34;&gt;htop&lt;/a&gt;, &lt;a href=&#34;https://www.gnu.org/software/screen/&#34;&gt;screen&lt;/a&gt;, &lt;a href=&#34;https://github.com/tmux/tmux/wiki&#34;&gt;tmux&lt;/a&gt;, &lt;a href=&#34;https://editorconfig.org/&#34;&gt;editorconfig&lt;/a&gt;, &lt;a href=&#34;https://www.ansible.com/&#34;&gt;Ansible&lt;/a&gt;, &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt; &lt;code&gt;.psqlrc&lt;/code&gt; etc. (only when they don&#39;t already exist so there is no conflict with your own configs)&lt;/li&gt; &#xA; &lt;li&gt;Installs OS package dependencies for all scripts (detects the OS and installs the right RPMs, Debs, Apk or Mac HomeBrew packages)&lt;/li&gt; &#xA; &lt;li&gt;Installs Python packages&lt;/li&gt; &#xA; &lt;li&gt;Installs &lt;a href=&#34;https://aws.amazon.com/cli/&#34;&gt;AWS CLI&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To only install package dependencies to run scripts, simply &lt;code&gt;cd&lt;/code&gt; to the git clone directory and run &lt;code&gt;make&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/HariSekhon/DevOps-Bash-tools bash-tools&#xA;cd bash-tools&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;make install&lt;/code&gt; sets your shell profile to source this repo. See &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools#Individual-Setup-Parts&#34;&gt;Individual Setup Parts&lt;/a&gt; below for more install/uninstall options.&lt;/p&gt; &#xA;&lt;h2&gt;Inventory&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools#linux--mac&#34;&gt;Linux &amp;amp; Mac&lt;/a&gt; - curl OAuth / JWT, LDAP, find duplicate files, SSL certificate get/validate, URL encoding/decoding, Vagrant, advanced configurations: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;.bashrc&lt;/code&gt;, &lt;code&gt;.bash.d/*.sh&lt;/code&gt;, &lt;code&gt;.gitconfig&lt;/code&gt;, &lt;code&gt;.vimrc&lt;/code&gt;, &lt;code&gt;.screenrc&lt;/code&gt;, &lt;code&gt;.tmux.conf&lt;/code&gt;, &lt;code&gt;.toprc&lt;/code&gt;, &lt;code&gt;.gitignore&lt;/code&gt;...&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools#aws---amazon-web-services&#34;&gt;AWS - Amazon Web Services&lt;/a&gt; - AWS account summary, lots of IAM reports, CIS Benchmark config hardening, EC2, ECR, EKS, Spot termination, S3 access logging, KMS key rotation info, SSM, CloudTrail, CloudWatch billing alarm with SNS notification topic and subscription for email alerts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools#gcp---google-cloud-platform&#34;&gt;GCP - Google Cloud Platform&lt;/a&gt; - massive GCP auto-inventory, scripts for GCE, GKE, GCR, Secret Manager, BigQuery, Cloud SQL, Cloud Scheduler, Terraform service account creation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools#kubernetes&#34;&gt;Kubernetes&lt;/a&gt; - massive Kubernetes auto-inventory, cluster management scripts &amp;amp; tricks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools#docker&#34;&gt;Docker&lt;/a&gt; - Docker API, Dockerhub API, Quay.io API scripts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools#databases&#34;&gt;Databases&lt;/a&gt; - fast CLI wrappers, instant Docker sandboxes (PostgreSQL, MySQL, MariaDB, SQLite), &lt;a href=&#34;https://github.com/HariSekhon/SQL-scripts&#34;&gt;SQL scripts&lt;/a&gt;, SQL script testers against all versions of a DB, advanced &lt;code&gt;.psqlrc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools#big-data--nosql&#34;&gt;Big Data &amp;amp; NoSQL&lt;/a&gt; - Kafka, Hadoop, HDFS, Hive, Impala, ZooKeeper, Cloudera Manager API &amp;amp; Cloudera Navigator API scripts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools#git---github-gitlab-bitbucket-azure-devops&#34;&gt;Git - GitHub, GitLab, Bitbucket, Azure DevOps&lt;/a&gt; - scripts for Git local &amp;amp; mirror management, GitHub, GitLab &amp;amp; BitBucket APIs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools#cicd---continuous-integration--continuous-deployment&#34;&gt;CI/CD - Continuous Integration / Continuous Delivery&lt;/a&gt; - API scripts &amp;amp; build pipeline configs for most major CI systems: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Jenkins, Concourse, GoCD, TeamCity - one-touch boot &amp;amp; build&lt;/li&gt; &#xA;   &lt;li&gt;Azure DevOps Pipelines, GitHub Actions Workflows, GitLab CI, BitBucket Pipelines, AppVeyor, BuildKite, Travis CI, Circle CI, Codefresh, CodeShip, Drone.io, Semaphore CI, Shippable, Wercker ...&lt;/li&gt; &#xA;   &lt;li&gt;Terraform Cloud&lt;/li&gt; &#xA;   &lt;li&gt;Checkov / Bridgecrew Cloud&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools#internet-services&#34;&gt;Internet Services&lt;/a&gt; - Cloudflare, Pingdom, DataDog&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools#perl&#34;&gt;Perl&lt;/a&gt; - Perl utilities &amp;amp; library management&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools#python&#34;&gt;Python&lt;/a&gt; - Python utilities &amp;amp; library management&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools#golang&#34;&gt;Golang&lt;/a&gt; - Golang utilities&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools#mp3&#34;&gt;MP3&lt;/a&gt; - MP3 metadata editing, grouping and ordering of albums and audiobooks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools#spotify&#34;&gt;Spotify&lt;/a&gt; - 40+ Spotify API scripts for backups, managing playlists, track deduplication, URI conversion, search, add/delete, liked tracks, followed artists, top artists, top tracks etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools#more-linux--mac&#34;&gt;More Linux &amp;amp; Mac&lt;/a&gt; - more systems administration scripts, package installation automation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools#builds-languages--linting&#34;&gt;Builds, Languages &amp;amp; Linting&lt;/a&gt; - programming language, build system &amp;amp; CI linting&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools#data-format-conversion--validation&#34;&gt;Data Format Conversion &amp;amp; Validation&lt;/a&gt; - data validation scripts for CSV, JSON, Avro, Parquet, INI / Properties files (Java), LDAP LDIF, XML, YAML&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HariSekhon/Templates&#34;&gt;Templates&lt;/a&gt; - Templates for AWS, GCP, Terraform, Docker, Jenkins, Cloud Build, Vagrant, Puppet, Python, Bash, Go, Perl, Java, Scala, Groovy, Maven, SBT, Gradle, Make, GitHub Actions, CircleCI, Jenkinsfile, Makefile, Dockerfile, docker-compose.yml etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HariSekhon/Kubernetes-configs&#34;&gt;Kubernetes Configs&lt;/a&gt; - Kubernetes YAML configs for most common scenarios, including Production Best Practices, Tips &amp;amp; Tricks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Linux &amp;amp; Mac&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;.*&lt;/code&gt; - dot conf files for lots of common software eg. advanced &lt;code&gt;.vimrc&lt;/code&gt;, &lt;code&gt;.gitconfig&lt;/code&gt;, massive &lt;code&gt;.gitignore&lt;/code&gt;, &lt;code&gt;.editorconfig&lt;/code&gt;, &lt;code&gt;.screenrc&lt;/code&gt;, &lt;code&gt;.tmux.conf&lt;/code&gt; etc. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;.vimrc&lt;/code&gt; - contains many awesome &lt;a href=&#34;https://www.vim.org/&#34;&gt;vim&lt;/a&gt; tweaks, plus hotkeys for linting lots of different file types in place, including Python, Perl, Bash / Shell, Dockerfiles, JSON, YAML, XML, CSV, INI / Properties files, LDAP LDIF etc without leaving the editor!&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;.screenrc&lt;/code&gt; - fancy &lt;a href=&#34;https://www.gnu.org/software/screen/&#34;&gt;screen&lt;/a&gt; configuration including advanced colour bar, large history, hotkey reloading, auto-blanking etc.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;.tmux.conf&lt;/code&gt; - fancy &lt;a href=&#34;https://github.com/tmux/tmux/wiki&#34;&gt;tmux&lt;/a&gt; configuration include advanced colour bar and plugins, settings, hotkey reloading etc.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt;: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;.gitconfig&lt;/code&gt; - advanced Git configuration&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;.gitignore&lt;/code&gt; - extensive Git ignore of trivial files you shouldn&#39;t commit&lt;/li&gt; &#xA;     &lt;li&gt;enhanced Git diffs&lt;/li&gt; &#xA;     &lt;li&gt;protections against committing AWS secret keys or merge conflict unresolved files&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.bashrc&lt;/code&gt; - shell tuning and sourcing of &lt;code&gt;.bash.d/*.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.bash.d/*.sh&lt;/code&gt; - thousands of lines of advanced bashrc code, aliases, functions and environment variables for: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Linux&#34;&gt;Linux&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://en.wikipedia.org/wiki/MacOS&#34;&gt;Mac&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;SCM - &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt;, &lt;a href=&#34;https://www.mercurial-scm.org/&#34;&gt;Mercurial&lt;/a&gt;, &lt;a href=&#34;https://subversion.apache.org&#34;&gt;Svn&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/&#34;&gt;AWS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://cloud.google.com/&#34;&gt;GCP&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://kafka.apache.org/&#34;&gt;Kafka&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.vagrantup.com/&#34;&gt;Vagrant&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;automatic GPG and SSH agent handling for handling encrypted private keys without re-entering passwords, and lazy evaluation to only prompt key load the first time SSH is called&lt;/li&gt; &#xA;   &lt;li&gt;and lots more - see &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/raw/master/.bash.d/README.md&#34;&gt;.bash.d/README&lt;/a&gt; for a more detailed list&lt;/li&gt; &#xA;   &lt;li&gt;run &lt;code&gt;make bash&lt;/code&gt; to link &lt;code&gt;.bashrc&lt;/code&gt;/&lt;code&gt;.bash_profile&lt;/code&gt; and the &lt;code&gt;.*&lt;/code&gt; dot config files to your &lt;code&gt;$HOME&lt;/code&gt; directory to auto-inherit everything&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lib/*.sh&lt;/code&gt; - Bash utility libraries full of functions for &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;, environment, CI detection (&lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt;, &lt;a href=&#34;https://jenkins.io/&#34;&gt;Jenkins&lt;/a&gt; etc), port and HTTP url availability content checks etc. Sourced from all my other &lt;a href=&#34;https://github.com/harisekhon&#34;&gt;GitHub repos&lt;/a&gt; to make setting up Dockerized tests easier.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;setup/install_*.sh&lt;/code&gt; - various simple to use installation scripts for common technologies like &lt;a href=&#34;https://aws.amazon.com/cli/&#34;&gt;AWS CLI&lt;/a&gt;, &lt;a href=&#34;https://docs.microsoft.com/en-us/cli/azure/?view=azure-cli-latest&#34;&gt;Azure CLI&lt;/a&gt;, &lt;a href=&#34;https://cloud.google.com/sdk&#34;&gt;GCloud SDK&lt;/a&gt;, &lt;a href=&#34;https://www.terraform.io/&#34;&gt;Terraform&lt;/a&gt;, &lt;a href=&#34;https://www.ansible.com/&#34;&gt;Ansible&lt;/a&gt;, &lt;a href=&#34;https://kubernetes.io/docs/setup/learning-environment/minikube/&#34;&gt;MiniKube&lt;/a&gt;, &lt;a href=&#34;https://www.okd.io/minishift/&#34;&gt;MiniShift&lt;/a&gt; (Kubernetes / &lt;a href=&#34;https://www.openshift.com/&#34;&gt;Redhat OpenShift&lt;/a&gt;/&lt;a href=&#34;https://www.okd.io/&#34;&gt;OKD&lt;/a&gt; dev VMs), &lt;a href=&#34;https://maven.apache.org/&#34;&gt;Maven&lt;/a&gt;, &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt;, &lt;a href=&#34;https://www.scala-sbt.org/&#34;&gt;SBT&lt;/a&gt;, &lt;a href=&#34;https://fedoraproject.org/wiki/EPEL&#34;&gt;EPEL&lt;/a&gt;, &lt;a href=&#34;http://repoforge.org/&#34;&gt;RPMforge&lt;/a&gt;, &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;, &lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt;, &lt;a href=&#34;https://circleci.com/&#34;&gt;Circle CI&lt;/a&gt;, &lt;a href=&#34;https://www.appveyor.com/&#34;&gt;AppVeyor&lt;/a&gt;, &lt;a href=&#34;https://buildkite.com&#34;&gt;BuildKite&lt;/a&gt;, &lt;a href=&#34;https://github.com/apache/parquet-mr/tree/master/parquet-tools&#34;&gt;Parquet Tools&lt;/a&gt; etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;clean_caches.sh&lt;/code&gt; - cleans out OS package and programming language caches - useful to save space or reduce Docker image size&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;curl_auth.sh&lt;/code&gt; - shortens &lt;code&gt;curl&lt;/code&gt; command by auto-loading your OAuth2 / JWT API token or username &amp;amp; password from environment variables or interactive starred password prompt through a ram file descriptor to avoid placing them on the command line (which would expose your credentials in the process list or OS audit log files). Used by many other adjacent API querying scripts&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ldapsearch.sh&lt;/code&gt; - shortens &lt;code&gt;ldapsearch&lt;/code&gt; command by inferring switches from environment variables&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ldap_user_recurse.sh&lt;/code&gt; / &lt;code&gt;ldap_group_recurse.sh&lt;/code&gt; - recurse Active Directory LDAP users upwards to find all parent groups, or groups downwards to find all nested users (useful for debugging LDAP integration and group-based permissions)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;find_duplicate_files*.sh&lt;/code&gt; - finds duplicate files by size and/or checksum in given directory trees. Checksums are only done on files that already have matching byte counts for efficiency&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;find_broken_links.sh&lt;/code&gt; - find broken links with delays to avoid tripping defenses&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;jvm_heaps*.sh&lt;/code&gt; - show all your Java heap sizes for all running Java processes, and their total MB (for performance tuning and sizing)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;random_select.sh&lt;/code&gt; - selects one of given args at random. Useful for sampling, running randomized subsets of large test suites etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;split.sh&lt;/code&gt; - split large files into N parts (defaults to the number of your CPU cores) to parallelize operations on them&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ssl_get_cert.sh&lt;/code&gt; - gets a remote &lt;code&gt;host:port&lt;/code&gt; server&#39;s SSL cert in a format you can pipe, save and use locally, for example in Java truststores&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ssl_verify_cert.sh&lt;/code&gt; - verifies a remote SSL certificate (battle tested more feature-rich version &lt;code&gt;check_ssl_cert.pl&lt;/code&gt; exists in the &lt;a href=&#34;https://github.com/HariSekhon/Nagios-Plugins&#34;&gt;Advanced Nagios Plugins&lt;/a&gt; repo)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;urlencode.sh&lt;/code&gt; / &lt;code&gt;urldecode.sh&lt;/code&gt; - URL encode/decode quickly on the command line, in pipes etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vagrant_hosts.sh&lt;/code&gt; - generate &lt;code&gt;/etc/hosts&lt;/code&gt; output from a &lt;code&gt;Vagrantfile&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vagrant_total_mb.sh&lt;/code&gt; - calculate the RAM committed to VMs in a &lt;code&gt;Vagrantfile&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Databases&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HariSekhon/SQL-scripts&#34;&gt;sql/&lt;/a&gt; - 100+ SQL scripts for &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt;, &lt;a href=&#34;https://www.mysql.com/&#34;&gt;MySQL&lt;/a&gt;, &lt;a href=&#34;https://cloud.google.com/bigquery&#34;&gt;Google BigQuery&lt;/a&gt; and &lt;a href=&#34;https://aws.amazon.com/athena/&#34;&gt;AWS Athena&lt;/a&gt; &lt;a href=&#34;https://aws.amazon.com/cloudtrail/&#34;&gt;CloudTrail&lt;/a&gt; logs integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mysql*.sh&lt;/code&gt; - &lt;a href=&#34;https://www.mysql.com/&#34;&gt;MySQL&lt;/a&gt; scripts: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;mysql.sh&lt;/code&gt; - shortens &lt;code&gt;mysql&lt;/code&gt; command to connect to &lt;a href=&#34;https://www.mysql.com/&#34;&gt;MySQL&lt;/a&gt; by auto-populating switches from both standard environment variables like &lt;code&gt;$MYSQL_TCP_PORT&lt;/code&gt;, &lt;code&gt;$DBI_USER&lt;/code&gt;, &lt;code&gt;$MYSQL_PWD&lt;/code&gt; (see &lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/environment-variables.html&#34;&gt;doc&lt;/a&gt;) and other common environment variables like &lt;code&gt;$MYSQL_HOST&lt;/code&gt; / &lt;code&gt;$HOST&lt;/code&gt;, &lt;code&gt;$MYSQL_USER&lt;/code&gt; / &lt;code&gt;$USER&lt;/code&gt;, &lt;code&gt;$MYSQL_PASSWORD&lt;/code&gt; / &lt;code&gt;$PASSWORD&lt;/code&gt;, &lt;code&gt;$MYSQL_DATABASE&lt;/code&gt; / &lt;code&gt;$DATABASE&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;mysql_foreach_table.sh&lt;/code&gt; - executes a SQL query against every table, replacing &lt;code&gt;{db}&lt;/code&gt; and &lt;code&gt;{table}&lt;/code&gt; in each iteration eg. &lt;code&gt;select count(*) from {table}&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;mysql_*.sh&lt;/code&gt; - various scripts using &lt;code&gt;mysql.sh&lt;/code&gt; for row counts, iterating each table, or outputting clean lists of databases and tables for quick scripting&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;mysqld.sh&lt;/code&gt; - one-touch &lt;a href=&#34;https://www.mysql.com/&#34;&gt;MySQL&lt;/a&gt;, boots docker container + drops in to &lt;code&gt;mysql&lt;/code&gt; shell, with &lt;code&gt;/sql&lt;/code&gt; scripts mounted in container for easy sourcing eg. &lt;code&gt;source /sql/&amp;lt;name&amp;gt;.sql&lt;/code&gt;. Optionally loads sample &#39;chinook&#39; database&lt;/li&gt; &#xA;   &lt;li&gt;see also the &lt;a href=&#34;https://github.com/HariSekhon/SQL-scripts&#34;&gt;SQL Scripts&lt;/a&gt; repo for many more straight MySQL SQL scripts&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mariadb.sh&lt;/code&gt; - one-touch &lt;a href=&#34;https://mariadb.org/&#34;&gt;MariaDB&lt;/a&gt;, boots docker container + drops in to &lt;code&gt;mysql&lt;/code&gt; shell, with &lt;code&gt;/sql&lt;/code&gt; scripts mounted in container for easy sourcing eg. &lt;code&gt;source /sql/&amp;lt;name&amp;gt;.sql&lt;/code&gt;. Optionally loads sample &#39;chinook&#39; database&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sqlite.sh&lt;/code&gt; - one-touch &lt;a href=&#34;https://www.sqlite.org/index.html&#34;&gt;SQLite&lt;/a&gt;, starts sqlite3 shell with sample &#39;chinook&#39; database loaded&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;postgres*.sh&lt;/code&gt; / &lt;code&gt;psql.sh&lt;/code&gt; - &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt; scripts: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;postgres.sh&lt;/code&gt; - one-touch &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt;, boots docker container + drops in to &lt;code&gt;psql&lt;/code&gt; shell, with &lt;code&gt;/sql&lt;/code&gt; scripts mounted in container for easy sourcing eg. &lt;code&gt;\i /sql/&amp;lt;name&amp;gt;.sql&lt;/code&gt;. Optionally loads sample &#39;chinook&#39; database&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;psql.sh&lt;/code&gt; - shortens &lt;code&gt;psql&lt;/code&gt; command to connect to &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostreSQL&lt;/a&gt; by auto-populating switches from environment variables, using both standard postgres supported environment variables like &lt;code&gt;$PG*&lt;/code&gt; (see &lt;a href=&#34;https://www.postgresql.org/docs/12/libpq-envars.html&#34;&gt;doc&lt;/a&gt;) as well as other common environment variables like &lt;code&gt;$POSTGRESQL_HOST&lt;/code&gt; / &lt;code&gt;$POSTGRES_HOST&lt;/code&gt; / &lt;code&gt;$HOST&lt;/code&gt;, &lt;code&gt;$POSTGRESQL_USER&lt;/code&gt; / &lt;code&gt;$POSTGRES_USER&lt;/code&gt; / &lt;code&gt;$USER&lt;/code&gt;, &lt;code&gt;$POSTGRESQL_PASSWORD&lt;/code&gt; / &lt;code&gt;$POSTGRES_PASSWORD&lt;/code&gt; / &lt;code&gt;$PASSWORD&lt;/code&gt;, &lt;code&gt;$POSTGRESQL_DATABASE&lt;/code&gt; / &lt;code&gt;$POSTGRES_DATABASE&lt;/code&gt; / &lt;code&gt;$DATABASE&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;postgres_foreach_table.sh&lt;/code&gt; - executes a SQL query against every table, replacing &lt;code&gt;{db}&lt;/code&gt;, &lt;code&gt;{schema}&lt;/code&gt; and &lt;code&gt;{table}&lt;/code&gt; in each iteration eg. &lt;code&gt;select count(*) from {table}&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;postgres_*.sh&lt;/code&gt; - various scripts using &lt;code&gt;psql.sh&lt;/code&gt; for row counts, iterating each table, or outputting clean lists of databases, schemas and tables for quick scripting&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;AWS - Amazon Web Services&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/&#34;&gt;AWS&lt;/a&gt; scripts - &lt;code&gt;aws_*.sh&lt;/code&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_cli_create_credential.sh&lt;/code&gt; - creates an AWS service account user for CI/CD or CLI with Admin permissions (or other group or policy), creates an AWS Access Key, saves a credentials CSV and even prints the shell export commands and aws credentials file config to configure your environment to start using it. Useful trick to avoid CLI reauth to &lt;code&gt;aws sso login&lt;/code&gt; every day.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_terraform_create_credential.sh&lt;/code&gt; - creates a AWS terraform service account with Administrator permissions for Terraform Cloud or other CI/CD systems to run Terraform plan and apply, since no CI/CD systems can work with AWS SSO workflows. Stores the access key as both CSV and prints shell export commands and credentials file config as above&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;.envrc-aws&lt;/code&gt; - copy to &lt;code&gt;.envrc&lt;/code&gt; for &lt;code&gt;direnv&lt;/code&gt; to auto-load AWS configuration settings such as AWS Profile, Compute Region, EKS cluster kubectl context etc. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;calls &lt;code&gt;.envrc-kubernetes&lt;/code&gt; to set the &lt;code&gt;kubectl&lt;/code&gt; context isolated to current shell to prevent race conditions between shells and scripts caused by otherwise naively changing the global &lt;code&gt;~/.kube/config&lt;/code&gt; context&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_terraform_create_s3_bucket.sh&lt;/code&gt; - creates a Terraform S3 bucket for storing the backend state, locks out public access, enables versioning, encryption, and locks out Power Users role and optionally any given user/group/role ARNs via a bucket policy for safety&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_terraform_create_dynamodb_table.sh&lt;/code&gt; - creates a Terraform locking table in DynamoDB for use with the S3 backend&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_account_summary.sh&lt;/code&gt; - prints AWS account summary in &lt;code&gt;key = value&lt;/code&gt; pairs for easy viewing / grepping of things like &lt;code&gt;AccountMFAEnabled&lt;/code&gt;, &lt;code&gt;AccountAccessKeysPresent&lt;/code&gt;, useful for checking whether the root account has MFA enabled and no access keys, comparing number of users vs number of MFA devices etc. (see also &lt;code&gt;check_aws_root_account.py&lt;/code&gt; in &lt;a href=&#34;https://github.com/HariSekhon/Nagios-Plugins&#34;&gt;Advanced Nagios Plugins&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_billing_alarm.sh&lt;/code&gt; - creates a &lt;a href=&#34;https://aws.amazon.com/cloudwatch/&#34;&gt;CloudWatch&lt;/a&gt; billing alarm and &lt;a href=&#34;https://aws.amazon.com/sns/&#34;&gt;SNS&lt;/a&gt; topic with subscription to email you when you incur charges above a given threshold. This is often the first thing you want to do on an account&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_budget_alarm.sh&lt;/code&gt; - creates an &lt;a href=&#34;https://aws.amazon.com/cloudwatch/&#34;&gt;AWS Budgets&lt;/a&gt; billing alarm and &lt;a href=&#34;https://aws.amazon.com/sns/&#34;&gt;SNS&lt;/a&gt; topic with subscription to email you when both when you start incurring forecasted charges of over 80% of your budget, and 90% actual usage. This is often the first thing you want to do on an account&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_batch_stale_jobs.sh&lt;/code&gt; - lists &lt;a href=&#34;https://aws.amazon.com/batch/&#34;&gt;AWS Batch&lt;/a&gt; jobs that are older than N hours in a given queue&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_batch_kill_stale_jobs.sh&lt;/code&gt; - finds and kills &lt;a href=&#34;https://aws.amazon.com/batch/&#34;&gt;AWS Batch&lt;/a&gt; jobs that are older than N hours in a given queue&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_cloudtrails_cloudwatch.sh&lt;/code&gt; - lists &lt;a href=&#34;https://aws.amazon.com/cloudtrail/&#34;&gt;Cloud Trails&lt;/a&gt; and their last delivery to &lt;a href=&#34;https://aws.amazon.com/cloudwatch/features/&#34;&gt;CloudWatch&lt;/a&gt; Logs (should be recent)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_cloudtrails_event_selectors.sh&lt;/code&gt; - lists &lt;a href=&#34;https://aws.amazon.com/cloudtrail/&#34;&gt;Cloud Trails&lt;/a&gt; and their event selectors to check each one has at least one event selector&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_cloudtrails_s3_accesslogging.sh&lt;/code&gt; - lists &lt;a href=&#34;https://aws.amazon.com/cloudtrail/&#34;&gt;Cloud Trails&lt;/a&gt; buckets and their Access Logging prefix and target bucket. Checks &lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerLogs.html&#34;&gt;S3 access logging&lt;/a&gt; is enabled&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_cloudtrails_s3_kms.sh&lt;/code&gt; - lists &lt;a href=&#34;https://aws.amazon.com/cloudtrail/&#34;&gt;Cloud Trails&lt;/a&gt; and whether their &lt;a href=&#34;https://aws.amazon.com/s3/&#34;&gt;S3&lt;/a&gt; buckets are &lt;a href=&#34;https://aws.amazon.com/kms/&#34;&gt;KMS&lt;/a&gt; secured&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_cloudtrails_status.sh&lt;/code&gt; - lists &lt;a href=&#34;https://aws.amazon.com/cloudtrail/&#34;&gt;Cloud Trails&lt;/a&gt; status - if logging, multi-region and log file validation enabled&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_config_all_types.sh&lt;/code&gt; - lists &lt;a href=&#34;https://aws.amazon.com/config/&#34;&gt;AWS Config&lt;/a&gt; recorders, checking all resource types are supported (should be true) and includes global resources (should be true)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_config_recording.sh&lt;/code&gt; - lists &lt;a href=&#34;https://aws.amazon.com/config/&#34;&gt;AWS Config&lt;/a&gt; recorders, their recording status (should be true) and their last status (should be success)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_csv_creds.sh&lt;/code&gt; - prints AWS credentials from a CSV file as shell export statements. Useful to quickly switch your shell to some exported credentials from a service account for testing permissions or pipe to upload to a CI/CD system via an API (eg. &lt;code&gt;github_actions_repo*_set_secret.sh&lt;/code&gt;, &lt;code&gt;gitlab_*_set_env_vars.sh&lt;/code&gt;, &lt;code&gt;circleci_*_set_env_vars.sh&lt;/code&gt;, &lt;code&gt;bitbucket_*_set_env_vars.sh&lt;/code&gt;, &lt;code&gt;terraform_cloud_*_set_vars.sh&lt;/code&gt;, &lt;code&gt;kubectl_kv_to_secret.sh&lt;/code&gt;). Supports new user and new access key csv file formats.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_codecommit_csv_creds.sh&lt;/code&gt; - prints AWS &lt;a href=&#34;https://aws.amazon.com/codecommit/&#34;&gt;CodeCommit&lt;/a&gt; Git credentials from a CSV file as shell export statements. Similar use case and chaining as above&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_ecr_*.sh&lt;/code&gt; - &lt;a href=&#34;https://aws.amazon.com/ecr/&#34;&gt;AWS ECR&lt;/a&gt; docker image management scripts: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_ecr_docker_build_push.sh&lt;/code&gt; - builds a docker image and pushes it to ECR with not just the &lt;code&gt;latest&lt;/code&gt; docker tag but also the current Git hashref and Git tags&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_ecr_list_tags.sh&lt;/code&gt; - lists all the tags for a given ECR docker image&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_ecr_newest_image_tags.sh&lt;/code&gt; - lists the tags for the given ECR docker image with the newest creation date (can use this to determine which image version to tag as &lt;code&gt;latest&lt;/code&gt;)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_ecr_alternate_tags.sh&lt;/code&gt; - lists all the tags for a given ECR docker &lt;code&gt;image:tag&lt;/code&gt; (use arg &lt;code&gt;&amp;lt;image&amp;gt;:latest&lt;/code&gt; to see what version / build hashref / date tag has been tagged as &lt;code&gt;latest&lt;/code&gt;)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_ecr_tag_image.sh&lt;/code&gt; - tags an ECR image with another tag without pulling and pushing it&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_ecr_tag_image_by_digest.sh&lt;/code&gt; - same as above but tags an ECR image found via digest (more accurate as reference by existing tag can be a moving target). Useful to recover images that have become untagged&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_ecr_tag_latest.sh&lt;/code&gt; - tags a given ECR docker &lt;code&gt;image:tag&lt;/code&gt; as &lt;code&gt;latest&lt;/code&gt; without pulling or pushing the docker image&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_ecr_tag_branch.sh&lt;/code&gt; - tags a given ECR &lt;code&gt;image:tag&lt;/code&gt; with the current Git branch without pulling or pushing the docker image&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_ecr_tag_datetime.sh&lt;/code&gt; - tags a given ECR docker image with its creation date and UTC timestamp (when it was uploaded to ECR) without pulling or pushing the docker image&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_ecr_tag_newest_image_as_latest.sh&lt;/code&gt; - finds and tags the newest build of a given ECR docker image as &lt;code&gt;latest&lt;/code&gt; without pulling or pushing the docker image&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_ecr_tags_timestamps.sh&lt;/code&gt; - lists all the tags and their timestamps for a given ECR docker image&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_ecr_tags_old.sh&lt;/code&gt; - lists tags older than N days for a given ECR docker image&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_ecr_delete_old_tags.sh&lt;/code&gt; - deletes tags older than N days for a given ECR docker image. Lists the image:tags to be deleted and prompts for confirmation safety&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_foreach_profile.sh&lt;/code&gt; - executes a templated command across all AWS named profiles configured in AWS CLIv2, replacing &lt;code&gt;{profile}&lt;/code&gt; in each iteration. Combine with other scripts for powerful functionality, auditing, setup etc. eg. &lt;code&gt;aws_kube_creds.sh&lt;/code&gt; to configure &lt;code&gt;kubectl&lt;/code&gt; config to all EKS clusters in all environments&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_foreach_region.sh&lt;/code&gt; - executes a templated command against each AWS region enabled for the current account, replacing &lt;code&gt;{region}&lt;/code&gt; in each iteration. Combine with AWS CLI or scripts to find resources across regions&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_iam_*.sh&lt;/code&gt; - &lt;a href=&#34;https://aws.amazon.com/iam/&#34;&gt;AWS IAM&lt;/a&gt; scripts: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_iam_password_policy.sh&lt;/code&gt; - prints &lt;a href=&#34;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html&#34;&gt;AWS password policy&lt;/a&gt; in &lt;code&gt;key = value&lt;/code&gt; pairs for easy viewing / grepping (used by &lt;code&gt;aws_harden_password_policy.sh&lt;/code&gt; before and after to show the differences)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_iam_harden_password_policy.sh&lt;/code&gt; - strengthens &lt;a href=&#34;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html&#34;&gt;AWS password policy&lt;/a&gt; according to &lt;a href=&#34;https://d1.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf&#34;&gt;CIS Foundations Benchmark&lt;/a&gt; recommendations&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_iam_replace_access_key.sh&lt;/code&gt; - replaces the non-current IAM access key (Inactive, Not Used, longer time since used, or an explicitly given key), outputting the new key as shell export statements (useful for piping to the same tools listed for &lt;code&gt;aws_csv_creds.sh&lt;/code&gt; above)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_iam_policies_attached_to_users.sh&lt;/code&gt; - finds &lt;a href=&#34;https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_manage.html&#34;&gt;AWS IAM policies&lt;/a&gt; directly attached to users (anti-best practice) instead of groups&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_iam_policies_granting_full_access.sh&lt;/code&gt; - finds &lt;a href=&#34;https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_manage.html&#34;&gt;AWS IAM policies&lt;/a&gt; granting full access (anti-best practice)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_iam_policies_unattached.sh&lt;/code&gt; - lists unattached &lt;a href=&#34;https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_manage.html&#34;&gt;AWS IAM policies&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_iam_generate_credentials_report_wait.sh&lt;/code&gt; - generates an AWS IAM &lt;a href=&#34;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_getting-report.html&#34;&gt;credentials report&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_iam_users.sh&lt;/code&gt; - list your IAM users&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_iam_users_access_key_age.sh&lt;/code&gt; - prints AWS users &lt;a href=&#34;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html&#34;&gt;access key&lt;/a&gt; status and age (see also &lt;code&gt;aws_users_access_key_age.py&lt;/code&gt; in &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Python-tools&#34;&gt;DevOps Python tools&lt;/a&gt; which can filter by age and status)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_iam_users_access_key_age_report.sh&lt;/code&gt; - prints AWS users &lt;a href=&#34;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html&#34;&gt;access key&lt;/a&gt; status and age using a bulk credentials report (faster for many users)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_iam_users_access_key_last_used.sh&lt;/code&gt; - prints AWS users &lt;a href=&#34;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html&#34;&gt;access keys&lt;/a&gt; last used date&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_iam_users_access_key_last_used_report.sh&lt;/code&gt; - same as above using bulk credentials report (faster for many users)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_iam_users_last_used_report.sh&lt;/code&gt; - lists AWS users password/access keys last used dates&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_iam_users_mfa_active_report.sh&lt;/code&gt; - lists AWS users password enabled and &lt;a href=&#34;https://aws.amazon.com/iam/features/mfa/&#34;&gt;MFA&lt;/a&gt; enabled status&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_iam_users_mfa_serials.sh&lt;/code&gt; - lists AWS users &lt;a href=&#34;https://aws.amazon.com/iam/features/mfa/&#34;&gt;MFA&lt;/a&gt; serial numbers (differentiates Virtual vs Hardware MFAs)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_iam_users_pw_last_used.sh&lt;/code&gt; - lists AWS users and their password last used date&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_ip_ranges.sh&lt;/code&gt; - get all AWS IP ranges for a given Region and/or Service using the IP range API&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_kms_key_rotation_enabled.sh&lt;/code&gt; - lists &lt;a href=&#34;https://aws.amazon.com/kms/&#34;&gt;AWS KMS&lt;/a&gt; keys and whether they have key rotation enabled&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_kube_creds.sh&lt;/code&gt; - auto-loads all &lt;a href=&#34;https://aws.amazon.com/eks/&#34;&gt;AWS EKS&lt;/a&gt; clusters credentials in the current --profile and --region so your kubectl is ready to rock on AWS&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_kubectl.sh&lt;/code&gt; - runs kubectl commands safely fixed to a given &lt;a href=&#34;https://aws.amazon.com/eks/&#34;&gt;AWS EKS&lt;/a&gt; cluster using config isolation to avoid concurrency race conditions&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_logs_*.sh&lt;/code&gt; - some useful log queries in last N hours (24 hours by default): &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_logs_batch_jobs.sh&lt;/code&gt; - lists AWS Batch job submission requests and their callers&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_logs_ec2_spot.sh&lt;/code&gt; - lists AWS EC2 Spot fleet creation requests, their caller and first tag value for origin hint&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_logs_ecs_tasks.sh&lt;/code&gt; - lists AWS ECS task run requests, their callers and job definitions&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_meta.sh&lt;/code&gt; - &lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html&#34;&gt;AWS EC2 Metadata API&lt;/a&gt; query shortcut. See also the official &lt;a href=&#34;https://aws.amazon.com/code/ec2-instance-metadata-query-tool/&#34;&gt;ec2-metadata&lt;/a&gt; shell script with more features&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_nat_gateways_public_ips.sh&lt;/code&gt; - lists the public IPs of all NAT gateways. Useful to give to clients to permit through firewalls for webhooks or similar calls&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_sso_env_creds.sh&lt;/code&gt; - retrieves AWS SSO session credentials in the format of environment export commands for copying to other systems like Terraform Cloud&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_s3_bucket.sh&lt;/code&gt; - creates an S3 bucket, locks out public access, enables versioning, encryption, and optionally locks out any given user/group/role ARNs via a bucket policy for safety (eg. to stop Power Users accessing a sensitive bucket like Terraform state)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_s3_access_logging.sh&lt;/code&gt; - lists &lt;a href=&#34;https://aws.amazon.com/s3/&#34;&gt;AWS S3&lt;/a&gt; buckets and their &lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerLogs.html&#34;&gt;access logging&lt;/a&gt; status&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_spot_when_terminated.sh&lt;/code&gt; - executes commands when the &lt;a href=&#34;https://aws.amazon.com/ec2/&#34;&gt;AWS EC2&lt;/a&gt; instance running this script is notified of &lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-spot-instances.html&#34;&gt;Spot Termination&lt;/a&gt;, acts as a latch mechanism that can be set any time after boot&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_sqs_check.sh&lt;/code&gt; - sends a test message to an &lt;a href=&#34;https://aws.amazon.com/sqs/&#34;&gt;SQS&lt;/a&gt; queue, retrieves it to check and then deletes it via the receipt handle id&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_sqs_delete_message.sh&lt;/code&gt; - deletes 1-10 messages from a given &lt;a href=&#34;https://aws.amazon.com/sqs/&#34;&gt;SQS&lt;/a&gt; queue (to help clear out test messages)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_ssm_put_param.sh&lt;/code&gt; - reads a value from a command line argument or non-echo prompt and saves it to AWS &lt;a href=&#34;https://docs.aws.amazon.com/systems-manager/latest/userguide/what-is-systems-manager.html&#34;&gt;Systems Manager Parameter Store&lt;/a&gt;. Useful for uploading a password without exposing it on your screen&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aws_secret*.sh&lt;/code&gt; - AWS &lt;a href=&#34;https://aws.amazon.com/secrets-manager/&#34;&gt;Secrets Manager&lt;/a&gt; scripts: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_secret_list.sh&lt;/code&gt; - returns the list of secrets, one per line&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_secret_add.sh&lt;/code&gt; - reads a value from a command line argument or non-echo prompt and saves it to Secrets Manager. Useful for uploading a password without exposing it on your screen&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_secret_add_binary.sh&lt;/code&gt; - base64 encodes a given file&#39;s contents and saves it to Secrets Manager as a binary secret. Useful for uploading things like QR code screenshots for sharing MFA to recovery admin accounts&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_secret_update.sh&lt;/code&gt; - reads a value from a command line argument or non-echo prompt and updates a given Secrets Manager secret. Useful for updating a password without exposing it on your screen&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_secret_update_binary.sh&lt;/code&gt; - base64 encodes a given file&#39;s contents and updates a given Secrets Manager secret. Useful for updating a QR code screenshot for a root account&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aws_secret_get.sh&lt;/code&gt; - gets a secret value for a given secret from Secrets Manager, retrieving either a secure string or secure binary depending on which is available&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;setup/eksctl_cluster.sh&lt;/code&gt; - downloads &lt;a href=&#34;https://eksctl.io/&#34;&gt;eksctl&lt;/a&gt; and creates an &lt;a href=&#34;https://aws.amazon.com/eks/&#34;&gt;AWS EKS&lt;/a&gt; Kubernetes cluster&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;GCP - Google Cloud Platform&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cloud.google.com/&#34;&gt;Google Cloud&lt;/a&gt; scripts - &lt;code&gt;gcp_*.sh&lt;/code&gt; / &lt;code&gt;gce_*.sh&lt;/code&gt; / &lt;code&gt;gke_*.sh&lt;/code&gt; / &lt;code&gt;gcr_*.sh&lt;/code&gt; / &lt;code&gt;bigquery_*.sh&lt;/code&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;.envrc-gcp&lt;/code&gt; - copy to &lt;code&gt;.envrc&lt;/code&gt; for &lt;code&gt;direnv&lt;/code&gt; to auto-load GCP configuration settings such as Project, Region, Zone, GKE cluster kubectl context or any other GCloud SDK setting to shorten &lt;code&gt;gcloud&lt;/code&gt; commands. Applies to the local shell environment only to avoid race conditions caused by naively changing the global gcloud config at &lt;code&gt;~/.config/gcloud/active_config&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;calls &lt;code&gt;.envrc-kubernetes&lt;/code&gt; to set the &lt;code&gt;kubectl&lt;/code&gt; context isolated to current shell to prevent race conditions between shells and scripts caused by otherwise naively changing the global &lt;code&gt;~/.kube/config&lt;/code&gt; context&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gcp_terraform_create_credential.sh&lt;/code&gt; - creates a service account for &lt;a href=&#34;https://www.terraform.io/&#34;&gt;Terraform&lt;/a&gt; with full permissions, creates and downloads a credential key json and even prints the &lt;code&gt;export GOOGLE_CREDENTIALS&lt;/code&gt; command to configure your environment to start using Terraform immediately. Run once for each project and combine with &lt;code&gt;direnv&lt;/code&gt; for fast easy management of multiple GCP projects&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gcp_cli_create_credential.sh&lt;/code&gt; - creates a GCloud SDK CLI service account with full owner permissions to all projects, creates and downloads a credential key json and even prints the &lt;code&gt;export GOOGLE_CREDENTIALS&lt;/code&gt; command to configure your environment to start using it. Avoids having to reauth to &lt;code&gt;gcloud auth login&lt;/code&gt; every day.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gcp_spinnaker_create_credential.sh&lt;/code&gt; - creates a &lt;a href=&#34;https://spinnaker.io/&#34;&gt;Spinnaker&lt;/a&gt; service account with permissions on the current project, creates and downloads a credential key json and even prints the Halyard CLI configuration commands to use it&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gcp_info.sh&lt;/code&gt; - huge &lt;a href=&#34;https://cloud.google.com/&#34;&gt;Google Cloud&lt;/a&gt; inventory of deployed resources within the current project - Cloud SDK info plus all of the following (detects which services are enabled to query): &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcp_info_compute.sh&lt;/code&gt; - &lt;a href=&#34;https://cloud.google.com/compute/&#34;&gt;GCE&lt;/a&gt; Virtual Machine instances, &lt;a href=&#34;https://cloud.google.com/appengine&#34;&gt;App Engine&lt;/a&gt; instances, &lt;a href=&#34;https://cloud.google.com/functions&#34;&gt;Cloud Functions&lt;/a&gt;, &lt;a href=&#34;https://cloud.google.com/kubernetes-engine&#34;&gt;GKE&lt;/a&gt; clusters, all &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; objects across all GKE clusters (see &lt;code&gt;kubernetes_info.sh&lt;/code&gt; below for more details)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcp_info_storage.sh&lt;/code&gt; - &lt;a href=&#34;https://cloud.google.com/sql&#34;&gt;Cloud SQL&lt;/a&gt; info below, plus: &lt;a href=&#34;https://cloud.google.com/storage&#34;&gt;Cloud Storage&lt;/a&gt; Buckets, &lt;a href=&#34;https://cloud.google.com/filestore&#34;&gt;Cloud Filestore&lt;/a&gt;, &lt;a href=&#34;https://cloud.google.com/memorystore&#34;&gt;Cloud Memorystore Redis&lt;/a&gt;, &lt;a href=&#34;https://cloud.google.com/bigtable&#34;&gt;BigTable&lt;/a&gt; clusters and instances, &lt;a href=&#34;https://cloud.google.com/datastore&#34;&gt;Datastore&lt;/a&gt; indexes&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcp_info_cloud_sql.sh&lt;/code&gt; - &lt;a href=&#34;https://cloud.google.com/sql&#34;&gt;Cloud SQL&lt;/a&gt; instances, whether their backups are enabled, and all databases on each instance &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;code&gt;gcp_info_cloud_sql_databases.sh&lt;/code&gt; - lists databases inside each &lt;a href=&#34;https://cloud.google.com/sql&#34;&gt;Cloud SQL&lt;/a&gt; instance. Included in &lt;code&gt;gcp_info_cloud_sql.sh&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;gcp_info_cloud_sql_backups.sh&lt;/code&gt; - lists backups for each &lt;a href=&#34;https://cloud.google.com/sql&#34;&gt;Cloud SQL&lt;/a&gt; instance with their dates and status. Not included in &lt;code&gt;gcp_info_cloud_sql.sh&lt;/code&gt; for brevity. See also &lt;code&gt;gcp_sql_export.sh&lt;/code&gt; further down for more durable backups to &lt;a href=&#34;https://cloud.google.com/storage&#34;&gt;GCS&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;gcp_info_cloud_sql_users.sh&lt;/code&gt; - lists users for each running &lt;a href=&#34;https://cloud.google.com/sql&#34;&gt;Cloud SQL&lt;/a&gt; instance. Not included in &lt;code&gt;gcp_info_cloud_sql.sh&lt;/code&gt; for brevity but useful to audit users&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcp_info_networking.sh&lt;/code&gt; - VPC Networks, Addresses, Proxies, Subnets, Routers, Routes, VPN Gateways, VPN Tunnels, Reservations, Firewall rules, Forwarding rules, &lt;a href=&#34;https://cloud.google.com/dns&#34;&gt;Cloud DNS&lt;/a&gt; managed zones and verified domains&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcp_info_bigdata.sh&lt;/code&gt; - &lt;a href=&#34;https://cloud.google.com/dataproc&#34;&gt;Dataproc&lt;/a&gt; clusters and jobs in all regions, &lt;a href=&#34;https://cloud.google.com/dataflow&#34;&gt;Dataflow&lt;/a&gt; jobs in all regions, &lt;a href=&#34;https://cloud.google.com/pubsub&#34;&gt;PubSub&lt;/a&gt; messaging topics, &lt;a href=&#34;https://cloud.google.com/iot-core&#34;&gt;Cloud IOT&lt;/a&gt; registries in all regions&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcp_info_tools.sh&lt;/code&gt; - &lt;a href=&#34;https://cloud.google.com/source-repositories&#34;&gt;Cloud Source Repositories&lt;/a&gt;, &lt;a href=&#34;https://cloud.google.com/cloud-build&#34;&gt;Cloud Builds&lt;/a&gt;, &lt;a href=&#34;https://cloud.google.com/container-registry&#34;&gt;Container Registry&lt;/a&gt; images across all major repos (&lt;code&gt;gcr.io&lt;/code&gt;, &lt;code&gt;us.gcr.io&lt;/code&gt;, &lt;code&gt;eu.gcr.io&lt;/code&gt;, &lt;code&gt;asia.gcr.io&lt;/code&gt;), &lt;a href=&#34;https://cloud.google.com/deployment-manager&#34;&gt;Deployment Manager&lt;/a&gt; deployments&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcp_info_auth_config.sh&lt;/code&gt; - Auth Configurations, Organizations &amp;amp; Current Config&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcp_info_projects.sh&lt;/code&gt; - Projects names and IDs&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcp_info_services.sh&lt;/code&gt; - Services &amp;amp; APIs enabled &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;code&gt;gcp_service_apis.sh&lt;/code&gt; - lists all available &lt;a href=&#34;https://cloud.google.com/&#34;&gt;GCP&lt;/a&gt; Services, APIs and their states (enabled/disabled), and provides &lt;code&gt;is_service_enabled()&lt;/code&gt; function used throughout the adjacent scripts to avoid errors and only show relevant enabled services&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcp_info_accounts_secrets.sh&lt;/code&gt; - &lt;a href=&#34;https://cloud.google.com/iam&#34;&gt;IAM&lt;/a&gt; Service Accounts, &lt;a href=&#34;https://cloud.google.com/secret-manager&#34;&gt;Secret Manager&lt;/a&gt; secrets&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gcp_info_all_projects.sh&lt;/code&gt; - same as above but for all detected projects&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gcp_foreach_project.sh&lt;/code&gt; - executes a templated command across all GCP projects, replacing &lt;code&gt;{project_id}&lt;/code&gt; and &lt;code&gt;{project_name}&lt;/code&gt; in each iteration (used by &lt;code&gt;gcp_info_all_projects.sh&lt;/code&gt; to call &lt;code&gt;gcp_info.sh&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gcp_find_orphaned_disks.sh&lt;/code&gt; - lists orphaned disks across one or more GCP projects (not attached to any compute instance)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gcp_secret*.sh&lt;/code&gt; - &lt;a href=&#34;https://cloud.google.com/secret-manager&#34;&gt;Google Secret Manager&lt;/a&gt; scripts: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcp_secret_add.sh&lt;/code&gt; - reads a value from a command line argument or non-echo prompt and saves it to GCP Secrets Manager. Useful for uploading a password without exposing it on your screen&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcp_secret_add_binary.sh&lt;/code&gt; - uploads a binary file to GCP Secrets Manager by base64 encoding it first. Useful for uploading QR code screenshots. Useful for uploading things like QR code screenshots for sharing MFA to recovery admin accounts&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcp_secret_update.sh&lt;/code&gt; - reads a value from a command line argument or non-echo prompt and updates a given GCP Secrets Manager secret. Useful for uploading a password without exposing it on your screen&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcp_secret_get.sh&lt;/code&gt; - finds the latest version of a given GCP Secret Manager secret and returns its value. Used by adjacent scripts&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcp_secret_label_k8s.sh&lt;/code&gt; - labels a given existing GCP secret with the current kubectl cluster name and namespace for later use by &lt;code&gt;gcp_secrets_to_kubernetes.sh&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcp_secrets_to_kubernetes.sh&lt;/code&gt; - loads GCP secrets to Kubernetes secrets in a 1-to-1 mapping. Can specify a list of secrets or auto-loads all GCP secrets with labels &lt;code&gt;kubernetes-cluster&lt;/code&gt; and &lt;code&gt;kubernetes-namespace&lt;/code&gt; matching the current &lt;code&gt;kubectl&lt;/code&gt; context (&lt;code&gt;kcd&lt;/code&gt; to the right namespace first, see &lt;code&gt;.bash.d/kubernetes&lt;/code&gt;). See also &lt;code&gt;kubernetes_get_secret_values.sh&lt;/code&gt; to debug the actual values that got loaded&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcp_secrets_to_kubernetes_multipart.sh&lt;/code&gt; - creates a Kubernetes secret from multiple GCP secrets (used to put &lt;code&gt;private.pem&lt;/code&gt; and &lt;code&gt;public.pem&lt;/code&gt; into the same secret to appear as files on volume mounts for apps in pods to use)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcp_secrets_labels.sh&lt;/code&gt; - lists GCP Secrets and their labels, one per line suitable for quick views or shell pipelines&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcp_secrets_update_lable.sh&lt;/code&gt; - updates all GCP secrets in current project matching label key=value with a new label value&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcp_service_account_credential_to_secret.sh&lt;/code&gt; - creates GCP service account and exports a credential key to GCP Secret Manager (useful to stage or combine with &lt;code&gt;gcp_secrets_to_kubernetes.sh&lt;/code&gt;)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gke_*.sh&lt;/code&gt; - &lt;a href=&#34;https://cloud.google.com/kubernetes-engine&#34;&gt;Google Kubernetes Engine&lt;/a&gt; scripts &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;gke_kube_creds.sh&lt;/code&gt; - auto-loads all GKE clusters credentials in the current / given / all projects so your kubectl is ready to rock on GCP&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gke_kubectl.sh&lt;/code&gt; - runs kubectl commands safely fixed to a given GKE cluster using config isolation to avoid concurrency race conditions&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gke_cert_manager_firewall_rule.sh&lt;/code&gt; - creates a GCP firewall rule for a given GKE cluster&#39;s masters to access &lt;a href=&#34;https://cert-manager.io/&#34;&gt;Cert Manager&lt;/a&gt; admission webhook (auto-determines the master cidr and network)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gke_nodepool_nodes.sh&lt;/code&gt; - lists all nodes in a given nodepool on the current GKE cluster via kubectl labels (fast)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gke_nodepool_nodes2.sh&lt;/code&gt; - same as above via GCloud SDK (slow, iterates instance groups)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gke_nodepool_taint.sh&lt;/code&gt; - taints/untaints all nodes in a given GKE nodepool on the current cluster (see &lt;code&gt;kubectl_node_taints.sh&lt;/code&gt; for a quick way to see taints)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gke_nodepool_drain.sh&lt;/code&gt; - drains all nodes in a given nodepool (to decommission or rebuild the node pool, for example with different taints)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gke_persistent_volumes_disk_mappings.sh&lt;/code&gt; - lists GKE kubernetes persistent volumes to GCP persistent disk names, along with PVC and namespace, useful when investigating, resizing PVs etc.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gcr_*.sh&lt;/code&gt; - &lt;a href=&#34;https://cloud.google.com/container-registry&#34;&gt;Google Container Registry&lt;/a&gt; scripts: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcr_list_tags.sh&lt;/code&gt; - lists all the tags for a given GCR docker image&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcr_newest_image_tags.sh&lt;/code&gt; - lists the tags for the given GCR docker image with the newest creation date (can use this to determine which image version to tag as &lt;code&gt;latest&lt;/code&gt;)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcr_alternate_tags.sh&lt;/code&gt; - lists all the tags for a given GCR docker &lt;code&gt;image:tag&lt;/code&gt; (use arg &lt;code&gt;&amp;lt;image&amp;gt;:latest&lt;/code&gt; to see what version / build hashref / date tag has been tagged as &lt;code&gt;latest&lt;/code&gt;)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcr_tag_latest.sh&lt;/code&gt; - tags a given GCR docker &lt;code&gt;image:tag&lt;/code&gt; as &lt;code&gt;latest&lt;/code&gt; without pulling or pushing the docker image&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcr_tag_branch.sh&lt;/code&gt; - tags a given GCR docker &lt;code&gt;image:tag&lt;/code&gt; with the current Git branch without pulling or pushing the docker image&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcr_tag_datetime.sh&lt;/code&gt; - tags a given GCR docker image with its creation date and UTC timestamp (when it was uploaded or created by &lt;a href=&#34;https://cloud.google.com/cloud-build&#34;&gt;Google Cloud Build&lt;/a&gt;) without pulling or pushing the docker image&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcr_tag_newest_image_as_latest.sh&lt;/code&gt; - finds and tags the newest build of a given GCR docker image as &lt;code&gt;latest&lt;/code&gt; without pulling or pushing the docker image&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcr_tags_timestamps.sh&lt;/code&gt; - lists all the tags and their timestamps for a given GCR docker image&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcr_tags_old.sh&lt;/code&gt; - lists tags older than N days for a given GCR docker image&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcr_delete_old_tags.sh&lt;/code&gt; - deletes tags older than N days for a given GCR docker image. Lists the image:tags to be deleted and prompts for confirmation safety&lt;/li&gt; &#xA;     &lt;li&gt;see also &lt;a href=&#34;https://github.com/HariSekhon/Templates/raw/master/cloudbuild.yaml&#34;&gt;cloudbuild.yaml&lt;/a&gt; in the &lt;a href=&#34;https://github.com/HariSekhon/Templates&#34;&gt;Templates&lt;/a&gt; repo&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;CI/CD on GCP - trigger Google Cloud Build and GKE Kubernetes deployments from orthogonal CI/CD systems like Jenkins / TeamCity: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcp_ci_build.sh&lt;/code&gt; - script template for CI/CD to trigger Google Cloud Build to build docker container image with extra datetime and latest tagging&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcp_ci_deploy_k8s.sh&lt;/code&gt; - script template for CI/CD to deploy GCR docker image to GKE Kubernetes using Kustomize&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gce_*.sh&lt;/code&gt; - &lt;a href=&#34;https://cloud.google.com/compute/&#34;&gt;Google Compute Engine&lt;/a&gt; scripts: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;gce_meta.sh&lt;/code&gt; - simple script to query the GCE metadata API from within Virtual Machines&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gce_when_preempted.sh&lt;/code&gt; - GCE VM preemption latch script - can be executed any time to set one or more commands to execute upon preemption&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gce_is_preempted.sh&lt;/code&gt; - GCE VM return true/false if preempted, callable from other scripts&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gce_instance_service_accounts.sh&lt;/code&gt; - lists GCE VM instance names and their service accounts&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gcp_firewall_disable_default_rules.sh&lt;/code&gt; - disables those lax GCP default network &#34;allow all&#34; firewall rules&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gcp_firewall_risky_rules.sh&lt;/code&gt; - lists risky GCP firewall rules that are enabled and allow traffic from 0.0.0.0/0&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gcp_sql_*.sh&lt;/code&gt; - &lt;a href=&#34;https://cloud.google.com/sql&#34;&gt;Cloud SQL&lt;/a&gt; scripts: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcp_sql_backup.sh&lt;/code&gt; - creates Cloud SQL backups&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcp_sql_export.sh&lt;/code&gt; - creates Cloud SQL exports to &lt;a href=&#34;https://cloud.google.com/storage&#34;&gt;GCS&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcp_sql_enable_automated_backups.sh&lt;/code&gt; - enable automated daily Cloud SQL backups&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcp_sql_enable_point_in_time_recovery.sh&lt;/code&gt; - enable point-in-time recovery with write-ahead logs&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcp_sql_proxy.sh&lt;/code&gt; - boots a &lt;a href=&#34;https://cloud.google.com/sql/docs/postgres/sql-proxy&#34;&gt;Cloud SQL Proxy&lt;/a&gt; to all Cloud SQL instances for fast convenient direct &lt;code&gt;psql&lt;/code&gt; / &lt;code&gt;mysql&lt;/code&gt; access via local sockets. Installs Cloud SQL Proxy if necessary&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcp_sql_running_primaries.sh&lt;/code&gt; - lists primary running Cloud SQL instances&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcp_sql_service_accounts.sh&lt;/code&gt; - lists Cloud SQL instance service accounts. Useful for copying to &lt;a href=&#34;https://cloud.google.com/iam&#34;&gt;IAM&lt;/a&gt; to grant permissions (eg. Storage Object Creator for SQL export backups to GCS)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcp_sql_create_readonly_service_account.sh&lt;/code&gt; - creates a service account with read-only permissions to Cloud SQL eg. to run export backups to GCS&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcp_sql_grant_instances_gcs_object_creator.sh&lt;/code&gt; - grants minimal GCS objectCreator permission on a bucket to primary Cloud SQL instances for exports&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gcp_cloud_schedule_sql_exports.sh&lt;/code&gt; - creates Google &lt;a href=&#34;https://cloud.google.com/scheduler&#34;&gt;Cloud Scheduler&lt;/a&gt; jobs to trigger a &lt;a href=&#34;https://cloud.google.com/functions&#34;&gt;Cloud Function&lt;/a&gt; via &lt;a href=&#34;https://cloud.google.com/pubsub&#34;&gt;PubSub&lt;/a&gt; to run &lt;a href=&#34;https://cloud.google.com/sql&#34;&gt;Cloud SQL&lt;/a&gt; exports to &lt;a href=&#34;https://cloud.google.com/storage&#34;&gt;GCS&lt;/a&gt; for all &lt;a href=&#34;https://cloud.google.com/sql&#34;&gt;Cloud SQL&lt;/a&gt; instances in the current GCP project &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;the Python &lt;a href=&#34;https://cloud.google.com/functions&#34;&gt;GCF&lt;/a&gt; function is in the &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Python-tools&#34;&gt;DevOps Python tools&lt;/a&gt; repo&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;bigquery_*.sh&lt;/code&gt; - &lt;a href=&#34;https://cloud.google.com/bigquery&#34;&gt;BigQuery&lt;/a&gt; scripts: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;bigquery_list_datasets.sh&lt;/code&gt; - lists BigQuery datasets in the current GCP project&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;bigquery_list_tables.sh&lt;/code&gt; - lists BigQuery tables in a given dataset&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;bigquery_list_tables_all_datasets.sh&lt;/code&gt; - lists tables for all datasets in the current GCP project&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;bigquery_foreach_dataset.sh&lt;/code&gt; - executes a templated command for each dataset&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;bigquery_foreach_table.sh&lt;/code&gt; - executes a templated command for each table in a given dataset&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;bigquery_foreach_table_all_datasets.sh&lt;/code&gt; - executes a templated command for each table in each dataset in the current GCP project&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;bigquery_table_row_count.sh&lt;/code&gt; - gets the row count for a given table&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;bigquery_tables_row_counts.sh&lt;/code&gt; - gets the row counts for all tables in a given dataset&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;bigquery_tables_row_counts_all_datasets.sh&lt;/code&gt; - gets the row counts for all tables in all datasets in the current GCP project&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;bigquery_generate_query_biggest_tables_across_datasets_by_row_count.sh&lt;/code&gt; - generates a BigQuery SQL query to find the top 10 biggest tables by row count&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;bigquery_generate_query_biggest_tables_across_datasets_by_size.sh&lt;/code&gt; - generates a BigQuery SQL query to find the top 10 biggest tables by size&lt;/li&gt; &#xA;     &lt;li&gt;see also the &lt;a href=&#34;https://github.com/HariSekhon/SQL-scripts&#34;&gt;SQL Scripts&lt;/a&gt; repo for many more straight BigQuery SQL scripts&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;GCP &lt;a href=&#34;https://cloud.google.com/iam&#34;&gt;IAM&lt;/a&gt; scripts: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcp_service_account*.sh&lt;/code&gt;: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;code&gt;gcp_service_account_credential_to_secret.sh&lt;/code&gt; - creates GCP service account and exports a credential key to GCP Secret Manager (useful to stage or combine with &lt;code&gt;gcp_secrets_to_kubernetes.sh&lt;/code&gt;)&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;gcp_service_accounts_credential_keys.sh&lt;/code&gt; - lists all service account credential keys and expiry dates, can &lt;code&gt;grep 9999-12-31T23:59:59Z&lt;/code&gt; to find non-expiring keys&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;gcp_service_accounts_credential_keys_age.sh&lt;/code&gt; - lists all service account credential keys age in days&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;gcp_service_accounts_credential_keys_expired.sh&lt;/code&gt; - lists expired service account credential keys that should be removed and recreated if needed&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;gcp_service_account_members.sh&lt;/code&gt; - lists all members and roles authorized to use any service accounts. Useful for finding GKE Workload Identity mappings&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;gcp_iam_*.sh&lt;/code&gt;: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;code&gt;gcp_iam_roles_in_use.sh&lt;/code&gt; - lists GCP IAM roles in use in the current or all projects&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;gcp_iam_identities_in_use.sh&lt;/code&gt; - lists GCP IAM identities (users/groups/serviceAccounts) in use in the current or all projects&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;gcp_iam_roles_granted_to_identity.sh&lt;/code&gt; - lists GCP IAM roles granted to identities matching the regex (users/groups/serviceAccounts) in the current or all projects&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;gcp_iam_roles_granted_too_widely.sh&lt;/code&gt; - lists GCP IAM roles which have been granted to allAuthenticatedUsers or even worse allUsers (unauthenticated) in one or all projects&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;gcp_iam_roles_with_direct_user_grants.sh&lt;/code&gt; - lists GCP IAM roles which have been granted directly to users in violation of best-practice group-based management&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;gcp_iam_serviceaccount_members.sh&lt;/code&gt; - lists members with permissions to use each GCP service account&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;gcp_iam_serviceaccounts_without_permissions.sh&lt;/code&gt; - finds service accounts without IAM permissionns, useful to detect obsolete service accounts after a 90 day unused permissions clean out&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;gcp_iam_workload_identities.sh&lt;/code&gt; - lists GKE Workload Identity integrations, uses &lt;code&gt;gcp_iam_serviceaccount_members.sh&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;gcp_iam_users_granted_directly.sh&lt;/code&gt; - lists GCP IAM users which have been granted roles directly in violation of best-practice group-based management&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Kubernetes&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;.envrc-kubernetes&lt;/code&gt; - copy to &lt;code&gt;.envrc&lt;/code&gt; for &lt;code&gt;direnv&lt;/code&gt; to auto-load the right Kubernetes &lt;code&gt;kubectl&lt;/code&gt; context isolated to current shell to prevent race conditions between shells and scripts caused by otherwise naively changing the global &lt;code&gt;~/.kube/config&lt;/code&gt; context&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;eksctl_cluster.sh&lt;/code&gt; - quickly spins up an &lt;a href=&#34;https://aws.amazon.com/eks/&#34;&gt;AWS EKS&lt;/a&gt; cluster using &lt;code&gt;eksctl&lt;/code&gt; with some sensible defaults&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubernetes_info.sh&lt;/code&gt; - huge &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; inventory listing of deployed resources across all namespaces in the current cluster / kube context: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;cluster-info&lt;/li&gt; &#xA;   &lt;li&gt;master component statuses&lt;/li&gt; &#xA;   &lt;li&gt;nodes&lt;/li&gt; &#xA;   &lt;li&gt;namespaces&lt;/li&gt; &#xA;   &lt;li&gt;deployments, replicasets, replication controllers, statefulsets, daemonsets, horizontal pod autoscalers&lt;/li&gt; &#xA;   &lt;li&gt;storage classes, persistent volumes, persistent volume claims&lt;/li&gt; &#xA;   &lt;li&gt;service accounts, resource quotas, network policies, pod security policies&lt;/li&gt; &#xA;   &lt;li&gt;container images running&lt;/li&gt; &#xA;   &lt;li&gt;container images running counts descending&lt;/li&gt; &#xA;   &lt;li&gt;pods (might be too much detail if you have high replica counts, so done last, comment if you&#39;re sure nobody has deployed pods outside deployments)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubectl.sh&lt;/code&gt; - runs kubectl commands safely fixed to a given context using config isolation to avoid concurrency race conditions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubectl_diff_apply.sh&lt;/code&gt; - generates a kubectl diff and prompts to apply&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kustomize_diff_apply.sh&lt;/code&gt; - runs Kustomize build, precreates any namespaces, shows a kubectl diff of the proposed changes, and prompts to apply&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubectl_create_namespaces&lt;/code&gt; - creates any namespaces in yaml files or stdin, a prerequisite for a diff on a blank install, used by adjacent scripts for safety&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubectl_get_all.sh&lt;/code&gt; - finds all namespaced Kubernetes objects and requests them for the current or given namespace. Useful because &lt;code&gt;kubectl get all&lt;/code&gt; misses a lof of object types&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubectl_kv_to_secret.sh&lt;/code&gt; - creates a Kuberbetes secret from &lt;code&gt;key=value&lt;/code&gt; or shell export format, as args or via stdin (eg. piped from &lt;code&gt;aws_csv_creds.sh&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubectl_secret_values.sh&lt;/code&gt; - prints the keys and base64 decoded values within a given Kubernetes secret for quick debugging of Kubernetes secrets. See also: &lt;code&gt;gcp_secrets_to_kubernetes.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubernetes_foreach_context.sh&lt;/code&gt; - executes a command across all kubectl contexts, replacing &lt;code&gt;{context}&lt;/code&gt; in each iteration (skips lab contexts &lt;code&gt;docker&lt;/code&gt; / &lt;code&gt;minikube&lt;/code&gt; / &lt;code&gt;minishift&lt;/code&gt; to avoid hangs since they&#39;re often offline)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubernetes_foreach_namespace.sh&lt;/code&gt; - executes a command across all kubernetes namespaces in the current cluster context, replacing &lt;code&gt;{namespace}&lt;/code&gt; in each iteration &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Can be chained with &lt;code&gt;kubernetes_foreach_context.sh&lt;/code&gt; and useful when combined with &lt;code&gt;gcp_secrets_to_kubernetes.sh&lt;/code&gt; to load all secrets from GCP to Kubernetes for the current cluster, or combined with &lt;code&gt;gke_kube_creds.sh&lt;/code&gt; and &lt;code&gt;kubernetes_foreach_context.sh&lt;/code&gt; for all clusters!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubernetes_api.sh&lt;/code&gt; - finds Kubernetes API and runs your curl arguments against it, auto-getting authorization token and auto-populating OAuth authentication header&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubernetes_autoscaler_release.sh&lt;/code&gt; - finds the latest Kubernetes Autoscaler release that matches your local Kubernetes cluster version using kubectl and the GitHub API. Useful for quickly finding the image override version for &lt;code&gt;eks-cluster-autoscaler-kustomization.yaml&lt;/code&gt; in the &lt;a href=&#34;https://github.com/HariSekhon/Kubernetes-configs&#34;&gt;Kubernetes configs&lt;/a&gt; repo&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubernetes_etcd_backup.sh&lt;/code&gt; - creates a timestamped backup of the Kubernetes Etcd database for a kubeadm cluster&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubeadm_join_cmd.sh&lt;/code&gt; - outputs &lt;code&gt;kubeadm join&lt;/code&gt; command (generates new token) to join an existing Kubernetes cluster (used in &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/tree/master/vagrant/kubernetes&#34;&gt;vagrant kubernetes&lt;/a&gt; provisioning scripts)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubeadm_join_cmd2.sh&lt;/code&gt; - outputs &lt;code&gt;kubeadm join&lt;/code&gt; command manually (calculates cert hash + generates new token) to join an existing Kubernetes cluster&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubectl_exec.sh&lt;/code&gt; - finds and execs to the first Kubernetes pod matching the given name regex, optionally specifying the container name regex to exec to, and shows the full generated &lt;code&gt;kubectl exec&lt;/code&gt; command line for clarity&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubectl_exec2.sh&lt;/code&gt; - finds and execs to the first Kubernetes pod matching given pod filters, optionally specifying the container to exec to, and shows the full generated &lt;code&gt;kubectl exec&lt;/code&gt; command line for clarity&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubectl_pods_per_node.sh&lt;/code&gt; - lists number of pods per node sorted descending&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubectl_pods_important.sh&lt;/code&gt; - lists important pods and their nodes to check on scheduling&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubectl_pods_colocated.sh&lt;/code&gt; - lists pods from deployments/statefulsets that are colocated on the same node&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubectl_node_labels.sh&lt;/code&gt; - lists nodes and their labels, one per line, easier to read visually or pipe in scripting&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubectl_node_taints.sh&lt;/code&gt; - lists nodes and their taints&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubectl_jobs_stuck.sh&lt;/code&gt; - finds Kubernetes jobs stuck for hours or days with no completions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubectl_jobs_delete_stuck.sh&lt;/code&gt; - prompts for confirmation to delete stuck Kubernetes jobs found by script above&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubectl_images.sh&lt;/code&gt; - lists Kubernetes container images running on the current cluster&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubectl_image_counts.sh&lt;/code&gt; - lists Kubernetes container images running counts sorted descending&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubectl_pod_count.sh&lt;/code&gt; - lists Kubernetes pods total running count&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubectl_container_count.sh&lt;/code&gt; - lists Kubernetes containers total running count&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubectl_container_counts.sh&lt;/code&gt; - lists Kubernetes containers running counts by name sorted descending&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;helm_template.sh&lt;/code&gt; - templates a Helm chart for Kustomize deployments&lt;/li&gt; &#xA; &lt;li&gt;see also Google Kubernetes Engine scripts in the &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools/#gcp---google-cloud-platform&#34;&gt;GCP - Google Cloud Platform&lt;/a&gt; section above&lt;/li&gt; &#xA; &lt;li&gt;see also the &lt;a href=&#34;https://github.com/HariSekhon/Kubernetes-configs&#34;&gt;Kubernetes configs&lt;/a&gt; repo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Docker&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;docker_*.sh&lt;/code&gt; / &lt;code&gt;dockerhub_*.sh&lt;/code&gt; - &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; / &lt;a href=&#34;https://hub.docker.com/&#34;&gt;DockerHub&lt;/a&gt; API scripts: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;dockerhub_api.sh&lt;/code&gt; - queries DockerHub API v2 with or without authentication (&lt;code&gt;$DOCKERHUB_USER&lt;/code&gt; &amp;amp; &lt;code&gt;$DOCKERHUB_PASSWORD&lt;/code&gt; / &lt;code&gt;$DOCKERHUB_TOKEN&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;docker_api.sh&lt;/code&gt; - queries a Docker Registry with optional basic authentication if &lt;code&gt;$DOCKER_USER&lt;/code&gt; &amp;amp; &lt;code&gt;$DOCKER_PASSWORD&lt;/code&gt; are set&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;docker_registry_list_images.sh&lt;/code&gt; - lists images in a given private Docker Registry&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;docker_registry_list_tags.sh&lt;/code&gt; - lists tags for a given image in a private Docker Registry&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;docker_registry_get_image_manifest.sh&lt;/code&gt; - gets a given image:tag manifest from a private Docker Registry&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;docker_registry_tag_image.sh&lt;/code&gt; - tags a given image with a new tag in a private Docker Registry via the API without pulling and pushing the image data (must faster and more efficient)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;dockerhub_list_tags.sh&lt;/code&gt; - lists tags for a given DockerHub repo. See also &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Python-tools/raw/master/dockerhub_show_tags.py&#34;&gt;dockerhub_show_tags.py&lt;/a&gt; in the &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Python-tools&#34;&gt;DevOps Python tools&lt;/a&gt; repo.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;dockerhub_list_tags_by_last_updated.sh&lt;/code&gt; - lists tags for a given DockerHub repo sorted by last updated timestamp descending&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;dockerhub_search.sh&lt;/code&gt; - searches with a configurable number of returned items (older docker cli was limited to 25 results)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;clean_caches.sh&lt;/code&gt; - cleans out OS package and programming language caches, call near end of &lt;code&gt;Dockerfile&lt;/code&gt; to reduce Docker image size&lt;/li&gt; &#xA;   &lt;li&gt;see also the &lt;a href=&#34;https://github.com/HariSekhon/Dockerfiles&#34;&gt;Dockerfiles&lt;/a&gt; repo&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;quay.io_api.sh&lt;/code&gt; - queries the &lt;a href=&#34;https://quay.io/&#34;&gt;Quay.io&lt;/a&gt; API with OAuth2 authentication token &lt;code&gt;$QUAY_TOKEN&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Big Data &amp;amp; NoSQL&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;kafka_*.sh&lt;/code&gt; - scripts to make &lt;a href=&#34;http://kafka.apache.org/&#34;&gt;Kafka&lt;/a&gt; CLI usage easier including auto-setting Kerberos to source TGT from environment and auto-populating broker and zookeeper addresses. These are auto-added to the &lt;code&gt;$PATH&lt;/code&gt; when &lt;code&gt;.bashrc&lt;/code&gt; is sourced. For something similar for &lt;a href=&#34;https://lucene.apache.org/solr/&#34;&gt;Solr&lt;/a&gt;, see &lt;code&gt;solr_cli.pl&lt;/code&gt; in the &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Perl-tools&#34;&gt;DevOps Perl Tools&lt;/a&gt; repo.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zookeeper*.sh&lt;/code&gt; - &lt;a href=&#34;https://zookeeper.apache.org/&#34;&gt;Apache ZooKeeper&lt;/a&gt; scripts: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;zookeeper_client.sh&lt;/code&gt; - shortens &lt;code&gt;zookeeper-client&lt;/code&gt; command by auto-populating the zookeeper quorum from the environment variable &lt;code&gt;$ZOOKEEPERS&lt;/code&gt; or else parsing the zookeeper quorum from &lt;code&gt;/etc/**/*-site.xml&lt;/code&gt; to make it faster and easier to connect&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;zookeeper_shell.sh&lt;/code&gt; - shortens Kafka&#39;s &lt;code&gt;zookeeper-shell&lt;/code&gt; command by auto-populating the zookeeper quorum from the environment variable &lt;code&gt;$KAFKA_ZOOKEEPERS&lt;/code&gt; and optionally &lt;code&gt;$KAFKA_ZOOKEEPER_ROOT&lt;/code&gt; to make it faster and easier to connect&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hive_*.sh&lt;/code&gt; / &lt;code&gt;beeline*.sh&lt;/code&gt; - &lt;a href=&#34;https://hive.apache.org/&#34;&gt;Apache Hive&lt;/a&gt; scripts: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;beeline.sh&lt;/code&gt; - shortens &lt;code&gt;beeline&lt;/code&gt; command to connect to &lt;a href=&#34;https://cwiki.apache.org/confluence/display/Hive/HiveServer2+Overview&#34;&gt;HiveServer2&lt;/a&gt; by auto-populating Kerberos and SSL settings, zookeepers for HiveServer2 HA discovery if the environment variable &lt;code&gt;$HIVE_HA&lt;/code&gt; is set or using the &lt;code&gt;$HIVESERVER_HOST&lt;/code&gt; environment variable so you can connect with no arguments (prompts for HiveServer2 address if you haven&#39;t set &lt;code&gt;$HIVESERVER_HOST&lt;/code&gt; or &lt;code&gt;$HIVE_HA&lt;/code&gt;) &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;beeline_zk.sh&lt;/code&gt; - same as above for &lt;a href=&#34;https://cwiki.apache.org/confluence/display/Hive/HiveServer2+Overview&#34;&gt;HiveServer2&lt;/a&gt; HA by auto-populating SSL and ZooKeeper service discovery settings (specify &lt;code&gt;$HIVE_ZOOKEEPERS&lt;/code&gt; environment variable to override). Automatically called by &lt;code&gt;beeline.sh&lt;/code&gt; if either &lt;code&gt;$HIVE_ZOOKEEPERS&lt;/code&gt; or &lt;code&gt;$HIVE_HA&lt;/code&gt; is set (the latter parses &lt;code&gt;hive-site.xml&lt;/code&gt; for the ZooKeeper addresses)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;hive_foreach_table.sh&lt;/code&gt; - executes a SQL query against every table, replacing &lt;code&gt;{db}&lt;/code&gt; and &lt;code&gt;{table}&lt;/code&gt; in each iteration eg. &lt;code&gt;select count(*) from {table}&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;hive_list_databases.sh&lt;/code&gt; - list Hive databases, one per line, suitable for scripting pipelines&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;hive_list_tables.sh&lt;/code&gt; - list Hive tables, one per line, suitable for scripting pipelines&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;hive_tables_metadata.sh&lt;/code&gt; - lists a given DDL metadata field for each Hive table (to compare tables)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;hive_tables_location.sh&lt;/code&gt; - lists the data location per Hive table (eg. compare external table locations)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;hive_tables_row_counts.sh&lt;/code&gt; - lists the row count per Hive table&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;hive_tables_column_counts.sh&lt;/code&gt; - lists the column count per Hive table&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt; impala*.sh&lt;/code&gt; - &lt;a href=&#34;https://impala.apache.org/&#34;&gt;Apache Impala&lt;/a&gt; scripts: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;impala_shell.sh&lt;/code&gt; - shortens &lt;code&gt;impala-shell&lt;/code&gt; command to connect to &lt;a href=&#34;https://impala.apache.org/&#34;&gt;Impala&lt;/a&gt; by parsing the Hadoop topology map and selecting a random datanode to connect to its Impalad, acting as a cheap CLI load balancer. For a real load balancer see &lt;a href=&#34;https://github.com/HariSekhon/HAProxy-configs&#34;&gt;HAProxy config for Impala&lt;/a&gt; (and many other Big Data &amp;amp; NoSQL technologies). Optional environment variables &lt;code&gt;$IMPALA_HOST&lt;/code&gt; (eg. point to an explicit node or an HAProxy load balancer) and &lt;code&gt;IMPALA_SSL=1&lt;/code&gt; (or use regular impala-shell &lt;code&gt;--ssl&lt;/code&gt; argument pass through)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;impala_foreach_table.sh&lt;/code&gt; - executes a SQL query against every table, replacing &lt;code&gt;{db}&lt;/code&gt; and &lt;code&gt;{table}&lt;/code&gt; in each iteration eg. &lt;code&gt;select count(*) from {table}&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;impala_list_databases.sh&lt;/code&gt; - list Impala databases, one per line, suitable for scripting pipelines&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;impala_list_tables.sh&lt;/code&gt; - list Impala tables, one per line, suitable for scripting pipelines&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;impala_tables_metadata.sh&lt;/code&gt; - lists a given DDL metadata field for each Impala table (to compare tables)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;impala_tables_location.sh&lt;/code&gt; - lists the data location per Impala table (eg. compare external table locations)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;impala_tables_row_counts.sh&lt;/code&gt; - lists the row count per Impala table&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;impala_tables_column_counts.sh&lt;/code&gt; - lists the column count per Impala table&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hdfs_*.sh&lt;/code&gt; - Hadoop &lt;a href=&#34;https://en.wikipedia.org/wiki/Apache_Hadoop#Hadoop_distributed_file_system&#34;&gt;HDFS&lt;/a&gt; scripts: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;hdfs_checksum*.sh&lt;/code&gt; - walks an HDFS directory tree and outputs HDFS native checksums (faster) or portable externally comparable CRC32, in serial or in parallel to save time&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;hdfs_find_replication_factor_1.sh&lt;/code&gt; / &lt;code&gt;hdfs_set_replication_factor_3.sh&lt;/code&gt; - finds HDFS files with replication factor 1 / sets HDFS files with replication factor &amp;lt;=2 to replication factor 3 to repair replication safety and avoid no replica alarms during maintenance operations (see also Python API version in the &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Python-tools&#34;&gt;DevOps Python Tools&lt;/a&gt; repo)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;hdfs_file_size.sh&lt;/code&gt; / &lt;code&gt;hdfs_file_size_including_replicas.sh&lt;/code&gt; - quickly differentiate HDFS files raw size vs total replicated size&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;hadoop_random_node.sh&lt;/code&gt; - picks a random Hadoop cluster worker node, like a cheap CLI load balancer, useful in scripts when you want to connect to any worker etc. See also the read &lt;a href=&#34;https://github.com/HariSekhon/HAProxy-configs&#34;&gt;HAProxy Load Balancer configurations&lt;/a&gt; which focuses on master nodes&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cloudera_*.sh&lt;/code&gt; - &lt;a href=&#34;https://www.cloudera.com/&#34;&gt;Cloudera&lt;/a&gt; scripts: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;cloudera_manager_api.sh&lt;/code&gt; - script to simplify querying &lt;a href=&#34;https://www.cloudera.com/products/product-components/cloudera-manager.html&#34;&gt;Cloudera Manager&lt;/a&gt; API using environment variables, prompts, authentication and sensible defaults. Built on top of &lt;code&gt;curl_auth.sh&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cloudera_manager_impala_queries*.sh&lt;/code&gt; - queries &lt;a href=&#34;https://www.cloudera.com/products/product-components/cloudera-manager.html&#34;&gt;Cloudera Manager&lt;/a&gt; for recent &lt;a href=&#34;https://impala.apache.org/&#34;&gt;Impala&lt;/a&gt; queries, failed queries, exceptions, DDL statements, metadata stale errors, metadata refresh calls etc. Built on top of &lt;code&gt;cloudera_manager_api.sh&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cloudera_manager_yarn_apps.sh&lt;/code&gt; - queries &lt;a href=&#34;https://www.cloudera.com/products/product-components/cloudera-manager.html&#34;&gt;Cloudera Manager&lt;/a&gt; for recent &lt;a href=&#34;https://hadoop.apache.org/docs/current/hadoop-yarn/hadoop-yarn-site/YARN.html&#34;&gt;Yarn&lt;/a&gt; apps. Built on top of &lt;code&gt;cloudera_manager_api.sh&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cloudera_navigator_api.sh&lt;/code&gt; - script to simplify querying &lt;a href=&#34;https://www.cloudera.com/products/product-components/cloudera-navigator.html&#34;&gt;Cloudera Navigator&lt;/a&gt; API using environment variables, prompts, authentication and sensible defaults. Built on top of &lt;code&gt;curl_auth.sh&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cloudera_navigator_audit_logs.sh&lt;/code&gt; - fetches &lt;a href=&#34;https://www.cloudera.com/products/product-components/cloudera-navigator.html&#34;&gt;Cloudera Navigator&lt;/a&gt; audit logs for given service eg. hive/impala/hdfs via the API, simplifying date handling, authentication and common settings. Built on top of &lt;code&gt;cloudera_navigator_api.sh&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cloudera_navigator_audit_logs_download.sh&lt;/code&gt; - downloads &lt;a href=&#34;https://www.cloudera.com/products/product-components/cloudera-navigator.html&#34;&gt;Cloudera Navigator&lt;/a&gt; audit logs for each service by year. Skips existing logs, deletes partially downloaded logs on failure, generally retry safe (while true, Control-C, not &lt;code&gt;kill -9&lt;/code&gt; obviously). Built on top of &lt;code&gt;cloudera_navigator_audit_logs.sh&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Git - GitHub, GitLab, Bitbucket, Azure DevOps&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;git*.sh&lt;/code&gt; - &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; scripts: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;git_foreach_branch.sh&lt;/code&gt; - executes a command on all branches (useful in heavily version branched repos like in my &lt;a href=&#34;https://github.com/HariSekhon/Dockerfiles&#34;&gt;Dockerfiles&lt;/a&gt; repo)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;git_foreach_repo.sh&lt;/code&gt; - executes a command against all adjacent repos from a given repolist (used heavily by many adjacent scripts)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;git_foreach_modified.sh&lt;/code&gt; - executes a command against each file with git modified status&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;git_merge_all.sh&lt;/code&gt; / &lt;code&gt;git_merge_master.sh&lt;/code&gt; / &lt;code&gt;git_merge_master_pull.sh&lt;/code&gt; - merges updates from master branch to all other branches to avoid drift on longer lived feature branches / version branches (eg. &lt;a href=&#34;https://github.com/HariSekhon/Dockerfiles&#34;&gt;Dockerfiles&lt;/a&gt; repo)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;git_remotes_add_origin_providers.sh&lt;/code&gt; - auto-creates remotes for the 4 major public repositories (&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;/&lt;a href=&#34;https://gitlab.com/&#34;&gt;GitLab&lt;/a&gt;/&lt;a href=&#34;https://bitbucket.org&#34;&gt;Bitbucket&lt;/a&gt;/&lt;a href=&#34;https://dev.azure.com/&#34;&gt;Azure DevOps&lt;/a&gt;), useful for &lt;code&gt;git pull -all&lt;/code&gt; to fetch and merge updates from all providers in one command&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;git_remotes_set_multi_origin.sh&lt;/code&gt; - sets up multi-remote origin for unified push to automatically keep the 4 major public repositories in sync (especially useful for &lt;a href=&#34;https://bitbucket.org&#34;&gt;Bitbucket&lt;/a&gt; and &lt;a href=&#34;https://dev.azure.com/&#34;&gt;Azure DevOps&lt;/a&gt; which don&#39;t have &lt;a href=&#34;https://gitlab.com/&#34;&gt;GitLab&lt;/a&gt;&#39;s auto-mirroring from &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; feature)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;git_remotes_set_ssh_to_https.sh&lt;/code&gt; - converts local repo&#39;s remote URLs from ssh to https (to get through corporate firewalls), auto-loads http auth tokens if found in environment variables&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;git_remotes_set_https_to_ssh.sh&lt;/code&gt; - converts local repo&#39;s remote URLs from https to ssh (more convenient with SSH keys instead of http auth tokens)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;git_repos_pull.sh&lt;/code&gt; - pull multiple repos based on a source file mapping list - useful for easily sync&#39;ing lots of Git repos among computers&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;git_repos_update.sh&lt;/code&gt; - same as above but also runs the &lt;code&gt;make update&lt;/code&gt; build to install the latest dependencies, leverages the above script&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;git_log_empty_commits.sh&lt;/code&gt; - find empty commits in git history (eg. if a &lt;code&gt;git filter-branch&lt;/code&gt; was run but &lt;code&gt;--prune-empty&lt;/code&gt; was forgotten, leaking metadata like subjects containing file names or other sensitive info)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;git_files_in_history.sh&lt;/code&gt; - finds all filename / file paths in the git log history, useful for prepping for &lt;code&gt;git filter-branch&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;git_filter_branch_fix_author.sh&lt;/code&gt; - rewrites Git history to replace author/committer name &amp;amp; email references (useful to replace default account commits). Powerful, read &lt;code&gt;--help&lt;/code&gt; and &lt;code&gt;man git-filter-branch&lt;/code&gt; carefully. Should only be used by Git Experts.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;git_submodules_update_repos.sh&lt;/code&gt; - updates submodules (pulls and commits latest upstream github repo submodules) - used to cascade submodule updates throughout all my repos&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;github_*.sh&lt;/code&gt; - &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; API scripts: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_api.sh&lt;/code&gt; - queries the GitHub &lt;a href=&#34;https://docs.github.com/en/rest/reference&#34;&gt;API&lt;/a&gt;. Can infer GitHub user, repo and authentication token from local checkout or environment (&lt;code&gt;$GITHUB_USER&lt;/code&gt;, &lt;code&gt;$GITHUB_TOKEN&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_foreach_repo.sh&lt;/code&gt; - executes a templated command for each non-fork GitHub repo, replacing the &lt;code&gt;{owner}&lt;/code&gt;/&lt;code&gt;{name}&lt;/code&gt; or &lt;code&gt;{repo}&lt;/code&gt; placeholders in each iteration&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_invitations.sh&lt;/code&gt; - lists / accepts repo invitations. Useful to accept a large number of invites to repos generated by automation&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_mirror_repos_to_gitlab.sh&lt;/code&gt; - creates/syncs GitHub repos to GitLab for migrations or to cron fast free Disaster Recovery, including all branches and tags, plus the repo descriptions. Note this doesn&#39;t include PRs/wikis/releases&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_mirror_repos_to_bitbucket.sh&lt;/code&gt; - creates/syncs GitHub repos to BitBucket for migrations or to cron fast free Disaster Recovery, including all branches and tags, plus the repo descriptions. Note this doesn&#39;t include PRs/wikis/releases&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_mirror_repos_to_aws_codecommit.sh&lt;/code&gt; - creates/syncs GitHub repos to AWS CodeCommit for migrations or to cron fast almost free Disaster Recovery (close to $0 compared to $100-400+ per month for &lt;a href=&#34;https://rewind.com/products/backups/github/&#34;&gt;Rewind BackHub&lt;/a&gt;), including all branches and tags, plus the repo descriptions. Note this doesn&#39;t include PRs/wikis/releases&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_mirror_repos_to_gcp_source_repos.sh&lt;/code&gt; - creates/syncs GitHub repos to GCP Source Repos for migrations or to cron fast almost free Disaster Recovery (close to $0 compared to $100-400+ per month for &lt;a href=&#34;https://rewind.com/products/backups/github/&#34;&gt;Rewind BackHub&lt;/a&gt;), including all branches and tags. Note this doesn&#39;t include repo description/PRs/wikis/releases&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_create_pull_request.sh&lt;/code&gt; - creates a Pull Request idempotently by first checking for an existing PR between the branches, and also checking if there are the necessary commits between the branches, to avoid common errors from blindly raising PRs. Useful to automate code promotion across environment branches. Also works across repo forks and is used by &lt;code&gt;github_repo_fork_update.sh&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_merge_branch.sh&lt;/code&gt; - merges one branch into another branch via a Pull Request for full audit tracking all changes. Useful to automate code promotion across environment branches or backport hotfixes from Production or Staging to trunk branches such as master, main, dev or develop&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_actions_foreach_workflow.sh&lt;/code&gt; - executes a templated command for each workflow in a given GitHub repo, replacing &lt;code&gt;{name}&lt;/code&gt;, &lt;code&gt;{id}&lt;/code&gt; and &lt;code&gt;{state}&lt;/code&gt; in each iteration&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_actions_aws_create_load_credential.sh&lt;/code&gt; - creates an AWS user with group/policy, generates and downloads access keys, and uploads them to the given repo&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_actions_in_use.sh&lt;/code&gt; - lists GitHub Actions directly referenced in the .github/workflows in the current local repo checkout&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_actions_in_use_repo.sh&lt;/code&gt; - lists GitHub Actions for a given repo via the API, including following imported reusable workflows&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_actions_in_use_across_repos.sh&lt;/code&gt; - lists GitHub Actions in use across all your repos&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_actions_repos_lockdown.sh&lt;/code&gt; - secures GitHub Actions settings across all user repos to only GitHub, verified partners and selected 3rd party actions&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_actions_repo_set_secret.sh&lt;/code&gt; - sets a secret in the given repo from &lt;code&gt;key=value&lt;/code&gt; or shell export format, as args or via stdin (eg. piped from &lt;code&gt;aws_csv_creds.sh&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_actions_repo_env_set_secret.sh&lt;/code&gt; - sets a secret in the given repo and environment from &lt;code&gt;key=value&lt;/code&gt; or shell export format, as args or via stdin (eg. piped from &lt;code&gt;aws_csv_creds.sh&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_actions_repo_secrets_overriding_org.sh&lt;/code&gt; - finds any secrets for a repo that are overriding organization level secrets. Useful to combine with &lt;code&gt;github_foreach_repo.sh&lt;/code&gt; for auditing&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_actions_repo_restrict_actions.sh&lt;/code&gt; - restricts GitHub Actions in the given repo to only running actions from GitHub and verfied partner companies (.eg AWS, Docker)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_actions_repo_actions_allow.sh&lt;/code&gt; - allows select 3rd party GitHub Actions in the given repo&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_actions_runner.sh&lt;/code&gt; - generates a &lt;a href=&#34;https://github.com/features/actions&#34;&gt;GitHub Actions&lt;/a&gt; self-hosted runner token for a given Repo or Organization via the GitHub API and then runs a dockerized GitHub Actions runner with the appropriate configuration&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_actions_runner_local.sh&lt;/code&gt; - downloads, configures and runs a local GitHub Actions Runner for Linux or Mac&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_actions_runner_token.sh&lt;/code&gt; - generates a GitHub Actions runner token to register a new self-hosted runner&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_actions_runners.sh&lt;/code&gt; - lists GitHub Actions self-hosted runners for a given Repo or Organization&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_actions_delete_offline_runners.sh&lt;/code&gt; - deletes offline GitHub Actions self-hosted runners. Useful to clean up short-lived runners eg. Docker, Kubernetes&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_actions_workflows.sh&lt;/code&gt; - lists GitHub Actions workflows for a given repo (or auto-infers local repository)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_actions_workflow_runs.sh&lt;/code&gt; - lists GitHub Actions workflow runs for a given workflow id or name&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_actions_workflows_status.sh&lt;/code&gt; - lists all GitHub Actions workflows and their statuses for a given repo&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_actions_workflows_state.sh&lt;/code&gt; - lists GitHub Actions workflows enabled/disabled states (GitHub now disables workflows after 6 months without a commit)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_actions_workflow_enable.sh&lt;/code&gt; - enables a given GitHub Actions workflow&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_actions_workflows_enable_all.sh&lt;/code&gt; - enables all GitHub Actions workflows in a given repo. Useful to undo GitHub disabling all workflows in a repo after 6 months without a commit&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_actions_workflows_trigger_all.sh&lt;/code&gt; - triggers all workflows for the given repo&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_actions_workflows_cancel_all_runs.sh&lt;/code&gt; - cancels all workflow runs for the given repo&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_ssh_get_user_public_keys.sh&lt;/code&gt; - fetches a given GitHub user&#39;s public SSH keys via the API for piping to &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; or adjacent tools&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_ssh_get_public_keys.sh&lt;/code&gt; - fetches the currently authenticated GitHub user&#39;s public SSH keys via the API, similar to above but authenticated to get identifying key comments&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_ssh_add_public_keys.sh&lt;/code&gt; - uploads SSH keys from local files or standard input to the currently authenticated GitHub account. Specify pubkey files (default: &lt;code&gt;~/.ssh/id_rsa.pub&lt;/code&gt;) or read from standard input for piping from adjacent tools&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_ssh_delete_public_keys.sh&lt;/code&gt; - deletes given SSH keys from the currently authenticated GitHub account by key id or title regex match&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_gpg_get_user_public_keys.sh&lt;/code&gt; - fetches a given GitHub user&#39;s public GPG keys via the API&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_generate_status_page.sh&lt;/code&gt; - generates a &lt;a href=&#34;https://harisekhon.github.io/CI-CD/&#34;&gt;STATUS.md&lt;/a&gt; page by merging all the README.md headers for all of a user&#39;s non-forked GitHub repos or a given list of any repos etc.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_ip_ranges.sh&lt;/code&gt; - returns GitHub&#39;s IP ranges, either all by default or for a select given service such as hooks or actions&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_sync_repo_descriptions.sh&lt;/code&gt; - syncs GitHub repo descriptions to GitLab &amp;amp; BitBucket repos&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_repo_description.sh&lt;/code&gt; - fetches the given repo&#39;s description (used by &lt;code&gt;github_sync_repo_descriptions.sh&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_repo_latest_release.sh&lt;/code&gt; - returns the latest release name for a given GitHub repo via the GitHub API&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_repo_stars.sh&lt;/code&gt; - fetches the stars, forks and watcher counts for a given repo&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_repo_teams.sh&lt;/code&gt; - fetches the GitHub Enterprise teams and their role permisions for a given repo. Combine with &lt;code&gt;github_foreach_repo.sh&lt;/code&gt; to audit your all your personal or GitHub organization&#39;s repos&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_repo_collaborators.sh&lt;/code&gt; - fetches a repo&#39;s granted users and outside invited collaborators as well as their role permisions for a given repo. Combine with &lt;code&gt;github_foreach_repo.sh&lt;/code&gt; to audit your all your personal or GitHub organization&#39;s repos&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_repo_protect_branches.sh&lt;/code&gt; - enables branch protections on the given repo. Can specify one or more branches to protect, otherwise finds and applies to any of &lt;code&gt;master&lt;/code&gt;, &lt;code&gt;main&lt;/code&gt;, &lt;code&gt;develop&lt;/code&gt;, &lt;code&gt;dev&lt;/code&gt;, &lt;code&gt;staging&lt;/code&gt;, &lt;code&gt;production&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_repo_fork_update.sh&lt;/code&gt; - updates a forked repo by creating pull requests for full audit tracking and auto-merges PRs for non-production branches&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_repos_public.sh&lt;/code&gt; - lists public repos for a user or organization. Useful to periodically scan and account for any public repos&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_repos_disable_wiki.sh&lt;/code&gt; - disables the Wiki on one or more given repos to prevent documentation fragmentation and make people use the centralized documentation tool eg. Confluence or Slite&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_repos_with_few_users.sh&lt;/code&gt; - finds repos with few or no users (default: 1), which in Enterprises is a sign that a user has created a repo without assigning team privileges&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_repos_with_few_teams.sh&lt;/code&gt; - finds repos with few or no teams (default: 0), which in Enterprises is a sign that a user has created a repo without assigning team privileges&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_repos_without_branch_protections.sh&lt;/code&gt; - finds repos without any branch protection rules (use &lt;code&gt;github_repo_protect_branches.sh&lt;/code&gt; on such repos)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_repos_not_in_terraform.sh&lt;/code&gt; - finds all non-fork repos for current or given user/organization which are not found in &lt;code&gt;$PWD/*.tf&lt;/code&gt; Terraform code&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_teams_not_in_terraform.sh&lt;/code&gt; - finds all teams for given organization which are not found in &lt;code&gt;$PWD/*.tf&lt;/code&gt; Terraform code&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_repos_sync_status.sh&lt;/code&gt; - determines whether each GitHub repo&#39;s mirrors on GitLab / BitBucket / Azure DevOps are up to date with the latest commits, by querying all 3 APIs and comparing master branch hashrefs&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;github_teams_not_idp_synced.sh&lt;/code&gt; - finds GitHub teams that aren&#39;t sync&#39;d from an IdP like Azure AD. These should usually be migrated or removed&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gitlab_*.sh&lt;/code&gt; - &lt;a href=&#34;https://gitlab.com/&#34;&gt;GitLab&lt;/a&gt; API scripts: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;gitlab_api.sh&lt;/code&gt; - queries the GitLab &lt;a href=&#34;https://docs.gitlab.com/ee/api/api_resources.html&#34;&gt;API&lt;/a&gt;. Can infer GitLab user, repo and authentication token from local checkout or environment (&lt;code&gt;$GITLAB_USER&lt;/code&gt;, &lt;code&gt;$GITLAB_TOKEN&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gitlab_foreach_repo.sh&lt;/code&gt; - executes a templated command for each GitLab project/repo, replacing the &lt;code&gt;{user}&lt;/code&gt; and &lt;code&gt;{project}&lt;/code&gt; in each iteration&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gitlab_project_set_description.sh&lt;/code&gt; - sets the description for one or more projects using the GitLab API&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gitlab_project_set_env_vars.sh&lt;/code&gt; - adds / updates GitLab project-level environment variable(s) via the API from &lt;code&gt;key=value&lt;/code&gt; or shell export format, as args or via stdin (eg. piped from &lt;code&gt;aws_csv_creds.sh&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gitlab_group_set_env_vars.sh&lt;/code&gt; - adds / updates GitLab group-level environment variable(s) via the API from &lt;code&gt;key=value&lt;/code&gt; or shell export format, as args or via stdin (eg. piped from &lt;code&gt;aws_csv_creds.sh&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gitlab_project_create_import.sh&lt;/code&gt; - creates a GitLab repo as an import from a given URL, and mirrors if on GitLab Premium (can only manually configure for public repos on free tier, API doesn&#39;t support configuring even public repos on free)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gitlab_project_protect_branches.sh&lt;/code&gt; - enables branch protections on the given project. Can specify one or more branches to protect, otherwise finds and applies to any of &lt;code&gt;master&lt;/code&gt;, &lt;code&gt;main&lt;/code&gt;, &lt;code&gt;develop&lt;/code&gt;, &lt;code&gt;dev&lt;/code&gt;, &lt;code&gt;staging&lt;/code&gt;, &lt;code&gt;production&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gitlab_project_mirrors.sh&lt;/code&gt; - lists each GitLab repo and whether it is a mirror or not&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gitlab_pull_mirror.sh&lt;/code&gt; - trigger a GitLab pull mirroring for a given project&#39;s repo, or auto-infers project name from the local git repo&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gitlab_ssh_get_user_public_keys.sh&lt;/code&gt; - fetches a given GitLab user&#39;s public SSH keys via the API, with identifying comments, for piping to &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; or adjacent tools&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gitlab_ssh_get_public_keys.sh&lt;/code&gt; - fetches the currently authenticated GitLab user&#39;s public SSH keys via the API&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gitlab_ssh_add_public_keys.sh&lt;/code&gt; - uploads SSH keys from local files or standard input to the currently authenticated GitLab account. Specify pubkey files (default: &lt;code&gt;~/.ssh/id_rsa.pub&lt;/code&gt;) or read from standard input for piping from adjacent tools&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gitlab_ssh_delete_public_keys.sh&lt;/code&gt; - deletes given SSH keys from the currently authenticated GitLab account by key id or title regex match&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gitlab_validate_ci_yaml.sh&lt;/code&gt; - validates a &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; file via the GitLab API&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bitbucket_*.sh&lt;/code&gt; - &lt;a href=&#34;https://bitbucket.org/&#34;&gt;BitBucket&lt;/a&gt; API scripts: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;bitbucket_api.sh&lt;/code&gt; - queries the BitBucket &lt;a href=&#34;https://developer.atlassian.com/bitbucket/api/2/reference/resource/&#34;&gt;API&lt;/a&gt;. Can infer BitBucket user, repo and authentication token from local checkout or environment (&lt;code&gt;$BITBUCKET_USER&lt;/code&gt;, &lt;code&gt;$BITBUCKET_TOKEN&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;bitbucket_foreach_repo.sh&lt;/code&gt; - executes a templated command for each BitBucket repo, replacing the &lt;code&gt;{user}&lt;/code&gt; and &lt;code&gt;{repo}&lt;/code&gt; in each iteration&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;bitbucket_workspace_set_env_vars.sh&lt;/code&gt; - adds / updates Bitbucket workspace-level environment variable(s) via the API from &lt;code&gt;key=value&lt;/code&gt; or shell export format, as args or via stdin (eg. piped from &lt;code&gt;aws_csv_creds.sh&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;bitbucket_repo_set_env_vars.sh&lt;/code&gt; - adds / updates Bitbucket repo-level environment variable(s) via the API from &lt;code&gt;key=value&lt;/code&gt; or shell export format, as args or via stdin (eg. piped from &lt;code&gt;aws_csv_creds.sh&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;bitbucket_repo_set_description.sh&lt;/code&gt; - sets the description for one or more repos using the BitBucket API&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;bitbucket_ssh_get_public_keys.sh&lt;/code&gt; - fetches the currently authenticated BitBucket user&#39;s public SSH keys via the API for piping to &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; or adjacent tools&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;bitbucket_ssh_add_public_keys.sh&lt;/code&gt; - uploads SSH keys from local files or standard input to the currently authenticated BitBucket account. Specify pubkey files (default: &lt;code&gt;~/.ssh/id_rsa.pub&lt;/code&gt;) or read from standard input for piping from adjacent tools&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;bitbucket_ssh_delete_public_keys.sh&lt;/code&gt; - uploads SSH keys from local files or standard input to the currently authenticated BitBucket account. Specify pubkey files (default: &lt;code&gt;~/.ssh/id_rsa.pub&lt;/code&gt;) or read from standard input for piping from adjacent tools&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;CI/CD - Continuous Integration / Continuous Deployment&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;appveyor_api.sh&lt;/code&gt; - queries &lt;a href=&#34;https://www.appveyor.com/&#34;&gt;AppVeyor&lt;/a&gt;&#39;s API with authentication&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;azure_devops_*.sh&lt;/code&gt; - &lt;a href=&#34;https://dev.azure.com/&#34;&gt;Azure DevOps&lt;/a&gt; scripts: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;azure_devops_api.sh&lt;/code&gt; - queries Azure DevOps&#39;s API with authentication&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;azure_devops_foreach_repo.sh&lt;/code&gt; - executes a templated command for each Azure DevOps repo, replacing &lt;code&gt;{user}&lt;/code&gt;, &lt;code&gt;{org}&lt;/code&gt;, &lt;code&gt;{project}&lt;/code&gt; and &lt;code&gt;{repo}&lt;/code&gt; in each iteration&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;azure_devops_to_github_migration.sh&lt;/code&gt; - migrates one or all Azure DevOps git repos to GitHub, including all branches and sets the default branch to match via the APIs to maintain the same checkout behaviour&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;azure_devops_disable_repos.sh&lt;/code&gt; - disables one or more given Azure DevOps repos (to prevent further pushes to them after migration to GitHub)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;circleci_*.sh&lt;/code&gt; - &lt;a href=&#34;https://circleci.com/&#34;&gt;CircleCI&lt;/a&gt; scripts: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;circleci_api.sh&lt;/code&gt; - queries CircleCI&#39;s API with authentication&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;circleci_project_set_env_vars.sh&lt;/code&gt; - adds / updates CircleCI project-level environment variable(s) via the API from &lt;code&gt;key=value&lt;/code&gt; or shell export format, as args or via stdin (eg. piped from &lt;code&gt;aws_csv_creds.sh&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;circleci_context_set_env_vars.sh&lt;/code&gt; - adds / updates CircleCI context-level environment variable(s) via the API from &lt;code&gt;key=value&lt;/code&gt; or shell export format, as args or via stdin (eg. piped from &lt;code&gt;aws_csv_creds.sh&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;circleci_local_execute.sh&lt;/code&gt; - installs CircleCI CLI and executes &lt;code&gt;.circleci/config.yml&lt;/code&gt; locally&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;circleci_public_ips.sh&lt;/code&gt; - lists &lt;a href=&#34;https://circleci.com&#34;&gt;CircleCI&lt;/a&gt; public IP addresses via dnsjson.com&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;codeship_api.sh&lt;/code&gt; - queries &lt;a href=&#34;https://codeship.com/&#34;&gt;CodeShip&lt;/a&gt;&#39;s API with authentication&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;drone_api.sh&lt;/code&gt; - queries &lt;a href=&#34;https://drone.io/&#34;&gt;Drone.io&lt;/a&gt;&#39;s API with authentication&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;shippable_api.sh&lt;/code&gt; - queries &lt;a href=&#34;https://www.shippable.com/&#34;&gt;Shippable&lt;/a&gt;&#39;s API with authentication&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;wercker_app_api.sh&lt;/code&gt; - queries &lt;a href=&#34;https://app.wercker.com/&#34;&gt;Wercker&lt;/a&gt;&#39;s Applications API with authentication&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gocd_api.sh&lt;/code&gt; - queries &lt;a href=&#34;https://www.gocd.org/&#34;&gt;GoCD&lt;/a&gt;&#39;s API&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gocd.sh&lt;/code&gt; - one-touch &lt;a href=&#34;https://www.gocd.org/&#34;&gt;GoCD CI&lt;/a&gt;, launches in docker, (re)creates config repo (&lt;code&gt;$PWD/setup/gocd_config_repo.json&lt;/code&gt;) from which to source pipeline(s) (&lt;code&gt;.gocd.yml&lt;/code&gt;), detects and enables agent(s) to start building. Call from any repo top level directory with a &lt;code&gt;.gocd.yml&lt;/code&gt; config (all mine have it), mimicking structure of fully managed CI systems&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;concourse.sh&lt;/code&gt; - one-touch &lt;a href=&#34;https://concourse-ci.org/&#34;&gt;Concourse CI&lt;/a&gt;, launches in docker, configures pipeline from &lt;code&gt;$PWD/.concourse.yml&lt;/code&gt;, triggers build, tails results in terminal, prints recent build statuses at end. Call from any repo top level directory with a &lt;code&gt;.concourse.yml&lt;/code&gt; config (all mine have it), mimicking structure of fully managed CI systems &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;fly.sh&lt;/code&gt; - shortens &lt;code&gt;fly&lt;/code&gt; command to not have to specify target all the time&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;jenkins_*.sh&lt;/code&gt; - &lt;a href=&#34;https://jenkins.io/&#34;&gt;Jenkins CI&lt;/a&gt; scripts: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;jenkins.sh&lt;/code&gt; - one-touch &lt;a href=&#34;https://jenkins.io/&#34;&gt;Jenkins CI&lt;/a&gt; - launches docker container, installs plugins, validates &lt;code&gt;Jenkinsfile&lt;/code&gt;, configures jobs from &lt;code&gt;$PWD/setup/jenkins-job.xml&lt;/code&gt; and sets Pipeline to git remote origin&#39;s &lt;code&gt;Jenkinsfile&lt;/code&gt;, triggers build, tails results in terminal. Call from any repo top level directory with a &lt;code&gt;Jenkinsfile&lt;/code&gt; pipeline and &lt;code&gt;setup/jenkins-job.xml&lt;/code&gt; (all mine have it)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;jenkins_cli.sh&lt;/code&gt; - shortens &lt;code&gt;jenkins-cli.jar&lt;/code&gt; command by auto-inferring basic configuations, auto-downloading the CLI if absent, inferrings a bunch of Jenkins related variables like &lt;code&gt;$JENKINS_URL&lt;/code&gt; and authentication using &lt;code&gt;$JENKINS_USER&lt;/code&gt;/&lt;code&gt;$JENKINS_PASSWORD&lt;/code&gt;, or finds admin password from inside local docker container. Used heavily by &lt;code&gt;jenkins.sh&lt;/code&gt; one-shot setup &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;jenkins_password.sh&lt;/code&gt; - gets Jenkins admin password from local docker container. Used by &lt;code&gt;jenkins_cli.sh&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;check_jenkinsfiles.sh&lt;/code&gt; - validates all &lt;code&gt;*Jenkinsfile*&lt;/code&gt; files in the given directory trees using the online Jenkins validator&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;teamcity_*.sh&lt;/code&gt; - &lt;a href=&#34;https://www.jetbrains.com/teamcity/&#34;&gt;TeamCity CI&lt;/a&gt; scripts: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;teamcity.sh&lt;/code&gt; - boots TeamCity CI cluster in docker, just click proceed and accept the EULA and it does the rest, it even creates an admin user and an API token for you&lt;/li&gt; &#xA;   &lt;li&gt;See Also: &lt;a href=&#34;https://github.com/HariSekhon/TeamCity-CI&#34;&gt;TeamCity CI&lt;/a&gt; config repo&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;teamcity_api.sh&lt;/code&gt; - queries TeamCity&#39;s API, auto-handling authentication and other quirks of the API&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;teamcity_create_project.sh&lt;/code&gt; - creates a TeamCity project using the API&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;teamcity_create_github_oauth_connection.sh&lt;/code&gt; - creates a TeamCity GitHub OAuth VCS connection in the Root project, useful for bootstrapping projects from VCS configs&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;teamcity_create_vcs_root.sh&lt;/code&gt; - creates a TeamCity VCS root from a save configuration (XML or JSON), as downloaded by &lt;code&gt;teamcity_export_vcs_roots.sh&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;teamcity_upload_ssh_key.sh&lt;/code&gt; - uploads an SSH private key to a TeamCity project (for use in VCS root connections)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;teamcity_agents.sh&lt;/code&gt; - lists TeamCity agents, their connected state, authorized state, whether enabled and up to date&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;teamcity_builds.sh&lt;/code&gt; - lists the last 100 TeamCity builds along with the their state (eg. &lt;code&gt;finished&lt;/code&gt;) and status (eg. &lt;code&gt;SUCCESS&lt;/code&gt;/&lt;code&gt;FAILURE&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;teamcity_buildtypes.sh&lt;/code&gt; - lists TeamCity buildTypes (pipelines) along with the their project and IDs&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;teamcity_buildtype_create.sh&lt;/code&gt; - creates a TeamCity buildType from a local JSON configuration (see &lt;code&gt;teamcity_buildtypes_download.sh&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;teamcity_buildtype_set_description_from_github.sh&lt;/code&gt; - sync&#39;s a TeamCity buildType&#39;s description from its Github repo description&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;teamcity_buildtypes_set_description_from_github.sh&lt;/code&gt; - sync&#39;s all TeamCity buildType descriptions from their GitHub repos where available&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;teamcity_export.sh&lt;/code&gt; - downloads TeamCity configs to local JSON files in per-project directories mimicking native TeamCity directory structure and file naming&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;teamcity_export_project_config.sh&lt;/code&gt; - downloads TeamCity project config to local JSON files&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;teamcity_export_buildtypes.sh&lt;/code&gt; - downloads TeamCity buildType config to local JSON files&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;teamcity_export_vcs_roots.sh&lt;/code&gt; - downloads TeamCity VCS root config to local JSON files&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;teamcity_projects.sh&lt;/code&gt; - lists TeamCity project IDs and Names&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;teamcity_project_set_versioned_settings.sh&lt;/code&gt; - configures a project to track all changes to a VCS (eg. GitHub)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;teamcity_project_vcs_versioning.sh&lt;/code&gt; - quickly toggle VCS versioning on/off for a given TeamCity project (useful for testing without auto-committing)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;teamcity_vcs_roots.sh&lt;/code&gt; - lists TeamCity VCS root IDs and Names&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;travis_*.sh&lt;/code&gt; - &lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt; API scripts (one of my all-time favourite CI systems): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;travis_api.sh&lt;/code&gt; - queries the Travis CI API with authentication using &lt;code&gt;$TRAVIS_TOKEN&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;travis_repos.sh&lt;/code&gt; - lists Travis CI repos&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;travis_foreach_repo.sh&lt;/code&gt; - executes a templated command against all Travis CI repos&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;travis_repo_build.sh&lt;/code&gt; - triggers a build for the given repo&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;travis_repo_caches.sh&lt;/code&gt; - lists caches for a given repo&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;travis_repo_crons.sh&lt;/code&gt; - lists crons for a given repo&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;travis_repo_env_vars.sh&lt;/code&gt; - lists environment variables for a given repo&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;travis_repo_settings.sh&lt;/code&gt; - lists settings for a given repo&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;travis_repo_create_cron.sh&lt;/code&gt; - creates a cron for a given repo and branch&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;travis_repo_delete_crons.sh&lt;/code&gt; - deletes all crons for a given repo&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;travis_repo_delete_caches.sh&lt;/code&gt; - deletes all caches for a given repo (sometimes clears build problems)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;travis_delete_cron.sh&lt;/code&gt; - deletes a Travis CI cron by ID&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;travis_repos_settings.sh&lt;/code&gt; - lists settings for all repos&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;travis_repos_caches.sh&lt;/code&gt; - lists caches for all repos&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;travis_repos_crons.sh&lt;/code&gt; - lists crons for all repos&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;travis_repos_create_cron.sh&lt;/code&gt; - creates a cron for all repos&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;travis_repos_delete_crons.sh&lt;/code&gt; - deletes all crons for all repos&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;travis_repos_delete_caches.sh&lt;/code&gt; - deletes all caches for all repos&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;travis_lint.sh&lt;/code&gt; - lints a given &lt;code&gt;.travis.yml&lt;/code&gt; using the API&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;buildkite_*.sh&lt;/code&gt; - &lt;a href=&#34;https://buildkite.com/&#34;&gt;BuildKite&lt;/a&gt; API scripts: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;buildkite_api.sh&lt;/code&gt; - queries the BuildKite API, handling authentication using &lt;code&gt;$BUILDKITE_TOKEN&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;buildkite_pipelines.sh&lt;/code&gt; - list buildkite pipelines for your &lt;code&gt;$BUILDKITE_ORGANIZATION&lt;/code&gt; / &lt;code&gt;$BUILDKITE_USER&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;buildkite_foreach_pipeline.sh&lt;/code&gt; - executes a templated command for each Buildkite pipeline, replacing the &lt;code&gt;{user}&lt;/code&gt; and &lt;code&gt;{pipeline}&lt;/code&gt; in each iteration&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;buildkite_agent.sh&lt;/code&gt; - runs a buildkite agent locally on Linux or Mac, or in Docker with choice of Linux distros&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;buildkite_agents.sh&lt;/code&gt; - lists the Buildkite agents connected along with their hostname, IP, started dated and agent details&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;buildkite_pipelines.sh&lt;/code&gt; - lists Buildkite pipelines&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;buildkite_create_pipeline.sh&lt;/code&gt; - create a Buildkite pipeline from a JSON configuration (like from &lt;code&gt;buildkite_get_pipeline.sh&lt;/code&gt; or &lt;code&gt;buildkite_save_pipelines.sh&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;buildkite_get_pipeline.sh&lt;/code&gt; - gets details for a specific Buildkite pipeline in JSON format&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;buildkite_update_pipeline.sh&lt;/code&gt; - updates a BuildKite pipeline from a configuration provided via stdin or from a file saved via &lt;code&gt;buildkite_get_pipeline.sh&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;buildkite_patch_pipeline.sh&lt;/code&gt; - updates a BuildKite pipeline from a partial configuration provided as an arg, via stdin, or from a file saved via &lt;code&gt;buildkite_get_pipeline.sh&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;buildkite_pipeline_skip_settings.sh&lt;/code&gt; - lists the skip intermediate build settings for one or more given BuildKite pipelines&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;buildkite_pipeline_set_skip_settings.sh&lt;/code&gt; - configures given or all BuildKite pipelines to skip intermediate builds and cancel running builds in favour of latest build&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;buildkite_cancel_scheduled_builds.sh&lt;/code&gt; - cancels BuildKite scheduled builds (to clear a backlog due to offline agents and just focus on new builds)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;buildkite_cancel_running_builds.sh&lt;/code&gt; - cancels BuildKite running builds (to clear them and restart new later eg. after agent / environment change / fix)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;buildkite_pipeline_disable_forked_pull_requests.sh&lt;/code&gt; - disables forked pull request builds on a BuildKite pipeline to protect your build environment from arbitrary code execution security vulnerabilities&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;buildkite_pipelines_vulnerable_forked_pull_requests.sh&lt;/code&gt; - prints the status of each pipeline, should all return false, otherwise run the above script to close the vulnerability&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;buildkite_rebuild_cancelled_builds.sh&lt;/code&gt; - triggers rebuilds of last N cancelled builds in current pipeline&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;buildkite_rebuild_failed_builds.sh&lt;/code&gt; - triggers rebuilds of last N failed builds in current pipeline (eg. after agent restart / environment change / fix)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;buildkite_rebuild_all_pipelines_last_cancelled.sh&lt;/code&gt; - triggers rebuilds of the last cancelled build in each pipeline in the organization&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;buildkite_rebuild_all_pipelines_last_failed.sh&lt;/code&gt; - triggers rebuilds of the last failed build in each pipeline in the organization&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;buildkite_retry_jobs_dead_agents.sh&lt;/code&gt; - triggers job retries where jobs failed due to killed agents, continuing builds from that point and replacing their false negative failed status with the real final status, slightly better than rebuilding entire jobs which happen under a new build&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;buildkite_recreate_pipeline.sh&lt;/code&gt; - recreates a pipeline to wipe out all stats (see url and badge caveats in &lt;code&gt;--help&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;buildkite_running_builds.sh&lt;/code&gt; - lists running builds and the agent they&#39;re running on&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;buildkite_save_pipelines.sh&lt;/code&gt; - saves all BuildKite pipelines in your &lt;code&gt;$BUILDKITE_ORGANIZATION&lt;/code&gt; to local JSON files in &lt;code&gt;$PWD/.buildkite-pipelines/&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;buildkite_set_pipeline_description.sh&lt;/code&gt; - sets the description of one or more pipelines using the BuildKite API&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;buildkite_set_pipeline_description_from_github.sh&lt;/code&gt; - sets a Buildkite pipeline description to match its source GitHub repo&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;buildkite_sync_pipeline_descriptions_from_github.sh&lt;/code&gt; - for all BuildKite pipelines sets each description to match its source GitHub repo&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;buildkite_trigger.sh&lt;/code&gt; - triggers BuildKite build job for a given pipeline&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;buildkite_trigger_all.sh&lt;/code&gt; - same as above but for all pipelines&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;terraform_cloud_*.sh&lt;/code&gt; - &lt;a href=&#34;https://www.terraform.io/cloud&#34;&gt;Terraform Cloud&lt;/a&gt; API scripts: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;terraform_cloud_api.sh&lt;/code&gt; - queries the Cloudflare API, handling authentication using &lt;code&gt;$TERRAFORM_TOKEN&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;terraform_cloud_ip_ranges.sh&lt;/code&gt; - returns the list of IP ranges for Terraform Cloud&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;terraform_cloud_organizations.sh&lt;/code&gt; - lists Terraform Cloud organizations&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;terraform_cloud_workspaces.sh&lt;/code&gt; - lists Terraform Cloud workspaces&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;terraform_cloud_workspace_vars.sh&lt;/code&gt; - lists Terraform Cloud workspace variables&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;terraform_cloud_workspace_set_vars.sh&lt;/code&gt; - adds / updates Terraform workspace-level sensitive environment/terraform variable(s) via the API from &lt;code&gt;key=value&lt;/code&gt; or shell export format, as args or via stdin (eg. piped from &lt;code&gt;aws_csv_creds.sh&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;terraform_cloud_workspace_delete_vars.sh&lt;/code&gt; - deletes one or more Terraform workspace-level variables&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;terraform_cloud_varsets.sh&lt;/code&gt; - lists Terraform Cloud variable sets&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;terraform_cloud_varset_vars.sh&lt;/code&gt; - lists Terraform Cloud variables in on or all variables sets for the given organization&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;terraform_cloud_varset_set_vars.sh&lt;/code&gt; - adds / updates Terraform sensitive environment/terraform variable(s) in a given variable set via the API from &lt;code&gt;key=value&lt;/code&gt; or shell export format, as args or via stdin (eg. piped from &lt;code&gt;aws_csv_creds.sh&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;terraform_cloud_varset_delete_vars.sh&lt;/code&gt; - deletes one or more Terraform variables in a given variable set&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;terraform_*.sh&lt;/code&gt; - &lt;a href=&#34;https://www.terraform.io/&#34;&gt;Terraform&lt;/a&gt; scripts: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;terraform_import.sh&lt;/code&gt; - finds given resource type in &lt;code&gt;./*.tf&lt;/code&gt; code or Terraform plan output that are not in Terraform state and imports them&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;terraform_import_github_repos.sh&lt;/code&gt; - finds all &lt;code&gt;github_repository&lt;/code&gt; in &lt;code&gt;./*.tf&lt;/code&gt; code or Terraform plan output that are not in Terraform state and imports them. See also &lt;code&gt;github_repos_not_in_terraform.sh&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;terraform_import_github_team.sh&lt;/code&gt; - imports a given GitHub team into a given Terraform state resource, by first querying the GitHub API for the team ID needed to import into Terraform&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;terraform_import_github_teams.sh&lt;/code&gt; - finds all &lt;code&gt;github_team&lt;/code&gt; in &lt;code&gt;./*.tf&lt;/code&gt; code or Terraform plan output that are not in Terraform state, then queries the GitHub API for their IDs and imports them. See also &lt;code&gt;github_teams_not_in_terraform.sh&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;terraform_import_github_team_repos.sh&lt;/code&gt; - finds all &lt;code&gt;github_team_repository&lt;/code&gt; in Terraform plan that would be added, then queries the GitHub API for the repos and team IDs and if they both exist then imports them to Terraform state&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;terraform_resources.sh&lt;/code&gt; - external program to get all resource ids and attribute for a given resource type to work around Terraform splat expression limitation (&lt;a href=&#34;https://github.com/hashicorp/terraform/issues/19931&#34;&gt;#19931&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;checkov_resource_*.sh&lt;/code&gt; - &lt;a href=&#34;https://www.checkov.io/&#34;&gt;Checkov&lt;/a&gt; resource counts - useful to estimate &lt;a href=&#34;https://www.bridgecrew.cloud/&#34;&gt;Bridgecrew Cloud&lt;/a&gt; costs which are charged per resource: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;checkov_resource_count.sh&lt;/code&gt; - counts the number of resources Checkov is scanning in the current or given directory&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;checkov_resource_count_all.sh&lt;/code&gt; - counts the total number of resources Checkov is scanning across all given repo checkouts&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Internet Services&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;atlassian_ip_ranges.sh&lt;/code&gt; - lists &lt;a href=&#34;https://www.atlassian.com/&#34;&gt;Atlassian&lt;/a&gt;&#39;s IPv4 and/or IPv6 cidr ranges via its API&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;jira_api.sh&lt;/code&gt; - queries &lt;a href=&#34;https://www.atlassian.com/software/jira&#34;&gt;Jira&lt;/a&gt; API with authentication&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;circleci_public_ips.sh&lt;/code&gt; - lists &lt;a href=&#34;https://circleci.com&#34;&gt;CircleCI&lt;/a&gt; public IP addresses via dnsjson.com&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cloudflare_*.sh&lt;/code&gt; - &lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;Cloudflare&lt;/a&gt; API queries and reports: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;cloudflare_api.sh&lt;/code&gt; - queries the Cloudflare API, handling authentication using &lt;code&gt;$CLOUDFLARE_TOKEN&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cloudflare_ip_ranges.sh&lt;/code&gt; - lists Cloudflare&#39;s IPv4 and/or IPv6 cidr ranges via its API&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cloudflare_custom_certificates.sh&lt;/code&gt; - lists any custom SSL certificates in a given Cloudflare zone along with their status and expiry date&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cloudflare_dns_records.sh&lt;/code&gt; - lists any Cloudflare DNS records for a zone, including the type and ttl&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cloudflare_dns_records_all_zones.sh&lt;/code&gt; - same as above but for all zones&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cloudflare_dnssec.sh&lt;/code&gt; - lists the Cloudflare DNSSec status for all zones&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cloudflare_firewall_rules.sh&lt;/code&gt; - lists Cloudflare Firewall rules, optionally with filter expression&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cloudflare_firewall_access_rules.sh&lt;/code&gt; - lists Cloudflare Firewall Access rules, optionally with filter expression&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cloudflare_foreach_account.sh&lt;/code&gt; - executes a templated command for each Cloudflare account, replacing the &lt;code&gt;{account_id}&lt;/code&gt; and &lt;code&gt;{account_name}&lt;/code&gt; in each iteration (useful for chaining with &lt;code&gt;cloudflare_api.sh&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cloudflare_foreach_zone.sh&lt;/code&gt; - executes a templated command for each Cloudflare zone, replacing the &lt;code&gt;{zone_id}&lt;/code&gt; and &lt;code&gt;{zone_name}&lt;/code&gt; in each iteration (useful for chaining with &lt;code&gt;cloudflare_api.sh&lt;/code&gt;, used by adjacent &lt;code&gt;cloudflare_*_all_zones.sh&lt;/code&gt; scripts)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cloudflare_purge_cache.sh&lt;/code&gt; - purges the entire Cloudflare cache&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cloudflare_ssl_verified.sh&lt;/code&gt; - gets the Cloudflare zone SSL verification status for a given zone&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cloudflare_ssl_verified_all_zones.sh&lt;/code&gt; - same as above for all zones&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cloudflare_zones.sh&lt;/code&gt; - lists Cloudflare zone names and IDs (needed for writing Terraform Cloudflare code)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pingdom_*.sh&lt;/code&gt; - &lt;a href=&#34;https://www.pingdom.com/&#34;&gt;Pingdom&lt;/a&gt; API queries and reports for status, latency, average response times, latency averages by hour, SMS credits, outages periods and durations over the last year etc. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;pingdom_api.sh&lt;/code&gt; - Solarwinds &lt;a href=&#34;https://www.pingdom.com/&#34;&gt;Pingdom&lt;/a&gt; &lt;a href=&#34;https://docs.pingdom.com/api/&#34;&gt;API&lt;/a&gt; query script&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pingdom_foreach_check.sh&lt;/code&gt; - executes a templated command against each &lt;a href=&#34;https://www.pingdom.com/&#34;&gt;Pingdom&lt;/a&gt; check, replacing the &lt;code&gt;{check_id}&lt;/code&gt; and &lt;code&gt;{check_name}&lt;/code&gt; in each iteration&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pingdom_checks.sh&lt;/code&gt; - show all Pingdom checks, status and latencies&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pingdom_checks_outages.sh&lt;/code&gt; / &lt;code&gt;pingdom_checks_outages.sh&lt;/code&gt; - show one or all Pingdom checks outage histories for the last year&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pingdom_checks_average_response_times.sh&lt;/code&gt; - shows the average response times for all Pingdom checks for the last week&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pingdom_check_latency_by_hour.sh&lt;/code&gt; / &lt;code&gt;pingdom_checks_latency_by_hour.sh&lt;/code&gt; - shows the average latency for one or all Pingdom checks broken down by hour of the day, over the last week&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pingdom_sms_credits.sh&lt;/code&gt; - gets the remaining number of Pingdom SMS credits&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;datadog_api.sh&lt;/code&gt; - queries the &lt;a href=&#34;https://www.datadoghq.com/&#34;&gt;DataDog&lt;/a&gt; API with authentication&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;terraform_cloud_ip_ranges.sh&lt;/code&gt; - returns the list of IP ranges for &lt;a href=&#34;https://www.terraform.io/cloud&#34;&gt;Terraform Cloud&lt;/a&gt; via the API, or optionally one or more of the ranges used by different functions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Perl&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;perl_cpanm_install.sh&lt;/code&gt; - bulk installs CPAN modules from mix of arguments / file lists / stdin, accounting for User vs System installs, root vs user sudo, &lt;a href=&#34;https://perlbrew.pl/&#34;&gt;Perlbrew&lt;/a&gt; / Google Cloud Shell environments, Mac vs Linux library paths, ignore failure option, auto finds and reads build failure log for quicker debugging showing root cause error in CI builds logs etc&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;perl_cpanm_install_if_absent.sh&lt;/code&gt; - installs CPAN modules not already in Perl libary path (OS or CPAN installed) for faster installations only where OS packages are already providing some of the modules, reducing time and failure rates in CI builds&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;perlpath.sh&lt;/code&gt; - prints all Perl libary search paths, one per line&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;perl_find_library_path.sh&lt;/code&gt; - finds directory where a CPAN module is installed - without args finds the Perl library base&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;perl_find_library_executable.sh&lt;/code&gt; - finds directory where a CPAN module&#39;s CLI program is installed (system vs user, useful when it gets installed to a place that isn&#39;t in your &lt;code&gt;$PATH&lt;/code&gt;, where &lt;code&gt;which&lt;/code&gt; won&#39;t help)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;perl_find_unused_cpan_modules.sh&lt;/code&gt; - finds CPAN modules that aren&#39;t used by any programs in the current directory tree&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;perl_find_duplicate_cpan_requirements.sh&lt;/code&gt; - finds duplicate CPAN modules listed for install more than once under the directory tree (useful for deduping module installs in a project and across submodules)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;perl_generate_fatpacks.sh&lt;/code&gt; - creates &lt;a href=&#34;https://metacpan.org/pod/App::FatPacker&#34;&gt;Fatpacks&lt;/a&gt; - self-contained Perl programs with all CPAN modules built-in&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Python&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;python_compile.sh&lt;/code&gt; - byte-compiles Python scripts and libraries into &lt;code&gt;.pyo&lt;/code&gt; optimized files&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python_pip_install.sh&lt;/code&gt; - bulk installs PyPI modules from mix of arguments / file lists / stdin, accounting for User vs System installs, root vs user sudo, VirtualEnvs / Anaconda / GitHub Workflows/ Google Cloud Shell, Mac vs Linux library paths, and ignore failure option&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python_pip_install_if_absent.sh&lt;/code&gt; - installs PyPI modules not already in Python libary path (OS or pip installed) for faster installations only where OS packages are already providing some of the modules, reducing time and failure rates in CI builds&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python_pip_install_for_script.sh&lt;/code&gt; - installs PyPI modules for given script(s) if not already installed. Used for dynamic individual script dependency installation in the &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Python-tools&#34;&gt;DevOps Python tools&lt;/a&gt; repo&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python_pip_reinstall_all_modules.sh&lt;/code&gt; - reinstalls all PyPI modules which can fix some issues&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pythonpath.sh&lt;/code&gt; - prints all Python libary search paths, one per line&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python_find_library_path.sh&lt;/code&gt; - finds directory where a PyPI module is installed - without args finds the Python library base&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python_find_library_executable.sh&lt;/code&gt; - finds directory where a PyPI module&#39;s CLI program is installed (system vs user, useful when it gets installed to a place that isn&#39;t in your &lt;code&gt;$PATH&lt;/code&gt;, where &lt;code&gt;which&lt;/code&gt; won&#39;t help)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python_find_unused_pip_modules.sh&lt;/code&gt; - finds PyPI modules that aren&#39;t used by any programs in the current directory tree&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python_find_duplicate_pip_requirements.sh&lt;/code&gt; - finds duplicate PyPI modules listed for install under the directory tree (useful for deduping module installs in a project and across submodules)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python_translate_import_module.sh&lt;/code&gt; - converts Python import modules to PyPI module names, used by &lt;code&gt;python_pip_install_for_script.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python_translate_module_to_import.sh&lt;/code&gt; - converts PyPI module names to Python import names, used by &lt;code&gt;python_pip_install_if_absent.sh&lt;/code&gt; and &lt;code&gt;python_find_unused_pip_modules.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python_pyinstaller.sh&lt;/code&gt; - creates &lt;a href=&#34;https://pypi.org/project/pyinstaller/&#34;&gt;PyInstaller&lt;/a&gt; self-contained Python programs with Python interpreter and all PyPI modules included&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python_pypi_versions.sh&lt;/code&gt; - prints all available versions of a given PyPi module using the API&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Golang&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;golang_get_install.sh&lt;/code&gt; - bulk installs Golang modules from mix of arguments / file lists / stdin&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;golang_get_install_if_absent.sh&lt;/code&gt; - same as above but only if the package binary isn&#39;t already available in &lt;code&gt;$PATH&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;golang_rm_binaries.sh&lt;/code&gt; - deletes binaries of the same name adjacent to &lt;code&gt;.go&lt;/code&gt; files. Doesn&#39;t delete you &lt;code&gt;bin/&lt;/code&gt; etc as these are often real deployed applications rather than development binaries&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;MP3&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;mp3_set_artist.sh&lt;/code&gt; / &lt;code&gt;mp3_set_album.sh&lt;/code&gt; - sets the artist / album tag for all mp3 files under given directories. Useful for grouping artists/albums and audiobook author/books (eg. for correct importing into Mac&#39;s Books.app)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mp3_set_track_name.sh&lt;/code&gt; - sets the track name metadata for mp3 files under given directories to follow their filenames. Useful for correctly displaying audiobook progress / chapters etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mp3_set_track_order.sh&lt;/code&gt; - sets the track order metadata for mp3 files under given directories to follow the lexical file naming order. Useful for correctly ordering album songs and audiobook chapters (eg. for Mac&#39;s Books.app). Especially useful for enforcing global ordering on multi-CD audiobooks after grouping into a single audiobook using &lt;code&gt;mp3_set_album.sh&lt;/code&gt; (otherwise default track numbers in each CD interleave in Mac&#39;s Books.app)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Spotify&lt;/h4&gt; &#xA;&lt;p&gt;40+ &lt;a href=&#34;https://www.spotify.com/&#34;&gt;Spotify&lt;/a&gt; API scripts (used extensively to manage my &lt;a href=&#34;https://github.com/HariSekhon/Spotify-Playlists&#34;&gt;Spotify-Playlists&lt;/a&gt; repo):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify_playlists*.sh&lt;/code&gt; - list playlists in either &lt;code&gt;&amp;lt;id&amp;gt; &amp;lt;name&amp;gt;&lt;/code&gt; or JSON format&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify_playlist_tracks*.sh&lt;/code&gt; - gets playlist contents as track URIs / &lt;code&gt;Artists - Track&lt;/code&gt; / CSV format - useful for backups or exports between music systems&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify_backup.sh&lt;/code&gt; - backup all Spotify playlists as well as the ordered list of playlists&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify_backup_playlist*.sh&lt;/code&gt; - backup Spotify playlists to local files in both human readable &lt;code&gt;Artist - Track&lt;/code&gt; format and Spotify URI format for easy restores or adding to new playlists&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify_search*.sh&lt;/code&gt; - search Spotify&#39;s library for tracks / albums / artists getting results in human readable format, JSON, or URI formats for easy loading to Spotify playlists&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify_release_year.sh&lt;/code&gt; - searches for a given track or album and finds the original release year&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify_uri_to_name.sh&lt;/code&gt; - convert Spotify track / album / artist URIs to human readable &lt;code&gt;Artist - Track&lt;/code&gt; / CSV format. Takes Spotify URIs, URL links or just IDs. Reads URIs from files or standard input&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify_create_playlist.sh&lt;/code&gt; - creates a Spotify playlist, either public or private&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify_rename_playlist.sh&lt;/code&gt; - renames a Spotify playlist&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify_set_playlists_public.sh&lt;/code&gt; / &lt;code&gt;spotify_set_playlists_private.sh&lt;/code&gt; - sets one or more given Spotify playlists to public / private&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify_add_to_playlist.sh&lt;/code&gt; - adds tracks to a given playlist. Takes a playlist name or ID and Spotify URIs in any form from files or standard input. Can be combined with many other tools listed here which output Spotify URIs, or appended from other playlists. Can also be used to restore a spotify playlist from backups&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify_delete_from_playlist.sh&lt;/code&gt; - deletes tracks from a given playlist. Takes a playlist name or ID and Spotify URIs in any form from files or standard input, optionally prefixed with a track position to remove only specific occurrences (useful for removing duplicates from playlists)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify_delete_from_playlist_if_in_other_playlists.sh&lt;/code&gt; - deletes tracks from a given playlist if their URIs are found in the subsequently given playlists&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify_duplicate_uri_in_playlist.sh&lt;/code&gt; - finds duplicate Spotify URIs in a given playlist (these are guaranteed exact duplicate matches), returns all but the first occurrence and optionally their track positions (zero-indexed to align with the Spotify API for easy chaining with other tools)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify_duplicate_tracks_in_playlist.sh&lt;/code&gt; - finds duplicate Spotify tracks in a given playlist (these are idential &lt;code&gt;Artist - Track&lt;/code&gt; name matches, which may be from different albums / singles)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify_delete_duplicates_in_playlist.sh&lt;/code&gt; - deletes duplicate Spotify URI tracks (identical) in a given playlist using &lt;code&gt;spotify_duplicate_uri_in_playlist.sh&lt;/code&gt; and &lt;code&gt;spotify_delete_from_playlist.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify_delete_duplicate_tracks_in_playlist.sh&lt;/code&gt; - deletes duplicate Spotify tracks (name matched) in a given playlist using &lt;code&gt;spotify_duplicate_tracks_in_playlist.sh&lt;/code&gt; and &lt;code&gt;spotify_delete_from_playlist.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify_delete_any_duplicates_in_playlist.sh&lt;/code&gt; - calls both of the above scripts to first get rid of duplicate URIs and then remove any other duplicates by track name matches&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify_playlist_tracks_uri_in_year.sh&lt;/code&gt; - finds track URIs in a playlist where their original release date is in a given year or decade (by regex match)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify_playlist_uri_offset.sh&lt;/code&gt; - finds the offset of a given track URI in a given playlist, useful to find positions to resume processing a large playlist&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify_top_artists*.sh&lt;/code&gt; - lists your top artists in URI or human readable format&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify_top_tracks*.sh&lt;/code&gt; - lists top tracks in URI or human readable format&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify_liked_tracks*.sh&lt;/code&gt; - lists your &lt;code&gt;Liked Songs&lt;/code&gt; in URI or human readable formats&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify_liked_artists*.sh&lt;/code&gt; - list artists from &lt;code&gt;Liked Songs&lt;/code&gt; in URI or human readable formats&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify_artists_followed*.sh&lt;/code&gt; - lists all followed artists in URI or human readable formats&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify_artist_tracks.sh&lt;/code&gt; - gets all track URIs for a given artist, from both albums and single for chain loading to playlists&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify_follow_artists.sh&lt;/code&gt; - follows artists for the given URIs from files or standard input&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify_follow_top_artists.sh&lt;/code&gt; - follows all artists in your current Spotify top artists list&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify_follow_liked_artists.sh&lt;/code&gt; - follows artists with N or more tracks in your &lt;code&gt;Liked Songs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify_set_tracks_uri_to_liked.sh&lt;/code&gt; - sets a list of spotify track URIs to &#39;Liked&#39; so they appear in the &lt;code&gt;Liked Songs&lt;/code&gt; playlist. Useful for marking all the tracks in your best playlists as favourite tracks, or for porting historical &lt;code&gt;Starred&lt;/code&gt; tracks to the newer &lt;code&gt;Liked Songs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify_foreach_playlist.sh&lt;/code&gt; - executes a templated command against all playlists, replacing &lt;code&gt;{playlist}&lt;/code&gt; and &lt;code&gt;{playlist_id}&lt;/code&gt; in each iteration&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify_playlist_name_to_id.sh&lt;/code&gt; / &lt;code&gt;spotify_playlist_id_to_name.sh&lt;/code&gt; - convert playlist names &amp;lt;=&amp;gt; IDs&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify_api_token.sh&lt;/code&gt; - gets a Spotify authentication token using either &lt;a href=&#34;https://developer.spotify.com/documentation/general/guides/authorization-guide/#client-credentials-flow&#34;&gt;Client Credentials&lt;/a&gt; or &lt;a href=&#34;https://developer.spotify.com/documentation/general/guides/authorization-guide/#authorization-code-flow&#34;&gt;Authorization Code&lt;/a&gt; authentication flows, the latter being able to read/modify private user data, automatically used by &lt;code&gt;spotify_api.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotify_api.sh&lt;/code&gt; - query any Spotify &lt;a href=&#34;https://developer.spotify.com/documentation/web-api/reference/&#34;&gt;API&lt;/a&gt; endpoint with authentication, used by adjacent spotify scripts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;More Linux &amp;amp; Mac&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Linux&#34;&gt;Linux&lt;/a&gt; / &lt;a href=&#34;https://en.wikipedia.org/wiki/MacOS&#34;&gt;Mac&lt;/a&gt; systems administration scripts: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;installation scripts for various OS packages (RPM, Deb, Apk) for various Linux distros (&lt;a href=&#34;https://www.redhat.com/en/technologies/linux-platforms/enterprise-linux&#34;&gt;Redhat RHEL&lt;/a&gt; / &lt;a href=&#34;https://www.centos.org/&#34;&gt;CentOS&lt;/a&gt; / &lt;a href=&#34;https://getfedora.org/&#34;&gt;Fedora&lt;/a&gt;, &lt;a href=&#34;https://www.debian.org/&#34;&gt;Debian&lt;/a&gt; / &lt;a href=&#34;https://ubuntu.com/&#34;&gt;Ubuntu&lt;/a&gt;, &lt;a href=&#34;https://alpinelinux.org/&#34;&gt;Alpine&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;install if absent scripts for Python, Perl, Ruby, NodeJS and Golang packages - good for minimizing the number of source code installs by first running the OS install scripts and then only building modules which aren&#39;t already detected as installed (provided by system packages), speeding up builds and reducing the likelihood of compile failures&lt;/li&gt; &#xA;   &lt;li&gt;install scripts for &lt;a href=&#34;https://www.jython.org/&#34;&gt;Jython&lt;/a&gt; and build tools like &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt; and &lt;a href=&#34;https://www.scala-sbt.org/&#34;&gt;SBT&lt;/a&gt; for when Linux distros don&#39;t provide packaged versions or where the packaged versions are too old&lt;/li&gt; &#xA;   &lt;li&gt;OS / Distro Package Management: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;install_packages.sh&lt;/code&gt; - installs package lists from arguments, files or stdin on major linux distros and Mac, detecting the package manager and invoking the right install commands, with &lt;code&gt;sudo&lt;/code&gt; if not root. Works on &lt;a href=&#34;https://www.redhat.com/en&#34;&gt;RHEL&lt;/a&gt; / &lt;a href=&#34;https://www.centos.org/&#34;&gt;CentOS&lt;/a&gt; / &lt;a href=&#34;https://getfedora.org/&#34;&gt;Fedora&lt;/a&gt;, &lt;a href=&#34;https://www.debian.org/&#34;&gt;Debian&lt;/a&gt; / &lt;a href=&#34;https://ubuntu.com/&#34;&gt;Ubuntu&lt;/a&gt;, &lt;a href=&#34;https://alpinelinux.org/&#34;&gt;Alpine&lt;/a&gt;, and &lt;a href=&#34;https://brew.sh/&#34;&gt;Mac Homebrew&lt;/a&gt;. Leverages and supports all features of the distro / OS specific install scripts listed below&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;install_packages_if_absent.sh&lt;/code&gt; - installs package lists if they&#39;re not already installed, saving time and minimizing install logs / CI logs, same support list as above&lt;/li&gt; &#xA;     &lt;li&gt;Redhat RHEL / CentOS: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;code&gt;yum_install_packages.sh&lt;/code&gt; / &lt;code&gt;yum_remove_packages.sh&lt;/code&gt; - installs RPM lists from arguments, files or stdin. Handles Yum + Dnf behavioural differences, calls &lt;code&gt;sudo&lt;/code&gt; if not root, auto-attempts variations of python/python2/python3 package names. Avoids yum slowness by checking if rpm is installed before attempting to install it, accepts &lt;code&gt;NO_FAIL=1&lt;/code&gt; env var to ignore unavailable / changed package names (useful for optional packages or attempts for different package names across RHEL/CentOS/Fedora versions)&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;yum_install_packages_if_absent.sh&lt;/code&gt; - installs RPMs only if not already installed and not a metapackage provided by other packages (eg. &lt;code&gt;vim&lt;/code&gt; metapackage provided by &lt;code&gt;vim-enhanced&lt;/code&gt;), saving time and minimizing install logs / CI logs, plus all the features of &lt;code&gt;yum_install_packages.sh&lt;/code&gt; above&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;rpms_filter_installed.sh&lt;/code&gt; / &lt;code&gt;rpms_filter_not_installed.sh&lt;/code&gt; - pipe filter packages that are / are not installed for easy script piping&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;Debian / Ubuntu: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;code&gt;apt_install_packages.sh&lt;/code&gt; / &lt;code&gt;apt_remove_packages.sh&lt;/code&gt; - installs Deb package lists from arguments, files or stdin. Auto calls &lt;code&gt;sudo&lt;/code&gt; if not root, accepts &lt;code&gt;NO_FAIL=1&lt;/code&gt; env var to ignore unavailable / changed package names (useful for optional packages or attempts for different package names across Debian/Ubuntu distros/versions)&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;apt_install_packages_if_absent.sh&lt;/code&gt; - installs Deb packages only if not already installed, saving time and minimizing install logs / CI logs, plus all the features of &lt;code&gt;apt_install_packages.sh&lt;/code&gt; above&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;apt_wait.sh&lt;/code&gt; - blocking wait on concurrent apt locks to avoid failures and continue when available, mimicking yum&#39;s waiting behaviour rather than error&#39;ing out&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;debs_filter_installed.sh&lt;/code&gt; / &lt;code&gt;debs_filter_not_installed.sh&lt;/code&gt; - pipe filter packages that are / are not installed for easy script piping&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;Alpine: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;code&gt;apk_install_packages.sh&lt;/code&gt; / &lt;code&gt;apk_remove_packages.sh&lt;/code&gt; - installs Alpine apk package lists from arguments, files or stdin. Auto calls &lt;code&gt;sudo&lt;/code&gt; if not root, accepts &lt;code&gt;NO_FAIL=1&lt;/code&gt; env var to ignore unavailable / changed package names (useful for optional packages or attempts for different package names across Alpine versions)&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;apk_install_packages_if_absent.sh&lt;/code&gt; - installs Alpine apk packages only if not already installed, saving time and minimizing install logs / CI logs, plus all the features of &lt;code&gt;apk_install_packages.sh&lt;/code&gt; above&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;apk_filter_installed.sh&lt;/code&gt; / &lt;code&gt;apk_filter_not_installed.sh&lt;/code&gt; - pipe filter packages that are / are not installed for easy script piping&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;Mac: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;code&gt;brew_install_packages.sh&lt;/code&gt; / &lt;code&gt;brew_remove_packages.sh&lt;/code&gt; - installs Mac Hombrew package lists from arguments, files or stdin. Accepts &lt;code&gt;NO_FAIL=1&lt;/code&gt; env var to ignore unavailable / changed package names (useful for optional packages or attempts for different package names across versions)&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;brew_install_packages_if_absent.sh&lt;/code&gt; - installs Mac Homebrew packages only if not already installed, saving time and minimizing install logs / CI logs, plus all the features of &lt;code&gt;brew_install_packages.sh&lt;/code&gt; above&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;brew_filter_installed.sh&lt;/code&gt; / &lt;code&gt;brew_filter_not_installed.sh&lt;/code&gt; - pipe filter packages that are / are not installed for easy script piping&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;all builds across all my GitHub repos now &lt;code&gt;make system-packages&lt;/code&gt; before &lt;code&gt;make pip&lt;/code&gt; / &lt;code&gt;make cpan&lt;/code&gt; to shorten how many packages need installing, reducing chances of build failures&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Builds, Languages &amp;amp; Linting&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;check_*.sh&lt;/code&gt; - extensive collection of generalized tests - these run against all my GitHub repos via &lt;a href=&#34;https://harisekhon.github.io/CI-CD/&#34;&gt;CI&lt;/a&gt;. Some examples:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Programming language linting:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt; (syntax, pep8, byte-compiling, reliance on asserts which can be disabled at runtime, except/pass etc.)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://www.perl.org/&#34;&gt;Perl&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://www.java.com/en/&#34;&gt;Java&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://www.scala-lang.org/&#34;&gt;Scala&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://www.ruby-lang.org/en/&#34;&gt;Ruby&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/bash/&#34;&gt;Bash&lt;/a&gt; / Shell&lt;/li&gt; &#xA;     &lt;li&gt;Misc (whitespace, custom code checks etc.)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Build System, Docker &amp;amp; CI linting:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/make/&#34;&gt;Make&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://maven.apache.org/&#34;&gt;Maven&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://www.scala-sbt.org/&#34;&gt;SBT&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://circleci.com/&#34;&gt;Circle CI&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://docs.gitlab.com/ee/ci/&#34;&gt;GitLab CI&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://concourse-ci.org/&#34;&gt;Concourse CI&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://codefresh.io/&#34;&gt;Codefresh CI&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/&#34;&gt;Dockerfiles&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://www.vagrantup.com/docs/vagrantfile&#34;&gt;Vagrantfiles&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Data Format Conversion &amp;amp; Validation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;csv_header_indices.sh&lt;/code&gt; - list CSV headers with their zero indexed numbers, useful reference when coding against column positions&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Data format validation &lt;code&gt;validate_*.py&lt;/code&gt; from &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Python-tools&#34;&gt;DevOps Python Tools repo&lt;/a&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;CSV&lt;/li&gt; &#xA;   &lt;li&gt;JSON&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://avro.apache.org/&#34;&gt;Avro&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://parquet.apache.org/&#34;&gt;Parquet&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;INI / Properties files (Java)&lt;/li&gt; &#xA;   &lt;li&gt;LDAP LDIF&lt;/li&gt; &#xA;   &lt;li&gt;XML&lt;/li&gt; &#xA;   &lt;li&gt;YAML&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;json2yaml.sh&lt;/code&gt; - converts JSON to YAML&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;yaml2json.sh&lt;/code&gt; - converts YAML to JSON - needed for some APIs like GitLab CI linting (see &lt;a href=&#34;https://github.com/HariSekhon/DevOps-Bash-tools#git--github--gitlab--bitbucket&#34;&gt;Gitlab&lt;/a&gt; section above)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;See Also&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/HariSekhon/DevOps-Python-tools&#34;&gt;DevOps Python Tools&lt;/a&gt; - 80+ DevOps CLI tools for AWS, GCP, Hadoop, HBase, Spark, Log Anonymizer, Ambari Blueprints, AWS CloudFormation, Linux, Docker, Spark Data Converters &amp;amp; Validators (Avro / Parquet / JSON / CSV / INI / XML / YAML), Elasticsearch, Solr, Travis CI, Pig, IPython&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/HariSekhon/SQL-scripts&#34;&gt;SQL Scripts&lt;/a&gt; - 100+ SQL Scripts - PostgreSQL, MySQL, AWS Athena, Google BigQuery&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/HariSekhon/Templates&#34;&gt;Templates&lt;/a&gt; - dozens of Code &amp;amp; Config templates - AWS, GCP, Docker, Jenkins, Terraform, Vagrant, Puppet, Python, Bash, Go, Perl, Java, Scala, Groovy, Maven, SBT, Gradle, Make, GitHub Actions Workflows, CircleCI, Jenkinsfile, Makefile, Dockerfile, docker-compose.yml, M4 etc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/HariSekhon/Kubernetes-configs&#34;&gt;Kubernetes configs&lt;/a&gt; - Kubernetes YAML configs - Best Practices, Tips &amp;amp; Tricks are baked right into the templates for future deployments&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/HariSekhon/Nagios-Plugins&#34;&gt;The Advanced Nagios Plugins Collection&lt;/a&gt; - 450+ programs for Nagios monitoring your Hadoop &amp;amp; NoSQL clusters. Covers every Hadoop vendor&#39;s management API and every major NoSQL technology (HBase, Cassandra, MongoDB, Elasticsearch, Solr, Riak, Redis etc.) as well as message queues (Kafka, RabbitMQ), continuous integration (Jenkins, Travis CI) and traditional infrastructure (SSL, Whois, DNS, Linux)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/harisekhon/perl-tools&#34;&gt;DevOps Perl Tools&lt;/a&gt; - 25+ DevOps CLI tools for Hadoop, HDFS, Hive, Solr/SolrCloud CLI, Log Anonymizer, Nginx stats &amp;amp; HTTP(S) URL watchers for load balanced web farms, Dockerfiles &amp;amp; SQL ReCaser (MySQL, PostgreSQL, AWS Redshift, Snowflake, Apache Drill, Hive, Impala, Cassandra CQL, Microsoft SQL Server, Oracle, Couchbase N1QL, Dockerfiles, Pig Latin, Neo4j, InfluxDB), Ambari FreeIPA Kerberos, Datameer, Linux...&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/HariSekhon/HAProxy-configs&#34;&gt;HAProxy Configs&lt;/a&gt; - 80+ HAProxy Configs for Hadoop, Big Data, NoSQL, Docker, Elasticsearch, SolrCloud, HBase, Cloudera, Hortonworks, MapR, MySQL, PostgreSQL, Apache Drill, Hive, Presto, Impala, ZooKeeper, OpenTSDB, InfluxDB, Prometheus, Kibana, Graphite, SSH, RabbitMQ, Redis, Riak, Rancher etc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/HariSekhon/Dockerfiles&#34;&gt;Dockerfiles&lt;/a&gt; - 50+ DockerHub public images for Docker &amp;amp; Kubernetes - Hadoop, Kafka, ZooKeeper, HBase, Cassandra, Solr, SolrCloud, Presto, Apache Drill, Nifi, Spark, Mesos, Consul, Riak, OpenTSDB, Jython, Advanced Nagios Plugins &amp;amp; DevOps Tools repos on Alpine, CentOS, Debian, Fedora, Ubuntu, Superset, H2O, Serf, Alluxio / Tachyon, FakeS3&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/HariSekhon/lib&#34;&gt;Perl Lib&lt;/a&gt; - Perl utility library&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/HariSekhon/pylib&#34;&gt;PyLib&lt;/a&gt; - Python utility library&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/HariSekhon/lib-java&#34;&gt;Lib-Java&lt;/a&gt; - Java utility library&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/HariSekhon/Nagios-Plugin-Kafka&#34;&gt;Nagios Plugin Kafka&lt;/a&gt; - Kafka Nagios Plugin written in Scala with Kerberos support&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/u/harisekhon/&#34;&gt;Pre-built Docker images&lt;/a&gt; are available for those repos (which include this one as a submodule) and the &lt;a href=&#34;https://hub.docker.com/r/harisekhon/centos-github/&#34;&gt;&#34;docker available&#34;&lt;/a&gt; icon above links to an &lt;a href=&#34;https://hub.docker.com/r/harisekhon/centos-github/&#34;&gt;uber image&lt;/a&gt; which contains all my github repos pre-built. There are &lt;a href=&#34;https://hub.docker.com/r/harisekhon/centos-github/&#34;&gt;Centos&lt;/a&gt;, &lt;a href=&#34;https://hub.docker.com/r/harisekhon/alpine-github/&#34;&gt;Alpine&lt;/a&gt;, &lt;a href=&#34;https://hub.docker.com/r/harisekhon/debian-github/&#34;&gt;Debian&lt;/a&gt; and &lt;a href=&#34;https://hub.docker.com/r/harisekhon/ubuntu-github/&#34;&gt;Ubuntu&lt;/a&gt; versions of this uber Docker image containing all repos.&lt;/p&gt; &#xA;&lt;h4&gt;Individual Setup Parts&lt;/h4&gt; &#xA;&lt;p&gt;Optional, only if you don&#39;t do the full &lt;code&gt;make install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Install only OS system package dependencies and &lt;a href=&#34;https://aws.amazon.com/cli/&#34;&gt;AWS CLI&lt;/a&gt; via Python Pip (doesn&#39;t symlink anything to &lt;code&gt;$HOME&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adds sourcing to &lt;code&gt;.bashrc&lt;/code&gt; and &lt;code&gt;.bash_profile&lt;/code&gt; and symlinks dot config files to &lt;code&gt;$HOME&lt;/code&gt; (doesn&#39;t install OS system package dependencies):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make link&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;undo via&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make unlink&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install only OS system package dependencies (doesn&#39;t include &lt;a href=&#34;https://aws.amazon.com/cli/&#34;&gt;AWS CLI&lt;/a&gt; or Python packages):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make system-packages&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://aws.amazon.com/cli/&#34;&gt;AWS CLI&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make aws&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://docs.microsoft.com/en-us/cli/azure/&#34;&gt;Azure CLI&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make azure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://cloud.google.com/sdk&#34;&gt;GCP GCloud SDK&lt;/a&gt; (includes CLI):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make gcp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://cloud.google.com/shell&#34;&gt;GCP GCloud Shell&lt;/a&gt; environment (sets up persistent OS packages and all home directory configs):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make gcp-shell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install generically useful Python CLI tools and modules (includes &lt;a href=&#34;https://aws.amazon.com/cli/&#34;&gt;AWS CLI&lt;/a&gt;, autopep8 etc):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make python&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Full Help&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; make help&#xA;&#xA; Usage:&#xA;&#xA;  Common Options:&#xA;&#xA;    make help                   show this message&#xA;    make build                  installs all dependencies - OS packages and any language libraries via native tools eg. pip, cpanm, gem, go etc that are not available via OS packages&#xA;    make build-retry            retries &#39;make build&#39; x 3 until success to try to mitigate temporary upstream repo failures triggering false alerts in CI systems&#xA;    make ci                     prints env, then runs &#39;build-retry&#39; for more resilient CI builds with debugging&#xA;    make printenv               prints environment variables, CPU cores, OS release, $PWD, Git branch, hashref etc. Useful for CI debugging&#xA;    make system-packages        installs OS packages only (detects OS via whichever package manager is available)&#xA;    make test                   run tests&#xA;    make clean                  removes compiled / generated files, downloaded tarballs, temporary files etc.&#xA;&#xA;    make submodules             initialize and update submodules to the right release (done automatically by build / system-packages)&#xA;    make init                   same as above, often useful to do in CI systems to get access to additional submodule provided targets such as &#39;make ci&#39;&#xA;&#xA;    make cpan                   install any modules listed in any cpan-requirements.txt files if not already installed&#xA;&#xA;    make pip                    install any modules listed in any requirements.txt files if not already installed&#xA;&#xA;    make python-compile         compile any python files found in the current directory and 1 level of subdirectory&#xA;    make pycompile&#xA;&#xA;    make github                 open browser at github project&#xA;    make readme                 open browser at github&#39;s README&#xA;    make github-url             print github url and copy to clipboard&#xA;    make status                 open browser at Github CI Builds overview Status page for all projects&#xA;&#xA;    make ls                     print list of code files in project&#xA;    make wc                     show counts of files and lines&#xA;&#xA;  Repo specific options:&#xA;&#xA;    make install                builds all script dependencies, installs AWS CLI, symlinks all config files to $HOME and adds sourcing of bash profile&#xA;&#xA;    make link                   symlinks all config files to $HOME and adds sourcing of bash profile&#xA;    make unlink                 removes all symlinks pointing to this repo&#39;s config files and removes the sourcing lines from .bashrc and .bash_profile&#xA;&#xA;    make python-desktop         installs all Python Pip packages for desktop workstation listed in setup/pip-packages-desktop.txt&#xA;    make perl-desktop           installs all Perl CPAN packages for desktop workstation listed in setup/cpan-packages-desktop.txt&#xA;    make ruby-desktop           installs all Ruby Gem packages for desktop workstation listed in setup/gem-packages-desktop.txt&#xA;    make golang-desktop         installs all Golang packages for desktop workstation listed in setup/go-packages-desktop.txt&#xA;    make nodejs-desktop         installs all NodeJS packages for desktop workstation listed in setup/npm-packages-desktop.txt&#xA;&#xA;    make desktop                installs all of the above + many desktop OS packages listed in setup/&#xA;&#xA;    make mac-desktop            all of the above + installs a bunch of major common workstation software packages like Ansible, Terraform, MiniKube, MiniShift, SDKman, Travis CI, CCMenu, Parquet tools etc.&#xA;    make linux-desktop&#xA;&#xA;    make ls-scripts             print list of scripts in this project, ignoring code libraries in lib/ and .bash.d/&#xA;&#xA;    make github-cli             installs GitHub CLI&#xA;    make kubernetes             installs Kubernetes kubectl and kustomize to ~/bin/&#xA;    make terraform              installs Terraform to ~/bin/&#xA;    make vim                    installs Vundle and plugins&#xA;    make tmux                   installs TMUX TPM and plugin for kubernetes context&#xA;    make ccmenu                 installs and (re)configures CCMenu to watch this and all other major HariSekhon GitHub repos&#xA;    make status                 open the Github Status page of all my repos build statuses across all CI platforms&#xA;&#xA;    make aws                    installs AWS CLI tools&#xA;    make azure                  installs Azure CLI&#xA;    make gcp                    installs Google Cloud SDK&#xA;&#xA;    make aws-shell              sets up AWS Cloud Shell: installs core packages and links configs&#xA;                                (maintains itself across future Cloud Shells via .aws_customize_environment hook)&#xA;    make gcp-shell              sets up GCP Cloud Shell: installs core packages and links configs&#xA;                                (maintains itself across future Cloud Shells via .customize_environment hook)&#xA;    make azure-shell            sets up Azure Cloud Shell (limited compared to gcp-shell, doesn&#39;t install OS packages since there is no sudo)&#xA;&#xA;Now exiting usage help with status code 3 to explicitly prevent silent build failures from stray &#39;help&#39; arguments&#xA;make: *** [help] Error 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(&lt;code&gt;make help&lt;/code&gt; exits with error code 3 like most of my programs to differentiate from build success to make sure a stray &lt;code&gt;help&lt;/code&gt; argument doesn&#39;t cause silent build failure with exit code 0)&lt;/p&gt; &#xA;&lt;h3&gt;Stargazers over time&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/HariSekhon/DevOps-Bash-tools&#34;&gt;&lt;img src=&#34;https://starchart.cc/HariSekhon/DevOps-Bash-tools.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://git.io/bash-tools&#34;&gt;git.io/bash-tools&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>oracle/docker-images</title>
    <updated>2022-05-29T01:54:10Z</updated>
    <id>tag:github.com,2022-05-29:/oracle/docker-images</id>
    <link href="https://github.com/oracle/docker-images" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official source for Docker configurations, images, and examples of Dockerfiles for Oracle products and projects&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Docker Images from Oracle&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains &lt;a href=&#34;https://docs.docker.com/engine/reference/builder/&#34;&gt;Dockerfiles&lt;/a&gt; and samples to build &lt;a href=&#34;https://www.docker.com/what-docker&#34;&gt;Docker&lt;/a&gt; images for Oracle commercial products and &lt;a href=&#34;https://opensource.oracle.com&#34;&gt;Oracle sponsored open source projects&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Container Images on GitHub&lt;/h2&gt; &#xA;&lt;p&gt;These images will require you to download any required Oracle commercial software before installation. If you want commercial software downloaded for you, view &lt;a href=&#34;https://raw.githubusercontent.com/oracle/docker-images/main/#pre-built-images-with-commercial-software&#34;&gt;Pre-Built Images with Commercial Software&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Oracle Commercial Products&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oracle/docker-images/main/OracleAccessManagement&#34;&gt;Oracle Access Management&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oracle/docker-images/main/OracleBI&#34;&gt;Oracle BI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oracle/docker-images/main/OracleCloudInfrastructure&#34;&gt;Oracle Cloud Infrastructure Tools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oracle/docker-images/main/OracleCoherence&#34;&gt;Oracle Coherence&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oracle/docker-images/main/OracleDatabase&#34;&gt;Oracle Database&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oracle/docker-images/main/OracleEssbase&#34;&gt;Oracle Essbase&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oracle/docker-images/main/OracleFMWInfrastructure&#34;&gt;Oracle FMW Infrastructure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oracle/docker-images/main/OracleGoldenGate&#34;&gt;Oracle GoldenGate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oracle/docker-images/main/OracleHTTPServer&#34;&gt;Oracle HTTP Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oracle/docker-images/main/OracleIdentityGovernance&#34;&gt;Oracle Identity Governance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oracle/docker-images/main/OracleInstantClient&#34;&gt;Oracle Instant Client&lt;/a&gt; (Basic, SDK and SQL*Plus)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oracle/docker-images/main/OracleInternetDirectory&#34;&gt;Oracle Internet Directory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oracle/docker-images/main/OracleJava&#34;&gt;Oracle Java&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oracle/docker-images/main/OracleRestDataServices&#34;&gt;Oracle Rest Data Services&lt;/a&gt; (ORDS)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oracle/docker-images/main/OracleSOASuite&#34;&gt;Oracle SOA Suite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oracle/docker-images/main/OracleUnifiedDirectory&#34;&gt;Oracle Unified Directory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oracle/docker-images/main/OracleUnifiedDirectorySM&#34;&gt;Oracle Unified Directory Service Manager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oracle/docker-images/main/OracleWebLogic&#34;&gt;Oracle WebLogic Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oracle/docker-images/main/OracleWebCenterContent&#34;&gt;Oracle WebCenter Content&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oracle/docker-images/main/OracleWebCenterPortal&#34;&gt;Oracle WebCenter Portal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oracle/docker-images/main/OracleWebCenterSites&#34;&gt;Oracle WebCenter Sites&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Oracle Sponsored Open Source Projects&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/graalvm/container/tree/master/community&#34;&gt;GraalVM CE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mysql/mysql-docker&#34;&gt;MySQL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oracle/docker-images/main/OracleOpenJDK&#34;&gt;Oracle OpenJDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oracle/docker-images/main/NoSQL&#34;&gt;Oracle NoSQL Database&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oracle/container-images&#34;&gt;Oracle Linux&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Community Contributions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oracle/docker-images/issues/212&#34;&gt;Oracle Forms and Reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oracle/docker-images/main/Contrib/OracleUnifiedDirectory/&#34;&gt;Oracle Unified Directory&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Archived Projects&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oracle/docker-images/main/Archive/ContainerCloud&#34;&gt;ContainerCloud&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oracle/docker-images/main/Archive/OracleDataIntegrator&#34;&gt;Oracle Data Integrator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oracle/docker-images/main/Archive/OracleEDQ&#34;&gt;Oracle Enterprise Data Quality&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oracle/docker-images/main/Archive/OracleTuxedo&#34;&gt;Oracle Tuxedo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oracle/docker-images/main/Archive/OracleTuxedo/tsam&#34;&gt;Oracle TSAM Plus&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Pre-Built Images with Commercial Software&lt;/h2&gt; &#xA;&lt;p&gt;These sources already contain Oracle commercial software and require license acceptance prior to download:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://container-registry.oracle.com&#34;&gt;Oracle Container Registry&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;For support and certification information, please consult the documentation for each product.&lt;/p&gt; &#xA;&lt;p&gt;For support, bug reporting and feedback about the provided Dockerfiles, please open an &lt;a href=&#34;https://github.com/oracle/docker-images/issues&#34;&gt;issue on GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you need general support with running containers on Oracle Linux, you can submit a question under the &lt;a href=&#34;https://community.oracle.com/tech/apps-infra/categories/containers-and-orchestration&#34;&gt;Containers and Orchestration&lt;/a&gt; category of the Applications and Infrastructure Community of Oracle Communities.&lt;/p&gt;</summary>
  </entry>
</feed>