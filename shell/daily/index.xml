<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-29T01:53:29Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>moovweb/gvm</title>
    <updated>2022-07-29T01:53:29Z</updated>
    <id>tag:github.com,2022-07-29:/moovweb/gvm</id>
    <link href="https://github.com/moovweb/gvm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Go Version Manager&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gvm&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/moovweb/gvm&#34;&gt;&lt;img src=&#34;https://travis-ci.org/moovweb/gvm.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;By Josh Bussdieker (jbuss, jaja, jbussdieker) while working at &lt;a href=&#34;https://www.moovweb.com&#34;&gt;Moovweb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Currently lovingly maintained by &lt;a href=&#34;https://github.com/BenKnigge&#34;&gt;Benjamin Knigge&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Pull requests and other any other contributions would be very much appreciated.&lt;/p&gt; &#xA;&lt;p&gt;GVM provides an interface to manage Go versions.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install/Uninstall Go versions with &lt;code&gt;gvm install [tag]&lt;/code&gt; where tag is &#34;60.3&#34;, &#34;go1&#34;, &#34;weekly.2011-11-08&#34;, or &#34;tip&#34;&lt;/li&gt; &#xA; &lt;li&gt;List added/removed files in GOROOT with &lt;code&gt;gvm diff&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Manage GOPATHs with &lt;code&gt;gvm pkgset [create/use/delete] [name]&lt;/code&gt;. Use &lt;code&gt;--local&lt;/code&gt; as &lt;code&gt;name&lt;/code&gt; to manage repository under local path (&lt;code&gt;/path/to/repo/.gvm_local&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;List latest release tags with &lt;code&gt;gvm listall&lt;/code&gt;. Use &lt;code&gt;--all&lt;/code&gt; to list weekly as well.&lt;/li&gt; &#xA; &lt;li&gt;Cache a clean copy of the latest Go source for multiple version installs.&lt;/li&gt; &#xA; &lt;li&gt;Link project directories into GOPATH&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Background&lt;/h1&gt; &#xA;&lt;p&gt;When we started developing in Go mismatched dependencies and API changes plauged our build process and made it extremely difficult to merge with other peoples changes.&lt;/p&gt; &#xA;&lt;p&gt;After nuking my entire GOROOT several times and rebuilding I decided to come up with a tool to oversee the process. It eventually evolved into what gvm is today.&lt;/p&gt; &#xA;&lt;h1&gt;Installing&lt;/h1&gt; &#xA;&lt;p&gt;To install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash &amp;lt; &amp;lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you are using zsh just change &lt;code&gt;bash&lt;/code&gt; with &lt;code&gt;zsh&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installing Go&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;gvm install go1.4&#xA;gvm use go1.4 [--default]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once this is done Go will be in the path and ready to use. $GOROOT and $GOPATH are set automatically.&lt;/p&gt; &#xA;&lt;p&gt;Additional options can be specified when installing Go:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: gvm install [version] [options]&#xA;    -s,  --source=SOURCE      Install Go from specified source.&#xA;    -n,  --name=NAME          Override the default name for this version.&#xA;    -pb, --with-protobuf      Install Go protocol buffers.&#xA;    -b,  --with-build-tools   Install package build tools.&#xA;    -B,  --binary             Only install from binary.&#xA;         --prefer-binary      Attempt a binary install, falling back to source.&#xA;    -h,  --help               Display this message.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;A Note on Compiling Go 1.5+&lt;/h3&gt; &#xA;&lt;p&gt;Go 1.5+ removed the C compilers from the toolchain and &lt;a href=&#34;https://docs.google.com/document/d/1OaatvGhEAq7VseQ9kkavxKNAfepWy2yhPUBs96FGV28/edit&#34;&gt;replaced&lt;/a&gt; them with one written in Go. Obviously, this creates a bootstrapping problem if you don&#39;t already have a working Go install. In order to compile Go 1.5+, make sure Go 1.4 is installed first.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gvm install go1.4 -B&#xA;gvm use go1.4&#xA;export GOROOT_BOOTSTRAP=$GOROOT&#xA;gvm install go1.5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;List Go Versions&lt;/h1&gt; &#xA;&lt;p&gt;To list all installed Go versions (The current version is prefixed with &#34;=&amp;gt;&#34;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gvm list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To list all Go versions available for download:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gvm listall&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Uninstalling&lt;/h1&gt; &#xA;&lt;p&gt;To completely remove gvm and all installed Go versions and packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gvm implode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If that doesn&#39;t work see the troubleshooting steps at the bottom of this page.&lt;/p&gt; &#xA;&lt;h1&gt;Mac OS X Requirements&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Mercurial from &lt;a href=&#34;https://www.mercurial-scm.org/downloads&#34;&gt;https://www.mercurial-scm.org/downloads&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install Xcode Command Line Tools from the App Store.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;xcode-select --install&#xA;brew update&#xA;brew install mercurial&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Linux Requirements&lt;/h1&gt; &#xA;&lt;h1&gt;Debian/Ubuntu&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install curl git mercurial make binutils bison gcc build-essential&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Redhat/Centos&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo yum install curl&#xA;sudo yum install git&#xA;sudo yum install make&#xA;sudo yum install bison&#xA;sudo yum install gcc&#xA;sudo yum install glibc-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Mercurial from &lt;a href=&#34;http://pkgs.repoforge.org/mercurial/&#34;&gt;http://pkgs.repoforge.org/mercurial/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;FreeBSD Requirements&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo pkg_add -r bash&#xA;sudo pkg_add -r git&#xA;sudo pkg_add -r mercurial&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Vendoring Native Code and Dependencies&lt;/h1&gt; &#xA;&lt;p&gt;GVM supports vendoring package set-specific native code and related dependencies, which is useful if you need to qualify a new configuration or version of one of these dependencies against a last-known-good version in an isolated manner. Such behavior is critical to maintaining good release engineering and production environment hygiene.&lt;/p&gt; &#xA;&lt;p&gt;As a convenience matter, GVM will furnish the following environment variables to aid in this manner if you want to decouple your work from what the operating system provides:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;${GVM_OVERLAY_PREFIX}&lt;/code&gt; functions in a manner akin to a root directory hierarchy suitable for auto{conf,make,tools} where it could be passed in to &lt;code&gt;./configure --prefix=${GVM_OVERLAY_PREFIX}&lt;/code&gt; and not conflict with any existing operating system artifacts and hermetically be used by your workspace. This is suitable to use with &lt;code&gt;C{PP,XX}FLAGS and LDFLAGS&lt;/code&gt;, but you will have to manage these yourself, since each tool that uses them is different.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;${PATH}&lt;/code&gt; includes &lt;code&gt;${GVM_OVERLAY_PREFIX}/bin&lt;/code&gt; so that any tools you manually install will reside there, available for you.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;${LD_LIBRARY_PATH}&lt;/code&gt; includes &lt;code&gt;${GVM_OVERLAY_PREFIX}/lib&lt;/code&gt; so that any runtime library searching can be fulfilled there on FreeBSD and Linux.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;${DYLD_LIBRARY_PATH}&lt;/code&gt; includes &lt;code&gt;${GVM_OVERLAY_PREFIX}/lib&lt;/code&gt; so that any runtime library searching can be fulfilled there on Mac OS X.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;${PKG_CONFIG_PATH}&lt;/code&gt; includes &lt;code&gt;${GVM_OVERLAY_PREFIX}/lib/pkgconfig&lt;/code&gt; so that &lt;code&gt;pkg-config&lt;/code&gt; can automatically resolve any vendored dependencies.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Recipe for success:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gvm use go1.1&#xA;gvm pkgset use current-known-good&#xA;# Let&#39;s assume that this includes some C headers and native libraries, which&#xA;# Go&#39;s CGO facility wraps for us.  Let&#39;s assume that these native&#xA;# dependencies are at version V.&#xA;gvm pkgset create trial-next-version&#xA;# Let&#39;s assume that V+1 has come along and you want to safely trial it in&#xA;# your workspace.&#xA;gvm pkgset use trial-next-version&#xA;# Do your work here replicating current-known-good from above, but install&#xA;# V+1 into ${GVM_OVERLAY_PREFIX}.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See examples/native for a working example.&lt;/p&gt; &#xA;&lt;h1&gt;Troubleshooting&lt;/h1&gt; &#xA;&lt;p&gt;Sometimes especially during upgrades the state of gvm&#39;s files can get mixed up. This is mostly true for upgrade from older version than 0.0.8. Changes are slowing down and a LTR is imminent. But for now &lt;code&gt;rm -rf ~/.gvm&lt;/code&gt; will always remove gvm. Stay tuned!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/GoVesionManager/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/GoVesionManager/community.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>