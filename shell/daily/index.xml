<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-09T01:53:29Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>RPi-Distro/pi-gen</title>
    <updated>2022-08-09T01:53:29Z</updated>
    <id>tag:github.com,2022-08-09:/RPi-Distro/pi-gen</id>
    <link href="https://github.com/RPi-Distro/pi-gen" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tool used to create the official Raspberry Pi OS images&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pi-gen&lt;/h1&gt; &#xA;&lt;p&gt;Tool used to create Raspberry Pi OS images. (Previously known as Raspbian).&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;pi-gen runs on Debian-based operating systems. Currently it is only supported on either Debian Buster or Ubuntu Xenial and is known to have issues building on earlier releases of these systems. On other Linux distributions it may be possible to use the Docker build described below.&lt;/p&gt; &#xA;&lt;p&gt;To install the required dependencies for &lt;code&gt;pi-gen&lt;/code&gt; you should run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt-get install coreutils quilt parted qemu-user-static debootstrap zerofree zip \&#xA;dosfstools libarchive-tools libcap2-bin grep rsync xz-utils file git curl bc \&#xA;qemu-utils kpartx gpg pigz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The file &lt;code&gt;depends&lt;/code&gt; contains a list of tools needed. The format of this package is &lt;code&gt;&amp;lt;tool&amp;gt;[:&amp;lt;debian-package&amp;gt;]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started with building your images&lt;/h2&gt; &#xA;&lt;p&gt;Getting started is as simple as cloning this repository on your build machine. You can do so with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --depth 1 https://github.com/RPI-Distro/pi-gen.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;code&gt;--depth 1&lt;/code&gt; with &lt;code&gt;git clone&lt;/code&gt; will create a shallow clone, only containing the latest revision of the repository. Do not do this on your development machine.&lt;/p&gt; &#xA;&lt;p&gt;Also, be careful to clone the repository to a base path &lt;strong&gt;NOT&lt;/strong&gt; containing spaces. This configuration is not supported by debootstrap and will lead to &lt;code&gt;pi-gen&lt;/code&gt; not running.&lt;/p&gt; &#xA;&lt;p&gt;After cloning the repository, you can move to the next step and start configuring your build.&lt;/p&gt; &#xA;&lt;h2&gt;Config&lt;/h2&gt; &#xA;&lt;p&gt;Upon execution, &lt;code&gt;build.sh&lt;/code&gt; will source the file &lt;code&gt;config&lt;/code&gt; in the current working directory. This bash shell fragment is intended to set needed environment variables.&lt;/p&gt; &#xA;&lt;p&gt;The following environment variables are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;IMG_NAME&lt;/code&gt; &lt;strong&gt;required&lt;/strong&gt; (Default: unset)&lt;/p&gt; &lt;p&gt;The name of the image to build with the current stage directories. Setting &lt;code&gt;IMG_NAME=Raspbian&lt;/code&gt; is logical for an unmodified RPi-Distro/pi-gen build, but you should use something else for a customized version. Export files in stages may add suffixes to &lt;code&gt;IMG_NAME&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;USE_QCOW2&lt;/code&gt; &lt;strong&gt;EXPERIMENTAL&lt;/strong&gt; (Default: &lt;code&gt;0&lt;/code&gt; )&lt;/p&gt; &lt;p&gt;Instead of using traditional way of building the rootfs of every stage in single subdirectories and copying over the previous one to the next one, qcow2 based virtual disks with backing images are used in every stage. This speeds up the build process and reduces overall space consumption significantly.&lt;/p&gt; &lt;p&gt;&lt;u&gt;Additional optional parameters regarding qcow2 build:&lt;/u&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;BASE_QCOW2_SIZE&lt;/code&gt; (Default: 12G)&lt;/p&gt; &lt;p&gt;Size of the virtual qcow2 disk. Note: it will not actually use that much of space at once but defines the maximum size of the virtual disk. If you change the build process by adding a lot of bigger packages or additional build stages, it can be necessary to increase the value because the virtual disk can run out of space like a normal hard drive would.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;CAUTION:&lt;/strong&gt; Although the qcow2 build mechanism will run fine inside Docker, it can happen that the network block device is not disconnected correctly after the Docker process has ended abnormally. In that case see &lt;a href=&#34;https://raw.githubusercontent.com/RPi-Distro/pi-gen/master/#Disconnect-an-image-if-something-went-wrong&#34;&gt;Disconnect an image if something went wrong&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;RELEASE&lt;/code&gt; (Default: bullseye)&lt;/p&gt; &lt;p&gt;The release version to build images against. Valid values are jessie, stretch, buster, bullseye, and testing.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;APT_PROXY&lt;/code&gt; (Default: unset)&lt;/p&gt; &lt;p&gt;If you require the use of an apt proxy, set it here. This proxy setting will not be included in the image, making it safe to use an &lt;code&gt;apt-cacher&lt;/code&gt; or similar package for development.&lt;/p&gt; &lt;p&gt;If you have Docker installed, you can set up a local apt caching proxy to like speed up subsequent builds like this:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker-compose up -d&#xA;echo &#39;APT_PROXY=http://172.17.0.1:3142&#39; &amp;gt;&amp;gt; config&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;BASE_DIR&lt;/code&gt; (Default: location of &lt;code&gt;build.sh&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;&lt;strong&gt;CAUTION&lt;/strong&gt;: Currently, changing this value will probably break build.sh&lt;/p&gt; &lt;p&gt;Top-level directory for &lt;code&gt;pi-gen&lt;/code&gt;. Contains stage directories, build scripts, and by default both work and deployment directories.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;WORK_DIR&lt;/code&gt; (Default: &lt;code&gt;&#34;$BASE_DIR/work&#34;&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;Directory in which &lt;code&gt;pi-gen&lt;/code&gt; builds the target system. This value can be changed if you have a suitably large, fast storage location for stages to be built and cached. Note, &lt;code&gt;WORK_DIR&lt;/code&gt; stores a complete copy of the target system for each build stage, amounting to tens of gigabytes in the case of Raspbian.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;CAUTION&lt;/strong&gt;: If your working directory is on an NTFS partition you probably won&#39;t be able to build: make sure this is a proper Linux filesystem.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;DEPLOY_DIR&lt;/code&gt; (Default: &lt;code&gt;&#34;$BASE_DIR/deploy&#34;&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;Output directory for target system images and NOOBS bundles.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;DEPLOY_COMPRESSION&lt;/code&gt; (Default: &lt;code&gt;zip&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;Set to:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;none&lt;/code&gt; to deploy the actual image (&lt;code&gt;.img&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;zip&lt;/code&gt; to deploy a zipped image (&lt;code&gt;.zip&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gz&lt;/code&gt; to deploy a gzipped image (&lt;code&gt;.img.gz&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;xz&lt;/code&gt; to deploy a xzipped image (&lt;code&gt;.img.xz&lt;/code&gt;).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;DEPLOY_ZIP&lt;/code&gt; (Deprecated)&lt;/p&gt; &lt;p&gt;This option has been deprecated in favor of &lt;code&gt;DEPLOY_COMPRESSION&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;DEPLOY_ZIP=0&lt;/code&gt; is still present in your config file, the behavior is the same as with &lt;code&gt;DEPLOY_COMPRESSION=none&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;COMPRESSION_LEVEL&lt;/code&gt; (Default: &lt;code&gt;6&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;Compression level to be used when using &lt;code&gt;zip&lt;/code&gt;, &lt;code&gt;gz&lt;/code&gt; or &lt;code&gt;xz&lt;/code&gt; for &lt;code&gt;DEPLOY_COMPRESSION&lt;/code&gt;. From 0 to 9 (refer to the tool man page for more information on this. Usually 0 is no compression but very fast, up to 9 with the best compression but very slow ).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;USE_QEMU&lt;/code&gt; (Default: &lt;code&gt;&#34;0&#34;&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;Setting to &#39;1&#39; enables the QEMU mode - creating an image that can be mounted via QEMU for an emulated environment. These images include &#34;-qemu&#34; in the image file name.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;LOCALE_DEFAULT&lt;/code&gt; (Default: &#34;en_GB.UTF-8&#34; )&lt;/p&gt; &lt;p&gt;Default system locale.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;TARGET_HOSTNAME&lt;/code&gt; (Default: &#34;raspberrypi&#34; )&lt;/p&gt; &lt;p&gt;Setting the hostname to the specified value.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;KEYBOARD_KEYMAP&lt;/code&gt; (Default: &#34;gb&#34; )&lt;/p&gt; &lt;p&gt;Default keyboard keymap.&lt;/p&gt; &lt;p&gt;To get the current value from a running system, run &lt;code&gt;debconf-show keyboard-configuration&lt;/code&gt; and look at the &lt;code&gt;keyboard-configuration/xkb-keymap&lt;/code&gt; value.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;KEYBOARD_LAYOUT&lt;/code&gt; (Default: &#34;English (UK)&#34; )&lt;/p&gt; &lt;p&gt;Default keyboard layout.&lt;/p&gt; &lt;p&gt;To get the current value from a running system, run &lt;code&gt;debconf-show keyboard-configuration&lt;/code&gt; and look at the &lt;code&gt;keyboard-configuration/variant&lt;/code&gt; value.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;TIMEZONE_DEFAULT&lt;/code&gt; (Default: &#34;Europe/London&#34; )&lt;/p&gt; &lt;p&gt;Default keyboard layout.&lt;/p&gt; &lt;p&gt;To get the current value from a running system, look in &lt;code&gt;/etc/timezone&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;FIRST_USER_NAME&lt;/code&gt; (Default: &lt;code&gt;pi&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;Username for the first user. This user only exists during the image creation process. Unless &lt;code&gt;DISABLE_FIRST_BOOT_USER_RENAME&lt;/code&gt; is set to &lt;code&gt;1&lt;/code&gt;, this user will be renamed on the first boot with a name chosen by the final user. This security feature is designed to prevent shipping images with a default username and help prevent malicious actors from taking over your devices.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;FIRST_USER_PASS&lt;/code&gt; (Default: unset)&lt;/p&gt; &lt;p&gt;Password for the first user. If unset, the account is locked.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;DISABLE_FIRST_BOOT_USER_RENAME&lt;/code&gt; (Default: &lt;code&gt;0&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;Disable the renaming of the first user during the first boot. This make it so &lt;code&gt;FIRST_USER_NAME&lt;/code&gt; stays activated. &lt;code&gt;FIRST_USER_PASS&lt;/code&gt; must be set for this to work. Please be aware of the implied security risk of defining a default username and password for your devices.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;WPA_ESSID&lt;/code&gt;, &lt;code&gt;WPA_PASSWORD&lt;/code&gt; and &lt;code&gt;WPA_COUNTRY&lt;/code&gt; (Default: unset)&lt;/p&gt; &lt;p&gt;If these are set, they are use to configure &lt;code&gt;wpa_supplicant.conf&lt;/code&gt;, so that the Raspberry Pi can automatically connect to a wireless network on first boot. If &lt;code&gt;WPA_ESSID&lt;/code&gt; is set and &lt;code&gt;WPA_PASSWORD&lt;/code&gt; is unset an unprotected wireless network will be configured. If set, &lt;code&gt;WPA_PASSWORD&lt;/code&gt; must be between 8 and 63 characters.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ENABLE_SSH&lt;/code&gt; (Default: &lt;code&gt;0&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;Setting to &lt;code&gt;1&lt;/code&gt; will enable ssh server for remote log in. Note that if you are using a common password such as the defaults there is a high risk of attackers taking over you Raspberry Pi.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;PUBKEY_SSH_FIRST_USER&lt;/code&gt; (Default: unset)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Setting this to a value will make that value the contents of the FIRST_USER_NAME&#39;s ~/.ssh/authorized_keys. Obviously the value should therefore be a valid authorized_keys file. Note that this does not automatically enable SSH.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;PUBKEY_ONLY_SSH&lt;/code&gt; (Default: &lt;code&gt;0&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Setting to &lt;code&gt;1&lt;/code&gt; will disable password authentication for SSH and enable public key authentication. Note that if SSH is not enabled this will take effect when SSH becomes enabled.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;STAGE_LIST&lt;/code&gt; (Default: &lt;code&gt;stage*&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;If set, then instead of working through the numeric stages in order, this list will be followed. For example setting to &lt;code&gt;&#34;stage0 stage1 mystage stage2&#34;&lt;/code&gt; will run the contents of &lt;code&gt;mystage&lt;/code&gt; before stage2. Note that quotes are needed around the list. An absolute or relative path can be given for stages outside the pi-gen directory.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A simple example for building Raspbian:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;IMG_NAME=&#39;Raspbian&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The config file can also be specified on the command line as an argument the &lt;code&gt;build.sh&lt;/code&gt; or &lt;code&gt;build-docker.sh&lt;/code&gt; scripts.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build.sh -c myconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is parsed after &lt;code&gt;config&lt;/code&gt; so can be used to override values set there.&lt;/p&gt; &#xA;&lt;h2&gt;How the build process works&lt;/h2&gt; &#xA;&lt;p&gt;The following process is followed to build images:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Loop through all of the stage directories in alphanumeric order&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Move on to the next directory if this stage directory contains a file called &#34;SKIP&#34;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the script &lt;code&gt;prerun.sh&lt;/code&gt; which is generally just used to copy the build directory between stages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In each stage directory loop through each subdirectory and then run each of the install scripts it contains, again in alphanumeric order. These need to be named with a two digit padded number at the beginning. There are a number of different files and directories which can be used to control different parts of the build process:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;00-run.sh&lt;/strong&gt; - A unix shell script. Needs to be made executable for it to run.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;00-run-chroot.sh&lt;/strong&gt; - A unix shell script which will be run in the chroot of the image build directory. Needs to be made executable for it to run.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;00-debconf&lt;/strong&gt; - Contents of this file are passed to debconf-set-selections to configure things like locale, etc.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;00-packages&lt;/strong&gt; - A list of packages to install. Can have more than one, space separated, per line.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;00-packages-nr&lt;/strong&gt; - As 00-packages, except these will be installed using the &lt;code&gt;--no-install-recommends -y&lt;/code&gt; parameters to apt-get.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;00-patches&lt;/strong&gt; - A directory containing patch files to be applied, using quilt. If a file named &#39;EDIT&#39; is present in the directory, the build process will be interrupted with a bash session, allowing an opportunity to create/revise the patches.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If the stage directory contains files called &#34;EXPORT_NOOBS&#34; or &#34;EXPORT_IMAGE&#34; then add this stage to a list of images to generate&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate the images for any stages that have specified them&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is recommended to examine build.sh for finer details.&lt;/p&gt; &#xA;&lt;h2&gt;Docker Build&lt;/h2&gt; &#xA;&lt;p&gt;Docker can be used to perform the build inside a container. This partially isolates the build from the host system, and allows using the script on non-debian based systems (e.g. Fedora Linux). The isolate is not complete due to the need to use some kernel level services for arm emulation (binfmt) and loop devices (losetup).&lt;/p&gt; &#xA;&lt;p&gt;To build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vi config         # Edit your config file. See above.&#xA;./build-docker.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If everything goes well, your finished image will be in the &lt;code&gt;deploy/&lt;/code&gt; folder. You can then remove the build container with &lt;code&gt;docker rm -v pigen_work&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If something breaks along the line, you can edit the corresponding scripts, and continue:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CONTINUE=1 ./build-docker.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To examine the container after a failure you can enter a shell within it using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo docker run -it --privileged --volumes-from=pigen_work pi-gen /bin/bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After successful build, the build container is by default removed. This may be undesired when making incremental changes to a customized build. To prevent the build script from remove the container add&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PRESERVE_CONTAINER=1 ./build-docker.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is a possibility that even when running from a docker container, the installation of &lt;code&gt;qemu-user-static&lt;/code&gt; will silently fail when building the image because &lt;code&gt;binfmt-support&lt;/code&gt; &lt;em&gt;must be enabled on the underlying kernel&lt;/em&gt;. An easy fix is to ensure &lt;code&gt;binfmt-support&lt;/code&gt; is installed on the host machine before starting the &lt;code&gt;./build-docker.sh&lt;/code&gt; script (or using your own docker build solution).&lt;/p&gt; &#xA;&lt;h3&gt;Passing arguments to Docker&lt;/h3&gt; &#xA;&lt;p&gt;When the docker image is run various required command line arguments are provided. For example the system mounts the &lt;code&gt;/dev&lt;/code&gt; directory to the &lt;code&gt;/dev&lt;/code&gt; directory within the docker container. If other arguments are required they may be specified in the PIGEN_DOCKER_OPTS environment variable. For example setting &lt;code&gt;PIGEN_DOCKER_OPTS=&#34;--add-host foo:192.168.0.23&#34;&lt;/code&gt; will add &#39;192.168.0.23 foo&#39; to the &lt;code&gt;/etc/hosts&lt;/code&gt; file in the container. The &lt;code&gt;--name&lt;/code&gt; and &lt;code&gt;--privileged&lt;/code&gt; options are already set by the script and should not be redefined.&lt;/p&gt; &#xA;&lt;h2&gt;Stage Anatomy&lt;/h2&gt; &#xA;&lt;h3&gt;Raspbian Stage Overview&lt;/h3&gt; &#xA;&lt;p&gt;The build of Raspbian is divided up into several stages for logical clarity and modularity. This causes some initial complexity, but it simplifies maintenance and allows for more easy customization.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Stage 0&lt;/strong&gt; - bootstrap. The primary purpose of this stage is to create a usable filesystem. This is accomplished largely through the use of &lt;code&gt;debootstrap&lt;/code&gt;, which creates a minimal filesystem suitable for use as a base.tgz on Debian systems. This stage also configures apt settings and installs &lt;code&gt;raspberrypi-bootloader&lt;/code&gt; which is missed by debootstrap. The minimal core is installed but not configured, and the system will not quite boot yet.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Stage 1&lt;/strong&gt; - truly minimal system. This stage makes the system bootable by installing system files like &lt;code&gt;/etc/fstab&lt;/code&gt;, configures the bootloader, makes the network operable, and installs packages like raspi-config. At this stage the system should boot to a local console from which you have the means to perform basic tasks needed to configure and install the system. This is as minimal as a system can possibly get, and its arguably not really usable yet in a traditional sense yet. Still, if you want minimal, this is minimal and the rest you could reasonably do yourself as sysadmin.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Stage 2&lt;/strong&gt; - lite system. This stage produces the Raspbian-Lite image. It installs some optimized memory functions, sets timezone and charmap defaults, installs fake-hwclock and ntp, wireless LAN and bluetooth support, dphys-swapfile, and other basics for managing the hardware. It also creates necessary groups and gives the pi user access to sudo and the standard console hardware permission groups.&lt;/p&gt; &lt;p&gt;There are a few tools that may not make a whole lot of sense here for development purposes on a minimal system such as basic Python and Lua packages as well as the &lt;code&gt;build-essential&lt;/code&gt; package. They are lumped right in with more essential packages presently, though they need not be with pi-gen. These are understandable for Raspbian&#39;s target audience, but if you were looking for something between truly minimal and Raspbian-Lite, here&#39;s where you start trimming.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Stage 3&lt;/strong&gt; - desktop system. Here&#39;s where you get the full desktop system with X11 and LXDE, web browsers, git for development, Raspbian custom UI enhancements, etc. This is a base desktop system, with some development tools installed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Stage 4&lt;/strong&gt; - Normal Raspbian image. System meant to fit on a 4GB card. This is the stage that installs most things that make Raspbian friendly to new users like system documentation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Stage 5&lt;/strong&gt; - The Raspbian Full image. More development tools, an email client, learning tools like Scratch, specialized packages like sonic-pi, office productivity, etc.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Stage specification&lt;/h3&gt; &#xA;&lt;p&gt;If you wish to build up to a specified stage (such as building up to stage 2 for a lite system), place an empty file named &lt;code&gt;SKIP&lt;/code&gt; in each of the &lt;code&gt;./stage&lt;/code&gt; directories you wish not to include.&lt;/p&gt; &#xA;&lt;p&gt;Then add an empty file named &lt;code&gt;SKIP_IMAGES&lt;/code&gt; to &lt;code&gt;./stage4&lt;/code&gt; and &lt;code&gt;./stage5&lt;/code&gt; (if building up to stage 2) or to &lt;code&gt;./stage2&lt;/code&gt; (if building a minimal system).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Example for building a lite system&#xA;echo &#34;IMG_NAME=&#39;Raspbian&#39;&#34; &amp;gt; config&#xA;touch ./stage3/SKIP ./stage4/SKIP ./stage5/SKIP&#xA;touch ./stage4/SKIP_IMAGES ./stage5/SKIP_IMAGES&#xA;sudo ./build.sh  # or ./build-docker.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you wish to build further configurations upon (for example) the lite system, you can also delete the contents of &lt;code&gt;./stage3&lt;/code&gt; and &lt;code&gt;./stage4&lt;/code&gt; and replace with your own contents in the same format.&lt;/p&gt; &#xA;&lt;h2&gt;Skipping stages to speed up development&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re working on a specific stage the recommended development process is as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add a file called SKIP_IMAGES into the directories containing EXPORT_* files (currently stage2, stage4 and stage5)&lt;/li&gt; &#xA; &lt;li&gt;Add SKIP files to the stages you don&#39;t want to build. For example, if you&#39;re basing your image on the lite image you would add these to stages 3, 4 and 5.&lt;/li&gt; &#xA; &lt;li&gt;Run build.sh to build all stages&lt;/li&gt; &#xA; &lt;li&gt;Add SKIP files to the earlier successfully built stages&lt;/li&gt; &#xA; &lt;li&gt;Modify the last stage&lt;/li&gt; &#xA; &lt;li&gt;Rebuild just the last stage using &lt;code&gt;sudo CLEAN=1 ./build.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Once you&#39;re happy with the image you can remove the SKIP_IMAGES files and export your image to test&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Regarding Qcow2 image building&lt;/h1&gt; &#xA;&lt;h3&gt;Get infos about the image in use&lt;/h3&gt; &#xA;&lt;p&gt;If you issue the two commands shown in the example below in a second command shell while a build is running you can find out, which network block device is currently being used and which qcow2 image is bound to it.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@build-machine:~/$ lsblk | grep nbd&#xA;nbd1      43:32   0    10G  0 disk&#xA;├─nbd1p1  43:33   0    10G  0 part&#xA;└─nbd1p1 253:0    0    10G  0 part&#xA;&#xA;root@build-machine:~/$ ps xa | grep qemu-nbd&#xA; 2392 pts/6    S+     0:00 grep --color=auto qemu-nbd&#xA;31294 ?        Ssl    0:12 qemu-nbd --discard=unmap -c /dev/nbd1 image-stage4.qcow2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here you can see, that the qcow2 image &lt;code&gt;image-stage4.qcow2&lt;/code&gt; is currently connected to &lt;code&gt;/dev/nbd1&lt;/code&gt; with the associated partition map &lt;code&gt;/dev/mapper/nbd1p1&lt;/code&gt;. Don&#39;t worry that &lt;code&gt;lsblk&lt;/code&gt; shows two entries. It is totally fine, because the device map is accessible via &lt;code&gt;/dev/mapper/nbd1p1&lt;/code&gt; and also via &lt;code&gt;/dev/dm-0&lt;/code&gt;. This is all part of the device mapper functionality of the kernel. See &lt;code&gt;dmsetup&lt;/code&gt; for further information.&lt;/p&gt; &#xA;&lt;h3&gt;Mount a qcow2 image&lt;/h3&gt; &#xA;&lt;p&gt;If you want to examine the content of a a single stage, you can simply mount the qcow2 image found in the &lt;code&gt;WORK_DIR&lt;/code&gt; directory with the tool &lt;code&gt;./imagetool.sh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;./imagetool.sh -h&lt;/code&gt; for further details on how to use it.&lt;/p&gt; &#xA;&lt;h3&gt;Disconnect an image if something went wrong&lt;/h3&gt; &#xA;&lt;p&gt;It can happen, that your build stops in case of an error. Normally &lt;code&gt;./build.sh&lt;/code&gt; should handle image disconnection appropriately, but in rare cases, especially during a Docker build, this may not work as expected. If that happens, starting a new build will fail and you may have to disconnect the image and/or device yourself.&lt;/p&gt; &#xA;&lt;p&gt;A typical message indicating that there are some orphaned device mapper entries is this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Failed to set NBD socket&#xA;Disconnect client, due to: Unexpected end-of-file before all bytes were read&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If that happens go through the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;First, check if the image is somehow mounted to a directory entry and umount it as you would any other block device, like i.e. a hard disk or USB stick.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Second, to disconnect an image from &lt;code&gt;qemu-nbd&lt;/code&gt;, the QEMU Disk Network Block Device Server, issue the following command (be sure to change the device name to the one actually used):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo qemu-nbd -d /dev/nbd1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note: if you use Docker build, normally no active &lt;code&gt;qemu-nbd&lt;/code&gt; process exists anymore as it will be terminated when the Docker container stops.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To disconnect a device partition map from the network block device, execute:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo kpartx -d /dev/nbd1&#xA;or&#xA;sudo ./imagetool.sh --cleanup&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note: The &lt;code&gt;imagetool.sh&lt;/code&gt; command will cleanup any /dev/nbdX that is not connected to a running &lt;code&gt;qemu-nbd&lt;/code&gt; daemon. Be careful if you use network block devices for other tasks utilizing NBDs on your build machine as well.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Now you should be able to start a new build without running into troubles again. Most of the time, especially when using Docker build, you will only need no. 3 to get everything up and running again.&lt;/p&gt; &#xA;&lt;h1&gt;Troubleshooting&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;code&gt;64 Bit Systems&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Please note there is currently an issue when compiling with a 64 Bit OS. See &lt;a href=&#34;https://github.com/RPi-Distro/pi-gen/issues/271&#34;&gt;https://github.com/RPi-Distro/pi-gen/issues/271&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A 64 bit image can be generated from the &lt;code&gt;arm64&lt;/code&gt; branch in this repository. Just replace the command from &lt;a href=&#34;https://raw.githubusercontent.com/RPi-Distro/pi-gen/master/#getting-started-with-building-your-images&#34;&gt;this section&lt;/a&gt; by the one below, and follow the rest of the documentation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --depth 1 --branch arm64 https://github.com/RPI-Distro/pi-gen.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to generate a 64 bits image from a Raspberry Pi running a 32 bits version, you need to add &lt;code&gt;arm_64bit=1&lt;/code&gt; to your &lt;code&gt;config.txt&lt;/code&gt; file and reboot your machine. This will restart your machine with a 64 bits kernel. This will only work from a Raspberry Pi with a 64-bit capable processor (i.e. Raspberry Pi Zero 2, Raspberry Pi 3 or Raspberry Pi 4).&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;binfmt_misc&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Linux is able execute binaries from other architectures, meaning that it should be possible to make use of &lt;code&gt;pi-gen&lt;/code&gt; on an x86_64 system, even though it will be running ARM binaries. This requires support from the &lt;a href=&#34;https://en.wikipedia.org/wiki/Binfmt_misc&#34;&gt;&lt;code&gt;binfmt_misc&lt;/code&gt;&lt;/a&gt; kernel module.&lt;/p&gt; &#xA;&lt;p&gt;You may see one of the following errors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;update-binfmts: warning: Couldn&#39;t load the binfmt_misc module.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;W: Failure trying to run: chroot &#34;/pi-gen/work/test/stage0/rootfs&#34; /bin/true&#xA;and/or&#xA;chroot: failed to run command &#39;/bin/true&#39;: Exec format error&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To resolve this, ensure that the following files are available (install them if necessary):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/lib/modules/$(uname -r)/kernel/fs/binfmt_misc.ko&#xA;/usr/bin/qemu-arm-static&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also need to load the module by hand - run &lt;code&gt;modprobe binfmt_misc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are using WSL to build you may have to enable the service &lt;code&gt;sudo update-binfmts --enable&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
</feed>