<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-03T02:31:12Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Vonng/pigsty</title>
    <updated>2023-03-03T02:31:12Z</updated>
    <id>tag:github.com,2023-03-03:/Vonng/pigsty</id>
    <link href="https://github.com/Vonng/pigsty" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PostgreSQL in Great STYle, Battery-Included Free RDS Alternative!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pigsty&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;PostgreSQL in Great STYle&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;A battery-included, local-first, me-better open-source RDS alternative.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Get started with: &lt;code&gt;curl -fsSL http://download.pigsty.cc/get | bash&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pigsty.cc&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Vonng/pigsty/master/docs/icon.svg?sanitize=true&#34; alt=&#34;icon&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Latest Release: &lt;a href=&#34;https://github.com/Vonng/pigsty/releases/tag/v2.0.0&#34;&gt;v2.0.0&lt;/a&gt; | &lt;a href=&#34;http://demo.pigsty.cc&#34;&gt;Demo&lt;/a&gt; | &lt;a href=&#34;https://vonng.github.io/pigsty/&#34;&gt;Docs&lt;/a&gt; | &lt;a href=&#34;https://pigsty.cc/en/&#34;&gt;Website&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pigsty.cc/en/&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8587410/206971422-deb6dd88-c89e-43e4-8130-cf32a24b07b9.jpg&#34; alt=&#34;pigsty-banner&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Pigsty is a &lt;strong&gt;Me-Better Open Source RDS Alternative&lt;/strong&gt; with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Battery-Included &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt; Distribution, with &lt;a href=&#34;https://postgis.net/&#34;&gt;PostGIS&lt;/a&gt;, &lt;a href=&#34;https://www.timescale.com/&#34;&gt;TimescaleDB&lt;/a&gt;, &lt;a href=&#34;https://www.citusdata.com/&#34;&gt;Citus&lt;/a&gt;,...&lt;/li&gt; &#xA; &lt;li&gt;Incredible observability powered by &lt;a href=&#34;https://prometheus.io/&#34;&gt;Prometheus&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://grafana.com/&#34;&gt;Grafana&lt;/a&gt; stack.&lt;/li&gt; &#xA; &lt;li&gt;Self-healing HA PGSQL cluster, powered by &lt;a href=&#34;https://patroni.readthedocs.io/en/latest/&#34;&gt;patroni&lt;/a&gt;, &lt;a href=&#34;http://www.haproxy.org/&#34;&gt;haproxy&lt;/a&gt;, &lt;a href=&#34;https://etcd.io/&#34;&gt;etcd&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Auto-Configured PITR, powered by &lt;a href=&#34;https://pgbackrest.org/&#34;&gt;pgBackRest&lt;/a&gt; and optional &lt;a href=&#34;https://min.io/&#34;&gt;MinIO&lt;/a&gt; repo.&lt;/li&gt; &#xA; &lt;li&gt;Declarative API, Database-as-Code implemented with &lt;a href=&#34;https://www.ansible.com/&#34;&gt;Ansible&lt;/a&gt; playbooks.&lt;/li&gt; &#xA; &lt;li&gt;Versatile Use-cases, Run &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; Apps, Run demos, Visualize data with &lt;a href=&#34;https://echarts.apache.org/&#34;&gt;ECharts&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Handy Tools, provision IaaS with &lt;a href=&#34;https://www.terraform.io/&#34;&gt;Terraform&lt;/a&gt;, and try with local &lt;a href=&#34;https://www.vagrantup.com/&#34;&gt;Vagrant&lt;/a&gt; sandbox.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/pigsty/master/docs/FEATURE.md&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8587410/206971964-0035bbca-889e-44fc-9b0d-640d34573a95.gif&#34; alt=&#34;pigsty-distro&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://raw.githubusercontent.com/Vonng/pigsty/master/docs/FEATURE.md&#34;&gt;&lt;strong&gt;Feature&lt;/strong&gt;&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It takes four steps to install Pigsty: &lt;a href=&#34;https://raw.githubusercontent.com/Vonng/pigsty/master/docs/INSTALL.md#download&#34;&gt;Download&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/Vonng/pigsty/master/docs/INSTALL.md#bootstrap&#34;&gt;Bootstrap&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/Vonng/pigsty/master/docs/INSTALL.md#configure&#34;&gt;Configure&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/Vonng/pigsty/master/docs/INSTALL.md#install&#34;&gt;Install&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Prepare a new node with Linux x86_64 EL 7/8/9 compatible OS, then run as a &lt;strong&gt;sudo-able&lt;/strong&gt; user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash -c &#34;$(curl -fsSL http://download.pigsty.cc/get)&#34;;&#xA;cd ~/pigsty; ./bootstrap; ./configure; ./install.yml;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you will have a pigsty singleton node ready, with Web Services on port &lt;code&gt;80&lt;/code&gt; and Postgres on port &lt;code&gt;5432&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Download Directly&lt;/summary&gt; &#xA; &lt;p&gt;You can also download pigsty source and packages with &lt;code&gt;git&lt;/code&gt; or &lt;code&gt;curl&lt;/code&gt; directly:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -L https://github.com/Vonng/pigsty/releases/download/v2.0.0/pigsty-v2.0.0.tgz -o ~/pigsty.tgz&#xA;curl -L https://github.com/Vonng/pigsty/releases/download/v2.0.0/pigsty-pkg-v2.0.0.el9.x86_64.tgz  -o /tmp/pkg.tgz&#xA;&#xA;# or using git if curl not available&#xA;git clone https://github.com/Vonng/pigsty; cd pigsty; git checkout v2.0.0&#xA;&#xA;# use corresponding pkg.tgz for EL7 and EL8&#xA;# EL7: https://github.com/Vonng/pigsty/releases/download/v2.0.0/pigsty-pkg-v2.0.0.el7.x86_64.tgz&#xA;# EL8: https://github.com/Vonng/pigsty/releases/download/v2.0.0/pigsty-pkg-v2.0.0.el8.x86_64.tgz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://raw.githubusercontent.com/Vonng/pigsty/master/docs/INSTALL.md&#34;&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;Pigsty uses a &lt;strong&gt;modular&lt;/strong&gt; design. There are six default modules available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/pigsty/master/docs/INFRA.md&#34;&gt;&lt;code&gt;INFRA&lt;/code&gt;&lt;/a&gt;: Local yum repo, Nginx, DNS, and entire Prometheus &amp;amp; Grafana observability stack.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/pigsty/master/docs/NODE.md&#34;&gt;&lt;code&gt;NODE&lt;/code&gt;&lt;/a&gt;: Init node name, repo, pkg, NTP, ssh, admin, tune, expose services, collect logs &amp;amp; metrics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/pigsty/master/docs/ETCD.md&#34;&gt;&lt;code&gt;ETCD&lt;/code&gt;&lt;/a&gt;: Init etcd cluster for HA Postgres DCS or Kubernetes, used as distributed config store.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/pigsty/master/docs/PGSQL.md&#34;&gt;&lt;code&gt;PGSQL&lt;/code&gt;&lt;/a&gt;: Autonomous self-healing PostgreSQL cluster powered by Patroni, Pgbouncer, PgBackrest &amp;amp; HAProxy&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/pigsty/master/docs/REDIS.md&#34;&gt;&lt;code&gt;REDIS&lt;/code&gt;&lt;/a&gt;: Deploy Redis servers in standalone master-replica, sentinel, and native cluster mode, optional.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Vonng/pigsty/master/docs/MINIO.md&#34;&gt;&lt;code&gt;MINIO&lt;/code&gt;&lt;/a&gt;: S3-compatible object storage service used as an optional central backup server for &lt;code&gt;PGSQL&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can compose them freely in a declarative manner. If you want host monitoring, &lt;code&gt;INFRA&lt;/code&gt; &amp;amp; &lt;code&gt;NODE&lt;/code&gt; will suffice. &lt;code&gt;ETCD&lt;/code&gt; and &lt;code&gt;PGSQL&lt;/code&gt; are used for HA PG clusters, install them on multiple nodes will automatically form a HA cluster. You can also reuse pigsty infra and develop your own modules, &lt;code&gt;KAFKA&lt;/code&gt;, &lt;code&gt;MYSQL&lt;/code&gt;, &lt;code&gt;GPSQL&lt;/code&gt;, and more will come.&lt;/p&gt; &#xA;&lt;p&gt;The default &lt;a href=&#34;https://raw.githubusercontent.com/Vonng/pigsty/master/install.yml&#34;&gt;&lt;code&gt;install.yml&lt;/code&gt;&lt;/a&gt; playbook in &lt;a href=&#34;https://raw.githubusercontent.com/Vonng/pigsty/master/#get-started&#34;&gt;Get Started&lt;/a&gt; will install &lt;code&gt;INFRA&lt;/code&gt;, &lt;code&gt;NODE&lt;/code&gt;, &lt;code&gt;ETCD&lt;/code&gt; &amp;amp; &lt;code&gt;PGSQL&lt;/code&gt; on the current node. which gives you a battery-included PostgreSQL singleton instance (&lt;code&gt;admin_ip:5432&lt;/code&gt;) with everything ready. This node can be used as an admin center &amp;amp; infra provider to manage, deploy &amp;amp; monitor more nodes &amp;amp; clusters.&lt;/p&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://raw.githubusercontent.com/Vonng/pigsty/master/docs/ARCH.md&#34;&gt;&lt;strong&gt;Architecture&lt;/strong&gt;&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;More Clusters&lt;/h2&gt; &#xA;&lt;p&gt;To deploy a 3-node HA Postgres Cluster with streaming replication, &lt;a href=&#34;https://github.com/Vonng/pigsty/raw/master/pigsty.yml#L54&#34;&gt;define&lt;/a&gt; a new cluster on &lt;code&gt;all.children.pg-test&lt;/code&gt; of &lt;a href=&#34;https://github.com/Vonng/pigsty/raw/master/pigsty.yml&#34;&gt;&lt;code&gt;pigsty.yml&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;pg-test:&#xA;  hosts:&#xA;    10.10.10.11: { pg_seq: 1, pg_role: primary }&#xA;    10.10.10.12: { pg_seq: 2, pg_role: replica }&#xA;    10.10.10.13: { pg_seq: 3, pg_role: offline }&#xA;  vars:  { pg_cluster: pg-test }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then create it with built-in playbooks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/pgsql-add pg-test   # init pg-test cluster &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can deploy different kinds of instance roles such as primary, replica, offline, delayed, sync standby, and different kinds of clusters, such as standby clusters, Citus clusters, and even Redis/MinIO/Etcd clusters.&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Example: Complex Postgres Customize&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;pg-meta:&#xA;  hosts: { 10.10.10.10: { pg_seq: 1, pg_role: primary , pg_offline_query: true } }&#xA;  vars:&#xA;    pg_cluster: pg-meta&#xA;    pg_databases:                       # define business databases on this cluster, array of database definition&#xA;      - name: meta                      # REQUIRED, `name` is the only mandatory field of a database definition&#xA;        baseline: cmdb.sql              # optional, database sql baseline path, (relative path among ansible search path, e.g files/)&#xA;        pgbouncer: true                 # optional, add this database to pgbouncer database list? true by default&#xA;        schemas: [pigsty]               # optional, additional schemas to be created, array of schema names&#xA;        extensions:                     # optional, additional extensions to be installed: array of `{name[,schema]}`&#xA;          - { name: postgis , schema: public }&#xA;          - { name: timescaledb }&#xA;        comment: pigsty meta database   # optional, comment string for this database&#xA;        owner: postgres                # optional, database owner, postgres by default&#xA;        template: template1            # optional, which template to use, template1 by default&#xA;        encoding: UTF8                 # optional, database encoding, UTF8 by default. (MUST same as template database)&#xA;        locale: C                      # optional, database locale, C by default.  (MUST same as template database)&#xA;        lc_collate: C                  # optional, database collate, C by default. (MUST same as template database)&#xA;        lc_ctype: C                    # optional, database ctype, C by default.   (MUST same as template database)&#xA;        tablespace: pg_default         # optional, default tablespace, &#39;pg_default&#39; by default.&#xA;        allowconn: true                # optional, allow connection, true by default. false will disable connect at all&#xA;        revokeconn: false              # optional, revoke public connection privilege. false by default. (leave connect with grant option to owner)&#xA;        register_datasource: true      # optional, register this database to grafana datasources? true by default&#xA;        connlimit: -1                  # optional, database connection limit, default -1 disable limit&#xA;        pool_auth_user: dbuser_meta    # optional, all connection to this pgbouncer database will be authenticated by this user&#xA;        pool_mode: transaction         # optional, pgbouncer pool mode at database level, default transaction&#xA;        pool_size: 64                  # optional, pgbouncer pool size at database level, default 64&#xA;        pool_size_reserve: 32          # optional, pgbouncer pool size reserve at database level, default 32&#xA;        pool_size_min: 0               # optional, pgbouncer pool size min at database level, default 0&#xA;        pool_max_db_conn: 100          # optional, max database connections at database level, default 100&#xA;      - { name: grafana  ,owner: dbuser_grafana  ,revokeconn: true ,comment: grafana primary database }&#xA;      - { name: bytebase ,owner: dbuser_bytebase ,revokeconn: true ,comment: bytebase primary database }&#xA;      - { name: kong     ,owner: dbuser_kong     ,revokeconn: true ,comment: kong the api gateway database }&#xA;      - { name: gitea    ,owner: dbuser_gitea    ,revokeconn: true ,comment: gitea meta database }&#xA;      - { name: wiki     ,owner: dbuser_wiki     ,revokeconn: true ,comment: wiki meta database }&#xA;    pg_users:                           # define business users/roles on this cluster, array of user definition&#xA;      - name: dbuser_meta               # REQUIRED, `name` is the only mandatory field of a user definition&#xA;        password: DBUser.Meta           # optional, password, can be a scram-sha-256 hash string or plain text&#xA;        login: true                     # optional, can log in, true by default  (new biz ROLE should be false)&#xA;        superuser: false                # optional, is superuser? false by default&#xA;        createdb: false                 # optional, can create database? false by default&#xA;        createrole: false               # optional, can create role? false by default&#xA;        inherit: true                   # optional, can this role use inherited privileges? true by default&#xA;        replication: false              # optional, can this role do replication? false by default&#xA;        bypassrls: false                # optional, can this role bypass row level security? false by default&#xA;        pgbouncer: true                 # optional, add this user to pgbouncer user-list? false by default (production user should be true explicitly)&#xA;        connlimit: -1                   # optional, user connection limit, default -1 disable limit&#xA;        expire_in: 3650                 # optional, now + n days when this role is expired (OVERWRITE expire_at)&#xA;        expire_at: &#39;2030-12-31&#39;         # optional, YYYY-MM-DD &#39;timestamp&#39; when this role is expired  (OVERWRITTEN by expire_in)&#xA;        comment: pigsty admin user      # optional, comment string for this user/role&#xA;        roles: [dbrole_admin]           # optional, belonged roles. default roles are: dbrole_{admin,readonly,readwrite,offline}&#xA;        parameters: {}                  # optional, role level parameters with `ALTER ROLE SET`&#xA;        pool_mode: transaction          # optional, pgbouncer pool mode at user level, transaction by default&#xA;        pool_connlimit: -1              # optional, max database connections at user level, default -1 disable limit&#xA;      - {name: dbuser_view     ,password: DBUser.Viewer   ,pgbouncer: true ,roles: [dbrole_readonly], comment: read-only viewer for meta database}&#xA;      - {name: dbuser_grafana  ,password: DBUser.Grafana  ,pgbouncer: true ,roles: [dbrole_admin]    ,comment: admin user for grafana database   }&#xA;      - {name: dbuser_bytebase ,password: DBUser.Bytebase ,pgbouncer: true ,roles: [dbrole_admin]    ,comment: admin user for bytebase database  }&#xA;      - {name: dbuser_kong     ,password: DBUser.Kong     ,pgbouncer: true ,roles: [dbrole_admin]    ,comment: admin user for kong api gateway   }&#xA;      - {name: dbuser_gitea    ,password: DBUser.Gitea    ,pgbouncer: true ,roles: [dbrole_admin]    ,comment: admin user for gitea service      }&#xA;      - {name: dbuser_wiki     ,password: DBUser.Wiki     ,pgbouncer: true ,roles: [dbrole_admin]    ,comment: admin user for wiki.js service    }&#xA;    pg_services:                        # extra services in addition to pg_default_services, array of service definition&#xA;      # standby service will route {ip|name}:5435 to sync replica&#39;s pgbouncer (5435-&amp;gt;6432 standby)&#xA;      - name: standby                   # required, service name, the actual svc name will be prefixed with `pg_cluster`, e.g: pg-meta-standby&#xA;        port: 5435                      # required, service exposed port (work as kubernetes service node port mode)&#xA;        ip: &#34;*&#34;                         # optional, service bind ip address, `*` for all ip by default&#xA;        selector: &#34;[]&#34;                  # required, service member selector, use JMESPath to filter inventory&#xA;        dest: default                   # optional, destination port, default|postgres|pgbouncer|&amp;lt;port_number&amp;gt;, &#39;default&#39; by default&#xA;        check: /sync                    # optional, health check url path, / by default&#xA;        backup: &#34;[? pg_role == `primary`]&#34;  # backup server selector&#xA;        maxconn: 3000                   # optional, max allowed front-end connection&#xA;        balance: roundrobin             # optional, haproxy load balance algorithm (roundrobin by default, other: leastconn)&#xA;        options: &#39;inter 3s fastinter 1s downinter 5s rise 3 fall 3 on-marked-down shutdown-sessions slowstart 30s maxconn 3000 maxqueue 128 weight 100&#39;&#xA;    pg_hba_rules:&#xA;      - {user: dbuser_view , db: all ,addr: infra ,auth: pwd ,title: &#39;allow grafana dashboard access cmdb from infra nodes&#39;}&#xA;    pg_vip_enabled: true&#xA;    pg_vip_address: 10.10.10.2/24&#xA;    pg_vip_interface: eth1&#xA;    node_crontab:  # make a full backup 1 am everyday&#xA;      - &#39;00 01 * * * postgres /pg/bin/pg-backup full&#39;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Example: Security Enhanced PG Cluster with Delayed Replica&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;pg-meta:      # 3 instance postgres cluster `pg-meta`&#xA;  hosts:&#xA;    10.10.10.10: { pg_seq: 1, pg_role: primary }&#xA;    10.10.10.11: { pg_seq: 2, pg_role: replica }&#xA;    10.10.10.12: { pg_seq: 3, pg_role: replica , pg_offline_query: true }&#xA;  vars:&#xA;    pg_cluster: pg-meta&#xA;    pg_conf: crit.yml&#xA;    pg_users:&#xA;      - { name: dbuser_meta , password: DBUser.Meta   , pgbouncer: true , roles: [ dbrole_admin ] , comment: pigsty admin user }&#xA;      - { name: dbuser_view , password: DBUser.Viewer , pgbouncer: true , roles: [ dbrole_readonly ] , comment: read-only viewer for meta database }&#xA;    pg_databases:&#xA;      - {name: meta ,baseline: cmdb.sql ,comment: pigsty meta database ,schemas: [pigsty] ,extensions: [{name: postgis, schema: public}, {name: timescaledb}]}&#xA;    pg_services:&#xA;      - { name: standby ,src_ip: &#34;*&#34; ,port: 5435 , dest: default ,selector: &#34;[]&#34; , backup: &#34;[? pg_role == `primary`]&#34; }&#xA;    pg_vip_enabled: true&#xA;    pg_vip_address: 10.10.10.2/24&#xA;    pg_vip_interface: eth1&#xA;&#xA;# OPTIONAL delayed cluster for pg-meta&#xA;pg-meta-delay:                    # delayed instance for pg-meta (1 hour ago)&#xA;  hosts: { 10.10.10.13: { pg_seq: 1, pg_role: primary, pg_upstream: 10.10.10.10, pg_delay: 1h } }&#xA;  vars: { pg_cluster: pg-meta-delay }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Example: Citus Distributed Cluster: 5 Nodes&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;all:&#xA;  children:&#xA;    pg-citus0: # citus coordinator, pg_group = 0&#xA;      hosts: { 10.10.10.10: { pg_seq: 1, pg_role: primary } }&#xA;      vars: { pg_cluster: pg-citus0 , pg_group: 0 }&#xA;    pg-citus1: # citus data node 1&#xA;      hosts: { 10.10.10.11: { pg_seq: 1, pg_role: primary } }&#xA;      vars: { pg_cluster: pg-citus1 , pg_group: 1 }&#xA;    pg-citus2: # citus data node 2&#xA;      hosts: { 10.10.10.12: { pg_seq: 1, pg_role: primary } }&#xA;      vars: { pg_cluster: pg-citus2 , pg_group: 2 }&#xA;    pg-citus3: # citus data node 3, with an extra replica&#xA;      hosts:&#xA;        10.10.10.13: { pg_seq: 1, pg_role: primary }&#xA;        10.10.10.14: { pg_seq: 2, pg_role: replica }&#xA;      vars: { pg_cluster: pg-citus3 , pg_group: 3 }&#xA;  vars:                               # global parameters for all citus clusters&#xA;    pg_mode: citus                    # pgsql cluster mode: citus&#xA;    pg_shard: pg-citus                # citus shard name: pg-citus&#xA;    patroni_citus_db: meta            # citus distributed database name&#xA;    pg_dbsu_password: DBUser.Postgres # all dbsu password access for citus cluster&#xA;    pg_users: [ { name: dbuser_meta ,password: DBUser.Meta ,pgbouncer: true ,roles: [ dbrole_admin ] } ]&#xA;    pg_databases: [ { name: meta ,extensions: [ { name: citus }, { name: postgis }, { name: timescaledb } ] } ]&#xA;    pg_hba_rules:&#xA;      - { user: &#39;all&#39; ,db: all  ,addr: 127.0.0.1/32 ,auth: ssl ,title: &#39;all user ssl access from localhost&#39; }&#xA;      - { user: &#39;all&#39; ,db: all  ,addr: intra        ,auth: ssl ,title: &#39;all user ssl access from intranet&#39;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Example: Redis Cluster/Sentinel/Standalone&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;redis-ms: # redis classic primary &amp;amp; replica&#xA;  hosts: { 10.10.10.10: { redis_node: 1 , redis_instances: { 6501: { }, 6502: { replica_of: &#39;10.10.10.10 6501&#39; } } } }&#xA;  vars: { redis_cluster: redis-ms ,redis_password: &#39;redis.ms&#39; ,redis_max_memory: 64MB }&#xA;&#xA;redis-meta: # redis sentinel x 3&#xA;  hosts: { 10.10.10.11: { redis_node: 1 , redis_instances: { 6001: { } ,6002: { } , 6003: { } } } }&#xA;  vars: { redis_cluster: redis-meta ,redis_password: &#39;redis.meta&#39; ,redis_mode: sentinel ,redis_max_memory: 16MB }&#xA;&#xA;redis-test: # redis native cluster: 3m x 3s&#xA;  hosts:&#xA;    10.10.10.12: { redis_node: 1 ,redis_instances: { 6501: { } ,6502: { } ,6503: { } } }&#xA;    10.10.10.13: { redis_node: 2 ,redis_instances: { 6501: { } ,6502: { } ,6503: { } } }&#xA;  vars: { redis_cluster: redis-test ,redis_password: &#39;redis.test&#39; ,redis_mode: cluster, redis_max_memory: 32MB }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Example: ETCD 3 Node Cluster&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;etcd: # dcs service for postgres/patroni ha consensus&#xA;  hosts:  # 1 node for testing, 3 or 5 for production&#xA;    10.10.10.10: { etcd_seq: 1 }  # etcd_seq required&#xA;    10.10.10.11: { etcd_seq: 2 }  # assign from 1 ~ n&#xA;    10.10.10.12: { etcd_seq: 3 }  # odd number please&#xA;  vars: # cluster level parameter override roles/etcd&#xA;    etcd_cluster: etcd  # mark etcd cluster name etcd&#xA;    etcd_safeguard: false # safeguard against purging&#xA;    etcd_clean: true # purge etcd during init process&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Example: Minio 3 Node Deployment&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;minio:&#xA;  hosts:&#xA;    10.10.10.10: { minio_seq: 1 }&#xA;    10.10.10.11: { minio_seq: 2 }&#xA;    10.10.10.12: { minio_seq: 3 }&#xA;  vars:&#xA;    minio_cluster: minio&#xA;    minio_data: &#39;/data{1...2}&#39;        # use two disk per node&#xA;    minio_node: &#39;${minio_cluster}-${minio_seq}.pigsty&#39; # minio node name pattern&#xA;    haproxy_services:&#xA;      - name: minio                     # [REQUIRED] service name, unique&#xA;        port: 9002                      # [REQUIRED] service port, unique&#xA;        options:&#xA;          - option httpchk&#xA;          - option http-keep-alive&#xA;          - http-check send meth OPTIONS uri /minio/health/live&#xA;          - http-check expect status 200&#xA;        servers:&#xA;          - { name: minio-1 ,ip: 10.10.10.10 , port: 9000 , options: &#39;check-ssl ca-file /etc/pki/ca.crt check port 9000&#39; }&#xA;          - { name: minio-2 ,ip: 10.10.10.11 , port: 9000 , options: &#39;check-ssl ca-file /etc/pki/ca.crt check port 9000&#39; }&#xA;          - { name: minio-3 ,ip: 10.10.10.12 , port: 9000 , options: &#39;check-ssl ca-file /etc/pki/ca.crt check port 9000&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://raw.githubusercontent.com/Vonng/pigsty/master/docs/CONFIG.md&#34;&gt;&lt;strong&gt;Configuration&lt;/strong&gt;&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Pigsty (/ˈpɪɡˌstaɪ/) is the abbreviation of &#34;&lt;strong&gt;P&lt;/strong&gt;ostgreSQL &lt;strong&gt;I&lt;/strong&gt;n &lt;strong&gt;G&lt;/strong&gt;reat &lt;strong&gt;STY&lt;/strong&gt;le.&#34;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Docs: &lt;a href=&#34;https://vonng.github.io/pigsty/&#34;&gt;https://vonng.github.io/pigsty/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Wiki: &lt;a href=&#34;https://github.com/Vonng/pigsty/wiki&#34;&gt;https://github.com/Vonng/pigsty/wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Website: &lt;a href=&#34;https://pigsty.cc/en/&#34;&gt;https://pigsty.cc/en/&lt;/a&gt; | &lt;a href=&#34;https://pigsty.cc/zh/&#34;&gt;https://pigsty.cc/zh/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;WeChat: Search &lt;code&gt;pigsty-cc&lt;/code&gt; to join the WeChat group.&lt;/p&gt; &#xA;&lt;p&gt;Telegram: &lt;a href=&#34;https://t.me/joinchat/gV9zfZraNPM3YjFh&#34;&gt;https://t.me/joinchat/gV9zfZraNPM3YjFh&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Discord: &lt;a href=&#34;https://discord.gg/wDzt5VyWEzr&#34;&gt;https://discord.gg/wDzt5VyWEzr&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Author: &lt;a href=&#34;https://vonng.com/en&#34;&gt;Vonng&lt;/a&gt; (&lt;a href=&#34;mailto:rh@vonng.com&#34;&gt;rh@vonng.com&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;License: &lt;a href=&#34;https://raw.githubusercontent.com/Vonng/pigsty/master/LICENSE&#34;&gt;AGPL-3.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Copyright 2018-2023 &lt;a href=&#34;mailto:rh@vonng.com&#34;&gt;rh@vonng.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>