<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-14T01:37:27Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>systemd/particleos</title>
    <updated>2025-04-14T01:37:27Z</updated>
    <id>tag:github.com,2025-04-14:/systemd/particleos</id>
    <link href="https://github.com/systemd/particleos" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ParticleOS&lt;/h1&gt; &#xA;&lt;p&gt;ParticleOS is a fully customizable immutable distribution implementing the concepts described in &lt;a href=&#34;https://0pointer.net/blog/fitting-everything-together.html&#34;&gt;Fitting Everything Together&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The crucial difference that makes ParticleOS unique compared to other immutable distributions is that users build the ParticleOS image themselves and sign it with their own keys instead of installing vendor signed images. This allows configuring the image to your liking by having full control over which distribution is used as the base and which packages are installed into the image.&lt;/p&gt; &#xA;&lt;p&gt;The ParticleOS image is built using &lt;a href=&#34;https://github.com/systemd/mkosi&#34;&gt;mkosi&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;First, configure the variant you&#39;d like to build in &lt;code&gt;mkosi.local.conf&lt;/code&gt;. For a desktop system, you&#39;ll want the &lt;code&gt;desktop&lt;/code&gt; profile and either the &lt;code&gt;gnome&lt;/code&gt; or the &lt;code&gt;kde&lt;/code&gt; profile.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;[Distribution]&#xA;Distribution=arch&#xA;&#xA;[Config]&#xA;Profiles=desktop,kde&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build the image, run &lt;code&gt;mkosi -f&lt;/code&gt; from the ParticleOS repository. Currently both &lt;code&gt;arch&lt;/code&gt; and &lt;code&gt;fedora&lt;/code&gt; are supported distributions. Implementing support for a new distribution (that&#39;s already supported in mkosi) is as simple as writing the necessary config files to install the required packages for that distribution.&lt;/p&gt; &#xA;&lt;p&gt;To update the system after installation, you clone the ParticleOS repository or your fork of it, make sure &lt;code&gt;mkosi.local.conf&lt;/code&gt; is configured to your liking and run &lt;code&gt;mkosi -ff sysupdate -- update --reboot&lt;/code&gt; which will update the system using &lt;code&gt;systemd-sysupdate&lt;/code&gt; and then reboot.&lt;/p&gt; &#xA;&lt;h2&gt;Using the OBS profile to fetch a newer systemd&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes ParticleOS adopts systemd features as soon as they get merged into systemd without waiting for an official release. That&#39;s why we recommend enabling the &lt;code&gt;obs&lt;/code&gt; profile to enable the systemd repositories on OBS (&lt;a href=&#34;https://software.opensuse.org//download.html?project=system%3Asystemd&amp;amp;package=systemd&#34;&gt;https://software.opensuse.org//download.html?project=system%3Asystemd&amp;amp;package=systemd&lt;/a&gt;) containing systemd packages which are built every day from systemd&#39;s git main branch.&lt;/p&gt; &#xA;&lt;p&gt;To enable the &lt;code&gt;obs&lt;/code&gt; profile, add the following to &lt;code&gt;mkosi.local.conf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;[Config]&#xA;Profiles=obs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building systemd from source&lt;/h2&gt; &#xA;&lt;p&gt;As an alternative to using the &lt;code&gt;obs&lt;/code&gt; profile, you can build systemd from source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/systemd/systemd&#xA;cd systemd&#xA;mkosi -f sandbox -- meson setup build&#xA;mkosi -f sandbox -- meson compile -C build&#xA;mkosi -t none -f&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then write the following to &lt;code&gt;mkosi.local.conf&lt;/code&gt; in the ParticleOS repository to use the artifacts from the systemd repository built by mkosi in ParticleOS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;[Content]&#xA;VolatilePackageDirectories=../systemd/build/mkosi.builddir/&amp;lt;distribution&amp;gt;~&amp;lt;release&amp;gt;~&amp;lt;arch&amp;gt;&#xA;&#xA;[Build]&#xA;ExtraSearchPaths=../systemd/build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure the distribution and release in &lt;code&gt;mkosi.local.conf&lt;/code&gt; are identical in the systemd checkout and the particleos checkout.&lt;/p&gt; &#xA;&lt;p&gt;To build a newer systemd, run &lt;code&gt;git pull&lt;/code&gt; in the systemd repository followed by &lt;code&gt;mkosi -f sandbox -- meson compile -C build&lt;/code&gt; and &lt;code&gt;mkosi -t none&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Signing keys&lt;/h2&gt; &#xA;&lt;p&gt;ParticleOS images are signed for Secure Boot with the user&#39;s keys. To generate a new key, run &lt;code&gt;mkosi genkey&lt;/code&gt;. The key must be stored safely, it will be required to sign updates.&lt;/p&gt; &#xA;&lt;p&gt;The key can be stored in a smartcard. Then you have to set the key in &lt;code&gt;mkosi.local.conf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[Validation]&#xA;SecureBootKey=pkcs11:object=Private key 1;type=private&#xA;SecureBootKeySource=provider:pkcs11&#xA;SignExpectedPcrKey=pkcs11:object=Private key 1;type=private&#xA;SignExpectedPcrKeySource=provider:pkcs11&#xA;VerityKey=pkcs11:object=Private key 1;type=private&#xA;VerityKeySource=provider:pkcs11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Before installing ParticleOS, make sure that Secure Boot is in setup mode on the target system. The Secure Boot mode can be configured in the UEFI firmware interface of the target system. If there&#39;s an existing Linux installation on the target system already, run &lt;code&gt;systemctl reboot --firmware-setup&lt;/code&gt; to reboot into the UEFI firmware interface. At the same time, make sure the UEFI firmware interface is password protected so an attacker cannot just disable Secure Boot again.&lt;/p&gt; &#xA;&lt;p&gt;To install ParticleOS with a USB drive, first build the image on an existing Linux system as described above. Then, burn it to the USB drive with &lt;code&gt;mkosi burn /dev/&amp;lt;usb&amp;gt;&lt;/code&gt;. Once burned to the USB drive, plug the USB drive into the system onto which you&#39;d like to install ParticleOS and boot into the USB drive via the firmware. Then, boot into the &#34;Installer&#34; UKI profile. When you end up in the root shell, run &lt;code&gt;systemd-repart --dry-run=no --empty=force --defer-partitions=swap,root,home /dev/&amp;lt;drive&amp;gt;&lt;/code&gt; to install ParticleOS to the system&#39;s drive. Finally, reboot into the target drive (not the USB) and the regular profile (not the installer one) to complete the installation.&lt;/p&gt; &#xA;&lt;h2&gt;LUKS recovery key&lt;/h2&gt; &#xA;&lt;p&gt;systemd doesn&#39;t support adding a recovery key to a partition enrolled with a token only (tpm/fido2). It is possible to use cryptenroll to add a recovery password to the root partition: &lt;code&gt;cryptsetup luksAddKey --token-type systemd-tpm2 /dev/&amp;lt;id&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Firmwares&lt;/h2&gt; &#xA;&lt;p&gt;Only firmwares that are dependencies of a kernel module are included, but some modules don&#39;t declare their dependencies properly. Dependencies of a module can be found with &lt;code&gt;modinfo&lt;/code&gt;. If you experience missing firmwares, you should report this to the module maintainer. &lt;code&gt;FirmwareInclude=&lt;/code&gt; can be added in &lt;code&gt;mkosi.local.conf&lt;/code&gt; to include the firmware regardless of whether a module depends on it.&lt;/p&gt; &#xA;&lt;h2&gt;Configuring systemd-homed after installation&lt;/h2&gt; &#xA;&lt;p&gt;After installing ParticleOS and logging into your systemd-homed managed user, run the following to configure systemd-homed for the best experience:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;homectl update \&#xA;    --auto-resize-mode=off \&#xA;    --disk-size=max \&#xA;    --luks-discard=on \&#xA;    --luks-extra-mount-options &#34;user_subvol_rm_allowed,compress=zstd:1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Disabling the auto resize mode avoids slow system boot and shutdown. Enabling LUKS discard makes sure the home directory doesn&#39;t become inaccessible because systemd-homed is unable to resize the home directory. The extra LUKS mount options are BTRFS mount options to make image builds with &lt;code&gt;mkosi&lt;/code&gt; faster by compressing data on disk and allowing users to delete subvolumes.&lt;/p&gt; &#xA;&lt;h2&gt;Default root password and user when booting in a virtual machine&lt;/h2&gt; &#xA;&lt;p&gt;If you boot ParticleOS in a virtual machine using &lt;code&gt;mkosi vm&lt;/code&gt;, the root password is automatically set to &lt;code&gt;particleos&lt;/code&gt; and a default user &lt;code&gt;particleos&lt;/code&gt; with password &lt;code&gt;particleos&lt;/code&gt; is created as well.&lt;/p&gt;</summary>
  </entry>
</feed>