<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-04T01:34:37Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>233boy/sing-box</title>
    <updated>2024-06-04T01:34:37Z</updated>
    <id>tag:github.com,2024-06-04:/233boy/sing-box</id>
    <link href="https://github.com/233boy/sing-box" rel="alternate"></link>
    <summary type="html">&lt;p&gt;最好用的 sing-box 一键安装脚本 &amp; 管理脚本，自动创建 REALITY 协议；支持 TUIC，Trojan，Hysteria2 等所有常见的协议&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;介绍&lt;/h1&gt; &#xA;&lt;p&gt;最好用的 sing-box 一键安装脚本 &amp;amp; 管理脚本&lt;/p&gt; &#xA;&lt;h1&gt;特点&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;快速安装&lt;/li&gt; &#xA; &lt;li&gt;无敌好用&lt;/li&gt; &#xA; &lt;li&gt;零学习成本&lt;/li&gt; &#xA; &lt;li&gt;自动化 TLS&lt;/li&gt; &#xA; &lt;li&gt;简化所有流程&lt;/li&gt; &#xA; &lt;li&gt;兼容 sing-box 命令&lt;/li&gt; &#xA; &lt;li&gt;强大的快捷参数&lt;/li&gt; &#xA; &lt;li&gt;支持所有常用协议&lt;/li&gt; &#xA; &lt;li&gt;一键添加 VLESS-REALITY (默认)&lt;/li&gt; &#xA; &lt;li&gt;一键添加 TUIC&lt;/li&gt; &#xA; &lt;li&gt;一键添加 Trojan&lt;/li&gt; &#xA; &lt;li&gt;一键添加 Hysteria2&lt;/li&gt; &#xA; &lt;li&gt;一键添加 Shadowsocks 2022&lt;/li&gt; &#xA; &lt;li&gt;一键添加 VMess-(TCP/HTTP/QUIC)&lt;/li&gt; &#xA; &lt;li&gt;一键添加 VMess-(WS/H2/HTTPUpgrade)-TLS&lt;/li&gt; &#xA; &lt;li&gt;一键添加 VLESS-(WS/H2/HTTPUpgrade)-TLS&lt;/li&gt; &#xA; &lt;li&gt;一键添加 Trojan-(WS/H2/HTTPUpgrade)-TLS&lt;/li&gt; &#xA; &lt;li&gt;一键启用 BBR&lt;/li&gt; &#xA; &lt;li&gt;一键更改伪装网站&lt;/li&gt; &#xA; &lt;li&gt;一键更改 (端口/UUID/密码/域名/路径/加密方式/SNI/等...)&lt;/li&gt; &#xA; &lt;li&gt;还有更多...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;设计理念&lt;/h1&gt; &#xA;&lt;p&gt;设计理念为：&lt;strong&gt;高效率，超快速，极易用&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;脚本基于作者的自身使用需求，以 &lt;strong&gt;多配置同时运行&lt;/strong&gt; 为核心设计&lt;/p&gt; &#xA;&lt;p&gt;并且专门优化了，添加、更改、查看、删除、这四项常用功能&lt;/p&gt; &#xA;&lt;p&gt;你只需要一条命令即可完成 添加、更改、查看、删除、等操作&lt;/p&gt; &#xA;&lt;p&gt;例如，添加一个配置仅需不到 1 秒！瞬间完成添加！其他操作亦是如此！&lt;/p&gt; &#xA;&lt;p&gt;脚本的参数非常高效率并且超级易用，请掌握参数的使用&lt;/p&gt; &#xA;&lt;h1&gt;文档&lt;/h1&gt; &#xA;&lt;p&gt;安装及使用：&lt;a href=&#34;https://233boy.com/sing-box/sing-box-script/&#34;&gt;https://233boy.com/sing-box/sing-box-script/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;帮助&lt;/h1&gt; &#xA;&lt;p&gt;使用：&lt;code&gt;sing-box help&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sing-box script v1.0 by 233boy&#xA;Usage: sing-box [options]... [args]...&#xA;&#xA;基本:&#xA;   v, version                                      显示当前版本&#xA;   ip                                              返回当前主机的 IP&#xA;   pbk                                             同等于 sing-box generate reality-keypair&#xA;   get-port                                        返回一个可用的端口&#xA;   ss2022                                          返回一个可用于 Shadowsocks 2022 的密码&#xA;&#xA;一般:&#xA;   a, add [protocol] [args... | auto]              添加配置&#xA;   c, change [name] [option] [args... | auto]      更改配置&#xA;   d, del [name]                                   删除配置**&#xA;   i, info [name]                                  查看配置&#xA;   qr [name]                                       二维码信息&#xA;   url [name]                                      URL 信息&#xA;   log                                             查看日志&#xA;更改:&#xA;   full [name] [...]                               更改多个参数&#xA;   id [name] [uuid | auto]                         更改 UUID&#xA;   host [name] [domain]                            更改域名&#xA;   port [name] [port | auto]                       更改端口&#xA;   path [name] [path | auto]                       更改路径&#xA;   passwd [name] [password | auto]                 更改密码&#xA;   key [name] [Private key | atuo] [Public key]    更改密钥&#xA;   method [name] [method | auto]                   更改加密方式&#xA;   sni [name] [ ip | domain]                       更改 serverName&#xA;   new [name] [...]                                更改协议&#xA;   web [name] [domain]                             更改伪装网站&#xA;&#xA;进阶:&#xA;   dns [...]                                       设置 DNS&#xA;   dd, ddel [name...]                              删除多个配置**&#xA;   fix [name]                                      修复一个配置&#xA;   fix-all                                         修复全部配置&#xA;   fix-caddyfile                                   修复 Caddyfile&#xA;   fix-config.json                                 修复 config.json&#xA;   import                                          导入 sing-box/v2ray 脚本配置&#xA;&#xA;管理:&#xA;   un, uninstall                                   卸载&#xA;   u, update [core | sh | caddy] [ver]             更新&#xA;   U, update.sh                                    更新脚本&#xA;   s, status                                       运行状态&#xA;   start, stop, restart [caddy]                    启动, 停止, 重启&#xA;   t, test                                         测试运行&#xA;   reinstall                                       重装脚本&#xA;&#xA;测试:&#xA;   debug [name]                                    显示一些 debug 信息, 仅供参考&#xA;   gen [...]                                       同等于 add, 但只显示 JSON 内容, 不创建文件, 测试使用&#xA;   no-auto-tls [...]                               同等于 add, 但禁止自动配置 TLS, 可用于 *TLS 相关协议&#xA;其他:&#xA;   bbr                                             启用 BBR, 如果支持&#xA;   bin [...]                                       运行 sing-box 命令, 例如: sing-box bin help&#xA;   [...] [...]                                     兼容绝大多数的 sing-box 命令, 例如: sing-box generate uuid&#xA;   h, help                                         显示此帮助界面&#xA;&#xA;谨慎使用 del, ddel, 此选项会直接删除配置; 无需确认&#xA;反馈问题) https://github.com/233boy/sing-box/issues&#xA;文档(doc) https://233boy.com/sing-box/sing-box-script/&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>monlor/docker-xiaoya</title>
    <updated>2024-06-04T01:34:37Z</updated>
    <id>tag:github.com,2024-06-04:/monlor/docker-xiaoya</id>
    <link href="https://github.com/monlor/docker-xiaoya" rel="alternate"></link>
    <summary type="html">&lt;p&gt;使用docker-compose以更优雅的方式来部署小雅服务&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;小雅影视库部署&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.monlor.com/2024/6/3/SCR-20240603-kpvb.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/monlor/docker-xiaoya/actions/workflows/docker-build.yml&#34;&gt;&lt;img src=&#34;https://github.com/monlor/docker-xiaoya/actions/workflows/docker-build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/repo-size/monlor/docker-xiaoya.svg?style=flat&#34; alt=&#34;repo size&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/monlor/docker-xiaoya/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/monlor/docker-xiaoya&#34; alt=&#34;GitHub release (latest by date)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/monlor/docker-xiaoya/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Contributors-3-orange.svg?sanitize=true&#34; alt=&#34;All Contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://afdian.net/a/monlor&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%E7%88%B1%E5%8F%91%E7%94%B5-monlor-purple&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;🚀 使用 Docker Compose 一键部署服务，兼容群晖，Linux，Windows，Mac，包含所有X86和Arm架构&lt;/p&gt; &#xA;&lt;p&gt;✨ 部署alist+下载元数据+部署emby/jellyfin服务全流程自动，无需人工干预&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;所有脚本集成到 Docker 镜像，避免污染系统环境&lt;/li&gt; &#xA; &lt;li&gt;合并jellyfin和emby的x86和arm镜像，部署时无需区分镜像名&lt;/li&gt; &#xA; &lt;li&gt;集成云盘清理脚本到alist服务，无需单独部署&lt;/li&gt; &#xA; &lt;li&gt;通过环境变量配置阿里云盘token，无需映射文件&lt;/li&gt; &#xA; &lt;li&gt;jellyfin和emby启动时自动进行依赖检查，等待元数据下载完成，自动添加hosts&lt;/li&gt; &#xA; &lt;li&gt;完全兼容所有能运行docker的x86和arm设备&lt;/li&gt; &#xA; &lt;li&gt;支持自动清理阿里云盘，自动同步小雅元数据&lt;/li&gt; &#xA; &lt;li&gt;自动更新内部的alist，emby，jellyfin访问地址，无需手动配置&lt;/li&gt; &#xA; &lt;li&gt;通过metadata服务自动更新emby配置和元数据&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;一键部署&lt;/h2&gt; &#xA;&lt;h3&gt;部署或更新脚本&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;脚本支持重复执行&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash -c &#34;$(curl -fsSL https://raw.githubusercontent.com/monlor/docker-xiaoya/main/install.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;使用加速源（我的加速源也可能帮你减速🤣）&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export GH_PROXY=https://gh.monlor.com/ IMAGE_PROXY=ghcr.monlor.com &amp;amp;&amp;amp; bash -c &#34;$(curl -fsSL ${GH_PROXY}https://raw.githubusercontent.com/monlor/docker-xiaoya/main/install.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;卸载脚本&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash -c &#34;$(curl -fsSL https://raw.githubusercontent.com/monlor/docker-xiaoya/main/uninstall.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;使用加速源（我的加速源也可能帮你减速🤣）&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export GH_PROXY=https://gh.monlor.com/ IMAGE_PROXY=ghcr.monlor.com &amp;amp;&amp;amp; bash -c &#34;$(curl -fsSL ${GH_PROXY}https://raw.githubusercontent.com/monlor/docker-xiaoya/main/uninstall.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;部署配置推荐&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;部署方案&lt;/th&gt; &#xA;   &lt;th&gt;CPU&lt;/th&gt; &#xA;   &lt;th&gt;内存&lt;/th&gt; &#xA;   &lt;th&gt;硬盘&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Alist + Emby&lt;/td&gt; &#xA;   &lt;td&gt;2核&lt;/td&gt; &#xA;   &lt;td&gt;4G&lt;/td&gt; &#xA;   &lt;td&gt;150G&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;仅部署 Alist&lt;/td&gt; &#xA;   &lt;td&gt;1核&lt;/td&gt; &#xA;   &lt;td&gt;512M&lt;/td&gt; &#xA;   &lt;td&gt;512M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Alist + Emby + Jellyfin&lt;/td&gt; &#xA;   &lt;td&gt;2核&lt;/td&gt; &#xA;   &lt;td&gt;4G&lt;/td&gt; &#xA;   &lt;td&gt;200G&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Alist + Jellyfin&lt;/td&gt; &#xA;   &lt;td&gt;2核&lt;/td&gt; &#xA;   &lt;td&gt;4G&lt;/td&gt; &#xA;   &lt;td&gt;150G&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;配置示例&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/monlor/docker-xiaoya/main/docker-compose-alist.yml&#34;&gt;只部署小雅alist&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/monlor/docker-xiaoya/main/docker-compose.yml&#34;&gt;部署小雅alist+emby&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/monlor/docker-xiaoya/main/docker-compose-jellyfin.yml&#34;&gt;部署小雅alist+jellyfin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/monlor/docker-xiaoya/main/docker-compose-all.yml&#34;&gt;部署小雅alist+emby+jellyfin&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;服务组件介绍&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/monlor/docker-xiaoya/main/alist&#34;&gt;Alist&lt;/a&gt;: 提供资源在线播放，WebDav服务&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/monlor/docker-xiaoya/main/metadata&#34;&gt;Metadata&lt;/a&gt;: Emby和Jellyfin的元数据管理&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/monlor/docker-xiaoya/main/emby&#34;&gt;Emby&lt;/a&gt;: 用家庭影视库的方式，可视化展示Alist中的资源&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/monlor/docker-xiaoya/main/jellyfin&#34;&gt;Jellyfin&lt;/a&gt;: Emby的开源版本，功能是一样的&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;发烧友测试版&lt;/h2&gt; &#xA;&lt;p&gt;以下是测试版一键部署脚本，使用此脚本可以体验最新的功能，具体可以查看&lt;a href=&#34;https://github.com/monlor/docker-xiaoya/commits/main/&#34;&gt;commit&lt;/a&gt;更新了哪些测试版专属功能，&lt;strong&gt;此脚本仅限发烧友使用，需要有一定的解决问题能力&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export VERSION=main &amp;amp;&amp;amp; bash -c &#34;$(curl -fsSL ${GH_PROXY}https://raw.githubusercontent.com/monlor/docker-xiaoya/${VERSION:-main}/install.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;手动部署&lt;/h2&gt; &#xA;&lt;p&gt;仅展示小雅alist+emby的部署方式&lt;/p&gt; &#xA;&lt;h3&gt;使用Docker Compose&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;创建compose文件夹&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir /opt/xiaoya&#xA;cd /opt/xiaoya&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;下载配置&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -#LO https://raw.githubusercontent.com/monlor/docker-xiaoya/main/docker-compose.yml&#xA;curl -#LO https://raw.githubusercontent.com/monlor/docker-xiaoya/main/env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;修改配置env里面的阿里云盘相关变量，启动服务&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;查看日志&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker compose logs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;使用docker部署【不推荐】&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;创建volume&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker volume create xiaoya&#xA;docker volume create media&#xA;docker volume create config&#xA;docker volume create meta&#xA;docker volume create cache&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;创建网络&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker network create xiaoya&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;启动小雅alist，修改下面的阿里云盘配置，再执行命令&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d --name alist \&#xA;    -v xiaoya:/data \&#xA;    -p 5678:5678 -p 2345:2345 -p 2346:2346 \&#xA;    -e TZ=Asia/Shanghai \&#xA;    -e ALIYUN_TOKEN=阿里云盘TOKEN \&#xA;    -e ALIYUN_OPEN_TOKEN=阿里云盘Open Token \&#xA;    -e ALIYUN_FOLDER_ID=阿里云盘文件夹ID \&#xA;    -e AUTO_UPDATE_ENABLED=true \&#xA;    -e AUTO_CLEAR_ENABLED=true \&#xA;    -e EMBY_ADDR=http://emby:6908 \&#xA;    --network=xiaoya \&#xA;    ghcr.io/monlor/xiaoya-alist &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;启动metadata用于元数据同步&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d --name metadata \&#xA;    -e LANG=C.UTF-8 \&#xA;    -e EMBY_ENABLED=true \&#xA;    -e JELLYFIN_ENABLED=false \&#xA;    -e AUTO_UPDATE_EMBY_CONFIG_ENABLED=true \&#xA;    -e ALIST_ADDR=http://alist:5678 \&#xA;    -e EMBY_ADDR=http://emby:6908 \&#xA;    -v xiaoya:/etc/xiaoya \&#xA;    -v media:/media/xiaoya \&#xA;    -v config:/media/config \&#xA;    -v cache:/media/config/cache \&#xA;    -v meta:/media/temp \&#xA;    --network=xiaoya \&#xA;    ghcr.io/monlor/xiaoya-metadata&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;启动emby服务&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d --name emby&#xA;    -e TZ=Asia/Shanghai \&#xA;    -e GIDLIST=0 \&#xA;    -e ALIST_ADDR=http://alist:5678 \&#xA;    --privileged \&#xA;    --device /dev/dri:/dev/dri \&#xA;    -v media:/media \&#xA;    -v config:/config \&#xA;    -v cache:/cache \&#xA;    -p 6908:6908 \&#xA;    --network=xiaoya \&#xA;    ghcr.io/monlor/xiaoya-embyserver&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;查看日志&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker logs alist&#xA;docker logs metadata&#xA;docker logs emby&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;安全建议&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;开启alist的登陆，alist服务设置&lt;code&gt;FORCE_LOGIN=true&lt;/code&gt;，设置webdav的密码&lt;code&gt;WEBDAV_PASSWORD&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;在emby控制台修改ApiKey，这个key需要配置到metadata和alist服务，变量名：&lt;code&gt;EMBY_APIKEY&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;赞助&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://afdian.net/a/monlor&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%E7%88%B1%E5%8F%91%E7%94%B5-monlor-purple&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34;&gt;Creative Commons Attribution-NonCommercial 4.0 International License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;参考&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/DDS-Derek/xiaoya-alist&#34;&gt;https://github.com/DDS-Derek/xiaoya-alist&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.kdocs.cn/l/cvEe3cv6dGkH&#34;&gt;https://www.kdocs.cn/l/cvEe3cv6dGkH&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://xiaoyaliu.notion.site/xiaoya-docker-69404af849504fa5bcf9f2dd5ecaa75f&#34;&gt;https://xiaoyaliu.notion.site/xiaoya-docker-69404af849504fa5bcf9f2dd5ecaa75f&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>