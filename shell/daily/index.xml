<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-08T01:42:38Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mb1986/rm-hacks</title>
    <updated>2024-01-08T01:42:38Z</updated>
    <id>tag:github.com,2024-01-08:/mb1986/rm-hacks</id>
    <link href="https://github.com/mb1986/rm-hacks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Small improvements and tweaks for rM devices, covering both rM1 and rM2.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://remarkable.com/store/remarkable&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/rM1-supported-green&#34; alt=&#34;rm1&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://remarkable.com/store/remarkable-2&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/rM2-supported-green&#34; alt=&#34;rm2&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/ATqQGfu&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/385916768696139794.svg?label=reMarkable&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/bgVXW2bchN&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1153374327123759104.svg?label=rM%20Hacks&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=ffb759&amp;amp;labelColor=d99c4c&#34; alt=&#34;rM Hacks Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;rM Hacks&lt;/h1&gt; &#xA;&lt;p&gt;This repository is meant to share small improvements and tweaks for rM devices, covering both revisions (1 and 2). These changes don&#39;t alter the application&#39;s core code directly but impact how it functions. Before using them, please read the disclaimer below.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I&#39;d like to give credit to a few very supportive individuals who dedicate their time and effort to help in the process of tools development, testing and reviving hacks. Without their contributions, this entire project might not be alive. And here they are:&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/ReemX&#34;&gt;&lt;img src=&#34;https://github.com/ReemX.png&#34; alt=&#34;ReemX&#34; width=&#34;60&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/atngames&#34;&gt;&lt;img src=&#34;https://github.com/atngames.png&#34; alt=&#34;atngames&#34; width=&#34;60&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/beelux&#34;&gt;&lt;img src=&#34;https://github.com/beelux.png&#34; alt=&#34;beelux&#34; width=&#34;60&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ard0gg&#34;&gt;&lt;img src=&#34;https://github.com/ard0gg.png&#34; alt=&#34;ard0gg&#34; width=&#34;60&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains patches and modifications for third-party software, which are provided &#34;as-is&#34; and without warranty of any kind, express, implied, or otherwise, including but not limited to the warranties of merchantability, fitness for a particular purpose, and non-infringement.&lt;/p&gt; &#xA;&lt;p&gt;The patches provided here are intended to enhance or modify the functionality of the respective third-party software, and their use is at your own risk.&lt;/p&gt; &#xA;&lt;p&gt;Please note that the original software is subject to its own licensing terms and conditions, and this disclaimer only covers the patches and modifications provided within this repository. Ensure that you comply with the original software&#39;s licensing requirements when using these patches.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;For your convenience, we&#39;ve provided an automated installation script.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Connect to your rM device via SSH.&lt;/li&gt; &#xA; &lt;li&gt;Paste the below command, then press Enter.&lt;/li&gt; &#xA; &lt;li&gt;Follow the on-screen instructions.&lt;/li&gt; &#xA; &lt;li&gt;If prompted restart your device.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sh -c &#34;$(wget https://raw.githubusercontent.com/mb1986/rm-hacks/main/install.sh -O-)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Uninstallation&lt;/h3&gt; &#xA;&lt;p&gt;If, for some reason, you&#39;d like to remove the patches, please follow the same sequence as for installation, but use the command below in step 2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sh -c &#34;$(wget https://raw.githubusercontent.com/mb1986/rm-hacks/main/install.sh -O-)&#34; _ uninstall&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Patches&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Version&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;3.9.3.1986&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;3.8.3.1976&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;3.8.2.1965&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;3.7.0.1930&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;3.6.1.1894&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;3.3.2.1666&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;0.0.8&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;0.0.7&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;⚠&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;0.0.6&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;0.0.5&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;0.0.4&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;0.0.3&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;0.0.2&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;0.0.1&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;If you&#39;re still using a device with version 2.x, you might prefer using &lt;a href=&#34;https://github.com/ddvk/remarkable-hacks&#34;&gt;ddvk&#39;s Binary Patches&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Version 0.0.8&lt;/h3&gt; &#xA;&lt;p&gt;This patch includes all the hacks from the previous one, along with the following:&lt;/p&gt; &#xA;&lt;h4&gt;New features:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bookmarks feature &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Tap in the top corner opposite the toolbar to toggle a bookmark for the current page.&lt;/li&gt; &#xA;   &lt;li&gt;Long press in the top corner opposite the toolbar to create a named bookmark or to change the name of an existing one.&lt;/li&gt; &#xA;   &lt;li&gt;New toolbar bookmarks button showing all bookmarks in the currently open document.&lt;/li&gt; &#xA;   &lt;li&gt;Long press the bookmarks toolbar button to toggle a bookmark for the current page.&lt;/li&gt; &#xA;   &lt;li&gt;Long press the bookmark grid item from the bookmarks menu to rename the bookmark.&lt;/li&gt; &#xA;   &lt;li&gt;New configuration section for bookmarks in the settings.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Compressed list for documents navigation.&lt;/li&gt; &#xA; &lt;li&gt;Page numbers at the bottom of document pages are now hidden.&lt;/li&gt; &#xA; &lt;li&gt;Expanded the area for the &#39;swipe up to sleep&#39; gesture.&lt;/li&gt; &#xA; &lt;li&gt;Toolbar WiFi icon is now hidden when the WiFi connection is disabled.&lt;/li&gt; &#xA; &lt;li&gt;The toolbar battery icon changes to a lightning icon when the device is charging.&lt;/li&gt; &#xA; &lt;li&gt;Improved behavior of the table of contents and page overview toolbar buttons.&lt;/li&gt; &#xA; &lt;li&gt;Tags are now shown in alphabetical order in the Menu/Tags view.&lt;/li&gt; &#xA; &lt;li&gt;Document-level toggle to disable the straight lines feature.&lt;/li&gt; &#xA; &lt;li&gt;The hacks version is also displayed in the hacks configuration view header.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Bug fixes:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Page numbers toolbar button is now properly aligned in left-handed mode.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Known issues:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The bookmarks toolbar button does not fit in the landscape mode.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Version 0.0.7&lt;/h3&gt; &#xA;&lt;p&gt;This patch includes all the hacks from the previous one, along with the following:&lt;/p&gt; &#xA;&lt;h4&gt;New features:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Toolbar button showing the current page and the page count, clicking it opens fast page scroll.&lt;/li&gt; &#xA; &lt;li&gt;Battery level and WiFi signal strength indicators available on the bottom of the toolbar.&lt;/li&gt; &#xA; &lt;li&gt;Screen refresh trigger via five-finger tap - natively available but disabled by experimental flag.&lt;/li&gt; &#xA; &lt;li&gt;Additional table-of-contents toolbar button.&lt;/li&gt; &#xA; &lt;li&gt;Enable sleep mode by swiping up from the top of the screen (light or deep sleep selectable in Settings/Security).&lt;/li&gt; &#xA; &lt;li&gt;Display &lt;code&gt;...zzZ&lt;/code&gt; in the top right corner during light sleep mode instead of a big black banner.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Bug fixes:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration items may be scrolled vertically.&lt;/li&gt; &#xA; &lt;li&gt;Pen thickness and color indicator show only for the tools that make use of them.&lt;/li&gt; &#xA; &lt;li&gt;All the tools remember last two strokes and colors separately.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Other changes:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Document-level clock moved from the bottom to the top of the toolbar.&lt;/li&gt; &#xA; &lt;li&gt;Make clock toggle option permanent between restarts.&lt;/li&gt; &#xA; &lt;li&gt;Changed names of document-level toggles (i.e. remove &#34;Disabled&#34; and &#34;Enabled&#34; words).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Version 0.0.6&lt;/h3&gt; &#xA;&lt;p&gt;This patch includes all the hacks from the previous one, along with the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Document-level toggle buttons (accessible through the &lt;em&gt;Share and Convert&lt;/em&gt; menu): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Show/hide clock&lt;/li&gt; &#xA;   &lt;li&gt;Suppress all swipes and gestures&lt;/li&gt; &#xA;   &lt;li&gt;Toggle WiFi&lt;/li&gt; &#xA;   &lt;li&gt;Disable/enable rM1 buttons&lt;/li&gt; &#xA;   &lt;li&gt;Toggle automatic updates&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Cycle between two recent documents by swiping two fingers up from the bottom of the page.&lt;/li&gt; &#xA; &lt;li&gt;Gesture to swap the last two pen thicknesses (strokes) by swiping one finger down in the top right corner (right-handed)/left corner (left-handed).&lt;/li&gt; &#xA; &lt;li&gt;Gesture to swap the last two colors by swiping one finger up in the top right corner (right-handed)/left corner (left-handed).&lt;/li&gt; &#xA; &lt;li&gt;Clock in the bottom of the toolbar.&lt;/li&gt; &#xA; &lt;li&gt;Configuration setting to disable the hack that adds additional stroke sizes.&lt;/li&gt; &#xA; &lt;li&gt;Staedtler pencil eraser support (hopefully).&lt;/li&gt; &#xA; &lt;li&gt;Taller area for the writing tool/eraser switch gesture.&lt;/li&gt; &#xA; &lt;li&gt;Better placement of the back button on hacks configuration views.&lt;/li&gt; &#xA; &lt;li&gt;Fewer stroke sizes for the eraser compared to other tools, and fixed eraser stroke sizes panel overflow.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Version 0.0.5&lt;/h3&gt; &#xA;&lt;p&gt;This patch includes all the hacks from the previous one, along with the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A brand new settings page to configure which hacks should be enabled and which should not (Menu ⇝ Settings ⇝ rM Hacks). By default, all the hacks are enabled, and the configuration will be preserved between restarts.&lt;/li&gt; &#xA; &lt;li&gt;Lamy button double-click now triggers an undo action.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Version 0.0.4&lt;/h3&gt; &#xA;&lt;p&gt;This patch includes all the hacks from the previous one, along with the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Additional stroke sizes (0.5, 1.5, 5, 8, 13).&lt;/li&gt; &#xA; &lt;li&gt;Gesture to switch between the last two tools: swipe one finger down in the top left corner (right-handed)/right corner (left-handed).&lt;/li&gt; &#xA; &lt;li&gt;Gesture to switch between the writing tool and eraser: swipe one finger up in the top left corner (right-handed)/right corner (left-handed).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Version 0.0.3&lt;/h3&gt; &#xA;&lt;p&gt;This patch includes all the hacks from the previous one, along with the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The toolbar may be opened or closed with a one-finger swipe down.&lt;/li&gt; &#xA; &lt;li&gt;The Lamy button, in addition to erasing when pressed, toggles the last two tools when clicked.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Version 0.0.2&lt;/h3&gt; &#xA;&lt;p&gt;This patch includes all the hacks from the previous one, along with the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;New notebook name defaults to the current date and time (format: &lt;code&gt;yyyy-mm-dd_hhmmss&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Version 0.0.1&lt;/h3&gt; &#xA;&lt;p&gt;Our first patch, a pilot and proof of concept, is designed to bring back some popular features for devices updated to version 3.x.&lt;/p&gt; &#xA;&lt;p&gt;This patch includes the following changes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Lamy Pen button now works for erasing (erasing only for now). To use this feature, install &lt;a href=&#34;https://github.com/ddvk/remarkable-stylus&#34;&gt;ddvk&#39;s Qt Plugin for Lamy Pen&lt;/a&gt; first. You will not need to install ddvk-hacks like it recommends, as this replaces that dependency.&lt;/li&gt; &#xA; &lt;li&gt;The toolbar icon changes from the default open icon to a brush icon.&lt;/li&gt; &#xA; &lt;li&gt;The close icon (x) in the top right corner (right-handed)/left corner (left-handed) has been removed. You can still close the document by swiping one finger down from the top.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For information on the licensing conditions of this software, please refer to the accompanying &lt;a href=&#34;https://raw.githubusercontent.com/mb1986/rm-hacks/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>binkley/modern-java-practices</title>
    <updated>2024-01-08T01:42:38Z</updated>
    <id>tag:github.com,2024-01-08:/binkley/modern-java-practices</id>
    <link href="https://github.com/binkley/modern-java-practices" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modern Java/JVM Build Practices&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/LICENSE.md&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/images/public-domain.svg?sanitize=true&#34; alt=&#34;Public Domain&#34; align=&#34;right&#34; width=&#34;20%&#34; height=&#34;auto&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;Modern Java/JVM Build Practices&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/binkley/modern-java-practices/actions&#34;&gt;&lt;img src=&#34;https://github.com/binkley/modern-java-practices/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/binkley/modern-java-practices/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-pr/binkley/modern-java-practices.svg?sanitize=true&#34; alt=&#34;pull requests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/binkley/modern-java-practices/issues/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/binkley/modern-java-practices.svg?sanitize=true&#34; alt=&#34;issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://snyk.io/test/github/binkley/modern-java-practices&#34;&gt;&lt;img src=&#34;https://snyk.io/test/github/binkley/modern-java-practices/badge.svg?sanitize=true&#34; alt=&#34;vulnerabilities&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://unlicense.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Public%20Domain-blue.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Modern Java/JVM Build Practices&lt;/strong&gt; is an article-as-repo on building modern Java/JVM projects using &lt;a href=&#34;https://docs.gradle.org/current/userguide/userguide.html&#34;&gt;Gradle&lt;/a&gt; and &lt;a href=&#34;https://maven.apache.org/what-is-maven.html&#34;&gt;Maven&lt;/a&gt;, and a &lt;em&gt;starter project&lt;/em&gt; for Java.&lt;/p&gt; &#xA;&lt;p&gt;The focus is &lt;em&gt;best build practices&lt;/em&gt; and &lt;em&gt;project hygiene&lt;/em&gt;. This document is &lt;em&gt;agnostic&lt;/em&gt; between Gradle and Maven: discussion in each section covers both tools (alphabetical order, Gradle before Maven). See &lt;a href=&#34;https://blog.frankel.ch/final-take-gradle/&#34;&gt;&lt;em&gt;My Final Take on Gradle (vs. Maven)&lt;/em&gt;&lt;/a&gt; for an opinionated view.&lt;/p&gt; &#xA;&lt;p&gt;This is not a JVM starter for only Java: I use it for starting my Kotlin projects, and substitute complilation and code quality plugins. Any language on the JVM can find practices and tips.&lt;/p&gt; &#xA;&lt;p&gt;As a &lt;em&gt;guide&lt;/em&gt;, this project focuses on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A quick starter for JVM projects using Gradle or Maven. &lt;a href=&#34;https://github.com/binkley/modern-java-practices/fork&#34;&gt;Fork&lt;/a&gt; me, &lt;a href=&#34;https://github.com/binkley/modern-java-practices.git&#34;&gt;clone&lt;/a&gt; me, copy/paste freely! I am &lt;a href=&#34;http://unlicense.org/&#34;&gt;&lt;em&gt;Public Domain&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Discuss—and illustrate (through code)—sensible default practices; highlight good build tools and plugins&lt;/li&gt; &#xA; &lt;li&gt;Document pitfalls that turned up. Some were easy to address after Internet search; some were challenging (see &#34;Tips&#34; sections)&lt;/li&gt; &#xA; &lt;li&gt;Do not be an &#34;all-in-one&#34; solution. You know your circumstances best. I hope this project helps you discover build improvements you love. Please share with others through &lt;a href=&#34;https://github.com/binkley/modern-java-practices/issues&#34;&gt;issues&lt;/a&gt; or &lt;a href=&#34;https://github.com/binkley/modern-java-practices/pulls&#34;&gt;PRs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Two recurring themes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Shift problems left&lt;/em&gt; — Find issues earlier in your build—before you see them in production&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Make developer life easier&lt;/em&gt; — Automate build tasks often done by hand: get your build to complain (&lt;em&gt;fail&lt;/em&gt;) locally before sharing with your team, or fail in CI before deployment&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;What is a &lt;em&gt;Starter&lt;/em&gt;?&lt;/h3&gt; &#xA;&lt;p&gt;A project starter has several goals:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Help a new project get up and running with minimal fuss&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This starter project is focused on &lt;em&gt;build&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easy on-ramp for new folks to try out your project for themselves&lt;/li&gt; &#xA; &lt;li&gt;Support new contributors to your project that they become productive quickly&lt;/li&gt; &#xA; &lt;li&gt;Support current contributors in the build, get out of their way, and make everyday things easy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This starter project has minimal dependencies. The focus is on Gradle and Maven plugins and configuration so that you and contributors can focus on the code, not on setting up the build.&lt;/p&gt; &#xA;&lt;h3&gt;Summing up&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;I&#39;m not a great programmer; I&#39;m just a good programmer with great habits.&lt;/em&gt; — &lt;a href=&#34;https://www.goodreads.com/quotes/532211-i-m-not-a-great-programmer-i-m-just-a-good-programmer&#34;&gt;Kent Beck&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Make it work, make it right, make it fast&lt;/em&gt; — &lt;a href=&#34;http://wiki.c2.com/?MakeItWorkMakeItRightMakeItFast&#34;&gt;C2 Wiki&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;NB&lt;/strong&gt; — This is a &lt;em&gt;living document&lt;/em&gt;. The project is frequently updated to pick up new dependency or plugin versions, and improved practices; this README updates recommendations. This is part of what &lt;em&gt;great habits&lt;/em&gt; look like. See &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#reusing-this-project&#34;&gt;&lt;em&gt;Reusing this project&lt;/em&gt;&lt;/a&gt; for tips on pulling in updates.&lt;/p&gt; &#xA;&lt;p&gt;(Credit to Yegor Bugayenko for &lt;a href=&#34;https://www.yegor256.com/2019/04/23/elegant-readme.html&#34;&gt;&lt;em&gt;Elegant READMEs&lt;/em&gt;&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;a title=&#34;Try it&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/images/try.png&#34; alt=&#34;Try...&#34; align=&#34;right&#34; width=&#34;20%&#34; height=&#34;auto&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Try it&lt;/h2&gt; &#xA;&lt;p&gt;After cloning or forking this project to your machine, try out the build combination that makes sense for you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ./gradlew build  # Local-only build&#xA;$ ./batect build-with-gradle  # CI build with Batect&#xA;$ earthly +build-with-gradle  # CI build with Earthly&#xA;$ ./mvnw verify  # Local-only build&#xA;$ ./batect build-with-maven  # CI build with Batect&#xA;$ earthly +build-with-maven  # CI build with Earthly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(You may find that the &#34;CI&#34; build works great for you locally as part of your regular command line. Most IDEs would use the &#34;local-only&#34; build.)&lt;/p&gt; &#xA;&lt;p&gt;See what the starter program does:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ./run-with-gradle.sh&#xA;$ ./run-with-maven.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;a title=&#34;Changes&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/images/changes.png&#34; alt=&#34;Changes&#34; align=&#34;right&#34; width=&#34;20%&#34; height=&#34;auto&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Recent significant changes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Gradle: remove use of &lt;code&gt;testsets&lt;/code&gt; plugin for integration testing in favor of native Gradle. This is in support of Gradle 8&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;a title=&#34;Table of Contents&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/images/table-of-contents.png&#34; alt=&#34;Table of Contents&#34; align=&#34;right&#34; width=&#34;20%&#34; height=&#34;auto&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;TOC&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#try-it&#34;&gt;Try it&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#recent-significant-changes&#34;&gt;Recent significant changes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#reusing-this-project&#34;&gt;Reusing this project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#you-and-your-project&#34;&gt;You and your project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#getting-your-project-started&#34;&gt;Getting your project started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#the-jdk&#34;&gt;The JDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#use-gradle-or-maven&#34;&gt;Use Gradle or Maven&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#setup-your-ci&#34;&gt;Setup your CI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#keep-local-consistent-with-ci&#34;&gt;Keep local consistent with CI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#maintain-your-build&#34;&gt;Maintain your build&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#choose-your-code-style&#34;&gt;Choose your code style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#generate-code&#34;&gt;Generate code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#leverage-the-compiler&#34;&gt;Leverage the compiler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#use-linting&#34;&gt;Use linting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#use-static-code-analysis&#34;&gt;Use static code analysis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#shift-security-left&#34;&gt;Shift security left&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#leverage-unit-testing-and-coverage&#34;&gt;Leverage unit testing and coverage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#use-mutation-testing&#34;&gt;Use mutation testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#use-integration-testing&#34;&gt;Use integration testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#debugging&#34;&gt;Debugging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#samples&#34;&gt;Samples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#going-further&#34;&gt;Going further&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#problems&#34;&gt;Problems&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;a href=&#34;https://modernagile.org/&#34; title=&#34;Modern Agile&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/images/modern-agile-wheel-english.png&#34; alt=&#34;Modern Agile&#34; align=&#34;right&#34; width=&#34;20%&#34; height=&#34;auto&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Hi! I want you to have &lt;em&gt;awesome builds&lt;/em&gt; 🟢. If you&#39;re on a &lt;em&gt;Java&lt;/em&gt; project, or a project on any &lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_JVM_languages&#34;&gt;JVM language&lt;/a&gt;&lt;/em&gt; (Clojure, Groovy, JRuby, Java, Jython, Kotlin, Scala, &lt;em&gt;et al&lt;/em&gt;), this article is for you. This article assumes you are using Gradle or Maven for your build locally, and in CI. Some of you are using other build systems native to your source language. Please follow along!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;What is the goal of this article?&lt;/strong&gt; I want to highlight modern practies in building Java/JVM projects with Gradle or Maven, and provide guidance, or at least food for thought. The sample Gradle and Maven projects use Java, but most recommendations apply to builds for &lt;em&gt;any&lt;/em&gt; JVM language. I&#39;ll never be as clever or as talented as &lt;a href=&#34;http://poignant.guide/book/&#34;&gt;&lt;em&gt;why the lucky stiff&lt;/em&gt;&lt;/a&gt;, but I hope writing this makes you, developers, and others happy.&lt;/p&gt; &#xA;&lt;p&gt;See the wheel to the right? &lt;em&gt;No, you do not need to be agile!&lt;/em&gt; (But I encourage you to explore the benefits of Agile.) This article is for you regardless of how your team approaches software. The point is to &lt;em&gt;&#34;make people awesome&#34;&lt;/em&gt; for any project, possibly the most key value of the Agile approach to software.&lt;/p&gt; &#xA;&lt;h3&gt;Principles in designing these builds&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;em&gt;Make it work&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Can I as a Day 1 developer build the project locally?&lt;/li&gt; &#xA;   &lt;li&gt;Can I hand the project off to someone else to try?&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Make it right&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Can I reproduce issues in the CI build, and fix it locally?&lt;/li&gt; &#xA;   &lt;li&gt;Can I find code and security issues from running the build?&lt;/li&gt; &#xA;   &lt;li&gt;Is the code clean? Am I happy to explore the project?&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Make it fast&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Can I run the local build as frequently as I like, and be productive?&lt;/li&gt; &#xA;   &lt;li&gt;Can I have a fast cycle of code &amp;amp; test? What about red-green-refactor?&lt;/li&gt; &#xA;   &lt;li&gt;Can I update my dependencies and plugins quickly and easily?&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Goals for this project&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Starter build scripts for Modern Java/JVM builds in Gradle and Maven, helpful for new projects, or refurbishing existing projects&lt;/li&gt; &#xA; &lt;li&gt;Quick solutions for raising project quality and security in your local build&lt;/li&gt; &#xA; &lt;li&gt;Shift &lt;em&gt;problems to the left&lt;/em&gt; (&#34;to the left&#34; meaning earlier in the development cycle). You&#39;ll get earlier feedback while still having a fast local build. Time spent fixing issues locally is better than waiting on CI to fail, or worse, for production to fail&lt;/li&gt; &#xA; &lt;li&gt;The article focuses on Gradle and Maven: these are the most used build tools for Modern Java/JVM projects. However, if you use a different build tool, the principals still apply&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I want to help with the question: &lt;em&gt;I am in Day 1 on my project&lt;/em&gt;: How do I begin with a local build that supports my team through the project lifetime? And when I have an existing project, how to I catch up?&lt;/p&gt; &#xA;&lt;h3&gt;Goal of this article&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://modernagile.org/&#34;&gt;&lt;em&gt;Make people awesome&lt;/em&gt;&lt;/a&gt; (that means &lt;em&gt;you&lt;/em&gt;). This project is based on the experiences of many, and experiments with Modern Java/JVM builds, and shares lessons learned with you.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;a href=&#34;https://github.com/binkley/modern-java-practices/fork&#34; title=&#34;Reuse&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/images/reuse.png&#34; alt=&#34;Reuse&#34; align=&#34;right&#34; width=&#34;20%&#34; height=&#34;auto&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Reusing this project&lt;/h2&gt; &#xA;&lt;p&gt;Don&#39;t forget to &lt;a href=&#34;https://github.com/binkley/modern-java-practices/fork&#34;&gt;&lt;em&gt;fork me&lt;/em&gt;&lt;/a&gt; or &lt;em&gt;clone&lt;/em&gt; me! This is &lt;a href=&#34;http://unlicense.org/&#34;&gt;&lt;em&gt;Public Domain&lt;/em&gt;&lt;/a&gt; software: it is meant to be reused by you however is sensible. If you fork, I take care that upstream pulls work, but I&#39;d like to &lt;a href=&#34;https://github.com/binkley/modern-java-practices/issues&#34;&gt;hear from you&lt;/a&gt; if you have trouble. See also: &lt;a href=&#34;https://github.com/binkley/modern-java-practices#cleaning-up&#34;&gt;&lt;em&gt;Cleaning up&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Sensible approaches:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fork this project, and work from there, pulling down improvements (usually version bumps on tools and dependencies)&lt;/li&gt; &#xA; &lt;li&gt;Clone this project to a new repository, and work from there. Manually pull over improvements (there is &lt;a href=&#34;https://github.com/binkley/modern-java-practices#keep-plugins-and-dependencies-up-to-date&#34;&gt;tooling to help&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Read through this repository&#39;s code and changes, and update your own repository by hand, useful for existing repositories&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you cloned this project as a starter, you may want to stay updated on improvements:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git remote add upstream https://github.com/binkley/modern-java-practices.git&#xA;git fetch upstream&#xA;git merge master/upstream&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you are happy with your project, you should think about removing the upstream remote, and reviewing changes in this repository by hand. Your decision might depend on what merge conflicts you encounter.&lt;/p&gt; &#xA;&lt;h3&gt;Tips&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Consider &lt;a href=&#34;https://stackoverflow.com/questions/30001304/clone-git-repository-without-history&#34;&gt;&lt;em&gt;Clone git repository without history?&lt;/em&gt;&lt;/a&gt; to start at the current tip of this project. For example, some images in &lt;code&gt;README.md&lt;/code&gt; started overlarge in earlier versions, something you may not want in a clone&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Caution&lt;/em&gt;: Not all the images used in &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/README.md&#34;&gt;&lt;code&gt;README.md&lt;/code&gt;&lt;/a&gt; may be in the Public Domain (this is challenging to research). Use due diligence before sharing your clone, and other licenses may apply for these images in a global context&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Irrelevant files&lt;/h3&gt; &#xA;&lt;p&gt;This project includes files which are helpful for maintaining itself, but may be irrelevant to you. Some, however, may prove helpful in specific contexts as noted:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/build-as-ci-does.sh&#34;&gt;&lt;code&gt;build-as-ci-does.sh&lt;/code&gt;&lt;/a&gt; Helpful when CI has steps that local developers do not, and you want to reproduce or explore locally a CI problem. The script should match the actions your CI takes on pushes (this project uses GitHub actions)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/compare-tooling-versions.sh&#34;&gt;&lt;code&gt;compare-tooling-versions-sh&lt;/code&gt;&lt;/a&gt; If your project supports &lt;em&gt;both&lt;/em&gt; Gradle and Maven builds (unlikely), a quick way to look at dependency and plugin versions between the two. Note that the ouput needs &lt;em&gt;human&lt;/em&gt; reading: the same tool version may appear as different lines when comparing&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/coverage.sh&#34;&gt;&lt;code&gt;coverage&lt;/code&gt;&lt;/a&gt; Checks if the local code passes at given levels of code coverage. The script is focused on Maven, but with edits would do the same for Gradle. This supports the &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#leverage-unit-testing-and-coverage&#34;&gt;&#34;ratchet&#34; pattern&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/run-with-gradle.sh&#34;&gt;&lt;code&gt;run-with-gradle.sh&lt;/code&gt;&lt;/a&gt; If you are a Gradle project, you will likely rename this to just &lt;code&gt;run&lt;/code&gt; or similar&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/run-with-maven.sh&#34;&gt;&lt;code&gt;run-with-maven.sh&lt;/code&gt;&lt;/a&gt; If you are a Maven project, you will likely rename this to just &lt;code&gt;run&lt;/code&gt; or similar&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/CONTRIBUTING.md&#34;&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt;. Please &lt;a href=&#34;https://github.com/binkley/modern-java-practices/issues&#34;&gt;file issues&lt;/a&gt;, or contribute &lt;a href=&#34;https://github.com/binkley/modern-java-practices/pulls&#34;&gt;pull requests&lt;/a&gt;! I&#39;d love a conversation with you.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;!-- TODO: Should this section be moved or removed? It is awkward here --&gt; &#xA;&lt;h2&gt;You and your project&lt;/h2&gt; &#xA;&lt;p&gt;There are simple ways to make your project great. Some goals to strive for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visitors and new developers get off to a quick start, and can understand what the build does (if they are interested)&lt;/li&gt; &#xA; &lt;li&gt;Users of your project trust it—the build does what it says on the tin—, and they feel safe relying on your project&lt;/li&gt; &#xA; &lt;li&gt;You don&#39;t get peppered with questions that are answered &#34;in the source&#34; —because not everyone wants to read the source, and you&#39;d rather be coding than answering questions ☺&lt;/li&gt; &#xA; &lt;li&gt;Coding should feel easy. You solve &lt;em&gt;real&lt;/em&gt; problems, and do not spend overmuch much time on build details: your build supports you&lt;/li&gt; &#xA; &lt;li&gt;Your code passes &#34;smell tests&#34;: no simple complaints, and you are proud of what others see. &lt;em&gt;Hey!&lt;/em&gt; You&#39;re a professional, and it shows. (This is one of my personal fears as a programmer)&lt;/li&gt; &#xA; &lt;li&gt;Your project is &#34;standard&#34;, meaning, the build is easily grasped by those familiar with standard techniques and tooling&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Hopefully this article and the sample build scripts help you!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Getting your project started&lt;/h2&gt; &#xA;&lt;p&gt;To get a project off to a good start, consider these items. Even for existing projects, you should address these as you go along or while refurbishing an existing project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Team agreement comes first&lt;/strong&gt;. Make sure everyone is onboard and clear on what build standards are, and understands—at least as an outline—what the build does for them&lt;/li&gt; &#xA; &lt;li&gt;Provide a &lt;em&gt;good&lt;/em&gt; &lt;code&gt;README.md&lt;/code&gt;. This saves you a ton of time in the long run. This is your &lt;em&gt;most important&lt;/em&gt; step. A good resource is Yegor&#39;s &lt;a href=&#34;https://www.yegor256.com/2019/04/23/elegant-readme.html&#34;&gt;&lt;em&gt;Elegant READMEs&lt;/em&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://thethreevirtues.com/&#34;&gt;Intelligent laziness is a virtue&lt;/a&gt;. Time invested in good documentation pays off&lt;/li&gt; &#xA;   &lt;li&gt;A good &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/README.md&#34;&gt;&lt;code&gt;README.md&lt;/code&gt;&lt;/a&gt; answers visitors questions, so you don&#39;t spend time answering trivial questions, and explains/justifies your project to others.&lt;/li&gt; &#xA;   &lt;li&gt;Fight &lt;a href=&#34;https://en.wikipedia.org/wiki/Conway%27s_law&#34;&gt;Conway&#39;s Law&lt;/a&gt; with communication!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Pick a version of Java, and stick to it throughout your local build, CI pipeline, and environment deployments. &lt;em&gt;Do not mix versions.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pick &lt;strong&gt;Gradle&lt;/strong&gt; or &lt;strong&gt;Maven&lt;/strong&gt;, and use only one. This project provides both to demonstrate equivalent builds for each. See &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#use-gradle-or-maven&#34;&gt;Use Gradle or Maven&lt;/a&gt; for more discussion&lt;/li&gt; &#xA; &lt;li&gt;Use build wrappers committed into your project root. These run Gradle or Maven, and coders should always invoke &lt;code&gt;./gradlew&lt;/code&gt; or &lt;code&gt;./mvnw&lt;/code&gt; (use shell &lt;em&gt;aliases&lt;/em&gt; if these grow tiresome to type) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Build wrappers are shell scripts to run Gradle or Maven. The wrapper takes care of downloading needed tools without getting in the way. New contributors and developers can start right away; they do not need to install more software&lt;/li&gt; &#xA;   &lt;li&gt;For Gradle, use &lt;a href=&#34;https://docs.gradle.org/current/userguide/gradle_wrapper.html&#34;&gt;&lt;code&gt;./gradlew&lt;/code&gt;&lt;/a&gt; (part of Gradle)&lt;/li&gt; &#xA;   &lt;li&gt;For Maven, use &lt;a href=&#34;https://maven.apache.org/wrapper/&#34;&gt;&lt;code&gt;./mvnw&lt;/code&gt;&lt;/a&gt; (a plugin)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Always run CI on push to a shared repository. It&#39;s a sad panda when someone is excited about their commit, and then the commit breaks the other developers &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In CI, use caches for dependency downloads; this speeds up the feedback cycle from CI (see &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#setup-your-ci&#34;&gt;below&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;When sensible, move code quality and security checks into local builds before changes hit CI (see &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#setup-local-ci&#34;&gt;below&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Pick a common code style, and stay consistent; update tooling to complain on style violations &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The team should agree on a common code style, &lt;em&gt;eg&lt;/em&gt;, SUN, Google, &lt;em&gt;et al&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#use-linting&#34;&gt;Use linting&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tips&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Consider using client-side Git hooks for &lt;code&gt;pre-push&lt;/code&gt; to run a full, clean, local build. This helps ensure &#34;oopsies&#34; from going to CI where they impact everyone. The options are broad. Try web searches on:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&#34;gradle install git hooks&#34;&lt;/li&gt; &#xA;   &lt;li&gt;&#34;maven install git hooks&#34;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;This article presently has no specific recommendations on choices of plugin or approach for Git hooks.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;a href=&#34;https://adoptium.net/&#34; title=&#34;Adoptium&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/images/adoptium.png&#34; alt=&#34;Adoptium&#34; align=&#34;right&#34; width=&#34;20%&#34; height=&#34;auto&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;The JDK&lt;/h2&gt; &#xA;&lt;p&gt;For any Modern Java/JVM project, the first decision is &lt;em&gt;which version of Java (the JDK)&lt;/em&gt; to use? Some guidelines:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java 17 is the most current LTS (&#34;long-term support&#34;) version&lt;/li&gt; &#xA; &lt;li&gt;There are more recent versions with continuing improvements and additional features to try out&lt;/li&gt; &#xA; &lt;li&gt;If your personal or open-source project does not require a paid support contract, newer Java versions are a good choice&lt;/li&gt; &#xA; &lt;li&gt;For a full breakdown of the current JDK landscape (as of Jul 2022), see &lt;a href=&#34;https://tomgregory.com/which-jdk-version-and-vendor/&#34;&gt;&lt;em&gt;Which JDK Version and Vendor Should You Use on Your Project?&lt;/em&gt;&lt;/a&gt;, and a short list of recommendations at &lt;a href=&#34;https://whichjdk.com&#34;&gt;&lt;em&gt;Which Version of JDK Should I Use?&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In this project, you&#39;ll see the choice of Java 17 as this is the version to recommend in production.&lt;/p&gt; &#xA;&lt;p&gt;In general, you will find that &lt;a href=&#34;https://adoptium.net&#34;&gt;Adoptium&lt;/a&gt; is a go-to choice for the JDK.&lt;/p&gt; &#xA;&lt;h3&gt;Tips&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In Maven, use a property to &lt;em&gt;fix&lt;/em&gt; the version of Java in place. But note naming for that property: &lt;code&gt;java.version&lt;/code&gt; is defined by the JVM, and Maven creates a matching property. Recommended is to define your Java version with the &lt;code&gt;jdk.version&lt;/code&gt; property, which has no collision with pre-defined properties&lt;/li&gt; &#xA; &lt;li&gt;In Gradle, use the &lt;code&gt;javaToolchains&lt;/code&gt; task to investigate issues with mismatching or confusing build paths, project configuration, and Gradle sorting it out. This is an issue for local-only builds; local builds using a container (such as via &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#setup-local-ci&#34;&gt;&lt;em&gt;Batect&lt;/em&gt;&lt;/a&gt;) lower these concerns&lt;/li&gt; &#xA; &lt;li&gt;In GitHub Actions, building supports cross-checking multiple JVM versions, use &lt;a href=&#34;https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs&#34;&gt;the &lt;code&gt;matrix&lt;/code&gt; feature&lt;/a&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/.github/workflows/ci-batect-maven.yml&#34;&gt;the example GitHub actions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Managing your Java environment&lt;/h3&gt; &#xA;&lt;p&gt;Two best-of-class tools come to mind to manage your JDK environment in projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#jenv&#34;&gt;jEnv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#direnv&#34;&gt;Direnv&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Both assume UNIX-type shells (Bash, Zsh, etc).&lt;/p&gt; &#xA;&lt;p&gt;For those on Windows, you may need to use Cygwin, Git for Windows, or WSL2 to use these.&lt;/p&gt; &#xA;&lt;p&gt;(Reminder: in general, when setting up your project environment, prefer the latest LTS version of Java, which is 17.)&lt;/p&gt; &#xA;&lt;h4&gt;Jenv&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.jenv.be/&#34;&gt;jEnv&lt;/a&gt; supports both &#34;global&#34; (meaning you, the user) and &#34;project&#34; choices of JDK (particular to a directory and its children) in which JDK installation to use. You may notice the &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/.java-version&#34;&gt;&lt;code&gt;.java-version&lt;/code&gt;&lt;/a&gt; file: this is a per-project file for jEnv to pick your project Java version.&lt;/p&gt; &#xA;&lt;p&gt;Do use &lt;code&gt;jenv enable-plugins export&lt;/code&gt; and restart your shell. This ensures &lt;code&gt;JAVA_HOME&lt;/code&gt; is exported to match your jEnv settings. Several tools use &lt;code&gt;JAVA_HOME&lt;/code&gt; rather than the &lt;code&gt;java&lt;/code&gt; or &lt;code&gt;javac&lt;/code&gt; found in your &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You may also find the &lt;code&gt;gradle&lt;/code&gt; and &lt;code&gt;maven&lt;/code&gt; plugins for jEnv useful.&lt;/p&gt; &#xA;&lt;p&gt;There are many ways to install the JDK, most are platform-dependent. In general, your team will be better off using a &#34;managed&#34; approach, rather than with each person using binary installers. Popular choices include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://adoptium.net/installation.html#linux-pkg&#34;&gt;Apt and friends&lt;/a&gt; for Linux or WSL&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; for Mac&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sdkman.io/jdks&#34;&gt;SDKMAN&lt;/a&gt; for multiple platforms&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Direnv&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://direnv.net/&#34;&gt;direnv&lt;/a&gt; is more general. Rather than specifying a Java version, you edit a &lt;code&gt;.envrc&lt;/code&gt; file and add JDK-specific environment settings (and another other environment settings) just as you would on the command-line. Typically set are &lt;code&gt;PATH&lt;/code&gt; to find &lt;code&gt;java&lt;/code&gt; and &lt;code&gt;javac&lt;/code&gt; programs, and &lt;code&gt;JAVA_HOME&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;!-- TODO: better formating for images vs text --&gt; &#xA;&lt;a href=&#34;https://maven.apache.org/&#34; title=&#34;Maven&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/images/maven.png&#34; alt=&#34;Maven&#34; align=&#34;right&#34; width=&#34;15%&#34; height=&#34;auto&#34;&gt;&lt;/a&gt; &#xA;&lt;a href=&#34;https://gradle.org/&#34; title=&#34;Gradle&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/images/gradle.png&#34; alt=&#34;Gradle&#34; align=&#34;right&#34; width=&#34;15%&#34; height=&#34;auto&#34;&gt;&lt;/a&gt; &#xA;&lt;h2&gt;Use Gradle or Maven&lt;/h2&gt; &#xA;&lt;p&gt;The choice between Gradle and Maven depends on your team, your broader ecosystem, and your project needs. In summary:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Gradle — your build script is written in Groovy or Kotlin; dynamic, imperative, and mutable; requires debugging your build on occasion, but less verbose than Maven&#39;s XML. Use of &#34;parent&#34; (umbrella) projects is possible but challenging. You can locally extend your build script either &lt;em&gt;inline&lt;/em&gt; with build code, with project plugins, or with plugins from a separate project (perhaps shared across project for your team). If interested in custom plugins, &lt;a href=&#34;https://docs.gradle.org/current/userguide/custom_plugins.html&#34;&gt;read more here&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Maven — your build scripts is written in XML; declarative and immutable; verbose but specific; it either works or not. Use of &#34;parent&#34; (umbrella) projects is simple with built-in support. You can locally extend your build with plugins from a separate project (perhaps shared across project for your team). If interested in custom plugins, &lt;a href=&#34;https://maven.apache.org/guides/plugin/guide-java-plugin-development.html&#34;&gt;read more here&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For Modern Java/JVM projects, &lt;strong&gt;use Gradle or Maven&lt;/strong&gt;. The article doesn&#39;t cover alternative build tools: &lt;a href=&#34;https://www.jrebel.com/blog/2020-java-technology-report#build-tool&#34;&gt;industry data&lt;/a&gt; shows Gradle or Maven are the build tools for most folks. Unless you find yourself in a complex monorepo culture (Google, &lt;em&gt;etc.&lt;/em&gt;), or there are mandates from above, you need to select one of Gradle or Maven. However, for projects not using Gradle or Maven, you will still find improvements for your build herein (though details will differ).&lt;/p&gt; &#xA;&lt;p&gt;For new projects, you may find &lt;a href=&#34;https://start.spring.io&#34;&gt;Spring Initializr&lt;/a&gt;, &lt;a href=&#34;https://micronaut.io/&#34;&gt;&lt;code&gt;mn&lt;/code&gt; from Micronaut&lt;/a&gt;, or &lt;a href=&#34;https://www.jhipster.tech/&#34;&gt;JHipster&lt;/a&gt;, among many other project excellent starters, more to your liking: they provide you with starter Gradle or Maven scripts specific for those frameworks. &lt;em&gt;That&#39;s great!&lt;/em&gt; This article should still help you improve your build beyond &#34;getting started&#34;. You should pick and choose build features as makes sense to you and your circumstances.&lt;/p&gt; &#xA;&lt;p&gt;This article offers &lt;strong&gt;no preference between Gradle or Maven&lt;/strong&gt;. You need to decide with your team and circumstances. After picking your build tool, you might rename &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/run-with-gradle.sh&#34;&gt;run-with-gradle.sh&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/run-with-maven.sh&#34;&gt;runs-with-maven.sh&lt;/a&gt; to just &lt;code&gt;run.sh&lt;/code&gt; or similar.&lt;/p&gt; &#xA;&lt;p&gt;Projects using Ant &lt;strong&gt;should migrate&lt;/strong&gt;. It is true that Ant is well-maintained (the latest version dates from 2021). However, you will spend much effort in providing modern build tooling, and effort in migrating from Ant is repaid in smaller work for integrating modern tools. Data point: consider the number of &lt;a href=&#34;https://stackoverflow.com/&#34;&gt;Stackoverflow&lt;/a&gt; posts providing Gradle or Maven answers to those for Ant. &lt;em&gt;Consider Ant builds to be no longer well-supported, and a form of &lt;a href=&#34;https://www.martinfowler.com/bliki/TechnicalDebt.html&#34;&gt;Tech Debt&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Throughout, when covering both Gradle and Maven, Gradle will be discussed first, then Maven. This is no expressing a preference! It is neutral alphabetical ordering.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NB&lt;/strong&gt; — Gradle Enterprise provides additional features for Maven as well such as &lt;a href=&#34;https://docs.gradle.com/enterprise/maven-build-cache/&#34;&gt;build caching&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#keep-your-build-fast&#34;&gt;build scans&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Cleaning up&lt;/h3&gt; &#xA;&lt;p&gt;Once you pick between Gradle or Maven, it is a good time to clean up. If you have cloned the project, some renames/deletions to consider:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/run-with-gradle.sh&#34;&gt;run-with-gradle.sh&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/run-with-maven.sh&#34;&gt;runs-with-maven.sh&lt;/a&gt; → just &lt;code&gt;run.sh&lt;/code&gt; or &lt;code&gt;build.sh&lt;/code&gt; or anything you like. Remember to document in &lt;code&gt;README.md&lt;/code&gt; for others&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/batect.yml&#34;&gt;batect.yml&lt;/a&gt; — update the task names, and remove those not relevant. Again, don&#39;t forget about &lt;code&gt;README.md&lt;/code&gt; instructions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/.github/workflows/ci-maven.yml&#34;&gt;ci.yml&lt;/a&gt; — update the jobs, and remove those not relevant. Did I mention &lt;code&gt;README.md&lt;/code&gt;?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You are ready to make great software.&lt;/p&gt; &#xA;&lt;h3&gt;Keeping Gradle or Maven up to date&lt;/h3&gt; &#xA;&lt;h4&gt;Gradle&lt;/h4&gt; &#xA;&lt;p&gt;To update Gradle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ $EDITOR gradle.properties  # Update gradleWrapperVersion property&#xA;$ ./gradlew wrapper  # Update scripts and supporting files&#xA;$ ./gradlew wrapper  # Confirm, and download files if needed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Maven&lt;/h4&gt; &#xA;&lt;p&gt;To update Maven:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ $EDITOR pom.xml  # Update maven.version property&#xA;$ ./mvnw wrapper:wrapper  # Update scripts and supporting files&#xA;$ ./mvnw wrapper:wra  # Confirm, and download files if needed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that Maven wrapper is developing, and will be bundled with an upcoming Maven release. For now it is a separate plugin in your &lt;code&gt;pom.xml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Tips&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Take advantage of your shell&#39;s tab completion: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/gradle/gradle-completion&#34;&gt;Gradle completion&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/juven/maven-bash-completion&#34;&gt;Maven completion&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The sample Gradle and Maven build scripts often specify specific versions of the tooling, separate from the plugin versions. This is intentional. You should be able to update the latest tool version even when the plugin has not yet caught up&lt;/li&gt; &#xA; &lt;li&gt;Gradle itself does not provide support for &#34;profiles&#34;, a key Maven feature. This is &lt;em&gt;different&lt;/em&gt; from &lt;em&gt;profiling&lt;/em&gt; build performance! Maven profiles can be used in many ways. The most common are to enabling/disabling build features on the command line, tailoring the build to a particular deployment environment, or using different credentials for other systems. If this feature is important for your team, you can code &lt;code&gt;if/else&lt;/code&gt; blocks directly in &lt;code&gt;build.gradle&lt;/code&gt;, or use a plugin such as &lt;a href=&#34;https://kordamp.org/kordamp-gradle-plugins/#_org_kordamp_gradle_profiles&#34;&gt;Kordamp Profiles Gradle plugin&lt;/a&gt; (Kordamp has a suite of interesting Gradle plugins beyond this one; read more on that page)&lt;/li&gt; &#xA; &lt;li&gt;Gradle uses advanced terminal control, so you cannot always see what is happening. To view Gradle steps plainly when debugging your build, use: &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ./gradlew &amp;lt;your tasks&amp;gt; | cat&#xA;&lt;/code&gt;&lt;/pre&gt; or save the output to a file: &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ./gradlew &amp;lt;your tasks&amp;gt; | tee -o some-file&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;If your source code is in Kotlin, so should be your build. Gradle provides &lt;a href=&#34;https://kotlinlang.org/docs/reference/using-gradle.html&#34;&gt;a Kotlin DSL for build scripts&lt;/a&gt; as a first-class counterpart to the traditional Groovy DSL&lt;/li&gt; &#xA; &lt;li&gt;Maven colorizes output, but does not use terminal control to overwrite output&lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#setup-your-ci&#34;&gt;Setup your CI&lt;/a&gt; for another approach to getting plain text console output&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jcgay/maven-notifier&#34;&gt;The Maven Notifier&lt;/a&gt; may be to your liking&lt;/li&gt; &#xA; &lt;li&gt;If you like Maven, but XML isn&#39;t your thing, you might explore the &lt;a href=&#34;https://github.com/takari/polyglot-maven&#34;&gt;&lt;em&gt;Polyglot for Maven&lt;/em&gt;&lt;/a&gt; extension which provides the POM in multiple languages/formats (&lt;em&gt;eg&lt;/em&gt;, Ruby, YAML, many others)&lt;/li&gt; &#xA; &lt;li&gt;If you have a multi-module Maven build, you might consider &lt;a href=&#34;http://takari.io/book/30-team-maven.html#takari-smart-builder&#34;&gt;&lt;em&gt;Takari Smart Builder&lt;/em&gt;&lt;/a&gt; to speed it up&lt;/li&gt; &#xA; &lt;li&gt;Maven best practice is to specify the version for each plugin, &lt;em&gt;even default plugins&lt;/em&gt; that come with your version of Maven. This enforces &lt;strong&gt;reproducible builds&lt;/strong&gt;. See also the &lt;a href=&#34;https://maven.apache.org/enforcer/maven-enforcer-plugin/&#34;&gt;Maven Enforcer Plugin&lt;/a&gt; to exactly specify the version of Maven for your build&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.ambysoft.com/essays/whyAgileWorksFeedback.html&#34; title=&#34;Why Agile Software Development Techniques Work: Improved Feedback&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/images/bug-costs.jpg&#34; alt=&#34;Length of Feedback Cycle&#34; align=&#34;right&#34; width=&#34;20%&#34; height=&#34;auto&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setup your CI&lt;/h2&gt; &#xA;&lt;p&gt;Your CI is your &#34;source of truth&#34; for successful builds. Your goal: &lt;em&gt;Everyone trusts a &#34;green&#34; CI build is solid&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When using GitHub, a simple starting point is &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/.github/workflows/ci-gradle.yml&#34;&gt;&lt;code&gt;ci-gradle.yml&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/.github/workflows/ci-maven.yml&#34;&gt;&lt;code&gt;ci-maven.yml&lt;/code&gt;&lt;/a&gt;. (GitLab is similar, but as this project is hosted in GitHub, there is not a simple means to demonstrate CI at GitLab). This project includes a workflow for Gradle and a workflow for Maven as examples.&lt;/p&gt; &#xA;&lt;p&gt;If you use GitLab, read about the equivalent in &lt;a href=&#34;https://docs.gitlab.com/ee/ci/&#34;&gt;&lt;em&gt;GitLab CI/CD&lt;/em&gt;&lt;/a&gt;, or for Jenkins in &lt;a href=&#34;https://www.jenkins.io/doc/book/pipeline/&#34;&gt;&lt;em&gt;Pipeline&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When publishing your project, consider &lt;a href=&#34;https://docs.github.com/en/actions/guides/publishing-java-packages-with-maven&#34;&gt;&lt;em&gt;Publishing Java packages with Maven&lt;/em&gt;&lt;/a&gt; for GitHub, or equivalent for other CI systems. &lt;strong&gt;Do not publish from local builds.&lt;/strong&gt; For GitHub, note the limitations of &lt;a href=&#34;https://github.community/t/download-from-github-package-registry-without-authentication/14407&#34;&gt;&lt;em&gt;Download from Github Package Registry without authentication&lt;/em&gt;.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Save your CI artifacts&lt;/h3&gt; &#xA;&lt;p&gt;It is helpful to preserve your build artifacts from CI, for example, to download built jars from different CI runs for comparing their behavior between commits without needing to rebuild locally, and also to confirm that your local build makes the same jars as CI does.&lt;/p&gt; &#xA;&lt;p&gt;The &#34;Build with Gradle&#34; and &#34;Build with Maven&#34; CI workflows each provide a download named &#34;jars&#34;, and the Maven build a &#34;site&#34; download.&lt;/p&gt; &#xA;&lt;p&gt;There are services to provide links to the most recent build artifacts. One example is &lt;a href=&#34;https://nightly.link/&#34;&gt;nightly.link&lt;/a&gt; (this is not an endorsement). You can use these links in your &lt;code&gt;README.md&lt;/code&gt; or share as makes sense. An example is &lt;a href=&#34;https://nightly.link/binkley/modern-java-practices/workflows/ci-maven/master/jars.zip&#34;&gt;downloading the Maven-built jar&lt;/a&gt; from this project.&lt;/p&gt; &#xA;&lt;h3&gt;Tips&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To disable ASCII colorizing printing as control sequences in CI, or Gradle trying to overwrite lines (control sequences make for hard-to-read CI logs), a simple approach is to use an environment setting: &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;TERM=dumb&#xA;&lt;/code&gt;&lt;/pre&gt; This does not make sense for local builds, and your CI system (&lt;em&gt;eg&lt;/em&gt;, GitHub) may manage this problem already&lt;/li&gt; &#xA; &lt;li&gt;With Gradle, use the &lt;code&gt;--warning-mode=all&lt;/code&gt; flag for CI: this shows &lt;em&gt;all&lt;/em&gt; warnings Gradle generates, not just a summary. See &lt;a href=&#34;https://docs.gradle.org/current/userguide/command_line_interface.html#sec:command_line_warnings&#34;&gt;&lt;em&gt;Showing or hiding warnings&lt;/em&gt;&lt;/a&gt; for details&lt;/li&gt; &#xA; &lt;li&gt;With Maven, use the &lt;code&gt;--no-transfer-progress&lt;/code&gt; flag for CI: this avoids spamming CI logs with download progress messages&lt;/li&gt; &#xA; &lt;li&gt;For GitHub Actions, you may find a tool like &lt;a href=&#34;https://github.com/nektos/act&#34;&gt;&lt;code&gt;act&lt;/code&gt;&lt;/a&gt; useful for running CI actions locally (it may not work for all projects, however, depending on your actions)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/binkley/html/raw/master/blog/on-pipelines.html&#34; title=&#34;On Pipelines&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/images/pipeline.png&#34; alt=&#34;Production vs Dev pipeline&#34; align=&#34;right&#34; width=&#34;20%&#34; height=&#34;auto&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Keep local consistent with CI&lt;/h2&gt; &#xA;&lt;p&gt;What is &#34;local CI&#34;? That sounds like a contradition. Tooling helps you reproduce locally the same build that CI uses, so that you suffer less from version drift and other type problems, and minimize related environment issues. A common example is building on different JVM/JDK versions. Ideally, excepting truly environment-specific, your local build should fail when CI would also fail so that you can catch problems earlier in your development process before commits are shared.&lt;/p&gt; &#xA;&lt;h3&gt;Setup local CI&lt;/h3&gt; &#xA;&lt;p&gt;Reflecting the principle that local builds should be like CI builds, some tools that greatly help:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://batect.dev/&#34;&gt;Batect&lt;/a&gt; is a solid tool from Charles Korn. It runs your build in a &#34;CI-like&#34; local environment via Docker. This is one of your first lines of defence against &#34;it runs on my box&#34;. (&lt;a href=&#34;https://batect.dev/Comparison.html&#34;&gt;Compare Batect&lt;/a&gt; with other tools in this space)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://earthly.dev/&#34;&gt;Earthly&lt;/a&gt; shares philosophy with Batect and with a different approach to implementation. &lt;strong&gt;Feedback on Earthly&lt;/strong&gt; is &lt;a href=&#34;https://github.com/binkley/modern-java-practices/issues/new/choose&#34;&gt;appreciated&lt;/a&gt;. &lt;em&gt;Earthly is experimental&lt;/em&gt; for the template project in this repository&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;They are &lt;em&gt;both good choices&lt;/em&gt;, but not the only ones.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;This is an important step&lt;/em&gt;! It is closer to your CI builds locally. You should strive to keep local as faithful as possible to CI and Production.&lt;/p&gt; &#xA;&lt;p&gt;You may decide not to use CI-like tooling for local builds. However, consider that use of them raises your confidence that CI will succeed. Local CI-like tooling is part of the theme of &lt;em&gt;shifting left&lt;/em&gt; for problems.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://batect.dev/tools/GitHubActions.html&#34;&gt;&lt;em&gt;Working with CI systems&lt;/em&gt;&lt;/a&gt; for documentation on using Batect from within a dockerized CI environment.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NB&lt;/strong&gt; — to be as consistent as possible, the sample &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/.github/workflows/ci-maven.yml&#34;&gt;&lt;code&gt;ci.yml&lt;/code&gt; for GitHub&lt;/a&gt; uses Batect for the Gradle and Maven builds, and &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/batect.yml&#34;&gt;&lt;code&gt;batect.yml&lt;/code&gt; for Batect&lt;/a&gt; pulls an image for &lt;a href=&#34;https://hub.docker.com/_/adoptopenjdk&#34;&gt;AdoptOpenJDK&lt;/a&gt;. So &lt;code&gt;ci.yml&lt;/code&gt; does not &lt;a href=&#34;https://github.com/actions/setup-java&#34;&gt;setup JDK 17&lt;/a&gt; directly, but relies on Batect.&lt;/p&gt; &#xA;&lt;p&gt;Configure your local CI in &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/batect.yml&#34;&gt;&lt;code&gt;batect.yml&lt;/code&gt;&lt;/a&gt; or in &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/Earthfile&#34;&gt;&lt;code&gt;Earthfile&lt;/code&gt;&lt;/a&gt; with suitable tasks. For this project, there are example tasks/targets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ./batect -T&#xA;Available tasks:&#xA;- build-with-gradle: Build and test with Gradle&#xA;- build-with-maven: Build and test with Maven&#xA;&#xA;$ earthly ls&#xA;+base&#xA;+build-with-gradle&#xA;+build-with-maven&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Gradle&lt;/h4&gt; &#xA;&lt;p&gt;It is helpful that your &lt;code&gt;batect.yml&lt;/code&gt; calls Gradle with the &lt;code&gt;--no-daemon&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There is no point in spinning up a daemon for a Docker ephemeral container; but it is harmless either way&lt;/li&gt; &#xA; &lt;li&gt;With a daemon, the Docker container&#39;s Gradle may be confused by &lt;code&gt;~/.gradle/daemon&lt;/code&gt; and &lt;code&gt;/.gradle/workers&lt;/code&gt; directories mounted by Batect from your home directory, as these refer to processes in the host, not the container (&lt;code&gt;batect.yml&lt;/code&gt; mounts your &lt;code&gt;~/.gradle&lt;/code&gt; to include caches of already-downloaded dependencies, &lt;em&gt;et al&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;If you encounter troubles, run locally &lt;code&gt;./gradlew --stop&lt;/code&gt; to kill any local daemons: This indicates a &lt;em&gt;bug&lt;/em&gt;, and &#34;stop&#34; is a workaround. See &lt;a href=&#34;https://github.com/batect/batect/issues/680#issuecomment-719821099&#34;&gt;a suggestion of a better approach&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Earthly&lt;/h4&gt; &#xA;&lt;p&gt;Earthly has its own caching strategies that apply to your build (such as Gradle or Maven dependency downloads) based around Docker layers. See &lt;a href=&#34;https://docs.earthly.dev/docs/guides/advanced-local-caching&#34;&gt;&lt;em&gt;Advanced local caching&lt;/em&gt;&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Tips&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you encounter issues with Gradle and Batect, try stopping the local Gradle daemons before running Batect:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ./gradlew --stop&#xA;$ ./batect &amp;lt;your Batect arguments&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The Batect builds &lt;em&gt;assume&lt;/em&gt; you&#39;ve run local builds first. Plesae run &lt;code&gt;./gradlew build&lt;/code&gt; or &lt;code&gt;./mvnw verify&lt;/code&gt; at least once before running &lt;code&gt;./batect ...&lt;/code&gt; to ensure cached/shared downloads are present&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In CI, use the &lt;code&gt;--permanently-enable-telemetry&lt;/code&gt; flag to avoid CI asking a &#34;Y/N&#34; question. This &lt;strong&gt;must&lt;/strong&gt; be &lt;em&gt;separate step&lt;/em&gt; from running the build itself. See &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/.github/workflows/ci-maven.yml&#34;&gt;&lt;code&gt;ci.yml&lt;/code&gt;&lt;/a&gt; for Gradle and Maven examples&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run your local Gradle or Maven build before you run with Batect if you have updated dependencies. This is helpful when fetching the dependencies, and sometimes avoids awkwardness (sometimes you may have different access rights for the build tool caches when run as yourself directly &lt;em&gt;vs&lt;/em&gt; running in a container)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/images/maintain-build.jpg&#34; alt=&#34;Maintain build&#34; align=&#34;right&#34; width=&#34;20%&#34; height=&#34;auto&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Maintain your build&lt;/h2&gt; &#xA;&lt;p&gt;Treat your build as you would your codebase: Maintain it, refactor as needed, run performance testing, &lt;em&gt;et al&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Know what your build does&lt;/h3&gt; &#xA;&lt;p&gt;What does your build do exactly, and in what order? You can ask Gradle or Maven to find out:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dorongold/gradle-task-tree&#34;&gt;Gradle Task Tree plugin&lt;/a&gt; with &lt;code&gt;./gradlew some...tasks taskTree&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://buildplan.jcgay.fr/&#34;&gt;Maven Buildplan plugin&lt;/a&gt; with &lt;code&gt;./mvnw buildplan:list&lt;/code&gt; (see plugin documentation for other goals and output format)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each of these have many options and features, and are worth exploring.&lt;/p&gt; &#xA;&lt;h3&gt;Keep your build clean&lt;/h3&gt; &#xA;&lt;p&gt;Let tools tell you when you have dodgy dependencies, or an inconsistent setup. For example, leverage &lt;code&gt;jdeps&lt;/code&gt; which &lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/specs/man/jdeps.html&#34;&gt;comes with the JDK&lt;/a&gt;. Jdeps spots, for example, if you have a multi-version jar as a dependency that does not include &lt;em&gt;your&lt;/em&gt; JDK version (an example of this may be is JUnit), or if your code depends on &lt;em&gt;internal&lt;/em&gt; (non-public) classes of the JDK (important especially when using the JDK module system).&lt;/p&gt; &#xA;&lt;h4&gt;Gradle&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/kordamp/jdeps-gradle-plugin&#34;&gt;Kordamp plugin&lt;/a&gt; used for Gradle does not fail the build when jdeps errors, and only generates a report text file. See &lt;a href=&#34;https://github.com/kordamp/jdeps-gradle-plugin/issues/16&#34;&gt;this issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Maven&lt;/h4&gt; &#xA;&lt;p&gt;Try Maven with &lt;code&gt;dependency:tree -Dverbose&lt;/code&gt;. This will show conflicting versions of dependencies.&lt;/p&gt; &#xA;&lt;h3&gt;Keep local builds quiet&lt;/h3&gt; &#xA;&lt;p&gt;It is frustrating for local devs when something horrible happened during the build (say a production with &#34;ERROR&#34; output during a test), but:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The build is &lt;strong&gt;GREEN&lt;/strong&gt;, and developers should trust that&lt;/li&gt; &#xA; &lt;li&gt;There is too much output in the local build, so developers don&#39;t spot telltale signs of trouble&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;There are many approaches to this problem. This project uses JDK logging as &lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.logging/java/util/logging/FileHandler.html&#34;&gt;an example&lt;/a&gt;, and keeps the build quiet in &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/config/logging.properties&#34;&gt;&lt;code&gt;config/logging.properties&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Keep CI builds noisy&lt;/h3&gt; &#xA;&lt;p&gt;In CI, this is different, and there you want as much output as possible to diagnose the unexpected.&lt;/p&gt; &#xA;&lt;!-- TODO: This section is under construction.&#xA;Looking for input on quiet local builds and noisy CI builds. --&gt; &#xA;&lt;h3&gt;Keep your build current&lt;/h3&gt; &#xA;&lt;p&gt;An important part of &lt;em&gt;build hygiene&lt;/em&gt; is keeping your build system, plugins, and dependencies up to date. This might be simply to address bug fixes (including bugs you weren&#39;t aware of), or might be critical security fixes. The best policy is: &lt;em&gt;Stay current&lt;/em&gt;. Others will have found—reported problems—, and 3&lt;sup&gt;rd&lt;/sup&gt;-parties may have addressed them. Leverage the power of &lt;a href=&#34;https://en.wikipedia.org/wiki/Linus%27s_law&#34;&gt;&lt;em&gt;Linus&#39; Law&lt;/em&gt;&lt;/a&gt; (&#34;given enough eyeballs, all bugs are shallow&#34;).&lt;/p&gt; &#xA;&lt;h3&gt;Keep plugins and dependencies up-to-date&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ben-manes/gradle-versions-plugin&#34;&gt;Gradle&lt;/a&gt; Benjamin Manes is kind enough in his plugin project to list alternatives. If you are moving towards &lt;a href=&#34;https://docs.gradle.org/current/userguide/platforms.html&#34;&gt;Gradle version catalogs&lt;/a&gt;, you might consider &lt;a href=&#34;https://jmfayard.github.io/refreshVersions/&#34;&gt;refreshVersions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mojohaus.org/versions-maven-plugin/&#34;&gt;Maven&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Team agreement on release updates only, or if non-release plugins and dependencies make sense for your situation&lt;/li&gt; &#xA; &lt;li&gt;Each of these plugins for Gradle or Maven have their quirks. &lt;strong&gt;Do not treat them as sources of truth but as recommendations&lt;/strong&gt;. &lt;em&gt;Use your judgment&lt;/em&gt;. In parallel, take advantage of CI tooling such as &lt;a href=&#34;https://github.com/dependabot&#34;&gt;Dependabot (Github)&lt;/a&gt; or &lt;a href=&#34;https://gitlab.com/dependabot-gitlab/dependabot&#34;&gt;Dependabot (GitLab)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;An example use which shows most outdated plugins and dependencies (note that one Maven example modifies your &lt;code&gt;pom.xml&lt;/code&gt;, a fact you can choose or avoid):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ./gradlew dependencyUpdates&#xA;# output ommitted&#xA;$ ./mvnw versions:update-properties  # Updates pom.xml in place&#xA;$ ./mvnw versions:display-property-updates  # Just lists proposed updates&#xA;# output ommitted&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This project keeps Gradle version numbers in &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/gradle.properties&#34;&gt;&lt;code&gt;gradle.properties&lt;/code&gt;&lt;/a&gt;, and for Maven in &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/pom.xml&#34;&gt;the POM&lt;/a&gt;, and you should do the same.&lt;/p&gt; &#xA;&lt;p&gt;Since your &lt;code&gt;pom.xml&lt;/code&gt; is in Git, &lt;code&gt;versions:update-properties&lt;/code&gt; is &lt;em&gt;safe&lt;/em&gt; as you can always revert changes, but some folks want to look before doing.&lt;/p&gt; &#xA;&lt;h4&gt;Tips&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Gradle and Maven provide &lt;em&gt;default versions&lt;/em&gt; of bundled plugins. In both built tools, the version update plugins need you to be &lt;em&gt;explicit&lt;/em&gt; in stating versions for bundled plugins, so those versions are visible for update&lt;/li&gt; &#xA; &lt;li&gt;Enable &lt;em&gt;HTML reports&lt;/em&gt; for local use; enable &lt;em&gt;XML reports&lt;/em&gt; for CI use in integrating with report tooling&lt;/li&gt; &#xA; &lt;li&gt;To open the report for Jdeps, build locally and use the &lt;code&gt;&amp;lt;project root&amp;gt;/build/reports/jdeps/&lt;/code&gt; (Gradle) path. The path shown in a Docker build is relative to the interior of the container&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Automated dependency upgrade PRs&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;NB&lt;/em&gt; — &lt;a href=&#34;https://github.blog/2020-06-01-keep-all-your-packages-up-to-date-with-dependabot/&#34;&gt;Dependabot&lt;/a&gt; may prove speedier for you than updating dependency versions locally, and runs in CI (GitHub) on a schedule you pick. It submits PRs to your repository when it finds out of date dependencies. See &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/.github/dependabot.yml&#34;&gt;&lt;code&gt;dependabot.yml&lt;/code&gt;&lt;/a&gt; for an example using a daily schedule.&lt;/p&gt; &#xA;&lt;p&gt;A similar choice is &lt;a href=&#34;https://github.com/renovatebot/renovate&#34;&gt;Renovate&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;More on Gradle version numbers&lt;/h4&gt; &#xA;&lt;p&gt;Your simplest approach to Gradle is to keep everything in &lt;code&gt;build.gradle&lt;/code&gt;. Even this unfortunately still requires a &lt;code&gt;settings.gradle&lt;/code&gt; to define a project artifact name, and leaves duplicate version numbers for related dependencies scattered through &lt;code&gt;build.gradle&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Another approach is to rely on a Gradle plugin such as that from Spring Boot to manage dependencies for you. This unfortunately does not help with plugins at all, nor with dependencies that Spring Boot does not know about.&lt;/p&gt; &#xA;&lt;p&gt;This project uses a 3-file solution for Gradle versioning, and you should consider doing the same:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/gradle.properties&#34;&gt;&lt;code&gt;gradle.properties&lt;/code&gt;&lt;/a&gt; is the sole source of truth for version numbers, both plugins and dependencies&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/settings.gradle&#34;&gt;&lt;code&gt;settings.gradle&lt;/code&gt;&lt;/a&gt; configures plugin versions using the properties&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/build.gradle&#34;&gt;&lt;code&gt;build.gradle&lt;/code&gt;&lt;/a&gt; uses plugins without needing version numbers, and dependencies refer to their property versions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The benefits of this approach grow for Gradle multi-project projects, where you may have plugin and dependency versions scattered across each &lt;code&gt;build.gradle&lt;/code&gt; file for you project and subprojects.&lt;/p&gt; &#xA;&lt;p&gt;So to adjust a version, edit &lt;code&gt;gradle.properties&lt;/code&gt;. To see this approach in action for dependencies, try:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ grep junitVersion gradle.properties setttings.gradle build.gradle&#xA;gradle.properties:junitVersion=5.7.0&#xA;build.gradle:    testImplementation &#34;org.junit.jupiter:junit-jupiter:$junitVersion&#34;&#xA;build.gradle:    testImplementation &#34;org.junit.jupiter:junit-jupiter-params:$junitVersion&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Note on &lt;code&gt;toolVersion&lt;/code&gt; property&lt;/h4&gt; &#xA;&lt;p&gt;If you use the &lt;code&gt;toolVersion&lt;/code&gt; property for a plugin to update the called tool separately from the plugin itself, &lt;em&gt;this is a convention&lt;/em&gt;, not something the Gradle API provides to plugins. As a consequence, the Versions plugin is unable to know if your tool version is out of date. An example is the JaCoCo plugin distributed with Gradle.&lt;/p&gt; &#xA;&lt;p&gt;Two options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Do not use the &lt;code&gt;toolVersion&lt;/code&gt; property unless needed to address a discovered build issue, and remove it once the plugin catches up to provide the tool version you need&lt;/li&gt; &#xA; &lt;li&gt;Continue using the &lt;code&gt;toolVersion&lt;/code&gt; property, and as part of running &lt;code&gt;./gradlew dependencyUpdates&lt;/code&gt;, manually check all &lt;code&gt;toolVersion&lt;/code&gt; properties, and update &lt;code&gt;gradle.properties&lt;/code&gt; as accordingly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;NB&lt;/strong&gt; — Maven handles this differently, and does not have this concern.&lt;/p&gt; &#xA;&lt;h3&gt;Keep your build fast&lt;/h3&gt; &#xA;&lt;p&gt;A fast local build is one of the best things you can do for your team. There are variants of profiling your build for Gradle and Maven:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://scans.gradle.com/&#34;&gt;Gradle build scan&lt;/a&gt; with the &lt;code&gt;--scan&lt;/code&gt; flag&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jcgay/maven-profiler&#34;&gt;Maven profiler extension&lt;/a&gt; with the &lt;code&gt;-Dprofile&lt;/code&gt; flag&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://scans.gradle.com/s/fik7c7bq25l3w&#34;&gt;an example build scan&lt;/a&gt; from May 1, 2023.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NB&lt;/strong&gt; — &lt;a href=&#34;https://scans.gradle.com/#maven&#34;&gt;Build Scan&lt;/a&gt; supports Maven as well when using the paid enterprise version.&lt;/p&gt; &#xA;&lt;h3&gt;Keep your developers fast&lt;/h3&gt; &#xA;&lt;p&gt;Some shortcuts to speed up the red-green-refactor cycle:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Just validate code coverage; do not run other parts of the build: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Gradle: &lt;code&gt;./gradlew clean jacocoTestReport jacocoTestCoverageVerification&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Maven: &lt;code&gt;./mvnw clean test jacoco:report jacoco:check&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tips&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Both &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#dependency-check&#34;&gt;&lt;em&gt;dependency vulnerability checks&lt;/em&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#use-mutation-testing&#34;&gt;&lt;em&gt;mutation testing&lt;/em&gt;&lt;/a&gt; can take a while, depending on your project. If you find they slow your team local build too much, these are good candidates for moving to &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#setup-your-ci&#34;&gt;CI-only steps&lt;/a&gt;, such as a &lt;code&gt;-PCI&lt;/code&gt; flag for Maven (see &#34;Tips&#34; section of &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#use-gradle-or-maven&#34;&gt;Use Gradle or Maven&lt;/a&gt; for Gradle for an equivalent). This project keeps them as part of the local build, as the demonstration code is short&lt;/li&gt; &#xA; &lt;li&gt;See the bottom of &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/build.gradle&#34;&gt;&lt;code&gt;build.gradle&lt;/code&gt;&lt;/a&gt; for an example of customizing &#34;new&#34; versions reported by the Gradle &lt;code&gt;dependencyUpdates&lt;/code&gt; task&lt;/li&gt; &#xA; &lt;li&gt;The equivalent Maven approach for controlling the definition of &#34;new&#34; is to use &lt;a href=&#34;https://www.mojohaus.org/versions-maven-plugin/version-rules.html&#34;&gt;&lt;em&gt;Version number rules&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;With the Gradle plugin, you can program your build to fail if dependencies are outdated. Read at &lt;a href=&#34;https://github.com/ben-manes/gradle-versions-plugin/issues/431#issuecomment-703286879&#34;&gt;&lt;em&gt;Configuration option to fail build if stuff is out of date&lt;/em&gt;&lt;/a&gt; for details&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Choose your code style&lt;/h2&gt; &#xA;&lt;p&gt;Style is an often overlooked but very critical attribute of writing. The style of writing directly impacts the readability and understandability of the end product&lt;/p&gt; &#xA;&lt;p&gt;There are 2 main java code styles&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.oracle.com/technetwork/java/codeconventions-150003.pdf&#34;&gt;Sun code style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://google.github.io/styleguide/javaguide.html&#34;&gt;Google code style&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is up to you which one you should choose. But the style should be chosen and the style should be the same for everyone.&lt;/p&gt; &#xA;&lt;p&gt;To maintain the same standard &lt;code&gt;config/ide/eclipse-java-google-style.xml&lt;/code&gt; or &lt;code&gt;intellij-java-google-style.xml&lt;/code&gt; should be imported to your IDE. Checkstyle should be configured based on the chosen standard&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/images/coffee-grinder.png&#34; alt=&#34;Coffee grinder&#34; align=&#34;right&#34; width=&#34;20%&#34; height=&#34;auto&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Generate code&lt;/h2&gt; &#xA;&lt;p&gt;When sensible, prefer to generate rather than write code. Here&#39;s why:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://threevirtues.com/&#34;&gt;Intelligent laziness is a virtue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Tools always work, unless they have bugs, and you can fix bugs. Programmers make typos, and fixing typos is a challenge when not obvious. Worse are &lt;a href=&#34;https://en.wiktionary.org/wiki/thinko&#34;&gt;_ thinkos_&lt;/a&gt;; code generation does not &#34; think&#34;, so is immune to this problem&lt;/li&gt; &#xA; &lt;li&gt;Generated code does not need code review, only the source input for generation needs review, and this is usually shorter and easier to understand. Only your hand-written code needs review&lt;/li&gt; &#xA; &lt;li&gt;Generated code is usually ignored by tooling such as linting or code coverage (and there are simple workarounds when this is not the case). Your hand-written code needs tooling to shift problems left&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that many features for which in Java one would use code generation (&lt;em&gt;eg&lt;/em&gt;, Lombok&#39;s &lt;a href=&#34;https://projectlombok.org/features/GetterSetter&#34;&gt;&lt;code&gt;@Getter&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://www.projectlombok.org/features/ToString&#34;&gt;&lt;code&gt;@ToString&lt;/code&gt;&lt;/a&gt;), can be built-in language features in other languages such as Kotlin or Scala (&lt;em&gt;eg&lt;/em&gt;, &lt;a href=&#34;https://kotlinlang.org/docs/reference/properties.html&#34;&gt;properties&lt;/a&gt; or &lt;a href=&#34;https://kotlinlang.org/docs/reference/data-classes.html&#34;&gt;data classes&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Lombok&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://projectlombok.org/&#34;&gt;Lombok&lt;/a&gt; is by far the most popular tool in Java for code generation. Lombok is an &lt;em&gt;annotation processor&lt;/em&gt;, that is, a library (jar) which cooperates with the Java compiler. (&lt;a href=&#34;https://blog.frankel.ch/introductory-guide-annotation-processor/#handling-annotations-at-compile-time-annotation-processors&#34;&gt;&lt;em&gt;An introductory guide to annotations and annotation processors&lt;/em&gt;&lt;/a&gt; is a good article if you&#39;d like to read more on how annotation processing works.)&lt;/p&gt; &#xA;&lt;p&gt;Lombok covers many common use cases, does not have runtime dependencies, there are plugins for popular IDEs that understand Lombok&#39;s code generation, and has tooling integration for JaCoCo&#39;s output code coverage (see &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#leverage-lombok-to-tweak-code-coverage&#34;&gt;below&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Do note though, Lombok is not a panacea, and has detractors. For example, to generate code as an annotation processor, it in places relies on internal JDK APIs, though the situation has improved as the JDK exposes those APIs in portable ways.&lt;/p&gt; &#xA;&lt;h4&gt;Leverage Lombok to tweak code coverage&lt;/h4&gt; &#xA;&lt;p&gt;Be sparing in disabling code coverage! JaCoCo knows about Lombok&#39;s &lt;a href=&#34;https://projectlombok.org/api/lombok/Generated.html&#34;&gt;&lt;code&gt;@Generated&lt;/code&gt;&lt;/a&gt;, and will ignore annotated code.&lt;/p&gt; &#xA;&lt;p&gt;A typical use is for the &lt;code&gt;main()&lt;/code&gt; method in a framework such as Spring Boot or &lt;a href=&#34;https://micronaut.io/&#34;&gt;Micronaut&lt;/a&gt;. For a &lt;em&gt;command-line program&lt;/em&gt;, you will want to test your &lt;code&gt;main()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Do note that Lombok reflects on internal features of the JDK. If you have issues, for &lt;em&gt;Maven&lt;/em&gt;: use in your project the &lt;code&gt;--add-opens java.base/java.lang=ALL-UNNAMED&lt;/code&gt; example from &lt;code&gt;.mvn/jvm.config&lt;/code&gt;, and look to address these. The solutions in the project are a &#34;workaround&#34; assuming Java 17. This is a two-edged sword: as the JVM improves access controls, you may find, especially dependencies, that there are times you want deep reflection.&lt;/p&gt; &#xA;&lt;h4&gt;Lombok configuration&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://projectlombok.org/features/configuration&#34;&gt;Configure Lombok&lt;/a&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/src/lombok.config&#34;&gt;&lt;code&gt;src/lombok.config&lt;/code&gt;&lt;/a&gt; rather than the project root or a separate &lt;code&gt;config&lt;/code&gt; directory. At a minimum:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;config.stopBubbling=true&#xA;lombok.addLombokGeneratedAnnotation=true&#xA;lombok.anyConstructor.addConstructorProperties=true&#xA;lombok.extern.findbugs.addSuppressFBWarnings=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Lines:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;stopBubbling&lt;/code&gt; tells Lombok that there are no more configuration files higher in the directory tree&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;addLombokGeneratedAnnotation&lt;/code&gt; helps JaCoCo ignore code generated by Lombok&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;addConstructorProperties&lt;/code&gt; helps JSON/XML frameworks such as Jackson (this may not be relevant for your project, but is generally harmless, so the benefit comes for free)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;addSuppressFBWarnings&lt;/code&gt; helps SpotBugs ignore code generated by Lombok&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;More examples&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automating &lt;code&gt;Dockerfile&lt;/code&gt; — &lt;a href=&#34;https://spring.io/blog/2021/01/04/ymnnalft-easy-docker-image-creation-with-the-spring-boot-maven-plugin-and-buildpacks&#34;&gt;&lt;em&gt;YMNNALFT: Easy Docker Image Creation with the Spring Boot Maven Plugin and Buildpacks&lt;/em&gt;&lt;/a&gt; (&lt;strong&gt;NB&lt;/strong&gt; — you do not need to have a Spring Boot project to use the plugin: just &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/2.4.1/maven-plugin/reference/htmlsingle/#build-image&#34;&gt;treat the plugin as a &#34;regular&#34; one&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/images/gear.png&#34; alt=&#34;Gear&#34; align=&#34;right&#34; width=&#34;20%&#34; height=&#34;auto&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Leverage the compiler&lt;/h2&gt; &#xA;&lt;p&gt;Compilers targeting the JVM generally provide warning flags for dodgy code, and a flag to turn warnings into errors: Use them. The compiler is your first line of defense against code issues.&lt;/p&gt; &#xA;&lt;p&gt;For example, add these flags with &lt;code&gt;javac&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-Werror&lt;/code&gt; -- turn warnings into errors, and fails the build&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-Xlint:all,-processing&lt;/code&gt; -- enable all warnings excluding annotation processing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Be judicious in disabling compiler warnings: they usually warn you for good reasons. For &lt;code&gt;javac&lt;/code&gt;, disabled warnings might include &lt;code&gt;serial&lt;/code&gt; or &lt;code&gt;deprecation&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;JVM compilers support &lt;code&gt;-Werror&lt;/code&gt; (&lt;em&gt;eg&lt;/em&gt;, &lt;code&gt;javac&lt;/code&gt;, &lt;code&gt;kotlinc&lt;/code&gt;, &lt;code&gt;scalac&lt;/code&gt;, &lt;em&gt;et al&lt;/em&gt;); enabling/disabling specific warnings may be compiler-specific.&lt;/p&gt; &#xA;&lt;h3&gt;Tips&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Consider using &lt;a href=&#34;https://errorprone.info/&#34;&gt;&lt;em&gt;Error Prone&lt;/em&gt;&lt;/a&gt;. &lt;em&gt;Error Prone&lt;/em&gt; is an excellent compiler plugin to fail problems earlier: fail at compile-time rather than a runtime, however it can be overly strict&lt;/li&gt; &#xA; &lt;li&gt;Lombok annotation processing fails &lt;code&gt;-Xlint:all&lt;/code&gt;. Use &lt;code&gt;-Xlint:all,-processing&lt;/code&gt; to bypass warnings about annotation processing. In addition, using Lombok&#39;s configuration to add suppression annotations on generated code (so other tools will ignore generated code) needs the older Spotbugs annotations provided as a dependency&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Use linting&lt;/h2&gt; &#xA;&lt;p&gt;&#34;Linting&#34; is static code analysis with an eye towards style and dodgy code constructs. The term &lt;a href=&#34;https://en.wikipedia.org/wiki/Lint_(software)&#34;&gt;derives from early UNIX&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Linting for modern languages is simple: the compiler complains on your behalf. This is the case, for example, Golang. Having common team agreements on style and formatting is a boon for avoiding &lt;a href=&#34;https://en.wikipedia.org/wiki/Law_of_triviality&#34;&gt;bikeshedding&lt;/a&gt;, and aids in:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Reading a code base, relying on a similar style throughout&lt;/li&gt; &#xA; &lt;li&gt;Code reviews, focusing on substantive over superficial changes&lt;/li&gt; &#xA; &lt;li&gt;Merging code, avoiding trivial or irrelevant conflicts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Code style and formatting are &lt;em&gt;entirely&lt;/em&gt; a matter of team discussion and agreement. In Java, there is no recommended style, and &lt;code&gt;javac&lt;/code&gt; is good at parsing almost anything thrown at it. However, humans reading code are not as well-equipped.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pick a team style, stick to it, and &lt;em&gt;enforce&lt;/em&gt; it with tooling.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;See the section &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#checkstyle&#34;&gt;&lt;em&gt;Checkstyle&lt;/em&gt;&lt;/a&gt; for more details on enforcement.&lt;/p&gt; &#xA;&lt;h3&gt;Tips&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you use Google Java coding conventions, consider &lt;a href=&#34;https://github.com/diffplug/spotless&#34;&gt;Spotless&lt;/a&gt; which can autoformat your code&lt;/li&gt; &#xA; &lt;li&gt;Consider use of &lt;a href=&#34;https://editorconfig.org/&#34;&gt;EditorConfig&lt;/a&gt; for teams in which editor choice is up to each developer. EditorConfig is a cross-IDE standard means of specifying code formatting, respected by &lt;a href=&#34;https://www.jetbrains.com/help/idea/configuring-code-style.html#editorconfig&#34;&gt;IntelliJ&lt;/a&gt;, and other major editors&lt;/li&gt; &#xA; &lt;li&gt;To open the report for Checkstyle, build locally and use the &lt;code&gt;&amp;lt;project root&amp;gt;/build/reports/checkstyle/&lt;/code&gt; path. The path shown in a Docker build is relative to the interior of the container&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Use static code analysis&lt;/h2&gt; &#xA;&lt;h3&gt;Checkstyle&lt;/h3&gt; &#xA;&lt;p&gt;With Java, one needs to rely on external tooling for linting. The most popular choice is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://checkstyle.sourceforge.io/&#34;&gt;CheckStyle&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.gradle.org/current/userguide/checkstyle_plugin.html&#34;&gt;Gradle plugin&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://maven.apache.org/plugins/maven-checkstyle-plugin/index.html&#34;&gt;Maven plugin&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;However, Checkstyle will not auto-format code for you. For auto-formatting, consider, depending on your team preferences, any of these build plugins:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/diffplug/spotless&#34;&gt;Spotless&lt;/a&gt; — Focus on Google style guides for Java. For Gradle, use the &lt;code&gt;spotlessApply&lt;/code&gt; task to reformat; for Maven use the &lt;code&gt;spotless:apply&lt;/code&gt; goal to reformat. It supports &lt;em&gt;many&lt;/em&gt; source languages, not just Java&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openrewrite/rewrite&#34;&gt;Rewrite&lt;/a&gt; — General framework for transforming source code with many extensions and plugins for different languages and frameworks. For Gradle, see &lt;a href=&#34;https://github.com/openrewrite/rewrite-gradle-plugin&#34;&gt;Rewrite for Gradle&lt;/a&gt; with a focus on SUN style guides for Java; for Maven, see &lt;a href=&#34;https://docs.openrewrite.org/java/checkstyle&#34;&gt;Rewrite for Maven&lt;/a&gt; with a focus on SUN style guides for Java&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For your editor, consider the sample &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/.editorconfig&#34;&gt;.editorconfig&lt;/a&gt; file in this project. It is respected by IntelliJ and many other code editors.&lt;br&gt; (The sample uses 80-character line limits as IBM and Hollerith punch cards intended, and helpful for speed readers of code. A worth point of team discussion.)&lt;/p&gt; &#xA;&lt;p&gt;The demonstration projects assume checkstyle configuration at &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/config/checkstyle/checkstyle.xml&#34;&gt;&lt;code&gt;config/checkstyle/checkstyle.xml&lt;/code&gt;&lt;/a&gt;. This is the default location for Gradle, and configured for Maven in the project.&lt;/p&gt; &#xA;&lt;p&gt;The Checkstyle configuration used is stock &lt;a href=&#34;https://github.com/checkstyle/checkstyle/raw/master/src/main/resources/sun_checks.xml&#34;&gt;&lt;code&gt;sun_checks.xml&lt;/code&gt;&lt;/a&gt; (this is SUN default style for Java) with the addition of support for &lt;code&gt;@SuppressWarnings(checkstyle:...)&lt;/code&gt;. Note that this format is &lt;em&gt;overly aggressive&lt;/em&gt; for Javadocs, and needs tweaking for most projects. See comments in &lt;code&gt;build.gradle&lt;/code&gt; about SUN &lt;em&gt;vs&lt;/em&gt; Google styles for Java.&lt;/p&gt; &#xA;&lt;h3&gt;Spotbugs&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Static code analysis&lt;/em&gt; is important in your build. This is analysis of your source and compiled bytecode which finds known &lt;a href=&#34;https://spotbugs.readthedocs.io/en/latest/bugDescriptions.html&#34;&gt;issues&lt;/a&gt; ranging among other things:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Idioms that your team finds poor or hard to read&lt;/li&gt; &#xA; &lt;li&gt;Dangerous anti-patterns (&lt;em&gt;eg&lt;/em&gt;, missing &lt;code&gt;null&lt;/code&gt; checks in Java; your language may aid you in this, &lt;em&gt;eg&lt;/em&gt;, Kotlin or Scala)&lt;/li&gt; &#xA; &lt;li&gt;Insecure code (see &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#shift-security-left&#34;&gt;Shift security left&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Use of outdated code patterns (&lt;em&gt;eg&lt;/em&gt;, Java 5 patterns might be better expressed with Java 17 improvements)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spotbugs.github.io/spotbugs-maven-plugin/examples/violationChecking.html&#34;&gt;Fail your build&lt;/a&gt; if issues are detected&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Gradle and Maven demonstration builds use these to help you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pmd.github.io/latest/&#34;&gt;PMD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spotbugs.github.io/&#34;&gt;SpotBugs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And use the &lt;a href=&#34;https://find-sec-bugs.github.io/&#34;&gt;Find Security Bugs&lt;/a&gt; extension for &lt;a href=&#34;https://spotbugs.github.io/&#34;&gt;Spotbugs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CPD for Gradle — see &lt;a href=&#34;https://github.com/aaschmid/gradle-cpd-plugin&#34;&gt;https://github.com/aaschmid/gradle-cpd-plugin&lt;/a&gt;. CPD works for MavenA&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Security&lt;/h4&gt; &#xA;&lt;p&gt;SpotBugs uses an outdated version of &lt;a href=&#34;https://commons.apache.org/proper/commons-bcel/&#34;&gt;BCEL&lt;/a&gt;. There is a &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2022-42920&#34;&gt;CVE&lt;/a&gt; (vulnerability) aginst BCEL that is resolved, however SpotBugs uses a version of BCEL prior to the fix. This project uses a forced update of BCEL for SpotBugs, however that breaks the plugin (Gradle and Maven).&lt;/p&gt; &#xA;&lt;h4&gt;Tips&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Edit &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/config/pmd/custom-rules.xml&#34;&gt;&lt;code&gt;config/pmd/custom-rules.xml&lt;/code&gt;&lt;/a&gt; to adjust how PMD reviews your code (the sample in this project is from the PMD website)&lt;/li&gt; &#xA; &lt;li&gt;To open the report for Spotbugs, build locally and use the &lt;code&gt;&amp;lt;project root&amp;gt;/build/reports/spotbugs/&lt;/code&gt; (Gradle) or &lt;code&gt;&amp;lt;project root&amp;gt;/target/site/&lt;/code&gt; (Maven) path. Run &lt;code&gt;./mvnw site&lt;/code&gt; for the latter. The path shown in a Docker build is relative to the interior of the container&lt;/li&gt; &#xA; &lt;li&gt;To open the report for PMD, build locally and use the &lt;code&gt;&amp;lt;project root&amp;gt;/build/reports/pmd/&lt;/code&gt; (Gradle) or &lt;code&gt;&amp;lt;project root/target/site/&lt;/code&gt; (Maven) path. The path shown in a Docker build is relative to the interior of the container&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Modernizer&lt;/h3&gt; &#xA;&lt;p&gt;Another static code analysis tool is &lt;em&gt;Modernizer&lt;/em&gt; to check of use of obsolete APIs and types; this is related to but not identical to &lt;em&gt;deprecated&lt;/em&gt; APIs. An example is moving to the JDK&#39;s &lt;code&gt;Objects.equals&lt;/code&gt; from Guava&#39;s &lt;code&gt;Objects.equal&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that Modernizer works at the bytecode level (not source code), so is suitable for any JVM language, not just Java.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/andygoossens/gradle-modernizer-plugin&#34;&gt;Gradle plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gaul/modernizer-maven-plugin&#34;&gt;Maven plugin&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Shift security left&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://find-sec-bugs.github.io/&#34;&gt;Find known code security issues&lt;/a&gt; — a plugin for SpotBugs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://owasp.org/www-project-dependency-check/&#34;&gt;DependencyCheck&lt;/a&gt; — verify your project dependencies against know security issues&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Checking dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Use checksums and signatures: verify what your build and project downloads! When publishing for consumption by others, provide MD5 (checksum) files in your upload: be a good netizen, and help others trust code downloaded from you&lt;/p&gt; &#xA;&lt;h4&gt;Gradle&lt;/h4&gt; &#xA;&lt;p&gt;Read more at &lt;a href=&#34;https://docs.gradle.org/current/userguide/dependency_verification.html&#34;&gt;&lt;em&gt;Verifying dependencies&lt;/em&gt;&lt;/a&gt; , an incubating feature.&lt;/p&gt; &#xA;&lt;h4&gt;Maven&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;Always&lt;/em&gt; run with the &lt;code&gt;--strict-checksums&lt;/code&gt; (or &lt;code&gt;-C&lt;/code&gt;) flag. See &lt;a href=&#34;https://dev.to/khmarbaise/maven-artifact-checksums---what-396j&#34;&gt;&lt;em&gt;Maven Artifact Checksums - What?&lt;/em&gt;&lt;/a&gt; for more information. This is easy to forget about at the local command line. The &lt;a href=&#34;https://maven.apache.org/configure.htm&#34;&gt;&lt;code&gt;.mvn/maven.config&lt;/code&gt;&lt;/a&gt; file helps this be automatic, and can be checked into your project repository.&lt;/p&gt; &#xA;&lt;p&gt;An alternative is to declare &lt;em&gt;each&lt;/em&gt; repository in your user &lt;code&gt;settings.xml&lt;/code&gt; and &lt;a href=&#34;https://dzone.com/articles/maven-artifact-checksums-what&#34;&gt;set the checksum policy to &#34;fail&#34;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However, in CI this is easy; another example of why local builds should repeat what CI builds do. The &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/batect.yml&#34;&gt;Batect configuration&lt;/a&gt; for the demonstration project says:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;build-maven:&#xA;  description: Build and test with Maven&#xA;  run:&#xA;    container: build-env&#xA;    command: ./mvnw --strict-checksums clean verify&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and the GitHub action says:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- name: Build and test with Maven&#xA;  run: ./mvnw --strict-checksums verify&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#keep-local-consistent-with-ci&#34;&gt;Batect&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#setup-your-ci&#34;&gt;GitHub Actions&lt;/a&gt; are discussed both above.)&lt;/p&gt; &#xA;&lt;h3&gt;Dependency check&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is CRITICAL if you have any direct, indirect, or through-plugin dependencies on Log4j. Beyond your project, you may be impacted by services you call, so check with your organization or external services&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://owasp.org/www-project-dependency-check/&#34;&gt;DependencyCheck&lt;/a&gt; is the current &lt;em&gt;best tool&lt;/em&gt; for JVM projects to verify that your project does not rely on external code with known security vulnerabilities ([CVEs](&lt;a href=&#34;https://cve.mitre&#34;&gt;https://cve.mitre&lt;/a&gt;. org/)) from the NVD. That said, DependencyCheck does impact build times. It is smart about caching, but will once a day may take time to download data on any new NVD CVEs, and occasionally the site is down for maintenance. You may consider leaving this check in CI-only if you find local build times overly impacted. Leaving these checks to CI-only is a tradeoff between &#34;shifting security left&#34;, and speed for local builds. I lean towards &lt;em&gt;security first&lt;/em&gt;; however, you know your circumstances best.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This project fails the build if finding any CVEs for the current version of any dependency.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Your build should fail, too. It is a &lt;em&gt;red flag&lt;/em&gt; to you to consider the CVE, what impact the vulnerable dependency has, and if you are comfortable with a vulnerable dependency. It is rarely (if ever) the case you keep a vulnerable version of a dependency.&lt;/p&gt; &#xA;&lt;h3&gt;Automate scanning for secrets&lt;/h3&gt; &#xA;&lt;p&gt;One key to shifting security left is avoiding secrets (passwords, private identifiers, etc.) in your source code, commit history, and so on.&lt;/p&gt; &#xA;&lt;p&gt;GitHub and other repository services offer secrets scanning out of the box: &lt;a href=&#34;https://github.blog/2023-02-28-secret-scanning-alerts-are-now-available-and-free-for-all-public-repositories/&#34;&gt;Secret scanning alerts are now available (and free) for all public repositories&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Tips&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To open the report for DependencyCheck, build locally and use the &lt;code&gt;&amp;lt;project root&amp;gt;/build/reports/&lt;/code&gt; (Gradle) or &lt;code&gt;&amp;lt;project root/target/&lt;/code&gt; (Maven) path. The path shown in a Docker build is relative to the interior of the container&lt;/li&gt; &#xA; &lt;li&gt;Sometimes you may want to refresh your local cache of the NVD files: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Gradle: &lt;code&gt;./gradlew dependencyCheckPurge depenedencyCheckUpdate&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Maven: &lt;code&gt;./mvnw dependency-check:purge dependency-check:update-only&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Note that this project has updated to DependencyCheck 8. As is the project worked without changes after updating. See &lt;a href=&#34;https://github.com/jeremylong/DependencyCheck/releases/tag/v8.0.0&#34;&gt;&lt;em&gt;v8.0.0&lt;/em&gt; release notes&lt;/a&gt; when updating from DependencyCheck 8&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Notes&lt;/h4&gt; &#xA;&lt;p&gt;DependencyCheck may be your slowest quality check in local builds (competing with mutation testing for that ignominious title). Sometimes it may fail when the upstream source for CVEs is offline. If this is a recurring problem for you, consider moving this check into CI. The downside that local work might use an insecure dependency for a while. Checking daily for updated dependencies can lessen this risk:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Gradle: &lt;code&gt;./gradlew dependencyUpdates&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Maven: &lt;code&gt;./mvnw versions:update-properties&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For non-Windows platforms, you may see this warning when &lt;code&gt;DependencyCheck&lt;/code&gt; runs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.NET Assembly Analyzer could not be initialized and at least one &#39;exe&#39; or &#39;dll&#39; was scanned. The &#39;dotnet&#39; executable could not be found on the path; either disable the Assembly Analyzer or add the path to dotnet core in the configuration.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In most situations, you are running in a Linux-based Docker container, or using local Linux or Mac command line. &lt;strong&gt;In a Windows project, this is an issue to address, and may be a serious security concern&lt;/strong&gt; indicating you are missing critical Windows components. For other platforms, this is a nuisance message.&lt;/p&gt; &#xA;&lt;p&gt;On Gradle when updating to version 7.x.x of DependencyCheck from 6.x.x or earlier, first run &lt;code&gt;./gradlew dependencyCheckPurge&lt;/code&gt; to clear out the local cache schema of CVEs. DependencyCheck moved to schema v2 in 7.x.x from v1 in 6.x.x and earlier, and the 7.0.0 Gradle plugin fails with the older schema version.&lt;/p&gt; &#xA;&lt;h3&gt;Dependabot&lt;/h3&gt; &#xA;&lt;p&gt;GitHub provides &lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/github/administering-a-repository/keeping-your-dependencies-updated-automatically&#34;&gt;Dependabot&lt;/a&gt; (other systems than GitHub may have similar robot tools) which, among other things, can automatically issue PRs to your repository when security issues are discovered. This project uses Dependabot for Gradle and Maven.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NB&lt;/em&gt; — Dependabot is more reliable than either the Gradle or Maven plugins for dependencies.&lt;/p&gt; &#xA;&lt;h3&gt;Tips&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See the &#34;Tips&#34; section of &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#use-gradle-or-maven&#34;&gt;Gradle or Maven&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;With GitHub actions, consider adding a tool such as &lt;a href=&#34;https://dependabot.com/&#34;&gt;Dependabot&lt;/a&gt;, which automatically files GitHub issues for known dependency vulnerabilities. See &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#dependabot&#34;&gt;earlier in this document&lt;/a&gt; for an example&lt;/li&gt; &#xA; &lt;li&gt;You can &lt;em&gt;temporarily&lt;/em&gt; disable OWASP dependency checking via &lt;code&gt;-Dowasp.skip=true&lt;/code&gt; for either Gradle or Maven, for example if the OWASP site is down for maintenance, and you cannot update the local CVE cache&lt;/li&gt; &#xA; &lt;li&gt;The &lt;em&gt;log4shell security vulnerabilities&lt;/em&gt; (&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2021-44228&#34;&gt;CVE-2021-44228&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/(https://nvd.nist.gov/vuln/detail/CVE-2021-45046)&#34;&gt;CVE-2021-45046&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/(https://nvd.nist.gov/vuln/detail/CVE-2021-45105)&#34;&gt;CVE-2021-45105&lt;/a&gt; are extremely severe. They are so severe, this should be a top priority for you to address regardless of other priorities. Although this project does not use &lt;code&gt;log4j&lt;/code&gt;, local testing shows that the &lt;code&gt;DependencyCheck&lt;/code&gt; plugin for either Gradle or Maven fails build when you use an older, insecure version of &lt;code&gt;log4j-core&lt;/code&gt; indirectly. Note that Gradle 7.3.3+ itself fails your build if it detect a dependency on a vulnerable version of &lt;code&gt;log4j-core&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The &lt;em&gt;BCEL security vulnerability&lt;/em&gt; (&lt;a href=&#34;https://www.opencve.io/cve/CVE-2022-42920&#34;&gt;CVE-2022-42920&lt;/a&gt;) is critical, and should be a top priority to address. In this project, BCEL is used by Spotbugs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;TODOs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How to automate the &lt;code&gt;-C&lt;/code&gt; (checksum) flag in Maven? See &lt;a href=&#34;https://dev.to/khmarbaise/maven-artifact-checksums---what-396j&#34;&gt;&lt;em&gt;Maven Artifact Checksums - What?&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Leverage unit testing and coverage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jacoco.org/jacoco/&#34;&gt;JaCoCo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use the &#34;ratchet&#34; pattern to fail the build when coverage drops. Robert Greiner talks more on this in &lt;a href=&#34;https://robertgreiner.com/continuous-code-improvement-using-ratcheting/&#34;&gt;&lt;em&gt;Continuous Code Improvement Using Ratcheting&lt;/em&gt;&lt;/a&gt; This follows the agile &lt;a href=&#34;https://dzone.com/articles/the-boy-scout-software-development-principle&#34;&gt;&#34;Boy Scout&#34; principle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fluent assertions — lots of options in this area &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://assertj.github.io/doc/&#34;&gt;AssertJ&lt;/a&gt; — solid choice&lt;/li&gt; &#xA;   &lt;li&gt;Built assertions from Junit makes is difficult for developers to distinguish &#34;actual&#34; values from &#34;expected&#34; values. This is a limitation from Java as it lacks named parameters. Other frameworks compatible with JUnit provide more fluent assertions such as AssertJ. Different choices make sense depending on your source language&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Unit testing and code coverage are foundations for code quality. Your build should help you with these as much as possible. 100% coverage may seem absurd; however, levels of coverage like this come with unexpected benefits such as finding dead code in your project or helping refactoring to be simple. An example: with high coverage (say 95%+, your experience will vary) simplifying your covered code may lower your coverage as uncovered code becomes more prominent in the total ratio.&lt;/p&gt; &#xA;&lt;p&gt;Setup for needed plugins:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For Gradle use the &lt;code&gt;java&lt;/code&gt; plugin&lt;/li&gt; &#xA; &lt;li&gt;For Maven, use more recent versions of the &lt;a href=&#34;https://maven.apache.org/surefire/maven-surefire-plugin/&#34;&gt;Maven Surefire Plugin&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(See &lt;a href=&#34;https://github.com/hcoles/pitest/issues/347&#34;&gt;&lt;em&gt;suggestion : Ignore the generated code&lt;/em&gt;&lt;/a&gt; for a Lombok/PITest issue.)&lt;/p&gt; &#xA;&lt;p&gt;To see the coverage report (on passed or failed coverage), open:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For Gradle, &lt;code&gt;build/reports/jacoco/test/html/index.html&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;For Maven, &lt;code&gt;target/site/jacoco/index.html&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This project also provides the coverage report as part of Maven&#39;s project report.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/coverage.sh&#34;&gt;&lt;code&gt;coverage&lt;/code&gt;&lt;/a&gt; script is helpful for checking your current coverage state: try &lt;code&gt;./coverage -f all&lt;/code&gt;. Current limitations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Maven builds only&lt;/li&gt; &#xA; &lt;li&gt;Single module builds only&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tips&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;With Maven, &lt;em&gt;do use&lt;/em&gt; the available BOM (bill of materials) for JUnit. An example &lt;code&gt;pom.xml&lt;/code&gt; block is: &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;  &amp;lt;dependencyManagement&amp;gt;&#xA;      &amp;lt;dependencies&amp;gt;&#xA;          &amp;lt;dependency&amp;gt;&#xA;              &amp;lt;groupId&amp;gt;org.junit&amp;lt;/groupId&amp;gt;&#xA;              &amp;lt;artifactId&amp;gt;junit-bom&amp;lt;/artifactId&amp;gt;&#xA;              &amp;lt;version&amp;gt;${junit.version}&amp;lt;/version&amp;gt;&#xA;              &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&#xA;              &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;&#xA;          &amp;lt;/dependency&amp;gt;&#xA;      &amp;lt;/dependencies&amp;gt;&#xA;  &amp;lt;/dependencyManagement&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; This helps avoid dependency conflicts from other dependencies or plugins&lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#leverage-lombok-to-tweak-code-coverage&#34;&gt;discussion on Lombok&lt;/a&gt; how to &lt;em&gt;sparingly&lt;/em&gt; leverage the &lt;code&gt;@Generated&lt;/code&gt; annotation for marking code that JaCoCo should ignore&lt;/li&gt; &#xA; &lt;li&gt;Discuss with your team the concept of a &#34;coverage ratchet&#34;. This means, once a baseline coverage percentage is agreed to, the build configuration will only raise this value, not lower it. This is fairly simple to do by periodically examining the JaCoCo report, and raising the build coverage percentage over time to match improvements in the report&lt;/li&gt; &#xA; &lt;li&gt;Unfortunately neither Gradle&#39;s nor Maven&#39;s JaCoCo plugin will fail your build when coverage &lt;em&gt;rises&lt;/em&gt;! This would be helpful for supporting the coverage ratchet&lt;/li&gt; &#xA; &lt;li&gt;You may find &lt;em&gt;mocking&lt;/em&gt; helpful for injection. The Java community is not of one mind on mocking, so use your judgment: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://site.mockito.org/&#34;&gt;Mockito&lt;/a&gt; is the &#34;standard&#34; choice, and is a dependency for the sample projects. For modern versions of Mockito, please use the &lt;code&gt;mockito-core&lt;/code&gt; dependency rather than &lt;code&gt;mockito-inline&lt;/code&gt;. See &lt;code&gt;TheFooTest.shouldRedAlertAsStaticMock&lt;/code&gt; for an example. Note that this project has updated to Mockito 5. See &lt;a href=&#34;https://github.com/mockito/mockito/releases/tag/v5.0.0&#34;&gt;&lt;em&gt;v5.0.0&lt;/em&gt; release notes&lt;/a&gt; when updating from Mockito 4&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://powermock.github.io/&#34;&gt;PowerMock&lt;/a&gt; provides additional features; however, Mockito normally covers use cases&lt;/li&gt; &#xA;   &lt;li&gt;Other Modern JVM languages — these languages may prefer different mocking libraries, &lt;em&gt;eg&lt;/em&gt;, &lt;a href=&#34;https://mockk.io/&#34;&gt;MockK&lt;/a&gt; for Kotlin&lt;/li&gt; &#xA;   &lt;li&gt;You might consider complementary libraries to Mockito for specific circumstances, &lt;em&gt;eg&lt;/em&gt;, &lt;a href=&#34;https://github.com/stefanbirkner/system-lambda&#34;&gt;System Lambda&lt;/a&gt; for checking STDOUT and STDERR, program exits, and use of system properties (&lt;em&gt;eg&lt;/em&gt;, validate logging), also a dependency for the sample projects. (&lt;em&gt;NB&lt;/em&gt; — these are generally not parallelizable tests as they alter the state of the JVM. Another is the &lt;a href=&#34;https://junit-pioneer.org/&#34;&gt;JUnit Pioneer&lt;/a&gt; extension pack. If you need these, be cautious about using parallel testing features, and avoiding &lt;a href=&#34;https://hackernoon.com/flaky-tests-a-war-that-never-ends-9aa32fdef359&#34;&gt;Flaky Tests&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;To open the report for JaCoCo, build locally and use the &lt;code&gt;&amp;lt;project root&amp;gt;/build/reports/jacoco/test/html/&lt;/code&gt; path. The path shown in a Docker build is relative to the interior of the container&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Use mutation testing&lt;/h2&gt; &#xA;&lt;p&gt;Unit testing is great for testing your production code. But have you thought about testing your unit tests? What that means is, how are you sure your tests really check what you meant them to? Fortunately, there is an automated way to do just that, no code from you required, only some build configuration.&lt;/p&gt; &#xA;&lt;p&gt;Mutation testing is a simple concept: Go &#34;break&#34; some production code, and see if any unit tests fail. Production bytecode is changed during the build— for example, an &lt;code&gt;if (x)&lt;/code&gt; is changed to &lt;code&gt;if (!x)&lt;/code&gt;—, and the unit tests run. With good code coverage, there should now be a failing unit test.&lt;/p&gt; &#xA;&lt;p&gt;The best option for Modern Java/JVM mutation testing is &lt;a href=&#34;http://pitest.org/&#34;&gt;PITest&lt;/a&gt;. It is under active development, does rather clever things with compiled bytecode, and has Gradle and Maven plugins. The main drawback for your &lt;em&gt;local build&lt;/em&gt; is that PITest is &lt;em&gt;noisy&lt;/em&gt;, so there might be more build output than you might expect.&lt;/p&gt; &#xA;&lt;p&gt;Mutation testing is one of the slowest parts of a local build. You might consider moving mutation testing to CI-only to speed up local &lt;em&gt;red-green-refactor&lt;/em&gt; cycle (&lt;a href=&#34;https://medium.com/@tunkhine126/red-green-refactor-42b5b643b506&#34;&gt;_Red, Green, Refactor!&lt;/a&gt;, &lt;a href=&#34;https://blog.cleancoder.com/uncle-bob/2014/12/17/TheCyclesOfTDD.html&#34;&gt;&lt;em&gt;The Cycles of TDD&lt;/em&gt;&lt;/a&gt;). Use your judgment on the value of the CI build never or rarely failing (modulo external resources) when local build passes &lt;em&gt;vs&lt;/em&gt; the speed of pushing good code.&lt;/p&gt; &#xA;&lt;p&gt;After running a build using PITest, to see the mutation report (on passed or failed mutation coverage), open:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For Gradle, open &lt;code&gt;build/reports/pitest/index.html&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;For Maven, open &lt;code&gt;target/pit-reports/index.html&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This project provides the PIT report as part of Maven&#39;s project report.&lt;/p&gt; &#xA;&lt;h3&gt;Tips&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Without further configuration, PITest defaults to mutating classes using your &lt;em&gt;project group&lt;/em&gt; as the package base. Example: Set the &lt;em&gt;project group&lt;/em&gt; to &#34;demo&#34; for either Gradle or Maven if your classes are underneath the &#34;demo.*&#34; package namespace, otherwise PITest may complain that there are no classes to mutate, or no unit tests to run&lt;/li&gt; &#xA; &lt;li&gt;If you need to open modules (&lt;em&gt;eg&lt;/em&gt;, &lt;code&gt;--add-opens&lt;/code&gt; flags), you need to include these flags in &#34;jvm args&#34; configuration for the plugin&lt;/li&gt; &#xA; &lt;li&gt;Read more about &lt;a href=&#34;https://testing.googleblog.com/2021/04/mutation-testing.html&#34;&gt;&lt;em&gt;Mutation Testing&lt;/em&gt;&lt;/a&gt; from Google&lt;/li&gt; &#xA; &lt;li&gt;To open the report for PITest, build locally and use the &lt;code&gt;&amp;lt;project root&amp;gt;/build/reports/pitest/&lt;/code&gt; (Gradle) or &lt;code&gt;&amp;lt;project root&amp;gt;/target/pit-reports/&lt;/code&gt; (Maven) path. The path shown in a Docker build is relative to the interior of the container&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Use integration testing&lt;/h2&gt; &#xA;&lt;p&gt;Here the project says &#34;integration testing&#34;. Your team may call it by another name. This means bringing up your application, possibly with &lt;a href=&#34;http://xunitpatterns.com/Mocks,%20Fakes,%20Stubs%20and%20Dummies.html&#34;&gt;fakes, stubs, mocks, spies, dummies, or doubles&lt;/a&gt; for external dependencies (databases, other services, &lt;em&gt;etc&lt;/em&gt;), and running tests against high-level functionality, but &lt;em&gt;not&lt;/em&gt; starting up external dependencies themselves (&lt;em&gt;ie&lt;/em&gt;, Docker, or manual command-line steps). Think of CI: what are called here &#34;integration tests&#34; are those which do &lt;em&gt;not&lt;/em&gt; need your CI to provide other services.&lt;/p&gt; &#xA;&lt;p&gt;An example is testing &lt;code&gt;STDOUT&lt;/code&gt; and &lt;code&gt;STDERR&lt;/code&gt; for a command-line application. (If you are in Spring Framework/Boot-land, use controller tests for your REST services.)&lt;/p&gt; &#xA;&lt;p&gt;Unlike &lt;code&gt;src/main/java&lt;/code&gt; and &lt;code&gt;src/test/java&lt;/code&gt;, there is no generally agreed convention for where to put integration tests. This project keeps all tests regardless of type in &lt;code&gt;src/test/java&lt;/code&gt; for simplicity of presentation, naming integration tests with &#34;*IT.java&#34;. A more sophisticated approach may make sense for your project.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to keep your integration tests in a separate source root from unit tests, consider these plugins:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For Gradle, use &lt;a href=&#34;https://docs.gradle.org/current/userguide/java_testing.html#sec:configuring_java_integration_tests&#34;&gt;native Gradle to add new test sets&lt;/a&gt;. (Previous versions of this project used the excellent &lt;a href=&#34;https://github.com/unbroken-dome/gradle-testsets-plugin&#34;&gt;&lt;code&gt;testsets&lt;/code&gt; plugin&lt;/a&gt;, however, it does not support Gradle 8)&lt;/li&gt; &#xA; &lt;li&gt;For Maven, use the &lt;a href=&#34;https://maven.apache.org/failsafe/maven-failsafe-plugin/&#34;&gt;Maven Failsafe Plugin&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Caution&lt;/strong&gt;: This project &lt;em&gt;duplicates&lt;/em&gt; &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/src/test/java/demo/ApplicationIT.java&#34;&gt;&lt;code&gt;ApplicationIT.java&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/src/integrationTest/java/demo/ApplicationTest.java&#34;&gt;&lt;code&gt;ApplicationTest.java&lt;/code&gt;&lt;/a&gt; reflecting the split in philosophy between Gradle and Maven for integration tests. Clearly in a production project, you would have only one of these.&lt;/p&gt; &#xA;&lt;h3&gt;Tips&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For Maven projects, Apache maintains Failsafe and Surefire plugins as a pair, and share the same version numbers. This project uses a shared &lt;code&gt;maven-testing-plugins.version&lt;/code&gt; property&lt;/li&gt; &#xA; &lt;li&gt;Baeldung has &lt;a href=&#34;https://www.baeldung.com/maven-failsafe-plugin&#34;&gt;a good introduction article&lt;/a&gt; on Maven Failsafe&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Going further&lt;/h2&gt; &#xA;&lt;p&gt;Can you do more to improve your build, and shift problems left (before they hit CI or production)? Of course! Below are some topics to discuss with your team about making them part of the local build.&lt;/p&gt; &#xA;&lt;h3&gt;The Test Pyramid&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://martinfowler.com/bliki/TestPyramid.html&#34; title=&#34;TestPyramid&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/images/test-pyramid.png&#34; alt=&#34;The test pyramid&#34; align=&#34;right&#34; width=&#34;20%&#34; height=&#34;auto&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;What is the &#34;Test Pyramid&#34;? This is an important conceptual framework for validating your project at multiple levels of interaction. Canonical resources describing the test pyramid include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://martinfowler.com/bliki/TestPyramid.html&#34;&gt;&lt;em&gt;TestPyramid&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://martinfowler.com/articles/practical-test-pyramid.html&#34;&gt;&lt;em&gt;The Practical Test Pyramid&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As you move your testing &#34;to the left&#34; (helping local builds cover more concerns), you&#39;ll want to enhance your build with more testing at different levels of interaction. These are not covered in this article, so research is needed.&lt;/p&gt; &#xA;&lt;p&gt;There are alternatives to the &#34;test pyramid&#34; perspective. Consider &lt;a href=&#34;https://blog.korny.info/2020/01/20/the-swiss-cheese-model-and-acceptance-tests.html&#34;&gt;swiss cheese&lt;/a&gt; if it makes more sense for your project. The build techniques still apply.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NB&lt;/strong&gt; — What this article calls &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#use-integration-testing&#34;&gt;&#34;integration tests&#34;&lt;/a&gt; may have a different name for your team. You may have &#34;system tests&#34; for example.&lt;/p&gt; &#xA;&lt;h3&gt;Use automated live testing when appropriate&lt;/h3&gt; &#xA;&lt;p&gt;&#34;Live testing&#34; here means spinning up a database or other remote service for local tests, and not using &lt;a href=&#34;http://xunitpatterns.com/Mocks,%20Fakes,%20Stubs%20and%20Dummies.html&#34;&gt;fakes, stubs, mocks, spies, dummies, or doubles&lt;/a&gt;. In these tests, your project calls on &lt;em&gt;real&lt;/em&gt; external dependencies, albeit dependencies spun up locally rather than in production or another environment. These might be call &#34;out of process&#34; tests.&lt;/p&gt; &#xA;&lt;p&gt;This is a complex topic, and this document is no guide on these. Some potentially useful resources to pull into your build:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flywaydb.org/&#34;&gt;Flyway&lt;/a&gt; — Version your schema in production, and version your test data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/localstack/localstack&#34;&gt;LocalStack&lt;/a&gt; — Local testing for AWS services&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.testcontainers.org/&#34;&gt;TestContainers&lt;/a&gt; — Local Docker for real database instances, or any Docker-provided service&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Use contract testing when appropriate&lt;/h3&gt; &#xA;&lt;p&gt;Depending on your program, you may want additional testing specific to circumstances. For example, with REST services and Spring Cloud, consider:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spring.io/guides/gs/contract-rest/&#34;&gt;&lt;em&gt;Consumer Driven Contracts&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are many options in this area. Find the choices which work best for you and your project.&lt;/p&gt; &#xA;&lt;h3&gt;Provide User Journey tests when applicable&lt;/h3&gt; &#xA;&lt;p&gt;Another dimension to consider for local testing: &lt;em&gt;User Journey&lt;/em&gt; tests.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.thoughtworks.com/insights/blog/why-test-user-journey&#34;&gt;&lt;em&gt;Why test the user journey?&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/images/debugging.png&#34; alt=&#34;Debugging in the container&#34; align=&#34;right&#34; width=&#34;20%&#34; height=&#34;auto&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;For direct debugging without a container follow your IDE&#39;s instructions. For debugging within the local Batect container, examples are in the Batect tasks &lt;code&gt;debug-with-gradle&lt;/code&gt; and &lt;code&gt;debug-with-maven&lt;/code&gt;. Update &lt;code&gt;run-with-gradle.sh&lt;/code&gt; or &lt;code&gt;run-with-maven.sh&lt;/code&gt;, or write your own similar script to run your program with the right JVM flags for &lt;em&gt;remote debugging&lt;/em&gt; (the container is a remote process on &#34;localhost&#34; from the perspective of your IDE).&lt;/p&gt; &#xA;&lt;p&gt;These Batect example tasks assume a command-line program that exits when completed. See &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#spring-boot&#34;&gt;the Spring Boot&lt;/a&gt; sample for the same approach with long-running services.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/images/sample.svg?sanitize=true&#34; alt=&#34;Sample&#34; align=&#34;right&#34; width=&#34;20%&#34; height=&#34;auto&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Samples&lt;/h2&gt; &#xA;&lt;p&gt;These samples are external projects, are at varying states of maturity, and are frequently updated (espcially for dependency versions).&lt;/p&gt; &#xA;&lt;h3&gt;Kotlin&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/binkley/kunits&#34;&gt;KUnits&lt;/a&gt; (Maven) is a pleasure project to represent units of measurement in Kotlin&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/binkley/kotlin-rational&#34;&gt;Kotlin Rational&lt;/a&gt; (Maven) explores a math library for rationals (fractions) akin to &lt;code&gt;BigDecimal&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/binkley/kotlin-magic-bus&#34;&gt;Magic Bus&lt;/a&gt; (Gradle) is a library for using messaging patterns within a single application (it talks to itself)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Spring Boot&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/binkley/kotlin-spring-boot-hateoas-database&#34;&gt;Spring Boot HATEOAS Database&lt;/a&gt; (Maven) looks at Spring Boot features for Open API (Swagger), REST APIs, HATEOAS, GraphQL, Prometheus, &lt;em&gt;et al&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Problems&lt;/h2&gt; &#xA;&lt;a href=&#34;https://xkcd.com/303/&#34; title=&#34;Compiling&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/images/compiling.png&#34; alt=&#34;Compiling&#34; align=&#34;right&#34; width=&#34;20%&#34; height=&#34;auto&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;Why is my local build slow?&lt;/h3&gt; &#xA;&lt;p&gt;Both Gradle and Maven have tools to track performance time of steps in your build:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://scans.gradle.com/&#34;&gt;Gradle build scans&lt;/a&gt; — Not limited to Enterprise licenses, just build with &lt;code&gt;./gradlew --scan &amp;lt;tasks&amp;gt;&lt;/code&gt; and follow the link in the output. &lt;a href=&#34;https://cdn.jsdelivr.net/gh/binkley/modern-java-practices/docs/profile-run/gradle-profile.html&#34; title=&#34;A sample Gradle profile for this project&#34; type=&#34;text/html&#34;&gt; See a sample Gradle profile for this project&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jcgay/maven-profiler&#34;&gt;Maven profiler&lt;/a&gt; — run with &lt;code&gt;./mvnw -Dprofile &amp;lt;goals&amp;gt;&lt;/code&gt; and open the local link in the output. This project includes the setup for &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/.mvn/extensions.xml&#34;&gt;Maven extensions&lt;/a&gt;. &lt;a href=&#34;https://cdn.jsdelivr.net/gh/binkley/modern-java-practices/docs/profile-run/maven-profile.html&#34; title=&#34;A sample Maven profile for this project&#34; type=&#34;text/html&#34;&gt; See a sample Maven profile for this project&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;TODO&lt;/strong&gt;: Fix the sample profile links to display as pages, not as raw HTML.&lt;/p&gt; &#xA;&lt;h3&gt;My local build is still too slow&lt;/h3&gt; &#xA;&lt;p&gt;Congratulations! You care, and you notice what is happening for your team.&lt;br&gt; Local build time is &lt;em&gt;important&lt;/em&gt;: gone are the days when a multi-hour, or even 30+ minute build, are viewed in most cases as the &#34;cost of doing business&#34;. And &#34;compiling&#34; is rarely any longer where your project takes most local build time.&lt;/p&gt; &#xA;&lt;p&gt;Use the Gradle or Maven instructions in &lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#keep-your-build-fast&#34;&gt;keep your build fast&lt;/a&gt; to profile your build, and spot where it spends time.&lt;/p&gt; &#xA;&lt;p&gt;If you find your local build is taking too long, consider testing moving these parts to CI with the cost to you of issues arising from delayed feedback:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#keep-your-build-clean&#34;&gt;Jdeps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#shift-security-left&#34;&gt;DependencyCheck&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#use-integration-testing&#34;&gt;Integration tests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binkley/modern-java-practices/master/#use-mutation-testing&#34;&gt;PITest&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;But beware&lt;/em&gt;! Your local build is now drifting away from CI, so you are pushing problems off later in your build pipeline. Not everyone pays close attention to CI failures, that is until something bad happens in production.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;IMPORTANT&lt;/em&gt; — if you disable tools like the above in the &lt;em&gt;local&lt;/em&gt; build, ensure you retain them in your &lt;em&gt;CI&lt;/em&gt; build. Your goal in this case is speed up the feedback cycle locally while retaining the benefits of automated tooling. You are making a bet: problems these tools find come up rarely (but can be catastrophic when they do), so time saved locally repays time lost waiting for CI to find these problems.&lt;/p&gt; &#xA;&lt;p&gt;In the Gradle and Maven samples in this repository, &lt;em&gt;DependencyCheck&lt;/em&gt; and &lt;em&gt;Mutation testing&lt;/em&gt; are typically the slowest steps in a local build; &lt;em&gt;Integration tests&lt;/em&gt; are fast only because this project has very few (1), and are samples only. &lt;a href=&#34;http://www.catb.org/jargon/html/Y/Your-mileage-may-vary.html&#34;&gt;YMMV&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Every project is different; your team and stakeholders need to judge the value of quicker feedback to programmers of these concerns, and quicker feedback from a faster local build. There is no &#34;one size fits all&#34; recommendation.&lt;/p&gt; &#xA;&lt;h3&gt;It fails in CI, but passes locally&lt;/h3&gt; &#xA;&lt;p&gt;As much as you would like local builds to be identical to CI, this can still happen for reasons of environment. Examples can include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Credentials needed in CI have changed: Update your CI configuration&lt;/li&gt; &#xA; &lt;li&gt;Network routing has changed, and CI is in a different subnet from local: Talk with your Infrastructure team&lt;/li&gt; &#xA; &lt;li&gt;CI includes steps to push successful builds further down the line to other environments, and something there went wrong: Talk with your Infrastructure team&lt;/li&gt; &#xA; &lt;li&gt;Dependencies break in CI: If CI uses an internal dependency repository, check in with the maintainers of the repository&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Many thanks to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LemmingAvalanche&#34;&gt;Kristoffer Haugsbakk&lt;/a&gt; — &lt;em&gt;Proofreading&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Bukharovsi&#34;&gt;Sergei Bukharov&lt;/a&gt; — &lt;em&gt;PMD enhancements&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All suggestions and ideas welcome! Please &lt;a href=&#34;https://github.com/binkley/modern-java-practices/issues&#34;&gt;file an issue&lt;/a&gt;. ☺&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MegaManSec/SSH-Snake</title>
    <updated>2024-01-08T01:42:38Z</updated>
    <id>tag:github.com,2024-01-08:/MegaManSec/SSH-Snake</id>
    <link href="https://github.com/MegaManSec/SSH-Snake" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SSH-Snake is a self-propagating, self-replicating, file-less script that automates the post-exploitation task of SSH private key and host discovery.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SSH-Snake: Automated SSH-Based Network Traversal&lt;/h1&gt; &#xA;&lt;p&gt;SSH-Snake is a powerful tool designed to perform automatic network traversal using SSH private keys discovered on systems, with the objective of creating a comprehensive map of a network and its dependencies, identifying to what extent a network can be compromised using SSH and SSH private keys starting from a particular system.&lt;/p&gt; &#xA;&lt;p&gt;SSH-Snake can automatically reveal the relationship between systems which are connected via SSH, which would normally take a tremendous amount of time and effort to perform manually.&lt;/p&gt; &#xA;&lt;p&gt;In other words, SSH-Snake performs the following tasks automatically and recursively:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;On the current system, find any SSH private keys,&lt;/li&gt; &#xA; &lt;li&gt;On the current system, find any hosts or destinations (&lt;code&gt;user@host&lt;/code&gt;) that the private keys may be accepted,&lt;/li&gt; &#xA; &lt;li&gt;Attempt to SSH into all of the destinations using all of the private keys discovered,&lt;/li&gt; &#xA; &lt;li&gt;If a destination is successfully connected to, repeats steps #1 - #4 on the connected-to system.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;It&#39;s completely self-replicating and self-propagating -- and completely fileless. In many ways, SSH-Snake is actually a &lt;a href=&#34;https://en.wikipedia.org/wiki/Computer_worm&#34;&gt;worm&lt;/a&gt;: It replicates itself and spreads itself from one system to another as far as it can.&lt;/p&gt; &#xA;&lt;p&gt;Instead of manually jumping between systems with SSH keys like it&#39;s a Super Mario game, let SSH-Snake do the work for you.&lt;/p&gt; &#xA;&lt;p&gt;Although this tool is intended for hacking purposes, sysadmins can also use it to better understand their infrastructure and network. If you want to disable the printing of private keys discovered, &lt;a href=&#34;https://github.com/MegaManSec/SSH-Snake/raw/7ae7ef0afe0e067a1b96f69e508df52831a08b8b/Snake.sh#L964&#34;&gt;comment out this line of code&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;An in-depth look at how this script actually works, technical details, interesting discoveries, design decisions, benchmarking, and lessons learnt, check out &lt;a href=&#34;https://joshua.hu/ssh-snake-ssh-network-traversal-discover-ssh-private-keys-network-graph&#34;&gt;this blog post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Screenshots&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MegaManSec/SSH-Snake/main/tools/SSH-Snake-Screenshot.png&#34; alt=&#34;&#34;&gt;A reduced screenshot from the output of SSH-Snake in a very small network.&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MegaManSec/SSH-Snake/main/tools/SSH-Snake-CytoScape.svg?sanitize=true&#34; alt=&#34;A graph visualizing the relation between systems using SSH&#34;&gt;The blue nodes indicate the &lt;em&gt;destination&lt;/em&gt; can connect to itself (user@host&amp;lt;--&amp;gt;user@host). The red edges indicate that the connection is bi-directional (user1@host1&amp;lt;--&amp;gt;user2@host2).&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MegaManSec/SSH-Snake/main/tools/SSH-Snake-Gephi.svg?sanitize=true&#34; alt=&#34;A graph visualizing the relation between systems using SSH&#34;&gt;The green nodes indicate a &lt;em&gt;host&lt;/em&gt; (without a username) that can connect to itself (host1&amp;lt;--&amp;gt;host1). The green edges indicate that the connection is bi-directional (host1&amp;lt;--&amp;gt;host2). The gray host in the top right corner is the host that the script was initially executed on.&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MegaManSec/SSH-Snake/main/tools/SSH-Snake-dot-circo.png&#34; alt=&#34;A graph visualizing the relation between systems using SSH&#34;&gt;The blue nodes indicate the &lt;em&gt;destination&lt;/em&gt; can connect to itself (user@host&amp;lt;--&amp;gt;user@host). The red edges indicate that the connection is bi-directional (user1@host1&amp;lt;--&amp;gt;user2@host2).&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Using and Running SSH-Snake&lt;/h1&gt; &#xA;&lt;p&gt;SSH-Snake can either be downloaded or piped into bash:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://raw.githubusercontent.com/MegaManSec/SSH-Snake/main/Snake.nocomments.sh&#xA;stdbuf -o0 bash ./Snake.nocomments.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl https://raw.githubusercontent.com/MegaManSec/SSH-Snake/main/Snake.nocomments.sh | stdbuf -o0 bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;About SSH-Snake&lt;/h1&gt; &#xA;&lt;p&gt;SSH-Snake seamlessly emulates what a human adversary would do to discover SSH private keys and destinations where they can be used to connect to. Written entirely in Bash, it operates with a minimal set of dependencies commonly available on major Linux systems: &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;ssh&lt;/code&gt;, &lt;code&gt;getconf&lt;/code&gt;, &lt;code&gt;coreutils&lt;/code&gt;, &lt;code&gt;getent&lt;/code&gt;, &lt;code&gt;awk&lt;/code&gt;, &lt;code&gt;sort&lt;/code&gt;, &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;tr&lt;/code&gt;, &lt;code&gt;find&lt;/code&gt;, and &lt;code&gt;cat&lt;/code&gt;. Likewise, &lt;code&gt;sudo&lt;/code&gt;, &lt;code&gt;hostname&lt;/code&gt;, &lt;code&gt;ip&lt;/code&gt;, and &lt;code&gt;xargs&lt;/code&gt; may also be used, but they are not required (and the script gracefully handles cases where they are not present). If a system is discovered without any of the required packages, it gracefully fails, alerting the user that the scan could not continue on that particular system (and backtracks, continuing from the previous system.)&lt;/p&gt; &#xA;&lt;p&gt;SSH-Snake is completely fileless: after the user runs the script, it is passed to destinations&#39; bash via stdin and bash arguments (via SSH). No material evidence of the script exists on any of the systems scanned: the only evidence of the script running is in the process tree, and the substantial amount of invalid SSH attempts which will inevitably occur.&lt;/p&gt; &#xA;&lt;p&gt;SSH-Snake takes a &lt;a href=&#34;https://en.wikipedia.org/wiki/Depth-first_search&#34;&gt;depth-first approach&lt;/a&gt; to discovery: once it connects to one system, it tries to connect further from that system before backtracking.&lt;/p&gt; &#xA;&lt;p&gt;The name SSH-Snake comes from the fact that the output of the script looks like a snake slithering up and down the network. However unlike the game Snake, SSH-Snake will not die when it bites its own tail (connects to a systems it has already scanned or is currently scanning): it will simply print how it connected there as normal, but return and not re-scan the destination (in order to avoid infinite recursion).&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Recursively SSH from one system to another using local SSH private keys,&lt;/li&gt; &#xA; &lt;li&gt;Fileless traversal and propogation/replication of the SSH-Snake script using only stdin and bash arguments to remote systems,&lt;/li&gt; &#xA; &lt;li&gt;Automatic elevation of privileges to root using sudo if possible,&lt;/li&gt; &#xA; &lt;li&gt;Discover SSH private key files from &lt;code&gt;.bash_history&lt;/code&gt; entries,&lt;/li&gt; &#xA; &lt;li&gt;Discover SSH private keys from commonly used files and folders,&lt;/li&gt; &#xA; &lt;li&gt;Exfiltration SSH private keys as output of the script,&lt;/li&gt; &#xA; &lt;li&gt;Configurable custom command execution on each system,&lt;/li&gt; &#xA; &lt;li&gt;Plug-and-play modular system to discover private keys and systems,&lt;/li&gt; &#xA; &lt;li&gt;Detect hosts from IP ranges, last logins, known hosts, SSH config files, and more,&lt;/li&gt; &#xA; &lt;li&gt;Ability to detect when a system has already been scanned or is in the process of being scanned such that a network like A-&amp;gt;B-&amp;gt;C is able to also discover C-&amp;gt;A but does not regress to A-&amp;gt;B-&amp;gt;C-A-&amp;gt;B-&amp;gt;C-&amp;gt;A-&amp;gt;B-&amp;gt;....,&lt;/li&gt; &#xA; &lt;li&gt;Ability to generate graphical visulizations of a network from the output of the script,&lt;/li&gt; &#xA; &lt;li&gt;... and more.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Settings&lt;/h1&gt; &#xA;&lt;p&gt;SSH-Snake comes with some general settings that can be configured. These settings are documented in &lt;a href=&#34;https://raw.githubusercontent.com/MegaManSec/SSH-Snake/main/SETTINGS.md#general-settings&#34;&gt;SETTINGS.md#general-settings&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;SSH-Snake also comes with a variety configurable/plug-and-play strategies (functions) which can be used to discover SSH private keys on a system and discover hosts and destinations to attempt to connect to. Sane defaults have been provided, however if you want to perform a scan as thoroughly as possible, then enabling more discovery techniques can help. If a scan is taking a long time, disabling some discovery techniques can help. With the exception of one strategy (&lt;code&gt;find_ssh_keys&lt;/code&gt;), each of the strategies can be toggled off/on. These are documented in &lt;a href=&#34;https://raw.githubusercontent.com/MegaManSec/SSH-Snake/main/SETTINGS.md#configurable-discovery-strategies&#34;&gt;SETTINGS.md#configurable-discovery-strategies&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Understanding Output&lt;/h1&gt; &#xA;&lt;p&gt;The raw output of SSH-Snake contains a mix of infomation about discovered private keys, destinations, and error messages.&lt;/p&gt; &#xA;&lt;p&gt;A detailed explanation on the full output of SSH-Snake can be found in &lt;a href=&#34;https://raw.githubusercontent.com/MegaManSec/SSH-Snake/main/OUTPUT.md&#34;&gt;OUTPUT.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Visualizing System Relationships&lt;/h1&gt; &#xA;&lt;p&gt;The output of SSH-Snake can be used to create graphs/visualizations of the network that the script traverses.&lt;/p&gt; &#xA;&lt;p&gt;A detailed explanation on how to create and interpret images/visualizations from the output of SSH-Snake can be found in &lt;a href=&#34;https://raw.githubusercontent.com/MegaManSec/SSH-Snake/main/GRAPHICS.md&#34;&gt;GRAPHICS.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Other Tools&lt;/h1&gt; &#xA;&lt;p&gt;In addition to the ability to create visualizations of the network that SSH-Snake traverses, three other tools are provided. Namely:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;forward-lookup-host.py&lt;/code&gt;: Given a source host or destination, determine all of the systems that can be accessed either directly or indirectly (i.e. through a tertiary system).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;reverse-lookup-host.py&lt;/code&gt;: Given a destination host or destination, determine all of the systems that can either directly or indirectly access it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;shortest-path-create-chain.py&lt;/code&gt;: Given host or destination A and B, determine the shortest path connecting the two.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The third tool also generates a command that can be used to connect from destination A to destination B. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ python3 tools/shortest-path-create-chain.py --file output.log --src &#39;jrogers@10.2.3.4&#39; --dest &#39;root@10.25.49.1&#39;&#xA;&#xA;Shortest path from jrogers@10.2.3.4 to root@10.25.49.1: jrogers@10.2.3.4-&amp;gt;user@10.44.39.21-&amp;gt;user@10.19.29.54-&amp;gt;root@10.25.49.1&#xA;&#xA;[..]&#xA;&#xA;ssh -i &#34;/home/jrogers/.ssh/key&#34; user@10.44.39.21 &#39;sudo ssh -i &#34;/root/.ssh/id_rsa&#34; user@10.19.29.54 &#39;ssh -i &#34;/tmp/key&#34; root@10.25.49.1&#39;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Snake.sh vs Snake.nocomments.sh&lt;/h1&gt; &#xA;&lt;p&gt;Since the script is quite large, loading the script into a here-document (which it does automatically because the script it actually &lt;a href=&#34;https://en.wikipedia.org/wiki/Quine_(computing)&#34;&gt;a Quine&lt;/a&gt;) &lt;a href=&#34;https://joshua.hu/more-fun-with-bash-ssh-and-ssh-keygen-version-differences&#34;&gt;causes bash to write to a temporary file&lt;/a&gt; (as it is greater than 65535-bytes).&lt;/p&gt; &#xA;&lt;p&gt;To cut down on the size such that it remains 100% fileless, Snake.nocomments.sh has a version with all comments, unnecessary white-spaces, and blank lines removed. This cuts the file&#39;s size down such that the temporary file is not created by bash.&lt;/p&gt; &#xA;&lt;h1&gt;Bugs / Issues&lt;/h1&gt; &#xA;&lt;p&gt;If you encounter any bugs or issues related to the script, please report them as a GitHub issue. Please include your configuration setings.&lt;/p&gt; &#xA;&lt;p&gt;I am particually interested in any interesting &lt;code&gt;[line]&lt;/code&gt; outputs associated with errors that haven&#39;t been caught by the script.&lt;/p&gt; &#xA;&lt;h1&gt;Limitations&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;IPv4 Only: Like all of the best programs, the script does not support IPv6. I can&#39;t imagine there will be support for this anytime soon.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Port 22 Only: There is a general assumption that SSH is running on port 22.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;GNU coreutils: The script relies heavily on GNU coreutils. I have not determined how much (if any) GNU-ism is used in the script.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;find ... -readable ...&lt;/code&gt; is used in the script in multiple places. The &lt;code&gt;-readable&lt;/code&gt; flag is not supported on all versions of &lt;code&gt;find(1)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The script does not currently look for SSH agent sockets.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>