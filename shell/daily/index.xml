<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-01T01:41:37Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tianon/gosu</title>
    <updated>2023-09-01T01:41:37Z</updated>
    <id>tag:github.com,2023-09-01:/tianon/gosu</id>
    <link href="https://github.com/tianon/gosu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple Go-based setuid+setgid+setgroups+exec&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gosu&lt;/h1&gt; &#xA;&lt;p&gt;This is a simple tool grown out of the simple fact that &lt;code&gt;su&lt;/code&gt; and &lt;code&gt;sudo&lt;/code&gt; have very strange and often annoying TTY and signal-forwarding behavior. They&#39;re also somewhat complex to setup and use (especially in the case of &lt;code&gt;sudo&lt;/code&gt;), which allows for a great deal of expressivity, but falls flat if all you need is &#34;run this specific application as this specific user and get out of the pipeline&#34;.&lt;/p&gt; &#xA;&lt;p&gt;The core of how &lt;code&gt;gosu&lt;/code&gt; works is stolen directly from how Docker/libcontainer itself starts an application inside a container (and in fact, is using the &lt;code&gt;/etc/passwd&lt;/code&gt; processing code directly from libcontainer&#39;s codebase).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ gosu&#xA;Usage: ./gosu user-spec command [args]&#xA;   eg: ./gosu tianon bash&#xA;       ./gosu nobody:root bash -c &#39;whoami &amp;amp;&amp;amp; id&#39;&#xA;       ./gosu 1000:1 id&#xA;&#xA;./gosu version: 1.1 (go1.3.1 on linux/amd64; gc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the user/group is processed, we switch to that user, then we &lt;code&gt;exec&lt;/code&gt; the specified process and &lt;code&gt;gosu&lt;/code&gt; itself is no longer resident or involved in the process lifecycle at all. This avoids all the issues of signal passing and TTY, and punts them to the process invoking &lt;code&gt;gosu&lt;/code&gt; and the process being invoked by &lt;code&gt;gosu&lt;/code&gt;, where they belong.&lt;/p&gt; &#xA;&lt;h2&gt;Warning&lt;/h2&gt; &#xA;&lt;p&gt;The core use case for &lt;code&gt;gosu&lt;/code&gt; is to step &lt;em&gt;down&lt;/em&gt; from &lt;code&gt;root&lt;/code&gt; to a non-privileged user during container startup (specifically in the &lt;code&gt;ENTRYPOINT&lt;/code&gt;, usually).&lt;/p&gt; &#xA;&lt;p&gt;Uses of &lt;code&gt;gosu&lt;/code&gt; beyond that could very well suffer from vulnerabilities such as CVE-2016-2779 (from which the Docker use case naturally shields us); see &lt;a href=&#34;https://github.com/tianon/gosu/issues/37&#34;&gt;&lt;code&gt;tianon/gosu#37&lt;/code&gt;&lt;/a&gt; for some discussion around this point.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;High-level steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;download &lt;code&gt;gosu-$(dpkg --print-architecture | awk -F- &#39;{ print $NF }&#39;)&lt;/code&gt; as &lt;code&gt;gosu&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;download &lt;code&gt;gosu-$(dpkg --print-architecture | awk -F- &#39;{ print $NF }&#39;).asc&lt;/code&gt; as &lt;code&gt;gosu.asc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;fetch my public key (to verify your download): &lt;code&gt;gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gpg --batch --verify gosu.asc gosu&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;chmod +x gosu&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For explicit &lt;code&gt;Dockerfile&lt;/code&gt; instructions, see &lt;a href=&#34;https://raw.githubusercontent.com/tianon/gosu/master/INSTALL.md&#34;&gt;&lt;code&gt;INSTALL.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ docker run -it --rm ubuntu:trusty su -c &#39;exec ps aux&#39;&#xA;USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND&#xA;root         1  0.0  0.0  46636  2688 ?        Ss+  02:22   0:00 su -c exec ps a&#xA;root         6  0.0  0.0  15576  2220 ?        Rs   02:22   0:00 ps aux&#xA;$ docker run -it --rm ubuntu:trusty sudo ps aux&#xA;USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND&#xA;root         1  3.0  0.0  46020  3144 ?        Ss+  02:22   0:00 sudo ps aux&#xA;root         7  0.0  0.0  15576  2172 ?        R+   02:22   0:00 ps aux&#xA;$ docker run -it --rm -v $PWD/gosu-amd64:/usr/local/bin/gosu:ro ubuntu:trusty gosu root ps aux&#xA;USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND&#xA;root         1  0.0  0.0   7140   768 ?        Rs+  02:22   0:00 ps aux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, due to the fact that &lt;code&gt;gosu&lt;/code&gt; is using Docker&#39;s own code for processing these &lt;code&gt;user:group&lt;/code&gt;, it has exact 1:1 parity with Docker&#39;s own &lt;code&gt;--user&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re curious about the edge cases that &lt;code&gt;gosu&lt;/code&gt; handles, see &lt;a href=&#34;https://raw.githubusercontent.com/tianon/gosu/master/Dockerfile.test&#34;&gt;&lt;code&gt;Dockerfile.test&lt;/code&gt;&lt;/a&gt; for the &#34;test suite&#34; (and the associated &lt;a href=&#34;https://raw.githubusercontent.com/tianon/gosu/master/test.sh&#34;&gt;&lt;code&gt;test.sh&lt;/code&gt;&lt;/a&gt; script that wraps this up for testing arbitrary binaries).&lt;/p&gt; &#xA;&lt;p&gt;(Note that &lt;code&gt;sudo&lt;/code&gt; has different goals from this project, and it is &lt;em&gt;not&lt;/em&gt; intended to be a &lt;code&gt;sudo&lt;/code&gt; replacement; for example, see &lt;a href=&#34;https://stackoverflow.com/a/48105623&#34;&gt;this Stack Overflow answer&lt;/a&gt; for a short explanation of why &lt;code&gt;sudo&lt;/code&gt; does &lt;code&gt;fork&lt;/code&gt;+&lt;code&gt;exec&lt;/code&gt; instead of just &lt;code&gt;exec&lt;/code&gt;.)&lt;/p&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;su-exec&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;As mentioned in &lt;code&gt;INSTALL.md&lt;/code&gt;, &lt;a href=&#34;https://github.com/ncopa/su-exec&#34;&gt;&lt;code&gt;su-exec&lt;/code&gt;&lt;/a&gt; is a very minimal re-write of &lt;code&gt;gosu&lt;/code&gt; in C, making for a much smaller binary, and is available in the &lt;code&gt;main&lt;/code&gt; Alpine package repository.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;chroot&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;With the &lt;code&gt;--userspec&lt;/code&gt; flag, &lt;code&gt;chroot&lt;/code&gt; can provide similar benefits/behavior:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ docker run -it --rm ubuntu:trusty chroot --userspec=nobody / ps aux&#xA;USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND&#xA;nobody       1  5.0  0.0   7136   756 ?        Rs+  17:04   0:00 ps aux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;setpriv&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Available in newer &lt;code&gt;util-linux&lt;/code&gt; (&lt;code&gt;&amp;gt;= 2.32.1-0.2&lt;/code&gt;, in Debian; &lt;a href=&#34;https://manpages.debian.org/buster/util-linux/setpriv.1.en.html&#34;&gt;https://manpages.debian.org/buster/util-linux/setpriv.1.en.html&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ docker run -it --rm buildpack-deps:buster-scm setpriv --reuid=nobody --regid=nogroup --init-groups ps faux&#xA;USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND&#xA;nobody       1  5.0  0.0   9592  1252 pts/0    RNs+ 23:21   0:00 ps faux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Others&lt;/h3&gt; &#xA;&lt;p&gt;I&#39;m not terribly familiar with them, but a few other alternatives I&#39;m aware of include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;chpst&lt;/code&gt; (part of &lt;code&gt;runit&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>