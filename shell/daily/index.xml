<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-13T01:38:26Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>devcontainers/features</title>
    <updated>2022-10-13T01:38:26Z</updated>
    <id>tag:github.com,2022-10-13:/devcontainers/features</id>
    <link href="https://github.com/devcontainers/features" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of development container &#39;features&#39;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Development Container Features&lt;/h1&gt; &#xA;&lt;table style=&#34;width: 100%; border-style: none;&#34;&gt;&#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td style=&#34;width: 140px; text-align: center;&#34;&gt;&lt;a href=&#34;https://github.com/devcontainers&#34;&gt;&lt;img width=&#34;128px&#34; src=&#34;https://raw.githubusercontent.com/microsoft/fluentui-system-icons/78c9587b995299d5bfc007a0077773556ecb0994/assets/Cube/SVG/ic_fluent_cube_32_filled.svg?sanitize=true&#34; alt=&#34;devcontainers organization logo&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt; &lt;strong&gt;Development Container &#39;Features&#39;&lt;/strong&gt;&lt;br&gt; &lt;i&gt;A set of simple and reusable &#39;features&#39;. Quickly add a language/tool/CLI to a development container. &lt;/i&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;&#39;Features&#39; are self-contained units of installation code and development container configuration. Features are designed to install atop a wide-range of base container images (&lt;strong&gt;this repo focuses on &lt;code&gt;debian&lt;/code&gt; based images&lt;/strong&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Missing a CLI or language in your otherwise &lt;em&gt;perfect&lt;/em&gt; container image? Add the relevant &#39;feature&#39; to the &lt;code&gt;features&lt;/code&gt; property of a &lt;a href=&#34;https://containers.dev/implementors/json_reference/#general-properties&#34;&gt;&lt;code&gt;devcontainer.json&lt;/code&gt;&lt;/a&gt;. A &lt;a href=&#34;https://containers.dev/supporting&#34;&gt;tool supporting the dev container specification&lt;/a&gt; is required to build a development container.&lt;/p&gt; &#xA;&lt;p&gt;⚠️ Development container &#39;features&#39; are a &lt;a href=&#34;https://github.com/devcontainers/spec/raw/main/proposals/devcontainer-features.md&#34;&gt;&lt;strong&gt;proposed&lt;/strong&gt;&lt;/a&gt; addition to the &lt;a href=&#34;https://containers.dev/implementors/spec/&#34;&gt;development container specification&lt;/a&gt;. &lt;strong&gt;Please note that &#39;features&#39; are in preview and subject to breaking changes&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once the &lt;a href=&#34;https://github.com/devcontainers/spec/raw/main/proposals/devcontainer-features.md&#34;&gt;&lt;strong&gt;proposed&lt;/strong&gt;&lt;/a&gt; specification is accepted, implementation details will be published at &lt;a href=&#34;https://containers.dev/&#34;&gt;https://containers.dev&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To reference a feature from this repository, add the desired features to a &lt;code&gt;devcontainer.json&lt;/code&gt;. Each feature has a &lt;code&gt;README.md&lt;/code&gt; that shows how to reference the feature and which options are available for that feature.&lt;/p&gt; &#xA;&lt;p&gt;The example below installs the &lt;code&gt;go&lt;/code&gt; and &lt;code&gt;docker-in-docker&lt;/code&gt; declared in the &lt;a href=&#34;https://raw.githubusercontent.com/devcontainers/features/main/src&#34;&gt;&lt;code&gt;./src&lt;/code&gt;&lt;/a&gt; directory of this repository.&lt;/p&gt; &#xA;&lt;p&gt;See the relevant feature&#39;s README for supported options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsonc&#34;&gt;&#34;name&#34;: &#34;my-project-devcontainer&#34;,&#xA;&#34;image&#34;: &#34;mcr.microsoft.com/devcontainers/base:ubuntu&#34;,  // Any generic, debian-based image.&#xA;&#34;features&#34;: {&#xA;    &#34;ghcr.io/devcontainers/features/go:1&#34;: {&#xA;        &#34;version&#34;: &#34;1.18&#34;&#xA;    },&#xA;    &#34;ghcr.io/devcontainers/features/docker-in-docker:1&#34;: {&#xA;        &#34;version&#34;: &#34;latest&#34;,&#xA;        &#34;moby&#34;: true&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;:latest&lt;/code&gt; version annotation is added implicitly if omitted. To pin to a specific package version (&lt;a href=&#34;https://github.com/devcontainers/features/pkgs/container/features/go/versions&#34;&gt;example&lt;/a&gt;), append it to the end of the feature. Features follow semantic versioning conventions, so you can pin to a major version &lt;code&gt;:1&lt;/code&gt;, minor version &lt;code&gt;:1.0&lt;/code&gt;, or patch version &lt;code&gt;:1.0.0&lt;/code&gt; by specifying the appropriate label.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsonc&#34;&gt;&#34;features&#34;: {&#xA;    &#34;ghcr.io/devcontainers/features/go:1.0.0&#34;: {&#xA;        &#34;version&#34;: &#34;1.18&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/devcontainers/cli&#34;&gt;devcontainer CLI reference implementation&lt;/a&gt; (or a &lt;a href=&#34;https://containers.dev/supporting&#34;&gt;supporting tool&lt;/a&gt;) can be used to build a project&#39;s dev container declaring &#39;features&#39;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone &amp;lt;my-project-with-devcontainer&amp;gt;&#xA;devcontainer build --workspace-folder &amp;lt;path-to-my-project-with-devcontainer&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Repo Structure&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;.&#xA;├── README.md&#xA;├── src&#xA;│   ├── dotnet&#xA;│   │   ├── devcontainer-feature.json&#xA;│   │   └── install.sh&#xA;│   ├── go&#xA;│   │   ├── devcontainer-feature.json&#xA;│   │   └── install.sh&#xA;|   ├── ...&#xA;│   │   ├── devcontainer-feature.json&#xA;│   │   └── install.sh&#xA;├── test&#xA;│   ├── dotnet&#xA;│   │   └── test.sh&#xA;│   ├── go&#xA;|   |   ├── scenarios.json&#xA;|   |   ├── test_scenario_1.json&#xA;│   |   └── test.sh&#xA;|   ├── ...&#xA;│   │   └── test.sh&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/devcontainers/features/main/src&#34;&gt;&lt;code&gt;src&lt;/code&gt;&lt;/a&gt; - A collection of subfolders, each declaring a feature. Each subfolder contains at least a &lt;code&gt;devcontainer-feature.json&lt;/code&gt; and an &lt;code&gt;install.sh&lt;/code&gt; script.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/devcontainers/features/main/test&#34;&gt;&lt;code&gt;test&lt;/code&gt;&lt;/a&gt; - Mirroring &lt;code&gt;src&lt;/code&gt;, a folder-per-feature with at least a &lt;code&gt;test.sh&lt;/code&gt; script. The &lt;a href=&#34;https://github.com/devcontainers/cli&#34;&gt;&lt;code&gt;devcontainer&lt;/code&gt; CLI&lt;/a&gt; will execute &lt;a href=&#34;https://github.com/devcontainers/features/raw/main/.github/workflows/test-all.yaml&#34;&gt;these tests in CI&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;h3&gt;Creating your own collection of features&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/devcontainers/spec/raw/main/proposals/devcontainer-features-distribution.md&#34;&gt;feature distribution specification&lt;/a&gt; outlines a pattern for community members and organizations to self-author features in repositories they control.&lt;/p&gt; &#xA;&lt;p&gt;A template repo &lt;a href=&#34;https://github.com/devcontainers/feature-template&#34;&gt;&lt;code&gt;devcontainers/feature-template&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/devcontainers/action&#34;&gt;GitHub Action&lt;/a&gt; are available to help bootstrap self-authored features.&lt;/p&gt; &#xA;&lt;p&gt;We are eager to hear your feedback on self-authoring! Please provide comments and feedback on &lt;a href=&#34;https://github.com/devcontainers/spec/issues/70&#34;&gt;spec issue #70&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing to this repository&lt;/h3&gt; &#xA;&lt;p&gt;This repository will accept improvement and bug fix contributions related to the &lt;a href=&#34;https://raw.githubusercontent.com/devcontainers/features/main/src&#34;&gt;current set of maintained features&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jeffbencteux/mailsecchk</title>
    <updated>2022-10-13T01:38:26Z</updated>
    <id>tag:github.com,2022-10-13:/jeffbencteux/mailsecchk</id>
    <link href="https://github.com/jeffbencteux/mailsecchk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;POSIX script for mail security checks of domain names&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mailsecchk&lt;/h1&gt; &#xA;&lt;p&gt;A simple shell script (almost) POSIX(1) for mail security checks against domain names.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: ./mailsecchk.sh [OPTIONS]...&#xA;check mail security of a given domain&#xA;&#xA;arguments:&#xA;  -d domain to be checked&#xA;  -h display this help and exit&#xA;  -l log file to output to&#xA;  -p extract DKIM public key if found&#xA;  -r SPF recursive tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(1): not POSIX anymore as keyword &#34;local&#34; is used, but it should work on most UNIX.&lt;/p&gt; &#xA;&lt;h2&gt;Current checks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SPF DNS record presence&lt;/li&gt; &#xA; &lt;li&gt;SPF not using FAIL mode &#34;-all&#34;&lt;/li&gt; &#xA; &lt;li&gt;SPF include not resolving to a correct DNS TXT record (potential domain takeover)&lt;/li&gt; &#xA; &lt;li&gt;DMARC DNS record presence&lt;/li&gt; &#xA; &lt;li&gt;DMARC policy (&#34;p&#34;)&lt;/li&gt; &#xA; &lt;li&gt;DMARC subpolicy (&#34;sp&#34;)&lt;/li&gt; &#xA; &lt;li&gt;DMARC sample percentage (&#34;pct&#34;)&lt;/li&gt; &#xA; &lt;li&gt;DMARC aggregation and forensic reports send to third-parties (&#34;rua&#34; and &#34;ruf&#34;)&lt;/li&gt; &#xA; &lt;li&gt;DKIM dictionnary guess for selectors (list is in dkim_selectors.txt)&lt;/li&gt; &#xA; &lt;li&gt;DKIM public key size (if public key extraction is enabled)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Checks for specific mail providers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SPF set to include mail provider SPF&lt;/li&gt; &#xA; &lt;li&gt;DKIM presence (selectors are often predictable)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Currently included providers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Microsoft 365&lt;/li&gt; &#xA; &lt;li&gt;Google workspace&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Other features&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DKIM public key extraction if selector is found&lt;/li&gt; &#xA; &lt;li&gt;Recursive checks on SPF includes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: if recursion on SPF includes is not enabled, you may end up with false positives on wether a mail provider SPF is included for a domain or not.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jeffbencteux/mailsecchk/main/img/altf8.png&#34; alt=&#34;example 1&#34; title=&#34;Example 1&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jeffbencteux/mailsecchk/main/img/lemonde.png&#34; alt=&#34;example 2&#34; title=&#34;Example 2&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>OpenVPN/easy-rsa</title>
    <updated>2022-10-13T01:38:26Z</updated>
    <id>tag:github.com,2022-10-13:/OpenVPN/easy-rsa</id>
    <link href="https://github.com/OpenVPN/easy-rsa" rel="alternate"></link>
    <summary type="html">&lt;p&gt;easy-rsa - Simple shell based CA utility&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/Openvpn/easy-rsa/actions/workflows/action.yml&#34;&gt;&lt;img src=&#34;https://github.com/Openvpn/easy-rsa/actions/workflows/action.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;easy-rsa is a CLI utility to build and manage a PKI CA. In laymen&#39;s terms, this means to create a root certificate authority, and request and sign certificates, including intermediate CAs and certificate revocation lists (CRL).&lt;/p&gt; &#xA;&lt;h1&gt;Downloads&lt;/h1&gt; &#xA;&lt;p&gt;If you are looking for release downloads, please see the releases section on GitHub. Releases are also available as source checkouts using named tags.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;For 3.x project documentation and usage, see the &lt;a href=&#34;https://raw.githubusercontent.com/OpenVPN/easy-rsa/master/README.quickstart.md&#34;&gt;README.quickstart.md&lt;/a&gt; file or the more detailed docs under the doc/ directory. The .md files are in Markdown format and can be converted to html files as desired for release packages, or read as-is in plaintext.&lt;/p&gt; &#xA;&lt;h1&gt;Getting help using easy-rsa&lt;/h1&gt; &#xA;&lt;p&gt;Currently, Easy-RSA development co-exists with OpenVPN even though they are separate projects. The following resources are good places as of this writing to seek help using Easy-RSA:&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://lists.sourceforge.net/lists/listinfo/openvpn-users&#34;&gt;openvpn-users mailing list&lt;/a&gt; is a good place to post usage or help questions.&lt;/p&gt; &#xA;&lt;p&gt;You can also try libera.chat IRC network, in channels #openvpn for general support or #easyrsa for development discussion.&lt;/p&gt; &#xA;&lt;h1&gt;Branch structure&lt;/h1&gt; &#xA;&lt;p&gt;The easy-rsa master branch is currently tracking development for the 3.x release cycle. Please note that, at any given time, master may be broken. Feel free to create issues against master, but have patience when using the master branch. It is recommended to use a release, and priority will be given to bugs identified in the most recent release.&lt;/p&gt; &#xA;&lt;p&gt;The prior 2.x and 1.x versions are available as release branches for tracking and possible back-porting of relevant fixes. Branch layout is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;master         &amp;lt;- 3.1, at present&#xA;v3.x.x            pre-release branches, used for staging branches&#xA;release/3.0       v3.0.x bugfix/security/openssl updates&#xA;release/2.x&#xA;release/1.x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;LICENSING info for 3.x is in the &lt;a href=&#34;https://raw.githubusercontent.com/OpenVPN/easy-rsa/master/COPYING.md&#34;&gt;COPYING.md&lt;/a&gt; file&lt;/p&gt; &#xA;&lt;h1&gt;Code style, standards&lt;/h1&gt; &#xA;&lt;p&gt;We are attempting to adhere to the POSIX standard, which can be found here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pubs.opengroup.org/onlinepubs/9699919799/&#34;&gt;https://pubs.opengroup.org/onlinepubs/9699919799/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>