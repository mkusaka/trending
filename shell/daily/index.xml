<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-04T01:34:38Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>YosysHQ/oss-cad-suite-build</title>
    <updated>2024-10-04T01:34:38Z</updated>
    <id>tag:github.com,2024-10-04:/YosysHQ/oss-cad-suite-build</id>
    <link href="https://github.com/YosysHQ/oss-cad-suite-build" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Multi-platform nightly builds of open source digital design and verification tools&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OSS CAD Suite&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/YosysHQ/oss-cad-suite-build/releases/latest&#34;&gt;&lt;img src=&#34;https://github.com/YosysHQ/oss-cad-suite-build/actions/workflows/linux-x64.yml/badge.svg?sanitize=true&#34; alt=&#34;linux-x64&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/YosysHQ/oss-cad-suite-build/releases/latest&#34;&gt;&lt;img src=&#34;https://github.com/YosysHQ/oss-cad-suite-build/actions/workflows/darwin-x64.yml/badge.svg?sanitize=true&#34; alt=&#34;darwin-x64&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/YosysHQ/oss-cad-suite-build/releases/latest&#34;&gt;&lt;img src=&#34;https://github.com/YosysHQ/oss-cad-suite-build/actions/workflows/windows-x64.yml/badge.svg?sanitize=true&#34; alt=&#34;windows-x64&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/YosysHQ/oss-cad-suite-build/releases/latest&#34;&gt;&lt;img src=&#34;https://github.com/YosysHQ/oss-cad-suite-build/actions/workflows/linux-arm64.yml/badge.svg?sanitize=true&#34; alt=&#34;linux-arm64&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/YosysHQ/oss-cad-suite-build/releases/latest&#34;&gt;&lt;img src=&#34;https://github.com/YosysHQ/oss-cad-suite-build/actions/workflows/darwin-arm64.yml/badge.svg?sanitize=true&#34; alt=&#34;darwin-arm64&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;OSS CAD Suite is a binary software distribution for a number of &lt;a href=&#34;https://en.wikipedia.org/wiki/Open-source_software&#34;&gt;open source software&lt;/a&gt; used in digital logic design. You will find tools for RTL synthesis, formal hardware verification, place &amp;amp; route, FPGA programming, and testing with support for HDLs like Verilog, Migen, and Amaranth.&lt;/p&gt; &#xA;&lt;p&gt;OSS CAD Suite is a component of YosysHQ&#39;s Tabby CAD Suite:&lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/59544343/119006798-f8786100-b990-11eb-9535-cef67420ccfb.png&#34; alt=&#34;image&#34;&gt;&lt;br&gt; See &lt;a href=&#34;https://www.yosyshq.com/tabby-cad-datasheet&#34;&gt;Tabby CAD Datasheet&lt;/a&gt; for details on Tabby CAD Suite; see &lt;a href=&#34;https://github.com/YosysHQ/oss-cad-suite-build/&#34;&gt;OSS CAD Suite GitHub&lt;/a&gt; (this page) for details on OSS CAD Suite.&lt;/p&gt; &#xA;&lt;h3&gt;RTL Synthesis&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/YosysHQ/yosys&#34;&gt;Yosys&lt;/a&gt; RTL synthesis with extensive Verilog 2005 support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/amaranth-lang/amaranth&#34;&gt;Amaranth&lt;/a&gt; refreshed Python toolbox for building complex digital hardware&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/m-labs/migen&#34;&gt;Migen&lt;/a&gt; Python toolbox for building complex digital hardware&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://people.eecs.berkeley.edu/~alanmi/abc/&#34;&gt;ABC&lt;/a&gt; A System for Sequential Synthesis and Verification&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ghdl/ghdl&#34;&gt;GHDL&lt;/a&gt; VHDL 2008/93/87 simulator (linux-x64, darwin-x64 and darwin-arm64 platforms only)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Did you know that the Tabby CAD version of yosys supports industry standard SystemVerilog, VHDL and SVA? Contact us at &lt;a href=&#34;mailto:contact@yosyshq.com&#34;&gt;contact@yosyshq.com&lt;/a&gt; to arrange a free evaluation license.&lt;/p&gt; &#xA;&lt;h3&gt;Plugins&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ghdl/ghdl-yosys-plugin&#34;&gt;GHDL plugin&lt;/a&gt; VHDL synthesis based on GHDL (linux-x64, darwin-x64 and darwin-arm64 platforms only)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Formal Tools&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/YosysHQ/sby&#34;&gt;sby (formerly SymbiYosys)&lt;/a&gt; a front-end driver program for Yosys-based formal hardware verification flows.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/YosysHQ/mcy&#34;&gt;mcy&lt;/a&gt; Mutation Cover with Yosys&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/YosysHQ/eqy&#34;&gt;eqy&lt;/a&gt; Equivalence Checking with Yosys&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/YosysHQ/sby-gui&#34;&gt;sby-gui&lt;/a&gt; GUI for sby (formerly SymbiYosys)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/arminbiere/aiger&#34;&gt;aiger&lt;/a&gt; AIGER tools including bounded model checker&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bitbucket.org/arieg/extavy&#34;&gt;avy&lt;/a&gt; Interpolating Property Directed Reachability tool&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Boolector/boolector&#34;&gt;Boolector&lt;/a&gt; SMT solver and BTOR model checker&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SRI-CSL/yices2&#34;&gt;Yices 2&lt;/a&gt; SMT solver&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sterin/super-prove-build&#34;&gt;Super prove&lt;/a&gt; ABC-based AIGER hardware model checker (linux-x64 platform only)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/upscale-project/pono&#34;&gt;Pono&lt;/a&gt; an SMT-based model checker built on &lt;a href=&#34;https://github.com/makaimann/smt-switch&#34;&gt;smt-switch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Z3Prover/z3&#34;&gt;Z3&lt;/a&gt; SMT solver&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bitwuzla/bitwuzla&#34;&gt;Bitwuzla&lt;/a&gt; SMT solver&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;PnR (Place and Route)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/YosysHQ/nextpnr&#34;&gt;nextpnr&lt;/a&gt; a portable FPGA place and route tool (generic, ice40, ecp5, machxo2, nexus, gowin)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/YosysHQ/icestorm&#34;&gt;Project IceStorm&lt;/a&gt; tools for working with Lattice ICE40 bitstreams&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/YosysHQ/prjtrellis&#34;&gt;Project Trellis&lt;/a&gt; tools for working with Lattice ECP5 bitstreams&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gatecat/prjoxide&#34;&gt;Project Oxide&lt;/a&gt; tools for working with Lattice Nexus bitstreams&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/YosysHQ/apicula&#34;&gt;Project Apicula&lt;/a&gt; tools for working with Gowin bitstreams&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;FPGA board programming tools&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/trabucayre/openFPGALoader&#34;&gt;openFPGALoader&lt;/a&gt; universal utility for programming FPGA&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://dfu-util.sourceforge.net/&#34;&gt;dfu-util&lt;/a&gt; Device Firmware Upgrade Utilities&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gregdavill/ecpprog&#34;&gt;ecpprog&lt;/a&gt; basic driver for FTDI based JTAG probes, to program ECP5 FPGAs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adamgreig/ecpdap&#34;&gt;ecpdap&lt;/a&gt; program ECP5 FPGAs and attached SPI flash using CMSIS-DAP probes in JTAG mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kost/fujprog&#34;&gt;fujprog&lt;/a&gt; ULX2S / ULX3S JTAG programmer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://openocd.org/&#34;&gt;openocd&lt;/a&gt; Open On-Chip Debugger&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wuxx/icesugar/tree/master/tools/src&#34;&gt;icesprog&lt;/a&gt; iCESugar FPGA board programmer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OLIMEX/iCE40HX1K-EVB/tree/master/programmer/iceprogduino&#34;&gt;iceprogduino&lt;/a&gt; Olinuxino based programmer for iCE40HX1K-EVB&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tinyfpga/TinyFPGA-Bootloader&#34;&gt;TinyFPGA&lt;/a&gt; USB Bootloader&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tinyfpga/TinyFPGA-B-Series&#34;&gt;TinyFPGA-B&lt;/a&gt; TinyFPGA B2 Board programmer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pitrz/icefunprog&#34;&gt;iceFUN&lt;/a&gt; iceFUN Programmer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Simulation/Testing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gtkwave/gtkwave&#34;&gt;GTK Wave&lt;/a&gt; fully featured GTK+ based wave viewer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/verilator/verilator&#34;&gt;verilator&lt;/a&gt; Verilog/SystemVerilog simulator&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/steveicarus/iverilog&#34;&gt;iverilog&lt;/a&gt; Verilog compilation system&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cocotb/cocotb&#34;&gt;cocotb&lt;/a&gt; coroutine based cosimulation library for writing VHDL and Verilog testbenches in Python&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Support libraries&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/python/cpython&#34;&gt;Python 3&lt;/a&gt; language interpreter is provided in all supported platforms.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/python/cpython&#34;&gt;Python 2&lt;/a&gt; language interpreter is provided in Linux platforms in form of library only.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ubuntu.com/&#34;&gt;Ubuntu 22.04&lt;/a&gt; distribution development packages are used and shared libraries used are provided in package.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.macports.org/&#34;&gt;macports&lt;/a&gt; distribution system for macOS is used to obtain all libraries used, and they are provided in package.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sourceforge.net/projects/mingw&#34;&gt;MinGW&lt;/a&gt; Minimalist GNU for Windows library packages from Fedora 39 are used in compilation and provided in package.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download an archive matching your OS from &lt;a href=&#34;https://github.com/YosysHQ/oss-cad-suite-build/releases/latest&#34;&gt;the releases page&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Extract the archive to a location of your choice (for Windows it is recommended that path does not contain spaces)&lt;/li&gt; &#xA; &lt;li&gt;On macOS to allow execution of quarantined files &lt;code&gt;xattr -d com.apple.quarantine oss-cad-suite-darwin-x64-yyymmdd.tgz&lt;/code&gt; on downloaded file, or run: &lt;code&gt;./activate&lt;/code&gt; in extracted location once.&lt;/li&gt; &#xA; &lt;li&gt;Set the environment as described below.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Linux and macOS&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PATH=&#34;&amp;lt;extracted_location&amp;gt;/oss-cad-suite/bin:$PATH&#34;&#xA;&#xA;# or&#xA;&#xA;source &amp;lt;extracted_location&amp;gt;/oss-cad-suite/environment&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Linux and macOS (fish shell)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fish_add_path &#34;&amp;lt;extracted_location&amp;gt;/oss-cad-suite/bin&#34;&#xA;&#xA;# or&#xA;&#xA;source &amp;lt;extracted_location&amp;gt;/oss-cad-suite/environment.fish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Windows&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-batch&#34;&gt;from existing CMD prompt:&#xA;&amp;lt;extracted_location&amp;gt;\oss-cad-suite\environment.bat&#xA;&#xA;to create new CMD prompt:&#xA;&amp;lt;extracted_location&amp;gt;\oss-cad-suite\start.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; when environment is set, &lt;code&gt;python3&lt;/code&gt; from package becomes available as well, this enables usage of &lt;em&gt;Migen&lt;/em&gt; and &lt;em&gt;Amaranth&lt;/em&gt; HDL and &lt;em&gt;LiteX&lt;/em&gt; libraries scripts as usual. When OSS CAD Suite is just added in PATH to use packaged python3 use &lt;code&gt;tabbypy3&lt;/code&gt; to start python environment. For Windows, there are no wrappers and using environment.bat is only choice.&lt;/p&gt; &#xA;&lt;h2&gt;Using LiteX&lt;/h2&gt; &#xA;&lt;p&gt;We provide you with Python 3.11 and all required software to be able to use LiteX. After activating &lt;code&gt;environment&lt;/code&gt; it is possible to perform installation same as usual:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p litex&#xA;cd litex&#xA;wget https://raw.githubusercontent.com/enjoy-digital/litex/master/litex_setup.py&#xA;python3 litex_setup.py init&#xA;python3 litex_setup.py install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Architectures&lt;/h2&gt; &#xA;&lt;h3&gt;linux-x64&lt;/h3&gt; &#xA;&lt;p&gt;Any personal Linux based computer should just work; no additional packages need to be installed on the system to make OSS CAD Suite work. Distributed libraries are based on Ubuntu 20.04, but everything is packaged in such a way so it can be used on any Linux distribution.&lt;/p&gt; &#xA;&lt;h3&gt;darwin-x64&lt;/h3&gt; &#xA;&lt;p&gt;Any macOS 12.00 or later with Intel CPU should use this distribution package.&lt;/p&gt; &#xA;&lt;h3&gt;darwin-arm64&lt;/h3&gt; &#xA;&lt;p&gt;Any macOS 12.00 or later with M1/M2 CPU should use this distribution package.&lt;/p&gt; &#xA;&lt;h3&gt;windows-x64&lt;/h3&gt; &#xA;&lt;p&gt;This architecture is supported for Windows 10 and 11.&lt;/p&gt; &#xA;&lt;h3&gt;linux-arm64&lt;/h3&gt; &#xA;&lt;p&gt;ARM64 based Linux devices using 64bit CPU as in Raspberry Pi 4,5 and 400 (with 64bit version of OS installed), and also laptops like the MNT Reform 2 can use this distribution package.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;To be able to build OSS CAD Suite yourself, you need to install &lt;code&gt;docker&lt;/code&gt; (please note this only works on x64 platforms) and &lt;code&gt;python 3.6&lt;/code&gt; or higher, with the &lt;code&gt;click&lt;/code&gt; library.&lt;/p&gt; &#xA;&lt;p&gt;After that just running &lt;code&gt;./builder.py&lt;/code&gt; should work fine.&lt;/p&gt; &#xA;&lt;p&gt;To build default build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./builder.py build &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To skip update of source code, you can always:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./builder.py build --no-update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build specific target and architecture:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./builder.py build --target=yosys --arch=linux-arm64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;p&gt;If your project is primarily written in Python (using tools such as Amaranth or LiteX), and you only need synthesis and PnR tools, you might find &lt;a href=&#34;https://yowasp.org&#34;&gt;YoWASP&lt;/a&gt; more suited to your needs since it allows managing installation and versioning of these tools in the same way as any other Python package dependencies.&lt;/p&gt;</summary>
  </entry>
</feed>