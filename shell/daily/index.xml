<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-12T01:41:15Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ldodds/scifi-terminals</title>
    <updated>2022-11-12T01:41:15Z</updated>
    <id>tag:github.com,2022-11-12:/ldodds/scifi-terminals</id>
    <link href="https://github.com/ldodds/scifi-terminals" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Recreating terminal windows from scifi movies&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Scifi Terminals&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/charmbracelet/vhs&#34;&gt;VHS&lt;/a&gt; is a tool for creating GIFs that can be used to demo CLI tools.&lt;/p&gt; &#xA;&lt;p&gt;But what if we used it to do something different? Like re-create some classic scifi movie scenes. Such as &lt;a href=&#34;https://www.youtube.com/watch?v=nLVBgsEk5k0&#34;&gt;Trinity using NMAP in the Matrix&lt;/a&gt; or &lt;a href=&#34;https://www.youtube.com/watch?v=D-9l5jSDL50&#34;&gt;hacking WOPR in War Games&lt;/a&gt;?&lt;/p&gt; &#xA;&lt;h2&gt;The Tapes&lt;/h2&gt; &#xA;&lt;p&gt;This project has some VHS tapes that generate:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ldodds/scifi-terminals/main/gifs/matrix-neo.gif&#34;&gt;Neo receiving messages from Trinity in the Matrix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ldodds/scifi-terminals/main/gifs/matrix-trinity-hack.gif&#34;&gt;Trinity hacking using NMAP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ldodds/scifi-terminals/main/gifs/war-games-greetings-professor.gif&#34;&gt;Hacking WOPR in War Games&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ldodds/scifi-terminals/main/gifs/war-games-strange-game.gif&#34;&gt;WOPR realising Thermonuclear war is a mugs game&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ldodds/scifi-terminals/main/gifs/jurassic-park-nedry.gif&#34;&gt;Dennis Nedry&#39;s terminal in Jurassic Park&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ldodds/scifi-terminals/main/gifs/alien-special-order.gif&#34;&gt;Ripley asking about Special Order 937&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are both &lt;a href=&#34;https://raw.githubusercontent.com/ldodds/scifi-terminals/main/gifs&#34;&gt;GIF and MP4 versions in the gifs folder&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Theming&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve done some light theming using VHS support for custom fonts and colour themes.&lt;/p&gt; &#xA;&lt;p&gt;For the colours I&#39;ve only usually tweaked the background, foreground and cursor colours. They&#39;re not proper themes.&lt;/p&gt; &#xA;&lt;h2&gt;The Fonts&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;m not a font geek, but have resorted to googling to try and identify suitable fonts to use for the different tapes.&lt;/p&gt; &#xA;&lt;p&gt;Check the &lt;code&gt;Set FontFamily&lt;/code&gt; instructions in the &lt;code&gt;.tape&lt;/code&gt; files to see how they&#39;re set.&lt;/p&gt; &#xA;&lt;p&gt;For the initial hacking scene in War Games, I used &lt;a href=&#34;https://fontstruct.com/fontstructions/show/1854233/wopr-terminal-1&#34;&gt;WOPR Tweaked&lt;/a&gt; by &lt;a href=&#34;https://fontstruct.com/fontstructors/59995/lord_nightmare&#34;&gt;Lord Nightmare&lt;/a&gt; used under a &lt;a href=&#34;http://creativecommons.org/licenses/by-sa/3.0/&#34;&gt;Creative Commons Attribution Share Alike license&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For the final scene with WOPR I used &lt;a href=&#34;https://fontstruct.com/fontstructions/show/1554355/vector-vcr&#34;&gt;Vector VCR&lt;/a&gt; by &lt;a href=&#34;https://fontstruct.com/fontstructors/1561728/athalax&#34;&gt;Athalaz&lt;/a&gt; used under the &lt;a href=&#34;https://fontstruct.com/fontstructions/license/1554355/vector-vcr&#34;&gt;Fontstruct Non-Commercial licence&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Otherwise I&#39;m just using my default terminal font, &#34;Monospace Regular&#34;.&lt;/p&gt; &#xA;&lt;p&gt;If you can suggest better alternatives, then let me know.&lt;/p&gt; &#xA;&lt;h3&gt;Bugs&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Sometimes people make mistak&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Report an issue if you like.&lt;/p&gt; &#xA;&lt;h3&gt;Licence&lt;/h3&gt; &#xA;&lt;p&gt;All of this is in the public domain under a CC0 Waiver. Use as you see fit.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>marlonrichert/zsh-snap</title>
    <updated>2022-11-12T01:41:15Z</updated>
    <id>tag:github.com,2022-11-12:/marlonrichert/zsh-snap</id>
    <link href="https://github.com/marlonrichert/zsh-snap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;⚡️ Znap! Fast, easy-to-use tools for Zsh dotfiles &amp; plugins, plus git repos&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;⚡️Znap!&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Znap&lt;/strong&gt; is a fast, light-weight set of tools to ease the use of Zsh plugins &amp;amp; Git repos and reduce your shell&#39;s startup time.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Enjoy using this software? &lt;a href=&#34;https://github.com/sponsors/marlonrichert&#34;&gt;Become a sponsor!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Just copy-paste the following into your command line and press &lt;kbd&gt;Enter&lt;/kbd&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;git clone --depth 1 -- https://github.com/marlonrichert/zsh-snap.git&#xA;source zsh-snap/install.zsh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;Recommended:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Zsh 5.7.1 or newer&lt;/li&gt; &#xA; &lt;li&gt;Git 2.8 or newer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Minimum:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Zsh 5.4.2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Updating&lt;/h3&gt; &#xA;&lt;p&gt;To update Znap and all of your plugins/repos simultaneously, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;% znap pull&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dotfiles Usage&lt;/h2&gt; &#xA;&lt;p&gt;Using Znap to manage your plugins can be as simple as putting this in your &lt;code&gt;.zshrc&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# Download Znap, if it&#39;s not there yet.&#xA;[[ -f ~/Git/zsh-snap/znap.zsh ]] ||&#xA;    git clone --depth 1 -- \&#xA;        https://github.com/marlonrichert/zsh-snap.git ~/Git/zsh-snap&#xA;&#xA;source ~/Git/zsh-snap/znap.zsh  # Start Znap&#xA;&#xA;# `znap prompt` makes your prompt visible in just 15-40ms!&#xA;znap prompt sindresorhus/pure&#xA;&#xA;# `znap source` automatically downloads and starts your plugins.&#xA;znap source marlonrichert/zsh-autocomplete&#xA;znap source zsh-users/zsh-autosuggestions&#xA;znap source zsh-users/zsh-syntax-highlighting&#xA;&#xA;# `znap eval` caches and runs any kind of command output for you.&#xA;znap eval iterm2 &#39;curl -fsSL https://iterm2.com/shell_integration/zsh&#39;&#xA;&#xA;# `znap function` lets you lazy-load features you don&#39;t always need.&#xA;znap function _pyenv pyenv &#39;eval &#34;$( pyenv init - --no-rehash )&#34;&#39;&#xA;compctl -K    _pyenv pyenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more examples of what Znap can do for your dotfiles, please see &lt;a href=&#34;https://raw.githubusercontent.com/marlonrichert/zsh-snap/main/.zshrc&#34;&gt;the included &lt;code&gt;.zshrc&lt;/code&gt; file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additionaly, Znap makes it so that you actually need to have &lt;em&gt;less&lt;/em&gt; in your &lt;code&gt;.zshrc&lt;/code&gt; file, by automating several tasks for you.&lt;/p&gt; &#xA;&lt;h3&gt;Automatic &lt;code&gt;compinit&lt;/code&gt; and &lt;code&gt;bashcompinit&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Note that the above example does not include any call to &lt;a href=&#34;http://zsh.sourceforge.net/Doc/Release/Zsh-Modules.html#The-zsh_002fcomplist-Module&#34;&gt;&lt;code&gt;complist&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;http://zsh.sourceforge.net/Doc/Release/Completion-System.html#Initialization&#34;&gt;&lt;code&gt;compinit&lt;/code&gt;, or &lt;code&gt;bashcompinit&lt;/code&gt;&lt;/a&gt; in the &lt;code&gt;.zshrc&lt;/code&gt; file. That is because Znap will run these for you as needed.&lt;/p&gt; &#xA;&lt;h3&gt;Asynchronous compilation&lt;/h3&gt; &#xA;&lt;p&gt;Znap compiles your scripts and functions in the background. This way, your shell will start up even faster next time!&lt;/p&gt; &#xA;&lt;p&gt;Should you not want this feature, you can disable it with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;zstyle &#39;:znap:*&#39; auto-compile no&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In any case, you can compile sources manually at any time with &lt;code&gt;znap compile [ &amp;lt;dir&amp;gt; | &amp;lt;file&amp;gt; ] ...&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Automatic cache invalidation&lt;/h3&gt; &#xA;&lt;p&gt;Znap automatically regenerates your &lt;a href=&#34;http://zsh.sourceforge.net/Doc/Release/Completion-System.html#Use-of-compinit&#34;&gt;comp dump file&lt;/a&gt; whenever you install or update a repo or change your &lt;code&gt;.zshrc&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Znap also automatically regenerates its internal cache for each command when…&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;…a cache file is older than the Git index of its associated repo.&lt;/li&gt; &#xA; &lt;li&gt;…the last argument of the &lt;code&gt;znap eval&lt;/code&gt; statements that produced it has changed. So, if the last argument to &lt;code&gt;znap eval&lt;/code&gt; contains a variable, then its cached output will be regenerated whenever the variable changes. See the &lt;a href=&#34;https://raw.githubusercontent.com/marlonrichert/zsh-snap/main/.zshrc&#34;&gt;example &lt;code&gt;.zshrc&lt;/code&gt; file&lt;/a&gt; for a practical use of this.&lt;/li&gt; &#xA; &lt;li&gt;…the cache file is missing. You can delete them manually from &lt;code&gt;$XDG_CACHE_HOME/zsh-snap/eval&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Automatic &lt;code&gt;git maintenance&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;When using &lt;code&gt;git&lt;/code&gt; 2.31.0 or newer, Znap automatically enables &lt;code&gt;git maintenance&lt;/code&gt; in each repo that it manages. This automatically optimizes your repos in the background, so that your &lt;code&gt;git&lt;/code&gt; and &lt;code&gt;znap&lt;/code&gt; commands will run faster.&lt;/p&gt; &#xA;&lt;p&gt;To selectively disable this feature, add&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;zstyle &#39;:znap:*:&amp;lt;glob pattern&amp;gt;&#39; git-maintenance off&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to your &lt;code&gt;.zshrc&lt;/code&gt; file. Next time you run &lt;code&gt;znap pull&lt;/code&gt;, &lt;code&gt;git maintenance&lt;/code&gt; will then be disabled for each repo whose name matches &lt;code&gt;&amp;lt;glob pattern&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;*&lt;/code&gt; as your &lt;a href=&#34;https://zsh.sourceforge.io/Doc/Release/Expansion.html#Filename-Generation&#34;&gt;glob pattern&lt;/a&gt; to opt out of this feature completely.&lt;/p&gt; &#xA;&lt;h2&gt;Command-Line Usage&lt;/h2&gt; &#xA;&lt;p&gt;Znap also makes life on the command line easier. For a full list of available commands, just run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;% znap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Exhaustive tab-completion is available, too. For examples of the most important command-line features, see below.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;The examples in this section you should run on the command line, not add to your &lt;code&gt;.zshrc&lt;/code&gt; file!&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;%&lt;/code&gt; represents the prompt. You shouldn&#39;t type that part. 🙂&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Install executables and completion functions&lt;/h3&gt; &#xA;&lt;p&gt;Znap can download multiple repos in parallel, then automatically find and install their executables and completion functions, with just one command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;% znap install asdf-vm/asdf aureliojargas/clitest bigH/git-fuzzy \&#xA;    ekalinin/github-markdown-toc ohmyzsh/ohmyzsh zsh-users/zsh-completions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To remove these (and their repos), use &lt;code&gt;znap uninstall&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;% znap uninstall asdf clitest git-fuzzy \&#xA;    github-markdown-toc ohmyzsh zsh-completions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Executables are installed in &lt;code&gt;~/.local/bin&lt;/code&gt;, while completion functions go to &lt;code&gt;${XDG_DATA_HOME:-~/.local/share}/zsh/site-functions&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Install generated functions&lt;/h3&gt; &#xA;&lt;p&gt;Some commands generate output that should be loaded as a function. You can install these generated functions as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;% znap fpath _kubectl &#39;kubectl completion  zsh&#39;&#xA;% znap fpath _rustup  &#39;rustup  completions zsh&#39;&#xA;% znap fpath _cargo   &#39;rustup  completions zsh cargo&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These functions, too, are saved to &lt;code&gt;${XDG_DATA_HOME:-~/.local/share}/zsh/site-functions&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Named dirs&lt;/h3&gt; &#xA;&lt;p&gt;Znap makes your repos dir and all of its subdirs available as &lt;a href=&#34;http://zsh.sourceforge.net/Doc/Release/Expansion.html#Filename-Expansion&#34;&gt;named directories&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;% cd ~znap                  # `cd` to your repos dir&#xA;% cd ~[github-markdown-toc] # `cd` to a repo&#xA;% ls ~[asdf]/completions    # `ls` a subdir in a repo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;© 2020-2021 &lt;a href=&#34;https://github.com/marlonrichert&#34;&gt;Marlon Richert&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License. See the &lt;a href=&#34;https://raw.githubusercontent.com/marlonrichert/zsh-snap/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
</feed>