<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-28T01:39:06Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lefayjey/linWinPwn</title>
    <updated>2022-10-28T01:39:06Z</updated>
    <id>tag:github.com,2022-10-28:/lefayjey/linWinPwn</id>
    <link href="https://github.com/lefayjey/linWinPwn" rel="alternate"></link>
    <summary type="html">&lt;p&gt;linWinPwn is a bash script that automates a number of Active Directory Enumeration and Vulnerability checks&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;linWinPwn&lt;/h1&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;linWinPwn is a bash script that automates a number of Active Directory Enumeration and Vulnerability checks. The script leverages and is dependent of a number of tools including: impacket, bloodhound, crackmapexec, ldapdomaindump, lsassy, smbmap, kerbrute, adidnsdump, and others.&lt;/p&gt; &#xA;&lt;p&gt;linWinPwn is particularly useful when you have access to an Active Directory environment for a limited time only, and you wish to automate the enumeration process and collect evidence efficiently. In addition, linWinPwn can replace the use of enumeration tools on Windows in the aim of reducing the number of created artifacts (e.g., PowerShell commands, Windows Events, created files on disk), and bypassing certain Anti-Virus or EDRs. This can be achieved by performing remote dynamic port forwarding through the creation of an SSH tunnel from the Windows host (e.g., VDI machine or workstation or laptop) to a remote Linux machine (e.g., Pentest laptop or VPS), and running linWinPwn with proxychains.&lt;/p&gt; &#xA;&lt;p&gt;On the Windows host, run using PowerShell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ssh kali@&amp;lt;linux_machine&amp;gt; -R 1080 -NCqf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On the Linux machine, first update &lt;code&gt;/etc/proxychains4.conf&lt;/code&gt; to include &lt;code&gt;socks5 127.0.0.1 1080&lt;/code&gt;, then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;proxychains ./linWinPwn.sh -t &amp;lt;Domain_Controller_IP&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Git clone the repository and make the script executable&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/lefayjey/linWinPwn&#xA;cd linWinPwn; chmod +x linWinPwn.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install requirements on Kali machines using the &lt;code&gt;install.sh&lt;/code&gt; script&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod +x install.sh&#xA;sudo ./install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On non-Kali machines, run the &lt;code&gt;install_nonkali.sh&lt;/code&gt; script instead&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod +x install_nonkali.sh&#xA;sudo ./install_nonkali.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re having DNS issues or time sync errors, run the &lt;code&gt;configure.sh&lt;/code&gt; script with &lt;code&gt;-d&lt;/code&gt; for DNS update and &lt;code&gt;-n&lt;/code&gt; for NTP sync&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;WARNING: The script will update /etc/resolv.conf&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod +x configure.sh&#xA;sudo ./configure.sh -t &amp;lt;DC_IP&amp;gt; -d -n&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Modules&lt;/h3&gt; &#xA;&lt;p&gt;The linWinPwn script contains 6 modules that can be used either separately or simultaneously.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default: interactive&lt;/strong&gt; - Open interactive menu to run checks separately&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./linWinPwn.sh -t &amp;lt;Domain_Controller_IP&amp;gt; [-d &amp;lt;AD_domain&amp;gt; -u &amp;lt;AD_user&amp;gt; -p &amp;lt;AD_password_or_hash[LM:NT]_or_kerbticket[./krb5cc_ticket]&amp;gt; -o &amp;lt;output_dir&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;User modules: ad_enum,kerberos,scan_shares,vuln_checks,mssql_enum&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./linWinPwn.sh -t &amp;lt;Domain_Controller_IP&amp;gt; [-d &amp;lt;AD_domain&amp;gt; -u &amp;lt;AD_user&amp;gt; -p &amp;lt;AD_password_or_hash[LM:NT]_or_kerbticket[./krb5cc_ticket]&amp;gt; -o &amp;lt;output_dir&amp;gt;] -M user &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;All modules: ad_enum,kerberos,scan_shares,vuln_checks,mssql_enum,pwd_dump&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./linWinPwn.sh -t &amp;lt;Domain_Controller_IP&amp;gt; [-d &amp;lt;AD_domain&amp;gt; -u &amp;lt;AD_user&amp;gt; -p &amp;lt;AD_password_or_hash[LM:NT]_or_kerbticket[./krb5cc_ticket]&amp;gt; -o &amp;lt;output_dir&amp;gt;] -M all &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Module ad_enum:&lt;/strong&gt; Active Directory Enumeration&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./linWinPwn.sh -t &amp;lt;Domain_Controller_IP&amp;gt; [-d &amp;lt;AD_domain&amp;gt; -u &amp;lt;AD_user&amp;gt; -p &amp;lt;AD_password_or_hash[LM:NT]_or_kerbticket[./krb5cc_ticket]&amp;gt; -o &amp;lt;output_dir&amp;gt;] -M ad_enum &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Module kerberos:&lt;/strong&gt; Kerberos Based Attacks&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./linWinPwn.sh -t &amp;lt;Domain_Controller_IP&amp;gt; [-d &amp;lt;AD_domain&amp;gt; -u &amp;lt;AD_user&amp;gt; -p &amp;lt;AD_password_or_hash[LM:NT]_or_kerbticket[./krb5cc_ticket]&amp;gt; -o &amp;lt;output_dir&amp;gt;] -M kerberos &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Module scan_shares:&lt;/strong&gt; Network Shares Scan&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./linWinPwn.sh -t &amp;lt;Domain_Controller_IP&amp;gt; [-d &amp;lt;AD_domain&amp;gt; -u &amp;lt;AD_user&amp;gt; -p &amp;lt;AD_password_or_hash[LM:NT]_or_kerbticket[./krb5cc_ticket]&amp;gt; -o &amp;lt;output_dir&amp;gt;] -M scan_shares &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Module vuln_checks:&lt;/strong&gt; Vulnerability Checks&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./linWinPwn.sh -t &amp;lt;Domain_Controller_IP&amp;gt; [-d &amp;lt;AD_domain&amp;gt; -u &amp;lt;AD_user&amp;gt; -p &amp;lt;AD_password_or_hash[LM:NT]_or_kerbticket[./krb5cc_ticket]&amp;gt; -o &amp;lt;output_dir&amp;gt;] -M vuln_checks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Module mssql_enum:&lt;/strong&gt; MSSQL Enumeration&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./linWinPwn.sh -t &amp;lt;Domain_Controller_IP&amp;gt; [-d &amp;lt;AD_domain&amp;gt; -u &amp;lt;AD_user&amp;gt; -p &amp;lt;AD_password_or_hash[LM:NT]_or_kerbticket[./krb5cc_ticket]&amp;gt; -o &amp;lt;output_dir&amp;gt;] -M mssql_enum&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Module pwd_dump:&lt;/strong&gt; Password Dump&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./linWinPwn.sh -t &amp;lt;Domain_Controller_IP&amp;gt; [-d &amp;lt;AD_domain&amp;gt; -u &amp;lt;AD_user&amp;gt; -p &amp;lt;AD_password_or_hash[LM:NT]_or_kerbticket[./krb5cc_ticket]&amp;gt; -o &amp;lt;output_dir&amp;gt;] -M pwd_dump&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Demos&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HackTheBox Forest&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Interactive Mode: &lt;a href=&#34;https://asciinema.org/a/499893&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/499893.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Automated Mode: &lt;a href=&#34;https://asciinema.org/a/464904&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/464904.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TryHackme AttacktiveDirectory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/464901&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/464901.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Use cases&lt;/h2&gt; &#xA;&lt;p&gt;For each of the cases described, the linWinPwn script performs different checks as shown below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Case 1: Unauthenticated&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Module ad_enum &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;rid bruteforce&lt;/li&gt; &#xA;   &lt;li&gt;user enumeration&lt;/li&gt; &#xA;   &lt;li&gt;ldapdomaindump anonymous enumeration&lt;/li&gt; &#xA;   &lt;li&gt;Check if ldap-signing is enforced, check for LDAP Relay&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Module kerberos &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;kerbrute user spray&lt;/li&gt; &#xA;   &lt;li&gt;ASREPRoast using collected list of users (and cracking hashes using john-the-ripper and the rockyou wordlist)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Module scan_shares &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;SMB shares anonymous enumeration on identified servers&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Module vuln_checks &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Enumeration for WebDav, dfscoerce, shadowcoerce and Spooler services on identified servers&lt;/li&gt; &#xA;   &lt;li&gt;Check for ms17-010, zerologon, petitpotam, nopac, ntlmv1, runasppl weaknesses&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./linWinPwn.sh -t &amp;lt;Domain_Controller_IP_or_Target_Domain&amp;gt; -M user&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Case 2: Standard Account (using password, NTLM hash or Kerberos ticket)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DNS extraction using adidnsdump&lt;/li&gt; &#xA; &lt;li&gt;Module ad_enum &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;BloodHound data collection&lt;/li&gt; &#xA;   &lt;li&gt;ldapdomaindump enumeration&lt;/li&gt; &#xA;   &lt;li&gt;Delegation information extraction&lt;/li&gt; &#xA;   &lt;li&gt;GPP Passwords extraction&lt;/li&gt; &#xA;   &lt;li&gt;Extract ADCS information using certipy&lt;/li&gt; &#xA;   &lt;li&gt;Check if ldap-signing is enforced, check for LDAP Relay&lt;/li&gt; &#xA;   &lt;li&gt;Extraction of MachineAccountQuota of user, Password Policy and users&#39; descriptions containing &#34;pass&#34;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Module kerberos &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;kerbrute user=pass enumeration&lt;/li&gt; &#xA;   &lt;li&gt;ASREPRoasting (and cracking hashes using john-the-ripper and the rockyou wordlist)&lt;/li&gt; &#xA;   &lt;li&gt;Kerberoasting (and cracking hashes using john-the-ripper and the rockyou wordlist)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Module scan_shares &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;SMB shares enumeration on all domain servers&lt;/li&gt; &#xA;   &lt;li&gt;KeePass files and processes discovery on all domain servers&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Module vuln_checks &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Enumeration for WebDav, dfscoerce, shadowcoerce and Spooler services on all domain servers&lt;/li&gt; &#xA;   &lt;li&gt;Check for ms17-010, zerologon, petitpotam, nopac, ntlmv1, runasppl weaknesses&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Module mssql_enum &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Check mssql privilege escalation paths&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./linWinPwn.sh -t &amp;lt;Domain_Controller_IP_or_Target_Domain&amp;gt; -d &amp;lt;AD_domain&amp;gt; -u &amp;lt;AD_user&amp;gt; -p &amp;lt;AD_password_or_hash[LM:NT]_or_kerbticket[./krb5cc_ticket]&amp;gt; -M user&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Case 3: Administrator Account (using password, NTLM hash or Kerberos ticket)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All of the &#34;Standard User&#34; checks&lt;/li&gt; &#xA; &lt;li&gt;Module pwd_dump &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;LAPS and gMSA dump&lt;/li&gt; &#xA;   &lt;li&gt;secretsdump on all domain servers&lt;/li&gt; &#xA;   &lt;li&gt;lsassy on on all domain servers&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./linWinPwn.sh -t &amp;lt;Domain_Controller_IP_or_Target_Domain&amp;gt; -d &amp;lt;AD_domain&amp;gt; -u &amp;lt;AD_user&amp;gt; -p &amp;lt;AD_password_or_hash[LM:NT]_or_kerbticket[./krb5cc_ticket]&amp;gt; -M all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TO DO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add more enumeration and exploitation tools...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/S3cur3Th1sSh1t&#34;&gt;S3cur3Th1sSh1t&lt;/a&gt; - WinPwn&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SecureAuthCorp&#34;&gt;SecureAuth&lt;/a&gt; - impacket&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://porchetta.industries/&#34;&gt;byt3bl33d3r, mpgn and all contributors&lt;/a&gt; - crackmapexec&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fox-it&#34;&gt;Fox-IT&lt;/a&gt; - bloodhound-python&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dirkjanm/&#34;&gt;dirkjanm&lt;/a&gt; - ldapdomaindump, adidnsdump&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zer1t0&#34;&gt;zer1t0&lt;/a&gt; - certi.py&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ly4k&#34;&gt;ly4k&lt;/a&gt; - Certipy&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ShawnDEvans&#34;&gt;ShawnDEvans&lt;/a&gt; - smbmap&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ropnop&#34;&gt;ropnop&lt;/a&gt; - windapsearch, kerbrute&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Legal Disclamer&lt;/h2&gt; &#xA;&lt;p&gt;Usage of linWinPwn for attacking targets without prior mutual consent is illegal. It&#39;s the end user&#39;s responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program. Only use for educational purposes.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hanoglu/TermiC</title>
    <updated>2022-10-28T01:39:06Z</updated>
    <id>tag:github.com,2022-10-28:/hanoglu/TermiC</id>
    <link href="https://github.com/hanoglu/TermiC" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GCC powered interactive C/C++ terminal created with BASH&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TermiC: Terminal C&lt;/h1&gt; &#xA;&lt;p&gt;Interactive C/C++ shell created with BASH.&lt;/p&gt; &#xA;&lt;h2&gt;How to Use&lt;/h2&gt; &#xA;&lt;p&gt;A simple function in TermiC:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;[user@FEDORA ~]$ termic&#xA;TermiC 1.1V&#xA;Language: c&#xA;Compiler: gcc&#xA;Type &#39;help&#39; for additional information&#xA;&amp;gt;&amp;gt; double divide(double a, double b) {&#xA;   ...if(b==0) {&#xA;   ......return 0;&#xA;   ......}&#xA;   ...return a/b;&#xA;   ...}&#xA;&amp;gt;&amp;gt; printf(&#34;Division 25/2 is equal %f&#34;, divide(25,2))&#xA;Division 25/2 is equal 12.500000&#xA;&amp;gt;&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Implementing classes in TermiC++:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;[user@FEDORA ~]$ termic++&#xA;TermiC 1.1V&#xA;Language: c++&#xA;Compiler: g++ -fpermissive&#xA;Type &#39;help&#39; for additional information&#xA;&amp;gt;&amp;gt; class Student {&#xA;   ...public:&#xA;   ...Student(int age) {&#xA;   ......this-&amp;gt;age = age;&#xA;   ......}&#xA;   ...int getAge() {&#xA;   ......return age;&#xA;   ......}&#xA;   ...private:&#xA;   ...int age;&#xA;   ...}&#xA;&amp;gt;&amp;gt; Student a(15)&#xA;&amp;gt;&amp;gt; cout &amp;lt;&amp;lt; &#34;Age of student &#39;a&#39; &#34; &amp;lt;&amp;lt; a.getAge()&#xA;Age of student &#39;a&#39; 15&#xA;&amp;gt;&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using vectors in TermiC++:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;[user@FEDORA ~]$ termic++&#xA;TermiC 1.1V&#xA;Language: c++&#xA;Compiler: g++ -fpermissive&#xA;Type &#39;help&#39; for additional information&#xA;&amp;gt;&amp;gt; #include &amp;lt;vector&amp;gt;&#xA;&amp;gt;&amp;gt; vector&amp;lt;int&amp;gt; a&#xA;&amp;gt;&amp;gt; a.push_back(10)&#xA;&amp;gt;&amp;gt; a.push_back(11)&#xA;&amp;gt;&amp;gt; a.push_back(12)&#xA;&amp;gt;&amp;gt; short counter = 0&#xA;&amp;gt;&amp;gt; for(auto v:a) {&#xA;   ...cout &amp;lt;&amp;lt; ++counter &amp;lt;&amp;lt; &#34;. element of a is &#34; &amp;lt;&amp;lt; v &amp;lt;&amp;lt; endl;&#xA;   ...}&#xA;1. element of a is 10&#xA;2. element of a is 11&#xA;3. element of a is 12&#xA;&amp;gt;&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: &lt;em&gt;stdio.h, stdlib.h and iostream(in TermiC++)&lt;/em&gt; are included automatically. Prompt will be inside scope of &lt;em&gt;int main()&lt;/em&gt; function but all declared functions/namespaces/classes/structs will be declared before &lt;em&gt;int main()&lt;/em&gt; automatically.&lt;/p&gt; &#xA;&lt;h2&gt;How it Works&lt;/h2&gt; &#xA;&lt;p&gt;All inputs given to TermiC are append to text file in /tmp directory. Then TermiC compiles that file and runs it. It simply takes the last line back if an output detected as all outputs should be seen once. TermiC nearly fully supports C and C++ as it basically use GCC and G++ compilers. All curly braces starts an inline prompt so nested functions, if/else statements, while/for loops, classes etc. can be used efficiently. I don&#39;t know if there is such a concept, but I hope it will be useful.&lt;/p&gt; &#xA;&lt;h4&gt;Prompt Commands&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Commands&lt;/th&gt; &#xA;   &lt;th&gt;Explanation&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;help&lt;/td&gt; &#xA;   &lt;td&gt;Shows the help menu&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;abort&lt;/td&gt; &#xA;   &lt;td&gt;Aborts inline prompt mode which are entered by curly bracket&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;show&lt;/td&gt; &#xA;   &lt;td&gt;Prints last successfully compiled source file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;showtmp&lt;/td&gt; &#xA;   &lt;td&gt;Prints last compiled source file with deleted edits&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;save&lt;/td&gt; &#xA;   &lt;td&gt;Saves source file to working directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;savebin&lt;/td&gt; &#xA;   &lt;td&gt;Saves binary file to working directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;clear&lt;/td&gt; &#xA;   &lt;td&gt;Deletes all declared functions,classes etc. and resets shell&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;exit&lt;/td&gt; &#xA;   &lt;td&gt;Deletes created temp files and exits program&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;How to Install&lt;/h2&gt; &#xA;&lt;p&gt;TermiC uses following packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gcc&#xA;g++&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt install gcc g++ # Debian based distros&#xA;dnf install gcc gcc-c++ # Fedora based distros&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run TermiC:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget &#34;https://raw.githubusercontent.com/hanoglu/TermiC/main/TermiC.sh&#34;&#xA;chmod +x TermiC.sh&#xA;bash TermiC.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install TermiC system wide:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget &#34;https://raw.githubusercontent.com/hanoglu/TermiC/main/TermiC.sh&#34;&#xA;sudo cp TermiC.sh /bin/termic&#xA;sudo bash -c &#34;echo -e &#39;#\!/bin/bash\n/bin/termic cpp&#39; &amp;gt; /bin/termic++&#34;&#xA;sudo chmod +x /bin/termic&#xA;sudo chmod +x /bin/termic++&#xA;rm -f TermiC.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To start TermiC:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;termic # For C shell&#xA;termic++ # For C++ shell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To remove TermiC system wide:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo rm -f /bin/termic&#xA;sudo rm -f /bin/termic++&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>