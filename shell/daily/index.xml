<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-17T01:38:25Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zdharma-continuum/zinit</title>
    <updated>2022-10-17T01:38:25Z</updated>
    <id>tag:github.com,2022-10-17:/zdharma-continuum/zinit</id>
    <link href="https://github.com/zdharma-continuum/zinit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸŒ» Flexible and fast ZSH plugin manager&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/zdharma-continuum/zinit&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/images/zinit.png&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Zinit&lt;a name=&#34;zinit&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zdharma-continuum/zinit/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/tag/zdharma-continuum/zinit.svg?sanitize=true&#34; alt=&#34;zinit version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zdharma-continuum/zinit/actions/workflows/tests.yaml&#34;&gt;&lt;img src=&#34;https://github.com/zdharma-continuum/zinit/actions/workflows/tests.yaml/badge.svg?sanitize=true&#34; alt=&#34;zunit tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/zdharma-continuum/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/zdharma-continuum/zinit.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/zdharma-continuum/zinit&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- mdformat-toc start --slug=github --maxlevel=6 --minlevel=2 --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#zinit-wiki&#34;&gt;Zinit Wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#install&#34;&gt;Install&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#automatic&#34;&gt;Automatic&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#manual&#34;&gt;Manual&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#plugins-and-snippets&#34;&gt;Plugins and snippets&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#upgrade-zinit-and-plugins&#34;&gt;Upgrade Zinit and plugins&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#turbo-and-lucid&#34;&gt;Turbo and lucid&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#migration&#34;&gt;Migration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#frequently-asked-questions&#34;&gt;Frequently Asked Questions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#use-zi-ice-svn-if-a-pluginsnippet-requires-an-entire-subdirectory&#34;&gt;Use &lt;code&gt;zi ice svn&lt;/code&gt; if a plugin/snippet requires an entire subdirectory&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#use-zi-ice-ascompletion-to-directly-add-single-file-completion-snippets&#34;&gt;Use &lt;code&gt;zi ice as&#39;completion&#39;&lt;/code&gt; to directly add single file completion snippets&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#more-examples&#34;&gt;More Examples&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#ice-modifiers&#34;&gt;Ice Modifiers&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#cloning-options&#34;&gt;Cloning Options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#selection-of-files-to-source-%E2%80%A6&#34;&gt;Selection of Files (To Source, â€¦)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#conditional-loading&#34;&gt;Conditional Loading&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#plugin-output&#34;&gt;Plugin Output&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#completions&#34;&gt;Completions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#command-execution-after-cloning-updating-or-loading&#34;&gt;Command Execution After Cloning, Updating or Loading&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#sticky-emulation-of-other-shells&#34;&gt;Sticky-Emulation Of Other Shells&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#others&#34;&gt;Others&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#order-of-execution&#34;&gt;Order of Execution&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#zinit-commands&#34;&gt;Zinit Commands&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#help&#34;&gt;Help&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#loading-and-unloading&#34;&gt;Loading and Unloading&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#completions-1&#34;&gt;Completions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#tracking-of-the-active-session&#34;&gt;Tracking of the Active Session&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#reports-and-statistics&#34;&gt;Reports and Statistics&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#compiling&#34;&gt;Compiling&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#other&#34;&gt;Other&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#updating-zinit-and-plugins&#34;&gt;Updating Zinit and Plugins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#completions-2&#34;&gt;Completions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#calling-compinit-without-turbo-mode&#34;&gt;Calling &lt;code&gt;compinit&lt;/code&gt; Without Turbo Mode&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#calling-compinit-with-turbo-mode&#34;&gt;Calling &lt;code&gt;compinit&lt;/code&gt; With Turbo Mode&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#ignoring-compdefs&#34;&gt;Ignoring Compdefs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#disabling-system-wide-compinit-call-ubuntu&#34;&gt;Disabling System-Wide &lt;code&gt;compinit&lt;/code&gt; Call (Ubuntu)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#zinit-module&#34;&gt;Zinit Module&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#hints-and-tips&#34;&gt;Hints and Tips&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#customizing-paths&#34;&gt;Customizing Paths&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#non-github-local-plugins&#34;&gt;Non-GitHub (Local) Plugins&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#extending-git&#34;&gt;Extending Git&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#changelog&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#support&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#getting-help-and-community&#34;&gt;Getting Help and Community&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- mdformat-toc end --&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/zdharma-continuum/pm-perf-test&#34;&gt; &lt;img width=&#34;550px&#34; src=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/images/startup-times.png&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Zinit is a flexible and fast Zshell plugin manager that will allow you to install everything from GitHub and other sites. Its characteristics are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Zinit is currently the only plugin manager that provides Turbo mode, which yields &lt;strong&gt;50-80% faster Zsh startup&lt;/strong&gt; (i.e., the shell will start up to &lt;strong&gt;5&lt;/strong&gt; times faster!). Check out a speed comparison with other popular plugin managers &lt;a href=&#34;https://github.com/zdharma-continuum/pm-perf-test&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The plugin manager gives &lt;strong&gt;reports&lt;/strong&gt; from plugin loadings describing what &lt;strong&gt;aliases&lt;/strong&gt;, functions, &lt;strong&gt;bindkeys&lt;/strong&gt;, Zle widgets, zstyles, &lt;strong&gt;completions&lt;/strong&gt;, variables, &lt;code&gt;PATH&lt;/code&gt; and &lt;code&gt;FPATH&lt;/code&gt; elements a plugin has set up. This allows one to quickly familiarize oneself with a new plugin and provides rich and easy-to-digest information which might be helpful on various occasions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Supported is the unloading of plugin and ability to list, (un)install and &lt;strong&gt;selectively disable&lt;/strong&gt;, &lt;strong&gt;enable&lt;/strong&gt; plugin&#39;s completions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The plugin manager supports loading plugins and libraries from Oh My Zsh or Prezto. However, the implementation isn&#39;t framework-specific and doesn&#39;t bloat the plugin manager with such code (more on this topic can be found on the Wiki, in the &lt;a href=&#34;https://zdharma-continuum.github.io/zinit/wiki/INTRODUCTION/#oh_my_zsh_prezto&#34;&gt;Introduction&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The system does not use &lt;code&gt;$FPATH&lt;/code&gt;, loading multiple plugins doesn&#39;t clutter &lt;code&gt;$FPATH&lt;/code&gt; with the same number of entries (e.g. &lt;code&gt;10&lt;/code&gt;, &lt;code&gt;15&lt;/code&gt; or more). Code is immune to &lt;code&gt;KSH_ARRAYS&lt;/code&gt; and other options typically causing compatibility problems.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Zinit supports special, dedicated &lt;strong&gt;packages&lt;/strong&gt; that offload the user from providing long and complex commands. See the &lt;a href=&#34;https://github.com/zdharma-continuum/zinit-packages&#34;&gt;zinit-packages repository&lt;/a&gt; for a growing, complete list of Zinit packages and the &lt;a href=&#34;https://zdharma-continuum.github.io/zinit/wiki/Zinit-Packages/&#34;&gt;Wiki page&lt;/a&gt; for an article about the feature.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Also, specialized Zinit extensions â€” called &lt;strong&gt;annexes&lt;/strong&gt; â€” have the ability to extend the plugin manager with new commands, URL-preprocessors (used by e.g.: &lt;a href=&#34;https://github.com/zdharma-continuum/zinit-annex-readurl&#34;&gt;zinit-annex-readurl&lt;/a&gt; annex), post-install and post-update hooks, and much more. See the &lt;a href=&#34;https://github.com/zdharma-continuum&#34;&gt;zdharma-continuum&lt;/a&gt; organization for a growing, complete list of available Zinit extensions and refer to the &lt;a href=&#34;https://zdharma-continuum.github.io/zinit/wiki/Annexes/&#34;&gt;Wiki article&lt;/a&gt; for an introduction on creating your annex.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Zinit Wiki&lt;a name=&#34;zinit-wiki&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The information in this README is complemented by the &lt;a href=&#34;https://zdharma-continuum.github.io/zinit/wiki/&#34;&gt;Zinit Wiki&lt;/a&gt;. The README is an introductory overview of Zinit, while the Wiki gives complete information with examples. Make sure to read it to get the most out of Zinit.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;a name=&#34;install&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Automatic&lt;a name=&#34;automatic&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to install Zinit is to execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash -c &#34;$(curl --fail --show-error --silent --location https://raw.githubusercontent.com/zdharma-continuum/zinit/HEAD/scripts/install.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will install Zinit in &lt;code&gt;~/.local/share/zinit/zinit.git&lt;/code&gt;. &lt;code&gt;.zshrc&lt;/code&gt; will be updated with three lines of code that will be added to the bottom. The lines will be sourcing &lt;code&gt;zinit.zsh&lt;/code&gt; and setting up completion for command &lt;code&gt;zinit&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After installing and reloading the shell, compile Zinit via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;zinit self-update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual&lt;a name=&#34;manual&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;In your &lt;code&gt;.zshrc&lt;/code&gt;, add the following snippet&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;ZINIT_HOME=&#34;${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git&#34;&#xA;mkdir -p &#34;$(dirname $ZINIT_HOME)&#34;&#xA;git clone https://github.com/zdharma-continuum/zinit.git &#34;$ZINIT_HOME&#34;&#xA;source &#34;${ZINIT_HOME}/zinit.zsh&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://zsh.sourceforge.net/Doc/Release/Completion-System.html#Initialization&#34;&gt;compinit&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;p&gt;If you source &lt;code&gt;zinit.zsh&lt;/code&gt; after &lt;code&gt;compinit&lt;/code&gt;, add the following snippet after sourcing &lt;code&gt;zinit.zsh&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;autoload -Uz _zinit&#xA;(( ${+_comps} )) &amp;amp;&amp;amp; _comps[zinit]=_zinit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Reload Zsh to install Zinit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;exec zsh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Various paths can be customized; see section &lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#customizing-paths&#34;&gt;Customizing Paths&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;a name=&#34;usage&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Introduction&lt;a name=&#34;introduction&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://zdharma-continuum.github.io/zinit/wiki/INTRODUCTION/&#34;&gt;Click here to read the introduction to Zinit&lt;/a&gt;. It explains basic usage and some of the more unique features of Zinit, such as the Turbo mode. If you&#39;re new to Zinit, we recommend you read it at least once.&lt;/p&gt; &#xA;&lt;h3&gt;Plugins and snippets&lt;a name=&#34;plugins-and-snippets&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Plugins can be loaded using &lt;code&gt;load&lt;/code&gt; or &lt;code&gt;light&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;zinit load  &amp;lt;repo/plugin&amp;gt; # Load with reporting/investigating.&#xA;zinit light &amp;lt;repo/plugin&amp;gt; # Load without reporting/investigating.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to source local or remote files (using direct URL), you can do so with &lt;code&gt;snippet&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;zinit snippet &amp;lt;URL&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Such lines should be added to &lt;code&gt;.zshrc&lt;/code&gt;. Snippets are cached locally. Use the &lt;code&gt;-f&lt;/code&gt; option to download a new version of a snippet or &lt;code&gt;zinit update {URL}&lt;/code&gt;. You can also use &lt;code&gt;zinit update --all&lt;/code&gt; to update all snippets (and plugins).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# Plugin history-search-multi-word loaded with investigating.&#xA;zinit load zdharma-continuum/history-search-multi-word&#xA;&#xA;# Two regular plugins loaded without investigating.&#xA;zinit light zsh-users/zsh-autosuggestions&#xA;zinit light zdharma-continuum/fast-syntax-highlighting&#xA;&#xA;# Snippet&#xA;zinit snippet https://gist.githubusercontent.com/hightemp/5071909/raw/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Prompt(Theme) Example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is &lt;a href=&#34;https://github.com/romkatv/powerlevel10k&#34;&gt;powerlevel10k&lt;/a&gt;, &lt;a href=&#34;https://github.com/sindresorhus/pure&#34;&gt;pure&lt;/a&gt;, &lt;a href=&#34;https://github.com/starship/starship&#34;&gt;starship&lt;/a&gt; sample:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# Load powerlevel10k theme&#xA;zinit ice depth&#34;1&#34; # git clone depth&#xA;zinit light romkatv/powerlevel10k&#xA;&#xA;# Load pure theme&#xA;zinit ice pick&#34;async.zsh&#34; src&#34;pure.zsh&#34; # with zsh-async library that&#39;s bundled with it.&#xA;zinit light sindresorhus/pure&#xA;&#xA;# Load starship theme&#xA;zinit ice as&#34;command&#34; from&#34;gh-r&#34; \ # `starship` binary as command, from github release&#xA;          atclone&#34;./starship init zsh &amp;gt; init.zsh; ./starship completions zsh &amp;gt; _starship&#34; \ # starship setup at clone(create init.zsh, completion)&#xA;          atpull&#34;%atclone&#34; src&#34;init.zsh&#34; # pull behavior same as clone, source init.zsh&#xA;zinit light starship/starship&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Upgrade Zinit and plugins&lt;a name=&#34;upgrade-zinit-and-plugins&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Zinit can be updated to &lt;code&gt;self-update&lt;/code&gt; and plugins to &lt;code&gt;update&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# Self update&#xA;zinit self-update&#xA;&#xA;# Plugin update&#xA;zinit update&#xA;&#xA;# Plugin parallel update&#xA;zinit update --parallel&#xA;&#xA;# Increase the number of jobs in a concurrent-set to 40&#xA;zinit update --parallel 40&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Turbo and lucid&lt;a name=&#34;turbo-and-lucid&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Turbo and lucid are the most used options.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Turbo Mode&lt;/b&gt;&lt;/summary&gt; Turbo mode is the key to performance. It can be loaded asynchronously, which makes a huge difference when the amount of plugins increases. &#xA; &lt;p&gt;Usually used as &lt;code&gt;zinit ice wait&#34;&amp;lt;SECONDS&amp;gt;&#34;&lt;/code&gt;, let&#39;s use the previous example:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;zinit ice wait    # wait is the same as wait&#34;0&#34;&#xA;zinit load zdharma-continuum/history-search-multi-word&#xA;&#xA;zinit ice wait&#34;2&#34; # load after 2 seconds&#xA;zinit load zdharma-continuum/history-search-multi-word&#xA;&#xA;zinit ice wait    # also be used in `light` and `snippet`&#xA;zinit snippet https://gist.githubusercontent.com/hightemp/5071909/raw/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Lucid&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Turbo mode is verbose, so you need an option for quiet.&lt;/p&gt; &#xA; &lt;p&gt;You can use &lt;code&gt;lucid&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;zinit ice wait lucid&#xA;zinit load zdharma-continuum/history-search-multi-word&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;F&amp;amp;A:&lt;/strong&gt;&lt;/em&gt; What is &lt;code&gt;ice&lt;/code&gt;?&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ice&lt;/code&gt; is zinit&#39;s options command. The option melts like ice and is used only once. (more: &lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#ice-modifiers&#34;&gt;Ice Modifiers&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;Migration&lt;a name=&#34;migration&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Migration from Oh-My-ZSH&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;Basic&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;zinit snippet &amp;lt;URL&amp;gt;        # Raw Syntax with URL&#xA;zinit snippet OMZ::&amp;lt;PATH&amp;gt;  # Shorthand OMZ/ (https://github.com/ohmyzsh/ohmyzsh/raw/master/)&#xA;zinit snippet OMZL::&amp;lt;PATH&amp;gt; # Shorthand OMZ/lib/&#xA;zinit snippet OMZT::&amp;lt;PATH&amp;gt; # Shorthand OMZ/themes/&#xA;zinit snippet OMZP::&amp;lt;PATH&amp;gt; # Shorthand OMZ/plugins/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Library&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Importing the &lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh/raw/master/lib/clipboard.zsh&#34;&gt;clipboard&lt;/a&gt; and &lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh/raw/master/lib/termsupport.zsh&#34;&gt;termsupport&lt;/a&gt; Oh-My-Zsh Library Sample:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# Raw Syntax&#xA;zi snippet https://github.com/ohmyzsh/ohmyzsh/blob/master/lib/clipboard.zsh&#xA;zi snippet https://github.com/ohmyzsh/ohmyzsh/blob/master/lib/termsupport.zsh&#xA;&#xA;# OMZ Shorthand Syntax&#xA;zi snippet OMZ::lib/clipboard.zsh&#xA;zi snippet OMZ::lib/termsupport.zsh&#xA;&#xA;# OMZL Shorthand Syntax&#xA;zi snippet OMZL::clipboard.zsh&#xA;zi snippet OMZL::termsupport.zsh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Theme&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;To use &lt;strong&gt;themes&lt;/strong&gt; created for Oh My Zsh you might want to first source the &lt;code&gt;git&lt;/code&gt; library there.&lt;/p&gt; &#xA; &lt;p&gt;Then you can use the themes as snippets (&lt;code&gt;zinit snippet &amp;lt;file path or GitHub URL&amp;gt;&lt;/code&gt;). Some themes require not only Oh My Zsh&#39;s Git &lt;strong&gt;library&lt;/strong&gt;, but also Git &lt;strong&gt;plugin&lt;/strong&gt; (error about &lt;code&gt;current_branch&lt;/code&gt; may appear). Load this Git-plugin as single-file snippet directly from OMZ.&lt;/p&gt; &#xA; &lt;p&gt;Most themes require &lt;code&gt;promptsubst&lt;/code&gt; option (&lt;code&gt;setopt promptsubst&lt;/code&gt; in &lt;code&gt;zshrc&lt;/code&gt;), if it isn&#39;t set, then prompt will appear as something like: &lt;code&gt;... $(build_prompt) ...&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;You might want to suppress completions provided by the git plugin by issuing &lt;code&gt;zinit cdclear -q&lt;/code&gt; (&lt;code&gt;-q&lt;/code&gt; is for quiet) â€“ see below &lt;strong&gt;Ignoring Compdefs&lt;/strong&gt;.&lt;/p&gt; &#xA; &lt;p&gt;To summarize:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;## Oh My Zsh Setting&#xA;ZSH_THEME=&#34;robbyrussell&#34;&#xA;&#xA;## Zinit Setting&#xA;# Must Load OMZ Git library&#xA;zi snippet OMZL::git.zsh&#xA;&#xA;# Load Git plugin from OMZ&#xA;zi snippet OMZP::git&#xA;zi cdclear -q # &amp;lt;- forget completions provided up to this moment&#xA;&#xA;setopt promptsubst&#xA;&#xA;# Load Prompt&#xA;zi snippet OMZT::robbyrussell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;External Theme Sample: &lt;a href=&#34;https://github.com/nicosantangelo/Alpharized&#34;&gt;NicoSantangelo/Alpharized&lt;/a&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;## Oh My Zsh Setting&#xA;ZSH_THEME=&#34;alpharized&#34;&#xA;&#xA;## Zinit Setting&#xA;# Must Load OMZ Git library&#xA;zi snippet OMZL::git.zsh&#xA;&#xA;# Load Git plugin from OMZ&#xA;zi snippet OMZP::git&#xA;zi cdclear -q # &amp;lt;- forget completions provided up to this moment&#xA;&#xA;setopt promptsubst&#xA;&#xA;# Load Prompt&#xA;zi light NicoSantangelo/Alpharized&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h2&gt;Frequently Asked Questions&lt;a name=&#34;frequently-asked-questions&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA; &lt;p&gt;Error occurs when loading OMZ&#39;s theme.&lt;/p&gt; &#xA; &lt;p&gt;If the &lt;code&gt;git&lt;/code&gt; library will not be loaded, the following errors will appear:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;........:1: command not found: git_prompt_status&#xA;........:1: command not found: git_prompt_short_sha&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Plugin&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;If it consists of a single file, you can just load it.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;## Oh-My-Zsh Setting&#xA;plugins=(&#xA;  git&#xA;  dotenv&#xA;  rake&#xA;  rbenv&#xA;  ruby&#xA;)&#xA;&#xA;## Zinit Setting&#xA;zi snippet OMZP::git&#xA;zi snippet OMZP::dotenv&#xA;zi snippet OMZP::rake&#xA;zi snippet OMZP::rbenv&#xA;zi snippet OMZP::ruby&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Use &lt;code&gt;zi ice svn&lt;/code&gt; if a plugin/snippet requires an entire subdirectory&lt;a name=&#34;use-zi-ice-svn-if-a-pluginsnippet-requires-an-entire-subdirectory&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/gitfast&#34;&gt;gitfast&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/osx&#34;&gt;osx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;zi ice svn&#xA;zi snippet OMZP::gitfast&#xA;&#xA;zi ice svn&#xA;zi snippet OMZP::osx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Use &lt;code&gt;zi ice as&#39;completion&#39;&lt;/code&gt; to directly add single file completion snippets&lt;a name=&#34;use-zi-ice-ascompletion-to-directly-add-single-file-completion-snippets&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/docker&#34;&gt;docker&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/fd&#34;&gt;fd&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;zi ice as&#34;completion&#34;&#xA;zi snippet OMZP::docker/_docker&#xA;&#xA;zi ice as&#34;completion&#34;&#xA;zi snippet OMZP::fd/_fd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://zdharma-continuum.github.io/zinit/wiki/Example-Oh-My-Zsh-setup/&#34;&gt;Find more information on Oh-My-Zsh + Zinit on the Wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Migration from Prezto&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;Basic&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;zi snippet &amp;lt;URL&amp;gt;        # Raw Syntax with URL&#xA;zi snippet PZT::&amp;lt;PATH&amp;gt;  # Shorthand PZT/ (https://github.com/sorin-ionescu/prezto/tree/master/)&#xA;zi snippet PZTM::&amp;lt;PATH&amp;gt; # Shorthand PZT/modules/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Modules&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Importing the &lt;a href=&#34;https://github.com/sorin-ionescu/prezto/tree/master/modules/environment&#34;&gt;environment&lt;/a&gt; and &lt;a href=&#34;https://github.com/sorin-ionescu/prezto/tree/master/modules/terminal&#34;&gt;terminal&lt;/a&gt; Prezto Modules Sample:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;## Prezto Setting&#xA;zstyle &#39;:prezto:load&#39; pmodule &#39;environment&#39; &#39;terminal&#39;&#xA;&#xA;## Zinit Setting&#xA;# Raw Syntax&#xA;zi snippet https://github.com/sorin-ionescu/prezto/blob/master/modules/environment/init.zsh&#xA;zi snippet https://github.com/sorin-ionescu/prezto/blob/master/modules/terminal/init.zsh&#xA;&#xA;# PZT Shorthand Syntax&#xA;zi snippet PZT::modules/environment&#xA;zi snippet PZT::modules/terminal&#xA;&#xA;# PZTM Shorthand Syntax&#xA;zi snippet PZTM::environment&#xA;zi snippet PZTM::terminal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Use &lt;code&gt;zinit ice svn&lt;/code&gt; if multiple files require an entire subdirectory. Like &lt;a href=&#34;https://github.com/sorin-ionescu/prezto/tree/master/modules/docker&#34;&gt;docker&lt;/a&gt;, &lt;a href=&#34;https://github.com/sorin-ionescu/prezto/tree/master/modules/git&#34;&gt;git&lt;/a&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;zi ice svn&#xA;zi snippet PZTM::docker&#xA;&#xA;zi ice svn&#xA;zi snippet PZTM::git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Use &lt;code&gt;zinit ice as&#34;null&#34;&lt;/code&gt; if don&#39;t exist &lt;code&gt;*.plugin.zsh&lt;/code&gt;, &lt;code&gt;init.zsh&lt;/code&gt;, &lt;code&gt;*.zsh-theme*&lt;/code&gt; files in module. Like &lt;a href=&#34;https://github.com/sorin-ionescu/prezto/tree/master/modules/archive&#34;&gt;archive&lt;/a&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;zi ice svn as&#34;null&#34;&#xA;zi snippet PZTM::archive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Use &lt;code&gt;zinit ice atclone&#34;git clone &amp;lt;repo&amp;gt; &amp;lt;location&amp;gt;&#34;&lt;/code&gt; if module have external module. Like &lt;a href=&#34;https://github.com/sorin-ionescu/prezto/tree/master/modules/completion&#34;&gt;completion&lt;/a&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;zi ice \&#xA;  atclone&#34;git clone --recursive https://github.com/zsh-users/zsh-completions.git external&#34; \&#xA;  blockf \ # use blockf to prevent any unnecessary additions to fpath, as zinit manages fpath&#xA;  svn&#xA;&#xA;zi snippet PZTM::completion&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;em&gt;&lt;strong&gt;F&amp;amp;A:&lt;/strong&gt;&lt;/em&gt; What is &lt;code&gt;zstyle&lt;/code&gt;?&lt;/p&gt; &#xA; &lt;p&gt;Read &lt;a href=&#34;http://zsh.sourceforge.net/Doc/Release/Zsh-Modules.html#The-zsh_002fzutil-Module&#34;&gt;zstyle&lt;/a&gt; doc (more: &lt;a href=&#34;https://unix.stackexchange.com/questions/214657/what-does-zstyle-do&#34;&gt;What does &lt;code&gt;zstyle&lt;/code&gt; do?&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Migration from Zgen&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;Oh My Zsh&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;More reference: check &lt;strong&gt;Migration from Oh-My-ZSH&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# Load ohmyzsh base&#xA;zgen oh-my-zsh&#xA;zi snippet OMZL::&amp;lt;ALL OF THEM&amp;gt;&#xA;&#xA;# Load ohmyzsh plugins&#xA;zgen oh-my-zsh &amp;lt;PATH&amp;gt;&#xA;zi snippet OMZ::&amp;lt;PATH&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Prezto&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;More reference: check &lt;strong&gt;Migration from Prezto&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# Load Prezto&#xA;zgen prezto&#xA;zi snippet PZTM::&amp;lt;COMMENT&#39;s List&amp;gt; # environment terminal editor history directory spectrum utility completion prompt&#xA;&#xA;# Load prezto plugins&#xA;zgen prezto &amp;lt;modulename&amp;gt;&#xA;zi snippet PZTM::&amp;lt;modulename&amp;gt;&#xA;&#xA;# Load a repo as Prezto plugins&#xA;zgen pmodule &amp;lt;reponame&amp;gt; &amp;lt;branch&amp;gt;&#xA;zi ice ver&#34;&amp;lt;branch&amp;gt;&#34;&#xA;zi load &amp;lt;repo/plugin&amp;gt;&#xA;&#xA;# Set prezto options&#xA;zgen prezto &amp;lt;modulename&amp;gt; &amp;lt;option&amp;gt; &amp;lt;value(s)&amp;gt;&#xA;zstyle &#39;:prezto:&amp;lt;modulename&amp;gt;:&#39; &amp;lt;option&amp;gt; &amp;lt;values(s)&amp;gt; # Set original prezto style&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;General&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;location&lt;/code&gt;: refer &lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#selection-of-files-to-source-&#34;&gt;Selection of Files&lt;/a&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;zgen load &amp;lt;repo&amp;gt; [location] [branch]&#xA;&#xA;zi ice ver&#34;[branch]&#34;&#xA;zi load &amp;lt;repo&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Migration from Zplug&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;Basic&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;zplug &amp;lt;repo/plugin&amp;gt;, tag1:&amp;lt;option1&amp;gt;, tag2:&amp;lt;option2&amp;gt;&#xA;&#xA;zi ice tag1&#34;&amp;lt;option1&amp;gt;&#34; tag2&#34;&amp;lt;option2&amp;gt;&#34;&#xA;zi load &amp;lt;repo/plugin&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Tag comparison&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;as&lt;/code&gt; =&amp;gt; &lt;code&gt;as&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;use&lt;/code&gt; =&amp;gt; &lt;code&gt;pick&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt;, &lt;code&gt;multisrc&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;ignore&lt;/code&gt; =&amp;gt; None&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;from&lt;/code&gt; =&amp;gt; &lt;code&gt;from&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;at&lt;/code&gt; =&amp;gt; &lt;code&gt;ver&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;rename-to&lt;/code&gt; =&amp;gt; &lt;code&gt;mv&lt;/code&gt;, &lt;code&gt;cp&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;dir&lt;/code&gt; =&amp;gt; Selection(&lt;code&gt;pick&lt;/code&gt;, ...) with rename&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;if&lt;/code&gt; =&amp;gt; &lt;code&gt;if&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;hook-build&lt;/code&gt; =&amp;gt; &lt;code&gt;atclone&lt;/code&gt;, &lt;code&gt;atpull&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;hook-load&lt;/code&gt; =&amp;gt; &lt;code&gt;atload&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;frozen&lt;/code&gt; =&amp;gt; None&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;on&lt;/code&gt; =&amp;gt; None&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;defer&lt;/code&gt; =&amp;gt; &lt;code&gt;wait&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;lazy&lt;/code&gt; =&amp;gt; &lt;code&gt;autoload&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;depth&lt;/code&gt; =&amp;gt; &lt;code&gt;depth&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;More Examples&lt;a name=&#34;more-examples&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;After installing Zinit you can start adding some actions (load some plugins) to &lt;code&gt;~/.zshrc&lt;/code&gt;, at bottom. Some examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# Load the pure theme, with zsh-async library that&#39;s bundled with it.&#xA;zi ice pick&#34;async.zsh&#34; src&#34;pure.zsh&#34;&#xA;zi light sindresorhus/pure&#xA;&#xA;# A glance at the new for-syntax â€“ load all of the above&#xA;# plugins with a single command. For more information see:&#xA;# https://zdharma-continuum.github.io/zinit/wiki/For-Syntax/&#xA;zinit for \&#xA;    light-mode \&#xA;  zsh-users/zsh-autosuggestions \&#xA;    light-mode \&#xA;  zdharma-continuum/fast-syntax-highlighting \&#xA;  zdharma-continuum/history-search-multi-word \&#xA;    light-mode \&#xA;    pick&#34;async.zsh&#34; \&#xA;    src&#34;pure.zsh&#34; \&#xA;  sindresorhus/pure&#xA;&#xA;# Binary release in archive, from GitHub-releases page.&#xA;# After automatic unpacking it provides program &#34;fzf&#34;.&#xA;zi ice from&#34;gh-r&#34; as&#34;program&#34;&#xA;zi light junegunn/fzf&#xA;&#xA;# One other binary release, it needs renaming from `docker-compose-Linux-x86_64`.&#xA;# This is done by ice-mod `mv&#39;{from} -&amp;gt; {to}&#39;. There are multiple packages per&#xA;# single version, for OS X, Linux and Windows â€“ so ice-mod `bpick&#39; is used to&#xA;# select Linux package â€“&amp;nbsp;in this case this is actually not needed, Zinit will&#xA;# grep operating system name and architecture automatically when there&#39;s no `bpick&#39;.&#xA;zi ice from&#34;gh-r&#34; as&#34;program&#34; mv&#34;docker* -&amp;gt; docker-compose&#34; bpick&#34;*linux*&#34;&#xA;zi load docker/compose&#xA;&#xA;# Vim repository on GitHub â€“ a typical source code that needs compilation â€“ Zinit&#xA;# can manage it for you if you like, run `./configure` and other `make`, etc.&#xA;# Ice-mod `pick` selects a binary program to add to $PATH. You could also install the&#xA;# package under the path $ZPFX, see: https://zdharma-continuum.github.io/zinit/wiki/Compiling-programs&#xA;zi ice \&#xA;  as&#34;program&#34; \&#xA;  atclone&#34;rm -f src/auto/config.cache; ./configure&#34; \&#xA;  atpull&#34;%atclone&#34; \&#xA;  make \&#xA;  pick&#34;src/vim&#34;&#xA;zi light vim/vim&#xA;&#xA;# Scripts built at install (there&#39;s single default make target, &#34;install&#34;,&#xA;# and it constructs scripts by `cat&#39;ing a few files). The make&#39;&#39; ice could also be:&#xA;# `make&#34;install PREFIX=$ZPFX&#34;`, if &#34;install&#34; wouldn&#39;t be the only default target.&#xA;zi ice as&#34;program&#34; pick&#34;$ZPFX/bin/git-*&#34; make&#34;PREFIX=$ZPFX&#34;&#xA;zi light tj/git-extras&#xA;&#xA;# Handle completions without loading any plugin; see &#34;clist&#34; command.&#xA;# This one is to be ran just once, in interactive session.&#xA;zi creinstall %HOME/my_completions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# For GNU ls (the binaries can be gls, gdircolors, e.g. on OS X when installing the&#xA;# coreutils package from Homebrew; you can also use https://github.com/ogham/exa)&#xA;zi ice atclone&#34;dircolors -b LS_COLORS &amp;gt; c.zsh&#34; atpull&#39;%atclone&#39; pick&#34;c.zsh&#34; nocompile&#39;!&#39;&#xA;zi light trapd00r/LS_COLORS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://zdharma-continuum.github.io/zinit/wiki/LS_COLORS-explanation/&#34;&gt;You can see an extended explanation of LS_COLORS in the Wiki.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# make&#39;!...&#39; -&amp;gt; run make before atclone &amp;amp; atpull&#xA;zi ice as&#34;program&#34; make&#39;!&#39; atclone&#39;./direnv hook zsh &amp;gt; zhook.zsh&#39; atpull&#39;%atclone&#39; src&#34;zhook.zsh&#34;&#xA;zi light direnv/direnv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://zdharma-continuum.github.io/zinit/wiki/Direnv-explanation/&#34;&gt;You can see an extended explanation of direnv in the Wiki.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re interested in more examples, then check out the &lt;a href=&#34;https://github.com/zdharma-continuum/zinit-configs&#34;&gt;zinit-configs repository&lt;/a&gt;, where users have uploaded their &lt;code&gt;~/.zshrc&lt;/code&gt; and Zinit configurations. Feel free to &lt;a href=&#34;https://github.com/zdharma-continuum/zinit-configs/issues/new?template=request-to-add-zshrc-to-the-zinit-configs-repo.md&#34;&gt;submit&lt;/a&gt; your &lt;code&gt;~/.zshrc&lt;/code&gt; there if it contains Zinit commands.&lt;/p&gt; &#xA;&lt;p&gt;You can also check out the &lt;a href=&#34;https://zdharma-continuum.github.io/zinit/wiki/GALLERY/&#34;&gt;Gallery of Zinit Invocations&lt;/a&gt; for some additional examples.&lt;/p&gt; &#xA;&lt;p&gt;Also, two articles on the Wiki present an example setup &lt;a href=&#34;https://zdharma-continuum.github.io/zinit/wiki/Example-Minimal-Setup/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://zdharma-continuum.github.io/zinit/wiki/Example-Oh-My-Zsh-setup/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;How to Use&lt;a name=&#34;how-to-use&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Ice Modifiers&lt;a name=&#34;ice-modifiers&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Following &lt;code&gt;ice&lt;/code&gt; modifiers are to be &lt;a href=&#34;https://zdharma-continuum.github.io/zinit/wiki/Alternate-Ice-Syntax/&#34;&gt;passed&lt;/a&gt; to &lt;code&gt;zinit ice ...&lt;/code&gt; to obtain described effects. The word &lt;code&gt;ice&lt;/code&gt; means something that&#39;s added (like ice to a drink) â€“ and in Zinit it means adding modifier to a next &lt;code&gt;zinit&lt;/code&gt; command, and also something that&#39;s temporary because it melts â€“ and this means that the modification will last only for a &lt;strong&gt;single&lt;/strong&gt; next &lt;code&gt;zinit&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Some Ice-modifiers are highlighted and clicking on them will take you to the appropriate Wiki page for an extended explanation.&lt;/p&gt; &#xA;&lt;p&gt;You may safely assume a given ice works with both plugins and snippets unless explicitly stated otherwise.&lt;/p&gt; &#xA;&lt;h3&gt;Cloning Options&lt;a name=&#34;cloning-options&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Modifier&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;proto&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Change protocol to &#xA;     &lt;code&gt;git&lt;/code&gt;,&#xA;     &lt;code&gt;ftp&lt;/code&gt;,&#xA;     &lt;code&gt;ftps&lt;/code&gt;,&#xA;     &lt;code&gt;ssh&lt;/code&gt;, &#xA;     &lt;code&gt;rsync&lt;/code&gt;, etc. Default is &#xA;     &lt;code&gt;https&lt;/code&gt;. &#xA;     &lt;strong&gt;Does not work with snippets.&lt;/strong&gt; &#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://zdharma-continuum.github.io/zinit/wiki/Private-Repositories/&#34;&gt;&lt;strong&gt;&lt;code&gt;from&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Clone plugin from given site. Supported are &#xA;     &lt;code&gt;from&#34;github&#34;&lt;/code&gt; (default), &#xA;     &lt;code&gt;...&#34;github-rel&#34;&lt;/code&gt;, &#xA;     &lt;code&gt;...&#34;gitlab&#34;&lt;/code&gt;, &#xA;     &lt;code&gt;...&#34;bitbucket&#34;&lt;/code&gt;, &#xA;     &lt;code&gt;...&#34;notabug&#34;&lt;/code&gt; (short names: &#xA;     &lt;code&gt;gh&lt;/code&gt;, &#xA;     &lt;code&gt;gh-r&lt;/code&gt;, &#xA;     &lt;code&gt;gl&lt;/code&gt;, &#xA;     &lt;code&gt;bb&lt;/code&gt;, &#xA;     &lt;code&gt;nb&lt;/code&gt;). Can also be a full domain name (e.g. for GitHub enterprise). &#xA;     &lt;strong&gt;Does not work with snippets.&lt;/strong&gt;&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;ver&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Used with &#xA;     &lt;code&gt;from&#34;gh-r&#34;&lt;/code&gt; (i.e. downloading a binary release, e.g. for use with &#xA;     &lt;code&gt;as&#34;program&#34;&lt;/code&gt;) â€“ selects which version to download. Default is latest, can also be explicitly &#xA;     &lt;code&gt;ver&#34;latest&#34;&lt;/code&gt;. Works also with regular plugins and packages (&#xA;     &lt;code&gt;pack&lt;/code&gt; ice) checkouts e.g. &#xA;     &lt;code&gt;ver&#34;abranch&#34;&lt;/code&gt;, i.e. a specific version. &#xA;     &lt;strong&gt;Does not work with snippets.&lt;/strong&gt;&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;bpick&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Used to select which release from GitHub Releases to download, e.g. &#xA;     &lt;code&gt;zini ice from&#34;gh-r&#34; as&#34;program&#34; bpick&#34;*Darwin*&#34;; zini load docker/compose&lt;/code&gt;. &#xA;     &lt;strong&gt;Does not work with snippets.&lt;/strong&gt; &#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;depth&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Pass &#xA;     &lt;code&gt;--depth&lt;/code&gt; to &#xA;     &lt;code&gt;git&lt;/code&gt;, i.e. limit how much of history to download. &#xA;     &lt;strong&gt;Does not work with snippets.&lt;/strong&gt;&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;cloneopts&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Pass the contents of &#xA;     &lt;code&gt;cloneopts&lt;/code&gt; to &#xA;     &lt;code&gt;git clone&lt;/code&gt;. Defaults to &#xA;     &lt;code&gt;--recursive&lt;/code&gt;. I.e.: change cloning options. Pass empty ice to disable recursive cloning. &#xA;     &lt;strong&gt;Does not work with snippets.&lt;/strong&gt; &#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;pullopts&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Pass the contents of &#xA;     &lt;code&gt;pullopts&lt;/code&gt; to &#xA;     &lt;code&gt;git pull&lt;/code&gt; used when updating plugins. &#xA;     &lt;strong&gt;Does not work with snippets.&lt;/strong&gt; &#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;svn&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Use Subversion for downloading snippet. GitHub supports &#xA;     &lt;code&gt;SVN&lt;/code&gt; protocol, this allows to clone subdirectories as snippets, e.g. &#xA;     &lt;code&gt;zinit ice svn; zinit snippet OMZP::git&lt;/code&gt;. Other ice &#xA;     &lt;code&gt;pick&lt;/code&gt; can be used to select file to source (default are: &#xA;     &lt;code&gt;*.plugin.zsh&lt;/code&gt;, &#xA;     &lt;code&gt;init.zsh&lt;/code&gt;, &#xA;     &lt;code&gt;*.zsh-theme&lt;/code&gt;). &#xA;     &lt;strong&gt;Does not work with plugins.&lt;/strong&gt;&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Selection of Files (To Source, â€¦)&lt;a name=&#34;selection-of-files-to-source-%E2%80%A6&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Modifier&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://zdharma-continuum.github.io/zinit/wiki/Sourcing-multiple-files/&#34;&gt;&lt;strong&gt;&lt;code&gt;pick&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Select the file to source, or the file to set as command (when using &#xA;     &lt;code&gt;snippet --command&lt;/code&gt; or the ice &#xA;     &lt;code&gt;as&#34;program&#34;&lt;/code&gt;); it is a pattern, alphabetically first matched file is being chosen; e.g. &#xA;     &lt;code&gt;zinit ice pick&#34;*.plugin.zsh&#34;; zinit load â€¦&lt;/code&gt;.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://zdharma-continuum.github.io/zinit/wiki/Sourcing-multiple-files&#34;&gt;&lt;strong&gt;&lt;code&gt;src&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Specify additional file to source after sourcing main file or after setting up command (via &#xA;     &lt;code&gt;as&#34;program&#34;&lt;/code&gt;). It is not a pattern but a plain file name.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://zdharma-continuum.github.io/zinit/wiki/Sourcing-multiple-files&#34;&gt;&lt;strong&gt;&lt;code&gt;multisrc&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Allows to specify multiple files for sourcing, enumerated with spaces as the separators (e.g. &#xA;     &lt;code&gt;multisrc&#39;misc.zsh grep.zsh&#39;&lt;/code&gt;) and also using brace-expansion syntax (e.g. &#xA;     &lt;code&gt;multisrc&#39;{misc,grep}.zsh&#39;&lt;/code&gt;). Supports patterns.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Conditional Loading&lt;a name=&#34;conditional-loading&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Modifier&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://zdharma-continuum.github.io/zinit/wiki/Example-wait-conditions&#34;&gt;&lt;strong&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Postpone loading a plugin or snippet. For &#xA;     &lt;code&gt;wait&#39;1&#39;&lt;/code&gt;, loading is done &#xA;     &lt;code&gt;1&lt;/code&gt; second after prompt. For &#xA;     &lt;code&gt;wait&#39;[[ ... ]]&#39;&lt;/code&gt;, &#xA;     &lt;code&gt;wait&#39;(( ... ))&#39;&lt;/code&gt;, loading is done when given condition is meet. For &#xA;     &lt;code&gt;wait&#39;!...&#39;&lt;/code&gt;, prompt is reset after load. Zsh can start 80% (i.e.: 5x) faster thanks to postponed loading. &#xA;     &lt;strong&gt;Fact:&lt;/strong&gt; when &#xA;     &lt;code&gt;wait&lt;/code&gt; is used without value, it works as &#xA;     &lt;code&gt;wait&#39;0&#39;&lt;/code&gt;.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://zdharma-continuum.github.io/zinit/wiki/Multiple-prompts&#34;&gt;&lt;strong&gt;&lt;code&gt;load&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     A condition to check which should cause plugin to load. It will load once, the condition can be still true, but will not trigger second load (unless plugin is unloaded earlier, see &#xA;     &lt;code&gt;unload&lt;/code&gt; below). E.g.: &#xA;     &lt;code&gt;load&#39;[[ $PWD = */github* ]]&#39;&lt;/code&gt;.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://zdharma-continuum.github.io/zinit/wiki/Multiple-prompts&#34;&gt;&lt;strong&gt;&lt;code&gt;unload&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     A condition to check causing plugin to unload. It will unload once, then only if loaded again. E.g.: &#xA;     &lt;code&gt;unload&#39;[[ $PWD != */github* ]]&#39;&lt;/code&gt;.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;cloneonly&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Don&#39;t load the plugin / snippet, only download it &#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Load plugin or snippet only when given condition is fulfilled, for example: &#xA;     &lt;code&gt;zinit ice if&#39;[[ -n &#34;$commands[otool]&#34; ]]&#39;; zinit load ...&lt;/code&gt;.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;has&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Load plugin or snippet only when given command is available (in $PATH), e.g. &#xA;     &lt;code&gt;zinit ice has&#39;git&#39; ...&lt;/code&gt; &#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;subscribe&lt;/code&gt; / &lt;code&gt;on-update-of&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Postpone loading of a plugin or snippet until the given file(s) get updated, e.g. &#xA;     &lt;code&gt;subscribe&#39;{~/files-*,/tmp/files-*}&#39;&lt;/code&gt; &#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;trigger-load&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Creates a function that loads the associated plugin/snippet, with an option (to use it, precede the ice content with &#xA;     &lt;code&gt;!&lt;/code&gt;) to automatically forward the call afterwards, to a command of the same name as the function. Can obtain multiple functions to create â€“&amp;nbsp;sparate with &#xA;     &lt;code&gt;;&lt;/code&gt;.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Plugin Output&lt;a name=&#34;plugin-output&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Modifier&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;silent&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Mute plugin&#39;s or snippet&#39;s &#xA;     &lt;code&gt;stderr&lt;/code&gt; &amp;amp; &#xA;     &lt;code&gt;stdout&lt;/code&gt;. Also skip &#xA;     &lt;code&gt;Loaded ...&lt;/code&gt; message under prompt for &#xA;     &lt;code&gt;wait&lt;/code&gt;, etc. loaded plugins, and completion-installation messages.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;lucid&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Skip &#xA;     &lt;code&gt;Loaded ...&lt;/code&gt; message under prompt for &#xA;     &lt;code&gt;wait&lt;/code&gt;, etc. loaded plugins (a subset of &#xA;     &lt;code&gt;silent&lt;/code&gt;).&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;notify&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Output given message under-prompt after successfully loading a plugin/snippet. In case of problems with the loading, output a warning message and the return code. If starts with &#xA;     &lt;code&gt;!&lt;/code&gt; it will then always output the given message. Hint: if the message is empty, then it will just notify about problems.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Completions&lt;a name=&#34;completions&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Modifier&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;blockf&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Disallow plugin to modify &#xA;     &lt;code&gt;fpath&lt;/code&gt;. Useful when a plugin wants to provide completions in traditional way. Zinit can manage completions and plugin can be blocked from exposing them.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;nocompletions&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Don&#39;t detect, install and manage completions for this plugin. Completions can be installed later with &#xA;     &lt;code&gt;zinit creinstall {plugin-spec}&lt;/code&gt;.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Command Execution After Cloning, Updating or Loading&lt;a name=&#34;command-execution-after-cloning-updating-or-loading&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Modifier&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;mv&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Move file after cloning or after update (then, only if new commits were downloaded). Example: &#xA;     &lt;code&gt;mv &#34;fzf-* -&amp;gt; fzf&#34;&lt;/code&gt;. It uses &#xA;     &lt;code&gt;-&amp;gt;&lt;/code&gt; as separator for old and new file names. Works also with snippets.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;cp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Copy file after cloning or after update (then, only if new commits were downloaded). Example: &#xA;     &lt;code&gt;cp &#34;docker-c* -&amp;gt; dcompose&#34;&lt;/code&gt;. Ran after &#xA;     &lt;code&gt;mv&lt;/code&gt;.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://zdharma-continuum.github.io/zinit/wiki/atload-and-other-at-ices&#34;&gt;&lt;strong&gt;&lt;code&gt;atclone&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Run command after cloning, within plugin&#39;s directory, e.g. &#xA;     &lt;code&gt;zinit ice atclone&#34;echo Cloned&#34;&lt;/code&gt;. Ran also after downloading snippet.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://zdharma-continuum.github.io/zinit/wiki/atload-and-other-at-ices&#34;&gt;&lt;strong&gt;&lt;code&gt;atpull&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Run command after updating (&#xA;     &lt;strong&gt;only if new commits are waiting for download&lt;/strong&gt;), within plugin&#39;s directory. If starts with &#34;!&#34; then command will be ran before &#xA;     &lt;code&gt;mv&lt;/code&gt; &amp;amp; &#xA;     &lt;code&gt;cp&lt;/code&gt; ices and before &#xA;     &lt;code&gt;git pull&lt;/code&gt; or &#xA;     &lt;code&gt;svn update&lt;/code&gt;. Otherwise it is ran after them. Can be &#xA;     &lt;code&gt;atpull&#39;%atclone&#39;&lt;/code&gt;, to repeat &#xA;     &lt;code&gt;atclone&lt;/code&gt; Ice-mod.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://zdharma-continuum.github.io/zinit/wiki/atload-and-other-at-ices&#34;&gt;&lt;strong&gt;&lt;code&gt;atinit&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Run command after directory setup (cloning, checking it, etc.) of plugin/snippet but before loading.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://zdharma-continuum.github.io/zinit/wiki/atload-and-other-at-ices&#34;&gt;&lt;strong&gt;&lt;code&gt;atload&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Run command after loading, within plugin&#39;s directory. Can be also used with snippets. Passed code can be preceded with &#xA;     &lt;code&gt;!&lt;/code&gt;, it will then be investigated (if using &#xA;     &lt;code&gt;load&lt;/code&gt;, not &#xA;     &lt;code&gt;light&lt;/code&gt;).&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;run-atpull&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Always run the atpull hook (when updating), not only when there are new commits to be downloaded.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;nocd&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Don&#39;t switch the current directory into the plugin&#39;s directory when evaluating the above ice-mods &#xA;     &lt;code&gt;atinit&#39;&#39;&lt;/code&gt;,&#xA;     &lt;code&gt;atload&#39;&#39;&lt;/code&gt;, etc.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;configure&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Runs &#xA;     &lt;code&gt;./configure&lt;/code&gt; script and by default changes the installation directory by passing &#xA;     &lt;code&gt;--prefix=$ZPFX&lt;/code&gt; to the script. Runs before &#xA;     &lt;code&gt;make&#39;&#39;&lt;/code&gt; and after &#xA;     &lt;code&gt;make&#39;!&#39;&lt;/code&gt;, you can pass &#xA;     &lt;code&gt;&#39;!&#39;&lt;/code&gt; too to this ice (i.e.: &#xA;     &lt;code&gt;configure&#39;!&#39;&lt;/code&gt;) to make it execute earlier â€“ before &#xA;     &lt;code&gt;make&#39;!&#39;&lt;/code&gt; and after &#xA;     &lt;code&gt;make&#39;!!&#39;&lt;/code&gt;. If &#xA;     &lt;code&gt;#&lt;/code&gt; given in the ice value then also executes script &#xA;     &lt;code&gt;./autogen.sh&lt;/code&gt; first before running &#xA;     &lt;code&gt;./configure&lt;/code&gt;. The script is run anyway if there is no &#xA;     &lt;code&gt;configure&lt;/code&gt; script. Also, when there exist another build-system related files, then it is run if no &#xA;     &lt;code&gt;configure&lt;/code&gt; script is found. Currently supported systems are: CMake, scons and meson, checked-for/run in this order&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://zdharma-continuum.github.io/zinit/wiki/Installing-with-make&#34;&gt;&lt;strong&gt;&lt;code&gt;make&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Run &#xA;     &lt;code&gt;make&lt;/code&gt; command after cloning/updating and executing &#xA;     &lt;code&gt;mv&lt;/code&gt;, &#xA;     &lt;code&gt;cp&lt;/code&gt;, &#xA;     &lt;code&gt;atpull&lt;/code&gt;, &#xA;     &lt;code&gt;atclone&lt;/code&gt; Ice mods. Can obtain argument, e.g. &#xA;     &lt;code&gt;make&#34;install PREFIX=/opt&#34;&lt;/code&gt;. If the value starts with &#xA;     &lt;code&gt;!&lt;/code&gt; then &#xA;     &lt;code&gt;make&lt;/code&gt; is ran before &#xA;     &lt;code&gt;atclone&lt;/code&gt;/&#xA;     &lt;code&gt;atpull&lt;/code&gt;, e.g. &#xA;     &lt;code&gt;make&#39;!&#39;&lt;/code&gt;.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;countdown&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-alignq: justify;&#34;&gt;&#xA;     Causes an interruptable (by Ctrl-C) countdown 5â€¦4â€¦3â€¦2â€¦1â€¦0 to be displayed before executing &#xA;     &lt;code&gt;atclone&#39;&#39;&lt;/code&gt;,&#xA;     &lt;code&gt;atpull&#39;&#39;&lt;/code&gt; and &#xA;     &lt;code&gt;make&lt;/code&gt; ices&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;reset&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Invokes &#xA;     &lt;code&gt;git reset --hard HEAD&lt;/code&gt; for plugins or &#xA;     &lt;code&gt;svn revert&lt;/code&gt; for SVN snippets before pulling any new changes. This way &#xA;     &lt;code&gt;git&lt;/code&gt; or &#xA;     &lt;code&gt;svn&lt;/code&gt; will not report conflicts if some changes were done in e.g.: &#xA;     &lt;code&gt;atclone&#39;&#39;&lt;/code&gt; ice. For file snippets and &#xA;     &lt;code&gt;gh-r&lt;/code&gt; plugins it invokes &#xA;     &lt;code&gt;rm -rf *&lt;/code&gt;.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Sticky-Emulation Of Other Shells&lt;a name=&#34;sticky-emulation-of-other-shells&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Modifier&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;sh&lt;/code&gt;, &lt;code&gt;!sh&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Source the plugin&#39;s (or snippet&#39;s) script with &#xA;     &lt;code&gt;sh&lt;/code&gt; emulation so that also all functions declared within the file will get a &#xA;     &lt;em&gt;sticky&lt;/em&gt; emulation assigned â€“ when invoked they&#39;ll execute also with the &#xA;     &lt;code&gt;sh&lt;/code&gt; emulation set-up. The &#xA;     &lt;code&gt;!sh&lt;/code&gt; version switches additional options that are rather not important from the portability perspective.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;!bash&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     The same as &#xA;     &lt;code&gt;sh&lt;/code&gt;, but with the &#xA;     &lt;code&gt;SH_GLOB&lt;/code&gt; option disabled, so that Bash regular expressions work.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;ksh&lt;/code&gt;, &lt;code&gt;!ksh&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     The same as &#xA;     &lt;code&gt;sh&lt;/code&gt;, but emulating &#xA;     &lt;code&gt;ksh&lt;/code&gt; shell.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;csh&lt;/code&gt;, &lt;code&gt;!csh&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     The same as &#xA;     &lt;code&gt;sh&lt;/code&gt;, but emulating &#xA;     &lt;code&gt;csh&lt;/code&gt; shell.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Others&lt;a name=&#34;others&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Modifier&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;as&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Can be &#xA;     &lt;code&gt;as&#34;program&#34;&lt;/code&gt; (also the alias: &#xA;     &lt;code&gt;as&#34;command&#34;&lt;/code&gt;), and will cause to add script/program to &#xA;     &lt;code&gt;$PATH&lt;/code&gt; instead of sourcing (see &#xA;     &lt;code&gt;pick&lt;/code&gt;). Can also be &#xA;     &lt;code&gt;as&#34;completion&#34;&lt;/code&gt; â€“ use with plugins or snippets in whose only underscore-starting &#xA;     &lt;code&gt;_*&lt;/code&gt; files you are interested in. The third possible value is &#xA;     &lt;code&gt;as&#34;null&#34;&lt;/code&gt; â€“ a shorthand for &#xA;     &lt;code&gt;pick&#34;/dev/null&#34; nocompletions&lt;/code&gt; â€“ i.e.: it disables the default script-file sourcing and also the installation of completions.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://zdharma-continuum.github.io/zinit/wiki/id-as/&#34;&gt;&lt;strong&gt;&lt;code&gt;id-as&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Nickname a plugin or snippet, to e.g. create a short handler for long-url snippet.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;compile&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Pattern (+ possible &#xA;     &lt;code&gt;{...}&lt;/code&gt; expansion, like &#xA;     &lt;code&gt;{a/*,b*}&lt;/code&gt;) to select additional files to compile, e.g. &#xA;     &lt;code&gt;compile&#34;(pure|async).zsh&#34;&lt;/code&gt; for &#xA;     &lt;code&gt;sindresorhus/pure&lt;/code&gt;.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;nocompile&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Don&#39;t try to compile &#xA;     &lt;code&gt;pick&lt;/code&gt;-pointed files. If passed the exclamation mark (i.e. &#xA;     &lt;code&gt;nocompile&#39;!&#39;&lt;/code&gt;), then do compile, but after &#xA;     &lt;code&gt;make&#39;&#39;&lt;/code&gt; and &#xA;     &lt;code&gt;atclone&#39;&#39;&lt;/code&gt; (useful if Makefile installs some scripts, to point &#xA;     &lt;code&gt;pick&#39;&#39;&lt;/code&gt; at the location of their installation).&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;service&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Make following plugin or snippet a &#xA;     &lt;em&gt;service&lt;/em&gt;, which will be ran in background, and only in single Zshell instance. See &#xA;     &lt;a href=&#34;https://github.com/orgs/zdharma-continuum/repositories?q=zservice-&#34;&gt;the zservice-* repositories&lt;/a&gt;.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;reset-prompt&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Reset the prompt after loading the plugin/snippet (by issuing &#xA;     &lt;code&gt;zle .reset-prompt&lt;/code&gt;). Note: normally it&#39;s sufficient to precede the value of &#xA;     &lt;code&gt;wait&#39;&#39;&lt;/code&gt; ice with &#xA;     &lt;code&gt;!&lt;/code&gt;.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;bindmap&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     To hold &#xA;     &lt;code&gt;;&lt;/code&gt;-separated strings like &#xA;     &lt;code&gt;Key(s)A -&amp;gt; Key(s)B&lt;/code&gt;, e.g. &#xA;     &lt;code&gt;^R -&amp;gt; ^T; ^A -&amp;gt; ^B&lt;/code&gt;. In general, &#xA;     &lt;code&gt;bindmap&#39;&#39;&lt;/code&gt;changes bindings (done with the &#xA;     &lt;code&gt;bindkey&lt;/code&gt; builtin) the plugin does. The example would cause the plugin to map Ctrl-T instead of Ctrl-R, and Ctrl-B instead of Ctrl-A. &#xA;     &lt;strong&gt;Does not work with snippets.&lt;/strong&gt;&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;trackbinds&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Shadow but only &#xA;     &lt;code&gt;bindkey&lt;/code&gt; calls even with &#xA;     &lt;code&gt;zinit light ...&lt;/code&gt;, i.e. even with investigating disabled (fast loading), to allow &#xA;     &lt;code&gt;bindmap&lt;/code&gt; to remap the key-binds. The same effect has &#xA;     &lt;code&gt;zinit light -b ...&lt;/code&gt;, i.e. additional &#xA;     &lt;code&gt;-b&lt;/code&gt; option to the &#xA;     &lt;code&gt;light&lt;/code&gt;-subcommand. &#xA;     &lt;strong&gt;Does not work with snippets.&lt;/strong&gt;&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://zdharma-continuum.github.io/zinit/wiki/wrap-track&#34;&gt;&lt;strong&gt;&lt;code&gt;wrap-track&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Takes a &#xA;     &lt;code&gt;;&lt;/code&gt;-separated list of function names that are to be investigated (meaning gathering report and unload data) &#xA;     &lt;strong&gt;once&lt;/strong&gt; during execution. It works by wrapping the functions with a investigating-enabling and disabling snippet of code. In summary, &#xA;     &lt;code&gt;wrap-track&lt;/code&gt; allows to extend the investigating beyond the moment of loading of a plugin. Example use is to &#xA;     &lt;code&gt;wrap-track&lt;/code&gt; a precmd function of a prompt (like &#xA;     &lt;code&gt;_p9k_precmd()&lt;/code&gt; of powerlevel10k) or other plugin that &#xA;     &lt;em&gt;postpones its initialization till the first prompt&lt;/em&gt; (like e.g.: zsh-autosuggestions). &#xA;     &lt;strong&gt;Does not work with snippets.&lt;/strong&gt;&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;aliases&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Load the plugin with the aliases mechanism enabled. Use with plugins that define &#xA;     &lt;strong&gt;and use&lt;/strong&gt; aliases in their scripts.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;light-mode&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Load the plugin without the investigating, i.e.: as if it would be loaded with the &#xA;     &lt;code&gt;light&lt;/code&gt; command. Useful for the for-syntax, where there is no &#xA;     &lt;code&gt;load&lt;/code&gt; nor &#xA;     &lt;code&gt;light&lt;/code&gt; subcommand&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://zdharma-continuum.github.io/zinit/wiki/extract-Ice/&#34;&gt;&lt;strong&gt;&lt;code&gt;extract&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Performs archive extraction supporting multiple formats like &#xA;     &lt;code&gt;zip&lt;/code&gt;, &#xA;     &lt;code&gt;tar.gz&lt;/code&gt;, etc. and also notably OS X &#xA;     &lt;code&gt;dmg&lt;/code&gt; images. If it has no value, then it works in the &#xA;     &lt;em&gt;auto&lt;/em&gt; mode â€“ it automatically extracts all files of known archive extensions IF they aren&#39;t located deeper than in a sub-directory (this is to prevent extraction of some helper archive files, typically located somewhere deeper in the tree). If no such files will be found, then it extracts all found files of known &#xA;     &lt;strong&gt;type&lt;/strong&gt; â€“ the type is being read by the &#xA;     &lt;code&gt;file&lt;/code&gt; Unix command. If not empty, then takes names of the files to extract. Refer to the Wiki page for further information.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;subst&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Substitute the given string into another string when sourcing the plugin script, e.g.: &#xA;     &lt;code&gt;zinit subst&#39;autoload â†’ autoload -Uz&#39; â€¦&lt;/code&gt;.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;autoload&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Autoload the given functions (from their files). Equvalent to calling &#xA;     &lt;code&gt;atinit&#39;autoload the-function&#39;&lt;/code&gt;. Supports renaming of the function â€“ pass &#xA;     &lt;code&gt;&#39;â€¦ â†’ new-name&#39;&lt;/code&gt; or &#xA;     &lt;code&gt;&#39;â€¦ -&amp;gt; new-name&#39;&lt;/code&gt;, e.g.: &#xA;     &lt;code&gt;zinit autoload&#39;fun â†’ my-fun; fun2 â†’ my-fun2&#39;&lt;/code&gt;.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;link&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Use a symlink to cache a local snippet instead of copying into the snippets directory. Uses relative links if realpath &amp;gt;= 8.23 is found. &#xA;     &lt;em&gt;&lt;strong&gt;Does not apply to URL-based snippets. Does not work with plugins.&lt;/strong&gt;&lt;/em&gt;&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Order of Execution&lt;a name=&#34;order-of-execution&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Order of execution of related Ice-mods: &lt;code&gt;atinit&lt;/code&gt; -&amp;gt; &lt;code&gt;atpull!&lt;/code&gt; -&amp;gt; &lt;code&gt;make&#39;!!&#39;&lt;/code&gt; -&amp;gt; &lt;code&gt;mv&lt;/code&gt; -&amp;gt; &lt;code&gt;cp&lt;/code&gt; -&amp;gt; &lt;code&gt;make!&lt;/code&gt; -&amp;gt; &lt;code&gt;atclone&lt;/code&gt;/&lt;code&gt;atpull&lt;/code&gt; -&amp;gt; &lt;code&gt;make&lt;/code&gt; -&amp;gt; &lt;code&gt;(plugin script loading)&lt;/code&gt; -&amp;gt; &lt;code&gt;src&lt;/code&gt; -&amp;gt; &lt;code&gt;multisrc&lt;/code&gt; -&amp;gt; &lt;code&gt;atload&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Zinit Commands&lt;a name=&#34;zinit-commands&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Following commands are passed to &lt;code&gt;zinit ...&lt;/code&gt; to obtain described effects.&lt;/p&gt; &#xA;&lt;h3&gt;Help&lt;a name=&#34;help&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-h, --help, help&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Usage information.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;man&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Manual.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Loading and Unloading&lt;a name=&#34;loading-and-unloading&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;load {plg-spec}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Load plugin, can also receive absolute local path.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;light [-b] {plg-spec}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Light plugin load, without reporting/investigating. &#xA;     &lt;code&gt;-b&lt;/code&gt; â€“ investigate &#xA;     &lt;code&gt;bindkey&lt;/code&gt;-calls only. There&#39;s also &#xA;     &lt;code&gt;light-mode&lt;/code&gt; ice which can be used to induce the no-investigating (i.e.: &#xA;     &lt;em&gt;light&lt;/em&gt;) loading, regardless of the command used.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;unload [-q] {plg-spec}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Unload plugin loaded with &#xA;     &lt;code&gt;zinit load ...&lt;/code&gt;. &#xA;     &lt;code&gt;-q&lt;/code&gt; â€“ quiet.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;snippet [-f] {url}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Source local or remote file (by direct URL). &#xA;     &lt;code&gt;-f&lt;/code&gt; â€“ don&#39;t use cache (force redownload). The URL can use the following shorthands: &#xA;     &lt;code&gt;PZT::&lt;/code&gt; (Prezto), &#xA;     &lt;code&gt;PZTM::&lt;/code&gt; (Prezto module), &#xA;     &lt;code&gt;OMZ::&lt;/code&gt; (Oh My Zsh), &#xA;     &lt;code&gt;OMZP::&lt;/code&gt; (OMZ plugin), &#xA;     &lt;code&gt;OMZL::&lt;/code&gt; (OMZ library), &#xA;     &lt;code&gt;OMZT::&lt;/code&gt; (OMZ theme), e.g.: &#xA;     &lt;code&gt;PZTM::environment&lt;/code&gt;, &#xA;     &lt;code&gt;OMZP::git&lt;/code&gt;, etc.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Completions&lt;a name=&#34;completions-1&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt; clist [&lt;em&gt;columns&lt;/em&gt;], completions [&lt;em&gt;columns&lt;/em&gt;] &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      List completions in use, with &#xA;     &lt;code&gt;&lt;em&gt;columns&lt;/em&gt;&lt;/code&gt; completions per line. &#xA;     &lt;code&gt;zpl clist 5&lt;/code&gt; will for example print 5 completions per line. Default is 3.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;cdisable {cname}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Disable completion &#xA;     &lt;code&gt;cname&lt;/code&gt;.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;cenable {cname}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Enable completion &#xA;     &lt;code&gt;cname&lt;/code&gt;.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;creinstall [-q] [-Q] {plg-spec}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Install completions for plugin, can also receive absolute local path. &#xA;     &lt;code&gt;-q&lt;/code&gt; â€“ quiet. &#xA;     &lt;code&gt;-Q&lt;/code&gt; - quiet all.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;cuninstall {plg-spec}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Uninstall completions for plugin.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;csearch&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Search for available completions from any plugin.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;compinit&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Refresh installed completions.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;cclear&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Clear stray and improper completions.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;cdlist&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Show compdef replay list.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;cdreplay [-q]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Replay compdefs (to be done after compinit). &#xA;     &lt;code&gt;-q&lt;/code&gt; â€“ quiet.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;cdclear [-q]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Clear compdef replay list. &#xA;     &lt;code&gt;-q&lt;/code&gt; â€“ quiet.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Tracking of the Active Session&lt;a name=&#34;tracking-of-the-active-session&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;dtrace, dstart&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Start investigating what&#39;s going on in session.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;dstop&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Stop investigating what&#39;s going on in session.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;dunload&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Revert changes recorded between dstart and dstop.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;dreport&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Report what was going on in session.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;dclear&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Clear report of what was going on in session.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Reports and Statistics&lt;a name=&#34;reports-and-statistics&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt; times [-s] [-m] [-a]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Statistics on plugin load times, sorted in order of loading. &#xA;     &lt;code&gt;-s&lt;/code&gt; â€“ use seconds instead of milliseconds. &#xA;     &lt;code&gt;-m&lt;/code&gt; â€“ show plugin loading moments. &#xA;     &lt;code&gt;-a&lt;/code&gt; - show both plugin load times and loading moments&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;zstatus&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Overall Zinit status.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;report {plg-spec}|--all&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Show plugin report. &#xA;     &lt;code&gt;--all&lt;/code&gt; â€“ do it for all plugins.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;loaded [keyword], list [keyword]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Show what plugins are loaded (filter with &#39;keyword&#39;).&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;ls&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      List snippets in formatted and colorized manner. Requires &#xA;     &lt;strong&gt;tree&lt;/strong&gt; program.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;status {plg-spec}|URL|--all&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Git status for plugin or svn status for snippet. &#xA;     &lt;code&gt;--all&lt;/code&gt; â€“ do it for all plugins and snippets.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;recently [time-spec]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Show plugins that changed recently, argument is e.g. 1 month 2 days.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;bindkeys&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Lists bindkeys set up by each plugin.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Compiling&lt;a name=&#34;compiling&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;compile {plg-spec}|--all&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Compile plugin. &#xA;     &lt;code&gt;--all&lt;/code&gt; â€“ compile all plugins.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;uncompile {plg-spec}|--all&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Remove compiled version of plugin. &#xA;     &lt;code&gt;--all&lt;/code&gt; â€“ do it for all plugins.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;compiled&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      List plugins that are compiled.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Other&lt;a name=&#34;other&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;self-update&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Updates and compiles Zinit.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;update [-q] [-r] {plg-spec}|URL|--all&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Git update plugin or snippet.&#xA;     &lt;br&gt; &#xA;     &lt;code&gt;--all&lt;/code&gt; â€“ update all plugins and snippets.&#xA;     &lt;br&gt; &#xA;     &lt;code&gt;-q&lt;/code&gt; â€“ quiet.&#xA;     &lt;br&gt; &#xA;     &lt;code&gt;-r&lt;/code&gt; | &#xA;     &lt;code&gt;--reset&lt;/code&gt; â€“ run &#xA;     &lt;code&gt;git reset --hard&lt;/code&gt; / &#xA;     &lt;code&gt;svn revert&lt;/code&gt; before pulling changes.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;ice &amp;lt;ice specification&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Add ice to next command, argument is e.g. from&#34;gitlab&#34;.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;delete {plg-spec}|URL|--clean|--all&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Remove plugin or snippet from disk (good to forget wrongly passed ice-mods). &#xA;     &lt;br&gt; &#xA;     &lt;code&gt;--all&lt;/code&gt; â€“ purge.&#xA;     &lt;br&gt; &#xA;     &lt;code&gt;--clean&lt;/code&gt; â€“ delete plugins and snippets that are not loaded.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;cd {plg-spec}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Cd into plugin&#39;s directory. Also support snippets if fed with URL.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;edit {plg-spec}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Edit plugin&#39;s file with $EDITOR.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;glance {plg-spec}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Look at plugin&#39;s source (pygmentize, {,source-}highlight).&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;stress {plg-spec}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Test plugin for compatibility with set of options.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;changes {plg-spec}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      View plugin&#39;s git log.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;create {plg-spec}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Create plugin (also together with GitHub repository).&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;srv {service-id} [cmd]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Control a service, command can be: stop,start,restart,next,quit; &#xA;     &lt;code&gt;next&lt;/code&gt; moves the service to another Zshell.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;recall {plg-spec}|URL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Fetch saved ice modifiers and construct &#xA;     &lt;code&gt;zinit ice ...&lt;/code&gt; command.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;env-whitelist [-v] [-h] {env..}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Allows to specify names (also patterns) of variables left unchanged during an unload. &#xA;     &lt;code&gt;-v&lt;/code&gt; â€“ verbose.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;module&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;      Manage binary Zsh module shipped with Zinit, see &#xA;     &lt;code&gt;zinit module help&lt;/code&gt;.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;add-fpath|fpath&lt;/code&gt; &lt;code&gt;[-f|--front]&lt;/code&gt; &lt;code&gt;{plg-spec}&lt;/code&gt; &lt;code&gt;[subdirectory]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Adds given plugin (not yet snippet) directory to &#xA;     &lt;code&gt;$fpath&lt;/code&gt;. If the second argument is given, it is appended to the directory path. If the option &#xA;     &lt;code&gt;-f&lt;/code&gt;/&#xA;     &lt;code&gt;--front&lt;/code&gt; is given, the directory path is prepended instead of appended to &#xA;     &lt;code&gt;$fpath&lt;/code&gt;. The &#xA;     &lt;code&gt;{plg-spec}&lt;/code&gt; can be absolute path, i.e.: it&#39;s possible to also add regular directories.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;run&lt;/code&gt; &lt;code&gt;[-l]&lt;/code&gt; &lt;code&gt;[plugin]&lt;/code&gt; &lt;code&gt;{command}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div align=&#34;justify&#34; style=&#34;text-align: justify;&#34;&gt;&#xA;     Runs the given command in the given plugin&#39;s directory. If the option &#xA;     &lt;code&gt;-l&lt;/code&gt; will be given then the plugin should be skipped â€“ the option will cause the previous plugin to be reused.&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Updating Zinit and Plugins&lt;a name=&#34;updating-zinit-and-plugins&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;To update Zinit issue &lt;code&gt;zinit self-update&lt;/code&gt; in the command line.&lt;/p&gt; &#xA;&lt;p&gt;To update all plugins and snippets, issue &lt;code&gt;zinit update&lt;/code&gt;. If you wish to update only a single plugin/snippet instead issue &lt;code&gt;zinit update NAME_OF_PLUGIN&lt;/code&gt;. A list of commits will be shown:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/doc/img/update.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Some plugins require performing an action each time they&#39;re updated. One way you can do this is by using the &lt;code&gt;atpull&lt;/code&gt; ice modifier. For example, writing &lt;code&gt;zinit ice atpull&#39;./configure&#39;&lt;/code&gt; before loading a plugin will execute &lt;code&gt;./configure&lt;/code&gt; after a successful update. Refer to &lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/#ice-modifiers&#34;&gt;Ice Modifiers&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;The ice modifiers for any plugin or snippet are stored in their directory in a &lt;code&gt;._zinit&lt;/code&gt; subdirectory, hence the plugin doesn&#39;t have to be loaded to be correctly updated. There&#39;s one other file created there, &lt;code&gt;.zinit_lstupd&lt;/code&gt; â€“ it holds the log of the new commits pulled-in in the last update.&lt;/p&gt; &#xA;&lt;h2&gt;Completions&lt;a name=&#34;completions-2&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Calling &lt;code&gt;compinit&lt;/code&gt; Without Turbo Mode&lt;a name=&#34;calling-compinit-without-turbo-mode&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;With no Turbo mode in use, compinit can be called normally, i.e.: as &lt;code&gt;autoload compinit; compinit&lt;/code&gt;. This should be done after loading of all plugins and before possibly calling &lt;code&gt;zinit cdreplay&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;cdreplay&lt;/code&gt; subcommand is provided to re-play all catched &lt;code&gt;compdef&lt;/code&gt; calls. The &lt;code&gt;compdef&lt;/code&gt; calls are used to define a completion for a command. For example, &lt;code&gt;compdef _git git&lt;/code&gt; defines that the &lt;code&gt;git&lt;/code&gt; command should be completed by a &lt;code&gt;_git&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;compdef&lt;/code&gt; function is provided by &lt;code&gt;compinit&lt;/code&gt; call. As it should be called later, after loading all of the plugins, Zinit provides its own &lt;code&gt;compdef&lt;/code&gt; function that catches (i.e.: records in an array) the arguments of the call, so that the loaded plugins can freely call &lt;code&gt;compdef&lt;/code&gt;. Then, the &lt;code&gt;cdreplay&lt;/code&gt; (&lt;em&gt;compdef-replay&lt;/em&gt;) can be used, after &lt;code&gt;compinit&lt;/code&gt; will be called (and the original &lt;code&gt;compdef&lt;/code&gt; function will become available), to execute all detected &lt;code&gt;compdef&lt;/code&gt; calls. To summarize:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;ZINIT_HOME=&#34;${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git&#34;&#xA;source &#34;${ZINIT_HOME}/zinit.zsh&#34;&#xA;&#xA;zinit load &#34;some/plugin&#34;&#xA;...&#xA;compdef _gnu_generic fd  # this will be intercepted by Zinit, because as the compinit&#xA;                         # isn&#39;t yet loaded, thus there&#39;s no such function `compdef&#39;; yet&#xA;                         # Zinit provides its own `compdef&#39; function which saves the&#xA;                         # completion-definition for later possible re-run with `zinit&#xA;                         # cdreplay&#39; or `zicdreplay&#39; (the second one can be used in hooks&#xA;                         # like atload&#39;&#39;, atinit&#39;&#39;, etc.)&#xA;...&#xA;zinit load &#34;other/plugin&#34;&#xA;&#xA;autoload -Uz compinit&#xA;compinit&#xA;&#xA;# -q is for quiet; actually run all the `compdef&#39;s saved before `compinit` call&#xA;# (`compinit&#39; declares the `compdef&#39; function, so it cannot be used until&#xA;# `compinit&#39; is ran; Zinit solves this via intercepting the `compdef&#39;-calls and&#xA;# storing them for later use with `zinit cdreplay&#39;)&#xA;&#xA;zinit cdreplay -q&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This allows to call compinit once. Performance gains are huge, example shell startup time with double &lt;code&gt;compinit&lt;/code&gt;: &lt;strong&gt;0.980&lt;/strong&gt; sec, with &lt;code&gt;cdreplay&lt;/code&gt; and single &lt;code&gt;compinit&lt;/code&gt;: &lt;strong&gt;0.156&lt;/strong&gt; sec.&lt;/p&gt; &#xA;&lt;h3&gt;Calling &lt;code&gt;compinit&lt;/code&gt; With Turbo Mode&lt;a name=&#34;calling-compinit-with-turbo-mode&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If you load completions using &lt;code&gt;wait&#39;&#39;&lt;/code&gt; Turbo mode then you can add &lt;code&gt;atinit&#39;zicompinit&#39;&lt;/code&gt; to syntax-highlighting plugin (which should be the last one loaded, as their (2 projects, &lt;a href=&#34;https://github.com/zsh-users/zsh-syntax-highlighting&#34;&gt;z-sy-h&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/zdharma-continuum/fast-syntax-highlighting&#34;&gt;f-sy-h&lt;/a&gt;) documentation state), or &lt;code&gt;atload&#39;zicompinit&#39;&lt;/code&gt; to last completion-related plugin. &lt;code&gt;zicompinit&lt;/code&gt; is a function that just runs &lt;code&gt;autoload compinit; compinit&lt;/code&gt;, created for convenience. There&#39;s also &lt;code&gt;zicdreplay&lt;/code&gt; which will replay any caught compdefs so you can also do: &lt;code&gt;atinit&#39;zicompinit; zicdreplay&#39;&lt;/code&gt;, etc. Basically, the whole topic is the same as normal &lt;code&gt;compinit&lt;/code&gt; call, but it is done in &lt;code&gt;atinit&lt;/code&gt; or &lt;code&gt;atload&lt;/code&gt; hook of the last related plugin with use of the helper functions (&lt;code&gt;zicompinit&lt;/code&gt;,&lt;code&gt;zicdreplay&lt;/code&gt; &amp;amp; &lt;code&gt;zicdclear&lt;/code&gt; â€“ see below for explanation of the last one). To summarize:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;ZINIT_HOME=&#34;${XDG_DATA_HOME:-${HOME}/.local/share/zinit}&#34;&#xA;source &#34;${ZINIT_HOME}/zinit.zsh&#34;&#xA;&#xA;# Load using the for-syntax&#xA;zinit lucid wait for \&#xA;  &#34;some/plugin&#34;&#xA;&#xA;zinit lucid wait for \&#xA;  &#34;other/plugin&#34;&#xA;&#xA;zi for \&#xA;    atload&#34;zicompinit; zicdreplay&#34; \&#xA;    blockf \&#xA;    lucid \&#xA;    wait \&#xA;  zsh-users/zsh-completions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ignoring Compdefs&lt;a name=&#34;ignoring-compdefs&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If you want to ignore compdefs provided by some plugins or snippets, place their load commands before commands loading other plugins or snippets, and issue &lt;code&gt;zinit cdclear&lt;/code&gt; (or &lt;code&gt;zicdclear&lt;/code&gt;, designed to be used in hooks like &lt;code&gt;atload&#39;&#39;&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;ZINIT_HOME=&#34;${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git&#34;&#xA;source &#34;${ZINIT_HOME}/zinit.zsh&#34;&#xA;&#xA;zi snippet OMZP::git&#xA;zi cdclear -q # &amp;lt;- forget completions provided by Git plugin&#xA;&#xA;zi load &#34;some/plugin&#34;&#xA;...&#xA;zi load &#34;other/plugin&#34;&#xA;&#xA;autoload -Uz compinit&#xA;compinit&#xA;zi cdreplay -q # &amp;lt;- execute compdefs provided by rest of plugins&#xA;zi cdlist # look at gathered compdefs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;cdreplay&lt;/code&gt; is important if you use plugins like &lt;code&gt;OMZP::kubectl&lt;/code&gt; or &lt;code&gt;asdf-vm/asdf&lt;/code&gt;, because these plugins call &lt;code&gt;compdef&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Disabling System-Wide &lt;code&gt;compinit&lt;/code&gt; Call (Ubuntu)&lt;a name=&#34;disabling-system-wide-compinit-call-ubuntu&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;On Ubuntu users might get surprised that e.g. their completions work while they didn&#39;t call &lt;code&gt;compinit&lt;/code&gt; in their &lt;code&gt;.zshrc&lt;/code&gt;. That&#39;s because the function is being called in &lt;code&gt;/etc/zshrc&lt;/code&gt;. To disable this call â€“ what is needed to avoid the slowdown and if user loads any completion-equipped plugins, i.e. almost on 100% â€“ add the following lines to &lt;code&gt;~/.zshenv&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# Skip the not really helping Ubuntu global compinit&#xA;skip_global_compinit=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Zinit Module&lt;a name=&#34;zinit-module&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The module is now hosted &lt;a href=&#34;https://github.com/zdharma-continuum/zinit-module&#34;&gt;in its own repository&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Hints and Tips&lt;a name=&#34;hints-and-tips&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Customizing Paths&lt;a name=&#34;customizing-paths&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Following variables can be set to custom values, before sourcing Zinit. The previous global variables like &lt;code&gt;$ZPLG_HOME&lt;/code&gt; have been removed to not pollute the namespace â€“ there&#39;s single &lt;code&gt;$ZINIT&lt;/code&gt; hash instead of &lt;code&gt;8&lt;/code&gt; string variables. Please update your dotfiles.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;declare -A ZINIT  # initial Zinit&#39;s hash definition, if configuring before loading Zinit, and then:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Hash Field&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ZINIT[BIN_DIR]&lt;/td&gt; &#xA;   &lt;td&gt;Where Zinit code resides, e.g.: &#34;~/.local/share/zinit/zinit.git&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ZINIT[HOME_DIR]&lt;/td&gt; &#xA;   &lt;td&gt;Where Zinit should create all working directories, e.g.: &#34;~/.local/share/zinit&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ZINIT[MAN_DIR]&lt;/td&gt; &#xA;   &lt;td&gt;Directory where plugins can store their manpages (&lt;code&gt;atclone&#34;cp -vf myplugin.1 $ZINIT[MAN_DIR]/man1&#34;&lt;/code&gt;). If overridden, this directory will not necessarily be used by &lt;code&gt;man&lt;/code&gt; (See #8). Default: &lt;code&gt;$ZPFX/man&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ZINIT[PLUGINS_DIR]&lt;/td&gt; &#xA;   &lt;td&gt;Override single working directory â€“ for plugins, e.g. &#34;/opt/zsh/zinit/plugins&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ZINIT[COMPLETIONS_DIR]&lt;/td&gt; &#xA;   &lt;td&gt;As above, but for completion files, e.g. &#34;/opt/zsh/zinit/root_completions&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ZINIT[SNIPPETS_DIR]&lt;/td&gt; &#xA;   &lt;td&gt;As above, but for snippets&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ZINIT[LIST_COMMAND]&lt;/td&gt; &#xA;   &lt;td&gt;Command to use for displaying a directory tree (e.g., &lt;code&gt;ls --tree&lt;/code&gt;, &lt;code&gt;tree&lt;/code&gt;, etc.)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ZINIT[ZCOMPDUMP_PATH]&lt;/td&gt; &#xA;   &lt;td&gt;Path to &lt;code&gt;.zcompdump&lt;/code&gt; file, with the file included (i.e. its name can be different)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ZINIT[COMPINIT_OPTS]&lt;/td&gt; &#xA;   &lt;td&gt;Options for &lt;code&gt;compinit&lt;/code&gt; call (i.e. done by &lt;code&gt;zicompinit&lt;/code&gt;), use to pass -C to speed up loading&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ZINIT[MUTE_WARNINGS]&lt;/td&gt; &#xA;   &lt;td&gt;If set to &lt;code&gt;1&lt;/code&gt;, then mutes some of the Zinit warnings, specifically the &lt;code&gt;plugin already registered&lt;/code&gt; warning&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ZINIT[OPTIMIZE_OUT_DISK_ACCESSES]&lt;/td&gt; &#xA;   &lt;td&gt;If set to &lt;code&gt;1&lt;/code&gt;, then Zinit will skip checking if a Turbo-loaded object exists on the disk. By default Zinit skips Turbo for non-existing objects (plugins or snippets) to install them before the first prompt â€“ without any delays, during the normal processing of &lt;code&gt;zshrc&lt;/code&gt;. This option can give a performance gain of about 10 ms out of 150 ms (i.e.: Zsh will start up in 140 ms instead of 150 ms).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;There is also &lt;code&gt;$ZPFX&lt;/code&gt;, set by default to &lt;code&gt;~/.local/share/zinit/polaris&lt;/code&gt; â€“ a directory where software with &lt;code&gt;Makefile&lt;/code&gt;, etc. can be pointed to, by e.g. &lt;code&gt;atclone&#39;./configure --prefix=$ZPFX&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Non-GitHub (Local) Plugins&lt;a name=&#34;non-github-local-plugins&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;create&lt;/code&gt; subcommand with user name &lt;code&gt;_local&lt;/code&gt; (the default) to create plugin&#39;s skeleton in &lt;code&gt;$ZINIT[PLUGINS_DIR]&lt;/code&gt;. It will be not connected with GitHub repository (because of user name being &lt;code&gt;_local&lt;/code&gt;). To enter the plugin&#39;s directory use &lt;code&gt;cd&lt;/code&gt; command with just plugin&#39;s name (without &lt;code&gt;_local&lt;/code&gt;, it&#39;s optional).&lt;/p&gt; &#xA;&lt;p&gt;If user name will not be &lt;code&gt;_local&lt;/code&gt;, then Zinit will create repository also on GitHub and setup correct repository origin.&lt;/p&gt; &#xA;&lt;h3&gt;Extending Git&lt;a name=&#34;extending-git&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;There are several projects that provide git extensions. Installing them with Zinit has many benefits:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;all files are under &lt;code&gt;$HOME&lt;/code&gt; â€“ no administrator rights needed,&lt;/li&gt; &#xA; &lt;li&gt;declarative setup (like Chef or Puppet) â€“ copying &lt;code&gt;.zshrc&lt;/code&gt; to different account brings also git-related setup,&lt;/li&gt; &#xA; &lt;li&gt;easy update by e.g. &lt;code&gt;zinit update --all&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Below is a configuration that adds multiple git extensions, loaded in Turbo mode, 1 second after prompt, with use of the &lt;a href=&#34;https://github.com/zdharma-continuum/zinit-annex-bin-gem-node&#34;&gt;Bin-Gem-Node&lt;/a&gt; annex:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;zi as&#39;null&#39; lucid sbin wait&#39;1&#39; for \&#xA;  Fakerr/git-recall \&#xA;  davidosomething/git-my \&#xA;  iwata/git-now \&#xA;  paulirish/git-open \&#xA;  paulirish/git-recent \&#xA;    atload&#39;export _MENU_THEME=legacy&#39; \&#xA;  arzzen/git-quick-stats \&#xA;    make&#39;install&#39; \&#xA;  tj/git-extras \&#xA;    make&#39;GITURL_NO_CGITURL=1&#39; \&#xA;    sbin&#39;git-url;git-guclone&#39; \&#xA;  zdharma-continuum/git-url&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Target directory for installed files is &lt;code&gt;$ZPFX&lt;/code&gt; (&lt;code&gt;~/.local/share/zinit/polaris&lt;/code&gt; by default).&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;a name=&#34;changelog&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Link to the &lt;a href=&#34;https://raw.githubusercontent.com/zdharma-continuum/zinit/main/doc/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;a name=&#34;support&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Zinit is a personal, free-time project with no funding and a huge &lt;a href=&#34;https://github.com/zdharma-continuum/zinit/issues&#34;&gt;feature request backlog&lt;/a&gt;. If you love it, consider supporting its development via GitHub Sponsors [pending]. Any help counts!&lt;/p&gt; &#xA;&lt;h2&gt;Getting Help and Community&lt;a name=&#34;getting-help-and-community&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Do you need help or wish to get in touch with other Zinit users?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/zdharma-continuum/zinit/discussions&#34;&gt;Open a discussion&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Or via reach out via Gitter &lt;a href=&#34;https://gitter.im/zdharma-continuum/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/zdharma-continuum/zinit.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/zdharma-continuum/community&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>toolboc/psx-pi-smbshare</title>
    <updated>2022-10-17T01:38:25Z</updated>
    <id>tag:github.com,2022-10-17:/toolboc/psx-pi-smbshare</id>
    <link href="https://github.com/toolboc/psx-pi-smbshare" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A swiss army knife for enhancing classic game consoles with Raspberry Pi&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;psx-pi-smbshare&lt;/h1&gt; &#xA;&lt;p&gt;psx-pi-smbshare began with the intent of allowing SMB sharing to Multiman and Open Playstation Loader from a Raspberry Pi. It has evolved into a Pi-based swiss army knife for enhancing classic game consoles.&lt;/p&gt; &#xA;&lt;p&gt;You can see it in action in this video from &lt;a href=&#34;https://github.com/versatileninja&#34;&gt;@versatileninja&lt;/a&gt; which walks through the setup process and demonstrates how to use it:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Ilx5NYoUkNA&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/Ilx5NYoUkNA/0.jpg&#34; alt=&#34;Play PS2 Games Over SMB Using Raspberry Pi 3b+ and psx-pi-smbshare (2019)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Upgrading an existing install&lt;/h2&gt; &#xA;&lt;p&gt;The following commands can be used to upgrade an existing psx-pi-smbshare device. These instructions can also be used to convert an unsupported device into a psx-pi-smbshare (for example &lt;a href=&#34;https://github.com/toolboc/psx-pi-smbshare/issues/10&#34;&gt;Raspberry Pi4&lt;/a&gt; and potentially other devices running a debian based OS with an accessible ethernet port).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ~&#xA;wget -O setup.sh https://raw.githubusercontent.com/toolboc/psx-pi-smbshare/master/setup.sh&#xA;chmod 755 setup.sh&#xA;sudo ./setup.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;psx-pi-smbshare is a preconfigured Raspbian based image for Raspberry Pi 1, 2, 3 and &lt;a href=&#34;https://www.youtube.com/watch?v=8qaJcbSye-E&#34;&gt;4&lt;/a&gt;. It runs a &lt;a href=&#34;https://en.wikipedia.org/wiki/Samba_(software)&#34;&gt;Samba&lt;/a&gt; share, a pi-compatible build of &lt;a href=&#34;https://github.com/dirkvdb/ps3netsrv--&#34;&gt;ps3netsrv&lt;/a&gt;, and reconfigures the ethernet port to act as a router. This gives low-latency, direct access to the Samba service through an ethernet cable connection between a PS2/PS3 and Raspberry Pi. This configuration is achieved by running &lt;a href=&#34;https://raw.githubusercontent.com/toolboc/psx-pi-smbshare/master/setup.sh&#34;&gt;setup.sh&lt;/a&gt;. A pre-supplied &lt;a href=&#34;https://github.com/toolboc/psx-pi-smbshare/releases/&#34;&gt;image&lt;/a&gt; can be applied directly to a Micro-SD card using something like &lt;a href=&#34;https://etcher.io/&#34;&gt;etcher.io&lt;/a&gt;. The image allows you to use the full available space on the SD card after the OS is first booted.&lt;/p&gt; &#xA;&lt;p&gt;An &lt;a href=&#34;http://www.teamxlink.co.uk/&#34;&gt;Xlink Kai&lt;/a&gt; client is also included and accessible on the device at &lt;a href=&#34;http://smbshare:34522/&#34;&gt;http://smbshare:34522/&lt;/a&gt;. This allows for multi-player gaming over extended LAN. The service is possible to use on a variety of devices including PS2, PS3, PS4, Xbox, Xbox 360, Xbox One, Gamecube, Switch, Wii, Wii U (and PSP). Just connect an ethernet cable to your game console and access the Xlink Kai Service over Wi-Fi with a smart phone, tablet, or computer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2018336/102703167-08004c00-4231-11eb-931d-3046ccd117ac.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What you can do with it&lt;/h2&gt; &#xA;&lt;p&gt;psx-pi-smbshare works out of the box on PS3 with &lt;a href=&#34;http://www.psx-place.com/threads/update2-multiman-v-04-81-00-01-02-base-update-stealth-for-cex-dex-updates-by-deank.12145/&#34;&gt;MultiMAN&lt;/a&gt;. This functionality allows you to stream and backup up various games and media to the Samba share service running on the Raspberry Pi.&lt;/p&gt; &#xA;&lt;p&gt;psx-pi-smbshare also works out of the box on PS2 with &lt;a href=&#34;https://github.com/ifcaro/Open-PS2-Loader&#34;&gt;Open Playstation Loader&lt;/a&gt; and supports streaming of PS2 backups located on the Samba share service. It can also work with &lt;a href=&#34;https://bitbucket.org/ShaolinAssassin/popstarter-documentation-stuff/wiki/smb-mode&#34;&gt;POPStarter for SMB&lt;/a&gt; to allow streaming of PS1 games from Open Playstation Loader.&lt;/p&gt; &#xA;&lt;p&gt;psx-pi-smbshare supports an ability to route traffic from the ethernet port through a wireless network connection to the outside world. With this configuration, the XLink Kai Service can be used on pretty much any device with an ethernet port. This includes Xbox, Xbox 360, PS2, PS3, and Gamecube. There is also support for Ad-Hoc multiplayer on PSP using XLink Kai.&lt;/p&gt; &#xA;&lt;h1&gt;Quickstart&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Prerequisites&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Raspberry Pi 1, 2, or 3&lt;/li&gt; &#xA; &lt;li&gt;Micro-SD Card (8GB+ suggested)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A detailed &lt;a href=&#34;https://www.youtube.com/watch?time_continue=1&amp;amp;v=Ilx5NYoUkNA&#34;&gt;video guide&lt;/a&gt; is provided by Project Phoenix Media which walks through the processes described below.&lt;/p&gt; &#xA;&lt;h2&gt;Flash the image&lt;/h2&gt; &#xA;&lt;p&gt;Download the latest &lt;a href=&#34;https://github.com/toolboc/psx-pi-smbshare/releases/&#34;&gt;psx-pi-smbshare release image&lt;/a&gt; and burn it to a Micro-SD card with &lt;a href=&#34;http://etcher.io&#34;&gt;etcher.io&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Configuring Wireless Network&lt;/h2&gt; &#xA;&lt;p&gt;If you wish to configure the wireless network on a Raspberry Pi 2 or 3, you need to add a file to &lt;strong&gt;/boot&lt;/strong&gt; on the Micro-SD card.&lt;/p&gt; &#xA;&lt;p&gt;Create a file on &lt;strong&gt;/boot&lt;/strong&gt; named &lt;strong&gt;wpa_supplicant.conf&lt;/strong&gt; and supply the following (change country to a &lt;a href=&#34;https://en.wikipedia.org/wiki/ISO_3166-1&#34;&gt;valid 2 letter code&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev&#xA;update_config=1&#xA;country=US&#xA;&#xA;network={&#xA;        ssid=&#34;&amp;lt;SSID&amp;gt;&#34;&#xA;        psk=&#34;&amp;lt;PASSWORD&amp;gt;&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the pi is next booted, it will attempt to connect to the wireless network in this configuration. You are then able to access the raspberry pi on the network and allow for outbound connections from a PS2/PS3 over the wireless network.&lt;br&gt; The raspberry pi is configured to have a hostname &lt;code&gt;smbshare&lt;/code&gt; with a user &lt;code&gt;pi&lt;/code&gt; and a password of &lt;code&gt;raspberry&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Disable DHCP server on Raspberry Pi&lt;/h2&gt; &#xA;&lt;p&gt;The default behavior of psx-pi-smbshare is to enable a console-to-pi connection by means of the high speed ethernet port available on many video game consoles. This connection is used to provide a direct access from the console to the services on the pi (WiFi, XLinkKai, SMB, ps3netsrv etc), and by default, a DHCP server runs on the ethernet interface (eth0) to facilitate this. The following steps will describe how to disable this mechanism and is not recommended for typical users. Please be aware that disabling the DHCP server will produce a side-effect of &lt;a href=&#34;https://github.com/toolboc/psx-pi-smbshare/issues/22#issuecomment-667469343&#34;&gt;no longer being able to directly connect your video game console to the pi via the ethernet interface&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In some use cases, the user may wish to connect the Raspberry Pi via ethernet to an external router (for example: &lt;a href=&#34;https://github.com/toolboc/psx-pi-smbshare/issues/21&#34;&gt;to have psx-pi-smbshare act as an XLinkKai server for primarily PSP games&lt;/a&gt;). To disable the DHCP server that would usually run automatically on this interface, &lt;a href=&#34;https://www.raspberrypi.org/documentation/remote-access/ssh/&#34;&gt;ssh into your device&lt;/a&gt; and execute the following command to modify the startup scripts that run at boot time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;crontab -e&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, find and comment the line containing &lt;code&gt;@reboot sudo bash /home/pi/wifi-to-eth-route.sh&lt;/code&gt; by adding a &#39;#&#39; as shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#@reboot sudo bash /home/pi/wifi-to-eth-route.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Accessing the XLink Kai Service&lt;/h2&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;http://smbshare:34522/&#34;&gt;http://smbshare:34522/&lt;/a&gt; or http://&amp;lt;YOUR_PSX_PI_SMBSHARE_DEVICE_IP&amp;gt;:34522/&lt;/p&gt; &#xA;&lt;h2&gt;Accessing the SMB Share&lt;/h2&gt; &#xA;&lt;p&gt;With a wireless network configured, you should be able to access the SMB share by visiting &lt;code&gt;\\SMBSHARE\share&lt;/code&gt; on windows or &lt;code&gt;smb://smbshare/share&lt;/code&gt; on Mac / Linux.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/toolboc/psx-pi-smbshare/master/Assets/smbshare.PNG&#34; alt=&#34;Accessing SMB&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The share is preconfigured with a folder structure to accomodate ps3netsrv and Open Playstation Loader expected file paths.&lt;/p&gt; &#xA;&lt;h2&gt;Accessing USB drive(s) on the SMB Share&lt;/h2&gt; &#xA;&lt;p&gt;Plug and play auto-sharing of USB storage devices over SMB is supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;USB Drives are automounted to the /media/&#xA;   &lt;partition&gt;&#xA;     directory&#xA;   &lt;/partition&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When a USB drive is plugged in, the USB Drive becomes available on the SMB Share @ &lt;code&gt;\\SMBSHARE\share&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When a USB drive is removed, the device falls back to sharing the Micro-SD card @ &lt;code&gt;\\SMBSHARE\share&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Note that some USB drives (particularly larger enclosure types) may require use of a powered USB Hub to supply adequate current to the device&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Forwarding Active FTP session to a connected device&lt;/h2&gt; &#xA;&lt;p&gt;Assuming your console / device has an ip of 192.168.2.2, you may run the following script to forward an Active FTP session:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    sudo iptables -t nat -A PREROUTING -p tcp --dport 21 -j DNAT --to-destination 192.168.2.2:21&#xA;    sudo modprobe ip_nat_ftp ports=21&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you wish to permanently enable FTP forwarding, it is suggested to set a static ip of 192.168.2.2 on your console(s) when used with psx-pi-smbshare and modify &#34;wifi-to-eth-route.sh&#34; in the home directory of the pi to run the commands above by adding them directly before:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sudo sh -c &#34;echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward&#34; &lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will ensure that Active FTP sessions are forwarded automatically at startup.&lt;/p&gt; &#xA;&lt;p&gt;After you enable forwarding of Active FTP sessions to your console, it is suggested to use &lt;a href=&#34;https://filezilla-project.org/download.php?type=client&#34;&gt;Filezilla&lt;/a&gt; to connect to your console via &#34;File =&amp;gt; Site Manager =&amp;gt; New Site&#34; and connecting with the following settings:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/toolboc/psx-pi-smbshare/master/Assets/FilezillaSettings.png&#34; alt=&#34;Accessing SMB&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/toolboc/psx-pi-smbshare/master/Assets/FilezillaActiveFTPMode.png&#34; alt=&#34;Accessing SMB&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This configuration will forward all ftp requests made to the host ip of the psx-pi-smbshare device to the internal ip assigned to the connected console. If using another FTP client, it is very important that it is configured to connect using an Active FTP transfer mode.&lt;/p&gt; &#xA;&lt;h2&gt;Configuring for use with MultiMAN on PS3&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Prerequisites&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Playstation 3 running a &lt;a href=&#34;http://store.brewology.com/ahomebrew.php?brewid=24&#34;&gt;recent release of MultiMAN&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Steps&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Connect the pi ethernet port into the ethernet port of the PS3 and power the pi using the PS3 usb or an external power supply&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the PS3 XMB select &#34;Settings&#34; =&amp;gt; &#34;Network Settings&#34; =&amp;gt; &#34;Internet Connection Settings&#34; and configure to connect using the ethernet connection as follows:&lt;/p&gt; &lt;p&gt;&#34;Internet Connection Settings&#34; =&amp;gt; &#34;Custom&#34; =&amp;gt; &#34;Wired&#34; =&amp;gt; &#34;Auto-Detect&#34; =&amp;gt; &#34;Manual&#34;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;     IP Address = 192.168.2.2&#xA;     Subnet Mask = 255.255.255.0&#xA;     Default Router = 192.168.2.1&#xA;     Primary DNS = 8.8.8.8&#xA;     Secondary DNS = &amp;lt;leave blank or use your home router ip address&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&#34;Automatic&#34; =&amp;gt; &#34;Do Not Use&#34; =&amp;gt; &#34;Enable&#34;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Launch MultiMAN&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select &#34;Settings&#34; =&amp;gt; &#34;Network Servers&#34;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure using the Ip Address &#39;192.168.2.1&#39; (ip to the smbshare assigned by dhcp server running on the Pi) and Port &#39;38008&#39; (default)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You should see new section for the network server under &#39;Photos&#39; / &#39;Music&#39; / &#39;Video&#39; / &#39;Retro&#39; and a new location to copy games to when using copy ISO in the &#39;Games&#39; menu.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;PS3 Games backed up to the network server can be found and loaded from the &#34;Games&#34; menu in MultiMAN. PS1, PS2, and PSP games can be found and loaded from &#34;Retro&#34; =&amp;gt; &#34;PSONE&#34; &#34;PS2&#34; OR &#34;PSP&#34;&lt;br&gt; PS2 backups must be loaded from the HDD but can be copied directly to the SMB server.&lt;/p&gt; &#xA;&lt;h2&gt;Configuring for use with Open Playstation Loader&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Prerequisites&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Playstation 2 fat or slim running a &lt;a href=&#34;http://www.ps2-home.com/forum/viewtopic.php?p=29251#p29251&#34;&gt;recent release of Open Playstation Loader&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Steps&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Connect the pi ethernet port into the ethernet port of the PS2 and power the pi using the PS2 usb or an external power supply&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Boot Open Playstation Loader and select &#34;Settings&#34; =&amp;gt; &#34;Network Config&#34;.&lt;br&gt; Ensure that the following options are set:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; Ethernet Link Mode = Auto&#xA; PS2 &#xA;     IP address type = Static&#xA;     IP address = 192.168.2.2&#xA;     Mask = 255.255.255.0&#xA;     Gateway = 192.168.2.1&#xA;     DNS Server = 8.8.8.8&#xA; SMB Server&#xA;     Address Type = IP&#xA;     Address = 192.168.2.1&#xA;     Port = 445&#xA;     Share = share&#xA;     Password = &amp;lt;not set&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/toolboc/psx-pi-smbshare/master/Assets/PS2-OPL-settings.png&#34; alt=&#34;PS2 OPL Settings&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Don&#39;t forget to select &#34;Save Config&#34; when you return to &#34;Settings&#34;&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Reconnect or restart Open Playstation Loader&lt;/li&gt; &#xA; &lt;li&gt;PS2 Games will be listed under &#34;ETH Games&#34;. To add PS2 games, copy valid .iso backups to &lt;code&gt;\\SMBSHARE\share\DVD&lt;/code&gt; or &lt;code&gt;\\SMBSHARE\share\CD&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Configuring for use with POPSLoader on Open Playstation Loader&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Prerequisites&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ensure that you have successfully followed the steps above for &#34;Configuring for use with Open Playstation Loader&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Steps&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the &lt;a href=&#34;https://bitbucket.org/ShaolinAssassin/popstarter-documentation-stuff/downloads/network_modules.7z&#34;&gt;ps2 network modules&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Extract the POPSTARTER folder&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Modify IPCONFIG.DAT to:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; 192.168.2.2 255.255.255.0 192.168.2.1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Modify SMBCONFIG.DATA to:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; 192.168.2.1 share&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy the POPSTARTER folder to your memory card&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Hop on the internet and look for a copy of a file named &#34;POPS_IOX.PAK&#34; with md5sum &#34;a625d0b3036823cdbf04a3c0e1648901&#34; and copy it to &lt;code&gt;\\SMBSHARE\share\POPS&lt;/code&gt;. This file is not included for &#34;reasons&#34;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;PS1 backups must be converted to .VCD and run through a special renaming program in order to show up in OPL.&lt;/p&gt; &lt;p&gt;To convert .bin + .cue backups, you can use the included &#34;CUE2POP_2_3.EXE&#34; located in &lt;code&gt;\\SMBSHARE\share\POPS\CUE2POPS v2.3&lt;/code&gt; Copy your .VCD backups to &lt;code&gt;\\SMBSHARE\share\POPS&lt;/code&gt; then run &lt;code&gt;\\SMBSHARE\share\POPS\OPLM\OPL_Manager.exe&lt;/code&gt; to rename your files appropriately.&lt;/p&gt; &lt;p&gt;Once converted and properly renamed, your games will show up under the &#34;PS1 Games&#34; section of OPL&lt;/p&gt; &lt;p&gt;A detailed guide is available @ &lt;a href=&#34;http://www.ps2-home.com/forum/viewtopic.php?f=64&amp;amp;t=5002&#34;&gt;http://www.ps2-home.com/forum/viewtopic.php?f=64&amp;amp;t=5002&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Playing LAN enabled Nintendo Switch games online with Xlink Kai on Nintendo Switch&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Prerequisites&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A Nintendo Switch&lt;/li&gt; &#xA; &lt;li&gt;A LAN compatible Switch game&lt;/li&gt; &#xA; &lt;li&gt;An Xlink Kai account from &lt;a href=&#34;http://www.teamxlink.co.uk/&#34;&gt;http://www.teamxlink.co.uk/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Steps&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Burn the &lt;a href=&#34;https://github.com/toolboc/psx-pi-smbshare/releases&#34;&gt;latest psx-pi-smbshare image&lt;/a&gt; to a Micro-SD card&lt;/li&gt; &#xA; &lt;li&gt;Configure Wi-fi per the steps above in &lt;a href=&#34;https://github.com/toolboc/psx-pi-smbshare#configuring-wireless-network&#34;&gt;&#34;Configuring the Wireless Network&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add a second Wi-fi dongle to the pi as described in &lt;a href=&#34;https://github.com/toolboc/psx-pi-smbshare#using-a-second-wifi-interface-as-an-access-point-to-xlink-kai&#34;&gt;Using a second wifi interface as an access point to Xlink Kai&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Configure your Switch to connect to the &#34;XlinkKai&#34; access point and set the &lt;code&gt;DNS Settings&lt;/code&gt; to manual and set the &lt;code&gt;Primary DNS&lt;/code&gt; to 10.254.0.1 and ensure that &lt;code&gt;Autoconnect&lt;/code&gt; is set to &#34;on&#34; as described in the &lt;a href=&#34;https://www.teamxlink.co.uk/forum/viewtopic.php?p=240498&#34;&gt;XlinkKai Nintendo Switch Tutorial&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Vist the Xlink Kai service running on the pi @ &lt;a href=&#34;http://smbshare:34522&#34;&gt;http://smbshare:34522&lt;/a&gt; or http://&amp;lt;YOUR_PSX_PI_SMBSHARE_DEVICE_IP&amp;gt;:34522/ and login with your Xlink Kai account&lt;/li&gt; &#xA; &lt;li&gt;In the Xlink Kai portal, select &lt;code&gt;Configuration&lt;/code&gt; and ensure that &lt;code&gt;Network Adapter&lt;/code&gt; is set to to &lt;code&gt;wlan1&lt;/code&gt; to ensure that XlinkKai captures packets from the proper wireless interface.&lt;/li&gt; &#xA; &lt;li&gt;In the Xlink Kai portal , select &lt;code&gt;Game Arenas&lt;/code&gt; and navigate to the room for the game that you wish to play&lt;/li&gt; &#xA; &lt;li&gt;Launch the game on your Switch and start up LAN mode and create a LAN game (Do not confuse with Local Wireless, many games involve a special keypress combination to enable LAN mode, please research accordingly). If asked to connect to a network during this process, select the &#34;XlinkKai&#34; SSID that is being served from the raspberry pi.&lt;/li&gt; &#xA; &lt;li&gt;Wait for players to join and have fun!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Playing Halo 2 online with Xlink Kai on Xbox&lt;/h2&gt; &#xA;&lt;h3&gt;Video Demonstration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=3m1nWdHbVOI&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/3m1nWdHbVOI/0.jpg&#34; alt=&#34;Halo 2 XLink Kai Raspberry Pi Wireless Gameplay&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Prerequisites&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An original Xbox or Xbox 360 with backwards compatibility support&lt;/li&gt; &#xA; &lt;li&gt;A copy of Halo 2&lt;/li&gt; &#xA; &lt;li&gt;An Xlink Kai account from &lt;a href=&#34;http://www.teamxlink.co.uk/&#34;&gt;http://www.teamxlink.co.uk/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Steps&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Burn the &lt;a href=&#34;https://github.com/toolboc/psx-pi-smbshare/releases&#34;&gt;latest psx-pi-smbshare image&lt;/a&gt; to a Micro-SD card&lt;/li&gt; &#xA; &lt;li&gt;Configure Wi-fi per the steps above in &lt;a href=&#34;https://github.com/toolboc/psx-pi-smbshare#configuring-wireless-network&#34;&gt;&#34;Configuring the Wireless Network&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Plug the pi into the Xbox ethernet port and verify that you are able to obtain an ip automatically in Network Settings&lt;/li&gt; &#xA; &lt;li&gt;Vist the Xlink Kai service running on the pi @ &lt;a href=&#34;http://smbshare:34522&#34;&gt;http://smbshare:34522&lt;/a&gt; or http://&amp;lt;YOUR_PSX_PI_SMBSHARE_DEVICE_IP&amp;gt;:34522/ and login with your Xlink Kai account&lt;/li&gt; &#xA; &lt;li&gt;Select an available Halo game from the Xlink Kai portal (there are usually a few running in South America)&lt;/li&gt; &#xA; &lt;li&gt;Launch Halo 2 and select &#34;System Link&#34;&lt;/li&gt; &#xA; &lt;li&gt;Join a game and have fun!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Playing SOCOM 2 online with Xlink Kai on PS2&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Prerequisites&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A Fat PS2 with Network Adapter or Slim PS2&lt;/li&gt; &#xA; &lt;li&gt;A copy of SOCOM 2 for PS2&lt;/li&gt; &#xA; &lt;li&gt;An Xlink Kai account from &lt;a href=&#34;http://www.teamxlink.co.uk/&#34;&gt;http://www.teamxlink.co.uk/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Steps&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Burn the &lt;a href=&#34;https://github.com/toolboc/psx-pi-smbshare/releases&#34;&gt;latest psx-pi-smbshare image&lt;/a&gt; to a Micro-SD card&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure Wi-fi per the steps above in &lt;a href=&#34;https://github.com/toolboc/psx-pi-smbshare#configuring-wireless-network&#34;&gt;&#34;Configuring the Wireless Network&#34;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Plug the pi into the PS2 ethernet port&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The following setup needs to be performed one time: Boot your PS2 up with SOCOM 2 and select &#34;Online&#34; at the title screen. Once you hit the first blue screen hit edit network configuration to be sent to the network setup. Now delete any old network settings and create a new one. Using Automatic settings is fine but you may wish to set the following manual settings if you have issues:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; Console IP: 192.168.2.2&#xA; Subnet Mask: 255.255.255.0&#xA; Router IP/Gateway: 192.168.2.1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Vist the Xlink Kai service running on the pi @ &lt;a href=&#34;http://smbshare:34522&#34;&gt;http://smbshare:34522&lt;/a&gt; or http://&amp;lt;YOUR_PSX_PI_SMBSHARE_DEVICE_IP&amp;gt;:34522/ and login with your Xlink Kai account&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select an available SOCOM 2 game from the Xlink Kai portal (there is usually one running at all times)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Head back to the SOCOM 2 title screen and select &#34;LAN&#34;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Join a game and have fun!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Using a Second WiFi interface as an Access Point to Xlink Kai&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Prerequisites&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;1 external wifi dongle for RPi 2/3 or 2 external wifi dongles for RPi 1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Steps&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Burn the &lt;a href=&#34;https://github.com/toolboc/psx-pi-smbshare/releases&#34;&gt;latest psx-pi-smbshare image&lt;/a&gt; to a Micro-SD card&lt;/li&gt; &#xA; &lt;li&gt;Plug in the external wifi dongle(s)&lt;/li&gt; &#xA; &lt;li&gt;Configure Wi-fi per the steps above in &lt;a href=&#34;https://github.com/toolboc/psx-pi-smbshare#configuring-wireless-network&#34;&gt;&#34;Configuring the Wireless Network&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Configure the device to connect to &#34;XlinkKai&#34; SSID when the pi has booted using Password &lt;code&gt;XlinkKai&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note: XlinkKai will only work on one network interface (wifi or ethernet) at a time and will lock onto the first interface connected to from a compatible device until reboot&lt;/p&gt; &#xA;&lt;h2&gt;Playing PSP games online with Xlink Kai on PSP&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Prerequisites&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A wifi capable PSP&lt;/li&gt; &#xA; &lt;li&gt;1 external wifi dongle for RPi 2/3 or 2 external wifi dongles for RPi 1 (&lt;em&gt;tested with an &lt;a href=&#34;https://www.amazon.com/Edimax-EW-7811Un-150Mbps-Raspberry-Supports/dp/B003MTTJOY&#34;&gt;Edimax-EW-7811Un&lt;/a&gt; wifi dongle&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;A Multiplayer game which supports Ad-Hoc&lt;/li&gt; &#xA; &lt;li&gt;An Xlink Kai account from &lt;a href=&#34;http://www.teamxlink.co.uk/&#34;&gt;http://www.teamxlink.co.uk/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Steps&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Burn the &lt;a href=&#34;https://github.com/toolboc/psx-pi-smbshare/releases&#34;&gt;latest psx-pi-smbshare image&lt;/a&gt; to a Micro-SD card&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure Wi-fi per the steps above in &lt;a href=&#34;https://github.com/toolboc/psx-pi-smbshare#configuring-wireless-network&#34;&gt;&#34;Configuring the Wireless Network&#34;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;SSH to you psx-pi-smbshare instance using the default username &lt;code&gt;pi&lt;/code&gt; and default password &lt;code&gt;raspberry&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensure that your PSP is set to Automatic in Network Settings under Ad Hoc Mode&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the following commands to disable the hostapd access point and enable Ad-Hoc Wifi:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; sudo service hostapd stop&#xA; sudo iw wlan1 set type ibss&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start an Ad-Hoc multiplayer session from a game on the PSP&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the follwoing command&lt;/p&gt; &lt;pre&gt;&lt;code&gt; sudo iw wlan1 scan | grep PSP_ -B 5&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You will receive an output similar to:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; freq: 2462&#xA; beacon interval: 100 TUs&#xA; capability: IBSS ShortPreamble (0x0022)&#xA; signal: -42.00 dBm&#xA; last seen: 0 ms ago&#xA; SSID: PSP_S000000001_L_GameShar&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Take note of the frequency and SSID&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Using the information in the previous step, execute the following while the multiplayer session is waiting:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; sudo iw wlan1 ibss join &amp;lt;SSID&amp;gt; &amp;lt;frequency&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Ex: sudo iw wlan1 ibss join PSP_S000000001_L_GameShar 2462&lt;/p&gt; &lt;p&gt;If you receive &#34;Operation not supported (-95)&#34; then your wifi adapter may not be compatible&lt;/p&gt; &lt;p&gt;Once you know this command, you can re-use the following script at any time to enable PSP Ad-Hoc mode:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; sudo service hostapd stop&#xA; sudo iw wlan1 set type ibss&#xA; sudo iw wlan1 ibss join &amp;lt;SSID&amp;gt; &amp;lt;frequency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note: You must run this script after starting an Ad-Hoc multiplayer session on the PSP&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Exit the Ad-Hoc multiplayer session and start a new one&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Vist the Xlink Kai service running @ &lt;a href=&#34;http://smbshare:34522&#34;&gt;http://smbshare:34522&lt;/a&gt; or http://&amp;lt;YOUR_PSX_PI_SMBSHARE_DEVICE_IP&amp;gt;:34522/ and login with your Xlink Kai account&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select &#34;Metrics&#34; and scroll down to &#34;Found Consoles&#34; and you should see your PSP device&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select an available PSP game from the Xlink Kai portal&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Join a game and have fun!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Playing Mario Kart Double Dash online with Xlink Kai on Gamecube&lt;/h2&gt; &#xA;&lt;h3&gt;Video Demonstration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=pa-AM05EwQ4&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/pa-AM05EwQ4/0.jpg&#34; alt=&#34;GameCube online with psx-pi-smbshare&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;See this &lt;a href=&#34;https://nintendoduo.tumblr.com/post/185437788676/how-to-take-your-gamecube-online-with-a-raspberry&#34;&gt;article on the NintendoDuo Tumblr page&lt;/a&gt; for a detailed guide on &#34;How to Take Your GameCube Online With a Raspberry Pi and psx-pi-smbshare&#34;.&lt;/p&gt; &#xA;&lt;h1&gt;Demos&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=FJEdWW6YhJo&amp;amp;feature=youtu.be&#34;&gt;Launching PS2 Backups with OPL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/qCiezaKglMs&#34;&gt;Launching PS1 Backups with POPSLoader&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;p&gt;Thx to the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Jay-Jay for &lt;a href=&#34;https://github.com/Jay-Jay-OPL/OPL-Daily-Builds&#34;&gt;OPL Daily Builds&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;danielb for &lt;a href=&#34;http://www.ps2-home.com/forum/viewtopic.php?f=64&amp;amp;t=189&#34;&gt;OPLM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;dirkvdb for &lt;a href=&#34;https://github.com/dirkvdb/ps3netsrv--&#34;&gt;ps3netsrv--&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;arpitjindal97 for &lt;a href=&#34;https://github.com/arpitjindal97/raspbian-recipes/raw/master/wifi-to-eth-route.sh&#34;&gt;wifi-to-eth-route.sh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Team Xlink for &lt;a href=&#34;http://www.teamxlink.co.uk/&#34;&gt;Xlink Kai&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pul Gasari for &lt;a href=&#34;https://www.youtube.com/watch?v=FJEdWW6YhJo&amp;amp;feature=youtu.be&#34;&gt;Testing streaming games from Raspberry Pi to PS2 using psx-pi-smbshare&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>big-data-europe/docker-hadoop</title>
    <updated>2022-10-17T01:38:25Z</updated>
    <id>tag:github.com,2022-10-17:/big-data-europe/docker-hadoop</id>
    <link href="https://github.com/big-data-europe/docker-hadoop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apache Hadoop docker image&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://gitter.im/big-data-europe/Lobby&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/gitterHQ/gitter.png&#34; alt=&#34;Gitter chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Changes&lt;/h1&gt; &#xA;&lt;p&gt;Version 2.0.0 introduces uses wait_for_it script for the cluster startup&lt;/p&gt; &#xA;&lt;h1&gt;Hadoop Docker&lt;/h1&gt; &#xA;&lt;h2&gt;Supported Hadoop Versions&lt;/h2&gt; &#xA;&lt;p&gt;See repository branches for supported hadoop versions&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;To deploy an example HDFS cluster, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run example wordcount job:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  make wordcount&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or deploy in swarm:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker stack deploy -c docker-compose-v3.yml hadoop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;docker-compose&lt;/code&gt; creates a docker network that can be found by running &lt;code&gt;docker network list&lt;/code&gt;, e.g. &lt;code&gt;dockerhadoop_default&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;docker network inspect&lt;/code&gt; on the network (e.g. &lt;code&gt;dockerhadoop_default&lt;/code&gt;) to find the IP the hadoop interfaces are published on. Access these interfaces with the following URLs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Namenode: http://&amp;lt;dockerhadoop_IP_address&amp;gt;:9870/dfshealth.html#tab-overview&lt;/li&gt; &#xA; &lt;li&gt;History server: http://&amp;lt;dockerhadoop_IP_address&amp;gt;:8188/applicationhistory&lt;/li&gt; &#xA; &lt;li&gt;Datanode: http://&amp;lt;dockerhadoop_IP_address&amp;gt;:9864/&lt;/li&gt; &#xA; &lt;li&gt;Nodemanager: http://&amp;lt;dockerhadoop_IP_address&amp;gt;:8042/node&lt;/li&gt; &#xA; &lt;li&gt;Resource manager: http://&amp;lt;dockerhadoop_IP_address&amp;gt;:8088/&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configure Environment Variables&lt;/h2&gt; &#xA;&lt;p&gt;The configuration parameters can be specified in the hadoop.env file or as environmental variables for specific services (e.g. namenode, datanode etc.):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  CORE_CONF_fs_defaultFS=hdfs://namenode:8020&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;CORE_CONF corresponds to core-site.xml. fs_defaultFS=hdfs://namenode:8020 will be transformed into:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  &amp;lt;property&amp;gt;&amp;lt;name&amp;gt;fs.defaultFS&amp;lt;/name&amp;gt;&amp;lt;value&amp;gt;hdfs://namenode:8020&amp;lt;/value&amp;gt;&amp;lt;/property&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To define dash inside a configuration parameter, use triple underscore, such as YARN_CONF_yarn_log___aggregation___enable=true (yarn-site.xml):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  &amp;lt;property&amp;gt;&amp;lt;name&amp;gt;yarn.log-aggregation-enable&amp;lt;/name&amp;gt;&amp;lt;value&amp;gt;true&amp;lt;/value&amp;gt;&amp;lt;/property&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The available configurations are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;/etc/hadoop/core-site.xml CORE_CONF&lt;/li&gt; &#xA; &lt;li&gt;/etc/hadoop/hdfs-site.xml HDFS_CONF&lt;/li&gt; &#xA; &lt;li&gt;/etc/hadoop/yarn-site.xml YARN_CONF&lt;/li&gt; &#xA; &lt;li&gt;/etc/hadoop/httpfs-site.xml HTTPFS_CONF&lt;/li&gt; &#xA; &lt;li&gt;/etc/hadoop/kms-site.xml KMS_CONF&lt;/li&gt; &#xA; &lt;li&gt;/etc/hadoop/mapred-site.xml MAPRED_CONF&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you need to extend some other configuration file, refer to base/entrypoint.sh bash script.&lt;/p&gt;</summary>
  </entry>
</feed>