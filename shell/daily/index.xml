<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-11T01:38:11Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>NoName-exe/revanced-extended</title>
    <updated>2022-12-11T01:38:11Z</updated>
    <id>tag:github.com,2022-12-11:/NoName-exe/revanced-extended</id>
    <link href="https://github.com/NoName-exe/revanced-extended" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ReVanced Extended YT and YT-M for both root and non-root users.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ReVanced Extended&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/NoName-exe/revanced-extended/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/NoName-exe/revanced-extended/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Modules&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/NoName-exe/revanced-extended/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/NoName-exe/revanced-extended/actions/workflows/ci.yml/badge.svg?event=schedule&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Get the &lt;a href=&#34;https://github.com/NoName-exe/revanced-extended/releases/latest&#34;&gt;latest CI release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Updated with the latest versions of patches.&lt;/li&gt; &#xA; &lt;li&gt;Cleans APKs from unneeded libs to make them smaller.&lt;/li&gt; &#xA; &lt;li&gt;Fully open-source, every binary or APK is compiled without human intervention.&lt;/li&gt; &#xA; &lt;li&gt;Modules: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Recompile invalidated odex for YouTube and YouTube-Music for a better user experience.&lt;/li&gt; &#xA;   &lt;li&gt;Receive updates from Magisk app.&lt;/li&gt; &#xA;   &lt;li&gt;Should not break safetynet or trigger root detections used by certain apps.&lt;/li&gt; &#xA;   &lt;li&gt;Handle installation of the correct version of the stock app and all that.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;YouTube Magisk Module is installed as a system app and requires a reboot to install/update.&lt;/li&gt; &#xA; &lt;li&gt;YouTube-Music Magisk Module is installed as a user app and does not require a reboot to install/update.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://github.com/j-hc/mindetach-magisk&#34;&gt;mindetach&lt;/a&gt; to block Play Store from updating YouTube and YouTube-Music.&lt;/li&gt; &#xA; &lt;li&gt;Non-root versions of YouTube and YouTube-Music require &lt;a href=&#34;https://github.com/inotia00/VancedMicroG/releases/latest&#34;&gt;Vanced MicroG&lt;/a&gt; to work.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/j-hc&#34;&gt;j-hc&lt;/a&gt; for &lt;a href=&#34;https://github.com/j-hc/mindetach-magisk&#34;&gt;mindetach&lt;/a&gt; and the &lt;a href=&#34;https://github.com/j-hc/revanced-magisk-module&#34;&gt;script on which this is based on&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/HuskyDG&#34;&gt;HuskyDG&lt;/a&gt; for his &lt;a href=&#34;https://github.com/HuskyDG/revanced-build-ci&#34;&gt;Magisk Module Template&lt;/a&gt; that installs YouTube as a system app.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/inotia00&#34;&gt;inotia00&lt;/a&gt; for &lt;a href=&#34;https://github.com/inotia00/revanced-patches/tree/revanced-extended&#34;&gt;revanced-extended patches&lt;/a&gt; and his version of &lt;a href=&#34;https://github.com/inotia00/VancedMicroG&#34;&gt;Vanced MicroG&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gnadgnaoh&#34;&gt;Gnad Gnaoh&lt;/a&gt; for helping me figure some stuff out.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>niedzielski/cb</title>
    <updated>2022-12-11T01:38:11Z</updated>
    <id>tag:github.com,2022-12-11:/niedzielski/cb</id>
    <link href="https://github.com/niedzielski/cb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸ“‹ Command-line clipboard with automatic copy and paste detection. Eg, `cb|sort|cb`.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ðŸ“‹ cb&lt;/h1&gt; &#xA;&lt;p&gt;Command-line clipboard with automatic copy and paste detection. Eg, &lt;code&gt;cb|sort|cb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Purpose&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;cb&lt;/strong&gt; is a clipboard for working between graphical and command-line interfaces (GUIs and CLIs). The clipboard is a surprisingly convenient integration between the two and doesn&#39;t use temporary files. cb automatically performs a copy or a paste based on the context.&lt;/p&gt; &#xA;&lt;h3&gt;Why you don&#39;t need cb&lt;/h3&gt; &#xA;&lt;p&gt;If any of the following are true, you do &lt;strong&gt;not&lt;/strong&gt; need cb:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You use GUIs exclusively.&lt;/li&gt; &#xA; &lt;li&gt;You use CLIs exclusively.&lt;/li&gt; &#xA; &lt;li&gt;You can use the system equivalent copy-and-paste CLIs directly. Eg, &lt;a href=&#34;https://github.com/kfish/xsel&#34;&gt;XSel&lt;/a&gt; or &lt;code&gt;pbcopy&lt;/code&gt; / &lt;code&gt;pbpaste&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You prefer using temporary files when working across GUIs and CLIs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All cb provides is a consistent interface across operating systems.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Supply standard input to &lt;strong&gt;copy&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo abc|cb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Supply no input to &lt;strong&gt;paste&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cb&#xA;abc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Both copy and paste can appear in the same command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ curl &#34;$(cb)&#34;|cb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Contents on the clipboard can be used bidirectionally with other GUIs like graphical text editors or web browsers using the usual shortcut (control-c/v or command-c/v).&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Download the script to ~/bin/cb.&#xA;curl https://raw.githubusercontent.com/niedzielski/clipboard/master/cb -o ~/bin/cb &amp;amp;&amp;amp;&#xA;&#xA;# Make the script executable.&#xA;chmod +x ~/bin/cb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;cb requires the following dependencies to be installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux: xclip on X (eg, &lt;code&gt;sudo apt install xclip&lt;/code&gt;) and wl-clipboard on Wayland (&lt;code&gt;sudo apt install wl-clipboard&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;macOS: none (&lt;code&gt;pbcopy&lt;/code&gt; / &lt;code&gt;pbpaste&lt;/code&gt; are installed by default).&lt;/li&gt; &#xA; &lt;li&gt;Windows: CygUtils (install &lt;code&gt;putclip&lt;/code&gt; / &lt;code&gt;getclip&lt;/code&gt; via Cygwin GUI).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If in doubt, it&#39;s simplest to just try executing cb.&lt;/p&gt; &#xA;&lt;h3&gt;Troubleshooting&lt;/h3&gt; &#xA;&lt;p&gt;Is &lt;code&gt;~/bin&lt;/code&gt; in the &lt;code&gt;PATH&lt;/code&gt; environment variable? &lt;code&gt;grep --only-matching ~/bin &amp;lt;&amp;lt;&amp;lt; &#34;$PATH&#34;&lt;/code&gt; should report a match. If not, add it like &lt;code&gt;PATH=&#34;$PATH&#34;:~/bin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Sort clipboard lines: &lt;code&gt;cb|sort|cb&lt;/code&gt;. &lt;/p&gt;&#xA;  &lt;details markdown&gt;&#xA;   &lt;summary&gt;Expand for detailâ€¦&lt;/summary&gt;&#xA;   &lt;p&gt;&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ # Simulate copying some lines of text from another program with control or command-C.&#xA;&#xA;$ printf &#39;c\nb\na&#39;|cb&#xA;&#xA;$ cb&#xA;c&#xA;b&#xA;a&#xA;&#xA;$ # Sort the clipboard&#39;s contents by line.&#xA;&#xA;$ cb|sort|cb&#xA;&#xA;$ # Simulate pasting the text back to another program with control or command-V.&#xA;&#xA;$ cb&#xA;a&#xA;b&#xA;c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Count the number of bytes, characters, and lines on the clipboard: &lt;code&gt;cb|wc --bytes --chars --lines&lt;/code&gt;. &lt;/p&gt;&#xA;  &lt;details markdown&gt;&#xA;   &lt;summary&gt;Expand for detailâ€¦&lt;/summary&gt;&#xA;   &lt;p&gt;&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ # Simulate copying text from another program with control or command-C.&#xA;&#xA;$ echo abc|cb&#xA;&#xA;$ cb|wc --bytes --chars --lines&#xA;      1       4       4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Replace single quotes with double quotes on the clipboard: &lt;code&gt;cb|sed s%\&#39;%\&#34;%g|cb&lt;/code&gt;. &lt;/p&gt;&#xA;  &lt;details markdown&gt;&#xA;   &lt;summary&gt;Expand for detailâ€¦&lt;/summary&gt;&#xA;   &lt;p&gt;&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ # Simulate copying text from another program with control or command-C.&#xA;&#xA;$ cb &amp;lt;&amp;lt;&amp;lt;\&#39;abc\&#39;&#xA;&#xA;$ cb|sed s%\&#39;%\&#34;%g|cb&#xA;&#xA;$ # Simulate pasting the text back to another program with control or command-V.&#xA;&#xA;$ cb&#xA;&#34;abc&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Diff the clipboard with a file: &lt;code&gt;diff &amp;lt;(cb) right-hand-side.text&lt;/code&gt;. Works with diff GUIs too: &lt;code&gt;meld &amp;lt;(cb) right-hand-side.text&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;details markdown&gt;&#xA;   &lt;summary&gt;Expand for detailâ€¦&lt;/summary&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ # Simulate copying some lines of text from another program with control or command-C.&#xA;&#xA;$ cb &amp;lt;&amp;lt; &#39;eof&#39;&#xA;a&#xA;b&#xA;eof&#xA;&#xA;$ # Simulate a previously saved reference.&#xA;&#xA;$ cat &amp;lt;&amp;lt; &#39;eof&#39; &amp;gt; right-hand-side.text&#xA;a&#xA;b&#xA;c&#xA;eof&#xA;&#xA;$ # Diff the contents of the clipboard with the reference.&#xA;&#xA;$ diff &amp;lt;(cb) right-hand-side.text&#xA;2a3&#xA;&amp;gt; c&#xA;&#xA;$ # View the same diff in Meld, a graphical diffing program.&#xA;&#xA;$ meld &amp;lt;(cb) right-hand-side.text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/niedzielski/cb/main/meld.png&#34; alt=&#34;Example visual difference of the clipboard (left-hand side) and right-hand-side.text in Meld.&#34;&gt;&lt;/p&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download a file from the URL on the clipboard: &lt;code&gt;wget &#34;$(cb)&#34;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download a video from the YouTube URL on the clipboard: &lt;code&gt;youtube-dl &#34;$(cb)&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;details markdown&gt;&#xA;   &lt;summary&gt;Expand for detailâ€¦&lt;/summary&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ # Simulate copying a URL from a browser address bar with control or command-C.&#xA;&#xA;$ echo &#39;https://www.youtube.com/watch?v=92c8vW-AzAc&#39;|cb&#xA;&#xA;$ # Download the address from the clipboard URL.&#xA;&#xA;$ youtube-dl &#34;$(cb)&#34;&#xA;[youtube] 92c8vW-AzAc: Downloading webpage&#xA;WARNING: Requested formats are incompatible for merge and will be merged into mkv.&#xA;[download] Destination: Fritz roars-92c8vW-AzAc.f137.mp4&#xA;[download] 100% of 5.07MiB in 01:37&#xA;[download] Destination: Fritz roars-92c8vW-AzAc.f251.webm&#xA;[download] 100% of 175.94KiB in 00:02&#xA;[ffmpeg] Merging formats into &#34;Fritz roars-92c8vW-AzAc.mkv&#34;&#xA;Deleting original file Fritz roars-92c8vW-AzAc.f137.mp4 (pass -k to keep)&#xA;Deleting original file Fritz roars-92c8vW-AzAc.f251.webm (pass -k to keep)&#xA;&#xA;$ ls Fritz\ roars-92c8vW-AzAc.mkv&#xA;&#39;Fritz roars-92c8vW-AzAc.mkv&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy the version of Chromium to the clipboard: &lt;code&gt;chromium --version|cb&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;details markdown&gt;&#xA;   &lt;summary&gt;Expand for detailâ€¦&lt;/summary&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ # Copy the version of Chromium installed into the clipboard.&#xA;&#xA;$ chromium --version|cb&#xA;&#xA;$ # Simulate pasting the version into another program with control or command-V.&#xA;&#xA;$ cb&#xA;Chromium 97.0.4692.99 built on Debian bookworm/sid, running on Debian bookworm/sid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy 10k numbered lines to the clipboard: &lt;code&gt;for ((i=0; i &amp;lt; 10000; i++)); do echo $i; done|cb&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;details markdown&gt;&#xA;   &lt;summary&gt;Expand for detailâ€¦&lt;/summary&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ # Copy numbered lines from 0 to 10000 to the clipboard.&#xA;&#xA;$ for ((i=0; i &amp;lt; 10000; i++)); do echo $i; done|cb&#xA;&#xA;$ # Simulate pasting the text into another program with control or command-V.&#xA;&#xA;$ cb|head&#xA;0&#xA;1&#xA;2&#xA;3&#xA;4&#xA;5&#xA;6&#xA;7&#xA;8&#xA;9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Replace newlines on the clipboard with commas: &lt;code&gt;cb|node --input-type=module --eval &#39;import fs from &#34;fs/promises&#34;; const text = await fs.readFile(&#34;/dev/stdin&#34;, &#34;utf-8&#34;); console.log(text.split(&#34;\n&#34;).join())&#39;|cb&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;details markdown&gt;&#xA;   &lt;summary&gt;Expand for detailâ€¦&lt;/summary&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ # Simulate copying text delimited by newlines from another program with control or command-C.&#xA;&#xA;$ echo -ne &#39;a\nb\nc&#39;|cb&#xA;&#xA;$ cb|node --input-type=module --eval &#39;import fs from &#34;fs/promises&#34;; const text = await fs.readFile(&#34;/dev/stdin&#34;, &#34;utf-8&#34;); console.log(text.split(&#34;\n&#34;).join())&#39;|cb&#xA;&#xA;$ # Simulate pasting the CSV back to another program with control or command-V.&#xA;&#xA;$ cb&#xA;a,b,c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pretty print JSON: &lt;code&gt;cb|node -pe &#39;JSON.stringify(JSON.parse(require(&#34;fs&#34;).readFileSync(0, &#34;utf-8&#34;)), null, 2)&#39;|cb&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;details markdown&gt;&#xA;   &lt;summary&gt;Expand for detailâ€¦&lt;/summary&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ # Simulate copying a blob of JSON from another program with control or command-C.&#xA;&#xA;$ cb &amp;lt;&amp;lt;&amp;lt;&#39;{&#34;a&#34;:1,&#34;b&#34;:2,&#34;c&#34;:3}&#39;&#xA;&#xA;$ cb|node -pe &#39;JSON.stringify(JSON.parse(require(&#34;fs&#34;).readFileSync(0, &#34;utf-8&#34;)), null, 2)&#39;|cb&#xA;&#xA;$ # Simulate pasting the JSON back to another program with control or command-V.&#xA;&#xA;$ cb&#xA;{&#xA;  &#34;a&#34;: 1,&#xA;  &#34;b&#34;: 2,&#xA;  &#34;c&#34;: 3&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Test if the random patch you found online and copied to your clipboard applies to your code: &lt;code&gt;git apply --check &amp;lt;(cb)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Dump the HEAD revision of a file to the clipboard: &lt;code&gt;git show HEAD:readme.md|cb&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Reverse clipboard line order: &lt;code&gt;cb|tac|cb&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy an image to the clipboard: &lt;code&gt;cb &amp;lt; banana.png&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Wrap clipboard text at 72 characters: &lt;code&gt;cb|fold --spaces --width=72|sed &#39;s% \+$%%&#39;|cb&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Find songs, shuffle them, and copy them to the clipboard: &lt;code&gt;find -iname \*.flac -printf %f\\n|shuf|cb&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy the absolute path of a filename: &lt;code&gt;realpath --canonicalize-missing --no-symlinks &#34;$(cb)&#34;|cb&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Voice the clipboard: &lt;code&gt;cb|espeak&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Truncate the clipboard: &lt;code&gt;cb|tail|cb&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Save the clipboard to a transient file: &lt;code&gt;t=&#34;$(mktemp)&#34; &amp;amp;&amp;amp; cb &amp;gt;| &#34;$t&#34; &amp;amp;&amp;amp; echo &#34;$t&#34;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Edit the clipboard contents in a temporary buffer &lt;code&gt;cb|vim -&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compare Gzip and Brotli compressions of the clipboard: &lt;code&gt;cb|gzip --best|wc --bytes &amp;amp;&amp;amp; cb|brotli --best|wc --bytes&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy the most recent photo taken on an Android device to the clipboard: &lt;code&gt;adb exec-out &#39;cat &#34;$(ls -c1 /sdcard/DCIM/Camera/IMG*.jpg|tail -n1)&#34;&#39;|cb&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clear the clipboard: &lt;code&gt;cb &amp;lt; /dev/null&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License (public domain)&lt;/h2&gt; &#xA;&lt;p&gt;All code in this repository is public domain and may be used without limitation.&lt;/p&gt;</summary>
  </entry>
</feed>