<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-24T01:56:38Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Gictorbit/photoshopCClinux</title>
    <updated>2022-06-24T01:56:38Z</updated>
    <id>tag:github.com,2022-06-24:/Gictorbit/photoshopCClinux</id>
    <link href="https://github.com/Gictorbit/photoshopCClinux" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Photoshop CC v19 installer for Gnu/Linux&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34; class=&#34;tip&#34; markdown=&#34;1&#34; style&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Gictorbit/photoshopCClinux/master/images/Screenshot.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/wine-%E2%96%B25.22-red&#34; alt=&#34;wine version&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Tested%20on-Archlinux-brightgreen&#34; alt=&#34;Tested on arch&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/Gictorbit/photoshopCClinux&#34; alt=&#34;GitHub stars&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/repo-size/gictorbit/photoshopCClinux&#34; alt=&#34;rep size&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/bash-5.0-yellowgreen&#34; alt=&#34;bash&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Photoshop CC v19 installer for Linux&lt;/h1&gt; &#xA;&lt;p&gt;This bash script helps you to install Photoshop CC version 19 on your Linux machine using wine behind the scene and sets some necessary components up for the best performance&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;üöÄ&lt;/span&gt; Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;downloads necessary components and installs them (&lt;code&gt;vcrun&lt;/code&gt;, &lt;code&gt;atmlib&lt;/code&gt;, &lt;code&gt;msxml&lt;/code&gt;...)&lt;/li&gt; &#xA; &lt;li&gt;downloads &lt;code&gt;photoshop.exe&lt;/code&gt; installer&lt;/li&gt; &#xA; &lt;li&gt;creates photoshop command and a desktop entry&lt;/li&gt; &#xA; &lt;li&gt;wine dark mode&lt;/li&gt; &#xA; &lt;li&gt;supports graphic cards like (&lt;code&gt;intel&lt;/code&gt;, &lt;code&gt;Nvidia&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;saves the downloaded files in your cache directory&lt;/li&gt; &#xA; &lt;li&gt;It&#39;s free and you will not need any license key&lt;/li&gt; &#xA; &lt;li&gt;works on any Linux distribution&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;‚ö†&lt;/span&gt; Requirements&lt;/h2&gt; &#xA;&lt;p&gt;1- use a 64bit edition of your distro&lt;/p&gt; &#xA;&lt;p&gt;2-make sure the following packages are already installed on your Linux distro&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;wine&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;wine64&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;winetricks&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;md5sum&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;if they are not already installed you can install them using your package manager for example in arch Linux&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pacman -S wine winetricks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3- make sure you have enough storage in your &lt;code&gt;/home&lt;/code&gt; partition about &lt;code&gt;5 GiB&lt;/code&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;1 GiB will be free after installation&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;also you can install photoshop in diffrent directory&lt;/p&gt; &#xA;&lt;p&gt;4- make sure you have an internet connection and about 1.5 Gib traffic to download photoshop and its components&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;üíª&lt;/span&gt; Installation&lt;/h2&gt; &#xA;&lt;p&gt;the installer scripts use a virtual drive of wine and makes a new &lt;code&gt;winprefix&lt;/code&gt; for photoshop&lt;/p&gt; &#xA;&lt;p&gt;first of all, you need to clone the repository with this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/Gictorbit/photoshopCClinux.git&#xA;cd photoshopCClinux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then you can easily run &lt;code&gt;setup.sh&lt;/code&gt; script to install photoshop cc on your Linux distro&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod +x setup.sh&#xA;./setup.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;you can use &lt;code&gt;-d&lt;/code&gt; to specify the installation path, and &lt;code&gt;-c&lt;/code&gt; for the cache directory. for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./PhotoshopSetup.sh -d /mnt/myfiles/photoshop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./PhotoshopSetup.sh -d /mnt/myfiles/photoshop -c /mnt/cache&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;when no options are given, the installer script will use the default path, the uninstaller script and others will detect your custom path so there is no problem, I recommend using the &lt;code&gt;-d&lt;/code&gt; option and having the default cache directory. this feature is currently being tested, and will be added to &lt;code&gt;setup.sh&lt;/code&gt; later&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34; class=&#34;tip&#34; markdown=&#34;1&#34; style&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Gictorbit/photoshopCClinux/master/images/setup-screenshot.png&#34; alt=&#34;setup-screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;during installation please pay attention to the script messages&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE :&lt;/strong&gt; make sure OS version in wine is on windows 7&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;installer script use &lt;code&gt;winetricks&lt;/code&gt; to install necessary components&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;üç∑&lt;/span&gt; wineprefix Configuration&lt;/h2&gt; &#xA;&lt;p&gt;if you need to configure the wineprefix of photoshop you can use &lt;code&gt;winecfg.sh&lt;/code&gt; script just run the command below&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod +x winecfg.sh&#xA;./winecfg.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;span&gt;üî®&lt;/span&gt; Tools&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;span&gt;‚ú®&lt;/span&gt; Liquify Tools&lt;/summary&gt; as you know photoshop has many useful tools like `Liquify Tools`.&#xA; &lt;br&gt; &#xA; &lt;p&gt;if you get some errors while working with these tools, It may because of the graphics card.&lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;photoshop uses the &lt;code&gt;GPU&lt;/code&gt; to process these tools so before using these tools make sure that your graphics card &lt;code&gt;(Nvidia, AMD)&lt;/code&gt; is configured correctly in your Linux machine. &lt;br&gt;The other solution is you can configure photoshop to use your &lt;code&gt;CPU&lt;/code&gt; for image processing. to do that, follow the steps below:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;go to edit tab and open &lt;code&gt;preferences&lt;/code&gt; or &lt;code&gt;[ctrl+K]&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;then go to the &lt;code&gt;performance&lt;/code&gt; tab&lt;/li&gt; &#xA;  &lt;li&gt;in the graphics processor settings section, uncheck &lt;code&gt;Use graphics processor&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/34630603/80861998-117b7a80-8c87-11ea-8f56-079f43dfafd9.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;span&gt;üì∑&lt;/span&gt; Adobe Camera Raw&lt;/summary&gt; &#xA; &lt;p&gt;another useful adobe software is &lt;code&gt;camera raw&lt;/code&gt; if you want to work with it beside photoshop you must install it separately to do this, after photoshop installation run &lt;code&gt;cameraRawInstaller.sh&lt;/code&gt; script with commands below:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod +x cameraRawInstaller.sh&#xA;./cameraRawInstaller.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;then restart photoshop.you can open it from &lt;code&gt;Edit &amp;gt;&amp;gt;Preferences &amp;gt;&amp;gt; Camera Raw&lt;/code&gt;&lt;/p&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE1:&lt;/em&gt;&lt;/strong&gt; the size of camera raw installation file is about 400MB&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE2:&lt;/em&gt;&lt;/strong&gt; camera raw performance depends on your graphic card driver and its configuration&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;&lt;span&gt;‚ô®&lt;/span&gt; Uninstall&lt;/h2&gt; &#xA;&lt;p&gt;to uninstall photoshop you can use the uninstaller script with commands below&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod +x uninstaller.sh&#xA;./uninstaller.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;span&gt;üîñ&lt;/span&gt; License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/license/Gictorbit/photoshopCClinux?style=for-the-badge&#34; alt=&#34;GitHub&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;a href=&#34;https://poshtiban.com&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Gictorbit/photoshopCClinux/master/images/poshtibancom.png&#34; width=&#34;25%&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://github.com/Gictorbit/illustratorCClinux&#34;&gt; &lt;img src=&#34;https://github.com/Gictorbit/illustratorCClinux/raw/master/images/AiIcon.png&#34; width=&#34;9%&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>codota/TabNine</title>
    <updated>2022-06-24T01:56:38Z</updated>
    <id>tag:github.com,2022-06-24:/codota/TabNine</id>
    <link href="https://github.com/codota/TabNine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AI Code Completions&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TabNine&lt;/h1&gt; &#xA;&lt;p&gt;This is the repository for the backend of &lt;a href=&#34;https://tabnine.com&#34;&gt;TabNine&lt;/a&gt;, the all-language autocompleter. There are no source files here because the backend is closed source.&lt;/p&gt; &#xA;&lt;p&gt;You can make feature requests by filing an issue. You are also welcome to make pull requests for changes to the configuration files.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;languages.yml&lt;/code&gt; determines which file extensions are considered part of the same language. (For example, identifiers from &lt;code&gt;.c&lt;/code&gt; files will be suggested in &lt;code&gt;.h&lt;/code&gt; files.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;language_tokenization.json&lt;/code&gt; determines how languages are tokenized. For example, identifiers can contain dashes in Lisp, but not in Java.&lt;/p&gt; &#xA;&lt;p&gt;If your feature request is specific to a particular editor&#39;s TabNine client, please file an issue in one of these repositories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zxqfl/tabnine-vscode&#34;&gt;VS Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zxqfl/tabnine-sublime&#34;&gt;Sublime Text&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zxqfl/tabnine-vim&#34;&gt;Vim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zxqfl/tabnine-atom&#34;&gt;Atom&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You may be interested in these TabNine clients written by &lt;strong&gt;third parties&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE:&lt;/em&gt;&lt;/strong&gt; Codota is &lt;strong&gt;not&lt;/strong&gt; validating any code in those plugins and is not responsible for them by any means.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TommyX12/company-tabnine&#34;&gt;Emacs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tbodt/deoplete-tabnine&#34;&gt;Vim (Deoplete)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GitPopcorn/tabnine-eclipse&#34;&gt;Eclipse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Your client &lt;a href=&#34;https://github.com/codota/TabNine/raw/master/HowToWriteAClient.md&#34;&gt;https://github.com/codota/TabNine/blob/master/HowToWriteAClient.md&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Supported Architectures&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;x86_64-unknown-linux-musl&lt;/li&gt; &#xA; &lt;li&gt;x86_64-apple-darwin&lt;/li&gt; &#xA; &lt;li&gt;aarch64-apple-darwin&lt;/li&gt; &#xA; &lt;li&gt;i686-pc-windows-gnu&lt;/li&gt; &#xA; &lt;li&gt;x86_64-pc-windows-gnu&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>internetwache/GitTools</title>
    <updated>2022-06-24T01:56:38Z</updated>
    <id>tag:github.com,2022-06-24:/internetwache/GitTools</id>
    <link href="https://github.com/internetwache/GitTools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A repository with 3 tools for pwn&#39;ing websites with .git repositories available&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/internetwache/GitTools/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/internetwache/GitTools.svg?sanitize=true&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/internetwache/GitTools/raw/master/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/internetwache/GitTools.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;GitTools&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains three small python/bash scripts used for the Git research. &lt;a href=&#34;https://en.internetwache.org/dont-publicly-expose-git-or-how-we-downloaded-your-websites-sourcecode-an-analysis-of-alexas-1m-28-07-2015/&#34;&gt;Read about it here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Finder&lt;/h2&gt; &#xA;&lt;p&gt;You can use this tool to find websites with their .git repository available to the public&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;This python script identifies websites with publicly accessible &lt;code&gt;.git&lt;/code&gt; repositories. It checks if the &lt;code&gt;.git/HEAD&lt;/code&gt; file contains &lt;code&gt;refs/heads&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./gitfinder.py -h&#xA;&#xA;###########&#xA;# Finder is part of https://github.com/internetwache/GitTools&#xA;#&#xA;# Developed and maintained by @gehaxelt from @internetwache&#xA;#&#xA;# Use at your own risk. Usage might be illegal in certain circumstances.&#xA;# Only for educational purposes!&#xA;###########&#xA;&#xA;usage: gitfinder.py [-h] [-i INPUTFILE] [-o OUTPUTFILE] [-t THREADS]&#xA;&#xA;optional arguments:&#xA;  -h, --help            show this help message and exit&#xA;  -i INPUTFILE, --inputfile INPUTFILE&#xA;                        input file&#xA;  -o OUTPUTFILE, --outputfile OUTPUTFILE&#xA;                        output file&#xA;  -t THREADS, --threads THREADS&#xA;                        threads&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The input file should contain the targets one per line. The script will output discovered domains in the form of &lt;code&gt;[*] Found: DOMAIN&lt;/code&gt; to stdout.&lt;/p&gt; &#xA;&lt;h4&gt;Scanning Alexa‚Äôs Top 1M&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget http://s3.amazonaws.com/alexa-static/top-1m.csv.zip&#xA;unzip top-1m.csv.zip&#xA;sed -i.bak &#39;s/.*,//&#39; top-1m.csv&#xA;./gitfinder.py -i top-1m.csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dumper&lt;/h2&gt; &#xA;&lt;p&gt;This tool can be used to download as much as possible from the found .git repository from webservers which do not have directory listing enabled.&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./gitdumper.sh -h&#xA;&#xA;[*] USAGE: http://target.tld/.git/ dest-dir [--git-dir=otherdir]&#xA;&#x9;&#x9;--git-dir=otherdir&#x9;&#x9;Change the git folder name. Default: .git&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: This tool has no 100% guaranty to completely recover the .git repository. Especially if the repository has been compressed into &lt;code&gt;pack&lt;/code&gt;-files, it may fail.&lt;/p&gt; &#xA;&lt;h2&gt;Extractor&lt;/h2&gt; &#xA;&lt;p&gt;A small bash script to extract commits and their content from a broken repository.&lt;/p&gt; &#xA;&lt;p&gt;This script tries to recover incomplete git repositories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Iterate through all commit-objects of a repository&lt;/li&gt; &#xA; &lt;li&gt;Try to restore the contents of the commit&lt;/li&gt; &#xA; &lt;li&gt;Commits are &lt;em&gt;not&lt;/em&gt; sorted by date&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./extractor.sh /tmp/mygitrepo /tmp/mygitrepodump&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/tmp/mygitrepo&lt;/code&gt; contains a &lt;code&gt;.git&lt;/code&gt; directory&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/tmp/mygitrepodump&lt;/code&gt; is the destination directory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This can be used in combination with the &lt;code&gt;Git Dumper&lt;/code&gt; in case the downloaded repository is incomplete.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a small demo of the &lt;strong&gt;Dumper&lt;/strong&gt; tool:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/24072&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/24072.png&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Proxy support&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;urllib&lt;/code&gt; and &lt;code&gt;curl&lt;/code&gt; should support proxy configuration through environment variables:&lt;/p&gt; &#xA;&lt;p&gt;In bash, set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export HTTP_PROXY=http://proxy_url:proxy_port&#xA;export HTTPS_PROXY=http://proxy_url:proxy_port&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Window&#39;s CMD, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;set HTTP_PROXY=http://proxy_url:proxy_port&#xA;set HTTPS_PROXY=http://proxy_url:proxy_port&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Basic auth should be supported with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://username:password@proxy_url:proxy_port&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;git&lt;/li&gt; &#xA; &lt;li&gt;Python 3+&lt;/li&gt; &#xA; &lt;li&gt;curl&lt;/li&gt; &#xA; &lt;li&gt;bash&lt;/li&gt; &#xA; &lt;li&gt;sed&lt;/li&gt; &#xA; &lt;li&gt;binutils (strings)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;All tools are licensed using the MIT license. See &lt;a href=&#34;https://raw.githubusercontent.com/internetwache/GitTools/master/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>