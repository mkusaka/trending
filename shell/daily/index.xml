<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-03T01:39:09Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>CryoByte33/steam-deck-swap-resizer</title>
    <updated>2022-11-03T01:39:09Z</updated>
    <id>tag:github.com,2022-11-03:/CryoByte33/steam-deck-swap-resizer</id>
    <link href="https://github.com/CryoByte33/steam-deck-swap-resizer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple script to help users resize the swap file on their Steam Decks.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;steam-deck-swap-resizer&lt;/h1&gt; &#xA;&lt;p&gt;A simple script to help users resize the swap file on their Steam Decks.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;This &lt;strong&gt;REQUIRES&lt;/strong&gt; a password set on the Steam Deck. That can be done with the &lt;code&gt;passwd&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h3&gt;Direct / Simple&lt;/h3&gt; &#xA;&lt;p&gt;Download InstallSwapResizer.desktop from this repository with &lt;a href=&#34;https://raw.githubusercontent.com/CryoByte33/steam-deck-swap-resizer/main/InstallSwapResizer.desktop&#34;&gt;this link&lt;/a&gt; on your Steam Deck, then run it. (Right click and save file)&lt;/p&gt; &#xA;&lt;p&gt;This will install a script and create a few desktop icons for the swap resizer tool.&lt;/p&gt; &#xA;&lt;h3&gt;Local Storage&lt;/h3&gt; &#xA;&lt;p&gt;This method lets you download the script locally to have on hand. You can also modify it if you&#39;d like, but I don&#39;t recommend that unless you know what you&#39;re doing!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/CryoByte33/steam-deck-swap-resizer.git&#xA;cd steam-deck-swap-resizer&#xA;chmod +x swap_resizer.sh&#xA;./swap_resizer.sh&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>nadi555/Ternode</title>
    <updated>2022-11-03T01:39:09Z</updated>
    <id>tag:github.com,2022-11-03:/nadi555/Ternode</id>
    <link href="https://github.com/nadi555/Ternode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ternode&lt;/h1&gt; &#xA;&lt;h2&gt;ðŸš€ About Me Dexa&lt;/h2&gt; &#xA;&lt;p&gt;I`am Dexa From Airdrop Sultan Indonesia&lt;/p&gt; &#xA;&lt;p&gt;Contact Me : &lt;a href=&#34;mailto:erulbathory@gmail.com&#34;&gt;erulbathory@gmail.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Telegram : @dexa555&lt;/p&gt; &#xA;&lt;p&gt;Discord : XDexa#5062&lt;/p&gt; &#xA;&lt;p&gt;Join TG : &lt;a href=&#34;https://t.me/airdropsultanindonesia&#34;&gt;https://t.me/airdropsultanindonesia&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nodenv/nodenv</title>
    <updated>2022-11-03T01:39:09Z</updated>
    <id>tag:github.com,2022-11-03:/nodenv/nodenv</id>
    <link href="https://github.com/nodenv/nodenv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Manage multiple NodeJS versions.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Groom your appâ€™s Node environment with nodenv.&lt;/h1&gt; &#xA;&lt;p&gt;Use nodenv to pick a Node version for your application and guarantee that your development environment matches production. Put nodenv to work with &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt; for painless Node upgrades and bulletproof deployments.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Powerful in development.&lt;/strong&gt; Specify your app&#39;s Node version once, in a single file. Keep all your teammates on the same page. No headaches running apps on different versions of Node. Just Worksâ„¢ from the command line. Override the Node version anytime: just set an environment variable.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Rock-solid in production.&lt;/strong&gt; Your application&#39;s executables are its interface with ops. With nodenv and you&#39;ll never again need to &lt;code&gt;cd&lt;/code&gt; in a cron job or Chef recipe to ensure you&#39;ve selected the right runtime. The Node version dependency lives in one placeâ€”your appâ€”so upgrades and rollbacks are atomic, even when you switch versions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;One thing well.&lt;/strong&gt; nodenv is concerned solely with switching Node versions. It&#39;s simple and predictable. A rich plugin ecosystem lets you tailor it to suit your needs. Compile your own Node versions, or use the &lt;a href=&#34;https://github.com/nodenv/node-build#readme&#34;&gt;node-build&lt;/a&gt; plugin to automate the process. Specify per-application environment variables with &lt;a href=&#34;https://github.com/nodenv/nodenv-vars&#34;&gt;nodenv-vars&lt;/a&gt;. See more &lt;a href=&#34;https://github.com/nodenv/nodenv/wiki/Plugins&#34;&gt;plugins on the wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nodenv/nodenv/wiki/Why-nodenv%3F&#34;&gt;&lt;strong&gt;Why choose nodenv?&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;!-- toc --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#how-it-works&#34;&gt;How It Works&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#understanding-path&#34;&gt;Understanding PATH&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#understanding-shims&#34;&gt;Understanding Shims&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#choosing-the-node-version&#34;&gt;Choosing the Node Version&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#locating-the-node-installation&#34;&gt;Locating the Node Installation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#homebrew-on-macos&#34;&gt;Homebrew on macOS&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#upgrading-with-homebrew&#34;&gt;Upgrading with Homebrew&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#basic-github-checkout&#34;&gt;Basic GitHub Checkout&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#upgrading-with-git&#34;&gt;Upgrading with Git&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#updating-the-list-of-available-node-versions&#34;&gt;Updating the list of available Node versions&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#how-nodenv-hooks-into-your-shell&#34;&gt;How nodenv hooks into your shell&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#installing-node-versions&#34;&gt;Installing Node versions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#uninstalling-node-versions&#34;&gt;Uninstalling Node versions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#uninstalling-nodenv&#34;&gt;Uninstalling nodenv&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#command-reference&#34;&gt;Command Reference&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#nodenv-local&#34;&gt;nodenv local&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#nodenv-global&#34;&gt;nodenv global&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#nodenv-shell&#34;&gt;nodenv shell&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#nodenv-versions&#34;&gt;nodenv versions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#nodenv-version&#34;&gt;nodenv version&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#nodenv-rehash&#34;&gt;nodenv rehash&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#nodenv-which&#34;&gt;nodenv which&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#nodenv-whence&#34;&gt;nodenv whence&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#environment-variables&#34;&gt;Environment variables&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#development&#34;&gt;Development&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- tocstop --&gt; &#xA;&lt;h2&gt;How It Works&lt;/h2&gt; &#xA;&lt;p&gt;At a high level, nodenv intercepts Node commands using shim executables injected into your &lt;code&gt;PATH&lt;/code&gt;, determines which Node version has been specified by your application, and passes your commands along to the correct Node installation.&lt;/p&gt; &#xA;&lt;h3&gt;Understanding PATH&lt;/h3&gt; &#xA;&lt;p&gt;When you run a command like &lt;code&gt;node&lt;/code&gt; or &lt;code&gt;npm&lt;/code&gt;, your operating system searches through a list of directories to find an executable file with that name. This list of directories lives in an environment variable called &lt;code&gt;PATH&lt;/code&gt;, with each directory in the list separated by a colon:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/usr/local/bin:/usr/bin:/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Directories in &lt;code&gt;PATH&lt;/code&gt; are searched from left to right, so a matching executable in a directory at the beginning of the list takes precedence over another one at the end. In this example, the &lt;code&gt;/usr/local/bin&lt;/code&gt; directory will be searched first, then &lt;code&gt;/usr/bin&lt;/code&gt;, then &lt;code&gt;/bin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Understanding Shims&lt;/h3&gt; &#xA;&lt;p&gt;nodenv works by inserting a directory of &lt;em&gt;shims&lt;/em&gt; at the front of your &lt;code&gt;PATH&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;~/.nodenv/shims:/usr/local/bin:/usr/bin:/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Through a process called &lt;em&gt;rehashing&lt;/em&gt;, nodenv maintains shims in that directory to match every Node command across every installed version of Nodeâ€”&lt;code&gt;node&lt;/code&gt;, &lt;code&gt;npm&lt;/code&gt;, and so on.&lt;/p&gt; &#xA;&lt;p&gt;Shims are lightweight executables that simply pass your command along to nodenv. So with nodenv installed, when you run, say, &lt;code&gt;npm&lt;/code&gt;, your operating system will do the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Search your &lt;code&gt;PATH&lt;/code&gt; for an executable file named &lt;code&gt;npm&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Find the nodenv shim named &lt;code&gt;npm&lt;/code&gt; at the beginning of your &lt;code&gt;PATH&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run the shim named &lt;code&gt;npm&lt;/code&gt;, which in turn passes the command along to nodenv&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Choosing the Node Version&lt;/h3&gt; &#xA;&lt;p&gt;When you execute a shim, nodenv determines which Node version to use by reading it from the following sources, in this order:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;NODENV_VERSION&lt;/code&gt; environment variable, if specified. You can use the &lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#nodenv-shell&#34;&gt;&lt;code&gt;nodenv shell&lt;/code&gt;&lt;/a&gt; command to set this environment variable in your current shell session.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The first &lt;code&gt;.node-version&lt;/code&gt; file found by searching the directory of the script you are executing and each of its parent directories until reaching the root of your filesystem.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The first &lt;code&gt;.node-version&lt;/code&gt; file found by searching the current working directory and each of its parent directories until reaching the root of your filesystem. You can modify the &lt;code&gt;.node-version&lt;/code&gt; file in the current working directory with the &lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#nodenv-local&#34;&gt;&lt;code&gt;nodenv local&lt;/code&gt;&lt;/a&gt; command.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The global &lt;code&gt;~/.nodenv/version&lt;/code&gt; file. You can modify this file using the &lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#nodenv-global&#34;&gt;&lt;code&gt;nodenv global&lt;/code&gt;&lt;/a&gt; command. If the global version file is not present, nodenv assumes you want to use the &#34;system&#34; Nodeâ€”i.e. whatever version would be run if nodenv weren&#39;t in your path.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Locating the Node Installation&lt;/h3&gt; &#xA;&lt;p&gt;Once nodenv has determined which version of Node your application has specified, it passes the command along to the corresponding Node installation.&lt;/p&gt; &#xA;&lt;p&gt;Each Node version is installed into its own directory under &lt;code&gt;~/.nodenv/versions&lt;/code&gt;. For example, you might have these versions installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;~/.nodenv/versions/0.10.36/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/.nodenv/versions/0.12.0/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/.nodenv/versions/iojs-1.0.0/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version names to nodenv are simply the names of the directories or symlinks in &lt;code&gt;~/.nodenv/versions&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Homebrew on macOS&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re on macOS, we recommend installing nodenv with &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install nodenv.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install nodenv&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that this also installs &lt;code&gt;node-build&lt;/code&gt;, so you&#39;ll be ready to install other Node versions out of the box.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set up nodenv in your shell.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ eval &#34;$(nodenv init -)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Append the above line to your shell&#39;s rc/profile file and restart your shell.&lt;/p&gt; &lt;p&gt;For shell-specific instructions to &lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#how-nodenv-hooks-into-your-shell&#34;&gt;set up nodenv shell integration&lt;/a&gt;, run &lt;code&gt;nodenv init&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Close your Terminal window and open a new one so your changes take effect.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Verify that nodenv is properly set up using this &lt;a href=&#34;https://github.com/nodenv/nodenv-installer/raw/master/bin/nodenv-doctor&#34;&gt;nodenv-doctor&lt;/a&gt; script:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ curl -fsSL https://github.com/nodenv/nodenv-installer/raw/master/bin/nodenv-doctor | bash&#xA;Checking for `nodenv&#39; in PATH: /usr/local/bin/nodenv&#xA;Checking for nodenv shims in PATH: OK&#xA;Checking `nodenv install&#39; support: /usr/local/bin/nodenv-install (node-build 3.0.22-4-g49c4cb9)&#xA;Counting installed Node versions: none&#xA;  There aren&#39;t any Node versions installed under `~/.nodenv/versions&#39;.&#xA;  You can install Node versions like so: nodenv install 2.2.4&#xA;Auditing installed plugins: OK&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;That&#39;s it! Installing nodenv includes node-build, so now you&#39;re ready to &lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#installing-node-versions&#34;&gt;install some other Node versions&lt;/a&gt; using &lt;code&gt;nodenv install&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Upgrading with Homebrew&lt;/h4&gt; &#xA;&lt;p&gt;To upgrade to the latest nodenv and update node-build with newly released Node versions, upgrade the Homebrew packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew upgrade nodenv node-build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Basic GitHub Checkout&lt;/h3&gt; &#xA;&lt;p&gt;For a more automated install, you can use &lt;a href=&#34;https://github.com/nodenv/nodenv-installer#nodenv-installer&#34;&gt;nodenv-installer&lt;/a&gt;. If you prefer a manual approach, follow the steps below.&lt;/p&gt; &#xA;&lt;p&gt;This will get you going with the latest version of nodenv without needing a systemwide install.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone nodenv into &lt;code&gt;~/.nodenv&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/nodenv/nodenv.git ~/.nodenv&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Optionally, try to compile dynamic bash extension to speed up nodenv. Don&#39;t worry if it fails; nodenv will still work normally:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ cd ~/.nodenv &amp;amp;&amp;amp; src/configure &amp;amp;&amp;amp; make -C src&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;code&gt;~/.nodenv/bin&lt;/code&gt; to your &lt;code&gt;$PATH&lt;/code&gt; for access to the &lt;code&gt;nodenv&lt;/code&gt; command-line utility.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;For &lt;strong&gt;bash&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ echo &#39;export PATH=&#34;$HOME/.nodenv/bin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bash_profile&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;For &lt;strong&gt;Ubuntu Desktop&lt;/strong&gt; and &lt;strong&gt;Windows Subsystem for Linux (WSL)&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ echo &#39;export PATH=&#34;$HOME/.nodenv/bin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;For &lt;strong&gt;Zsh&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;$ echo &#39;export PATH=&#34;$HOME/.nodenv/bin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.zshrc&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;For &lt;strong&gt;Fish shell&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-fish&#34;&gt;$ set -Ux fish_user_paths $HOME/.nodenv/bin $fish_user_paths&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set up nodenv in your shell.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ~/.nodenv/bin/nodenv init&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Follow the printed instructions to &lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#how-nodenv-hooks-into-your-shell&#34;&gt;set up nodenv shell integration&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Restart your shell so that PATH changes take effect. (Opening a new terminal tab will usually do it.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Verify that nodenv is properly set up using this &lt;a href=&#34;https://github.com/nodenv/nodenv-installer/raw/master/bin/nodenv-doctor&#34;&gt;nodenv-doctor&lt;/a&gt; script:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ curl -fsSL https://github.com/nodenv/nodenv-installer/raw/master/bin/nodenv-doctor | bash&#xA;Checking for `nodenv&#39; in PATH: /usr/local/bin/nodenv&#xA;Checking for nodenv shims in PATH: OK&#xA;Checking `nodenv install&#39; support: /usr/local/bin/nodenv-install (node-build 3.0.22-4-g49c4cb9)&#xA;Counting installed Node versions: none&#xA;  There aren&#39;t any Node versions installed under `~/.nodenv/versions&#39;.&#xA;  You can install Node versions like so: nodenv install 2.2.4&#xA;Auditing installed plugins: OK&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; Install &lt;a href=&#34;https://github.com/nodenv/node-build#readme&#34;&gt;node-build&lt;/a&gt;, which provides the &lt;code&gt;nodenv install&lt;/code&gt; command that simplifies the process of &lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#installing-node-versions&#34;&gt;installing new Node versions&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Upgrading with Git&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;ve installed nodenv manually using Git, you can upgrade to the latest version by pulling from GitHub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd ~/.nodenv&#xA;$ git pull&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use a specific release of nodenv, check out the corresponding tag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd ~/.nodenv&#xA;$ git fetch&#xA;$ git checkout v0.3.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, check out the &lt;a href=&#34;https://github.com/charlesbjohnson/nodenv-update&#34;&gt;nodenv-update&lt;/a&gt; plugin which provides a command to update nodenv along with all installed plugins.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ nodenv update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Updating the list of available Node versions&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re using the &lt;code&gt;nodenv install&lt;/code&gt; command, then the list of available Node versions is not automatically updated when pulling from the nodenv repo. To do this manually:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd ~/.nodenv/plugins/node-build&#xA;$ git pull&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How nodenv hooks into your shell&lt;/h3&gt; &#xA;&lt;p&gt;Skip this section unless you must know what every line in your shell profile is doing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;nodenv init&lt;/code&gt; is the only command that crosses the line of loading extra commands into your shell. Here&#39;s what &lt;code&gt;nodenv init&lt;/code&gt; actually does:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Sets up your shims path. This is the only requirement for nodenv to function properly. You can do this by hand by prepending &lt;code&gt;~/.nodenv/shims&lt;/code&gt; to your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Installs autocompletion. This is entirely optional but pretty useful. Sourcing &lt;code&gt;~/.nodenv/completions/nodenv.bash&lt;/code&gt; will set that up. There is also a &lt;code&gt;~/.nodenv/completions/nodenv.zsh&lt;/code&gt; for Zsh users.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Rehashes shims. From time to time you&#39;ll need to rebuild your shim files. Doing this automatically makes sure everything is up to date. You can always run &lt;code&gt;nodenv rehash&lt;/code&gt; manually.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Installs the sh dispatcher. This bit is also optional, but allows nodenv and plugins to change variables in your current shell, making commands like &lt;code&gt;nodenv shell&lt;/code&gt; possible. The sh dispatcher doesn&#39;t do anything invasive like override &lt;code&gt;cd&lt;/code&gt; or hack your shell prompt, but if for some reason you need &lt;code&gt;nodenv&lt;/code&gt; to be a real script rather than a shell function, you can safely skip it.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Run &lt;code&gt;nodenv init -&lt;/code&gt; for yourself to see exactly what happens under the hood.&lt;/p&gt; &#xA;&lt;h3&gt;Installing Node versions&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;nodenv install&lt;/code&gt; command doesn&#39;t ship with nodenv out of the box, but is provided by the &lt;a href=&#34;https://github.com/nodenv/node-build#readme&#34;&gt;node-build&lt;/a&gt; project. If you installed it as part of GitHub checkout process outlined above you should be able to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# list all available versions:&#xA;$ nodenv install -l&#xA;&#xA;# install a Node version:&#xA;$ nodenv install 0.10.26&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively to the &lt;code&gt;install&lt;/code&gt; command, you can download and compile Node manually as a subdirectory of &lt;code&gt;~/.nodenv/versions/&lt;/code&gt;. An entry in that directory can also be a symlink to a Node version installed elsewhere on the filesystem. nodenv doesn&#39;t care; it will simply treat any entry in the &lt;code&gt;versions/&lt;/code&gt; directory as a separate Node version. Additionally, &lt;code&gt;nodenv&lt;/code&gt; has special support for an &lt;code&gt;lts/&lt;/code&gt; subdirectory inside &lt;code&gt;versions/&lt;/code&gt;. This works great with the &lt;a href=&#34;https://github.com/nodenv/nodenv-aliases&#34;&gt;&lt;code&gt;nodenv-aliases&lt;/code&gt;&lt;/a&gt; plugin, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd ~/.nodenv/versions&#xA;$ mkdir lts&#xA;&#xA;# Create a symlink that allows to use &#34;lts/erbium&#34; as a nodenv version&#xA;# that always points to the latest Node 12 version that is installed.&#xA;$ ln -s ../12 lts/erbium&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Uninstalling Node versions&lt;/h3&gt; &#xA;&lt;p&gt;As time goes on, Node versions you install will accumulate in your &lt;code&gt;~/.nodenv/versions&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;To remove old Node versions, simply &lt;code&gt;rm -rf&lt;/code&gt; the directory of the version you want to remove. You can find the directory of a particular Node version with the &lt;code&gt;nodenv prefix&lt;/code&gt; command, e.g. &lt;code&gt;nodenv prefix 0.8.22&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/nodenv/node-build#readme&#34;&gt;node-build&lt;/a&gt; plugin provides an &lt;code&gt;nodenv uninstall&lt;/code&gt; command to automate the removal process.&lt;/p&gt; &#xA;&lt;h3&gt;Uninstalling nodenv&lt;/h3&gt; &#xA;&lt;p&gt;The simplicity of nodenv makes it easy to temporarily disable it, or uninstall from the system.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;To &lt;strong&gt;disable&lt;/strong&gt; nodenv managing your Node versions, simply remove the &lt;code&gt;nodenv init&lt;/code&gt; line from your shell startup configuration. This will remove nodenv shims directory from &lt;code&gt;$PATH&lt;/code&gt;, and future invocations like &lt;code&gt;node&lt;/code&gt; will execute the system Node version, as before nodenv.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;nodenv&lt;/code&gt; will still be accessible on the command line, but your Node apps won&#39;t be affected by version switching.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;To completely &lt;strong&gt;uninstall&lt;/strong&gt; nodenv, perform step (1) and then remove its root directory. This will &lt;strong&gt;delete all Node versions&lt;/strong&gt; that were installed under &lt;code&gt;`nodenv root`/versions/&lt;/code&gt; directory:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; rm -rf `nodenv root`&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you&#39;ve installed nodenv using a package manager, as a final step perform the nodenv package removal. For instance, for Homebrew:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; brew uninstall nodenv&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Command Reference&lt;/h2&gt; &#xA;&lt;p&gt;Like &lt;code&gt;git&lt;/code&gt;, the &lt;code&gt;nodenv&lt;/code&gt; command delegates to subcommands based on its first argument. The most common subcommands are:&lt;/p&gt; &#xA;&lt;h3&gt;nodenv local&lt;/h3&gt; &#xA;&lt;p&gt;Sets a local application-specific Node version by writing the version name to a &lt;code&gt;.node-version&lt;/code&gt; file in the current directory. This version overrides the global version, and can be overridden itself by setting the &lt;code&gt;NODENV_VERSION&lt;/code&gt; environment variable or with the &lt;code&gt;nodenv shell&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nodenv local 0.10.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When run without a version number, &lt;code&gt;nodenv local&lt;/code&gt; reports the currently configured local version. You can also unset the local version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nodenv local --unset&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;nodenv global&lt;/h3&gt; &#xA;&lt;p&gt;Sets the global version of Node to be used in all shells by writing the version name to the &lt;code&gt;~/.nodenv/version&lt;/code&gt; file. This version can be overridden by an application-specific &lt;code&gt;.node-version&lt;/code&gt; file, or by setting the &lt;code&gt;NODENV_VERSION&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nodenv global 0.10.26&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The special version name &lt;code&gt;system&lt;/code&gt; tells nodenv to use the system Node (detected by searching your &lt;code&gt;$PATH&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;When run without a version number, &lt;code&gt;nodenv global&lt;/code&gt; reports the currently configured global version.&lt;/p&gt; &#xA;&lt;h3&gt;nodenv shell&lt;/h3&gt; &#xA;&lt;p&gt;Sets a shell-specific Node version by setting the &lt;code&gt;NODENV_VERSION&lt;/code&gt; environment variable in your shell. This version overrides application-specific versions and the global version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nodenv shell 0.11.11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When run without a version number, &lt;code&gt;nodenv shell&lt;/code&gt; reports the current value of &lt;code&gt;NODENV_VERSION&lt;/code&gt;. You can also unset the shell version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nodenv shell --unset&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you&#39;ll need nodenv&#39;s shell integration enabled (step 3 of the installation instructions) in order to use this command. If you prefer not to use shell integration, you may simply set the &lt;code&gt;NODENV_VERSION&lt;/code&gt; variable yourself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ export NODENV_VERSION=0.10.26&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;nodenv versions&lt;/h3&gt; &#xA;&lt;p&gt;Lists all Node versions known to nodenv, and shows an asterisk next to the currently active version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nodenv versions&#xA;  0.8.22&#xA;  0.9.12&#xA;  * 0.10.0 (set by /Users/will/.nodenv/version)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will also list symlinks to specific Node versions inside the &lt;code&gt;~/.nodenv/versions&lt;/code&gt; or &lt;code&gt;~/.nodenv/versions/lts&lt;/code&gt; directories.&lt;/p&gt; &#xA;&lt;h3&gt;nodenv version&lt;/h3&gt; &#xA;&lt;p&gt;Displays the currently active Node version, along with information on how it was set.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nodenv version&#xA;0.10.0 (set by /Users/OiNutter/.nodenv/version)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;nodenv rehash&lt;/h3&gt; &#xA;&lt;p&gt;Installs shims for all Node executables known to nodenv (i.e., &lt;code&gt;~/.nodenv/versions/*/bin/*&lt;/code&gt; and &lt;code&gt;~/.nodenv/versions/lts/*/bin/*&lt;/code&gt;). Run this command after you install a new version of Node, or install an npm package that provides an executable binary.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nodenv rehash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;note:&lt;/strong&gt; the &lt;a href=&#34;https://github.com/nodenv/nodenv-package-rehash&#34;&gt;package-rehash plugin&lt;/a&gt; automatically runs &lt;code&gt;nodenv rehash&lt;/code&gt; whenever an npm package is installed globally&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;nodenv which&lt;/h3&gt; &#xA;&lt;p&gt;Displays the full path to the executable that nodenv will invoke when you run the given command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nodenv which npm&#xA;/Users/will/.nodenv/versions/0.10.26/bin/npm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;nodenv whence&lt;/h3&gt; &#xA;&lt;p&gt;Lists all Node versions with the given command installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nodenv whence npm&#xA;0.10.0&#xA;0.9.12&#xA;0.8.22&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Environment variables&lt;/h2&gt; &#xA;&lt;p&gt;You can affect how nodenv operates with the following settings:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;name&lt;/th&gt; &#xA;   &lt;th&gt;default&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;NODENV_VERSION&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specifies the Node version to be used.&lt;br&gt;Also see &lt;a href=&#34;https://raw.githubusercontent.com/nodenv/nodenv/master/#nodenv-shell&#34;&gt;&lt;code&gt;nodenv shell&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;NODENV_ROOT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;~/.nodenv&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Defines the directory under which Node versions and shims reside.&lt;br&gt;Also see &lt;code&gt;nodenv root&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;NODENV_DEBUG&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Outputs debug information.&lt;br&gt;Also as: &lt;code&gt;nodenv --debug &amp;lt;subcommand&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;NODENV_HOOK_PATH&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/rbenv/rbenv/wiki/Authoring-plugins#rbenv-hooks&#34;&gt;&lt;em&gt;see wiki&lt;/em&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Colon-separated list of paths searched for nodenv hooks.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;NODENV_DIR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$PWD&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Directory to start searching for &lt;code&gt;.node-version&lt;/code&gt; files.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;The nodenv source code is &lt;a href=&#34;https://github.com/nodenv/nodenv&#34;&gt;hosted on GitHub&lt;/a&gt;. It&#39;s clean, modular, and easy to understand, even if you&#39;re not a shell hacker.&lt;/p&gt; &#xA;&lt;p&gt;Tests are executed using &lt;a href=&#34;https://github.com/sstephenson/bats&#34;&gt;Bats&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bats test&#xA;$ bats test/&amp;lt;file&amp;gt;.bats&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please feel free to submit pull requests and file bugs on the &lt;a href=&#34;https://github.com/nodenv/nodenv/issues&#34;&gt;issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Credits&lt;/h3&gt; &#xA;&lt;p&gt;Forked from &lt;a href=&#34;https://github.com/sstephenson&#34;&gt;Sam Stephenson&lt;/a&gt;&#39;s &lt;a href=&#34;https://github.com/rbenv/rbenv&#34;&gt;rbenv&lt;/a&gt; by &lt;a href=&#34;https://github.com/oinutter&#34;&gt;Will McKenzie&lt;/a&gt; and modified for node.&lt;/p&gt;</summary>
  </entry>
</feed>