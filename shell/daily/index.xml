<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-18T01:38:58Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hackerschoice/segfault</title>
    <updated>2022-10-18T01:38:58Z</updated>
    <id>tag:github.com,2022-10-18:/hackerschoice/segfault</id>
    <link href="https://github.com/hackerschoice/segfault" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;segfault.net - A Server Centre Depoyment&lt;/h1&gt; &#xA;&lt;p&gt;This page is for server administrators and those folks who like to run their own Segfault.net Server Centre (SSC). Running your own SSC allows you to offer root-servers to other users.&lt;/p&gt; &#xA;&lt;p&gt;If this is not what you want and you just like to get a root-shell on your own server then please go to &lt;a href=&#34;http://www.thc.org/segfault&#34;&gt;https://www.thc.org/segfault&lt;/a&gt; or try our demo deployment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ssh root@segfault.net # the password is &#39;segfault&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Deploy a Server Centre:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone --depth 1 https://github.com/hackerschoice/segfault.git &amp;amp;&amp;amp; \&#xA;cd segfault &amp;amp;&amp;amp; \&#xA;export SF_SEED=&#34;$(head -c 1024 /dev/urandom | tr -dc &#39;[:alpha:]&#39; | head -c 32)&#34; &amp;amp;&amp;amp; \&#xA;echo &#34;SF_SEED=${SF_SEED}&#34; &amp;amp;&amp;amp; \&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To start execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SF_BASEDIR=&#34;$(pwd)&#34; SF_SSH_PORT=2222 sfbin/sf up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Take a look at &lt;code&gt;provision/env.example&lt;/code&gt; for a sample &lt;code&gt;.env&lt;/code&gt; file. Configure the test of the variables in &lt;code&gt;config/etc/sf/sf.conf&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Provisioning&lt;/h1&gt; &#xA;&lt;p&gt;Provisioning turns a freshly created Linux (a bare minimum Installation) into a SSC. It&#39;s how we &#39;ready&#39; a newly launched AWS Instance for SSC deployment. You likely dont ever need this but &lt;a href=&#34;https://github.com/hackerschoice/segfault/wiki/AWS-Deployment&#34;&gt;we wrote it down anyway&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Telegram: &lt;a href=&#34;https://t.me/thcorg&#34;&gt;https://t.me/thcorg&lt;/a&gt;&lt;br&gt; Twitter: &lt;a href=&#34;https://twitter.com/hackerschoice&#34;&gt;https://twitter.com/hackerschoice&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kboghdady/youTube_ads_4_pi-hole</title>
    <updated>2022-10-18T01:38:58Z</updated>
    <id>tag:github.com,2022-10-18:/kboghdady/youTube_ads_4_pi-hole</id>
    <link href="https://github.com/kboghdady/youTube_ads_4_pi-hole" rel="alternate"></link>
    <summary type="html">&lt;p&gt;YouTube script to add the new Ads list for Pi-hole&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Blocking status &lt;span&gt;✅&lt;/span&gt; --Blocking Working good ) &lt;br&gt; Buy me a coffee via paypal &lt;a href=&#34;https://paypal.me/KBoghdady?locale.x=en_US&#34;&gt;&lt;img src=&#34;https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif&#34; alt=&#34;paypal&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Buy me Coffee with XLM GDQP2KPQGKIHYJGXNUIYOMHARUARCA7DJT5FO2FFOOKY3B2WSQHG4W37&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Buy me Coffee with BitCoin 36fD957SDWHJYYzuH2xmceJ6T2qE9vNiV4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Buy me Coffee with XRP rw2ciyaNshpHe7bCHo4bRWq6pqqynnWKQg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Buy me Coffee with BAT 0xb9f4845dbEd1FB1Dae90D8e203037B5623B66666&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Buy me Coffee with XMR&#xA;46RGtwR2gS3UsjCtmzX7mGAXsXj6ui4ZbiwRhbeMuB7jHYUHhxot5JgRVwVT3dpnQqRk9qsd4N6NXhsjREKhfMmCUTMffLq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Script to add YouTube Ads DNS to Pi-hole black list&lt;/h1&gt; &#xA;&lt;h1&gt;You can add this link to your gravity list by going to&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://piholeIPAddress/admin/groups-adlists.php&#34;&gt;http://piholeIPAddress/admin/groups-adlists.php&lt;/a&gt; &lt;br&gt; &lt;code&gt;https://raw.githubusercontent.com/kboghdady/youTube_ads_4_pi-hole/master/youtubelist.txt&lt;/code&gt; &lt;br&gt;&lt;br&gt; and the list added by the crowed &lt;span color=&#34;red&#34;&gt;Keep in mind the crowd list it is all DNS gathered by the crowd WITHOUT filtering the block DNS &lt;/span&gt; &lt;br&gt; &lt;code&gt;https://raw.githubusercontent.com/kboghdady/youTube_ads_4_pi-hole/master/crowed_list.txt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Also, add script to update the gravity list containing these lines : &lt;code&gt;pihole -g&lt;/code&gt; &lt;code&gt;sudo pihole restartdns&lt;/code&gt; if you experience youtube loops or blocking to the actual video while using the gravity &lt;br&gt; Please clear the gravity domain list as it sometimes keep the ignore list :&lt;br&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/usr/bin/sqlite3 /etc/pihole/gravity.db &#34;delete from gravity where domain like &#39;%googlevideo.com%&#39; &#34;&#xA;pihole -g&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;How the script works&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It will get the black.list from my github which is updated daily or every two days&lt;/li&gt; &#xA; &lt;li&gt;It will update both the black.list and blacklist.txt files where the blocking of pihole happens&lt;/li&gt; &#xA; &lt;li&gt;It will remove any dupiclates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;it will be more effective if you add it the crontab &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Steps: &lt;br&gt;&lt;br&gt; 1- Download the script from github using this command : &lt;br&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/kboghdady/youTube_ads_4_pi-hole.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd youTube_ads_4_pi-hole&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2- Change where the repo directory in youtube.sh&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;repoDir=&#39;/pi/youTube_ads_4_pi-hole&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3- Make the script executable&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo chmod a+x youtube.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;4- Create a scheduled task to run the script: &lt;br&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo crontab -e &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;5-Add this line to make it runs every 1 hour, but you can change it to whatever you like&lt;br&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0 */1 * * * sudo /home/pi/youTube_ads_4_pi-hole/youtube.sh &amp;gt;/dev/null &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where the script location is /home/pi/youTube_ads_4_pi-hole/youtube.sh &lt;br&gt; more information about crontab &lt;a href=&#34;https://crontab.guru&#34;&gt;https://crontab.guru&lt;/a&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h1&gt;if you want to delete all blacklist from your database in case of issues&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;/usr/bin/sqlite3 /etc/pihole/gravity.db &#34;delete from domainlist where domain like &#39;%googlevideo.com%&#39; &#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;NOTE : if you are using the default pihole gravity make sure to whitelit s.youtube.com which blocks the videos&lt;/h1&gt; &#xA;&lt;p&gt;this default list has it : &lt;a href=&#34;https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts&#34;&gt;https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lxhao61/integrated-examples</title>
    <updated>2022-10-18T01:38:58Z</updated>
    <id>tag:github.com,2022-10-18:/lxhao61/integrated-examples</id>
    <link href="https://github.com/lxhao61/integrated-examples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;以Xray或v2ray（V4）、trojan或trojan-go、naiveproxy、hysteria等打造科学上网的优化配置及最优组合示例，且提供集成常用插件的caddy（caddy2）程序，分享给大家食用及自己备份。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;这里是分享怎么搭建主流科学上网的优化配置及最优组合示例（如是不太了解科学上网，建议先依次从简单到复杂参考及部署。），其特点如下：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;实现了SNI分流应用的端口分流到进程分流及启用PROXY protocol的从低到高（效率）应用支持。&lt;/li&gt; &#xA; &lt;li&gt;实现了回落应用的端口回落/分流到进程回落/分流及启用PROXY protocol的从低到高（效率）应用支持。&lt;/li&gt; &#xA; &lt;li&gt;实现了反代应用的端口转发到进程转发的从低到高（效率）应用支持。&lt;/li&gt; &#xA; &lt;li&gt;实现了nginx SNI分流（TCP转发）与定向UDP转发，以支持SNI分流后的naiveproxy HTTP/3代理应用。&lt;/li&gt; &#xA; &lt;li&gt;实现了caddy Caddyfile配置开启H2C server、H2C proxy及接收PROXY protocol等应用支持，让caddy配置简单化。&lt;/li&gt; &#xA; &lt;li&gt;实现了caddy json配置SNI分流应用，且支持针对转发端口或进程开启或关闭发送PROXY protocol，灵活性等同haproxy SNI分流。&lt;/li&gt; &#xA; &lt;li&gt;实现了caddy与Xray相关应用的SSL/TLS证书申请与更新全自动化。&lt;/li&gt; &#xA; &lt;li&gt;实现了CDN流量中转（基于WebSocket over TLS或基于gRPC over TLS）与正常应用同时使用。&lt;/li&gt; &#xA; &lt;li&gt;实现了除v2ray(vless\vmess+kcp+seed)与hysteria应用外，其它应用对外都使用443端口，各应用互不影响。&lt;/li&gt; &#xA; &lt;li&gt;实现了除v2ray(vless\vmess+kcp+seed)与hysteria应用外，其它应用都支持流量伪装与防探测，且提供流量伪装与防探测的回落或代理网站都支持HTTP自动跳转到HTTPS，SSL/TLS安全评估报告为A+等，即所有特征完全与真实网站一致。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;备注：&lt;/strong&gt; 端口分流、端口回落/分流、端口转发是指基于Local Loopback连接的不同功能应用分类；进程分流、进程回落/分流、进程转发是指基于Unix Domain Socket（UDS）连接的不同功能应用分类。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;服务端单一/简单应用配置示例&lt;/h3&gt; &#xA;&lt;h4&gt; Xray/v2ray kcp+seed应用&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/v2ray(vless%5Cvmess%2Bkcp%2Bseed)&#34;&gt;v2ray(vless\vmess+kcp+seed)&lt;/a&gt; （vless+kcp+seed/vmess+kcp+seed应用。vless+kcp+seed标记为A。）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt; hysteria应用&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/hysteria&#34;&gt;hysteria&lt;/a&gt; （基于QUIC协议修改的双边加速代理应用。）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt; Xray/v2ray WebSocket反代应用&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/v2ray(vless%5Cvmess%2BWS)%2Bcaddy%5Cnginx&#34;&gt;v2ray(vless\vmess+WS)+caddy\nginx&lt;/a&gt; （vless+ws+tls/vmess+ws+tls反代应用。vless+ws+tls标记为B。）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/v2ray(SS%2BWS)%2Bcaddy%5Cnginx&#34;&gt;v2ray(SS+WS)+caddy\nginx&lt;/a&gt; （shadowsocks+ws+tls反代应用。）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/v2ray(SS%2Bv2ray-plugin)%2Bcaddy%5Cnginx&#34;&gt;v2ray(SS+v2ray-plugin)+caddy\nginx&lt;/a&gt; （兼容原版shadowsocks加v2ray-plugin插件的WS反代应用。）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/v2ray(trojan%2BWS)%2Bcaddy%5Cnginx&#34;&gt;v2ray(trojan+WS)+caddy\nginx&lt;/a&gt; （trojan+ws+tls反代应用。标记为C。）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt; Xray/v2ray H2C反代应用&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/v2ray(vless%5Cvmess%2Bh2c)%2Bcaddy&#34;&gt;v2ray(vless\vmess+h2c)+caddy&lt;/a&gt; （vless+h2c+tls/vmess+h2c+tls反代应用。vless+h2c+tls标记为D。）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/v2ray(trojan%2Bh2c)%2Bcaddy&#34;&gt;v2ray(trojan+h2c)+caddy&lt;/a&gt; （trojan+h2c+tls反代应用。）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt; Xray/v2ray gRPC反代应用&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/v2ray(vless%5Cvmess%2Bgrpc)%2Bcaddy%5Cnginx&#34;&gt;v2ray(vless\vmess+grpc)+caddy\nginx&lt;/a&gt;（vless+grpc+tls/vmess+grpc+tls反代应用。）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/v2ray(SS%2Bgrpc)%2Bcaddy%5Cnginx&#34;&gt;v2ray(SS+grpc)+caddy\nginx&lt;/a&gt;（兼容原版shadowsocks加v2ray-plugin插件的gRPC反代应用。标记为G。）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/v2ray(trojan%2Bgrpc)%2Bcaddy%5Cnginx&#34;&gt;v2ray(trojan+grpc)+caddy\nginx&lt;/a&gt;（trojan+grpc+tls反代应用。）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt; caddy插件应用&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/naiveproxy(caddy%2Bforwardproxy)&#34;&gt;naiveproxy(caddy+forwardproxy)&lt;/a&gt; （基于caddy插件的naiveproxy应用。标记为N。）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/trojan-go(caddy%2Bcaddy-trojan)&#34;&gt;trojan-go(caddy+caddy-trojan)&lt;/a&gt; （基于caddy插件的trojan-go应用。标记为T。）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/caddy(N%2BT)&#34;&gt;caddy(N+T)&lt;/a&gt; （基于caddy插件的naiveproxy与trojian-go应用。）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt; trojan-go/trojan回落应用&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/trojan-go%5Ctrojan%2Bnginx&#34;&gt;trojan-go\trojan+nginx&lt;/a&gt; （trojan-go/trojan回落nginx应用。）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/trojan-go%5Ctrojan%2Bnaiveproxy&#34;&gt;trojan-go\trojan+naiveproxy&lt;/a&gt; （trojan-go/trojan加naiveproxy应用。）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt; Xray/v2ray回落应用&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/v2ray(vless%5Ctrojan%2Btcp%2Btls)%2Bnginx&#34;&gt;v2ray(vless\trojan+tcp+tls)+nginx&lt;/a&gt; （vless+tcp+tls/xtls或trojan+tcp+tls/xtls回落nginx应用。分别标记为E与F。）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/v2ray(vless%5Ctrojan%2Btcp%2Btls)%2Bcaddy&#34;&gt;v2ray(vless\trojan+tcp+tls)+caddy&lt;/a&gt; （vless+tcp+tls/xtls或trojan+tcp+tls/xtls回落caddy应用。分别标记为E与F。）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;服务端综合应用配置示例&lt;/h3&gt; &#xA;&lt;h4&gt; Xray/v2ray反代为主的综合应用&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/v2ray(B%2BC%2BG%2BA)%2Bnginx&#34;&gt;v2ray(B+C+G+A)+nginx&lt;/a&gt; （反向代理WebSocket、gRPC的综合应用。）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/v2ray(B%2BC%2BD%2BG%2BA)%2Bcaddy(N%2BT)&#34;&gt;v2ray(B+C+D+G+A)+caddy(N+T)&lt;/a&gt; （反向代理WebSocket、H2C、gRPC加naiveproxy与trojian-go的综合应用。）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt; Xray/v2ray vless回落应用为主的综合应用&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/v2ray(E%2BB%2BC%2BG%2BA)%2Bnginx&#34;&gt;v2ray(E+B+C+G+A)+nginx&lt;/a&gt; （以vless+tcp+tls/xtls为主的综合应用。）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/v2ray(E%2BB%2BC%2BD%2BG%2BA)%2Bcaddy(N%2BT)&#34;&gt;v2ray(E+B+C+D+G+A)+caddy(N+T)&lt;/a&gt; （以vless+tcp+tls/xtls为主加naiveproxy与trojian-go的综合应用。）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt; Xray/v2ray trojan回落应用为主的综合应用&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/v2ray(F%2BB%2BC%2BG%2BA)%2Bnginx&#34;&gt;v2ray(F+B+C+G+A)+nginx&lt;/a&gt; （以trojan+tcp+tls/xtls为主的综合应用。）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/v2ray(F%2BB%2BC%2BD%2BG%2BA)%2Bnaiveproxy&#34;&gt;v2ray(F+B+C+D+G+A)+naiveproxy&lt;/a&gt; （以trojan+tcp+tls/xtls为主加naiveproxy的综合应用。）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt; Xray/v2ray以套娃方式实现vless与trojan回落共存的综合应用&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/v2ray(E%2BB%2BC%2BF%2BA)%2Bnginx&#34;&gt;v2ray(E+B+C+F+A)+nginx&lt;/a&gt; （由套娃方式实现的综合应用。）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/v2ray(E%2BB%2BC%2BF%2BA)%2Bcaddy&#34;&gt;v2ray(E+B+C+F+A)+caddy&lt;/a&gt; （由套娃方式实现的综合应用。）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt; 以nginx/caddy兼顾SNI分流实现Xray/v2ray的vless与trojan回落共存综合应用&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/v2ray(E%2BB%2BF%2BC%2BG%2BA)%2Bnginx&#34;&gt;v2ray(E+B+F+C+G+A)+nginx&lt;/a&gt; （由nginx兼顾SNI分流实现的综合应用。）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/v2ray(E%2BB%2BF%2BC%2BD%2BG%2BA)%2Bnaiveproxy&#34;&gt;v2ray(E+B+F+C+D+G+A)+naiveproxy&lt;/a&gt; （由caddy兼顾SNI分流实现的综合应用。）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt; 以nginx/caddy兼顾SNI分流实现Xray/v2ray的vless回落与rojan-go/trojan回落共存的综合应用&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/v2ray(E%2BB%2BC%2BG%2BA)%2Btrojan%2Bnginx&#34;&gt;v2ray(E+B+C+G+A)+trojan+nginx&lt;/a&gt; （由nginx兼顾SNI分流实现的综合应用。）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/v2ray(E%2BB%2BC%2BD%2BG%2BA)%2Btrojan%2Bnaiveproxy&#34;&gt;v2ray(E+B+C+D+G+A)+trojan+naiveproxy&lt;/a&gt; （由caddy兼顾SNI分流实现的综合应用。）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt; 由nginx/haproxy专职SNI分流实现兼顾各方优势的综合应用&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/v2ray(E%2BB%2BC%2BD%2BG%2BA)%2Btrojan%2Bnaiveproxy%2Bnginx%5Chaproxy&#34;&gt;v2ray(E+B+C+D+G+A)+trojan+naiveproxy+nginx\haproxy&lt;/a&gt; （trojan-go/trojan由原版实现的综合应用。）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/v2ray(E%2BB%2BC%2BD%2BG%2BA)%2Bcaddy(N%2BT)%2Bnginx%5Chaproxy&#34;&gt;v2ray(E+B+C+D+G+A)+caddy(N+T)+nginx\haproxy&lt;/a&gt; （trojan-go/trojan由caddy插件实现的综合应用。）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/v2ray(E%2BB%2BF%2BC%2BD%2BG%2BA)%2Bnaiveproxy%2Bnginx%5Chaproxy&#34;&gt;v2ray(E+B+F+C+D+G+A)+naiveproxy+nginx\haproxy&lt;/a&gt; （trojan/trojan-go由Xray/v2ray配置实现的综合应用。）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt; 注意（以上所有示例）:&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;v2ray从v4.33.0版开始删除了XTLS应用，故若还想用XTLS应用，请选Xray。Xray是v2ray的超集（更好的整体性能和XTLS等一系列增强，且完全兼容。），也是因为这个应用分家独自发展。&lt;/li&gt; &#xA; &lt;li&gt;Xray/v2ray单一核心应用简记：A=vless+kcp+seed、B=vless+ws+tls、C=trojan+ws+tls、D=vless+h2c+tls、E=vless+tcp+tls/xtls、F=trojan+tcp+tls/xtls、G=shadowsocks+grpc+tls。&lt;/li&gt; &#xA; &lt;li&gt;所有Xray/v2ray配置文件都配置了禁用BT。如不需要，可以删除相关配置，参考v2ray(other configuration)中BT_config.json文件。&lt;/li&gt; &#xA; &lt;li&gt;caddy插件单一应用简记：N=naiveproxy(caddy+forwardproxy)、T=trojan-go(caddy+caddy-trojan)。&lt;/li&gt; &#xA; &lt;li&gt;目前caddy采用UDS监听不支持HTTP/3，即仅端口监听才支持开启HTTP/3。&lt;/li&gt; &#xA; &lt;li&gt;受限应用条件及场景，naiveproxy的QUIC应用（即caddy的HTTP/3代理应用）不是所有相关naiveproxy示例都支持。&lt;/li&gt; &#xA; &lt;li&gt;当前caddy从Let&#39;s Encrypt或ZeroSSL自动申请的SSL/TLS证书都为ECC证书。&lt;/li&gt; &#xA; &lt;li&gt;流量伪装与防探测网站可由其它WEB应用软件实现，其反代支持能力（WebSocket、gRPC及H2C）与回落支持能力（H2C server及HTTP/1.1 server）取决于自身，配置自行参考caddy或nginx对应示例。&lt;/li&gt; &#xA; &lt;li&gt;附加相关插件的caddy程序文件已编译好，去本人Releases中下载即可。&lt;/li&gt; &#xA; &lt;li&gt;trojan-go安卓客户端可以去本人Releases中下载（最末）。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;服务端特殊应用配置示例&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/v2ray(other%20configuration)&#34;&gt;v2ray(other configuration)&lt;/a&gt; （Xray或v2ray的特色应用配置方法。）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/nginx(other%20configuration)&#34;&gt;nginx(other configuration)&lt;/a&gt; （nginx SNI分流应用配置方法。）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/caddy(other%20configuration)&#34;&gt;caddy(other configuration)&lt;/a&gt; （caddy的特色应用配置方法。）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;原版客户端配置示例&lt;/h3&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/client%20configuration&#34;&gt;client configuration&lt;/a&gt;（若使用第三方客户端参考即可。）&lt;/p&gt; &#xA;&lt;h3&gt;systemd服务文件&lt;/h3&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://github.com/lxhao61/integrated-examples/tree/main/service%20configuration&#34;&gt;service configuration&lt;/a&gt;（配置软件服务由systemd管理。）&lt;/p&gt; &#xA;&lt;h3&gt;使用/贡献指南&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;若科学上网相关软件增加新功能，开始在服务端单一应用配置示例中添加；过一段时间（测试及验证稳定后）才会服务端综合应用配置示例中添加。&lt;/li&gt; &#xA; &lt;li&gt;欢迎你提交 PR，如对现行配置示例优化修订，或将自己使用的配置制作模板提交等。&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>