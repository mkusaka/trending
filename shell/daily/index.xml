<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-01T01:34:35Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kiwicopple/serverless-postgres</title>
    <updated>2024-06-01T01:34:35Z</updated>
    <id>tag:github.com,2024-06-01:/kiwicopple/serverless-postgres</id>
    <link href="https://github.com/kiwicopple/serverless-postgres" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Serverless Postgres (experimental)&lt;/h1&gt; &#xA;&lt;p&gt;Serverless Postgres using Oriole, Fly Machines, and Tigris for S3 Storage.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;This is a MVP for Serverless Postgres.&lt;/p&gt; &#xA;&lt;p&gt;1/ It uses &lt;a href=&#34;https://fly.io&#34;&gt;Fly.io&lt;/a&gt;, which can automatically pause your database after all connections are released (and start it again when new connections join).&lt;/p&gt; &#xA;&lt;p&gt;2/ It uses &lt;a href=&#34;https://www.orioledb.com&#34;&gt;Oriole&lt;/a&gt;, a Postgres extension with &lt;a href=&#34;https://www.orioledb.com/docs/usage/decoupled-storage&#34;&gt;experimental support for S3 / Decoupled Storage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;3/ It uses &lt;a href=&#34;https://www.tigrisdata.com/&#34;&gt;Tigris&lt;/a&gt;, Globally Distributed S3-Compatible Object Storage. Oriole will automatically backup the data to Tigris using background workers.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you already have an account with &lt;a href=&#34;https://fly.io&#34;&gt;Fly.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Step 1: initialize your S3 store&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fly storage create # Keep the credentials, you&#39;ll need them in the next step&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step 2: set up credentials&lt;/h3&gt; &#xA;&lt;p&gt;Copy the sample env file and add your Tigris credentials from above:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cp .env.sample .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step 3: Running Postgres locally&lt;/h3&gt; &#xA;&lt;p&gt;Start Postgres locally using &lt;code&gt;docker compose up&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;(You may need to change the execute permissions on &lt;code&gt;./oriole/entrypoint-s3.sh&lt;/code&gt;.)&lt;/p&gt; &#xA;&lt;h3&gt;Step 4: Postgres usage&lt;/h3&gt; &#xA;&lt;p&gt;Enable the Oriole extension:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE extension orioledb;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a table and insert data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- Create a table to store blog posts&#xA;CREATE TABLE blog_post (&#xA;    id int8 NOT NULL,&#xA;    title text NOT NULL COLLATE &#34;C&#34;&#xA;) USING orioledb;&#xA;&#xA;-- Insert 1 million blog posts&#xA;INSERT INTO blog_post (select id, &#39;value&#39; || id from generate_series (1,1000000) id);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After this, you the Oriole background workers will store the data in Tigris. You can login to Tigris using &lt;code&gt;fly storage dashboard&lt;/code&gt; to view the data:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kiwicopple/serverless-postgres/main/docs/tigris-data.png&#34; alt=&#34;Serverless Postgres&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Deploy to Fly&lt;/h2&gt; &#xA;&lt;p&gt;TBD&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;I wouldn&#39;t recommend using this in production just yet. The goal of this repo is to showcase Oriole and start gathering feedback from anyone who wants to test it out. Please submit any Oriole bug reports to the &lt;a href=&#34;https://github.com/orioledb/orioledb&#34;&gt;Oriole GitHub repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Deploy to Fly&lt;/strong&gt;. I still need to document the secure deployment steps for Fly.io (PRs welcome).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Distributed read replicas&lt;/strong&gt;. Oriole can have many read-replicas reading from the same S3 bucket. This is a good pairing with Fly.io that makes it simple to launch servers around the world. Not that if you do this it&#39;s &lt;em&gt;very important&lt;/em&gt; that the read replicas do not write to the same bucket as your primary or the data will become corrupted.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Distributed data, without Postgres replication&lt;/strong&gt;. &lt;del&gt;Tigris will globally replicate objects that are less that 128 bytes. We would need to support global replication of all objects in this bucket if we want to create fast read replicas without Postgres replication.&lt;/del&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Tigris replicates any object that requires fast access regardless of the size. It is possible to &lt;a href=&#34;https://www.tigrisdata.com/docs/objects/object_regions/&#34;&gt;control this per object&lt;/a&gt;. I need to test this implementation but it should work &#34;in theory&#34;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Non-forked Postgres&lt;/strong&gt;. Oriole currently requires some &lt;a href=&#34;https://www.orioledb.com/docs#patch-set&#34;&gt;patches&lt;/a&gt; to the Postgres TAM API. The goal is to make them available in Postgres core.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Oriole Decoupled Storage&lt;/h2&gt; &#xA;&lt;p&gt;Oriole has &lt;a href=&#34;https://www.orioledb.com/docs/usage/decoupled-storage&#34;&gt;experimental support&lt;/a&gt; for S3.&lt;/p&gt; &#xA;&lt;p&gt;Oriole is a table storage extension for Postgres. It is designed to be a drop-in replacement for Postgres&#39; existing storage engine. The Oriole storage engine&#39;s reduction in disk IO is significant enough that it unlocks performant databases backed by S3 compatible blob storage.&lt;/p&gt; &#xA;&lt;p&gt;Data most-often accessed is cached in local storage for performance. The data is synced with S3 asynchronously:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kiwicopple/serverless-postgres/main/docs/oriole-logs.png&#34; alt=&#34;S3 Workers&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Read more in the &lt;a href=&#34;https://www.orioledb.com/docs/usage/decoupled-storage&#34;&gt;Oriole docs&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pretend-m/navicat_for_mac_reset</title>
    <updated>2024-06-01T01:34:35Z</updated>
    <id>tag:github.com,2024-06-01:/pretend-m/navicat_for_mac_reset</id>
    <link href="https://github.com/pretend-m/navicat_for_mac_reset" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;navicat16/17 mac版无限重置试用期脚本&lt;/h1&gt; &#xA;&lt;h2&gt;免责声明&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;本脚本为免费使用，本脚本只供个人学习使用，使用需严格遵守开源许可协议。严禁用于商业用途，禁止进行任何盈利活动。对一切非法使用所产生的后果，概不负责！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;脚本声明&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;本脚本适用于mac系统，不适用于windows&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;如果遇到bug问题，请反馈issue给我&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;使用说明&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;从 &lt;a href=&#34;https://www.navicat.com.cn/download/navicat-premium&#34;&gt;navicat premium&lt;/a&gt; 官网下载最新版。安装并运行，选择试用14天。&lt;/li&gt; &#xA; &lt;li&gt;待试用到期后，在终端进入脚本所在文件夹，运行重置脚本。执行命令：&lt;code&gt;sh reset_navicat.sh&lt;/code&gt; 或者 双击执行reset_navicat.command。&lt;/li&gt; &#xA; &lt;li&gt;使用双击执行reset_navicat.command注意事项: 1.reset_navicat.command与reset_navicat.sh需在同一目录下。2.初次使用需要授权安全性。3.如弹出无权限请进入终端，移动到当前文件夹，输入&lt;code&gt;sudo chmod -R 777 reset_navicat.command&lt;/code&gt;回车(需要输入本机密码)。然后则重新双击执行reset_navicat.command&lt;/li&gt; &#xA; &lt;li&gt;执行脚本前需要关闭navicat&lt;/li&gt; &#xA; &lt;li&gt;执行脚本后打开navicat查看是否重置成功&lt;/li&gt; &#xA; &lt;li&gt;如无变化则重新执行脚本，然后重启电脑，在打开navicat查看&lt;/li&gt; &#xA; &lt;li&gt;经测试可用版本如下:&lt;/li&gt; &#xA; &lt;li&gt;16.2.9&lt;/li&gt; &#xA; &lt;li&gt;16.3.0&lt;/li&gt; &#xA; &lt;li&gt;16.3.1&lt;/li&gt; &#xA; &lt;li&gt;16.3.2&lt;/li&gt; &#xA; &lt;li&gt;16.3.3&lt;/li&gt; &#xA; &lt;li&gt;16.3.4&lt;/li&gt; &#xA; &lt;li&gt;16.3.5&lt;/li&gt; &#xA; &lt;li&gt;16.3.6&lt;/li&gt; &#xA; &lt;li&gt;16.3.7&lt;/li&gt; &#xA; &lt;li&gt;16.3.8&lt;/li&gt; &#xA; &lt;li&gt;16.3.9&lt;/li&gt; &#xA; &lt;li&gt;17.0.6&lt;/li&gt; &#xA; &lt;li&gt;17.0.7&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;许可证&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pretend-m/navicat_for_mac_reset/main/image/LGPL.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>