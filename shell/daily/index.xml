<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-19T01:43:58Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AdrienPoupa/docker-compose-nas</title>
    <updated>2023-02-19T01:43:58Z</updated>
    <id>tag:github.com,2023-02-19:/AdrienPoupa/docker-compose-nas</id>
    <link href="https://github.com/AdrienPoupa/docker-compose-nas" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple Docker Compose NAS featuring Sonarr, Radarr, Prowlarr, Jellyfin, qBittorrent, PIA VPN and Traefik with SSL support&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Docker Compose NAS&lt;/h1&gt; &#xA;&lt;p&gt;After searching for the perfect NAS solution, I realized what I wanted could be achieved with some Docker containers on a vanilla Linux box. The result is an opinionated Docker Compose configuration capable of browsing indexers to retrieve media resources and downloading them through a Wireguard VPN with port forwarding. SSL certificates and remote access through Tailscale are supported.&lt;/p&gt; &#xA;&lt;p&gt;Requirements: Any Docker-capable recent Linux box with Docker Engine and Docker Compose V2. I am running it in Ubuntu Server 22.04; I also tested this setup on a Synology DS220+ with DSM 7.0.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Content&lt;/h2&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AdrienPoupa/docker-compose-nas/master/#docker-compose-nas&#34;&gt;Docker Compose NAS&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AdrienPoupa/docker-compose-nas/master/#table-of-content&#34;&gt;Table of Content&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AdrienPoupa/docker-compose-nas/master/#applications&#34;&gt;Applications&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AdrienPoupa/docker-compose-nas/master/#quick-start&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AdrienPoupa/docker-compose-nas/master/#environment-variables&#34;&gt;Environment Variables&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AdrienPoupa/docker-compose-nas/master/#pia-wireguard-vpn&#34;&gt;PIA Wireguard VPN&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AdrienPoupa/docker-compose-nas/master/#sonarr--radarr&#34;&gt;Sonarr &amp;amp; Radarr&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AdrienPoupa/docker-compose-nas/master/#file-structure&#34;&gt;File Structure&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AdrienPoupa/docker-compose-nas/master/#download-client&#34;&gt;Download Client&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AdrienPoupa/docker-compose-nas/master/#prowlarr&#34;&gt;Prowlarr&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AdrienPoupa/docker-compose-nas/master/#qbittorrent&#34;&gt;qBittorrent&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AdrienPoupa/docker-compose-nas/master/#jellyfin&#34;&gt;Jellyfin&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AdrienPoupa/docker-compose-nas/master/#traefik-and-ssl-certificates&#34;&gt;Traefik and SSL Certificates&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AdrienPoupa/docker-compose-nas/master/#accessing-from-the-outside-with-tailscale&#34;&gt;Accessing from the outside with Tailscale&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AdrienPoupa/docker-compose-nas/master/#optional-services&#34;&gt;Optional Services&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AdrienPoupa/docker-compose-nas/master/#flaresolverr&#34;&gt;FlareSolverr&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AdrienPoupa/docker-compose-nas/master/#adguard-home&#34;&gt;AdGuard Home&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AdrienPoupa/docker-compose-nas/master/#encryption&#34;&gt;Encryption&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AdrienPoupa/docker-compose-nas/master/#dhcp&#34;&gt;DHCP&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AdrienPoupa/docker-compose-nas/master/#expose-dns-server-with-tailscale&#34;&gt;Expose DNS Server with Tailscale&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AdrienPoupa/docker-compose-nas/master/#customization&#34;&gt;Customization&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AdrienPoupa/docker-compose-nas/master/#nfs-share&#34;&gt;NFS Share&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AdrienPoupa/docker-compose-nas/master/#static-ip&#34;&gt;Static IP&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AdrienPoupa/docker-compose-nas/master/#laptop-specific-configuration&#34;&gt;Laptop Specific Configuration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;h2&gt;Applications&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Application&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Image&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;URL&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sonarr.tv&#34;&gt;Sonarr&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PVR for newsgroup and bittorrent users&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/linuxserver/sonarr&#34;&gt;linuxserver/sonarr&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;/sonarr&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://radarr.video&#34;&gt;Radarr&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Movie collection manager for Usenet and BitTorrent users&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/linuxserver/radarr&#34;&gt;linuxserver/radarr&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;/radarr&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Prowlarr/Prowlarr&#34;&gt;Prowlarr&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Indexer aggregator for Sonarr and Radarr&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/linuxserver/prowlarr&#34;&gt;linuxserver/prowlarr:latest&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;/prowlarr&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/thrnz/docker-wireguard-pia&#34;&gt;PIA Wireguard VPN&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Encapsulate qBittorrent traffic in &lt;a href=&#34;https://www.privateinternetaccess.com/&#34;&gt;PIA&lt;/a&gt; using &lt;a href=&#34;https://www.wireguard.com/&#34;&gt;Wireguard&lt;/a&gt; with port forwarding.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/thrnz/docker-wireguard-pia&#34;&gt;thrnz/docker-wireguard-pia&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.qbittorrent.org&#34;&gt;qBittorrent&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bittorrent client with a complete web UI&lt;br&gt;Uses VPN network&lt;br&gt;Using Libtorrent 1.x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/linuxserver/qbittorrent&#34;&gt;linuxserver/qbittorrent:libtorrentv1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;/qbittorrent&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://jellyfin.org&#34;&gt;Jellyfin&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Media server designed to organize, manage, and share digital media files to networked devices&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/linuxserver/jellyfin&#34;&gt;linuxserver/jellyfin&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;/jellyfin&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://heimdall.site&#34;&gt;Heimdall&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Application dashboard&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/linuxserver/heimdall&#34;&gt;linuxserver/heimdall&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;/&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://traefik.io&#34;&gt;Traefik&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Reverse proxy&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/_/traefik&#34;&gt;traefik&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://containrrr.dev/watchtower/&#34;&gt;Watchtower&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Automated Docker images update&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/containrrr/watchtower&#34;&gt;containrrr/watchtower&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/FlareSolverr/FlareSolverr&#34;&gt;FlareSolverr&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Optional - Proxy server to bypass Cloudflare protection in Prowlarr&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/flaresolverr/flaresolverr&#34;&gt;flaresolverr/flaresolverr&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://adguard.com/en/adguard-home/overview.html&#34;&gt;AdGuard Home&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Optional - Network-wide software for blocking ads &amp;amp; tracking&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/adguard/adguardhome&#34;&gt;adguard/adguardhome&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/modem7/DHCP-Relay&#34;&gt;DHCP Relay&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Optional - Docker DHCP Relay&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/modem7/dhcprelay&#34;&gt;modem7/dhcprelay&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ldez/traefik-certs-dumper&#34;&gt;Traefik Certs Dumper&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Optional - Dump ACME data from Traefik to certificates&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/ldez/traefik-certs-dumper&#34;&gt;ldez/traefik-certs-dumper&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;cp .env.example .env&lt;/code&gt;, edit to your needs then &lt;code&gt;sudo docker compose up -d&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For the first time, run &lt;code&gt;./update-config.sh&lt;/code&gt; to update the applications base URLs.&lt;/p&gt; &#xA;&lt;h2&gt;Environment Variables&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;COMPOSE_FILE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Docker compose files to load&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;COMPOSE_PATH_SEPARATOR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Path separator between compose files to load&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;:&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;USER_ID&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ID of the user to use in Docker containers&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1000&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GROUP_ID&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ID of the user group to use in Docker containers&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1000&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;TIMEZONE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;TimeZone used by the container.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;America/New_York&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;DATA_ROOT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Host location of the data files&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/mnt/data&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;DOWNLOAD_ROOT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Host download location for qBittorrent, should be a subfolder of &lt;code&gt;DATA_ROOT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/mnt/data/torrents&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PIA_LOCATION&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Servers to use for PIA&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ca&lt;/code&gt; (Montreal, Canada)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PIA_USER&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PIA username&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PIA_PASS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PIA password&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PIA_LOCAL_NETWORK&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PIA local network&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;192.168.0.0/16&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;HOSTNAME&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Hostname of the NAS, could be a local IP or a domain name&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ADGUARD_HOSTNAME&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;AdGuard Home hostname used, if enabled&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;LETS_ENCRYPT_EMAIL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;E-mail address used to send expiration notifications&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CLOUDFLARE_EMAIL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;CloudFlare Account email&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CLOUDFLARE_DNS_API_TOKEN&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;API token with &lt;code&gt;DNS:Edit&lt;/code&gt; permission&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CLOUDFLARE_ZONE_API_TOKEN&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;API token with &lt;code&gt;Zone:Read&lt;/code&gt; permission&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;PIA Wireguard VPN&lt;/h2&gt; &#xA;&lt;p&gt;I chose PIA since it supports Wireguard and &lt;a href=&#34;https://github.com/thrnz/docker-wireguard-pia/issues/26#issuecomment-868165281&#34;&gt;port forwarding&lt;/a&gt;, but you could use other providers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenVPN: &lt;a href=&#34;https://hub.docker.com/r/linuxserver/openvpn-as&#34;&gt;linuxserver/openvpn-as&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wireguard: &lt;a href=&#34;https://hub.docker.com/r/linuxserver/wireguard&#34;&gt;linuxserver/wireguard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;NordVPN + OpenVPN: &lt;a href=&#34;https://hub.docker.com/r/bubuntux/nordvpn/dockerfile&#34;&gt;bubuntux/nordvpn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;NordVPN + Wireguard (NordLynx): &lt;a href=&#34;https://hub.docker.com/r/bubuntux/nordlynx&#34;&gt;bubuntux/nordlynx&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For PIA + Wireguard, fill &lt;code&gt;.env&lt;/code&gt; and fill it with your PIA credentials.&lt;/p&gt; &#xA;&lt;p&gt;The location of the server it will connect to is set by &lt;code&gt;LOC=ca&lt;/code&gt;, defaulting to Montreal - Canada.&lt;/p&gt; &#xA;&lt;h2&gt;Sonarr &amp;amp; Radarr&lt;/h2&gt; &#xA;&lt;h3&gt;File Structure&lt;/h3&gt; &#xA;&lt;p&gt;Sonarr and Radarr must be configured to support hardlinks, to allow instant moves and prevent using twice the storage (Bittorrent downloads and final file). The trick is to use a single volume shared by the Bittorrent client and the *arrs. Subfolders are used to separate the TV shows from the movies.&lt;/p&gt; &#xA;&lt;p&gt;The configuration is well explained by &lt;a href=&#34;https://trash-guides.info/Hardlinks/How-to-setup-for/Docker/&#34;&gt;this guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In summary, the final structure of the shared volume will be as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;data&#xA;├── torrents = shared folder qBittorrent downloads&#xA;│  ├── movies = movies downloads tagged by Radarr&#xA;│  └── tv = movies downloads tagged by Sonarr&#xA;└── media = shared folder for Sonarr and Radarr files&#xA;   ├── movies = Radarr&#xA;   └── tv = Sonarr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Go to Settings &amp;gt; Management. In Sonarr, set the Root folder to &lt;code&gt;/data/media/tv&lt;/code&gt;. In Radar, set the Root folder to &lt;code&gt;/data/media/movies&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Download Client&lt;/h3&gt; &#xA;&lt;p&gt;Then qBittorrent can be configured at Settings &amp;gt; Download Clients. Because all the networking for qBittorrent takes place in the VPN container, the hostname for qBittorrent is the hostname of the VPN container, ie &lt;code&gt;vpn&lt;/code&gt;, and the port is &lt;code&gt;8080&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;h2&gt;Prowlarr&lt;/h2&gt; &#xA;&lt;p&gt;The indexers are configured through Prowlarr. They synchronize automatically to Radarr and Sonarr.&lt;/p&gt; &#xA;&lt;p&gt;Radarr and Sonarr may then be added via Settings &amp;gt; Apps. The Prowlarr server is &lt;code&gt;http://prowlarr:9696/prowlarr&lt;/code&gt;, the Radarr server is &lt;code&gt;http://radarr:7878/radarr&lt;/code&gt; and Sonarr &lt;code&gt;http://sonarr:8989/sonarr&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;Their API keys can be found in Settings &amp;gt; Security &amp;gt; API Key.&lt;/p&gt; &#xA;&lt;h2&gt;qBittorrent&lt;/h2&gt; &#xA;&lt;p&gt;Set the default save path to &lt;code&gt;/data/torrents&lt;/code&gt; in Settings, and restrict the network interface to Wireguard (&lt;code&gt;wg0&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The web UI login page can be disabled on for the local network in Settings &amp;gt; Web UI &amp;gt; Bypass authentication for clients&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;192.168.0.0/16&#xA;127.0.0.0/8&#xA;172.17.0.0/16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Jellyfin&lt;/h2&gt; &#xA;&lt;p&gt;To enable &lt;a href=&#34;https://jellyfin.org/docs/general/administration/hardware-acceleration/&#34;&gt;hardware transcoding&lt;/a&gt;, depending on your system, you may need to update the following block:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;devices:&#xA;  - /dev/dri/renderD128:/dev/dri/renderD128&#xA;  - /dev/dri/card0:/dev/dri/card0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generally, running Docker on Linux you will want to use VA-API, but the exact mount paths may differ depending on your hardware.&lt;/p&gt; &#xA;&lt;h2&gt;Traefik and SSL Certificates&lt;/h2&gt; &#xA;&lt;p&gt;While you can use the private IP to access your NAS, how cool would it be for it to be accessible through a subdomain with a valid SSL certificate?&lt;/p&gt; &#xA;&lt;p&gt;Traefik makes this trivial by using Let&#39;s Encrypt and one of its &lt;a href=&#34;https://doc.traefik.io/traefik/https/acme&#34;&gt;supported ACME challenge providers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s assume we are using &lt;code&gt;nas.domain.com&lt;/code&gt; as custom subdomain.&lt;/p&gt; &#xA;&lt;p&gt;The idea is to create an A record pointing to the private IP of the NAS, &lt;code&gt;192.168.0.10&lt;/code&gt; for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nas.domain.com.&#x9;1&#x9;IN&#x9;A&#x9;192.168.0.10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The record will be publicly exposed but not resolve given this is a private IP.&lt;/p&gt; &#xA;&lt;p&gt;Given the NAS is not accessible from the internet, we need to do a dnsChallenge. Here we will be using CloudFlare, but the mechanism will be the same for all DNS providers baring environment variable changes, see the Traefik documentation above and &lt;a href=&#34;https://go-acme.github.io/lego/dns&#34;&gt;Lego&#39;s documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then, fill the CloudFlare &lt;code&gt;.env&lt;/code&gt; entries.&lt;/p&gt; &#xA;&lt;p&gt;If you want to test your configuration first, use the Let&#39;s Encrypt staging server by uncommenting this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#- --certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If it worked, you will see the staging certificate at &lt;a href=&#34;https://nas.domain.com&#34;&gt;https://nas.domain.com&lt;/a&gt;. You may remove the &lt;code&gt;./letsencrypt/acme.json&lt;/code&gt; file and restart the services to issue the real certificate.&lt;/p&gt; &#xA;&lt;h3&gt;Accessing from the outside with Tailscale&lt;/h3&gt; &#xA;&lt;p&gt;If we want to make it reachable from outside the network without opening ports or exposing it to the internet, I found &lt;a href=&#34;https://tailscale.com&#34;&gt;Tailscale&lt;/a&gt; to be a great solution: create a network, run the client on both the NAS and the device you are connecting from, and they will see each other.&lt;/p&gt; &#xA;&lt;p&gt;In this case, the A record should point to the IP Tailscale assigned to the NAS, eg &lt;code&gt;100.xxx.xxx.xxx&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nas.domain.com.&#x9;1&#x9;IN&#x9;A&#x9;100.xxx.xxx.xxx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://tailscale.com/kb/installation&#34;&gt;here&lt;/a&gt; for installation instructions.&lt;/p&gt; &#xA;&lt;p&gt;However, this means you will always need to be connected to Tailscale to access your NAS, even locally. This can be remedied by overriding the DNS entry for the NAS domain like &lt;code&gt;192.168.0.10 nas.domain.com&lt;/code&gt; in your local DNS resolver such as Pi-Hole.&lt;/p&gt; &#xA;&lt;p&gt;This way, when connected to the local network, the NAS is accessible directly from the private IP, and from the outside you need to connect to Tailscale first, then the NAS domain will be accessible.&lt;/p&gt; &#xA;&lt;h2&gt;Optional Services&lt;/h2&gt; &#xA;&lt;p&gt;As their name would suggest, optional services are not launched by default. They have their own &lt;code&gt;docker-compose.yml&lt;/code&gt; file in their subfolders. To enable a service, append it to the &lt;code&gt;COMPOSE_FILE&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;p&gt;Say you want to enable FlareSolverr, you should have &lt;code&gt;COMPOSE_FILE=docker-compose.yml:flaresolverr/docker-compose.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;FlareSolverr&lt;/h3&gt; &#xA;&lt;p&gt;In Prowlarr, add the FlareSolverr indexer with the URL &lt;a href=&#34;http://flaresolverr:8191/&#34;&gt;http://flaresolverr:8191/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;AdGuard Home&lt;/h3&gt; &#xA;&lt;p&gt;Set the &lt;code&gt;ADGUARD_HOSTNAME&lt;/code&gt;, I chose a different subdomain to use secure DNS without the folder.&lt;/p&gt; &#xA;&lt;p&gt;On first run, specify the port 3000 and enable listen on all interfaces to make it work with Tailscale.&lt;/p&gt; &#xA;&lt;p&gt;If after running &lt;code&gt;docker compose up -d&lt;/code&gt;, you&#39;re getting &lt;code&gt;network docker-compose-nas declared as external, but could not be found&lt;/code&gt;, run &lt;code&gt;docker network create docker-compose-nas&lt;/code&gt; first.&lt;/p&gt; &#xA;&lt;h4&gt;Encryption&lt;/h4&gt; &#xA;&lt;p&gt;In Settings &amp;gt; Encryption Settings, set the certificates path to &lt;code&gt;/opt/adguardhome/certs/certs/&amp;lt;YOUR_HOSTNAME&amp;gt;.crt&lt;/code&gt; and the private key to &lt;code&gt;/opt/adguardhome/certs/private/&amp;lt;YOUR_HOSTNAME&amp;gt;.key&lt;/code&gt;, those files are created by Traefik cert dumper from the ACME certificates Traefik generates in JSON.&lt;/p&gt; &#xA;&lt;h4&gt;DHCP&lt;/h4&gt; &#xA;&lt;p&gt;If you want to use the AdGuard Home DHCP server, for example because your router does not allow changing its DNS server, you will need to select the &lt;code&gt;eth0&lt;/code&gt; DHCP interface matching &lt;code&gt;10.0.0.10&lt;/code&gt;, then specify the Gateway IP to match your router address (&lt;code&gt;192.168.0.1&lt;/code&gt; for example) and set a range of IP addresses assigned to local devices.&lt;/p&gt; &#xA;&lt;p&gt;In the configuration (&lt;code&gt;adguardhome/conf/AdGuardHome.yaml&lt;/code&gt;), set the DHCP options 6th key to your NAS internal IP address:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;dhcp:&#xA;  dhcpv4:&#xA;    options:&#xA;      - 6 ips 192.168.0.10,192.168.0.10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Expose DNS Server with Tailscale&lt;/h4&gt; &#xA;&lt;p&gt;Based on &lt;a href=&#34;https://tailscale.com/kb/1114/pi-hole&#34;&gt;Tailscale&#39;s documentation&lt;/a&gt;, it is easy to use your AdGuard server everywhere. Just make sure that AdGuard Home listens to all interfaces.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;You can override the configuration of a services or add new services by creating a new &lt;code&gt;docker-compose.override.yml&lt;/code&gt; file, then appending it to the &lt;code&gt;COMPOSE_FILE&lt;/code&gt; environment variable: &lt;code&gt;COMPOSE_FILE=docker-compose.yml:docker-compose.override.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/compose/extends&#34;&gt;See official documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, use a &lt;a href=&#34;https://github.com/bubuntux/nordvpn&#34;&gt;different VPN provider&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;version: &#39;3.9&#39;&#xA;&#xA;services:&#xA;  vpn:&#xA;    image: ghcr.io/bubuntux/nordvpn&#xA;    cap_add:&#xA;      - NET_ADMIN               # Required&#xA;      - NET_RAW                 # Required&#xA;    environment:                # Review https://github.com/bubuntux/nordvpn#environment-variables&#xA;      - USER=user@email.com     # Required&#xA;      - &#34;PASS=pas$word&#34;         # Required&#xA;      - CONNECT=United_States&#xA;      - TECHNOLOGY=NordLynx&#xA;      - NETWORK=192.168.1.0/24  # So it can be accessed within the local network&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;NFS Share&lt;/h2&gt; &#xA;&lt;p&gt;This can be useful to share the media folder to a local player like Kodi or computers in the local network, but may not be necessary if Jellyfin is going to be used to access the media.&lt;/p&gt; &#xA;&lt;p&gt;Install the NFS kernel server: &lt;code&gt;sudo apt-get install nfs-kernel-server&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then edit &lt;code&gt;/etc/exports&lt;/code&gt; to configure your shares:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;/mnt/data/media 192.168.0.0/255.255.255.0(rw,all_squash,nohide,no_subtree_check,anonuid=1000,anongid=1000)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will share the &lt;code&gt;media&lt;/code&gt; folder to anybody on your local network (192.168.0.x). I purposely left out the &lt;code&gt;sync&lt;/code&gt; flag that would slow down file transfer. On &lt;a href=&#34;https://forum.kodi.tv/showthread.php?tid=343434&#34;&gt;some devices&lt;/a&gt; you may need to use the &lt;code&gt;insecure&lt;/code&gt; option for the share to be available.&lt;/p&gt; &#xA;&lt;p&gt;Restart the NFS server to apply the changes: &lt;code&gt;sudo /etc/init.d/nfs-kernel-server restart&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;On other machines, you can see the shared folder by adding the following to your &lt;code&gt;/etc/fstab&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;192.168.0.10:/mnt/data/media /mnt/nas nfs ro,hard,intr,auto,_netdev 0 0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Static IP&lt;/h2&gt; &#xA;&lt;p&gt;Set a static IP, assuming &lt;code&gt;192.168.0.10&lt;/code&gt; and using Google DNS servers: &lt;code&gt;sudo nano /etc/netplan/00-installer-config.yaml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# This is the network config written by &#39;subiquity&#39;&#xA;network:&#xA;  ethernets:&#xA;    enp2s0:&#xA;      dhcp4: no&#xA;      addresses:&#xA;        - 192.168.0.10/24&#xA;      gateway4: 192.168.0.1&#xA;      nameservers:&#xA;          addresses: [8.8.8.8, 8.8.4.4]&#xA;  version: 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Apply the plan: &lt;code&gt;sudo netplan apply&lt;/code&gt;. You can check the server uses the right IP with &lt;code&gt;ip a&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Laptop Specific Configuration&lt;/h2&gt; &#xA;&lt;p&gt;If the server is installed on a laptop, you may want to disable the suspension when the lid is closed: &lt;code&gt;sudo nano /etc/systemd/logind.conf&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Replace:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;#HandleLidSwitch=suspend&lt;/code&gt; by &lt;code&gt;HandleLidSwitch=ignore&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#LidSwitchIgnoreInhibited=yes&lt;/code&gt; by &lt;code&gt;LidSwitchIgnoreInhibited=no&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then restart: &lt;code&gt;sudo service systemd-logind restart&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bigscience-workshop/bigscience</title>
    <updated>2023-02-19T01:43:58Z</updated>
    <id>tag:github.com,2023-02-19:/bigscience-workshop/bigscience</id>
    <link href="https://github.com/bigscience-workshop/bigscience" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Central place for the engineering/scaling WG: documentation, SLURM scripts and logs, compute environment and data.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;bigscience&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bigscience.huggingface.co/&#34;&gt;Research workshop on large language models - The Summer of Language Models 21&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;At the moment we have 2 code repos:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bigscience-workshop/Megatron-DeepSpeed&#34;&gt;https://github.com/bigscience-workshop/Megatron-DeepSpeed&lt;/a&gt; - this is our flagship code base&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bigscience-workshop/bigscience&#34;&gt;https://github.com/bigscience-workshop/bigscience&lt;/a&gt; - (this repo) for everything else - docs, experiments, etc.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Currently, the most active segments of this repo are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bigscience-workshop/bigscience/master/jz/&#34;&gt;JZ&lt;/a&gt; - Lots of information about our work environment which helps evaluate, plan and get things done&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bigscience-workshop/bigscience/master/experiments&#34;&gt;Experiments&lt;/a&gt; - many experiments are being done. Documentation, result tables, scripts and logs are all there&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bigscience-workshop/bigscience/master/data/&#34;&gt;Datasets info&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bigscience-workshop/bigscience/master/train&#34;&gt;Train&lt;/a&gt; - all the information about the current trainings (see below for the most important ones)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We have READMEs for specific aspects, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bigscience-workshop/bigscience/master/tools/README.md&#34;&gt;hub integration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Trainings&lt;/h2&gt; &#xA;&lt;p&gt;While we keep detailed chronicles of experiments and findings for some of the main trainings, here is a doc that contains a summary of the most important findings: &lt;a href=&#34;https://raw.githubusercontent.com/bigscience-workshop/bigscience/master/train/lessons-learned.md&#34;&gt;Lessons learned&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Train 1 - 13B - unmodified Megatron gpt2 - baseline&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bigscience-workshop/bigscience/master/train/tr1-13B-base&#34;&gt;the full spec and discussions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bigscience-workshop/bigscience/master/train/tr1-13B-base/tr1-13B-round1.slurm&#34;&gt;the training script&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;checkpoints and logs: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/bigscience/tr1-13B-tensorboard/tensorboard&#34;&gt;tensorboard&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/bigscience/tr1-13B-logs/&#34;&gt;logs&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bigscience-workshop/bigscience/master/train/tr1-13B-base/chronicles.md&#34;&gt;chronicles&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can watch the training logs live by running this &lt;code&gt;tail -f&lt;/code&gt; like script over remote log file that gets synced to the hub once an hour:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl -e &#39;$u=shift; $b=0; while(1){($e)=qx[curl -sI $u]=~/content-length: (\d+)/; \&#xA;print qx[curl -sr $b-$e -L $u] if $e&amp;gt;$b; $b=$e; sleep 300}&#39; \&#xA;https://huggingface.co/bigscience/tr1-13B-logs/resolve/main/main_log.txt&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Train 3&lt;/h3&gt; &#xA;&lt;p&gt;Architecture and scaling baseline runs: no fancy tricks, just GPT2. Here are links to the respective tensorboards:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Size&lt;/th&gt; &#xA;   &lt;th&gt;1B3&lt;/th&gt; &#xA;   &lt;th&gt;760M&lt;/th&gt; &#xA;   &lt;th&gt;350M&lt;/th&gt; &#xA;   &lt;th&gt;125M&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C4 + low warmup&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/bigscience/tr3-1B3-modeling-baseline-tensorboard&#34;&gt;a&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/bigscience/tr3b-760M-modeling-baseline-tensorboard&#34;&gt;b&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/bigscience/tr3c-350M-modeling-baseline-tensorboard&#34;&gt;c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OSCAR + low warmup&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/bigscience/tr3f-1B3-diagnostic2-low-warmup-oscar-tensorboard&#34;&gt;f&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C4 + high warmup&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/bigscience/tr3e-1B3-diagnostic1-warmup-c4-tensorboard&#34;&gt;e&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OSCAR + high warmup&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/bigscience/tr3d-1B3-more-warmup-tensorboard&#34;&gt;d (current baseline)&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/bigscience/tr3g-760M-v2-tensorboard&#34;&gt;g&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/bigscience/tr3h-350M-v2-tensorboard&#34;&gt;h&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/bigscience/tr3i-125M-v2-tensorboard&#34;&gt;i&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Pile + high warmup&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/bigscience/tr3m-1B3-pile-tensorboard&#34;&gt;m&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/bigscience/tr3j-760M-pile-tensorboard&#34;&gt;j&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/bigscience/tr3k-350M-pile-tensorboard&#34;&gt;k&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/bigscience/tr3l-125M-pile-tensorboard&#34;&gt;l&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Train 8&lt;/h3&gt; &#xA;&lt;p&gt;104B - unmodified Megatron gpt2 - with extra-wide hidden size to learn how to deal with training instabilities&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bigscience-workshop/bigscience/master/train/tr8-104B-wide&#34;&gt;the full spec and discussions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bigscience-workshop/bigscience/master/train/tr8-104B-wide/tr8-104B.slurm&#34;&gt;the training script&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;checkpoints and logs: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/bigscience/tr8-104B-logs/tensorboard&#34;&gt;tensorboard&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/bigscience/tr8-104B-logs/tree/main/logs&#34;&gt;logs&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bigscience-workshop/bigscience/master/train/tr8-104B-wide/chronicles.md&#34;&gt;chronicles&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can watch the training logs live by running this &lt;code&gt;tail -f&lt;/code&gt; like script over remote log file that gets synced to the hub once an hour:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl -e &#39;$u=shift; $b=0; while(1){($e)=qx[curl -sI $u]=~/content-length: (\d+)/; \&#xA;print qx[curl -sr $b-$e -L $u] if $e&amp;gt;$b; $b=$e; sleep 300}&#39; \&#xA;https://cdn-lfs.huggingface.co/bigscience/tr8-104B-logs/b2cc478d5ae7c9ec937ea2db1d2fe09de593fa2ec38c171d6cc5dca094cd79f9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Train 11&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is the current main training&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;tr11-176B-ml&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bigscience-workshop/bigscience/master/train/tr11-176B-ml/&#34;&gt;the full spec and discussions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bigscience-workshop/bigscience/master/train/tr11-176B-ml/tr11-176B-ml.slurm&#34;&gt;the training script&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;checkpoints and logs: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/bigscience/tr11-176B-ml-logs/tensorboard&#34;&gt;tensorboard&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/bigscience/tr11-176B-ml-logs/tree/main/logs/main&#34;&gt;logs&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bigscience-workshop/bigscience/master/train/tr11-176B-ml/chronicles-prequel.md&#34;&gt;chronicles-prequel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bigscience-workshop/bigscience/master/train/tr11-176B-ml/chronicles.md&#34;&gt;chronicles&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can watch the training logs live by running this &lt;code&gt;tail -f&lt;/code&gt; like script over remote log file that gets synced to the hub once an hour:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;perl -e &#39;$u=shift; $b=0; while(1){($e)=qx[curl -LsI $u]=~/2 200.*?content-length: (\d+)/s; \&#xA;print qx[curl -Lsr $b-$e $u] if $e&amp;gt;$b; $b=$e; sleep 300}&#39; \&#xA;https://huggingface.co/bigscience/tr11-176B-ml-logs/resolve/main/logs/main/main_log.txt&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>