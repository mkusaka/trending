<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-17T01:38:04Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Wooder/ios_17_required_reason_api_scanner</title>
    <updated>2024-03-17T01:38:04Z</updated>
    <id>tag:github.com,2024-03-17:/Wooder/ios_17_required_reason_api_scanner</id>
    <link href="https://github.com/Wooder/ios_17_required_reason_api_scanner" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple shell script to scan your Xcode Swift project for required reason API usage to ensure privacy compliance and to simplify the creation of privacy manifests.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Scanners for possible use of &#34;iOS required reason API&#34;.&lt;/h1&gt; &#xA;&lt;h2&gt;Text-based scanner&lt;/h2&gt; &#xA;&lt;p&gt;The scan is very rudimentary and based on comparing strings, but should be very helpful for a first analysis.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://developer.apple.com/documentation/bundleresources/privacy_manifest_files/describing_use_of_required_reason_api&#34;&gt;https://developer.apple.com/documentation/bundleresources/privacy_manifest_files/describing_use_of_required_reason_api&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sh required_reason_api_text_scanner.sh {directory_name}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example Output:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Found potentially required reason API usage &#39;UserDefaults&#39; in &#39;./ViewController.swift&#39; Line numbers: 28&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;See the following medium post for more details: &lt;a href=&#34;https://jochen-holzer.medium.com/embrace-the-evolution-preparing-your-ios-app-for-the-required-reason-api-38f2d12bbce5?source=friends_link&amp;amp;sk=d146c22f3e18c6551231f4b55c934b05&#34;&gt;https://jochen-holzer.medium.com/embrace-the-evolution-preparing-your-ios-app-for-the-required-reason-api-38f2d12bbce5?source=friends_link&amp;amp;sk=d146c22f3e18c6551231f4b55c934b05&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Binary-based scanner&lt;/h2&gt; &#xA;&lt;p&gt;This scanner looks for symbols in the binaries in DerivedData folder using &lt;code&gt;nm&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It will find the &lt;code&gt;.app&lt;/code&gt;, &lt;code&gt;.framework&lt;/code&gt; and &lt;code&gt;.a&lt;/code&gt; binaries. Keep in mind that the symbols found in the app (&lt;code&gt;.app&lt;/code&gt;) will be duplicated from the ones found in the static libraries &lt;code&gt;.a&lt;/code&gt; since they are statically linked.&lt;/p&gt; &#xA;&lt;p&gt;Usage: &lt;code&gt;sh required_reason_api_binary_scanner.sh {directory}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sh required_reason_api_scanner_binary.sh \&#xA;~/Library/Developer/Xcode/DerivedData/DemoSymbols-aymfeypsyhqwfuaieijkrqdeohcd/Build/Products/Debug-iphonesimulator&#xA;&#xA;&amp;gt; Analyzing binaries: ./DemoSymbols.app/DemoSymbols&#xA;&amp;gt; ---&#xA;&amp;gt; Used symbols in binary ./DemoSymbols.app/DemoSymbols: activeInputModes, fgetattrlist, fstat, fstatat, fstatfs, fstatvfs, getattrlist, getattrlistat, getattrlistbulk, lstat, mach_absolute_time, NSFileCreationDate, NSFileModificationDate, NSFileSystemFreeSize, NSFileSystemSize, NSURLContentModificationDateKey, NSURLCreationDateKey, NSURLVolumeAvailableCapacityForImportantUsageKey, NSURLVolumeAvailableCapacityForOpportunisticUsageKey, NSURLVolumeAvailableCapacityKey, NSURLVolumeTotalCapacityKey, NSUserDefaults, stat, statfs, statvfs, systemUptime&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example project&lt;/h2&gt; &#xA;&lt;p&gt;In the directory &lt;code&gt;DemoSymbols&lt;/code&gt; you will find a project that uses all the code that Apple asks for a required reason.&lt;/p&gt; &#xA;&lt;p&gt;It is used to test these scanners.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>modularml/mojo</title>
    <updated>2024-03-17T01:38:04Z</updated>
    <id>tag:github.com,2024-03-17:/modularml/mojo</id>
    <link href="https://github.com/modularml/mojo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Mojo Programming Language&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://modular-assets.s3.amazonaws.com/images/mojo_github_logo_bg.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Welcome to Mojo 🔥&lt;/h1&gt; &#xA;&lt;p&gt;Mojo is a new programming language that bridges the gap between research and production by combining Python syntax and ecosystem with systems programming and metaprogramming features. Mojo is still young, but it is designed to become a superset of Python over time.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.modular.com/mojo/manual/get-started/&#34;&gt;See here to get started with Mojo&lt;/a&gt;. Then, when you want to report issues or request features, &lt;a href=&#34;https://github.com/modularml/mojo/issues&#34;&gt;please create a GitHub issue here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This repo is the beginning of our Mojo open source effort. We&#39;ve started with Mojo code examples and documentation, and we&#39;ll add the Mojo standard library as soon as we get the necessary infrastructure in place. The challenge is that we use Mojo pervasively inside Modular and we need to make sure that community contributions can proceed smoothly with good build and testing tools that will allow this repo to become the source of truth (right now it is not). We&#39;ll progressively add the necessary components, such as continuous integration, build tools, and more source code over time.&lt;/p&gt; &#xA;&lt;p&gt;If you see anything in the examples or docs that can be improved, we&#39;d love to accept your contributions. Please first read to our &lt;a href=&#34;https://raw.githubusercontent.com/modularml/mojo/main/CONTRIBUTING.md&#34;&gt;Contributor Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more general questions or to chat with other Mojo developers, check out our &lt;a href=&#34;https://discord.gg/modular&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To learn more about Mojo, see the &lt;a href=&#34;https://docs.modular.com/mojo/manual/&#34;&gt;Mojo Manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Thanks To Our Contributors:&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/modularml/mojo/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=modularml/mojo&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>docker-easyconnect/docker-easyconnect</title>
    <updated>2024-03-17T01:38:04Z</updated>
    <id>tag:github.com,2024-03-17:/docker-easyconnect/docker-easyconnect</id>
    <link href="https://github.com/docker-easyconnect/docker-easyconnect" rel="alternate"></link>
    <summary type="html">&lt;p&gt;使深信服（Sangfor）开发的非自由的 VPN 软件 EasyConnect 和 aTrust 运行在 docker 或 podman 中，并作为网关和/或提供 socks5、http 代理服务&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;docker-easyconnect&lt;/h1&gt; &#xA;&lt;p&gt;让深信服开发的&lt;strong&gt;非自由&lt;/strong&gt;的 VPN 软件 EasyConnect 或 aTrust 运行在 docker 中，提供 &lt;a href=&#34;https://raw.githubusercontent.com/docker-easyconnect/docker-easyconnect/master/doc/usage.md#%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1&#34;&gt;socks5 和 http 代理&lt;/a&gt;服务和&lt;a href=&#34;https://raw.githubusercontent.com/docker-easyconnect/docker-easyconnect/master/doc/usage.md#ip-forward&#34;&gt;网关&lt;/a&gt;供宿主机连接使用。&lt;/p&gt; &#xA;&lt;p&gt;本项目基于 EasyConnect 官方“Linux”版的 deb 包、&lt;a href=&#34;https://github.com/shmilee&#34;&gt;@shmille&lt;/a&gt; 提供的&lt;a href=&#34;https://github.com/shmilee/scripts/releases/download/v0.0.1/easyconn_7.6.8.2-ubuntu_amd64.deb&#34;&gt;命令行版客户端 deb 包&lt;/a&gt;、aTrust 官方“Linux”版 deb 包，这些 deb 包的版权归深信服（Sangfor）所有，请不要滥用本项目。本项目&lt;strong&gt;不是&lt;/strong&gt;深信服官方项目。&lt;/p&gt; &#xA;&lt;p&gt;欢迎批评、指正，提交 issue、PR，包括但不仅限于 bug、各种疑问、代码和文档的改进。&lt;/p&gt; &#xA;&lt;p&gt;详细用法见于 &lt;a href=&#34;https://raw.githubusercontent.com/docker-easyconnect/docker-easyconnect/master/doc/usage.md&#34;&gt;doc/usage.md&lt;/a&gt;，常见问题见于 &lt;a href=&#34;https://raw.githubusercontent.com/docker-easyconnect/docker-easyconnect/master/doc/faq.md&#34;&gt;doc/faq.md&lt;/a&gt;，自行构建可参照构建说明 &lt;a href=&#34;https://raw.githubusercontent.com/docker-easyconnect/docker-easyconnect/master/doc/build.md&#34;&gt;doc/build.md&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;简明使用步骤&lt;/h2&gt; &#xA;&lt;p&gt;使用下述方式登录后，可以通过 &lt;code&gt;127.0.0.1:1080&lt;/code&gt;、&lt;code&gt;127.0.0.1:8888&lt;/code&gt; 分别访问 &lt;a href=&#34;https://raw.githubusercontent.com/docker-easyconnect/docker-easyconnect/master/doc/usage.md#%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1&#34;&gt;socks5 和 http 代理&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h3&gt;纯命令行版 EasyConnect（amd64 架构）&lt;/h3&gt; &#xA;&lt;p&gt;注意，纯命令行版本仅支持下列登录方式：用户名+密码、硬件特征码。&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/get-docker/&#34;&gt;安装Docker并运行&lt;/a&gt;；&lt;/li&gt; &#xA; &lt;li&gt;在终端输入： &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm --device /dev/net/tun --cap-add NET_ADMIN -ti -p 127.0.0.1:1080:1080 -p 127.0.0.1:8888:8888 -e EC_VER=7.6.3 -e CLI_OPTS=&#34;-d vpnaddress -u username -p password&#34; hagb/docker-easyconnect:cli&#xA;&lt;/code&gt;&lt;/pre&gt; 其中 &lt;code&gt;-e EC_VER=7.6.7&lt;/code&gt; 表示使用 &lt;code&gt;7.6.7&lt;/code&gt; 版本的 EasyConnect，请根据实际情况修改版本号（选择 &lt;code&gt;7.6.7&lt;/code&gt; 或 &lt;code&gt;7.6.3&lt;/code&gt;，详见 &lt;a href=&#34;https://raw.githubusercontent.com/docker-easyconnect/docker-easyconnect/master/doc/usage.md#easyconnect-%E7%89%88%E6%9C%AC%E9%80%89%E6%8B%A9&#34;&gt;EasyConnect 版本选择&lt;/a&gt;）；&lt;/li&gt; &#xA; &lt;li&gt;根据提示输入服务器地址、登录凭据。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;图形界面版 EasyConnect（x86、amd64、arm64、mips64el 架构）&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/get-docker/&#34;&gt;安装Docker并运行&lt;/a&gt;；&lt;/li&gt; &#xA; &lt;li&gt;在终端输入： &lt;code&gt;docker run --rm --device /dev/net/tun --cap-add NET_ADMIN -ti -e PASSWORD=xxxx -e URLWIN=1 -v $HOME/.ecdata:/root -p 127.0.0.1:5901:5901 -p 127.0.0.1:1080:1080 -p 127.0.0.1:8888:8888 hagb/docker-easyconnect:7.6.7&lt;/code&gt;（末尾 EasyConnect 版本号 &lt;code&gt;7.6.7&lt;/code&gt; 请根据实际情况修改；arm64 和 mips64el 架构需要加入 &lt;code&gt;-e DISABLE_PKG_VERSION_XML=1&lt;/code&gt; 参数）；&lt;/li&gt; &#xA; &lt;li&gt;使用vnc客户端连接vnc， 地址：&lt;code&gt;127.0.0.1&lt;/code&gt;，端口: 5901, 密码 xxxx；&lt;/li&gt; &#xA; &lt;li&gt;成功连上后你应该能看到 EasyConnect 的登录窗口，填写登录凭据并登录，若需要 web 登录可参看 &lt;a href=&#34;https://raw.githubusercontent.com/docker-easyconnect/docker-easyconnect/master/doc/usage.md#web-%E7%99%BB%E5%BD%95&#34;&gt;web 登录&lt;/a&gt;。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;图形界面版 aTrust（amd64、arm64、mips64el 架构）&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/get-docker/&#34;&gt;安装Docker并运行&lt;/a&gt;；&lt;/li&gt; &#xA; &lt;li&gt;在终端输入： &lt;code&gt;docker run --rm --device /dev/net/tun --cap-add NET_ADMIN -ti -e PASSWORD=xxxx -e URLWIN=1 -v $HOME/.atrust-data:/root -p 127.0.0.1:5901:5901 -p 127.0.0.1:1080:1080 -p 127.0.0.1:8888:8888 -p 127.0.0.1:54631:54631 hagb/docker-atrust&lt;/code&gt;；&lt;/li&gt; &#xA; &lt;li&gt;使用vnc客户端连接vnc， 地址：127.0.0.1，端口: 5901, 密码 xxxx；&lt;/li&gt; &#xA; &lt;li&gt;成功连上后你应该能看到 aTrust 的登录窗口；若需要 web 登录，在宿主机的浏览器打开 aTrust 弹出的网址网址登录即可。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;拉取&lt;/h2&gt; &#xA;&lt;h3&gt;从 Docker Hub 上直接获取：&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull hagb/docker-easyconnect:TAG&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;其中 TAG 可以是如下值（不带 VNC 服务端的 image 比带 VNC 服务端的 image 小）：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;latest&lt;/code&gt;: 默认值，带 VNC 服务端的&lt;code&gt;7.6.7&lt;/code&gt;版 image，&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cli&lt;/code&gt;: 多版本（&lt;code&gt;7.6.3&lt;/code&gt;, &lt;code&gt;7.6.7&lt;/code&gt;, &lt;code&gt;7.6.8&lt;/code&gt;）纯命令行版&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vncless&lt;/code&gt;: 不带 VNC 服务端的&lt;code&gt;7.6.7&lt;/code&gt;版 image&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;7.6.3&lt;/code&gt;: 带 VNC 服务端的&lt;code&gt;7.6.3&lt;/code&gt;版 image&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vncless-7.6.3&lt;/code&gt;: 不带 VNC 服务端的&lt;code&gt;7.6.3&lt;/code&gt;版 image&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;7.6.7&lt;/code&gt;: 带 VNC 服务端的&lt;code&gt;7.6.7&lt;/code&gt;版 image&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vncless-7.6.7&lt;/code&gt;: 不带 VNC 服务端的&lt;code&gt;7.6.7&lt;/code&gt;版 image&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;参考资料&lt;/h2&gt; &#xA;&lt;p&gt;登录过程的一个 hack (&lt;a href=&#34;https://raw.githubusercontent.com/docker-easyconnect/docker-easyconnect/master/docker-root/usr/local/bin/start-sangfor.sh&#34;&gt;docker-root/usr/local/bin/start-sangfor.sh&lt;/a&gt;)参考了这篇文章：&lt;a href=&#34;https://blog.51cto.com/13226459/2476193&#34;&gt;https://blog.51cto.com/13226459/2476193&lt;/a&gt;。在此对该文作者表示感谢。&lt;/p&gt; &#xA;&lt;h2&gt;其他 EasyConnect 相关项目&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shmilee&#34;&gt;@shmilee&lt;/a&gt; 的 &lt;a href=&#34;https://github.com/shmilee/scripts/tree/master/easyconnect-in-docker&#34;&gt;easyconnect-in-docker 方案&lt;/a&gt;（另见 &lt;a href=&#34;https://github.com/Hagb/docker-easyconnect/issues/35&#34;&gt;#35&lt;/a&gt;）实现了多 EasyConnect 版本共用容器&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ultranity/minimal-EasyConnect&#34;&gt;ultranity/minimal-EasyConnect&lt;/a&gt;: minimal EasyConnect CLI in docker-alpine&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Mythologyli/ZJU-Connect&#34;&gt;Mythologyli/ZJU-Connect&lt;/a&gt;: ZJU RVPN 客户端的 Go 语言实现&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zhangt2333/actions-easyconnect&#34;&gt;zhangt2333/actions-easyconnect&lt;/a&gt;: Github Actions: run code with EasyConnect VPN&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CoolSpring8/rwppa&#34;&gt;CoolSpring8/rwppa&lt;/a&gt;: 将浙江大学网页版 RVPN 模拟为本地 HTTP 代理 - (ZJU) RVPN Web Portal Proxy Adapter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;版权及许可证&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Copyright © 2020 contributors&lt;/p&gt; &#xA; &lt;p&gt;This work is free. You can redistribute it and/or modify it under the&lt;br&gt; terms of the Do What The Fuck You Want To Public License, Version 2,&lt;br&gt; as published by Sam Hocevar. See the COPYING file for more details.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;   DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE  &#xA;               Version 2, December 2004  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Copyright (C) 2004 Sam Hocevar &lt;a href=&#34;mailto:sam@hocevar.net&#34;&gt;sam@hocevar.net&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;Everyone is permitted to copy and distribute verbatim or modified&lt;br&gt; copies of this license document, and changing it is allowed as long&lt;br&gt; as the name is changed.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;       DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION&lt;/p&gt; &#xA; &lt;ol start=&#34;0&#34;&gt; &#xA;  &lt;li&gt;You just DO WHAT THE FUCK YOU WANT TO.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
</feed>