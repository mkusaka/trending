<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-19T01:55:42Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>justinclift/docker-pgautoupgrade</title>
    <updated>2023-07-19T01:55:42Z</updated>
    <id>tag:github.com,2023-07-19:/justinclift/docker-pgautoupgrade</id>
    <link href="https://github.com/justinclift/docker-pgautoupgrade" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A PostgreSQL Docker container that automatically upgrades your database&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This is a PostgreSQL Docker container that automatically upgrades your database.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s whole purpose in life is to automatically detect the version of PostgreSQL used in the existing PostgreSQL data directory, and automatically upgrade it (if needed) to the required version of PostgreSQL.&lt;/p&gt; &#xA;&lt;p&gt;After this, the PostgreSQL server starts and runs as per normal.&lt;/p&gt; &#xA;&lt;p&gt;The reason this Docker container is needed, is because the official Docker PostgreSQL container has no ability to handle version upgrades, which leaves people to figure it out manually (not great): &lt;a href=&#34;https://github.com/docker-library/postgres/issues/37&#34;&gt;https://github.com/docker-library/postgres/issues/37&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;WARNING! Backup your data!&lt;/h2&gt; &#xA;&lt;p&gt;This Docker container does an in-place upgrade of the database data, so if something goes wrong you are expected to already have backups you can restore from.&lt;/p&gt; &#xA;&lt;h2&gt;How to use this container&lt;/h2&gt; &#xA;&lt;p&gt;This container is on Docker Hub:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/pgautoupgrade/pgautoupgrade&#34;&gt;https://hub.docker.com/r/pgautoupgrade/pgautoupgrade&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To always use the latest version of PostgreSQL, use the tag &lt;code&gt;latest&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgautoupgrade/pgautoupgrade:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you instead want to run a specific version of PostgreSQL then pick a matching tag on our Docker Hub. For example, to use PostgreSQL 15 you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgautoupgrade/pgautoupgrade:15-alpine3.8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;For Developers&lt;/h1&gt; &#xA;&lt;h2&gt;Building the container&lt;/h2&gt; &#xA;&lt;p&gt;To build the docker image, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will take a few minutes to create the &#34;pgautoupgrade:latest&#34; docker container, that you can use in your docker-compose.yml files.&lt;/p&gt; &#xA;&lt;h2&gt;Testing the container image&lt;/h2&gt; &#xA;&lt;p&gt;To run the tests, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./test.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The test script creates an initial PostgreSQL database for Redash using an older PG version, then starts Redash using the above &#34;automatic updating&#34; PostgreSQL container to update the database to the latest PostgreSQL version.&lt;/p&gt; &#xA;&lt;p&gt;It then checks that the database files were indeed updated to the newest PostgreSQL release, and outputs an obvious SUCCESS/FAILURE message for that loop.&lt;/p&gt; &#xA;&lt;p&gt;The test runs in a loop, testing (in sequence) PostgreSQL versions 9.5, 9.6, 10.x, 11.x, 12.x, 13.x, and 14.x.&lt;/p&gt;</summary>
  </entry>
</feed>