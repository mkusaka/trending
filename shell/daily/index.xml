<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-14T01:48:36Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>al0ne/LinuxCheck</title>
    <updated>2023-06-14T01:48:36Z</updated>
    <id>tag:github.com,2023-06-14:/al0ne/LinuxCheck</id>
    <link href="https://github.com/al0ne/LinuxCheck" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Linux应急处置/信息搜集/漏洞检测工具，支持基础配置/网络流量/任务计划/环境变量/用户信息/Services/bash/恶意文件/内核Rootkit/SSH/Webshell/挖矿文件/挖矿进程/供应链/服务器风险等13类70+项检查&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LinuxCheck&lt;/h1&gt; &#xA;&lt;p&gt;Linux应急处置/信息搜集/漏洞检测工具，支持基础配置/网络流量/任务计划/环境变量/用户信息/Services/bash/恶意文件/内核Rootkit/SSH/Webshell/挖矿文件/挖矿进程/供应链/服务器风险等13类70+项检查&lt;/p&gt; &#xA;&lt;h3&gt;功能&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;基础配置检查 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;系统配置改动检查&lt;/li&gt; &#xA;   &lt;li&gt;系统信息（IP地址/用户/开机时间/系统版本/Hostname/服务器SN）&lt;/li&gt; &#xA;   &lt;li&gt;CPU使用率&lt;/li&gt; &#xA;   &lt;li&gt;登录用户信息&lt;/li&gt; &#xA;   &lt;li&gt;CPU TOP 15&lt;/li&gt; &#xA;   &lt;li&gt;内存 TOP 15&lt;/li&gt; &#xA;   &lt;li&gt;磁盘剩余空间检查&lt;/li&gt; &#xA;   &lt;li&gt;硬盘挂载&lt;/li&gt; &#xA;   &lt;li&gt;常用软件检查&lt;/li&gt; &#xA;   &lt;li&gt;/etc/hots&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;网络/流量检查 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;ifconfig&lt;/li&gt; &#xA;   &lt;li&gt;网络流量&lt;/li&gt; &#xA;   &lt;li&gt;端口监听&lt;/li&gt; &#xA;   &lt;li&gt;对外开放端口&lt;/li&gt; &#xA;   &lt;li&gt;网络连接&lt;/li&gt; &#xA;   &lt;li&gt;TCP连接状态&lt;/li&gt; &#xA;   &lt;li&gt;路由表&lt;/li&gt; &#xA;   &lt;li&gt;路由转发&lt;/li&gt; &#xA;   &lt;li&gt;DNS Server&lt;/li&gt; &#xA;   &lt;li&gt;ARP&lt;/li&gt; &#xA;   &lt;li&gt;网卡混杂模式检查&lt;/li&gt; &#xA;   &lt;li&gt;iptables 防火墙&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;任务计划检查 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;当前用户任务计划&lt;/li&gt; &#xA;   &lt;li&gt;/etc/系统任务计划&lt;/li&gt; &#xA;   &lt;li&gt;任务计划文件创建时间&lt;/li&gt; &#xA;   &lt;li&gt;crontab 后门排查&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;环境变量检查 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;env&lt;/li&gt; &#xA;   &lt;li&gt;path&lt;/li&gt; &#xA;   &lt;li&gt;LD_PRELOAD&lt;/li&gt; &#xA;   &lt;li&gt;LD_ELF_PRELOAD&lt;/li&gt; &#xA;   &lt;li&gt;LD_AOUT_PRELOAD&lt;/li&gt; &#xA;   &lt;li&gt;PROMPT_COMMAND&lt;/li&gt; &#xA;   &lt;li&gt;LD_LIBRARY_PATH&lt;/li&gt; &#xA;   &lt;li&gt;ld.so.preload&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;用户信息检查 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;可登陆用户&lt;/li&gt; &#xA;   &lt;li&gt;passwd文件修改日期&lt;/li&gt; &#xA;   &lt;li&gt;sudoers&lt;/li&gt; &#xA;   &lt;li&gt;登录信息（w/last/lastlog）&lt;/li&gt; &#xA;   &lt;li&gt;历史登陆ip&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Services 检查 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;SystemD运行服务&lt;/li&gt; &#xA;   &lt;li&gt;SystemD服务创建时间&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;bash检查 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;History&lt;/li&gt; &#xA;   &lt;li&gt;History命令审计&lt;/li&gt; &#xA;   &lt;li&gt;/etc/profile&lt;/li&gt; &#xA;   &lt;li&gt;$HOME/.profile&lt;/li&gt; &#xA;   &lt;li&gt;/etc/rc.local&lt;/li&gt; &#xA;   &lt;li&gt;~/.bash_profile&lt;/li&gt; &#xA;   &lt;li&gt;~/.bashrc&lt;/li&gt; &#xA;   &lt;li&gt;bash反弹shell&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;文件检查 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;...隐藏文件&lt;/li&gt; &#xA;   &lt;li&gt;系统文件修改时间检测&lt;/li&gt; &#xA;   &lt;li&gt;临时文件检查（/tmp /var/tmp /dev/shm）&lt;/li&gt; &#xA;   &lt;li&gt;alias&lt;/li&gt; &#xA;   &lt;li&gt;suid特殊权限检查&lt;/li&gt; &#xA;   &lt;li&gt;进程存在文件未找到&lt;/li&gt; &#xA;   &lt;li&gt;近七天文件改动 mtime&lt;/li&gt; &#xA;   &lt;li&gt;近七天文件改动 ctime&lt;/li&gt; &#xA;   &lt;li&gt;大文件&amp;gt;200mb&lt;/li&gt; &#xA;   &lt;li&gt;敏感文件审计（nmap/sqlmap/ew/frp/nps等黑客常用工具）&lt;/li&gt; &#xA;   &lt;li&gt;可疑黑客文件（黑客上传的wget/curl等程序，或者将恶意程序改成正常软件例如nps文件改为mysql）&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;内核Rootkit 检查 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;lsmod 可疑模块&lt;/li&gt; &#xA;   &lt;li&gt;内核符号表检查&lt;/li&gt; &#xA;   &lt;li&gt;rootkit hunter 检查&lt;/li&gt; &#xA;   &lt;li&gt;rootkit .ko模块检查&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;SSH检查 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;SSH 爆破&lt;/li&gt; &#xA;   &lt;li&gt;SSHD 检测&lt;/li&gt; &#xA;   &lt;li&gt;SSH 后门配置&lt;/li&gt; &#xA;   &lt;li&gt;SSH inetd后门检查&lt;/li&gt; &#xA;   &lt;li&gt;SSH key&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Webshell 检查 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;php webshell检查&lt;/li&gt; &#xA;   &lt;li&gt;jsp webshell检查&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;挖矿文件/进程检查 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;挖矿文件检查&lt;/li&gt; &#xA;   &lt;li&gt;挖矿进程检查&lt;/li&gt; &#xA;   &lt;li&gt;WorkMiner检测&lt;/li&gt; &#xA;   &lt;li&gt;Ntpclient检测&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;供应链投毒检查 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Python PIP 投毒检查&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;服务器风险检查 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Redis弱密码检测&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;联网状态：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;apt-get install silversearcher-ag&lt;/li&gt; &#xA; &lt;li&gt;yum -y install the_silver_searcher&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;离线状态：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Debian：dpkg -i silversearcher-ag_2.2.0-1+b1_amd64.deb&lt;/li&gt; &#xA; &lt;li&gt;Centos：rpm -ivh the_silver_searcher-2.1.0-1.el7.x86_64.rpm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/al0ne/LinuxCheck.git  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;chmod u+x LinuxCheck.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;./LinuxCheck.sh  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果已经安装了ag和rkhunter可以直接使用以下命令&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash -c &#34;$(curl -sSL https://raw.githubusercontent.com/al0ne/LinuxCheck/master/LinuxCheck.sh)&#34;  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;文件会保存成ipaddr_hostname_username_timestamp.log 这种格式&lt;/p&gt; &#xA;&lt;h3&gt;参考&lt;/h3&gt; &#xA;&lt;p&gt;此工具的编写主要参考了以下几款工具/文章并结合个人经验完成&lt;/p&gt; &#xA;&lt;p&gt;Linenum&lt;br&gt; &lt;a href=&#34;https://github.com/lis912/Evaluation_tools&#34;&gt;https://github.com/lis912/Evaluation_tools&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://ixyzero.com/blog/archives/4.html&#34;&gt;https://ixyzero.com/blog/archives/4.html&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/T0xst/linux&#34;&gt;https://github.com/T0xst/linux&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/grayddq/GScan&#34;&gt;https://github.com/grayddq/GScan&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>multiarch/qemu-user-static</title>
    <updated>2023-06-14T01:48:36Z</updated>
    <id>tag:github.com,2023-06-14:/multiarch/qemu-user-static</id>
    <link href="https://github.com/multiarch/qemu-user-static" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🌍 `/usr/bin/qemu-*-static`&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;qemu-user-static&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/multiarch/qemu-user-static/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/multiarch/qemu-user-static.svg?style=flat-square&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/multiarch/qemu-user-static/workflows/actions/badge.svg?sanitize=true&#34; alt=&#34;actions&#34;&gt; &lt;a href=&#34;https://github.com/multiarch/qemu-user-static/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commits-since/multiarch/qemu-user-static/latest.svg?style=flat-square&#34; alt=&#34;Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/multiarch/qemu-user-static/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/multiarch/qemu-user-static.svg?style=flat-square&#34; alt=&#34;Docker Hub&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/multiarch/dockerfile/master/logo.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;multiarch/qemu-user-static&lt;/strong&gt; is to enable an execution of different multi-architecture containers by QEMU &lt;a href=&#34;https://raw.githubusercontent.com/multiarch/qemu-user-static/master/#ref-1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; and binfmt_misc &lt;a href=&#34;https://raw.githubusercontent.com/multiarch/qemu-user-static/master/#ref-2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;. Here are examples with Docker &lt;a href=&#34;https://raw.githubusercontent.com/multiarch/qemu-user-static/master/#ref-3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ uname -m&#xA;x86_64&#xA;&#xA;$ docker run --rm -t arm64v8/ubuntu uname -m&#xA;standard_init_linux.go:211: exec user process caused &#34;exec format error&#34;&#xA;&#xA;$ docker run --rm --privileged multiarch/qemu-user-static --reset -p yes&#xA;&#xA;$ docker run --rm -t arm64v8/ubuntu uname -m&#xA;aarch64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It works on many architectures and OS container images.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run --rm -t arm32v6/alpine uname -m&#xA;armv7l&#xA;&#xA;$ docker run --rm -t ppc64le/debian uname -m&#xA;ppc64le&#xA;&#xA;$ docker run --rm -t s390x/ubuntu uname -m&#xA;s390x&#xA;&#xA;$ docker run --rm -t arm64v8/fedora uname -m&#xA;aarch64&#xA;&#xA;$ docker run --rm -t arm32v7/centos uname -m&#xA;armv7l&#xA;&#xA;$ docker run --rm -t ppc64le/busybox uname -m&#xA;ppc64le&#xA;&#xA;$ docker run --rm -t i386/ubuntu uname -m&#xA;x86_64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Podman &lt;a href=&#34;https://raw.githubusercontent.com/multiarch/qemu-user-static/master/#ref-4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; also works.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo podman run --rm --privileged multiarch/qemu-user-static --reset -p yes&#xA;&#xA;$ podman run --rm -t arm64v8/fedora uname -m&#xA;aarch64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Singularity &lt;a href=&#34;https://raw.githubusercontent.com/multiarch/qemu-user-static/master/#ref-5&#34;&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; also works.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo singularity run docker://multiarch/qemu-user-static --reset -p yes&#xA;&#xA;$ singularity run --cleanenv docker://arm64v8/fedora uname -m&#xA;aarch64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;multiarch/qemu-user-static images&lt;/h3&gt; &#xA;&lt;p&gt;multiarch/qemu-user-static images are managed on the &lt;a href=&#34;https://hub.docker.com/r/multiarch/qemu-user-static/&#34;&gt;Docker Hub&lt;/a&gt; container repository. The images have below tags.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Images&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;multiarch/qemu-user-static&lt;/code&gt; image&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;multiarch/qemu-user-static:$version&lt;/code&gt; images&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;multiarch/qemu-user-static:$from_arch-$to_arch&lt;/code&gt; images&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;multiarch/qemu-user-static:$from_arch-$to_arch-$version&lt;/code&gt; images&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;multiarch/qemu-user-static:$to_arch&lt;/code&gt; images&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;multiarch/qemu-user-static:$to_arch-$version&lt;/code&gt; images&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;multiarch/qemu-user-static:register&lt;/code&gt; image&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Variables&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$version&lt;/code&gt;: Based QEMU&#39;s version.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$from_arch&lt;/code&gt;: Host architecture&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$to_arch&lt;/code&gt;: Guest architecture&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;multiarch/qemu-user-static&lt;/code&gt; image container includes both a register script to register binfmt_misc entries and all the &lt;code&gt;/usr/bin/qemu-$arch-static&lt;/code&gt; binary files in the container in it. &lt;code&gt;multiarch/qemu-user-static&lt;/code&gt; image is an alias of the latest version of &lt;code&gt;multiarch/qemu-user-static:$version&lt;/code&gt; images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;multiarch/qemu-user-static:$to_arch&lt;/code&gt; images are aliases of &lt;code&gt;multiarch/qemu-user-static:x86_64-$to_arch&lt;/code&gt;. &lt;code&gt;multiarch/qemu-user-static:$to_arch&lt;/code&gt; images only include the &lt;code&gt;$to_arch&lt;/code&gt;&#39;s &lt;code&gt;/usr/bin/qemu-$to_arch-static&lt;/code&gt; binary file in it. &lt;code&gt;multiarch/qemu-user-static:$to_arch&lt;/code&gt; image is an alias of the latest version of &lt;code&gt;multiarch/qemu-user-static:$to_arch-$version&lt;/code&gt; images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;multiarch/qemu-user-static:register&lt;/code&gt; image has only the register script binfmt_misc entries.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;multiarch/qemu-user-static&lt;/code&gt; and &lt;code&gt;multiarch/qemu-user-static:register&lt;/code&gt; images execute the register script that registers below kind of &lt;code&gt;/proc/sys/fs/binfmt_misc/qemu-$arch&lt;/code&gt; files for all supported processors except the current one in it when running the container. See binfmt_misc manual [2] for detail of the files. As the &lt;code&gt;/proc/sys/fs/binfmt_misc&lt;/code&gt; are common between host and inside of container, the register script modifies the file on host.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cat /proc/sys/fs/binfmt_misc/qemu-$arch&#xA;enabled&#xA;interpreter /usr/bin/qemu-$arch-static&#xA;flags: F&#xA;offset 0&#xA;magic 7f454c460201010000000000000000000200b700&#xA;mask ffffffffffffff00fffffffffffffffffeffffff&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;--reset&lt;/code&gt; option is implemented at the register script that executes &lt;code&gt;find /proc/sys/fs/binfmt_misc -type f -name &#39;qemu-*&#39; -exec sh -c &#39;echo -1 &amp;gt; {}&#39; \;&lt;/code&gt; to remove binfmt_misc entry files before register the entry. When same name&#39;s file &lt;code&gt;/proc/sys/fs/binfmt_misc/qemu-$arch&lt;/code&gt; exists, the register command is failed with an error message &#34;sh: write error: File exists&#34;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run --rm --privileged multiarch/qemu-user-static [--reset][--help][-p yes][options]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On below image, we can not specify &lt;code&gt;-p yes&lt;/code&gt; (&lt;code&gt;--persistent yes&lt;/code&gt;) option. Because an interpreter&#39;s existance is checked when registering a binfmt_misc entry. As the interpreter does not exist in the container, the register script finishes with an error.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run --rm --privileged multiarch/qemu-user-static:register [--reset][--help][options]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then the register script executes QEMU&#39;s &lt;a href=&#34;https://github.com/qemu/qemu/raw/master/scripts/qemu-binfmt-conf.sh&#34;&gt;scripts/qemu-binfmt-conf.sh&lt;/a&gt; script with options. You can check &lt;code&gt;usage()&lt;/code&gt; in the file about the options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: qemu-binfmt-conf.sh [--qemu-path PATH][--debian][--systemd CPU]&#xA;                           [--help][--credential yes|no][--exportdir PATH]&#xA;                           [--persistent yes|no][--qemu-suffix SUFFIX]&#xA;       Configure binfmt_misc to use qemu interpreter&#xA;       --help:        display this usage&#xA;       --qemu-path:   set path to qemu interpreter ($QEMU_PATH)&#xA;       --qemu-suffix: add a suffix to the default interpreter name&#xA;       --debian:      don&#39;t write into /proc,&#xA;                      instead generate update-binfmts templates&#xA;       --systemd:     don&#39;t write into /proc,&#xA;                      instead generate file for systemd-binfmt.service&#xA;                      for the given CPU. If CPU is &#34;ALL&#34;, generate a&#xA;                      file for all known cpus&#xA;       --exportdir:   define where to write configuration files&#xA;                      (default: $SYSTEMDDIR or $DEBIANDIR)&#xA;       --credential:  if yes, credential and security tokens are&#xA;                      calculated according to the binary to interpret&#xA;       --persistent:  if yes, the interpreter is loaded when binfmt is&#xA;                      configured and remains in memory. All future uses&#xA;                      are cloned from the open file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can run &lt;code&gt;/usr/bin/qemu-$arch-static&lt;/code&gt; binary file` in the container.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run --rm -t multiarch/qemu-user-static:x86_64-aarch64 /usr/bin/qemu-aarch64-static -help&#xA;usage: qemu-aarch64 [options] program [arguments...]&#xA;Linux CPU emulator (compiled for aarch64 emulation)&#xA;...&#xA;&#xA;$ docker run --rm -t multiarch/qemu-user-static:x86_64-aarch64 /usr/bin/qemu-aarch64-static -version&#xA;qemu-aarch64 version 4.0.0 (qemu-4.0.0-5.fc31)&#xA;Copyright (c) 2003-2019 Fabrice Bellard and the QEMU Project developers&#xA;&#xA;&#xA;$ docker run --rm -t multiarch/qemu-user-static:aarch64 /usr/bin/qemu-aarch64-static -help&#xA;usage: qemu-aarch64 [options] program [arguments...]&#xA;Linux CPU emulator (compiled for aarch64 emulation)&#xA;...&#xA;&#xA;$ docker run --rm -t multiarch/qemu-user-static:aarch64 /usr/bin/qemu-aarch64-static -version&#xA;qemu-aarch64 version 4.0.0 (qemu-4.0.0-5.fc31)&#xA;Copyright (c) 2003-2019 Fabrice Bellard and the QEMU Project developers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;multiarch/qemu-user-static:$from_arch-$to_arch&lt;/code&gt; images are used with &lt;code&gt;multiarch/qemu-user-static:register&lt;/code&gt; image. Because when the binfmt_misc entry is registered without &lt;code&gt;-p&lt;/code&gt; option, the interpreter needs to be put in the container.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run --rm --privileged multiarch/qemu-user-static:register --reset&#xA;&#xA;$ docker build --rm -t &#34;test/integration/ubuntu&#34; -&amp;lt;&amp;lt;EOF&#xA;FROM multiarch/qemu-user-static:x86_64-aarch64 as qemu&#xA;FROM arm64v8/ubuntu&#xA;COPY --from=qemu /usr/bin/qemu-aarch64-static /usr/bin&#xA;EOF&#xA;&#xA;$ docker run --rm -t &#34;test/integration/ubuntu&#34; uname -m&#xA;aarch64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have &lt;code&gt;qemu-$arch-static&lt;/code&gt; binary files on your local environment, you can set it to the container by &lt;code&gt;docker -v&lt;/code&gt; volume mounted file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run --rm --privileged multiarch/qemu-user-static:register --reset&#xA;&#xA;$ docker run --rm -t arm64v8/ubuntu uname -m&#xA;standard_init_linux.go:211: exec user process caused &#34;no such file or directory&#34;&#xA;&#xA;$ docker run --rm -t -v /usr/bin/qemu-aarch64-static:/usr/bin/qemu-aarch64-static arm64v8/ubuntu uname -m&#xA;aarch64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;multiarch compatible images [DEPRECATED]&lt;/h3&gt; &#xA;&lt;p&gt;The concept of &#34;compatible images&#34; are deprecated because &lt;strong&gt;multiarch/qemu-user-static&lt;/strong&gt; can build and run standard multi-architecture container images without the multiarch compatible images now. But you can refer the document &lt;a href=&#34;https://raw.githubusercontent.com/multiarch/qemu-user-static/master/docs/compatible_images.md&#34;&gt;Compatible images&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The compatible image is the one to add &lt;code&gt;/usr/bin/qemu-$arch-static&lt;/code&gt; binary inside of the container based on the standard arch specific container. Last time, we could not register binfmt_misc entry with &lt;code&gt;flags: F&lt;/code&gt; (persistent option). When &lt;code&gt;flags: F&lt;/code&gt; was not set, the interpreter always needed to be existed inside of the container to run the arch container.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We encourage you to contribute to &lt;strong&gt;multiarch/qemu-user-static&lt;/strong&gt;! Please check out the &lt;a href=&#34;https://raw.githubusercontent.com/multiarch/qemu-user-static/master/CONTRIBUTING.md&#34;&gt;Contributing to multiarch/qemu-user-static guide&lt;/a&gt; for guidelines about how to proceed.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/multiarch/qemu-user-static/master/docs/developers_guide.md&#34;&gt;Developers guide&lt;/a&gt; for detail.&lt;/p&gt; &#xA;&lt;h2&gt;Supported host architectures&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;x86_64&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Currently qemu-user-static is not available on other host architectures such as aarch64. Run &lt;code&gt;uname -m&lt;/code&gt; to check it on your environment.&lt;/p&gt; &#xA;&lt;h2&gt;Examples &amp;amp; articles&lt;/h2&gt; &#xA;&lt;p&gt;Please note that some examples using compatible images are deprecated.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/multiarch/qemu-user-static/master/docs/examples.md&#34;&gt;Examples &amp;amp; articles&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a id=&#34;ref-1&#34; href=&#34;https://raw.githubusercontent.com/multiarch/qemu-user-static/master/#ref-1&#34;&gt;[1]&lt;/a&gt; QEMU: &lt;a href=&#34;https://www.qemu.org/&#34;&gt;https://www.qemu.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a id=&#34;ref-2&#34; href=&#34;https://raw.githubusercontent.com/multiarch/qemu-user-static/master/#ref-2&#34;&gt;[2]&lt;/a&gt; binfmt_misc: &lt;a href=&#34;https://www.kernel.org/doc/html/latest/admin-guide/binfmt-misc.html&#34;&gt;https://www.kernel.org/doc/html/latest/admin-guide/binfmt-misc.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a id=&#34;ref-3&#34; href=&#34;https://raw.githubusercontent.com/multiarch/qemu-user-static/master/#ref-3&#34;&gt;[3]&lt;/a&gt; Docker: &lt;a href=&#34;https://www.docker.com/&#34;&gt;https://www.docker.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a id=&#34;ref-4&#34; href=&#34;https://raw.githubusercontent.com/multiarch/qemu-user-static/master/#ref-4&#34;&gt;[4]&lt;/a&gt; Podman: &lt;a href=&#34;https://podman.io/&#34;&gt;https://podman.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a id=&#34;ref-5&#34; href=&#34;https://raw.githubusercontent.com/multiarch/qemu-user-static/master/#ref-5&#34;&gt;[5]&lt;/a&gt; Singularity: &lt;a href=&#34;https://sylabs.io/singularity/&#34;&gt;https://sylabs.io/singularity/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>