<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-07T01:46:31Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>erikw/vim-keybindings-everywhere-the-ultimate-list</title>
    <updated>2023-05-07T01:46:31Z</updated>
    <id>tag:github.com,2023-05-07:/erikw/vim-keybindings-everywhere-the-ultimate-list</id>
    <link href="https://github.com/erikw/vim-keybindings-everywhere-the-ultimate-list" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The ultimate list of which programs support Vim keybindings natively, or how they can be added with extensions.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Vim Keybindings Everywhere - The Ultimate List &lt;a href=&#34;https://twitter.com/intent/tweet?text=Get%20Vim%20keybindings%20everywhere%20-%20the%20ultimate%20list%20of%20programs%20with%20native%20support%20or%20extensions%20providing%20it&amp;amp;url=https://github.com/erikw/vim-keybindings-everywhere-the-ultimate-list&amp;amp;via=erik_westrup&amp;amp;hashtags=vim,keybindings,list&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/http/shields.io.svg?style=social&#34; alt=&#34;Tweet&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/erikw/vim-keybindings-everywhere-the-ultimate-list/main/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Native%20programs%20listed-46-brightgreen&#34; alt=&#34;&lt;magic-marker-nbr-native&gt;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/erikw/vim-keybindings-everywhere-the-ultimate-list/main/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Extensions%20listed-39-blue&#34; alt=&#34;&lt;magic-marker-nbr-extensions&gt;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Netflix/osstracker&#34;&gt;&lt;img src=&#34;https://img.shields.io/osslifecycle/erikw/vim-keybindings-everywhere-the-ultimate-list&#34; alt=&#34;OSS Lifecycle&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/erikw/vim-keybindings-everywhere-the-ultimate-list/main/LICENSE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/erikw/vim-keybindings-everywhere-the-ultimate-list?color=lightgrey&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/erikw/vim-keybindings-everywhere-the-ultimate-list/actions/workflows/bump_tool_count.yml&#34;&gt;&lt;img src=&#34;https://github.com/erikw/vim-keybindings-everywhere-the-ultimate-list/actions/workflows/bump_tool_count.yml/badge.svg?sanitize=true&#34; alt=&#34;Bump count of tools listed&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/erikw/vim-keybindings-everywhere-the-ultimate-list/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/erikw/vim-keybindings-everywhere-the-ultimate-list&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt; including these top contributors:&lt;br&gt; &lt;a href=&#34;https://github.com/erikw/vim-keybindings-everywhere-the-ultimate-list/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=erikw/vim-keybindings-everywhere-the-ultimate-list&amp;amp;max=24&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;span&gt;🚀&lt;/span&gt; PRs are welcome&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;What is this list?&lt;/h1&gt; &#xA;&lt;p&gt;Once your fingers have &lt;a href=&#34;https://www.thejach.com/view/2012/07/vims_learning_curve_is_wrong&#34;&gt;learned&lt;/a&gt; to speak Vim, they don&#39;t want to speak anything else! It&#39;s simply a very effective way of navigating, creating and editing text. Thus, it&#39;s natural that one would like to get Vim-like keybindings in as many programs we use as possible.&lt;/p&gt; &#xA;&lt;p&gt;The intention of this collaborative list is to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;learn which programs/apps that you already use which you can enhance with Vim keybindings. Search in your browser with &lt;code&gt;ctrl/cmd + f&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;discover new programs that support Vim keybindings. In the need for a new file manager? Why not get one that has Vim keybindings?&lt;/li&gt; &#xA; &lt;li&gt;be up-to-date and alive -- add new programs and extensions as they evolve!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are of course already lists like this one floating around on the internet (see &lt;a href=&#34;https://raw.githubusercontent.com/erikw/vim-keybindings-everywhere-the-ultimate-list/main/#Acknowledgments&#34;&gt;Acknowledgments&lt;/a&gt;). While they are great, the issue is that they are not up-to-date with the latest developments. There are Vim-emulator add-ons being developed all the time! This is why this collaborative list was created.&lt;/p&gt; &#xA;&lt;p&gt;(yes, technically it is &lt;strong&gt;vi&lt;/strong&gt;-like keybindings we talk about here, but most people know and Google for vim, thus vim is used here instead of vi).&lt;/p&gt; &#xA;&lt;h1&gt;The Ultimate Vim Keybinding List&lt;/h1&gt; &#xA;&lt;p&gt;The following symbols are used with each list item to make it clearer what kind of Vim keybindings support exist&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; - built-in support (possibly via a setting)&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; - via addon/extension&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Terminology:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itlaw.fandom.com/wiki/Text_user_interface&#34;&gt;TUI&lt;/a&gt; - Text User Interface&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: navigate this file easily by using GitHub&#39;s built-in Markdown Table of Contents in the top left corner: &lt;a href=&#34;https://raw.githubusercontent.com/erikw/vim-keybindings-everywhere-the-ultimate-list/main/#&#34; title=&#34;GitHub built-in Table of Contents for markdown files.&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/erikw/vim-keybindings-everywhere-the-ultimate-list/main/img/github_md_toc.png&#34; width=&#34;256&#34; alt=&#34;ToC&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;General&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://github.com/cknadler/vim-anywhere&#34;&gt;vim-anywhere&lt;/a&gt; - spawn a vim buffer from any text input in the operating system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://www.homerow.app/&#34;&gt;Homerow&lt;/a&gt; - add vim-like navigation to any macOS app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://kindavim.app/&#34;&gt;kindaVim&lt;/a&gt; - get vim-like navigation in any macOS text field.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://github.com/FelixKratz/SketchyVim&#34;&gt;sketchyvim&lt;/a&gt; - get vim-like navigation in any macOS text field.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://github.com/tmux/tmux&#34;&gt;tmux&lt;/a&gt; - the terminal multiplexer, superseding GNU Screen. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &#xA;    &lt;details&gt; &#xA;     &lt;summary&gt;~/.config/tmux/tmux.conf&lt;/summary&gt; &#xA;     &lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt; set-option -g status-keys vi&#x9;&#x9;# Use Vi bindings in tmux command prompt.&#xA; set-window-option -g mode-keys vi&#x9;# Use Vi bindings in copy and choice mode.&#xA;&#xA; # Optional: some Vi-like navigation for smart pane switching.&#xA; # NOTE this could override default keybindigns like &amp;lt;prefix&amp;gt;-l.&#xA; bind h select-pane -L&#xA; bind j select-pane -D&#xA; bind k select-pane -U&#xA; bind l select-pane -R&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/details&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shabble/irssi-scripts/tree/master/vim-mode&#34;&gt;irssi&lt;/a&gt; - the popular IRC client. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://github.com/shabble/irssi-scripts/tree/master/vim-mode&#34;&gt;vim_mode&lt;/a&gt; plugin.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://ipython.org/&#34;&gt;ipython&lt;/a&gt; - Interactive Python shell. It no longer uses readline for input, so it must be configured in the ipython profile &lt;code&gt;~/.ipython/profile_default/ipython_config.py&lt;/code&gt; itself (&lt;a href=&#34;https://gist.github.com/sstirlin/c3c207b1052b613ab9554b4ebdfc3f35&#34;&gt;reference&lt;/a&gt;):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;c.TerminalInteractiveShell.editing_mode = &#34;vi&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://wiki.haskell.org/GHC/GHCi&#34;&gt;GHCi&lt;/a&gt; - Interactive Haskell environment. It uses &lt;a href=&#34;https://hackage.haskell.org/package/haskeline&#34;&gt;haskeline&lt;/a&gt; instead of readline. Put this in &lt;code&gt;~/.haskeline&lt;/code&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;editMode: Vi&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://pypi.org/project/jupyterlab-vim/&#34;&gt;Jupyter Lab&lt;/a&gt; - Science and Data Development notebook environment. Add this package &lt;a href=&#34;https://pypi.org/project/jupyterlab-vim/&#34;&gt;jupyterlab-vim&lt;/a&gt; and restart the server. It is available for both &lt;code&gt;pip&lt;/code&gt; and &lt;code&gt;conda&lt;/code&gt; managed environments (and their derivatives).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://www.linqpad.net/&#34;&gt;LINQPad&lt;/a&gt; - The .NET Programmer’s Playground. vi mode available in settings. Go to Edit &amp;gt; Preferences &amp;gt; General UI to enable.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://azure.microsoft.com/en-us/products/data-studio/&#34;&gt;Azure Data Studio&lt;/a&gt; - Database tool similar to Microsoft SQL Server Management Studio. Supports VSCode extensions.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://github.com/VSCodeVim/Vim&#34;&gt;Vim plugin&lt;/a&gt; - Cannot be installed directly in the plugin section. Go to &lt;a href=&#34;https://github.com/VSCodeVim/Vim/releases&#34;&gt;Vim plugin release page&lt;/a&gt; and download &lt;code&gt;.vsix&lt;/code&gt; file. Then open the file in Azure Data Studio. If you see error that the extension is not compatible with current VS Code engine version try older release.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Debuggers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;http://cgdb.github.io/&#34;&gt;cgdb&lt;/a&gt; - a curses interface on top of the GDB debuger with keybindings modeled after vim.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://github.com/gotcha/vimpdb&#34;&gt;vimpdb&lt;/a&gt; - An integration of the python debugger &lt;code&gt;pdb&lt;/code&gt; and vim.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;E-Mail&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;http://www.mutt.org/&#34;&gt;Mutt&lt;/a&gt; - The vim of email, a TUI email client&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://neomutt.org/&#34;&gt;NeoMutt&lt;/a&gt; - A fork of mutt, intendted to reignite the development.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.thunderbird.net/en-US/&#34;&gt;Thunderbird&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://addons.thunderbird.net/en-US/thunderbird/addon/muttator/&#34;&gt;Muttator&lt;/a&gt; - Like Vimperator but for thunderbird.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;File Management&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://vifm.info/&#34;&gt;vifm&lt;/a&gt; - TUI file manager with vi keybindings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://github.com/ranger/ranger&#34;&gt;ranger&lt;/a&gt; - Another TUI file manager.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://github.com/gokcehan/lf&#34;&gt;lf&lt;/a&gt; - TUI file manager similar to ranger.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://dev.yorhel.nl/ncdu&#34;&gt;ncdu&lt;/a&gt; - ncurses disk usage explorer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ghisler.com/&#34;&gt;Total Commander&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://github.com/magicstep/ViATc-English&#34;&gt;ViATc&lt;/a&gt; - adds a Vim mode to Total Commander.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;macOS Finder &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://github.com/chrisgrieser/finder-vim-mode&#34;&gt;Finder Vim Mode&lt;/a&gt; - adds extensive vim-like/ranger-like keybindings, works via Karabiner Elements.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;IDEs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/products/#type=ide&#34;&gt;Jetbrain&#39;s IDEs&lt;/a&gt; (Intellij, PYCharm, PHPStorm, WebStorm, ...) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://plugins.jetbrains.com/plugin/164-ideavim&#34;&gt;IdeaVim&lt;/a&gt; - install it directly from the plugin section in the IDE settings.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://github.com/VSCodeVim/Vim&#34;&gt;Vim plugin&lt;/a&gt; - install it directly in the plugin section in the IDE settings.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://github.com/vscode-neovim/vscode-neovim&#34;&gt;NVim plugin&lt;/a&gt; - alternative to the VIM plugin, uses a full nvim instance in the background instead of just emulating VIM&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://developer.apple.com/xcode/&#34;&gt;XCode&lt;/a&gt; - Apple&#39;s IDE. Vim mode can be enabled under the &#34;Editor&#34; menu without use of plugins. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;del&gt;&lt;a href=&#34;https://github.com/XVimProject/XVim2&#34;&gt;XVim2&lt;/a&gt;&lt;/del&gt; plugin. Deprecated, use native keybindings (above) instead.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.eclipse.org/ide/&#34;&gt;Eclipse&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://marketplace.eclipse.org/content/vrapper-vim&#34;&gt;vrapper-vim&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://marketplace.eclipse.org/content/viplugin&#34;&gt;viplugin&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://marketplace.eclipse.org/content/viable-vim-eclipse&#34;&gt;viable&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://visualstudio.microsoft.com/&#34;&gt;Visual Studio 2015 and above&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=JaredParMSFT.VsVim&#34;&gt;VsVim (Visual Studio 2015-2019)&lt;/a&gt; - install through the extensions inside Visual Studio&lt;/li&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=JaredParMSFT.VsVim2022Preview&#34;&gt;VsVim 2022 (Visual Studio 2022)&lt;/a&gt; - install through the extensions inside Visual Studio&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.geany.org/&#34;&gt;Geany&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://github.com/geany/geany-plugins/raw/master/vimode/README&#34;&gt;vimode&lt;/a&gt; - The vimode plugin can be enabled from the settings.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Music players&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://github.com/ncmpcpp/ncmpcpp&#34;&gt;ncmpcpp&lt;/a&gt; - An ncurses client for &lt;a href=&#34;https://www.musicpd.org/&#34;&gt;mpd&lt;/a&gt;. The navigation can quite easily be made to behave like vim with some keyboard configurations. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &#xA;    &lt;details&gt; &#xA;     &lt;summary&gt;~/.config/ncmpcpp/bindings&lt;/summary&gt; &#xA;     &lt;pre&gt;&lt;code&gt;def_key &#34;j&#34;&#xA;  scroll_down&#xA;def_key &#34;k&#34;&#xA;  scroll_up&#xA;def_key &#34;h&#34;&#xA;  previous_column&#xA;def_key &#34;l&#34;&#xA;  next_column&#xA;def_key &#34;ctrl-b&#34;&#xA;  page_up&#xA;def_key &#34;ctrl-u&#34;&#xA;  page_up&#xA;def_key &#34;ctrl-f&#34;&#xA;  page_down&#xA;def_key &#34;ctrl-d&#34;&#xA;  page_down&#xA;def_key &#34;g&#34;&#xA;  move_home&#xA;def_key &#34;G&#34;&#xA;  move_end&#xA;def_key &#34;n&#34;&#xA;  next_found_item&#xA;def_key &#34;N&#34;&#xA;  previous_found_item&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/details&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://github.com/cmus/cmus&#34;&gt;cmus&lt;/a&gt; - A console music player with vim-like &lt;a href=&#34;https://man.archlinux.org/man/cmus.1.en#KEYBINDINGS&#34;&gt;keybindings&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://github.com/boysetsfrog/vimpc&#34;&gt;vimpc&lt;/a&gt; - A console mpd client that provides a vim-like interface. Default keybindings in the &lt;a href=&#34;https://github.com/boysetsfrog/vimpc/raw/master/doc/help.txt&#34;&gt;help file&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;News/RSS Readers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://newsboat.org/&#34;&gt;Newsboat&lt;/a&gt; - RSS/Atom reader with a TUI.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;del&gt;&lt;a href=&#34;https://github.com/akrennmair/newsbeuter&#34;&gt;Newsbeuter&lt;/a&gt;&lt;/del&gt; - Unmaintained, see Newsboat./&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;PDF viewers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://github.com/naihe2010/apvlv&#34;&gt;apvlv&lt;/a&gt; - A PDF Viewer that acts Like Vim&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://mupdf.com&#34;&gt;MuPDF&lt;/a&gt; - PDF and ebook reader with &lt;a href=&#34;http://tuxdiary.com/2015/04/18/mupdf/&#34;&gt;vim keybindings&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://pwmt.org/projects/zathura&#34;&gt;zathura&lt;/a&gt; - Document reader, vim-keybindings, partly based on MuPDF. Linux only.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://www.sumatrapdfreader.org/free-pdf-reader&#34;&gt;SumatraPDF&lt;/a&gt; - Document reader, vim-keybindings. Windows only.&lt;/li&gt; &#xA; &lt;li&gt;Preview.app - macOS native document viewer: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://github.com/xrisk/preview-vim&#34;&gt;preview-vim&lt;/a&gt; - adds vim-like keybindings, works via Karabiner Elements.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Personal Knowledge Management&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://obsidian.md/&#34;&gt;Obsidian&lt;/a&gt; - under &#34;Editor&#34; options&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://logseq.com/&#34;&gt;Logseq&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://github.com/vipzhicheng/logseq-plugin-vim-shortcuts&#34;&gt;logseq-plugin-vim-shortcuts&lt;/a&gt; - normal mode commands deal with whole blocks, editing text is only possible in edit mode&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Social&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://github.com/pkulak/matui&#34;&gt;matui&lt;/a&gt; - a Matrix TUI with vim-like navigation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://github.com/RasmusLindroth/tut&#34;&gt;tut&lt;/a&gt; - a Mastodon client with vim-like navigation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Source Code Management&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://git-scm.com/&#34;&gt;git&lt;/a&gt; - Nothing&#39;s better than the real deal. Tell git to use vim/nvim when editing commit messages, interactive rebase etc. by putting in your &lt;code&gt;~/.config/git/config&lt;/code&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[user]&#xA;    editor = vim&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://jonas.github.io/tig/&#34;&gt;tig&lt;/a&gt; - Text interface for git. Works mostly like vim out of the box, but can be enhanced: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &#xA;    &lt;details&gt; &#xA;     &lt;summary&gt;~/.config/tig/config&lt;/summary&gt; &#xA;     &lt;pre&gt;&lt;code&gt;bind generic &amp;lt;Ctrl-f&amp;gt;   scroll-page-down&#xA;bind generic &amp;lt;Ctrl-b&amp;gt;   scroll-page-up&#xA;bind generic g move-first-line&#x9;&#x9;&#x9;# Move cursor to top.&#xA;bind generic G move-last-line&#x9;&#x9;&#x9;# Move cursor to bottom.&#xA;&#xA;bind main B :toggle commit-title-graph&#x9;&#x9;# Rebind G to B.&#xA;bind main G move-last-line&#x9;&#x9;&#x9;# Move cursor to bottom.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/details&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://www.mercurial-scm.org/&#34;&gt;hg/mercurical&lt;/a&gt; - Put in your &lt;code&gt;~/.config/hg/hgrc&lt;/code&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[ui]&#xA;    editor = vim&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Shells&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://man.archlinux.org/man/readline.3&#34;&gt;readline&lt;/a&gt; - Readline is a library used by many CLI programs to read input from users. By configuring readline to use vi key bindings, you automatically get it for programs like &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;irb&lt;/code&gt;, &lt;code&gt;octave&lt;/code&gt; etc. By default, readline has Emacs-like keybindings, but you can change that by putting this in your &lt;code&gt;~/.inputrc&lt;/code&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;pre&gt;&lt;code&gt; set editing-mode vi&#xA; set keymap vi-insert&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://www.gnu.org/software/bash/&#34;&gt;Bash&lt;/a&gt; - The preferred method is to set Vi mode in &lt;code&gt;~/.inputrc&lt;/code&gt; via readline, as you will get Vi mode automatically in all programs using the library. However, if you just want this for bash, put this in your bash startup file e.g. &lt;code&gt;~/.bashrc&lt;/code&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;set -o vi&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Z_shell&#34;&gt;zsh&lt;/a&gt; - just put this in your ZSH startup file, most likely &lt;code&gt;~/.zshrc&lt;/code&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bindkey -v&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &#xA;    &lt;details&gt; &#xA;     &lt;summary&gt;Extra text object keybindings&lt;/summary&gt; &#xA;     &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Add text object extension -- eg ci&#34; da(:&#xA;autoload -U select-quoted&#xA;zle -N select-quoted&#xA;for m in visual viopp; do&#xA;    for c in {a,i}{\&#39;,\&#34;,\`}; do&#xA;        bindkey -M $m $c select-quoted&#xA;    done&#xA;done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/details&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://fishshell.com/&#34;&gt;fish&lt;/a&gt; - just add to your &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; (&lt;a href=&#34;https://stackoverflow.com/a/28445450/265508&#34;&gt;reference&lt;/a&gt;):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fish_vi_key_bindings&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://www.tcsh.org/&#34;&gt;tcsh&lt;/a&gt; - put this in your ksh startup file e.g. &lt;code&gt;~/.kshrc&lt;/code&gt; (&lt;a href=&#34;https://www.oreilly.com/library/view/mac-os-x/0596004583/ch04s02.html&#34;&gt;reference&lt;/a&gt;):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bindkey -v&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/KornShell&#34;&gt;ksh&lt;/a&gt; - put this in your ksh startup file e.g. &lt;code&gt;~/.kshrc&lt;/code&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;set -o vi&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://www.nushell.sh&#34;&gt;nushell&lt;/a&gt; - put this in your config file e.g. &lt;code&gt;$nu.config-path&lt;/code&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;pre&gt;&lt;code class=&#34;language-nu&#34;&gt;let-env config = {&#xA;  # ...&#xA;  edit_mode: vi,&#xA;  # ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;✅ &lt;a href=&#34;https://learn.microsoft.com/en-us/powershell/&#34;&gt;pwsh&lt;/a&gt; - The Readline module offers support for convenient vim support. Add this to your &lt;code&gt;$Profile&lt;/code&gt;: *&lt;/p&gt; &lt;pre&gt;&lt;code&gt; Import-Module PSReadLine&#xA; # enable Vim on the shell and as editor&#xA; $OnViModeChange = [scriptblock]{&#xA;    if ($args[0] -eq &#39;Command&#39;) {&#xA;        # Set the cursor to a blinking block.&#xA;        Write-Host -NoNewLine &#34;`e[2 q&#34;&#xA;    }&#xA;    else {&#xA;        # Set the cursor to a blinking line.&#xA;        Write-Host -NoNewLine &#34;`e[5 q&#34;&#xA;    }&#xA; }&#xA;&#xA; Set-PsReadLineOption -EditMode Vi&#xA; Set-PSReadLineOption -ViModeIndicator Script -ViModeChangeHandler $OnViModeChange&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This was collected from many github issues and posts. Powershell 5.1 for one reason or another refuses to change the cursor so the script to give feedback does not work. Just remove it and it will still work, just no feedback of the mode you&#39;re in.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;System Tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://aur.archlinux.org/packages/htop-vim/&#34;&gt;htop-vim&lt;/a&gt; - A patched version the &lt;a href=&#34;https://htop.dev/&#34;&gt;htop&lt;/a&gt; interactive process viewer that has vim keybindings for navigation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://wiki.debian.org/Aptitude&#34;&gt;aptitude&lt;/a&gt; - ncurses interface for APT on Debian-derived Linux distros. The &lt;a href=&#34;https://www.debian.org/doc/manuals/aptitude/ch02s05s02.en.html&#34;&gt;keybindings&lt;/a&gt; are already vim-like.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Text Editors&lt;/h2&gt; &#xA;&lt;p&gt;We know that Vi-&lt;a href=&#34;http://www.linfo.org/vi/clones.html&#34;&gt;clones&lt;/a&gt;/derivatives have Vi(m) keybindings so let&#39;s skip those here (Vim, NeoVim, vile, ...)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Atom &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://github.com/t9md/atom-vim-mode-plus&#34;&gt;atom-vim-mode-plus&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Emacs &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://www.emacswiki.org/emacs/Evil&#34;&gt;evil-mode&lt;/a&gt; - Extensible vi layer for Emacs.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://www.spacemacs.org/&#34;&gt;spacemacs&lt;/a&gt; - Emacs configuration package that improves the Emacs experience, including vim bindings via &lt;code&gt;evil-mode&lt;/code&gt;. Features a vim-like leader (space) for common commands.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://github.com/doomemacs/doomemacs&#34;&gt;doom emacs&lt;/a&gt; - Configuration package that provides a similar experience to Spacemacs (including &lt;code&gt;evil-mode&lt;/code&gt;. Also implements spacebar-as-leader-key.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;del&gt;&lt;a href=&#34;https://www.emacswiki.org/emacs/Vimpulse&#34;&gt;Vimpulse&lt;/a&gt;&lt;/del&gt; Deprecated, check out Evil.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;del&gt;&lt;a href=&#34;https://www.emacswiki.org/emacs/VimMode&#34;&gt;Vim Mode&lt;/a&gt;&lt;/del&gt; Deprecated, check out Evil.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://www.sublimetext.com/&#34;&gt;Sublime Text&lt;/a&gt; has a bult-in &lt;a href=&#34;https://www.sublimetext.com/docs/vintage.html&#34;&gt;Vintage mode&lt;/a&gt; that can be enabled. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://github.com/NeoVintageous/NeoVintageous&#34;&gt;NeoVintageous&lt;/a&gt; - An advanced Vim emulation layer.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; &lt;del&gt;&lt;a href=&#34;https://github.com/onivim/oni2&#34;&gt;oni2 (onivim)&lt;/a&gt;&lt;/del&gt; &lt;a href=&#34;https://github.com/onivim/oni2/issues/3861&#34;&gt;Deprecated&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;WYSIWYG Editors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://www.zettlr.com&#34;&gt;zettlr&lt;/a&gt; - Markdown document editor on the fly, vim+emacs keybindings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://vnotex.github.io/vnote/en_us/&#34;&gt;VNote&lt;/a&gt; - A note taking app.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Web browsers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://qutebrowser.org/&#34;&gt;qutebrowser&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;span&gt;✅&lt;/span&gt; &lt;a href=&#34;https://vieb.dev/&#34;&gt;Vieb&lt;/a&gt; - Vim bindings for the web by design (electron based)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Firefox&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/tridactyl-vim/&#34;&gt;tridactyl-vim&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/vimium-ff/&#34;&gt;Vimium-FF&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/surfingkeys_ff/&#34;&gt;Surfingkeys&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/vim-vixen/&#34;&gt;Vim Vixen&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Chrome&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb&#34;&gt;Vimium&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://chrome.google.com/webstore/detail/cvim/ihlenndgcmojhcghmfjfneahoeklbjjh&#34;&gt;cVim&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://chrome.google.com/webstore/detail/surfingkeys/gfbliohnnapiefjpjlpjnehglfpaknnc&#34;&gt;Surfingkeys&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://chrome.google.com/webstore/detail/wasavi/dgogifpkoilgiofhhhodbodcfgomelhe&#34;&gt;wasavi&lt;/a&gt; - Transform text areas into a vi editor.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Safari&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://apps.apple.com/us/app/surfingkeys/id1609752330&#34;&gt;Surfingkeys&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://apps.apple.com/us/app/vimari/id1480933944?ls=1&amp;amp;mt=12&#34;&gt;Vimari&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Edge&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://microsoftedge.microsoft.com/addons/detail/surfingkeys/kgnghhfkloifoabeaobjkgagcecbnppg&#34;&gt;Surfingkeys&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Opera&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://chrome.google.com/webstore/detail/wasavi/dgogifpkoilgiofhhhodbodcfgomelhe&#34;&gt;wasavi&lt;/a&gt; - Transform text areas into a vi editor.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Various&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;span&gt;➕&lt;/span&gt; &lt;a href=&#34;https://github.com/glacambre/firenvim&#34;&gt;firenvim&lt;/a&gt; - Transform text areas into a neovim instance that inherits your existing config (keymaps, plugins, etc).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;This is a collaborative list -- please fork and make a pull request to add or improve the entries here! The initial contributions by the repo owner is limited to the tools he uses or knows of, so there is a lot of room for further additions here!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;add links to references for configuration if you have any.&lt;/li&gt; &#xA;   &lt;li&gt;use &lt;a href=&#34;https://wiki.archlinux.org/title/XDG_Base_Directory&#34;&gt;XDG paths&lt;/a&gt; when possible.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;It&#39;s okay to list deprecated or unmaintained software for the sake of completness, but let&#39;s put a &lt;del&gt;strigke-through&lt;/del&gt; on them.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Acknowledgments&lt;/h1&gt; &#xA;&lt;p&gt;Hats off to the authors of these articles that helped kick-start this list together with the author&#39;s own experiences: &lt;a href=&#34;https://www.reddit.com/r/vim/comments/3tluqr/my_list_of_applications_with_vi_keybindings/&#34;&gt;#1&lt;/a&gt;, &lt;a href=&#34;https://reversed.top/2016-08-13/big-list-of-vim-like-software/&#34;&gt;#2&lt;/a&gt;, &lt;a href=&#34;https://www.slant.co/topics/7131/~programming-text-editors-with-vim-key-bindings&#34;&gt;#3&lt;/a&gt;, &lt;a href=&#34;https://vim.reversed.top/&#34;&gt;#4&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cknadler/vim-anywhere</title>
    <updated>2023-05-07T01:46:31Z</updated>
    <id>tag:github.com,2023-05-07:/cknadler/vim-anywhere</id>
    <link href="https://github.com/cknadler/vim-anywhere" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Use Vim everywhere you&#39;ve always wanted to&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;vim-anywhere&lt;/h1&gt; &#xA;&lt;p&gt;Sometimes, you edit text outside of Vim. These are sad times. Enter vim-anywhere!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cknadler/vim-anywhere/master/assets/demo.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once &lt;a href=&#34;https://raw.githubusercontent.com/cknadler/vim-anywhere/master/#keybinding&#34;&gt;invoked&lt;/a&gt;, vim-anywhere will open a buffer. Close it and its contents are copied to your &lt;strong&gt;clipboard&lt;/strong&gt; and your previous application is refocused.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h4&gt;Requirements&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;OSX:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MacVim (&lt;code&gt;brew install --cask macvim&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Gnome (or a derivative)&lt;/li&gt; &#xA; &lt;li&gt;gVim&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Install&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -fsSL https://raw.github.com/cknadler/vim-anywhere/master/install | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Update&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~/.vim-anywhere/update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Uninstall&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~/.vim-anywhere/uninstall&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Keybinding&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;OSX:&lt;/strong&gt; ( default = &lt;code&gt;ctrl+cmd+v&lt;/code&gt; )&lt;/p&gt; &#xA;&lt;p&gt;You can adjust the shortcut via &lt;a href=&#34;https://raw.githubusercontent.com/cknadler/vim-anywhere/master/assets/shortcut.png&#34;&gt;system preferences&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;System Preferences &amp;gt; Keyboard &amp;gt; Shortcuts &amp;gt; Services &amp;gt; Vim Anywhere&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux:&lt;/strong&gt; ( default = &lt;code&gt;ctrl+alt+v&lt;/code&gt; )&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Gnome&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ gconftool -t str --set /desktop/gnome/keybindings/vim-anywhere/binding &amp;lt;custom binding&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;I3WM&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ echo &#39;bindsym $mod+Alt+v exec ~/.vim-anywhere/bin/run&#39; &amp;gt;&amp;gt; ~/.i3/config # remember to reload your config after&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adjust in case &lt;code&gt;$mod&lt;/code&gt; is not set to ctrl.&lt;/p&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;vim-anywhere creates a temporary file in &lt;code&gt;/tmp/vim-anywhere&lt;/code&gt; when invoked. These files stick around until you restart your system, giving you a temporary history.&lt;/p&gt; &#xA;&lt;p&gt;View your history:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ls /tmp/vim-anywhere&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Reopen your most recent file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vim $( ls /tmp/vim-anywhere | sort -r | head -n 1 )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;I use Vim for &lt;em&gt;almost&lt;/em&gt; everything. I wish I didn&#39;t have to say &lt;em&gt;almost&lt;/em&gt;. My usual workflow is to open Vim, write, copy the text out of my current buffer and paste it into whatever application I was just using. vim-anywhere attempts to automate this process as much as possible, reducing the friction of using Vim to do more than just edit code.&lt;/p&gt; &#xA;&lt;h2&gt;Bugs&lt;/h2&gt; &#xA;&lt;p&gt;First, make sure to &lt;a href=&#34;https://raw.githubusercontent.com/cknadler/vim-anywhere/master/FAQ.md&#34;&gt;read the FAQ&lt;/a&gt;. If you don&#39;t find the answer you&#39;re looking for there, feel free to open an issue.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cknadler/vim-anywhere/master/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests, suggestions and issues of any kind are welcome. &lt;strong&gt;Make sure to check out the &lt;a href=&#34;https://raw.githubusercontent.com/cknadler/vim-anywhere/master/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; before you submit a pull request.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Alirezad07/X-Panel-SSH-User-Management</title>
    <updated>2023-05-07T01:46:31Z</updated>
    <id>tag:github.com,2023-05-07:/Alirezad07/X-Panel-SSH-User-Management</id>
    <link href="https://github.com/Alirezad07/X-Panel-SSH-User-Management" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SSH Panel User Management&lt;/p&gt;&lt;hr&gt;&lt;p dir=&#34;auto&#34;&gt; &lt;img alt=&#34;GitHub release (latest by date)&#34; src=&#34;https://img.shields.io/github/v/release/Alirezad07/X-Panel-SSH-User-Management&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;X Panel SSH User Management&lt;/h1&gt; &#xA;&lt;h3&gt;پنل مدیریت و فروش VPN با پروتکل SSH&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;امکانات&lt;/strong&gt; &lt;br&gt; ایجاد کاربر بدون محدودیت &lt;br&gt; اعمال محدودیت در حجم مصرفی و تاریخ انقضا&lt;br&gt; قابلیت محاسبه تاریخ انقضا در اولین اتصال&lt;br&gt; اعمال محدودیت در چند کاربره بودن اکانت&lt;br&gt; مشاهده کاربران آنلاین&lt;br&gt; امکان بکاپ گیری از کاربران و ریستور بکاپ&lt;br&gt; ربات تلگرام &lt;br&gt; تنظیم پورت ورود برای پنل&lt;br&gt; مولتی سرور (به زودی)&lt;br&gt; اتصال API (به زودی)&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Telegram Channel:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://t.me/Xpanelssh&#34;&gt;https://t.me/Xpanelssh&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;حمایت از ما&lt;/h2&gt; &#xA;&lt;p&gt;حمایت های شما برای ما دلگرمی بزرگی است&lt;br&gt; Tether TRC20 USDT: &lt;code&gt;TYQraQ5JJXKyVD6BpTGoDYNhiLbFRfzVtV&lt;/code&gt;&lt;br&gt; ETH: &lt;code&gt;0x6cc08b2057EfAe4d76Af531e145DeEd4B73c9D7e&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;نصب&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;سیستم عامل مورد نیاز&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;CentOS 7+ &lt;br&gt; Ubuntu 18+ &lt;br&gt; Debian 8+ &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;برای نصب و بروز رسانی می توانید از دستور زیر استفاده کنید اگر از نسخه های قبلی XPanel (نسخه 2 به پائین) برای نصب بروز رسانی ابتدا دستورات زیر را به ترتیب وارد کنید.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rm -rf /var/www/html/&#xA;mkdir /var/www/html/&#xA;chmod 777 /var/www/html/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;بعد از انجام مراحل بالا اقدام به نصب با دستور زیر نمائید (توجه داشته باشید حتما از دیتابیس بکاپ تهیه کنید)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash &amp;lt;(curl -Ls https://raw.githubusercontent.com/Alirezad07/X-Panel-SSH-User-Management/master/install.sh --ipv4)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;حل مشکل عدم ارتباط تماس صوتی و تصویری در اپلیکشن&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash &amp;lt;(curl -Ls https://raw.githubusercontent.com/Alirezad07/X-Panel-SSH-User-Management/master/fix-call.sh --ipv4)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;دستور بالا را در ترمینال وارد کنید سپس برای UDPGW پورت جدید تعریف کنید بهتر است به جای پورت 7300 پورت 7301 یا 7302 را تنظیم کنید &lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;بهینه سازی سرور&lt;/h2&gt; &#xA;&lt;p&gt;نصب و حذف تنظیمات با دستور زیر&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash &amp;lt;(curl -Ls https://raw.githubusercontent.com/Alirezad07/X-Panel-SSH-User-Management/main/TCP-Tweaker --ipv4)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;فعال سازی SSL&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash &amp;lt;(curl -Ls https://raw.githubusercontent.com/Alirezad07/X-Panel-SSH-User-Management/main/ssl.sh --ipv4)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;با استفاده از دستور بالا می توانید SSL را روی پنل نصب نمائید. به نکات زیر توجه کنید &lt;br&gt; 1- حتما قبل از نصب SSL پنل را بروز کنید&amp;lt;&lt;br&gt; 2- از هیچ دستور دیگری برای فعال سازی SSL استفاده نکنید&lt;br&gt; 3- دامنه یا ساب دامنه را به IP سرور متصل کنید &lt;br&gt; 4- دستور بالا را در ترمینال وارد کنید و مراحل نصب را پیش بروید&lt;br&gt; SSL بر روی پورتی که روی پنل تعریف کرده اید نصب فعال شد. &lt;br&gt;&lt;/p&gt; &#xA;&lt;picture&gt; &#xA; &lt;img alt=&#34;XPanel&#34; src=&#34;https://raw.githubusercontent.com/Alirezad07/X-Panel-SSH-User-Management/main/xp1.jpg&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;picture&gt; &#xA; &lt;img alt=&#34;XPanel&#34; src=&#34;https://raw.githubusercontent.com/Alirezad07/X-Panel-SSH-User-Management/main/xp2.jpg&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;picture&gt; &#xA; &lt;img alt=&#34;XPanel&#34; src=&#34;https://raw.githubusercontent.com/Alirezad07/X-Panel-SSH-User-Management/main/xp3.jpg&#34;&gt; &#xA;&lt;/picture&gt;</summary>
  </entry>
</feed>