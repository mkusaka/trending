<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-29T01:34:23Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fosslinux/live-bootstrap</title>
    <updated>2024-08-29T01:34:23Z</updated>
    <id>tag:github.com,2024-08-29:/fosslinux/live-bootstrap</id>
    <link href="https://github.com/fosslinux/live-bootstrap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Use of a Linux initramfs to fully automate the bootstrapping process&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. SPDX-FileCopyrightText: 2021 Andrius Štikonas &lt;a href=&#34;mailto:andrius@stikonas.eu&#34;&gt;andrius@stikonas.eu&lt;/a&gt; .. SPDX-FileCopyrightText: 2021 Paul Dersey &lt;a href=&#34;mailto:pdersey@gmail.com&#34;&gt;pdersey@gmail.com&lt;/a&gt; .. SPDX-FileCopyrightText: 2021 fosslinux &lt;a href=&#34;mailto:fosslinux@aussies.space&#34;&gt;fosslinux@aussies.space&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. SPDX-License-Identifier: CC-BY-SA-4.0&lt;/p&gt; &#xA;&lt;h1&gt;live-bootstrap&lt;/h1&gt; &#xA;&lt;p&gt;An attempt to provide a reproducible, automatic, complete end-to-end bootstrap from a minimal number of binary seeds to a supported fully functioning operating system.&lt;/p&gt; &#xA;&lt;h2&gt;How do I use this?&lt;/h2&gt; &#xA;&lt;p&gt;Quick start:&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;./rootfs.py --help&lt;/code&gt; and follow the instructions given there. This uses a variety of userland tools to prepare the bootstrap.&lt;/p&gt; &#xA;&lt;p&gt;(&lt;em&gt;Currently, there is no way to perform the bootstrap without external preparations! This is a currently unsolved problem.&lt;/em&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Without using Python:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone https://github.com/fosslinux/live-bootstrap&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git submodule update --init --recursive&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Consider whether you are going to run this in a chroot, in QEMU, or on bare metal. (All of this &lt;em&gt;can&lt;/em&gt; be automated, but not in a trustable way. See further below.) a. &lt;strong&gt;chroot:&lt;/strong&gt; Create a directory where the chroot will reside, run &lt;code&gt;./download-distfiles.sh&lt;/code&gt;, and copy: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The entire contents of &lt;code&gt;seed/stage0-posix&lt;/code&gt; into that directory.&lt;/li&gt; &#xA;   &lt;li&gt;All other files in &lt;code&gt;seed&lt;/code&gt; into that directory.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;steps/&lt;/code&gt; and &lt;code&gt;distfiles/&lt;/code&gt; into that directory. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;At least all files listed in &lt;code&gt;steps/pre-network-sources&lt;/code&gt; must be copied in. All other files will be obtained from the network.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;/bootstrap-seeds/POSIX/x86/kaem-optional-seed&lt;/code&gt; in the chroot. (Eg, &lt;code&gt;chroot rootfs /bootstrap-seeds/POSIX/x86/kaem-optional-seed&lt;/code&gt;). b. &lt;strong&gt;QEMU:&lt;/strong&gt; Create two blank disk images.&lt;/li&gt; &#xA;   &lt;li&gt;Generate &lt;code&gt;builder-hex0-x86-stage1.img&lt;/code&gt; from hex0 source: &lt;code&gt;sed &#39;s/[;#].*$//g&#39; builder-hex0/builder-hex0-x86-stage1-hex0 | xxd -r -p&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;On the first image, write &lt;code&gt;builder-hex0-x86-stage1.img&lt;/code&gt; to it, followed by &lt;code&gt;kernel-bootstrap/builder-hex0-x86-stage2.hex0&lt;/code&gt;, followed by zeros padding the disk to the next sector.&lt;/li&gt; &#xA;   &lt;li&gt;distfiles can be obtained using &lt;code&gt;./download-distfiles.sh&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;See the list in part a. For every file within that list, write a line to the disk &lt;code&gt;src &amp;lt;size-of-file&amp;gt; &amp;lt;path-to-file&amp;gt;&lt;/code&gt;, followed by the contents of the file. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;em&gt;Only&lt;/em&gt; copy distfiles listed in &lt;code&gt;sources&lt;/code&gt; files for &lt;code&gt;build:&lt;/code&gt; steps manifested before &lt;code&gt;improve: get_network&lt;/code&gt; into this disk.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Optionally (if you don&#39;t do this, distfiles will be network downloaded): &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;On the second image, create an MSDOS partition table and one ext3 partition.&lt;/li&gt; &#xA;     &lt;li&gt;Copy &lt;code&gt;distfiles/&lt;/code&gt; into this disk.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Run QEMU, with 4+G RAM, optionally SMP (multicore), both drives (in the order introduced above), a NIC with model E1000 (&lt;code&gt;-nic user,model=e1000&lt;/code&gt;), and &lt;code&gt;-machine kernel-irqchip=split&lt;/code&gt;. c. &lt;strong&gt;Bare metal:&lt;/strong&gt; Follow the same steps as QEMU, but the disks need to be two different &lt;em&gt;physical&lt;/em&gt; disks, and boot from the first disk.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;h1&gt;Problem statement&lt;/h1&gt; &#xA;&lt;p&gt;live-bootstrap&#39;s overarching problem statement is;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;How can a usable Linux system be created with only human-auditable, and wherever possible, human-written, source code?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Clarifications:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;usable&#34; means a modern toolchain, with appropriate utilities, that can be used to expand the amount of software on the system, interactively, or non-interactively.&lt;/li&gt; &#xA; &lt;li&gt;&#34;human-auditable&#34; is discretionary, but is usually fairly strict. See &#34;Specific things to be bootstrapped&#34; below.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Why is this difficult?&lt;/h1&gt; &#xA;&lt;p&gt;The core of a modern Linux system is primarily written in C and C++. C and C++ are &lt;strong&gt;self-hosting&lt;/strong&gt;, ie, nearly every single C compiler is written in C.&lt;/p&gt; &#xA;&lt;p&gt;Every single version of GCC was written in C. To avoid using an existing toolchain, we need some way to be able to compile a GCC version without C. We can use a less well-featured compiler, TCC, to do this. And so forth, until we get to a fairly primitive C compiler written in assembly, &lt;code&gt;cc_x86&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Going up through this process requires a bunch of other utilities as well; the autotools suite, guile and autogen, etc. These also have to be matched appropriately to the toolchain available.&lt;/p&gt; &#xA;&lt;h2&gt;Why should I care?&lt;/h2&gt; &#xA;&lt;p&gt;That is outside of the scope of this README. Here’s a few things you can look at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bootstrappable.org&#34;&gt;https://bootstrappable.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Trusting Trust Attack (as described by Ken Thompson)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://guix.gnu.org/manual/en/html_node/Bootstrapping.html&#34;&gt;https://guix.gnu.org/manual/en/html_node/Bootstrapping.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Collapse of the Internet (eg CollapseOS)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Specific things to be bootstrapped&lt;/h2&gt; &#xA;&lt;p&gt;GNU Guix is currently the furthest along project to automate bootstrapping. However, there are a number of non-auditable files used in many of their packages. Here is a list of file types that we deem unsuitable for bootstrapping.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Binaries (apart from seed hex0, kaem, builder-hex0).&lt;/li&gt; &#xA; &lt;li&gt;Any pre-generated configure scripts, or Makefile.in’s from autotools.&lt;/li&gt; &#xA; &lt;li&gt;Pre-generated bison/flex parsers (identifiable through a &lt;code&gt;.y&lt;/code&gt; file).&lt;/li&gt; &#xA; &lt;li&gt;Any source code/binaries downloaded within a software’s build system that is outside of our control to verify before use in the build system.&lt;/li&gt; &#xA; &lt;li&gt;Any non-free software. (Must be FSF-approved license).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How does this work?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;For a more in-depth discussion, see parts.rst.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Firstly, &lt;code&gt;builder-hex0&lt;/code&gt; is launched. &lt;code&gt;builder-hex0&lt;/code&gt; is a minimal kernel that is written in &lt;code&gt;hex0&lt;/code&gt;, existing in 3 self-bootstrapping stages.&lt;/p&gt; &#xA;&lt;p&gt;This is capable of executing the entirety of &lt;code&gt;stage0-posix&lt;/code&gt;, (see &lt;code&gt;seed/stage0-posix&lt;/code&gt;), which produces a variety of useful utilities and a basic C language, &lt;code&gt;M2-Planet&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;stage0-posix&lt;/code&gt; runs a file called &lt;code&gt;after.kaem&lt;/code&gt;. This is a shell script that builds and runs a small program called &lt;code&gt;script-generator&lt;/code&gt;. This program reads &lt;code&gt;steps/manifest&lt;/code&gt; and converts it into a series of shell scripts that can be executed in sequence to complete the bootstrap.&lt;/p&gt; &#xA;&lt;p&gt;From this point forward, &lt;code&gt;steps/manifest&lt;/code&gt; is effectively self documenting. Each package built exists in &lt;code&gt;steps/&amp;lt;pkg&amp;gt;&lt;/code&gt;, and the build scripts can be seen there.&lt;/p&gt;</summary>
  </entry>
</feed>