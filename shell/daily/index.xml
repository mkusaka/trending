<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-30T01:39:13Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>maplecool/easytrojan</title>
    <updated>2022-11-30T01:39:13Z</updated>
    <id>tag:github.com,2022-11-30:/maplecool/easytrojan</id>
    <link href="https://github.com/maplecool/easytrojan" rel="alternate"></link>
    <summary type="html">&lt;p&gt;世界上最简单的Trojan部署脚本，仅需一行命令即可搭建一台代理服务器&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;EasyTrojan&lt;/h1&gt; &#xA;&lt;p&gt;世界上最简单的Trojan部署脚本，仅需一行命令即可搭建一台代理服务器&lt;/p&gt; &#xA;&lt;p&gt;该项目会自动提供trojan服务所需的免费域名与证书，无需购买、解析等繁琐操作&lt;/p&gt; &#xA;&lt;p&gt;支持RHEL 7、8、9 (CentOS、RedHat、AlmaLinux、RockyLinux)、Debian 9、10、11、Ubuntu 16、18、20、22&lt;/p&gt; &#xA;&lt;p&gt;技术原理不做解释，初衷只为解决个人用户与主机商家频繁被阻断IP的问题，毕竟大量IP被阻断会造成很多后续影响&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;首次安装&lt;/h4&gt; &#xA;&lt;p&gt;请将结尾的password更换为自己的密码，例如 bash easytrojan.sh 123456，安装成功后会返回trojan的连接参数&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl https://raw.githubusercontent.com/maplecool/easytrojan/main/easytrojan.sh -o easytrojan.sh &amp;amp;&amp;amp; chmod +x easytrojan.sh &amp;amp;&amp;amp; bash easytrojan.sh password&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;放行端口&lt;/h4&gt; &#xA;&lt;p&gt;如果服务器开启了防火墙，应放行TCP443与80端口，如在云厂商的web管理页面有防火墙应同时放行TCP443与80端口&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# RHEL 7、8、9 (CentOS、RedHat、AlmaLinux、RockyLinux) 放行端口命令&#xA;firewall-cmd --permanent --add-port=443/tcp &amp;amp;&amp;amp; firewall-cmd --permanent --add-port=80/tcp &amp;amp;&amp;amp; firewall-cmd --reload&#xA;&#xA;# Debian 9、10、11、Ubuntu 16、18、20、22 放行端口命令&#xA;sudo ufw allow 443/tcp &amp;amp;&amp;amp; sudo ufw allow 80/tcp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;验证端口是否放行 (示例IP应修改为trojan服务器的IP)&lt;/p&gt; &#xA; &lt;p&gt;通过浏览器访问脚本提供的免费域名，例如1.3.5.7.nip.io &lt;br&gt; 如果自动跳转至https，页面显示Service Unavailable，说明端口已放行&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;重新安装/重置密码&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;systemctl stop caddy.service &amp;amp;&amp;amp; rm -rf /caddy/trojan /etc/caddy &amp;amp;&amp;amp; curl https://raw.githubusercontent.com/maplecool/easytrojan/main/easytrojan.sh -o easytrojan.sh &amp;amp;&amp;amp; chmod +x easytrojan.sh &amp;amp;&amp;amp; bash easytrojan.sh password&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;完全卸载&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;systemctl stop caddy.service &amp;amp;&amp;amp; systemctl disable caddy.service &amp;amp;&amp;amp; rm -rf /caddy /etc/caddy /usr/local/bin/caddy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;脚本说明&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;注意事项&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;必须使用root用户部署&#xA;&#xA;请勿修改端口及配置参数&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;免费域名&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;通过nip.io提供的免费域名解析服务获取，域名由ServerIP+nip.io组成&#xA;例如你的服务器IP为1.3.5.7，对应的域名则是1.3.5.7.nip.io&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;免费证书&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;通过Carry的HTTPS模块实现，会自动申请letsencrypt或zerossl的免费证书&#xA;&#xA;curl: (35) error:14094438:SSL routines:ssl3_read_bytes:tlsv1 alert internal error&#xA;如果在执行脚本的过程中出现该错误，则说明证书申请失败，应检测服务器的网络环境或稍后重新执行脚本&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;连接参数&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;IP为1.3.5.7 密码为123456的服务器示例：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;地址：1.3.5.7.nip.io  #根据服务器IP生成（即免费域名）&#xA;端口：443&#xA;密码：123456          #安装时设置的密码&#xA;ALPN: h2/http1.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;服务伪装&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;非密码正确的trojan客户端访问返回503状态，将trojan伪装成过载的Web服务&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;连接方式&lt;/h4&gt; &#xA;&lt;p&gt;客户端的TLS指纹是导致trojan被封端口的重要原因之一，但问题不仅存在于客户端，服务端也应作出对应配置&lt;/p&gt; &#xA;&lt;p&gt;移动设备建议使用能够开启uTLS指纹功能的客户端，暂未有数据表明其它设备会因未启用uTLS指纹功能被封端口&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;为方便用户理解，配置示例中使用服务器IP:1.3.5.7、密码:123456，实际应修改为trojan服务器真实的连接参数&#xA;&#xA;客户端不只局限于以下几种，仅需支持trojan连接即可&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;常见客户端连接trojan示例&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Windows &lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/maplecool/easytrojan/client/v2rayn-trojan.png&#34;&gt;配置示例&lt;/a&gt; | &lt;a href=&#34;https://github.com/2dust/v2rayN/releases&#34;&gt;V2rayN-Core&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;MacOS &lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/maplecool/easytrojan/client/v2rayu-trojan.png&#34;&gt;配置示例&lt;/a&gt; | &lt;a href=&#34;https://github.com/yanue/V2rayU/releases&#34;&gt;V2rayU&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Android &lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/maplecool/easytrojan/client/v2rayng-trojan.png&#34;&gt;配置示例&lt;/a&gt; | &lt;a href=&#34;https://github.com/2dust/v2rayNG/releases&#34;&gt;V2rayNG&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;iOS &lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/maplecool/easytrojan/client/shadowrocket-trojan.png&#34;&gt;配置示例&lt;/a&gt; | &lt;a href=&#34;https://apps.apple.com/us/app/shadowrocket/id932747118&#34;&gt;Shadowrocket&lt;/a&gt; | &lt;a href=&#34;https://www.rocketgirls.space/product&#34;&gt;AppStore海外代购&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xray连接trojan部分示例&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    ...&#xA;&#xA;    &#34;outbounds&#34;: [&#xA;        {&#xA;            &#34;protocol&#34;: &#34;trojan&#34;,&#xA;            &#34;settings&#34;: {&#xA;                &#34;servers&#34;: [&#xA;                    {&#xA;                        &#34;address&#34;: &#34;1.3.5.7&#34;,        #连接trojan的服务器IP或域名&#xA;                        &#34;port&#34;: 443,&#xA;                        &#34;password&#34;: &#34;123456&#34;         #连接trojan的密码&#xA;                    }&#xA;                ]&#xA;            },&#xA;            &#34;streamSettings&#34;: {&#xA;                &#34;network&#34;: &#34;tcp&#34;,&#xA;                &#34;security&#34;: &#34;tls&#34;,&#xA;                &#34;tlsSettings&#34;: {&#xA;                    &#34;allowInsecure&#34;: false,&#xA;                    &#34;serverName&#34;: &#34;1.3.5.7.nip.io&#34;,  #连接trojan的域名&#xA;                    &#34;fingerprint&#34;: &#34;chrome&#34;,&#xA;                    &#34;alpn&#34;: &#34;h2,http/1.1&#34;&#xA;                }&#xA;            }&#xA;        }&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clash连接trojan部分示例&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;- name: &#34;trojan&#34;&#xA;    type: trojan&#xA;    server: 1.3.5.7&#xA;    port: 443&#xA;    password: 123456&#xA;    udp: true&#xA;    sni: 1.3.5.7.nip.io&#xA;    alpn:&#xA;      - h2&#xA;      - http/1.1&#xA;    skip-cert-verify: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;用户交流&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://t.me/easytrojan&#34;&gt;Telegram Group&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;赞助项目&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;如果真心想赞助这个项目，帮忙点颗星吧&lt;/li&gt; &#xA; &lt;li&gt;如果解决了封端口的问题，帮忙在各种Issues、论坛、电报群里，看到有相关提问时，转发一下项目链接吧&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;让更多有需要的用户看到这个项目，就是最好的赞助...&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;数据报告&lt;/h4&gt; &#xA;&lt;p&gt;自北京时间2022年10月3日起，不断有中国大陆的用户报告基于TLS的翻墙服务器被封端口。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;普遍现象：先被封禁443端口，更换端口后会在约1~2天的时间内被再次封禁，多次更换端口后服务器IP被阻断&lt;/li&gt; &#xA;  &lt;li&gt;讨论结果：客户端指纹、服务端指纹、连接数量过多、TLS in TLS被识别等，总之众说纷纭，没有解决方案，最终归为玄学&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;该项目经过多台服务器测试，以及与部分包含trojan协议的客户端开发者沟通，总结出了相对可靠的抗封锁方案，由于用户的客户端、网络环境差异很大，不保证部署后一定不封禁端口。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;13台样本服务器测试数据：&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;2022年10月初，2台日常使用的Shadowsocks服务器相继被阻断IP&lt;/li&gt; &#xA;  &lt;li&gt;2022年10月初，2台服务器更换为trojan协议，客户端使用路由器连接，稳定运行&lt;/li&gt; &#xA;  &lt;li&gt;2022年10月上，多用户使用移动客户端连接其中1台trojan服务器，必定出现1天内被封端口现象&lt;/li&gt; &#xA;  &lt;li&gt;2022年10月上，排查原因，分析变量，调研多个被封样本，推测出三个最有可能的原因&lt;/li&gt; &#xA;  &lt;li&gt;2022年10月中，逐条更换变量测试，最终确定是被封问题来自一个移动端不可描述的原因&lt;/li&gt; &#xA;  &lt;li&gt;2022年10月末，2台服务器在每日约10台设备连接、日流量消耗10~20G的情况下，稳定运行&lt;/li&gt; &#xA;  &lt;li&gt;2022年10月末，新购1台封端口重灾区的服务器，并联系了10位使用trojan被封端口的用户，内测新的部署方案&lt;/li&gt; &#xA;  &lt;li&gt;2022年11月初，样本服务器中，12台443端口正常，1台被封443端口，原因是客户端跳过了证书验证，更正后恢复正常&lt;/li&gt; &#xA;  &lt;li&gt;2022年11月中，总计13台样本服务器，443端口全部正常，期间有围观用户进行了部署，暂未收到端口被封的反馈&lt;/li&gt; &#xA;  &lt;li&gt;2022年黑色星期五，将该部署方案制作成脚本并发布&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;鸣谢项目&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/caddyserver/caddy&#34;&gt;CaddyServer&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/imgk/caddy-trojan&#34;&gt;CaddyTrojan&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>getlago/lago</title>
    <updated>2022-11-30T01:39:13Z</updated>
    <id>tag:github.com,2022-11-30:/getlago/lago</id>
    <link href="https://github.com/getlago/lago" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open Source Metering and Usage Based Billing&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/getlago/lago&#34;&gt; &lt;img src=&#34;https://uploads-ssl.webflow.com/635119506e36baf5c267fecd/635b6df0ee8effaa54c1fa42_banner-open-graph.jpg&#34; alt=&#34;Lago&#34;&gt; &lt;/a&gt; &lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;Lago&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Open Source Metering &amp;amp; Usage-Based Billing &lt;br&gt; &lt;br&gt; The best alternative to Chargebee, Recurly or Stripe Billing. &lt;br&gt; For usage-based, subscription-based, and all the nuances of pricing in between. &lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://www.getlago.com/slack&#34;&gt;Slack&lt;/a&gt; · &lt;a href=&#34;https://getlago.com&#34;&gt;Website&lt;/a&gt; · &lt;a href=&#34;https://github.com/getlago/lago/issues&#34;&gt;Issues&lt;/a&gt; · &lt;a href=&#34;https://github.com/getlago/lago/projects/2&#34;&gt;Roadmap&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.getlago.com/slack&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Lago%20Slack%20Community-lago.slack.com-%234A154B&#34; alt=&#34;Join Lago on Slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/getlago/lago/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/getlago/lago&#34; alt=&#34;Github Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://news.ycombinator.com/item?id=31424450&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Hacker%20News-777-%23FF6600&#34; alt=&#34;Hacker News&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/getlago/lago/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-AGPLv3-purple&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/getlago&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/getlago?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.ycombinator.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Backed%20by-Y%20Combinator-%23f26625&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;!-- ABOUT THE PROJECT --&gt; &#xA;&lt;h2&gt;The programmable API for usage-based billing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/24354699/180470821-10f5e6e6-c57f-41d9-b1bd-f5a2ded60747.mov&#34;&gt;https://user-images.githubusercontent.com/24354699/180470821-10f5e6e6-c57f-41d9-b1bd-f5a2ded60747.mov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;The problem: Billing systems are still a nightmare for engineers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://uploads-ssl.webflow.com/6244531a40ad7ef5475ad9b3/62827b2f6fa52239b0db0fa4_Blog%20Post%20Image%20Standalone.png&#34; alt=&#34;Billing nightmare&#34;&gt; Engineers be like…&lt;/p&gt; &#xA;&lt;p&gt;Read more first-hand experiences from Qonto, Algolia, Pleo, Segment, or the 350+. Hackernews comments &lt;a href=&#34;https://news.ycombinator.com/item?id=31424450&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The Solution:&lt;/strong&gt; Lago, the open-source billing API for product-led SaaS&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Event-based: if you can track it, you can charge for it;&lt;/li&gt; &#xA; &lt;li&gt;Built for product-led growth companies;&lt;/li&gt; &#xA; &lt;li&gt;Hybrid pricing: subscription and usage;&lt;/li&gt; &#xA; &lt;li&gt;Hybrid go-to-market motion: self-serve and sales-led.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Open-source, open architecture:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Composable: connect Lago to any of your internal systems or tools (i.e. any payment gateway, CRM, CPQ, accounting software);&lt;/li&gt; &#xA; &lt;li&gt;Pricing: we’re not rent seekers, we’re not asking for a % of your revenue. Our self-hosted version is free. Our cloud version is priced like a SaaS;&lt;/li&gt; &#xA; &lt;li&gt;Privacy: your data never has to leave your infrastructure.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;✨ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.getlago.com/products/metering&#34;&gt;Usage metering&lt;/a&gt;&lt;/strong&gt;: Lago&#39;s event-based architecture provides a solid foundation for building a fair pricing model that scales with your business.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.getlago.com/products/plans&#34;&gt;Price plans&lt;/a&gt;&lt;/strong&gt;: Lago supports all pricing models. Create pay-as-you-go and hybrid plans in no time with our intuitive user interface or API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.getlago.com/products/coupons&#34;&gt;Coupons&lt;/a&gt;&lt;/strong&gt;: Create engaging marketing campaigns and increase conversion with coupons that customers can redeem to get a discount.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.getlago.com/products/add-ons&#34;&gt;Add-ons&lt;/a&gt;&lt;/strong&gt;: Why wait until the end of the billing cycle to get paid? Lago allows you to create one-time charges that are invoiced on the fly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.getlago.com/products/invoicing&#34;&gt;Invoicing&lt;/a&gt;&lt;/strong&gt;: Depending on the configuration of your plans, Lago automatically calculates what each customer owes you and generates invoices.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.getlago.com/products/prepaid-credits&#34;&gt;Prepaid credits&lt;/a&gt;&lt;/strong&gt;: Unlock recurring revenue opportunities for pay-as-you-go pricing models with Lago’s prepaid credit features.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🔔 Stay up to date&lt;/h2&gt; &#xA;&lt;p&gt;Lago launched its v0.1 on June 2nd, 2022. Lots of new features are coming, and are generally released on a bi-weekly basis. Watch updates of this repository to be notified of future updates. Take a look at our &lt;a href=&#34;https://github.com/getlago/lago/projects/2&#34;&gt;Public Roadmap&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;🔖 License&lt;/h2&gt; &#xA;&lt;p&gt;Distributed under the AGPLv3 License. Read more &lt;a href=&#34;https://www.getlago.com/blog/open-source-licensing-and-why-lago-chose-agplv3&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;💻 Deploy locally&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Docker on your machine;&lt;/li&gt; &#xA; &lt;li&gt;Make sure Docker Compose is installed and available (it should be the case if you have chosen to install Docker via Docker Desktop); and&lt;/li&gt; &#xA; &lt;li&gt;Make sure Git is installed on your machine.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Run the app&lt;/h3&gt; &#xA;&lt;p&gt;To start using Lago, run the following commands in a shell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Get the code&#xA;git clone https://github.com/getlago/lago.git&#xA;&#xA;# Go to Lago folder&#xA;cd lago&#xA;&#xA;# Set up environment configuration&#xA;echo &#34;LAGO_RSA_PRIVATE_KEY=\&#34;`openssl genrsa 2048 | base64`\&#34;&#34; &amp;gt;&amp;gt; .env&#xA;source .env&#xA;&#xA;# Start&#xA;docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now open your browser and go to &lt;a href=&#34;http://localhost&#34;&gt;http://localhost&lt;/a&gt; to connect to the application. Lago&#39;s API is exposed at &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Find your API key&lt;/h3&gt; &#xA;&lt;p&gt;Your API Key can be found directly in the UI:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Access the &lt;strong&gt;Developer&lt;/strong&gt; section from the sidebar;&lt;/li&gt; &#xA; &lt;li&gt;The first tab of this section is related to your &lt;strong&gt;API keys&lt;/strong&gt;; and&lt;/li&gt; &#xA; &lt;li&gt;Click the &lt;strong&gt;Copy&lt;/strong&gt; button to copy it to clipboard.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Version, environment variables and components&lt;/h3&gt; &#xA;&lt;p&gt;Docker images are always updated to the last stable version in the docker-compose.yml file. You can use a different tag if needed by checking the releases list.&lt;/p&gt; &#xA;&lt;p&gt;Lago uses the following environment variables to configure the components of the application. You can override them to customise your setup. Take a closer look are our &lt;a href=&#34;https://doc.getlago.com/docs/guide/self-hosting/docker#configuration&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;☁️ Use the fully hosted Lago Cloud&lt;/h2&gt; &#xA;&lt;p&gt;Get started with our free Lago Cloud version, request access: &lt;a href=&#34;mailto:hello@getlago.com&#34;&gt;hello@getlago.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;🚀 Getting the most out of Lago&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See the &lt;a href=&#34;https://doc.getlago.com&#34;&gt;documentation&lt;/a&gt; to learn more about all the features;&lt;/li&gt; &#xA; &lt;li&gt;Use our &lt;a href=&#34;https://www.getlago.com/resources/templates/all&#34;&gt;templates&lt;/a&gt; to get inspiration and learn how to reproduce Algolia’s, Segment’s and Klaviyo’s pricing models;&lt;/li&gt; &#xA; &lt;li&gt;Join our &lt;a href=&#34;https://join.slack.com/t/lago-community/shared_invite/zt-1bw903041-PsxQmQios5utmETm1EZkvQ&#34;&gt;Slack community&lt;/a&gt; if you need help, or want to chat, we’re here to help;&lt;/li&gt; &#xA; &lt;li&gt;Contribute on GitHub: read our &lt;a href=&#34;https://github.com/getlago/lago/raw/main/CONTRIBUTING.md&#34;&gt;guidelines&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;Follow us on &lt;a href=&#34;https://twitter.com/GetLago&#34;&gt;Twitter&lt;/a&gt; for the latest news;&lt;/li&gt; &#xA; &lt;li&gt;You can email us as well: &lt;a href=&#34;mailto:hello@getlago.com&#34;&gt;hello@getlago.com&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🧑‍💻 Contributing &amp;amp; Development Environment&lt;/h2&gt; &#xA;&lt;p&gt;If you want to have a nice Lago Development Environment, you can follow this &lt;a href=&#34;https://github.com/getlago/lago/wiki/Development-Environment&#34;&gt;guide&lt;/a&gt; on how to make it works on your machine. This guide is intended for people willing to contribute to Lago. If you want to try Lago on your local system, we encourage your to look at the Lago public documentation.&lt;/p&gt; &#xA;&lt;p&gt;You can contribute byt following our &lt;a href=&#34;https://github.com/getlago/lago/raw/main/CONTRIBUTING.md&#34;&gt;guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;💡 Philosophy&lt;/h2&gt; &#xA;&lt;p&gt;B2B SaaS has evolved, but billing has not yet.&lt;/p&gt; &#xA;&lt;h3&gt;1- We’re not in the “subscription economy” anymore. And we won’t go “full usage-based pricing” quite yet&lt;/h3&gt; &#xA;&lt;p&gt;Pricings are now mostly hybrid: they include a usage-based component (i.e. “if you use more you pay more”) and a subscription component (i.e. a recurring fee for basic usage).&lt;/p&gt; &#xA;&lt;p&gt;Not all software companies will go full “usage-based” like Snowflake for instance. This model is the new standard for cloud infrastructure products. However, in other areas of SaaS, users want to know beforehand how much they will pay to control their spending and software companies want to be able to predict recurring revenues.&lt;/p&gt; &#xA;&lt;h3&gt;2- Go-to-market is not either bottom-up or top-down anymore&lt;/h3&gt; &#xA;&lt;p&gt;SaaS used to be either self-service (SMBs) or sales-led (Enterprises). Go-to-market now mixes the self-service (all customers access the same price plans) and sales-led (customers get a custom quote from a sales representative) motions. A typical journey involves an individual contributor in a company who tests a new tool, puts their corporate credit card in, and starts spreading the use of the tool within the organization. At that point, the VP or head of department might want to upgrade to a custom plan tailored to the needs of the whole organization. As a result, billing needs to be flexible, automated, and transparent enough to embrace this hybrid go-to-market motion as well.&lt;/p&gt; &#xA;&lt;h3&gt;3- The “rent seeker” pricing of current billing solutions needs to stop&lt;/h3&gt; &#xA;&lt;p&gt;Why do payment companies take a cut on revenues? Because the higher the amount, the higher the risk for them (e.g. fraud, disputes, etc.).&lt;/p&gt; &#xA;&lt;p&gt;Why did billing companies adopt the same pricing structure? We’re not able to provide an answer that makes sense. It’s been said on the internet that they did this because they could (read more &lt;a href=&#34;https://news.ycombinator.com/item?id=16766846&#34;&gt;here&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;One last thing…&lt;/h3&gt; &#xA;&lt;p&gt;Lago is agnostic and we aim at being as transparent as possible, so we won’t nudge or lock you into using a specific tool in exchange for using our billing API (&lt;a href=&#34;https://www.gmass.co/blog/negotiating-stripe-fees/&#34;&gt;learn more&lt;/a&gt;).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Hagb/docker-easyconnect</title>
    <updated>2022-11-30T01:39:13Z</updated>
    <id>tag:github.com,2022-11-30:/Hagb/docker-easyconnect</id>
    <link href="https://github.com/Hagb/docker-easyconnect" rel="alternate"></link>
    <summary type="html">&lt;p&gt;使深信服（Sangfor）开发的非自由的 VPN 软件 EasyConnect 运行在 docker 或 podman 中，并作为网关和/或提供 socks5、http 代理服务&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;docker-easyconnect&lt;/h1&gt; &#xA;&lt;p&gt;让深信服开发的&lt;strong&gt;非自由&lt;/strong&gt;的 EasyConnect 代理软件运行在 docker 中，并开放 Socks5 供宿主机连接以使用代理。（此外亦可通过 &lt;a href=&#34;https://raw.githubusercontent.com/Hagb/docker-easyconnect/master/doc/usage.md#ip-forward&#34;&gt;ip forward 的方式&lt;/a&gt; 来使用）&lt;/p&gt; &#xA;&lt;p&gt;基于 EasyConnect 官方“Linux”版的 deb 包以及 &lt;a href=&#34;https://github.com/shmilee&#34;&gt;@shmille&lt;/a&gt; 提供的&lt;a href=&#34;https://github.com/shmilee/scripts/releases/download/v0.0.1/easyconn_7.6.8.2-ubuntu_amd64.deb&#34;&gt;命令行版客户端 deb 包&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;另有 &lt;a href=&#34;https://github.com/shmilee&#34;&gt;@shmilee&lt;/a&gt; 的 &lt;a href=&#34;https://github.com/shmilee/scripts/tree/master/easyconnect-in-docker&#34;&gt;easyconnect-in-docker 方案&lt;/a&gt;（另见 &lt;a href=&#34;https://github.com/Hagb/docker-easyconnect/issues/35&#34;&gt;#35&lt;/a&gt;）实现了多 EasyConnect 版本共用容器，其中还有另一个&lt;a href=&#34;https://github.com/shmilee/scripts/tree/master/easyconnect-in-docker/only-cli&#34;&gt;纯 cli 版本的容器&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;望批评、指正。欢迎提交 issue、PR，包括但不仅限于 bug、各种疑问、代码和文档的改进。&lt;/p&gt; &#xA;&lt;p&gt;详细用法见于 &lt;a href=&#34;https://raw.githubusercontent.com/Hagb/docker-easyconnect/master/doc/usage.md&#34;&gt;doc/usage.md&lt;/a&gt;，常见问题见于 &lt;a href=&#34;https://raw.githubusercontent.com/Hagb/docker-easyconnect/master/doc/faq.md&#34;&gt;doc/faq.md&lt;/a&gt;，自行构建可参照构建说明 &lt;a href=&#34;https://raw.githubusercontent.com/Hagb/docker-easyconnect/master/doc/build.md&#34;&gt;doc/build.md&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;简明使用步骤&lt;/h2&gt; &#xA;&lt;h3&gt;纯命令行版&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/get-docker/&#34;&gt;安装Docker并运行&lt;/a&gt;；&lt;/li&gt; &#xA; &lt;li&gt;在终端输入： &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --device /dev/net/tun --cap-add NET_ADMIN -ti -p 127.0.0.1:1080:1080 -p 127.0.0.1:8888:8888 -e EC_VER=7.6.3 -e CLI_OPTS=&#34;-d vpnaddress -u username -p password&#34; hagb/docker-easyconnect:cli&#xA;&lt;/code&gt;&lt;/pre&gt; 其中 &lt;code&gt;-e EC_VER=7.6.3&lt;/code&gt; 表示使用 &lt;code&gt;7.6.3&lt;/code&gt; 版本的 EasyConnect，请根据实际情况修改版本号；&lt;/li&gt; &#xA; &lt;li&gt;根据提示输入服务器地址、登录凭据；&lt;/li&gt; &#xA; &lt;li&gt;浏览器（或其他支持的应用）可配置socks5代理（可以通过插件配置），地址 &lt;code&gt;127.0.0.1&lt;/code&gt;, 端口 &lt;code&gt;1080&lt;/code&gt;；也可以使用 http 代理，地址 &lt;code&gt;127.0.0.1&lt;/code&gt;, 端口 &lt;code&gt;8888&lt;/code&gt;。&lt;/li&gt; &#xA; &lt;li&gt;如需为 socks5 设置密码，可在 &lt;code&gt;docker run&lt;/code&gt; 命令后追加 &lt;code&gt;-e SOCKS_USER=&#34;youruser&#34; -e SOCKS_PASSWD=&#34;thepassword&#34;&lt;/code&gt;。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;图形界面版&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/get-docker/&#34;&gt;安装Docker并运行&lt;/a&gt;；&lt;/li&gt; &#xA; &lt;li&gt;在终端输入： &lt;code&gt;docker run --device /dev/net/tun --cap-add NET_ADMIN -ti -e PASSWORD=xxxx -v $HOME/.ecdata:/root -p 127.0.0.1:5901:5901 -p 127.0.0.1:1080:1080 -p 127.0.0.1:8888:8888 hagb/docker-easyconnect:7.6.3&lt;/code&gt;（末尾 EasyConnect 版本号 &lt;code&gt;7.6.3&lt;/code&gt; 请根据实际情况修改）；&lt;/li&gt; &#xA; &lt;li&gt;使用vnc客户端连接vnc， 地址：127.0.0.1, 端口: 5901, 密码 xxxx ;&lt;/li&gt; &#xA; &lt;li&gt;成功连上后你应该能看到easyconnect的登录窗口，填写并登录easyconnect；&lt;/li&gt; &#xA; &lt;li&gt;浏览器（或其他支持的应用）可配置socks5代理（可以通过插件配置），地址 &lt;code&gt;127.0.0.1&lt;/code&gt;, 端口 &lt;code&gt;1080&lt;/code&gt;；也可以使用 http 代理，地址 &lt;code&gt;127.0.0.1&lt;/code&gt;, 端口 &lt;code&gt;8888&lt;/code&gt;。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;注意：如果你要将系统代理设置为127.0.0.1:1080而不是单独配置浏览器，请保证docker engine本身不会通过系统代理联网。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;EasyConnect 版本&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Hagb/docker-easyconnect/master/ec_urls&#34;&gt;&lt;code&gt;ec_urls&lt;/code&gt;&lt;/a&gt; 目录中以&lt;code&gt;版本号.txt&lt;/code&gt;为文件名的文本文件保存了下载链接。（欢迎提交 issue 或 PR）&lt;/p&gt; &#xA;&lt;h3&gt;已经过测试的版本&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;7.6.3&lt;/code&gt;版（&lt;a href=&#34;http://download.sangfor.com.cn/download/product/sslvpn/pkg/linux_01/EasyConnect_x64.deb&#34;&gt;http://download.sangfor.com.cn/download/product/sslvpn/pkg/linux_01/EasyConnect_x64.deb&lt;/a&gt;）.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;7.6.7&lt;/code&gt;版（&lt;a href=&#34;http://download.sangfor.com.cn/download/product/sslvpn/pkg/linux_767/EasyConnect_x64_7_6_7_3.deb&#34;&gt;http://download.sangfor.com.cn/download/product/sslvpn/pkg/linux_767/EasyConnect_x64_7_6_7_3.deb&lt;/a&gt;）.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;7.6.8&lt;/code&gt;版（仅命令行）（&lt;a href=&#34;https://github.com/shmilee/scripts/releases/download/v0.0.1/easyconn_7.6.8.2-ubuntu_amd64.deb&#34;&gt;https://github.com/shmilee/scripts/releases/download/v0.0.1/easyconn_7.6.8.2-ubuntu_amd64.deb&lt;/a&gt;）.&lt;/p&gt; &#xA;&lt;p&gt;如果需要测试其他 EasyConnect 版本，可以将该版本的 deb 安装包下载地址写入到文本文件 &lt;code&gt;ec_urls/版本号.txt&lt;/code&gt; 中，使用&lt;a href=&#34;https://raw.githubusercontent.com/Hagb/docker-easyconnect/master/doc/build.md#%E4%BB%8E-dockerfile-%E6%9E%84%E5%BB%BA&#34;&gt;构建说明&lt;/a&gt;中的方法进行构建。&lt;/p&gt; &#xA;&lt;h2&gt;拉取&lt;/h2&gt; &#xA;&lt;h3&gt;从 Docker Hub 上直接获取：&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull hagb/docker-easyconnect:TAG&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;其中 TAG 可以是如下值（不带 VNC 服务端的 image 比带 VNC 服务端的 image 小）：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;latest&lt;/code&gt;: 默认值，带 VNC 服务端的&lt;code&gt;7.6.3&lt;/code&gt;版 image，&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cli&lt;/code&gt;: 多版本（&lt;code&gt;7.6.3&lt;/code&gt;, &lt;code&gt;7.6.7&lt;/code&gt;, &lt;code&gt;7.6.8&lt;/code&gt;）纯命令行版&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vncless&lt;/code&gt;: 不带 VNC 服务端的&lt;code&gt;7.6.3&lt;/code&gt;版 image&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;7.6.3&lt;/code&gt;: 带 VNC 服务端的&lt;code&gt;7.6.3&lt;/code&gt;版 image&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vncless-7.6.3&lt;/code&gt;: 不带 VNC 服务端的&lt;code&gt;7.6.3&lt;/code&gt;版 image&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;7.6.7&lt;/code&gt;: 带 VNC 服务端的&lt;code&gt;7.6.7&lt;/code&gt;版 image&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vncless-7.6.7&lt;/code&gt;: 不带 VNC 服务端的&lt;code&gt;7.6.7&lt;/code&gt;版 image&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;参考资料&lt;/h2&gt; &#xA;&lt;p&gt;登录过程的一个 hack (&lt;a href=&#34;https://raw.githubusercontent.com/Hagb/docker-easyconnect/master/docker-root/usr/local/bin/start-sangfor.sh&#34;&gt;docker-root/usr/local/bin/start-sangfor.sh&lt;/a&gt;)参考了这篇文章：&lt;a href=&#34;https://blog.51cto.com/13226459/2476193&#34;&gt;https://blog.51cto.com/13226459/2476193&lt;/a&gt;。在此对该文作者表示感谢。&lt;/p&gt; &#xA;&lt;h2&gt;版权及许可证&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Copyright © 2020 contributors&lt;/p&gt; &#xA; &lt;p&gt;This work is free. You can redistribute it and/or modify it under the&lt;br&gt; terms of the Do What The Fuck You Want To Public License, Version 2,&lt;br&gt; as published by Sam Hocevar. See the COPYING file for more details.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;   DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE  &#xA;               Version 2, December 2004  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Copyright (C) 2004 Sam Hocevar &lt;a href=&#34;mailto:sam@hocevar.net&#34;&gt;sam@hocevar.net&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;Everyone is permitted to copy and distribute verbatim or modified&lt;br&gt; copies of this license document, and changing it is allowed as long&lt;br&gt; as the name is changed.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;       DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION&lt;/p&gt; &#xA; &lt;ol start=&#34;0&#34;&gt; &#xA;  &lt;li&gt;You just DO WHAT THE FUCK YOU WANT TO.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
</feed>