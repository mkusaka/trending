<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-21T01:46:33Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>janlay/openai-cli</title>
    <updated>2023-04-21T01:46:33Z</updated>
    <id>tag:github.com,2023-04-21:/janlay/openai-cli</id>
    <link href="https://github.com/janlay/openai-cli" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A universal cli for OpenAI, written in BASH.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;openai-cli&lt;/h1&gt; &#xA;&lt;p&gt;A universal cli for OpenAI, written in BASH.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Scalable architecture allows for continuous support of new APIs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Custom API name, version, and related parameters.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Dry-run mode (without actually initiating API calls) to facilitate debugging of APIs and save costs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The main API &lt;code&gt;chat/completions&lt;/code&gt; provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Complete pipelining to interoperate with other applications&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Allow prompts to be read from command line arguments, file, and stdin&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support streaming&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support multiple topics&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support continuous conversations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Token usage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stedolan.github.io/jq/&#34;&gt;jq&lt;/a&gt; is required. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Linux: &lt;code&gt;sudo apt install jq&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;macOS: &lt;code&gt;brew install jq&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Download script and mark it executable: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -fsSLOJ https://go.janlay.com/openai&#xA;chmod +x openai&#xA;&lt;/code&gt;&lt;/pre&gt; You may want to add this file to a directory in &lt;code&gt;$PATH&lt;/code&gt;. &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;Further reading: curl&#39;s killer feature&lt;/summary&gt; [-OJ is a killer feature](https://daniel.haxx.se/blog/2020/09/10/store-the-curl-output-over-there/) &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now you can try it out!&lt;/p&gt; &#xA;&lt;h1&gt;Tips&lt;/h1&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;To begin, type &lt;code&gt;openai -h&lt;/code&gt; to access the help manual.&lt;/p&gt; &#xA;&lt;p&gt;⚠️ If you run &lt;code&gt;openai&lt;/code&gt; directly, it may appear to be stuck because it expects prompt content from stdin which is not yet available. To exit, simply press Ctrl+C to interrupt the process.&lt;/p&gt; &#xA;&lt;h2&gt;Why are you so serious?&lt;/h2&gt; &#xA;&lt;p&gt;What happens when the &lt;code&gt;openai&lt;/code&gt; command is executed without any parameters? It means that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The default API used will be &lt;code&gt;chat/completions&lt;/code&gt;, and the schema version will be &lt;code&gt;v1&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The prompt will be read from stdin.&lt;/li&gt; &#xA; &lt;li&gt;The program will wait for input while stdin remains empty.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Providing prompt&lt;/h2&gt; &#xA;&lt;p&gt;There are multiple ways to obtain a prompt using &lt;code&gt;openai&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enclose the prompt in single quotes &lt;code&gt;&#39;&lt;/code&gt; or double quotes &lt;code&gt;&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use any argument that does not begin with a minus sign &lt;code&gt;-&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Place any arguments after &lt;code&gt;--&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Input from stdin&lt;/li&gt; &#xA; &lt;li&gt;Specify a file path with &lt;code&gt;-f /path/to/file&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;-f-&lt;/code&gt; for input from stdin&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Choose any one you like :-)&lt;/p&gt; &#xA;&lt;h2&gt;OpenAI key&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;$OPENAI_API_KEY&lt;/code&gt; must be available to use this tool. Prepare your OpenAI key in &lt;code&gt;~/.profile&lt;/code&gt; file by adding this line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export OPENAI_API_KEY=sk-****&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you may want to run with a temporary key for one-time use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;OPENAI_API_KEY=sk-**** openai hello&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing your API invocation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;openai&lt;/code&gt; offers a &lt;a href=&#34;https://en.wikipedia.org/wiki/Dry_run&#34;&gt;dry-run mode&lt;/a&gt; that allows you to test command composition without incurring any costs. Give it a try!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;openai -n hello, world!&#xA;&#xA;# This would be same:&#xA;openai -n &#39;hello, world!&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Command and output&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;$ openai -n hello, world!&#xA;Dry-run mode, no API calls made.&#xA;&#xA;Request URL:&#xA;--------------&#xA;https://api.openai.com/v1/chat/completions&#xA;&#xA;Authorization:&#xA;--------------&#xA;Bearer sk-cfw****NYre&#xA;&#xA;Payload:&#xA;--------------&#xA;{&#xA;  &#34;model&#34;: &#34;gpt-3.5-turbo&#34;,&#xA;  &#34;temperature&#34;: 0.5,&#xA;  &#34;max_tokens&#34;: 200,&#xA;  &#34;stream&#34;: true,&#xA;  &#34;messages&#34;: [&#xA;    {&#xA;      &#34;role&#34;: &#34;user&#34;,&#xA;      &#34;content&#34;: &#34;hello, world!&#34;&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; With full pipelining support, you can achieve the same functionality using alternative methods: ```bash echo &#39;hello, world!&#39; | openai -n ``` &#xA;&lt;details&gt; &#xA; &lt;summary&gt;For BASH gurus&lt;/summary&gt; &#xA; &lt;p&gt;This would be same:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#39;hello, world!&#39; &amp;gt;hello.txt&#xA;openai -n &amp;lt;hello.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Even this one:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;openai -n &amp;lt;&amp;lt;&amp;lt;&#39;hello, world!&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;and this:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;openai -n &amp;lt;&amp;lt;(echo &#39;hello, world!&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;It seems you have understood the basic usage. Try to get real answer from OpenAI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;openai hello, world!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Command and output&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt; $ openai hello, world!&#xA;Hello there! How can I assist you today?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Topics&lt;/h2&gt; &#xA;&lt;p&gt;Topic starts with a &lt;code&gt;@&lt;/code&gt; sign. so &lt;code&gt;openai @translate Hello, world!&lt;/code&gt; means calling the specified topic &lt;code&gt;translate&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To create new topic, like translate, with the initial prompt (system role, internally):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;openai @translate &#39;Translate, no other words: Chinese -&amp;gt; English, Non-Chinese -&amp;gt; Chinese&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can use the topic by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;openai @translate &#39;Hello, world!&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should get answer like &lt;code&gt;你好，世界！&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Again, to see what happens, use the dry-run mode by adding &lt;code&gt;-n&lt;/code&gt;. You will see the payload would be sent:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;model&#34;: &#34;gpt-3.5-turbo&#34;,&#xA;  &#34;temperature&#34;: 0.5,&#xA;  &#34;max_tokens&#34;: 200,&#xA;  &#34;stream&#34;: true,&#xA;  &#34;messages&#34;: [&#xA;    {&#xA;      &#34;role&#34;: &#34;system&#34;,&#xA;      &#34;content&#34;: &#34;Translate, no other words: Chinese -&amp;gt; English, Non-Chinese -&amp;gt; Chinese&#34;&#xA;    },&#xA;    {&#xA;      &#34;role&#34;: &#34;user&#34;,&#xA;      &#34;content&#34;: &#34;Hello, world!&#34;&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Chatting&lt;/h2&gt; &#xA;&lt;p&gt;All use cases above are standalone queries, not converstaions. To chat with OpenAI, use &lt;code&gt;-c&lt;/code&gt;. This can also continue existing topic conversation by prepending &lt;code&gt;@topic&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please note that chat requests will quickly consume tokens, leading to increased costs.&lt;/p&gt; &#xA;&lt;h2&gt;Advanced&lt;/h2&gt; &#xA;&lt;p&gt;To be continued.&lt;/p&gt; &#xA;&lt;h2&gt;Manual&lt;/h2&gt; &#xA;&lt;p&gt;To be continued.&lt;/p&gt; &#xA;&lt;h1&gt;LICENSE&lt;/h1&gt; &#xA;&lt;p&gt;This project uses the MIT license. Please see &lt;a href=&#34;https://github.com/janlay/openai-cli/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jiayaoqijia/ethgpt</title>
    <updated>2023-04-21T01:46:33Z</updated>
    <id>tag:github.com,2023-04-21:/jiayaoqijia/ethgpt</id>
    <link href="https://github.com/jiayaoqijia/ethgpt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Chatbot for Ethereum codebase and docs.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ChatBot for Ethereum Codebase and Docs&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.ethgpt.org&#34;&gt;ETHGPT&lt;/a&gt;: a GPT-powered ChatBot for accurate Ethereum info. We&#39;ve compiled resources like go-ethereum and ethresear.ch to enhance ChatGPT&#39;s knowledge, keeping you updated on Ethereum&#39;s latest developments. ETHGPT streamlines access to Ethereum-related info, benefiting users/developers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/jiayaoqijia/ethgpt/raw/main/public/ethgpt_frontpage.png&#34; alt=&#34;ETHGPT&#39;s frontpage&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Over the past 8 years, Ethereum has evolved with numerous updates, documentation, and codebases. With scattered materials and no centralized hub for information, it&#39;s been challenging for developers and users to stay updated on the latest Ethereum news and codebase explanations, such as the Shapella upgrade. Introducing ETHGPT - a GPT-powered ChatBot designed to answer all your Ethereum-related questions quickly and accurately. We&#39;ve generated documentation for the Go-Ethereum codebase and incorporated various Ethereum resources like &lt;a href=&#34;https://ethresear.ch/&#34;&gt;https://ethresear.ch/&lt;/a&gt;. By storing generated vectors, we enable users to ask questions and index the vector database. This provides precise contextual information as prompts to GPT, resulting in concise responses. As ChatGPT&#39;s knowledge is limited to September 2021, it lacks the latest Ethereum updates, such as the Shanghai upgrade. However, our newly generated documentation and resources provide the necessary context to guide ChatGPT in finding accurate answers. We generated documentation for Go-Ethereum at &lt;a href=&#34;https://github.com/jiayaoqijia/ethgpt/tree/main/data/go-ethereum-md/go-ethereum&#34;&gt;https://github.com/jiayaoqijia/ethgpt/tree/main/data/go-ethereum-md/go-ethereum&lt;/a&gt;. We believe ETHGPT will significantly improve the efficiency of accessing Ethereum-related information, helping users and developers better understand the Ethereum ecosystem.&lt;/p&gt; &#xA;&lt;h3&gt;Demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.ethgpt.org&#34;&gt;ETHGPT&lt;/a&gt;: &lt;a href=&#34;https://www.ethgpt.org&#34;&gt;https://www.ethgpt.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=qbAwxJqtp54&#34;&gt;Demo Video&lt;/a&gt;: &lt;a href=&#34;https://www.youtube.com/watch?v=qbAwxJqtp54&#34;&gt;https://www.youtube.com/watch?v=qbAwxJqtp54&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Comparison&lt;/h3&gt; &#xA;&lt;p&gt;As ChatGPT&#39;s knowledge is limited to September 2021, it lacks the latest Ethereum updates, such as the Shanghai upgrade. ETHGPT can provide more precise answers for Shanghai/Shapella upgrade. &lt;img src=&#34;https://github.com/jiayaoqijia/ethgpt/raw/main/public/ethgpt_chatgpt.png&#34; alt=&#34;ChatGPT&#39;s reply&#34;&gt; &lt;img src=&#34;https://github.com/jiayaoqijia/ethgpt/raw/main/public/ethgpt_comparison.png&#34; alt=&#34;ETHGPT&#39;s reply&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;Node.js v16+&lt;/p&gt; &#xA;&lt;h3&gt;Clone&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:jiayaoqijia/ethgpt.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;pnpm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Edit &lt;code&gt;.env&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Copy &lt;code&gt;.env.example&lt;/code&gt; to &lt;code&gt;.env&lt;/code&gt; Edit OPENAI API KEY.&lt;/p&gt; &#xA;&lt;h3&gt;Run&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;pnpm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Credit&lt;/h3&gt; &#xA;&lt;p&gt;This project is inspired by &lt;a href=&#34;https://github.com/zahidkhawaja&#34;&gt;Zahid&lt;/a&gt; and &lt;a href=&#34;https://github.com/mayooear/&#34;&gt;Mayo&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>