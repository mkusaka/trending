<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-15T01:36:17Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>wick3dr0se/matrix</title>
    <updated>2024-03-15T01:36:17Z</updated>
    <id>tag:github.com,2024-03-15:/wick3dr0se/matrix</id>
    <link href="https://github.com/wick3dr0se/matrix" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Matrix digital rain implemented in Bash&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;matrix üåßÔ∏è&lt;/h1&gt; &#xA; &lt;p&gt;A stupid simple matrix digital rain implemented in pure BASH v5.1+&lt;/p&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/wick3dr0se/matrix/main/matrix.gif&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;img src=&#34;https://shields.io/badge/made-with%20%20bash-green?style=flat-square&amp;amp;color=d5c4a1&amp;amp;labelColor=1d2021&amp;amp;logo=gnu-bash&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/Maintained%3F-yes-green.svg?sanitize=true&#34;&gt; &#xA; &lt;a href=&#34;https://discord.gg/W4mQqNnfSq&#34;&gt; &lt;img src=&#34;https://discordapp.com/api/guilds/913584348937207839/widget.png?style=shield&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Acquisition&lt;/h2&gt; &#xA;&lt;p&gt;stream &lt;code&gt;matrix&lt;/code&gt; without downloading/installing&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash &amp;lt;(curl -s https://raw.githubusercontent.com/wick3dr0se/matrix/main/matrix)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;otherwise, download&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/wick3dr0se/matrix; cd matrix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;install to $PATH (optional)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp matrix /usr/local/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Execution&lt;/h2&gt; &#xA;&lt;p&gt;if installed to $PATH &lt;code&gt;matrix&lt;/code&gt;, otherwise &lt;code&gt;./matrix&lt;/code&gt; or &lt;code&gt;bash matrix&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Let it rain&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://media1.tenor.com/m/wYaAw3v5zN0AAAAd/tiziano-ferro-rain.gif&#34; alt=&#34;let it rain&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MISP/misp-docker</title>
    <updated>2024-03-15T01:36:17Z</updated>
    <id>tag:github.com,2024-03-15:/MISP/misp-docker</id>
    <link href="https://github.com/MISP/misp-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A production ready Dockered MISP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MISP Docker images&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/orgs/MISP/packages&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/MISP/misp-docker/release-latest.yml&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/MISP/Docker&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/gitterHQ/gitter.png&#34; alt=&#34;Gitter chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A production ready Docker MISP image (formerly hosted at &lt;a href=&#34;https://github.com/ostefano/docker-misp&#34;&gt;https://github.com/ostefano/docker-misp&lt;/a&gt;, now deprecated) loosely based on CoolAcid and DSCO builds, with nearly all logic rewritten and verified for correctness and portability.&lt;/p&gt; &#xA;&lt;p&gt;Notable features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MISP and MISP modules are split into two different Docker images, &lt;code&gt;misp-core&lt;/code&gt; and &lt;code&gt;misp-modules&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Docker images are pushed regularly, no build required&lt;/li&gt; &#xA; &lt;li&gt;Lightweigth Docker images by using multiple build stages and a slim parent image&lt;/li&gt; &#xA; &lt;li&gt;Rely on off the shelf Docker images for Exim4, Redis, and MariaDB&lt;/li&gt; &#xA; &lt;li&gt;Cron jobs run updates, pushes, and pulls&lt;/li&gt; &#xA; &lt;li&gt;Fix supervisord process control (processes are correctly terminated upon reload)&lt;/li&gt; &#xA; &lt;li&gt;Fix schema update by making it completely offline (no user interaction required)&lt;/li&gt; &#xA; &lt;li&gt;Fix enforcement of permissions&lt;/li&gt; &#xA; &lt;li&gt;Fix MISP modules loading of faup library&lt;/li&gt; &#xA; &lt;li&gt;Fix MISP modules loading of gl library&lt;/li&gt; &#xA; &lt;li&gt;Add support for new background job &lt;a href=&#34;https://github.com/MISP/MISP/raw/2.4/docs/background-jobs-migration-guide.md&#34;&gt;system&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add support for building specific MISP and MISP-modules commits&lt;/li&gt; &#xA; &lt;li&gt;Add automatic configuration of syncservers (see &lt;code&gt;configure_misp.sh&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Add automatic configuration of authentication keys (see &lt;code&gt;configure_misp.sh&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Add direct push of docker images to GitHub Packages&lt;/li&gt; &#xA; &lt;li&gt;Consolidated &lt;code&gt;docker-compose.yml&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;li&gt;Workardound VirtioFS bug when running Docker Desktop for Mac&lt;/li&gt; &#xA; &lt;li&gt;... and many others&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The underlying spirit of this project is to allow &#34;repeatable deployments&#34;, and all pull requests in this direction will be merged post-haste.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Copy the &lt;code&gt;template.env&lt;/code&gt; to &lt;code&gt;.env&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Customize &lt;code&gt;.env&lt;/code&gt; based on your needs (optional step)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Run&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;docker-compose pull&lt;/code&gt; if you want to use pre-built images or &lt;code&gt;docker-compose build&lt;/code&gt; if you want to build your own (see the &lt;code&gt;Troubleshooting&lt;/code&gt; section in case of errors)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker-compose up&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Login to &lt;code&gt;https://localhost&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;User: &lt;code&gt;admin@admin.test&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Password: &lt;code&gt;admin&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Keeping the image up-to-date with upstream should be as simple as running &lt;code&gt;docker-compose pull&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;docker-compose.yml&lt;/code&gt; file allows further configuration settings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;MYSQL_HOST=db&#34;&#xA;&#34;MYSQL_USER=misp&#34;&#xA;&#34;MYSQL_PASSWORD=example&#34;    # NOTE: This should be AlphaNum with no Special Chars. Otherwise, edit config files after first run.&#xA;&#34;MYSQL_DATABASE=misp&#34;&#xA;&#34;MISP_MODULES_FQDN=http://misp-modules&#34; # Set the MISP Modules FQDN, used for Enrichment_services_url/Import_services_url/Export_services_url&#xA;&#34;WORKERS=1&#34;                 # Legacy variable controlling the number of parallel workers (use variables below instead)&#xA;&#34;NUM_WORKERS_DEFAULT=5&#34;     # To set the number of default workers&#xA;&#34;NUM_WORKERS_PRIO=5&#34;        # To set the number of prio workers&#xA;&#34;NUM_WORKERS_EMAIL=5&#34;       # To set the number of email workers&#xA;&#34;NUM_WORKERS_UPDATE=1&#34;      # To set the number of update workers&#xA;&#34;NUM_WORKERS_CACHE=5&#34;       # To set the number of cache workers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;New options are added on a regular basis.&lt;/p&gt; &#xA;&lt;h3&gt;Production&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It is recommended to specify the build you want run by editing &lt;code&gt;docker-compose.yml&lt;/code&gt; (see here for the list of available tags &lt;a href=&#34;https://github.com/orgs/MISP/packages&#34;&gt;https://github.com/orgs/MISP/packages&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Directory volume mount SSL Certs &lt;code&gt;./ssl&lt;/code&gt;: &lt;code&gt;/etc/ssl/certs&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Certificate File: &lt;code&gt;cert.pem&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Certificate Key File: &lt;code&gt;key.pem&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;CA File for Cert Authentication (optional) &lt;code&gt;ca.pem&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Additional directory volume mounts: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;./configs&lt;/code&gt;: &lt;code&gt;/var/www/MISP/app/Config/&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;./logs&lt;/code&gt;: &lt;code&gt;/var/www/MISP/app/tmp/logs/&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;./files&lt;/code&gt;: &lt;code&gt;/var/www/MISP/app/files/&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;./gnupg&lt;/code&gt;: &lt;code&gt;/var/www/MISP/.gnupg/&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;If you need to automatically run additional steps each time the container starts, create a new file &lt;code&gt;files/customize_misp.sh&lt;/code&gt;, and replace the variable &lt;code&gt;${CUSTOM_PATH}&lt;/code&gt; inside &lt;code&gt;docker-compose.yml&lt;/code&gt; with its parent path.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installing custom root CA certificates&lt;/h2&gt; &#xA;&lt;p&gt;Custom root CA certificates can be mounted under &lt;code&gt;/usr/local/share/ca-certificates&lt;/code&gt; and will be installed during the &lt;code&gt;misp-core&lt;/code&gt; container start.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It is important to have the .crt extension on the file, otherwise it will not be processed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;  misp-core:&#xA;    # ...&#xA;    volumes:&#xA;      - &#34;./configs/:/var/www/MISP/app/Config/&#34;&#xA;      - &#34;./logs/:/var/www/MISP/app/tmp/logs/&#34;&#xA;      - &#34;./files/:/var/www/MISP/app/files/&#34;&#xA;      - &#34;./ssl/:/etc/nginx/certs/&#34;&#xA;      - &#34;./gnupg/:/var/www/MISP/.gnupg/&#34;&#xA;      # customize by replacing ${CUSTOM_PATH} with a path containing &#39;files/customize_misp.sh&#39;&#xA;      # - &#34;${CUSTOM_PATH}/:/custom/&#34;&#xA;      # mount custom ca root certificates&#xA;      - &#34;./rootca.pem:/usr/local/share/ca-certificates/rootca.crt&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure you run a fairly recent version of Docker and Docker Compose (if in doubt, update following the steps outlined in &lt;a href=&#34;https://docs.docker.com/engine/install/ubuntu/&#34;&gt;https://docs.docker.com/engine/install/ubuntu/&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Some Linux distributions provide a recent version of Docker but a legacy version of Docker Compose, so you can try running &lt;code&gt;docker compose&lt;/code&gt; instead of &lt;code&gt;docker-compose&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Make sure you are not running an old image or container; when in doubt run &lt;code&gt;docker system prune --volumes&lt;/code&gt; and clone this repository into an empty directory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;A GitHub Action builds both &lt;code&gt;misp-core&lt;/code&gt; and &lt;code&gt;misp-modules&lt;/code&gt; images automatically and pushes them to the &lt;a href=&#34;https://github.com/orgs/MISP/packages&#34;&gt;GitHub Package registry&lt;/a&gt;. We do not use tags inside the repository; instead we tag images as they are pushed to the registry. For each build, &lt;code&gt;misp-core&lt;/code&gt; and &lt;code&gt;misp-modules&lt;/code&gt; images are tagged as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;misp-core:${commit-sha1}[0:7]&lt;/code&gt; and &lt;code&gt;misp-modules:${commit-sha1}[0:7]&lt;/code&gt; where &lt;code&gt;${commit-sha1}&lt;/code&gt; is the commit hash triggering the build&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;misp-core:latest&lt;/code&gt; and &lt;code&gt;misp-modules:latest&lt;/code&gt; in order to track the latest builds available&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;misp-core:${CORE_TAG}&lt;/code&gt; and &lt;code&gt;misp-modules:${MODULES_TAG}&lt;/code&gt; reflecting the underlying version of MISP and MISP modules (as specified inside the &lt;code&gt;template.env&lt;/code&gt; file at build time)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>