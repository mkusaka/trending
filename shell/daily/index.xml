<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-12T01:46:10Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mag37/dockcheck</title>
    <updated>2023-02-12T01:46:10Z</updated>
    <id>tag:github.com,2023-02-12:/mag37/dockcheck</id>
    <link href="https://github.com/mag37/dockcheck" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A script checking updates for docker images without pulling - then selectively auto-update some/all containers.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dockcheck&lt;/h1&gt; &#xA;&lt;h3&gt;A script checking updates for docker images &lt;strong&gt;without pulling&lt;/strong&gt; - then selectively auto-update some/all containers.&lt;/h3&gt; &#xA;&lt;p&gt;With the help of &lt;a href=&#34;https://github.com/regclient/regclient&#34;&gt;&lt;code&gt;regctl&lt;/code&gt;&lt;/a&gt;. This is just a concept for inspiration, use with care.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Dependencies:&lt;/h2&gt; &#xA;&lt;p&gt;Running docker (duh) and compose, either standalone or plugin.&lt;br&gt; &lt;code&gt;regctl&lt;/code&gt; by &lt;a href=&#34;https://github.com/regclient/regclient&#34;&gt;regclient&lt;/a&gt; (will ask to download &lt;code&gt;regctl&lt;/code&gt; if not in &lt;code&gt;PATH&lt;/code&gt; or &lt;code&gt;PWD&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/mag37/dockcheck/raw/main/example.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;dockcheck.sh&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./dockcheck.sh -h&#xA;Syntax:     dockcheck.sh [OPTION] [part of name to filter]&#xA;Example:    dockcheck.sh -a ng&#xA;&#xA;Options:&#xA;-h     Print this Help.&#xA;-a|y   Automatic updates, without interaction.&#xA;-n     No updates, only checking availability.&#xA;-r     Allow updating images for docker run, wont update the container.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Basic example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./dockcheck.sh&#xA;. . .&#xA;Containers on latest version:&#xA;glances&#xA;homer&#xA;&#xA;Containers with updates available:&#xA;0) ALL&#xA;1) adguardhome&#xA;2) syncthing&#xA;3) whoogle-search&#xA;&#xA;&#xA;Choose what containers to update:&#xA;Enter number(s) separated by comma, [q] to quit: 1,3&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then it proceedes to run &lt;code&gt;pull&lt;/code&gt; and &lt;code&gt;up -d&lt;/code&gt; on every container with updates.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;-r flag&lt;/code&gt; &lt;span&gt;‚ö†&lt;/span&gt; disclaimer and warning:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Wont auto-update the containers, only their images. (compose is recommended)&lt;/strong&gt;&lt;br&gt; &lt;code&gt;docker run&lt;/code&gt; dont support using new images just by restarting a container.&lt;br&gt; Containers need to be manually stopped, removed and created again to run on the new image.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;span&gt;ü™≤&lt;/span&gt; Squashed Bugs:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;No options for running without updates or auto update.&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;No filter to check only specific containers.&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;Faulty registry checkups stopped the updates completely.&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;No clear checks to skip containers producing errors.&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;Multi-digest images didn&#39;t correctly check with registry, giving false positives on updates.&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;Not working with filenames other than &lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;Lists are not alphabetically sorted (due to stacks and other parameters)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;Old &lt;code&gt;docker-compose&lt;/code&gt; binary-check sometimes returned false error&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;Stacks gets updated as whole, even if only one service is chosen.&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;Path broken occationally (from inspect) - probably due to old docker-compose binary.&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;~~Script breaks if one of the chosen containers are a &lt;code&gt;docker run&lt;/code&gt; container.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;span&gt;üî®&lt;/span&gt; Known issues&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;No granular choice of what to update (except initial name filter).&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;No detailed error feedback (just skip + list what&#39;s skipped) .&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;code&gt;dupc_function.sh&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Function to quickly check for updates on a single contianer or list of containers by name. &lt;strong&gt;Without the need of pulling&lt;/strong&gt;.&lt;br&gt; Preferably placed in &lt;code&gt;.bashrc&lt;/code&gt; or similar. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ dupc ng&#xA;Updates available for local_nginx.&#xA;nginx_reverse is already latest.&#xA;Updates available for paperless-ng.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Also check out a spinoff brother-project &lt;a href=&#34;https://github.com/Palleri/dockcheck-web&#34;&gt;Palleri/dockcheck-web&lt;/a&gt; for a WebUI-front!&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Special Thanks:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;span&gt;ü¶¨&lt;/span&gt; &lt;a href=&#34;https://github.com/t0rnis&#34;&gt;t0rnis&lt;/a&gt;&lt;br&gt; &lt;span&gt;üêÜ&lt;/span&gt; &lt;a href=&#34;https://github.com/Palleri&#34;&gt;Palleri&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aquasecurity/trivy-action</title>
    <updated>2023-02-12T01:46:10Z</updated>
    <id>tag:github.com,2023-02-12:/aquasecurity/trivy-action</id>
    <link href="https://github.com/aquasecurity/trivy-action" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Runs Trivy as GitHub action to scan your Docker container image for vulnerabilities&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Trivy Action&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/features/actions&#34;&gt;GitHub Action&lt;/a&gt; for &lt;a href=&#34;https://github.com/aquasecurity/trivy&#34;&gt;Trivy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/aquasecurity/trivy-action/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/aquasecurity/trivy-action.svg?logo=github&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/marketplace/actions/aqua-security-trivy&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/marketplace-trivy--action-blue?logo=github&#34; alt=&#34;GitHub Marketplace&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aquasecurity/trivy-action/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/aquasecurity/trivy-action&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aquasecurity/trivy-action/master/docs/images/trivy-action.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aquasecurity/trivy-action/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aquasecurity/trivy-action/master/#workflow&#34;&gt;Workflow&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aquasecurity/trivy-action/master/#using-trivy-with-github-code-scanning&#34;&gt;Docker Image Scanning&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aquasecurity/trivy-action/master/#using-trivy-to-scan-your-git-repo&#34;&gt;Git Repository Scanning&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aquasecurity/trivy-action/master/#customizing&#34;&gt;Customizing&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aquasecurity/trivy-action/master/#inputs&#34;&gt;Inputs&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Scan CI Pipeline&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: build&#xA;on:&#xA;  push:&#xA;    branches:&#xA;      - master&#xA;  pull_request:&#xA;jobs:&#xA;  build:&#xA;    name: Build&#xA;    runs-on: ubuntu-20.04&#xA;    steps:&#xA;      - name: Checkout code&#xA;        uses: actions/checkout@v2&#xA;      - name: Build an image from Dockerfile&#xA;        run: |&#xA;          docker build -t docker.io/my-organization/my-app:${{ github.sha }} .&#xA;      - name: Run Trivy vulnerability scanner&#xA;        uses: aquasecurity/trivy-action@master&#xA;        with:&#xA;          image-ref: &#39;docker.io/my-organization/my-app:${{ github.sha }}&#39;&#xA;          format: &#39;table&#39;&#xA;          exit-code: &#39;1&#39;&#xA;          ignore-unfixed: true&#xA;          vuln-type: &#39;os,library&#39;&#xA;          severity: &#39;CRITICAL,HIGH&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Scan CI Pipeline (w/ Trivy Config)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: build&#xA;on:&#xA;  push:&#xA;    branches:&#xA;    - master&#xA;  pull_request:&#xA;jobs:&#xA;  build:&#xA;    name: Build&#xA;    runs-on: ubuntu-20.04&#xA;    steps:&#xA;    - name: Checkout code&#xA;      uses: actions/checkout@v3&#xA;&#xA;    - name: Run Trivy vulnerability scanner in fs mode&#xA;      uses: aquasecurity/trivy-action@master&#xA;      with:&#xA;        scan-type: &#39;fs&#39;&#xA;        scan-ref: &#39;.&#39;&#xA;        trivy-config: trivy.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case &lt;code&gt;trivy.yaml&lt;/code&gt; is a YAML configuration that is checked in as part of the repo. Detailed information is available on the Trivy website but an example is as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;format: json&#xA;exit-code: 1&#xA;severity: CRITICAL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is possible to define all options in the &lt;code&gt;trivy.yaml&lt;/code&gt; file. Specifying individual options via the action are left for backward compatibility purposes. Defining the following is required as they cannot be defined with the config file:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;scan-ref&lt;/code&gt;: If using &lt;code&gt;fs, repo&lt;/code&gt; scans.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;image-ref&lt;/code&gt;: If using &lt;code&gt;image&lt;/code&gt; scan.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scan-type&lt;/code&gt;: To define the scan type, e.g. &lt;code&gt;image&lt;/code&gt;, &lt;code&gt;fs&lt;/code&gt;, &lt;code&gt;repo&lt;/code&gt;, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Order of prerference for options&lt;/h4&gt; &#xA;&lt;p&gt;Trivy uses &lt;a href=&#34;https://github.com/spf13/viper&#34;&gt;Viper&lt;/a&gt; which has a defined precedence order for options. The order is as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GitHub Action flag&lt;/li&gt; &#xA; &lt;li&gt;Environment variable&lt;/li&gt; &#xA; &lt;li&gt;Config file&lt;/li&gt; &#xA; &lt;li&gt;Default&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Scanning a Tarball&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: build&#xA;on:&#xA;  push:&#xA;    branches:&#xA;    - master&#xA;  pull_request:&#xA;jobs:&#xA;  build:&#xA;    name: Build&#xA;    runs-on: ubuntu-20.04&#xA;    steps:&#xA;    - name: Checkout code&#xA;      uses: actions/checkout@v3&#xA;&#xA;    - name: Generate tarball from image&#xA;      run: |&#xA;        docker pull &amp;lt;your-docker-image&amp;gt;&#xA;        docker save -o vuln-image.tar &amp;lt;your-docker-image&amp;gt;&#xA;        &#xA;    - name: Run Trivy vulnerability scanner in tarball mode&#xA;      uses: aquasecurity/trivy-action@master&#xA;      with:&#xA;        input: /github/workspace/vuln-image.tar&#xA;        severity: &#39;CRITICAL,HIGH&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Trivy with GitHub Code Scanning&lt;/h3&gt; &#xA;&lt;p&gt;If you have &lt;a href=&#34;https://docs.github.com/en/github/finding-security-vulnerabilities-and-errors-in-your-code/about-code-scanning&#34;&gt;GitHub code scanning&lt;/a&gt; available you can use Trivy as a scanning tool as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: build&#xA;on:&#xA;  push:&#xA;    branches:&#xA;      - master&#xA;  pull_request:&#xA;jobs:&#xA;  build:&#xA;    name: Build&#xA;    runs-on: ubuntu-20.04&#xA;    steps:&#xA;      - name: Checkout code&#xA;        uses: actions/checkout@v3&#xA;&#xA;      - name: Build an image from Dockerfile&#xA;        run: |&#xA;          docker build -t docker.io/my-organization/my-app:${{ github.sha }} .&#xA;&#xA;      - name: Run Trivy vulnerability scanner&#xA;        uses: aquasecurity/trivy-action@master&#xA;        with:&#xA;          image-ref: &#39;docker.io/my-organization/my-app:${{ github.sha }}&#39;&#xA;          format: &#39;sarif&#39;&#xA;          output: &#39;trivy-results.sarif&#39;&#xA;&#xA;      - name: Upload Trivy scan results to GitHub Security tab&#xA;        uses: github/codeql-action/upload-sarif@v2&#xA;        with:&#xA;          sarif_file: &#39;trivy-results.sarif&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find a more in-depth example here: &lt;a href=&#34;https://github.com/aquasecurity/trivy-sarif-demo/raw/master/.github/workflows/scan.yml&#34;&gt;https://github.com/aquasecurity/trivy-sarif-demo/blob/master/.github/workflows/scan.yml&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you would like to upload SARIF results to GitHub Code scanning even upon a non zero exit code from Trivy Scan, you can add the following to your upload step:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: build&#xA;on:&#xA;  push:&#xA;    branches:&#xA;      - master&#xA;  pull_request:&#xA;jobs:&#xA;  build:&#xA;    name: Build&#xA;    runs-on: ubuntu-20.04&#xA;    steps:&#xA;      - name: Checkout code&#xA;        uses: actions/checkout@v3&#xA;&#xA;      - name: Build an image from Dockerfile&#xA;        run: |&#xA;          docker build -t docker.io/my-organization/my-app:${{ github.sha }} .&#xA;&#xA;      - name: Run Trivy vulnerability scanner&#xA;        uses: aquasecurity/trivy-action@master&#xA;        with:&#xA;          image-ref: &#39;docker.io/my-organization/my-app:${{ github.sha }}&#39;&#xA;          format: &#39;sarif&#39;&#xA;          output: &#39;trivy-results.sarif&#39;&#xA;&#xA;      - name: Upload Trivy scan results to GitHub Security tab&#xA;        uses: github/codeql-action/upload-sarif@v2&#xA;        if: always()&#xA;        with:&#xA;          sarif_file: &#39;trivy-results.sarif&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See this for more details: &lt;a href=&#34;https://docs.github.com/en/actions/learn-github-actions/expressions#always&#34;&gt;https://docs.github.com/en/actions/learn-github-actions/expressions#always&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Using Trivy to scan your Git repo&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s also possible to scan your git repos with Trivy&#39;s built-in repo scan. This can be handy if you want to run Trivy as a build time check on each PR that gets opened in your repo. This helps you identify potential vulnerablites that might get introduced with each PR.&lt;/p&gt; &#xA;&lt;p&gt;If you have &lt;a href=&#34;https://docs.github.com/en/github/finding-security-vulnerabilities-and-errors-in-your-code/about-code-scanning&#34;&gt;GitHub code scanning&lt;/a&gt; available you can use Trivy as a scanning tool as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: build&#xA;on:&#xA;  push:&#xA;    branches:&#xA;      - master&#xA;  pull_request:&#xA;jobs:&#xA;  build:&#xA;    name: Build&#xA;    runs-on: ubuntu-20.04&#xA;    steps:&#xA;      - name: Checkout code&#xA;        uses: actions/checkout@v3&#xA;&#xA;      - name: Run Trivy vulnerability scanner in repo mode&#xA;        uses: aquasecurity/trivy-action@master&#xA;        with:&#xA;          scan-type: &#39;fs&#39;&#xA;          ignore-unfixed: true&#xA;          format: &#39;sarif&#39;&#xA;          output: &#39;trivy-results.sarif&#39;&#xA;          severity: &#39;CRITICAL&#39;&#xA;&#xA;      - name: Upload Trivy scan results to GitHub Security tab&#xA;        uses: github/codeql-action/upload-sarif@v2&#xA;        with:&#xA;          sarif_file: &#39;trivy-results.sarif&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Trivy to scan your rootfs directories&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s also possible to scan your rootfs directories with Trivy&#39;s built-in rootfs scan. This can be handy if you want to run Trivy as a build time check on each PR that gets opened in your repo. This helps you identify potential vulnerablites that might get introduced with each PR.&lt;/p&gt; &#xA;&lt;p&gt;If you have &lt;a href=&#34;https://docs.github.com/en/github/finding-security-vulnerabilities-and-errors-in-your-code/about-code-scanning&#34;&gt;GitHub code scanning&lt;/a&gt; available you can use Trivy as a scanning tool as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: build&#xA;on:&#xA;  push:&#xA;    branches:&#xA;      - master&#xA;  pull_request:&#xA;jobs:&#xA;  build:&#xA;    name: Build&#xA;    runs-on: ubuntu-20.04&#xA;    steps:&#xA;      - name: Checkout code&#xA;        uses: actions/checkout@v3&#xA;&#xA;      - name: Run Trivy vulnerability scanner with rootfs command&#xA;        uses: aquasecurity/trivy-action@master&#xA;        with:&#xA;          scan-type: &#39;rootfs&#39;&#xA;          scan-ref: &#39;rootfs-example-binary&#39;&#xA;          ignore-unfixed: true&#xA;          format: &#39;sarif&#39;&#xA;          output: &#39;trivy-results.sarif&#39;&#xA;          severity: &#39;CRITICAL&#39;&#xA;&#xA;      - name: Upload Trivy scan results to GitHub Security tab&#xA;        uses: github/codeql-action/upload-sarif@v2&#xA;        with:&#xA;          sarif_file: &#39;trivy-results.sarif&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Trivy to scan Infrastructure as Code&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s also possible to scan your IaC repos with Trivy&#39;s built-in repo scan. This can be handy if you want to run Trivy as a build time check on each PR that gets opened in your repo. This helps you identify potential vulnerablites that might get introduced with each PR.&lt;/p&gt; &#xA;&lt;p&gt;If you have &lt;a href=&#34;https://docs.github.com/en/github/finding-security-vulnerabilities-and-errors-in-your-code/about-code-scanning&#34;&gt;GitHub code scanning&lt;/a&gt; available you can use Trivy as a scanning tool as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: build&#xA;on:&#xA;  push:&#xA;    branches:&#xA;      - master&#xA;  pull_request:&#xA;jobs:&#xA;  build:&#xA;    name: Build&#xA;    runs-on: ubuntu-20.04&#xA;    steps:&#xA;      - name: Checkout code&#xA;        uses: actions/checkout@v3&#xA;&#xA;      - name: Run Trivy vulnerability scanner in IaC mode&#xA;        uses: aquasecurity/trivy-action@master&#xA;        with:&#xA;          scan-type: &#39;config&#39;&#xA;          hide-progress: false&#xA;          format: &#39;sarif&#39;&#xA;          output: &#39;trivy-results.sarif&#39;&#xA;          exit-code: &#39;1&#39;&#xA;          ignore-unfixed: true&#xA;          severity: &#39;CRITICAL,HIGH&#39;&#xA;&#xA;      - name: Upload Trivy scan results to GitHub Security tab&#xA;        uses: github/codeql-action/upload-sarif@v2&#xA;        with:&#xA;          sarif_file: &#39;trivy-results.sarif&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Trivy to generate SBOM&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s possible for Trivy to generate an SBOM of your dependencies and submit them to a consumer like GitHub Dependency Snapshot.&lt;/p&gt; &#xA;&lt;p&gt;The sending of SBOM to GitHub feature is only available if you currently have &lt;a href=&#34;https://docs.github.com/en/code-security/supply-chain-security/understanding-your-software-supply-chain/using-the-dependency-submission-api&#34;&gt;GitHub Dependency Snapshot&lt;/a&gt; available to you in your repo.&lt;/p&gt; &#xA;&lt;p&gt;In order to send results to the GitHub Dependency Snapshot, you will need to create a &lt;a href=&#34;https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token&#34;&gt;GitHub PAT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;name: Pull Request&#xA;on:&#xA;  push:&#xA;    branches:&#xA;    - master&#xA;  pull_request:&#xA;jobs:&#xA;  build:&#xA;    name: Checks&#xA;    runs-on: ubuntu-20.04&#xA;    steps:&#xA;      - name: Checkout code&#xA;        uses: actions/checkout@v3&#xA;&#xA;      - name: Run Trivy in GitHub SBOM mode and submit results to Dependency Snapshots&#xA;        uses: aquasecurity/trivy-action@master&#xA;        with:&#xA;          scan-type: &#39;fs&#39;&#xA;          format: &#39;github&#39;&#xA;          output: &#39;dependency-results.sbom.json&#39;&#xA;          image-ref: &#39;.&#39;&#xA;          github-pat: &#39;&amp;lt;github_pat_token&amp;gt;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Trivy to scan your private registry&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s also possible to scan your private registry with Trivy&#39;s built-in image scan. All you have to do is set ENV vars.&lt;/p&gt; &#xA;&lt;h4&gt;Docker Hub registry&lt;/h4&gt; &#xA;&lt;p&gt;Docker Hub needs &lt;code&gt;TRIVY_USERNAME&lt;/code&gt; and &lt;code&gt;TRIVY_PASSWORD&lt;/code&gt;. You don&#39;t need to set ENV vars when downloading from a public repository.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: build&#xA;on:&#xA;  push:&#xA;    branches:&#xA;      - master&#xA;  pull_request:&#xA;jobs:&#xA;  build:&#xA;    name: Build&#xA;    runs-on: ubuntu-20.04&#xA;    steps:&#xA;      - name: Checkout code&#xA;        uses: actions/checkout@v3&#xA;&#xA;      - name: Run Trivy vulnerability scanner&#xA;        uses: aquasecurity/trivy-action@master&#xA;        with:&#xA;          image-ref: &#39;docker.io/my-organization/my-app:${{ github.sha }}&#39;&#xA;          format: &#39;sarif&#39;&#xA;          output: &#39;trivy-results.sarif&#39;&#xA;        env:&#xA;          TRIVY_USERNAME: Username&#xA;          TRIVY_PASSWORD: Password&#xA;&#xA;      - name: Upload Trivy scan results to GitHub Security tab&#xA;        uses: github/codeql-action/upload-sarif@v2&#xA;        with:&#xA;          sarif_file: &#39;trivy-results.sarif&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;AWS ECR (Elastic Container Registry)&lt;/h4&gt; &#xA;&lt;p&gt;Trivy uses AWS SDK. You don&#39;t need to install &lt;code&gt;aws&lt;/code&gt; CLI tool. You can use &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html&#34;&gt;AWS CLI&#39;s ENV Vars&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: build&#xA;on:&#xA;  push:&#xA;    branches:&#xA;      - master&#xA;  pull_request:&#xA;jobs:&#xA;  build:&#xA;    name: Build&#xA;    runs-on: ubuntu-20.04&#xA;    steps:&#xA;      - name: Checkout code&#xA;        uses: actions/checkout@v3&#xA;&#xA;      - name: Run Trivy vulnerability scanner&#xA;        uses: aquasecurity/trivy-action@master&#xA;        with:&#xA;          image-ref: &#39;aws_account_id.dkr.ecr.region.amazonaws.com/imageName:${{ github.sha }}&#39;&#xA;          format: &#39;sarif&#39;&#xA;          output: &#39;trivy-results.sarif&#39;&#xA;        env:&#xA;          AWS_ACCESS_KEY_ID: key_id&#xA;          AWS_SECRET_ACCESS_KEY: access_key&#xA;          AWS_DEFAULT_REGION: us-west-2&#xA;&#xA;      - name: Upload Trivy scan results to GitHub Security tab&#xA;        uses: github/codeql-action/upload-sarif@v2&#xA;        with:&#xA;          sarif_file: &#39;trivy-results.sarif&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;GCR (Google Container Registry)&lt;/h4&gt; &#xA;&lt;p&gt;Trivy uses Google Cloud SDK. You don&#39;t need to install &lt;code&gt;gcloud&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;If you want to use target project&#39;s repository, you can set it via &lt;code&gt;GOOGLE_APPLICATION_CREDENTIAL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: build&#xA;on:&#xA;  push:&#xA;    branches:&#xA;      - master&#xA;  pull_request:&#xA;jobs:&#xA;  build:&#xA;    name: Build&#xA;    runs-on: ubuntu-20.04&#xA;    steps:&#xA;      - name: Checkout code&#xA;        uses: actions/checkout@v3&#xA;&#xA;      - name: Run Trivy vulnerability scanner&#xA;        uses: aquasecurity/trivy-action@master&#xA;        with:&#xA;          image-ref: &#39;docker.io/my-organization/my-app:${{ github.sha }}&#39;&#xA;          format: &#39;sarif&#39;&#xA;          output: &#39;trivy-results.sarif&#39;&#xA;        env:&#xA;          GOOGLE_APPLICATION_CREDENTIAL: /path/to/credential.json&#xA;&#xA;      - name: Upload Trivy scan results to GitHub Security tab&#xA;        uses: github/codeql-action/upload-sarif@v2&#xA;        with:&#xA;          sarif_file: &#39;trivy-results.sarif&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Self-Hosted&lt;/h4&gt; &#xA;&lt;p&gt;BasicAuth server needs &lt;code&gt;TRIVY_USERNAME&lt;/code&gt; and &lt;code&gt;TRIVY_PASSWORD&lt;/code&gt;. if you want to use 80 port, use NonSSL &lt;code&gt;TRIVY_NON_SSL=true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: build&#xA;on:&#xA;  push:&#xA;    branches:&#xA;      - master&#xA;  pull_request:&#xA;jobs:&#xA;  build:&#xA;    name: Build&#xA;    runs-on: ubuntu-20.04&#xA;    steps:&#xA;      - name: Checkout code&#xA;        uses: actions/checkout@v3&#xA;&#xA;      - name: Run Trivy vulnerability scanner&#xA;        uses: aquasecurity/trivy-action@master&#xA;        with:&#xA;          image-ref: &#39;docker.io/my-organization/my-app:${{ github.sha }}&#39;&#xA;          format: &#39;sarif&#39;&#xA;          output: &#39;trivy-results.sarif&#39;&#xA;        env:&#xA;          TRIVY_USERNAME: Username&#xA;          TRIVY_PASSWORD: Password&#xA;&#xA;      - name: Upload Trivy scan results to GitHub Security tab&#xA;        uses: github/codeql-action/upload-sarif@v2&#xA;        with:&#xA;          sarif_file: &#39;trivy-results.sarif&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customizing&lt;/h2&gt; &#xA;&lt;h3&gt;inputs&lt;/h3&gt; &#xA;&lt;p&gt;Following inputs can be used as &lt;code&gt;step.with&lt;/code&gt; keys:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;scan-type&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;image&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Scan type, e.g. &lt;code&gt;image&lt;/code&gt; or &lt;code&gt;fs&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;input&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Tar reference, e.g. &lt;code&gt;alpine-latest.tar&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;image-ref&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Image reference, e.g. &lt;code&gt;alpine:3.10.2&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;scan-ref&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/github/workspace/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Scan reference, e.g. &lt;code&gt;/github/workspace/&lt;/code&gt; or &lt;code&gt;.&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;format&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;table&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Output format (&lt;code&gt;table&lt;/code&gt;, &lt;code&gt;json&lt;/code&gt;, &lt;code&gt;sarif&lt;/code&gt;, &lt;code&gt;github&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;template&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Output template (&lt;code&gt;@/contrib/gitlab.tpl&lt;/code&gt;, &lt;code&gt;@/contrib/junit.tpl&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;output&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Save results to a file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;exit-code&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Exit code when specified vulnerabilities are found&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ignore-unfixed&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;Ignore unpatched/unfixed vulnerabilities&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;vuln-type&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;os,library&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Vulnerability types (os,library)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;severity&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Severities of vulnerabilities to scanned for and displayed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;skip-dirs&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Comma separated list of directories where traversal is skipped&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;skip-files&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Comma separated list of files where traversal is skipped&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cache-dir&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Cache directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;timeout&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;5m0s&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Scan timeout duration&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ignore-policy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Filter vulnerabilities with OPA rego language&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;hide-progress&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Suppress progress bar&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;list-all-pkgs&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Output all packages regardless of vulnerability&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;security-checks&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vuln,secret&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;comma-separated list of what security issues to detect (&lt;code&gt;vuln&lt;/code&gt;,&lt;code&gt;secret&lt;/code&gt;,&lt;code&gt;config&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;trivyignores&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;comma-separated list of relative paths in repository to one or more &lt;code&gt;.trivyignore&lt;/code&gt; files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;trivy-config&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Path to trivy.yaml config&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;github-pat&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GitHub Personal Access Token (PAT) for sending SBOM scan results to GitHub Dependency Snapshots&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;limit-severities-for-sarif&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;By default &lt;em&gt;SARIF&lt;/em&gt; format enforces output of all vulnerabilities regardless of configured severities. To override this behavior set this parameter to &lt;strong&gt;true&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>philipyoo/holbertonschool-sysadmin_devops</title>
    <updated>2023-02-12T01:46:10Z</updated>
    <id>tag:github.com,2023-02-12:/philipyoo/holbertonschool-sysadmin_devops</id>
    <link href="https://github.com/philipyoo/holbertonschool-sysadmin_devops" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Practicing basic shell scripts&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>