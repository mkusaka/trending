<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-26T01:46:58Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>woniuzfb/iptv</title>
    <updated>2023-06-26T01:46:58Z</updated>
    <id>tag:github.com,2023-06-26:/woniuzfb/iptv</id>
    <link href="https://github.com/woniuzfb/iptv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Alist / FFmpeg / Nginx / Openresty / V2ray / Xray / Cloudflare / IBM Cloud Foundry / Armbian / Proxmox VE / ....... All In One Script&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;All In One Script&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/woniuzfb/iptv/main/#all-in-one-script&#34;&gt;All In One Script&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/woniuzfb/iptv/main/#v2ray&#34;&gt;V2ray&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/woniuzfb/iptv/main/#xray&#34;&gt;Xray&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/woniuzfb/iptv/main/#nginx&#34;&gt;Nginx&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/woniuzfb/iptv/main/#openresty&#34;&gt;Openresty&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/woniuzfb/iptv/main/#armbian&#34;&gt;Armbian&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/woniuzfb/iptv/main/#proxmox-ve&#34;&gt;Proxmox VE&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/woniuzfb/iptv/main/#ibm-cloud-foundry&#34;&gt;IBM Cloud Foundry&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/woniuzfb/iptv/main/#cloudflare-partnerworkers&#34;&gt;Cloudflare partner,workers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/woniuzfb/iptv/main/#ffmpeg&#34;&gt;FFmpeg&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/woniuzfb/iptv/main/#%E7%BC%96%E8%AF%91%E9%9D%99%E6%80%81-ffmpeg&#34;&gt;编译静态 FFmpeg&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/woniuzfb/iptv/main/#%E8%87%AA%E5%8A%A8%E8%A7%A3%E6%9E%90%E7%9B%B4%E6%92%AD%E6%BA%90&#34;&gt;自动解析直播源&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/woniuzfb/iptv/main/#%E5%BF%AB%E6%8D%B7%E9%94%AE&#34;&gt;快捷键&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/woniuzfb/iptv/main/#%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3&#34;&gt;参数详解&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/woniuzfb/iptv/main/#%E4%B8%BE%E4%BE%8B&#34;&gt;举例&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/woniuzfb/iptv/main/#alist&#34;&gt;Alist&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/woniuzfb/iptv/main/#dev&#34;&gt;Dev&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;V2ray&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://woniuzfb.github.io/iptv/v2.sh &amp;amp;&amp;amp; bash v2.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;v2&lt;/code&gt; 打开 v2ray 管理面板&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Xray&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://woniuzfb.github.io/iptv/x.sh &amp;amp;&amp;amp; bash x.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;x&lt;/code&gt; 打开 xray 管理面板&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Nginx&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://woniuzfb.github.io/iptv/nx.sh &amp;amp;&amp;amp; bash nx.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;nx&lt;/code&gt; 打开 Nginx 管理面板&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;使用官方 crossplane 解析配置&lt;/li&gt; &#xA; &lt;li&gt;支持修改最多五级指令&lt;/li&gt; &#xA; &lt;li&gt;SNI/SSL/APLN 分流&lt;/li&gt; &#xA; &lt;li&gt;nodejs&lt;/li&gt; &#xA; &lt;li&gt;mongodb&lt;/li&gt; &#xA; &lt;li&gt;postfix&lt;/li&gt; &#xA; &lt;li&gt;mmproxy&lt;/li&gt; &#xA; &lt;li&gt;dnscrypt proxy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Openresty&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://woniuzfb.github.io/iptv/or.sh &amp;amp;&amp;amp; bash or.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;or&lt;/code&gt; 打开 OpenResty 管理面板&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Armbian&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://woniuzfb.github.io/iptv/arm.sh &amp;amp;&amp;amp; bash arm.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;arm&lt;/code&gt; 打开 Armbian 管理面板&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;docker&lt;/li&gt; &#xA; &lt;li&gt;dnscrypt proxy&lt;/li&gt; &#xA; &lt;li&gt;openwrt (旁路由)&lt;/li&gt; &#xA; &lt;li&gt;openwrt-v2ray&lt;/li&gt; &#xA; &lt;li&gt;xray/v2ray core 切换&lt;/li&gt; &#xA; &lt;li&gt;一键配置透明代理(直连国内, 代理国外), 配置文件保存/切换&lt;/li&gt; &#xA; &lt;li&gt;NAT类型检测&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Proxmox VE&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://woniuzfb.github.io/iptv/pve.sh &amp;amp;&amp;amp; bash pve.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;pve&lt;/code&gt; 打开 Proxmox VE 管理面板&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;nbfc&lt;/li&gt; &#xA; &lt;li&gt;dnscrypt proxy&lt;/li&gt; &#xA; &lt;li&gt;openwrt-v2ray&lt;/li&gt; &#xA; &lt;li&gt;xray/v2ray core 切换&lt;/li&gt; &#xA; &lt;li&gt;一键配置透明代理(直连国内, 代理国外), 配置文件保存/切换&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;IBM Cloud Foundry&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://woniuzfb.github.io/iptv/ibm.sh &amp;amp;&amp;amp; bash ibm.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ibm&lt;/code&gt; 打开 ibm CF 管理面板&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ibm v2&lt;/code&gt; 打开 ibm v2ray APP 管理面板&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ibm x&lt;/code&gt; 打开 ibm xray APP 管理面板&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Cloudflare partner,workers&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://woniuzfb.github.io/iptv/cf.sh &amp;amp;&amp;amp; bash cf.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;cf&lt;/code&gt; 打开 cloudflare partner,workers 管理面板&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cf w&lt;/code&gt; 打开 cloudflare workers 管理面板&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;多 CFP 管理&lt;/li&gt; &#xA; &lt;li&gt;开启 workers 监控 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;可以在超过请求数( 默认 100000 )时自动上传 worker 到其他账号并移动域名 CNAME 记录&lt;/li&gt; &#xA;   &lt;li&gt;准备工作 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;脚本添加用户&lt;/li&gt; &#xA;     &lt;li&gt;[ 可省略 ] 需要 Token (API 令牌): workers 和 zone 编辑权限 或 使用 Global API Key (官网添加或查看)&lt;/li&gt; &#xA;     &lt;li&gt;脚本添加源站 CNAME 记录(一个 CNAME 对应一个 worker), 所有域名必须在同一 cloudflare 账号&lt;/li&gt; &#xA;     &lt;li&gt;如果是新账号需要登录官网完成验证邮箱并点击 workers 设置站点域名&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;可以设置中转 IBM CF&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;账号可能会被 cloudflare 列入黑名单, 无法使用 api&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;FFmpeg&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://woniuzfb.github.io/iptv/iptv.sh &amp;amp;&amp;amp; bash iptv.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;tv&lt;/code&gt; 打开 iptv 管理面板&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;计划任务(定时开启/关闭)&lt;/li&gt; &#xA; &lt;li&gt;监控&lt;/li&gt; &#xA; &lt;li&gt;防护&lt;/li&gt; &#xA; &lt;li&gt;防盗链&lt;/li&gt; &#xA; &lt;li&gt;节目表&lt;/li&gt; &#xA; &lt;li&gt;VIP&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;编译静态 FFmpeg&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd scripts&#xA;docker build -t ffmpeg-h265-static .&#xA;docker run -it ffmpeg-h265-static&#xA;./build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;自动解析直播源&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;cx&lt;/code&gt; 打开 xtream codes 账号/频道 管理面板&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;tv 4g&lt;/code&gt; 打开 4gtv 频道管理面板&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;tv d&lt;/code&gt; 添加演示频道&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;tvb&lt;/li&gt; &#xA; &lt;li&gt;fengshows&lt;/li&gt; &#xA; &lt;li&gt;lotus macau&lt;/li&gt; &#xA; &lt;li&gt;youtube&lt;/li&gt; &#xA; &lt;li&gt;twitch&lt;/li&gt; &#xA; &lt;li&gt;hbo asia&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;快捷键&lt;/h3&gt; &#xA;&lt;p&gt;见 &lt;code&gt;tv -h&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;tv c &amp;lt;en|zh_CN|...&amp;gt;&lt;/code&gt; 更改语言&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;tv color&lt;/code&gt; 自定义文字和背景颜色&lt;/p&gt; &#xA;&lt;h3&gt;参数详解&lt;/h3&gt; &#xA;&lt;p&gt;使用方法: tv -i [直播源] [-s 分片时长(秒)] [-o 输出目录名称] [-c m3u8包含的分片数目] [-b 码率] [-r 分辨率] [-p m3u8文件名称] [-C] [-R] [-l] [-P http代理]&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-i  直播源(支持 mpegts / hls / flv / youtube ...)&#xA;    可以是视频路径&#xA;    可以输入不同链接地址(监控按顺序尝试使用)，用空格分隔&#xA;-s  分片时长(秒)(默认：6)&#xA;-o  输出目录名称(默认：随机名称)&#xA;&#xA;-l  非无限时长直播, 无法设置切割分片数且无法监控(默认：不设置)&#xA;-P  FFmpeg 的 http 代理, 直播源是 http 链接时可用(默认：不设置)&#xA;&#xA;-p  m3u8名称(前缀)(默认：随机)&#xA;-c  m3u8里包含的分片数目(默认：5)&#xA;-S  分片所在子目录名称(默认：不使用子目录)&#xA;-t  分片名称(前缀)(默认：跟m3u8名称相同)&#xA;-a  音频编码(默认：aac) (不需要转码时输入 copy)&#xA;-v  视频编码(默认：libx264) (不需要转码时输入 copy)&#xA;-f  画面或声音延迟(格式如： v_3 画面延迟3秒，a_2 声音延迟2秒 画面声音不同步时使用)&#xA;-d  dvb teletext 字幕解码成的格式,可选: text,ass (默认: 不设置)&#xA;-q  CRF 固定质量因子, 多个 CRF 用逗号分隔(默认: 不设置)&#xA;    如果同时设置了输出视频码率, 则优先使用 CRF 值控制视频质量&#xA;    取值每 +/- 6 会大概导致码率的减半或加倍&#xA;    x264 和 x265 取值范围为 [0,51]&#xA;    x264 的默认值是 23, 视觉无损值 18&#xA;    x265 的默认值是 28, 视觉无损值 24&#xA;    VP9 取值范围为 [0,63], 建议取值范围为 [15,35]&#xA;-b  输出视频的码率(k)(多个用逗号分隔 比如: 800,1000,1500)(默认: 900)&#xA;    如果已经设置 CRF 固定质量因子, 用于 VBV 的 -maxrate 和 -bufsize (capped CRF)&#xA;    如果没有设置 CRF 固定质量因子, 用于指定输出视频码率(ABR 或 CBR)&#xA;    可以输入 omit 省略此选项&#xA;-r  输出视频的分辨率(多个用逗号分隔 比如: 960x540,1280x720)(默认: 1280x720)&#xA;-C  限制性编码(设置码率的情况下有效)(默认: 否)&#xA;    如果已经设置 CRF 固定质量因子, 使用限制性编码 VBV (capped CRF)&#xA;    如果没有设置 CRF 固定质量因子, 使用限制性编码 VBV (ABR)&#xA;-R  固定码率 CBR (设置 -C 情况下有效)(默认: 否)&#xA;-e  加密分片(默认：不加密)&#xA;-K  Key名称(默认：随机)&#xA;-z  频道名称(默认：跟m3u8名称相同)&#xA;&#xA;也可以不输出 HLS，比如 flv 推流&#xA;-k  设置推流类型，比如 -k flv&#xA;-H  推流 h265(默认: 不设置)&#xA;-T  设置推流地址，比如 rtmp://127.0.0.1/flv/xxx&#xA;-L  输入拉流(播放)地址(可省略)，比如 http://domain.com/flv?app=flv&amp;amp;stream=xxx&#xA;&#xA;-m  FFmpeg 额外的输入参数&#xA;    (默认：-copy_unknown -reconnect 1 -reconnect_at_eof 1 -reconnect_streamed 1 -reconnect_delay_max 2000 -rw_timeout 10000000 -y -nostats -nostdin -hide_banner -loglevel fatal)&#xA;    如果输入的直播源是 hls 链接，需去除 -reconnect_at_eof 1&#xA;    如果输入的直播源是 rtmp 或本地链接，需去除 -reconnect 1 -reconnect_at_eof 1 -reconnect_streamed 1 -reconnect_delay_max 2000&#xA;    如果要查看详细日志 fatal 改成 error / warning / ...&#xA;-n  FFmpeg 额外的输出参数, 可以输入 omit 省略此选项 (除非有特殊需求, 不需要转码时请省略此选项)&#xA;    (默认：-g 60 -sc_threshold 0 -sn -preset superfast -pix_fmt yuv420p -profile:v main)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;举例&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;使用 CRF 固定质量因子控制视频质量:&lt;/p&gt; &lt;p&gt;&lt;code&gt;tv -i http://xxx/xxx.ts -s 6 -o hbo1 -p hbo1 -q 15 -b 1500 -r 1280x720 -z &#39;hbo直播1&#39;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;使用码率控制视频质量[ 默认 ]:&lt;/p&gt; &lt;p&gt;&lt;code&gt;tv -i http://xxx/xxx.ts -s 6 -o hbo2 -p hbo2 -b 900 -r 1280x720 -z &#39;hbo直播2&#39;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;不需要转码的设置: -a copy -v copy -n omit&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;不输出 HLS, 推流 flv :&lt;/p&gt; &lt;p&gt;&lt;code&gt;tv -i http://xxx/xxx.ts -a aac -v libx264 -b 3000 -k flv -T rtmp://127.0.0.1/flv/xxx&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;或者输入 tv 打开 HLS 面板， tv f 打开 FLV 面板，使用方法 &lt;strong&gt;Enter&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Alist&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./debug ali&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dev&lt;/h2&gt; &#xA;&lt;p&gt;v2.0.0 broken atm&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./debug [tv|cf|v2|x|...] [options]&#xA;&#xA;./make [install]&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>