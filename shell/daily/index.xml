<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-11T01:35:04Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Guilouz/Creality-K1-Series</title>
    <updated>2024-03-11T01:35:04Z</updated>
    <id>tag:github.com,2024-03-11:/Guilouz/Creality-K1-Series</id>
    <link href="https://github.com/Guilouz/Creality-K1-Series" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Wiki for Creality K1 Series&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Wiki for Creality K1 Series&lt;/h1&gt; &#xA;&lt;img width=&#34;1102&#34; src=&#34;https://github.com/Guilouz/Creality-K1-Series/raw/main/docs/assets/img/home/home.png&#34;&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;This guide explains the whole process to root Creality K1, K1C and K1 Max and add features to your printer.&lt;/p&gt; &#xA;&lt;p&gt;The advantage is having full access to the firmware and configuration files to be able to make changes.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t know what you&#39;re doing, I don&#39;t recommend following this guide.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Wiki&lt;/h2&gt; &#xA;&lt;p&gt;Guide is available here: &lt;a href=&#34;https://guilouz.github.io/Creality-K1-Series/&#34;&gt;Wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt;</summary>
  </entry>
  <entry>
    <title>olauncher/olauncher</title>
    <updated>2024-03-11T01:35:04Z</updated>
    <id>tag:github.com,2024-03-11:/olauncher/olauncher</id>
    <link href="https://github.com/olauncher/olauncher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modified version of the old Minecraft Launcher supporting Microsoft authentication and more.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;olauncher&lt;/h1&gt; &#xA;&lt;p&gt;The old launcher we all know and love with the quality-of-life features of the new launcher. This aims to support java 8 through modern java.&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to the &lt;a href=&#34;https://github.com/olauncher/olauncher/releases/latest&#34;&gt;latest release&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Download the &lt;code&gt;olauncher-xxx-redist.jar&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;li&gt;Run it&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Microsoft authentication&lt;/li&gt; &#xA; &lt;li&gt;Bundled JVMs &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Automatically downloads the appropriate JVM for all minecraft versions&lt;/li&gt; &#xA;   &lt;li&gt;You just need a runtime to open the actual launcher&lt;/li&gt; &#xA;   &lt;li&gt;You can still provide your own JVMs&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Update checking&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Planned Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add skin/cape management&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Minor TODOs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support demo users (if they have a Microsoft account but no Minecraft profile)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to build from source&lt;/h2&gt; &#xA;&lt;p&gt;The commands must be run in the following order to build from source:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;decompile.sh&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Downloads original jar and decompiles it&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;init.sh&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Turns decompiled sources into a git repository&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;applyPatches.sh&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Applies OLauncher patches to the decompiled sources&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mvn clean package&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Compiles the patched launcher&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;genredist.sh&lt;/code&gt; (optional) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Make sure you&#39;ve run &lt;code&gt;git submodule update --init&lt;/code&gt; as this script uses the &lt;code&gt;AutoOL&lt;/code&gt; submodule.&lt;/li&gt; &#xA;   &lt;li&gt;Generates the redistributable JAR - Do not distribute the JARs in &lt;code&gt;olauncher/target&lt;/code&gt;!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>onedr0p/cluster-template</title>
    <updated>2024-03-11T01:35:04Z</updated>
    <id>tag:github.com,2024-03-11:/onedr0p/cluster-template</id>
    <link href="https://github.com/onedr0p/cluster-template" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A template for deploying a Kubernetes cluster with k3s or Talos&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;⛵ Cluster Template&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to my opinionated and extensible template for deploying a single Kubernetes cluster. The goal of this project is to make it easier for people interested in using Kubernetes to deploy a cluster at home on bare-metal or VMs.&lt;/p&gt; &#xA;&lt;p&gt;At a high level this project makes use of &lt;a href=&#34;https://github.com/mirkolenz/makejinja&#34;&gt;makejinja&lt;/a&gt; to read in a &lt;a href=&#34;https://raw.githubusercontent.com/onedr0p/cluster-template/main/config.sample.yaml&#34;&gt;configuration file&lt;/a&gt; which will render out pre-made templates that you can then use to customize your Kubernetes experience further.&lt;/p&gt; &#xA;&lt;h2&gt;✨ Features&lt;/h2&gt; &#xA;&lt;p&gt;The features included will depend on the type of configuration you want to use. There are currently &lt;strong&gt;2 different types&lt;/strong&gt; of &lt;strong&gt;configurations&lt;/strong&gt; available with this template.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&#34;Flux cluster&#34;&lt;/strong&gt; - a Kubernetes distribution of your choosing: &lt;a href=&#34;https://github.com/k3s-io/k3s&#34;&gt;k3s&lt;/a&gt; or &lt;a href=&#34;https://github.com/siderolabs/talos&#34;&gt;Talos&lt;/a&gt;. Deploys an opinionated implementation of &lt;a href=&#34;https://github.com/fluxcd/flux2&#34;&gt;Flux&lt;/a&gt; using &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; as the Git provider and &lt;a href=&#34;https://github.com/getsops/sops&#34;&gt;sops&lt;/a&gt; to manage secrets.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Required:&lt;/strong&gt; Debian 12 or Talos Linux installed on bare metal (or VMs) and some knowledge of &lt;a href=&#34;https://opencontainers.org/&#34;&gt;Containers&lt;/a&gt; and &lt;a href=&#34;https://yaml.org/&#34;&gt;YAML&lt;/a&gt;. Some knowledge of &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; practices &amp;amp; terminology is also required.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Components:&lt;/strong&gt; &lt;a href=&#34;https://github.com/cilium/cilium&#34;&gt;Cilium&lt;/a&gt; and &lt;a href=&#34;https://github.com/kube-vip/kube-vip&#34;&gt;kube-vip&lt;/a&gt; &lt;em&gt;(k3s)&lt;/em&gt;. &lt;a href=&#34;https://github.com/fluxcd/flux2&#34;&gt;flux&lt;/a&gt;, &lt;a href=&#34;https://github.com/cert-manager/cert-manager&#34;&gt;cert-manager&lt;/a&gt;, &lt;a href=&#34;https://github.com/XenitAB/spegel&#34;&gt;spegel&lt;/a&gt;, &lt;a href=&#34;https://github.com/stakater/Reloader&#34;&gt;reloader&lt;/a&gt;, &lt;a href=&#34;https://github.com/rancher/system-upgrade-controller&#34;&gt;system-upgrade-controller&lt;/a&gt; &lt;em&gt;(k3s)&lt;/em&gt;, and &lt;a href=&#34;https://github.com/openebs/openebs&#34;&gt;openebs&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&#34;Flux cluster with Cloudflare&#34;&lt;/strong&gt; - An addition to &#34;&lt;strong&gt;Flux cluster&lt;/strong&gt;&#34; that provides DNS and SSL with &lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;Cloudflare&lt;/a&gt;. &lt;a href=&#34;https://www.cloudflare.com/products/tunnel/&#34;&gt;Cloudflare Tunnel&lt;/a&gt; is also included to provide external access to certain applications deployed in your cluster.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Required:&lt;/strong&gt; A Cloudflare account with a domain managed in your Cloudflare account.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Components:&lt;/strong&gt; &lt;a href=&#34;https://github.com/kubernetes/ingress-nginx/&#34;&gt;ingress-nginx&lt;/a&gt;, &lt;a href=&#34;https://github.com/kubernetes-sigs/external-dns&#34;&gt;external-dns&lt;/a&gt; and &lt;a href=&#34;https://github.com/cloudflare/cloudflared&#34;&gt;cloudflared&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Other features include:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://www.mend.io/renovate&#34;&gt;Renovate&lt;/a&gt;-ready repository with pull request diffs provided by &lt;a href=&#34;https://github.com/allenporter/flux-local&#34;&gt;flux-local&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Integrated &lt;a href=&#34;https://github.com/features/actions&#34;&gt;GitHub Actions&lt;/a&gt; with helpful workflows.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;💻 Machine Preparation&lt;/h2&gt; &#xA;&lt;p&gt;Hopefully some of this peeked your interests! If you are marching forward, now is a good time to choose whether you will deploy a Kubernetes cluster with &lt;a href=&#34;https://github.com/k3s-io/k3s&#34;&gt;k3s&lt;/a&gt; or &lt;a href=&#34;https://github.com/siderolabs/talos&#34;&gt;Talos&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;System requirements&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;The included behaviour of Talos or k3s is that all nodes are able to run workloads, &lt;strong&gt;including&lt;/strong&gt; the controller nodes. &lt;strong&gt;Worker nodes&lt;/strong&gt; are therefore &lt;strong&gt;optional&lt;/strong&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Do you have 3 or more nodes? It is highly recommended to make 3 of them controller nodes for a highly available control plane.&lt;/li&gt; &#xA;  &lt;li&gt;Running the cluster on Proxmox VE? My thoughts and recommendations about that are documented &lt;a href=&#34;https://onedr0p.github.io/home-ops/notes/proxmox-considerations.html&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Role&lt;/th&gt; &#xA;   &lt;th&gt;Cores&lt;/th&gt; &#xA;   &lt;th&gt;Memory&lt;/th&gt; &#xA;   &lt;th&gt;System Disk&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Control&lt;/td&gt; &#xA;   &lt;td&gt;4 &lt;em&gt;(6*)&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;8GB &lt;em&gt;(24GB*)&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;100GB &lt;em&gt;(500GB*)&lt;/em&gt; SSD/NVMe&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Worker&lt;/td&gt; &#xA;   &lt;td&gt;4 &lt;em&gt;(6*)&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;8GB &lt;em&gt;(24GB*)&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;100GB &lt;em&gt;(500GB*)&lt;/em&gt; SSD/NVMe&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;* recommended&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Talos&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the latest stable release of Talos from their &lt;a href=&#34;https://github.com/siderolabs/talos/releases&#34;&gt;GitHub releases&lt;/a&gt;. You will want to grab either &lt;code&gt;metal-amd64.iso&lt;/code&gt; or &lt;code&gt;metal-rpi_generic-arm64.raw.xz&lt;/code&gt; depending on your system.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Take note of the OS drive serial numbers you will need them later on.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Flash the iso or raw file to a USB drive and boot to Talos on your nodes with it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Continue on to 🚀 &lt;a href=&#34;https://raw.githubusercontent.com/onedr0p/cluster-template/main/#-getting-started&#34;&gt;&lt;strong&gt;Getting Started&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;k3s (AMD64)&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the latest stable release of Debian from &lt;a href=&#34;https://cdimage.debian.org/debian-cd/current/amd64/iso-dvd&#34;&gt;here&lt;/a&gt;, then follow &lt;a href=&#34;https://www.linuxtechi.com/how-to-install-debian-12-step-by-step&#34;&gt;this guide&lt;/a&gt; to get it installed. Deviations from the guide:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;Choose &#34;Guided - use entire disk&#34;&#xA;Choose &#34;All files in one partition&#34;&#xA;Delete Swap partition&#xA;Uncheck all Debian desktop environment options&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Post install] Remove CD/DVD as apt source&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;su -&#xA;sed -i &#39;/deb cdrom/d&#39; /etc/apt/sources.list&#xA;apt update&#xA;exit&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Post install] Enable sudo for your non-root user&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;su -&#xA;apt update&#xA;apt install -y sudo&#xA;usermod -aG sudo ${username}&#xA;echo &#34;${username} ALL=(ALL) NOPASSWD:ALL&#34; | tee /etc/sudoers.d/${username}&#xA;exit&#xA;newgrp sudo&#xA;sudo apt update&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Post install] Add SSH keys (or use &lt;code&gt;ssh-copy-id&lt;/code&gt; on the client that is connecting)&lt;/p&gt; &lt;p&gt;📍 &lt;em&gt;First make sure your ssh keys are up-to-date and added to your github account as &lt;a href=&#34;https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account&#34;&gt;instructed&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir -m 700 ~/.ssh&#xA;sudo apt install -y curl&#xA;curl https://github.com/${github_username}.keys &amp;gt; ~/.ssh/authorized_keys&#xA;chmod 600 ~/.ssh/authorized_keys&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;k3s (RasPi4)&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;i&gt;Click &lt;b&gt;here&lt;/b&gt; to read about using a RasPi4&lt;/i&gt;&lt;/summary&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;It is recommended to have an 8GB RasPi model. Most important is to &lt;strong&gt;boot from an external SSD/NVMe&lt;/strong&gt; rather than an SD card. This is &lt;a href=&#34;https://www.raspberrypi.com/documentation/computers/raspberry-pi.html&#34;&gt;supported natively&lt;/a&gt;, however if you have an early model you may need to &lt;a href=&#34;https://www.tomshardware.com/how-to/boot-raspberry-pi-4-usb&#34;&gt;update the bootloader&lt;/a&gt; first.&lt;/li&gt; &#xA;   &lt;li&gt;Check the &lt;a href=&#34;https://www.raspberrypi.com/documentation/computers/raspberry-pi.html#power-supply&#34;&gt;power requirements&lt;/a&gt; if using a PoE Hat and a SSD/NVMe dongle.&lt;/li&gt; &#xA;  &lt;/ol&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;Download the latest stable release of Debian from &lt;a href=&#34;https://raspi.debian.net/tested-images&#34;&gt;here&lt;/a&gt;. &lt;em&gt;&lt;strong&gt;Do not&lt;/strong&gt; use Raspbian or DietPi or any other flavor Linux OS.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Flash the image onto an SSD/NVMe drive.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Re-mount the drive to your workstation and then do the following (per the &lt;a href=&#34;https://raspi.debian.net/defaults-and-settings&#34;&gt;official documentation&lt;/a&gt;):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;Open &#39;sysconf.txt&#39; in a text editor and save it upon updating the information below&#xA;  - Change &#39;root_authorized_key&#39; to your desired public SSH key&#xA;  - Change &#39;root_pw&#39; to your desired root password&#xA;  - Change &#39;hostname&#39; to your desired hostname&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Connect SSD/NVMe drive to the Raspberry Pi 4 and power it on.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;[Post install] SSH into the device with the &lt;code&gt;root&lt;/code&gt; user and then create a normal user account with &lt;code&gt;adduser ${username}&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;[Post install] Follow steps 3 and 4 from &lt;a href=&#34;##k3s-amd64&#34;&gt;k3s (AMD64)&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;[Post install] Install &lt;code&gt;python3&lt;/code&gt; which is needed by Ansible.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt install -y python3&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Continue on to 🚀 &lt;a href=&#34;https://raw.githubusercontent.com/onedr0p/cluster-template/main/#-getting-started&#34;&gt;&lt;strong&gt;Getting Started&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;🚀 Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Once you have installed Talos or Debian on your nodes, there are six stages to getting a Flux-managed cluster up and runnning.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] For all stages below the commands &lt;strong&gt;MUST&lt;/strong&gt; be ran on your personal workstation within your repository directory&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;🎉 Stage 1: Create a Git repository&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a new &lt;strong&gt;public&lt;/strong&gt; repository by clicking the big green &#34;Use this template&#34; button at the top of this page.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone &lt;strong&gt;your new repo&lt;/strong&gt; to you local workstation and &lt;code&gt;cd&lt;/code&gt; into it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Continue on to 🌱 &lt;a href=&#34;https://raw.githubusercontent.com/onedr0p/cluster-template/main/#-stage-2-setup-your-local-workstation-environment&#34;&gt;&lt;strong&gt;Stage 2&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;🌱 Stage 2: Setup your local workstation&lt;/h3&gt; &#xA;&lt;p&gt;You have two different options for setting up your local workstation.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;First option is using a &lt;code&gt;devcontainer&lt;/code&gt; which requires you to have Docker and VSCode installed. This method is the fastest to get going because all the required CLI tools are provided for you in my &lt;a href=&#34;https://github.com/onedr0p/cluster-template/pkgs/container/cluster-template%2Fdevcontainer&#34;&gt;devcontainer&lt;/a&gt; image.&lt;/li&gt; &#xA; &lt;li&gt;The second option is setting up the CLI tools directly on your workstation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Devcontainer method&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Start Docker and open your repository in VSCode. There will be a pop-up asking you to use the &lt;code&gt;devcontainer&lt;/code&gt;, click the button to start using it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Continue on to 🔧 &lt;a href=&#34;https://raw.githubusercontent.com/onedr0p/cluster-template/main/#-stage-3-bootstrap-configuration&#34;&gt;&lt;strong&gt;Stage 3&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Non-devcontainer method&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the most recent version of &lt;a href=&#34;https://taskfile.dev/&#34;&gt;task&lt;/a&gt;, see the &lt;a href=&#34;https://taskfile.dev/installation/&#34;&gt;installation docs&lt;/a&gt; for other supported platforms.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Homebrew&#xA;brew install go-task&#xA;# or, Arch&#xA;pacman -S --noconfirm go-task &amp;amp;&amp;amp; ln -sf /usr/bin/go-task /usr/local/bin/task&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the most recent version of &lt;a href=&#34;https://direnv.net/&#34;&gt;direnv&lt;/a&gt;, see the &lt;a href=&#34;https://direnv.net/docs/installation.html&#34;&gt;installation docs&lt;/a&gt; for other supported platforms.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Homebrew&#xA;brew install direnv&#xA;# or, Arch&#xA;pacman -S --noconfirm direnv&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;📍 &lt;em&gt;After &lt;code&gt;direnv&lt;/code&gt; is installed be sure to &lt;strong&gt;&lt;a href=&#34;https://direnv.net/docs/hook.html&#34;&gt;hook it into your preferred shell&lt;/a&gt;&lt;/strong&gt; and then run &lt;code&gt;task workstation:direnv&lt;/code&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the additional &lt;strong&gt;required&lt;/strong&gt; CLI tools&lt;/p&gt; &lt;p&gt;📍 &lt;em&gt;&lt;strong&gt;Not using Homebrew or ArchLinux?&lt;/strong&gt; Try using the generic Linux task below, if that fails check out the &lt;a href=&#34;https://raw.githubusercontent.com/onedr0p/cluster-template/main/.taskfiles/Workstation/Brewfile&#34;&gt;Brewfile&lt;/a&gt;/&lt;a href=&#34;https://raw.githubusercontent.com/onedr0p/cluster-template/main/.taskfiles/Workstation/Archfile&#34;&gt;Archfile&lt;/a&gt; for what CLI tools needed and install them.&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Homebrew&#xA;task workstation:brew&#xA;# or, Arch with yay/paru&#xA;task workstation:arch&#xA;# or, Generic Linux (YMMV, this pulls binaires in to ./bin)&#xA;task workstation:generic-linux&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Setup a Python virual environment by running the following task command.&lt;/p&gt; &lt;p&gt;📍 &lt;em&gt;This commands requires Python 3.11+ to be installed.&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task workstation:venv&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Continue on to 🔧 &lt;a href=&#34;https://raw.githubusercontent.com/onedr0p/cluster-template/main/#-stage-3-bootstrap-configuration&#34;&gt;&lt;strong&gt;Stage 3&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;🔧 Stage 3: Bootstrap configuration&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] The &lt;a href=&#34;https://raw.githubusercontent.com/onedr0p/cluster-template/main/config.sample.yaml&#34;&gt;config.sample.yaml&lt;/a&gt; file contains config that is &lt;strong&gt;vital&lt;/strong&gt; to the bootstrap process.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate the &lt;code&gt;config.yaml&lt;/code&gt; from the &lt;a href=&#34;https://raw.githubusercontent.com/onedr0p/cluster-template/main/config.sample.yaml&#34;&gt;config.sample.yaml&lt;/a&gt; configuration file.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task init&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fill out the &lt;code&gt;config.yaml&lt;/code&gt; configuration file using the comments in that file as a guide.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the following command which will generate all the files needed to continue.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task configure&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Push you changes to git&lt;/p&gt; &lt;p&gt;📍 &lt;em&gt;&lt;strong&gt;Verify&lt;/strong&gt; all the &lt;code&gt;./kubernetes/**/*.sops.*&lt;/code&gt; files are &lt;strong&gt;encrypted&lt;/strong&gt; with SOPS&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git add -A&#xA;git commit -m &#34;Initial commit &lt;span&gt;🚀&lt;/span&gt;&#34;&#xA;git push&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Continue on to ⚡ &lt;a href=&#34;https://raw.githubusercontent.com/onedr0p/cluster-template/main/#-stage-4-prepare-your-nodes-for-kubernetes&#34;&gt;&lt;strong&gt;Stage 4&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;⚡ Stage 4: Prepare your nodes for Kubernetes&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] For &lt;strong&gt;Talos&lt;/strong&gt; skip ahead to ⛵ &lt;a href=&#34;https://raw.githubusercontent.com/onedr0p/cluster-template/main/#-stage-5-install-kubernetes&#34;&gt;&lt;strong&gt;Stage 5&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;k3s&lt;/h4&gt; &#xA;&lt;p&gt;📍 &lt;em&gt;Here we will be running an Ansible playbook to prepare your nodes for running a Kubernetes cluster.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensure you are able to SSH into your nodes from your workstation using a private SSH key &lt;strong&gt;without a passphrase&lt;/strong&gt; (for example using a SSH agent). This lets Ansible interact with your nodes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the Ansible dependencies&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task ansible:deps&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Verify Ansible can view your config and ping your nodes&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task ansible:list&#xA;task ansible:ping&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the Ansible prepare playbook (nodes wil reboot when done)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task ansible:run playbook=cluster-prepare&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Continue on to ⛵ &lt;a href=&#34;https://raw.githubusercontent.com/onedr0p/cluster-template/main/#-stage-5-install-kubernetes&#34;&gt;&lt;strong&gt;Stage 5&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;⛵ Stage 5: Install Kubernetes&lt;/h3&gt; &#xA;&lt;h4&gt;Talos&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Deploy your cluster and bootstrap it. This generates secrets, generates the config files for your nodes and applies them. It bootstraps the cluster afterwards, fetches the kubeconfig file and installs Cilium and kubelet-csr-approver. It finishes with some health checks.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task talos:bootstrap&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;k3s&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Kubernetes depending on the distribution you chose&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task ansible:run playbook=cluster-installation&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Cluster validation&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;kubeconfig&lt;/code&gt; for interacting with your cluster should have been created in the root of your repository.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Verify the nodes are online&lt;/p&gt; &lt;p&gt;📍 &lt;em&gt;If this command &lt;strong&gt;fails&lt;/strong&gt; you likely haven&#39;t configured &lt;code&gt;direnv&lt;/code&gt; as mentioned previously in the guide.&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kubectl get nodes -o wide&#xA;# NAME           STATUS   ROLES                       AGE     VERSION&#xA;# k8s-0          Ready    control-plane,etcd,master   1h      v1.29.1&#xA;# k8s-1          Ready    worker                      1h      v1.29.1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Continue on to 🔹 &lt;a href=&#34;https://raw.githubusercontent.com/onedr0p/cluster-template/main/#-stage-6-install-flux-in-your-cluster&#34;&gt;&lt;strong&gt;Stage 6&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;🔹 Stage 6: Install Flux in your cluster&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Verify Flux can be installed&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;flux check --pre&#xA;# ► checking prerequisites&#xA;# ✔ kubectl 1.27.3 &amp;gt;=1.18.0-0&#xA;# ✔ Kubernetes 1.27.3+k3s1 &amp;gt;=1.16.0-0&#xA;# ✔ prerequisites checks passed&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Flux and sync the cluster to the Git repository&lt;/p&gt; &lt;p&gt;📍 &lt;em&gt;Run &lt;code&gt;task flux:github-deploy-key&lt;/code&gt; first if using a private repository.&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task flux:bootstrap&#xA;# namespace/flux-system configured&#xA;# customresourcedefinition.apiextensions.k8s.io/alerts.notification.toolkit.fluxcd.io created&#xA;# ...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Verify Flux components are running in the cluster&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kubectl -n flux-system get pods -o wide&#xA;# NAME                                       READY   STATUS    RESTARTS   AGE&#xA;# helm-controller-5bbd94c75-89sb4            1/1     Running   0          1h&#xA;# kustomize-controller-7b67b6b77d-nqc67      1/1     Running   0          1h&#xA;# notification-controller-7c46575844-k4bvr   1/1     Running   0          1h&#xA;# source-controller-7d6875bcb4-zqw9f         1/1     Running   0          1h&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;🎤 Verification Steps&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Mic check, 1, 2&lt;/em&gt; - In a few moments applications should be lighting up like Christmas in July 🎄&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Output all the common resources in your cluster.&lt;/p&gt; &lt;p&gt;📍 &lt;em&gt;Feel free to use the provided &lt;a href=&#34;https://raw.githubusercontent.com/onedr0p/cluster-template/main/.taskfiles/Kubernetes/Taskfile.yaml&#34;&gt;kubernetes tasks&lt;/a&gt; for validation of cluster resources or continue to get familiar with the &lt;code&gt;kubectl&lt;/code&gt; and &lt;code&gt;flux&lt;/code&gt; CLI tools.&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task kubernetes:resources&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;⚠️ It might take &lt;code&gt;cert-manager&lt;/code&gt; awhile to generate certificates, this is normal so be patient.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;🏆 &lt;strong&gt;Congratulations&lt;/strong&gt; if all goes smooth you will have a Kubernetes cluster managed by Flux and your Git repository is driving the state of your cluster.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;🧠 Now it&#39;s time to pause and go get some motel motor oil ☕ and admire you made it this far!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;📣 Flux w/ Cloudflare post installation&lt;/h2&gt; &#xA;&lt;h4&gt;🌐 Public DNS&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;external-dns&lt;/code&gt; application created in the &lt;code&gt;networking&lt;/code&gt; namespace will handle creating public DNS records. By default, &lt;code&gt;echo-server-external&lt;/code&gt; and the &lt;code&gt;flux-webhook&lt;/code&gt; are the only subdomains reachable from the public internet. In order to make additional applications public you must set set the correct ingress class name and ingress annotations like in the HelmRelease for &lt;code&gt;echo-server&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;🏠 Home DNS&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;k8s_gateway&lt;/code&gt; will provide DNS resolution to external Kubernetes resources (i.e. points of entry to the cluster) from any device that uses your home DNS server. For this to work, your home DNS server must be configured to forward DNS queries for &lt;code&gt;${bootstrap_cloudflare.domain}&lt;/code&gt; to &lt;code&gt;${bootstrap_cloudflare.gateway_vip}&lt;/code&gt; instead of the upstream DNS server(s) it normally uses. This is a form of &lt;strong&gt;split DNS&lt;/strong&gt; (aka split-horizon DNS / conditional forwarding).&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] Below is how to configure a Pi-hole for split DNS. Other platforms should be similar.&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Apply this file on the Pihole server while substituting the variables&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# /etc/dnsmasq.d/99-k8s-gateway-forward.conf&#xA;server=/${bootstrap_cloudflare.domain}/${bootstrap_cloudflare.gateway_vip}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;2&#34;&gt; &#xA;  &lt;li&gt;Restart dnsmasq on the server.&lt;/li&gt; &#xA;  &lt;li&gt;Query an internal-only subdomain from your workstation (any &lt;code&gt;internal&lt;/code&gt; class ingresses): &lt;code&gt;dig @${home-dns-server-ip} echo-server-internal.${bootstrap_cloudflare.domain}&lt;/code&gt;. It should resolve to &lt;code&gt;${bootstrap_cloudflare.ingress_vip}&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you&#39;re having trouble with DNS be sure to check out these two GitHub discussions: &lt;a href=&#34;https://github.com/onedr0p/cluster-template/discussions/719&#34;&gt;Internal DNS&lt;/a&gt; and &lt;a href=&#34;https://github.com/onedr0p/cluster-template/discussions/635&#34;&gt;Pod DNS resolution broken&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;... Nothing working? That is expected, this is DNS after all!&lt;/p&gt; &#xA;&lt;h4&gt;📜 Certificates&lt;/h4&gt; &#xA;&lt;p&gt;By default this template will deploy a wildcard certificate using the Let&#39;s Encrypt &lt;strong&gt;staging environment&lt;/strong&gt;, which prevents you from getting rate-limited by the Let&#39;s Encrypt production servers if your cluster doesn&#39;t deploy properly (for example due to a misconfiguration). Once you are sure you will keep the cluster up for more than a few hours be sure to switch to the production servers as outlined in &lt;code&gt;config.yaml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;📍 &lt;em&gt;You will need a production certificate to reach internet-exposed applications through &lt;code&gt;cloudflared&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;🪝 Github Webhook&lt;/h4&gt; &#xA;&lt;p&gt;By default Flux will periodically check your git repository for changes. In order to have Flux reconcile on &lt;code&gt;git push&lt;/code&gt; you must configure Github to send &lt;code&gt;push&lt;/code&gt; events to Flux.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] This will only work after you have switched over certificates to the Let&#39;s Encrypt Production servers.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Obtain the webhook path&lt;/p&gt; &lt;p&gt;📍 &lt;em&gt;Hook id and path should look like &lt;code&gt;/hook/12ebd1e363c641dc3c2e430ecf3cee2b3c7a5ac9e1234506f6f5f3ce1230e123&lt;/code&gt;&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kubectl -n flux-system get receiver github-receiver -o jsonpath=&#39;{.status.webhookPath}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Piece together the full URL with the webhook path appended&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;https://flux-webhook.${bootstrap_cloudflare.domain}/hook/12ebd1e363c641dc3c2e430ecf3cee2b3c7a5ac9e1234506f6f5f3ce1230e123&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to the settings of your repository on Github, under &#34;Settings/Webhooks&#34; press the &#34;Add webhook&#34; button. Fill in the webhook url and your &lt;code&gt;bootstrap_github_webhook_token&lt;/code&gt; secret and save.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;💥 Nuke&lt;/h2&gt; &#xA;&lt;p&gt;There might be a situation where you want to destroy your Kubernetes cluster. This will completely clean the OS of all traces of the Kubernetes distribution you chose and then reboot the nodes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# k3s: Remove all traces of k3s from the nodes&#xA;task ansible:run playbook=cluster-nuke&#xA;# Talos: Reset your nodes back to maintenance mode and reboot&#xA;task talos:soft-nuke&#xA;# Talos: Comletely format your the Talos installation and reboot&#xA;task talos:hard-nuke&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🤖 Renovate&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.mend.io/renovate&#34;&gt;Renovate&lt;/a&gt; is a tool that automates dependency management. It is designed to scan your repository around the clock and open PRs for out-of-date dependencies it finds. Common dependencies it can discover are Helm charts, container images, GitHub Actions, Ansible roles... even Flux itself! Merging a PR will cause Flux to apply the update to your cluster.&lt;/p&gt; &#xA;&lt;p&gt;To enable Renovate, click the &#39;Configure&#39; button over at their &lt;a href=&#34;https://github.com/apps/renovate&#34;&gt;Github app page&lt;/a&gt; and select your repository. Renovate creates a &#34;Dependency Dashboard&#34; as an issue in your repository, giving an overview of the status of all updates. The dashboard has interactive checkboxes that let you do things like advance scheduling or reattempt update PRs you closed without merging.&lt;/p&gt; &#xA;&lt;p&gt;The base Renovate configuration in your repository can be viewed at &lt;a href=&#34;https://raw.githubusercontent.com/onedr0p/cluster-template/main/.github/renovate.json5&#34;&gt;.github/renovate.json5&lt;/a&gt;. By default it is scheduled to be active with PRs every weekend, but you can &lt;a href=&#34;https://docs.renovatebot.com/presets-schedule&#34;&gt;change the schedule to anything you want&lt;/a&gt;, or remove it if you want Renovate to open PRs right away.&lt;/p&gt; &#xA;&lt;h2&gt;🐛 Debugging&lt;/h2&gt; &#xA;&lt;p&gt;Below is a general guide on trying to debug an issue with an resource or application. For example, if a workload/resource is not showing up or a pod has started but in a &lt;code&gt;CrashLoopBackOff&lt;/code&gt; or &lt;code&gt;Pending&lt;/code&gt; state.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Start by checking all Flux Kustomizations &amp;amp; Git Repository &amp;amp; OCI Repository and verify they are healthy.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;flux get sources oci -A&#xA;flux get sources git -A&#xA;flux get ks -A&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Then check all the Flux Helm Releases and verify they are healthy.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;flux get hr -A&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Then check the if the pod is present.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kubectl -n &amp;lt;namespace&amp;gt; get pods -o wide&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Then check the logs of the pod if its there.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kubectl -n &amp;lt;namespace&amp;gt; logs &amp;lt;pod-name&amp;gt; -f&#xA;# or&#xA;stern -n &amp;lt;namespace&amp;gt; &amp;lt;fuzzy-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If a resource exists try to describe it to see what problems it might have.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kubectl -n &amp;lt;namespace&amp;gt; describe &amp;lt;resource&amp;gt; &amp;lt;name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Check the namespace events&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kubectl -n &amp;lt;namespace&amp;gt; get events --sort-by=&#39;.metadata.creationTimestamp&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Resolving problems that you have could take some tweaking of your YAML manifests in order to get things working, other times it could be a external factor like permissions on NFS. If you are unable to figure out your problem see the help section below.&lt;/p&gt; &#xA;&lt;h2&gt;👉 Help&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make a post in this repository&#39;s Github &lt;a href=&#34;https://github.com/onedr0p/cluster-template/discussions&#34;&gt;Discussions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Start a thread in the &lt;code&gt;#support&lt;/code&gt; or &lt;code&gt;#cluster-template&lt;/code&gt; channels in the &lt;a href=&#34;https://discord.gg/home-operations&#34;&gt;Home Operations&lt;/a&gt; Discord server.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;❔ What&#39;s next&lt;/h2&gt; &#xA;&lt;p&gt;The cluster is your oyster (or something like that). Below are some optional considerations you might want to review.&lt;/p&gt; &#xA;&lt;h4&gt;Ship it&lt;/h4&gt; &#xA;&lt;p&gt;To browse or get ideas on applications people are running, community member &lt;a href=&#34;https://github.com/whazor&#34;&gt;@whazor&lt;/a&gt; created &lt;a href=&#34;https://kubesearch.dev&#34;&gt;Kubesearch&lt;/a&gt; as a creative way to search Flux HelmReleases across Github and Gitlab.&lt;/p&gt; &#xA;&lt;h4&gt;Storage&lt;/h4&gt; &#xA;&lt;p&gt;The included CSI (openebs in local-hostpath mode) is a great start for storage but soon you might find you need more features like replicated block storage, or to connect to a NFS/SMB/iSCSI server. If you need any of those features be sure to check out the projects like &lt;a href=&#34;https://github.com/rook/rook&#34;&gt;rook-ceph&lt;/a&gt;, &lt;a href=&#34;https://github.com/longhorn/longhorn&#34;&gt;longhorn&lt;/a&gt;, &lt;a href=&#34;https://github.com/openebs/openebs&#34;&gt;openebs&lt;/a&gt;, &lt;a href=&#34;https://github.com/democratic-csi/democratic-csi&#34;&gt;democratic-csi&lt;/a&gt;, &lt;a href=&#34;https://github.com/kubernetes-csi/csi-driver-nfs&#34;&gt;csi-driver-nfs&lt;/a&gt;, and &lt;a href=&#34;https://github.com/SynologyOpenSource/synology-csi&#34;&gt;synology-csi&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;🙌 Related Projects&lt;/h2&gt; &#xA;&lt;p&gt;If this repo is too hot to handle or too cold to hold check out these following projects.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/khuedoan/homelab&#34;&gt;khuedoan/homelab&lt;/a&gt; - &lt;em&gt;Modern self-hosting framework, fully automated from empty disk to operating services with a single command.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/danmanners/aws-argo-cluster-template&#34;&gt;danmanners/aws-argo-cluster-template&lt;/a&gt; - &lt;em&gt;A community opinionated template for deploying Kubernetes clusters on-prem and in AWS using Pulumi, SOPS, Sealed Secrets, GitHub Actions, Renovate, Cilium and more!&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ricsanfre/pi-cluster&#34;&gt;ricsanfre/pi-cluster&lt;/a&gt; - &lt;em&gt;Pi Kubernetes Cluster. Homelab kubernetes cluster automated with Ansible and ArgoCD&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/techno-tim/k3s-ansible&#34;&gt;techno-tim/k3s-ansible&lt;/a&gt; - &lt;em&gt;The easiest way to bootstrap a self-hosted High Availability Kubernetes cluster. A fully automated HA k3s etcd install with kube-vip, MetalLB, and more&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;⭐ Stargazers&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://star-history.com/#onedr0p/cluster-template&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=onedr0p/cluster-template&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;🤝 Thanks&lt;/h2&gt; &#xA;&lt;p&gt;Big shout out to all the contributors, sponsors and everyone else who has helped on this project.&lt;/p&gt;</summary>
  </entry>
</feed>