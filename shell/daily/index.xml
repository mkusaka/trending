<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-11T01:54:14Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>johanhaleby/kubetail</title>
    <updated>2022-07-11T01:54:14Z</updated>
    <id>tag:github.com,2022-07-11:/johanhaleby/kubetail</id>
    <link href="https://github.com/johanhaleby/kubetail" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bash script to tail Kubernetes logs from multiple pods at the same time&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kubetail&lt;/h1&gt; &#xA;&lt;p&gt;Bash script that enables you to aggregate (tail/follow) logs from multiple pods into one stream. This is the same as running &#34;kubectl logs -f &#xA; &lt;pod&gt;&#xA;  &#34; but for multiple pods.&#xA; &lt;/pod&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Just download the &lt;a href=&#34;https://raw.githubusercontent.com/johanhaleby/kubetail/master/kubetail&#34;&gt;kubetail&lt;/a&gt; file (or any of the &lt;a href=&#34;https://github.com/johanhaleby/kubetail/releases&#34;&gt;releases&lt;/a&gt;) and you&#39;re good to go.&lt;/p&gt; &#xA;&lt;h3&gt;Homebrew&lt;/h3&gt; &#xA;&lt;p&gt;You can also install kubetail using &lt;a href=&#34;https://brew.sh/&#34;&gt;brew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ brew tap johanhaleby/kubetail &amp;amp;&amp;amp; brew install kubetail&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s also possible to install kubetail abbreviated to &lt;code&gt;kt&lt;/code&gt; by using the &lt;code&gt;--with-short-names&lt;/code&gt; suffix:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ brew tap johanhaleby/kubetail &amp;amp;&amp;amp; brew install kubetail --with-short-names&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you may need to run &lt;code&gt;compinit&lt;/code&gt; for zsh to pick-up the changes in competition after having upgraded from the non abbreviated installation.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;brew install --HEAD kubetail&lt;/code&gt; to install the latest (unreleased) version.&lt;/p&gt; &#xA;&lt;h3&gt;ASDF&lt;/h3&gt; &#xA;&lt;p&gt;You can install kubetail using the &lt;a href=&#34;https://github.com/asdf-vm/asdf&#34;&gt;asdf&lt;/a&gt; version manager.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;asdf plugin-add kubetail https://github.com/janpieper/asdf-kubetail.git&#xA;asdf install kubetail &amp;lt;version&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To find out the available versions to install, you can run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;asdf list-all kubetail&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ZSH plugin&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using a ZSH plugin manager, you can install &lt;code&gt;kubetail&lt;/code&gt; as a plugin.&lt;/p&gt; &#xA;&lt;h4&gt;Antigen&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re using &lt;a href=&#34;https://github.com/zsh-users/antigen&#34;&gt;Antigen&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;antigen bundle johanhaleby/kubetail&lt;/code&gt; to your &lt;code&gt;.zshrc&lt;/code&gt; where you&#39;ve listed your other plugins.&lt;/li&gt; &#xA; &lt;li&gt;Close and reopen your Terminal/iTerm window to &lt;strong&gt;refresh context&lt;/strong&gt; and use the plugin. Alternatively, you can run &lt;code&gt;antigen bundle johanhaleby/kubetail&lt;/code&gt; in a running shell to have &lt;code&gt;antigen&lt;/code&gt; load the new plugin.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;oh-my-zsh&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re using &lt;a href=&#34;https://raw.githubusercontent.com/johanhaleby/kubetail/master/github.com/robbyrussell/oh-my-zsh&#34;&gt;oh-my-zsh&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;In the command line, change to &lt;em&gt;oh-my-zsh&lt;/em&gt;&#39;s custom plugin directory :&lt;/p&gt; &lt;p&gt;&lt;code&gt;cd ~/.oh-my-zsh/custom/plugins/&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository into a new &lt;code&gt;kubetail&lt;/code&gt; directory:&lt;/p&gt; &lt;p&gt;&lt;code&gt;git clone https://github.com/johanhaleby/kubetail.git kubetail&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Edit your &lt;code&gt;~/.zshrc&lt;/code&gt; and add &lt;code&gt;kubetail&lt;/code&gt; – same as clone directory – to the list of plugins to enable:&lt;/p&gt; &lt;p&gt;&lt;code&gt;plugins=( ... kubetail )&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Then, restart your terminal application to &lt;strong&gt;refresh context&lt;/strong&gt; and use the plugin. Alternatively, you can source your current shell configuration:&lt;/p&gt; &lt;p&gt;&lt;code&gt;source ~/.zshrc&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;zgen&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re using &lt;a href=&#34;https://github.com/tarjoilija/zgen&#34;&gt;zgen&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;zgen load johanhaleby/kubetail&lt;/code&gt; to your &lt;code&gt;.zshrc&lt;/code&gt; along with your other &lt;code&gt;zgen load&lt;/code&gt; commands.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zgen reset &amp;amp;&amp;amp; zgen save&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Completion&lt;/h3&gt; &#xA;&lt;p&gt;The easiest option is to install kubetail from homebrew to dynamically display the pods names on &lt;code&gt;$ kubetail &amp;lt;tab&amp;gt;&lt;/code&gt;. Alternatively install any of the &lt;a href=&#34;https://raw.githubusercontent.com/johanhaleby/kubetail/master/completion/&#34;&gt;completion scripts&lt;/a&gt; (bash/zsh/fish) manually. For example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On Ubuntu, download the &lt;a href=&#34;https://raw.githubusercontent.com/johanhaleby/kubetail/master/completion/kubetail.bash&#34;&gt;kubetail.bash&lt;/a&gt; script and execute it in your &lt;code&gt;~/.bash_completion&lt;/code&gt; file &lt;code&gt;source $HOME/kubetail/completion/kubetail.bash&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;On Mac with zsh copy the &lt;a href=&#34;https://raw.githubusercontent.com/johanhaleby/kubetail/master/completion/kubetail.zsh&#34;&gt;kubetail.zsh&lt;/a&gt; script to &lt;code&gt;/usr/local/share/zsh/site-functions/_kubetail&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;On Mac with fish copy the &lt;a href=&#34;https://raw.githubusercontent.com/johanhaleby/kubetail/master/completion/kubetail.fish&#34;&gt;kubetail.fish&lt;/a&gt; script to &lt;code&gt;~/.config/fish/completions/&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Don&#39;t forget to restart your terminal afterwards.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;First find the names of all your pods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ kubectl get pods&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will return a list looking something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;NAME                   READY     STATUS    RESTARTS   AGE&#xA;app1-v1-aba8y          1/1       Running   0          1d&#xA;app1-v1-gc4st          1/1       Running   0          1d&#xA;app1-v1-m8acl  &#x9;       1/1       Running   0          6d&#xA;app1-v1-s20d0  &#x9;       1/1       Running   0          1d&#xA;app2-v31-9pbpn         1/1       Running   0          1d&#xA;app2-v31-q74wg         1/1       Running   0          1d&#xA;my-demo-v5-0fa8o       1/1       Running   0          3h&#xA;my-demo-v5-yhren       1/1       Running   0          2h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To tail the logs of the two &#34;app2&#34; pods in one go simply do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ kubetail app2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To tail only a specific container from multiple pods specify the container like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ kubetail app2 -c container1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can repeat &lt;code&gt;-c&lt;/code&gt; to tail multiple specific containers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ kubetail app2 -c container1 -c container2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To tail multiple applications at the same time seperate them by comma:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ kubetail app1,app2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For advanced matching you can use regular expressions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ kubetail &#34;^app1|.*my-demo.*&#34; --regex&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To tail logs within a specific namespace, make sure to append the namespace flag &lt;em&gt;after&lt;/em&gt; you have provided values for containers and applications:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ kubetail app2 -c container1 -n namespace1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Supply &lt;code&gt;-h&lt;/code&gt; for help and additional options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ kubetail -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Colors&lt;/h2&gt; &#xA;&lt;p&gt;By using the &lt;code&gt;-k&lt;/code&gt; argument you can specify how kubetail makes use of colors (only applicable when tailing multiple pods).&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pod&lt;/td&gt; &#xA;   &lt;td&gt;Only the pod name is colorized but the logged text is using the terminal default color&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;line&lt;/td&gt; &#xA;   &lt;td&gt;The entire line is colorized (default)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;Don&#39;t colorize the output at all&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ kubetail app2 -k false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you find that some colors are difficult to see then they can be skipped by supplying the color index either to the &lt;code&gt;-z&lt;/code&gt; flag or by setting the &lt;code&gt;KUBETAIL_SKIP_COLORS&lt;/code&gt; environment variable (either choice could be comma seperated). To find the color index you&#39;d like to skip more easily, set the &lt;code&gt;-i&lt;/code&gt; flag to &lt;code&gt;true&lt;/code&gt; (&lt;code&gt;-i true&lt;/code&gt;) or set the &lt;code&gt;KUBETAIL_SHOW_COLOR_INDEX&lt;/code&gt; environment variable to &lt;code&gt;true&lt;/code&gt; (&lt;code&gt;KUBETAIL_SHOW_COLOR_INDEX=true&lt;/code&gt;). This will print the color index as a prefix to the pod name (e.g. &lt;code&gt;[3:my-pod-12341] some log&lt;/code&gt; where &lt;code&gt;3&lt;/code&gt; is the index of the color). This is also helpful if you suffer from color blindness since the index will always be printed with the default terminal color.&lt;/p&gt; &#xA;&lt;h2&gt;Filtering / Highlighting etc&lt;/h2&gt; &#xA;&lt;p&gt;kubetail itself doesn&#39;t have filtering or highlighting capabilities built-in. If you&#39;re on MacOSX I recommend using &lt;a href=&#34;https://www.iterm2.com/&#34;&gt;iTerm2&lt;/a&gt; which allows for continuous highlighting of search terms, good scrolling capabilities and multitab arrangements. Another useful feature of iTerm2 is the &#34;timeline&#34; (&lt;code&gt;cmd&lt;/code&gt; + &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;e&lt;/code&gt;) which lets you display a timeline in your own local timezone next to the logs (that are typically in UTC).&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re not using iTerm2 or think that kubetail is lacking in features there&#39;s a &lt;a href=&#34;https://github.com/aks/kubetail&#34;&gt;fork&lt;/a&gt; of kubetail made by &lt;a href=&#34;https://github.com/aks&#34;&gt;Alan Stebbens&lt;/a&gt; that allows for richer configuration and uses &lt;a href=&#34;https://www.vanheusden.com/multitail/&#34;&gt;multitail&lt;/a&gt; and &lt;a href=&#34;https://github.com/aks/bash-lib&#34;&gt;bash-lib&lt;/a&gt;. Alan has been kind enough to provide a pull request but my current thinking is that I&#39;d like kubetail to stay simple and small and not use any dependencies.&lt;/p&gt; &#xA;&lt;h2&gt;Environment&lt;/h2&gt; &#xA;&lt;p&gt;kubetail can take default option values from environment variables matching the option name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;KUBETAIL_PREVIOUS&#xA;KUBETAIL_SINCE&#xA;KUBETAIL_NAMESPACE&#xA;KUBETAIL_FOLLOW&#xA;KUBETAIL_PREFIX&#xA;KUBETAIL_LINE_BUFFERED&#xA;KUBETAIL_COLORED_OUTPUT&#xA;KUBETAIL_TIMESTAMPS&#xA;KUBETAIL_JQ_SELECTOR&#xA;KUBETAIL_SKIP_COLORS&#xA;KUBETAIL_TAIL&#xA;KUBETAIL_SHOW_COLOR_INDEX&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;More&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests are very welcome!&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;http://code.haleby.se/2015/11/13/tail-logs-from-multiple-pods-simultaneously-in-kubernetes/&#34;&gt;http://code.haleby.se/2015/11/13/tail-logs-from-multiple-pods-simultaneously-in-kubernetes/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/johanhaleby&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/arial-blue.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 42px !important;width: 180px !important;&#34; height=&#34;42px&#34; width=&#34;180px&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>yc9559/uperf</title>
    <updated>2022-07-11T01:54:14Z</updated>
    <id>tag:github.com,2022-07-11:/yc9559/uperf</id>
    <link href="https://github.com/yc9559/uperf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Userspace performance controller for android&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Uperf&lt;/h1&gt; &#xA;&lt;p&gt;一个Android用户态性能控制器，实现大部分内核态升频功能，并支持更多情景识别。&lt;/p&gt; &#xA;&lt;h2&gt;主要功能&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;根据识别的场景类型，动态设定参数控制性能释放，支持所有&lt;code&gt;sysfs&lt;/code&gt;节点&lt;/li&gt; &#xA; &lt;li&gt;支持动态绑定正在操作的APP的UI相关线程到大核集群&lt;/li&gt; &#xA; &lt;li&gt;从Linux层面读取Android的触摸屏输入信号，识别点击和滑动&lt;/li&gt; &#xA; &lt;li&gt;主动采样系统负载，识别例如APP启动的瞬间重负载&lt;/li&gt; &#xA; &lt;li&gt;监听cpuset分组更新操作，识别正在操作的APP发生切换&lt;/li&gt; &#xA; &lt;li&gt;监听唤醒锁更新操作，识别屏幕是否熄灭&lt;/li&gt; &#xA; &lt;li&gt;监听注入到Surfaceflinger的hook发送的通知，识别渲染开始、滞后、结束&lt;/li&gt; &#xA; &lt;li&gt;支持Android 6.0 - 12&lt;/li&gt; &#xA; &lt;li&gt;支持arm64-v8a&lt;/li&gt; &#xA; &lt;li&gt;支持Magisk方式一键安装，版本不低于20.4+&lt;/li&gt; &#xA; &lt;li&gt;不依赖于Magisk，可以手动方式安装&lt;/li&gt; &#xA; &lt;li&gt;除非SfAnalysis注入失败，大多数情况SELinux可保持&lt;code&gt;enforcing&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;不依赖于任何Android应用层框架以及第三方内核&lt;/li&gt; &#xA; &lt;li&gt;为大多数热门硬件平台提供了调参后的配置文件&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;下载&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yc9559/uperf/releases&#34;&gt;https://github.com/yc9559/uperf/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;安装&lt;/h2&gt; &#xA;&lt;h3&gt;Magisk方式&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;下载后通过Magisk Manager刷入，Magisk版本不低于18.0&lt;/li&gt; &#xA; &lt;li&gt;重启后查看&lt;code&gt;/sdcard/Android/yc/uperf/uperf_log.txt&lt;/code&gt;检查uperf是否正常自启动&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;手动安装&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;如果你的设备无法安装Magisk，并且已经获取到ROOT权限&lt;/li&gt; &#xA; &lt;li&gt;下载后手动解压缩，例如解压缩到&lt;code&gt;/data/uperf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;修改&lt;code&gt;setup_uperf.sh&lt;/code&gt;，&lt;code&gt;run_uperf.sh&lt;/code&gt;，&lt;code&gt;initsvc_uperf.sh&lt;/code&gt;权限为755&lt;/li&gt; &#xA; &lt;li&gt;执行&lt;code&gt;setup_uperf.sh&lt;/code&gt;完成安装，检查输出信息是否有报错&lt;/li&gt; &#xA; &lt;li&gt;执行&lt;code&gt;run_uperf.sh&lt;/code&gt;启动uperf，检查输出信息是否有报错&lt;/li&gt; &#xA; &lt;li&gt;打开&lt;code&gt;/data/cache/injector.log&lt;/code&gt;，检查sfanalysis注入是否成功&lt;/li&gt; &#xA; &lt;li&gt;如果关联自启动到第三方APP，设置在开机完成后执行&lt;code&gt;run_uperf.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;如果关联自启动到系统启动脚本，插入&lt;code&gt;sh /data/uperf/initsvc_uperf.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;重启后查看&lt;code&gt;/sdcard/yc/uperf/uperf_log.txt&lt;/code&gt;检查uperf是否正常自启动&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;性能模式切换&lt;/h3&gt; &#xA;&lt;h4&gt;修改启动时的默认性能模式&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;打开&lt;code&gt;/sdcard/Android/yc/uperf/cur_powermode.txt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;修改&lt;code&gt;auto&lt;/code&gt;, 其中&lt;code&gt;auto&lt;/code&gt;为开机后使用的默认性能模式，可选的模式有: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;auto&lt;/code&gt;根据正在使用的App进行动态响应&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;balance&lt;/code&gt;均衡模式，比原厂略流畅的同时略省电&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;powersave&lt;/code&gt;卡顿模式，保证基本流畅的同时尽可能降低功耗&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;performance&lt;/code&gt;费电模式，保证费电的同时多一点流畅度&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;fast&lt;/code&gt;性能模式，相对于均衡模式更加激进&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;重启&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;启动完成后切换性能模式&lt;/h4&gt; &#xA;&lt;p&gt;方法1:&lt;br&gt; 执行&lt;code&gt;sh /data/powercfg.sh balance&lt;/code&gt;，其中&lt;code&gt;balance&lt;/code&gt;是想要切换到的性能模式名称。&lt;/p&gt; &#xA;&lt;p&gt;方法2:&lt;br&gt; 安装&lt;a href=&#34;https://www.coolapk.com/apk/com.omarea.vtools&#34;&gt;Scene&lt;/a&gt;为APP绑定对应的性能模式。&lt;/p&gt; &#xA;&lt;h2&gt;常见问题&lt;/h2&gt; &#xA;&lt;p&gt;Q：是否对待机功耗有负面影响？&lt;br&gt; A：Uperf的实现做了不少低功耗的优化，自身运行的功耗开销很低。此外预制配置文件的待机模式中，减少了待机时唤醒的核心数量并使用了保守的升频参数。待机功耗的优化主要靠减少唤醒时长比例，在此基础上Uperf可进一步降低一点待机功耗。&lt;/p&gt; &#xA;&lt;p&gt;Q：为什么使用了Uperf还是很费电？&lt;br&gt; A：SOC的AP部分功耗主要取决于计算量以及使用的频点。Uperf只能控制性能释放，改进频点的选择从而降低功耗，如果后台APP的计算量很大是无法得到显著的续航延长的。这一问题可以通过Scene工具箱的进程管理器来定位。&lt;/p&gt; &#xA;&lt;p&gt;Q：是否需要关闭系统的温度控制？&lt;br&gt; A：系统温度控制是一种硬件保护措施，或者用于改善高负载下的用户体验。大多数情况下无需关闭它，如果你遇到性能严重受限的情况，例如运行竞技游戏CPU最大频率限制在1.4Ghz，请提升温控介入的阈值或者关闭系统温度控制。&lt;/p&gt; &#xA;&lt;p&gt;Q：Uperf和Scene工具箱是什么关系？&lt;br&gt; A：这两个软件独立运作，没有互相依赖。Uperf实现了接口可供Scene工具箱调用，例如性能模式切换以及分APP性能模式。如果不安装Scene工具箱也可以实现性能模式切换，详情见使用方式。&lt;/p&gt; &#xA;&lt;p&gt;Q：是否还需要关闭系统的performance boost？&lt;br&gt; A：Uperf模块内脚本已经关闭了大部分主流的用户态和内核态升频，如果有非常规的升频需要用户自己关闭。&lt;/p&gt; &#xA;&lt;p&gt;Q：我遇到了一些奇怪的系统故障，是怎么回事？&lt;br&gt; A：Uperf在大多数平台可以正常工作，在测试阶段收集到了以下可能发生的故障：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;桌面启动器不响应触摸。这个目前只在MIUI 12遇到，如果遇到了此问题请删除&lt;code&gt;/data/adb/modules/uperf/enable_sfanalysis&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;触摸屏报点间断丢失。请检查是否使用了自动跳过之类的APP，特别是支持坐标点击的&lt;/li&gt; &#xA; &lt;li&gt;睡死。用户态应用程序理论上不会影响系统稳定性，请更换为官方内核和ROM&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Q：使用Magisk安装时提示&lt;code&gt;not supported&lt;/code&gt;，这是为什么？&lt;br&gt; A：此硬件平台没有预制的配置文件，可能需要自行适配。&lt;/p&gt; &#xA;&lt;h2&gt;详细介绍&lt;/h2&gt; &#xA;&lt;p&gt;这是在&lt;a href=&#34;https://github.com/yc9559/cpufreq-interactive-opt&#34;&gt;Project WIPE&lt;/a&gt;、&lt;a href=&#34;https://github.com/yc9559/wipe-v2&#34;&gt;Project WIPE v2&lt;/a&gt;、&lt;a href=&#34;https://github.com/yc9559/perfd-opt&#34;&gt;Perfd-opt&lt;/a&gt;、&lt;a href=&#34;https://github.com/yc9559/qti-mem-opt&#34;&gt;QTI-mem-opt&lt;/a&gt;之后的一个新项目。在之前的工作中，往往是基于一个现有的性能控制器做调参，这也意味着最后究竟能做到多好取决于控制器本身的上限。在EAS调度器成为主流之后无法应用WIPE系列的思路，因为EAS的参数自由度实在太少，等到借助了高通Boost框架才实现了更广范围的调整，才有了Perfd-opt。一方面受制于现有的性能控制器的功能限制，一方面还有一部分老设备没有这些新的性能控制器。没有条件就要创造条件，编写了一个安卓全平台的用户态性能控制器。&lt;/p&gt; &#xA;&lt;p&gt;用户态性能控制通常有着较高的延迟（因为修改sysfs节点消耗相对较多的时间），但是距离实际应用场景很近可以在一些已知的重负载开始之前主动提升性能减少卡顿。一般的工作模式是在系统框架Java层发送Hint，由Native层的服务接收Hint并执行对应的sysfs修改，例如高通CAF Boost Framework、Power-libperfmgr。&lt;/p&gt; &#xA;&lt;p&gt;与其他用户态性能控制器不同的是，Uperf没有Java层的部分，只有Native层接收时间通知和主动采样，这也就没有了系统框架层面的依赖。因此她不需要重新编译内核，也不需要修改Android框架源码，她也没有几乎硬件平台的限制。她的修改范围涵盖了所有内核态性能控制能够做到的，也就是说不用换掉没啥bug的官方内核，就能使用输入升频（没错，少部分老内核没有这个）、Dynamic Stune Boost、Devfreq Boost这些花式Boost。&lt;/p&gt; &#xA;&lt;p&gt;下表为几个主要的性能优化方案的功能对比：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;功能&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Project WIPE&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Perfd-opt(CAF)&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;libperfmgr&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Uperf&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;HMP+interactive&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;EAS+schedutil&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非高通平台&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Android &amp;lt; 8.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;HMP模型自动调参&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;UI线程的CPU亲和性&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;点击升频&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;列表滚动升频&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;APP启动加速&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;APK安装加速&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;待机优化&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;帧渲染滞后&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;渲染开始、结束&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;surfaceflinger复杂合成&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;视频录制情景&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;多性能模式&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;情景识别&lt;/h3&gt; &#xA;&lt;p&gt;注：v3版本已经修改，此部分不适用 Uperf支持如下几种情景识别：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;None&lt;/code&gt;，无Hint的常规状态&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Touch&lt;/code&gt;，触摸到屏幕切换的Hint&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Pressed&lt;/code&gt;，长按时切换的的Hint&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Tap&lt;/code&gt;，在刚触摸到屏幕切换的Hint&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Swipe&lt;/code&gt;，在屏幕滑动一段距离后切换的Hint&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;HeavyLoad&lt;/code&gt;，在Tap或Swipe检测到重负载后切换，负载降低后回落到Tap&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SfLag&lt;/code&gt;，给Surfaceflinger的渲染提交出现滞后切换的Hint&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SfBoost&lt;/code&gt;，Surfaceflinger的渲染提交需要加速切换的Hint&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Standby&lt;/code&gt;，屏幕熄灭时的Hint，一般滞后20秒(隐藏Hint)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SsAnim&lt;/code&gt;，系统动画播放切换的Hint&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WakeUp&lt;/code&gt;，亮屏解锁切换的Hint&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;触摸信号识别&lt;/h4&gt; &#xA;&lt;p&gt;本程序采用了跟安卓系统框架获取触摸信号一样的方式，监听位于/dev/input的设备，解析来自触摸屏的报点信息，可以获取到最基本的手指触摸到屏幕和手指离开屏幕的事件。根据一段连续的报点信息可以得到手指滑动的距离以及离开屏幕时末端速度，由此可以推断是点击操作还是滑动操作，以及根据末端速度推算APP滚动的持续时间。&lt;/p&gt; &#xA;&lt;h4&gt;重负载跟踪与限制&lt;/h4&gt; &#xA;&lt;p&gt;因为不在安卓框架层插入Hook无法确切知道APP正在启动，因此本程序在Hint开始后，用主动轮询的方式更新所有CPU核心的使用率和运行频率得到系统整体负载。&lt;code&gt;系统整体负载 = sum(efficiency(i) * (load_pct(i) / 100) * (freq_mhz(i) / 1000))&lt;/code&gt;，其中&lt;code&gt;i&lt;/code&gt;为CPU核心ID。如果整体负载高于&lt;code&gt;heavyLoad&lt;/code&gt;，那么把当前Hint切换到重负载Hint。重负载Hint的响应性能很好但耗电也偏多，本程序会持续监测系统负载，如果整体负载低于阈值，提前结束耗电的重负载Hint。对于负载不是那么高的APP热启动，甚至不会触发重负载，不像高通Boost框架不管负载多少强行拉满CPU持续2s。此外，这样的检测不仅涵盖了APP冷热启动，还涵盖了例如点击进入微信朋友圈这样的短时重负载场景。本功能的能耗开销也是在非常低的0.6ms/100ms（&lt;a href=&#34;mailto:Cortex-A55@1.0g&#34;&gt;Cortex-A55@1.0g&lt;/a&gt;）。下图为微信热启动Hint状态切换与持续时间。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yc9559/uperf/master/media/wechat_resume.png&#34; alt=&#34;微信热启动&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;某些的游戏负载确实非常高，系统负载能够非常稳定的持续超过阈值。理论上重负载游戏应该运行在功耗拐点的频率上，保持足够的性能输出的同时才不会发热过大，这与突发重负载的设置初衷矛盾。因此限制了请求进入重负载Hint的请求间隔，在上一次HeavyLoad结束后，负载低于&lt;code&gt;idleLoad&lt;/code&gt;保持1秒，并且在&lt;code&gt;requestBurstSlack&lt;/code&gt;这段时间内没有HeavyLoad请求，才能响应新的HeavyLoad，也就过滤了游戏这类持续重负载能耗过高的问题。&lt;/p&gt; &#xA;&lt;h4&gt;正在操作的APP发生切换&lt;/h4&gt; &#xA;&lt;p&gt;基于能够响应上面这些主要的事件，完全可以把非操作时的参数设置的比以前更加保守而不用担心卡顿，但是点亮唤醒是个例外。屏幕下指纹在息屏显示时，按压指纹传感器完成解锁这个操作就算触摸到了屏幕也没有input事件。而点亮屏幕的动画过程往往伴随着大量进程唤醒，保守的参数会造成显著卡顿。本程序通过监测安卓框架的ActivityManager的活动，ActivityManager在正在交互的APP发生变化、解锁屏幕、锁定屏幕时会非常活跃，由此可以推断是否发生了解锁屏幕事件。通过这一监测，还可以实现在APP切换或者启动时，把APP更早的放到大核心，负载迁移延迟可以降低大约100ms。本功能由事件驱动，几乎没有额外的能耗开销。下图为光学屏幕指纹解锁过程。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yc9559/uperf/master/media/android_am.png&#34; alt=&#34;光学屏幕指纹解锁过程&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;识别屏幕熄灭&lt;/h4&gt; &#xA;&lt;p&gt;在以往的Project WIPE和Perfd-opt中，很多用户借助Scene工具箱实现熄屏后自动切换到省点模式降低一点待机耗电。处于Native层的Uperf无法像Scene工具箱一样收到系统的熄屏广播，而是监听唤醒锁更新操作来识别屏幕是否熄灭。&lt;/p&gt; &#xA;&lt;h4&gt;SfAnalysis&lt;/h4&gt; &#xA;&lt;p&gt;Sfanalysis是一个独立于Uperf的模块，注入到surfaceflinger进行修改，从这个负责Android所有帧渲染提交的进程发出信号，通知Uperf调整性能输出，在观察到卡顿之前就提升性能，真正做到未卜先知，这是所有内核态升频所不能企及的。然而想要她的实现有诸多限制，OEM可以改源码，做内核的可以改内核源码，Uperf为了普适性不能修改源码。如果使用注入方式，surfaceflinger是native进程，使用C++编写，相比system_server这类Java写成的hook位点更少，更不用提不同Android版本的实现还不一样。就算注入成功，由于Android对系统进程设置了很多SELinux规则，防止被注入攻击后取得太多的权限，通知信号也难以发出。绕过了这些限制后，Sfanalysis具有以下功能：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;hook关键调用，推测并向外部传递渲染开始、渲染提交滞后、渲染结束事件&lt;/li&gt; &#xA; &lt;li&gt;自适应动态刷新率、自适应vsync信号滞后间隔&lt;/li&gt; &#xA; &lt;li&gt;在SELinux的权限范围内，向外部传递信号，因此不需要关闭SELinux才能使用&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yc9559/uperf/master/media/sflag.png&#34; alt=&#34;检测到渲染延迟立即拉升CPU频率&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;渲染提交滞后对应的Hint&lt;code&gt;SfLag&lt;/code&gt;与重负载一样，有调用频率限制避免长时间拉升高频，相关参数暂时没有开放更改。&lt;code&gt;SfLag&lt;/code&gt;使用可用次数缓冲池控制调用频率，每满400ms间隔可用次数+1，最大到20次。为了避免不必要的频率拉升，只允许从&lt;code&gt;Tap&lt;/code&gt;、&lt;code&gt;Swipe&lt;/code&gt;、&lt;code&gt;Touch&lt;/code&gt;、&lt;code&gt;Pressed&lt;/code&gt;转移到&lt;code&gt;SfLag&lt;/code&gt;。SfAnalysis正常工作后在日志以如下方式体现：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[13:03:36][I] SfAnalysis: Surfaceflinger analysis connected&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;渲染结束提前结束Hint&lt;/h4&gt; &#xA;&lt;p&gt;即使有了触摸末端速度推算，由于每个设备的滑动阻尼不同，实际的渲染持续时间也大不相同，套用固定值容易导致电量浪费。在内核态boost可以通过在drm/atomic添加hook实现渲染结束后提前结束Boost，本程序也使用类似的方法，在渲染结束后200-300ms内结束Hint的响应，覆盖全程UI渲染过程的同时减少电量浪费。本程序在Hint开始后，使用主动轮询的方式监控安卓的surfaceflinger活动，几乎所有版本的安卓的渲染提交都经过它，同时能耗开销在非常低的0.4ms/100ms（&lt;a href=&#34;mailto:Cortex-A55@1.0g&#34;&gt;Cortex-A55@1.0g&lt;/a&gt;）。&lt;/p&gt; &#xA;&lt;p&gt;使用SfAnalysis渲染结束信号之后，提前结束Hint的延迟可以进一步降低到66ms。 &lt;img src=&#34;https://raw.githubusercontent.com/yc9559/uperf/master/media/render_stop.png&#34; alt=&#34;渲染停止&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;在尽可能缩短渲染结束提前结束的滞后的同时，会导致某些UI响应本身存在滞后的场景发生太多卡顿，因为Hint已经提前退出。此类情况大多发生在浏览信息流点击图片切换到全屏显示图片的过程。因此在提前结束Hint的同时，还需要检测是否有滞后的UI响应，在点击的700ms以内如果重新开始渲染会恢复先前的Hint。使用主动轮询的方式监控安卓的surfaceflinger活动，恢复Hint的延时在100ms以上，使用SfAnalysis渲染开始信号之后延迟可以进一步降低到33ms。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yc9559/uperf/master/media/render_restart.png&#34; alt=&#34;滞后UI渲染开始&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;写入器&lt;/h3&gt; &#xA;&lt;p&gt;写入器基本功能是把目标字符串值写入到&lt;code&gt;sysfs&lt;/code&gt;节点，除此以外，Uperf还内建了多种写入器实现了其他功能和更加紧凑的参数序列。在切换动作时，Uperf会比对与上一动作参数值的差异，跳过写入重复的值来减少自身功耗开销。Uperf支持的&lt;code&gt;knob&lt;/code&gt;有如下几种类型：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;string&lt;/code&gt;，最基础的写入器。效果等同于&lt;code&gt;echo &#34;val&#34; &amp;gt; /path&lt;/code&gt;。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;percluster&lt;/code&gt;，分集群紧凑型写入器。使用配置文件中&lt;code&gt;platform/clusterCpuId&lt;/code&gt;的CPU序号替换&lt;code&gt;path&lt;/code&gt;中的&lt;code&gt;%d&lt;/code&gt;，各个值由逗号分隔，使得按集群做区分的值更加紧凑，改善可读性。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;percpu&lt;/code&gt;，分核心紧凑型写入器。根据配置文件中&lt;code&gt;platform/efficiency&lt;/code&gt;的列表长度，生成CPU序号替换&lt;code&gt;path&lt;/code&gt;中的&lt;code&gt;%d&lt;/code&gt;，各个值由逗号分隔，使得按CPU核心做区分的值更加紧凑，改善可读性。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cpufreq&lt;/code&gt;，&lt;code&gt;percluster&lt;/code&gt;写入器的变种。大部分功能相同，不同的是写入值=设定值*100000，缩短了频率参数序列的长度，以及带有写入失败重试以处理新的最低频率高于原有的最高频率。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cgroup_procs&lt;/code&gt;，Cgroup专用写入器。支持最大4个值，各个值由逗号分隔，设定值为进程名称，Uperf在初始化时会扫描系统所有进程，用匹配到的第一个PID替换它们。一般用于设置系统关键进程到指定的cgroup。由于一个进程的线程可能会动态变化，因此此类写入器会关闭去重。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;uxaffinity&lt;/code&gt;，UxAffinity写入器。在每次正在操作的APP发生切换时，Uperf都会扫描属于顶层APP的cgroup的所有线程，缓存所有UI相关线程的ID。当设定它为1时，把UI相关线程固定到大核心。当设定它为0时，允许UI相关线程使用全部可用核心。在大多数EAS平台上设置&lt;code&gt;schedtune.boost &amp;gt; 0&lt;/code&gt;和&lt;code&gt;schedtune.prefer_idle = 1&lt;/code&gt;即可把任务固定到大核，但是EAS在各个平台的具体实现层次不齐，这个参数组不合适用于所有EAS平台。为了解决这一问题，Uperf主动设置这些关键线程的CPU核心亲和性，适用于所有EAS平台，甚至是HMP平台。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;预调参&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uperf模块为大多数热门硬件平台提供了调参后的配置文件，以尽可能发挥Uperf的优势&lt;/li&gt; &#xA; &lt;li&gt;HMP平台均衡和卡顿版的&lt;code&gt;interactive&lt;/code&gt;参数与HMP负载迁移阈值由改进的&lt;a href=&#34;https://github.com/yc9559/wipe-v2&#34;&gt;Project WIPE v2&lt;/a&gt;提供，费电模式采用固定在功耗拐点的频点提供最稳定持续的性能&lt;/li&gt; &#xA; &lt;li&gt;EAS平台的频点选择综合了SOC功耗模型和常见负载的性能需求，由一套固定策略生成 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;三星、sdm845以及移植的EAS平台，由于缺少关键内核功能采用传统的调参方法，即普通场景不提供过高的性能容量&lt;/li&gt; &#xA;   &lt;li&gt;sdm845以后的高通EAS平台，采用调整后性能需求-性能容量模型，见下图&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yc9559/uperf/master/media/adjusted_demand_capacity_relation.png&#34; alt=&#34;调整后性能需求-性能容量模型&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;假设系统负载只由单个任务贡献。EAS默认的方式由于&lt;code&gt;schedutil&lt;/code&gt;总是预留25%性能余量，而SOC的不同频点的能耗比表现不同，越接近最大频率能耗比越低，EAS的默认策略会导致较高负载时最大频率占比偏大。从现实负载变化的规律来看，25%性能余量并不总是够用，负载较低时容易产生大的波动，负载较高时性能需求反而是相对稳定的。从SOC的功耗模型和现实负载变化的规律来看，负载较低时由于波动值的相对百分比较大应该留出更大的性能余量，SOC的低频段一般能耗比差别不大，功耗负面影响不大；负载较高时由于波动值的相对百分比较小应该留出较小的性能余量，SOC的高频段的每个频点之间的能耗比差别比较明显，功耗正面影响较大。&lt;/p&gt; &#xA;&lt;h3&gt;外围改进&lt;/h3&gt; &#xA;&lt;p&gt;本模块除了Uperf本体以及SfAnalysis注入，还配合一些外围的改进共同改进用户体验。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uperf启动前其他参数统一化，包括： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;schedtune置零&lt;/li&gt; &#xA;   &lt;li&gt;使用CFQ调速器，降低多任务运行时前台任务的IO延迟&lt;/li&gt; &#xA;   &lt;li&gt;降低非前台APP的IO带宽占用权重&lt;/li&gt; &#xA;   &lt;li&gt;设置与UI性能密切相关的系统进程到顶层APP的cgroup分组&lt;/li&gt; &#xA;   &lt;li&gt;固定于过渡动画相关的线程到大核&lt;/li&gt; &#xA;   &lt;li&gt;减少大部分传感器线程在大核的唤醒&lt;/li&gt; &#xA;   &lt;li&gt;禁用大多数内核态和用户态boost、热插拔&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;interactive&lt;/code&gt;和&lt;code&gt;schedutil&lt;/code&gt;调速器、&lt;code&gt;core_ctl&lt;/code&gt;、任务调度器外围参数一致化&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;为指纹识别提供最大性能(EAS平台)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yc9559/uperf/master/media/fingerprint.png&#34; alt=&#34;为指纹识别提供最大性能&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;自定义配置文件&lt;/h2&gt; &#xA;&lt;p&gt;本项目已经为大多数热门硬件平台提供了调参后的Uperf配置文件，但总有一些情况预调参的配置不适用于你的软硬件平台，例如冷门的硬件平台、自定义的内核。此外，也有自定义现有预调参配置文件的需求，例如调高交互时的最低CPU频率、增加GPU频率范围调整。在Uperf设计之初便考虑到了这类需求，开放几乎所有的可调参数，并且在配置文件更改保存后自动重新加载，改善在手机端调试参数的效率。Magisk模块使用的配置文件位于&lt;code&gt;/sdcard/yc/uperf/cfg_uperf.json&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;h3&gt;元信息&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;meta&#34;: {&#xA;    &#34;name&#34;: &#34;sdm855/sdm855+ v20200516&#34;,&#xA;    &#34;author&#34;: &#34;yc@coolapk&#34;,&#xA;    &#34;features&#34;: &#34;touch cpuload render standby sfanalysis&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;字段名&lt;/th&gt; &#xA;   &lt;th&gt;数据类型&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;name&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;配置文件的名称&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;author&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;配置文件的作者信息&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;features&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;配置文件支持的功能列表，目前是保留字段不起作用&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;code&gt;name&lt;/code&gt;与&lt;code&gt;author&lt;/code&gt;在日志以如下方式体现：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[13:03:33][I] CfgMgr: Using [sdm855/sdm855+ v20200516] by [yc@coolapk]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;全局参数&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;common&#34;: {&#xA;    &#34;switchInode&#34;: &#34;/sdcard/yc/uperf/cur_powermode&#34;,&#xA;    &#34;verboseLog&#34;: false,&#xA;    &#34;uxAffinity&#34;: true,&#xA;    &#34;stateTransThd&#34;: {&#xA;        &#34;heavyLoad&#34;: 1500,&#xA;        &#34;idleLoad&#34;: 1000,&#xA;        &#34;requestBurstSlack&#34;: 3000&#xA;    },&#xA;    &#34;dispatch&#34;: [&#xA;        {&#xA;            &#34;hint&#34;: &#34;None&#34;,&#xA;            &#34;action&#34;: &#34;normal&#34;,&#xA;            &#34;maxDuration&#34;: 0&#xA;        },&#xA;        {&#xA;            &#34;hint&#34;: &#34;Tap&#34;,&#xA;            &#34;action&#34;: &#34;interaction&#34;,&#xA;            &#34;maxDuration&#34;: 1500&#xA;        },&#xA;        ...&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;字段名&lt;/th&gt; &#xA;   &lt;th&gt;数据类型&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;switchInode&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;接收性能模式切换的inode节点&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;verboseLog&lt;/td&gt; &#xA;   &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;td&gt;开启详细日志，用于调试Hint切换&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;uxAffinity&lt;/td&gt; &#xA;   &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;td&gt;开启UX线程自动设置，固定高优先级的UX线程到大核，并限制低优先级线程的需求响应&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;heavyLoad&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;进入重负载的系统负载阈值，详见&lt;a href=&#34;https://raw.githubusercontent.com/yc9559/uperf/master/#%E9%87%8D%E8%B4%9F%E8%BD%BD%E8%B7%9F%E8%B8%AA%E4%B8%8E%E9%99%90%E5%88%B6&#34;&gt;重负载跟踪与限制&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;idleLoad&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;退出重负载的系统负载阈值，详见&lt;a href=&#34;https://raw.githubusercontent.com/yc9559/uperf/master/#%E9%87%8D%E8%B4%9F%E8%BD%BD%E8%B7%9F%E8%B8%AA%E4%B8%8E%E9%99%90%E5%88%B6&#34;&gt;重负载跟踪与限制&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;requestBurstSlack&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;单位毫秒，响应新的重负载请求前的延时，详见&lt;a href=&#34;https://raw.githubusercontent.com/yc9559/uperf/master/#%E9%87%8D%E8%B4%9F%E8%BD%BD%E8%B7%9F%E8%B8%AA%E4%B8%8E%E9%99%90%E5%88%B6&#34;&gt;重负载跟踪与限制&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hint&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;对应到Uperf内部支持的Hint类型&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;action&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;绑定的动作名称，可以自定义&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;maxDuration&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;单位毫秒，动作保持的最大时长&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;在Uperf启动时会读取&lt;code&gt;switchInode&lt;/code&gt;对应路径的文件获取默认性能模式,在日志以如下方式体现：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[13:03:33][I] CfgMgr: Read default powermode from /sdcard/yc/uperf/cur_powermode&#xA;[13:03:33][I] CfgMgr: Powermode &#34;(null)&#34; -&amp;gt; &#34;balance&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;switchInode&lt;/code&gt;对应路径的文件，监听新模式名称的写入完成模式切换：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;echo &#34;powersave&#34; &amp;gt; /sdcard/yc/uperf/cur_powermode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在日志以如下方式体现：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[13:06:45][I] CfgMgr: Powermode &#34;balance&#34; -&amp;gt; &#34;powersave&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;dispatch&lt;/code&gt;的绑定关系，在日志以如下方式体现：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[13:03:33][I] CfgMgr: Bind HintNone -&amp;gt; normal&#xA;[13:03:33][I] CfgMgr: Bind HintTap -&amp;gt; interaction&#xA;[13:03:33][I] CfgMgr: Bind HintSwipe -&amp;gt; interaction&#xA;[13:03:33][I] CfgMgr: Bind HintHeavyLoad -&amp;gt; heavyLoad&#xA;[13:03:33][I] CfgMgr: Bind HintAndroidAM -&amp;gt; amSwitch&#xA;[13:03:33][I] CfgMgr: Bind HintStandby -&amp;gt; standby&#xA;[13:03:33][I] CfgMgr: Bind HintSflag -&amp;gt; sfLag&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;UxAffinity&lt;/code&gt;和&lt;code&gt;SfAnalysis&lt;/code&gt;这两项功能在日志以如下方式体现：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[13:03:33][I] CfgMgr: UX affinity enabled&#xA;...&#xA;[13:03:36][I] SfAnalysis: Surfaceflinger analysis connected&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;平台信息&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;platform&#34;: {&#xA;    &#34;clusterCpuId&#34;: [&#xA;        0,&#xA;        4,&#xA;        7&#xA;    ],&#xA;    &#34;efficiency&#34;: [&#xA;        120,&#xA;        120,&#xA;        120,&#xA;        120,&#xA;        220,&#xA;        220,&#xA;        220,&#xA;        240&#xA;    ],&#xA;    &#34;knobs&#34;: [&#xA;        {&#xA;            &#34;name&#34;: &#34;cpuFreqMax&#34;,&#xA;            &#34;path&#34;: &#34;/sys/devices/system/cpu/cpu%d/cpufreq/scaling_max_freq&#34;,&#xA;            &#34;type&#34;: &#34;cpufreq&#34;,&#xA;            &#34;enable&#34;: true&#xA;        },&#xA;        ...&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;字段名&lt;/th&gt; &#xA;   &lt;th&gt;数据类型&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;clusterCpuId&lt;/td&gt; &#xA;   &lt;td&gt;int list&lt;/td&gt; &#xA;   &lt;td&gt;多集群CPU每个集群的首个CPU ID&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;efficiency&lt;/td&gt; &#xA;   &lt;td&gt;int list&lt;/td&gt; &#xA;   &lt;td&gt;每个CPU核心的的相对同频性能，以&lt;a href=&#34;mailto:Cortex-A53@1.0g&#34;&gt;Cortex-A53@1.0g&lt;/a&gt;为100，顺序与CPU ID对应&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;knobs&lt;/td&gt; &#xA;   &lt;td&gt;object list&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sysfs&lt;/code&gt;节点列表&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;code&gt;knobs&lt;/code&gt;中的每个对象为&lt;code&gt;knob&lt;/code&gt;，有以下属性：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;字段名&lt;/th&gt; &#xA;   &lt;th&gt;数据类型&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;name&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sysfs&lt;/code&gt;节点名称&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;path&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sysfs&lt;/code&gt;节点路径&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;type&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sysfs&lt;/code&gt;节点类型，详见&lt;a href=&#34;https://raw.githubusercontent.com/yc9559/uperf/master/#%E5%86%99%E5%85%A5%E5%99%A8&#34;&gt;写入器&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;enable&lt;/td&gt; &#xA;   &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;td&gt;是否启用，方便调试时一键禁用&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;当&lt;code&gt;enable&lt;/code&gt;字段为false时，在日志以如下方式体现：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[13:03:33][I] CfgMgr: Ignored root/platform/knobs/topCSProcs [Disabled by config file]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;当&lt;code&gt;path&lt;/code&gt;字段对应的&lt;code&gt;sysfs&lt;/code&gt;节点不存在或者不可写入时，在日志以如下方式体现：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[13:03:33][I] CfgMgr: Ignored root/platform/knobs/bigHifreq [Path is not writable]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;性能模式参数&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;powermodes&#34;: [&#xA;    {&#xA;        &#34;name&#34;: &#34;balance&#34;,&#xA;        &#34;actions&#34;: {&#xA;            &#34;interaction&#34;: {&#xA;                &#34;cpuFreqMax&#34;: &#34;18,18,22&#34;,&#xA;                &#34;cpuFreqMin&#34;: &#34;10,10,8&#34;,&#xA;                &#34;cpuLoadBoost&#34;: &#34;0,0,0,0,0,0,0,0&#34;,&#xA;                &#34;fgCpus&#34;: &#34;0-3&#34;,&#xA;                &#34;topCSProcs&#34;: &#34;com.android.systemui,system_server&#34;,&#xA;                &#34;fgSTProcs&#34;: &#34;system_server&#34;,&#xA;                &#34;ddrBwMax&#34;: &#34;6000&#34;,&#xA;                &#34;ddrBwMin&#34;: &#34;2500&#34;,&#xA;                &#34;uxAffinity&#34;: &#34;1&#34;&#xA;            },&#xA;            ...&#xA;        },&#xA;        ...&#xA;    },&#xA;    ...&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;字段名&lt;/th&gt; &#xA;   &lt;th&gt;数据类型&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;name&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;可自定义，用于备份调参的多个版本&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;动作名称&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;与&lt;code&gt;common/dispatch&lt;/code&gt;中定义的动作名对应&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;knob&lt;/code&gt;名称&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;与&lt;code&gt;platform/knobs&lt;/code&gt;中定义的&lt;code&gt;sysfs&lt;/code&gt;节点名称&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;knob&lt;/code&gt;值&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;值的格式详见&lt;a href=&#34;https://raw.githubusercontent.com/yc9559/uperf/master/#%E5%86%99%E5%85%A5%E5%99%A8&#34;&gt;写入器&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;一个动作应该为所有在&lt;code&gt;platform/knobs&lt;/code&gt;定义的&lt;code&gt;knob&lt;/code&gt;设置值。某些时候需要故意跳过某些值的设定，或者复用大部分前一动作的设定值，可以省略部分&lt;code&gt;knob&lt;/code&gt;设置值，但不能全部。Uperf在加载配置文件时会提示哪些值没有设定会被跳过，在日志以如下方式体现：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[13:03:33][I] CfgMgr: Ignored knobs in action root/powermodes/balance/actions/amSwitch:&#xA;[13:03:33][I] CfgMgr: cpuFreqMin llccBwMax llccBwMin ddrBwMax ddrBwMin l3LatBig ddrLatBig &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;示例&lt;/h3&gt; &#xA;&lt;p&gt;利用Uperf为交互和重负载添加关闭UFS节能，以此降低性能关键场景的IO瓶颈问题。&lt;/p&gt; &#xA;&lt;p&gt;UFS节能开关的&lt;code&gt;sysfs&lt;/code&gt;节点路径为&lt;code&gt;/sys/devices/platform/soc/1d84000.ufshc/clkgate_enable&lt;/code&gt;，接收字符串类型写入，写入&#34;0&#34;为关闭UFS节能，写入&#34;1&#34;为开启UFS节能，把这一节点取名为&lt;code&gt;ufsClkGateEnable&lt;/code&gt;。在配置文件添加如下文本完成&lt;code&gt;knob&lt;/code&gt;定义：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;platform&#34;: {&#xA;    ...&#xA;    &#34;knobs&#34;: [&#xA;        ...&#xA;        {&#xA;            &#34;name&#34;: &#34;ufsClkGateEnable&#34;,&#xA;            &#34;path&#34;: &#34;/sys/devices/platform/soc/1d84000.ufshc/clkgate_enable&#34;,&#xA;            &#34;type&#34;: &#34;string&#34;,&#xA;            &#34;enable&#34;: true,&#xA;            &#34;note&#34;: &#34;UFS时钟门开关&#34;&#xA;        },&#xA;        ...&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;根据&lt;a href=&#34;https://raw.githubusercontent.com/yc9559/uperf/master/#%E6%83%85%E6%99%AF%E8%AF%86%E5%88%AB&#34;&gt;情景识别&lt;/a&gt;中的定义，交互的hint名称为&lt;code&gt;Tap&lt;/code&gt;和&lt;code&gt;Swipe&lt;/code&gt;，重负载的hint名称为&lt;code&gt;HeavyLoad&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;dispatch&#34;: [&#xA;    ...&#xA;    {&#xA;        &#34;hint&#34;: &#34;Tap&#34;,&#xA;        &#34;action&#34;: &#34;interaction&#34;,&#xA;        &#34;maxDuration&#34;: 1500&#xA;    },&#xA;    {&#xA;        &#34;hint&#34;: &#34;Swipe&#34;,&#xA;        &#34;action&#34;: &#34;interaction&#34;,&#xA;        &#34;maxDuration&#34;: 3000&#xA;    },&#xA;    {&#xA;        &#34;hint&#34;: &#34;HeavyLoad&#34;,&#xA;        &#34;action&#34;: &#34;heavyLoad&#34;,&#xA;        &#34;maxDuration&#34;: 2000&#xA;    },&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;根据配置文件内定义的hint与动作的绑定关系，需要给动作&lt;code&gt;interaction&lt;/code&gt;和&lt;code&gt;heavyLoad&lt;/code&gt;设置关闭UFS节能，其他动作保持开启UFS节能。在配置文件添加如下文本完成动作定义：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;powermodes&#34;: [&#xA;    {&#xA;        &#34;name&#34;: &#34;balance&#34;,&#xA;        &#34;actions&#34;: {&#xA;            &#34;normal&#34;: {&#xA;                ...&#xA;                &#34;ufsClkGateEnable&#34;: &#34;1&#34;,&#xA;                ...&#xA;            },&#xA;            &#34;interaction&#34;: {&#xA;                ...&#xA;                &#34;ufsClkGateEnable&#34;: &#34;0&#34;,&#xA;                ...&#xA;            },&#xA;            &#34;heavyLoad&#34;: {&#xA;                ...&#xA;                &#34;ufsClkGateEnable&#34;: &#34;0&#34;,&#xA;                ...&#xA;            },&#xA;            &#34;amSwitch&#34;: {&#xA;                ...&#xA;            },&#xA;            &#34;standby&#34;: {&#xA;                ...&#xA;                &#34;ufsClkGateEnable&#34;: &#34;1&#34;,&#xA;                ...&#xA;            },&#xA;            &#34;sfLag&#34;: {&#xA;                ...&#xA;            },&#xA;        },&#xA;    },&#xA;    {&#xA;        &#34;name&#34;: &#34;powersave&#34;,&#xA;        &#34;actions&#34;: {&#xA;            &#34;normal&#34;: {&#xA;                ...&#xA;                &#34;ufsClkGateEnable&#34;: &#34;1&#34;,&#xA;                ...&#xA;            },&#xA;            ...&#xA;        },&#xA;    },&#xA;    ...&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;更改配置文件后保存，Uperf会自动创建新的子进程加载新的配置文件，如果新的配置文件格式存在问题，会终止新的子进程保留老的子进程。接下来验证配置文件中设定动作是否能如期执行，对应路径的值是否发生更改。&lt;/p&gt; &#xA;&lt;h2&gt;致谢&lt;/h2&gt; &#xA;&lt;p&gt;感谢以下用户或项目的源码对本项目的帮助：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AndroidDumps&#34;&gt;@AndroidDumps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shunix/TinyInjector&#34;&gt;TinyInjector&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iqiyi/xHook&#34;&gt;xHook&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cjybyjk&#34;&gt;@cjybyjk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SatySatsZB&#34;&gt;@SatySatsZB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/osm0sis&#34;&gt;@osm0sis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;@YMJ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;感谢以下用户的测试反馈和错误定位：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;@HEX_Stan(coolapk)&lt;/li&gt; &#xA; &lt;li&gt;@僞裝灬(coolapk)&lt;/li&gt; &#xA; &lt;li&gt;@Yoooooo(coolapk)&lt;/li&gt; &#xA; &lt;li&gt;@我愿你安i(coolapk)&lt;/li&gt; &#xA; &lt;li&gt;@鹰雏(coolapk)&lt;/li&gt; &#xA; &lt;li&gt;@yishisanren(coolapk)&lt;/li&gt; &#xA; &lt;li&gt;@asd821385525(coolapk)&lt;/li&gt; &#xA; &lt;li&gt;@倚楼醉听曲(coolapk)&lt;/li&gt; &#xA; &lt;li&gt;@NepPoseidon(coolapk)&lt;/li&gt; &#xA; &lt;li&gt;@寻光丿STLD(coolapk)&lt;/li&gt; &#xA; &lt;li&gt;@比企谷の雪乃(coolapk)&lt;/li&gt; &#xA; &lt;li&gt;@非洲咸鱼(coolapk)&lt;/li&gt; &#xA; &lt;li&gt;@哔哩哔哩弹慕网(coolapk)&lt;/li&gt; &#xA; &lt;li&gt;@我心飞翔的安(coolapk)&lt;/li&gt; &#xA; &lt;li&gt;@浏泽仔(coolapk)&lt;/li&gt; &#xA; &lt;li&gt;@〇MH1031(coolapk)&lt;/li&gt; &#xA; &lt;li&gt;@今天我头条了吗(coolapk)&lt;/li&gt; &#xA; &lt;li&gt;@瓜瓜皮(coolapk)&lt;/li&gt; &#xA; &lt;li&gt;@Universes(coolapk)&lt;/li&gt; &#xA; &lt;li&gt;@Superpinkcat(coolapk)&lt;/li&gt; &#xA; &lt;li&gt;@asto18089(coolapk)&lt;/li&gt; &#xA; &lt;li&gt;@顺其自然的肥肉(coolapk)&lt;/li&gt; &#xA; &lt;li&gt;@酷斗吧(coolapk)&lt;/li&gt; &#xA; &lt;li&gt;@何为永恒(coolapk)&lt;/li&gt; &#xA; &lt;li&gt;@我为啥叫这个(coolapk)&lt;/li&gt; &#xA; &lt;li&gt;@goddard(coolapk)&lt;/li&gt; &#xA; &lt;li&gt;@正果sss(coolapk)&lt;/li&gt; &#xA; &lt;li&gt;@Cowen(coolapk)&lt;/li&gt; &#xA; &lt;li&gt;@瞬光飞翔(coolapk)&lt;/li&gt; &#xA; &lt;li&gt;@kuiot(coolapk)&lt;/li&gt; &#xA; &lt;li&gt;@常凯申将军(coolapk)&lt;/li&gt; &#xA; &lt;li&gt;emptybot08(github)&lt;/li&gt; &#xA; &lt;li&gt;ahzhi(github)&lt;/li&gt; &#xA; &lt;li&gt;Saumer7(github)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;捐赠&lt;/h2&gt; &#xA;&lt;p&gt;如果你实在愿意，下面是感谢云讨饭通道(备注写上你的ID和来源平台)：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yc9559/uperf/master/media/alipay-qr.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SuLingGG/OpenWrt-Rpi</title>
    <updated>2022-07-11T01:54:14Z</updated>
    <id>tag:github.com,2022-07-11:/SuLingGG/OpenWrt-Rpi</id>
    <link href="https://github.com/SuLingGG/OpenWrt-Rpi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Raspberry Pi &amp; NanoPi R2S/R4S &amp; G-Dock &amp; x86 OpenWrt Compile Project. (Based on Github Action / Daily Update)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://github.com/SuLingGG/OpenWrt-Rpi&#34;&gt;OpenWrt-Rpi&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;项目介绍&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;提供适配于 树莓派全系、Rockchip 平台、ipq40xx 平台以及 x86 平台设备的 OpenWrt 固件&lt;/li&gt; &#xA; &lt;li&gt;包含丰富的 OpenWrt 原版 LuCI 插件及社区 LuCI 插件&lt;/li&gt; &#xA; &lt;li&gt;固件跟随源码更新自动编译，确保获得最新体验&lt;/li&gt; &#xA; &lt;li&gt;预配置本地 kmod 软件源，远离 kmod 依赖冲突&lt;/li&gt; &#xA; &lt;li&gt;集成绝大多数有线、无线、3G / 4G 网卡驱动，无需额外安装&lt;/li&gt; &#xA; &lt;li&gt;预置最新版 Clash 核心、预置 oh-my-zsh，最大程度减少配置成本&lt;/li&gt; &#xA; &lt;li&gt;提供全格式固件 / 文件 (ext4/squashfs/ubi/initramfs/rootfs)&lt;/li&gt; &#xA; &lt;li&gt;对于高级用户，提供完整的固件/软件包构建工具 (imagebuilder / sdk / toolchain)&lt;/li&gt; &#xA; &lt;li&gt;如果你想捐助此项目，请移步 &lt;a href=&#34;https://github.com/SuLingGG/OpenWrt-Mini/raw/main/FUNDING.md&#34;&gt;FUNDING.md&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;文档&lt;/h2&gt; &#xA;&lt;p&gt;固件 下载安装 / 初始设置 / 软件包安装说明 等信息请看文档:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://doc.openwrt.cc/2-OpenWrt-Rpi&#34;&gt;https://doc.openwrt.cc/2-OpenWrt-Rpi&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;固件预览&lt;/h2&gt; &#xA;&lt;h3&gt;主界面:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://ae05.alicdn.com/kf/H6814822fa93d4246837bea1edcec6d23j.png&#34; alt=&#34;主界面&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;内置功能:&lt;/h3&gt; &#xA;&lt;p&gt;(建议保存至本地放大查看)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://ae02.alicdn.com/kf/Hf29f2d94339d4188bbdde7f3131b500af.png&#34; alt=&#34;内置功能&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;鸣谢&lt;/h2&gt; &#xA;&lt;p&gt;感谢以下项目 / 厂商:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Github Actions&lt;/th&gt; &#xA;   &lt;th&gt;OpenWrt 源码项目&lt;/th&gt; &#xA;   &lt;th&gt;OpenWrt 构建项目&lt;/th&gt; &#xA;   &lt;th&gt;Action 项目&lt;/th&gt; &#xA;   &lt;th&gt;云服务厂商&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/features/actions&#34;&gt;Github Actions&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/openwrt/openwrt/&#34;&gt;openwrt/openwrt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://git.openwrt.org/?p=buildbot.git;a=summary&#34;&gt;openwrt/buildbot&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ncipollo/release-action&#34;&gt;ncipollo/release-action&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://acloud.net/&#34;&gt;Acloud&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/coolsnowwolf/lede&#34;&gt;coolsnowwolf/lede&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/P3TERX/Actions-OpenWrt&#34;&gt;P3TERX/Actions-OpenWrt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mknejp/delete-release-assets&#34;&gt;mknejp/delete-release-assets&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.cloudflare.com&#34;&gt;Cloudflare&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/immortalwrt/immortalwrt&#34;&gt;immortalwrt/immortalwrt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/immortalwrt/opde&#34;&gt;immortalwrt/opde&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GitRML/delete-workflow-runs&#34;&gt;GitRML/delete-workflow-runs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.backblaze.com/&#34;&gt;BackBlaze&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/aparcar/openwrt&#34;&gt;aparcar/openwrt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/easingthemes/ssh-deploy&#34;&gt;easingthemes/ssh-deploy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hosthatch.com/&#34;&gt;HostHatch&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/klever1988/nanopi-openwrt&#34;&gt;klever1988/nanopi-openwrt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/easimon/maximize-build-space&#34;&gt;easimon/maximize-build-space&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>