<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-13T01:36:34Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Kicksecure/security-misc</title>
    <updated>2024-03-13T01:36:34Z</updated>
    <id>tag:github.com,2024-03-13:/Kicksecure/security-misc</id>
    <link href="https://github.com/Kicksecure/security-misc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Kernel Hardening; Protect Linux User Accounts against Brute Force Attacks; Improve Entropy Collection; Strong Linux User Account Separation; Enhances Misc Security Settings - https://www.kicksecure.com/wiki/Security-misc&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Enhances miscellaneous security settings&lt;/h1&gt; &#xA;&lt;h2&gt;Kernel hardening&lt;/h2&gt; &#xA;&lt;p&gt;This section is inspired by the Kernel Self Protection Project (KSPP). It implements all recommended Linux kernel settings by the KSPP and many more.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kernsec.org/wiki/index.php/Kernel_Self_Protection_Project&#34;&gt;https://kernsec.org/wiki/index.php/Kernel_Self_Protection_Project&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;sysctl&lt;/h3&gt; &#xA;&lt;p&gt;sysctl settings are configured via the &lt;code&gt;/etc/sysctl.d/30_security-misc.conf&lt;/code&gt; configuration file.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;A kernel pointer points to a specific location in kernel memory. These can be very useful in exploiting the kernel so they are restricted to &lt;code&gt;CAP_SYSLOG&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The kernel logs are restricted to &lt;code&gt;CAP_SYSLOG&lt;/code&gt; as they can often leak sensitive information such as kernel pointers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;ptrace()&lt;/code&gt; system call is restricted to &lt;code&gt;CAP_SYS_PTRACE&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;eBPF is restricted to &lt;code&gt;CAP_BPF&lt;/code&gt; (&lt;code&gt;CAP_SYS_ADMIN&lt;/code&gt; on kernel versions prior to 5.8) and JIT hardening techniques such as constant blinding are enabled.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Restricts performance events to &lt;code&gt;CAP_PERFMON&lt;/code&gt; (&lt;code&gt;CAP_SYS_ADMIN&lt;/code&gt; on kernel versions prior to 5.8).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Restricts loading line disciplines to &lt;code&gt;CAP_SYS_MODULE&lt;/code&gt; to prevent unprivileged attackers from loading vulnerable line disciplines with the &lt;code&gt;TIOCSETD&lt;/code&gt; ioctl which has been abused in a number of exploits before.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Restricts the &lt;code&gt;userfaultfd()&lt;/code&gt; syscall to &lt;code&gt;CAP_SYS_PTRACE&lt;/code&gt; as &lt;code&gt;userfaultfd()&lt;/code&gt; is often abused to exploit use-after-free flaws.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Kexec is disabled as it can be used to load a malicious kernel and gain arbitrary code execution in kernel mode.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Randomises the addresses for mmap base, heap, stack, and VDSO pages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Prevents unintentional writes to attacker-controlled files.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Prevents common symlink and hardlink TOCTOU races.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Disables SysRq key completely.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Therefore Secure Attention Key (SAK) cannot be used.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.kicksecure.com/wiki/SysRq&#34;&gt;https://www.kicksecure.com/wiki/SysRq&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The kernel is only allowed to swap if it is absolutely necessary. This prevents writing potentially sensitive contents of memory to disk.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;TCP timestamps are disabled as it can allow detecting the system time.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enforces the logging of martian packets, those with a source address which is blatantly wrong.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set coredump file name based on core_pattern value instead of the default of naming it &#39;core&#39;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;mmap ASLR&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The bits of entropy used for mmap ASLR are maxed out via &lt;code&gt;/usr/libexec/security-misc/mmap-rnd-bits&lt;/code&gt; (set to the values of &lt;code&gt;CONFIG_ARCH_MMAP_RND_BITS_MAX&lt;/code&gt; and &lt;code&gt;CONFIG_ARCH_MMAP_RND_COMPAT_BITS_MAX&lt;/code&gt; that the kernel was built with), therefore improving its effectiveness.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Boot parameters&lt;/h3&gt; &#xA;&lt;p&gt;Boot parameters are outlined in configuration files located in the &lt;code&gt;etc/default/grub.d/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Slab merging is disabled which significantly increases the difficulty of heap exploitation by preventing overwriting objects from merged caches and by making it harder to influence slab cache layout.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Memory zeroing at allocation and free time is enabled to mitigate some use-after-free vulnerabilities and erase sensitive information in memory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Page allocator freelist randomization is enabled.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Kernel Page Table Isolation is enabled to mitigate Meltdown and increase KASLR effectiveness.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;vsyscalls are disabled as they are obsolete, are at fixed addresses and thus, are a potential target for ROP.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The kernel panics on oopses to thwart certain kernel exploits.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enables randomisation of the kernel stack offset on syscall entries.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;All mitigations for known CPU vulnerabilities are enabled and SMT is disabled.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;IOMMU is enabled to prevent DMA attacks along with strict enforcement of IOMMU TLB invalidation so devices will never be able to access stale data contents.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Distrust the &#39;randomly&#39; generated CPU and bootloader seeds.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Kernel Modules&lt;/h3&gt; &#xA;&lt;h4&gt;Kernel Module Signature Verification&lt;/h4&gt; &#xA;&lt;p&gt;Not yet due to issues:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forums.whonix.org/t/enforce-kernel-module-software-signature-verification-module-signing-disallow-kernel-module-loading-by-default/7880/64&#34;&gt;https://forums.whonix.org/t/enforce-kernel-module-software-signature-verification-module-signing-disallow-kernel-module-loading-by-default/7880/64&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dell/dkms/issues/359&#34;&gt;https://github.com/dell/dkms/issues/359&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/etc/default/grub.d/40_only_allow_signed_modules.cfg&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Disables the loading of new modules to the kernel after the fact&lt;/h4&gt; &#xA;&lt;p&gt;Not yet due to issues:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Kicksecure/security-misc/pull/152&#34;&gt;https://github.com/Kicksecure/security-misc/pull/152&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A systemd service dynamically sets the kernel parameter &lt;code&gt;modules_disabled&lt;/code&gt; to 1, preventing new modules from being loaded. Since this isn&#39;t configured directly within systemctl, it does not break the loading of legitimate and necessary modules for the user, like drivers etc., given they are plugged in on startup.&lt;/p&gt; &#xA;&lt;h4&gt;Disables and blacklists kernel modules&lt;/h4&gt; &#xA;&lt;p&gt;Certain kernel modules are disabled and blacklisted by default to reduce attack surface via the &lt;code&gt;/etc/modprobe.d/30_security-misc.conf&lt;/code&gt; configuration file.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Deactivates Netfilter&#39;s connection tracking helper - this module increases kernel attack surface by enabling superfluous functionality such as IRC parsing in the kernel. Hence, this feature is disabled.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Thunderbolt and numerous FireWire kernel modules are also disabled as they are often vulnerable to DMA attacks.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The MSR kernel module is disabled to prevent CPU MSRs from being abused to write to arbitrary memory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Uncommon network protocols are blacklisted. This includes:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;DCCP - Datagram Congestion Control Protocol&lt;/li&gt; &#xA;   &lt;li&gt;SCTP - Stream Control Transmission Protocol&lt;/li&gt; &#xA;   &lt;li&gt;RDS - Reliable Datagram Sockets&lt;/li&gt; &#xA;   &lt;li&gt;TIPC - Transparent Inter-process Communication&lt;/li&gt; &#xA;   &lt;li&gt;HDLC - High-Level Data Link Control&lt;/li&gt; &#xA;   &lt;li&gt;AX25 - Amateur X.25&lt;/li&gt; &#xA;   &lt;li&gt;NetRom&lt;/li&gt; &#xA;   &lt;li&gt;X25&lt;/li&gt; &#xA;   &lt;li&gt;ROSE&lt;/li&gt; &#xA;   &lt;li&gt;DECnet&lt;/li&gt; &#xA;   &lt;li&gt;Econet&lt;/li&gt; &#xA;   &lt;li&gt;af_802154 - IEEE 802.15.4&lt;/li&gt; &#xA;   &lt;li&gt;IPX - Internetwork Packet Exchange&lt;/li&gt; &#xA;   &lt;li&gt;AppleTalk&lt;/li&gt; &#xA;   &lt;li&gt;PSNAP - Subnetwork Access Protocol&lt;/li&gt; &#xA;   &lt;li&gt;p8023 - Novell raw IEEE 802.3&lt;/li&gt; &#xA;   &lt;li&gt;p8022 - IEEE 802.2&lt;/li&gt; &#xA;   &lt;li&gt;CAN - Controller Area Network&lt;/li&gt; &#xA;   &lt;li&gt;ATM&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Disables a large array of uncommon file systems and network file systems that reduces the attack surface especially against legacy approaches.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The vivid kernel module is only required for testing and has been the cause of multiple vulnerabilities so it is disabled.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Provides some disabling of the interface between the &lt;a href=&#34;https://www.kernel.org/doc/html/latest/driver-api/mei/mei.html&#34;&gt;Intel Management Engine (ME)&lt;/a&gt; and the OS.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Incorporates much of &lt;a href=&#34;https://git.launchpad.net/ubuntu/+source/kmod/tree/debian/modprobe.d?h=ubuntu/disco&#34;&gt;Ubuntu&#39;s&lt;/a&gt; default blacklist of modules to be blocked from automatically loading. However, they are still permitted to load.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Blocks automatic loading of the modules needed to use of CD-ROM devices by default. Not completely disabled yet.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Other&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A systemd service clears the System.map file on boot as these contain kernel pointers. The file is completely overwritten with zeroes to ensure it cannot be recovered. See:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;/etc/kernel/postinst.d/30_remove-system-map&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;/lib/systemd/system/remove-system-map.service&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;/usr/libexec/security-misc/remove-system.map&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Coredumps are disabled as they may contain important information such as encryption keys or passwords. See:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;/etc/security/limits.d/30_security-misc.conf&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;/etc/sysctl.d/30_security-misc.conf&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;/lib/systemd/coredump.conf.d/30_security-misc.conf&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An initramfs hook sets the sysctl values in &lt;code&gt;/etc/sysctl.conf&lt;/code&gt; and &lt;code&gt;/etc/sysctl.d&lt;/code&gt; before init is executed so sysctl hardening is enabled as early as possible. This is implemented for &lt;code&gt;initramfs-tools&lt;/code&gt; only because this is not needed for &lt;code&gt;dracut&lt;/code&gt; because &lt;code&gt;dracut&lt;/code&gt; does that by default, at least on &lt;code&gt;systemd&lt;/code&gt; enabled systems. Not researched for non-&lt;code&gt;systemd&lt;/code&gt; systems by the author of this part of the readme.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Network hardening&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;TCP syncookies are enabled to prevent SYN flood attacks.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ICMP redirect acceptance, ICMP redirect sending, source routing and IPv6 router advertisements are disabled to prevent man-in-the-middle attacks.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The kernel is configured to ignore all ICMP requests to avoid Smurf attacks, make the device more difficult to enumerate on the network and prevent clock fingerprinting through ICMP timestamps.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;RFC1337 is enabled to protect against time-wait assassination attacks by dropping RST packets for sockets in the time-wait state.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Reverse path filtering is enabled to prevent IP spoofing and mitigate vulnerabilities such as CVE-2019-14899.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Unlike version 4, IPv6 addresses can provide information not only about the originating network, but also the originating device. We prevent this from happening by enabling the respective privacy extensions for IPv6.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In addition, we deny the capability to track the originating device in the network at all, by using randomized MAC addresses per connection per default.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/usr/lib/NetworkManager/conf.d/80_ipv6-privacy.conf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/usr/lib/NetworkManager/conf.d/80_randomize-mac.conf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/usr/lib/systemd/networkd.conf.d/80_ipv6-privacy-extensions.conf&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Bluetooth Hardening&lt;/h2&gt; &#xA;&lt;h3&gt;Bluetooth Status: Enabled but Defaulted to Off&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Default Behavior&lt;/strong&gt;: Although Bluetooth capability is &#39;enabled&#39; in the kernel, security-misc deviates from the usual behavior by starting with Bluetooth turned off at system start. This setting remains until the user explicitly opts to activate Bluetooth.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;User Control&lt;/strong&gt;: Users have the freedom to easily switch Bluetooth on and off in the usual way, exercising their own discretion. This can be done via the Bluetooth toggle through the usual way, that is either through GUI settings application or command line commands.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Enhanced Privacy Settings&lt;/strong&gt;: We enforce more private defaults for Bluetooth connections. This includes the use of private addresses and strict timeout settings for discoverability and visibility.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Security Considerations&lt;/strong&gt;: Despite these measures, it&#39;s important to note that Bluetooth technology, by its nature, may still be prone to exploits due to its history of security vulnerabilities. Thus, we recommend users to opt-out of using Bluetooth when possible.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configuration Details&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See configuration: &lt;code&gt;/etc/bluetooth/30_security-misc.conf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;For more information and discussion: &lt;a href=&#34;https://github.com/Kicksecure/security-misc/pull/145&#34;&gt;GitHub Pull Request&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Understanding Bluetooth Terms&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Disabling Bluetooth&lt;/strong&gt;: This means the absence of the Bluetooth kernel module. When disabled, Bluetooth is non-existent in the system - it cannot be seen, set, configured, or interacted with in any way.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Turning Bluetooth On/Off&lt;/strong&gt;: This refers to a software toggle. Normally, on Debian systems, Bluetooth is &#39;on&#39; when the system boots up. It actively searches for known devices to auto-connect and may be discoverable or visible under certain conditions. Our default ensures that Bluetooth is off on startup. However, it remains &#39;enabled&#39; in the kernel, meaning the kernel can use the Bluetooth protocol and has the necessary modules.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Quick Toggle Guide&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Turning Bluetooth On&lt;/strong&gt;: Simply click the Bluetooth button in the settings application or on the tray, and switch the toggle. It&#39;s a straightforward action that can be completed in less than a second.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Turning Bluetooth Off&lt;/strong&gt;: Follow the same procedure as turning it on but switch the toggle to the off position.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Entropy collection improvements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;jitterentropy_rng&lt;/code&gt; kernel module is loaded as early as possible during boot to gather more entropy via the &lt;code&gt;/usr/lib/modules-load.d/30_security-misc.conf&lt;/code&gt; configuration file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Distrusts the CPU for initial entropy at boot as it is not possible to audit, may contain weaknesses or a backdoor. For references, see: &lt;code&gt;/etc/default/grub.d/40_distrust_cpu.cfg&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Gathers more entropy during boot if using the linux-hardened kernel patch.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Restrictive mount options&lt;/h2&gt; &#xA;&lt;p&gt;A systemd service is triggered on boot to remount all sensitive partitions and directories with significantly more secure hardened mount options. Since this would require manual tuning for a given specific system, we handle it by creating a very solid configuration file for that very system on package install.&lt;/p&gt; &#xA;&lt;p&gt;Not enabled by default yet. In development. Help welcome.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.kicksecure.com/wiki/Dev/remount-secure&#34;&gt;https://www.kicksecure.com/wiki/Dev/remount-secure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Kicksecure/security-misc/issues/157&#34;&gt;https://github.com/Kicksecure/security-misc/issues/157&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forums.whonix.org/t/re-mount-home-and-other-with-noexec-and-nosuid-among-other-useful-mount-options-for-better-security/&#34;&gt;https://forums.whonix.org/t/re-mount-home-and-other-with-noexec-and-nosuid-among-other-useful-mount-options-for-better-security/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Root access restrictions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;su&lt;/code&gt; is restricted to only users within the group &lt;code&gt;sudo&lt;/code&gt; which prevents users from using &lt;code&gt;su&lt;/code&gt; to gain root access or to switch user accounts - &lt;code&gt;/usr/share/pam-configs/wheel-security-misc&lt;/code&gt; (which results in a change in file &lt;code&gt;/etc/pam.d/common-auth&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add user &lt;code&gt;root&lt;/code&gt; to group &lt;code&gt;sudo&lt;/code&gt;. This is required due to the above restriction so that logging in from a virtual console is still possible - &lt;code&gt;debian/security-misc.postinst&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Abort login for users with locked passwords - &lt;code&gt;/usr/libexec/security-misc/pam-abort-on-locked-password&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Logging into the root account from a virtual, serial, whatnot console is prevented by shipping an existing and empty &lt;code&gt;/etc/securetty&lt;/code&gt; file (deletion of &lt;code&gt;/etc/securetty&lt;/code&gt; has a different effect).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This package does not yet automatically lock the root account password. It is not clear if this would be sane in such a package although, it is recommended to lock and expire the root account.&lt;/p&gt; &#xA;&lt;p&gt;In new Kicksecure builds, root account will be locked by package dist-base-files.&lt;/p&gt; &#xA;&lt;p&gt;See:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.kicksecure.com/wiki/Root&#34;&gt;https://www.kicksecure.com/wiki/Root&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.kicksecure.com/wiki/Dev/Permissions&#34;&gt;https://www.kicksecure.com/wiki/Dev/Permissions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forums.whonix.org/t/restrict-root-access/7658&#34;&gt;https://forums.whonix.org/t/restrict-root-access/7658&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;However, a locked root password will break rescue and emergency shell. Therefore, this package enables passwordless rescue and emergency shell. This is the same solution that Debian will likely adapt for Debian installer: &lt;a href=&#34;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=802211&#34;&gt;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=802211&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;See:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/etc/systemd/system/emergency.service.d/override.conf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/etc/systemd/system/rescue.service.d/override.conf&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Adverse security effects can be prevented by setting up BIOS password protection, GRUB password protection and/or full disk encryption.&lt;/p&gt; &#xA;&lt;h2&gt;Console lockdown&lt;/h2&gt; &#xA;&lt;p&gt;This uses pam_access to allow members of group &lt;code&gt;console&lt;/code&gt; to use console but restrict everyone else (except members of group &lt;code&gt;console-unrestricted&lt;/code&gt;) from using console with ancient, unpopular login methods such as &lt;code&gt;/bin/login&lt;/code&gt; over networks as this might be exploitable. (CVE-2001-0797)&lt;/p&gt; &#xA;&lt;p&gt;This is not enabled by default in this package since this package does not know which users shall be added to group &#39;console&#39; and thus, would break console.&lt;/p&gt; &#xA;&lt;p&gt;See:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/usr/share/pam-configs/console-lockdown-security-misc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/etc/security/access-security-misc.conf&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Brute force attack protection&lt;/h2&gt; &#xA;&lt;p&gt;User accounts are locked after 50 failed login attempts using &lt;code&gt;pam_faillock&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Informational output during Linux PAM:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Show failed and remaining password attempts.&lt;/li&gt; &#xA; &lt;li&gt;Document unlock procedure if Linux user account got locked.&lt;/li&gt; &#xA; &lt;li&gt;Point out that there is no password feedback for &lt;code&gt;su&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Explain locked root account if locked.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/usr/share/pam-configs/tally2-security-misc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/usr/libexec/security-misc/pam-info&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/usr/libexec/security-misc/pam-abort-on-locked-password&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Access rights restrictions&lt;/h2&gt; &#xA;&lt;h3&gt;Strong user account separation&lt;/h3&gt; &#xA;&lt;h4&gt;Permission Lockdown&lt;/h4&gt; &#xA;&lt;p&gt;Read, write and execute access for &#34;others&#34; are removed during package installation, upgrade or PAM &lt;code&gt;mkhomedir&lt;/code&gt; for all users who have home folders in &lt;code&gt;/home&lt;/code&gt; by running, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;chmod o-rwx /home/user&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will be done only once per folder in &lt;code&gt;/home&lt;/code&gt; so users who wish to relax file permissions are free to do so. This is to protect files in a home folder that were previously created with lax file permissions prior to the installation of this package.&lt;/p&gt; &#xA;&lt;p&gt;See:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;debian/security-misc.postinst&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/usr/libexec/security-misc/permission-lockdown&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/usr/share/pam-configs/mkhomedir-security-misc&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;umask&lt;/h4&gt; &#xA;&lt;p&gt;Default &lt;code&gt;umask&lt;/code&gt; is set to &lt;code&gt;027&lt;/code&gt; for files created by non-root users such as for example user &lt;code&gt;user&lt;/code&gt;. Broken. Disabled. See:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Kicksecure/security-misc/issues/184&#34;&gt;https://github.com/Kicksecure/security-misc/issues/184&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is doing using pam module &lt;code&gt;pam_mkhomedir.so umask=027&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This means, files created by non-root users cannot be read by other non-root users by default. While Permission Lockdown already protects the &lt;code&gt;/home&lt;/code&gt; folder, this protects other folders such as &lt;code&gt;/tmp&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;group&lt;/code&gt; read permissions are not removed. This is unnecessary due to Debian&#39;s use of User Private Groups (UPGs). See also: &lt;a href=&#34;https://wiki.debian.org/UserPrivateGroups&#34;&gt;https://wiki.debian.org/UserPrivateGroups&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default &lt;code&gt;umask&lt;/code&gt; is unchanged for root, because then configuration files created in &lt;code&gt;/etc&lt;/code&gt; by the system administrator would be unreadable by &#34;others&#34; and break applications. Examples include &lt;code&gt;/etc/firefox-esr&lt;/code&gt; and &lt;code&gt;/etc/thunderbird&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/usr/share/pam-configs/umask-security-misc&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;SUID / SGID removal and permission hardening&lt;/h3&gt; &#xA;&lt;h4&gt;SUID / SGID removal&lt;/h4&gt; &#xA;&lt;p&gt;A systemd service removes SUID / SGID bits from non-essential binaries as these are often used in privilege escalation attacks.&lt;/p&gt; &#xA;&lt;h4&gt;File permission hardening&lt;/h4&gt; &#xA;&lt;p&gt;Various file permissions are reset with more secure and hardened defaults. These include but are not limited to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Limiting &lt;code&gt;/home&lt;/code&gt; and &lt;code&gt;/root&lt;/code&gt; to the root only.&lt;/li&gt; &#xA; &lt;li&gt;Limiting crontab to root as well as all the configuration files for cron.&lt;/li&gt; &#xA; &lt;li&gt;Limiting the configuration for cups and ssh.&lt;/li&gt; &#xA; &lt;li&gt;Protecting the information of sudoers from others.&lt;/li&gt; &#xA; &lt;li&gt;Protecting various system relevant files and modules.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;permission-hardener&lt;/h5&gt; &#xA;&lt;p&gt;&lt;code&gt;permission-hardener&lt;/code&gt; removes SUID / SGID bits from non-essential binaries as these are often used in privilege escalation attacks. It is enabled by default and applied at security-misc package installation and upgrade time.&lt;/p&gt; &#xA;&lt;p&gt;There is also an optional systemd unit which does the same at boot time that can be enabled by running &lt;code&gt;systemctl enable permission-hardener.service&lt;/code&gt; as root. The hardening at boot time is not the default because this slows down the boot too much.&lt;/p&gt; &#xA;&lt;p&gt;See:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/usr/bin/permission-hardener&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;debian/security-misc.postinst&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/lib/systemd/system/permission-hardener.service&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/etc/permission-hardener.d&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forums.whonix.org/t/disable-suid-binaries/7706&#34;&gt;https://forums.whonix.org/t/disable-suid-binaries/7706&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.kicksecure.com/wiki/SUID_Disabler_and_Permission_Hardener&#34;&gt;https://www.kicksecure.com/wiki/SUID_Disabler_and_Permission_Hardener&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Access rights relaxations&lt;/h3&gt; &#xA;&lt;p&gt;This is not enabled yet because hidepid is not enabled by default.&lt;/p&gt; &#xA;&lt;p&gt;Calls to &lt;code&gt;pkexec&lt;/code&gt; are redirected to &lt;code&gt;lxqt-sudo&lt;/code&gt; because &lt;code&gt;pkexec&lt;/code&gt; is incompatible with &lt;code&gt;hidepid=2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/usr/bin/pkexec.security-misc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=860040&#34;&gt;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=860040&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forums.whonix.org/t/cannot-use-pkexec/8129&#34;&gt;https://forums.whonix.org/t/cannot-use-pkexec/8129&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Application-specific hardening&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enables &#34;&lt;code&gt;apt-get --error-on=any&lt;/code&gt;&#34; which makes apt exit non-zero for transient failures. - &lt;code&gt;/etc/apt/apt.conf.d/40error-on-any&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Enables APT seccomp-BPF sandboxing - &lt;code&gt;/etc/apt/apt.conf.d/40sandbox&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Deactivates previews in Dolphin.&lt;/li&gt; &#xA; &lt;li&gt;Deactivates previews in Nautilus - &lt;code&gt;/usr/share/glib-2.0/schemas/30_security-misc.gschema.override&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Deactivates thumbnails in Thunar.&lt;/li&gt; &#xA; &lt;li&gt;Thunderbird is hardened with the following options: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Displays domain names in punycode to prevent IDN homograph attacks (a form of phishing).&lt;/li&gt; &#xA;   &lt;li&gt;Strips email client information for sent email headers.&lt;/li&gt; &#xA;   &lt;li&gt;Stripts user time information from sent email headers by replacing the originating time zone with UTC and rounding the timestamp to the nearest minute.&lt;/li&gt; &#xA;   &lt;li&gt;Disables scripting when viewing pdf files.&lt;/li&gt; &#xA;   &lt;li&gt;Disables implicit outgoing connections.&lt;/li&gt; &#xA;   &lt;li&gt;Disables all and any kind of telemetry.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Security and privacy enhancements for gnupg&#39;s config file &lt;code&gt;/etc/skel/.gnupg/gpg.conf&lt;/code&gt;. See also: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.github.com/ioerror/torbirdy/master/gpg.conf&#34;&gt;https://raw.github.com/ioerror/torbirdy/master/gpg.conf&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ioerror/torbirdy/pull/11&#34;&gt;https://github.com/ioerror/torbirdy/pull/11&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;project scope of application-specific hardening&lt;/h3&gt; &#xA;&lt;p&gt;Added in December 2023.&lt;/p&gt; &#xA;&lt;p&gt;Before sending pull requests to harden arbitrary applications, please note the scope of security-misc is limited to default installed applications in Kicksecure, Whonix. This includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Thunderbird, VLC Media Player, KeepassXC&lt;/li&gt; &#xA; &lt;li&gt;Debian Specific System Components (APT, DPKG)&lt;/li&gt; &#xA; &lt;li&gt;System Services (NetworkManager IPv6 privacy options, MAC address randomization)&lt;/li&gt; &#xA; &lt;li&gt;Actually used development utilities such as &lt;code&gt;git&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It will not be possible to review and merge &#34;1500&#34; settings profiles for arbitrary applications outside of this context.&lt;/p&gt; &#xA;&lt;p&gt;The main objective of security-misc is to harden Kicksecure and its derivatives, such as Whonix, by implementing robust security settings. It&#39;s designed to be compatible with Debian, reflecting a commitment to clean implementation and sound design principles. However, it&#39;s important to note that security-misc is a component of Kicksecure, not a substitute for it. The intention isn&#39;t to recreate Kicksecure within security-misc. Instead, specific security enhancements, like for example recommending a curated list of security-focused default packages (e.g., &lt;code&gt;libpam-tmpdir&lt;/code&gt;), should be integrated directly into those appropriate areas of Kicksecure (e.g.&lt;code&gt;kicksecure-meta-packages&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Discussion: &lt;a href=&#34;https://github.com/Kicksecure/security-misc/issues/154&#34;&gt;https://github.com/Kicksecure/security-misc/issues/154&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;development philosophy&lt;/h3&gt; &#xA;&lt;p&gt;Added in December 2023.&lt;/p&gt; &#xA;&lt;p&gt;&#34;Maintainability is a key priority [1]. Before modifying settings in the downstream security-misc, it&#39;s essential to first engage with upstream developers to propose these changes as defaults. This step should only be bypassed if there&#39;s a clear, prior indication from upstream that such changes won&#39;t be accepted. Additionally, before implementing any workarounds, consulting with upstream is necessary to future unmaintainable complexity.&lt;/p&gt; &#xA;&lt;p&gt;If debugging features are disabled, pull requests won&#39;t be merged until there is a corresponding pull request for the debug-misc package to re-enable these. This is to avoid configuring the system into a corner where it can be no longer debugged.&lt;/p&gt; &#xA;&lt;p&gt;[1] &lt;a href=&#34;https://www.kicksecure.com/wiki/Dev/maintainability&#34;&gt;https://www.kicksecure.com/wiki/Dev/maintainability&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Opt-in hardening&lt;/h2&gt; &#xA;&lt;p&gt;Some hardening is opt-in as it causes too much breakage to be enabled by default.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;An optional systemd service mounts &lt;code&gt;/proc&lt;/code&gt; with &lt;code&gt;hidepid=2&lt;/code&gt; at boot to prevent users from seeing another user&#39;s processes. This is disabled by default because it is incompatible with &lt;code&gt;pkexec&lt;/code&gt;. It can be enabled by executing &lt;code&gt;systemctl enable proc-hidepid.service&lt;/code&gt; as root.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A systemd service restricts &lt;code&gt;/proc/cpuinfo&lt;/code&gt;, &lt;code&gt;/proc/bus&lt;/code&gt;, &lt;code&gt;/proc/scsi&lt;/code&gt; and &lt;code&gt;/sys&lt;/code&gt; to the root user. This hides a lot of hardware identifiers from unprivileged users and increases security as &lt;code&gt;/sys&lt;/code&gt; exposes a lot of information that shouldn&#39;t be accessible to unprivileged users. As this will break many things, it is disabled by default and can optionally be enabled by executing &lt;code&gt;systemctl enable hide-hardware-info.service&lt;/code&gt; as root.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;miscellaneous&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;hardened malloc compatibility for haveged workaround &lt;code&gt;/lib/systemd/system/haveged.service.d/30_security-misc.conf&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;set &lt;code&gt;dracut&lt;/code&gt; &lt;code&gt;reproducible=yes&lt;/code&gt; setting&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;legal&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;/usr/lib/issue.d/20_security-misc.issue&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Kicksecure/security-misc/pull/167&#34;&gt;https://github.com/Kicksecure/security-misc/pull/167&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Related&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux Kernel Runtime Guard (LKRG)&lt;/li&gt; &#xA; &lt;li&gt;tirdad - TCP ISN CPU Information Leak Protection.&lt;/li&gt; &#xA; &lt;li&gt;Kicksecure (TM) - a security-hardened Linux Distribution&lt;/li&gt; &#xA; &lt;li&gt;And more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.kicksecure.com/wiki/Linux_Kernel_Runtime_Guard_LKRG&#34;&gt;https://www.kicksecure.com/wiki/Linux_Kernel_Runtime_Guard_LKRG&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Kicksecure/tirdad&#34;&gt;https://github.com/Kicksecure/tirdad&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.kicksecure.com&#34;&gt;https://www.kicksecure.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Kicksecure&#34;&gt;https://github.com/Kicksecure&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Discussion&lt;/h2&gt; &#xA;&lt;p&gt;Happening primarily in forums.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://forums.whonix.org/t/kernel-hardening/7296&#34;&gt;https://forums.whonix.org/t/kernel-hardening/7296&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to install &lt;code&gt;security-misc&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://www.kicksecure.com/wiki/Security-misc#install&#34;&gt;https://www.kicksecure.com/wiki/Security-misc#install&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to Build deb Package from Source Code&lt;/h2&gt; &#xA;&lt;p&gt;Can be build using standard Debian package build tools such as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dpkg-buildpackage -b&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See instructions. (Replace &lt;code&gt;generic-package&lt;/code&gt; with the actual name of this package &lt;code&gt;security-misc&lt;/code&gt;.)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;A)&lt;/strong&gt; &lt;a href=&#34;https://www.kicksecure.com/wiki/Dev/Build_Documentation/generic-package/easy&#34;&gt;easy&lt;/a&gt;, &lt;em&gt;OR&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;B)&lt;/strong&gt; &lt;a href=&#34;https://www.kicksecure.com/wiki/Dev/Build_Documentation/generic-package&#34;&gt;including verifying software signatures&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forums.kicksecure.com&#34;&gt;Free Forum Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.kicksecure.com/wiki/Professional_Support&#34;&gt;Professional Support&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Donate&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;security-misc&lt;/code&gt; requires &lt;a href=&#34;https://www.kicksecure.com/wiki/Donate&#34;&gt;donations&lt;/a&gt; to stay alive!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>node-red/node-red-docker</title>
    <updated>2024-03-13T01:36:34Z</updated>
    <id>tag:github.com,2024-03-13:/node-red/node-red-docker</id>
    <link href="https://github.com/node-red/node-red-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Repository for all things Node-RED and Docker related&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Node-RED Docker&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://greenkeeper.io/&#34;&gt;&lt;img src=&#34;https://badges.greenkeeper.io/node-red/node-red-docker.svg?sanitize=true&#34; alt=&#34;Greenkeeper badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/node-red/node-red-docker&#34;&gt;&lt;img src=&#34;https://travis-ci.org/node-red/node-red-docker.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/nodered/node-red/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/nodered/node-red.svg?sanitize=true&#34; alt=&#34;DockerHub Pull&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/nodered/node-red/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/stars/nodered/node-red.svg?maxAge=2592000&#34; alt=&#34;DockerHub Stars&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project describes some of the many ways Node-RED can be run under Docker and has support for multiple architectures (amd64, arm32v6, arm32v7, arm64v8, i386 and s390x). Some basic familiarity with Docker and the &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/cli/&#34;&gt;Docker Command Line&lt;/a&gt; is assumed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: In version 1.2 we removed the named VOLUME from the build. It should not affect many users - but the details are &lt;a href=&#34;https://raw.githubusercontent.com/node-red/node-red-docker/master/volumechanges.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As of Node-RED 1.0 this project provides the build for the &lt;code&gt;nodered/node-red&lt;/code&gt; container on &lt;a href=&#34;https://hub.docker.com/r/nodered/node-red/&#34;&gt;Docker Hub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Previous 0.20.x versions are still available at &lt;a href=&#34;https://hub.docker.com/r/nodered/node-red-docker&#34;&gt;https://hub.docker.com/r/nodered/node-red-docker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;To run in Docker in its simplest form just run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    docker run -it -p 1880:1880 -v node_red_data:/data --name mynodered nodered/node-red&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s dissect that command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    docker run              - run this container, initially building locally if necessary&#xA;    -it                     - attach a terminal session so we can see what is going on&#xA;    -p 1880:1880            - connect local port 1880 to the exposed internal port 1880&#xA;    -v node_red_data:/data  - mount the host node_red_data directory to the container /data directory so any changes made to flows are persisted&#xA;    --name mynodered        - give this machine a friendly local name&#xA;    nodered/node-red        - the image to base it on - currently Node-RED v3.1.7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running that command should give a terminal window with a running instance of Node-RED.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    Welcome to Node-RED&#xA;    ===================&#xA;&#xA;    10 Oct 12:57:10 - [info] Node-RED version: v3.1.7&#xA;    10 Oct 12:57:10 - [info] Node.js  version: v16.14.1&#xA;    10 Oct 12:57:10 - [info] Linux 4.19.76-linuxkit x64 LE&#xA;    10 Oct 12:57:11 - [info] Loading palette nodes&#xA;    10 Oct 12:57:16 - [info] Settings file  : /data/settings.js&#xA;    10 Oct 12:57:16 - [info] Context store  : &#39;default&#39; [module=memory]&#xA;    10 Oct 12:57:16 - [info] User directory : /data&#xA;    10 Oct 12:57:16 - [warn] Projects disabled : editorTheme.projects.enabled=false&#xA;    10 Oct 12:57:16 - [info] Flows file     : /data/flows.json&#xA;    10 Oct 12:57:16 - [info] Creating new flow file&#xA;    10 Oct 12:57:17 - [warn]&#xA;&#xA;    ---------------------------------------------------------------------&#xA;    Your flow credentials file is encrypted using a system-generated key.&#xA;&#xA;    If the system-generated key is lost for any reason, your credentials&#xA;    file will not be recoverable, you will have to delete it and re-enter&#xA;    your credentials.&#xA;&#xA;    You should set your own key using the &#39;credentialSecret&#39; option in&#xA;    your settings file. Node-RED will then re-encrypt your credentials&#xA;    file using your chosen key the next time you deploy a change.&#xA;    ---------------------------------------------------------------------&#xA;&#xA;    10 Oct 12:57:17 - [info] Starting flows&#xA;    10 Oct 12:57:17 - [info] Started flows&#xA;    10 Oct 12:57:17 - [info] Server now running at http://127.0.0.1:1880/&#xA;&#xA;    [...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then browse to &lt;code&gt;http://{host-ip}:1880&lt;/code&gt; to get the familiar Node-RED desktop.&lt;/p&gt; &#xA;&lt;p&gt;The advantage of doing this is that by giving it a name (mynodered) we can manipulate it more easily, and by fixing the host port we know we are on familiar ground. Of course this does mean we can only run one instance at a time... but one step at a time folks...&lt;/p&gt; &#xA;&lt;p&gt;If we are happy with what we see, we can detach the terminal with &lt;code&gt;Ctrl-p&lt;/code&gt; &lt;code&gt;Ctrl-q&lt;/code&gt; - the container will keep running in the background.&lt;/p&gt; &#xA;&lt;p&gt;To reattach to the terminal (to see logging) run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $ docker attach mynodered&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to restart the container (e.g. after a reboot or restart of the Docker daemon):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $ docker start mynodered&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and stop it again when required:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $ docker stop mynodered&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Healthcheck&lt;/strong&gt;: to turn off the Healthcheck add &lt;code&gt;--no-healthcheck&lt;/code&gt; to the run command.&lt;/p&gt; &#xA;&lt;h2&gt;Image Variations&lt;/h2&gt; &#xA;&lt;p&gt;The Node-RED images come in different variations and are supported by manifest lists (auto-detect architecture). This makes it more easy to deploy in a multi architecture Docker environment. E.g. a Docker Swarm with mix of Raspberry Pi&#39;s and amd64 nodes.&lt;/p&gt; &#xA;&lt;p&gt;The tag naming convention is &lt;code&gt;&amp;lt;node-red-version&amp;gt;-&amp;lt;node-version&amp;gt;-&amp;lt;image-type&amp;gt;-&amp;lt;architecture&amp;gt;&lt;/code&gt;, where:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;node-red-version&amp;gt;&lt;/code&gt; is the Node-RED version.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;node-version&amp;gt;&lt;/code&gt; is the Node JS version.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;image-type&amp;gt;&lt;/code&gt; is type of image and is optional, can be either &lt;em&gt;none&lt;/em&gt; or minimal. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;none&lt;/em&gt; : is the default and has Python 2 &amp;amp; Python 3 + devtools installed&lt;/li&gt; &#xA;   &lt;li&gt;minimal : has no Python installed and no devtools installed&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;architecture&amp;gt;&lt;/code&gt; is the architecture of the Docker host system, can be either amd64, arm32v6, arm32v7, arm64, s390x or i386.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The minimal versions (without python and build tools) are not able to install nodes that require any locally compiled native code.&lt;/p&gt; &#xA;&lt;p&gt;For example - to run the latest minimal version, you would run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -it -p 1880:1880 -v node_red_data:/data --name mynodered nodered/node-red:latest-minimal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Node-RED images are based on &lt;a href=&#34;https://hub.docker.com/_/node/&#34;&gt;official Node JS Alpine Linux&lt;/a&gt; images to keep them as small as possible. Using Alpine Linux reduces the built image size, but removes standard dependencies that are required for native module compilation. If you want to add dependencies with native dependencies, extend the Node-RED image with the missing packages on running containers or build new images see &lt;a href=&#34;https://raw.githubusercontent.com/node-red/node-red-docker/master/docker-custom/README.md&#34;&gt;docker-custom&lt;/a&gt; and the documentation on the Node-RED site &lt;a href=&#34;https://nodered.org/docs/getting-started/docker-custom&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The following table shows the variety of provided Node-RED images.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Tag&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Node&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Arch&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Dev&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Base Image&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.1.7-14&lt;/td&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td&gt;amd64&lt;/td&gt; &#xA;   &lt;td&gt;2.x 3.x&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;amd64/node:14-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td&gt;arm32v6&lt;/td&gt; &#xA;   &lt;td&gt;2.x 3.x&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;arm32v6/node:14-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td&gt;arm32v7&lt;/td&gt; &#xA;   &lt;td&gt;2.x 3.x&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;arm32v7/node:14-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td&gt;arm64v8&lt;/td&gt; &#xA;   &lt;td&gt;2.x 3.x&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;arm64v8/node:14-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td&gt;s390x&lt;/td&gt; &#xA;   &lt;td&gt;2.x 3.x&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;s390x/node:14-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td&gt;i386&lt;/td&gt; &#xA;   &lt;td&gt;2.x 3.x&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;i386/node:14-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.1.7-14-minimal&lt;/td&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td&gt;amd64&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;amd64/node:14-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td&gt;arm32v6&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;arm32v6/node:14-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td&gt;arm32v7&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;arm32v7/node:14-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td&gt;arm64v8&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;arm64v8/node:14-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td&gt;s390x&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;s390x/node:14-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td&gt;i386&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;i386/node:14-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Tag&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Node&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Arch&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Dev&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Base Image&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.1.7-16&lt;/td&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;amd64&lt;/td&gt; &#xA;   &lt;td&gt;2.x 3.x&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;amd64/node:16-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;arm32v6&lt;/td&gt; &#xA;   &lt;td&gt;2.x 3.x&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;arm32v6/node:16-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;arm32v7&lt;/td&gt; &#xA;   &lt;td&gt;2.x 3.x&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;arm32v7/node:16-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;arm64v8&lt;/td&gt; &#xA;   &lt;td&gt;2.x 3.x&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;arm64v8/node:16-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;s390x&lt;/td&gt; &#xA;   &lt;td&gt;2.x 3.x&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;s390x/node:16-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;i386&lt;/td&gt; &#xA;   &lt;td&gt;2.x 3.x&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;i386/node:16-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.1.7-16-minimal&lt;/td&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;amd64&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;amd64/node:16-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;arm32v6&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;arm32v6/node:16-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;arm32v7&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;arm32v7/node:16-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;arm64v8&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;arm64v8/node:16-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;s390x&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;s390x/node:16-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;i386&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;i386/node:16-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Tag&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Node&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Arch&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Dev&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Base Image&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.1.7-18&lt;/td&gt; &#xA;   &lt;td&gt;18&lt;/td&gt; &#xA;   &lt;td&gt;amd64&lt;/td&gt; &#xA;   &lt;td&gt;2.x 3.x&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;amd64/node:18-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;18&lt;/td&gt; &#xA;   &lt;td&gt;arm32v6&lt;/td&gt; &#xA;   &lt;td&gt;2.x 3.x&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;arm32v6/node:18-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;18&lt;/td&gt; &#xA;   &lt;td&gt;arm32v7&lt;/td&gt; &#xA;   &lt;td&gt;2.x 3.x&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;arm32v7/node:18-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;18&lt;/td&gt; &#xA;   &lt;td&gt;arm64v8&lt;/td&gt; &#xA;   &lt;td&gt;2.x 3.x&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;arm64v8/node:18-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;18&lt;/td&gt; &#xA;   &lt;td&gt;s390x&lt;/td&gt; &#xA;   &lt;td&gt;2.x 3.x&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;s390x/node:18-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;18&lt;/td&gt; &#xA;   &lt;td&gt;i386&lt;/td&gt; &#xA;   &lt;td&gt;2.x 3.x&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;i386/node:18-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.1.7-18-minimal&lt;/td&gt; &#xA;   &lt;td&gt;18&lt;/td&gt; &#xA;   &lt;td&gt;amd64&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;amd64/node:18-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;18&lt;/td&gt; &#xA;   &lt;td&gt;arm32v6&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;arm32v6/node:18-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;18&lt;/td&gt; &#xA;   &lt;td&gt;arm32v7&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;arm32v7/node:18-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;18&lt;/td&gt; &#xA;   &lt;td&gt;arm64v8&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;arm64v8/node:18-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;18&lt;/td&gt; &#xA;   &lt;td&gt;s390x&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;s390x/node:18-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;18&lt;/td&gt; &#xA;   &lt;td&gt;i386&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;i386/node:18-alpine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All images have bash, tzdata, nano, curl, git, openssl and openssh-client pre-installed to support Node-RED&#39;s Projects feature.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Manifest Lists&lt;/h2&gt; &#xA;&lt;p&gt;The following table shows the provided Manifest Lists.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Tag&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Node-RED Base Image&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;latest, 3.1.7,&lt;/td&gt; &#xA;   &lt;td&gt;nodered/node-red:3.1.7-16&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;latest-16, 3.1.7-16&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;latest-minimal, 3.1.7-minimal,&lt;/td&gt; &#xA;   &lt;td&gt;nodered/node-red:3.1.7-16-minimal&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;latest-16-minimal, 3.1.7-16-minimal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Tag&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Node-RED Base Image&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;latest-14, 3.1.7-14&lt;/td&gt; &#xA;   &lt;td&gt;nodered/node-red:3.1.7-14&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;latest-14-minimal, 3.1.7-14-minimal&lt;/td&gt; &#xA;   &lt;td&gt;nodered/node-red:3.1.7-14-minimal&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Tag&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Node-RED Base Image&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;latest-18, 3.1.7-18&lt;/td&gt; &#xA;   &lt;td&gt;nodered/node-red:3.1.7-18&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;latest-18-minimal, 3.1.7-18-minimal&lt;/td&gt; &#xA;   &lt;td&gt;nodered/node-red:3.1.7-18-minimal&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;With the support of Docker manifest list, there is no need to explicitly add the tag for the architecture to use. When a docker run command or docker service command or docker stack command is executed, docker checks which architecture is required and verifies if it is available in the docker repository. If it does, docker pulls the matching image for it.&lt;/p&gt; &#xA;&lt;p&gt;Therefore all tags regarding Raspberry PI&#39;s are dropped.&lt;/p&gt; &#xA;&lt;p&gt;For example: suppose you are running on a Raspberry PI 3B, which has &lt;code&gt;arm32v7&lt;/code&gt; as architecture. Then just run the following command to pull the image (tagged by &lt;code&gt;3.1.7-16&lt;/code&gt;), and run the container.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -it -p 1880:1880 -v node_red_data:/data --name mynodered nodered/node-red:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The same command can be used for running on an amd64 system, since docker discovers its running on a amd64 host and pulls the image with the matching tag (&lt;code&gt;3.1.7-16-amd64&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;This gives the advantage that you don&#39;t need to know/specify which architecture you are running on and makes docker run commands and docker compose files more flexible and exchangeable across systems.&lt;/p&gt; &#xA;&lt;h2&gt;Raspberry PI - native GPIO support&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;v1.0 - BREAKING: Native GPIO support for Raspberry PI has been dropped&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;The replacement for native GPIO is &lt;a href=&#34;https://github.com/node-red/node-red-nodes/tree/master/hardware/pigpiod&#34;&gt;node-red-node-pi-gpiod&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Disadvantages of the native GPIO support are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Your Docker container needs to be deployed on the same Docker node/host on which you want to control the gpio.&lt;/li&gt; &#xA; &lt;li&gt;Gain access to &lt;code&gt;/dev/mem&lt;/code&gt; of your Docker node/host&lt;/li&gt; &#xA; &lt;li&gt;privileged=true is not supported for &lt;code&gt;docker stack&lt;/code&gt; command&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;node-red-node-pi-gpiod&lt;/code&gt; fixes all these disadvantages. With &lt;code&gt;node-red-node-pi-gpiod&lt;/code&gt; it is possible to interact with gpio of multiple Raspberry Pi&#39;s from a single Node-RED container, and for multiple containers to access different gpio on the same Pi.&lt;/p&gt; &#xA;&lt;h3&gt;Quick Migration steps to &lt;code&gt;node-red-node-pi-gpiod&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;code&gt;node-red-node-pi-gpiod&lt;/code&gt; through the Node-RED palette&lt;/li&gt; &#xA; &lt;li&gt;Install and run &lt;code&gt;PiGPIOd daemon&lt;/code&gt; on the host Pi.&lt;/li&gt; &#xA; &lt;li&gt;Replace all native gpio nodes with &lt;code&gt;pi gpiod&lt;/code&gt; nodes.&lt;/li&gt; &#xA; &lt;li&gt;Configure &lt;code&gt;pi gpiod&lt;/code&gt; nodes to connect to &lt;code&gt;PiGPIOd daemon&lt;/code&gt;. Often the host machine will have an IP 172.17.0.1 port 8888 - but not always. You can use &lt;code&gt;docker exec -it mynodered ip route show default | awk &#39;/default/ {print $3}&#39;&lt;/code&gt; to check.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For detailed install instruction please refer to the &lt;code&gt;node-red-node-pi-gpiod&lt;/code&gt; &lt;a href=&#34;https://github.com/node-red/node-red-nodes/tree/master/hardware/pigpiod#node-red-node-pi-gpiod&#34;&gt;README&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: There is a contributed &lt;a href=&#34;https://github.com/corbosman/node-red-gpiod&#34;&gt;gpiod project&lt;/a&gt; that runs the gpiod in its own container rather than on the host if required.&lt;/p&gt; &#xA;&lt;h2&gt;Managing User Data&lt;/h2&gt; &#xA;&lt;p&gt;Once you have Node-RED running with Docker, we need to ensure any added nodes or flows are not lost if the container is destroyed. This user data can be persisted by mounting a data directory to a volume outside the container. This can either be done using a bind mount or a named data volume.&lt;/p&gt; &#xA;&lt;p&gt;Node-RED uses the &lt;code&gt;/data&lt;/code&gt; directory inside the container to store user configuration data.&lt;/p&gt; &#xA;&lt;p&gt;Depending on how and where you mount the user data directory you may want to turn off the built in healthcheck function by adding &lt;code&gt;--no-healthcheck&lt;/code&gt; to the run command.&lt;/p&gt; &#xA;&lt;h3&gt;Using a Host Directory for Persistence (Bind Mount)&lt;/h3&gt; &#xA;&lt;p&gt;To save your Node-RED user directory inside the container to a host directory outside the container, you can use the command below. To allow access to this host directory, the node-red user (default uid=1000) inside the container must have the same uid as the owner of the host directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -it -p 1880:1880 -v /home/pi/.node-red:/data --name mynodered nodered/node-red&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example the host &lt;code&gt;/home/pi/.node-red&lt;/code&gt; directory is bound to the container &lt;code&gt;/data&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Users migrating from version 0.20 to 1.0 will need to ensure that any existing &lt;code&gt;/data&lt;/code&gt; directory has the correct ownership. As of 1.0 this needs to be &lt;code&gt;1000:1000&lt;/code&gt;. This can be forced by the command &lt;code&gt;sudo chown -R 1000:1000 path/to/your/node-red/data&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/node-red/node-red-docker/wiki/Permissions-and-Persistence&#34;&gt;the wiki&lt;/a&gt; for detailed information on permissions.&lt;/p&gt; &#xA;&lt;h3&gt;Using Named Data Volumes&lt;/h3&gt; &#xA;&lt;p&gt;Docker also supports using named &lt;a href=&#34;https://docs.docker.com/engine/tutorials/dockervolumes/&#34;&gt;data volumes&lt;/a&gt; to store persistent or shared data outside the container.&lt;/p&gt; &#xA;&lt;p&gt;To create a new named data volume to persist our user data and run a new container using this volume.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $ docker volume create --name node_red_data_vol&#xA;    $ docker volume ls&#xA;    DRIVER              VOLUME NAME&#xA;    local               node_red_data_vol&#xA;    $ docker run -it -p 1880:1880 -v node_red_data_vol:/data --name mynodered nodered/node-red&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using Node-RED to create and deploy some sample flows, we can now destroy the container and start a new instance without losing our user data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $ docker rm mynodered&#xA;    $ docker run -it -p 1880:1880 -v node_red_data_vol:/data --name mynodered nodered/node-red&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Updating&lt;/h2&gt; &#xA;&lt;p&gt;As the /data is now preserved outside of the container, updating the base container image is now as simple as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $ docker pull nodered/node-red&#xA;    $ docker stop mynodered&#xA;    $ docker start mynodered&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Docker Stack / Docker Compose&lt;/h2&gt; &#xA;&lt;p&gt;Below an example of a Docker Compose file which can be run by &lt;code&gt;docker stack&lt;/code&gt; or &lt;code&gt;docker-compose&lt;/code&gt;. Please refer to the official Docker pages for more info about &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/stack/&#34;&gt;Docker stack&lt;/a&gt; and &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker compose&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;################################################################################&#xA;# Node-RED Stack or Compose&#xA;################################################################################&#xA;# docker stack deploy node-red --compose-file docker-compose-node-red.yml&#xA;# docker-compose -f docker-compose-node-red.yml -p myNoderedProject up&#xA;################################################################################&#xA;version: &#34;3.7&#34;&#xA;&#xA;services:&#xA;  node-red:&#xA;    image: nodered/node-red:latest&#xA;    environment:&#xA;      - TZ=Europe/Amsterdam&#xA;    ports:&#xA;      - &#34;1880:1880&#34;&#xA;    networks:&#xA;      - node-red-net&#xA;    volumes:&#xA;      - ~/node-red/data:/data&#xA;&#xA;networks:&#xA;  node-red-net:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above compose file:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;creates a node-red service&lt;/li&gt; &#xA; &lt;li&gt;pulls the latest node-red image&lt;/li&gt; &#xA; &lt;li&gt;sets the timezone to Europe/Amsterdam&lt;/li&gt; &#xA; &lt;li&gt;Maps the container port 1880 to the the host port 1880&lt;/li&gt; &#xA; &lt;li&gt;creates a node-red-net network and attaches the container to this network&lt;/li&gt; &#xA; &lt;li&gt;persists the &lt;code&gt;/data&lt;/code&gt; dir inside the container to the users local &lt;code&gt;node-red/data&lt;/code&gt; directory. The &lt;code&gt;node-red/data&lt;/code&gt; directory must exist prior to starting the container.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project Layout&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains Dockerfiles to build the Node-RED Docker images listed above.&lt;/p&gt; &#xA;&lt;h3&gt;package.json&lt;/h3&gt; &#xA;&lt;p&gt;The package.json is a metafile that downloads and installs the required version of Node-RED and any other npms you wish to install at build time. During the Docker build process, the dependencies are installed under &lt;code&gt;/usr/src/node-red&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The main sections to modify are&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;dependencies&#34;: {&#xA;    &#34;node-red&#34;: &#34;^3.1.7&#34;,           &amp;lt;-- set the version of Node-RED here&#xA;    &#34;node-red-dashboard&#34;: &#34;*&#34;        &amp;lt;-- add any extra npm packages here&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is where you can pre-define any extra nodes you want installed every time by default, and then&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;scripts&#34;      : {&#xA;    &#34;start&#34;: &#34;node-red -v $FLOWS&#34;&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is the command that starts Node-RED when the container is run.&lt;/p&gt; &#xA;&lt;h3&gt;Startup&lt;/h3&gt; &#xA;&lt;p&gt;Node-RED is started using NPM start from this &lt;code&gt;/usr/src/node-red&lt;/code&gt;, with the &lt;code&gt;--userDir&lt;/code&gt; parameter pointing to the &lt;code&gt;/data&lt;/code&gt; directory on the container.&lt;/p&gt; &#xA;&lt;p&gt;The flows configuration file is set using an environment parameter (&lt;strong&gt;FLOWS&lt;/strong&gt;), which defaults to &lt;em&gt;&#39;flows.json&#39;&lt;/em&gt;. This can be changed at runtime using the following command-line flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -it -p 1880:1880 -e FLOWS=my_flows.json -v node_red_data:/data nodered/node-red&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you set &lt;code&gt;-e FLOWS=&#34;&#34;&lt;/code&gt; then the flow file can be set via the &lt;em&gt;flowFile&lt;/em&gt; property in the &lt;code&gt;settings.js&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Node.js runtime arguments can be passed to the container using an environment parameter (&lt;strong&gt;NODE_OPTIONS&lt;/strong&gt;). For example, to fix the heap size used by the Node.js garbage collector you would use the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -it -p 1880:1880 -e NODE_OPTIONS=&#34;--max_old_space_size=128&#34; -v node_red_data:/data nodered/node-red&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other useful environment variables include&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;-e NODE_RED_ENABLE_SAFE_MODE=false # setting to true starts Node-RED in safe (not running) mode&lt;/li&gt; &#xA; &lt;li&gt;-e NODE_RED_ENABLE_PROJECTS=false # setting to true starts Node-RED with the projects feature enabled&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Node-RED Admin Tool&lt;/h3&gt; &#xA;&lt;p&gt;Using the administration tool, with port forwarding on the container to the host system, extra nodes can be installed without leaving the host system.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $ npm install -g node-red-admin&#xA;    $ node-red-admin install node-red-node-openwhisk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This tool assumes Node-RED is available at the following address &lt;code&gt;http://localhost:1880&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Refreshing the browser page should now reveal the newly added node in the palette.&lt;/p&gt; &#xA;&lt;h3&gt;Node-RED Commands from the host&lt;/h3&gt; &#xA;&lt;p&gt;Admin commands can also be accessed without installing npm or the node-red-admin tool on the host machine. Simply prepend your command with &#34;npx&#34; and apply it to the container - e.g&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $ docker exec -it mynodered npx node-red admin hash-pw&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Container Shell&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $ docker exec -it mynodered /bin/bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will give a command line inside the container - where you can then run the npm install command you wish - e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $ cd /data&#xA;    $ npm install node-red-node-smooth&#xA;    $ exit&#xA;    $ docker stop mynodered&#xA;    $ docker start mynodered&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refreshing the browser page should now reveal the newly added node in the palette.&lt;/p&gt; &#xA;&lt;h3&gt;Building Custom Image&lt;/h3&gt; &#xA;&lt;p&gt;Creating a new Docker image, using the public Node-RED images as the base image, allows you to install extra nodes during the build process.&lt;/p&gt; &#xA;&lt;p&gt;This Dockerfile builds a custom Node-RED image with the flightaware module installed from NPM.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FROM nodered/node-red&#xA;RUN npm install node-red-contrib-flightaware&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can modify the package.json in this repository and re-build the images from scratch. This will also allow you to modify the version of Node-RED that is installed. See &lt;a href=&#34;https://raw.githubusercontent.com/node-red/node-red-docker/master/docker-custom/README.md&#34;&gt;README&lt;/a&gt; in the &lt;code&gt;docker-custom&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Running headless&lt;/h2&gt; &#xA;&lt;p&gt;The barest minimum we need to just run Node-RED is&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run -d -p 1880:1880 nodered/node-red&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a local running instance of a machine - that will have some docker id number and be running on a random port... to find out run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker ps&#xA;CONTAINER ID        IMAGE                            COMMAND             CREATED             STATUS                     PORTS                     NAMES&#xA;4bbeb39dc8dc        nodered/node-red:latest          &#34;npm start&#34;         4 seconds ago       Up 4 seconds               0.0.0.0:49154-&amp;gt;1880/tcp   furious_yalow&#xA;$&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now point a browser to the host machine on the tcp port reported back, so in the example above browse to &lt;code&gt;http://{host ip}:49154&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: as this does not mount the &lt;code&gt;/data&lt;/code&gt; volume externally any changes to flows will not be saved and if the container is redeployed or upgraded these will be lost. The volume may persist on the host filing sysem and can probably be retrieved and remounted if required.&lt;/p&gt; &#xA;&lt;h2&gt;Linking Containers&lt;/h2&gt; &#xA;&lt;p&gt;You can link containers &#34;internally&#34; within the docker runtime by using Docker &lt;a href=&#34;https://docs.docker.com/network/bridge/&#34;&gt;user-defined bridges&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Before using a bridge, it needs to be created. The command below will create a new bridge called &lt;strong&gt;iot&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker network create iot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then all containers that need to communicate need to be added to the same bridge using the &lt;strong&gt;--network&lt;/strong&gt; command line option&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -itd --network iot --name mybroker eclipse-mosquitto mosquitto -c /mosquitto-no-auth.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(no need to expose the port 1883 globally unless you want to... as we do magic below)&lt;/p&gt; &#xA;&lt;p&gt;Then run nodered docker, also added to the same bridge&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -itd -p 1880:1880 --network iot --name mynodered nodered/node-red&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;containers on the same user-defined bridge can take advantage of the built in name resolution provided by the bridge and use the container name (specified using the &lt;strong&gt;--name&lt;/strong&gt; option) as the target hostname.&lt;/p&gt; &#xA;&lt;p&gt;In the above example the broker can be reached from the Node-RED application using hostname &lt;em&gt;mybroker&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then a simple flow like below show the mqtt nodes connecting to the broker&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    [{&#34;id&#34;:&#34;c51cbf73.d90738&#34;,&#34;type&#34;:&#34;mqtt in&#34;,&#34;z&#34;:&#34;3fa278ec.8cbaf&#34;,&#34;name&#34;:&#34;&#34;,&#34;topic&#34;:&#34;test&#34;,&#34;broker&#34;:&#34;5673f1d5.dd5f1&#34;,&#34;x&#34;:290,&#34;y&#34;:240,&#34;wires&#34;:[[&#34;7781c73.639b8b8&#34;]]},{&#34;id&#34;:&#34;7008d6ef.b6ee38&#34;,&#34;type&#34;:&#34;mqtt out&#34;,&#34;z&#34;:&#34;3fa278ec.8cbaf&#34;,&#34;name&#34;:&#34;&#34;,&#34;topic&#34;:&#34;test&#34;,&#34;qos&#34;:&#34;&#34;,&#34;retain&#34;:&#34;&#34;,&#34;broker&#34;:&#34;5673f1d5.dd5f1&#34;,&#34;x&#34;:517,&#34;y&#34;:131,&#34;wires&#34;:[]},{&#34;id&#34;:&#34;ef5b970c.7c864&#34;,&#34;type&#34;:&#34;inject&#34;,&#34;z&#34;:&#34;3fa278ec.8cbaf&#34;,&#34;name&#34;:&#34;&#34;,&#34;repeat&#34;:&#34;&#34;,&#34;crontab&#34;:&#34;&#34;,&#34;once&#34;:false,&#34;topic&#34;:&#34;&#34;,&#34;payload&#34;:&#34;&#34;,&#34;payloadType&#34;:&#34;date&#34;,&#34;x&#34;:290,&#34;y&#34;:153,&#34;wires&#34;:[[&#34;7008d6ef.b6ee38&#34;]]},{&#34;id&#34;:&#34;7781c73.639b8b8&#34;,&#34;type&#34;:&#34;debug&#34;,&#34;z&#34;:&#34;3fa278ec.8cbaf&#34;,&#34;name&#34;:&#34;&#34;,&#34;active&#34;:true,&#34;tosidebar&#34;:true,&#34;console&#34;:false,&#34;tostatus&#34;:true,&#34;complete&#34;:&#34;payload&#34;,&#34;targetType&#34;:&#34;msg&#34;,&#34;statusVal&#34;:&#34;payload&#34;,&#34;statusType&#34;:&#34;auto&#34;,&#34;x&#34;:505,&#34;y&#34;:257,&#34;wires&#34;:[]},{&#34;id&#34;:&#34;5673f1d5.dd5f1&#34;,&#34;type&#34;:&#34;mqtt-broker&#34;,&#34;z&#34;:&#34;&#34;,&#34;name&#34;:&#34;&#34;,&#34;broker&#34;:&#34;mybroker&#34;,&#34;port&#34;:&#34;1883&#34;,&#34;clientid&#34;:&#34;&#34;,&#34;usetls&#34;:false,&#34;compatmode&#34;:false,&#34;keepalive&#34;:&#34;15&#34;,&#34;cleansession&#34;:true,&#34;birthTopic&#34;:&#34;&#34;,&#34;birthQos&#34;:&#34;0&#34;,&#34;birthRetain&#34;:&#34;false&#34;,&#34;birthPayload&#34;:&#34;&#34;,&#34;closeTopic&#34;:&#34;&#34;,&#34;closeRetain&#34;:&#34;false&#34;,&#34;closePayload&#34;:&#34;&#34;,&#34;willTopic&#34;:&#34;&#34;,&#34;willQos&#34;:&#34;0&#34;,&#34;willRetain&#34;:&#34;false&#34;,&#34;willPayload&#34;:&#34;&#34;}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This way the internal broker is not exposed outside of the docker host - of course you may add &lt;code&gt;-p 1883:1883&lt;/code&gt; etc to the broker run command if you want other systems outside your computer to be able to use the broker.&lt;/p&gt; &#xA;&lt;h3&gt;Docker-Compose linking example&lt;/h3&gt; &#xA;&lt;p&gt;Another way to link containers is by using docker-compose. The following docker-compose.yml file creates a Node-RED instance, and a local MQTT broker instance. In the Node-RED flow the broker can be addressed simply as &lt;code&gt;mybroker&lt;/code&gt; at its default port &lt;code&gt;1883&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;version: &#34;3.7&#34;&#xA;&#xA;services:&#xA;  mynodered:&#xA;    image: nodered/node-red&#xA;    restart: unless-stopped&#xA;    volumes:&#xA;      - /home/pi/.node-red:/data&#xA;    ports:&#xA;      - 1880:1880&#xA;  mybroker:&#xA;    image: eclipse-mosquitto&#xA;    restart: unless-stopped&#xA;    command: mosquitto -c /mosquitto-no-auth.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Debugging containers&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes it is useful to debug the code which is running inside the container. Two scripts (&lt;em&gt;&#39;debug&#39;&lt;/em&gt; and &lt;em&gt;&#39;debug_brk&#39;&lt;/em&gt; in the package.json file) are available to start NodeJs in debug mode, which means that NodeJs will start listening (to port 9229) for a debug client. Various remote debugger tools (like Visual Code, Chrome Developer Tools ...) can be used to debug a Node-RED application. A &lt;a href=&#34;https://github.com/node-red/node-red-docker/wiki/Debug-container-via-Chrome-Developer-Tools&#34;&gt;wiki&lt;/a&gt; page has been provided, to explain step-by-step how to use the Chrome Developer Tools debugger.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;In most cases the &lt;em&gt;&#39;debug&#39;&lt;/em&gt; script will be sufficient, to debug a Node-RED application that is fully up-and-running (i.e. when the application startup code is not relevant). The NodeJs server can be started in debug mode using following command:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker run -it -p 1880:1880 -p 9229:9229 -v node_red_data:/data --name mynodered --entrypoint npm nodered/node-red run debug -- --userDir /data&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In case debugging of the Node-RED startup code is required, the &lt;em&gt;&#39;debug_brk&#39;&lt;/em&gt; script will instruct NodeJs to break at the first statement of the Node-RED application. The NodeJs server can be started in debug mode using following command:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker run -it -p 1880:1880 -p 9229:9229 -v node_red_data:/data --name mynodered --entrypoint npm nodered/node-red run debug_brk -- --userDir /data&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that in this case NodeJs will wait - at the first statement of the Node-RED application - until a debugger client connects...&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;As soon as NodeJs is listening to the debug port, this will be shown in the startup log:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Debugger listening on ws://0.0.0.0:9229/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s dissect both commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    docker run              - run this container, initially building locally if necessary&#xA;    -it                     - attach a terminal session so we can see what is going on&#xA;    -p 1880:1880            - connect local port 1880 to the exposed internal port 1880&#xA;    -p 9229:9229            - connect local port 9229 to the exposed internal port 9229 (for debugger communication)&#xA;    -v node_red_data:/data  - mount the internal /data to the host mode_red_data directory&#xA;    --name mynodered        - give this machine a friendly local name&#xA;    --entrypoint npm        - overwrite the default entrypoint (which would run the *&#39;start&#39;* script)&#xA;    nodered/node-red        - the image to base it on - currently Node-RED v1.1.0&#xA;    run debug(_brk)         - (npm) arguments for the custom endpoint (which must be added AFTER the image name!)&#xA;    --                      - the arguments that will follow are not npm arguments, but need to be passed to the script&#xA;    --userDir /data         - instruct the script where the Node-RED data needs to be stored&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Common Issues and Hints&lt;/h2&gt; &#xA;&lt;p&gt;Here is a list of common issues users have reported with possible solutions.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;User Permission Errors&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/node-red/node-red-docker/wiki/Permissions-and-Persistence&#34;&gt;the wiki&lt;/a&gt; for detailed information on permissions.&lt;/p&gt; &#xA;&lt;p&gt;If you are seeing &lt;em&gt;permission denied&lt;/em&gt; errors opening files or accessing host devices, try running the container as the root user.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -it -p 1880:1880 -v node_red_data:/data --name mynodered -u root nodered/node-red&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/node-red/node-red/issues/15&#34;&gt;https://github.com/node-red/node-red/issues/15&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/node-red/node-red/issues/8&#34;&gt;https://github.com/node-red/node-red/issues/8&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Accessing Host Devices&lt;/h3&gt; &#xA;&lt;p&gt;If you want to access a device from the host inside the container, e.g. serial port, use the following command-line flag to pass access through.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -it -p 1880:1880 -v node_red_data:/data --name mynodered --device=/dev/ttyACM0 nodered/node-red&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/node-red/node-red/issues/15&#34;&gt;https://github.com/node-red/node-red/issues/15&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Setting Timezone&lt;/h3&gt; &#xA;&lt;p&gt;If you want to modify the default timezone, use the TZ environment variable with the &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones&#34;&gt;relevant timezone&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -it -p 1880:1880 -v node_red_data:/data --name mynodered -e TZ=America/New_York nodered/node-red&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or within a docker-compose file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  node-red:&#xA;    environment:&#xA;      - TZ=America/New_York&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/node-red/ieo5IVFAo2o&#34;&gt;https://groups.google.com/forum/#!topic/node-red/ieo5IVFAo2o&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt;</summary>
  </entry>
</feed>