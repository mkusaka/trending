<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-30T01:54:35Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>LukeSmithxyz/LARBS</title>
    <updated>2022-06-30T01:54:35Z</updated>
    <id>tag:github.com,2022-06-30:/LukeSmithxyz/LARBS</id>
    <link href="https://github.com/LukeSmithxyz/LARBS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Luke&#39;s Auto-Rice Bootstrapping Scripts: Installation Scripts for My Arch Linux Meta-Distribution&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Luke&#39;s Auto-Rice Bootstrapping Scripts (LARBS)&lt;/h1&gt; &#xA;&lt;h2&gt;Installation:&lt;/h2&gt; &#xA;&lt;p&gt;On an Arch-based distribution as root, run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -LO larbs.xyz/larbs.sh&#xA;sh larbs.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it.&lt;/p&gt; &#xA;&lt;h2&gt;What is LARBS?&lt;/h2&gt; &#xA;&lt;p&gt;LARBS is a script that autoinstalls and autoconfigures a fully-functioning and minimal terminal-and-vim-based Arch Linux environment.&lt;/p&gt; &#xA;&lt;p&gt;LARBS can be run on a fresh install of Arch or Artix Linux, and provides you with a fully configured diving-board for work or more customization.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;By default, LARBS uses the programs &lt;a href=&#34;https://raw.githubusercontent.com/LukeSmithxyz/LARBS/master/progs.csv&#34;&gt;here in progs.csv&lt;/a&gt; and installs &lt;a href=&#34;https://github.com/lukesmithxyz/voidrice&#34;&gt;my dotfiles repo (voidrice) here&lt;/a&gt;, but you can easily change this by either modifying the default variables at the beginning of the script or giving the script one of these options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-r&lt;/code&gt;: custom dotfiles repository (URL)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-p&lt;/code&gt;: custom programs list/dependencies (local file or URL)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-a&lt;/code&gt;: a custom AUR helper (must be able to install with &lt;code&gt;-S&lt;/code&gt; unless you change the relevant line in the script&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;The &lt;code&gt;progs.csv&lt;/code&gt; list&lt;/h3&gt; &#xA;&lt;p&gt;LARBS will parse the given programs list and install all given programs. Note that the programs file must be a three column &lt;code&gt;.csv&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The first column is a &#34;tag&#34; that determines how the program is installed, &#34;&#34; (blank) for the main repository, &lt;code&gt;A&lt;/code&gt; for via the AUR or &lt;code&gt;G&lt;/code&gt; if the program is a git repository that is meant to be &lt;code&gt;make &amp;amp;&amp;amp; sudo make install&lt;/code&gt;ed.&lt;/p&gt; &#xA;&lt;p&gt;The second column is the name of the program in the repository, or the link to the git repository, and the third column is a description (should be a verb phrase) that describes the program. During installation, LARBS will print out this information in a grammatical sentence. It also doubles as documentation for people who read the CSV and want to install my dotfiles manually.&lt;/p&gt; &#xA;&lt;p&gt;Depending on your own build, you may want to tactically order the programs in your programs file. LARBS will install from the top to the bottom.&lt;/p&gt; &#xA;&lt;p&gt;If you include commas in your program descriptions, be sure to include double quotes around the whole description to ensure correct parsing.&lt;/p&gt; &#xA;&lt;h3&gt;The script itself&lt;/h3&gt; &#xA;&lt;p&gt;The script is extensively divided into functions for easier readability and trouble-shooting. Most everything should be self-explanatory.&lt;/p&gt; &#xA;&lt;p&gt;The main work is done by the &lt;code&gt;installationloop&lt;/code&gt; function, which iterates through the programs file and determines based on the tag of each program, which commands to run to install it. You can easily add new methods of installations and tags as well.&lt;/p&gt; &#xA;&lt;p&gt;Note that programs from the AUR can only be built by a non-root user. What LARBS does to bypass this by default is to temporarily allow the newly created user to use &lt;code&gt;sudo&lt;/code&gt; without a password (so the user won&#39;t be prompted for a password multiple times in installation). This is done ad-hocly, but effectively with the &lt;code&gt;newperms&lt;/code&gt; function. At the end of installation, &lt;code&gt;newperms&lt;/code&gt; removes those settings, giving the user the ability to run only several basic sudo commands without a password (&lt;code&gt;shutdown&lt;/code&gt;, &lt;code&gt;reboot&lt;/code&gt;, &lt;code&gt;pacman -Syu&lt;/code&gt;).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>v1s1t0r1sh3r3/airgeddon</title>
    <updated>2022-06-30T01:54:35Z</updated>
    <id>tag:github.com,2022-06-30:/v1s1t0r1sh3r3/airgeddon</id>
    <link href="https://github.com/v1s1t0r1sh3r3/airgeddon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This is a multi-use bash script for Linux systems to audit wireless networks.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;airgeddon&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/v1s1t0r1sh3r3/airgeddon/master/CHANGELOG.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/version-11.01-blue.svg?style=flat-square&amp;amp;colorA=273133&amp;amp;colorB=0093ee&#34; alt=&#34;Version-shield&#34; title=&#34;Latest version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://tldp.org/LDP/abs/html/bashver4.html#AEN21220&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/bash-4.2%2B-blue.svg?style=flat-square&amp;amp;colorA=273133&amp;amp;colorB=00db00&#34; alt=&#34;Bash4.2-shield&#34; title=&#34;Bash 4.2 or later&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/v1s1t0r1sh3r3/airgeddon/master/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL%20v3%2B-blue.svg?style=flat-square&amp;amp;colorA=273133&amp;amp;colorB=bd0000&#34; alt=&#34;License-shield&#34; title=&#34;GPL v3+&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/v1s1t0r1sh3r3/airgeddon/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/cloud/automated/v1s1t0r1sh3r3/airgeddon.svg?style=flat-square&amp;amp;colorA=273133&amp;amp;colorB=a9a9a9&#34; alt=&#34;Docker-shield&#34; title=&#34;Docker rules!&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/sQ9dgt9&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/629812069964840991.svg?style=flat-square&amp;amp;colorA=273133&amp;amp;colorB=CBA317&amp;amp;logo=discord&amp;amp;label=Discord%20chat&#34; alt=&#34;Discord-shield&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=7ELM486P7XKKG&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/donate-paypal-blue.svg?style=flat-square&amp;amp;colorA=273133&amp;amp;colorB=b008bb&#34; alt=&#34;Paypal-shield&#34; title=&#34;Paypal&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Contributing-&amp;amp;-Code-of-Conduct&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/donate-cryptocurrencies-blue.svg?style=flat-square&amp;amp;colorA=273133&amp;amp;colorB=f7931a&#34; alt=&#34;Cryptocurrencies-shield&#34; title=&#34;Cryptocurrencies&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is a multi-use bash script for Linux systems to audit wireless networks.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/v1s1t0r1sh3r3/airgeddon/master/imgs/banners/airgeddon_banner.png&#34; alt=&#34;Banner&#34; title=&#34;We will conquer the earth!!&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;All the needed info about how to &#34;install | use | enjoy&#34; &lt;code&gt;airgeddon&lt;/code&gt; is present at &lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki&#34;&gt;Github&#39;s Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;I. Content &amp;amp; Features&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki&#34;&gt;Home&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Wallpapers&#34;&gt;Wallpapers&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;II. Requirements&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Compatibility&#34;&gt;Compatibility&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Cards%20and%20Chipsets&#34;&gt;Cards and Chipsets&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Wayland&#34;&gt;Wayland&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Consistent%20Network%20Device%20Naming&#34;&gt;Consistent Network Device Naming&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Kali%20Nethunter&#34;&gt;Kali Nethunter&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Essential%20Tools&#34;&gt;Essential Tools&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Optional%20Tools&#34;&gt;Optional Tools&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/BeEF%20Tips&#34;&gt;BeEF Tips&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Hashcat%20Tips&#34;&gt;Hashcat Tips&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Bettercap%20Tips&#34;&gt;Bettercap Tips&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Update%20Tools&#34;&gt;Update Tools&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Internal%20Tools&#34;&gt;Internal Tools&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Known%20incompatibilities&#34;&gt;Known incompatibilities&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;III. Getting started&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Installation%20&amp;amp;%20Usage&#34;&gt;Installation &amp;amp; Usage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Options&#34;&gt;Options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Docker&#34;&gt;Docker&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Docker%20Linux&#34;&gt;Linux&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Docker%20Mac%20OSX&#34;&gt;Mac OSX&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Docker%20Windows&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Other%20Sources&#34;&gt;Other Sources&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/FAQ%20&amp;amp;%20Troubleshooting&#34;&gt;FAQ &amp;amp; Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;IV. Project &amp;amp; Development&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Plugins%20System&#34;&gt;Plugins system&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Plugins%20Development&#34;&gt;Plugins development&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Plugins%20Hall%20of%20Fame&#34;&gt;Plugins Hall of Fame&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Supported%20Languages&#34;&gt;Supported Languages&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Contributing-&amp;amp;-Code-of-Conduct&#34;&gt;Contributing &amp;amp; Code of Conduct&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Changelog&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Disclaimer%20&amp;amp;%20License&#34;&gt;Disclaimer &amp;amp; License&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Contact&#34;&gt;Contact&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;V. Acknowledgments &amp;amp; References&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Hat%20Tip%20To&#34;&gt;Hat Tip To&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Inspiration&#34;&gt;Inspiration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://hitcounter.pythonanywhere.com/count/tag.svg?url=https%3A%2F%2Fgithub.com%2Fv1s1t0r1sh3r3%2Fairgeddon&#34; alt=&#34;Hits-badge&#34; title=&#34;v1s1t0rs&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>brendangregg/perf-tools</title>
    <updated>2022-06-30T01:54:35Z</updated>
    <id>tag:github.com,2022-06-30:/brendangregg/perf-tools</id>
    <link href="https://github.com/brendangregg/perf-tools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Performance analysis tools based on Linux perf_events (aka perf) and ftrace&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;perf-tools&lt;/h1&gt; &#xA;&lt;p&gt;A miscellaneous collection of in-development and unsupported performance analysis tools for Linux ftrace and perf_events (aka the &#34;perf&#34; command). Both ftrace and perf are core Linux tracing tools, included in the kernel source. Your system probably has ftrace already, and perf is often just a package add (see Prerequisites).&lt;/p&gt; &#xA;&lt;p&gt;These tools are designed to be easy to install (fewest dependencies), provide advanced performance observability, and be simple to use: do one thing and do it well. This collection was created by Brendan Gregg (author of the DTraceToolkit).&lt;/p&gt; &#xA;&lt;p&gt;Many of these tools employ workarounds so that functionality is possible on existing Linux kernels. Because of this, many tools have caveats (see man pages), and their implementation should be considered a placeholder until future kernel features, or new tracing subsystems, are added.&lt;/p&gt; &#xA;&lt;p&gt;These are intended for Linux 3.2 and newer kernels. For Linux 2.6.x, see Warnings.&lt;/p&gt; &#xA;&lt;h2&gt;Presentation&lt;/h2&gt; &#xA;&lt;p&gt;These tools were introduced in the USENIX LISA 2014 presentation: Linux Performance Analysis: New Tools and Old Secrets&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;slides: &lt;a href=&#34;http://www.slideshare.net/brendangregg/linux-performance-analysis-new-tools-and-old-secrets&#34;&gt;http://www.slideshare.net/brendangregg/linux-performance-analysis-new-tools-and-old-secrets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;video: &lt;a href=&#34;https://www.usenix.org/conference/lisa14/conference-program/presentation/gregg&#34;&gt;https://www.usenix.org/conference/lisa14/conference-program/presentation/gregg&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;center&gt;&#xA; &lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/images/perf-tools_2016.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/images/perf-tools_2016.png&#34; border=&#34;0&#34; width=&#34;700&#34;&gt;&lt;/a&gt;&#xA;&lt;/center&gt; &#xA;&lt;p&gt;Using ftrace:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/iosnoop&#34;&gt;iosnoop&lt;/a&gt;: trace disk I/O with details including latency. &lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/examples/iosnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/iolatency&#34;&gt;iolatency&lt;/a&gt;: summarize disk I/O latency as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/examples/iolatency_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/execsnoop&#34;&gt;execsnoop&lt;/a&gt;: trace process exec() with command line argument details. &lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/examples/execsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/opensnoop&#34;&gt;opensnoop&lt;/a&gt;: trace open() syscalls showing filenames. &lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/examples/opensnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/killsnoop&#34;&gt;killsnoop&lt;/a&gt;: trace kill() signals showing process and signal details. &lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/examples/killsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;fs/&lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/fs/cachestat&#34;&gt;cachestat&lt;/a&gt;: basic cache hit/miss statistics for the Linux page cache. &lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/examples/cachestat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;net/&lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/net/tcpretrans&#34;&gt;tcpretrans&lt;/a&gt;: show TCP retransmits, with address and other details. &lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/examples/tcpretrans_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;system/&lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/system/tpoint&#34;&gt;tpoint&lt;/a&gt;: trace a given tracepoint. &lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/examples/tpoint_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;kernel/&lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/kernel/funccount&#34;&gt;funccount&lt;/a&gt;: count kernel function calls, matching a string with wildcards. &lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/examples/funccount_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;kernel/&lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/kernel/functrace&#34;&gt;functrace&lt;/a&gt;: trace kernel function calls, matching a string with wildcards. &lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/examples/functrace_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;kernel/&lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/kernel/funcslower&#34;&gt;funcslower&lt;/a&gt;: trace kernel functions slower than a threshold. &lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/examples/funcslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;kernel/&lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/kernel/funcgraph&#34;&gt;funcgraph&lt;/a&gt;: trace a graph of kernel function calls, showing children and times. &lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/examples/funcgraph_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;kernel/&lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/kernel/kprobe&#34;&gt;kprobe&lt;/a&gt;: dynamically trace a kernel function call or its return, with variables. &lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/examples/kprobe_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;user/&lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/user/uprobe&#34;&gt;uprobe&lt;/a&gt;: dynamically trace a user-level function call or its return, with variables. &lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/examples/uprobe_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/tools/reset-ftrace&#34;&gt;reset-ftrace&lt;/a&gt;: reset ftrace state if needed. &lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/examples/reset-ftrace_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Using perf_events:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;misc/&lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/misc/perf-stat-hist&#34;&gt;perf-stat-hist&lt;/a&gt;: power-of aggregations for tracepoint variables. &lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/examples/perf-stat-hist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/syscount&#34;&gt;syscount&lt;/a&gt;: count syscalls by syscall or process. &lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/examples/syscount_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;disk/&lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/disk/bitesize&#34;&gt;bitesize&lt;/a&gt;: histogram summary of disk I/O size. &lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/examples/bitesize_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Using eBPF:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;As a preview of things to come, see the bcc tracing &lt;a href=&#34;https://github.com/iovisor/bcc/raw/master/README.md#tracing&#34;&gt;Tools section&lt;/a&gt;. These use &lt;a href=&#34;https://github.com/iovisor/bcc&#34;&gt;bcc&lt;/a&gt;, a front end for using &lt;a href=&#34;http://www.brendangregg.com/blog/2015-05-15/ebpf-one-small-step.html&#34;&gt;eBPF&lt;/a&gt;. bcc+eBPF will allow some of these tools to be rewritten and improved, and additional tools to be created.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;Showing new processes and arguments:&lt;/p&gt; &#xA;&lt;pre&gt;# &lt;b&gt;./execsnoop&lt;/b&gt; &#xA;Tracing exec()s. Ctrl-C to end.&#xA;   PID   PPID ARGS&#xA; 22898  22004 man ls&#xA; 22905  22898 preconv -e UTF-8&#xA; 22908  22898 pager -s&#xA; 22907  22898 nroff -mandoc -rLL=164n -rLT=164n -Tutf8&#xA; 22906  22898 tbl&#xA; 22911  22910 locale charmap&#xA; 22912  22907 groff -mtty-char -Tutf8 -mandoc -rLL=164n -rLT=164n&#xA; 22913  22912 troff -mtty-char -mandoc -rLL=164n -rLT=164n -Tutf8&#xA; 22914  22912 grotty&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;Measuring block device I/O latency from queue insert to completion:&lt;/p&gt; &#xA;&lt;pre&gt;# &lt;b&gt;./iolatency -Q&lt;/b&gt;&#xA;Tracing block I/O. Output every 1 seconds. Ctrl-C to end.&#xA;&#xA;  &amp;gt;=(ms) .. &amp;lt;(ms)   : I/O      |Distribution                          |&#xA;       0 -&amp;gt; 1       : 1913     |######################################|&#xA;       1 -&amp;gt; 2       : 438      |#########                             |&#xA;       2 -&amp;gt; 4       : 100      |##                                    |&#xA;       4 -&amp;gt; 8       : 145      |###                                   |&#xA;       8 -&amp;gt; 16      : 43       |#                                     |&#xA;      16 -&amp;gt; 32      : 43       |#                                     |&#xA;      32 -&amp;gt; 64      : 1        |#                                     |&#xA;&#xA;[...]&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;Tracing the block:block_rq_insert tracepoint, with kernel stack traces, and only for reads:&lt;/p&gt; &#xA;&lt;pre&gt;# &lt;b&gt;./tpoint -s block:block_rq_insert &#39;rwbs ~ &#34;*R*&#34;&#39;&lt;/b&gt;&#xA;   cksum-11908 [000] d... 7269839.919098: block_rq_insert: 202,1 R 0 () 736560 + 136 [cksum]&#xA;   cksum-11908 [000] d... 7269839.919107: &#xA; &lt;stack trace&gt;&#xA;  &#xA; =&amp;gt; __elv_add_request&#xA; =&amp;gt; blk_flush_plug_list&#xA; =&amp;gt; blk_finish_plug&#xA; =&amp;gt; __do_page_cache_readahead&#xA; =&amp;gt; ondemand_readahead&#xA; =&amp;gt; page_cache_async_readahead&#xA; =&amp;gt; generic_file_read_iter&#xA; =&amp;gt; new_sync_read&#xA; =&amp;gt; vfs_read&#xA; =&amp;gt; SyS_read&#xA; =&amp;gt; system_call_fastpath&#xA;&#xA;[...]&#xA;&#xA; &lt;/stack&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Count kernel function calls beginning with &#34;bio_&#34;, summarize every second:&lt;/p&gt; &#xA;&lt;pre&gt;# &lt;b&gt;./funccount -i 1 &#39;bio_*&#39;&lt;/b&gt;&#xA;Tracing &#34;bio_*&#34;... Ctrl-C to end.&#xA;&#xA;FUNC                              COUNT&#xA;bio_attempt_back_merge               26&#xA;bio_get_nr_vecs                     361&#xA;bio_alloc                           536&#xA;bio_alloc_bioset                    536&#xA;bio_endio                           536&#xA;bio_free                            536&#xA;bio_fs_destructor                   536&#xA;bio_init                            536&#xA;bio_integrity_enabled               536&#xA;bio_put                             729&#xA;bio_add_page                       1004&#xA;&#xA;[...]&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;There are many more examples in the &lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/examples&#34;&gt;examples&lt;/a&gt; directory. Also see the &lt;a href=&#34;https://raw.githubusercontent.com/brendangregg/perf-tools/master/man/man8&#34;&gt;man pages&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;The intent is as few as possible. Eg, a Linux 3.2 server without debuginfo. See the tool man page for specifics.&lt;/p&gt; &#xA;&lt;h3&gt;ftrace&lt;/h3&gt; &#xA;&lt;p&gt;FTRACE configured in the kernel. You may already have this configured and available in your kernel version, as FTRACE was first added in 2.6.27. This requires CONFIG_FTRACE and other FTRACE options depending on the tool. Some tools (eg, funccount) require CONFIG_FUNCTION_PROFILER.&lt;/p&gt; &#xA;&lt;h3&gt;perf_events&lt;/h3&gt; &#xA;&lt;p&gt;Requires the &#34;perf&#34; command to be installed. This is in the linux-tools-common package. After installing that, perf may tell you to install an additional linux-tools package (linux-tools-&lt;em&gt;kernel_version&lt;/em&gt;). perf can also be built under tools/perf in the kernel source. See &lt;a href=&#34;http://www.brendangregg.com/perf.html#Prerequisites&#34;&gt;perf_events Prerequisites&lt;/a&gt; for more details about getting perf_events to work fully.&lt;/p&gt; &#xA;&lt;h3&gt;debugfs&lt;/h3&gt; &#xA;&lt;p&gt;Requires a kernel with CONFIG_DEBUG_FS option enabled. As with FTRACE, this may already be enabled (debugfs was added in 2.6.10-rc3). The debugfs also needs to be mounted:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# mount -t debugfs none /sys/kernel/debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;awk&lt;/h3&gt; &#xA;&lt;p&gt;Many of there scripts use awk, and will try to use either mawk or gawk depending on the desired behavior: mawk for buffered output (because of its speed), and gawk for synchronous output (as fflush() works, allowing more efficient grouping of writes).&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;These are just scripts. Either grab everything:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --depth 1 https://github.com/brendangregg/perf-tools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use the raw links on github to download individual scripts. Eg:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget https://raw.githubusercontent.com/brendangregg/perf-tools/master/iosnoop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This preserves tabs (which copy-n-paste can mess up).&lt;/p&gt; &#xA;&lt;h2&gt;Warnings&lt;/h2&gt; &#xA;&lt;p&gt;Ftrace was first added to Linux 2.6.27, and perf_events to Linux 2.6.31. These early versions had kernel bugs, and lockups and panics have been reported on 2.6.32 series kernels. This includes CentOS 6.x. If you must analyze older kernels, these tools may only be useful in a fault-tolerant environment, such as a lab with simulated issues. These tools have been primarily developed on Linux 3.2 and later kernels.&lt;/p&gt; &#xA;&lt;p&gt;Depending on the tool, there may also be overhead incurred. See the next section.&lt;/p&gt; &#xA;&lt;h2&gt;Internals and Overhead&lt;/h2&gt; &#xA;&lt;p&gt;perf_events is evolving. This collection began development circa Linux 3.16, with Linux 3.2 servers as the main target, at a time when perf_events lacks certain programmatic capabilities (eg, custom in-kernel aggregations). It&#39;s possible these will be added in a forthcoming kernel release. Until then, many of these tools employ workarounds, tricks, and hacks in order to work. Some of these tools pass event data to user space for post-processing, which costs much higher overhead than in-kernel aggregations. The overhead of each tool is described in its man page.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: In &lt;em&gt;extreme&lt;/em&gt; cases, your target application may run 5x slower when using these tools. Depending on the tool and kernel version, there may also be the risk of kernel panics. Read the program header for warnings, and test before use.&lt;/p&gt; &#xA;&lt;p&gt;If the overhead is a problem, these tools can be improved. If a tool doesn&#39;t already, it could be rewritten in C to use perf_events_open() and mmap() for the trace buffer. It could also implement frequency counts in C, and operate on mmap() directly, rather than using awk/Perl/Python. Additional improvements are possible for ftrace-based tools, such as use of snapshots and per-instance buffers.&lt;/p&gt; &#xA;&lt;p&gt;Some of these tools are intended as short-term workarounds until more kernel capabilities exist, at which point they can be substantially rewritten. Older versions of these tools will be kept in this repository, for older kernel versions.&lt;/p&gt; &#xA;&lt;p&gt;As my main target is a fleet of Linux 3.2 servers that do not have debuginfo, these tools try not to require it. At times, this makes the tool more brittle than it needs to be, as I&#39;m employing workarounds (that may be kernel version and platform specific) instead of using debuginfo information (which can be generic). See the man page for detailed prerequisites for each tool.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve tried to use perf_events (&#34;perf&#34;) where possible, since that interface has been developed for multi-user use. For various reasons I&#39;ve often needed to use ftrace instead. ftrace is surprisingly powerful (thanks Steven Rostedt!), and not all of its features are exposed via perf, or in common usage. This tool collection is in some ways a demonstration of hidden Linux features using ftrace.&lt;/p&gt; &#xA;&lt;p&gt;Since things are changing, it&#39;s very possible you may find some tools don&#39;t work on your Linux kernel version. Some expertise and assembly will be required to fix them.&lt;/p&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;p&gt;A case study and summary:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;13 Aug 2014: &lt;a href=&#34;http://lwn.net/Articles/608497&#34;&gt;http://lwn.net/Articles/608497&lt;/a&gt; Ftrace: The hidden light switch&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Related articles:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;28 Jun 2015: &lt;a href=&#34;http://www.brendangregg.com/blog/2015-06-28/linux-ftrace-uprobe.html&#34;&gt;http://www.brendangregg.com/blog/2015-06-28/linux-ftrace-uprobe.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;31 Dec 2014: &lt;a href=&#34;http://www.brendangregg.com/blog/2014-12-31/linux-page-cache-hit-ratio.html&#34;&gt;http://www.brendangregg.com/blog/2014-12-31/linux-page-cache-hit-ratio.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;06 Sep 2014: &lt;a href=&#34;http://www.brendangregg.com/blog/2014-09-06/linux-ftrace-tcp-retransmit-tracing.html&#34;&gt;http://www.brendangregg.com/blog/2014-09-06/linux-ftrace-tcp-retransmit-tracing.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;28 Jul 2014: &lt;a href=&#34;http://www.brendangregg.com/blog/2014-07-28/execsnoop-for-linux.html&#34;&gt;http://www.brendangregg.com/blog/2014-07-28/execsnoop-for-linux.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;25 Jul 2014: &lt;a href=&#34;http://www.brendangregg.com/blog/2014-07-25/opensnoop-for-linux.html&#34;&gt;http://www.brendangregg.com/blog/2014-07-25/opensnoop-for-linux.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;23 Jul 2014: &lt;a href=&#34;http://www.brendangregg.com/blog/2014-07-23/linux-iosnoop-latency-heat-maps.html&#34;&gt;http://www.brendangregg.com/blog/2014-07-23/linux-iosnoop-latency-heat-maps.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;16 Jul 2014: &lt;a href=&#34;http://www.brendangregg.com/blog/2014-07-16/iosnoop-for-linux.html&#34;&gt;http://www.brendangregg.com/blog/2014-07-16/iosnoop-for-linux.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;10 Jul 2014: &lt;a href=&#34;http://www.brendangregg.com/blog/2014-07-10/perf-hacktogram.html&#34;&gt;http://www.brendangregg.com/blog/2014-07-10/perf-hacktogram.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>