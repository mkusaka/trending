<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-10T01:45:09Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ping11700/LOLKit</title>
    <updated>2023-08-10T01:45:09Z</updated>
    <id>tag:github.com,2023-08-10:/ping11700/LOLKit</id>
    <link href="https://github.com/ping11700/LOLKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;One gift for all LOL gamers， LOL工具&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LOLKit 点击右侧的Releases 下载&lt;/h1&gt; &#xA;&lt;p&gt;此项目涉及到账号密码安全问题，故而不开源&lt;/p&gt; &#xA;&lt;p&gt;自开发这个软件起, 账户的安全问题让作者焦头烂额, 自此有了三层安全层,&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;舍弃联网, 因而舍弃了绝大部分功能, 也限制了软件的拓展&lt;/li&gt; &#xA; &lt;li&gt;账户非对称加密&lt;/li&gt; &#xA; &lt;li&gt;手动输入密码功能, 本地不再记录密码&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;不开源的原因, 想必有过独立开发经验的开发者都知道, 开源后的不可管控性 &lt;img src=&#34;https://raw.githubusercontent.com/ping11700/LOLKit/main/GUI.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;主要功能: 一键登录LOL;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;不影响游戏的任何平衡性, 也希望大家一起营造好的游戏氛围;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;密码安全问题: 加密了账号密码, 为了小伙伴安心, 不考虑联网;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;软件缺陷: 在关键点击时刻, 不可操作鼠标, 否则可能会启动游戏失败;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;• version1.0.0&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;绕开wegame, 一键登录;&lt;/li&gt; &#xA; &lt;li&gt;瘦身lol, 删除lol中嵌入的wegame, cross(tx游戏直播等);&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;• version1.1.0&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;添加游戏的选区功能;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;• version1.1.1&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;感谢B站小伙伴 &#34;小卖部管理员&#34; 提出的Bug: 无法删除wegame.(已修复);&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;• version1.2.0&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;感谢B站小伙伴&#34;人所具有的摩尔&#34;提出的优化建议. 密码栏可视切换(已优化);&lt;/li&gt; &#xA; &lt;li&gt;感谢B站小伙伴&#34;98531949&#34;提出&#34;启动时提示更新wegame问题&#34;(已修复);&lt;/li&gt; &#xA; &lt;li&gt;感谢B站小伙伴&#34;橘橘月&#34;提出的优化建议. 启动时关闭音乐&#34;(未优化);&lt;/li&gt; &#xA; &lt;li&gt;添加自动检测游戏路径功能;&lt;/li&gt; &#xA; &lt;li&gt;添加强制退出游戏对局功能, 无需等待倒计时;&lt;/li&gt; &#xA; &lt;li&gt;新增托盘系统;&lt;/li&gt; &#xA; &lt;li&gt;优化UI;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;• version1.3.0&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;感谢B站小伙伴&#34;橘橘月&#34;提出的优化建议. 启动时关闭音乐&#34;(已优化);&lt;/li&gt; &#xA; &lt;li&gt;感谢B站小伙伴&#34;甘雨烟&#34;提出的问题. 部分win7运行问题(已修复);&lt;/li&gt; &#xA; &lt;li&gt;感谢B站小伙伴&#34;ze7ZED&#34;提出的优化建议. 添加多个账号管理&#34;(已优化);&lt;/li&gt; &#xA; &lt;li&gt;系统浏览器打开项目GitHub更新网址;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;• version1.4.0&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;深度清理LOL内部无用tx插件;&lt;/li&gt; &#xA; &lt;li&gt;新增手动输入密码功能, 此功能开启本机不在记录用户密码;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;• version1.5.0&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;新增LOL下载安装功能;&lt;/li&gt; &#xA; &lt;li&gt;新增TraceWindow;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;视频演示: 【合集·one gift for all lol gamers-哔哩哔哩】 &lt;a href=&#34;https://b23.tv/RsmgaSi&#34;&gt;https://b23.tv/RsmgaSi&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lukechilds/humanscript</title>
    <updated>2023-08-10T01:45:09Z</updated>
    <id>tag:github.com,2023-08-10:/lukechilds/humanscript</id>
    <link href="https://github.com/lukechilds/humanscript" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A truly natural scripting language&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/lukechilds/humanscript/main/logo.webp&#34; height=&#34;150&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;humanscript&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A truly natural scripting language&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;humanscript is an inferpreter. A script interpreter that infers the meaning behind commands written in natural language using large language models. Human writeable commands are translated into code that is then executed on the fly. There is no predefined syntax, humanscripts just say what they want to happen, and when you execute them, it happens.&lt;/p&gt; &#xA;&lt;p&gt;The humanscript inferpreter supports a wide range of LLM backends. It can be used with cloud hosted LLMs like OpenAI&#39;s GPT-3.5 and GPT-4 or locally running open source LLMs like Llama 2.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;This is a humanscript called &lt;code&gt;tidy-screenshots&lt;/code&gt;. It takes an unorganised directory of screenshots and organises them into directories based on the month the screenshot was taken.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/usr/bin/env humanscript&#xA;&#xA;loop over all files (ignoring directories) in $HOME/Screenshots&#xA;&#xA;move each file into a subdirectory in the format year-month&#xA;&#xA;while the task is running show an ascii loading spinner&#xA;&#xA;show how many files where moved&#xA;&#xA;show the size of each subdirectory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It can be executed like any other script.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ./tidy-screenshots&#xA;Moved 593 files.&#xA;364K    2023-08&#xA;2.3M    2023-02&#xA;5.4M    2022-09&#xA;5.8M    2023-03&#xA;6.9M    2022-07&#xA;7.4M    2023-04&#xA; 10M    2023-01&#xA; 12M    2022-01&#xA; 13M    2022-10&#xA; 14M    2022-03&#xA; 16M    2022-11&#xA; 16M    2022-12&#xA; 18M    2022-02&#xA; 19M    2021-11&#xA; 20M    2021-12&#xA; 23M    2021-09&#xA; 23M    2022-05&#xA; 28M    2023-07&#xA; 30M    2022-04&#xA; 30M    2023-05&#xA; 30M    2023-06&#xA; 35M    2022-06&#xA; 38M    2021-10&#xA; 66M    2022-08&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The LLM inferpreted the humanscript into the following bash script at runtime.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/usr/bin/env bash&#xA;&#xA;spinner() {&#xA;    local i sp n&#xA;    sp=&#39;⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏&#39;&#xA;    n=${#sp}&#xA;    while sleep 0.1; do&#xA;        printf &#34;%s\r&#34; &#34;${sp:i++%n:1}&#34;&#xA;    done&#xA;}&#xA;&#xA;spinner &amp;amp;&#xA;&#xA;spinner_pid=$!&#xA;&#xA;moved_count=0&#xA;&#xA;for file in &#34;$HOME/Screenshots&#34;/*; do&#xA;    if [ -f &#34;$file&#34; ]; then&#xA;        dir=&#34;$HOME/Screenshots/$(date -r &#34;$file&#34; &#34;+%Y-%m&#34;)&#34;&#xA;        mkdir -p &#34;$dir&#34;&#xA;        mv &#34;$file&#34; &#34;$dir&#34;&#xA;        ((moved_count++))&#xA;    fi&#xA;done&#xA;&#xA;kill &#34;$spinner_pid&#34;&#xA;&#xA;echo &#34;Moved $moved_count files.&#34;&#xA;&#xA;du -sh &#34;$HOME/Screenshots&#34;/* | sed &#34;s|$HOME/Screenshots/||&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The code is streamed out of the LLM during inferpretation and executed line by line so execution is not blocked waiting for inference to finish. The generated code is cached on first run and will be executed instantly on subsequent runs, bypassing the need for reinferpretation.&lt;/p&gt; &#xA;&lt;p&gt;You can see it in action here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lukechilds/humanscript/main/demo.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Install humanscript&lt;/h3&gt; &#xA;&lt;p&gt;You can run humanscript in a sandboxed environment via Docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -it lukechilds/humanscript&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively you can install it natively on your system with Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install lukechilds/tap/humanscript&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or manually install by downloading this repository and copy/symlink &lt;code&gt;humanscript&lt;/code&gt; into your PATH.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Be careful if you&#39;re running humanscript unsandboxed. The inferpreter can sometimes do weird and dangerous things. Speaking from experience, unless you want to be doing a system restore at 2am on a saturday evening, you should atleast run humanscripts initially with &lt;code&gt;HUMANSCRIPT_EXECUTE=&#34;false&#34;&lt;/code&gt; so you can check the resulting code before executing.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Write and execute a humanscript&lt;/h3&gt; &#xA;&lt;p&gt;humanscript is configured out of the box to use OpenAI&#39;s GPT-4, you just need to add your API key.&lt;/p&gt; &#xA;&lt;p&gt;We need to add it to &lt;code&gt;~/.humanscript/config&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir -p ~/.humanscript/&#xA;echo &#39;HUMANSCRIPT_API_KEY=&#34;&amp;lt;your-openai-api-key&amp;gt;&#34;&#39; &amp;gt;&amp;gt; ~/.humanscript/config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can create a humanscript and make it executable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;echo &#39;#!/usr/bin/env humanscript&#xA;print an ascii art human&#39; &amp;gt; asciiman&#xA;chmod +x asciiman&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then execute it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./asciiman&#xA;  O&#xA; /|\&#xA; / \&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;All environment variables can be added to &lt;code&gt;~/.humanscript/config&lt;/code&gt; to be applied globally to all humanscripts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cat ~/.humanscript/config&#xA;HUMANSCRIPT_API_KEY=&#34;sk-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&#34;&#xA;HUMANSCRIPT_MODEL=&#34;gpt-4&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or on a per script basis:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ HUMANSCRIPT_REGENERATE=&#34;true&#34; ./asciiman&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;HUMANSCRIPT_API&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;https://api.openai.com/v1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;A server following OpenAI&#39;s Chat Completion API.&lt;/p&gt; &#xA;&lt;p&gt;Many local proxies exist that implement this API in front of locally running LLMs like Llama 2. &lt;a href=&#34;https://lmstudio.ai/&#34;&gt;LM Studio&lt;/a&gt; is a good option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;HUMANSCRIPT_API=&#34;http://localhost:1234/v1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;HUMANSCRIPT_API_KEY&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;unset&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The API key to be sent to the LLM backend. Only needed when using OpenAI.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;HUMANSCRIPT_API_KEY=&#34;sk-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;HUMANSCRIPT_MODEL&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;gpt-4&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The model to use for inference.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;HUMANSCRIPT_MODEL=&#34;gpt-3.5&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;HUMANSCRIPT_EXECUTE&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Whether or not the humanscript inferpreter should automatically execute the generated code on the fly.&lt;/p&gt; &#xA;&lt;p&gt;If false the generated code will not be executed and instead be streamed to stdout.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;HUMANSCRIPT_EXECUTE=&#34;false&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;HUMANSCRIPT_REGENERATE&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Whether or not the humanscript inferpreter should regenerate a cached humanscript.&lt;/p&gt; &#xA;&lt;p&gt;If true the humanscript will be reinferpreted and the cache entry will be replaced with the newly generated code. Due to the nondeterministic nature of LLMs each time you reinferpret a humanscript you will get a similar but slightly different output.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;HUMANSCRIPT_REGENERATE=&#34;true&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT © Luke Childs&lt;/p&gt;</summary>
  </entry>
</feed>