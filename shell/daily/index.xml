<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-05T01:35:54Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>availproject/availup</title>
    <updated>2024-04-05T01:35:54Z</updated>
    <id>tag:github.com,2024-04-05:/availproject/availup</id>
    <link href="https://github.com/availproject/availup" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Availup&lt;/h2&gt; &#xA;&lt;p&gt;To run an Avail light client, simply run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -sL1 avail.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or, with &lt;code&gt;wget&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget --https-only --secure-protocol=TLSv1_2 --quiet -O - avail.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can pass additional flags to the script like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -sL1 avail.sh | bash -s -- --network goldberg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently available flags are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;network&lt;/code&gt;: can be one of the following: [&lt;code&gt;goldberg&lt;/code&gt;, &lt;code&gt;local&lt;/code&gt;]&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;config&lt;/code&gt;: path to the configuration file, availup will generate a config if this flag is not specified &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This flag is always required when running a local testnet&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;identity&lt;/code&gt;: path to the identity file, availup will generate a config if this flag is not specified &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;It is important to keep your identity file safe!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;app_id&lt;/code&gt;: application ID to run the light client (defaults to &lt;code&gt;0&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;It is recommended to not change this flag unless you require the app-specific mode.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;upgrade&lt;/code&gt;: takes &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;yes&lt;/code&gt; as valid arguments, indicating that the &lt;code&gt;avail-light&lt;/code&gt; binary should be upgraded &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Using this flag wipes your existing data and config, use with caution! This flag does not guarantee that the binary will be upgraded.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;force_wsl&lt;/code&gt;: takes &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;yes&lt;/code&gt; as valid arguments, the script exits on WSL systems by default. This flag can removed in the future.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can use a custom config by passing it to &lt;code&gt;availup&lt;/code&gt; as a flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# create the config:&#xA;touch ~/config.yml&#xA;# edit the config:&#xA;nano ~/config.yml&#xA;# and rerunning the script:&#xA;curl -sL1 avail.sh | bash -s -- --config ~/config.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ö†Ô∏è It is not recommended to modify the default config stored in &lt;code&gt;~/.avail/config/config.yml&lt;/code&gt; as that gets wiped on each run.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you have a seed phrase that you&#39;d like to use instead of the generated one, you can modify &lt;code&gt;~/.avail/identity/identity.toml&lt;/code&gt;, alternatively, you can pass it as a flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# edit default identity&#xA;nano ~/.avail/identity/identity.toml&#xA;# the script picks up the new identity automatically:&#xA;curl -sL1 avail.sh | bash&#xA;# create a new identity&#xA;touch ~/identity.toml&#xA;nano ~/identity.toml&#xA;# the script uses the identity at the path&#xA;curl -sL1 avail.sh | bash -s -- --identity ~/identity.toml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ÑπÔ∏è The script persists your identity file between runs. Deleting the file will cause a new one to be generated on the next run.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Alternatively, you can pass a specific application ID with &lt;code&gt;availup&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rm ~/.avail/goldberg/config.yml&#xA;# and rerunning the script with flags:&#xA;curl -sL1 avail.sh | bash -s -- --app_id 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ÑπÔ∏è Adding an app ID disables the LC mode and runs your client in an app-specific mode, this might not be your intention.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To upgrade the light client to the latest supported version, you can simply pass the &lt;code&gt;--upgrade&lt;/code&gt; flag like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -sL1 avail.sh | bash -s -- --upgrade y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ÑπÔ∏è Upgrading the LC only works if the binary was installed with the latest &lt;code&gt;availup&lt;/code&gt; script or cargo.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To run the light client on WSL systems, use the &lt;code&gt;--force_wsl&lt;/code&gt; flag like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -sL1 avail.sh | bash -s -- --force_wsl y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ÑπÔ∏è Running this flag on any other system does nothing.&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>gpakosz/.tmux</title>
    <updated>2024-04-05T01:35:54Z</updated>
    <id>tag:github.com,2024-04-05:/gpakosz/.tmux</id>
    <link href="https://github.com/gpakosz/.tmux" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üá´üá∑ Oh my tmux! My self-contained, pretty &amp; versatile tmux configuration made with ‚ù§Ô∏è&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;.tmux&lt;/h1&gt; &#xA;&lt;p&gt;Self-contained, pretty and versatile &lt;code&gt;.tmux.conf&lt;/code&gt; configuration file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/553208/19740585/85596a5a-9bbf-11e6-8aa1-7c8d9829c008.gif&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;tmux &lt;strong&gt;&lt;code&gt;&amp;gt;= 2.6&lt;/code&gt;&lt;/strong&gt; running inside Linux, Mac, OpenBSD, Cygwin or WSL&lt;/li&gt; &#xA; &lt;li&gt;awk, perl and sed&lt;/li&gt; &#xA; &lt;li&gt;outside of tmux, &lt;code&gt;$TERM&lt;/code&gt; must be set to &lt;code&gt;xterm-256color&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;‚ö†Ô∏è Before installing, you may want to backup your existing configuration.&lt;/p&gt; &#xA;&lt;p&gt;You can install Oh my tmux! at any of the following locations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;~&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$XDG_CONFIG_HOME/tmux&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/.config/tmux&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Installing in &lt;code&gt;~&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd&#xA;$ git clone https://github.com/gpakosz/.tmux.git&#xA;$ ln -s -f .tmux/.tmux.conf&#xA;$ cp .tmux/.tmux.conf.local .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Installing in &lt;code&gt;$XDG_CONFIG_HOME/tmux&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/gpakosz/.tmux.git &#34;/path/to/oh-my-tmux&#34;&#xA;$ mkdir -p &#34;$XDG_CONFIG_HOME/tmux&#34;&#xA;$ ln -s &#34;/path/to/oh-my-tmux/.tmux.conf&#34; &#34;$XDG_CONFIG_HOME/tmux/tmux.conf&#34;&#xA;$ cp &#34;/path/to/oh-my-tmux/.tmux.conf.local&#34; &#34;$XDG_CONFIG_HOME/tmux/tmux.conf.local&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Installing in &lt;code&gt;~/.config/tmux&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/gpakosz/.tmux.git &#34;/path/to/oh-my-tmux&#34;&#xA;$ mkdir -p &#34;~/.config/tmux&#34;&#xA;$ ln -s &#34;/path/to/oh-my-tmux/.tmux.conf&#34; &#34;~/.config/tmux/tmux.conf&#34;&#xA;$ cp &#34;/path/to/oh-my-tmux/.tmux.conf.local&#34; &#34;~/.config/tmux/tmux.conf.local&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;‚ö†Ô∏è When installing &lt;code&gt;$XDG_CONFIG_HOME/tmux&lt;/code&gt; or &lt;code&gt;~/.config/tmux&lt;/code&gt;, the configuration file names don&#39;t have a leading &lt;code&gt;.&lt;/code&gt; character.&lt;/p&gt; &#xA;&lt;p&gt;‚ùóÔ∏è You should never alter the main &lt;code&gt;.tmux.conf&lt;/code&gt; or &lt;code&gt;tmux.conf&lt;/code&gt; file. If you do, you&#39;re on your own. Instead, every customization should happen in your &lt;code&gt;.tmux.conf.local&lt;/code&gt; or &lt;code&gt;tmux.conf.local&lt;/code&gt; customization file copy.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re a Vim user, setting the &lt;code&gt;$EDITOR&lt;/code&gt; environment variable to &lt;code&gt;vim&lt;/code&gt; will enable and further customize the vi-style key bindings (see tmux manual).&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re new to tmux, I recommend you to read &lt;a href=&#34;https://pragprog.com/titles/bhtmux2/tmux-2&#34;&gt;tmux 2: Productive Mouse-Free Development&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/bphogan&#34;&gt;@bphogan&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Now proceed to &lt;a href=&#34;https://raw.githubusercontent.com/gpakosz/.tmux/master/#configuration&#34;&gt;adjust&lt;/a&gt; your &lt;code&gt;.local&lt;/code&gt; customization file copy.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;I&#39;m running tmux &lt;code&gt;HEAD&lt;/code&gt; and things don&#39;t work properly. What should I do?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Please open an issue describing what doesn&#39;t work with upcoming tmux. I&#39;ll do my best to address it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Status line is broken and/or gets duplicated at the bottom of the screen. What gives?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;This particularly happens on Linux when the distribution provides a version of glib that received Unicode 9.0 upgrades (glib &lt;code&gt;&amp;gt;= 2.50.1&lt;/code&gt;) while providing a version of glibc that didn&#39;t (glibc &lt;code&gt;&amp;lt; 2.26&lt;/code&gt;). You may also configure &lt;code&gt;LC_CTYPE&lt;/code&gt; to use an &lt;code&gt;UTF-8&lt;/code&gt; locale. Typically VTE based terminal emulators rely on glib&#39;s &lt;code&gt;g_unichar_iswide()&lt;/code&gt; function while tmux relies on glibc&#39;s &lt;code&gt;wcwidth()&lt;/code&gt; function. When these two functions disagree, display gets messed up.&lt;/p&gt; &lt;p&gt;This can also happen on macOS when using iTerm2 and &#34;Use Unicode version 9 character widths&#34; is enabled in &lt;code&gt;Preferences... &amp;gt; Profiles &amp;gt; Text&lt;/code&gt;&lt;/p&gt; &lt;p&gt;For that reason, the default sample &lt;code&gt;.local&lt;/code&gt; customization file stopped using Unicode characters for which width changed in between Unicode 8.0 and 9.0 standards, as well as Emojis.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;I installed Powerline and/or (patched) fonts but can&#39;t see Powerline symbols.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;First, you don&#39;t need to install Powerline. You only need fonts patched with Powerline symbols or the standalone &lt;code&gt;PowerlineSymbols.otf&lt;/code&gt; font. Then make sure your &lt;code&gt;.local&lt;/code&gt; customization file copy uses the Powerline code points for &lt;code&gt;tmux_conf_theme_left_separator_XXX&lt;/code&gt; values.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;I&#39;m using Bash On Windows (WSL), colors and the Powerline look are broken.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;There is currently a &lt;a href=&#34;https://github.com/Microsoft/BashOnWindows/issues/1681&#34;&gt;bug&lt;/a&gt; in the new console powering Bash On Windows preventing text attributes (bold, underscore, ...) to combine properly with colors. The workaround is to search your &lt;code&gt;.local&lt;/code&gt; customization file copy and replace attributes with &lt;code&gt;&#39;none&#39;&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Also, until Window&#39;s console replaces its GDI based render with a DirectWrite one, Powerline symbols will be broken.&lt;/p&gt; &lt;p&gt;The alternative is to use the &lt;a href=&#34;https://github.com/mintty/wsltty&#34;&gt;Mintty terminal for WSL&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;C-a&lt;/code&gt; acts as secondary prefix, while keeping default &lt;code&gt;C-b&lt;/code&gt; prefix&lt;/li&gt; &#xA; &lt;li&gt;visual theme inspired by &lt;a href=&#34;https://github.com/Lokaltog/powerline&#34;&gt;Powerline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://pempek.net/articles/2013/04/14/maximizing-tmux-pane-new-window/&#34;&gt;maximize any pane to a new window with &lt;code&gt;&amp;lt;prefix&amp;gt; +&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;SSH/Mosh aware username and hostname status line information&lt;/li&gt; &#xA; &lt;li&gt;mouse mode toggle with &lt;code&gt;&amp;lt;prefix&amp;gt; m&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;laptop battery status line information&lt;/li&gt; &#xA; &lt;li&gt;uptime status line information&lt;/li&gt; &#xA; &lt;li&gt;optional highlight of focused pane&lt;/li&gt; &#xA; &lt;li&gt;configurable new windows and panes behavior (optionally retain current path)&lt;/li&gt; &#xA; &lt;li&gt;SSH/Mosh aware split pane (reconnects to remote server)&lt;/li&gt; &#xA; &lt;li&gt;copy to OS clipboard (needs &lt;code&gt;xsel&lt;/code&gt;, &lt;code&gt;xclip&lt;/code&gt;, or &lt;code&gt;wl-copy&lt;/code&gt; on Linux)&lt;/li&gt; &#xA; &lt;li&gt;support for 4-digit hexadecimal Unicode characters&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://facebook.github.io/PathPicker/&#34;&gt;Facebook PathPicker&lt;/a&gt; integration if available&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/firecat53/urlscan&#34;&gt;Urlscan&lt;/a&gt; (preferred) or &lt;a href=&#34;https://packages.debian.org/stable/misc/urlview&#34;&gt;Urlview&lt;/a&gt; integration if available&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &#34;maximize any pane to a new window with &lt;code&gt;&amp;lt;prefix&amp;gt; +&lt;/code&gt;&#34; feature is different from builtin &lt;code&gt;resize-pane -Z&lt;/code&gt; as it allows you to further split a maximized pane. It&#39;s also more flexible by allowing you to maximize a pane to a new window, then change window, then go back and the pane is still in maximized state in its own window. You can then minimize a pane by using &lt;code&gt;&amp;lt;prefix&amp;gt; +&lt;/code&gt; either from the source window or the maximized window.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/553208/9890858/ee3c0ca6-5c02-11e5-890e-05d825a46c92.gif&#34; alt=&#34;Maximize pane&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Mouse mode allows you to set the active window, set the active pane, resize panes and automatically switches to copy-mode to select text.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/553208/9890797/8dffe542-5c02-11e5-9c06-a25b452e6fcc.gif&#34; alt=&#34;Mouse mode&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Bindings&lt;/h2&gt; &#xA;&lt;p&gt;tmux may be controlled from an attached client by using a key combination of a prefix key, followed by a command key. This configuration uses &lt;code&gt;C-a&lt;/code&gt; as a secondary prefix while keeping &lt;code&gt;C-b&lt;/code&gt; as the default prefix. In the following list of key bindings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;prefix&amp;gt;&lt;/code&gt; means you have to either hit &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;a&lt;/kbd&gt; or &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;b&lt;/kbd&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;prefix&amp;gt; c&lt;/code&gt; means you have to hit &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;a&lt;/kbd&gt; or &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;b&lt;/kbd&gt; followed by &lt;kbd&gt;c&lt;/kbd&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;prefix&amp;gt; C-c&lt;/code&gt; means you have to hit &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;a&lt;/kbd&gt; or &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;b&lt;/kbd&gt; followed by &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;c&lt;/kbd&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This configuration uses the following bindings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;prefix&amp;gt; e&lt;/code&gt; opens the &lt;code&gt;.local&lt;/code&gt; customization file copy with the editor defined by the &lt;code&gt;$EDITOR&lt;/code&gt; environment variable (defaults to &lt;code&gt;vim&lt;/code&gt; when empty)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;prefix&amp;gt; r&lt;/code&gt; reloads the configuration&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;C-l&lt;/code&gt; clears both the screen and the tmux history&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;prefix&amp;gt; C-c&lt;/code&gt; creates a new session&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;prefix&amp;gt; C-f&lt;/code&gt; lets you switch to another session by name&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;prefix&amp;gt; C-h&lt;/code&gt; and &lt;code&gt;&amp;lt;prefix&amp;gt; C-l&lt;/code&gt; let you navigate windows (default &lt;code&gt;&amp;lt;prefix&amp;gt; n&lt;/code&gt; and &lt;code&gt;&amp;lt;prefix&amp;gt; p&lt;/code&gt; are unbound)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;prefix&amp;gt; Tab&lt;/code&gt; brings you to the last active window&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;prefix&amp;gt; -&lt;/code&gt; splits the current pane vertically&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;prefix&amp;gt; _&lt;/code&gt; splits the current pane horizontally&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;prefix&amp;gt; h&lt;/code&gt;, &lt;code&gt;&amp;lt;prefix&amp;gt; j&lt;/code&gt;, &lt;code&gt;&amp;lt;prefix&amp;gt; k&lt;/code&gt; and &lt;code&gt;&amp;lt;prefix&amp;gt; l&lt;/code&gt; let you navigate panes ala Vim&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;prefix&amp;gt; H&lt;/code&gt;, &lt;code&gt;&amp;lt;prefix&amp;gt; J&lt;/code&gt;, &lt;code&gt;&amp;lt;prefix&amp;gt; K&lt;/code&gt;, &lt;code&gt;&amp;lt;prefix&amp;gt; L&lt;/code&gt; let you resize panes&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;prefix&amp;gt; &amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;lt;prefix&amp;gt; &amp;gt;&lt;/code&gt; let you swap panes&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;prefix&amp;gt; +&lt;/code&gt; maximizes the current pane to a new window&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;prefix&amp;gt; m&lt;/code&gt; toggles mouse mode on or off&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;prefix&amp;gt; U&lt;/code&gt; launches Urlscan (preferred) or Urlview, if available&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;prefix&amp;gt; F&lt;/code&gt; launches Facebook PathPicker, if available&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;prefix&amp;gt; Enter&lt;/code&gt; enters copy-mode&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;prefix&amp;gt; b&lt;/code&gt; lists the paste-buffers&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;prefix&amp;gt; p&lt;/code&gt; pastes from the top paste-buffer&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;prefix&amp;gt; P&lt;/code&gt; lets you choose the paste-buffer to paste from&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, &lt;code&gt;copy-mode-vi&lt;/code&gt; matches &lt;a href=&#34;https://github.com/gpakosz/.vim.git&#34;&gt;my own Vim configuration&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bindings for &lt;code&gt;copy-mode-vi&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;v&lt;/code&gt; begins selection / visual mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-v&lt;/code&gt; toggles between blockwise visual mode and visual mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;H&lt;/code&gt; jumps to the start of line&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;L&lt;/code&gt; jumps to the end of line&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;y&lt;/code&gt; copies the selection to the top paste-buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Escape&lt;/code&gt; cancels the current operation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;While this configuration tries to bring sane default settings, you may want to customize it further to your needs.&lt;/p&gt; &#xA;&lt;p&gt;‚ùóÔ∏è Again, you should never alter the main &lt;code&gt;.tmux.conf&lt;/code&gt; or &lt;code&gt;tmux.conf&lt;/code&gt; file. If you do, you&#39;re on your own.&lt;/p&gt; &#xA;&lt;p&gt;Please refer to the sample &lt;code&gt;.local&lt;/code&gt; customization file to know more about the variables that allow you to alter different behaviors. Upon successful installation, pressing &lt;code&gt;&amp;lt;prefix&amp;gt; e&lt;/code&gt; will open your &lt;code&gt;.local&lt;/code&gt; customization file copy with the editor defined by the &lt;code&gt;$EDITOR&lt;/code&gt; environment variable (defaults to &lt;code&gt;vim&lt;/code&gt; when empty).&lt;/p&gt; &#xA;&lt;h3&gt;Enabling the Powerline look&lt;/h3&gt; &#xA;&lt;p&gt;Powerline originated as a status-line plugin for Vim. Its popular eye-catching look is based on the use of special symbols: &lt;img width=&#34;80&#34; alt=&#34;Powerline Symbols&#34; style=&#34;vertical-align: middle;&#34; src=&#34;https://cloud.githubusercontent.com/assets/553208/10687156/1b76dda6-796b-11e5-83a1-1634337c4571.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To make use of these symbols, there are several options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;use a font that already bundles those: this is e.g. the case of the &lt;a href=&#34;https://github.com/adobe-fonts/source-code-pro/releases/tag/2.030R-ro/1.050R-it&#34;&gt;2.030R-ro/1.050R-it version&lt;/a&gt; of the Source Code Pro font&lt;/li&gt; &#xA; &lt;li&gt;use a &lt;a href=&#34;https://github.com/powerline/fonts&#34;&gt;pre-patched font&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;use your preferred font along with the &lt;a href=&#34;https://github.com/powerline/powerline/raw/develop/font/PowerlineSymbols.otf&#34;&gt;Powerline font&lt;/a&gt; (that only contains the Powerline symbols): &lt;a href=&#34;http://powerline.readthedocs.io/en/master/usage.html#usage-terminal-emulators&#34;&gt;this highly depends on your operating system and your terminal emulator&lt;/a&gt;, for instance here&#39;s a screenshot of iTerm2 configured to use &lt;code&gt;PowerlineSymbols.otf&lt;/code&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/553208/62243890-8232f500-b3de-11e9-9b8c-51a5d38bdaa8.png&#34; alt=&#34;iTerm2 + Powerline font&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then edit your &lt;code&gt;.local&lt;/code&gt; customization file copy (with &lt;code&gt;&amp;lt;prefix&amp;gt; e&lt;/code&gt;) and adjust the following variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tmux_conf_theme_left_separator_main=&#39;\uE0B0&#39;&#xA;tmux_conf_theme_left_separator_sub=&#39;\uE0B1&#39;&#xA;tmux_conf_theme_right_separator_main=&#39;\uE0B2&#39;&#xA;tmux_conf_theme_right_separator_sub=&#39;\uE0B3&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;http://powerline.readthedocs.org/en/latest/installation.html#fonts-installation&#34;&gt;Powerline manual&lt;/a&gt; contains further details on how to install fonts containing the Powerline symbols. You don&#39;t need to install Powerline itself though.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring the status line&lt;/h3&gt; &#xA;&lt;p&gt;Edit your &lt;code&gt;.local&lt;/code&gt; customization file copy (&lt;code&gt;&amp;lt;prefix&amp;gt; e&lt;/code&gt;) and adjust the &lt;code&gt;tmux_conf_theme_status_left&lt;/code&gt; and &lt;code&gt;tmux_conf_theme_status_right&lt;/code&gt; variables to your own preferences.&lt;/p&gt; &#xA;&lt;p&gt;This configuration supports the following builtin variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;#{battery_bar}&lt;/code&gt;: horizontal battery charge bar&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#{battery_hbar}&lt;/code&gt;: 1 character wide, horizontal battery charge bar&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#{battery_vbar}&lt;/code&gt;: 1 character wide, vertical battery charge bar&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#{battery_percentage}&lt;/code&gt;: battery percentage&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#{battery_status}&lt;/code&gt;: is battery charging or discharging?&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#{circled_session_name}&lt;/code&gt;: circled session number, up to 20&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#{hostname}&lt;/code&gt;: SSH/Mosh aware hostname information&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#{hostname_ssh}&lt;/code&gt;: SSH/Mosh aware hostname information, blank when not connected to a remote server through SSH/Mosh&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#{loadavg}&lt;/code&gt;: load average&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#{pairing}&lt;/code&gt;: is session attached to more than one client?&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#{prefix}&lt;/code&gt;: is prefix being depressed?&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#{root}&lt;/code&gt;: is current user root?&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#{synchronized}&lt;/code&gt;: are the panes synchronized?&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#{uptime_y}&lt;/code&gt;: uptime years&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#{uptime_d}&lt;/code&gt;: uptime days, modulo 365 when &lt;code&gt;#{uptime_y}&lt;/code&gt; is used&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#{uptime_h}&lt;/code&gt;: uptime hours&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#{uptime_m}&lt;/code&gt;: uptime minutes&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#{uptime_s}&lt;/code&gt;: uptime seconds&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#{username}&lt;/code&gt;: SSH/Mosh aware username information&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#{username_ssh}&lt;/code&gt;: SSH aware username information, blank when not connected to a remote server through SSH/Mosh&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Beside the variables mentioned above, the &lt;code&gt;tmux_conf_theme_status_left&lt;/code&gt; and &lt;code&gt;tmux_conf_theme_status_right&lt;/code&gt; variables support usual tmux syntax, e.g. using &lt;code&gt;#()&lt;/code&gt; to call an external command that inserts weather information provided by &lt;a href=&#34;https://github.com/chubin/wttr.in#one-line-output&#34;&gt;wttr.in&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tmux_conf_theme_status_right=&#39;#{prefix}#{pairing}#{synchronized} #(curl -m 1 wttr.in?format=3 2&amp;gt;/dev/null; sleep 900) , %R , %d %b | #{username}#{root} | #{hostname} &#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;sleep 900&lt;/code&gt; call makes sure the network request is issued at most every 15 minutes whatever the value of &lt;code&gt;status-interval&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/553208/52175490-07797c00-27a5-11e9-9fb6-42eec4fe4188.png&#34; alt=&#34;Weather information from wttr.in&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;üí° You can also define your own custom variables by writing special functions, see the sample &lt;code&gt;.local&lt;/code&gt; customization file for instructions.&lt;/p&gt; &#xA;&lt;p&gt;Finally, remember &lt;code&gt;tmux_conf_theme_status_left&lt;/code&gt; and &lt;code&gt;tmux_conf_theme_status_right&lt;/code&gt; end up being given to tmux as &lt;code&gt;status-left&lt;/code&gt; and &lt;code&gt;status-right&lt;/code&gt; which means they&#39;re passed through &lt;code&gt;strftime()&lt;/code&gt;. As such, the &lt;code&gt;%&lt;/code&gt; character has a special meaning and needs to be escaped by doubling it, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tmux_conf_theme_status_right=&#39;#(echo foo %% bar)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also &lt;code&gt;man 3 strftime&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using TPM plugins&lt;/h3&gt; &#xA;&lt;p&gt;This configuration now comes with built-in &lt;a href=&#34;https://github.com/tmux-plugins/tpm&#34;&gt;TPM&lt;/a&gt; support:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;use the &lt;code&gt;set -g @plugin ...&lt;/code&gt; syntax to enable a plugin&lt;/li&gt; &#xA; &lt;li&gt;whenever a plugin introduces a variable to be used in &lt;code&gt;status-left&lt;/code&gt; or &lt;code&gt;status-right&lt;/code&gt;, you can use it in &lt;code&gt;tmux_conf_theme_status_left&lt;/code&gt; and &lt;code&gt;tmux_conf_theme_status_right&lt;/code&gt; variables, see instructions above üëÜ&lt;/li&gt; &#xA; &lt;li&gt;‚ö†Ô∏è do not add &lt;code&gt;set -g @plugin &#39;tmux-plugins/tpm&#39;&lt;/code&gt; to any configuration file&lt;/li&gt; &#xA; &lt;li&gt;‚õîÔ∏è do not add &lt;code&gt;run &#39;~/.tmux/plugins/tpm/tpm&#39;&lt;/code&gt; to any configuration file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;‚ö†Ô∏è The TPM bindings differ slightly from upstream:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;installing plugins: &lt;code&gt;&amp;lt;prefix&amp;gt; + I&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;uninstalling plugins: &lt;code&gt;&amp;lt;prefix&amp;gt; + Alt + u&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;updating plugins: &lt;code&gt;&amp;lt;prefix&amp;gt; + u&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the sample &lt;code&gt;.local&lt;/code&gt; customization file for instructions.&lt;/p&gt; &#xA;&lt;h3&gt;Using the configuration under Cygwin within Mintty&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;I don&#39;t recommend running this configuration with Cygwin anymore. Forking under Cygwin is extremely slow and this configuration issues a lot of &lt;code&gt;run-shell&lt;/code&gt; commands under the hood. As such, you will experience high CPU usage. As an alternative consider using &lt;a href=&#34;https://github.com/mintty/wsltty&#34;&gt;Mintty terminal for WSL&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/553208/19741789/67a3f3d8-9bc2-11e6-9ecc-499fc0228ee6.png&#34; alt=&#34;cygwin&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is possible to use this configuration under Cygwin within Mintty, however support for Unicode symbols and emojis lacks behind Mac and Linux.&lt;/p&gt; &#xA;&lt;p&gt;Particularly, Mintty&#39;s text rendering is implemented with GDI which has limitations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;color emojis are only available through DirectWrite starting with Windows 8.1&lt;/li&gt; &#xA; &lt;li&gt;display of double width symbols, like the battery discharging symbol indicator (U+1F50B) is buggy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To get Unicode symbols displayed properly, you have to use &lt;a href=&#34;https://msdn.microsoft.com/en-us/goglobal/bb688134.aspx&#34;&gt;font linking&lt;/a&gt;. Open &lt;code&gt;regedit.exe&lt;/code&gt; then navigate to the registry key at &lt;code&gt;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\FontLink\SystemLink&lt;/code&gt; and add a new entry for you preferred font to link it with the Segoe UI Symbol font.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/553208/19741304/71a2f3ae-9bc0-11e6-96aa-4c09a812c313.png&#34; alt=&#34;regedit&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>