<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-06T01:54:35Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>phyver/GameShell</title>
    <updated>2022-08-06T01:54:35Z</updated>
    <id>tag:github.com,2022-08-06:/phyver/GameShell</id>
    <link href="https://github.com/phyver/GameShell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;a game to learn (or teach) how to use standard commands in a Unix shell&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GameShell: a &#34;game&#34; to teach the Unix shell&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/phyver/GameShell/master/Images/illustration-small.png&#34; alt=&#34;Illustration inspired by the game&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Teaching first-year university students or high schoolers to use a Unix shell is not always the easiest or most entertaining of tasks. GameShell was devised as a tool to help students at the &lt;a href=&#34;https://univ-smb.fr&#34;&gt;Universit√© Savoie Mont Blanc&lt;/a&gt; to engage with a &lt;em&gt;real&lt;/em&gt; shell, in a way that encourages learning while also having fun.&lt;/p&gt; &#xA;&lt;p&gt;The original idea, due to Rodolphe Lepigre, was to run a standard bash session with an appropriate configuration file that defined &#34;missions&#34; which would be &#34;checked&#34; in order to progress through the game.&lt;/p&gt; &#xA;&lt;p&gt;Here is the result...&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/phyver/GameShell/master/Images/gameshell_first_mission_small.gif&#34; alt=&#34;GameShell&#39;s first mission&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;GameShell is available in English, French and Italian.&lt;/p&gt; &#xA;&lt;p&gt;Feel free to send us your remarks, questions or suggestions by opening &lt;a href=&#34;https://github.com/phyver/GameShell/issues&#34;&gt;issues&lt;/a&gt; or submitting &lt;a href=&#34;https://github.com/phyver/GameShell/pulls&#34;&gt;pull requests&lt;/a&gt;. We are particularly interested in any new missions you might create!&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; GameShell is currently undergoing heavy development: the current version has not been field tested by students. Do not hesitate to report any problems you might encounter or suggestions you might have by &lt;a href=&#34;https://github.com/phyver/GameShell/issues/new&#34;&gt;opening an issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;GameShell should work on any standard Linux system, and also on macOS and BSD (but we have run fewer tests on the latter systems). On Debian or Ubuntu, the only dependencies (besides &lt;code&gt;bash&lt;/code&gt;) are the &lt;code&gt;gettext-base&lt;/code&gt; and &lt;code&gt;awk&lt;/code&gt; packages (the latter is generally installed by default). Some missions have additional dependencies: these missions will be skipped if the dependencies are not met. On Debian or Ubuntu, run the following command to install all game and mission dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo apt install gettext man-db procps psmisc nano tree bsdmainutils x11-apps wget&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://raw.githubusercontent.com/phyver/GameShell/master/doc/user_manual.md&#34;&gt;user manual&lt;/a&gt; to see how to install the game dependencies on other systems (macOS, BSD, ...).&lt;/p&gt; &#xA;&lt;p&gt;Assuming all the dependencies are installed, you can try the latest version of the game by running the following two commands in a terminal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ wget https://github.com/phyver/GameShell/releases/download/latest/gameshell.sh&#xA;$ bash gameshell.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first command will download the latest version of the game in the form of a self-extracting archive, and the second command will initialise and run the game from the downloaded archive. Instructions on how to play are provided in the game directly.&lt;/p&gt; &#xA;&lt;p&gt;Note that when you quit the game (with &lt;code&gt;control-d&lt;/code&gt; or the command &lt;code&gt;gsh exit&lt;/code&gt;) your progression will be saved in a new archive (called &lt;code&gt;gameshell-save.sh&lt;/code&gt;). Run this archive to resume the game where you left it.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer not running foreign shell scripts on your computer, you can generate a Docker image with the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mkdir GameShell; cd GameShell&#xA;$ wget --quiet https://github.com/phyver/GameShell/releases/download/latest/Dockerfile&#xA;$ docker build -t gsh .&#xA;$ docker run -it gsh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The game will NOT be saved when you exit, and additional flags are required if you want to run X programs from inside GameShell. Refer to &lt;a href=&#34;https://raw.githubusercontent.com/phyver/GameShell/master/doc/deps.md#running-GameShell-from-a-docker-container&#34;&gt;this section&lt;/a&gt; of the user manual.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;To find out more about GameShell, refer to the following documents:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/phyver/GameShell/master/doc/user_manual.md&#34;&gt;user manual&lt;/a&gt; provides information on how to run the game on all supported platforms (Linux, macOS, BSD), explains how to run the game from the sources, tells you how to generate custom game archives (which is useful if you want to use GameShell for teaching a class), and more.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/phyver/GameShell/master/doc/dev_manual.md&#34;&gt;developer manual&lt;/a&gt; provides information on how to create new missions, how to translate missions, and how to participate in the development of the game.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Who is developing GameShell?&lt;/h2&gt; &#xA;&lt;h3&gt;Developers&lt;/h3&gt; &#xA;&lt;p&gt;The game is currently being developed by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.lama.univ-smb.fr/~hyvernat&#34;&gt;Pierre Hyvernat&lt;/a&gt; (main developer, &lt;a href=&#34;mailto:pierre.hyvernat@univ-smb.fr&#34;&gt;pierre.hyvernat@univ-smb.fr&lt;/a&gt;),&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lepigre.fr&#34;&gt;Rodolphe Lepigre&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Mission contributors&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pierre Hyvernat&lt;/li&gt; &#xA; &lt;li&gt;Rodolphe Lepigre&lt;/li&gt; &#xA; &lt;li&gt;Christophe Raffalli&lt;/li&gt; &#xA; &lt;li&gt;Xavier Provencal&lt;/li&gt; &#xA; &lt;li&gt;Clovis Eberhart&lt;/li&gt; &#xA; &lt;li&gt;S√©bastien Tavenas&lt;/li&gt; &#xA; &lt;li&gt;Tiemen Duvillard&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Translation&lt;/h3&gt; &#xA;&lt;h4&gt;Italian Version&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Daniele Scasciafratte (@mte90)&lt;/li&gt; &#xA; &lt;li&gt;Paolo Mauri (@maupao)&lt;/li&gt; &#xA; &lt;li&gt;Marco Ciampa (@ciampix)&lt;/li&gt; &#xA; &lt;li&gt;Antonio Vivace (@avivace)&lt;/li&gt; &#xA; &lt;li&gt;Lorenzo Millucci (@lmillucci)&lt;/li&gt; &#xA; &lt;li&gt;Sirio Negri (@ziriuz84)&lt;/li&gt; &#xA; &lt;li&gt;Domenico Mammola (@domenicomammola)&lt;/li&gt; &#xA; &lt;li&gt;Leonardo Canello (@anulo2)&lt;/li&gt; &#xA; &lt;li&gt;@michirod&lt;/li&gt; &#xA; &lt;li&gt;@serhack&lt;/li&gt; &#xA; &lt;li&gt;WhiteShield (@wshield05)&lt;/li&gt; &#xA; &lt;li&gt;@gioisco&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Special thanks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All the students who found &lt;em&gt;many&lt;/em&gt; bugs in the early versions.&lt;/li&gt; &#xA; &lt;li&gt;Joan Stark (a.k.a, jgs), who designed hundreds of ASCII-art pieces in the late 90s. Most of the ASCII-art encountered in GameShell are due to her.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Licence&lt;/h2&gt; &#xA;&lt;p&gt;GameShell is released under the &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.en.html&#34;&gt;GPLv3&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please link to this repository if you use GameShell.&lt;/p&gt; &#xA;&lt;p&gt;GameShell is open source and free to use. One way you can acknowledge the work it required is by sending an actual postcard to&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  Pierre Hyvernat&#xA;  Laboratoire de Math√©matiques, CNRS UMR 5127&#xA;  Universit√© de Savoie&#xA;  73376 Le Bourget du Lac&#xA;  FRANCE&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>jeffreytse/zsh-vi-mode</title>
    <updated>2022-08-06T01:54:35Z</updated>
    <id>tag:github.com,2022-08-06:/jeffreytse/zsh-vi-mode</id>
    <link href="https://github.com/jeffreytse/zsh-vi-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üíª A better and friendly vi(vim) mode plugin for ZSH.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/jeffreytse/zsh-vi-mode&#34;&gt; &lt;img alt=&#34;vi-mode ‚Üí~ zsh&#34; src=&#34;https://user-images.githubusercontent.com/9413601/103399068-46bfcb80-4b7a-11eb-8741-86cff3d85a69.png&#34; width=&#34;600&#34;&gt; &lt;/a&gt; &#xA; &lt;p&gt; üíª A better and friendly vi(vim) mode plugin for ZSH. &lt;/p&gt; &#xA; &lt;p&gt;&lt;br&gt; &lt;/p&gt;&#xA; &lt;h1&gt;‚öíÔ∏è Zsh Vi Mode ‚öíÔ∏è&lt;/h1&gt;&#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.zsh.org/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ZSH&lt;/code&gt;&lt;/a&gt; plugin for Agnosticism. &lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/jeffreytse/zsh-vi-mode/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/jeffreytse/zsh-vi-mode?color=brightgreen&#34; alt=&#34;Release Version&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/License-MIT-brightgreen.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt; &lt;/a&gt; &lt;a href=&#34;&#34;&gt; &lt;img src=&#34;&#34; alt=&#34;&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://liberapay.com/jeffreytse&#34;&gt; &lt;img src=&#34;http://img.shields.io/liberapay/goal/jeffreytse.svg?logo=liberapay&#34; alt=&#34;Donate (Liberapay)&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://patreon.com/jeffreytse&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/support-patreon-F96854.svg?style=flat-square&#34; alt=&#34;Donate (Patreon)&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://ko-fi.com/jeffreytse&#34;&gt; &lt;img height=&#34;20&#34; src=&#34;https://www.ko-fi.com/img/githubbutton_sm.svg?sanitize=true&#34; alt=&#34;Donate (Ko-fi)&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h4&gt; &lt;a href=&#34;https://raw.githubusercontent.com/jeffreytse/zsh-vi-mode/master/#-features&#34;&gt;Features&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/jeffreytse/zsh-vi-mode/master/#%EF%B8%8F-installation&#34;&gt;Install&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/jeffreytse/zsh-vi-mode/master/#-usage&#34;&gt;Usage&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/jeffreytse/zsh-vi-mode/master/#-credits&#34;&gt;Credits&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/jeffreytse/zsh-vi-mode/master/#-license&#34;&gt;License&lt;/a&gt; &lt;/h4&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;sub&gt;Built with ‚ù§Ô∏é by &lt;a href=&#34;https://jeffreytse.net&#34;&gt;jeffreytse&lt;/a&gt; and &lt;a href=&#34;https://github.com/jeffreytse/zsh-vi-mode/graphs/contributors&#34;&gt;contributors &lt;/a&gt; &lt;/sub&gt;&#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;img alt=&#34;Zsh Vi-mode Demo&#34; src=&#34;https://user-images.githubusercontent.com/9413601/105746868-f3734a00-5f7a-11eb-8db5-22fcf50a171b.gif&#34;&gt; &#xA;&lt;h2&gt;ü§î Why ZVM?&lt;/h2&gt; &#xA;&lt;p&gt;Maybe you have experienced the default Vi mode in Zsh, after turning on the default Vi mode, you gradually found that it had many problems, some features were not perfect or non-existent, and some behaviors even were different from the native Vi(Vim) mode.&lt;/p&gt; &#xA;&lt;p&gt;Although the default Vi mode was a bit embarrassing and unpleasant, you kept on using it and gradually lost your interest on it after using for a period of time. Eventually, you disappointedly gave up.&lt;/p&gt; &#xA;&lt;p&gt;You never think of the Vi mode for a long time, one day you accidentally discovered this plugin, you read here and realize that this plugin is to solve the above problems and make you fall in love to Vi mode again. A smile suddenly appeared on your face like regaining a good life.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If winter comes, can spring be far behind?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;‚ú® Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üåü Pure Zsh&#39;s script without any third-party dependencies.&lt;/li&gt; &#xA; &lt;li&gt;üéâ Better experience with the near-native vi(vim) mode.&lt;/li&gt; &#xA; &lt;li&gt;‚åõ Lower delay and better response (Mode switching speed, etc.).&lt;/li&gt; &#xA; &lt;li&gt;‚úèÔ∏è Mode indication with different cursor styles.&lt;/li&gt; &#xA; &lt;li&gt;üßÆ Cursor movement (Navigation).&lt;/li&gt; &#xA; &lt;li&gt;üìù Insert &amp;amp; Replace (Insert mode).&lt;/li&gt; &#xA; &lt;li&gt;üí° Text Objects (A word, inner word, etc.).&lt;/li&gt; &#xA; &lt;li&gt;üîé Searching history.&lt;/li&gt; &#xA; &lt;li&gt;‚ùáÔ∏è Undo, Redo, Cut, Copy, Paste, and Delete.&lt;/li&gt; &#xA; &lt;li&gt;ü™ê Better surrounds functionality (Add, Replace, Delete, Move Around, and Highlight).&lt;/li&gt; &#xA; &lt;li&gt;üßΩ Switch keywords (Increase/Decrease Number, Boolean, Weekday, Month, etc.).&lt;/li&gt; &#xA; &lt;li&gt;‚öôÔ∏è Better functionality in command mode (&lt;strong&gt;In progress&lt;/strong&gt;).&lt;/li&gt; &#xA; &lt;li&gt;ü™Ä Repeating command such as &lt;code&gt;10p&lt;/code&gt; and &lt;code&gt;4fa&lt;/code&gt; (&lt;strong&gt;In progress&lt;/strong&gt;).&lt;/li&gt; &#xA; &lt;li&gt;üìí System clipboard (&lt;strong&gt;In progress&lt;/strong&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üíº Requirements&lt;/h2&gt; &#xA;&lt;p&gt;ZSH: &amp;gt;= 5.1.0&lt;/p&gt; &#xA;&lt;h2&gt;üõ†Ô∏è Installation&lt;/h2&gt; &#xA;&lt;h4&gt;Using &lt;a href=&#34;https://github.com/zsh-users/antigen&#34;&gt;Antigen&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Bundle &lt;code&gt;zsh-vi-mode&lt;/code&gt; in your &lt;code&gt;.zshrc&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;antigen bundle jeffreytse/zsh-vi-mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using &lt;a href=&#34;https://github.com/b4b4r07/zplug&#34;&gt;zplug&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Load &lt;code&gt;zsh-vi-mode&lt;/code&gt; as a plugin in your &lt;code&gt;.zshrc&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;zplug &#34;jeffreytse/zsh-vi-mode&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using &lt;a href=&#34;https://github.com/tarjoilija/zgen&#34;&gt;zgen&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Include the load command in your &lt;code&gt;.zshrc&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;zgen load jeffreytse/zsh-vi-mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using &lt;a href=&#34;https://github.com/zdharma-continuum/zinit&#34;&gt;zinit&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Include the load command in your &lt;code&gt;.zshrc&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;zinit ice depth=1&#xA;zinit light jeffreytse/zsh-vi-mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: the use of &lt;code&gt;depth=1&lt;/code&gt; ice is optional, other types of ice are neither recommended nor officially supported by this plugin.&lt;/p&gt; &#xA;&lt;h4&gt;As an &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34;&gt;Oh My Zsh!&lt;/a&gt; custom plugin&lt;/h4&gt; &#xA;&lt;p&gt;Clone &lt;code&gt;zsh-vi-mode&lt;/code&gt; into your custom plugins repo&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/jeffreytse/zsh-vi-mode \&#xA;  $ZSH_CUSTOM/plugins/zsh-vi-mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then load as a plugin in your &lt;code&gt;.zshrc&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;plugins+=(zsh-vi-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Keep in mind that plugins need to be added before &lt;code&gt;oh-my-zsh.sh&lt;/code&gt; is sourced.&lt;/p&gt; &#xA;&lt;h4&gt;Using &lt;a href=&#34;https://getantibody.github.io/&#34;&gt;Antibody&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Add &lt;code&gt;zsh-vi-mode&lt;/code&gt; to your plugins file (e.g. &lt;code&gt;~/.zsh_plugins.txt&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jeffreytse/zsh-vi-mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;For Homebrew users, you can install it through the following command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install zsh-vi-mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then source it in your &lt;code&gt;.zshrc&lt;/code&gt; (or &lt;code&gt;.bashrc&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;source $(brew --prefix)/opt/zsh-vi-mode/share/zsh-vi-mode/zsh-vi-mode.plugin.zsh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Arch Linux (AUR)&lt;/h4&gt; &#xA;&lt;p&gt;For Arch Linux users, you can install it through the following command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yay -S zsh-vi-mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or the latest update (unstable)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yay -S zsh-vi-mode-git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then source it in your &lt;code&gt;.zshrc&lt;/code&gt; (or &lt;code&gt;.bashrc&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;source /usr/share/zsh/plugins/zsh-vi-mode/zsh-vi-mode.plugin.zsh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Nix&lt;/h4&gt; &#xA;&lt;p&gt;For users of Nix, as of &lt;a href=&#34;https://github.com/NixOS/nixpkgs/commit/e7e3480530b34a9fe8cb52963ec2cf66e6707e15&#34;&gt;e7e3480530b34a9fe8cb52963ec2cf66e6707e15&lt;/a&gt; you can source the plugin through the following configuration&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;programs = {&#xA;  zsh = {&#xA;    interactiveShellInit = &#39;&#39;&#xA;      source ${pkgs.zsh-vi-mode}/share/zsh-vi-mode/zsh-vi-mode.plugin.zsh&#xA;    &#39;&#39;;&#xA;  };&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you prefer &lt;code&gt;home-manager&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;home-manager.users.[your username] = { pkgs, ... }: {&#xA;  programs = {&#xA;    zsh = {&#xA;      initExtra = &#39;&#39;&#xA;        source ${pkgs.zsh-vi-mode}/share/zsh-vi-mode/zsh-vi-mode.plugin.zsh&#xA;      &#39;&#39;;&#xA;    };&#xA;  };&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using &lt;a href=&#34;https://fig.io&#34;&gt;Fig&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Fig adds apps, shortcuts, and autocomplete to your existing terminal.&lt;/p&gt; &#xA;&lt;p&gt;Install &lt;code&gt;zsh-vi-mode&lt;/code&gt; in just one click.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://fig.io/plugins/other/zsh-vi-mode&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://fig.io/badges/install-with-fig.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Manually&lt;/h4&gt; &#xA;&lt;p&gt;Clone this repository somewhere (&lt;code&gt;$HOME/.zsh-vi-mode&lt;/code&gt; for example)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/jeffreytse/zsh-vi-mode.git $HOME/.zsh-vi-mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then source it in your &lt;code&gt;.zshrc&lt;/code&gt; (or &lt;code&gt;.bashrc&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;source $HOME/.zsh-vi-mode/zsh-vi-mode.plugin.zsh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üìö Usage&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;ESC&lt;/code&gt; or &lt;code&gt;CTRL-[&lt;/code&gt; to enter &lt;code&gt;Normal mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;But some people may like the custom escape key such as &lt;code&gt;jj&lt;/code&gt;, &lt;code&gt;jk&lt;/code&gt; and so on, if you want to custom the escape key, you can learn more from &lt;a href=&#34;https://raw.githubusercontent.com/jeffreytse/zsh-vi-mode/master/#custom-escape-key&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ctrl-p&lt;/code&gt; : Previous command in history&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ctrl-n&lt;/code&gt; : Next command in history&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/&lt;/code&gt; : Search backward in history&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;n&lt;/code&gt; : Repeat the last &lt;code&gt;/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Mode indicators&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Normal mode&lt;/code&gt; is indicated with block style cursor, and &lt;code&gt;Insert mode&lt;/code&gt; with beam style cursor by default.&lt;/p&gt; &#xA;&lt;h2&gt;Vim edition&lt;/h2&gt; &#xA;&lt;p&gt;In &lt;code&gt;Normal mode&lt;/code&gt; you can use &lt;code&gt;vv&lt;/code&gt; to edit current command line in an editor (e.g. &lt;code&gt;vi&lt;/code&gt;/&lt;code&gt;vim&lt;/code&gt;/&lt;code&gt;nvim&lt;/code&gt;...), because it is bound to the &lt;code&gt;Visual mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can change the editor by &lt;code&gt;ZVM_VI_EDITOR&lt;/code&gt; option, by default it is &lt;code&gt;$EDITOR&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Movement&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$&lt;/code&gt; : To the end of the line&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;^&lt;/code&gt; : To the first non-blank character of the line&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;0&lt;/code&gt; : To the first character of the line&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;w&lt;/code&gt; : [count] words forward&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;W&lt;/code&gt; : [count] WORDS forward&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;e&lt;/code&gt; : Forward to the end of word [count] inclusive&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;E&lt;/code&gt; : Forward to the end of WORD [count] inclusive&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;b&lt;/code&gt; : [count] words backward&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;B&lt;/code&gt; : [count] WORDS backward&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;t{char}&lt;/code&gt; : Till before [count]&#39;th occurrence of {char} to the right&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;T{char}&lt;/code&gt; : Till before [count]&#39;th occurrence of {char} to the left&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;f{char}&lt;/code&gt; : To [count]&#39;th occurrence of {char} to the right&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;F{char}&lt;/code&gt; : To [count]&#39;th occurrence of {char} to the left&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;;&lt;/code&gt; : Repeat latest f, t, F or T [count] times&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;,&lt;/code&gt; : Repeat latest f, t, F or T in opposite direction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Insertion&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;i&lt;/code&gt; : Insert text before the cursor&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;I&lt;/code&gt; : Insert text before the first character in the line&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;a&lt;/code&gt; : Append text after the cursor&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;A&lt;/code&gt; : Append text at the end of the line&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;o&lt;/code&gt; : Insert new command line below the current one&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;O&lt;/code&gt; : Insert new command line above the current one&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Surround&lt;/h2&gt; &#xA;&lt;p&gt;There are 2 kinds of keybinding mode for surround operating, default is &lt;code&gt;classic&lt;/code&gt; mode, you can choose the mode by setting &lt;code&gt;ZVM_VI_SURROUND_BINDKEY&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;classic&lt;/code&gt; mode (verb-&amp;gt;s-&amp;gt;surround)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;S&#34;&lt;/code&gt; : Add &lt;code&gt;&#34;&lt;/code&gt; for visual selection&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ys&#34;&lt;/code&gt; : Add &lt;code&gt;&#34;&lt;/code&gt; for visual selection&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cs&#34;&#39;&lt;/code&gt; : Change &lt;code&gt;&#34;&lt;/code&gt; to &lt;code&gt;&#39;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ds&#34;&lt;/code&gt; : Delete &lt;code&gt;&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;code&gt;s-prefix&lt;/code&gt; mode (s-&amp;gt;verb-&amp;gt;surround)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;sa&#34;&lt;/code&gt; : Add &lt;code&gt;&#34;&lt;/code&gt; for visual selection&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sd&#34;&lt;/code&gt; : Delete &lt;code&gt;&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sr&#34;&#39;&lt;/code&gt; : Change &lt;code&gt;&#34;&lt;/code&gt; to &lt;code&gt;&#39;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that key sequences must be pressed in fairly quick succession to avoid a timeout. You may extend this timeout with the &lt;a href=&#34;https://raw.githubusercontent.com/jeffreytse/zsh-vi-mode/master/#readkey-engine&#34;&gt;&lt;code&gt;ZVM_KEYTIMEOUT&lt;/code&gt; option&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;How to select surround text object?&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;vi&#34;&lt;/code&gt; : Select the text object inside the quotes&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;va(&lt;/code&gt; : Select the text object including the brackets&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then you can do any operation for the selection:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add surrounds for text object&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;vi&#34;&lt;/code&gt; -&amp;gt; &lt;code&gt;S[&lt;/code&gt; or &lt;code&gt;sa[&lt;/code&gt; =&amp;gt; &lt;code&gt;&#34;object&#34;&lt;/code&gt; -&amp;gt; &lt;code&gt;&#34;[object]&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;va&#34;&lt;/code&gt; -&amp;gt; &lt;code&gt;S[&lt;/code&gt; or &lt;code&gt;sa[&lt;/code&gt; =&amp;gt; &lt;code&gt;&#34;object&#34;&lt;/code&gt; -&amp;gt; &lt;code&gt;[&#34;object&#34;]&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Delete/Yank/Change text object&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;di(&lt;/code&gt; or &lt;code&gt;vi(&lt;/code&gt; -&amp;gt; &lt;code&gt;d&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ca(&lt;/code&gt; or &lt;code&gt;va(&lt;/code&gt; -&amp;gt; &lt;code&gt;c&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yi(&lt;/code&gt; or &lt;code&gt;vi(&lt;/code&gt; -&amp;gt; &lt;code&gt;y&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Increment and Decrement&lt;/h2&gt; &#xA;&lt;p&gt;In normal mode, typing &lt;code&gt;ctrl-a&lt;/code&gt; will increase to the next keyword, and typing &lt;code&gt;ctrl-x&lt;/code&gt; will decrease to the next keyword. The keyword can be at the cursor, or to the right of the cursor (on the same line). The keyword could be as below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Number (Decimal, Hexadecimal, Binary...)&lt;/li&gt; &#xA; &lt;li&gt;Boolean (True or False, Yes or No, On or Off...)&lt;/li&gt; &#xA; &lt;li&gt;Weekday (Sunday, Monday, Tuesday, Wednesday...)&lt;/li&gt; &#xA; &lt;li&gt;Month (January, February, March, April, May...)&lt;/li&gt; &#xA; &lt;li&gt;Operator (&amp;amp;&amp;amp;, ||, ++, --, ==, !==, and, or...)&lt;/li&gt; &#xA; &lt;li&gt;...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Increment&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;9&lt;/code&gt; =&amp;gt; &lt;code&gt;10&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;aa99bb&lt;/code&gt; =&amp;gt; &lt;code&gt;aa100bb&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;aa100bc&lt;/code&gt; =&amp;gt; &lt;code&gt;aa101bc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;0xDe&lt;/code&gt; =&amp;gt; &lt;code&gt;0xdf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;0Xdf&lt;/code&gt; =&amp;gt; &lt;code&gt;0Xe0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;0b101&lt;/code&gt; =&amp;gt; &lt;code&gt;0b110&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;0B11&lt;/code&gt; =&amp;gt; &lt;code&gt;0B101&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;true&lt;/code&gt; =&amp;gt; &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yes&lt;/code&gt; =&amp;gt; &lt;code&gt;no&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;on&lt;/code&gt; =&amp;gt; &lt;code&gt;off&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;T&lt;/code&gt; =&amp;gt; &lt;code&gt;F&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Fri&lt;/code&gt; =&amp;gt; &lt;code&gt;Sat&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Oct&lt;/code&gt; =&amp;gt; &lt;code&gt;Nov&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Monday&lt;/code&gt; =&amp;gt; &lt;code&gt;Tuesday&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;January&lt;/code&gt; =&amp;gt; &lt;code&gt;February&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;+&lt;/code&gt; =&amp;gt; &lt;code&gt;-&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;++&lt;/code&gt; =&amp;gt; &lt;code&gt;--&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;==&lt;/code&gt; =&amp;gt; &lt;code&gt;!=&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;!==&lt;/code&gt; =&amp;gt; &lt;code&gt;===&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; =&amp;gt; &lt;code&gt;||&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;and&lt;/code&gt; =&amp;gt; &lt;code&gt;or&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Decrement:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;100&lt;/code&gt; =&amp;gt; &lt;code&gt;99&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;aa100bb&lt;/code&gt; =&amp;gt; &lt;code&gt;aa99bb&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;0&lt;/code&gt; =&amp;gt; &lt;code&gt;-1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;0xdE0&lt;/code&gt; =&amp;gt; &lt;code&gt;0xDDF&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;0xffFf0&lt;/code&gt; =&amp;gt; &lt;code&gt;0xfffef&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;0xfffF0&lt;/code&gt; =&amp;gt; &lt;code&gt;0xFFFEF&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;0x0&lt;/code&gt; =&amp;gt; &lt;code&gt;0xffffffffffffffff&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;0Xf&lt;/code&gt; =&amp;gt; &lt;code&gt;0Xe&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;0b100&lt;/code&gt; =&amp;gt; &lt;code&gt;0b010&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;0B100&lt;/code&gt; =&amp;gt; &lt;code&gt;0B011&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;True&lt;/code&gt; =&amp;gt; &lt;code&gt;False&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;On&lt;/code&gt; =&amp;gt; &lt;code&gt;Off&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Sun&lt;/code&gt; =&amp;gt; &lt;code&gt;Sat&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Jan&lt;/code&gt; =&amp;gt; &lt;code&gt;Dec&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Monday&lt;/code&gt; =&amp;gt; &lt;code&gt;Sunday&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;August&lt;/code&gt; =&amp;gt; &lt;code&gt;July&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/&lt;/code&gt; =&amp;gt; &lt;code&gt;*&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;++&lt;/code&gt; =&amp;gt; &lt;code&gt;--&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;==&lt;/code&gt; =&amp;gt; &lt;code&gt;!=&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;!==&lt;/code&gt; =&amp;gt; &lt;code&gt;===&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;||&lt;/code&gt; =&amp;gt; &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;or&lt;/code&gt; =&amp;gt; &lt;code&gt;and&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Custom Escape Key&lt;/h2&gt; &#xA;&lt;p&gt;You can use below options to custom the escape key which could better match your flavor, such as &lt;code&gt;jj&lt;/code&gt; or &lt;code&gt;jk&lt;/code&gt; and so on.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ZVM_VI_ESCAPE_BINDKEY&lt;/code&gt;: The vi escape key in all modes (default is &lt;code&gt;^[&lt;/code&gt; =&amp;gt; &lt;code&gt;ESC&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ZVM_VI_INSERT_ESCAPE_BINDKEY&lt;/code&gt;: The vi escape key in insert mode (default is &lt;code&gt;$ZVM_VI_ESCAPE_BINDKEY&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ZVM_VI_VISUAL_ESCAPE_BINDKEY&lt;/code&gt;: The vi escape key in visual mode (default is &lt;code&gt;$ZVM_VI_ESCAPE_BINDKEY&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ZVM_VI_OPPEND_ESCAPE_BINDKEY&lt;/code&gt;: The vi escape key in operator pending mode (default is &lt;code&gt;$ZVM_VI_ESCAPE_BINDKEY&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# Only changing the escape key to `jk` in insert mode, we still&#xA;# keep using the default keybindings `^[` in other modes&#xA;ZVM_VI_INSERT_ESCAPE_BINDKEY=jk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Readkey Engine&lt;/h2&gt; &#xA;&lt;p&gt;This plugin has supported to choose the readkey engine for reading and processing the key events. It easy to do by the &lt;code&gt;ZVM_READKEY_ENGINE&lt;/code&gt;option, currently the below engines are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ZVM_READKEY_ENGINE_NEX&lt;/code&gt;: It is a better readkey engine to replace ZLE (Beta).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ZVM_READKEY_ENGINE_ZLE&lt;/code&gt;: It is Zsh&#39;s default readkey engine (ZLE).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ZVM_READKEY_ENGINE_DEFAULT&lt;/code&gt;: It is the default engine of this plugin (It&#39;s the NEX engine now).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The NEX is a better engine for reading and handling the key events than the Zsh&#39;s ZLE engine, currently the NEX engine is still at beta stage, you can change back to Zsh&#39;s ZLE engine if you want.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# Change to Zsh&#39;s default readkey engine&#xA;ZVM_READKEY_ENGINE=$ZVM_READKEY_ENGINE_ZLE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;ZVM_KEYTIMEOUT&lt;/code&gt; option to adjust the key input timeout for waiting for next key, default is &lt;code&gt;0.4&lt;/code&gt; seconds.&lt;/p&gt; &#xA;&lt;p&gt;The escape key is a special case, it can be used standalone. NEX engine waits for a period after receiving the escape character, to determine whether it is standalone or part of an escape sequence. While waiting, additional key presses make the escape key behave as a meta key. If no other key presses come in, it is handled as a standalone escape.&lt;/p&gt; &#xA;&lt;p&gt;For the NEX engine, we can use &lt;code&gt;ZVM_ESCAPE_KEYTIMEOUT&lt;/code&gt; option to adjust the waiting timeout for the escape key, default is &lt;code&gt;0.03&lt;/code&gt; seconds.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration Function&lt;/h2&gt; &#xA;&lt;p&gt;Since there are some config options relied to some variables defined in the plugin, however, some not. We need to provide an unified config entry function. The name of entry function is stored in an option called &lt;code&gt;ZVM_CONFIG_FUNC&lt;/code&gt; and default value is &lt;code&gt;zvm_config&lt;/code&gt;, you can change to others for fitting your flavor.&lt;/p&gt; &#xA;&lt;p&gt;If this config function exists, it will be called automatically, you can do some configurations in this aspect before you source this plugin. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;function zvm_config() {&#xA;  ZVM_LINE_INIT_MODE=$ZVM_MODE_INSERT&#xA;  ZVM_VI_INSERT_ESCAPE_BINDKEY=jk&#xA;}&#xA;&#xA;source ~/zsh-vi-mode.zsh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Execute Extra Commands&lt;/h2&gt; &#xA;&lt;p&gt;This plugin has provided a mechanism to execute extra commands, and now you have the below aspects for executing something:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;zvm_before_init_commands=()&#xA;zvm_after_init_commands=()&#xA;zvm_before_select_vi_mode_commands=()&#xA;zvm_after_select_vi_mode_commands=()&#xA;zvm_before_lazy_keybindings_commands=()&#xA;zvm_after_lazy_keybindings_commands=()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since the default &lt;a href=&#34;https://raw.githubusercontent.com/jeffreytse/zsh-vi-mode/master/#initialization-mode&#34;&gt;initialization mode&lt;/a&gt;, this plugin will overwrite the previous key bindings, this causes the key bindings of other plugins (i.e. &lt;code&gt;fzf&lt;/code&gt;, &lt;code&gt;zsh-autocomplete&lt;/code&gt;, etc.) to fail.&lt;/p&gt; &#xA;&lt;p&gt;You can solve the compatibility issue as below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# Append a command directly&#xA;zvm_after_init_commands+=(&#39;[ -f ~/.fzf.zsh ] &amp;amp;&amp;amp; source ~/.fzf.zsh&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# Define an init function and append to zvm_after_init_commands&#xA;function my_init() {&#xA;  [ -f ~/.fzf.zsh ] &amp;amp;&amp;amp; source ~/.fzf.zsh&#xA;}&#xA;zvm_after_init_commands+=(my_init)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# The plugin will auto execute this zvm_after_init function&#xA;function zvm_after_init() {&#xA;  [ -f ~/.fzf.zsh ] &amp;amp;&amp;amp; source ~/.fzf.zsh&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or if you are using the &lt;code&gt;zinit&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# For postponing loading `fzf`&#xA;zinit ice lucid wait&#xA;zinit snippet OMZP::fzf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, &lt;a href=&#34;https://raw.githubusercontent.com/jeffreytse/zsh-vi-mode/master/#lazy-keybindings&#34;&gt;the lazy keybindings feature&lt;/a&gt; is enabled, all the keybindings of &lt;code&gt;normal&lt;/code&gt; and &lt;code&gt;visual&lt;/code&gt; mode should be executed by the &lt;code&gt;zvm_after_lazy_keybindings_commands&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# The plugin will auto execute this zvm_after_lazy_keybindings function&#xA;function zvm_after_lazy_keybindings() {&#xA;  bindkey -M vicmd &#39;s&#39; your_normal_widget&#xA;  bindkey -M visual &#39;n&#39; your_visual_widget&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom widgets and keybindings&lt;/h2&gt; &#xA;&lt;p&gt;This plugin has two functions for you to define custom widgets and keybindings. In case of unnecessary problems, it is better to use them, especially when you meet the key conflicts.&lt;/p&gt; &#xA;&lt;p&gt;To define a custom widget, you should:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# If [your_custom_widget] were ignored, it will be the same with &amp;lt;your_custom_widget&amp;gt;&#xA;zvm_define_widget &amp;lt;your_custom_widget&amp;gt; [your_custom_function]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To define a keybinding, you should:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;zvm_bindkey &amp;lt;keymap&amp;gt; &amp;lt;keys&amp;gt; &amp;lt;widget&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# Your custom widget&#xA;function my_custom_widget() {&#xA;  echo &#39;Hello, ZSH!&#39;&#xA;}&#xA;&#xA;# The plugin will auto execute this zvm_after_lazy_keybindings function&#xA;function zvm_after_lazy_keybindings() {&#xA;  # Here we define the custom widget&#xA;  zvm_define_widget my_custom_widget&#xA;&#xA;  # In normal mode, press Ctrl-E to invoke this widget&#xA;  zvm_bindkey vicmd &#39;^E&#39; my_custom_widget&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Vi Mode Indicator&lt;/h2&gt; &#xA;&lt;p&gt;This plugin has provided a &lt;code&gt;ZVM_MODE&lt;/code&gt; variable for you to retrieve current vi mode and better show the indicator.&lt;/p&gt; &#xA;&lt;p&gt;And currently the below modes are supported:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;ZVM_MODE_NORMAL&#xA;ZVM_MODE_INSERT&#xA;ZVM_MODE_VISUAL&#xA;ZVM_MODE_VISUAL_LINE&#xA;ZVM_MODE_REPLACE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For updating the vi mode indicator, we should add our commands to &lt;code&gt;zvm_after_select_vi_mode_commands&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# The plugin will auto execute this zvm_after_select_vi_mode function&#xA;function zvm_after_select_vi_mode() {&#xA;  case $ZVM_MODE in&#xA;    $ZVM_MODE_NORMAL)&#xA;      # Something you want to do...&#xA;    ;;&#xA;    $ZVM_MODE_INSERT)&#xA;      # Something you want to do...&#xA;    ;;&#xA;    $ZVM_MODE_VISUAL)&#xA;      # Something you want to do...&#xA;    ;;&#xA;    $ZVM_MODE_VISUAL_LINE)&#xA;      # Something you want to do...&#xA;    ;;&#xA;    $ZVM_MODE_REPLACE)&#xA;      # Something you want to do...&#xA;    ;;&#xA;  esac&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom Cursor Style&lt;/h2&gt; &#xA;&lt;p&gt;This plugin has provided some options for users to custom the cursor style for better terminal compatibility.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can disable this feature by the &lt;code&gt;ZVM_CURSOR_STYLE_ENABLED&lt;/code&gt; option (Default is &lt;code&gt;true&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# Disable the cursor style feature&#xA;ZVM_CURSOR_STYLE_ENABLED=false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can set your cursor style for different vi mode:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# The prompt cursor in normal mode&#xA;ZVM_NORMAL_MODE_CURSOR&#xA;&#xA;# The prompt cursor in insert mode&#xA;ZVM_INSERT_MODE_CURSOR&#xA;&#xA;# The prompt cursor in visual mode&#xA;ZVM_VISUAL_MODE_CURSOR&#xA;&#xA;# The prompt cursor in visual line mode&#xA;ZVM_VISUAL_LINE_MODE_CURSOR&#xA;&#xA;# The prompt cursor in operator pending mode&#xA;ZVM_OPPEND_MODE_CURSOR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;And the below cursor styles are supported:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;ZVM_CURSOR_USER_DEFAULT&#xA;ZVM_CURSOR_BLOCK&#xA;ZVM_CURSOR_UNDERLINE&#xA;ZVM_CURSOR_BEAM&#xA;ZVM_CURSOR_BLINKING_BLOCK&#xA;ZVM_CURSOR_BLINKING_UNDERLINE&#xA;ZVM_CURSOR_BLINKING_BEAM&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Custom your cursor style is easy as below:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;ZVM_INSERT_MODE_CURSOR=$ZVM_CURSOR_BEAM&#xA;ZVM_NORMAL_MODE_CURSOR=$ZVM_CURSOR_BLOCK&#xA;ZVM_OPPEND_MODE_CURSOR=$ZVM_CURSOR_UNDERLINE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Also, custom your colorful cursor style as below:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# The plugin will auto execute this zvm_config function&#xA;zvm_config() {&#xA;  # Retrieve default cursor styles&#xA;  local ncur=$(zvm_cursor_style $ZVM_NORMAL_MODE_CURSOR)&#xA;  local icur=$(zvm_cursor_style $ZVM_INSERT_MODE_CURSOR)&#xA;&#xA;  # Append your custom color for your cursor&#xA;  ZVM_INSERT_MODE_CURSOR=$icur&#39;\e\e]12;red\a&#39;&#xA;  ZVM_NORMAL_MODE_CURSOR=$ncur&#39;\e\e]12;#008800\a&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can use &lt;code&gt;ZVM_TERM&lt;/code&gt; option to set the term type for plugin to handle terminal escape sequences, default is &lt;code&gt;$TERM&lt;/code&gt;. It could be &lt;code&gt;xterm-256color&lt;/code&gt;, &lt;code&gt;alacritty-256color&lt;/code&gt;, &lt;code&gt;st-256color&lt;/code&gt;, etc. It&#39;s important for some terminal emulators to show cursor properly.&lt;/p&gt; &#xA;&lt;h2&gt;Highlight Behavior&lt;/h2&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;ZVM_VI_HIGHLIGHT_BACKGROUND&lt;/code&gt;, &lt;code&gt;ZVM_VI_HIGHLIGHT_FOREGROUND&lt;/code&gt; and &lt;code&gt;ZVM_VI_HIGHLIGHT_EXTRASTYLE&lt;/code&gt; to change the highlight behaviors ( surrounds, visual-line, etc.), the color value could be &lt;em&gt;a color name&lt;/em&gt; or &lt;em&gt;a hex color value&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;ZVM_VI_HIGHLIGHT_FOREGROUND=green             # Color name&#xA;ZVM_VI_HIGHLIGHT_FOREGROUND=#008800           # Hex value&#xA;ZVM_VI_HIGHLIGHT_BACKGROUND=red               # Color name&#xA;ZVM_VI_HIGHLIGHT_BACKGROUND=#ff0000           # Hex value&#xA;ZVM_VI_HIGHLIGHT_EXTRASTYLE=bold,underline    # bold and underline&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Command Line Initial Mode&lt;/h2&gt; &#xA;&lt;p&gt;You can set the command line initial mode by the &lt;code&gt;ZVM_LINE_INIT_MODE&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;Currently the below modes are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ZVM_MODE_LAST&lt;/code&gt; : Starting with last mode (Default).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ZVM_MODE_INSERT&lt;/code&gt; : Starting with insert mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ZVM_MODE_NORMAL&lt;/code&gt; : Starting with normal mode.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# Always starting with insert mode for each command line&#xA;ZVM_LINE_INIT_MODE=$ZVM_MODE_INSERT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Lazy Keybindings&lt;/h2&gt; &#xA;&lt;p&gt;This plugin has supported the lazy keybindings feature, and it is enabled by default. To disable it, you can set the option &lt;code&gt;ZVM_LAZY_KEYBINDINGS&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; before this plugin is loaded. This feature will postpone all the keybindings of &lt;code&gt;normal&lt;/code&gt; and &lt;code&gt;visual&lt;/code&gt; mode to the first time you enter the normal mode.&lt;/p&gt; &#xA;&lt;p&gt;It can greatly improve the startup speed, especially you open the terminal and just want to execute a simple command.&lt;/p&gt; &#xA;&lt;h2&gt;Initialization Mode&lt;/h2&gt; &#xA;&lt;p&gt;In order to prevent various problems related to keybindings caused by the plugin sourcing sequence, and also keep the same functionality for this plugin, the initialization of this plugin was postponed to the first command line starting.&lt;/p&gt; &#xA;&lt;p&gt;However, almost all plugins are initialized when the script is sourced. Therefore, this plugin provides an option &lt;code&gt;ZVM_INIT_MODE&lt;/code&gt; to change the initialization mode.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# Do the initialization when the script is sourced (i.e. Initialize instantly)&#xA;ZVM_INIT_MODE=sourcing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üíé Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zsh.org/&#34;&gt;Zsh&lt;/a&gt; - A powerful shell that operates as both an interactive shell and as a scripting language interpreter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh&#34;&gt;Oh-My-Zsh&lt;/a&gt; - A delightful, open source, community-driven framework for managing your ZSH configuration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tpope/vim-surround&#34;&gt;vim-surround&lt;/a&gt; - A vim plugin that all about &#34;surroundings&#34;: parentheses, brackets, quotes, XML tags, and more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/machakann/vim-sandwich&#34;&gt;vim-sandwich&lt;/a&gt; - A set of operator and textobject plugins to add/delete/replace surroundings of a sandwiched textobject.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üî´ Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Issues and Pull Requests are greatly appreciated. If you&#39;ve never contributed to an open source project before I&#39;m more than happy to walk you through how to create a pull request.&lt;/p&gt; &#xA;&lt;p&gt;You can start by &lt;a href=&#34;https://github.com/jeffreytse/zsh-vi-mode/issues/new&#34;&gt;opening an issue&lt;/a&gt; describing the problem that you&#39;re looking to resolve and we&#39;ll go from there.&lt;/p&gt; &#xA;&lt;h2&gt;üåà License&lt;/h2&gt; &#xA;&lt;p&gt;This theme is licensed under the &lt;a href=&#34;https://opensource.org/licenses/mit-license.php&#34;&gt;MIT license&lt;/a&gt; ¬© Jeffrey Tse.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ASHWIN990/ADB-Toolkit</title>
    <updated>2022-08-06T01:54:35Z</updated>
    <id>tag:github.com,2022-08-06:/ASHWIN990/ADB-Toolkit</id>
    <link href="https://github.com/ASHWIN990/ADB-Toolkit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ADB-Toolkit V2 for easy ADB tricks with many perks in all one. ENJOY!&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34; markdown=&#34;1&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPLv3-blue.svg?sanitize=true&#34; alt=&#34;License: GPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ASHWIN990/ADB-Toolkit&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Version%3F-2.3-green.svg?sanitize=true&#34; alt=&#34;Version: 2.3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitHub.com/ASHWIN990/ADB-Toolkit/graphs/commit-activity&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Maintained%3F-yes-green.svg?sanitize=true&#34; alt=&#34;Maintenance&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://inventory.rawsec.ml/tools.html#ADB-Toolkit&#34;&gt;&lt;img src=&#34;https://inventory.rawsec.ml/img/badges/Rawsec-inventoried-FF5050_flat.svg?sanitize=true&#34; alt=&#34;Rawsec&#39;s CyberSecurity Inventory&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/software/bash/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Made%20with%20Bash-1f425f.svg?logo=image%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyZpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw%2FeHBhY2tldCBiZWdpbj0i77u%2FIiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8%2BIDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNi1jMTExIDc5LjE1ODMyNSwgMjAxNS8wOS8xMC0wMToxMDoyMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENDIDIwMTUgKFdpbmRvd3MpIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOkE3MDg2QTAyQUZCMzExRTVBMkQxRDMzMkJDMUQ4RDk3IiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOkE3MDg2QTAzQUZCMzExRTVBMkQxRDMzMkJDMUQ4RDk3Ij4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6QTcwODZBMDBBRkIzMTFFNUEyRDFEMzMyQkMxRDhEOTciIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6QTcwODZBMDFBRkIzMTFFNUEyRDFEMzMyQkMxRDhEOTciLz4gPC9yZGY6RGVzY3JpcHRpb24%2BIDwvcmRmOlJERj4gPC94OnhtcG1ldGE%2BIDw%2FeHBhY2tldCBlbmQ9InIiPz6lm45hAAADkklEQVR42qyVa0yTVxzGn7d9Wy03MS2ii8s%2BeokYNQSVhCzOjXZOFNF4jx%2BMRmPUMEUEqVG36jo2thizLSQSMd4N8ZoQ8RKjJtooaCpK6ZoCtRXKpRempbTv5ey83bhkAUphz8fznvP8znn%2B%2F3NeEEJgNBoRRSmz0ub%2FfuxEacBg%2FDmYtiCjgo5NG2mBXq%2BH5I1ogMRk9Zbd%2BQU2e1ML6VPLOyf5tvBQ8yT1lG10imxsABm7SLs898GTpyYynEzP60hO3trHDKvMigUwdeaceacqzp7nOI4n0SSIIjl36ao4Z356OV07fSQAk6xJ3XGg%2BLCr1d1OYlVHp4eUHPnerU79ZA%2F1kuv1JQMAg%2BE4O2P23EumF3VkvHprsZKMzKwbRUXFEyTvSIEmTVbrysp%2BWr8wfQHGK6WChVa3bKUmdWou%2BjpArdGkzZ41c1zG%2Fu5uGH4swzd561F%2BuhIT4%2BLnSuPsv9%2BJKIpjNr9dXYOyk7%2FBZrcjIT4eCnoKgedJP4BEqhG77E3NKP31FO7cfQA5K0dSYuLgz2TwCWJSOBzG6crzKK%2BohNfni%2Bx6OMUMMNe%2Fgf7ocbw0v0acKg6J8Ql0q%2BT%2FAXR5PNi5dz9c71upuQqCKFAD%2BYhrZLEAmpodaHO3Qy6TI3NhBpbrshGtOWKOSMYwYGQM8nJzoFJNxP2HjyIQho4PewK6hBktoDcUwtIln4PjOWzflQ%2Be5yl0yCCYgYikTclGlxadio%2BBQCSiW1UXoVGrKYwH4RgMrjU1HAB4vR6LzWYfFUCKxfS8Ftk5qxHoCUQAUkRJaSEokkV6Y%2F%2BJUOC4hn6A39NVXVBYeNP8piH6HeA4fPbpdBQV5KOx0QaL1YppX3Jgk0TwH2Vg6S3u%2BdB91%2B%2FpuNYPYFl5uP5V7ZqvsrX7jxqMXR6ff3gCQSTzFI0a1TX3wIs8ul%2Bq4HuWAAiM39vhOuR1O1fQ2gT%2F26Z8Z5vrl2OHi9OXZn995nLV9aFfS6UC9JeJPfuK0NBohWpCHMSAAsFe74WWP%2BvT25wtP9Bpob6uGqqyDnOtaeumjRu%2ByFu36VntK%2FPA5umTJeUtPWZSU9BCgud661odVp3DZtkc7AnYR33RRC708PrVi1larW7XwZIjLnd7R6SgSqWSNjU1B3F72pz5TZbXmX5vV81Yb7Lg7XT%2FUXriu8XLVqw6c6XqWnBKiiYU%2BMt3wWF7u7i91XlSEITwSAZ%2FCzAAHsJVbwXYFFEAAAAASUVORK5CYII%3D&#34; alt=&#34;made-with-bash&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ashwini.codes&#34;&gt;&lt;img src=&#34;https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2FASHWIN990%2FADB-Toolkit&amp;amp;count_bg=%2379C83D&amp;amp;title_bg=%23555555&amp;amp;icon=&amp;amp;icon_color=%23E7E7E7&amp;amp;title=Hits&amp;amp;edge_flat=false&#34; alt=&#34;Hits&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/ASHWIN990/ADB-Toolkit&#34;&gt; &#xA;  &lt;!--&lt;img align=&#34;center&#34; src=&#34;screenshots/logo.png&#34; width=&#34;780&#34; height=&#34;80&#34;&gt;&lt;br&gt;--&gt; &lt;img align=&#34;center&#34; src=&#34;https://raw.githubusercontent.com/ASHWIN990/ADB-Toolkit/master/screenshots/ADB-Toolkit-Banner.png&#34; alt=&#34;ADB-Toolkit-Banner&#34; border=&#34;0&#34; height=&#34;320px&#34; width=&#34;640&#34;&gt;&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://github.com/ASHWIN990/ADB-Toolkit&#34;&gt; &lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/ASHWIN990/ADB-Toolkit&#34;&gt;ADB-Toolkit V2.3&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;a href=&#34;https://github.com/ASHWIN990/ADB-Toolkit&#34;&gt; &lt;/a&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;&lt;b&gt; Tool for testing your Android device and HaHaHack someone Android Phone ( Don&#39;t use with wrong intentions ) ü§òü§ò &lt;/b&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;ADB-Toolkit is a BASH Script with 28 options and an METASPLOIT Section which has 6 options which is made to do easy penetration testing in Android Device.&lt;/strong&gt; You can do preety much any thing with this script and test your android device is it safe or not. This script is made with the help of ADB (Android Debug Bridge) it&#39;s an tool which is used for the developers for debugging the android device but as we know every thing has it&#39;s two side a good and a bad and i&#39;m not telling you to do bad things but be don&#39;t do illegal things or FBI will find you üòÇüòÇ.&lt;/p&gt; &#xA;&lt;p&gt;Note : I&#39;m not responsible for any thing you do to anyone with this tool this does not come under my responsibilty.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;METASPLOIT SECTION :- üòé&lt;/strong&gt;This section consists of scripts which are related to metasploit payload and you can create an payload and install it and launch it without even touching the phone and you know the power of Metasploit.&lt;/p&gt; &#xA;&lt;h2&gt;Changelogs&lt;/h2&gt; &#xA;&lt;h3&gt;Changelog v2.32&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Added vesion checking code&#xA;Really big bug fixes&#xA;Wiki in made&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Changelog V2.3&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Added multi device support, now 3&#xA;Added support to Arch, Fedora, Centos&#xA;Added option to restart the ADB server or not in the beginning of the script&#xA;Added Option to clear screen when a specfic option is done executing&#xA;Fix the Exit option (Not Working)&#xA;Simplified the Remote connection establishment&#xA;Fix 100&#39;s of Bugs&#xA;Specified the directories for pulling the data&#xA;Make the script executable from any where in shell (Fixed)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Changelog V2.1&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Added Metasploit Section&#xA;&#xA;Added option to restart the ADB server or not in the beginning of the script&#xA;&#xA;Added 7 more options :-&#xA;1. COPY ALL DEVICE STORAGE&#xA;2. COPY A SPECIFIED FILE OR FOLDER&#xA;3. PUT A FILE IN VICTIMS DEVICE&#xA;4. LAUNCH AN APPLICATION&#xA;5. CHECK IS PHONE ROOTED OR NOT&#xA;6. HANG THE PHONE ( Rooted Phone )&#xA;7. SEND SMS FROM THE PHONE&#xA;&#xA;Fixed the Remote connection not establishing&#xA;Make the script executable from any where in shell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Prerequisite&lt;/h2&gt; &#xA;&lt;p&gt;Before using this tool you must enable Usb-Debugging from the devloper settings from the Android setting and then you are good to go.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. Go to settings&#xA;2. Go to About device/tablet&#xA;3. Tap Build Number 7 times&#xA;4. Developer options will occur&#xA;5. Go to Developer options&#xA;6. Search for Usb Debugging &amp;amp; Install via USB&#xA;7. Turn those settings on&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Guys i suggest please reinstall the toolkit or git pull it for every new releases&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;foo@bar:~$ git clone https://github.com/ASHWIN990/ADB-Toolkit.git&#xA;&#xA;foo@bar:~$ cd ADB-Toolkit&#xA;&#xA;foo@bar:~$ sudo chmod +x install.sh&#xA;&#xA;foo@bar:~$ sudo ./install.sh -i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;foo@bar:~$ sudo ./ADB-Toolkit.sh&#xA;&#xA;&#34;or you can do&#34;&#xA;&#xA;foo@bar:~$ sudo bash ADB-Toolkit.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ADB-Toolkit Screenshot&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img align=&#34;center&#34; src=&#34;https://raw.githubusercontent.com/ASHWIN990/ADB-Toolkit/master/screenshots/git1.jpeg&#34;&gt;&lt;br&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Metasploit Section Screenshot&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img align=&#34;center&#34; src=&#34;https://raw.githubusercontent.com/ASHWIN990/ADB-Toolkit/master/screenshots/git2.jpeg&#34;&gt;&lt;br&gt;&lt;br&gt; &lt;img align=&#34;center&#34; src=&#34;https://raw.githubusercontent.com/ASHWIN990/ADB-Toolkit/master/screenshots/git3.jpeg&#34;&gt;&lt;br&gt;&lt;br&gt; &lt;img align=&#34;center&#34; src=&#34;https://raw.githubusercontent.com/ASHWIN990/ADB-Toolkit/master/screenshots/git4.jpeg&#34;&gt;&lt;br&gt;&lt;br&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.&lt;/p&gt; &#xA;&lt;h2&gt;Support Me&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/ashwinisahu&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ASHWINI SAHU&lt;/strong&gt; - &lt;em&gt;WHOLE WORK&lt;/em&gt; - (&lt;a href=&#34;https://github.com/ASHWIN990&#34;&gt;https://github.com/ASHWIN990&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>