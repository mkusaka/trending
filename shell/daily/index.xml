<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-08T01:45:21Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>WhatsApp/proxy</title>
    <updated>2023-01-08T01:45:21Z</updated>
    <id>tag:github.com,2023-01-08:/WhatsApp/proxy</id>
    <link href="https://github.com/WhatsApp/proxy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repository contains the WhatsApp proxy implementation for users to host their own proxy infrastructure to connect to WhatsApp for chat (VoIP and media upload/download not currently proxied)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WhatsApp Chat Proxy&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/WhatsApp/proxy&#34;&gt;&lt;img alt=&#34;github&#34; src=&#34;https://img.shields.io/badge/github-WhatsApp/proxy-8da0cb?style=for-the-badge&amp;amp;labelColor=555555&amp;amp;logo=github&#34; height=&#34;20&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/WhatsApp/proxy/actions?query=branch%3Amain&#34;&gt;&lt;img alt=&#34;build status&#34; src=&#34;https://img.shields.io/github/workflow/status/WhatsApp/proxy/ci/main?style=for-the-badge&#34; height=&#34;20&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are unable to connect directly to WhatsApp, a proxy can be used as a gateway between you and our servers. To help yourself or others re-establish connection to WhatsApp, you can set up a proxy server.&lt;/p&gt; &#xA;&lt;p&gt;If you already have a proxy to use, you can connect it to WhatsApp by following the steps in this &lt;a href=&#34;https://faq.whatsapp.com/520504143274092&#34;&gt;article&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What you&#39;ll need&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/install/&#34;&gt;Docker&lt;/a&gt; (enable Docker on startup if your host system allows)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker compose&lt;/a&gt; (optional)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Setting up your proxy&lt;/h2&gt; &#xA;&lt;h3&gt;1. Clone the repository to your local machine&lt;/h3&gt; &#xA;&lt;h3&gt;2. &lt;a href=&#34;https://docs.docker.com/get-docker/&#34;&gt;Install Docker&lt;/a&gt; for your system&lt;/h3&gt; &#xA;&lt;h3&gt;3. Install Docker compose&lt;/h3&gt; &#xA;&lt;p&gt;For Linux users, if your &lt;a href=&#34;https://docs.docker.com/desktop/install/linux-install/&#34;&gt;version of Docker&lt;/a&gt; doesn&#39;t come pre-installed with Docker compose, you can install a one-off version (For Linux).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Download the pkg&#xA;sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/bin/docker-compose&#xA;# Enable execution of the script&#xA;sudo chmod +x /usr/bin/docker-compose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Build the proxy host container&lt;/h3&gt; &#xA;&lt;p&gt;Build the proxy host container with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build /path_to_cloned_repository/proxy/ -t whatsapp_proxy:1.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The container will be compiled and tagged as &lt;code&gt;whatsapp_proxy:1.0&lt;/code&gt; for easy reference.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please note&lt;/strong&gt;, the &lt;code&gt;/path_to_cloned_repository&lt;/code&gt; should the same folder where you cloned this repository in step 1 above. Additionally, the Dockerfile to build the container is in a sub-folder &lt;strong&gt;proxy&lt;/strong&gt; of the repository.&lt;/p&gt; &#xA;&lt;h2&gt;Running the proxy&lt;/h2&gt; &#xA;&lt;h3&gt;Manually execute the container&lt;/h3&gt; &#xA;&lt;p&gt;You can manually execute the Docker container with the following &lt;code&gt;docker&lt;/code&gt; command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it -p 80:80 -p 443:443 -p 5222:5222 -p 8080:8080 -p 8443:8443 -p 8222:8222 -p 8199:8199 whatsapp_proxy:1.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Automate the container lifecycle with Docker compose&lt;/h3&gt; &#xA;&lt;p&gt;Docker Compose is an automated tool to run multi-container deployments, but it also helps automate the command-line arguments necessary to run a single container. It is a YAML definition file that denotes all the settings to start up and run the container. It also has restart strategies in the event the container crashes or self-restarts. Docker Compose helps manage your container setup and necessary port forwards without user interaction. We recommend utilizing Docker Compose because you usually donâ€™t want to manually run the container outside of testing scenarios.&lt;/p&gt; &#xA;&lt;p&gt;We provide a sample &lt;a href=&#34;https://raw.githubusercontent.com/WhatsApp/proxy/main/proxy/ops/docker-compose.yml&#34;&gt;docker-compose.yml&lt;/a&gt; file for you which defines a standard deployment of the proxy container.&lt;/p&gt; &#xA;&lt;p&gt;Once Docker compose is installed, you can test your specific configuration by running Docker compose interactively with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker compose -f /path/to/this/repo/docker-compose.yml up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will allow you to see the output from the build + container hosting process and check that everything is set up correctly.&lt;/p&gt; &#xA;&lt;p&gt;When you are ready to run the container as a service, do*:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker compose -f /path/to/this/repo/docker-compose.yml up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;*Note the &lt;code&gt;-d&lt;/code&gt; flag which means &#34;daemonize&#34; and run as a service.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;To stop the container you can similarly do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker compose down&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Automate host reboots with Docker compose&lt;/h3&gt; &#xA;&lt;p&gt;Once you have Docker compose set up, you can also automate the deployment for host reboots by utilizing a &lt;code&gt;systemd&lt;/code&gt; service (if your hosting environment supports it).&lt;/p&gt; &#xA;&lt;p&gt;We provide a sample &lt;a href=&#34;https://raw.githubusercontent.com/WhatsApp/proxy/main/proxy/ops/docker_boot.service&#34;&gt;&lt;code&gt;docker_boot.service&lt;/code&gt;&lt;/a&gt; service definition for you which you should customize to your own environment.&lt;/p&gt; &#xA;&lt;p&gt;To install and setup the &lt;code&gt;systemd&lt;/code&gt; service*:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Copy the service definition to systemd folder&#xA;cp -v docker_boot.service /etc/systemd/system/&#xA;# Enable starting the service on startup&#xA;systemctl enable docker_boot.service&#xA;# Start the service (will docker compose up the container)&#xA;systemctl start docker_boot.service&#xA;# Check container status with&#xA;docker ps&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;*Make sure to update the path to your specific &lt;code&gt;docker-compose.yml&lt;/code&gt; file in the service definition &lt;code&gt;docker_boot.service&lt;/code&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Kubernetes deployment&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to configure your proxy using Kubernetes, or run the Docker runtime through Kubernetes, please see our &lt;a href=&#34;https://raw.githubusercontent.com/WhatsApp/proxy/main/charts/README.md&#34;&gt;Helm chart README&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;An Overview of the WhatsApp Proxy Architecture&lt;/h1&gt; &#xA;&lt;p&gt;Depending on the scenario in which you utilize your proxy, the proxy container exposes multiple ports. The basic ports may include:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;80: Standard web traffic (HTTP)&lt;/li&gt; &#xA; &lt;li&gt;443: Standard web traffic, encrypted (HTTPS)&lt;/li&gt; &#xA; &lt;li&gt;5222: Jabber protocol traffic (WhatsApp default)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;There are also ports configured which accept incoming &lt;a href=&#34;https://www.haproxy.com/blog/use-the-proxy-protocol-to-preserve-a-clients-ip-address/&#34;&gt;proxy headers&lt;/a&gt; (version 1 or 2) on connections. If you have a network load balancer you can preserve the client IP address if you want.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;8080: Standard web traffic (HTTP) with PROXY protocol expected&lt;/li&gt; &#xA; &lt;li&gt;8443: Standard web traffic, encrypted (HTTPS) with PROXY protocol expected&lt;/li&gt; &#xA; &lt;li&gt;8222: Jabber protocol traffic (WhatsApp default) with PROXY protocol expected&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Additionally the container exposes a statistics port on &lt;code&gt;:8199&lt;/code&gt; which can be connected to directly with &lt;code&gt;http://&amp;lt;host-ip&amp;gt;:8199&lt;/code&gt; which you can use to monitor HAProxy statistics.&lt;/p&gt; &#xA;&lt;h2&gt;Certificate generation for SSL encrypted ports&lt;/h2&gt; &#xA;&lt;p&gt;Ports 443 and 8443 are protected by a self-signed encryption certificate generated at container start time. There are some custom options should you wish to tweak the settings of the generated certificates&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SSL_DNS&lt;/code&gt; comma seperate list of alternative hostnames, no default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SSL_IP&lt;/code&gt; comma seperate list of alternative IPs, no default&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;They can be set with commands like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build . --build-arg SSL_DNS=test.example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Contributors&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The authors of this code are Sean Lawlor (&lt;a href=&#34;https://github.com/slawlor&#34;&gt;@slawlor&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To learn more about contributing to this project, &lt;a href=&#34;https://github.com/whatsapp/proxy/raw/main/CONTRIBUTING.md&#34;&gt;see this document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;This project is licensed under &lt;a href=&#34;https://github.com/novifinancial/akd/raw/main/LICENSE-MIT&#34;&gt;MIT&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>