<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-20T01:39:30Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dockur/macos</title>
    <updated>2025-03-20T01:39:30Z</updated>
    <id>tag:github.com,2025-03-20:/dockur/macos</id>
    <link href="https://github.com/dockur/macos" rel="alternate"></link>
    <summary type="html">&lt;p&gt;macOS inside a Docker container.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;OSX&lt;br&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;a href=&#34;https://github.com/dockur/macos/&#34;&gt;&lt;img src=&#34;https://github.com/dockur/macos/raw/master/.github/logo.png&#34; title=&#34;Logo&#34; style=&#34;max-width:100%;&#34; width=&#34;128&#34;&gt;&lt;/a&gt; &#xA; &lt;/div&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;p&gt;&lt;a href=&#34;https://github.com/dockur/macos/&#34;&gt;&lt;img src=&#34;https://github.com/dockur/macos/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/dockurr/macos/tags&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/v/dockurr/macos/latest?arch=amd64&amp;amp;sort=semver&amp;amp;color=066da5&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/dockurr/macos/tags&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/dockurr/macos/latest?color=066da5&amp;amp;label=size&#34; alt=&#34;Size&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dockur/macos/pkgs/container/macos&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fipitio.github.io%2Fbackage%2Fdockur%2Fmacos%2Fmacos.json&amp;amp;query=%24.downloads&amp;amp;logo=github&amp;amp;style=flat&amp;amp;color=066da5&amp;amp;label=pulls&#34; alt=&#34;Package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/dockurr/macos/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/dockurr/macos.svg?style=flat&amp;amp;label=pulls&amp;amp;logo=docker&#34; alt=&#34;Pulls&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;/div&gt;&lt;/h1&gt; &#xA;&lt;p&gt;OSX (macOS) inside a Docker container.&lt;/p&gt; &#xA;&lt;h2&gt;Features ‚ú®&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;KVM acceleration&lt;/li&gt; &#xA; &lt;li&gt;Web-based viewer&lt;/li&gt; &#xA; &lt;li&gt;Automatic download&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage üê≥&lt;/h2&gt; &#xA;&lt;h5&gt;Via Docker Compose:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;services:&#xA;  macos:&#xA;    image: dockurr/macos&#xA;    container_name: macos&#xA;    environment:&#xA;      VERSION: &#34;13&#34;&#xA;    devices:&#xA;      - /dev/kvm&#xA;      - /dev/net/tun&#xA;    cap_add:&#xA;      - NET_ADMIN&#xA;    ports:&#xA;      - 8006:8006&#xA;      - 5900:5900/tcp&#xA;      - 5900:5900/udp&#xA;    volumes:&#xA;      - ./macos:/storage&#xA;    restart: always&#xA;    stop_grace_period: 2m&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Via Docker CLI:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it --rm --name macos -p 8006:8006 --device=/dev/kvm --device=/dev/net/tun --cap-add NET_ADMIN -v ${PWD:-.}/macos:/storage --stop-timeout 120 dockurr/macos&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Via Kubernetes:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;kubectl apply -f https://raw.githubusercontent.com/dockur/macos/refs/heads/master/kubernetes.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Via Github Codespaces:&lt;/h5&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/codespaces/new?skip_quickstart=true&amp;amp;machine=basicLinux32gb&amp;amp;repo=809475352&amp;amp;ref=master&amp;amp;devcontainer_path=.devcontainer.json&#34;&gt;&lt;code&gt;Click here to launch this container in the cloud!&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility ‚öôÔ∏è&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Product&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Platform&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Docker Engine&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Docker Desktop&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;‚ùå&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Docker Desktop&lt;/td&gt; &#xA;   &lt;td&gt;macOS&lt;/td&gt; &#xA;   &lt;td&gt;‚ùå&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Docker Desktop&lt;/td&gt; &#xA;   &lt;td&gt;Windows 11&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Docker Desktop&lt;/td&gt; &#xA;   &lt;td&gt;Windows 10&lt;/td&gt; &#xA;   &lt;td&gt;‚ùå&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Github Codespaces&lt;/td&gt; &#xA;   &lt;td&gt;Cloud&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;FAQ üí¨&lt;/h2&gt; &#xA;&lt;h3&gt;How do I use it?&lt;/h3&gt; &#xA;&lt;p&gt;Very simple! These are the steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Start the container and connect to &lt;a href=&#34;http://127.0.0.1:8006/&#34;&gt;port 8006&lt;/a&gt; using your web browser.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Choose &lt;code&gt;Disk Utility&lt;/code&gt; and then select the largest &lt;code&gt;Apple Inc. VirtIO Block Media&lt;/code&gt; disk.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click the &lt;code&gt;Erase&lt;/code&gt; button to format the disk to APFS, and give it any name you like.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Close the current window and proceed the installation by clicking &lt;code&gt;Reinstall macOS&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When prompted where you want to install it, select the disk you created previously.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;After all files are copied, select your region, language, and account settings.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Enjoy your brand new machine, and don&#39;t forget to star this repo!&lt;/p&gt; &#xA;&lt;h3&gt;How do I select the version of macOS?&lt;/h3&gt; &#xA;&lt;p&gt;By default, macOS 13 (Ventura) will be installed, but you can add the &lt;code&gt;VERSION&lt;/code&gt; environment variable in order to specify an alternative:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;environment:&#xA;  VERSION: &#34;13&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Select from the values below:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Value&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Version&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;15&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;macOS 15&lt;/td&gt; &#xA;   &lt;td&gt;Sequoia&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;14&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;macOS 14&lt;/td&gt; &#xA;   &lt;td&gt;Sonoma&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;13&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;macOS 13&lt;/td&gt; &#xA;   &lt;td&gt;Ventura&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;12&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;macOS 12&lt;/td&gt; &#xA;   &lt;td&gt;Monterey&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;11&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;macOS 11&lt;/td&gt; &#xA;   &lt;td&gt;Big Sur&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;How do I change the storage location?&lt;/h3&gt; &#xA;&lt;p&gt;To change the storage location, include the following bind mount in your compose file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;volumes:&#xA;  - ./macos:/storage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace the example path &lt;code&gt;./macos&lt;/code&gt; with the desired storage folder or named volume.&lt;/p&gt; &#xA;&lt;h3&gt;How do I change the size of the disk?&lt;/h3&gt; &#xA;&lt;p&gt;To expand the default size of 64 GB, add the &lt;code&gt;DISK_SIZE&lt;/code&gt; setting to your compose file and set it to your preferred capacity:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;environment:&#xA;  DISK_SIZE: &#34;256G&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] This can also be used to resize the existing disk to a larger capacity without any data loss.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;How do I change the amount of CPU or RAM?&lt;/h3&gt; &#xA;&lt;p&gt;By default, the container will be allowed to use a maximum of 2 CPU cores and 4 GB of RAM.&lt;/p&gt; &#xA;&lt;p&gt;If you want to adjust this, you can specify the desired amount using the following environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;environment:&#xA;  RAM_SIZE: &#34;8G&#34;&#xA;  CPU_CORES: &#34;4&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How do I assign an individual IP address to the container?&lt;/h3&gt; &#xA;&lt;p&gt;By default, the container uses bridge networking, which shares the IP address with the host.&lt;/p&gt; &#xA;&lt;p&gt;If you want to assign an individual IP address to the container, you can create a macvlan network as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker network create -d macvlan \&#xA;    --subnet=192.168.0.0/24 \&#xA;    --gateway=192.168.0.1 \&#xA;    --ip-range=192.168.0.100/28 \&#xA;    -o parent=eth0 vlan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Be sure to modify these values to match your local subnet.&lt;/p&gt; &#xA;&lt;p&gt;Once you have created the network, change your compose file to look as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;services:&#xA;  macos:&#xA;    container_name: macos&#xA;    ..&amp;lt;snip&amp;gt;..&#xA;    networks:&#xA;      vlan:&#xA;        ipv4_address: 192.168.0.100&#xA;&#xA;networks:&#xA;  vlan:&#xA;    external: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An added benefit of this approach is that you won&#39;t have to perform any port mapping anymore, since all ports will be exposed by default.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT]&lt;br&gt; This IP address won&#39;t be accessible from the Docker host due to the design of macvlan, which doesn&#39;t permit communication between the two. If this is a concern, you need to create a &lt;a href=&#34;https://blog.oddbit.com/post/2018-03-12-using-docker-macvlan-networks/#host-access&#34;&gt;second macvlan&lt;/a&gt; as a workaround.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;How can macOS acquire an IP address from my router?&lt;/h3&gt; &#xA;&lt;p&gt;After configuring the container for &lt;a href=&#34;https://raw.githubusercontent.com/dockur/macos/master/#how-do-i-assign-an-individual-ip-address-to-the-container&#34;&gt;macvlan&lt;/a&gt;, it is possible for macOS to become part of your home network by requesting an IP from your router, just like your other devices.&lt;/p&gt; &#xA;&lt;p&gt;To enable this mode, in which the container and macOS will have separate IP addresses, add the following lines to your compose file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;environment:&#xA;  DHCP: &#34;Y&#34;&#xA;devices:&#xA;  - /dev/vhost-net&#xA;device_cgroup_rules:&#xA;  - &#39;c *:* rwm&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How do I pass-through a USB device?&lt;/h3&gt; &#xA;&lt;p&gt;To pass-through a USB device, first lookup its vendor and product id via the &lt;code&gt;lsusb&lt;/code&gt; command, then add them to your compose file like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;environment:&#xA;  ARGUMENTS: &#34;-device usb-host,vendorid=0x1234,productid=0x1234&#34;&#xA;devices:&#xA;  - /dev/bus/usb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How do I share files with the host?&lt;/h3&gt; &#xA;&lt;p&gt;To share files with the host, add the following volume to your compose file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;volumes:&#xA;  - ./example:/shared&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then start macOS and execute the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo -S mount_9p shared&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Finder‚Äôs menu bar, click on ‚ÄúGo ‚Äì Computer‚Äù to access this shared folder, it will show the contents of &lt;code&gt;./example&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How do I verify if my system supports KVM?&lt;/h3&gt; &#xA;&lt;p&gt;Only Linux and Windows 11 support KVM virtualization, macOS and Windows 10 do not unfortunately.&lt;/p&gt; &#xA;&lt;p&gt;You can run the following commands in Linux to check your system:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install cpu-checker&#xA;sudo kvm-ok&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you receive an error from &lt;code&gt;kvm-ok&lt;/code&gt; indicating that KVM cannot be used, please check whether:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;the virtualization extensions (&lt;code&gt;Intel VT-x&lt;/code&gt; or &lt;code&gt;AMD SVM&lt;/code&gt;) are enabled in your BIOS.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;you enabled &#34;nested virtualization&#34; if you are running the container inside a virtual machine.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;you are not using a cloud provider, as most of them do not allow nested virtualization for their VPS&#39;s.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you do not receive any error from &lt;code&gt;kvm-ok&lt;/code&gt; but the container still complains about KVM, please check whether:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;you are not using &#34;Docker Desktop for Linux&#34; as it does not support KVM, instead make use of Docker Engine directly.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;it could help to add &lt;code&gt;privileged: true&lt;/code&gt; to your compose file (or &lt;code&gt;sudo&lt;/code&gt; to your &lt;code&gt;docker run&lt;/code&gt; command), to rule out any permission issue.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How do I run Windows in a container?&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/dockur/windows&#34;&gt;dockur/windows&lt;/a&gt; for that. It shares many of the same features, and even has completely automatic installation.&lt;/p&gt; &#xA;&lt;h3&gt;How do I run a Linux desktop in a container?&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/qemus/qemu&#34;&gt;qemus/qemu&lt;/a&gt; in that case.&lt;/p&gt; &#xA;&lt;h3&gt;Is this project legal?&lt;/h3&gt; &#xA;&lt;p&gt;Yes, this project contains only open-source code and does not distribute any copyrighted material. Neither does it try to circumvent any copyright protection measures. So under all applicable laws, this project will be considered legal.&lt;/p&gt; &#xA;&lt;p&gt;However, by installing Apple&#39;s macOS, you must accept their end-user license agreement, which does not permit installation on non-official hardware. So only run this container on hardware sold by Apple, as any other use will be a violation of their terms and conditions.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements üôè&lt;/h2&gt; &#xA;&lt;p&gt;Special thanks to &lt;a href=&#34;https://github.com/seitenca&#34;&gt;seitenca&lt;/a&gt;, this project would not exist without her invaluable work.&lt;/p&gt; &#xA;&lt;h2&gt;Stars üåü&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/dockur/macos&#34;&gt;&lt;img src=&#34;https://starchart.cc/dockur/macos.svg?variant=adaptive&#34; alt=&#34;Stars&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer ‚öñÔ∏è&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Only run this container on Apple hardware, any other use is not permitted by their EULA. The product names, logos, brands, and other trademarks referred to within this project are the property of their respective trademark holders. This project is not affiliated, sponsored, or endorsed by Apple Inc.&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Gentleman-Programming/Gentleman.Dots</title>
    <updated>2025-03-20T01:39:30Z</updated>
    <id>tag:github.com,2025-03-20:/Gentleman-Programming/Gentleman.Dots</id>
    <link href="https://github.com/Gentleman-Programming/Gentleman.Dots" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My personal configuration for LazyVim !&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Gentleman.Dots&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/3f6c4f62-23d7-41d7-b7b1-42c7e0c32336&#34; alt=&#34;Screenshot 2025-02-07 102533&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains customized configurations for a complete development environment, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim&lt;/li&gt; &#xA; &lt;li&gt;Fish&lt;/li&gt; &#xA; &lt;li&gt;Zsh&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Nushell&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Tmux&lt;/li&gt; &#xA; &lt;li&gt;Zellij&lt;/li&gt; &#xA; &lt;li&gt;Terminal emulators: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Alacritty&lt;/li&gt; &#xA;   &lt;li&gt;WezTerm&lt;/li&gt; &#xA;   &lt;li&gt;Kitty&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can choose between automatic and manual installation methods depending on your preference and operating system.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; Windows users &lt;strong&gt;must&lt;/strong&gt; follow the manual installation instructions before running the script.&lt;/p&gt; &#xA;&lt;h2&gt;Installation (Automatic Recommended!)&lt;/h2&gt; &#xA;&lt;h3&gt;The Easy Way! Test the automated process and let the script do all the work for you üòò&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;strong&gt;automatic installation script&lt;/strong&gt; is the quickest and easiest way to set up your development environment. This script handles all the heavy lifting, but remember that you &lt;strong&gt;must install the font&lt;/strong&gt; mentioned below before running it. The script is designed for macOS, Linux, and WSL systems. If you‚Äôre on Windows, you‚Äôll need to follow the manual steps first before attempting to run this script.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -O https://raw.githubusercontent.com/Gentleman-Programming/Gentleman.Dots/refs/heads/main/install-linux-mac.sh&#xA;&#xA;sudo chmod +x install-linux-mac.sh&#xA;bash ./install-linux-mac.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Manual Installation&lt;/h2&gt; &#xA;&lt;p&gt;Welcome to the Gentleman.Dots manual configuration guide! This document will walk you through the steps required to set up your development environment.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Clone the repo before continuing!!!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:Gentleman-Programming/Gentleman.Dots.git&#xA;cd Gentleman.Dots&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;For Windows&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; Windows users must follow these manual installation steps before running the automated script.&lt;/p&gt; &#xA;&lt;h4&gt;1. Install WSL&lt;/h4&gt; &#xA;&lt;p&gt;WSL (Windows Subsystem for Linux) allows you to run Linux on Windows. Install it and set it to version 2:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl --install&#xA;wsl --set-default-version 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. Install a Linux Distribution&lt;/h4&gt; &#xA;&lt;p&gt;Install a Linux distribution (e.g., Ubuntu) in WSL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl --install -d Ubuntu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To list available distributions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl --list --online&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install your preferred distribution:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl --install -d &amp;lt;distribution-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3. Installing the Iosevka Font&lt;/h4&gt; &#xA;&lt;p&gt;The Iosevka Term Nerd Font is required for terminal emulators in this setup. On Windows, this installation must be done manually.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Download the Iosevka font&lt;/strong&gt; from its official site or from &lt;a href=&#34;https://github.com/ryanoasis/nerd-fonts&#34;&gt;Nerd Fonts GitHub&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extract the archive&lt;/strong&gt; and locate the font files (&lt;code&gt;.ttf&lt;/code&gt; or &lt;code&gt;.otf&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Install the fonts&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Right-click each font file and select &lt;strong&gt;&#34;Install for all users&#34;&lt;/strong&gt; to install the font system-wide.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;4. Launch and Configure the Distribution&lt;/h4&gt; &#xA;&lt;p&gt;Open the installed distribution to complete setup. Update it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get update&#xA;sudo apt-get upgrade&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;5. Install a Terminal Emulator&lt;/h4&gt; &#xA;&lt;p&gt;Choose and install one of the following terminal emulators:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Alacritty&lt;/strong&gt;: &lt;a href=&#34;https://github.com/alacritty/alacritty/releases&#34;&gt;Download from GitHub Releases&lt;/a&gt; and place &lt;code&gt;alacritty.exe&lt;/code&gt; in your &lt;code&gt;PATH&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WezTerm&lt;/strong&gt;: &lt;a href=&#34;https://wezfurlong.org/wezterm/installation.html&#34;&gt;Download and Install&lt;/a&gt; and create an environment variable called &lt;code&gt;HOME&lt;/code&gt; that resolves to &lt;code&gt;C:\Users\your-username&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Kitty&lt;/strong&gt;: &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/#get-the-app&#34;&gt;Download and Install&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;6. Configuration Transfer for Terminal Emulators&lt;/h4&gt; &#xA;&lt;p&gt;Using PowerShell:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alacritty Configuration&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;mkdir $env:APPDATA\alacritty&#xA;Copy-Item -Path alacritty.toml -Destination $env:APPDATA\alacritty\alacritty.toml&#xA;&#xA;# In alacritty.toml, uncomment and set the shell program to WSL:&#xA;&#xA;#[shell]&#xA;#program = &#34;wsl.exe&#34;&#xA;#args = [&#34;--cd&#34;, &#34;~&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;WezTerm Configuration&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Copy-Item -Path .wezterm.lua -Destination $HOME&#xA;&#xA;# Uncomment for Windows settings in .wezterm.lua:&#xA;&#xA;# config.default_domain = &#39;WSL:Ubuntu&#39;&#xA;# config.front_end = &#34;WebGpu&#34;&#xA;# config.max_fps = 120&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If WezTerm doesn&#39;t take the initial configuration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a &lt;code&gt;wezterm&lt;/code&gt; folder in &lt;code&gt;C:\Users\your-username\.config&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Copy &lt;code&gt;.wezterm.lua&lt;/code&gt; into &lt;code&gt;wezterm.lua&lt;/code&gt; inside that directory&lt;/li&gt; &#xA; &lt;li&gt;Restart WezTerm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Kitty Configuration&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Copy-Item -Path GentlemanKitty\* -Destination $HOME\.config\kitty -Recurse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;7. Install Chocolatey and win32yank&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Chocolatey&lt;/strong&gt; is a package manager for Windows that simplifies the installation of software.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;To install Chocolatey:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open &lt;strong&gt;PowerShell&lt;/strong&gt; as an administrator.&lt;/li&gt; &#xA; &lt;li&gt;Run the following command:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Set-ExecutionPolicy Bypass -Scope Process -Force; `&#xA;[System.Net.ServicePointManager]::SecurityProtocol = `&#xA;[System.Net.ServicePointManager]::SecurityProtocol -bor 3072; `&#xA;iwr https://community.chocolatey.org/install.ps1 -UseBasicParsing | iex&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;To install win32yank:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;After installing Chocolatey, run:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;choco install win32yank&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;win32yank&lt;/code&gt; is required for clipboard integration in Neovim when using WSL.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;For Linux, Arch Linux, macOS, and WSL&lt;/h3&gt; &#xA;&lt;h4&gt;Prerequisites&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;macOS or Linux:&lt;/strong&gt; Ensure you have one of these operating systems.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Administrator privileges (sudo):&lt;/strong&gt; You&#39;ll need administrator access to install some tools.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;1. Install Dependencies&lt;/h4&gt; &#xA;&lt;h6&gt;Arch Linux&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pacman -Syu --noconfirm&#xA;sudo pacman -S --needed --noconfirm base-devel curl file git wget&#xA;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh&#xA;. $HOME/.cargo/env&#xA;/bin/bash -c &#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Linux&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get update&#xA;sudo apt-get install -y build-essential curl file git&#xA;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh&#xA;. $HOME/.cargo/env&#xA;/bin/bash -c &#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Mac&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xcode-select --install&#xA;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh&#xA;. $HOME/.cargo/env&#xA;/bin/bash -c &#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. Install Iosevka Term Nerd Font (icons and font style)&lt;/h4&gt; &#xA;&lt;h6&gt;Arch Linux / Linux&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p ~/.local/share/fonts&#xA;wget -O ~/.local/share/fonts/Iosevka.zip https://github.com/ryanoasis/nerd-fonts/releases/download/v3.3.0/IosevkaTerm.zip&#xA;unzip ~/.local/share/fonts/Iosevka.zip -d ~/.local/share/fonts/&#xA;fc-cache -fv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Mac&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew tap homebrew/cask-fonts&#xA;brew install --cask font-iosevka-term-nerd-font&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3. Choose and Install Terminal Emulator&lt;/h4&gt; &#xA;&lt;h5&gt;Alacritty&lt;/h5&gt; &#xA;&lt;h6&gt;Arch Linux&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pacman -S --noconfirm alacritty&#xA;mkdir -p ~/.config/alacritty &amp;amp;&amp;amp; cp alacritty.toml ~/.config/alacritty/alacritty.toml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Mac&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install alacritty --cask&#xA;mkdir -p ~/.config/alacritty &amp;amp;&amp;amp; cp alacritty.toml ~/.config/alacritty/alacritty.toml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Linux&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo add-apt-repository ppa:aslatter/ppa; sudo apt update; sudo apt install alacritty&#xA;mkdir -p ~/.config/alacritty &amp;amp;&amp;amp; cp alacritty.toml ~/.config/alacritty/alacritty.toml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;WezTerm&lt;/h5&gt; &#xA;&lt;h6&gt;Arch Linux&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pacman -S --noconfirm wezterm&#xA;mkdir -p ~/.config/wezterm &amp;amp;&amp;amp; cp .wezterm.lua ~/.config/wezterm/wezterm.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Mac&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install wezterm --cask&#xA;mkdir -p ~/.config/wezterm &amp;amp;&amp;amp; cp .wezterm.lua ~/.config/wezterm/wezterm.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Linux&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew tap wez/wezterm-linuxbrew; brew install wezterm&#xA;mkdir -p ~/.config/wezterm &amp;amp;&amp;amp; cp .wezterm.lua ~/.config/wezterm/wezterm.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Ghostty&lt;/h5&gt; &#xA;&lt;h6&gt;Arch Linux&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pacman -S ghostty&#xA;mkdir -p ~/.config/ghostty &amp;amp;&amp;amp; cp -r GentlemanGhostty/* ~/.config/ghostty&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Mac&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install --cask ghostty&#xA;mkdir -p ~/.config/ghostty &amp;amp;&amp;amp; cp -r GentlemanGhostty/* ~/.config/ghostty&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Linux&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install --cask ghostty&#xA;mkdir -p ~/.config/ghostty &amp;amp;&amp;amp; cp -r GentlemanGhostty/* ~/.config/ghostty&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Kitty&lt;/h5&gt; &#xA;&lt;h6&gt;Mac&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install --cask kitty&#xA;mkdir -p ~/.config/kitty &amp;amp;&amp;amp; cp -r GentlemanKitty/* ~/.config/kitty&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Reload the config after install doing &lt;code&gt;ctrl+shift+,&lt;/code&gt; | &lt;code&gt;cmd+shift+,&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h4&gt;4. Choose and Install a Shell&lt;/h4&gt; &#xA;&lt;h5&gt;Nushell&lt;/h5&gt; &#xA;&lt;h6&gt;1. Step&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp -rf bash-env-json ~/.config/&#xA;cp -rf bash-env.nu ~/.config/&#xA;brew install nushell carapace zoxide atuin jq bash starship fzf&#xA;cp -rf starship.toml ~/.config/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;2. Step&lt;/h6&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Arch Linux / Linux&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p ~/.config/nushell&#xA;run_command &#34;cp -rf GentlemanNushell/* ~/.config/nushell/&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Mac&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p ~/Library/Application\ Support/nushell&#xA;&#xA;## udpate config to use mac&#xA;if grep -q &#34;/home/linuxbrew/.linuxbrew/bin&#34; GentlemanNushell/env.nu; then&#xA;  awk -v search=&#34;/home/linuxbrew/.linuxbrew/bin&#34; -v replace=&#34;    | prepend &#39;/opt/homebrew/bin&#39;&#34; &#39;&#xA;  $0 ~ search {print replace; next}&#xA;  {print}&#xA;  &#39; GentlemanNushell/env.nu &amp;gt; GentlemanNushell/env.nu.tmp &amp;amp;&amp;amp; mv GentlemanNushell/env.nu.tmp GentlemanNushell/env.nu&#xA;else&#xA;  echo &#34;    | prepend &#39;/opt/homebrew/bin&#39;&#34; &amp;gt;&amp;gt; GentlemanNushell/env.nu&#xA;fi&#xA;&#xA;cp -rf GentlemanNushell/* ~/Library/Application\ Support/nushell/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Fish + Starship&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install fish carapace zoxide atuin starship fzf&#xA;mkdir -p ~/.cache/starship&#xA;mkdir -p ~/.cache/carapace&#xA;mkdir -p ~/.local/share/atuin&#xA;cp -rf starship.toml ~/.config/&#xA;cp -rf GentlemanFish/fish ~/.config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Zsh + Power10k**&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install zsh carapace zoxide atuin fzf&#xA;brew install zsh-autosuggestions zsh-syntax-highlighting zsh-autocomplete&#xA;mkdir -p ~/.cache/carapace&#xA;mkdir -p ~/.local/share/atuin&#xA;cp -rf GentlemanZsh/.zshrc ~/&#xA;cp -rf GentlemanZsh/.p10k.zsh ~/&#xA;cp -rf GentlemanZsh/.oh-my-zsh ~/&#xA;brew install powerlevel10k&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;5. Choose and Install Window Manager&lt;/h4&gt; &#xA;&lt;h5&gt;Tmux&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install tmux&#xA;git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm&#xA;mkdir -p ~/.tmux&#xA;cp -r GentlemanTmux/.tmux/* ~/.tmux/&#xA;cp GentlemanTmux/.tmux.conf ~/&#xA;tmux new-session -d -s plugin-installation &#39;source ~/.tmux.conf; tmux run-shell ~/.tmux/plugins/tpm/bin/install_plugins&#39;&#xA;tmux kill-session -t plugin-installation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Zellij&lt;/h5&gt; &#xA;&lt;h6&gt;1. Step =&amp;gt; Install Zellij&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install zellij&#xA;mkdir -p ~/.config/zellij&#xA;cp -r GentlemanZellij/zellij/* ~/.config/zellij/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;2. Step =&amp;gt; If you use ZSH&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# update or replace TMUX&#xA;if grep -q &#34;TMUX&#34; ~/.zshrc; then&#xA;  awk -v search=&#34;TMUX&#34; -v replace=&#39;WM_VAR=&#34;/$ZELLIJ&#34;&#39; &#39;&#xA;  $0 ~ search {print replace; next}&#xA;  {print}&#xA;  &#39; ~/.zshrc &amp;gt; ~/.zshrc.tmp &amp;amp;&amp;amp; mv ~/.zshrc.tmp ~/.zshrc&#xA;else&#xA;  echo &#39;WM_VAR=&#34;/$ZELLIJ&#34;&#39; &amp;gt;&amp;gt; ~/.zshrc&#xA;fi&#xA;&#xA;# update or replace tmux&#xA;if grep -q &#34;tmux&#34; ~/.zshrc; then&#xA;  awk -v search=&#34;tmux&#34; -v replace=&#39;WM_CMD=&#34;zellij&#34;&#39; &#39;&#xA;  $0 ~ search {print replace; next}&#xA;  {print}&#xA;  &#39; ~/.zshrc &amp;gt; ~/.zshrc.tmp &amp;amp;&amp;amp; mv ~/.zshrc.tmp ~/.zshrc&#xA;else&#xA;  echo &#39;WM_CMD=&#34;zellij&#34;&#39; &amp;gt;&amp;gt; ~/.zshrc&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;3. Step =&amp;gt; If you use Fish&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if grep -q &#34;TMUX&#34; ~/.config/fish/config.fish; then&#xA;  awk -v search=&#34;TMUX&#34; -v replace=&#34;if not set -q ZELLIJ&#34; &#39;&#xA;  $0 ~ search {print replace; next}&#xA;  {print}&#xA;  &#39; ~/.config/fish/config.fish &amp;gt; ~/.config/fish/config.fish.tmp &amp;amp;&amp;amp; mv ~/.config/fish/config.fish.tmp ~/.config/fish/config.fish&#xA;else&#xA;  echo &#34;if not set -q ZELLIJ&#34; &amp;gt;&amp;gt; ~/.config/fish/config.fish&#xA;fi&#xA;&#xA;# update or replace tmux&#xA;if grep -q &#34;tmux&#34; ~/.config/fish/config.fish; then&#xA;  awk -v search=&#34;tmux&#34; -v replace=&#34;zellij&#34; &#39;&#xA;  $0 ~ search {print replace; next}&#xA;  {print}&#xA;  &#39; ~/.config/fish/config.fish &amp;gt; ~/.config/fish/config.fish.tmp &amp;amp;&amp;amp; mv ~/.config/fish/config.fish.tmp ~/.config/fish/config.fish&#xA;else&#xA;  echo &#34;zellij&#34; &amp;gt;&amp;gt; ~/.config/fish/config.fish&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;3. Step =&amp;gt; If you use Nushell&lt;/h6&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Mac&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# update or replace &#34;tmux&#34;&#xA;if grep -q &#39;&#34;tmux&#34;&#39; GentlemanNushell/config.nu; then&#xA;  awk -v search=&#39;&#34;tmux&#34;&#39; -v replace=&#39;let MULTIPLEXER = &#34;zellij&#34;&#39; &#39;&#xA;  $0 ~ search {print replace; next}&#xA;  {print}&#xA;  &#39; GentlemanNushell/config.nu &amp;gt; GentlemanNushell/config.nu.tmp &amp;amp;&amp;amp; mv GentlemanNushell/config.nu.tmp GentlemanNushell/config.nu&#xA;else&#xA;  echo &#39;let MULTIPLEXER = &#34;zellij&#34;&#39; &amp;gt;&amp;gt; GentlemanNushell/config.nu&#xA;fi&#xA;&#xA;# update or replace &#34;TMUX&#34;&#xA;if grep -q &#39;&#34;TMUX&#34;&#39; GentlemanNushell/config.nu; then&#xA;  awk -v search=&#39;&#34;TMUX&#34;&#39; -v replace=&#39;let MULTIPLEXER_ENV_PREFIX = &#34;ZELLIJ&#34;&#39; &#39;&#xA;  $0 ~ search {print replace; next}&#xA;  {print}&#xA;  &#39; GentlemanNushell/config.nu &amp;gt; GentlemanNushell/config.nu.tmp &amp;amp;&amp;amp; mv GentlemanNushell/config.nu.tmp GentlemanNushell/config.nu&#xA;else&#xA;  echo &#39;let MULTIPLEXER_ENV_PREFIX = &#34;ZELLIJ&#34;&#39; &amp;gt;&amp;gt; GentlemanNushell/config.nu&#xA;fi&#xA;&#xA;# copy files to nushell support directory&#xA;cp -rf GentlemanNushell/* ~/Library/Application\ Support/nushell/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Arch Linux / Linux&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if grep -q &#39;&#34;tmux&#34;&#39; ~/.config/nushell/config.nu; then&#xA;  awk -v search=&#39;&#34;tmux&#34;&#39; -v replace=&#39;let MULTIPLEXER = &#34;zellij&#34;&#39; &#39;&#xA;  $0 ~ search {print replace; next}&#xA;  {print}&#xA;  &#39; ~/.config/nushell/config.nu &amp;gt; ~/.config/nushell/config.nu.tmp &amp;amp;&amp;amp; mv ~/.config/nushell/config.nu.tmp ~/.config/nushell/config.nu&#xA;else&#xA;  echo &#39;let MULTIPLEXER = &#34;zellij&#34;&#39; &amp;gt;&amp;gt; ~/.config/nushell/config.nu&#xA;fi&#xA;&#xA;# update or replace &#34;TMUX&#34;&#xA;if grep -q &#39;&#34;TMUX&#34;&#39; ~/.config/nushell/config.nu; then&#xA;  awk -v search=&#39;&#34;TMUX&#34;&#39; -v replace=&#39;let MULTIPLEXER_ENV_PREFIX = &#34;ZELLIJ&#34;&#39; &#39;&#xA;  $0 ~ search {print replace; next}&#xA;  {print}&#xA;  &#39; ~/.config/nushell/config.nu &amp;gt; ~/.config/nushell/config.nu.tmp &amp;amp;&amp;amp; mv ~/.config/nushell/config.nu.tmp ~/.config/nushell/config.nu&#xA;else&#xA;  echo &#39;let MULTIPLEXER_ENV_PREFIX = &#34;ZELLIJ&#34;&#39; &amp;gt;&amp;gt; ~/.config/nushell/config.nu&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;6. Install NVIM&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install nvim node npm git gcc fzf fd ripgrep coreutils bat curl lazygit&#xA;mkdir -p ~/.config/nvim&#xA;cp -r GentlemanNvim/nvim/* ~/.config/nvim/&#xA;# update or replace /your/notes/path&#xA;if grep -q &#34;/your/notes/path&#34; &#34;$HOME/.config/nvim/lua/plugins/obsidian.lua&#34;; then&#xA;  awk -v search=&#34;/your/notes/path&#34; -v replace=&#34;path = &#39;$OBSIDIAN_PATH&#39;&#34; &#39;&#xA;  $0 ~ search {print replace; next}&#xA;  {print}&#xA;  &#39; &#34;$obsidian_config_file&#34; &amp;gt; &#34;${obsidian_config_file}.tmp&#34; &amp;amp;&amp;amp; mv &#34;${obsidian_config_file}.tmp&#34; &#34;$obsidian_config_file&#34;&#xA;else&#xA;  echo &#34;path = &#39;$OBSIDIAN_PATH&#39;&#34; &amp;gt;&amp;gt; &#34;$obsidian_config_file&#34;&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Manual Obsidian Configuration&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;To set up your Obsidian vault path in Neovim:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create the directory for your Obsidian notes&lt;/strong&gt; (replace &lt;code&gt;/path/to/your/notes&lt;/code&gt; with your desired path):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p /path/to/your/notes&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create a &lt;code&gt;templates&lt;/code&gt; folder&lt;/strong&gt; inside your notes directory:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p /path/to/your/notes/templates&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Edit the &lt;code&gt;obsidian.lua&lt;/code&gt; file&lt;/strong&gt; to configure the vault path:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nvim ~/.config/nvim/lua/plugins/obsidian.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Update the &lt;code&gt;path&lt;/code&gt; setting&lt;/strong&gt; in &lt;code&gt;obsidian.lua&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;path = &#34;/path/to/your/notes&#34;,&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Save and close&lt;/strong&gt; the file.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;7. Set Default Shell&lt;/h4&gt; &#xA;&lt;h6&gt;1. Step&lt;/h6&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;ZSH&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;shell_path=$(which &#34;zsh&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Fish&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;shell_path=$(which &#34;fish&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Nushell&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;shell_path=$(which &#34;nu&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;2. Step =&amp;gt; Execute to Replace Default Shell&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if [ -n &#34;$shell_path&#34; ]; then&#xA;  # Add shell to /etc/shells if not already present&#xA;  sudo sh -c &#34;grep -Fxq \&#34;$shell_path\&#34; /etc/shells || echo \&#34;$shell_path\&#34; &amp;gt;&amp;gt; /etc/shells&#34;&#xA;&#xA;  # Change the default shell for the user&#xA;  sudo chsh -s &#34;$shell_path&#34; &#34;$USER&#34;&#xA;&#xA;  # Verify if the shell has been changed&#xA;  if [ &#34;$SHELL&#34; != &#34;$shell_path&#34; ]; then&#xA;    echo -e &#34;${RED}Error: Shell did not change. Please check manually.${NC}&#34;&#xA;    echo -e &#34;${GREEN}Command: sudo chsh -s $shell_path \$USER ${NC}&#34;&#xA;  else&#xA;    echo -e &#34;${GREEN}Shell changed to $shell_path successfully.${NC}&#34;&#xA;  fi&#xA;else&#xA;  echo -e &#34;${RED}Shell $shell_choice not found.${NC}&#34;&#xA;fi&#xA;&#xA;# Execute the chosen shell&#xA;exec $shell_choice&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;8. Restart the Shell or Computer&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Close and reopen your terminal&lt;/strong&gt;, or &lt;strong&gt;restart your computer&lt;/strong&gt; or &lt;strong&gt;WSL instance&lt;/strong&gt; for the changes to take effect.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;You&#39;re done! You have manually configured your development environment following the Gentleman.Dots guide. Enjoy your new setup!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you encounter any problems during configuration, consult the official documentation of the tools or seek help online.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Happy coding!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;952189428&lt;/p&gt;</summary>
  </entry>
</feed>