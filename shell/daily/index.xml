<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-03T01:35:38Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zjccc1999/Cf-fdip</title>
    <updated>2024-04-03T01:35:38Z</updated>
    <id>tag:github.com,2024-04-03:/zjccc1999/Cf-fdip</id>
    <link href="https://github.com/zjccc1999/Cf-fdip" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;安卓和linux使用教程&lt;/h1&gt; &#xA;&lt;p&gt;👋👋👋 给CM杨幂点点关注👋👋👋&lt;a href=&#34;https://github.com/cmliu&#34;&gt;https://github.com/cmliu&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;测速指令后面加了 -dd，需要测速的自己删除 感觉没必要测速，测个延迟就行了，能通就行&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;下载&lt;a href=&#34;https://github.com/P3TERX/GeoLite.mmdb&#34;&gt;GeoLite2-Country&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;下载&lt;a href=&#34;https://github.com/XIU2/CloudflareSpeedTest&#34;&gt;CloudflareSpeedTest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;运行脚本。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;要安装什么库我忘记了&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;要查看Linux系统的架构，你可以使用以下命令之一：&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;用 uname 命令：&lt;code&gt;uname -m&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;这将显示机器的硬件架构信息，例如 x86_64 表示 64 位架构，i386 表示 32 位架构。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;然后github &lt;a href=&#34;https://github.com/XIU2/CloudflareSpeedTest&#34;&gt;CloudflareSpeedTest&lt;/a&gt; 去下载对应的版本的测速文件。（我这里的是arm64）&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;装jq，你可以使用以下命令：&lt;code&gt;pkg install jq&lt;/code&gt; 这将使用Termux的包管理器pkg来安装jq。安装完成后，你就可以在Termux中使用jq来处理JSON数据了。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;脚本和测速文件都给满777&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;这个是Termux的根目录，下载后的东西放这里面/data/data/com.termux/files/home/&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;#识别国家地区还是推荐用Python，秒出。用api有点慢。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;GeoLite2-Country和libmaxminddb-tools&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;方法:把GeoLite2-Country复制到termux根目录/data/data/com.termux/files/home/ ，然后输入&lt;code&gt;pkg install libmaxminddb-tools&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;h4&gt;Termux一键下载运行指令:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;curl -sSL -o ~/GeoLite2-Country.mmdb https://raw.githubusercontent.com/zjccc1999/Cf-fdip/main/linux/GeoLite2-Country.mmdb &amp;amp;&amp;amp; chmod +x ~/GeoLite2-Country.mmdb&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;curl -sSL -o ~/zjccc.sh https://raw.githubusercontent.com/zjccc1999/Cf-fdip/main/linux/zjccc.sh &amp;amp;&amp;amp; chmod +x ~/zjccc.sh &amp;amp;&amp;amp; bash ~/zjccc.sh&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;代理加速Termux一键下载运行指令:&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;curl -sSL -o ~/GeoLite2-Country.mmdb https://mirror.ghproxy.com/https://raw.githubusercontent.com/zjccc1999/Cf-fdip/main/linux/GeoLite2-Country.mmdb &amp;amp;&amp;amp; chmod +x ~/GeoLite2-Country.mmdb&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;curl -sSL -o ~/zjccc.sh https://mirror.ghproxy.com/https://raw.githubusercontent.com/zjccc1999/Cf-fdip/main/linux/zjccc.sh &amp;amp;&amp;amp; chmod +x ~/zjccc.sh &amp;amp;&amp;amp; bash ~/zjccc.sh&lt;/code&gt;&lt;/p&gt; &lt;h3&gt;标准Linux一键下载运行指令:&lt;/h3&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;wget https://raw.githubusercontent.com/zjccc1999/Cf-fdip/main/linux/GeoLite2-Country.mmdb -O ~/GeoLite2-Country.mmdb &amp;amp;&amp;amp; chmod +x ~/GeoLite2-Country.mmdb&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;wget https://raw.githubusercontent.com/zjccc1999/Cf-fdip/main/linux/zjccc.sh -O ~/zjccc.sh &amp;amp;&amp;amp; chmod +x ~/zjccc.sh &amp;amp;&amp;amp; bash ~/zjccc.sh&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;代理加速标准Linux一键下载运行指令:&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;wget https://mirror.ghproxy.com/https://raw.githubusercontent.com/zjccc1999/Cf-fdip/main/linux/GeoLite2-Country.mmdb -O ~/GeoLite2-Country.mmdb &amp;amp;&amp;amp; chmod +x ~/GeoLite2-Country.mmdb&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;wget https://mirror.ghproxy.com/https://raw.githubusercontent.com/zjccc1999/Cf-fdip/main/linux/zjccc.sh -O ~/zjccc.sh &amp;amp;&amp;amp; chmod +x ~/zjccc.sh &amp;amp;&amp;amp; bash ~/zjccc.sh&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;安卓版叫做Pydroid3:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://blog.qaiu.top/archives/pydroid3v70&#34;&gt;https://blog.qaiu.top/archives/pydroid3v70&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://www.ecpan.cn/web/#/yunpanProxy?path=%2F%23%2Fdrive%2Foutside&amp;amp;data=6e482b26b7355ce276ff53e58b77d03aE&amp;amp;isShare=1&#34;&gt;移动云空间网盘分享_Pydroid3v7.0汉化整合版主程序&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://www.ecpan.cn/web/#/yunpanProxy?path=%2F%23%2Fdrive%2Foutside&amp;amp;data=e7f868d1d5c5f6661de9f7a0e558c892efCU&amp;amp;isShare=1&#34;&gt;移动云空间网盘分享_Pydroid3权限插件&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;将2-1py脚本和GeoLite2-Country.mmdb放在/storage/emulated/0/Android/data/ru.iiec.pydroid3/files/目录下&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;在Windows系统下，可以通过安装&lt;strong&gt;Git Bash&lt;/strong&gt;执行.sh，就是测速那里需要改一下。CloudflareSpeedTest 要替换&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;电脑版教程&lt;/h1&gt; &#xA;&lt;p&gt;安装Python 要安装os、geoip2、requests、zipfile、socket、re 和 tkinter，运行失败自己去下载库&lt;/p&gt; &#xA;&lt;p&gt;推荐使用IDLE&lt;/p&gt; &#xA;&lt;p&gt;右键没有的话使用文件夹中的reg更改注册表&lt;/p&gt; &#xA;&lt;p&gt;自己右键编辑去替换目录 这是我的目录D:\PY\pythonw.exe&lt;/p&gt; &#xA;&lt;p&gt;4个1开头的是4种获取IP的方法，推荐1-1&lt;/p&gt; &#xA;&lt;p&gt;剩下的名字都有说明不多解释了。&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://github.com/P3TERX/GeoLite.mmdb&#34;&gt;https://github.com/P3TERX/GeoLite.mmdb&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;有时间替换下这个，这个是识别地区用的&lt;/p&gt; &#xA;&lt;h1&gt;图片&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zjccc1999/Cf-fdip/raw/main/%E5%9B%BE%E7%89%87/%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95.jpg&#34;&gt;文件目录&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zjccc1999/Cf-fdip/raw/main/%E5%9B%BE%E7%89%87/Termux.jpg&#34;&gt;Termux&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zjccc1999/Cf-fdip/raw/main/%E5%9B%BE%E7%89%87/Python.jpg&#34;&gt;Pydroid 3&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lockness-Ko/xz-vulnerable-honeypot</title>
    <updated>2024-04-03T01:35:38Z</updated>
    <id>tag:github.com,2024-04-03:/lockness-Ko/xz-vulnerable-honeypot</id>
    <link href="https://github.com/lockness-Ko/xz-vulnerable-honeypot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An ssh honeypot with the XZ backdoor. CVE-2024-3094&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;xz-vulnerable-honeypot&lt;/h1&gt; &#xA;&lt;p&gt;An ssh honeypot with the XZ backdoor. CVE-2024-3094&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;TODO&lt;/strong&gt;: hook the backdoor and/or sshd. log rsa keys for decryption.&lt;/p&gt; &#xA;&lt;p&gt;notes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/smx-smx/a6112d54777845d389bd7126d6e9f504&#34;&gt;https://gist.github.com/smx-smx/a6112d54777845d389bd7126d6e9f504&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/q3k/af3d93b6a1f399de28fe194add452d01&#34;&gt;https://gist.github.com/q3k/af3d93b6a1f399de28fe194add452d01&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hamarituc/xz-backdoor&#34;&gt;https://github.com/hamarituc/xz-backdoor&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Warning&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;PLEASE run this on a separate isolated system. Docker is configured in a way that allows a threat actor to easily escape it. Docker is only used to get all the shared libraries working and configured.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://github.com/projectdiscovery/notify&#34;&gt;notify&lt;/a&gt; by projectdiscovery using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install -v github.com/projectdiscovery/notify/cmd/notify@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the following command to start the honeypot:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./monitor.sh DISCORD_WEBHOOK_URL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./monitor.sh https://discord.com/api/webhooks/12345678909876/aaaaaaaa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will use &lt;a href=&#34;https://github.com/projectdiscovery/notify&#34;&gt;notify&lt;/a&gt; to send all logs to a discord webhook.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;The vulnerable version of xz (5.6.1) and the liblzma linked version of sshd from the fedora repositories are ran in the configuration that activates the backdoor. Monitoring is provided by &lt;code&gt;bpftrace&lt;/code&gt;, &lt;code&gt;strace&lt;/code&gt;, &lt;code&gt;tcpdump&lt;/code&gt;, and the &lt;code&gt;sshd&lt;/code&gt; process itself.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;bpftrace&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Syscall monitoring and shared library hooking.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;strace&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Syscall montioring for the parent &lt;code&gt;sshd&lt;/code&gt; process.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tcpdump&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Capturing packets.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sshd&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Login events (&lt;strong&gt;NOTE&lt;/strong&gt; This will most likely not capture the login event for a bad actor as the backdoor uses &lt;code&gt;set_log_mask&lt;/code&gt; to change the logging behaviour when the attacker attempts to login)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>wukongdaily/OpenBackRestore</title>
    <updated>2024-04-03T01:35:38Z</updated>
    <id>tag:github.com,2024-04-03:/wukongdaily/OpenBackRestore</id>
    <link href="https://github.com/wukongdaily/OpenBackRestore" rel="alternate"></link>
    <summary type="html">&lt;p&gt;该项目可以轻松备份iStoreOS已安装的软件和配置,当系统恢复出厂设置或重置后，可以一键恢复原来的软件和配置&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;iStoreOS一键备份与恢复脚本&lt;/h1&gt; &#xA;&lt;h2&gt;🤔 这是什么？&lt;/h2&gt; &#xA;&lt;p&gt;该项目可以轻松备份iStoreOS已安装的软件和配置,当系统恢复出厂设置或重置后，可以一键恢复原来的软件和配置。&lt;br&gt;&lt;/p&gt; &#xA;&lt;h3&gt;特别说明：对于iStoreOS系统而言，docker的数据分区基本上被用户主动迁移到另一个分区，因此无需备份，因为重置系统并不会删除用户自己新建的分区。若用户没有迁移docker的数据分区，那么我们的备份已经包含！&lt;/h3&gt; &#xA;&lt;h2&gt;💡 特色功能&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;💻 支持&lt;code&gt;一键生成备份档案 包括已安装软件及其配置&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;💻 支持&lt;code&gt;一键恢复备份档案 包括已安装软件及其配置&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;💻 支持&lt;code&gt;已安装软件及其配置:包含应用商店和第三方安装的ipk/run&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;🔑 支持&lt;code&gt;同时支持终端命令行方式和iStore应用商店手动安装方式&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;软路由iStoreOS(x86_64|Arm64) ✅&lt;/li&gt; &#xA; &lt;li&gt;兼容机型：MT3000/2500/6000 ✅&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;特别说明：这三款机型的恢复工作是分两步走。&lt;br&gt; 1、执行&lt;code&gt;sh restore.run &lt;/code&gt;后先恢复到iStoreOS风格,执行完毕后会&lt;strong&gt;提示用户上传你的备份档案。&lt;/strong&gt;&lt;br&gt; 2、再次执行&lt;code&gt;sh restore.run &lt;/code&gt;后，提示恢复成功并重启，方可完成✅&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;🚀 方法一 命令行方式&lt;/h2&gt; &#xA;&lt;h3&gt;1. 生成备份&lt;code&gt;/tmp/upload/backup.tar.gz&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget -O backup.run https://raw.githubusercontent.com/wukongdaily/OpenBackRestore/master/backup/backup.run &amp;amp;&amp;amp; sh backup.run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;备份仓库&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget -O backup.run https://gitee.com/wukongdaily/OpenBackRestore/raw/master/backup/backup.run &amp;amp;&amp;amp; sh backup.run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;每次备份都是完整的,可以经常备份,比如每月备份一次&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;🤔 如何自定义备份的路径？方法如下&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wukongdaily/OpenBackRestore/wiki&#34;&gt;https://github.com/wukongdaily/OpenBackRestore/wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2. 恢复备份&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;使用前提&lt;/strong&gt; 将备份档案提前上传到 &lt;code&gt;/tmp/upload/&lt;/code&gt; 目录,如图&lt;br&gt;&lt;br&gt;&lt;img src=&#34;https://github.com/wukongdaily/OpenBackRestore/assets/143675923/cd111f10-e6aa-4011-a046-b3004f77c7eb&#34; alt=&#34;huifu&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;确定备份文件已经上传了 再执行如下命令即可恢复,恢复完成后会自动重启&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;❤️恢复命令如下&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget -O restore.run https://raw.githubusercontent.com/wukongdaily/OpenBackRestore/master/backup/restore.run &amp;amp;&amp;amp; sh restore.run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;备份仓库&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget -O restore.run https://gitee.com/wukongdaily/OpenBackRestore/raw/master/backup/restore.run &amp;amp;&amp;amp; sh restore.run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🚀 方法二 手动方式&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;1、在release页面下载backup.run或restore.run&lt;br&gt; &lt;a href=&#34;https://github.com/wukongdaily/OpenBackRestore/releases/latest&#34;&gt;https://github.com/wukongdaily/OpenBackRestore/releases/latest&lt;/a&gt; &lt;br&gt; 2、打开iStore应用商店,点击手动安装,将run文件拖拽上去即可执行。&lt;br&gt; &lt;img src=&#34;https://github.com/wukongdaily/OpenBackRestore/assets/143675923/54fdc034-ed4f-4f81-8aa7-0de556e0c3e2&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
</feed>