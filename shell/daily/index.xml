<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-19T01:35:22Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hawshemi/Linux-Optimizer</title>
    <updated>2023-10-19T01:35:22Z</updated>
    <id>tag:github.com,2023-10-19:/hawshemi/Linux-Optimizer</id>
    <link href="https://github.com/hawshemi/Linux-Optimizer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Linux Optimizer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Linux Optimizer&lt;/h1&gt; &#xA;&lt;h2&gt;This Bash script automates the optimization of your Linux server.&lt;/h2&gt; &#xA;&lt;h3&gt;It performs the following tasks:&lt;/h3&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Fix &lt;code&gt;hosts&lt;/code&gt; file and DNS &lt;em&gt;(temporarily)&lt;/em&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Check and add 127.0.1.1 and server hostname to &lt;code&gt;/etc/hosts&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&lt;em&gt;Original &lt;code&gt;hosts&lt;/code&gt; file is backed up at &lt;code&gt;/etc/hosts.bak&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add &lt;code&gt;1.1.1.1&lt;/code&gt;, &lt;code&gt;1.0.0.1&lt;/code&gt;, &lt;code&gt;8.8.8.8&lt;/code&gt; and &lt;code&gt;8.8.4.4&lt;/code&gt; to &lt;code&gt;/etc/resolv.conf&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&lt;em&gt;Original &lt;code&gt;dns&lt;/code&gt; file is backed up at &lt;code&gt;/etc/resolv.conf.bak&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update, Upgrade, and Clean the server:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;Update&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Upgrade&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Full-Upgrade&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;AutoRemove&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;AutoClean&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Clean&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install XanMod LTS Kernel &lt;em&gt;(Only on Ubuntu &amp;amp; Debian)&lt;/em&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Enable BBRv3.&lt;/li&gt; &#xA;   &lt;li&gt;CloudFlare TCP Optimizations.&lt;/li&gt; &#xA;   &lt;li&gt;More Details: &lt;a href=&#34;https://xanmod.org&#34;&gt;https://xanmod.org&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Useful Packages:&lt;/p&gt; &lt;p&gt;&lt;em&gt;&lt;code&gt;apt-transport-https&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;apt-utils&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;autoconf&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;automake&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;bash-completion&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;bc&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;binutils&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;binutils-common&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;binutils-x86-64-linux-gnu&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;build-essential&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;busybox&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;ca-certificates&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;cron&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;curl&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;dialog&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;epel-release&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;gnupg2&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;git&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;haveged&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;htop&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;iptables&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;iptables-persistent&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;jq&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;keyring&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;libssl-dev&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;libsqlite3-dev&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;libtool&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;locales&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;lsb-release&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;make&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;nano&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;net-tools&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;nftables&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;packagekit&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;preload&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;python3&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;python3-pip&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;qrencode&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;socat&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;screen&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;software-properties-common&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;ufw&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;unzip&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;vim&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;wget&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;zip&lt;/code&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable Packages at Server Boot.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the server TimeZone to the VPS IP address location.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create &amp;amp; Enable &lt;code&gt;SWAP&lt;/code&gt; File:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Swap Path: &lt;code&gt;&#34;/swapfile&#34;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Swap Size: &lt;code&gt;2Gb&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable &lt;code&gt;IPv6&lt;/code&gt; Support.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Optimize the &lt;a href=&#34;https://github.com/hawshemi/Linux-Optimizer/raw/main/files/sysctl.conf&#34;&gt;SYSCTL&lt;/a&gt; Configs:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Optimize &lt;code&gt;SWAP&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Optimize Network Settings.&lt;/li&gt; &#xA;   &lt;li&gt;Activate &lt;code&gt;BBR&lt;/code&gt; &lt;em&gt;(&lt;code&gt;BBRv3&lt;/code&gt; with XanMod)&lt;/em&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Optimize the Kernel.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&lt;em&gt;Original file is backed up at &lt;code&gt;/etc/sysctl.conf.bak&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Optimize &lt;a href=&#34;https://github.com/hawshemi/Linux-Optimizer/raw/main/files/sshd_config&#34;&gt;SSH&lt;/a&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Back up the original &lt;code&gt;sshd_config&lt;/code&gt; file.&lt;/li&gt; &#xA;   &lt;li&gt;Disable DNS lookups for connecting clients.&lt;/li&gt; &#xA;   &lt;li&gt;Remove less efficient encryption ciphers.&lt;/li&gt; &#xA;   &lt;li&gt;Enable and Configure TCP keep-alive messages.&lt;/li&gt; &#xA;   &lt;li&gt;Allow agent &amp;amp; TCP forwarding.&lt;/li&gt; &#xA;   &lt;li&gt;Enable gateway ports, Tunneling and compression.&lt;/li&gt; &#xA;   &lt;li&gt;Enable X11 Forwarding.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&lt;em&gt;Original file is backed up at &lt;code&gt;/etc/ssh/sshd_config.bak&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Optimize the &lt;a href=&#34;https://github.com/hawshemi/Linux-Optimizer/raw/main/files/profile&#34;&gt;System Limits&lt;/a&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Soft and Hard ulimit &lt;code&gt;-c -d -f -i -l -n -q -s -u -v -x&lt;/code&gt; optimizations.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Optimize &lt;code&gt;UFW&lt;/code&gt; and open Common Ports:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open Ports &lt;code&gt;SSH&lt;/code&gt;, &lt;code&gt;80&lt;/code&gt;, &lt;code&gt;443&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;With &lt;code&gt;IPv6&lt;/code&gt;, &lt;code&gt;TCP&lt;/code&gt; &amp;amp; &lt;code&gt;UDP&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Reboot at the end is Recommended.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;h3&gt;Ensure that the &lt;code&gt;sudo&lt;/code&gt;, &lt;code&gt;wget&lt;/code&gt; and &lt;code&gt;jq&lt;/code&gt; packages are installed on your system:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu &amp;amp; Debian:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt update -q &amp;amp;&amp;amp; apt install -y sudo wget jq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CentOS &amp;amp; Fedora:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;dnf up -y &amp;amp;&amp;amp; dnf install -y sudo wget jq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run&lt;/h2&gt; &#xA;&lt;h4&gt;&lt;strong&gt;Tested on:&lt;/strong&gt; Ubuntu 20+, Debian 11+, CentOS Stream 8+, AlmaLinux 8+, Fedora 37+&lt;/h4&gt; &#xA;&lt;h4&gt;Root Access is Required. If the user is not root, first run:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo -i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Then:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget &#34;https://raw.githubusercontent.com/hawshemi/Linux-Optimizer/main/linux-optimizer.sh&#34; -O linux-optimizer.sh &amp;amp;&amp;amp; chmod +x linux-optimizer.sh &amp;amp;&amp;amp; bash linux-optimizer.sh &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Menu Image&lt;/h2&gt; &#xA;&lt;h3&gt;Debian &amp;amp; Ubuntu:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/hawshemi/Linux-Optimizer/assets/16742123/3604470e-48ed-403d-a753-143dc934f6fd&#34; alt=&#34;debian-based-menu&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;CentOS, AlmaLinux &amp;amp; Fedora:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/hawshemi/Linux-Optimizer/assets/16742123/07099e64-3864-425f-83e2-cda1e57d5b62&#34; alt=&#34;rhel-based-menu&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This script is provided as-is, without any warranty or guarantee. Use it at your own risk.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This script is licensed under the MIT License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>webinstall/webi-installers</title>
    <updated>2023-10-19T01:35:22Z</updated>
    <id>tag:github.com,2023-10-19:/webinstall/webi-installers</id>
    <link href="https://github.com/webinstall/webi-installers" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Primary and community-submitted packages for webinstall.dev&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://github.com/webinstall/webi-installers&#34;&gt;webi-installers&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://webinstall.dev&#34;&gt;webi&lt;/a&gt; is how developers install their tools&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://webinstall.dev&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/122831/129465590-136b5a8a-f8f5-4e8d-a010-784eaa9f21bb.png&#34; alt=&#34;webinstall-dev-ogimage-github&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;no &lt;code&gt;sudo&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;no package manager&lt;/li&gt; &#xA; &lt;li&gt;no messing with system permissions&lt;/li&gt; &#xA; &lt;li&gt;in short: no nonsense&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl https://webi.sh/webi | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This repository contains the primary and community-submitted packages for &lt;a href=&#34;https://webinstall.dev&#34;&gt;webinstall.dev&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;How webi works&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contacts official release APIs for download URLs&lt;/li&gt; &#xA; &lt;li&gt;Selects the appropriate package version and archive format&lt;/li&gt; &#xA; &lt;li&gt;Installs to &lt;code&gt;$HOME/.local/opt&lt;/code&gt; or &lt;code&gt;$HOME/.local/bin&lt;/code&gt;, as appropriate.&lt;/li&gt; &#xA; &lt;li&gt;Updates &lt;code&gt;PATH&lt;/code&gt; via &lt;code&gt;$HOME/.config/envman/PATH.env&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Symlinks or copies current selected version&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More technically:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;package&amp;gt;/releases.js&lt;/code&gt; transforms the package&#39;s release API into a common format &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(i.e. HTML, CSV, TAB, or JSON into a specific JSON format)&lt;/li&gt; &#xA;   &lt;li&gt;common release APIs are in &lt;code&gt;_common/&lt;/code&gt; (i.e. &lt;code&gt;_common/github.js&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;_webi/bootstrap.sh&lt;/code&gt; is a template that exchanges system information for a correct installer &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;constructs a user agent with os, cpu, and utility info (i.e. &lt;code&gt;macos&lt;/code&gt;, &lt;code&gt;amd64&lt;/code&gt;, can unpack &lt;code&gt;tar,zip,xz&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;_webi/template.sh&lt;/code&gt; is the base installer template with common functions for &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;checking versions&lt;/li&gt; &#xA;   &lt;li&gt;downloading &amp;amp; unpacking&lt;/li&gt; &#xA;   &lt;li&gt;updating PATH&lt;/li&gt; &#xA;   &lt;li&gt;(re-)linking directories&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;package&amp;gt;/install.sh&lt;/code&gt; may provide functions to override &lt;code&gt;_webi/template.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Recap: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;curl https://webi.sh/&amp;lt;pkg&amp;gt;&lt;/code&gt; =&amp;gt; &lt;code&gt;bootstrap-&amp;lt;pkg&amp;gt;.sh&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;sh bootstrap-&amp;lt;pkg&amp;gt;.sh&lt;/code&gt; =&amp;gt; &lt;code&gt;https://webinstall.dev/api/installers/&amp;lt;pkg&amp;gt;@&amp;lt;ver&amp;gt;.sh?formats=zip,tar&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;sh install-&amp;lt;pkg&amp;gt;.sh&lt;/code&gt; =&amp;gt; download, unpack, move, link, update PATH&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Philosophy (for package authors / maintainers publishing with webi)&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Should install to &lt;code&gt;$HOME/.local/opt/&amp;lt;package&amp;gt;-&amp;lt;version&amp;gt;&lt;/code&gt; or &lt;code&gt;$HOME/.local/bin&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Should not need &lt;code&gt;sudo&lt;/code&gt; (except perhaps for a one-time &lt;code&gt;setcap&lt;/code&gt;, etc)&lt;/li&gt; &#xA; &lt;li&gt;Examples: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Full Packages: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Node.js: &lt;a href=&#34;https://github.com/webinstall/packages/tree/master/node&#34;&gt;https://github.com/webinstall/packages/tree/master/node&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Golang: &lt;a href=&#34;https://github.com/webinstall/packages/tree/master/golang&#34;&gt;https://github.com/webinstall/packages/tree/master/golang&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;PostgreSQL: &lt;a href=&#34;https://github.com/webinstall/packages/tree/master/postgres&#34;&gt;https://github.com/webinstall/packages/tree/master/postgres&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Single-Binary Installers: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Caddy: &lt;a href=&#34;https://github.com/webinstall/packages/tree/master/caddy&#34;&gt;https://github.com/webinstall/packages/tree/master/caddy&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Ripgrep: &lt;a href=&#34;https://github.com/webinstall/packages/tree/master/ripgrep&#34;&gt;https://github.com/webinstall/packages/tree/master/ripgrep&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Gitea: &lt;a href=&#34;https://github.com/webinstall/packages/tree/master/gitea&#34;&gt;https://github.com/webinstall/packages/tree/master/gitea&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Convenience Scripts: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Prettier: &lt;a href=&#34;https://github.com/webinstall/packages/tree/master/prettier&#34;&gt;https://github.com/webinstall/packages/tree/master/prettier&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Rust-lang: &lt;a href=&#34;https://github.com/webinstall/packages/tree/master/rustlang&#34;&gt;https://github.com/webinstall/packages/tree/master/rustlang&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;vim-sensible: &lt;a href=&#34;https://github.com/webinstall/packages/tree/master/vim-sensible&#34;&gt;https://github.com/webinstall/packages/tree/master/vim-sensible&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Creating an Installer&lt;/h2&gt; &#xA;&lt;p&gt;An install consists of 5 parts in 4 files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my-new-package/&#xA;  - README.md (package info in frontmatter)&#xA;  - releases.js&#xA;  - install.sh (POSIX Shell)&#xA;  - install.ps1 (PowerShell)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create Description&lt;/li&gt; &#xA; &lt;li&gt;Fetch Releases&lt;/li&gt; &#xA; &lt;li&gt;Version Check (semi-optional)&lt;/li&gt; &#xA; &lt;li&gt;Update PATH&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;See these &lt;strong&gt;examples&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/webinstall/packages/raw/master/rg/&#34;&gt;https://github.com/webinstall/packages/blob/master/rg/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/webinstall/packages/raw/master/golang/&#34;&gt;https://github.com/webinstall/packages/blob/master/golang/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;webinstall.dev&lt;/code&gt; server uses the list of releases returned by &lt;code&gt;&amp;lt;your-package&amp;gt;/releases.js&lt;/code&gt; to generate a shell script with most necessary variables and functions pre-defined.&lt;/p&gt; &#xA;&lt;p&gt;You just fill in the blanks.&lt;/p&gt; &#xA;&lt;h3&gt;TL;DR&lt;/h3&gt; &#xA;&lt;p&gt;Just create an empty directory and run the tests until you get a good result.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone git@github.com:webinstall/packages.git&#xA;pushd packages&#xA;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir -p ./new-package/&#xA;node _webi/test.js ./new-package/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;1. Create Description&lt;/h3&gt; &#xA;&lt;p&gt;Just copy the format from any of the existing packages. It&#39;s like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;README.md&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;---&#xA;title: Node.js&#xA;homepage: https://nodejs.org&#xA;tagline: |&#xA;  JavaScript V8 runtime&#xA;description: |&#xA;  Node.js® is a JavaScript runtime built on Chrome&#39;s V8 JavaScript engine&#xA;---&#xA;&#xA;```sh&#xA;node -e &#39;console.log(&#34;Hello, World!&#34;)&#39;&#xA;&amp;gt; Hello, World!&#xA;```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;1. Fetch Releases&lt;/h3&gt; &#xA;&lt;p&gt;All you&#39;re doing in this step is just translating from one form of JSON or CSV or TAB or whatever, to a format understood by &lt;code&gt;webi&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using Github releases? See &lt;code&gt;ripgrep/releases.js&lt;/code&gt; (which uses &lt;code&gt;_common/github.js&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Have a special format? See &lt;code&gt;golang/releases.js&lt;/code&gt; or &lt;code&gt;node/releases.js&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It looks like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;releases.js&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module.exports = function (request) {&#xA;  return github(request, owner, repo).then(function (all) {&#xA;    // if you need to do something special, you can do it here&#xA;    // ...&#xA;    return all;&#xA;  });&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Bash Installer&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Variables &lt;em&gt;you&lt;/em&gt; can set&lt;/li&gt; &#xA; &lt;li&gt;Functions &lt;em&gt;you&lt;/em&gt; must define&lt;/li&gt; &#xA; &lt;li&gt;Convenience / Helper Functions&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;(optional, if needed) Bash variables that you &lt;em&gt;may&lt;/em&gt; define:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Define this if the package name is different from the command name (i.e. golang =&amp;gt; go)&#xA;pkg_cmd_name=&#34;foobar&#34;&#xA;&#xA;# These are used for symlinks, PATH, and test commands&#xA;pkg_dst=&#34;$HOME/.local/opt/foobar&#34;&#xA;pkg_dst_cmd=&#34;$HOME/.local/opt/foobar/bin/foobar&#34;&#xA;#pkg_dst_bin=&#34;$(dirname &#34;$pkg_dst_cmd&#34;)&#34;&#xA;&#xA;# These are the _real_ locations for the above&#xA;pkg_src=&#34;$HOME/.local/opt/foobar-v$WEBI_VERSION&#34;&#xA;pkg_src_cmd=&#34;$HOME/.local/opt/foobar-v$WEBI_VERSION/bin/foobar&#34;&#xA;#pkg_src_bin=&#34;$(dirname &#34;$pkg_src_cmd&#34;)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(required) A version check function that strips all non-version junk&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pkg_get_current_version() {&#xA;    # foobar-v1.1.7 =&amp;gt; 1.1.7&#xA;    echo &#34;$(foobar --version | head -n 1 | sed &#39;s:foobar-v::&#39;)&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the rest of the functions you can copy/paste from the examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pkg_format_cmd_version() {}         # Override, pretty prints version&#xA;&#xA;pkg_link                            # Override, replaces webi_link()&#xA;&#xA;pkg_pre_install() {                 # Override, runs any webi_* commands&#xA;    webi_check                          # for $HOME/.local/opt tools&#xA;    webi_download                       # for things that have a releases.js&#xA;    webi_extract                        # for .xz, .tar.*, and .zip files&#xA;}&#xA;&#xA;pkg_install() {}                    # Override, usually just needs to rename extracted folder to&#xA;                                    # &#34;$HOME/.local/opt/$pkg_cmd_name-v$WEBI_VERSION&#34;&#xA;&#xA;pkg_post_install() {                # Override&#xA;    webi_path_add &#34;$pkg_dst_bin&#34;        # should probably update PATH&#xA;}&#xA;&#xA;pkg_done_message() {}               # Override, pretty print a success message&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Script API&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;code&gt;webi/template.sh&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;These variables will be set by the server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;WEBI_PKG=example@v1&#xA;WEBI_TAG=v1&#xA;WEBI_HOST=https://webinstall.dev&#xA;WEBI_RELEASES=https://webinstall.dev/api/releases/example@v1?os=macos&amp;amp;arch=amd64&amp;amp;pretty=true&#xA;WEBI_CSV=v1.0.2,&#xA;WEBI_VERSION=1.0.2&#xA;WEBI_MAJOR=1&#xA;WEBI_MINOR=0&#xA;WEBI_PATCH=2&#xA;WEBI_LTS=&#xA;WEBI_CHANNEL=stable&#xA;WEBI_EXT=tar&#xA;WEBI_PKG_URL=https://cdn.example.com/example-macos-amd64.tar.gz&#xA;WEBI_PKG_FILE=example-macos-amd64.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;PKG_NAME=example&#xA;PKG_OSES=macos,linux,windows&#xA;PKG_ARCHES=amd64,arm64,x86&#xA;PKG_FORMATS=zip,xz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;WEBI_TMP=${WEBI_TMP:-&#34;$(mktemp -d -t webinstall-foobar.XXXXXXXX)&#34;}&#xA;WEBI_SINGLE=&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;webi_check              # Checks to see if the selected version is already installed (and re-links if so)&#xA;webi_download           # Downloads the selected release to $HOME/Downloads/webi/&amp;lt;package-name&amp;gt;.tar.gz&#xA;webi_extract            # Extracts the download to /tmp/&amp;lt;package-name&amp;gt;-&amp;lt;random&amp;gt;/&#xA;webi_path_add /new/path # Adds /new/path to PATH for bash, zsh, and fish&#xA;webi_pre_install        # Runs webi_check, webi_download, and webi_extract&#xA;webi_install            # Moves extracted files from $WEBI_TMP to $pkg_src&#xA;webi_link               # replaces any existing symlink with the currently selected version&#xA;webi_post_install       # Runs `webi_path_add $pkg_dst_bin`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Roadmap&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Wrap release APIs to unify and expose&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support more Windows packages&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support arbitrary git urls (i.e. &lt;code&gt;@github.com/node/node&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(maybe &lt;code&gt;ghi node/node&lt;/code&gt; for github specifically)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support git as an archive format&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--&#xA;&#xA;# Windows Notes&#xA;&#xA;```bat&#xA;set WEBI_HOST=https://webinstall.dev&#xA;```&#xA;&#xA;Windows has curl too!?&#xA;&#xA;```bat&#xA;curl.exe -sL https://webi.ms/node | powershell&#xA;```&#xA;&#xA;And it&#39;s easy enough to ignore the execution policy&#xA;&#xA;```bat&#xA;powershell -ExecutionPolicy Bypass install.ps1&#xA;```&#xA;&#xA;And if we want something that looks as complicated as we expect Windows to be,&#xA;historically, we have options:&#xA;&#xA;```bat&#xA;powershell &#34;Invoke-Expression ( Invoke-WebRequest -UseBasicParsing https://webi.ms/node ).Contents&#34;&#xA;```&#xA;&#xA;```bat&#xA;powershell ( Invoke-WebRequest -UseBasicParsing https://webi.ms/node ).Contents | powershell&#xA;```&#xA;&#xA;--&gt;</summary>
  </entry>
</feed>