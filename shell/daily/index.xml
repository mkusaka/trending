<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-01T01:37:44Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>thoughtbot/dotfiles</title>
    <updated>2022-09-01T01:37:44Z</updated>
    <id>tag:github.com,2022-09-01:/thoughtbot/dotfiles</id>
    <link href="https://github.com/thoughtbot/dotfiles" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A set of vim, zsh, git, and tmux configuration files.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;thoughtbot dotfiles&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://images.thoughtbot.com/thoughtbot-dotfiles-prompt.png&#34; alt=&#34;prompt&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Set zsh as your login shell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;chsh -s $(which zsh)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Clone onto your laptop:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:thoughtbot/dotfiles.git ~/dotfiles&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Or, &lt;a href=&#34;http://robots.thoughtbot.com/keeping-a-github-fork-updated&#34;&gt;fork and keep your fork updated&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://github.com/thoughtbot/rcm&#34;&gt;rcm&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install rcm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the dotfiles:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;env RCRC=$HOME/dotfiles/rcrc rcup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After the initial installation, you can run &lt;code&gt;rcup&lt;/code&gt; without the one-time variable &lt;code&gt;RCRC&lt;/code&gt; being set (&lt;code&gt;rcup&lt;/code&gt; will symlink the repo&#39;s &lt;code&gt;rcrc&lt;/code&gt; to &lt;code&gt;~/.rcrc&lt;/code&gt; for future runs of &lt;code&gt;rcup&lt;/code&gt;). &lt;a href=&#34;https://github.com/thoughtbot/dotfiles/raw/master/rcrc&#34;&gt;See example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This command will create symlinks for config files in your home directory. Setting the &lt;code&gt;RCRC&lt;/code&gt; environment variable tells &lt;code&gt;rcup&lt;/code&gt; to use standard configuration options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Exclude the &lt;code&gt;README.md&lt;/code&gt;, &lt;code&gt;README-ES.md&lt;/code&gt; and &lt;code&gt;LICENSE&lt;/code&gt; files, which are part of the &lt;code&gt;dotfiles&lt;/code&gt; repository but do not need to be symlinked in.&lt;/li&gt; &#xA; &lt;li&gt;Give precedence to personal overrides which by default are placed in &lt;code&gt;~/dotfiles-local&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Please configure the &lt;code&gt;rcrc&lt;/code&gt; file if you&#39;d like to make personal overrides in a different directory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Update&lt;/h2&gt; &#xA;&lt;p&gt;From time to time you should pull down any updates to these dotfiles, and run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rcup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to link any new files and install new vim plugins. &lt;strong&gt;Note&lt;/strong&gt; You &lt;em&gt;must&lt;/em&gt; run &lt;code&gt;rcup&lt;/code&gt; after pulling to ensure that all files in plugins are properly installed, but you can safely run &lt;code&gt;rcup&lt;/code&gt; multiple times so update early and update often!&lt;/p&gt; &#xA;&lt;h2&gt;Make your own customizations&lt;/h2&gt; &#xA;&lt;p&gt;Create a directory for your personal customizations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir ~/dotfiles-local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Put your customizations in &lt;code&gt;~/dotfiles-local&lt;/code&gt; appended with &lt;code&gt;.local&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;~/dotfiles-local/aliases.local&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/dotfiles-local/git_template.local/*&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/dotfiles-local/gitconfig.local&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/dotfiles-local/psqlrc.local&lt;/code&gt; (we supply a blank &lt;code&gt;.psqlrc.local&lt;/code&gt; to prevent &lt;code&gt;psql&lt;/code&gt; from throwing an error, but you should overwrite the file with your own copy)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/dotfiles-local/tmux.conf.local&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/dotfiles-local/vimrc.local&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/dotfiles-local/vimrc.bundles.local&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/dotfiles-local/zshrc.local&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/dotfiles-local/zsh/configs/*&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, your &lt;code&gt;~/dotfiles-local/aliases.local&lt;/code&gt; might look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Productivity&#xA;alias todo=&#39;$EDITOR ~/.todo&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your &lt;code&gt;~/dotfiles-local/gitconfig.local&lt;/code&gt; might look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[alias]&#xA;  l = log --pretty=colored&#xA;[pretty]&#xA;  colored = format:%Cred%h%Creset %s %Cgreen(%cr) %C(bold blue)%an%Creset&#xA;[user]&#xA;  name = Dan Croak&#xA;  email = dan@thoughtbot.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your &lt;code&gt;~/dotfiles-local/vimrc.local&lt;/code&gt; might look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34; Color scheme&#xA;colorscheme github&#xA;highlight NonText guibg=#060606&#xA;highlight Folded  guibg=#0A0A0A guifg=#9090D0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t wish to install a vim plugin from the default set of vim plugins in &lt;code&gt;.vimrc.bundles&lt;/code&gt;, you can ignore the plugin by calling it out with &lt;code&gt;UnPlug&lt;/code&gt; in your &lt;code&gt;~/.vimrc.bundles.local&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34; Don&#39;t install vim-scripts/tComment&#xA;UnPlug &#39;tComment&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;UnPlug&lt;/code&gt; can be used to install your own fork of a plugin or to install a shared plugin with different custom options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34; Only load vim-coffee-script if a Coffeescript buffer is created&#xA;UnPlug &#39;vim-coffee-script&#39;&#xA;Plug &#39;kchmck/vim-coffee-script&#39;, { &#39;for&#39;: &#39;coffee&#39; }&#xA;&#xA;&#34; Use a personal fork of vim-run-interactive&#xA;UnPlug &#39;vim-run-interactive&#39;&#xA;Plug &#39;$HOME/plugins/vim-run-interactive&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To extend your &lt;code&gt;git&lt;/code&gt; hooks, create executable scripts in &lt;code&gt;~/dotfiles-local/git_template.local/hooks/*&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;p&gt;Your &lt;code&gt;~/dotfiles-local/zshrc.local&lt;/code&gt; might look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# load pyenv if available&#xA;if which pyenv &amp;amp;&amp;gt;/dev/null ; then&#xA;  eval &#34;$(pyenv init -)&#34;&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your &lt;code&gt;~/dotfiles-local/vimrc.bundles.local&lt;/code&gt; might look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Plug &#39;Lokaltog/vim-powerline&#39;&#xA;Plug &#39;stephenmckinney/vim-solarized-powerline&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;zsh Configurations&lt;/h2&gt; &#xA;&lt;p&gt;Additional zsh configuration can go under the &lt;code&gt;~/dotfiles-local/zsh/configs&lt;/code&gt; directory. This has two special subdirectories: &lt;code&gt;pre&lt;/code&gt; for files that must be loaded first, and &lt;code&gt;post&lt;/code&gt; for files that must be loaded last.&lt;/p&gt; &#xA;&lt;p&gt;For example, &lt;code&gt;~/dotfiles-local/zsh/configs/pre/virtualenv&lt;/code&gt; makes use of various shell features which may be affected by your settings, so load it first:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Load the virtualenv wrapper&#xA;. /usr/local/bin/virtualenvwrapper.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Setting a key binding can happen in &lt;code&gt;~/dotfiles-local/zsh/configs/keys&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Grep anywhere with ^G&#xA;bindkey -s &#39;^G&#39; &#39; | grep &#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some changes, like &lt;code&gt;chpwd&lt;/code&gt;, must happen in &lt;code&gt;~/dotfiles-local/zsh/configs/post/chpwd&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Show the entries in a directory whenever you cd in&#xA;function chpwd {&#xA;  ls&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This directory is handy for combining dotfiles from multiple teams; one team can add the &lt;code&gt;virtualenv&lt;/code&gt; file, another &lt;code&gt;keys&lt;/code&gt;, and a third &lt;code&gt;chpwd&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;~/dotfiles-local/zshrc.local&lt;/code&gt; is loaded after &lt;code&gt;~/dotfiles-local/zsh/configs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;vim Configurations&lt;/h2&gt; &#xA;&lt;p&gt;Similarly to the zsh configuration directory as described above, vim automatically loads all files in the &lt;code&gt;~/dotfiles-local/vim/plugin&lt;/code&gt; directory. This does not have the same &lt;code&gt;pre&lt;/code&gt; or &lt;code&gt;post&lt;/code&gt; subdirectory support that our &lt;code&gt;zshrc&lt;/code&gt; has.&lt;/p&gt; &#xA;&lt;p&gt;This is an example &lt;code&gt;~/dotfiles-local/vim/plugin/c.vim&lt;/code&gt;. It is loaded every time vim starts, regardless of the file name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Indent C programs according to BSD style(9)&#xA;set cinoptions=:0,t0,+4,(4&#xA;autocmd BufNewFile,BufRead *.[ch] setlocal sw=0 ts=8 noet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What&#39;s in it?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.vim.org/&#34;&gt;vim&lt;/a&gt; configuration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/junegunn/fzf.vim&#34;&gt;fzf&lt;/a&gt; for fuzzy file/buffer/tag finding.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tpope/vim-rails&#34;&gt;Rails.vim&lt;/a&gt; for enhanced navigation of Rails file structure via &lt;code&gt;gf&lt;/code&gt; and &lt;code&gt;:A&lt;/code&gt; (alternate), &lt;code&gt;:Rextract&lt;/code&gt; partials, &lt;code&gt;:Rinvert&lt;/code&gt; migrations, etc.&lt;/li&gt; &#xA; &lt;li&gt;Run many kinds of tests &lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/dotfiles/main/%5Bhttps://github.com/janko-m/vim-test&#34;&gt;from vim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set &lt;code&gt;&amp;lt;leader&amp;gt;&lt;/code&gt; to a single space.&lt;/li&gt; &#xA; &lt;li&gt;Switch between the last two files with space-space.&lt;/li&gt; &#xA; &lt;li&gt;Syntax highlighting for Markdown, HTML, JavaScript, Ruby, Go, Elixir, more.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://github.com/ggreer/the_silver_searcher&#34;&gt;Ag&lt;/a&gt; instead of Grep when available.&lt;/li&gt; &#xA; &lt;li&gt;Map &lt;code&gt;&amp;lt;leader&amp;gt;ct&lt;/code&gt; to re-index ctags.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://github.com/pbrisbin/vim-mkdir&#34;&gt;vim-mkdir&lt;/a&gt; for automatically creating non-existing directories before writing the buffer.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt; to manage plugins.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://robots.thoughtbot.com/a-tmux-crash-course&#34;&gt;tmux&lt;/a&gt; configuration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Improve color resolution.&lt;/li&gt; &#xA; &lt;li&gt;Remove administrative debris (session name, hostname, time) in status bar.&lt;/li&gt; &#xA; &lt;li&gt;Set prefix to &lt;code&gt;Ctrl+s&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Soften status bar color from harsh green to light gray.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://git-scm.com/&#34;&gt;git&lt;/a&gt; configuration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Adds a &lt;code&gt;create-branch&lt;/code&gt; alias to create feature branches.&lt;/li&gt; &#xA; &lt;li&gt;Adds a &lt;code&gt;delete-branch&lt;/code&gt; alias to delete feature branches.&lt;/li&gt; &#xA; &lt;li&gt;Adds a &lt;code&gt;merge-branch&lt;/code&gt; alias to merge feature branches into master.&lt;/li&gt; &#xA; &lt;li&gt;Adds an &lt;code&gt;up&lt;/code&gt; alias to fetch and rebase &lt;code&gt;origin/master&lt;/code&gt; into the feature branch. Use &lt;code&gt;git up -i&lt;/code&gt; for interactive rebases.&lt;/li&gt; &#xA; &lt;li&gt;Adds &lt;code&gt;post-{checkout,commit,merge}&lt;/code&gt; hooks to re-index your ctags.&lt;/li&gt; &#xA; &lt;li&gt;Adds &lt;code&gt;pre-commit&lt;/code&gt; and &lt;code&gt;prepare-commit-msg&lt;/code&gt; stubs that delegate to your local config.&lt;/li&gt; &#xA; &lt;li&gt;Adds &lt;code&gt;trust-bin&lt;/code&gt; alias to append a project&#39;s &lt;code&gt;bin/&lt;/code&gt; directory to &lt;code&gt;$PATH&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.ruby-lang.org/en/&#34;&gt;Ruby&lt;/a&gt; configuration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add trusted binstubs to the &lt;code&gt;PATH&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Load the ASDF version manager.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Shell aliases and scripts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;b&lt;/code&gt; for &lt;code&gt;bundle&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;g&lt;/code&gt; with no arguments is &lt;code&gt;git status&lt;/code&gt; and with arguments acts like &lt;code&gt;git&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;migrate&lt;/code&gt; for &lt;code&gt;bin/rails db:migrate db:rollback &amp;amp;&amp;amp; bin/rails db:migrate db:test:prepare&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mcd&lt;/code&gt; to make a directory and change into it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;replace foo bar **/*.rb&lt;/code&gt; to find and replace within a given list of files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tat&lt;/code&gt; to attach to tmux session named the same as the current directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v&lt;/code&gt; for &lt;code&gt;$VISUAL&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;Thank you, &lt;a href=&#34;https://github.com/thoughtbot/dotfiles/contributors&#34;&gt;contributors&lt;/a&gt;! Also, thank you to Corey Haines, Gary Bernhardt, and others for sharing your dotfiles and other shell scripts from which we derived inspiration for items in this project.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;dotfiles is copyright © 2009-2018 thoughtbot. It is free software, and may be redistributed under the terms specified in the &lt;a href=&#34;https://raw.githubusercontent.com/thoughtbot/dotfiles/main/LICENSE&#34;&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;About thoughtbot&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://presskit.thoughtbot.com/images/thoughtbot-logo-for-readmes.svg?sanitize=true&#34; alt=&#34;thoughtbot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;dotfiles is maintained and funded by thoughtbot, inc. The names and logos for thoughtbot are trademarks of thoughtbot, inc.&lt;/p&gt; &#xA;&lt;p&gt;We love open source software! See &lt;a href=&#34;https://thoughtbot.com/community?utm_source=github&#34;&gt;our other projects&lt;/a&gt;. We are &lt;a href=&#34;https://thoughtbot.com/hire-us?utm_source=github&#34;&gt;available for hire&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aws/aws-mwaa-local-runner</title>
    <updated>2022-09-01T01:37:44Z</updated>
    <id>tag:github.com,2022-09-01:/aws/aws-mwaa-local-runner</id>
    <link href="https://github.com/aws/aws-mwaa-local-runner" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repository provides a command line interface (CLI) utility that replicates an Amazon Managed Workflows for Apache Airflow (MWAA) environment locally.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;About aws-mwaa-local-runner&lt;/h1&gt; &#xA;&lt;p&gt;This repository provides a command line interface (CLI) utility that replicates an Amazon Managed Workflows for Apache Airflow (MWAA) environment locally.&lt;/p&gt; &#xA;&lt;h2&gt;About the CLI&lt;/h2&gt; &#xA;&lt;p&gt;The CLI builds a Docker container image locally that’s similar to a MWAA production image. This allows you to run a local Apache Airflow environment to develop and test DAGs, custom plugins, and dependencies before deploying to MWAA.&lt;/p&gt; &#xA;&lt;h2&gt;What this repo contains&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;dags/&#xA;  requirements.txt&#xA;  tutorial.py&#xA;docker/&#xA;  .gitignore&#xA;  mwaa-local-env&#xA;  README.md&#xA;  config/&#xA;    airflow.cfg&#xA;    constraints.txt&#xA;    requirements.txt&#xA;    webserver_config.py&#xA;  script/&#xA;    bootstrap.sh&#xA;    entrypoint.sh&#xA;    systemlibs.sh&#xA;    generate_key.sh&#xA;  docker-compose-dbonly.yml&#xA;  docker-compose-local.yml&#xA;  docker-compose-sequential.yml&#xA;  Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;macOS&lt;/strong&gt;: &lt;a href=&#34;https://docs.docker.com/desktop/&#34;&gt;Install Docker Desktop&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Linux/Ubuntu&lt;/strong&gt;: &lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;Install Docker Compose&lt;/a&gt; and &lt;a href=&#34;https://docs.docker.com/engine/install/&#34;&gt;Install Docker Engine&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt;: Windows Subsystem for Linux (WSL) to run the bash based command &lt;code&gt;mwaa-local-env&lt;/code&gt;. Please follow &lt;a href=&#34;https://docs.docker.com/docker-for-windows/wsl/&#34;&gt;Windows Subsystem for Linux Installation (WSL)&lt;/a&gt; and &lt;a href=&#34;https://code.visualstudio.com/blogs/2020/03/02/docker-in-wsl2&#34;&gt;Using Docker in WSL 2&lt;/a&gt;, to get started.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get started&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/aws/aws-mwaa-local-runner.git&#xA;cd aws-mwaa-local-runner&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step one: Building the Docker image&lt;/h3&gt; &#xA;&lt;p&gt;Build the Docker container image using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./mwaa-local-env build-image&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: it takes several minutes to build the Docker image locally.&lt;/p&gt; &#xA;&lt;h3&gt;Step two: Running Apache Airflow&lt;/h3&gt; &#xA;&lt;p&gt;Run Apache Airflow using one of the following database backends.&lt;/p&gt; &#xA;&lt;h4&gt;Local runner&lt;/h4&gt; &#xA;&lt;p&gt;Runs a local Apache Airflow environment that is a close representation of MWAA by configuration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./mwaa-local-env start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To stop the local environment, Ctrl+C on the terminal and wait till the local runner and the postgres containers are stopped.&lt;/p&gt; &#xA;&lt;h3&gt;Step three: Accessing the Airflow UI&lt;/h3&gt; &#xA;&lt;p&gt;By default, the &lt;code&gt;bootstrap.sh&lt;/code&gt; script creates a username and password for your local Airflow environment.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Username: &lt;code&gt;admin&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Password: &lt;code&gt;test&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Airflow UI&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open the Apache Airlfow UI: &lt;a href=&#34;http://localhost:8080/&#34;&gt;http://localhost:8080/&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Step four: Add DAGs and supporting files&lt;/h3&gt; &#xA;&lt;p&gt;The following section describes where to add your DAG code and supporting files. We recommend creating a directory structure similar to your MWAA environment.&lt;/p&gt; &#xA;&lt;h4&gt;DAGs&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add DAG code to the &lt;code&gt;dags/&lt;/code&gt; folder.&lt;/li&gt; &#xA; &lt;li&gt;To run the sample code in this repository, see the &lt;code&gt;tutorial.py&lt;/code&gt; file.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Requirements.txt&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add Python dependencies to &lt;code&gt;dags/requirements.txt&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To test a requirements.txt without running Apache Airflow, use the following script:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./mwaa-local-env test-requirements&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s say you add &lt;code&gt;aws-batch==0.6&lt;/code&gt; to your &lt;code&gt;dags/requirements.txt&lt;/code&gt; file. You should see an output similar to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Installing requirements.txt&#xA;Collecting aws-batch (from -r /usr/local/airflow/dags/requirements.txt (line 1))&#xA;  Downloading https://files.pythonhosted.org/packages/5d/11/3aedc6e150d2df6f3d422d7107ac9eba5b50261cf57ab813bb00d8299a34/aws_batch-0.6.tar.gz&#xA;Collecting awscli (from aws-batch-&amp;gt;-r /usr/local/airflow/dags/requirements.txt (line 1))&#xA;  Downloading https://files.pythonhosted.org/packages/07/4a/d054884c2ef4eb3c237e1f4007d3ece5c46e286e4258288f0116724af009/awscli-1.19.21-py2.py3-none-any.whl (3.6MB)&#xA;    100% |████████████████████████████████| 3.6MB 365kB/s &#xA;...&#xA;...&#xA;...&#xA;Installing collected packages: botocore, docutils, pyasn1, rsa, awscli, aws-batch&#xA;  Running setup.py install for aws-batch ... done&#xA;Successfully installed aws-batch-0.6 awscli-1.19.21 botocore-1.20.21 docutils-0.15.2 pyasn1-0.4.8 rsa-4.7.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Custom plugins&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a directory at the root of this repository, and change directories into it. This should be at the same level as &lt;code&gt;dags/&lt;/code&gt; and &lt;code&gt;docker&lt;/code&gt;. For example:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir plugins&#xA;cd plugins&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a file for your custom plugin. For example:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;virtual_python_plugin.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(Optional) Add any Python dependencies to &lt;code&gt;dags/requirements.txt&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: this step assumes you have a DAG that corresponds to the custom plugin. For examples, see &lt;a href=&#34;https://docs.aws.amazon.com/mwaa/latest/userguide/sample-code.html&#34;&gt;MWAA Code Examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s next?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Learn how to upload the requirements.txt file to your Amazon S3 bucket in &lt;a href=&#34;https://docs.aws.amazon.com/mwaa/latest/userguide/working-dags-dependencies.html&#34;&gt;Installing Python dependencies&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Learn how to upload the DAG code to the dags folder in your Amazon S3 bucket in &lt;a href=&#34;https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-folder.html&#34;&gt;Adding or updating DAGs&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Learn more about how to upload the plugins.zip file to your Amazon S3 bucket in &lt;a href=&#34;https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import-plugins.html&#34;&gt;Installing custom plugins&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQs&lt;/h2&gt; &#xA;&lt;p&gt;The following section contains common questions and answers you may encounter when using your Docker container image.&lt;/p&gt; &#xA;&lt;h3&gt;Can I test execution role permissions using this repository?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can setup the local Airflow&#39;s boto with the intended execution role to test your DAGs with AWS operators before uploading to your Amazon S3 bucket. To setup aws connection for Airflow locally see &lt;a href=&#34;https://airflow.apache.org/docs/apache-airflow-providers-amazon/stable/connections/aws.html&#34;&gt;Airflow | AWS Connection&lt;/a&gt; To learn more, see &lt;a href=&#34;https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-create-role.html&#34;&gt;Amazon MWAA Execution Role&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How do I add libraries to requirements.txt and test install?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;code&gt;requirements.txt&lt;/code&gt; file is included in the &lt;code&gt;/dags&lt;/code&gt; folder of your local Docker container image. We recommend adding libraries to this file, and running locally.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;What if a library is not available on PyPi.org?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If a library is not available in the Python Package Index (PyPi.org), add the &lt;code&gt;--index-url&lt;/code&gt; flag to the package in your &lt;code&gt;dags/requirements.txt&lt;/code&gt; file. To learn more, see &lt;a href=&#34;https://docs.aws.amazon.com/mwaa/latest/userguide/best-practices-dependencies.html&#34;&gt;Managing Python dependencies in requirements.txt&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;The following section contains errors you may encounter when using the Docker container image in this repository.&lt;/p&gt; &#xA;&lt;h3&gt;My environment is not starting - process failed with dag_stats_table already exists&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you encountered &lt;a href=&#34;https://issues.apache.org/jira/browse/AIRFLOW-3678&#34;&gt;the following error&lt;/a&gt;: &lt;code&gt;process fails with &#34;dag_stats_table already exists&#34;&lt;/code&gt;, you&#39;ll need to reset your database using the following command:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./mwaa-local-env reset-db&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fernet Key InvalidToken&lt;/h3&gt; &#xA;&lt;p&gt;A Fernet Key is generated during image build (&lt;code&gt;./mwaa-local-env build-image&lt;/code&gt;) and is durable throughout all containers started from that image. This key is used to &lt;a href=&#34;https://airflow.apache.org/docs/apache-airflow/stable/security/secrets/fernet.html&#34;&gt;encrypt connection passwords in the Airflow DB&lt;/a&gt;. If changes are made to the image and it is rebuilt, you may get a new key that will not match the key used when the Airflow DB was initialized, in this case you will need to reset the DB (&lt;code&gt;./mwaa-local-env reset-db&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/aws/aws-mwaa-local-runner/main/CONTRIBUTING.md#security-issue-notifications&#34;&gt;CONTRIBUTING&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This library is licensed under the MIT-0 License. See the LICENSE file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>vcheckzen/KeepAliveE5</title>
    <updated>2022-09-01T01:37:44Z</updated>
    <id>tag:github.com,2022-09-01:/vcheckzen/KeepAliveE5</id>
    <link href="https://github.com/vcheckzen/KeepAliveE5" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;Set the following repo secrets, then trigger &lt;code&gt;Register APP&lt;/code&gt; workflow manually. Read &lt;a href=&#34;https://logi.im/script/permanently-keeping-an-office-e5-account.html&#34;&gt;Intro&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PAT&lt;/td&gt; &#xA;   &lt;td&gt;Github personal access token with &lt;code&gt;workflow&lt;/code&gt; permission&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;USER&lt;/td&gt; &#xA;   &lt;td&gt;E5 admin emails line separated&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PASSWD&lt;/td&gt; &#xA;   &lt;td&gt;E5 admin passwords line separated&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>