<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-06T01:41:05Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>home-assistant/supervised-installer</title>
    <updated>2022-11-06T01:41:05Z</updated>
    <id>tag:github.com,2022-11-06:/home-assistant/supervised-installer</id>
    <link href="https://github.com/home-assistant/supervised-installer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Installer for a generic Linux system&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;This installation method is for advanced users only&lt;/h1&gt; &#xA;&lt;h2&gt;Make sure you understand &lt;a href=&#34;https://github.com/home-assistant/architecture/raw/master/adr/0014-home-assistant-supervised.md&#34;&gt;the requirements&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h1&gt;Install Home Assistant Supervised&lt;/h1&gt; &#xA;&lt;p&gt;This installation method provides the full Home Assistant experience on a regular operating system. This means, all components from the Home Assistant method are used, except for the Home Assistant Operating System. This system will run the Home Assistant Supervisor. The Supervisor is not just an application, it is a full appliance that manages the whole system. It will clean up, repair or reset settings to default if they no longer match expected values.&lt;/p&gt; &#xA;&lt;p&gt;By not using the Home Assistant Operating System, the user is responsible for making sure that all required components are installed and maintained. Required components and their versions will change over time. Home Assistant Supervised is provided as-is as a foundation for community supported do-it-yourself solutions. We only accept bug reports for issues that have been reproduced on a freshly installed, fully updated Debian with no additional packages.&lt;/p&gt; &#xA;&lt;p&gt;This method is considered advanced and should only be used if one is an expert in managing a Linux operating system, Docker and networking.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Run the following commands as root (&lt;code&gt;su -&lt;/code&gt; or &lt;code&gt;sudo su -&lt;/code&gt; on machines with sudo installed):&lt;/p&gt; &#xA;&lt;p&gt;Step 1: Install the following dependencies with this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt-get install \&#xA;apparmor \&#xA;jq \&#xA;wget \&#xA;curl \&#xA;udisks2 \&#xA;libglib2.0-bin \&#xA;network-manager \&#xA;dbus \&#xA;systemd-journal-remote -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Step 2: Install Docker-CE with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -fsSL get.docker.com | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Step 3: Install the OS-Agent:&lt;/p&gt; &#xA;&lt;p&gt;Instructions for installing the OS-Agent can be found &lt;a href=&#34;https://github.com/home-assistant/os-agent/tree/main#using-home-assistant-supervised-on-debian&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Step 4: Install the Home Assistant Supervised Debian Package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://github.com/home-assistant/supervised-installer/releases/latest/download/homeassistant-supervised.deb&#xA;dpkg -i homeassistant-supervised.deb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Machine types&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;generic-x86-64&lt;/li&gt; &#xA; &lt;li&gt;odroid-c2&lt;/li&gt; &#xA; &lt;li&gt;odroid-n2&lt;/li&gt; &#xA; &lt;li&gt;odroid-xu&lt;/li&gt; &#xA; &lt;li&gt;qemuarm&lt;/li&gt; &#xA; &lt;li&gt;qemuarm-64&lt;/li&gt; &#xA; &lt;li&gt;qemux86&lt;/li&gt; &#xA; &lt;li&gt;qemux86-64&lt;/li&gt; &#xA; &lt;li&gt;raspberrypi&lt;/li&gt; &#xA; &lt;li&gt;raspberrypi2&lt;/li&gt; &#xA; &lt;li&gt;raspberrypi3&lt;/li&gt; &#xA; &lt;li&gt;raspberrypi4&lt;/li&gt; &#xA; &lt;li&gt;raspberrypi3-64&lt;/li&gt; &#xA; &lt;li&gt;raspberrypi4-64&lt;/li&gt; &#xA; &lt;li&gt;tinker&lt;/li&gt; &#xA; &lt;li&gt;khadas-vim3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;If something&#39;s going wrong, use &lt;code&gt;journalctl -f&lt;/code&gt; to get your system logs. If you are not familiar with Linux and how you can fix issues, we recommend to use our Home Assistant OS.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>devcontainers/templates</title>
    <updated>2022-11-06T01:41:05Z</updated>
    <id>tag:github.com,2022-11-06:/devcontainers/templates</id>
    <link href="https://github.com/devcontainers/templates" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Repository for Dev Container Templates that are managed by Dev Container spec maintainers. See https://github.com/devcontainers/template-starter to create your own!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Development Container Templates&lt;/h1&gt; &#xA;&lt;table style=&#34;width: 100%; border-style: none;&#34;&gt;&#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td style=&#34;width: 140px; text-align: center;&#34;&gt;&lt;a href=&#34;https://github.com/devcontainers&#34;&gt;&lt;img width=&#34;128px&#34; src=&#34;https://raw.githubusercontent.com/microsoft/fluentui-system-icons/78c9587b995299d5bfc007a0077773556ecb0994/assets/Cube/SVG/ic_fluent_cube_32_filled.svg?sanitize=true&#34; alt=&#34;devcontainers organization logo&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt; &lt;strong&gt;Development Container Templates&lt;/strong&gt;&lt;br&gt; A simple set of dev container &#39;templates&#39; to help get you up and running with a containerized environment. &lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;A &lt;strong&gt;development container&lt;/strong&gt; is a running &lt;a href=&#34;https://www.docker.com&#34;&gt;Docker&lt;/a&gt; container with a well-defined tool/runtime stack and its prerequisites. It allows you to use a container as a full-featured development environment which can be used to run an application, to separate tools, libraries, or runtimes needed for working with a codebase, and to aid in continuous integration and testing.&lt;/p&gt; &#xA;&lt;p&gt;This repository contains a set of &lt;strong&gt;Dev Container Templates&lt;/strong&gt; which are source files packaged together that encode configuration for a complete development environment. A Template can be used in a new or existing project, and a &lt;a href=&#34;https://containers.dev/supporting&#34;&gt;supporting tool&lt;/a&gt; will use the configuration from the template to build a development container.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/devcontainers/templates/main/src&#34;&gt;&lt;code&gt;src&lt;/code&gt;&lt;/a&gt; - A collection of subfolders, each declaring a template. Each subfolder contains at least a &lt;code&gt;devcontainer-template.json&lt;/code&gt; and a &lt;a href=&#34;https://containers.dev/implementors/json_reference/&#34;&gt;devcontainer.json&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/devcontainers/templates/main/test&#34;&gt;&lt;code&gt;test&lt;/code&gt;&lt;/a&gt; - Mirroring &lt;code&gt;src&lt;/code&gt;, a folder-per-template with at least a &lt;code&gt;test.sh&lt;/code&gt; script. These tests are executed by the &lt;a href=&#34;https://github.com/devcontainers/templates/raw/main/.github/workflows/test-pr.yaml&#34;&gt;CI&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;h3&gt;Creating your own collection of templates&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://containers.dev/implementors/templates-distribution/#distribution&#34;&gt;Dev Container Template specification&lt;/a&gt; outlines a pattern for community members and organizations to self-author Templates in repositories they control.&lt;/p&gt; &#xA;&lt;p&gt;A starter repository &lt;a href=&#34;https://github.com/devcontainers/template-starter&#34;&gt;devcontainers/template-starter&lt;/a&gt; and &lt;a href=&#34;https://github.com/devcontainers/action&#34;&gt;GitHub Action&lt;/a&gt; are available to help bootstrap self-authored Templates.&lt;/p&gt; &#xA;&lt;p&gt;We are eager to hear your feedback on self-authoring! Please provide comments and feedback on &lt;a href=&#34;https://github.com/devcontainers/spec/issues/71&#34;&gt;spec issue #71&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing to this repository&lt;/h3&gt; &#xA;&lt;p&gt;This repository will accept improvement and bug fix contributions related to the &lt;a href=&#34;https://raw.githubusercontent.com/devcontainers/templates/main/src&#34;&gt;current set of maintained templates&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;p&gt;Issues related to these templates can be reported in &lt;a href=&#34;https://github.com/devcontainers/templates/issues&#34;&gt;an issue&lt;/a&gt; in this repository.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Copyright (c) Microsoft Corporation. All rights reserved. &lt;br&gt; Licensed under the MIT License. See &lt;a href=&#34;https://raw.githubusercontent.com/devcontainers/templates/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Kong/kong-build-tools</title>
    <updated>2022-11-06T01:41:05Z</updated>
    <id>tag:github.com,2022-11-06:/Kong/kong-build-tools</id>
    <link href="https://github.com/Kong/kong-build-tools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build tools to package and release Kong&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kong Build Tools&lt;/h1&gt; &#xA;&lt;p&gt;The tools necessary to build, package and release Kong&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Kong source&lt;/li&gt; &#xA; &lt;li&gt;Docker&lt;/li&gt; &#xA; &lt;li&gt;docker-compose&lt;/li&gt; &#xA; &lt;li&gt;Make&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All examples assume that Kong is a sibling directory of kong-build-tools and run from the kong-build-tools directory unless otherwise specified. This behaviour can be adjusted by setting a &lt;code&gt;KONG_SOURCE_LOCATION&lt;/code&gt; environment variable&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ~&#xA;git clone git@github.com:Kong/kong.git&#xA;git clone git@github.com:Kong/kong-build-tools.git&#xA;cd kong-build-tools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;# example of KONG_SOURCE_LOCATION usage for kong-ee&#xA;export KONG_SOURCE_LOCATION=/Users/kong/Documents/Kong-Repos/kong-ee&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Packaging kong-ee additionally requires:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;code&gt;GITHUB_TOKEN&lt;/code&gt; environment variable with access to Kong&#39;s private github repositories&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git checkout&lt;/code&gt; to target kong-ee branch before starting.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Packaging arm64 architectures additionally requires:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/docker/machine&#34;&gt;Docker-machine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/docker/buildx&#34;&gt;Buildx Docker plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;AWS Credentials (or access via an instance profile)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building a Kong Package&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;export PACKAGE_TYPE=deb RESTY_IMAGE_BASE=ubuntu RESTY_IMAGE_TAG=20.04 # defaults if not set&#xA;make package-kong&#xA;ls output/&#xA;kong-x.y.z.20.04.all.deb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Details&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kong/kong-build-tools/master/docs/Package%20Kong.png?raw=true&#34; alt=&#34;building kong&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Docker files in the dockerfiles directory build on each other in the following manner:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Dockerfile.package&lt;/code&gt; builds on top of the result of &lt;code&gt;Dockerfile.kong&lt;/code&gt; to package Kong using &lt;code&gt;fpm-entrypoint.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Dockerfile.kong&lt;/code&gt; builds on top of the result of &lt;code&gt;Dockerfile.openresty&lt;/code&gt; to build Kong using &lt;code&gt;build-kong.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Dockerfile.openresty&lt;/code&gt; builds on top of the result of &lt;code&gt;Dockerfile.(deb|apk|rpm)&lt;/code&gt; to build the Kong prerequisites using &lt;code&gt;openresty-build-tools/kong-ngx-build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Kong/kong-build-tools-base-images&#34;&gt;github://kong/kong-build-tools-base-images&lt;/a&gt; builds the compilation / building prerequisites&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building a Kong Docker Image&lt;/h2&gt; &#xA;&lt;p&gt;Prerequisite: you did the packaging step&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export KONG_TEST_CONTAINER_NAME=kong/kong:x.y.z-ubuntu-20.04 #default if not set&#xA;make build-test-container&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Releasing Docker Images&lt;/h2&gt; &#xA;&lt;p&gt;Prerequisite: you did the packaging step and you&#39;re logged into docker with the necessary push permissions&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export DOCKER_RELEASE_REPOSITORY=kong/kong KONG_TEST_CONTAINER_TAG=x.y.z-ubuntu-20.04 #default if not set&#xA;make release-kong-docker-images&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running Kong Tests&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;make test-kong&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Environment variables:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Refer to &lt;a href=&#34;https://github.com/Kong/kong/raw/master/.ci/run_tests.sh&#34;&gt;git://kong/.ci/run_tests.sh&lt;/a&gt; for the authoritative environment variables. The most common ones are the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TEST_DATABASE = &#34;off|postgres|cassandra&#34;&#xA;TEST_SUITE = &#34;dbless|plugins|unit|integration&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Details&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kong/kong-build-tools/master/docs/Test%20Kong.png?raw=true&#34; alt=&#34;testing kong&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt; runs the result of &lt;code&gt;Dockerfile.test&lt;/code&gt; as well as postgres, cassandra, grpc and redis&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Dockerfile.test&lt;/code&gt; builds on top of the result of &lt;code&gt;Dockerfile.openresty&lt;/code&gt; to build Kong for development/testing&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Dockerfile.openresty&lt;/code&gt; builds on top of the result of &lt;code&gt;Dockerfile.(deb|apk|rpm)&lt;/code&gt; to build the Kong prerequisites using &lt;code&gt;openresty-build-tools/kong-ngx-build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Dockerfile.(deb|apk|rpm)&lt;/code&gt; builds the compilation / building prerequisites&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running Packaging / Smoke Tests&lt;/h2&gt; &#xA;&lt;p&gt;The Kong Build Tools functional tests suite run a tests on a Kong package which we then integrate into our official docker build image dockerfile.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make package-kong&#xA;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Details&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kong/kong-build-tools/master/docs/Release%20Kong.png?raw=true&#34; alt=&#34;releasing kong&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;test/build_container.sh&lt;/code&gt; clones &lt;code&gt;git://kong/docker-kong&lt;/code&gt; and provides the Dockerfile with a packaged Kong asset&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;01-package&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Validates the version required per &lt;code&gt;git://kong/.requirements&lt;/code&gt; of our prerequisites is what ended up being installed. Also does some rudimentary checks of the systemd and logrotate we include with our packages&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;02-api&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Functional Admin API and Proxy tests.&lt;/p&gt; &#xA;&lt;h2&gt;Releasing Kong&lt;/h2&gt; &#xA;&lt;p&gt;The same defaults that applied when creating a packaged version of Kong apply to releasing said package to our internal server and can be changed by environment variables. Presumes that the package you want to release already exists in the output directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export PULP_USR=user&#xA;export PULP_PSW=password&#xA;export RESTY_IMAGE_BASE=seeabove&#xA;export RESTY_IMAGE_TAG=seeabove&#xA;export KONG_PACKAGE_NAME=somename&#xA;make package-kong&#xA;make release-kong&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Required release ENV variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PULP_USR&#xA;PULP_PSW&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>