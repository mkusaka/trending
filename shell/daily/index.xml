<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-14T01:38:55Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sindresorhus/pure</title>
    <updated>2022-09-14T01:38:55Z</updated>
    <id>tag:github.com,2022-09-14:/sindresorhus/pure</id>
    <link href="https://github.com/sindresorhus/pure" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Pretty, minimal and fast ZSH prompt&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pure&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Pretty, minimal and fast ZSH prompt&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/sindresorhus/pure/main/screenshot.png&#34; width=&#34;864&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;p&gt; &lt;sup&gt; &lt;a href=&#34;https://github.com/sponsors/sindresorhus&#34;&gt;Sindre Sorhus&#39; open source work is supported by the community&lt;/a&gt; &lt;/sup&gt; &lt;/p&gt; &#xA; &lt;sup&gt;Special thanks to:&lt;/sup&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://standardresume.co/tech&#34;&gt; &lt;img src=&#34;https://sindresorhus.com/assets/thanks/standard-resume-logo.svg?sanitize=true&#34; width=&#34;200&#34;&gt; &lt;/a&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://www.gitpod.io/?utm_campaign=sindresorhus&amp;amp;utm_medium=referral&amp;amp;utm_content=awesome&amp;amp;utm_source=github&#34;&gt; &#xA;  &lt;div&gt; &#xA;   &lt;img src=&#34;https://sindresorhus.com/assets/thanks/gitpod-logo-white-bg.svg?sanitize=true&#34; width=&#34;240&#34; alt=&#34;Gitpod&#34;&gt; &#xA;  &lt;/div&gt; &lt;b&gt;Dev environments built for the cloud&lt;/b&gt; &#xA;  &lt;div&gt; &#xA;   &lt;sub&gt; Natively integrated with GitLab, GitHub, and Bitbucket, Gitpod automatically and continuously prebuilds dev &lt;br&gt; environments for all your branches. As a result team members can instantly start coding with fresh dev environments &lt;br&gt; for each new task - no matter if you are building a new feature, want to fix a bug, or work on a code review. &lt;/sub&gt; &#xA;  &lt;/div&gt; &lt;/a&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Most prompts are cluttered, ugly and slow. We wanted something visually pleasing that stayed out of our way.&lt;/p&gt; &#xA;&lt;h3&gt;Why?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Comes with the perfect prompt character. Author went through the whole Unicode range to find it.&lt;/li&gt; &#xA; &lt;li&gt;Shows &lt;code&gt;git&lt;/code&gt; branch and whether it&#39;s dirty (with a &lt;code&gt;*&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Indicates when you have unpushed/unpulled &lt;code&gt;git&lt;/code&gt; commits with up/down arrows. &lt;em&gt;(Check is done asynchronously!)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Prompt character turns red if the last command didn&#39;t exit with &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Command execution time will be displayed if it exceeds the set threshold.&lt;/li&gt; &#xA; &lt;li&gt;Username and host only displayed when in an SSH session or a container.&lt;/li&gt; &#xA; &lt;li&gt;Shows the current path in the title and the &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/pure/main/screenshot-title-cmd.png&#34;&gt;current folder &amp;amp; command&lt;/a&gt; when a process is running.&lt;/li&gt; &#xA; &lt;li&gt;Support VI-mode indication by reverse prompt symbol (Zsh 5.3+).&lt;/li&gt; &#xA; &lt;li&gt;Makes an excellent starting point for your own custom prompt.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Can be installed with &lt;code&gt;npm&lt;/code&gt; or manually. Requires Git 2.15.2+ and ZSH 5.2+. Older versions of ZSH are known to work, but they are &lt;strong&gt;not&lt;/strong&gt; recommended.&lt;/p&gt; &#xA;&lt;h3&gt;npm&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install --global pure-prompt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it. Skip to &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/pure/main/#getting-started&#34;&gt;Getting started&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install pure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re not using ZSH from Homebrew (&lt;code&gt;brew install zsh&lt;/code&gt; and &lt;code&gt;$(brew --prefix)/bin/zsh&lt;/code&gt;), you must also add the site-functions to your &lt;code&gt;fpath&lt;/code&gt; in &lt;code&gt;$HOME/.zshrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fpath+=(&#34;$(brew --prefix)/share/zsh/site-functions&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repo somewhere. Here we&#39;ll use &lt;code&gt;$HOME/.zsh/pure&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir -p &#34;$HOME/.zsh&#34;&#xA;git clone https://github.com/sindresorhus/pure.git &#34;$HOME/.zsh/pure&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Add the path of the cloned repo to &lt;code&gt;$fpath&lt;/code&gt; in &lt;code&gt;$HOME/.zshrc&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# .zshrc&#xA;fpath+=($HOME/.zsh/pure)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Initialize the prompt system (if not so already) and choose &lt;code&gt;pure&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# .zshrc&#xA;autoload -U promptinit; promptinit&#xA;prompt pure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Option&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;&lt;code&gt;PURE_CMD_MAX_EXEC_TIME&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The max execution time of a process before its run time is shown when it exits.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;5&lt;/code&gt; seconds&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;&lt;code&gt;PURE_GIT_PULL&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Prevents Pure from checking whether the current Git remote has been updated.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;&lt;code&gt;PURE_GIT_UNTRACKED_DIRTY&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Do not include untracked files in dirtiness check. Mostly useful on large repos (like WebKit).&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;&lt;code&gt;PURE_GIT_DELAY_DIRTY_CHECK&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Time in seconds to delay git dirty checking when &lt;code&gt;git status&lt;/code&gt; takes &amp;gt; 5 seconds.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;1800&lt;/code&gt; seconds&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;&lt;code&gt;PURE_PROMPT_SYMBOL&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Defines the prompt symbol.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;❯&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;&lt;code&gt;PURE_PROMPT_VICMD_SYMBOL&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Defines the prompt symbol used when the &lt;code&gt;vicmd&lt;/code&gt; keymap is active (VI-mode).&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;❮&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;&lt;code&gt;PURE_GIT_DOWN_ARROW&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Defines the git down arrow symbol.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;⇣&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;&lt;code&gt;PURE_GIT_UP_ARROW&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Defines the git up arrow symbol.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;⇡&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;&lt;code&gt;PURE_GIT_STASH_SYMBOL&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Defines the git stash symbol.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;≡&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Zstyle options&lt;/h2&gt; &#xA;&lt;p&gt;Showing git stash status as part of the prompt is not activated by default. To activate this you&#39;ll need to opt in via &lt;code&gt;zstyle&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;zstyle :prompt:pure:git:stash show yes&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can set Pure to only &lt;code&gt;git fetch&lt;/code&gt; the upstream branch of the current local branch. In some cases, this can result in faster updates for Git arrows, but for most users, it&#39;s better to leave this setting disabled. You can enable it with:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;zstyle :prompt:pure:git:fetch only_upstream yes&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;nix-shell&lt;/code&gt; integration adds the shell name to the prompt when used from within a nix shell. It is enabled by default, you can disable it with:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;zstyle :prompt:pure:environment:nix-shell show no&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Colors&lt;/h2&gt; &#xA;&lt;p&gt;As explained in ZSH&#39;s &lt;a href=&#34;http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html#Character-Highlighting&#34;&gt;manual&lt;/a&gt;, color values can be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A decimal integer corresponding to the color index of your terminal. If your &lt;code&gt;$TERM&lt;/code&gt; is &lt;code&gt;xterm-256color&lt;/code&gt;, see this &lt;a href=&#34;https://upload.wikimedia.org/wikipedia/commons/1/15/Xterm_256color_chart.svg&#34;&gt;chart&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The name of one of the following nine colors: &lt;code&gt;black&lt;/code&gt;, &lt;code&gt;red&lt;/code&gt;, &lt;code&gt;green&lt;/code&gt;, &lt;code&gt;yellow&lt;/code&gt;, &lt;code&gt;blue&lt;/code&gt;, &lt;code&gt;magenta&lt;/code&gt;, &lt;code&gt;cyan&lt;/code&gt;, &lt;code&gt;white&lt;/code&gt;, and &lt;code&gt;default&lt;/code&gt; (the terminal’s default foreground)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#&lt;/code&gt; followed by an RGB triplet in hexadecimal format, for example &lt;code&gt;#424242&lt;/code&gt;. Only if your terminal supports 24-bit colors (true color) or when the &lt;a href=&#34;http://zsh.sourceforge.net/Doc/Release/Zsh-Modules.html#The-zsh_002fnearcolor-Module&#34;&gt;&lt;code&gt;zsh/nearcolor&lt;/code&gt; module&lt;/a&gt; is loaded.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Colors can be changed by using &lt;a href=&#34;http://zsh.sourceforge.net/Doc/Release/Zsh-Modules.html#The-zsh_002fzutil-Module&#34;&gt;&lt;code&gt;zstyle&lt;/code&gt;&lt;/a&gt; with a pattern of the form &lt;code&gt;:prompt:pure:$color_name&lt;/code&gt; and style &lt;code&gt;color&lt;/code&gt;. The color names, their default, and what part they affect are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;execution_time&lt;/code&gt; (yellow) - The execution time of the last command when exceeding &lt;code&gt;PURE_CMD_MAX_EXEC_TIME&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git:arrow&lt;/code&gt; (cyan) - For &lt;code&gt;PURE_GIT_UP_ARROW&lt;/code&gt; and &lt;code&gt;PURE_GIT_DOWN_ARROW&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git:stash&lt;/code&gt; (cyan) - For &lt;code&gt;PURE_GIT_STASH_SYMBOL&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git:branch&lt;/code&gt; (242) - The name of the current branch when in a Git repository.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git:branch:cached&lt;/code&gt; (red) - The name of the current branch when the data isn&#39;t fresh.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git:action&lt;/code&gt; (242) - The current action in progress (cherry-pick, rebase, etc.) when in a Git repository.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git:dirty&lt;/code&gt; (218) - The asterisk showing the branch is dirty.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;host&lt;/code&gt; (242) - The hostname when on a remote machine.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;path&lt;/code&gt; (blue) - The current path, for example, &lt;code&gt;PWD&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;prompt:error&lt;/code&gt; (red) - The &lt;code&gt;PURE_PROMPT_SYMBOL&lt;/code&gt; when the previous command has &lt;em&gt;failed&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;prompt:success&lt;/code&gt; (magenta) - The &lt;code&gt;PURE_PROMPT_SYMBOL&lt;/code&gt; when the previous command has &lt;em&gt;succeeded&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;prompt:continuation&lt;/code&gt; (242) - The color for showing the state of the parser in the continuation prompt (PS2). It&#39;s the pink part in &lt;a href=&#34;https://user-images.githubusercontent.com/147409/70068574-ebc74800-15f8-11ea-84c0-8b94a4b57ff4.png&#34;&gt;this screenshot&lt;/a&gt;, it appears in the same spot as &lt;code&gt;virtualenv&lt;/code&gt;. You could for example matching both colors so that Pure has a uniform look.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;suspended_jobs&lt;/code&gt; (red) - The &lt;code&gt;✦&lt;/code&gt; symbol indicates that jobs are running in the background.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;user&lt;/code&gt; (242) - The username when on remote machine.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;user:root&lt;/code&gt; (default) - The username when the user is root.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;virtualenv&lt;/code&gt; (242) - The name of the Python &lt;code&gt;virtualenv&lt;/code&gt; when in use.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following diagram shows where each color is applied on the prompt:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;┌────────────────────────────────────────────────────── user&#xA;│      ┌─────────────────────────────────────────────── host&#xA;│      │           ┌─────────────────────────────────── path&#xA;│      │           │          ┌──────────────────────── git:branch&#xA;│      │           │          │     ┌────────────────── git:dirty&#xA;│      │           │          │     │ ┌──────────────── git:action&#xA;│      │           │          │     │ │        ┌─────── git:arrow&#xA;│      │           │          │     │ │        │ ┌───── git:stash&#xA;│      │           │          │     │ │        │ │ ┌─── execution_time&#xA;│      │           │          │     │ │        │ │ │&#xA;zaphod@heartofgold ~/dev/pure master* rebase-i ⇡ ≡ 42s&#xA;venv ❯&#xA;│    │&#xA;│    └───────────────────────────────────────────────── prompt&#xA;└────────────────────────────────────────────────────── virtualenv (or prompt:continuation)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;RGB colors&lt;/h3&gt; &#xA;&lt;p&gt;There are two ways to use RGB colors with the hexadecimal format. The correct way is to use a &lt;a href=&#34;https://gist.github.com/XVilka/8346728&#34;&gt;terminal that support 24-bit colors&lt;/a&gt; and enable this feature as explained in the terminal&#39;s documentation.&lt;/p&gt; &#xA;&lt;p&gt;If you can&#39;t use such terminal, the module &lt;a href=&#34;http://zsh.sourceforge.net/Doc/Release/Zsh-Modules.html#The-zsh_002fnearcolor-Module&#34;&gt;&lt;code&gt;zsh/nearcolor&lt;/code&gt;&lt;/a&gt; can be useful. It will map any hexadecimal color to the nearest color in the 88 or 256 color palettes of your terminal, but without using the first 16 colors, since their values can be modified by the user. Keep in mind that when using this module you won&#39;t be able to display true RGB colors. It only allows you to specify colors in a more convenient way. The following is an example on how to use this module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# .zshrc&#xA;zmodload zsh/nearcolor&#xA;zstyle :prompt:pure:path color &#39;#FF0000&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# .zshrc&#xA;&#xA;autoload -U promptinit; promptinit&#xA;&#xA;# optionally define some options&#xA;PURE_CMD_MAX_EXEC_TIME=10&#xA;&#xA;# change the path color&#xA;zstyle :prompt:pure:path color white&#xA;&#xA;# change the color for both `prompt:success` and `prompt:error`&#xA;zstyle &#39;:prompt:pure:prompt:*&#39; color cyan&#xA;&#xA;# turn on git stash status&#xA;zstyle :prompt:pure:git:stash show yes&#xA;&#xA;prompt pure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tips&lt;/h2&gt; &#xA;&lt;p&gt;In the screenshot you see Pure running in &lt;a href=&#34;https://hyper.is&#34;&gt;Hyper&lt;/a&gt; with the &lt;a href=&#34;https://github.com/sindresorhus/hyper-snazzy&#34;&gt;hyper-snazzy&lt;/a&gt; theme and Menlo font.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/chriskempson/tomorrow-theme&#34;&gt;Tomorrow Night Eighties&lt;/a&gt; theme with the &lt;a href=&#34;https://www.fontsquirrel.com/fonts/droid-sans-mono&#34;&gt;Droid Sans Mono&lt;/a&gt; font (15pt) is also a &lt;a href=&#34;https://github.com/sindresorhus/pure/raw/95ee3e7618c6e2162a1e3cdac2a88a20ac3beb27/screenshot.png&#34;&gt;nice combination&lt;/a&gt;.&lt;br&gt; &lt;em&gt;Just make sure you have anti-aliasing enabled in your terminal.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;To have commands colorized as seen in the screenshot, install &lt;a href=&#34;https://github.com/zsh-users/zsh-syntax-highlighting&#34;&gt;zsh-syntax-highlighting&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Integration&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34;&gt;oh-my-zsh&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Set &lt;code&gt;ZSH_THEME=&#34;&#34;&lt;/code&gt; in your &lt;code&gt;.zshrc&lt;/code&gt; to disable oh-my-zsh themes.&lt;/li&gt; &#xA; &lt;li&gt;Follow the Pure &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/pure/main/#install&#34;&gt;Install&lt;/a&gt; instructions.&lt;/li&gt; &#xA; &lt;li&gt;Do not enable the following (incompatible) plugins: &lt;code&gt;vi-mode&lt;/code&gt;, &lt;code&gt;virtualenv&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;code&gt;oh-my-zsh&lt;/code&gt; overrides the prompt so Pure must be activated &lt;em&gt;after&lt;/em&gt; &lt;code&gt;source $ZSH/oh-my-zsh.sh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/sorin-ionescu/prezto&#34;&gt;prezto&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Pure is bundled with Prezto. No need to install it.&lt;/p&gt; &#xA;&lt;p&gt;Add &lt;code&gt;prompt pure&lt;/code&gt; to your &lt;code&gt;~/.zpreztorc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/Eriner/zim&#34;&gt;zim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;zmodule sindresorhus/pure --source async.zsh --source pure.zsh&lt;/code&gt; to your &lt;code&gt;.zimrc&lt;/code&gt; and run &lt;code&gt;zimfw install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/zplug/zplug&#34;&gt;zplug&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Update your &lt;code&gt;.zshrc&lt;/code&gt; file with the following two lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;zplug mafredri/zsh-async, from:github&#xA;zplug sindresorhus/pure, use:pure.zsh, from:github, as:theme&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/zdharma/zinit&#34;&gt;zinit&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Update your &lt;code&gt;.zshrc&lt;/code&gt; file with the following two lines (order matters):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;zinit ice compile&#39;(pure|async).zsh&#39; pick&#39;async.zsh&#39; src&#39;pure.zsh&#39;&#xA;zinit light sindresorhus/pure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://wiki.zshell.dev&#34;&gt;zi&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Update your &lt;code&gt;.zshrc&lt;/code&gt; file with the following line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;zi light-mode for @sindresorhus/pure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://wiki.zshell.dev/community/gallery/collection/themes#thp-sindresorhuspure&#34;&gt;ZI wiki&lt;/a&gt; for more.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;There are currently no FAQs.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/sindresorhus/pure/wiki/FAQ-Archive&#34;&gt;FAQ Archive&lt;/a&gt; for previous FAQs.&lt;/p&gt; &#xA;&lt;h2&gt;Ports&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ZSH&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/therealklanni/purity&#34;&gt;therealklanni/purity&lt;/a&gt; - More compact current working directory, important details on the main prompt line, and extra Git indicators.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/intelfx/pure&#34;&gt;intelfx/pure&lt;/a&gt; - Solarized-friendly colors, highly verbose, and fully async Git integration.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/forivall/pure&#34;&gt;forivall/pure&lt;/a&gt; - A minimal fork which highlights the Git repo&#39;s root directory in the path.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/dfurnes/purer&#34;&gt;dfurnes/purer&lt;/a&gt; - Compact single-line prompt with built-in Vim-mode indicator.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/chabou/pure-now&#34;&gt;chabou/pure-now&lt;/a&gt; - Fork with &lt;a href=&#34;https://zeit.co/now&#34;&gt;Now&lt;/a&gt; support.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://gist.github.com/romkatv/7cbab80dcbc639003066bb68b9ae0bbf&#34;&gt;pure10k&lt;/a&gt; - Configuration file for &lt;a href=&#34;https://github.com/romkatv/powerlevel10k/&#34;&gt;Powerlevel10k&lt;/a&gt; that makes it look like Pure.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bash&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/sapegin/dotfiles&#34;&gt;sapegin/dotfiles&lt;/a&gt; - &lt;a href=&#34;https://github.com/sapegin/dotfiles/raw/dd063f9c30de7d2234e8accdb5272a5cc0a3388b/includes/bash_prompt.bash&#34;&gt;Prompt&lt;/a&gt; and &lt;a href=&#34;https://github.com/sapegin/dotfiles/tree/master/color&#34;&gt;color theme&lt;/a&gt; for Terminal.app.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fish&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/pure-fish/pure&#34;&gt;pure-fish/pure&lt;/a&gt; - Fully tested Fish port aiming for feature parity.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rust&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/xcambar/purs&#34;&gt;xcambar/purs&lt;/a&gt; - Pure-inspired prompt in Rust.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Go&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/talal/mimir&#34;&gt;talal/mimir&lt;/a&gt; - Pure-inspired prompt in Go with Kubernetes and OpenStack cloud support. Not intended to have feature parity.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PowerShell&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/nickcox/pure-pwsh/&#34;&gt;nickcox/pure-pwsh&lt;/a&gt; - PowerShell/PS Core implementation of the Pure prompt.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Team&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://sindresorhus.com&#34;&gt;&lt;img src=&#34;https://github.com/sindresorhus.png?size=100&#34; alt=&#34;Sindre Sorhus&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/mafredri&#34;&gt;&lt;img src=&#34;https://github.com/mafredri.png?size=100&#34; alt=&#34;Mathias Fredriksson&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/sindresorhus&#34;&gt;Sindre Sorhus&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mafredri&#34;&gt;Mathias Fredriksson&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>iamthefrogy/frogy</title>
    <updated>2022-09-14T01:38:55Z</updated>
    <id>tag:github.com,2022-09-14:/iamthefrogy/frogy</id>
    <link href="https://github.com/iamthefrogy/frogy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My subdomain enumeration script. It&#39;s unique in the way it is built upon.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/iamthefrogy/frogy&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8291014/148647453-9328388b-1d04-4f76-99f4-c1f8d6aa8929.jpg&#34; alt=&#34;frogy&#34; height=&#34;230px&#34;&gt;&lt;/a&gt; &lt;p&gt;&lt;img src=&#34;https://visitor-badge.glitch.me/badge?page_id=iamthefrogy.frogy&#34; alt=&#34;&#34;&gt;&lt;a href=&#34;https://twitter.com/iamthefrogy&#34;&gt; &lt;/a&gt;&lt;/p&gt; &lt;/h1&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt; Made with ❤️ ❤️ ❤️ from &lt;img src=&#34;https://user-images.githubusercontent.com/8291014/145205748-5530f102-9102-4659-a141-21872f237c57.png&#34; alt=&#34;frogy&#34; height=&#34;20px&#34;&gt; &lt;/h4&gt; My goal is to create an open-source Attack Surface Management solution and make it capable to find all the IPs, domains, subdomains, live websites, login portals for one company. &#xA;&lt;br&gt;&#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;How it can help a large company (Some usecases):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Vulnerability management team:&lt;/strong&gt; Can use the result to feed into their known and unknown assets database to increase their vulnerability scanning coverage.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Threat intel team:&lt;/strong&gt; Can use the result to feed into their intel DB to prioritize proactive monitoring for critical assets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Asset inventory team:&lt;/strong&gt; Can use the result to keep their asset inventory database up-to-date by adding new unknown assets facing Internet and finding contact information for the assets inside your organization.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SOC team:&lt;/strong&gt; Can use the result to identify what all assets they are monitoring vs. not monitoring and then increase their coverage slowly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Patch management team:&lt;/strong&gt; Many large organizations are unaware of their legacy, abandoned assets facing the Internet; they can utilize this result to identify what assets need to be taken offline if they are not being used.&lt;br&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It has multiple use cases depending your organization&#39;s processes and technology landscpae.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Logic&lt;/strong&gt; &lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/8291014/148620188-3966a2e9-0089-401f-bf90-7909a93af1bf.jpg&#34; alt=&#34;Frogy&#34; title=&#34;Frogy&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;🐸&lt;/span&gt; Horizontal subdomain enumeration&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🐸&lt;/span&gt; Vertical subdomain enumeration&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🐸&lt;/span&gt; Resolving subdomains to IP&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🐸&lt;/span&gt; Identifying live web applications&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🐸&lt;/span&gt; Identifying web applications with login portals enabled&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Requirements:&lt;/strong&gt; Go Language, Python 3.+, jq&lt;br&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Login as root and run the below command.&#xA;chmod +x install.sh&#xA;./install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./frogy.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt; &lt;br&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8291014/148625824-0760f6fe-6d8f-4217-85e7-1432388b1ee9.png&#34; alt=&#34;Frogy&#34; title=&#34;Frogy&#34; height=&#34;600px&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Output file will be saved inside the output/company_name/outut.csv folder. Where company_name is any company name which you give as an input to &#39;Organization Name&#39; at the start of the script.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;TODO&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;✔&lt;/span&gt; Efficient folder structure management&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✔&lt;/span&gt; Resolving subdomains using dig&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✔&lt;/span&gt; Add dnscan for extened subdomain enum scope&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✔&lt;/span&gt; Eliminate false positives.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✔&lt;/span&gt; Bug Fixed, for false positive reporting of domains and subdomains.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✔&lt;/span&gt; Searching domains through crt.sh via registered organization name from WHOIS instead of domain name created some garbage data. Filtered result to only grab domains and nothing else.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✔&lt;/span&gt; Now finds live websites on all standard/non-standard ports.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✔&lt;/span&gt; Now finds all websites with login portals. It also checks websites home page that redirects to login page automatically upon opening.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✔&lt;/span&gt; Now finds live web application based on top 1000 shodan http/https ports through facet analysis. Uses Naabu for fast port scan followed by httpx. (Credit: @nbk_2000)&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✔&lt;/span&gt; Generate CSV (Root domains, Subdomains, Live sites, Login Portals)&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✔&lt;/span&gt; Now provides output for resolved subdomains&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✔&lt;/span&gt; Added WayBackEngine support from another project&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✔&lt;/span&gt; Added BufferOver support from another project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✔&lt;/span&gt; Added Amass coverage.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🚧&lt;/span&gt; Add docker support to avoid dependency issues.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🚧&lt;/span&gt; Add progress bar for each main feature runnign so it shows some progress while running.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🚧&lt;/span&gt; Reducing execution time by performing resolved asset&#39;s port discovery.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✔&lt;/span&gt; Add crobat support from Rapid7.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;A very warm thanks to the authors of the tools used in this script.&lt;/h4&gt; &#xA;&lt;p&gt;Initial repo created - A few weeks back below date.&lt;br&gt; Date - 4 March 2019, Open-sourced&lt;br&gt; Date - 19 March 2021, Major changes&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Warning/Disclaimer: Read the detailed disclaimer at my blog - &lt;a href=&#34;https://github.com/iamthefrogy/Disclaimer-Warning/raw/main/README.md&#34;&gt;https://github.com/iamthefrogy/Disclaimer-Warning/blob/main/README.md&lt;/a&gt; &lt;br&gt; Logo credit - &lt;a href=&#34;http://www.designevo.com&#34;&gt;www.designevo.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zjpedu/Computer-Systems-Labs</title>
    <updated>2022-09-14T01:38:55Z</updated>
    <id>tag:github.com,2022-09-14:/zjpedu/Computer-Systems-Labs</id>
    <link href="https://github.com/zjpedu/Computer-Systems-Labs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Computer Systems Course Labs for DaSE of ECNU&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Computer Systems Course Labs for DaSE of ECNU&lt;/h2&gt;</summary>
  </entry>
</feed>