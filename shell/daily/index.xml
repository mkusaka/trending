<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-23T01:43:35Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>thijsvanloef/palworld-server-docker</title>
    <updated>2024-01-23T01:43:35Z</updated>
    <id>tag:github.com,2024-01-23:/thijsvanloef/palworld-server-docker</id>
    <link href="https://github.com/thijsvanloef/palworld-server-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Docker Container to easily run a Palworld dedicated server.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Palworld Dedicated Server Docker&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/thijsvanloef/palworld-server-docker&#34; alt=&#34;Release&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/pulls/thijsvanloef/palworld-server-docker&#34; alt=&#34;Docker Pulls&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/stars/thijsvanloef/palworld-server-docker&#34; alt=&#34;Docker Stars&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/image-size/thijsvanloef/palworld-server-docker/latest&#34; alt=&#34;Image Size&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/thijsvanloef/palworld-server-docker&#34;&gt;View on Docker Hub&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] Unsure how to get started? Check out the &lt;a href=&#34;https://tice.tips/containerization/palworld-server-docker/&#34;&gt;this guide I wrote!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This is a Docker container to help you get started with hosting your own &lt;a href=&#34;https://store.steampowered.com/app/1623730/Palworld/&#34;&gt;Palworld&lt;/a&gt; dedicated server.&lt;/p&gt; &#xA;&lt;p&gt;This Docker container has been tested and will work on both Linux (Ubuntu/Debian) and Windows 10.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] At the moment, Xbox Gamepass/Xbox Console players will not be able to join a dedicated server.&lt;/p&gt; &#xA; &lt;p&gt;They will need to join players using the invite code and are limited to sessions of 4 players max.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;Keep in mind that you&#39;ll need to change the &lt;a href=&#34;##Environment-variables&#34;&gt;environment variables&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Docker Compose&lt;/h3&gt; &#xA;&lt;p&gt;This repository includes an example &lt;a href=&#34;https://raw.githubusercontent.com/thijsvanloef/palworld-server-docker/main/example/docker-compose.yml&#34;&gt;docker-compose.yml&lt;/a&gt; file you can use to setup your server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;services:&#xA;   palworld:&#xA;      image: thijsvanloef/palworld-server-docker:latest&#xA;      restart: unless-stopped&#xA;      container_name: palworld-server&#xA;      ports:&#xA;        - 8211:8211/udp&#xA;        - 27015:27015/udp&#xA;      environment:&#xA;         - PUID=1000&#xA;         - PGID=1000&#xA;         - PORT=8211 # Optional but recommended&#xA;         - PLAYERS=16 # Optional but recommended&#xA;         - MULTITHREADING=false&#xA;         - RCON_ENABLED=true&#xA;         - RCON_PORT=25575&#xA;         - ADMIN_PASSWORD=&#34;adminPasswordHere&#34;&#xA;         - COMMUNITY=false  # Enable this if you want your server to show up in the community servers tab, USE WITH SERVER_PASSWORD!&#xA;         # Enable the environment variables below if you have COMMUNITY=true&#xA;         # - SERVER_PASSWORD=&#34;worldofpals&#34;&#xA;         # - SERVER_NAME=&#34;World of Pals&#34;&#xA;      volumes:&#xA;         - ./palworld:/palworld/&#xA;   rcon:&#xA;      image: outdead/rcon:latest&#xA;      entrypoint: [&#39;/rcon&#39;, &#39;-a&#39;, &#39;palworld:25575&#39;, &#39;-p&#39;, &#39;adminPasswordHere&#39;]&#xA;      profiles: [&#39;rcon&#39;] &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker Run&lt;/h3&gt; &#xA;&lt;p&gt;Change every &amp;lt;&amp;gt; to your own configuration&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d \&#xA;    --name palworld-server \&#xA;    -p 8211:8211/udp \&#xA;    -p 27015:27015/udp \&#xA;    -v ./&amp;lt;palworld-folder&amp;gt;:/palworld/ \&#xA;    -e PLAYERS=16 \&#xA;    -e PORT=8211 \&#xA;    -e PUID=1000 \&#xA;    -e PGID=1000 \&#xA;    -e COMMUNITY=false \&#xA;    --restart unless-stopped \&#xA;    thijsvanloef/palworld-server-docker&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Environment variables&lt;/h3&gt; &#xA;&lt;p&gt;You can use the following values to change the settings of the server on boot. It is highly recommended you set the following environment values before starting the server:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PLAYERS&lt;/li&gt; &#xA; &lt;li&gt;PORT&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Info&lt;/th&gt; &#xA;   &lt;th&gt;Default Values&lt;/th&gt; &#xA;   &lt;th&gt;Allowed Values&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PLAYERS*&lt;/td&gt; &#xA;   &lt;td&gt;Max amount of players that are able to join the server&lt;/td&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;1-31&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PORT*&lt;/td&gt; &#xA;   &lt;td&gt;UDP port that the server will expose&lt;/td&gt; &#xA;   &lt;td&gt;8211&lt;/td&gt; &#xA;   &lt;td&gt;1024-65535&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PUID*&lt;/td&gt; &#xA;   &lt;td&gt;The uid of the user the server should run as&lt;/td&gt; &#xA;   &lt;td&gt;1000&lt;/td&gt; &#xA;   &lt;td&gt;!0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PGID*&lt;/td&gt; &#xA;   &lt;td&gt;The gid of the group the server should run as&lt;/td&gt; &#xA;   &lt;td&gt;1000&lt;/td&gt; &#xA;   &lt;td&gt;!0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MULTITHREADING**&lt;/td&gt; &#xA;   &lt;td&gt;Improves performance in multi-threaded CPU environments. It is effective up to a maximum of about 4 threads, and allocating more than this number of threads does not make much sense.&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;true/false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;COMMUNITY&lt;/td&gt; &#xA;   &lt;td&gt;Whether or not the server shows up in the community server browser (USE WITH SERVER_PASSWORD)&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;true/false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PUBLIC_IP&lt;/td&gt; &#xA;   &lt;td&gt;You can manually specify the global IP address of the network on which the server running.If not specified, it will be detected automatically. If it does not work well, try manual configuration.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x.x.x.x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PUBLIC_PORT&lt;/td&gt; &#xA;   &lt;td&gt;You can manually specify the port number of the network on which the server running.If not specified, it will be detected automatically. If it does not work well, try manual configuration.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x.x.x.x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SERVER_NAME&lt;/td&gt; &#xA;   &lt;td&gt;A name for your community server&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;string&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SERVER_PASSWORD&lt;/td&gt; &#xA;   &lt;td&gt;Secure your community server with a password&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;string&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ADMIN_PASSWORD&lt;/td&gt; &#xA;   &lt;td&gt;Secure administration access in the server with a password&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;string&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;UPDATE_ON_BOOT**&lt;/td&gt; &#xA;   &lt;td&gt;Update/Install the server when the docker container starts (THIS HAS TO BE ENABLED THE FIRST TIME YOU RUN THE CONTAINER)&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;true/false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RCON_ENABLED&lt;/td&gt; &#xA;   &lt;td&gt;Enable RCON for the Palworld server&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;true/false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RCON_PORT&lt;/td&gt; &#xA;   &lt;td&gt;RCON port to connect to&lt;/td&gt; &#xA;   &lt;td&gt;25575&lt;/td&gt; &#xA;   &lt;td&gt;1024-65535&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;*highly recommended to set&lt;/p&gt; &#xA;&lt;p&gt;** Make sure you know what you are doing when running this option enabled&lt;/p&gt; &#xA;&lt;h3&gt;Game Ports&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Port&lt;/th&gt; &#xA;   &lt;th&gt;Info&lt;/th&gt; &#xA;   &lt;th&gt;note&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8211&lt;/td&gt; &#xA;   &lt;td&gt;Game Port (UDP)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;27015&lt;/td&gt; &#xA;   &lt;td&gt;Query Port (UDP)&lt;/td&gt; &#xA;   &lt;td&gt;You are not able to change this port as of now&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;25575&lt;/td&gt; &#xA;   &lt;td&gt;RCON Port (TCP)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Using RCON&lt;/h2&gt; &#xA;&lt;p&gt;RCON is enabled by default for the palworld-server-docker image. Using the RCON commands is quite easy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker compose run --rm rcon &#34;Server Command&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;List of server commands&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Info&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shutdown {Seconds} {MessageText}&lt;/td&gt; &#xA;   &lt;td&gt;The server is shut down after the number of Seconds&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DoExit&lt;/td&gt; &#xA;   &lt;td&gt;Force stop the server.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Broadcast&lt;/td&gt; &#xA;   &lt;td&gt;Send message to all player in the server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;KickPlayer {SteamID}t&lt;/td&gt; &#xA;   &lt;td&gt;Kick player from the server..&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BanPlayer {SteamID}&lt;/td&gt; &#xA;   &lt;td&gt;BAN player from the server.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TeleportToPlayer {SteamID}&lt;/td&gt; &#xA;   &lt;td&gt;Teleport to current location of target player.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TeleportToMe {SteamID}&lt;/td&gt; &#xA;   &lt;td&gt;Target player teleport to your current location&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ShowPlayers&lt;/td&gt; &#xA;   &lt;td&gt;Show information on all connected players.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Info&lt;/td&gt; &#xA;   &lt;td&gt;Show server information.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Save&lt;/td&gt; &#xA;   &lt;td&gt;Save the world data.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For a full list of commands go to: &lt;a href=&#34;https://tech.palworldgame.com/server-commands&#34;&gt;https://tech.palworldgame.com/server-commands&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Reporting Issues/Feature Requests&lt;/h2&gt; &#xA;&lt;p&gt;Issues/Feature requests can be submitted by using &lt;a href=&#34;https://github.com/thijsvanloef/palworld-server-docker/issues/new/choose&#34;&gt;this link&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Known Issues&lt;/h3&gt; &#xA;&lt;p&gt;Known issues are listed in the &lt;a href=&#34;https://github.com/thijsvanloef/palworld-server-docker/wiki/Known-Issues&#34;&gt;wiki&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Frogging-Family/linux-tkg</title>
    <updated>2024-01-23T01:43:35Z</updated>
    <id>tag:github.com,2024-01-23:/Frogging-Family/linux-tkg</id>
    <link href="https://github.com/Frogging-Family/linux-tkg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;linux-tkg custom kernels&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;linux-tkg&lt;/h2&gt; &#xA;&lt;p&gt;This repository provides scripts to automatically download, patch and compile the Linux Kernel from &lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git&#34;&gt;the official Linux git repository&lt;/a&gt;, with a selection of patches aiming for better desktop/gaming experience. The provided patches can be enabled/disabled by editing the &lt;code&gt;customization.cfg&lt;/code&gt; file and/or by following the interactive install script. You can use an external config file (default is &lt;code&gt;$HOME/.config/frogminer/linux-tkg.cfg&lt;/code&gt;, tweakable with the &lt;code&gt;_EXT_CONFIG_PATH&lt;/code&gt; variable in &lt;code&gt;customization.cfg&lt;/code&gt;). You can also use your own patches (more information in &lt;code&gt;customization.cfg&lt;/code&gt; file).&lt;/p&gt; &#xA;&lt;h3&gt;Important information&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Non-pacman distros support can be considered experimental. You&#39;re invited to report issues you might encounter with it.&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;If your distro isn&#39;t using systemd, please set _configfile=&#34;running-kernel&#34; in customization.cfg or you might end up with a non-bootable kernel&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Keep in mind building recent linux kernels with GCC will require ~20-25GB of disk space. Using llvm/clang, LTO, ccache and/or enabling more drivers in the defconfig will push that requirement higher, so make sure you have enough free space on the volume you&#39;re using to build.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In &lt;code&gt;intel_pstate&lt;/code&gt; driver, frequency scaling aggressiveness has been changed with kernel 5.5 which results in stutters and poor performance in low/medium load scenarios (for higher power savings). As a workaround for our gaming needs, we are setting it to passive mode to make use of the &lt;code&gt;acpi_cpufreq&lt;/code&gt; governor passthrough, keeping full support for turbo frequencies. It&#39;s combined with our aggressive ondemand governor by default for good performance on most CPUs while keeping frequency scaling for power savings. In a typical low/medium load scenario (Core i7 9700k, playing Mario Galaxy on Dolphin emulator) intel_pstate in performance mode gives a stuttery 45-50 fps experience, while passive mode + aggressive ondemand offers a locked 60 fps.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Nvidia&#39;s proprietary drivers might need to be patched if they don&#39;t support your chosen kernel OOTB: &lt;a href=&#34;https://github.com/Frogging-Family/nvidia-all&#34;&gt;Frogging-Family nvidia-all&lt;/a&gt; can do that automatically for you.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Note regarding kernels older than 5.9 on Arch Linux: since the switch to &lt;code&gt;zstd&lt;/code&gt; compressed &lt;code&gt;initramfs&lt;/code&gt; by default, you will face an &lt;code&gt;invalid magic at start of compress&lt;/code&gt; error by default. You can workaround the issue by editing &lt;code&gt;/etc/mkinitcpio.conf&lt;/code&gt; to uncomment the &lt;code&gt;COMPRESSION=&#34;lz4&#34;&lt;/code&gt; (for example, since that&#39;s the best option after zstd) line and regenerating &lt;code&gt;initramfs&lt;/code&gt; for all kernels with &lt;code&gt;sudo mkinitpcio -P&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Customization options&lt;/h3&gt; &#xA;&lt;h4&gt;Alternative CPU schedulers&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Completely_Fair_Scheduler&#34;&gt;CFS&lt;/a&gt; is the only CPU scheduler available in the &#34;vanilla&#34; kernel sources ≤ 6.5. &lt;a href=&#34;https://lwn.net/Articles/925371/&#34;&gt;EEVDF&lt;/a&gt; is the only CPU scheduler available in the &#34;vanilla&#34; kernel sources ≥ 6.6.&lt;/p&gt; &#xA;&lt;p&gt;Its current implementation doesn&#39;t allow for injecting additional schedulers, and requires replacing it. Only one scheduler can be patched in at a time.&lt;/p&gt; &#xA;&lt;p&gt;Alternative schedulers are available to you in linux-tkg:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Project C / PDS &amp;amp; BMQ by Alfred Chen: &lt;a href=&#34;http://cchalpha.blogspot.com/&#34;&gt;blog&lt;/a&gt;, &lt;a href=&#34;https://gitlab.com/alfredchen/projectc&#34;&gt;code repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;MuQSS by Con Kolivas : &lt;a href=&#34;http://ck-hack.blogspot.com/&#34;&gt;blog&lt;/a&gt;, &lt;a href=&#34;https://github.com/ckolivas/linux&#34;&gt;code repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CacULE by Hamad Marri - CFS based : &lt;a href=&#34;https://github.com/hamadmarri/cacule-cpu-scheduler&#34;&gt;code repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Task Type (TT) by Hamad Marri - CFS based : &lt;a href=&#34;https://github.com/hamadmarri/TT-CPU-Scheduler&#34;&gt;code repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;BORE (Burst-Oriented Response Enhancer) by Masahito Suzuki - CFS/EEVDF based : &lt;a href=&#34;https://github.com/firelzrd/bore-scheduler&#34;&gt;code repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Undead PDS : TkG&#39;s port of the pre-Project C &#34;PDS-mq&#34; scheduler by Alfred Chen. While PDS-mq got dropped with kernel 5.1 in favor of its BMQ evolution/rework, it wasn&#39;t on par with PDS-mq in gaming. &#34;U&#34; PDS still performed better in some cases than other schedulers, so it&#39;s been kept undead for a while.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These alternative schedulers can offer a better performance/latency ratio for gaming and desktop use. The availability of each scheduler depends on the chosen Kernel version: the script will display what&#39;s available on a per-version basis.&lt;/p&gt; &#xA;&lt;h4&gt;Default tweaks&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Memory management and swapping tweaks&lt;/li&gt; &#xA; &lt;li&gt;Scheduling tweaks&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CFS/EEVDF&lt;/code&gt; tweaks&lt;/li&gt; &#xA; &lt;li&gt;Using the &lt;a href=&#34;https://www.bufferbloat.net/projects/codel/wiki/CakeTechnical/&#34;&gt;&#34;Cake&#34;&lt;/a&gt; network queue management system&lt;/li&gt; &#xA; &lt;li&gt;Using &lt;code&gt;vm.max_map_count=16777216&lt;/code&gt; by default&lt;/li&gt; &#xA; &lt;li&gt;Cherry-picked patches from &lt;a href=&#34;https://github.com/clearlinux-pkgs/linux&#34;&gt;Clear Linux&#39;s patchset&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Optional tweaks&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;customization.cfg&lt;/code&gt; file offers many toggles for extra tweaks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Fsync&lt;/code&gt; and &lt;code&gt;Futex2&lt;/code&gt;(deprecated) support: can improve the performance in games, needs a patched wine like &lt;a href=&#34;https://github.com/Frogging-Family/wine-tkg-git&#34;&gt;wine-tkg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/graysky2/kernel_compiler_patch&#34;&gt;Graysky&#39;s per-CPU-arch native optimizations&lt;/a&gt;: tunes the compiled code to to a specified CPU&lt;/li&gt; &#xA; &lt;li&gt;Compile with GCC or Clang with optional &lt;code&gt;O2&lt;/code&gt;/&lt;code&gt;O3&lt;/code&gt; and &lt;code&gt;LTO&lt;/code&gt; (Clang only) optimizations. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Warning regarding DKMS modules prior to v3.0.2 (2021-11-21) and Clang:&lt;/strong&gt; &lt;code&gt;DKMS&lt;/code&gt; version v3.0.1 and earlier will default to using GCC, which will fail to build modules against a Clang-built kernel. This will - for example - break Nvidia drivers. Forcing older &lt;code&gt;DKMS&lt;/code&gt; to use Clang can be done but isn&#39;t recommended.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Using &lt;a href=&#34;https://github.com/graysky2/modprobed-db&#34;&gt;Modprobed-db&lt;/a&gt;&#39;s database can reduce the compilation time and produce a smaller kernel which will only contain the modules listed in it. &lt;strong&gt;NOT recommended&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Warning&lt;/strong&gt;: make sure to read &lt;a href=&#34;https://wiki.archlinux.org/index.php/Modprobed-db&#34;&gt;thoroughly about it first&lt;/a&gt; since it comes with caveats that can lead to an unbootable kernel.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&#34;Zenify&#34; patchset using core blk, mm and scheduler tweaks from Zen&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ZFS&lt;/code&gt; FPU symbols (&amp;lt;5.9)&lt;/li&gt; &#xA; &lt;li&gt;Overrides for missing ACS capabilities&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org/title/Waydroid&#34;&gt;Waydroid&lt;/a&gt; support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.com/CalcProgrammer1/OpenRGB&#34;&gt;OpenRGB&lt;/a&gt; support&lt;/li&gt; &#xA; &lt;li&gt;Provide own kernel &lt;code&gt;.config&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;li&gt;...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;User patches&lt;/h4&gt; &#xA;&lt;p&gt;To apply your own patch files using the provided scripts, you will need to put them in a &lt;code&gt;linux&amp;lt;VERSION&amp;gt;&amp;lt;PATCHLEVEL&amp;gt;-tkg-userpatches&lt;/code&gt; folder -- where &lt;em&gt;VERSION&lt;/em&gt; and &lt;em&gt;PATCHLEVEL&lt;/em&gt; are the kernel version and patch level, as specified in &lt;a href=&#34;https://github.com/torvalds/linux/raw/master/Makefile&#34;&gt;linux Makefile&lt;/a&gt;, the patch works on, &lt;em&gt;e.g&lt;/em&gt; &lt;code&gt;linux65-tkg-userpatches&lt;/code&gt; -- at the same level as the &lt;code&gt;PKGBUILD&lt;/code&gt; file, with the &lt;code&gt;.mypatch&lt;/code&gt; extension. The script will by default ask if you want to apply them, one by one. The option &lt;code&gt;_user_patches&lt;/code&gt; should be set to &lt;code&gt;true&lt;/code&gt; in the &lt;code&gt;customization.cfg&lt;/code&gt; file for this to work.&lt;/p&gt; &#xA;&lt;h3&gt;Install procedure&lt;/h3&gt; &#xA;&lt;p&gt;For all the supported linux distributions, &lt;code&gt;linux-tkg&lt;/code&gt; has to be cloned with &lt;code&gt;git&lt;/code&gt;. Since it keeps a clone of the kernel&#39;s sources within (&lt;code&gt;linux-src-git&lt;/code&gt;, created during the first build after a fresh clone), it is recommended to keep the cloned &lt;code&gt;linux-tkg&lt;/code&gt; folder and simply update it with &lt;code&gt;git pull&lt;/code&gt;, the install script does the necessary cleanup at every run.&lt;/p&gt; &#xA;&lt;h4&gt;Arch &amp;amp; derivatives&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/Frogging-Family/linux-tkg.git&#xA;cd linux-tkg&#xA;# Optional: edit the &#34;customization.cfg&#34; file&#xA;makepkg -si&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The script will use a slightly modified Arch config from the &lt;code&gt;linux-tkg-config&lt;/code&gt; folder, it can be changed through the &lt;code&gt;_configfile&lt;/code&gt; variable in &lt;code&gt;customization.cfg&lt;/code&gt;. The options selected at build-time are installed to &lt;code&gt;/usr/share/doc/$pkgbase/customization.cfg&lt;/code&gt;, where &lt;code&gt;$pkgbase&lt;/code&gt; is the package name.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the &lt;code&gt;base-devel&lt;/code&gt; package group is expected to be installed, see &lt;a href=&#34;https://wiki.archlinux.org/title/Makepkg&#34;&gt;here&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h4&gt;DEB (Debian, Ubuntu and derivatives) and RPM (Fedora, SUSE and derivatives) based distributions&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important notes:&lt;/strong&gt; An issue has been reported for Ubuntu where the stock kernel cannot boot properly any longer, the whereabouts are not entirely clear (only a single user reported that, see &lt;a href=&#34;https://github.com/Frogging-Family/linux-tkg/issues/436&#34;&gt;https://github.com/Frogging-Family/linux-tkg/issues/436&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The interactive &lt;code&gt;install.sh&lt;/code&gt; script will create, depending on the selected distro, &lt;code&gt;.deb&lt;/code&gt; or &lt;code&gt;.rpm&lt;/code&gt; packages, move them in the the subfolder &lt;code&gt;DEBS&lt;/code&gt; or &lt;code&gt;RPMS&lt;/code&gt; then prompts to install them with the distro&#39;s package manager.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/Frogging-Family/linux-tkg.git&#xA;cd linux-tkg&#xA;# Optional: edit the &#34;customization.cfg&#34; file&#xA;./install.sh install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Uninstalling custom kernels installed through the script has to be done manually. &lt;code&gt;install.sh&lt;/code&gt; can can help out with some useful information:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd path/to/linux-tkg&#xA;./install.sh uninstall-help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The script will use a slightly modified Arch config from the &lt;code&gt;linux-tkg-config&lt;/code&gt; folder, it can be changed through the &lt;code&gt;_configfile&lt;/code&gt; variable in &lt;code&gt;customization.cfg&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Generic install&lt;/h4&gt; &#xA;&lt;p&gt;The interactive &lt;code&gt;install.sh&lt;/code&gt; script can be used to perform a &#34;Generic&#34; install by choosing &lt;code&gt;Generic&lt;/code&gt; when prompted. It git clones the kernel tree in the &lt;code&gt;linux-src-git&lt;/code&gt; folder, patches the code and edits a &lt;code&gt;.config&lt;/code&gt; file in it. The commands to do are the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/Frogging-Family/linux-tkg.git&#xA;cd linux-tkg&#xA;# Optional: edit the &#34;customization.cfg&#34; file&#xA;./install.sh install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The script will compile the kernel then prompt before doing the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo cp -R . /usr/src/linux-tkg-${kernel_flavor}&#xA;cd /usr/src/linux-tkg-${kernel_flavor}&#xA;sudo make modules_install&#xA;sudo make install&#xA;sudo dracut --force --hostonly --kver $_kernelname $_dracut_options&#xA;sudo grub-mkconfig -o /boot/grub/grub.cfg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All the needed dependencies to patch, configure, compile or install the kernel are expected to be installed by the user beforehand.&lt;/li&gt; &#xA; &lt;li&gt;If you only want the script to patch the sources in &lt;code&gt;linux-src-git&lt;/code&gt;, you can use &lt;code&gt;./install.sh config&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;${kernel_flavor}&lt;/code&gt; is a default naming scheme but can be customized with the variable &lt;code&gt;_kernel_localversion&lt;/code&gt; in &lt;code&gt;customization.cfg&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;_dracut_options&lt;/code&gt; is a variable that can be changed in &lt;code&gt;customization.cfg&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The script uses Arch&#39;s &lt;code&gt;.config&lt;/code&gt; file as a base. A custom one can be provided through &lt;code&gt;_configfile&lt;/code&gt; in &lt;code&gt;customization.cfg&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The installed files will not be tracked by your package manager and uninstalling requires manual intervention. &lt;code&gt;./install.sh uninstall-help&lt;/code&gt; can help with useful information if your install procedure follows the &lt;code&gt;Generic&lt;/code&gt; approach.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Gentoo&lt;/h4&gt; &#xA;&lt;p&gt;The interactive &lt;code&gt;install.sh&lt;/code&gt; script supports Gentoo by following the same procedure as &lt;code&gt;Generic&lt;/code&gt;, symlinks the sources folder in &lt;code&gt;/usr/src/&lt;/code&gt; to &lt;code&gt;/usr/src/linux&lt;/code&gt;, then offers to do an &lt;code&gt;emerge @module-rebuild&lt;/code&gt; for convenience&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/Frogging-Family/linux-tkg.git&#xA;cd linux-tkg&#xA;# Optional: edit the &#34;customization.cfg&#34; file&#xA;./install.sh install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you&#39;re running openrc, you&#39;ll want to set &lt;code&gt;_configfile=&#34;running-kernel&#34;&lt;/code&gt; to use your current kernel&#39;s defconfig instead of Arch&#39;s. Else the resulting kernel won&#39;t boot.&lt;/li&gt; &#xA; &lt;li&gt;The script will prompt for using &lt;code&gt;llvm-libunwind&lt;/code&gt;, it can only work with the &lt;code&gt;llvm-libunwind&lt;/code&gt; &lt;code&gt;USE&lt;/code&gt; flag in &lt;code&gt;sys-devel/clang&lt;/code&gt; but it is experimental: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Manual intervention is needed on the &lt;code&gt;net-fs/samba&lt;/code&gt; EBUILD, see &lt;a href=&#34;https://bugs.gentoo.org/791349&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;The &lt;code&gt;-unwind&lt;/code&gt; &lt;code&gt;USE&lt;/code&gt; flag is needed in &lt;code&gt;app-emulation/wine*&lt;/code&gt; EBUILDs&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>