<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-30T01:33:24Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lamikr/rocm_sdk_builder</title>
    <updated>2024-05-30T01:33:24Z</updated>
    <id>tag:github.com,2024-05-30:/lamikr/rocm_sdk_builder</id>
    <link href="https://github.com/lamikr/rocm_sdk_builder" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ROCM SDK Builder&lt;/h1&gt; &#xA;&lt;h2&gt;Purpose&lt;/h2&gt; &#xA;&lt;p&gt;ROCM SDK Builder will provide an easy and customizable build and install of AMD ROCm machine learning environment for your Linux computer with the support for user level GPUs.&lt;/p&gt; &#xA;&lt;p&gt;In addition of the ROCm basic applications and libraries, the system will also install locally a version of tools and frameworks like python, pytorch, jupyter-notebook, onnxruntime, deepspeed that has been tested to work with rest of the system. SDK will be installed under /opt/rocm_sdk_&#xA; &lt;version&gt;&#xA;   directory.&#xA; &lt;/version&gt;&lt;/p&gt; &#xA;&lt;p&gt;Latest ROCM release supported is the ROCM 6.1.1 which also builds rocBLASLt, hibBLASLt and AMDMIGrapX as a newest components for pytorch. The usage of AMDMIGraphX has however not been tested yet.&lt;/p&gt; &#xA;&lt;p&gt;This project has been so far tested with following AMD GPUs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AMD RX 6800 (gfx1030)&lt;/li&gt; &#xA; &lt;li&gt;AMD RX 5700 (gfx1010)&lt;/li&gt; &#xA; &lt;li&gt;AMD Mobile m680i (gfx1035)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In configuration it&#39;s possible to select also other GPU&#39;s for build target. If you can test with these or other GPU&#39;s like AMD RX 6700 (gfx1031) or RX 7000 series of GPU&#39;s like RX 7800 (gfx1101) or RX 7900 (gfx1100) the feedback is more than wellcome.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lamikr/rocm_sdk_builder/master/docs/tutorial/pics/pytorch_amd_gpu_example.png&#34; alt=&#34;Pytorch with AMD GPU&#34; title=&#34;Pytorch with AMD GPU&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation Requirements&lt;/h2&gt; &#xA;&lt;p&gt;ROCM SDK Builder has been tested on Mageia 9, Fedora 39 and Ubuntu 230.10 Linux distributions.&lt;/p&gt; &#xA;&lt;p&gt;Build system itself has been written with bash shell language to limit external dependencies to minimal but the applications build and installed will naturally have their own build time dependencies.&lt;/p&gt; &#xA;&lt;p&gt;On Mageia, Fedora and Ubuntu these dependencies, the build time dependencies can be installed by executing a script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# ./install_deps.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To reduce the run-time dependency variance between different distributions, the build system will itself build and install standalone python 3.9 which seems to be pretty trouble-free version with the currently used pytorch rocm-components.&lt;/p&gt; &#xA;&lt;p&gt;You need to also to use git configure command to set git username and email address, otherwise the &#39;git am&#39; command that the project uses for applying patches on top of the upstream code versions will fail. This can be done in a following way.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# git config --global user.name &#34;John Doe&#34;&#xA;# git config --global user.email johndoe@example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ROCM SDK Builder will require about 130 GB of free space to build the newest rocm 6.1.1 version. This is mostly divided in a following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- src_projects directory, for source code, about 30 GB&#xA;- builddir directory for temporarily files, about 75 GB&#xA;- /opt/rocm_sdk_611, install directory for the sdk, about 20 GB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the build is ready, &#39;builddir&#39; and &#39;src_projects&#39; directories could be deleted to free more space. As the downloading the sources from scratch can take some, I recommend keeping at least the source directory.&lt;/p&gt; &#xA;&lt;h2&gt;Installation Directory and Environment Variables&lt;/h2&gt; &#xA;&lt;p&gt;ROCM SDK Builder will by default install the SDK to /opt/rocm_sdk_&#xA; &lt;version&gt;&#xA;   directory. To set the paths and other environment variables required to execute the applications installed by the SDK can be loaded by executing a command:&#xA; &lt;/version&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# source /opt/rock_sdk_&amp;lt;version&amp;gt;/bin/env_rocm.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that this command needs to be executed only once for each bash terminal session evenghouth we set it up on exery example below.&lt;/p&gt; &#xA;&lt;h2&gt;How to Build and Install ROCm SDK&lt;/h2&gt; &#xA;&lt;p&gt;Following commands will download rocm sdk 6.1.1 project sources and then build and install the rocm_sdk version 6.1.1 to /opt/rocm_sdk_611 folder.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# git clone https://github.com/lamikr/rocm_sdk_builder.git&#xA;# cd rocm_sdk_builder&#xA;# git checkout releases/rocm_sdk_builder_611&#xA;# ./babs.sh -i&#xA;# ./babs.sh -b&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;SDK will pop-up the GPU selection fro the SDK build targets before the build will start and selections will be stored to build_cfg.user file. Configuration can also be done afterwards with ./babs.sh -c command. Note that build-configuration change does not automatically cause a rebuild of already builded projects. To force that you need to remove projects you want to rebuild from builddir folder. To force rebuilding everything you simply remove the &#39;builddir&#39; directoty completely.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lamikr/rocm_sdk_builder/master/docs/tutorial/pics/rocm_sdk_gpu_selection.png&#34; alt=&#34;GPU Selection for ROCm SDK Build Target&#34; title=&#34;GPU Selection for ROCm SDK Build Target&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Test the installed SDK&lt;/h1&gt; &#xA;&lt;h2&gt;Setup the rocm_sdk&lt;/h2&gt; &#xA;&lt;p&gt;ROCm SDK builder environment needs to be first set to environment variables like path with following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# source /opt/rocm_sdk_611/bin/env_rocm.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that this command needs to be executed only once for each bash terminal session evenghouth we set it up on exery example below.&lt;/p&gt; &#xA;&lt;h2&gt;Verify your GPU with ROCM SDK&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;# source /opt/rocm_sdk_611/bin/env_rocm.sh&#xA;# rocminfo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command should list both your CPU and AMD GPU as an agent and give information related to their capabilities.&lt;/p&gt; &#xA;&lt;h2&gt;Test Pytorch install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;# source /opt/rocm_sdk_611/bin/env_rocm.sh&#xA;# cd /opt/rocm_sdk_611/docs/examples/pytorch&#xA;# ./run_pytorch_gpu_simple_test.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Test Jupyter-notebook usage with Pytorch.&lt;/h2&gt; &#xA;&lt;p&gt;Following command will test that jupyter-notebook opens properly and show information about installed pytorch version and your GPU. (Note that AMD gpus are also handled as a cuda GPU on pytorch language)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# source /opt/rocm_sdk_611/bin/env_rocm.sh&#xA;# cd /opt/rocm_sdk_611/docs/examples/pytorch&#xA;# jupyter-notebook pytorch_amd_gpu_intro.ipynb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Test Pytorch MIGraphX integration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;# source /opt/rocm_sdk_611/bin/env_rocm.sh&#xA;# cd /opt/rocm_sdk_611/docs/examples/pytorch&#xA;# python test_torch_migraphx_resnet50.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Test MIGraphX&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;# source /opt/rocm_sdk_611/bin/env_rocm.sh&#xA;# cd /opt/rocm_sdk_611/docs/examples/migraphx&#xA;# ./test_migraphx_install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Test ONNXRuntime&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;# source /opt/rocm_sdk_611/bin/env_rocm.sh&#xA;# cd /opt/rocm_sdk_611/docs/examples/onnxruntime&#xA;# test_onnxruntime_providers.py*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should printout: [&#39;MIGraphXExecutionProvider&#39;, &#39;ROCMExecutionProvider&#39;, &#39;CPUExecutionProvider&#39;]&lt;/p&gt; &#xA;&lt;h2&gt;Test HIPCC compiler&lt;/h2&gt; &#xA;&lt;p&gt;Following code shows how to transfer data to GPU and back by using hipcc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# source /opt/rocm_sdk_611/bin/env_rocm.sh&#xA;# cd /opt/rocm_sdk_611/docs/examples/hipcc/hello_world&#xA;# ./build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Test OpenCL Integration&lt;/h2&gt; &#xA;&lt;p&gt;Following code printouts some information about OpenCL platform and devices found&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# source /opt/rocm_sdk_611/bin/env_rocm.sh&#xA;# docs/examples/opencl/check_opencl_caps&#xA;# make&#xA;# ./check_opencl_caps&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Customizing the SDK Build&lt;/h1&gt; &#xA;&lt;p&gt;Here is shortish but more detailed information how the SDK will work and can be modified.&lt;/p&gt; &#xA;&lt;h2&gt;Selecting the GPUs for which to build the SDK&lt;/h2&gt; &#xA;&lt;p&gt;GPU&#39;s can be selected with ./babs -c option which opens checkbox and selects results to build_cfg.user file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./babs.sh -c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;List of supported GPU&#39;s should be relatively easy to add, at the moment I have only added support for the one I have been able to test by myself. At some point, I had also the support working for older AMD G2400 but I have not had time to integrate those changes to newer rocm sdk. (Had it working for rocm sdk 3.0.0)&lt;/p&gt; &#xA;&lt;h2&gt;Adding New Projects to SDK for build and install&lt;/h2&gt; &#xA;&lt;p&gt;New projects can be added to builder by modifying files in binfo directory.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;First you need to create the &amp;lt;build_order_number&amp;gt;_&#xA;  &lt;name&gt;&#xA;   .binfo file where you specify details for the project like source code location, configure flags and build commands. By default the build system will use cmake and make commands for building the projects, but you can override those by supplying your BINFO array commands if the projects standard install command needs some customization. You can check details for those from the existing .binfo files but principle is following:&#xA;  &lt;/name&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;BINFO_APP_POST_INSTALL_CMD_ARRAY=(&#xA;    &#34;if [ ! -e ${INSTALL_DIR_PREFIX_SDK_ROOT}/lib/cmake ]; then mkdir -p ${INSTALL_DIR_PREFIX_SDK_ROOT}/lib/cmake; fi&#34;&#xA;    &#34;if [ ! -e ${INSTALL_DIR_PREFIX_SDK_ROOT}/lib/libhsakmt.so ]; then ln -s ${INSTALL_DIR_PREFIX_SDK_ROOT}/lib/libhsakmt.so.1 ${INSTALL_DIR_PREFIX_SDK_ROOT}/lib/libhsakmt.so; fi&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Then you will need to add your &amp;lt;build_order_number&amp;gt;_&#xA;  &lt;name&gt;&#xA;   .binfo file to binfo/binfo_list.sh file.&#xA;  &lt;/name&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ROCM SDK Builder Major Components&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;babs.sh, build/build.sh and build/binfo_utils.sh provides the framework for the build system and can be used more or less without modifications also on other projects. You can get help for available babs (acronym babs ain&#39;t patch build system)) commands with the &#39;-h&#39; argument.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;[lamikr@localhost rocm_sdk_builder (master)]$ ./babs.sh -h&#xA;babs (babs ain&#39;t patch build system)&#xA;&#xA;usage:&#xA;-h or --help:           Show this help&#xA;-i or --init:           Download git repositories listed in binfo directory to &#39;src_projects&#39; directory&#xA;                        and apply all patches from &#39;patches&#39; directory.&#xA;-ap or --apply_patches: Scan &#39;patches/rocm-version&#39; directory and apply each patch&#xA;                        on top of the repositories in &#39;src_projects&#39; directory.&#xA;-co or --checkout:      Checkout version listed in binfo files for each git repository in src_projects directory.&#xA;                        Apply of patches of top of the checked out version needs to be performed separately with &#39;-ap&#39; command.&#xA;-f or --fetch:          Fetch latest source code for all repositories.&#xA;                        Checkout of fetched sources needs to be performed separately with &#39;-co&#39; command.&#xA;                        Possible subprojects needs to be fetched separately with &#39;-fs&#39; command. (after &#39;-co&#39; and &#39;-ap&#39;)&#xA;-fs or --fetch_submod:  Fetch and checkout git submodules for all repositories which have them.&#xA;-b or --build:          Start or continue the building of rocm_sdk.&#xA;                        Build files are located under &#39;builddir&#39; directory and install is done under &#39;/opt/rocm_sdk_version&#39; directory.&#xA;-v or --version:        Show babs build system version information&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;binfo folder contains the recipes for each projects which is wanted to be build. These recipes does not have support for listing the dependencies by purpose and insted the build order is managed in binfo/binfo_list.sh file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;patches directory contains the patches that are wanted to add on top of the each project that is downloaded from their upstream repository&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;src_projects is the directory under each sub-project source code is downloaded from internet.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;builddir is the location where each project is build before install and work as a temporarily work environment. Build system can be cleaned to force the rebuild either by removing individual projects from builddir folder or by removing the whole projecs. More detailed specific tuning is also possible by deleting build-phase result files. (builddir/project/.result_preconfig/config/postconfig/build/install/postinstall)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Rebuilding Individual Projects&lt;/h2&gt; &#xA;&lt;p&gt;Rebuilding of individual projects can be triggered in two different ways if you have made for example some changes to project source code under the &#39;src_projects&#39; directory: Note that builder will always build projects in an order listed in the binfo/binfo_list.sh file.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;deleting the project specific directory from the builddir&lt;/li&gt; &#xA; &lt;li&gt;removing the .result_* files under the build directory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# rm -rf builddir/037_magma (would trigger to re-run all build phases)&#xA;# rm -f builddir/037_magma/.result_install (would trigger to re-run only the install phase)&#xA;# ./babs.sh -b&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Additional build commands&lt;/h2&gt; &#xA;&lt;p&gt;./babs.sh has also following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# ./babs.sh -co (checkouts the sources back to basic level for all projects)&#xA;# ./babs.sh -ap (apply patches to checked sources for all projects)&#xA;# ./babs.sh -f (fetch latest sources for all projects)&#xA;# ./babsh.sh -fs (fetch latest sources for all projects all submodules)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;GPU benchmarks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Very simple benchmark is available on by executing command:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;# source /opt/rocm_sdk_611/bin/env_rocm.sh&#xA;# jupyter-notebook /opt/rocm_sdk_611/docs/examples/pytorch/pytorch_simple_cpu_vs_gpu_benchmark.ipynb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lamikr/rocm_sdk_builder/master/docs/tutorial/pics/pytorch_simple_cpu_vs_gpu_benchmark_25p.png&#34; alt=&#34;Pytorch simple CPU vs GPU benchmark&#34; title=&#34;Pytorch simple CPU vs GPU benchmark&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;more extensive GPU benchmark originally used with NVIDIA gpu&#39;s is available here. I have made some modifications to original benchmarks to update it to run with the newer pytorch and python numpy.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;# git clone https://github.com/lamikr/pytorch-gpu-benchmark&#xA;# cd pytorch-gpu-benchmark&#xA;# source /opt/rocm_sdk_/bin/env_rocm.sh&#xA;# ./test_with_torchvision_013.sh script&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Copyright (C) 2024 by Mika Laitio &lt;a href=&#34;mailto:lamikr@gmail.com&#34;&gt;lamikr@gmail.com&lt;/a&gt; Some of the files in this project are licensed with the LGPL 2.1 and some other with the COFFEEWARE license.&lt;br&gt; See the COPYING file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jlesage/docker-baseimage-gui</title>
    <updated>2024-05-30T01:33:24Z</updated>
    <id>tag:github.com,2024-05-30:/jlesage/docker-baseimage-gui</id>
    <link href="https://github.com/jlesage/docker-baseimage-gui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A minimal docker baseimage to ease creation of X graphical application containers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;A minimal docker baseimage to ease creation of X graphical application containers&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jlesage/docker-baseimage-gui/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/jlesage/docker-baseimage-gui.svg?logo=github&amp;amp;style=for-the-badge&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jlesage/docker-baseimage-gui/actions/workflows/build-baseimage.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/jlesage/docker-baseimage-gui/build-baseimage.yml?logo=github&amp;amp;branch=master&amp;amp;style=for-the-badge&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://paypal.me/JocelynLeSage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-green.svg?style=for-the-badge&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a docker baseimage that can be used to create containers able to run any X application on a headless server very easily. The application&#39;s GUI is accessed through a modern web browser (no installation or configuration needed on the client side) or via any VNC client.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Content&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#images&#34;&gt;Images&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#content&#34;&gt;Content&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#versioning&#34;&gt;Versioning&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#tags&#34;&gt;Tags&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#using-the-baseimage&#34;&gt;Using the Baseimage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#selecting-a-baseimage&#34;&gt;Selecting a Baseimage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#container-startup-sequence&#34;&gt;Container Startup Sequence&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#container-shutdown-sequence&#34;&gt;Container Shutdown Sequence&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#environment-variables&#34;&gt;Environment Variables&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#public-environment-variables&#34;&gt;Public Environment Variables&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#internal-environment-variables&#34;&gt;Internal Environment Variables&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#addingremoving-internal-environment-variables&#34;&gt;Adding/Removing Internal Environment Variables&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#availability&#34;&gt;Availability&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#docker-secrets&#34;&gt;Docker Secrets&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#ports&#34;&gt;Ports&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#usergroup-ids&#34;&gt;User/Group IDs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#locales&#34;&gt;Locales&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#accessing-the-gui&#34;&gt;Accessing the GUI&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#security&#34;&gt;Security&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#ssvnc&#34;&gt;SSVNC&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#certificates&#34;&gt;Certificates&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#vnc-password&#34;&gt;VNC Password&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#dh-parameters&#34;&gt;DH Parameters&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#initialization-scripts&#34;&gt;Initialization Scripts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#finalization-scripts&#34;&gt;Finalization Scripts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#services&#34;&gt;Services&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#service-group&#34;&gt;Service Group&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#default-service&#34;&gt;Default Service&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#service-readiness&#34;&gt;Service Readiness&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#configuration-directory&#34;&gt;Configuration Directory&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#applications-data-directories&#34;&gt;Application&#39;s Data Directories&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#container-log&#34;&gt;Container Log&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#logrotate&#34;&gt;Logrotate&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#log-monitor&#34;&gt;Log Monitor&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#notification-definition&#34;&gt;Notification Definition&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#notification-backend&#34;&gt;Notification Backend&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#adding-glibc&#34;&gt;Adding glibc&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#helpers&#34;&gt;Helpers&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#addingremoving-packages&#34;&gt;Adding/Removing Packages&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#modifying-files-with-sed&#34;&gt;Modifying Files With Sed&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#evaluating-boolean-value&#34;&gt;Evaluating Boolean Value&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#taking-ownership-of-a-directory&#34;&gt;Taking Ownership of a Directory&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#setting-interval-environment-variable&#34;&gt;Setting Interval Environment Variable&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#application-icon&#34;&gt;Application Icon&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#dark-mode&#34;&gt;Dark Mode&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#gtk&#34;&gt;GTK&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#qt&#34;&gt;QT&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#tips-and-best-practices&#34;&gt;Tips and Best Practices&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#do-not-modify-baseimage-content&#34;&gt;Do Not Modify Baseimage Content&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#default-configuration-files&#34;&gt;Default Configuration Files&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#the-home-variable&#34;&gt;The $HOME Variable&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#referencing-linux-usergroup&#34;&gt;Referencing Linux User/Group&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#using-rootfs-directory&#34;&gt;Using rootfs Directory&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#maximizing-only-the-main-window&#34;&gt;Maximizing Only the Main Window&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#adaptations-from-the-3x-version&#34;&gt;Adaptations from the 3.x Version&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Images&lt;/h2&gt; &#xA;&lt;p&gt;Different docker images are available:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Base Distribution&lt;/th&gt; &#xA;   &lt;th&gt;Docker Image Base Tag&lt;/th&gt; &#xA;   &lt;th&gt;Size&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://alpinelinux.org&#34;&gt;Alpine 3.14&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;alpine-3.14&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/jlesage/baseimage-gui/alpine-3.14-v4?style=for-the-badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://alpinelinux.org&#34;&gt;Alpine 3.15&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;alpine-3.15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/jlesage/baseimage-gui/alpine-3.15-v4?style=for-the-badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://alpinelinux.org&#34;&gt;Alpine 3.16&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;alpine-3.16&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/jlesage/baseimage-gui/alpine-3.16-v4?style=for-the-badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://alpinelinux.org&#34;&gt;Alpine 3.17&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;alpine-3.17&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/jlesage/baseimage-gui/alpine-3.17-v4?style=for-the-badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://alpinelinux.org&#34;&gt;Alpine 3.18&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;alpine-3.18&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/jlesage/baseimage-gui/alpine-3.18-v4?style=for-the-badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://alpinelinux.org&#34;&gt;Alpine 3.19&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;alpine-3.19&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/jlesage/baseimage-gui/alpine-3.19-v4?style=for-the-badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.debian.org/releases/buster/&#34;&gt;Debian 10&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;debian-10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/jlesage/baseimage-gui/debian-10-v4?style=for-the-badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.debian.org/releases/bullseye/&#34;&gt;Debian 11&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;debian-11&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/jlesage/baseimage-gui/debian-11-v4?style=for-the-badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://releases.ubuntu.com/16.04/&#34;&gt;Ubuntu 16.04 LTS&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ubuntu-16.04&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/jlesage/baseimage-gui/ubuntu-16.04-v4?style=for-the-badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://releases.ubuntu.com/18.04/&#34;&gt;Ubuntu 18.04 LTS&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ubuntu-18.04&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/jlesage/baseimage-gui/ubuntu-18.04-v4?style=for-the-badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://releases.ubuntu.com/20.04/&#34;&gt;Ubuntu 20.04 LTS&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ubuntu-20.04&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/jlesage/baseimage-gui/ubuntu-20.04-v4?style=for-the-badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://releases.ubuntu.com/22.04/&#34;&gt;Ubuntu 22.04 LTS&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ubuntu-22.04&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/jlesage/baseimage-gui/ubuntu-22.04-v4?style=for-the-badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Content&lt;/h3&gt; &#xA;&lt;p&gt;Here are the main components of the baseimage:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An init system.&lt;/li&gt; &#xA; &lt;li&gt;A process supervisor, with proper PID 1 functionality (proper reaping of processes).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tigervnc.org&#34;&gt;TigerVNC&lt;/a&gt;, a X server with an integrated VNC server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://openbox.org&#34;&gt;Openbox&lt;/a&gt;, a window manager.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/novnc/noVNC&#34;&gt;noVNC&lt;/a&gt;, a HTML5 VNC client.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nginx.com&#34;&gt;NGINX&lt;/a&gt;, a high-performance HTTP server.&lt;/li&gt; &#xA; &lt;li&gt;Useful tools to ease container building.&lt;/li&gt; &#xA; &lt;li&gt;Environment to better support dockerized applications.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Versioning&lt;/h3&gt; &#xA;&lt;p&gt;Images are versioned. Version number follows the &lt;a href=&#34;https://semver.org&#34;&gt;semantic versioning&lt;/a&gt;. The version format is &lt;code&gt;MAJOR.MINOR.PATCH&lt;/code&gt;, where an increment of the:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;MAJOR&lt;/code&gt; version indicates that a backwards-incompatible change has been done.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MINOR&lt;/code&gt; version indicates that functionality has been added in a backwards-compatible manner.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PATCH&lt;/code&gt; version indicates that a bug fix has been done in a backwards-compatible manner.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tags&lt;/h3&gt; &#xA;&lt;p&gt;For each distribution-specific image, multiple tags are available:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tag&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;distro-vX.Y.Z&lt;/td&gt; &#xA;   &lt;td&gt;Exact version of the image.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;distro-vX.Y&lt;/td&gt; &#xA;   &lt;td&gt;Latest version of a specific minor version of the image.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;distro-vX&lt;/td&gt; &#xA;   &lt;td&gt;Latest version of a specific major version of the image.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;Dockerfile&lt;/code&gt; for your application can be very simple, as only three things are required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Instructions to install the application.&lt;/li&gt; &#xA; &lt;li&gt;A script that starts the application (stored at &lt;code&gt;/startapp.sh&lt;/code&gt; in container).&lt;/li&gt; &#xA; &lt;li&gt;The name of the application.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is an example of a docker file that would be used to run the &lt;code&gt;xterm&lt;/code&gt; terminal.&lt;/p&gt; &#xA;&lt;p&gt;In &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;# Pull base image.&#xA;FROM jlesage/baseimage-gui:alpine-3.15-v4&#xA;&#xA;# Install xterm.&#xA;RUN add-pkg xterm&#xA;&#xA;# Copy the start script.&#xA;COPY startapp.sh /startapp.sh&#xA;&#xA;# Set the name of the application.&#xA;RUN set-cont-env APP_NAME &#34;Xterm&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In &lt;code&gt;startapp.sh&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/sh&#xA;exec /usr/bin/xterm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, build your docker image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build -t docker-xterm .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And run it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -p 5800:5800 -p 5900:5900 docker-xterm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should be able to access the xterm GUI by opening in a web browser:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://[HOST IP ADDR]:5800&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using the Baseimage&lt;/h2&gt; &#xA;&lt;h3&gt;Selecting a Baseimage&lt;/h3&gt; &#xA;&lt;p&gt;Using a baseimage based on Alpine Linux is the recommended choice. Not only because of its small size, but also because Alpine Linux is a distribution based on &lt;a href=&#34;https://www.musl-libc.org&#34;&gt;musl&lt;/a&gt; and &lt;a href=&#34;https://busybox.net&#34;&gt;BusyBox&lt;/a&gt; that is designed for security, simplicity and resource efficiency.&lt;/p&gt; &#xA;&lt;p&gt;However, using this baseimage to integrate an application not part of the Alpine&#39;s software repository or without its source code available may be harder. This is because Alpine Linux uses &lt;a href=&#34;https://www.musl-libc.org&#34;&gt;musl&lt;/a&gt; C standard library instead of GNU C library (&lt;a href=&#34;https://www.gnu.org/software/libc/&#34;&gt;glibc&lt;/a&gt;) that most applications are built against. Compatibility between these two libraries is very limited.&lt;/p&gt; &#xA;&lt;p&gt;Integrating glibc binaries often require to add glibc to the image. See the &lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#adding-glibc&#34;&gt;Adding glibc&lt;/a&gt; section for more details.&lt;/p&gt; &#xA;&lt;p&gt;Else, &lt;code&gt;Debian&lt;/code&gt; and &lt;code&gt;Ubuntu&lt;/code&gt; images are well known Linux distributions that provide great compatibility with existing applications.&lt;/p&gt; &#xA;&lt;h3&gt;Container Startup Sequence&lt;/h3&gt; &#xA;&lt;p&gt;When the container is starting, the following steps are performed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The init process (&lt;code&gt;/init&lt;/code&gt;) is invoked.&lt;/li&gt; &#xA; &lt;li&gt;Internal environment variables are loaded from &lt;code&gt;/etc/cont-env.d&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Initialization scripts under &lt;code&gt;/etc/cont-init.d&lt;/code&gt; are executed in alphabetical order.&lt;/li&gt; &#xA; &lt;li&gt;Control is given to the process supervisor.&lt;/li&gt; &#xA; &lt;li&gt;The service group &lt;code&gt;/etc/services.d/default&lt;/code&gt; is loaded, along with its dependencies.&lt;/li&gt; &#xA; &lt;li&gt;Services are started, in proper order.&lt;/li&gt; &#xA; &lt;li&gt;Container is now fully started.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Container Shutdown Sequence&lt;/h3&gt; &#xA;&lt;p&gt;There are two ways a container can shutdown:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;When the implemented application terminates.&lt;/li&gt; &#xA; &lt;li&gt;When Docker performs a shutdown of the container (e.g via the &lt;code&gt;docker stop&lt;/code&gt; command).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In both cases, the shutdown sequence is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All services are terminated, in reverse order.&lt;/li&gt; &#xA; &lt;li&gt;If some processes are still alive, a SIGTERM is sent to everyone.&lt;/li&gt; &#xA; &lt;li&gt;After 5 seconds, all remaining processes are forcefully terminated via the SIGKILL signal.&lt;/li&gt; &#xA; &lt;li&gt;The process supervisor execute the exit script (&lt;code&gt;/etc/services.d/exit&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;The exit script executes, in alphabetical order, finalization scripts defined under &lt;code&gt;/etc/cont-finish.d/&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Container is full stopped.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Environment Variables&lt;/h3&gt; &#xA;&lt;p&gt;Environment variables are very useful to customize the behavior of the container and its application.&lt;/p&gt; &#xA;&lt;p&gt;There are two types of environment variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Public&lt;/strong&gt;: These variables are targeted to people using the container. They provide a way to configure it. They are declared in the &lt;code&gt;Dockerfile&lt;/code&gt;, via the &lt;code&gt;ENV&lt;/code&gt; instruction. Their value can be set by users during the creation of the container, via the &lt;code&gt;-e &#34;&amp;lt;VAR&amp;gt;=&amp;lt;VALUE&amp;gt;&#34;&lt;/code&gt; argument of the &lt;code&gt;docker run&lt;/code&gt; command. Also, many Docker container management systems use these variables to automatically provide configuration parameters to the user.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Internal&lt;/strong&gt;: These variables are the ones that don&#39;t need to be exposed to users. They are useful for the application itself, but are not intended to be changed by users.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If a variable is defined as both an internal and public one, the value of the public variable takes precedence.&lt;/p&gt; &#xA;&lt;h4&gt;Public Environment Variables&lt;/h4&gt; &#xA;&lt;p&gt;The following public environment variables are provided by the baseimage:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;USER_ID&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ID of the user the application runs as. See &lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#usergroup-ids&#34;&gt;User/Group IDs&lt;/a&gt; to better understand when this should be set.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1000&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GROUP_ID&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ID of the group the application runs as. See &lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#usergroup-ids&#34;&gt;User/Group IDs&lt;/a&gt; to better understand when this should be set.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1000&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SUP_GROUP_IDS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Comma-separated list of supplementary group IDs of the application.&lt;/td&gt; &#xA;   &lt;td&gt;(no value)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;UMASK&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Mask that controls how permissions are set for newly created files and folders. The value of the mask is in octal notation. By default, the default umask value is &lt;code&gt;0022&lt;/code&gt;, meaning that newly created files and folders are readable by everyone, but only writable by the owner. See the online umask calculator at &lt;a href=&#34;http://wintelguy.com/umask-calc.pl&#34;&gt;http://wintelguy.com/umask-calc.pl&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0022&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;LANG&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set the &lt;a href=&#34;https://en.wikipedia.org/wiki/Locale_(computer_software)&#34;&gt;locale&lt;/a&gt;, which defines the application&#39;s language, &lt;strong&gt;if supported&lt;/strong&gt;. Format of the locale is &lt;code&gt;language[_territory][.codeset]&lt;/code&gt;, where language is an &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes&#34;&gt;ISO 639 language code&lt;/a&gt;, territory is an &lt;a href=&#34;https://en.wikipedia.org/wiki/ISO_3166-1#Current_codes&#34;&gt;ISO 3166 country code&lt;/a&gt; and codeset is a character set, like &lt;code&gt;UTF-8&lt;/code&gt;. For example, Australian English using the UTF-8 encoding is &lt;code&gt;en_AU.UTF-8&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;en_US.UTF-8&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;TZ&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/List_of_tz_database_time_zones&#34;&gt;TimeZone&lt;/a&gt; used by the container. Timezone can also be set by mapping &lt;code&gt;/etc/localtime&lt;/code&gt; between the host and the container.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Etc/UTC&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;KEEP_APP_RUNNING&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When set to &lt;code&gt;1&lt;/code&gt;, the application will be automatically restarted when it crashes or terminates.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;APP_NICENESS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Priority at which the application should run. A niceness value of -20 is the highest priority and 19 is the lowest priority. The default niceness value is 0. &lt;strong&gt;NOTE&lt;/strong&gt;: A negative niceness (priority increase) requires additional permissions. In this case, the container should be run with the docker option &lt;code&gt;--cap-add=SYS_NICE&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;INSTALL_PACKAGES&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Space-separated list of packages to install during the startup of the container. Packages are installed from the repository of the Linux distribution this container is based on. &lt;strong&gt;ATTENTION&lt;/strong&gt;: Container functionality can be affected when installing a package that overrides existing container files (e.g. binaries).&lt;/td&gt; &#xA;   &lt;td&gt;(no value)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PACKAGES_MIRROR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Mirror of the repository to use when installing packages.&lt;/td&gt; &#xA;   &lt;td&gt;(no value)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CONTAINER_DEBUG&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set to &lt;code&gt;1&lt;/code&gt; to enable debug logging.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;DISPLAY_WIDTH&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Width (in pixels) of the application&#39;s window.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1920&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;DISPLAY_HEIGHT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Height (in pixels) of the application&#39;s window.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1080&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;DARK_MODE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When set to &lt;code&gt;1&lt;/code&gt;, dark mode is enabled for the application.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SECURE_CONNECTION&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When set to &lt;code&gt;1&lt;/code&gt;, an encrypted connection is used to access the application&#39;s GUI (either via a web browser or VNC client). See the &lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#security&#34;&gt;Security&lt;/a&gt; section for more details.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SECURE_CONNECTION_VNC_METHOD&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Method used to perform the secure VNC connection. Possible values are &lt;code&gt;SSL&lt;/code&gt; or &lt;code&gt;TLS&lt;/code&gt;. See the &lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#security&#34;&gt;Security&lt;/a&gt; section for more details.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;SSL&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SECURE_CONNECTION_CERTS_CHECK_INTERVAL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Interval, in seconds, at which the system verifies if web or VNC certificates have changed. When a change is detected, the affected services are automatically restarted. A value of &lt;code&gt;0&lt;/code&gt; disables the check.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;60&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;WEB_LISTENING_PORT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Port used by the web server to serve the UI of the application. This port is used internally by the container and it is usually not required to be changed. By default, a container is created with the default bridge network, meaning that, to be accessible, each internal container port must be mapped to an external port (using the &lt;code&gt;-p&lt;/code&gt; or &lt;code&gt;--publish&lt;/code&gt; argument). However, if the container is created with another network type, changing the port used by the container might be useful to prevent conflict with other services/containers. &lt;strong&gt;NOTE&lt;/strong&gt;: a value of &lt;code&gt;-1&lt;/code&gt; disables listening, meaning that the application&#39;s UI won&#39;t be accessible over HTTP/HTTPs.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;5800&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;VNC_LISTENING_PORT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Port used by the VNC server to serve the UI of the application. This port is used internally by the container and it is usually not required to be changed. By default, a container is created with the default bridge network, meaning that, to be accessible, each internal container port must be mapped to an external port (using the &lt;code&gt;-p&lt;/code&gt; or &lt;code&gt;--publish&lt;/code&gt; argument). However, if the container is created with another network type, changing the port used by the container might be useful to prevent conflict with other services/containers. &lt;strong&gt;NOTE&lt;/strong&gt;: a value of &lt;code&gt;-1&lt;/code&gt; disables listening, meaning that the application&#39;s UI won&#39;t be accessible over VNC.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;5900&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;VNC_PASSWORD&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Password needed to connect to the application&#39;s GUI. See the &lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#vnc-password&#34;&gt;VNC Password&lt;/a&gt; section for more details.&lt;/td&gt; &#xA;   &lt;td&gt;(no value)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ENABLE_CJK_FONT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When set to &lt;code&gt;1&lt;/code&gt;, open-source computer font &lt;code&gt;WenQuanYi Zen Hei&lt;/code&gt; is installed. This font contains a large range of Chinese/Japanese/Korean characters.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Internal Environment Variables&lt;/h4&gt; &#xA;&lt;p&gt;The following internal environment variables are provided by the baseimage:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;APP_NAME&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Name of the implemented application.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;DockerApp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;APP_VERSION&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Version of the implemented application.&lt;/td&gt; &#xA;   &lt;td&gt;(no value)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;DOCKER_IMAGE_VERSION&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Version of the Docker image that implements the application.&lt;/td&gt; &#xA;   &lt;td&gt;(no value)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;DOCKER_IMAGE_PLATFORM&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Platform (OS / CPU architecture) of the Docker image that implements the application.&lt;/td&gt; &#xA;   &lt;td&gt;(no value)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;HOME&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Home directory.&lt;/td&gt; &#xA;   &lt;td&gt;(no value)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Defines the base directory relative to which user specific configuration files should be stored.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/config/xdg/config&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;XDG_DATA_HOME&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Defines the base directory relative to which user specific data files should be stored.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/config/xdg/data&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;XDG_CACHE_HOME&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Defines the base directory relative to which user specific non-essential data files should be stored.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/config/xdg/cache&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;TAKE_CONFIG_OWNERSHIP&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When set to &lt;code&gt;0&lt;/code&gt;, ownership of the content of the &lt;code&gt;/config&lt;/code&gt; directory is not taken during startup of the container.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;INSTALL_PACKAGES_INTERNAL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Space-separated list of packages to install during the startup of the container. Packages are installed from the repository of the Linux distribution this container is based on.&lt;/td&gt; &#xA;   &lt;td&gt;(no value)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SUP_GROUP_IDS_INTERNAL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Comma-separated list of supplementary group IDs of the application. These are merged with the ones that might be supplied by &lt;code&gt;SUP_GROUP_IDS&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;(no value)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Adding/Removing Internal Environment Variables&lt;/h4&gt; &#xA;&lt;p&gt;Internal environment variables are defined by adding a file to &lt;code&gt;/etc/cont-env.d/&lt;/code&gt; inside the container, where the name of the file is the name of the variable and its value is defined by the content of the file.&lt;/p&gt; &#xA;&lt;p&gt;If the file has execute permission, the init process will execute the program and the value of the environment variable is expected to be printed to its standard output.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If the program exits with the return code &lt;code&gt;100&lt;/code&gt;, the environment variable is not set (this is different than being set with an empty value).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Any output to stderr performed by the program is redirected to the container&#39;s log.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The helper &lt;code&gt;set-cont-env&lt;/code&gt; can be used to set internal environment variables from the Dockerfile.&lt;/p&gt; &#xA;&lt;h4&gt;Availability&lt;/h4&gt; &#xA;&lt;p&gt;Since public environment variables are defined during the creation of the container, they are always available to all your scripts and services, as soon as the container starts.&lt;/p&gt; &#xA;&lt;p&gt;For internal environment variables, they first need to be loaded during the startup of the container before they can be used. Since this is done before running init scripts and services, availability should not be an issue.&lt;/p&gt; &#xA;&lt;h4&gt;Docker Secrets&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/engine/swarm/secrets/&#34;&gt;Docker secrets&lt;/a&gt; is a functionality available to swarm services that offers a secure way to store sensitive information such as username, passwords, etc.&lt;/p&gt; &#xA;&lt;p&gt;This baseimage automatically exports, as environment variables, Docker secrets that follow this naming convention:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CONT_ENV_&amp;lt;environment variable name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, for a secret named &lt;code&gt;CONT_ENV_MY_PASSWORD&lt;/code&gt;, the environment variable &lt;code&gt;MY_PASSWORD&lt;/code&gt; is created, with its content matching the one of the secret.&lt;/p&gt; &#xA;&lt;h3&gt;Ports&lt;/h3&gt; &#xA;&lt;p&gt;Here is the list of ports used by the baseimage. With a container using the default bridge network, these ports can be mapped to the host via the &lt;code&gt;-p &amp;lt;HOST_PORT&amp;gt;:&amp;lt;CONTAINER_PORT&amp;gt;&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Port&lt;/th&gt; &#xA;   &lt;th&gt;Mapping to host&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5800&lt;/td&gt; &#xA;   &lt;td&gt;Optional&lt;/td&gt; &#xA;   &lt;td&gt;Port to access the application&#39;s GUI via the web interface. Mapping to the host is optional if access through the web interface is not wanted. For a container not using the default bridge network, the port can be changed with the &lt;code&gt;WEB_LISTENING_PORT&lt;/code&gt; environment variable.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5900&lt;/td&gt; &#xA;   &lt;td&gt;Optional&lt;/td&gt; &#xA;   &lt;td&gt;Port to access the application&#39;s GUI via the VNC protocol. Mapping to the host is optional if access through the VNC protocol is not wanted. For a container not using the default bridge network, the port can be changed with the &lt;code&gt;VNC_LISTENING_PORT&lt;/code&gt; environment variable.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;User/Group IDs&lt;/h3&gt; &#xA;&lt;p&gt;When mapping data volumes (via the &lt;code&gt;-v&lt;/code&gt; flag of the &lt;code&gt;docker run&lt;/code&gt; command), permissions issues can occur between the host and the container. Files and folders of a data volume are owned by a user, which is probably not the same as the default user under which the implemented application is running. Depending on permissions, this situation could prevent the container from accessing files and folders on the shared volume.&lt;/p&gt; &#xA;&lt;p&gt;To avoid this problem, you can specify the user the application should run as.&lt;/p&gt; &#xA;&lt;p&gt;This is done by passing the user ID and group ID to the container via the &lt;code&gt;USER_ID&lt;/code&gt; and &lt;code&gt;GROUP_ID&lt;/code&gt; environment variables.&lt;/p&gt; &#xA;&lt;p&gt;To find the right IDs to use, issue the following command on the host, with the user owning the data volume on the host:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;id &amp;lt;username&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which gives an output like this one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;uid=1000(myuser) gid=1000(myuser) groups=1000(myuser),4(adm),24(cdrom),27(sudo),46(plugdev),113(lpadmin)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The value of &lt;code&gt;uid&lt;/code&gt; (user ID) and &lt;code&gt;gid&lt;/code&gt; (group ID) are the ones that you should be given the container.&lt;/p&gt; &#xA;&lt;h3&gt;Locales&lt;/h3&gt; &#xA;&lt;p&gt;The default locale of the container is set to &lt;code&gt;POSIX&lt;/code&gt;. If this cause issues with your application, the proper locale can be installed. For example, adding the following instructions to your &lt;code&gt;Dockerfile&lt;/code&gt; set the locale to &lt;code&gt;en_US.UTF-8&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;RUN \&#xA;    add-pkg locales &amp;amp;&amp;amp; \&#xA;    sed-patch &#39;s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/&#39; /etc/locale.gen &amp;amp;&amp;amp; \&#xA;    locale-gen&#xA;ENV LANG=en_US.UTF-8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Locales are not supported by &lt;code&gt;musl&lt;/code&gt; C standard library on &lt;code&gt;Alpine&lt;/code&gt;. See:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://wiki.musl-libc.org/wiki/Open_Issues#C_locale_conformance&#34;&gt;http://wiki.musl-libc.org/wiki/Open_Issues#C_locale_conformance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gliderlabs/docker-alpine/issues/144&#34;&gt;https://github.com/gliderlabs/docker-alpine/issues/144&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Accessing the GUI&lt;/h3&gt; &#xA;&lt;p&gt;Assuming that container&#39;s ports are mapped to the same host&#39;s ports, the graphical interface of the application can be accessed via:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A web browser:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://&amp;lt;HOST IP ADDR&amp;gt;:5800&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Any VNC client:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;HOST IP ADDR&amp;gt;:5900&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Security&lt;/h3&gt; &#xA;&lt;p&gt;By default, access to the application&#39;s GUI is done over an unencrypted connection (HTTP or VNC).&lt;/p&gt; &#xA;&lt;p&gt;Secure connection can be enabled via the &lt;code&gt;SECURE_CONNECTION&lt;/code&gt; environment variable. See the &lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#environment-variables&#34;&gt;Environment Variables&lt;/a&gt; section for more details on how to set an environment variable.&lt;/p&gt; &#xA;&lt;p&gt;When enabled, application&#39;s GUI is performed over an HTTPs connection when accessed with a browser. All HTTP accesses are automatically redirected to HTTPs.&lt;/p&gt; &#xA;&lt;p&gt;When using a VNC client, the VNC connection is performed over SSL. Note that few VNC clients support this method. &lt;a href=&#34;http://www.karlrunge.com/x11vnc/ssvnc.html&#34;&gt;SSVNC&lt;/a&gt; is one of them.&lt;/p&gt; &#xA;&lt;h4&gt;SSVNC&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.karlrunge.com/x11vnc/ssvnc.html&#34;&gt;SSVNC&lt;/a&gt; is a VNC viewer that adds encryption security to VNC connections.&lt;/p&gt; &#xA;&lt;p&gt;While the Linux version of &lt;a href=&#34;http://www.karlrunge.com/x11vnc/ssvnc.html&#34;&gt;SSVNC&lt;/a&gt; works well, the Windows version has some issues. At the time of writing, the latest version &lt;code&gt;1.0.30&lt;/code&gt; is not functional, as a connection fails with the following error:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ReadExact: Socket error while reading&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, for your convienence, an unoffical and working version is provided here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jlesage/docker-baseimage-gui/raw/master/tools/ssvnc_windows_only-1.0.30-r1.zip&#34;&gt;https://github.com/jlesage/docker-baseimage-gui/raw/master/tools/ssvnc_windows_only-1.0.30-r1.zip&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The only difference with the offical package is that the bundled version of &lt;code&gt;stunnel&lt;/code&gt; has been upgraded to version &lt;code&gt;5.49&lt;/code&gt;, which fixes the connection problems.&lt;/p&gt; &#xA;&lt;h4&gt;Certificates&lt;/h4&gt; &#xA;&lt;p&gt;Here are the certificate files needed by the container. By default, when they are missing, self-signed certificates are generated and used. All files are PEM encoded, x509 certificates.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Container Path&lt;/th&gt; &#xA;   &lt;th&gt;Purpose&lt;/th&gt; &#xA;   &lt;th&gt;Content&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/config/certs/vnc-server.pem&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;VNC connection encryption.&lt;/td&gt; &#xA;   &lt;td&gt;VNC server&#39;s private key and certificate, bundled with any root and intermediate certificates.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/config/certs/web-privkey.pem&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;HTTPs connection encryption.&lt;/td&gt; &#xA;   &lt;td&gt;Web server&#39;s private key.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/config/certs/web-fullchain.pem&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;HTTPs connection encryption.&lt;/td&gt; &#xA;   &lt;td&gt;Web server&#39;s certificate, bundled with any root and intermediate certificates.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: To prevent any certificate validity warnings/errors from the browser or VNC client, make sure to supply your own valid certificates.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Certificate files are monitored and relevant daemons are automatically restarted when changes are detected.&lt;/p&gt; &#xA;&lt;h4&gt;VNC Password&lt;/h4&gt; &#xA;&lt;p&gt;To restrict access to your application, a password can be specified. This can be done via two methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;By using the &lt;code&gt;VNC_PASSWORD&lt;/code&gt; environment variable.&lt;/li&gt; &#xA; &lt;li&gt;By creating a &lt;code&gt;.vncpass_clear&lt;/code&gt; file at the root of the &lt;code&gt;/config&lt;/code&gt; volume. This file should contains the password in clear-text. During the container startup, content of the file is obfuscated and moved to &lt;code&gt;.vncpass&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The level of security provided by the VNC password depends on two things:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The type of communication channel (encrypted/unencrypted).&lt;/li&gt; &#xA; &lt;li&gt;How secure access to the host is.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When using a VNC password, it is highly desirable to enable the secure connection to prevent sending the password in clear over an unencrypted channel.&lt;/p&gt; &#xA;&lt;p&gt;Access to the host by unexpected users with sufficient privileges can be dangerous as they can retrieve the password with the following methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;By looking at the &lt;code&gt;VNC_PASSWORD&lt;/code&gt; environment variable value via the &lt;code&gt;docker inspect&lt;/code&gt; command. By defaut, the &lt;code&gt;docker&lt;/code&gt; command can be run only by the root user. However, it is possible to configure the system to allow the &lt;code&gt;docker&lt;/code&gt; command to be run by any users part of a specific group.&lt;/li&gt; &#xA; &lt;li&gt;By decrypting the &lt;code&gt;/config/.vncpass&lt;/code&gt; file. This requires the user to have the appropriate permission to read the file: it has to be root or be the user defined by the &lt;code&gt;USER_ID&lt;/code&gt; environment variable.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;DH Parameters&lt;/h4&gt; &#xA;&lt;p&gt;Diffie-Hellman (DH) parameters define how the &lt;a href=&#34;https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange&#34;&gt;DH key-exchange&lt;/a&gt; is performed. More details about this algorithm can be found on the &lt;a href=&#34;https://wiki.openssl.org/index.php/Diffie_Hellman&#34;&gt;OpenSSL Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;DH Parameters are saved into the PEM encoded file located inside the container at &lt;code&gt;/config/certs/dhparam.pem&lt;/code&gt;. By default, when this file is missing, 2048 bits DH parameters are automatically generated. Note that this one-time operation takes some time to perform and increases the startup time of the container.&lt;/p&gt; &#xA;&lt;h3&gt;Initialization Scripts&lt;/h3&gt; &#xA;&lt;p&gt;During the container startup, initialization scripts are executed in alphabetical order. They are executed before starting services.&lt;/p&gt; &#xA;&lt;p&gt;Initialization scripts are located at &lt;code&gt;/etc/cont-init.d/&lt;/code&gt; inside the container.&lt;/p&gt; &#xA;&lt;p&gt;To have a better predictability of the execution order, name of the scripts follows the &lt;code&gt;XX-name.sh&lt;/code&gt; format, where &lt;code&gt;XX&lt;/code&gt; is a sequence number.&lt;/p&gt; &#xA;&lt;p&gt;The following ranges are used by the baseimage:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;10-29&lt;/li&gt; &#xA; &lt;li&gt;70-89&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Unless specific needs are required, containers built against this baseimage should use the range 50-59.&lt;/p&gt; &#xA;&lt;h3&gt;Finalization Scripts&lt;/h3&gt; &#xA;&lt;p&gt;Finalization scripts are executed, in alphabetical order, during the shutdown process of the container. They are executed after all services have been stopped.&lt;/p&gt; &#xA;&lt;p&gt;Finalization scripts are located under &lt;code&gt;/etc/cont-finish.d/&lt;/code&gt; inside the container.&lt;/p&gt; &#xA;&lt;h3&gt;Services&lt;/h3&gt; &#xA;&lt;p&gt;Services are programs handled by the process supervisor that run in background. When a service dies, it can be configured to be automatically restarted.&lt;/p&gt; &#xA;&lt;p&gt;Services are defined under &lt;code&gt;/etc/services.d/&lt;/code&gt; in the container. Each service has its own directory, in which different files are used to store the behavior of the service.&lt;/p&gt; &#xA;&lt;p&gt;The content of files provides the value for the associated configuration setting. If the file has execution permission, it will be executed by the process supervisor and its output is taked as the value of the configuration setting.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;File&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;run&lt;/td&gt; &#xA;   &lt;td&gt;Program&lt;/td&gt; &#xA;   &lt;td&gt;The program to run.&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;is_ready&lt;/td&gt; &#xA;   &lt;td&gt;Program&lt;/td&gt; &#xA;   &lt;td&gt;Program invoked by the process supervisor to verify if the service is ready. The program should exit with an exit code of &lt;code&gt;0&lt;/code&gt; when service is ready. PID of the service if given to the program as parameter.&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;kill&lt;/td&gt; &#xA;   &lt;td&gt;Program&lt;/td&gt; &#xA;   &lt;td&gt;Program to run when service needs to be killed. The PID of the service if given to the program as parameter. Note that the &lt;code&gt;TERM&lt;/code&gt; signal is still sent to the service after executing the program.&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;finish&lt;/td&gt; &#xA;   &lt;td&gt;Program&lt;/td&gt; &#xA;   &lt;td&gt;Program invoked when the service terminates. The service&#39;s exit code is given to the program as parameter.&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;params&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Parameter for the service&#39;s program to run. One parameter per line.&lt;/td&gt; &#xA;   &lt;td&gt;No parameter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;environment&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Environment to use for the service. One environment variable per line, of the form &lt;code&gt;key=value&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;Environment untouched&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;respawn&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;Whether or not the process must be respawned when it dies.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sync&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;Whether or not the process supervisor waits until the service ends. This is mutually exclusive with &lt;code&gt;respawn&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ready_timeout&lt;/td&gt; &#xA;   &lt;td&gt;Unsigned integer&lt;/td&gt; &#xA;   &lt;td&gt;Maximum amount of time (in milliseconds) to wait for the service to be ready.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;5000&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;interval&lt;/td&gt; &#xA;   &lt;td&gt;Interval&lt;/td&gt; &#xA;   &lt;td&gt;Interval, in seconds, at which the service should be executed. This is mutually exclusive with &lt;code&gt;respawn&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;No interval&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;uid&lt;/td&gt; &#xA;   &lt;td&gt;Unsigned integer&lt;/td&gt; &#xA;   &lt;td&gt;The user ID under which the service will run.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$USER_ID&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gid&lt;/td&gt; &#xA;   &lt;td&gt;Unsigned integer&lt;/td&gt; &#xA;   &lt;td&gt;The group ID under which the service will run.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$GROUP_ID&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sgid&lt;/td&gt; &#xA;   &lt;td&gt;Unsigned integer&lt;/td&gt; &#xA;   &lt;td&gt;List of supplementary group IDs of the service. One group ID per line.&lt;/td&gt; &#xA;   &lt;td&gt;Empty list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;umask&lt;/td&gt; &#xA;   &lt;td&gt;Octal integer&lt;/td&gt; &#xA;   &lt;td&gt;The umask value (in octal notation) of the service.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0022&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;priority&lt;/td&gt; &#xA;   &lt;td&gt;Signed integer&lt;/td&gt; &#xA;   &lt;td&gt;Priority at which the service should run. A niceness value of -20 is the highest priority and 19 is the lowest priority.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;workdir&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;The working directory of the service.&lt;/td&gt; &#xA;   &lt;td&gt;Service&#39;s directory path&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ignore_failure&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;When set, the inability to start the service won&#39;t prevent the container to start.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;shutdown_on_terminate&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;Indicates that the container should be shut down when the service terminates.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;min_running_time&lt;/td&gt; &#xA;   &lt;td&gt;Unsigned integer&lt;/td&gt; &#xA;   &lt;td&gt;The minimum amount of time (in milliseconds) the service should be running before considering it as ready.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;500&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;disabled&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;Indicates that the service is disabled, meaning that it won&#39;t be loaded nor started.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#xA;    &lt;service&gt;&#xA;     .dep&#xA;    &lt;/service&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;Indicates that the service depends on another one. For example, having &lt;code&gt;srvB.dep&lt;/code&gt; means that &lt;code&gt;srvB&lt;/code&gt; should be started before this service.&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The following table provides more details about some value types:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Program&lt;/td&gt; &#xA;   &lt;td&gt;An executable binary, a script or a symbolic link to the program to run. The program file must have the execute permission.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;A boolean value. A &lt;em&gt;true&lt;/em&gt; value can be &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;on&lt;/code&gt;, &lt;code&gt;yes&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;enable&lt;/code&gt;, &lt;code&gt;enabled&lt;/code&gt;. A &lt;em&gt;false&lt;/em&gt; value can be &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;off&lt;/code&gt;, &lt;code&gt;no&lt;/code&gt;, &lt;code&gt;n&lt;/code&gt;, &lt;code&gt;disable&lt;/code&gt;, &lt;code&gt;disabled&lt;/code&gt;. Values are case insensitive. Also, the presence of an empty file indicates a &lt;em&gt;true&lt;/em&gt; value (i.e. the file can be &#34;touched&#34;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Interval&lt;/td&gt; &#xA;   &lt;td&gt;An unsigned integer value. The following values are also accepted (case insensitive): &lt;code&gt;yearly&lt;/code&gt;, &lt;code&gt;monthly&lt;/code&gt;, &lt;code&gt;weekly&lt;/code&gt;, &lt;code&gt;daily&lt;/code&gt;, &lt;code&gt;hourly&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Service Group&lt;/h4&gt; &#xA;&lt;p&gt;A service group is a service for which there is no &lt;code&gt;run&lt;/code&gt; program. The process supervisor will only load its dependencies.&lt;/p&gt; &#xA;&lt;h4&gt;Default Service&lt;/h4&gt; &#xA;&lt;p&gt;During startup, the process supervisor first load the service group &lt;code&gt;default&lt;/code&gt;. This service group contains dependencies to services that should be started and that are not a dependency of the &lt;code&gt;app&lt;/code&gt; service.&lt;/p&gt; &#xA;&lt;h4&gt;Service Readiness&lt;/h4&gt; &#xA;&lt;p&gt;By default, a service is considered ready once it has been successfully launched and ran for a minimum amount of time (500ms by default).&lt;/p&gt; &#xA;&lt;p&gt;This behavior can be adjusted with the following methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;By adjusting the minimum amount of time the service should run before considering it as ready. This can be done by adding the &lt;code&gt;min_running_time&lt;/code&gt; file to the service&#39;s directory.&lt;/li&gt; &#xA; &lt;li&gt;By informing the process supervisor when the service is ready. This is done by adding the &lt;code&gt;is_ready&lt;/code&gt; program to the service&#39;s directory, along with &lt;code&gt;ready_timeout&lt;/code&gt; file to indicate the maximum amount of time to wait for the service to be ready.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configuration Directory&lt;/h3&gt; &#xA;&lt;p&gt;Applications often need to write configuration, data, states, logs, etc. Inside the container, this data should be stored under the &lt;code&gt;/config&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;This directory is intended to be mapped to a folder on the host. The goal is to write stuff outside the container to keep this data persistent.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: During the container startup, ownership of this folder and all its content is taken. This is to make sure that &lt;code&gt;/config&lt;/code&gt; can be accessed by the user configured through &lt;code&gt;USER_ID&lt;/code&gt;/&lt;code&gt;GROUP_ID&lt;/code&gt;. This behavior can be adjusted via the &lt;code&gt;TAKE_CONFIG_OWNERSHIP&lt;/code&gt; internal environment variable.&lt;/p&gt; &#xA;&lt;h4&gt;Application&#39;s Data Directories&lt;/h4&gt; &#xA;&lt;p&gt;A lot of applications use the environment variables defined by the &lt;a href=&#34;https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html&#34;&gt;XDG Base Directory Specification&lt;/a&gt; to determine where to store various data. The baseimage sets these variables so they all fall under &lt;code&gt;/config/&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;XDG_DATA_HOME=/config/xdg/data&lt;/li&gt; &#xA; &lt;li&gt;XDG_CONFIG_HOME=/config/xdg/config&lt;/li&gt; &#xA; &lt;li&gt;XDG_CACHE_HOME=/config/xdg/cache&lt;/li&gt; &#xA; &lt;li&gt;XDG_STATE_HOME=/config/xdg/state&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Container Log&lt;/h3&gt; &#xA;&lt;p&gt;Everything written to the standard output and standard error output of scripts executed by the init process and services is saved into the container&#39;s log. The container log can be viewed with the command &lt;code&gt;docker logs &amp;lt;name of the container&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To ease consultation of the log, all messages are prefixed with the name of the service or script. Also, it is a good idea to limit the number of information written to this log. If a program&#39;s output is too verbose, it is preferable to redirect it to a file. For example, the &lt;code&gt;run&lt;/code&gt; command of a service that redirects the standard output and standard error output to different files could be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/sh&#xA;exec /usr/bin/my_service &amp;gt; /config/log/my_service_out.log 2&amp;gt; /config/log/my_service_err.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Logrotate&lt;/h3&gt; &#xA;&lt;p&gt;The baseimage integrates &lt;code&gt;logrotate&lt;/code&gt;, an utility used to rotate and compress log files. This tool runs automatically once a day via a service. The service is automatically disabled when no log files are configured.&lt;/p&gt; &#xA;&lt;p&gt;To enable the rotation/compression of a log file, a configuration file needs to be added to the &lt;code&gt;/etc/cont-logrotate.d&lt;/code&gt; directory inside the container. This configuration defines how to handle this specific log file.&lt;/p&gt; &#xA;&lt;p&gt;Here is a simple example of a configuration defined at &lt;code&gt;/etc/cont-logrotate.d/myapp&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/config/log/myapp.log {&#xA;    minsize 1M&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This configuration file can override the default parameters, which are defined at &lt;code&gt;/opt/base/etc/logrotate.conf&lt;/code&gt; inside the container. In summary, by default:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Log files are rotated weekly.&lt;/li&gt; &#xA; &lt;li&gt;Four weeks worth of backlogs are kept.&lt;/li&gt; &#xA; &lt;li&gt;Rotated log files are compressed.&lt;/li&gt; &#xA; &lt;li&gt;Date is used as a suffix of rotated log files.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more details about the content of &lt;code&gt;logrotate&lt;/code&gt; configuration files, see the manual at &lt;a href=&#34;https://linux.die.net/man/8/logrotate&#34;&gt;https://linux.die.net/man/8/logrotate&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Log Monitor&lt;/h3&gt; &#xA;&lt;p&gt;The baseimage includes a simple log monitor. This monitor allows sending notification(s) when a particular message is detected in a log or status file.&lt;/p&gt; &#xA;&lt;p&gt;This system has two main components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Notification definitions&lt;/strong&gt;: Describe properties of a notification (title, message, severity, etc), how it is triggered (filtering function) and the associated monitored file(s).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Backends (targets)&lt;/strong&gt;: Once a matching string is found in a file, a notification is triggered and sent to one or more backends. A backend can implement any functionality. For example, it could send the notification to the container&#39;s log, a file or an online service.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are two types of files that can be monitored:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Log files&lt;/strong&gt;: A log file is a file having new content appended to it.&lt;/li&gt; &#xA; &lt;li&gt;*&lt;em&gt;Status files&lt;/em&gt;: A status file doesn&#39;t have new content appended. Instead, its whole content is refreshed/overwritten periodically.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Notification Definition&lt;/h4&gt; &#xA;&lt;p&gt;The definition of a notification consists in multiple files, stored in a directory under &lt;code&gt;/etc/logmonitor/notifications.d&lt;/code&gt; inside the container. For example, definition of notification &lt;code&gt;MYNOTIF&lt;/code&gt; is found under &lt;code&gt;/etc/logmonitor/notifications.d/MYNOTIF/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The following table describe files part of the definition:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;File&lt;/th&gt; &#xA;   &lt;th&gt;Mandatory&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Program (script or binary with executable permission) used to filter messages from a log file. It is invoked by the log monitor with a single argument: a line from the log file. On a match, the program should exit with a value of &lt;code&gt;0&lt;/code&gt;. Any other values is interpreted as non-match.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;title&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;File containing the title of the notification. To produce dynamic content, the file can be a program (script or binary with executable permission). In this case, the program is invoked by the log monitor with the matched message from the log file as the single argument. Output of the program is used as the notification&#39;s title.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;desc&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;File containing the description/message of the notification. To produce dynamic content, the file can be a program (script or binary with executable permission). In this case, the program is invoked by the log monitor with the matched message from the log file as the single argument. Output of the program is used as the notification&#39;s description/message.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;level&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;File containing severity level of the notification. Valid severity level values are &lt;code&gt;ERROR&lt;/code&gt;, &lt;code&gt;WARNING&lt;/code&gt; or &lt;code&gt;INFO&lt;/code&gt;. To produce dynamic content, the file can be a program (script or binary with executable permission). In this case, the program is invoked by the log monitor with the matched message from the log file as the single argument. Output of the program is used as the notification&#39;s severity level.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;source&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;File containing the absolute path(s) to file(s) to monitor (one path per line). Prepend the path with &lt;code&gt;status:&lt;/code&gt; to indicate that the file is a status file. A path with prefixed with &lt;code&gt;log:&lt;/code&gt; or without any prefix is considered as a log file.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Notification Backend&lt;/h4&gt; &#xA;&lt;p&gt;Definition of a notification backend is stored in a directory under &lt;code&gt;/etc/cont-logmonitor/targets.d&lt;/code&gt;. For example, definition of &lt;code&gt;STDOUT&lt;/code&gt; backend is found under &lt;code&gt;/etc/cont-logmonitor/target.d/STDOUT/&lt;/code&gt;. The following table describe files part of the definition:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;File&lt;/th&gt; &#xA;   &lt;th&gt;Mandatory&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;send&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Program (script or binary with executable permission) that sends the notification. It is invoked by the log monitor with the following notification properties as arguments: title, description/message and the severity level.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;debouncing&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;File containing the minimum amount time (in seconds) that must elapse before sending the same notification with this backend. A value of &lt;code&gt;0&lt;/code&gt; means infinite (notification is sent once). If this file is missing, no debouncing is done.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;By default, the baseimage contains the following notification backends:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Backend&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Debouncing time&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display a message to the standard output, making it visible in the container&#39;s log. Message of the format is &lt;code&gt;{LEVEL}: {TITLE} {MESSAGE}&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;21 600s (6 hours)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;yad&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display the notification in a window box, visible in the application&#39;s GUI.&lt;/td&gt; &#xA;   &lt;td&gt;Infinite&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Adding glibc&lt;/h3&gt; &#xA;&lt;p&gt;For baseimages based on Alpine Linux, glibc can be installed to the image by adding the following line to your &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;RUN install-glibc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Helpers&lt;/h3&gt; &#xA;&lt;p&gt;The baseimage contains a few helpers that can be used when bulding a container or during the execution of a container.&lt;/p&gt; &#xA;&lt;h4&gt;Adding/Removing Packages&lt;/h4&gt; &#xA;&lt;p&gt;To add or remove packages, use the helpers &lt;code&gt;add-pkg&lt;/code&gt; and &lt;code&gt;del-pkg&lt;/code&gt; provided by this baseimage. To minimize the size of the container, these tools perform proper cleanup and make sure that no useless files are left after addition or removal of packages.&lt;/p&gt; &#xA;&lt;p&gt;Also, these tools can be used to easily install a group packages temporarily. Using the &lt;code&gt;--virtual NAME&lt;/code&gt; parameter, this allows installing packages and remove them at a later time using the provided &lt;code&gt;NAME&lt;/code&gt; (no need to repeat given packages).&lt;/p&gt; &#xA;&lt;p&gt;Note that if a specified package is already installed, it will be ignored and will not be removed automatically. For example, the following commands could be added to &lt;code&gt;Dockerfile&lt;/code&gt; to compile a project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;RUN \&#xA;    add-pkg --virtual build-dependencies build-base cmake git &amp;amp;&amp;amp; \&#xA;    git clone https://myproject.com/myproject.git&#xA;    make -C myproject &amp;amp;&amp;amp; \&#xA;    make -C myproject install &amp;amp;&amp;amp; \&#xA;    del-pkg build-dependencies&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Supposing that, in the example above, the &lt;code&gt;git&lt;/code&gt; package was already installed when the call to &lt;code&gt;add-pkg&lt;/code&gt; is performed, running &lt;code&gt;del-pkg build-dependencies&lt;/code&gt; doesn&#39;t remove it.&lt;/p&gt; &#xA;&lt;h4&gt;Modifying Files With Sed&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;sed&lt;/code&gt; is a useful tool often used in container builds to modify files. However, one downside of this method is that there is no easy way to determine if &lt;code&gt;sed&lt;/code&gt; actually modified the file or not.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s for this reason that the baseimage includes a helper that gives &lt;code&gt;sed&lt;/code&gt; a &#34;patch-like&#34; behavior: if applying a sed expression results in no change on the target file, then an error is reported. This helper is named &lt;code&gt;sed-patch&lt;/code&gt; and has the following usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sed-patch [SED_OPT]... SED_EXPRESSION FILE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the sed option &lt;code&gt;-i&lt;/code&gt; (edit files in place) is already supplied by the helper.&lt;/p&gt; &#xA;&lt;p&gt;It can be used in &lt;code&gt;Dockerfile&lt;/code&gt;, for example, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;RUN sed-patch &#39;s/Replace this/By this/&#39; /etc/myfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If running this sed expression doesn&#39;t bring any change to &lt;code&gt;/etc/myfiles&lt;/code&gt;, the command fails and thus, the Docker build also.&lt;/p&gt; &#xA;&lt;h4&gt;Evaluating Boolean Value&lt;/h4&gt; &#xA;&lt;p&gt;Environment variables are often used to store a boolean value. Using the helpers &lt;code&gt;is-bool-value-true&lt;/code&gt; and &lt;code&gt;is-bool-value-false&lt;/code&gt; allows to easily determine if a value is &#34;true&#34; or &#34;false&#34;.&lt;/p&gt; &#xA;&lt;p&gt;The following values are considered &#34;true&#34;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yes&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;enabled&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;enable&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;on&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following values are considered &#34;false&#34;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;false&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;no&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;disabled&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;disable&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;off&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, the following shell script snippet checks if the environment variable &lt;code&gt;CONTAINER_DEBUG&lt;/code&gt; contains a &#34;true&#34; value:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;if is-bool-value-true &#34;${CONTAINER_DEBUG:-0}&#34;; then&#xA;    # Do something...&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Taking Ownership of a Directory&lt;/h4&gt; &#xA;&lt;p&gt;The helper &lt;code&gt;take-ownership&lt;/code&gt; recursively sets the user ID and group ID of a directory and all the files and directories under it.&lt;/p&gt; &#xA;&lt;p&gt;This helper is well suited for scenarios where the directory is mapped to the host. If on the host this directory is a network share, setting/changing the ownership via &lt;code&gt;chown&lt;/code&gt; can fail. The helper handles this case by ignoring the failure if a write test turns out to be positive.&lt;/p&gt; &#xA;&lt;p&gt;For example, the following command take ownership of &lt;code&gt;/config&lt;/code&gt;, by automatically using the user and group IDs from the &lt;code&gt;USER_ID&lt;/code&gt; and &lt;code&gt;GROUP_ID&lt;/code&gt; environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;take-ownership /config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;User and group IDs can also be explicit. For example, to set ownership to user ID &lt;code&gt;99&lt;/code&gt; and group ID &lt;code&gt;100&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;take-ownership /config 99 100&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Setting Interval Environment Variable&lt;/h4&gt; &#xA;&lt;p&gt;The helper &lt;code&gt;set-cont-env&lt;/code&gt; can be used to set internal environment variables from the Dockerfile.&lt;/p&gt; &#xA;&lt;p&gt;For example, the following line can be added to the Dockerfile to set the value of the &lt;code&gt;APP_NAME&lt;/code&gt; internal environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;RUN set-cont-env APP_NAME &#34;Xterm&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This automatically creates the environment variable file under &lt;code&gt;/etc/cont-env.d&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Application Icon&lt;/h3&gt; &#xA;&lt;p&gt;A picture of your application can be added to the image. This picture is displayed in the WEB interface&#39;s navigation bar. This is also the master picture used to generate favicons that support different browsers and platforms.&lt;/p&gt; &#xA;&lt;p&gt;Add the following command to your &lt;code&gt;Dockerfile&lt;/code&gt;, with the proper URL pointing to your master icon: The master icon should be a square PNG image with a size of at least 260x260 for optimal results.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;# Generate and install favicons.&#xA;RUN \&#xA;    APP_ICON_URL=https://github.com/jlesage/docker-templates/raw/master/jlesage/images/generic-app-icon.png &amp;amp;&amp;amp; \&#xA;    install_app_icon.sh &#34;$APP_ICON_URL&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that favicons are generated by &lt;a href=&#34;https://realfavicongenerator.net/&#34;&gt;RealFaviconGenerator&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Dark Mode&lt;/h3&gt; &#xA;&lt;p&gt;Dark mode can be enabled via the &lt;code&gt;DARK_MODE&lt;/code&gt; environment variable. When enabled, the web interface used to display the application is automatically adjusted accordingly.&lt;/p&gt; &#xA;&lt;p&gt;For the application itself, supporting dark mode is more complicated. Applications don&#39;t use the same toolkit to build their UI and each toolkit has its own way to activate the dark mode.&lt;/p&gt; &#xA;&lt;p&gt;The baseimage provides support for the &lt;a href=&#34;https://www.gtk.org&#34;&gt;GTK&lt;/a&gt; and &lt;a href=&#34;https://www.qt.io&#34;&gt;QT&lt;/a&gt; toolkits.&lt;/p&gt; &#xA;&lt;h4&gt;GTK&lt;/h4&gt; &#xA;&lt;p&gt;When dark mode is enabled, the baseimage automatically setups the environment to force the application to use a dark theme. Under the hood, this is done by setting the following environment variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;GTK_THEME&lt;/code&gt; is set to &lt;code&gt;Adwaita:dark&lt;/code&gt;. This is used by GTK3 and GTK4 applications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GTK2_RC_FILES&lt;/code&gt; is set to &lt;code&gt;/opt/base/share/themes/Dark/gtk-2.0/gtkrc&lt;/code&gt;. This is used by GTK2 applications.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;QT&lt;/h4&gt; &#xA;&lt;p&gt;When dark mode is enabled, the baseimage automatically setup the environment to force the application to use a dark theme. Under the hood, this is done by setting the &lt;code&gt;QT_STYLE_OVERRIDE&lt;/code&gt; environment variable to &lt;code&gt;Adwaita-Dark&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In addition, the application&#39;s Dockerfile should install the Adwaita style/theme. It is provided by the &lt;code&gt;adwaita-qt&lt;/code&gt; package, available from the Ubuntu, Debian or Alpine Linux software repositories.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: Dark mode is currently supported by QT5 and QT6.&lt;/p&gt; &#xA;&lt;h3&gt;Tips and Best Practices&lt;/h3&gt; &#xA;&lt;h4&gt;Do Not Modify Baseimage Content&lt;/h4&gt; &#xA;&lt;p&gt;Try to avoid modifications to files provided by the baseimage. This minimizes the risk of breaking your container after using a new version of the baseimage.&lt;/p&gt; &#xA;&lt;h4&gt;Default Configuration Files&lt;/h4&gt; &#xA;&lt;p&gt;It is often useful to keep the original version of a configuration file. For example, a copy of the original file could be modified by an initialization script before being installed.&lt;/p&gt; &#xA;&lt;p&gt;These original files, also called default files, should be stored under the &lt;code&gt;/defaults&lt;/code&gt; directory inside the container.&lt;/p&gt; &#xA;&lt;h4&gt;The $HOME Variable&lt;/h4&gt; &#xA;&lt;p&gt;The application is run under a Linux user having its own ID. This user has no login capability, has no password, no valid login shell and no home directory. It is effectively a kind of user used by daemons.&lt;/p&gt; &#xA;&lt;p&gt;Thus, by default, the &lt;code&gt;$HOME&lt;/code&gt; environment variable is not set. While this should be fine in most case, some applications may expect the &lt;code&gt;$HOME&lt;/code&gt; environment variable to be set (since normally the application is run by a logged user) and may not behave correctly otherwise.&lt;/p&gt; &#xA;&lt;p&gt;To make the application happy, the home directory can be set at the beginning of the &lt;code&gt;startapp.sh&lt;/code&gt; script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export HOME=/config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adjust the location of the home directory to fit your needs. However, if the application uses the home directory to write data, make sure it is done in a volume mapped to the host (e.g. &lt;code&gt;/config&lt;/code&gt;),&lt;/p&gt; &#xA;&lt;p&gt;Note that the same technique can be used by services, by exporting the home directory into their &lt;code&gt;run&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;h4&gt;Referencing Linux User/Group&lt;/h4&gt; &#xA;&lt;p&gt;The Linux user/group under which the application is running can be referenced via:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Its ID, as indicated by the &lt;code&gt;USER_ID&lt;/code&gt;/&lt;code&gt;GROUP_ID&lt;/code&gt; environment variable.&lt;/li&gt; &#xA; &lt;li&gt;By the user/group &lt;code&gt;app&lt;/code&gt;. The &lt;code&gt;app&lt;/code&gt; user/group is setup during the startup to match the configured &lt;code&gt;USER_ID&lt;/code&gt;/&lt;code&gt;GROUP_ID&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Using &lt;code&gt;rootfs&lt;/code&gt; Directory&lt;/h4&gt; &#xA;&lt;p&gt;All files that need to be copied into the container should be stored in your source tree under the directory &lt;code&gt;rootfs&lt;/code&gt;. The folder structure into this directory should reflect the structure inside the container. For example, the file &lt;code&gt;/etc/cont-init.d/my-init.sh&lt;/code&gt; inside the container should be saved as &lt;code&gt;rootfs/etc/cont-init.d/my-init.sh&lt;/code&gt; in your source tree.&lt;/p&gt; &#xA;&lt;p&gt;This way, copying all the required files to the correct place into the container can be done with this single line in your &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;COPY rootfs/ /&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Maximizing Only the Main Window&lt;/h4&gt; &#xA;&lt;p&gt;By default, the application&#39;s window is maximized and decorations are hidden. When the application has multiple windows, this behavior may need to be restricted to only the main one.&lt;/p&gt; &#xA;&lt;p&gt;The window manager can be configured to apply different behaviors for different windows of the application. A specific window is identified by matching one or more of its properties:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Name of the window.&lt;/li&gt; &#xA; &lt;li&gt;Class of the window.&lt;/li&gt; &#xA; &lt;li&gt;Title of the window.&lt;/li&gt; &#xA; &lt;li&gt;Type of the window.&lt;/li&gt; &#xA; &lt;li&gt;etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To find the value of a property for a particular window:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create and start an instance of the container.&lt;/li&gt; &#xA; &lt;li&gt;From the host, start the &lt;code&gt;obxprop&lt;/code&gt; tool:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker exec [container name or id] obxprop | grep &#34;^_OB_APP&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Access the GUI of the application and click somewhere on the interested window.&lt;/li&gt; &#xA; &lt;li&gt;Information about that window will be printed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following table shows how to find the relevant information:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Name&lt;/td&gt; &#xA;   &lt;td&gt;The window&#39;s &lt;code&gt;_OB_APP_NAME&lt;/code&gt; property.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Class&lt;/td&gt; &#xA;   &lt;td&gt;The window&#39;s &lt;code&gt;_OB_APP_CLASS&lt;/code&gt; property.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Title&lt;/td&gt; &#xA;   &lt;td&gt;The window&#39;s &lt;code&gt;_OB_APP_TITLE&lt;/code&gt; property.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GroupName&lt;/td&gt; &#xA;   &lt;td&gt;The window&#39;s &lt;code&gt;_OB_APP_GROUP_NAME property&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GroupClass&lt;/td&gt; &#xA;   &lt;td&gt;The window&#39;s &lt;code&gt;_OB_APP_GROUP_CLASS property&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Type&lt;/td&gt; &#xA;   &lt;td&gt;The window&#39;s &lt;code&gt;_OB_APP_TYPE property&lt;/code&gt;. The type can be one of the following values: &lt;code&gt;desktop&lt;/code&gt;, &lt;code&gt;dialog&lt;/code&gt;, &lt;code&gt;dock&lt;/code&gt;, &lt;code&gt;menu&lt;/code&gt;, &lt;code&gt;normal&lt;/code&gt;, &lt;code&gt;notification&lt;/code&gt;, &lt;code&gt;splash&lt;/code&gt;, &lt;code&gt;toolbar&lt;/code&gt;, &lt;code&gt;utility&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Role&lt;/td&gt; &#xA;   &lt;td&gt;The window&#39;s &lt;code&gt;_OB_APP_ROLE&lt;/code&gt; property.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;By default, the window manager configuration matches only the type of the window, which must be &lt;code&gt;normal&lt;/code&gt;. More restrictions can be added to better select the correct window.&lt;/p&gt; &#xA;&lt;p&gt;To do this, matching criterias can be defined by adding a file located at &lt;code&gt;/etc/openbox/main-window-selection.xml&lt;/code&gt; in the container. This file should have one matching critera per line, in XML format. For example, to match against both the type and the name of the window, the file content should be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;Type&amp;gt;normal&amp;lt;/Type&amp;gt;&#xA;&amp;lt;Name&amp;gt;My Application&amp;lt;/Name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: To maintain backward compatibility with previous 4.x versions, the container fallbacks to &lt;code&gt;/etc/jwm/main-window-selection.jwmrc&lt;/code&gt; if &lt;code&gt;/etc/openbox/main-window-selection.xml&lt;/code&gt; does not exist.&lt;/p&gt; &#xA;&lt;h4&gt;Adaptations from the 3.x Version&lt;/h4&gt; &#xA;&lt;p&gt;For existing applications using the previous version of the baseimage, few adaptations are needed when updating to the new baseimage. Here are a few tips:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Verify exposed environment variables: each of them should be categorized as a public or private one. See the &lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#environment-variables&#34;&gt;Environment Variables&lt;/a&gt; section.&lt;/li&gt; &#xA; &lt;li&gt;Initialization scripts should be renamed to have the proper naming format. See the &lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#initialization-scripts&#34;&gt;Initialization Scripts&lt;/a&gt; section.&lt;/li&gt; &#xA; &lt;li&gt;Parameters/definition of services should be adjusted for the new system. See the &lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#services&#34;&gt;Services&lt;/a&gt; section.&lt;/li&gt; &#xA; &lt;li&gt;Verify that no scripts are using &lt;code&gt;with-contenv&lt;/code&gt; in their shebang (e.g. from init scripts).&lt;/li&gt; &#xA; &lt;li&gt;Set the &lt;code&gt;APP_VERSION&lt;/code&gt; and &lt;code&gt;DOCKER_IMAGE_VERSION&lt;/code&gt; internal environment variables when/if needed.&lt;/li&gt; &#xA; &lt;li&gt;Any adjustment to the window manager config (e.g. to maximize only the main window) should be adapted to use the new mechanism. See the &lt;a href=&#34;https://raw.githubusercontent.com/jlesage/docker-baseimage-gui/master/#maximizing-only-the-main-window&#34;&gt;Maximizing Only the Main Window&lt;/a&gt; section.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>