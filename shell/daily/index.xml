<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-06T01:37:25Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>confluentinc/confluent-kubernetes-examples</title>
    <updated>2022-10-06T01:37:25Z</updated>
    <id>tag:github.com,2022-10-06:/confluentinc/confluent-kubernetes-examples</id>
    <link href="https://github.com/confluentinc/confluent-kubernetes-examples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Example scenario workflows for Confluent for Kubernetes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Confluent for Kubernetes Scenario Examples&lt;/h1&gt; &#xA;&lt;p&gt;This GitHub repository accompanies the official &lt;a href=&#34;https://docs.confluent.io/operator/current/overview.html&#34;&gt;Confluent for Kubernetes documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This repository contains scenario workflows to deploy and manage Confluent on Kubernetes for various use cases.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;The following prerequisites are assumed for each scenario workflow:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A Kubernetes cluster - any CNCF conformant version&lt;/li&gt; &#xA; &lt;li&gt;Helm 3 installed on your local machine&lt;/li&gt; &#xA; &lt;li&gt;Kubectl installed on your local machine&lt;/li&gt; &#xA; &lt;li&gt;A namespace created in the Kubernetes cluster - &lt;code&gt;confluent&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kubectl configured to target the &lt;code&gt;confluent&lt;/code&gt; namespace: &lt;pre&gt;&lt;code&gt;kubectl config set-context --current --namespace=confluent&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;This repo cloned to your workstation: &lt;pre&gt;&lt;code&gt;git clone git@github.com:confluentinc/confluent-kubernetes-examples.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>crosstool-ng/crosstool-ng</title>
    <updated>2022-10-06T01:37:25Z</updated>
    <id>tag:github.com,2022-10-06:/crosstool-ng/crosstool-ng</id>
    <link href="https://github.com/crosstool-ng/crosstool-ng" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A versatile (cross-)toolchain generator.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Crosstool-NG&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Crosstool-NG aims at building toolchains. Toolchains are an essential component in a software development project. It will compile, assemble and link the code that is being developed. Some pieces of the toolchain will eventually end up in the resulting binaries: static libraries are but an example.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Before reporting a bug&lt;/strong&gt;, please read &lt;a href=&#34;http://crosstool-ng.github.io/support/&#34;&gt;bug reporting guidelines&lt;/a&gt;. Bugs that do not provide the required information will be closed without explanation.&lt;/p&gt; &#xA;&lt;p&gt;Refer to &lt;a href=&#34;http://crosstool-ng.github.io/docs/&#34;&gt;documentation at crosstool-NG website&lt;/a&gt; for more information on how to configure, install and use crosstool-NG.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note 1:&lt;/strong&gt; If you elect to build a uClibc-based toolchain, you will have to prepare a config file for uClibc with &amp;lt;= crosstool-NG-1.21.0. In &amp;gt;= crosstool-NG-1.22.0 you only need to prepare a config file for uClibc(or uClibc-ng) if you really need a custom config for uClibc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note 2:&lt;/strong&gt; If you call &lt;code&gt;ct-ng --help&lt;/code&gt; you will get help for &lt;code&gt;make(2)&lt;/code&gt;. This is because ct-ng is in fact a &lt;code&gt;make(2)&lt;/code&gt; script. There is no clean workaround for this.&lt;/p&gt; &#xA;&lt;h2&gt;Repository layout&lt;/h2&gt; &#xA;&lt;p&gt;To clone the crosstool-NG repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/crosstool-ng/crosstool-ng&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build Status&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://github.com/crosstool-ng/crosstool-ng/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Old repositories&lt;/h4&gt; &#xA;&lt;p&gt;These are the old Mercurial repositories. They are now read-only: &lt;a href=&#34;http://crosstool-ng.org/hg/&#34;&gt;http://crosstool-ng.org/hg/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Pull Requests and Issues&lt;/h3&gt; &#xA;&lt;p&gt;You can find open Pull Requests on GitHub &lt;a href=&#34;https://github.com/crosstool-ng/crosstool-ng/pulls&#34;&gt;here&lt;/a&gt; and you can find open issues &lt;a href=&#34;https://github.com/crosstool-ng/crosstool-ng/issues&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Contributing&lt;/h4&gt; &#xA;&lt;p&gt;To contribute to crosstool-NG it is helpful to provide as much information as you can about your change, including any updates to documentation (if appropriate), and test... test... test.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/crosstool-ng/crosstool-ng#fork-destination-box&#34;&gt;Fork crosstool-ng on github&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone the fork you made to your computer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/crosstool-ng/crosstool-ng&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a topic branch for your work&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;git checkout -b fix_comment_typo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make changes&lt;/li&gt; &#xA; &lt;li&gt;hack&lt;/li&gt; &#xA; &lt;li&gt;test&lt;/li&gt; &#xA; &lt;li&gt;hack&lt;/li&gt; &#xA; &lt;li&gt;etc...&lt;/li&gt; &#xA; &lt;li&gt;Add your changes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;git add [file(s) that changed, add -p if you want to be more specific]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Verify you are happy with your changes to be commited&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;git diff --cached&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Commit changes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;git commit -s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;-s&lt;/code&gt; automatically adds your &lt;code&gt;Signed-off-by: [name] &amp;lt;email&amp;gt;&lt;/code&gt; to your commit message. Your commit will be rejected without this.&lt;/p&gt; &#xA;&lt;p&gt;Also, please explain what your change does. &lt;code&gt;&#34;Fix stuff&#34;&lt;/code&gt; will be rejected. For examples of good commit messages, read the &lt;a href=&#34;https://github.com/crosstool-ng/crosstool-ng/commits/master&#34;&gt;changelog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Push your topic branch with your changes to your fork&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;git push origin fix_comment_typo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to the crosstool-ng project and click the &lt;code&gt;Compare &amp;amp; pull request&lt;/code&gt; button for the branch you want to open a pull request with.&lt;/li&gt; &#xA; &lt;li&gt;Review the pull request changes, and verify that you are opening a pull request for the appropriate branch. The title and message should reflect the nature/theme of the changes in the PR, say the title is &lt;code&gt;Fix comment typos&lt;/code&gt; and the message details any specifics you can provide.&lt;/li&gt; &#xA; &lt;li&gt;You might change the crosstool-ng branch, if you are opening a pull request that is intended for a different branch. For example, when you created your topic branch you could have done:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;git checkout -b fix_out_of_date_patch origin/1.22&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then when you get to this pull request screen change the base branch from &lt;code&gt;master&lt;/code&gt; to &lt;code&gt;1.22&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;By creating a pull request, the PR is entered into the &lt;a href=&#34;https://waffle.io/crosstool-ng/crosstool-ng&#34;&gt;backlog&lt;/a&gt;. A &lt;a href=&#34;https://travis-ci.org/crosstool-ng/crosstool-ng/builds&#34;&gt;travis-ci&lt;/a&gt; job will run to test your changes against a select set of samples. As they start to get worked, they should be placed in the &lt;code&gt;Ready&lt;/code&gt; state. PRs that are being worked are &lt;code&gt;In Progress&lt;/code&gt;. If a questions come up about the commit that might involve changes to the commit then the PR is placed in &lt;code&gt;Waiting For Response&lt;/code&gt;, you have two options:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fix the issue with the commit by adding a new commit in the topic branch that fixes the code review. Then push your changes to your branch. This option keeps the comments in the PR, and allows for further code review. I personally dislike this, because people are lazy and fix reviews with &lt;code&gt;fix more review issues&lt;/code&gt;. Please make good commit messages! All rules about commits from above apply! &lt;strong&gt;THIS IS PREFERED&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Add your changes&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git add [file(s) that changed, add -p if you want to be more specific]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Verify you are happy with your changes to be commited&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git diff --cached&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Commit changes&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git commit -s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Push your topic branch with your changes to your fork&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;git push origin fix_comment_typo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At this point the PR will be updated to have the latest commit to that branch, and can be subsequently reviewed.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Interactively rebase the offending commit(s) to fix the code review. This option is slightly annoying on Github, as the comments are stored with the commits, and are hidden when new commits replace the old commits. They used to disappear completely; now Github shows a grey &#39;View outdated&#39; link next to the old commits.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This recipe also comes handy with other issues, like your topic branch not being up-to-date with master:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git fetch --all&#xA;git rebase --ignore-whitespace origin master&#xA;git rebase -i &amp;lt;offending-commit-id&amp;gt;^&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The &lt;code&gt;--ignore-whitespace&lt;/code&gt; stops &lt;code&gt;git apply&lt;/code&gt; (which is called by rebase) from changing any whitespace when it runs.&lt;/p&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;pick&lt;/code&gt; with &lt;code&gt;edit&lt;/code&gt; or remove the line to delete a commit. Fix the issue in the code review.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git add [file(s)]&#xA;git rebase --continue&#xA;&amp;lt;update commit comment if needed&amp;gt;&#xA;git push --force origin fix_comment_typo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Patchwork&lt;/h3&gt; &#xA;&lt;p&gt;We previously used patchwork for development, but it is no longer used. I&#39;d like to see patches that are still applicable turned into Pull Requests on GitHub.&lt;/p&gt; &#xA;&lt;p&gt;You can find the &lt;a href=&#34;http://patchwork.ozlabs.org/project/crosstool-ng/&#34;&gt;list of pending patches&lt;/a&gt; available on &lt;a href=&#34;http://jk.ozlabs.org/projects/patchwork/&#34;&gt;patchwork&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;More Info&lt;/h2&gt; &#xA;&lt;p&gt;You can find &lt;em&gt;all&lt;/em&gt; of this and more at &lt;a href=&#34;http://crosstool-ng.org/&#34;&gt;crosstool-ng.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Report issues at &lt;a href=&#34;https://github.com/crosstool-ng/crosstool-ng&#34;&gt;the project site on GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We have a &lt;a href=&#34;mailto:crossgcc@sourceware.org&#34;&gt;mailing list&lt;/a&gt;. Archive and subscription info can be found here: &lt;a href=&#34;https://sourceware.org/ml/crossgcc/&#34;&gt;https://sourceware.org/ml/crossgcc/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Aloha! :-)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>asdf-vm/asdf-nodejs</title>
    <updated>2022-10-06T01:37:25Z</updated>
    <id>tag:github.com,2022-10-06:/asdf-vm/asdf-nodejs</id>
    <link href="https://github.com/asdf-vm/asdf-nodejs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Node.js plugin for asdf version manager&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;asdf-nodejs &lt;a href=&#34;https://github.com/asdf-vm/asdf-nodejs/actions/workflows/workflow.yml&#34;&gt;&lt;img src=&#34;https://github.com/asdf-vm/asdf-nodejs/actions/workflows/workflow.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Node.js plugin for &lt;a href=&#34;https://github.com/asdf-vm/asdf&#34;&gt;asdf&lt;/a&gt; version manager&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;After installing &lt;a href=&#34;https://github.com/asdf-vm/asdf&#34;&gt;asdf&lt;/a&gt;, install the plugin by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;asdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Use&lt;/h2&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://github.com/asdf-vm/asdf&#34;&gt;asdf&lt;/a&gt; readme for instructions on how to install &amp;amp; manage versions of Node.js at a system and project level.&lt;/p&gt; &#xA;&lt;p&gt;Behind the scenes, &lt;code&gt;asdf-nodejs&lt;/code&gt; utilizes &lt;a href=&#34;https://github.com/nodenv/node-build&#34;&gt;&lt;code&gt;node-build&lt;/code&gt;&lt;/a&gt; to install pre-compiled binaries and compile from source if necessary. You can check its &lt;a href=&#34;https://github.com/nodenv/node-build/raw/master/README.md&#34;&gt;README&lt;/a&gt; for additional settings and some troubleshooting.&lt;/p&gt; &#xA;&lt;p&gt;When compiling a version from source, you are going to need to install &lt;a href=&#34;https://github.com/nodejs/node/raw/master/BUILDING.md#building-nodejs-on-supported-platforms&#34;&gt;all requirements for compiling Node.js&lt;/a&gt; (be advised that different versions might require different configurations). That being said, &lt;code&gt;node-build&lt;/code&gt; does a great job at handling edge cases and compilations rarely need a deep investigation.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;node-build&lt;/code&gt; already has a &lt;a href=&#34;https://github.com/nodenv/node-build#custom-build-configuration&#34;&gt;handful of settings&lt;/a&gt;, in additional to that &lt;code&gt;asdf-nodejs&lt;/code&gt; has a few extra configuration variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ASDF_NODEJS_VERBOSE_INSTALL&lt;/code&gt;: Enables verbose output for downloading and building. Any value different from empty is treated as enabled.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ASDF_NODEJS_FORCE_COMPILE&lt;/code&gt;: Forces compilation from source instead of preferring pre-compiled binaries&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ASDF_NODEJS_NODEBUILD_HOME&lt;/code&gt;: Home for the node-build installation, defaults to &lt;code&gt;$ASDF_DIR/plugins/nodejs/.node-build&lt;/code&gt;, you can install it in another place or share it with your system&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ASDF_NODEJS_NODEBUILD&lt;/code&gt;: Path to the node-build executable, defaults to &lt;code&gt;$NODE_BUILD_MIRROR_URL/bin/node-build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ASDF_NODEJS_CONCURRENCY&lt;/code&gt;: How many jobs should be used in compilation. Defaults to half the computer cores&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NODEJS_ORG_MIRROR&lt;/code&gt;: (Legacy) overrides the default mirror used for downloading the distibutions, alternative to the &lt;code&gt;NODE_BUILD_MIRROR_URL&lt;/code&gt; node-build env var&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Integrity/signature check&lt;/h3&gt; &#xA;&lt;p&gt;In the past &lt;code&gt;asdf-nodejs&lt;/code&gt; checked for signatures and integrity by querying live keyservers. &lt;code&gt;node-build&lt;/code&gt;, on the other hand, checks integrity by precomputing checksums ahead of time and versioning them together with the instructions for building them, making the process a lot more streamlined.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;.nvmrc&lt;/code&gt; and &lt;code&gt;.node-version&lt;/code&gt; support&lt;/h3&gt; &#xA;&lt;p&gt;asdf uses a &lt;code&gt;.tool-versions&lt;/code&gt; file for auto-switching between software versions. To ease migration, you can have it read an existing &lt;code&gt;.nvmrc&lt;/code&gt; or &lt;code&gt;.node-version&lt;/code&gt; file to find out what version of Node.js should be used. To do this, add the following to &lt;code&gt;$HOME/.asdfrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;legacy_version_file = yes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running the wrapped node-build command&lt;/h3&gt; &#xA;&lt;p&gt;We provide a command for running the installed &lt;code&gt;node-build&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;asdf nodejs nodebuild --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;node-build advanced variations&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;node-build&lt;/code&gt; has some additional variations aside from the versions listed in &lt;code&gt;asdf list-all nodejs&lt;/code&gt; (chakracore/graalvm branches and some others). As of now, we weakly support these variations. In the sense that they are available for install and can be used in a &lt;code&gt;.tool-versions&lt;/code&gt; file, but we don&#39;t list them as installation candidates nor give them full attention.&lt;/p&gt; &#xA;&lt;p&gt;Some of them will work out of the box, and some will need a bit of investigation to get them built. We are planning in providing better support for these variations in the future.&lt;/p&gt; &#xA;&lt;p&gt;To list all the available variations run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;asdf nodejs nodebuild --definitions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note that this command only lists the current &lt;code&gt;node-build&lt;/code&gt; definitions. You might want to &lt;a href=&#34;https://raw.githubusercontent.com/asdf-vm/asdf-nodejs/master/#updating-node-build-definitions&#34;&gt;update the local &lt;code&gt;node-build&lt;/code&gt; repository&lt;/a&gt; before listing them.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Manually updating node-build definitions&lt;/h3&gt; &#xA;&lt;p&gt;Every new node version needs to have a definition file in the &lt;code&gt;node-build&lt;/code&gt; repository. &lt;code&gt;asdf-nodejs&lt;/code&gt; already tries to update &lt;code&gt;node-build&lt;/code&gt; on every new version installation, but if you want to update &lt;code&gt;node-build&lt;/code&gt; manually for some reason we provide a command just for that:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;asdf nodejs update-nodebuild&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Default npm Packages&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;asdf-nodejs&lt;/code&gt; can automatically install a set of default set of npm package right after installing a Node.js version. To enable this feature, provide a &lt;code&gt;$HOME/.default-npm-packages&lt;/code&gt; file that lists one package per line, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lodash&#xA;request&#xA;express&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can specify a non-default location of this file by setting a &lt;code&gt;ASDF_NPM_DEFAULT_PACKAGES_FILE&lt;/code&gt; variable.&lt;/p&gt;</summary>
  </entry>
</feed>