<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-13T01:41:10Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alex000kim/nsfw_data_scraper</title>
    <updated>2022-11-13T01:41:10Z</updated>
    <id>tag:github.com,2022-11-13:/alex000kim/nsfw_data_scraper</id>
    <link href="https://github.com/alex000kim/nsfw_data_scraper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Collection of scripts to aggregate image data for the purposes of training an NSFW Image Classifier&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NSFW Data Scraper&lt;/h1&gt; &#xA;&lt;h2&gt;Note: use with caution - the dataset is noisy&lt;/h2&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;This is a set of scripts that allows for an automatic collection of &lt;em&gt;tens of thousands&lt;/em&gt; of images for the following (loosely defined) categories to be later used for training an image classifier:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;porn&lt;/code&gt; - pornography images&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hentai&lt;/code&gt; - hentai images, but also includes pornographic drawings&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sexy&lt;/code&gt; - sexually explicit images, but not pornography. Think nude photos, playboy, bikini, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;neutral&lt;/code&gt; - safe for work neutral images of everyday things and people&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;drawings&lt;/code&gt; - safe for work drawings (including anime)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is what each script (located under &lt;code&gt;scripts&lt;/code&gt; directory) does:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;1_get_urls_.sh&lt;/code&gt; - iterates through text files under &lt;code&gt;scripts/source_urls&lt;/code&gt; downloading URLs of images for each of the 5 categories above. The &lt;code&gt;ripme&lt;/code&gt; application performs all the heavy lifting. The source URLs are mostly links to various subreddits, but could be any website that Ripme supports. &lt;em&gt;Note&lt;/em&gt;: I already ran this script for you, and its outputs are located in &lt;code&gt;raw_data&lt;/code&gt; directory. No need to rerun unless you edit files under &lt;code&gt;scripts/source_urls&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2_download_from_urls_.sh&lt;/code&gt; - downloads actual images for urls found in text files in &lt;code&gt;raw_data&lt;/code&gt; directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;3_optional_download_drawings_.sh&lt;/code&gt; - (optional) script that downloads SFW anime images from the &lt;a href=&#34;https://www.gwern.net/Danbooru2018&#34;&gt;Danbooru2018&lt;/a&gt; database.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;4_optional_download_neutral_.sh&lt;/code&gt; - (optional) script that downloads SFW neutral images from the &lt;a href=&#34;http://www.vision.caltech.edu/Image_Datasets/Caltech256/&#34;&gt;Caltech256&lt;/a&gt; dataset&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;5_create_train_.sh&lt;/code&gt; - creates &lt;code&gt;data/train&lt;/code&gt; directory and copy all &lt;code&gt;*.jpg&lt;/code&gt; and &lt;code&gt;*.jpeg&lt;/code&gt; files into it from &lt;code&gt;raw_data&lt;/code&gt;. Also removes corrupted images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;6_create_test_.sh&lt;/code&gt; - creates &lt;code&gt;data/test&lt;/code&gt; directory and moves &lt;code&gt;N=2000&lt;/code&gt; random files for each class from &lt;code&gt;data/train&lt;/code&gt; to &lt;code&gt;data/test&lt;/code&gt; (change this number inside the script if you need a different train/test split). Alternatively, you can run it multiple times, each time it will move &lt;code&gt;N&lt;/code&gt; images for each class from &lt;code&gt;data/train&lt;/code&gt; to &lt;code&gt;data/test&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to collect data&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker build . -t docker_nsfw_data_scraper&#xA;Sending build context to Docker daemon  426.3MB&#xA;Step 1/3 : FROM ubuntu:18.04&#xA; ---&amp;gt; 775349758637&#xA;Step 2/3 : RUN apt update  &amp;amp;&amp;amp; apt upgrade -y  &amp;amp;&amp;amp; apt install wget rsync imagemagick default-jre -y&#xA; ---&amp;gt; Using cache&#xA; ---&amp;gt; b2129908e7e2&#xA;Step 3/3 : ENTRYPOINT [&#34;/bin/bash&#34;]&#xA; ---&amp;gt; Using cache&#xA; ---&amp;gt; d32c5ae5235b&#xA;Successfully built d32c5ae5235b&#xA;Successfully tagged docker_nsfw_data_scraper:latest&#xA;$ # Next command might run for several hours. It is recommended to leave it overnight&#xA;$ docker run -v $(pwd):/root/nsfw_data_scraper docker_nsfw_data_scraper scripts/runall.sh&#xA;Getting images for class: neutral&#xA;...&#xA;...&#xA;$ ls data&#xA;test  train&#xA;$ ls data/train/&#xA;drawings  hentai  neutral  porn  sexy&#xA;$ ls data/test/&#xA;drawings  hentai  neutral  porn  sexy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to train a CNN model&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://github.com/fastai/fastai&#34;&gt;fastai&lt;/a&gt;: &lt;code&gt;conda install -c pytorch -c fastai fastai&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;train_model.ipynb&lt;/code&gt; top to bottom&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Results&lt;/h2&gt; &#xA;&lt;p&gt;I was able to train a CNN classifier to 91% accuracy with the following confusion matrix:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alex000kim/nsfw_data_scraper/main/confusion_matrix.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;As expected, &lt;code&gt;drawings&lt;/code&gt; and &lt;code&gt;hentai&lt;/code&gt; are confused with each other more frequently than with other classes.&lt;/p&gt; &#xA;&lt;p&gt;Same with &lt;code&gt;porn&lt;/code&gt; and &lt;code&gt;sexy&lt;/code&gt; categories.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>0x050f/libft-war-machine</title>
    <updated>2022-11-13T01:41:10Z</updated>
    <id>tag:github.com,2022-11-13:/0x050f/libft-war-machine</id>
    <link href="https://github.com/0x050f/libft-war-machine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;forked repository of libftest (by jtoty) for libft at 42&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PREAMBLE&lt;/h1&gt; &#xA;&lt;p&gt;This is an edit of prev libftest made by @jtoty to fit with the 2019 project libft. &lt;br&gt; (ORIGINAL REP : &lt;a href=&#34;https://github.com/jtoty/Libftest&#34;&gt;https://github.com/jtoty/Libftest&lt;/a&gt;) &lt;br&gt; This update was made by @lmartin &lt;br&gt;&lt;/p&gt; &#xA;&lt;h1&gt;libft-war-machine&lt;/h1&gt; &#xA;&lt;img align=&#34;right&#34; src=&#34;https://raw.githubusercontent.com/0x050f/libft-war-machine/master/srcs/img_readme.png&#34; width=&#34;50%&#34;&gt; This repository contains script to test your libft project. The script will do the following tests : &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check if the author file exists&lt;/li&gt; &#xA; &lt;li&gt;Check content of the author file&lt;/li&gt; &#xA; &lt;li&gt;Check if libft.h exists&lt;/li&gt; &#xA; &lt;li&gt;Check norme of libft.h&lt;/li&gt; &#xA; &lt;li&gt;Check if the Makefile file exists&lt;/li&gt; &#xA; &lt;li&gt;Check rules in Makefile&lt;/li&gt; &#xA; &lt;li&gt;Check compilation&#39;s flag in Makefile&lt;/li&gt; &#xA; &lt;li&gt;Compil library&lt;/li&gt; &#xA; &lt;li&gt;Check norme errors&lt;/li&gt; &#xA; &lt;li&gt;Check forbidden functions&lt;/li&gt; &#xA; &lt;li&gt;Tests functions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;At the end of the tests, a deepthought file will be created, inside which you can find all the results and error/failure messages. You can also see your results in tests directory.&lt;/p&gt; &#xA;&lt;p&gt;The script will compil your files with your libft, so you must have your Makefile up to date.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt;All the tests made are not the official tests&lt;span&gt;⚠&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/y3ll0w42/libft-war-machine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;If you run the script for the first time, it will automatically create &lt;code&gt;my_config.sh&lt;/code&gt; file and ask you to edit it with the path of your libft project. You can also choose the colors that will be used and the path where the deepthought file will be created.&lt;/p&gt; &#xA;&lt;h4&gt;Custom directories&lt;/h4&gt; &#xA;&lt;p&gt;If you use custom directories for your header and source files; you should specify there name in my_config.sh.&lt;/p&gt; &#xA;&lt;p&gt;The following variables must be set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;HEADER_DIR&#xA;SRC_DIR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Exemple:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;HEADER_DIR=&#34;includes&#34;&#xA;SRC_DIR=&#34;srcs&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running script&lt;/h2&gt; &#xA;&lt;p&gt;Go to the directory where you cloned and run the script&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash grademe.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or simply run the script with the path&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash /path/where/you/cloned/grademe.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Options available&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-h&lt;/code&gt;&lt;br&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display help and exit&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-d&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Allows to perform the tests even if the files are in directories&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-c&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Disable color&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-s&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Disable searching Makefile and author files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-m&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When compiling library, test all the Makefile&#39;s rules (instead of doing only make re and checking if other rules exist).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-l&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Disable compiling library&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-f&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Disable checking forbidden functions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-n&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Disable norminette&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-u&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Disable checking updates at launch&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-p1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Disable part 1 tests&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-p2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Disable part 2 tests&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-b&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Disable bonus part tests&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-a&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Disable additional part tests&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-op1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Do only part 1 tests&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-op2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Do only part 2 tests&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-ob&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Do only bonus part tests&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-oa&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Do only additional part tests&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ft_function&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Test only this function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Add successively all options you want, in the order you want. For example :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash grademe.sh ft_atoi -f ft_strlen -n&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Supported functions&lt;/h3&gt; &#xA;&lt;p&gt;All the supported functions are listed &lt;a href=&#34;https://github.com/y3ll0w42/libft-war-machine/raw/master/supported_functions.md&#34;&gt;on this page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Any suggestions or bugs reporting ? Contact &lt;a href=&#34;mailto:lmartin@student.42.fr&#34;&gt;lmartin@student.42.fr&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;jtoty : &lt;a href=&#34;https://github.com/jtoty&#34;&gt;https://github.com/jtoty&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;jmichaud : &lt;a href=&#34;https://github.com/MrJe&#34;&gt;https://github.com/MrJe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;tlernoul&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>