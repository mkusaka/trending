<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-09T01:35:17Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>umeshshinde19/instainsane</title>
    <updated>2025-01-09T01:35:17Z</updated>
    <id>tag:github.com,2025-01-09:/umeshshinde19/instainsane</id>
    <link href="https://github.com/umeshshinde19/instainsane" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Multi-threaded Instagram Brute Forcer (100 attemps at once)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;InstaInsane v1.0&lt;/h1&gt; &#xA;&lt;h2&gt;Author: &lt;a href=&#34;https://github.com/umeshshinde19&#34;&gt;https://github.com/umeshshinde19&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;IG: instagram.com/cyberspidy19&lt;/h2&gt; &#xA;&lt;h3&gt;Don&#39;t copy this code without give me the credits, nerd!&lt;/h3&gt; &#xA;&lt;p&gt;Instainsane is an Shell Script to perform multi-threaded brute force attack against Instagram, this script can bypass login limiting and it can test infinite number of passwords with a rate of about 1000 passwords/min with 100 attemps at once.&lt;/p&gt; &#xA;&lt;h2&gt;Legal disclaimer:&lt;/h2&gt; &#xA;&lt;p&gt;Usage of InstaInsane for attacking targets without prior mutual consent is illegal. It&#39;s the end user&#39;s responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/34893261/38772658-97646698-4012-11e8-9b5e-65596e70a5ff.png&#34; alt=&#34;insane&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Multi-thread (100 attempts at once)&lt;/li&gt; &#xA; &lt;li&gt;Save/Resume sessions&lt;/li&gt; &#xA; &lt;li&gt;Anonymous attack through TOR&lt;/li&gt; &#xA; &lt;li&gt;Check valid usernames&lt;/li&gt; &#xA; &lt;li&gt;Default password list (best +39k 8 letters)&lt;/li&gt; &#xA; &lt;li&gt;Check and Install all dependencies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Usage:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/thelinuxchoice/instainsane&#xA;cd instainsane&#xA;chmod +x instainsane.sh&#xA;sudo ./instainsane.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install requirements (Curl, Tor, Openssl):&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;chmod +x install.sh&#xA;sudo ./install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How it works?&lt;/h3&gt; &#xA;&lt;p&gt;Script uses an Android ApkSignature to perform authentication in addition using TOR instances to avoid blocking. The script uses Instagram-py algorithm (Python), see the project at: &lt;a href=&#34;https://github.com/antony-jr/instagram-py&#34;&gt;https://github.com/antony-jr/instagram-py&lt;/a&gt; Thanks to: @umeshshinde19 &lt;a href=&#34;https://github.com/umeshshinde19&#34;&gt;https://github.com/umeshshinde19&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Donate!&lt;/h3&gt; &#xA;&lt;p&gt;Support the authors:&lt;/p&gt; &#xA;&lt;p&gt;&#xA; &lt;noscript&gt;&#xA;  &lt;a href=&#34;https://liberapay.com/umeshshinde19/donate&#34;&gt;&lt;img alt=&#34;Donate using Liberapay&#34; src=&#34;https://liberapay.com/assets/widgets/donate.svg?sanitize=true&#34;&gt;&lt;/a&gt;&#xA; &lt;/noscript&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>inkonchain/node</title>
    <updated>2025-01-09T01:35:17Z</updated>
    <id>tag:github.com,2025-01-09:/inkonchain/node</id>
    <link href="https://github.com/inkonchain/node" rel="alternate"></link>
    <summary type="html">&lt;p&gt;How to run an Ink Node&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ink Node&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Forked and customized from &lt;a href=&#34;https://github.com/smartcontracts/simple-optimism-node&#34;&gt;https://github.com/smartcontracts/simple-optimism-node&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;A simple docker compose script for launching full / archive node for the Ink chain.&lt;/p&gt; &#xA;&lt;h2&gt;Recommended Hardware&lt;/h2&gt; &#xA;&lt;h3&gt;Mainnet&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;16GB+ RAM&lt;/li&gt; &#xA; &lt;li&gt;2 TB SSD (NVME Recommended)&lt;/li&gt; &#xA; &lt;li&gt;100mb/s+ Download&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Testnet&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;16GB+ RAM&lt;/li&gt; &#xA; &lt;li&gt;500 GB SSD (NVME Recommended)&lt;/li&gt; &#xA; &lt;li&gt;100mb/s+ Download&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation and Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Install docker and docker compose&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: If you&#39;re not logged in as root, you&#39;ll need to log out and log in again after installation to complete the docker installation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Note: This command installs docker and docker compose for Ubuntu. For windows and mac desktop or laptop, please use Docker Desktop. For other OS, please find instruction in Google.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Update and upgrade packages&#xA;sudo apt-get update&#xA;sudo apt-get upgrade -y&#xA;&#xA;### Docker and docker compose prerequisites&#xA;sudo apt-get install -y curl&#xA;sudo apt-get install -y gnupg&#xA;sudo apt-get install -y ca-certificates&#xA;sudo apt-get install -y lsb-release&#xA;&#xA;### Download the docker gpg file to Ubuntu&#xA;sudo mkdir -p /etc/apt/keyrings&#xA;curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg&#xA;&#xA;### Add Docker and docker compose support to the Ubuntu&#39;s packages list&#xA;echo &#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&#34; | sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null&#xA;&#xA;sudo apt-get update&#xA;&#xA;### Install docker and docker compose on Ubuntu&#xA;sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin&#xA;&#xA;sudo usermod -aG docker $(whoami)&#xA;&#xA;### Verify the Docker and docker compose install on Ubuntu&#xA;sudo docker run hello-world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(For non-root user) After logged out and logged back in, test if docker is working by running.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker ps&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It should returns an empty container list without having any error. Otherwise, restart your machine if there are errors.&lt;/p&gt; &#xA;&lt;h3&gt;Clone the Repository&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/inkonchain/node&#xA;cd node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Copy .env.example to .env&lt;/h3&gt; &#xA;&lt;p&gt;Make a copy of &lt;code&gt;.env.example&lt;/code&gt; named &lt;code&gt;.env&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cp .env.example .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open &lt;code&gt;.env&lt;/code&gt; with your editor of choice&lt;/p&gt; &#xA;&lt;h3&gt;Mandatory configurations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;NETWORK_NAME&lt;/strong&gt; - Choose which Optimism network layer you want to operate on: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;ink-sepolia&lt;/code&gt; - Ink Sepolia (Testnet)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ink-mainnet&lt;/code&gt; - Ink (Mainnet)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NODE_TYPE&lt;/strong&gt; - Choose the type of node you want to run: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;full&lt;/code&gt; (Full node) - A Full node contains a few recent blocks without historical states.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;archive&lt;/code&gt; (Archive node) - An Archive node stores the complete history of the blockchain, including historical states.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OP_NODE__RPC_ENDPOINT&lt;/strong&gt; - Specify the endpoint for the RPC of Layer 1 (e.g., Ethereum mainnet). For instance, you can use the free plan of Quicknode for the Ethereum mainnet.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OP_NODE__L1_BEACON&lt;/strong&gt; - Specify the beacon endpoint of Layer 1. You can use &lt;a href=&#34;https://www.quicknode.com&#34;&gt;QuickNode for the beacon endpoint&lt;/a&gt;. For example: &lt;a href=&#34;https://xxx-xxx-xxx.quiknode.pro/db55a3908ba7e4e5756319ffd71ec270b09a7dce&#34;&gt;https://xxx-xxx-xxx.quiknode.pro/db55a3908ba7e4e5756319ffd71ec270b09a7dce&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OP_NODE__RPC_TYPE&lt;/strong&gt; - Specify the service provider for the RPC endpoint you&#39;ve chosen in the previous step. The available options are: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;alchemy&lt;/code&gt; - Alchemy&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;quicknode&lt;/code&gt; - Quicknode (ETH only)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;erigon&lt;/code&gt; - Erigon&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;basic&lt;/code&gt; - Other providers&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Optional configurations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;OP_GETH__SYNCMODE&lt;/strong&gt; - Specify sync mode for the execution client &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Unspecified - Use default snap sync for full node and full sync for archive node&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;snap&lt;/code&gt; - Snap Sync (Default)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;full&lt;/code&gt; - Full Sync (For archive node, not recommended for full node)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;IMAGE_TAG__[...]&lt;/strong&gt; - Use custom docker image for specified components.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PORT__[...]&lt;/strong&gt; - Use custom port for specified components.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Operating the Node&lt;/h2&gt; &#xA;&lt;h3&gt;Start&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker compose up -d --build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will start the node in a detatched shell (&lt;code&gt;-d&lt;/code&gt;), meaning the node will continue to run in the background. We recommended to add &lt;code&gt;--build&lt;/code&gt; to make sure that latest changes are being applied.&lt;/p&gt; &#xA;&lt;h3&gt;View logs&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker compose logs -f --tail 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To view logs of all containers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker compose logs &amp;lt;CONTAINER_NAME&amp;gt; -f --tail 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To view logs for a specific container. Most commonly used &lt;code&gt;&amp;lt;CONTAINER_NAME&amp;gt;&lt;/code&gt; are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;op-geth&lt;/li&gt; &#xA; &lt;li&gt;op-node&lt;/li&gt; &#xA; &lt;li&gt;bedrock-init&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Stop&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker compose down&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will shut down the node without wiping any volumes. You can safely run this command and then restart the node again.&lt;/p&gt; &#xA;&lt;h3&gt;Restart&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker compose restart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will restart the node safely with minimal downtime but without upgrading the node.&lt;/p&gt; &#xA;&lt;h3&gt;Upgrade&lt;/h3&gt; &#xA;&lt;p&gt;Pull the latest updates from GitHub, and Docker Hub and rebuild the container.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git pull&#xA;docker compose pull&#xA;docker compose up -d --build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will upgrade your node with minimal downtime.&lt;/p&gt; &#xA;&lt;h3&gt;Wipe [DANGER]&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker compose down -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will shut down the node and WIPE ALL DATA. Proceed with caution!&lt;/p&gt; &#xA;&lt;h2&gt;Monitoring&lt;/h2&gt; &#xA;&lt;h3&gt;Estimate remaining sync time&lt;/h3&gt; &#xA;&lt;p&gt;Run progress.sh to estimate remaining sync time and speed.&lt;/p&gt; &#xA;&lt;p&gt;Uses &lt;code&gt;Cast&lt;/code&gt; command from Foundry tool set. Installation instructions here: &lt;a href=&#34;https://getfoundry.sh/&#34;&gt;https://getfoundry.sh/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./progress.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will show the sync speed in blocks per minute and the time until sync is completed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Chain ID: 57073&#xA;Please wait&#xA;Blocks per minute: ...&#xA;Hours until sync completed: ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Grafana dashboard&lt;/h3&gt; &#xA;&lt;p&gt;Grafana is exposed at &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; and comes with one pre-loaded dashboard (&#34;Simple Node Dashboard&#34;). Simple Node Dashboard includes basic node information and will tell you if your node ever falls out of sync with the reference L2 node or if a state root fault is detected.&lt;/p&gt; &#xA;&lt;p&gt;Use the following login details to access the dashboard:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Username: &lt;code&gt;admin&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Password: &lt;code&gt;ink&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Navigate over to &lt;code&gt;Dashboards &amp;gt; Manage &amp;gt; Simple Node Dashboard&lt;/code&gt; to see the dashboard, see the following gif if you need help:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14298799/171476634-0cb84efd-adbf-4732-9c1d-d737915e1fa7.gif&#34; alt=&#34;metrics dashboard gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;Walking back L1Block with curr=0x0000...:0 next=0x0000...:0&lt;/h3&gt; &#xA;&lt;p&gt;If you experience &#34;walking back L1Block with curr=0x0000...:0 next=0x0000...:0&#34; for a long time after the Ecotone upgrade, consider these fixes:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Wait for a few minutes. This issue usually resolves itself after some time.&lt;/li&gt; &#xA; &lt;li&gt;Restart docker compose: &lt;code&gt;docker compose down&lt;/code&gt; and &lt;code&gt;docker compose up -d --build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If it&#39;s still not working, try setting &lt;code&gt;OP_GETH__SYNCMODE=full&lt;/code&gt; in .env and restart docker compose&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>