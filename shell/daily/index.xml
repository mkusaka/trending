<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-12T01:36:11Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gh2o/bash_tls</title>
    <updated>2024-05-12T01:36:11Z</updated>
    <id>tag:github.com,2024-05-12:/gh2o/bash_tls</id>
    <link href="https://github.com/gh2o/bash_tls" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A minimal TLS 1.2 client implementation in a pure Bash script&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;bash_tls&lt;/h1&gt; &#xA;&lt;p&gt;A minimal TLS 1.2 implementation in a pure Bash script&lt;/p&gt; &#xA;&lt;p&gt;bash_tls implements TLS well enough to make a simple HTTPS request to most web servers.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;./bash_tls.sh [https://website.com/path/to/file]&lt;/code&gt;&lt;br&gt; If a URL is not given, defaults to &lt;code&gt;https://www.google.com/robots.txt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports a single cipher suite: TLS_RSA_WITH_AES_128_GCM_SHA256 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;RSA key exchange&lt;/li&gt; &#xA;   &lt;li&gt;HMAC-SHA256 as pseudorandom function&lt;/li&gt; &#xA;   &lt;li&gt;AES in GCM mode for encryption&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Supports Server Name Indication&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Missing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Only supports RSA certificates&lt;/li&gt; &#xA; &lt;li&gt;Does not validate certificate chain&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;bash_tls depends only on the following software:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;bash 4.3+ compiled with &lt;code&gt;--enable-net-redirections&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;GNU bc (for doing RSA calculations)&lt;/li&gt; &#xA; &lt;li&gt;sha256sum (from Linux coreutils) or shasum (on Mac)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;Don&#39;t ask.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>TrueOsiris/docker-vrising</title>
    <updated>2024-05-12T01:36:11Z</updated>
    <id>tag:github.com,2024-05-12:/TrueOsiris/docker-vrising</id>
    <link href="https://github.com/TrueOsiris/docker-vrising" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Container for V-Rising dedicated server&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/TrueOsiris/docker-vrising&#34;&gt; &lt;img alt=&#34;Iroh&#34; src=&#34;https://github.com/TrueOsiris/docker-vrising/raw/main/assets/docker-virising.png?raw=true&#34; height=&#34;250&#34;&gt; &lt;/a&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;Dockerized V Rising dedicated server in an Ubuntu 22.04 container with Wine.&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/trueosiris/vrising/&#34;&gt;&lt;img src=&#34;https://badgen.net/docker/pulls/trueosiris/vrising?icon=docker&amp;amp;label=pulls&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/trueosiris/vrising/&#34;&gt;&lt;img src=&#34;https://badgen.net/docker/stars/trueosiris/vrising?icon=docker&amp;amp;label=stars&#34; alt=&#34;Docker Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/trueosiris/vrising/&#34;&gt;&lt;img src=&#34;https://badgen.net/docker/size/trueosiris/vrising?icon=docker&amp;amp;label=image%20size&#34; alt=&#34;Docker Image Size&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://badgen.net/github/stars/trueosiris/docker-vrising?icon=github&amp;amp;label=stars&#34; alt=&#34;Github stars&#34;&gt; &lt;img src=&#34;https://badgen.net/github/forks/trueosiris/docker-vrising?icon=github&amp;amp;label=forks&#34; alt=&#34;Github forks&#34;&gt; &lt;img src=&#34;https://badgen.net/github/open-issues/TrueOsiris/docker-vrising&#34; alt=&#34;Github open issues&#34;&gt; &lt;img src=&#34;https://badgen.net/github/closed-issues/TrueOsiris/docker-vrising&#34; alt=&#34;Github closed issues&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/TrueOsiris/docker-vrising&#34; alt=&#34;Github last-commit&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;1.0 update&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The game is working perfectly with a new run of the container (from scratch). I&#39;m on it with several buddies and &lt;i&gt;tested&lt;/i&gt; for 3 hours.&lt;/li&gt; &#xA; &lt;li&gt;When the server is passworded, joining via Steam seems &lt;b&gt;not&lt;/b&gt; possible. Use the ingame server list to join.&lt;/li&gt; &#xA; &lt;li&gt;Make sure &lt;code&gt;&#34;ListOnSteam&#34;: true,&lt;/code&gt; and &lt;code&gt;&#34;ListOnEOS&#34;: true&lt;/code&gt; are set in the ServerHostSettings.json in \persistentdata, so the server is visible in the serverlist&lt;/li&gt; &#xA; &lt;li&gt;Launching the server can take up to 10 minutes, even on a fast system, certainly with an existing save. Below is a screenshot of the end of the docker log of a functioning server, at the time we are able to connect to it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Environment variables&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TZ&lt;/td&gt; &#xA;   &lt;td&gt;Europe/Brussels&lt;/td&gt; &#xA;   &lt;td&gt;timezone for ntpdate&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SERVERNAME&lt;/td&gt; &#xA;   &lt;td&gt;published servername&lt;/td&gt; &#xA;   &lt;td&gt;mandatory setting that overrules the ServerHostSettings.json entry&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WORLDNAME&lt;/td&gt; &#xA;   &lt;td&gt;optional worldname&lt;/td&gt; &#xA;   &lt;td&gt;default = world1. No real need to alter this. saves will be in a subdir WORLDNAME&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GAMEPORT&lt;/td&gt; &#xA;   &lt;td&gt;optional game udp port&lt;/td&gt; &#xA;   &lt;td&gt;to overrule Port in ServerHostSettings.json config&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;QUERYPORT&lt;/td&gt; &#xA;   &lt;td&gt;optional query port&lt;/td&gt; &#xA;   &lt;td&gt;to overrule QueryPort in ServerHostSettings.json config&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Ports&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Exposed Container port&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9876&lt;/td&gt; &#xA;   &lt;td&gt;UDP&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9877&lt;/td&gt; &#xA;   &lt;td&gt;UDP&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Volumes&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Volume&lt;/th&gt; &#xA;   &lt;th&gt;Container path&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;steam install path&lt;/td&gt; &#xA;   &lt;td&gt;/mnt/vrising/server&lt;/td&gt; &#xA;   &lt;td&gt;path to hold the dedicated server files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;world&lt;/td&gt; &#xA;   &lt;td&gt;/mnt/vrising/persistentdata&lt;/td&gt; &#xA;   &lt;td&gt;path that holds the world files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Docker cli&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d --name=&#39;vrising&#39; \&#xA;--net=&#39;bridge&#39; \&#xA;--restart=unless-stopped \&#xA;-e TZ=&#34;Europe/Paris&#34; \&#xA;-e SERVERNAME=&#34;trueosiris-V&#34; \&#xA;-v &#39;/path/on/host/server&#39;:&#39;/mnt/vrising/server&#39;:&#39;rw&#39; \&#xA;-v &#39;/path/on/host/persistentdata&#39;:&#39;/mnt/vrising/persistentdata&#39;:&#39;rw&#39; \&#xA;-p 9876:9876/udp \&#xA;-p 9877:9877/udp \&#xA;&#39;trueosiris/vrising&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;docker-compose.yml&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;services:&#xA;  vrising:&#xA;    image: trueosiris/vrising&#xA;    environment:&#xA;      - TZ=Europe/Paris&#xA;      - SERVERNAME=vrising-TrueOsiris&#xA;    volumes:&#xA;      - type: bind&#xA;        source: /your/host/vrising/server&#xA;        target: /mnt/vrising/server&#xA;        bind:&#xA;          create_host_path: true&#xA;      - type: bind&#xA;        source: /your/host/vrising/persistentdata&#xA;        target: /mnt/vrising/persistentdata&#xA;        bind:&#xA;          create_host_path: true&#xA;    ports:&#xA;      - &#39;9876:9876/udp&#39;&#xA;      - &#39;9877:9877/udp&#39;&#xA;    restart: unless-stopped&#xA;    network_mode: bridge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/StunlockStudios/vrising-dedicated-server-instructions&#34;&gt;V Rising Dedicated Server Instructions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/repository/docker/trueosiris/vrising&#34;&gt;Dockerhub - Trueosiris/vrising&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TrueOsiris/docker-vrising&#34;&gt;Github - trueosiris/vrising&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;RCON &lt;small&gt;- Optional&lt;/small&gt;&lt;/h2&gt; &#xA;&lt;p&gt;To enable RCON edit &lt;code&gt;ServerHostSettings.json&lt;/code&gt; and paste following lines after &lt;code&gt;QueryPort&lt;/code&gt;. To communicate using RCON protocal use the &lt;a href=&#34;https://github.com/gorcon/rcon-cli&#34;&gt;RCON CLI&lt;/a&gt; by gorcon.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;Rcon&#34;: {&#xA;  &#34;Enabled&#34;: true,&#xA;  &#34;Password&#34;: &#34;docker&#34;,&#xA;  &#34;Port&#34;: 25575&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Remarks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Server config files are in &lt;code&gt;/path/on/host/persistentdata/Settings&lt;/code&gt;. Files in &lt;code&gt;/path/on/host/server/&lt;/code&gt; are overwritten on Steam update. &lt;br&gt; Priority of settings is&lt;/p&gt; &lt;p&gt;a. container variables&lt;/p&gt; &lt;p&gt;b. files in /persistentdata&lt;/p&gt; &lt;p&gt;c. files in /server. (and these are reset to defaults each new patch)&lt;/p&gt; &lt;p&gt;If there are no files in &lt;code&gt;/path/on/host/persistentdata/Settings&lt;/code&gt; on container start, the default files will be copied there from the /server directory.&lt;br&gt; Edit &lt;code&gt;ServerHostSettings.json&lt;/code&gt; if you want to change the ports, descriptions etc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you use different internal &amp;amp; external ports, you can only use direct connect. For example &lt;code&gt;-p 12345:6789/udp&lt;/code&gt; container port 6789 as defined in ServerHostSettings.json, and exposed as 12345 will make your server invisible &lt;del&gt;, even if &lt;code&gt;&#34;ListOnMasterServer=true&#34;&lt;/code&gt;&lt;/del&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure &lt;code&gt;&#34;ListOnSteam&#34;: true,&lt;/code&gt; and &lt;code&gt;&#34;ListOnEOS&#34;: true&lt;/code&gt; are set in the ServerHostSettings.json in \persistentdata, so the server is visible in the serverlist.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you want to see the server in the server list and want to use 27015-27016/UDP, you&#39;ll need to change the ports in the ServerHostSettings.json file to 27015 and 27016. Then expose these ports (below). Of course, forward these udp ports on your firewall from incoming wan to the ports on the internal ip of your dockerhost.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Start the container &amp;amp; let the server install.&lt;/li&gt; &#xA;   &lt;li&gt;Stop the container.&lt;/li&gt; &#xA;   &lt;li&gt;Alter the ports in &lt;code&gt;/path/on/host/persistentdata/Settings/ServerHostSettings.json&lt;/code&gt; to &lt;pre&gt;&lt;code&gt; &#34;Port&#34;: 27015,&#xA; &#34;QueryPort&#34;: 27016,&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;On your firewall, port forward incoming wan udp ports 27015 and 27016 to the same udp ports on your dockerhost ip.&lt;/li&gt; &#xA;   &lt;li&gt;Restart the container with these ports: &lt;pre&gt;&lt;code&gt; -p 27015:27015/udp&#xA; -p 27016:27016/udp&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you want to continue from your local game, stop the container, overwrite the persistentdata contents with your local data, and relaunch the server.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Docker log&lt;/h2&gt; &#xA;&lt;p&gt;The log of a functional server in 1.0 should look like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://timmer.ninja/images/vrising-dockerlog.png&#34; alt=&#34;docker-log&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lgs2007m/Actions-OpenWrt</title>
    <updated>2024-05-12T01:36:11Z</updated>
    <id>tag:github.com,2024-05-12:/lgs2007m/Actions-OpenWrt</id>
    <link href="https://github.com/lgs2007m/Actions-OpenWrt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;自用&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;借助 GitHub Actions 的 OpenWrt 在线自动编译.&lt;/h1&gt; &#xA;&lt;h4&gt;hanwckf大佬mt798x闭源仓库- &lt;a href=&#34;https://github.com/hanwckf/immortalwrt-mt798x&#34;&gt;hanwckf/immortalwrt-mt798x&lt;/a&gt;.&lt;/h4&gt; &#xA;&lt;h4&gt;237大佬mt798x闭源仓库- &lt;a href=&#34;https://github.com/padavanonly/immortalwrt-mt798x&#34;&gt;padavanonly/immortalwrt-mt798x&lt;/a&gt;.&lt;/h4&gt; &#xA;&lt;h4&gt;hanwckf大佬mt798x uboot仓库- &lt;a href=&#34;https://github.com/hanwckf/bl-mt798x&#34;&gt;hanwckf/bl-mt798x&lt;/a&gt;.&lt;/h4&gt; &#xA;&lt;h3&gt;刷砖也不怕！可以通过串口救砖：&lt;a href=&#34;https://www.cnblogs.com/p123/p/18046679&#34;&gt;MediaTek Filogic 系列路由器串口救砖教程&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;JDCloud-AX6000-Baili workflow 手动运行可选项：&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Use the original MAC address order&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Choose mt_wifi firmware&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Choose warp firmware&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Use GSW switch driver (non-DSA)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Use luci-app-mtk wifi config&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Not build luci-app-dockerman&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;1. Use the original MAC address order&lt;/h4&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;该选项默认开启，即修改源码中的WAN、LAN地址顺序，恢复原厂MAC地址顺序并固定WiFi MAC，不需要请取消打钩。&lt;br&gt; 目前源码的WAN、LAN的MAC地址读取位置与原厂相反，所以WAN、LAN的MAC较原厂MAC是反的，同时目前源码的WiFi MAC最后一个字节重启后会变。&lt;br&gt; 开启该选项后可以恢复WAN、LAN原厂MAC顺序，同时将WiFi MAC写到无线对应dat文件中，以便固定WiFi MAC。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h4&gt;2. Choose mt_wifi/warp firmware&lt;/h4&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;默认mt_wifi和warp使用TP XDR6088的fw-20230808，个人使用感觉无线ping丢包较少。&lt;br&gt; mt_wifi：&lt;br&gt; no-new-fw：不使用新的无线firmware，使用mt798x-7.6.6.1-src驱动中的fw-20220906&lt;br&gt; mt7986-fw-20221208：使用mt7986-7.6.7.0-20221209-b9c02f-obj提取的fw-20221208&lt;br&gt; mt7986-fw-jdc：使用JDCOS-JDC04-4.2.0.r4080固件提取的fw-20230228&lt;br&gt; mt7986-fw-20230421：使用mtk-openwrt-feeds(20230421)的fw-20230421&lt;br&gt; mt7986-fw-20230808：使用TP XDR6088的fw-20230808&lt;br&gt; mt7986-fw-20231024：使用mtk-openwrt-feeds(20231024)的fw-20231024&lt;br&gt; warp：&lt;br&gt; no-new-fw：不使用新的无线firmware，使用warp_20221209-3e6ae1-src驱动中的fw-20221208，这个fw和mt7986-7.6.7.0-20221209-b9c02f-obj提取的fw-20221208相同&lt;br&gt; mt7986-fw-jdc：使用JDCOS-JDC04-4.2.0.r4080固件提取的fw-20230308&lt;br&gt; mt7986-fw-20230421：使用mtk-openwrt-feeds(20230421)的fw-20230421&lt;br&gt; mt7986-fw-20230808：使用TP XDR6088的fw-20230808&lt;br&gt; mt7986-fw-20231024：使用mtk-openwrt-feeds(20231024)的fw-20231024&lt;/p&gt; &#xA;&lt;p&gt;.mtwifi-cfg.config配置文件中已设置使用新的无线firmware：&lt;br&gt; CONFIG_MTK_MT7986_NEW_FW=y&lt;br&gt; CONFIG_WARP_NEW_FW=y&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h4&gt;3. Use GSW switch driver (non-DSA)&lt;/h4&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;该选项默认关闭，即按源码DTS中MT7531交换机的设置使用DSA交换机驱动，需要使用GSW交换机驱动请打钩。&lt;br&gt; GSW：Gigabit Switch swconfig 模式，有交换机配置插件，不过京东云百里AX6000的WAN是单独接CPU的2.5G PHY RTL8221B，不接在MT7531交换机上，所以WAN不支持在交换机配置插件中设置VLAN。&lt;br&gt; DSA：Distributed Switch Architecture 分布式交换架构模式，DSA去除了交换机配置插件，但在“网口”-“接口”-“设备”选项卡中的br-lan设备中的网桥VLAN过滤中可以查看网口状态设置VLAN。&lt;br&gt; 原厂固件和hanwckf大佬源码中京东云百里AX6000都是使用DSA的，建议使用DSA。&lt;br&gt; 两者具体区别可以参考OpenWrt社区资料：&lt;a href=&#34;https://openwrt.org/docs/guide-user/network/dsa/converting-to-dsa&#34;&gt;converting-to-dsa&lt;/a&gt; &lt;a href=&#34;https://openwrt.org/docs/guide-user/network/dsa/dsa-mini-tutorial&#34;&gt;dsa-mini-tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h4&gt;4. Use luci-app-mtk wifi config&lt;/h4&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;该选项默认关闭，即按.mtwifi-cfg.config配置文件，使用mtwifi-cfg配置工具，需要使用旧的luci-app-mtk无线配置工具请打钩。&lt;br&gt; mtwifi-cfg：为mtwifi设计的无线配置工具，兼容openwrt原生luci和netifd，可调整无线驱动的参数较少，配置界面美观友好，由于是新开发的工具，可能存在一些问题。&lt;br&gt; luci-app-mtk：源自mtk-sdk提供的配置工具，需要配合wifi-profile脚本使用，可调整无线驱动的几乎所有参数，配置界面较为简陋。&lt;br&gt; 区别详见大佬的博客&lt;a href=&#34;https://cmi.hanwckf.top/p/immortalwrt-mt798x/#mtwifi%E6%97%A0%E7%BA%BF%E9%85%8D%E7%BD%AE%E5%B7%A5%E5%85%B7%E8%AF%B4%E6%98%8E&#34;&gt;mtwifi无线配置工具说明&lt;/a&gt;&lt;br&gt; .mtwifi-cfg.config配置文件中已设置使用mtwifi-cfg配置工具：&lt;br&gt; CONFIG_PACKAGE_luci-app-mtwifi-cfg=y&lt;br&gt; CONFIG_PACKAGE_luci-i18n-mtwifi-cfg-zh-cn=y&lt;br&gt; CONFIG_PACKAGE_mtwifi-cfg=y&lt;br&gt; CONFIG_PACKAGE_lua-cjson=y&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h4&gt;5. Not build luci-app-dockerman&lt;/h4&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;该选项默认关闭，即按.mtwifi-cfg.config配置文件编译dockerman，不需要编译dockerman请打钩。&lt;br&gt; .mtwifi-cfg.config配置文件中已设置编译dockerman：&lt;br&gt; CONFIG_PACKAGE_luci-app-dockerman=y&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;CMCC-RAX3000M-eMMC/CMCC-XR30-eMMC workflow 手动运行可选项：&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Use the original MAC address order&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Use nx30pro eeprom&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;eMMC use 52MHz max-frequency&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Use luci-app-mtk wifi config&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Not build luci-app-dockerman&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;1. Use the original MAC address order&lt;/h4&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;该选项默认开启，即修改源码中的WAN、LAN地址顺序，恢复原厂MAC地址顺序并固定WiFi MAC，不需要请取消打钩。&lt;br&gt; 目前源码的WAN、LAN的MAC地址读取位置与原厂相反，所以WAN、LAN的MAC较原厂MAC是反的，同时目前源码的WiFi MAC最后一个字节重启后会变。&lt;br&gt; 开启该选项后可以恢复WAN、LAN原厂MAC顺序，同时将WiFi MAC写到无线对应dat文件中，以便固定WiFi MAC。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h4&gt;2. Use nx30pro eeprom&lt;/h4&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;该选项默认开启，即使用nx30pro的高功率eeprom，不需要请取消打钩。&lt;br&gt; 不使用独立fem无线功放的MT7981B路由器可以通过替换高功率的eeprom提高信号强度。&lt;br&gt; RAX3000M/XR30的factory eeprom设置功率不高，2.4G是23dBm、5G是22dBm，使用NX30 PRO的高功率eeprom，2.4G可提升至25dBm、5G提升至24dBm。&lt;br&gt; 开启该选项会使用NX30 PRO的eeprom替换掉固件中的MT7981_iPAiLNA_EEPROM.bin文件，并写入WiFi MAC到dat以便固定MAC。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h4&gt;3. eMMC use 52MHz max-frequency&lt;/h4&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;该选项默认关闭，即按源码DTS中eMMC频率26MHz编译，需要设置为52MHz请打钩。&lt;br&gt; RAX3000M算力版原厂机子选用的eMMC颗粒品质不太行，不能运行在MT7981B eMMC最高的52MHz频率，所以原厂固件使用的是26MHz频率。&lt;br&gt; 除非更换过eMMC，不然不建议使用52MHz，基本跑一段时间都会出问题，老实使用26MHz即可。&lt;br&gt; RAX3000Z增强版原厂固件使用的是52MHz频率，没有机子无法测试eMMC是否有问题，云适配。&lt;br&gt; yml脚本中固定设置了eMMC使用highspeed，以达到设置的26MHz、52MHz。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h4&gt;4. Use luci-app-mtk wifi config&lt;/h4&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;该选项默认关闭，即按.mtwifi-cfg.config配置文件，使用mtwifi-cfg配置工具，需要使用旧的luci-app-mtk无线配置工具请打钩。&lt;br&gt; mtwifi-cfg：为mtwifi设计的无线配置工具，兼容openwrt原生luci和netifd，可调整无线驱动的参数较少，配置界面美观友好，由于是新开发的工具，可能存在一些问题。&lt;br&gt; luci-app-mtk：源自mtk-sdk提供的配置工具，需要配合wifi-profile脚本使用，可调整无线驱动的几乎所有参数，配置界面较为简陋。&lt;br&gt; 区别详见大佬的博客&lt;a href=&#34;https://cmi.hanwckf.top/p/immortalwrt-mt798x/#mtwifi%E6%97%A0%E7%BA%BF%E9%85%8D%E7%BD%AE%E5%B7%A5%E5%85%B7%E8%AF%B4%E6%98%8E&#34;&gt;mtwifi无线配置工具说明&lt;/a&gt;&lt;br&gt; .mtwifi-cfg.config配置文件中已设置使用mtwifi-cfg配置工具：&lt;br&gt; CONFIG_PACKAGE_luci-app-mtwifi-cfg=y&lt;br&gt; CONFIG_PACKAGE_luci-i18n-mtwifi-cfg-zh-cn=y&lt;br&gt; CONFIG_PACKAGE_mtwifi-cfg=y&lt;br&gt; CONFIG_PACKAGE_lua-cjson=y&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h4&gt;5. Not build luci-app-dockerman&lt;/h4&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;该选项默认关闭，即按.mtwifi-cfg.config配置文件编译dockerman，不需要编译dockerman请打钩。&lt;br&gt; .mtwifi-cfg.config配置文件中已设置编译dockerman：&lt;br&gt; CONFIG_PACKAGE_luci-app-dockerman=y&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;感谢P3TERX的Actions-OpenWrt&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/P3TERX/Actions-OpenWrt&#34;&gt;P3TERX&lt;/a&gt; &lt;a href=&#34;https://p3terx.com/archives/build-openwrt-with-github-actions.html&#34;&gt;Read the details in my blog (in Chinese) | 中文教程&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>