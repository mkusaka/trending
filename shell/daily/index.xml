<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-24T01:45:05Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>xiaoleGun/KernelSU_Action</title>
    <updated>2023-01-24T01:45:05Z</updated>
    <id>tag:github.com,2023-01-24:/xiaoleGun/KernelSU_Action</id>
    <link href="https://github.com/xiaoleGun/KernelSU_Action" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A action for build KernelSU to your kernel&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;中文&lt;/strong&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/xiaoleGun/KernelSU_Action/main/README_EN.md&#34;&gt;English&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;KernelSU Action&lt;/h1&gt; &#xA;&lt;p&gt;用于Non-GKI Kernel的Action，具有一定的普遍性，需要了解内核及Android的相关知识得以运用。&lt;/p&gt; &#xA;&lt;h2&gt;支持内核&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;4.19&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;4.14&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;使用&lt;/h2&gt; &#xA;&lt;p&gt;Fork本仓库到你的储存库然后点击&lt;code&gt;Action&lt;/code&gt;，在左侧可看见&lt;code&gt;Build Kernel Common&lt;/code&gt;/&lt;code&gt;Build boot image&lt;/code&gt;选项，点击选项会看见右边的大对话框的上面会有&lt;code&gt;Run workflows&lt;/code&gt;，里面有需要你填写的配置，看下面的部分，了解如何填写。&lt;/p&gt; &#xA;&lt;p&gt;或者使用config.env(设置USE_CONFIG为true)，编辑config.env然后提交，按star或者run workflows，这个功能是方便手机修改参数。&lt;/p&gt; &#xA;&lt;h3&gt;Build Kernel&lt;/h3&gt; &#xA;&lt;p&gt;编译成功后，会在&lt;code&gt;Action&lt;/code&gt;上传AnyKernel3，已经关闭设备检查，请在Twrp刷入&lt;/p&gt; &#xA;&lt;h4&gt;Kernel Source&lt;/h4&gt; &#xA;&lt;p&gt;填写你的内核仓库地址&lt;/p&gt; &#xA;&lt;p&gt;例如: &lt;a href=&#34;https://github.com/Diva-Room/Miku_kernel_xiaomi_wayne&#34;&gt;https://github.com/Diva-Room/Miku_kernel_xiaomi_wayne&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Branch&lt;/h4&gt; &#xA;&lt;p&gt;填写你的内核分支&lt;/p&gt; &#xA;&lt;p&gt;例如: TDA&lt;/p&gt; &#xA;&lt;h4&gt;Kernel defconfig&lt;/h4&gt; &#xA;&lt;p&gt;填写你的内核配置文件名&lt;/p&gt; &#xA;&lt;p&gt;例如: vendor/wayne_defconfig&lt;/p&gt; &#xA;&lt;h4&gt;Kernel file&lt;/h4&gt; &#xA;&lt;p&gt;填写需要刷写的image，一般与你的aosp-device tree里的BOARD_KERNEL_IMAGE_NAME是一致的&lt;/p&gt; &#xA;&lt;p&gt;例如: Image.gz-dtb&lt;/p&gt; &#xA;&lt;h4&gt;Clang version&lt;/h4&gt; &#xA;&lt;p&gt;填写需要使用的Clang版本&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Clang 版本&lt;/th&gt; &#xA;   &lt;th&gt;对应 Android 版本&lt;/th&gt; &#xA;   &lt;th&gt;AOSP-Clang 版本&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;12.0.5&lt;/td&gt; &#xA;   &lt;td&gt;Android S&lt;/td&gt; &#xA;   &lt;td&gt;r416183b&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;14.0.6&lt;/td&gt; &#xA;   &lt;td&gt;Android T&lt;/td&gt; &#xA;   &lt;td&gt;r450784d&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;14.0.7&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;r450784e&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;15.0.1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;r458507&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;一般Clang12就能通过大部分4.14及以上的内核的编译 我自己的MI 6X 4.19使用的是r450784d&lt;/p&gt; &#xA;&lt;h4&gt;Extra build commands&lt;/h4&gt; &#xA;&lt;p&gt;有的内核需要手动加入一些编译命令，才能正常编译，不需要的话不填写即可 请在命令与命令之间用空格隔开&lt;/p&gt; &#xA;&lt;p&gt;例如: LLVM=1 LLVM_IAS=1&lt;/p&gt; &#xA;&lt;h4&gt;Kprobes&lt;/h4&gt; &#xA;&lt;p&gt;如果你的内核Kprobes工作正常这项改成true即可自动在defconfig注入参数&lt;/p&gt; &#xA;&lt;h3&gt;Build boot image&lt;/h3&gt; &#xA;&lt;p&gt;编译成功后，会在&lt;code&gt;Action&lt;/code&gt;上传boot-su.img，使用fastboot刷入到手机&lt;/p&gt; &#xA;&lt;h4&gt;Kernel Source&lt;/h4&gt; &#xA;&lt;p&gt;填写你的内核仓库地址&lt;/p&gt; &#xA;&lt;p&gt;例如: &lt;a href=&#34;https://github.com/Diva-Room/Miku_kernel_xiaomi_wayne&#34;&gt;https://github.com/Diva-Room/Miku_kernel_xiaomi_wayne&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Branch&lt;/h4&gt; &#xA;&lt;p&gt;填写你的内核分支&lt;/p&gt; &#xA;&lt;p&gt;例如: TDA&lt;/p&gt; &#xA;&lt;h4&gt;Kernel Build Config&lt;/h4&gt; &#xA;&lt;p&gt;填写你的内核构建配置文件，需要直链&lt;/p&gt; &#xA;&lt;p&gt;例如: &lt;a href=&#34;https://raw.githubusercontent.com/xiaoleGun/KernelSU_action/main/configs/build.config.wayne&#34;&gt;https://raw.githubusercontent.com/xiaoleGun/KernelSU_action/main/configs/build.config.wayne&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;里面要改的不多，下面是build config和Device Tree(设备树)里的BoardConfig/BoardConfigCommon的对照&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;build config&lt;/th&gt; &#xA;   &lt;th&gt;BoardConfig/BoardConfigCommon&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DEFCONFIG&lt;/td&gt; &#xA;   &lt;td&gt;TARGET_KERNEL_CONFIG&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BOOT_IMAGE_HEADER_VERSION&lt;/td&gt; &#xA;   &lt;td&gt;BOARD_BOOT_HEADER_VERSION&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BASE_ADDRESS&lt;/td&gt; &#xA;   &lt;td&gt;BOARD_KERNEL_BASE&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PAGE_SIZE&lt;/td&gt; &#xA;   &lt;td&gt;BOARD_KERNEL_PAGESIZE&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;KERNEL_CMDLINE&lt;/td&gt; &#xA;   &lt;td&gt;BOARD_KERNEL_CMDLINE&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MKBOOTIMG_EXTRA_ARGS&lt;/td&gt; &#xA;   &lt;td&gt;BOARD_MKBOOTIMG_ARGS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;KERNEL_BINARY&lt;/td&gt; &#xA;   &lt;td&gt;BOARD_KERNEL_IMAGE_NAME&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;下面是一些build config里面的选项的用途&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;build config&lt;/th&gt; &#xA;   &lt;th&gt;作用&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VENDOR_RAMDISK_BINARY&lt;/td&gt; &#xA;   &lt;td&gt;ramdisk 路径&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ARCH&lt;/td&gt; &#xA;   &lt;td&gt;架构 arm/arm64/x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BUILD_BOOT_IMG&lt;/td&gt; &#xA;   &lt;td&gt;为 1 时创建 boot.img&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SKIP_VENDOR_BOOT&lt;/td&gt; &#xA;   &lt;td&gt;为 1 时跳过创建 vendor_boot&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FILES&lt;/td&gt; &#xA;   &lt;td&gt;需要输出的文件&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CLANG_VERSION&lt;/td&gt; &#xA;   &lt;td&gt;我自定义的选项，用于定义 clang 版本&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;剩下的就是杂七杂八的编译器需要，更多请参见&lt;a href=&#34;https://android.googlesource.com/kernel/build/+/refs/heads/master-kernel-build-2022/build.sh&#34;&gt;build/build.sh&lt;/a&gt;的注释&lt;/p&gt; &#xA;&lt;h4&gt;Boot image to get ramdisk&lt;/h4&gt; &#xA;&lt;p&gt;故名思义，提供一个可以正常开机的boot镜像，需要直链，最好是同一套内核源码以及与你当前系统同一套设备树从aosp构建出来的。ramdisk里面包含分区表以及init，没有的话可能会重启到fastboot。&lt;/p&gt; &#xA;&lt;p&gt;例如: &lt;a href=&#34;https://raw.githubusercontent.com/xiaoleGun/KernelSU_action/main/boot/boot-wayne-from-Miku-UI-latest.img&#34;&gt;https://raw.githubusercontent.com/xiaoleGun/KernelSU_action/main/boot/boot-wayne-from-Miku-UI-latest.img&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;感谢&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/osm0sis/AnyKernel3&#34;&gt;AnyKernel3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://android.googlesource.com&#34;&gt;AOSP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tiann/KernelSU&#34;&gt;KernelSU&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>onedr0p/flux-cluster-template</title>
    <updated>2023-01-24T01:45:05Z</updated>
    <id>tag:github.com,2023-01-24:/onedr0p/flux-cluster-template</id>
    <link href="https://github.com/onedr0p/flux-cluster-template" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A community opinionated template for deploying a single Kubernetes cluster with Ansible and Terraform backed by Flux, SOPS, GitHub Actions, Renovate and more!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Template for deploying k3s backed by Flux&lt;/h1&gt; &#xA;&lt;p&gt;Highly opinionated template for deploying a single &lt;a href=&#34;https://k3s.io&#34;&gt;k3s&lt;/a&gt; cluster with &lt;a href=&#34;https://www.ansible.com&#34;&gt;Ansible&lt;/a&gt; and &lt;a href=&#34;https://www.terraform.io&#34;&gt;Terraform&lt;/a&gt; backed by &lt;a href=&#34;https://toolkit.fluxcd.io/&#34;&gt;Flux&lt;/a&gt; and &lt;a href=&#34;https://toolkit.fluxcd.io/guides/mozilla-sops/&#34;&gt;SOPS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The purpose here is to showcase how you can deploy an entire Kubernetes cluster and show it off to the world using the &lt;a href=&#34;https://www.weave.works/blog/what-is-gitops-really&#34;&gt;GitOps&lt;/a&gt; tool &lt;a href=&#34;https://toolkit.fluxcd.io/&#34;&gt;Flux&lt;/a&gt;. When completed, your Git repository will be driving the state of your Kubernetes cluster. In addition with the help of the &lt;a href=&#34;https://github.com/ansible-collections/community.sops&#34;&gt;Ansible&lt;/a&gt;, &lt;a href=&#34;https://github.com/carlpett/terraform-provider-sops&#34;&gt;Terraform&lt;/a&gt; and &lt;a href=&#34;https://toolkit.fluxcd.io/guides/mozilla-sops/&#34;&gt;Flux&lt;/a&gt; SOPS integrations you&#39;ll be able to commit &lt;a href=&#34;https://github.com/FiloSottile/age&#34;&gt;Age&lt;/a&gt; encrypted secrets to your public repo.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/onedr0p/flux-cluster-template#-introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/onedr0p/flux-cluster-template#-prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/onedr0p/flux-cluster-template#-repository-structure&#34;&gt;Repository structure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/onedr0p/flux-cluster-template#-lets-go&#34;&gt;Lets go!&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/onedr0p/flux-cluster-template#-post-installation&#34;&gt;Post installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/onedr0p/flux-cluster-template#-troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/onedr0p/flux-cluster-template#-whats-next&#34;&gt;What&#39;s next&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/onedr0p/flux-cluster-template#-thanks&#34;&gt;Thanks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;👋 Introduction&lt;/h2&gt; &#xA;&lt;p&gt;The following components will be installed in your &lt;a href=&#34;https://k3s.io/&#34;&gt;k3s&lt;/a&gt; cluster by default. Most are only included to get a minimum viable cluster up and running.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://toolkit.fluxcd.io/&#34;&gt;flux&lt;/a&gt; - GitOps operator for managing Kubernetes clusters from a Git repository&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kube-vip.io/&#34;&gt;kube-vip&lt;/a&gt; - Load balancer for the Kubernetes control plane nodes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://metallb.universe.tf/&#34;&gt;metallb&lt;/a&gt; - Load balancer for Kubernetes services&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cert-manager.io/&#34;&gt;cert-manager&lt;/a&gt; - Operator to request SSL certificates and store them as Kubernetes resources&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.tigera.io/project-calico/&#34;&gt;calico&lt;/a&gt; - Container networking interface for inter pod and service networking&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes-sigs/external-dns&#34;&gt;external-dns&lt;/a&gt; - Operator to publish DNS records to Cloudflare (and other providers) based on Kubernetes ingresses&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ori-edge/k8s_gateway&#34;&gt;k8s_gateway&lt;/a&gt; - DNS resolver that provides local DNS to your Kubernetes ingresses&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubernetes.github.io/ingress-nginx/&#34;&gt;ingress-nginx&lt;/a&gt; - Kubernetes ingress controller used for a HTTP reverse proxy of Kubernetes ingresses&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rancher/local-path-provisioner&#34;&gt;local-path-provisioner&lt;/a&gt; - provision persistent local storage with Kubernetes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Additional applications include &lt;a href=&#34;https://github.com/toboshii/hajimari&#34;&gt;hajimari&lt;/a&gt;, &lt;a href=&#34;https://github.com/tarampampam/error-pages&#34;&gt;error-pages&lt;/a&gt;, &lt;a href=&#34;https://github.com/Ealenn/Echo-Server&#34;&gt;echo-server&lt;/a&gt;, &lt;a href=&#34;https://github.com/rancher/system-upgrade-controller&#34;&gt;system-upgrade-controller&lt;/a&gt;, &lt;a href=&#34;https://github.com/stakater/Reloader&#34;&gt;reloader&lt;/a&gt;, and &lt;a href=&#34;https://github.com/weaveworks/kured&#34;&gt;kured&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;For provisioning the following tools will be used:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ansible.com&#34;&gt;Ansible&lt;/a&gt; - Sets up the operating system and installs k3s&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.terraform.io&#34;&gt;Terraform&lt;/a&gt; - Provisions an existing Cloudflare domain and certain DNS records to be used with your Kubernetes cluster&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📝 Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;This template has not been tested on cloud providers like AWS EC2, Hetzner, Scaleway etc... Those cloud offerings probably have a better way of provsioning a Kubernetes cluster and it&#39;s advisable to use those instead of the Ansible playbooks included here. This repository can still be tweaked for the GitOps/Flux portion if there&#39;s a cluster working in one those environments.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;First and foremost some experience in debugging/troubleshooting problems &lt;strong&gt;and a positive attitude is required&lt;/strong&gt; ;)&lt;/p&gt; &#xA;&lt;h3&gt;📚 Reading material&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/&#34;&gt;Organizing Cluster Access Using kubeconfig Files&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;💻 Systems&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;One or more nodes with a fresh install of &lt;a href=&#34;https://getfedora.org/en/server/download/&#34;&gt;Fedora Server 36&lt;/a&gt; or &lt;a href=&#34;https://ubuntu.com/download/server&#34;&gt;Ubuntu 22.04 Server&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;These nodes can be ARM64/AMD64 bare metal or VMs.&lt;/li&gt; &#xA;   &lt;li&gt;An odd number of control plane nodes, greater than or equal to 3 is required if deploying more than one control plane node.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;Cloudflare&lt;/a&gt; account with a domain, this will be managed by Terraform and external-dns. You can &lt;a href=&#34;https://www.cloudflare.com/products/registrar/&#34;&gt;register new domains&lt;/a&gt; directly thru Cloudflare.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;📍 It is recommended to have 3 master nodes for a highly available control plane.&lt;/p&gt; &#xA;&lt;h2&gt;📂 Repository structure&lt;/h2&gt; &#xA;&lt;p&gt;The Git repository contains the following directories under &lt;code&gt;kubernetes&lt;/code&gt; and are ordered below by how Flux will apply them.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;📁 kubernetes      # Kubernetes cluster defined as code&#xA;├─📁 bootstrap     # Flux installation&#xA;├─📁 flux          # Main Flux configuration of repository&#xA;└─📁 apps          # Apps deployed into the cluster grouped by namespace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🚀 Lets go&lt;/h2&gt; &#xA;&lt;p&gt;Very first step will be to create a new &lt;strong&gt;public&lt;/strong&gt; repository by clicking the big green &lt;strong&gt;Use this template&lt;/strong&gt; button on this page.&lt;/p&gt; &#xA;&lt;p&gt;Clone &lt;strong&gt;your new repo&lt;/strong&gt; to you local workstation and &lt;code&gt;cd&lt;/code&gt; into it.&lt;/p&gt; &#xA;&lt;p&gt;📍 &lt;strong&gt;All of the below commands&lt;/strong&gt; are run on your &lt;strong&gt;local&lt;/strong&gt; workstation, &lt;strong&gt;not&lt;/strong&gt; on any of your cluster nodes.&lt;/p&gt; &#xA;&lt;h3&gt;🔧 Workstation Tools&lt;/h3&gt; &#xA;&lt;p&gt;📍 Install the &lt;strong&gt;most recent version&lt;/strong&gt; of the CLI tools below. If you are &lt;strong&gt;having trouble with future steps&lt;/strong&gt;, it is very likely you don&#39;t have the most recent version of these CLI tools, &lt;strong&gt;!especially sops AND yq!&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the following CLI tools on your workstation, if you are &lt;strong&gt;NOT&lt;/strong&gt; using &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; on MacOS or Linux &lt;strong&gt;ignore&lt;/strong&gt; steps 4 and 5.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Required: &lt;a href=&#34;https://github.com/FiloSottile/age&#34;&gt;age&lt;/a&gt;, &lt;a href=&#34;https://www.ansible.com&#34;&gt;ansible&lt;/a&gt;, &lt;a href=&#34;https://toolkit.fluxcd.io/&#34;&gt;flux&lt;/a&gt;, &lt;a href=&#34;https://docs.gitops.weave.works/docs/installation/weave-gitops/&#34;&gt;weave-gitops&lt;/a&gt;, &lt;a href=&#34;https://github.com/go-task/task&#34;&gt;go-task&lt;/a&gt;, &lt;a href=&#34;https://github.com/direnv/direnv&#34;&gt;direnv&lt;/a&gt;, &lt;a href=&#34;http://jodies.de/ipcalc&#34;&gt;ipcalc&lt;/a&gt;, &lt;a href=&#34;https://stedolan.github.io/jq/&#34;&gt;jq&lt;/a&gt;, &lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/&#34;&gt;kubectl&lt;/a&gt;, &lt;a href=&#34;https://pypi.org/project/pip/&#34;&gt;python-pip3&lt;/a&gt;, &lt;a href=&#34;https://github.com/pre-commit/pre-commit&#34;&gt;pre-commit&lt;/a&gt;, &lt;a href=&#34;https://github.com/mozilla/sops&#34;&gt;sops v3&lt;/a&gt;, &lt;a href=&#34;https://www.terraform.io&#34;&gt;terraform&lt;/a&gt;, &lt;a href=&#34;https://github.com/mikefarah/yq&#34;&gt;yq v4&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Recommended: &lt;a href=&#34;https://helm.sh/&#34;&gt;helm&lt;/a&gt;, &lt;a href=&#34;https://github.com/kubernetes-sigs/kustomize&#34;&gt;kustomize&lt;/a&gt;, &lt;a href=&#34;https://github.com/stern/stern&#34;&gt;stern&lt;/a&gt;, &lt;a href=&#34;https://github.com/adrienverge/yamllint&#34;&gt;yamllint&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;This guide heavily relies on &lt;a href=&#34;https://github.com/go-task/task&#34;&gt;go-task&lt;/a&gt; as a framework for setting things up. It is advised to learn and understand the commands it is running under the hood.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Python 3 and pip3 using your Linux OS package manager, or Homebrew if using MacOS.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ensure &lt;code&gt;pip3&lt;/code&gt; is working on your command line by running &lt;code&gt;pip3 --version&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Homebrew] Install &lt;a href=&#34;https://github.com/go-task/task&#34;&gt;go-task&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install go-task/tap/go-task&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Homebrew] Install workstation dependencies&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task init&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;⚠️ pre-commit&lt;/h3&gt; &#xA;&lt;p&gt;It is advisable to install &lt;a href=&#34;https://pre-commit.com/&#34;&gt;pre-commit&lt;/a&gt; and the pre-commit hooks that come with this repository.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable Pre-Commit&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task precommit:init&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update Pre-Commit, though it will occasionally make mistakes, so verify its results.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task precommit:update&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;🔐 Setting up Age&lt;/h3&gt; &#xA;&lt;p&gt;📍 Here we will create a Age Private and Public key. Using &lt;a href=&#34;https://github.com/mozilla/sops&#34;&gt;SOPS&lt;/a&gt; with &lt;a href=&#34;https://github.com/FiloSottile/age&#34;&gt;Age&lt;/a&gt; allows us to encrypt secrets and use them in Ansible, Terraform and Flux.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a Age Private / Public Key&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;age-keygen -o age.agekey&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set up the directory for the Age key and move the Age file to it&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir -p ~/.config/sops/age&#xA;mv age.agekey ~/.config/sops/age/keys.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Export the &lt;code&gt;SOPS_AGE_KEY_FILE&lt;/code&gt; variable in your &lt;code&gt;bashrc&lt;/code&gt;, &lt;code&gt;zshrc&lt;/code&gt; or &lt;code&gt;config.fish&lt;/code&gt; and source it, e.g.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export SOPS_AGE_KEY_FILE=~/.config/sops/age/keys.txt&#xA;source ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fill out the Age public key in the appropriate variable in configuration section below, &lt;strong&gt;note&lt;/strong&gt; the public key should start with &lt;code&gt;age&lt;/code&gt;...&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;☁️ Global Cloudflare API Key&lt;/h3&gt; &#xA;&lt;p&gt;In order to use Terraform and &lt;code&gt;cert-manager&lt;/code&gt; with the Cloudflare DNS challenge you will need to create a API key.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Head over to Cloudflare and create a API key by going &lt;a href=&#34;https://dash.cloudflare.com/profile/api-tokens&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Under the &lt;code&gt;API Keys&lt;/code&gt; section, create a global API Key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use the API Key in the appropriate variable in configuration section below.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;📍 You may wish to update this later on to a Cloudflare &lt;strong&gt;API Token&lt;/strong&gt; which can be scoped to certain resources. I do not recommend using a Cloudflare &lt;strong&gt;API Key&lt;/strong&gt;, however for the purposes of this template it is easier getting started without having to define which scopes and resources are needed. For more information see the &lt;a href=&#34;https://developers.cloudflare.com/api/&#34;&gt;Cloudflare docs on API Keys and Tokens&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;📄 Configuration&lt;/h3&gt; &#xA;&lt;p&gt;📍 The &lt;code&gt;.config.env&lt;/code&gt; file contains necessary configuration that is needed by Ansible, Terraform and Flux.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy the &lt;code&gt;.config.sample.env&lt;/code&gt; to &lt;code&gt;.config.env&lt;/code&gt; and start filling out all the environment variables.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;All are required&lt;/strong&gt; unless otherwise noted in the comments.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cp .config.sample.env .config.env&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Once that is done, verify the configuration is correct by running:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task verify&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you do not encounter any errors run start having the script wire up the templated files and place them where they need to be.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task configure&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;⚡ Preparing Fedora or Ubuntu Server with Ansible&lt;/h3&gt; &#xA;&lt;p&gt;📍 Here we will be running a Ansible Playbook to prepare Fedora or Ubuntu Server for running a Kubernetes cluster.&lt;/p&gt; &#xA;&lt;p&gt;📍 Nodes are not security hardened by default, you can do this with &lt;a href=&#34;https://github.com/dev-sec/ansible-collection-hardening&#34;&gt;dev-sec/ansible-collection-hardening&lt;/a&gt; or similar if supported. This is an advanced configuration and generally not recommended unless you want to &lt;a href=&#34;https://www.ibm.com/topics/devsecops&#34;&gt;DevSecOps&lt;/a&gt; your cluster and nodes.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensure you are able to SSH into your nodes from your workstation using a private SSH key &lt;strong&gt;without a passphrase&lt;/strong&gt;. This is how Ansible is able to connect to your remote nodes.&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-configure-ssh-key-based-authentication-on-a-linux-server&#34;&gt;How to configure SSH key-based authentication&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the Ansible deps&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task ansible:init&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Verify Ansible can view your config&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task ansible:list&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Verify Ansible can ping your nodes&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task ansible:ping&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the Fedora/Ubuntu Server Ansible prepare playbook&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task ansible:prepare&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Reboot the nodes (if not done in step 5)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task ansible:force-reboot&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;⛵ Installing k3s with Ansible&lt;/h3&gt; &#xA;&lt;p&gt;📍 Here we will be running a Ansible Playbook to install &lt;a href=&#34;https://k3s.io/&#34;&gt;k3s&lt;/a&gt; with &lt;a href=&#34;https://galaxy.ansible.com/xanmanning/k3s&#34;&gt;this&lt;/a&gt; wonderful k3s Ansible galaxy role. After completion, Ansible will drop a &lt;code&gt;kubeconfig&lt;/code&gt; in &lt;code&gt;./kubeconfig&lt;/code&gt; for use with interacting with your cluster with &lt;code&gt;kubectl&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;☢️ If you run into problems, you can run &lt;code&gt;task ansible:nuke&lt;/code&gt; to destroy the k3s cluster and start over.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Verify Ansible can view your config&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task ansible:list&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Verify Ansible can ping your nodes&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task ansible:ping&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install k3s with Ansible&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task ansible:install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Verify the nodes are online&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task cluster:nodes&#xA;# NAME           STATUS   ROLES                       AGE     VERSION&#xA;# k8s-0          Ready    control-plane,master      4d20h   v1.21.5+k3s1&#xA;# k8s-1          Ready    worker                    4d20h   v1.21.5+k3s1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;☁️ Configuring Cloudflare DNS with Terraform&lt;/h3&gt; &#xA;&lt;p&gt;📍 Review the Terraform scripts under &lt;code&gt;./terraform/cloudflare/&lt;/code&gt; and make sure you understand what it&#39;s doing (no really review it).&lt;/p&gt; &#xA;&lt;p&gt;If your domain already has existing DNS records &lt;strong&gt;be sure to export those DNS settings before you continue&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Pull in the Terraform deps&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task terraform:init&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Review the changes Terraform will make to your Cloudflare domain&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task terraform:plan&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Have Terraform apply your Cloudflare settings&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task terraform:apply&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If Terraform was ran successfully you can log into Cloudflare and validate the DNS records are present.&lt;/p&gt; &#xA;&lt;p&gt;The cluster application &lt;a href=&#34;https://github.com/kubernetes-sigs/external-dns&#34;&gt;external-dns&lt;/a&gt; will be managing the rest of the DNS records you will need.&lt;/p&gt; &#xA;&lt;h3&gt;🔹 GitOps with Flux&lt;/h3&gt; &#xA;&lt;p&gt;📍 Here we will be installing &lt;a href=&#34;https://toolkit.fluxcd.io/&#34;&gt;flux&lt;/a&gt; after some quick bootstrap steps.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Verify Flux can be installed&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task cluster:verify&#xA;# ► checking prerequisites&#xA;# ✔ kubectl 1.21.5 &amp;gt;=1.18.0-0&#xA;# ✔ Kubernetes 1.21.5+k3s1 &amp;gt;=1.16.0-0&#xA;# ✔ prerequisites checks passed&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Push you changes to git&lt;/p&gt; &lt;p&gt;📍 &lt;strong&gt;Verify&lt;/strong&gt; all the &lt;code&gt;*.sops.yaml&lt;/code&gt; and &lt;code&gt;*.sops.yml&lt;/code&gt; files under the &lt;code&gt;./ansible&lt;/code&gt;, &lt;code&gt;./kubernetes&lt;/code&gt;, and &lt;code&gt;./terraform&lt;/code&gt; folders are &lt;strong&gt;encrypted&lt;/strong&gt; with SOPS&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git add -A&#xA;git commit -m &#34;Initial commit &lt;span&gt;🚀&lt;/span&gt;&#34;&#xA;git push&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Flux and sync the cluster to the Git repository&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task cluster:install&#xA;# namespace/flux-system configured&#xA;# customresourcedefinition.apiextensions.k8s.io/alerts.notification.toolkit.fluxcd.io created&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Verify Flux components are running in the cluster&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task cluster:pods -- -n flux-system&#xA;# NAME                                       READY   STATUS    RESTARTS   AGE&#xA;# helm-controller-5bbd94c75-89sb4            1/1     Running   0          1h&#xA;# kustomize-controller-7b67b6b77d-nqc67      1/1     Running   0          1h&#xA;# notification-controller-7c46575844-k4bvr   1/1     Running   0          1h&#xA;# source-controller-7d6875bcb4-zqw9f         1/1     Running   0          1h&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;🎤 Verification Steps&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Mic check, 1, 2&lt;/em&gt; - In a few moments applications should be lighting up like a Christmas tree 🎄&lt;/p&gt; &#xA;&lt;p&gt;You are able to run all the commands below with one task&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task cluster:resources&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;View the Flux Git Repositories&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task cluster:gitrepositories&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;View the Flux kustomizations&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task cluster:kustomizations&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;View all the Flux Helm Releases&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task cluster:helmreleases&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;View all the Flux Helm Repositories&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task cluster:helmrepositories&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;View all the Pods&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task cluster:pods&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;View all the certificates and certificate requests&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task cluster:certificates&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;View all the ingresses&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task cluster:ingresses&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;🏆 &lt;strong&gt;Congratulations&lt;/strong&gt; if all goes smooth you&#39;ll have a Kubernetes cluster managed by Flux, your Git repository is driving the state of your cluster.&lt;/p&gt; &#xA;&lt;p&gt;☢️ If you run into problems, you can run &lt;code&gt;task ansible:nuke&lt;/code&gt; to destroy the k3s cluster and start over.&lt;/p&gt; &#xA;&lt;p&gt;🧠 Now it&#39;s time to pause and go get some coffee ☕ because next is describing how DNS is handled.&lt;/p&gt; &#xA;&lt;h2&gt;📣 Post installation&lt;/h2&gt; &#xA;&lt;h3&gt;🌱 Environment&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://direnv.net/&#34;&gt;direnv&lt;/a&gt; will make it so anytime you &lt;code&gt;cd&lt;/code&gt; to your repo&#39;s directory it export the required environment variables (e.g. &lt;code&gt;KUBECONFIG&lt;/code&gt;). To set this up make sure you &lt;a href=&#34;https://direnv.net/docs/hook.html&#34;&gt;hook it into your shell&lt;/a&gt; and after that is done, run &lt;code&gt;direnv allow&lt;/code&gt; while in your repos directory.&lt;/p&gt; &#xA;&lt;h3&gt;🌐 DNS&lt;/h3&gt; &#xA;&lt;p&gt;📍 The &lt;a href=&#34;https://github.com/kubernetes-sigs/external-dns&#34;&gt;external-dns&lt;/a&gt; application created in the &lt;code&gt;kube-system&lt;/code&gt; namespace will handle creating public DNS records. By default, &lt;code&gt;echo-server&lt;/code&gt; is the only public domain exposed on your Cloudflare domain. In order to make additional applications public you must set an ingress annotation like in the &lt;code&gt;HelmRelease&lt;/code&gt; for &lt;code&gt;echo-server&lt;/code&gt;. You do not need to use Terraform to create additional DNS records unless you need a record outside the purposes of your Kubernetes cluster (e.g. setting up MX records).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ori-edge/k8s_gateway&#34;&gt;k8s_gateway&lt;/a&gt; is deployed on the IP choosen for &lt;code&gt;${BOOTSTRAP_METALLB_K8S_GATEWAY_ADDR}&lt;/code&gt;. Inorder to test DNS you can point your clients DNS to the &lt;code&gt;${BOOTSTRAP_METALLB_K8S_GATEWAY_ADDR}&lt;/code&gt; IP address and load &lt;code&gt;https://hajimari.${BOOTSTRAP_CLOUDFLARE_DOMAIN}&lt;/code&gt; in your browser.&lt;/p&gt; &#xA;&lt;p&gt;You can also try debugging with the command &lt;code&gt;dig&lt;/code&gt;, e.g. &lt;code&gt;dig @${BOOTSTRAP_METALLB_K8S_GATEWAY_ADDR} hajimari.${BOOTSTRAP_CLOUDFLARE_DOMAIN}&lt;/code&gt; and you should get a valid answer containing your &lt;code&gt;${BOOTSTRAP_METALLB_INGRESS_ADDR}&lt;/code&gt; IP address.&lt;/p&gt; &#xA;&lt;p&gt;If your router (or Pi-Hole, Adguard Home or whatever) supports conditional DNS forwarding (also know as split-horizon DNS) you may have DNS requests for &lt;code&gt;${SECRET_DOMAIN}&lt;/code&gt; only point to the &lt;code&gt;${BOOTSTRAP_METALLB_K8S_GATEWAY_ADDR}&lt;/code&gt; IP address. This will ensure only DNS requests for &lt;code&gt;${SECRET_DOMAIN}&lt;/code&gt; will only get routed to your &lt;a href=&#34;https://github.com/ori-edge/k8s_gateway&#34;&gt;k8s_gateway&lt;/a&gt; service thus providing DNS resolution to your cluster applications/ingresses.&lt;/p&gt; &#xA;&lt;p&gt;To access services from the outside world port forwarded &lt;code&gt;80&lt;/code&gt; and &lt;code&gt;443&lt;/code&gt; in your router to the &lt;code&gt;${BOOTSTRAP_METALLB_INGRESS_ADDR}&lt;/code&gt; IP, in a few moments head over to your browser and you &lt;em&gt;should&lt;/em&gt; be able to access &lt;code&gt;https://echo-server.${BOOTSTRAP_CLOUDFLARE_DOMAIN}&lt;/code&gt; from a device outside your LAN.&lt;/p&gt; &#xA;&lt;p&gt;Now if nothing is working, that is expected. This is DNS after all!&lt;/p&gt; &#xA;&lt;h3&gt;🤖 Renovatebot&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.mend.io/free-developer-tools/renovate/&#34;&gt;Renovatebot&lt;/a&gt; will scan your repository and offer PRs when it finds dependencies out of date. Common dependencies it will discover and update are Flux, Ansible Galaxy Roles, Terraform Providers, Kubernetes Helm Charts, Kubernetes Container Images, Pre-commit hooks updates, and more!&lt;/p&gt; &#xA;&lt;p&gt;The base Renovate configuration provided in your repository can be view at &lt;a href=&#34;https://github.com/onedr0p/flux-cluster-template/raw/main/.github/renovate.json5&#34;&gt;.github/renovate.json5&lt;/a&gt;. If you notice this only runs on weekends and you can &lt;a href=&#34;https://docs.renovatebot.com/presets-schedule/&#34;&gt;change the schedule to anything you want&lt;/a&gt; or simply remove it.&lt;/p&gt; &#xA;&lt;p&gt;To enable Renovate on your repository, click the &#39;Configure&#39; button over at their &lt;a href=&#34;https://github.com/apps/renovate&#34;&gt;Github app page&lt;/a&gt; and choose your repository. Over time Renovate will create PRs for out-of-date dependencies it finds. Any merged PRs that are in the kubernetes directory Flux will deploy.&lt;/p&gt; &#xA;&lt;h3&gt;🪝 Github Webhook&lt;/h3&gt; &#xA;&lt;p&gt;Flux is pull-based by design meaning it will periodically check your git repository for changes, using a webhook you can enable Flux to update your cluster on &lt;code&gt;git push&lt;/code&gt;. In order to configure Github to send &lt;code&gt;push&lt;/code&gt; events from your repository to the Flux webhook receiver you will need two things:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Webhook URL - Your webhook receiver will be deployed on &lt;code&gt;https://flux-webhook.${BOOTSTRAP_CLOUDFLARE_DOMAIN}/hook/:hookId&lt;/code&gt;. In order to find out your hook id you can run the following command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kubectl -n flux-system get receiver/github-receiver&#xA;# NAME              AGE    READY   STATUS&#xA;# github-receiver   6h8m   True    Receiver initialized with URL: /hook/12ebd1e363c641dc3c2e430ecf3cee2b3c7a5ac9e1234506f6f5f3ce1230e123&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;So if my domain was &lt;code&gt;onedr0p.com&lt;/code&gt; the full url would look like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;https://flux-webhook.onedr0p.com/hook/12ebd1e363c641dc3c2e430ecf3cee2b3c7a5ac9e1234506f6f5f3ce1230e123&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Webhook secret - Your webhook secret can be found by decrypting the &lt;code&gt;secret.sops.yaml&lt;/code&gt; using the following command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sops -d ./kubernetes/flux/config/webhooks/github/secret.sops.yaml | yq .stringData.token&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Don&#39;t forget to update the &lt;code&gt;BOOTSTRAP_FLUX_GITHUB_WEBHOOK_SECRET&lt;/code&gt; variable in your &lt;code&gt;.config.env&lt;/code&gt; file so it matches the generated secret if applicable&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Now that you have the webhook url and secret, it&#39;s time to set everything up on the Github repository side. Navigate to the settings of your repository on Github, under &#34;Settings/Webhooks&#34; press the &#34;Add webhook&#34; button. Fill in the webhook url and your secret.&lt;/p&gt; &#xA;&lt;h3&gt;💾 Storage&lt;/h3&gt; &#xA;&lt;p&gt;Rancher&#39;s &lt;code&gt;local-path-provisioner&lt;/code&gt; is a great start for storage but soon you might find you need more features like replicated block storage, or to connect to a NFS/SMB/iSCSI server. Check out the projects below to read up more on some storage solutions that might work for you.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rook/rook&#34;&gt;rook-ceph&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/longhorn/longhorn&#34;&gt;longhorn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openebs/openebs&#34;&gt;openebs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner&#34;&gt;nfs-subdir-external-provisioner&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/democratic-csi/democratic-csi&#34;&gt;democratic-csi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes-csi/csi-driver-nfs&#34;&gt;csi-driver-nfs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SynologyOpenSource/synology-csi&#34;&gt;synology-csi&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;🔏 Authenticate Flux over SSH&lt;/h3&gt; &#xA;&lt;p&gt;Authenticating Flux to your git repository has a couple benefits like using a private git repository and/or using the Flux &lt;a href=&#34;https://fluxcd.io/docs/components/image/&#34;&gt;Image Automation Controllers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default this template only works on a public GitHub repository, it is advised to keep your repository public.&lt;/p&gt; &#xA;&lt;p&gt;The benefits of a public repository include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Debugging or asking for help, you can provide a link to a resource you are having issues with.&lt;/li&gt; &#xA; &lt;li&gt;Adding a topic to your repository of &lt;code&gt;k8s-at-home&lt;/code&gt; to be included in the &lt;a href=&#34;https://whazor.github.io/k8s-at-home-search/&#34;&gt;k8s-at-home-search&lt;/a&gt;. This search helps people discover different configurations of Helm charts across others Flux based repositories.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Expand to read guide on adding Flux SSH authentication&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Generate new SSH key: &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ssh-keygen -t ecdsa -b 521 -C &#34;github-deploy-key&#34; -f ./kubernetes/bootstrap/github-deploy.key -q -P &#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Paste public key in the deploy keys section of your repository settings&lt;/li&gt; &#xA;  &lt;li&gt;Create sops secret in &lt;code&gt;./kubernetes/bootstrap/github-deploy-key.sops.yaml&lt;/code&gt; with the contents of: &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: v1&#xA;kind: Secret&#xA;metadata:&#xA;    name: github-deploy-key&#xA;    namespace: flux-system&#xA;stringData:&#xA;    # 3a. Contents of github-deploy-key&#xA;    identity: |&#xA;        -----BEGIN OPENSSH PRIVATE KEY-----&#xA;            ...&#xA;        -----END OPENSSH PRIVATE KEY-----&#xA;    # 3b. Output of curl --silent https://api.github.com/meta | jq --raw-output &#39;&#34;github.com &#34;+.ssh_keys[]&#39;&#xA;    known_hosts: |&#xA;        github.com ssh-ed25519 ...&#xA;        github.com ecdsa-sha2-nistp256 ...&#xA;        github.com ssh-rsa ...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Encrypt secret: &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sops --encrypt --in-place ./kubernetes/bootstrap/github-deploy-key.sops.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Apply secret to cluster: &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sops --decrypt ./kubernetes/bootstrap/github-deploy-key.sops.yaml | kubectl apply -f -&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Update &lt;code&gt;./kubernetes/flux/config/cluster.yaml&lt;/code&gt;: &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: source.toolkit.fluxcd.io/v1beta2&#xA;kind: GitRepository&#xA;metadata:&#xA;  name: home-kubernetes&#xA;  namespace: flux-system&#xA;spec:&#xA;  interval: 10m&#xA;  # 6a: Change this to your user and repo names&#xA;  url: ssh://git@github.com/$user/$repo&#xA;  ref:&#xA;    branch: main&#xA;  secretRef:&#xA;    name: github-deploy-key&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Commit and push changes&lt;/li&gt; &#xA;  &lt;li&gt;Force flux to reconcile your changes &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task cluster:reconcile&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Verify git repository is now using SSH: &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task cluster:gitrepositories&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Optionally set your repository to Private in your repository settings.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;💨 Kubernetes Dashboard&lt;/h3&gt; &#xA;&lt;p&gt;Included in your cluster is the &lt;a href=&#34;https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/&#34;&gt;Kubernetes Dashboard&lt;/a&gt;. Inorder to log into this you will have to get the secret token from the cluster using the command below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kubectl -n monitoring get secret kubernetes-dashboard -o jsonpath=&#39;{.data.token}&#39; | base64 -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should be able to access the dashboard at &lt;code&gt;https://kubernetes.${SECRET_DOMAIN}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;👉 Help&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/onedr0p/flux-cluster-template/discussions&#34;&gt;Discussions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/k8s-at-home&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;❔ What&#39;s next&lt;/h2&gt; &#xA;&lt;p&gt;The world is your cluster, have at it!&lt;/p&gt; &#xA;&lt;h2&gt;🤝 Thanks&lt;/h2&gt; &#xA;&lt;p&gt;Big shout out to all the authors and contributors to the projects that we are using in this repository.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/whazor&#34;&gt;@whazor&lt;/a&gt; created &lt;a href=&#34;https://nanne.dev/k8s-at-home-search/&#34;&gt;this website&lt;/a&gt; as a creative way to search Helm Releases across GitHub. You may use it as a means to get ideas on how to configure an applications&#39; Helm values.&lt;/p&gt;</summary>
  </entry>
</feed>