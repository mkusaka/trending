<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Shell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-17T01:44:05Z</updated>
  <subtitle>Daily Trending of Shell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>devmentors/Pacco</title>
    <updated>2023-03-17T01:44:05Z</updated>
    <id>tag:github.com,2023-03-17:/devmentors/Pacco</id>
    <link href="https://github.com/devmentors/Pacco" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Sample microservices solution in .NET Core 3.1 based on the cloud-agnostic approach&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/devmentors/Pacco/master/assets/pacco_logo.png&#34; alt=&#34;Pacco&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;What is Pacco?&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Pacco is an open source project using &lt;strong&gt;microservices architecture&lt;/strong&gt; written in .NET Core 3.1. The domain tackles an exclusive parcels delivery which revolves around the general concept of limited resources availability. Pacco does use an &lt;strong&gt;event-driven&lt;/strong&gt; approach in order to asynchronously integrate between the microservices.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/devmentors/Pacco/master/assets/pacco_overview.png&#34; alt=&#34;Pacco overview&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Find out more about distributed systems patterns and practices in &lt;strong&gt;&lt;a href=&#34;https://devmentors.io/courses/microservices-net&#34;&gt;Microservices .NET online course&lt;/a&gt;&lt;/strong&gt; and check out our &lt;strong&gt;&lt;a href=&#34;https://devmentors.io/blog/hello-world-microservices-pacco&#34;&gt;article&lt;/a&gt;&lt;/strong&gt; about starting Pacco microservices and infrastructure. The solution is maintained by &lt;strong&gt;&lt;a href=&#34;https://devmentors.io&#34;&gt;devmentors.io&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=5SLyrETnJoE&#34;&gt;&lt;img src=&#34;https://cdn.devmentors.io/blog/hello-world-microservices-pacco/microservices_net_pacco_trailer.png&#34; alt=&#34;Microservices .NET&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The overall solution makes use of the &lt;strong&gt;cloud agnostic&lt;/strong&gt; tools and most of them can be found under &lt;a href=&#34;https://cncf.io&#34;&gt;cncf.io&lt;/a&gt;. To easily plug into the complex infrastructure, &lt;a href=&#34;https://convey-stack.github.io&#34;&gt;Convey&lt;/a&gt; is being used.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/devmentors/Pacco/master/assets/infrastructure.png&#34; alt=&#34;Infrastructure&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Depending on the particular microservice complexity, either the clean architecture + DDD approach (as presented below) is used or another style that is the best fit.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/devmentors/Pacco/master/assets/clean_architecture.png&#34; alt=&#34;Clean architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Which repositories should I clone?&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Please clone the following repositories and put them into the same working directory:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/devmentors/Pacco&#34;&gt;Pacco&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/devmentors/Pacco.APIGateway&#34;&gt;Pacco.APIGateway&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/devmentors/Pacco.Services.Availability&#34;&gt;Pacco.Services.Availability&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/devmentors/Pacco.Services.Customers&#34;&gt;Pacco.Services.Customers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/devmentors/Pacco.Services.Deliveries&#34;&gt;Pacco.Services.Deliveries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/devmentors/Pacco.Services.Identity&#34;&gt;Pacco.Services.Identity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/devmentors/Pacco.Services.Operations&#34;&gt;Pacco.Services.Operations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/devmentors/Pacco.Services.OrderMaker&#34;&gt;Pacco.Services.OrderMaker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/devmentors/Pacco.Services.Orders&#34;&gt;Pacco.Services.Orders&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/devmentors/Pacco.Services.Parcels&#34;&gt;Pacco.Services.Parcels&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/devmentors/Pacco.Services.Pricing&#34;&gt;Pacco.Services.Pricing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/devmentors/Pacco.Services.Vehicles&#34;&gt;Pacco.Services.Vehicles&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The above repositories can be also cloned via &lt;a href=&#34;https://github.com/devmentors/Pacco/raw/master/scripts/git-clone.sh&#34;&gt;git-clone.sh&lt;/a&gt; script and updated via &lt;a href=&#34;https://github.com/devmentors/Pacco/raw/master/scripts/git-pull.sh&#34;&gt;git-pull.sh&lt;/a&gt; script. Simply, copy the scripts to the directory next to the &lt;code&gt;Pacco&lt;/code&gt; on your local drive, and execute them using shell. Inside &lt;code&gt;Pacco&lt;/code&gt;, you will also find &lt;a href=&#34;https://github.com/devmentors/Pacco/raw/master/Pacco.sln&#34;&gt;Pacco.sln&lt;/a&gt; that aggregates all the microservices under a single solution, in order to make it easier to work with during the local development.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;How to start the solution?&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Open &lt;code&gt;Pacco/compose&lt;/code&gt; directory and execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker-compose -f infrastructure.yml up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will start the required infrastructure in the background. Then, you can start the services independently of each other via &lt;code&gt;dotnet run&lt;/code&gt; or &lt;code&gt;./scripts/start.sh&lt;/code&gt; command in each microservice repository or run them all at once using Docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker-compose -f services-local.yml up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;strong&gt;What HTTP requests can be sent to the API?&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;You can find the list of all HTTP requests in &lt;a href=&#34;https://github.com/devmentors/Pacco.APIGateway/raw/master/Pacco-sample-scenario.rest&#34;&gt;Pacco-sample-scenario.rest&lt;/a&gt; file placed in the root folder of &lt;a href=&#34;https://github.com/devmentors/Pacco.APIGateway&#34;&gt;Pacco.APIGateway&lt;/a&gt; repository. This file is compatible with &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=humao.rest-client&#34;&gt;REST Client&lt;/a&gt; plugin for &lt;a href=&#34;https://code.visualstudio.com&#34;&gt;Visual Studio Code&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>