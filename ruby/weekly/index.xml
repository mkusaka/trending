<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-28T01:50:10Z</updated>
  <subtitle>Weekly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Shopify/shopify-api-ruby</title>
    <updated>2022-08-28T01:50:10Z</updated>
    <id>tag:github.com,2022-08-28:/Shopify/shopify-api-ruby</id>
    <link href="https://github.com/Shopify/shopify-api-ruby" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ShopifyAPI is a lightweight gem for accessing the Shopify admin REST and GraphQL web services.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Shopify API Library for Ruby&lt;/h1&gt; &#xA;&lt;!-- ![Build Status]() --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify-api-ruby/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-green.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/Shopify/shopify-api-ruby/workflows/CI/badge.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This library provides support for Ruby &lt;a href=&#34;https://apps.shopify.com/&#34;&gt;Shopify apps&lt;/a&gt; to access the &lt;a href=&#34;https://shopify.dev/api/admin&#34;&gt;Shopify Admin API&lt;/a&gt;, by making it easier to perform the following actions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Creating &lt;a href=&#34;https://shopify.dev/concepts/about-apis/authentication#online-access&#34;&gt;online&lt;/a&gt; or &lt;a href=&#34;https://shopify.dev/concepts/about-apis/authentication#offline-access&#34;&gt;offline&lt;/a&gt; access tokens for the Admin API via OAuth&lt;/li&gt; &#xA; &lt;li&gt;Making requests to the &lt;a href=&#34;https://shopify.dev/api/admin-rest&#34;&gt;REST API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Making requests to the &lt;a href=&#34;https://shopify.dev/api/admin-graphql&#34;&gt;GraphQL API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Registering/processing webhooks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition to the Admin API, this library also allows querying the &lt;a href=&#34;https://shopify.dev/docs/storefront-api&#34;&gt;Storefront API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can use this library in any application that has a Ruby backend, since it doesn&#39;t rely on any specific framework — you can include it alongside your preferred stack and use the features that you need to build your app.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: These instructions apply to v10 or later of this package. If you&#39;re running v9 in your app, you can find the documentation &lt;a href=&#34;https://github.com/Shopify/shopify-api-ruby/tree/v9&#34;&gt;in this branch&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;To follow these usage guides, you will need to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;have a working knowledge of ruby and a web framework such as Rails or Sinatra&lt;/li&gt; &#xA; &lt;li&gt;have a Shopify Partner account and development store&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;OR&lt;/em&gt; have a test store where you can create a private app&lt;/li&gt; &#xA; &lt;li&gt;have an app already set up in your test store or partner account&lt;/li&gt; &#xA; &lt;li&gt;use &lt;a href=&#34;https://ngrok.com/download&#34;&gt;ngrok&lt;/a&gt; to create a secure tunnel to your app running on your localhost&lt;/li&gt; &#xA; &lt;li&gt;add the &lt;code&gt;ngrok&lt;/code&gt; URL and the appropriate redirect for your OAuth callback route to your app settings&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add the following to your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gem &#34;shopify_api&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or use &lt;a href=&#34;https://bundler.io&#34;&gt;bundler&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bundle add shopify_api&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Steps to use the Gem&lt;/h2&gt; &#xA;&lt;h3&gt;Setup Shopify Context&lt;/h3&gt; &#xA;&lt;p&gt;Start by initializing the &lt;code&gt;ShopifyAPI::Context&lt;/code&gt; with the parameters of your app by calling &lt;code&gt;ShopifyAPI::Context.setup&lt;/code&gt; (example below) when your app starts (e.g &lt;code&gt;application.rb&lt;/code&gt; in a Rails app).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ShopifyAPI::Context.setup(&#xA;  api_key: &#34;&amp;lt;api-key&amp;gt;&#34;,&#xA;  api_secret_key: &#34;&amp;lt;api-secret-key&amp;gt;&#34;,&#xA;  host_name: &#34;&amp;lt;application-host-name&amp;gt;&#34;,&#xA;  scope: &#34;read_orders,read_products,etc&#34;,&#xA;  session_storage: ShopifyAPI::Auth::FileSessionStorage.new, # See more details below&#xA;  is_embedded: true, # Set to true if you are building an embedded app&#xA;  is_private: false, # Set to true if you are building a private app&#xA;  api_version: &#34;2022-01&#34; # The version of the API you would like to use&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setup a Session Store&lt;/h3&gt; &#xA;&lt;p&gt;In order for the Shopify API gem to properly store sessions it needs an implementation of &lt;code&gt;ShopifyAPI::Auth::SessionStorage&lt;/code&gt;. We provide one implementation in the gem, &lt;code&gt;ShopifyAPI::Auth::FileSessionStorage&lt;/code&gt;, which is suitable for testing/development, but isn&#39;t intended for production apps. See the &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify-api-ruby/main/docs/usage/session_storage.md&#34;&gt;Session Storage doc&lt;/a&gt; for instructions on how to create a custom session store for a production application.&lt;/p&gt; &#xA;&lt;p&gt;Session information would is typically stored in cookies on the browser. However, due to restrictions with modern browsers we highly discourage using cookies for embedded apps. For this reason, an app needs to define a storage implementation that the library can use to store and retrieve a session given its ID. In a non-embedded app this ID will come from a cookie, whereas in an embedded app this ID will come from &lt;a href=&#34;https://shopify.dev/apps/tools/app-bridge&#34;&gt;App Bridge&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Performing OAuth&lt;/h3&gt; &#xA;&lt;p&gt;Next, unless you are making a private app, you need to go through OAuth as described &lt;a href=&#34;https://shopify.dev/apps/auth/oauth&#34;&gt;here&lt;/a&gt; to create sessions for shops using your app. The Shopify API gem tries to make this easy by providing functions to begin and complete the OAuth process. See the &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify-api-ruby/main/docs/usage/oauth.md&#34;&gt;Oauth doc&lt;/a&gt; for instructions on how to use these.&lt;/p&gt; &#xA;&lt;h3&gt;Register Webhooks and a Webhook Handler&lt;/h3&gt; &#xA;&lt;p&gt;If you intend to use webhooks in your application follow the steps in the &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify-api-ruby/main/docs/usage/webhooks.md&#34;&gt;Webhooks doc&lt;/a&gt; for instructions on registering and handling webhooks.&lt;/p&gt; &#xA;&lt;h3&gt;Start Making Authenticated Shopify Requests&lt;/h3&gt; &#xA;&lt;p&gt;Once your app can perform OAuth, it can now make authenticated Shopify API calls using the Admin &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify-api-ruby/main/docs/usage/rest.md&#34;&gt;REST&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify-api-ruby/main/docs/usage/graphql.md&#34;&gt;GraphQL&lt;/a&gt; Clients, or the &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify-api-ruby/main/docs/usage/graphql_storefront.md&#34;&gt;Storefront API GraphQL Client&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Breaking Change Notices&lt;/h2&gt; &#xA;&lt;h3&gt;Breaking change notice for version 10.0.0&lt;/h3&gt; &#xA;&lt;p&gt;We&#39;ve rewritten this library for v10, so that it provides all essential features for a Shopify app without requiring any other packages.&lt;/p&gt; &#xA;&lt;p&gt;Here are the main features it provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OAuth support, both with online and offline tokens.&lt;/li&gt; &#xA; &lt;li&gt;Full, transparent support for JWT sessions for embedded apps and cookies for non-embedded ones. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Removal of support for 3rd party cookies which are increasingly more difficult to use with modern browsers.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Admin API support &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Auto-generated, version-specific REST resources which are similar to &lt;code&gt;ActiveResource&lt;/code&gt; (though not identical), that provide methods for all endpoints defined in our &lt;a href=&#34;https://shopify.dev/api/admin-rest&#34;&gt;REST API reference&lt;/a&gt;, as well as direct definition of known attributes.&lt;/li&gt; &#xA;   &lt;li&gt;A GraphQL client that doesn&#39;t rely on the ActiveResource implementation for REST.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Webhook management, with features for adding handlers and registering them with Shopify.&lt;/li&gt; &#xA; &lt;li&gt;Storefront GraphQL API support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify-api-ruby/main/docs/getting_started.md&#34;&gt;the documentation&lt;/a&gt; in this repository for instructions on how to use each of these components.&lt;/p&gt; &#xA;&lt;p&gt;With this, a lot changed in how apps access the library. Here are the updates you should make when migrating to v10:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;ShopifyAPI::Context.setup&lt;/code&gt; when setting up your app. This class holds global configurations for your app and defines how the library behaves.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If not using the &lt;code&gt;shopify_app&lt;/code&gt; gem, your app needs to provide an implementation of &lt;code&gt;ShopifyAPI::Auth::SessionStorage&lt;/code&gt; for production. Read more about this &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify-api-ruby/main/docs/usage/session_storage.md&#34;&gt;in our documentation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To change the &lt;code&gt;User-Agent&lt;/code&gt; header, use &lt;code&gt;user_agent_prefix&lt;/code&gt; in &lt;code&gt;ShopifyAPI::Context.setup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Usages of the &lt;code&gt;ActiveResource&lt;/code&gt; classes for REST API requests need to be refactored into the new format. You can find detailed examples on how each of the endpoints work in our &lt;a href=&#34;https://shopify.dev/api/admin-rest&#34;&gt;reference documentation&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Please see below a (non-exhaustive) list of common replacements to guide you in your updates, using the &lt;code&gt;Order&lt;/code&gt; resource as an example.&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;Before&lt;/th&gt; &#xA;     &lt;th&gt;After&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;code&gt;Order.find(:all, params: {param1: value1})&lt;/code&gt;&lt;/td&gt; &#xA;     &lt;td&gt;&lt;code&gt;Order.all(param1: value1, session:)&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;code&gt;Order.find(&amp;lt;id&amp;gt;)&lt;/code&gt;&lt;/td&gt; &#xA;     &lt;td&gt;&lt;code&gt;Order.find(id: &amp;lt;id&amp;gt;, session:)&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;code&gt;order = Order.new(&amp;lt;id&amp;gt;)&lt;/code&gt;&lt;br&gt;&lt;code&gt;order.post(:close)&lt;/code&gt;&lt;/td&gt; &#xA;     &lt;td&gt;&lt;code&gt;order = Order.new(session:)&lt;/code&gt;&lt;br&gt;&lt;code&gt;order.close()&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;code&gt;order = Order.new(&amp;lt;id&amp;gt;)&lt;/code&gt;&lt;br&gt;&lt;code&gt;order.delete&lt;/code&gt;&lt;/td&gt; &#xA;     &lt;td&gt;&lt;code&gt;Order.delete(id: &amp;lt;id&amp;gt;, session:)&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Breaking changes for older versions&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shopify-api-ruby/main/BREAKING_CHANGES_FOR_OLDER_VERSIONS.md&#34;&gt;BREAKING_CHANGES_FOR_OLDER_VERSIONS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Developing this gem&lt;/h2&gt; &#xA;&lt;p&gt;After cloning the repository, you can install the dependencies with bundler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the automated tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle exec rake test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://rubocop.org&#34;&gt;rubocop&lt;/a&gt; to lint/format the code. You can run it with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle exec rubocop&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>jwt/ruby-jwt</title>
    <updated>2022-08-28T01:50:10Z</updated>
    <id>tag:github.com,2022-08-28:/jwt/ruby-jwt</id>
    <link href="https://github.com/jwt/ruby-jwt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A ruby implementation of the RFC 7519 OAuth JSON Web Token (JWT) standard.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JWT&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/rb/jwt&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/jwt.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jwt/ruby-jwt/actions&#34;&gt;&lt;img src=&#34;https://github.com/jwt/ruby-jwt/workflows/test/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/jwt/ruby-jwt&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/jwt/ruby-jwt/badges/gpa.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/jwt/ruby-jwt/coverage&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/jwt/ruby-jwt/badges/coverage.svg?sanitize=true&#34; alt=&#34;Test Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/jwt/ruby-jwt&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/jwt/ruby-jwt/badges/issue_count.svg?sanitize=true&#34; alt=&#34;Issue Count&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.sourcelevel.io/github/jwt/-/ruby-jwt&#34;&gt;&lt;img src=&#34;https://app.sourcelevel.io/github/jwt/-/ruby-jwt.svg?sanitize=true&#34; alt=&#34;SourceLevel&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A ruby implementation of the &lt;a href=&#34;https://tools.ietf.org/html/rfc7519&#34;&gt;RFC 7519 OAuth JSON Web Token (JWT)&lt;/a&gt; standard.&lt;/p&gt; &#xA;&lt;p&gt;If you have further questions related to development or usage, join us: &lt;a href=&#34;https://groups.google.com/forum/#!forum/ruby-jwt&#34;&gt;ruby-jwt google group&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Announcements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ruby 2.4 support was dropped in version 2.4.0&lt;/li&gt; &#xA; &lt;li&gt;Ruby 1.9.3 support was dropped at December 31st, 2016.&lt;/li&gt; &#xA; &lt;li&gt;Version 1.5.3 yanked. See: &lt;a href=&#34;https://github.com/jwt/ruby-jwt/issues/132&#34;&gt;#132&lt;/a&gt; and &lt;a href=&#34;https://github.com/jwt/ruby-jwt/issues/133&#34;&gt;#133&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/jwt/ruby-jwt/master/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt; for a complete set of changes.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Logo&lt;/th&gt; &#xA;   &lt;th&gt;Message&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/83319/31722733-de95bbde-b3ea-11e7-96bf-4f4e8f915588.png&#34; alt=&#34;auth0 logo&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If you want to quickly add secure token-based authentication to Ruby projects, feel free to check Auth0&#39;s Ruby SDK and free plan at &lt;a href=&#34;https://auth0.com/developers?utm_source=GHsponsor&amp;amp;utm_medium=GHsponsor&amp;amp;utm_campaign=rubyjwt&amp;amp;utm_content=auth&#34;&gt;auth0.com/developers&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;h3&gt;Using Rubygems:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem install jwt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Bundler:&lt;/h3&gt; &#xA;&lt;p&gt;Add the following to your Gemfile&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem &#39;jwt&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And run &lt;code&gt;bundle install&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Algorithms and Usage&lt;/h2&gt; &#xA;&lt;p&gt;The JWT spec supports NONE, HMAC, RSASSA, ECDSA and RSASSA-PSS algorithms for cryptographic signing. Currently the jwt gem supports NONE, HMAC, RSASSA and ECDSA. If you are using cryptographic signing, you need to specify the algorithm in the options hash whenever you call JWT.decode to ensure that an attacker &lt;a href=&#34;https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/&#34;&gt;cannot bypass the algorithm verification step&lt;/a&gt;. &lt;strong&gt;It is strongly recommended that you hard code the algorithm, as you may leave yourself vulnerable by dynamically picking the algorithm&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;https://tools.ietf.org/html/rfc7518#section-3.1&#34;&gt; JSON Web Algorithms (JWA) 3.1. &#34;alg&#34; (Algorithm) Header Parameter Values for JWS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;NONE&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;none - unsigned token&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;jwt&#39;&#xA;&#xA;payload = { data: &#39;test&#39; }&#xA;&#xA;# IMPORTANT: set nil as password parameter&#xA;token = JWT.encode payload, nil, &#39;none&#39;&#xA;&#xA;# eyJhbGciOiJub25lIn0.eyJkYXRhIjoidGVzdCJ9.&#xA;puts token&#xA;&#xA;# Set password to nil and validation to false otherwise this won&#39;t work&#xA;decoded_token = JWT.decode token, nil, false&#xA;&#xA;# Array&#xA;# [&#xA;#   {&#34;data&#34;=&amp;gt;&#34;test&#34;}, # payload&#xA;#   {&#34;alg&#34;=&amp;gt;&#34;none&#34;} # header&#xA;# ]&#xA;puts decoded_token&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;strong&gt;HMAC&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HS256 - HMAC using SHA-256 hash algorithm&lt;/li&gt; &#xA; &lt;li&gt;HS512256 - HMAC using SHA-512-256 hash algorithm (only available with RbNaCl; see note below)&lt;/li&gt; &#xA; &lt;li&gt;HS384 - HMAC using SHA-384 hash algorithm&lt;/li&gt; &#xA; &lt;li&gt;HS512 - HMAC using SHA-512 hash algorithm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# The secret must be a string. A JWT::DecodeError will be raised if it isn&#39;t provided.&#xA;hmac_secret = &#39;my$ecretK3y&#39;&#xA;&#xA;token = JWT.encode payload, hmac_secret, &#39;HS256&#39;&#xA;&#xA;# eyJhbGciOiJIUzI1NiJ9.eyJkYXRhIjoidGVzdCJ9.pNIWIL34Jo13LViZAJACzK6Yf0qnvT_BuwOxiMCPE-Y&#xA;puts token&#xA;&#xA;decoded_token = JWT.decode token, hmac_secret, true, { algorithm: &#39;HS256&#39; }&#xA;&#xA;# Array&#xA;# [&#xA;#   {&#34;data&#34;=&amp;gt;&#34;test&#34;}, # payload&#xA;#   {&#34;alg&#34;=&amp;gt;&#34;HS256&#34;} # header&#xA;# ]&#xA;puts decoded_token&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: If &lt;a href=&#34;https://github.com/cryptosphere/rbnacl&#34;&gt;RbNaCl&lt;/a&gt; is loadable, ruby-jwt will use it for HMAC-SHA256, HMAC-SHA512-256, and HMAC-SHA512. RbNaCl enforces a maximum key size of 32 bytes for these algorithms.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cryptosphere/rbnacl&#34;&gt;RbNaCl&lt;/a&gt; requires &lt;a href=&#34;https://github.com/jedisct1/libsodium&#34;&gt;libsodium&lt;/a&gt;, it can be installed on MacOS with &lt;code&gt;brew install libsodium&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;RSA&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RS256 - RSA using SHA-256 hash algorithm&lt;/li&gt; &#xA; &lt;li&gt;RS384 - RSA using SHA-384 hash algorithm&lt;/li&gt; &#xA; &lt;li&gt;RS512 - RSA using SHA-512 hash algorithm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;rsa_private = OpenSSL::PKey::RSA.generate 2048&#xA;rsa_public = rsa_private.public_key&#xA;&#xA;token = JWT.encode payload, rsa_private, &#39;RS256&#39;&#xA;&#xA;# eyJhbGciOiJSUzI1NiJ9.eyJkYXRhIjoidGVzdCJ9.GplO4w1spRgvEJQ3-FOtZr-uC8L45Jt7SN0J4woBnEXG_OZBSNcZjAJWpjadVYEe2ev3oUBFDYM1N_-0BTVeFGGYvMewu8E6aMjSZvOpf1cZBew-Vt4poSq7goG2YRI_zNPt3af2lkPqXD796IKC5URrEvcgF5xFQ-6h07XRDpSRx1ECrNsUOt7UM3l1IB4doY11GzwQA5sHDTmUZ0-kBT76ZMf12Srg_N3hZwphxBtudYtN5VGZn420sVrQMdPE_7Ni3EiWT88j7WCr1xrF60l8sZT3yKCVleG7D2BEXacTntB7GktBv4Xo8OKnpwpqTpIlC05dMowMkz3rEAAYbQ&#xA;puts token&#xA;&#xA;decoded_token = JWT.decode token, rsa_public, true, { algorithm: &#39;RS256&#39; }&#xA;&#xA;# Array&#xA;# [&#xA;#   {&#34;data&#34;=&amp;gt;&#34;test&#34;}, # payload&#xA;#   {&#34;alg&#34;=&amp;gt;&#34;RS256&#34;} # header&#xA;# ]&#xA;puts decoded_token&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;strong&gt;ECDSA&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ES256 - ECDSA using P-256 and SHA-256&lt;/li&gt; &#xA; &lt;li&gt;ES384 - ECDSA using P-384 and SHA-384&lt;/li&gt; &#xA; &lt;li&gt;ES512 - ECDSA using P-521 and SHA-512&lt;/li&gt; &#xA; &lt;li&gt;ES256K - ECDSA using P-256K and SHA-256&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ecdsa_key = OpenSSL::PKey::EC.generate(&#39;prime256v1&#39;)&#xA;&#xA;token = JWT.encode payload, ecdsa_key, &#39;ES256&#39;&#xA;&#xA;# eyJhbGciOiJFUzI1NiJ9.eyJkYXRhIjoidGVzdCJ9.AlLW--kaF7EX1NMX9WJRuIW8NeRJbn2BLXHns7Q5TZr7Hy3lF6MOpMlp7GoxBFRLISQ6KrD0CJOrR8aogEsPeg&#xA;puts token&#xA;&#xA;decoded_token = JWT.decode token, ecdsa_key, true, { algorithm: &#39;ES256&#39; }&#xA;&#xA;# Array&#xA;# [&#xA;#    {&#34;test&#34;=&amp;gt;&#34;data&#34;}, # payload&#xA;#    {&#34;alg&#34;=&amp;gt;&#34;ES256&#34;} # header&#xA;# ]&#xA;puts decoded_token&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;strong&gt;EDDSA&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;In order to use this algorithm you need to add the &lt;code&gt;RbNaCl&lt;/code&gt; gem to you &lt;code&gt;Gemfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;rbnacl&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more detailed installation instruction check the official &lt;a href=&#34;https://github.com/cryptosphere/rbnacl&#34;&gt;repository&lt;/a&gt; on GitHub.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ED25519&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;private_key = RbNaCl::Signatures::Ed25519::SigningKey.new(&#39;abcdefghijklmnopqrstuvwxyzABCDEF&#39;)&#xA;public_key = private_key.verify_key&#xA;token = JWT.encode payload, private_key, &#39;ED25519&#39;&#xA;&#xA;# eyJhbGciOiJFRDI1NTE5In0.eyJkYXRhIjoidGVzdCJ9.6xIztXyOupskddGA_RvKU76V9b2dCQUYhoZEVFnRimJoPYIzZ2Fm47CWw8k2NTCNpgfAuxg9OXjaiVK7MvrbCQ&#xA;puts token&#xA;&#xA;decoded_token = JWT.decode token, public_key, true, { algorithm: &#39;ED25519&#39; }&#xA;# Array&#xA;# [&#xA;#  {&#34;test&#34;=&amp;gt;&#34;data&#34;}, # payload&#xA;#  {&#34;alg&#34;=&amp;gt;&#34;ED25519&#34;} # header&#xA;# ]&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;strong&gt;RSASSA-PSS&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;In order to use this algorithm you need to add the &lt;code&gt;openssl&lt;/code&gt; gem to your &lt;code&gt;Gemfile&lt;/code&gt; with a version greater or equal to &lt;code&gt;2.1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;openssl&#39;, &#39;~&amp;gt; 2.1&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PS256 - RSASSA-PSS using SHA-256 hash algorithm&lt;/li&gt; &#xA; &lt;li&gt;PS384 - RSASSA-PSS using SHA-384 hash algorithm&lt;/li&gt; &#xA; &lt;li&gt;PS512 - RSASSA-PSS using SHA-512 hash algorithm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;rsa_private = OpenSSL::PKey::RSA.generate 2048&#xA;rsa_public = rsa_private.public_key&#xA;&#xA;token = JWT.encode payload, rsa_private, &#39;PS256&#39;&#xA;&#xA;# eyJhbGciOiJQUzI1NiJ9.eyJkYXRhIjoidGVzdCJ9.KEmqagMUHM-NcmXo6818ZazVTIAkn9qU9KQFT1c5Iq91n0KRpAI84jj4ZCdkysDlWokFs3Dmn4MhcXP03oJKLFgnoPL40_Wgg9iFr0jnIVvnMUp1kp2RFUbL0jqExGTRA3LdAhuvw6ZByGD1bkcWjDXygjQw-hxILrT1bENjdr0JhFd-cB0-ps5SB0mwhFNcUw-OM3Uu30B1-mlFaelUY8jHJYKwLTZPNxHzndt8RGXF8iZLp7dGb06HSCKMcVzhASGMH4ZdFystRe2hh31cwcvnl-Eo_D4cdwmpN3Abhk_8rkxawQJR3duh8HNKc4AyFPo7SabEaSu2gLnLfN3yfg&#xA;puts token&#xA;&#xA;decoded_token = JWT.decode token, rsa_public, true, { algorithm: &#39;PS256&#39; }&#xA;&#xA;# Array&#xA;# [&#xA;#   {&#34;data&#34;=&amp;gt;&#34;test&#34;}, # payload&#xA;#   {&#34;alg&#34;=&amp;gt;&#34;PS256&#34;} # header&#xA;# ]&#xA;puts decoded_token&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Support for reserved claim names&lt;/h2&gt; &#xA;&lt;p&gt;JSON Web Token defines some reserved claim names and defines how they should be used. JWT supports these reserved claim names:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#39;exp&#39; (Expiration Time) Claim&lt;/li&gt; &#xA; &lt;li&gt;&#39;nbf&#39; (Not Before Time) Claim&lt;/li&gt; &#xA; &lt;li&gt;&#39;iss&#39; (Issuer) Claim&lt;/li&gt; &#xA; &lt;li&gt;&#39;aud&#39; (Audience) Claim&lt;/li&gt; &#xA; &lt;li&gt;&#39;jti&#39; (JWT ID) Claim&lt;/li&gt; &#xA; &lt;li&gt;&#39;iat&#39; (Issued At) Claim&lt;/li&gt; &#xA; &lt;li&gt;&#39;sub&#39; (Subject) Claim&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Add custom header fields&lt;/h2&gt; &#xA;&lt;p&gt;Ruby-jwt gem supports custom &lt;a href=&#34;https://tools.ietf.org/html/rfc7519#section-5&#34;&gt;header fields&lt;/a&gt; To add custom header fields you need to pass &lt;code&gt;header_fields&lt;/code&gt; parameter&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;token = JWT.encode payload, key, algorithm=&#39;HS256&#39;, header_fields={}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;jwt&#39;&#xA;&#xA;payload = { data: &#39;test&#39; }&#xA;&#xA;# IMPORTANT: set nil as password parameter&#xA;token = JWT.encode payload, nil, &#39;none&#39;, { typ: &#39;JWT&#39; }&#xA;&#xA;# eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJkYXRhIjoidGVzdCJ9.&#xA;puts token&#xA;&#xA;# Set password to nil and validation to false otherwise this won&#39;t work&#xA;decoded_token = JWT.decode token, nil, false&#xA;&#xA;# Array&#xA;# [&#xA;#   {&#34;data&#34;=&amp;gt;&#34;test&#34;}, # payload&#xA;#   {&#34;typ&#34;=&amp;gt;&#34;JWT&#34;, &#34;alg&#34;=&amp;gt;&#34;none&#34;} # header&#xA;# ]&#xA;puts decoded_token&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Expiration Time Claim&lt;/h3&gt; &#xA;&lt;p&gt;From &lt;a href=&#34;https://tools.ietf.org/html/rfc7519#section-4.1.4&#34;&gt;Oauth JSON Web Token 4.1.4. &#34;exp&#34; (Expiration Time) Claim&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The &lt;code&gt;exp&lt;/code&gt; (expiration time) claim identifies the expiration time on or after which the JWT MUST NOT be accepted for processing. The processing of the &lt;code&gt;exp&lt;/code&gt; claim requires that the current date/time MUST be before the expiration date/time listed in the &lt;code&gt;exp&lt;/code&gt; claim. Implementers MAY provide for some small &lt;code&gt;leeway&lt;/code&gt;, usually no more than a few minutes, to account for clock skew. Its value MUST be a number containing a &lt;em&gt;&lt;strong&gt;NumericDate&lt;/strong&gt;&lt;/em&gt; value. Use of this claim is OPTIONAL.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Handle Expiration Claim&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;exp = Time.now.to_i + 4 * 3600&#xA;exp_payload = { data: &#39;data&#39;, exp: exp }&#xA;&#xA;token = JWT.encode exp_payload, hmac_secret, &#39;HS256&#39;&#xA;&#xA;begin&#xA;  decoded_token = JWT.decode token, hmac_secret, true, { algorithm: &#39;HS256&#39; }&#xA;rescue JWT::ExpiredSignature&#xA;  # Handle expired token, e.g. logout user or deny access&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Expiration Claim verification can be disabled.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Decode token without raising JWT::ExpiredSignature error&#xA;JWT.decode token, hmac_secret, true, { verify_expiration: false, algorithm: &#39;HS256&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Adding Leeway&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;exp = Time.now.to_i - 10&#xA;leeway = 30 # seconds&#xA;&#xA;exp_payload = { data: &#39;data&#39;, exp: exp }&#xA;&#xA;# build expired token&#xA;token = JWT.encode exp_payload, hmac_secret, &#39;HS256&#39;&#xA;&#xA;begin&#xA;  # add leeway to ensure the token is still accepted&#xA;  decoded_token = JWT.decode token, hmac_secret, true, { exp_leeway: leeway, algorithm: &#39;HS256&#39; }&#xA;rescue JWT::ExpiredSignature&#xA;  # Handle expired token, e.g. logout user or deny access&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Not Before Time Claim&lt;/h3&gt; &#xA;&lt;p&gt;From &lt;a href=&#34;https://tools.ietf.org/html/rfc7519#section-4.1.5&#34;&gt;Oauth JSON Web Token 4.1.5. &#34;nbf&#34; (Not Before) Claim&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The &lt;code&gt;nbf&lt;/code&gt; (not before) claim identifies the time before which the JWT MUST NOT be accepted for processing. The processing of the &lt;code&gt;nbf&lt;/code&gt; claim requires that the current date/time MUST be after or equal to the not-before date/time listed in the &lt;code&gt;nbf&lt;/code&gt; claim. Implementers MAY provide for some small &lt;code&gt;leeway&lt;/code&gt;, usually no more than a few minutes, to account for clock skew. Its value MUST be a number containing a &lt;em&gt;&lt;strong&gt;NumericDate&lt;/strong&gt;&lt;/em&gt; value. Use of this claim is OPTIONAL.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Handle Not Before Claim&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;nbf = Time.now.to_i - 3600&#xA;nbf_payload = { data: &#39;data&#39;, nbf: nbf }&#xA;&#xA;token = JWT.encode nbf_payload, hmac_secret, &#39;HS256&#39;&#xA;&#xA;begin&#xA;  decoded_token = JWT.decode token, hmac_secret, true, { algorithm: &#39;HS256&#39; }&#xA;rescue JWT::ImmatureSignature&#xA;  # Handle invalid token, e.g. logout user or deny access&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Not Before Claim verification can be disabled.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Decode token without raising JWT::ImmatureSignature error&#xA;JWT.decode token, hmac_secret, true, { verify_not_before: false, algorithm: &#39;HS256&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Adding Leeway&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;nbf = Time.now.to_i + 10&#xA;leeway = 30&#xA;&#xA;nbf_payload = { data: &#39;data&#39;, nbf: nbf }&#xA;&#xA;# build expired token&#xA;token = JWT.encode nbf_payload, hmac_secret, &#39;HS256&#39;&#xA;&#xA;begin&#xA;  # add leeway to ensure the token is valid&#xA;  decoded_token = JWT.decode token, hmac_secret, true, { nbf_leeway: leeway, algorithm: &#39;HS256&#39; }&#xA;rescue JWT::ImmatureSignature&#xA;  # Handle invalid token, e.g. logout user or deny access&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Issuer Claim&lt;/h3&gt; &#xA;&lt;p&gt;From &lt;a href=&#34;https://tools.ietf.org/html/rfc7519#section-4.1.1&#34;&gt;Oauth JSON Web Token 4.1.1. &#34;iss&#34; (Issuer) Claim&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The &lt;code&gt;iss&lt;/code&gt; (issuer) claim identifies the principal that issued the JWT. The processing of this claim is generally application specific. The &lt;code&gt;iss&lt;/code&gt; value is a case-sensitive string containing a &lt;em&gt;&lt;strong&gt;StringOrURI&lt;/strong&gt;&lt;/em&gt; value. Use of this claim is OPTIONAL.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can pass multiple allowed issuers as an Array, verification will pass if one of them matches the &lt;code&gt;iss&lt;/code&gt; value in the payload.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;iss = &#39;My Awesome Company Inc. or https://my.awesome.website/&#39;&#xA;iss_payload = { data: &#39;data&#39;, iss: iss }&#xA;&#xA;token = JWT.encode iss_payload, hmac_secret, &#39;HS256&#39;&#xA;&#xA;begin&#xA;  # Add iss to the validation to check if the token has been manipulated&#xA;  decoded_token = JWT.decode token, hmac_secret, true, { iss: iss, verify_iss: true, algorithm: &#39;HS256&#39; }&#xA;rescue JWT::InvalidIssuerError&#xA;  # Handle invalid token, e.g. logout user or deny access&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also pass a Regexp or Proc (with arity 1), verification will pass if the regexp matches or the proc returns truthy. On supported ruby versions (&amp;gt;= 2.5) you can also delegate to methods, on older versions you will have to convert them to proc (using &lt;code&gt;to_proc&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;JWT.decode token, hmac_secret, true,&#xA;           iss: %r&#39;https://my.awesome.website/&#39;,&#xA;           verify_iss: true,&#xA;           algorithm: &#39;HS256&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;JWT.decode token, hmac_secret, true,&#xA;           iss: -&amp;gt;(issuer) { issuer.start_with?(&#39;My Awesome Company Inc&#39;) },&#xA;           verify_iss: true,&#xA;           algorithm: &#39;HS256&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;JWT.decode token, hmac_secret, true,&#xA;           iss: method(:valid_issuer?),&#xA;           verify_iss: true,&#xA;           algorithm: &#39;HS256&#39;&#xA;&#xA;# somewhere in the same class:&#xA;def valid_issuer?(issuer)&#xA;  # custom validation&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Audience Claim&lt;/h3&gt; &#xA;&lt;p&gt;From &lt;a href=&#34;https://tools.ietf.org/html/rfc7519#section-4.1.3&#34;&gt;Oauth JSON Web Token 4.1.3. &#34;aud&#34; (Audience) Claim&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The &lt;code&gt;aud&lt;/code&gt; (audience) claim identifies the recipients that the JWT is intended for. Each principal intended to process the JWT MUST identify itself with a value in the audience claim. If the principal processing the claim does not identify itself with a value in the &lt;code&gt;aud&lt;/code&gt; claim when this claim is present, then the JWT MUST be rejected. In the general case, the &lt;code&gt;aud&lt;/code&gt; value is an array of case-sensitive strings, each containing a &lt;em&gt;&lt;strong&gt;StringOrURI&lt;/strong&gt;&lt;/em&gt; value. In the special case when the JWT has one audience, the &lt;code&gt;aud&lt;/code&gt; value MAY be a single case-sensitive string containing a &lt;em&gt;&lt;strong&gt;StringOrURI&lt;/strong&gt;&lt;/em&gt; value. The interpretation of audience values is generally application specific. Use of this claim is OPTIONAL.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;aud = [&#39;Young&#39;, &#39;Old&#39;]&#xA;aud_payload = { data: &#39;data&#39;, aud: aud }&#xA;&#xA;token = JWT.encode aud_payload, hmac_secret, &#39;HS256&#39;&#xA;&#xA;begin&#xA;  # Add aud to the validation to check if the token has been manipulated&#xA;  decoded_token = JWT.decode token, hmac_secret, true, { aud: aud, verify_aud: true, algorithm: &#39;HS256&#39; }&#xA;rescue JWT::InvalidAudError&#xA;  # Handle invalid token, e.g. logout user or deny access&#xA;  puts &#39;Audience Error&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JWT ID Claim&lt;/h3&gt; &#xA;&lt;p&gt;From &lt;a href=&#34;https://tools.ietf.org/html/rfc7519#section-4.1.7&#34;&gt;Oauth JSON Web Token 4.1.7. &#34;jti&#34; (JWT ID) Claim&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The &lt;code&gt;jti&lt;/code&gt; (JWT ID) claim provides a unique identifier for the JWT. The identifier value MUST be assigned in a manner that ensures that there is a negligible probability that the same value will be accidentally assigned to a different data object; if the application uses multiple issuers, collisions MUST be prevented among values produced by different issuers as well. The &lt;code&gt;jti&lt;/code&gt; claim can be used to prevent the JWT from being replayed. The &lt;code&gt;jti&lt;/code&gt; value is a case-sensitive string. Use of this claim is OPTIONAL.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Use the secret and iat to create a unique key per request to prevent replay attacks&#xA;jti_raw = [hmac_secret, iat].join(&#39;:&#39;).to_s&#xA;jti = Digest::MD5.hexdigest(jti_raw)&#xA;jti_payload = { data: &#39;data&#39;, iat: iat, jti: jti }&#xA;&#xA;token = JWT.encode jti_payload, hmac_secret, &#39;HS256&#39;&#xA;&#xA;begin&#xA;  # If :verify_jti is true, validation will pass if a JTI is present&#xA;  #decoded_token = JWT.decode token, hmac_secret, true, { verify_jti: true, algorithm: &#39;HS256&#39; }&#xA;  # Alternatively, pass a proc with your own code to check if the JTI has already been used&#xA;  decoded_token = JWT.decode token, hmac_secret, true, { verify_jti: proc { |jti| my_validation_method(jti) }, algorithm: &#39;HS256&#39; }&#xA;  # or&#xA;  decoded_token = JWT.decode token, hmac_secret, true, { verify_jti: proc { |jti, payload| my_validation_method(jti, payload) }, algorithm: &#39;HS256&#39; }&#xA;rescue JWT::InvalidJtiError&#xA;  # Handle invalid token, e.g. logout user or deny access&#xA;  puts &#39;Error&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Issued At Claim&lt;/h3&gt; &#xA;&lt;p&gt;From &lt;a href=&#34;https://tools.ietf.org/html/rfc7519#section-4.1.6&#34;&gt;Oauth JSON Web Token 4.1.6. &#34;iat&#34; (Issued At) Claim&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The &lt;code&gt;iat&lt;/code&gt; (issued at) claim identifies the time at which the JWT was issued. This claim can be used to determine the age of the JWT. The &lt;code&gt;leeway&lt;/code&gt; option is not taken into account when verifying this claim. The &lt;code&gt;iat_leeway&lt;/code&gt; option was removed in version 2.2.0. Its value MUST be a number containing a &lt;em&gt;&lt;strong&gt;NumericDate&lt;/strong&gt;&lt;/em&gt; value. Use of this claim is OPTIONAL.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Handle Issued At Claim&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;iat = Time.now.to_i&#xA;iat_payload = { data: &#39;data&#39;, iat: iat }&#xA;&#xA;token = JWT.encode iat_payload, hmac_secret, &#39;HS256&#39;&#xA;&#xA;begin&#xA;  # Add iat to the validation to check if the token has been manipulated&#xA;  decoded_token = JWT.decode token, hmac_secret, true, { verify_iat: true, algorithm: &#39;HS256&#39; }&#xA;rescue JWT::InvalidIatError&#xA;  # Handle invalid token, e.g. logout user or deny access&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Subject Claim&lt;/h3&gt; &#xA;&lt;p&gt;From &lt;a href=&#34;https://tools.ietf.org/html/rfc7519#section-4.1.2&#34;&gt;Oauth JSON Web Token 4.1.2. &#34;sub&#34; (Subject) Claim&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The &lt;code&gt;sub&lt;/code&gt; (subject) claim identifies the principal that is the subject of the JWT. The Claims in a JWT are normally statements about the subject. The subject value MUST either be scoped to be locally unique in the context of the issuer or be globally unique. The processing of this claim is generally application specific. The sub value is a case-sensitive string containing a &lt;em&gt;&lt;strong&gt;StringOrURI&lt;/strong&gt;&lt;/em&gt; value. Use of this claim is OPTIONAL.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;sub = &#39;Subject&#39;&#xA;sub_payload = { data: &#39;data&#39;, sub: sub }&#xA;&#xA;token = JWT.encode sub_payload, hmac_secret, &#39;HS256&#39;&#xA;&#xA;begin&#xA;  # Add sub to the validation to check if the token has been manipulated&#xA;  decoded_token = JWT.decode token, hmac_secret, true, { sub: sub, verify_sub: true, algorithm: &#39;HS256&#39; }&#xA;rescue JWT::InvalidSubError&#xA;  # Handle invalid token, e.g. logout user or deny access&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Finding a Key&lt;/h3&gt; &#xA;&lt;p&gt;To dynamically find the key for verifying the JWT signature, pass a block to the decode block. The block receives headers and the original payload as parameters. It should return with the key to verify the signature that was used to sign the JWT.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;issuers = %w[My_Awesome_Company1 My_Awesome_Company2]&#xA;iss_payload = { data: &#39;data&#39;, iss: issuers.first }&#xA;&#xA;secrets = { issuers.first =&amp;gt; hmac_secret, issuers.last =&amp;gt; &#39;hmac_secret2&#39; }&#xA;&#xA;token = JWT.encode iss_payload, hmac_secret, &#39;HS256&#39;&#xA;&#xA;begin&#xA;  # Add iss to the validation to check if the token has been manipulated&#xA;  decoded_token = JWT.decode(token, nil, true, { iss: issuers, verify_iss: true, algorithm: &#39;HS256&#39; }) do |_headers, payload|&#xA;    secrets[payload[&#39;iss&#39;]]&#xA;  end&#xA;rescue JWT::InvalidIssuerError&#xA;  # Handle invalid token, e.g. logout user or deny access&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Required Claims&lt;/h3&gt; &#xA;&lt;p&gt;You can specify claims that must be present for decoding to be successful. JWT::MissingRequiredClaim will be raised if any are missing&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Will raise a JWT::MissingRequiredClaim error if the &#39;exp&#39; claim is absent&#xA;JWT.decode token, hmac_secret, true, { required_claims: [&#39;exp&#39;], algorithm: &#39;HS256&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;X.509 certificates in x5c header&lt;/h3&gt; &#xA;&lt;p&gt;A JWT signature can be verified using certificate(s) given in the &lt;code&gt;x5c&lt;/code&gt; header. Before doing that, the trustworthiness of these certificate(s) must be established. This is done in accordance with RFC 5280 which (among other things) verifies the certificate(s) are issued by a trusted root certificate, the timestamps are valid, and none of the certificate(s) are revoked (i.e. being present in the root certificate&#39;s Certificate Revocation List).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;root_certificates = [] # trusted `OpenSSL::X509::Certificate` objects&#xA;crl_uris = root_certificates.map(&amp;amp;:crl_uris)&#xA;crls = crl_uris.map do |uri|&#xA;  # look up cached CRL by `uri` and return it if found, otherwise continue&#xA;  crl = Net::HTTP.get(uri)&#xA;  crl = OpenSSL::X509::CRL.new(crl)&#xA;  # cache `crl` using `uri` as the key, expiry set to `crl.next_update` timestamp&#xA;end&#xA;&#xA;begin&#xA;  JWT.decode(token, nil, true, { x5c: { root_certificates: root_certificates, crls: crls })&#xA;rescue JWT::DecodeError&#xA;  # Handle error, e.g. x5c header certificate revoked or expired&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JSON Web Key (JWK)&lt;/h3&gt; &#xA;&lt;p&gt;JWK is a JSON structure representing a cryptographic key. Currently only supports RSA, EC and HMAC keys. The &lt;code&gt;jwks&lt;/code&gt; option can be given as a lambda that evaluates every time a kid is resolved.&lt;/p&gt; &#xA;&lt;p&gt;If the kid is not found from the given set the loader will be called a second time with the &lt;code&gt;kid_not_found&lt;/code&gt; option set to &lt;code&gt;true&lt;/code&gt;. The application can choose to implement some kind of JWK cache invalidation or other mechanism to handle such cases.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  jwk = JWT::JWK.new(OpenSSL::PKey::RSA.new(2048), &#39;optional-kid&#39;)&#xA;  payload = { data: &#39;data&#39; }&#xA;  headers = { kid: jwk.kid }&#xA;&#xA;  token = JWT.encode(payload, jwk.keypair, &#39;RS512&#39;, headers)&#xA;&#xA;  # The jwk loader would fetch the set of JWKs from a trusted source,&#xA;  # to avoid malicious requests triggering cache invalidations there needs to be some kind of grace time or other logic for determining the validity of the invalidation.&#xA;  # This example only allows cache invalidations every 5 minutes.&#xA;  jwk_loader = -&amp;gt;(options) do&#xA;    if options[:kid_not_found] &amp;amp;&amp;amp; @cache_last_update &amp;lt; Time.now.to_i - 300&#xA;      logger.info(&#34;Invalidating JWK cache. #{options[:kid]} not found from previous cache&#34;)&#xA;      @cached_keys = nil&#xA;    end&#xA;    @cached_keys ||= begin&#xA;      @cache_last_update = Time.now.to_i&#xA;      { keys: [jwk.export] }&#xA;    end&#xA;  end&#xA;&#xA;  begin&#xA;    JWT.decode(token, nil, true, { algorithms: [&#39;RS512&#39;], jwks: jwk_loader })&#xA;  rescue JWT::JWKError&#xA;    # Handle problems with the provided JWKs&#xA;  rescue JWT::DecodeError&#xA;    # Handle other decode related issues e.g. no kid in header, no matching public key found etc.&#xA;  end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or by passing the JWKs as a simple Hash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;jwks = { keys: [{ ... }] } # keys accepts both of string and symbol&#xA;JWT.decode(token, nil, true, { algorithms: [&#39;RS512&#39;], jwks: jwks})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Importing and exporting JSON Web Keys&lt;/h3&gt; &#xA;&lt;p&gt;The ::JWT::JWK class can be used to import and export both the public key (default behaviour) and the private key. To include the private key in the export pass the &lt;code&gt;include_private&lt;/code&gt; parameter to the export method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;jwk = JWT::JWK.new(OpenSSL::PKey::RSA.new(2048))&#xA;&#xA;jwk_hash = jwk.export&#xA;jwk_hash_with_private_key = jwk.export(include_private: true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Key ID (kid) and JWKs&lt;/h3&gt; &#xA;&lt;p&gt;The key id (kid) generation in the gem is a custom algorithm and not based on any standards. To use a standardized JWK thumbprint (RFC 7638) as the kid for JWKs a generator type can be specified in the global configuration or can be given to the JWK instance on initialization.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;JWT.configuration.jwk.kid_generator_type = :rfc7638_thumbprint&#xA;# OR&#xA;JWT.configuration.jwk.kid_generator = ::JWT::JWK::Thumbprint&#xA;# OR&#xA;jwk = JWT::JWK.new(OpenSSL::PKey::RSA.new(2048), kid_generator: ::JWT::JWK::Thumbprint)&#xA;&#xA;jwk_hash = jwk.export&#xA;&#xA;thumbprint_as_the_kid = jwk_hash[:kid]&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Development and Tests&lt;/h1&gt; &#xA;&lt;p&gt;We depend on &lt;a href=&#34;http://rubygems.org/gems/bundler&#34;&gt;Bundler&lt;/a&gt; for defining gemspec and performing releases to rubygems.org, which can be done with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rake release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The tests are written with rspec. &lt;a href=&#34;https://github.com/thoughtbot/appraisal&#34;&gt;Appraisal&lt;/a&gt; is used to ensure compatibility with 3rd party dependencies providing cryptographic features.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle install&#xA;bundle exec appraisal rake test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to contribute&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/jwt/ruby-jwt/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/jwt/ruby-jwt/master/AUTHORS&#34;&gt;AUTHORS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/jwt/ruby-jwt/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>forem/forem</title>
    <updated>2022-08-28T01:50:10Z</updated>
    <id>tag:github.com,2022-08-28:/forem/forem</id>
    <link href="https://github.com/forem/forem" rel="alternate"></link>
    <summary type="html">&lt;p&gt;For empowering community 🌱&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;h1&gt;Forem 🌱&lt;/h1&gt; &#xA; &lt;strong&gt;For Empowering Community&lt;/strong&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://app.travis-ci.com/github/forem/forem&#34;&gt; &lt;img src=&#34;https://api.travis-ci.com/forem/forem.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt; &lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/commit-activity/w/forem/forem&#34; alt=&#34;GitHub commit activity&#34;&gt; &lt;a href=&#34;https://github.com/forem/forem/issues?q=is%3Aissue+is%3Aopen+label%3A%22ready+for+dev%22&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues/forem/forem/ready for dev&#34; alt=&#34;GitHub issues ready for dev&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://gitpod.io/#https://github.com/forem/forem&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/setup-automated-blue?logo=gitpod&#34; alt=&#34;GitPod badge&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Welcome to the &lt;a href=&#34;https://forem.com&#34;&gt;Forem&lt;/a&gt; codebase, the platform that powers &lt;a href=&#34;https://dev.to&#34;&gt;dev.to&lt;/a&gt;. We are so excited to have you. With your help, we can build out Forem’s usability, scalability, and stability to better serve our communities.&lt;/p&gt; &#xA;&lt;h2&gt;What is Forem?&lt;/h2&gt; &#xA;&lt;p&gt;Forem is open source software for building communities. Communities for your peers, customers, fanbases, families, friends, and any other time and space where people need to come together to be part of a collective. &lt;a href=&#34;https://dev.to/devteam/for-empowering-community-2k6h&#34;&gt;See our announcement post&lt;/a&gt; for a high-level overview of what Forem is.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.to&#34;&gt;dev.to&lt;/a&gt; (or just DEV) is hosted by Forem. It is a community of software developers who write articles, take part in discussions, and build their professional profiles. We value supportive and constructive dialogue in the pursuit of great code and career growth for all members. The ecosystem spans from beginner to advanced developers, and all are welcome to find their place within our community. ❤️&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/forem/forem/main/#what-is-forem&#34;&gt;What is Forem?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/forem/forem/main/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/forem/forem/main/#community&#34;&gt;Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/forem/forem/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/forem/forem/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/forem/forem/main/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/forem/forem/main/#local&#34;&gt;Local&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/forem/forem/main/#containers&#34;&gt;Containers&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/forem/forem/main/#installation-documentation&#34;&gt;Installation Documentation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/forem/forem/main/#developer-documentation&#34;&gt;Developer Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/forem/forem/main/#core-team&#34;&gt;Core team&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/forem/forem/main/#vulnerability-disclosure&#34;&gt;Vulnerability disclosure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/forem/forem/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;For a place to have open discussions on features, voice your ideas, or get help with general questions please visit our community at &lt;a href=&#34;https://forem.dev/&#34;&gt;forem.dev&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We encourage you to contribute to Forem! Please check out the &lt;a href=&#34;https://developers.forem.com/contributing-guide/forem&#34;&gt;Contributing to Forem guide&lt;/a&gt; for guidelines about how to proceed.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;This section provides a high-level quick start guide. If you&#39;re looking for a more thorough installation guide (for example &lt;a href=&#34;https://developers.forem.com/getting-started/installation/mac&#34;&gt;with macOS&lt;/a&gt;, you&#39;ll want to refer to our complete &lt;a href=&#34;https://developers.forem.com/&#34;&gt;Developer Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We run on a &lt;a href=&#34;https://rubyonrails.org/&#34;&gt;Rails&lt;/a&gt; backend, and we are currently transitioning to a &lt;a href=&#34;https://preactjs.com/&#34;&gt;Preact&lt;/a&gt;-first frontend.&lt;/p&gt; &#xA;&lt;p&gt;A more complete overview of our stack is available in &lt;a href=&#34;https://developers.forem.com/technical-overview/stack&#34;&gt;our docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To &lt;strong&gt;launch Forem in Gitpod&lt;/strong&gt;, navigate to &lt;a href=&#34;https://gitpod.io/#https://github.com/%7Byour_github_username%7D/forem&#34;&gt;https://gitpod.io/#https://github.com/{your_github_username}/forem&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;h4&gt;Local&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ruby-lang.org/en/&#34;&gt;Ruby&lt;/a&gt;: we recommend using &lt;a href=&#34;https://github.com/rbenv/rbenv&#34;&gt;rbenv&lt;/a&gt; to install the Ruby version listed on the badge.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://yarnpkg.com/&#34;&gt;Yarn&lt;/a&gt; 1.x: please refer to their &lt;a href=&#34;https://classic.yarnpkg.com/en/docs/install&#34;&gt;installation guide&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt; 11 or higher.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://imagemagick.org/&#34;&gt;ImageMagick&lt;/a&gt;: please refer to ImageMagick&#39;s &lt;a href=&#34;https://imagemagick.org/script/download.php&#34;&gt;installation instructions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redis.io/&#34;&gt;Redis&lt;/a&gt; 4 or higher.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Containers&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/containers/libpod&#34;&gt;Podman&lt;/a&gt; 1.9.2 or higher&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/containers/podman-compose&#34;&gt;Podman Compose&lt;/a&gt; 0.1.5 or higher&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;OS X&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/docker-for-mac/install/&#34;&gt;Docker Desktop for Mac&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation Documentation&lt;/h3&gt; &#xA;&lt;p&gt;Please see our installation guides, such as the &lt;a href=&#34;https://developers.forem.com/getting-started/installation/mac&#34;&gt;one for macOS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Developer Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developers.forem.com&#34;&gt;Check out our dedicated docs page for more technical documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Core team&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/ben&#34;&gt;@benhalpern&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/jess&#34;&gt;@jessleenyc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/peter&#34;&gt;@peterkimfrank&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/maestromac&#34;&gt;@maestromac&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/lightalloy&#34;&gt;@lightalloy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://dev.to/joshpuetz&#34;&gt;@joshpuetz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/ridhwana&#34;&gt;@ridhwana&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/fdoxyz&#34;&gt;@fdoxyz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/andygeorge&#34;&gt;@andygeorge&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/rt4914&#34;&gt;@rt4914&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/jaw6&#34;&gt;@jaw6&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Vulnerability disclosure&lt;/h2&gt; &#xA;&lt;p&gt;Forem is the open source software which powers &lt;a href=&#34;https://dev.to&#34;&gt;DEV&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We welcome security research on DEV under the terms of our &lt;a href=&#34;https://dev.to/security&#34;&gt;vulnerability disclosure policy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to the &lt;a href=&#34;https://github.com/twitter/twemoji&#34;&gt;Twemoji project&lt;/a&gt; for the usage of their emojis.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/forem/forem/main/LICENSE.md&#34;&gt;LICENSE&lt;/a&gt; file in our repository for the full text.&lt;/p&gt; &#xA;&lt;p&gt;Like many open source projects, we require that contributors provide us with a Contributor License Agreement (CLA). By submitting code to the Forem project, you are granting us a right to use that code under the terms of the CLA.&lt;/p&gt; &#xA;&lt;p&gt;Our version of the CLA was adapted from the Microsoft Contributor License Agreement, which they generously made available to the public domain under Creative Commons CC0 1.0 Universal.&lt;/p&gt; &#xA;&lt;p&gt;Any questions, please refer to our &lt;a href=&#34;https://developers.forem.com/licensing/&#34;&gt;license FAQ&lt;/a&gt; doc or email &lt;a href=&#34;mailto:yo@dev.to&#34;&gt;yo@dev.to&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Sloan, the sloth mascot&#34; width=&#34;250px&#34; src=&#34;https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/31047/af153cd6-9994-4a68-83f4-8ddf3e13f0bf.jpg&#34;&gt; &lt;br&gt; &lt;strong&gt;Happy Coding&lt;/strong&gt; ❤️ &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/forem/forem/main/#Table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>