<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-07T01:56:44Z</updated>
  <subtitle>Weekly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rails/rubocop-rails-omakase</title>
    <updated>2024-01-07T01:56:44Z</updated>
    <id>tag:github.com,2024-01-07:/rails/rubocop-rails-omakase</id>
    <link href="https://github.com/rails/rubocop-rails-omakase" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Omakase Ruby styling for Rails&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Omakase Ruby styling for Rails&lt;/h1&gt; &#xA;&lt;p&gt;Ruby is a beautifully expressive language that not only tolerates many different dialects, but celebrates their diversity. It was never meant as a language to be written exclusively in a single style across all libraries, frameworks, or applications. If you or your team has developed a particular house style that brings you joy, you should cherish that.&lt;/p&gt; &#xA;&lt;p&gt;This collection of Rubocop styles is for those who haven&#39;t committed to any specific dialect already. Who would just like to have a reasonable starting point, and who will benefit from some default rules to at least start a consistent approach to Ruby styling.&lt;/p&gt; &#xA;&lt;p&gt;These specific rules aren&#39;t right or wrong, but merely represent the idiosyncratic aesthetic sensibilities of Rails&#39; creator. Use them whole, use them as a starting point, use them as inspiration, or however you see fit.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This omakase style is automatically included with new Rails 8 applications. But if you&#39;re running an earlier version, you can easily add them yourself.&lt;/p&gt; &#xA;&lt;p&gt;First add this to your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;rubocop-rails-omakase&#34;, require: false, group: [ :development ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;bundle&lt;/code&gt;, then &lt;code&gt;bundle binstubs rubocop&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then add a default &lt;code&gt;.rubocop.yml&lt;/code&gt; file in the root of your application with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# Omakase Ruby styling for Rails&#xA;inherit_gem:&#xA;  rubocop-rails-omakase: rubocop.yml&#xA;&#xA;# Your own specialized rules go here&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can run &lt;code&gt;./bin/rubocop&lt;/code&gt; to check for compliance and &lt;code&gt;./bin/rubocop -a&lt;/code&gt; to automatically fix violations.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;These omakase styles are not intended as an invitation to bikeshed code style preferences. If you disagree with some of the rules incorporated here, you should specialize them in your own application. If you disagree with most of the rules, you should just create your own style guide from scratch.&lt;/p&gt; &#xA;&lt;p&gt;The only type of contributions that will be considered is those pertaining to bugs or obvious inconsistencies that remain in the spirit of the omakase collection.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This gem is released under the &lt;a href=&#34;https://opensource.org/license/mit/&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tmuxinator/tmuxinator</title>
    <updated>2024-01-07T01:56:44Z</updated>
    <id>tag:github.com,2024-01-07:/tmuxinator/tmuxinator</id>
    <link href="https://github.com/tmuxinator/tmuxinator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Manage complex tmux sessions easily&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tmuxinator&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://badge.fury.io/rb/tmuxinator&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/tmuxinator.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tmuxinator/tmuxinator/actions/workflows/ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/tmuxinator/tmuxinator/actions/workflows/ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;Integration Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/tmuxinator/tmuxinator?branch=master&#34;&gt;&lt;img src=&#34;https://img.shields.io/coveralls/tmuxinator/tmuxinator.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/tmuxinator/tmuxinator&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/tmuxinator/tmuxinator/badges/gpa.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gemnasium.com/tmuxinator/tmuxinator&#34;&gt;&lt;img src=&#34;https://gemnasium.com/tmuxinator/tmuxinator.svg?sanitize=true&#34; alt=&#34;Dependency Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/tmuxinator/tmuxinator?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create and manage tmux sessions easily.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr align=&#34;center&#34;&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/289949/44366875-1a6cee00-a49c-11e8-9322-76e70df0c88b.gif&#34; alt=&#34;Screenshot&#34; width=&#34;80%&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;RubyGems&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem install tmuxinator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Homebrew&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install tmuxinator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some users have &lt;a href=&#34;https://github.com/tmuxinator/tmuxinator/issues/841&#34;&gt;reported issues&lt;/a&gt; when installing via Homebrew, so the RubyGems installation is preferred until these are resolved.&lt;/p&gt; &#xA;&lt;p&gt;tmuxinator aims to be compatible with &lt;a href=&#34;https://www.ruby-lang.org/en/downloads/&#34;&gt;the currently maintained versions of Ruby&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some operating systems may provide an unsupported version of Ruby as their &#34;system ruby&#34;. In these cases, users should use &lt;a href=&#34;https://rvm.io/&#34;&gt;RVM&lt;/a&gt; or &lt;a href=&#34;https://github.com/rbenv/rbenv&#34;&gt;rbenv&lt;/a&gt; to install a supported Ruby version and use that version&#39;s &lt;code&gt;gem&lt;/code&gt; binary to install tmuxinator.&lt;/p&gt; &#xA;&lt;h2&gt;Editor and Shell&lt;/h2&gt; &#xA;&lt;p&gt;tmuxinator uses your shell&#39;s default editor for opening files. If you&#39;re not sure what that is type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo $EDITOR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For me that produces &#34;vim&#34;. If you want to change your default editor simply put a line in ~/.bashrc that changes it. Mine looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export EDITOR=&#39;vim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;tmux&lt;/h2&gt; &#xA;&lt;p&gt;The recommended version of tmux to use is 1.8 or later, with the exception of 2.5, which is &lt;strong&gt;not&lt;/strong&gt; supported (see &lt;a href=&#34;https://github.com/tmuxinator/tmuxinator/issues/536&#34;&gt;issue 536&lt;/a&gt; for details). Your mileage may vary for earlier versions. Refer to the FAQ for any odd behaviour.&lt;/p&gt; &#xA;&lt;h2&gt;Completion&lt;/h2&gt; &#xA;&lt;p&gt;Your distribution&#39;s package manager may install the completion files in the appropriate location for the completion to load automatically on startup. But, if you installed tmuxinator via Ruby&#39;s &lt;code&gt;gem&lt;/code&gt;, you&#39;ll need to run the following commands to put the completion files where they&#39;ll be loaded by your shell.&lt;/p&gt; &#xA;&lt;h3&gt;bash&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;# wget https://raw.githubusercontent.com/tmuxinator/tmuxinator/master/completion/tmuxinator.bash -O /etc/bash_completion.d/tmuxinator.bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;zsh&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;# wget https://raw.githubusercontent.com/tmuxinator/tmuxinator/master/completion/tmuxinator.zsh -O /usr/local/share/zsh/site-functions/_tmuxinator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: ZSH&#39;s completion files can be put in other locations in your &lt;code&gt;$fpath&lt;/code&gt;. Please refer to the &lt;a href=&#34;http://zsh.sourceforge.net/Doc/Release/Functions.html&#34;&gt;manual&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h3&gt;fish&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ wget https://raw.githubusercontent.com/tmuxinator/tmuxinator/master/completion/tmuxinator.fish ~/.config/fish/completions/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;A working knowledge of tmux is assumed. You should understand what windows and panes are in tmux. If not please consult the &lt;a href=&#34;https://web.archive.org/web/20220308205829/https://man.openbsd.org/OpenBSD-current/man1/tmux.1&#34;&gt;man pages&lt;/a&gt; for tmux.&lt;/p&gt; &#xA;&lt;h3&gt;Create a project&lt;/h3&gt; &#xA;&lt;p&gt;Create or edit your projects with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tmuxinator new [project]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create or edit a local project where the config file will be stored in the current working directory (in &lt;code&gt;.tmuxinator.yml&lt;/code&gt;) instead of the default project configuration file location (e.g. &lt;code&gt;~/.config/tmuxinator&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tmuxinator new --local [project]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For editing you can also use &lt;code&gt;tmuxinator open [project]&lt;/code&gt;. &lt;code&gt;new&lt;/code&gt; is aliased to &lt;code&gt;n&lt;/code&gt;,&lt;code&gt;open&lt;/code&gt; to &lt;code&gt;o&lt;/code&gt;, and &lt;code&gt;edit&lt;/code&gt; to &lt;code&gt;e&lt;/code&gt;. Please note that dots can&#39;t be used in project names as tmux uses them internally to delimit between windows and panes. Your default editor (&lt;code&gt;$EDITOR&lt;/code&gt;) is used to open the file. If this is a new project you will see this default config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# ~/.tmuxinator/sample.yml&#xA;&#xA;name: sample&#xA;root: ~/&#xA;&#xA;# Optional tmux socket&#xA;# socket_name: foo&#xA;&#xA;# Note that the pre and post options have been deprecated and will be replaced by&#xA;# project hooks.&#xA;&#xA;# Project hooks&#xA;&#xA;# Runs on project start, always&#xA;# on_project_start: command&#xA;&#xA;# Run on project start, the first time&#xA;# on_project_first_start: command&#xA;&#xA;# Run on project start, after the first time&#xA;# on_project_restart: command&#xA;&#xA;# Run on project exit ( detaching from tmux session )&#xA;# on_project_exit: command&#xA;&#xA;# Run on project stop&#xA;# on_project_stop: command&#xA;&#xA;# Runs in each window and pane before window/pane specific commands. Useful for setting up interpreter versions.&#xA;# pre_window: rbenv shell 2.0.0-p247&#xA;&#xA;# Pass command line options to tmux. Useful for specifying a different tmux.conf.&#xA;# tmux_options: -f ~/.tmux.mac.conf&#xA;&#xA;# Change the command to call tmux.  This can be used by derivatives/wrappers like byobu.&#xA;# tmux_command: byobu&#xA;&#xA;# Specifies (by name or index) which window will be selected on project startup. If not set, the first window is used.&#xA;# startup_window: editor&#xA;&#xA;# Specifies (by index) which pane of the specified window will be selected on project startup. If not set, the first pane is used.&#xA;# startup_pane: 1&#xA;&#xA;# Controls whether the tmux session should be attached to automatically. Defaults to true.&#xA;# attach: false&#xA;&#xA;windows:&#xA;  - editor:&#xA;      layout: main-vertical&#xA;      # Synchronize all panes of this window, can be enabled before or after the pane commands run.&#xA;      # &#39;before&#39; represents legacy functionality and will be deprecated in a future release, in favour of &#39;after&#39;&#xA;      # synchronize: after&#xA;      panes:&#xA;        - vim&#xA;        - guard&#xA;  - server: bundle exec rails s&#xA;  - logs: tail -f log/development.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;p&gt;The windows option allows the specification of any number of tmux windows. Each window is denoted by a YAML array entry, followed by a name* and command to be run.&lt;/p&gt; &#xA;&lt;p&gt;*Users may optionally provide a null YAML value (e.g. &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;~&lt;/code&gt;) in place of a named window key, which will cause the window to use its default name (usually the name of their shell).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;windows:&#xA;  - editor: vim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Window specific root&lt;/h3&gt; &#xA;&lt;p&gt;An optional root option can be specified per window:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: test&#xA;root: ~/projects/company&#xA;&#xA;windows:&#xA;  - small_project:&#xA;      root: ~/projects/company/small_project&#xA;      panes:&#xA;        - start this&#xA;        - start that&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This takes precedence over the main root option.&lt;/p&gt; &#xA;&lt;h2&gt;Panes&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note that if you wish to use panes, make sure that you do not have &lt;code&gt;.&lt;/code&gt; in your project name. tmux uses &lt;code&gt;.&lt;/code&gt; to delimit between window and pane indices, and tmuxinator uses the project name in combination with these indices to target the correct pane or window.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Panes are optional and are children of window entries, but unlike windows, they do not need a name. In the following example, the &lt;code&gt;editor&lt;/code&gt; window has 2 panes, one running vim, the other guard.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;windows:&#xA;  - editor:&#xA;      layout: main-vertical&#xA;      panes:&#xA;        - vim&#xA;        - guard&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The layout setting gets handed down to tmux directly, so you can choose from one of &lt;a href=&#34;https://web.archive.org/web/20220308205829/https://man.openbsd.org/OpenBSD-current/man1/tmux.1#even-horizontal&#34;&gt;the five standard layouts&lt;/a&gt; or &lt;a href=&#34;http://stackoverflow.com/a/9976282/183537&#34;&gt;specify your own&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please note the indentation here is deliberate. YAML&#39;s indentation rules can be confusing, so if your config isn&#39;t working as expected, please check the indentation.&lt;/strong&gt; For a more detailed explanation of &lt;em&gt;why&lt;/em&gt; YAML behaves this way, see &lt;a href=&#34;https://stackoverflow.com/questions/50594758/why-isnt-two-spaced-yaml-parsed-like-four-spaced-yaml/50600253#50600253&#34;&gt;this&lt;/a&gt; Stack Overflow question.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you&#39;re noticing inconsistencies when using a custom layout it may be due &lt;a href=&#34;https://github.com/tmuxinator/tmuxinator/issues/651&#34;&gt;#651&lt;/a&gt;. See &lt;a href=&#34;https://github.com/tmuxinator/tmuxinator/issues/651#issuecomment-497780424&#34;&gt;this comment&lt;/a&gt; for a workaround.&lt;/p&gt; &#xA;&lt;h2&gt;Interpreter Managers &amp;amp; Environment Variables&lt;/h2&gt; &#xA;&lt;p&gt;To use tmuxinator with rbenv, RVM, NVM etc, use the &lt;code&gt;pre_window&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;pre_window: rbenv shell 2.0.0-p247&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These command(s) will run before any subsequent commands in all panes and windows.&lt;/p&gt; &#xA;&lt;h2&gt;Custom session attachment&lt;/h2&gt; &#xA;&lt;p&gt;You can set tmuxinator to skip auto-attaching to the session by using the &lt;code&gt;attach&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;attach: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to attach to tmux in a non-standard way (e.g. for a program that makes use of tmux control mode like iTerm2), you can run arbitrary commands by using a project hook:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;on_project_exit: tmux -CC attach&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Passing directly to send-keys&lt;/h2&gt; &#xA;&lt;p&gt;tmuxinator passes commands directly to send keys. This differs from simply chaining commands together using &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; or &lt;code&gt;;&lt;/code&gt;, in that tmux will directly send the commands to a shell as if you typed them in. This allows commands to be executed on a remote server over SSH for example.&lt;/p&gt; &#xA;&lt;p&gt;To support this both the window and pane options can take an array as an argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: sample&#xA;root: ~/&#xA;&#xA;windows:&#xA;  - stats:&#xA;    - ssh stats@example.com&#xA;    - tail -f /var/log/stats.log&#xA;  - logs:&#xA;      layout: main-vertical&#xA;      panes:&#xA;        - logs:&#xA;          - ssh logs@example.com&#xA;          - cd /var/logs&#xA;          - tail -f development.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ERB&lt;/h2&gt; &#xA;&lt;p&gt;Project files support &lt;a href=&#34;https://en.wikipedia.org/wiki/ERuby#erb&#34;&gt;ERB&lt;/a&gt; for reusability across environments. Eg:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;root: &amp;lt;%= ENV[&#34;MY_CUSTOM_DIR&#34;] %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also pass arguments to your projects, and access them with ERB. Simple arguments are available in an array named &lt;code&gt;@args&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Eg:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ tmuxinator start project foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# ~/.tmuxinator/project.yml&#xA;&#xA;name: project&#xA;root: ~/&amp;lt;%= @args[0] %&amp;gt;&#xA;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also pass key-value pairs using the format &lt;code&gt;key=value&lt;/code&gt;. These will be available in a hash named &lt;code&gt;@settings&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Eg:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ tmuxinator start project workspace=~/workspace/todo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# ~/.tmuxinator/project.yml&#xA;&#xA;name: project&#xA;root: ~/&amp;lt;%= @settings[&#34;workspace&#34;] %&amp;gt;&#xA;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Starting a session&lt;/h2&gt; &#xA;&lt;p&gt;This will fire up tmux with all the tabs and panes you configured, &lt;code&gt;start&lt;/code&gt; is aliased to &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tmuxinator start [project] -n [name] -p [project-config]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use the optional &lt;code&gt;[name]&lt;/code&gt; argument, it will start a new tmux session with the custom name provided. This is to enable reuse of a project without tmux session name collision.&lt;/p&gt; &#xA;&lt;p&gt;If there is a &lt;code&gt;./.tmuxinator.yml&lt;/code&gt; file in the current working directory but not a named project file in &lt;code&gt;~/.tmuxinator&lt;/code&gt;, tmuxinator will use the local file. This is primarily intended to be used for sharing tmux configurations in complex development environments.&lt;/p&gt; &#xA;&lt;p&gt;You can provide tmuxinator with a project config file using the optional &lt;code&gt;[project-config]&lt;/code&gt; argument (e.g. &lt;code&gt;--project-config=path/to/my-project.yaml&lt;/code&gt; or &lt;code&gt;-p path/to/my-project.yaml&lt;/code&gt;). This option will override a &lt;code&gt;[project]&lt;/code&gt; name (if provided) and a local tmuxinator file (if present).&lt;/p&gt; &#xA;&lt;h2&gt;Shorthand&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/tmuxinator/tmuxinator/master/#completion&#34;&gt;shell completion files&lt;/a&gt; also include a shorthand alias for tmuxinator that can be used in place of the full name*.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mux [command]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*The &lt;code&gt;mux&lt;/code&gt; alias has been removed from the Zsh completion script because it was resulting in unexpected behavior in some setups. Including aliases in completion scripts is not standard practice and the Bash and Fish aliases may be removed in a future release. Going forward, users should create their own aliases in their shell&#39;s RC file (e.g. &lt;code&gt;alias mux=tmuxinator&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Other Commands&lt;/h2&gt; &#xA;&lt;p&gt;Copy an existing project. Aliased to &lt;code&gt;c&lt;/code&gt; and &lt;code&gt;cp&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tmuxinator copy [existing] [new]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;List all the projects you have configured. Aliased to &lt;code&gt;l&lt;/code&gt; and &lt;code&gt;ls&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tmuxinator list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remove a project. Aliased to &lt;code&gt;rm&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tmuxinator delete [project]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remove all tmuxinator configs, aliases and scripts. Aliased to &lt;code&gt;i&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tmuxinator implode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Examines your environment and identifies problems with your configuration&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tmuxinator doctor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Shows tmuxinator&#39;s help. Aliased to &lt;code&gt;h&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tmuxinator help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Shows the shell commands that get executed for a project&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tmuxinator debug [project]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Shows tmuxinator&#39;s version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tmuxinator version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Project Configuration Location&lt;/h2&gt; &#xA;&lt;p&gt;Using environment variables, it&#39;s possible to define which directory tmuxinator will use when creating or searching for project config files. (See &lt;a href=&#34;https://github.com/tmuxinator/tmuxinator/pull/511&#34;&gt;PR #511&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;Tmuxinator will attempt to use the following locations (in this order) when creating or searching for existing project configuration files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$TMUXINATOR_CONFIG&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$XDG_CONFIG_HOME/tmuxinator&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/.tmuxinator&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Window names are not displaying properly?&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;export DISABLE_AUTO_TITLE=true&lt;/code&gt; to your &lt;code&gt;.zshrc&lt;/code&gt; or &lt;code&gt;.bashrc&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;To contribute, please read the &lt;a href=&#34;https://github.com/tmuxinator/tmuxinator/raw/master/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2010-2020 Allen Bargi, Christopher Chow. See LICENSE for further details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Homebrew/homebrew-command-not-found</title>
    <updated>2024-01-07T01:56:44Z</updated>
    <id>tag:github.com,2024-01-07:/Homebrew/homebrew-command-not-found</id>
    <link href="https://github.com/Homebrew/homebrew-command-not-found" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🔍 Ubuntu’s command-not-found equivalent for Homebrew on macOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Homebrew Command Not Found&lt;/h1&gt; &#xA;&lt;p&gt;This project reproduces Ubuntu’s &lt;code&gt;command-not-found&lt;/code&gt; for Homebrew users on macOS.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Homebrew/homebrew-command-not-found/actions&#34;&gt;&lt;img src=&#34;https://github.com/Homebrew/homebrew-command-not-found/workflows/GitHub%20Actions%20CI/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;On Ubuntu, when you try to use a command that doesn’t exist locally but is available through a package, Bash will suggest you a command to install it. Using this script, you can replicate this feature on macOS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# on Ubuntu&#xA;$ when&#xA;The program &#39;when&#39; is currently not installed.  You can install it by typing:&#xA;sudo apt-get install when&#xA;&#xA;# on macOS with Homebrew&#xA;$ when&#xA;The program &#39;when&#39; is currently not installed. You can install it by typing:&#xA;  brew install when&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Over 5000 formulae are supported, representing more than 17000 different commands (100% of the main Homebrew repo).&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;First, tap this repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew tap homebrew/command-not-found&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Bash and Zsh&lt;/strong&gt;: Add the following line to your &lt;code&gt;~/.bash_profile&lt;/code&gt; (bash) or &lt;code&gt;~/.zshrc&lt;/code&gt; (zsh):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;HB_CNF_HANDLER=&#34;$(brew --repository)/Library/Taps/homebrew/homebrew-command-not-found/handler.sh&#34;&#xA;if [ -f &#34;$HB_CNF_HANDLER&#34; ]; then&#xA;source &#34;$HB_CNF_HANDLER&#34;;&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fish&lt;/strong&gt;: Add the following line to your &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-fish&#34;&gt;set HB_CNF_HANDLER (brew --repository)&#34;/Library/Taps/homebrew/homebrew-command-not-found/handler.fish&#34;&#xA;if test -f $HB_CNF_HANDLER&#xA;   source $HB_CNF_HANDLER&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;This tool requires one of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zsh.org&#34;&gt;Zsh&lt;/a&gt; (the default on macOS Catalina and above)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/bash/&#34;&gt;Bash&lt;/a&gt; (version 4 and higher)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fishshell.com&#34;&gt;Fish&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;When you tap the repo you’ll get two more &lt;code&gt;brew&lt;/code&gt; commands: &lt;code&gt;brew which-formula&lt;/code&gt; and &lt;code&gt;brew which-update&lt;/code&gt;. The first one uses a database file which gives you the formula you have to install in order to get a specific command. The file is generated by the second command by crawling all installed formulae and collecting their binaries. Having this as a tap means you get an up-to-date binaries database each time you run &lt;code&gt;brew update&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;handler.sh&lt;/code&gt; script defines a &lt;code&gt;command_not_found_handle&lt;/code&gt; function which is used by Bash when you try a command that doesn’t exist. The function calls &lt;code&gt;brew which-formula&lt;/code&gt; on your command, and if it finds a match it’ll print it to you. If not, you’ll get an error as expected.&lt;/p&gt;</summary>
  </entry>
</feed>