<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-06T02:00:23Z</updated>
  <subtitle>Weekly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>felixonmars/dnsmasq-china-list</title>
    <updated>2023-08-06T02:00:23Z</updated>
    <id>tag:github.com,2023-08-06:/felixonmars/dnsmasq-china-list</id>
    <link href="https://github.com/felixonmars/dnsmasq-china-list" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Chinese-specific configuration to improve your favorite DNS server. Best partner for chnroutes.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dnsmasq-china-list&lt;/h1&gt; &#xA;&lt;p&gt;Chinese-specific configuration to improve your favorite DNS server. Best partner for chnroutes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Improve resolve speed for Chinese domains.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Get the best CDN node near you whenever possible, but don&#39;t compromise foreign CDN results so you also get best CDN node for your VPN at the same time.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Block ISP ads on NXDOMAIN result (like 114so).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Details&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;accelerated-domains.china.conf&lt;/code&gt;: General domains to be accelerated.&lt;/p&gt; &lt;p&gt;These domains have a better resolving speed and/or result when using a Chinese DNS server.&lt;/p&gt; &lt;p&gt;To determine if a domain is eligible, one of the criteria below must be met:&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The domain&#39;s NS server is located in China mainland.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The domain will resolve to an IP located in China mainland when using a Chinese DNS server, but &lt;em&gt;not&lt;/em&gt; always do when using a foreign DNS server (For example, CDN accelerated sites that have node in China). This however does &lt;em&gt;not&lt;/em&gt; include those having node &lt;em&gt;near&lt;/em&gt; China mainland, like in Japan, Hong Kong, Taiwan, etc.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please don&#39;t add subdomains if the top domain is already in the list. This includes all .cn domains which are already matched by the &lt;code&gt;/cn/&lt;/code&gt; rule.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;google.china.conf&lt;/code&gt;: Google domains to be accelerated.&lt;/p&gt; &lt;p&gt;These domains are resolved to Google China servers when using a Chinese DNS. In most conditions this will yield better page load time for sites using Google&#39;s web services, e.g. Google Web Fonts and AdSense.&lt;/p&gt; &lt;p&gt;Bear in mind that they are &lt;em&gt;not&lt;/em&gt; considered stable. &lt;strong&gt;Use at your own risk&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;apple.china.conf&lt;/code&gt;: Apple domains to be accelerated.&lt;/p&gt; &lt;p&gt;Some ISPs (often smaller ones) have problem accessing Apple&#39;s assets using their China mainland CDN servers. Please consider remove this file if that happens to you. See #156 for some more info.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;bogus-nxdomain.china.conf&lt;/code&gt;: Known addresses that are hijacking NXDOMAIN results returned by DNS servers.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h2&gt;Automatic Installation (recommended)&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fetch the installer from github (or a mirror): &lt;code&gt;wget https://raw.githubusercontent.com/felixonmars/dnsmasq-china-list/master/install.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(Optional) Edit it to use your favorite DNS server and/or another mirror to download the list.&lt;/li&gt; &#xA; &lt;li&gt;Run it as root: &lt;code&gt;sudo ./install.sh&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can save the installer and run it again to update the list regularly.&lt;/p&gt; &#xA;&lt;h2&gt;Manual Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Place accelerated-domains.china.conf, bogus-nxdomain.china.conf (and optionally google.china.conf, apple.china.conf) under /etc/dnsmasq.d/ (Create the folder if it does not exist).&lt;/li&gt; &#xA; &lt;li&gt;Uncomment &#34;conf-dir=/etc/dnsmasq.d&#34; in /etc/dnsmasq.conf&lt;/li&gt; &#xA; &lt;li&gt;(Optional) Place dnsmasq-update-china-list into /usr/bin/&lt;/li&gt; &#xA; &lt;li&gt;(Optional) Make custom DNS server configuration and/or other services&#39; configuration.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# change the default DNS server to 202.96.128.86&#xA;make SERVER=202.96.128.86 dnsmasq&#xA;# generate unbound&#39;s configuration&#xA;make unbound&#xA;# generate bind&#39;s configuration&#xA;make bind&#xA;# full example of generating dnscrypt-proxy forwarding rules for Windows&#xA;make SERVER=101.6.6.6 NEWLINE=DOS dnscrypt-proxy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright Â© 2015 Felix Yan &amp;lt;felixonmars@archlinux.org&amp;gt;&#xA;This work is free. You can redistribute it and/or modify it under the&#xA;terms of the Do What The Fuck You Want To Public License, Version 2,&#xA;as published by Sam Hocevar. See the LICENSE file for more details.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>titusfortner/webdrivers</title>
    <updated>2023-08-06T02:00:23Z</updated>
    <id>tag:github.com,2023-08-06:/titusfortner/webdrivers</id>
    <link href="https://github.com/titusfortner/webdrivers" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Keep your Selenium WebDrivers updated automatically&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Webdrivers&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/rb/webdrivers&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/webdrivers.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/titusfortner/webdrivers/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run Selenium tests more easily with automatic installation and updates for all supported webdrivers.&lt;/p&gt; &#xA;&lt;h2&gt;Update: Future of this Project&lt;/h2&gt; &#xA;&lt;p&gt;With Google&#39;s new &lt;a href=&#34;https://developer.chrome.com/blog/chrome-for-testing/&#34;&gt;Chrome for Testing&lt;/a&gt; project, and Selenium&#39;s new &lt;a href=&#34;https://www.selenium.dev/documentation/selenium_manager/&#34;&gt;Selenium Manager&lt;/a&gt; feature, what is required of this gem has changed.&lt;/p&gt; &#xA;&lt;p&gt;If you can update to the latest version of Selenium (4.11+), please do so and stop requiring this gem. Provide feedback or raise issues to &lt;a href=&#34;https://github.com/SeleniumHQ/selenium/issues/new/choose&#34;&gt;Selenium Project&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you cannot upgrade to Selenium 4.11, Webdrivers 5.3.0 will continue to support Ruby 2.6+ and Selenium 4.0 - 4.10&lt;/p&gt; &#xA;&lt;p&gt;If you are using an older version of webdrivers gem, and cannot upgrade, you can set the required version of chromedriver to v114 (&lt;code&gt;Webdrivers::Chromedriver.required_version = &#39;114.0.5735.90&#39;&lt;/code&gt;) and &lt;a href=&#34;https://www.selenium.dev/documentation/webdriver/browsers/chrome/#disabling-build-check&#34;&gt;Disable the build check&lt;/a&gt;. This is not guaranteed to continue working and will not receive bug fixes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Webdrivers 6.0&lt;/strong&gt; To provide support for Selenium 3 and Ruby &amp;lt; 2.6 a 6.0 version is planned. It requires:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Creating a &lt;code&gt;selenium-manager.gem&lt;/code&gt; based off of &lt;a href=&#34;https://github.com/SeleniumHQ/selenium/pull/12429&#34;&gt;https://github.com/SeleniumHQ/selenium/pull/12429&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Re-implementing this gem to wrap &lt;code&gt;selenium-manager.gem&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ensuring compatible with older versions of Selenium &amp;amp; Ruby&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If anyone would like to help get Webdrivers 6 working, please let us know.&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;webdrivers&lt;/code&gt; downloads drivers and directs Selenium to use them. Currently supports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://chromedriver.chromium.org/&#34;&gt;chromedriver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mozilla/geckodriver&#34;&gt;geckodriver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SeleniumHQ/selenium/wiki/InternetExplorerDriver&#34;&gt;IEDriverServer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/&#34;&gt;msedgedriver&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Works on macOS, Linux, Windows, and Windows Subsystem for Linux (WSL) v1 and v2. And do see the browser and OS specific notes at the bottom.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;In your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;webdrivers&#39;, &#39;~&amp;gt; 5.0&#39;, require: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;webdrivers&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The drivers will now be automatically downloaded or updated when you launch a browser through Selenium.&lt;/p&gt; &#xA;&lt;h3&gt;Specific Drivers&lt;/h3&gt; &#xA;&lt;p&gt;If you want webdrivers to only manage specific drivers you can specify one or more as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;webdrivers/chromedriver&#39;&#xA;require &#39;webdrivers/geckodriver&#39;&#xA;require &#39;webdrivers/iedriver&#39;&#xA;require &#39;webdrivers/edgedriver&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Download Location&lt;/h3&gt; &#xA;&lt;p&gt;The default download location is &lt;code&gt;~/.webdrivers&lt;/code&gt; directory, and this is configurable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Webdrivers.install_dir = &#39;/webdrivers/install/dir&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can define the path via the &lt;code&gt;WD_INSTALL_DIR&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;h3&gt;Version Pinning&lt;/h3&gt; &#xA;&lt;p&gt;If you would like to use a specific (older or beta) version, you can specify it for each driver. Otherwise, the latest (stable) driver will be downloaded and passed to Selenium.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Chrome&#xA;Webdrivers::Chromedriver.required_version = &#39;2.46&#39;&#xA;&#xA;# Firefox&#xA;Webdrivers::Geckodriver.required_version  = &#39;0.23.0&#39;&#xA;&#xA;# Internet Explorer&#xA;Webdrivers::IEdriver.required_version     = &#39;3.14.0&#39;&#xA;&#xA;# Edge (Chromium)&#xA;Webdrivers::Edgedriver.required_version   = &#39;76.0.183.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can explicitly trigger the update in your code, but this will happen automatically when the driver is initialized:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Webdrivers::Chromedriver.update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Caching Drivers&lt;/h3&gt; &#xA;&lt;p&gt;You can set Webdrivers to only look for updates if the previous check was longer ago than a specified number of seconds.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Webdrivers.cache_time = 86_400 # Default: 86,400 Seconds (24 hours)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can define this value via the &lt;code&gt;WD_CACHE_TIME&lt;/code&gt; environment variable. &lt;strong&gt;Only set one to avoid confusion&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Special exception for chromedriver and msedgedriver&lt;/h5&gt; &#xA;&lt;p&gt;Cache time will be respected as long as a driver binary exists and the major.minor.build versions of the browser and the driver match. For example, if you update Chrome or Edge to v76.0.123 and its driver is still at v76.0.100, &lt;code&gt;webdrivers&lt;/code&gt; will ignore the cache time and update the driver to make sure you&#39;re using a compatible build version.&lt;/p&gt; &#xA;&lt;h3&gt;Proxy&lt;/h3&gt; &#xA;&lt;p&gt;If there is a proxy between you and the Internet then you will need to configure the gem to use the proxy. You can do this by calling the &lt;code&gt;configure&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Webdrivers.configure do |config|&#xA;  config.proxy_addr = &#39;myproxy_address.com&#39;&#xA;  config.proxy_port = &#39;8080&#39;&#xA;  config.proxy_user = &#39;username&#39;&#xA;  config.proxy_pass = &#39;password&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;SSL_connect&lt;/code&gt; errors&lt;/h3&gt; &#xA;&lt;p&gt;If you are getting an error like this (especially common on Windows):&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add the following to your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;net_http_ssl_fix&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the following to your code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;net_http_ssl_fix&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other solutions are documented on the RubyGems &lt;a href=&#34;https://guides.rubygems.org/ssl-certificate-update/&#34;&gt;website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Rake tasks&lt;/h3&gt; &#xA;&lt;p&gt;Each driver has its own set of &lt;code&gt;rake&lt;/code&gt; tasks (with &lt;code&gt;Railtie&lt;/code&gt; support) that you can call once before executing the tests. These are especially useful if you&#39;re running tests in parallel and want to avoid performing an update check per thread.&lt;/p&gt; &#xA;&lt;p&gt;If you are using Rails default configuration the &lt;code&gt;webdrivers&lt;/code&gt; gem will only be loaded in the test group so you will need to specify the test environment when using the tasks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RAILS_ENV=test rails webdrivers:chromedriver:update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are not using Rails, you&#39;ll need to load them into your Rakefile like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;webdrivers&#39;&#xA;load &#39;webdrivers/Rakefile&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The full list of available tasks is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bundle exec rake -T&#xA;rake webdrivers:chromedriver:remove           # Force remove chromedriver&#xA;rake webdrivers:chromedriver:update[version]  # Remove and download updated chromedriver if necessary&#xA;rake webdrivers:chromedriver:version          # Print current chromedriver version&#xA;rake webdrivers:edgedriver:remove             # Force remove msedgedriver&#xA;rake webdrivers:edgedriver:update[version]    # Remove and download updated msedgedriver if necessary&#xA;rake webdrivers:edgedriver:version            # Print current msedgedriver version&#xA;rake webdrivers:geckodriver:remove            # Force remove geckodriver&#xA;rake webdrivers:geckodriver:update[version]   # Remove and download updated geckodriver if necessary&#xA;rake webdrivers:geckodriver:version           # Print current geckodriver version&#xA;rake webdrivers:iedriver:remove               # Force remove IEDriverServer&#xA;rake webdrivers:iedriver:update[version]      # Remove and download updated IEDriverServer if necessary&#xA;rake webdrivers:iedriver:version              # Print current IEDriverServer version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These tasks respect the &lt;code&gt;WD_INSTALL_DIR&lt;/code&gt;, &lt;code&gt;WD_CACHE_TIME&lt;/code&gt;, &lt;code&gt;WD_CHROME_PATH&lt;/code&gt;, and &lt;code&gt;WD_EDGE_CHROME_PATH&lt;/code&gt; environment variables, which can also be passed through the &lt;code&gt;rake&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bundle exec rake webdrivers:chromedriver:update[2.46] webdrivers:geckodriver:update[0.24.0] WD_CACHE_TIME=86_400 WD_INSTALL_DIR=&#39;my_dir&#39;&#xA;2019-05-20 19:03:01 INFO Webdrivers Updated to chromedriver 2.46.628388&#xA;2019-05-20 19:03:04 INFO Webdrivers Updated to geckodriver 0.24.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that these tasks do not use any of the configurations from your project (code) and only respect the &lt;code&gt;ENV&lt;/code&gt; variables and the version (optional) passed to the &lt;code&gt;rake&lt;/code&gt; tasks.&lt;/p&gt; &#xA;&lt;h3&gt;Logging&lt;/h3&gt; &#xA;&lt;p&gt;The logging level can be configured for debugging purpose:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Webdrivers.logger.level = :DEBUG&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Browser &amp;amp; OS Specific Notes&lt;/h3&gt; &#xA;&lt;h4&gt;Chrome/Chromium&lt;/h4&gt; &#xA;&lt;p&gt;The version of &lt;code&gt;chromedriver&lt;/code&gt; will depend on the version of Chrome you are using it with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For versions &amp;gt;= 70, the downloaded version of &lt;code&gt;chromedriver&lt;/code&gt; will match the installed version of Google Chrome. More information &lt;a href=&#34;http://chromedriver.chromium.org/downloads/version-selection&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For versions &amp;lt;= 69, &lt;code&gt;chromedriver&lt;/code&gt; version 2.41 will be downloaded.&lt;/li&gt; &#xA; &lt;li&gt;For beta versions, you&#39;ll have to require the beta version of &lt;code&gt;chromedriver&lt;/code&gt; using &lt;code&gt;Webdrivers::Chromedriver.required_version&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The gem looks for the Chrome/Chromium version that &lt;code&gt;chromedriver&lt;/code&gt; will use by default. You can override this behavior by providing a path to the browser binary you want to use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Selenium::WebDriver::Chrome.path = &#39;/chromium/install/path/to/binary&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can define the path via the &lt;code&gt;WD_CHROME_PATH&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;p&gt;This is also required if Google Chrome is not installed in its &lt;a href=&#34;https://github.com/SeleniumHQ/selenium/wiki/ChromeDriver&#34;&gt;default location&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Chrome on Heroku&lt;/h4&gt; &#xA;&lt;p&gt;Follow the specific instructions &lt;a href=&#34;https://github.com/titusfortner/webdrivers/wiki/Heroku-buildpack-google-chrome&#34;&gt;here&lt;/a&gt; if you&#39;re using &lt;code&gt;heroku-buildpack-google-chrome&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Microsoft Edge (Chromium)&lt;/h4&gt; &#xA;&lt;p&gt;Microsoft Edge (Chromium) support was added in v4.1.0. Notes from the &lt;a href=&#34;https://github.com/titusfortner/webdrivers#chromechromium&#34;&gt;Chrome/Chromium&lt;/a&gt; section apply to this browser as well.&lt;/p&gt; &#xA;&lt;p&gt;Please note that &lt;code&gt;msedgedriver&lt;/code&gt; requires &lt;code&gt;selenium-webdriver&lt;/code&gt; v4.&lt;/p&gt; &#xA;&lt;h4&gt;WSLv1 support&lt;/h4&gt; &#xA;&lt;p&gt;While WSLv1 is not designed to run headful applications like Chrome, it can run exes; as such when found to be running in WSL, &lt;code&gt;webdrivers&lt;/code&gt; will use Chrome on the Windows filesystem.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s recommended that you install the new PowerShell (PS7) to avoid &lt;a href=&#34;https://github.com/microsoft/terminal/issues/367&#34;&gt;a known issue&lt;/a&gt; with the console font being changed when calling the old PowerShell (PS5).&lt;/p&gt; &#xA;&lt;h4&gt;WSLv2 support&lt;/h4&gt; &#xA;&lt;p&gt;Webdrivers will detect WSLv2 as running on Linux and use Chrome on the Linux filesystem.&lt;/p&gt; &#xA;&lt;p&gt;WSLv2 doesn&#39;t support connecting to host ports out of the box, so it isn&#39;t possible to connect to Chromedriver on Windows without extra configurations, see: &lt;a href=&#34;https://github.com/microsoft/WSL/issues/4619&#34;&gt;https://github.com/microsoft/WSL/issues/4619&lt;/a&gt;. The simplest way to use Chromedriver with WSLv2 is to run Chrome headless on Linux.&lt;/p&gt; &#xA;&lt;h4&gt;Chrome and Edge on Apple M1 (&lt;code&gt;arm64&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re switching from Intel to M1, you&#39;ll have to manually delete the existing Intel (&lt;code&gt;mac64&lt;/code&gt;) driver before the M1 (&lt;code&gt;arm64&lt;/code&gt;) build can be downloaded. Otherwise, you&#39;ll get an error: &lt;code&gt;Bad CPU type in executable - ~/.webdrivers/chromedriver (Errno::E086)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Wiki&lt;/h2&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://github.com/titusfortner/webdrivers/wiki&#34;&gt;wiki&lt;/a&gt; for solutions to commonly reported issues.&lt;/p&gt; &#xA;&lt;p&gt;Join us in the &lt;code&gt;#webdrivers-gem&lt;/code&gt; channel on &lt;a href=&#34;https://seleniumhq.herokuapp.com/&#34;&gt;Slack&lt;/a&gt; if you have any questions.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;, see LICENSE.txt for full details and copyright.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports and pull requests are welcome &lt;a href=&#34;https://github.com/titusfortner/webdrivers&#34;&gt;on GitHub&lt;/a&gt;. Run &lt;code&gt;bundle exec rake&lt;/code&gt; and squash the commits in your PRs.&lt;/p&gt;</summary>
  </entry>
</feed>