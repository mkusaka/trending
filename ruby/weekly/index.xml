<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-18T01:56:30Z</updated>
  <subtitle>Weekly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>67272-App-Design-Dev/University</title>
    <updated>2024-02-18T01:56:30Z</updated>
    <id>tag:github.com,2024-02-18:/67272-App-Design-Dev/University</id>
    <link href="https://github.com/67272-App-Design-Dev/University" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Starter code for a series of class exercises in 67-272&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;67-272: University&lt;/h1&gt; &#xA;&lt;p&gt;This project was created as means of giving students an opportunity to practice course concepts with some in-class learning exercises. There is no pretense that this is a production-ready system or that it has 100 percent test coverage -- these are for learning purposes.&lt;/p&gt; &#xA;&lt;p&gt;Some items and helper files have been added in advance to speed up time in-class to complete these exercises. For example, Prof. H&#39;s &lt;code&gt;minitest_extensions&lt;/code&gt; module is present and included in &lt;code&gt;test/test_helper.rb&lt;/code&gt; by default. Another example is that &lt;code&gt;validates_timeliness&lt;/code&gt; gem is installed and the initializer for that gem has also been run for you. Note that time zone in &lt;code&gt;config/application.rb&lt;/code&gt; was defaulted to Eastern (Pgh) time; feel free to change this as appropriate.&lt;/p&gt; &#xA;&lt;p&gt;You may work and talk with others in class for help completing this exercise.&lt;/p&gt; &#xA;&lt;h2&gt;Instructions for Part 1&lt;/h2&gt; &#xA;&lt;p&gt;Having cloned this repo to your laptop (recommended) or gotten the zip file from GitHub, we need to set up the project as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install gems with &lt;code&gt;bundle install&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create the database with &lt;code&gt;rails db:migrate&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open up &lt;code&gt;app/models/department.rb&lt;/code&gt; and review the code&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open up &lt;code&gt;app/models/faculty.rb&lt;/code&gt; and review the code comments given&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open up &lt;code&gt;test/models/faculty_test.rb&lt;/code&gt; and complete the tests so the methods commented on will be covered properly and completely&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;this will require you to set up a context for faculty (skelton already in place). Looking at the factory file for faculty, you see that Prof. Q is the default faculty member; probably a good idea to create the first faculty object as &lt;code&gt;@profq&lt;/code&gt;. Of course, also make sure that not every faculty you create is named &#39;Jeria Quesenberry&#39; ;-)&lt;/li&gt; &#xA;   &lt;li&gt;before testing, load the testing data into a clean copy of your dev database with the command &lt;code&gt;rails db:contexts&lt;/code&gt;. (&lt;em&gt;Note that this is not built into Rails; it was written for you and also exists in your project starter code.&lt;/em&gt;) Once that&#39;s done and the contexts build without error, re-open rails console and run &lt;code&gt;Department.all&lt;/code&gt; and &lt;code&gt;Faculty.all&lt;/code&gt; and see that the testing context data is loaded in the dev environment.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the tests and see that tests for department passes while tests for faculty fail.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Complete the code in &lt;code&gt;app/models/faculty.rb&lt;/code&gt; so that the tests pass with 100% test coverage&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;What would &lt;code&gt;Faculty.alphabetical.active.first.department&lt;/code&gt; return in rails console? Go to rails console and verify that you are correct (or if not, figure out why you were wrong)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Qapla&#39;&lt;/p&gt; &#xA;&lt;p&gt;Prof. H &amp;amp; Prof. Shihong&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>stripe/stripe-ruby</title>
    <updated>2024-02-18T01:56:30Z</updated>
    <id>tag:github.com,2024-02-18:/stripe/stripe-ruby</id>
    <link href="https://github.com/stripe/stripe-ruby" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ruby library for the Stripe API.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Stripe Ruby Library&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/rb/stripe&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/stripe.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/stripe/stripe-ruby/actions?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/stripe/stripe-ruby/actions/workflows/ci.yml/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/stripe/stripe-ruby?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/stripe/stripe-ruby/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Stripe Ruby library provides convenient access to the Stripe API from applications written in the Ruby language. It includes a pre-defined set of classes for API resources that initialize themselves dynamically from API responses which makes it compatible with a wide range of versions of the Stripe API.&lt;/p&gt; &#xA;&lt;p&gt;The library also provides other features. For example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easy configuration path for fast setup and use.&lt;/li&gt; &#xA; &lt;li&gt;Helpers for pagination.&lt;/li&gt; &#xA; &lt;li&gt;Built-in mechanisms for the serialization of parameters according to the expectations of Stripe&#39;s API.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://stripe.com/docs/api?lang=ruby&#34;&gt;Ruby API docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://www.youtube.com/playlist?list=PLy1nL-pvL2M50RmP6ie-gdcSnfOuQCRYk&#34;&gt;video demonstrations&lt;/a&gt; covering how to use the library.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You don&#39;t need this source code unless you want to modify the gem. If you just want to use the package, just run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gem install stripe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to build the gem from source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gem build stripe.gemspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ruby 2.3+.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Bundler&lt;/h3&gt; &#xA;&lt;p&gt;If you are installing via bundler, you should be sure to use the https rubygems source in your Gemfile, as any gems fetched over http could potentially be compromised in transit and alter the code of gems fetched securely over https:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;source &#39;https://rubygems.org&#39;&#xA;&#xA;gem &#39;rails&#39;&#xA;gem &#39;stripe&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The library needs to be configured with your account&#39;s secret key which is available in your &lt;a href=&#34;https://dashboard.stripe.com/account/apikeys&#34;&gt;Stripe Dashboard&lt;/a&gt;. Set &lt;code&gt;Stripe.api_key&lt;/code&gt; to its value:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;stripe&#39;&#xA;Stripe.api_key = &#39;sk_test_...&#39;&#xA;&#xA;# list customers&#xA;Stripe::Customer.list()&#xA;&#xA;# retrieve single customer&#xA;Stripe::Customer.retrieve(&#39;cus_123456789&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Per-request Configuration&lt;/h3&gt; &#xA;&lt;p&gt;For apps that need to use multiple keys during the lifetime of a process, like one that uses &lt;a href=&#34;https://stripe.com/connect&#34;&gt;Stripe Connect&lt;/a&gt;, it&#39;s also possible to set a per-request key and/or account:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;stripe&#34;&#xA;&#xA;Stripe::Customer.list(&#xA;  {},&#xA;  {&#xA;    api_key: &#39;sk_test_...&#39;,&#xA;    stripe_account: &#39;acct_...&#39;,&#xA;    stripe_version: &#39;2018-02-28&#39;,&#xA;  }&#xA;)&#xA;&#xA;Stripe::Customer.retrieve(&#xA;  &#39;cus_123456789&#39;,&#xA;  {&#xA;    api_key: &#39;sk_test_...&#39;,&#xA;    stripe_account: &#39;acct_...&#39;,&#xA;    stripe_version: &#39;2018-02-28&#39;,&#xA;  }&#xA;)&#xA;&#xA;Stripe::Customer.retrieve(&#xA;  {&#xA;    id: &#39;cus_123456789&#39;,&#xA;    expand: %w(balance_transaction)&#xA;  },&#xA;  {&#xA;    stripe_version: &#39;2018-02-28&#39;,&#xA;    api_key: &#39;sk_test_...&#39;,&#xA;  }&#xA;)&#xA;&#xA;Stripe::Customer.capture(&#xA;  &#39;cus_123456789&#39;,&#xA;  {},&#xA;  {&#xA;    stripe_version: &#39;2018-02-28&#39;,&#xA;    api_key: &#39;sk_test_...&#39;,&#xA;  }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Keep in mind that there are different method signatures depending on the action:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When operating on a collection (e.g. &lt;code&gt;.list&lt;/code&gt;, &lt;code&gt;.create&lt;/code&gt;) the method signature is &lt;code&gt;method(params, opts)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;When operating on resource (e.g. &lt;code&gt;.capture&lt;/code&gt;, &lt;code&gt;.update&lt;/code&gt;) the method signature is &lt;code&gt;method(id, params, opts)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;One exception is that &lt;code&gt;retrieve&lt;/code&gt;, despite being an operation on a resource, has the signature &lt;code&gt;retrieve(id, opts)&lt;/code&gt;. In addition, it will accept a Hash for the &lt;code&gt;id&lt;/code&gt; param but will extract the &lt;code&gt;id&lt;/code&gt; key out and use the others as options.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Accessing a response object&lt;/h3&gt; &#xA;&lt;p&gt;Get access to response objects by initializing a client and using its &lt;code&gt;request&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client = Stripe::StripeClient.new&#xA;customer, resp = client.request do&#xA;  Stripe::Customer.retrieve(&#39;cus_123456789&#39;,)&#xA;end&#xA;puts resp.request_id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring a proxy&lt;/h3&gt; &#xA;&lt;p&gt;A proxy can be configured with &lt;code&gt;Stripe.proxy&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Stripe.proxy = &#39;https://user:pass@example.com:1234&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring an API Version&lt;/h3&gt; &#xA;&lt;p&gt;By default, the library will use the API version pinned to the account making a request. This can be overridden with this global option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Stripe.api_version = &#39;2018-02-28&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://stripe.com/docs/api/versioning?lang=ruby&#34;&gt;versioning in the API reference&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring CA Bundles&lt;/h3&gt; &#xA;&lt;p&gt;By default, the library will use its own internal bundle of known CA certificates, but it&#39;s possible to configure your own:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Stripe.ca_bundle_path = &#39;path/to/ca/bundle&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring Automatic Retries&lt;/h3&gt; &#xA;&lt;p&gt;You can enable automatic retries on requests that fail due to a transient problem by configuring the maximum number of retries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Stripe.max_network_retries = 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Various errors can trigger a retry, like a connection error or a timeout, and also certain API responses like HTTP status &lt;code&gt;409 Conflict&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://stripe.com/docs/api/idempotent_requests?lang=ruby&#34;&gt;Idempotency keys&lt;/a&gt; are added to requests to guarantee that retries are safe.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring Timeouts&lt;/h3&gt; &#xA;&lt;p&gt;Open, read and write timeouts are configurable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Stripe.open_timeout = 30 # in seconds&#xA;Stripe.read_timeout = 80&#xA;Stripe.write_timeout = 30 # only supported on Ruby 2.6+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please take care to set conservative read timeouts. Some API requests can take some time, and a short timeout increases the likelihood of a problem within our servers.&lt;/p&gt; &#xA;&lt;h3&gt;Logging&lt;/h3&gt; &#xA;&lt;p&gt;The library can be configured to emit logging that will give you better insight into what it&#39;s doing. The &lt;code&gt;info&lt;/code&gt; logging level is usually most appropriate for production use, but &lt;code&gt;debug&lt;/code&gt; is also available for more verbosity.&lt;/p&gt; &#xA;&lt;p&gt;There are a few options for enabling it:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the environment variable &lt;code&gt;STRIPE_LOG&lt;/code&gt; to the value &lt;code&gt;debug&lt;/code&gt; or &lt;code&gt;info&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ export STRIPE_LOG=info&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;Stripe.log_level&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Stripe.log_level = Stripe::LEVEL_INFO&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Instrumentation&lt;/h3&gt; &#xA;&lt;p&gt;The library has various hooks that user code can tie into by passing a block to &lt;code&gt;Stripe::Instrumentation.subscribe&lt;/code&gt; to be notified about specific events.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;request_begin&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Invoked when an HTTP request starts. Receives &lt;code&gt;RequestBeginEvent&lt;/code&gt; with the following properties:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;method&lt;/code&gt;: HTTP method. (&lt;code&gt;Symbol&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;path&lt;/code&gt;: Request path. (&lt;code&gt;String&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;user_data&lt;/code&gt;: A hash on which users can set arbitrary data, and which will be passed through to &lt;code&gt;request_end&lt;/code&gt; invocations. This could be used, for example, to assign unique IDs to each request, and it&#39;d work even if many requests are running in parallel. All subscribers share the same object for any particular request, so they must be careful to use unique keys that will not conflict with other subscribers. (&lt;code&gt;Hash&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;request_end&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Invoked when an HTTP request finishes, regardless of whether it terminated with a success or error. Receives &lt;code&gt;RequestEndEvent&lt;/code&gt; with the following properties:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;duration&lt;/code&gt;: Request duration in seconds. (&lt;code&gt;Float&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;http_status&lt;/code&gt;: HTTP response code (&lt;code&gt;Integer&lt;/code&gt;) if available, or &lt;code&gt;nil&lt;/code&gt; in case of a lower level network error.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;method&lt;/code&gt;: HTTP method. (&lt;code&gt;Symbol&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;num_retries&lt;/code&gt;: The number of retries. (&lt;code&gt;Integer&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;path&lt;/code&gt;: Request path. (&lt;code&gt;String&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;user_data&lt;/code&gt;: A hash on which users may have set arbitrary data in &lt;code&gt;request_begin&lt;/code&gt;. See above for more information. (&lt;code&gt;Hash&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;request_id&lt;/code&gt;: HTTP request identifier. (&lt;code&gt;String&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;response_header&lt;/code&gt;: The response headers. (&lt;code&gt;Hash&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;response_body&lt;/code&gt; = The response body. (&lt;code&gt;String&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;request_header&lt;/code&gt; = The request headers. (&lt;code&gt;Hash&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;request_body&lt;/code&gt; = The request body. (&lt;code&gt;String&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Example&lt;/h4&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Stripe::Instrumentation.subscribe(:request_end) do |request_event|&#xA;  # Filter out high-cardinality ids from `path`&#xA;  path_parts = request_event.path.split(&#34;/&#34;).drop(2)&#xA;  resource = path_parts.map { |part| part.match?(/\A[a-z_]+\z/) ? part : &#34;:id&#34; }.join(&#34;/&#34;)&#xA;&#xA;  tags = {&#xA;    method: request_event.method,&#xA;    resource: resource,&#xA;    code: request_event.http_status,&#xA;    retries: request_event.num_retries&#xA;  }&#xA;  StatsD.distribution(&#39;stripe_request&#39;, request_event.duration, tags: tags)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Writing a Plugin&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re writing a plugin that uses the library, we&#39;d appreciate it if you identified using &lt;code&gt;#set_app_info&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Stripe.set_app_info(&#39;MyAwesomePlugin&#39;, version: &#39;1.2.34&#39;, url: &#39;https://myawesomeplugin.info&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This information is passed along when the library makes calls to the Stripe API.&lt;/p&gt; &#xA;&lt;h3&gt;Telemetry&lt;/h3&gt; &#xA;&lt;p&gt;By default, the library sends telemetry to Stripe regarding request latency and feature usage. These numbers help Stripe improve the overall latency of its API for all users, and improve popular features.&lt;/p&gt; &#xA;&lt;p&gt;You can disable this behavior if you prefer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Stripe.enable_telemetry = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Beta SDKs&lt;/h3&gt; &#xA;&lt;p&gt;Stripe has features in the beta phase that can be accessed via the beta version of this package. We would love for you to try these and share feedback with us before these features reach the stable phase. To install a beta version use &lt;code&gt;gem install&lt;/code&gt; with the exact version you&#39;d like to use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gem install stripe -v 7.1.0.pre.beta.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; There can be breaking changes between beta versions. Therefore we recommend pinning the package version to a specific beta version in your Gemfile. This way you can install the same version each time without breaking changes unless you are intentionally looking for the latest beta version.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;We highly recommend keeping an eye on when the beta feature you are interested in goes from beta to stable so that you can move from using a beta version of the SDK to the stable version.&lt;/p&gt; &#xA;&lt;p&gt;If your beta feature requires a &lt;code&gt;Stripe-Version&lt;/code&gt; header to be sent, use the &lt;code&gt;Stripe.api_version&lt;/code&gt; field to set it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Stripe.api_version += &#34;; feature_beta=v3&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;New features and bug fixes are released on the latest major version of the Stripe Ruby library. If you are on an older major version, we recommend that you upgrade to the latest in order to use the new features and bug fixes including those for security vulnerabilities. Older major versions of the package will continue to be available for use, but will not be receiving any updates.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;The test suite depends on &lt;a href=&#34;https://github.com/stripe/stripe-mock&#34;&gt;stripe-mock&lt;/a&gt;, so make sure to fetch and run it from a background terminal (&lt;a href=&#34;https://github.com/stripe/stripe-mock&#34;&gt;stripe-mock&#39;s README&lt;/a&gt; also contains instructions for installing via Homebrew and other methods):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get -u github.com/stripe/stripe-mock&#xA;stripe-mock&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run all tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bundle exec rake test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run a single test suite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bundle exec ruby -Ilib/ test/stripe/util_test.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run a single test:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bundle exec ruby -Ilib/ test/stripe/util_test.rb -n /should.convert.names.to.symbols/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the linter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bundle exec rake rubocop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Update bundled CA certificates from the &lt;a href=&#34;http://curl.haxx.se/docs/caextract.html&#34;&gt;Mozilla cURL release&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bundle exec rake update_certs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Update the bundled &lt;a href=&#34;https://github.com/stripe/stripe-mock&#34;&gt;stripe-mock&lt;/a&gt; by editing the version number found in &lt;code&gt;.travis.yml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;!--&#xA;# vim: set tw=79:&#xA;--&gt;</summary>
  </entry>
</feed>