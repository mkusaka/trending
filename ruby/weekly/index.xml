<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-26T01:57:56Z</updated>
  <subtitle>Weekly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>feedbin/feedbin</title>
    <updated>2023-11-26T01:57:56Z</updated>
    <id>tag:github.com,2023-11-26:/feedbin/feedbin</id>
    <link href="https://github.com/feedbin/feedbin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A nice place to read on the web.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Feedbin&lt;/h1&gt; &#xA;&lt;p&gt;Feedbin is a simple, fast and nice looking RSS reader.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/133809/192301669-ffc7f86e-ad0a-434d-9b76-219f41b62f4b.png&#34; alt=&#34;Feedbin Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Support is available to Feedbin customers by emailing &lt;a href=&#34;mailto:support@feedbin.com&#34;&gt;support@feedbin.com&lt;/a&gt;. This is also the best way to &lt;a href=&#34;https://feedbin.com/help/making-a-feature-request/&#34;&gt;submit feature requests&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;No support is provided for installing the open-source project.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Feedbin is a web based RSS reader. It provides a user interface for reading and managing feeds as well as a &lt;a href=&#34;https://github.com/feedbin/feedbin-api&#34;&gt;REST-like API&lt;/a&gt; for clients to connect to.&lt;/p&gt; &#xA;&lt;p&gt;Feedbin&#39;s goal is to be a great web-based RSS service. This goal is at odds with being a great self-hosted RSS reader. There are a lot of moving parts and things to configure, and for that reason I do not recommend that you run Feedbin in production unless you have plenty of time to get it properly configured.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re looking for a self-hosted RSS reader check out:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nkanaev/yarr&#34;&gt;yarr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tt-rss.org&#34;&gt;Tiny Tiny RSS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://freshrss.org&#34;&gt;Fresh RSS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And if you really want to run the whole Feedbin stack, take a look at this &lt;a href=&#34;https://github.com/angristan/feedbin-docker&#34;&gt;Docker version&lt;/a&gt;. If you would like to try Feedbin out you can &lt;a href=&#34;https://feedbin.com/&#34;&gt;sign up&lt;/a&gt; for an account.&lt;/p&gt; &#xA;&lt;p&gt;The main Feedbin project is a &lt;a href=&#34;https://rubyonrails.org/&#34;&gt;Ruby on Rails&lt;/a&gt; application. In addition to the main project there are several other services that provide additional functionality. None of these services are required to get Feedbin running locally.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Optional Extras&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/feedbin/privacy-please&#34;&gt;&lt;strong&gt;Privacy Please:&lt;/strong&gt;&lt;/a&gt; Privacy Please is an https image proxy. In production Feedbin is https only. One issue with https is all assets must be served over https as well or the browser will show insecure content warnings. Privacy Please proxies all image requests through an https enabled host to prevent this. Using a proxy has the added benefit of providing privacy while using Feedbin.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/feedbin/extract&#34;&gt;&lt;strong&gt;extract:&lt;/strong&gt;&lt;/a&gt; Extract is a Node.js service that extract content from web pages. It is used to extract the full content of an article when a feed only provide excerpts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/esimov/pigo/releases&#34;&gt;&lt;strong&gt;pigo:&lt;/strong&gt;&lt;/a&gt; pigo provides face detection for better &lt;a href=&#34;https://feedbin.com/blog/2015/10/22/image-previews/&#34;&gt;preview image cropping&lt;/a&gt;. Make sure it&#39;s available in your PATH or provide a PIGO_PATH environment variable.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux or macOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ruby-lang.org/en/&#34;&gt;Ruby 3.2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.postgresql.org/&#34;&gt;Postgres 11&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://redis.io/&#34;&gt;Redis 6&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.elastic.co/downloads/past-releases/#elasticsearch&#34;&gt;Elasticsearch 8.5&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Ultimately, you&#39;ll need a Ruby environment and a Rack compatible application server.&lt;/p&gt; &#xA;&lt;p&gt;First, install the dependencies listed under requirements.&lt;/p&gt; &#xA;&lt;p&gt;Next clone the repository and install the application dependencies&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/feedbin/feedbin.git&#xA;cd feedbin&#xA;bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you encounter any errors after running &lt;code&gt;bundle&lt;/code&gt; there is a problem installing one of the dependencies. You must find out how to get this dependency installed on your platform.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Configure&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Feedbin uses environment variables for configuration. Feedbin will run without most of these, but various features and functionality will be turned off.&lt;/p&gt; &#xA;&lt;p&gt;Rename &lt;a href=&#34;https://raw.githubusercontent.com/feedbin/feedbin/main/.env.example&#34;&gt;.env.example&lt;/a&gt; to &lt;code&gt;.env&lt;/code&gt; and customize it with your settings.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Setup the database&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rake db:setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Start the processes&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle exec foreman start&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>rails/spring</title>
    <updated>2023-11-26T01:57:56Z</updated>
    <id>tag:github.com,2023-11-26:/rails/spring</id>
    <link href="https://github.com/rails/spring" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rails application preloader&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Spring&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rails/spring/actions/workflows/ci.yml?branch=main&#34;&gt;&lt;img src=&#34;https://github.com/rails/spring/actions/workflows/ci.yml/badge.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/rb/spring&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/spring.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Spring is a Rails application preloader. It speeds up development by keeping your application running in the background, so you don&#39;t need to boot it every time you run a test, rake task or migration.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Totally automatic; no need to explicitly start and stop the background process&lt;/li&gt; &#xA; &lt;li&gt;Reloads your application code on each run&lt;/li&gt; &#xA; &lt;li&gt;Restarts your application when configs / initializers / gem dependencies are changed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ruby versions: MRI 2.7, MRI 3.0, MRI 3.1, MRI 3.2&lt;/li&gt; &#xA; &lt;li&gt;Rails versions: 6.0, 6.1, 7.0&lt;/li&gt; &#xA; &lt;li&gt;Bundler v2.1+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Spring makes extensive use of &lt;code&gt;Process.fork&lt;/code&gt;, so won&#39;t be able to provide a speed up on platforms which don&#39;t support forking (Windows, JRuby).&lt;/p&gt; &#xA;&lt;h2&gt;Walkthrough&lt;/h2&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;Add Spring to your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;spring&#34;, group: :development&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Note: using &lt;code&gt;gem &#34;spring&#34;, git: &#34;...&#34;&lt;/code&gt; &lt;em&gt;won&#39;t&lt;/em&gt; work and is not a supported way of using Spring.)&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s recommended to &#39;springify&#39; the executables in your &lt;code&gt;bin/&lt;/code&gt; directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle install&#xA;$ bundle exec spring binstub --all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This generates a &lt;code&gt;bin/spring&lt;/code&gt; executable, and inserts a small snippet of code into relevant existing executables. The snippet looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;begin&#xA;  load File.expand_path(&#39;../spring&#39;, __FILE__)&#xA;rescue LoadError =&amp;gt; e&#xA;  raise unless e.message.include?(&#39;spring&#39;)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On platforms where Spring is installed and supported, this snippet hooks Spring into the execution of commands. In other cases, the snippet will just be silently ignored, and the lines after it will be executed as normal.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t want to prefix every command you type with &lt;code&gt;bin/&lt;/code&gt;, you can &lt;a href=&#34;https://github.com/direnv/direnv#the-stdlib&#34;&gt;use direnv&lt;/a&gt; to automatically add &lt;code&gt;./bin&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt; when you &lt;code&gt;cd&lt;/code&gt; into your application. Simply create an &lt;code&gt;.envrc&lt;/code&gt; file with the command &lt;code&gt;PATH_add bin&lt;/code&gt; in your Rails directory.&lt;/p&gt; &#xA;&lt;h3&gt;Enable reloading&lt;/h3&gt; &#xA;&lt;p&gt;Spring reloads application code, and therefore needs the application to have reloading enabled.&lt;/p&gt; &#xA;&lt;p&gt;Ensure that &lt;code&gt;config.enable_reloading&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; in the environments that Spring manages. That setting is typically configured in &lt;code&gt;config/environments/*.rb&lt;/code&gt;. In particular, make sure it is &lt;code&gt;true&lt;/code&gt; for the &lt;code&gt;test&lt;/code&gt; environment.&lt;/p&gt; &#xA;&lt;p&gt;Note: in versions of Rails before 7.1, the setting is called &lt;code&gt;cache_classes&lt;/code&gt;, and it needs to be &lt;code&gt;false&lt;/code&gt; for Spring to work.&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;For this walkthrough I&#39;ve generated a new Rails application, and run &lt;code&gt;rails generate scaffold post name:string&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s run a test:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ time bin/rake test test/controllers/posts_controller_test.rb&#xA;Running via Spring preloader in process 2734&#xA;Run options:&#xA;&#xA;# Running tests:&#xA;&#xA;.......&#xA;&#xA;Finished tests in 0.127245s, 55.0121 tests/s, 78.5887 assertions/s.&#xA;&#xA;7 tests, 10 assertions, 0 failures, 0 errors, 0 skips&#xA;&#xA;real    0m2.165s&#xA;user    0m0.281s&#xA;sys     0m0.066s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That wasn&#39;t particularly fast because it was the first run, so Spring had to boot the application. It&#39;s now running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bin/spring status&#xA;Spring is running:&#xA;&#xA;26150 spring server | spring-demo-app | started 3 secs ago&#xA;26155 spring app    | spring-demo-app | started 3 secs ago | test mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The next run is faster:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ time bin/rake test test/controllers/posts_controller_test.rb&#xA;Running via Spring preloader in process 8352&#xA;Run options:&#xA;&#xA;# Running tests:&#xA;&#xA;.......&#xA;&#xA;Finished tests in 0.176896s, 39.5714 tests/s, 56.5305 assertions/s.&#xA;&#xA;7 tests, 10 assertions, 0 failures, 0 errors, 0 skips&#xA;&#xA;real    0m0.610s&#xA;user    0m0.276s&#xA;sys     0m0.059s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If we edit any of the application files, or test files, the changes will be picked up on the next run without the background process having to restart. This works in exactly the same way as the code reloading which allows you to refresh your browser and instantly see changes during development.&lt;/p&gt; &#xA;&lt;p&gt;But if we edit any of the files which were used to start the application (configs, initializers, your gemfile), the application needs to be fully restarted. This happens automatically.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s &#34;edit&#34; &lt;code&gt;config/application.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ touch config/application.rb&#xA;$ bin/spring status&#xA;Spring is running:&#xA;&#xA;26150 spring server | spring-demo-app | started 36 secs ago&#xA;26556 spring app    | spring-demo-app | started 1 sec ago | test mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The application detected that &lt;code&gt;config/application.rb&lt;/code&gt; changed and automatically restarted itself.&lt;/p&gt; &#xA;&lt;p&gt;If we run a command that uses a different environment, then that environment gets booted up:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bin/rake routes&#xA;Running via Spring preloader in process 2363&#xA;    posts GET    /posts(.:format)          posts#index&#xA;          POST   /posts(.:format)          posts#create&#xA; new_post GET    /posts/new(.:format)      posts#new&#xA;edit_post GET    /posts/:id/edit(.:format) posts#edit&#xA;     post GET    /posts/:id(.:format)      posts#show&#xA;          PUT    /posts/:id(.:format)      posts#update&#xA;          DELETE /posts/:id(.:format)      posts#destroy&#xA;&#xA;$ bin/spring status&#xA;Spring is running:&#xA;&#xA;26150 spring server | spring-demo-app | started 1 min ago&#xA;26556 spring app    | spring-demo-app | started 42 secs ago | test mode&#xA;26707 spring app    | spring-demo-app | started 2 secs ago | development mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There&#39;s no need to &#34;shut down&#34; Spring. This will happen automatically when you close your terminal. However, if you do want to do a manual shut down, use the &lt;code&gt;stop&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bin/spring stop&#xA;Spring stopped.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From within your code, you can check whether Spring is active with &lt;code&gt;if defined?(Spring)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Removal&lt;/h3&gt; &#xA;&lt;p&gt;To remove Spring:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#39;Unspring&#39; your bin/ executables: &lt;code&gt;bin/spring binstub --remove --all&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Remove spring from your Gemfile&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Deployment&lt;/h3&gt; &#xA;&lt;p&gt;You must not install Spring on your production environment. To prevent it from being installed, run the &lt;code&gt;bundle config set without &#39;development test&#39;&lt;/code&gt; before &lt;code&gt;bundle install&lt;/code&gt; command which is used to install gems on your production machines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle config set without &#39;development test&#39;&#xA;$ bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;rake&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Runs a rake task. Rake tasks run in the &lt;code&gt;development&lt;/code&gt; environment by default. You can change this on the fly by using the &lt;code&gt;RAILS_ENV&lt;/code&gt; environment variable. The environment is also configurable with the &lt;code&gt;Spring::Commands::Rake.environment_matchers&lt;/code&gt; hash. This has sensible defaults, but if you need to match a specific task to a specific environment, you&#39;d do it like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Spring::Commands::Rake.environment_matchers[&#34;perf_test&#34;] = &#34;test&#34;&#xA;Spring::Commands::Rake.environment_matchers[/^perf/]     = &#34;test&#34;&#xA;&#xA;# To change the environment when you run `rake` with no arguments&#xA;Spring::Commands::Rake.environment_matchers[:default] = &#34;development&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;rails console&lt;/code&gt;, &lt;code&gt;rails generate&lt;/code&gt;, &lt;code&gt;rails runner&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;These execute the rails command you already know and love. If you run a different sub command (e.g. &lt;code&gt;rails server&lt;/code&gt;) then Spring will automatically pass it through to the underlying &lt;code&gt;rails&lt;/code&gt; executable (without the speed-up).&lt;/p&gt; &#xA;&lt;h3&gt;Additional commands&lt;/h3&gt; &#xA;&lt;p&gt;You can add these to your Gemfile for additional commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jonleighton/spring-commands-rspec&#34;&gt;spring-commands-rspec&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jonleighton/spring-commands-cucumber&#34;&gt;spring-commands-cucumber&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jvanbaarsen/spring-commands-spinach&#34;&gt;spring-commands-spinach&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jonleighton/spring-commands-testunit&#34;&gt;spring-commands-testunit&lt;/a&gt; - useful for running &lt;code&gt;Test::Unit&lt;/code&gt; tests on Rails 3, since only Rails 4 allows you to use &lt;code&gt;rake test path/to/test&lt;/code&gt; to run a particular test/directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DocSpring/spring-commands-parallel-tests&#34;&gt;spring-commands-parallel-tests&lt;/a&gt; - Adds the &lt;code&gt;parallel_*&lt;/code&gt; commands from &lt;a href=&#34;https://github.com/grosser/parallel_tests&#34;&gt;&lt;code&gt;parallel_tests&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alejandrobabio/spring-commands-teaspoon.git&#34;&gt;spring-commands-teaspoon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gabrieljoelc/spring-commands-m.git&#34;&gt;spring-commands-m&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/p0deje/spring-commands-rubocop&#34;&gt;spring-commands-rubocop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wintersolutions/spring-commands-rackup&#34;&gt;spring-commands-rackup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wintersolutions/spring-commands-rack-console&#34;&gt;spring-commands-rack-console&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lakim/spring-commands-standard&#34;&gt;spring-commands-standard&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Use without adding to bundle&lt;/h2&gt; &#xA;&lt;p&gt;If you don&#39;t want Spring-related code checked into your source repository, it&#39;s possible to use Spring without adding to your Gemfile. However, using Spring binstubs without adding Spring to the Gemfile is not supported.&lt;/p&gt; &#xA;&lt;p&gt;To use Spring like this, do a &lt;code&gt;gem install spring&lt;/code&gt; and then prefix commands with &lt;code&gt;spring&lt;/code&gt;. For example, rather than running &lt;code&gt;bin/rake -T&lt;/code&gt;, you&#39;d run &lt;code&gt;spring rake -T&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Temporarily disabling Spring&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re using Spring binstubs, but temporarily don&#39;t want commands to run through Spring, set the &lt;code&gt;DISABLE_SPRING&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;h2&gt;Class reloading&lt;/h2&gt; &#xA;&lt;p&gt;Spring uses Rails&#39; class reloading mechanism to keep your code up to date between test runs. This is the same mechanism which allows you to see changes during development when you refresh the page. However, you may never have used this mechanism with your &lt;code&gt;test&lt;/code&gt; environment before, and this can cause problems.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s important to realise that code reloading means that the constants in your application are &lt;em&gt;different objects&lt;/em&gt; after files have changed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bin/rails runner &#39;puts User.object_id&#39;&#xA;70127987886040&#xA;$ touch app/models/user.rb&#xA;$ bin/rails runner &#39;puts User.object_id&#39;&#xA;70127976764620&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Suppose you have an initializer &lt;code&gt;config/initializers/save_user_class.rb&lt;/code&gt; like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;USER_CLASS = User&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This saves off the &lt;em&gt;first&lt;/em&gt; version of the &lt;code&gt;User&lt;/code&gt; class, which will not be the same object as &lt;code&gt;User&lt;/code&gt; after the code has been reloaded:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bin/rails runner &#39;puts User == USER_CLASS&#39;&#xA;true&#xA;$ touch app/models/user.rb&#xA;$ bin/rails runner &#39;puts User == USER_CLASS&#39;&#xA;false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So to avoid this problem, don&#39;t save off references to application constants in your initialization code.&lt;/p&gt; &#xA;&lt;h2&gt;Using Spring with a containerized development environment&lt;/h2&gt; &#xA;&lt;p&gt;As of Spring 1.7, there is some support for doing this. See &lt;a href=&#34;https://github.com/jonleighton/spring-docker-example&#34;&gt;this example repository&lt;/a&gt; for information about how to do it with &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Spring will read &lt;code&gt;~/.spring.rb&lt;/code&gt; and &lt;code&gt;config/spring.rb&lt;/code&gt; for custom settings. Note that &lt;code&gt;~/.spring.rb&lt;/code&gt; is loaded &lt;em&gt;before&lt;/em&gt; bundler, but &lt;code&gt;config/spring.rb&lt;/code&gt; is loaded &lt;em&gt;after&lt;/em&gt; bundler. So if you have any &lt;code&gt;spring-commands-*&lt;/code&gt; gems installed that you want to be available in all projects without having to be added to the project&#39;s Gemfile, require them in your &lt;code&gt;~/.spring.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;config/spring_client.rb&lt;/code&gt; is also loaded before bundler and before a server process is started, it can be used to add new top-level commands.&lt;/p&gt; &#xA;&lt;h3&gt;Application root&lt;/h3&gt; &#xA;&lt;p&gt;Spring must know how to find your Rails application. If you have a normal app everything works out of the box. If you are working on a project with a special setup (an engine for example), you must tell Spring where your app is located:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Spring.application_root = &#39;./test/dummy&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running code before forking&lt;/h3&gt; &#xA;&lt;p&gt;There is no &lt;code&gt;Spring.before_fork&lt;/code&gt; callback. To run something before the fork, you can place it in &lt;code&gt;~/.spring.rb&lt;/code&gt; or &lt;code&gt;config/spring.rb&lt;/code&gt; or in any of the files which get run when your application initializes, such as &lt;code&gt;config/application.rb&lt;/code&gt;, &lt;code&gt;config/environments/*.rb&lt;/code&gt; or &lt;code&gt;config/initializers/*.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Running code after forking&lt;/h3&gt; &#xA;&lt;p&gt;You might want to run code after Spring forked off the process but before the actual command is run. You might want to use an &lt;code&gt;after_fork&lt;/code&gt; callback if you have to connect to an external service, do some general cleanup or set up dynamic configuration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Spring.after_fork do&#xA;  # run arbitrary code&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to register multiple callbacks you can simply call &lt;code&gt;Spring.after_fork&lt;/code&gt; multiple times with different blocks.&lt;/p&gt; &#xA;&lt;h3&gt;Watching files and directories&lt;/h3&gt; &#xA;&lt;p&gt;Spring will automatically detect file changes to any file loaded when the server boots. Changes will cause the affected environments to be restarted.&lt;/p&gt; &#xA;&lt;p&gt;If there are additional files or directories which should trigger an application restart, you can specify them with &lt;code&gt;Spring.watch&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Spring.watch &#34;config/some_config_file.yml&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, Spring polls the filesystem for changes once every 0.2 seconds. This method requires zero configuration, but if you find that it&#39;s using too much CPU, then you can use event-based file system listening by installing the &lt;a href=&#34;https://github.com/jonleighton/spring-watcher-listen&#34;&gt;spring-watcher-listen&lt;/a&gt; gem.&lt;/p&gt; &#xA;&lt;h3&gt;Quiet output&lt;/h3&gt; &#xA;&lt;p&gt;To disable the &#34;Running via Spring preloader&#34; message which is shown each time a command runs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Spring.quiet = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also set the initial state of the &lt;code&gt;quiet&lt;/code&gt; configuration option to true by setting the &lt;code&gt;SPRING_QUIET&lt;/code&gt; environment variable before executing Spring. This is useful if you want to set quiet mode when invoking the Spring executable in a subprocess, and cannot or prefer not to set it programmatically via the &lt;code&gt;Spring.quiet&lt;/code&gt; option in &lt;code&gt;~/.spring.rb&lt;/code&gt; or the app&#39;s &lt;code&gt;config/spring.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Environment variables&lt;/h3&gt; &#xA;&lt;p&gt;The following environment variables are used by Spring:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;DISABLE_SPRING&lt;/code&gt; - If set, Spring will be bypassed, and your application will boot in a foreground process&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SPRING_LOG&lt;/code&gt; - The path to a file which Spring will write log messages to.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SPRING_TMP_PATH&lt;/code&gt; - The directory where Spring should write its temporary files (a pidfile and a socket). By default, we use the &lt;code&gt;XDG_RUNTIME_DIR&lt;/code&gt; environment variable, or else &lt;code&gt;Dir.tmpdir&lt;/code&gt;, and then create a directory in that named &lt;code&gt;spring-$UID&lt;/code&gt;. We don&#39;t use your Rails application&#39;s &lt;code&gt;tmp/&lt;/code&gt; directory because that may be on a filesystem which doesn&#39;t support UNIX sockets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SPRING_APPLICATION_ID&lt;/code&gt; - Used to identify distinct Rails applications. By default, it is an MD5 hash of the current &lt;code&gt;RUBY_VERSION&lt;/code&gt;, and the path to your Rails project root.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SPRING_SOCKET&lt;/code&gt; - The path which should be used for the UNIX socket which Spring uses to communicate with the long-running Spring server process. By default, this is &lt;code&gt;SPRING_TMP_PATH/SPRING_APPLICATION_ID&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SPRING_PIDFILE&lt;/code&gt; - The path which should be used to store the pid of the long-running Spring server process. By default, this is related to the socket path; if the socket path is &lt;code&gt;/foo/bar/spring.sock&lt;/code&gt; the pidfile will be &lt;code&gt;/foo/bar/spring.pid&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SPRING_QUIET&lt;/code&gt; - If set, the initial state of the &lt;code&gt;Spring.quiet&lt;/code&gt; configuration option will default to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SPRING_SERVER_COMMAND&lt;/code&gt; - The command to run to start up the Spring server when it is not already running. Defaults to &lt;code&gt;spring _[version]_ server --background&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;If you want to get more information about what Spring is doing, you can run Spring explicitly in a separate terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ spring server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Logging output will be printed to stdout. You can also send log output to a file with the &lt;code&gt;SPRING_LOG&lt;/code&gt; environment variable.&lt;/p&gt;</summary>
  </entry>
</feed>