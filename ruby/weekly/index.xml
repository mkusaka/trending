<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-19T02:00:13Z</updated>
  <subtitle>Weekly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sidekiq/sidekiq</title>
    <updated>2023-02-19T02:00:13Z</updated>
    <id>tag:github.com,2023-02-19:/sidekiq/sidekiq</id>
    <link href="https://github.com/sidekiq/sidekiq" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple, efficient background processing for Ruby&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Sidekiq&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rubygems.org/gems/sidekiq&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/sidekiq.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/sidekiq/sidekiq/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Simple, efficient background processing for Ruby.&lt;/p&gt; &#xA;&lt;p&gt;Sidekiq uses threads to handle many jobs at the same time in the same process. It does not require Rails but will integrate tightly with Rails to make background processing dead simple.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Redis: 6.2+&lt;/li&gt; &#xA; &lt;li&gt;Ruby: MRI 2.7+ or JRuby 9.3+.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Sidekiq 7.0 supports Rails 6.0+ but does not require it.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle add sidekiq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/sidekiq/sidekiq/wiki/Getting-Started&#34;&gt;Getting Started wiki page&lt;/a&gt; and follow the simple setup process. You can watch &lt;a href=&#34;https://www.youtube.com/playlist?list=PLjeHh2LSCFrWGT5uVjUuFKAcrcj5kSai1&#34;&gt;this YouTube playlist&lt;/a&gt; to learn all about Sidekiq and see its features in action. Here&#39;s the Web UI:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/sidekiq/sidekiq/raw/main/examples/web-ui.png&#34; alt=&#34;Web UI&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;The benchmark in &lt;code&gt;bin/sidekiqload&lt;/code&gt; creates 500,000 no-op jobs and drains them as fast as possible, assuming a fixed Redis network latency of 1ms. This requires a lot of Redis network I/O and JSON parsing. This benchmark is IO-bound so we increase the concurrency to 25. If your application is sending lots of emails or performing other network-intensive work, you could see a similar benefit but be careful not to saturate the CPU.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Time to process 500k jobs&lt;/th&gt; &#xA;   &lt;th&gt;Throughput (jobs/sec)&lt;/th&gt; &#xA;   &lt;th&gt;Ruby&lt;/th&gt; &#xA;   &lt;th&gt;Concurrency&lt;/th&gt; &#xA;   &lt;th&gt;Job Type&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sidekiq 7.0.3&lt;/td&gt; &#xA;   &lt;td&gt;21.3 sec&lt;/td&gt; &#xA;   &lt;td&gt;23,500&lt;/td&gt; &#xA;   &lt;td&gt;3.2.0+yjit&lt;/td&gt; &#xA;   &lt;td&gt;30&lt;/td&gt; &#xA;   &lt;td&gt;Sidekiq::Job&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sidekiq 7.0.3&lt;/td&gt; &#xA;   &lt;td&gt;33.8 sec&lt;/td&gt; &#xA;   &lt;td&gt;14,700&lt;/td&gt; &#xA;   &lt;td&gt;3.2.0+yjit&lt;/td&gt; &#xA;   &lt;td&gt;30&lt;/td&gt; &#xA;   &lt;td&gt;ActiveJob 7.0.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sidekiq 7.0.3&lt;/td&gt; &#xA;   &lt;td&gt;23.5 sec&lt;/td&gt; &#xA;   &lt;td&gt;21,300&lt;/td&gt; &#xA;   &lt;td&gt;3.2.0&lt;/td&gt; &#xA;   &lt;td&gt;30&lt;/td&gt; &#xA;   &lt;td&gt;Sidekiq::Job&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sidekiq 7.0.3&lt;/td&gt; &#xA;   &lt;td&gt;46.5 sec&lt;/td&gt; &#xA;   &lt;td&gt;10,700&lt;/td&gt; &#xA;   &lt;td&gt;3.2.0&lt;/td&gt; &#xA;   &lt;td&gt;30&lt;/td&gt; &#xA;   &lt;td&gt;ActiveJob 7.0.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sidekiq 7.0.3&lt;/td&gt; &#xA;   &lt;td&gt;23.0 sec&lt;/td&gt; &#xA;   &lt;td&gt;21,700&lt;/td&gt; &#xA;   &lt;td&gt;2.7.5&lt;/td&gt; &#xA;   &lt;td&gt;30&lt;/td&gt; &#xA;   &lt;td&gt;Sidekiq::Job&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sidekiq 7.0.3&lt;/td&gt; &#xA;   &lt;td&gt;46.5 sec&lt;/td&gt; &#xA;   &lt;td&gt;10,850&lt;/td&gt; &#xA;   &lt;td&gt;2.7.5&lt;/td&gt; &#xA;   &lt;td&gt;30&lt;/td&gt; &#xA;   &lt;td&gt;ActiveJob 7.0.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Most of Sidekiq&#39;s overhead is Redis network I/O. ActiveJob adds a notable amount of CPU overhead due to argument deserialization and callbacks. Concurrency of 30 was determined experimentally to maximize one CPU without saturating it.&lt;/p&gt; &#xA;&lt;h2&gt;Want to Upgrade?&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;bundle up sidekiq&lt;/code&gt; to upgrade Sidekiq and all its dependencies. Upgrade notes between each major version can be found in the &lt;code&gt;docs/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;I also sell Sidekiq Pro and Sidekiq Enterprise, extensions to Sidekiq which provide more features, a commercial-friendly license and allow you to support high quality open source development all at the same time. Please see the &lt;a href=&#34;https://sidekiq.org/&#34;&gt;Sidekiq&lt;/a&gt; homepage for more detail.&lt;/p&gt; &#xA;&lt;h2&gt;Problems?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please do not directly email any Sidekiq committers with questions or problems.&lt;/strong&gt; A community is best served when discussions are held in public.&lt;/p&gt; &#xA;&lt;p&gt;If you have a problem, please review the &lt;a href=&#34;https://github.com/sidekiq/sidekiq/wiki/FAQ&#34;&gt;FAQ&lt;/a&gt; and &lt;a href=&#34;https://github.com/sidekiq/sidekiq/wiki/Problems-and-Troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt; wiki pages. Searching the &lt;a href=&#34;https://github.com/sidekiq/sidekiq/issues&#34;&gt;issues&lt;/a&gt; for your problem is also a good idea.&lt;/p&gt; &#xA;&lt;p&gt;Sidekiq Pro and Sidekiq Enterprise customers get private email support. You can purchase at &lt;a href=&#34;https://sidekiq.org&#34;&gt;https://sidekiq.org&lt;/a&gt;; email &lt;a href=&#34;mailto:support@contribsys.com&#34;&gt;support@contribsys.com&lt;/a&gt; for help.&lt;/p&gt; &#xA;&lt;p&gt;Useful resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Product documentation is in the &lt;a href=&#34;https://github.com/sidekiq/sidekiq/wiki&#34;&gt;wiki&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Occasional announcements are made to the &lt;a href=&#34;https://twitter.com/sidekiq&#34;&gt;@sidekiq&lt;/a&gt; Twitter account.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://stackoverflow.com/questions/tagged/sidekiq&#34;&gt;Sidekiq tag&lt;/a&gt; on Stack Overflow has lots of useful Q &amp;amp; A.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Every Friday morning is Sidekiq office hour: I video chat and answer questions. See the &lt;a href=&#34;https://sidekiq.org/support.html&#34;&gt;Sidekiq support page&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/sidekiq/sidekiq/raw/main/.github/contributing.md&#34;&gt;the contributing guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/sidekiq/sidekiq/raw/main/LICENSE.txt&#34;&gt;LICENSE.txt&lt;/a&gt; for licensing details. The license for Sidekiq Pro and Sidekiq Enterprise can be found in &lt;a href=&#34;https://github.com/sidekiq/sidekiq/raw/main/COMM-LICENSE.txt&#34;&gt;COMM-LICENSE.txt&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;Mike Perham, &lt;a href=&#34;https://twitter.com/getajobmike&#34;&gt;@getajobmike&lt;/a&gt; / &lt;a href=&#34;https://twitter.com/sidekiq&#34;&gt;@sidekiq&lt;/a&gt;, &lt;a href=&#34;https://www.mikeperham.com&#34;&gt;https://www.mikeperham.com&lt;/a&gt; / &lt;a href=&#34;https://www.contribsys.com&#34;&gt;https://www.contribsys.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mrsked/mrsk</title>
    <updated>2023-02-19T02:00:13Z</updated>
    <id>tag:github.com,2023-02-19:/mrsked/mrsk</id>
    <link href="https://github.com/mrsked/mrsk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Deploy web apps anywhere.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MRSK&lt;/h1&gt; &#xA;&lt;p&gt;MRSK deploys web apps in containers to servers running Docker with zero downtime. It uses the dynamic reverse-proxy Traefik to hold requests while the new application container is started and the old one is stopped. It works seamlessly across multiple hosts, using SSHKit to execute commands. It was built for Rails applications, but works with any type of web app that can be bundled with Docker.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install MRSK globally with &lt;code&gt;gem install mrsk&lt;/code&gt;. Then, inside your app directory, run &lt;code&gt;mrsk init&lt;/code&gt; (or &lt;code&gt;mrsk init --bundle&lt;/code&gt; within Rails apps where you want a bin/mrsk binstub). Now edit the new file &lt;code&gt;config/deploy.yml&lt;/code&gt;. It could look as simple as this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;service: hey&#xA;image: 37s/hey&#xA;servers:&#xA;  - 192.168.0.1&#xA;  - 192.168.0.2&#xA;registry:&#xA;  username: registry-user-name&#xA;  password: &amp;lt;%= ENV.fetch(&#34;MRSK_REGISTRY_PASSWORD&#34;) %&amp;gt;&#xA;env:&#xA;  secret:&#xA;    - RAILS_MASTER_KEY&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then edit your &lt;code&gt;.env&lt;/code&gt; file to add your registry password as &lt;code&gt;MRSK_REGISTRY_PASSWORD&lt;/code&gt; (and your &lt;code&gt;RAILS_MASTER_KEY&lt;/code&gt; for production with a Rails app).&lt;/p&gt; &#xA;&lt;p&gt;Now you&#39;re ready to deploy to the servers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mrsk deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Connect to the servers over SSH (using root by default, authenticated by your loaded ssh key)&lt;/li&gt; &#xA; &lt;li&gt;Install Docker on any server that might be missing it (using apt-get)&lt;/li&gt; &#xA; &lt;li&gt;Log into the registry both locally and remotely&lt;/li&gt; &#xA; &lt;li&gt;Build the image using the standard Dockerfile in the root of the application.&lt;/li&gt; &#xA; &lt;li&gt;Push the image to the registry.&lt;/li&gt; &#xA; &lt;li&gt;Pull the image from the registry on the servers.&lt;/li&gt; &#xA; &lt;li&gt;Ensure Traefik is running and accepting traffic on port 80.&lt;/li&gt; &#xA; &lt;li&gt;Ensure your app responds with &lt;code&gt;200 OK&lt;/code&gt; to &lt;code&gt;GET /up&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Stop any containers running a previous versions of the app.&lt;/li&gt; &#xA; &lt;li&gt;Start a new container with the version of the app that matches the current git version hash.&lt;/li&gt; &#xA; &lt;li&gt;Prune unused images and stopped containers to ensure servers don&#39;t fill up.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Voila! All the servers are now serving the app on port 80. If you&#39;re just running a single server, you&#39;re ready to go. If you&#39;re running multiple servers, you need to put a load balancer in front of them.&lt;/p&gt; &#xA;&lt;h2&gt;Vision&lt;/h2&gt; &#xA;&lt;p&gt;In the past decade+, there&#39;s been an explosion in commercial offerings that make deploying web apps easier. Heroku kicked it off with an incredible offering that stayed ahead of the competition seemingly forever. These days we have excellent alternatives like Fly.io and Render. And hosted Kubernetes is making things easier too on AWS, GCP, Digital Ocean, and elsewhere. But these are all offerings that have you renting computers in the cloud at a premium. If you want to run on our own hardware, or even just have a clear migration path to do so, you need to carefully consider how locked in you get to these commercial platforms. Preferably before the bills swallow your business whole!&lt;/p&gt; &#xA;&lt;p&gt;MRSK seeks to bring the advance in ergonomics pioneered by these commercial offerings to deploying web apps anywhere. Whether that&#39;s low-cost cloud options without the managed-service markup from the likes of Digital Ocean, Hetzner, OVH, etc, or it&#39;s your own colocated metal. To MRSK, it&#39;s all the same. Feed the config file a list of IP addresses with vanilla Ubuntu servers that have seen no prep beyond an added SSH key, and you&#39;ll be running in literally minutes.&lt;/p&gt; &#xA;&lt;p&gt;This structure also gives you enormous portability. You can have your web app deployed on several clouds at ease like this. Or you can buy the baseline with your own hardware, then deploy to a cloud before a big seasonal spike to get more capacity. When you&#39;re not locked into a single provider from a tooling perspective, there&#39;s a lot of compelling options available.&lt;/p&gt; &#xA;&lt;p&gt;Ultimately, MRSK is meant to compress the complexity of going to production using open source tooling that isn&#39;t tied to any commercial offering. Not to zero, though. You&#39;re probably still better off with a fully managed service if basic Linux or Docker is still difficult, but from an early stage when those concepts are familiar.&lt;/p&gt; &#xA;&lt;h2&gt;Why not just run Capistrano, Kubernetes or Docker Swarm?&lt;/h2&gt; &#xA;&lt;p&gt;MRSK basically is Capistrano for Containers, which allow us to use vanilla servers as the hosts. No need to ensure that the servers have just the right version of Ruby or other dependencies you need. That all lives in the Docker image now. You can boot a brand new Ubuntu (or whatever) server, add it to the deploy servers of MRSK, and it&#39;ll be auto-provisioned with Docker, and run right away. Docker&#39;s layer caching also allows for quicker deployments with less mucking about on the server. And the images built for MRSK can be used for CI or later introspection.&lt;/p&gt; &#xA;&lt;p&gt;Kubernetes is a beast. Running it yourself on your own hardware is not for the faint of heart. It&#39;s a fine option if you want to run on someone else&#39;s platform, either transparently &lt;a href=&#34;https://thenewstack.io/render-cloud-deployment-with-less-engineering/&#34;&gt;like Render&lt;/a&gt; or explicitly on AWS/GCP, but if you&#39;d like the freedom to move between cloud and your own hardware, or even mix the two, MRSK is much simpler. You can see everything that&#39;s going on, it&#39;s just basic Docker commands being called.&lt;/p&gt; &#xA;&lt;p&gt;Docker Swarm is much simpler than Kubernetes, but it&#39;s still built on the same declarative model that uses state reconciliation. MRSK is intentionally designed to around imperative commands, like Capistrano.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Using .env file to load required environment variables&lt;/h3&gt; &#xA;&lt;p&gt;MRSK uses &lt;a href=&#34;https://github.com/bkeepers/dotenv&#34;&gt;dotenv&lt;/a&gt; to automatically load environment variables set in the &lt;code&gt;.env&lt;/code&gt; file present in the application root. This file can be used to set variables like &lt;code&gt;MRSK_REGISTRY_PASSWORD&lt;/code&gt; or database passwords. But for this reason you must ensure that .env files are not checked into Git or included in your Dockerfile! The format is just key-value like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;MRSK_REGISTRY_PASSWORD=pw&#xA;DB_PASSWORD=secret123&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using another registry than Docker Hub&lt;/h3&gt; &#xA;&lt;p&gt;The default registry is Docker Hub, but you can change it using &lt;code&gt;registry/server&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;registry:&#xA;  server: registry.digitalocean.com&#xA;  username: registry-user-name&#xA;  password: &amp;lt;%= ENV.fetch(&#34;MRSK_REGISTRY_PASSWORD&#34;) %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using a different SSH user than root&lt;/h3&gt; &#xA;&lt;p&gt;The default SSH user is root, but you can change it using &lt;code&gt;ssh/user&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ssh:&#xA;  user: app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using a proxy SSH host&lt;/h3&gt; &#xA;&lt;p&gt;If you need to connect to server through a proxy host, you can use &lt;code&gt;ssh/proxy&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ssh:&#xA;  proxy: &#34;192.168.0.1&#34; # defaults to root as the user&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with specific user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ssh:&#xA;  proxy: &#34;app@192.168.0.1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using env variables&lt;/h3&gt; &#xA;&lt;p&gt;You can inject env variables into the app containers using &lt;code&gt;env&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;env:&#xA;  DATABASE_URL: mysql2://db1/hey_production/&#xA;  REDIS_URL: redis://redis1:6379/1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using secret env variables&lt;/h3&gt; &#xA;&lt;p&gt;If you have env variables that are secret, you can divide the &lt;code&gt;env&lt;/code&gt; block into &lt;code&gt;clear&lt;/code&gt; and &lt;code&gt;secret&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;env:&#xA;  clear:&#xA;    DATABASE_URL: mysql2://db1/hey_production/&#xA;    REDIS_URL: redis://redis1:6379/1&#xA;  secret:&#xA;    - DATABASE_PASSWORD&#xA;    - REDIS_PASSWORD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The list of secret env variables will be expanded at run time from your local machine. So a reference to a secret &lt;code&gt;DATABASE_PASSWORD&lt;/code&gt; will look for &lt;code&gt;ENV[&#34;DATABASE_PASSWORD&#34;]&lt;/code&gt; on the machine running MRSK. Just like with build secrets.&lt;/p&gt; &#xA;&lt;p&gt;If the referenced secret ENVs are missing, the configuration will be halted with a &lt;code&gt;KeyError&lt;/code&gt; exception.&lt;/p&gt; &#xA;&lt;p&gt;Note: Marking an ENV as secret currently only redacts its value in the output for MRSK. The ENV is still injected in the clear into the container at runtime.&lt;/p&gt; &#xA;&lt;h3&gt;Using volumes&lt;/h3&gt; &#xA;&lt;p&gt;You can add custom volumes into the app containers using &lt;code&gt;volumes&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;volumes:&#xA;  - &#34;/local/path:/container/path&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using different roles for servers&lt;/h3&gt; &#xA;&lt;p&gt;If your application uses separate hosts for running jobs or other roles beyond the default web running, you can specify these hosts in a dedicated role with a new entrypoint command like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;servers:&#xA;  web:&#xA;    - 192.168.0.1&#xA;    - 192.168.0.2&#xA;  job:&#xA;    hosts:&#xA;      - 192.168.0.3&#xA;      - 192.168.0.4&#xA;    cmd: bin/jobs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Traefik will only by default be installed and run on the servers in the &lt;code&gt;web&lt;/code&gt; role (and on all servers if no roles are defined). If you need Traefik on hosts in other roles than &lt;code&gt;web&lt;/code&gt;, add &lt;code&gt;traefik: true&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;servers:&#xA;  web:&#xA;    - 192.168.0.1&#xA;    - 192.168.0.2&#xA;  web2:&#xA;    traefik: true&#xA;    hosts:&#xA;      - 192.168.0.3&#xA;      - 192.168.0.4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using container labels&lt;/h3&gt; &#xA;&lt;p&gt;You can specialize the default Traefik rules by setting labels on the containers that are being started:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;labels:&#xA;  traefik.http.routers.hey.rule: Host(\`app.hey.com\`)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: The escaped backticks are needed to ensure the rule is passed in correctly and not treated as command substitution by Bash!&lt;/p&gt; &#xA;&lt;p&gt;This allows you to run multiple applications on the same server sharing the same Traefik instance and port. See &lt;a href=&#34;https://doc.traefik.io/traefik/routing/routers/#rule&#34;&gt;https://doc.traefik.io/traefik/routing/routers/#rule&lt;/a&gt; for a full list of available routing rules.&lt;/p&gt; &#xA;&lt;p&gt;The labels can also be applied on a per-role basis:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;servers:&#xA;  web:&#xA;    - 192.168.0.1&#xA;    - 192.168.0.2&#xA;  job:&#xA;    hosts:&#xA;      - 192.168.0.3&#xA;      - 192.168.0.4&#xA;    cmd: bin/jobs&#xA;    labels:&#xA;      my-label: &#34;50&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using remote builder for native multi-arch&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re developing on ARM64 (like Apple Silicon), but you want to deploy on AMD64 (x86 64-bit), you can use multi-archecture images. By default, MRSK will setup a local buildx configuration that does this through QEMU emulation. But this can be quite slow, especially on the first build.&lt;/p&gt; &#xA;&lt;p&gt;If you want to speed up this process by using a remote AMD64 host to natively build the AMD64 part of the image, while natively building the ARM64 part locally, you can do so using builder options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;builder:&#xA;  local:&#xA;    arch: arm64&#xA;    host: unix:///Users/&amp;lt;%= `whoami`.strip %&amp;gt;/.docker/run/docker.sock&#xA;  remote:&#xA;    arch: amd64&#xA;    host: ssh://root@192.168.0.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: You must have Docker running on the remote host being used as a builder. This instance should only be shared for builds using the same registry and credentials.&lt;/p&gt; &#xA;&lt;h3&gt;Using remote builder for single-arch&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re developing on ARM64 (like Apple Silicon), want to deploy on AMD64 (x86 64-bit), but don&#39;t need to run the image locally (or on other ARM64 hosts), you can configure a remote builder that just targets AMD64. This is a bit faster than building with multi-arch, as there&#39;s nothing to build locally.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;builder:&#xA;  remote:&#xA;    arch: amd64&#xA;    host: ssh://root@192.168.0.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using native builder when multi-arch isn&#39;t needed&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re developing on the same architecture as the one you&#39;re deploying on, you can speed up the build by forgoing both multi-arch and remote building:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;builder:&#xA;  multiarch: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is also a good option if you&#39;re running MRSK from a CI server that shares architecture with the deployment servers.&lt;/p&gt; &#xA;&lt;h3&gt;Using build secrets for new images&lt;/h3&gt; &#xA;&lt;p&gt;Some images need a secret passed in during build time, like a GITHUB_TOKEN to give access to private gem repositories. This can be done by having the secret in ENV, then referencing it in the builder configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;builder:&#xA;  secrets:&#xA;    - GITHUB_TOKEN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This build secret can then be referenced in the Dockerfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;# Copy Gemfiles&#xA;COPY Gemfile Gemfile.lock ./&#xA;&#xA;# Install dependencies, including private repositories via access token (then remove bundle cache with exposed GITHUB_TOKEN)&#xA;RUN --mount=type=secret,id=GITHUB_TOKEN \&#xA;  BUNDLE_GITHUB__COM=x-access-token:$(cat /run/secrets/GITHUB_TOKEN) \&#xA;  bundle install &amp;amp;&amp;amp; \&#xA;  rm -rf /usr/local/bundle/cache&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using command arguments for Traefik&lt;/h3&gt; &#xA;&lt;p&gt;You can customize the traefik command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;traefik:&#xA;  args:&#xA;    accesslog: true&#xA;    accesslog.format: json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will start the traefik container with &lt;code&gt;--accesslog=true accesslog.format=json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring build args for new images&lt;/h3&gt; &#xA;&lt;p&gt;Build arguments that aren&#39;t secret can also be configured:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;builder:&#xA;  args:&#xA;    RUBY_VERSION: 3.2.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This build argument can then be used in the Dockerfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Private repositories need an access token during the build&#xA;ARG RUBY_VERSION&#xA;FROM ruby:$RUBY_VERSION-slim as base&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using accessories for database, cache, search services&lt;/h3&gt; &#xA;&lt;p&gt;You can manage your accessory services via MRSK as well. The services will build off public images, and will not be automatically updated when you deploy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;accessories:&#xA;  mysql:&#xA;    image: mysql:5.7&#xA;    host: 1.1.1.3&#xA;    port: 3306&#xA;    env:&#xA;      clear:&#xA;        MYSQL_ROOT_HOST: &#39;%&#39;&#xA;      secret:&#xA;        - MYSQL_ROOT_PASSWORD&#xA;    volumes:&#xA;      - /var/lib/mysql:/var/lib/mysql&#xA;  redis:&#xA;    image: redis:latest&#xA;    host: 1.1.1.4&#xA;    port: &#34;36379:6379&#34;&#xA;    volumes:&#xA;      - /var/lib/redis:/data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now run &lt;code&gt;mrsk accessory start mysql&lt;/code&gt; to start the MySQL server on 1.1.1.3. See &lt;code&gt;mrsk accessory&lt;/code&gt; for all the commands possible.&lt;/p&gt; &#xA;&lt;h3&gt;Using a generated .env file&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using a centralized secret store, like 1Password, you can create &lt;code&gt;.env.erb&lt;/code&gt; as a template which looks up the secrets. Example of a .env.erb file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;% if (session_token = `op signin --account my-one-password-account --raw`.strip) != &#34;&#34; %&amp;gt;# Generated by mrsk envify&#xA;GITHUB_TOKEN=&amp;lt;%= `gh config get -h github.com oauth_token`.strip %&amp;gt;&#xA;MRSK_REGISTRY_PASSWORD=&amp;lt;%= `op read &#34;op://Vault/Docker Hub/password&#34; -n --session  #{session_token}` %&amp;gt;&#xA;RAILS_MASTER_KEY=&amp;lt;%= `op read &#34;op://Vault/My App/RAILS_MASTER_SECRET&#34; -n --session #{session_token}` %&amp;gt;&#xA;MYSQL_ROOT_PASSWORD=&amp;lt;%= `op read &#34;op://Vault/My App/MYSQL_ROOT_PASSWORD&#34; -n --session #{session_token}` %&amp;gt;&#xA;&amp;lt;% else raise ArgumentError, &#34;Session token missing&#34; end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This template can safely be checked into git. Then everyone deploying the app can run &lt;code&gt;mrsk envify&lt;/code&gt; when they setup the app for the first time or passwords change to get the correct &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;If you need separate env variables for different destinations, you can set them with &lt;code&gt;.env.destination.erb&lt;/code&gt; for the template, which will generate &lt;code&gt;.env.staging&lt;/code&gt; when run with &lt;code&gt;mrsk envify -d staging&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using audit broadcasts&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d like to broadcast audits of deploys, rollbacks, etc to a chatroom or elsewhere, you can configure the &lt;code&gt;audit_broadcast_cmd&lt;/code&gt; setting with the path to a bin file that will be passed the audit line as the first argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;audit_broadcast_cmd:&#xA;  bin/audit_broadcast&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The broadcast command could look something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/usr/bin/env bash&#xA;curl -q -d content=&#34;[My App] ${1}&#34; https://3.basecamp.com/XXXXX/integrations/XXXXX/buckets/XXXXX/chats/XXXXX/lines&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;ll post a line like follows to a preconfigured chatbot in Basecamp:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[My App] [dhh] Rolled back to version d264c4e92470ad1bd18590f04466787262f605de&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using custom healthcheck path or port&lt;/h3&gt; &#xA;&lt;p&gt;MRSK defaults to checking the health of your application again &lt;code&gt;/up&lt;/code&gt; on port 3000. You can tailor both with the &lt;code&gt;healthcheck&lt;/code&gt; setting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;healthcheck:&#xA;  path: /healthz&#xA;  port: 4000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will ensure your application is configured with a traefik label for the healthcheck against &lt;code&gt;/healthz&lt;/code&gt; and that the pre-deploy healthcheck that MRSK performs is done against the same path on port 4000.&lt;/p&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;h3&gt;Running commands on servers&lt;/h3&gt; &#xA;&lt;p&gt;You can execute one-off commands on the servers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Runs command on all servers&#xA;mrsk app exec &#39;ruby -v&#39;&#xA;App Host: 192.168.0.1&#xA;ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]&#xA;&#xA;App Host: 192.168.0.2&#xA;ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]&#xA;&#xA;# Runs command on primary server&#xA;mrsk app exec --primary &#39;cat .ruby-version&#39;&#xA;App Host: 192.168.0.1&#xA;3.1.3&#xA;&#xA;# Runs Rails command on all servers&#xA;mrsk app exec &#39;bin/rails about&#39;&#xA;App Host: 192.168.0.1&#xA;About your application&#39;s environment&#xA;Rails version             7.1.0.alpha&#xA;Ruby version              ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]&#xA;RubyGems version          3.3.26&#xA;Rack version              2.2.5&#xA;Middleware                ActionDispatch::HostAuthorization, Rack::Sendfile, ActionDispatch::Static, ActionDispatch::Executor, Rack::Runtime, Rack::MethodOverride, ActionDispatch::RequestId, ActionDispatch::RemoteIp, Rails::Rack::Logger, ActionDispatch::ShowExceptions, ActionDispatch::DebugExceptions, ActionDispatch::Callbacks, ActionDispatch::Cookies, ActionDispatch::Session::CookieStore, ActionDispatch::Flash, ActionDispatch::ContentSecurityPolicy::Middleware, ActionDispatch::PermissionsPolicy::Middleware, Rack::Head, Rack::ConditionalGet, Rack::ETag, Rack::TempfileReaper&#xA;Application root          /rails&#xA;Environment               production&#xA;Database adapter          sqlite3&#xA;Database schema version   20221231233303&#xA;&#xA;App Host: 192.168.0.2&#xA;About your application&#39;s environment&#xA;Rails version             7.1.0.alpha&#xA;Ruby version              ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]&#xA;RubyGems version          3.3.26&#xA;Rack version              2.2.5&#xA;Middleware                ActionDispatch::HostAuthorization, Rack::Sendfile, ActionDispatch::Static, ActionDispatch::Executor, Rack::Runtime, Rack::MethodOverride, ActionDispatch::RequestId, ActionDispatch::RemoteIp, Rails::Rack::Logger, ActionDispatch::ShowExceptions, ActionDispatch::DebugExceptions, ActionDispatch::Callbacks, ActionDispatch::Cookies, ActionDispatch::Session::CookieStore, ActionDispatch::Flash, ActionDispatch::ContentSecurityPolicy::Middleware, ActionDispatch::PermissionsPolicy::Middleware, Rack::Head, Rack::ConditionalGet, Rack::ETag, Rack::TempfileReaper&#xA;Application root          /rails&#xA;Environment               production&#xA;Database adapter          sqlite3&#xA;Database schema version   20221231233303&#xA;&#xA;# Run Rails runner on primary server&#xA;mrsk app exec -p &#39;bin/rails runner &#34;puts Rails.application.config.time_zone&#34;&#39;&#xA;UTC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running interactive commands over SSH&lt;/h3&gt; &#xA;&lt;p&gt;You can run interactive commands, like a Rails console or a bash session, on a server (default is primary, use &lt;code&gt;--hosts&lt;/code&gt; to connect to another):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Starts a bash session in a new container made from the most recent app image&#xA;mrsk app exec -i bash&#xA;&#xA;# Starts a bash session in the currently running container for the app&#xA;mrsk app exec -i --reuse bash&#xA;&#xA;# Starts a Rails console in a new container made from the most recent app image&#xA;mrsk app exec -i &#39;bin/rails console&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running details to see state of containers&lt;/h3&gt; &#xA;&lt;p&gt;You can see the state of your servers by running &lt;code&gt;mrsk details&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Traefik Host: 192.168.0.1&#xA;CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                               NAMES&#xA;6195b2a28c81   traefik   &#34;/entrypoint.sh --pr…&#34;   30 minutes ago   Up 19 minutes   0.0.0.0:80-&amp;gt;80/tcp, :::80-&amp;gt;80/tcp   traefik&#xA;&#xA;Traefik Host: 192.168.0.2&#xA;CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                               NAMES&#xA;de14a335d152   traefik   &#34;/entrypoint.sh --pr…&#34;   30 minutes ago   Up 19 minutes   0.0.0.0:80-&amp;gt;80/tcp, :::80-&amp;gt;80/tcp   traefik&#xA;&#xA;App Host: 192.168.0.1&#xA;CONTAINER ID   IMAGE                                                                         COMMAND                  CREATED          STATUS          PORTS      NAMES&#xA;badb1aa51db3   registry.digitalocean.com/user/app:6ef8a6a84c525b123c5245345a8483f86d05a123   &#34;/rails/bin/docker-e…&#34;   13 minutes ago   Up 13 minutes   3000/tcp   chat-6ef8a6a84c525b123c5245345a8483f86d05a123&#xA;&#xA;App Host: 192.168.0.2&#xA;CONTAINER ID   IMAGE                                                                         COMMAND                  CREATED          STATUS          PORTS      NAMES&#xA;1d3c91ed1f55   registry.digitalocean.com/user/app:6ef8a6a84c525b123c5245345a8483f86d05a123   &#34;/rails/bin/docker-e…&#34;   13 minutes ago   Up 13 minutes   3000/tcp   chat-6ef8a6a84c525b123c5245345a8483f86d05a123&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also see just info for app containers with &lt;code&gt;mrsk app details&lt;/code&gt; or just for Traefik with &lt;code&gt;mrsk traefik details&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Running rollback to fix a bad deploy&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;ve discovered a bad deploy, you can quickly rollback by reactivating the old, paused container image. You can see what old containers are available for rollback by running &lt;code&gt;mrsk app containers&lt;/code&gt;. It&#39;ll give you a presentation similar to &lt;code&gt;mrsk app details&lt;/code&gt;, but include all the old containers as well. Showing something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;App Host: 192.168.0.1&#xA;CONTAINER ID   IMAGE                                                                         COMMAND                  CREATED          STATUS                      PORTS      NAMES&#xA;1d3c91ed1f51   registry.digitalocean.com/user/app:6ef8a6a84c525b123c5245345a8483f86d05a123   &#34;/rails/bin/docker-e…&#34;   19 minutes ago   Up 19 minutes               3000/tcp   chat-6ef8a6a84c525b123c5245345a8483f86d05a123&#xA;539f26b28369   registry.digitalocean.com/user/app:e5d9d7c2b898289dfbc5f7f1334140d984eedae4   &#34;/rails/bin/docker-e…&#34;   31 minutes ago   Exited (1) 27 minutes ago              chat-e5d9d7c2b898289dfbc5f7f1334140d984eedae4&#xA;&#xA;App Host: 192.168.0.2&#xA;CONTAINER ID   IMAGE                                                                         COMMAND                  CREATED          STATUS                      PORTS      NAMES&#xA;badb1aa51db4   registry.digitalocean.com/user/app:6ef8a6a84c525b123c5245345a8483f86d05a123   &#34;/rails/bin/docker-e…&#34;   19 minutes ago   Up 19 minutes               3000/tcp   chat-6ef8a6a84c525b123c5245345a8483f86d05a123&#xA;6f170d1172ae   registry.digitalocean.com/user/app:e5d9d7c2b898289dfbc5f7f1334140d984eedae4   &#34;/rails/bin/docker-e…&#34;   31 minutes ago   Exited (1) 27 minutes ago              chat-e5d9d7c2b898289dfbc5f7f1334140d984eedae4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From the example above, we can see that &lt;code&gt;e5d9d7c2b898289dfbc5f7f1334140d984eedae4&lt;/code&gt; was the last version, so it&#39;s available as a rollback target. We can perform this rollback by running &lt;code&gt;mrsk rollback e5d9d7c2b898289dfbc5f7f1334140d984eedae4&lt;/code&gt;. That&#39;ll stop &lt;code&gt;6ef8a6a84c525b123c5245345a8483f86d05a123&lt;/code&gt; and then start &lt;code&gt;e5d9d7c2b898289dfbc5f7f1334140d984eedae4&lt;/code&gt;. Because the old container is still available, this is very quick. Nothing to download from the registry.&lt;/p&gt; &#xA;&lt;p&gt;Note that by default old containers are pruned after 3 days when you run &lt;code&gt;mrsk deploy&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Running removal to clean up servers&lt;/h3&gt; &#xA;&lt;p&gt;If you wish to remove the entire application, including Traefik, containers, images, and registry session, you can run &lt;code&gt;mrsk remove&lt;/code&gt;. This will leave the servers clean.&lt;/p&gt; &#xA;&lt;h2&gt;Stage of development&lt;/h2&gt; &#xA;&lt;p&gt;This is alpha software. Lots of stuff is missing. Lots of stuff will keep moving around for a while.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MRSK is released under the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>karafka/karafka</title>
    <updated>2023-02-19T02:00:13Z</updated>
    <id>tag:github.com,2023-02-19:/karafka/karafka</id>
    <link href="https://github.com/karafka/karafka" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ruby and Rails efficient Kafka processing framework&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/karafka/misc/master/logo/karafka_logotype_transparent2.png&#34; alt=&#34;karafka logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/karafka/karafka/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/karafka/karafka/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://badge.fury.io/rb/karafka&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/karafka.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://slack.karafka.io&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/karafka/misc/master/slack.svg?sanitize=true&#34; alt=&#34;Join the chat at https://slack.karafka.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Upgrade instructions for migration from Karafka &lt;code&gt;1.4&lt;/code&gt; to Karafka &lt;code&gt;2.0&lt;/code&gt; can be found &lt;a href=&#34;https://karafka.io/docs/Upgrades-2.0/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;About Karafka&lt;/h2&gt; &#xA;&lt;p&gt;Karafka is a Ruby and Rails multi-threaded efficient Kafka processing framework that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Has a built-in &lt;a href=&#34;https://karafka.io/docs/Web-UI-Features/&#34;&gt;Web UI&lt;/a&gt; providing a convenient way to monitor and manage Karafka-based applications.&lt;/li&gt; &#xA; &lt;li&gt;Supports parallel processing in &lt;a href=&#34;https://karafka.io/docs/Concurrency-and-multithreading&#34;&gt;multiple threads&lt;/a&gt; (also for a &lt;a href=&#34;https://karafka.io/docs/Pro-Virtual-Partitions&#34;&gt;single topic partition&lt;/a&gt; work)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://karafka.io/docs/Integrating-with-Ruby-on-Rails-and-other-frameworks#integrating-with-ruby-on-rails&#34;&gt;Automatically integrates&lt;/a&gt; with Ruby on Rails&lt;/li&gt; &#xA; &lt;li&gt;Has &lt;a href=&#34;https://karafka.io/docs/Active-Job&#34;&gt;ActiveJob backend&lt;/a&gt; support (including &lt;a href=&#34;https://karafka.io/docs/Pro-Enhanced-Active-Job#ordered-jobs&#34;&gt;ordered jobs&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Has a seamless &lt;a href=&#34;https://karafka.io/docs/Dead-Letter-Queue/&#34;&gt;Dead Letter Queue&lt;/a&gt; functionality built-in&lt;/li&gt; &#xA; &lt;li&gt;Supports in-development &lt;a href=&#34;https://karafka.io/docs/Auto-reload-of-code-changes-in-development&#34;&gt;code reloading&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Is powered by &lt;a href=&#34;https://github.com/edenhill/librdkafka&#34;&gt;librdkafka&lt;/a&gt; (the Apache Kafka C/C++ client library)&lt;/li&gt; &#xA; &lt;li&gt;Has an out-of the box &lt;a href=&#34;https://karafka.io/docs/Monitoring-and-logging&#34;&gt;StatsD/DataDog monitoring&lt;/a&gt; with a dashboard template.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Define what topics you want to consume with which consumers in karafka.rb&#xA;Karafka::App.routes.draw do&#xA;  topic &#39;system_events&#39; do&#xA;    consumer EventsConsumer&#xA;  end&#xA;end&#xA;&#xA;# And create your consumers, within which your messages will be processed&#xA;class EventsConsumer &amp;lt; ApplicationConsumer&#xA;  # Example that utilizes ActiveRecord#insert_all and Karafka batch processing&#xA;  def consume&#xA;    # Store all of the incoming Kafka events locally in an efficient way&#xA;    Event.insert_all messages.payloads&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Karafka &lt;strong&gt;uses&lt;/strong&gt; threads to handle many messages simultaneously in the same process. It does not require Rails but will integrate tightly with any Ruby on Rails applications to make event processing dead simple.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/karafka/misc/master/printscreens/web-ui.png&#34; alt=&#34;karafka web ui&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re entirely new to the subject, you can start with our &#34;Kafka on Rails&#34; articles series, which will get you up and running with the terminology and basic ideas behind using Kafka:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mensfeld.pl/2017/11/kafka-on-rails-using-kafka-with-ruby-on-rails-part-1-kafka-basics-and-its-advantages/&#34;&gt;Kafka on Rails: Using Kafka with Ruby on Rails – Part 1 – Kafka basics and its advantages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mensfeld.pl/2018/01/kafka-on-rails-using-kafka-with-ruby-on-rails-part-2-getting-started-with-ruby-and-kafka/&#34;&gt;Kafka on Rails: Using Kafka with Ruby on Rails – Part 2 – Getting started with Rails and Kafka&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to get started with Kafka and Karafka as fast as possible, then the best idea is to visit our &lt;a href=&#34;https://karafka.io/docs/Getting-Started&#34;&gt;Getting started&lt;/a&gt; guides and the &lt;a href=&#34;https://github.com/karafka/example-apps&#34;&gt;example apps repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We also maintain many &lt;a href=&#34;https://github.com/karafka/karafka/tree/master/spec/integrations&#34;&gt;integration specs&lt;/a&gt; illustrating various use-cases and features of the framework.&lt;/p&gt; &#xA;&lt;h3&gt;TL;DR (1 minute from setup to publishing and consuming messages)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;: Kafka running. You can start it by following instructions from &lt;a href=&#34;https://karafka.io/docs/Setting-up-Kafka&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add and install Karafka:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Make sure to install Karafka 2.0&#xA;bundle add karafka --version &#34;&amp;gt;= 2.0.28&#34;&#xA;&#xA;bundle exec karafka install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Dispatch a message to the example topic using the Rails or Ruby console:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Karafka.producer.produce_sync(topic: &#39;example&#39;, payload: { &#39;ping&#39; =&amp;gt; &#39;pong&#39; }.to_json)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Run Karafka server and see the consumption magic happen:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle exec karafka server&#xA;&#xA;[86d47f0b92f7] Polled 1 message in 1000ms&#xA;[3732873c8a74] Consume job for ExampleConsumer on example started&#xA;{&#34;ping&#34;=&amp;gt;&#34;pong&#34;}&#xA;[3732873c8a74] Consume job for ExampleConsumer on example finished in 0ms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Want to Upgrade? LGPL is not for you? Want to help?&lt;/h2&gt; &#xA;&lt;p&gt;I also sell Karafka Pro subscriptions. It includes a commercial-friendly license, priority support, architecture consultations, enhanced Web UI and high throughput data processing-related features (virtual partitions, long-running jobs, and more).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;20%&lt;/strong&gt; of the income will be distributed back to other OSS projects that Karafka uses under the hood.&lt;/p&gt; &#xA;&lt;p&gt;Help me provide high-quality open-source software. Please see the Karafka &lt;a href=&#34;https://karafka.io/#become-pro&#34;&gt;homepage&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Karafka has &lt;a href=&#34;https://karafka.io/docs&#34;&gt;Wiki pages&lt;/a&gt; for almost everything and a pretty decent &lt;a href=&#34;https://karafka.io/docs/FAQ&#34;&gt;FAQ&lt;/a&gt;. It covers the installation, setup, and deployment, along with other useful details on how to run Karafka.&lt;/p&gt; &#xA;&lt;p&gt;If you have questions about using Karafka, feel free to join our &lt;a href=&#34;https://slack.karafka.io&#34;&gt;Slack&lt;/a&gt; channel.&lt;/p&gt; &#xA;&lt;p&gt;Karafka has &lt;a href=&#34;https://karafka.io/docs/Pro-Support&#34;&gt;priority support&lt;/a&gt; for technical and architectural questions that is part of the Karafka Pro subscription.&lt;/p&gt;</summary>
  </entry>
</feed>