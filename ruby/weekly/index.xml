<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-04T02:07:42Z</updated>
  <subtitle>Weekly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>andreibondarev/langchainrb</title>
    <updated>2023-06-04T02:07:42Z</updated>
    <id>tag:github.com,2023-06-04:/andreibondarev/langchainrb</id>
    <link href="https://github.com/andreibondarev/langchainrb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build LLM-backed Ruby applications&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;ü¶úÔ∏èüîó LangChain.rb&lt;/h2&gt; &#xA;&lt;p&gt;‚ö° Building applications with LLMs through composability ‚ö°&lt;/p&gt; &#xA;&lt;p&gt;üë®‚Äçüíªüë©‚Äçüíª CURRENTLY SEEKING PEOPLE TO FORM THE CORE GROUP OF MAINTAINERS WITH&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; UNDER ACTIVE AND RAPID DEVELOPMENT (MAY BE BUGGY AND UNTESTED)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/andreibondarev/langchainrb/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Tests status&#34;&gt; &lt;a href=&#34;https://badge.fury.io/rb/langchainrb&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/langchainrb.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Langchain.rb is a library that&#39;s an abstraction layer on top many emergent AI, ML and other DS tools. The goal is to abstract complexity and difficult concepts to make building AI/ML-supercharged applications approachable for traditional software engineers.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the gem and add to the application&#39;s Gemfile by executing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle add langchainrb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If bundler is not being used to manage dependencies, install the gem by executing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem install langchainrb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;langchain&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Supported vector search databases and features:&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Database&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Querying&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Storage&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Schema Management&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Backups&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Rails Integration&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://trychroma.com/&#34;&gt;Chroma&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;WIP&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;WIP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://milvus.io/&#34;&gt;Milvus&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;WIP&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;WIP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.pinecone.io/&#34;&gt;Pinecone&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;WIP&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;WIP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://qdrant.tech/&#34;&gt;Qdrant&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;WIP&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;WIP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://weaviate.io/&#34;&gt;Weaviate&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;WIP&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;WIP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Using Vector Search Databases üîç&lt;/h3&gt; &#xA;&lt;p&gt;Choose the LLM provider you&#39;ll be using (OpenAI or Cohere) and retrieve the API key.&lt;/p&gt; &#xA;&lt;p&gt;Add &lt;code&gt;gem &#34;weaviate-ruby&#34;, &#34;~&amp;gt; 0.8.0&#34;&lt;/code&gt; to your Gemfile.&lt;/p&gt; &#xA;&lt;p&gt;Pick the vector search database you&#39;ll be using and instantiate the client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client = Langchain::Vectorsearch::Weaviate.new(&#xA;    url: ENV[&#34;WEAVIATE_URL&#34;],&#xA;    api_key: ENV[&#34;WEAVIATE_API_KEY&#34;],&#xA;    llm: :openai, # or :cohere&#xA;    llm_api_key: ENV[&#34;OPENAI_API_KEY&#34;]&#xA;)&#xA;&#xA;# You can instantiate any other supported vector search database:&#xA;client = Langchain::Vectorsearch::Milvus.new(...) # `gem &#34;milvus&#34;, &#34;~&amp;gt; 0.9.0&#34;`&#xA;client = Langchain::Vectorsearch::Qdrant.new(...) # `gem&#34;qdrant-ruby&#34;, &#34;~&amp;gt; 0.9.0&#34;`&#xA;client = Langchain::Vectorsearch::Pinecone.new(...) # `gem &#34;pinecone&#34;, &#34;~&amp;gt; 0.1.6&#34;`&#xA;client = Langchain::Vectorsearch::Chroma.new(...) # `gem &#34;chroma-db&#34;, &#34;~&amp;gt; 0.3.0&#34;`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Creating the default schema&#xA;client.create_default_schema&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Store plain texts in your vector search database&#xA;client.add_texts(&#xA;    texts: [&#xA;        &#34;Begin by preheating your oven to 375¬∞F (190¬∞C). Prepare four boneless, skinless chicken breasts by cutting a pocket into the side of each breast, being careful not to cut all the way through. Season the chicken with salt and pepper to taste. In a large skillet, melt 2 tablespoons of unsalted butter over medium heat. Add 1 small diced onion and 2 minced garlic cloves, and cook until softened, about 3-4 minutes. Add 8 ounces of fresh spinach and cook until wilted, about 3 minutes. Remove the skillet from heat and let the mixture cool slightly.&#34;,&#xA;        &#34;In a bowl, combine the spinach mixture with 4 ounces of softened cream cheese, 1/4 cup of grated Parmesan cheese, 1/4 cup of shredded mozzarella cheese, and 1/4 teaspoon of red pepper flakes. Mix until well combined. Stuff each chicken breast pocket with an equal amount of the spinach mixture. Seal the pocket with a toothpick if necessary. In the same skillet, heat 1 tablespoon of olive oil over medium-high heat. Add the stuffed chicken breasts and sear on each side for 3-4 minutes, or until golden brown.&#34;&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Store the contents of your files in your vector search database&#xA;my_pdf = Langchain.root.join(&#34;path/to/my.pdf&#34;)&#xA;my_text = Langchain.root.join(&#34;path/to/my.txt&#34;)&#xA;my_docx = Langchain.root.join(&#34;path/to/my.docx&#34;)&#xA;&#xA;client.add_data(paths: [my_pdf, my_text, my_docx])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Retrieve similar documents based on the query string passed in&#xA;client.similarity_search(&#xA;    query:,&#xA;    k:       # number of results to be retrieved&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Retrieve similar documents based on the embedding passed in&#xA;client.similarity_search_by_vector(&#xA;    embedding:,&#xA;    k:       # number of results to be retrieved&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Q&amp;amp;A-style querying based on the question passed in&#xA;client.ask(&#xA;    question:&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Standalone LLMs üó£Ô∏è&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;gem &#34;ruby-openai&#34;, &#34;~&amp;gt; 4.0.0&#34;&lt;/code&gt; to your Gemfile.&lt;/p&gt; &#xA;&lt;h4&gt;OpenAI&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;openai = Langchain::LLM::OpenAI.new(api_key: ENV[&#34;OPENAI_API_KEY&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can pass additional parameters to the constructor, it will be passed to the OpenAI client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;openai = Langchain::LLM::OpenAI.new(api_key: ENV[&#34;OPENAI_API_KEY&#34;], llm_options: {uri_base: &#34;http://localhost:1234&#34;}) )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;openai.embed(text: &#34;foo bar&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;openai.complete(prompt: &#34;What is the meaning of life?&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Cohere&lt;/h4&gt; &#xA;&lt;p&gt;Add &lt;code&gt;gem &#34;cohere-ruby&#34;, &#34;~&amp;gt; 0.9.3&#34;&lt;/code&gt; to your Gemfile.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;cohere = Langchain::LLM::Cohere.new(api_key: ENV[&#34;COHERE_API_KEY&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;cohere.embed(text: &#34;foo bar&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;cohere.complete(prompt: &#34;What is the meaning of life?&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;HuggingFace&lt;/h4&gt; &#xA;&lt;p&gt;Add &lt;code&gt;gem &#34;hugging-face&#34;, &#34;~&amp;gt; 0.3.2&#34;&lt;/code&gt; to your Gemfile.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;cohere = Langchain::LLM::HuggingFace.new(api_key: ENV[&#34;HUGGING_FACE_API_KEY&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Replicate&lt;/h4&gt; &#xA;&lt;p&gt;Add &lt;code&gt;gem &#34;replicate-ruby&#34;, &#34;~&amp;gt; 0.2.2&#34;&lt;/code&gt; to your Gemfile.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;cohere = Langchain::LLM::Replicate.new(api_key: ENV[&#34;REPLICATE_API_KEY&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Google PaLM (Pathways Language Model)&lt;/h4&gt; &#xA;&lt;p&gt;Add &lt;code&gt;&#34;google_palm_api&#34;, &#34;~&amp;gt; 0.1.0&#34;&lt;/code&gt; to your Gemfile.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;google_palm = Langchain::LLM::GooglePalm.new(api_key: ENV[&#34;GOOGLE_PALM_API_KEY&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;AI21&lt;/h4&gt; &#xA;&lt;p&gt;Add &lt;code&gt;gem &#34;ai21&#34;, &#34;~&amp;gt; 0.2.0&#34;&lt;/code&gt; to your Gemfile.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ai21 = Langchain::LLM::AI21.new(api_key: ENV[&#34;AI21_API_KEY&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Prompts üìã&lt;/h3&gt; &#xA;&lt;h4&gt;Prompt Templates&lt;/h4&gt; &#xA;&lt;p&gt;Create a prompt with one input variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;prompt = Langchain::Prompt::PromptTemplate.new(template: &#34;Tell me a {adjective} joke.&#34;, input_variables: [&#34;adjective&#34;])&#xA;prompt.format(adjective: &#34;funny&#34;) # &#34;Tell me a funny joke.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a prompt with multiple input variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;prompt = Langchain::Prompt::PromptTemplate.new(template: &#34;Tell me a {adjective} joke about {content}.&#34;, input_variables: [&#34;adjective&#34;, &#34;content&#34;])&#xA;prompt.format(adjective: &#34;funny&#34;, content: &#34;chickens&#34;) # &#34;Tell me a funny joke about chickens.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Creating a PromptTemplate using just a prompt and no input_variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;prompt = Langchain::Prompt::PromptTemplate.from_template(&#34;Tell me a {adjective} joke about {content}.&#34;)&#xA;prompt.input_variables # [&#34;adjective&#34;, &#34;content&#34;]&#xA;prompt.format(adjective: &#34;funny&#34;, content: &#34;chickens&#34;) # &#34;Tell me a funny joke about chickens.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Save prompt template to JSON file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;prompt.save(file_path: &#34;spec/fixtures/prompt/prompt_template.json&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Loading a new prompt template using a JSON file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;prompt = Langchain::Prompt.load_from_path(file_path: &#34;spec/fixtures/prompt/prompt_template.json&#34;)&#xA;prompt.input_variables # [&#34;adjective&#34;, &#34;content&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Few Shot Prompt Templates&lt;/h4&gt; &#xA;&lt;p&gt;Create a prompt with a few shot examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;prompt = Langchain::Prompt::FewShotPromptTemplate.new(&#xA;  prefix: &#34;Write antonyms for the following words.&#34;,&#xA;  suffix: &#34;Input: {adjective}\nOutput:&#34;,&#xA;  example_prompt: Langchain::Prompt::PromptTemplate.new(&#xA;    input_variables: [&#34;input&#34;, &#34;output&#34;],&#xA;    template: &#34;Input: {input}\nOutput: {output}&#34;&#xA;  ),&#xA;  examples: [&#xA;    { &#34;input&#34;: &#34;happy&#34;, &#34;output&#34;: &#34;sad&#34; },&#xA;    { &#34;input&#34;: &#34;tall&#34;, &#34;output&#34;: &#34;short&#34; }&#xA;  ],&#xA;   input_variables: [&#34;adjective&#34;]&#xA;)&#xA;&#xA;prompt.format(adjective: &#34;good&#34;)&#xA;&#xA;# Write antonyms for the following words.&#xA;#&#xA;# Input: happy&#xA;# Output: sad&#xA;#&#xA;# Input: tall&#xA;# Output: short&#xA;#&#xA;# Input: good&#xA;# Output:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Save prompt template to JSON file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;prompt.save(file_path: &#34;spec/fixtures/prompt/few_shot_prompt_template.json&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Loading a new prompt template using a JSON file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;prompt = Langchain::Prompt.load_from_path(file_path: &#34;spec/fixtures/prompt/few_shot_prompt_template.json&#34;)&#xA;prompt.prefix # &#34;Write antonyms for the following words.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Agents ü§ñ&lt;/h3&gt; &#xA;&lt;p&gt;Agents are semi-autonomous bots that can respond to user questions and use available to them Tools to provide informed replies. They break down problems into series of steps and define Actions (and Action Inputs) along the way that are executed and fed back to them as additional information. Once an Agent decides that it has the Final Answer it responds with it.&lt;/p&gt; &#xA;&lt;h4&gt;Chain-of-Thought Agent&lt;/h4&gt; &#xA;&lt;p&gt;Add &lt;code&gt;gem &#34;ruby-openai&#34;&lt;/code&gt;, &lt;code&gt;gem &#34;eqn&#34;&lt;/code&gt;, and &lt;code&gt;gem &#34;google_search_results&#34;&lt;/code&gt; to your Gemfile&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;agent = Langchain::Agent::ChainOfThoughtAgent.new(llm: :openai, llm_api_key: ENV[&#34;OPENAI_API_KEY&#34;], tools: [&#39;search&#39;, &#39;calculator&#39;])&#xA;&#xA;agent.tools&#xA;# =&amp;gt; [&#34;search&#34;, &#34;calculator&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;agent.run(question: &#34;How many full soccer fields would be needed to cover the distance between NYC and DC in a straight line?&#34;)&#xA;#=&amp;gt; &#34;Approximately 2,945 soccer fields would be needed to cover the distance between NYC and DC in a straight line.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Demo&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/andreibondarev/langchainrb/assets/541665/6bad4cd9-976c-420f-9cf9-b85bf84f7eaf&#34; alt=&#34;May-12-2023 13-09-13&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/andreibondarev/langchainrb/assets/541665/9aacdcc7-4225-4ea0-ab96-7ee48826eb9b&#34; alt=&#34;May-12-2023 13-07-45&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Available Tools üõ†Ô∏è&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;ENV Requirements&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Gem Requirements&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;calculator&#34;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Useful for getting the result of a math expression&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;gem &#34;eqn&#34;, &#34;~&amp;gt; 1.6.5&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;ruby_code_interpreter&#34;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Interprets Ruby expressions&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;gem &#34;safe_ruby&#34;, &#34;~&amp;gt; 1.0.4&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;search&#34;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;A wrapper around Google Search&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;ENV[&#34;SERPAPI_API_KEY&#34;]&lt;/code&gt; (&lt;a href=&#34;https://serpapi.com/manage-api-key&#34;&gt;https://serpapi.com/manage-api-key&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;gem &#34;google_search_results&#34;, &#34;~&amp;gt; 2.0.0&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;wikipedia&#34;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Calls Wikipedia API to retrieve the summary&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;gem &#34;wikipedia-client&#34;, &#34;~&amp;gt; 1.17.0&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Loaders üöö&lt;/h4&gt; &#xA;&lt;p&gt;Need to read data from various sources? Load it up.&lt;/p&gt; &#xA;&lt;h5&gt;Usage&lt;/h5&gt; &#xA;&lt;p&gt;Just call &lt;code&gt;Langchan::Loader.load&lt;/code&gt; with the path to the file or a URL you want to load.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Langchain::Loader.load(&#39;/path/to/file.pdf&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Langchain::Loader.load(&#39;https://www.example.com/file.pdf&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Supported Formats&lt;/h5&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Format&lt;/th&gt; &#xA;   &lt;th&gt;Pocessor&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Gem Requirements&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;docx&lt;/td&gt; &#xA;   &lt;td&gt;Langchain::Processors::Docx&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;gem &#34;docx&#34;, &#34;~&amp;gt; 0.8.0&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;html&lt;/td&gt; &#xA;   &lt;td&gt;Langchain::Processors::HTML&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;gem &#34;nokogiri&#34;, &#34;~&amp;gt; 1.13&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pdf&lt;/td&gt; &#xA;   &lt;td&gt;Langchain::Processors::PDF&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;gem &#34;pdf-reader&#34;, &#34;~&amp;gt; 1.4&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;text&lt;/td&gt; &#xA;   &lt;td&gt;Langchain::Processors::Text&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JSON&lt;/td&gt; &#xA;   &lt;td&gt;Langchain::Processors::JSON&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JSONL&lt;/td&gt; &#xA;   &lt;td&gt;Langchain::Processors::JSONL&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;csv&lt;/td&gt; &#xA;   &lt;td&gt;Langchain::Processors::CSV&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Additional examples available: &lt;a href=&#34;https://github.com/andreibondarev/langchainrb/tree/main/examples&#34;&gt;/examples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;p&gt;LangChain.rb uses standard logging mechanisms and defaults to &lt;code&gt;:warn&lt;/code&gt; level. Most messages are at info level, but we will add debug or warn statements as needed. To show all log messages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Langchain.logger.level = :info&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone https://github.com/andreibondarev/langchainrb.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cp .env.example .env&lt;/code&gt;, then fill out the environment variables in &lt;code&gt;.env&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bundle exec rake&lt;/code&gt; to ensure that the tests pass and to run standardrb&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bin/console&lt;/code&gt; to load the gem in a REPL session. Feel free to add your own instances of LLMs, Tools, Agents, etc. and experiment with them.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Join us in the &lt;a href=&#34;https://discord.gg/SBmjAnKT&#34;&gt;Ruby AI Builders&lt;/a&gt; Discord community in #langchainrb&lt;/p&gt; &#xA;&lt;h2&gt;Core Contributors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/andreibondarev&#34;&gt;&lt;img style=&#34;border-radius:50%&#34; alt=&#34;Andrei Bondarev&#34; src=&#34;https://avatars.githubusercontent.com/u/541665?v=4&#34; width=&#34;80&#34; height=&#34;80&#34; class=&#34;avatar&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Honorary Contributors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/andreibondarev&#34;&gt;&lt;img style=&#34;border-radius:50%&#34; alt=&#34;Andrei Bondarev&#34; src=&#34;https://avatars.githubusercontent.com/u/541665?v=4&#34; width=&#34;80&#34; height=&#34;80&#34; class=&#34;avatar&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rafaelqfigueiredo&#34;&gt;&lt;img style=&#34;border-radius:50%&#34; alt=&#34;Rafael Figueiredo&#34; src=&#34;https://avatars.githubusercontent.com/u/35845775?v=4&#34; width=&#34;80&#34; height=&#34;80&#34; class=&#34;avatar&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rickychilcott&#34;&gt;&lt;img style=&#34;border-radius:50%&#34; alt=&#34;Ricky Chilcott&#34; src=&#34;https://avatars.githubusercontent.com/u/445759?v=4&#34; width=&#34;80&#34; height=&#34;80&#34; class=&#34;avatar&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/alchaplinsky&#34;&gt;&lt;img style=&#34;border-radius:50%&#34; alt=&#34;Alex Chaplinsky&#34; src=&#34;https://avatars.githubusercontent.com/u/695947?v=4&#34; width=&#34;80&#34; height=&#34;80&#34; class=&#34;avatar&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;(Criteria for becoming an Honorary Contributor or Core Contributor is pending...)&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports and pull requests are welcome on GitHub at &lt;a href=&#34;https://github.com/andreibondarev/langchain&#34;&gt;https://github.com/andreibondarev/langchain&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tempAccountA/MSBlockButton</title>
    <updated>2023-06-04T02:07:42Z</updated>
    <id>tag:github.com,2023-06-04:/tempAccountA/MSBlockButton</id>
    <link href="https://github.com/tempAccountA/MSBlockButton" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MSBlockButton&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.apple.com/nl/ios/&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/p/YYKit.svg?style=flat&#34; alt=&#34;platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JZJJZJ/MSBlockButton/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/mashape/apistatus.svg?style=flat&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JZJJZJ/MSBlockButton.git&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/MSBlockButton.svg?style=flat&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/language-swift-orange.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://github.com/JZJJZJ/MSBlockButton.git&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/badges/shields.svg?style=social&amp;amp;logo=github&amp;amp;label=Stars&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An UIButton Category replace SEL with Block.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;block syntax&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Cocoapods(Recommended)&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;pod &#39;MSBlockButton&#39;&lt;/code&gt; to your Podfile.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pod install&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add all files under &lt;code&gt;MSBlockButton &lt;/code&gt; to your project&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 5.0 and greater&lt;/li&gt; &#xA; &lt;li&gt;ARC/MRC&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How To Use&lt;/h2&gt; &#xA;&lt;h3&gt;Objective-C&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;        &#xA;    #import &#34;MSBlockButton.h&#34;&#xA;    &#xA;    CGFloat   width  = [UIScreen mainScreen].bounds.size.width;&#xA;    UIButton* button = [UIButton buttonWithType:UIButtonTypeCustom];&#xA;    button.frame = CGRectMake((width-100)*0.5, (width-100)*0.5, 100, 100);&#xA;    [self.view addSubview:button];&#xA;    &#xA;    button.backgroundColor = [[UIColor orangeColor] colorWithAlphaComponent:0.8];&#xA;    [button setTitle:@&#34;Blocks&#34; forState:UIControlStateNormal];&#xA;&#xA;    [button handleTouchUpInsideEventWithBlock:^(UIButton *sender) {&#xA;        NSLog(@&#34;%s&#34;,__func__);&#xA;&#xA;    }];&#xA;          &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swift&lt;/h3&gt; &#xA;&lt;p&gt;You can use MSBlockButton in Swift projects too. To do this, you must:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Copy the relevant .m and .h files from the MSBlockButton src folder into your project&lt;/li&gt; &#xA; &lt;li&gt;If prompted to create a &#34;bridging header&#34;, you should do so. If not prompted and if you don&#39;t already have a bridging header, add one.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For more information on bridging headers, see &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html#//apple_ref/doc/uid/TP40014216-CH10-XID_76&#34;&gt;Swift and Objective-C in the Same Project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;In your bridging header, add a line that says:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt; &amp;nbsp; &amp;nbsp;#import &#34;MSBlockButton.h&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you do the above, you can then write Swift code that uses MSBlockButton. For example, in Swift 3.0 :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;     &#xA;     let btn = UIButton(frame: CGRect(origin: CGPoint.zero, size: CGSize(width: 100, height: 100)))&#xA;     btn.center = view.center&#xA;     btn.backgroundColor = UIColor.purple&#xA;     btn.setTitle(&#34;SwiftVC&#34;, for: UIControlState.normal)&#xA;     view.addSubview(btn)&#xA;     &#xA;     btn.handleTouchUpInsideEvent { (btn:UIButton?) in&#xA;         print(&#34;\(&#34;SwiftViewController&#34;) \(#function)&#34;)&#xA;         &#xA;     }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MSBlockButton is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;</summary>
  </entry>
</feed>