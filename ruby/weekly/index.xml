<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-05T01:59:27Z</updated>
  <subtitle>Weekly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>otsembo/my-todos-sinatra</title>
    <updated>2023-03-05T01:59:27Z</updated>
    <id>tag:github.com,2023-03-05:/otsembo/my-todos-sinatra</id>
    <link href="https://github.com/otsembo/my-todos-sinatra" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My-Todos is a basic API built with ruby&#39;s Sinatra DSL.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://gitHub.com/otsembo/my-todos-sinatra/graphs/commit-activity&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Maintained%3F-yes-green.svg?sanitize=true&#34; alt=&#34;Maintenance&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://GitHub.com/otsembo/my-todos-sinatra/network/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/otsembo/my-todos-sinatra.svg?style=social&amp;amp;label=Fork&amp;amp;maxAge=2592000&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/otsembo/my-todos-sinatra/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/Naereen/StrapDown.js.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://makeapullrequest.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://svgshare.com/i/Zhy.svg&#34;&gt;&lt;img src=&#34;https://svgshare.com/i/Zhy.svg?sanitize=true&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ellerbrock/open-source-badges/&#34;&gt;&lt;img src=&#34;https://badges.frapsoft.com/os/v1/open-source.svg?v=103&#34; alt=&#34;Open Source Love svg1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;My-Todos&lt;/h1&gt; &#xA;&lt;p&gt;My-Todos is a basic API built with ruby&#39;s Sinatra DSL.&lt;/p&gt; &#xA;&lt;p&gt;This project is a demo that shows the power of the DSL in building server-side applications quickly.&lt;/p&gt; &#xA;&lt;p&gt;The application has been built with the MVC design pattern.&lt;/p&gt; &#xA;&lt;h2&gt;Pre-Requisites&lt;/h2&gt; &#xA;&lt;p&gt;In order to use this repository you will need the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Operating System &lt;strong&gt;(Windows &lt;code&gt;10+&lt;/code&gt;, Linux &lt;code&gt;3.8+&lt;/code&gt;, or MacOS X &lt;code&gt;10.7+&lt;/code&gt;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;RAM &amp;gt;= 4GB&lt;/li&gt; &#xA; &lt;li&gt;Free Space &amp;gt;= 2GB&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Built With&lt;/h2&gt; &#xA;&lt;p&gt;This application has been built with the following tools:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/Ruby-CC342D?style=for-the-badge&amp;amp;logo=ruby&amp;amp;logoColor=white&#34; alt=&#34;ruby&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/SQLite-07405E?style=for-the-badge&amp;amp;logo=sqlite&amp;amp;logoColor=white&#34; alt=&#34;sqlite&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Bootstrap-563D7C?style=for-the-badge&amp;amp;logo=bootstrap&amp;amp;logoColor=white&#34; alt=&#34;bootstrap&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ruby &lt;code&gt;v2.7.+&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SQlite3 &lt;code&gt;v1.6&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ActiveRecord &lt;code&gt;v7.0.4&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rake &lt;code&gt;v13.0.6&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Puma &lt;code&gt;v6.1&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;rerun &lt;code&gt;v0.14&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sinatra &lt;code&gt;v3.0.5&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bootstrap &lt;code&gt;v5.3.0&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ERB &lt;code&gt;v4.0&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;You can setup this repository by following this manual&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository &lt;pre&gt;&lt;code class=&#34;language-{shell}&#34;&gt;git clone https://github.com/otsembo/my-todos-sinatra.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Ensure the ruby gems are setup in your machine &lt;pre&gt;&lt;code class=&#34;language-{shell}&#34;&gt;bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Perform any pending database migrations &lt;pre&gt;&lt;code class=&#34;language-{shell}&#34;&gt;rake db:migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run the application &lt;pre&gt;&lt;code class=&#34;language-{shell}&#34;&gt;rake start&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Open the application from your browser &lt;pre&gt;&lt;code&gt;http://localhost:9292&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Application&lt;/h2&gt; &#xA;&lt;p&gt;This application is a simple web API that allows users to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Register a new account.&lt;/li&gt; &#xA; &lt;li&gt;Log in to existing account.&lt;/li&gt; &#xA; &lt;li&gt;Create TODO items.&lt;/li&gt; &#xA; &lt;li&gt;Update individual TODO items.&lt;/li&gt; &#xA; &lt;li&gt;View all TODO items.&lt;/li&gt; &#xA; &lt;li&gt;Filter TODO items by date.&lt;/li&gt; &#xA; &lt;li&gt;Delete a TODO item.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;MODELS&lt;/h3&gt; &#xA;&lt;p&gt;Database schema definitions.&lt;/p&gt; &#xA;&lt;h4&gt;TODO&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;COLUMN&lt;/th&gt; &#xA;   &lt;th&gt;DATA TYPE&lt;/th&gt; &#xA;   &lt;th&gt;DESCRIPTION&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;id&lt;/td&gt; &#xA;   &lt;td&gt;Integer&lt;/td&gt; &#xA;   &lt;td&gt;Unique identifier.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;title&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;The name of the task.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;description&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;A short description about the task.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;due&lt;/td&gt; &#xA;   &lt;td&gt;Date&lt;/td&gt; &#xA;   &lt;td&gt;The set due date for the task.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;createdAt&lt;/td&gt; &#xA;   &lt;td&gt;Date&lt;/td&gt; &#xA;   &lt;td&gt;The date the task was created.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;status&lt;/td&gt; &#xA;   &lt;td&gt;ENUM &lt;code&gt;[CREATED, ONGOING, COMPLETED, CANCELLED]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;TThe status of the task.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;USER&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;COLUMN&lt;/th&gt; &#xA;   &lt;th&gt;DATA TYPE&lt;/th&gt; &#xA;   &lt;th&gt;DESCRIPTION&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;id&lt;/td&gt; &#xA;   &lt;td&gt;Integer&lt;/td&gt; &#xA;   &lt;td&gt;Unique identifier.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;full_name&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;User&#39;s full name.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;password_hash&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;User&#39;s password hashed with &lt;code&gt;BCrypt&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;updated_at&lt;/td&gt; &#xA;   &lt;td&gt;Date&lt;/td&gt; &#xA;   &lt;td&gt;The date the user was updated.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;createdAt&lt;/td&gt; &#xA;   &lt;td&gt;Date&lt;/td&gt; &#xA;   &lt;td&gt;The date the user was created.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;ROUTES&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;/hello&lt;/code&gt; - Presents a simple welcome message.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;/auth/register&lt;/code&gt; - Create a new user account.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-{json}&#34;&gt;## REQUEST BODY&#xA;{&#xA; &#34;full_name&#34;: &#34;John Doe&#34;,&#xA; &#34;email&#34;: &#34;mail@mail.com&#34;,&#xA; &#34;password&#34;: &#34;12345678&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;/auth/login&lt;/code&gt; - Log in a user using email and password.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-{json}&#34;&gt;## REQUEST BODY&#xA;{&#xA; &#34;email&#34;: &#34;mail@mail.com&#34;,&#xA; &#34;password&#34;: &#34;12345678&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;/todos/create&lt;/code&gt; - Add a new TODO item.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-{json}&#34;&gt;## REQUEST BODY&#xA;{&#xA; &#34;title&#34;: &#34;Make Breakfast&#34;,&#xA; &#34;description&#34;: &#34;Prepare milk and cereal&#34;,&#xA; &#34;due&#34;: &#34;2023-09-09&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;/todos&lt;/code&gt; - List all TODO items.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-{json}&#34;&gt;## RESPONSE SAMPLE&#xA;{&#xA; &#34;data&#34;: [&#xA;     {&#xA;         &#34;id&#34;: 2,&#xA;         &#34;title&#34;: &#34;Running another DSA practice 2&#34;,&#xA;         &#34;description&#34;: &#34;A wild desc&#34;,&#xA;         &#34;due&#34;: &#34;2023-02-24T00:00:00.000Z&#34;,&#xA;         &#34;createdAt&#34;: &#34;2023-02-24T09:34:41.856Z&#34;,&#xA;         &#34;status&#34;: &#34;CREATED&#34;&#xA;     }],&#xA; &#34;message&#34;: &#34;SUCCESS&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;/todos/update/:id&lt;/code&gt; - Update an existing TODO.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;/todos/delete/:id&lt;/code&gt; - Delete a TODO item.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;/&lt;/code&gt; - Render a table of all todos using Bootstrap and ERB&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/otsembo/my-todos-sinatra/main/screens/todo_table.png&#34; alt=&#34;Todo Table&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;This repository is distributed under the MIT License&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;Copyright 2023 Ian Okumu&#xA;&#xA;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), &#xA;to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, &#xA;and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&#xA;&#xA;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&#xA;&#xA;THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. &#xA;IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;This repository is maintained by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/otsembo&#34;&gt;Ian Okumu&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>rspec/rspec-rails</title>
    <updated>2023-03-05T01:59:27Z</updated>
    <id>tag:github.com,2023-03-05:/rspec/rspec-rails</id>
    <link href="https://github.com/rspec/rspec-rails" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RSpec for Rails 5+&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rspec-rails &lt;a href=&#34;https://codeclimate.com/github/rspec/rspec-rails&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/rspec/rspec-rails.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/rb/rspec-rails&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/rspec-rails.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;rspec-rails&lt;/code&gt; brings the &lt;a href=&#34;https://rspec.info/&#34;&gt;RSpec&lt;/a&gt; testing framework to &lt;a href=&#34;https://rubyonrails.org/&#34;&gt;Ruby on Rails&lt;/a&gt; as a drop-in alternative to its default testing framework, Minitest.&lt;/p&gt; &#xA;&lt;p&gt;In RSpec, tests are not just scripts that verify your application code. They’re also specifications (or &lt;em&gt;specs,&lt;/em&gt; for short): detailed explanations of how the application is supposed to behave, expressed in plain English.&lt;/p&gt; &#xA;&lt;p&gt;According to &lt;a href=&#34;https://github.com/rspec/rspec-rails/raw/main/rfcs/versioning-strategy.md&#34;&gt;RSpec Rails new versioning strategy&lt;/a&gt; use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/rspec/rspec-rails/tree/6-0-maintenance&#34;&gt;&lt;code&gt;rspec-rails&lt;/code&gt; 6.x&lt;/a&gt;&lt;/strong&gt; for Rails 6.1 or 7.x.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/rspec/rspec-rails/tree/5-1-maintenance&#34;&gt;&lt;code&gt;rspec-rails&lt;/code&gt; 5.x&lt;/a&gt;&lt;/strong&gt; for Rails 5.2 or 6.x.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/rspec/rspec-rails/tree/4-1-maintenance&#34;&gt;&lt;code&gt;rspec-rails&lt;/code&gt; 4.x&lt;/a&gt;&lt;/strong&gt; for Rails from 5.x or 6.x.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/rspec/rspec-rails/tree/3-9-maintenance&#34;&gt;&lt;code&gt;rspec-rails&lt;/code&gt; 3.x&lt;/a&gt;&lt;/strong&gt; for Rails earlier than 5.0.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/dchelimsky/rspec-rails&#34;&gt;&lt;code&gt;rspec-rails&lt;/code&gt; 1.x&lt;/a&gt;&lt;/strong&gt; for Rails 2.x.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; This README / branch refers to the current development build. See the &lt;a href=&#34;https://github.com/rspec/rspec-rails/tree/6-0-maintenance&#34;&gt;&lt;code&gt;6-0-maintenance&lt;/code&gt; branch on Github&lt;/a&gt; if you want or require the latest stable release.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;code&gt;rspec-rails&lt;/code&gt; to &lt;strong&gt;both&lt;/strong&gt; the &lt;code&gt;:development&lt;/code&gt; and &lt;code&gt;:test&lt;/code&gt; groups of your app’s &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Run against this stable release&#xA;group :development, :test do&#xA;  gem &#39;rspec-rails&#39;, &#39;~&amp;gt; 6.0.0&#39;&#xA;end&#xA;&#xA;# Or, run against the main branch&#xA;# (requires main-branch versions of all related RSpec libraries)&#xA;group :development, :test do&#xA;  %w[rspec-core rspec-expectations rspec-mocks rspec-rails rspec-support].each do |lib|&#xA;    gem lib, git: &#34;https://github.com/rspec/#{lib}.git&#34;, branch: &#39;main&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;(Adding it to the &lt;code&gt;:development&lt;/code&gt; group is not strictly necessary, but without it, generators and rake tasks must be preceded by &lt;code&gt;RAILS_ENV=test&lt;/code&gt;.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Then, in your project directory:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Download and install&#xA;$ bundle install&#xA;&#xA;# Generate boilerplate configuration files&#xA;# (check the comments in each generated file for more information)&#xA;$ rails generate rspec:install&#xA;      create  .rspec&#xA;      create  spec&#xA;      create  spec/spec_helper.rb&#xA;      create  spec/rails_helper.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Upgrading&lt;/h2&gt; &#xA;&lt;p&gt;If your project is already using an older version of &lt;code&gt;rspec-rails&lt;/code&gt;, upgrade to the latest version with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ bundle update rspec-rails&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;RSpec follows &lt;a href=&#34;https://semver.org/&#34;&gt;semantic versioning&lt;/a&gt;, which means that “major version” upgrades (&lt;em&gt;e.g.,&lt;/em&gt; 2.x → 3.x) come with &lt;strong&gt;breaking changes&lt;/strong&gt;. If you’re upgrading from version 2.x or below, read the &lt;a href=&#34;https://www.relishapp.com/rspec/rspec-rails/docs/upgrade&#34;&gt;&lt;code&gt;rspec-rails&lt;/code&gt; upgrade notes&lt;/a&gt; to find out what to watch out for.&lt;/p&gt; &#xA;&lt;p&gt;Be sure to check the general &lt;a href=&#34;https://relishapp.com/rspec/docs/upgrade&#34;&gt;RSpec upgrade notes&lt;/a&gt; as well.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Creating boilerplate specs with &lt;code&gt;rails generate&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# RSpec hooks into built-in generators&#xA;$ rails generate model user&#xA;      invoke  active_record&#xA;      create    db/migrate/20181017040312_create_users.rb&#xA;      create    app/models/user.rb&#xA;      invoke    rspec&#xA;      create      spec/models/user_spec.rb&#xA;&#xA;# RSpec also provides its own spec file generators&#xA;$ rails generate rspec:model user&#xA;      create  spec/models/user_spec.rb&#xA;&#xA;# List all RSpec generators&#xA;$ rails generate --help | grep rspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running specs&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Default: Run all spec files (i.e., those matching spec/**/*_spec.rb)&#xA;$ bundle exec rspec&#xA;&#xA;# Run all spec files in a single directory (recursively)&#xA;$ bundle exec rspec spec/models&#xA;&#xA;# Run a single spec file&#xA;$ bundle exec rspec spec/controllers/accounts_controller_spec.rb&#xA;&#xA;# Run a single example from a spec file (by line number)&#xA;$ bundle exec rspec spec/controllers/accounts_controller_spec.rb:8&#xA;&#xA;# See all options for running specs&#xA;$ bundle exec rspec --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Optional:&lt;/strong&gt; If &lt;code&gt;bundle exec rspec&lt;/code&gt; is too verbose for you, you can generate a binstub at &lt;code&gt;bin/rspec&lt;/code&gt; and use that instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ bundle binstubs rspec-core&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;RSpec DSL Basics (or, how do I write a spec?)&lt;/h2&gt; &#xA;&lt;p&gt;In RSpec, application behavior is described &lt;strong&gt;first in (almost) plain English, then again in test code&lt;/strong&gt;, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.describe &#39;Post&#39; do           #&#xA;  context &#39;before publication&#39; do  # (almost) plain English&#xA;    it &#39;cannot have comments&#39; do   #&#xA;      expect { Post.create.comments.create! }.to raise_error(ActiveRecord::RecordInvalid)  # test code&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running &lt;code&gt;rspec&lt;/code&gt; will execute this test code, and then use the plain-English descriptions to generate a report of where the application conforms to (or fails to meet) the spec:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rspec --format documentation spec/models/post_spec.rb&#xA;&#xA;Post&#xA;  before publication&#xA;    cannot have comments&#xA;&#xA;Failures:&#xA;&#xA;  1) Post before publication cannot have comments&#xA;     Failure/Error: expect { Post.create.comments.create! }.to raise_error(ActiveRecord::RecordInvalid)&#xA;       expected ActiveRecord::RecordInvalid but nothing was raised&#xA;     # ./spec/models/post.rb:4:in `block (3 levels) in &amp;lt;top (required)&amp;gt;&#39;&#xA;&#xA;Finished in 0.00527 seconds (files took 0.29657 seconds to load)&#xA;1 example, 1 failure&#xA;&#xA;Failed examples:&#xA;&#xA;rspec ./spec/models/post_spec.rb:3 # Post before publication cannot have comments&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For an in-depth look at the RSpec DSL, including lots of examples, read the official Cucumber documentation for &lt;a href=&#34;https://relishapp.com/rspec/rspec-core/docs&#34;&gt;RSpec Core&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Helpful Rails Matchers&lt;/h3&gt; &#xA;&lt;p&gt;In RSpec, assertions are called &lt;em&gt;expectations,&lt;/em&gt; and every expectation is built around a &lt;em&gt;matcher.&lt;/em&gt; When you &lt;code&gt;expect(a).to eq(b)&lt;/code&gt;, you’re using the &lt;code&gt;eq&lt;/code&gt; matcher.&lt;/p&gt; &#xA;&lt;p&gt;In addition to &lt;a href=&#34;https://relishapp.com/rspec/rspec-expectations/docs/built-in-matchers&#34;&gt;the matchers that come standard in RSpec&lt;/a&gt;, here are some extras that make it easier to test the various parts of a Rails system:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;RSpec matcher&lt;/th&gt; &#xA;   &lt;th&gt;Delegates to&lt;/th&gt; &#xA;   &lt;th&gt;Available in&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/matchers/be-a-new-matcher&#34;&gt;&lt;code&gt;be_a_new&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;all&lt;/td&gt; &#xA;   &lt;td&gt;primarily intended for controller specs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/matchers/render-template-matcher&#34;&gt;&lt;code&gt;render_template&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;assert_template&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;request / controller / view&lt;/td&gt; &#xA;   &lt;td&gt;use with &lt;code&gt;expect(response).to&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/matchers/redirect-to-matcher&#34;&gt;&lt;code&gt;redirect_to&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;assert_redirect&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;request / controller&lt;/td&gt; &#xA;   &lt;td&gt;use with &lt;code&gt;expect(response).to&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/routing-specs/route-to-matcher&#34;&gt;&lt;code&gt;route_to&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;assert_recognizes&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;routing / controller&lt;/td&gt; &#xA;   &lt;td&gt;use with &lt;code&gt;expect(...).to route_to&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/routing-specs/be-routable-matcher&#34;&gt;&lt;code&gt;be_routable&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;routing / controller&lt;/td&gt; &#xA;   &lt;td&gt;use with &lt;code&gt;expect(...).not_to be_routable&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/matchers/have-http-status-matcher&#34;&gt;&lt;code&gt;have_http_status&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;request / controller / feature&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/matchers/activerecord-relation-match-array&#34;&gt;&lt;code&gt;match_array&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;all&lt;/td&gt; &#xA;   &lt;td&gt;for comparing arrays of ActiveRecord objects&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/matchers/have-been-enqueued-matcher&#34;&gt;&lt;code&gt;have_been_enqueued&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;all&lt;/td&gt; &#xA;   &lt;td&gt;requires config: &lt;code&gt;ActiveJob::Base.queue_adapter = :test&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/matchers/have-enqueued-job-matcher&#34;&gt;&lt;code&gt;have_enqueued_job&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;all&lt;/td&gt; &#xA;   &lt;td&gt;requires config: &lt;code&gt;ActiveJob::Base.queue_adapter = :test&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Follow the links above for examples of how each matcher is used.&lt;/p&gt; &#xA;&lt;h3&gt;What else does RSpec Rails add?&lt;/h3&gt; &#xA;&lt;p&gt;For a comprehensive look at RSpec Rails’ features, read the &lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs&#34;&gt;official Cucumber documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What tests should I write?&lt;/h2&gt; &#xA;&lt;p&gt;RSpec Rails defines ten different &lt;em&gt;types&lt;/em&gt; of specs for testing different parts of a typical Rails application. Each one inherits from one of Rails’ built-in &lt;code&gt;TestCase&lt;/code&gt; classes, meaning the helper methods provided by default in Rails tests are available in RSpec, as well.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Spec type&lt;/th&gt; &#xA;   &lt;th&gt;Corresponding Rails test class&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.relishapp.com/rspec/rspec-rails/docs/model-specs&#34;&gt;model&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.relishapp.com/rspec/rspec-rails/docs/controller-specs&#34;&gt;controller&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://api.rubyonrails.org/classes/ActionController/TestCase.html&#34;&gt;&lt;code&gt;ActionController::TestCase&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/mailer-specs&#34;&gt;mailer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ActionMailer::TestCase&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/job-specs/job-spec&#34;&gt;job&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.relishapp.com/rspec/rspec-rails/docs/view-specs/view-spec&#34;&gt;view&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ActionView::TestCase&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.relishapp.com/rspec/rspec-rails/docs/routing-specs&#34;&gt;routing&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.relishapp.com/rspec/rspec-rails/docs/helper-specs/helper-spec&#34;&gt;helper&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ActionView::TestCase&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/request-specs/request-spec&#34;&gt;request&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://api.rubyonrails.org/classes/ActionDispatch/IntegrationTest.html&#34;&gt;&lt;code&gt;ActionDispatch::IntegrationTest&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.relishapp.com/rspec/rspec-rails/docs/feature-specs/feature-spec&#34;&gt;feature&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/system-specs/system-spec&#34;&gt;system&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://api.rubyonrails.org/classes/ActionDispatch/SystemTestCase.html&#34;&gt;&lt;code&gt;ActionDispatch::SystemTestCase&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Follow the links above to see examples of each spec type, or for official Rails API documentation on the given &lt;code&gt;TestCase&lt;/code&gt; class.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note: This is not a checklist.&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Ask a hundred developers how to test an application, and you’ll get a hundred different answers.&lt;/p&gt; &#xA; &lt;p&gt;RSpec Rails provides thoughtfully selected features to encourage good testing practices, but there’s no “right” way to do it. Ultimately, it’s up to you to decide how your test suite will be composed.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;When creating a spec file, assign it a type in the top-level &lt;code&gt;describe&lt;/code&gt; block, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/models/user_spec.rb&#xA;&#xA;RSpec.describe User, type: :model do&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;System specs, feature specs, request specs–what’s the difference?&lt;/h3&gt; &#xA;&lt;p&gt;RSpec Rails provides some end-to-end (entire application) testing capability to specify the interaction with the client.&lt;/p&gt; &#xA;&lt;h4&gt;System specs&lt;/h4&gt; &#xA;&lt;p&gt;Also called &lt;strong&gt;acceptance tests&lt;/strong&gt;, &lt;strong&gt;browser tests&lt;/strong&gt;, or &lt;strong&gt;end-to-end tests&lt;/strong&gt;, system specs test the application from the perspective of a &lt;em&gt;human client.&lt;/em&gt; The test code walks through a user’s browser interactions,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;visit &#39;/login&#39;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fill_in &#39;Name&#39;, with: &#39;jdoe&#39;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;and the expectations revolve around page content.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;expect(page).to have_text(&#39;Welcome&#39;)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Because system specs are a wrapper around Rails’ built-in &lt;code&gt;SystemTestCase&lt;/code&gt;, they’re only available on Rails 5.1+. (Feature specs serve the same purpose, but without this dependency.)&lt;/p&gt; &#xA;&lt;h4&gt;Feature specs&lt;/h4&gt; &#xA;&lt;p&gt;Before Rails introduced system testing facilities, feature specs were the only spec type for end-to-end testing. While the RSpec team now &lt;a href=&#34;https://rspec.info/blog/2017/10/rspec-3-7-has-been-released/#rails-actiondispatchsystemtest-integration-system-specs&#34;&gt;officially recommends system specs&lt;/a&gt; instead, feature specs are still fully supported, look basically identical, and work on older versions of Rails.&lt;/p&gt; &#xA;&lt;p&gt;On the other hand, feature specs require non-trivial configuration to get some important features working, like JavaScript testing or making sure each test runs with a fresh DB state. With system specs, this configuration is provided out-of-the-box.&lt;/p&gt; &#xA;&lt;p&gt;Like system specs, feature specs require the &lt;a href=&#34;https://github.com/teamcapybara/capybara&#34;&gt;Capybara&lt;/a&gt; gem. Rails 5.1+ includes it by default as part of system tests, but if you don’t have the luxury of upgrading, be sure to add it to the &lt;code&gt;:test&lt;/code&gt; group of your &lt;code&gt;Gemfile&lt;/code&gt; first:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;group :test do&#xA;  gem &#34;capybara&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Request specs&lt;/h4&gt; &#xA;&lt;p&gt;Request specs are for testing the application from the perspective of a &lt;em&gt;machine client.&lt;/em&gt; They begin with an HTTP request and end with the HTTP response, so they’re faster than feature specs, but do not examine your app’s UI or JavaScript.&lt;/p&gt; &#xA;&lt;p&gt;Request specs provide a high-level alternative to controller specs. In fact, as of RSpec 3.5, both the Rails and RSpec teams &lt;a href=&#34;https://rspec.info/blog/2016/07/rspec-3-5-has-been-released/#rails-support-for-rails-5&#34;&gt;discourage directly testing controllers&lt;/a&gt; in favor of functional tests like request specs.&lt;/p&gt; &#xA;&lt;p&gt;When writing them, try to answer the question, “For a given HTTP request (verb + path + parameters), what HTTP response should the application return?”&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rspec/rspec-rails/main/BUILD_DETAIL.md&#34;&gt;Build details&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rspec/rspec-rails/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rspec/rspec-rails/main/CONTRIBUTING.md&#34;&gt;Detailed contributing guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once you’ve cloned the repo and &lt;a href=&#34;https://raw.githubusercontent.com/rspec/rspec-rails/main/DEVELOPMENT.md&#34;&gt;set up the environment&lt;/a&gt;, you can run the specs and Cucumber features, or submit a pull request.&lt;/p&gt; &#xA;&lt;h2&gt;See Also&lt;/h2&gt; &#xA;&lt;h3&gt;RSpec base libraries&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rspec/rspec&#34;&gt;https://github.com/rspec/rspec&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rspec/rspec-core&#34;&gt;https://github.com/rspec/rspec-core&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rspec/rspec-expectations&#34;&gt;https://github.com/rspec/rspec-expectations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rspec/rspec-mocks&#34;&gt;https://github.com/rspec/rspec-mocks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Recommended third-party extensions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thoughtbot/factory_bot&#34;&gt;FactoryBot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/teamcapybara/capybara&#34;&gt;Capybara&lt;/a&gt; (Included by default in Rails 5.1+. Note that &lt;a href=&#34;https://rubydoc.info/gems/rspec-rails/file/Capybara.md&#34;&gt;additional configuration is required&lt;/a&gt; to use the Capybara DSL anywhere other than system specs and feature specs.)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>rspec/rspec-expectations</title>
    <updated>2023-03-05T01:59:27Z</updated>
    <id>tag:github.com,2023-03-05:/rspec/rspec-expectations</id>
    <link href="https://github.com/rspec/rspec-expectations" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Provides a readable API to express expected outcomes of a code example&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RSpec Expectations &lt;a href=&#34;https://github.com/rspec/rspec-expectations/actions&#34;&gt;&lt;img src=&#34;https://github.com/rspec/rspec-expectations/workflows/RSpec%20CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/rspec/rspec-expectations&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/rspec/rspec-expectations.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;RSpec::Expectations lets you express expected outcomes on an object in an example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(account.balance).to eq(Money.new(37.42, :USD))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;If you want to use rspec-expectations with rspec, just install the rspec gem and RubyGems will also install rspec-expectations for you (along with rspec-core and rspec-mocks):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem install rspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Want to run against the &lt;code&gt;main&lt;/code&gt; branch? You&#39;ll need to include the dependent RSpec repos as well. Add the following to your &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;%w[rspec-core rspec-expectations rspec-mocks rspec-support].each do |lib|&#xA;  gem lib, :git =&amp;gt; &#34;https://github.com/rspec/#{lib}.git&#34;, :branch =&amp;gt; &#39;main&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use rspec-expectations with another tool, like Test::Unit, Minitest, or Cucumber, you can install it directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem install rspec-expectations&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Once you&#39;ve set up the environment, you&#39;ll need to cd into the working directory of whichever repo you want to work in. From there you can run the specs and cucumber features, and make patches.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: You do not need to use rspec-dev to work on a specific RSpec repo. You can treat each RSpec repo as an independent project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rspec/rspec-expectations/main/BUILD_DETAIL.md&#34;&gt;Build details&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rspec/rspec-expectations/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rspec/rspec-expectations/main/CONTRIBUTING.md&#34;&gt;Detailed contributing guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rspec/rspec-expectations/main/DEVELOPMENT.md&#34;&gt;Development setup guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Basic usage&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s an example using rspec-core:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.describe Order do&#xA;  it &#34;sums the prices of the items in its line items&#34; do&#xA;    order = Order.new&#xA;    order.add_entry(LineItem.new(:item =&amp;gt; Item.new(&#xA;      :price =&amp;gt; Money.new(1.11, :USD)&#xA;    )))&#xA;    order.add_entry(LineItem.new(:item =&amp;gt; Item.new(&#xA;      :price =&amp;gt; Money.new(2.22, :USD),&#xA;      :quantity =&amp;gt; 2&#xA;    )))&#xA;    expect(order.total).to eq(Money.new(5.55, :USD))&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;describe&lt;/code&gt; and &lt;code&gt;it&lt;/code&gt; methods come from rspec-core. The &lt;code&gt;Order&lt;/code&gt;, &lt;code&gt;LineItem&lt;/code&gt;, &lt;code&gt;Item&lt;/code&gt; and &lt;code&gt;Money&lt;/code&gt; classes would be from &lt;em&gt;your&lt;/em&gt; code. The last line of the example expresses an expected outcome. If &lt;code&gt;order.total == Money.new(5.55, :USD)&lt;/code&gt;, then the example passes. If not, it fails with a message like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;expected: #&amp;lt;Money @value=5.55 @currency=:USD&amp;gt;&#xA;     got: #&amp;lt;Money @value=1.11 @currency=:USD&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Built-in matchers&lt;/h2&gt; &#xA;&lt;h3&gt;Equivalence&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(actual).to eq(expected)  # passes if actual == expected&#xA;expect(actual).to eql(expected) # passes if actual.eql?(expected)&#xA;expect(actual).not_to eql(not_expected) # passes if not(actual.eql?(expected))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: The new &lt;code&gt;expect&lt;/code&gt; syntax no longer supports the &lt;code&gt;==&lt;/code&gt; matcher.&lt;/p&gt; &#xA;&lt;h3&gt;Identity&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(actual).to be(expected)    # passes if actual.equal?(expected)&#xA;expect(actual).to equal(expected) # passes if actual.equal?(expected)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Comparisons&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(actual).to be &amp;gt;  expected&#xA;expect(actual).to be &amp;gt;= expected&#xA;expect(actual).to be &amp;lt;= expected&#xA;expect(actual).to be &amp;lt;  expected&#xA;expect(actual).to be_within(delta).of(expected)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Regular expressions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(actual).to match(/expression/)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: The new &lt;code&gt;expect&lt;/code&gt; syntax no longer supports the &lt;code&gt;=~&lt;/code&gt; matcher.&lt;/p&gt; &#xA;&lt;h3&gt;Types/classes&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(actual).to be_an_instance_of(expected) # passes if actual.class == expected&#xA;expect(actual).to be_a(expected)              # passes if actual.kind_of?(expected)&#xA;expect(actual).to be_an(expected)             # an alias for be_a&#xA;expect(actual).to be_a_kind_of(expected)      # another alias&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Truthiness&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(actual).to be_truthy   # passes if actual is truthy (not nil or false)&#xA;expect(actual).to be true     # passes if actual == true&#xA;expect(actual).to be_falsy    # passes if actual is falsy (nil or false)&#xA;expect(actual).to be false    # passes if actual == false&#xA;expect(actual).to be_nil      # passes if actual is nil&#xA;expect(actual).to_not be_nil  # passes if actual is not nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Expecting errors&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect { ... }.to raise_error&#xA;expect { ... }.to raise_error(ErrorClass)&#xA;expect { ... }.to raise_error(&#34;message&#34;)&#xA;expect { ... }.to raise_error(ErrorClass, &#34;message&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Expecting throws&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect { ... }.to throw_symbol&#xA;expect { ... }.to throw_symbol(:symbol)&#xA;expect { ... }.to throw_symbol(:symbol, &#39;value&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Yielding&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect { |b| 5.tap(&amp;amp;b) }.to yield_control # passes regardless of yielded args&#xA;&#xA;expect { |b| yield_if_true(true, &amp;amp;b) }.to yield_with_no_args # passes only if no args are yielded&#xA;&#xA;expect { |b| 5.tap(&amp;amp;b) }.to yield_with_args(5)&#xA;expect { |b| 5.tap(&amp;amp;b) }.to yield_with_args(Integer)&#xA;expect { |b| &#34;a string&#34;.tap(&amp;amp;b) }.to yield_with_args(/str/)&#xA;&#xA;expect { |b| [1, 2, 3].each(&amp;amp;b) }.to yield_successive_args(1, 2, 3)&#xA;expect { |b| { :a =&amp;gt; 1, :b =&amp;gt; 2 }.each(&amp;amp;b) }.to yield_successive_args([:a, 1], [:b, 2])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Predicate matchers&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(actual).to be_xxx         # passes if actual.xxx?&#xA;expect(actual).to have_xxx(:arg) # passes if actual.has_xxx?(:arg)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ranges (Ruby &amp;gt;= 1.9 only)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(1..10).to cover(3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Collection membership&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# exact order, entire collection&#xA;expect(actual).to eq(expected)&#xA;&#xA;# exact order, partial collection (based on an exact position)&#xA;expect(actual).to start_with(expected)&#xA;expect(actual).to end_with(expected)&#xA;&#xA;# any order, entire collection&#xA;expect(actual).to match_array(expected)&#xA;&#xA;# You can also express this by passing the expected elements&#xA;# as individual arguments&#xA;expect(actual).to contain_exactly(expected_element1, expected_element2)&#xA;&#xA; # any order, partial collection&#xA;expect(actual).to include(expected)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Examples&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect([1, 2, 3]).to eq([1, 2, 3])            # Order dependent equality check&#xA;expect([1, 2, 3]).to include(1)               # Exact ordering, partial collection matches&#xA;expect([1, 2, 3]).to include(2, 3)            #&#xA;expect([1, 2, 3]).to start_with(1)            # As above, but from the start of the collection&#xA;expect([1, 2, 3]).to start_with(1, 2)         #&#xA;expect([1, 2, 3]).to end_with(3)              # As above but from the end of the collection&#xA;expect([1, 2, 3]).to end_with(2, 3)           #&#xA;expect({:a =&amp;gt; &#39;b&#39;}).to include(:a =&amp;gt; &#39;b&#39;)     # Matching within hashes&#xA;expect(&#34;this string&#34;).to include(&#34;is str&#34;)    # Matching within strings&#xA;expect(&#34;this string&#34;).to start_with(&#34;this&#34;)   #&#xA;expect(&#34;this string&#34;).to end_with(&#34;ring&#34;)     #&#xA;expect([1, 2, 3]).to contain_exactly(2, 3, 1) # Order independent matches&#xA;expect([1, 2, 3]).to match_array([3, 2, 1])   #&#xA;&#xA;# Order dependent compound matchers&#xA;expect(&#xA;  [{:a =&amp;gt; &#39;hash&#39;},{:a =&amp;gt; &#39;another&#39;}]&#xA;).to match([a_hash_including(:a =&amp;gt; &#39;hash&#39;), a_hash_including(:a =&amp;gt; &#39;another&#39;)])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;should&lt;/code&gt; syntax&lt;/h2&gt; &#xA;&lt;p&gt;In addition to the &lt;code&gt;expect&lt;/code&gt; syntax, rspec-expectations continues to support the &lt;code&gt;should&lt;/code&gt; syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;actual.should eq expected&#xA;actual.should be &amp;gt; 3&#xA;[1, 2, 3].should_not include 4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/rspec/rspec-expectations/raw/main/Should.md&#34;&gt;detailed information on the &lt;code&gt;should&lt;/code&gt; syntax and its usage.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compound Matcher Expressions&lt;/h2&gt; &#xA;&lt;p&gt;You can also create compound matcher expressions using &lt;code&gt;and&lt;/code&gt; or &lt;code&gt;or&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(alphabet).to start_with(&#34;a&#34;).and end_with(&#34;z&#34;)&#xA;expect(stoplight.color).to eq(&#34;red&#34;).or eq(&#34;green&#34;).or eq(&#34;yellow&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Composing Matchers&lt;/h2&gt; &#xA;&lt;p&gt;Many of the built-in matchers are designed to take matchers as arguments, to allow you to flexibly specify only the essential aspects of an object or data structure. In addition, all of the built-in matchers have one or more aliases that provide better phrasing for when they are used as arguments to another matcher.&lt;/p&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect { k += 1.05 }.to change { k }.by( a_value_within(0.1).of(1.0) )&#xA;&#xA;expect { s = &#34;barn&#34; }.to change { s }&#xA;  .from( a_string_matching(/foo/) )&#xA;  .to( a_string_matching(/bar/) )&#xA;&#xA;expect([&#34;barn&#34;, 2.45]).to contain_exactly(&#xA;  a_value_within(0.1).of(2.5),&#xA;  a_string_starting_with(&#34;bar&#34;)&#xA;)&#xA;&#xA;expect([&#34;barn&#34;, &#34;food&#34;, 2.45]).to end_with(&#xA;  a_string_matching(&#34;foo&#34;),&#xA;  a_value &amp;gt; 2&#xA;)&#xA;&#xA;expect([&#34;barn&#34;, 2.45]).to include( a_string_starting_with(&#34;bar&#34;) )&#xA;&#xA;expect(:a =&amp;gt; &#34;food&#34;, :b =&amp;gt; &#34;good&#34;).to include(:a =&amp;gt; a_string_matching(/foo/))&#xA;&#xA;hash = {&#xA;  :a =&amp;gt; {&#xA;    :b =&amp;gt; [&#34;foo&#34;, 5],&#xA;    :c =&amp;gt; { :d =&amp;gt; 2.05 }&#xA;  }&#xA;}&#xA;&#xA;expect(hash).to match(&#xA;  :a =&amp;gt; {&#xA;    :b =&amp;gt; a_collection_containing_exactly(&#xA;      a_string_starting_with(&#34;f&#34;),&#xA;      an_instance_of(Integer)&#xA;    ),&#xA;    :c =&amp;gt; { :d =&amp;gt; (a_value &amp;lt; 3) }&#xA;  }&#xA;)&#xA;&#xA;expect { |probe|&#xA;  [1, 2, 3].each(&amp;amp;probe)&#xA;}.to yield_successive_args( a_value &amp;lt; 2, 2, a_value &amp;gt; 2 )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage outside rspec-core&lt;/h2&gt; &#xA;&lt;p&gt;You always need to load &lt;code&gt;rspec/expectations&lt;/code&gt; even if you only want to use one part of the library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;rspec/expectations&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then simply include &lt;code&gt;RSpec::Matchers&lt;/code&gt; in any class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyClass&#xA;  include RSpec::Matchers&#xA;&#xA;  def do_something(arg)&#xA;    expect(arg).to be &amp;gt; 0&#xA;    # do other stuff&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Also see&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rspec/rspec&#34;&gt;https://github.com/rspec/rspec&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rspec/rspec-core&#34;&gt;https://github.com/rspec/rspec-core&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rspec/rspec-mocks&#34;&gt;https://github.com/rspec/rspec-mocks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rspec/rspec-rails&#34;&gt;https://github.com/rspec/rspec-rails&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>