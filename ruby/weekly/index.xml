<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-20T01:55:45Z</updated>
  <subtitle>Weekly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>inspec/inspec</title>
    <updated>2023-08-20T01:55:45Z</updated>
    <id>tag:github.com,2023-08-20:/inspec/inspec</id>
    <link href="https://github.com/inspec/inspec" rel="alternate"></link>
    <summary type="html">&lt;p&gt;InSpec: Auditing and Testing Framework&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Chef InSpec: Inspect Your Infrastructure&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Project State: Active&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Issues Response SLA: 14 business days&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pull Request Response SLA: 14 business days&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information on project states and SLAs, see &lt;a href=&#34;https://github.com/chef/chef-oss-practices/raw/main/repo-management/repo-states.md&#34;&gt;this documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://community-slack.chef.io/&#34;&gt;&lt;img src=&#34;https://community-slack.chef.io/badge.svg?sanitize=true&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildkite.com/chef-oss/inspec-inspec-main-verify&#34;&gt;&lt;img src=&#34;https://badge.buildkite.com/bf4c5fdc3858cc9f8c8bab8376e8e40d625ad046df9d4d8619.svg?branch=main&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/inspec/inspec?branch=main&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/inspec/inspec/badge.svg?branch=main&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Chef InSpec is an open-source testing framework for infrastructure with a human- and machine-readable language for specifying compliance, security and policy requirements.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Disallow insecure protocols by testing&#xA;&#xA;describe package(&#39;telnetd&#39;) do&#xA;&amp;nbsp; it { should_not be_installed }&#xA;end&#xA;&#xA;describe inetd_conf do&#xA;&amp;nbsp; its(&#34;telnet&#34;) { should eq nil }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Chef InSpec makes it easy to run your tests wherever you need. More options are found in our &lt;a href=&#34;https://docs.chef.io/inspec/cli/&#34;&gt;CLI docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# run test locally&#xA;inspec exec test.rb&#xA;&#xA;# run test on remote host via SSH&#xA;inspec exec test.rb -t ssh://user@hostname -i /path/to/key&#xA;&#xA;# run test on remote host using SSH agent private key authentication. Requires Chef InSpec 1.7.1&#xA;inspec exec test.rb -t ssh://user@hostname&#xA;&#xA;# run test on remote windows host via WinRM&#xA;inspec exec test.rb -t winrm://Administrator@windowshost --password &#39;your-password&#39;&#xA;&#xA;# run test on remote windows host via WinRM as a domain user&#xA;inspec exec test.rb -t winrm://windowshost --user &#39;UserName@domain&#39; --password &#39;your-password&#39;&#xA;&#xA;# run test on docker container&#xA;inspec exec test.rb -t docker://container_id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Built-in Compliance: Compliance no longer occurs at the end of the release cycle&lt;/li&gt; &#xA; &lt;li&gt;Targeted Tests: Chef InSpec writes tests that specifically target compliance issues&lt;/li&gt; &#xA; &lt;li&gt;Metadata: Includes the metadata required by security and compliance pros&lt;/li&gt; &#xA; &lt;li&gt;Easy Testing: Includes a command-line interface to run tests quickly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Chef InSpec requires Ruby ( &amp;gt;= 3.1 ).&lt;/p&gt; &#xA;&lt;p&gt;All currently supported versions of Chef InSpec (4.0 and later) require accepting the EULA to use. Please visit the &lt;a href=&#34;https://docs.chef.io/chef_license_accept.html&#34;&gt;license acceptance page&lt;/a&gt; on the Chef docs site for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Install as package&lt;/h3&gt; &#xA;&lt;p&gt;The Chef InSpec package is available for MacOS, RedHat, Ubuntu and Windows. Download the latest package at &lt;a href=&#34;https://www.chef.io/downloads/tools/inspec&#34;&gt;Chef InSpec Downloads&lt;/a&gt; or install Chef InSpec via script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# RedHat, Ubuntu, and macOS&#xA;curl https://omnitruck.chef.io/install.sh | sudo bash -s -- -P inspec&#xA;&#xA;# Windows&#xA;. { iwr -useb https://omnitruck.chef.io/install.ps1 } | iex; install -project inspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install it via rubygems.org&lt;/h3&gt; &#xA;&lt;p&gt;Installing Chef InSpec from source may require installing ruby build tools to manage gem dependencies. (A compiler-free variant is available with reduced functionality; use &lt;code&gt;inspec-core-bin&lt;/code&gt; and &lt;code&gt;inspec-core&lt;/code&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;To install build tools, use your package manager.&lt;/p&gt; &#xA;&lt;p&gt;For CentOS/RedHat/Fedora:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yum -y install ruby ruby-devel make gcc gcc-c++&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Ubuntu:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt-get -y install ruby ruby-dev gcc g++ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install the &lt;code&gt;inspec&lt;/code&gt; executable, which requires accepting the &lt;a href=&#34;https://docs.chef.io/chef_license_accept.html&#34;&gt;Chef License&lt;/a&gt;, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem install inspec-bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also use &lt;code&gt;inspec&lt;/code&gt; as a library, with no executable. This does not require accepting the license. To install the library as a gem, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem install inspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage via Docker&lt;/h3&gt; &#xA;&lt;p&gt;Download the image and define a function for convenience:&lt;/p&gt; &#xA;&lt;p&gt;For Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull chef/inspec&#xA;function inspec { docker run -it --rm -v $(pwd):/share chef/inspec &#34;$@&#34;; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Windows (PowerShell):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull chef/inspec&#xA;function inspec { docker run -it --rm -v &#34;$(pwd):/share&#34; chef/inspec $args; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you call &lt;code&gt;inspec&lt;/code&gt; from your shell, it automatically mounts the current directory into the Docker container. Therefore you can easily use local tests and key files. Note: Only files in the current directory and sub-directories are available within the container.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ls -1&#xA;vagrant&#xA;test.rb&#xA;&#xA;$ inspec exec test.rb -t ssh://root@192.168.64.2:11022 -i vagrant&#xA;..&#xA;&#xA;Finished in 0.04321 seconds (files took 0.54917 seconds to load)&#xA;2 examples, 0 failures&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To scan the docker containers running on the host using the containerized InSpec, we need to bind-mount the Unix socket &lt;code&gt;/var/run/docker.sock&lt;/code&gt; from the host machine to the InSpec Container.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull chef/inspec&#xA;function inspec { docker run -it --rm -v $(pwd):/share -v /var/run/docker.sock:/var/run/docker.sock chef/inspec &#34;$@&#34;; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;/var/run/docker.sock&lt;/code&gt; is the Unix socket the Docker daemon listens on by default.&lt;/p&gt; &#xA;&lt;h3&gt;Install it from source&lt;/h3&gt; &#xA;&lt;p&gt;Note that installing from OS packages from &lt;a href=&#34;https://www.chef.io/downloads/tools/inspec&#34;&gt;the download page&lt;/a&gt; is the preferred method.&lt;/p&gt; &#xA;&lt;p&gt;That requires &lt;a href=&#34;http://bundler.io/&#34;&gt;bundler&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle install&#xA;bundle exec inspec help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install it as a gem locally, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem build inspec.gemspec&#xA;gem install inspec-*.gem&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows, you need to install &lt;a href=&#34;http://rubyinstaller.org/downloads/&#34;&gt;Ruby&lt;/a&gt; with &lt;a href=&#34;https://github.com/oneclick/rubyinstaller/wiki/Development-Kit&#34;&gt;Ruby Development Kit&lt;/a&gt; to build dependencies with its native extensions.&lt;/p&gt; &#xA;&lt;h3&gt;Install via Chef Habitat&lt;/h3&gt; &#xA;&lt;p&gt;Currently, this method of installation only supports Linux. See the &lt;a href=&#34;https://www.habitat.sh/&#34;&gt;Chef Habitat site&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;Download the &lt;code&gt;hab&lt;/code&gt; binary from the &lt;a href=&#34;https://www.habitat.sh/docs/get-habitat/&#34;&gt;Chef Habitat&lt;/a&gt; site.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hab pkg install chef/inspec --binlink&#xA;&#xA;inspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run Chef InSpec&lt;/h3&gt; &#xA;&lt;p&gt;You should now be able to run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ inspec --help&#xA;Commands:&#xA;  inspec archive PATH                                       # archive a profile to tar.gz (default) ...&#xA;  inspec check PATH                                         # verify all tests at the specified PATH&#xA;  inspec automate SUBCOMMAND ...                            # Chef Automate commands&#xA;  inspec compliance SUBCOMMAND ...                          # Chef Automate commands (backwards compatible alias)&#xA;  inspec detect                                             # detect the target OS&#xA;  inspec exec PATH(S)                                       # run all test files at the specified PATH.&#xA;  inspec help [COMMAND]                                     # Describe available commands or one spe...&#xA;  inspec init TEMPLATE ...                                  # Scaffolds a new project&#xA;  inspec json PATH                                          # read all tests in PATH and generate a ...&#xA;  inspec shell                                              # open an interactive debugging shell&#xA;  inspec supermarket SUBCOMMAND ...                         # Supermarket commands&#xA;  inspec version                                            # prints the version of this tool&#xA;&#xA;Options:&#xA;  [--diagnose], [--no-diagnose]  # Show diagnostics (versions, configurations)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Examples&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Only accept requests on secure ports - This test ensures that a web server is only listening on well-secured ports.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;describe port(80) do&#xA;&amp;nbsp; it { should_not be_listening }&#xA;end&#xA;&#xA;describe port(443) do&#xA;&amp;nbsp; it { should be_listening }&#xA;&amp;nbsp; its(&#39;protocols&#39;) {should include &#39;tcp&#39;}&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Test your &lt;code&gt;kitchen.yml&lt;/code&gt; file to verify that only Vagrant is configured as the driver. The %w() formatting will pass rubocop linting and allow you to access nested mappings.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;describe yaml(&#39;.kitchen.yml&#39;) do&#xA;  its(%w(driver name)) { should eq(&#39;vagrant&#39;) }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also have a look at our examples for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chef/inspec/tree/main/examples/kitchen-chef&#34;&gt;Using Chef InSpec with Test Kitchen &amp;amp; Chef Infra&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chef/inspec/tree/main/examples/kitchen-puppet&#34;&gt;Using Chef InSpec with Test Kitchen &amp;amp; Puppet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chef/inspec/tree/main/examples/kitchen-ansible&#34;&gt;Using Chef InSpec with Test Kitchen &amp;amp; Ansible&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chef/inspec/tree/main/examples/profile&#34;&gt;Implementing an Chef InSpec profile&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Or tests: Testing for a OR b&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using describe.one, you can test for a or b. The control will be marked as passing if EITHER condition is met.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;control &#39;or-test&#39; do&#xA;  impact 1.0&#xA;  title &#39;This is a OR test&#39;&#xA;  describe.one do&#xA;    describe ssh_config do&#xA;      its(&#39;Protocol&#39;) { should eq(&#39;3&#39;) }&#xA;    end&#xA;    describe ssh_config do&#xA;      its(&#39;Protocol&#39;) { should eq(&#39;2&#39;) }&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Command Line Usage&lt;/h2&gt; &#xA;&lt;h3&gt;exec&lt;/h3&gt; &#xA;&lt;p&gt;Run tests against different targets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# run test locally&#xA;inspec exec test.rb&#xA;&#xA;# run test on remote host on SSH&#xA;inspec exec test.rb -t ssh://user@hostname&#xA;&#xA;# run test on remote windows host on WinRM&#xA;inspec exec test.rb -t winrm://Administrator@windowshost --password &#39;your-password&#39;&#xA;&#xA;# run test on docker container&#xA;inspec exec test.rb -t docker://container_id&#xA;&#xA;# run test on podman container&#xA;inspec exec test.rb -t podman://container_id --podman-url &#34;unix:///run/user/1000/podman/podman.sock&#34;&#xA;&#xA;# run with sudo&#xA;inspec exec test.rb --sudo [--sudo-password ...] [--sudo-options ...] [--sudo_command ...]&#xA;&#xA;# run in a subshell&#xA;inspec exec test.rb --shell [--shell-options ...] [--shell-command ...]&#xA;&#xA;# run a profile targeting AWS using env vars&#xA;inspec exec test.rb -t aws://&#xA;&#xA;# or store your AWS credentials in your ~/.aws/credentials profiles file&#xA;inspec exec test.rb -t aws://us-east-2/my-profile&#xA;&#xA;# run a profile targeting Azure using env vars&#xA;inspec exec test.rb -t azure://&#xA;&#xA;# or store your Azure credentials in your ~/.azure/credentials profiles file&#xA;inspec exec test.rb -t azure://subscription_id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;detect&lt;/h3&gt; &#xA;&lt;p&gt;Verify your configuration and detect&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;id=$( docker run -dti ubuntu:14.04 /bin/bash )&#xA;inspec detect -t docker://$id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which will provide you with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#34;family&#34;:&#34;ubuntu&#34;,&#34;release&#34;:&#34;14.04&#34;,&#34;arch&#34;:null}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported OS&lt;/h2&gt; &#xA;&lt;p&gt;Remote Targets&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Versions&lt;/th&gt; &#xA;   &lt;th&gt;Architectures&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AIX&lt;/td&gt; &#xA;   &lt;td&gt;6.1, 7.1, 7.2&lt;/td&gt; &#xA;   &lt;td&gt;ppc64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CentOS&lt;/td&gt; &#xA;   &lt;td&gt;6, 7, 8&lt;/td&gt; &#xA;   &lt;td&gt;i386, x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Debian&lt;/td&gt; &#xA;   &lt;td&gt;9, 10&lt;/td&gt; &#xA;   &lt;td&gt;i386, x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FreeBSD&lt;/td&gt; &#xA;   &lt;td&gt;9, 10, 11&lt;/td&gt; &#xA;   &lt;td&gt;i386, amd64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS&lt;/td&gt; &#xA;   &lt;td&gt;10.14, 10.15, 11.0&lt;/td&gt; &#xA;   &lt;td&gt;x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Oracle Enterprise Linux&lt;/td&gt; &#xA;   &lt;td&gt;6, 7, 8&lt;/td&gt; &#xA;   &lt;td&gt;i386, x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Red Hat Enterprise Linux&lt;/td&gt; &#xA;   &lt;td&gt;6, 7, 8&lt;/td&gt; &#xA;   &lt;td&gt;i386, x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Solaris&lt;/td&gt; &#xA;   &lt;td&gt;10, 11&lt;/td&gt; &#xA;   &lt;td&gt;sparc, x86&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows*&lt;/td&gt; &#xA;   &lt;td&gt;8, 8.1, 10, 2012, 2012R2, 2016, 2019&lt;/td&gt; &#xA;   &lt;td&gt;x86, x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ubuntu Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x86, x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SUSE Linux Enterprise Server&lt;/td&gt; &#xA;   &lt;td&gt;12, 15&lt;/td&gt; &#xA;   &lt;td&gt;x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Scientific Linux&lt;/td&gt; &#xA;   &lt;td&gt;6, 7&lt;/td&gt; &#xA;   &lt;td&gt;i386, x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fedora&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenSUSE&lt;/td&gt; &#xA;   &lt;td&gt;15&lt;/td&gt; &#xA;   &lt;td&gt;x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OmniOS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Gentoo Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Arch Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HP-UX&lt;/td&gt; &#xA;   &lt;td&gt;11.31&lt;/td&gt; &#xA;   &lt;td&gt;ia64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Alpine Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;*&lt;em&gt;For Windows, PowerShell 5.0 or above is required.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;In addition, runtime support is provided for:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Versions&lt;/th&gt; &#xA;   &lt;th&gt;Arch&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS&lt;/td&gt; &#xA;   &lt;td&gt;10.14+&lt;/td&gt; &#xA;   &lt;td&gt;x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Debian&lt;/td&gt; &#xA;   &lt;td&gt;9, 10&lt;/td&gt; &#xA;   &lt;td&gt;x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RHEL&lt;/td&gt; &#xA;   &lt;td&gt;6, 7, 8&lt;/td&gt; &#xA;   &lt;td&gt;x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fedora&lt;/td&gt; &#xA;   &lt;td&gt;29+&lt;/td&gt; &#xA;   &lt;td&gt;x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ubuntu&lt;/td&gt; &#xA;   &lt;td&gt;16.04+&lt;/td&gt; &#xA;   &lt;td&gt;x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;8+&lt;/td&gt; &#xA;   &lt;td&gt;x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;2012+&lt;/td&gt; &#xA;   &lt;td&gt;x86_64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.chef.io/inspec/&#34;&gt;https://docs.chef.io/inspec/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.chef.io/inspec/resources/&#34;&gt;https://docs.chef.io/inspec/resources/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/inspec/inspec/tree/main/docs-chef-io&#34;&gt;https://github.com/inspec/inspec/tree/main/docs-chef-io&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Learn Chef:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://community.chef.io/products/chef-inspec/#learn&#34;&gt;https://community.chef.io/products/chef-inspec/#learn&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Relationship to other tools (RSpec, Serverspec):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.chef.io/inspec/inspec_and_friends/&#34;&gt;https://docs.chef.io/inspec/inspec_and_friends/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Share your Profiles&lt;/h2&gt; &#xA;&lt;p&gt;You may share your Chef InSpec Profiles in the &lt;a href=&#34;https://supermarket.chef.io/tools-directory&#34;&gt;Tools &amp;amp; Plugins section&lt;/a&gt; of the &lt;a href=&#34;https://supermarket.chef.io/&#34;&gt;Chef Supermarket&lt;/a&gt;. &lt;a href=&#34;https://supermarket.chef.io/sign-in&#34;&gt;Sign in&lt;/a&gt; and &lt;a href=&#34;https://supermarket.chef.io/tools/new&#34;&gt;add the details of your profile&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You may also &lt;a href=&#34;https://supermarket.chef.io/tools?type=compliance_profile&#34;&gt;browse the Supermarket for shared Compliance Profiles&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Kudos&lt;/h2&gt; &#xA;&lt;p&gt;Chef InSpec was originally created by Christoph Hartmann (&lt;a href=&#34;https://github.com/chris-rock&#34;&gt;@chris-rock&lt;/a&gt;) and Dominik Richter (&lt;a href=&#34;https://github.com/arlimus&#34;&gt;@arlimus&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Chef InSpec is inspired by the wonderful &lt;a href=&#34;http://serverspec.org&#34;&gt;Serverspec&lt;/a&gt; project. Kudos to &lt;a href=&#34;https://github.com/mizzy&#34;&gt;mizzy&lt;/a&gt; and &lt;a href=&#34;https://github.com/mizzy/serverspec/graphs/contributors&#34;&gt;all contributors&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;The AWS resources were inspired by &lt;a href=&#34;https://github.com/arothian/inspec-aws&#34;&gt;inspec-aws&lt;/a&gt; from &lt;a href=&#34;https://github.com/arothian&#34;&gt;arothian&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork it&lt;/li&gt; &#xA; &lt;li&gt;Create your feature branch (git checkout -b my-new-feature)&lt;/li&gt; &#xA; &lt;li&gt;Commit your changes (git commit -am &#39;Add some feature&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Push to the branch (git push origin my-new-feature)&lt;/li&gt; &#xA; &lt;li&gt;Create new Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The Chef InSpec community and maintainers are very active and helpful. This project benefits greatly from this activity.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to chat with the community and maintainers directly join us in the &lt;code&gt;#inspec&lt;/code&gt; channel on the &lt;a href=&#34;http://community-slack.chef.io/&#34;&gt;Chef Community Slack&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As a reminder, all participants are expected to follow the &lt;a href=&#34;https://github.com/inspec/inspec/raw/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://community-slack.chef.io/&#34;&gt;&lt;img src=&#34;https://community-slack.chef.io/badge.svg?sanitize=true&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Testing Chef InSpec&lt;/h2&gt; &#xA;&lt;p&gt;We offer &lt;code&gt;unit&lt;/code&gt; and &lt;code&gt;integration&lt;/code&gt; tests.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;unit&lt;/code&gt; tests ensure the intended behaviour of the implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;integration&lt;/code&gt; tests run against Docker-based VMs via test-kitchen and &lt;a href=&#34;https://github.com/chef/kitchen-inspec&#34;&gt;kitchen-inspec&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Unit tests&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle exec rake test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you like to run only one test file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle exec m test/unit/resources/user_test.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also run a single test within a file by line number:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle exec m test/unit/resources/user_test.rb -l 123&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Integration tests&lt;/h3&gt; &#xA;&lt;p&gt;These tests download various virtual machines, to ensure Chef InSpec is working as expected across different operating systems.&lt;/p&gt; &#xA;&lt;p&gt;These tests require the following gems:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;test-kitchen&lt;/li&gt; &#xA; &lt;li&gt;kitchen-dokken&lt;/li&gt; &#xA; &lt;li&gt;kitchen-inspec&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These gems are provided via the &lt;code&gt;integration&lt;/code&gt; group in the project&#39;s Gemfile.&lt;/p&gt; &#xA;&lt;p&gt;In addition, these test require Docker to be available on your machine or a remote Docker machine configured via the standard Docker environment variables.&lt;/p&gt; &#xA;&lt;h4&gt;Running Integration tests&lt;/h4&gt; &#xA;&lt;p&gt;List the various test instances available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;KITCHEN_YAML=kitchen.dokken.yml bundle exec kitchen list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The platforms and test suites are configured in the &lt;code&gt;kitchen.dokken.yml&lt;/code&gt; file. Once you know which instance you wish to test, test that instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;KITCHEN_YAML=kitchen.dokken.yml bundle exec kitchen test &amp;lt;INSTANCE_NAME&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may test all instances in parallel with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;KITCHEN_YAML=kitchen.dokken.yml bundle exec kitchen test -c 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Author:&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dominik Richter (&lt;a href=&#34;mailto:drichter@chef.io&#34;&gt;drichter@chef.io&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Author:&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Christoph Hartmann (&lt;a href=&#34;mailto:chartmann@chef.io&#34;&gt;chartmann@chef.io&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Copyright:&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Copyright (c) 2015 Vulcano Security GmbH.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Copyright:&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Copyright (c) 2017-2020 Chef Software Inc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Copyright:&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Copyright (c) 2020-2023 Progress Software Corp.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;License:&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Apache License, Version 2.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;License:&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Chef End User License Agreement&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Chef InSpec is distributed under the Apache License, Version 2.0. Permission to use the software is governed by the &lt;a href=&#34;https://docs.chef.io/chef_license_accept.html&#34;&gt;Chef EULA&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://www.apache.org/licenses/LICENSE-2.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rails/sprockets</title>
    <updated>2023-08-20T01:55:45Z</updated>
    <id>tag:github.com,2023-08-20:/rails/sprockets</id>
    <link href="https://github.com/rails/sprockets" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rack-based asset packaging system&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Sprockets: Rack-based asset packaging&lt;/h1&gt; &#xA;&lt;p&gt;Sprockets is a Ruby library for compiling and serving web assets. It features declarative dependency management for JavaScript and CSS assets, as well as a powerful preprocessor pipeline that allows you to write assets in languages like CoffeeScript, Sass and SCSS.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install Sprockets from RubyGems:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ gem install sprockets&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or include it in your project&#39;s &lt;code&gt;Gemfile&lt;/code&gt; with Bundler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;sprockets&#39;, &#39;~&amp;gt; 4.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Upgrading to Sprockets 4.x&lt;/h2&gt; &#xA;&lt;p&gt;These are the major features in Sprockets 4.x&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Source Maps&lt;/li&gt; &#xA; &lt;li&gt;Manifest.js&lt;/li&gt; &#xA; &lt;li&gt;ES6 support&lt;/li&gt; &#xA; &lt;li&gt;Deprecated processor interface in 3.x is removed in 4.x&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read more about them by referencing &lt;a href=&#34;https://raw.githubusercontent.com/rails/sprockets/main/UPGRADING.md&#34;&gt;Upgrading document&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Guides&lt;/h2&gt; &#xA;&lt;p&gt;For most people interested in using Sprockets, you will want to see the README below.&lt;/p&gt; &#xA;&lt;p&gt;If you are a framework developer that is using Sprockets, see &lt;a href=&#34;https://raw.githubusercontent.com/rails/sprockets/main/guides/building_an_asset_processing_framework.md&#34;&gt;Building an Asset Processing Framework&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are a library developer who is extending the functionality of Sprockets, see &lt;a href=&#34;https://raw.githubusercontent.com/rails/sprockets/main/guides/extending_sprockets.md&#34;&gt;Extending Sprockets&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to work on Sprockets or better understand how it works read &lt;a href=&#34;https://raw.githubusercontent.com/rails/sprockets/main/guides/how_sprockets_works.md&#34;&gt;How Sprockets Works&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Behavior Overview&lt;/h2&gt; &#xA;&lt;p&gt;You can interact with Sprockets primarily through directives and file extensions. This section covers how to use each of these things, and the defaults that ship with Sprockets.&lt;/p&gt; &#xA;&lt;p&gt;Since you are likely using Sprockets through another framework (such as the &lt;a href=&#34;http://guides.rubyonrails.org/asset_pipeline.html&#34;&gt;the Rails asset pipeline&lt;/a&gt;), there will be configuration options you can toggle that will change behavior such as what directories or files get compiled. For that documentation you should see your framework&#39;s documentation.&lt;/p&gt; &#xA;&lt;h4&gt;Accessing Assets&lt;/h4&gt; &#xA;&lt;p&gt;Assets in Sprockets are always referenced by their &lt;em&gt;logical path&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The logical path is the path of the asset source file relative to its containing directory in the load path. For example, if your load path contains the directory &lt;code&gt;app/assets/javascripts&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Logical path&lt;/th&gt; &#xA;   &lt;th&gt;Source file on disk&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;application.js&lt;/td&gt; &#xA;   &lt;td&gt;app/assets/javascripts/application.js&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;models/project.js&lt;/td&gt; &#xA;   &lt;td&gt;app/assets/javascripts/models/project.js&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hello.js&lt;/td&gt; &#xA;   &lt;td&gt;app/assets/javascripts/hello.coffee&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: For assets that are compiled or transpiled, you want to specify the extension that you want, not the extension on disk. For example we specified &lt;code&gt;hello.js&lt;/code&gt; even if the file on disk is a coffeescript file, since the asset it will generate is javascript.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Directives&lt;/h3&gt; &#xA;&lt;p&gt;Directives are special comments in your asset file and the main way of interacting with processors. What kind of interactions? You can use these directives to tell Sprockets to load other files, or specify dependencies on other assets.&lt;/p&gt; &#xA;&lt;p&gt;For example, let&#39;s say you have custom JavaScript that you&#39;ve written. You put this javascript in a file called &lt;code&gt;beta.js&lt;/code&gt;. The javascript makes heavy use of jQuery, so you need to load that before your code executes. You could add a &lt;code&gt;require&lt;/code&gt; directive to the top of &lt;code&gt;beta.js&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//= require jquery&#xA;&#xA;$().ready({&#xA;  // my custom code here&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The directive processor understands comment blocks in three formats:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* Multi-line comment blocks (CSS, SCSS, JavaScript)&#xA; *= require foo&#xA; */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Single-line comment blocks (SCSS, JavaScript)&#xA;//= require foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-coffee&#34;&gt;# Single-line comment blocks (CoffeeScript)&#xA;#= require foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Directives are only processed if they come before any application code. Once you have a line that does not include a comment or whitespace then Sprockets will stop looking for directives. If you use a directive outside of the &#34;header&#34; of the document it will not do anything, and won&#39;t raise any errors.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Here is a list of the available directives:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/sprockets/main/#require&#34;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt; - Add the contents of a file to current&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/sprockets/main/#require_self&#34;&gt;&lt;code&gt;require_self&lt;/code&gt;&lt;/a&gt; - Change order of where current contents are concatenated to current&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/sprockets/main/#require_directory&#34;&gt;&lt;code&gt;require_directory&lt;/code&gt;&lt;/a&gt; - Add contents of each file in a folder to current&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/sprockets/main/#require_tree&#34;&gt;&lt;code&gt;require_tree&lt;/code&gt;&lt;/a&gt; - Add contents of all files in all directories in a path to current&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/sprockets/main/#link&#34;&gt;&lt;code&gt;link&lt;/code&gt;&lt;/a&gt; - Make target file compile and be publicly available without adding contents to current&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/sprockets/main/#link_directory&#34;&gt;&lt;code&gt;link_directory&lt;/code&gt;&lt;/a&gt; - Make target directory compile and be publicly available without adding contents to current&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/sprockets/main/#link_tree&#34;&gt;&lt;code&gt;link_tree&lt;/code&gt;&lt;/a&gt; - Make target tree compile and be publicly available without adding contents to current&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/sprockets/main/#depend_on&#34;&gt;&lt;code&gt;depend_on&lt;/code&gt;&lt;/a&gt; - Recompile current file if target has changed&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/sprockets/main/#depend_on_directory&#34;&gt;&lt;code&gt;depend_on_directory&lt;/code&gt;&lt;/a&gt; - Recompile current file if any files in target directory has changed&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rails/sprockets/main/#stub&#34;&gt;&lt;code&gt;stub&lt;/code&gt;&lt;/a&gt; - Ignore target file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can see what each of these does below.&lt;/p&gt; &#xA;&lt;h3&gt;Specifying Processors through File Extensions&lt;/h3&gt; &#xA;&lt;p&gt;Sprockets uses the filename extensions to determine what processors to run on your file and in what order. For example if you have a file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;application.scss&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then Sprockets will by default run the sass processor (which implements scss). The output file will be converted to css.&lt;/p&gt; &#xA;&lt;p&gt;You can specify multiple processors by specifying multiple file extensions. For example you can use Ruby&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/rails/sprockets/main/#invoking-ruby-with-erb&#34;&gt;ERB template language&lt;/a&gt; to embed content in your doc before running the sass processor. To accomplish this you would need to name your file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;application.scss.erb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Processors are run from right to left (tail to head), so in the above example the processor associated with &lt;code&gt;erb&lt;/code&gt; will be run before the processor associated with &lt;code&gt;scss&lt;/code&gt; extension.&lt;/p&gt; &#xA;&lt;p&gt;For a description of the processors that Sprockets has by default see the &#34;default processors&#34; section below. Other libraries may register additional processors.&lt;/p&gt; &#xA;&lt;p&gt;When &#34;asking&#34; for a compiled file, you always ask for the extension you want. For example if you&#39;re using Rails, to get the contents of &lt;code&gt;application.scss.erb&lt;/code&gt; you would use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;asset_path(&#34;application.css&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sprockets understands that &lt;code&gt;application.scss.erb&lt;/code&gt; will compile down to a &lt;code&gt;application.css&lt;/code&gt;. Ask for what you need, not what you have.&lt;/p&gt; &#xA;&lt;p&gt;If this isn&#39;t working like you expect, make sure you didn&#39;t typo an extension, and make sure the file is on a &#34;load path&#34; (see framework docs for adding new load paths).&lt;/p&gt; &#xA;&lt;h2&gt;File Order Processing&lt;/h2&gt; &#xA;&lt;p&gt;By default files are processed in alphabetical order. This behavior can impact your asset compilation when one asset needs to be loaded before another.&lt;/p&gt; &#xA;&lt;p&gt;For example if you have an &lt;code&gt;application.js&lt;/code&gt; and it loads another directory&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//= require_directory my_javascript&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The files in that directory will be loaded in alphabetical order. If the directory looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ls -1 my_javascript/&#xA;&#xA;alpha.js&#xA;beta.js&#xA;jquery.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then &lt;code&gt;alpha.js&lt;/code&gt; will be loaded before either of the other two. This can be a problem if &lt;code&gt;alpha.js&lt;/code&gt; uses jquery. For this reason it is not recommend to use &lt;code&gt;require_directory&lt;/code&gt; with files that are ordering dependent. You can either require individual files manually:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//= require jquery&#xA;//= require alpha&#xA;//= require beta&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can use index files to proxy your folders.&lt;/p&gt; &#xA;&lt;h3&gt;Index files are proxies for folders&lt;/h3&gt; &#xA;&lt;p&gt;In Sprockets index files such as &lt;code&gt;index.js&lt;/code&gt; or &lt;code&gt;index.css&lt;/code&gt; files inside of a folder will generate a file with the folder&#39;s name. So if you have a &lt;code&gt;foo/index.js&lt;/code&gt; file it will compile down to &lt;code&gt;foo.js&lt;/code&gt;. This is similar to NPM&#39;s behavior of using &lt;a href=&#34;https://nodejs.org/api/modules.html#modules_folders_as_modules&#34;&gt;folders as modules&lt;/a&gt;. It is also somewhat similar to the way that a file in &lt;code&gt;public/my_folder/index.html&lt;/code&gt; can be reached by a request to &lt;code&gt;/my_folder&lt;/code&gt;. This means that you cannot directly use an index file. For example this would not work:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= asset_path(&#34;foo/index.js&#34;) %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instead you would need to use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= asset_path(&#34;foo.js&#34;) %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Why would you want to use this behavior? It is common behavior where you might want to include an entire directory of files in a top level JavaScript. You can do this in Sprockets using &lt;code&gt;require_tree .&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//= require_tree .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This has the problem that files are required alphabetically. If your directory has &lt;code&gt;jquery-ui.js&lt;/code&gt; and &lt;code&gt;jquery.min.js&lt;/code&gt; then Sprockets will require &lt;code&gt;jquery-ui.js&lt;/code&gt; before &lt;code&gt;jquery&lt;/code&gt; is required which won&#39;t work (because jquery-ui depends on jquery). Previously the only way to get the correct ordering would be to rename your files, something like &lt;code&gt;0-jquery-ui.js&lt;/code&gt;. Instead of doing that you can use an index file.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you have an &lt;code&gt;application.js&lt;/code&gt; and want all the files in the &lt;code&gt;foo/&lt;/code&gt; folder you could do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//= require foo.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then create a file &lt;code&gt;foo/index.js&lt;/code&gt; that requires all the files in that folder in any order you want using relative references:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//= require ./foo.min.js&#xA;//= require ./foo-ui.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now in your &lt;code&gt;application.js&lt;/code&gt; will correctly load the &lt;code&gt;foo.min.js&lt;/code&gt; before &lt;code&gt;foo-ui.js&lt;/code&gt;. If you used &lt;code&gt;require_tree&lt;/code&gt; it would not work correctly.&lt;/p&gt; &#xA;&lt;h2&gt;Cache&lt;/h2&gt; &#xA;&lt;p&gt;Compiling assets is slow. It requires a lot of disk use to pull assets off of hard drives, a lot of RAM to manipulate those files in memory, and a lot of CPU for compilation operations. Because of this Sprockets has a cache to speed up asset compilation times. That&#39;s the good news. The bad news, is that sprockets has a cache and if you&#39;ve found a bug it&#39;s likely going to involve the cache.&lt;/p&gt; &#xA;&lt;p&gt;By default Sprockets uses the file system to cache assets. It makes sense that Sprockets does not want to generate assets that already exist on disk in &lt;code&gt;public/assets&lt;/code&gt;, what might not be as intuitive is that Sprockets needs to cache &#34;partial&#34; assets.&lt;/p&gt; &#xA;&lt;p&gt;For example if you have an &lt;code&gt;application.js&lt;/code&gt; and it is made up of &lt;code&gt;a.js&lt;/code&gt;, &lt;code&gt;b.js&lt;/code&gt;, all the way to &lt;code&gt;z.js&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//= require a.js&#xA;//= require b.js&#xA;# ...&#xA;//= require z.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first time this file is compiled the &lt;code&gt;application.js&lt;/code&gt; output will be written to disk, but also intermediary compiled files for &lt;code&gt;a.js&lt;/code&gt; etc. will be written to the cache directory (usually &lt;code&gt;tmp/cache/assets&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;So, if &lt;code&gt;b.js&lt;/code&gt; changes it will get recompiled. However instead of having to recompile the other files from &lt;code&gt;a.js&lt;/code&gt; to &lt;code&gt;z.js&lt;/code&gt; since they did not change, we can use the prior intermediary files stored in the cached values . If these files were expensive to generate, then this &#34;partial&#34; asset cache strategy can save a lot of time.&lt;/p&gt; &#xA;&lt;p&gt;Directives such as &lt;code&gt;require&lt;/code&gt;, &lt;code&gt;link&lt;/code&gt;, &lt;code&gt;depend_on&lt;/code&gt;, and &lt;code&gt;depend_on_directory&lt;/code&gt; tell Sprockets what assets need to be re-compiled when a file changes. Files are considered &#34;fresh&#34; based on their mtime on disk and a combination of cache keys.&lt;/p&gt; &#xA;&lt;p&gt;On Rails you can force a &#34;clean&#34; install by clearing the &lt;code&gt;public/assets&lt;/code&gt; and &lt;code&gt;tmp/cache/assets&lt;/code&gt; directories.&lt;/p&gt; &#xA;&lt;h2&gt;Default Directives&lt;/h2&gt; &#xA;&lt;p&gt;Directives take a path or a path to a file. Paths for directive can be relative to the current file, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//= require ../foo.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would load the file up one directory and named &lt;code&gt;foo.js&lt;/code&gt;. However this isn&#39;t required if &lt;code&gt;foo.js&lt;/code&gt; is on one of Sprocket&#39;s load paths. You can simply use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//= require foo.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Without any prepended dots and sprockets will search for the asset. If the asset is on a sub-path of the load path, you can specify it without using a relative path as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//= require sub/path/foo.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use an absolute path, but this is discouraged unless you know the directory structure of every machine you plan on running code on.&lt;/p&gt; &#xA;&lt;p&gt;Below is a section for each of the built in directive types supported by Sprockets.&lt;/p&gt; &#xA;&lt;h3&gt;require&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;require&lt;/code&gt; &lt;em&gt;path&lt;/em&gt; inserts the contents of the asset source file specified by &lt;em&gt;path&lt;/em&gt;. If the file is required multiple times, it will appear in the bundle only once.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;ve got an &lt;code&gt;a.js&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var a = &#34;A&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and a &lt;code&gt;b.js&lt;/code&gt;;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var b = &#34;B&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you could require both of these in an &lt;code&gt;application.js&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//= require a.js&#xA;//= require b.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which would generate one concatenated file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var a = &#34;A&#34;;&#xA;var b = &#34;B&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;require_self&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;require_self&lt;/code&gt; tells Sprockets to insert the body of the current source file before any subsequent &lt;code&gt;require&lt;/code&gt; directives.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;ve got an &lt;code&gt;a.js&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var a = &#34;A&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And an &lt;code&gt;application.js&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//= require_self&#xA;//= require &#39;a.js&#39;&#xA;&#xA;var app_name = &#34;Sprockets&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then this will take the contents of &lt;code&gt;application.js&lt;/code&gt; (that come after the last require) and put them at the beginning of the file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var app_name = &#34;Sprockets&#34;;&#xA;var a = &#34;A&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;require_directory&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;require_directory&lt;/code&gt; &lt;em&gt;path&lt;/em&gt; requires all source files of the same format in the directory specified by &lt;em&gt;path&lt;/em&gt;. Files are required in alphabetical order.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If we&#39;ve got a directory called &lt;code&gt;alphabet&lt;/code&gt; with an &lt;code&gt;a.js&lt;/code&gt; and &lt;code&gt;b.js&lt;/code&gt; files like before, then our &lt;code&gt;application.js&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//= require_directory alphabet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Would produce:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var a = &#34;A&#34;;&#xA;var b = &#34;B&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also see &lt;a href=&#34;https://raw.githubusercontent.com/rails/sprockets/main/#index-files-are-proxies-for-folders&#34;&gt;Index files are proxies for folders&lt;/a&gt; for another method of organizing folders that will give you more control.&lt;/p&gt; &#xA;&lt;h3&gt;require_tree&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;require_tree&lt;/code&gt; &lt;em&gt;path&lt;/em&gt; works like &lt;code&gt;require_directory&lt;/code&gt;, but operates recursively to require all files in all subdirectories of the directory specified by &lt;em&gt;path&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;link&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;link&lt;/code&gt; &lt;em&gt;path&lt;/em&gt; declares a dependency on the target &lt;em&gt;path&lt;/em&gt; and adds it to a list of subdependencies to be compiled when the asset is written out to disk.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;ve got a &lt;code&gt;manifest.js&lt;/code&gt; file and you want to specify that a &lt;code&gt;admin.js&lt;/code&gt; source file should be generated and made available to the public you can link it by including this in the &lt;code&gt;manifest.js&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;//= link admin.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The argument to &lt;code&gt;link&lt;/code&gt; is a &lt;em&gt;logical path&lt;/em&gt;, that is it will be resolved according to the configured asset load paths. See &lt;a href=&#34;https://raw.githubusercontent.com/rails/sprockets/main/#accessing-assets&#34;&gt;Accessing Assets&lt;/a&gt; above. A path relative to the current file won&#39;t work, it must be a logical path.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Caution&lt;/strong&gt;: the &#34;link&#34; directive should always have an explicit extension on the end.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;link&lt;/code&gt; can also be used to include manifest files from mounted Rails engines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;//= link my_engine_manifest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would find a manifest file at &lt;code&gt;my_engine/app/assets/config/my_engine_manifest.js&lt;/code&gt; and include its directives.&lt;/p&gt; &#xA;&lt;h3&gt;link_directory&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;link_directory&lt;/code&gt; &lt;em&gt;path&lt;/em&gt; links all the files inside the directory specified by the &lt;em&gt;path&lt;/em&gt;. By &#34;link&#34;, we mean they are specified as compilation targets to be written out to disk, and made available to be served to user-agents.&lt;/p&gt; &#xA;&lt;p&gt;Files in subdirectories will not be linked (Compare to &lt;a href=&#34;https://raw.githubusercontent.com/rails/sprockets/main/#link_tree&#34;&gt;link_tree&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;path&lt;/em&gt; argument to &lt;code&gt;link_directory&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; a logical path (it does not use the asset load paths), but is a path relative to the file the &lt;code&gt;link_directory&lt;/code&gt; directive is found in, and can use &lt;code&gt;..&lt;/code&gt; to . For instance, you might want:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//= link_directory ../stylesheets&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;link_directory&lt;/code&gt; can take an optional second argument with an extension or content-type, with the two arguments separated by a space:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//= link_directory ../stylesheets text/css&#xA;//= link_directory ../more_stylesheets .css&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will limit the matching files to link to only files recognized as that type. An extension is just a shortcut for the type referenced, it does not need to match the source file exactly, but instead identifies the content-type the source file must be recognized as.&lt;/p&gt; &#xA;&lt;h3&gt;link_tree&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;link_tree&lt;/code&gt; &lt;em&gt;path&lt;/em&gt; works like &lt;a href=&#34;https://raw.githubusercontent.com/rails/sprockets/main/#link_directory&#34;&gt;link_directory&lt;/a&gt;, but operates recursively to link all files in all subdirectories of the directory specified by &lt;em&gt;path&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//= link_tree ./path/to/folder&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Like &lt;code&gt;link_directory&lt;/code&gt;, the argument is path relative to the current file, it is &lt;em&gt;not&lt;/em&gt; a &#39;logical path&#39; tresolved against load paths.&lt;/p&gt; &#xA;&lt;p&gt;As with &lt;code&gt;link_directory&lt;/code&gt;, you can also specify a second argument -- separated by a space -- so any extra files not matching the content-type specified will be ignored:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//= link_tree ./path/to/folder text/javascript&#xA;//= link_tree ./path/to/other_folder .js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;depend_on&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;depend_on&lt;/code&gt; &lt;em&gt;path&lt;/em&gt; declares a dependency on the given &lt;em&gt;path&lt;/em&gt; without including it in the bundle. This is useful when you need to expire an asset&#39;s cache in response to a change in another file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have a file such as &lt;code&gt;bar.data&lt;/code&gt; and you&#39;re using data from that file in another file, then you need to tell sprockets that it needs to re-compile the file if &lt;code&gt;bar.data&lt;/code&gt; changes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//= depend_on &#34;bar.data&#34;&#xA;&#xA;var bar = &#39;&amp;lt;%= File.read(&#34;bar.data&#34;) %&amp;gt;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To depend on an entire directory containing multiple files, use &lt;code&gt;depend_on_directory&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;depend_on_asset&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;depend_on_asset&lt;/code&gt; &lt;em&gt;path&lt;/em&gt; works like &lt;code&gt;depend_on&lt;/code&gt;, but operates recursively reading the file and following the directives found. This is automatically implied if you use &lt;code&gt;link&lt;/code&gt;, so consider if it just makes sense using &lt;code&gt;link&lt;/code&gt; instead of &lt;code&gt;depend_on_asset&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;depend_on_directory&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;depend_on_directory&lt;/code&gt; &lt;em&gt;path&lt;/em&gt; declares all files in the given &lt;em&gt;path&lt;/em&gt; without including them in the bundle. This is useful when you need to expire an asset&#39;s cache in response to a change in multiple files in a single directory.&lt;/p&gt; &#xA;&lt;p&gt;All paths are relative to your declaration and must begin with &lt;code&gt;./&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Also, your must include these directories in your &lt;a href=&#34;https://raw.githubusercontent.com/rails/sprockets/main/guides/building_an_asset_processing_framework.md#the-load-path&#34;&gt;load path&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If we&#39;ve got a directory called &lt;code&gt;data&lt;/code&gt; with files &lt;code&gt;a.data&lt;/code&gt; and &lt;code&gt;b.data&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// ./data/a.data&#xA;A&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;// ./data/b.data&#xA;B&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;// ./file.js.erb&#xA;//= depend_on_directory ./data&#xA;var a = &#39;&amp;lt;% File.read(&#39;data/a.data&#39;) %&amp;gt;&#39;&#xA;var b = &#39;&amp;lt;% File.read(&#39;data/b.data&#39;) %&amp;gt;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Would produce:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var a = &#34;A&#34;;&#xA;var b = &#34;B&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also see &lt;a href=&#34;https://raw.githubusercontent.com/rails/sprockets/main/#index-files-are-proxies-for-folders&#34;&gt;Index files are proxies for folders&lt;/a&gt; for another method of organizing folders that will give you more control.&lt;/p&gt; &#xA;&lt;h3&gt;stub&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;stub&lt;/code&gt; &lt;em&gt;path&lt;/em&gt; excludes that asset and its dependencies from the asset bundle. The &lt;em&gt;path&lt;/em&gt; must be a valid asset and may or may not already be part of the bundle. &lt;code&gt;stub&lt;/code&gt; should only be used at the top level bundle, not within any subdependencies.&lt;/p&gt; &#xA;&lt;h3&gt;Invoking Ruby with ERB&lt;/h3&gt; &#xA;&lt;p&gt;Sprockets provides an ERB engine for preprocessing assets using embedded Ruby code. Append &lt;code&gt;.erb&lt;/code&gt; to a CSS or JavaScript asset&#39;s filename to enable the ERB engine.&lt;/p&gt; &#xA;&lt;p&gt;For example if you have an &lt;code&gt;app/application/javascripts/app_name.js.erb&lt;/code&gt; you could have this in the template&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var app_name = &#34;&amp;lt;%= ENV[&#39;APP_NAME&#39;] %&amp;gt;&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generated files are cached. If you&#39;re using an &lt;code&gt;ENV&lt;/code&gt; var then when you change then ENV var the asset will be forced to recompile. This behavior is only true for environment variables, if you are pulling a value from somewhere else, such as a database, you must manually invalidate the cache to see the change.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using Rails, there are helpers you can use such as &lt;code&gt;asset_url&lt;/code&gt; that will cause a recompile if the value changes.&lt;/p&gt; &#xA;&lt;p&gt;For example if you have this in your &lt;code&gt;application.css&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.logo {&#xA;  background: url(&amp;lt;%= asset_url(&#34;logo.png&#34;) %&amp;gt;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you modify the &lt;code&gt;logo.png&lt;/code&gt; on disk, it will force &lt;code&gt;application.css&lt;/code&gt; to be recompiled so that the fingerprint will be correct in the generated asset.&lt;/p&gt; &#xA;&lt;p&gt;You can manually make sprockets depend on any other file that is generated by sprockets by using the &lt;code&gt;depend_on&lt;/code&gt; or &lt;code&gt;depend_on_directory&lt;/code&gt; directive. Rails implements the above feature by auto calling &lt;code&gt;depend_on&lt;/code&gt; on the original asset when the &lt;code&gt;asset_url&lt;/code&gt; is used inside of an asset.&lt;/p&gt; &#xA;&lt;h3&gt;Styling with Sass and SCSS&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://sass-lang.com/&#34;&gt;Sass&lt;/a&gt; is a language that compiles to CSS and adds features like nested rules, variables, mixins and selector inheritance.&lt;/p&gt; &#xA;&lt;p&gt;If the &lt;code&gt;sass&lt;/code&gt; gem is available to your application, you can use Sass to write CSS assets in Sprockets.&lt;/p&gt; &#xA;&lt;p&gt;Sprockets supports both Sass syntaxes. For the original whitespace-sensitive syntax, use the extension &lt;code&gt;.sass&lt;/code&gt;. For the new SCSS syntax, use the extension &lt;code&gt;.scss&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In Rails if you have &lt;code&gt;app/application/stylesheets/foo.scss&lt;/code&gt; it can be referenced with &lt;code&gt;&amp;lt;%= asset_path(&#34;foo.css&#34;) %&amp;gt;&lt;/code&gt;. When referencing an asset in Rails, always specify the extension you want. Sprockets will convert &lt;code&gt;foo.scss&lt;/code&gt; to &lt;code&gt;foo.css&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Scripting with CoffeeScript&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://jashkenas.github.io/coffeescript/&#34;&gt;CoffeeScript&lt;/a&gt; is a language that compiles to the &#34;good parts&#34; of JavaScript, featuring a cleaner syntax with array comprehensions, classes, and function binding.&lt;/p&gt; &#xA;&lt;p&gt;If the &lt;code&gt;coffee-script&lt;/code&gt; gem is available to your application, you can use CoffeeScript to write JavaScript assets in Sprockets. Note that the CoffeeScript compiler is written in JavaScript, and you will need an &lt;a href=&#34;https://github.com/rails/execjs&#34;&gt;ExecJS&lt;/a&gt;-supported runtime on your system to invoke it.&lt;/p&gt; &#xA;&lt;p&gt;To write JavaScript assets with CoffeeScript, use the extension &lt;code&gt;.coffee&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In Rails if you have &lt;code&gt;app/application/javascripts/foo.coffee&lt;/code&gt; it can be referenced with &lt;code&gt;&amp;lt;%= asset_path(&#34;foo.js&#34;) %&amp;gt;&lt;/code&gt;. When referencing an asset in Rails, always specify the extension you want. Sprockets will convert &lt;code&gt;foo.coffee&lt;/code&gt; to &lt;code&gt;foo.js&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;ES6 Support&lt;/h2&gt; &#xA;&lt;p&gt;Sprockets 4 ships with a Babel processor. This allows you to transpile ECMAScript6 to JavaScript just like you would transpile CoffeeScript to JavaScript. To use this, modify your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;babel-transpiler&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any asset with the extension &lt;code&gt;es6&lt;/code&gt; will be treated as an ES6 file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-es6&#34;&gt;// app/assets/javascript/application.es6&#xA;&#xA;var square = (n) =&amp;gt; n * n&#xA;&#xA;console.log(square);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start a Rails server in development mode and visit &lt;code&gt;localhost:3000/assets/application.js&lt;/code&gt;, and this asset will be transpiled to JavaScript:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var square = function square(n) {&#xA;  return n * n;&#xA;};&#xA;&#xA;console.log(square);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JavaScript Templating with EJS and Eco&lt;/h3&gt; &#xA;&lt;p&gt;Sprockets supports &lt;em&gt;JavaScript templates&lt;/em&gt; for client-side rendering of strings or markup. JavaScript templates have the special format extension &lt;code&gt;.jst&lt;/code&gt; and are compiled to JavaScript functions.&lt;/p&gt; &#xA;&lt;p&gt;When loaded, a JavaScript template function can be accessed by its logical path as a property on the global &lt;code&gt;JST&lt;/code&gt; object. Invoke a template function to render the template as a string. The resulting string can then be inserted into the DOM.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;!-- templates/hello.jst.ejs --&amp;gt;&#xA;&amp;lt;div&amp;gt;Hello, &amp;lt;span&amp;gt;&amp;lt;%= name %&amp;gt;&amp;lt;/span&amp;gt;!&amp;lt;/div&amp;gt;&#xA;&#xA;// application.js&#xA;//= require templates/hello&#xA;$(&#34;#hello&#34;).html(JST[&#34;templates/hello&#34;]({ name: &#34;Sam&#34; }));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sprockets supports two JavaScript template languages: &lt;a href=&#34;https://github.com/sstephenson/ruby-ejs&#34;&gt;EJS&lt;/a&gt;, for embedded JavaScript, and &lt;a href=&#34;https://github.com/sstephenson/ruby-eco&#34;&gt;Eco&lt;/a&gt;, for embedded CoffeeScript. Both languages use the familiar &lt;code&gt;&amp;lt;% … %&amp;gt;&lt;/code&gt; syntax for embedding logic in templates.&lt;/p&gt; &#xA;&lt;p&gt;If the &lt;code&gt;ejs&lt;/code&gt; gem is available to your application, you can use EJS templates in Sprockets. EJS templates have the extension &lt;code&gt;.jst.ejs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If the &lt;code&gt;eco&lt;/code&gt; gem is available to your application, you can use &lt;a href=&#34;https://github.com/sstephenson/eco&#34;&gt;Eco templates&lt;/a&gt; in Sprockets. Eco templates have the extension &lt;code&gt;.jst.eco&lt;/code&gt;. Note that the &lt;code&gt;eco&lt;/code&gt; gem depends on the CoffeeScript compiler, so the same caveats apply as outlined above for the CoffeeScript engine.&lt;/p&gt; &#xA;&lt;h3&gt;Minifying Assets&lt;/h3&gt; &#xA;&lt;p&gt;Several JavaScript and CSS minifiers are available through shorthand.&lt;/p&gt; &#xA;&lt;p&gt;In Rails you will specify them with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.assets.js_compressor  = :terser&#xA;config.assets.css_compressor = :scss&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re not using Rails, configure this directly on the &#34;environment&#34;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;environment.js_compressor  = :terser&#xA;environment.css_compressor = :scss&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using Sprockets directly with a Rack app, don&#39;t forget to add the &lt;code&gt;terser&lt;/code&gt; and &lt;code&gt;sass&lt;/code&gt; gems to your Gemfile when using above options.&lt;/p&gt; &#xA;&lt;h3&gt;Gzip&lt;/h3&gt; &#xA;&lt;p&gt;By default when Sprockets generates a compiled asset file it will also produce a gzipped copy of that file. Sprockets only gzips non-binary files such as CSS, javascript, and SVG files.&lt;/p&gt; &#xA;&lt;p&gt;For example if Sprockets is generating&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;application-12345.css&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then it will also generate a compressed copy in&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;application-12345.css.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This behavior can be disabled, refer to your framework specific documentation.&lt;/p&gt; &#xA;&lt;h3&gt;Serving Assets&lt;/h3&gt; &#xA;&lt;p&gt;In production you should generate your assets to a directory on disk and serve them either via Nginx or a feature like Rail&#39;s &lt;code&gt;config.public_file_server.enabled = true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On Rails you can generate assets by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-term&#34;&gt;$ RAILS_ENV=production rake assets:precompile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In development Rails will serve assets from &lt;code&gt;Sprockets::Server&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to Sprockets&lt;/h2&gt; &#xA;&lt;p&gt;Sprockets is the work of hundreds of contributors. You&#39;re encouraged to submit pull requests, propose features and discuss issues.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/rails/sprockets/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Version History&lt;/h3&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://github.com/rails/sprockets/tree/master/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Sprockets is released under the &lt;a href=&#34;https://raw.githubusercontent.com/rails/sprockets/main/MIT-LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>