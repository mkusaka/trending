<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-16T02:03:24Z</updated>
  <subtitle>Weekly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>git/git-scm.com</title>
    <updated>2023-07-16T02:03:24Z</updated>
    <id>tag:github.com,2023-07-16:/git/git-scm.com</id>
    <link href="https://github.com/git/git-scm.com" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The git-scm.com website. Note that this repository is only for the website; issues with git itself should go to https://git-scm.com/community.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Git Homepage &lt;a href=&#34;https://github.com/git/git-scm.com/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/git/git-scm.com/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codetriage.com/git/git-scm.com&#34;&gt;&lt;img src=&#34;https://www.codetriage.com/git/git-scm.com/badges/users.svg?sanitize=true&#34; alt=&#34;Help Contribute to Open Source&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This is the web application for the &lt;a href=&#34;https://git-scm.com&#34;&gt;git-scm.com&lt;/a&gt; site. It is meant to be the first place a person new to Git will land and download or learn about the Git SCM system.&lt;/p&gt; &#xA;&lt;p&gt;This app is written in Ruby on Rails and deployed on Heroku.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll need a Ruby environment to run Rails. First do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rvm use .&#xA;$ bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you need to create the database structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rake db:migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively you can run the script at &lt;code&gt;script/bootstrap&lt;/code&gt; which will set up Ruby dependencies and the local SQLite database.&lt;/p&gt; &#xA;&lt;p&gt;Now you&#39;ll want to populate the man pages. You can do so from a local Git source clone like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ GIT_REPO=../git/.git rake local_index&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will populate the man pages for all Git versions. You can also populate them only for a specific Git version (faster):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ version=v2.23.0&#xA;$ GIT_REPO=../git/.git REBUILD_DOC=$version rake local_index&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can populate the man pages from GitHub (much slower) like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ export GITHUB_API_TOKEN=github_personal_auth_token&#xA;$ rake preindex  # all versions&#xA;$ REBUILD_DOC=$version rake preindex  # specific version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similarly, you can also populate the localized man pages. From a local clone of &lt;a href=&#34;https://github.com/jnavila/git-html-l10n&#34;&gt;https://github.com/jnavila/git-html-l10n&lt;/a&gt; :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ GIT_REPO=../git-html-l10n/.git rake local_index_l10n  # all versions&#xA;$ GIT_REPO=../git-html-l10n/.git REBUILD_DOC=$version rake local_index_l10n  # specific version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can do it from GitHub (much slower) like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ export GITHUB_API_TOKEN=github_personal_auth_token&#xA;$ rake preindex_l10n  # all versions&#xA;$ REBUILD_DOC=$version rake preindex_l10n  # specific version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you need to get the latest downloads for the downloads pages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rake downloads&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you&#39;ll probably want some book data. You&#39;ll have to have access to the &lt;a href=&#34;https://github.com/progit/progit2&#34;&gt;Pro Git project on GitHub&lt;/a&gt; through the API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ export GITHUB_API_TOKEN=github_personal_auth_token&#xA;$ rake remote_genbook2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have 2FA enabled, you&#39;ll need to create a &lt;a href=&#34;https://help.github.com/articles/creating-an-access-token-for-command-line-use/&#34;&gt;Personal Access Token&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;That will generate the book content from the Asciidoc files fetched from the online repository and post it to the Rails server database. You can select a specific language by indicating it in the &lt;code&gt;GENLANG&lt;/code&gt; environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ GENLANG=zh rake remote_genbook2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can get the book content from a repository on your computer by specifying the path in the &lt;code&gt;GENPATH&lt;/code&gt; environment variable to the &lt;code&gt;local_genbook2&lt;/code&gt; target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ GENLANG=fr GENPATH=../progit2-fr rake local_genbook2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can run the Rails site to take a look.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./script/server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The site should be running on &lt;a href=&#34;http://localhost:5000&#34;&gt;http://localhost:5000&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;To run the tests for this project, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the website for testing purposes, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./script/server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you wish to contribute to this website, please &lt;a href=&#34;https://github.com/git/git-scm.com&#34;&gt;fork it on GitHub&lt;/a&gt;, push your change to a named branch, then send a pull request. If it is a big feature, you might want to &lt;a href=&#34;https://github.com/git/git-scm.com/issues/new&#34;&gt;start an issue&lt;/a&gt; first to make sure it&#39;s something that will be accepted. If it involves code, please also write tests for it.&lt;/p&gt; &#xA;&lt;h2&gt;Adding new GUI&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://git-scm.com/downloads/guis&#34;&gt;list of GUI clients&lt;/a&gt; has been constructed by the community for a long time. If you want to add another tool you&#39;ll need to follow a few steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the GUI client details at the YAML file: &lt;a href=&#34;https://github.com/git/git-scm.com/raw/main/resources/guis.yml&#34;&gt;https://github.com/git/git-scm.com/blob/main/resources/guis.yml&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;The fields &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;price&lt;/code&gt;, &lt;code&gt;license&lt;/code&gt; should be very straightforward to fill.&lt;/li&gt; &#xA;   &lt;li&gt;The field &lt;code&gt;image_tag&lt;/code&gt; corresponds to the filename of the image of the tool (without path, just the filename).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;platforms&lt;/code&gt; is a list of at least 1 platform in which the tool is supported. The possibilities are: &lt;code&gt;Windows&lt;/code&gt;, &lt;code&gt;Mac&lt;/code&gt;, &lt;code&gt;Linux&lt;/code&gt;, &lt;code&gt;Android&lt;/code&gt;, and &lt;code&gt;iOS&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;order&lt;/code&gt; can be filled with the biggest number already existing, plus 1 (Adding to the bottom - this will be covered in the following steps)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;trend_name&lt;/code&gt; is an optional field that can be used for helping sorting the clients (also covered in the next steps)&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the image to &lt;code&gt;public/images/guis/&amp;lt;GUI_CLIENT_NAME&amp;gt;@2x.png&lt;/code&gt; and &lt;code&gt;public/images/guis/&amp;lt;GUI_CLIENT_NAME&amp;gt;.png&lt;/code&gt; making sure the aspect ratio matches a 588:332 image.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sort the tools&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;From the root of the repository, run: &lt;code&gt;$ ./script/sort-gui&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;A list of google trends url&#39;s will be displayed at the bottom if everything went well.&lt;/li&gt; &#xA;   &lt;li&gt;Open each and check if the clients are sorted.&lt;/li&gt; &#xA;   &lt;li&gt;If the clients are not sorted, just fix the order (by changing the &lt;code&gt;order&lt;/code&gt; field), bubbling the more &#39;known&#39; clients all the way up.&lt;/li&gt; &#xA;   &lt;li&gt;Repeat until the order stabilizes.&lt;/li&gt; &#xA;   &lt;li&gt;It is possible that your new GUI client doesn&#39;t have good results in Google Trends. You can try similar terms (for instance, adding the git keyword sometime helps). If you find any similar term that returns better results, add the &lt;code&gt;trend_name&lt;/code&gt; field to the GUI client. Have a look at the &lt;code&gt;Tower&lt;/code&gt; and &lt;code&gt;Cycligent Git Tool&lt;/code&gt; tools example.&lt;/li&gt; &#xA;   &lt;li&gt;The script makes some basic verifications. If there was some problem, it should be easily visible in the output&lt;/li&gt; &#xA;   &lt;li&gt;If you have more than 1 tool with the same name, a warning will appear: &lt;code&gt;======= WARNING: THERE ARE DUPLICATED GUIS =======&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;If you are using the same &lt;code&gt;order&lt;/code&gt; value for more than 1 tool, a warning will appear: &lt;code&gt;======= WARNING: THERE ARE DUPLICATED ORDERS (value: &amp;lt;VALUE&amp;gt;) =======&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;While setting the repo if you find any error, check if it&#39;s a known issue and the corresponding solution bellow.&lt;/p&gt; &#xA;&lt;h3&gt;An error occurred while installing pg (1.2.3), and Bundler cannot continue.&lt;/h3&gt; &#xA;&lt;p&gt;If you got this error when running &lt;code&gt;bundle install&lt;/code&gt;, then you need to install postgresql on your OS. Check &lt;a href=&#34;https://stackoverflow.com/questions/52339221/rails-gem-error-while-installing-pg-1-1-3-and-bundler-cannot-continue&#34;&gt;this stackoverflow topic&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The source code for the site is licensed under the MIT license, which you can find in the MIT-LICENSE.txt file.&lt;/p&gt; &#xA;&lt;p&gt;All graphical assets are licensed under the &lt;a href=&#34;https://creativecommons.org/licenses/by/3.0/&#34;&gt;Creative Commons Attribution 3.0 Unported License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Arachni/arachni</title>
    <updated>2023-07-16T02:03:24Z</updated>
    <id>tag:github.com,2023-07-16:/Arachni/arachni</id>
    <link href="https://github.com/Arachni/arachni" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Web Application Security Scanner Framework&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Notice&lt;/h1&gt; &#xA;&lt;p&gt;Arachni is heading towards obsolescence, try out its next-gen successor &lt;a href=&#34;https://www.ecsypno.com/&#34;&gt;Ecsypno&lt;/a&gt; &lt;a href=&#34;https://ecsypno.com/pages/codename-scnr&#34;&gt;Codename SCNR&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h1&gt;Arachni - Web Application Security Scanner Framework&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;td&gt;1.6.1.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Homepage&lt;/th&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.arachni-scanner.com&#34;&gt;http://arachni-scanner.com&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Blog&lt;/th&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.arachni-scanner.com/blog&#34;&gt;http://arachni-scanner.com/blog&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Github&lt;/th&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Arachni/arachni&#34;&gt;http://github.com/Arachni/arachni&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt;&lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Documentation&lt;/th&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Arachni/arachni/wiki&#34;&gt;https://github.com/Arachni/arachni/wiki&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Code Documentation&lt;/th&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://rubydoc.info/github/Arachni/arachni&#34;&gt;http://rubydoc.info/github/Arachni/arachni&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Support&lt;/th&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://support.arachni-scanner.com&#34;&gt;http://support.arachni-scanner.com&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Author&lt;/th&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;mailto:tasos.laskos@arachni-scanner.com&#34;&gt;Tasos Laskos&lt;/a&gt; (&lt;a href=&#34;http://twitter.com/Zap0tek&#34;&gt;@Zap0tek&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Twitter&lt;/th&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://twitter.com/ArachniScanner&#34;&gt;@ArachniScanner&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Copyright&lt;/th&gt; &#xA;   &lt;td&gt;2010-2022 &lt;a href=&#34;http://www.ecsypno.com&#34;&gt;Ecsypno&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;License&lt;/th&gt; &#xA;   &lt;td&gt;Arachni Public Source License v1.0 - (see LICENSE file)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://www.arachni-scanner.com/large-logo.png&#34; alt=&#34;Arachni logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Synopsis&lt;/h2&gt; &#xA;&lt;p&gt;Arachni is a feature-full, modular, high-performance Ruby framework aimed towards helping penetration testers and administrators evaluate the security of web applications.&lt;/p&gt; &#xA;&lt;p&gt;It is smart, it trains itself by monitoring and learning from the web application&#39;s behavior during the scan process and is able to perform meta-analysis using a number of factors in order to correctly assess the trustworthiness of results and intelligently identify (or avoid) false-positives.&lt;/p&gt; &#xA;&lt;p&gt;Unlike other scanners, it takes into account the dynamic nature of web applications, can detect changes caused while travelling through the paths of a web application’s cyclomatic complexity and is able to adjust itself accordingly. This way, attack/input vectors that would otherwise be undetectable by non-humans can be handled seamlessly.&lt;/p&gt; &#xA;&lt;p&gt;Moreover, due to its integrated browser environment, it can also audit and inspect client-side code, as well as support highly complicated web applications which make heavy use of technologies such as JavaScript, HTML5, DOM manipulation and AJAX.&lt;/p&gt; &#xA;&lt;p&gt;Finally, it is versatile enough to cover a great deal of use cases, ranging from a simple command line scanner utility, to a global high performance grid of scanners, to a Ruby library allowing for scripted audits, to a multi-user multi-scan web collaboration platform.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Despite the fact that Arachni is mostly targeted towards web application security, it can easily be used for general purpose scraping, data-mining, etc. with the addition of custom components.&lt;/p&gt; &#xA;&lt;h3&gt;Arachni offers:&lt;/h3&gt; &#xA;&lt;h4&gt;A stable, efficient, high-performance framework&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;Check&lt;/code&gt;, &lt;code&gt;report&lt;/code&gt; and &lt;code&gt;plugin&lt;/code&gt; developers are allowed to easily and quickly create and deploy their components with the minimum amount of restrictions imposed upon them, while provided with the necessary infrastructure to accomplish their goals.&lt;/p&gt; &#xA;&lt;p&gt;Furthermore, they are encouraged to take full advantage of the Ruby language under a unified framework that will increase their productivity without stifling them or complicating their tasks.&lt;/p&gt; &#xA;&lt;p&gt;Moreover, that same framework can be utilized as any other Ruby library and lead to the development of brand new scanners or help you create highly customized scan/audit scenarios and/or scripted scans.&lt;/p&gt; &#xA;&lt;h4&gt;Simplicity&lt;/h4&gt; &#xA;&lt;p&gt;Although some parts of the Framework are fairly complex you will never have to deal them directly. From a user’s or a component developer’s point of view everything appears simple and straight-forward all the while providing power, performance and flexibility.&lt;/p&gt; &#xA;&lt;p&gt;From the simple command-line utility scanner to the intuitive and user-friendly Web interface and collaboration platform, Arachni follows the principle of least surprise and provides you with plenty of feedback and guidance.&lt;/p&gt; &#xA;&lt;h4&gt;In simple terms&lt;/h4&gt; &#xA;&lt;p&gt;Arachni is designed to automatically detect security issues in web applications. All it expects is the URL of the target website and after a while it will present you with its findings.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;General&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cookie-jar/cookie-string support.&lt;/li&gt; &#xA; &lt;li&gt;Custom header support.&lt;/li&gt; &#xA; &lt;li&gt;SSL support with fine-grained options.&lt;/li&gt; &#xA; &lt;li&gt;User Agent spoofing.&lt;/li&gt; &#xA; &lt;li&gt;Proxy support for SOCKS4, SOCKS4A, SOCKS5, HTTP/1.1 and HTTP/1.0.&lt;/li&gt; &#xA; &lt;li&gt;Proxy authentication.&lt;/li&gt; &#xA; &lt;li&gt;Site authentication (SSL-based, form-based, Cookie-Jar, Basic-Digest, NTLMv1, Kerberos and others).&lt;/li&gt; &#xA; &lt;li&gt;Automatic log-out detection and re-login during the scan (when the initial login was performed via the &lt;code&gt;autologin&lt;/code&gt;, &lt;code&gt;login_script&lt;/code&gt; or &lt;code&gt;proxy&lt;/code&gt; plugins).&lt;/li&gt; &#xA; &lt;li&gt;Custom 404 page detection.&lt;/li&gt; &#xA; &lt;li&gt;UI abstraction: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Arachni/arachni/wiki/Executables&#34;&gt;Command-line Interface&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Arachni/arachni-ui-web&#34;&gt;Web User Interface&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Pause/resume functionality.&lt;/li&gt; &#xA; &lt;li&gt;Hibernation support -- Suspend to and restore from disk.&lt;/li&gt; &#xA; &lt;li&gt;High performance asynchronous HTTP requests. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;With adjustable concurrency.&lt;/li&gt; &#xA;   &lt;li&gt;With the ability to auto-detect server health and adjust its concurrency automatically.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Support for custom default input values, using pairs of patterns (to be matched against input names) and values to be used to fill in matching inputs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Integrated browser environment&lt;/h3&gt; &#xA;&lt;p&gt;Arachni includes an integrated, real browser environment in order to provide sufficient coverage to modern web applications which make use of technologies such as HTML5, JavaScript, DOM manipulation, AJAX, etc.&lt;/p&gt; &#xA;&lt;p&gt;In addition to the monitoring of the vanilla DOM and JavaScript environments, Arachni&#39;s browsers also hook into popular frameworks to make the logged data easier to digest:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://jquery.com/&#34;&gt;JQuery&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://angularjs.org/&#34;&gt;AngularJS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;More to come...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In essence, this turns Arachni into a DOM and JavaScript debugger, allowing it to monitor DOM events and JavaScript data and execution flows. As a result, not only can the system trigger and identify DOM-based issues, but it will accompany them with a great deal of information regarding the state of the page at the time.&lt;/p&gt; &#xA;&lt;p&gt;Relevant information include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Page DOM, as HTML code. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;With a list of DOM transitions required to restore the state of the page to the one at the time it was logged.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Original DOM (i.e. prior to the action that caused the page to be logged), as HTML code. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;With a list of DOM transitions.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Data-flow sinks -- Each sink is a JS method which received a tainted argument. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Parent object of the method (ex.: &lt;code&gt;DOMWindow&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;Method signature (ex.: &lt;code&gt;decodeURIComponent()&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;Arguments list. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;With the identified taint located recursively in the included objects.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Method source code.&lt;/li&gt; &#xA;   &lt;li&gt;JS stacktrace.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Execution flow sinks -- Each sink is a successfully executed JS payload, as injected by the security checks. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Includes a JS stacktrace.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;JavaScript stack-traces include: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Method names.&lt;/li&gt; &#xA;   &lt;li&gt;Method locations.&lt;/li&gt; &#xA;   &lt;li&gt;Method source codes.&lt;/li&gt; &#xA;   &lt;li&gt;Argument lists.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In essence, you have access to roughly the same information that your favorite debugger (for example, FireBug) would provide, as if you had set a breakpoint to take place at the right time for identifying an issue.&lt;/p&gt; &#xA;&lt;h4&gt;Browser-cluster&lt;/h4&gt; &#xA;&lt;p&gt;The browser-cluster is what coordinates the browser analysis of resources and allows the system to perform operations which would normally be quite time consuming in a high-performance fashion.&lt;/p&gt; &#xA;&lt;p&gt;Configuration options include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Adjustable pool-size, i.e. the amount of browser workers to utilize.&lt;/li&gt; &#xA; &lt;li&gt;Timeout for each job.&lt;/li&gt; &#xA; &lt;li&gt;Worker TTL counted in jobs -- Workers which exceed the TTL have their browser process respawned.&lt;/li&gt; &#xA; &lt;li&gt;Ability to disable loading images.&lt;/li&gt; &#xA; &lt;li&gt;Adjustable screen width and height. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Can be used to analyze responsive and mobile applications.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Ability to wait until certain elements appear in the page.&lt;/li&gt; &#xA; &lt;li&gt;Configurable local storage data.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Coverage&lt;/h3&gt; &#xA;&lt;p&gt;The system can provide great coverage to modern web applications due to its integrated browser environment. This allows it to interact with complex applications that make heavy use of client-side code (like JavaScript) just like a human would.&lt;/p&gt; &#xA;&lt;p&gt;In addition to that, it also knows about which browser state changes the application has been programmed to handle and is able to trigger them programatically in order to provide coverage for a full set of possible scenarios.&lt;/p&gt; &#xA;&lt;p&gt;By inspecting all possible pages and their states (when using client-side code) Arachni is able to extract and audit the following elements and their inputs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Forms &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Along with ones that require interaction via a real browser due to DOM events.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;User-interface Forms &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Input and button groups which don&#39;t belong to an HTML &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element but are instead associated via JS code.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;User-interface Inputs &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Orphan &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements with associated DOM events.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Links &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Along with ones that have client-side parameters in their fragment, i.e.: &lt;code&gt;http://example.com/#/?param=val&amp;amp;param2=val2&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;With support for rewrite rules.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;LinkTemplates -- Allowing for extraction of arbitrary inputs from generic paths, based on user-supplied templates -- useful when rewrite rules are not available. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Along with ones that have client-side parameters in their URL fragments, i.e.: &lt;code&gt;http://example.com/#/param/val/param2/val2&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Cookies &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Also supports nested cookies, containing key-value pairs inside individual cookies.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Headers&lt;/li&gt; &#xA; &lt;li&gt;Generic client-side elements which have associated DOM events.&lt;/li&gt; &#xA; &lt;li&gt;AJAX-request parameters.&lt;/li&gt; &#xA; &lt;li&gt;JSON request data.&lt;/li&gt; &#xA; &lt;li&gt;XML request data.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Open &lt;a href=&#34;https://github.com/Arachni/arachni/wiki/Distributed-components&#34;&gt;distributed architecture&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Arachni is designed to fit into your workflow and easily integrate with your existing infrastructure.&lt;/p&gt; &#xA;&lt;p&gt;Depending on the level of control you require over the process, you can either choose the REST service or the custom RPC protocol.&lt;/p&gt; &#xA;&lt;p&gt;Both approaches allow you to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Remotely monitor and manage scans.&lt;/li&gt; &#xA; &lt;li&gt;Perform multiple scans at the same time -- Each scan is compartmentalized to its own OS process to take advantage of: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Multi-core/SMP architectures.&lt;/li&gt; &#xA;   &lt;li&gt;OS-level scheduling/restrictions.&lt;/li&gt; &#xA;   &lt;li&gt;Sandboxed failure propagation.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Communicate over a secure channel.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/Arachni/arachni/wiki/REST-API&#34;&gt;REST API&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Very simple and straightforward API.&lt;/li&gt; &#xA; &lt;li&gt;Easy interoperability with non-Ruby systems. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Operates over HTTP.&lt;/li&gt; &#xA;   &lt;li&gt;Uses JSON to format messages.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Stateful scan monitoring. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Unique sessions automatically only receive updates when polling for progress, rather than full data.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/Arachni/arachni/wiki/RPC-API&#34;&gt;RPC API&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;High-performance/low-bandwidth &lt;a href=&#34;https://github.com/Arachni/arachni-rpc&#34;&gt;communication protocol&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;MessagePack&lt;/code&gt; serialization for performance, efficiency and ease of integration with 3rd party systems.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Grid: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Self-healing.&lt;/li&gt; &#xA;   &lt;li&gt;Scale up/down by hot-plugging/hot-unplugging nodes. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Can scale up infinitely by adding nodes to increase scan capacity.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;(Always-on)&lt;/em&gt; Load-balancing -- All Instances are automatically provided by the least burdened Grid member. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;With optional per-scan opt-out/override.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;(Optional)&lt;/em&gt; High-Performance mode -- Combines the resources of multiple nodes to perform multi-Instance scans. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Enabled on a per-scan basis.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Scope configuration&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Filters for redundant pages like galleries, catalogs, etc. based on regular expressions and counters. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Can optionally detect and ignore redundant pages automatically.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;URL exclusion filters using regular expressions.&lt;/li&gt; &#xA; &lt;li&gt;Page exclusion filters based on content, using regular expressions.&lt;/li&gt; &#xA; &lt;li&gt;URL inclusion filters using regular expressions.&lt;/li&gt; &#xA; &lt;li&gt;Can be forced to only follow HTTPS paths and not downgrade to HTTP.&lt;/li&gt; &#xA; &lt;li&gt;Can optionally follow subdomains.&lt;/li&gt; &#xA; &lt;li&gt;Adjustable page count limit.&lt;/li&gt; &#xA; &lt;li&gt;Adjustable redirect limit.&lt;/li&gt; &#xA; &lt;li&gt;Adjustable directory depth limit.&lt;/li&gt; &#xA; &lt;li&gt;Adjustable DOM depth limit.&lt;/li&gt; &#xA; &lt;li&gt;Adjustment using URL-rewrite rules.&lt;/li&gt; &#xA; &lt;li&gt;Can read paths from multiple user supplied files (to both restrict and extend the scope).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Audit&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Can audit: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Forms &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Can automatically refresh nonce tokens.&lt;/li&gt; &#xA;     &lt;li&gt;Can submit them via the integrated browser environment.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;User-interface Forms &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Input and button groups which don&#39;t belong to an HTML &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element but are instead associated via JS code.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;User-interface Inputs &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Orphan &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements with associated DOM events.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Links &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Can load them via the integrated browser environment.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;LinkTemplates &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Can load them via the integrated browser environment.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Cookies &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Can load them via the integrated browser environment.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Headers&lt;/li&gt; &#xA;   &lt;li&gt;Generic client-side DOM elements.&lt;/li&gt; &#xA;   &lt;li&gt;JSON request data.&lt;/li&gt; &#xA;   &lt;li&gt;XML request data.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Can ignore binary/non-text pages.&lt;/li&gt; &#xA; &lt;li&gt;Can audit elements using both &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt; HTTP methods.&lt;/li&gt; &#xA; &lt;li&gt;Can inject both raw and HTTP encoded payloads.&lt;/li&gt; &#xA; &lt;li&gt;Can submit all links and forms of the page along with the cookie permutations to provide extensive cookie-audit coverage.&lt;/li&gt; &#xA; &lt;li&gt;Can exclude specific input vectors by name.&lt;/li&gt; &#xA; &lt;li&gt;Can include specific input vectors by name.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Components&lt;/h3&gt; &#xA;&lt;p&gt;Arachni is a highly modular system, employing several components of distinct types to perform its duties.&lt;/p&gt; &#xA;&lt;p&gt;In addition to enabling or disabling the bundled components so as to adjust the system&#39;s behavior and features as needed, functionality can be extended via the addition of user-created components to suit almost every need.&lt;/p&gt; &#xA;&lt;h4&gt;Platform fingerprinters&lt;/h4&gt; &#xA;&lt;p&gt;In order to make efficient use of the available bandwidth, Arachni performs rudimentary platform fingerprinting and tailors the audit process to the server-side deployed technologies by only using applicable payloads.&lt;/p&gt; &#xA;&lt;p&gt;Currently, the following platforms can be identified:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Operating systems &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;BSD&lt;/li&gt; &#xA;   &lt;li&gt;Linux&lt;/li&gt; &#xA;   &lt;li&gt;Unix&lt;/li&gt; &#xA;   &lt;li&gt;Windows&lt;/li&gt; &#xA;   &lt;li&gt;Solaris&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Web servers &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Apache&lt;/li&gt; &#xA;   &lt;li&gt;IIS&lt;/li&gt; &#xA;   &lt;li&gt;Nginx&lt;/li&gt; &#xA;   &lt;li&gt;Tomcat&lt;/li&gt; &#xA;   &lt;li&gt;Jetty&lt;/li&gt; &#xA;   &lt;li&gt;Gunicorn&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Programming languages &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;PHP&lt;/li&gt; &#xA;   &lt;li&gt;ASP&lt;/li&gt; &#xA;   &lt;li&gt;ASPX&lt;/li&gt; &#xA;   &lt;li&gt;Java&lt;/li&gt; &#xA;   &lt;li&gt;Python&lt;/li&gt; &#xA;   &lt;li&gt;Ruby&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Frameworks &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Rack&lt;/li&gt; &#xA;   &lt;li&gt;CakePHP&lt;/li&gt; &#xA;   &lt;li&gt;Rails&lt;/li&gt; &#xA;   &lt;li&gt;Django&lt;/li&gt; &#xA;   &lt;li&gt;ASP.NET MVC&lt;/li&gt; &#xA;   &lt;li&gt;JSF&lt;/li&gt; &#xA;   &lt;li&gt;CherryPy&lt;/li&gt; &#xA;   &lt;li&gt;Nette&lt;/li&gt; &#xA;   &lt;li&gt;Symfony&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The user also has the option of specifying extra platforms (like a DB server) in order to help the system be as efficient as possible. Alternatively, fingerprinting can be disabled altogether.&lt;/p&gt; &#xA;&lt;p&gt;Finally, Arachni will always err on the side of caution and send all available payloads when it fails to identify specific platforms.&lt;/p&gt; &#xA;&lt;h4&gt;Checks&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;Checks&lt;/em&gt; are system components which perform security checks and log issues.&lt;/p&gt; &#xA;&lt;h5&gt;Active&lt;/h5&gt; &#xA;&lt;p&gt;Active checks engage the web application via its inputs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SQL injection (&lt;code&gt;sql_injection&lt;/code&gt;) -- Error based detection. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Oracle&lt;/li&gt; &#xA;   &lt;li&gt;InterBase&lt;/li&gt; &#xA;   &lt;li&gt;PostgreSQL&lt;/li&gt; &#xA;   &lt;li&gt;MySQL&lt;/li&gt; &#xA;   &lt;li&gt;MSSQL&lt;/li&gt; &#xA;   &lt;li&gt;EMC&lt;/li&gt; &#xA;   &lt;li&gt;SQLite&lt;/li&gt; &#xA;   &lt;li&gt;DB2&lt;/li&gt; &#xA;   &lt;li&gt;Informix&lt;/li&gt; &#xA;   &lt;li&gt;Firebird&lt;/li&gt; &#xA;   &lt;li&gt;SaP Max DB&lt;/li&gt; &#xA;   &lt;li&gt;Sybase&lt;/li&gt; &#xA;   &lt;li&gt;Frontbase&lt;/li&gt; &#xA;   &lt;li&gt;Ingres&lt;/li&gt; &#xA;   &lt;li&gt;HSQLDB&lt;/li&gt; &#xA;   &lt;li&gt;MS Access&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Blind SQL injection using differential analysis (&lt;code&gt;sql_injection_differential&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Blind SQL injection using timing attacks (&lt;code&gt;sql_injection_timing&lt;/code&gt;). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;MySQL&lt;/li&gt; &#xA;   &lt;li&gt;PostgreSQL&lt;/li&gt; &#xA;   &lt;li&gt;MSSQL&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;NoSQL injection (&lt;code&gt;no_sql_injection&lt;/code&gt;) -- Error based vulnerability detection. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;MongoDB&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Blind NoSQL injection using differential analysis (&lt;code&gt;no_sql_injection_differential&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;CSRF detection (&lt;code&gt;csrf&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Code injection (&lt;code&gt;code_injection&lt;/code&gt;). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;PHP&lt;/li&gt; &#xA;   &lt;li&gt;Ruby&lt;/li&gt; &#xA;   &lt;li&gt;Python&lt;/li&gt; &#xA;   &lt;li&gt;Java&lt;/li&gt; &#xA;   &lt;li&gt;ASP&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Blind code injection using timing attacks (&lt;code&gt;code_injection_timing&lt;/code&gt;). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;PHP&lt;/li&gt; &#xA;   &lt;li&gt;Ruby&lt;/li&gt; &#xA;   &lt;li&gt;Python&lt;/li&gt; &#xA;   &lt;li&gt;Java&lt;/li&gt; &#xA;   &lt;li&gt;ASP&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;LDAP injection (&lt;code&gt;ldap_injection&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Path traversal (&lt;code&gt;path_traversal&lt;/code&gt;). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;*nix&lt;/li&gt; &#xA;   &lt;li&gt;Windows&lt;/li&gt; &#xA;   &lt;li&gt;Java&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;File inclusion (&lt;code&gt;file_inclusion&lt;/code&gt;). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;*nix&lt;/li&gt; &#xA;   &lt;li&gt;Windows&lt;/li&gt; &#xA;   &lt;li&gt;Java&lt;/li&gt; &#xA;   &lt;li&gt;PHP&lt;/li&gt; &#xA;   &lt;li&gt;Perl&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Response splitting (&lt;code&gt;response_splitting&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;OS command injection (&lt;code&gt;os_cmd_injection&lt;/code&gt;). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;*nix&lt;/li&gt; &#xA;   &lt;li&gt;*BSD&lt;/li&gt; &#xA;   &lt;li&gt;IBM AIX&lt;/li&gt; &#xA;   &lt;li&gt;Windows&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Blind OS command injection using timing attacks (&lt;code&gt;os_cmd_injection_timing&lt;/code&gt;). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Linux&lt;/li&gt; &#xA;   &lt;li&gt;*BSD&lt;/li&gt; &#xA;   &lt;li&gt;Solaris&lt;/li&gt; &#xA;   &lt;li&gt;Windows&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Remote file inclusion (&lt;code&gt;rfi&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Unvalidated redirects (&lt;code&gt;unvalidated_redirect&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Unvalidated DOM redirects (&lt;code&gt;unvalidated_redirect_dom&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;XPath injection (&lt;code&gt;xpath_injection&lt;/code&gt;). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Generic&lt;/li&gt; &#xA;   &lt;li&gt;PHP&lt;/li&gt; &#xA;   &lt;li&gt;Java&lt;/li&gt; &#xA;   &lt;li&gt;dotNET&lt;/li&gt; &#xA;   &lt;li&gt;libXML2&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;XSS (&lt;code&gt;xss&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Path XSS (&lt;code&gt;xss_path&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;XSS in event attributes of HTML elements (&lt;code&gt;xss_event&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;XSS in HTML tags (&lt;code&gt;xss_tag&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;XSS in script context (&lt;code&gt;xss_script_context&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;DOM XSS (&lt;code&gt;xss_dom&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;DOM XSS script context (&lt;code&gt;xss_dom_script_context&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Source code disclosure (&lt;code&gt;source_code_disclosure&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;XML External Entity (&lt;code&gt;xxe&lt;/code&gt;). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Linux&lt;/li&gt; &#xA;   &lt;li&gt;*BSD&lt;/li&gt; &#xA;   &lt;li&gt;Solaris&lt;/li&gt; &#xA;   &lt;li&gt;Windows&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Passive&lt;/h5&gt; &#xA;&lt;p&gt;Passive checks look for the existence of files, folders and signatures.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Allowed HTTP methods (&lt;code&gt;allowed_methods&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Back-up files (&lt;code&gt;backup_files&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Backup directories (&lt;code&gt;backup_directories&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Common administration interfaces (&lt;code&gt;common_admin_interfaces&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Common directories (&lt;code&gt;common_directories&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Common files (&lt;code&gt;common_files&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;HTTP PUT (&lt;code&gt;http_put&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Insufficient Transport Layer Protection for password forms (&lt;code&gt;unencrypted_password_form&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;WebDAV detection (&lt;code&gt;webdav&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;HTTP TRACE detection (&lt;code&gt;xst&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Credit Card number disclosure (&lt;code&gt;credit_card&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;CVS/SVN user disclosure (&lt;code&gt;cvs_svn_users&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Private IP address disclosure (&lt;code&gt;private_ip&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Common backdoors (&lt;code&gt;backdoors&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;.htaccess LIMIT misconfiguration (&lt;code&gt;htaccess_limit&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Interesting responses (&lt;code&gt;interesting_responses&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;HTML object grepper (&lt;code&gt;html_objects&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;E-mail address disclosure (&lt;code&gt;emails&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;US Social Security Number disclosure (&lt;code&gt;ssn&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Forceful directory listing (&lt;code&gt;directory_listing&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Mixed Resource/Scripting (&lt;code&gt;mixed_resource&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Insecure cookies (&lt;code&gt;insecure_cookies&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;HttpOnly cookies (&lt;code&gt;http_only_cookies&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Auto-complete for password form fields (&lt;code&gt;password_autocomplete&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Origin Spoof Access Restriction Bypass (&lt;code&gt;origin_spoof_access_restriction_bypass&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Form-based upload (&lt;code&gt;form_upload&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;localstart.asp (&lt;code&gt;localstart_asp&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Cookie set for parent domain (&lt;code&gt;cookie_set_for_parent_domain&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Missing &lt;code&gt;Strict-Transport-Security&lt;/code&gt; headers for HTTPS sites (&lt;code&gt;hsts&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Missing &lt;code&gt;X-Frame-Options&lt;/code&gt; headers (&lt;code&gt;x_frame_options&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Insecure CORS policy (&lt;code&gt;insecure_cors_policy&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Insecure cross-domain policy (allow-access-from) (&lt;code&gt;insecure_cross_domain_policy_access&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Insecure cross-domain policy (allow-http-request-headers-from) (&lt;code&gt;insecure_cross_domain_policy_headers&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Insecure client-access policy (&lt;code&gt;insecure_client_access_policy&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Reporters&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Standard output&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.arachni-scanner.com/reports/report.html/&#34;&gt;HTML&lt;/a&gt; (&lt;a href=&#34;http://www.arachni-scanner.com/reports/report.html.zip&#34;&gt;zip&lt;/a&gt;) (&lt;code&gt;html&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.arachni-scanner.com/reports/report.xml&#34;&gt;XML&lt;/a&gt; (&lt;code&gt;xml&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.arachni-scanner.com/reports/report.txt&#34;&gt;Text&lt;/a&gt; (&lt;code&gt;text&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.arachni-scanner.com/reports/report.json&#34;&gt;JSON&lt;/a&gt; (&lt;code&gt;json&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.arachni-scanner.com/reports/report.marshal&#34;&gt;Marshal&lt;/a&gt; (&lt;code&gt;marshal&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.arachni-scanner.com/reports/report.yml&#34;&gt;YAML&lt;/a&gt; (&lt;code&gt;yaml&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.arachni-scanner.com/reports/report.afr&#34;&gt;AFR&lt;/a&gt; (&lt;code&gt;afr&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The default Arachni Framework Report format.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Plugins&lt;/h4&gt; &#xA;&lt;p&gt;Plugins add extra functionality to the system in a modular fashion, this way the core remains lean and makes it easy for anyone to add arbitrary functionality.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Passive Proxy (&lt;code&gt;proxy&lt;/code&gt;) -- Analyzes requests and responses between the web app and the browser assisting in AJAX audits, logging-in and/or restricting the scope of the audit.&lt;/li&gt; &#xA; &lt;li&gt;Form based login (&lt;code&gt;autologin&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Script based login (&lt;code&gt;login_script&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Dictionary attacker for HTTP Auth (&lt;code&gt;http_dicattack&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Dictionary attacker for form based authentication (&lt;code&gt;form_dicattack&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Cookie collector (&lt;code&gt;cookie_collector&lt;/code&gt;) -- Keeps track of cookies while establishing a timeline of changes.&lt;/li&gt; &#xA; &lt;li&gt;WAF (Web Application Firewall) Detector (&lt;code&gt;waf_detector&lt;/code&gt;) -- Establishes a baseline of normal behavior and uses rDiff analysis to determine if malicious inputs cause any behavioral changes.&lt;/li&gt; &#xA; &lt;li&gt;BeepNotify (&lt;code&gt;beep_notify&lt;/code&gt;) -- Beeps when the scan finishes.&lt;/li&gt; &#xA; &lt;li&gt;EmailNotify (&lt;code&gt;email_notify&lt;/code&gt;) -- Sends a notification (and optionally a report) over SMTP at the end of the scan.&lt;/li&gt; &#xA; &lt;li&gt;VectorFeed (&lt;code&gt;vector_feed&lt;/code&gt;) -- Reads in vector data from which it creates elements to be audited. Can be used to perform extremely specialized/narrow audits on a per vector/element basis. Useful for unit-testing or a gazillion other things.&lt;/li&gt; &#xA; &lt;li&gt;Script (&lt;code&gt;script&lt;/code&gt;) -- Loads and runs an external Ruby script under the scope of a plugin, used for debugging and general hackery.&lt;/li&gt; &#xA; &lt;li&gt;Uncommon headers (&lt;code&gt;uncommon_headers&lt;/code&gt;) -- Logs uncommon headers.&lt;/li&gt; &#xA; &lt;li&gt;Content-types (&lt;code&gt;content_types&lt;/code&gt;) -- Logs content-types of server responses aiding in the identification of interesting (possibly leaked) files.&lt;/li&gt; &#xA; &lt;li&gt;Vector collector (&lt;code&gt;vector_collector&lt;/code&gt;) -- Collects information about all seen input vectors which are within the scan scope.&lt;/li&gt; &#xA; &lt;li&gt;Headers collector (&lt;code&gt;headers_collector&lt;/code&gt;) -- Collects response headers based on specified criteria.&lt;/li&gt; &#xA; &lt;li&gt;Exec (&lt;code&gt;exec&lt;/code&gt;) -- Calls external executables at different scan stages.&lt;/li&gt; &#xA; &lt;li&gt;Metrics (&lt;code&gt;metrics&lt;/code&gt;) -- Captures metrics about multiple aspects of the scan and the web application.&lt;/li&gt; &#xA; &lt;li&gt;Restrict to DOM state (&lt;code&gt;restrict_to_dom_state&lt;/code&gt;) -- Restricts the audit to a single page&#39;s DOM state, based on a URL fragment.&lt;/li&gt; &#xA; &lt;li&gt;Webhook notify (&lt;code&gt;webhook_notify&lt;/code&gt;) -- Sends a webhook payload over HTTP at the end of the scan.&lt;/li&gt; &#xA; &lt;li&gt;Rate limiter (&lt;code&gt;rate_limiter&lt;/code&gt;) -- Rate limits HTTP requests.&lt;/li&gt; &#xA; &lt;li&gt;Page dump (&lt;code&gt;page_dump&lt;/code&gt;) -- Dumps page data to disk as YAML.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Defaults&lt;/h5&gt; &#xA;&lt;p&gt;Default plugins will run for every scan and are placed under &lt;code&gt;/plugins/defaults/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AutoThrottle (&lt;code&gt;autothrottle&lt;/code&gt;) -- Dynamically adjusts HTTP throughput during the scan for maximum bandwidth utilization.&lt;/li&gt; &#xA; &lt;li&gt;Healthmap (&lt;code&gt;healthmap&lt;/code&gt;) -- Generates sitemap showing the health of each crawled/audited URL&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;Meta&lt;/h6&gt; &#xA;&lt;p&gt;Plugins under &lt;code&gt;/plugins/defaults/meta/&lt;/code&gt; perform analysis on the scan results to determine trustworthiness or just add context information or general insights.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TimingAttacks (&lt;code&gt;timing_attacks&lt;/code&gt;) -- Provides a notice for issues uncovered by timing attacks when the affected audited pages returned unusually high response times to begin with. It also points out the danger of DoS attacks against pages that perform heavy-duty processing.&lt;/li&gt; &#xA; &lt;li&gt;Discovery (&lt;code&gt;discovery&lt;/code&gt;) -- Performs anomaly detection on issues logged by discovery checks and warns of the possibility of false positives where applicable.&lt;/li&gt; &#xA; &lt;li&gt;Uniformity (&lt;code&gt;uniformity&lt;/code&gt;) -- Reports inputs that are uniformly vulnerable across a number of pages hinting to the lack of a central point of input sanitization.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Trainer subsystem&lt;/h3&gt; &#xA;&lt;p&gt;The Trainer is what enables Arachni to learn from the scan it performs and incorporate that knowledge, on the fly, for the duration of the audit.&lt;/p&gt; &#xA;&lt;p&gt;Checks have the ability to individually force the Framework to learn from the HTTP responses they are going to induce.&lt;/p&gt; &#xA;&lt;p&gt;However, this is usually not required since Arachni is aware of which requests are more likely to uncover new elements or attack vectors and will adapt itself accordingly.&lt;/p&gt; &#xA;&lt;p&gt;Still, this can be an invaluable asset to Fuzzer checks.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/Arachni/arachni/wiki/Installation&#34;&gt;Installation&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/Arachni/arachni/wiki/User-guide&#34;&gt;Usage&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Running the specs&lt;/h2&gt; &#xA;&lt;p&gt;You can run &lt;code&gt;rake spec&lt;/code&gt; to run &lt;strong&gt;all&lt;/strong&gt; specs or you can run them selectively using the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rake spec:core            # for the core libraries&#xA;rake spec:checks          # for the checks&#xA;rake spec:plugins         # for the plugins&#xA;rake spec:reports         # for the reports&#xA;rake spec:path_extractors # for the path extractors&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please be warned&lt;/strong&gt;, the core specs will require a beast of a machine due to the necessity to test the Grid/multi-Instance features of the system.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;em&gt;The check specs will take many hours to complete due to the timing-attack tests.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Bug reports/Feature requests&lt;/h2&gt; &#xA;&lt;p&gt;Submit bugs using &lt;a href=&#34;http://github.com/Arachni/arachni/issues&#34;&gt;GitHub Issues&lt;/a&gt; and get support via the &lt;a href=&#34;http://support.arachni-scanner.com&#34;&gt;Support Portal&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;(Before starting any work, please read the &lt;a href=&#34;https://github.com/Arachni/arachni/tree/experimental#source&#34;&gt;instructions&lt;/a&gt; for working with the source code.)&lt;/p&gt; &#xA;&lt;p&gt;We&#39;re happy to accept help from fellow code-monkeys and these are the steps you need to follow in order to contribute code:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fork the project.&lt;/li&gt; &#xA; &lt;li&gt;Start a feature branch based on the &lt;a href=&#34;https://github.com/Arachni/arachni/tree/experimental&#34;&gt;experimental&lt;/a&gt; branch (&lt;code&gt;git checkout -b &amp;lt;feature-name&amp;gt; experimental&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Add specs for your code.&lt;/li&gt; &#xA; &lt;li&gt;Run the spec suite to make sure you didn&#39;t break anything (&lt;code&gt;rake spec:core&lt;/code&gt; for the core libs or &lt;code&gt;rake spec&lt;/code&gt; for everything).&lt;/li&gt; &#xA; &lt;li&gt;Commit and push your changes.&lt;/li&gt; &#xA; &lt;li&gt;Issue a pull request and wait for your code to be reviewed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Arachni Public Source License v1.0 -- please see the &lt;em&gt;LICENSE&lt;/em&gt; file for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>department-of-veterans-affairs/vets-api</title>
    <updated>2023-07-16T02:03:24Z</updated>
    <id>tag:github.com,2023-07-16:/department-of-veterans-affairs/vets-api</id>
    <link href="https://github.com/department-of-veterans-affairs/vets-api" rel="alternate"></link>
    <summary type="html">&lt;p&gt;API powering VA.gov&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Vets API&lt;/h1&gt; &#xA;&lt;p&gt;This project provides common APIs for applications that live on VA.gov (formerly vets.gov APIs).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.rubydoc.info/github/department-of-veterans-affairs/vets-api&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/yard-docs-blue.svg?sanitize=true&#34; alt=&#34;Yard Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-CC0%201.0-lightgrey.svg?sanitize=true&#34; alt=&#34;License: CC0-1.0&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://jenkins.vfs.va.gov/job/builds/job/vets-api/&#34;&gt;Build Status&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://depo-platform-documentation.scrollhelp.site/index.html&#34;&gt;VA.gov Platform Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://department-of-veterans-affairs.github.io/va-digital-services-platform-docs/api-reference/#/&#34;&gt;API Docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For frontend, see &lt;a href=&#34;https://github.com/department-of-veterans-affairs/vets-website&#34;&gt;vets-website&lt;/a&gt; and &lt;a href=&#34;https://github.com/department-of-veterans-affairs/vagov-content&#34;&gt;vets-content&lt;/a&gt; repos.&lt;/p&gt; &#xA;&lt;h2&gt;Base setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the &lt;code&gt;vets-api&lt;/code&gt; repo:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/department-of-veterans-affairs/vets-api.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Setup key &amp;amp; cert for localhost authentication to ID.me:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Create a folder in your vets-api directory:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir config/certs&#xA;touch config/certs/vetsgov-localhost.crt&#xA;touch config/certs/vetsgov-localhost.key&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Copy example configuration file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp config/settings.local.yml.example config/settings.local.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Edit &lt;code&gt;config/settings.local.yml&lt;/code&gt; to disable signed authentication requests:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# settings.local.yml&#xA;saml:&#xA;  authn_requests_signed: false&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are developing features that need Sidekiq Enterprise, you must have access to the va.gov-team-sensitive repo and &lt;a href=&#34;https://github.com/department-of-veterans-affairs/va.gov-team-sensitive/raw/master/platform/engineering/sidekiq-enterprise-setup.md&#34;&gt;install the sidekiq enterprise license&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Sidekiq Enterprise is used for worker rate limiting and additional reliability in production and requires a license be configured on your development machine. If you do not have a license configured, the open source version of Sidekiq will be installed instead. This is not an issue unless you are specifically developing features that need Sidekiq Enterprise.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;DO NOT commit local Gemfile modifications that remove the &lt;code&gt;sidekiq-ent&lt;/code&gt; and &lt;code&gt;sidekiq-pro&lt;/code&gt; gems.&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Developers who work with vets-api daily tend to prefer the native setup because they don&#39;t have to deal with the abstraction of docker-compose while those who would to spend less time on getting started prefer the docker setup. Docker is also useful when it&#39;s necessary to have a setup as close to production as possible. Finally, it&#39;s possible to use a hybrid setup where you run vets-api natively, but run the Postgres and Redis dependencies in docker.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/docs/setup/native.md&#34;&gt;Native setup&lt;/a&gt; (OSX/Ubuntu)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/docs/setup/docker.md&#34;&gt;Docker setup&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/docs/setup/hybrid.md&#34;&gt;Hybrid setup&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Running the app&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/docs/setup/running_natively.md&#34;&gt;Running natively&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/docs/setup/running_docker.md&#34;&gt;Running with Docker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Vets API is configured with &lt;a href=&#34;https://github.com/railsconfig/config&#34;&gt;Config&lt;/a&gt;. The default configuration is contained in &lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/config/settings.yml&#34;&gt;settings.yml&lt;/a&gt;. To customize your setup, you can create a &lt;code&gt;config/settings.local.yml&lt;/code&gt; file with configuration specific to your needs. For example, to configure Redis and PostgreSQL (PostGIS is required), place something like this in that file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;database_url: postgis://pg_host:9999/custom_db&#xA;&#xA;redis:&#xA;  host: redis_host&#xA;  port: 9999&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is also where you will place any other customizations, such as API tokens or certificate paths.&lt;/p&gt; &#xA;&lt;p&gt;Config settings that vary in value depending on the deployment environment will also need to be set appropriately for each environment in the relevant &lt;a href=&#34;https://github.com/department-of-veterans-affairs/devops/raw/master/ansible/deployment/config/vets-api&#34;&gt;devops (Private Repo)&lt;/a&gt; configurations (dev-, staging-, and prod-settings.local.yml.j2).&lt;/p&gt; &#xA;&lt;p&gt;Some examples of configuration that will need to be added to these files are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;API keys/tokens&lt;/li&gt; &#xA; &lt;li&gt;3rd party service hostnames, ports, and certificates/keys.&lt;/li&gt; &#xA; &lt;li&gt;Betamocks settings&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Optional application configuration&lt;/h3&gt; &#xA;&lt;p&gt;The following features require additional configuration, click for details.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/docs/setup/edu_benefits.md&#34;&gt;Education Benefits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/docs/setup/evss.md&#34;&gt;EVSS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/docs/setup/facilities_locator.md&#34;&gt;Facilities Locator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/docs/setup/local_network_access.md&#34;&gt;Local Network Access&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/docs/setup/mailer.md&#34;&gt;Mailers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/docs/setup/mpi.md&#34;&gt;Master Person Index (MPI)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/docs/setup/mhv.md&#34;&gt;My HealtheVet (MHV)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/docs/setup/virtual_machine_access.md&#34;&gt;Virtual Machine Access&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/department-of-veterans-affairs/vsp-test-user-dashboard/raw/main/README.md#back-end&#34;&gt;Test User Dashboard&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To mock one or more of the above services see &lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/docs/setup/betamocks.md&#34;&gt;Betamocks&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Vets API will still run in a limited capacity without configuring any of these features, and will run the unit tests successfully.&lt;/p&gt; &#xA;&lt;h2&gt;Deployment instructions&lt;/h2&gt; &#xA;&lt;p&gt;Jenkins deploys &lt;code&gt;vets-api&lt;/code&gt; upon each merge to &lt;code&gt;master&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://jenkins.vfs.va.gov/job/testing/job/vets-api/job/master/&#34;&gt;http://jenkins.vfs.va.gov/job/testing/job/vets-api/job/master/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Each deploy is available here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev-api.va.gov/v0/status&#34;&gt;https://dev-api.va.gov/v0/status&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Additional deployment details can be found here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/department-of-veterans-affairs/vets-api/master/docs/deployment/information.md&#34;&gt;additional deployment details&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;API request key formatting&lt;/h2&gt; &#xA;&lt;p&gt;When sending HTTP requests use the &lt;code&gt;X-Key-Inflection&lt;/code&gt; request header to specify which case your client wants to use. Valid cases are &lt;code&gt;camel&lt;/code&gt;, &lt;code&gt;dash&lt;/code&gt;, and &lt;code&gt;snake&lt;/code&gt;. For example if you set &lt;code&gt;X-Key-Inflection: camel&lt;/code&gt; then you can use camelCase keys in your JSON request body and you will get back data with camelCase keys in the response body. If the header is not provided then the server will expect snake_case keys in the request body and output snake_case in the response.&lt;/p&gt; &#xA;&lt;h2&gt;Versions&lt;/h2&gt; &#xA;&lt;p&gt;The version of Ruby and gem dependencies (including Rails) used are defined in the included &lt;a href=&#34;https://github.com/department-of-veterans-affairs/vets-api/raw/master/Gemfile&#34;&gt;Gemfile&lt;/a&gt;. The currently used versions of gems are maintained with Bundler and stored in the &lt;a href=&#34;https://github.com/department-of-veterans-affairs/vets-api/raw/master/Gemfile.lock&#34;&gt;Gemfile.lock&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Version Policy&lt;/h4&gt; &#xA;&lt;p&gt;The goal is to have vets-api use supported versions of gems and Ruby, which is often the latest. However the versions are generally updated as need or availability arise. If you need a newer version of a gem, please submit a pull-request marked as &lt;code&gt;draft&lt;/code&gt; with just the gem updated and passing tests.&lt;/p&gt;</summary>
  </entry>
</feed>