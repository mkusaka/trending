<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-09T02:01:15Z</updated>
  <subtitle>Weekly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>noraj/OSCP-Exam-Report-Template-Markdown</title>
    <updated>2023-04-09T02:01:15Z</updated>
    <id>tag:github.com,2023-04-09:/noraj/OSCP-Exam-Report-Template-Markdown</id>
    <link href="https://github.com/noraj/OSCP-Exam-Report-Template-Markdown" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üìô Markdown Templates for Offensive Security OSCP, OSWE, OSCE, OSEE, OSWP exam report&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Offensive Security Exam Report Template in Markdown&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://inventory.raw.pm/tools.html#OSCP%20Exam%20Report%20Template%20in%20Markdown&#34;&gt;&lt;img src=&#34;https://inventory.raw.pm/img/badges/Rawsec-inventoried-FF5050_flat-square.svg?sanitize=true&#34; alt=&#34;Rawsec&#39;s CyberSecurity Inventory&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/noraj/OSCP-Exam-Report-Template-Markdown/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/noraj/OSCP-Exam-Report-Template-Markdown?style=flat-square&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/noraj/OSCP-Exam-Report-Template-Markdown/network&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/noraj/OSCP-Exam-Report-Template-Markdown?style=flat-square&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/noraj/OSCP-Exam-Report-Template-Markdown/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/noraj/OSCP-Exam-Report-Template-Markdown?style=flat-square&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;I created an &lt;strong&gt;Offensive Security Exam Report Template in Markdown&lt;/strong&gt; so LaTeX, Microsoft Office Word, LibreOffice Writer are no longer needed during your Offensive Security OSCP, OSWE, OSEE, OSWP, OSEP, OSED, OSWA, OSDA, OSMR exam!&lt;/p&gt; &#xA;&lt;p&gt;Now you can be efficient and faster during your exam report redaction!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;üöÄ&lt;/span&gt; &lt;strong&gt;Speed up writing&lt;/strong&gt;, don&#39;t lose time during the 24 hours of exam report redaction&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;‚≠ê&lt;/span&gt; &lt;strong&gt;No formatting hassle with WYSIWYG editors&lt;/strong&gt;, byebye unwanted whitespaces and linefeeds from Microsoft Office Word and LibreOffice Writer&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üìù&lt;/span&gt; &lt;strong&gt;Re-use your Markdown notes&lt;/strong&gt;, you&#39;ll be so glad not having to reformat the bold and italic from your Markdown notes into the report&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üîí&lt;/span&gt; &lt;strong&gt;Version control ready&lt;/strong&gt;, save your markdown template into a PRIVATE git repository, you now have an incremental backup, version control works with Markdown (.md) as it&#39;s text but not with binaries (.doc, .odt)&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üñä&lt;/span&gt; &lt;strong&gt;Use your favorite editor or note taking app&lt;/strong&gt;, with Markdown you&#39;ll be able to use your favorite editor (VSCode, Atom, etc.) or note taking app (Vnote, QOwnNotes, Boostnote, etc.) to write your exam report, you won&#39;t have to switch to Windows to use MS Word.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üé©&lt;/span&gt; &lt;strong&gt;Clean &amp;amp; professional style&lt;/strong&gt;, a professional looking report for your professional certification&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üëå&lt;/span&gt; &lt;strong&gt;Error free&lt;/strong&gt;, use the generation script to generate the report and archive, you won&#39;t do any &lt;a href=&#34;https://support.offensive-security.com/oscp-exam-guide/#submission-format-and-name&#34;&gt;submission format and name&lt;/a&gt; mistake that way&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/XiXIZg3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;OSCP whoisflynn improved template v3.2&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Z344YCQ.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://i.imgur.com/wegbNYr.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;OSCP Official Offensive Security Template v1&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/9zoWFfr.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://i.imgur.com/MWSgxfh.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pandoc.org/installing.html&#34;&gt;Pandoc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;LaTeX (eg. &lt;a href=&#34;http://www.tug.org/texlive/&#34;&gt;TeX Live&lt;/a&gt;) in order to get &lt;code&gt;pdflatex&lt;/code&gt; or &lt;code&gt;xelatex&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Wandmalfarbe/pandoc-latex-template#installation&#34;&gt;Eisvogel Pandoc LaTeX PDF Template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://p7zip.sourceforge.net/&#34;&gt;p7zip&lt;/a&gt; (if you want to use the script, for generating the archive)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Examples for common distros:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ArchLinux: &lt;code&gt;pacman -S texlive-most pandoc p7zip&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;openSUSE: &lt;code&gt;zypper in texlive-scheme-medium pandoc p7zip-full&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ubuntu: &lt;code&gt;apt install texlive-latex-recommended texlive-fonts-extra texlive-latex-extra pandoc p7zip-full&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Write your report in &lt;strong&gt;markdown&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Automatic&lt;/h3&gt; &#xA;&lt;p&gt;There is a script that will:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Let you choose the template&lt;/li&gt; &#xA; &lt;li&gt;Let you choose the syntax highlight style&lt;/li&gt; &#xA; &lt;li&gt;Generate the PDF (+ preview option)&lt;/li&gt; &#xA; &lt;li&gt;Generate the 7z archive&lt;/li&gt; &#xA; &lt;li&gt;Output MD5 hash for verification after uploading&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Choose and copy a template that you will use to write your report:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ruby osert.rb init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generate your PDF report and 7z archive&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ruby osert.rb generate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: If you run the generation several times, you may want to check the options (&lt;code&gt;ruby osert.rb generate -h&lt;/code&gt;) to save time on the interactive prompt.&lt;/p&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;Generate the report PDF from the markdown template:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pandoc src/OSCP-exam-report-template_whoisflynn_v3.2.md \&#xA;-o output/OSCP-OS-XXXXX-Exam-Report.pdf \&#xA;--from markdown+yaml_metadata_block+raw_html \&#xA;--template eisvogel \&#xA;--table-of-contents \&#xA;--toc-depth 6 \&#xA;--number-sections \&#xA;--top-level-division=chapter \&#xA;--highlight-style breezedark \&#xA;--resource-path=.:src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can change the code syntax highlight theme with &lt;a href=&#34;https://pandoc.org/MANUAL.html#option--highlight-style&#34;&gt;&lt;code&gt;--highlight-style&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Color sets&lt;/h2&gt; &#xA;&lt;p&gt;Well rendering color sets you can use in the template YAML frontmatter:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;titlepage-color&lt;/th&gt; &#xA;   &lt;th&gt;titlepage-text-color&lt;/th&gt; &#xA;   &lt;th&gt;titlepage-rule-color&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;DC143C&lt;/code&gt; (Crimson)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;FFFFFF&lt;/code&gt; (White)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;FFFFFF&lt;/code&gt; (White)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;00FF7F&lt;/code&gt; (SpringGreen)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;006400&lt;/code&gt; DarkGreen&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;000000&lt;/code&gt; (Black)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;1E90FF&lt;/code&gt; (DodgerBlue)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;FFFAFA&lt;/code&gt; (Snow)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;FFFAFA&lt;/code&gt; (Snow)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;483D8B&lt;/code&gt; (DarkSlateBlue)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;FFFAFA&lt;/code&gt; (Snow)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;FFFAFA&lt;/code&gt; (Snow)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;FFD700&lt;/code&gt; (Gold)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;000000&lt;/code&gt; (Black)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;000000&lt;/code&gt; (Black)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;FFEFD5&lt;/code&gt; (PapayaWhip)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;000000&lt;/code&gt; (Black)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;000000&lt;/code&gt; (Black)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;FF8C00&lt;/code&gt; (DarkOrange)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;000000&lt;/code&gt; (Black)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;000000&lt;/code&gt; (Black)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;FFEF96&lt;/code&gt; (no name)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;50394C&lt;/code&gt; (no name)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;50394C&lt;/code&gt; (no name)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Syntax highlight themes can be listed with &lt;code&gt;pandoc --list-highlight-styles&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Available templates&lt;/h2&gt; &#xA;&lt;p&gt;Report Templates:&lt;/p&gt; &#xA;&lt;p&gt;Network Penetration Testing:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;OSCP&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/noraj/OSCP-Exam-Report-Template-Markdown/master/output/examples/OSCP-exam-report-template_OS_v1.pdf&#34;&gt;Official Offensive Security Template v1&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/noraj/OSCP-Exam-Report-Template-Markdown/master/output/examples/OSCP-exam-report-template_OS_v2.pdf&#34;&gt;Official Offensive Security Template v2&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/whoisflynn&#34;&gt;whoisflynn&lt;/a&gt; improved &lt;a href=&#34;https://raw.githubusercontent.com/noraj/OSCP-Exam-Report-Template-Markdown/master/output/examples/OSCP-exam-report-template_whoisflynn_v3.2.pdf&#34;&gt;template&lt;/a&gt; v3.2&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OSWP&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/noraj/OSCP-Exam-Report-Template-Markdown/master/output/examples/OSWP-exam-report-template_OS_v1.pdf&#34;&gt;Official Offensive Security Template v1&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OSEP&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/noraj/OSCP-Exam-Report-Template-Markdown/master/output/examples/OSEP-exam-report-template_OS_v1.pdf&#34;&gt;Official Offensive Security Template v1&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ceso&#34;&gt;ceso&lt;/a&gt; improved &lt;a href=&#34;https://raw.githubusercontent.com/noraj/OSCP-Exam-Report-Template-Markdown/master/output/examples/OSEP-exam-report-template_ceso_v1.pdf&#34;&gt;template&lt;/a&gt; v1&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Web Application:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;OSWA&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/noraj/OSCP-Exam-Report-Template-Markdown/master/output/examples/OSWA-exam-report-template_OS_v1.pdf&#34;&gt;Official Offensive Security Template v1&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OSWE&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/noraj/OSCP-Exam-Report-Template-Markdown/master/output/examples/OSWE-exam-report-template_OS_v1.pdf&#34;&gt;Official Offensive Security Template v1&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/noraj&#34;&gt;noraj&lt;/a&gt; improved &lt;a href=&#34;https://raw.githubusercontent.com/noraj/OSCP-Exam-Report-Template-Markdown/master/output/examples/OSWE-exam-report-template_noraj_v1.pdf&#34;&gt;template&lt;/a&gt; v1&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/xl-sec&#34;&gt;xl-sec&lt;/a&gt; improved &lt;a href=&#34;https://raw.githubusercontent.com/noraj/OSCP-Exam-Report-Template-Markdown/master/output/examples/OSWE-exam-report-template_xl-sec_v1.pdf&#34;&gt;template&lt;/a&gt; v1&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Exploit Development:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;OSED&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/noraj/OSCP-Exam-Report-Template-Markdown/master/output/examples/OSED-exam-report-template_OS_v1.pdf&#34;&gt;Official Offensive Security Template v1&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/epi052&#34;&gt;epi&lt;/a&gt; improved &lt;a href=&#34;https://raw.githubusercontent.com/noraj/OSCP-Exam-Report-Template-Markdown/master/output/examples/OSED-exam-report-template_epi_v1.pdf&#34;&gt;template&lt;/a&gt; v1&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OSEE&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/noraj/OSCP-Exam-Report-Template-Markdown/master/output/examples/OSEE-exam-report-template_OS_v1.pdf&#34;&gt;Official Offensive Security Template v1&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OSCE&lt;/strong&gt; (&lt;strong&gt;deprecated&lt;/strong&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/noraj/OSCP-Exam-Report-Template-Markdown/master/output/examples/OSCE-exam-report-template_OS_v1.pdf&#34;&gt;Official Offensive Security Template v1&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OSMR&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/noraj/OSCP-Exam-Report-Template-Markdown/master/output/examples/OSMR-exam-report-template_OS_v1.pdf&#34;&gt;Official Offensive Security Template v1&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Security Operations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;OSDA&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/noraj/OSCP-Exam-Report-Template-Markdown/master/output/examples/OSDA-exam-report-template_OS_v1.pdf&#34;&gt;Official Offensive Security Template v1&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Offensive Security course table:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Exam acronym&lt;/th&gt; &#xA;   &lt;th&gt;Exam name&lt;/th&gt; &#xA;   &lt;th&gt;Lab acronym&lt;/th&gt; &#xA;   &lt;th&gt;Lab name&lt;/th&gt; &#xA;   &lt;th&gt;Course designation&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OSCP&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Offensive Security Certified Professional&lt;/td&gt; &#xA;   &lt;td&gt;PWK&lt;/td&gt; &#xA;   &lt;td&gt;Penetration Testing with Kali Linux&lt;/td&gt; &#xA;   &lt;td&gt;PEN-200&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OSWP&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Offensive Security Wireless Professional&lt;/td&gt; &#xA;   &lt;td&gt;OSWA&lt;/td&gt; &#xA;   &lt;td&gt;Offensive Security Wireless Attacks&lt;/td&gt; &#xA;   &lt;td&gt;PEN-210&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OSEP&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Offensive Security Experienced Penetration Tester&lt;/td&gt; &#xA;   &lt;td&gt;ETBD&lt;/td&gt; &#xA;   &lt;td&gt;Evasion Techniques and Breaching Defenses&lt;/td&gt; &#xA;   &lt;td&gt;PEN-300&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OSWA&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Offensive Security Web Assessor&lt;/td&gt; &#xA;   &lt;td&gt;WAKL&lt;/td&gt; &#xA;   &lt;td&gt;Web Attacks with Kali Linux&lt;/td&gt; &#xA;   &lt;td&gt;WEB-200&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OSWE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Offensive Security Web Expert&lt;/td&gt; &#xA;   &lt;td&gt;AWAE&lt;/td&gt; &#xA;   &lt;td&gt;Advanced Web Attacks and Exploitation&lt;/td&gt; &#xA;   &lt;td&gt;WEB-300&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OSED&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Offensive Security Exploit Developer&lt;/td&gt; &#xA;   &lt;td&gt;WUMED&lt;/td&gt; &#xA;   &lt;td&gt;Windows User Mode Exploit Development&lt;/td&gt; &#xA;   &lt;td&gt;EXP-301&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OSMR&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Offensive Security macOS Researcher&lt;/td&gt; &#xA;   &lt;td&gt;MCB&lt;/td&gt; &#xA;   &lt;td&gt;macOS Control Bypasses&lt;/td&gt; &#xA;   &lt;td&gt;EXP-312&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OSEE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Offensive Security Exploitation Expert&lt;/td&gt; &#xA;   &lt;td&gt;AWE&lt;/td&gt; &#xA;   &lt;td&gt;Advanced Windows Exploitation&lt;/td&gt; &#xA;   &lt;td&gt;EXP-401&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OSCE&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Offensive Security Certified Expert&lt;/td&gt; &#xA;   &lt;td&gt;CTP&lt;/td&gt; &#xA;   &lt;td&gt;Cracking the Perimeter&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OSDA&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Offensive Security Defense Analyst&lt;/td&gt; &#xA;   &lt;td&gt;SODA&lt;/td&gt; &#xA;   &lt;td&gt;Security Operations and Defensive Analysis&lt;/td&gt; &#xA;   &lt;td&gt;SOC-200&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Community projects&lt;/h2&gt; &#xA;&lt;p&gt;Docker containers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ret2src/OSCP-Exam-Report-Template-Markdown#docker&#34;&gt;ret2src docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Tripex48/OSCP-Exam-Report-Template-Markdown#docker&#34;&gt;Tripex48 docker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Mentions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;John Hammond - OSCP - Taking Notes &amp;amp; Resources (video) (2019-10-06) &lt;a href=&#34;https://www.youtube.com/watch?v=MQGozZzHUwQ&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/MQGozZzHUwQ/0.jpg&#34; alt=&#34;OSCP - Taking Notes &amp;amp; Resources&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;John Hammond - OSEP - Offensive Security Experienced Penetration Tester (video) (2021-02-05) &lt;a href=&#34;https://www.youtube.com/watch?v=iUPyiJbN4l4&#34;&gt;&lt;img src=&#34;https://i.ytimg.com/vi/iUPyiJbN4l4/maxresdefault.jpg&#34; alt=&#34;OSEP - Offensive Security Experienced Penetration Tester&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;3rd &lt;a href=&#34;https://awesomeopensource.com/projects/offensive-security&#34;&gt;Top Offensive Security Open Source Projects&lt;/a&gt; (2022-01-27)&lt;/li&gt; &#xA; &lt;li&gt;Recent mentions on social medias: &lt;a href=&#34;https://www.social-searcher.com/social-buzz/?q5=https%3A%2F%2Fgithub.com%2Fnoraj%2FOSCP-Exam-Report-Template-Markdown&#34;&gt;Social-searcher&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Articles: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://falconspy.medium.com/unofficial-oscp-approved-tools-b2b4e889e707&#34;&gt;Unofficial OSCP Approved Tools&lt;/a&gt; by FalconSpy (2019-06-05)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://cjhackerz.net/posts/journey-from-nothing-to-oscp/&#34;&gt;Journey from nothing to OSCP&lt;/a&gt; by CJHackerz (2020-06-30)&lt;/li&gt; &#xA;   &lt;li&gt;Stress-free OSCP report making by Craig Underhill (2020-04-06) (&lt;a href=&#34;https://web.archive.org/web/20210729100632/https://craigunder.me/stress-free-oscp-report-making/&#34;&gt;Raw Archive&lt;/a&gt;, use &lt;code&gt;about:reader?url=&lt;/code&gt; for better look in Firefox)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Stargazers over time&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/noraj/OSCP-Exam-Report-Template-Markdown&#34;&gt;&lt;img src=&#34;https://starchart.cc/noraj/OSCP-Exam-Report-Template-Markdown.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Report Templates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;OSCP&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://help.offensive-security.com/hc/en-us/articles/360040165632#suggested-documentation-templates&#34;&gt;Official Offensive Security Template&lt;/a&gt; (UNLICENSED)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/whoisflynn/OSCP-Exam-Report-Template&#34;&gt;whoisflynn improved template&lt;/a&gt; (UNLICENSED)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OSWE&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://help.offensive-security.com/hc/en-us/articles/360046869951-OSWE-Exam-Guide#suggested-documentation-templates&#34;&gt;Official Offensive Security Template&lt;/a&gt; (UNLICENSED)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/noraj/OSCP-Exam-Report-Template-Markdown/master/src/OSWE-exam-report-template_noraj_v1.md&#34;&gt;noraj improved template&lt;/a&gt; (UNLICENSED)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/noraj/OSCP-Exam-Report-Template-Markdown/master/src/OSWE-exam-report-template_xl-sec_v1.md&#34;&gt;XL-SEC improved template&lt;/a&gt; (UNLICENSED)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OSCE&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://help.offensive-security.com/hc/en-us/articles/360046801331-OSCE-Exam-Guide#suggested-documentation-templates&#34;&gt;Official Offensive Security Template&lt;/a&gt; (UNLICENSED)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OSEE&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://help.offensive-security.com/hc/en-us/articles/360046458732-OSEE-Exam-Guide#Documentation%20Requirements&#34;&gt;Official Offensive Security Template&lt;/a&gt; (UNLICENSED)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OSWP&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://help.offensive-security.com/hc/en-us/articles/360046904731-OSWP-Exam-Guide#suggested-documentation-templates&#34;&gt;Official Offensive Security Template&lt;/a&gt; (UNLICENSED)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OSED&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://help.offensive-security.com/hc/en-us/articles/360052977212-OSED-Exam-Guide#suggested-documentation-templates&#34;&gt;Official Offensive Security Template&lt;/a&gt; (UNLICENSED)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/noraj/OSCP-Exam-Report-Template-Markdown/master/src/OSED-exam-report-template_epi_v1.md&#34;&gt;epi improved template&lt;/a&gt; (UNLICENSED)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OSEP&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://help.offensive-security.com/hc/en-us/articles/360050293792-OSEP-Exam-Guide#suggested-documentation-templates&#34;&gt;Official Offensive Security Template&lt;/a&gt; (UNLICENSED)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/noraj/OSCP-Exam-Report-Template-Markdown/master/src/OSEP-exam-report-template_ceso_v1.md&#34;&gt;ceso improved template&lt;/a&gt; (UNLICENSED)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OSWA&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://help.offensive-security.com/hc/en-us/articles/4410105650964-OSWA-Exam-Guide#suggested-documentation-templates&#34;&gt;Official Offensive Security Template&lt;/a&gt; (UNLICENSED)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OSDA&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://help.offensive-security.com/hc/en-us/articles/4410105675412-OSDA-Exam-Guide#h_01GGD1AKE9DRDAJZ91PXZ5X0PN&#34;&gt;Official Offensive Security Template&lt;/a&gt; (UNLICENSED)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OSMR&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://help.offensive-security.com/hc/en-us/articles/4411107766804-OSMR-Exam-Guide#OSMRExamGuide-SuggestedDocumentationTemplates&#34;&gt;Official Offensive Security Template&lt;/a&gt; (UNLICENSED)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Pandoc Template:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Eisvogel (&lt;a href=&#34;https://github.com/Wandmalfarbe/pandoc-latex-template/raw/master/LICENSE&#34;&gt;LICENCE&lt;/a&gt;): &lt;a href=&#34;https://github.com/Wandmalfarbe/pandoc-latex-template&#34;&gt;https://github.com/Wandmalfarbe/pandoc-latex-template&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Placeholder image:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generated by &lt;a href=&#34;https://imgplaceholder.com/&#34;&gt;https://imgplaceholder.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Netflix/fast_jsonapi</title>
    <updated>2023-04-09T02:01:15Z</updated>
    <id>tag:github.com,2023-04-09:/Netflix/fast_jsonapi</id>
    <link href="https://github.com/Netflix/fast_jsonapi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;No Longer Maintained - A lightning fast JSON:API serializer for Ruby Objects.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Fast JSON API ‚Äî &lt;span&gt;‚ö†&lt;/span&gt; This project is no longer maintained!!!! &lt;span&gt;‚ö†&lt;/span&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/Netflix/fast_jsonapi&#34;&gt;&lt;img src=&#34;https://travis-ci.org/Netflix/fast_jsonapi.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A lightning fast &lt;a href=&#34;http://jsonapi.org/&#34;&gt;JSON:API&lt;/a&gt; serializer for Ruby Objects.&lt;/p&gt; &#xA;&lt;h3&gt;Since this project is no longer maintained, please consider using alternatives or the forked project &lt;a href=&#34;https://github.com/jsonapi-serializer/jsonapi-serializer&#34;&gt;jsonapi-serializer/jsonapi-serializer&lt;/a&gt;!&lt;/h3&gt; &#xA;&lt;h1&gt;Performance Comparison&lt;/h1&gt; &#xA;&lt;p&gt;We compare serialization times with Active Model Serializer as part of RSpec performance tests included on this library. We want to ensure that with every change on this library, serialization time is at least &lt;code&gt;25 times&lt;/code&gt; faster than Active Model Serializers on up to current benchmark of 1000 records. Please read the &lt;a href=&#34;https://github.com/Netflix/fast_jsonapi/raw/master/performance_methodology.md&#34;&gt;performance document&lt;/a&gt; for any questions related to methodology.&lt;/p&gt; &#xA;&lt;h2&gt;Benchmark times for 250 records&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rspec&#xA;Active Model Serializer serialized 250 records in 138.71 ms&#xA;Fast JSON API serialized 250 records in 3.01 ms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/fast_jsonapi/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/fast_jsonapi/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/fast_jsonapi/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/fast_jsonapi/master/#rails-generator&#34;&gt;Rails Generator&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/fast_jsonapi/master/#model-definition&#34;&gt;Model Definition&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/fast_jsonapi/master/#serializer-definition&#34;&gt;Serializer Definition&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/fast_jsonapi/master/#object-serialization&#34;&gt;Object Serialization&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/fast_jsonapi/master/#compound-document&#34;&gt;Compound Document&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/fast_jsonapi/master/#key-transforms&#34;&gt;Key Transforms&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/fast_jsonapi/master/#collection-serialization&#34;&gt;Collection Serialization&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/fast_jsonapi/master/#caching&#34;&gt;Caching&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/fast_jsonapi/master/#params&#34;&gt;Params&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/fast_jsonapi/master/#conditional-attributes&#34;&gt;Conditional Attributes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/fast_jsonapi/master/#conditional-relationships&#34;&gt;Conditional Relationships&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/fast_jsonapi/master/#sparse-fieldsets&#34;&gt;Sparse Fieldsets&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/fast_jsonapi/master/#using-helper-methods&#34;&gt;Using helper methods&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Netflix/fast_jsonapi/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Declaration syntax similar to Active Model Serializer&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;code&gt;belongs_to&lt;/code&gt;, &lt;code&gt;has_many&lt;/code&gt; and &lt;code&gt;has_one&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support for compound documents (included)&lt;/li&gt; &#xA; &lt;li&gt;Optimized serialization of compound documents&lt;/li&gt; &#xA; &lt;li&gt;Caching&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add this line to your application&#39;s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;fast_jsonapi&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Rails Generator&lt;/h3&gt; &#xA;&lt;p&gt;You can use the bundled generator if you are using the library inside of a Rails project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rails g serializer Movie name year&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a new serializer in &lt;code&gt;app/serializers/movie_serializer.rb&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Model Definition&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Movie&#xA;  attr_accessor :id, :name, :year, :actor_ids, :owner_id, :movie_type_id&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Serializer Definition&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MovieSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;  set_type :movie  # optional&#xA;  set_id :owner_id # optional&#xA;  attributes :name, :year&#xA;  has_many :actors&#xA;  belongs_to :owner, record_type: :user&#xA;  belongs_to :movie_type&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sample Object&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;movie = Movie.new&#xA;movie.id = 232&#xA;movie.name = &#39;test movie&#39;&#xA;movie.actor_ids = [1, 2, 3]&#xA;movie.owner_id = 3&#xA;movie.movie_type_id = 1&#xA;movie&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Object Serialization&lt;/h3&gt; &#xA;&lt;h4&gt;Return a hash&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;hash = MovieSerializer.new(movie).serializable_hash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Return Serialized JSON&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;json_string = MovieSerializer.new(movie).serialized_json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Serialized Output&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;data&#34;: {&#xA;    &#34;id&#34;: &#34;3&#34;,&#xA;    &#34;type&#34;: &#34;movie&#34;,&#xA;    &#34;attributes&#34;: {&#xA;      &#34;name&#34;: &#34;test movie&#34;,&#xA;      &#34;year&#34;: null&#xA;    },&#xA;    &#34;relationships&#34;: {&#xA;      &#34;actors&#34;: {&#xA;        &#34;data&#34;: [&#xA;          {&#xA;            &#34;id&#34;: &#34;1&#34;,&#xA;            &#34;type&#34;: &#34;actor&#34;&#xA;          },&#xA;          {&#xA;            &#34;id&#34;: &#34;2&#34;,&#xA;            &#34;type&#34;: &#34;actor&#34;&#xA;          }&#xA;        ]&#xA;      },&#xA;      &#34;owner&#34;: {&#xA;        &#34;data&#34;: {&#xA;          &#34;id&#34;: &#34;3&#34;,&#xA;          &#34;type&#34;: &#34;user&#34;&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Key Transforms&lt;/h3&gt; &#xA;&lt;p&gt;By default fast_jsonapi underscores the key names. It supports the same key transforms that are supported by AMS. Here is the syntax of specifying a key transform&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MovieSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;  # Available options :camel, :camel_lower, :dash, :underscore(default)&#xA;  set_key_transform :camel&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here are examples of how these options transform the keys&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set_key_transform :camel # &#34;some_key&#34; =&amp;gt; &#34;SomeKey&#34;&#xA;set_key_transform :camel_lower # &#34;some_key&#34; =&amp;gt; &#34;someKey&#34;&#xA;set_key_transform :dash # &#34;some_key&#34; =&amp;gt; &#34;some-key&#34;&#xA;set_key_transform :underscore # &#34;some_key&#34; =&amp;gt; &#34;some_key&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Attributes&lt;/h3&gt; &#xA;&lt;p&gt;Attributes are defined in FastJsonapi using the &lt;code&gt;attributes&lt;/code&gt; method. This method is also aliased as &lt;code&gt;attribute&lt;/code&gt;, which is useful when defining a single attribute.&lt;/p&gt; &#xA;&lt;p&gt;By default, attributes are read directly from the model property of the same name. In this example, &lt;code&gt;name&lt;/code&gt; is expected to be a property of the object being serialized:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MovieSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;&#xA;  attribute :name&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Custom attributes that must be serialized but do not exist on the model can be declared using Ruby block syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MovieSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;&#xA;  attributes :name, :year&#xA;&#xA;  attribute :name_with_year do |object|&#xA;    &#34;#{object.name} (#{object.year})&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The block syntax can also be used to override the property on the object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MovieSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;&#xA;  attribute :name do |object|&#xA;    &#34;#{object.name} Part 2&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Attributes can also use a different name by passing the original method or accessor with a proc shortcut:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MovieSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;&#xA;  attributes :name&#xA;&#xA;  attribute :released_in_year, &amp;amp;:year&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Links Per Object&lt;/h3&gt; &#xA;&lt;p&gt;Links are defined in FastJsonapi using the &lt;code&gt;link&lt;/code&gt; method. By default, links are read directly from the model property of the same name. In this example, &lt;code&gt;public_url&lt;/code&gt; is expected to be a property of the object being serialized.&lt;/p&gt; &#xA;&lt;p&gt;You can configure the method to use on the object for example a link with key &lt;code&gt;self&lt;/code&gt; will get set to the value returned by a method called &lt;code&gt;url&lt;/code&gt; on the movie object.&lt;/p&gt; &#xA;&lt;p&gt;You can also use a block to define a url as shown in &lt;code&gt;custom_url&lt;/code&gt;. You can access params in these blocks as well as shown in &lt;code&gt;personalized_url&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MovieSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;&#xA;  link :public_url&#xA;&#xA;  link :self, :url&#xA;&#xA;  link :custom_url do |object|&#xA;    &#34;http://movies.com/#{object.name}-(#{object.year})&#34;&#xA;  end&#xA;&#xA;  link :personalized_url do |object, params|&#xA;    &#34;http://movies.com/#{object.name}-#{params[:user].reference_code}&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Links on a Relationship&lt;/h4&gt; &#xA;&lt;p&gt;You can specify &lt;a href=&#34;http://jsonapi.org/format/#document-resource-object-relationships&#34;&gt;relationship links&lt;/a&gt; by using the &lt;code&gt;links:&lt;/code&gt; option on the serializer. Relationship links in JSON API are useful if you want to load a parent document and then load associated documents later due to size constraints (see &lt;a href=&#34;http://jsonapi.org/format/#document-resource-object-related-resource-links&#34;&gt;related resource links&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MovieSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;&#xA;  has_many :actors, links: {&#xA;    self: :url,&#xA;    related: -&amp;gt; (object) {&#xA;      &#34;https://movies.com/#{object.id}/actors&#34;&#xA;    }&#xA;  }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a &lt;code&gt;self&lt;/code&gt; reference for the relationship, and a &lt;code&gt;related&lt;/code&gt; link for loading the actors relationship later. NB: This will not automatically disable loading the data in the relationship, you&#39;ll need to do that using the &lt;code&gt;lazy_load_data&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  has_many :actors, lazy_load_data: true, links: {&#xA;    self: :url,&#xA;    related: -&amp;gt; (object) {&#xA;      &#34;https://movies.com/#{object.id}/actors&#34;&#xA;    }&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Meta Per Resource&lt;/h3&gt; &#xA;&lt;p&gt;For every resource in the collection, you can include a meta object containing non-standard meta-information about a resource that can not be represented as an attribute or relationship.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MovieSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;&#xA;  meta do |movie|&#xA;    {&#xA;      years_since_release: Date.current.year - movie.year&#xA;    }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compound Document&lt;/h3&gt; &#xA;&lt;p&gt;Support for top-level and nested included associations through &lt;code&gt;options[:include]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;options = {}&#xA;options[:meta] = { total: 2 }&#xA;options[:links] = {&#xA;  self: &#39;...&#39;,&#xA;  next: &#39;...&#39;,&#xA;  prev: &#39;...&#39;&#xA;}&#xA;options[:include] = [:actors, :&#39;actors.agency&#39;, :&#39;actors.agency.state&#39;]&#xA;MovieSerializer.new([movie, movie], options).serialized_json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Collection Serialization&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;options[:meta] = { total: 2 }&#xA;options[:links] = {&#xA;  self: &#39;...&#39;,&#xA;  next: &#39;...&#39;,&#xA;  prev: &#39;...&#39;&#xA;}&#xA;hash = MovieSerializer.new([movie, movie], options).serializable_hash&#xA;json_string = MovieSerializer.new([movie, movie], options).serialized_json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Control Over Collection Serialization&lt;/h4&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;is_collection&lt;/code&gt; option to have better control over collection serialization.&lt;/p&gt; &#xA;&lt;p&gt;If this option is not provided or &lt;code&gt;nil&lt;/code&gt; autedetect logic is used to try understand if provided resource is a single object or collection.&lt;/p&gt; &#xA;&lt;p&gt;Autodetect logic is compatible with most DB toolkits (ActiveRecord, Sequel, etc.) but &lt;strong&gt;cannot&lt;/strong&gt; guarantee that single vs collection will be always detected properly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;options[:is_collection]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;was introduced to be able to have precise control this behavior&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;nil&lt;/code&gt; or not provided: will try to autodetect single vs collection (please, see notes above)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;true&lt;/code&gt; will always treat input resource as &lt;em&gt;collection&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;false&lt;/code&gt; will always treat input resource as &lt;em&gt;single object&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Caching&lt;/h3&gt; &#xA;&lt;p&gt;Requires a &lt;code&gt;cache_key&lt;/code&gt; method be defined on model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MovieSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;  set_type :movie  # optional&#xA;  cache_options enabled: true, cache_length: 12.hours&#xA;  attributes :name, :year&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Params&lt;/h3&gt; &#xA;&lt;p&gt;In some cases, attribute values might require more information than what is available on the record, for example, access privileges or other information related to a current authenticated user. The &lt;code&gt;options[:params]&lt;/code&gt; value covers these cases by allowing you to pass in a hash of additional parameters necessary for your use case.&lt;/p&gt; &#xA;&lt;p&gt;Leveraging the new params is easy, when you define a custom attribute or relationship with a block you opt-in to using params by adding it as a block parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MovieSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;&#xA;  attributes :name, :year&#xA;  attribute :can_view_early do |movie, params|&#xA;    # in here, params is a hash containing the `:current_user` key&#xA;    params[:current_user].is_employee? ? true : false&#xA;  end&#xA;&#xA;  belongs_to :primary_agent do |movie, params|&#xA;    # in here, params is a hash containing the `:current_user` key&#xA;    params[:current_user].is_employee? ? true : false&#xA;  end&#xA;end&#xA;&#xA;# ...&#xA;current_user = User.find(cookies[:current_user_id])&#xA;serializer = MovieSerializer.new(movie, {params: {current_user: current_user}})&#xA;serializer.serializable_hash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Custom attributes and relationships that only receive the resource are still possible by defining the block to only receive one argument.&lt;/p&gt; &#xA;&lt;h3&gt;Conditional Attributes&lt;/h3&gt; &#xA;&lt;p&gt;Conditional attributes can be defined by passing a Proc to the &lt;code&gt;if&lt;/code&gt; key on the &lt;code&gt;attribute&lt;/code&gt; method. Return &lt;code&gt;true&lt;/code&gt; if the attribute should be serialized, and &lt;code&gt;false&lt;/code&gt; if not. The record and any params passed to the serializer are available inside the Proc as the first and second parameters, respectively.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MovieSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;&#xA;  attributes :name, :year&#xA;  attribute :release_year, if: Proc.new { |record|&#xA;    # Release year will only be serialized if it&#39;s greater than 1990&#xA;    record.release_year &amp;gt; 1990&#xA;  }&#xA;&#xA;  attribute :director, if: Proc.new { |record, params|&#xA;    # The director will be serialized only if the :admin key of params is true&#xA;    params &amp;amp;&amp;amp; params[:admin] == true&#xA;  }&#xA;end&#xA;&#xA;# ...&#xA;current_user = User.find(cookies[:current_user_id])&#xA;serializer = MovieSerializer.new(movie, { params: { admin: current_user.admin? }})&#xA;serializer.serializable_hash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Conditional Relationships&lt;/h3&gt; &#xA;&lt;p&gt;Conditional relationships can be defined by passing a Proc to the &lt;code&gt;if&lt;/code&gt; key. Return &lt;code&gt;true&lt;/code&gt; if the relationship should be serialized, and &lt;code&gt;false&lt;/code&gt; if not. The record and any params passed to the serializer are available inside the Proc as the first and second parameters, respectively.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MovieSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;&#xA;  # Actors will only be serialized if the record has any associated actors&#xA;  has_many :actors, if: Proc.new { |record| record.actors.any? }&#xA;&#xA;  # Owner will only be serialized if the :admin key of params is true&#xA;  belongs_to :owner, if: Proc.new { |record, params| params &amp;amp;&amp;amp; params[:admin] == true }&#xA;end&#xA;&#xA;# ...&#xA;current_user = User.find(cookies[:current_user_id])&#xA;serializer = MovieSerializer.new(movie, { params: { admin: current_user.admin? }})&#xA;serializer.serializable_hash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sparse Fieldsets&lt;/h3&gt; &#xA;&lt;p&gt;Attributes and relationships can be selectively returned per record type by using the &lt;code&gt;fields&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MovieSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;&#xA;  attributes :name, :year&#xA;end&#xA;&#xA;serializer = MovieSerializer.new(movie, { fields: { movie: [:name] } })&#xA;serializer.serializable_hash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using helper methods&lt;/h3&gt; &#xA;&lt;p&gt;You can mix-in code from another ruby module into your serializer class to reuse functions across your app.&lt;/p&gt; &#xA;&lt;p&gt;Since a serializer is evaluated in a the context of a &lt;code&gt;class&lt;/code&gt; rather than an &lt;code&gt;instance&lt;/code&gt; of a class, you need to make sure that your methods act as &lt;code&gt;class&lt;/code&gt; methods when mixed in.&lt;/p&gt; &#xA;&lt;h5&gt;Using ActiveSupport::Concern&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&#xA;module AvatarHelper&#xA;  extend ActiveSupport::Concern&#xA;&#xA;  class_methods do&#xA;    def avatar_url(user)&#xA;      user.image.url&#xA;    end&#xA;  end&#xA;end&#xA;&#xA;class UserSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;&#xA;  include AvatarHelper # mixes in your helper method as class method&#xA;&#xA;  set_type :user&#xA;&#xA;  attributes :name, :email&#xA;&#xA;  attribute :avatar do |user|&#xA;    avatar_url(user)&#xA;  end&#xA;end&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Using Plain Old Ruby&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module AvatarHelper&#xA;  def avatar_url(user)&#xA;    user.image.url&#xA;  end&#xA;end&#xA;&#xA;class UserSerializer&#xA;  include FastJsonapi::ObjectSerializer&#xA;&#xA;  extend AvatarHelper # mixes in your helper method as class method&#xA;&#xA;  set_type :user&#xA;&#xA;  attributes :name, :email&#xA;&#xA;  attribute :avatar do |user|&#xA;    avatar_url(user)&#xA;  end&#xA;end&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customizable Options&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Purpose&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;set_type&lt;/td&gt; &#xA;   &lt;td&gt;Type name of Object&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;set_type :movie &lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;key&lt;/td&gt; &#xA;   &lt;td&gt;Key of Object&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;belongs_to :owner, key: :user &lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;set_id&lt;/td&gt; &#xA;   &lt;td&gt;ID of Object&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;set_id :owner_id &lt;/code&gt; or ```set_id {&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cache_options&lt;/td&gt; &#xA;   &lt;td&gt;Hash to enable caching and set cache length&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cache_options enabled: true, cache_length: 12.hours, race_condition_ttl: 10.seconds&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;id_method_name&lt;/td&gt; &#xA;   &lt;td&gt;Set custom method name to get ID of an object (If block is provided for the relationship, &lt;code&gt;id_method_name&lt;/code&gt; is invoked on the return value of the block instead of the resource object)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;has_many :locations, id_method_name: :place_ids &lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;object_method_name&lt;/td&gt; &#xA;   &lt;td&gt;Set custom method name to get related objects&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;has_many :locations, object_method_name: :places &lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;record_type&lt;/td&gt; &#xA;   &lt;td&gt;Set custom Object Type for a relationship&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;belongs_to :owner, record_type: :user&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;serializer&lt;/td&gt; &#xA;   &lt;td&gt;Set custom Serializer for a relationship&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;has_many :actors, serializer: :custom_actor&lt;/code&gt; or &lt;code&gt;has_many :actors, serializer: MyApp::Api::V1::ActorSerializer&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;polymorphic&lt;/td&gt; &#xA;   &lt;td&gt;Allows different record types for a polymorphic association&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;has_many :targets, polymorphic: true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;polymorphic&lt;/td&gt; &#xA;   &lt;td&gt;Sets custom record types for each object class in a polymorphic association&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;has_many :targets, polymorphic: { Person =&amp;gt; :person, Group =&amp;gt; :group }&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Instrumentation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;fast_jsonapi&lt;/code&gt; also has builtin &lt;a href=&#34;https://www.skylight.io/&#34;&gt;Skylight&lt;/a&gt; integration. To enable, add the following to an initializer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;fast_jsonapi/instrumentation/skylight&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Skylight relies on &lt;code&gt;ActiveSupport::Notifications&lt;/code&gt; to track these two core methods. If you would like to use these notifications without using Skylight, simply require the instrumentation integration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;fast_jsonapi/instrumentation&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The two instrumented notifcations are supplied by these two constants:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;FastJsonapi::ObjectSerializer::SERIALIZABLE_HASH_NOTIFICATION&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FastJsonapi::ObjectSerializer::SERIALIZED_JSON_NOTIFICATION&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is also possible to instrument one method without the other by using one of the following require statements:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;fast_jsonapi/instrumentation/serializable_hash&#39;&#xA;require &#39;fast_jsonapi/instrumentation/serialized_json&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Same goes for the Skylight integration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;fast_jsonapi/instrumentation/skylight/normalizers/serializable_hash&#39;&#xA;require &#39;fast_jsonapi/instrumentation/skylight/normalizers/serialized_json&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/Netflix/fast_jsonapi/raw/master/CONTRIBUTING.md&#34;&gt;contribution check&lt;/a&gt; for more details on contributing&lt;/p&gt; &#xA;&lt;h3&gt;Running Tests&lt;/h3&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;http://rspec.info/&#34;&gt;RSpec&lt;/a&gt; for testing. We have unit tests, functional tests and performance tests. To run tests use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rspec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run tests without the performance tests (for quicker test runs):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rspec spec --tag ~performance:true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run tests only performance tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rspec spec --tag performance:true&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>