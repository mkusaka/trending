<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-26T02:02:58Z</updated>
  <subtitle>Weekly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Shopify/shipit-engine</title>
    <updated>2023-02-26T02:02:58Z</updated>
    <id>tag:github.com,2023-02-26:/Shopify/shipit-engine</id>
    <link href="https://github.com/Shopify/shipit-engine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Deployment coordination&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Shipit - Documentation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/Shopify/shipit-engine&#34;&gt;&lt;img src=&#34;https://travis-ci.org/Shopify/shipit-engine.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://badge.fury.io/rb/shipit-engine&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/shipit-engine.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Shipit&lt;/strong&gt; is a deployment tool that makes shipping code better for everyone. It&#39;s especially great for large teams of developers and designers who work together to build and deploy GitHub repos. You can use it to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;add new applications to your deployment environment without having to change core configuration files repeatedly â€” &lt;code&gt;shipit.yml&lt;/code&gt; is basically plug and play&lt;/li&gt; &#xA; &lt;li&gt;control the pace of development by pushing, locking, and rolling back deploys from within Shipit&lt;/li&gt; &#xA; &lt;li&gt;enforce checklists and provide monitoring right at the point of deployment.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Shipit is compatible with just about anything that you can deploy using a script. It natively detects stacks using &lt;a href=&#34;http://bundler.io/&#34;&gt;bundler&lt;/a&gt; and &lt;a href=&#34;http://capistranorb.com/&#34;&gt;Capistrano&lt;/a&gt;, and it has tools that make it easy to deploy to &lt;a href=&#34;https://www.heroku.com/&#34;&gt;Heroku&lt;/a&gt; or &lt;a href=&#34;https://rubygems.org/&#34;&gt;RubyGems&lt;/a&gt;. At Shopify, we&#39;ve used Shipit to synchronize and deploy hundreds of projects across dozens of teams, using Python, Rails, RubyGems, Java, and Go.&lt;/p&gt; &#xA;&lt;p&gt;This guide aims to help you &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#installation-and-setup&#34;&gt;set up&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#using-shipit&#34;&gt;use&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#reference&#34;&gt;understand&lt;/a&gt; Shipit.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Shipit requires a database (MySQL, PostgreSQL or SQLite3), redis, and Ruby 2.6 or superior.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2 id=&#34;toc&#34;&gt;Table of contents&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;I. INSTALLATION &amp;amp; SETUP&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#updating-shipit&#34;&gt;Updating an existing installation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;II. USING SHIPIT&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#adding-stacks&#34;&gt;Adding stacks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#working-on-stacks&#34;&gt;Working on stacks&lt;/a&gt;,&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#configuring-stacks&#34;&gt;Configuring stacks&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;III. REFERENCE&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#configuring-shipit&#34;&gt;Format and content of shipit.yml&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#script-parameters&#34;&gt;Script parameters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#configuring-providers&#34;&gt;Configuring providers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/examples/shipit.yml&#34;&gt;Free samples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;IV. INTEGRATING&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#integrating-webhooks&#34;&gt;Registering webhooks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;V. CONTRIBUTING&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#contributing-instructions&#34;&gt;Instructions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#contributing-local-dev&#34;&gt;Local development&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2 id=&#34;installation-and-setup&#34;&gt;I. INSTALLATION &amp;amp; SETUP&lt;/h2&gt; &#xA;&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;To create a new Shipit installation you can follow the &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/docs/setup.md&#34;&gt;setup guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3 id=&#34;updating-shipit&#34;&gt;Updating an existing installation&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If you locked the gem to a specific version in your Gemfile, update it there.&lt;/li&gt; &#xA; &lt;li&gt;Update the &lt;code&gt;shipit-engine&lt;/code&gt; gem with &lt;code&gt;bundle update shipit-engine&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install new migrations with &lt;code&gt;rake shipit:install:migrations db:migrate&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3 id=&#34;special-update&#34;&gt;Specific updates requiring more steps&lt;/h3&gt; &#xA;&lt;p&gt;If you are upgrading from &lt;code&gt;0.21&lt;/code&gt; or older, you will have to update the configuration. Please follow &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/docs/updates/0.22.md&#34;&gt;the dedicated upgrade guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2 id=&#34;using-shipit&#34;&gt;II. USING SHIPIT&lt;/h2&gt; &#xA;&lt;p&gt;The main workflows in Shipit are &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#adding-stacks&#34;&gt;adding stacks&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#working-on-stacks&#34;&gt;working on stacks&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#configuring-stacks&#34;&gt;configuring stacks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;strong&gt;stack&lt;/strong&gt; is composed of a GitHub repository, a branch, and a deployment environment. Shipit tracks the commits made to the branch, and then displays them in the stack overview. From there, you can deploy the branch to whatever environment you&#39;ve chosen (some typical environments include &lt;em&gt;production&lt;/em&gt;, &lt;em&gt;staging&lt;/em&gt;, &lt;em&gt;performance&lt;/em&gt;, etc.).&lt;/p&gt; &#xA;&lt;h3 id=&#34;adding-stacks&#34;&gt;Add a new stack&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;From the main page in Shipit, click &lt;strong&gt;Add a stack&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;On the &lt;strong&gt;Create a stack&lt;/strong&gt; page, enter the required information: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Repo&lt;/li&gt; &#xA;   &lt;li&gt;Branch&lt;/li&gt; &#xA;   &lt;li&gt;Environment&lt;/li&gt; &#xA;   &lt;li&gt;Deploy URL&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;When you&#39;re finished, click &lt;strong&gt;Create stack&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3 id=&#34;working-on-stacks&#34;&gt;Work on an existing stack&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If you want to browse the list of available stacks, click &lt;strong&gt;Show all stacks&lt;/strong&gt; on the main page in Shipit. If you know the name of the stack you&#39;re looking for, enter it in the search field.&lt;/li&gt; &#xA; &lt;li&gt;Click the name of the stack you want to open.&lt;/li&gt; &#xA; &lt;li&gt;From a stack&#39;s overview page, you can: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;review previous deploys&lt;/li&gt; &#xA;   &lt;li&gt;deploy any undeployed commits by clicking &lt;strong&gt;Deploy&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;rollback to an earlier build by clicking &lt;strong&gt;Rollback to this deploy&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;adjust the stack&#39;s settings by clicking the gear icon in the page header&lt;/li&gt; &#xA;   &lt;li&gt;perform any custom tasks that are defined in the &lt;code&gt;shipit.yml&lt;/code&gt; file&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;When you&#39;re ready to deploy an undeployed commit, click the relevant &lt;strong&gt;Deploy&lt;/strong&gt; button on the stack&#39;s overview page.&lt;/li&gt; &#xA; &lt;li&gt;From the &lt;strong&gt;Deploy&lt;/strong&gt; page, complete the checklist, then click &lt;strong&gt;Create deploy&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3 id=&#34;configuring-stacks&#34;&gt;Edit stack settings&lt;/h3&gt; &#xA;&lt;p&gt;To edit a stack&#39;s settings, open the stack in Shipit, then click the gear icon in the page header.&lt;/p&gt; &#xA;&lt;p&gt;From a stack&#39;s &lt;strong&gt;Settings&lt;/strong&gt; page, you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;change the deploy URL&lt;/li&gt; &#xA; &lt;li&gt;enable and disable continuous deployment&lt;/li&gt; &#xA; &lt;li&gt;lock and unlock deploys through Shipit&lt;/li&gt; &#xA; &lt;li&gt;resynchronize the stack with GitHub&lt;/li&gt; &#xA; &lt;li&gt;delete the stack from Shipit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2 id=&#34;reference&#34;&gt;III. REFERENCE&lt;/h2&gt; &#xA;&lt;h3 id=&#34;configuring-shipit&#34;&gt;Configuring &lt;code&gt;shipit.yml&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The settings in the &lt;code&gt;shipit.yml&lt;/code&gt; file relate to the different things you can do with Shipit:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#installing-dependencies&#34;&gt;Installing Dependencies&lt;/a&gt; (&lt;code&gt;dependencies&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#deployment&#34;&gt;Deployment&lt;/a&gt; (&lt;code&gt;deploy&lt;/code&gt;, &lt;code&gt;rollback&lt;/code&gt;, &lt;code&gt;fetch&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#environment&#34;&gt;Environment&lt;/a&gt; (&lt;code&gt;machine.environment&lt;/code&gt;, &lt;code&gt;machine.directory&lt;/code&gt;, &lt;code&gt;machine.cleanup&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#ci&#34;&gt;CI&lt;/a&gt; (&lt;code&gt;ci.require&lt;/code&gt;, &lt;code&gt;ci.hide&lt;/code&gt;, &lt;code&gt;ci.allow_failures&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#merge-queue&#34;&gt;Merge Queue&lt;/a&gt; (&lt;code&gt;merge.revalidate_after&lt;/code&gt;, &lt;code&gt;merge.require&lt;/code&gt;, &lt;code&gt;merge.ignore&lt;/code&gt;, &lt;code&gt;merge.max_divergence&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#custom-tasks&#34;&gt;Custom Tasks&lt;/a&gt; (&lt;code&gt;tasks&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#custom-links&#34;&gt;Custom links&lt;/a&gt; (&lt;code&gt;links&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/#review-process&#34;&gt;Review Process&lt;/a&gt; (&lt;code&gt;review.checklist&lt;/code&gt;, &lt;code&gt;review.monitoring&lt;/code&gt;, &lt;code&gt;review.checks&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All the settings in &lt;code&gt;shipit.yml&lt;/code&gt; are optional. Most applications can be deployed from Shipit without any configuration.&lt;/p&gt; &#xA;&lt;p&gt;Also, if your repository is deployed different ways depending on the environment, you can have an alternative &lt;code&gt;shipit.yml&lt;/code&gt; by including the environment name.&lt;/p&gt; &#xA;&lt;p&gt;For example for a stack like: &lt;code&gt;my-org/my-repo/staging&lt;/code&gt;, &lt;code&gt;shipit.staging.yml&lt;/code&gt; will have priority over &lt;code&gt;shipit.yml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Lastly, if you override the &lt;code&gt;app_name&lt;/code&gt; configuration in your Shipit deployment, &lt;code&gt;yourapp.yml&lt;/code&gt; and &lt;code&gt;yourapp.staging.yml&lt;/code&gt; will work.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3 id=&#34;respecting-bare-files&#34;&gt;Respecting bare &lt;code&gt;shipit.yml&lt;/code&gt; files&lt;/h3&gt; &#xA;&lt;p&gt;Shipit will, by default, respect the &#34;bare&#34; &lt;code&gt;shipit.yml&lt;/code&gt; file as a fallback option if no more specifically-named file exists (such as &lt;code&gt;shipit.staging.yml&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;You can configure this behavior via the attribute &lt;code&gt;Shipit.respect_bare_shipit_file&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The value &lt;code&gt;false&lt;/code&gt; will disable this behavior and instead cause Shipit to emit an error upon deploy if Shipit cannot find a more specifically-named file.&lt;/li&gt; &#xA; &lt;li&gt;Setting this attribute to any other value (&lt;strong&gt;including &lt;code&gt;nil&lt;/code&gt;&lt;/strong&gt;), or not setting this attribute, will cause Shipit to use the default behavior of respecting bare &lt;code&gt;shipit.yml&lt;/code&gt; files.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can determine if Shipit is configured to respect bare files using &lt;code&gt;Shipit.respect_bare_shipit_file?&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3 id=&#34;installing-dependencies&#34;&gt;Installing dependencies&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;strong&gt;&lt;code&gt;dependencies&lt;/code&gt;&lt;/strong&gt; step allows you to install all the packages your deploy script needs.&lt;/p&gt; &#xA;&lt;h4 id=&#34;bundler-support&#34;&gt;Bundler&lt;/h4&gt; &#xA;&lt;p&gt;If your application uses Bundler, Shipit will detect it automatically and take care of the &lt;code&gt;bundle install&lt;/code&gt; and prefix your commands with &lt;code&gt;bundle exec&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default, the following gem groups will be ignored:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;default&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;production&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;development&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;test&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;staging&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;benchmark&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;debug&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The gems you need in order to deploy should be in a different group, such as &lt;code&gt;deploy&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;dependencies:&#xA;  bundler:&#xA;    without:&#xA;      - development&#xA;      - test&#xA;      - debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4 id=&#34;other-dependencies&#34;&gt;Other dependencies&lt;/h4&gt; &#xA;&lt;p&gt;If your deploy script uses another tool to install dependencies, you can install them manually via &lt;code&gt;dependencies.override&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;dependencies:&#xA;  override:&#xA;    - npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;dependencies.pre&lt;/code&gt;&lt;/strong&gt; If you wish to execute commands before Shipit installs the dependencies, you can specify them here.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;dependencies:&#xA;  pre:&#xA;    - mkdir tmp/&#xA;    - cp -R /var/cache/ tmp/cache&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;dependencies.post&lt;/code&gt;&lt;/strong&gt; If you wish to execute commands after Shipit installed the dependencies, you can specify them here:&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;dependencies:&#xA;  post:&#xA;    - cp -R tmp/cache /var/cache/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h3 id=&#34;deployment&#34;&gt;Deployment&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;deploy&lt;/code&gt; and &lt;code&gt;rollback&lt;/code&gt; sections are the core of Shipit:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;deploy.override&lt;/code&gt;&lt;/strong&gt; contains an array of the shell commands required to deploy the application. Shipit will try to infer it from the repository structure, but you can change the default inference.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;deploy:&#xA;  override:&#xA;    - ./script/deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;deploy.pre&lt;/code&gt;&lt;/strong&gt; If you wish to execute commands before Shipit executes your deploy script, you can specify them here.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;deploy:&#xA;  pre:&#xA;    - ./script/notify_deploy_start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;deploy.post&lt;/code&gt;&lt;/strong&gt; If you wish to execute commands after Shipit executed your deploy script, you can specify them here.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;deploy:&#xA;  post:&#xA;    - ./script/notify_deploy_end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;You can also accept custom environment variables defined by the user that triggers the deploy:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;deploy.variables&lt;/code&gt;&lt;/strong&gt; contains an array of variable definitions.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;deploy:&#xA;  variables:&#xA;    -&#xA;      name: RUN_MIGRATIONS&#xA;      title: Run database migrations on deploy&#xA;      default: 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;deploy.variables.select&lt;/code&gt;&lt;/strong&gt; will turn the input into a &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; of values.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;deploy:&#xA;  variables:&#xA;    -&#xA;      name: REGION&#xA;      title: Run a deploy in a given region&#xA;      select:&#xA;        - east&#xA;        - west&#xA;        - north&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;deploy.max_commits&lt;/code&gt;&lt;/strong&gt; defines the maximum number of commits that should be shipped per deploy. Defaults to &lt;code&gt;8&lt;/code&gt; if no value is provided.&lt;/p&gt; &#xA;&lt;p&gt;To disable this limit, you can use use an explicit null value: &lt;code&gt;max_commits: null&lt;/code&gt;. Continuous Delivery will then deploy any number of commits.&lt;/p&gt; &#xA;&lt;p&gt;Human users will be warned that they are not respecting the recommendation, but allowed to continue. However continuous delivery will respect this limit. If there is no deployable commits in this range, a human intervention will be required.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;deploy:&#xA;  max_commits: 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;deploy.interval&lt;/code&gt;&lt;/strong&gt; defines the interval between the end of a deploy and the next deploy, when continuous delivery is enabled. You can use s, m, h, d as units for seconds, minutes, hours, and days. Defaults to 0, which means a new deploy will start as soon as the current one finishes.&lt;/p&gt; &#xA;&lt;p&gt;For example, this will wait 5 minutes after the end of a deploy before starting a new one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;deploy:&#xA;  interval: 5m&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;deploy.retries&lt;/code&gt;&lt;/strong&gt; enables retries for a stack, and defines the maximum amount of times that Shipit will retry a deploy that finished with a &lt;code&gt;failed&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt; or &lt;code&gt;timedout&lt;/code&gt; status.&lt;/p&gt; &#xA;&lt;p&gt;For example, this will retry a deploy twice if it fails.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;deploy:&#xA;  retries: 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;rollback.override&lt;/code&gt;&lt;/strong&gt; contains an array of the shell commands required to rollback the application to a previous state. Shipit will try to infer it from the repository structure, but you can change the default inference. This key defaults to &lt;code&gt;disabled&lt;/code&gt; unless Capistrano is detected.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;rollback:&#xA;  override:&#xA;    - ./script/rollback&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;rollback.pre&lt;/code&gt;&lt;/strong&gt; If you wish to execute commands before Shipit executes your rollback script, you can specify them here:&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;rollback:&#xA;  pre:&#xA;    - ./script/notify_rollback_start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;rollback.post&lt;/code&gt;&lt;/strong&gt; If you wish to execute commands after Shipit executed your rollback script, you can specify them here:&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;rollback:&#xA;  post:&#xA;    - ./script/notify_rollback_end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/strong&gt; contains an array of the shell commands that Shipit executes to check the revision of the currently-deployed version. This key defaults to &lt;code&gt;disabled&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;fetch:&#xA;  curl --silent https://app.example.com/services/ping/version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3 id=&#34;kubernetes&#34;&gt;Kubernetes&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;kubernetes&lt;/code&gt;&lt;/strong&gt; allows to specify a Kubernetes namespace and context to deploy to.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;kubernetes:&#xA;  namespace: my-app-production&#xA;  context: tier4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;kubernetes.template_dir&lt;/code&gt;&lt;/strong&gt; allows to specify a Kubernetes template directory. It defaults to &lt;code&gt;./config/deploy/$ENVIRONMENT&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3 id=&#34;environment&#34;&gt;Environment&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;machine.environment&lt;/code&gt;&lt;/strong&gt; contains the extra environment variables that you want to provide during task execution.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;machine:&#xA;  environment:&#xA;    key: val # things added as environment variables&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3 id=&#34;directory&#34;&gt;Directory&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;machine.directory&lt;/code&gt;&lt;/strong&gt; specifies a subfolder in which to execute all tasks. Useful for repositories containing multiple applications or if you don&#39;t want your deploy scripts to be located at the root.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;machine:&#xA;  directory: scripts/deploy/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3 id=&#34;cleanup&#34;&gt;Cleanup&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;machine.cleanup&lt;/code&gt;&lt;/strong&gt; specifies whether or not the deploy working directory should be cleaned up once the deploy completed. Defaults to &lt;code&gt;true&lt;/code&gt;, but can be useful to disable temporarily to investigate bugs.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;machine:&#xA;  cleanup: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3 id=&#34;ci&#34;&gt;CI&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;ci.require&lt;/code&gt;&lt;/strong&gt; contains an array of the &lt;a href=&#34;https://docs.github.com/en/rest/reference/commits#commit-statuses&#34;&gt;statuses context&lt;/a&gt; you want Shipit to disallow deploys if any of them is missing on the commit being deployed.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;ci:&#xA;  require:&#xA;    - ci/circleci&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;ci.hide&lt;/code&gt;&lt;/strong&gt; contains an array of the &lt;a href=&#34;https://docs.github.com/en/rest/reference/commits#commit-statuses&#34;&gt;statuses context&lt;/a&gt; you want Shipit to ignore.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;ci:&#xA;  hide:&#xA;    - ci/circleci&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;ci.allow_failures&lt;/code&gt;&lt;/strong&gt; contains an array of the &lt;a href=&#34;https://docs.github.com/en/rest/reference/commits#commit-statuses&#34;&gt;statuses context&lt;/a&gt; you want to be visible but not to required for deploy.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;ci:&#xA;  allow_failures:&#xA;    - ci/circleci&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;ci.blocking&lt;/code&gt;&lt;/strong&gt; contains an array of the &lt;a href=&#34;https://docs.github.com/en/rest/reference/commits#commit-statuses&#34;&gt;statuses context&lt;/a&gt; you want to disallow deploys if any of them is missing or failing on any of the commits being deployed.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;ci:&#xA;  blocking:&#xA;    - soc/compliance&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3 id=&#34;merge-queue&#34;&gt;Merge Queue&lt;/h3&gt; &#xA;&lt;p&gt;The merge queue allows developers to register pull requests which will be merged by Shipit once the stack is clear (no lock, no failing CI, no backlog). It can be enabled on a per stack basis via the settings page.&lt;/p&gt; &#xA;&lt;p&gt;It can be customized via several &lt;code&gt;shipit.yml&lt;/code&gt; properties:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;merge.revalidate_after&lt;/code&gt;&lt;/strong&gt; a duration after which pull requests that couldn&#39;t be merged are rejected from the queue. Defaults to unlimited.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;merge:&#xA;  revalidate_after: 12m30s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;merge.require&lt;/code&gt;&lt;/strong&gt; contains an array of the &lt;a href=&#34;https://docs.github.com/en/rest/reference/commits#commit-statuses&#34;&gt;statuses context&lt;/a&gt; that you want Shipit to consider as failing if they aren&#39;t present on the pull request. Defaults to &lt;code&gt;ci.require&lt;/code&gt; if present, or empty otherwise.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;merge:&#xA;  require:&#xA;    - continuous-integration/travis-ci/push&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;merge.ignore&lt;/code&gt;&lt;/strong&gt; contains an array of the &lt;a href=&#34;https://docs.github.com/en/rest/reference/commits#commit-statuses&#34;&gt;statuses context&lt;/a&gt; that you want Shipit not to consider when merging pull requests. Defaults to the union of &lt;code&gt;ci.allow_failures&lt;/code&gt; and &lt;code&gt;ci.hide&lt;/code&gt; if any is present or empty otherwise.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;merge:&#xA;  ignore:&#xA;    - codeclimate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;merge.method&lt;/code&gt;&lt;/strong&gt; the &lt;a href=&#34;https://docs.github.com/en/rest/reference/pulls#merge-a-pull-request--parameters&#34;&gt;merge method&lt;/a&gt; to use for this stack. If it&#39;s not set the default merge method will be used. Can be either &lt;code&gt;merge&lt;/code&gt;, &lt;code&gt;squash&lt;/code&gt; or &lt;code&gt;rebase&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;merge:&#xA;  method: squash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;merge.max_divergence.commits&lt;/code&gt;&lt;/strong&gt; the maximum number of commits a pull request can be behind its merge base, after which pull requests are rejected from the merge queue.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;merge:&#xA;  max_divergence:&#xA;    commits: 50&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;merge.max_divergence.age&lt;/code&gt;&lt;/strong&gt; a duration after the commit date of the merge base, after which pull requests will be rejected from the merge queue.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;merge:&#xA;  max_divergence:&#xA;    age: 72h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3 id=&#34;custom-tasks&#34;&gt;Custom tasks&lt;/h3&gt; &#xA;&lt;p&gt;You can create custom tasks that users execute directly from a stack&#39;s overview page in Shipit. To create a new custom task, specify its parameters in the &lt;code&gt;tasks&lt;/code&gt; section of the &lt;code&gt;shipit.yml&lt;/code&gt; file. For example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;tasks.restart&lt;/code&gt;&lt;/strong&gt; restarts the application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;tasks:&#xA;  restart:&#xA;    action: &#34;Restart Application&#34;&#xA;    description: &#34;Sometimes needed if you want the application to restart but don&#39;t want to ship any new code.&#34;&#xA;    steps:&#xA;      - ssh deploy@myserver.example.com &#39;touch myapp/restart.txt&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, custom tasks are not allowed to be triggered while a deploy is running. But if it&#39;s safe for that specific task, you can change that behavior with the &lt;code&gt;allow_concurrency&lt;/code&gt; attribute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;tasks:&#xA;  flush_cache:&#xA;    action: &#34;Flush Cache&#34;&#xA;    steps:&#xA;      - ssh deploy@myserver.example.com &#39;myapp/flush_cache.sh&#39;&#xA;    allow_concurrency: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tasks like deploys can prompt for user defined environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;tasks:&#xA;  restart:&#xA;    action: &#34;Restart Application&#34;&#xA;    description: &#34;Sometimes needed if you want the application to restart but don&#39;t want to ship any new code.&#34;&#xA;    steps:&#xA;      - ssh deploy@myserver.example.com &#39;touch myapp/restart.txt&#39;&#xA;    variables:&#xA;      -&#xA;        name: FORCE&#xA;        title: Restart server without waiting for in-flight requests to complete (Dangerous).&#xA;        default: 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also make these variables appear in the task title:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;tasks:&#xA;  failover:&#xA;    action: &#34;Failover a pod&#34;&#xA;    title: &#34;Failover Pod %{POD_ID}&#34;&#xA;    steps:&#xA;      - script/failover $POD_ID&#xA;    variables:&#xA;      - name: POD_ID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3 id=&#34;custom-links&#34;&gt;Custom Links&lt;/h3&gt; &#xA;&lt;p&gt;You can add custom links to the header of a stacks overview page in Shipit. To create a new custom link, specify its parameters in the links section of the shipit.yml file. The link title is a humanized version of the key. For example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;links.monitoring_dashboard&lt;/code&gt;&lt;/strong&gt; creates a link in the header of of the page titled &#34;Monitoring dashboard&#34;&lt;/p&gt; &#xA;&lt;p&gt;You can specify multiple custom links:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;links:&#xA;  monitoring_dashboard: https://example.com/monitoring.html&#xA;  other_link: https://example.com/something_else.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3 id=&#34;review-process&#34;&gt;Review process&lt;/h3&gt; &#xA;&lt;p&gt;You can display review elements, such as monitoring data or a pre-deployment checklist, on the deployment page in Shipit:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;review.checklist&lt;/code&gt;&lt;/strong&gt; contains a pre-deploy checklist that appears on the deployment page in Shipit, with each item in the checklist as a separate string in the array. It can contain &lt;code&gt;strong&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; HTML tags. Users cannot deploy from Shipit until they have checked each item in the checklist.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;review:&#xA;  checklist:&#xA;    - &amp;gt;&#xA;      Do you know if it is safe to revert the code being shipped? What happens if we need to undo this deploy?&#xA;    - Has the Docs team been notified of any major changes to the app?&#xA;    - Is the app stable right now?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;review.monitoring&lt;/code&gt;&lt;/strong&gt; contains a list of inclusions that appear on the deployment page in Shipit. Inclusions can either be images or iframes.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;review:&#xA;  monitoring:&#xA;    - image: https://example.com/monitoring.png&#xA;    - iframe: https://example.com/monitoring.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;review.checks&lt;/code&gt;&lt;/strong&gt; contains a list of commands that will be executed during the pre-deploy review step. Their output appears on the deployment page in Shipit, and if continuous delivery is enabled, deploys will only be triggered if those commands are successful.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;review:&#xA;  checks:&#xA;    - bundle exec rake db:migrate:status&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3 id=&#34;shell-commands-timeout&#34;&gt;Shell commands timeout&lt;/h3&gt; &#xA;&lt;p&gt;All the shell commands can take an optional &lt;code&gt;timeout&lt;/code&gt; parameter to limit their duration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;deploy:&#xA;  override:&#xA;    - ./script/deploy:&#xA;        timeout: 30&#xA;  post:&#xA;    - ./script/notify_deploy_end: { timeout: 15 }&#xA;review:&#xA;  checks:&#xA;    - bundle exec rake db:migrate:status:&#xA;        timeout: 60&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also &lt;code&gt;commands_inactivity_timeout&lt;/code&gt; in &lt;code&gt;secrets.yml&lt;/code&gt; for a global timeout setting.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2 id=&#34;script-parameters&#34;&gt;Script parameters&lt;/h2&gt; &#xA;&lt;p&gt;Your deploy scripts have access to the following environment variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SHIPIT&lt;/code&gt;: Set to &lt;code&gt;1&lt;/code&gt; to allow your script to know it&#39;s executed by Shipit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SHIPIT_LINK&lt;/code&gt;: URL to the task output, useful to broadcast it in an IRC channel&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SHIPIT_USER&lt;/code&gt;: Full name of the user that triggered the deploy/task&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GITHUB_REPO_NAME&lt;/code&gt;: Name of the GitHub repository being used for the current deploy/task.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GITHUB_REPO_OWNER&lt;/code&gt;: The GitHub username of the repository owner for the current deploy/task.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;EMAIL&lt;/code&gt;: Email of the user that triggered the deploy/task (if available)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ENVIRONMENT&lt;/code&gt;: The stack environment (e.g &lt;code&gt;production&lt;/code&gt; / &lt;code&gt;staging&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BRANCH&lt;/code&gt;: The stack branch (e.g &lt;code&gt;master&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LAST_DEPLOYED_SHA&lt;/code&gt;: The git SHA of the last deployed commit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DIFF_LINK&lt;/code&gt;: URL to the diff on GitHub.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TASK_ID&lt;/code&gt;: ID of the task that is running&lt;/li&gt; &#xA; &lt;li&gt;All the content of the &lt;code&gt;secrets.yml&lt;/code&gt; &lt;code&gt;env&lt;/code&gt; key&lt;/li&gt; &#xA; &lt;li&gt;All the content of the &lt;code&gt;shipit.yml&lt;/code&gt; &lt;code&gt;machine.environment&lt;/code&gt; key&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These variables are accessible only during deploys and rollback:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;REVISION&lt;/code&gt;: the git SHA of the revision that must be deployed in production&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SHA&lt;/code&gt;: alias for REVISION&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2 id=&#34;configuring-providers&#34;&gt;Configuring providers&lt;/h2&gt; &#xA;&lt;h3&gt;Heroku&lt;/h3&gt; &#xA;&lt;p&gt;To use Heroku integration (&lt;code&gt;lib/snippets/push-to-heroku&lt;/code&gt;), make sure that the environment has &lt;a href=&#34;https://devcenter.heroku.com/articles/heroku-cli&#34;&gt;Heroku CLI&lt;/a&gt; available.&lt;/p&gt; &#xA;&lt;h3&gt;Kubernetes&lt;/h3&gt; &#xA;&lt;p&gt;For Kubernetes, you have to provision Shipit environment with the following tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;kubectl&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubernetes-deploy&lt;/code&gt; &lt;a href=&#34;https://github.com/Shopify/kubernetes-deploy&#34;&gt;gem&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2 id=&#34;integrating&#34;&gt;IV. INTEGRATING&lt;/h2&gt; &#xA;&lt;h3 id=&#34;integrating-webhooks&#34;&gt;Registering webhooks&lt;/h3&gt; &#xA;&lt;p&gt;Shipit handles several webhook types by default, listed in &lt;code&gt;Shipit::Wehbooks::DEFAULT_HANDLERS&lt;/code&gt;, in order to implement default behaviours. Extra handler blocks can be registered via &lt;code&gt;Shipit::Webhooks.register_handler&lt;/code&gt;. Valid handlers need only implement the &lt;code&gt;call&lt;/code&gt; method - meaning any object which implements &lt;code&gt;call&lt;/code&gt; - blocks, procs, or lambdas are valid. The webhooks controller will pass a &lt;code&gt;params&lt;/code&gt; argument to the handler. Some examples:&lt;/p&gt; &#xA;&lt;h4&gt;Registering a Plain old Ruby Object as a handler&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class PullRequestHandler&#xA;  def call(params)&#xA;    # do something with pull request webhook events&#xA;  end&#xA;end&#xA;&#xA;Shipit::Webhooks.register_handler(&#39;pull_request&#39;, PullRequestHandler)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Registering a Block as a handler&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Shipit::Webhooks.register_handler(&#39;pull_request&#39;) do |params|&#xA;  # do something with pull request webhook events&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Multiple handler blocks can be registered. If any raise errors, execution will be halted and the request will be reported failed to github.&lt;/p&gt; &#xA;&lt;h2 id=&#34;contributing&#34;&gt;V. CONTRIBUTING&lt;/h2&gt; &#xA;&lt;h3 id=&#34;contributing-instructions&#34;&gt;Instructions&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork it ( &lt;a href=&#34;https://github.com/shopify/shipit-engine/fork&#34;&gt;https://github.com/shopify/shipit-engine/fork&lt;/a&gt; )&lt;/li&gt; &#xA; &lt;li&gt;Create your feature branch (git checkout -b my-new-feature)&lt;/li&gt; &#xA; &lt;li&gt;Commit your changes (git commit -am &#39;Add some feature&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Push to the branch (git push origin my-new-feature)&lt;/li&gt; &#xA; &lt;li&gt;Create a new Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3 id=&#34;contributing-local-dev&#34;&gt;Local development&lt;/h3&gt; &#xA;&lt;p&gt;This repository has a &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/shipit-engine/master/test/dummy&#34;&gt;test/dummy&lt;/a&gt; app in it which can be used for local development without having to setup a new rails application.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;./bin/bootstrap&lt;/code&gt; in order to bootstrap the dummy application. The bootstrap script is going to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Copy &lt;code&gt;config/secrets.development.example.yml&lt;/code&gt; to &lt;code&gt;config/secrets.development.yml&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;Make sure all dependencies are installed;&lt;/li&gt; &#xA; &lt;li&gt;Create and seed database (recreate database if already available);&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Run &lt;code&gt;./test/dummy/bin/rails server&lt;/code&gt; to run the rails dummy application.&lt;/p&gt; &#xA;&lt;p&gt;Set the environment variable &lt;code&gt;SHIPIT_DISABLE_AUTH=1&lt;/code&gt; in order to disable authentication.&lt;/p&gt; &#xA;&lt;p&gt;If you need to test caching behaviour in the dummy application, use &lt;code&gt;bin/rails dev:cache&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>testdouble/standard</title>
    <updated>2023-02-26T02:02:58Z</updated>
    <id>tag:github.com,2023-02-26:/testdouble/standard</id>
    <link href="https://github.com/testdouble/standard" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸŒŸ Ruby Style Guide, with linter &amp; automatic code fixer&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Standard - Ruby style guide, linter, and formatter&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/testdouble/standard/actions?query=workflow%3ATests&#34;&gt;&lt;img src=&#34;https://github.com/testdouble/standard/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/testdouble/standard&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code_style-standard-brightgreen.svg?sanitize=true&#34; alt=&#34;Ruby Style Guide&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rubygems.org/gems/standard&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/standard.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This gem is a spiritual port of &lt;a href=&#34;https://standardjs.com&#34;&gt;StandardJS&lt;/a&gt; and aims to save you (and others!) time in the same three ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;No configuration.&lt;/strong&gt; The easiest way to enforce consistent style in your project. Just drop it in.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Automatically format code.&lt;/strong&gt; Just run &lt;code&gt;standardrb --fix&lt;/code&gt; and say goodbye to messy or inconsistent code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Catch style issues &amp;amp; programmer errors early.&lt;/strong&gt; Save precious code review time by eliminating back-and-forth between reviewer &amp;amp; contributor.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;No decisions to make. It just works. Here&#39;s a &lt;a href=&#34;https://www.youtube.com/watch?v=uLyV5hOqGQ8&#34;&gt;âš¡ lightning talk âš¡&lt;/a&gt; about it.&lt;/p&gt; &#xA;&lt;p&gt;Install Standard by adding it to your Gemfile and running &lt;code&gt;bundle install&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;standard&#34;, group: [:development, :test]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then run Standard from the command line with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;$ bundle exec standardrb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And if you&#39;d like, Standard can autocorrect your code by tacking on a &lt;code&gt;--fix&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;p&gt;If your project uses Rake, adding &lt;code&gt;require &#34;standard/rake&#34;&lt;/code&gt; adds two tasks: &lt;code&gt;standard&lt;/code&gt; and &lt;code&gt;standard:fix&lt;/code&gt;. In most new projects, we tend to add the fixer variant to our default &lt;code&gt;rake&lt;/code&gt; task after our test command, similar to this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;task default: [:test, &#34;standard:fix&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;StandardRB â€”&amp;nbsp;The Rules&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;2 spaces&lt;/strong&gt; â€“ for indentation&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Double quotes for string literals&lt;/strong&gt; - because pre-committing to whether you&#39;ll need interpolation in a string slows people down&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;1.9 hash syntax&lt;/strong&gt; - When all the keys in a hash literal are symbols, Standard enforces Ruby 1.9&#39;s &lt;code&gt;{hash: syntax}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Braces for single-line blocks&lt;/strong&gt; - Require &lt;code&gt;{&lt;/code&gt;/&lt;code&gt;}&lt;/code&gt; for one-line blocks, but allow either braces or &lt;code&gt;do&lt;/code&gt;/&lt;code&gt;end&lt;/code&gt; for multiline blocks. Like using &lt;code&gt;do&lt;/code&gt;/&lt;code&gt;end&lt;/code&gt; for multiline blocks? Prefer &lt;code&gt;{&lt;/code&gt;/&lt;code&gt;}&lt;/code&gt; when chaining? A fan of expressing intent with Jim Weirich&#39;s &lt;a href=&#34;http://www.virtuouscode.com/2011/07/26/the-procedurefunction-block-convention-in-ruby/&#34;&gt;semantic block&lt;/a&gt; approach? Standard lets you do you!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Leading dots on multi-line method chains&lt;/strong&gt; - chosen for &lt;a href=&#34;https://github.com/testdouble/standard/issues/75&#34;&gt;these&lt;/a&gt; reasons.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Spaces inside blocks, but not hash literals&lt;/strong&gt; - In Ruby, the &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt; characters do a lot of heavy lifting. To visually distinguish hash literals from blocks, Standard enforces that (like arrays), no leading or trailing spaces be added to pad hashes&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;And a good deal more&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re familiar with &lt;a href=&#34;https://github.com/rubocop-hq/rubocop&#34;&gt;RuboCop&lt;/a&gt;, you can look at Standard&#39;s current base configuration in &lt;a href=&#34;https://raw.githubusercontent.com/testdouble/standard/main/config/base.yml&#34;&gt;config/base.yml&lt;/a&gt;. In lieu of a separate changelog file, significant changes to the configuration will be documented as &lt;a href=&#34;https://github.com/testdouble/standard/releases&#34;&gt;GitHub release notes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Once you&#39;ve installed Standard, you should be able to use the &lt;code&gt;standardrb&lt;/code&gt; program. The simplest use case would be checking the style of all Ruby files in the current working directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bundle exec standardrb&#xA;standard: Use Ruby Standard Style (https://github.com/testdouble/standard)&#xA;standard: Run `standardrb --fix` to automatically fix some problems.&#xA;  /Users/code/cli.rb:31:23: Style/Semicolon: Do not use semicolons to terminate expressions.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can optionally pass in a directory (or directories) using a glob pattern. Be sure to quote paths containing glob patterns so that they are expanded by &lt;code&gt;standardrb&lt;/code&gt; instead of your shell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bundle exec standardrb &#34;lib/**/*.rb&#34; test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; by default, StandardRB will look for all &lt;code&gt;*.rb&lt;/code&gt; files (and some other files typically associated with Ruby like &lt;code&gt;*.gemspec&lt;/code&gt; and &lt;code&gt;Gemfile&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;If you want to add Standard to an existing project, but don&#39;t want to stop all development until you&#39;ve fixed every violation in every file, you can create a backlog of to-be-converted files by generating a TODO file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bundle exec standardrb --generate-todo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a &lt;code&gt;.standard_todo.yml&lt;/code&gt; that lists all the files that contain errors. When you run Standard in the future, it will ignore these files as if they were listed under the &lt;code&gt;ignore&lt;/code&gt; section in the &lt;code&gt;.standard.yml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;As you refactor your existing project you can remove files from the list. You can also regenerate the TODO file at any time by re-running the above command.&lt;/p&gt; &#xA;&lt;h3&gt;Using with Rake&lt;/h3&gt; &#xA;&lt;p&gt;Standard also ships with Rake tasks. If you&#39;re using Rails, these should autoload and be available after installing Standard. Otherwise, just require the tasks in your &lt;code&gt;Rakefile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;standard/rake&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here are the tasks bundled with Standard:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rake standard     # equivalent to running `standardrb`&#xA;$ rake standard:fix # equivalent to running `standardrb --fix`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also pass command line options to Standard&#39;s Rake tasks by embedding them in a &lt;code&gt;STANDARDOPTS&lt;/code&gt; environment variable (similar to how the Minitest Rake task accepts CLI options in &lt;code&gt;TESTOPTS&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# equivalent to `standardrb --format progress`:&#xA;$ rake standard STANDARDOPTS=&#34;--format progress&#34;&#xA;&#xA;# equivalent to `standardrb lib &#34;app/**/*&#34;`, to lint just certain paths:&#xA;$ rake standard STANDARDOPTS=&#34;lib \&#34;app/**/*\&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What you might do if you&#39;re clever&lt;/h2&gt; &#xA;&lt;p&gt;If you want or need to configure Standard, there are a &lt;em&gt;handful&lt;/em&gt; of options available by creating a &lt;code&gt;.standard.yml&lt;/code&gt; file in the root of your project.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example yaml file with every option set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;fix: true               # default: false&#xA;parallel: true          # default: false&#xA;format: progress        # default: Standard::Formatter&#xA;ruby_version: 2.3.3     # default: RUBY_VERSION&#xA;default_ignores: false  # default: true&#xA;&#xA;ignore:                 # default: []&#xA;  - &#39;db/schema.rb&#39;&#xA;  - &#39;vendor/**/*&#39;&#xA;  - &#39;test/**/*&#39;:&#xA;    - Layout/AlignHash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: If you&#39;re running Standard in a context where your &lt;code&gt;.standard.yml&lt;/code&gt; file cannot be found by ascending the current working directory (i.e., against a temporary file buffer in your editor), you can specify the config location with &lt;code&gt;--config path/to/.standard.yml&lt;/code&gt;. (Similarly, for the &lt;code&gt;.standard_todo.yml&lt;/code&gt; file, you can specify &lt;code&gt;--todo path/to/.standard_todo.yml&lt;/code&gt;.)&lt;/p&gt; &#xA;&lt;h2&gt;What you might do if you&#39;re REALLY clever&lt;/h2&gt; &#xA;&lt;p&gt;Because StandardRB is essentially a wrapper on top of &lt;a href=&#34;https://github.com/rubocop-hq/rubocop&#34;&gt;RuboCop&lt;/a&gt;, it will actually forward the vast majority of CLI and ENV arguments to RuboCop.&lt;/p&gt; &#xA;&lt;p&gt;You can see a list of &lt;a href=&#34;https://docs.rubocop.org/rubocop/usage/basic_usage.html#command-line-flags&#34;&gt;RuboCop&lt;/a&gt;&#39;s CLI flags here.&lt;/p&gt; &#xA;&lt;h2&gt;Why should I use Ruby Standard Style?&lt;/h2&gt; &#xA;&lt;p&gt;(This section will &lt;a href=&#34;https://github.com/standard/standard#why-should-i-use-javascript-standard-style&#34;&gt;look familiar&lt;/a&gt; if you&#39;ve used StandardJS.)&lt;/p&gt; &#xA;&lt;p&gt;The beauty of Ruby Standard Style is that it&#39;s simple. No one wants to maintain multiple hundred-line style configuration files for every module/project they work on. Enough of this madness!&lt;/p&gt; &#xA;&lt;p&gt;This gem saves you (and others!) time in four ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;No configuration.&lt;/strong&gt; The easiest way to enforce consistent style in your project. Just drop it in.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Automatically format code.&lt;/strong&gt; Just run &lt;code&gt;standardrb --fix&lt;/code&gt; and say goodbye to messy or inconsistent code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Catch style issues &amp;amp; programmer errors early.&lt;/strong&gt; Save precious code review time by eliminating back-and-forth between reviewer &amp;amp; contributor.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Deliberate pace.&lt;/strong&gt; We strive to take the hassle of upgrading Rubocop out of each individual team&#39;s hands and shoulder it ourselves. We enable about ~20% of new cops and generally choose conservative configurations for them.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Adopting Standard style means ranking the importance of code clarity and community conventions higher than personal style. This might not make sense for 100% of projects and development cultures, however open source can be a hostile place for newbies. Setting up clear, automated contributor expectations makes a project healthier.&lt;/p&gt; &#xA;&lt;h2&gt;Who uses Ruby Standard Style?&lt;/h2&gt; &#xA;&lt;p&gt;Here are a few examples of Ruby Standard-compliant teams &amp;amp; projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://testdouble.com/agency&#34;&gt;Test Double&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/&#34;&gt;Amazon Web Services&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arrows.to/&#34;&gt;Arrows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://avohq.io/&#34;&gt;Avo Admin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.babylist.com/&#34;&gt;Babylist&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://brandnewbox.com&#34;&gt;Brand New Box&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/brave-intl/publishers&#34;&gt;Brave Software&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://collectiveidea.com/&#34;&gt;Collective Idea&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.culturefoundry.com/&#34;&gt;Culture Foundry&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://elevatelabs.com&#34;&gt;Elevate Labs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.envoy.com&#34;&gt;Envoy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://evilmartians.com&#34;&gt;Evil Martians&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://firstline.org/&#34;&gt;Firstline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hashrocket.com&#34;&gt;Hashrocket&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.honeybadger.io&#34;&gt;Honeybadger&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jetthoughts.com/&#34;&gt;JetThoughts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://levups.com&#34;&gt;Level UP Solutions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.monterail.com&#34;&gt;Monterail&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.myrent.co.nz&#34;&gt;myRent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.oysterhr.com/&#34;&gt;Oyster&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.planetargon.com/&#34;&gt;Planet Argon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.podia.com/&#34;&gt;Podia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rebaseinteractive.com/&#34;&gt;Rebase Interactive&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.renuo.ch/&#34;&gt;Renuo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ruby.ci&#34;&gt;RubyCI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://thoughtbot.com/&#34;&gt;thoughtbot&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Does your team use Standard? &lt;a href=&#34;https://github.com/testdouble/standard/edit/main/README.md&#34;&gt;Add your name to the list&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Is there a readme badge?&lt;/h2&gt; &#xA;&lt;p&gt;Yes! If you use Standard in your project, you can include one of these badges in your readme to let people know that your code is using the StandardRB style.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/testdouble/standard&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code_style-standard-brightgreen.svg?sanitize=true&#34; alt=&#34;Ruby Style Guide&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;[![Ruby Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://github.com/testdouble/standard)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;I disagree with rule X, can you change it?&lt;/h2&gt; &#xA;&lt;p&gt;No. The whole point of Standard is to save you time by avoiding &lt;a href=&#34;https://www.freebsd.org/doc/en/books/faq/misc.html#bikeshed-painting&#34;&gt;bikeshedding&lt;/a&gt; about code style. There are lots of debates online about tabs vs. spaces, etc. that will never be resolved. These debates just distract from getting stuff done. At the end of the day you have to &#39;just pick something&#39;, and that&#39;s the whole philosophy of Standard -- it&#39;s a bunch of sensible &#39;just pick something&#39; opinions. Hopefully, users see the value in that over defending their own opinions.&lt;/p&gt; &#xA;&lt;p&gt;Pro tip: Just use Standard and move on. There are actual real problems that you could spend your time solving! :P&lt;/p&gt; &#xA;&lt;h2&gt;Is there an automatic formatter?&lt;/h2&gt; &#xA;&lt;p&gt;Yes! You can use &lt;code&gt;standardrb --fix&lt;/code&gt; to fix most issues automatically.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;standardrb --fix&lt;/code&gt; is built into &lt;code&gt;standardrb&lt;/code&gt; for maximum convenience. Most problems are fixable, but some errors must be fixed manually.&lt;/p&gt; &#xA;&lt;h2&gt;Can I override the &lt;code&gt;fix: true&lt;/code&gt; config setting?&lt;/h2&gt; &#xA;&lt;p&gt;Also yes! You can use &lt;code&gt;standardrb --no-fix&lt;/code&gt;. Not &lt;code&gt;fix&lt;/code&gt;ing is the default behavior, but this flag will override the &lt;code&gt;fix: true&lt;/code&gt; setting in your &lt;a href=&#34;https://raw.githubusercontent.com/testdouble/standard/main/#what-you-might-do-if-youre-clever&#34;&gt;&lt;code&gt;.standard.yml&lt;/code&gt; config&lt;/a&gt;. This is especially useful for checking your project&#39;s compliance with &lt;code&gt;standardrb&lt;/code&gt; in CI environments while keeping the &lt;code&gt;fix: true&lt;/code&gt; option enabled locally.&lt;/p&gt; &#xA;&lt;h2&gt;How do I ignore files?&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes you need to ignore additional folders or specific minified files. To do that, add a &lt;code&gt;.standard.yml&lt;/code&gt; file to the root of your project and specify a list of files and globs that should be excluded:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ignore:&#xA;  - &#39;some/file/in/particular.rb&#39;&#xA;  - &#39;a/whole/directory/**/*&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can see the files Standard ignores by default &lt;a href=&#34;https://github.com/testdouble/standard/raw/main/lib/standard/creates_config_store/configures_ignored_paths.rb#L3-L13&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How do I hide a certain warning?&lt;/h2&gt; &#xA;&lt;p&gt;In rare cases, you&#39;ll need to break a rule and hide the warning generated by Standard.&lt;/p&gt; &#xA;&lt;p&gt;Ruby Standard Style uses &lt;a href=&#34;https://github.com/rubocop-hq/rubocop&#34;&gt;RuboCop&lt;/a&gt; under-the-hood and you can hide warnings as you normally would if you used RuboCop directly.&lt;/p&gt; &#xA;&lt;p&gt;To ignore only certain rules from certain globs (not recommended, but maybe your test suite uses a non-standardable DSL, you can specify an array of RuboCop rules to ignore for a particular glob:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ignore:&#xA;  - &#39;test/**/*&#39;:&#xA;    - Layout/EndAlignment&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How do I disable a warning within my source code?&lt;/h2&gt; &#xA;&lt;p&gt;You can also use special comments to disable all or certain rules within your source code.&lt;/p&gt; &#xA;&lt;p&gt;Given this source listing &lt;code&gt;foo.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;baz = 42&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running &lt;code&gt;standard foo.rb&lt;/code&gt; would fail:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;foo.rb:1:1: Lint/UselessAssignment: Useless assignment to variable - `baz`.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If we wanted to make an exception, we could add the following comment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;baz = 42 # standard:disable Lint/UselessAssignment&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The comment directives (both &lt;code&gt;standard:disable&lt;/code&gt; and &lt;code&gt;rubocop:disable&lt;/code&gt;) will suppress the error and Standard would succeed.&lt;/p&gt; &#xA;&lt;p&gt;If, however, you needed to disable standard for multiple lines, you could use open and closing directives like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# standard:disable Layout/IndentationWidth&#xA;def foo&#xA;    123&#xA;end&#xA;# standard:enable Layout/IndentationWidth&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And if you don&#39;t know or care which rule is being violated, you can also substitute its name for &#34;all&#34;. This line actually triggers three different violations, so we can suppress them like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;baz = [&#39;a&#39;].each do end # standard:disable all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How do I specify a Ruby version? What is supported?&lt;/h2&gt; &#xA;&lt;p&gt;Because Standard wraps RuboCop, they share the same &lt;a href=&#34;https://github.com/rubocop-hq/rubocop#compatibility&#34;&gt;runtime requirements&lt;/a&gt;â€”currently, that&#39;s MRI 2.3 and newer. While Standard can&#39;t avoid this runtime requirement, it does allow you to lint codebases that target Ruby versions older than 2.3 by narrowing the ruleset somewhat.&lt;/p&gt; &#xA;&lt;p&gt;Standard will default to telling RuboCop to target the currently running version of Ruby (by inspecting &lt;code&gt;RUBY_VERSION&lt;/code&gt; at runtime. But if you want to lock it down, you can specify &lt;code&gt;ruby_version&lt;/code&gt; in &lt;code&gt;.standard.yml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ruby_version: 1.8.7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/testdouble/suture/raw/main/.standard.yml&#34;&gt;testdouble/suture&lt;/a&gt; for an example.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s a little confusing to consider, but the targeted Ruby version for linting may or may not match the version of the runtime (suppose you&#39;re on Ruby 2.5.1, but your library supports Ruby 2.3.0). In this case, specify &lt;code&gt;ruby_version&lt;/code&gt; and you should be okay. However, note that if you target a &lt;em&gt;newer&lt;/em&gt; Ruby version than the runtime, RuboCop may behave in surprising or inconsistent ways.&lt;/p&gt; &#xA;&lt;p&gt;If you are targeting a Ruby older than 2.3 and run into an issue, check out Standard&#39;s &lt;a href=&#34;https://github.com/testdouble/standard/tree/main/config&#34;&gt;version-specific RuboCop configurations&lt;/a&gt; and consider helping out by submitting a pull request if you find a rule that won&#39;t work for older Rubies.&lt;/p&gt; &#xA;&lt;h2&gt;How do I use Standard with RuboCop extensions or custom rules?&lt;/h2&gt; &#xA;&lt;p&gt;If you want to use Standard in conjunction with RuboCop extensions or custom cops, you can specify them in your own &lt;a href=&#34;https://docs.rubocop.org/rubocop/configuration.html&#34;&gt;RuboCop configuration YAML&lt;/a&gt; files and &lt;code&gt;.standard.yml&lt;/code&gt; using the &#34;extend_config` setting.&lt;/p&gt; &#xA;&lt;p&gt;For a simple example, you could include &lt;a href=&#34;https://github.com/rubocop/rubocop-rails&#34;&gt;rubocop-rails&lt;/a&gt; when Standard runs by first specifying a file in &lt;code&gt;.standard.yml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# .standard.yml&#xA;&#xA;extend_config:&#xA;  - .standard_rubocop_extensions.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And a minimal RuboCop configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# .standard_rubocop_extensions.yml&#xA;&#xA;require:&#xA;  - rubocop-rails&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it! Now, in addition to all of Standard&#39;s built-in rules, &lt;code&gt;standardrb&lt;/code&gt; and &lt;code&gt;rake standard&lt;/code&gt; will also execute the default configuration of the &lt;code&gt;rubocop-rails&lt;/code&gt; gem without needing to invoke &lt;code&gt;rubocop&lt;/code&gt; separately.&lt;/p&gt; &#xA;&lt;p&gt;For a slightly more complex example, we could add the [https://github.com/Betterment/betterlint] gem from our friends at &lt;a href=&#34;https://www.betterment.com&#34;&gt;Betterment&lt;/a&gt;, first by telling Standard where our configuration file is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# .standard.yml&#xA;&#xA;extend_config:&#xA;  - .betterlint.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But if we only wanted to enable a particular rule, we could configure it more narrowly, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# .betterlint.yml&#xA;&#xA;require:&#xA;  - rubocop/cop/betterment.rb&#xA;&#xA;AllCops:&#xA;  DisabledByDefault: true&#xA;&#xA;Betterment/UnscopedFind:&#xA;  Enabled: true&#xA;&#xA;  unauthenticated_models:&#xA;    - SystemConfiguration&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This same approach works for more than just gems! Just require a Ruby file that defines or loads your &lt;a href=&#34;https://docs.rubocop.org/rubocop/development.html&#34;&gt;custom RuboCop implementation&lt;/a&gt; and configure it using &lt;code&gt;extend_config&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When Standard encounters an &lt;code&gt;extend_config&lt;/code&gt; property, it will merge your configuration files with Standard&#39;s base ruleset. To prevent Standard&#39;s built-in rules from being modified, any configuration of rules includued in the &lt;code&gt;rubocop&lt;/code&gt; or &lt;code&gt;rubocop-performance&lt;/code&gt; gems will be ignored. Most settings under &lt;code&gt;AllCops:&lt;/code&gt; can be configured, however, unless they&#39;d conflict with a setting used by Standard (like &lt;code&gt;TargetRubyVersion&lt;/code&gt;) or prevent Standard&#39;s own rules from running (like &lt;code&gt;StyleGuideCopsOnly&lt;/code&gt;). If you specify multiple YAML files under &lt;code&gt;extend_config&lt;/code&gt;, note that their resulting RuboCop configurations will be merged in order (i.e. last-in-wins).&lt;/p&gt; &#xA;&lt;h3&gt;Usage via RuboCop&lt;/h3&gt; &#xA;&lt;p&gt;If you find that Standard&#39;s &lt;code&gt;extend_config&lt;/code&gt; feature doesn&#39;t meet your needs or if you only want to use Standard&#39;s rules while continuing to use RuboCop&#39;s CLI (e.g., to continue using your favorite IDE/tooling/workflow with RuboCop support) Evil Martians also maintains &lt;a href=&#34;https://evilmartians.com/chronicles/rubocoping-with-legacy-bring-your-ruby-code-up-to-standard&#34;&gt;a regularly updated guide&lt;/a&gt; on how to configure RuboCop to load and execute Standard&#39;s ruleset.&lt;/p&gt; &#xA;&lt;p&gt;In short, you can configure this in your &lt;code&gt;.rubocop.yml&lt;/code&gt; to load Standard&#39;s ruleset like any other gem:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;require: standard&#xA;&#xA;inherit_gem:&#xA;  standard: config/base.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How do I change the output?&lt;/h2&gt; &#xA;&lt;p&gt;Standard&#39;s built-in formatter is intentionally minimal, printing only unfixed failures or (when successful) printing nothing at all. If you&#39;d like to use a different formatter, you can specify any of RuboCop&#39;s built-in formatters or write your own.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you&#39;d like to see colorful progress dots, you can either run Standard with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle exec standardrb --format progress&#xA;Inspecting 15 files&#xA;...............&#xA;&#xA;15 files inspected, no offenses detected&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, in your project&#39;s &lt;code&gt;.standard.yml&lt;/code&gt; file, specify:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;format: progress&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to RuboCop&#39;s &lt;a href=&#34;https://rubocop.readthedocs.io/en/latest/formatters/&#34;&gt;documentation on formatters&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;How do I run Standard in my editor?&lt;/h2&gt; &#xA;&lt;p&gt;It can be very handy to know about failures while editing to shorten the feedback loop.&lt;/p&gt; &#xA;&lt;h3&gt;Language Server Protocol support&lt;/h3&gt; &#xA;&lt;p&gt;To provide immediate feedback of Standard violations and support autofixing of your code while avoiding the performance cost of starting and stopping the &lt;code&gt;standardrb&lt;/code&gt; binary repeatedly, Standard Ruby ships with a built-in &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/&#34;&gt;Language Server Protocol&lt;/a&gt; server, which is powered by the &lt;a href=&#34;https://github.com/mtsmfm/language_server-protocol-ruby&#34;&gt;language_server-protocol gem&lt;/a&gt; and can be activated from the command line with the &lt;code&gt;--lsp&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;p&gt;Most likely, you&#39;d instantiate this server indirectly in your editor&#39;s configuration, as can be demonstrated easily with &lt;a href=&#34;https://github.com/testdouble/standard/wiki/IDE:-neovim&#34;&gt;neovim&lt;/a&gt;. Theoretically, this feature could be leveraged by a purpose-built editor plugin to performantly format and fix your code. (If you&#39;re looking for a project, we&#39;d love to see one created for VS Code!)&lt;/p&gt; &#xA;&lt;h3&gt;Editor-specific guides&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/testdouble/standard/wiki/IDE:-Atom&#34;&gt;Atom&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/julianrubisch/flycheck-standardrb&#34;&gt;emacs (via flycheck)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/help/ruby/rubocop.html#disable_rubocop&#34;&gt;RubyMine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/testdouble/standard/wiki/IDE:-vim&#34;&gt;vim (via ALE)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/testdouble/standard/wiki/IDE:-neovim&#34;&gt;neovim (via LSP)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/testdouble/standard/wiki/IDE:-vscode&#34;&gt;VS Code&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why aren&#39;t &lt;code&gt;frozen_string_literal: true&lt;/code&gt; magic comments enforced?&lt;/h2&gt; &#xA;&lt;p&gt;Standard does not take a stance on whether you should plaster a &lt;a href=&#34;https://docs.ruby-lang.org/en/3.0/doc/syntax/comments_rdoc.html#label-Magic+Comments&#34;&gt;frozen_string_literal magic comment&lt;/a&gt; directive at the top of every file. Enforcing use of the comment became popular when it was believed that string literals would be frozen by default in a future version of Ruby, but &lt;a href=&#34;https://bugs.ruby-lang.org/issues/11473#note-53&#34;&gt;according to Matz&lt;/a&gt; there are no (longer any) such plans.&lt;/p&gt; &#xA;&lt;p&gt;Aside from one&#39;s personal opinion on the degree to which the comment is an eyesore, the decision to include the magic comment at the top of every file listing ought to be made based on the performance characteristics of each project (e.g. whether it defines a significant number of string literals, whether the commensurate memory usage is a material constraint, whether the code is run as a one-off command or a long-lived server application). These tend to indicate whether the magic comment might lead to meaningful reductions in memory usage.&lt;/p&gt; &#xA;&lt;p&gt;Because Standard is intended to be used as a default for every kind of Ruby fileâ€”from shell scripts to Rails appsâ€”it wouldn&#39;t be appropriate for Standard to either enforce or preclude the magic comment. Instead, you might consider either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Measuring memory performance by enabling frozen string literals as the default at runtime (with &lt;code&gt;RUBYOPT=--enable-frozen-string-literal&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Introducing the &lt;a href=&#34;https://github.com/Invoca/magic_frozen_string_literal&#34;&gt;magic_frozen_string_literal&lt;/a&gt; gem to your build, which will automatically ensure that the comment is prepended for every applicable file in your project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How often is Standard updated?&lt;/h2&gt; &#xA;&lt;p&gt;We aim to update Standard once a month, in the first week of the month. In between releases, we&#39;ll be considering RuboCop updates, RuboCop Performance updates, and community contributions.&lt;/p&gt; &#xA;&lt;h2&gt;Does Standard work with [Insert other tool name here]?&lt;/h2&gt; &#xA;&lt;p&gt;Maybe! Start by searching the repository to see if there&#39;s an existing issue open for the tool you&#39;re interested in. That aside, here are other known integrations aside from editor plugins:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/testdouble/standard/wiki/CI:-Code-Climate&#34;&gt;Code Climate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/julianrubisch/pronto-standardrb&#34;&gt;Pronto&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lakim/spring-commands-standard&#34;&gt;Spring&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JodyVanden/guard-standardrb&#34;&gt;Guard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ashfurrow/danger-rubocop/&#34;&gt;Danger&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Follow the steps below to setup standard locally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/testdouble/standard&#xA;$ cd standard&#xA;$ gem install bundler # if working with ruby version below 2.6.0&#xA;$ bundle install&#xA;$ bundle exec rake # to run test suite&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project follows Test Double&#39;s &lt;a href=&#34;https://testdouble.com/code-of-conduct&#34;&gt;code of conduct&lt;/a&gt; for all community interactions, including (but not limited to) one-on-one communications, public posts/comments, code reviews, pull requests, and GitHub issues. If violations occur, Test Double will take any action they deem appropriate for the infraction, up to and including blocking a user from the organization&#39;s repositories.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>learn-co-curriculum/phase-3-active-record-mechanics</title>
    <updated>2023-02-26T02:02:58Z</updated>
    <id>tag:github.com,2023-02-26:/learn-co-curriculum/phase-3-active-record-mechanics</id>
    <link href="https://github.com/learn-co-curriculum/phase-3-active-record-mechanics" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Active Record Mechanics&lt;/h1&gt; &#xA;&lt;h2&gt;Learning Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Understand the connection between an ORM and Active Record&lt;/li&gt; &#xA; &lt;li&gt;Understand why Active Record is useful&lt;/li&gt; &#xA; &lt;li&gt;Learn what &#34;convention over configuration&#34; means&lt;/li&gt; &#xA; &lt;li&gt;Develop a basic understanding of how to get started with Active Record&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ORM vs Active Record&lt;/h2&gt; &#xA;&lt;p&gt;By now you are familiar with the concept of an &lt;a href=&#34;http://en.wikipedia.org/wiki/Object-relational_mapping&#34;&gt;ORM&lt;/a&gt;, an Object-Relational Mapper. While building your own ORM for a single class is a great way to learn about how object-oriented programming languages commonly interact with a database, imagine you had &lt;em&gt;many&lt;/em&gt; more classes. Having to test and maintain custom code to build database connectivity for each project we work on would divert our attention from what we really want to be focusing on: making cool stuff.&lt;/p&gt; &#xA;&lt;p&gt;To save themselves and others this headache, a team of developers built the &lt;a href=&#34;http://guides.rubyonrails.org/active_record_basics.html&#34;&gt;Active Record&lt;/a&gt; Ruby gem.&lt;/p&gt; &#xA;&lt;p&gt;In this lesson, we&#39;ll read about how to have Active Record link our Ruby models with rows in a database table. There&#39;s code in the &lt;code&gt;active_record.rb&lt;/code&gt; file set up so you can follow along with the examples below. Fork and clone this lesson if you&#39;d like to code along.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You&#39;ll never write all the code for your Active Record applications in one file like we&#39;re doing here â€” the setup here is kept intentionally as simple as possible so you can see everything in one place. Soon, we&#39;ll cover a more realistic Active Record file structure.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;As you work through this section, it&#39;s highly recommended that you also take some time to read through the &lt;a href=&#34;http://guides.rubyonrails.org/active_record_basics.html&#34;&gt;Active Record guides&lt;/a&gt;. There&#39;s a lot more that Active Record can do than we&#39;ll be able to cover, so you&#39;re sure to discover a lot of fun new things by checking out the documentation!&lt;/p&gt; &#xA;&lt;h2&gt;Active Record ORM&lt;/h2&gt; &#xA;&lt;p&gt;Active Record is a Ruby gem, meaning we get an entire library of code just by running &lt;code&gt;gem install activerecord&lt;/code&gt; or by including it in our &lt;code&gt;Gemfile&lt;/code&gt;. In this lesson, we&#39;ve included it in the &lt;code&gt;Gemfile&lt;/code&gt; along with the &lt;code&gt;sqlite3&lt;/code&gt; gem.&lt;/p&gt; &#xA;&lt;h3&gt;Connect to DB&lt;/h3&gt; &#xA;&lt;p&gt;Once our Gem environment knows what to put into the picture, we need to tell Active Record where the database is located that it will be working with.&lt;/p&gt; &#xA;&lt;p&gt;We do this by running &lt;code&gt;ActiveRecord::Base.establish_connection&lt;/code&gt;. Once &lt;code&gt;establish_connection&lt;/code&gt; is run, &lt;code&gt;ActiveRecord::Base&lt;/code&gt; keeps it stored as a class variable at &lt;code&gt;ActiveRecord::Base.connection&lt;/code&gt;. We can do this by including the following code in the &lt;code&gt;active_record.rb&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ActiveRecord::Base.establish_connection(&#xA;  adapter: &#34;sqlite3&#34;,&#xA;  database: &#34;db/students.sqlite&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Create a table&lt;/h4&gt; &#xA;&lt;p&gt;But our database is empty! Let&#39;s create a table to hold students.&lt;/p&gt; &#xA;&lt;p&gt;This code in the &lt;code&gt;active_record.rb&lt;/code&gt; file will create a &lt;code&gt;students&lt;/code&gt; table:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;sql = &amp;lt;&amp;lt;-SQL&#xA;  CREATE TABLE IF NOT EXISTS students (&#xA;    id INTEGER PRIMARY KEY,&#xA;    name TEXT&#xA;  )&#xA;SQL&#xA;&#xA;ActiveRecord::Base.connection.execute(sql)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Link a &lt;code&gt;Student&lt;/code&gt; &#34;model&#34; to the &lt;code&gt;students&lt;/code&gt; Database Table&lt;/h3&gt; &#xA;&lt;p&gt;The last step is to tell your Ruby class to make use of Active Record&#39;s built-in ORM methods. With Active Record and other ORMs, this is managed through &lt;a href=&#34;https://github.com/learn-co-curriculum/phase-3-ruby-oo-inheritance-defining-inheritance&#34;&gt;Class Inheritance&lt;/a&gt;. We simply make &lt;em&gt;our&lt;/em&gt; class (&lt;code&gt;Student&lt;/code&gt;) a subclass of &lt;code&gt;ActiveRecord::Base&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Student &amp;lt; ActiveRecord::Base&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Our &lt;code&gt;Student&lt;/code&gt; class is now our gateway for talking to the &lt;code&gt;students&lt;/code&gt; table in the database.&lt;/p&gt; &#xA;&lt;p&gt;By simply following one &lt;em&gt;very important&lt;/em&gt; naming convention â€” &lt;strong&gt;class names are singular&lt;/strong&gt; and &lt;strong&gt;table names are plural&lt;/strong&gt; â€” we&#39;ve done enough to establish a relationship between our &lt;code&gt;Student&lt;/code&gt; class and the &lt;code&gt;students&lt;/code&gt; table! Active Record &#34;knows&#34; that when we&#39;re using the &lt;code&gt;Student&lt;/code&gt; class, the SQL code it writes for us should target the &lt;code&gt;students&lt;/code&gt; table.&lt;/p&gt; &#xA;&lt;p&gt;How does Active Record &#34;know&#34; about this relationship? Active Record follows the paradigm of &lt;a href=&#34;https://guides.rubyonrails.org/active_record_basics.html#convention-over-configuration-in-active-record&#34;&gt;&lt;strong&gt;convention over configuration&lt;/strong&gt;&lt;/a&gt;, which means that as developers, &lt;em&gt;as long as we follow the conventions&lt;/em&gt; that Active Record expects, we don&#39;t have to spend as much time writing out the configuration explicitly. That also means it is &lt;strong&gt;very&lt;/strong&gt; important to understand the conventions Active Record expects. So, to repeat:&lt;/p&gt; &#xA;&lt;p&gt;When using Active Record, our &lt;strong&gt;class names are singular&lt;/strong&gt; and &lt;strong&gt;table names are plural&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Running the Example&lt;/h3&gt; &#xA;&lt;p&gt;To code along with these examples, first, run &lt;code&gt;bundle install&lt;/code&gt; to set up the necessary gems. Then, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ruby active_record.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will enter you into a Pry session where you can try out the methods listed below.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you run into an error with the &lt;code&gt;sqlite3&lt;/code&gt; gem, try using &lt;code&gt;gem pristine sqlite3&lt;/code&gt; to restore the gem.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The &lt;code&gt;Student&lt;/code&gt; class is inheriting a whole bunch of &lt;a href=&#34;http://guides.rubyonrails.org/active_record_basics.html#creating-active-record-models&#34;&gt;new methods&lt;/a&gt; from the &lt;code&gt;ActiveRecord::Base&lt;/code&gt; class. Let&#39;s look at a few of them and try them out!&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;.column_names&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Retrieve a list of all the columns in the table:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Student.column_names&#xA;#=&amp;gt; [:id, :name]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;.create&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Create a new &lt;code&gt;Student&lt;/code&gt; entry in the database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Student.create(name: &#39;Jon&#39;)&#xA;# INSERT INTO students (name) VALUES (&#39;Jon&#39;)&#xA;# =&amp;gt; #&amp;lt;Student:0x00007f985d0638b0 id: 1, name: &#34;Jon&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll also see a log of the SQL that Active Record is writing for us, just like we did in our own ORMs!&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;.all&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return all the records from the &lt;code&gt;students&lt;/code&gt; table as instances of the &lt;code&gt;Student&lt;/code&gt; class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Student.all&#xA;# SELECT &#34;students&#34;.* FROM &#34;students&#34;&#xA;# =&amp;gt; [#&amp;lt;Student:0x00007f985d0638b0 id: 1, name: &#34;Jon&#34;&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;.find&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Retrieve a &lt;code&gt;Student&lt;/code&gt; from the database by &lt;code&gt;id&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Student.find(1)&#xA;# SELECT &#34;students&#34;.* FROM &#34;students&#34; WHERE &#34;students&#34;.&#34;id&#34; = 1 LIMIT 1&#xA;# =&amp;gt; #&amp;lt;Student:0x00007f985d0638b0 id: 1, name: &#34;Jon&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;.find_by&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Find by any attribute, such as &lt;code&gt;name&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Student.find_by(name: &#39;Jon&#39;)&#xA;# SELECT &#34;students&#34;.* FROM &#34;students&#34; WHERE &#34;students&#34;.&#34;name&#34; = &#39;Jon&#39; LIMIT 1&#xA;# =&amp;gt; #&amp;lt;Student:0x00007f985d0638b0 id: 1, name: &#34;Jon&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;attr_accessors&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;You can get or set attributes of an instance of &lt;code&gt;Student&lt;/code&gt; once you&#39;ve retrieved it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;student = Student.find_by(name: &#39;Jon&#39;)&#xA;student.name&#xA;#=&amp;gt; &#39;Jon&#39;&#xA;&#xA;student.name = &#39;Steve&#39;&#xA;&#xA;student.name&#xA;#=&amp;gt; &#39;Steve&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;#save&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;And then save those changes to the database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;student = Student.find_by(name: &#39;Jon&#39;)&#xA;student.name = &#39;Steve&#39;&#xA;student.save&#xA;# UPDATE &#34;students&#34; SET &#34;name&#34; = &#34;Steve&#34; WHERE &#34;students&#34;.&#34;id&#34; = 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that our &lt;code&gt;Student&lt;/code&gt; class doesn&#39;t have any methods defined for &lt;code&gt;#name&lt;/code&gt; either. Nor does it make use of Ruby&#39;s built-in &lt;code&gt;attr_accessor&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Student &amp;lt; ActiveRecord::Base&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All of the methods we&#39;ve seen are coming from &lt;code&gt;ActiveRecord::Base&lt;/code&gt;; we have access to them because we&#39;re following the convention of &lt;strong&gt;singular class names&lt;/strong&gt; and &lt;strong&gt;plural table names&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Conclusion&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ve now seen how Active Record creates a link between Ruby and databases. In the coming lessons, we&#39;ll explore how to build more realistic applications using Active Record, and some of the other methods we have access to in our classes.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://guides.rubyonrails.org/active_record_basics.html&#34;&gt;Active Record Basics&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>