<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-08T02:05:29Z</updated>
  <subtitle>Weekly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>flyerhzm/bullet</title>
    <updated>2023-01-08T02:05:29Z</updated>
    <id>tag:github.com,2023-01-08:/flyerhzm/bullet</id>
    <link href="https://github.com/flyerhzm/bullet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;help to kill N+1 queries and unused eager loading&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bullet&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/flyerhzm/bullet/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;Main workflow&#34;&gt; &lt;a href=&#34;http://badge.fury.io/rb/bullet&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/bullet.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://awesomecode.io/repos/flyerhzm/bullet&#34;&gt;&lt;img src=&#34;https://awesomecode.io/projects/6755235b-e2c1-459e-bf92-b8b13d0c0472/status&#34; alt=&#34;AwesomeCode Status for flyerhzm/bullet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://coderwall.com/flyerhzm&#34;&gt;&lt;img src=&#34;http://api.coderwall.com/flyerhzm/endorsecount.png&#34; alt=&#34;Coderwall Endorse&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Bullet gem is designed to help you increase your application&#39;s performance by reducing the number of queries it makes. It will watch your queries while you develop your application and notify you when you should add eager loading (N+1 queries), when you&#39;re using eager loading that isn&#39;t necessary and when you should use counter cache.&lt;/p&gt; &#xA;&lt;p&gt;Best practice is to use Bullet in development mode or custom mode (staging, profile, etc.). The last thing you want is your clients getting alerts about how lazy you are.&lt;/p&gt; &#xA;&lt;p&gt;Bullet gem now supports &lt;strong&gt;activerecord&lt;/strong&gt; &amp;gt;= 4.0 and &lt;strong&gt;mongoid&lt;/strong&gt; &amp;gt;= 4.0.&lt;/p&gt; &#xA;&lt;p&gt;If you use activerecord 2.x, please use bullet &amp;lt;= 4.5.0&lt;/p&gt; &#xA;&lt;p&gt;If you use activerecord 3.x, please use bullet &amp;lt; 5.5.0&lt;/p&gt; &#xA;&lt;h2&gt;External Introduction&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://railscasts.com/episodes/372-bullet&#34;&gt;http://railscasts.com/episodes/372-bullet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ruby5.envylabs.com/episodes/9-episode-8-september-8-2009&#34;&gt;http://ruby5.envylabs.com/episodes/9-episode-8-september-8-2009&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://railslab.newrelic.com/2009/10/23/episode-19-on-the-edge-part-1&#34;&gt;http://railslab.newrelic.com/2009/10/23/episode-19-on-the-edge-part-1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://weblog.rubyonrails.org/2009/10/22/community-highlights&#34;&gt;http://weblog.rubyonrails.org/2009/10/22/community-highlights&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;You can install it as a gem:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem install bullet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or add it into a Gemfile (Bundler):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;bullet&#39;, group: &#39;development&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;enable the Bullet gem with generate command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;bundle exec rails g bullet:install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The generate command will auto generate the default configuration and may ask to include in the test environment as well. See below for custom configuration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: make sure &lt;code&gt;bullet&lt;/code&gt; gem is added after activerecord (rails) and mongoid.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Bullet won&#39;t enable any notification systems unless you tell it to explicitly. Append to &lt;code&gt;config/environments/development.rb&lt;/code&gt; initializer with the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.after_initialize do&#xA;  Bullet.enable = true&#xA;  Bullet.sentry = true&#xA;  Bullet.alert = true&#xA;  Bullet.bullet_logger = true&#xA;  Bullet.console = true&#xA;  Bullet.xmpp = { :account  =&amp;gt; &#39;bullets_account@jabber.org&#39;,&#xA;                  :password =&amp;gt; &#39;bullets_password_for_jabber&#39;,&#xA;                  :receiver =&amp;gt; &#39;your_account@jabber.org&#39;,&#xA;                  :show_online_status =&amp;gt; true }&#xA;  Bullet.rails_logger = true&#xA;  Bullet.honeybadger = true&#xA;  Bullet.bugsnag = true&#xA;  Bullet.appsignal = true&#xA;  Bullet.airbrake = true&#xA;  Bullet.rollbar = true&#xA;  Bullet.add_footer = true&#xA;  Bullet.skip_html_injection = false&#xA;  Bullet.stacktrace_includes = [ &#39;your_gem&#39;, &#39;your_middleware&#39; ]&#xA;  Bullet.stacktrace_excludes = [ &#39;their_gem&#39;, &#39;their_middleware&#39;, [&#39;my_file.rb&#39;, &#39;my_method&#39;], [&#39;my_file.rb&#39;, 16..20] ]&#xA;  Bullet.slack = { webhook_url: &#39;http://some.slack.url&#39;, channel: &#39;#default&#39;, username: &#39;notifier&#39; }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The notifier of Bullet is a wrap of &lt;a href=&#34;https://github.com/flyerhzm/uniform_notifier&#34;&gt;uniform_notifier&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The code above will enable all of the Bullet notification systems:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Bullet.enable&lt;/code&gt;: enable Bullet gem, otherwise do nothing&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Bullet.alert&lt;/code&gt;: pop up a JavaScript alert in the browser&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Bullet.bullet_logger&lt;/code&gt;: log to the Bullet log file (Rails.root/log/bullet.log)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Bullet.console&lt;/code&gt;: log warnings to your browser&#39;s console.log (Safari/Webkit browsers or Firefox w/Firebug installed)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Bullet.xmpp&lt;/code&gt;: send XMPP/Jabber notifications to the receiver indicated. Note that the code will currently not handle the adding of contacts, so you will need to make both accounts indicated know each other manually before you will receive any notifications. If you restart the development server frequently, the &#39;coming online&#39; sound for the Bullet account may start to annoy - in this case set :show_online_status to false; you will still get notifications, but the Bullet account won&#39;t announce it&#39;s online status anymore.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Bullet.rails_logger&lt;/code&gt;: add warnings directly to the Rails log&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Bullet.honeybadger&lt;/code&gt;: add notifications to Honeybadger&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Bullet.bugsnag&lt;/code&gt;: add notifications to bugsnag&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Bullet.airbrake&lt;/code&gt;: add notifications to airbrake&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Bullet.appsignal&lt;/code&gt;: add notifications to AppSignal&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Bullet.rollbar&lt;/code&gt;: add notifications to rollbar&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Bullet.sentry&lt;/code&gt;: add notifications to sentry&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Bullet.add_footer&lt;/code&gt;: adds the details in the bottom left corner of the page. Double click the footer or use close button to hide footer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Bullet.skip_html_injection&lt;/code&gt;: prevents Bullet from injecting code into the returned HTML. This must be false for receiving alerts, showing the footer or console logging.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Bullet.skip_http_headers&lt;/code&gt;: don&#39;t add headers to API requests, and remove the javascript that relies on them. Note that this prevents bullet from logging warnings to the browser console or updating the footer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Bullet.stacktrace_includes&lt;/code&gt;: include paths with any of these substrings in the stack trace, even if they are not in your main app&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Bullet.stacktrace_excludes&lt;/code&gt;: ignore paths with any of these substrings in the stack trace, even if they are not in your main app. Each item can be a string (match substring), a regex, or an array where the first item is a path to match, and the second item is a line number, a Range of line numbers, or a (bare) method name, to exclude only particular lines in a file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Bullet.slack&lt;/code&gt;: add notifications to slack&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Bullet.raise&lt;/code&gt;: raise errors, useful for making your specs fail unless they have optimized queries&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Bullet also allows you to disable any of its detectors.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Each of these settings defaults to true&#xA;&#xA;# Detect N+1 queries&#xA;Bullet.n_plus_one_query_enable     = false&#xA;&#xA;# Detect eager-loaded associations which are not used&#xA;Bullet.unused_eager_loading_enable = false&#xA;&#xA;# Detect unnecessary COUNT queries which could be avoided&#xA;# with a counter_cache&#xA;Bullet.counter_cache_enable        = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Safe list&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes Bullet may notify you of query problems you don&#39;t care to fix, or which come from outside your code. You can add them to a safe list to ignore them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Bullet.add_safelist :type =&amp;gt; :n_plus_one_query, :class_name =&amp;gt; &#34;Post&#34;, :association =&amp;gt; :comments&#xA;Bullet.add_safelist :type =&amp;gt; :unused_eager_loading, :class_name =&amp;gt; &#34;Post&#34;, :association =&amp;gt; :comments&#xA;Bullet.add_safelist :type =&amp;gt; :counter_cache, :class_name =&amp;gt; &#34;Country&#34;, :association =&amp;gt; :cities&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to skip bullet in some specific controller actions, you can do like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ApplicationController &amp;lt; ActionController::Base&#xA;  around_action :skip_bullet, if: -&amp;gt; { defined?(Bullet) }&#xA;&#xA;  def skip_bullet&#xA;    previous_value = Bullet.enable?&#xA;    Bullet.enable = false&#xA;    yield&#xA;  ensure&#xA;    Bullet.enable = previous_value&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Log&lt;/h2&gt; &#xA;&lt;p&gt;The Bullet log &lt;code&gt;log/bullet.log&lt;/code&gt; will look something like this:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;N+1 Query:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;2009-08-25 20:40:17[INFO] USE eager loading detected:&#xA;  Post =&amp;gt; [:comments]·&#xA;  Add to your query: .includes([:comments])&#xA;2009-08-25 20:40:17[INFO] Call stack&#xA;  /Users/richard/Downloads/test/app/views/posts/index.html.erb:8:in `each&#39;&#xA;  /Users/richard/Downloads/test/app/controllers/posts_controller.rb:7:in `index&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first log entry is a notification that N+1 queries have been encountered. The remaining entry is a stack trace so you can find exactly where the queries were invoked in your code, and fix them.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unused eager loading:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;2009-08-25 20:53:56[INFO] AVOID eager loading detected&#xA;  Post =&amp;gt; [:comments]·&#xA;  Remove from your query: .includes([:comments])&#xA;2009-08-25 20:53:56[INFO] Call stack&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These lines are notifications that unused eager loadings have been encountered.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Need counter cache:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;2009-09-11 09:46:50[INFO] Need Counter Cache&#xA;  Post =&amp;gt; [:comments]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;XMPP/Jabber and Airbrake Support&lt;/h2&gt; &#xA;&lt;p&gt;see &lt;a href=&#34;https://github.com/flyerhzm/uniform_notifier&#34;&gt;https://github.com/flyerhzm/uniform_notifier&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Growl Support&lt;/h2&gt; &#xA;&lt;p&gt;Growl support is dropped from uniform_notifier 1.16.0, if you still want it, please use uniform_notifier 1.15.0.&lt;/p&gt; &#xA;&lt;h2&gt;Important&lt;/h2&gt; &#xA;&lt;p&gt;If you find Bullet does not work for you, &lt;em&gt;please disable your browser&#39;s cache&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Advanced&lt;/h2&gt; &#xA;&lt;h3&gt;Work with ActiveJob&lt;/h3&gt; &#xA;&lt;p&gt;Include &lt;code&gt;Bullet::ActiveJob&lt;/code&gt; in your &lt;code&gt;ApplicationJob&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ApplicationJob &amp;lt; ActiveJob::Base&#xA;  include Bullet::ActiveJob if Rails.env.development?&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Work with other background job solution&lt;/h3&gt; &#xA;&lt;p&gt;Use the Bullet.profile method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ApplicationJob &amp;lt; ActiveJob::Base&#xA;  around_perform do |_job, block|&#xA;    Bullet.profile do&#xA;      block.call&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Work with sinatra&lt;/h3&gt; &#xA;&lt;p&gt;Configure and use &lt;code&gt;Bullet::Rack&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;configure :development do&#xA;  Bullet.enable = true&#xA;  Bullet.bullet_logger = true&#xA;  use Bullet::Rack&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your application generates a Content-Security-Policy via a separate middleware, ensure that &lt;code&gt;Bullet::Rack&lt;/code&gt; is loaded &lt;em&gt;before&lt;/em&gt; that middleware.&lt;/p&gt; &#xA;&lt;h3&gt;Run in tests&lt;/h3&gt; &#xA;&lt;p&gt;First you need to enable Bullet in test environment.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/environments/test.rb&#xA;config.after_initialize do&#xA;  Bullet.enable = true&#xA;  Bullet.bullet_logger = true&#xA;  Bullet.raise = true # raise an error if n+1 query occurs&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then wrap each test in Bullet api.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/rails_helper.rb&#xA;if Bullet.enable?&#xA;  config.before(:each) do&#xA;    Bullet.start_request&#xA;  end&#xA;&#xA;  config.after(:each) do&#xA;    Bullet.perform_out_of_channel_notifications if Bullet.notification?&#xA;    Bullet.end_request&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Debug Mode&lt;/h2&gt; &#xA;&lt;p&gt;Bullet outputs some details info, to enable debug mode, set &lt;code&gt;BULLET_DEBUG=true&lt;/code&gt; env.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/flyerhzm/bullet/contributors&#34;&gt;https://github.com/flyerhzm/bullet/contributors&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;Bullet is designed to function as you browse through your application in development. To see it in action, you can follow these steps to create, detect, and fix example query problems.&lt;/p&gt; &#xA;&lt;p&gt;1. Create an example application&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rails new test_bullet&#xA;$ cd test_bullet&#xA;$ rails g scaffold post name:string&#xA;$ rails g scaffold comment name:string post_id:integer&#xA;$ bundle exec rake db:migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2. Change &lt;code&gt;app/models/post.rb&lt;/code&gt; and &lt;code&gt;app/models/comment.rb&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Post &amp;lt; ActiveRecord::Base&#xA;  has_many :comments&#xA;end&#xA;&#xA;class Comment &amp;lt; ActiveRecord::Base&#xA;  belongs_to :post&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3. Go to &lt;code&gt;rails c&lt;/code&gt; and execute&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;post1 = Post.create(:name =&amp;gt; &#39;first&#39;)&#xA;post2 = Post.create(:name =&amp;gt; &#39;second&#39;)&#xA;post1.comments.create(:name =&amp;gt; &#39;first&#39;)&#xA;post1.comments.create(:name =&amp;gt; &#39;second&#39;)&#xA;post2.comments.create(:name =&amp;gt; &#39;third&#39;)&#xA;post2.comments.create(:name =&amp;gt; &#39;fourth&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;4. Change the &lt;code&gt;app/views/posts/index.html.erb&lt;/code&gt; to produce a N+1 query&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;% @posts.each do |post| %&amp;gt;&#xA;  &amp;lt;tr&amp;gt;&#xA;    &amp;lt;td&amp;gt;&amp;lt;%= post.name %&amp;gt;&amp;lt;/td&amp;gt;&#xA;    &amp;lt;td&amp;gt;&amp;lt;%= post.comments.map(&amp;amp;:name) %&amp;gt;&amp;lt;/td&amp;gt;&#xA;    &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Show&#39;, post %&amp;gt;&amp;lt;/td&amp;gt;&#xA;    &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Edit&#39;, edit_post_path(post) %&amp;gt;&amp;lt;/td&amp;gt;&#xA;    &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Destroy&#39;, post, :confirm =&amp;gt; &#39;Are you sure?&#39;, :method =&amp;gt; :delete %&amp;gt;&amp;lt;/td&amp;gt;&#xA;  &amp;lt;/tr&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;5. Add the &lt;code&gt;bullet&lt;/code&gt; gem to the &lt;code&gt;Gemfile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;bullet&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;6. enable the Bullet gem with generate command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle exec rails g bullet:install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;7. Start the server&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rails s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;8. Visit &lt;code&gt;http://localhost:3000/posts&lt;/code&gt; in browser, and you will see a popup alert box that says&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;The request has unused preload associations as follows:&#xA;None&#xA;The request has N+1 queries as follows:&#xA;model: Post =&amp;gt; associations: [comment]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which means there is a N+1 query from the Post object to its Comment association.&lt;/p&gt; &#xA;&lt;p&gt;In the meantime, there&#39;s a log appended into &lt;code&gt;log/bullet.log&lt;/code&gt; file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;2010-03-07 14:12:18[INFO] N+1 Query in /posts&#xA;  Post =&amp;gt; [:comments]&#xA;  Add to your finder: :include =&amp;gt; [:comments]&#xA;2010-03-07 14:12:18[INFO] N+1 Query method call stack&#xA;  /home/flyerhzm/Downloads/test_bullet/app/views/posts/index.html.erb:14:in `_render_template__600522146_80203160_0&#39;&#xA;  /home/flyerhzm/Downloads/test_bullet/app/views/posts/index.html.erb:11:in `each&#39;&#xA;  /home/flyerhzm/Downloads/test_bullet/app/views/posts/index.html.erb:11:in `_render_template__600522146_80203160_0&#39;&#xA;  /home/flyerhzm/Downloads/test_bullet/app/controllers/posts_controller.rb:7:in `index&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The generated SQL is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Post Load (1.0ms)   SELECT * FROM &#34;posts&#34;&#xA;Comment Load (0.4ms)   SELECT * FROM &#34;comments&#34; WHERE (&#34;comments&#34;.post_id = 1)&#xA;Comment Load (0.3ms)   SELECT * FROM &#34;comments&#34; WHERE (&#34;comments&#34;.post_id = 2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;9. To fix the N+1 query, change &lt;code&gt;app/controllers/posts_controller.rb&lt;/code&gt; file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def index&#xA;  @posts = Post.includes(:comments)&#xA;&#xA;  respond_to do |format|&#xA;    format.html # index.html.erb&#xA;    format.xml  { render :xml =&amp;gt; @posts }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;10. Refresh &lt;code&gt;http://localhost:3000/posts&lt;/code&gt;. Now there&#39;s no alert box and nothing new in the log.&lt;/p&gt; &#xA;&lt;p&gt;The generated SQL is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Post Load (0.5ms)   SELECT * FROM &#34;posts&#34;&#xA;Comment Load (0.5ms)   SELECT &#34;comments&#34;.* FROM &#34;comments&#34; WHERE (&#34;comments&#34;.post_id IN (1,2))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;N+1 query fixed. Cool!&lt;/p&gt; &#xA;&lt;p&gt;11. Now simulate unused eager loading. Change &lt;code&gt;app/controllers/posts_controller.rb&lt;/code&gt; and &lt;code&gt;app/views/posts/index.html.erb&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def index&#xA;  @posts = Post.includes(:comments)&#xA;&#xA;  respond_to do |format|&#xA;    format.html # index.html.erb&#xA;    format.xml  { render :xml =&amp;gt; @posts }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;% @posts.each do |post| %&amp;gt;&#xA;  &amp;lt;tr&amp;gt;&#xA;    &amp;lt;td&amp;gt;&amp;lt;%= post.name %&amp;gt;&amp;lt;/td&amp;gt;&#xA;    &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Show&#39;, post %&amp;gt;&amp;lt;/td&amp;gt;&#xA;    &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Edit&#39;, edit_post_path(post) %&amp;gt;&amp;lt;/td&amp;gt;&#xA;    &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Destroy&#39;, post, :confirm =&amp;gt; &#39;Are you sure?&#39;, :method =&amp;gt; :delete %&amp;gt;&amp;lt;/td&amp;gt;&#xA;  &amp;lt;/tr&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;12. Refresh &lt;code&gt;http://localhost:3000/posts&lt;/code&gt;, and you will see a popup alert box that says&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;The request has unused preload associations as follows:&#xA;model: Post =&amp;gt; associations: [comment]&#xA;The request has N+1 queries as follows:&#xA;None&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Meanwhile, there&#39;s a line appended to &lt;code&gt;log/bullet.log&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;2009-08-25 21:13:22[INFO] Unused preload associations: PATH_INFO: /posts;    model: Post =&amp;gt; associations: [comments]·&#xA;Remove from your finder: :include =&amp;gt; [:comments]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;13. Simulate counter_cache. Change &lt;code&gt;app/controllers/posts_controller.rb&lt;/code&gt; and &lt;code&gt;app/views/posts/index.html.erb&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def index&#xA;  @posts = Post.all&#xA;&#xA;  respond_to do |format|&#xA;    format.html # index.html.erb&#xA;    format.xml  { render :xml =&amp;gt; @posts }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;% @posts.each do |post| %&amp;gt;&#xA;  &amp;lt;tr&amp;gt;&#xA;    &amp;lt;td&amp;gt;&amp;lt;%= post.name %&amp;gt;&amp;lt;/td&amp;gt;&#xA;    &amp;lt;td&amp;gt;&amp;lt;%= post.comments.size %&amp;gt;&amp;lt;/td&amp;gt;&#xA;    &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Show&#39;, post %&amp;gt;&amp;lt;/td&amp;gt;&#xA;    &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Edit&#39;, edit_post_path(post) %&amp;gt;&amp;lt;/td&amp;gt;&#xA;    &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Destroy&#39;, post, :confirm =&amp;gt; &#39;Are you sure?&#39;, :method =&amp;gt; :delete %&amp;gt;&amp;lt;/td&amp;gt;&#xA;  &amp;lt;/tr&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;14. Refresh &lt;code&gt;http://localhost:3000/posts&lt;/code&gt;, then you will see a popup alert box that says&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Need counter cache&#xA;  Post =&amp;gt; [:comments]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Meanwhile, there&#39;s a line appended to &lt;code&gt;log/bullet.log&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;2009-09-11 10:07:10[INFO] Need Counter Cache&#xA;  Post =&amp;gt; [:comments]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Copyright (c) 2009 - 2022 Richard Huang (&lt;a href=&#34;mailto:flyerhzm@gmail.com&#34;&gt;flyerhzm@gmail.com&lt;/a&gt;), released under the MIT license&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rspec/rspec-mocks</title>
    <updated>2023-01-08T02:05:29Z</updated>
    <id>tag:github.com,2023-01-08:/rspec/rspec-mocks</id>
    <link href="https://github.com/rspec/rspec-mocks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RSpec&#39;s &#39;test double&#39; framework, with support for stubbing and mocking&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RSpec Mocks &lt;a href=&#34;https://github.com/rspec/rspec-mocks/actions&#34;&gt;&lt;img src=&#34;https://github.com/rspec/rspec-mocks/workflows/RSpec%20CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/rspec/rspec-mocks&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/rspec/rspec-mocks.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;rspec-mocks is a test-double framework for rspec with support for method stubs, fakes, and message expectations on generated test-doubles and real objects alike.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem install rspec       # for rspec-core, rspec-expectations, rspec-mocks&#xA;gem install rspec-mocks # for rspec-mocks only&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Want to run against the &lt;code&gt;main&lt;/code&gt; branch? You&#39;ll need to include the dependent RSpec repos as well. Add the following to your &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;%w[rspec-core rspec-expectations rspec-mocks rspec-support].each do |lib|&#xA;  gem lib, :git =&amp;gt; &#34;https://github.com/rspec/#{lib}.git&#34;, :branch =&amp;gt; &#39;main&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Once you&#39;ve set up the environment, you&#39;ll need to cd into the working directory of whichever repo you want to work in. From there you can run the specs and cucumber features, and make patches.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: You do not need to use rspec-dev to work on a specific RSpec repo. You can treat each RSpec repo as an independent project.&lt;/p&gt; &#xA;&lt;p&gt;For information about contributing to RSpec, please refer to the following markdown files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rspec/rspec-mocks/main/BUILD_DETAIL.md&#34;&gt;Build details&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rspec/rspec-mocks/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rspec/rspec-mocks/main/CONTRIBUTING.md&#34;&gt;Detailed contributing guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rspec/rspec-mocks/main/DEVELOPMENT.md&#34;&gt;Development setup guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Test Doubles&lt;/h2&gt; &#xA;&lt;p&gt;A test double is an object that stands in for another object in your system during a code example. Use the &lt;code&gt;double&lt;/code&gt; method, passing in an optional identifier, to create one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;book = double(&#34;book&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Most of the time you will want some confidence that your doubles resemble an existing object in your system. Verifying doubles are provided for this purpose. If the existing object is available, they will prevent you from adding stubs and expectations for methods that do not exist or that have an invalid number of parameters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;book = instance_double(&#34;Book&#34;, :pages =&amp;gt; 250)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Verifying doubles have some clever tricks to enable you to both test in isolation without your dependencies loaded while still being able to validate them against real objects. More detail is available in &lt;a href=&#34;https://github.com/rspec/rspec-mocks/raw/main/features/verifying_doubles&#34;&gt;their documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Verifying doubles can also accept custom identifiers, just like double(), e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;books = []&#xA;books &amp;lt;&amp;lt; instance_double(&#34;Book&#34;, :rspec_book, :pages =&amp;gt; 250)&#xA;books &amp;lt;&amp;lt; instance_double(&#34;Book&#34;, &#34;(Untitled)&#34;, :pages =&amp;gt; 5000)&#xA;&#xA;puts books.inspect # with names, it&#39;s clearer which were actually added&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Method Stubs&lt;/h2&gt; &#xA;&lt;p&gt;A method stub is an implementation that returns a pre-determined value. Method stubs can be declared on test doubles or real objects using the same syntax. rspec-mocks supports 3 forms for declaring method stubs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;allow(book).to receive(:title) { &#34;The RSpec Book&#34; }&#xA;allow(book).to receive(:title).and_return(&#34;The RSpec Book&#34;)&#xA;allow(book).to receive_messages(&#xA;    :title =&amp;gt; &#34;The RSpec Book&#34;,&#xA;    :subtitle =&amp;gt; &#34;Behaviour-Driven Development with RSpec, Cucumber, and Friends&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use this shortcut, which creates a test double and declares a method stub in one statement:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;book = double(&#34;book&#34;, :title =&amp;gt; &#34;The RSpec Book&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first argument is a name, which is used for documentation and appears in failure messages. If you don&#39;t care about the name, you can leave it out, making the combined instantiation/stub declaration very terse:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;double(:foo =&amp;gt; &#39;bar&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is particularly nice when providing a list of test doubles to a method that iterates through them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;order.calculate_total_price(double(:price =&amp;gt; 1.99), double(:price =&amp;gt; 2.99))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Stubbing a chain of methods&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;receive_message_chain&lt;/code&gt; in place of &lt;code&gt;receive&lt;/code&gt; to stub a chain of messages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;allow(double).to receive_message_chain(&#34;foo.bar&#34;) { :baz }&#xA;allow(double).to receive_message_chain(:foo, :bar =&amp;gt; :baz)&#xA;allow(double).to receive_message_chain(:foo, :bar) { :baz }&#xA;&#xA;# Given any of the above forms:&#xA;double.foo.bar # =&amp;gt; :baz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Chains can be arbitrarily long, which makes it quite painless to violate the Law of Demeter in violent ways, so you should consider any use of &lt;code&gt;receive_message_chain&lt;/code&gt; a code smell. Even though not all code smells indicate real problems (think fluent interfaces), &lt;code&gt;receive_message_chain&lt;/code&gt; still results in brittle examples. For example, if you write &lt;code&gt;allow(foo).to receive_message_chain(:bar, :baz =&amp;gt; 37)&lt;/code&gt; in a spec and then the implementation calls &lt;code&gt;foo.baz.bar&lt;/code&gt;, the stub will not work.&lt;/p&gt; &#xA;&lt;h2&gt;Consecutive return values&lt;/h2&gt; &#xA;&lt;p&gt;When a stub might be invoked more than once, you can provide additional arguments to &lt;code&gt;and_return&lt;/code&gt;. The invocations cycle through the list. The last value is returned for any subsequent invocations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;allow(die).to receive(:roll).and_return(1, 2, 3)&#xA;die.roll # =&amp;gt; 1&#xA;die.roll # =&amp;gt; 2&#xA;die.roll # =&amp;gt; 3&#xA;die.roll # =&amp;gt; 3&#xA;die.roll # =&amp;gt; 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To return an array in a single invocation, declare an array:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;allow(team).to receive(:players).and_return([double(:name =&amp;gt; &#34;David&#34;)])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Message Expectations&lt;/h2&gt; &#xA;&lt;p&gt;A message expectation is an expectation that the test double will receive a message some time before the example ends. If the message is received, the expectation is satisfied. If not, the example fails.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;validator = double(&#34;validator&#34;)&#xA;expect(validator).to receive(:validate) { &#34;02134&#34; }&#xA;zipcode = Zipcode.new(&#34;02134&#34;, validator)&#xA;zipcode.valid?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Test Spies&lt;/h2&gt; &#xA;&lt;p&gt;Verifies the given object received the expected message during the course of the test. For a message to be verified, the given object must be setup to spy on it, either by having it explicitly stubbed or by being a null object double (e.g. &lt;code&gt;double(...).as_null_object&lt;/code&gt;). Convenience methods are provided to easily create null object doubles for this purpose:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;spy(&#34;invitation&#34;) # =&amp;gt; same as `double(&#34;invitation&#34;).as_null_object`&#xA;instance_spy(&#34;Invitation&#34;) # =&amp;gt; same as `instance_double(&#34;Invitation&#34;).as_null_object`&#xA;class_spy(&#34;Invitation&#34;) # =&amp;gt; same as `class_double(&#34;Invitation&#34;).as_null_object`&#xA;object_spy(&#34;Invitation&#34;) # =&amp;gt; same as `object_double(&#34;Invitation&#34;).as_null_object`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Verifying messages received in this way implements the Test Spy pattern.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;invitation = spy(&#39;invitation&#39;)&#xA;&#xA;user.accept_invitation(invitation)&#xA;&#xA;expect(invitation).to have_received(:accept)&#xA;&#xA;# You can also use other common message expectations. For example:&#xA;expect(invitation).to have_received(:accept).with(mailer)&#xA;expect(invitation).to have_received(:accept).twice&#xA;expect(invitation).to_not have_received(:accept).with(mailer)&#xA;&#xA;# One can specify a return value on the spy the same way one would a double.&#xA;invitation = spy(&#39;invitation&#39;, :accept =&amp;gt; true)&#xA;expect(invitation).to have_received(:accept).with(mailer)&#xA;expect(invitation.accept).to eq(true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;have_received(...).with(...)&lt;/code&gt; is unable to work properly when passed arguments are mutated after the spy records the received message. For example, this does not work properly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;greeter = spy(&#34;greeter&#34;)&#xA;&#xA;message = &#34;Hello&#34;&#xA;greeter.greet_with(message)&#xA;message &amp;lt;&amp;lt; &#34;, World&#34;&#xA;&#xA;expect(greeter).to have_received(:greet_with).with(&#34;Hello&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Nomenclature&lt;/h2&gt; &#xA;&lt;h3&gt;Mock Objects and Test Stubs&lt;/h3&gt; &#xA;&lt;p&gt;The names Mock Object and Test Stub suggest specialized Test Doubles. i.e. a Test Stub is a Test Double that only supports method stubs, and a Mock Object is a Test Double that supports message expectations and method stubs.&lt;/p&gt; &#xA;&lt;p&gt;There is a lot of overlapping nomenclature here, and there are many variations of these patterns (fakes, spies, etc). Keep in mind that most of the time we&#39;re talking about method-level concepts that are variations of method stubs and message expectations, and we&#39;re applying to them to &lt;em&gt;one&lt;/em&gt; generic kind of object: a Test Double.&lt;/p&gt; &#xA;&lt;h3&gt;Test-Specific Extension&lt;/h3&gt; &#xA;&lt;p&gt;a.k.a. Partial Double, a Test-Specific Extension is an extension of a real object in a system that is instrumented with test-double like behaviour in the context of a test. This technique is very common in Ruby because we often see class objects acting as global namespaces for methods. For example, in Rails:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;person = double(&#34;person&#34;)&#xA;allow(Person).to receive(:find) { person }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case we&#39;re instrumenting Person to return the person object we&#39;ve defined whenever it receives the &lt;code&gt;find&lt;/code&gt; message. We can also set a message expectation so that the example fails if &lt;code&gt;find&lt;/code&gt; is not called:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;person = double(&#34;person&#34;)&#xA;expect(Person).to receive(:find) { person }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;RSpec replaces the method we&#39;re stubbing or mocking with its own test-double-like method. At the end of the example, RSpec verifies any message expectations, and then restores the original methods.&lt;/p&gt; &#xA;&lt;h2&gt;Expecting Arguments&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(double).to receive(:msg).with(*args)&#xA;expect(double).to_not receive(:msg).with(*args)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set multiple expectations for the same message if you need to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(double).to receive(:msg).with(&#34;A&#34;, 1, 3)&#xA;expect(double).to receive(:msg).with(&#34;B&#34;, 2, 4)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Argument Matchers&lt;/h2&gt; &#xA;&lt;p&gt;Arguments that are passed to &lt;code&gt;with&lt;/code&gt; are compared with actual arguments received using ===. In cases in which you want to specify things about the arguments rather than the arguments themselves, you can use any of the matchers that ship with rspec-expectations. They don&#39;t all make syntactic sense (they were primarily designed for use with RSpec::Expectations), but you are free to create your own custom RSpec::Matchers.&lt;/p&gt; &#xA;&lt;p&gt;rspec-mocks also adds some keyword Symbols that you can use to specify certain kinds of arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(double).to receive(:msg).with(no_args)&#xA;expect(double).to receive(:msg).with(any_args)&#xA;expect(double).to receive(:msg).with(1, any_args) # any args acts like an arg splat and can go anywhere&#xA;expect(double).to receive(:msg).with(1, kind_of(Numeric), &#34;b&#34;) #2nd argument can be any kind of Numeric&#xA;expect(double).to receive(:msg).with(1, boolean(), &#34;b&#34;) #2nd argument can be true or false&#xA;expect(double).to receive(:msg).with(1, /abc/, &#34;b&#34;) #2nd argument can be any String matching the submitted Regexp&#xA;expect(double).to receive(:msg).with(1, anything(), &#34;b&#34;) #2nd argument can be anything at all&#xA;expect(double).to receive(:msg).with(1, duck_type(:abs, :div), &#34;b&#34;) #2nd argument can be object that responds to #abs and #div&#xA;expect(double).to receive(:msg).with(hash_including(:a =&amp;gt; 5)) # first arg is a hash with a: 5 as one of the key-values&#xA;expect(double).to receive(:msg).with(array_including(5)) # first arg is an array with 5 as one of the key-values&#xA;expect(double).to receive(:msg).with(hash_excluding(:a =&amp;gt; 5)) # first arg is a hash without a: 5 as one of the key-values&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Receive Counts&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(double).to receive(:msg).once&#xA;expect(double).to receive(:msg).twice&#xA;expect(double).to receive(:msg).exactly(n).time&#xA;expect(double).to receive(:msg).exactly(n).times&#xA;expect(double).to receive(:msg).at_least(:once)&#xA;expect(double).to receive(:msg).at_least(:twice)&#xA;expect(double).to receive(:msg).at_least(n).time&#xA;expect(double).to receive(:msg).at_least(n).times&#xA;expect(double).to receive(:msg).at_most(:once)&#xA;expect(double).to receive(:msg).at_most(:twice)&#xA;expect(double).to receive(:msg).at_most(n).time&#xA;expect(double).to receive(:msg).at_most(n).times&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Ordering&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(double).to receive(:msg).ordered&#xA;expect(double).to receive(:other_msg).ordered&#xA;  # This will fail if the messages are received out of order&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can include the same message with different arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(double).to receive(:msg).with(&#34;A&#34;, 1, 3).ordered&#xA;expect(double).to receive(:msg).with(&#34;B&#34;, 2, 4).ordered&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setting Responses&lt;/h2&gt; &#xA;&lt;p&gt;Whether you are setting a message expectation or a method stub, you can tell the object precisely how to respond. The most generic way is to pass a block to &lt;code&gt;receive&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(double).to receive(:msg) { value }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the double receives the &lt;code&gt;msg&lt;/code&gt; message, it evaluates the block and returns the result.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(double).to receive(:msg).and_return(value)&#xA;expect(double).to receive(:msg).exactly(3).times.and_return(value1, value2, value3)&#xA;  # returns value1 the first time, value2 the second, etc&#xA;expect(double).to receive(:msg).and_raise(error)&#xA;  # `error` can be an instantiated object (e.g. `StandardError.new(some_arg)`) or a class (e.g. `StandardError`)&#xA;  # if it is a class, it must be instantiable with no args&#xA;expect(double).to receive(:msg).and_throw(:msg)&#xA;expect(double).to receive(:msg).and_yield(values, to, yield)&#xA;expect(double).to receive(:msg).and_yield(values, to, yield).and_yield(some, other, values, this, time)&#xA;  # for methods that yield to a block multiple times&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any of these responses can be applied to a stub as well&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;allow(double).to receive(:msg).and_return(value)&#xA;allow(double).to receive(:msg).and_return(value1, value2, value3)&#xA;allow(double).to receive(:msg).and_raise(error)&#xA;allow(double).to receive(:msg).and_throw(:msg)&#xA;allow(double).to receive(:msg).and_yield(values, to, yield)&#xA;allow(double).to receive(:msg).and_yield(values, to, yield).and_yield(some, other, values, this, time)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Arbitrary Handling&lt;/h2&gt; &#xA;&lt;p&gt;Once in a while you&#39;ll find that the available expectations don&#39;t solve the particular problem you are trying to solve. Imagine that you expect the message to come with an Array argument that has a specific length, but you don&#39;t care what is in it. You could do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(double).to receive(:msg) do |arg|&#xA;  expect(arg.size).to eq 7&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the method being stubbed itself takes a block, and you need to yield to it in some special way, you can use this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(double).to receive(:msg) do |&amp;amp;arg|&#xA;  begin&#xA;    arg.call&#xA;  ensure&#xA;    # cleanup&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Delegating to the Original Implementation&lt;/h2&gt; &#xA;&lt;p&gt;When working with a partial mock object, you may occasionally want to set a message expectation without interfering with how the object responds to the message. You can use &lt;code&gt;and_call_original&lt;/code&gt; to achieve this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(Person).to receive(:find).and_call_original&#xA;Person.find # =&amp;gt; executes the original find method and returns the result&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Combining Expectation Details&lt;/h2&gt; &#xA;&lt;p&gt;Combining the message name with specific arguments, receive counts and responses you can get quite a bit of detail in your expectations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(double).to receive(:&amp;lt;&amp;lt;).with(&#34;illegal value&#34;).once.and_raise(ArgumentError)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;While this is a good thing when you really need it, you probably don&#39;t really need it! Take care to specify only the things that matter to the behavior of your code.&lt;/p&gt; &#xA;&lt;h2&gt;Stubbing and Hiding Constants&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/rspec/rspec-mocks/raw/main/features/mutating_constants/README.md&#34;&gt;mutating constants README&lt;/a&gt; for info on this feature.&lt;/p&gt; &#xA;&lt;h2&gt;Use &lt;code&gt;before(:example)&lt;/code&gt;, not &lt;code&gt;before(:context)&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Stubs in &lt;code&gt;before(:context)&lt;/code&gt; are not supported. The reason is that all stubs and mocks get cleared out after each example, so any stub that is set in &lt;code&gt;before(:context)&lt;/code&gt; would work in the first example that happens to run in that group, but not for any others.&lt;/p&gt; &#xA;&lt;p&gt;Instead of &lt;code&gt;before(:context)&lt;/code&gt;, use &lt;code&gt;before(:example)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Settings mocks or stubs on any instance of a class&lt;/h2&gt; &#xA;&lt;p&gt;rspec-mocks provides two methods, &lt;code&gt;allow_any_instance_of&lt;/code&gt; and &lt;code&gt;expect_any_instance_of&lt;/code&gt;, that will allow you to stub or mock any instance of a class. They are used in place of &lt;code&gt;allow&lt;/code&gt; or &lt;code&gt;expect&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;allow_any_instance_of(Widget).to receive(:name).and_return(&#34;Wibble&#34;)&#xA;expect_any_instance_of(Widget).to receive(:name).and_return(&#34;Wobble&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These methods add the appropriate stub or expectation to all instances of &lt;code&gt;Widget&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This feature is sometimes useful when working with legacy code, though in general we discourage its use for a number of reasons:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;rspec-mocks&lt;/code&gt; API is designed for individual object instances, but this feature operates on entire classes of objects. As a result there are some semantically confusing edge cases. For example in &lt;code&gt;expect_any_instance_of(Widget).to receive(:name).twice&lt;/code&gt; it isn&#39;t clear whether each specific instance is expected to receive &lt;code&gt;name&lt;/code&gt; twice, or if two receives total are expected. (It&#39;s the former.)&lt;/li&gt; &#xA; &lt;li&gt;Using this feature is often a design smell. It may be that your test is trying to do too much or that the object under test is too complex.&lt;/li&gt; &#xA; &lt;li&gt;It is the most complicated feature of &lt;code&gt;rspec-mocks&lt;/code&gt;, and has historically received the most bug reports. (None of the core team actively use it, which doesn&#39;t help.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Further Reading&lt;/h2&gt; &#xA;&lt;p&gt;There are many different viewpoints about the meaning of mocks and stubs. If you are interested in learning more, here is some recommended reading:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mock Objects: &lt;a href=&#34;http://www.mockobjects.com/&#34;&gt;http://www.mockobjects.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Endo-Testing: &lt;a href=&#34;http://www.ccs.neu.edu/research/demeter/related-work/extreme-programming/MockObjectsFinal.PDF&#34;&gt;http://www.ccs.neu.edu/research/demeter/related-work/extreme-programming/MockObjectsFinal.PDF&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mock Roles, Not Objects: &lt;a href=&#34;http://www.jmock.org/oopsla2004.pdf&#34;&gt;http://www.jmock.org/oopsla2004.pdf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Test Double: &lt;a href=&#34;http://www.martinfowler.com/bliki/TestDouble.html&#34;&gt;http://www.martinfowler.com/bliki/TestDouble.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Test Double Patterns: &lt;a href=&#34;http://xunitpatterns.com/Test%20Double%20Patterns.html&#34;&gt;http://xunitpatterns.com/Test%20Double%20Patterns.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mocks aren&#39;t stubs: &lt;a href=&#34;http://www.martinfowler.com/articles/mocksArentStubs.html&#34;&gt;http://www.martinfowler.com/articles/mocksArentStubs.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Also see&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rspec/rspec&#34;&gt;https://github.com/rspec/rspec&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rspec/rspec-core&#34;&gt;https://github.com/rspec/rspec-core&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rspec/rspec-expectations&#34;&gt;https://github.com/rspec/rspec-expectations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rspec/rspec-rails&#34;&gt;https://github.com/rspec/rspec-rails&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>rubocop/rubocop-rails</title>
    <updated>2023-01-08T02:05:29Z</updated>
    <id>tag:github.com,2023-01-08:/rubocop/rubocop-rails</id>
    <link href="https://github.com/rubocop/rubocop-rails" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A RuboCop extension focused on enforcing Rails best practices and coding conventions.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RuboCop Rails&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/rb/rubocop-rails&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/rubocop-rails.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/rubocop/rubocop-rails&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/rubocop/rubocop-rails.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://github.com/rubocop/rubocop&#34;&gt;RuboCop&lt;/a&gt; extension focused on enforcing Rails best practices and coding conventions.&lt;/p&gt; &#xA;&lt;p&gt;Note: This repository manages rubocop-rails gem (&amp;gt;= 2.0.0). rubocop-rails gem (&amp;lt;= 1.5.0) has been renamed to &lt;a href=&#34;https://rubygems.org/gems/rubocop-rails_config&#34;&gt;rubocop-rails_config&lt;/a&gt; gem.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Just install the &lt;code&gt;rubocop-rails&lt;/code&gt; gem&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gem install rubocop-rails&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or if you use bundler put this in your &lt;code&gt;Gemfile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;rubocop-rails&#39;, require: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You need to tell RuboCop to load the Rails extension. There are three ways to do this:&lt;/p&gt; &#xA;&lt;h3&gt;RuboCop configuration file&lt;/h3&gt; &#xA;&lt;p&gt;Put this into your &lt;code&gt;.rubocop.yml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;require: rubocop-rails&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, use the following array notation when specifying multiple extensions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;require:&#xA;  - rubocop-other-extension&#xA;  - rubocop-rails&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can run &lt;code&gt;rubocop&lt;/code&gt; and it will automatically load the RuboCop Rails cops together with the standard cops.&lt;/p&gt; &#xA;&lt;h3&gt;Command line&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rubocop --require rubocop-rails&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;--rails&lt;/code&gt; option is required while &lt;code&gt;rubocop&lt;/code&gt; command supports &lt;code&gt;--rails&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h3&gt;Rake task&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RuboCop::RakeTask.new do |task|&#xA;  task.requires &amp;lt;&amp;lt; &#39;rubocop-rails&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;The Cops&lt;/h2&gt; &#xA;&lt;p&gt;All cops are located under &lt;a href=&#34;https://raw.githubusercontent.com/rubocop/rubocop-rails/master/lib/rubocop/cop/rails&#34;&gt;&lt;code&gt;lib/rubocop/cop/rails&lt;/code&gt;&lt;/a&gt;, and contain examples/documentation.&lt;/p&gt; &#xA;&lt;p&gt;In your &lt;code&gt;.rubocop.yml&lt;/code&gt;, you may treat the Rails cops just like any other cop. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;Rails/FindBy:&#xA;  Exclude:&#xA;    - lib/example.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can read a lot more about RuboCop Rails in its &lt;a href=&#34;https://docs.rubocop.org/rubocop-rails/&#34;&gt;official docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;Rails cops support the following versions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Rails 4.2+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Readme Badge&lt;/h2&gt; &#xA;&lt;p&gt;If you use RuboCop Rails in your project, you can include one of these badges in your readme to let people know that your code is written following the community Rails Style Guide.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rubocop/rubocop-rails&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code_style-rubocop-brightgreen.svg?sanitize=true&#34; alt=&#34;Rails Style Guide&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rails.rubystyle.guide&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code_style-community-brightgreen.svg?sanitize=true&#34; alt=&#34;Rails Style Guide&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here are the Markdown snippets for the two badges:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;[![Rails Style Guide](https://img.shields.io/badge/code_style-rubocop-brightgreen.svg)](https://github.com/rubocop/rubocop-rails)&#xA;&#xA;[![Rails Style Guide](https://img.shields.io/badge/code_style-community-brightgreen.svg)](https://rails.rubystyle.guide)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Checkout the &lt;a href=&#34;https://raw.githubusercontent.com/rubocop/rubocop-rails/master/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;rubocop-rails&lt;/code&gt; is MIT licensed. &lt;a href=&#34;https://raw.githubusercontent.com/rubocop/rubocop-rails/master/LICENSE.txt&#34;&gt;See the accompanying file&lt;/a&gt; for the full text.&lt;/p&gt;</summary>
  </entry>
</feed>