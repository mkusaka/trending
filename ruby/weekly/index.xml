<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-18T01:49:42Z</updated>
  <subtitle>Weekly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>shivammathur/homebrew-php</title>
    <updated>2022-12-18T01:49:42Z</updated>
    <id>tag:github.com,2022-12-18:/shivammathur/homebrew-php</id>
    <link href="https://github.com/shivammathur/homebrew-php" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üç∫ Homebrew tap for PHP 5.6 to 8.3. PHP 8.3 are nightly builds.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/shivammathur/homebrew-php&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://repository-images.githubusercontent.com/229187949/f140f880-4c25-11eb-8105-aefec9dc7c66&#34; alt=&#34;Homebrew Tap for PHP&#34; width=&#34;560&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;brew tap shivammathur/php&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/shivammathur/homebrew-php&#34; title=&#34;Homebrew tap to install PHP&#34;&gt; &lt;img alt=&#34;Build status&#34; src=&#34;https://github.com/shivammathur/homebrew-php/workflows/Update%20and%20Build%20Formulae/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/shivammathur/homebrew-php/raw/master/LICENSE&#34; title=&#34;license&#34;&gt; &lt;img alt=&#34;LICENSE&#34; src=&#34;https://img.shields.io/badge/license-MIT-428f7e.svg?logo=open%20source%20initiative&amp;amp;logoColor=white&amp;amp;labelColor=555555&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/shivammathur/homebrew-php/tree/master/Formula&#34; title=&#34;Formulae for PHP versions&#34;&gt; &lt;img alt=&#34;PHP Versions Supported&#34; src=&#34;https://img.shields.io/badge/php-5.6%20to%208.3-777bb3.svg?logo=php&amp;amp;logoColor=white&amp;amp;labelColor=555555&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/shivammathur/homebrew-php#os-support&#34; title=&#34;Linux x86_64 supported&#34;&gt; &lt;img alt=&#34;Linux architectures supported&#34; src=&#34;https://img.shields.io/badge/Linux-x86__64%20-f6ab01?logo=linux&amp;amp;logoColor=555555&amp;amp;labelColor=ffffff&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/shivammathur/homebrew-php#os-support&#34; title=&#34;Apple Intel x86_64 supported&#34;&gt; &lt;img alt=&#34;macOS architectures supported&#34; src=&#34;https://img.shields.io/badge/macOS-Intel%20x86__64%20-007DC3?logo=apple&amp;amp;logoColor=555555&amp;amp;labelColor=ffffff&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/shivammathur/homebrew-php#os-support&#34; title=&#34;Apple M1 arm64 supported&#34;&gt; &lt;img alt=&#34;macOS architectures supported&#34; src=&#34;https://img.shields.io/badge/macOS-Apple%20arm64%20-c0476d?logo=apple&amp;amp;logoColor=555555&amp;amp;labelColor=ffffff&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;PHP Support&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;PHP Version&lt;/th&gt; &#xA;   &lt;th&gt;Formula&lt;/th&gt; &#xA;   &lt;th&gt;Debug version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PHP 5.6&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php@5.6&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php@5.6-debug&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PHP 7.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php@7.0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php@7.0-debug&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PHP 7.1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php@7.1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php@7.1-debug&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PHP 7.2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php@7.2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php@7.2-debug&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PHP 7.3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php@7.3&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php@7.3-debug&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PHP 7.4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php@7.4&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php@7.4-debug&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PHP 8.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php@8.0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php@8.0-debug&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PHP 8.1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php@8.1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php@8.1-debug&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PHP 8.2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php&lt;/code&gt; or &lt;code&gt;php@8.2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php-debug&lt;/code&gt; or &lt;code&gt;php@8.2-debug&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PHP 8.3.0-dev&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php@8.3&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php@8.3-debug&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Debug versions&lt;/h3&gt; &#xA;&lt;p&gt;For each PHP version there is an extra formula with debug symbols enabled. This version can be used when building or debugging PHP extensions and are not recommended for production usage.&lt;/p&gt; &#xA;&lt;h2&gt;OS Support&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Operating System&lt;/th&gt; &#xA;   &lt;th&gt;Architecture&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;x86_64&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS Big Sur&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;x86_64&lt;/code&gt;, &lt;code&gt;arm64&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS Monterey&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;x86_64&lt;/code&gt;, &lt;code&gt;arm64&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS Ventura&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;x86_64&lt;/code&gt;, &lt;code&gt;arm64&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On macOS, install Xcode Command Line Utilities:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;xcode-select --install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On Linux, install cURL and Git:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Using APT&#xA;sudo apt-get install -y curl git&#xA;&#xA;# Using Yum&#xA;sudo yum install -y curl git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Homebrew:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;/bin/bash -c &#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If previously installed, update homebrew and the formulae:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;brew update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you have packages from old &lt;code&gt;homebrew/php&lt;/code&gt; tap, refer to &lt;a href=&#34;https://github.com/shivammathur/homebrew-php/wiki/Cleanup&#34;&gt;this guide&lt;/a&gt; for removing them.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Add this tap&lt;/h3&gt; &#xA;&lt;p&gt;Fetch the formulae in this tap:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;brew tap shivammathur/php&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install PHP&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/shivammathur/homebrew-php/master/#php-support&#34;&gt;PHP Support&lt;/a&gt; for available formulae.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For example, to install &lt;code&gt;PHP 8.1&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;brew install shivammathur/php/php@8.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;After installing you have to link it:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;brew link --overwrite --force shivammathur/php/php@8.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Restart the terminal and test your PHP version:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;php -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Upgrade your PHP version&lt;/h3&gt; &#xA;&lt;p&gt;You can upgrade your PHP version to the latest patch release.&lt;/p&gt; &#xA;&lt;p&gt;For example, to upgrade &lt;code&gt;PHP 8.1&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;brew upgrade shivammathur/php/php@8.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Switch between PHP versions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you have multiple PHP versions installed, you can switch between them easily.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, to switch to &lt;code&gt;PHP 8.1&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;brew link --overwrite --force shivammathur/php/php@8.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you get a warning like below, then do as recommended:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;Warning: Already linked: &amp;lt;Cellar Path&amp;gt;&#xA;To relink:&#xA;  brew unlink &amp;lt;formula&amp;gt; &amp;amp;&amp;amp; brew link &amp;lt;formula&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;brew unlink php@8.1&#xA;brew link --overwrite --force shivammathur/php/php@8.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Restart your webserver&lt;/h3&gt; &#xA;&lt;p&gt;If you are using &lt;code&gt;Apache&lt;/code&gt; or &lt;code&gt;Nginx&lt;/code&gt; with &lt;code&gt;php-fpm&lt;/code&gt;, restart your webserver after any change in your PHP.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For Apache (&lt;code&gt;httpd&lt;/code&gt;):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;brew services restart httpd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For Nginx:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;brew services restart nginx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure you ran &lt;code&gt;brew update&lt;/code&gt; before installing PHP.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;brew doctor&lt;/code&gt; and fix the warnings it reports.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure homebrew has correct permissions.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;sudo chown -R &#34;$(id -un)&#34;:&#34;$(id -gn)&#34; $(brew --prefix)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If PHP is not working after a macOS update. Reinstall PHP along with its dependencies.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example to reinstall &lt;code&gt;PHP 8.1&lt;/code&gt; and its dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;brew reinstall $(brew deps shivammathur/php/php@8.1) shivammathur/php/php@8.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Check if your issue is a Homebrew&#39;s &lt;a href=&#34;https://docs.brew.sh/Common-Issues&#34;&gt;common issue&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are still facing an issue, please create a discussion thread &lt;a href=&#34;https://github.com/shivammathur/homebrew-php/discussions&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The code in this project is licensed under the &lt;a href=&#34;http://choosealicense.com/licenses/mit/&#34;&gt;MIT license&lt;/a&gt;. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/shivammathur/homebrew-php/master/LICENSE&#34;&gt;license file&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;This project has some &lt;a href=&#34;https://raw.githubusercontent.com/shivammathur/homebrew-php/master/#dependencies&#34;&gt;dependencies&lt;/a&gt;, and their license can be found &lt;a href=&#34;https://raw.githubusercontent.com/shivammathur/homebrew-php/master/LICENSE_HOMEBREW&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! Please see &lt;a href=&#34;https://raw.githubusercontent.com/shivammathur/homebrew-php/master/.github/CONTRIBUTING.md&#34; title=&#34;shivammathur/homebrew-php contribution guide&#34;&gt;Contributor&#39;s Guide&lt;/a&gt; before you start. If you face any issues while using this tap or want to suggest a feature/improvement, create an discussion thread &lt;a href=&#34;https://github.com/shivammathur/homebrew-php/discussions&#34; title=&#34;shivammathur/php discussions&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;In addition to GitHub Actions, we use &lt;a href=&#34;https://www.macstadium.com/opensource/members&#34;&gt;MacStadium&lt;/a&gt; and &lt;a href=&#34;https://www.scaleway.com/en/about-us/open-source-program&#34;&gt;Scaleway&lt;/a&gt; for our CI infrastructure.&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.macstadium.com/opensource/members#gh-light-mode-only&#34;&gt; &lt;img src=&#34;https://setup-php.com/sponsors/macstadium.png&#34; alt=&#34;Mac Stadium&#34; width=&#34;200px&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://www.macstadium.com/opensource/members#gh-dark-mode-only&#34;&gt; &lt;img src=&#34;https://setup-php.com/sponsors/macstadium-white.png&#34; alt=&#34;Mac Stadium&#34; width=&#34;200px&#34;&gt; &lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &#xA;&lt;a href=&#34;https://www.scaleway.com/en/about-us/open-source-program#gh-light-mode-only&#34;&gt; &lt;img src=&#34;https://setup-php.com/sponsors/scaleway.png&#34; alt=&#34;Scaleway&#34; width=&#34;236&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://www.scaleway.com/en/about-us/open-source-program#gh-dark-mode-only&#34;&gt; &lt;img src=&#34;https://setup-php.com/sponsors/scaleway-white.png&#34; alt=&#34;Scaleway&#34; width=&#34;236&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;This project is generously supported by many other users and organisations via &lt;a href=&#34;https://github.com/sponsors/shivammathur&#34;&gt;GitHub Sponsors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sponsors/shivammathur&#34;&gt;&lt;img src=&#34;https://setup-php.com/sponsors.svg?&#34; alt=&#34;Sponsor shivammathur&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shivammathur/homebrew-extensions&#34; title=&#34;Tap for PHP extensions&#34;&gt;shivammathur/homebrew-extensions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shivammathur/setup-php&#34; title=&#34;Setup PHP in GitHub Actions&#34;&gt;shivammathur/setup-php&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Homebrew/brew&#34; title=&#34;Homebrew GitHub Repo&#34;&gt;Homebrew/brew&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Homebrew/homebrew-core&#34; title=&#34;Homebrew core tap&#34;&gt;Homebrew/homebrew-core&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Homebrew/actions&#34; title=&#34;Homebrew GitHub Actions&#34;&gt;Homebrew/actions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Homebrew/homebrew-bundle</title>
    <updated>2022-12-18T01:49:42Z</updated>
    <id>tag:github.com,2022-12-18:/Homebrew/homebrew-bundle</id>
    <link href="https://github.com/Homebrew/homebrew-bundle" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üì¶ Bundler for non-Ruby dependencies from Homebrew, Homebrew Cask and the Mac App Store.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Homebrew Bundle&lt;/h1&gt; &#xA;&lt;p&gt;Bundler for non-Ruby dependencies from Homebrew, Homebrew Cask, Mac App Store and Whalebrew.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Homebrew/brew&#34;&gt;Homebrew&lt;/a&gt; (on macOS or &lt;a href=&#34;https://docs.brew.sh/Homebrew-on-Linux&#34;&gt;Linux&lt;/a&gt;) for installing dependencies.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Homebrew/homebrew-cask&#34;&gt;Homebrew Cask&lt;/a&gt; is optional and used for installing Mac applications.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mas-cli/mas&#34;&gt;mas-cli&lt;/a&gt; is optional and used for installing Mac App Store applications.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/whalebrew/whalebrew&#34;&gt;Whalebrew&lt;/a&gt; is optional and used for installing Whalebrew images.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;brew bundle&lt;/code&gt; is automatically installed when first run.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://docs.brew.sh/Manpage#bundle-subcommand&#34;&gt;the &lt;code&gt;brew bundle&lt;/code&gt; section of the &lt;code&gt;brew generate-man-completions&lt;/code&gt; output&lt;/a&gt; or &lt;code&gt;brew bundle --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;An example &lt;code&gt;Brewfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# &#39;brew tap&#39;&#xA;tap &#34;homebrew/cask&#34;&#xA;# &#39;brew tap&#39; with custom Git URL&#xA;tap &#34;user/tap-repo&#34;, &#34;https://user@bitbucket.org/user/homebrew-tap-repo.git&#34;&#xA;# &#39;brew tap&#39; with arguments&#xA;tap &#34;user/tap-repo&#34;, &#34;https://user@bitbucket.org/user/homebrew-tap-repo.git&#34;, force_auto_update: true&#xA;&#xA;# set arguments for all &#39;brew install --cask&#39; commands&#xA;cask_args appdir: &#34;~/Applications&#34;, require_sha: true&#xA;&#xA;# &#39;brew install&#39;&#xA;brew &#34;imagemagick&#34;&#xA;# &#39;brew install --with-rmtp&#39;, &#39;brew services restart&#39; on version changes&#xA;brew &#34;denji/nginx/nginx-full&#34;, args: [&#34;with-rmtp&#34;], restart_service: :changed&#xA;# &#39;brew install&#39;, always &#39;brew services restart&#39;, &#39;brew link&#39;, &#39;brew unlink mysql&#39; (if it is installed)&#xA;brew &#34;mysql@5.6&#34;, restart_service: true, link: true, conflicts_with: [&#34;mysql&#34;]&#xA;# install only on specified OS&#xA;brew &#34;gnupg&#34; if OS.mac?&#xA;brew &#34;glibc&#34; if OS.linux?&#xA;&#xA;# &#39;brew install --cask&#39;&#xA;cask &#34;google-chrome&#34;&#xA;# &#39;brew install --cask --appdir=~/my-apps/Applications&#39;&#xA;cask &#34;firefox&#34;, args: { appdir: &#34;~/my-apps/Applications&#34; }&#xA;# always upgrade auto-updated or unversioned cask to latest version even if already installed&#xA;cask &#34;opera&#34;, greedy: true&#xA;# &#39;brew install --cask&#39; only if &#39;/usr/libexec/java_home --failfast&#39; fails&#xA;cask &#34;java&#34; unless system &#34;/usr/libexec/java_home --failfast&#34;&#xA;&#xA;# &#39;mas install&#39;&#xA;mas &#34;1Password&#34;, id: 443987910&#xA;&#xA;# &#39;whalebrew install&#39;&#xA;whalebrew &#34;whalebrew/wget&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Note&lt;/h2&gt; &#xA;&lt;p&gt;Homebrew does not support installing specific versions of a library, only the most recent one, so there is no good mechanism for storing installed versions in a &lt;code&gt;.lock&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;If your software needs specific versions then perhaps you&#39;ll want to look at using &lt;a href=&#34;https://vagrantup.com/&#34;&gt;Vagrant&lt;/a&gt; to better match your development and production environments.&lt;/p&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;p&gt;Tests can be run with &lt;code&gt;bundle install &amp;amp;&amp;amp; bundle exec rspec&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) Homebrew maintainers and Andrew Nesbitt. See &lt;a href=&#34;https://github.com/Homebrew/homebrew-bundle/raw/HEAD/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rspec/rspec-core</title>
    <updated>2022-12-18T01:49:42Z</updated>
    <id>tag:github.com,2022-12-18:/rspec/rspec-core</id>
    <link href="https://github.com/rspec/rspec-core" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RSpec runner and formatters&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rspec-core &lt;a href=&#34;https://github.com/rspec/rspec-core/actions&#34;&gt;&lt;img src=&#34;https://github.com/rspec/rspec-core/workflows/RSpec%20CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/rspec/rspec-core&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/rspec/rspec-core.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;rspec-core provides the structure for writing executable examples of how your code should behave, and an &lt;code&gt;rspec&lt;/code&gt; command with tools to constrain which examples get run and tailor the output.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem install rspec      # for rspec-core, rspec-expectations, rspec-mocks&#xA;gem install rspec-core # for rspec-core only&#xA;rspec --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Want to run against the &lt;code&gt;main&lt;/code&gt; branch? You&#39;ll need to include the dependent RSpec repos as well. Add the following to your &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;%w[rspec rspec-core rspec-expectations rspec-mocks rspec-support].each do |lib|&#xA;  gem lib, :git =&amp;gt; &#34;https://github.com/rspec/#{lib}.git&#34;, :branch =&amp;gt; &#39;main&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Basic Structure&lt;/h2&gt; &#xA;&lt;p&gt;RSpec uses the words &#34;describe&#34; and &#34;it&#34; so we can express concepts like a conversation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;Describe an order.&#34;&#xA;&#34;It sums the prices of its line items.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.describe Order do&#xA;  it &#34;sums the prices of its line items&#34; do&#xA;    order = Order.new&#xA;&#xA;    order.add_entry(LineItem.new(:item =&amp;gt; Item.new(&#xA;      :price =&amp;gt; Money.new(1.11, :USD)&#xA;    )))&#xA;    order.add_entry(LineItem.new(:item =&amp;gt; Item.new(&#xA;      :price =&amp;gt; Money.new(2.22, :USD),&#xA;      :quantity =&amp;gt; 2&#xA;    )))&#xA;&#xA;    expect(order.total).to eq(Money.new(5.55, :USD))&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;describe&lt;/code&gt; method creates an &lt;a href=&#34;http://rubydoc.info/gems/rspec-core/RSpec/Core/ExampleGroup&#34;&gt;ExampleGroup&lt;/a&gt;. Within the block passed to &lt;code&gt;describe&lt;/code&gt; you can declare examples using the &lt;code&gt;it&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;Under the hood, an example group is a class in which the block passed to &lt;code&gt;describe&lt;/code&gt; is evaluated. The blocks passed to &lt;code&gt;it&lt;/code&gt; are evaluated in the context of an &lt;em&gt;instance&lt;/em&gt; of that class.&lt;/p&gt; &#xA;&lt;h2&gt;Nested Groups&lt;/h2&gt; &#xA;&lt;p&gt;You can also declare nested groups using the &lt;code&gt;describe&lt;/code&gt; or &lt;code&gt;context&lt;/code&gt; methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.describe Order do&#xA;  context &#34;with no items&#34; do&#xA;    it &#34;behaves one way&#34; do&#xA;      # ...&#xA;    end&#xA;  end&#xA;&#xA;  context &#34;with one item&#34; do&#xA;    it &#34;behaves another way&#34; do&#xA;      # ...&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Nested groups are subclasses of the outer example group class, providing the inheritance semantics you&#39;d want for free.&lt;/p&gt; &#xA;&lt;h2&gt;Aliases&lt;/h2&gt; &#xA;&lt;p&gt;You can declare example groups using either &lt;code&gt;describe&lt;/code&gt; or &lt;code&gt;context&lt;/code&gt;. For a top level example group, &lt;code&gt;describe&lt;/code&gt; and &lt;code&gt;context&lt;/code&gt; are available off of &lt;code&gt;RSpec&lt;/code&gt;. For backwards compatibility, they are also available off of the &lt;code&gt;main&lt;/code&gt; object and &lt;code&gt;Module&lt;/code&gt; unless you disable monkey patching.&lt;/p&gt; &#xA;&lt;p&gt;You can declare examples within a group using any of &lt;code&gt;it&lt;/code&gt;, &lt;code&gt;specify&lt;/code&gt;, or &lt;code&gt;example&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Shared Examples and Contexts&lt;/h2&gt; &#xA;&lt;p&gt;Declare a shared example group using &lt;code&gt;shared_examples&lt;/code&gt;, and then include it in any group using &lt;code&gt;include_examples&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.shared_examples &#34;collections&#34; do |collection_class|&#xA;  it &#34;is empty when first created&#34; do&#xA;    expect(collection_class.new).to be_empty&#xA;  end&#xA;end&#xA;&#xA;RSpec.describe Array do&#xA;  include_examples &#34;collections&#34;, Array&#xA;end&#xA;&#xA;RSpec.describe Hash do&#xA;  include_examples &#34;collections&#34;, Hash&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Nearly anything that can be declared within an example group can be declared within a shared example group. This includes &lt;code&gt;before&lt;/code&gt;, &lt;code&gt;after&lt;/code&gt;, and &lt;code&gt;around&lt;/code&gt; hooks, &lt;code&gt;let&lt;/code&gt; declarations, and nested groups/contexts.&lt;/p&gt; &#xA;&lt;p&gt;You can also use the names &lt;code&gt;shared_context&lt;/code&gt; and &lt;code&gt;include_context&lt;/code&gt;. These are pretty much the same as &lt;code&gt;shared_examples&lt;/code&gt; and &lt;code&gt;include_examples&lt;/code&gt;, providing more accurate naming when you share hooks, &lt;code&gt;let&lt;/code&gt; declarations, helper methods, etc, but no examples.&lt;/p&gt; &#xA;&lt;h2&gt;Metadata&lt;/h2&gt; &#xA;&lt;p&gt;rspec-core stores a metadata hash with every example and group, which contains their descriptions, the locations at which they were declared, etc, etc. This hash powers many of rspec-core&#39;s features, including output formatters (which access descriptions and locations), and filtering before and after hooks.&lt;/p&gt; &#xA;&lt;p&gt;Although you probably won&#39;t ever need this unless you are writing an extension, you can access it from an example like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;it &#34;does something&#34; do |example|&#xA;  expect(example.metadata[:description]).to eq(&#34;does something&#34;)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;described_class&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;When a class is passed to &lt;code&gt;describe&lt;/code&gt;, you can access it from an example using the &lt;code&gt;described_class&lt;/code&gt; method, which is a wrapper for &lt;code&gt;example.metadata[:described_class]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.describe Widget do&#xA;  example do&#xA;    expect(described_class).to equal(Widget)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is useful in extensions or shared example groups in which the specific class is unknown. Taking the collections shared example group from above, we can clean it up a bit using &lt;code&gt;described_class&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.shared_examples &#34;collections&#34; do&#xA;  it &#34;is empty when first created&#34; do&#xA;    expect(described_class.new).to be_empty&#xA;  end&#xA;end&#xA;&#xA;RSpec.describe Array do&#xA;  include_examples &#34;collections&#34;&#xA;end&#xA;&#xA;RSpec.describe Hash do&#xA;  include_examples &#34;collections&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;A Word on Scope&lt;/h2&gt; &#xA;&lt;p&gt;RSpec has two scopes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Example Group&lt;/strong&gt;: Example groups are defined by a &lt;code&gt;describe&lt;/code&gt; or &lt;code&gt;context&lt;/code&gt; block, which is eagerly evaluated when the spec file is loaded. The block is evaluated in the context of a subclass of &lt;code&gt;RSpec::Core::ExampleGroup&lt;/code&gt;, or a subclass of the parent example group when you&#39;re nesting them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Example&lt;/strong&gt;: Examples -- typically defined by an &lt;code&gt;it&lt;/code&gt; block -- and any other blocks with per-example semantics -- such as a &lt;code&gt;before(:example)&lt;/code&gt; hook -- are evaluated in the context of an &lt;em&gt;instance&lt;/em&gt; of the example group class to which the example belongs. Examples are &lt;em&gt;not&lt;/em&gt; executed when the spec file is loaded; instead, RSpec waits to run any examples until all spec files have been loaded, at which point it can apply filtering, randomization, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To make this more concrete, consider this code snippet:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.describe &#34;Using an array as a stack&#34; do&#xA;  def build_stack&#xA;    []&#xA;  end&#xA;&#xA;  before(:example) do&#xA;    @stack = build_stack&#xA;  end&#xA;&#xA;  it &#39;is initially empty&#39; do&#xA;    expect(@stack).to be_empty&#xA;  end&#xA;&#xA;  context &#34;after an item has been pushed&#34; do&#xA;    before(:example) do&#xA;      @stack.push :item&#xA;    end&#xA;&#xA;    it &#39;allows the pushed item to be popped&#39; do&#xA;      expect(@stack.pop).to eq(:item)&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Under the covers, this is (roughly) equivalent to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class UsingAnArrayAsAStack &amp;lt; RSpec::Core::ExampleGroup&#xA;  def build_stack&#xA;    []&#xA;  end&#xA;&#xA;  def before_example_1&#xA;    @stack = build_stack&#xA;  end&#xA;&#xA;  def it_is_initially_empty&#xA;    expect(@stack).to be_empty&#xA;  end&#xA;&#xA;  class AfterAnItemHasBeenPushed &amp;lt; self&#xA;    def before_example_2&#xA;      @stack.push :item&#xA;    end&#xA;&#xA;    def it_allows_the_pushed_item_to_be_popped&#xA;      expect(@stack.pop).to eq(:item)&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run these examples, RSpec would (roughly) do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;example_1 = UsingAnArrayAsAStack.new&#xA;example_1.before_example_1&#xA;example_1.it_is_initially_empty&#xA;&#xA;example_2 = UsingAnArrayAsAStack::AfterAnItemHasBeenPushed.new&#xA;example_2.before_example_1&#xA;example_2.before_example_2&#xA;example_2.it_allows_the_pushed_item_to_be_popped&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;The &lt;code&gt;rspec&lt;/code&gt; Command&lt;/h2&gt; &#xA;&lt;p&gt;When you install the rspec-core gem, it installs the &lt;code&gt;rspec&lt;/code&gt; executable, which you&#39;ll use to run rspec. The &lt;code&gt;rspec&lt;/code&gt; command comes with many useful options. Run &lt;code&gt;rspec --help&lt;/code&gt; to see the complete list.&lt;/p&gt; &#xA;&lt;h2&gt;Store Command Line Options &lt;code&gt;.rspec&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;You can store command line options in a &lt;code&gt;.rspec&lt;/code&gt; file in the project&#39;s root directory, and the &lt;code&gt;rspec&lt;/code&gt; command will read them as though you typed them on the command line.&lt;/p&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;p&gt;Start with a simple example of behavior you expect from your system. Do this before you write any implementation code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# in spec/calculator_spec.rb&#xA;RSpec.describe Calculator do&#xA;  describe &#39;#add&#39; do&#xA;    it &#39;returns the sum of its arguments&#39; do&#xA;      expect(Calculator.new.add(1, 2)).to eq(3)&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run this with the rspec command, and watch it fail:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rspec spec/calculator_spec.rb&#xA;./spec/calculator_spec.rb:1: uninitialized constant Calculator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Address the failure by defining a skeleton of the &lt;code&gt;Calculator&lt;/code&gt; class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# in lib/calculator.rb&#xA;class Calculator&#xA;  def add(a, b)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Be sure to require the implementation file in the spec:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# in spec/calculator_spec.rb&#xA;# - RSpec adds ./lib to the $LOAD_PATH&#xA;require &#34;calculator&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now run the spec again, and watch the expectation fail:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rspec spec/calculator_spec.rb&#xA;F&#xA;&#xA;Failures:&#xA;&#xA;  1) Calculator#add returns the sum of its arguments&#xA;     Failure/Error: expect(Calculator.new.add(1, 2)).to eq(3)&#xA;&#xA;       expected: 3&#xA;            got: nil&#xA;&#xA;       (compared using ==)&#xA;     # ./spec/calcalator_spec.rb:6:in `block (3 levels) in &amp;lt;top (required)&amp;gt;&#39;&#xA;&#xA;Finished in 0.00131 seconds (files took 0.10968 seconds to load)&#xA;1 example, 1 failure&#xA;&#xA;Failed examples:&#xA;&#xA;rspec ./spec/calcalator_spec.rb:5 # Calculator#add returns the sum of its arguments&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Implement the simplest solution, by changing the definition of &lt;code&gt;Calculator#add&lt;/code&gt; to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def add(a, b)&#xA;  a + b&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now run the spec again, and watch it pass:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rspec spec/calculator_spec.rb&#xA;.&#xA;&#xA;Finished in 0.000315 seconds&#xA;1 example, 0 failures&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;documentation&lt;/code&gt; formatter to see the resulting spec:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rspec spec/calculator_spec.rb --format doc&#xA;Calculator&#xA;  #add&#xA;    returns the sum of its arguments&#xA;&#xA;Finished in 0.000379 seconds&#xA;1 example, 0 failures&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Once you&#39;ve set up the environment, you&#39;ll need to cd into the working directory of whichever repo you want to work in. From there you can run the specs and cucumber features, and make patches.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: You do not need to use rspec-dev to work on a specific RSpec repo. You can treat each RSpec repo as an independent project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rspec/rspec-core/main/BUILD_DETAIL.md&#34;&gt;Build details&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rspec/rspec-core/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rspec/rspec-core/main/CONTRIBUTING.md&#34;&gt;Detailed contributing guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rspec/rspec-core/main/DEVELOPMENT.md&#34;&gt;Development setup guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Also see&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rspec/rspec&#34;&gt;https://github.com/rspec/rspec&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rspec/rspec-expectations&#34;&gt;https://github.com/rspec/rspec-expectations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rspec/rspec-mocks&#34;&gt;https://github.com/rspec/rspec-mocks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rspec/rspec-rails&#34;&gt;https://github.com/rspec/rspec-rails&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>