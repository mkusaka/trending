<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-26T01:50:05Z</updated>
  <subtitle>Weekly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ctran/annotate_models</title>
    <updated>2025-01-26T01:50:05Z</updated>
    <id>tag:github.com,2025-01-26:/ctran/annotate_models</id>
    <link href="https://github.com/ctran/annotate_models" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Annotate Rails classes with schema and routes info&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Annotate (aka AnnotateModels)&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://badge.fury.io/rb/annotate&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/annotate.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rubygems.org/gems/annotate&#34;&gt;&lt;img src=&#34;https://img.shields.io/gem/dt/annotate.svg?style=flat&#34; alt=&#34;Downloads count&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ctran/annotate_models/actions?workflow=CI&#34;&gt;&lt;img src=&#34;https://github.com/ctran/annotate_models/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/ctran/annotate_models?branch=develop&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/ctran/annotate_models/badge.svg?branch=develop&#34; alt=&#34;Coveralls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/ctran/annotate_models&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/ctran/annotate_models/badges/gpa.svg?sanitize=true&#34; alt=&#34;Maintenability&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add a comment summarizing the current schema to the top or bottom of each of your...&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ActiveRecord models&lt;/li&gt; &#xA; &lt;li&gt;Fixture files&lt;/li&gt; &#xA; &lt;li&gt;Tests and Specs&lt;/li&gt; &#xA; &lt;li&gt;Object Daddy exemplars&lt;/li&gt; &#xA; &lt;li&gt;Machinist blueprints&lt;/li&gt; &#xA; &lt;li&gt;Fabrication fabricators&lt;/li&gt; &#xA; &lt;li&gt;Thoughtbot&#39;s factory_bot factories, i.e. the &lt;code&gt;(spec|test)/factories/&amp;lt;model&amp;gt;_factory.rb&lt;/code&gt; files&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;routes.rb&lt;/code&gt; file (for Rails projects)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The schema comment looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# == Schema Info&#xA;#&#xA;# Table name: line_items&#xA;#&#xA;#  id                  :integer(11)    not null, primary key&#xA;#  quantity            :integer(11)    not null&#xA;#  product_id          :integer(11)    not null&#xA;#  unit_price          :float&#xA;#  order_id            :integer(11)&#xA;#&#xA;&#xA;class LineItem &amp;lt; ActiveRecord::Base&#xA;  belongs_to :product&#xA;  . . .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It also annotates geometrical columns, &lt;code&gt;geom&lt;/code&gt; type and &lt;code&gt;srid&lt;/code&gt;, when using &lt;code&gt;SpatialAdapter&lt;/code&gt;, &lt;code&gt;PostgisAdapter&lt;/code&gt; or &lt;code&gt;PostGISAdapter&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# == Schema Info&#xA;#&#xA;# Table name: trips&#xA;#&#xA;#  local           :geometry        point, 4326&#xA;#  path            :geometry        line_string, 4326&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, if you pass the &lt;code&gt;-r&lt;/code&gt; option, it&#39;ll annotate &lt;code&gt;routes.rb&lt;/code&gt; with the output of &lt;code&gt;rake routes&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Upgrading to 3.X and annotate models not working?&lt;/h2&gt; &#xA;&lt;p&gt;In versions 2.7.X the annotate gem defaulted to annotating models if no arguments were passed in. The annotate gem by default would not allow for routes and models to be annotated together. A &lt;a href=&#34;https://github.com/ctran/annotate_models/pull/647&#34;&gt;change was added in #647&lt;/a&gt;. You &lt;a href=&#34;https://github.com/ctran/annotate_models/issues/663&#34;&gt;can read more here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are a few ways of fixing this:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If using CLI explicitly pass in models flag using &lt;code&gt;--models&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;OR&lt;/p&gt; &#xA;&lt;p&gt;a) Running &lt;code&gt;rails g annotate:install&lt;/code&gt; will overwrite your defaults with the annotating &lt;code&gt;models&lt;/code&gt; option set to &lt;code&gt;&#39;true&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;b) In &lt;code&gt;lib/tasks/auto_annotate_models.rake&lt;/code&gt; add the &lt;code&gt;models&lt;/code&gt; key-value option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    Annotate.set_defaults(&#xA;      ...&#xA;      &#39;models&#39;                      =&amp;gt; &#39;true&#39;,&#xA;      ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Into Gemfile from rubygems.org:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;group :development do&#xA;  gem &#39;annotate&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Into Gemfile from Github:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;group :development do&#xA;  gem &#39;annotate&#39;, git: &#39;https://github.com/ctran/annotate_models.git&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Into environment gems from rubygems.org:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem install annotate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Into environment gems from Github checkout:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/ctran/annotate_models.git annotate_models&#xA;cd annotate_models&#xA;rake gem&#xA;gem install dist/annotate-*.gem&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;(If you used the Gemfile install, prefix the below commands with &lt;code&gt;bundle exec&lt;/code&gt;.)&lt;/p&gt; &#xA;&lt;h3&gt;Usage in Rails&lt;/h3&gt; &#xA;&lt;p&gt;To annotate all your models, tests, fixtures, and factories:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd /path/to/app&#xA;annotate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To annotate just your models, tests, and factories:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;annotate --models --exclude fixtures&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To annotate just your models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;annotate --models&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To annotate routes.rb:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;annotate --routes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To remove model/test/fixture/factory/serializer annotations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;annotate --delete&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To remove routes.rb annotations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;annotate --routes --delete&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To automatically annotate every time you run &lt;code&gt;db:migrate&lt;/code&gt;, either run &lt;code&gt;rails g annotate:install&lt;/code&gt; or add &lt;code&gt;Annotate.load_tasks&lt;/code&gt; to your &lt;code&gt;Rakefile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/ctran/annotate_models/develop/#configuration-in-rails&#34;&gt;configuration in Rails&lt;/a&gt; section for more info.&lt;/p&gt; &#xA;&lt;h3&gt;Usage Outside of Rails&lt;/h3&gt; &#xA;&lt;p&gt;Everything above applies, except that &lt;code&gt;--routes&lt;/code&gt; is not meaningful, and you will probably need to explicitly set one or more &lt;code&gt;--require&lt;/code&gt; option(s), and/or one or more &lt;code&gt;--model-dir&lt;/code&gt; options to inform &lt;code&gt;annotate&lt;/code&gt; about the structure of your project and help it bootstrap and load the relevant code.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;If you want to always skip annotations on a particular model, add this string anywhere in the file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# -*- SkipSchemaAnnotations&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration in Rails&lt;/h3&gt; &#xA;&lt;p&gt;To generate a configuration file (in the form of a &lt;code&gt;.rake&lt;/code&gt; file), to set default options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rails g annotate:install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Edit this file to control things like output format, where annotations are added (top or bottom of file), and in which artifacts.&lt;/p&gt; &#xA;&lt;p&gt;The generated rakefile &lt;code&gt;lib/tasks/auto_annotate_models.rake&lt;/code&gt; also contains &lt;code&gt;Annotate.load_tasks&lt;/code&gt;. This adds a few rake tasks which duplicate command-line functionality:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rake annotate_models                          # Add schema information (as comments) to model and fixture files&#xA;rake annotate_routes                          # Adds the route map to routes.rb&#xA;rake remove_annotation                        # Remove schema information from model and fixture files&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, once you&#39;ve generated a configuration file, annotate will be executed whenever you run &lt;code&gt;rake db:migrate&lt;/code&gt; (but only in development mode). If you want to disable this behavior permanently, edit the &lt;code&gt;.rake&lt;/code&gt; file and change:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    &#39;skip_on_db_migrate&#39;   =&amp;gt; &#39;false&#39;,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    &#39;skip_on_db_migrate&#39;   =&amp;gt; &#39;true&#39;,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to run &lt;code&gt;rake db:migrate&lt;/code&gt; as a one-off without running annotate, you can do so with a simple environment variable, instead of editing the &lt;code&gt;.rake&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ANNOTATE_SKIP_ON_DB_MIGRATE=1 rake db:migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: annotate [options] [model_file]*&#xA;        --additional-file-patterns   Additional file paths or globs to annotate, separated by commas (e.g. `/foo/bar/%model_name%/*.rb,/baz/%model_name%.rb`)&#xA;    -d, --delete                     Remove annotations from all model files or the routes.rb file&#xA;    -p [before|top|after|bottom],    Place the annotations at the top (before) or the bottom (after) of the model/test/fixture/factory/route/serializer file(s)&#xA;        --position&#xA;        --pc, --position-in-class [before|top|after|bottom]&#xA;                                     Place the annotations at the top (before) or the bottom (after) of the model file&#xA;        --pf, --position-in-factory [before|top|after|bottom]&#xA;                                     Place the annotations at the top (before) or the bottom (after) of any factory files&#xA;        --px, --position-in-fixture [before|top|after|bottom]&#xA;                                     Place the annotations at the top (before) or the bottom (after) of any fixture files&#xA;        --pt, --position-in-test [before|top|after|bottom]&#xA;                                     Place the annotations at the top (before) or the bottom (after) of any test files&#xA;        --pr, --position-in-routes [before|top|after|bottom]&#xA;                                     Place the annotations at the top (before) or the bottom (after) of the routes.rb file&#xA;        --ps, --position-in-serializer [before|top|after|bottom]&#xA;                                     Place the annotations at the top (before) or the bottom (after) of the serializer files&#xA;        --w, --wrapper STR           Wrap annotation with the text passed as parameter.&#xA;                                     If --w option is used, the same text will be used as opening and closing&#xA;        --wo, --wrapper-open STR     Annotation wrapper opening.&#xA;        --wc, --wrapper-close STR    Annotation wrapper closing&#xA;    -r, --routes                     Annotate routes.rb with the output of &#39;rake routes&#39;&#xA;        --models                     Annotate ActiveRecord models&#xA;    -a, --active-admin               Annotate active_admin models&#xA;    -v, --version                    Show the current version of this gem&#xA;    -m, --show-migration             Include the migration version number in the annotation&#xA;    -c, --show-check-constraints     List the table&#39;s check constraints in the annotation&#xA;    -k, --show-foreign-keys          List the table&#39;s foreign key constraints in the annotation&#xA;        --ck, --complete-foreign-keys&#xA;                                     Complete foreign key names in the annotation&#xA;    -i, --show-indexes               List the table&#39;s database indexes in the annotation&#xA;    -s, --simple-indexes             Concat the column&#39;s related indexes in the annotation&#xA;        --model-dir dir              Annotate model files stored in dir rather than app/models, separate multiple dirs with commas&#xA;        --root-dir dir               Annotate files stored within root dir projects, separate multiple dirs with commas&#xA;        --ignore-model-subdirects    Ignore subdirectories of the models directory&#xA;        --sort                       Sort columns alphabetically, rather than in creation order&#xA;        --classified-sort            Sort columns alphabetically, but first goes id, then the rest columns, then the timestamp columns and then the association columns&#xA;    -R, --require path               Additional file to require before loading models, may be used multiple times&#xA;    -e [tests,fixtures,factories,serializers],&#xA;        --exclude                    Do not annotate fixtures, test files, factories, and/or serializers&#xA;    -f [bare|rdoc|yard|markdown],    Render Schema Infomation as plain/RDoc/YARD/Markdown&#xA;        --format&#xA;        --force                      Force new annotations even if there are no changes.&#xA;        --frozen                     Do not allow to change annotations. Exits non-zero if there are going to be changes to files.&#xA;        --timestamp                  Include timestamp in (routes) annotation&#xA;        --trace                      If unable to annotate a file, print the full stack trace, not just the exception message.&#xA;    -I, --ignore-columns REGEX       don&#39;t annotate columns that match a given REGEX (e.g. `annotate -I &#39;^(id|updated_at|created_at)&#39;`)&#xA;        --ignore-routes REGEX        don&#39;t annotate routes that match a given REGEX (e.g. `annotate -I &#39;(mobile|resque|pghero)&#39;`)_&#xA;        --hide-limit-column-types VALUES&#xA;                                     don&#39;t show limit for given column types, separated by commas (e.g. `integer,boolean,text`)&#xA;        --hide-default-column-types VALUES&#xA;                                     don&#39;t show default for given column types, separated by commas (e.g. `json,jsonb,hstore`)&#xA;        --ignore-unknown-models      don&#39;t display warnings for bad model files&#xA;        --with-comment               include database comments in model annotations&#xA;        --with-comment-column        include database comments in model annotations, as its own column, after all others&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Option: &lt;code&gt;additional_file_patterns&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;CLI: &lt;code&gt;--additional-file-patterns&lt;/code&gt;&lt;br&gt; Ruby: &lt;code&gt;:additional_file_patterns&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Provide additional paths for the gem to annotate. These paths can include globs. It is recommended to use absolute paths. Here are some examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/app/lib/decorates/%MODEL_NAME%/*.rb&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/app/lib/forms/%PLURALIZED_MODEL_NAME%/**/*.rb&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/app/lib/forms/%TABLE_NAME%/*.rb&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The appropriate model will be inferred using the &lt;code&gt;%*%&lt;/code&gt; syntax, annotating any matching files. It works with existing filename resolutions (options for which can be found in the &lt;code&gt;resolve_filename&lt;/code&gt; method of &lt;code&gt;annotate_models.rb&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;When using in a Rails config, you can use the following:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;File.join(Rails.application.root, &#39;app/lib/forms/%PLURALIZED_MODEL_NAME%/***/**.rb&#39;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sorting&lt;/h2&gt; &#xA;&lt;p&gt;By default, columns will be sorted in database order (i.e. the order in which migrations were run).&lt;/p&gt; &#xA;&lt;p&gt;If you prefer to sort alphabetically so that the results of annotation are consistent regardless of what order migrations are executed in, use &lt;code&gt;--sort&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Markdown&lt;/h2&gt; &#xA;&lt;p&gt;The format produced is actually MultiMarkdown, making use of the syntax extension for tables. It&#39;s recommended you use &lt;code&gt;kramdown&lt;/code&gt; as your parser if you want to use this format. If you&#39;re using &lt;code&gt;yard&lt;/code&gt; to generate documentation, specify a format of markdown with &lt;code&gt;kramdown&lt;/code&gt; as the provider by adding this to your &lt;code&gt;.yardopts&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--markup markdown&#xA;--markup-provider kramdown&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Be sure to add this to your &lt;code&gt;Gemfile&lt;/code&gt; as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem &#39;kramdown&#39;, groups =&amp;gt; [:development], require =&amp;gt; false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;WARNING&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Don&#39;t add text after an automatically-created comment block.&lt;/strong&gt; This tool will blow away the initial/final comment block in your models if it looks like it was previously added by this gem.&lt;/p&gt; &#xA;&lt;p&gt;Be sure to check the changes that this tool makes! If you are using Git, you may simply check your project&#39;s status after running &lt;code&gt;annotate&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git status&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are not using a VCS (like Git, Subversion or similar), please tread extra carefully, and consider using one.&lt;/p&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Factory Bot: &lt;a href=&#34;http://github.com/thoughtbot/factory_bot&#34;&gt;http://github.com/thoughtbot/factory_bot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Object Daddy: &lt;a href=&#34;http://github.com/flogic/object_daddy&#34;&gt;http://github.com/flogic/object_daddy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Machinist: &lt;a href=&#34;http://github.com/notahat/machinist&#34;&gt;http://github.com/notahat/machinist&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fabrication: &lt;a href=&#34;http://github.com/paulelliott/fabrication&#34;&gt;http://github.com/paulelliott/fabrication&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;SpatialAdapter: &lt;a href=&#34;http://github.com/pdeffendol/spatial_adapter&#34;&gt;http://github.com/pdeffendol/spatial_adapter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PostgisAdapter: &lt;a href=&#34;http://github.com/nofxx/postgis_adapter&#34;&gt;http://github.com/nofxx/postgis_adapter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PostGISAdapter: &lt;a href=&#34;https://github.com/dazuma/activerecord-postgis-adapter&#34;&gt;https://github.com/dazuma/activerecord-postgis-adapter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Released under the same license as Ruby. No Support. No Warranty.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ctran/annotate_models/develop/AUTHORS.md&#34;&gt;See AUTHORS.md&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>redis/redis-rb</title>
    <updated>2025-01-26T01:50:05Z</updated>
    <id>tag:github.com,2025-01-26:/redis/redis-rb</id>
    <link href="https://github.com/redis/redis-rb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Ruby client library for Redis&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;redis-rb &lt;a href=&#34;https://github.com/redis/redis-rb/actions&#34;&gt;&lt;img src=&#34;https://github.com/redis/redis-rb/workflows/Test/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rubydoc.info/github/redis/redis-rb&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-rdoc.info-blue.svg?sanitize=true&#34; alt=&#34;Inline docs&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;A Ruby client that tries to match &lt;a href=&#34;https://redis.io&#34;&gt;Redis&lt;/a&gt;&#39; API one-to-one, while still providing an idiomatic interface.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://rubydoc.info/gems/redis&#34;&gt;RubyDoc.info&lt;/a&gt; for the API docs of the latest published gem.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Install with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem install redis&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can connect to Redis by instantiating the &lt;code&gt;Redis&lt;/code&gt; class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;redis&#34;&#xA;&#xA;redis = Redis.new&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This assumes Redis was started with a default configuration, and is listening on &lt;code&gt;localhost&lt;/code&gt;, port 6379. If you need to connect to a remote server or a different port, try:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;redis = Redis.new(host: &#34;10.0.1.1&#34;, port: 6380, db: 15)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also specify connection options as a &lt;a href=&#34;https://www.iana.org/assignments/uri-schemes/prov/redis&#34;&gt;&lt;code&gt;redis://&lt;/code&gt; URL&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;redis = Redis.new(url: &#34;redis://:p4ssw0rd@10.0.1.1:6380/15&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The client expects passwords with special characters to be URL-encoded (i.e. &lt;code&gt;CGI.escape(password)&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To connect to Redis listening on a Unix socket, try:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;redis = Redis.new(path: &#34;/tmp/redis.sock&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To connect to a password protected Redis instance, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;redis = Redis.new(password: &#34;mysecret&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To connect a Redis instance using &lt;a href=&#34;https://redis.io/topics/acl&#34;&gt;ACL&lt;/a&gt;, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;redis = Redis.new(username: &#39;myname&#39;, password: &#39;mysecret&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Redis class exports methods that are named identical to the commands they execute. The arguments these methods accept are often identical to the arguments specified on the &lt;a href=&#34;https://redis.io/commands&#34;&gt;Redis website&lt;/a&gt;. For instance, the &lt;code&gt;SET&lt;/code&gt; and &lt;code&gt;GET&lt;/code&gt; commands can be called like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;redis.set(&#34;mykey&#34;, &#34;hello world&#34;)&#xA;# =&amp;gt; &#34;OK&#34;&#xA;&#xA;redis.get(&#34;mykey&#34;)&#xA;# =&amp;gt; &#34;hello world&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All commands, their arguments, and return values are documented and available on &lt;a href=&#34;https://rubydoc.info/gems/redis&#34;&gt;RubyDoc.info&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Connection Pooling and Thread safety&lt;/h2&gt; &#xA;&lt;p&gt;The client does not provide connection pooling. Each &lt;code&gt;Redis&lt;/code&gt; instance has one and only one connection to the server, and use of this connection is protected by a mutex.&lt;/p&gt; &#xA;&lt;p&gt;As such it is heavily recommended to use the &lt;a href=&#34;https://github.com/mperham/connection_pool&#34;&gt;&lt;code&gt;connection_pool&lt;/code&gt; gem&lt;/a&gt;, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module MyApp&#xA;  def self.redis&#xA;    @redis ||= ConnectionPool::Wrapper.new do&#xA;      Redis.new(url: ENV[&#34;REDIS_URL&#34;])&#xA;    end&#xA;  end&#xA;end&#xA;&#xA;MyApp.redis.incr(&#34;some-counter&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sentinel support&lt;/h2&gt; &#xA;&lt;p&gt;The client is able to perform automatic failover by using &lt;a href=&#34;http://redis.io/topics/sentinel&#34;&gt;Redis Sentinel&lt;/a&gt;. Make sure to run Redis 2.8+ if you want to use this feature.&lt;/p&gt; &#xA;&lt;p&gt;To connect using Sentinel, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;SENTINELS = [{ host: &#34;127.0.0.1&#34;, port: 26380 },&#xA;             { host: &#34;127.0.0.1&#34;, port: 26381 }]&#xA;&#xA;redis = Redis.new(name: &#34;mymaster&#34;, sentinels: SENTINELS, role: :master)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The master name identifies a group of Redis instances composed of a master and one or more slaves (&lt;code&gt;mymaster&lt;/code&gt; in the example).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It is possible to optionally provide a role. The allowed roles are &lt;code&gt;master&lt;/code&gt; and &lt;code&gt;slave&lt;/code&gt;. When the role is &lt;code&gt;slave&lt;/code&gt;, the client will try to connect to a random slave of the specified master. If a role is not specified, the client will connect to the master.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When using the Sentinel support you need to specify a list of sentinels to connect to. The list does not need to enumerate all your Sentinel instances, but a few so that if one is down the client will try the next one. The client is able to remember the last Sentinel that was able to reply correctly and will use it for the next requests.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To &lt;a href=&#34;https://redis.io/docs/management/sentinel/#configuring-sentinel-instances-with-authentication&#34;&gt;authenticate&lt;/a&gt; Sentinel itself, you can specify the &lt;code&gt;sentinel_username&lt;/code&gt; and &lt;code&gt;sentinel_password&lt;/code&gt;. Exclude the &lt;code&gt;sentinel_username&lt;/code&gt; option if you&#39;re using password-only authentication.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;SENTINELS = [{ host: &#39;127.0.0.1&#39;, port: 26380},&#xA;             { host: &#39;127.0.0.1&#39;, port: 26381}]&#xA;&#xA;redis = Redis.new(name: &#39;mymaster&#39;, sentinels: SENTINELS, sentinel_username: &#39;appuser&#39;, sentinel_password: &#39;mysecret&#39;, role: :master)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you specify a username and/or password at the top level for your main Redis instance, Sentinel &lt;em&gt;will not&lt;/em&gt; using thouse credentials&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Use &#39;mysecret&#39; to authenticate against the mymaster instance, but skip authentication for the sentinels:&#xA;SENTINELS = [{ host: &#39;127.0.0.1&#39;, port: 26380 },&#xA;             { host: &#39;127.0.0.1&#39;, port: 26381 }]&#xA;&#xA;redis = Redis.new(name: &#39;mymaster&#39;, sentinels: SENTINELS, role: :master, password: &#39;mysecret&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So you have to provide Sentinel credential and Redis explicitly even they are the same&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Use &#39;mysecret&#39; to authenticate against the mymaster instance and sentinel&#xA;SENTINELS = [{ host: &#39;127.0.0.1&#39;, port: 26380 },&#xA;             { host: &#39;127.0.0.1&#39;, port: 26381 }]&#xA;&#xA;redis = Redis.new(name: &#39;mymaster&#39;, sentinels: SENTINELS, role: :master, password: &#39;mysecret&#39;, sentinel_password: &#39;mysecret&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also the &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;password&lt;/code&gt;, &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;db&lt;/code&gt; for Redis instance can be passed as an url:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;redis = Redis.new(url: &#34;redis://appuser:mysecret@mymaster/10&#34;, sentinels: SENTINELS, role: :master)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Cluster support&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://redis.io/topics/cluster-spec&#34;&gt;Clustering&lt;/a&gt;. is supported via the &lt;a href=&#34;https://raw.githubusercontent.com/redis/redis-rb/master/cluster/&#34;&gt;&lt;code&gt;redis-clustering&lt;/code&gt; gem&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Pipelining&lt;/h2&gt; &#xA;&lt;p&gt;When multiple commands are executed sequentially, but are not dependent, the calls can be &lt;em&gt;pipelined&lt;/em&gt;. This means that the client doesn&#39;t wait for reply of the first command before sending the next command. The advantage is that multiple commands are sent at once, resulting in faster overall execution.&lt;/p&gt; &#xA;&lt;p&gt;The client can be instructed to pipeline commands by using the &lt;code&gt;#pipelined&lt;/code&gt; method. After the block is executed, the client sends all commands to Redis and gathers their replies. These replies are returned by the &lt;code&gt;#pipelined&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;redis.pipelined do |pipeline|&#xA;  pipeline.set &#34;foo&#34;, &#34;bar&#34;&#xA;  pipeline.incr &#34;baz&#34;&#xA;end&#xA;# =&amp;gt; [&#34;OK&#34;, 1]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Commands must be called on the yielded objects. If you call methods on the original client objects from inside a pipeline, they will be sent immediately:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;redis.pipelined do |pipeline|&#xA;  pipeline.set &#34;foo&#34;, &#34;bar&#34;&#xA;  redis.incr &#34;baz&#34; # =&amp;gt; 1&#xA;end&#xA;# =&amp;gt; [&#34;OK&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Exception management&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;exception&lt;/code&gt; flag in the &lt;code&gt;#pipelined&lt;/code&gt; is a feature that modifies the pipeline execution behavior. When set to &lt;code&gt;false&lt;/code&gt;, it doesn&#39;t raise an exception when a command error occurs. Instead, it allows the pipeline to execute all commands, and any failed command will be available in the returned array. (Defaults to &lt;code&gt;true&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;results = redis.pipelined(exception: false) do |pipeline|&#xA;  pipeline.set(&#39;key1&#39;, &#39;value1&#39;)&#xA;  pipeline.lpush(&#39;key1&#39;, &#39;something&#39;) # This will fail&#xA;  pipeline.set(&#39;key2&#39;, &#39;value2&#39;)&#xA;end&#xA;# results =&amp;gt; [&#34;OK&#34;, #&amp;lt;RedisClient::WrongTypeError: WRONGTYPE Operation against a key holding the wrong kind of value&amp;gt;, &#34;OK&#34;]&#xA;&#xA;results.each do |result|&#xA;  if result.is_a?(Redis::CommandError)&#xA;    # Do something with the failed result&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Executing commands atomically&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;MULTI/EXEC&lt;/code&gt; to run a number of commands in an atomic fashion. This is similar to executing a pipeline, but the commands are preceded by a call to &lt;code&gt;MULTI&lt;/code&gt;, and followed by a call to &lt;code&gt;EXEC&lt;/code&gt;. Like the regular pipeline, the replies to the commands are returned by the &lt;code&gt;#multi&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;redis.multi do |transaction|&#xA;  transaction.set &#34;foo&#34;, &#34;bar&#34;&#xA;  transaction.incr &#34;baz&#34;&#xA;end&#xA;# =&amp;gt; [&#34;OK&#34;, 1]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Futures&lt;/h3&gt; &#xA;&lt;p&gt;Replies to commands in a pipeline can be accessed via the &lt;em&gt;futures&lt;/em&gt; they emit. All calls on the pipeline object return a &lt;code&gt;Future&lt;/code&gt; object, which responds to the &lt;code&gt;#value&lt;/code&gt; method. When the pipeline has successfully executed, all futures are assigned their respective replies and can be used.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set = incr = nil&#xA;redis.pipelined do |pipeline|&#xA;  set = pipeline.set &#34;foo&#34;, &#34;bar&#34;&#xA;  incr = pipeline.incr &#34;baz&#34;&#xA;end&#xA;&#xA;set.value&#xA;# =&amp;gt; &#34;OK&#34;&#xA;&#xA;incr.value&#xA;# =&amp;gt; 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Error Handling&lt;/h2&gt; &#xA;&lt;p&gt;In general, if something goes wrong you&#39;ll get an exception. For example, if it can&#39;t connect to the server a &lt;code&gt;Redis::CannotConnectError&lt;/code&gt; error will be raised.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;begin&#xA;  redis.ping&#xA;rescue Redis::BaseError =&amp;gt; e&#xA;  e.inspect&#xA;# =&amp;gt; #&amp;lt;Redis::CannotConnectError: Timed out connecting to Redis on 10.0.1.1:6380&amp;gt;&#xA;&#xA;  e.message&#xA;# =&amp;gt; Timed out connecting to Redis on 10.0.1.1:6380&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See lib/redis/errors.rb for information about what exceptions are possible.&lt;/p&gt; &#xA;&lt;h2&gt;Timeouts&lt;/h2&gt; &#xA;&lt;p&gt;The client allows you to configure connect, read, and write timeouts. Starting in version 5.0, the default for each is 1. Before that, it was 5. Passing a single &lt;code&gt;timeout&lt;/code&gt; option will set all three values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Redis.new(:timeout =&amp;gt; 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But you can use specific values for each of them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Redis.new(&#xA;  :connect_timeout =&amp;gt; 0.2,&#xA;  :read_timeout    =&amp;gt; 1.0,&#xA;  :write_timeout   =&amp;gt; 0.5&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All timeout values are specified in seconds.&lt;/p&gt; &#xA;&lt;p&gt;When using pub/sub, you can subscribe to a channel using a timeout as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;redis = Redis.new(reconnect_attempts: 0)&#xA;redis.subscribe_with_timeout(5, &#34;news&#34;) do |on|&#xA;  on.message do |channel, message|&#xA;    # ...&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If no message is received after 5 seconds, the client will unsubscribe.&lt;/p&gt; &#xA;&lt;h2&gt;Reconnections&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;By default&lt;/strong&gt;, this gem will only &lt;strong&gt;retry a connection once&lt;/strong&gt; and then fail, but the client allows you to configure how many &lt;code&gt;reconnect_attempts&lt;/code&gt; it should complete before declaring a connection as failed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Redis.new(reconnect_attempts: 0)&#xA;Redis.new(reconnect_attempts: 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you wish to wait between reconnection attempts, you can instead pass a list of durations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Redis.new(reconnect_attempts: [&#xA;  0, # retry immediately&#xA;  0.25, # retry a second time after 250ms&#xA;  1, # retry a third and final time after another 1s&#xA;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you wish to disable reconnection only for some commands, you can use &lt;code&gt;disable_reconnection&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;redis.get(&#34;some-key&#34;) # this may be retried&#xA;redis.disable_reconnection do&#xA;  redis.incr(&#34;some-counter&#34;) # this won&#39;t be retried.&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;SSL/TLS Support&lt;/h2&gt; &#xA;&lt;p&gt;To enable SSL support, pass the &lt;code&gt;:ssl =&amp;gt; true&lt;/code&gt; option when configuring the Redis client, or pass in &lt;code&gt;:url =&amp;gt; &#34;rediss://...&#34;&lt;/code&gt; (like HTTPS for Redis). You will also need to pass in an &lt;code&gt;:ssl_params =&amp;gt; { ... }&lt;/code&gt; hash used to configure the &lt;code&gt;OpenSSL::SSL::SSLContext&lt;/code&gt; object used for the connection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;redis = Redis.new(&#xA;  :url        =&amp;gt; &#34;rediss://:p4ssw0rd@10.0.1.1:6381/15&#34;,&#xA;  :ssl_params =&amp;gt; {&#xA;    :ca_file =&amp;gt; &#34;/path/to/ca.crt&#34;&#xA;  }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The options given to &lt;code&gt;:ssl_params&lt;/code&gt; are passed directly to the &lt;code&gt;OpenSSL::SSL::SSLContext#set_params&lt;/code&gt; method and can be any valid attribute of the SSL context. Please see the &lt;a href=&#34;http://ruby-doc.org/stdlib-2.5.0/libdoc/openssl/rdoc/OpenSSL/SSL/SSLContext.html&#34;&gt;OpenSSL::SSL::SSLContext documentation&lt;/a&gt; for all of the available attributes.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of passing in params that can be used for SSL client certificate authentication (a.k.a. mutual TLS):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;redis = Redis.new(&#xA;  :url        =&amp;gt; &#34;rediss://:p4ssw0rd@10.0.1.1:6381/15&#34;,&#xA;  :ssl_params =&amp;gt; {&#xA;    :ca_file =&amp;gt; &#34;/path/to/ca.crt&#34;,&#xA;    :cert    =&amp;gt; OpenSSL::X509::Certificate.new(File.read(&#34;client.crt&#34;)),&#xA;    :key     =&amp;gt; OpenSSL::PKey::RSA.new(File.read(&#34;client.key&#34;))&#xA;  }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Expert-Mode Options&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;inherit_socket: true&lt;/code&gt;: disable safety check that prevents a forked child from sharing a socket with its parent; this is potentially useful in order to mitigate connection churn when:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;many short-lived forked children of one process need to talk to redis, AND&lt;/li&gt; &#xA;   &lt;li&gt;your own code prevents the parent process from using the redis connection while a child is alive&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Improper use of &lt;code&gt;inherit_socket&lt;/code&gt; will result in corrupted and/or incorrect responses.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;hiredis binding&lt;/h2&gt; &#xA;&lt;p&gt;By default, redis-rb uses Ruby&#39;s socket library to talk with Redis.&lt;/p&gt; &#xA;&lt;p&gt;The hiredis driver uses the connection facility of hiredis-rb. In turn, hiredis-rb is a binding to the official hiredis client library. It optimizes for speed, at the cost of portability. Because it is a C extension, JRuby is not supported (by default).&lt;/p&gt; &#xA;&lt;p&gt;It is best to use hiredis when you have large replies (for example: &lt;code&gt;LRANGE&lt;/code&gt;, &lt;code&gt;SMEMBERS&lt;/code&gt;, &lt;code&gt;ZRANGE&lt;/code&gt;, etc.) and/or use big pipelines.&lt;/p&gt; &#xA;&lt;p&gt;In your Gemfile, include &lt;code&gt;hiredis-client&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;redis&#34;&#xA;gem &#34;hiredis-client&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your application doesn&#39;t call &lt;code&gt;Bundler.require&lt;/code&gt;, you may have to require it explicitly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;hiredis-client&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This makes the hiredis driver the default.&lt;/p&gt; &#xA;&lt;p&gt;If you want to be certain hiredis is being used, when instantiating the client object, specify hiredis:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;redis = Redis.new(driver: :hiredis)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;This library is tested against recent Ruby and Redis versions. Check &lt;a href=&#34;https://github.com/redis/redis-rb/actions&#34;&gt;Github Actions&lt;/a&gt; for the exact versions supported.&lt;/p&gt; &#xA;&lt;h2&gt;See Also&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/socketry/async-redis&#34;&gt;async-redis&lt;/a&gt; — An &lt;a href=&#34;https://github.com/socketry/async&#34;&gt;async&lt;/a&gt; compatible Redis client.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Several people contributed to redis-rb, but we would like to especially mention Ezra Zygmuntowicz. Ezra introduced the Ruby community to many new cool technologies, like Redis. He wrote the first version of this client and evangelized Redis in Rubyland. Thank you, Ezra.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/redis/redis-rb&#34;&gt;Fork the project&lt;/a&gt; and send pull requests.&lt;/p&gt;</summary>
  </entry>
</feed>