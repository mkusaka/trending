<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-02T01:46:49Z</updated>
  <subtitle>Weekly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jekyll/jekyll</title>
    <updated>2022-10-02T01:46:49Z</updated>
    <id>tag:github.com,2022-10-02:/jekyll/jekyll</id>
    <link href="https://github.com/jekyll/jekyll" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üåê Jekyll is a blog-aware static site generator in Ruby&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rubygems.org/gems/jekyll&#34;&gt;&lt;img src=&#34;https://img.shields.io/gem/v/jekyll.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jekyll/jekyll/actions?query=workflow%3A%22Continuous+Integration%22+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/jekyll/jekyll/workflows/Continuous%20Integration/badge.svg?sanitize=true&#34; alt=&#34;Linux Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/jekyll/jekyll/branch/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/appveyor/ci/jekyll/jekyll/master.svg?label=Windows%20build&#34; alt=&#34;Windows Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/jekyll/jekyll/master/#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/jekyll/backers/badge.svg?sanitize=true&#34; alt=&#34;Backers on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/jekyll/jekyll/master/#sponsors&#34;&gt;&lt;img src=&#34;https://opencollective.com/jekyll/sponsors/badge.svg?sanitize=true&#34; alt=&#34;Sponsors on Open Collective&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Jekyll is a simple, blog-aware, static site generator perfect for personal, project, or organization sites. Think of it like a file-based CMS, without all the complexity. Jekyll takes your content, renders Markdown and Liquid templates, and spits out a complete, static website ready to be served by Apache, Nginx or another web server. Jekyll is the engine behind &lt;a href=&#34;https://pages.github.com&#34;&gt;GitHub Pages&lt;/a&gt;, which you can use to host sites right from your GitHub repositories.&lt;/p&gt; &#xA;&lt;h2&gt;Philosophy&lt;/h2&gt; &#xA;&lt;p&gt;Jekyll does what you tell it to do&amp;nbsp;‚Äî no more, no less. It doesn&#39;t try to outsmart users by making bold assumptions, nor does it burden them with needless complexity and configuration. Put simply, Jekyll gets out of your way and allows you to concentrate on what truly matters: your content.&lt;/p&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;https://jekyllrb.com/philosophy&#34;&gt;https://jekyllrb.com/philosophy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jekyllrb.com/docs/installation/&#34;&gt;Install&lt;/a&gt; the gem&lt;/li&gt; &#xA; &lt;li&gt;Read up about its &lt;a href=&#34;https://jekyllrb.com/docs/usage/&#34;&gt;Usage&lt;/a&gt; and &lt;a href=&#34;https://jekyllrb.com/docs/configuration/&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Take a gander at some existing &lt;a href=&#34;https://github.com/jekyll/jekyll/wiki/sites&#34;&gt;Sites&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jekyll/jekyll/fork&#34;&gt;Fork&lt;/a&gt; and &lt;a href=&#34;https://jekyllrb.com/docs/contributing/&#34;&gt;Contribute&lt;/a&gt; your own modifications&lt;/li&gt; &#xA; &lt;li&gt;Have questions? Check out our official forum community &lt;a href=&#34;https://talk.jekyllrb.com/&#34;&gt;Jekyll Talk&lt;/a&gt; and &lt;a href=&#34;https://libera.chat&#34;&gt;&lt;code&gt;#jekyll&lt;/code&gt; Channel on Libera IRC&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Diving In&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://import.jekyllrb.com/docs/home/&#34;&gt;Migrate&lt;/a&gt; from your previous system&lt;/li&gt; &#xA; &lt;li&gt;Learn how &lt;a href=&#34;https://jekyllrb.com/docs/front-matter/&#34;&gt;Front Matter&lt;/a&gt; works&lt;/li&gt; &#xA; &lt;li&gt;Put information on your site with &lt;a href=&#34;https://jekyllrb.com/docs/variables/&#34;&gt;Variables&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Customize the &lt;a href=&#34;https://jekyllrb.com/docs/permalinks/&#34;&gt;Permalinks&lt;/a&gt; your posts are generated with&lt;/li&gt; &#xA; &lt;li&gt;Use the built-in &lt;a href=&#34;https://jekyllrb.com/docs/templates/&#34;&gt;Liquid Extensions&lt;/a&gt; to make your life easier&lt;/li&gt; &#xA; &lt;li&gt;Use custom &lt;a href=&#34;https://jekyllrb.com/docs/plugins/&#34;&gt;Plugins&lt;/a&gt; to generate content specific to your site&lt;/li&gt; &#xA; &lt;li&gt;Watch &lt;a href=&#34;https://jekyllrb.com/tutorials/video-walkthroughs/&#34;&gt;video tutorials from Giraffe Academy&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Need help?&lt;/h2&gt; &#xA;&lt;p&gt;If you don&#39;t find the answer to your problem in our &lt;a href=&#34;https://jekyllrb.com/docs/&#34;&gt;docs&lt;/a&gt;, or in the &lt;a href=&#34;https://jekyllrb.com/docs/troubleshooting/&#34;&gt;troubleshooting section&lt;/a&gt;, ask the &lt;a href=&#34;https://jekyllrb.com/docs/community/&#34;&gt;community&lt;/a&gt; for help.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;In order to have a more open and welcoming community, Jekyll adheres to a &lt;a href=&#34;https://jekyllrb.com/docs/conduct/&#34;&gt;code of conduct&lt;/a&gt; adapted from the Ruby on Rails code of conduct.&lt;/p&gt; &#xA;&lt;p&gt;Please adhere to this code of conduct in any interactions you have in the Jekyll community. It is strictly enforced on all official Jekyll repositories, websites, and resources. If you encounter someone violating these terms, please let one of our &lt;a href=&#34;https://jekyllrb.com/team/#core-team&#34;&gt;core team members&lt;/a&gt; know and we will address it as soon as possible.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;h3&gt;Sponsors&lt;/h3&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up in this README with a link to your website. &lt;a href=&#34;https://opencollective.com/jekyll#sponsor&#34;&gt;Become a sponsor!&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/jekyll/sponsor/0/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/jekyll/sponsor/0/avatar.svg?sanitize=true&#34; alt=&#34;Jekyll Sponsor 0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/jekyll/sponsor/1/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/jekyll/sponsor/1/avatar.svg?sanitize=true&#34; alt=&#34;Jekyll Sponsor 1&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/jekyll/sponsor/2/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/jekyll/sponsor/2/avatar.svg?sanitize=true&#34; alt=&#34;Jekyll Sponsor 2&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/jekyll/sponsor/3/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/jekyll/sponsor/3/avatar.svg?sanitize=true&#34; alt=&#34;Jekyll Sponsor 3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/jekyll/sponsor/4/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/jekyll/sponsor/4/avatar.svg?sanitize=true&#34; alt=&#34;Jekyll Sponsor 4&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/jekyll/sponsor/5/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/jekyll/sponsor/5/avatar.svg?sanitize=true&#34; alt=&#34;Jekyll Sponsor 5&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/jekyll/sponsor/6/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/jekyll/sponsor/6/avatar.svg?sanitize=true&#34; alt=&#34;Jekyll Sponsor 6&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/jekyll/sponsor/7/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/jekyll/sponsor/7/avatar.svg?sanitize=true&#34; alt=&#34;Jekyll Sponsor 7&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/jekyll/sponsor/8/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/jekyll/sponsor/8/avatar.svg?sanitize=true&#34; alt=&#34;Jekyll Sponsor 8&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/jekyll/sponsor/9/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/jekyll/sponsor/9/avatar.svg?sanitize=true&#34; alt=&#34;Jekyll Sponsor 9&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. &lt;a href=&#34;https://raw.githubusercontent.com/jekyll/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/jekyll/contributors.svg?width=890&amp;amp;button=false&#34; alt=&#34;Jekyll Contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Backers&lt;/h3&gt; &#xA;&lt;p&gt;Thank you to all our backers! üôè &lt;a href=&#34;https://opencollective.com/jekyll#backer&#34;&gt;Become a backer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/jekyll#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/jekyll/backers.svg?width=890&#34; alt=&#34;Jekyll Backers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/jekyll/jekyll/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sinatra/sinatra</title>
    <updated>2022-10-02T01:46:49Z</updated>
    <id>tag:github.com,2022-10-02:/sinatra/sinatra</id>
    <link href="https://github.com/sinatra/sinatra" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Classy web-development dressed in a DSL (official / canonical repo)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Sinatra&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/rb/sinatra&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/sinatra.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sinatra/sinatra/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/sinatra/sinatra/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Testing&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sinatra is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Domain-specific_language&#34;&gt;DSL&lt;/a&gt; for quickly creating web applications in Ruby with minimal effort:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# myapp.rb&#xA;require &#39;sinatra&#39;&#xA;&#xA;get &#39;/&#39; do&#xA;  &#39;Hello world!&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the gem:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;gem install sinatra&#xA;gem install puma # or any other server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And run with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ruby myapp.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;View at: &lt;a href=&#34;http://localhost:4567&#34;&gt;http://localhost:4567&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The code you changed will not take effect until you restart the server. Please restart the server every time you change or use a code reloader like &lt;a href=&#34;https://github.com/alexch/rerun&#34;&gt;rerun&lt;/a&gt; or &lt;a href=&#34;https://github.com/jeremyevans/rack-unreloader&#34;&gt;rack-unreloader&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is recommended to also run &lt;code&gt;gem install puma&lt;/code&gt;, which Sinatra will pick up if available.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#sinatra&#34;&gt;Sinatra&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#routes&#34;&gt;Routes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#conditions&#34;&gt;Conditions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#return-values&#34;&gt;Return Values&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#custom-route-matchers&#34;&gt;Custom Route Matchers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#static-files&#34;&gt;Static Files&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#views--templates&#34;&gt;Views / Templates&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#literal-templates&#34;&gt;Literal Templates&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#available-template-languages&#34;&gt;Available Template Languages&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#haml-templates&#34;&gt;Haml Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#erb-templates&#34;&gt;Erb Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#builder-templates&#34;&gt;Builder Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#nokogiri-templates&#34;&gt;Nokogiri Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#liquid-templates&#34;&gt;Liquid Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#markdown-templates&#34;&gt;Markdown Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#rdoc-templates&#34;&gt;RDoc Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#asciidoc-templates&#34;&gt;AsciiDoc Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#markaby-templates&#34;&gt;Markaby Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#rabl-templates&#34;&gt;RABL Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#slim-templates&#34;&gt;Slim Templates&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#yajl-templates&#34;&gt;Yajl Templates&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#accessing-variables-in-templates&#34;&gt;Accessing Variables in Templates&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#templates-with-yield-and-nested-layouts&#34;&gt;Templates with &lt;code&gt;yield&lt;/code&gt; and nested layouts&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#inline-templates&#34;&gt;Inline Templates&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#named-templates&#34;&gt;Named Templates&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#associating-file-extensions&#34;&gt;Associating File Extensions&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#adding-your-own-template-engine&#34;&gt;Adding Your Own Template Engine&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#using-custom-logic-for-template-lookup&#34;&gt;Using Custom Logic for Template Lookup&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#filters&#34;&gt;Filters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#helpers&#34;&gt;Helpers&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#using-sessions&#34;&gt;Using Sessions&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#session-secret-security&#34;&gt;Session Secret Security&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#session-config&#34;&gt;Session Config&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#choosing-your-own-session-middleware&#34;&gt;Choosing Your Own Session Middleware&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#halting&#34;&gt;Halting&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#passing&#34;&gt;Passing&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#triggering-another-route&#34;&gt;Triggering Another Route&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#setting-body-status-code-and-headers&#34;&gt;Setting Body, Status Code, and Headers&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#streaming-responses&#34;&gt;Streaming Responses&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#logging&#34;&gt;Logging&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#mime-types&#34;&gt;Mime Types&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#generating-urls&#34;&gt;Generating URLs&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#browser-redirect&#34;&gt;Browser Redirect&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#cache-control&#34;&gt;Cache Control&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#sending-files&#34;&gt;Sending Files&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#accessing-the-request-object&#34;&gt;Accessing the Request Object&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#attachments&#34;&gt;Attachments&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#dealing-with-date-and-time&#34;&gt;Dealing with Date and Time&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#looking-up-template-files&#34;&gt;Looking Up Template Files&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#configuring-attack-protection&#34;&gt;Configuring attack protection&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#available-settings&#34;&gt;Available Settings&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#environments&#34;&gt;Environments&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#error-handling&#34;&gt;Error Handling&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#not-found&#34;&gt;Not Found&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#error&#34;&gt;Error&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#rack-middleware&#34;&gt;Rack Middleware&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#sinatrabase---middleware-libraries-and-modular-apps&#34;&gt;Sinatra::Base - Middleware, Libraries, and Modular Apps&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#modular-vs-classic-style&#34;&gt;Modular vs. Classic Style&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#serving-a-modular-application&#34;&gt;Serving a Modular Application&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#using-a-classic-style-application-with-a-configru&#34;&gt;Using a Classic Style Application with a config.ru&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#when-to-use-a-configru&#34;&gt;When to use a config.ru?&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#using-sinatra-as-middleware&#34;&gt;Using Sinatra as Middleware&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#dynamic-application-creation&#34;&gt;Dynamic Application Creation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#scopes-and-binding&#34;&gt;Scopes and Binding&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#applicationclass-scope&#34;&gt;Application/Class Scope&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#requestinstance-scope&#34;&gt;Request/Instance Scope&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#delegation-scope&#34;&gt;Delegation Scope&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#command-line&#34;&gt;Command Line&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#multi-threading&#34;&gt;Multi-threading&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#requirement&#34;&gt;Requirement&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#the-bleeding-edge&#34;&gt;The Bleeding Edge&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#with-bundler&#34;&gt;With Bundler&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#versioning&#34;&gt;Versioning&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#further-reading&#34;&gt;Further Reading&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Routes&lt;/h2&gt; &#xA;&lt;p&gt;In Sinatra, a route is an HTTP method paired with a URL-matching pattern. Each route is associated with a block:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  .. show something ..&#xA;end&#xA;&#xA;post &#39;/&#39; do&#xA;  .. create something ..&#xA;end&#xA;&#xA;put &#39;/&#39; do&#xA;  .. replace something ..&#xA;end&#xA;&#xA;patch &#39;/&#39; do&#xA;  .. modify something ..&#xA;end&#xA;&#xA;delete &#39;/&#39; do&#xA;  .. annihilate something ..&#xA;end&#xA;&#xA;options &#39;/&#39; do&#xA;  .. appease something ..&#xA;end&#xA;&#xA;link &#39;/&#39; do&#xA;  .. affiliate something ..&#xA;end&#xA;&#xA;unlink &#39;/&#39; do&#xA;  .. separate something ..&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Routes are matched in the order they are defined. The first route that matches the request is invoked.&lt;/p&gt; &#xA;&lt;p&gt;Routes with trailing slashes are different from the ones without:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/foo&#39; do&#xA;  # Does not match &#34;GET /foo/&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Route patterns may include named parameters, accessible via the &lt;code&gt;params&lt;/code&gt; hash:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/hello/:name&#39; do&#xA;  # matches &#34;GET /hello/foo&#34; and &#34;GET /hello/bar&#34;&#xA;  # params[&#39;name&#39;] is &#39;foo&#39; or &#39;bar&#39;&#xA;  &#34;Hello #{params[&#39;name&#39;]}!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also access named parameters via block parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/hello/:name&#39; do |n|&#xA;  # matches &#34;GET /hello/foo&#34; and &#34;GET /hello/bar&#34;&#xA;  # params[&#39;name&#39;] is &#39;foo&#39; or &#39;bar&#39;&#xA;  # n stores params[&#39;name&#39;]&#xA;  &#34;Hello #{n}!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Route patterns may also include splat (or wildcard) parameters, accessible via the &lt;code&gt;params[&#39;splat&#39;]&lt;/code&gt; array:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/say/*/to/*&#39; do&#xA;  # matches /say/hello/to/world&#xA;  params[&#39;splat&#39;] # =&amp;gt; [&#34;hello&#34;, &#34;world&#34;]&#xA;end&#xA;&#xA;get &#39;/download/*.*&#39; do&#xA;  # matches /download/path/to/file.xml&#xA;  params[&#39;splat&#39;] # =&amp;gt; [&#34;path/to/file&#34;, &#34;xml&#34;]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with block parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/download/*.*&#39; do |path, ext|&#xA;  [path, ext] # =&amp;gt; [&#34;path/to/file&#34;, &#34;xml&#34;]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Route matching with Regular Expressions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get /\/hello\/([\w]+)/ do&#xA;  &#34;Hello, #{params[&#39;captures&#39;].first}!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with a block parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get %r{/hello/([\w]+)} do |c|&#xA;  # Matches &#34;GET /meta/hello/world&#34;, &#34;GET /hello/world/1234&#34; etc.&#xA;  &#34;Hello, #{c}!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Route patterns may have optional parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/posts/:format?&#39; do&#xA;  # matches &#34;GET /posts/&#34; and any extension &#34;GET /posts/json&#34;, &#34;GET /posts/xml&#34; etc&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Routes may also utilize query parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/posts&#39; do&#xA;  # matches &#34;GET /posts?title=foo&amp;amp;author=bar&#34;&#xA;  title = params[&#39;title&#39;]&#xA;  author = params[&#39;author&#39;]&#xA;  # uses title and author variables; query is optional to the /posts route&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By the way, unless you disable the path traversal attack protection (see &lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#configuring-attack-protection&#34;&gt;below&lt;/a&gt;), the request path might be modified before matching against your routes.&lt;/p&gt; &#xA;&lt;p&gt;You may customize the &lt;a href=&#34;https://github.com/sinatra/mustermann#readme&#34;&gt;Mustermann&lt;/a&gt; options used for a given route by passing in a &lt;code&gt;:mustermann_opts&lt;/code&gt; hash:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;\A/posts\z&#39;, :mustermann_opts =&amp;gt; { :type =&amp;gt; :regexp, :check_anchors =&amp;gt; false } do&#xA;  # matches /posts exactly, with explicit anchoring&#xA;  &#34;If you match an anchored pattern clap your hands!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It looks like a &lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#conditions&#34;&gt;condition&lt;/a&gt;, but it isn&#39;t one! These options will be merged into the global &lt;code&gt;:mustermann_opts&lt;/code&gt; hash described &lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#available-settings&#34;&gt;below&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Conditions&lt;/h2&gt; &#xA;&lt;p&gt;Routes may include a variety of matching conditions, such as the user agent:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/foo&#39;, :agent =&amp;gt; /Songbird (\d\.\d)[\d\/]*?/ do&#xA;  &#34;You&#39;re using Songbird version #{params[&#39;agent&#39;][0]}&#34;&#xA;end&#xA;&#xA;get &#39;/foo&#39; do&#xA;  # Matches non-songbird browsers&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other available conditions are &lt;code&gt;host_name&lt;/code&gt; and &lt;code&gt;provides&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39;, :host_name =&amp;gt; /^admin\./ do&#xA;  &#34;Admin Area, Access denied!&#34;&#xA;end&#xA;&#xA;get &#39;/&#39;, :provides =&amp;gt; &#39;html&#39; do&#xA;  haml :index&#xA;end&#xA;&#xA;get &#39;/&#39;, :provides =&amp;gt; [&#39;rss&#39;, &#39;atom&#39;, &#39;xml&#39;] do&#xA;  builder :feed&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;provides&lt;/code&gt; searches the request&#39;s Accept header.&lt;/p&gt; &#xA;&lt;p&gt;You can easily define your own conditions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set(:probability) { |value| condition { rand &amp;lt;= value } }&#xA;&#xA;get &#39;/win_a_car&#39;, :probability =&amp;gt; 0.1 do&#xA;  &#34;You won!&#34;&#xA;end&#xA;&#xA;get &#39;/win_a_car&#39; do&#xA;  &#34;Sorry, you lost.&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a condition that takes multiple values use a splat:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set(:auth) do |*roles|   # &amp;lt;- notice the splat here&#xA;  condition do&#xA;    unless logged_in? &amp;amp;&amp;amp; roles.any? {|role| current_user.in_role? role }&#xA;      redirect &#34;/login/&#34;, 303&#xA;    end&#xA;  end&#xA;end&#xA;&#xA;get &#34;/my/account/&#34;, :auth =&amp;gt; [:user, :admin] do&#xA;  &#34;Your Account Details&#34;&#xA;end&#xA;&#xA;get &#34;/only/admin/&#34;, :auth =&amp;gt; :admin do&#xA;  &#34;Only admins are allowed here!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Return Values&lt;/h2&gt; &#xA;&lt;p&gt;The return value of a route block determines at least the response body passed on to the HTTP client or at least the next middleware in the Rack stack. Most commonly, this is a string, as in the above examples. But other values are also accepted.&lt;/p&gt; &#xA;&lt;p&gt;You can return an object that would either be a valid Rack response, Rack body object or HTTP status code:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An Array with three elements: &lt;code&gt;[status (Integer), headers (Hash), response body (responds to #each)]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;An Array with two elements: &lt;code&gt;[status (Integer), response body (responds to #each)]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;An object that responds to &lt;code&gt;#each&lt;/code&gt; and passes nothing but strings to the given block&lt;/li&gt; &#xA; &lt;li&gt;A Integer representing the status code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;That way we can, for instance, easily implement a streaming example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Stream&#xA;  def each&#xA;    100.times { |i| yield &#34;#{i}\n&#34; }&#xA;  end&#xA;end&#xA;&#xA;get(&#39;/&#39;) { Stream.new }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the &lt;code&gt;stream&lt;/code&gt; helper method (&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#streaming-responses&#34;&gt;described below&lt;/a&gt;) to reduce boilerplate and embed the streaming logic in the route.&lt;/p&gt; &#xA;&lt;h2&gt;Custom Route Matchers&lt;/h2&gt; &#xA;&lt;p&gt;As shown above, Sinatra ships with built-in support for using String patterns and regular expressions as route matches. However, it does not stop there. You can easily define your own matchers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AllButPattern&#xA;  def initialize(except)&#xA;    @except = except&#xA;  end&#xA;&#xA;  def to_pattern(options)&#xA;    return self&#xA;  end&#xA;&#xA;  def params(route)&#xA;    return {} unless @except === route&#xA;  end&#xA;end&#xA;&#xA;def all_but(pattern)&#xA;  AllButPattern.new(pattern)&#xA;end&#xA;&#xA;get all_but(&#34;/index&#34;) do&#xA;  # ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the above example might be over-engineered, as it can also be expressed as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get /.*/ do&#xA;  pass if request.path_info == &#34;/index&#34;&#xA;  # ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Static Files&lt;/h2&gt; &#xA;&lt;p&gt;Static files are served from the &lt;code&gt;./public&lt;/code&gt; directory. You can specify a different location by setting the &lt;code&gt;:public_folder&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :public_folder, __dir__ + &#39;/static&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the public directory name is not included in the URL. A file &lt;code&gt;./public/css/style.css&lt;/code&gt; is made available as &lt;code&gt;http://example.com/css/style.css&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;:static_cache_control&lt;/code&gt; setting (see &lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#cache-control&#34;&gt;below&lt;/a&gt;) to add &lt;code&gt;Cache-Control&lt;/code&gt; header info.&lt;/p&gt; &#xA;&lt;h2&gt;Views / Templates&lt;/h2&gt; &#xA;&lt;p&gt;Each template language is exposed via its own rendering method. These methods simply return a string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  erb :index&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This renders &lt;code&gt;views/index.erb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Instead of a template name, you can also just pass in the template content directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  code = &#34;&amp;lt;%= Time.now %&amp;gt;&#34;&#xA;  erb code&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Templates take a second argument, the options hash:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  erb :index, :layout =&amp;gt; :post&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will render &lt;code&gt;views/index.erb&lt;/code&gt; embedded in the &lt;code&gt;views/post.erb&lt;/code&gt; (default is &lt;code&gt;views/layout.erb&lt;/code&gt;, if it exists).&lt;/p&gt; &#xA;&lt;p&gt;Any options not understood by Sinatra will be passed on to the template engine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  haml :index, :format =&amp;gt; :html5&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also set options per template language in general:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :haml, :format =&amp;gt; :html5&#xA;&#xA;get &#39;/&#39; do&#xA;  haml :index&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Options passed to the render method override options set via &lt;code&gt;set&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Available Options:&lt;/p&gt; &#xA;&lt;dl&gt; &#xA; &lt;dt&gt;&#xA;  locals&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   List of locals passed to the document. Handy with partials. Example: &#xA;  &lt;tt&gt;erb &#34;&amp;lt;%= foo %&amp;gt;&#34;, :locals =&amp;gt; {:foo =&amp;gt; &#34;bar&#34;}&lt;/tt&gt; &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  default_encoding&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   String encoding to use if uncertain. Defaults to &#xA;  &lt;tt&gt;settings.default_encoding&lt;/tt&gt;. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  views&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Views folder to load templates from. Defaults to &#xA;  &lt;tt&gt;settings.views&lt;/tt&gt;. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  layout&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Whether to use a layout (&#xA;  &lt;tt&gt;true&lt;/tt&gt; or &#xA;  &lt;tt&gt;false&lt;/tt&gt;). If it&#39;s a Symbol, specifies what template to use. Example: &#xA;  &lt;tt&gt;erb :index, :layout =&amp;gt; !request.xhr?&lt;/tt&gt; &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  content_type&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Content-Type the template produces. Default depends on template language. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  scope&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Scope to render template under. Defaults to the application instance. If you change this, instance variables and helper methods will not be available. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  layout_engine&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Template engine to use for rendering the layout. Useful for languages that do not support layouts otherwise. Defaults to the engine used for the template. Example: &#xA;  &lt;tt&gt;set :rdoc, :layout_engine =&amp;gt; :erb&lt;/tt&gt; &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  layout_options&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Special options only used for rendering the layout. Example: &#xA;  &lt;tt&gt;set :rdoc, :layout_options =&amp;gt; { :views =&amp;gt; &#39;views/layouts&#39; }&lt;/tt&gt; &#xA; &lt;/dd&gt; &#xA;&lt;/dl&gt; &#xA;&lt;p&gt;Templates are assumed to be located directly under the &lt;code&gt;./views&lt;/code&gt; directory. To use a different views directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :views, settings.root + &#39;/templates&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;One important thing to remember is that you always have to reference templates with symbols, even if they&#39;re in a subdirectory (in this case, use: &lt;code&gt;:&#39;subdir/template&#39;&lt;/code&gt; or &lt;code&gt;&#39;subdir/template&#39;.to_sym&lt;/code&gt;). You must use a symbol because otherwise rendering methods will render any strings passed to them directly.&lt;/p&gt; &#xA;&lt;h3&gt;Literal Templates&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  haml &#39;%div.title Hello World&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Renders the template string. You can optionally specify &lt;code&gt;:path&lt;/code&gt; and &lt;code&gt;:line&lt;/code&gt; for a clearer backtrace if there is a filesystem path or line associated with that string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  haml &#39;%div.title Hello World&#39;, :path =&amp;gt; &#39;examples/file.haml&#39;, :line =&amp;gt; 3&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Available Template Languages&lt;/h3&gt; &#xA;&lt;p&gt;Some languages have multiple implementations. To specify what implementation to use (and to be thread-safe), you should simply require it first:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;rdiscount&#39;&#xA;get(&#39;/&#39;) { markdown :index }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Haml Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://haml.info/&#34; title=&#34;haml&#34;&gt;haml&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.haml&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;haml :index, :format =&amp;gt; :html5&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Erb Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/jeremyevans/erubi&#34; title=&#34;erubi&#34;&gt;erubi&lt;/a&gt; or erb (included in Ruby) &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extensions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.erb&lt;/tt&gt;, &lt;tt&gt;.rhtml&lt;/tt&gt; or &lt;tt&gt;.erubi&lt;/tt&gt; (Erubi only)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;erb :index&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Builder Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/jimweirich/builder&#34; title=&#34;builder&#34;&gt;builder&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.builder&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;builder { |xml| xml.em &#34;hi&#34; }&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;It also takes a block for inline templates (see &lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#inline-templates&#34;&gt;example&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;Nokogiri Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.nokogiri.org/&#34; title=&#34;nokogiri&#34;&gt;nokogiri&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.nokogiri&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;nokogiri { |xml| xml.em &#34;hi&#34; }&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;It also takes a block for inline templates (see &lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#inline-templates&#34;&gt;example&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;Liquid Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://shopify.github.io/liquid/&#34; title=&#34;liquid&#34;&gt;liquid&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.liquid&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;liquid :index, :locals =&amp;gt; { :key =&amp;gt; &#39;value&#39; }&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;Since you cannot call Ruby methods (except for &lt;code&gt;yield&lt;/code&gt;) from a Liquid template, you almost always want to pass locals to it.&lt;/p&gt; &#xA;&lt;h4&gt;Markdown Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt; Anyone of: &lt;a href=&#34;https://github.com/davidfstr/rdiscount&#34; title=&#34;RDiscount&#34;&gt;RDiscount&lt;/a&gt;, &lt;a href=&#34;https://github.com/vmg/redcarpet&#34; title=&#34;RedCarpet&#34;&gt;RedCarpet&lt;/a&gt;, &lt;a href=&#34;https://kramdown.gettalong.org/&#34; title=&#34;kramdown&#34;&gt;kramdown&lt;/a&gt;, &lt;a href=&#34;https://github.com/gjtorikian/commonmarker&#34; title=&#34;commonmarker&#34;&gt;commonmarker&lt;/a&gt; &lt;a href=&#34;https://github.com/alphabetum/pandoc-ruby&#34; title=&#34;pandoc&#34;&gt;pandoc&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extensions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.markdown&lt;/tt&gt;, &lt;tt&gt;.mkd&lt;/tt&gt; and &lt;tt&gt;.md&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;markdown :index, :layout_engine =&amp;gt; :erb&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;It is not possible to call methods from Markdown, nor to pass locals to it. You therefore will usually use it in combination with another rendering engine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;erb :overview, :locals =&amp;gt; { :text =&amp;gt; markdown(:introduction) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you may also call the &lt;code&gt;markdown&lt;/code&gt; method from within other templates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;%h1 Hello From Haml!&#xA;%p= markdown(:greetings)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since you cannot call Ruby from Markdown, you cannot use layouts written in Markdown. However, it is possible to use another rendering engine for the template than for the layout by passing the &lt;code&gt;:layout_engine&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h4&gt;RDoc Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://rdoc.sourceforge.net/&#34; title=&#34;RDoc&#34;&gt;RDoc&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.rdoc&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;rdoc :README, :layout_engine =&amp;gt; :erb&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;It is not possible to call methods from RDoc, nor to pass locals to it. You therefore will usually use it in combination with another rendering engine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;erb :overview, :locals =&amp;gt; { :text =&amp;gt; rdoc(:introduction) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you may also call the &lt;code&gt;rdoc&lt;/code&gt; method from within other templates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;%h1 Hello From Haml!&#xA;%p= rdoc(:greetings)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since you cannot call Ruby from RDoc, you cannot use layouts written in RDoc. However, it is possible to use another rendering engine for the template than for the layout by passing the &lt;code&gt;:layout_engine&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h4&gt;AsciiDoc Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://asciidoctor.org/&#34; title=&#34;Asciidoctor&#34;&gt;Asciidoctor&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.asciidoc&lt;/tt&gt;, &lt;tt&gt;.adoc&lt;/tt&gt; and &lt;tt&gt;.ad&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;asciidoc :README, :layout_engine =&amp;gt; :erb&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;Since you cannot call Ruby methods directly from an AsciiDoc template, you almost always want to pass locals to it.&lt;/p&gt; &#xA;&lt;h4&gt;Markaby Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://markaby.github.io/&#34; title=&#34;Markaby&#34;&gt;Markaby&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.mab&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;markaby { h1 &#34;Welcome!&#34; }&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;It also takes a block for inline templates (see &lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#inline-templates&#34;&gt;example&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;RABL Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nesquena/rabl&#34; title=&#34;Rabl&#34;&gt;Rabl&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.rabl&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;rabl :index&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Slim Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://slim-lang.com/&#34; title=&#34;Slim Lang&#34;&gt;Slim Lang&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.slim&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;slim :index&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Yajl Templates&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dependency&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/brianmario/yajl-ruby&#34; title=&#34;yajl-ruby&#34;&gt;yajl-ruby&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;tt&gt;.yajl&lt;/tt&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example&lt;/td&gt; &#xA;   &lt;td&gt; &lt;tt&gt; yajl :index, :locals =&amp;gt; { :key =&amp;gt; &#39;qux&#39; }, :callback =&amp;gt; &#39;present&#39;, :variable =&amp;gt; &#39;resource&#39; &lt;/tt&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;The template source is evaluated as a Ruby string, and the resulting json variable is converted using &lt;code&gt;#to_json&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;json = { :foo =&amp;gt; &#39;bar&#39; }&#xA;json[:baz] = key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;:callback&lt;/code&gt; and &lt;code&gt;:variable&lt;/code&gt; options can be used to decorate the rendered object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var resource = {&#34;foo&#34;:&#34;bar&#34;,&#34;baz&#34;:&#34;qux&#34;};&#xA;present(resource);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Accessing Variables in Templates&lt;/h3&gt; &#xA;&lt;p&gt;Templates are evaluated within the same context as route handlers. Instance variables set in route handlers are directly accessible by templates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/:id&#39; do&#xA;  @foo = Foo.find(params[&#39;id&#39;])&#xA;  haml &#39;%h1= @foo.name&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, specify an explicit Hash of local variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/:id&#39; do&#xA;  foo = Foo.find(params[&#39;id&#39;])&#xA;  haml &#39;%h1= bar.name&#39;, :locals =&amp;gt; { :bar =&amp;gt; foo }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is typically used when rendering templates as partials from within other templates.&lt;/p&gt; &#xA;&lt;h3&gt;Templates with &lt;code&gt;yield&lt;/code&gt; and nested layouts&lt;/h3&gt; &#xA;&lt;p&gt;A layout is usually just a template that calls &lt;code&gt;yield&lt;/code&gt;. Such a template can be used either through the &lt;code&gt;:template&lt;/code&gt; option as described above, or it can be rendered with a block as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;erb :post, :layout =&amp;gt; false do&#xA;  erb :index&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This code is mostly equivalent to &lt;code&gt;erb :index, :layout =&amp;gt; :post&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Passing blocks to rendering methods is most useful for creating nested layouts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;erb :main_layout, :layout =&amp;gt; false do&#xA;  erb :admin_layout do&#xA;    erb :user&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can also be done in fewer lines of code with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;erb :admin_layout, :layout =&amp;gt; :main_layout do&#xA;  erb :user&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently, the following rendering methods accept a block: &lt;code&gt;erb&lt;/code&gt;, &lt;code&gt;haml&lt;/code&gt;, &lt;code&gt;liquid&lt;/code&gt;, &lt;code&gt;slim &lt;/code&gt;. Also, the general &lt;code&gt;render&lt;/code&gt; method accepts a block.&lt;/p&gt; &#xA;&lt;h3&gt;Inline Templates&lt;/h3&gt; &#xA;&lt;p&gt;Templates may be defined at the end of the source file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;sinatra&#39;&#xA;&#xA;get &#39;/&#39; do&#xA;  haml :index&#xA;end&#xA;&#xA;__END__&#xA;&#xA;@@ layout&#xA;%html&#xA;  = yield&#xA;&#xA;@@ index&#xA;%div.title Hello world.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: Inline templates defined in the source file that requires Sinatra are automatically loaded. Call &lt;code&gt;enable :inline_templates&lt;/code&gt; explicitly if you have inline templates in other source files.&lt;/p&gt; &#xA;&lt;h3&gt;Named Templates&lt;/h3&gt; &#xA;&lt;p&gt;Templates may also be defined using the top-level &lt;code&gt;template&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;template :layout do&#xA;  &#34;%html\n  =yield\n&#34;&#xA;end&#xA;&#xA;template :index do&#xA;  &#39;%div.title Hello World!&#39;&#xA;end&#xA;&#xA;get &#39;/&#39; do&#xA;  haml :index&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If a template named &#34;layout&#34; exists, it will be used each time a template is rendered. You can individually disable layouts by passing &lt;code&gt;:layout =&amp;gt; false&lt;/code&gt; or disable them by default via &lt;code&gt;set :haml, :layout =&amp;gt; false&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  haml :index, :layout =&amp;gt; !request.xhr?&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Associating File Extensions&lt;/h3&gt; &#xA;&lt;p&gt;To associate a file extension with a template engine, use &lt;code&gt;Tilt.register&lt;/code&gt;. For instance, if you like to use the file extension &lt;code&gt;tt&lt;/code&gt; for Haml templates, you can do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Tilt.register :tt, Tilt[:haml]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding Your Own Template Engine&lt;/h3&gt; &#xA;&lt;p&gt;First, register your engine with Tilt, then create a rendering method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Tilt.register :myat, MyAwesomeTemplateEngine&#xA;&#xA;helpers do&#xA;  def myat(*args) render(:myat, *args) end&#xA;end&#xA;&#xA;get &#39;/&#39; do&#xA;  myat :index&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Renders &lt;code&gt;./views/index.myat&lt;/code&gt;. Learn more about &lt;a href=&#34;https://github.com/rtomayko/tilt#readme&#34;&gt;Tilt&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using Custom Logic for Template Lookup&lt;/h3&gt; &#xA;&lt;p&gt;To implement your own template lookup mechanism you can write your own &lt;code&gt;#find_template&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;configure do&#xA;  set :views, [ &#39;./views/a&#39;, &#39;./views/b&#39; ]&#xA;end&#xA;&#xA;def find_template(views, name, engine, &amp;amp;block)&#xA;  Array(views).each do |v|&#xA;    super(v, name, engine, &amp;amp;block)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Filters&lt;/h2&gt; &#xA;&lt;p&gt;Before filters are evaluated before each request within the same context as the routes will be and can modify the request and response. Instance variables set in filters are accessible by routes and templates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;before do&#xA;  @note = &#39;Hi!&#39;&#xA;  request.path_info = &#39;/foo/bar/baz&#39;&#xA;end&#xA;&#xA;get &#39;/foo/*&#39; do&#xA;  @note #=&amp;gt; &#39;Hi!&#39;&#xA;  params[&#39;splat&#39;] #=&amp;gt; &#39;bar/baz&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After filters are evaluated after each request within the same context as the routes will be and can also modify the request and response. Instance variables set in before filters and routes are accessible by after filters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;after do&#xA;  puts response.status&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Unless you use the &lt;code&gt;body&lt;/code&gt; method rather than just returning a String from the routes, the body will not yet be available in the after filter, since it is generated later on.&lt;/p&gt; &#xA;&lt;p&gt;Filters optionally take a pattern, causing them to be evaluated only if the request path matches that pattern:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;before &#39;/protected/*&#39; do&#xA;  authenticate!&#xA;end&#xA;&#xA;after &#39;/create/:slug&#39; do |slug|&#xA;  session[:last_slug] = slug&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Like routes, filters also take conditions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;before :agent =&amp;gt; /Songbird/ do&#xA;  # ...&#xA;end&#xA;&#xA;after &#39;/blog/*&#39;, :host_name =&amp;gt; &#39;example.com&#39; do&#xA;  # ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Helpers&lt;/h2&gt; &#xA;&lt;p&gt;Use the top-level &lt;code&gt;helpers&lt;/code&gt; method to define helper methods for use in route handlers and templates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;helpers do&#xA;  def bar(name)&#xA;    &#34;#{name}bar&#34;&#xA;  end&#xA;end&#xA;&#xA;get &#39;/:name&#39; do&#xA;  bar(params[&#39;name&#39;])&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, helper methods can be separately defined in a module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module FooUtils&#xA;  def foo(name) &#34;#{name}foo&#34; end&#xA;end&#xA;&#xA;module BarUtils&#xA;  def bar(name) &#34;#{name}bar&#34; end&#xA;end&#xA;&#xA;helpers FooUtils, BarUtils&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The effect is the same as including the modules in the application class.&lt;/p&gt; &#xA;&lt;h3&gt;Using Sessions&lt;/h3&gt; &#xA;&lt;p&gt;A session is used to keep state during requests. If activated, you have one session hash per user session:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;enable :sessions&#xA;&#xA;get &#39;/&#39; do&#xA;  &#34;value = &#34; &amp;lt;&amp;lt; session[:value].inspect&#xA;end&#xA;&#xA;get &#39;/:value&#39; do&#xA;  session[&#39;value&#39;] = params[&#39;value&#39;]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Session Secret Security&lt;/h4&gt; &#xA;&lt;p&gt;To improve security, the session data in the cookie is signed with a session secret using &lt;code&gt;HMAC-SHA1&lt;/code&gt;. This session secret should optimally be a cryptographically secure random value of an appropriate length which for &lt;code&gt;HMAC-SHA1&lt;/code&gt; is greater than or equal to 64 bytes (512 bits, 128 hex characters). You would be advised not to use a secret that is less than 32 bytes of randomness (256 bits, 64 hex characters). It is therefore &lt;strong&gt;very important&lt;/strong&gt; that you don&#39;t just make the secret up, but instead use a secure random number generator to create it. Humans are extremely bad at generating random values.&lt;/p&gt; &#xA;&lt;p&gt;By default, a 32 byte secure random session secret is generated for you by Sinatra, but it will change with every restart of your application. If you have multiple instances of your application, and you let Sinatra generate the key, each instance would then have a different session key which is probably not what you want.&lt;/p&gt; &#xA;&lt;p&gt;For better security and usability it&#39;s &lt;a href=&#34;https://12factor.net/config&#34;&gt;recommended&lt;/a&gt; that you generate a secure random secret and store it in an environment variable on each host running your application so that all of your application instances will share the same secret. You should periodically rotate this session secret to a new value. Here are some examples of how you might create a 64-byte secret and set it:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Session Secret Generation&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ ruby -e &#34;require &#39;securerandom&#39;; puts SecureRandom.hex(64)&#34;&#xA;99ae8af...snip...ec0f262ac&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Session Secret Generation (Bonus Points)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use the &lt;a href=&#34;https://github.com/cryptosphere/sysrandom#readme&#34;&gt;sysrandom gem&lt;/a&gt; to use the system RNG facilities to generate random values instead of userspace &lt;code&gt;OpenSSL&lt;/code&gt; which MRI Ruby currently defaults to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ gem install sysrandom&#xA;Building native extensions.  This could take a while...&#xA;Successfully installed sysrandom-1.x&#xA;1 gem installed&#xA;&#xA;$ ruby -e &#34;require &#39;sysrandom/securerandom&#39;; puts SecureRandom.hex(64)&#34;&#xA;99ae8af...snip...ec0f262ac&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Session Secret Environment Variable&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set a &lt;code&gt;SESSION_SECRET&lt;/code&gt; environment variable for Sinatra to the value you generated. Make this value persistent across reboots of your host. Since the method for doing this will vary across systems this is for illustrative purposes only:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# echo &#34;export SESSION_SECRET=99ae8af...snip...ec0f262ac&#34; &amp;gt;&amp;gt; ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Session Secret App Config&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set up your app config to fail-safe to a secure random secret if the &lt;code&gt;SESSION_SECRET&lt;/code&gt; environment variable is not available.&lt;/p&gt; &#xA;&lt;p&gt;For bonus points use the &lt;a href=&#34;https://github.com/cryptosphere/sysrandom#readme&#34;&gt;sysrandom gem&lt;/a&gt; here as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;securerandom&#39;&#xA;# -or- require &#39;sysrandom/securerandom&#39;&#xA;set :session_secret, ENV.fetch(&#39;SESSION_SECRET&#39;) { SecureRandom.hex(64) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Session Config&lt;/h4&gt; &#xA;&lt;p&gt;If you want to configure it further, you may also store a hash with options in the &lt;code&gt;sessions&lt;/code&gt; setting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :sessions, :domain =&amp;gt; &#39;foo.com&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To share your session across other apps on subdomains of foo.com, prefix the domain with a &lt;em&gt;.&lt;/em&gt; like this instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :sessions, :domain =&amp;gt; &#39;.foo.com&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Choosing Your Own Session Middleware&lt;/h4&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;enable :sessions&lt;/code&gt; actually stores all data in a cookie. This might not always be what you want (storing lots of data will increase your traffic, for instance). You can use any Rack session middleware in order to do so, one of the following methods can be used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;enable :sessions&#xA;set :session_store, Rack::Session::Pool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or to set up sessions with a hash of options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :sessions, :expire_after =&amp;gt; 2592000&#xA;set :session_store, Rack::Session::Pool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another option is to &lt;strong&gt;not&lt;/strong&gt; call &lt;code&gt;enable :sessions&lt;/code&gt;, but instead pull in your middleware of choice as you would any other middleware.&lt;/p&gt; &#xA;&lt;p&gt;It is important to note that when using this method, session based protection &lt;strong&gt;will not be enabled by default&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Rack middleware to do that will also need to be added:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use Rack::Session::Pool, :expire_after =&amp;gt; 2592000&#xA;use Rack::Protection::RemoteToken&#xA;use Rack::Protection::SessionHijacking&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &#39;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#configuring-attack-protection&#34;&gt;Configuring attack protection&lt;/a&gt;&#39; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Halting&lt;/h3&gt; &#xA;&lt;p&gt;To immediately stop a request within a filter or route use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;halt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also specify the status when halting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;halt 410&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or the body:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;halt &#39;this will be the body&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or both:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;halt 401, &#39;go away!&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With headers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;halt 402, {&#39;Content-Type&#39; =&amp;gt; &#39;text/plain&#39;}, &#39;revenge&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is of course possible to combine a template with &lt;code&gt;halt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;halt erb(:error)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Passing&lt;/h3&gt; &#xA;&lt;p&gt;A route can punt processing to the next matching route using &lt;code&gt;pass&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/guess/:who&#39; do&#xA;  pass unless params[&#39;who&#39;] == &#39;Frank&#39;&#xA;  &#39;You got me!&#39;&#xA;end&#xA;&#xA;get &#39;/guess/*&#39; do&#xA;  &#39;You missed!&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The route block is immediately exited and control continues with the next matching route. If no matching route is found, a 404 is returned.&lt;/p&gt; &#xA;&lt;h3&gt;Triggering Another Route&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes &lt;code&gt;pass&lt;/code&gt; is not what you want, instead, you would like to get the result of calling another route. Simply use &lt;code&gt;call&lt;/code&gt; to achieve this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/foo&#39; do&#xA;  status, headers, body = call env.merge(&#34;PATH_INFO&#34; =&amp;gt; &#39;/bar&#39;)&#xA;  [status, headers, body.map(&amp;amp;:upcase)]&#xA;end&#xA;&#xA;get &#39;/bar&#39; do&#xA;  &#34;bar&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that in the example above, you would ease testing and increase performance by simply moving &lt;code&gt;&#34;bar&#34;&lt;/code&gt; into a helper used by both &lt;code&gt;/foo&lt;/code&gt; and &lt;code&gt;/bar&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want the request to be sent to the same application instance rather than a duplicate, use &lt;code&gt;call!&lt;/code&gt; instead of &lt;code&gt;call&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Check out the Rack specification if you want to learn more about &lt;code&gt;call&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Setting Body, Status Code, and Headers&lt;/h3&gt; &#xA;&lt;p&gt;It is possible and recommended to set the status code and response body with the return value of the route block. However, in some scenarios, you might want to set the body at an arbitrary point in the execution flow. You can do so with the &lt;code&gt;body&lt;/code&gt; helper method. If you do so, you can use that method from thereon to access the body:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/foo&#39; do&#xA;  body &#34;bar&#34;&#xA;end&#xA;&#xA;after do&#xA;  puts body&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also possible to pass a block to &lt;code&gt;body&lt;/code&gt;, which will be executed by the Rack handler (this can be used to implement streaming, &lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#return-values&#34;&gt;see &#34;Return Values&#34;&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Similar to the body, you can also set the status code and headers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/foo&#39; do&#xA;  status 418&#xA;  headers \&#xA;    &#34;Allow&#34;   =&amp;gt; &#34;BREW, POST, GET, PROPFIND, WHEN&#34;,&#xA;    &#34;Refresh&#34; =&amp;gt; &#34;Refresh: 20; https://ietf.org/rfc/rfc2324.txt&#34;&#xA;  body &#34;I&#39;m a teapot!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Like &lt;code&gt;body&lt;/code&gt;, &lt;code&gt;headers&lt;/code&gt; and &lt;code&gt;status&lt;/code&gt; with no arguments can be used to access their current values.&lt;/p&gt; &#xA;&lt;h3&gt;Streaming Responses&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes you want to start sending out data while still generating parts of the response body. In extreme examples, you want to keep sending data until the client closes the connection. You can use the &lt;code&gt;stream&lt;/code&gt; helper to avoid creating your own wrapper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  stream do |out|&#xA;    out &amp;lt;&amp;lt; &#34;It&#39;s gonna be legen -\n&#34;&#xA;    sleep 0.5&#xA;    out &amp;lt;&amp;lt; &#34; (wait for it) \n&#34;&#xA;    sleep 1&#xA;    out &amp;lt;&amp;lt; &#34;- dary!\n&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This allows you to implement streaming APIs, &lt;a href=&#34;https://w3c.github.io/eventsource/&#34;&gt;Server Sent Events&lt;/a&gt;, and can be used as the basis for &lt;a href=&#34;https://en.wikipedia.org/wiki/WebSocket&#34;&gt;WebSockets&lt;/a&gt;. It can also be used to increase throughput if some but not all content depends on a slow resource.&lt;/p&gt; &#xA;&lt;p&gt;Note that the streaming behavior, especially the number of concurrent requests, highly depends on the webserver used to serve the application. Some servers might not even support streaming at all. If the server does not support streaming, the body will be sent all at once after the block passed to &lt;code&gt;stream&lt;/code&gt; finishes executing. Streaming does not work at all with Shotgun.&lt;/p&gt; &#xA;&lt;p&gt;If the optional parameter is set to &lt;code&gt;keep_open&lt;/code&gt;, it will not call &lt;code&gt;close&lt;/code&gt; on the stream object, allowing you to close it at any later point in the execution flow. This only works on evented servers, like Rainbows. Other servers will still close the stream:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config.ru&#xA;require &#39;sinatra/base&#39;&#xA;&#xA;class App &amp;lt; Sinatra::Base&#xA;  connections = []&#xA;&#xA;  get &#39;/subscribe&#39;, provides: &#39;text/event-stream&#39;  do&#xA;    # register a client&#39;s interest in server events&#xA;    stream(:keep_open) do |out|&#xA;      connections &amp;lt;&amp;lt; out&#xA;      # purge dead connections&#xA;      connections.reject!(&amp;amp;:closed?)&#xA;    end&#xA;  end&#xA;&#xA;  post &#39;/&#39; do&#xA;    connections.each do |out|&#xA;      # notify client that a new message has arrived&#xA;      out &amp;lt;&amp;lt; &#34;data: #{params[:msg]}\n\n&#34;&#xA;&#xA;      #&amp;nbsp;indicate client to connect again&#xA;      out.close&#xA;    end&#xA;&#xA;    204 # response without entity body&#xA;  end&#xA;end&#xA;&#xA;run App&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# rainbows.conf&#xA;Rainbows! do&#xA;  use :EventMachine&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;rainbows -c rainbows.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s also possible for the client to close the connection when trying to write to the socket. Because of this, it&#39;s recommended to check &lt;code&gt;out.closed?&lt;/code&gt; before trying to write.&lt;/p&gt; &#xA;&lt;h3&gt;Logging&lt;/h3&gt; &#xA;&lt;p&gt;In the request scope, the &lt;code&gt;logger&lt;/code&gt; helper exposes a &lt;code&gt;Logger&lt;/code&gt; instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  logger.info &#34;loading data&#34;&#xA;  # ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This logger will automatically take your Rack handler&#39;s logging settings into account. If logging is disabled, this method will return a dummy object, so you do not have to worry about it in your routes and filters.&lt;/p&gt; &#xA;&lt;p&gt;Note that logging is only enabled for &lt;code&gt;Sinatra::Application&lt;/code&gt; by default, so if you inherit from &lt;code&gt;Sinatra::Base&lt;/code&gt;, you probably want to enable it yourself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyApp &amp;lt; Sinatra::Base&#xA;  configure :production, :development do&#xA;    enable :logging&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To avoid any logging middleware to be set up, set the &lt;code&gt;logging&lt;/code&gt; option to &lt;code&gt;nil&lt;/code&gt;. However, keep in mind that &lt;code&gt;logger&lt;/code&gt; will in that case return &lt;code&gt;nil&lt;/code&gt;. A common use case is when you want to set your own logger. Sinatra will use whatever it will find in &lt;code&gt;env[&#39;rack.logger&#39;]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Mime Types&lt;/h3&gt; &#xA;&lt;p&gt;When using &lt;code&gt;send_file&lt;/code&gt; or static files you may have mime types Sinatra doesn&#39;t understand. Use &lt;code&gt;mime_type&lt;/code&gt; to register them by file extension:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;configure do&#xA;  mime_type :foo, &#39;text/foo&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use it with the &lt;code&gt;content_type&lt;/code&gt; helper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  content_type :foo&#xA;  &#34;foo foo foo&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generating URLs&lt;/h3&gt; &#xA;&lt;p&gt;For generating URLs you should use the &lt;code&gt;url&lt;/code&gt; helper method, for instance, in Haml:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;%a{:href =&amp;gt; url(&#39;/foo&#39;)} foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It takes reverse proxies and Rack routers into account - if present.&lt;/p&gt; &#xA;&lt;p&gt;This method is also aliased to &lt;code&gt;to&lt;/code&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#browser-redirect&#34;&gt;below&lt;/a&gt; for an example).&lt;/p&gt; &#xA;&lt;h3&gt;Browser Redirect&lt;/h3&gt; &#xA;&lt;p&gt;You can trigger a browser redirect with the &lt;code&gt;redirect&lt;/code&gt; helper method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/foo&#39; do&#xA;  redirect to(&#39;/bar&#39;)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any additional parameters are handled like arguments passed to &lt;code&gt;halt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;redirect to(&#39;/bar&#39;), 303&#xA;redirect &#39;http://www.google.com/&#39;, &#39;wrong place, buddy&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also easily redirect back to the page the user came from with &lt;code&gt;redirect back&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/foo&#39; do&#xA;  &#34;&amp;lt;a href=&#39;/bar&#39;&amp;gt;do something&amp;lt;/a&amp;gt;&#34;&#xA;end&#xA;&#xA;get &#39;/bar&#39; do&#xA;  do_something&#xA;  redirect back&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To pass arguments with a redirect, either add them to the query:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;redirect to(&#39;/bar?sum=42&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use a session:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;enable :sessions&#xA;&#xA;get &#39;/foo&#39; do&#xA;  session[:secret] = &#39;foo&#39;&#xA;  redirect to(&#39;/bar&#39;)&#xA;end&#xA;&#xA;get &#39;/bar&#39; do&#xA;  session[:secret]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cache Control&lt;/h3&gt; &#xA;&lt;p&gt;Setting your headers correctly is the foundation for proper HTTP caching.&lt;/p&gt; &#xA;&lt;p&gt;You can easily set the Cache-Control header like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  cache_control :public&#xA;  &#34;cache it!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pro tip: Set up caching in a before filter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;before do&#xA;  cache_control :public, :must_revalidate, :max_age =&amp;gt; 60&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using the &lt;code&gt;expires&lt;/code&gt; helper to set the corresponding header, &lt;code&gt;Cache-Control&lt;/code&gt; will be set automatically for you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;before do&#xA;  expires 500, :public, :must_revalidate&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To properly use caches, you should consider using &lt;code&gt;etag&lt;/code&gt; or &lt;code&gt;last_modified&lt;/code&gt;. It is recommended to call those helpers &lt;em&gt;before&lt;/em&gt; doing any heavy lifting, as they will immediately flush a response if the client already has the current version in its cache:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#34;/article/:id&#34; do&#xA;  @article = Article.find params[&#39;id&#39;]&#xA;  last_modified @article.updated_at&#xA;  etag @article.sha1&#xA;  erb :article&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also possible to use a &lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP_ETag#Strong_and_weak_validation&#34;&gt;weak ETag&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;etag @article.sha1, :weak&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These helpers will not do any caching for you, but rather feed the necessary information to your cache. If you are looking for a quick reverse-proxy caching solution, try &lt;a href=&#34;https://github.com/rtomayko/rack-cache#readme&#34;&gt;rack-cache&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#34;rack/cache&#34;&#xA;require &#34;sinatra&#34;&#xA;&#xA;use Rack::Cache&#xA;&#xA;get &#39;/&#39; do&#xA;  cache_control :public, :max_age =&amp;gt; 36000&#xA;  sleep 5&#xA;  &#34;hello&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;:static_cache_control&lt;/code&gt; setting (see &lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#cache-control&#34;&gt;below&lt;/a&gt;) to add &lt;code&gt;Cache-Control&lt;/code&gt; header info to static files.&lt;/p&gt; &#xA;&lt;p&gt;According to RFC 2616, your application should behave differently if the If-Match or If-None-Match header is set to &lt;code&gt;*&lt;/code&gt;, depending on whether the resource requested is already in existence. Sinatra assumes resources for safe (like get) and idempotent (like put) requests are already in existence, whereas other resources (for instance post requests) are treated as new resources. You can change this behavior by passing in a &lt;code&gt;:new_resource&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/create&#39; do&#xA;  etag &#39;&#39;, :new_resource =&amp;gt; true&#xA;  Article.create&#xA;  erb :new_article&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you still want to use a weak ETag, pass in a &lt;code&gt;:kind&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;etag &#39;&#39;, :new_resource =&amp;gt; true, :kind =&amp;gt; :weak&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sending Files&lt;/h3&gt; &#xA;&lt;p&gt;To return the contents of a file as the response, you can use the &lt;code&gt;send_file&lt;/code&gt; helper method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  send_file &#39;foo.png&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It also takes options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;send_file &#39;foo.png&#39;, :type =&amp;gt; :jpg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The options are:&lt;/p&gt; &#xA;&lt;dl&gt; &#xA; &lt;dt&gt;&#xA;  filename&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  File name to be used in the response, defaults to the real file name.&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  last_modified&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  Value for Last-Modified header, defaults to the file&#39;s mtime.&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  type&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  Value for Content-Type header, guessed from the file extension if missing.&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  disposition&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Value for Content-Disposition header, possible values: &#xA;  &lt;tt&gt;nil&lt;/tt&gt; (default), &#xA;  &lt;tt&gt;:attachment&lt;/tt&gt; and &#xA;  &lt;tt&gt;:inline&lt;/tt&gt; &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  length&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  Value for Content-Length header, defaults to file size.&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  status&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Status code to be sent. Useful when sending a static file as an error page. If supported by the Rack handler, other means than streaming from the Ruby process will be used. If you use this helper method, Sinatra will automatically handle range requests. &#xA; &lt;/dd&gt; &#xA;&lt;/dl&gt; &#xA;&lt;h3&gt;Accessing the Request Object&lt;/h3&gt; &#xA;&lt;p&gt;The incoming request object can be accessed from request level (filter, routes, error handlers) through the &lt;code&gt;request&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app running on http://example.com/example&#xA;get &#39;/foo&#39; do&#xA;  t = %w[text/css text/html application/javascript]&#xA;  request.accept              # [&#39;text/html&#39;, &#39;*/*&#39;]&#xA;  request.accept? &#39;text/xml&#39;  # true&#xA;  request.preferred_type(t)   # &#39;text/html&#39;&#xA;  request.body                # request body sent by the client (see below)&#xA;  request.scheme              # &#34;http&#34;&#xA;  request.script_name         # &#34;/example&#34;&#xA;  request.path_info           # &#34;/foo&#34;&#xA;  request.port                # 80&#xA;  request.request_method      # &#34;GET&#34;&#xA;  request.query_string        # &#34;&#34;&#xA;  request.content_length      # length of request.body&#xA;  request.media_type          # media type of request.body&#xA;  request.host                # &#34;example.com&#34;&#xA;  request.get?                # true (similar methods for other verbs)&#xA;  request.form_data?          # false&#xA;  request[&#34;some_param&#34;]       # value of some_param parameter. [] is a shortcut to the params hash.&#xA;  request.referrer            # the referrer of the client or &#39;/&#39;&#xA;  request.user_agent          # user agent (used by :agent condition)&#xA;  request.cookies             # hash of browser cookies&#xA;  request.xhr?                # is this an ajax request?&#xA;  request.url                 # &#34;http://example.com/example/foo&#34;&#xA;  request.path                # &#34;/example/foo&#34;&#xA;  request.ip                  # client IP address&#xA;  request.secure?             # false (would be true over ssl)&#xA;  request.forwarded?          # true (if running behind a reverse proxy)&#xA;  request.env                 # raw env hash handed in by Rack&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some options, like &lt;code&gt;script_name&lt;/code&gt; or &lt;code&gt;path_info&lt;/code&gt;, can also be written:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;before { request.path_info = &#34;/&#34; }&#xA;&#xA;get &#34;/&#34; do&#xA;  &#34;all requests end up here&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;request.body&lt;/code&gt; is an IO or StringIO object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;post &#34;/api&#34; do&#xA;  request.body.rewind  # in case someone already read it&#xA;  data = JSON.parse request.body.read&#xA;  &#34;Hello #{data[&#39;name&#39;]}!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Attachments&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;attachment&lt;/code&gt; helper to tell the browser the response should be stored on disk rather than displayed in the browser:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  attachment&#xA;  &#34;store it!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also pass it a file name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  attachment &#34;info.txt&#34;&#xA;  &#34;store it!&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dealing with Date and Time&lt;/h3&gt; &#xA;&lt;p&gt;Sinatra offers a &lt;code&gt;time_for&lt;/code&gt; helper method that generates a Time object from the given value. It is also able to convert &lt;code&gt;DateTime&lt;/code&gt;, &lt;code&gt;Date&lt;/code&gt; and similar classes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  pass if Time.now &amp;gt; time_for(&#39;Dec 23, 2016&#39;)&#xA;  &#34;still time&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method is used internally by &lt;code&gt;expires&lt;/code&gt;, &lt;code&gt;last_modified&lt;/code&gt; and akin. You can therefore easily extend the behavior of those methods by overriding &lt;code&gt;time_for&lt;/code&gt; in your application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;helpers do&#xA;  def time_for(value)&#xA;    case value&#xA;    when :yesterday then Time.now - 24*60*60&#xA;    when :tomorrow  then Time.now + 24*60*60&#xA;    else super&#xA;    end&#xA;  end&#xA;end&#xA;&#xA;get &#39;/&#39; do&#xA;  last_modified :yesterday&#xA;  expires :tomorrow&#xA;  &#34;hello&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Looking Up Template Files&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;find_template&lt;/code&gt; helper is used to find template files for rendering:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;find_template settings.views, &#39;foo&#39;, Tilt[:haml] do |file|&#xA;  puts &#34;could be #{file}&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is not really useful. But it is useful that you can actually override this method to hook in your own lookup mechanism. For instance, if you want to be able to use more than one view directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :views, [&#39;views&#39;, &#39;templates&#39;]&#xA;&#xA;helpers do&#xA;  def find_template(views, name, engine, &amp;amp;block)&#xA;    Array(views).each { |v| super(v, name, engine, &amp;amp;block) }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another example would be using different directories for different engines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :views, :haml =&amp;gt; &#39;templates&#39;, :default =&amp;gt; &#39;views&#39;&#xA;&#xA;helpers do&#xA;  def find_template(views, name, engine, &amp;amp;block)&#xA;    _, folder = views.detect { |k,v| engine == Tilt[k] }&#xA;    folder ||= views[:default]&#xA;    super(folder, name, engine, &amp;amp;block)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also easily wrap this up in an extension and share it with others!&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;find_template&lt;/code&gt; does not check if the file really exists but rather calls the given block for all possible paths. This is not a performance issue, since &lt;code&gt;render&lt;/code&gt; will use &lt;code&gt;break&lt;/code&gt; as soon as a file is found. Also, template locations (and content) will be cached if you are not running in development mode. You should keep that in mind if you write a really crazy method.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Run once, at startup, in any environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;configure do&#xA;  # setting one option&#xA;  set :option, &#39;value&#39;&#xA;&#xA;  # setting multiple options&#xA;  set :a =&amp;gt; 1, :b =&amp;gt; 2&#xA;&#xA;  # same as `set :option, true`&#xA;  enable :option&#xA;&#xA;  # same as `set :option, false`&#xA;  disable :option&#xA;&#xA;  # you can also have dynamic settings with blocks&#xA;  set(:css_dir) { File.join(views, &#39;css&#39;) }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run only when the environment (&lt;code&gt;APP_ENV&lt;/code&gt; environment variable) is set to &lt;code&gt;:production&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;configure :production do&#xA;  ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run when the environment is set to either &lt;code&gt;:production&lt;/code&gt; or &lt;code&gt;:test&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;configure :production, :test do&#xA;  ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can access those options via &lt;code&gt;settings&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;configure do&#xA;  set :foo, &#39;bar&#39;&#xA;end&#xA;&#xA;get &#39;/&#39; do&#xA;  settings.foo? # =&amp;gt; true&#xA;  settings.foo  # =&amp;gt; &#39;bar&#39;&#xA;  ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring attack protection&lt;/h3&gt; &#xA;&lt;p&gt;Sinatra is using &lt;a href=&#34;https://github.com/sinatra/sinatra/tree/master/rack-protection#readme&#34;&gt;Rack::Protection&lt;/a&gt; to defend your application against common, opportunistic attacks. You can easily disable this behavior (which will open up your application to tons of common vulnerabilities):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;disable :protection&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To skip a single defense layer, set &lt;code&gt;protection&lt;/code&gt; to an options hash:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :protection, :except =&amp;gt; :path_traversal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also hand in an array in order to disable a list of protections:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :protection, :except =&amp;gt; [:path_traversal, :session_hijacking]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, Sinatra will only set up session based protection if &lt;code&gt;:sessions&lt;/code&gt; have been enabled. See &#39;&lt;a href=&#34;https://raw.githubusercontent.com/sinatra/sinatra/master/#using-sessions&#34;&gt;Using Sessions&lt;/a&gt;&#39;. Sometimes you may want to set up sessions &#34;outside&#34; of the Sinatra app, such as in the config.ru or with a separate &lt;code&gt;Rack::Builder&lt;/code&gt; instance. In that case, you can still set up session based protection by passing the &lt;code&gt;:session&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :protection, :session =&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Available Settings&lt;/h3&gt; &#xA;&lt;dl&gt; &#xA; &lt;dt&gt;&#xA;  absolute_redirects&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   If disabled, Sinatra will allow relative redirects, however, Sinatra will no longer conform with RFC 2616 (HTTP 1.1), which only allows absolute redirects. &#xA; &lt;/dd&gt; &#xA; &lt;dd&gt;&#xA;   Enable if your app is running behind a reverse proxy that has not been set up properly. Note that the &#xA;  &lt;tt&gt;url&lt;/tt&gt; helper will still produce absolute URLs, unless you pass in &#xA;  &lt;tt&gt;false&lt;/tt&gt; as the second parameter. &#xA; &lt;/dd&gt; &#xA; &lt;dd&gt;&#xA;  Disabled by default.&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  add_charset&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Mime types the &#xA;  &lt;tt&gt;content_type&lt;/tt&gt; helper will automatically add the charset info to. You should add to it rather than overriding this option: &#xA;  &lt;tt&gt;settings.add_charset &amp;lt;&amp;lt; &#34;application/foobar&#34;&lt;/tt&gt; &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  app_file&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Path to the main application file, used to detect project root, views and public folder and inline templates. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  bind&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   IP address to bind to (default: &#xA;  &lt;tt&gt;0.0.0.0&lt;/tt&gt; &#xA;  &lt;em&gt;or&lt;/em&gt; &#xA;  &lt;tt&gt;localhost&lt;/tt&gt; if your `environment` is set to development). Only used for built-in server. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  default_content_type&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Content-Type to assume if unknown (defaults to &#xA;  &lt;tt&gt;&#34;text/html&#34;&lt;/tt&gt;). Set to &#xA;  &lt;tt&gt;nil&lt;/tt&gt; to not set a default Content-Type on every response; when configured so, you must set the Content-Type manually when emitting content or the user-agent will have to sniff it (or, if &#xA;  &lt;tt&gt;nosniff&lt;/tt&gt; is enabled in Rack::Protection::XSSHeader, assume &#xA;  &lt;tt&gt;application/octet-stream&lt;/tt&gt;). &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  default_encoding&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  Encoding to assume if unknown (defaults to &#xA;  &lt;tt&gt;&#34;utf-8&#34;&lt;/tt&gt;).&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  dump_errors&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  Display errors in the log. Enabled by default unless environment is &#34;test&#34;.&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  environment&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Current environment. Defaults to &#xA;  &lt;tt&gt;ENV[&#39;APP_ENV&#39;]&lt;/tt&gt;, or &#xA;  &lt;tt&gt;&#34;development&#34;&lt;/tt&gt; if not available. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  logging&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  Use the logger.&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  lock&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Places a lock around every request, only running processing on request per Ruby process concurrently. &#xA; &lt;/dd&gt; &#xA; &lt;dd&gt;&#xA;  Enabled if your app is not thread-safe. Disabled by default.&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  method_override&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Use &#xA;  &lt;tt&gt;_method&lt;/tt&gt; magic to allow put/delete forms in browsers that don&#39;t support it. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  mustermann_opts&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   A default hash of options to pass to Mustermann.new when compiling routing paths. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  port&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  Port to listen on. Only used for built-in server.&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  prefixed_redirects&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Whether or not to insert &#xA;  &lt;tt&gt;request.script_name&lt;/tt&gt; into redirects if no absolute path is given. That way &#xA;  &lt;tt&gt;redirect &#39;/foo&#39;&lt;/tt&gt; would behave like &#xA;  &lt;tt&gt;redirect to(&#39;/foo&#39;)&lt;/tt&gt;. Disabled by default. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  protection&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Whether or not to enable web attack protections. See protection section above. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  public_dir&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  Alias for &#xA;  &lt;tt&gt;public_folder&lt;/tt&gt;. See below.&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  public_folder&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Path to the folder public files are served from. Only used if static file serving is enabled (see &#xA;  &lt;tt&gt;static&lt;/tt&gt; setting below). Inferred from &#xA;  &lt;tt&gt;app_file&lt;/tt&gt; setting if not set. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  quiet&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Disables logs generated by Sinatra&#39;s start and stop commands. &#xA;  &lt;tt&gt;false&lt;/tt&gt; by default. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  reload_templates&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Whether or not to reload templates between requests. Enabled in development mode. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  root&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Path to project root folder. Inferred from &#xA;  &lt;tt&gt;app_file&lt;/tt&gt; setting if not set. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  raise_errors&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Raise exceptions (will stop application). Enabled by default when &#xA;  &lt;tt&gt;environment&lt;/tt&gt; is set to &#xA;  &lt;tt&gt;&#34;test&#34;&lt;/tt&gt;, disabled otherwise. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  run&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   If enabled, Sinatra will handle starting the web server. Do not enable if using rackup or other means. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  running&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  Is the built-in server running now? Do not change this setting!&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  server&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Server or list of servers to use for built-in server. Order indicates priority, default depends on Ruby implementation. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  server_settings&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   If you are using a WEBrick web server, presumably for your development environment, you can pass a hash of options to &#xA;  &lt;tt&gt;server_settings&lt;/tt&gt;, such as &#xA;  &lt;tt&gt;SSLEnable&lt;/tt&gt; or &#xA;  &lt;tt&gt;SSLVerifyClient&lt;/tt&gt;. However, web servers such as Puma do not support this, so you can set &#xA;  &lt;tt&gt;server_settings&lt;/tt&gt; by defining it as a method when you call &#xA;  &lt;tt&gt;configure&lt;/tt&gt;. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  sessions&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Enable cookie-based sessions support using &#xA;  &lt;tt&gt;Rack::Session::Cookie&lt;/tt&gt;. See &#39;Using Sessions&#39; section for more information. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  session_store&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   The Rack session middleware used. Defaults to &#xA;  &lt;tt&gt;Rack::Session::Cookie&lt;/tt&gt;. See &#39;Using Sessions&#39; section for more information. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  show_exceptions&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Show a stack trace in the browser when an exception happens. Enabled by default when &#xA;  &lt;tt&gt;environment&lt;/tt&gt; is set to &#xA;  &lt;tt&gt;&#34;development&#34;&lt;/tt&gt;, disabled otherwise. &#xA; &lt;/dd&gt; &#xA; &lt;dd&gt;&#xA;   Can also be set to &#xA;  &lt;tt&gt;:after_handler&lt;/tt&gt; to trigger app-specified error handling before showing a stack trace in the browser. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  static&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  Whether Sinatra should handle serving static files.&#xA; &lt;/dd&gt; &#xA; &lt;dd&gt;&#xA;  Disable when using a server able to do this on its own.&#xA; &lt;/dd&gt; &#xA; &lt;dd&gt;&#xA;  Disabling will boost performance.&#xA; &lt;/dd&gt; &#xA; &lt;dd&gt;&#xA;   Enabled by default in classic style, disabled for modular apps. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  static_cache_control&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   When Sinatra is serving static files, set this to add &#xA;  &lt;tt&gt;Cache-Control&lt;/tt&gt; headers to the responses. Uses the &#xA;  &lt;tt&gt;cache_control&lt;/tt&gt; helper. Disabled by default. &#xA; &lt;/dd&gt; &#xA; &lt;dd&gt;&#xA;   Use an explicit array when setting multiple values: &#xA;  &lt;tt&gt;set :static_cache_control, [:public, :max_age =&amp;gt; 300]&lt;/tt&gt; &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  threaded&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   If set to &#xA;  &lt;tt&gt;true&lt;/tt&gt;, will tell server to use &#xA;  &lt;tt&gt;EventMachine.defer&lt;/tt&gt; for processing the request. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  traps&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  Whether Sinatra should handle system signals.&#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  views&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Path to the views folder. Inferred from &#xA;  &lt;tt&gt;app_file&lt;/tt&gt; setting if not set. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  x_cascade&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Whether or not to set the X-Cascade header if no route matches. Defaults to &#xA;  &lt;tt&gt;true&lt;/tt&gt;. &#xA; &lt;/dd&gt; &#xA;&lt;/dl&gt; &#xA;&lt;h2&gt;Environments&lt;/h2&gt; &#xA;&lt;p&gt;There are three predefined &lt;code&gt;environments&lt;/code&gt;: &lt;code&gt;&#34;development&#34;&lt;/code&gt;, &lt;code&gt;&#34;production&#34;&lt;/code&gt; and &lt;code&gt;&#34;test&#34;&lt;/code&gt;. Environments can be set through the &lt;code&gt;APP_ENV&lt;/code&gt; environment variable. The default value is &lt;code&gt;&#34;development&#34;&lt;/code&gt;. In the &lt;code&gt;&#34;development&#34;&lt;/code&gt; environment all templates are reloaded between requests, and special &lt;code&gt;not_found&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; handlers display stack traces in your browser. In the &lt;code&gt;&#34;production&#34;&lt;/code&gt; and &lt;code&gt;&#34;test&#34;&lt;/code&gt; environments, templates are cached by default.&lt;/p&gt; &#xA;&lt;p&gt;To run different environments, set the &lt;code&gt;APP_ENV&lt;/code&gt; environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;APP_ENV=production ruby my_app.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use predefined methods: &lt;code&gt;development?&lt;/code&gt;, &lt;code&gt;test?&lt;/code&gt; and &lt;code&gt;production?&lt;/code&gt; to check the current environment setting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  if settings.development?&#xA;    &#34;development!&#34;&#xA;  else&#xA;    &#34;not development!&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Error Handling&lt;/h2&gt; &#xA;&lt;p&gt;Error handlers run within the same context as routes and before filters, which means you get all the goodies it has to offer, like &lt;code&gt;haml&lt;/code&gt;, &lt;code&gt;erb&lt;/code&gt;, &lt;code&gt;halt&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;h3&gt;Not Found&lt;/h3&gt; &#xA;&lt;p&gt;When a &lt;code&gt;Sinatra::NotFound&lt;/code&gt; exception is raised, or the response&#39;s status code is 404, the &lt;code&gt;not_found&lt;/code&gt; handler is invoked:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;not_found do&#xA;  &#39;This is nowhere to be found.&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Error&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;error&lt;/code&gt; handler is invoked any time an exception is raised from a route block or a filter. But note in development it will only run if you set the show exceptions option to &lt;code&gt;:after_handler&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;set :show_exceptions, :after_handler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The exception object can be obtained from the &lt;code&gt;sinatra.error&lt;/code&gt; Rack variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;error do&#xA;  &#39;Sorry there was a nasty error - &#39; + env[&#39;sinatra.error&#39;].message&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Custom errors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;error MyCustomError do&#xA;  &#39;So what happened was...&#39; + env[&#39;sinatra.error&#39;].message&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, if this happens:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/&#39; do&#xA;  raise MyCustomError, &#39;something bad&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You get this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;So what happened was... something bad&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can install an error handler for a status code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;error 403 do&#xA;  &#39;Access forbidden&#39;&#xA;end&#xA;&#xA;get &#39;/secret&#39; do&#xA;  403&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or a range:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;error 400..510 do&#xA;  &#39;Boom&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sinatra installs special &lt;code&gt;not_found&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; handlers when running under the development environment to display nice stack traces and additional debugging information in your browser.&lt;/p&gt; &#xA;&lt;h2&gt;Rack Middleware&lt;/h2&gt; &#xA;&lt;p&gt;Sinatra rides on &lt;a href=&#34;https://rack.github.io/&#34;&gt;Rack&lt;/a&gt;, a minimal standard interface for Ruby web frameworks. One of Rack&#39;s most interesting capabilities for application developers is support for &#34;middleware&#34; -- components that sit between the server and your application monitoring and/or manipulating the HTTP request/response to provide various types of common functionality.&lt;/p&gt; &#xA;&lt;p&gt;Sinatra makes building Rack middleware pipelines a cinch via a top-level &lt;code&gt;use&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;sinatra&#39;&#xA;require &#39;my_custom_middleware&#39;&#xA;&#xA;use Rack::Lint&#xA;use MyCustomMiddleware&#xA;&#xA;get &#39;/hello&#39; do&#xA;  &#39;Hello World&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The semantics of &lt;code&gt;use&lt;/code&gt; are identical to those defined for the &lt;a href=&#34;http://www.rubydoc.info/github/rack/rack/master/Rack/Builder&#34;&gt;Rack::Builder&lt;/a&gt; DSL (most frequently used from rackup files). For example, the &lt;code&gt;use&lt;/code&gt; method accepts multiple/variable args as well as blocks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use Rack::Auth::Basic do |username, password|&#xA;  username == &#39;admin&#39; &amp;amp;&amp;amp; password == &#39;secret&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Rack is distributed with a variety of standard middleware for logging, debugging, URL routing, authentication, and session handling. Sinatra uses many of these components automatically based on configuration so you typically don&#39;t have to &lt;code&gt;use&lt;/code&gt; them explicitly.&lt;/p&gt; &#xA;&lt;p&gt;You can find useful middleware in &lt;a href=&#34;https://github.com/rack/rack/tree/master/lib/rack&#34;&gt;rack&lt;/a&gt;, &lt;a href=&#34;https://github.com/rack/rack-contrib#readme&#34;&gt;rack-contrib&lt;/a&gt;, or in the &lt;a href=&#34;https://github.com/rack/rack/wiki/List-of-Middleware&#34;&gt;Rack wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Sinatra tests can be written using any Rack-based testing library or framework. &lt;a href=&#34;http://www.rubydoc.info/github/brynary/rack-test/master/frames&#34;&gt;Rack::Test&lt;/a&gt; is recommended:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;my_sinatra_app&#39;&#xA;require &#39;minitest/autorun&#39;&#xA;require &#39;rack/test&#39;&#xA;&#xA;class MyAppTest &amp;lt; Minitest::Test&#xA;  include Rack::Test::Methods&#xA;&#xA;  def app&#xA;    Sinatra::Application&#xA;  end&#xA;&#xA;  def test_my_default&#xA;    get &#39;/&#39;&#xA;    assert_equal &#39;Hello World!&#39;, last_response.body&#xA;  end&#xA;&#xA;  def test_with_params&#xA;    get &#39;/meet&#39;, :name =&amp;gt; &#39;Frank&#39;&#xA;    assert_equal &#39;Hello Frank!&#39;, last_response.body&#xA;  end&#xA;&#xA;  def test_with_user_agent&#xA;    get &#39;/&#39;, {}, &#39;HTTP_USER_AGENT&#39; =&amp;gt; &#39;Songbird&#39;&#xA;    assert_equal &#34;You&#39;re using Songbird!&#34;, last_response.body&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: If you are using Sinatra in the modular style, replace &lt;code&gt;Sinatra::Application&lt;/code&gt; above with the class name of your app.&lt;/p&gt; &#xA;&lt;h2&gt;Sinatra::Base - Middleware, Libraries, and Modular Apps&lt;/h2&gt; &#xA;&lt;p&gt;Defining your app at the top-level works well for micro-apps but has considerable drawbacks when building reusable components such as Rack middleware, Rails metal, simple libraries with a server component, or even Sinatra extensions. The top-level assumes a micro-app style configuration (e.g., a single application file, &lt;code&gt;./public&lt;/code&gt; and &lt;code&gt;./views&lt;/code&gt; directories, logging, exception detail page, etc.). That&#39;s where &lt;code&gt;Sinatra::Base&lt;/code&gt; comes into play:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;sinatra/base&#39;&#xA;&#xA;class MyApp &amp;lt; Sinatra::Base&#xA;  set :sessions, true&#xA;  set :foo, &#39;bar&#39;&#xA;&#xA;  get &#39;/&#39; do&#xA;    &#39;Hello world!&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The methods available to &lt;code&gt;Sinatra::Base&lt;/code&gt; subclasses are exactly the same as those available via the top-level DSL. Most top-level apps can be converted to &lt;code&gt;Sinatra::Base&lt;/code&gt; components with two modifications:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Your file should require &lt;code&gt;sinatra/base&lt;/code&gt; instead of &lt;code&gt;sinatra&lt;/code&gt;; otherwise, all of Sinatra&#39;s DSL methods are imported into the main namespace.&lt;/li&gt; &#xA; &lt;li&gt;Put your app&#39;s routes, error handlers, filters, and options in a subclass of &lt;code&gt;Sinatra::Base&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;Sinatra::Base&lt;/code&gt; is a blank slate. Most options are disabled by default, including the built-in server. See &lt;a href=&#34;http://www.sinatrarb.com/configuration.html&#34;&gt;Configuring Settings&lt;/a&gt; for details on available options and their behavior. If you want behavior more similar to when you define your app at the top level (also known as Classic style), you can subclass &lt;code&gt;Sinatra::Application&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;sinatra/base&#39;&#xA;&#xA;class MyApp &amp;lt; Sinatra::Application&#xA;  get &#39;/&#39; do&#xA;    &#39;Hello world!&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Modular vs. Classic Style&lt;/h3&gt; &#xA;&lt;p&gt;Contrary to common belief, there is nothing wrong with the classic style. If it suits your application, you do not have to switch to a modular application.&lt;/p&gt; &#xA;&lt;p&gt;The main disadvantage of using the classic style rather than the modular style is that you will only have one Sinatra application per Ruby process. If you plan to use more than one, switch to the modular style. There is no reason you cannot mix the modular and classic styles.&lt;/p&gt; &#xA;&lt;p&gt;If switching from one style to the other, you should be aware of slightly different default settings:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Setting&lt;/th&gt; &#xA;   &lt;th&gt;Classic&lt;/th&gt; &#xA;   &lt;th&gt;Modular&lt;/th&gt; &#xA;   &lt;th&gt;Modular&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;app_file&lt;/td&gt; &#xA;   &lt;td&gt;file loading sinatra&lt;/td&gt; &#xA;   &lt;td&gt;file subclassing Sinatra::Base&lt;/td&gt; &#xA;   &lt;td&gt;file subclassing Sinatra::Application&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;run&lt;/td&gt; &#xA;   &lt;td&gt;$0 == app_file&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;logging&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;method_override&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;inline_templates&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;static&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;File.exist?(public_folder)&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Serving a Modular Application&lt;/h3&gt; &#xA;&lt;p&gt;There are two common options for starting a modular app, actively starting with &lt;code&gt;run!&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# my_app.rb&#xA;require &#39;sinatra/base&#39;&#xA;&#xA;class MyApp &amp;lt; Sinatra::Base&#xA;  # ... app code here ...&#xA;&#xA;  # start the server if ruby file executed directly&#xA;  run! if app_file == $0&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ruby my_app.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with a &lt;code&gt;config.ru&lt;/code&gt; file, which allows using any Rack handler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config.ru (run with rackup)&#xA;require &#39;./my_app&#39;&#xA;run MyApp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;rackup -p 4567&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using a Classic Style Application with a config.ru&lt;/h3&gt; &#xA;&lt;p&gt;Write your app file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app.rb&#xA;require &#39;sinatra&#39;&#xA;&#xA;get &#39;/&#39; do&#xA;  &#39;Hello world!&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And a corresponding &lt;code&gt;config.ru&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;./app&#39;&#xA;run Sinatra::Application&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;When to use a config.ru?&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;code&gt;config.ru&lt;/code&gt; file is recommended if:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You want to deploy with a different Rack handler (Passenger, Unicorn, Heroku, ...).&lt;/li&gt; &#xA; &lt;li&gt;You want to use more than one subclass of &lt;code&gt;Sinatra::Base&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You want to use Sinatra only for middleware, and not as an endpoint.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;There is no need to switch to a &lt;code&gt;config.ru&lt;/code&gt; simply because you switched to the modular style, and you don&#39;t have to use the modular style for running with a &lt;code&gt;config.ru&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Using Sinatra as Middleware&lt;/h3&gt; &#xA;&lt;p&gt;Not only is Sinatra able to use other Rack middleware, any Sinatra application can, in turn, be added in front of any Rack endpoint as middleware itself. This endpoint could be another Sinatra application, or any other Rack-based application (Rails/Hanami/Roda/...):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;sinatra/base&#39;&#xA;&#xA;class LoginScreen &amp;lt; Sinatra::Base&#xA;  enable :sessions&#xA;&#xA;  get(&#39;/login&#39;) { haml :login }&#xA;&#xA;  post(&#39;/login&#39;) do&#xA;    if params[&#39;name&#39;] == &#39;admin&#39; &amp;amp;&amp;amp; params[&#39;password&#39;] == &#39;admin&#39;&#xA;      session[&#39;user_name&#39;] = params[&#39;name&#39;]&#xA;    else&#xA;      redirect &#39;/login&#39;&#xA;    end&#xA;  end&#xA;end&#xA;&#xA;class MyApp &amp;lt; Sinatra::Base&#xA;  # middleware will run before filters&#xA;  use LoginScreen&#xA;&#xA;  before do&#xA;    unless session[&#39;user_name&#39;]&#xA;      halt &#34;Access denied, please &amp;lt;a href=&#39;/login&#39;&amp;gt;login&amp;lt;/a&amp;gt;.&#34;&#xA;    end&#xA;  end&#xA;&#xA;  get(&#39;/&#39;) { &#34;Hello #{session[&#39;user_name&#39;]}.&#34; }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dynamic Application Creation&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes you want to create new applications at runtime without having to assign them to a constant. You can do this with &lt;code&gt;Sinatra.new&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;sinatra/base&#39;&#xA;my_app = Sinatra.new { get(&#39;/&#39;) { &#34;hi&#34; } }&#xA;my_app.run!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It takes the application to inherit from as an optional argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config.ru (run with rackup)&#xA;require &#39;sinatra/base&#39;&#xA;&#xA;controller = Sinatra.new do&#xA;  enable :logging&#xA;  helpers MyHelpers&#xA;end&#xA;&#xA;map(&#39;/a&#39;) do&#xA;  run Sinatra.new(controller) { get(&#39;/&#39;) { &#39;a&#39; } }&#xA;end&#xA;&#xA;map(&#39;/b&#39;) do&#xA;  run Sinatra.new(controller) { get(&#39;/&#39;) { &#39;b&#39; } }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is especially useful for testing Sinatra extensions or using Sinatra in your own library.&lt;/p&gt; &#xA;&lt;p&gt;This also makes using Sinatra as middleware extremely easy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;sinatra/base&#39;&#xA;&#xA;use Sinatra do&#xA;  get(&#39;/&#39;) { ... }&#xA;end&#xA;&#xA;run RailsProject::Application&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Scopes and Binding&lt;/h2&gt; &#xA;&lt;p&gt;The scope you are currently in determines what methods and variables are available.&lt;/p&gt; &#xA;&lt;h3&gt;Application/Class Scope&lt;/h3&gt; &#xA;&lt;p&gt;Every Sinatra application corresponds to a subclass of &lt;code&gt;Sinatra::Base&lt;/code&gt;. If you are using the top-level DSL (&lt;code&gt;require &#39;sinatra&#39;&lt;/code&gt;), then this class is &lt;code&gt;Sinatra::Application&lt;/code&gt;, otherwise it is the subclass you created explicitly. At the class level, you have methods like &lt;code&gt;get&lt;/code&gt; or &lt;code&gt;before&lt;/code&gt;, but you cannot access the &lt;code&gt;request&lt;/code&gt; or &lt;code&gt;session&lt;/code&gt; objects, as there is only a single application class for all requests.&lt;/p&gt; &#xA;&lt;p&gt;Options created via &lt;code&gt;set&lt;/code&gt; are methods at class level:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyApp &amp;lt; Sinatra::Base&#xA;  # Hey, I&#39;m in the application scope!&#xA;  set :foo, 42&#xA;  foo # =&amp;gt; 42&#xA;&#xA;  get &#39;/foo&#39; do&#xA;    # Hey, I&#39;m no longer in the application scope!&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You have the application scope binding inside:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Your application class body&lt;/li&gt; &#xA; &lt;li&gt;Methods defined by extensions&lt;/li&gt; &#xA; &lt;li&gt;The block passed to &lt;code&gt;helpers&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Procs/blocks used as a value for &lt;code&gt;set&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The block passed to &lt;code&gt;Sinatra.new&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can reach the scope object (the class) like this:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Via the object passed to configure blocks (&lt;code&gt;configure { |c| ... }&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;settings&lt;/code&gt; from within the request scope&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Request/Instance Scope&lt;/h3&gt; &#xA;&lt;p&gt;For every incoming request, a new instance of your application class is created, and all handler blocks run in that scope. From within this scope you can access the &lt;code&gt;request&lt;/code&gt; and &lt;code&gt;session&lt;/code&gt; objects or call rendering methods like &lt;code&gt;erb&lt;/code&gt; or &lt;code&gt;haml&lt;/code&gt;. You can access the application scope from within the request scope via the &lt;code&gt;settings&lt;/code&gt; helper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyApp &amp;lt; Sinatra::Base&#xA;  # Hey, I&#39;m in the application scope!&#xA;  get &#39;/define_route/:name&#39; do&#xA;    # Request scope for &#39;/define_route/:name&#39;&#xA;    @value = 42&#xA;&#xA;    settings.get(&#34;/#{params[&#39;name&#39;]}&#34;) do&#xA;      # Request scope for &#34;/#{params[&#39;name&#39;]}&#34;&#xA;      @value # =&amp;gt; nil (not the same request)&#xA;    end&#xA;&#xA;    &#34;Route defined!&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You have the request scope binding inside:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;get, head, post, put, delete, options, patch, link and unlink blocks&lt;/li&gt; &#xA; &lt;li&gt;before and after filters&lt;/li&gt; &#xA; &lt;li&gt;helper methods&lt;/li&gt; &#xA; &lt;li&gt;templates/views&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Delegation Scope&lt;/h3&gt; &#xA;&lt;p&gt;The delegation scope just forwards methods to the class scope. However, it does not behave exactly like the class scope, as you do not have the class binding. Only methods explicitly marked for delegation are available, and you do not share variables/state with the class scope (read: you have a different &lt;code&gt;self&lt;/code&gt;). You can explicitly add method delegations by calling &lt;code&gt;Sinatra::Delegator.delegate :method_name&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You have the delegate scope binding inside:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The top-level binding, if you did &lt;code&gt;require &#34;sinatra&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;An object extended with the &lt;code&gt;Sinatra::Delegator&lt;/code&gt; mixin&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Have a look at the code for yourself: here&#39;s the &lt;a href=&#34;https://github.com/sinatra/sinatra/raw/ca06364/lib/sinatra/base.rb#L1609-1633&#34;&gt;Sinatra::Delegator mixin&lt;/a&gt; being &lt;a href=&#34;https://github.com/sinatra/sinatra/raw/ca06364/lib/sinatra/main.rb#L28-30&#34;&gt;extending the main object&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Command Line&lt;/h2&gt; &#xA;&lt;p&gt;Sinatra applications can be run directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ruby myapp.rb [-h] [-x] [-q] [-e ENVIRONMENT] [-p PORT] [-o HOST] [-s HANDLER]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Options are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-h # help&#xA;-p # set the port (default is 4567)&#xA;-o # set the host (default is 0.0.0.0)&#xA;-e # set the environment (default is development)&#xA;-s # specify rack server/handler (default is puma)&#xA;-q # turn on quiet mode for server (default is off)&#xA;-x # turn on the mutex lock (default is off)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multi-threading&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Paraphrasing from &lt;a href=&#34;https://stackoverflow.com/a/6282999/5245129&#34;&gt;this StackOverflow answer&lt;/a&gt; by Konstantin&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sinatra doesn&#39;t impose any concurrency model but leaves that to the underlying Rack handler (server) like Puma or WEBrick. Sinatra itself is thread-safe, so there won&#39;t be any problem if the Rack handler uses a threaded model of concurrency. This would mean that when starting the server, you&#39;d have to specify the correct invocation method for the specific Rack handler. The following example is a demonstration of how to start a multi-threaded Rainbows server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config.ru&#xA;&#xA;require &#39;sinatra/base&#39;&#xA;&#xA;class App &amp;lt; Sinatra::Base&#xA;  get &#39;/&#39; do&#xA;    &#34;Hello, World&#34;&#xA;  end&#xA;end&#xA;&#xA;run App&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# rainbows.conf&#xA;&#xA;# Rainbows configurator is based on Unicorn.&#xA;Rainbows! do&#xA;  use :ThreadSpawn&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To start the server, the command would be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;rainbows -c rainbows.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirement&lt;/h2&gt; &#xA;&lt;p&gt;The following Ruby versions are officially supported:&lt;/p&gt; &#xA;&lt;dl&gt; &#xA; &lt;dt&gt;&#xA;  Ruby 2.6&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   2.6 is fully supported and recommended. There are currently no plans to drop official support for it. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  Rubinius&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   Rubinius is officially supported (Rubinius &amp;gt;= 2.x). It is recommended to &#xA;  &lt;tt&gt;gem install puma&lt;/tt&gt;. &#xA; &lt;/dd&gt; &#xA; &lt;dt&gt;&#xA;  JRuby&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;   The latest stable release of JRuby is officially supported. It is not recommended to use C extensions with JRuby. It is recommended to &#xA;  &lt;tt&gt;gem install trinidad&lt;/tt&gt;. &#xA; &lt;/dd&gt; &#xA;&lt;/dl&gt; &#xA;&lt;p&gt;Versions of Ruby before 2.6 are no longer supported as of Sinatra 3.0.0.&lt;/p&gt; &#xA;&lt;p&gt;We also keep an eye on upcoming Ruby versions. Expect upcoming 3.x releases to be fully supported.&lt;/p&gt; &#xA;&lt;p&gt;Sinatra should work on any operating system supported by the chosen Ruby implementation.&lt;/p&gt; &#xA;&lt;p&gt;Running Sinatra on a not officially supported Ruby flavor means that if things only break there we assume it&#39;s not our issue but theirs.&lt;/p&gt; &#xA;&lt;h2&gt;The Bleeding Edge&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to use Sinatra&#39;s latest bleeding-edge code, feel free to run your application against the master branch, it should be rather stable.&lt;/p&gt; &#xA;&lt;p&gt;We also push out prerelease gems from time to time, so you can do a&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;gem install sinatra --pre&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to get some of the latest features.&lt;/p&gt; &#xA;&lt;h3&gt;With Bundler&lt;/h3&gt; &#xA;&lt;p&gt;If you want to run your application with the latest Sinatra, using &lt;a href=&#34;https://bundler.io&#34;&gt;Bundler&lt;/a&gt; is the recommended way.&lt;/p&gt; &#xA;&lt;p&gt;First, install bundler, if you haven&#39;t:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;gem install bundler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, in your project directory, create a &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;source &#39;https://rubygems.org&#39;&#xA;gem &#39;sinatra&#39;, :github =&amp;gt; &#39;sinatra/sinatra&#39;&#xA;&#xA;# other dependencies&#xA;gem &#39;haml&#39;                    # for instance, if you use haml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you will have to list all your application&#39;s dependencies in the &lt;code&gt;Gemfile&lt;/code&gt;. Sinatra&#39;s direct dependencies (Rack and Tilt) will, however, be automatically fetched and added by Bundler.&lt;/p&gt; &#xA;&lt;p&gt;Now you can run your app like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bundle exec ruby myapp.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;Sinatra follows &lt;a href=&#34;https://semver.org/&#34;&gt;Semantic Versioning&lt;/a&gt;, both SemVer and SemVerTag.&lt;/p&gt; &#xA;&lt;h2&gt;Further Reading&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.sinatrarb.com/&#34;&gt;Project Website&lt;/a&gt; - Additional documentation, news, and links to other resources.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.sinatrarb.com/contributing&#34;&gt;Contributing&lt;/a&gt; - Find a bug? Need help? Have a patch?&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sinatra/sinatra/issues&#34;&gt;Issue tracker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/sinatra&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!forum/sinatrarb&#34;&gt;Mailing List&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;IRC: &lt;a href=&#34;irc://chat.freenode.net/#sinatra&#34;&gt;#sinatra&lt;/a&gt; on &lt;a href=&#34;https://freenode.net&#34;&gt;Freenode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sinatrarb.slack.com&#34;&gt;Sinatra &amp;amp; Friends&lt;/a&gt; on Slack (&lt;a href=&#34;https://sinatra-slack.herokuapp.com/&#34;&gt;get an invite&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sinatra/sinatra-book&#34;&gt;Sinatra Book&lt;/a&gt; - Cookbook Tutorial&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://recipes.sinatrarb.com/&#34;&gt;Sinatra Recipes&lt;/a&gt; - Community contributed recipes&lt;/li&gt; &#xA; &lt;li&gt;API documentation for the &lt;a href=&#34;http://www.rubydoc.info/gems/sinatra&#34;&gt;latest release&lt;/a&gt; or the &lt;a href=&#34;http://www.rubydoc.info/github/sinatra/sinatra&#34;&gt;current HEAD&lt;/a&gt; on &lt;a href=&#34;http://www.rubydoc.info/&#34;&gt;RubyDoc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://travis-ci.org/sinatra/sinatra&#34;&gt;CI server&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>teamcapybara/capybara</title>
    <updated>2022-10-02T01:46:49Z</updated>
    <id>tag:github.com,2022-10-02:/teamcapybara/capybara</id>
    <link href="https://github.com/teamcapybara/capybara" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Acceptance test framework for web applications&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Capybara&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/teamcapybara/capybara&#34;&gt;&lt;img src=&#34;https://secure.travis-ci.org/teamcapybara/capybara.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/api/projects/github/teamcapybara/capybara&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/github/teamcapybara/capybara?svg=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/teamcapybara/capybara&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/teamcapybara/capybara.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/teamcapybara/capybara?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/teamcapybara/capybara/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/jnicklas/capybara?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dependabot.com/compatibility-score.html?dependency-name=capybara&amp;amp;package-manager=bundler&amp;amp;version-scheme=semver&#34;&gt;&lt;img src=&#34;https://api.dependabot.com/badges/compatibility_score?dependency-name=capybara&amp;amp;package-manager=bundler&amp;amp;version-scheme=semver&#34; alt=&#34;SemVer&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Capybara helps you test web applications by simulating how a real user would interact with your app. It is agnostic about the driver running your tests and comes with Rack::Test and Selenium support built in. WebKit is supported through an external gem.&lt;/p&gt; &#xA;&lt;h2&gt;Support Capybara&lt;/h2&gt; &#xA;&lt;p&gt;If you and/or your company find value in Capybara and would like to contribute financially to its ongoing maintenance and development, please visit &lt;a href=&#34;https://www.patreon.com/capybara&#34;&gt;Patreon&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Need help?&lt;/strong&gt; Ask on the mailing list (please do not open an issue on GitHub): &lt;a href=&#34;http://groups.google.com/group/ruby-capybara&#34;&gt;http://groups.google.com/group/ruby-capybara&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#key-benefits&#34;&gt;Key benefits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#using-capybara-with-cucumber&#34;&gt;Using Capybara with Cucumber&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#using-capybara-with-rspec&#34;&gt;Using Capybara with RSpec&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#using-capybara-with-testunit&#34;&gt;Using Capybara with Test::Unit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#using-capybara-with-minitest&#34;&gt;Using Capybara with Minitest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#using-capybara-with-minitestspec&#34;&gt;Using Capybara with Minitest::Spec&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#drivers&#34;&gt;Drivers&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#selecting-the-driver&#34;&gt;Selecting the Driver&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#racktest&#34;&gt;RackTest&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#selenium&#34;&gt;Selenium&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#apparition&#34;&gt;Apparition&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#the-dsl&#34;&gt;The DSL&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#navigating&#34;&gt;Navigating&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#clicking-links-and-buttons&#34;&gt;Clicking links and buttons&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#interacting-with-forms&#34;&gt;Interacting with forms&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#querying&#34;&gt;Querying&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#finding&#34;&gt;Finding&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#scoping&#34;&gt;Scoping&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#working-with-windows&#34;&gt;Working with windows&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#scripting&#34;&gt;Scripting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#modals&#34;&gt;Modals&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#debugging&#34;&gt;Debugging&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#matching&#34;&gt;Matching&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#exactness&#34;&gt;Exactness&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#strategy&#34;&gt;Strategy&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#transactions-and-database-setup&#34;&gt;Transactions and database setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#asynchronous-javascript-ajax-and-friends&#34;&gt;Asynchronous JavaScript (Ajax and friends)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#using-the-dsl-elsewhere&#34;&gt;Using the DSL elsewhere&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#calling-remote-servers&#34;&gt;Calling remote servers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#using-sessions&#34;&gt;Using sessions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#named-sessions&#34;&gt;Named sessions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#using-sessions-manually&#34;&gt;Using sessions manually&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#xpath-css-and-selectors&#34;&gt;XPath, CSS and selectors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#beware-the-xpath--trap&#34;&gt;Beware the XPath // trap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#configuring-and-adding-drivers&#34;&gt;Configuring and adding drivers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#gotchas&#34;&gt;Gotchas:&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#threadsafe-mode&#34;&gt;&#34;Threadsafe&#34; mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#development&#34;&gt;Development&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;key-benefits&#34;&gt;&lt;/a&gt;Key benefits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;No setup&lt;/strong&gt; necessary for Rails and Rack application. Works out of the box.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Intuitive API&lt;/strong&gt; which mimics the language an actual user would use.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Switch the backend&lt;/strong&gt; your tests run against from fast headless mode to an actual browser with no changes to your tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Powerful synchronization&lt;/strong&gt; features mean you never have to manually wait for asynchronous processes to complete.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;setup&#34;&gt;&lt;/a&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Capybara requires Ruby 2.7.0 or later. To install, add this line to your &lt;code&gt;Gemfile&lt;/code&gt; and run &lt;code&gt;bundle install&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;capybara&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the application that you are testing is a Rails app, add this line to your test helper file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;capybara/rails&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the application that you are testing is a Rack app, but not Rails, set Capybara.app to your Rack app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Capybara.app = MyRackApp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to test JavaScript, or if your app interacts with (or is located at) a remote URL, you&#39;ll need to &lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#drivers&#34;&gt;use a different driver&lt;/a&gt;. If using Rails 5.0+, but not using the Rails system tests from 5.1, you&#39;ll probably also want to swap the &#34;server&#34; used to launch your app to Puma in order to match Rails defaults.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Capybara.server = :puma # Until your setup is working&#xA;Capybara.server = :puma, { Silent: true } # To clean up your test output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;using-capybara-with-cucumber&#34;&gt;&lt;/a&gt;Using Capybara with Cucumber&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;cucumber-rails&lt;/code&gt; gem comes with Capybara support built-in. If you are not using Rails, manually load the &lt;code&gt;capybara/cucumber&lt;/code&gt; module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;capybara/cucumber&#39;&#xA;Capybara.app = MyRackApp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use the Capybara DSL in your steps, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;When /I sign in/ do&#xA;  within(&#34;#session&#34;) do&#xA;    fill_in &#39;Email&#39;, with: &#39;user@example.com&#39;&#xA;    fill_in &#39;Password&#39;, with: &#39;password&#39;&#xA;  end&#xA;  click_button &#39;Sign in&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can switch to the &lt;code&gt;Capybara.javascript_driver&lt;/code&gt; (&lt;code&gt;:selenium&lt;/code&gt; by default) by tagging scenarios (or features) with &lt;code&gt;@javascript&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;@javascript&#xA;Scenario: do something Ajaxy&#xA;  When I click the Ajax link&#xA;  ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are also explicit tags for each registered driver set up for you (&lt;code&gt;@selenium&lt;/code&gt;, &lt;code&gt;@rack_test&lt;/code&gt;, etc).&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;using-capybara-with-rspec&#34;&gt;&lt;/a&gt;Using Capybara with RSpec&lt;/h2&gt; &#xA;&lt;p&gt;Load RSpec 3.5+ support by adding the following line (typically to your &lt;code&gt;spec_helper.rb&lt;/code&gt; file):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;capybara/rspec&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using Rails, put your Capybara specs in &lt;code&gt;spec/features&lt;/code&gt; or &lt;code&gt;spec/system&lt;/code&gt; (only works if &lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/v/4-0/docs/directory-structure&#34;&gt;you have it configured in RSpec&lt;/a&gt;) and if you have your Capybara specs in a different directory, then tag the example groups with &lt;code&gt;type: :feature&lt;/code&gt; or &lt;code&gt;type: :system&lt;/code&gt; depending on which type of test you&#39;re writing.&lt;/p&gt; &#xA;&lt;p&gt;If you are using Rails system specs please see &lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/system-specs/system-spec#system-specs-driven-by-selenium-chrome-headless&#34;&gt;their documentation&lt;/a&gt; for selecting the driver you wish to use.&lt;/p&gt; &#xA;&lt;p&gt;If you are not using Rails, tag all the example groups in which you want to use Capybara with &lt;code&gt;type: :feature&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can now write your specs like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;describe &#34;the signin process&#34;, type: :feature do&#xA;  before :each do&#xA;    User.create(email: &#39;user@example.com&#39;, password: &#39;password&#39;)&#xA;  end&#xA;&#xA;  it &#34;signs me in&#34; do&#xA;    visit &#39;/sessions/new&#39;&#xA;    within(&#34;#session&#34;) do&#xA;      fill_in &#39;Email&#39;, with: &#39;user@example.com&#39;&#xA;      fill_in &#39;Password&#39;, with: &#39;password&#39;&#xA;    end&#xA;    click_button &#39;Sign in&#39;&#xA;    expect(page).to have_content &#39;Success&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;js: true&lt;/code&gt; to switch to the &lt;code&gt;Capybara.javascript_driver&lt;/code&gt; (&lt;code&gt;:selenium&lt;/code&gt; by default), or provide a &lt;code&gt;:driver&lt;/code&gt; option to switch to one specific driver. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;describe &#39;some stuff which requires js&#39;, js: true do&#xA;  it &#39;will use the default js driver&#39;&#xA;  it &#39;will switch to one specific driver&#39;, driver: :apparition&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Capybara also comes with a built in DSL for creating descriptive acceptance tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;feature &#34;Signing in&#34; do&#xA;  background do&#xA;    User.create(email: &#39;user@example.com&#39;, password: &#39;caplin&#39;)&#xA;  end&#xA;&#xA;  scenario &#34;Signing in with correct credentials&#34; do&#xA;    visit &#39;/sessions/new&#39;&#xA;    within(&#34;#session&#34;) do&#xA;      fill_in &#39;Email&#39;, with: &#39;user@example.com&#39;&#xA;      fill_in &#39;Password&#39;, with: &#39;caplin&#39;&#xA;    end&#xA;    click_button &#39;Sign in&#39;&#xA;    expect(page).to have_content &#39;Success&#39;&#xA;  end&#xA;&#xA;  given(:other_user) { User.create(email: &#39;other@example.com&#39;, password: &#39;rous&#39;) }&#xA;&#xA;  scenario &#34;Signing in as another user&#34; do&#xA;    visit &#39;/sessions/new&#39;&#xA;    within(&#34;#session&#34;) do&#xA;      fill_in &#39;Email&#39;, with: other_user.email&#xA;      fill_in &#39;Password&#39;, with: other_user.password&#xA;    end&#xA;    click_button &#39;Sign in&#39;&#xA;    expect(page).to have_content &#39;Invalid email or password&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;feature&lt;/code&gt; is in fact just an alias for &lt;code&gt;describe ..., type: :feature&lt;/code&gt;, &lt;code&gt;background&lt;/code&gt; is an alias for &lt;code&gt;before&lt;/code&gt;, &lt;code&gt;scenario&lt;/code&gt; for &lt;code&gt;it&lt;/code&gt;, and &lt;code&gt;given&lt;/code&gt;/&lt;code&gt;given!&lt;/code&gt; aliases for &lt;code&gt;let&lt;/code&gt;/&lt;code&gt;let!&lt;/code&gt;, respectively.&lt;/p&gt; &#xA;&lt;p&gt;Finally, Capybara matchers are also supported in view specs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.describe &#34;todos/show.html.erb&#34;, type: :view do&#xA;  it &#34;displays the todo title&#34; do&#xA;    assign :todo, Todo.new(title: &#34;Buy milk&#34;)&#xA;&#xA;    render&#xA;&#xA;    expect(rendered).to have_css(&#34;header h1&#34;, text: &#34;Buy milk&#34;)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: When you require &#39;capybara/rspec&#39; proxy methods are installed to work around name collisions between Capybara::DSL methods &lt;code&gt;all&lt;/code&gt;/&lt;code&gt;within&lt;/code&gt; and the identically named built-in RSpec matchers. If you opt not to require &#39;capybara/rspec&#39; you can install the proxy methods by requiring &#39;capybara/rspec/matcher_proxies&#39; after requiring RSpec and &#39;capybara/dsl&#39;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;using-capybara-with-testunit&#34;&gt;&lt;/a&gt;Using Capybara with Test::Unit&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are using &lt;code&gt;Test::Unit&lt;/code&gt;, define a base class for your Capybara tests like so:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;capybara/dsl&#39;&#xA;&#xA;class CapybaraTestCase &amp;lt; Test::Unit::TestCase&#xA;  include Capybara::DSL&#xA;&#xA;  def teardown&#xA;    Capybara.reset_sessions!&#xA;    Capybara.use_default_driver&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;using-capybara-with-minitest&#34;&gt;&lt;/a&gt;Using Capybara with Minitest&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are using Rails system tests please see their documentation for information on selecting the driver you wish to use.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are using Rails, but not using Rails system tests, add the following code in your &lt;code&gt;test_helper.rb&lt;/code&gt; file to make Capybara available in all test cases deriving from &lt;code&gt;ActionDispatch::IntegrationTest&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;capybara/rails&#39;&#xA;require &#39;capybara/minitest&#39;&#xA;&#xA;class ActionDispatch::IntegrationTest&#xA;  # Make the Capybara DSL available in all integration tests&#xA;  include Capybara::DSL&#xA;  # Make `assert_*` methods behave like Minitest assertions&#xA;  include Capybara::Minitest::Assertions&#xA;&#xA;  # Reset sessions and driver between tests&#xA;  teardown do&#xA;    Capybara.reset_sessions!&#xA;    Capybara.use_default_driver&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are not using Rails, define a base class for your Capybara tests like so:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;capybara/minitest&#39;&#xA;&#xA;class CapybaraTestCase &amp;lt; Minitest::Test&#xA;  include Capybara::DSL&#xA;  include Capybara::Minitest::Assertions&#xA;&#xA;  def teardown&#xA;    Capybara.reset_sessions!&#xA;    Capybara.use_default_driver&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Remember to call &lt;code&gt;super&lt;/code&gt; in any subclasses that override &lt;code&gt;teardown&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To switch the driver, set &lt;code&gt;Capybara.current_driver&lt;/code&gt;. For instance,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class BlogTest &amp;lt; ActionDispatch::IntegrationTest&#xA;  setup do&#xA;    Capybara.current_driver = Capybara.javascript_driver # :selenium by default&#xA;  end&#xA;&#xA;  test &#39;shows blog posts&#39; do&#xA;    # ... this test is run with Selenium ...&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;using-capybara-with-minitestspec&#34;&gt;&lt;/a&gt;Using Capybara with Minitest::Spec&lt;/h2&gt; &#xA;&lt;p&gt;Follow the above instructions for Minitest and additionally require capybara/minitest/spec&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.must_have_content(&#39;Important!&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;drivers&#34;&gt;&lt;/a&gt;Drivers&lt;/h2&gt; &#xA;&lt;p&gt;Capybara uses the same DSL to drive a variety of browser and headless drivers.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;selecting-the-driver&#34;&gt;&lt;/a&gt;Selecting the Driver&lt;/h3&gt; &#xA;&lt;p&gt;By default, Capybara uses the &lt;code&gt;:rack_test&lt;/code&gt; driver, which is fast but limited: it does not support JavaScript, nor is it able to access HTTP resources outside of your Rack application, such as remote APIs and OAuth services. To get around these limitations, you can set up a different default driver for your features. For example, if you&#39;d prefer to run everything in Selenium, you could do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Capybara.default_driver = :selenium # :selenium_chrome and :selenium_chrome_headless are also registered&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, if you are using RSpec or Cucumber (and your app runs correctly without JS), you may instead want to consider leaving the faster &lt;code&gt;:rack_test&lt;/code&gt; as the &lt;strong&gt;default_driver&lt;/strong&gt;, and marking only those tests that require a JavaScript-capable driver using &lt;code&gt;js: true&lt;/code&gt; or &lt;code&gt;@javascript&lt;/code&gt;, respectively. By default, JavaScript tests are run using the &lt;code&gt;:selenium&lt;/code&gt; driver. You can change this by setting &lt;code&gt;Capybara.javascript_driver&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also change the driver temporarily (typically in the Before/setup and After/teardown blocks):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Capybara.current_driver = :apparition # temporarily select different driver&#xA;# tests here&#xA;Capybara.use_default_driver       # switch back to default driver&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: switching the driver creates a new session, so you may not be able to switch in the middle of a test.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;racktest&#34;&gt;&lt;/a&gt;RackTest&lt;/h3&gt; &#xA;&lt;p&gt;RackTest is Capybara&#39;s default driver. It is written in pure Ruby and does not have any support for executing JavaScript. Since the RackTest driver interacts directly with Rack interfaces, it does not require a server to be started. However, this means that if your application is not a Rack application (Rails, Sinatra and most other Ruby frameworks are Rack applications) then you cannot use this driver. Furthermore, you cannot use the RackTest driver to test a remote application, or to access remote URLs (e.g., redirects to external sites, external APIs, or OAuth services) that your application might interact with.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jeroenvandijk/capybara-mechanize&#34;&gt;capybara-mechanize&lt;/a&gt; provides a similar driver that can access remote servers.&lt;/p&gt; &#xA;&lt;p&gt;RackTest can be configured with a set of headers like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Capybara.register_driver :rack_test do |app|&#xA;  Capybara::RackTest::Driver.new(app, headers: { &#39;HTTP_USER_AGENT&#39; =&amp;gt; &#39;Capybara&#39; })&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the section on adding and configuring drivers.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;selenium&#34;&gt;&lt;/a&gt;Selenium&lt;/h3&gt; &#xA;&lt;p&gt;Capybara supports &lt;a href=&#34;https://www.seleniumhq.org/projects/webdriver/&#34;&gt;Selenium 3.5+ (Webdriver)&lt;/a&gt;. In order to use Selenium, you&#39;ll need to install the &lt;code&gt;selenium-webdriver&lt;/code&gt; gem, and add it to your Gemfile if you&#39;re using bundler.&lt;/p&gt; &#xA;&lt;p&gt;Capybara pre-registers a number of named drivers that use Selenium - they are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;:selenium =&amp;gt; Selenium driving Firefox&lt;/li&gt; &#xA; &lt;li&gt;:selenium_headless =&amp;gt; Selenium driving Firefox in a headless configuration&lt;/li&gt; &#xA; &lt;li&gt;:selenium_chrome =&amp;gt; Selenium driving Chrome&lt;/li&gt; &#xA; &lt;li&gt;:selenium_chrome_headless =&amp;gt; Selenium driving Chrome in a headless configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These should work (with relevant software installation) in a local desktop configuration but you may need to customize them if using in a CI environment where additional options may need to be passed to the browsers. See the section on adding and configuring drivers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: drivers which run the server in a different thread may not share the same transaction as your tests, causing data not to be shared between your test and test server, see &lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#transactions-and-database-setup&#34;&gt;Transactions and database setup&lt;/a&gt; below.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;apparition&#34;&gt;&lt;/a&gt;Apparition&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/twalpole/apparition&#34;&gt;apparition driver&lt;/a&gt; is a new driver that allows you to run tests using Chrome in a headless or headed configuration. It attempts to provide backwards compatibility with the &lt;a href=&#34;https://github.com/teampoltergeist/poltergeist&#34;&gt;Poltergeist driver API&lt;/a&gt; and &lt;a href=&#34;https://github.com/thoughtbot/capybara-webkit&#34;&gt;capybara-webkit API&lt;/a&gt; while allowing for the use of modern JS/CSS. It uses CDP to communicate with Chrome, thereby obviating the need for chromedriver. This driver is being developed by the current developer of Capybara and will attempt to keep up to date with new Capybara releases. It will probably be moved into the teamcapybara repo once it reaches v1.0.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;the-dsl&#34;&gt;&lt;/a&gt;The DSL&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;A complete reference is available at &lt;a href=&#34;http://rubydoc.info/github/teamcapybara/capybara/master&#34;&gt;rubydoc.info&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: By default Capybara will only locate visible elements. This is because a real user would not be able to interact with non-visible elements.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: All searches in Capybara are &lt;em&gt;case sensitive&lt;/em&gt;. This is because Capybara heavily uses XPath, which doesn&#39;t support case insensitivity.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;navigating&#34;&gt;&lt;/a&gt;Navigating&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;tt&gt;&lt;a href=&#34;http://rubydoc.info/github/teamcapybara/capybara/master/Capybara/Session#visit-instance_method&#34;&gt;visit&lt;/a&gt;&lt;/tt&gt; method to navigate to other pages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;visit(&#39;/projects&#39;)&#xA;visit(post_comments_path(post))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The visit method only takes a single parameter, the request method is &lt;strong&gt;always&lt;/strong&gt; GET.&lt;/p&gt; &#xA;&lt;p&gt;You can get the &lt;a href=&#34;http://rubydoc.info/github/teamcapybara/capybara/master/Capybara/Session#current_path-instance_method&#34;&gt;current path&lt;/a&gt; of the browsing session, and test it using the &lt;a href=&#34;http://www.rubydoc.info/github/teamcapybara/capybara/master/Capybara/RSpecMatchers#have_current_path-instance_method&#34;&gt;&lt;code&gt;have_current_path&lt;/code&gt;&lt;/a&gt; matcher:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(page).to have_current_path(post_comments_path(post))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can also assert the current path by testing the value of &lt;code&gt;current_path&lt;/code&gt; directly. However, using the &lt;code&gt;have_current_path&lt;/code&gt; matcher is safer since it uses Capybara&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/teamcapybara/capybara/master/#asynchronous-javascript-ajax-and-friends&#34;&gt;waiting behaviour&lt;/a&gt; to ensure that preceding actions (such as a &lt;code&gt;click_link&lt;/code&gt;) have completed.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;clicking-links-and-buttons&#34;&gt;&lt;/a&gt;Clicking links and buttons&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Full reference: &lt;a href=&#34;http://rubydoc.info/github/teamcapybara/capybara/master/Capybara/Node/Actions&#34;&gt;Capybara::Node::Actions&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can interact with the webapp by following links and buttons. Capybara automatically follows any redirects, and submits forms associated with buttons.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;click_link(&#39;id-of-link&#39;)&#xA;click_link(&#39;Link Text&#39;)&#xA;click_button(&#39;Save&#39;)&#xA;click_on(&#39;Link Text&#39;) # clicks on either links or buttons&#xA;click_on(&#39;Button Value&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;interacting-with-forms&#34;&gt;&lt;/a&gt;Interacting with forms&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Full reference: &lt;a href=&#34;http://rubydoc.info/github/teamcapybara/capybara/master/Capybara/Node/Actions&#34;&gt;Capybara::Node::Actions&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are a number of tools for interacting with form elements:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;fill_in(&#39;First Name&#39;, with: &#39;John&#39;)&#xA;fill_in(&#39;Password&#39;, with: &#39;Seekrit&#39;)&#xA;fill_in(&#39;Description&#39;, with: &#39;Really Long Text...&#39;)&#xA;choose(&#39;A Radio Button&#39;)&#xA;check(&#39;A Checkbox&#39;)&#xA;uncheck(&#39;A Checkbox&#39;)&#xA;attach_file(&#39;Image&#39;, &#39;/path/to/image.jpg&#39;)&#xA;select(&#39;Option&#39;, from: &#39;Select Box&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;querying&#34;&gt;&lt;/a&gt;Querying&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Full reference: &lt;a href=&#34;http://rubydoc.info/github/teamcapybara/capybara/master/Capybara/Node/Matchers&#34;&gt;Capybara::Node::Matchers&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Capybara has a rich set of options for querying the page for the existence of certain elements, and working with and manipulating those elements.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.has_selector?(&#39;table tr&#39;)&#xA;page.has_selector?(:xpath, &#39;.//table/tr&#39;)&#xA;&#xA;page.has_xpath?(&#39;.//table/tr&#39;)&#xA;page.has_css?(&#39;table tr.foo&#39;)&#xA;page.has_content?(&#39;foo&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The negative forms like &lt;code&gt;has_no_selector?&lt;/code&gt; are different from &lt;code&gt;not has_selector?&lt;/code&gt;. Read the section on asynchronous JavaScript for an explanation.&lt;/p&gt; &#xA;&lt;p&gt;You can use these with RSpec&#39;s magic matchers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(page).to have_selector(&#39;table tr&#39;)&#xA;expect(page).to have_selector(:xpath, &#39;.//table/tr&#39;)&#xA;&#xA;expect(page).to have_xpath(&#39;.//table/tr&#39;)&#xA;expect(page).to have_css(&#39;table tr.foo&#39;)&#xA;expect(page).to have_content(&#39;foo&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;finding&#34;&gt;&lt;/a&gt;Finding&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Full reference: &lt;a href=&#34;http://rubydoc.info/github/teamcapybara/capybara/master/Capybara/Node/Finders&#34;&gt;Capybara::Node::Finders&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also find specific elements, in order to manipulate them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;find_field(&#39;First Name&#39;).value&#xA;find_field(id: &#39;my_field&#39;).value&#xA;find_link(&#39;Hello&#39;, :visible =&amp;gt; :all).visible?&#xA;find_link(class: [&#39;some_class&#39;, &#39;some_other_class&#39;], :visible =&amp;gt; :all).visible?&#xA;&#xA;find_button(&#39;Send&#39;).click&#xA;find_button(value: &#39;1234&#39;).click&#xA;&#xA;find(:xpath, &#34;.//table/tr&#34;).click&#xA;find(&#34;#overlay&#34;).find(&#34;h1&#34;).click&#xA;all(&#39;a&#39;).each { |a| a[:href] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to find elements by additional attributes/properties you can also pass a filter block, which will be checked inside the normal waiting behavior. If you find yourself needing to use this a lot you may be better off adding a &lt;a href=&#34;http://www.rubydoc.info/github/teamcapybara/capybara/Capybara#add_selector-class_method&#34;&gt;custom selector&lt;/a&gt; or &lt;a href=&#34;http://www.rubydoc.info/github/teamcapybara/capybara/Capybara#modify_selector-class_method&#34;&gt;adding a filter to an existing selector&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;find_field(&#39;First Name&#39;){ |el| el[&#39;data-xyz&#39;] == &#39;123&#39; }&#xA;find(&#34;#img_loading&#34;){ |img| img[&#39;complete&#39;] == true }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;find&lt;/code&gt; will wait for an element to appear on the page, as explained in the Ajax section. If the element does not appear it will raise an error.&lt;/p&gt; &#xA;&lt;p&gt;These elements all have all the Capybara DSL methods available, so you can restrict them to specific parts of the page:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;find(&#39;#navigation&#39;).click_link(&#39;Home&#39;)&#xA;expect(find(&#39;#navigation&#39;)).to have_button(&#39;Sign out&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;scoping&#34;&gt;&lt;/a&gt;Scoping&lt;/h3&gt; &#xA;&lt;p&gt;Capybara makes it possible to restrict certain actions, such as interacting with forms or clicking links and buttons, to within a specific area of the page. For this purpose you can use the generic &lt;tt&gt;&lt;a href=&#34;http://rubydoc.info/github/teamcapybara/capybara/master/Capybara/Session#within-instance_method&#34;&gt;within&lt;/a&gt;&lt;/tt&gt; method. Optionally you can specify which kind of selector to use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;within(&#34;li#employee&#34;) do&#xA;  fill_in &#39;Name&#39;, with: &#39;Jimmy&#39;&#xA;end&#xA;&#xA;within(:xpath, &#34;.//li[@id=&#39;employee&#39;]&#34;) do&#xA;  fill_in &#39;Name&#39;, with: &#39;Jimmy&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are special methods for restricting the scope to a specific fieldset, identified by either an id or the text of the fieldset&#39;s legend tag, and to a specific table, identified by either id or text of the table&#39;s caption tag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;within_fieldset(&#39;Employee&#39;) do&#xA;  fill_in &#39;Name&#39;, with: &#39;Jimmy&#39;&#xA;end&#xA;&#xA;within_table(&#39;Employee&#39;) do&#xA;  fill_in &#39;Name&#39;, with: &#39;Jimmy&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;working-with-windows&#34;&gt;&lt;/a&gt;Working with windows&lt;/h3&gt; &#xA;&lt;p&gt;Capybara provides some methods to ease finding and switching windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;facebook_window = window_opened_by do&#xA;  click_button &#39;Like&#39;&#xA;end&#xA;within_window facebook_window do&#xA;  find(&#39;#login_email&#39;).set(&#39;a@example.com&#39;)&#xA;  find(&#39;#login_password&#39;).set(&#39;qwerty&#39;)&#xA;  click_button &#39;Submit&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;scripting&#34;&gt;&lt;/a&gt;Scripting&lt;/h3&gt; &#xA;&lt;p&gt;In drivers which support it, you can easily execute JavaScript:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.execute_script(&#34;$(&#39;body&#39;).empty()&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For simple expressions, you can return the result of the script.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;result = page.evaluate_script(&#39;4 + 4&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more complicated scripts you&#39;ll need to write them as one expression.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;result = page.evaluate_script(&amp;lt;&amp;lt;~JS, 3, element)&#xA;  (function(n, el){&#xA;    var val = parseInt(el.value, 10);&#xA;    return n+val;&#xA;  })(arguments[0], arguments[1])&#xA;JS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;modals&#34;&gt;&lt;/a&gt;Modals&lt;/h3&gt; &#xA;&lt;p&gt;In drivers which support it, you can accept, dismiss and respond to alerts, confirms, and prompts.&lt;/p&gt; &#xA;&lt;p&gt;You can accept or dismiss alert messages by wrapping the code that produces an alert in a block:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;accept_alert do&#xA;  click_link(&#39;Show Alert&#39;)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can accept or dismiss a confirmation by wrapping it in a block, as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;dismiss_confirm do&#xA;  click_link(&#39;Show Confirm&#39;)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can accept or dismiss prompts as well, and also provide text to fill in for the response:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;accept_prompt(with: &#39;Linus Torvalds&#39;) do&#xA;  click_link(&#39;Show Prompt About Linux&#39;)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All modal methods return the message that was presented. So, you can access the prompt message by assigning the return to a variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;message = accept_prompt(with: &#39;Linus Torvalds&#39;) do&#xA;  click_link(&#39;Show Prompt About Linux&#39;)&#xA;end&#xA;expect(message).to eq(&#39;Who is the chief architect of Linux?&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;debugging&#34;&gt;&lt;/a&gt;Debugging&lt;/h3&gt; &#xA;&lt;p&gt;It can be useful to take a snapshot of the page as it currently is and take a look at it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;save_and_open_page&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also retrieve the current state of the DOM as a string using &lt;tt&gt;&lt;a href=&#34;http://rubydoc.info/github/teamcapybara/capybara/master/Capybara/Session#html-instance_method&#34;&gt;page.html&lt;/a&gt;&lt;/tt&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;print page.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is mostly useful for debugging. You should avoid testing against the contents of &lt;code&gt;page.html&lt;/code&gt; and use the more expressive finder methods instead.&lt;/p&gt; &#xA;&lt;p&gt;Finally, in drivers that support it, you can save a screenshot:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.save_screenshot(&#39;screenshot.png&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or have it save and automatically open:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;save_and_open_screenshot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Screenshots are saved to &lt;code&gt;Capybara.save_path&lt;/code&gt;, relative to the app directory. If you have required &lt;code&gt;capybara/rails&lt;/code&gt;, &lt;code&gt;Capybara.save_path&lt;/code&gt; will default to &lt;code&gt;tmp/capybara&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;matching&#34;&gt;&lt;/a&gt;Matching&lt;/h2&gt; &#xA;&lt;p&gt;It is possible to customize how Capybara finds elements. At your disposal are two options, &lt;code&gt;Capybara.exact&lt;/code&gt; and &lt;code&gt;Capybara.match&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;exactness&#34;&gt;&lt;/a&gt;Exactness&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Capybara.exact&lt;/code&gt; and the &lt;code&gt;exact&lt;/code&gt; option work together with the &lt;code&gt;is&lt;/code&gt; expression inside the XPath gem. When &lt;code&gt;exact&lt;/code&gt; is true, all &lt;code&gt;is&lt;/code&gt; expressions match exactly, when it is false, they allow substring matches. Many of the selectors built into Capybara use the &lt;code&gt;is&lt;/code&gt; expression. This way you can specify whether you want to allow substring matches or not. &lt;code&gt;Capybara.exact&lt;/code&gt; is false by default.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;click_link(&#34;Password&#34;) # also matches &#34;Password confirmation&#34;&#xA;Capybara.exact = true&#xA;click_link(&#34;Password&#34;) # does not match &#34;Password confirmation&#34;&#xA;click_link(&#34;Password&#34;, exact: false) # can be overridden&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;strategy&#34;&gt;&lt;/a&gt;Strategy&lt;/h3&gt; &#xA;&lt;p&gt;Using &lt;code&gt;Capybara.match&lt;/code&gt; and the equivalent &lt;code&gt;match&lt;/code&gt; option, you can control how Capybara behaves when multiple elements all match a query. There are currently four different strategies built into Capybara:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;first:&lt;/strong&gt; Just picks the first element that matches.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;one:&lt;/strong&gt; Raises an error if more than one element matches.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;smart:&lt;/strong&gt; If &lt;code&gt;exact&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, raises an error if more than one element matches, just like &lt;code&gt;one&lt;/code&gt;. If &lt;code&gt;exact&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, it will first try to find an exact match. An error is raised if more than one element is found. If no element is found, a new search is performed which allows partial matches. If that search returns multiple matches, an error is raised.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;prefer_exact:&lt;/strong&gt; If multiple matches are found, some of which are exact, and some of which are not, then the first exactly matching element is returned.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The default for &lt;code&gt;Capybara.match&lt;/code&gt; is &lt;code&gt;:smart&lt;/code&gt;. To emulate the behaviour in Capybara 2.0.x, set &lt;code&gt;Capybara.match&lt;/code&gt; to &lt;code&gt;:one&lt;/code&gt;. To emulate the behaviour in Capybara 1.x, set &lt;code&gt;Capybara.match&lt;/code&gt; to &lt;code&gt;:prefer_exact&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;transactions-and-database-setup&#34;&gt;&lt;/a&gt;Transactions and database setup&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Rails 5.1+ &#34;safely&#34; shares the database connection between the app and test threads. Therefore, if using Rails 5.1+ you SHOULD be able to ignore this section.&lt;/p&gt; &#xA;&lt;p&gt;Some Capybara drivers need to run against an actual HTTP server. Capybara takes care of this and starts one for you in the same process as your test, but on another thread. Selenium is one of those drivers, whereas RackTest is not.&lt;/p&gt; &#xA;&lt;p&gt;If you are using a SQL database, it is common to run every test in a transaction, which is rolled back at the end of the test, rspec-rails does this by default out of the box for example. Since transactions are usually not shared across threads, this will cause data you have put into the database in your test code to be invisible to Capybara.&lt;/p&gt; &#xA;&lt;p&gt;Cucumber handles this by using truncation instead of transactions, i.e. they empty out the entire database after each test. You can get the same behaviour by using a gem such as &lt;a href=&#34;https://github.com/DatabaseCleaner/database_cleaner&#34;&gt;database_cleaner&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;asynchronous-javascript-ajax-and-friends&#34;&gt;&lt;/a&gt;Asynchronous JavaScript (Ajax and friends)&lt;/h2&gt; &#xA;&lt;p&gt;When working with asynchronous JavaScript, you might come across situations where you are attempting to interact with an element which is not yet present on the page. Capybara automatically deals with this by waiting for elements to appear on the page.&lt;/p&gt; &#xA;&lt;p&gt;When issuing instructions to the DSL such as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;click_link(&#39;foo&#39;)&#xA;click_link(&#39;bar&#39;)&#xA;expect(page).to have_content(&#39;baz&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If clicking on the &lt;em&gt;foo&lt;/em&gt; link triggers an asynchronous process, such as an Ajax request, which, when complete will add the &lt;em&gt;bar&lt;/em&gt; link to the page, clicking on the &lt;em&gt;bar&lt;/em&gt; link would be expected to fail, since that link doesn&#39;t exist yet. However, Capybara is smart enough to retry finding the link for a brief period of time before giving up and throwing an error. The same is true of the next line, which looks for the content &lt;em&gt;baz&lt;/em&gt; on the page; it will retry looking for that content for a brief time. You can adjust how long this period is (the default is 2 seconds):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Capybara.default_max_wait_time = 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Be aware that because of this behaviour, the following two statements are &lt;strong&gt;not&lt;/strong&gt; equivalent, and you should &lt;strong&gt;always&lt;/strong&gt; use the latter!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Given use of a driver where the page is loaded when visit returns&#xA;# and that Capybara.predicates_wait is `true`&#xA;# consider a page where the `a` tag is removed through AJAX after 1s&#xA;visit(some_path)&#xA;!page.has_xpath?(&#39;a&#39;)  # is false&#xA;page.has_no_xpath?(&#39;a&#39;)  # is true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;First expression:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;has_xpath?(&#39;a&#39;)&lt;/code&gt; is called right after &lt;code&gt;visit&lt;/code&gt; returns. It is &lt;code&gt;true&lt;/code&gt; because the link has not yet been removed&lt;/li&gt; &#xA; &lt;li&gt;Capybara does not wait upon successful predicates/assertions, therefore &lt;strong&gt;has_xpath? returns &lt;code&gt;true&lt;/code&gt; immediately&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;The expression returns &lt;code&gt;false&lt;/code&gt; (because it is negated with the leading &lt;code&gt;!&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Second expression:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;has_no_xpath?(&#39;a&#39;)&lt;/code&gt; is called right after &lt;code&gt;visit&lt;/code&gt; returns. It is &lt;code&gt;false&lt;/code&gt; because the link has not yet been removed.&lt;/li&gt; &#xA; &lt;li&gt;Capybara waits upon failed predicates/assertions, therefore &lt;strong&gt;has_no_xpath? does not return &lt;code&gt;false&lt;/code&gt; immediately&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Capybara will periodically re-check the predicate/assertion up to the &lt;code&gt;default_max_wait_time&lt;/code&gt; defined&lt;/li&gt; &#xA; &lt;li&gt;after 1s, the predicate becomes &lt;code&gt;true&lt;/code&gt; (because the link has been removed)&lt;/li&gt; &#xA; &lt;li&gt;The expression returns &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Capybara&#39;s RSpec matchers, however, are smart enough to handle either form. The two following statements are functionally equivalent:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(page).not_to have_xpath(&#39;a&#39;)&#xA;expect(page).to have_no_xpath(&#39;a&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Capybara&#39;s waiting behaviour is quite advanced, and can deal with situations such as the following line of code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;expect(find(&#39;#sidebar&#39;).find(&#39;h1&#39;)).to have_content(&#39;Something&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Even if JavaScript causes &lt;code&gt;#sidebar&lt;/code&gt; to disappear off the page, Capybara will automatically reload it and any elements it contains. So if an AJAX request causes the contents of &lt;code&gt;#sidebar&lt;/code&gt; to change, which would update the text of the &lt;code&gt;h1&lt;/code&gt; to &#34;Something&#34;, and this happened, this test would pass. If you do not want this behaviour, you can set &lt;code&gt;Capybara.automatic_reload&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;using-the-dsl-elsewhere&#34;&gt;&lt;/a&gt;Using the DSL elsewhere&lt;/h2&gt; &#xA;&lt;p&gt;You can mix the DSL into any context by including &lt;tt&gt;Capybara::DSL&lt;/tt&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;capybara/dsl&#39;&#xA;&#xA;Capybara.default_driver = :webkit&#xA;&#xA;module MyModule&#xA;  include Capybara::DSL&#xA;&#xA;  def login!&#xA;    within(:xpath, &#34;.//form[@id=&#39;session&#39;]&#34;) do&#xA;      fill_in &#39;Email&#39;, with: &#39;user@example.com&#39;&#xA;      fill_in &#39;Password&#39;, with: &#39;password&#39;&#xA;    end&#xA;    click_button &#39;Sign in&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This enables its use in unsupported testing frameworks, and for general-purpose scripting.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;calling-remote-servers&#34;&gt;&lt;/a&gt;Calling remote servers&lt;/h2&gt; &#xA;&lt;p&gt;Normally Capybara expects to be testing an in-process Rack application, but you can also use it to talk to a web server running anywhere on the internet, by setting app_host:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Capybara.current_driver = :selenium&#xA;Capybara.app_host = &#39;http://www.google.com&#39;&#xA;...&#xA;visit(&#39;/&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the default driver (&lt;code&gt;:rack_test&lt;/code&gt;) does not support running against a remote server. With drivers that support it, you can also visit any URL directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;visit(&#39;http://www.google.com&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default Capybara will try to boot a rack application automatically. You might want to switch off Capybara&#39;s rack server if you are running against a remote application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Capybara.run_server = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;using-sessions&#34;&gt;&lt;/a&gt;Using sessions&lt;/h2&gt; &#xA;&lt;p&gt;Capybara manages named sessions (:default if not specified) allowing multiple sessions using the same driver and test app instance to be interacted with. A new session will be created using the current driver if a session with the given name using the current driver and test app instance is not found.&lt;/p&gt; &#xA;&lt;h3&gt;Named sessions&lt;/h3&gt; &#xA;&lt;p&gt;To perform operations in a different session and then revert to the previous session&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Capybara.using_session(&#34;Bob&#39;s session&#34;) do&#xA;   #do something in Bob&#39;s browser session&#xA;end&#xA; #reverts to previous session&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To permanently switch the current session to a different session&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Capybara.session_name = &#34;some other session&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;using-sessions-manually&#34;&gt;&lt;/a&gt;Using sessions manually&lt;/h3&gt; &#xA;&lt;p&gt;For ultimate control, you can instantiate and use a &lt;a href=&#34;http://rubydoc.info/github/teamcapybara/capybara/master/Capybara/Session&#34;&gt;Session&lt;/a&gt; manually.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;capybara&#39;&#xA;&#xA;session = Capybara::Session.new(:webkit, my_rack_app)&#xA;session.within(&#34;form#session&#34;) do&#xA;  session.fill_in &#39;Email&#39;, with: &#39;user@example.com&#39;&#xA;  session.fill_in &#39;Password&#39;, with: &#39;password&#39;&#xA;end&#xA;session.click_button &#39;Sign in&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;xpath-css-and-selectors&#34;&gt;&lt;/a&gt;XPath, CSS and selectors&lt;/h2&gt; &#xA;&lt;p&gt;Capybara does not try to guess what kind of selector you are going to give it, and will always use CSS by default. If you want to use XPath, you&#39;ll need to do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;within(:xpath, &#39;.//ul/li&#39;) { ... }&#xA;find(:xpath, &#39;.//ul/li&#39;).text&#xA;find(:xpath, &#39;.//li[contains(.//a[@href = &#34;#&#34;]/text(), &#34;foo&#34;)]&#39;).value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively you can set the default selector to XPath:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Capybara.default_selector = :xpath&#xA;find(&#39;.//ul/li&#39;).text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Capybara provides a number of other built-in selector types. The full list, along with applicable filters, can be seen at &lt;a href=&#34;https://www.rubydoc.info/github/teamcapybara/capybara/Capybara/Selector&#34;&gt;built-in selectors&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Capybara also allows you to add custom selectors, which can be very useful if you find yourself using the same kinds of selectors very often. The examples below are very simple, and there are many available features not demonstrated. For more in-depth examples please see Capybaras built-in selector definitions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Capybara.add_selector(:my_attribute) do&#xA;  xpath { |id| XPath.descendant[XPath.attr(:my_attribute) == id.to_s] }&#xA;end&#xA;&#xA;Capybara.add_selector(:row) do&#xA;  xpath { |num| &#34;.//tbody/tr[#{num}]&#34; }&#xA;end&#xA;&#xA;Capybara.add_selector(:flash_type) do&#xA;  css { |type| &#34;#flash.#{type}&#34; }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The block given to xpath must always return an XPath expression as a String, or an XPath expression generated through the XPath gem. You can now use these selectors like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;find(:my_attribute, &#39;post_123&#39;) # find element with matching attribute&#xA;find(:row, 3) # find 3rd row in table body&#xA;find(:flash_type, :notice) # find element with id of &#39;flash&#39; and class of &#39;notice&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;beware-the-xpath--trap&#34;&gt;&lt;/a&gt;Beware the XPath // trap&lt;/h2&gt; &#xA;&lt;p&gt;In XPath the expression // means something very specific, and it might not be what you think. Contrary to common belief, // means &#34;anywhere in the document&#34; not &#34;anywhere in the current context&#34;. As an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.find(:xpath, &#39;//body&#39;).all(:xpath, &#39;//script&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You might expect this to find all script tags in the body, but actually, it finds all script tags in the entire document, not only those in the body! What you&#39;re looking for is the .// expression which means &#34;any descendant of the current node&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.find(:xpath, &#39;//body&#39;).all(:xpath, &#39;.//script&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The same thing goes for within:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;within(:xpath, &#39;//body&#39;) do&#xA;  page.find(:xpath, &#39;.//script&#39;)&#xA;  within(:xpath, &#39;.//table/tbody&#39;) do&#xA;  ...&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;configuring-and-adding-drivers&#34;&gt;&lt;/a&gt;Configuring and adding drivers&lt;/h2&gt; &#xA;&lt;p&gt;Capybara makes it convenient to switch between different drivers. It also exposes an API to tweak those drivers with whatever settings you want, or to add your own drivers. This is how to override the selenium driver configuration to use chrome:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Capybara.register_driver :selenium do |app|&#xA;  Capybara::Selenium::Driver.new(app, :browser =&amp;gt; :chrome)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, it&#39;s also possible to give this configuration a different name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Note: Capybara registers this by default&#xA;Capybara.register_driver :selenium_chrome do |app|&#xA;  Capybara::Selenium::Driver.new(app, :browser =&amp;gt; :chrome)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then tests can switch between using different browsers effortlessly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Capybara.current_driver = :selenium_chrome&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Whatever is returned from the block should conform to the API described by Capybara::Driver::Base, it does not however have to inherit from this class. Gems can use this API to add their own drivers to Capybara.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/SeleniumHQ/selenium/wiki/Ruby-Bindings&#34;&gt;Selenium wiki&lt;/a&gt; has additional info about how the underlying driver can be configured.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;gotchas&#34;&gt;&lt;/a&gt;Gotchas:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Access to session and request is not possible from the test, Access to response is limited. Some drivers allow access to response headers and HTTP status code, but this kind of functionality is not provided by some drivers, such as Selenium.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Access to Rails specific stuff (such as &lt;code&gt;controller&lt;/code&gt;) is unavailable, since we&#39;re not using Rails&#39; integration testing.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Freezing time: It&#39;s common practice to mock out the Time so that features that depend on the current Date work as expected. This can be problematic on ruby/platform combinations that don&#39;t support access to a monotonic process clock, since Capybara&#39;s Ajax timing uses the system time, resulting in Capybara never timing out and just hanging when a failure occurs. It&#39;s still possible to use gems which allow you to travel in time, rather than freeze time. One such gem is &lt;a href=&#34;https://github.com/travisjeffery/timecop&#34;&gt;Timecop&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When using Rack::Test, beware if attempting to visit absolute URLs. For example, a session might not be shared between visits to &lt;code&gt;posts_path&lt;/code&gt; and &lt;code&gt;posts_url&lt;/code&gt;. If testing an absolute URL in an Action Mailer email, set &lt;code&gt;default_url_options&lt;/code&gt; to match the Rails default of &lt;code&gt;www.example.com&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Server errors will only be raised in the session that initiates the server thread. If you are testing for specific server errors and using multiple sessions make sure to test for the errors using the initial session (usually :default)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If WebMock is enabled, you may encounter a &#34;Too many open files&#34; error. A simple &lt;code&gt;page.find&lt;/code&gt; call may cause thousands of HTTP requests until the timeout occurs. By default, WebMock will cause each of these requests to spawn a new connection. To work around this problem, you may need to &lt;a href=&#34;https://github.com/bblimke/webmock/raw/master/README.md#connecting-on-nethttpstart&#34;&gt;enable WebMock&#39;s &lt;code&gt;net_http_connect_on_start: true&lt;/code&gt; parameter&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;threadsafe&#34;&gt;&lt;/a&gt;&#34;Threadsafe&#34; mode&lt;/h2&gt; &#xA;&lt;p&gt;In normal mode most of Capybara&#39;s configuration options are global settings which can cause issues if using multiple sessions and wanting to change a setting for only one of the sessions. To provide support for this type of usage Capybara now provides a &#34;threadsafe&#34; mode which can be enabled by setting&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Capybara.threadsafe = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This setting can only be changed before any sessions have been created. In &#34;threadsafe&#34; mode the following behaviors of Capybara change&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Most options can now be set on a session. These can either be set at session creation time or after, and default to the global options at the time of session creation. Options which are NOT session specific are &lt;code&gt;app&lt;/code&gt;, &lt;code&gt;reuse_server&lt;/code&gt;, &lt;code&gt;default_driver&lt;/code&gt;, &lt;code&gt;javascript_driver&lt;/code&gt;, and (obviously) &lt;code&gt;threadsafe&lt;/code&gt;. Any drivers and servers registered through &lt;code&gt;register_driver&lt;/code&gt; and &lt;code&gt;register_server&lt;/code&gt; are also global.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;my_session = Capybara::Session.new(:driver, some_app) do |config|&#xA;  config.automatic_label_click = true # only set for my_session&#xA;end&#xA;my_session.config.default_max_wait_time = 10 # only set for my_session&#xA;Capybara.default_max_wait_time = 2 # will not change the default_max_wait in my_session&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;current_driver&lt;/code&gt; and &lt;code&gt;session_name&lt;/code&gt; are thread specific. This means that &lt;code&gt;using_session&lt;/code&gt; and &lt;code&gt;using_driver&lt;/code&gt; also only affect the current thread.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;development&#34;&gt;&lt;/a&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;To set up a development environment, simply do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle install&#xA;bundle exec rake  # run the test suite with Firefox - requires `geckodriver` to be installed&#xA;bundle exec rake spec_chrome # run the test suite with Chrome - require `chromedriver` to be installed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/teamcapybara/capybara/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for how to send issues and pull requests.&lt;/p&gt;</summary>
  </entry>
</feed>