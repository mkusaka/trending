<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-06T01:45:38Z</updated>
  <subtitle>Weekly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>antiwork/gumroad</title>
    <updated>2025-07-06T01:45:38Z</updated>
    <id>tag:github.com,2025-07-06:/antiwork/gumroad</id>
    <link href="https://github.com/antiwork/gumroad" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source srcset=&#34;https://public-files.gumroad.com/logo/gumroad-dark.svg&#34; media=&#34;(prefers-color-scheme: dark)&#34;&gt; &#xA;  &lt;source srcset=&#34;https://public-files.gumroad.com/logo/gumroad.svg&#34; media=&#34;(prefers-color-scheme: light)&#34;&gt; &#xA;  &lt;img src=&#34;https://public-files.gumroad.com/logo/gumroad.svg?sanitize=true&#34; height=&#34;100&#34; alt=&#34;Gumroad logo&#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;strong&gt;Sell your stuff. See what sticks.&lt;/strong&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://gumroad.com&#34;&gt;Gumroad&lt;/a&gt; is an e-commerce platform that enables creators to sell products directly to consumers. This repository contains the source code for the Gumroad web application. &lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antiwork/gumroad/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antiwork/gumroad/main/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antiwork/gumroad/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antiwork/gumroad/main/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antiwork/gumroad/main/#running-locally&#34;&gt;Running Locally&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antiwork/gumroad/main/#development&#34;&gt;Development&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antiwork/gumroad/main/#logging-in&#34;&gt;Logging in&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antiwork/gumroad/main/#resetting-elasticsearch-indices&#34;&gt;Resetting Elasticsearch indices&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antiwork/gumroad/main/#push-notifications&#34;&gt;Push Notifications&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antiwork/gumroad/main/#common-development-tasks&#34;&gt;Common Development Tasks&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antiwork/gumroad/main/#linting&#34;&gt;Linting&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ðŸ’¡ If you&#39;re on Windows, follow our &lt;a href=&#34;https://raw.githubusercontent.com/antiwork/gumroad/main/docs/development/windows.md&#34;&gt;Windows setup guide&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Before you begin, ensure you have the following installed:&lt;/p&gt; &#xA;&lt;h4&gt;Ruby&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ruby-lang.org/en/documentation/installation/&#34;&gt;https://www.ruby-lang.org/en/documentation/installation/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install the version listed in &lt;a href=&#34;https://raw.githubusercontent.com/antiwork/gumroad/main/.ruby-version&#34;&gt;the .ruby-version file&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/download&#34;&gt;https://nodejs.org/en/download&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install the version listed in &lt;a href=&#34;https://raw.githubusercontent.com/antiwork/gumroad/main/.node-version&#34;&gt;the .node-version file&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Docker&lt;/h4&gt; &#xA;&lt;p&gt;We use Docker to setup the services for development environment.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For MacOS: Download the Docker app from the &lt;a href=&#34;https://www.docker.com/products/docker-desktop&#34;&gt;Docker website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For Linux:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo wget -qO- https://get.docker.com/ | sh&#xA;sudo usermod -aG docker $(whoami)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;MySQL &amp;amp; Percona Toolkit&lt;/h4&gt; &#xA;&lt;p&gt;Install a local version of MySQL 8.0.x to match the version running in production.&lt;/p&gt; &#xA;&lt;p&gt;The local version of MySQL is a dependency of the Ruby &lt;code&gt;mysql2&lt;/code&gt; gem. You do not need to start an instance of the MySQL service locally. The app will connect to a MySQL instance running in the Docker container.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For MacOS:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install mysql@8.0 percona-toolkit&#xA;brew link --force mysql@8.0&#xA;&#xA;# to use Homebrew&#39;s `openssl`:&#xA;brew install openssl&#xA;bundle config --global build.mysql2 --with-opt-dir=&#34;$(brew --prefix openssl)&#34;&#xA;&#xA;# ensure MySQL is not running as a service&#xA;brew services stop mysql@8.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For Linux: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;MySQL: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/linux-installation.html&#34;&gt;https://dev.mysql.com/doc/refman/8.0/en/linux-installation.html&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;apt install libmysqlclient-dev&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Percona Toolkit: &lt;a href=&#34;https://www.percona.com/doc/percona-toolkit/LATEST/installation.html&#34;&gt;https://www.percona.com/doc/percona-toolkit/LATEST/installation.html&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Image Processing Libraries&lt;/h4&gt; &#xA;&lt;h5&gt;ImageMagick&lt;/h5&gt; &#xA;&lt;p&gt;We use &lt;code&gt;imagemagick&lt;/code&gt; for preview editing.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For MacOS: &lt;code&gt;brew install imagemagick&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;For Linux: &lt;code&gt;sudo apt-get install imagemagick&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;libvips&lt;/h5&gt; &#xA;&lt;p&gt;For newer image formats we use &lt;code&gt;libvips&lt;/code&gt; for image processing with ActiveStorage.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For MacOS: &lt;code&gt;brew install libvips&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;For Linux: &lt;code&gt;sudo apt-get install libvips-dev&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;FFmpeg&lt;/h4&gt; &#xA;&lt;p&gt;We use &lt;code&gt;ffprobe&lt;/code&gt; that comes with &lt;code&gt;FFmpeg&lt;/code&gt; package to fetch metadata from video files.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For MacOS: &lt;code&gt;brew install ffmpeg&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;For Linux: &lt;code&gt;sudo apt-get install ffmpeg&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;PDFtk&lt;/h4&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://www.pdflabs.com/tools/pdftk-server/&#34;&gt;pdftk&lt;/a&gt; to stamp PDF files with the Gumroad logo and the buyers&#39; emails.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For MacOS: Download from &lt;a href=&#34;https://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/pdftk_server-2.02-mac_osx-10.11-setup.pkg&#34;&gt;here&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; pdftk may be blocked by Apple&#39;s firewall. If this happens, go to Settings &amp;gt; Privacy &amp;amp; Security and click &#34;Open Anyways&#34; to allow the installation.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;For Linux: &lt;code&gt;sudo apt-get install pdftk&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;h4&gt;Bundler and gems&lt;/h4&gt; &#xA;&lt;p&gt;We use Bundler to install Ruby gems.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;gem install bundler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure Bundler to install gems without production or staging dependencies by default:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bundle config --local without production staging&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install gems:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also make sure to install &lt;code&gt;dotenv&lt;/code&gt; as it is required for some console commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;gem install dotenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;npm and Node.js dependencies&lt;/h4&gt; &#xA;&lt;p&gt;Make sure the correct version of &lt;code&gt;npm&lt;/code&gt; is enabled:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;corepack enable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;h4&gt;Set up Custom credentials&lt;/h4&gt; &#xA;&lt;p&gt;App can be booted without any custom credentials. But if you would like to use services that require custom credentials (e.g. S3, Stripe, Resend, etc.), you can copy the &lt;code&gt;.env.example&lt;/code&gt; file to &lt;code&gt;.env&lt;/code&gt; and fill in the values.&lt;/p&gt; &#xA;&lt;h4&gt;Local SSL Certificates&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install mkcert on macOS:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install mkcert&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For other operating systems, see &lt;a href=&#34;https://github.com/FiloSottile/mkcert?tab=readme-ov-file#installation&#34;&gt;mkcert installation instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Generate certificates by running:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bin/generate_ssl_certificates&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running Locally&lt;/h3&gt; &#xA;&lt;h4&gt;Start Docker services&lt;/h4&gt; &#xA;&lt;p&gt;If you installed Docker Desktop (on a Mac or Windows machine), you can run the following command to start the Docker services:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are on Linux, or installed Docker via a package manager on a mac, you may have to manually give docker superuser access to open ports 80 and 443. To do that, use &lt;code&gt;sudo make local&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;This command will not terminate. You run this in one tab and start the application in another tab. If you want to run Docker services in the background, use &lt;code&gt;LOCAL_DETACHED=true make local&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;h4&gt;Set up the database&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bin/rails db:prepare&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Linux (Debian / Ubuntu) you might need the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;apt install libxslt-dev libxml2-dev&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Start the application&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bin/dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This starts the Rails server, the JavaScript build system, and a Sidekiq worker.&lt;/p&gt; &#xA;&lt;p&gt;You can now access the application at &lt;code&gt;https://gumroad.dev&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Logging in&lt;/h3&gt; &#xA;&lt;p&gt;You can log in with the username &lt;code&gt;seller@gumroad.com&lt;/code&gt; and the password &lt;code&gt;password&lt;/code&gt;. The two-factor authentication code is &lt;code&gt;000000&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Read more about logging in as a user with a different team role at &lt;a href=&#34;https://raw.githubusercontent.com/antiwork/gumroad/main/docs/users.md&#34;&gt;Users &amp;amp; authentication&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Resetting Elasticsearch indices&lt;/h3&gt; &#xA;&lt;p&gt;You will need to explicitly reindex Elasticsearch to populate the indices after setup, otherwise you will see &lt;code&gt;index_not_found_exception&lt;/code&gt; errors when you visit the dev application. You can reset them using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Run this in a rails console:&#xA;DevTools.delete_all_indices_and_reindex_all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Push Notifications&lt;/h3&gt; &#xA;&lt;p&gt;To send push notifications:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;INITIALIZE_RPUSH_APPS=true bundle exec rpush start -e development -f&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Common Development Tasks&lt;/h3&gt; &#xA;&lt;h4&gt;Rails console:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bin/rails c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Rake tasks:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bin/rake task_name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linting&lt;/h3&gt; &#xA;&lt;p&gt;We use ESLint for JS, and Rubocop for Ruby. Your editor should support displaying and fixing issues reported by these inline, and CI will automatically check and fix (if possible) these.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like, you can run &lt;code&gt;git config --local core.hooksPath .githooks&lt;/code&gt; to check for these locally when committing.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>LoopKit/LoopWorkspace</title>
    <updated>2025-07-06T01:45:38Z</updated>
    <id>tag:github.com,2025-07-06:/LoopKit/LoopWorkspace</id>
    <link href="https://github.com/LoopKit/LoopWorkspace" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LoopWorkspace&lt;/h1&gt; &#xA;&lt;p&gt;The Loop app can be built using GitHub in a browser on any computer or using a Mac with Xcode.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Non-developers may prefer the GitHub method&lt;/li&gt; &#xA; &lt;li&gt;Developers or Loopers who want full build control may prefer the Mac/Xcode method&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;GitHub Build Instructions&lt;/h2&gt; &#xA;&lt;p&gt;The GitHub Build Instructions are at this &lt;a href=&#34;https://raw.githubusercontent.com/LoopKit/LoopWorkspace/main/fastlane/testflight.md&#34;&gt;link&lt;/a&gt; and further expanded in &lt;a href=&#34;https://loopkit.github.io/loopdocs/gh-actions/gh-overview/&#34;&gt;LoopDocs: Browser Build&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Mac/Xcode Build Instructions&lt;/h2&gt; &#xA;&lt;p&gt;The rest of this README contains information needed for Mac/Xcode build. Additonal instructions are found in &lt;a href=&#34;https://loopkit.github.io/loopdocs/build/overview/&#34;&gt;LoopDocs: Mac/Xcode Build&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Clone&lt;/h3&gt; &#xA;&lt;p&gt;This repository uses git submodules to pull in the various workspace dependencies.&lt;/p&gt; &#xA;&lt;p&gt;To clone this repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --branch=&amp;lt;branch&amp;gt; --recurse-submodules https://github.com/LoopKit/LoopWorkspace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; with the initial LoopWorkspace repository branch you wish to checkout.&lt;/p&gt; &#xA;&lt;h3&gt;Open&lt;/h3&gt; &#xA;&lt;p&gt;Change to the cloned directory and open the workspace in Xcode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd LoopWorkspace&#xA;xed .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Input your development team&lt;/h3&gt; &#xA;&lt;p&gt;You should be able to build to a simulator without changing anything. But if you wish to build to a real device, you&#39;ll need a developer account, and you&#39;ll need to tell Xcode about your team id, which you can find at &lt;a href=&#34;https://developer.apple.com/&#34;&gt;https://developer.apple.com/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Select the LoopConfigOverride file in Xcode&#39;s project navigator, uncomment the &lt;code&gt;LOOP_DEVELOPMENT_TEAM&lt;/code&gt;, and replace the existing team id with your own id.&lt;/p&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;p&gt;Select the &#34;LoopWorkspace&#34; scheme (not the &#34;Loop&#34; scheme) and Build, Run, or Test.&lt;/p&gt;</summary>
  </entry>
</feed>