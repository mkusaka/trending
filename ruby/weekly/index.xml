<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-02T02:03:22Z</updated>
  <subtitle>Weekly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kaminari/kaminari</title>
    <updated>2022-06-02T02:03:22Z</updated>
    <id>tag:github.com,2022-06-02:/kaminari/kaminari</id>
    <link href="https://github.com/kaminari/kaminari" rel="alternate"></link>
    <summary type="html">&lt;p&gt;âš¡ A Scope &amp; Engine based, clean, powerful, customizable and sophisticated paginator for Ruby webapps&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kaminari &lt;a href=&#34;https://github.com/kaminari/kaminari/actions&#34;&gt;&lt;img src=&#34;https://github.com/kaminari/kaminari/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/kaminari/kaminari&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/kaminari/kaminari/badges/gpa.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;A Scope &amp;amp; Engine based, clean, powerful, customizable and sophisticated paginator for modern web app frameworks and ORMs&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Clean&lt;/h3&gt; &#xA;&lt;p&gt;Does not globally pollute &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Hash&lt;/code&gt;, &lt;code&gt;Object&lt;/code&gt; or &lt;code&gt;AR::Base&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Easy to Use&lt;/h3&gt; &#xA;&lt;p&gt;Just bundle the gem, then your models are ready to be paginated. No configuration required. Don&#39;t have to define anything in your models or helpers.&lt;/p&gt; &#xA;&lt;h3&gt;Simple Scope-based API&lt;/h3&gt; &#xA;&lt;p&gt;Everything is method chainable with less &#34;Hasheritis&#34;. You know, that&#39;s the modern Rails way. No special collection class or anything for the paginated values, instead using a general &lt;code&gt;AR::Relation&lt;/code&gt; instance. So, of course you can chain any other conditions before or after the paginator scope.&lt;/p&gt; &#xA;&lt;h3&gt;Customizable Engine-based I18n-aware Helpers&lt;/h3&gt; &#xA;&lt;p&gt;As the whole pagination helper is basically just a collection of links and non-links, Kaminari renders each of them through its own partial template inside the Engine. So, you can easily modify their behaviour, style or whatever by overriding partial templates.&lt;/p&gt; &#xA;&lt;h3&gt;ORM &amp;amp; Template Engine Agnostic&lt;/h3&gt; &#xA;&lt;p&gt;Kaminari supports multiple ORMs (ActiveRecord, DataMapper, Mongoid, MongoMapper) multiple web frameworks (Rails, Sinatra, Grape), and multiple template engines (ERB, Haml, Slim).&lt;/p&gt; &#xA;&lt;h3&gt;Modern&lt;/h3&gt; &#xA;&lt;p&gt;The pagination helper outputs the HTML5 &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; tag by default. Plus, the helper supports Rails unobtrusive Ajax.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Versions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Ruby 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 3.0, 3.1, 3.2&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Rails 4.1, 4.2, 5.0, 5.1, 5.2, 6.0, 6.1, 7.0, 7.1&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sinatra 1.4, 2.0&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Haml 3+&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Mongoid 3+&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MongoMapper 0.9+&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;DataMapper 1.1.0+&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install kaminari on the default Rails stack, just put this line in your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;kaminari&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then bundle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re building non-Rails of non-ActiveRecord app and want the pagination feature on it, please take a look at &lt;a href=&#34;https://raw.githubusercontent.com/kaminari/kaminari/master/#other-frameworklibrary-support&#34;&gt;Other Framework/Library Support&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h2&gt;Query Basics&lt;/h2&gt; &#xA;&lt;h3&gt;The &lt;code&gt;page&lt;/code&gt; Scope&lt;/h3&gt; &#xA;&lt;p&gt;To fetch the 7th page of users (default &lt;code&gt;per_page&lt;/code&gt; is 25)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.page(7)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: pagination starts at page 1, not at page 0 (page(0) will return the same results as page(1)).&lt;/p&gt; &#xA;&lt;p&gt;Kaminari does not add an &lt;code&gt;order&lt;/code&gt; to queries. To avoid surprises, you should generally include an order in paginated queries. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.order(:name).page(7)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can get page numbers or page conditions by using below methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.count                     #=&amp;gt; 1000&#xA;User.page(1).limit_value       #=&amp;gt; 20&#xA;User.page(1).total_pages       #=&amp;gt; 50&#xA;User.page(1).current_page      #=&amp;gt; 1&#xA;User.page(1).next_page         #=&amp;gt; 2&#xA;User.page(2).prev_page         #=&amp;gt; 1&#xA;User.page(1).first_page?       #=&amp;gt; true&#xA;User.page(50).last_page?       #=&amp;gt; true&#xA;User.page(100).out_of_range?   #=&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;The &lt;code&gt;per&lt;/code&gt; Scope&lt;/h3&gt; &#xA;&lt;p&gt;To show a lot more users per each page (change the &lt;code&gt;per&lt;/code&gt; value)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.order(:name).page(7).per(50)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;per&lt;/code&gt; scope is not directly defined on the models but is just a method defined on the page scope. This is absolutely reasonable because you will never actually use &lt;code&gt;per&lt;/code&gt; without specifying the &lt;code&gt;page&lt;/code&gt; number.&lt;/p&gt; &#xA;&lt;p&gt;Keep in mind that &lt;code&gt;per&lt;/code&gt; internally utilizes &lt;code&gt;limit&lt;/code&gt; and so it will override any &lt;code&gt;limit&lt;/code&gt; that was set previously. And if you want to get the size for all request records you can use &lt;code&gt;total_count&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.count                     #=&amp;gt; 1000&#xA;a = User.limit(5); a.count     #=&amp;gt; 5&#xA;a.page(1).per(20).size         #=&amp;gt; 20&#xA;a.page(1).per(20).total_count  #=&amp;gt; 1000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;The &lt;code&gt;padding&lt;/code&gt; Scope&lt;/h3&gt; &#xA;&lt;p&gt;Occasionally you need to pad a number of records that is not a multiple of the page size.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.order(:name).page(7).per(50).padding(3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;padding&lt;/code&gt; scope also is not directly defined on the models.&lt;/p&gt; &#xA;&lt;h3&gt;Unscoping&lt;/h3&gt; &#xA;&lt;p&gt;If for some reason you need to unscope &lt;code&gt;page&lt;/code&gt; and &lt;code&gt;per&lt;/code&gt; methods you can call &lt;code&gt;except(:limit, :offset)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;users = User.order(:name).page(7).per(50)&#xA;unpaged_users = users.except(:limit, :offset) # unpaged_users will not use the kaminari scopes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuring Kaminari&lt;/h2&gt; &#xA;&lt;h3&gt;General Configuration Options&lt;/h3&gt; &#xA;&lt;p&gt;You can configure the following default values by overriding these values using &lt;code&gt;Kaminari.configure&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;default_per_page      # 25 by default&#xA;max_per_page          # nil by default&#xA;max_pages             # nil by default&#xA;window                # 4 by default&#xA;outer_window          # 0 by default&#xA;left                  # 0 by default&#xA;right                 # 0 by default&#xA;page_method_name      # :page by default&#xA;param_name            # :page by default&#xA;params_on_first_page  # false by default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There&#39;s a handy generator that generates the default configuration file into config/initializers directory. Run the following generator command, then edit the generated file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% rails g kaminari:config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Changing &lt;code&gt;page_method_name&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can change the method name &lt;code&gt;page&lt;/code&gt; to &lt;code&gt;bonzo&lt;/code&gt; or &lt;code&gt;plant&lt;/code&gt; or whatever you like, in order to play nice with existing &lt;code&gt;page&lt;/code&gt; method or association or scope or any other plugin that defines &lt;code&gt;page&lt;/code&gt; method on your models.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring Default per_page Value for Each Model by &lt;code&gt;paginates_per&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can specify default &lt;code&gt;per_page&lt;/code&gt; value per each model using the following declarative DSL.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ActiveRecord::Base&#xA;  paginates_per 50&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring Max per_page Value for Each Model by &lt;code&gt;max_paginates_per&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can specify max &lt;code&gt;per_page&lt;/code&gt; value per each model using the following declarative DSL. If the variable that specified via &lt;code&gt;per&lt;/code&gt; scope is more than this variable, &lt;code&gt;max_paginates_per&lt;/code&gt; is used instead of it. Default value is nil, which means you are not imposing any max &lt;code&gt;per_page&lt;/code&gt; value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ActiveRecord::Base&#xA;  max_paginates_per 100&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring max_pages Value for Each Model by &lt;code&gt;max_pages&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can specify &lt;code&gt;max_pages&lt;/code&gt; value per each model using the following declarative DSL. This value restricts the total number of pages that can be returned. Useful for setting limits on large collections.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ActiveRecord::Base&#xA;  max_pages 100&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring params_on_first_page when using ransack_memory&lt;/h3&gt; &#xA;&lt;p&gt;If you are using &lt;a href=&#34;https://github.com/richardrails/ransack_memory&#34;&gt;the &lt;code&gt;ransack_memory&lt;/code&gt; gem&lt;/a&gt; and experience problems navigating back to the previous or first page, set the &lt;code&gt;params_on_first_page&lt;/code&gt; setting to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Controllers&lt;/h2&gt; &#xA;&lt;h3&gt;The Page Parameter Is in &lt;code&gt;params[:page]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Typically, your controller code will look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;@users = User.order(:name).page params[:page]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Views&lt;/h2&gt; &#xA;&lt;h3&gt;The Same Old Helper Method&lt;/h3&gt; &#xA;&lt;p&gt;Just call the &lt;code&gt;paginate&lt;/code&gt; helper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= paginate @users %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will render several &lt;code&gt;?page=N&lt;/code&gt; pagination links surrounded by an HTML5 &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; tag.&lt;/p&gt; &#xA;&lt;h2&gt;Helpers&lt;/h2&gt; &#xA;&lt;h3&gt;The &lt;code&gt;paginate&lt;/code&gt; Helper Method&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= paginate @users %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would output several pagination links such as &lt;code&gt;Â« First â€¹ Prev ... 2 3 4 5 6 7 8 9 10 ... Next â€º Last Â»&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Specifying the &#34;inner window&#34; Size (4 by default)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= paginate @users, window: 2 %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would output something like &lt;code&gt;... 5 6 7 8 9 ...&lt;/code&gt; when 7 is the current page.&lt;/p&gt; &#xA;&lt;h3&gt;Specifying the &#34;outer window&#34; Size (0 by default)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= paginate @users, outer_window: 3 %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would output something like &lt;code&gt;1 2 3 ...(snip)... 18 19 20&lt;/code&gt; while having 20 pages in total.&lt;/p&gt; &#xA;&lt;h3&gt;Outer Window Can Be Separately Specified by left, right (0 by default)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= paginate @users, left: 1, right: 3 %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would output something like &lt;code&gt;1 ...(snip)... 18 19 20&lt;/code&gt; while having 20 pages in total.&lt;/p&gt; &#xA;&lt;h3&gt;Changing the Parameter Name (&lt;code&gt;:param_name&lt;/code&gt;) for the Links&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= paginate @users, param_name: :pagina %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would modify the query parameter name on each links.&lt;/p&gt; &#xA;&lt;h3&gt;Extra Parameters (&lt;code&gt;:params&lt;/code&gt;) for the Links&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= paginate @users, params: {controller: &#39;foo&#39;, action: &#39;bar&#39;, format: :turbo_stream} %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would modify each link&#39;s &lt;code&gt;url_option&lt;/code&gt;. :&lt;code&gt;controller&lt;/code&gt; and :&lt;code&gt;action&lt;/code&gt; might be the keys in common.&lt;/p&gt; &#xA;&lt;h3&gt;Ajax Links (crazy simple, but works perfectly!)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= paginate @users, remote: true %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would add &lt;code&gt;data-remote=&#34;true&#34;&lt;/code&gt; to all the links inside.&lt;/p&gt; &#xA;&lt;h3&gt;Specifying an Alternative Views Directory (default is kaminari/)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= paginate @users, views_prefix: &#39;templates&#39; %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would search for partials in &lt;code&gt;app/views/templates/kaminari&lt;/code&gt;. This option makes it easier to do things like A/B testing pagination templates/themes, using new/old templates at the same time as well as better integration with other gems such as &lt;a href=&#34;https://github.com/apotonick/cells&#34;&gt;cells&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;The &lt;code&gt;link_to_next_page&lt;/code&gt; and &lt;code&gt;link_to_previous_page&lt;/code&gt; (aliased to &lt;code&gt;link_to_prev_page&lt;/code&gt;) Helper Methods&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= link_to_next_page @items, &#39;Next Page&#39; %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This simply renders a link to the next page. This would be helpful for creating a Twitter-like pagination feature.&lt;/p&gt; &#xA;&lt;p&gt;The helper methods support a &lt;code&gt;params&lt;/code&gt; option to further specify the link. If &lt;code&gt;format&lt;/code&gt; needs to be set, inlude it in the &lt;code&gt;params&lt;/code&gt; hash.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= link_to_next_page @items, &#39;Next Page&#39;, params: {controller: &#39;foo&#39;, action: &#39;bar&#39;, format: :turbo_stream} %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;The &lt;code&gt;page_entries_info&lt;/code&gt; Helper Method&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= page_entries_info @posts %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This renders a helpful message with numbers of displayed vs. total entries.&lt;/p&gt; &#xA;&lt;p&gt;By default, the message will use the humanized class name of objects in collection: for instance, &#34;project types&#34; for ProjectType models. The namespace will be cut out and only the last name will be used. Override this with the &lt;code&gt;:entry_name&lt;/code&gt; parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= page_entries_info @posts, entry_name: &#39;item&#39; %&amp;gt;&#xA;#=&amp;gt; Displaying items 6 - 10 of 26 in total&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;The &lt;code&gt;rel_next_prev_link_tags&lt;/code&gt; Helper Method&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= rel_next_prev_link_tags @users %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This renders the rel next and prev link tags for the head.&lt;/p&gt; &#xA;&lt;h3&gt;The &lt;code&gt;path_to_next_page&lt;/code&gt; Helper Method&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= path_to_next_page @users %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This returns the server relative path to the next page.&lt;/p&gt; &#xA;&lt;h3&gt;The &lt;code&gt;path_to_prev_page&lt;/code&gt; Helper Method&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= path_to_prev_page @users %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This returns the server relative path to the previous page.&lt;/p&gt; &#xA;&lt;h2&gt;I18n and Labels&lt;/h2&gt; &#xA;&lt;p&gt;The default labels for &#39;first&#39;, &#39;last&#39;, &#39;previous&#39;, &#39;...&#39; and &#39;next&#39; are stored in the I18n yaml inside the engine, and rendered through I18n API. You can switch the label value per I18n.locale for your internationalized application. Keys and the default values are the following. You can override them by adding to a YAML file in your &lt;code&gt;Rails.root/config/locales&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  views:&#xA;    pagination:&#xA;      first: &#34;&amp;amp;laquo; First&#34;&#xA;      last: &#34;Last &amp;amp;raquo;&#34;&#xA;      previous: &#34;&amp;amp;lsaquo; Prev&#34;&#xA;      next: &#34;Next &amp;amp;rsaquo;&#34;&#xA;      truncate: &#34;&amp;amp;hellip;&#34;&#xA;  helpers:&#xA;    page_entries_info:&#xA;      one_page:&#xA;        display_entries:&#xA;          zero: &#34;No %{entry_name} found&#34;&#xA;          one: &#34;Displaying &amp;lt;b&amp;gt;1&amp;lt;/b&amp;gt; %{entry_name}&#34;&#xA;          other: &#34;Displaying &amp;lt;b&amp;gt;all %{count}&amp;lt;/b&amp;gt; %{entry_name}&#34;&#xA;      more_pages:&#xA;        display_entries: &#34;Displaying %{entry_name} &amp;lt;b&amp;gt;%{first}&amp;amp;nbsp;-&amp;amp;nbsp;%{last}&amp;lt;/b&amp;gt; of &amp;lt;b&amp;gt;%{total}&amp;lt;/b&amp;gt; in total&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use non-English localization see &lt;a href=&#34;https://github.com/svenfuchs/i18n/raw/master/test/test_data/locales/plurals.rb&#34;&gt;i18n rules&lt;/a&gt; for changing &lt;code&gt;one_page:display_entries&lt;/code&gt; block.&lt;/p&gt; &#xA;&lt;h2&gt;Customizing the Pagination Helper&lt;/h2&gt; &#xA;&lt;p&gt;Kaminari includes a handy template generator.&lt;/p&gt; &#xA;&lt;h3&gt;To Edit Your Paginator&lt;/h3&gt; &#xA;&lt;p&gt;Run the generator first,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% rails g kaminari:views default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then edit the partials in your app&#39;s &lt;code&gt;app/views/kaminari/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;For Haml/Slim Users&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;a href=&#34;https://github.com/haml/html2haml&#34;&gt;html2haml gem&lt;/a&gt; or the &lt;a href=&#34;https://github.com/slim-template/html2slim&#34;&gt;html2slim gem&lt;/a&gt; to convert erb templates. The kaminari gem will automatically pick up haml/slim templates if you place them in &lt;code&gt;app/views/kaminari/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Multiple Templates&lt;/h3&gt; &#xA;&lt;p&gt;In case you need different templates for your paginator (for example public and admin), you can pass &lt;code&gt;--views-prefix directory&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% rails g kaminari:views default --views-prefix admin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;that will generate partials in &lt;code&gt;app/views/admin/kaminari/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Themes&lt;/h3&gt; &#xA;&lt;p&gt;The generator has the ability to fetch several sample template themes from the external repository (&lt;a href=&#34;https://github.com/amatsuda/kaminari_themes&#34;&gt;https://github.com/amatsuda/kaminari_themes&lt;/a&gt;) in addition to the bundled &#34;default&#34; one, which will help you creating a nice looking paginator.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% rails g kaminari:views THEME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see the full list of available themes, take a look at the themes repository, or just hit the generator without specifying &lt;code&gt;THEME&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% rails g kaminari:views&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multiple Themes&lt;/h3&gt; &#xA;&lt;p&gt;To utilize multiple themes from within a single application, create a directory within the app/views/kaminari/ and move your custom template files into that directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% rails g kaminari:views default (skip if you have existing kaminari views)&#xA;% cd app/views/kaminari&#xA;% mkdir my_custom_theme&#xA;% cp _*.html.* my_custom_theme/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, reference that directory when calling the &lt;code&gt;paginate&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= paginate @users, theme: &#39;my_custom_theme&#39; %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Customize away!&lt;/p&gt; &#xA;&lt;p&gt;Note: if the theme isn&#39;t present or none is specified, kaminari will default back to the views included within the gem.&lt;/p&gt; &#xA;&lt;h2&gt;Paginating Without Issuing SELECT COUNT Query&lt;/h2&gt; &#xA;&lt;p&gt;Generally the paginator needs to know the total number of records to display the links, but sometimes we don&#39;t need the total number of records and just need the &#34;previous page&#34; and &#34;next page&#34; links. For such use case, Kaminari provides &lt;code&gt;without_count&lt;/code&gt; mode that creates a paginatable collection without counting the number of all records. This may be helpful when you&#39;re dealing with a very large dataset because counting on a big table tends to become slow on RDBMS.&lt;/p&gt; &#xA;&lt;p&gt;Just add &lt;code&gt;.without_count&lt;/code&gt; to your paginated object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.page(3).without_count&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In your view file, you can only use simple helpers like the following instead of the full-featured &lt;code&gt;paginate&lt;/code&gt; helper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= link_to_prev_page @users, &#39;Previous Page&#39; %&amp;gt;&#xA;&amp;lt;%= link_to_next_page @users, &#39;Next Page&#39; %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Paginating a Generic Array object&lt;/h2&gt; &#xA;&lt;p&gt;Kaminari provides an Array wrapper class that adapts a generic Array object to the &lt;code&gt;paginate&lt;/code&gt; view helper. However, the &lt;code&gt;paginate&lt;/code&gt; helper doesn&#39;t automatically handle your Array object (this is intentional and by design). &lt;code&gt;Kaminari::paginate_array&lt;/code&gt; method converts your Array object into a paginatable Array that accepts &lt;code&gt;page&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;@paginatable_array = Kaminari.paginate_array(my_array_object).page(params[:page]).per(10)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can specify the &lt;code&gt;total_count&lt;/code&gt; value through options Hash. This would be helpful when handling an Array-ish object that has a different &lt;code&gt;count&lt;/code&gt; value from actual &lt;code&gt;count&lt;/code&gt; such as RSolr search result or when you need to generate a custom pagination. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;@paginatable_array = Kaminari.paginate_array([], total_count: 145).page(params[:page]).per(10)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or, in the case of using an external API to source the page of data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page_size = 10&#xA;one_page = get_page_of_data params[:page], page_size&#xA;@paginatable_array = Kaminari.paginate_array(one_page.data, total_count: one_page.total_count).page(params[:page]).per(page_size)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Creating Friendly URLs and Caching&lt;/h2&gt; &#xA;&lt;p&gt;Because of the &lt;code&gt;page&lt;/code&gt; parameter and Rails routing, you can easily generate SEO and user-friendly URLs. For any resource you&#39;d like to paginate, just add the following to your &lt;code&gt;routes.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;resources :my_resources do&#xA;  get &#39;page/:page&#39;, action: :index, on: :collection&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using Rails 4 or later, you can simplify route definitions by using &lt;code&gt;concern&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;concern :paginatable do&#xA;  get &#39;(page/:page)&#39;, action: :index, on: :collection, as: &#39;&#39;&#xA;end&#xA;&#xA;resources :my_resources, concerns: :paginatable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create URLs like &lt;code&gt;/my_resources/page/33&lt;/code&gt; instead of &lt;code&gt;/my_resources?page=33&lt;/code&gt;. This is now a friendly URL, but it also has other added benefits...&lt;/p&gt; &#xA;&lt;p&gt;Because the &lt;code&gt;page&lt;/code&gt; parameter is now a URL segment, we can leverage on Rails page &lt;a href=&#34;http://guides.rubyonrails.org/caching_with_rails.html#page-caching&#34;&gt;caching&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;NOTE: In this example, I&#39;ve pointed the route to my &lt;code&gt;:index&lt;/code&gt; action. You may have defined a custom pagination action in your controller - you should point &lt;code&gt;action: :your_custom_action&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;h2&gt;Other Framework/Library Support&lt;/h2&gt; &#xA;&lt;h3&gt;The kaminari gem&lt;/h3&gt; &#xA;&lt;p&gt;Technically, the kaminari gem consists of 3 individual components:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;kaminari-core: the core pagination logic&#xA;kaminari-activerecord: Active Record adapter&#xA;kaminari-actionview: Action View adapter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So, bundling &lt;code&gt;gem &#39;kaminari&#39;&lt;/code&gt; is equivalent to the following 2 lines (kaminari-core is referenced from the adapters):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;kaminari-activerecord&#39;&#xA;gem &#39;kaminari-actionview&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;For Other ORM Users&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use other supported ORMs instead of ActiveRecord, for example Mongoid, bundle its adapter instead of kaminari-activerecord.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;kaminari-mongoid&#39;&#xA;gem &#39;kaminari-actionview&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Kaminari currently provides adapters for the following ORMs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Active Record: &lt;a href=&#34;https://github.com/kaminari/kaminari/tree/master/kaminari-activerecord&#34;&gt;https://github.com/kaminari/kaminari/tree/master/kaminari-activerecord&lt;/a&gt; (included in this repo)&lt;/li&gt; &#xA; &lt;li&gt;Mongoid: &lt;a href=&#34;https://github.com/kaminari/kaminari-mongoid&#34;&gt;https://github.com/kaminari/kaminari-mongoid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;MongoMapper: &lt;a href=&#34;https://github.com/kaminari/kaminari-mongo_mapper&#34;&gt;https://github.com/kaminari/kaminari-mongo_mapper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DataMapper: &lt;a href=&#34;https://github.com/kaminari/kaminari-data_mapper&#34;&gt;https://github.com/kaminari/kaminari-data_mapper&lt;/a&gt; (would not work on kaminari 1.0.x)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;For Other Web Framework Users&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use other web frameworks instead of Rails + Action View, for example Sinatra, bundle its adapter instead of kaminari-actionview.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;kaminari-activerecord&#39;&#xA;gem &#39;kaminari-sinatra&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Kaminari currently provides adapters for the following web frameworks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Action View: &lt;a href=&#34;https://github.com/kaminari/kaminari/tree/master/kaminari-actionview&#34;&gt;https://github.com/kaminari/kaminari/tree/master/kaminari-actionview&lt;/a&gt; (included in this repo)&lt;/li&gt; &#xA; &lt;li&gt;Sinatra: &lt;a href=&#34;https://github.com/kaminari/kaminari-sinatra&#34;&gt;https://github.com/kaminari/kaminari-sinatra&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Grape: &lt;a href=&#34;https://github.com/kaminari/kaminari-grape&#34;&gt;https://github.com/kaminari/kaminari-grape&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;For More Information&lt;/h2&gt; &#xA;&lt;p&gt;Check out Kaminari recipes on the GitHub Wiki for more advanced tips and techniques. &lt;a href=&#34;https://github.com/kaminari/kaminari/wiki/Kaminari-recipes&#34;&gt;https://github.com/kaminari/kaminari/wiki/Kaminari-recipes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Questions, Feedback&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to message me on Github (amatsuda) or Twitter (&lt;a href=&#34;https://twitter.com/a_matsuda&#34;&gt;@a_matsuda&lt;/a&gt;) â˜‡â˜‡â˜‡ :)&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to Kaminari&lt;/h2&gt; &#xA;&lt;p&gt;Fork, fix, then send a pull request.&lt;/p&gt; &#xA;&lt;p&gt;To run the test suite locally against all supported frameworks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% bundle install&#xA;% rake test:all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To target the test suite against one framework:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% rake test:active_record_50&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find a list of supported test tasks by running &lt;code&gt;rake -T&lt;/code&gt;. You may also find it useful to run a specific test for a specific framework. To do so, you&#39;ll have to first make sure you have bundled everything for that configuration, then you can run the specific test:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% BUNDLE_GEMFILE=&#39;gemfiles/active_record_50.gemfile&#39; bundle install&#xA;% BUNDLE_GEMFILE=&#39;gemfiles/active_record_50.gemfile&#39; TEST=kaminari-core/test/requests/navigation_test.rb bundle exec rake test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2011- Akira Matsuda. See MIT-LICENSE for further details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>puma/puma</title>
    <updated>2022-06-02T02:03:22Z</updated>
    <id>tag:github.com,2022-06-02:/puma/puma</id>
    <link href="https://github.com/puma/puma" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Ruby/Rack web server built for parallelism&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://puma.io/images/logos/puma-logo-large.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Puma: A Ruby Web Server Built For Parallelism&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/puma/puma/actions?query=workflow%3ATests&#34;&gt;&lt;img src=&#34;https://github.com/puma/puma/workflows/Tests/badge.svg?branch=master&#34; alt=&#34;Actions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/puma/puma&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/puma/puma.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stackoverflow.com/questions/tagged/puma&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stackoverflow-Puma-blue.svg?sanitize=true&#34; alt=&#34;StackOverflow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Puma is a &lt;strong&gt;simple, fast, multi-threaded, and highly parallel HTTP 1.1 server for Ruby/Rack applications&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Built For Speed &amp;amp; Parallelism&lt;/h2&gt; &#xA;&lt;p&gt;Puma processes requests using a C-optimized Ragel extension (inherited from Mongrel) that provides fast, accurate HTTP 1.1 protocol parsing in a portable way. Puma then serves the request using a thread pool. Each request is served in a separate thread, so truly parallel Ruby implementations (JRuby, Rubinius) will use all available CPU cores.&lt;/p&gt; &#xA;&lt;p&gt;Originally designed as a server for &lt;a href=&#34;https://github.com/rubinius/rubinius&#34;&gt;Rubinius&lt;/a&gt;, Puma also works well with Ruby (MRI) and JRuby.&lt;/p&gt; &#xA;&lt;p&gt;On MRI, there is a Global VM Lock (GVL) that ensures only one thread can run Ruby code at a time. But if you&#39;re doing a lot of blocking IO (such as HTTP calls to external APIs like Twitter), Puma still improves MRI&#39;s throughput by allowing IO waiting to be done in parallel.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem install puma&#xA;$ puma&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Without arguments, puma will look for a rackup (.ru) file in working directory called &lt;code&gt;config.ru&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;SSL Connection Support&lt;/h2&gt; &#xA;&lt;p&gt;Puma will install/compile with support for ssl sockets, assuming OpenSSL development files are installed on the system.&lt;/p&gt; &#xA;&lt;p&gt;If the system does not have OpenSSL development files installed, Puma will install/compile, but it will not allow ssl connections.&lt;/p&gt; &#xA;&lt;h2&gt;Frameworks&lt;/h2&gt; &#xA;&lt;h3&gt;Rails&lt;/h3&gt; &#xA;&lt;p&gt;Puma is the default server for Rails, included in the generated Gemfile.&lt;/p&gt; &#xA;&lt;p&gt;Start your server with the &lt;code&gt;rails&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rails server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Many configuration options and Puma features are not available when using &lt;code&gt;rails server&lt;/code&gt;. It is recommended that you use Puma&#39;s executable instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle exec puma&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sinatra&lt;/h3&gt; &#xA;&lt;p&gt;You can run your Sinatra application with Puma from the command line like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ruby app.rb -s Puma&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to actually configure Puma using a config file, like &lt;code&gt;puma.rb&lt;/code&gt;, however, you need to use the &lt;code&gt;puma&lt;/code&gt; executable. To do this, you must add a rackup file to your Sinatra app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config.ru&#xA;require &#39;./app&#39;&#xA;run Sinatra::Application&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then start your application using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle exec puma&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Puma provides numerous options. Consult &lt;code&gt;puma -h&lt;/code&gt; (or &lt;code&gt;puma --help&lt;/code&gt;) for a full list of CLI options, or see &lt;code&gt;Puma::DSL&lt;/code&gt; or &lt;a href=&#34;https://github.com/puma/puma/raw/master/lib/puma/dsl.rb&#34;&gt;dsl.rb&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also find several configuration examples as part of the &lt;a href=&#34;https://github.com/puma/puma/tree/master/test/config&#34;&gt;test&lt;/a&gt; suite.&lt;/p&gt; &#xA;&lt;p&gt;For debugging purposes, you can set the environment variable &lt;code&gt;PUMA_LOG_CONFIG&lt;/code&gt; with a value and the loaded configuration will be printed as part of the boot process.&lt;/p&gt; &#xA;&lt;h3&gt;Thread Pool&lt;/h3&gt; &#xA;&lt;p&gt;Puma uses a thread pool. You can set the minimum and maximum number of threads that are available in the pool with the &lt;code&gt;-t&lt;/code&gt; (or &lt;code&gt;--threads&lt;/code&gt;) flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -t 8:32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Puma will automatically scale the number of threads, from the minimum until it caps out at the maximum, based on how much traffic is present. The current default is &lt;code&gt;0:16&lt;/code&gt; and on MRI is &lt;code&gt;0:5&lt;/code&gt;. Feel free to experiment, but be careful not to set the number of maximum threads to a large number, as you may exhaust resources on the system (or cause contention for the Global VM Lock, when using MRI).&lt;/p&gt; &#xA;&lt;p&gt;Be aware that additionally Puma creates threads on its own for internal purposes (e.g. handling slow clients). So, even if you specify -t 1:1, expect around 7 threads created in your application.&lt;/p&gt; &#xA;&lt;h3&gt;Clustered mode&lt;/h3&gt; &#xA;&lt;p&gt;Puma also offers &#34;clustered mode&#34;. Clustered mode &lt;code&gt;fork&lt;/code&gt;s workers from a master process. Each child process still has its own thread pool. You can tune the number of workers with the &lt;code&gt;-w&lt;/code&gt; (or &lt;code&gt;--workers&lt;/code&gt;) flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -t 8:32 -w 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with the &lt;code&gt;WEB_CONCURRENCY&lt;/code&gt; environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ WEB_CONCURRENCY=3 puma -t 8:32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that threads are still used in clustered mode, and the &lt;code&gt;-t&lt;/code&gt; thread flag setting is per worker, so &lt;code&gt;-w 2 -t 16:16&lt;/code&gt; will spawn 32 threads in total, with 16 in each worker process.&lt;/p&gt; &#xA;&lt;p&gt;In clustered mode, Puma can &#34;preload&#34; your application. This loads all the application code &lt;em&gt;prior&lt;/em&gt; to forking. Preloading reduces total memory usage of your application via an operating system feature called &lt;a href=&#34;https://en.wikipedia.org/wiki/Copy-on-write&#34;&gt;copy-on-write&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If the &lt;code&gt;WEB_CONCURRENCY&lt;/code&gt; environment variable is set to a value &amp;gt; 1 (and &lt;code&gt;--prune-bundler&lt;/code&gt; has not been specified), preloading will be enabled by default. Otherwise, you can use the &lt;code&gt;--preload&lt;/code&gt; flag from the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -w 3 --preload&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, if you&#39;re using a configuration file, you can use the &lt;code&gt;preload_app!&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/puma.rb&#xA;workers 3&#xA;preload_app!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Preloading canâ€™t be used with phased restart, since phased restart kills and restarts workers one-by-one, and preloading copies the code of master into the workers.&lt;/p&gt; &#xA;&lt;p&gt;When using clustered mode, you can specify a block in your configuration file that will be run on boot of each worker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/puma.rb&#xA;on_worker_boot do&#xA;  # configuration here&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This code can be used to setup the process before booting the application, allowing you to do some Puma-specific things that you don&#39;t want to embed in your application. For instance, you could fire a log notification that a worker booted or send something to statsd. This can be called multiple times.&lt;/p&gt; &#xA;&lt;p&gt;Constants loaded by your application (such as &lt;code&gt;Rails&lt;/code&gt;) will not be available in &lt;code&gt;on_worker_boot&lt;/code&gt; unless preloading is enabled.&lt;/p&gt; &#xA;&lt;p&gt;You can also specify a block to be run before workers are forked, using &lt;code&gt;before_fork&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/puma.rb&#xA;before_fork do&#xA;  # configuration here&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Error handling&lt;/h3&gt; &#xA;&lt;p&gt;If puma encounters an error outside of the context of your application, it will respond with a 500 and a simple textual error message (see &lt;code&gt;Puma::Server#lowlevel_error&lt;/code&gt; or &lt;a href=&#34;https://github.com/puma/puma/raw/master/lib/puma/server.rb&#34;&gt;server.rb&lt;/a&gt;). You can specify custom behavior for this scenario. For example, you can report the error to your third-party error-tracking service (in this example, &lt;a href=&#34;https://rollbar.com&#34;&gt;rollbar&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;lowlevel_error_handler do |e|&#xA;  Rollbar.critical(e)&#xA;  [500, {}, [&#34;An error has occurred, and engineers have been informed. Please reload the page. If you continue to have problems, contact support@example.com\n&#34;]]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Binding TCP / Sockets&lt;/h3&gt; &#xA;&lt;p&gt;Bind Puma to a socket with the &lt;code&gt;-b&lt;/code&gt; (or &lt;code&gt;--bind&lt;/code&gt;) flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -b tcp://127.0.0.1:9292&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use a UNIX Socket instead of TCP:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -b unix:///var/run/puma.sock&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to change the permissions of the UNIX socket, just add a umask parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -b &#39;unix:///var/run/puma.sock?umask=0111&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Need a bit of security? Use SSL sockets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -b &#39;ssl://127.0.0.1:9292?key=path_to_key&amp;amp;cert=path_to_cert&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Self-signed SSL certificates (via the &lt;a href=&#34;https://github.com/socketry/localhost&#34;&gt;&lt;code&gt;localhost&lt;/code&gt;&lt;/a&gt; gem, for development use):&lt;/h4&gt; &#xA;&lt;p&gt;Puma supports the &lt;a href=&#34;https://github.com/socketry/localhost&#34;&gt;&lt;code&gt;localhost&lt;/code&gt;&lt;/a&gt; gem for self-signed certificates. This is particularly useful if you want to use Puma with SSL locally, and self-signed certificates will work for your use-case. Currently, the integration can only be used in MRI.&lt;/p&gt; &#xA;&lt;p&gt;Puma automatically configures SSL when the &lt;a href=&#34;https://github.com/socketry/localhost&#34;&gt;&lt;code&gt;localhost&lt;/code&gt;&lt;/a&gt; gem is loaded in a &lt;code&gt;development&lt;/code&gt; environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Add the gem to your Gemfile&#xA;group(:development) do&#xA;  gem &#39;localhost&#39;&#xA;end&#xA;&#xA;# And require it implicitly using bundler&#xA;require &#34;bundler&#34;&#xA;Bundler.require(:default, ENV[&#34;RACK_ENV&#34;].to_sym)&#xA;&#xA;# Alternatively, you can require the gem in config.ru:&#xA;require &#39;./app&#39;&#xA;require &#39;localhost&#39;&#xA;run Sinatra::Application&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, Puma must be listening to an SSL socket:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ puma -b &#39;ssl://localhost:9292&#39; config.ru&#xA;&#xA;# The following options allow you to reach Puma over HTTP as well:&#xA;$ puma -b ssl://localhost:9292 -b tcp://localhost:9393 config.ru&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Controlling SSL Cipher Suites&lt;/h4&gt; &#xA;&lt;p&gt;To use or avoid specific SSL cipher suites, use &lt;code&gt;ssl_cipher_filter&lt;/code&gt; or &lt;code&gt;ssl_cipher_list&lt;/code&gt; options.&lt;/p&gt; &#xA;&lt;h5&gt;Ruby:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -b &#39;ssl://127.0.0.1:9292?key=path_to_key&amp;amp;cert=path_to_cert&amp;amp;ssl_cipher_filter=!aNULL:AES+SHA&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;JRuby:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -b &#39;ssl://127.0.0.1:9292?keystore=path_to_keystore&amp;amp;keystore-pass=keystore_password&amp;amp;ssl_cipher_list=TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://www.openssl.org/docs/man1.1.1/man1/ciphers.html&#34;&gt;https://www.openssl.org/docs/man1.1.1/man1/ciphers.html&lt;/a&gt; for cipher filter format and full list of cipher suites.&lt;/p&gt; &#xA;&lt;p&gt;Disable TLS v1 with the &lt;code&gt;no_tlsv1&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -b &#39;ssl://127.0.0.1:9292?key=path_to_key&amp;amp;cert=path_to_cert&amp;amp;no_tlsv1=true&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Controlling OpenSSL Verification Flags&lt;/h4&gt; &#xA;&lt;p&gt;To enable verification flags offered by OpenSSL, use &lt;code&gt;verification_flags&lt;/code&gt; (not available for JRuby):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -b &#39;ssl://127.0.0.1:9292?key=path_to_key&amp;amp;cert=path_to_cert&amp;amp;verification_flags=PARTIAL_CHAIN&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also set multiple verification flags (by separating them with coma):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -b &#39;ssl://127.0.0.1:9292?key=path_to_key&amp;amp;cert=path_to_cert&amp;amp;verification_flags=PARTIAL_CHAIN,CRL_CHECK&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;List of available flags: &lt;code&gt;USE_CHECK_TIME&lt;/code&gt;, &lt;code&gt;CRL_CHECK&lt;/code&gt;, &lt;code&gt;CRL_CHECK_ALL&lt;/code&gt;, &lt;code&gt;IGNORE_CRITICAL&lt;/code&gt;, &lt;code&gt;X509_STRICT&lt;/code&gt;, &lt;code&gt;ALLOW_PROXY_CERTS&lt;/code&gt;, &lt;code&gt;POLICY_CHECK&lt;/code&gt;, &lt;code&gt;EXPLICIT_POLICY&lt;/code&gt;, &lt;code&gt;INHIBIT_ANY&lt;/code&gt;, &lt;code&gt;INHIBIT_MAP&lt;/code&gt;, &lt;code&gt;NOTIFY_POLICY&lt;/code&gt;, &lt;code&gt;EXTENDED_CRL_SUPPORT&lt;/code&gt;, &lt;code&gt;USE_DELTAS&lt;/code&gt;, &lt;code&gt;CHECK_SS_SIGNATURE&lt;/code&gt;, &lt;code&gt;TRUSTED_FIRST&lt;/code&gt;, &lt;code&gt;SUITEB_128_LOS_ONLY&lt;/code&gt;, &lt;code&gt;SUITEB_192_LOS&lt;/code&gt;, &lt;code&gt;SUITEB_128_LOS&lt;/code&gt;, &lt;code&gt;PARTIAL_CHAIN&lt;/code&gt;, &lt;code&gt;NO_ALT_CHAINS&lt;/code&gt;, &lt;code&gt;NO_CHECK_TIME&lt;/code&gt; (see &lt;a href=&#34;https://www.openssl.org/docs/manmaster/man3/X509_VERIFY_PARAM_set_hostflags.html#VERIFICATION-FLAGS&#34;&gt;https://www.openssl.org/docs/manmaster/man3/X509_VERIFY_PARAM_set_hostflags.html#VERIFICATION-FLAGS&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Control/Status Server&lt;/h3&gt; &#xA;&lt;p&gt;Puma has a built-in status and control app that can be used to query and control Puma.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma --control-url tcp://127.0.0.1:9293 --control-token foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Puma will start the control server on localhost port 9293. All requests to the control server will need to include control token (in this case, &lt;code&gt;token=foo&lt;/code&gt;) as a query parameter. This allows for simple authentication. Check out &lt;code&gt;Puma::App::Status&lt;/code&gt; or &lt;a href=&#34;https://github.com/puma/puma/raw/master/lib/puma/app/status.rb&#34;&gt;status.rb&lt;/a&gt; to see what the status app has available.&lt;/p&gt; &#xA;&lt;p&gt;You can also interact with the control server via &lt;code&gt;pumactl&lt;/code&gt;. This command will restart Puma:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pumactl --control-url &#39;tcp://127.0.0.1:9293&#39; --control-token foo restart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see a list of &lt;code&gt;pumactl&lt;/code&gt; options, use &lt;code&gt;pumactl --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration File&lt;/h3&gt; &#xA;&lt;p&gt;You can also provide a configuration file with the &lt;code&gt;-C&lt;/code&gt; (or &lt;code&gt;--config&lt;/code&gt;) flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma -C /path/to/config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If no configuration file is specified, Puma will look for a configuration file at &lt;code&gt;config/puma.rb&lt;/code&gt;. If an environment is specified (via the &lt;code&gt;--environment&lt;/code&gt; flag or through the &lt;code&gt;APP_ENV&lt;/code&gt;, &lt;code&gt;RACK_ENV&lt;/code&gt;, or &lt;code&gt;RAILS_ENV&lt;/code&gt; environment variables) Puma looks for a configuration file at &lt;code&gt;config/puma/&amp;lt;environment_name&amp;gt;.rb&lt;/code&gt; and then falls back to &lt;code&gt;config/puma.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to prevent Puma from looking for a configuration file in those locations, include the &lt;code&gt;--no-config&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ puma --no-config&#xA;&#xA;# or&#xA;&#xA;$ puma -C &#34;-&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The other side-effects of setting the environment are whether to show stack traces (in &lt;code&gt;development&lt;/code&gt; or &lt;code&gt;test&lt;/code&gt;), and setting RACK_ENV may potentially affect middleware looking for this value to change their behavior. The default puma RACK_ENV value is &lt;code&gt;development&lt;/code&gt;. You can see all config default values in &lt;code&gt;Puma::Configuration#puma_default_options&lt;/code&gt; or &lt;a href=&#34;https://github.com/puma/puma/raw/61c6213fbab/lib/puma/configuration.rb#L182-L204&#34;&gt;configuration.rb&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Check out &lt;code&gt;Puma::DSL&lt;/code&gt; or &lt;a href=&#34;https://github.com/puma/puma/raw/master/lib/puma/dsl.rb&#34;&gt;dsl.rb&lt;/a&gt; to see all available options.&lt;/p&gt; &#xA;&lt;h2&gt;Restart&lt;/h2&gt; &#xA;&lt;p&gt;Puma includes the ability to restart itself. When available (MRI, Rubinius, JRuby), Puma performs a &#34;hot restart&#34;. This is the same functionality available in &lt;em&gt;Unicorn&lt;/em&gt; and &lt;em&gt;NGINX&lt;/em&gt; which keep the server sockets open between restarts. This makes sure that no pending requests are dropped while the restart is taking place.&lt;/p&gt; &#xA;&lt;p&gt;For more, see the &lt;a href=&#34;https://raw.githubusercontent.com/puma/puma/master/docs/restart.md&#34;&gt;Restart documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Signals&lt;/h2&gt; &#xA;&lt;p&gt;Puma responds to several signals. A detailed guide to using UNIX signals with Puma can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/puma/puma/master/docs/signals.md&#34;&gt;Signals documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Platform Constraints&lt;/h2&gt; &#xA;&lt;p&gt;Some platforms do not support all Puma features.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;JRuby&lt;/strong&gt;, &lt;strong&gt;Windows&lt;/strong&gt;: server sockets are not seamless on restart, they must be closed and reopened. These platforms have no way to pass descriptors into a new process that is exposed to Ruby. Also, cluster mode is not supported due to a lack of fork(2).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt;: Cluster mode is not supported due to a lack of fork(2).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;: The way Kubernetes handles pod shutdowns interacts poorly with server processes implementing graceful shutdown, like Puma. See the &lt;a href=&#34;https://raw.githubusercontent.com/puma/puma/master/docs/kubernetes.md&#34;&gt;kubernetes section of the documentation&lt;/a&gt; for more details.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known Bugs&lt;/h2&gt; &#xA;&lt;p&gt;For MRI versions 2.2.7, 2.2.8, 2.2.9, 2.2.10, 2.3.4 and 2.4.1, you may see &lt;code&gt;stream closed in another thread (IOError)&lt;/code&gt;. It may be caused by a &lt;a href=&#34;https://bugs.ruby-lang.org/issues/13632&#34;&gt;Ruby bug&lt;/a&gt;. It can be fixed with the gem &lt;a href=&#34;https://rubygems.org/gems/stopgap_13632&#34;&gt;https://rubygems.org/gems/stopgap_13632&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;if %w(2.2.7 2.2.8 2.2.9 2.2.10 2.3.4 2.4.1).include? RUBY_VERSION&#xA;  begin&#xA;    require &#39;stopgap_13632&#39;&#xA;  rescue LoadError&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;p&gt;Puma has support for Capistrano with an &lt;a href=&#34;https://github.com/seuros/capistrano-puma&#34;&gt;external gem&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is common to use process monitors with Puma. Modern process monitors like systemd or rc.d provide continuous monitoring and restarts for increased reliability in production environments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/puma/puma/master/docs/jungle/rc.d/README.md&#34;&gt;rc.d&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/puma/puma/master/docs/systemd.md&#34;&gt;systemd&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Community guides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/anon987654321/4532cf8d6c59c1f43ec8973faa031103&#34;&gt;Deploying Puma on OpenBSD using relayd and httpd&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community Extensions&lt;/h2&gt; &#xA;&lt;h3&gt;Plugins&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/harmjanblok/puma-metrics&#34;&gt;puma-metrics&lt;/a&gt; â€”&amp;nbsp;export Puma metrics to Prometheus&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yob/puma-plugin-statsd&#34;&gt;puma-plugin-statsd&lt;/a&gt; â€”&amp;nbsp;send Puma metrics to statsd&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sj26/puma-plugin-systemd&#34;&gt;puma-plugin-systemd&lt;/a&gt; â€”&amp;nbsp;deeper integration with systemd for notify, status and watchdog&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Monitoring&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ylecuyer/puma-status&#34;&gt;puma-status&lt;/a&gt; â€”&amp;nbsp;Monitor CPU/Mem/Load of running puma instances from the CLI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Find details for contributing in the &lt;a href=&#34;https://raw.githubusercontent.com/puma/puma/master/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Puma is copyright Evan Phoenix and contributors, licensed under the BSD 3-Clause license. See the included LICENSE file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>learn-co-curriculum/phase-3-object-relations-practice-code-challenge-magazines-many-many</title>
    <updated>2022-06-02T02:03:22Z</updated>
    <id>tag:github.com,2022-06-02:/learn-co-curriculum/phase-3-object-relations-practice-code-challenge-magazines-many-many</id>
    <link href="https://github.com/learn-co-curriculum/phase-3-object-relations-practice-code-challenge-magazines-many-many" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Object Relations Practice Code Challenge - Magazines&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;For this assignment, we&#39;ll be working with a Magazine domain.&lt;/p&gt; &#xA;&lt;p&gt;We have three models: &lt;code&gt;Magazine&lt;/code&gt;, &lt;code&gt;Subscription&lt;/code&gt;, and &lt;code&gt;Reader&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For our purposes, a &lt;code&gt;Magazine&lt;/code&gt; has many &lt;code&gt;Subscription&lt;/code&gt;s, a &lt;code&gt;Reader&lt;/code&gt; has many &lt;code&gt;Subscription&lt;/code&gt;s, and a &lt;code&gt;Subscription&lt;/code&gt; belongs to a &lt;code&gt;Magazine&lt;/code&gt; and to an &lt;code&gt;Reader&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Magazine&lt;/code&gt; - &lt;code&gt;Reader&lt;/code&gt; is a many to many relationship.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You should draw your domain on paper or on a whiteboard &lt;em&gt;before you start coding&lt;/em&gt;. Remember to identify a single source of truth for your data.&lt;/p&gt; &#xA;&lt;h2&gt;Topics&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Active Record Migrations&lt;/li&gt; &#xA; &lt;li&gt;Object Relationships&lt;/li&gt; &#xA; &lt;li&gt;Active Record Queryng&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;To get started, run &lt;code&gt;bundle install&lt;/code&gt; while inside of this directory.&lt;/p&gt; &#xA;&lt;p&gt;Build out all of the methods listed in the deliverables. The methods are listed in a suggested order, but you can feel free to tackle the ones you think are easiest. Be careful: some of the later methods rely on earlier ones.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Remember!&lt;/strong&gt; This code challenge does not have tests. You cannot run &lt;code&gt;rspec&lt;/code&gt; and you cannot run &lt;code&gt;learn&lt;/code&gt;. You&#39;ll need to create your own sample instances so that you can try out your code on your own. Make sure your associations and methods work in the console before submitting.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ve provided you with a tool that you can use to test your code. To use it, run &lt;code&gt;rake console&lt;/code&gt; from the command line. This will start a &lt;code&gt;pry&lt;/code&gt; session with your classes defined. You can test out the methods that you write here. You are also encouraged to use the &lt;code&gt;seeds.rb&lt;/code&gt; file to create sample data to test your models and associations.&lt;/p&gt; &#xA;&lt;p&gt;Writing error-free code is more important than completing all of the deliverables listed - prioritize writing methods that work over writing more methods that don&#39;t work. You should test your code in the console as you write.&lt;/p&gt; &#xA;&lt;p&gt;Similarly, messy code that works is better than clean code that doesn&#39;t. First, prioritize getting things working. Then, if there is time at the end, refactor your code to adhere to best practices.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Before you submit!&lt;/strong&gt; Save and run your code to verify that it works as you expect. If you have any methods that are not working yet, feel free to leave comments describing your progress.&lt;/p&gt; &#xA;&lt;h2&gt;What You Already Have&lt;/h2&gt; &#xA;&lt;p&gt;The starter code has migrations and models for the initial &lt;code&gt;Reader&lt;/code&gt;, &lt;code&gt;Magazine&lt;/code&gt; and &lt;code&gt;Subscription&lt;/code&gt; models, and seed data for some &lt;code&gt;Reader&lt;/code&gt;s and &lt;code&gt;Magazine&lt;/code&gt;s. The schema currently looks like this:&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;readers&lt;/code&gt; Table&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Column&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;name&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;email&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;code&gt;magazines&lt;/code&gt; Table&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Column&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;title&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You will need to create the migration for the &lt;code&gt;subscriptions&lt;/code&gt; table using the attributes specified in the deliverables below.&lt;/p&gt; &#xA;&lt;h2&gt;Deliverables&lt;/h2&gt; &#xA;&lt;p&gt;Write the following methods in the classes in the files provided. Feel free to build out any helper methods if needed.&lt;/p&gt; &#xA;&lt;p&gt;Deliverables use the notation &lt;code&gt;#&lt;/code&gt; for instance methods, and &lt;code&gt;.&lt;/code&gt; for class methods.&lt;/p&gt; &#xA;&lt;p&gt;Remember: Active Record give your classes access to a lot of built-in methods! Keep in mind what methods Active Record gives you access to on each of your classes when you&#39;re approaching the deliverables below.&lt;/p&gt; &#xA;&lt;h3&gt;Migrations&lt;/h3&gt; &#xA;&lt;p&gt;Before working on the rest of the deliverables, you will need to create a migration for the &lt;code&gt;subscriptions&lt;/code&gt; table.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;code&gt;Subscription&lt;/code&gt; belongs to a &lt;code&gt;Magazine&lt;/code&gt;, and a &lt;code&gt;Subscription&lt;/code&gt; also belongs to an &lt;code&gt;Reader&lt;/code&gt;. In your migration, create any columns your &lt;code&gt;subscriptions&lt;/code&gt; table will need to establish these relationships. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The &lt;code&gt;subscriptions&lt;/code&gt; table should also have a &lt;code&gt;price&lt;/code&gt; column that stores an integer.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After creating your migration, use the &lt;code&gt;seeds.rb&lt;/code&gt; file to create instances of your &lt;code&gt;Subscription&lt;/code&gt; class so you can test your code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Once you&#39;ve set up your &lt;code&gt;Subscription&lt;/code&gt; class&lt;/strong&gt;, work on building out the following deliverables.&lt;/p&gt; &#xA;&lt;h3&gt;Object Relationship Methods&lt;/h3&gt; &#xA;&lt;p&gt;Use Active Record association macros and Active Record query methods where appropriate (i.e. &lt;code&gt;has_many&lt;/code&gt;, &lt;code&gt;has_many through&lt;/code&gt;, and &lt;code&gt;belongs_to&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;Subscription&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Subscription#reader&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;should return the &lt;code&gt;Reader&lt;/code&gt; instance for this subscription&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Subscription#magazine&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;should return the &lt;code&gt;Magazine&lt;/code&gt; instance for this subscription&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Magazine&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Magazine#subscriptions&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;returns a collection of all &lt;code&gt;Subscription&lt;/code&gt; instances for this magazine&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Magazine#readers&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;returns a collection of all &lt;code&gt;Reader&lt;/code&gt; instances who are subscribed to this magazine&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Reader&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Reader#subscriptions&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;should return a collection of all &lt;code&gt;Subscription&lt;/code&gt; instances for this reader&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Reader#magazines&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;should return a collection of all &lt;code&gt;Magazine&lt;/code&gt; instances that this reader is subscribed to&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Aggregate and Association Methods&lt;/h3&gt; &#xA;&lt;h4&gt;Subscription&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Subscription#print_details&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;puts&lt;/code&gt; a string to the terminal to display the details of the subscription&lt;/li&gt; &#xA;   &lt;li&gt;the string should be formatted like this: &lt;code&gt;{reader name} subscribed to {magazine title} for ${subscription price}&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Reader&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Reader#subscribe(magazine, price)&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;takes a &lt;code&gt;magazine&lt;/code&gt; (an instance of the &lt;code&gt;Magazine&lt;/code&gt; class) and a &lt;code&gt;price&lt;/code&gt; (integer) as arguments, and creates a new &lt;code&gt;subscription&lt;/code&gt; in the database associated with the magazine and the reader&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Reader#total_subcription_price&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;returns the total price for all the reader&#39;s subscriptions&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Reader#cancel_subscription(magazine)&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;takes a &lt;code&gt;magazine&lt;/code&gt; instance and removes the subscription for this reader&lt;/li&gt; &#xA;   &lt;li&gt;you will have to delete a row from the &lt;code&gt;subscriptions&lt;/code&gt; table to get this to work!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Magazine&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Magazine#email_list&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;returns a &lt;code&gt;String&lt;/code&gt; of a semi-colon separated list of emails for all the readers subscribed to this magazine&lt;/li&gt; &#xA;   &lt;li&gt;the string should be formatted like this: &lt;code&gt;email1@example.com;email2@example.com;email3@example.com&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Magazine.most_popular&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;returns the &lt;code&gt;Magazine&lt;/code&gt; instance with the most subscribers&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Rubric&lt;/h2&gt; &#xA;&lt;h3&gt;Active Record Associations&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;No associations, no foreign key on the table.&lt;/li&gt; &#xA; &lt;li&gt;Associations attempted in the model but are incorrect; foreign key is on a table but in the wrong spot.&lt;/li&gt; &#xA; &lt;li&gt;Relationships properly created. Associations lead to the correct behavior but may have used the wrong macro or manually written out the methods the macro builds for us.&lt;/li&gt; &#xA; &lt;li&gt;Relationships properly created, save minor mistakes in advanced deliverables. May implement advanced query methods with iterators instead of using built-in methods.&lt;/li&gt; &#xA; &lt;li&gt;Relationships properly created. Advanced query methods use appropriate built-in methods.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Build classes using OO Ruby Syntax&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Class code has a syntax or runtime error. Code does not run at all, or exits with an error, or most Object-oriented deliverables are not implemented.&lt;/li&gt; &#xA; &lt;li&gt;No syntax errors. Some deliverables function correctly. Mixes up syntax for class and instance methods, refers to variables in the wrong scope, or uses &lt;code&gt;self&lt;/code&gt; incorrectly, leading to logical errors. Method and variable names do not correspond to their respective behavior or data types. Methods might be duplicated, or code includes unused methods without a clear purpose.&lt;/li&gt; &#xA; &lt;li&gt;Correct class syntax for the deliverables submitted. May be incomplete or missing deliverables. Most code generally expresses intent: method and variable names match their behaviors and data types. Methods are not duplicated. Code does not have unused or methods without a clear purpose.&lt;/li&gt; &#xA; &lt;li&gt;Correct class syntax for all of the submitted code. Code express intent: method and variable names indicate their behavior and data types. Some deliverables might not be complete. No methods are duplicated.&lt;/li&gt; &#xA; &lt;li&gt;Correct class syntax for all deliverables, all deliverables complete. Code expresses intent: method and variable names indicate their behavior and data types, with the correct pluralization. No methods are duplicated. All methods have a clear purpose. Shared functionality is factored out into helper methods. Appropriate use of attr_* macros.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Model relationships using Ruby&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Submitted code does not relate models to each other through methods or data.&lt;/li&gt; &#xA; &lt;li&gt;Models relate to each other, but incompletely. Relationship methods are missing or have logic errors, store data on the wrong model, or are missing a single source of truth.&lt;/li&gt; &#xA; &lt;li&gt;Models relate to each other as specified in the instructions. Data is stored on the correct models, relationship methods are defined on the right models, and the logic correctly implements the relationships. Aggregate methods using the relationships may be incomplete or have errors.&lt;/li&gt; &#xA; &lt;li&gt;Models relate to each other as specified in the instructions. Aggregate methods work, but might not use helper methods effectively.&lt;/li&gt; &#xA; &lt;li&gt;Models relate to each other as specified in the instructions. Aggregate methods use helper methods effectively.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Solve problems with collections of data&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Does not attempt to solve collections problems, or has syntax errors in collection code.&lt;/li&gt; &#xA; &lt;li&gt;Collections methods have runtime or logic errors. Collections methods may use the wrong iterators, have incorrect logic, or many of the collections methods are unimplemented.&lt;/li&gt; &#xA; &lt;li&gt;Some collections methods work correctly, though several might be unimplemented. Code may not use the appropriate built in method for each problem, or duplicate logic instead of using helper methods.&lt;/li&gt; &#xA; &lt;li&gt;All collections methods are implemented and function correctly. Most use appropriate higher-level built-in methods. Methods may duplicate logic instead of using helper methods.&lt;/li&gt; &#xA; &lt;li&gt;All collections methods implemented and function correctly, using appropriate higher-level built-in methods. Shared logic is factored out to helper methods.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>learn-co-curriculum/phase-3-sinatra-react-project</title>
    <updated>2022-06-02T02:03:22Z</updated>
    <id>tag:github.com,2022-06-02:/learn-co-curriculum/phase-3-sinatra-react-project</id>
    <link href="https://github.com/learn-co-curriculum/phase-3-sinatra-react-project" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Phase 3 Project Guidelines&lt;/h1&gt; &#xA;&lt;h2&gt;Learning Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build a web basic API with Sinatra and Active Record to support a React frontend&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Congrats on getting through all the material for Phase 3! Now&#39;s the time to put it all together and build something from scratch to reinforce what you know and expand your horizons.&lt;/p&gt; &#xA;&lt;p&gt;The focus of this project is &lt;strong&gt;building a Sinatra API backend&lt;/strong&gt; that uses &lt;strong&gt;Active Record&lt;/strong&gt; to access and persist data in a database, which will be used by a separate &lt;strong&gt;React frontend&lt;/strong&gt; that interacts with the database via the API.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;For this project, you must:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use Active Record to interact with a database.&lt;/li&gt; &#xA; &lt;li&gt;Have at least two models with a one-to-many relationship.&lt;/li&gt; &#xA; &lt;li&gt;At a minimum, set up the following API routes in Sinatra: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;create and read actions for both models&lt;/li&gt; &#xA;   &lt;li&gt;full CRUD capability for one of the models&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Build a separate React frontend application that interacts with the API to perform CRUD actions.&lt;/li&gt; &#xA; &lt;li&gt;Use good OO design patterns. You should have separate classes for each of your models, and create instance and class methods as necessary.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, build a todo list application with a React frontend interface and a Sinatra backend API, where a user can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Create&lt;/strong&gt; a new todo&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Read&lt;/strong&gt; a list of all todos&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Update&lt;/strong&gt; an individual todo&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Delete&lt;/strong&gt; a todo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A &lt;code&gt;Todo&lt;/code&gt; can be tagged with a &lt;code&gt;Category&lt;/code&gt;, so that each todo &lt;em&gt;belongs to&lt;/em&gt; a category and each category &lt;em&gt;has many&lt;/em&gt; todos.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Backend Setup&lt;/h3&gt; &#xA;&lt;p&gt;This repository has all the starter code needed to get a Sinatra backend up and running. &lt;a href=&#34;https://github.com/learn-co-curriculum/phase-3-sinatra-react-project/fork&#34;&gt;&lt;strong&gt;Fork and clone&lt;/strong&gt;&lt;/a&gt; this repository to get started. Then, run &lt;code&gt;bundle install&lt;/code&gt; to install the gems.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;app/controllers/application_controller.rb&lt;/code&gt; file has an example GET route handler. Replace this route with routes for your project.&lt;/p&gt; &#xA;&lt;p&gt;You can start your server with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ bundle exec rake server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will run your server on port &lt;a href=&#34;http://localhost:9292&#34;&gt;http://localhost:9292&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Frontend Setup&lt;/h3&gt; &#xA;&lt;p&gt;Your backend and your frontend should be in &lt;strong&gt;two different repositories&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Create a new repository in a &lt;strong&gt;separate folder&lt;/strong&gt; with a React app for your frontend. To do this, &lt;code&gt;cd&lt;/code&gt; out of the backend project directory, and use &lt;a href=&#34;https://create-react-app.dev/docs/getting-started&#34;&gt;create-react-app&lt;/a&gt; to generate the necessary code for your React frontend:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ npx create-react-app my-app-frontend&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After creating the project locally, you should also &lt;a href=&#34;https://docs.github.com/en/get-started/quickstart/create-a-repo&#34;&gt;create a repository on GitHub&lt;/a&gt; to host your repo and help collaborate, if you&#39;re working with a partner.&lt;/p&gt; &#xA;&lt;h3&gt;Fetch Example&lt;/h3&gt; &#xA;&lt;p&gt;Your React app should make fetch requests to your Sinatra backend! Here&#39;s an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;fetch(&#34;http://localhost:9292/test&#34;)&#xA;  .then((r) =&amp;gt; r.json())&#xA;  .then((data) =&amp;gt; console.log(data));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Project Tips&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This project is intended to focus more on the backend than the frontend, so try and keep the React side of things relatively simple. Focus on working with Active Record and performing CRUD actions. What are some interesting queries you can write? What kinds of questions can you ask of your data?&lt;/li&gt; &#xA; &lt;li&gt;Once you have a project idea, come up with a domain model and decide what relationships exist between the models in your application. Use a tool like &lt;a href=&#34;https://dbdiagram.io/&#34;&gt;dbdiagram.io&lt;/a&gt; to help visualize your models.&lt;/li&gt; &#xA; &lt;li&gt;Decide on your API endpoints. What data should they return? What kind of CRUD action should they perform? What data do they need from the client?&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://www.postman.com/downloads/&#34;&gt;Postman&lt;/a&gt; to test your endpoints.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;binding.pry&lt;/code&gt; to debug your requests on the server. It&#39;s very helpful to use a &lt;code&gt;binding.pry&lt;/code&gt; in your controller within a route to see what &lt;code&gt;params&lt;/code&gt; are being sent.&lt;/li&gt; &#xA; &lt;li&gt;Use the &lt;a href=&#34;https://developer.chrome.com/docs/devtools/network/&#34;&gt;Network Tab in the Dev Tools&lt;/a&gt; in the frontend to debug your requests.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://create-react-app.dev/docs/getting-started&#34;&gt;create-react-app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dbdiagram.io/&#34;&gt;dbdiagram.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.postman.com/downloads/&#34;&gt;Postman&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>learn-co-curriculum/phase-3-object-relations-practice-code-challenge-students-one-many</title>
    <updated>2022-06-02T02:03:22Z</updated>
    <id>tag:github.com,2022-06-02:/learn-co-curriculum/phase-3-object-relations-practice-code-challenge-students-one-many</id>
    <link href="https://github.com/learn-co-curriculum/phase-3-object-relations-practice-code-challenge-students-one-many" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Object Relations Practice Code Challenge - Students&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;For this assignment, we&#39;ll be working with a Students domain.&lt;/p&gt; &#xA;&lt;p&gt;We have two models: &lt;code&gt;Cohort&lt;/code&gt; and &lt;code&gt;Student&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For our purposes, a &lt;code&gt;Cohort&lt;/code&gt; has many &lt;code&gt;Students&lt;/code&gt;s and a &lt;code&gt;Student&lt;/code&gt; belongs to a &lt;code&gt;Cohort&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Student&lt;/code&gt; - &lt;code&gt;Cohort&lt;/code&gt; is a one to many relationship.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You should draw your domain on paper or on a whiteboard &lt;em&gt;before you start coding&lt;/em&gt;. Remember to identify a single source of truth for your data.&lt;/p&gt; &#xA;&lt;h2&gt;Topics&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Active Record Migrations&lt;/li&gt; &#xA; &lt;li&gt;Object Relationships&lt;/li&gt; &#xA; &lt;li&gt;Active Record Queryng&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;To get started, run &lt;code&gt;bundle install&lt;/code&gt; while inside of this directory.&lt;/p&gt; &#xA;&lt;p&gt;Build out all of the methods listed in the deliverables. The methods are listed in a suggested order, but you can feel free to tackle the ones you think are easiest. Be careful: some of the later methods rely on earlier ones.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Remember!&lt;/strong&gt; This code challenge does not have tests. You cannot run &lt;code&gt;rspec&lt;/code&gt; and you cannot run &lt;code&gt;learn&lt;/code&gt;. You&#39;ll need to create your own sample instances so that you can try out your code on your own. Make sure your associations and methods work in the console before submitting.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ve provided you with a tool that you can use to test your code. To use it, run &lt;code&gt;rake console&lt;/code&gt; from the command line. This will start a &lt;code&gt;pry&lt;/code&gt; session with your classes defined. You can test out the methods that you write here. You are also encouraged to use the &lt;code&gt;seeds.rb&lt;/code&gt; file to create sample data to test your models and associations.&lt;/p&gt; &#xA;&lt;p&gt;Writing error-free code is more important than completing all of the deliverables listed - prioritize writing methods that work over writing more methods that don&#39;t work. You should test your code in the console as you write.&lt;/p&gt; &#xA;&lt;p&gt;Similarly, messy code that works is better than clean code that doesn&#39;t. First, prioritize getting things working. Then, if there is time at the end, refactor your code to adhere to best practices.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Before you submit!&lt;/strong&gt; Save and run your code to verify that it works as you expect. If you have any methods that are not working yet, feel free to leave comments describing your progress.&lt;/p&gt; &#xA;&lt;h2&gt;What You Already Have&lt;/h2&gt; &#xA;&lt;p&gt;The starter code has migrations and models for the initial &lt;code&gt;Cohort&lt;/code&gt; and &lt;code&gt;Student&lt;/code&gt; models, and seed data for some &lt;code&gt;Cohort&lt;/code&gt;s and &lt;code&gt;Student&lt;/code&gt;s. The tables currently look like this:&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;students&lt;/code&gt; Table&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Column&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;name&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;age&lt;/td&gt; &#xA;   &lt;td&gt;integer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;email&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;code&gt;cohorts&lt;/code&gt; Table&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Column&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;name&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;current_mod&lt;/td&gt; &#xA;   &lt;td&gt;integer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You will need to create a migration to establish the relationship between these two tables. You&#39;ll need to add one additional column to one of these existing tables to create the relationship.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Remember&lt;/strong&gt;: a &lt;code&gt;Cohort&lt;/code&gt; has many &lt;code&gt;Student&lt;/code&gt;s and a &lt;code&gt;Student&lt;/code&gt; belongs to a &lt;code&gt;Cohort&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Deliverables&lt;/h2&gt; &#xA;&lt;p&gt;Write the following methods in the classes in the files provided. Feel free to build out any helper methods if needed.&lt;/p&gt; &#xA;&lt;p&gt;Deliverables use the notation &lt;code&gt;#&lt;/code&gt; for instance methods, and &lt;code&gt;.&lt;/code&gt; for class methods.&lt;/p&gt; &#xA;&lt;p&gt;Remember: Active Record give your classes access to a lot of built-in methods! Keep in mind what methods Active Record gives you access to on each of your classes when you&#39;re approaching the deliverables below.&lt;/p&gt; &#xA;&lt;h3&gt;Migrations&lt;/h3&gt; &#xA;&lt;p&gt;Before working on the rest of the deliverables, you will need to set up the migration files to establish the relationship between a &lt;code&gt;Student&lt;/code&gt; and a &lt;code&gt;Cohort&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;code&gt;Student&lt;/code&gt; belongs to a &lt;code&gt;Cohort&lt;/code&gt;. Update the existing migrations file(s) to reflect this relationship.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once you&#39;ve updated the migrations, run &lt;code&gt;rake db:migrate&lt;/code&gt; to run the migrations and set up the database. Then use the &lt;code&gt;seeds.rb&lt;/code&gt; file to create instances of &lt;code&gt;Student&lt;/code&gt;s and &lt;code&gt;Cohort&lt;/code&gt;s to so you can test your relationships.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Once you&#39;ve successfully created the migration&lt;/strong&gt;, work on building out the following deliverables.&lt;/p&gt; &#xA;&lt;h3&gt;Object Relationship Methods&lt;/h3&gt; &#xA;&lt;p&gt;Use Active Record association macros and Active Record query methods where appropriate (i.e. &lt;code&gt;has_many&lt;/code&gt;, &lt;code&gt;has_many through&lt;/code&gt;, and &lt;code&gt;belongs_to&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;Student&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Student#cohort&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;should return the &lt;code&gt;Cohort&lt;/code&gt; instance for this student&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Cohort&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Cohort#students&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;returns a collection of all &lt;code&gt;Student&lt;/code&gt; instances for this cohort&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Aggregate and Association Methods&lt;/h3&gt; &#xA;&lt;h4&gt;Student&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Student#current_mod&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;returns the current mod for this student&#39;s cohort&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Cohort&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Cohort#add_student&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;takes a name (as a &lt;code&gt;String&lt;/code&gt;) and an age (as an &lt;code&gt;Integer&lt;/code&gt;) and adds a new student to this cohort&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Cohort#average_age&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;returns the average age of all the students in the cohort as a &lt;code&gt;Float&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Cohort#total students&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;returns the total number of students in the cohort as an &lt;code&gt;Integer&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Cohort.biggest&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;returns a &lt;code&gt;Cohort&lt;/code&gt; instance for the cohort with the most students&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Cohort.sort_by_mod&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;returns all cohorts, sorted by &lt;code&gt;current_mod&lt;/code&gt; from lowest to highest&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Rubric&lt;/h2&gt; &#xA;&lt;h3&gt;Active Record Associations&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;No associations, no foreign key on the table.&lt;/li&gt; &#xA; &lt;li&gt;Associations attempted in the model but are incorrect; foreign key is on a table but in the wrong spot.&lt;/li&gt; &#xA; &lt;li&gt;Relationships properly created. Associations lead to the correct behavior but may have used the wrong macro or manually written out the methods the macro builds for us.&lt;/li&gt; &#xA; &lt;li&gt;Relationships properly created, save minor mistakes in advanced deliverables. May implement advanced query methods with iterators instead of using built-in methods.&lt;/li&gt; &#xA; &lt;li&gt;Relationships properly created. Advanced query methods use appropriate built-in methods.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Build classes using OO Ruby Syntax&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Class code has a syntax or runtime error. Code does not run at all, or exits with an error, or most Object-oriented deliverables are not implemented.&lt;/li&gt; &#xA; &lt;li&gt;No syntax errors. Some deliverables function correctly. Mixes up syntax for class and instance methods, refers to variables in the wrong scope, or uses &lt;code&gt;self&lt;/code&gt; incorrectly, leading to logical errors. Method and variable names do not correspond to their respective behavior or data types. Methods might be duplicated, or code includes unused methods without a clear purpose.&lt;/li&gt; &#xA; &lt;li&gt;Correct class syntax for the deliverables submitted. May be incomplete or missing deliverables. Most code generally expresses intent: method and variable names match their behaviors and data types. Methods are not duplicated. Code does not have unused or methods without a clear purpose.&lt;/li&gt; &#xA; &lt;li&gt;Correct class syntax for all of the submitted code. Code express intent: method and variable names indicate their behavior and data types. Some deliverables might not be complete. No methods are duplicated.&lt;/li&gt; &#xA; &lt;li&gt;Correct class syntax for all deliverables, all deliverables complete. Code expresses intent: method and variable names indicate their behavior and data types, with the correct pluralization. No methods are duplicated. All methods have a clear purpose. Shared functionality is factored out into helper methods. Appropriate use of attr_* macros.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Model relationships using Ruby&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Submitted code does not relate models to each other through methods or data.&lt;/li&gt; &#xA; &lt;li&gt;Models relate to each other, but incompletely. Relationship methods are missing or have logic errors, store data on the wrong model, or are missing a single source of truth.&lt;/li&gt; &#xA; &lt;li&gt;Models relate to each other as specified in the instructions. Data is stored on the correct models, relationship methods are defined on the right models, and the logic correctly implements the relationships. Aggregate methods using the relationships may be incomplete or have errors.&lt;/li&gt; &#xA; &lt;li&gt;Models relate to each other as specified in the instructions. Aggregate methods work, but might not use helper methods effectively.&lt;/li&gt; &#xA; &lt;li&gt;Models relate to each other as specified in the instructions. Aggregate methods use helper methods effectively.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Solve problems with collections of data&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Does not attempt to solve collections problems, or has syntax errors in collection code.&lt;/li&gt; &#xA; &lt;li&gt;Collections methods have runtime or logic errors. Collections methods may use the wrong iterators, have incorrect logic, or many of the collections methods are unimplemented.&lt;/li&gt; &#xA; &lt;li&gt;Some collections methods work correctly, though several might be unimplemented. Code may not use the appropriate built in method for each problem, or duplicate logic instead of using helper methods.&lt;/li&gt; &#xA; &lt;li&gt;All collections methods are implemented and function correctly. Most use appropriate higher-level built-in methods. Methods may duplicate logic instead of using helper methods.&lt;/li&gt; &#xA; &lt;li&gt;All collections methods implemented and function correctly, using appropriate higher-level built-in methods. Shared logic is factored out to helper methods.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>