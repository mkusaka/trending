<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-20T01:46:44Z</updated>
  <subtitle>Weekly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>renatolond/mastodon-twitter-poster</title>
    <updated>2022-11-20T01:46:44Z</updated>
    <id>tag:github.com,2022-11-20:/renatolond/mastodon-twitter-poster</id>
    <link href="https://github.com/renatolond/mastodon-twitter-poster" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Crossposter to post statuses between Mastodon and Twitter&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/renatolond/mastodon-twitter-poster/main/app/logo/Logo1.png&#34; alt=&#34;mastodon-twitter-poster&#34; height=&#34;300px&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Mastodon-Twitter Crossposter &lt;a href=&#34;https://codeclimate.com/github/renatolond/mastodon-twitter-poster/maintainability&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/5ce2dc7dbf21d7a7fd4d/maintainability&#34; alt=&#34;Maintainability&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/renatolond/mastodon-twitter-poster/test_coverage&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/5ce2dc7dbf21d7a7fd4d/test_coverage&#34; alt=&#34;Test Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hosted.weblate.org/engage/mastodon-twitter-crossposter/&#34;&gt;&lt;img src=&#34;https://hosted.weblate.org/widgets/mastodon-twitter-crossposter/-/svg-badge.svg?sanitize=true&#34; alt=&#34;Translation status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This is an app for crossposting between Mastodon and Twitter. The app is made so that multiple users can connect to it using the OAuth interface from both Twitter and Mastodon and choose options on how the crosspost should work.&lt;/p&gt; &#xA;&lt;p&gt;If you just want to use it, there&#39;s one running at &lt;a href=&#34;https://crossposter.masto.donte.com.br&#34;&gt;https://crossposter.masto.donte.com.br&lt;/a&gt;, which you can use from most Mastodon servers (except the ones &lt;a href=&#34;https://github.com/masto-donte-com-br/InstanceInternals/raw/master/Blocklist.md&#34;&gt;suspended at masto.donte.com.br&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Post from Twitter to Mastodon&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can choose between posting only your tweets, or also posting retweets and quotes.&lt;/li&gt; &#xA;   &lt;li&gt;You can choose between posting retweets and quotes as links or as the old-style RTs, starting by RT @&lt;a href=&#34;mailto:username@twitter.com&#34;&gt;username@twitter.com&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Quotes bigger than 500 characters are automatically split in two toots, one replying to the other.&lt;/li&gt; &#xA;   &lt;li&gt;Your own threads can also be crossposted!&lt;/li&gt; &#xA;   &lt;li&gt;No other replies will be posted. There&#39;s no risk of filling your Mastodon timeline with replies to people that are not there.&lt;/li&gt; &#xA;   &lt;li&gt;Images and videos are crossposted to Mastodon. The best quality that fits in Mastodon will be crossposted!&lt;/li&gt; &#xA;   &lt;li&gt;Image and any other media descriptions from Twitter are completely crossposted to Mastodon&lt;/li&gt; &#xA;   &lt;li&gt;Possibility to add a content warning to all tweets being posted to Mastodon&lt;/li&gt; &#xA;   &lt;li&gt;Infer content warnings: if your tweet begins with a line containing &#34;content warning&#34; it will be posted behind a content warning on Mastodon. More information about which formats are supported can be seen below at &lt;a href=&#34;https://raw.githubusercontent.com/renatolond/mastodon-twitter-poster/main/#experimental-content-warning-recognition&#34;&gt;Experimental Content Warning recognition&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Blocklists or Allowlists: Only crosspost tweets containing one word from a list or do not crosspost tweets that contain at least one word from a list&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Post from Mastodon to Twitter&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Any toot bigger than 280 characters will be posted with a link to the original toot. (Be careful, if you post your private toots, your followers might not be able to see the original post!)&lt;/li&gt; &#xA;   &lt;li&gt;Mind your privacy: you can choose which privacy levels you want to crosspost. Only posting public toots, for instance.&lt;/li&gt; &#xA;   &lt;li&gt;Images and videos will be crossposted over to Twitter&lt;/li&gt; &#xA;   &lt;li&gt;Images and video descriptions from Mastodon will be crossposted to Twitter, in medias where Twitter support descriptions&lt;/li&gt; &#xA;   &lt;li&gt;Choose how to handle toots with content warnings; crosspost only the CW, only the content, or both! If only the CW is crossposted, the tweet will also include a link to the original toot, so your followers can read the content on Mastodon if they want.&lt;/li&gt; &#xA;   &lt;li&gt;If your image is marked as sensitive, the rest of the toot will be crossposted, together with a hint that there&#39;s images attached and a link to the original post.&lt;/li&gt; &#xA;   &lt;li&gt;You can choose between posting boosts or not.&lt;/li&gt; &#xA;   &lt;li&gt;Your own threads can also be crossposted, respecting to the choices you made regarding your privacy.&lt;/li&gt; &#xA;   &lt;li&gt;No other replies will be posted. There&#39;s no risk of filling your twitter timeline with replies to people that are not there.&lt;/li&gt; &#xA;   &lt;li&gt;Blocklists or Allowlists: Only crosspost toots containing one word from a list or do not crosspost tweets that contain at least one word from a list&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The crossposter will never follow anyone or post anything but the content you selected to be crossposted.&lt;/p&gt; &#xA;&lt;p&gt;If you decide to crosspost from Twitter to Mastodon, remember to turn on notifications about when people mention you to avoid not seeing interactions!&lt;/p&gt; &#xA;&lt;h2&gt;Note on usage&lt;/h2&gt; &#xA;&lt;p&gt;The crossposter is made with multiple users in mind. For that reason, it can be quite a lot of moving parts if you want to self-host yourself. There&#39;s other good tools to self-host out there like &lt;a href=&#34;https://github.com/AmauryCarrade/MastodonToTwitter&#34;&gt;https://github.com/AmauryCarrade/MastodonToTwitter&lt;/a&gt; and the others listed at the &lt;a href=&#34;https://github.com/felx/mastodon-documentation/raw/master/Using-Mastodon/Apps.md#bridges-fromto-other-platforms&#34;&gt;Bridges from/to other platforms section of the Mastodon apps&lt;/a&gt;. That being said, it should work even if you only want it for your own usage.&lt;/p&gt; &#xA;&lt;h2&gt;Ruby on Rails&lt;/h2&gt; &#xA;&lt;p&gt;Ruby 3.1.0&lt;/p&gt; &#xA;&lt;p&gt;Rails 7.0&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Without extra configuration, a local postgres instance is needed. Node is needed for assets compilation, can be installed using &lt;a href=&#34;https://github.com/creationix/nvm&#34;&gt;nvm&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The poster uses the &lt;a href=&#34;https://github.com/blackwinter/ruby-filemagic&#34;&gt;ruby-filemagic gem&lt;/a&gt; for detecting the types of the files posted. Follow the instructions described in the README to install the needed library and headers.&lt;/p&gt; &#xA;&lt;h2&gt;Pre-setup&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mastodon tokens are generated by the application, but for twitter you need to request an API Token from their side.&lt;/li&gt; &#xA; &lt;li&gt;You need a consumer key (on our side &lt;code&gt;TWITTER_CLIENT_ID&lt;/code&gt;) and consumer secret (on our side &lt;code&gt;TWITTER_CLIENT_SECRET&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Twitter app callback URL should be set to &lt;code&gt;https://crossposter.example.com/users/auth/twitter/callback&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Note: If you are running side-by-side with Mastodon or other sidekiq-using software, you need to configure redis to avoid issues with mixed jobs. More info at the end.&lt;/p&gt; &#xA;&lt;p&gt;You need to install Yarn and Ruby 3.1.0. Yarn has installation instructions for several OSs here: &lt;a href=&#34;https://yarnpkg.com/lang/en/docs/install/&#34;&gt;https://yarnpkg.com/lang/en/docs/install/&lt;/a&gt; and Ruby can be installed either using RVM (&lt;a href=&#34;https://rvm.io/rvm/install&#34;&gt;https://rvm.io/rvm/install&lt;/a&gt;) or rbenv (&lt;a href=&#34;https://github.com/rbenv/rbenv#installation&#34;&gt;https://github.com/rbenv/rbenv#installation&lt;/a&gt;). After you have ruby and yarn setup, you&#39;ll need to do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Install bundler&#xA;gem install bundler&#xA;# Use bundler to install Ruby dependencies&#xA;bundle install --deployment --without development test&#xA;# Use yarn to install node.js dependencies&#xA;yarn install --pure-lockfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A separate user is recommended.&lt;/p&gt; &#xA;&lt;p&gt;If you want the crossposter to send data to a statsd instance, you need to configure the appropriate variables in the .env file. You can check the example for reference.&lt;/p&gt; &#xA;&lt;p&gt;Before starting for the first time, you need to generate the assets and setup the database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle exec rake db:setup # sets up the database&#xA;bundle exec rake assets:precompile # generates the assets&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An example nginx configuration can be found at &lt;code&gt;util/nginx.conf&lt;/code&gt;. It assumes the crossposter is running at port 3000, in the directory &lt;code&gt;/home/crossposter/live&lt;/code&gt; and the domain &lt;code&gt;crossposter.example.com&lt;/code&gt; needs to be replaced by your own.&lt;/p&gt; &#xA;&lt;p&gt;An example of the configuration file is provided at &lt;code&gt;.env.example&lt;/code&gt;. To generate &lt;code&gt;SECRET_KEY_BASE&lt;/code&gt;, you need to run &lt;code&gt;bundle exec rake secret&lt;/code&gt; and copy the resulting hash. You need to configure an app on Twitter with permission to read and write. The credentials that they give you need to be added to TWITTER_CLIENT_ID and TWITTER_CLIENT_SECRET. \ If you&#39;re not using Librato, you don&#39;t need to fill any of the Librato variables.&lt;/p&gt; &#xA;&lt;p&gt;To start the web app, you need to do: &lt;code&gt;bundle exec puma -C config/puma.rb&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are using systemd, you can create a service with something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[Unit]&#xA;Description=mastodon-twitter-crossposter&#xA;After=network.target&#xA;&#xA;[Service]&#xA;Type=simple&#xA;User=crossposter&#xA;WorkingDirectory=/home/crossposter/live&#xA;Environment=&#34;RAILS_ENV=production&#34;&#xA;Environment=&#34;RAILS_LOG_TO_STDOUT=enabled&#34;&#xA;Environment=&#34;PORT=3001&#34;&#xA;ExecStart=/bin/bash -lc &#34;bundle exec puma -C config/puma.rb&#34;&#xA;TimeoutSec=15&#xA;Restart=always&#xA;&#xA;[Install]&#xA;WantedBy=multi-user.target&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And put it on &lt;code&gt;/etc/systemd/system/crossposter.service&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;And a second one like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[Unit]&#xA;Description=mastodon-twitter-crossposter-sidekiq&#xA;After=network.target&#xA;&#xA;[Service]&#xA;Type=simple&#xA;User=crossposter&#xA;WorkingDirectory=/home/crossposter/live&#xA;Environment=&#34;RAILS_ENV=production&#34;&#xA;Environment=&#34;RAILS_LOG_TO_STDOUT=enabled&#34;&#xA;Environment=&#34;RAILS_MAX_THREADS=5&#34;&#xA;ExecStart=/bin/bash -lc &#34;bundle exec sidekiq -c 5 -q default&#34;&#xA;TimeoutSec=15&#xA;Restart=always&#xA;&#xA;[Install]&#xA;WantedBy=multi-user.target&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And put it on &lt;code&gt;/etc/systemd/system/crossposter-sidekiq.service&lt;/code&gt; (note that RAILS_MAX_THREADS and the number of sidekiq threads should be the same)&lt;/p&gt; &#xA;&lt;p&gt;These example files are provided in the &lt;code&gt;config/systemd-services&lt;/code&gt; directory. You may copy these files (with necessary modifications, if applicable) to &lt;code&gt;/etc/systemd/system/&lt;/code&gt; to run the system in the background.&lt;/p&gt; &#xA;&lt;h3&gt;Running side-by-side with other sidekiq/redis applications&lt;/h3&gt; &#xA;&lt;p&gt;If you are running the crossposter on a server with other sidekiq/redis applications, you need extra configuration to make sure everything is separated.&lt;/p&gt; &#xA;&lt;p&gt;For a more in-depth information, you can check out &lt;a href=&#34;https://github.com/mperham/sidekiq/wiki/Using-Redis&#34;&gt;Sidekiq Wiki&lt;/a&gt;, but one thing you can do it&#39;s to use another redis db, which could be done by creating a file in &lt;code&gt;config/initializers/sidekiq.rb&lt;/code&gt; with the content like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Sidekiq.configure_server do |config|&#xA;  config.redis = { url: &#39;redis://redis.example.com:7372/2&#39; }&#xA;end&#xA;&#xA;Sidekiq.configure_client do |config|&#xA;  config.redis = { url: &#39;redis://redis.example.com:7372/2&#39; }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You need to replace all values with actual values relevant to your server.&lt;/p&gt; &#xA;&lt;h3&gt;Running in Docker&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a &lt;code&gt;.env&lt;/code&gt; based on &lt;code&gt;.env.example&lt;/code&gt; and set &lt;code&gt;DB_HOST=db&lt;/code&gt;, &lt;code&gt;DB_USER=postgres&lt;/code&gt;, &lt;code&gt;REDIS_URL=redis://redis&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Start the app &lt;code&gt;docker-compose up -d --build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Then init the db with &lt;code&gt;docker-compose run --rm web bundle exec rake db:setup&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Blocked or allowed domains&lt;/h2&gt; &#xA;&lt;p&gt;You can add &lt;code&gt;ALLOWED_DOMAINS=your.domain.com&lt;/code&gt; to .env.production to only allow users from your instance to access the crossposter. This variable can contain multiple instances separated by comma.&lt;/p&gt; &#xA;&lt;p&gt;At the same time, you can add &lt;code&gt;BLOCKED_DOMAINS=evil.corp,bad.instance&lt;/code&gt; to .env.production to block users from those instances to access the crossposter. They need to be separated by commas, spaces are optional.&lt;/p&gt; &#xA;&lt;p&gt;You should only enable one at each time.&lt;/p&gt; &#xA;&lt;h2&gt;Admin tasks&lt;/h2&gt; &#xA;&lt;p&gt;If you are an admin, you might want to make yourself an admin, which allows you to take a look on the status of the sidekiq queues (and solve possible issues that happen regarding users crossposting). To do so, you can run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FEDIVERSE_USERNAME=your_user@your.domain.com RAILS_ENV=production bundle exec rake crossposter:make_admin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want a user to no longer be an admin of your crossposter, you can make so by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FEDIVERSE_USERNAME=your_user@your.domain.com RAILS_ENV=production bundle exec rake crossposter:revoke_admin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;p&gt;Run &lt;code&gt;RAILS_ENV=test bundle exec rake db:setup&lt;/code&gt; to create the test database (a postgres running locally is needed), and after that run the tests with &lt;code&gt;bundle exec rake test&lt;/code&gt; (or &lt;code&gt;COVERAGE=1 bundle exec rake test&lt;/code&gt; if coverage information is desired)&lt;/p&gt; &#xA;&lt;h2&gt;Starting&lt;/h2&gt; &#xA;&lt;p&gt;To start the project locally, you should use &lt;code&gt;bin/dev&lt;/code&gt;, which will start all needed components. You need to have your local environment variables configured, common issues are that sidekiq can&#39;t find redis, which will make it fail to start. See the &lt;code&gt;Procfile.dev&lt;/code&gt; for commands to run only some of the components.&lt;/p&gt; &#xA;&lt;p&gt;For production, you need sidekiq to process jobs (that is, to post accross the networks), but you only need the webserver if you want to change configurations or to allow new signups. If you&#39;re in a single user setup, you can start and stop the webserver as needed.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;If your server crashes and the crossposter is not correctly turned off, it might happen that jobs get into a state in which they are not able to recover by themselves. The symptom in this case is that no posts get crossposted and if you navigate to https://&#xA; &lt;your crossposter&gt;&#xA;  /sidekiq, no jobs get ever added to the queue. If you get to that case, and there&#39;s a digest in the &#34;unique digests&#34; tab even without a corresponding job over at the &#34;busy&#34; tab, you can remove the unique digest and the job that inserts the status should start running again.&#xA; &lt;/your&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Experimental Content Warning recognition&lt;/h2&gt; &#xA;&lt;p&gt;When posting from Twitter to Mastodon the Crossposter tries to detect content warnings in the tweets and post them over to Mastodon. The detected CW takes precedence over the default twitter one if exists. Some formats are supported and more can be added in the future, but currently, this are the ones that will be recognized:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CW: content warning&#xA;my tweet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;TW: content warning&#xA;my tweet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;CW/TW: content warning&#xA;my tweet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;TW, CW, content warning&#xA;my tweet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Spoiler: content warning&#xA;my tweet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;CN: content warning&#xA;my tweet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Contains: content warning&#xA;my tweet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Contém: content warning&#xA;my tweet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All of these posts will be posted in Mastodon with the same content: &lt;code&gt;my tweet&lt;/code&gt; and will have a content warning of &lt;code&gt;content warning&lt;/code&gt;. The crossposter attempts to remove any extra spaces between the &lt;code&gt;CW:&lt;/code&gt; (or equivalent) tag.&lt;/p&gt; &#xA;&lt;p&gt;This also works for quote-retweets. That is, if you are retweeting and you want to add a content warning to the tweet, you can just quote-retweet writing &lt;code&gt;CW: content warning&lt;/code&gt;. &lt;img src=&#34;https://raw.githubusercontent.com/renatolond/mastodon-twitter-poster/main/cw_quote_example.png&#34; alt=&#34;Example of a quote-retweet adding a content warning&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/renatolond/mastodon-twitter-poster/main/crossposted_cw_quote_example.png&#34; alt=&#34;Example of the quote-retweet after being crossposted&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This does not work for several tweets in a thread. Each tweet needs to have it&#39;s own CW.&lt;/p&gt; &#xA;&lt;p&gt;Even though this is an experimental feature, it cannot be disabled. The reason is that content warnings are important for people in Mastodon and the crossposter should still try to keep it in a good environment, even if bringing content from Twitter.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Mastodon Twitter Crossposter is &lt;strong&gt;100% free&lt;/strong&gt; and &lt;strong&gt;open source&lt;/strong&gt;. We encourage and support an active, healthy community that accepts contributions from the public – including you!&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s a high level description of the crossposter over at &lt;a href=&#34;https://github.com/renatolond/mastodon-twitter-poster/wiki/Development-help&#34;&gt;development help&lt;/a&gt;. You can start there and ask questions as needed!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (C) 2017-2018 Renato Cerqueira &amp;amp; other crossposter contributors&lt;/p&gt; &#xA;&lt;p&gt;This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU Affero General Public License along with this program. If not, see &lt;a href=&#34;https://www.gnu.org/licenses/&#34;&gt;https://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ankane/strong_migrations</title>
    <updated>2022-11-20T01:46:44Z</updated>
    <id>tag:github.com,2022-11-20:/ankane/strong_migrations</id>
    <link href="https://github.com/ankane/strong_migrations" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Catch unsafe migrations in development&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Strong Migrations&lt;/h1&gt; &#xA;&lt;p&gt;Catch unsafe migrations in development&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;✓&amp;nbsp;&amp;nbsp;Detects potentially dangerous operations&lt;br&gt;&amp;nbsp;&amp;nbsp;✓&amp;nbsp;&amp;nbsp;Prevents them from running by default&lt;br&gt;&amp;nbsp;&amp;nbsp;✓&amp;nbsp;&amp;nbsp;Provides instructions on safer ways to do what you want&lt;/p&gt; &#xA;&lt;p&gt;Supports PostgreSQL, MySQL, and MariaDB&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;🍊&lt;/span&gt; Battle-tested at &lt;a href=&#34;https://www.instacart.com/opensource&#34;&gt;Instacart&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ankane/strong_migrations/actions&#34;&gt;&lt;img src=&#34;https://github.com/ankane/strong_migrations/workflows/build/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add this line to your application’s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#34;strong_migrations&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bundle install&#xA;rails generate strong_migrations:install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Strong Migrations sets a long statement timeout for migrations so you can set a &lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#app-timeouts&#34;&gt;short statement timeout&lt;/a&gt; for your application.&lt;/p&gt; &#xA;&lt;h2&gt;How It Works&lt;/h2&gt; &#xA;&lt;p&gt;When you run a migration that’s potentially dangerous, you’ll see an error message like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;=== Dangerous operation detected #strong_migrations ===&#xA;&#xA;Active Record caches attributes, which causes problems&#xA;when removing columns. Be sure to ignore the column:&#xA;&#xA;class User &amp;lt; ApplicationRecord&#xA;  self.ignored_columns = [&#34;name&#34;]&#xA;end&#xA;&#xA;Deploy the code, then wrap this step in a safety_assured { ... } block.&#xA;&#xA;class RemoveColumn &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    safety_assured { remove_column :users, :name }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An operation is classified as dangerous if it either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Blocks reads or writes for more than a few seconds (after a lock is acquired)&lt;/li&gt; &#xA; &lt;li&gt;Has a good chance of causing application errors&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Checks&lt;/h2&gt; &#xA;&lt;p&gt;Potentially dangerous operations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#removing-a-column&#34;&gt;removing a column&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#adding-a-column-with-a-default-value&#34;&gt;adding a column with a default value&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#backfilling-data&#34;&gt;backfilling data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#changing-the-type-of-a-column&#34;&gt;changing the type of a column&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#renaming-a-column&#34;&gt;renaming a column&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#renaming-a-table&#34;&gt;renaming a table&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#creating-a-table-with-the-force-option&#34;&gt;creating a table with the force option&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#adding-a-check-constraint&#34;&gt;adding a check constraint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#executing-SQL-directly&#34;&gt;executing SQL directly&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Postgres-specific checks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#adding-an-index-non-concurrently&#34;&gt;adding an index non-concurrently&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#adding-a-reference&#34;&gt;adding a reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#adding-a-foreign-key&#34;&gt;adding a foreign key&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#adding-an-exclusion-constraint&#34;&gt;adding an exclusion constraint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#adding-a-json-column&#34;&gt;adding a json column&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#setting-not-null-on-an-existing-column&#34;&gt;setting NOT NULL on an existing column&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Best practices:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#keeping-non-unique-indexes-to-three-columns-or-less&#34;&gt;keeping non-unique indexes to three columns or less&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also add &lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#custom-checks&#34;&gt;custom checks&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/ankane/strong_migrations/master/#disable-checks&#34;&gt;disable specific checks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Removing a column&lt;/h3&gt; &#xA;&lt;h4&gt;Bad&lt;/h4&gt; &#xA;&lt;p&gt;Active Record caches database columns at runtime, so if you drop a column, it can cause exceptions until your app reboots.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class RemoveSomeColumnFromUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    remove_column :users, :some_column&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Good&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Tell Active Record to ignore the column from its cache&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ApplicationRecord&#xA;  self.ignored_columns = [&#34;some_column&#34;]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Deploy the code&lt;/li&gt; &#xA; &lt;li&gt;Write a migration to remove the column (wrap in &lt;code&gt;safety_assured&lt;/code&gt; block)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class RemoveSomeColumnFromUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    safety_assured { remove_column :users, :some_column }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Deploy and run the migration&lt;/li&gt; &#xA; &lt;li&gt;Remove the line added in step 1&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Adding a column with a default value&lt;/h3&gt; &#xA;&lt;h4&gt;Bad&lt;/h4&gt; &#xA;&lt;p&gt;In earlier versions of Postgres, MySQL, and MariaDB, adding a column with a default value to an existing table causes the entire table to be rewritten. During this time, reads and writes are blocked in Postgres, and writes are blocked in MySQL and MariaDB.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddSomeColumnToUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    add_column :users, :some_column, :text, default: &#34;default_value&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Postgres 11+, MySQL 8.0.12+, and MariaDB 10.3.2+, this no longer requires a table rewrite and is safe (except for volatile functions like &lt;code&gt;gen_random_uuid()&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;Good&lt;/h4&gt; &#xA;&lt;p&gt;Instead, add the column without a default value, then change the default.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddSomeColumnToUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def up&#xA;    add_column :users, :some_column, :text&#xA;    change_column_default :users, :some_column, &#34;default_value&#34;&#xA;  end&#xA;&#xA;  def down&#xA;    remove_column :users, :some_column&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the next section for how to backfill.&lt;/p&gt; &#xA;&lt;h3&gt;Backfilling data&lt;/h3&gt; &#xA;&lt;h4&gt;Bad&lt;/h4&gt; &#xA;&lt;p&gt;Active Record creates a transaction around each migration, and backfilling in the same transaction that alters a table keeps the table locked for the &lt;a href=&#34;https://wework.github.io/data/2015/11/05/add-columns-with-default-values-to-large-tables-in-rails-postgres/&#34;&gt;duration of the backfill&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddSomeColumnToUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    add_column :users, :some_column, :text&#xA;    User.update_all some_column: &#34;default_value&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, running a single query to update data can cause issues for large tables.&lt;/p&gt; &#xA;&lt;h4&gt;Good&lt;/h4&gt; &#xA;&lt;p&gt;There are three keys to backfilling safely: batching, throttling, and running it outside a transaction. Use the Rails console or a separate migration with &lt;code&gt;disable_ddl_transaction!&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class BackfillSomeColumn &amp;lt; ActiveRecord::Migration[7.0]&#xA;  disable_ddl_transaction!&#xA;&#xA;  def up&#xA;    User.unscoped.in_batches do |relation|&#xA;      relation.update_all some_column: &#34;default_value&#34;&#xA;      sleep(0.01) # throttle&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Changing the type of a column&lt;/h3&gt; &#xA;&lt;h4&gt;Bad&lt;/h4&gt; &#xA;&lt;p&gt;Changing the type of a column causes the entire table to be rewritten. During this time, reads and writes are blocked in Postgres, and writes are blocked in MySQL and MariaDB.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ChangeSomeColumnType &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    change_column :users, :some_column, :new_type&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some changes don’t require a table rewrite and are safe in Postgres:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Safe Changes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cidr&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Changing to &lt;code&gt;inet&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;citext&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Changing to &lt;code&gt;text&lt;/code&gt; if not indexed, changing to &lt;code&gt;string&lt;/code&gt; with no &lt;code&gt;:limit&lt;/code&gt; if not indexed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Increasing or removing &lt;code&gt;:precision&lt;/code&gt;, changing to &lt;code&gt;timestamptz&lt;/code&gt; when session time zone is UTC in Postgres 12+&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;decimal&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Increasing &lt;code&gt;:precision&lt;/code&gt; at same &lt;code&gt;:scale&lt;/code&gt;, removing &lt;code&gt;:precision&lt;/code&gt; and &lt;code&gt;:scale&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;interval&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Increasing or removing &lt;code&gt;:precision&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;numeric&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Increasing &lt;code&gt;:precision&lt;/code&gt; at same &lt;code&gt;:scale&lt;/code&gt;, removing &lt;code&gt;:precision&lt;/code&gt; and &lt;code&gt;:scale&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Increasing or removing &lt;code&gt;:limit&lt;/code&gt;, changing to &lt;code&gt;text&lt;/code&gt;, changing &lt;code&gt;citext&lt;/code&gt; if not indexed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;text&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Changing to &lt;code&gt;string&lt;/code&gt; with no &lt;code&gt;:limit&lt;/code&gt;, changing to &lt;code&gt;citext&lt;/code&gt; if not indexed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;time&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Increasing or removing &lt;code&gt;:precision&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;timestamptz&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Increasing or removing &lt;code&gt;:limit&lt;/code&gt;, changing to &lt;code&gt;datetime&lt;/code&gt; when session time zone is UTC in Postgres 12+&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;And some in MySQL and MariaDB:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Safe Changes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Increasing &lt;code&gt;:limit&lt;/code&gt; from under 255 up to 255, increasing &lt;code&gt;:limit&lt;/code&gt; from over 255 to the max&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Good&lt;/h4&gt; &#xA;&lt;p&gt;A safer approach is to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a new column&lt;/li&gt; &#xA; &lt;li&gt;Write to both columns&lt;/li&gt; &#xA; &lt;li&gt;Backfill data from the old column to the new column&lt;/li&gt; &#xA; &lt;li&gt;Move reads from the old column to the new column&lt;/li&gt; &#xA; &lt;li&gt;Stop writing to the old column&lt;/li&gt; &#xA; &lt;li&gt;Drop the old column&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Renaming a column&lt;/h3&gt; &#xA;&lt;h4&gt;Bad&lt;/h4&gt; &#xA;&lt;p&gt;Renaming a column that’s in use will cause errors in your application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class RenameSomeColumn &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    rename_column :users, :some_column, :new_name&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Good&lt;/h4&gt; &#xA;&lt;p&gt;A safer approach is to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a new column&lt;/li&gt; &#xA; &lt;li&gt;Write to both columns&lt;/li&gt; &#xA; &lt;li&gt;Backfill data from the old column to the new column&lt;/li&gt; &#xA; &lt;li&gt;Move reads from the old column to the new column&lt;/li&gt; &#xA; &lt;li&gt;Stop writing to the old column&lt;/li&gt; &#xA; &lt;li&gt;Drop the old column&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Renaming a table&lt;/h3&gt; &#xA;&lt;h4&gt;Bad&lt;/h4&gt; &#xA;&lt;p&gt;Renaming a table that’s in use will cause errors in your application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class RenameUsersToCustomers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    rename_table :users, :customers&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Good&lt;/h4&gt; &#xA;&lt;p&gt;A safer approach is to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a new table&lt;/li&gt; &#xA; &lt;li&gt;Write to both tables&lt;/li&gt; &#xA; &lt;li&gt;Backfill data from the old table to new table&lt;/li&gt; &#xA; &lt;li&gt;Move reads from the old table to the new table&lt;/li&gt; &#xA; &lt;li&gt;Stop writing to the old table&lt;/li&gt; &#xA; &lt;li&gt;Drop the old table&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Creating a table with the force option&lt;/h3&gt; &#xA;&lt;h4&gt;Bad&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;force&lt;/code&gt; option can drop an existing table.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class CreateUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    create_table :users, force: true do |t|&#xA;      # ...&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Good&lt;/h4&gt; &#xA;&lt;p&gt;Create tables without the &lt;code&gt;force&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class CreateUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    create_table :users do |t|&#xA;      # ...&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you intend to drop an existing table, run &lt;code&gt;drop_table&lt;/code&gt; first.&lt;/p&gt; &#xA;&lt;h3&gt;Adding a check constraint&lt;/h3&gt; &#xA;&lt;p&gt;&lt;span&gt;🐢&lt;/span&gt; Safe by default available&lt;/p&gt; &#xA;&lt;h4&gt;Bad&lt;/h4&gt; &#xA;&lt;p&gt;Adding a check constraint blocks reads and writes in Postgres and blocks writes in MySQL and MariaDB while every row is checked.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddCheckConstraint &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    add_check_constraint :users, &#34;price &amp;gt; 0&#34;, name: &#34;price_check&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Good - Postgres&lt;/h4&gt; &#xA;&lt;p&gt;Add the check constraint without validating existing rows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddCheckConstraint &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    add_check_constraint :users, &#34;price &amp;gt; 0&#34;, name: &#34;price_check&#34;, validate: false&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then validate them in a separate migration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ValidateCheckConstraint &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    validate_check_constraint :users, name: &#34;price_check&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Good - MySQL and MariaDB&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ankane/strong_migrations/issues/new&#34;&gt;Let us know&lt;/a&gt; if you have a safe way to do this (check constraints can be added with &lt;code&gt;NOT ENFORCED&lt;/code&gt;, but enforcing blocks writes).&lt;/p&gt; &#xA;&lt;h3&gt;Executing SQL directly&lt;/h3&gt; &#xA;&lt;p&gt;Strong Migrations can’t ensure safety for raw SQL statements. Make really sure that what you’re doing is safe, then use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ExecuteSQL &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    safety_assured { execute &#34;...&#34; }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding an index non-concurrently&lt;/h3&gt; &#xA;&lt;p&gt;&lt;span&gt;🐢&lt;/span&gt; Safe by default available&lt;/p&gt; &#xA;&lt;h4&gt;Bad&lt;/h4&gt; &#xA;&lt;p&gt;In Postgres, adding an index non-concurrently blocks writes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddSomeIndexToUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    add_index :users, :some_column&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Good&lt;/h4&gt; &#xA;&lt;p&gt;Add indexes concurrently.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddSomeIndexToUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  disable_ddl_transaction!&#xA;&#xA;  def change&#xA;    add_index :users, :some_column, algorithm: :concurrently&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you forget &lt;code&gt;disable_ddl_transaction!&lt;/code&gt;, the migration will fail. Also, note that indexes on new tables (those created in the same migration) don’t require this.&lt;/p&gt; &#xA;&lt;p&gt;With &lt;a href=&#34;https://github.com/ankane/gindex&#34;&gt;gindex&lt;/a&gt;, you can generate an index migration instantly with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rails g index table column&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding a reference&lt;/h3&gt; &#xA;&lt;p&gt;&lt;span&gt;🐢&lt;/span&gt; Safe by default available&lt;/p&gt; &#xA;&lt;h4&gt;Bad&lt;/h4&gt; &#xA;&lt;p&gt;Rails adds an index non-concurrently to references by default, which blocks writes in Postgres.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddReferenceToUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    add_reference :users, :city&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Good&lt;/h4&gt; &#xA;&lt;p&gt;Make sure the index is added concurrently.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddReferenceToUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  disable_ddl_transaction!&#xA;&#xA;  def change&#xA;    add_reference :users, :city, index: {algorithm: :concurrently}&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding a foreign key&lt;/h3&gt; &#xA;&lt;p&gt;&lt;span&gt;🐢&lt;/span&gt; Safe by default available&lt;/p&gt; &#xA;&lt;h4&gt;Bad&lt;/h4&gt; &#xA;&lt;p&gt;In Postgres, adding a foreign key blocks writes on both tables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddForeignKeyOnUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    add_foreign_key :users, :orders&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddReferenceToUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    add_reference :users, :order, foreign_key: true&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Good&lt;/h4&gt; &#xA;&lt;p&gt;Add the foreign key without validating existing rows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddForeignKeyOnUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    add_foreign_key :users, :orders, validate: false&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then validate them in a separate migration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ValidateForeignKeyOnUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    validate_foreign_key :users, :orders&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding an exclusion constraint&lt;/h3&gt; &#xA;&lt;h4&gt;Bad&lt;/h4&gt; &#xA;&lt;p&gt;In Postgres, adding an exclusion constraint blocks reads and writes while every row is checked.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddExclusionContraint &amp;lt; ActiveRecord::Migration[7.1]&#xA;  def change&#xA;    add_exclusion_constraint :users, &#34;number WITH =&#34;, using: :gist&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Good&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ankane/strong_migrations/issues/new&#34;&gt;Let us know&lt;/a&gt; if you have a safe way to do this (exclusion constraints cannot be marked &lt;code&gt;NOT VALID&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Adding a json column&lt;/h3&gt; &#xA;&lt;h4&gt;Bad&lt;/h4&gt; &#xA;&lt;p&gt;In Postgres, there’s no equality operator for the &lt;code&gt;json&lt;/code&gt; column type, which can cause errors for existing &lt;code&gt;SELECT DISTINCT&lt;/code&gt; queries in your application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddPropertiesToUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    add_column :users, :properties, :json&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Good&lt;/h4&gt; &#xA;&lt;p&gt;Use &lt;code&gt;jsonb&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddPropertiesToUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    add_column :users, :properties, :jsonb&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting NOT NULL on an existing column&lt;/h3&gt; &#xA;&lt;p&gt;&lt;span&gt;🐢&lt;/span&gt; Safe by default available&lt;/p&gt; &#xA;&lt;h4&gt;Bad&lt;/h4&gt; &#xA;&lt;p&gt;In Postgres, setting &lt;code&gt;NOT NULL&lt;/code&gt; on an existing column blocks reads and writes while every row is checked.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class SetSomeColumnNotNull &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    change_column_null :users, :some_column, false&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Good&lt;/h4&gt; &#xA;&lt;p&gt;Instead, add a check constraint.&lt;/p&gt; &#xA;&lt;p&gt;For Rails 6.1, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class SetSomeColumnNotNull &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    add_check_constraint :users, &#34;some_column IS NOT NULL&#34;, name: &#34;users_some_column_null&#34;, validate: false&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Rails &amp;lt; 6.1, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class SetSomeColumnNotNull &amp;lt; ActiveRecord::Migration[6.0]&#xA;  def change&#xA;    safety_assured do&#xA;      execute &#39;ALTER TABLE &#34;users&#34; ADD CONSTRAINT &#34;users_some_column_null&#34; CHECK (&#34;some_column&#34; IS NOT NULL) NOT VALID&#39;&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then validate it in a separate migration. A &lt;code&gt;NOT NULL&lt;/code&gt; check constraint is &lt;a href=&#34;https://medium.com/doctolib/adding-a-not-null-constraint-on-pg-faster-with-minimal-locking-38b2c00c4d1c&#34;&gt;functionally equivalent&lt;/a&gt; to setting &lt;code&gt;NOT NULL&lt;/code&gt; on the column (but it won’t show up in &lt;code&gt;schema.rb&lt;/code&gt; in Rails &amp;lt; 6.1). In Postgres 12+, once the check constraint is validated, you can safely set &lt;code&gt;NOT NULL&lt;/code&gt; on the column and drop the check constraint.&lt;/p&gt; &#xA;&lt;p&gt;For Rails 6.1, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ValidateSomeColumnNotNull &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    validate_check_constraint :users, name: &#34;users_some_column_null&#34;&#xA;&#xA;    # in Postgres 12+, you can then safely set NOT NULL on the column&#xA;    change_column_null :users, :some_column, false&#xA;    remove_check_constraint :users, name: &#34;users_some_column_null&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Rails &amp;lt; 6.1, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ValidateSomeColumnNotNull &amp;lt; ActiveRecord::Migration[6.0]&#xA;  def change&#xA;    safety_assured do&#xA;      execute &#39;ALTER TABLE &#34;users&#34; VALIDATE CONSTRAINT &#34;users_some_column_null&#34;&#39;&#xA;    end&#xA;&#xA;    # in Postgres 12+, you can then safely set NOT NULL on the column&#xA;    change_column_null :users, :some_column, false&#xA;    safety_assured do&#xA;      execute &#39;ALTER TABLE &#34;users&#34; DROP CONSTRAINT &#34;users_some_column_null&#34;&#39;&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Keeping non-unique indexes to three columns or less&lt;/h3&gt; &#xA;&lt;h4&gt;Bad&lt;/h4&gt; &#xA;&lt;p&gt;Adding a non-unique index with more than three columns rarely improves performance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddSomeIndexToUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    add_index :users, [:a, :b, :c, :d]&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Good&lt;/h4&gt; &#xA;&lt;p&gt;Instead, start an index with columns that narrow down the results the most.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class AddSomeIndexToUsers &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    add_index :users, [:b, :d]&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Postgres, be sure to add them concurrently.&lt;/p&gt; &#xA;&lt;h2&gt;Assuring Safety&lt;/h2&gt; &#xA;&lt;p&gt;To mark a step in the migration as safe, despite using a method that might otherwise be dangerous, wrap it in a &lt;code&gt;safety_assured&lt;/code&gt; block.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MySafeMigration &amp;lt; ActiveRecord::Migration[7.0]&#xA;  def change&#xA;    safety_assured { remove_column :users, :some_column }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Certain methods like &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;change_table&lt;/code&gt; cannot be inspected and are prevented from running by default. Make sure what you’re doing is really safe and use this pattern.&lt;/p&gt; &#xA;&lt;h2&gt;Safe by Default&lt;/h2&gt; &#xA;&lt;p&gt;Make operations safe by default.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;adding and removing an index&lt;/li&gt; &#xA; &lt;li&gt;adding a foreign key&lt;/li&gt; &#xA; &lt;li&gt;adding a check constraint&lt;/li&gt; &#xA; &lt;li&gt;setting NOT NULL on an existing column&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Add to &lt;code&gt;config/initializers/strong_migrations.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;StrongMigrations.safe_by_default = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom Checks&lt;/h2&gt; &#xA;&lt;p&gt;Add your own custom checks with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;StrongMigrations.add_check do |method, args|&#xA;  if method == :add_index &amp;amp;&amp;amp; args[0].to_s == &#34;users&#34;&#xA;    stop! &#34;No more indexes on the users table&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;stop!&lt;/code&gt; method to stop migrations.&lt;/p&gt; &#xA;&lt;p&gt;Note: Since &lt;code&gt;remove_column&lt;/code&gt; always requires a &lt;code&gt;safety_assured&lt;/code&gt; block, it’s not possible to add a custom check for &lt;code&gt;remove_column&lt;/code&gt; operations.&lt;/p&gt; &#xA;&lt;h2&gt;Opt-in Checks&lt;/h2&gt; &#xA;&lt;h3&gt;Removing an index non-concurrently&lt;/h3&gt; &#xA;&lt;p&gt;Postgres supports removing indexes concurrently, but removing them non-concurrently shouldn’t be an issue for most applications. You can enable this check with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;StrongMigrations.enable_check(:remove_index)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Disable Checks&lt;/h2&gt; &#xA;&lt;p&gt;Disable specific checks with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;StrongMigrations.disable_check(:add_index)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://github.com/ankane/strong_migrations/raw/master/lib/strong_migrations/error_messages.rb&#34;&gt;source code&lt;/a&gt; for the list of keys.&lt;/p&gt; &#xA;&lt;h2&gt;Down Migrations / Rollbacks&lt;/h2&gt; &#xA;&lt;p&gt;By default, checks are disabled when migrating down. Enable them with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;StrongMigrations.check_down = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom Messages&lt;/h2&gt; &#xA;&lt;p&gt;To customize specific messages, create an initializer with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;StrongMigrations.error_messages[:add_column_default] = &#34;Your custom instructions&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://github.com/ankane/strong_migrations/raw/master/lib/strong_migrations/error_messages.rb&#34;&gt;source code&lt;/a&gt; for the list of keys.&lt;/p&gt; &#xA;&lt;h2&gt;Migration Timeouts&lt;/h2&gt; &#xA;&lt;p&gt;It’s extremely important to set a short lock timeout for migrations. This way, if a migration can’t acquire a lock in a timely manner, other statements won’t be stuck behind it. We also recommend setting a long statement timeout so migrations can run for a while.&lt;/p&gt; &#xA;&lt;p&gt;Create &lt;code&gt;config/initializers/strong_migrations.rb&lt;/code&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;StrongMigrations.lock_timeout = 10.seconds&#xA;StrongMigrations.statement_timeout = 1.hour&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or set the timeouts directly on the database user that runs migrations. For Postgres, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;ALTER ROLE myuser SET lock_timeout = &#39;10s&#39;;&#xA;ALTER ROLE myuser SET statement_timeout = &#39;1h&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: If you use PgBouncer in transaction mode, you must set timeouts on the database user.&lt;/p&gt; &#xA;&lt;h2&gt;Lock Timeout Retries [experimental]&lt;/h2&gt; &#xA;&lt;p&gt;There’s the option to automatically retry statements when the lock timeout is reached. Here’s how it works:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If a lock timeout happens outside a transaction, the statement is retried&lt;/li&gt; &#xA; &lt;li&gt;If it happens inside the DDL transaction, the entire migration is retried (only applicable to Postgres)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Add to &lt;code&gt;config/initializers/strong_migrations.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;StrongMigrations.lock_timeout_retries = 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set the delay between retries with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;StrongMigrations.lock_timeout_retry_delay = 10.seconds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;App Timeouts&lt;/h2&gt; &#xA;&lt;p&gt;We recommend adding timeouts to &lt;code&gt;config/database.yml&lt;/code&gt; to prevent connections from hanging and individual queries from taking up too many resources in controllers, jobs, the Rails console, and other places.&lt;/p&gt; &#xA;&lt;p&gt;For Postgres:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;production:&#xA;  connect_timeout: 5&#xA;  variables:&#xA;    statement_timeout: 15s&#xA;    lock_timeout: 10s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: If you use PgBouncer in transaction mode, you must set the statement and lock timeouts on the database user as shown above.&lt;/p&gt; &#xA;&lt;p&gt;For MySQL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;production:&#xA;  connect_timeout: 5&#xA;  read_timeout: 5&#xA;  write_timeout: 5&#xA;  variables:&#xA;    max_execution_time: 15000 # ms&#xA;    lock_wait_timeout: 10 # sec&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For MariaDB:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;production:&#xA;  connect_timeout: 5&#xA;  read_timeout: 5&#xA;  write_timeout: 5&#xA;  variables:&#xA;    max_statement_time: 15 # sec&#xA;    lock_wait_timeout: 10 # sec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For HTTP connections, Redis, and other services, check out &lt;a href=&#34;https://github.com/ankane/the-ultimate-guide-to-ruby-timeouts&#34;&gt;this guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Existing Migrations&lt;/h2&gt; &#xA;&lt;p&gt;To mark migrations as safe that were created before installing this gem, create an initializer with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;StrongMigrations.start_after = 20170101000000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the version from your latest migration.&lt;/p&gt; &#xA;&lt;h2&gt;Target Version&lt;/h2&gt; &#xA;&lt;p&gt;If your development database version is different from production, you can specify the production version so the right checks run in development.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;StrongMigrations.target_version = 10 # or &#34;8.0.12&#34;, &#34;10.3.2&#34;, etc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The major version works well for Postgres, while the full version is recommended for MySQL and MariaDB.&lt;/p&gt; &#xA;&lt;p&gt;For safety, this option only affects development and test environments. In other environments, the actual server version is always used.&lt;/p&gt; &#xA;&lt;p&gt;If your app has multiple databases with different versions, with Rails 6.1+, you can use: [unreleased]&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;StrongMigrations.target_version = {primary: 13, catalog: 15}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Analyze Tables&lt;/h2&gt; &#xA;&lt;p&gt;Analyze tables automatically (to update planner statistics) after an index is added. Create an initializer with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;StrongMigrations.auto_analyze = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Faster Migrations&lt;/h2&gt; &#xA;&lt;p&gt;Only dump the schema when adding a new migration. If you use Git, add to the end of your &lt;code&gt;Rakefile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;task :faster_migrations do&#xA;  ActiveRecord::Base.dump_schema_after_migration = Rails.env.development? &amp;amp;&amp;amp;&#xA;    `git status db/migrate/ --porcelain`.present?&#xA;end&#xA;&#xA;task &#34;db:migrate&#34;: &#34;faster_migrations&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Schema Sanity&lt;/h2&gt; &#xA;&lt;p&gt;Columns can flip order in &lt;code&gt;db/schema.rb&lt;/code&gt; when you have multiple developers. One way to prevent this is to &lt;a href=&#34;https://www.pgrs.net/2008/03/12/alphabetize-schema-rb-columns/&#34;&gt;alphabetize them&lt;/a&gt;. Add to the end of your &lt;code&gt;Rakefile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;task &#34;db:schema:dump&#34;: &#34;strong_migrations:alphabetize_columns&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Permissions&lt;/h2&gt; &#xA;&lt;p&gt;We recommend using a &lt;a href=&#34;https://ankane.org/postgres-users&#34;&gt;separate database user&lt;/a&gt; for migrations when possible so you don’t need to grant your app user permission to alter tables.&lt;/p&gt; &#xA;&lt;h2&gt;Smaller Projects&lt;/h2&gt; &#xA;&lt;p&gt;You probably don’t need this gem for smaller projects, as operations that are unsafe at scale can be perfectly safe on smaller, low-traffic tables.&lt;/p&gt; &#xA;&lt;h2&gt;Additional Reading&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pedro.herokuapp.com/past/2011/7/13/rails_migrations_with_no_downtime/&#34;&gt;Rails Migrations with No Downtime&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/braintree-product-technology/postgresql-at-scale-database-schema-changes-without-downtime-20d3749ed680&#34;&gt;PostgreSQL at Scale: Database Schema Changes Without Downtime&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mydbops.wordpress.com/2020/03/04/an-overview-of-ddl-algorithms-in-mysql-covers-mysql-8/&#34;&gt;An Overview of DDL Algorithms in MySQL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mariadb.com/kb/en/innodb-online-ddl-overview/&#34;&gt;MariaDB InnoDB Online DDL Overview&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to Bob Remeika and David Waller for the &lt;a href=&#34;https://github.com/foobarfighter/safe-migrations&#34;&gt;original code&lt;/a&gt; and &lt;a href=&#34;https://github.com/LendingHome/zero_downtime_migrations&#34;&gt;Sean Huber&lt;/a&gt; for the bad/good readme format.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Everyone is encouraged to help improve this project. Here are a few ways you can help:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ankane/strong_migrations/issues&#34;&gt;Report bugs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fix bugs and &lt;a href=&#34;https://github.com/ankane/strong_migrations/pulls&#34;&gt;submit pull requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Write, clarify, or fix documentation&lt;/li&gt; &#xA; &lt;li&gt;Suggest or add new features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To get started with development:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/ankane/strong_migrations.git&#xA;cd strong_migrations&#xA;bundle install&#xA;&#xA;# Postgres&#xA;createdb strong_migrations_test&#xA;bundle exec rake test&#xA;&#xA;# MySQL and MariaDB&#xA;mysqladmin create strong_migrations_test&#xA;ADAPTER=mysql2 bundle exec rake test&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>tradingview/charting-library-examples</title>
    <updated>2022-11-20T01:46:44Z</updated>
    <id>tag:github.com,2022-11-20:/tradingview/charting-library-examples</id>
    <link href="https://github.com/tradingview/charting-library-examples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Examples of Charting Library integrations with other libraries, frameworks and data transports&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TradingView Charting Library Integration Examples&lt;/h1&gt; &#xA;&lt;h2&gt;What is Charting Library&lt;/h2&gt; &#xA;&lt;p&gt;Charting Library is a standalone solution for displaying charts. This free, downloadable library is hosted on your servers and is connected to your data feed to be used in your website or app. &lt;a href=&#34;https://www.tradingview.com/HTML5-stock-forex-bitcoin-charting-library/&#34;&gt;Learn more and download&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Content&lt;/h2&gt; &#xA;&lt;h3&gt;android&lt;/h3&gt; &#xA;&lt;p&gt;TradingView &lt;a href=&#34;https://www.tradingview.com/HTML5-stock-forex-bitcoin-charting-library/&#34;&gt;Charting Library&lt;/a&gt; integration into Android WebView&lt;/p&gt; &#xA;&lt;h3&gt;angular5&lt;/h3&gt; &#xA;&lt;p&gt;TradingView &lt;a href=&#34;https://www.tradingview.com/HTML5-stock-forex-bitcoin-charting-library/&#34;&gt;Charting Library&lt;/a&gt; and &lt;a href=&#34;https://angular.io/&#34;&gt;Angular 5&lt;/a&gt; Integration Example&lt;/p&gt; &#xA;&lt;h3&gt;ios-swift&lt;/h3&gt; &#xA;&lt;p&gt;TradingView &lt;a href=&#34;https://www.tradingview.com/HTML5-stock-forex-bitcoin-charting-library/&#34;&gt;Charting Library&lt;/a&gt; integration into iOS WKWebView&lt;/p&gt; &#xA;&lt;h3&gt;nextjs-javascript&lt;/h3&gt; &#xA;&lt;p&gt;TradingView &lt;a href=&#34;https://www.tradingview.com/HTML5-stock-forex-bitcoin-charting-library/&#34;&gt;Charting Library&lt;/a&gt; and &lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt; Integration Example&lt;/p&gt; &#xA;&lt;h3&gt;nuxtjs&lt;/h3&gt; &#xA;&lt;p&gt;TradingView &lt;a href=&#34;https://www.tradingview.com/HTML5-stock-forex-bitcoin-charting-library/&#34;&gt;Charting Library&lt;/a&gt; and &lt;a href=&#34;https://nuxtjs.org/&#34;&gt;Nuxt.js&lt;/a&gt; Integration Example&lt;/p&gt; &#xA;&lt;h3&gt;react-javascript&lt;/h3&gt; &#xA;&lt;p&gt;TradingView &lt;a href=&#34;https://www.tradingview.com/HTML5-stock-forex-bitcoin-charting-library/&#34;&gt;Charting Library&lt;/a&gt; and &lt;a href=&#34;https://reactjs.org&#34;&gt;React&lt;/a&gt; Integration Example&lt;/p&gt; &#xA;&lt;h3&gt;react-native&lt;/h3&gt; &#xA;&lt;p&gt;TradingView &lt;a href=&#34;https://www.tradingview.com/HTML5-stock-forex-bitcoin-charting-library/&#34;&gt;Charting Library&lt;/a&gt; and &lt;a href=&#34;https://facebook.github.io/react-native/&#34;&gt;React Native&lt;/a&gt; Integration Example&lt;/p&gt; &#xA;&lt;h3&gt;react-typescript&lt;/h3&gt; &#xA;&lt;p&gt;TradingView &lt;a href=&#34;https://www.tradingview.com/HTML5-stock-forex-bitcoin-charting-library/&#34;&gt;Charting Library&lt;/a&gt;, &lt;a href=&#34;https://reactjs.org&#34;&gt;React&lt;/a&gt; and &lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt; Integration Example&lt;/p&gt; &#xA;&lt;h3&gt;ruby-on-rails&lt;/h3&gt; &#xA;&lt;p&gt;TradingView &lt;a href=&#34;https://www.tradingview.com/HTML5-stock-forex-bitcoin-charting-library/&#34;&gt;Charting Library&lt;/a&gt; and &lt;a href=&#34;http://rubyonrails.org/&#34;&gt;Ruby-on-Rails&lt;/a&gt; Integration Example&lt;/p&gt; &#xA;&lt;h3&gt;vuejs&lt;/h3&gt; &#xA;&lt;p&gt;TradingView &lt;a href=&#34;https://www.tradingview.com/HTML5-stock-forex-bitcoin-charting-library/&#34;&gt;Charting Library&lt;/a&gt; and &lt;a href=&#34;https://vuejs.org/&#34;&gt;Vue.js&lt;/a&gt; Integration Example&lt;/p&gt;</summary>
  </entry>
</feed>