<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-16T02:03:59Z</updated>
  <subtitle>Weekly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kaminari/kaminari</title>
    <updated>2023-04-16T02:03:59Z</updated>
    <id>tag:github.com,2023-04-16:/kaminari/kaminari</id>
    <link href="https://github.com/kaminari/kaminari" rel="alternate"></link>
    <summary type="html">&lt;p&gt;âš¡ A Scope &amp; Engine based, clean, powerful, customizable and sophisticated paginator for Ruby webapps&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kaminari &lt;a href=&#34;https://github.com/kaminari/kaminari/actions&#34;&gt;&lt;img src=&#34;https://github.com/kaminari/kaminari/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/kaminari/kaminari&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/kaminari/kaminari/badges/gpa.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;A Scope &amp;amp; Engine based, clean, powerful, customizable and sophisticated paginator for modern web app frameworks and ORMs&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Clean&lt;/h3&gt; &#xA;&lt;p&gt;Does not globally pollute &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Hash&lt;/code&gt;, &lt;code&gt;Object&lt;/code&gt; or &lt;code&gt;AR::Base&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Easy to Use&lt;/h3&gt; &#xA;&lt;p&gt;Just bundle the gem, then your models are ready to be paginated. No configuration required. Don&#39;t have to define anything in your models or helpers.&lt;/p&gt; &#xA;&lt;h3&gt;Simple Scope-based API&lt;/h3&gt; &#xA;&lt;p&gt;Everything is method chainable with less &#34;Hasheritis&#34;. You know, that&#39;s the modern Rails way. No special collection class or anything for the paginated values, instead using a general &lt;code&gt;AR::Relation&lt;/code&gt; instance. So, of course you can chain any other conditions before or after the paginator scope.&lt;/p&gt; &#xA;&lt;h3&gt;Customizable Engine-based I18n-aware Helpers&lt;/h3&gt; &#xA;&lt;p&gt;As the whole pagination helper is basically just a collection of links and non-links, Kaminari renders each of them through its own partial template inside the Engine. So, you can easily modify their behaviour, style or whatever by overriding partial templates.&lt;/p&gt; &#xA;&lt;h3&gt;ORM &amp;amp; Template Engine Agnostic&lt;/h3&gt; &#xA;&lt;p&gt;Kaminari supports multiple ORMs (ActiveRecord, DataMapper, Mongoid, MongoMapper) multiple web frameworks (Rails, Sinatra, Grape), and multiple template engines (ERB, Haml, Slim).&lt;/p&gt; &#xA;&lt;h3&gt;Modern&lt;/h3&gt; &#xA;&lt;p&gt;The pagination helper outputs the HTML5 &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; tag by default. Plus, the helper supports Rails unobtrusive Ajax.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Versions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Ruby 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 3.0, 3.1, 3.2&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Rails 4.1, 4.2, 5.0, 5.1, 5.2, 6.0, 6.1, 7.0, 7.1&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sinatra 1.4, 2.0&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Haml 3+&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Mongoid 3+&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MongoMapper 0.9+&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;DataMapper 1.1.0+&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install kaminari on the default Rails stack, just put this line in your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;kaminari&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then bundle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re building non-Rails of non-ActiveRecord app and want the pagination feature on it, please take a look at &lt;a href=&#34;https://raw.githubusercontent.com/kaminari/kaminari/master/#other-frameworklibrary-support&#34;&gt;Other Framework/Library Support&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h2&gt;Query Basics&lt;/h2&gt; &#xA;&lt;h3&gt;The &lt;code&gt;page&lt;/code&gt; Scope&lt;/h3&gt; &#xA;&lt;p&gt;To fetch the 7th page of users (default &lt;code&gt;per_page&lt;/code&gt; is 25)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.page(7)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: pagination starts at page 1, not at page 0 (page(0) will return the same results as page(1)).&lt;/p&gt; &#xA;&lt;p&gt;Kaminari does not add an &lt;code&gt;order&lt;/code&gt; to queries. To avoid surprises, you should generally include an order in paginated queries. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.order(:name).page(7)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can get page numbers or page conditions by using below methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.count                     #=&amp;gt; 1000&#xA;User.page(1).limit_value       #=&amp;gt; 20&#xA;User.page(1).total_pages       #=&amp;gt; 50&#xA;User.page(1).current_page      #=&amp;gt; 1&#xA;User.page(1).next_page         #=&amp;gt; 2&#xA;User.page(2).prev_page         #=&amp;gt; 1&#xA;User.page(1).first_page?       #=&amp;gt; true&#xA;User.page(50).last_page?       #=&amp;gt; true&#xA;User.page(100).out_of_range?   #=&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;The &lt;code&gt;per&lt;/code&gt; Scope&lt;/h3&gt; &#xA;&lt;p&gt;To show a lot more users per each page (change the &lt;code&gt;per&lt;/code&gt; value)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.order(:name).page(7).per(50)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;per&lt;/code&gt; scope is not directly defined on the models but is just a method defined on the page scope. This is absolutely reasonable because you will never actually use &lt;code&gt;per&lt;/code&gt; without specifying the &lt;code&gt;page&lt;/code&gt; number.&lt;/p&gt; &#xA;&lt;p&gt;Keep in mind that &lt;code&gt;per&lt;/code&gt; internally utilizes &lt;code&gt;limit&lt;/code&gt; and so it will override any &lt;code&gt;limit&lt;/code&gt; that was set previously. And if you want to get the size for all request records you can use &lt;code&gt;total_count&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.count                     #=&amp;gt; 1000&#xA;a = User.limit(5); a.count     #=&amp;gt; 5&#xA;a.page(1).per(20).size         #=&amp;gt; 20&#xA;a.page(1).per(20).total_count  #=&amp;gt; 1000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;The &lt;code&gt;padding&lt;/code&gt; Scope&lt;/h3&gt; &#xA;&lt;p&gt;Occasionally you need to pad a number of records that is not a multiple of the page size.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.order(:name).page(7).per(50).padding(3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;padding&lt;/code&gt; scope also is not directly defined on the models.&lt;/p&gt; &#xA;&lt;h3&gt;Unscoping&lt;/h3&gt; &#xA;&lt;p&gt;If for some reason you need to unscope &lt;code&gt;page&lt;/code&gt; and &lt;code&gt;per&lt;/code&gt; methods you can call &lt;code&gt;except(:limit, :offset)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;users = User.order(:name).page(7).per(50)&#xA;unpaged_users = users.except(:limit, :offset) # unpaged_users will not use the kaminari scopes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuring Kaminari&lt;/h2&gt; &#xA;&lt;h3&gt;General Configuration Options&lt;/h3&gt; &#xA;&lt;p&gt;You can configure the following default values by overriding these values using &lt;code&gt;Kaminari.configure&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;default_per_page      # 25 by default&#xA;max_per_page          # nil by default&#xA;max_pages             # nil by default&#xA;window                # 4 by default&#xA;outer_window          # 0 by default&#xA;left                  # 0 by default&#xA;right                 # 0 by default&#xA;page_method_name      # :page by default&#xA;param_name            # :page by default&#xA;params_on_first_page  # false by default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There&#39;s a handy generator that generates the default configuration file into config/initializers directory. Run the following generator command, then edit the generated file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% rails g kaminari:config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Changing &lt;code&gt;page_method_name&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can change the method name &lt;code&gt;page&lt;/code&gt; to &lt;code&gt;bonzo&lt;/code&gt; or &lt;code&gt;plant&lt;/code&gt; or whatever you like, in order to play nice with existing &lt;code&gt;page&lt;/code&gt; method or association or scope or any other plugin that defines &lt;code&gt;page&lt;/code&gt; method on your models.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring Default per_page Value for Each Model by &lt;code&gt;paginates_per&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can specify default &lt;code&gt;per_page&lt;/code&gt; value per each model using the following declarative DSL.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ActiveRecord::Base&#xA;  paginates_per 50&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring Max per_page Value for Each Model by &lt;code&gt;max_paginates_per&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can specify max &lt;code&gt;per_page&lt;/code&gt; value per each model using the following declarative DSL. If the variable that specified via &lt;code&gt;per&lt;/code&gt; scope is more than this variable, &lt;code&gt;max_paginates_per&lt;/code&gt; is used instead of it. Default value is nil, which means you are not imposing any max &lt;code&gt;per_page&lt;/code&gt; value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ActiveRecord::Base&#xA;  max_paginates_per 100&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring max_pages Value for Each Model by &lt;code&gt;max_pages&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can specify &lt;code&gt;max_pages&lt;/code&gt; value per each model using the following declarative DSL. This value restricts the total number of pages that can be returned. Useful for setting limits on large collections.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ActiveRecord::Base&#xA;  max_pages 100&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring params_on_first_page when using ransack_memory&lt;/h3&gt; &#xA;&lt;p&gt;If you are using &lt;a href=&#34;https://github.com/richardrails/ransack_memory&#34;&gt;the &lt;code&gt;ransack_memory&lt;/code&gt; gem&lt;/a&gt; and experience problems navigating back to the previous or first page, set the &lt;code&gt;params_on_first_page&lt;/code&gt; setting to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Controllers&lt;/h2&gt; &#xA;&lt;h3&gt;The Page Parameter Is in &lt;code&gt;params[:page]&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Typically, your controller code will look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;@users = User.order(:name).page params[:page]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Views&lt;/h2&gt; &#xA;&lt;h3&gt;The Same Old Helper Method&lt;/h3&gt; &#xA;&lt;p&gt;Just call the &lt;code&gt;paginate&lt;/code&gt; helper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= paginate @users %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will render several &lt;code&gt;?page=N&lt;/code&gt; pagination links surrounded by an HTML5 &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; tag.&lt;/p&gt; &#xA;&lt;h2&gt;Helpers&lt;/h2&gt; &#xA;&lt;h3&gt;The &lt;code&gt;paginate&lt;/code&gt; Helper Method&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= paginate @users %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would output several pagination links such as &lt;code&gt;Â« First â€¹ Prev ... 2 3 4 5 6 7 8 9 10 ... Next â€º Last Â»&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Specifying the &#34;inner window&#34; Size (4 by default)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= paginate @users, window: 2 %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would output something like &lt;code&gt;... 5 6 7 8 9 ...&lt;/code&gt; when 7 is the current page.&lt;/p&gt; &#xA;&lt;h3&gt;Specifying the &#34;outer window&#34; Size (0 by default)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= paginate @users, outer_window: 3 %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would output something like &lt;code&gt;1 2 3 ...(snip)... 18 19 20&lt;/code&gt; while having 20 pages in total.&lt;/p&gt; &#xA;&lt;h3&gt;Outer Window Can Be Separately Specified by left, right (0 by default)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= paginate @users, left: 1, right: 3 %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would output something like &lt;code&gt;1 ...(snip)... 18 19 20&lt;/code&gt; while having 20 pages in total.&lt;/p&gt; &#xA;&lt;h3&gt;Changing the Parameter Name (&lt;code&gt;:param_name&lt;/code&gt;) for the Links&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= paginate @users, param_name: :pagina %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would modify the query parameter name on each links.&lt;/p&gt; &#xA;&lt;h3&gt;Extra Parameters (&lt;code&gt;:params&lt;/code&gt;) for the Links&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= paginate @users, params: {controller: &#39;foo&#39;, action: &#39;bar&#39;, format: :turbo_stream} %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would modify each link&#39;s &lt;code&gt;url_option&lt;/code&gt;. :&lt;code&gt;controller&lt;/code&gt; and :&lt;code&gt;action&lt;/code&gt; might be the keys in common.&lt;/p&gt; &#xA;&lt;h3&gt;Ajax Links (crazy simple, but works perfectly!)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= paginate @users, remote: true %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would add &lt;code&gt;data-remote=&#34;true&#34;&lt;/code&gt; to all the links inside.&lt;/p&gt; &#xA;&lt;h3&gt;Specifying an Alternative Views Directory (default is kaminari/)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= paginate @users, views_prefix: &#39;templates&#39; %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would search for partials in &lt;code&gt;app/views/templates/kaminari&lt;/code&gt;. This option makes it easier to do things like A/B testing pagination templates/themes, using new/old templates at the same time as well as better integration with other gems such as &lt;a href=&#34;https://github.com/apotonick/cells&#34;&gt;cells&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;The &lt;code&gt;link_to_next_page&lt;/code&gt; and &lt;code&gt;link_to_previous_page&lt;/code&gt; (aliased to &lt;code&gt;link_to_prev_page&lt;/code&gt;) Helper Methods&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= link_to_next_page @items, &#39;Next Page&#39; %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This simply renders a link to the next page. This would be helpful for creating a Twitter-like pagination feature.&lt;/p&gt; &#xA;&lt;p&gt;The helper methods support a &lt;code&gt;params&lt;/code&gt; option to further specify the link. If &lt;code&gt;format&lt;/code&gt; needs to be set, include it in the &lt;code&gt;params&lt;/code&gt; hash.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= link_to_next_page @items, &#39;Next Page&#39;, params: {controller: &#39;foo&#39;, action: &#39;bar&#39;, format: :turbo_stream} %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;The &lt;code&gt;page_entries_info&lt;/code&gt; Helper Method&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= page_entries_info @posts %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This renders a helpful message with numbers of displayed vs. total entries.&lt;/p&gt; &#xA;&lt;p&gt;By default, the message will use the humanized class name of objects in collection: for instance, &#34;project types&#34; for ProjectType models. The namespace will be cut out and only the last name will be used. Override this with the &lt;code&gt;:entry_name&lt;/code&gt; parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= page_entries_info @posts, entry_name: &#39;item&#39; %&amp;gt;&#xA;#=&amp;gt; Displaying items 6 - 10 of 26 in total&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;The &lt;code&gt;rel_next_prev_link_tags&lt;/code&gt; Helper Method&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= rel_next_prev_link_tags @users %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This renders the rel next and prev link tags for the head.&lt;/p&gt; &#xA;&lt;h3&gt;The &lt;code&gt;path_to_next_page&lt;/code&gt; Helper Method&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= path_to_next_page @users %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This returns the server relative path to the next page.&lt;/p&gt; &#xA;&lt;h3&gt;The &lt;code&gt;path_to_prev_page&lt;/code&gt; Helper Method&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= path_to_prev_page @users %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This returns the server relative path to the previous page.&lt;/p&gt; &#xA;&lt;h2&gt;I18n and Labels&lt;/h2&gt; &#xA;&lt;p&gt;The default labels for &#39;first&#39;, &#39;last&#39;, &#39;previous&#39;, &#39;...&#39; and &#39;next&#39; are stored in the I18n yaml inside the engine, and rendered through I18n API. You can switch the label value per I18n.locale for your internationalized application. Keys and the default values are the following. You can override them by adding to a YAML file in your &lt;code&gt;Rails.root/config/locales&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;en:&#xA;  views:&#xA;    pagination:&#xA;      first: &#34;&amp;amp;laquo; First&#34;&#xA;      last: &#34;Last &amp;amp;raquo;&#34;&#xA;      previous: &#34;&amp;amp;lsaquo; Prev&#34;&#xA;      next: &#34;Next &amp;amp;rsaquo;&#34;&#xA;      truncate: &#34;&amp;amp;hellip;&#34;&#xA;  helpers:&#xA;    page_entries_info:&#xA;      one_page:&#xA;        display_entries:&#xA;          zero: &#34;No %{entry_name} found&#34;&#xA;          one: &#34;Displaying &amp;lt;b&amp;gt;1&amp;lt;/b&amp;gt; %{entry_name}&#34;&#xA;          other: &#34;Displaying &amp;lt;b&amp;gt;all %{count}&amp;lt;/b&amp;gt; %{entry_name}&#34;&#xA;      more_pages:&#xA;        display_entries: &#34;Displaying %{entry_name} &amp;lt;b&amp;gt;%{first}&amp;amp;nbsp;-&amp;amp;nbsp;%{last}&amp;lt;/b&amp;gt; of &amp;lt;b&amp;gt;%{total}&amp;lt;/b&amp;gt; in total&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use non-English localization see &lt;a href=&#34;https://github.com/svenfuchs/i18n/raw/master/test/test_data/locales/plurals.rb&#34;&gt;i18n rules&lt;/a&gt; for changing &lt;code&gt;one_page:display_entries&lt;/code&gt; block.&lt;/p&gt; &#xA;&lt;h2&gt;Customizing the Pagination Helper&lt;/h2&gt; &#xA;&lt;p&gt;Kaminari includes a handy template generator.&lt;/p&gt; &#xA;&lt;h3&gt;To Edit Your Paginator&lt;/h3&gt; &#xA;&lt;p&gt;Run the generator first,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% rails g kaminari:views default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then edit the partials in your app&#39;s &lt;code&gt;app/views/kaminari/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;For Haml/Slim Users&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;a href=&#34;https://github.com/haml/html2haml&#34;&gt;html2haml gem&lt;/a&gt; or the &lt;a href=&#34;https://github.com/slim-template/html2slim&#34;&gt;html2slim gem&lt;/a&gt; to convert erb templates. The kaminari gem will automatically pick up haml/slim templates if you place them in &lt;code&gt;app/views/kaminari/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Multiple Templates&lt;/h3&gt; &#xA;&lt;p&gt;In case you need different templates for your paginator (for example public and admin), you can pass &lt;code&gt;--views-prefix directory&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% rails g kaminari:views default --views-prefix admin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;that will generate partials in &lt;code&gt;app/views/admin/kaminari/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Themes&lt;/h3&gt; &#xA;&lt;p&gt;The generator has the ability to fetch several sample template themes from the external repository (&lt;a href=&#34;https://github.com/amatsuda/kaminari_themes&#34;&gt;https://github.com/amatsuda/kaminari_themes&lt;/a&gt;) in addition to the bundled &#34;default&#34; one, which will help you creating a nice looking paginator.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% rails g kaminari:views THEME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see the full list of available themes, take a look at the themes repository, or just hit the generator without specifying &lt;code&gt;THEME&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% rails g kaminari:views&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multiple Themes&lt;/h3&gt; &#xA;&lt;p&gt;To utilize multiple themes from within a single application, create a directory within the app/views/kaminari/ and move your custom template files into that directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% rails g kaminari:views default (skip if you have existing kaminari views)&#xA;% cd app/views/kaminari&#xA;% mkdir my_custom_theme&#xA;% cp _*.html.* my_custom_theme/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, reference that directory when calling the &lt;code&gt;paginate&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= paginate @users, theme: &#39;my_custom_theme&#39; %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Customize away!&lt;/p&gt; &#xA;&lt;p&gt;Note: if the theme isn&#39;t present or none is specified, kaminari will default back to the views included within the gem.&lt;/p&gt; &#xA;&lt;h2&gt;Paginating Without Issuing SELECT COUNT Query&lt;/h2&gt; &#xA;&lt;p&gt;Generally the paginator needs to know the total number of records to display the links, but sometimes we don&#39;t need the total number of records and just need the &#34;previous page&#34; and &#34;next page&#34; links. For such use case, Kaminari provides &lt;code&gt;without_count&lt;/code&gt; mode that creates a paginatable collection without counting the number of all records. This may be helpful when you&#39;re dealing with a very large dataset because counting on a big table tends to become slow on RDBMS.&lt;/p&gt; &#xA;&lt;p&gt;Just add &lt;code&gt;.without_count&lt;/code&gt; to your paginated object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.page(3).without_count&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In your view file, you can only use simple helpers like the following instead of the full-featured &lt;code&gt;paginate&lt;/code&gt; helper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%= link_to_prev_page @users, &#39;Previous Page&#39; %&amp;gt;&#xA;&amp;lt;%= link_to_next_page @users, &#39;Next Page&#39; %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Paginating a Generic Array object&lt;/h2&gt; &#xA;&lt;p&gt;Kaminari provides an Array wrapper class that adapts a generic Array object to the &lt;code&gt;paginate&lt;/code&gt; view helper. However, the &lt;code&gt;paginate&lt;/code&gt; helper doesn&#39;t automatically handle your Array object (this is intentional and by design). &lt;code&gt;Kaminari::paginate_array&lt;/code&gt; method converts your Array object into a paginatable Array that accepts &lt;code&gt;page&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;@paginatable_array = Kaminari.paginate_array(my_array_object).page(params[:page]).per(10)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can specify the &lt;code&gt;total_count&lt;/code&gt; value through options Hash. This would be helpful when handling an Array-ish object that has a different &lt;code&gt;count&lt;/code&gt; value from actual &lt;code&gt;count&lt;/code&gt; such as RSolr search result or when you need to generate a custom pagination. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;@paginatable_array = Kaminari.paginate_array([], total_count: 145).page(params[:page]).per(10)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or, in the case of using an external API to source the page of data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page_size = 10&#xA;one_page = get_page_of_data params[:page], page_size&#xA;@paginatable_array = Kaminari.paginate_array(one_page.data, total_count: one_page.total_count).page(params[:page]).per(page_size)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Creating Friendly URLs and Caching&lt;/h2&gt; &#xA;&lt;p&gt;Because of the &lt;code&gt;page&lt;/code&gt; parameter and Rails routing, you can easily generate SEO and user-friendly URLs. For any resource you&#39;d like to paginate, just add the following to your &lt;code&gt;routes.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;resources :my_resources do&#xA;  get &#39;page/:page&#39;, action: :index, on: :collection&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using Rails 4 or later, you can simplify route definitions by using &lt;code&gt;concern&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;concern :paginatable do&#xA;  get &#39;(page/:page)&#39;, action: :index, on: :collection, as: &#39;&#39;&#xA;end&#xA;&#xA;resources :my_resources, concerns: :paginatable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create URLs like &lt;code&gt;/my_resources/page/33&lt;/code&gt; instead of &lt;code&gt;/my_resources?page=33&lt;/code&gt;. This is now a friendly URL, but it also has other added benefits...&lt;/p&gt; &#xA;&lt;p&gt;Because the &lt;code&gt;page&lt;/code&gt; parameter is now a URL segment, we can leverage on Rails page &lt;a href=&#34;http://guides.rubyonrails.org/caching_with_rails.html#page-caching&#34;&gt;caching&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;NOTE: In this example, I&#39;ve pointed the route to my &lt;code&gt;:index&lt;/code&gt; action. You may have defined a custom pagination action in your controller - you should point &lt;code&gt;action: :your_custom_action&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;h2&gt;Other Framework/Library Support&lt;/h2&gt; &#xA;&lt;h3&gt;The kaminari gem&lt;/h3&gt; &#xA;&lt;p&gt;Technically, the kaminari gem consists of 3 individual components:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;kaminari-core: the core pagination logic&#xA;kaminari-activerecord: Active Record adapter&#xA;kaminari-actionview: Action View adapter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So, bundling &lt;code&gt;gem &#39;kaminari&#39;&lt;/code&gt; is equivalent to the following 2 lines (kaminari-core is referenced from the adapters):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;kaminari-activerecord&#39;&#xA;gem &#39;kaminari-actionview&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;For Other ORM Users&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use other supported ORMs instead of ActiveRecord, for example Mongoid, bundle its adapter instead of kaminari-activerecord.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;kaminari-mongoid&#39;&#xA;gem &#39;kaminari-actionview&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Kaminari currently provides adapters for the following ORMs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Active Record: &lt;a href=&#34;https://github.com/kaminari/kaminari/tree/master/kaminari-activerecord&#34;&gt;https://github.com/kaminari/kaminari/tree/master/kaminari-activerecord&lt;/a&gt; (included in this repo)&lt;/li&gt; &#xA; &lt;li&gt;Mongoid: &lt;a href=&#34;https://github.com/kaminari/kaminari-mongoid&#34;&gt;https://github.com/kaminari/kaminari-mongoid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;MongoMapper: &lt;a href=&#34;https://github.com/kaminari/kaminari-mongo_mapper&#34;&gt;https://github.com/kaminari/kaminari-mongo_mapper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DataMapper: &lt;a href=&#34;https://github.com/kaminari/kaminari-data_mapper&#34;&gt;https://github.com/kaminari/kaminari-data_mapper&lt;/a&gt; (would not work on kaminari 1.0.x)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;For Other Web Framework Users&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use other web frameworks instead of Rails + Action View, for example Sinatra, bundle its adapter instead of kaminari-actionview.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;kaminari-activerecord&#39;&#xA;gem &#39;kaminari-sinatra&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Kaminari currently provides adapters for the following web frameworks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Action View: &lt;a href=&#34;https://github.com/kaminari/kaminari/tree/master/kaminari-actionview&#34;&gt;https://github.com/kaminari/kaminari/tree/master/kaminari-actionview&lt;/a&gt; (included in this repo)&lt;/li&gt; &#xA; &lt;li&gt;Sinatra: &lt;a href=&#34;https://github.com/kaminari/kaminari-sinatra&#34;&gt;https://github.com/kaminari/kaminari-sinatra&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Grape: &lt;a href=&#34;https://github.com/kaminari/kaminari-grape&#34;&gt;https://github.com/kaminari/kaminari-grape&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;For More Information&lt;/h2&gt; &#xA;&lt;p&gt;Check out Kaminari recipes on the GitHub Wiki for more advanced tips and techniques. &lt;a href=&#34;https://github.com/kaminari/kaminari/wiki/Kaminari-recipes&#34;&gt;https://github.com/kaminari/kaminari/wiki/Kaminari-recipes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Questions, Feedback&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to message me on Github (amatsuda) or Twitter (&lt;a href=&#34;https://twitter.com/a_matsuda&#34;&gt;@a_matsuda&lt;/a&gt;) â˜‡â˜‡â˜‡ :)&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to Kaminari&lt;/h2&gt; &#xA;&lt;p&gt;Fork, fix, then send a pull request.&lt;/p&gt; &#xA;&lt;p&gt;To run the test suite locally against all supported frameworks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% bundle install&#xA;% rake test:all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To target the test suite against one framework:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% rake test:active_record_50&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find a list of supported test tasks by running &lt;code&gt;rake -T&lt;/code&gt;. You may also find it useful to run a specific test for a specific framework. To do so, you&#39;ll have to first make sure you have bundled everything for that configuration, then you can run the specific test:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% BUNDLE_GEMFILE=&#39;gemfiles/active_record_50.gemfile&#39; bundle install&#xA;% BUNDLE_GEMFILE=&#39;gemfiles/active_record_50.gemfile&#39; TEST=kaminari-core/test/requests/navigation_test.rb bundle exec rake test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2011- Akira Matsuda. See MIT-LICENSE for further details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MizzyPD/Pokemon-Daybreak</title>
    <updated>2023-04-16T02:03:59Z</updated>
    <id>tag:github.com,2023-04-16:/MizzyPD/Pokemon-Daybreak</id>
    <link href="https://github.com/MizzyPD/Pokemon-Daybreak" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>MiniProfiler/rack-mini-profiler</title>
    <updated>2023-04-16T02:03:59Z</updated>
    <id>tag:github.com,2023-04-16:/MiniProfiler/rack-mini-profiler</id>
    <link href="https://github.com/MiniProfiler/rack-mini-profiler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Profiler for your development and production Ruby rack apps.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rack-mini-profiler&lt;/h1&gt; &#xA;&lt;p&gt;Middleware that displays speed badge for every HTML page, along with (optional) flamegraphs and memory profiling. Designed to work both in production and in development.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/845662/229996538-0f2d9c48-23d9-4d53-a1de-8b4c84c87fbd.png&#34; alt=&#34;Screenshot 2023-04-05 at 3 13 52 PM&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Features&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Database profiling - Currently supports Mysql2, Postgres, Oracle (oracle_enhanced ~&amp;gt; 1.5.0) and Mongoid3 (with fallback support to ActiveRecord)&lt;/li&gt; &#xA; &lt;li&gt;Call-stack profiling - Flame graphs showing time spent by gem&lt;/li&gt; &#xA; &lt;li&gt;Memory profiling - Per-request memory usage, GC stats, and global allocation metrics&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Learn more&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://community.miniprofiler.com&#34;&gt;Visit our community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://railscasts.com/episodes/368-miniprofiler&#34;&gt;Watch the RailsCast&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://samsaffron.com/archive/2013/03/19/flame-graphs-in-ruby-miniprofiler&#34;&gt;Read about Flame graphs in rack-mini-profiler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://samsaffron.com/archive/2012/07/12/miniprofiler-ruby-edition&#34;&gt;Read the announcement posts from 2012&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;rack-mini-profiler needs your help&lt;/h2&gt; &#xA;&lt;p&gt;We have decided to restructure our repository so there is a central UI repo and the various language implementations have their own.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;WE NEED HELP.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Help &lt;a href=&#34;https://www.codetriage.com/miniprofiler/rack-mini-profiler&#34;&gt;triage issues&lt;/a&gt; &lt;a href=&#34;https://www.codetriage.com/miniprofiler/rack-mini-profiler&#34;&gt;&lt;img src=&#34;https://www.codetriage.com/miniprofiler/rack-mini-profiler/badges/users.svg?sanitize=true&#34; alt=&#34;Open Source Helpers&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you feel like taking on any of this start an issue and update us on your progress.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install/add to Gemfile in Ruby 2.6+&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;rack-mini-profiler&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: Be sure to require rack_mini_profiler below the &lt;code&gt;pg&lt;/code&gt; and &lt;code&gt;mysql&lt;/code&gt; gems in your Gemfile. rack_mini_profiler will identify these gems if they are loaded to insert instrumentation. If included too early no SQL will show up.&lt;/p&gt; &#xA;&lt;p&gt;You can also include optional libraries to enable additional features.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# For memory profiling&#xA;gem &#39;memory_profiler&#39;&#xA;&#xA;# For call-stack profiling flamegraphs&#xA;gem &#39;stackprof&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Rails&lt;/h4&gt; &#xA;&lt;p&gt;All you have to do is to include the Gem and you&#39;re good to go in development. See notes below for use in production.&lt;/p&gt; &#xA;&lt;h4&gt;Upgrading to version 2.0.0&lt;/h4&gt; &#xA;&lt;p&gt;Prior to version 2.0.0, Mini Profiler patched various Rails methods to get the information it needed such as template rendering time. Starting from version 2.0.0, Mini Profiler doesn&#39;t patch any Rails methods by default and relies on &lt;code&gt;ActiveSupport::Notifications&lt;/code&gt; to get the information it needs from Rails. If you want Mini Profiler to keep using its patches in version 2.0.0 and later, change the gem line in your &lt;code&gt;Gemfile&lt;/code&gt; to the following:&lt;/p&gt; &#xA;&lt;p&gt;If you want to manually require Mini Profiler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;rack-mini-profiler&#39;, require: [&#39;enable_rails_patches&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t want to manually require Mini Profiler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;rack-mini-profiler&#39;, require: [&#39;enable_rails_patches&#39;, &#39;rack-mini-profiler&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;Net::HTTP&lt;/code&gt; stack level too deep errors&lt;/h4&gt; &#xA;&lt;p&gt;If you start seeing &lt;code&gt;SystemStackError: stack level too deep&lt;/code&gt; errors from &lt;code&gt;Net::HTTP&lt;/code&gt; after installing Mini Profiler, this means there is another patch for &lt;code&gt;Net::HTTP#request&lt;/code&gt; that conflicts with Mini Profiler&#39;s patch in your application. To fix this, change &lt;code&gt;rack-mini-profiler&lt;/code&gt; gem line in your &lt;code&gt;Gemfile&lt;/code&gt; to the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;rack-mini-profiler&#39;, require: [&#39;prepend_net_http_patch&#39;, &#39;rack-mini-profiler&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you currently have &lt;code&gt;require: false&lt;/code&gt;, remove the &lt;code&gt;&#39;rack-mini-profiler&#39;&lt;/code&gt; string from the &lt;code&gt;require&lt;/code&gt; array above so the gem line becomes like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;rack-mini-profiler&#39;, require: [&#39;prepend_net_http_patch&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This conflict happens when a ruby method is patched twice, once using module prepend, and once using method aliasing. See this &lt;a href=&#34;https://bugs.ruby-lang.org/issues/11120&#34;&gt;ruby issue&lt;/a&gt; for details. The fix is to apply all patches the same way. Mini Profiler by default will apply its patch using method aliasing, but you can change that to module prepend by adding &lt;code&gt;require: [&#39;prepend_net_http_patch&#39;]&lt;/code&gt; to the gem line as shown above.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;peek-mysql2&lt;/code&gt; stack level too deep errors&lt;/h4&gt; &#xA;&lt;p&gt;If you use peek-mysql2 with Rails &amp;gt;= 5, you&#39;ll need to use this gem spec in your Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;rack-mini-profiler&#39;, require: [&#39;prepend_mysql2_patch&#39;, &#39;rack-mini-profiler&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should not be necessary with Rails &amp;lt; 5 because peek-mysql2 hooks into mysql2 gem in different ways depending on your Rails version.&lt;/p&gt; &#xA;&lt;h4&gt;Rails and manual initialization&lt;/h4&gt; &#xA;&lt;p&gt;In case you need to make sure rack_mini_profiler is initialized after all other gems, or you want to execute some code before rack_mini_profiler required:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;rack-mini-profiler&#39;, require: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note the &lt;code&gt;require: false&lt;/code&gt; part - if omitted, it will cause the Railtie for the mini-profiler to be loaded outright, and an attempt to re-initialize it manually will raise an exception.&lt;/p&gt; &#xA;&lt;p&gt;Then run the generator which will set up rack-mini-profiler in development:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle exec rails g rack_mini_profiler:install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Rack Builder&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;rack-mini-profiler&#39;&#xA;&#xA;home = lambda { |env|&#xA;  [200, {&#39;Content-Type&#39; =&amp;gt; &#39;text/html&#39;}, [&#34;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;hello!&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#34;]]&#xA;}&#xA;&#xA;builder = Rack::Builder.new do&#xA;  use Rack::MiniProfiler&#xA;  map(&#39;/&#39;) { run home }&#xA;end&#xA;&#xA;run builder&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Sinatra&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;rack-mini-profiler&#39;&#xA;class MyApp &amp;lt; Sinatra::Base&#xA;  use Rack::MiniProfiler&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Hanami&lt;/h4&gt; &#xA;&lt;p&gt;For working with hanami, you need to use rack integration. Also, you need to add &lt;code&gt;Hanami::View::Rendering::Partial#render&lt;/code&gt; method for profile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config.ru&#xA;require &#39;rack-mini-profiler&#39;&#xA;Rack::MiniProfiler.profile_method(Hanami::View::Rendering::Partial, :render) { &#34;Render partial #{@options[:partial]}&#34; }&#xA;&#xA;use Rack::MiniProfiler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Patching ActiveRecord&lt;/h4&gt; &#xA;&lt;p&gt;A typical web application spends a lot of time querying the database. rack_mini_profiler will detect the ORM that is available and apply patches to properly collect query statistics.&lt;/p&gt; &#xA;&lt;p&gt;To make this work, declare the orm&#39;s gem before declaring &lt;code&gt;rack-mini-profiler&lt;/code&gt; in the &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;pg&#39;&#xA;gem &#39;mongoid&#39;&#xA;gem &#39;rack-mini-profiler&#39;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you wish to override this behavior, the environment variable &lt;code&gt;RACK_MINI_PROFILER_PATCH&lt;/code&gt; is available.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export RACK_MINI_PROFILER_PATCH=&#34;pg,mongoid&#34;&#xA;# or&#xA;export RACK_MINI_PROFILER_PATCH=&#34;false&#34;&#xA;# initializers/rack_profiler.rb: SqlPatches.patch %w(mongo)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Patching Net::HTTP&lt;/h4&gt; &#xA;&lt;p&gt;Other than databases, &lt;code&gt;rack-mini-profiler&lt;/code&gt; applies a patch to &lt;code&gt;Net::HTTP&lt;/code&gt;. You may want to disable this patch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export RACK_MINI_PROFILER_PATCH_NET_HTTP=&#34;false&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Flamegraphs&lt;/h3&gt; &#xA;&lt;p&gt;To generate &lt;a href=&#34;http://samsaffron.com/archive/2013/03/19/flame-graphs-in-ruby-miniprofiler&#34;&gt;flamegraphs&lt;/a&gt;, add the &lt;a href=&#34;https://rubygems.org/gems/stackprof&#34;&gt;&lt;strong&gt;stackprof&lt;/strong&gt;&lt;/a&gt; gem to your Gemfile.&lt;/p&gt; &#xA;&lt;p&gt;Then, to view the flamegraph as a direct HTML response from your request, just visit any page in your app with &lt;code&gt;?pp=flamegraph&lt;/code&gt; appended to the URL.&lt;/p&gt; &#xA;&lt;p&gt;Conversely, if you want your regular response instead (which is specially useful for JSON and/or XHR requests), just append the &lt;code&gt;?pp=async-flamegraph&lt;/code&gt; parameter to your request/fetch URL; the request will then return as normal, and the flamegraph data will be stored for later &lt;em&gt;async&lt;/em&gt; viewing, both for this request and for all subsequent requests made by this page (based on the &lt;code&gt;REFERER&lt;/code&gt; header). For viewing these async flamegraphs, use the &#39;flamegraph&#39; link that will appear inside the MiniProfiler UI for these requests.&lt;/p&gt; &#xA;&lt;p&gt;Note: Mini Profiler will not record SQL timings for a request if it asks for a flamegraph. The rationale behind this is to keep Mini Profiler&#39;s methods that are responsible for generating the timings data out of the flamegraph.&lt;/p&gt; &#xA;&lt;h3&gt;Memory Profiling&lt;/h3&gt; &#xA;&lt;p&gt;Memory allocations can be measured (using the &lt;a href=&#34;https://github.com/SamSaffron/memory_profiler&#34;&gt;memory_profiler&lt;/a&gt; gem) which will show allocations broken down by gem, file location, and class and will also highlight &lt;code&gt;String&lt;/code&gt; allocations.&lt;/p&gt; &#xA;&lt;p&gt;Add &lt;code&gt;?pp=profile-memory&lt;/code&gt; to the URL of any request while Rack::MiniProfiler is enabled to generate the report.&lt;/p&gt; &#xA;&lt;p&gt;Additional query parameters can be used to filter the results.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;memory_profiler_allow_files&lt;/code&gt; - filename pattern to include (default is all files)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;memory_profiler_ignore_files&lt;/code&gt; - filename pattern to exclude (default is no exclusions)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;memory_profiler_top&lt;/code&gt; - number of results per section (defaults to 50)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The allow/ignore patterns will be treated as regular expressions.&lt;/p&gt; &#xA;&lt;p&gt;Example: &lt;code&gt;?pp=profile-memory&amp;amp;memory_profiler_allow_files=active_record|app&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are two additional &lt;code&gt;pp&lt;/code&gt; options that can be used to analyze memory which do not require the &lt;code&gt;memory_profiler&lt;/code&gt; gem&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;code&gt;?pp=profile-gc&lt;/code&gt; to report on Garbage Collection statistics&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;?pp=analyze-memory&lt;/code&gt; to report on ObjectSpace statistics&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Snapshots Sampling&lt;/h3&gt; &#xA;&lt;p&gt;In a complex web application, it&#39;s possible for a request to trigger rare conditions that result in poor performance. Mini Profiler ships with a feature to help detect those rare conditions and fix them. It works by enabling invisible profiling on one request every N requests, and saving the performance metrics that are collected during the request (a.k.a snapshot of the request) so that they can be viewed later. To turn this feature on, set the &lt;code&gt;snapshot_every_n_requests&lt;/code&gt; config to a value larger than 0. The larger the value is, the less frequently requests are profiled.&lt;/p&gt; &#xA;&lt;p&gt;Mini Profiler will exclude requests that are made to skipped paths (see &lt;code&gt;skip_paths&lt;/code&gt; config below) from being sampled. Additionally, if profiling is enabled for a request that later finishes with a non-2xx status code, Mini Profiler will discard the snapshot and not save it (this behavior may change in the future).&lt;/p&gt; &#xA;&lt;p&gt;After enabling snapshots sampling, you can see the snapshots that have been collected at &lt;code&gt;/mini-profiler-resources/snapshots&lt;/code&gt; (or if you changed the &lt;code&gt;base_url_path&lt;/code&gt; config, substitute &lt;code&gt;mini-profiler-resources&lt;/code&gt; with your value of the config). You&#39;ll see on that page a table where each row represents a group of snapshots with the duration of the worst snapshot in that group. The worst snapshot in a group is defined as the snapshot whose request took longer than all of the snapshots in the same group. Snapshots grouped by HTTP method and path of the request, and if your application is a Rails app, Mini Profiler will try to convert the path to &lt;code&gt;controller#action&lt;/code&gt; and group by that instead of request path. Clicking on a group will display the snapshots of that group sorted from worst to best. From there, you can click on a snapshot&#39;s ID to see the snapshot with all the performance metrics that were collected.&lt;/p&gt; &#xA;&lt;p&gt;Access to the snapshots page is restricted to only those who can see the speed badge on their own requests, see the section below this one about access control.&lt;/p&gt; &#xA;&lt;p&gt;Mini Profiler will keep a maximum of 50 snapshot groups and a maximum of 15 snapshots per group making the default maximum number of snapshots in the system 750. The default group and per group limits can be changed via the &lt;code&gt;max_snapshot_groups&lt;/code&gt; and &lt;code&gt;max_snapshots_per_group&lt;/code&gt; configuration options, see the configurations table below.&lt;/p&gt; &#xA;&lt;h4&gt;Snapshots Transporter&lt;/h4&gt; &#xA;&lt;p&gt;Mini Profiler can be configured so that it sends snapshots over HTTP using the snapshots transporter. The main use-case of the transporter is to allow the aggregation of snapshots from multiple applications/sources in a single place. To enable the snapshots transporter, you need to provide a destination URL to the &lt;code&gt;snapshots_transport_destination_url&lt;/code&gt; config, and a secure key to the &lt;code&gt;snapshots_transport_auth_key&lt;/code&gt; config (will be used for authorization). Both of these configs are required for the transporter to be enabled.&lt;/p&gt; &#xA;&lt;p&gt;The transporter uses a buffer to temporarily hold snapshots in memory with a limit of 100 snapshots. Every 30 seconds, &lt;em&gt;if&lt;/em&gt; the buffer is not empty, the transporter will make a &lt;code&gt;POST&lt;/code&gt; request with the buffer content to the destination URL. Requests made by the transporter will have a &lt;code&gt;Mini-Profiler-Transport-Auth&lt;/code&gt; header with the value of the &lt;code&gt;snapshots_transport_auth_key&lt;/code&gt; config. The destination should only accept requests that include this header AND the header&#39;s value matches the key you set to the &lt;code&gt;snapshots_transport_auth_key&lt;/code&gt; config.&lt;/p&gt; &#xA;&lt;p&gt;If the specified destination responds with a non-200 status code, the transporter will increase the interval between requests by &lt;code&gt;2^n&lt;/code&gt; seconds where &lt;code&gt;n&lt;/code&gt; is the number of failed requests since the last successful request. The base interval between requests is 30 seconds. So if a request fails, the next request will be &lt;code&gt;30 + 2^1 = 32&lt;/code&gt; seconds later. If the next request fails too, the next one will be &lt;code&gt;30 + 2^2 = 34&lt;/code&gt; seconds later and so on until a request succeeds at which point the interval will return to 30 seconds. The interval will not go beyond 1 hour.&lt;/p&gt; &#xA;&lt;p&gt;Requests made by the transporter can be optionally gzip-compressed by setting the &lt;code&gt;snapshots_transport_gzip_requests&lt;/code&gt; config to true. The body of the requests (after decompression, if you opt for compression) is a JSON string with a single top-level key called &lt;code&gt;snapshots&lt;/code&gt; and it has an array of snapshots. The structure of a snapshot is too complex to be explained here, but it has the same structure that Mini Profiler client expects. So if your use-case is to simply be able to view snapshots from multiple sources in one place, you should simply store the snapshots as-is, and then serve them to Mini Profiler client to consume. If the destination application also has Mini Profiler, you can simply use the API of the storage backends to store the incoming snapshots and Mini Profiler will treat them the same as local snapshots (e.g. they&#39;ll be grouped and displayed in the same manner described in the previous section).&lt;/p&gt; &#xA;&lt;p&gt;Mini Profiler offers an API to add extra fields (a.k.a custom fields) to snapshots. For example, you may want to add whether the request was made by a logged-in or anonymous user, the version of your application or any other things that are specific to your application. To add custom fields to a snapshot, call the &lt;code&gt;Rack::MiniProfiler.add_snapshot_custom_field(&amp;lt;key&amp;gt;, &amp;lt;value&amp;gt;)&lt;/code&gt; method anywhere during the lifetime of a request, and the snapshot of that request will include the fields you added. If you have a Rails app, you can call that method in an &lt;code&gt;after_action&lt;/code&gt; callback. Custom fields are cleared between requests.&lt;/p&gt; &#xA;&lt;h2&gt;Access control in non-development environments&lt;/h2&gt; &#xA;&lt;p&gt;rack-mini-profiler is designed with production profiling in mind. To enable that run &lt;code&gt;Rack::MiniProfiler.authorize_request&lt;/code&gt; once you know a request is allowed to profile.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  # inside your ApplicationController&#xA;&#xA;  before_action do&#xA;    if current_user &amp;amp;&amp;amp; current_user.is_admin?&#xA;      Rack::MiniProfiler.authorize_request&#xA;    end&#xA;  end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If your production application is running on more than one server (or more than one dyno) you will need to configure rack mini profiler&#39;s storage to use Redis or Memcache. See &lt;a href=&#34;https://raw.githubusercontent.com/MiniProfiler/rack-mini-profiler/master/#storage&#34;&gt;storage&lt;/a&gt; for information on changing the storage backend.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Note:&lt;/p&gt; &#xA;&lt;p&gt;Out-of-the-box we will initialize the &lt;code&gt;authorization_mode&lt;/code&gt; to &lt;code&gt;:allow_authorized&lt;/code&gt; in production. However, in some cases we may not be able to do it:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you are running in development or test we will not enable the explicit authorization mode&lt;/li&gt; &#xA; &lt;li&gt;If you use &lt;code&gt;require: false&lt;/code&gt; on rack_mini_profiler we are unlikely to be able to run the railtie&lt;/li&gt; &#xA; &lt;li&gt;If you are running outside of rails we will not run the railtie&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In those cases use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rack::MiniProfiler.config.authorization_mode = :allow_authorized&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When deciding to fully profile a page mini profiler consults with the &lt;code&gt;authorization_mode&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;By default in production we attempt to set the authorization mode to &lt;code&gt;:allow_authorized&lt;/code&gt; meaning that end user will only be able to see requests where somewhere &lt;code&gt;Rack::MiniProfiler.authorize_request&lt;/code&gt; is invoked.&lt;/p&gt; &#xA;&lt;p&gt;In development we run in the &lt;code&gt;:allow_all&lt;/code&gt; authorization mode meaning every request is profiled and displayed to the end user.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Various aspects of rack-mini-profiler&#39;s behavior can be configured when your app boots. For example in a Rails app, this should be done in an initializer: &lt;strong&gt;config/initializers/mini_profiler.rb&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Caching behavior&lt;/h3&gt; &#xA;&lt;p&gt;To fix some nasty bugs with rack-mini-profiler showing the wrong data, the middleware will remove headers relating to caching (Date &amp;amp; Etag on responses, If-Modified-Since &amp;amp; If-None-Match on requests). This probably won&#39;t ever break your application, but it can cause some unexpected behavior. For example, in a Rails app, calls to &lt;code&gt;stale?&lt;/code&gt; will always return true.&lt;/p&gt; &#xA;&lt;p&gt;To disable this behavior, use the following config setting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Do not let rack-mini-profiler disable caching&#xA;Rack::MiniProfiler.config.disable_caching = false # defaults to true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Storage&lt;/h3&gt; &#xA;&lt;p&gt;rack-mini-profiler stores its results so they can be shared later and aren&#39;t lost at the end of the request.&lt;/p&gt; &#xA;&lt;p&gt;There are 4 storage options: &lt;code&gt;MemoryStore&lt;/code&gt;, &lt;code&gt;RedisStore&lt;/code&gt;, &lt;code&gt;MemcacheStore&lt;/code&gt;, and &lt;code&gt;FileStore&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;FileStore&lt;/code&gt; is the default in Rails environments and will write files to &lt;code&gt;tmp/miniprofiler/*&lt;/code&gt;. &lt;code&gt;MemoryStore&lt;/code&gt; is the default otherwise.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# set MemoryStore&#xA;Rack::MiniProfiler.config.storage = Rack::MiniProfiler::MemoryStore&#xA;&#xA;# set RedisStore&#xA;if Rails.env.production?&#xA;  Rack::MiniProfiler.config.storage_options = { url: ENV[&#34;REDIS_SERVER_URL&#34;] }&#xA;  Rack::MiniProfiler.config.storage = Rack::MiniProfiler::RedisStore&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;MemoryStore&lt;/code&gt; stores results in a processes heap - something that does not work well in a multi process environment. &lt;code&gt;FileStore&lt;/code&gt; stores results in the file system - something that may not work well in a multi machine environment. &lt;code&gt;RedisStore&lt;/code&gt;/&lt;code&gt;MemcacheStore&lt;/code&gt; work in multi process and multi machine environments (&lt;code&gt;RedisStore&lt;/code&gt; only saves results for up to 24 hours so it won&#39;t continue to fill up Redis). You will need to add &lt;code&gt;gem redis&lt;/code&gt;/&lt;code&gt;gem dalli&lt;/code&gt; respectively to your &lt;code&gt;Gemfile&lt;/code&gt; to use these stores.&lt;/p&gt; &#xA;&lt;p&gt;Additionally you may implement an &lt;code&gt;AbstractStore&lt;/code&gt; for your own provider.&lt;/p&gt; &#xA;&lt;h3&gt;User result segregation&lt;/h3&gt; &#xA;&lt;p&gt;MiniProfiler will attempt to keep all user results isolated, out-of-the-box the user provider uses the ip address:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rack::MiniProfiler.config.user_provider = Proc.new{|env| Rack::Request.new(env).ip}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can override (something that is very important in a multi-machine production setup):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rack::MiniProfiler.config.user_provider = Proc.new{ |env| CurrentUser.get(env) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The string this function returns should be unique for each user on the system (for anonymous you may need to fall back to ip address)&lt;/p&gt; &#xA;&lt;h3&gt;Profiling specific methods&lt;/h3&gt; &#xA;&lt;p&gt;You can increase the granularity of profiling by measuring the performance of specific methods. Add methods of interest to an initializer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rails.application.config.to_prepare do&#xA;  ::Rack::MiniProfiler.profile_singleton_method(User, :non_admins) { |a| &#34;executing all_non_admins&#34; }&#xA;  ::Rack::MiniProfiler.profile_method(User, :favorite_post) { |a| &#34;executing favorite_post&#34; }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Profiling arbitrary block of code&lt;/h3&gt; &#xA;&lt;p&gt;It is also possible to profile any arbitrary block of code by passing a block to &lt;code&gt;Rack::MiniProfiler.step(name, opts=nil)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rack::MiniProfiler.step(&#39;Adding two elements&#39;) do&#xA;  result = 1 + 2&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using in SPA applications&lt;/h3&gt; &#xA;&lt;p&gt;Single page applications built using Ember, Angular or other frameworks need some special care, as routes often change without a full page load.&lt;/p&gt; &#xA;&lt;p&gt;On route transition always call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;if (window.MiniProfiler !== undefined) {&#xA;  window.MiniProfiler.pageTransition();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method will remove profiling information that was related to previous page and clear aggregate statistics.&lt;/p&gt; &#xA;&lt;h4&gt;MiniProfiler&#39;s speed badge on pages that are not generated via Rails&lt;/h4&gt; &#xA;&lt;p&gt;You need to inject the following in your SPA to load MiniProfiler&#39;s speed badge (&lt;a href=&#34;https://github.com/MiniProfiler/rack-mini-profiler/issues/139#issuecomment-192880706&#34;&gt;extra details surrounding this script&lt;/a&gt; and &lt;a href=&#34;https://github.com/MiniProfiler/rack-mini-profiler/issues/479#issue-782488320&#34;&gt;credit for the script tag&lt;/a&gt; to &lt;a href=&#34;https://github.com/ivanyv&#34;&gt;@ivanyv&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt; &amp;lt;script type=&#34;text/javascript&#34; id=&#34;mini-profiler&#34;&#xA;        src=&#34;/mini-profiler-resources/includes.js?v=12b4b45a3c42e6e15503d7a03810ff33&#34;&#xA;        data-css-url=&#34;/mini-profiler-resources/includes.css?v=12b4b45a3c42e6e15503d7a03810ff33&#34;&#xA;        data-version=&#34;12b4b45a3c42e6e15503d7a03810ff33&#34;&#xA;        data-path=&#34;/mini-profiler-resources/&#34;&#xA;        data-horizontal-position=&#34;left&#34;&#xA;        data-vertical-position=&#34;top&#34;&#xA;        data-ids=&#34;&#34;&#xA;        data-trivial=&#34;false&#34;&#xA;        data-children=&#34;false&#34;&#xA;        data-max-traces=&#34;20&#34;&#xA;        data-controls=&#34;false&#34;&#xA;        data-total-sql-count=&#34;false&#34;&#xA;        data-authorized=&#34;true&#34;&#xA;        data-toggle-shortcut=&#34;alt+p&#34;&#xA;        data-start-hidden=&#34;false&#34;&#xA;        data-collapse-results=&#34;true&#34;&#xA;        data-html-container=&#34;body&#34;&#xA;        data-hidden-custom-fields&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See an &lt;a href=&#34;https://gist.github.com/katelovescode/01cfc2b962c165193b160fd10af6c4d5&#34;&gt;example of how to do this in a React useEffect&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; The GUID (&lt;code&gt;data-version&lt;/code&gt; and the &lt;code&gt;?v=&lt;/code&gt; parameter on the &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;data-css-url&lt;/code&gt;) will change with each release of &lt;code&gt;rack_mini_profiler&lt;/code&gt;. The MiniProfiler&#39;s speed badge will continue to work, although you will have to change the GUID to expire the script to fetch the most recent version.&lt;/p&gt; &#xA;&lt;h4&gt;Using MiniProfiler&#39;s built in route for apps without HTML responses&lt;/h4&gt; &#xA;&lt;p&gt;MiniProfiler also ships with a &lt;code&gt;/rack-mini-profiler/requests&lt;/code&gt; route that displays the speed badge on a blank HTML page. This can be useful when profiling an application that does not render HTML.&lt;/p&gt; &#xA;&lt;h4&gt;Register MiniProfiler&#39;s assets in the Rails assets pipeline&lt;/h4&gt; &#xA;&lt;p&gt;MiniProfiler can be configured so it registers its assets in the assets pipeline. To do that, you&#39;ll need to provide a lambda (or proc) to the &lt;code&gt;assets_url&lt;/code&gt; config (see the below section). The callback will receive 3 arguments which are: &lt;code&gt;name&lt;/code&gt; represents asset name (currently it&#39;s either &lt;code&gt;rack-mini-profiling.js&lt;/code&gt; or &lt;code&gt;rack-mini-profiling.css&lt;/code&gt;), &lt;code&gt;assets_version&lt;/code&gt; is a 32 characters long hash of MiniProfiler&#39;s assets, and &lt;code&gt;env&lt;/code&gt; which is the &lt;code&gt;env&lt;/code&gt; object of the request. MiniProfiler expects the &lt;code&gt;assets_url&lt;/code&gt; callback to return a URL from which the asset can be loaded (the return value will be used as a &lt;code&gt;href&lt;/code&gt;/&lt;code&gt;src&lt;/code&gt; attribute in the DOM). If the &lt;code&gt;assets_url&lt;/code&gt; callback is not set (the default) or it returns a non-truthy value, MiniProfiler will fallback to loading assets from its own middleware (&lt;code&gt;/mini-profiler-resources/*&lt;/code&gt;). The following callback should work for most applications:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rack::MiniProfiler.config.assets_url = -&amp;gt;(name, version, env) {&#xA;  ActionController::Base.helpers.asset_path(name)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration Options&lt;/h3&gt; &#xA;&lt;p&gt;You can set configuration options using the configuration accessor on &lt;code&gt;Rack::MiniProfiler&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rack::MiniProfiler.config.position = &#39;bottom-right&#39;&#xA;Rack::MiniProfiler.config.start_hidden = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The available configuration options are:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pre_authorize_cb&lt;/td&gt; &#xA;   &lt;td&gt;Rails: dev only&lt;br&gt;Rack: always on&lt;/td&gt; &#xA;   &lt;td&gt;A lambda callback that returns true to make mini_profiler visible on a given request.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;position&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#39;top-left&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display mini_profiler on &lt;code&gt;&#39;top-right&#39;&lt;/code&gt;, &lt;code&gt;&#39;top-left&#39;&lt;/code&gt;, &lt;code&gt;&#39;bottom-right&#39;&lt;/code&gt; or &lt;code&gt;&#39;bottom-left&#39;&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;skip_paths&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An array of paths that skip profiling. Both &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;Regexp&lt;/code&gt; are acceptable in the array.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;skip_schema_queries&lt;/td&gt; &#xA;   &lt;td&gt;Rails dev: &lt;code&gt;true&lt;/code&gt;&lt;br&gt;Othwerwise: &lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt; to skip schema queries.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;auto_inject&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt; to inject the miniprofiler script in the page.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;backtrace_ignores&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Regexes of lines to be removed from backtraces.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;backtrace_includes&lt;/td&gt; &#xA;   &lt;td&gt;Rails: &lt;code&gt;[/^\/?(app|config|lib|test)/]&lt;/code&gt;&lt;br&gt;Rack: &lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Regexes of lines to keep in backtraces.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;backtrace_remove&lt;/td&gt; &#xA;   &lt;td&gt;rails: &lt;code&gt;Rails.root&lt;/code&gt;&lt;br&gt;Rack: &lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A string or regex to remove part of each line in the backtrace.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;toggle_shortcut&lt;/td&gt; &#xA;   &lt;td&gt;Alt+P&lt;/td&gt; &#xA;   &lt;td&gt;Keyboard shortcut to toggle the mini_profiler&#39;s visibility. See &lt;a href=&#34;https://github.com/jeresig/jquery.hotkeys&#34;&gt;jquery.hotkeys&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;start_hidden&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt; to make mini_profiler visible on page load.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;backtrace_threshold_ms&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Minimum SQL query elapsed time before a backtrace is recorded.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;flamegraph_sample_rate&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0.5&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;How often to capture stack traces for flamegraphs in milliseconds.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;flamegraph_mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;:wall&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The &lt;a href=&#34;https://github.com/tmm1/stackprof#all-options&#34;&gt;StackProf mode&lt;/a&gt; to pass to &lt;code&gt;StackProf.run&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;base_url_path&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#39;/mini-profiler-resources/&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Path for assets; added as a prefix when naming assets and sought when responding to requests.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cookie_path&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#39;/&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set-Cookie header path for profile cookie&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;collapse_results&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If multiple timing results exist in a single page, collapse them till clicked.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;max_traces_to_show&lt;/td&gt; &#xA;   &lt;td&gt;20&lt;/td&gt; &#xA;   &lt;td&gt;Maximum number of mini profiler timing blocks to show on one page&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;html_container&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;body&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The HTML container (as a jQuery selector) to inject the mini_profiler UI into&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;show_total_sql_count&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Displays the total number of SQL executions.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;enable_advanced_debugging_tools&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enables sensitive debugging tools that can be used via the UI. In production we recommend keeping this disabled as memory and environment debugging tools can expose contents of memory that may contain passwords. Defaults to &lt;code&gt;true&lt;/code&gt; in development.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;assets_url&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;See the &#34;Register MiniProfiler&#39;s assets in the Rails assets pipeline&#34; section above.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;snapshot_every_n_requests&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;-1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Determines how frequently snapshots are taken. See the &#34;Snapshots Sampling&#34; above for more details.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;max_snapshot_groups&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;50&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Determines how many snapshot groups Mini Profiler is allowed to keep.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;max_snapshots_per_group&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;15&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Determines how many snapshots per group Mini Profiler is allowed to keep.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;snapshot_hidden_custom_fields&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Each snapshot custom field will have a dedicated column in the UI by default. Use this config to exclude certain custom fields from having their own columns.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;snapshots_transport_destination_url&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set this config to a valid URL to enable snapshots transporter which will &lt;code&gt;POST&lt;/code&gt; snapshots to the given URL. The transporter requires &lt;code&gt;snapshots_transport_auth_key&lt;/code&gt; config to be set as well.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;snapshots_transport_auth_key&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;POST&lt;/code&gt; requests made by the snapshots transporter to the destination URL will have a &lt;code&gt;Mini-Profiler-Transport-Auth&lt;/code&gt; header with the value of this config. Make sure you use a secure and random key for this config.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;snapshots_redact_sql_queries&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When this is true, SQL queries will be redacted from sampling snapshots, but the backtrace and duration of each SQL query will be saved with the snapshot to keep debugging performance issues possible.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;snapshots_transport_gzip_requests&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Make the snapshots transporter gzip the requests it makes to &lt;code&gt;snapshots_transport_destination_url&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;content_security_policy_nonce&lt;/td&gt; &#xA;   &lt;td&gt;Rails: Current nonce&lt;br&gt;Rack: nil&lt;/td&gt; &#xA;   &lt;td&gt;Set the content security policy nonce to use when inserting MiniProfiler&#39;s script block.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;enable_hotwire_turbo_drive_support&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable support for Hotwire TurboDrive page transitions.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;profile_parameter&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#39;pp&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The query parameter used to interact with this gem.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Using MiniProfiler with &lt;code&gt;Rack::Deflate&lt;/code&gt; middleware&lt;/h3&gt; &#xA;&lt;p&gt;If you are using &lt;code&gt;Rack::Deflate&lt;/code&gt; with Rails and &lt;code&gt;rack-mini-profiler&lt;/code&gt; in its default configuration, &lt;code&gt;Rack::MiniProfiler&lt;/code&gt; will be injected (as always) at position 0 in the middleware stack, which means it will run after &lt;code&gt;Rack::Deflate&lt;/code&gt; on response processing. To prevent attempting to inject HTML in already compressed response body MiniProfiler will suppress compression by setting &lt;code&gt;identity&lt;/code&gt; encoding in &lt;code&gt;Accept-Encoding&lt;/code&gt; request header.&lt;/p&gt; &#xA;&lt;h3&gt;Using MiniProfiler with Heroku Redis&lt;/h3&gt; &#xA;&lt;p&gt;If you are using Heroku Redis, you may need to add the following to your &lt;code&gt;config/initializers/mini_profiler.rb&lt;/code&gt;, in order to get Mini Profiler to work:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;if Rails.env.production?&#xA;  Rack::MiniProfiler.config.storage_options = { &#xA;    url: ENV[&#34;REDIS_URL&#34;],&#xA;    ssl_params: { verify_mode: OpenSSL::SSL::VERIFY_NONE }&#xA;  }&#xA;  Rack::MiniProfiler.config.storage = Rack::MiniProfiler::RedisStore&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above code snippet is &lt;a href=&#34;https://help.heroku.com/HC0F8CUS/redis-connection-issues&#34;&gt;Heroku&#39;s officially suggested workaround&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Special query strings&lt;/h2&gt; &#xA;&lt;p&gt;If you include the query string &lt;code&gt;pp=help&lt;/code&gt; at the end of your request you will see the various options available. You can use these options to extend or contract the amount of diagnostics rack-mini-profiler gathers.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;If you want to contribute to this project, that&#39;s great, thank you! You can run the following rake task:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ BUNDLE_GEMFILE=website/Gemfile bundle install&#xA;$ bundle exec rake client_dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will start a local Sinatra server at &lt;code&gt;http://localhost:9292&lt;/code&gt; where you&#39;ll be able to preview your changes. Refreshing the page should be enough to see any changes you make to files in the &lt;code&gt;lib/html&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to prepend &lt;code&gt;bundle exec&lt;/code&gt; before any Rake tasks you run.&lt;/p&gt; &#xA;&lt;h2&gt;Running the Specs&lt;/h2&gt; &#xA;&lt;p&gt;You need Memcached and Redis services running for the specs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle exec rake build&#xA;$ bundle exec rake spec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Licence&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT)&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2013 Sam Saffron&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
</feed>