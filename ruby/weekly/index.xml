<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-25T01:53:52Z</updated>
  <subtitle>Weekly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cmason/eztz</title>
    <updated>2024-02-25T01:53:52Z</updated>
    <id>tag:github.com,2024-02-25:/cmason/eztz</id>
    <link href="https://github.com/cmason/eztz" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ruby wrapper for the Google Time Zone API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Eztz&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cmason/eztz/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/cmason/eztz/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/cmason/eztz/maintainability&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/0ffbd44773bb2ee6f9ed/maintainability&#34; alt=&#34;Maintainability&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/cmason/eztz/test_coverage&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/0ffbd44773bb2ee6f9ed/test_coverage&#34; alt=&#34;Test Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/rb/eztz&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/eztz.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ruby wrapper for the &lt;a href=&#34;https://developers.google.com/maps/documentation/timezone&#34;&gt;Google Time Zone API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ruby &amp;gt;= 2.7&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Other versions of Ruby may work, but the gem is tested against the above versions.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add this line to your application&#39;s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt; gem &#39;eztz&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install it yourself as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gem install eztz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;An API key is required to access the Google Time Zone API. You can create a new API key from the &lt;a href=&#34;https://developers.google.com/maps/documentation/timezone/get-api-key&#34;&gt;Google Cloud Console&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Set your API key&#xA;Eztz.api_key = &#39;YOUR_API_KEY&#39;&#xA;&#xA;# Pass location coordinates as a string&#xA;$ Eztz.timezone(location: &#39;29.65,-95.28&#39;)&#xA;&#xA;=&amp;gt; #&amp;lt;Eztz::TimeZoneResponse:0x007fe71ba2df78 @timestamp=1488834591, @dst_offset=0, @error_message=nil, @raw_offset=-21600, @status=&#34;OK&#34;, @id=&#34;America/Chicago&#34;, @name=&#34;Central Standard Time&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Pass location coordinates as an array&#xA;$ Eztz.timezone(location: [29.65, -95.28])&#xA;&#xA;=&amp;gt; #&amp;lt;Eztz::TimeZoneResponse:0x007fe71ba2df78 @timestamp=1488834591, @dst_offset=0, @error_message=nil, @raw_offset=-21600, @status=&#34;OK&#34;, @id=&#34;America/Chicago&#34;, @name=&#34;Central Standard Time&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optional parameters include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;timestamp:&lt;/code&gt; specifies the desired time as seconds since midnight, January 1, 1970 UTC. The Google Maps Time Zone API uses the timestamp to determine whether or not Daylight Savings should be applied. Times before 1970 can be expressed as negative values. Defaults to the current time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;language:&lt;/code&gt; The language in which to return results Defaults to &#39;en&#39;. A list of supported languages can be found at developers.google.com/maps/faq#languagesupport&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;After checking out the repo, run &lt;code&gt;bin/setup&lt;/code&gt; to install dependencies. Then, run &lt;code&gt;rake test&lt;/code&gt; to run the tests. You can also run &lt;code&gt;bin/console&lt;/code&gt; for an interactive prompt that will allow you to experiment.&lt;/p&gt; &#xA;&lt;p&gt;To install this gem onto your local machine, run &lt;code&gt;bundle exec rake install&lt;/code&gt;. To release a new version, update the version number in &lt;code&gt;version.rb&lt;/code&gt;, and then run &lt;code&gt;bundle exec rake release&lt;/code&gt;, which will create a git tag for the version, push git commits and tags, and push the &lt;code&gt;.gem&lt;/code&gt; file to &lt;a href=&#34;https://rubygems.org&#34;&gt;rubygems.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports and pull requests are welcome on GitHub at &lt;a href=&#34;https://github.com/cmason/eztz&#34;&gt;https://github.com/cmason/eztz&lt;/a&gt;. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the &lt;a href=&#34;http://contributor-covenant.org&#34;&gt;Contributor Covenant&lt;/a&gt; code of conduct.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>shasselbrook/demo_app</title>
    <updated>2024-02-25T01:53:52Z</updated>
    <id>tag:github.com,2024-02-25:/shasselbrook/demo_app</id>
    <link href="https://github.com/shasselbrook/demo_app" rel="alternate"></link>
    <summary type="html">&lt;p&gt;demo app using tutorial&lt;/p&gt;&lt;hr&gt;&lt;p&gt;== Welcome to Rails&lt;/p&gt; &#xA;&lt;p&gt;Rails is a web-application framework that includes everything needed to create database-backed web applications according to the Model-View-Control pattern.&lt;/p&gt; &#xA;&lt;p&gt;This pattern splits the view (also called the presentation) into &#34;dumb&#34; templates that are primarily responsible for inserting pre-built data in between HTML tags. The model contains the &#34;smart&#34; domain objects (such as Account, Product, Person, Post) that holds all the business logic and knows how to persist themselves to a database. The controller handles the incoming requests (such as Save New Account, Update Product, Show Post) by manipulating the model and directing data to the view.&lt;/p&gt; &#xA;&lt;p&gt;In Rails, the model is handled by what&#39;s called an object-relational mapping layer entitled Active Record. This layer allows you to present the data from database rows as objects and embellish these data objects with business logic methods. You can read more about Active Record in link:files/vendor/rails/activerecord/README.html.&lt;/p&gt; &#xA;&lt;p&gt;The controller and view are handled by the Action Pack, which handles both layers by its two parts: Action View and Action Controller. These two layers are bundled in a single package due to their heavy interdependence. This is unlike the relationship between the Active Record and Action Pack that is much more separate. Each of these packages can be used independently outside of Rails. You can read more about Action Pack in link:files/vendor/rails/actionpack/README.html.&lt;/p&gt; &#xA;&lt;p&gt;== Getting Started&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;At the command prompt, create a new Rails application: &lt;tt&gt;rails new myapp&lt;/tt&gt; (where &lt;tt&gt;myapp&lt;/tt&gt; is the application name)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Change directory to &lt;tt&gt;myapp&lt;/tt&gt; and start the web server: &lt;tt&gt;cd myapp; rails server&lt;/tt&gt; (run with --help for options)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go to &lt;a href=&#34;http://localhost:3000/&#34;&gt;http://localhost:3000/&lt;/a&gt; and you&#39;ll see: &#34;Welcome aboard: You&#39;re riding Ruby on Rails!&#34;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Follow the guidelines to start developing your application. You can find the following resources handy:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Getting Started Guide: &lt;a href=&#34;http://guides.rubyonrails.org/getting_started.html&#34;&gt;http://guides.rubyonrails.org/getting_started.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ruby on Rails Tutorial Book: &lt;a href=&#34;http://www.railstutorial.org/&#34;&gt;http://www.railstutorial.org/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;== Debugging Rails&lt;/p&gt; &#xA;&lt;p&gt;Sometimes your application goes wrong. Fortunately there are a lot of tools that will help you debug it and get it back on the rails.&lt;/p&gt; &#xA;&lt;p&gt;First area to check is the application log files. Have &#34;tail -f&#34; commands running on the server.log and development.log. Rails will automatically display debugging and runtime information to these files. Debugging info will also be shown in the browser on requests from 127.0.0.1.&lt;/p&gt; &#xA;&lt;p&gt;You can also log your own messages directly into the log file from your code using the Ruby logger class from inside your controllers. Example:&lt;/p&gt; &#xA;&lt;p&gt;class WeblogController &amp;lt; ActionController::Base def destroy @weblog = Weblog.find(params[:id]) @weblog.destroy logger.info(&#34;#{Time.now} Destroyed Weblog ID ##{@weblog.id}!&#34;) end end&lt;/p&gt; &#xA;&lt;p&gt;The result will be a message in your log file along the lines of:&lt;/p&gt; &#xA;&lt;p&gt;Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1!&lt;/p&gt; &#xA;&lt;p&gt;More information on how to use the logger is at &lt;a href=&#34;http://www.ruby-doc.org/core/&#34;&gt;http://www.ruby-doc.org/core/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Also, Ruby documentation can be found at &lt;a href=&#34;http://www.ruby-lang.org/&#34;&gt;http://www.ruby-lang.org/&lt;/a&gt;. There are several books available online as well:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Programming Ruby: &lt;a href=&#34;http://www.ruby-doc.org/docs/ProgrammingRuby/&#34;&gt;http://www.ruby-doc.org/docs/ProgrammingRuby/&lt;/a&gt; (Pickaxe)&lt;/li&gt; &#xA; &lt;li&gt;Learn to Program: &lt;a href=&#34;http://pine.fm/LearnToProgram/&#34;&gt;http://pine.fm/LearnToProgram/&lt;/a&gt; (a beginners guide)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These two books will bring you up to speed on the Ruby language and also on programming in general.&lt;/p&gt; &#xA;&lt;p&gt;== Debugger&lt;/p&gt; &#xA;&lt;p&gt;Debugger support is available through the debugger command when you start your Mongrel or WEBrick server with --debugger. This means that you can break out of execution at any point in the code, investigate and change the model, and then, resume execution! You need to install ruby-debug to run the server in debugging mode. With gems, use &lt;tt&gt;sudo gem install ruby-debug&lt;/tt&gt;. Example:&lt;/p&gt; &#xA;&lt;p&gt;class WeblogController &amp;lt; ActionController::Base def index @posts = Post.all debugger end end&lt;/p&gt; &#xA;&lt;p&gt;So the controller will accept the action, run the first line, then present you with a IRB prompt in the server window. Here you can do things like:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;@posts.inspect =&amp;gt; &#34;[#&amp;lt;Post:0x14a6be8 @attributes={&#34;title&#34;=&amp;gt;nil, &#34;body&#34;=&amp;gt;nil, &#34;id&#34;=&amp;gt;&#34;1&#34;}&amp;gt;, #&amp;lt;Post:0x14a6620 @attributes={&#34;title&#34;=&amp;gt;&#34;Rails&#34;, &#34;body&#34;=&amp;gt;&#34;Only ten..&#34;, &#34;id&#34;=&amp;gt;&#34;2&#34;}&amp;gt;]&#34; @posts.first.title = &#34;hello from a debugger&#34; =&amp;gt; &#34;hello from a debugger&#34;&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;...and even better, you can examine how your runtime objects actually work:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;f = @posts.first =&amp;gt; #&amp;lt;Post:0x13630c4 @attributes={&#34;title&#34;=&amp;gt;nil, &#34;body&#34;=&amp;gt;nil, &#34;id&#34;=&amp;gt;&#34;1&#34;}&amp;gt; f. Display all 152 possibilities? (y or n)&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Finally, when you&#39;re ready to resume execution, you can enter &#34;cont&#34;.&lt;/p&gt; &#xA;&lt;p&gt;== Console&lt;/p&gt; &#xA;&lt;p&gt;The console is a Ruby shell, which allows you to interact with your application&#39;s domain model. Here you&#39;ll have all parts of the application configured, just like it is when the application is running. You can inspect domain models, change values, and save to the database. Starting the script without arguments will launch it in the development environment.&lt;/p&gt; &#xA;&lt;p&gt;To start the console, run &lt;tt&gt;rails console&lt;/tt&gt; from the application directory.&lt;/p&gt; &#xA;&lt;p&gt;Options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Passing the &lt;tt&gt;-s, --sandbox&lt;/tt&gt; argument will rollback any modifications made to the database.&lt;/li&gt; &#xA; &lt;li&gt;Passing an environment name as an argument will load the corresponding environment. Example: &lt;tt&gt;rails console production&lt;/tt&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To reload your controllers and models after launching the console run &lt;tt&gt;reload!&lt;/tt&gt;&lt;/p&gt; &#xA;&lt;p&gt;More information about irb can be found at: link:&lt;a href=&#34;http://www.rubycentral.org/pickaxe/irb.html&#34;&gt;http://www.rubycentral.org/pickaxe/irb.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;== dbconsole&lt;/p&gt; &#xA;&lt;p&gt;You can go to the command line of your database directly through &lt;tt&gt;rails dbconsole&lt;/tt&gt;. You would be connected to the database with the credentials defined in database.yml. Starting the script without arguments will connect you to the development database. Passing an argument will connect you to a different database, like &lt;tt&gt;rails dbconsole production&lt;/tt&gt;. Currently works for MySQL, PostgreSQL and SQLite 3.&lt;/p&gt; &#xA;&lt;p&gt;== Description of Contents&lt;/p&gt; &#xA;&lt;p&gt;The default directory structure of a generated Ruby on Rails application:&lt;/p&gt; &#xA;&lt;p&gt;|-- app | |-- assets | |-- images | |-- javascripts | &lt;code&gt;-- stylesheets | |-- controllers | |-- helpers | |-- mailers | |-- models | &lt;/code&gt;-- views | &lt;code&gt;-- layouts |-- config | |-- environments | |-- initializers | &lt;/code&gt;-- locales |-- db |-- doc |-- lib | &lt;code&gt;-- tasks |-- log |-- public |-- script |-- test | |-- fixtures | |-- functional | |-- integration | |-- performance | &lt;/code&gt;-- unit |-- tmp | |-- cache | |-- pids | |-- sessions | &lt;code&gt;-- sockets &lt;/code&gt;-- vendor |-- assets &lt;code&gt;-- stylesheets &lt;/code&gt;-- plugins&lt;/p&gt; &#xA;&lt;p&gt;app Holds all the code that&#39;s specific to this particular application.&lt;/p&gt; &#xA;&lt;p&gt;app/assets Contains subdirectories for images, stylesheets, and JavaScript files.&lt;/p&gt; &#xA;&lt;p&gt;app/controllers Holds controllers that should be named like weblogs_controller.rb for automated URL mapping. All controllers should descend from ApplicationController which itself descends from ActionController::Base.&lt;/p&gt; &#xA;&lt;p&gt;app/models Holds models that should be named like post.rb. Models descend from ActiveRecord::Base by default.&lt;/p&gt; &#xA;&lt;p&gt;app/views Holds the template files for the view that should be named like weblogs/index.html.erb for the WeblogsController#index action. All views use eRuby syntax by default.&lt;/p&gt; &#xA;&lt;p&gt;app/views/layouts Holds the template files for layouts to be used with views. This models the common header/footer method of wrapping views. In your views, define a layout using the &lt;tt&gt;layout :default&lt;/tt&gt; and create a file named default.html.erb. Inside default.html.erb, call &amp;lt;% yield %&amp;gt; to render the view using this layout.&lt;/p&gt; &#xA;&lt;p&gt;app/helpers Holds view helpers that should be named like weblogs_helper.rb. These are generated for you automatically when using generators for controllers. Helpers can be used to wrap functionality for your views into methods.&lt;/p&gt; &#xA;&lt;p&gt;config Configuration files for the Rails environment, the routing map, the database, and other dependencies.&lt;/p&gt; &#xA;&lt;p&gt;db Contains the database schema in schema.rb. db/migrate contains all the sequence of Migrations for your schema.&lt;/p&gt; &#xA;&lt;p&gt;doc This directory is where your application documentation will be stored when generated using &lt;tt&gt;rake doc:app&lt;/tt&gt;&lt;/p&gt; &#xA;&lt;p&gt;lib Application specific libraries. Basically, any kind of custom code that doesn&#39;t belong under controllers, models, or helpers. This directory is in the load path.&lt;/p&gt; &#xA;&lt;p&gt;public The directory available for the web server. Also contains the dispatchers and the default HTML files. This should be set as the DOCUMENT_ROOT of your web server.&lt;/p&gt; &#xA;&lt;p&gt;script Helper scripts for automation and generation.&lt;/p&gt; &#xA;&lt;p&gt;test Unit and functional tests along with fixtures. When using the rails generate command, template test files will be generated for you and placed in this directory.&lt;/p&gt; &#xA;&lt;p&gt;vendor External libraries that the application depends on. Also includes the plugins subdirectory. If the app has frozen rails, those gems also go here, under vendor/rails/. This directory is in the load path.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Shopify/ruby-lsp-rails</title>
    <updated>2024-02-25T01:53:52Z</updated>
    <id>tag:github.com,2024-02-25:/Shopify/ruby-lsp-rails</id>
    <link href="https://github.com/Shopify/ruby-lsp-rails" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Ruby LSP extension for Rails&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ruby LSP Rails&lt;/h1&gt; &#xA;&lt;p&gt;Ruby LSP Rails is a &lt;a href=&#34;https://github.com/Shopify/ruby-lsp&#34;&gt;Ruby LSP&lt;/a&gt; addon for extra Rails editor features, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Displaying an ActiveRecord model&#39;s database columns and types when hovering over it&lt;/li&gt; &#xA; &lt;li&gt;Running tests and debugging tests through the terminal or the editor&#39;s UI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install, add the following line to your application&#39;s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Gemfile&#xA;group :development do&#xA;  gem &#34;ruby-lsp-rails&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Hover to reveal ActiveRecord schema&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start your Rails server&lt;/li&gt; &#xA; &lt;li&gt;Hover over an ActiveRecord model to see its details&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://shopify.github.io/ruby-lsp-rails&#34;&gt;documentation&lt;/a&gt; for more in-depth details about the &lt;a href=&#34;https://shopify.github.io/ruby-lsp-rails/RubyLsp/Rails.html&#34;&gt;supported features&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Running Tests&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open a test which inherits from &lt;code&gt;ActiveSupport::TestCase&lt;/code&gt; or one of its descendants, such as &lt;code&gt;ActionDispatch::IntegrationTest&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Click on the &#34;Run&#34;, &#34;Run in Terminal&#34; or &#34;Debug&#34; code lens which appears above the test class, or an individual test.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] When using the Test Explorer view, if your code contains a statement to pause execution (e.g. &lt;code&gt;debugger&lt;/code&gt;) it will cause the test runner to hang.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;How It Works&lt;/h2&gt; &#xA;&lt;p&gt;When Ruby LSP Rails starts, it spawns a &lt;code&gt;rails runner&lt;/code&gt; instance which runs &lt;a href=&#34;https://github.com/Shopify/ruby-lsp-rails/raw/main/lib/ruby_lsp/ruby_lsp_rails/server.rb&#34;&gt;&lt;code&gt;server.rb&lt;/code&gt;&lt;/a&gt;. The addon communicates with this process over a pipe (i.e. &lt;code&gt;stdin&lt;/code&gt; and &lt;code&gt;stdout&lt;/code&gt;) to fetch runtime information about the application.&lt;/p&gt; &#xA;&lt;p&gt;When extension is stopped (e.g. by quitting the editor), the server instance is shut down.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Prior to v0.3, &lt;code&gt;ruby-lsp-rails&lt;/code&gt; used a different approach which involved mounting a Rack application within the Rails app. That approach was brittle and susceptible to the application&#39;s configuration, such as routing and middleware.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports and pull requests are welcome on GitHub at &lt;a href=&#34;https://github.com/Shopify/ruby-lsp-rails&#34;&gt;https://github.com/Shopify/ruby-lsp-rails&lt;/a&gt;. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the &lt;a href=&#34;https://github.com/Shopify/ruby-lsp-rails/raw/main/CODE_OF_CONDUCT.md&#34;&gt;Contributor Covenant&lt;/a&gt; code of conduct.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The gem is available as open source under the terms of the &lt;a href=&#34;https://github.com/Shopify/ruby-lsp-rails/raw/main/LICENSE.txt&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>