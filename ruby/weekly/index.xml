<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Ruby Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-21T02:07:06Z</updated>
  <subtitle>Weekly Trending of Ruby in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>spree/spree</title>
    <updated>2022-08-21T02:07:06Z</updated>
    <id>tag:github.com,2022-08-21:/spree/spree</id>
    <link href="https://github.com/spree/spree" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open Source multi-language/multi-currency/multi-store eCommerce platform&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://getvendo.com?utm_source=spree_github&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/spree/spree-dev-docs/54abf615c5280eda8f2308de96d6290f72c1fb1b/spree_vendo_user_doc.png&#34; alt=&#34;Spree Commerce - a headless open-source ecommerce platform for multi-store, marketplace, or B2B global brands&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://spreecommerce.org&#34;&gt;Spree Commerce&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/rb/spree&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/spree.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/spree/spree/test_coverage&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/8277fc2bb0b1f777084f/test_coverage&#34; alt=&#34;Test Coverage&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Spree&lt;/strong&gt; is a headless open source e-commerce platform for global brands.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spreecommerce.org/stories/&#34;&gt;Success Stories&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spreecommerce.org/integrations/&#34;&gt;Integrations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/spree/spree/milestones?direction=asc&amp;amp;sort=due_date&amp;amp;state=open&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://slack.spreecommerce.org/&#34;&gt;Join our Slack community&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://spreecommerce.org/use-cases/headless-ecommerce-api/&#34;&gt;Headless Commerce&lt;/a&gt;&lt;/strong&gt; - build mobile apps or custom storefronts in any technology, &lt;a href=&#34;https://github.com/spree/spree-storefront-api-v2-js-sdk&#34;&gt;JS/TS SDK available&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://spreecommerce.org/use-cases/spree-pwa-progressive-web-application/&#34;&gt;PWA&lt;/a&gt;&lt;/strong&gt; - offline shopping experiences like native mobile apps&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://spreecommerce.org/use-cases/international-sales-demo/&#34;&gt;Global Commerce&lt;/a&gt;&lt;/strong&gt; - multi currency and multi language support out of the box, different shipping methods / costs for different regions, advanced tax calculation&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-Store&lt;/strong&gt; - host multiple brands / stores on one Spree instance with different branding, configuration, payment methods, shipping options, product catalogs etc&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://spreecommerce.org/use-cases/multi-vendor-marketplace-demo/&#34;&gt;Multi-vendor marketplace&lt;/a&gt;&lt;/strong&gt; - run your own marketplace with multiple suppliers with dedicated Supplier Dashboard&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Responsive Admin Panel&lt;/strong&gt; - manage and curate products, users, orders, returns, shipments &amp;amp; more&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Orders&lt;/strong&gt; - robust system for orders, shipments, returns and refunds&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Carts&lt;/strong&gt; - comprehensive and advanced discounts system&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Payments&lt;/strong&gt; - over 30 payment provider integration out of the box plus API to integrate any other gateway&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Run everywhere&lt;/strong&gt; - cloud, VPS, Docker, Kubernetes&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Battle Tested&lt;/strong&gt; - used by thousands of merchants around the globe in all categories since 2007!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fully customizable&lt;/strong&gt; - pick and choose parts you want to use and customize everything else (storefront, order processing, API, etc) to create unique solutions that your business requires&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;More features available via extensions&lt;/strong&gt; - dozens of extensions built by community, ready for use for free!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsored by&lt;/h2&gt; &#xA;&lt;a href=&#34;https://getvendo.com?utm_source=spree_github&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/spree/spree-dev-docs/master/.gitbook/assets/spree_vendo_user_doc_2.png&#34; a&gt; &lt;/a&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://getvendo.com?utm_source=spree_github&#34;&gt;Vendo&lt;/a&gt; is a great fit for marketplaces of all sizes - either with own fulfillment and multiple warehouses or in a dropshipping model. Vendo &lt;strong&gt;automates everything&lt;/strong&gt; from &lt;strong&gt;vendor onboarding&lt;/strong&gt;, accepting buyer &lt;strong&gt;payments in over 135 currencies&lt;/strong&gt;, to supplier &lt;strong&gt;payouts in 50 countries&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Vendo ensures excellent buyer experience with smooth product discovery and search, a multitude of payment methods and optimal shipping cost calculation. Vendo keeps suppliers happy with easy onboarding, automated products sync using their preferred method and easy payouts.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://app.getvendo.com/users/new?typeform-source=spree_github&#34;&gt;Start your 14-day free trial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev-docs.spreecommerce.org/getting-started/installation&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev-docs.spreecommerce.org/&#34;&gt;Developer Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://api.spreecommerce.org/&#34;&gt;API Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/spree/spree-storefront-api-v2-js-sdk&#34;&gt;JavaScript / TypeScript SDK&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Spree is an open source project and we love contributions in any form - pull requests, issues, feature ideas!&lt;/p&gt; &#xA;&lt;p&gt;Please review the &lt;a href=&#34;https://dev-docs.spreecommerce.org/contributing/index&#34;&gt;Contributing Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Spree is released under the &lt;a href=&#34;https://github.com/spree/spree/raw/main/license.md&#34;&gt;New BSD License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>paper-trail-gem/paper_trail</title>
    <updated>2022-08-21T02:07:06Z</updated>
    <id>tag:github.com,2022-08-21:/paper-trail-gem/paper_trail</id>
    <link href="https://github.com/paper-trail-gem/paper_trail" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Track changes to your rails models&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PaperTrail&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/paper-trail-gem/paper_trail&#34;&gt;&lt;img src=&#34;https://api.travis-ci.org/paper-trail-gem/paper_trail.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rubygems.org/gems/paper_trail&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/paper_trail.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dependabot.com/compatibility-score.html?dependency-name=paper_trail&amp;amp;package-manager=bundler&amp;amp;version-scheme=semver&#34;&gt;&lt;img src=&#34;https://api.dependabot.com/badges/compatibility_score?dependency-name=paper_trail&amp;amp;package-manager=bundler&amp;amp;version-scheme=semver&#34; alt=&#34;SemVer&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Track changes to your models, for auditing or versioning. See how a model looked at any stage in its lifecycle, revert it to any version, or restore it after it has been destroyed.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;This is the &lt;em&gt;user guide&lt;/em&gt;. See also, the &lt;a href=&#34;https://www.rubydoc.info/gems/paper_trail&#34;&gt;API reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Choose version: &lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail/raw/master/README.md&#34;&gt;Unreleased&lt;/a&gt;, &lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail/raw/v13.0.0/README.md&#34;&gt;13.0&lt;/a&gt;, &lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail/raw/v12.3.0/README.md&#34;&gt;12.3&lt;/a&gt;, &lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail/raw/v11.1.0/README.md&#34;&gt;11.1&lt;/a&gt;, &lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail/raw/v10.3.1/README.md&#34;&gt;10.3&lt;/a&gt;, &lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail/raw/v9.2.0/README.md&#34;&gt;9.2&lt;/a&gt;, &lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail/raw/v8.1.2/README.md&#34;&gt;8.1&lt;/a&gt;, &lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail/raw/v7.1.3/README.md&#34;&gt;7.1&lt;/a&gt;, &lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail/raw/v6.0.2/README.md&#34;&gt;6.0&lt;/a&gt;, &lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail/raw/v5.2.3/README.md&#34;&gt;5.2&lt;/a&gt;, &lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail/raw/v4.2.0/README.md&#34;&gt;4.2&lt;/a&gt;, &lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail/raw/v3.0.9/README.md&#34;&gt;3.0&lt;/a&gt;, &lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail/raw/v2.7.2/README.md&#34;&gt;2.7&lt;/a&gt;, &lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail/raw/v1.6.5/README.md&#34;&gt;1.6&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;!-- toc --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#1-introduction&#34;&gt;1. Introduction&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#1a-compatibility&#34;&gt;1.a. Compatibility&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#1b-installation&#34;&gt;1.b. Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#1c-basic-usage&#34;&gt;1.c. Basic Usage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#1d-api-summary&#34;&gt;1.d. API Summary&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#1e-configuration&#34;&gt;1.e. Configuration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#2-limiting-what-is-versioned-and-when&#34;&gt;2. Limiting What is Versioned, and When&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#2a-choosing-lifecycle-events-to-monitor&#34;&gt;2.a. Choosing Lifecycle Events To Monitor&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#2b-choosing-when-to-save-new-versions&#34;&gt;2.b. Choosing When To Save New Versions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#2c-choosing-attributes-to-monitor&#34;&gt;2.c. Choosing Attributes To Monitor&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#2d-turning-papertrail-off&#34;&gt;2.d. Turning PaperTrail Off&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#2e-limiting-the-number-of-versions-created&#34;&gt;2.e. Limiting the Number of Versions Created&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#3-working-with-versions&#34;&gt;3. Working With Versions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#3a-reverting-and-undeleting-a-model&#34;&gt;3.a. Reverting And Undeleting A Model&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#3b-navigating-versions&#34;&gt;3.b. Navigating Versions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#3c-diffing-versions&#34;&gt;3.c. Diffing Versions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#3d-deleting-old-versions&#34;&gt;3.d. Deleting Old Versions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#3e-queries&#34;&gt;3.e. Queries&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#3f-defunct-item_ids&#34;&gt;3.f. Defunct &lt;code&gt;item_id&lt;/code&gt;s&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#4-saving-more-information-about-versions&#34;&gt;4. Saving More Information About Versions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#4a-finding-out-who-was-responsible-for-a-change&#34;&gt;4.a. Finding Out Who Was Responsible For A Change&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#4b-associations&#34;&gt;4.b. Associations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#4c-storing-metadata&#34;&gt;4.c. Storing Metadata&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#5-activerecord&#34;&gt;5. ActiveRecord&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#5a-single-table-inheritance-sti&#34;&gt;5.a. Single Table Inheritance (STI)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#5b-configuring-the-versions-association&#34;&gt;5.b. Configuring the &lt;code&gt;versions&lt;/code&gt; Association&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#5c-generators&#34;&gt;5.c. Generators&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#5d-protected-attributes&#34;&gt;5.d. Protected Attributes&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#6-extensibility&#34;&gt;6. Extensibility&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#6a-custom-version-classes&#34;&gt;6.a. Custom Version Classes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#6b-custom-serializer&#34;&gt;6.b. Custom Serializer&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#6c-custom-object-changes&#34;&gt;6.c. Custom Object Changes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#6d-excluding-the-object-column&#34;&gt;6.d. Excluding the Object Column&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#7-testing&#34;&gt;7. Testing&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#7a-minitest&#34;&gt;7.a. Minitest&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#7b-rspec&#34;&gt;7.b. RSpec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#7c-cucumber&#34;&gt;7.c. Cucumber&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#7d-spork&#34;&gt;7.d. Spork&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#7e-zeus-or-spring&#34;&gt;7.e. Zeus or Spring&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#8-papertrail-plugins&#34;&gt;8. PaperTrail Plugins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#9-integration-with-other-libraries&#34;&gt;9. Integration with Other Libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#10-related-libraries-and-ports&#34;&gt;10. Related Libraries and Ports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#articles&#34;&gt;Articles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#problems&#34;&gt;Problems&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#inspirations&#34;&gt;Inspirations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#intellectual-property&#34;&gt;Intellectual Property&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- tocstop --&gt; &#xA;&lt;h2&gt;1. Introduction&lt;/h2&gt; &#xA;&lt;h3&gt;1.a. Compatibility&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;paper_trail&lt;/th&gt; &#xA;   &lt;th&gt;branch&lt;/th&gt; &#xA;   &lt;th&gt;ruby&lt;/th&gt; &#xA;   &lt;th&gt;activerecord&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;unreleased&lt;/td&gt; &#xA;   &lt;td&gt;master&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 2.6.0&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 5.2, &amp;lt; 7.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;13&lt;/td&gt; &#xA;   &lt;td&gt;13-stable&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 2.6.0&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 5.2, &amp;lt; 7.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td&gt;12-stable&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 2.6.0&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 5.2, &amp;lt; 7.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td&gt;11-stable&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 2.4.0&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 5.2, &amp;lt; 6.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;10-stable&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 2.3.0&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 4.2, &amp;lt; 6.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9&lt;/td&gt; &#xA;   &lt;td&gt;9-stable&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 2.3.0&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 4.2, &amp;lt; 5.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;8-stable&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 2.2.0&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 4.2, &amp;lt; 5.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7&lt;/td&gt; &#xA;   &lt;td&gt;7-stable&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 2.1.0&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 4.0, &amp;lt; 5.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;6-stable&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 1.9.3&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 4.0, &amp;lt; 5.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;5-stable&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 1.9.3&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 3.0, &amp;lt; 5.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;4-stable&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 1.8.7&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 3.0, &amp;lt; 5.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;3.0-stable&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 1.8.7&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 3.0, &amp;lt; 5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;2.7-stable&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 1.8.7&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 3.0, &amp;lt; 4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;rails2&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 1.8.7&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 2.3, &amp;lt; 3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Experts: to install incompatible versions of activerecord, see &lt;code&gt;paper_trail/compatibility.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;1.b. Installation&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add PaperTrail to your &lt;code&gt;Gemfile&lt;/code&gt; and run &lt;a href=&#34;https://bundler.io/v2.3/man/bundle-install.1.html&#34;&gt;&lt;code&gt;bundle&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;code&gt;gem &#39;paper_trail&#39;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add a &lt;code&gt;versions&lt;/code&gt; table to your database:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;bundle exec rails generate paper_trail:install [--with-changes]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If tables in your project use &lt;code&gt;uuid&lt;/code&gt; instead of &lt;code&gt;integers&lt;/code&gt; for &lt;code&gt;id&lt;/code&gt;, then use:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;bundle exec rails generate paper_trail:install [--uuid]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#5c-generators&#34;&gt;section 5.c. Generators&lt;/a&gt; for details.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;bundle exec rake db:migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;code&gt;has_paper_trail&lt;/code&gt; to the models you want to track.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Widget &amp;lt; ActiveRecord::Base&#xA;  has_paper_trail&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If your controllers have a &lt;code&gt;current_user&lt;/code&gt; method, you can easily &lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#4a-finding-out-who-was-responsible-for-a-change&#34;&gt;track who is responsible for changes&lt;/a&gt; by adding a controller callback.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ApplicationController&#xA;  before_action :set_paper_trail_whodunnit&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;1.c. Basic Usage&lt;/h3&gt; &#xA;&lt;p&gt;Your models now have a &lt;code&gt;versions&lt;/code&gt; method which returns the &#34;paper trail&#34; of changes to your model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;widget = Widget.find 42&#xA;widget.versions&#xA;# [&amp;lt;PaperTrail::Version&amp;gt;, &amp;lt;PaperTrail::Version&amp;gt;, ...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you have a version, you can find out what happened:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;v = widget.versions.last&#xA;v.event # &#39;update&#39;, &#39;create&#39;, &#39;destroy&#39;. See also: &#34;The versions.event Column&#34;&#xA;v.created_at&#xA;v.whodunnit # ID of `current_user`. Requires `set_paper_trail_whodunnit` callback.&#xA;widget = v.reify # The widget as it was before the update (nil for a create event)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;PaperTrail stores the pre-change version of the model, unlike some other auditing/versioning plugins, so you can retrieve the original version. This is useful when you start keeping a paper trail for models that already have records in the database.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;widget = Widget.find 153&#xA;widget.name                                 # &#39;Doobly&#39;&#xA;&#xA;# Add has_paper_trail to Widget model.&#xA;&#xA;widget.versions                             # []&#xA;widget.update name: &#39;Wotsit&#39;&#xA;widget.versions.last.reify.name             # &#39;Doobly&#39;&#xA;widget.versions.last.event                  # &#39;update&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This also means that PaperTrail does not waste space storing a version of the object as it currently stands. The &lt;code&gt;versions&lt;/code&gt; method gives you previous versions; to get the current one just call a finder on your &lt;code&gt;Widget&lt;/code&gt; model as usual.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a helpful table showing what PaperTrail stores:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;em&gt;Event&lt;/em&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;em&gt;create&lt;/em&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;em&gt;update&lt;/em&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;em&gt;destroy&lt;/em&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;Model Before&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;nil&lt;/td&gt; &#xA;   &lt;td&gt;widget&lt;/td&gt; &#xA;   &lt;td&gt;widget&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;Model After&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;widget&lt;/td&gt; &#xA;   &lt;td&gt;widget&lt;/td&gt; &#xA;   &lt;td&gt;nil&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;PaperTrail stores the values in the Model Before row. Most other auditing/versioning plugins store the After row.&lt;/p&gt; &#xA;&lt;h3&gt;1.d. API Summary&lt;/h3&gt; &#xA;&lt;p&gt;An introductory sample of common features.&lt;/p&gt; &#xA;&lt;p&gt;When you declare &lt;code&gt;has_paper_trail&lt;/code&gt; in your model, you get these methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Widget &amp;lt; ActiveRecord::Base&#xA;  has_paper_trail&#xA;end&#xA;&#xA;# Returns this widget&#39;s versions.  You can customise the name of the&#xA;# association, but overriding this method is not supported.&#xA;widget.versions&#xA;&#xA;# Return the version this widget was reified from, or nil if it is live.&#xA;# You can customise the name of the method.&#xA;widget.version&#xA;&#xA;# Returns true if this widget is the current, live one; or false if it is from&#xA;# a previous version.&#xA;widget.paper_trail.live?&#xA;&#xA;# Returns who put the widget into its current state.&#xA;widget.paper_trail.originator&#xA;&#xA;# Returns the widget (not a version) as it looked at the given timestamp.&#xA;widget.paper_trail.version_at(timestamp)&#xA;&#xA;# Returns the widget (not a version) as it was most recently.&#xA;widget.paper_trail.previous_version&#xA;&#xA;# Returns the widget (not a version) as it became next.&#xA;widget.paper_trail.next_version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And a &lt;code&gt;PaperTrail::Version&lt;/code&gt; instance (which is just an ordinary ActiveRecord instance, with all the usual methods) has methods such as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Returns the item restored from this version.&#xA;version.reify(options = {})&#xA;&#xA;# Return a new item from this version&#xA;version.reify(dup: true)&#xA;&#xA;# Returns who put the item into the state stored in this version.&#xA;version.paper_trail_originator&#xA;&#xA;# Returns who changed the item from the state it had in this version.&#xA;version.terminator&#xA;version.whodunnit&#xA;version.version_author&#xA;&#xA;# Returns the next version.&#xA;version.next&#xA;&#xA;# Returns the previous version.&#xA;version.previous&#xA;&#xA;# Returns the index of this version in all the versions.&#xA;version.index&#xA;&#xA;# Returns the event that caused this version (create|update|destroy).&#xA;version.event&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is just a sample of common features. Keep reading for more.&lt;/p&gt; &#xA;&lt;h3&gt;1.e. Configuration&lt;/h3&gt; &#xA;&lt;p&gt;Many aspects of PaperTrail are configurable for individual models; typically this is achieved by passing options to the &lt;code&gt;has_paper_trail&lt;/code&gt; method within a given model.&lt;/p&gt; &#xA;&lt;p&gt;Some aspects of PaperTrail are configured globally for all models. These settings are assigned directly on the &lt;code&gt;PaperTrail.config&lt;/code&gt; object. A common place to put these settings is in a Rails initializer file such as &lt;code&gt;config/initializers/paper_trail.rb&lt;/code&gt; or in an environment-specific configuration file such as &lt;code&gt;config/environments/test.rb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;1.e.1 Global&lt;/h4&gt; &#xA;&lt;p&gt;Global configuration options affect all threads.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;association_reify_error_behaviour&lt;/li&gt; &#xA; &lt;li&gt;enabled&lt;/li&gt; &#xA; &lt;li&gt;has_paper_trail_defaults&lt;/li&gt; &#xA; &lt;li&gt;object_changes_adapter&lt;/li&gt; &#xA; &lt;li&gt;serializer&lt;/li&gt; &#xA; &lt;li&gt;version_limit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Syntax example: (options described in detail later)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/paper_trail.rb&#xA;PaperTrail.config.enabled = true&#xA;PaperTrail.config.has_paper_trail_defaults = {&#xA;  on: %i[create update destroy]&#xA;}&#xA;PaperTrail.config.version_limit = 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These options are intended to be set only once, during app initialization (eg. in &lt;code&gt;config/initializers&lt;/code&gt;). It is unsafe to change them while the app is running. In contrast, &lt;code&gt;PaperTrail.request&lt;/code&gt; has various options that only apply to a single HTTP request and thus are safe to use while the app is running.&lt;/p&gt; &#xA;&lt;h2&gt;2. Limiting What is Versioned, and When&lt;/h2&gt; &#xA;&lt;h3&gt;2.a. Choosing Lifecycle Events To Monitor&lt;/h3&gt; &#xA;&lt;p&gt;You can choose which events to track with the &lt;code&gt;on&lt;/code&gt; option. For example, if you only want to track &lt;code&gt;update&lt;/code&gt; events:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Article &amp;lt; ActiveRecord::Base&#xA;  has_paper_trail on: [:update]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;has_paper_trail&lt;/code&gt; installs &lt;a href=&#34;http://guides.rubyonrails.org/active_record_callbacks.html&#34;&gt;callbacks&lt;/a&gt; for the specified lifecycle events.&lt;/p&gt; &#xA;&lt;p&gt;There are four potential callbacks, and the default is to install all four, ie. &lt;code&gt;on: [:create, :destroy, :touch, :update]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;The &lt;code&gt;versions.event&lt;/code&gt; Column&lt;/h4&gt; &#xA;&lt;p&gt;Your &lt;code&gt;versions&lt;/code&gt; table has an &lt;code&gt;event&lt;/code&gt; column with three possible values:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;em&gt;event&lt;/em&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;em&gt;callback&lt;/em&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;create&lt;/td&gt; &#xA;   &lt;td&gt;create&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;destroy&lt;/td&gt; &#xA;   &lt;td&gt;destroy&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;update&lt;/td&gt; &#xA;   &lt;td&gt;touch, update&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You may also have the &lt;code&gt;PaperTrail::Version&lt;/code&gt; model save a custom string in its &lt;code&gt;event&lt;/code&gt; field instead of the typical &lt;code&gt;create&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, &lt;code&gt;destroy&lt;/code&gt;. PaperTrail adds an &lt;code&gt;attr_accessor&lt;/code&gt; to your model named &lt;code&gt;paper_trail_event&lt;/code&gt;, and will insert it, if present, in the &lt;code&gt;event&lt;/code&gt; column.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;a = Article.create&#xA;a.versions.size                           # 1&#xA;a.versions.last.event                     # &#39;create&#39;&#xA;a.paper_trail_event = &#39;update title&#39;&#xA;a.update title: &#39;My Title&#39;&#xA;a.versions.size                           # 2&#xA;a.versions.last.event                     # &#39;update title&#39;&#xA;a.paper_trail_event = nil&#xA;a.update title: &#39;Alternate&#39;&#xA;a.versions.size                           # 3&#xA;a.versions.last.event                     # &#39;update&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Controlling the Order of AR Callbacks&lt;/h4&gt; &#xA;&lt;p&gt;If there are other callbacks in your model, their order relative to those installed by &lt;code&gt;has_paper_trail&lt;/code&gt; may matter. If you need to control their order, use the &lt;code&gt;paper_trail_on_*&lt;/code&gt; methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Article &amp;lt; ActiveRecord::Base&#xA;  # Include PaperTrail, but do not install any callbacks. Passing the&#xA;  # empty array to `:on` omits callbacks.&#xA;  has_paper_trail on: []&#xA;&#xA;  # Add callbacks in the order you need.&#xA;  paper_trail.on_destroy    # add destroy callback&#xA;  paper_trail.on_update     # etc.&#xA;  paper_trail.on_create&#xA;  paper_trail.on_touch&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;paper_trail.on_destroy&lt;/code&gt; method can be further configured to happen &lt;code&gt;:before&lt;/code&gt; or &lt;code&gt;:after&lt;/code&gt; the destroy event. Until PaperTrail 4, the default was &lt;code&gt;:after&lt;/code&gt;. Starting with PaperTrail 5, the default is &lt;code&gt;:before&lt;/code&gt;, to support ActiveRecord 5. (see &lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail/pull/683&#34;&gt;https://github.com/paper-trail-gem/paper_trail/pull/683&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;2.b. Choosing When To Save New Versions&lt;/h3&gt; &#xA;&lt;p&gt;You can choose the conditions when to add new versions with the &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;unless&lt;/code&gt; options. For example, to save versions only for US non-draft translations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Translation &amp;lt; ActiveRecord::Base&#xA;  has_paper_trail if:     Proc.new { |t| t.language_code == &#39;US&#39; },&#xA;                  unless: Proc.new { |t| t.type == &#39;DRAFT&#39;       }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Choosing Based on Changed Attributes&lt;/h4&gt; &#xA;&lt;p&gt;Starting with PaperTrail 4.0, versions are saved during an after-callback. If you decide whether to save a new version based on changed attributes, use attribute_name_was instead of attribute_name.&lt;/p&gt; &#xA;&lt;h4&gt;Saving a New Version Manually&lt;/h4&gt; &#xA;&lt;p&gt;You may want to save a new version regardless of options like &lt;code&gt;:on&lt;/code&gt;, &lt;code&gt;:if&lt;/code&gt;, or &lt;code&gt;:unless&lt;/code&gt;. Or, in rare situations, you may want to save a new version even if the record has not changed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;my_model.paper_trail.save_with_version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2.c. Choosing Attributes To Monitor&lt;/h3&gt; &#xA;&lt;h4&gt;Ignore&lt;/h4&gt; &#xA;&lt;p&gt;If you don&#39;t want a version created when only a certain attribute changes, you can &lt;code&gt;ignore&lt;/code&gt; that attribute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Article &amp;lt; ActiveRecord::Base&#xA;  has_paper_trail ignore: [:title, :rating]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Changes to just the &lt;code&gt;title&lt;/code&gt; or &lt;code&gt;rating&lt;/code&gt; will not create a version record. Changes to other attributes will create a version record.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;a = Article.create&#xA;a.versions.length                         # 1&#xA;a.update title: &#39;My Title&#39;, rating: 3&#xA;a.versions.length                         # 1&#xA;a.update title: &#39;Greeting&#39;, content: &#39;Hello&#39;&#xA;a.versions.length                         # 2&#xA;a.paper_trail.previous_version.title      # &#39;My Title&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: ignored fields will be stored in the version records. If you want to keep a field out of the versions table, use &lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#skip&#34;&gt;&lt;code&gt;:skip&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;:ignore&lt;/code&gt;; skipped fields are also implicitly ignored.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;:ignore&lt;/code&gt; option can also accept &lt;code&gt;Hash&lt;/code&gt; arguments that we are considering deprecating.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Article &amp;lt; ActiveRecord::Base&#xA;  has_paper_trail ignore: [:title, { color: proc { |obj| obj.color == &#34;Yellow&#34; } }]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Only&lt;/h4&gt; &#xA;&lt;p&gt;Or, you can specify a list of the &lt;code&gt;only&lt;/code&gt; attributes you care about:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Article &amp;lt; ActiveRecord::Base&#xA;  has_paper_trail only: [:title]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Only changes to the &lt;code&gt;title&lt;/code&gt; will create a version record.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;a = Article.create&#xA;a.versions.length                         # 1&#xA;a.update title: &#39;My Title&#39;&#xA;a.versions.length                         # 2&#xA;a.update content: &#39;Hello&#39;&#xA;a.versions.length                         # 2&#xA;a.paper_trail.previous_version.content    # nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;:only&lt;/code&gt; option can also accept &lt;code&gt;Hash&lt;/code&gt; arguments that we are considering deprecating.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Article &amp;lt; ActiveRecord::Base&#xA;  has_paper_trail only: [{ title: Proc.new { |obj| !obj.title.blank? } }]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the &lt;code&gt;title&lt;/code&gt; is not blank, then only changes to the &lt;code&gt;title&lt;/code&gt; will create a version record.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;a = Article.create&#xA;a.versions.length                         # 1&#xA;a.update content: &#39;Hello&#39;&#xA;a.versions.length                         # 2&#xA;a.update title: &#39;Title One&#39;&#xA;a.versions.length                         # 3&#xA;a.update content: &#39;Hai&#39;&#xA;a.versions.length                         # 3&#xA;a.paper_trail.previous_version.content    # &#34;Hello&#34;&#xA;a.update title: &#39;Title Two&#39;&#xA;a.versions.length                         # 4&#xA;a.paper_trail.previous_version.content    # &#34;Hai&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configuring both &lt;code&gt;:ignore&lt;/code&gt; and &lt;code&gt;:only&lt;/code&gt; is not recommended, but it should work as expected. Passing both &lt;code&gt;:ignore&lt;/code&gt; and &lt;code&gt;:only&lt;/code&gt; options will result in the article being saved if a changed attribute is included in &lt;code&gt;:only&lt;/code&gt; but not in &lt;code&gt;:ignore&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Skip&lt;/h4&gt; &#xA;&lt;p&gt;If you never want a field&#39;s values in the versions table, you can &lt;code&gt;:skip&lt;/code&gt; the attribute. As with &lt;code&gt;:ignore&lt;/code&gt;, updates to these attributes will not create a version record. In addition, if a version record is created for some other reason, these attributes will not be persisted.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Author &amp;lt; ActiveRecord::Base&#xA;  has_paper_trail skip: [:social_security_number]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Author&#39;s social security numbers will never appear in the versions log, and if an author updates only their social security number, it won&#39;t create a version record.&lt;/p&gt; &#xA;&lt;h4&gt;Comparing &lt;code&gt;:ignore&lt;/code&gt;, &lt;code&gt;:only&lt;/code&gt;, and &lt;code&gt;:skip&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:only&lt;/code&gt; is basically the same as &lt;code&gt;:ignore&lt;/code&gt;, but its inverse.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:ignore&lt;/code&gt; controls whether paper_trail will create a version record or not.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:skip&lt;/code&gt; controls whether paper_trail will save that field with the version record.&lt;/li&gt; &#xA; &lt;li&gt;Skipped fields are also implicitly ignored. paper_trail does this internally.&lt;/li&gt; &#xA; &lt;li&gt;Ignored fields are not implicitly skipped.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ignore a field if you don&#39;t want a version record created when it&#39;s the only field to change.&lt;/li&gt; &#xA; &lt;li&gt;Skip a field if you don&#39;t want it to be saved with any version records.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2.d. Turning PaperTrail Off&lt;/h3&gt; &#xA;&lt;p&gt;PaperTrail is on by default, but sometimes you don&#39;t want to record versions.&lt;/p&gt; &#xA;&lt;h4&gt;Per Process&lt;/h4&gt; &#xA;&lt;p&gt;Turn PaperTrail off for &lt;strong&gt;all threads&lt;/strong&gt; in a &lt;code&gt;ruby&lt;/code&gt; process.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;PaperTrail.enabled = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Do not use this in production&lt;/strong&gt; unless you have a good understanding of threads vs. processes.&lt;/p&gt; &#xA;&lt;p&gt;A legitimate use case is to speed up tests. See &lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#7-testing&#34;&gt;Testing&lt;/a&gt; below.&lt;/p&gt; &#xA;&lt;h4&gt;Per HTTP Request&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;PaperTrail.request(enabled: false) do&#xA;  # no versions created&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;PaperTrail.request.enabled = false&#xA;# no versions created&#xA;PaperTrail.request.enabled = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Per Class&lt;/h4&gt; &#xA;&lt;p&gt;In the rare case that you need to disable versioning for one model while keeping versioning enabled for other models, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;PaperTrail.request.disable_model(Banana)&#xA;# changes to Banana model do not create versions,&#xA;# but eg. changes to Kiwi model do.&#xA;PaperTrail.request.enable_model(Banana)&#xA;PaperTrail.request.enabled_for_model?(Banana) # =&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This setting, as with all &lt;code&gt;PaperTrail.request&lt;/code&gt; settings, affects only the current request, not all threads.&lt;/p&gt; &#xA;&lt;p&gt;For this rare use case, there is no convenient way to pass a block.&lt;/p&gt; &#xA;&lt;h5&gt;In a Rails Controller Callback (Not Recommended)&lt;/h5&gt; &#xA;&lt;p&gt;PaperTrail installs a callback in your rails controllers. The installed callback will call &lt;code&gt;paper_trail_enabled_for_controller&lt;/code&gt;, which you can override.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ApplicationController &amp;lt; ActionController::Base&#xA;  def paper_trail_enabled_for_controller&#xA;    # Don&#39;t omit `super` without a good reason.&#xA;    super &amp;amp;&amp;amp; request.user_agent != &#39;Disable User-Agent&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Because you are unable to control the order of callback execution, this technique is not recommended, but is preserved for backwards compatibility.&lt;/p&gt; &#xA;&lt;p&gt;It would be better to install your own callback and use &lt;code&gt;PaperTrail.request.enabled=&lt;/code&gt; as you see fit.&lt;/p&gt; &#xA;&lt;h4&gt;Per Method (Removed)&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;widget.paper_trail.without_versioning&lt;/code&gt; method was removed in v10, without an exact replacement. To disable versioning, use the &lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#per-class&#34;&gt;Per Class&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#per-http-request&#34;&gt;Per HTTP Request&lt;/a&gt; methods.&lt;/p&gt; &#xA;&lt;h3&gt;2.e. Limiting the Number of Versions Created&lt;/h3&gt; &#xA;&lt;p&gt;Configure &lt;code&gt;version_limit&lt;/code&gt; to cap the number of versions saved per record. This does not apply to &lt;code&gt;create&lt;/code&gt; events.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Limit: 4 versions per record (3 most recent, plus a `create` event)&#xA;PaperTrail.config.version_limit = 3&#xA;# Remove the limit&#xA;PaperTrail.config.version_limit = nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2.e.1 Per-model limit&lt;/h4&gt; &#xA;&lt;p&gt;Models can override the global &lt;code&gt;PaperTrail.config.version_limit&lt;/code&gt; setting.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# initializer&#xA;PaperTrail.config.version_limit = 10&#xA;&#xA;# At most 10 versions&#xA;has_paper_trail&#xA;&#xA;# At most 3 versions (2 updates, 1 create). Overrides global version_limit.&#xA;has_paper_trail limit: 2&#xA;&#xA;# Infinite versions&#xA;has_paper_trail limit: nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;3. Working With Versions&lt;/h2&gt; &#xA;&lt;h3&gt;3.a. Reverting And Undeleting A Model&lt;/h3&gt; &#xA;&lt;p&gt;PaperTrail makes reverting to a previous version easy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;widget = Widget.find 42&#xA;widget.update name: &#39;Blah blah&#39;&#xA;# Time passes....&#xA;widget = widget.paper_trail.previous_version  # the widget as it was before the update&#xA;widget.save                                   # reverted&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively you can find the version at a given time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;widget = widget.paper_trail.version_at(1.day.ago)  # the widget as it was one day ago&#xA;widget.save                                        # reverted&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note &lt;code&gt;version_at&lt;/code&gt; gives you the object, not a version, so you don&#39;t need to call &lt;code&gt;reify&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Undeleting is just as simple:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;widget = Widget.find(42)&#xA;widget.destroy&#xA;# Time passes....&#xA;widget = Widget.new(id:42)    # creating a new object with the same id, re-establishes the link&#xA;versions = widget.versions    # versions ordered by versions.created_at, ascending&#xA;widget = versions.last.reify  # the widget as it was before destruction&#xA;widget.save                   # the widget lives!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You could even use PaperTrail to implement an undo system; &lt;a href=&#34;http://railscasts.com/episodes/255-undo-with-paper-trail&#34;&gt;Ryan Bates has!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If your model uses &lt;a href=&#34;http://api.rubyonrails.org/classes/ActiveRecord/Locking/Optimistic.html&#34;&gt;optimistic locking&lt;/a&gt; don&#39;t forget to &lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail/issues/163&#34;&gt;increment your &lt;code&gt;lock_version&lt;/code&gt;&lt;/a&gt; before saving or you&#39;ll get a &lt;code&gt;StaleObjectError&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;3.b. Navigating Versions&lt;/h3&gt; &#xA;&lt;p&gt;You can call &lt;code&gt;previous_version&lt;/code&gt; and &lt;code&gt;next_version&lt;/code&gt; on an item to get it as it was/became. Note that these methods reify the item for you.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;live_widget = Widget.find 42&#xA;live_widget.versions.length                       # 4, for example&#xA;widget = live_widget.paper_trail.previous_version # =&amp;gt; widget == live_widget.versions.last.reify&#xA;widget = widget.paper_trail.previous_version      # =&amp;gt; widget == live_widget.versions[-2].reify&#xA;widget = widget.paper_trail.next_version          # =&amp;gt; widget == live_widget.versions.last.reify&#xA;widget.paper_trail.next_version                   # live_widget&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If instead you have a particular &lt;code&gt;version&lt;/code&gt; of an item you can navigate to the previous and next versions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;widget = Widget.find 42&#xA;version = widget.versions[-2]    # assuming widget has several versions&#xA;previous_version = version.previous&#xA;next_version = version.next&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find out which of an item&#39;s versions yours is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;current_version_number = version.index    # 0-based&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you got an item by reifying one of its versions, you can navigate back to the version it came from:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;latest_version = Widget.find(42).versions.last&#xA;widget = latest_version.reify&#xA;widget.version == latest_version    # true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find out whether a model instance is the current, live one -- or whether it came instead from a previous version -- with &lt;code&gt;live?&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;widget = Widget.find 42&#xA;widget.paper_trail.live?            # true&#xA;widget = widget.paper_trail.previous_version&#xA;widget.paper_trail.live?            # false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also: Section 3.e. Queries&lt;/p&gt; &#xA;&lt;h3&gt;3.c. Diffing Versions&lt;/h3&gt; &#xA;&lt;p&gt;There are two scenarios: diffing adjacent versions and diffing non-adjacent versions.&lt;/p&gt; &#xA;&lt;p&gt;The best way to diff adjacent versions is to get PaperTrail to do it for you. If you add an &lt;code&gt;object_changes&lt;/code&gt; column to your &lt;code&gt;versions&lt;/code&gt; table, PaperTrail will store the &lt;code&gt;changes&lt;/code&gt; diff in each version. Ignored attributes are omitted.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;widget = Widget.create name: &#39;Bob&#39;&#xA;widget.versions.last.changeset # reads object_changes column&#xA;# {&#xA;#   &#34;name&#34;=&amp;gt;[nil, &#34;Bob&#34;],&#xA;#   &#34;created_at&#34;=&amp;gt;[nil, 2015-08-10 04:10:40 UTC],&#xA;#   &#34;updated_at&#34;=&amp;gt;[nil, 2015-08-10 04:10:40 UTC],&#xA;#   &#34;id&#34;=&amp;gt;[nil, 1]&#xA;# }&#xA;widget.update name: &#39;Robert&#39;&#xA;widget.versions.last.changeset&#xA;# {&#xA;#   &#34;name&#34;=&amp;gt;[&#34;Bob&#34;, &#34;Robert&#34;],&#xA;#   &#34;updated_at&#34;=&amp;gt;[2015-08-10 04:13:19 UTC, 2015-08-10 04:13:19 UTC]&#xA;# }&#xA;widget.destroy&#xA;widget.versions.last.changeset&#xA;# {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Prior to 10.0.0, the &lt;code&gt;object_changes&lt;/code&gt; were only stored for create and update events. As of 10.0.0, they are stored for all three events.&lt;/p&gt; &#xA;&lt;p&gt;PaperTrail doesn&#39;t use diffs internally.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;When I designed PaperTrail I wanted simplicity and robustness so I decided to make each version of an object self-contained. A version stores all of its object&#39;s data, not a diff from the previous version. This means you can delete any version without affecting any other. -Andy&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To diff non-adjacent versions you&#39;ll have to write your own code. These libraries may help:&lt;/p&gt; &#xA;&lt;p&gt;For diffing two strings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/myobie/htmldiff&#34;&gt;htmldiff&lt;/a&gt;: expects but doesn&#39;t require HTML input and produces HTML output. Works very well but slows down significantly on large (e.g. 5,000 word) inputs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/pvande/differ&#34;&gt;differ&lt;/a&gt;: expects plain text input and produces plain text/coloured/HTML/any output. Can do character-wise, word-wise, line-wise, or arbitrary-boundary-string-wise diffs. Works very well on non-HTML input.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/halostatue/diff-lcs&#34;&gt;diff-lcs&lt;/a&gt;: old-school, line-wise diffs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Unfortunately, there is no currently widely available and supported library for diffing two ActiveRecord objects.&lt;/p&gt; &#xA;&lt;h3&gt;3.d. Deleting Old Versions&lt;/h3&gt; &#xA;&lt;p&gt;Over time your &lt;code&gt;versions&lt;/code&gt; table will grow to an unwieldy size. Because each version is self-contained (see the Diffing section above for more) you can simply delete any records you don&#39;t want any more. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;sql&amp;gt; delete from versions where created_at &amp;lt; &#39;2010-06-01&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;PaperTrail::Version.where(&#39;created_at &amp;lt; ?&#39;, 1.day.ago).delete_all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3.e. Queries&lt;/h3&gt; &#xA;&lt;p&gt;You can query records in the &lt;code&gt;versions&lt;/code&gt; table based on their &lt;code&gt;object&lt;/code&gt; or &lt;code&gt;object_changes&lt;/code&gt; columns.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Find versions that meet these criteria.&#xA;PaperTrail::Version.where_object(content: &#39;Hello&#39;, title: &#39;Article&#39;)&#xA;&#xA;# Find versions before and after attribute `atr` had value `v`:&#xA;PaperTrail::Version.where_object_changes(atr: &#39;v&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;where_object_changes_from&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;where_object_changes_to&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;where_attribute_changes&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Only &lt;code&gt;where_object&lt;/code&gt; supports text columns. Your &lt;code&gt;object_changes&lt;/code&gt; column should be a &lt;code&gt;json&lt;/code&gt; or &lt;code&gt;jsonb&lt;/code&gt; column if possible. If you must use a &lt;code&gt;text&lt;/code&gt; column, you&#39;ll have to write a &lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#6c-custom-object-changes&#34;&gt;custom &lt;code&gt;object_changes_adapter&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;3.f. Defunct &lt;code&gt;item_id&lt;/code&gt;s&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;item_id&lt;/code&gt;s in your &lt;code&gt;versions&lt;/code&gt; table can become defunct over time, potentially causing application errors when &lt;code&gt;id&lt;/code&gt;s in the foreign table are reused. &lt;code&gt;id&lt;/code&gt; reuse can be an explicit choice of the application, or implicitly caused by sequence cycling. The chance of &lt;code&gt;id&lt;/code&gt; reuse is reduced (but not eliminated) with &lt;code&gt;bigint&lt;/code&gt; &lt;code&gt;id&lt;/code&gt;s or &lt;code&gt;uuid&lt;/code&gt;s, &lt;code&gt;no cycle&lt;/code&gt; &lt;a href=&#34;https://www.postgresql.org/docs/current/sql-createsequence.html&#34;&gt;sequences&lt;/a&gt;, and/or when &lt;code&gt;versions&lt;/code&gt; are periodically deleted.&lt;/p&gt; &#xA;&lt;p&gt;Ideally, a Foreign Key Constraint (FKC) would set &lt;code&gt;item_id&lt;/code&gt; to null when an item is deleted. However, &lt;code&gt;items&lt;/code&gt; is a polymorphic relationship. A partial FKC (e.g. an FKC with a &lt;code&gt;where&lt;/code&gt; clause) is possible, but only in Postgres, and it is impractical to maintain FKCs for every versioned table unless the number of such tables is very small.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail#6a-custom-version-classes&#34;&gt;per-table &lt;code&gt;Version&lt;/code&gt; classes&lt;/a&gt; are used, then a partial FKC is no longer needed. So, a normal FKC can be written in any RDBMS, but it remains impractical to maintain so many FKCs.&lt;/p&gt; &#xA;&lt;p&gt;Some applications choose to handle this problem by &#34;soft-deleting&#34; versioned records, i.e. marking them as deleted instead of actually deleting them. This completely prevents &lt;code&gt;id&lt;/code&gt; reuse, but adds complexity to the application. In most applications, this is the only known practical solution to the &lt;code&gt;id&lt;/code&gt; reuse problem.&lt;/p&gt; &#xA;&lt;h2&gt;4. Saving More Information About Versions&lt;/h2&gt; &#xA;&lt;h3&gt;4.a. Finding Out Who Was Responsible For A Change&lt;/h3&gt; &#xA;&lt;p&gt;Set &lt;code&gt;PaperTrail.request.whodunnit=&lt;/code&gt;, and that value will be stored in the version&#39;s &lt;code&gt;whodunnit&lt;/code&gt; column.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;PaperTrail.request.whodunnit = &#39;Andy Stewart&#39;&#xA;widget.update name: &#39;Wibble&#39;&#xA;widget.versions.last.whodunnit # Andy Stewart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Setting &lt;code&gt;whodunnit&lt;/code&gt; to a &lt;code&gt;Proc&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;whodunnit=&lt;/code&gt; also accepts a &lt;code&gt;Proc&lt;/code&gt;, in the rare case that lazy evaluation is required.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;PaperTrail.request.whodunnit = proc do&#xA;  caller.find { |c| c.starts_with? Rails.root.to_s }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Because lazy evaluation can be hard to troubleshoot, this is not recommended for common use.&lt;/p&gt; &#xA;&lt;h4&gt;Setting &lt;code&gt;whodunnit&lt;/code&gt; Temporarily&lt;/h4&gt; &#xA;&lt;p&gt;To set whodunnit temporarily, for the duration of a block, use &lt;code&gt;PaperTrail.request&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;PaperTrail.request(whodunnit: &#39;Dorian Marié&#39;) do&#xA;  widget.update name: &#39;Wibble&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Setting &lt;code&gt;whodunnit&lt;/code&gt; with a controller callback&lt;/h4&gt; &#xA;&lt;p&gt;If your controller has a &lt;code&gt;current_user&lt;/code&gt; method, PaperTrail provides a callback that will assign &lt;code&gt;current_user.id&lt;/code&gt; to &lt;code&gt;whodunnit&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ApplicationController&#xA;  before_action :set_paper_trail_whodunnit&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may want &lt;code&gt;set_paper_trail_whodunnit&lt;/code&gt; to call a different method to find out who is responsible. To do so, override the &lt;code&gt;user_for_paper_trail&lt;/code&gt; method in your controller like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ApplicationController&#xA;  def user_for_paper_trail&#xA;    logged_in? ? current_member.id : &#39;Public user&#39;  # or whatever&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail/wiki/Setting-whodunnit-in-the-rails-console&#34;&gt;Setting whodunnit in the rails console&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Terminator and Originator&lt;/h4&gt; &#xA;&lt;p&gt;A version&#39;s &lt;code&gt;whodunnit&lt;/code&gt; column tells us who changed the object, causing the &lt;code&gt;version&lt;/code&gt; to be stored. Because a version stores the object as it looked before the change (see the table above), &lt;code&gt;whodunnit&lt;/code&gt; tells us who &lt;em&gt;stopped&lt;/em&gt; the object looking like this -- not who made it look like this. Hence &lt;code&gt;whodunnit&lt;/code&gt; is aliased as &lt;code&gt;terminator&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To find out who made a version&#39;s object look that way, use &lt;code&gt;version.paper_trail_originator&lt;/code&gt;. And to find out who made a &#34;live&#34; object look like it does, call &lt;code&gt;paper_trail_originator&lt;/code&gt; on the object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;widget = Widget.find 153                    # assume widget has 0 versions&#xA;PaperTrail.request.whodunnit = &#39;Alice&#39;&#xA;widget.update name: &#39;Yankee&#39;&#xA;widget.paper_trail.originator               # &#39;Alice&#39;&#xA;PaperTrail.request.whodunnit = &#39;Bob&#39;&#xA;widget.update name: &#39;Zulu&#39;&#xA;widget.paper_trail.originator               # &#39;Bob&#39;&#xA;first_version, last_version = widget.versions.first, widget.versions.last&#xA;first_version.whodunnit                     # &#39;Alice&#39;&#xA;first_version.paper_trail_originator        # nil&#xA;first_version.terminator                    # &#39;Alice&#39;&#xA;last_version.whodunnit                      # &#39;Bob&#39;&#xA;last_version.paper_trail_originator         # &#39;Alice&#39;&#xA;last_version.terminator                     # &#39;Bob&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Storing an ActiveRecord globalid in whodunnit&lt;/h4&gt; &#xA;&lt;p&gt;If you would like &lt;code&gt;whodunnit&lt;/code&gt; to return an &lt;code&gt;ActiveRecord&lt;/code&gt; object instead of a string, please try the &lt;a href=&#34;https://github.com/ankit1910/paper_trail-globalid&#34;&gt;paper_trail-globalid&lt;/a&gt; gem.&lt;/p&gt; &#xA;&lt;h3&gt;4.b. Associations&lt;/h3&gt; &#xA;&lt;p&gt;To track and reify associations, use &lt;a href=&#34;https://github.com/westonganger/paper_trail-association_tracking&#34;&gt;paper_trail-association_tracking&lt;/a&gt; (PT-AT).&lt;/p&gt; &#xA;&lt;p&gt;From 2014 to 2018, association tracking was an experimental feature, but many issues were discovered. To attract new volunteers to address these issues, PT-AT was extracted (see &lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail/issues/1070&#34;&gt;https://github.com/paper-trail-gem/paper_trail/issues/1070&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Even though it had always been an experimental feature, we didn&#39;t want the extraction of PT-AT to be a breaking change, so great care was taken to remove it slowly.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In PT 9, PT-AT was kept as a runtime dependency.&lt;/li&gt; &#xA; &lt;li&gt;In PT 10, it became a development dependency (If you use it you must add it to your own &lt;code&gt;Gemfile&lt;/code&gt;) and we kept running all of its tests.&lt;/li&gt; &#xA; &lt;li&gt;In PT 11, it will no longer be a development dependency, and it is responsible for its own tests.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;4.b.1 The optional &lt;code&gt;item_subtype&lt;/code&gt; column&lt;/h4&gt; &#xA;&lt;p&gt;As of PT 10, users may add an &lt;code&gt;item_subtype&lt;/code&gt; column to their &lt;code&gt;versions&lt;/code&gt; table. When storing versions for STI models, rails stores the base class in &lt;code&gt;item_type&lt;/code&gt; (that&#39;s just how polymorphic associations like &lt;code&gt;item&lt;/code&gt; work) In addition, PT will now store the subclass in &lt;code&gt;item_subtype&lt;/code&gt;. If this column is present PT-AT will use it to fix a rare issue with reification of STI subclasses.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;add_column :versions, :item_subtype, :string, null: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So, if you use PT-AT and STI, the addition of this column is recommended.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail/issues/594&#34;&gt;https://github.com/paper-trail-gem/paper_trail/issues/594&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail/pull/1143&#34;&gt;https://github.com/paper-trail-gem/paper_trail/pull/1143&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/westonganger/paper_trail-association_tracking/pull/5&#34;&gt;https://github.com/westonganger/paper_trail-association_tracking/pull/5&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;4.c. Storing Metadata&lt;/h3&gt; &#xA;&lt;p&gt;You can add your own custom columns to your &lt;code&gt;versions&lt;/code&gt; table. Values can be given using &lt;strong&gt;Model Metadata&lt;/strong&gt; or &lt;strong&gt;Controller Metadata&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Model Metadata&lt;/h4&gt; &#xA;&lt;p&gt;You can specify metadata in the model using &lt;code&gt;has_paper_trail(meta:)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Article &amp;lt; ActiveRecord::Base&#xA;  belongs_to :author&#xA;  has_paper_trail(&#xA;    meta: {&#xA;      author_id: :author_id, # model attribute&#xA;      word_count: :count_words, # arbitrary model method&#xA;      answer: 42, # scalar value&#xA;      editor: proc { |article| article.editor.full_name } # a Proc&#xA;    }&#xA;  )&#xA;  def count_words&#xA;    153&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Metadata from Controllers&lt;/h4&gt; &#xA;&lt;p&gt;You can also store any information you like from your controller. Override the &lt;code&gt;info_for_paper_trail&lt;/code&gt; method in your controller to return a hash whose keys correspond to columns in your &lt;code&gt;versions&lt;/code&gt; table.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ApplicationController&#xA;  def info_for_paper_trail&#xA;    { ip: request.remote_ip, user_agent: request.user_agent }&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Advantages of Metadata&lt;/h4&gt; &#xA;&lt;p&gt;Why would you do this? In this example, &lt;code&gt;author_id&lt;/code&gt; is an attribute of &lt;code&gt;Article&lt;/code&gt; and PaperTrail will store it anyway in a serialized form in the &lt;code&gt;object&lt;/code&gt; column of the &lt;code&gt;version&lt;/code&gt; record. But let&#39;s say you wanted to pull out all versions for a particular author; without the metadata you would have to deserialize (reify) each &lt;code&gt;version&lt;/code&gt; object to see if belonged to the author in question. Clearly this is inefficient. Using the metadata you can find just those versions you want:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;PaperTrail::Version.where(author_id: author_id)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Metadata can Override PaperTrail Columns&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Experts only&lt;/strong&gt;. Metadata will override the normal values that PT would have inserted into its own columns.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;em&gt;PT Column&lt;/em&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;em&gt;How bad of an idea?&lt;/em&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;em&gt;Alternative&lt;/em&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;item_type&lt;/td&gt; &#xA;   &lt;td&gt;terrible idea&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;item_id&lt;/td&gt; &#xA;   &lt;td&gt;terrible idea&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;event&lt;/td&gt; &#xA;   &lt;td&gt;meh&lt;/td&gt; &#xA;   &lt;td&gt;paper_trail_event&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;whodunnit&lt;/td&gt; &#xA;   &lt;td&gt;meh&lt;/td&gt; &#xA;   &lt;td&gt;PaperTrail.request.whodunnit=&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;object&lt;/td&gt; &#xA;   &lt;td&gt;a little dangerous&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;object_changes&lt;/td&gt; &#xA;   &lt;td&gt;a little dangerous&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;5. ActiveRecord&lt;/h2&gt; &#xA;&lt;h3&gt;5.a. Single Table Inheritance (STI)&lt;/h3&gt; &#xA;&lt;p&gt;PaperTrail supports &lt;a href=&#34;http://api.rubyonrails.org/classes/ActiveRecord/Base.html#class-ActiveRecord::Base-label-Single+table+inheritance&#34;&gt;Single Table Inheritance&lt;/a&gt;, and even supports an un-versioned base model, as of &lt;code&gt;23ffbdc7e1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Fruit &amp;lt; ActiveRecord::Base&#xA;  # un-versioned base model&#xA;end&#xA;class Banana &amp;lt; Fruit&#xA;  has_paper_trail&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, there is a known issue when reifying &lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#associations&#34;&gt;associations&lt;/a&gt;, see &lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail/issues/594&#34;&gt;https://github.com/paper-trail-gem/paper_trail/issues/594&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;5.b. Configuring the &lt;code&gt;versions&lt;/code&gt; Association&lt;/h3&gt; &#xA;&lt;h4&gt;5.b.1. &lt;code&gt;versions&lt;/code&gt; association&lt;/h4&gt; &#xA;&lt;p&gt;You may configure the name of the &lt;code&gt;versions&lt;/code&gt; association by passing a different name (default is &lt;code&gt;:versions&lt;/code&gt;) in the &lt;code&gt;versions:&lt;/code&gt; options hash:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Post &amp;lt; ActiveRecord::Base&#xA;  has_paper_trail versions: {&#xA;    name: :drafts&#xA;  }&#xA;end&#xA;&#xA;Post.new.versions # =&amp;gt; NoMethodError&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may pass a &lt;a href=&#34;https://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_many-label-Scopes&#34;&gt;scope&lt;/a&gt; to the &lt;code&gt;versions&lt;/code&gt; association with the &lt;code&gt;scope:&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Post &amp;lt; ActiveRecord::Base&#xA;  has_paper_trail versions: {&#xA;    scope: -&amp;gt; { order(&#34;id desc&#34;) }&#xA;  }&#xA;&#xA;  # Equivalent to:&#xA;  has_many :versions,&#xA;    -&amp;gt; { order(&#34;id desc&#34;) },&#xA;    class_name: &#39;PaperTrail::Version&#39;,&#xA;    as: :item&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any other &lt;a href=&#34;https://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_many-label-Options&#34;&gt;options supported by &lt;code&gt;has_many&lt;/code&gt;&lt;/a&gt; can be passed along to the &lt;code&gt;has_many&lt;/code&gt; macro via the &lt;code&gt;versions:&lt;/code&gt; options hash.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Post &amp;lt; ActiveRecord::Base&#xA;  has_paper_trail versions: {&#xA;    extend: VersionsExtensions,&#xA;    autosave: false&#xA;  }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Overriding (instead of configuring) the &lt;code&gt;versions&lt;/code&gt; method is not supported. Overriding associations is not recommended in general.&lt;/p&gt; &#xA;&lt;h4&gt;5.b.2. &lt;code&gt;item&lt;/code&gt; association&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;code&gt;PaperTrail::Version&lt;/code&gt; object &lt;code&gt;belongs_to&lt;/code&gt; an &lt;code&gt;item&lt;/code&gt;, the relevant record.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;item&lt;/code&gt; association is first defined in &lt;code&gt;PaperTrail::VersionConcern&lt;/code&gt;, but associations can be redefined.&lt;/p&gt; &#xA;&lt;h5&gt;Example: adding a &lt;code&gt;counter_cache&lt;/code&gt; to &lt;code&gt;item&lt;/code&gt; association&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/paper_trail/version.rb&#xA;module PaperTrail&#xA;  class Version &amp;lt; ActiveRecord::Base&#xA;    belongs_to :item, polymorphic: true, counter_cache: true&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When redefining an association, its options are &lt;em&gt;replaced&lt;/em&gt; not &lt;em&gt;merged&lt;/em&gt;, so don&#39;t forget to specify the options from &lt;code&gt;PaperTrail::VersionConcern&lt;/code&gt;, like &lt;code&gt;polymorphic&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Be advised that redefining an association is an undocumented feature of Rails.&lt;/p&gt; &#xA;&lt;h3&gt;5.c. Generators&lt;/h3&gt; &#xA;&lt;p&gt;PaperTrail has one generator, &lt;code&gt;paper_trail:install&lt;/code&gt;. It writes, but does not run, a migration file. The migration creates the &lt;code&gt;versions&lt;/code&gt; table.&lt;/p&gt; &#xA;&lt;h4&gt;Reference&lt;/h4&gt; &#xA;&lt;p&gt;The most up-to-date documentation for this generator can be found by running &lt;code&gt;rails generate paper_trail:install --help&lt;/code&gt;, but a copy is included here for convenience.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage:&#xA;  rails generate paper_trail:install [options]&#xA;&#xA;Options:&#xA;  [--with-changes], [--no-with-changes]            # Store changeset (diff) with each version&#xA;  [--uuid]                                         # To use paper_trail with projects using uuid for id&#xA;&#xA;Runtime options:&#xA;  -f, [--force]                    # Overwrite files that already exist&#xA;  -p, [--pretend], [--no-pretend]  # Run but do not make any changes&#xA;  -q, [--quiet], [--no-quiet]      # Suppress status output&#xA;  -s, [--skip], [--no-skip]        # Skip files that already exist&#xA;&#xA;Generates (but does not run) a migration to add a versions table.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;5.d. Protected Attributes&lt;/h3&gt; &#xA;&lt;p&gt;As of version 6, PT no longer supports rails 3 or the &lt;a href=&#34;https://github.com/rails/protected_attributes&#34;&gt;protected_attributes&lt;/a&gt; gem. If you are still using them, you may use PT 5 or lower. We recommend upgrading to &lt;a href=&#34;https://github.com/rails/strong_parameters&#34;&gt;strong_parameters&lt;/a&gt; as soon as possible.&lt;/p&gt; &#xA;&lt;p&gt;If you must use &lt;a href=&#34;https://github.com/rails/protected_attributes&#34;&gt;protected_attributes&lt;/a&gt; for now, and want to use PT &amp;gt; 5, you can reopen &lt;code&gt;PaperTrail::Version&lt;/code&gt; and add the following &lt;code&gt;attr_accessible&lt;/code&gt; fields:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/paper_trail/version.rb&#xA;module PaperTrail&#xA;  class Version &amp;lt; ActiveRecord::Base&#xA;    include PaperTrail::VersionConcern&#xA;    attr_accessible :item_type, :item_id, :event, :whodunnit, :object, :object_changes, :created_at&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This &lt;em&gt;unsupported workaround&lt;/em&gt; has been tested with protected_attributes 1.0.9 / rails 4.2.8 / paper_trail 7.0.3.&lt;/p&gt; &#xA;&lt;h2&gt;6. Extensibility&lt;/h2&gt; &#xA;&lt;h3&gt;6.a. Custom Version Classes&lt;/h3&gt; &#xA;&lt;p&gt;You can specify custom version subclasses with the &lt;code&gt;:class_name&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class PostVersion &amp;lt; PaperTrail::Version&#xA;  # custom behaviour, e.g:&#xA;  self.table_name = :post_versions&#xA;end&#xA;&#xA;class Post &amp;lt; ActiveRecord::Base&#xA;  has_paper_trail versions: {&#xA;    class_name: &#39;PostVersion&#39;&#xA;  }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unlike ActiveRecord&#39;s &lt;code&gt;class_name&lt;/code&gt;, you&#39;ll have to supply the complete module path to the class (e.g. &lt;code&gt;Foo::BarVersion&lt;/code&gt; if your class is inside the module &lt;code&gt;Foo&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;Advantages&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;For models which have a lot of versions, storing each model&#39;s versions in a separate table can improve the performance of certain database queries.&lt;/li&gt; &#xA; &lt;li&gt;Store different version &lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#4c-storing-metadata&#34;&gt;metadata&lt;/a&gt; for different models.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Configuration&lt;/h4&gt; &#xA;&lt;p&gt;If you are using Postgres, you should also define the sequence that your custom version class will use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class PostVersion &amp;lt; PaperTrail::Version&#xA;  self.table_name = :post_versions&#xA;  self.sequence_name = :post_versions_id_seq&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you only use custom version classes and don&#39;t have a &lt;code&gt;versions&lt;/code&gt; table, you must let ActiveRecord know that your base version class (eg. &lt;code&gt;ApplicationVersion&lt;/code&gt; below) class is an &lt;code&gt;abstract_class&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/application_version.rb&#xA;class ApplicationVersion &amp;lt; ActiveRecord::Base&#xA;  include PaperTrail::VersionConcern&#xA;  self.abstract_class = true&#xA;end&#xA;&#xA;class PostVersion &amp;lt; ApplicationVersion&#xA;  self.table_name = :post_versions&#xA;  self.sequence_name = :post_versions_id_seq&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also specify custom names for the versions and version associations. This is useful if you already have &lt;code&gt;versions&lt;/code&gt; or/and &lt;code&gt;version&lt;/code&gt; methods on your model. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Post &amp;lt; ActiveRecord::Base&#xA;  has_paper_trail versions: { name: :paper_trail_versions },&#xA;                  version:          :paper_trail_version&#xA;&#xA;  # Existing versions method.  We don&#39;t want to clash.&#xA;  def versions&#xA;    # ...&#xA;  end&#xA;&#xA;  # Existing version method.  We don&#39;t want to clash.&#xA;  def version&#xA;    # ...&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;6.b. Custom Serializer&lt;/h3&gt; &#xA;&lt;p&gt;By default, PaperTrail stores your changes as a &lt;code&gt;YAML&lt;/code&gt; dump. You can override this with the serializer config option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;PaperTrail.serializer = MyCustomSerializer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A valid serializer is a &lt;code&gt;module&lt;/code&gt; (or &lt;code&gt;class&lt;/code&gt;) that defines a &lt;code&gt;load&lt;/code&gt; and &lt;code&gt;dump&lt;/code&gt; method. These serializers are included in the gem for your convenience:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail/raw/master/lib/paper_trail/serializers/yaml.rb&#34;&gt;PaperTrail::Serializers::YAML&lt;/a&gt; - Default&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail/raw/master/lib/paper_trail/serializers/json.rb&#34;&gt;PaperTrail::Serializers::JSON&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;PostgreSQL JSON column type support&lt;/h4&gt; &#xA;&lt;p&gt;If you use PostgreSQL, and would like to store your &lt;code&gt;object&lt;/code&gt; (and/or &lt;code&gt;object_changes&lt;/code&gt;) data in a column of &lt;a href=&#34;http://www.postgresql.org/docs/9.4/static/datatype-json.html&#34;&gt;type &lt;code&gt;json&lt;/code&gt; or type &lt;code&gt;jsonb&lt;/code&gt;&lt;/a&gt;, specify &lt;code&gt;json&lt;/code&gt; instead of &lt;code&gt;text&lt;/code&gt; for these columns in your migration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;create_table :versions do |t|&#xA;  # ...&#xA;  t.json :object          # Full object changes&#xA;  t.json :object_changes  # Optional column-level changes&#xA;  # ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use the PostgreSQL &lt;code&gt;json&lt;/code&gt; or &lt;code&gt;jsonb&lt;/code&gt; column type, you do not need to specify a &lt;code&gt;PaperTrail.serializer&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Convert existing YAML data to JSON&lt;/h5&gt; &#xA;&lt;p&gt;If you&#39;ve been using PaperTrail for a while with the default YAML serializer and you want to switch to JSON or JSONB, you&#39;re in a bit of a bind because there&#39;s no automatic way to migrate your data. The first (slow) option is to loop over every record and parse it in Ruby, then write to a temporary column:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;add_column :versions, :new_object, :jsonb # or :json&#xA;# add_column :versions, :new_object_changes, :jsonb # or :json&#xA;&#xA;# PaperTrail::Version.reset_column_information # needed for rails &amp;lt; 6&#xA;&#xA;PaperTrail::Version.where.not(object: nil).find_each do |version|&#xA;  version.update_column(:new_object, YAML.load(version.object))&#xA;&#xA;  # if version.object_changes&#xA;  #   version.update_column(&#xA;  #     :new_object_changes,&#xA;  #     YAML.load(version.object_changes)&#xA;  #   )&#xA;  # end&#xA;end&#xA;&#xA;remove_column :versions, :object&#xA;# remove_column :versions, :object_changes&#xA;rename_column :versions, :new_object, :object&#xA;# rename_column :versions, :new_object_changes, :object_changes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This technique can be very slow if you have a lot of data. Though slow, it is safe in databases where transactions are protected against DDL, such as Postgres. In databases without such protection, such as MySQL, a table lock may be necessary.&lt;/p&gt; &#xA;&lt;p&gt;If the above technique is too slow for your needs, and you&#39;re okay doing without PaperTrail data temporarily, you can create the new column without converting the data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;rename_column :versions, :object, :old_object&#xA;add_column :versions, :object, :jsonb # or :json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After that migration, your historical data still exists as YAML, and new data will be stored as JSON. Next, convert records from YAML to JSON using a background script.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;PaperTrail::Version.where.not(old_object: nil).find_each do |version|&#xA;  version.update_columns old_object: nil, object: YAML.load(version.old_object)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, in another migration, remove the old column.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;remove_column :versions, :old_object&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use the optional &lt;code&gt;object_changes&lt;/code&gt; column, don&#39;t forget to convert it also, using the same technique.&lt;/p&gt; &#xA;&lt;h5&gt;Convert a Column from Text to JSON&lt;/h5&gt; &#xA;&lt;p&gt;If your &lt;code&gt;object&lt;/code&gt; column already contains JSON data, and you want to change its data type to &lt;code&gt;json&lt;/code&gt; or &lt;code&gt;jsonb&lt;/code&gt;, you can use the following &lt;a href=&#34;http://www.postgresql.org/docs/9.4/interactive/ddl.html&#34;&gt;DDL&lt;/a&gt;. Of course, if your &lt;code&gt;object&lt;/code&gt; column contains YAML, you must first convert the data to JSON (see above) before you can change the column type.&lt;/p&gt; &#xA;&lt;p&gt;Using SQL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;alter table versions&#xA;alter column object type jsonb&#xA;using object::jsonb;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using ActiveRecord:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ConvertVersionsObjectToJson &amp;lt; ActiveRecord::Migration&#xA;  def up&#xA;    change_column :versions, :object, &#39;jsonb USING object::jsonb&#39;&#xA;  end&#xA;&#xA;  def down&#xA;    change_column :versions, :object, &#39;text USING object::text&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;6.c. Custom Object Changes&lt;/h3&gt; &#xA;&lt;p&gt;To fully control the contents of their &lt;code&gt;object_changes&lt;/code&gt; column, expert users can write an adapter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;PaperTrail.config.object_changes_adapter = MyObjectChangesAdapter.new&#xA;&#xA;class MyObjectChangesAdapter&#xA;  # @param changes Hash&#xA;  # @return Hash&#xA;  def diff(changes)&#xA;    # ...&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should only use this feature if you are comfortable reading PT&#39;s source to see exactly how the adapter is used. For example, see how &lt;code&gt;diff&lt;/code&gt; is used by reading &lt;code&gt;::PaperTrail::Events::Base#recordable_object_changes&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;An adapter can implement any or all of the following methods:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;diff: Returns the changeset in the desired format given the changeset in the original format&lt;/li&gt; &#xA; &lt;li&gt;load_changeset: Returns the changeset for a given version object&lt;/li&gt; &#xA; &lt;li&gt;where_object_changes: Returns the records resulting from the given hash of attributes.&lt;/li&gt; &#xA; &lt;li&gt;where_object_changes_from: Returns the records resulting from the given hash of attributes where the attributes changed &lt;em&gt;from&lt;/em&gt; the provided value(s).&lt;/li&gt; &#xA; &lt;li&gt;where_object_changes_to: Returns the records resulting from the given hash of attributes where the attributes changed &lt;em&gt;to&lt;/em&gt; the provided value(s).&lt;/li&gt; &#xA; &lt;li&gt;where_attribute_changes: Returns the records where the attribute changed to or from any value.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Depending on your needs, you may choose to implement only a subset of these methods.&lt;/p&gt; &#xA;&lt;h4&gt;Known Adapters&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hashwin/paper_trail-hashdiff&#34;&gt;paper_trail-hashdiff&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;6.d. Excluding the Object Column&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;object&lt;/code&gt; column ends up storing a lot of duplicate data if you have models that have many columns, and that are updated many times. You can save ~50% of storage space by removing the column from the versions table. It&#39;s important to note that this will disable &lt;code&gt;reify&lt;/code&gt; and &lt;code&gt;where_object&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;7. Testing&lt;/h2&gt; &#xA;&lt;p&gt;You may want to turn PaperTrail off to speed up your tests. See &lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#2d-turning-papertrail-off&#34;&gt;Turning PaperTrail Off&lt;/a&gt; above.&lt;/p&gt; &#xA;&lt;h3&gt;7.a. Minitest&lt;/h3&gt; &#xA;&lt;p&gt;First, disable PT for the entire &lt;code&gt;ruby&lt;/code&gt; process.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# in config/environments/test.rb&#xA;config.after_initialize do&#xA;  PaperTrail.enabled = false&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, to enable PT for specific tests, you can add a &lt;code&gt;with_versioning&lt;/code&gt; test helper method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# in test/test_helper.rb&#xA;def with_versioning&#xA;  was_enabled = PaperTrail.enabled?&#xA;  was_enabled_for_request = PaperTrail.request.enabled?&#xA;  PaperTrail.enabled = true&#xA;  PaperTrail.request.enabled = true&#xA;  begin&#xA;    yield&#xA;  ensure&#xA;    PaperTrail.enabled = was_enabled&#xA;    PaperTrail.request.enabled = was_enabled_for_request&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, use the helper in your tests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;test &#39;something that needs versioning&#39; do&#xA;  with_versioning do&#xA;    # your test&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;7.b. RSpec&lt;/h3&gt; &#xA;&lt;p&gt;PaperTrail provides a helper, &lt;code&gt;paper_trail/frameworks/rspec.rb&lt;/code&gt;, that works with &lt;a href=&#34;https://github.com/rspec/rspec&#34;&gt;RSpec&lt;/a&gt; to make it easier to control when &lt;code&gt;PaperTrail&lt;/code&gt; is enabled during testing.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/rails_helper.rb&#xA;ENV[&#34;RAILS_ENV&#34;] ||= &#39;test&#39;&#xA;require &#39;spec_helper&#39;&#xA;require File.expand_path(&#34;../../config/environment&#34;, __FILE__)&#xA;require &#39;rspec/rails&#39;&#xA;# ...&#xA;require &#39;paper_trail/frameworks/rspec&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the helper loaded, PaperTrail will be turned off for all tests by default. To enable PaperTrail for a test you can either wrap the test in a &lt;code&gt;with_versioning&lt;/code&gt; block, or pass in &lt;code&gt;versioning: true&lt;/code&gt; option to a spec block.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;describe &#39;RSpec test group&#39; do&#xA;  it &#39;by default, PaperTrail will be turned off&#39; do&#xA;    expect(PaperTrail).to_not be_enabled&#xA;  end&#xA;&#xA;  with_versioning do&#xA;    it &#39;within a `with_versioning` block it will be turned on&#39; do&#xA;      expect(PaperTrail).to be_enabled&#xA;    end&#xA;  end&#xA;&#xA;  it &#39;can be turned on at the `it` or `describe` level&#39;, versioning: true do&#xA;    expect(PaperTrail).to be_enabled&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The helper will also reset &lt;code&gt;whodunnit&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt; before each test to help prevent data spillover between tests. If you are using PaperTrail with Rails, the helper will automatically set the &lt;code&gt;PaperTrail.request.controller_info&lt;/code&gt; value to &lt;code&gt;{}&lt;/code&gt; as well, again, to help prevent data spillover between tests.&lt;/p&gt; &#xA;&lt;p&gt;There is also a &lt;code&gt;be_versioned&lt;/code&gt; matcher provided by PaperTrail&#39;s RSpec helper which can be leveraged like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Widget &amp;lt; ActiveRecord::Base&#xA;end&#xA;&#xA;describe Widget do&#xA;  it &#39;is not versioned by default&#39; do&#xA;    is_expected.to_not be_versioned&#xA;  end&#xA;&#xA;  describe &#39;add versioning to the `Widget` class&#39; do&#xA;    before(:all) do&#xA;      class Widget &amp;lt; ActiveRecord::Base&#xA;        has_paper_trail&#xA;      end&#xA;    end&#xA;&#xA;    it &#39;enables paper trail&#39; do&#xA;      is_expected.to be_versioned&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Matchers&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;have_a_version_with&lt;/code&gt; matcher makes assertions about versions using &lt;code&gt;where_object&lt;/code&gt;, based on the &lt;code&gt;object&lt;/code&gt; column.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;describe &#39;`have_a_version_with` matcher&#39; do&#xA;  it &#39;is possible to do assertions on version attributes&#39; do&#xA;    widget.update!(name: &#39;Leonard&#39;, an_integer: 1)&#xA;    widget.update!(name: &#39;Tom&#39;)&#xA;    widget.update!(name: &#39;Bob&#39;)&#xA;    expect(widget).to have_a_version_with name: &#39;Leonard&#39;, an_integer: 1&#xA;    expect(widget).to have_a_version_with an_integer: 1&#xA;    expect(widget).to have_a_version_with name: &#39;Tom&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;have_a_version_with_changes&lt;/code&gt; matcher makes assertions about versions using &lt;code&gt;where_object_changes&lt;/code&gt;, based on the optional &lt;a href=&#34;https://raw.githubusercontent.com/paper-trail-gem/paper_trail/master/#3c-diffing-versions&#34;&gt;&lt;code&gt;object_changes&lt;/code&gt; column&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;describe &#39;`have_a_version_with_changes` matcher&#39; do&#xA;  it &#39;is possible to do assertions on version changes&#39; do&#xA;    widget.update!(name: &#39;Leonard&#39;, an_integer: 1)&#xA;    widget.update!(name: &#39;Tom&#39;)&#xA;    widget.update!(name: &#39;Bob&#39;)&#xA;    expect(widget).to have_a_version_with_changes name: &#39;Leonard&#39;, an_integer: 2&#xA;    expect(widget).to have_a_version_with_changes an_integer: 2&#xA;    expect(widget).to have_a_version_with_changes name: &#39;Bob&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more examples of the RSpec matchers, see the &lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail/raw/master/spec/models/widget_spec.rb&#34;&gt;Widget spec&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;7.c. Cucumber&lt;/h3&gt; &#xA;&lt;p&gt;PaperTrail provides a helper for &lt;a href=&#34;http://cukes.info&#34;&gt;Cucumber&lt;/a&gt; that works similar to the RSpec helper. If you want to use the helper, you will need to require in your cucumber helper like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# features/support/env.rb&#xA;&#xA;ENV[&#34;RAILS_ENV&#34;] ||= &#39;cucumber&#39;&#xA;require File.expand_path(File.dirname(__FILE__) + &#39;/../../config/environment&#39;)&#xA;# ...&#xA;require &#39;paper_trail/frameworks/cucumber&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the helper is loaded, PaperTrail will be turned off for all scenarios by a &lt;code&gt;before&lt;/code&gt; hook added by the helper by default. When you want to enable PaperTrail for a scenario, you can wrap code in a &lt;code&gt;with_versioning&lt;/code&gt; block in a step, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Given /I want versioning on my model/ do&#xA;  with_versioning do&#xA;    # PaperTrail will be turned on for all code inside of this block&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The helper will also reset the &lt;code&gt;whodunnit&lt;/code&gt; value to &lt;code&gt;nil&lt;/code&gt; before each test to help prevent data spillover between tests. If you are using PaperTrail with Rails, the helper will automatically set the &lt;code&gt;PaperTrail.request.controller_info&lt;/code&gt; value to &lt;code&gt;{}&lt;/code&gt; as well, again, to help prevent data spillover between tests.&lt;/p&gt; &#xA;&lt;h3&gt;7.d. Spork&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use the &lt;code&gt;RSpec&lt;/code&gt; or &lt;code&gt;Cucumber&lt;/code&gt; helpers with &lt;a href=&#34;https://github.com/sporkrb/spork&#34;&gt;Spork&lt;/a&gt;, you will need to manually require the helper(s) in your &lt;code&gt;prefork&lt;/code&gt; block on your test helper, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/rails_helper.rb&#xA;&#xA;require &#39;spork&#39;&#xA;&#xA;Spork.prefork do&#xA;  # This file is copied to spec/ when you run &#39;rails generate rspec:install&#39;&#xA;  ENV[&#34;RAILS_ENV&#34;] ||= &#39;test&#39;&#xA;  require &#39;spec_helper&#39;&#xA;  require File.expand_path(&#34;../../config/environment&#34;, __FILE__)&#xA;  require &#39;rspec/rails&#39;&#xA;  require &#39;paper_trail/frameworks/rspec&#39;&#xA;  require &#39;paper_trail/frameworks/cucumber&#39;&#xA;  # ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;7.e. Zeus or Spring&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use the &lt;code&gt;RSpec&lt;/code&gt; or &lt;code&gt;Cucumber&lt;/code&gt; helpers with &lt;a href=&#34;https://github.com/burke/zeus&#34;&gt;Zeus&lt;/a&gt; or &lt;a href=&#34;https://github.com/rails/spring&#34;&gt;Spring&lt;/a&gt;, you will need to manually require the helper(s) in your test helper, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/rails_helper.rb&#xA;&#xA;ENV[&#34;RAILS_ENV&#34;] ||= &#39;test&#39;&#xA;require &#39;spec_helper&#39;&#xA;require File.expand_path(&#34;../../config/environment&#34;, __FILE__)&#xA;require &#39;rspec/rails&#39;&#xA;require &#39;paper_trail/frameworks/rspec&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;8. PaperTrail Plugins&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;paper_trail-active_record&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/westonganger/paper_trail-association_tracking&#34;&gt;paper_trail-association_tracking&lt;/a&gt; - track and reify associations&lt;/li&gt; &#xA; &lt;li&gt;paper_trail-audit&lt;/li&gt; &#xA; &lt;li&gt;paper_trail-background&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ankit1910/paper_trail-globalid&#34;&gt;paper_trail-globalid&lt;/a&gt; - enhances whodunnit by adding an &lt;code&gt;actor&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;paper_trail-hashdiff&lt;/li&gt; &#xA; &lt;li&gt;paper_trail-rails&lt;/li&gt; &#xA; &lt;li&gt;paper_trail-related_changes&lt;/li&gt; &#xA; &lt;li&gt;paper_trail-sinatra&lt;/li&gt; &#xA; &lt;li&gt;paper_trail_actor&lt;/li&gt; &#xA; &lt;li&gt;paper_trail_changes&lt;/li&gt; &#xA; &lt;li&gt;paper_trail_manager&lt;/li&gt; &#xA; &lt;li&gt;paper_trail_scrapbook&lt;/li&gt; &#xA; &lt;li&gt;paper_trail_ui&lt;/li&gt; &#xA; &lt;li&gt;revertible_paper_trail&lt;/li&gt; &#xA; &lt;li&gt;rspec-paper_trail&lt;/li&gt; &#xA; &lt;li&gt;sequel_paper_trail&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;9. Integration with Other Libraries&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/activeadmin/activeadmin/wiki/Auditing-via-paper_trail-%28change-history%29&#34;&gt;ActiveAdmin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fusion94/paper_trail_manager&#34;&gt;paper_trail_manager&lt;/a&gt; - Browse, subscribe, view and revert changes to records with rails and paper_trail&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rikkipitt/rails_admin_history_rollback&#34;&gt;rails_admin_history_rollback&lt;/a&gt; - History rollback for rails_admin with PT&lt;/li&gt; &#xA; &lt;li&gt;Sinatra - &lt;a href=&#34;https://github.com/jaredbeck/paper_trail-sinatra&#34;&gt;paper_trail-sinatra&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/globalize/globalize&#34;&gt;globalize&lt;/a&gt; - &lt;a href=&#34;https://github.com/globalize/globalize-versioning&#34;&gt;globalize-versioning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/solidusio-contrib/solidus_papertrail&#34;&gt;solidus_papertrail&lt;/a&gt; - PT integration for Solidus method to instances of PaperTrail::Version that returns the ActiveRecord object who was responsible for change&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;10. Related Libraries and Ports&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/izelnakri/paper_trail&#34;&gt;izelnakri/paper_trail&lt;/a&gt; - An Ecto library, inspired by PT.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nielsgl/sequelize-paper-trail&#34;&gt;sequelize-paper-trail&lt;/a&gt; - A JS library, inspired by PT. A sequelize plugin for tracking revision history of model instances.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Articles&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stevepolito.design/blog/paper-trail-gem-tutorial/&#34;&gt;PaperTrail Gem Tutorial&lt;/a&gt;, 20th April 2020.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://samurails.com/gems/papertrail/&#34;&gt;Jutsu #8 - Version your RoR models with PaperTrail&lt;/a&gt;, &lt;a href=&#34;http://samurails.com/about-me/&#34;&gt;Thibault&lt;/a&gt;, 29th September 2014&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.sitepoint.com/versioning-papertrail&#34;&gt;Versioning with PaperTrail&lt;/a&gt;, &lt;a href=&#34;http://www.sitepoint.com/author/ibodrov&#34;&gt;Ilya Bodrov&lt;/a&gt;, 10th April 2014&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://web.archive.org/web/20141120233916/http://rubyrailsexpert.com/?p=36&#34;&gt;Using PaperTrail to track stack traces&lt;/a&gt;, T James Corcoran&#39;s blog, 1st October 2013.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://railscasts.com/episodes/255-undo-with-paper-trail&#34;&gt;RailsCast #255 - Undo with PaperTrail&lt;/a&gt;, 28th February 2011.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.linux-mag.com/id/7528&#34;&gt;Keep a Paper Trail with PaperTrail&lt;/a&gt;, Linux Magazine, 16th September 2009.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Problems&lt;/h2&gt; &#xA;&lt;p&gt;Please use GitHub&#39;s &lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail/issues&#34;&gt;issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Created by Andy Stewart in 2010, maintained since 2012 by Ben Atkins, since 2015 by Jared Beck, with contributions by over 150 people.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail/graphs/contributors&#34;&gt;https://github.com/paper-trail-gem/paper_trail/graphs/contributors&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See our &lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail/raw/master/.github/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Inspirations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jerome/simply_versioned&#34;&gt;Simply Versioned&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/collectiveidea/audited&#34;&gt;Acts As Audited&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Intellectual Property&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2011 Andy Stewart (&lt;a href=&#34;mailto:boss@airbladesoftware.com&#34;&gt;boss@airbladesoftware.com&lt;/a&gt;). Released under the MIT licence.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lostisland/faraday</title>
    <updated>2022-08-21T02:07:06Z</updated>
    <id>tag:github.com,2022-08-21:/lostisland/faraday</id>
    <link href="https://github.com/lostisland/faraday" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple, but flexible HTTP client library, with support for multiple backends.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://lostisland.github.io/faraday&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lostisland/faraday/main/docs/assets/img/repo-card-slim.png&#34; alt=&#34;Faraday&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rubygems.org/gems/faraday&#34;&gt;&lt;img src=&#34;https://badge.fury.io/rb/faraday.svg?sanitize=true&#34; alt=&#34;Gem Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/lostisland/faraday/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/lostisland/faraday/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/lostisland/faraday/discussions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/discussions/lostisland/faraday?logo=github&#34; alt=&#34;GitHub Discussions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Faraday is an HTTP client library abstraction layer that provides a common interface over many adapters (such as Net::HTTP) and embraces the concept of Rack middleware when processing the request/response cycle. You probably don&#39;t want to use Faraday directly in your project, as it will lack an actual client library to perform requests. Instead, you probably want to have a look at &lt;a href=&#34;https://github.com/lostisland/awesome-faraday/#adapters&#34;&gt;Awesome Faraday&lt;/a&gt; for a list of available adapters.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;The best starting point is the &lt;a href=&#34;https://lostisland.github.io/faraday&#34;&gt;Faraday Website&lt;/a&gt;, with its introduction and explanation. Need more details? See the &lt;a href=&#34;https://www.rubydoc.info/github/lostisland/faraday&#34;&gt;Faraday API Documentation&lt;/a&gt; to see how it works internally.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Ruby versions&lt;/h2&gt; &#xA;&lt;p&gt;This library aims to support and is &lt;a href=&#34;https://github.com/lostisland/faraday/actions&#34;&gt;tested against&lt;/a&gt; the currently officially supported Ruby implementations. This means that, even without a major release, we could add or drop support for Ruby versions, following their &lt;a href=&#34;https://endoflife.date/ruby&#34;&gt;EOL&lt;/a&gt;. Currently that means we support Ruby 2.6+&lt;/p&gt; &#xA;&lt;p&gt;If something doesn&#39;t work on one of these Ruby versions, it&#39;s a bug.&lt;/p&gt; &#xA;&lt;p&gt;This library may inadvertently work (or seem to work) on other Ruby implementations and versions, however support will only be provided for the versions listed above.&lt;/p&gt; &#xA;&lt;p&gt;If you would like this library to support another Ruby version, you may volunteer to be a maintainer. Being a maintainer entails making sure all tests run and pass on that implementation. When something breaks on your implementation, you will be responsible for providing patches in a timely fashion. If critical issues for a particular implementation exist at the time of a major release, support for that Ruby version may be dropped.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Do you want to contribute to Faraday? Open the issues page and check for the &lt;code&gt;help wanted&lt;/code&gt; label! But before you start coding, please read our &lt;a href=&#34;https://github.com/lostisland/faraday/raw/master/.github/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;© 2009 - 2022, the &lt;a href=&#34;https://lostisland.github.io/faraday/team&#34;&gt;Faraday Team&lt;/a&gt;. Website and branding design by &lt;a href=&#34;https://elelopic.design&#34;&gt;Elena Lo Piccolo&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>